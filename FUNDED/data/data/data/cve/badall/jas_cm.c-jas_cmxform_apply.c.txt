-----label-----
1
-----code-----
int jas_cmxform_apply(jas_cmxform_t *xform, jas_cmpixmap_t *in, jas_cmpixmap_t *out)
{
	jas_cmcmptfmt_t *fmt;
	jas_cmreal_t buf[2][APPLYBUFSIZ];
	jas_cmpxformseq_t *pxformseq;
	int i;
	int j;
	int width;
	int height;
	int total;
	int n;
	jas_cmreal_t *inbuf;
	jas_cmreal_t *outbuf;
	jas_cmpxform_t *pxform;
	long *dataptr;
	int maxchans;
	int bufmax;
	int m;
	int bias;
	jas_cmreal_t scale;
	long v;
	jas_cmreal_t *bufptr;

	if (xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts)
		goto error;

	fmt = &in->cmptfmts[0];
	width = fmt->width;
	height = fmt->height;
	for (i = 1; i < xform->numinchans; ++i) {
		fmt = &in->cmptfmts[i];
		if (fmt->width != width || fmt->height != height) {
			goto error;
		}
	}
	for (i = 0; i < xform->numoutchans; ++i) {
		fmt = &out->cmptfmts[i];
		if (fmt->width != width || fmt->height != height) {
			goto error;
		}
	}

	maxchans = 0;
	pxformseq = xform->pxformseq;
	for (i = 0; i < pxformseq->numpxforms; ++i) {
		pxform = pxformseq->pxforms[i];
		if (pxform->numinchans > maxchans) {
			maxchans = pxform->numinchans;
		}
		if (pxform->numoutchans > maxchans) {
			maxchans = pxform->numoutchans;
		}
	}
	bufmax = APPLYBUFSIZ / maxchans;
	assert(bufmax > 0);

	total = width * height;
	n = 0;
	while (n < total) {

		inbuf = &buf[0][0];
		m = JAS_MIN(total - n, bufmax);

		for (i = 0; i < xform->numinchans; ++i) {
			fmt = &in->cmptfmts[i];
			scale = (double)((1 << fmt->prec) - 1);
			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;
			dataptr = &fmt->buf[n];
			bufptr = &inbuf[i];
			for (j = 0; j < m; ++j) {
				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))
					goto error;
				*bufptr = (v - bias) / scale;
				bufptr += xform->numinchans;
			}
		}

		inbuf = &buf[0][0];
		outbuf = inbuf;
		for (i = 0; i < pxformseq->numpxforms; ++i) {
			pxform = pxformseq->pxforms[i];
			if (pxform->numoutchans > pxform->numinchans) {
				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];
			} else {
				outbuf = inbuf;
			}
			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))
				goto error;
			inbuf = outbuf;
		}

		for (i = 0; i < xform->numoutchans; ++i) {
			fmt = &out->cmptfmts[i];
			scale = (double)((1 << fmt->prec) - 1);
			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;
			bufptr = &outbuf[i];
			dataptr = &fmt->buf[n];
			for (j = 0; j < m; ++j) {
				v = (*bufptr) * scale + bias;
				bufptr += xform->numoutchans;
				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))
					goto error;
			}
		}
	
		n += m;
	}
	
	return 0;
error:
	return -1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
23,42
23,43
23,44
23,45
23,46
23,47
23,48
23,49
23,50
23,51
23,52
23,53
23,54
23,55
23,56
23,57
23,58
23,59
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
37,38
39,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
52,53
54,55
55,56
55,57
57,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
72,73
74,75
75,76
75,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
86,87
87,88
87,89
88,89
90,91
90,92
93,94
94,95
94,96
95,96
97,98
97,99
100,101
101,102
101,103
103,104
103,105
106,107
107,108
107,109
109,110
111,112
112,113
112,114
114,115
116,117
117,118
117,119
119,120
121,122
122,123
122,124
124,125
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
135,136
137,138
138,139
138,140
139,140
141,142
141,143
144,145
144,146
145,146
145,147
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
155,156
155,157
156,157
156,158
157,158
160,161
160,162
161,162
164,165
166,167
167,168
167,169
168,169
170,171
171,172
171,173
172,173
172,174
173,174
177,178
178,179
178,180
179,180
181,182
181,183
182,183
185,186
186,187
186,188
187,188
189,190
189,191
190,191
193,194
193,195
193,196
193,197
194,195
195,196
195,197
196,197
199,200
199,201
200,201
202,203
202,204
203,204
206,207
207,208
209,210
209,211
210,211
211,212
211,213
212,213
214,215
215,216
215,217
216,217
216,218
217,218
220,221
222,223
222,224
223,224
223,225
224,225
224,226
225,226
225,227
226,227
229,230
231,232
231,233
232,233
232,234
233,234
236,237
238,239
239,240
241,242
241,243
241,244
241,245
242,243
243,244
243,245
244,245
247,248
247,249
248,249
250,251
250,252
251,252
254,255
255,256
257,258
257,259
258,259
259,260
259,261
260,261
262,263
263,264
263,265
264,265
264,266
265,266
268,269
270,271
270,272
271,272
271,273
272,273
272,274
273,274
273,275
274,275
277,278
279,280
279,281
280,281
280,282
281,282
284,285
286,287
287,288
289,290
290,291
290,292
291,292
294,295
295,296
295,297
296,297
298,299
298,300
299,300
302,303
302,304
302,305
302,306
303,304
304,305
304,306
305,306
308,309
308,310
309,310
311,312
311,313
312,313
315,316
316,317
318,319
318,320
318,321
319,320
320,321
320,322
321,322
323,324
323,325
324,325
324,326
325,326
328,329
330,331
330,332
331,332
331,333
332,333
332,334
333,334
336,337
338,339
339,340
340,341
340,342
341,342
343,344
343,345
344,345
347,348
347,349
348,349
348,350
349,350
349,351
350,351
353,354
355,356
356,357
357,358
357,359
358,359
360,361
360,362
361,362
364,365
365,366
365,367
366,367
368,369
368,370
369,370
371,372
373,374
374,375
374,376
375,376
377,378
377,379
378,379
381,382
382,383
382,384
383,384
385,386
385,387
386,387
388,389
390,391
391,392
391,393
392,393
395,396
395,397
396,397
396,398
397,398
399,400
401,402
401,403
401,404
401,405
401,406
401,407
401,408
401,409
402,403
403,404
403,405
404,405
406,407
407,408
407,409
408,409
408,410
409,410
413,414
414,415
414,416
415,416
417,418
417,419
417,420
418,419
420,421
420,422
421,422
423,424
425,426
427,428
427,429
427,430
427,431
428,429
429,430
429,431
430,431
433,434
433,435
434,435
436,437
436,438
437,438
440,441
441,442
443,444
443,445
443,446
443,447
443,448
443,449
444,445
445,446
445,447
446,447
448,449
449,450
449,451
450,451
450,452
451,452
454,455
456,457
457,458
457,459
458,459
460,461
460,462
461,462
461,463
464,465
465,466
465,467
466,467
467,468
467,469
469,470
469,471
470,471
474,475
475,476
475,477
476,477
478,479
478,480
478,481
479,480
479,481
480,481
483,484
484,485
484,486
486,487
487,488
487,489
488,489
488,490
489,490
494,495
495,496
495,497
496,497
498,499
499,500
499,501
500,501
500,502
501,502
504,505
506,507
507,508
507,509
508,509
510,511
511,512
511,513
512,513
514,515
516,517
516,518
516,519
516,520
517,518
518,519
518,520
519,520
522,523
522,524
523,524
525,526
527,528
528,529
530,531
530,532
530,533
531,532
531,533
532,533
532,534
532,535
532,536
532,537
533,534
535,536
536,537
538,539
538,540
539,540
542,543
542,544
543,544
546,547
547,548
549,550
551,552
552,553
552,554
553,554
554,555
556,557
556,558
557,558
558,559
558,560
559,560
561,562
563,564
565,566
566,567
566,568
567,568
569,570
569,571
570,571
573,574
574,575
574,576
575,576
577,578
578,579
578,580
579,580
579,581
580,581
584,585
585,586
585,587
586,587
588,589
590,591
590,592
590,593
590,594
591,592
592,593
592,594
593,594
596,597
596,598
597,598
599,600
599,601
600,601
603,604
604,605
606,607
606,608
606,609
606,610
607,608
608,609
608,610
609,610
611,612
611,613
612,613
612,614
613,614
616,617
618,619
618,620
618,621
619,620
619,621
620,621
620,622
621,622
624,625
624,626
625,626
628,629
629,630
630,631
630,632
631,632
633,634
633,635
633,636
634,635
635,636
635,637
636,637
638,639
639,640
639,641
640,641
640,642
641,642
645,646
646,647
646,648
647,648
647,649
648,649
652,653
653,654
653,655
654,655
654,656
655,656
659,660
660,661
661,662
661,663
662,663
664,665
666,667
666,668
667,668
667,669
667,670
667,671
667,672
668,669
669,670
670,671
670,672
671,672
671,673
672,673
676,677
678,679
680,681
682,683
684,685
686,687
687,688
687,689
688,689
690,691
692,693
692,694
692,695
692,696
693,694
694,695
694,696
695,696
698,699
698,700
699,700
701,702
701,703
702,703
705,706
706,707
708,709
708,710
708,711
708,712
708,713
708,714
709,710
710,711
710,712
711,712
713,714
714,715
714,716
715,716
715,717
716,717
719,720
721,722
722,723
722,724
723,724
725,726
725,727
726,727
726,728
729,730
730,731
730,732
731,732
732,733
732,734
734,735
734,736
735,736
739,740
740,741
740,742
741,742
743,744
743,745
743,746
744,745
744,746
745,746
748,749
749,750
749,751
751,752
752,753
752,754
753,754
753,755
754,755
759,760
760,761
760,762
761,762
763,764
764,765
764,766
765,766
767,768
769,770
770,771
770,772
771,772
773,774
774,775
774,776
775,776
775,777
776,777
779,780
781,782
781,783
781,784
781,785
782,783
783,784
783,785
784,785
787,788
787,789
788,789
790,791
792,793
793,794
795,796
795,797
795,798
796,797
797,798
797,799
798,799
800,801
800,802
801,802
801,803
802,803
803,804
804,805
806,807
808,809
810,811
811,812
811,813
812,813
814,815
814,816
815,816
818,819
818,820
819,820
819,821
819,822
819,823
819,824
820,821
822,823
823,824
825,826
825,827
826,827
829,830
829,831
830,831
833,834
835,836
837,838
838,839
838,840
839,840
841,842
843,844
845,846
845,847
847,848
848,849
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,29,30,34,36,38,41,45,47,48,51,53,56,58,61,63,66,68,71,73,76,78,82,84,85,89,91,92,96,98,99,102,104,105,108,110,113,115,118,120,123,125,129,131,134,136,140,142,143,149,150,153,154,158,159,162,163,165,169,174,175,176,180,183,184,188,191,192,197,198,201,204,205,208,213,218,219,221,227,228,230,234,235,237,240,245,246,249,252,253,256,261,266,267,269,275,276,278,282,283,285,288,292,293,297,300,301,306,307,310,313,314,317,322,326,327,329,334,335,337,342,345,346,351,352,354,359,362,363,367,370,372,376,379,380,384,387,389,393,394,398,400,405,410,411,412,416,419,422,424,426,431,432,435,438,439,442,447,452,453,455,459,462,463,468,471,472,473,477,481,482,485,490,491,492,493,497,502,503,505,509,513,515,520,521,524,526,529,534,537,540,541,544,545,548,550,555,560,562,564,568,571,572,576,581,582,583,587,589,594,595,598,601,602,605,610,614,615,617,622,623,626,627,632,637,642,643,644,649,650,651,656,657,658,663,665,673,674,675,677,679,681,683,685,689,691,696,697,700,703,704,707,712,717,718,720,724,727,728,733,736,737,738,742,746,747,750,755,756,757,758,762,766,768,772,777,778,780,785,786,789,791,794,799,805,807,809,813,816,817,821,824,827,828,831,832,834,836,840,842,844,846,849
-----computeFrom-----
145,146
145,147
146,147
146,148
155,156
155,157
167,168
167,169
178,179
178,180
186,187
186,188
195,196
195,197
199,200
199,201
211,212
211,213
223,224
223,225
224,225
224,226
231,232
231,233
243,244
243,245
247,248
247,249
259,260
259,261
271,272
271,273
272,273
272,274
279,280
279,281
290,291
290,292
295,296
295,297
304,305
304,306
308,309
308,310
320,321
320,322
331,332
331,333
340,341
340,342
348,349
348,350
357,358
357,359
365,366
365,367
368,369
368,370
377,378
377,379
382,383
382,384
385,386
385,387
391,392
391,393
396,397
396,398
403,404
403,405
414,415
414,416
420,421
420,422
429,430
429,431
433,434
433,435
445,446
445,447
457,458
457,459
465,466
465,467
467,468
467,469
475,476
475,477
484,485
484,486
487,488
487,489
495,496
495,497
507,508
507,509
518,519
518,520
522,523
522,524
552,553
552,554
556,557
556,558
558,559
558,560
566,567
566,568
574,575
574,576
585,586
585,587
592,593
592,594
596,597
596,598
608,609
608,610
619,620
619,621
630,631
630,632
635,636
635,637
661,662
661,663
687,688
687,689
694,695
694,696
698,699
698,700
710,711
710,712
722,723
722,724
730,731
730,732
732,733
732,734
740,741
740,742
749,750
749,751
752,753
752,754
760,761
760,762
770,771
770,772
783,784
783,785
787,788
787,789
797,798
797,799
800,801
800,802
801,802
801,803
811,812
811,813
838,839
838,840
-----guardedBy-----
334,345
337,342
335,346
352,363
351,362
354,359
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
int jas_cmxform_apply(jas_cmxform_t *xform, jas_cmpixmap_t *in, jas_cmpixmap_t *out){	jas_cmcmptfmt_t *fmt;	jas_cmreal_t buf[2][APPLYBUFSIZ];	jas_cmpxformseq_t *pxformseq;	int i;	int j;	int width;	int height;	int total;	int n;	jas_cmreal_t *inbuf;	jas_cmreal_t *outbuf;	jas_cmpxform_t *pxform;	long *dataptr;	int maxchans;	int bufmax;	int m;	int bias;	jas_cmreal_t scale;	long v;	jas_cmreal_t *bufptr;	if (xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts)		goto error;	fmt = &in->cmptfmts[0];	width = fmt->width;	height = fmt->height;	for (i = 1; i < xform->numinchans; ++i) {		fmt = &in->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}	for (i = 0; i < xform->numoutchans; ++i) {		fmt = &out->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}	maxchans = 0;	pxformseq = xform->pxformseq;	for (i = 0; i < pxformseq->numpxforms; ++i) {		pxform = pxformseq->pxforms[i];		if (pxform->numinchans > maxchans) {			maxchans = pxform->numinchans;		}		if (pxform->numoutchans > maxchans) {			maxchans = pxform->numoutchans;		}	}	bufmax = APPLYBUFSIZ / maxchans;	assert(bufmax > 0);	total = width * height;	n = 0;	while (n < total) {		inbuf = &buf[0][0];		m = JAS_MIN(total - n, bufmax);		for (i = 0; i < xform->numinchans; ++i) {			fmt = &in->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			dataptr = &fmt->buf[n];			bufptr = &inbuf[i];			for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}		}		inbuf = &buf[0][0];		outbuf = inbuf;		for (i = 0; i < pxformseq->numpxforms; ++i) {			pxform = pxformseq->pxforms[i];			if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;			inbuf = outbuf;		}		for (i = 0; i < xform->numoutchans; ++i) {			fmt = &out->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			bufptr = &outbuf[i];			dataptr = &fmt->buf[n];			for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}		}			n += m;	}		return 0;error:	return -1;}
int
jas_cmxform_apply(jas_cmxform_t *xform, jas_cmpixmap_t *in, jas_cmpixmap_t *out)
jas_cmxform_apply
jas_cmxform_t *xform
jas_cmxform_t
jas_cmxform_t
*xform
*
xform
jas_cmpixmap_t *in
jas_cmpixmap_t
jas_cmpixmap_t
*in
*
in
jas_cmpixmap_t *out
jas_cmpixmap_t
jas_cmpixmap_t
*out
*
out
{	jas_cmcmptfmt_t *fmt;	jas_cmreal_t buf[2][APPLYBUFSIZ];	jas_cmpxformseq_t *pxformseq;	int i;	int j;	int width;	int height;	int total;	int n;	jas_cmreal_t *inbuf;	jas_cmreal_t *outbuf;	jas_cmpxform_t *pxform;	long *dataptr;	int maxchans;	int bufmax;	int m;	int bias;	jas_cmreal_t scale;	long v;	jas_cmreal_t *bufptr;	if (xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts)		goto error;	fmt = &in->cmptfmts[0];	width = fmt->width;	height = fmt->height;	for (i = 1; i < xform->numinchans; ++i) {		fmt = &in->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}	for (i = 0; i < xform->numoutchans; ++i) {		fmt = &out->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}	maxchans = 0;	pxformseq = xform->pxformseq;	for (i = 0; i < pxformseq->numpxforms; ++i) {		pxform = pxformseq->pxforms[i];		if (pxform->numinchans > maxchans) {			maxchans = pxform->numinchans;		}		if (pxform->numoutchans > maxchans) {			maxchans = pxform->numoutchans;		}	}	bufmax = APPLYBUFSIZ / maxchans;	assert(bufmax > 0);	total = width * height;	n = 0;	while (n < total) {		inbuf = &buf[0][0];		m = JAS_MIN(total - n, bufmax);		for (i = 0; i < xform->numinchans; ++i) {			fmt = &in->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			dataptr = &fmt->buf[n];			bufptr = &inbuf[i];			for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}		}		inbuf = &buf[0][0];		outbuf = inbuf;		for (i = 0; i < pxformseq->numpxforms; ++i) {			pxform = pxformseq->pxforms[i];			if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;			inbuf = outbuf;		}		for (i = 0; i < xform->numoutchans; ++i) {			fmt = &out->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			bufptr = &outbuf[i];			dataptr = &fmt->buf[n];			for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}		}			n += m;	}		return 0;error:	return -1;}
jas_cmcmptfmt_t *fmt;
jas_cmcmptfmt_t *fmt;
jas_cmcmptfmt_t
jas_cmcmptfmt_t
*fmt
*
fmt
jas_cmreal_t buf[2][APPLYBUFSIZ];
jas_cmreal_t buf[2][APPLYBUFSIZ];
jas_cmreal_t
jas_cmreal_t
buf[2][APPLYBUFSIZ]
buf
[2]
2
[APPLYBUFSIZ]
APPLYBUFSIZ
APPLYBUFSIZ
jas_cmpxformseq_t *pxformseq;
jas_cmpxformseq_t *pxformseq;
jas_cmpxformseq_t
jas_cmpxformseq_t
*pxformseq
*
pxformseq
int i;
int i;
int
i
i
int j;
int j;
int
j
j
int width;
int width;
int
width
width
int height;
int height;
int
height
height
int total;
int total;
int
total
total
int n;
int n;
int
n
n
jas_cmreal_t *inbuf;
jas_cmreal_t *inbuf;
jas_cmreal_t
jas_cmreal_t
*inbuf
*
inbuf
jas_cmreal_t *outbuf;
jas_cmreal_t *outbuf;
jas_cmreal_t
jas_cmreal_t
*outbuf
*
outbuf
jas_cmpxform_t *pxform;
jas_cmpxform_t *pxform;
jas_cmpxform_t
jas_cmpxform_t
*pxform
*
pxform
long *dataptr;
long *dataptr;
long
*dataptr
*
dataptr
int maxchans;
int maxchans;
int
maxchans
maxchans
int bufmax;
int bufmax;
int
bufmax
bufmax
int m;
int m;
int
m
m
int bias;
int bias;
int
bias
bias
jas_cmreal_t scale;
jas_cmreal_t scale;
jas_cmreal_t
jas_cmreal_t
scale
scale
long v;
long v;
long
v
v
jas_cmreal_t *bufptr;
jas_cmreal_t *bufptr;
jas_cmreal_t
jas_cmreal_t
*bufptr
*
bufptr
if (xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts)		goto error;
xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts
xform->numinchans > in->numcmpts
xform->numinchans
xform
xform
numinchans
in->numcmpts
in
in
numcmpts
xform->numoutchans > out->numcmpts
xform->numoutchans
xform
xform
numoutchans
out->numcmpts
out
out
numcmpts
goto error;
error
fmt = &in->cmptfmts[0];
fmt = &in->cmptfmts[0]
fmt
fmt
&in->cmptfmts[0]
in->cmptfmts[0]
in->cmptfmts
in
in
cmptfmts
0
width = fmt->width;
width = fmt->width
width
width
fmt->width
fmt
fmt
width
height = fmt->height;
height = fmt->height
height
height
fmt->height
fmt
fmt
height
for (i = 1; i < xform->numinchans; ++i) {		fmt = &in->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}
i = 1;
i = 1
i
i
1
i < xform->numinchans
i
i
xform->numinchans
xform
xform
numinchans
++i
i
i
{		fmt = &in->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}
fmt = &in->cmptfmts[i];
fmt = &in->cmptfmts[i]
fmt
fmt
&in->cmptfmts[i]
in->cmptfmts[i]
in->cmptfmts
in
in
cmptfmts
i
i
if (fmt->width != width || fmt->height != height) {			goto error;		}
fmt->width != width || fmt->height != height
fmt->width != width
fmt->width
fmt
fmt
width
width
width
fmt->height != height
fmt->height
fmt
fmt
height
height
height
{			goto error;		}
goto error;
error
for (i = 0; i < xform->numoutchans; ++i) {		fmt = &out->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}
i = 0;
i = 0
i
i
0
i < xform->numoutchans
i
i
xform->numoutchans
xform
xform
numoutchans
++i
i
i
{		fmt = &out->cmptfmts[i];		if (fmt->width != width || fmt->height != height) {			goto error;		}	}
fmt = &out->cmptfmts[i];
fmt = &out->cmptfmts[i]
fmt
fmt
&out->cmptfmts[i]
out->cmptfmts[i]
out->cmptfmts
out
out
cmptfmts
i
i
if (fmt->width != width || fmt->height != height) {			goto error;		}
fmt->width != width || fmt->height != height
fmt->width != width
fmt->width
fmt
fmt
width
width
width
fmt->height != height
fmt->height
fmt
fmt
height
height
height
{			goto error;		}
goto error;
error
maxchans = 0;
maxchans = 0
maxchans
maxchans
0
pxformseq = xform->pxformseq;
pxformseq = xform->pxformseq
pxformseq
pxformseq
xform->pxformseq
xform
xform
pxformseq
for (i = 0; i < pxformseq->numpxforms; ++i) {		pxform = pxformseq->pxforms[i];		if (pxform->numinchans > maxchans) {			maxchans = pxform->numinchans;		}		if (pxform->numoutchans > maxchans) {			maxchans = pxform->numoutchans;		}	}
i = 0;
i = 0
i
i
0
i < pxformseq->numpxforms
i
i
pxformseq->numpxforms
pxformseq
pxformseq
numpxforms
++i
i
i
{		pxform = pxformseq->pxforms[i];		if (pxform->numinchans > maxchans) {			maxchans = pxform->numinchans;		}		if (pxform->numoutchans > maxchans) {			maxchans = pxform->numoutchans;		}	}
pxform = pxformseq->pxforms[i];
pxform = pxformseq->pxforms[i]
pxform
pxform
pxformseq->pxforms[i]
pxformseq->pxforms
pxformseq
pxformseq
pxforms
i
i
if (pxform->numinchans > maxchans) {			maxchans = pxform->numinchans;		}
pxform->numinchans > maxchans
pxform->numinchans
pxform
pxform
numinchans
maxchans
maxchans
{			maxchans = pxform->numinchans;		}
maxchans = pxform->numinchans;
maxchans = pxform->numinchans
maxchans
maxchans
pxform->numinchans
pxform
pxform
numinchans
if (pxform->numoutchans > maxchans) {			maxchans = pxform->numoutchans;		}
pxform->numoutchans > maxchans
pxform->numoutchans
pxform
pxform
numoutchans
maxchans
maxchans
{			maxchans = pxform->numoutchans;		}
maxchans = pxform->numoutchans;
maxchans = pxform->numoutchans
maxchans
maxchans
pxform->numoutchans
pxform
pxform
numoutchans
bufmax = APPLYBUFSIZ / maxchans;
bufmax = APPLYBUFSIZ / maxchans
bufmax
bufmax
APPLYBUFSIZ / maxchans
APPLYBUFSIZ
APPLYBUFSIZ
maxchans
maxchans
assert(bufmax > 0);
assert(bufmax > 0)
assert
assert
bufmax > 0
bufmax
bufmax
0
total = width * height;
total = width * height
total
total
width * height
width
width
height
height
n = 0;
n = 0
n
n
0
while (n < total) {		inbuf = &buf[0][0];		m = JAS_MIN(total - n, bufmax);		for (i = 0; i < xform->numinchans; ++i) {			fmt = &in->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			dataptr = &fmt->buf[n];			bufptr = &inbuf[i];			for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}		}		inbuf = &buf[0][0];		outbuf = inbuf;		for (i = 0; i < pxformseq->numpxforms; ++i) {			pxform = pxformseq->pxforms[i];			if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;			inbuf = outbuf;		}		for (i = 0; i < xform->numoutchans; ++i) {			fmt = &out->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			bufptr = &outbuf[i];			dataptr = &fmt->buf[n];			for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}		}			n += m;	}
n < total
n
n
total
total
{		inbuf = &buf[0][0];		m = JAS_MIN(total - n, bufmax);		for (i = 0; i < xform->numinchans; ++i) {			fmt = &in->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			dataptr = &fmt->buf[n];			bufptr = &inbuf[i];			for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}		}		inbuf = &buf[0][0];		outbuf = inbuf;		for (i = 0; i < pxformseq->numpxforms; ++i) {			pxform = pxformseq->pxforms[i];			if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;			inbuf = outbuf;		}		for (i = 0; i < xform->numoutchans; ++i) {			fmt = &out->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			bufptr = &outbuf[i];			dataptr = &fmt->buf[n];			for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}		}			n += m;	}
inbuf = &buf[0][0];
inbuf = &buf[0][0]
inbuf
inbuf
&buf[0][0]
buf[0][0]
buf[0]
buf
buf
0
0
m = JAS_MIN(total - n, bufmax);
m = JAS_MIN(total - n, bufmax)
m
m
JAS_MIN(total - n, bufmax)
JAS_MIN
JAS_MIN
total - n
total
total
n
n
bufmax
bufmax
for (i = 0; i < xform->numinchans; ++i) {			fmt = &in->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			dataptr = &fmt->buf[n];			bufptr = &inbuf[i];			for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}		}
i = 0;
i = 0
i
i
0
i < xform->numinchans
i
i
xform->numinchans
xform
xform
numinchans
++i
i
i
{			fmt = &in->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			dataptr = &fmt->buf[n];			bufptr = &inbuf[i];			for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}		}
fmt = &in->cmptfmts[i];
fmt = &in->cmptfmts[i]
fmt
fmt
&in->cmptfmts[i]
in->cmptfmts[i]
in->cmptfmts
in
in
cmptfmts
i
i
scale = (double)((1 << fmt->prec) - 1);
scale = (double)((1 << fmt->prec) - 1)
scale
scale
(double)((1 << fmt->prec) - 1)
double
double

((1 << fmt->prec) - 1)
(1 << fmt->prec) - 1
(1 << fmt->prec)
1 << fmt->prec
1
fmt->prec
fmt
fmt
prec
1
bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;
bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0
bias
bias
fmt->sgnd ? (1 << (fmt->prec - 1)) : 0
fmt->sgnd
fmt
fmt
sgnd
(1 << (fmt->prec - 1))
1 << (fmt->prec - 1)
1
(fmt->prec - 1)
fmt->prec - 1
fmt->prec
fmt
fmt
prec
1
0
dataptr = &fmt->buf[n];
dataptr = &fmt->buf[n]
dataptr
dataptr
&fmt->buf[n]
fmt->buf[n]
fmt->buf
fmt
fmt
buf
n
n
bufptr = &inbuf[i];
bufptr = &inbuf[i]
bufptr
bufptr
&inbuf[i]
inbuf[i]
inbuf
inbuf
i
i
for (j = 0; j < m; ++j) {				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}
j = 0;
j = 0
j
j
0
j < m
j
j
m
m
++j
j
j
{				if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;				*bufptr = (v - bias) / scale;				bufptr += xform->numinchans;			}
if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v))					goto error;
jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v)
jas_cmgetint
jas_cmgetint
&dataptr
dataptr
dataptr
fmt->sgnd
fmt
fmt
sgnd
fmt->prec
fmt
fmt
prec
&v
v
v
goto error;
error
*bufptr = (v - bias) / scale;
*bufptr = (v - bias) / scale
*bufptr
bufptr
bufptr
(v - bias) / scale
(v - bias)
v - bias
v
v
bias
bias
scale
scale
bufptr += xform->numinchans;
bufptr += xform->numinchans
bufptr
bufptr
xform->numinchans
xform
xform
numinchans
inbuf = &buf[0][0];
inbuf = &buf[0][0]
inbuf
inbuf
&buf[0][0]
buf[0][0]
buf[0]
buf
buf
0
0
outbuf = inbuf;
outbuf = inbuf
outbuf
outbuf
inbuf
inbuf
for (i = 0; i < pxformseq->numpxforms; ++i) {			pxform = pxformseq->pxforms[i];			if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;			inbuf = outbuf;		}
i = 0;
i = 0
i
i
0
i < pxformseq->numpxforms
i
i
pxformseq->numpxforms
pxformseq
pxformseq
numpxforms
++i
i
i
{			pxform = pxformseq->pxforms[i];			if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}			if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;			inbuf = outbuf;		}
pxform = pxformseq->pxforms[i];
pxform = pxformseq->pxforms[i]
pxform
pxform
pxformseq->pxforms[i]
pxformseq->pxforms
pxformseq
pxformseq
pxforms
i
i
if (pxform->numoutchans > pxform->numinchans) {				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			} else {				outbuf = inbuf;			}
pxform->numoutchans > pxform->numinchans
pxform->numoutchans
pxform
pxform
numoutchans
pxform->numinchans
pxform
pxform
numinchans
{				outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];			}
outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0];
outbuf = (inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0]
outbuf
outbuf
(inbuf == &buf[0][0]) ? &buf[1][0] : &buf[0][0]
(inbuf == &buf[0][0])
inbuf == &buf[0][0]
inbuf
inbuf
&buf[0][0]
buf[0][0]
buf[0]
buf
buf
0
0
&buf[1][0]
buf[1][0]
buf[1]
buf
buf
1
0
&buf[0][0]
buf[0][0]
buf[0]
buf
buf
0
0
{				outbuf = inbuf;			}
outbuf = inbuf;
outbuf = inbuf
outbuf
outbuf
inbuf
inbuf
if ((*pxform->ops->apply)(pxform, inbuf, outbuf, m))				goto error;
(*pxform->ops->apply)(pxform, inbuf, outbuf, m)
(*pxform->ops->apply)
*pxform->ops->apply
pxform->ops->apply
pxform->ops
pxform
pxform
ops
apply
pxform
pxform
inbuf
inbuf
outbuf
outbuf
m
m
goto error;
error
inbuf = outbuf;
inbuf = outbuf
inbuf
inbuf
outbuf
outbuf
for (i = 0; i < xform->numoutchans; ++i) {			fmt = &out->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			bufptr = &outbuf[i];			dataptr = &fmt->buf[n];			for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}		}
i = 0;
i = 0
i
i
0
i < xform->numoutchans
i
i
xform->numoutchans
xform
xform
numoutchans
++i
i
i
{			fmt = &out->cmptfmts[i];			scale = (double)((1 << fmt->prec) - 1);			bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;			bufptr = &outbuf[i];			dataptr = &fmt->buf[n];			for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}		}
fmt = &out->cmptfmts[i];
fmt = &out->cmptfmts[i]
fmt
fmt
&out->cmptfmts[i]
out->cmptfmts[i]
out->cmptfmts
out
out
cmptfmts
i
i
scale = (double)((1 << fmt->prec) - 1);
scale = (double)((1 << fmt->prec) - 1)
scale
scale
(double)((1 << fmt->prec) - 1)
double
double

((1 << fmt->prec) - 1)
(1 << fmt->prec) - 1
(1 << fmt->prec)
1 << fmt->prec
1
fmt->prec
fmt
fmt
prec
1
bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0;
bias = fmt->sgnd ? (1 << (fmt->prec - 1)) : 0
bias
bias
fmt->sgnd ? (1 << (fmt->prec - 1)) : 0
fmt->sgnd
fmt
fmt
sgnd
(1 << (fmt->prec - 1))
1 << (fmt->prec - 1)
1
(fmt->prec - 1)
fmt->prec - 1
fmt->prec
fmt
fmt
prec
1
0
bufptr = &outbuf[i];
bufptr = &outbuf[i]
bufptr
bufptr
&outbuf[i]
outbuf[i]
outbuf
outbuf
i
i
dataptr = &fmt->buf[n];
dataptr = &fmt->buf[n]
dataptr
dataptr
&fmt->buf[n]
fmt->buf[n]
fmt->buf
fmt
fmt
buf
n
n
for (j = 0; j < m; ++j) {				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}
j = 0;
j = 0
j
j
0
j < m
j
j
m
m
++j
j
j
{				v = (*bufptr) * scale + bias;				bufptr += xform->numoutchans;				if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;			}
v = (*bufptr) * scale + bias;
v = (*bufptr) * scale + bias
v
v
(*bufptr) * scale + bias
(*bufptr) * scale
(*bufptr)
*bufptr
bufptr
bufptr
scale
scale
bias
bias
bufptr += xform->numoutchans;
bufptr += xform->numoutchans
bufptr
bufptr
xform->numoutchans
xform
xform
numoutchans
if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v))					goto error;
jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v)
jas_cmputint
jas_cmputint
&dataptr
dataptr
dataptr
fmt->sgnd
fmt
fmt
sgnd
fmt->prec
fmt
fmt
prec
v
v
goto error;
error
n += m;
n += m
n
n
m
m
return 0;
0
error:	return -1;
error
return -1;
-1
1
-----joern-----
(303,334,0)
(317,92,0)
(258,414,0)
(301,151,0)
(370,153,0)
(407,201,0)
(47,393,0)
(290,47,0)
(423,158,0)
(90,12,0)
(272,11,0)
(476,90,0)
(157,273,0)
(116,258,0)
(133,452,0)
(475,334,0)
(96,313,0)
(45,255,0)
(69,314,0)
(455,27,0)
(487,334,0)
(214,79,0)
(331,334,0)
(318,100,0)
(267,51,0)
(430,181,0)
(44,141,0)
(152,269,0)
(396,275,0)
(493,23,0)
(255,131,0)
(308,323,0)
(3,334,0)
(243,56,0)
(162,362,0)
(427,334,0)
(36,332,0)
(439,107,0)
(407,317,0)
(121,136,0)
(159,335,0)
(140,60,0)
(481,241,0)
(64,422,0)
(126,433,0)
(277,161,0)
(398,260,0)
(270,400,0)
(476,37,0)
(471,179,0)
(446,361,0)
(161,51,0)
(151,148,0)
(13,425,0)
(168,84,0)
(424,198,0)
(223,411,0)
(246,13,0)
(94,148,0)
(472,92,0)
(228,189,0)
(231,179,0)
(190,461,0)
(100,181,0)
(134,429,0)
(108,299,0)
(336,370,0)
(19,69,0)
(450,334,0)
(91,61,0)
(131,255,0)
(107,439,0)
(158,466,0)
(407,37,0)
(104,296,0)
(138,321,0)
(392,176,0)
(186,481,0)
(189,390,0)
(352,361,0)
(112,155,0)
(412,348,0)
(448,236,0)
(196,283,0)
(419,375,0)
(258,116,0)
(109,119,0)
(149,107,0)
(76,268,0)
(8,353,0)
(289,311,0)
(369,489,0)
(142,0,0)
(406,33,0)
(33,48,0)
(351,410,0)
(84,51,0)
(247,269,0)
(49,363,0)
(24,378,0)
(155,321,0)
(333,425,0)
(130,37,0)
(0,448,0)
(382,105,0)
(68,472,0)
(482,466,0)
(32,350,0)
(227,60,0)
(448,212,0)
(124,243,0)
(188,95,0)
(361,352,0)
(286,365,0)
(87,313,0)
(362,431,0)
(191,334,0)
(316,363,0)
(283,9,0)
(323,466,0)
(70,10,0)
(372,364,0)
(50,80,0)
(322,321,0)
(99,432,0)
(249,230,0)
(106,295,0)
(193,358,0)
(55,433,0)
(260,398,0)
(232,310,0)
(490,320,0)
(456,232,0)
(365,313,0)
(411,296,0)
(180,51,0)
(485,130,0)
(314,341,0)
(296,241,0)
(378,24,0)
(50,161,0)
(396,396,0)
(60,362,0)
(37,476,0)
(130,472,0)
(444,384,0)
(115,151,0)
(198,358,0)
(113,96,0)
(188,396,0)
(196,421,0)
(435,116,0)
(215,84,0)
(470,67,0)
(431,362,0)
(483,149,0)
(98,33,0)
(163,370,0)
(459,186,0)
(431,193,0)
(74,30,0)
(33,98,0)
(10,425,0)
(57,186,0)
(276,448,0)
(105,212,0)
(493,198,0)
(53,358,0)
(228,304,0)
(34,293,0)
(136,334,0)
(22,363,0)
(393,47,0)
(16,216,0)
(303,158,0)
(369,260,0)
(280,79,0)
(238,353,0)
(51,334,0)
(296,411,0)
(229,355,0)
(141,333,0)
(429,378,0)
(117,220,0)
(271,310,0)
(236,448,0)
(73,334,0)
(262,347,0)
(98,334,0)
(122,334,0)
(461,202,0)
(373,366,0)
(465,201,0)
(221,317,0)
(174,334,0)
(0,119,0)
(265,386,0)
(107,149,0)
(336,79,0)
(131,130,0)
(347,262,0)
(390,390,0)
(239,92,0)
(361,53,0)
(170,340,0)
(221,194,0)
(312,334,0)
(253,125,0)
(198,493,0)
(28,334,0)
(61,11,0)
(439,317,0)
(23,87,0)
(271,482,0)
(285,128,0)
(211,90,0)
(167,389,0)
(179,212,0)
(449,80,0)
(335,189,0)
(101,109,0)
(436,9,0)
(347,10,0)
(77,273,0)
(304,212,0)
(329,47,0)
(367,149,0)
(464,304,0)
(323,32,0)
(95,188,0)
(411,153,0)
(105,382,0)
(393,268,0)
(460,359,0)
(396,467,0)
(394,300,0)
(151,340,0)
(489,20,0)
(453,20,0)
(441,411,0)
(242,261,0)
(232,390,0)
(363,384,0)
(428,203,0)
(385,115,0)
(298,106,0)
(244,193,0)
(381,290,0)
(452,133,0)
(259,0,0)
(233,333,0)
(22,448,0)
(119,0,0)
(42,37,0)
(492,265,0)
(188,255,0)
(460,262,0)
(348,358,0)
(203,176,0)
(110,213,0)
(268,320,0)
(357,461,0)
(295,106,0)
(486,467,0)
(161,50,0)
(462,334,0)
(201,395,0)
(447,18,0)
(275,153,0)
(283,334,0)
(56,32,0)
(421,9,0)
(115,422,0)
(14,80,0)
(195,300,0)
(257,198,0)
(240,334,0)
(370,336,0)
(184,355,0)
(132,421,0)
(221,24,0)
(229,422,0)
(56,125,0)
(180,340,0)
(335,448,0)
(319,80,0)
(225,50,0)
(387,488,0)
(250,265,0)
(442,336,0)
(415,396,0)
(310,334,0)
(213,153,0)
(493,348,0)
(111,295,0)
(252,476,0)
(278,395,0)
(186,425,0)
(217,481,0)
(333,141,0)
(15,275,0)
(382,290,0)
(207,305,0)
(175,27,0)
(429,18,0)
(332,153,0)
(433,55,0)
(125,334,0)
(326,79,0)
(379,477,0)
(416,390,0)
(130,311,0)
(100,314,0)
(271,390,0)
(328,323,0)
(323,422,0)
(362,60,0)
(221,476,0)
(54,460,0)
(116,49,0)
(39,188,0)
(38,203,0)
(353,202,0)
(7,355,0)
(189,228,0)
(164,293,0)
(193,431,0)
(330,125,0)
(78,227,0)
(194,469,0)
(363,49,0)
(136,30,0)
(47,92,0)
(324,433,0)
(43,334,0)
(263,349,0)
(376,61,0)
(41,247,0)
(72,476,0)
(402,189,0)
(166,482,0)
(139,258,0)
(189,310,0)
(154,133,0)
(222,386,0)
(365,260,0)
(491,137,0)
(90,24,0)
(432,51,0)
(248,128,0)
(266,221,0)
(489,369,0)
(235,158,0)
(261,311,0)
(414,269,0)
(247,105,0)
(58,407,0)
(348,493,0)
(407,90,0)
(197,394,0)
(1,386,0)
(319,432,0)
(254,161,0)
(89,180,0)
(17,369,0)
(62,227,0)
(297,20,0)
(451,366,0)
(234,53,0)
(40,314,0)
(103,80,0)
(445,395,0)
(88,298,0)
(422,115,0)
(247,247,0)
(230,96,0)
(474,472,0)
(358,375,0)
(433,334,0)
(384,363,0)
(160,109,0)
(349,153,0)
(332,88,0)
(204,469,0)
(361,310,0)
(123,347,0)
(189,335,0)
(16,477,0)
(389,241,0)
(203,428,0)
(288,313,0)
(481,186,0)
(66,345,0)
(466,334,0)
(141,55,0)
(422,458,0)
(375,419,0)
(169,136,0)
(364,394,0)
(471,364,0)
(251,10,0)
(10,347,0)
(279,349,0)
(340,321,0)
(18,429,0)
(282,107,0)
(127,407,0)
(128,248,0)
(130,131,0)
(20,358,0)
(294,119,0)
(194,221,0)
(437,22,0)
(61,460,0)
(226,98,0)
(396,255,0)
(65,67,0)
(417,193,0)
(169,69,0)
(49,212,0)
(181,100,0)
(93,48,0)
(88,332,0)
(260,369,0)
(119,109,0)
(177,92,0)
(218,283,0)
(293,400,0)
(368,32,0)
(200,455,0)
(361,390,0)
(273,151,0)
(390,410,0)
(203,461,0)
(407,476,0)
(287,229,0)
(377,181,0)
(305,349,0)
(405,100,0)
(67,469,0)
(305,176,0)
(338,176,0)
(451,311,0)
(52,212,0)
(426,407,0)
(371,248,0)
(428,314,0)
(53,361,0)
(208,169,0)
(220,137,0)
(309,334,0)
(85,348,0)
(171,400,0)
(145,180,0)
(88,13,0)
(26,56,0)
(463,390,0)
(477,16,0)
(9,414,0)
(290,382,0)
(324,48,0)
(119,299,0)
(299,119,0)
(391,324,0)
(188,414,0)
(143,334,0)
(178,419,0)
(23,493,0)
(258,179,0)
(466,323,0)
(281,280,0)
(304,228,0)
(292,448,0)
(97,324,0)
(135,341,0)
(268,393,0)
(32,273,0)
(130,90,0)
(471,404,0)
(82,23,0)
(255,313,0)
(232,98,0)
(24,452,0)
(260,365,0)
(323,125,0)
(179,471,0)
(119,294,0)
(383,41,0)
(432,319,0)
(192,41,0)
(401,345,0)
(229,125,0)
(478,22,0)
(339,216,0)
(24,90,0)
(345,133,0)
(431,96,0)
(293,410,0)
(397,310,0)
(50,201,0)
(51,84,0)
(403,334,0)
(219,335,0)
(419,311,0)
(227,358,0)
(20,489,0)
(5,370,0)
(158,303,0)
(273,32,0)
(216,201,0)
(2,489,0)
(35,271,0)
(230,95,0)
(488,276,0)
(256,95,0)
(264,130,0)
(409,294,0)
(206,11,0)
(302,53,0)
(128,321,0)
(342,165,0)
(476,395,0)
(56,243,0)
(9,105,0)
(364,471,0)
(106,213,0)
(479,333,0)
(473,455,0)
(11,61,0)
(4,222,0)
(325,334,0)
(355,229,0)
(407,410,0)
(173,241,0)
(116,249,0)
(377,169,0)
(13,88,0)
(71,115,0)
(83,213,0)
(468,18,0)
(37,317,0)
(30,433,0)
(354,275,0)
(484,232,0)
(337,451,0)
(375,358,0)
(95,365,0)
(271,98,0)
(290,241,0)
(181,377,0)
(298,88,0)
(306,13,0)
(480,241,0)
(349,305,0)
(356,295,0)
(86,432,0)
(440,148,0)
(472,317,0)
(69,169,0)
(27,455,0)
(81,358,0)
(63,249,0)
(75,359,0)
(201,50,0)
(493,249,0)
(314,428,0)
(133,345,0)
(120,37,0)
(300,394,0)
(183,276,0)
(294,249,0)
(272,220,0)
(408,319,0)
(410,92,0)
(346,334,0)
(29,30,0)
(353,419,0)
(31,105,0)
(399,92,0)
(366,153,0)
(230,249,0)
(150,216,0)
(48,334,0)
(11,272,0)
(355,151,0)
(46,248,0)
(275,396,0)
(172,334,0)
(469,194,0)
(434,270,0)
(265,410,0)
(452,24,0)
(380,334,0)
(146,407,0)
(6,431,0)
(413,103,0)
(245,311,0)
(102,290,0)
(156,276,0)
(96,431,0)
(106,298,0)
(205,49,0)
(457,137,0)
(404,471,0)
(60,227,0)
(443,243,0)
(243,151,0)
(182,493,0)
(249,467,0)
(247,41,0)
(169,377,0)
(27,334,0)
(384,488,0)
(55,141,0)
(109,448,0)
(216,16,0)
(360,334,0)
(11,48,0)
(21,271,0)
(295,202,0)
(291,116,0)
(147,477,0)
(363,22,0)
(229,32,0)
(181,48,0)
(344,400,0)
(340,151,0)
(488,384,0)
(137,220,0)
(410,482,0)
(276,488,0)
(213,106,0)
(421,334,0)
(477,201,0)
(9,247,0)
(220,272,0)
(199,132,0)
(482,271,0)
(56,422,0)
(95,230,0)
(114,386,0)
(48,324,0)
(59,334,0)
(461,203,0)
(320,268,0)
(220,136,0)
(299,304,0)
(41,153,0)
(224,374,0)
(419,353,0)
(187,332,0)
(347,79,0)
(378,429,0)
(274,392,0)
(300,448,0)
(144,33,0)
(210,300,0)
(482,410,0)
(30,136,0)
(248,51,0)
(37,420,0)
(390,310,0)
(33,136,0)
(327,176,0)
(24,221,0)
(84,153,0)
(438,317,0)
(414,258,0)
(366,451,0)
(343,366,0)
(262,460,0)
(390,92,0)
(118,87,0)
(469,67,0)
(315,247,0)
(358,313,0)
(129,69,0)
(317,439,0)
(454,466,0)
(418,230,0)
(185,310,0)
(352,87,0)
(236,481,0)
(87,352,0)
(388,334,0)
(307,320,0)
(481,236,0)
(394,364,0)
(137,460,0)
(340,180,0)
(326,48,1)
(400,344,1)
(225,161,1)
(276,448,1)
(27,175,1)
(96,431,1)
(115,385,1)
(155,112,1)
(411,223,1)
(130,311,1)
(364,394,1)
(390,310,1)
(254,465,1)
(24,221,1)
(451,366,1)
(282,149,1)
(181,100,1)
(53,358,1)
(323,32,1)
(203,461,1)
(390,390,1)
(124,422,1)
(10,70,1)
(293,34,1)
(61,376,1)
(364,372,1)
(476,90,1)
(493,348,1)
(468,221,1)
(271,21,1)
(417,244,1)
(44,333,1)
(429,18,1)
(491,460,1)
(338,327,1)
(168,267,1)
(340,170,1)
(489,20,1)
(20,358,1)
(213,153,1)
(71,64,1)
(271,310,1)
(13,425,1)
(401,66,1)
(332,153,1)
(252,72,1)
(47,393,1)
(290,241,1)
(26,243,1)
(34,164,1)
(469,204,1)
(39,63,1)
(209,407,1)
(324,97,1)
(299,304,1)
(58,127,1)
(459,292,1)
(258,116,1)
(416,463,1)
(247,247,1)
(263,207,1)
(41,153,1)
(327,336,1)
(63,265,1)
(268,320,1)
(118,255,1)
(158,423,1)
(197,231,1)
(387,276,1)
(224,272,1)
(296,241,1)
(418,95,1)
(33,144,1)
(368,56,1)
(451,311,1)
(56,422,1)
(421,132,1)
(337,261,1)
(31,304,1)
(60,140,1)
(20,297,1)
(9,436,1)
(493,198,1)
(198,257,1)
(133,154,1)
(264,485,1)
(229,32,1)
(329,232,1)
(353,202,1)
(40,305,1)
(167,293,1)
(8,238,1)
(220,117,1)
(383,192,1)
(175,455,1)
(22,437,1)
(21,35,1)
(97,391,1)
(373,337,1)
(0,448,1)
(343,373,1)
(426,37,1)
(203,176,1)
(408,80,1)
(146,426,1)
(229,422,1)
(201,50,1)
(266,211,1)
(280,281,1)
(232,98,1)
(270,400,1)
(339,477,1)
(247,105,1)
(318,405,1)
(246,306,1)
(199,25,1)
(238,81,1)
(345,401,1)
(221,317,1)
(281,272,1)
(95,256,1)
(106,295,1)
(306,332,1)
(285,155,1)
(138,322,1)
(293,410,1)
(207,392,1)
(226,303,1)
(223,441,1)
(137,457,1)
(472,474,1)
(365,260,1)
(109,101,1)
(230,96,1)
(407,476,1)
(394,300,1)
(443,124,1)
(270,434,1)
(438,296,1)
(130,472,1)
(315,414,1)
(248,51,1)
(49,363,1)
(292,296,1)
(192,315,1)
(324,433,1)
(159,219,1)
(81,451,1)
(361,390,1)
(442,280,1)
(249,230,1)
(230,418,1)
(150,339,1)
(479,126,1)
(54,336,1)
(151,340,1)
(142,259,1)
(80,14,1)
(61,460,1)
(296,411,1)
(220,137,1)
(277,254,1)
(68,317,1)
(23,82,1)
(113,365,1)
(369,489,1)
(294,249,1)
(14,449,1)
(107,149,1)
(13,246,1)
(137,460,1)
(310,185,1)
(9,105,1)
(483,367,1)
(171,105,1)
(432,86,1)
(347,10,1)
(55,141,1)
(421,9,1)
(53,234,1)
(273,151,1)
(189,402,1)
(222,386,1)
(407,37,1)
(66,221,1)
(29,121,1)
(72,407,1)
(184,151,1)
(0,142,1)
(477,379,1)
(265,410,1)
(235,466,1)
(397,98,1)
(78,162,1)
(79,214,1)
(471,404,1)
(86,99,1)
(109,448,1)
(231,448,1)
(262,347,1)
(62,78,1)
(332,187,1)
(261,242,1)
(181,48,1)
(244,113,1)
(199,209,1)
(472,317,1)
(70,251,1)
(482,271,1)
(136,30,1)
(193,358,1)
(91,220,1)
(437,478,1)
(234,302,1)
(41,383,1)
(396,275,1)
(381,31,1)
(319,432,1)
(257,424,1)
(317,439,1)
(169,69,1)
(291,9,1)
(64,229,1)
(227,358,1)
(169,136,1)
(382,290,1)
(46,371,1)
(157,77,1)
(24,452,1)
(35,351,1)
(358,375,1)
(220,136,1)
(219,464,1)
(95,188,1)
(232,484,1)
(251,54,1)
(298,106,1)
(308,328,1)
(98,33,1)
(2,286,1)
(18,447,1)
(284,493,1)
(469,67,1)
(286,358,1)
(133,345,1)
(480,173,1)
(156,183,1)
(354,15,1)
(147,201,1)
(478,205,1)
(189,310,1)
(488,387,1)
(276,156,1)
(51,84,1)
(355,151,1)
(232,390,1)
(30,74,1)
(267,125,1)
(160,0,1)
(103,413,1)
(60,227,1)
(164,270,1)
(377,169,1)
(221,194,1)
(449,472,1)
(116,435,1)
(273,157,1)
(206,61,1)
(351,47,1)
(15,415,1)
(233,479,1)
(298,88,1)
(37,476,1)
(25,298,1)
(335,159,1)
(300,448,1)
(87,352,1)
(362,60,1)
(357,190,1)
(124,229,1)
(412,23,1)
(90,24,1)
(56,26,1)
(204,67,1)
(409,109,1)
(419,311,1)
(33,48,1)
(189,390,1)
(456,390,1)
(130,37,1)
(178,353,1)
(199,342,1)
(103,80,1)
(304,228,1)
(125,330,1)
(268,76,1)
(65,470,1)
(305,176,1)
(93,136,1)
(477,201,1)
(228,189,1)
(56,32,1)
(50,161,1)
(370,163,1)
(297,453,1)
(265,250,1)
(392,176,1)
(463,451,1)
(375,419,1)
(428,203,1)
(431,362,1)
(461,357,1)
(214,326,1)
(419,353,1)
(295,356,1)
(140,227,1)
(199,284,1)
(405,169,1)
(112,32,1)
(193,417,1)
(4,493,1)
(335,448,1)
(366,153,1)
(190,40,1)
(36,27,1)
(10,425,1)
(139,116,1)
(492,386,1)
(355,7,1)
(260,398,1)
(283,9,1)
(248,46,1)
(100,314,1)
(32,273,1)
(19,129,1)
(182,198,1)
(323,308,1)
(16,477,1)
(344,171,1)
(194,469,1)
(294,409,1)
(203,38,1)
(196,421,1)
(67,65,1)
(323,125,1)
(161,51,1)
(447,468,1)
(116,249,1)
(303,158,1)
(430,100,1)
(333,233,1)
(158,466,1)
(435,291,1)
(187,36,1)
(384,488,1)
(347,79,1)
(342,377,1)
(476,37,1)
(104,241,1)
(126,298,1)
(261,311,1)
(141,44,1)
(180,51,1)
(154,345,1)
(305,349,1)
(391,93,1)
(330,253,1)
(163,5,1)
(11,48,1)
(229,355,1)
(232,310,1)
(379,147,1)
(289,319,1)
(349,153,1)
(5,442,1)
(453,2,1)
(250,492,1)
(376,91,1)
(287,355,1)
(24,378,1)
(321,138,1)
(419,178,1)
(259,299,1)
(116,49,1)
(481,217,1)
(272,11,1)
(130,90,1)
(336,79,1)
(7,184,1)
(274,377,1)
(429,134,1)
(464,49,1)
(424,348,1)
(95,365,1)
(482,466,1)
(433,55,1)
(85,412,1)
(82,396,1)
(22,448,1)
(260,369,1)
(189,335,1)
(367,438,1)
(255,131,1)
(441,104,1)
(100,318,1)
(423,235,1)
(482,166,1)
(33,136,1)
(104,389,1)
(107,282,1)
(9,247,1)
(408,103,1)
(493,23,1)
(229,125,1)
(271,98,1)
(185,397,1)
(173,410,1)
(186,425,1)
(30,433,1)
(283,218,1)
(444,22,1)
(471,364,1)
(465,319,1)
(481,186,1)
(37,317,1)
(456,310,1)
(110,88,1)
(243,151,1)
(300,195,1)
(328,454,1)
(265,386,1)
(485,45,1)
(11,61,1)
(131,130,1)
(460,262,1)
(77,368,1)
(56,125,1)
(141,333,1)
(169,208,1)
(186,57,1)
(222,4,1)
(162,193,1)
(102,381,1)
(347,123,1)
(130,264,1)
(99,408,1)
(280,79,1)
(490,307,1)
(229,287,1)
(50,80,1)
(314,428,1)
(57,459,1)
(484,456,1)
(180,145,1)
(320,490,1)
(119,299,1)
(361,446,1)
(42,120,1)
(149,483,1)
(164,400,1)
(129,314,1)
(181,430,1)
(302,118,1)
(353,8,1)
(211,16,1)
(371,285,1)
(120,16,1)
(431,193,1)
(290,47,1)
(114,87,1)
(256,188,1)
(105,382,1)
(414,258,1)
(431,6,1)
(237,119,1)
(271,390,1)
(293,400,1)
(50,225,1)
(210,197,1)
(406,226,1)
(208,69,1)
(461,202,1)
(337,311,1)
(446,53,1)
(407,201,1)
(474,68,1)
(196,283,1)
(470,266,1)
(119,294,1)
(84,153,1)
(436,119,1)
(370,153,1)
(352,361,1)
(216,150,1)
(6,193,1)
(410,482,1)
(311,245,1)
(112,56,1)
(119,109,1)
(200,473,1)
(176,338,1)
(215,168,1)
(415,249,1)
(179,471,1)
(372,394,1)
(333,425,1)
(279,263,1)
(390,410,1)
(69,19,1)
(488,276,1)
(413,476,1)
(363,316,1)
(89,301,1)
(299,108,1)
(236,481,1)
(316,22,1)
(378,429,1)
(377,181,1)
(396,255,1)
(385,71,1)
(454,128,1)
(295,202,1)
(340,180,1)
(56,243,1)
(448,236,1)
(83,110,1)
(253,305,1)
(258,179,1)
(466,323,1)
(155,321,1)
(349,279,1)
(230,95,1)
(393,268,1)
(241,480,1)
(363,384,1)
(115,151,1)
(493,182,1)
(17,489,1)
(218,232,1)
(363,22,1)
(369,17,1)
(452,133,1)
(84,215,1)
(108,293,1)
(198,358,1)
(407,58,1)
(307,329,1)
(422,115,1)
(389,167,1)
(361,310,1)
(407,317,1)
(132,199,1)
(101,160,1)
(245,289,1)
(402,335,1)
(128,321,1)
(16,216,1)
(492,222,1)
(366,343,1)
(476,252,1)
(481,241,1)
(290,102,1)
(275,354,1)
(199,224,1)
(434,247,1)
(247,41,1)
(69,314,1)
(407,410,1)
(27,455,1)
(389,241,1)
(301,128,1)
(213,83,1)
(121,433,1)
(426,90,1)
(188,39,1)
(272,220,1)
(242,265,1)
(166,271,1)
(199,237,1)
(216,201,1)
(161,277,1)
(396,396,1)
(390,416,1)
(127,146,1)
(275,153,1)
(319,80,1)
(11,206,1)
(227,62,1)
(348,85,1)
(407,90,1)
(123,10,1)
(188,255,1)
(106,213,1)
(442,79,1)
(217,186,1)
(439,107,1)
(1,114,1)
(411,153,1)
(195,210,1)
(207,176,1)
(285,321,1)
(119,0,1)
(356,111,1)
(88,13,1)
(205,179,1)
(361,53,1)
(74,29,1)
(23,87,1)
(117,137,1)
(322,51,1)
(336,370,1)
(48,324,1)
(188,414,1)
(45,96,1)
(455,200,1)
(38,461,1)
(134,18,1)
(386,1,1)
(348,358,1)
(183,444,1)
(340,321,1)
(128,248,1)
(457,491,1)
(392,274,1)
(432,51,1)
(88,332,1)
(243,443,1)
(111,213,1)
(145,89,1)
(144,406,1)
(221,476,1)
(493,249,1)
(323,422,1)
(76,320,1)
(37,42,1)
(170,180,1)
(188,396,1)
(258,139,1)
(373,319,2)
(238,451,2)
(347,79,2)
(245,319,2)
(125,305,2)
(412,265,2)
(392,176,2)
(409,293,2)
(407,476,2)
(169,136,2)
(112,128,2)
(363,22,2)
(258,179,2)
(451,265,2)
(361,451,2)
(131,451,2)
(70,336,2)
(452,133,2)
(422,229,2)
(158,305,2)
(24,16,2)
(247,247,2)
(259,293,2)
(484,305,2)
(80,296,2)
(241,232,2)
(243,128,2)
(305,176,2)
(323,305,2)
(254,319,2)
(23,265,2)
(270,119,2)
(133,345,2)
(216,319,2)
(61,220,2)
(209,407,2)
(347,336,2)
(262,336,2)
(295,202,2)
(431,362,2)
(10,336,2)
(16,216,2)
(11,220,2)
(136,298,2)
(296,232,2)
(101,293,2)
(84,153,2)
(277,319,2)
(203,461,2)
(150,319,2)
(232,98,2)
(193,358,2)
(47,393,2)
(220,336,2)
(340,180,2)
(46,128,2)
(315,119,2)
(430,169,2)
(243,151,2)
(340,128,2)
(433,55,2)
(119,294,2)
(1,451,2)
(47,232,2)
(305,336,2)
(154,221,2)
(396,396,2)
(376,220,2)
(292,296,2)
(263,336,2)
(232,451,2)
(417,451,2)
(476,37,2)
(261,265,2)
(396,255,2)
(323,422,2)
(461,305,2)
(276,22,2)
(71,229,2)
(305,377,2)
(407,201,2)
(104,232,2)
(323,32,2)
(265,386,2)
(132,407,2)
(128,321,2)
(181,100,2)
(493,249,2)
(229,32,2)
(289,319,2)
(343,319,2)
(423,305,2)
(227,193,2)
(38,305,2)
(188,255,2)
(81,451,2)
(247,105,2)
(451,311,2)
(37,16,2)
(449,296,2)
(434,119,2)
(308,305,2)
(163,298,2)
(476,407,2)
(471,296,2)
(405,169,2)
(229,128,2)
(183,22,2)
(210,296,2)
(384,22,2)
(201,319,2)
(345,221,2)
(37,476,2)
(220,136,2)
(249,265,2)
(194,16,2)
(229,125,2)
(441,293,2)
(247,119,2)
(268,320,2)
(163,272,2)
(481,241,2)
(189,390,2)
(114,451,2)
(218,232,2)
(83,88,2)
(482,271,2)
(419,311,2)
(201,50,2)
(155,321,2)
(348,265,2)
(229,355,2)
(426,319,2)
(0,293,2)
(471,364,2)
(370,153,2)
(56,422,2)
(300,448,2)
(381,296,2)
(271,232,2)
(333,425,2)
(411,153,2)
(401,221,2)
(107,149,2)
(311,319,2)
(119,109,2)
(255,451,2)
(337,265,2)
(196,283,2)
(415,265,2)
(22,448,2)
(304,228,2)
(389,241,2)
(296,411,2)
(260,398,2)
(266,16,2)
(103,80,2)
(255,131,2)
(189,335,2)
(391,298,2)
(161,51,2)
(438,296,2)
(378,221,2)
(302,451,2)
(431,193,2)
(442,272,2)
(230,265,2)
(8,451,2)
(188,396,2)
(58,319,2)
(199,272,2)
(321,305,2)
(416,451,2)
(286,451,2)
(322,305,2)
(55,298,2)
(194,469,2)
(349,336,2)
(136,30,2)
(390,451,2)
(97,298,2)
(64,229,2)
(342,377,2)
(100,169,2)
(382,296,2)
(197,296,2)
(356,88,2)
(132,377,2)
(469,67,2)
(128,248,2)
(29,298,2)
(131,130,2)
(221,317,2)
(184,128,2)
(117,336,2)
(385,229,2)
(96,431,2)
(419,451,2)
(317,296,2)
(428,305,2)
(324,298,2)
(130,90,2)
(470,16,2)
(265,451,2)
(118,451,2)
(419,353,2)
(373,265,2)
(248,305,2)
(222,386,2)
(353,202,2)
(190,305,2)
(60,193,2)
(10,425,2)
(361,390,2)
(400,296,2)
(303,158,2)
(227,358,2)
(358,451,2)
(493,265,2)
(109,448,2)
(24,452,2)
(258,119,2)
(390,410,2)
(50,161,2)
(249,230,2)
(20,451,2)
(53,358,2)
(86,296,2)
(355,151,2)
(149,296,2)
(482,232,2)
(362,193,2)
(129,305,2)
(98,305,2)
(336,272,2)
(365,260,2)
(357,305,2)
(116,49,2)
(46,305,2)
(294,293,2)
(103,407,2)
(95,365,2)
(262,347,2)
(31,296,2)
(185,305,2)
(488,276,2)
(40,305,2)
(481,296,2)
(293,410,2)
(407,410,2)
(221,194,2)
(7,128,2)
(248,128,2)
(9,119,2)
(268,232,2)
(299,293,2)
(164,296,2)
(340,321,2)
(144,305,2)
(290,47,2)
(228,189,2)
(279,336,2)
(225,319,2)
(318,169,2)
(377,169,2)
(264,451,2)
(297,451,2)
(349,377,2)
(456,305,2)
(224,272,2)
(392,377,2)
(275,153,2)
(477,319,2)
(323,125,2)
(387,22,2)
(49,363,2)
(296,293,2)
(66,221,2)
(206,220,2)
(111,88,2)
(214,298,2)
(155,128,2)
(435,119,2)
(260,369,2)
(189,296,2)
(366,265,2)
(481,186,2)
(271,390,2)
(386,451,2)
(56,128,2)
(326,298,2)
(363,384,2)
(421,9,2)
(48,298,2)
(433,298,2)
(95,265,2)
(39,265,2)
(18,221,2)
(199,407,2)
(173,232,2)
(439,107,2)
(56,243,2)
(128,305,2)
(207,336,2)
(328,305,2)
(463,451,2)
(30,298,2)
(27,455,2)
(377,181,2)
(456,451,2)
(23,87,2)
(493,198,2)
(232,390,2)
(124,128,2)
(478,296,2)
(61,460,2)
(72,407,2)
(355,128,2)
(87,451,2)
(188,414,2)
(285,128,2)
(469,16,2)
(443,128,2)
(446,451,2)
(257,265,2)
(139,119,2)
(242,265,2)
(221,16,2)
(207,377,2)
(115,151,2)
(432,296,2)
(223,232,2)
(62,193,2)
(56,32,2)
(358,375,2)
(418,265,2)
(115,229,2)
(102,296,2)
(51,84,2)
(99,296,2)
(169,69,2)
(4,493,2)
(336,298,2)
(138,305,2)
(488,22,2)
(330,305,2)
(228,296,2)
(348,358,2)
(436,119,2)
(32,56,2)
(448,236,2)
(298,88,2)
(396,275,2)
(146,319,2)
(113,451,2)
(472,317,2)
(132,298,2)
(442,298,2)
(424,265,2)
(273,151,2)
(151,340,2)
(226,305,2)
(17,451,2)
(13,425,2)
(303,305,2)
(169,305,2)
(90,24,2)
(89,128,2)
(327,336,2)
(176,336,2)
(213,88,2)
(50,319,2)
(271,98,2)
(198,358,2)
(55,141,2)
(272,220,2)
(333,298,2)
(422,115,2)
(407,37,2)
(280,272,2)
(179,471,2)
(105,382,2)
(65,16,2)
(441,232,2)
(230,95,2)
(448,296,2)
(199,298,2)
(142,293,2)
(9,247,2)
(336,79,2)
(16,319,2)
(275,265,2)
(247,41,2)
(451,319,2)
(193,451,2)
(460,262,2)
(99,407,2)
(33,305,2)
(293,119,2)
(182,265,2)
(119,0,2)
(296,241,2)
(104,293,2)
(9,105,2)
(54,336,2)
(453,451,2)
(408,407,2)
(272,11,2)
(130,311,2)
(180,51,2)
(179,296,2)
(452,221,2)
(370,272,2)
(98,33,2)
(252,407,2)
(421,272,2)
(349,153,2)
(24,378,2)
(366,319,2)
(78,193,2)
(16,477,2)
(367,296,2)
(299,304,2)
(192,119,2)
(34,119,2)
(383,119,2)
(287,128,2)
(474,296,2)
(137,336,2)
(56,125,2)
(86,407,2)
(451,366,2)
(26,128,2)
(411,293,2)
(180,128,2)
(394,300,2)
(421,407,2)
(0,448,2)
(170,128,2)
(157,56,2)
(171,296,2)
(69,314,2)
(344,296,2)
(244,451,2)
(199,119,2)
(281,272,2)
(48,324,2)
(220,137,2)
(130,472,2)
(110,88,2)
(439,296,2)
(93,298,2)
(444,22,2)
(211,16,2)
(375,419,2)
(128,128,2)
(270,400,2)
(2,451,2)
(188,265,2)
(15,265,2)
(232,310,2)
(407,317,2)
(377,305,2)
(484,451,2)
(352,451,2)
(263,377,2)
(106,213,2)
(237,119,2)
(480,232,2)
(407,90,2)
(316,22,2)
(466,323,2)
(166,232,2)
(317,439,2)
(310,305,2)
(19,305,2)
(279,377,2)
(11,61,2)
(85,265,2)
(156,22,2)
(22,296,2)
(217,296,2)
(407,319,2)
(379,319,2)
(106,295,2)
(413,407,2)
(353,451,2)
(158,466,2)
(119,293,2)
(141,298,2)
(30,433,2)
(141,333,2)
(459,296,2)
(119,299,2)
(151,128,2)
(294,249,2)
(298,106,2)
(293,296,2)
(482,466,2)
(90,16,2)
(100,314,2)
(410,482,2)
(6,193,2)
(88,13,2)
(491,336,2)
(68,296,2)
(339,319,2)
(261,311,2)
(382,290,2)
(368,56,2)
(216,201,2)
(378,429,2)
(284,493,2)
(354,265,2)
(314,428,2)
(421,119,2)
(167,293,2)
(84,305,2)
(365,451,2)
(265,493,2)
(408,296,2)
(460,336,2)
(250,451,2)
(199,377,2)
(421,377,2)
(221,476,2)
(351,232,2)
(466,305,2)
(44,298,2)
(343,265,2)
(370,298,2)
(362,60,2)
(181,169,2)
(352,361,2)
(91,220,2)
(107,296,2)
(50,80,2)
(282,296,2)
(116,249,2)
(489,20,2)
(79,298,2)
(364,296,2)
(35,232,2)
(274,377,2)
(74,298,2)
(45,451,2)
(492,493,2)
(305,349,2)
(301,128,2)
(37,317,2)
(57,296,2)
(492,451,2)
(147,319,2)
(235,305,2)
(203,305,2)
(271,310,2)
(295,88,2)
(410,232,2)
(324,433,2)
(87,352,2)
(195,296,2)
(319,432,2)
(290,296,2)
(5,298,2)
(106,88,2)
(414,258,2)
(123,336,2)
(371,128,2)
(457,336,2)
(454,305,2)
(109,293,2)
(361,310,2)
(406,305,2)
(465,319,2)
(222,493,2)
(189,310,2)
(402,296,2)
(160,293,2)
(32,273,2)
(67,16,2)
(290,241,2)
(479,298,2)
(108,293,2)
(336,370,2)
(393,232,2)
(421,493,2)
(205,296,2)
(126,298,2)
(34,296,2)
(335,448,2)
(63,265,2)
(130,451,2)
(41,119,2)
(490,232,2)
(60,227,2)
(389,293,2)
(236,481,2)
(168,305,2)
(464,296,2)
(41,153,2)
(372,296,2)
(51,305,2)
(88,332,2)
(332,153,2)
(366,153,2)
(280,79,2)
(319,296,2)
(421,298,2)
(384,488,2)
(236,296,2)
(390,390,2)
(133,221,2)
(489,451,2)
(53,451,2)
(472,296,2)
(335,296,2)
(304,296,2)
(140,193,2)
(258,116,2)
(132,493,2)
(5,272,2)
(33,48,2)
(397,305,2)
(120,16,2)
(219,296,2)
(76,232,2)
(250,493,2)
(260,451,2)
(253,305,2)
(181,48,2)
(204,16,2)
(234,451,2)
(130,37,2)
(199,493,2)
(375,451,2)
(232,305,2)
(77,56,2)
(14,296,2)
(428,203,2)
(231,296,2)
(369,489,2)
(319,407,2)
(390,310,2)
(82,265,2)
(432,51,2)
(127,319,2)
(272,336,2)
(319,80,2)
(396,265,2)
(208,305,2)
(198,265,2)
(276,448,2)
(371,305,2)
(121,298,2)
(256,265,2)
(361,53,2)
(293,400,2)
(159,296,2)
(283,232,2)
(186,296,2)
(132,272,2)
(483,296,2)
(96,451,2)
(477,201,2)
(493,348,2)
(493,23,2)
(161,319,2)
(461,202,2)
(283,9,2)
(25,298,2)
(229,422,2)
(394,296,2)
(251,336,2)
(369,451,2)
(33,136,2)
(471,404,2)
(476,90,2)
(20,358,2)
(105,296,2)
(21,232,2)
(337,319,2)
(347,10,2)
(273,56,2)
(203,176,2)
(69,305,2)
(145,128,2)
(116,119,2)
(137,460,2)
(11,48,2)
(215,305,2)
(485,451,2)
(431,451,2)
(432,407,2)
(411,232,2)
(42,16,2)
(265,410,2)
(223,293,2)
(24,221,2)
(364,394,2)
(230,96,2)
(267,305,2)
(429,221,2)
(162,193,2)
(393,268,2)
(49,296,2)
(314,305,2)
(468,221,2)
(300,296,2)
(178,451,2)
(447,221,2)
(363,296,2)
(196,421,2)
(437,296,2)
(307,232,2)
(213,153,2)
(285,305,2)
(132,119,2)
(329,232,2)
(134,221,2)
(164,119,2)
(338,336,2)
(233,298,2)
(186,425,2)
(291,119,2)
(320,232,2)
(414,119,2)
(248,51,2)
(95,188,2)
(429,18,2)
-----------------------------------
(0,fmt->sgnd)
(1,0)
(2,1)
(3,inbuf)
(4,j)
(5,xform)
(6,0)
(7,numinchans)
(8,cmptfmts)
(9,*bufptr)
(10,in->cmptfmts)
(11,fmt->height != height)
(12,)
(13,in->numcmpts)
(14,0)
(15,xform)
(16,pxform->numoutchans > pxform->numinchans)
(17,1)
(18,buf[0])
(19,width)
(20,fmt->prec)
(21,n)
(22,fmt->sgnd)
(23,&dataptr)
(24,(inbuf == &buf[0][0])
(25,goto error;)
(26,maxchans)
(27,buf[2][APPLYBUFSIZ])
(28,pxform)
(29,fmt)
(30,fmt->width)
(31,bufptr)
(32,maxchans = pxform->numoutchans)
(33,width * height)
(34,m)
(35,total)
(36,xform)
(37,outbuf = inbuf)
(38,i)
(39,bufptr)
(40,fmt)
(41,xform->numinchans)
(42,inbuf)
(43,width)
(44,0)
(45,bufptr)
(46,numpxforms)
(47,inbuf = &buf[0][0])
(48,height = fmt->height)
(49,bias = fmt->sgnd ? (1 << (fmt->prec - 1)
(50,pxformseq->pxforms[i])
(51,pxformseq = xform->pxformseq)
(52,for (j = 0; j < m; ++j)
(53,fmt->buf)
(54,fmt)
(55,&in->cmptfmts[0])
(56,pxform->numoutchans > maxchans)
(57,cmptfmts)
(58,m)
(59,n)
(60,fmt->prec - 1)
(61,fmt->height)
(62,prec)
(63,v)
(64,maxchans)
(65,0)
(66,buf)
(67,buf[0])
(68,outbuf)
(69,fmt->width)
(70,cmptfmts)
(71,pxform)
(72,inbuf)
(73,scale)
(74,width)
(75,if (fmt->width != width || fmt->height != height)
(76,0)
(77,pxform)
(78,fmt)
(79,i = 1)
(80,i = 0)
(81,fmt)
(82,dataptr)
(83,numoutchans)
(84,xform->pxformseq)
(85,sgnd)
(86,numpxforms)
(87,dataptr = &fmt->buf[n])
(88,xform->numinchans > in->numcmpts)
(89,pxformseq)
(90,outbuf = (inbuf == &buf[0][0])
(91,fmt)
(92,)
(93,height)
(94,if (pxform->numinchans > maxchans)
(95,(*bufptr)
(96,bias = fmt->sgnd ? (1 << (fmt->prec - 1)
(97,height)
(98,total = width * height)
(99,pxformseq)
(100,fmt->height)
(101,prec)
(102,i)
(103,++i)
(104,i)
(105,bufptr = &inbuf[i])
(106,xform->numoutchans > out->numcmpts)
(107,buf[0][0])
(108,dataptr)
(109,fmt->prec)
(110,xform)
(111,out)
(112,i)
(113,bias)
(114,j)
(115,pxform->numinchans)
(116,v - bias)
(117,width)
(118,dataptr)
(119,jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v)
(120,outbuf)
(121,width)
(122,i)
(123,i)
(124,pxform)
(125,maxchans = 0)
(126,fmt)
(127,outbuf)
(128,i < pxformseq->numpxforms)
(129,fmt)
(130,outbuf[i])
(131,&outbuf[i])
(132,-1)
(133,buf[1][0])
(134,0)
(135,if (fmt->width != width || fmt->height != height)
(136,width = fmt->width)
(137,fmt->width)
(138,0)
(139,scale)
(140,1)
(141,in->cmptfmts[0])
(142,sgnd)
(143,total)
(144,height)
(145,pxforms)
(146,inbuf)
(147,pxform)
(148,)
(149,buf[0])
(150,numinchans)
(151,pxform = pxformseq->pxforms[i])
(152,if (jas_cmgetint(&dataptr, fmt->sgnd, fmt->prec, &v)
(153,jas_cmxform_t *xform)
(154,0)
(155,++i)
(156,prec)
(157,numoutchans)
(158,bufmax > 0)
(159,buf)
(160,fmt)
(161,pxformseq->pxforms)
(162,1)
(163,numinchans)
(164,j)
(165,)
(166,bufmax)
(167,i)
(168,xform)
(169,fmt->width != width)
(170,i)
(171,j)
(172,dataptr)
(173,i)
(174,for (i = 1; i < xform->numinchans; ++i)
(175,APPLYBUFSIZ)
(176,i = 0)
(177,for (i = 0; i < xform->numinchans; ++i)
(178,i)
(179,scale = (double)
(180,pxformseq->pxforms)
(181,fmt->height != height)
(182,v)
(183,fmt)
(184,pxform)
(185,0)
(186,in->cmptfmts)
(187,numinchans)
(188,*bufptr)
(189,fmt->buf[n])
(190,out)
(191,error:)
(192,xform)
(193,fmt->sgnd)
(194,&buf[0][0])
(195,prec)
(196,RET)
(197,1)
(198,fmt->prec)
(199,1)
(200,2)
(201,pxform = pxformseq->pxforms[i])
(202,jas_cmpixmap_t *out)
(203,out->cmptfmts[i])
(204,0)
(205,bias)
(206,height)
(207,i)
(208,width)
(209,goto error;)
(210,fmt)
(211,outbuf)
(212,)
(213,xform->numoutchans)
(214,1)
(215,pxformseq)
(216,pxform->numinchans)
(217,i)
(218,0)
(219,fmt)
(220,fmt->width != width)
(221,inbuf == &buf[0][0])
(222,++j)
(223,numinchans)
(224,goto error;)
(225,i)
(226,total)
(227,fmt->prec)
(228,&fmt->buf[n])
(229,pxform->numinchans > maxchans)
(230,(*bufptr)
(231,scale)
(232,n < total)
(233,cmptfmts)
(234,buf)
(235,bufmax)
(236,&in->cmptfmts[i])
(237,goto error;)
(238,out)
(239,for (i = 0; i < pxformseq->numpxforms; ++i)
(240,j)
(241,i = 0)
(242,i)
(243,pxform->numoutchans)
(244,fmt)
(245,0)
(246,numcmpts)
(247,bufptr += xform->numinchans)
(248,pxformseq->numpxforms)
(249,v = (*bufptr)
(250,m)
(251,in)
(252,outbuf)
(253,maxchans)
(254,pxformseq)
(255,bufptr = &outbuf[i])
(256,scale)
(257,prec)
(258,(v - bias)
(259,fmt)
(260,(double)
(261,++i)
(262,&in->cmptfmts[i])
(263,xform)
(264,i)
(265,j < m)
(266,inbuf)
(267,pxformseq)
(268,buf[0][0])
(269,)
(270,++j)
(271,total - n)
(272,fmt->width != width || fmt->height != height)
(273,pxform->numoutchans)
(274,i)
(275,xform->numoutchans)
(276,fmt->prec)
(277,pxforms)
(278,if ((*pxform->ops->apply)
(279,numoutchans)
(280,++i)
(281,i)
(282,0)
(283,return 0;)
(284,goto error;)
(285,i)
(286,scale)
(287,maxchans)
(288,for (j = 0; j < m; ++j)
(289,i)
(290,inbuf[i])
(291,v)
(292,fmt)
(293,j < m)
(294,&v)
(295,out->numcmpts)
(296,i < xform->numinchans)
(297,prec)
(298,xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts)
(299,&dataptr)
(300,fmt->prec)
(301,pxform)
(302,fmt)
(303,assert(bufmax > 0)
(304,dataptr = &fmt->buf[n])
(305,i < xform->numoutchans)
(306,in)
(307,buf)
(308,maxchans)
(309,bufptr)
(310,n = 0)
(311,i = 0)
(312,while (n < total)
(313,)
(314,fmt = &out->cmptfmts[i])
(315,bufptr)
(316,0)
(317,inbuf = &buf[0][0])
(318,height)
(319,i < pxformseq->numpxforms)
(320,buf[0])
(321,i = 0)
(322,i)
(323,APPLYBUFSIZ / maxchans)
(324,fmt->height)
(325,pxformseq)
(326,i)
(327,i)
(328,APPLYBUFSIZ)
(329,inbuf)
(330,0)
(331,bias)
(332,xform->numinchans)
(333,in->cmptfmts)
(334,)
(335,fmt->buf)
(336,i < xform->numinchans)
(337,i)
(338,0)
(339,pxform)
(340,pxformseq->pxforms[i])
(341,)
(342,goto error;)
(343,numoutchans)
(344,0)
(345,buf[1])
(346,height)
(347,in->cmptfmts[i])
(348,fmt->sgnd)
(349,xform->numoutchans)
(350,)
(351,m)
(352,&fmt->buf[n])
(353,out->cmptfmts)
(354,numoutchans)
(355,pxform->numinchans)
(356,numcmpts)
(357,cmptfmts)
(358,fmt = &out->cmptfmts[i])
(359,)
(360,if (xform->numinchans > in->numcmpts || xform->numoutchans > out->numcmpts)
(361,fmt->buf[n])
(362,1 << (fmt->prec - 1)
(363,fmt->sgnd ? (1 << (fmt->prec - 1)
(364,(1 << fmt->prec)
(365,scale = (double)
(366,xform->numoutchans)
(367,buf)
(368,maxchans)
(369,(1 << fmt->prec)
(370,xform->numinchans)
(371,pxformseq)
(372,1)
(373,xform)
(374,)
(375,&out->cmptfmts[i])
(376,height)
(377,fmt->width != width || fmt->height != height)
(378,&buf[0][0])
(379,numoutchans)
(380,maxchans)
(381,inbuf)
(382,&inbuf[i])
(383,numinchans)
(384,1 << (fmt->prec - 1)
(385,numinchans)
(386,j = 0)
(387,1)
(388,for (i = 0; i < xform->numoutchans; ++i)
(389,++i)
(390,n += m)
(391,fmt)
(392,++i)
(393,&buf[0][0])
(394,1 << fmt->prec)
(395,)
(396,bufptr += xform->numoutchans)
(397,n)
(398,double)
(399,for (i = 0; i < xform->numoutchans; ++i)
(400,j = 0)
(401,1)
(402,n)
(403,outbuf)
(404,double)
(405,fmt)
(406,width)
(407,(*pxform->ops->apply)
(408,i)
(409,v)
(410,m = JAS_MIN(total - n, bufmax)
(411,xform->numinchans)
(412,fmt)
(413,i)
(414,*bufptr = (v - bias)
(415,bufptr)
(416,m)
(417,sgnd)
(418,bias)
(419,out->cmptfmts[i])
(420,)
(421,return -1;)
(422,maxchans = pxform->numinchans)
(423,0)
(424,fmt)
(425,jas_cmpixmap_t *in)
(426,pxform)
(427,v)
(428,&out->cmptfmts[i])
(429,buf[0][0])
(430,height)
(431,fmt->sgnd ? (1 << (fmt->prec - 1)
(432,pxformseq->numpxforms)
(433,fmt = &in->cmptfmts[0])
(434,j)
(435,bias)
(436,bufptr)
(437,sgnd)
(438,inbuf)
(439,&buf[0][0])
(440,if (pxform->numoutchans > maxchans)
(441,xform)
(442,i)
(443,numoutchans)
(444,1)
(445,if (pxform->numoutchans > pxform->numinchans)
(446,n)
(447,0)
(448,fmt = &in->cmptfmts[i])
(449,i)
(450,m)
(451,i < xform->numoutchans)
(452,&buf[1][0])
(453,fmt)
(454,bufmax)
(455,buf[2])
(456,n)
(457,width)
(458,)
(459,in)
(460,fmt = &in->cmptfmts[i])
(461,out->cmptfmts)
(462,fmt)
(463,n)
(464,dataptr)
(465,pxform)
(466,bufmax = APPLYBUFSIZ / maxchans)
(467,)
(468,buf)
(469,buf[0][0])
(470,buf)
(471,(double)
(472,outbuf = inbuf)
(473,buf)
(474,inbuf)
(475,for (i = 0; i < pxformseq->numpxforms; ++i)
(476,inbuf = outbuf)
(477,pxform->numoutchans)
(478,fmt)
(479,in)
(480,0)
(481,in->cmptfmts[i])
(482,JAS_MIN(total - n, bufmax)
(483,0)
(484,total)
(485,outbuf)
(486,if (jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v)
(487,bufmax)
(488,fmt->prec - 1)
(489,1 << fmt->prec)
(490,0)
(491,fmt)
(492,j)
(493,jas_cmputint(&dataptr, fmt->sgnd, fmt->prec, v)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
