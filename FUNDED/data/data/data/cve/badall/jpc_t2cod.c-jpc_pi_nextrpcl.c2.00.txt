-----label-----
1
-----code-----
static int jpc_pi_nextrpcl(register jpc_pi_t *pi)
{
	int rlvlno;
	jpc_pirlvl_t *pirlvl;
	jpc_pchg_t *pchg;
	int prchind;
	int prcvind;
	int *prclyrno;
	int compno;
	jpc_picomp_t *picomp;
	int xstep;
	int ystep;
	uint_fast32_t r;
	uint_fast32_t rpx;
	uint_fast32_t rpy;
	uint_fast32_t trx0;
	uint_fast32_t try0;

	pchg = pi->pchg;
	if (!pi->prgvolfirst) {
		goto skip;
	} else {
		pi->xstep = 0;
		pi->ystep = 0;
		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;
		  ++compno, ++picomp) {
			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <
			  picomp->numrlvls; ++rlvlno, ++pirlvl) {
				// Check for the potential for overflow problems.
				if (pirlvl->prcwidthexpn + picomp->numrlvls >
				  JAS_UINTFAST32_NUMBITS - 2 ||
				  pirlvl->prcheightexpn + picomp->numrlvls >
				  JAS_UINTFAST32_NUMBITS - 2) {
					return -1;
				}
				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<
				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));
				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<
				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));
				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
			}
		}
		pi->prgvolfirst = 0;
	}

	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&
	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {
		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=
		  pi->ystep - (pi->y % pi->ystep)) {
			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=
			  pi->xstep - (pi->x % pi->xstep)) {
				for (pi->compno = pchg->compnostart,
				  pi->picomp = &pi->picomps[pi->compno];
				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <
				  pi->numcomps; ++pi->compno, ++pi->picomp) {
					if (pi->rlvlno >= pi->picomp->numrlvls) {
						continue;
					}
					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];
					if (pi->pirlvl->numprcs == 0) {
						continue;
					}
					r = pi->picomp->numrlvls - 1 - pi->rlvlno;
					rpx = r + pi->pirlvl->prcwidthexpn;
					rpy = r + pi->pirlvl->prcheightexpn;
					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);
					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);
					if (((pi->x == pi->xstart &&
					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))
					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&
					  ((pi->y == pi->ystart &&
					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))
					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {
						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,
						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -
						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);
						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,
						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -
						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);
						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;

						assert(pi->prcno < pi->pirlvl->numprcs);
						for (pi->lyrno = 0; pi->lyrno <
						  pi->numlyrs && pi->lyrno < JAS_CAST(int,
						  pchg->lyrnoend); ++pi->lyrno) {
							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];
							if (pi->lyrno >= *prclyrno) {
								++(*prclyrno);
								return 0;
							}
skip:
							;
						}
					}
				}
			}
		}
	}
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
107,108
107,109
107,110
108,109
109,110
109,111
110,111
113,114
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
119,121
120,121
124,125
125,126
125,127
126,127
126,128
127,128
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
141,142
141,143
142,143
145,146
145,147
146,147
148,149
148,150
149,150
152,153
152,154
153,154
154,155
156,157
157,158
159,160
160,161
160,162
160,163
160,164
161,162
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
170,171
170,172
171,172
174,175
174,176
175,176
177,178
177,179
178,179
181,182
181,183
182,183
183,184
185,186
186,187
188,189
188,190
188,191
188,192
188,193
189,190
189,191
190,191
190,192
191,192
191,193
192,193
192,194
193,194
193,195
194,195
197,198
197,199
198,199
201,202
201,203
202,203
205,206
205,207
206,207
206,208
207,208
207,209
208,209
211,212
211,213
212,213
215,216
215,217
216,217
219,220
220,221
221,222
223,224
224,225
224,226
225,226
227,228
227,229
228,229
228,230
229,230
232,233
233,234
233,235
234,235
234,236
234,237
235,236
237,238
240,241
241,242
241,243
242,243
242,244
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
252,253
255,256
256,257
256,258
257,258
259,260
259,261
260,261
260,262
261,262
264,265
265,266
265,267
266,267
266,268
266,269
267,268
269,270
272,273
273,274
273,275
274,275
274,276
275,276
275,277
276,277
276,278
277,278
280,281
280,282
281,282
284,285
287,288
288,289
288,290
289,290
289,291
290,291
293,294
293,295
293,296
294,295
295,296
296,297
296,298
297,298
300,301
302,303
302,304
302,305
303,304
305,306
305,307
306,307
309,310
311,312
312,313
312,314
313,314
313,315
314,315
317,318
317,319
317,320
318,319
319,320
320,321
320,322
321,322
324,325
326,327
326,328
326,329
327,328
329,330
329,331
330,331
333,334
335,336
336,337
336,338
337,338
337,339
338,339
342,343
342,344
342,345
342,346
343,344
344,345
344,346
345,346
345,347
346,347
349,350
349,351
350,351
353,354
353,355
354,355
354,356
355,356
355,357
356,357
359,360
359,361
360,361
363,364
363,365
364,365
364,366
365,366
368,369
368,370
369,370
372,373
373,374
373,375
374,375
377,378
378,379
378,380
378,381
378,382
379,380
380,381
380,382
381,382
381,383
382,383
385,386
385,387
386,387
389,390
389,391
390,391
390,392
391,392
394,395
394,396
395,396
398,399
398,400
399,400
399,401
400,401
403,404
403,405
404,405
404,406
405,406
408,409
409,410
409,411
410,411
410,412
411,412
414,415
414,416
415,416
418,419
419,420
419,421
419,422
419,423
420,421
421,422
421,423
422,423
422,424
423,424
426,427
426,428
427,428
430,431
430,432
431,432
431,433
432,433
435,436
435,437
436,437
439,440
439,441
440,441
440,442
441,442
444,445
444,446
445,446
445,447
446,447
449,450
450,451
450,452
451,452
451,453
452,453
455,456
455,457
456,457
459,460
459,461
459,462
459,463
460,461
461,462
462,463
462,464
463,464
464,465
464,466
465,466
468,469
469,470
469,471
470,471
473,474
474,475
475,476
-----nextToken-----
2,4,7,9,10,14,16,20,22,23,27,29,30,33,35,38,40,43,45,46,49,51,55,57,58,61,63,66,68,72,74,78,80,84,86,90,92,96,98,102,105,106,111,112,115,121,122,123,128,129,130,136,137,140,143,144,147,150,151,155,158,165,166,169,172,173,176,179,180,184,187,195,196,199,200,203,204,209,210,213,214,217,218,222,226,230,231,236,238,239,246,247,250,251,253,254,258,262,263,268,270,271,278,279,282,283,285,286,291,292,298,299,301,304,307,308,310,315,316,322,323,325,328,331,332,334,339,340,341,347,348,351,352,357,358,361,362,366,367,370,371,375,376,383,384,387,388,392,393,396,397,401,402,406,407,412,413,416,417,424,425,428,429,433,434,437,438,442,443,447,448,453,454,457,458,466,467,471,472,476
-----computeFrom-----
100,101
100,102
118,119
118,120
125,126
125,127
134,135
134,136
138,139
138,140
145,146
145,147
163,164
163,165
167,168
167,169
174,175
174,176
190,191
190,192
191,192
191,193
192,193
192,194
201,202
201,203
205,206
205,207
206,207
206,208
215,216
215,217
224,225
224,226
227,228
227,229
233,234
233,235
241,242
241,243
242,243
242,244
243,244
243,245
256,257
256,258
259,260
259,261
265,266
265,267
273,274
273,275
274,275
274,276
275,276
275,277
288,289
288,290
312,313
312,314
336,337
336,338
344,345
344,346
353,354
353,355
354,355
354,356
363,364
363,365
380,381
380,382
389,390
389,391
398,399
398,400
403,404
403,405
409,410
409,411
421,422
421,423
430,431
430,432
439,440
439,441
444,445
444,446
450,451
450,452
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;GotoStatement;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;ExpressionStatement;ExpressionList;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;ProblemStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_pi_nextrpcl(register jpc_pi_t *pi){	int rlvlno;	jpc_pirlvl_t *pirlvl;	jpc_pchg_t *pchg;	int prchind;	int prcvind;	int *prclyrno;	int compno;	jpc_picomp_t *picomp;	int xstep;	int ystep;	uint_fast32_t r;	uint_fast32_t rpx;	uint_fast32_t rpy;	uint_fast32_t trx0;	uint_fast32_t try0;	pchg = pi->pchg;	if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}	return 1;}
static int
jpc_pi_nextrpcl(register jpc_pi_t *pi)
jpc_pi_nextrpcl
register jpc_pi_t *pi
register jpc_pi_t
jpc_pi_t
*pi
*
pi
{	int rlvlno;	jpc_pirlvl_t *pirlvl;	jpc_pchg_t *pchg;	int prchind;	int prcvind;	int *prclyrno;	int compno;	jpc_picomp_t *picomp;	int xstep;	int ystep;	uint_fast32_t r;	uint_fast32_t rpx;	uint_fast32_t rpy;	uint_fast32_t trx0;	uint_fast32_t try0;	pchg = pi->pchg;	if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}	for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}	return 1;}
int rlvlno;
int rlvlno;
int
rlvlno
rlvlno
jpc_pirlvl_t *pirlvl;
jpc_pirlvl_t *pirlvl;
jpc_pirlvl_t
jpc_pirlvl_t
*pirlvl
*
pirlvl
jpc_pchg_t *pchg;
jpc_pchg_t *pchg;
jpc_pchg_t
jpc_pchg_t
*pchg
*
pchg
int prchind;
int prchind;
int
prchind
prchind
int prcvind;
int prcvind;
int
prcvind
prcvind
int *prclyrno;
int *prclyrno;
int
*prclyrno
*
prclyrno
int compno;
int compno;
int
compno
compno
jpc_picomp_t *picomp;
jpc_picomp_t *picomp;
jpc_picomp_t
jpc_picomp_t
*picomp
*
picomp
int xstep;
int xstep;
int
xstep
xstep
int ystep;
int ystep;
int
ystep
ystep
uint_fast32_t r;
uint_fast32_t r;
uint_fast32_t
uint_fast32_t
r
r
uint_fast32_t rpx;
uint_fast32_t rpx;
uint_fast32_t
uint_fast32_t
rpx
rpx
uint_fast32_t rpy;
uint_fast32_t rpy;
uint_fast32_t
uint_fast32_t
rpy
rpy
uint_fast32_t trx0;
uint_fast32_t trx0;
uint_fast32_t
uint_fast32_t
trx0
trx0
uint_fast32_t try0;
uint_fast32_t try0;
uint_fast32_t
uint_fast32_t
try0
try0
pchg = pi->pchg;
pchg = pi->pchg
pchg
pchg
pi->pchg
pi
pi
pchg
if (!pi->prgvolfirst) {		goto skip;	} else {		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}
!pi->prgvolfirst
pi->prgvolfirst
pi
pi
prgvolfirst
{		goto skip;	}
goto skip;
skip
{		pi->xstep = 0;		pi->ystep = 0;		for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}		pi->prgvolfirst = 0;	}
pi->xstep = 0;
pi->xstep = 0
pi->xstep
pi
pi
xstep
0
pi->ystep = 0;
pi->ystep = 0
pi->ystep
pi
pi
ystep
0
for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;		  ++compno, ++picomp) {			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}
compno = 0, picomp = pi->picomps;
compno = 0, picomp = pi->picomps
compno = 0
compno
compno
0
picomp = pi->picomps
picomp
picomp
pi->picomps
pi
pi
picomps
compno < pi->numcomps
compno
compno
pi->numcomps
pi
pi
numcomps
++compno, ++picomp
++compno
compno
compno
++picomp
picomp
picomp
{			for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}		}
for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <			  picomp->numrlvls; ++rlvlno, ++pirlvl) {				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}
rlvlno = 0, pirlvl = picomp->pirlvls;
rlvlno = 0, pirlvl = picomp->pirlvls
rlvlno = 0
rlvlno
rlvlno
0
pirlvl = picomp->pirlvls
pirlvl
pirlvl
picomp->pirlvls
picomp
picomp
pirlvls
rlvlno <			  picomp->numrlvls
rlvlno
rlvlno
picomp->numrlvls
picomp
picomp
numrlvls
++rlvlno, ++pirlvl
++rlvlno
rlvlno
rlvlno
++pirlvl
pirlvl
pirlvl
{				// Check for the potential for overflow problems.				if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}				xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));				ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));				pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);				pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);			}
if (pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2) {					return -1;				}
pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2 ||				  pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2
pirlvl->prcwidthexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2
pirlvl->prcwidthexpn + picomp->numrlvls
pirlvl->prcwidthexpn
pirlvl
pirlvl
prcwidthexpn
picomp->numrlvls
picomp
picomp
numrlvls
JAS_UINTFAST32_NUMBITS - 2
JAS_UINTFAST32_NUMBITS
JAS_UINTFAST32_NUMBITS
2
pirlvl->prcheightexpn + picomp->numrlvls >				  JAS_UINTFAST32_NUMBITS - 2
pirlvl->prcheightexpn + picomp->numrlvls
pirlvl->prcheightexpn
pirlvl
pirlvl
prcheightexpn
picomp->numrlvls
picomp
picomp
numrlvls
JAS_UINTFAST32_NUMBITS - 2
JAS_UINTFAST32_NUMBITS
JAS_UINTFAST32_NUMBITS
2
{					return -1;				}
return -1;
-1
1
xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));
xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1))
xstep
xstep
picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1))
picomp->hsamp
picomp
picomp
hsamp
(JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1))
JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1)
JAS_CAST(uint_fast32_t, 1)
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
1
(pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1)
pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1
pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno
pirlvl->prcwidthexpn + picomp->numrlvls
pirlvl->prcwidthexpn
pirlvl
pirlvl
prcwidthexpn
picomp->numrlvls
picomp
picomp
numrlvls
rlvlno
rlvlno
1
ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));
ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1))
ystep
ystep
picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1))
picomp->vsamp
picomp
picomp
vsamp
(JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1))
JAS_CAST(uint_fast32_t, 1) <<				  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1)
JAS_CAST(uint_fast32_t, 1)
JAS_CAST
JAS_CAST
uint_fast32_t
uint_fast32_t
1
(pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1)
pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1
pirlvl->prcheightexpn + picomp->numrlvls - rlvlno
pirlvl->prcheightexpn + picomp->numrlvls
pirlvl->prcheightexpn
pirlvl
pirlvl
prcheightexpn
picomp->numrlvls
picomp
picomp
numrlvls
rlvlno
rlvlno
1
pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);
pi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep)
pi->xstep
pi
pi
xstep
(!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep)
(!pi->xstep)
!pi->xstep
pi->xstep
pi
pi
xstep
xstep
xstep
JAS_MIN(pi->xstep, xstep)
JAS_MIN
JAS_MIN
pi->xstep
pi
pi
xstep
xstep
xstep
pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);
pi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep)
pi->ystep
pi
pi
ystep
(!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep)
(!pi->ystep)
!pi->ystep
pi->ystep
pi
pi
ystep
ystep
ystep
JAS_MIN(pi->ystep, ystep)
JAS_MIN
JAS_MIN
pi->ystep
pi
pi
ystep
ystep
ystep
pi->prgvolfirst = 0;
pi->prgvolfirst = 0
pi->prgvolfirst
pi
pi
prgvolfirst
0
for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno) {		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}
pi->rlvlno = pchg->rlvlnostart;
pi->rlvlno = pchg->rlvlnostart
pi->rlvlno
pi
pi
rlvlno
pchg->rlvlnostart
pchg
pchg
rlvlnostart
pi->rlvlno < pchg->rlvlnoend &&	  pi->rlvlno < pi->maxrlvls
pi->rlvlno < pchg->rlvlnoend
pi->rlvlno
pi
pi
rlvlno
pchg->rlvlnoend
pchg
pchg
rlvlnoend
pi->rlvlno < pi->maxrlvls
pi->rlvlno
pi
pi
rlvlno
pi->maxrlvls
pi
pi
maxrlvls
++pi->rlvlno
pi->rlvlno
pi
pi
rlvlno
{		for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}	}
for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=		  pi->ystep - (pi->y % pi->ystep)) {			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}
pi->y = pi->ystart;
pi->y = pi->ystart
pi->y
pi
pi
y
pi->ystart
pi
pi
ystart
pi->y < pi->yend
pi->y
pi
pi
y
pi->yend
pi
pi
yend
pi->y +=		  pi->ystep - (pi->y % pi->ystep)
pi->y
pi
pi
y
pi->ystep - (pi->y % pi->ystep)
pi->ystep
pi
pi
ystep
(pi->y % pi->ystep)
pi->y % pi->ystep
pi->y
pi
pi
y
pi->ystep
pi
pi
ystep
{			for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}		}
for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=			  pi->xstep - (pi->x % pi->xstep)) {				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}
pi->x = pi->xstart;
pi->x = pi->xstart
pi->x
pi
pi
x
pi->xstart
pi
pi
xstart
pi->x < pi->xend
pi->x
pi
pi
x
pi->xend
pi
pi
xend
pi->x +=			  pi->xstep - (pi->x % pi->xstep)
pi->x
pi
pi
x
pi->xstep - (pi->x % pi->xstep)
pi->xstep
pi
pi
xstep
(pi->x % pi->xstep)
pi->x % pi->xstep
pi->x
pi
pi
x
pi->xstep
pi
pi
xstep
{				for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps; ++pi->compno, ++pi->picomp) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}			}
for (pi->compno = pchg->compnostart,				  pi->picomp = &pi->picomps[pi->compno];				  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno <				  pi->numcomps;
++pi->compno, ++pi->picomp
++pi->compno, ++pi->picomp
++pi->compno
pi->compno
pi
pi
compno
++pi->picomp
pi->picomp
pi
pi
picomp
p
) {					if (pi->rlvlno >= pi->picomp->numrlvls) {						continue;					}					pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno];					if (pi->pirlvl->numprcs == 0) {						continue;					}					r = pi->picomp->numrlvls - 1 - pi->rlvlno;					rpx = r + pi->pirlvl->prcwidthexpn;					rpy = r + pi->pirlvl->prcheightexpn;					trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);					try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);					if (((pi->x == pi->xstart &&					  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))					  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&					  ((pi->y == pi->ystart &&					  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))					  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {						prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,						  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -						  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);						prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,						  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -						  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);						pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;						assert(pi->prcno < pi->pirlvl->numprcs);						for (pi->lyrno = 0; pi->lyrno <						  pi->numlyrs && pi->lyrno < JAS_CAST(int,						  pchg->lyrnoend); ++pi->lyrno) {							prclyrno = &pi->pirlvl->prclyrnos[pi->prcno];							if (pi->lyrno >= *prclyrno) {								++(*prclyrno);								return 0;							}skip:							;						}					}				}
return 1;
1
-----joern-----
(402,458,0)
(599,384,0)
(465,221,0)
(447,96,0)
(430,169,0)
(182,20,0)
(501,420,0)
(259,33,0)
(412,561,0)
(320,535,0)
(246,350,0)
(556,226,0)
(133,126,0)
(230,104,0)
(46,421,0)
(451,437,0)
(212,65,0)
(135,273,0)
(5,490,0)
(133,574,0)
(283,458,0)
(560,397,0)
(463,458,0)
(228,447,0)
(42,128,0)
(420,272,0)
(325,343,0)
(203,229,0)
(342,337,0)
(541,587,0)
(520,464,0)
(121,387,0)
(152,92,0)
(254,555,0)
(179,458,0)
(436,411,0)
(17,362,0)
(20,164,0)
(425,226,0)
(475,108,0)
(114,419,0)
(472,521,0)
(279,491,0)
(435,133,0)
(545,544,0)
(456,400,0)
(170,358,0)
(354,515,0)
(65,212,0)
(96,140,0)
(475,458,0)
(231,505,0)
(72,293,0)
(161,237,0)
(154,163,0)
(309,108,0)
(340,259,0)
(117,23,0)
(170,586,0)
(119,139,0)
(190,450,0)
(229,153,0)
(50,145,0)
(553,177,0)
(396,358,0)
(125,483,0)
(595,229,0)
(362,170,0)
(273,255,0)
(24,197,0)
(586,458,0)
(170,190,0)
(404,379,0)
(32,437,0)
(7,139,0)
(166,14,0)
(600,422,0)
(585,194,0)
(136,410,0)
(554,99,0)
(326,119,0)
(433,69,0)
(30,360,0)
(443,513,0)
(421,100,0)
(150,214,0)
(345,427,0)
(463,350,0)
(86,72,0)
(479,240,0)
(274,458,0)
(140,129,0)
(28,371,0)
(166,458,0)
(284,384,0)
(19,389,0)
(68,276,0)
(528,269,0)
(448,515,0)
(170,371,0)
(37,84,0)
(206,458,0)
(242,200,0)
(401,462,0)
(210,470,0)
(442,370,0)
(396,329,0)
(84,456,0)
(189,156,0)
(243,387,0)
(233,371,0)
(420,191,0)
(502,467,0)
(296,305,0)
(132,458,0)
(9,127,0)
(249,473,0)
(420,501,0)
(145,450,0)
(262,266,0)
(424,141,0)
(291,472,0)
(8,58,0)
(169,373,0)
(432,458,0)
(452,570,0)
(33,288,0)
(14,325,0)
(455,470,0)
(528,445,0)
(285,609,0)
(491,279,0)
(462,528,0)
(246,535,0)
(489,104,0)
(515,354,0)
(194,458,0)
(53,96,0)
(343,39,0)
(609,458,0)
(108,445,0)
(240,458,0)
(130,243,0)
(136,458,0)
(32,400,0)
(605,467,0)
(81,458,0)
(344,458,0)
(147,126,0)
(135,506,0)
(371,58,0)
(419,347,0)
(491,458,0)
(15,309,0)
(170,81,0)
(170,206,0)
(41,70,0)
(343,609,0)
(120,225,0)
(3,288,0)
(570,452,0)
(579,200,0)
(99,190,0)
(237,161,0)
(140,424,0)
(222,207,0)
(59,584,0)
(6,553,0)
(145,437,0)
(472,458,0)
(364,402,0)
(399,151,0)
(96,104,0)
(44,254,0)
(100,467,0)
(535,389,0)
(580,272,0)
(225,108,0)
(275,30,0)
(414,273,0)
(396,361,0)
(501,421,0)
(240,479,0)
(350,246,0)
(154,487,0)
(414,279,0)
(531,108,0)
(39,506,0)
(508,28,0)
(228,575,0)
(453,467,0)
(192,212,0)
(167,367,0)
(437,226,0)
(172,206,0)
(327,144,0)
(518,379,0)
(10,469,0)
(450,362,0)
(490,428,0)
(168,574,0)
(581,458,0)
(584,458,0)
(126,306,0)
(155,74,0)
(305,458,0)
(106,555,0)
(204,226,0)
(252,380,0)
(449,586,0)
(154,458,0)
(564,373,0)
(103,411,0)
(58,447,0)
(541,33,0)
(534,475,0)
(254,44,0)
(267,104,0)
(28,464,0)
(28,361,0)
(497,336,0)
(384,306,0)
(279,414,0)
(153,314,0)
(28,411,0)
(212,293,0)
(74,83,0)
(533,135,0)
(553,278,0)
(247,484,0)
(587,541,0)
(99,437,0)
(132,163,0)
(469,10,0)
(343,411,0)
(302,166,0)
(428,490,0)
(194,30,0)
(35,283,0)
(435,152,0)
(424,560,0)
(402,284,0)
(198,275,0)
(196,367,0)
(290,549,0)
(159,179,0)
(32,458,0)
(14,166,0)
(309,458,0)
(177,282,0)
(283,556,0)
(129,119,0)
(586,437,0)
(164,20,0)
(447,58,0)
(254,168,0)
(256,458,0)
(447,378,0)
(422,366,0)
(308,458,0)
(28,206,0)
(171,278,0)
(206,306,0)
(486,274,0)
(148,188,0)
(25,126,0)
(477,456,0)
(606,62,0)
(37,458,0)
(527,400,0)
(397,560,0)
(309,10,0)
(608,214,0)
(476,10,0)
(74,202,0)
(470,455,0)
(393,129,0)
(575,458,0)
(78,23,0)
(146,586,0)
(560,424,0)
(567,222,0)
(396,411,0)
(289,516,0)
(377,465,0)
(187,161,0)
(123,135,0)
(539,161,0)
(216,257,0)
(127,455,0)
(550,589,0)
(514,422,0)
(258,394,0)
(243,177,0)
(144,580,0)
(343,586,0)
(416,87,0)
(483,509,0)
(71,348,0)
(343,151,0)
(350,463,0)
(464,458,0)
(343,224,0)
(205,252,0)
(374,132,0)
(20,506,0)
(359,497,0)
(266,168,0)
(572,589,0)
(441,41,0)
(358,204,0)
(343,70,0)
(450,190,0)
(200,30,0)
(561,119,0)
(245,361,0)
(354,490,0)
(558,61,0)
(274,553,0)
(529,406,0)
(343,81,0)
(210,23,0)
(497,458,0)
(409,455,0)
(602,163,0)
(305,306,0)
(214,343,0)
(411,458,0)
(500,568,0)
(229,203,0)
(561,438,0)
(472,483,0)
(596,155,0)
(91,308,0)
(49,467,0)
(517,145,0)
(510,464,0)
(462,458,0)
(519,460,0)
(165,551,0)
(70,263,0)
(325,458,0)
(522,377,0)
(276,458,0)
(469,360,0)
(540,454,0)
(202,74,0)
(90,303,0)
(441,343,0)
(607,136,0)
(370,367,0)
(410,136,0)
(170,464,0)
(221,465,0)
(65,150,0)
(322,294,0)
(139,458,0)
(380,83,0)
(89,371,0)
(371,458,0)
(92,56,0)
(551,29,0)
(323,433,0)
(457,355,0)
(340,333,0)
(173,20,0)
(515,389,0)
(275,458,0)
(118,337,0)
(174,375,0)
(261,556,0)
(277,87,0)
(137,203,0)
(174,156,0)
(343,179,0)
(288,33,0)
(207,192,0)
(126,458,0)
(360,30,0)
(358,458,0)
(444,6,0)
(487,154,0)
(431,240,0)
(396,151,0)
(263,58,0)
(405,576,0)
(580,256,0)
(308,368,0)
(547,467,0)
(99,267,0)
(432,380,0)
(524,575,0)
(590,467,0)
(276,544,0)
(52,454,0)
(367,167,0)
(494,347,0)
(269,528,0)
(521,440,0)
(325,506,0)
(74,155,0)
(171,486,0)
(191,483,0)
(582,394,0)
(92,152,0)
(469,530,0)
(551,30,0)
(8,378,0)
(110,447,0)
(193,128,0)
(28,39,0)
(468,37,0)
(0,544,0)
(276,30,0)
(1,156,0)
(156,174,0)
(24,218,0)
(298,196,0)
(382,210,0)
(407,275,0)
(463,30,0)
(353,274,0)
(69,289,0)
(532,246,0)
(275,387,0)
(516,289,0)
(174,405,0)
(441,458,0)
(459,454,0)
(288,458,0)
(450,145,0)
(310,71,0)
(396,464,0)
(343,361,0)
(329,170,0)
(601,417,0)
(107,587,0)
(328,32,0)
(143,609,0)
(507,541,0)
(200,377,0)
(100,300,0)
(164,581,0)
(99,458,0)
(574,410,0)
(505,584,0)
(504,325,0)
(560,196,0)
(248,263,0)
(141,424,0)
(289,555,0)
(128,458,0)
(263,556,0)
(317,427,0)
(230,218,0)
(396,563,0)
(28,151,0)
(478,550,0)
(432,93,0)
(396,371,0)
(132,340,0)
(352,600,0)
(544,545,0)
(112,348,0)
(43,587,0)
(301,256,0)
(192,207,0)
(484,93,0)
(176,475,0)
(381,154,0)
(28,358,0)
(97,254,0)
(273,135,0)
(4,491,0)
(410,574,0)
(273,414,0)
(2,166,0)
(250,417,0)
(531,355,0)
(548,141,0)
(30,389,0)
(396,586,0)
(396,224,0)
(294,458,0)
(202,93,0)
(292,125,0)
(334,309,0)
(378,8,0)
(37,437,0)
(122,279,0)
(227,422,0)
(185,405,0)
(125,100,0)
(396,283,0)
(337,556,0)
(465,515,0)
(400,456,0)
(180,435,0)
(87,535,0)
(156,119,0)
(41,337,0)
(330,154,0)
(294,368,0)
(214,150,0)
(427,458,0)
(306,305,0)
(28,81,0)
(235,255,0)
(280,277,0)
(387,243,0)
(356,336,0)
(536,329,0)
(150,65,0)
(207,222,0)
(191,420,0)
(570,535,0)
(294,170,0)
(403,530,0)
(116,294,0)
(396,609,0)
(580,144,0)
(604,300,0)
(151,93,0)
(485,177,0)
(199,151,0)
(575,58,0)
(142,389,0)
(438,197,0)
(140,96,0)
(152,389,0)
(76,9,0)
(461,575,0)
(505,601,0)
(361,267,0)
(496,467,0)
(535,246,0)
(396,179,0)
(610,252,0)
(466,472,0)
(348,108,0)
(28,283,0)
(197,370,0)
(390,224,0)
(447,228,0)
(357,218,0)
(267,456,0)
(40,284,0)
(270,362,0)
(256,580,0)
(70,41,0)
(126,170,0)
(312,463,0)
(197,438,0)
(315,463,0)
(22,325,0)
(92,355,0)
(160,422,0)
(224,458,0)
(94,375,0)
(255,152,0)
(417,601,0)
(170,283,0)
(83,380,0)
(62,458,0)
(606,440,0)
(135,458,0)
(257,30,0)
(271,452,0)
(28,224,0)
(69,152,0)
(286,139,0)
(21,467,0)
(341,419,0)
(209,240,0)
(181,269,0)
(340,132,0)
(336,90,0)
(357,119,0)
(499,421,0)
(368,294,0)
(218,357,0)
(239,290,0)
(589,119,0)
(36,349,0)
(484,100,0)
(101,61,0)
(217,497,0)
(220,561,0)
(33,259,0)
(337,458,0)
(592,127,0)
(84,37,0)
(196,560,0)
(251,155,0)
(512,465,0)
(177,243,0)
(495,129,0)
(37,267,0)
(87,207,0)
(153,394,0)
(268,439,0)
(255,273,0)
(144,458,0)
(456,267,0)
(324,137,0)
(488,16,0)
(51,378,0)
(192,14,0)
(445,108,0)
(566,39,0)
(362,306,0)
(11,277,0)
(253,462,0)
(61,153,0)
(491,30,0)
(545,6,0)
(29,486,0)
(24,66,0)
(282,221,0)
(349,367,0)
(105,37,0)
(337,58,0)
(326,549,0)
(307,329,0)
(9,30,0)
(284,40,0)
(179,343,0)
(200,458,0)
(474,308,0)
(441,506,0)
(525,379,0)
(514,265,0)
(211,357,0)
(75,62,0)
(433,225,0)
(47,90,0)
(411,30,0)
(32,267,0)
(325,14,0)
(257,458,0)
(336,497,0)
(428,460,0)
(87,277,0)
(13,375,0)
(16,397,0)
(503,344,0)
(594,56,0)
(81,483,0)
(34,153,0)
(8,556,0)
(494,367,0)
(72,40,0)
(439,397,0)
(293,212,0)
(396,206,0)
(288,163,0)
(282,278,0)
(183,576,0)
(101,563,0)
(144,483,0)
(98,432,0)
(128,506,0)
(609,553,0)
(168,266,0)
(72,86,0)
(385,99,0)
(388,222,0)
(413,81,0)
(170,179,0)
(176,435,0)
(38,594,0)
(287,350,0)
(40,404,0)
(240,170,0)
(28,179,0)
(419,119,0)
(20,458,0)
(346,8,0)
(456,230,0)
(545,314,0)
(550,422,0)
(232,100,0)
(584,505,0)
(225,433,0)
(115,525,0)
(297,494,0)
(355,531,0)
(197,24,0)
(594,458,0)
(396,39,0)
(343,358,0)
(506,128,0)
(215,396,0)
(316,194,0)
(490,354,0)
(460,108,0)
(129,140,0)
(343,464,0)
(372,555,0)
(331,467,0)
(137,163,0)
(155,458,0)
(259,340,0)
(379,470,0)
(66,24,0)
(387,275,0)
(349,265,0)
(598,256,0)
(470,389,0)
(127,9,0)
(600,438,0)
(516,458,0)
(552,333,0)
(396,81,0)
(391,570,0)
(170,151,0)
(23,210,0)
(219,191,0)
(575,556,0)
(269,458,0)
(9,458,0)
(360,469,0)
(386,370,0)
(438,600,0)
(157,214,0)
(329,458,0)
(6,458,0)
(574,168,0)
(363,443,0)
(184,581,0)
(139,119,0)
(540,185,0)
(601,505,0)
(218,24,0)
(56,594,0)
(170,361,0)
(289,69,0)
(126,133,0)
(29,551,0)
(170,411,0)
(86,479,0)
(443,283,0)
(332,467,0)
(95,206,0)
(266,278,0)
(589,550,0)
(319,278,0)
(108,509,0)
(299,29,0)
(380,252,0)
(384,284,0)
(362,458,0)
(571,300,0)
(528,462,0)
(243,266,0)
(464,108,0)
(379,404,0)
(574,133,0)
(221,414,0)
(479,210,0)
(177,553,0)
(423,498,0)
(40,72,0)
(542,514,0)
(591,202,0)
(272,580,0)
(119,303,0)
(377,200,0)
(368,308,0)
(213,344,0)
(80,358,0)
(483,125,0)
(376,28,0)
(134,119,0)
(530,458,0)
(16,119,0)
(372,152,0)
(113,441,0)
(31,600,0)
(347,494,0)
(145,458,0)
(415,39,0)
(480,66,0)
(434,56,0)
(138,274,0)
(543,282,0)
(185,540,0)
(475,176,0)
(583,494,0)
(57,470,0)
(158,44,0)
(314,545,0)
(375,367,0)
(190,99,0)
(27,288,0)
(151,458,0)
(424,140,0)
(521,472,0)
(222,515,0)
(344,93,0)
(82,551,0)
(20,343,0)
(456,84,0)
(295,137,0)
(77,361,0)
(508,396,0)
(577,531,0)
(559,475,0)
(85,417,0)
(392,224,0)
(64,283,0)
(588,191,0)
(210,479,0)
(597,196,0)
(135,343,0)
(62,108,0)
(339,326,0)
(460,428,0)
(443,371,0)
(294,306,0)
(170,224,0)
(10,309,0)
(530,93,0)
(263,70,0)
(511,530,0)
(526,263,0)
(573,90,0)
(124,141,0)
(400,32,0)
(44,194,0)
(145,267,0)
(167,119,0)
(28,609,0)
(397,439,0)
(71,255,0)
(109,136,0)
(603,204,0)
(555,289,0)
(384,458,0)
(405,174,0)
(208,467,0)
(375,174,0)
(225,458,0)
(170,329,0)
(214,506,0)
(290,90,0)
(202,458,0)
(372,404,0)
(191,458,0)
(348,71,0)
(404,40,0)
(8,458,0)
(351,202,0)
(54,144,0)
(240,306,0)
(88,467,0)
(234,410,0)
(400,230,0)
(58,104,0)
(439,422,0)
(479,86,0)
(555,389,0)
(207,87,0)
(55,225,0)
(454,540,0)
(102,344,0)
(429,525,0)
(190,170,0)
(93,484,0)
(333,458,0)
(408,132,0)
(274,486,0)
(6,545,0)
(56,92,0)
(443,361,0)
(314,153,0)
(581,164,0)
(136,30,0)
(62,606,0)
(252,100,0)
(281,358,0)
(131,584,0)
(490,152,0)
(26,402,0)
(18,276,0)
(39,458,0)
(333,340,0)
(551,458,0)
(214,458,0)
(221,282,0)
(63,16,0)
(343,329,0)
(418,176,0)
(569,501,0)
(343,206,0)
(443,586,0)
(493,179,0)
(537,516,0)
(149,167,0)
(435,176,0)
(61,101,0)
(405,185,0)
(426,357,0)
(365,318,0)
(48,269,0)
(373,169,0)
(269,483,0)
(492,257,0)
(482,439,0)
(481,531,0)
(455,127,0)
(255,71,0)
(300,458,0)
(369,441,0)
(417,93,0)
(570,150,0)
(260,384,0)
(531,458,0)
(530,469,0)
(546,428,0)
(236,69,0)
(223,333,0)
(194,44,0)
(263,458,0)
(203,137,0)
(354,427,0)
(471,432,0)
(321,363,0)
(348,458,0)
(178,372,0)
(201,576,0)
(343,283,0)
(378,447,0)
(575,228,0)
(257,373,0)
(383,491,0)
(244,467,0)
(367,366,0)
(486,29,0)
(404,372,0)
(562,372,0)
(508,443,0)
(370,197,0)
(238,589,0)
(384,170,0)
(12,460,0)
(338,62,0)
(587,100,0)
(427,354,0)
(378,96,0)
(170,609,0)
(60,581,0)
(395,389,0)
(300,100,0)
(417,458,0)
(540,347,0)
(162,348,0)
(83,74,0)
(150,570,0)
(67,8,0)
(578,467,0)
(523,81,0)
(14,192,0)
(272,420,0)
(28,586,0)
(133,435,0)
(380,432,0)
(186,367,0)
(246,152,0)
(594,93,0)
(311,125,0)
(347,419,0)
(414,221,0)
(397,16,0)
(445,528,0)
(362,450,0)
(347,540,0)
(175,484,0)
(355,92,0)
(111,167,0)
(460,458,0)
(161,458,0)
(565,467,0)
(538,335,0)
(293,72,0)
(398,152,0)
(69,433,0)
(337,41,0)
(576,405,0)
(465,377,0)
(212,192,0)
(222,152,0)
(33,541,0)
(304,32,0)
(584,108,0)
(284,402,0)
(421,501,0)
(73,467,0)
(544,276,0)
(446,516,0)
(79,452,0)
(344,102,0)
(438,561,0)
(379,525,0)
(361,458,0)
(455,152,0)
(593,305,0)
(28,329,0)
(264,467,0)
(313,9,0)
(170,39,0)
(224,163,0)
(45,66,0)
(218,230,0)
(28,467,0)
(195,594,0)
(343,371,0)
(557,6,0)
(373,257,0)
(137,458,0)
(241,230,0)
(486,171,0)
(168,254,0)
(70,343,0)
(41,441,0)
(137,458,1)
(494,367,1)
(378,8,1)
(255,71,1)
(127,592,1)
(86,479,1)
(91,294,1)
(396,224,1)
(404,372,1)
(28,358,1)
(472,458,1)
(471,98,1)
(461,371,1)
(291,259,1)
(338,521,1)
(343,283,1)
(126,458,1)
(448,470,1)
(30,360,1)
(356,119,1)
(164,581,1)
(254,555,1)
(377,200,1)
(170,586,1)
(269,483,1)
(214,506,1)
(0,276,1)
(206,458,1)
(441,458,1)
(396,206,1)
(328,84,1)
(274,458,1)
(540,454,1)
(484,100,1)
(528,462,1)
(462,401,1)
(138,353,1)
(214,343,1)
(170,179,1)
(131,59,1)
(400,527,1)
(231,584,1)
(24,197,1)
(391,452,1)
(121,275,1)
(250,85,1)
(475,458,1)
(544,0,1)
(282,221,1)
(537,106,1)
(246,152,1)
(418,475,1)
(464,520,1)
(194,316,1)
(114,341,1)
(103,436,1)
(443,586,1)
(177,485,1)
(182,343,1)
(176,475,1)
(204,603,1)
(62,75,1)
(322,306,1)
(588,219,1)
(545,544,1)
(437,451,1)
(126,170,1)
(6,553,1)
(54,327,1)
(396,39,1)
(559,534,1)
(311,292,1)
(155,251,1)
(280,11,1)
(112,162,1)
(293,212,1)
(240,170,1)
(398,169,1)
(504,22,1)
(170,81,1)
(433,225,1)
(589,119,1)
(368,308,1)
(443,371,1)
(447,378,1)
(147,262,1)
(574,410,1)
(225,55,1)
(507,288,1)
(392,171,1)
(432,458,1)
(443,283,1)
(120,516,1)
(525,115,1)
(378,51,1)
(383,273,1)
(510,483,1)
(554,385,1)
(426,211,1)
(279,491,1)
(189,1,1)
(76,409,1)
(341,494,1)
(256,301,1)
(275,407,1)
(375,367,1)
(170,464,1)
(375,13,1)
(343,151,1)
(408,374,1)
(203,137,1)
(155,458,1)
(276,458,1)
(396,586,1)
(344,93,1)
(213,503,1)
(48,181,1)
(108,445,1)
(28,283,1)
(360,469,1)
(82,165,1)
(483,125,1)
(246,350,1)
(170,361,1)
(6,458,1)
(439,422,1)
(32,304,1)
(346,228,1)
(72,40,1)
(362,306,1)
(544,276,1)
(468,105,1)
(316,585,1)
(81,458,1)
(219,108,1)
(455,152,1)
(555,289,1)
(140,424,1)
(542,267,1)
(566,368,1)
(456,230,1)
(441,369,1)
(98,102,1)
(531,577,1)
(460,12,1)
(447,110,1)
(475,559,1)
(393,495,1)
(71,348,1)
(352,31,1)
(128,458,1)
(581,458,1)
(28,329,1)
(255,152,1)
(523,413,1)
(584,458,1)
(497,217,1)
(574,133,1)
(356,326,1)
(330,203,1)
(274,553,1)
(402,458,1)
(320,152,1)
(540,347,1)
(144,483,1)
(551,458,1)
(495,53,1)
(539,187,1)
(575,556,1)
(396,464,1)
(601,505,1)
(583,405,1)
(84,37,1)
(197,370,1)
(567,388,1)
(144,458,1)
(87,535,1)
(5,428,1)
(561,119,1)
(432,93,1)
(161,539,1)
(37,468,1)
(301,598,1)
(561,220,1)
(79,214,1)
(373,564,1)
(44,194,1)
(71,310,1)
(586,146,1)
(465,515,1)
(275,458,1)
(609,458,1)
(60,184,1)
(28,586,1)
(162,135,1)
(472,483,1)
(516,458,1)
(133,126,1)
(165,274,1)
(218,24,1)
(219,606,1)
(28,376,1)
(347,494,1)
(291,293,1)
(480,357,1)
(293,72,1)
(158,194,1)
(175,247,1)
(388,14,1)
(545,6,1)
(207,87,1)
(69,236,1)
(287,463,1)
(46,569,1)
(93,484,1)
(8,67,1)
(89,233,1)
(371,89,1)
(28,464,1)
(160,336,1)
(456,84,1)
(570,452,1)
(199,204,1)
(361,245,1)
(382,23,1)
(297,583,1)
(587,43,1)
(144,54,1)
(402,26,1)
(269,458,1)
(506,128,1)
(463,30,1)
(435,180,1)
(604,232,1)
(3,340,1)
(12,519,1)
(149,186,1)
(163,602,1)
(257,458,1)
(396,179,1)
(129,393,1)
(40,404,1)
(251,596,1)
(13,94,1)
(136,607,1)
(374,487,1)
(434,355,1)
(521,472,1)
(296,206,1)
(242,579,1)
(99,437,1)
(350,463,1)
(180,176,1)
(428,460,1)
(423,169,1)
(28,206,1)
(610,432,1)
(384,260,1)
(168,574,1)
(206,172,1)
(503,368,1)
(479,210,1)
(589,572,1)
(214,157,1)
(307,164,1)
(463,458,1)
(299,551,1)
(113,263,1)
(18,34,1)
(269,48,1)
(349,367,1)
(342,441,1)
(526,248,1)
(469,530,1)
(291,529,1)
(115,429,1)
(187,100,1)
(417,250,1)
(225,108,1)
(355,457,1)
(225,458,1)
(378,96,1)
(166,458,1)
(337,58,1)
(527,32,1)
(107,507,1)
(39,415,1)
(334,15,1)
(362,170,1)
(325,504,1)
(466,291,1)
(276,30,1)
(284,402,1)
(533,543,1)
(252,205,1)
(427,317,1)
(150,214,1)
(358,80,1)
(210,470,1)
(505,231,1)
(136,458,1)
(32,267,1)
(446,537,1)
(273,135,1)
(343,371,1)
(447,96,1)
(387,275,1)
(8,58,1)
(221,465,1)
(135,123,1)
(74,155,1)
(585,97,1)
(455,127,1)
(522,200,1)
(374,163,1)
(451,586,1)
(343,411,1)
(595,137,1)
(370,386,1)
(396,329,1)
(243,387,1)
(211,241,1)
(145,50,1)
(380,252,1)
(456,477,1)
(534,126,1)
(200,242,1)
(380,432,1)
(413,164,1)
(45,480,1)
(417,93,1)
(75,338,1)
(169,373,1)
(438,600,1)
(518,525,1)
(354,427,1)
(329,458,1)
(329,536,1)
(217,359,1)
(384,458,1)
(488,63,1)
(396,371,1)
(130,609,1)
(35,237,1)
(348,112,1)
(309,334,1)
(99,267,1)
(67,346,1)
(530,93,1)
(33,541,1)
(235,71,1)
(512,414,1)
(170,329,1)
(363,321,1)
(190,450,1)
(343,586,1)
(127,9,1)
(421,499,1)
(83,380,1)
(443,361,1)
(52,459,1)
(271,79,1)
(312,532,1)
(294,458,1)
(452,271,1)
(384,170,1)
(186,422,1)
(167,119,1)
(266,168,1)
(414,279,1)
(224,390,1)
(263,58,1)
(248,179,1)
(63,196,1)
(336,90,1)
(459,347,1)
(47,437,1)
(43,107,1)
(260,599,1)
(508,28,1)
(390,392,1)
(300,571,1)
(343,70,1)
(396,215,1)
(151,458,1)
(28,179,1)
(530,403,1)
(593,296,1)
(185,540,1)
(409,57,1)
(110,228,1)
(494,297,1)
(577,481,1)
(454,52,1)
(478,367,1)
(490,428,1)
(337,118,1)
(315,312,1)
(90,573,1)
(481,398,1)
(259,340,1)
(215,101,1)
(405,576,1)
(343,179,1)
(87,277,1)
(325,343,1)
(57,535,1)
(404,379,1)
(2,325,1)
(55,120,1)
(520,510,1)
(344,213,1)
(436,601,1)
(66,45,1)
(560,196,1)
(486,274,1)
(145,458,1)
(475,108,1)
(294,170,1)
(541,587,1)
(14,325,1)
(257,30,1)
(119,139,1)
(133,435,1)
(419,114,1)
(584,131,1)
(61,153,1)
(340,132,1)
(548,124,1)
(337,556,1)
(438,561,1)
(580,144,1)
(373,257,1)
(132,408,1)
(202,93,1)
(407,198,1)
(432,471,1)
(401,253,1)
(594,458,1)
(580,256,1)
(476,309,1)
(572,238,1)
(579,512,1)
(83,74,1)
(81,523,1)
(167,111,1)
(70,263,1)
(31,561,1)
(62,458,1)
(581,60,1)
(417,458,1)
(564,257,1)
(387,121,1)
(457,531,1)
(92,355,1)
(562,178,1)
(176,418,1)
(410,136,1)
(405,174,1)
(178,284,1)
(216,30,1)
(236,433,1)
(152,92,1)
(234,136,1)
(185,405,1)
(424,560,1)
(262,282,1)
(94,550,1)
(551,30,1)
(600,352,1)
(367,167,1)
(306,305,1)
(372,562,1)
(327,420,1)
(470,455,1)
(170,609,1)
(308,474,1)
(531,458,1)
(37,458,1)
(272,420,1)
(343,39,1)
(606,62,1)
(28,151,1)
(224,458,1)
(29,299,1)
(435,152,1)
(305,458,1)
(99,554,1)
(597,141,1)
(38,434,1)
(256,458,1)
(601,417,1)
(435,176,1)
(608,192,1)
(325,506,1)
(447,228,1)
(193,42,1)
(141,548,1)
(62,108,1)
(330,500,1)
(419,119,1)
(421,100,1)
(44,158,1)
(284,384,1)
(227,160,1)
(291,423,1)
(584,108,1)
(28,371,1)
(449,556,1)
(1,375,1)
(302,2,1)
(252,100,1)
(6,557,1)
(576,183,1)
(472,466,1)
(65,150,1)
(462,458,1)
(322,170,1)
(4,383,1)
(20,343,1)
(214,458,1)
(573,47,1)
(77,58,1)
(154,458,1)
(479,240,1)
(377,522,1)
(416,277,1)
(143,285,1)
(535,246,1)
(396,81,1)
(177,243,1)
(29,551,1)
(196,367,1)
(157,608,1)
(531,108,1)
(295,153,1)
(403,511,1)
(218,357,1)
(288,27,1)
(92,56,1)
(99,458,1)
(58,447,1)
(603,358,1)
(524,461,1)
(24,66,1)
(105,361,1)
(192,14,1)
(372,555,1)
(571,604,1)
(134,90,1)
(263,526,1)
(343,609,1)
(465,377,1)
(359,356,1)
(174,156,1)
(170,224,1)
(23,117,1)
(222,515,1)
(42,39,1)
(396,609,1)
(124,129,1)
(343,329,1)
(247,151,1)
(132,163,1)
(14,166,1)
(326,119,1)
(424,141,1)
(353,553,1)
(482,16,1)
(41,441,1)
(106,515,1)
(137,163,1)
(400,32,1)
(70,41,1)
(20,506,1)
(429,372,1)
(139,286,1)
(7,134,1)
(343,358,1)
(285,266,1)
(87,416,1)
(602,224,1)
(222,152,1)
(450,145,1)
(212,192,1)
(203,229,1)
(478,349,1)
(345,448,1)
(396,358,1)
(179,493,1)
(333,223,1)
(28,609,1)
(294,306,1)
(145,437,1)
(170,39,1)
(376,83,1)
(410,234,1)
(28,411,1)
(347,419,1)
(56,594,1)
(433,323,1)
(351,380,1)
(575,58,1)
(28,81,1)
(37,437,1)
(177,282,1)
(126,306,1)
(386,442,1)
(558,203,1)
(411,458,1)
(174,375,1)
(289,516,1)
(197,438,1)
(230,218,1)
(32,437,1)
(85,272,1)
(397,439,1)
(431,209,1)
(384,306,1)
(396,151,1)
(40,284,1)
(10,309,1)
(385,329,1)
(17,270,1)
(368,294,1)
(190,99,1)
(15,411,1)
(263,458,1)
(37,267,1)
(98,93,1)
(125,100,1)
(283,64,1)
(412,370,1)
(587,100,1)
(61,558,1)
(277,280,1)
(20,173,1)
(102,344,1)
(27,3,1)
(281,336,1)
(172,95,1)
(228,575,1)
(500,237,1)
(420,501,1)
(273,255,1)
(460,108,1)
(358,458,1)
(137,324,1)
(16,488,1)
(569,191,1)
(109,133,1)
(212,65,1)
(200,30,1)
(64,35,1)
(517,362,1)
(491,30,1)
(69,433,1)
(477,84,1)
(210,382,1)
(362,17,1)
(123,533,1)
(39,458,1)
(570,535,1)
(9,458,1)
(237,161,1)
(238,478,1)
(268,482,1)
(241,96,1)
(288,458,1)
(317,345,1)
(486,29,1)
(441,506,1)
(354,490,1)
(166,302,1)
(243,266,1)
(505,584,1)
(441,343,1)
(191,588,1)
(69,152,1)
(456,400,1)
(267,456,1)
(450,362,1)
(484,175,1)
(9,30,1)
(101,61,1)
(8,458,1)
(379,470,1)
(255,235,1)
(321,185,1)
(344,458,1)
(97,574,1)
(8,556,1)
(33,288,1)
(557,444,1)
(396,411,1)
(371,458,1)
(207,222,1)
(290,239,1)
(270,99,1)
(253,464,1)
(361,458,1)
(154,381,1)
(536,307,1)
(196,298,1)
(348,108,1)
(357,426,1)
(192,207,1)
(68,18,1)
(515,354,1)
(191,458,1)
(336,497,1)
(414,273,1)
(22,555,1)
(514,422,1)
(128,193,1)
(370,367,1)
(28,224,1)
(173,182,1)
(170,371,1)
(170,190,1)
(288,163,1)
(343,206,1)
(9,313,1)
(272,580,1)
(508,396,1)
(164,20,1)
(153,314,1)
(182,506,1)
(339,290,1)
(516,446,1)
(348,458,1)
(594,195,1)
(308,458,1)
(156,119,1)
(463,315,1)
(191,483,1)
(194,30,1)
(323,225,1)
(229,595,1)
(233,230,1)
(95,83,1)
(445,528,1)
(198,130,1)
(490,152,1)
(274,138,1)
(430,373,1)
(194,458,1)
(600,422,1)
(276,68,1)
(140,129,1)
(491,4,1)
(313,76,1)
(125,311,1)
(300,458,1)
(50,517,1)
(399,199,1)
(326,339,1)
(556,261,1)
(25,147,1)
(420,191,1)
(151,399,1)
(598,144,1)
(444,544,1)
(560,397,1)
(532,320,1)
(415,566,1)
(372,152,1)
(41,337,1)
(397,16,1)
(136,30,1)
(294,116,1)
(170,358,1)
(343,361,1)
(51,8,1)
(460,458,1)
(202,458,1)
(129,119,1)
(396,361,1)
(118,342,1)
(183,201,1)
(239,550,1)
(195,38,1)
(325,458,1)
(161,458,1)
(184,20,1)
(362,458,1)
(514,542,1)
(100,300,1)
(469,10,1)
(355,531,1)
(96,140,1)
(74,202,1)
(220,412,1)
(205,610,1)
(340,333,1)
(169,430,1)
(240,431,1)
(592,9,1)
(292,81,1)
(171,486,1)
(290,90,1)
(229,153,1)
(28,361,1)
(16,119,1)
(607,109,1)
(490,5,1)
(379,525,1)
(305,593,1)
(501,421,1)
(263,556,1)
(439,268,1)
(59,417,1)
(298,597,1)
(491,458,1)
(570,391,1)
(221,414,1)
(223,552,1)
(72,86,1)
(357,119,1)
(11,222,1)
(427,458,1)
(609,143,1)
(28,39,1)
(259,33,1)
(286,7,1)
(150,570,1)
(428,546,1)
(508,443,1)
(529,601,1)
(552,132,1)
(170,283,1)
(511,10,1)
(135,343,1)
(168,254,1)
(343,464,1)
(411,103,1)
(78,240,1)
(543,293,1)
(575,458,1)
(159,272,1)
(10,476,1)
(337,458,1)
(126,25,1)
(111,149,1)
(36,514,1)
(222,567,1)
(34,259,1)
(179,458,1)
(487,154,1)
(369,113,1)
(181,462,1)
(32,458,1)
(261,283,1)
(350,287,1)
(310,348,1)
(343,224,1)
(499,46,1)
(257,492,1)
(519,427,1)
(333,458,1)
(240,458,1)
(154,163,1)
(210,23,1)
(245,77,1)
(201,174,1)
(530,458,1)
(575,524,1)
(146,449,1)
(553,177,1)
(279,122,1)
(586,458,1)
(343,81,1)
(156,189,1)
(396,283,1)
(135,458,1)
(254,44,1)
(324,295,1)
(170,151,1)
(209,40,1)
(492,216,1)
(314,545,1)
(26,364,1)
(135,506,1)
(309,108,1)
(442,66,1)
(145,267,1)
(304,328,1)
(497,458,1)
(139,458,1)
(443,363,1)
(202,591,1)
(240,306,1)
(20,458,1)
(289,69,1)
(528,269,1)
(599,212,1)
(550,589,1)
(117,78,1)
(275,30,1)
(116,322,1)
(309,458,1)
(493,159,1)
(200,458,1)
(132,458,1)
(170,206,1)
(122,491,1)
(349,36,1)
(550,422,1)
(464,458,1)
(53,185,1)
(591,351,1)
(422,227,1)
(551,82,1)
(485,243,1)
(546,460,1)
(379,518,1)
(474,91,1)
(596,202,1)
(381,330,1)
(80,281,1)
(283,458,1)
(400,230,1)
(594,93,1)
(364,384,1)
(170,411,1)
(447,96,2)
(185,540,2)
(372,555,2)
(579,293,2)
(28,83,2)
(228,185,2)
(218,357,2)
(343,224,2)
(326,550,2)
(2,169,2)
(424,560,2)
(75,259,2)
(516,169,2)
(330,203,2)
(32,84,2)
(577,169,2)
(44,293,2)
(35,237,2)
(170,329,2)
(58,185,2)
(169,601,2)
(548,185,2)
(580,420,2)
(285,293,2)
(191,164,2)
(584,458,2)
(145,458,2)
(429,284,2)
(288,163,2)
(46,259,2)
(75,169,2)
(371,458,2)
(599,212,2)
(542,185,2)
(108,164,2)
(475,108,2)
(90,237,2)
(255,152,2)
(403,601,2)
(497,550,2)
(82,293,2)
(164,272,2)
(466,293,2)
(3,340,2)
(190,99,2)
(530,458,2)
(555,169,2)
(343,151,2)
(591,380,2)
(344,368,2)
(397,439,2)
(573,237,2)
(75,601,2)
(343,206,2)
(170,609,2)
(257,458,2)
(419,119,2)
(540,405,2)
(125,100,2)
(524,185,2)
(5,169,2)
(203,259,2)
(218,24,2)
(347,419,2)
(314,545,2)
(575,185,2)
(220,185,2)
(380,368,2)
(481,169,2)
(426,185,2)
(402,458,2)
(225,458,2)
(561,119,2)
(223,237,2)
(462,458,2)
(28,361,2)
(87,277,2)
(33,288,2)
(165,293,2)
(292,164,2)
(396,179,2)
(541,340,2)
(545,544,2)
(241,185,2)
(427,458,2)
(588,293,2)
(569,259,2)
(373,601,2)
(588,169,2)
(408,203,2)
(420,164,2)
(423,169,2)
(219,164,2)
(408,293,2)
(68,259,2)
(558,203,2)
(450,362,2)
(455,127,2)
(315,169,2)
(562,284,2)
(112,293,2)
(470,455,2)
(592,169,2)
(201,550,2)
(16,119,2)
(405,550,2)
(10,309,2)
(170,81,2)
(362,164,2)
(521,169,2)
(411,458,2)
(528,269,2)
(325,458,2)
(93,336,2)
(126,306,2)
(455,152,2)
(329,458,2)
(279,491,2)
(514,422,2)
(379,284,2)
(472,293,2)
(469,530,2)
(457,169,2)
(222,14,2)
(224,293,2)
(368,164,2)
(586,237,2)
(321,185,2)
(414,293,2)
(597,185,2)
(378,228,2)
(223,293,2)
(606,601,2)
(14,169,2)
(41,441,2)
(432,93,2)
(57,169,2)
(343,609,2)
(273,135,2)
(28,283,2)
(355,169,2)
(349,367,2)
(240,170,2)
(290,90,2)
(210,40,2)
(381,203,2)
(334,601,2)
(413,164,2)
(23,40,2)
(553,177,2)
(24,197,2)
(152,169,2)
(156,550,2)
(123,293,2)
(298,185,2)
(126,458,2)
(521,259,2)
(8,458,2)
(343,39,2)
(105,185,2)
(191,169,2)
(22,169,2)
(347,405,2)
(588,259,2)
(555,289,2)
(469,601,2)
(355,531,2)
(157,192,2)
(384,306,2)
(59,272,2)
(385,164,2)
(113,272,2)
(460,169,2)
(507,340,2)
(140,424,2)
(551,30,2)
(96,140,2)
(28,411,2)
(570,452,2)
(404,284,2)
(191,483,2)
(92,56,2)
(197,370,2)
(77,185,2)
(486,274,2)
(239,550,2)
(137,259,2)
(421,169,2)
(62,458,2)
(293,169,2)
(40,404,2)
(360,601,2)
(400,32,2)
(9,30,2)
(504,169,2)
(490,169,2)
(125,164,2)
(343,272,2)
(170,39,2)
(594,93,2)
(61,153,2)
(164,20,2)
(75,293,2)
(132,237,2)
(336,497,2)
(583,405,2)
(219,259,2)
(435,152,2)
(252,368,2)
(272,580,2)
(537,169,2)
(575,458,2)
(144,458,2)
(263,556,2)
(466,601,2)
(116,83,2)
(349,185,2)
(41,337,2)
(299,293,2)
(247,336,2)
(256,420,2)
(230,218,2)
(263,272,2)
(340,203,2)
(27,340,2)
(570,535,2)
(447,378,2)
(396,151,2)
(28,371,2)
(14,325,2)
(84,185,2)
(397,185,2)
(38,169,2)
(584,272,2)
(48,164,2)
(170,464,2)
(140,129,2)
(274,553,2)
(9,169,2)
(62,169,2)
(141,185,2)
(162,293,2)
(37,458,2)
(221,414,2)
(550,336,2)
(506,128,2)
(419,405,2)
(72,86,2)
(417,272,2)
(106,169,2)
(478,336,2)
(154,163,2)
(432,458,2)
(475,458,2)
(129,119,2)
(257,30,2)
(214,192,2)
(510,164,2)
(391,192,2)
(231,272,2)
(380,336,2)
(289,516,2)
(412,185,2)
(30,601,2)
(252,100,2)
(375,550,2)
(401,164,2)
(478,185,2)
(589,119,2)
(56,594,2)
(544,276,2)
(345,169,2)
(417,93,2)
(217,550,2)
(198,293,2)
(600,185,2)
(369,272,2)
(74,155,2)
(443,283,2)
(348,458,2)
(543,293,2)
(435,293,2)
(452,192,2)
(405,174,2)
(29,551,2)
(46,293,2)
(569,601,2)
(173,368,2)
(367,167,2)
(272,420,2)
(501,601,2)
(255,71,2)
(364,212,2)
(7,237,2)
(6,458,2)
(438,185,2)
(267,185,2)
(499,601,2)
(153,314,2)
(466,169,2)
(207,14,2)
(495,185,2)
(28,358,2)
(361,458,2)
(594,169,2)
(330,237,2)
(166,169,2)
(74,202,2)
(322,164,2)
(362,458,2)
(53,185,2)
(297,405,2)
(32,267,2)
(499,293,2)
(560,397,2)
(284,402,2)
(62,293,2)
(108,445,2)
(128,458,2)
(102,368,2)
(533,293,2)
(204,336,2)
(368,308,2)
(170,358,2)
(195,169,2)
(119,139,2)
(54,420,2)
(482,185,2)
(308,83,2)
(42,368,2)
(99,267,2)
(602,293,2)
(487,237,2)
(396,609,2)
(245,185,2)
(170,371,2)
(254,555,2)
(199,336,2)
(606,259,2)
(71,293,2)
(282,221,2)
(184,272,2)
(174,156,2)
(609,293,2)
(441,458,2)
(368,83,2)
(132,163,2)
(443,361,2)
(587,100,2)
(283,458,2)
(121,293,2)
(383,293,2)
(40,284,2)
(300,458,2)
(566,368,2)
(224,458,2)
(333,458,2)
(137,458,2)
(384,212,2)
(455,169,2)
(561,185,2)
(550,185,2)
(472,601,2)
(212,65,2)
(309,601,2)
(312,169,2)
(28,224,2)
(588,164,2)
(393,185,2)
(540,454,2)
(606,169,2)
(454,405,2)
(603,336,2)
(167,119,2)
(432,368,2)
(501,169,2)
(132,203,2)
(531,458,2)
(415,368,2)
(351,380,2)
(333,203,2)
(185,405,2)
(384,458,2)
(294,170,2)
(574,410,2)
(444,259,2)
(212,169,2)
(255,293,2)
(492,601,2)
(210,23,2)
(14,166,2)
(272,259,2)
(405,576,2)
(589,336,2)
(414,279,2)
(581,272,2)
(179,458,2)
(470,169,2)
(98,368,2)
(17,164,2)
(164,581,2)
(410,293,2)
(259,237,2)
(372,152,2)
(584,108,2)
(170,411,2)
(501,259,2)
(485,293,2)
(272,169,2)
(271,192,2)
(550,422,2)
(434,169,2)
(266,293,2)
(202,93,2)
(28,586,2)
(203,137,2)
(294,458,2)
(254,293,2)
(182,272,2)
(52,405,2)
(531,169,2)
(336,550,2)
(341,405,2)
(441,506,2)
(242,293,2)
(144,483,2)
(491,458,2)
(289,69,2)
(140,185,2)
(183,550,2)
(62,108,2)
(472,458,2)
(360,469,2)
(72,212,2)
(64,237,2)
(170,224,2)
(70,272,2)
(131,272,2)
(116,164,2)
(93,484,2)
(344,93,2)
(69,433,2)
(343,81,2)
(248,272,2)
(456,84,2)
(154,237,2)
(530,601,2)
(288,340,2)
(1,550,2)
(213,368,2)
(289,169,2)
(221,293,2)
(493,272,2)
(28,81,2)
(200,293,2)
(528,164,2)
(10,601,2)
(176,293,2)
(36,185,2)
(111,336,2)
(409,169,2)
(37,267,2)
(167,336,2)
(420,293,2)
(284,384,2)
(483,164,2)
(536,164,2)
(497,458,2)
(6,259,2)
(20,272,2)
(447,228,2)
(305,83,2)
(191,458,2)
(69,152,2)
(325,343,2)
(87,535,2)
(606,62,2)
(282,293,2)
(387,275,2)
(28,464,2)
(219,601,2)
(8,556,2)
(494,367,2)
(270,164,2)
(370,367,2)
(161,458,2)
(503,368,2)
(339,550,2)
(377,293,2)
(202,380,2)
(456,400,2)
(217,237,2)
(459,405,2)
(601,272,2)
(380,252,2)
(343,358,2)
(560,196,2)
(372,284,2)
(61,203,2)
(456,230,2)
(145,267,2)
(400,84,2)
(8,58,2)
(194,293,2)
(552,293,2)
(268,185,2)
(150,214,2)
(381,237,2)
(522,293,2)
(192,169,2)
(353,293,2)
(120,169,2)
(46,169,2)
(450,145,2)
(20,343,2)
(491,293,2)
(16,185,2)
(307,164,2)
(243,266,2)
(91,164,2)
(607,293,2)
(295,259,2)
(309,108,2)
(320,169,2)
(606,293,2)
(24,66,2)
(214,506,2)
(396,81,2)
(202,458,2)
(396,586,2)
(317,169,2)
(527,84,2)
(574,133,2)
(535,246,2)
(601,505,2)
(363,185,2)
(109,293,2)
(439,185,2)
(150,192,2)
(445,164,2)
(421,293,2)
(101,203,2)
(329,164,2)
(529,601,2)
(463,458,2)
(572,185,2)
(374,293,2)
(184,368,2)
(234,293,2)
(505,272,2)
(189,550,2)
(46,601,2)
(159,272,2)
(501,293,2)
(290,550,2)
(192,207,2)
(354,169,2)
(512,293,2)
(8,228,2)
(134,237,2)
(168,293,2)
(81,458,2)
(575,58,2)
(251,380,2)
(100,300,2)
(396,283,2)
(139,458,2)
(410,136,2)
(494,405,2)
(164,368,2)
(85,272,2)
(308,458,2)
(135,343,2)
(273,293,2)
(480,185,2)
(103,601,2)
(158,293,2)
(127,169,2)
(129,185,2)
(89,185,2)
(222,152,2)
(508,396,2)
(207,87,2)
(436,601,2)
(399,336,2)
(474,83,2)
(32,458,2)
(326,119,2)
(443,586,2)
(11,14,2)
(343,586,2)
(343,329,2)
(447,185,2)
(392,293,2)
(71,348,2)
(235,293,2)
(84,37,2)
(343,371,2)
(490,428,2)
(491,30,2)
(576,550,2)
(191,293,2)
(420,501,2)
(314,259,2)
(569,293,2)
(261,237,2)
(574,293,2)
(589,185,2)
(40,212,2)
(499,169,2)
(567,14,2)
(411,601,2)
(168,574,2)
(580,256,2)
(272,164,2)
(136,30,2)
(356,550,2)
(253,164,2)
(487,203,2)
(546,169,2)
(357,185,2)
(337,458,2)
(83,74,2)
(545,6,2)
(469,10,2)
(316,293,2)
(420,259,2)
(296,83,2)
(39,368,2)
(236,169,2)
(246,169,2)
(580,144,2)
(170,190,2)
(359,237,2)
(230,185,2)
(276,30,2)
(166,458,2)
(190,450,2)
(179,272,2)
(205,368,2)
(421,601,2)
(155,380,2)
(171,293,2)
(337,272,2)
(350,463,2)
(407,293,2)
(333,237,2)
(338,259,2)
(24,185,2)
(446,169,2)
(464,164,2)
(525,284,2)
(368,294,2)
(41,272,2)
(79,192,2)
(102,344,2)
(521,293,2)
(336,90,2)
(238,185,2)
(449,237,2)
(274,458,2)
(171,486,2)
(200,458,2)
(60,272,2)
(500,237,2)
(203,229,2)
(240,40,2)
(397,16,2)
(143,293,2)
(178,284,2)
(277,14,2)
(118,272,2)
(259,293,2)
(227,336,2)
(472,259,2)
(126,293,2)
(370,185,2)
(60,368,2)
(581,458,2)
(152,92,2)
(46,164,2)
(380,432,2)
(175,336,2)
(343,179,2)
(275,293,2)
(534,293,2)
(421,259,2)
(233,185,2)
(421,164,2)
(338,169,2)
(338,601,2)
(515,354,2)
(484,100,2)
(343,361,2)
(515,169,2)
(428,169,2)
(551,293,2)
(291,601,2)
(379,470,2)
(250,272,2)
(461,185,2)
(243,387,2)
(293,72,2)
(501,421,2)
(499,259,2)
(150,570,2)
(291,293,2)
(154,203,2)
(428,460,2)
(596,380,2)
(238,336,2)
(443,371,2)
(107,340,2)
(275,458,2)
(488,185,2)
(347,494,2)
(378,8,2)
(438,561,2)
(354,427,2)
(55,169,2)
(225,108,2)
(378,96,2)
(212,192,2)
(337,58,2)
(56,169,2)
(133,126,2)
(396,464,2)
(443,185,2)
(559,293,2)
(342,272,2)
(396,329,2)
(170,361,2)
(214,458,2)
(306,305,2)
(309,458,2)
(37,437,2)
(190,164,2)
(460,108,2)
(95,83,2)
(377,200,2)
(445,528,2)
(65,150,2)
(243,293,2)
(431,40,2)
(294,164,2)
(337,556,2)
(344,458,2)
(6,553,2)
(182,368,2)
(382,40,2)
(396,411,2)
(63,185,2)
(256,458,2)
(206,458,2)
(404,372,2)
(135,506,2)
(133,435,2)
(80,336,2)
(422,336,2)
(172,83,2)
(420,601,2)
(177,293,2)
(281,336,2)
(200,30,2)
(517,164,2)
(144,420,2)
(91,83,2)
(325,506,2)
(322,83,2)
(177,282,2)
(192,14,2)
(26,212,2)
(30,360,2)
(362,170,2)
(528,462,2)
(323,169,2)
(99,164,2)
(350,169,2)
(194,30,2)
(598,420,2)
(181,164,2)
(132,293,2)
(9,458,2)
(214,343,2)
(225,169,2)
(456,185,2)
(553,293,2)
(587,340,2)
(356,237,2)
(417,458,2)
(272,601,2)
(211,185,2)
(479,210,2)
(145,437,2)
(501,164,2)
(145,164,2)
(396,358,2)
(12,169,2)
(474,164,2)
(115,284,2)
(78,40,2)
(462,164,2)
(279,293,2)
(176,475,2)
(390,293,2)
(33,541,2)
(588,601,2)
(174,550,2)
(44,194,2)
(87,14,2)
(137,163,2)
(191,601,2)
(130,293,2)
(96,185,2)
(269,458,2)
(291,259,2)
(252,336,2)
(185,550,2)
(191,259,2)
(465,515,2)
(72,40,2)
(471,368,2)
(535,169,2)
(438,600,2)
(600,422,2)
(358,336,2)
(47,237,2)
(170,179,2)
(18,259,2)
(464,458,2)
(28,179,2)
(160,336,2)
(396,39,2)
(441,272,2)
(420,169,2)
(286,237,2)
(58,447,2)
(374,203,2)
(551,458,2)
(523,164,2)
(359,550,2)
(13,550,2)
(519,169,2)
(254,44,2)
(263,58,2)
(70,263,2)
(435,176,2)
(486,293,2)
(205,336,2)
(133,293,2)
(343,464,2)
(28,39,2)
(354,490,2)
(76,169,2)
(402,212,2)
(420,191,2)
(83,380,2)
(207,222,2)
(451,237,2)
(86,479,2)
(43,340,2)
(86,40,2)
(222,515,2)
(518,284,2)
(327,420,2)
(340,132,2)
(439,422,2)
(477,84,2)
(287,169,2)
(128,368,2)
(387,293,2)
(374,237,2)
(416,14,2)
(147,293,2)
(132,458,2)
(209,40,2)
(135,458,2)
(306,83,2)
(545,259,2)
(206,83,2)
(122,293,2)
(532,169,2)
(269,483,2)
(170,283,2)
(396,224,2)
(472,483,2)
(418,293,2)
(581,368,2)
(408,237,2)
(564,601,2)
(484,336,2)
(170,206,2)
(276,259,2)
(193,368,2)
(240,458,2)
(508,28,2)
(550,589,2)
(595,259,2)
(375,367,2)
(28,329,2)
(301,420,2)
(540,347,2)
(430,601,2)
(437,237,2)
(609,458,2)
(346,228,2)
(520,164,2)
(257,601,2)
(471,336,2)
(361,185,2)
(521,472,2)
(156,119,2)
(575,556,2)
(267,456,2)
(328,84,2)
(124,185,2)
(219,169,2)
(505,584,2)
(442,185,2)
(340,293,2)
(388,14,2)
(358,458,2)
(186,336,2)
(221,465,2)
(338,293,2)
(153,259,2)
(396,371,2)
(170,164,2)
(490,152,2)
(531,108,2)
(173,272,2)
(569,169,2)
(371,185,2)
(0,259,2)
(154,458,2)
(526,272,2)
(396,206,2)
(169,373,2)
(149,336,2)
(260,212,2)
(593,83,2)
(294,83,2)
(448,169,2)
(168,254,2)
(174,375,2)
(74,380,2)
(424,185,2)
(601,417,2)
(560,185,2)
(585,293,2)
(433,169,2)
(404,379,2)
(376,83,2)
(313,169,2)
(151,336,2)
(333,293,2)
(20,368,2)
(135,293,2)
(83,336,2)
(521,601,2)
(28,206,2)
(98,336,2)
(259,33,2)
(594,458,2)
(151,458,2)
(305,458,2)
(414,273,2)
(276,458,2)
(586,458,2)
(229,153,2)
(352,185,2)
(516,458,2)
(92,355,2)
(487,154,2)
(259,340,2)
(273,255,2)
(570,192,2)
(486,29,2)
(139,237,2)
(280,14,2)
(155,458,2)
(572,336,2)
(272,293,2)
(170,586,2)
(66,185,2)
(384,170,2)
(20,458,2)
(466,259,2)
(432,336,2)
(94,550,2)
(552,203,2)
(283,237,2)
(424,141,2)
(246,152,2)
(396,203,2)
(97,293,2)
(310,293,2)
(340,237,2)
(99,458,2)
(117,40,2)
(362,306,2)
(180,293,2)
(343,283,2)
(508,443,2)
(262,293,2)
(556,237,2)
(325,169,2)
(463,30,2)
(340,333,2)
(81,164,2)
(69,169,2)
(460,458,2)
(119,237,2)
(197,438,2)
(240,306,2)
(398,169,2)
(302,169,2)
(136,293,2)
(177,243,2)
(83,368,2)
(569,164,2)
(433,225,2)
(263,458,2)
(396,361,2)
(218,185,2)
(311,164,2)
(336,237,2)
(386,185,2)
(4,293,2)
(463,169,2)
(514,185,2)
(39,458,2)
(110,228,2)
(237,161,2)
(554,164,2)
(197,185,2)
(608,192,2)
(266,168,2)
(483,125,2)
(25,293,2)
(269,164,2)
(28,151,2)
(126,170,2)
(294,306,2)
(465,293,2)
(65,192,2)
(170,151,2)
(92,169,2)
(497,237,2)
(196,185,2)
(34,259,2)
(479,240,2)
(421,100,2)
(99,437,2)
(138,293,2)
(475,293,2)
(114,405,2)
(610,368,2)
(196,367,2)
(530,93,2)
(552,237,2)
(343,411,2)
(20,506,2)
(293,212,2)
(62,601,2)
(379,525,2)
(357,119,2)
(400,230,2)
(610,336,2)
(223,203,2)
(544,259,2)
(246,350,2)
(291,169,2)
(51,228,2)
(146,237,2)
(468,185,2)
(288,458,2)
(557,259,2)
(15,601,2)
(499,164,2)
(50,164,2)
(348,108,2)
(32,437,2)
(511,601,2)
(210,470,2)
(127,9,2)
(304,84,2)
(476,601,2)
(259,203,2)
(274,293,2)
(506,368,2)
(465,377,2)
(373,257,2)
(67,228,2)
(33,340,2)
(31,185,2)
(29,293,2)
(343,70,2)
(216,601,2)
(275,30,2)
(308,164,2)
(441,343,2)
(427,169,2)
(367,336,2)
(194,458,2)
(136,458,2)
(219,293,2)
(62,259,2)
(28,609,2)
(284,212,2)
(215,203,2)
(348,293,2)
(228,575,2)
(479,40,2)
(163,293,2)
(45,185,2)
(450,164,2)
(101,61,2)
(472,169,2)
(324,259,2)
(541,587,2)
(37,185,2)
(229,259,2)
(70,41,2)
-----------------------------------
(0,prclyrnos)
(1,picomp)
(2,pi)
(3,pi)
(4,pirlvl)
(5,r)
(6,pi->prcno)
(7,pi)
(8,pi->xstep)
(9,pi->pirlvl)
(10,pi->picomp->pirlvls)
(11,uint_fast32_t)
(12,picomp)
(13,prcwidthexpn)
(14,pi->x == pi->xstart)
(15,pi)
(16,picomp->numrlvls)
(17,y)
(18,pi)
(19,if (((pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(20,pi->x)
(21,prclyrno)
(22,pi)
(23,JAS_CAST(uint_fast32_t, 1)
(24,JAS_CAST(uint_fast32_t, 1)
(25,y)
(26,ystart)
(27,lyrno)
(28,return 1;)
(29,pi->pirlvl->numprcs)
(30,pi->pirlvl = &pi->picomp->pirlvls[pi->rlvlno])
(31,rlvlno)
(32,pi->ystep)
(33,pi->lyrno < JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(34,prclyrno)
(35,pi)
(36,pirlvl)
(37,pi->ystep)
(38,pi)
(39,pi->x)
(40,pi->y == pi->ystart &&\\n\\t\\t\\t\\t\\t  ((try0 << r)
(41,pi->x % pi->xstep)
(42,pi)
(43,lyrnoend)
(44,pi->pirlvl->prcheightexpn)
(45,1)
(46,pchg)
(47,compno)
(48,compno)
(49,if (!pi->prgvolfirst)
(50,ystep)
(51,xstep)
(52,2)
(53,xstep)
(54,compno)
(55,picomp)
(56,1 - pi->rlvlno)
(57,rpy)
(58,pi->xstep = (!pi->xstep)
(59,pi)
(60,xend)
(61,*prclyrno)
(62,pi->picomp)
(63,picomp)
(64,xstep)
(65,!(pi->x % (JAS_CAST(uint_fast32_t, 1)
(66,JAS_CAST(uint_fast32_t, 1)
(67,xstep)
(68,pirlvl)
(69,pi->picomp->vsamp << r)
(70,pi->xstep - (pi->x % pi->xstep)
(71,pi->picomp->hsamp)
(72,(pi->y == pi->ystart &&\\n\\t\\t\\t\\t\\t  ((try0 << r)
(73,ystep)
(74,pi->rlvlno < pi->maxrlvls)
(75,picomp)
(76,pi)
(77,pi)
(78,uint_fast32_t)
(79,uint_fast32_t)
(80,prgvolfirst)
(81,pi->compno)
(82,pirlvl)
(83,pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls)
(84,!pi->ystep)
(85,pi)
(86,!(pi->y % (JAS_CAST(uint_fast32_t, 1)
(87,JAS_CAST(uint_fast32_t, 1)
(88,trx0)
(89,xstep)
(90,compno = 0)
(91,pi)
(92,pi->picomp->numrlvls - 1 - pi->rlvlno)
(93,pi->rlvlno = pchg->rlvlnostart)
(94,pirlvl)
(95,pi)
(96,xstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1)
(97,try0)
(98,pi)
(99,pi->ystep)
(100,pchg = pi->pchg)
(101,++(*prclyrno)
(102,++pi->rlvlno)
(103,pirlvl)
(104,)
(105,pi)
(106,try0)
(107,pchg)
(108,pi->picomp = &pi->picomps[pi->compno])
(109,pi)
(110,xstep)
(111,pirlvls)
(112,picomp)
(113,pi)
(114,numrlvls)
(115,1)
(116,y)
(117,1)
(118,xstep)
(119,picomp = pi->picomps)
(120,pi)
(121,numhprcs)
(122,prcwidthexpn)
(123,x)
(124,uint_fast32_t)
(125,pchg->compnostart)
(126,pi->y)
(127,pi->pirlvl->prcheightexpn)
(128,pi->xstart)
(129,picomp->hsamp)
(130,prcvind)
(131,picomp)
(132,pi->lyrno)
(133,JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(134,picomp)
(135,pi->x)
(136,pi->pirlvl)
(137,pi->lyrno)
(138,prcno)
(139,pi->picomps)
(140,picomp->hsamp * (JAS_CAST(uint_fast32_t, 1)
(141,JAS_CAST(uint_fast32_t, 1)
(142,if (pi->pirlvl->numprcs == 0)
(143,prcno)
(144,pi->compno)
(145,pi->ystep)
(146,ystep)
(147,pi)
(148,for (pi->y = pi->ystart; pi->y < pi->yend; pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(149,picomp)
(150,pi->x % (JAS_CAST(uint_fast32_t, 1)
(151,pi->rlvlno)
(152,r = pi->picomp->numrlvls - 1 - pi->rlvlno)
(153,prclyrno = &pi->pirlvl->prclyrnos[pi->prcno])
(154,pi->lyrno)
(155,pi->maxrlvls)
(156,picomp->numrlvls)
(157,x)
(158,prcheightexpn)
(159,pi)
(160,rlvlno)
(161,pi->prgvolfirst)
(162,pi)
(163,pi->lyrno = 0)
(164,pi->x < pi->xend)
(165,pi)
(166,pi->xstart)
(167,picomp->pirlvls)
(168,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(169,pi->pirlvl->numprcs == 0)
(170,pi->y +=\\n\\t\\t  pi->ystep - (pi->y % pi->ystep)
(171,assert(pi->prcno < pi->pirlvl->numprcs)
(172,y)
(173,x)
(174,pirlvl->prcwidthexpn + picomp->numrlvls)
(175,rlvlnostart)
(176,pi->picomp->vsamp)
(177,prcvind * pi->pirlvl->numhprcs + prchind)
(178,try0)
(179,pi->x)
(180,r)
(181,pi)
(182,pi)
(183,2)
(184,pi)
(185,pirlvl->prcwidthexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2 ||\\n\\t\\t\\t\\t  pirlvl->prcheightexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(186,pirlvl)
(187,pi)
(188,)
(189,numrlvls)
(190,pi->ystep - (pi->y % pi->ystep)
(191,pi->compno)
(192,pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(193,xstart)
(194,pi->pirlvl)
(195,rlvlno)
(196,pirlvl->prcwidthexpn)
(197,pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1)
(198,pi)
(199,pi)
(200,pi->pirlvl)
(201,JAS_UINTFAST32_NUMBITS)
(202,pi->rlvlno)
(203,pi->lyrno >= *prclyrno)
(204,pi->prgvolfirst = 0)
(205,rlvlnoend)
(206,pi->y)
(207,(trx0 << r)
(208,compno)
(209,pi)
(210,JAS_CAST(uint_fast32_t, 1)
(211,picomp)
(212,(pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(213,rlvlno)
(214,pi->x)
(215,0)
(216,pi)
(217,numcomps)
(218,picomp->vsamp * (JAS_CAST(uint_fast32_t, 1)
(219,pi)
(220,numrlvls)
(221,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(222,trx0 << r)
(223,numlyrs)
(224,pi->lyrno)
(225,pi->picomp)
(226,)
(227,0)
(228,!pi->xstep)
(229,*prclyrno)
(230,ystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1)
(231,numrlvls)
(232,pchg)
(233,pi)
(234,prcheightexpn)
(235,r)
(236,r)
(237,!pi->prgvolfirst)
(238,picomp)
(239,compno)
(240,pi->y)
(241,ystep)
(242,pirlvl)
(243,prcvind * pi->pirlvl->numhprcs)
(244,pchg)
(245,ystep)
(246,r + pi->pirlvl->prcwidthexpn)
(247,pchg)
(248,pi)
(249,for (pi->compno = pchg->compnostart,\\n\\t\\t\\t\\t  pi->picomp = &pi->picomps[pi->compno];\\n\\t\\t\\t\\t  pi->compno < JAS_CAST(int, pchg->compnoend)
(250,rlvlno)
(251,maxrlvls)
(252,pchg->rlvlnoend)
(253,pi)
(254,JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn)
(255,pi->picomp->hsamp << r)
(256,pi->numcomps)
(257,pi->pirlvl)
(258,skip:)
(259,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(260,y)
(261,0)
(262,prcvind)
(263,pi->xstep)
(264,prcvind)
(265,)
(266,prcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(267,pi->ystep = (!pi->ystep)
(268,1)
(269,pi->compno)
(270,pi)
(271,1)
(272,pi->compno < JAS_CAST(int, pchg->compnoend)
(273,JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(274,pi->prcno)
(275,pi->pirlvl)
(276,pi->pirlvl)
(277,JAS_CAST(uint_fast32_t, 1)
(278,)
(279,pi->pirlvl->prcwidthexpn)
(280,1)
(281,pi)
(282,prchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(283,pi->xstep)
(284,pi->y == pi->ystart)
(285,pi)
(286,picomps)
(287,prcwidthexpn)
(288,pi->lyrno)
(289,JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(290,++compno)
(291,pi)
(292,pchg)
(293,((pi->x == pi->xstart &&\\n\\t\\t\\t\\t\\t  ((trx0 << r)
(294,pi->y)
(295,pi)
(296,pi)
(297,prcheightexpn)
(298,prcwidthexpn)
(299,numprcs)
(300,pi->pchg)
(301,numcomps)
(302,xstart)
(303,)
(304,ystep)
(305,pi->ystart)
(306,pi->y = pi->ystart)
(307,pi)
(308,pi->yend)
(309,pi->picomp)
(310,hsamp)
(311,compnostart)
(312,pi)
(313,pirlvl)
(314,&pi->pirlvl->prclyrnos[pi->prcno])
(315,pirlvl)
(316,pirlvl)
(317,xstart)
(318,)
(319,for (pi->lyrno = 0; pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs && pi->lyrno < JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(320,rpx)
(321,1)
(322,pi)
(323,vsamp)
(324,lyrno)
(325,pi->x)
(326,++picomp)
(327,pi)
(328,pi)
(329,pi->y)
(330,pi)
(331,rlvlno)
(332,rpx)
(333,pi->numlyrs)
(334,picomp)
(335,)
(336,compno < pi->numcomps)
(337,pi->xstep)
(338,pi)
(339,picomp)
(340,pi->lyrno <\\n\\t\\t\\t\\t\\t\\t  pi->numlyrs)
(341,picomp)
(342,pi)
(343,pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(344,pi->rlvlno)
(345,pi)
(346,pi)
(347,pirlvl->prcheightexpn + picomp->numrlvls)
(348,pi->picomp)
(349,++pirlvl)
(350,pi->pirlvl->prcwidthexpn)
(351,pi)
(352,1)
(353,pi)
(354,JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(355,pi->picomp->numrlvls)
(356,compno)
(357,picomp->vsamp)
(358,pi->prgvolfirst)
(359,pi)
(360,&pi->picomp->pirlvls[pi->rlvlno])
(361,pi->ystep)
(362,pi->y)
(363,-1)
(364,pi)
(365,for (pi->x = pi->xstart; pi->x < pi->xend; pi->x +=\\n\\t\\t\\t  pi->xstep - (pi->x % pi->xstep)
(366,)
(367,pirlvl = picomp->pirlvls)
(368,pi->y < pi->yend)
(369,x)
(370,pirlvl->prcheightexpn)
(371,pi->xstep)
(372,try0 << r)
(373,pi->pirlvl->numprcs)
(374,pi)
(375,pirlvl->prcwidthexpn)
(376,1)
(377,pi->pirlvl->prcwidthexpn)
(378,JAS_MIN(pi->xstep, xstep)
(379,JAS_CAST(uint_fast32_t, 1)
(380,pi->rlvlno < pchg->rlvlnoend)
(381,lyrno)
(382,rpy)
(383,pi)
(384,pi->y)
(385,pi)
(386,prcheightexpn)
(387,pi->pirlvl->numhprcs)
(388,trx0)
(389,)
(390,lyrno)
(391,rpx)
(392,pi)
(393,hsamp)
(394,)
(395,if (pi->rlvlno >= pi->picomp->numrlvls)
(396,return 0;)
(397,picomp->numrlvls - rlvlno - 1)
(398,r)
(399,rlvlno)
(400,JAS_MIN(pi->ystep, ystep)
(401,picomps)
(402,pi->ystart)
(403,rlvlno)
(404,(try0 << r)
(405,pirlvl->prcwidthexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(406,)
(407,pirlvl)
(408,lyrno)
(409,r)
(410,pi->pirlvl->prcheightexpn)
(411,pi->pirlvl)
(412,picomp)
(413,pi)
(414,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->hsamp << r)
(415,x)
(416,rpx)
(417,pi->rlvlno)
(418,vsamp)
(419,picomp->numrlvls)
(420,pi->compno < JAS_CAST(int, pchg->compnoend)
(421,pchg->compnoend)
(422,rlvlno = 0)
(423,continue;)
(424,JAS_CAST(uint_fast32_t, 1)
(425,for (compno = 0, picomp = pi->picomps; compno < pi->numcomps;\\n\\t\\t  ++compno, ++picomp)
(426,vsamp)
(427,pi->xstart)
(428,pi->picomp->hsamp)
(429,uint_fast32_t)
(430,0)
(431,y)
(432,pi->rlvlno)
(433,pi->picomp->vsamp)
(434,1)
(435,pi->picomp->vsamp << r)
(436,pi)
(437,pi->ystep = 0)
(438,picomp->numrlvls - rlvlno - 1)
(439,rlvlno - 1)
(440,)
(441,pi->x)
(442,pirlvl)
(443,return -1;)
(444,pi)
(445,&pi->picomps[pi->compno])
(446,ystart)
(447,(!pi->xstep)
(448,trx0)
(449,pi)
(450,pi->y % pi->ystep)
(451,0)
(452,JAS_CAST(uint_fast32_t, 1)
(453,r)
(454,JAS_UINTFAST32_NUMBITS - 2)
(455,r + pi->pirlvl->prcheightexpn)
(456,(!pi->ystep)
(457,numrlvls)
(458,register jpc_pi_t *pi)
(459,JAS_UINTFAST32_NUMBITS)
(460,pi->picomp)
(461,pi)
(462,pi->picomps)
(463,pi->pirlvl)
(464,pi->picomp)
(465,JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn)
(466,compno)
(467,)
(468,ystep)
(469,pi->picomp->pirlvls[pi->rlvlno])
(470,rpy = r + pi->pirlvl->prcheightexpn)
(471,rlvlno)
(472,pi->compno)
(473,)
(474,yend)
(475,pi->picomp)
(476,pirlvls)
(477,ystep)
(478,rlvlno)
(479,pi->y % (JAS_CAST(uint_fast32_t, 1)
(480,uint_fast32_t)
(481,pi)
(482,rlvlno)
(483,pi->compno = pchg->compnostart)
(484,pchg->rlvlnostart)
(485,prchind)
(486,pi->prcno < pi->pirlvl->numprcs)
(487,++pi->lyrno)
(488,numrlvls)
(489,if (pirlvl->prcwidthexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2 ||\\n\\t\\t\\t\\t  pirlvl->prcheightexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(490,pi->picomp->hsamp << r)
(491,pi->pirlvl)
(492,pirlvl)
(493,x)
(494,pirlvl->prcheightexpn)
(495,picomp)
(496,picomp)
(497,pi->numcomps)
(498,)
(499,compnoend)
(500,goto skip;)
(501,JAS_CAST(int, pchg->compnoend)
(502,rpy)
(503,pi)
(504,x)
(505,pi->picomp->numrlvls)
(506,pi->x = pi->xstart)
(507,int)
(508,RET)
(509,)
(510,pi)
(511,pi)
(512,trx0)
(513,)
(514,++rlvlno)
(515,trx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r)
(516,pi->ystart)
(517,pi)
(518,rpy)
(519,pi)
(520,picomp)
(521,++pi->compno)
(522,prcwidthexpn)
(523,compno)
(524,xstep)
(525,JAS_CAST(uint_fast32_t, 1)
(526,xstep)
(527,ystep)
(528,pi->picomps[pi->compno])
(529,continue;)
(530,pi->rlvlno)
(531,pi->picomp)
(532,r)
(533,pi)
(534,pi)
(535,rpx = r + pi->pirlvl->prcwidthexpn)
(536,y)
(537,pi)
(538,for (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\\n\\t\\t\\t  picomp->numrlvls; ++rlvlno, ++pirlvl)
(539,prgvolfirst)
(540,pirlvl->prcheightexpn + picomp->numrlvls >\\n\\t\\t\\t\\t  JAS_UINTFAST32_NUMBITS - 2)
(541,JAS_CAST(int,\\n\\t\\t\\t\\t\\t\\t  pchg->lyrnoend)
(542,rlvlno)
(543,prchind)
(544,pi->pirlvl->prclyrnos)
(545,pi->pirlvl->prclyrnos[pi->prcno])
(546,hsamp)
(547,try0)
(548,1)
(549,)
(550,rlvlno <\\n\\t\\t\\t  picomp->numrlvls)
(551,pi->pirlvl)
(552,pi)
(553,pi->prcno = prcvind * pi->pirlvl->numhprcs + prchind)
(554,ystep)
(555,try0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r)
(556,pi->xstep = 0)
(557,prcno)
(558,prclyrno)
(559,picomp)
(560,pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1)
(561,picomp->numrlvls)
(562,r)
(563,)
(564,numprcs)
(565,for (pi->rlvlno = pchg->rlvlnostart; pi->rlvlno < pchg->rlvlnoend &&\\n\\t  pi->rlvlno < pi->maxrlvls; ++pi->rlvlno)
(566,pi)
(567,r)
(568,)
(569,int)
(570,JAS_CAST(uint_fast32_t, 1)
(571,pchg)
(572,numrlvls)
(573,0)
(574,JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\\n\\t\\t\\t\\t\\t\\t  pi->picomp->vsamp << r)
(575,pi->xstep)
(576,JAS_UINTFAST32_NUMBITS - 2)
(577,picomp)
(578,prchind)
(579,pi)
(580,pi->compno <\\n\\t\\t\\t\\t  pi->numcomps)
(581,pi->xend)
(582,if (pi->lyrno >= *prclyrno)
(583,pirlvl)
(584,pi->picomp)
(585,pi)
(586,pi->ystep)
(587,pchg->lyrnoend)
(588,compno)
(589,picomp->numrlvls)
(590,pirlvl)
(591,rlvlno)
(592,prcheightexpn)
(593,ystart)
(594,pi->rlvlno)
(595,prclyrno)
(596,pi)
(597,pirlvl)
(598,pi)
(599,pi)
(600,rlvlno - 1)
(601,pi->rlvlno >= pi->picomp->numrlvls)
(602,0)
(603,0)
(604,pi)
(605,xstep)
(606,++pi->picomp)
(607,pirlvl)
(608,pi)
(609,pi->prcno)
(610,pchg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
