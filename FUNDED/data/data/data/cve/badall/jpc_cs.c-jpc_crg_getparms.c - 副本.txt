-----label-----
1
-----code-----
static int jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)
{
	jpc_crg_t *crg = &ms->parms.crg;
	jpc_crgcomp_t *comp;
	uint_fast16_t compno;
	crg->numcomps = cstate->numcomps;
	if (!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))) {
		return -1;
	}
	for (compno = 0, comp = crg->comps; compno < cstate->numcomps;
	  ++compno, ++comp) {
		if (jpc_getuint16(in, &comp->hoff) ||
		  jpc_getuint16(in, &comp->voff)) {
			jpc_crg_destroyparms(ms);
			return -1;
		}
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
24,25
25,26
25,27
26,27
28,29
28,30
28,31
31,32
32,33
33,34
33,35
34,35
34,36
35,36
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
58,59
58,60
59,60
62,63
62,64
63,64
64,65
65,66
65,67
66,67
66,68
67,68
70,71
70,72
71,72
73,74
73,75
74,75
74,76
75,76
78,79
79,80
79,81
80,81
83,84
84,85
85,86
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
97,98
97,99
98,99
101,102
101,103
102,103
104,105
104,106
105,106
108,109
108,110
109,110
110,111
112,113
113,114
115,116
116,117
116,118
117,118
117,119
118,119
118,120
118,121
119,120
121,122
123,124
124,125
124,126
125,126
128,129
128,130
128,131
129,130
131,132
133,134
134,135
134,136
135,136
138,139
138,140
139,140
140,141
140,142
141,142
143,144
145,146
146,147
148,149
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,29,30,36,37,38,42,44,45,49,51,56,57,60,61,68,69,72,76,77,81,82,86,92,93,96,99,100,103,106,107,111,114,120,122,126,127,130,132,136,137,142,144,147,149
-----computeFrom-----
53,54
53,55
65,66
65,67
73,74
73,75
90,91
90,92
94,95
94,96
101,102
101,103
117,118
117,119
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ReturnStatement;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in){	jpc_crg_t *crg = &ms->parms.crg;	jpc_crgcomp_t *comp;	uint_fast16_t compno;	crg->numcomps = cstate->numcomps;	if (!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))) {		return -1;	}	for (compno = 0, comp = crg->comps; compno < cstate->numcomps;	  ++compno, ++comp) {		if (jpc_getuint16(in, &comp->hoff) ||		  jpc_getuint16(in, &comp->voff)) {			jpc_crg_destroyparms(ms);			return -1;		}	}	return 0;}
static int
jpc_crg_getparms(jpc_ms_t *ms, jpc_cstate_t *cstate, jas_stream_t *in)
jpc_crg_getparms
jpc_ms_t *ms
jpc_ms_t
jpc_ms_t
*ms
*
ms
jpc_cstate_t *cstate
jpc_cstate_t
jpc_cstate_t
*cstate
*
cstate
jas_stream_t *in
jas_stream_t
jas_stream_t
*in
*
in
{	jpc_crg_t *crg = &ms->parms.crg;	jpc_crgcomp_t *comp;	uint_fast16_t compno;	crg->numcomps = cstate->numcomps;	if (!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))) {		return -1;	}	for (compno = 0, comp = crg->comps; compno < cstate->numcomps;	  ++compno, ++comp) {		if (jpc_getuint16(in, &comp->hoff) ||		  jpc_getuint16(in, &comp->voff)) {			jpc_crg_destroyparms(ms);			return -1;		}	}	return 0;}
jpc_crg_t *crg = &ms->parms.crg;
jpc_crg_t *crg = &ms->parms.crg;
jpc_crg_t
jpc_crg_t
*crg = &ms->parms.crg
*
crg
= &ms->parms.crg
&ms->parms.crg
ms->parms.crg
ms->parms
ms
ms
parms
crg
jpc_crgcomp_t *comp;
jpc_crgcomp_t *comp;
jpc_crgcomp_t
jpc_crgcomp_t
*comp
*
comp
uint_fast16_t compno;
uint_fast16_t compno;
uint_fast16_t
uint_fast16_t
compno
compno
crg->numcomps = cstate->numcomps;
crg->numcomps = cstate->numcomps
crg->numcomps
crg
crg
numcomps
cstate->numcomps
cstate
cstate
numcomps
if (!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))) {		return -1;	}
!(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))
(crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t)))
crg->comps = jas_malloc(cstate->numcomps * sizeof(uint_fast16_t))
crg->comps
crg
crg
comps
jas_malloc(cstate->numcomps * sizeof(uint_fast16_t))
jas_malloc
jas_malloc
cstate->numcomps * sizeof(uint_fast16_t)
cstate->numcomps
cstate
cstate
numcomps
sizeof(uint_fast16_t)
uint_fast16_t
uint_fast16_t
uint_fast16_t

{		return -1;	}
return -1;
-1
1
for (compno = 0, comp = crg->comps; compno < cstate->numcomps;	  ++compno, ++comp) {		if (jpc_getuint16(in, &comp->hoff) ||		  jpc_getuint16(in, &comp->voff)) {			jpc_crg_destroyparms(ms);			return -1;		}	}
compno = 0, comp = crg->comps;
compno = 0, comp = crg->comps
compno = 0
compno
compno
0
comp = crg->comps
comp
comp
crg->comps
crg
crg
comps
compno < cstate->numcomps
compno
compno
cstate->numcomps
cstate
cstate
numcomps
++compno, ++comp
++compno
compno
compno
++comp
comp
comp
{		if (jpc_getuint16(in, &comp->hoff) ||		  jpc_getuint16(in, &comp->voff)) {			jpc_crg_destroyparms(ms);			return -1;		}	}
if (jpc_getuint16(in, &comp->hoff) ||		  jpc_getuint16(in, &comp->voff)) {			jpc_crg_destroyparms(ms);			return -1;		}
jpc_getuint16(in, &comp->hoff) ||		  jpc_getuint16(in, &comp->voff)
jpc_getuint16(in, &comp->hoff)
jpc_getuint16
jpc_getuint16
in
in
&comp->hoff
comp->hoff
comp
comp
hoff
jpc_getuint16(in, &comp->voff)
jpc_getuint16
jpc_getuint16
in
in
&comp->voff
comp->voff
comp
comp
voff
{			jpc_crg_destroyparms(ms);			return -1;		}
jpc_crg_destroyparms(ms);
jpc_crg_destroyparms(ms)
jpc_crg_destroyparms
jpc_crg_destroyparms
ms
ms
return -1;
-1
1
return 0;
0
-----joern-----
(55,47,0)
(16,118,0)
(29,45,0)
(36,3,0)
(93,34,0)
(24,116,0)
(53,91,0)
(65,112,0)
(99,127,0)
(44,86,0)
(13,98,0)
(14,16,0)
(120,9,0)
(98,13,0)
(36,44,0)
(54,112,0)
(126,40,0)
(12,52,0)
(76,22,0)
(101,44,0)
(22,76,0)
(111,114,0)
(95,34,0)
(7,71,0)
(43,111,0)
(108,94,0)
(77,19,0)
(77,53,0)
(32,39,0)
(27,67,0)
(103,11,0)
(90,79,0)
(47,19,0)
(4,61,0)
(15,113,0)
(94,108,0)
(44,30,0)
(100,13,0)
(124,57,0)
(67,19,0)
(53,77,0)
(67,61,0)
(69,90,0)
(6,109,0)
(45,19,0)
(117,63,0)
(66,25,0)
(116,45,0)
(31,114,0)
(110,40,0)
(123,86,0)
(62,94,0)
(91,3,0)
(2,94,0)
(126,67,0)
(73,33,0)
(113,60,0)
(71,18,0)
(15,126,0)
(91,53,0)
(30,34,0)
(97,98,0)
(4,25,0)
(100,22,0)
(5,88,0)
(49,33,0)
(104,111,0)
(108,80,0)
(25,4,0)
(48,4,0)
(24,18,0)
(89,27,0)
(116,114,0)
(80,108,0)
(8,40,0)
(43,118,0)
(23,19,0)
(38,47,0)
(85,67,0)
(83,112,0)
(18,17,0)
(75,123,0)
(3,91,0)
(57,70,0)
(80,86,0)
(52,19,0)
(92,45,0)
(88,40,0)
(40,27,0)
(91,86,0)
(70,86,0)
(11,112,0)
(3,76,0)
(123,36,0)
(122,35,0)
(26,39,0)
(72,61,0)
(76,3,0)
(39,111,0)
(59,70,0)
(56,100,0)
(88,24,0)
(84,23,0)
(76,80,0)
(81,72,0)
(37,114,0)
(40,19,0)
(88,67,0)
(78,80,0)
(94,19,0)
(13,100,0)
(118,17,0)
(100,86,0)
(107,72,0)
(16,35,0)
(3,36,0)
(1,43,0)
(20,69,0)
(22,100,0)
(30,44,0)
(126,43,0)
(98,19,0)
(64,17,0)
(42,98,0)
(58,67,0)
(88,112,0)
(126,41,0)
(80,76,0)
(33,112,0)
(10,91,0)
(63,114,0)
(87,77,0)
(111,39,0)
(45,116,0)
(126,24,0)
(88,43,0)
(52,79,0)
(70,57,0)
(63,72,0)
(111,43,0)
(28,24,0)
(18,71,0)
(90,67,0)
(35,16,0)
(46,11,0)
(23,41,0)
(34,30,0)
(82,47,0)
(9,86,0)
(50,25,0)
(61,4,0)
(25,19,0)
(36,123,0)
(109,114,0)
(51,119,0)
(15,88,0)
(119,126,0)
(11,68,0)
(39,19,0)
(90,43,0)
(33,96,0)
(102,112,0)
(118,16,0)
(55,123,0)
(44,36,0)
(72,63,0)
(106,116,0)
(27,24,0)
(27,0,0)
(115,35,0)
(61,112,0)
(34,19,0)
(27,43,0)
(127,113,0)
(116,24,0)
(105,71,0)
(15,90,0)
(125,112,0)
(121,0,0)
(74,77,0)
(47,55,0)
(123,55,0)
(90,24,0)
(72,19,0)
(120,27,1)
(94,19,1)
(90,43,1)
(69,20,1)
(105,7,1)
(101,123,1)
(124,59,1)
(92,29,1)
(126,43,1)
(23,19,1)
(35,115,1)
(51,23,1)
(15,113,1)
(16,35,1)
(4,48,1)
(34,95,1)
(56,33,1)
(11,68,1)
(70,57,1)
(73,11,1)
(97,56,1)
(52,19,1)
(91,86,1)
(27,67,1)
(5,9,1)
(88,43,1)
(77,87,1)
(95,93,1)
(6,118,1)
(25,66,1)
(63,72,1)
(18,71,1)
(71,105,1)
(39,32,1)
(62,78,1)
(27,24,1)
(108,94,1)
(40,19,1)
(22,76,1)
(115,122,1)
(72,61,1)
(11,46,1)
(90,69,1)
(4,25,1)
(39,19,1)
(98,42,1)
(28,116,1)
(91,53,1)
(61,4,1)
(45,19,1)
(36,123,1)
(44,86,1)
(107,117,1)
(40,8,1)
(38,82,1)
(75,91,1)
(119,51,1)
(36,44,1)
(106,45,1)
(7,24,1)
(33,96,1)
(55,47,1)
(2,62,1)
(47,19,1)
(15,88,1)
(46,103,1)
(84,9,1)
(120,21,1)
(9,120,1)
(123,86,1)
(14,35,1)
(111,114,1)
(88,67,1)
(53,77,1)
(23,84,1)
(9,86,1)
(42,97,1)
(93,101,1)
(99,22,1)
(26,18,1)
(98,19,1)
(80,108,1)
(27,89,1)
(24,116,1)
(47,38,1)
(3,91,1)
(88,5,1)
(111,104,1)
(13,98,1)
(77,19,1)
(63,114,1)
(44,30,1)
(37,21,1)
(16,14,1)
(15,90,1)
(72,19,1)
(82,75,1)
(85,22,1)
(114,31,1)
(126,67,1)
(116,106,1)
(110,63,1)
(3,36,1)
(43,111,1)
(25,19,1)
(100,13,1)
(76,3,1)
(88,24,1)
(74,10,1)
(67,58,1)
(10,80,1)
(78,100,1)
(88,40,1)
(87,74,1)
(29,70,1)
(58,85,1)
(126,40,1)
(1,111,1)
(90,24,1)
(52,12,1)
(31,37,1)
(33,49,1)
(8,110,1)
(117,114,1)
(122,43,1)
(49,73,1)
(100,86,1)
(50,67,1)
(89,40,1)
(72,81,1)
(109,114,1)
(30,34,1)
(45,92,1)
(111,39,1)
(27,43,1)
(43,1,1)
(67,19,1)
(116,45,1)
(123,55,1)
(94,2,1)
(24,28,1)
(90,67,1)
(118,16,1)
(20,52,1)
(34,19,1)
(22,100,1)
(70,86,1)
(12,70,1)
(80,86,1)
(126,119,1)
(21,61,1)
(48,25,1)
(66,50,1)
(76,80,1)
(81,107,1)
(113,127,1)
(59,63,1)
(32,26,1)
(104,39,1)
(126,24,1)
(117,109,1)
(116,114,1)
(109,6,1)
(127,99,1)
(57,124,1)
(15,126,1)
(13,98,2)
(52,70,2)
(6,70,2)
(23,9,2)
(76,80,2)
(70,86,2)
(90,24,2)
(61,22,2)
(27,43,2)
(15,90,2)
(40,63,2)
(4,25,2)
(1,70,2)
(123,86,2)
(91,86,2)
(67,22,2)
(34,123,2)
(29,70,2)
(88,9,2)
(25,22,2)
(88,67,2)
(85,22,2)
(33,96,2)
(43,70,2)
(126,24,2)
(14,70,2)
(113,22,2)
(37,21,2)
(36,44,2)
(30,123,2)
(88,40,2)
(120,21,2)
(40,19,2)
(108,94,2)
(30,34,2)
(38,91,2)
(87,80,2)
(70,57,2)
(71,70,2)
(58,22,2)
(92,70,2)
(82,91,2)
(118,70,2)
(3,36,2)
(118,16,2)
(24,116,2)
(88,24,2)
(80,86,2)
(48,22,2)
(77,19,2)
(35,70,2)
(76,100,2)
(25,19,2)
(63,72,2)
(95,123,2)
(81,70,2)
(98,19,2)
(116,114,2)
(47,19,2)
(15,126,2)
(107,70,2)
(7,70,2)
(20,70,2)
(81,21,2)
(109,70,2)
(100,13,2)
(5,9,2)
(124,63,2)
(72,70,2)
(94,19,2)
(63,21,2)
(122,70,2)
(23,19,2)
(59,63,2)
(72,19,2)
(51,9,2)
(90,43,2)
(99,22,2)
(63,114,2)
(3,80,2)
(62,100,2)
(67,19,2)
(66,22,2)
(107,21,2)
(126,9,2)
(111,114,2)
(74,80,2)
(21,22,2)
(43,111,2)
(18,70,2)
(39,19,2)
(9,86,2)
(34,19,2)
(32,70,2)
(63,70,2)
(88,43,2)
(72,21,2)
(80,100,2)
(27,24,2)
(61,4,2)
(44,30,2)
(47,91,2)
(116,45,2)
(53,77,2)
(84,9,2)
(39,70,2)
(91,80,2)
(55,47,2)
(75,91,2)
(91,53,2)
(57,63,2)
(44,123,2)
(100,86,2)
(101,123,2)
(80,108,2)
(90,67,2)
(109,114,2)
(3,91,2)
(36,123,2)
(126,43,2)
(72,61,2)
(114,21,2)
(15,113,2)
(45,70,2)
(11,68,2)
(117,70,2)
(110,63,2)
(105,70,2)
(16,35,2)
(18,71,2)
(9,63,2)
(89,63,2)
(117,21,2)
(4,22,2)
(44,86,2)
(9,21,2)
(123,91,2)
(24,70,2)
(115,70,2)
(36,91,2)
(53,80,2)
(120,63,2)
(22,76,2)
(127,22,2)
(106,70,2)
(16,70,2)
(104,70,2)
(123,55,2)
(126,40,2)
(126,67,2)
(76,3,2)
(45,19,2)
(111,70,2)
(94,100,2)
(116,70,2)
(8,63,2)
(78,100,2)
(2,100,2)
(26,70,2)
(31,21,2)
(77,80,2)
(10,80,2)
(50,22,2)
(108,100,2)
(52,19,2)
(27,63,2)
(119,9,2)
(55,91,2)
(93,123,2)
(28,70,2)
(111,39,2)
(12,70,2)
(70,63,2)
(27,67,2)
(15,88,2)
(22,100,2)
(69,70,2)
(90,70,2)
-----------------------------------
(0,)
(1,parheightval)
(2,cblkwidthval)
(3,jpc_getuint8(in, &compparms->cblkheightval)
(4,compparms->numdlvls + 1)
(5,0)
(6,i)
(7,tmp)
(8,csty)
(9,jas_stream_eof(in)
(10,in)
(11,ms = 0)
(12,compparms)
(13,&compparms->numdlvls)
(14,0xf)
(15,RET)
(16,(tmp >> 4)
(17,)
(18,compparms->rlvls[i].parwidthval = tmp & 0xf)
(19,jpc_coxcp_t *compparms)
(20,1)
(21,prtflag)
(22,jpc_getuint8(in, &compparms->numdlvls)
(23,jpc_cox_destroycompparms(compparms)
(24,compparms->rlvls[i].parwidthval)
(25,compparms->numdlvls)
(26,compparms)
(27,compparms->csty |= JPC_COX_PRT)
(28,parwidthval)
(29,compparms)
(30,&compparms->qmfbid)
(31,0)
(32,rlvls)
(33,cstate = 0)
(34,compparms->qmfbid)
(35,tmp >> 4)
(36,jpc_getuint8(in, &compparms->cblksty)
(37,i)
(38,cblksty)
(39,compparms->rlvls)
(40,compparms->csty)
(41,)
(42,numdlvls)
(43,compparms->rlvls[i].parheightval)
(44,jpc_getuint8(in, &compparms->qmfbid)
(45,compparms->rlvls)
(46,0)
(47,compparms->cblksty)
(48,1)
(49,0)
(50,compparms)
(51,1)
(52,jpc_cox_destroycompparms(compparms)
(53,&compparms->cblkheightval)
(54,if (prtflag)
(55,&compparms->cblksty)
(56,in)
(57,&tmp)
(58,numrlvls)
(59,in)
(60,)
(61,compparms->numrlvls = compparms->numdlvls + 1)
(62,compparms)
(63,i < compparms->numrlvls)
(64,if (jpc_getuint8(in, &tmp)
(65,if (jpc_getuint8(in, &compparms->numdlvls)
(66,numdlvls)
(67,compparms->numrlvls)
(68,jpc_ms_t *ms)
(69,-1)
(70,jpc_getuint8(in, &tmp)
(71,tmp & 0xf)
(72,compparms->numrlvls)
(73,cstate)
(74,compparms)
(75,in)
(76,jpc_getuint8(in, &compparms->cblkwidthval)
(77,compparms->cblkheightval)
(78,in)
(79,)
(80,jpc_getuint8(in, &compparms->cblkwidthval)
(81,numrlvls)
(82,compparms)
(83,tmp)
(84,compparms)
(85,compparms)
(86,jas_stream_t *in)
(87,cblkheightval)
(88,return 0;)
(89,JPC_COX_PRT)
(90,return -1;)
(91,jpc_getuint8(in, &compparms->cblkheightval)
(92,rlvls)
(93,compparms)
(94,compparms->cblkwidthval)
(95,qmfbid)
(96,jpc_cstate_t *cstate)
(97,compparms)
(98,compparms->numdlvls)
(99,1)
(100,jpc_getuint8(in, &compparms->numdlvls)
(101,in)
(102,i)
(103,ms)
(104,i)
(105,0xf)
(106,i)
(107,compparms)
(108,&compparms->cblkwidthval)
(109,++i)
(110,compparms)
(111,compparms->rlvls[i])
(112,)
(113,return -1;)
(114,i = 0)
(115,4)
(116,compparms->rlvls[i])
(117,i)
(118,compparms->rlvls[i].parheightval = (tmp >> 4)
(119,-1)
(120,in)
(121,for (i = 0; i < compparms->numrlvls; ++i)
(122,tmp)
(123,jpc_getuint8(in, &compparms->cblksty)
(124,tmp)
(125,if (jas_stream_eof(in)
(126,return -1;)
(127,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
