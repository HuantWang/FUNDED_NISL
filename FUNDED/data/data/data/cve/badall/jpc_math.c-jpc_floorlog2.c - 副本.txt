-----label-----
1
-----code-----
int jpc_floorlog2(int x)
{
	int y;

	/* The argument must be positive. */
	assert(x > 0);

	y = 0;
	while (x > 1) {
		x >>= 1;
		++y;
	}
	return y;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
10,11
11,12
11,13
13,14
15,16
16,17
16,18
17,18
19,20
19,21
20,21
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
36,37
39,40
40,41
41,42
43,44
44,45
-----nextToken-----
2,4,6,8,12,14,18,21,22,26,27,31,32,37,38,42,45
-----computeFrom-----
19,20
19,21
24,25
24,26
29,30
29,31
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int jpc_floorlog2(int x){	int y;	/* The argument must be positive. */	assert(x > 0);	y = 0;	while (x > 1) {		x >>= 1;		++y;	}	return y;}
int
jpc_floorlog2(int x)
jpc_floorlog2
int x
int
x
x
{	int y;	/* The argument must be positive. */	assert(x > 0);	y = 0;	while (x > 1) {		x >>= 1;		++y;	}	return y;}
int y;
int y;
int
y
y
assert(x > 0);
assert(x > 0)
assert
assert
x > 0
x
x
0
y = 0;
y = 0
y
y
0
while (x > 1) {		x >>= 1;		++y;	}
x > 1
x
x
1
{		x >>= 1;		++y;	}
x >>= 1;
x >>= 1
x
x
1
++y;
++y
y
y
return y;
y
y
-----joern-----
(9,2,0)
(11,16,0)
(0,0,0)
(22,19,0)
(12,3,0)
(14,2,0)
(6,15,0)
(22,0,0)
(17,15,0)
(7,21,0)
(3,18,0)
(0,19,0)
(18,3,0)
(10,3,0)
(16,21,0)
(21,15,0)
(13,0,0)
(1,0,0)
(20,21,0)
(18,15,0)
(8,22,0)
(0,4,0)
(16,4,0)
(2,21,0)
(2,15,0)
(5,22,0)
(3,19,0)
(7,20,1)
(0,13,1)
(11,0,1)
(0,0,1)
(22,19,1)
(16,21,1)
(16,11,1)
(5,8,1)
(3,19,1)
(18,3,1)
(13,1,1)
(3,12,1)
(22,5,1)
(8,16,1)
(22,0,1)
(1,22,1)
(20,18,1)
(9,2,1)
(12,10,1)
(14,22,1)
(8,21,1)
(0,19,1)
(2,14,1)
(21,7,1)
(2,21,1)
(22,19,2)
(0,19,2)
(22,0,2)
(16,21,2)
(2,21,2)
(9,2,2)
(5,22,2)
(13,22,2)
(0,22,2)
(16,22,2)
(18,3,2)
(3,19,2)
(0,0,2)
(1,22,2)
(8,22,2)
(11,22,2)
(22,22,2)
-----------------------------------
(0,x >>= 1)
(1,x)
(2,return y;)
(3,x > 0)
(4,)
(5,1)
(6,while (x > 1)
(7,0)
(8,x)
(9,RET)
(10,x)
(11,y)
(12,0)
(13,1)
(14,y)
(15,)
(16,++y)
(17,y)
(18,assert(x > 0)
(19,int x)
(20,y)
(21,y = 0)
(22,x > 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
