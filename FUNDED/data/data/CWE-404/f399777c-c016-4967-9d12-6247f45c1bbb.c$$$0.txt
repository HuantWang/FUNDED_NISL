-----label-----
0
-----code-----
static int call_break_hook(struct pt_regs *regs, unsigned int esr)
{
	struct break_hook *hook;
	int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;

	rcu_read_lock();
	list_for_each_entry_rcu(hook, &break_hook, node)
		if ((esr & hook->esr_mask) == hook->esr_val)
			fn = hook->fn;
	rcu_read_unlock();

	return fn ? fn(regs, esr) : DBG_HOOK_ERROR;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
16,17
17,18
17,19
18,19
20,21
20,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
27,28
27,29
30,31
30,32
31,32
33,34
33,35
36,37
36,38
38,39
40,41
41,42
43,44
44,45
45,46
47,48
48,49
48,50
48,51
48,52
49,50
51,52
53,54
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
74,76
75,76
77,78
77,79
78,79
81,82
82,83
83,84
85,86
86,87
86,88
86,89
87,88
89,90
89,91
89,92
90,91
92,93
94,95
96,97
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,25,28,29,32,34,35,37,39,42,46,50,52,55,57,64,67,68,71,72,76,79,80,84,88,91,93,95,97
-----computeFrom-----
60,61
60,62
62,63
62,64
74,75
74,76
-----guardedBy-----
71,79
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int call_break_hook(struct pt_regs *regs, unsigned int esr){	struct break_hook *hook;	int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;	rcu_read_lock();	list_for_each_entry_rcu(hook, &break_hook, node)		if ((esr & hook->esr_mask) == hook->esr_val)			fn = hook->fn;	rcu_read_unlock();	return fn ? fn(regs, esr) : DBG_HOOK_ERROR;}
static int
call_break_hook(struct pt_regs *regs, unsigned int esr)
call_break_hook
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
unsigned int esr
unsigned int
esr
esr
{	struct break_hook *hook;	int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;	rcu_read_lock();	list_for_each_entry_rcu(hook, &break_hook, node)		if ((esr & hook->esr_mask) == hook->esr_val)			fn = hook->fn;	rcu_read_unlock();	return fn ? fn(regs, esr) : DBG_HOOK_ERROR;}
struct break_hook *hook;
struct break_hook *hook;
struct break_hook
break_hook
*hook
*
hook
int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;
int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;
int
(*fn)(struct pt_regs *regs, unsigned int esr) = NULL
*fn
*
fn
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
unsigned int esr
unsigned int
esr
esr
= NULL
NULL
NULL
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
list_for_each_entry_rcu(hook, &break_hook, node)
list_for_each_entry_rcu(hook, &break_hook, node)
list_for_each_entry_rcu
list_for_each_entry_rcu
hook
hook
&break_hook
break_hook
break_hook
node
node
)
if ((esr & hook->esr_mask) == hook->esr_val)			fn = hook->fn;
(esr & hook->esr_mask) == hook->esr_val
(esr & hook->esr_mask)
esr & hook->esr_mask
esr
esr
hook->esr_mask
hook
hook
esr_mask
hook->esr_val
hook
hook
esr_val
fn = hook->fn;
fn = hook->fn
fn
fn
hook->fn
hook
hook
fn
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
return fn ? fn(regs, esr) : DBG_HOOK_ERROR;
fn ? fn(regs, esr) : DBG_HOOK_ERROR
fn
fn
fn(regs, esr)
fn
fn
regs
regs
esr
esr
DBG_HOOK_ERROR
DBG_HOOK_ERROR
-----joern-----
(11,29,0)
(7,24,0)
(27,32,0)
(16,32,0)
(31,0,0)
(12,16,0)
(31,8,0)
(19,29,0)
(15,4,0)
(4,29,0)
(17,32,0)
(28,8,0)
(4,23,0)
(8,31,0)
(25,32,0)
(2,16,0)
(13,11,0)
(0,31,0)
(21,8,0)
(30,11,0)
(10,0,0)
(4,15,0)
(23,32,0)
(3,15,0)
(9,23,0)
(22,4,0)
(15,5,0)
(4,16,0)
(20,32,0)
(0,24,0)
(6,15,0)
(29,11,0)
(26,24,0)
(15,1,0)
(18,32,0)
(0,5,0)
(24,0,0)
(14,4,0)
(4,16,1)
(0,24,1)
(8,28,1)
(24,26,1)
(15,1,1)
(2,12,1)
(15,3,1)
(0,5,1)
(16,2,1)
(19,31,1)
(30,19,1)
(11,13,1)
(31,0,1)
(10,20,1)
(4,15,1)
(17,29,1)
(22,17,1)
(4,14,1)
(17,31,1)
(23,4,1)
(7,10,1)
(9,23,1)
(6,22,1)
(31,8,1)
(4,29,1)
(15,5,1)
(28,21,1)
(26,7,1)
(20,16,1)
(29,11,1)
(21,0,1)
(3,6,1)
(14,22,1)
(13,30,1)
(14,22,2)
(15,5,2)
(30,31,2)
(29,11,2)
(3,22,2)
(31,8,2)
(6,22,2)
(15,22,2)
(0,5,2)
(31,0,2)
(9,23,2)
(13,31,2)
(4,29,2)
(4,16,2)
(0,24,2)
(29,31,2)
(4,15,2)
(15,1,2)
(11,31,2)
(19,31,2)
-----------------------------------
(0,esr & hook->esr_mask)
(1,struct pt_regs *regs)
(2,NULL)
(3,esr)
(4,fn ? fn(regs, esr)
(5,unsigned int esr)
(6,regs)
(7,hook)
(8,hook->esr_val)
(9,RET)
(10,esr)
(11,hook->fn)
(12,fn)
(13,fn)
(14,DBG_HOOK_ERROR)
(15,fn(regs, esr)
(16,(*fn)
(17,rcu_read_unlock()
(18,fn)
(19,fn)
(20,rcu_read_lock()
(21,hook)
(22,fn)
(23,return fn ? fn(regs, esr)
(24,hook->esr_mask)
(25,hook)
(26,esr_mask)
(27,if ((esr & hook->esr_mask)
(28,esr_val)
(29,fn = hook->fn)
(30,hook)
(31,(esr & hook->esr_mask)
(32,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^