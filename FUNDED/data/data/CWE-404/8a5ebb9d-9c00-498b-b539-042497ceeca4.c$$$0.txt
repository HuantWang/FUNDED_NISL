-----label-----
1
-----code-----
int pnp_disable_dev(struct pnp_dev *dev)
{
        if (!dev)
                return -EINVAL;
	if (!dev->active) {
		return 0; /* the device is already disabled */
	}

	if (!pnp_can_disable(dev)) {
		pnp_info("Device %s does not supported disabling.", dev->dev.bus_id);
		return -EINVAL;
	}
	if (dev->protocol->disable(dev)<0) {
		pnp_err("Failed to disable device %s.", dev->dev.bus_id);
		return -EIO;
	}

	dev->active = 0;
	pnp_info("Device %s disabled.", dev->dev.bus_id);

	/* release the resources so that other devices can use them */
	down(&pnp_res_mutex);
	pnp_clean_resources(&dev->res);
	up(&pnp_res_mutex);

	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
12,13
12,14
13,14
14,15
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
23,24
26,27
27,28
29,30
29,31
30,31
31,32
31,33
32,33
34,35
36,37
36,38
37,38
38,39
38,40
38,41
39,40
42,43
42,44
43,44
43,45
44,45
48,49
49,50
50,51
52,53
52,54
53,54
53,55
54,55
54,56
55,56
55,57
56,57
56,58
57,58
61,62
64,65
64,66
65,66
66,67
66,68
66,69
67,68
70,71
70,72
71,72
71,73
72,73
76,77
77,78
78,79
80,81
81,82
81,83
82,83
82,84
83,84
87,88
88,89
88,90
88,91
89,90
92,93
92,94
93,94
93,95
94,95
98,99
99,100
99,101
100,101
102,103
103,104
103,105
106,107
107,108
107,109
108,109
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
120,121
122,123
-----nextToken-----
2,4,7,9,10,15,19,24,25,28,33,35,40,41,45,46,47,51,58,59,60,62,63,68,69,73,74,75,79,84,85,86,90,91,95,96,97,101,104,105,109,113,114,118,121,123
-----computeFrom-----
53,54
53,55
81,82
81,83
-----guardedBy-----
62,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int pnp_disable_dev(struct pnp_dev *dev){        if (!dev)                return -EINVAL;	if (!dev->active) {		return 0; /* the device is already disabled */	}	if (!pnp_can_disable(dev)) {		pnp_info("Device %s does not supported disabling.", dev->dev.bus_id);		return -EINVAL;	}	if (dev->protocol->disable(dev)<0) {		pnp_err("Failed to disable device %s.", dev->dev.bus_id);		return -EIO;	}	dev->active = 0;	pnp_info("Device %s disabled.", dev->dev.bus_id);	/* release the resources so that other devices can use them */	down(&pnp_res_mutex);	pnp_clean_resources(&dev->res);	up(&pnp_res_mutex);	return 1;}
int
pnp_disable_dev(struct pnp_dev *dev)
pnp_disable_dev
struct pnp_dev *dev
struct pnp_dev
pnp_dev
*dev
*
dev
{        if (!dev)                return -EINVAL;	if (!dev->active) {		return 0; /* the device is already disabled */	}	if (!pnp_can_disable(dev)) {		pnp_info("Device %s does not supported disabling.", dev->dev.bus_id);		return -EINVAL;	}	if (dev->protocol->disable(dev)<0) {		pnp_err("Failed to disable device %s.", dev->dev.bus_id);		return -EIO;	}	dev->active = 0;	pnp_info("Device %s disabled.", dev->dev.bus_id);	/* release the resources so that other devices can use them */	down(&pnp_res_mutex);	pnp_clean_resources(&dev->res);	up(&pnp_res_mutex);	return 1;}
if (!dev)                return -EINVAL;
!dev
dev
dev
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (!dev->active) {		return 0; /* the device is already disabled */	}
!dev->active
dev->active
dev
dev
active
{		return 0; /* the device is already disabled */	}
return 0;
0
if (!pnp_can_disable(dev)) {		pnp_info("Device %s does not supported disabling.", dev->dev.bus_id);		return -EINVAL;	}
!pnp_can_disable(dev)
pnp_can_disable(dev)
pnp_can_disable
pnp_can_disable
dev
dev
{		pnp_info("Device %s does not supported disabling.", dev->dev.bus_id);		return -EINVAL;	}
pnp_info("Device %s does not supported disabling.", dev->dev.bus_id);
pnp_info("Device %s does not supported disabling.", dev->dev.bus_id)
pnp_info
pnp_info
"Device %s does not supported disabling."
dev->dev.bus_id
dev->dev
dev
dev
dev
bus_id
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (dev->protocol->disable(dev)<0) {		pnp_err("Failed to disable device %s.", dev->dev.bus_id);		return -EIO;	}
dev->protocol->disable(dev)<0
dev->protocol->disable(dev)
dev->protocol->disable
dev->protocol
dev
dev
protocol
disable
dev
dev
0
{		pnp_err("Failed to disable device %s.", dev->dev.bus_id);		return -EIO;	}
pnp_err("Failed to disable device %s.", dev->dev.bus_id);
pnp_err("Failed to disable device %s.", dev->dev.bus_id)
pnp_err
pnp_err
"Failed to disable device %s."
dev->dev.bus_id
dev->dev
dev
dev
dev
bus_id
return -EIO;
-EIO
EIO
EIO
dev->active = 0;
dev->active = 0
dev->active
dev
dev
active
0
pnp_info("Device %s disabled.", dev->dev.bus_id);
pnp_info("Device %s disabled.", dev->dev.bus_id)
pnp_info
pnp_info
"Device %s disabled."
dev->dev.bus_id
dev->dev
dev
dev
dev
bus_id
down(&pnp_res_mutex);
down(&pnp_res_mutex);
down
down
(&pnp_res_mutex)
&pnp_res_mutex
&
pnp_res_mutex
pnp_clean_resources(&dev->res);
pnp_clean_resources(&dev->res)
pnp_clean_resources
pnp_clean_resources
&dev->res
dev->res
dev
dev
res
up(&pnp_res_mutex);
up(&pnp_res_mutex)
up
up
&pnp_res_mutex
pnp_res_mutex
pnp_res_mutex
return 1;
1
-----joern-----
(41,59,0)
(22,32,0)
(26,38,0)
(38,53,0)
(65,56,0)
(46,61,0)
(34,36,0)
(67,30,0)
(68,1,0)
(29,44,0)
(1,67,0)
(20,67,0)
(26,18,0)
(62,46,0)
(16,9,0)
(63,15,0)
(53,38,0)
(14,42,0)
(71,18,0)
(57,50,0)
(1,49,0)
(10,55,0)
(28,55,0)
(8,49,0)
(55,64,0)
(46,8,0)
(11,18,0)
(57,69,0)
(13,18,0)
(42,9,0)
(52,49,0)
(27,12,0)
(56,65,0)
(57,29,0)
(52,58,0)
(5,52,0)
(69,66,0)
(56,17,0)
(12,36,0)
(4,65,0)
(50,18,0)
(30,33,0)
(23,48,0)
(17,49,0)
(67,1,0)
(37,11,0)
(48,69,0)
(54,8,0)
(59,13,0)
(70,1,0)
(0,17,0)
(61,18,0)
(3,53,0)
(58,52,0)
(72,56,0)
(40,18,0)
(47,30,0)
(19,51,0)
(50,42,0)
(45,18,0)
(7,50,0)
(8,46,0)
(38,26,0)
(25,17,0)
(11,37,0)
(43,42,0)
(15,33,0)
(17,56,0)
(61,46,0)
(51,60,0)
(31,37,0)
(13,59,0)
(9,18,0)
(32,49,0)
(55,49,0)
(53,49,0)
(57,60,0)
(57,15,0)
(42,49,0)
(12,49,0)
(36,12,0)
(35,8,0)
(21,29,0)
(39,18,0)
(30,67,0)
(6,63,0)
(65,66,0)
(24,53,0)
(64,55,0)
(2,61,0)
(58,52,1)
(57,50,1)
(35,54,1)
(51,19,1)
(7,13,1)
(67,20,1)
(2,9,1)
(26,38,1)
(47,36,1)
(52,49,1)
(24,3,1)
(19,32,1)
(70,68,1)
(9,16,1)
(15,63,1)
(11,37,1)
(17,49,1)
(64,55,1)
(68,47,1)
(46,8,1)
(61,46,1)
(56,72,1)
(25,0,1)
(46,62,1)
(43,14,1)
(42,49,1)
(50,42,1)
(37,31,1)
(48,23,1)
(59,41,1)
(30,67,1)
(13,59,1)
(57,69,1)
(60,51,1)
(41,26,1)
(8,49,1)
(63,6,1)
(52,5,1)
(72,17,1)
(1,49,1)
(65,56,1)
(20,1,1)
(29,21,1)
(55,49,1)
(28,32,1)
(14,36,1)
(8,35,1)
(53,49,1)
(54,2,1)
(32,22,1)
(62,8,1)
(34,12,1)
(27,58,1)
(57,29,1)
(1,70,1)
(42,43,1)
(36,34,1)
(67,1,1)
(5,64,1)
(57,15,1)
(17,25,1)
(56,17,1)
(12,49,1)
(31,61,1)
(69,48,1)
(57,60,1)
(21,64,1)
(38,53,1)
(3,11,1)
(55,10,1)
(32,49,1)
(6,30,1)
(4,58,1)
(10,28,1)
(36,12,1)
(50,7,1)
(16,42,1)
(23,65,1)
(12,27,1)
(0,4,1)
(53,24,1)
(20,36,2)
(36,12,2)
(17,49,2)
(25,58,2)
(48,58,2)
(23,58,2)
(11,37,2)
(12,58,2)
(37,36,2)
(17,58,2)
(56,17,2)
(53,49,2)
(64,55,2)
(26,38,2)
(63,36,2)
(58,64,2)
(53,36,2)
(67,36,2)
(64,32,2)
(1,49,2)
(5,64,2)
(21,64,2)
(38,53,2)
(6,36,2)
(65,58,2)
(70,36,2)
(4,58,2)
(57,29,2)
(30,67,2)
(67,1,2)
(35,36,2)
(24,36,2)
(15,36,2)
(38,36,2)
(41,36,2)
(7,36,2)
(8,49,2)
(9,36,2)
(57,15,2)
(54,36,2)
(55,49,2)
(12,49,2)
(47,36,2)
(61,46,2)
(32,49,2)
(72,58,2)
(69,58,2)
(13,36,2)
(0,58,2)
(60,32,2)
(29,64,2)
(27,58,2)
(36,58,2)
(62,36,2)
(3,36,2)
(55,32,2)
(31,36,2)
(68,36,2)
(28,32,2)
(10,32,2)
(11,36,2)
(13,59,2)
(1,36,2)
(8,36,2)
(34,58,2)
(57,60,2)
(46,8,2)
(46,36,2)
(14,36,2)
(30,36,2)
(57,50,2)
(57,69,2)
(56,58,2)
(65,56,2)
(42,49,2)
(51,32,2)
(52,64,2)
(58,52,2)
(43,36,2)
(52,49,2)
(19,32,2)
(50,36,2)
(16,36,2)
(42,36,2)
(2,36,2)
(50,42,2)
(26,36,2)
(59,36,2)
(61,36,2)
-----------------------------------
(0,dev)
(1,dev->dev)
(2,"Device %s disabled.")
(3,dev)
(4,"Device %s does not supported disabling.")
(5,dev)
(6,EIO)
(7,1)
(8,dev->dev)
(9,dev->active = 0)
(10,active)
(11,down(&pnp_res_mutex)
(12,dev->protocol->disable(dev)
(13,up(&pnp_res_mutex)
(14,dev)
(15,return -EIO;)
(16,0)
(17,dev->dev)
(18,)
(19,EINVAL)
(20,bus_id)
(21,0)
(22,dev)
(23,EINVAL)
(24,res)
(25,dev)
(26,pnp_clean_resources(&dev->res)
(27,dev)
(28,dev)
(29,return 0;)
(30,pnp_err("Failed to disable device %s.", dev->dev.bus_id)
(31,pnp_res_mutex)
(32,!dev)
(33,)
(34,0)
(35,dev)
(36,dev->protocol->disable(dev)
(37,&pnp_res_mutex)
(38,&dev->res)
(39,if (!dev)
(40,if (!pnp_can_disable(dev)
(41,pnp_res_mutex)
(42,dev->active)
(43,active)
(44,)
(45,if (!dev->active)
(46,dev->dev.bus_id)
(47,"Failed to disable device %s.")
(48,-EINVAL)
(49,struct pnp_dev *dev)
(50,return 1;)
(51,-EINVAL)
(52,pnp_can_disable(dev)
(53,dev->res)
(54,dev)
(55,dev->active)
(56,dev->dev.bus_id)
(57,RET)
(58,!pnp_can_disable(dev)
(59,&pnp_res_mutex)
(60,return -EINVAL;)
(61,pnp_info("Device %s disabled.", dev->dev.bus_id)
(62,bus_id)
(63,-EIO)
(64,!dev->active)
(65,pnp_info("Device %s does not supported disabling.", dev->dev.bus_id)
(66,)
(67,dev->dev.bus_id)
(68,dev)
(69,return -EINVAL;)
(70,dev)
(71,if (dev->protocol->disable(dev)
(72,bus_id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^