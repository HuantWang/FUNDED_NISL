-----label-----
1
-----code-----
int * CWE401_Memory_Leak__int_malloc_61b_badSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
51,53
52,53
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,53,56,57,60
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int * CWE401_Memory_Leak__int_malloc_61b_badSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
int
* CWE401_Memory_Leak__int_malloc_61b_badSource(int * data)
*
CWE401_Memory_Leak__int_malloc_61b_badSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(24,9,0)
(13,14,0)
(13,5,0)
(29,13,0)
(0,28,0)
(28,22,0)
(4,13,0)
(20,4,0)
(30,0,0)
(27,5,0)
(3,1,0)
(23,27,0)
(10,9,0)
(4,18,0)
(16,5,0)
(19,14,0)
(3,29,0)
(7,4,0)
(25,17,0)
(18,5,0)
(28,0,0)
(26,5,0)
(21,1,0)
(15,18,0)
(6,29,0)
(29,3,0)
(13,29,0)
(29,6,0)
(9,13,0)
(9,18,0)
(27,13,0)
(19,13,0)
(11,27,0)
(17,1,0)
(27,14,0)
(4,16,0)
(16,4,0)
(4,14,0)
(9,14,0)
(2,19,0)
(8,19,0)
(1,17,0)
(1,3,0)
(12,13,0)
(27,14,1)
(27,13,1)
(9,24,1)
(29,6,1)
(4,13,1)
(4,18,1)
(21,12,1)
(11,16,1)
(17,25,1)
(28,0,1)
(13,29,1)
(24,10,1)
(7,18,1)
(2,8,1)
(9,14,1)
(20,7,1)
(4,20,1)
(4,14,1)
(1,17,1)
(19,14,1)
(0,30,1)
(16,4,1)
(3,1,1)
(9,13,1)
(10,28,1)
(25,21,1)
(10,19,1)
(15,9,1)
(29,3,1)
(23,27,1)
(18,15,1)
(13,14,1)
(30,19,1)
(19,2,1)
(27,11,1)
(19,13,1)
(8,13,1)
(9,13,2)
(28,19,2)
(19,14,2)
(1,17,2)
(23,27,2)
(0,19,2)
(27,14,2)
(13,14,2)
(16,4,2)
(3,1,2)
(28,0,2)
(19,13,2)
(30,19,2)
(4,14,2)
(29,3,2)
(27,13,2)
(29,6,2)
(9,14,2)
(4,18,2)
(13,29,2)
(4,13,2)
-----------------------------------
(0,-1)
(1,100*sizeof(int)
(2,NULL)
(3,malloc(100*sizeof(int)
(4,data[0])
(5,)
(6,int *)
(7,data)
(8,data)
(9,data[0])
(10,data)
(11,data)
(12,data)
(13,data = (int *)
(14,int * data)
(15,5)
(16,printIntLine(data[0])
(17,sizeof(int)
(18,data[0] = 5)
(19,data == NULL)
(20,0)
(21,100)
(22,)
(23,RET)
(24,0)
(25,int)
(26,if (data == NULL)
(27,return data;)
(28,exit(-1)
(29,(int *)
(30,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^