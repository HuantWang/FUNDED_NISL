-----label-----
0
-----code-----
static int * goodB2GSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
51,53
52,53
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,53,56,57,60
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * goodB2GSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
static int
* goodB2GSource(int * data)
*
goodB2GSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(19,22,0)
(0,24,0)
(23,29,0)
(13,0,0)
(5,25,0)
(14,4,0)
(2,7,0)
(9,19,0)
(2,27,0)
(0,4,0)
(25,7,0)
(20,10,0)
(0,7,0)
(11,22,0)
(1,10,0)
(17,2,0)
(30,11,0)
(8,27,0)
(29,7,0)
(28,29,0)
(29,4,0)
(24,0,0)
(22,19,0)
(12,18,0)
(10,20,0)
(26,21,0)
(15,2,0)
(6,0,0)
(11,25,0)
(20,3,0)
(16,18,0)
(19,21,0)
(24,27,0)
(22,11,0)
(0,25,0)
(29,25,0)
(4,27,0)
(21,19,0)
(2,25,0)
(25,11,0)
(18,7,0)
(25,27,0)
(18,25,0)
(11,30,0)
(10,1,1)
(28,23,1)
(2,7,1)
(12,16,1)
(21,26,1)
(2,17,1)
(2,25,1)
(11,30,1)
(25,11,1)
(19,21,1)
(24,0,1)
(26,9,1)
(15,2,1)
(6,13,1)
(29,7,1)
(18,7,1)
(20,10,1)
(14,29,1)
(0,6,1)
(0,7,1)
(4,14,1)
(17,24,1)
(25,7,1)
(22,19,1)
(23,18,1)
(29,25,1)
(18,25,1)
(23,20,1)
(0,25,1)
(9,5,1)
(16,25,1)
(0,4,1)
(13,4,1)
(18,12,1)
(29,28,1)
(1,18,1)
(11,22,1)
(19,21,2)
(2,7,2)
(10,18,2)
(25,7,2)
(0,4,2)
(18,7,2)
(22,19,2)
(11,30,2)
(11,22,2)
(20,10,2)
(25,11,2)
(20,18,2)
(2,25,2)
(24,0,2)
(18,25,2)
(0,25,2)
(0,7,2)
(29,25,2)
(1,18,2)
(29,7,2)
(15,2,2)
-----------------------------------
(0,data[0])
(1,1)
(2,return data;)
(3,)
(4,data[0] = 5)
(5,data)
(6,0)
(7,int * data)
(8,if (data == NULL)
(9,100)
(10,-1)
(11,(int *)
(12,NULL)
(13,data)
(14,5)
(15,RET)
(16,data)
(17,data)
(18,data == NULL)
(19,100*sizeof(int)
(20,exit(-1)
(21,sizeof(int)
(22,malloc(100*sizeof(int)
(23,data)
(24,printIntLine(data[0])
(25,data = (int *)
(26,int)
(27,)
(28,0)
(29,data[0])
(30,int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^