-----label-----
0
-----code-----
static void goodB2G()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)calloc(100, sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    goodB2GSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
65,66
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,51,53,54,58,60,64,66
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goodB2GSink(data);}
static void
goodB2G()
goodB2G
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)calloc(100, sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goodB2GSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
goodB2GSink(data);
goodB2GSink(data)
goodB2GSink
goodB2GSink
data
data
-----joern-----
(7,4,0)
(12,20,0)
(21,18,0)
(21,24,0)
(18,21,0)
(19,24,0)
(1,4,0)
(3,12,0)
(25,9,0)
(11,2,0)
(23,17,0)
(17,25,0)
(14,13,0)
(22,16,0)
(20,21,0)
(26,19,0)
(25,17,0)
(8,16,0)
(4,20,0)
(6,24,0)
(24,21,0)
(2,20,0)
(20,16,0)
(5,20,0)
(2,16,0)
(12,16,0)
(10,13,0)
(24,19,0)
(13,16,0)
(21,20,0)
(26,6,1)
(2,20,1)
(12,20,1)
(6,5,1)
(21,18,1)
(7,1,1)
(23,4,1)
(24,19,1)
(13,14,1)
(4,7,1)
(12,3,1)
(3,4,1)
(4,20,1)
(21,24,1)
(1,20,1)
(11,12,1)
(20,21,1)
(5,13,1)
(3,25,1)
(25,17,1)
(14,10,1)
(17,23,1)
(2,11,1)
(19,26,1)
(15,2,1)
(25,4,2)
(4,20,2)
(2,20,2)
(17,4,2)
(24,19,2)
(23,4,2)
(20,21,2)
(12,20,2)
(21,24,2)
(21,18,2)
(25,17,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,data)
(2,goodB2GSink(data)
(3,data)
(4,data == NULL)
(5,data)
(6,100)
(7,NULL)
(8,if (data == NULL)
(9,)
(10,data)
(11,data)
(12,printWLine(data)
(13,data = NULL)
(14,NULL)
(15,RET)
(16,)
(17,-1)
(18,wchar_t *)
(19,sizeof(wchar_t)
(20,data = (wchar_t *)
(21,(wchar_t *)
(22,data)
(23,1)
(24,calloc(100, sizeof(wchar_t)
(25,exit(-1)
(26,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^