-----label-----
1
-----code-----
static int poll_cq(struct t4_wq *wq, struct t4_cq *cq, struct t4_cqe *cqe,
		   u8 *cqe_flushed, u64 *cookie, u32 *credit)
{
	int ret = 0;
	struct t4_cqe *hw_cqe, read_cqe;

	*cqe_flushed = 0;
	*credit = 0;
	ret = t4_next_cqe(cq, &hw_cqe);
	if (ret)
		return ret;

	pr_debug("CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\n",
		 CQE_OVFBIT(hw_cqe), CQE_QPID(hw_cqe),
		 CQE_GENBIT(hw_cqe), CQE_TYPE(hw_cqe), CQE_STATUS(hw_cqe),
		 CQE_OPCODE(hw_cqe), CQE_LEN(hw_cqe), CQE_WRID_HI(hw_cqe),
		 CQE_WRID_LOW(hw_cqe));

	/*
	 * skip cqe's not affiliated with a QP.
	 */
	if (wq == NULL) {
		ret = -EAGAIN;
		goto skip_cqe;
	}

	/*
	* skip hw cqe's if the wq is flushed.
	*/
	if (wq->flushed && !SW_CQE(hw_cqe)) {
		ret = -EAGAIN;
		goto skip_cqe;
	}

	/*
	 * skip TERMINATE cqes...
	 */
	if (CQE_OPCODE(hw_cqe) == FW_RI_TERMINATE) {
		ret = -EAGAIN;
		goto skip_cqe;
	}

	/*
	 * Special cqe for drain WR completions...
	 */
	if (DRAIN_CQE(hw_cqe)) {
		*cookie = CQE_DRAIN_COOKIE(hw_cqe);
		*cqe = *hw_cqe;
		goto skip_cqe;
	}

	/*
	 * Gotta tweak READ completions:
	 *	1) the cqe doesn't contain the sq_wptr from the wr.
	 *	2) opcode not reflected from the wr.
	 *	3) read_len not reflected from the wr.
	 *	4) cq_type is RQ_TYPE not SQ_TYPE.
	 */
	if (RQ_TYPE(hw_cqe) && (CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP)) {

		/* If we have reached here because of async
		 * event or other error, and have egress error
		 * then drop
		 */
		if (CQE_TYPE(hw_cqe) == 1) {
			if (CQE_STATUS(hw_cqe))
				t4_set_wq_in_error(wq);
			ret = -EAGAIN;
			goto skip_cqe;
		}

		/* If this is an unsolicited read response, then the read
		 * was generated by the kernel driver as part of peer-2-peer
		 * connection setup.  So ignore the completion.
		 */
		if (CQE_WRID_STAG(hw_cqe) == 1) {
			if (CQE_STATUS(hw_cqe))
				t4_set_wq_in_error(wq);
			ret = -EAGAIN;
			goto skip_cqe;
		}

		/*
		 * Eat completions for unsignaled read WRs.
		 */
		if (!wq->sq.oldest_read->signaled) {
			advance_oldest_read(wq);
			ret = -EAGAIN;
			goto skip_cqe;
		}

		/*
		 * Don't write to the HWCQ, so create a new read req CQE
		 * in local memory.
		 */
		create_read_req_cqe(wq, hw_cqe, &read_cqe);
		hw_cqe = &read_cqe;
		advance_oldest_read(wq);
	}

	if (CQE_STATUS(hw_cqe) || t4_wq_in_error(wq)) {
		*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH);
		t4_set_wq_in_error(wq);
	}

	/*
	 * RECV completion.
	 */
	if (RQ_TYPE(hw_cqe)) {

		/*
		 * HW only validates 4 bits of MSN.  So we must validate that
		 * the MSN in the SEND is the next expected MSN.  If its not,
		 * then we complete this with T4_ERR_MSN and mark the wq in
		 * error.
		 */

		if (t4_rq_empty(wq)) {
			t4_set_wq_in_error(wq);
			ret = -EAGAIN;
			goto skip_cqe;
		}
		if (unlikely(!CQE_STATUS(hw_cqe) &&
			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)) {
			t4_set_wq_in_error(wq);
			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));
		}
		goto proc_cqe;
	}

	/*
	 * If we get here its a send completion.
	 *
	 * Handle out of order completion. These get stuffed
	 * in the SW SQ. Then the SW SQ is walked to move any
	 * now in-order completions into the SW CQ.  This handles
	 * 2 cases:
	 *	1) reaping unsignaled WRs when the first subsequent
	 *	   signaled WR is completed.
	 *	2) out of order read completions.
	 */
	if (!SW_CQE(hw_cqe) && (CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx)) {
		struct t4_swsqe *swsqe;

		pr_debug("out of order completion going in sw_sq at idx %u\n",
			 CQE_WRID_SQ_IDX(hw_cqe));
		swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)];
		swsqe->cqe = *hw_cqe;
		swsqe->complete = 1;
		ret = -EAGAIN;
		goto flush_wq;
	}

proc_cqe:
	*cqe = *hw_cqe;

	/*
	 * Reap the associated WR(s) that are freed up with this
	 * completion.
	 */
	if (SQ_TYPE(hw_cqe)) {
		int idx = CQE_WRID_SQ_IDX(hw_cqe);

		/*
		* Account for any unsignaled completions completed by
		* this signaled completion.  In this case, cidx points
		* to the first unsignaled one, and idx points to the
		* signaled one.  So adjust in_use based on this delta.
		* if this is not completing any unsigned wrs, then the
		* delta will be 0. Handle wrapping also!
		*/
		if (idx < wq->sq.cidx)
			wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;
		else
			wq->sq.in_use -= idx - wq->sq.cidx;

		wq->sq.cidx = (uint16_t)idx;
		pr_debug("completing sq idx %u\n", wq->sq.cidx);
		*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id;
		if (c4iw_wr_log)
			c4iw_log_wr_stats(wq, hw_cqe);
		t4_sq_consume(wq);
	} else {
		pr_debug("completing rq idx %u\n", wq->rq.cidx);
		*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id;
		if (c4iw_wr_log)
			c4iw_log_wr_stats(wq, hw_cqe);
		t4_rq_consume(wq);
		goto skip_cqe;
	}

flush_wq:
	/*
	 * Flush any completed cqes that are now in-order.
	 */
	flush_completed_wrs(wq, cq);

skip_cqe:
	if (SW_CQE(hw_cqe)) {
		pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",
			 cq, cq->cqid, cq->sw_cidx);
		t4_swcq_consume(cq);
	} else {
		pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",
			 cq, cq->cqid, cq->cidx);
		t4_hwcq_consume(cq);
	}
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
32,34
35,36
35,37
36,37
38,39
38,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
41,49
41,50
41,51
41,52
41,53
41,54
41,55
41,56
41,57
41,58
41,59
41,60
41,61
42,43
43,44
43,45
45,46
45,47
47,48
49,50
50,51
50,52
50,53
51,52
53,54
53,55
56,57
58,59
59,60
59,61
60,61
61,62
64,65
65,66
65,67
66,67
67,68
70,71
71,72
71,73
72,73
74,75
74,76
74,77
75,76
77,78
79,80
80,81
82,83
82,84
83,84
85,86
86,87
88,89
89,90
89,91
89,92
89,93
89,94
89,95
89,96
89,97
89,98
89,99
89,100
90,91
93,94
93,95
94,95
96,97
98,99
98,100
99,100
101,102
103,104
103,105
104,105
106,107
108,109
108,110
109,110
111,112
113,114
113,115
114,115
116,117
118,119
118,120
119,120
121,122
123,124
123,125
124,125
126,127
128,129
128,130
129,130
131,132
133,134
133,135
134,135
136,137
138,139
138,140
139,140
139,141
140,141
142,143
144,145
144,146
145,146
146,147
146,148
147,148
149,150
150,151
152,153
154,155
154,156
155,156
155,157
156,157
156,158
157,158
160,161
161,162
161,163
162,163
164,165
166,167
166,168
167,168
168,169
168,170
169,170
171,172
172,173
174,175
176,177
176,178
177,178
177,179
178,179
178,180
179,180
181,182
183,184
185,186
185,187
186,187
187,188
187,189
188,189
190,191
191,192
193,194
195,196
195,197
196,197
196,198
197,198
199,200
201,202
201,203
201,204
202,203
203,204
203,205
204,205
205,206
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
215,216
217,218
218,219
220,221
222,223
222,224
223,224
223,225
224,225
224,226
225,226
227,228
229,230
230,231
230,232
231,232
231,233
232,233
234,235
236,237
238,239
238,240
238,241
238,242
238,243
238,244
239,240
239,241
240,241
240,242
241,242
241,243
242,243
244,245
247,248
247,249
247,250
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
255,257
256,257
258,259
260,261
261,262
261,263
262,263
264,265
265,266
267,268
269,270
269,271
270,271
270,272
271,272
271,273
272,273
274,275
277,278
277,279
277,280
278,279
278,280
279,280
279,281
280,281
282,283
284,285
285,286
285,287
286,287
288,289
290,291
291,292
291,293
292,293
294,295
295,296
297,298
299,300
299,301
300,301
301,302
301,303
302,303
302,304
303,304
303,305
304,305
309,310
309,311
309,312
310,311
311,312
311,313
312,313
314,315
316,317
317,318
317,319
318,319
320,321
321,322
323,324
325,326
326,327
326,328
326,329
326,330
327,328
329,330
331,332
333,334
334,335
336,337
337,338
337,339
338,339
340,341
341,342
343,344
344,345
344,346
345,346
347,348
349,350
349,351
350,351
350,352
351,352
351,353
352,353
354,355
356,357
356,358
357,358
359,360
361,362
361,363
362,363
363,364
363,365
364,365
365,366
367,368
368,369
368,370
369,370
369,371
370,371
372,373
374,375
376,377
377,378
377,379
378,379
380,381
382,383
382,384
383,384
383,385
384,385
386,387
388,389
388,390
388,391
389,390
389,391
390,391
390,392
391,392
393,394
395,396
395,397
395,398
396,397
397,398
397,399
398,399
400,401
402,403
403,404
403,405
404,405
406,407
407,408
409,410
411,412
411,413
412,413
412,414
413,414
415,416
415,417
416,417
417,418
417,419
418,419
420,421
422,423
422,424
423,424
423,425
424,425
426,427
428,429
428,430
429,430
429,431
430,431
434,435
434,436
435,436
436,437
436,438
437,438
439,440
441,442
442,443
442,444
443,444
443,445
444,445
447,448
447,449
448,449
450,451
450,452
451,452
453,454
455,456
457,458
457,459
458,459
458,460
459,460
460,461
460,462
461,462
463,464
465,466
466,467
466,468
467,468
467,469
468,469
470,471
472,473
472,474
473,474
473,475
474,475
478,479
478,480
478,481
478,482
478,483
478,484
478,485
479,480
480,481
480,482
481,482
483,484
483,485
486,487
487,488
487,489
487,490
488,489
491,492
491,493
492,493
494,495
496,497
497,498
497,499
498,499
500,501
501,502
501,503
502,503
502,504
503,504
503,505
504,505
508,509
508,510
509,510
511,512
513,514
514,515
514,516
515,516
515,517
516,517
519,520
520,521
522,523
523,524
523,525
524,525
524,526
525,526
529,530
530,531
530,532
531,532
533,534
534,535
536,537
538,539
538,540
540,541
541,542
541,543
542,543
543,544
545,546
546,547
548,549
548,550
548,551
549,550
549,551
550,551
552,553
554,555
554,556
554,557
554,558
554,559
554,560
554,561
555,556
556,557
556,558
558,559
558,560
560,561
561,562
561,563
562,563
564,565
566,567
566,568
566,569
567,568
567,569
568,569
570,571
570,572
571,572
571,573
572,573
576,577
577,578
577,579
578,579
578,580
579,580
579,581
580,581
584,585
584,586
585,586
585,587
586,587
586,588
587,588
587,589
588,589
592,593
594,595
594,596
595,596
595,597
596,597
600,601
601,602
601,603
602,603
602,604
603,604
603,605
604,605
608,609
608,610
609,610
611,612
611,613
612,613
612,614
613,614
617,618
618,619
618,620
619,620
619,621
620,621
620,622
621,622
625,626
625,627
626,627
626,628
627,628
630,631
632,633
633,634
633,635
633,636
634,635
637,638
637,639
638,639
638,640
639,640
643,644
644,645
644,646
645,646
646,647
648,649
648,650
649,650
649,651
650,651
650,652
651,652
651,653
652,653
656,657
656,658
657,658
657,659
658,659
663,664
663,665
664,665
666,667
667,668
667,669
667,670
668,669
670,671
672,673
674,675
675,676
675,677
676,677
678,679
680,681
680,682
680,683
680,684
680,685
681,682
682,683
682,684
682,685
683,684
686,687
686,688
687,688
687,689
688,689
692,693
693,694
693,695
694,695
695,696
697,698
697,699
698,699
698,700
699,700
699,701
700,701
700,702
701,702
705,706
705,707
706,707
706,708
707,708
712,713
712,714
713,714
715,716
716,717
716,718
716,719
717,718
719,720
721,722
723,724
724,725
724,726
725,726
727,728
729,730
731,732
731,733
733,734
734,735
734,736
734,737
735,736
737,738
739,740
741,742
741,743
743,744
743,745
743,746
744,745
744,746
745,746
747,748
749,750
749,751
750,751
751,752
751,753
751,754
751,755
751,756
752,753
755,756
757,758
757,759
758,759
761,762
761,763
762,763
765,766
766,767
766,768
767,768
769,770
771,772
771,773
772,773
773,774
773,775
773,776
773,777
773,778
774,775
777,778
779,780
779,781
780,781
783,784
783,785
784,785
787,788
788,789
788,790
789,790
791,792
793,794
794,795
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,31,33,34,37,39,40,44,46,48,52,54,55,57,62,63,68,69,73,76,78,81,84,87,91,92,95,97,100,102,105,107,110,112,115,117,120,122,125,127,130,132,135,137,141,143,148,151,153,158,159,163,165,170,173,175,180,182,184,189,192,194,198,200,206,209,211,216,219,221,226,228,233,235,237,243,245,246,251,253,257,259,263,266,268,273,275,276,281,283,287,289,293,296,298,305,306,307,308,313,315,319,322,324,328,330,332,335,339,342,346,348,353,355,358,360,366,371,373,375,379,381,385,387,392,394,399,401,405,408,410,414,419,421,425,427,431,432,433,438,440,445,446,449,452,454,456,462,464,469,471,475,476,477,482,484,485,489,490,493,495,499,505,506,507,510,512,517,518,521,526,527,528,532,535,537,539,544,547,551,553,557,559,563,565,569,573,574,575,581,582,583,589,590,591,593,597,598,599,605,606,607,610,614,615,616,622,623,624,628,629,631,635,636,640,641,642,647,653,654,655,659,660,661,662,665,669,671,673,677,679,684,685,689,690,691,696,702,703,704,708,709,710,711,714,718,720,722,726,728,730,732,736,738,740,742,746,748,753,754,756,759,760,763,764,768,770,775,776,778,781,782,785,786,790,792,795
-----computeFrom-----
59,60
59,61
65,66
65,67
71,72
71,73
139,140
139,141
146,147
146,148
155,156
155,157
168,169
168,170
177,178
177,179
187,188
187,189
203,204
203,205
213,214
213,215
223,224
223,225
230,231
230,232
240,241
240,242
261,262
261,263
270,271
270,272
291,292
291,293
317,318
317,319
337,338
337,339
350,351
350,352
363,364
363,365
368,369
368,370
403,404
403,405
415,416
415,417
422,423
422,424
442,443
442,444
458,459
458,460
466,467
466,468
497,498
497,499
514,515
514,516
523,524
523,525
530,531
530,532
541,542
541,543
567,568
567,569
577,578
577,579
584,585
584,586
585,586
585,587
601,602
601,603
608,609
608,610
618,619
618,620
644,645
644,646
693,694
693,695
-----guardedBy-----
235,339
245,253
275,283
355,373
360,381
353,371
469,510
471,521
475,505
476,506
575,599
573,597
569,593
574,598
-----guardedByNegation-----
575,616
573,614
569,610
574,615
-----lastLexicalUse-----
575,616
573,614
569,610
574,615
-----jump-----
575,616
573,614
569,610
574,615
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int poll_cq(struct t4_wq *wq, struct t4_cq *cq, struct t4_cqe *cqe,		   u8 *cqe_flushed, u64 *cookie, u32 *credit){	int ret = 0;	struct t4_cqe *hw_cqe, read_cqe;	*cqe_flushed = 0;	*credit = 0;	ret = t4_next_cqe(cq, &hw_cqe);	if (ret)		return ret;	pr_debug("CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\n",		 CQE_OVFBIT(hw_cqe), CQE_QPID(hw_cqe),		 CQE_GENBIT(hw_cqe), CQE_TYPE(hw_cqe), CQE_STATUS(hw_cqe),		 CQE_OPCODE(hw_cqe), CQE_LEN(hw_cqe), CQE_WRID_HI(hw_cqe),		 CQE_WRID_LOW(hw_cqe));	/*	 * skip cqe's not affiliated with a QP.	 */	if (wq == NULL) {		ret = -EAGAIN;		goto skip_cqe;	}	/*	* skip hw cqe's if the wq is flushed.	*/	if (wq->flushed && !SW_CQE(hw_cqe)) {		ret = -EAGAIN;		goto skip_cqe;	}	/*	 * skip TERMINATE cqes...	 */	if (CQE_OPCODE(hw_cqe) == FW_RI_TERMINATE) {		ret = -EAGAIN;		goto skip_cqe;	}	/*	 * Special cqe for drain WR completions...	 */	if (DRAIN_CQE(hw_cqe)) {		*cookie = CQE_DRAIN_COOKIE(hw_cqe);		*cqe = *hw_cqe;		goto skip_cqe;	}	/*	 * Gotta tweak READ completions:	 *	1) the cqe doesn't contain the sq_wptr from the wr.	 *	2) opcode not reflected from the wr.	 *	3) read_len not reflected from the wr.	 *	4) cq_type is RQ_TYPE not SQ_TYPE.	 */	if (RQ_TYPE(hw_cqe) && (CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP)) {		/* If we have reached here because of async		 * event or other error, and have egress error		 * then drop		 */		if (CQE_TYPE(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/* If this is an unsolicited read response, then the read		 * was generated by the kernel driver as part of peer-2-peer		 * connection setup.  So ignore the completion.		 */		if (CQE_WRID_STAG(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Eat completions for unsignaled read WRs.		 */		if (!wq->sq.oldest_read->signaled) {			advance_oldest_read(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Don't write to the HWCQ, so create a new read req CQE		 * in local memory.		 */		create_read_req_cqe(wq, hw_cqe, &read_cqe);		hw_cqe = &read_cqe;		advance_oldest_read(wq);	}	if (CQE_STATUS(hw_cqe) || t4_wq_in_error(wq)) {		*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH);		t4_set_wq_in_error(wq);	}	/*	 * RECV completion.	 */	if (RQ_TYPE(hw_cqe)) {		/*		 * HW only validates 4 bits of MSN.  So we must validate that		 * the MSN in the SEND is the next expected MSN.  If its not,		 * then we complete this with T4_ERR_MSN and mark the wq in		 * error.		 */		if (t4_rq_empty(wq)) {			t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		if (unlikely(!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)) {			t4_set_wq_in_error(wq);			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));		}		goto proc_cqe;	}	/*	 * If we get here its a send completion.	 *	 * Handle out of order completion. These get stuffed	 * in the SW SQ. Then the SW SQ is walked to move any	 * now in-order completions into the SW CQ.  This handles	 * 2 cases:	 *	1) reaping unsignaled WRs when the first subsequent	 *	   signaled WR is completed.	 *	2) out of order read completions.	 */	if (!SW_CQE(hw_cqe) && (CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx)) {		struct t4_swsqe *swsqe;		pr_debug("out of order completion going in sw_sq at idx %u\n",			 CQE_WRID_SQ_IDX(hw_cqe));		swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)];		swsqe->cqe = *hw_cqe;		swsqe->complete = 1;		ret = -EAGAIN;		goto flush_wq;	}proc_cqe:	*cqe = *hw_cqe;	/*	 * Reap the associated WR(s) that are freed up with this	 * completion.	 */	if (SQ_TYPE(hw_cqe)) {		int idx = CQE_WRID_SQ_IDX(hw_cqe);		/*		* Account for any unsignaled completions completed by		* this signaled completion.  In this case, cidx points		* to the first unsignaled one, and idx points to the		* signaled one.  So adjust in_use based on this delta.		* if this is not completing any unsigned wrs, then the		* delta will be 0. Handle wrapping also!		*/		if (idx < wq->sq.cidx)			wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;		else			wq->sq.in_use -= idx - wq->sq.cidx;		wq->sq.cidx = (uint16_t)idx;		pr_debug("completing sq idx %u\n", wq->sq.cidx);		*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_sq_consume(wq);	} else {		pr_debug("completing rq idx %u\n", wq->rq.cidx);		*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_rq_consume(wq);		goto skip_cqe;	}flush_wq:	/*	 * Flush any completed cqes that are now in-order.	 */	flush_completed_wrs(wq, cq);skip_cqe:	if (SW_CQE(hw_cqe)) {		pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx);		t4_swcq_consume(cq);	} else {		pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx);		t4_hwcq_consume(cq);	}	return ret;}
static int
poll_cq(struct t4_wq *wq, struct t4_cq *cq, struct t4_cqe *cqe,		   u8 *cqe_flushed, u64 *cookie, u32 *credit)
poll_cq
struct t4_wq *wq
struct t4_wq
t4_wq
*wq
*
wq
struct t4_cq *cq
struct t4_cq
t4_cq
*cq
*
cq
struct t4_cqe *cqe
struct t4_cqe
t4_cqe
*cqe
*
cqe
u8 *cqe_flushed
u8
u8
*cqe_flushed
*
cqe_flushed
u64 *cookie
u64
u64
*cookie
*
cookie
u32 *credit
u32
u32
*credit
*
credit
{	int ret = 0;	struct t4_cqe *hw_cqe, read_cqe;	*cqe_flushed = 0;	*credit = 0;	ret = t4_next_cqe(cq, &hw_cqe);	if (ret)		return ret;	pr_debug("CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\n",		 CQE_OVFBIT(hw_cqe), CQE_QPID(hw_cqe),		 CQE_GENBIT(hw_cqe), CQE_TYPE(hw_cqe), CQE_STATUS(hw_cqe),		 CQE_OPCODE(hw_cqe), CQE_LEN(hw_cqe), CQE_WRID_HI(hw_cqe),		 CQE_WRID_LOW(hw_cqe));	/*	 * skip cqe's not affiliated with a QP.	 */	if (wq == NULL) {		ret = -EAGAIN;		goto skip_cqe;	}	/*	* skip hw cqe's if the wq is flushed.	*/	if (wq->flushed && !SW_CQE(hw_cqe)) {		ret = -EAGAIN;		goto skip_cqe;	}	/*	 * skip TERMINATE cqes...	 */	if (CQE_OPCODE(hw_cqe) == FW_RI_TERMINATE) {		ret = -EAGAIN;		goto skip_cqe;	}	/*	 * Special cqe for drain WR completions...	 */	if (DRAIN_CQE(hw_cqe)) {		*cookie = CQE_DRAIN_COOKIE(hw_cqe);		*cqe = *hw_cqe;		goto skip_cqe;	}	/*	 * Gotta tweak READ completions:	 *	1) the cqe doesn't contain the sq_wptr from the wr.	 *	2) opcode not reflected from the wr.	 *	3) read_len not reflected from the wr.	 *	4) cq_type is RQ_TYPE not SQ_TYPE.	 */	if (RQ_TYPE(hw_cqe) && (CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP)) {		/* If we have reached here because of async		 * event or other error, and have egress error		 * then drop		 */		if (CQE_TYPE(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/* If this is an unsolicited read response, then the read		 * was generated by the kernel driver as part of peer-2-peer		 * connection setup.  So ignore the completion.		 */		if (CQE_WRID_STAG(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Eat completions for unsignaled read WRs.		 */		if (!wq->sq.oldest_read->signaled) {			advance_oldest_read(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Don't write to the HWCQ, so create a new read req CQE		 * in local memory.		 */		create_read_req_cqe(wq, hw_cqe, &read_cqe);		hw_cqe = &read_cqe;		advance_oldest_read(wq);	}	if (CQE_STATUS(hw_cqe) || t4_wq_in_error(wq)) {		*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH);		t4_set_wq_in_error(wq);	}	/*	 * RECV completion.	 */	if (RQ_TYPE(hw_cqe)) {		/*		 * HW only validates 4 bits of MSN.  So we must validate that		 * the MSN in the SEND is the next expected MSN.  If its not,		 * then we complete this with T4_ERR_MSN and mark the wq in		 * error.		 */		if (t4_rq_empty(wq)) {			t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		if (unlikely(!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)) {			t4_set_wq_in_error(wq);			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));		}		goto proc_cqe;	}	/*	 * If we get here its a send completion.	 *	 * Handle out of order completion. These get stuffed	 * in the SW SQ. Then the SW SQ is walked to move any	 * now in-order completions into the SW CQ.  This handles	 * 2 cases:	 *	1) reaping unsignaled WRs when the first subsequent	 *	   signaled WR is completed.	 *	2) out of order read completions.	 */	if (!SW_CQE(hw_cqe) && (CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx)) {		struct t4_swsqe *swsqe;		pr_debug("out of order completion going in sw_sq at idx %u\n",			 CQE_WRID_SQ_IDX(hw_cqe));		swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)];		swsqe->cqe = *hw_cqe;		swsqe->complete = 1;		ret = -EAGAIN;		goto flush_wq;	}proc_cqe:	*cqe = *hw_cqe;	/*	 * Reap the associated WR(s) that are freed up with this	 * completion.	 */	if (SQ_TYPE(hw_cqe)) {		int idx = CQE_WRID_SQ_IDX(hw_cqe);		/*		* Account for any unsignaled completions completed by		* this signaled completion.  In this case, cidx points		* to the first unsignaled one, and idx points to the		* signaled one.  So adjust in_use based on this delta.		* if this is not completing any unsigned wrs, then the		* delta will be 0. Handle wrapping also!		*/		if (idx < wq->sq.cidx)			wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;		else			wq->sq.in_use -= idx - wq->sq.cidx;		wq->sq.cidx = (uint16_t)idx;		pr_debug("completing sq idx %u\n", wq->sq.cidx);		*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_sq_consume(wq);	} else {		pr_debug("completing rq idx %u\n", wq->rq.cidx);		*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_rq_consume(wq);		goto skip_cqe;	}flush_wq:	/*	 * Flush any completed cqes that are now in-order.	 */	flush_completed_wrs(wq, cq);skip_cqe:	if (SW_CQE(hw_cqe)) {		pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx);		t4_swcq_consume(cq);	} else {		pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx);		t4_hwcq_consume(cq);	}	return ret;}
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
struct t4_cqe *hw_cqe, read_cqe;
struct t4_cqe *hw_cqe, read_cqe;
struct t4_cqe
t4_cqe
*hw_cqe
*
hw_cqe
read_cqe
read_cqe
*cqe_flushed = 0;
*cqe_flushed = 0
*cqe_flushed
cqe_flushed
cqe_flushed
0
*credit = 0;
*credit = 0
*credit
credit
credit
0
ret = t4_next_cqe(cq, &hw_cqe);
ret = t4_next_cqe(cq, &hw_cqe)
ret
ret
t4_next_cqe(cq, &hw_cqe)
t4_next_cqe
t4_next_cqe
cq
cq
&hw_cqe
hw_cqe
hw_cqe
if (ret)		return ret;
ret
ret
return ret;
ret
ret
pr_debug("CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\n",		 CQE_OVFBIT(hw_cqe), CQE_QPID(hw_cqe),		 CQE_GENBIT(hw_cqe), CQE_TYPE(hw_cqe), CQE_STATUS(hw_cqe),		 CQE_OPCODE(hw_cqe), CQE_LEN(hw_cqe), CQE_WRID_HI(hw_cqe),		 CQE_WRID_LOW(hw_cqe));
pr_debug("CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\n",		 CQE_OVFBIT(hw_cqe), CQE_QPID(hw_cqe),		 CQE_GENBIT(hw_cqe), CQE_TYPE(hw_cqe), CQE_STATUS(hw_cqe),		 CQE_OPCODE(hw_cqe), CQE_LEN(hw_cqe), CQE_WRID_HI(hw_cqe),		 CQE_WRID_LOW(hw_cqe))
pr_debug
pr_debug
"CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\n"
CQE_OVFBIT(hw_cqe)
CQE_OVFBIT
CQE_OVFBIT
hw_cqe
hw_cqe
CQE_QPID(hw_cqe)
CQE_QPID
CQE_QPID
hw_cqe
hw_cqe
CQE_GENBIT(hw_cqe)
CQE_GENBIT
CQE_GENBIT
hw_cqe
hw_cqe
CQE_TYPE(hw_cqe)
CQE_TYPE
CQE_TYPE
hw_cqe
hw_cqe
CQE_STATUS(hw_cqe)
CQE_STATUS
CQE_STATUS
hw_cqe
hw_cqe
CQE_OPCODE(hw_cqe)
CQE_OPCODE
CQE_OPCODE
hw_cqe
hw_cqe
CQE_LEN(hw_cqe)
CQE_LEN
CQE_LEN
hw_cqe
hw_cqe
CQE_WRID_HI(hw_cqe)
CQE_WRID_HI
CQE_WRID_HI
hw_cqe
hw_cqe
CQE_WRID_LOW(hw_cqe)
CQE_WRID_LOW
CQE_WRID_LOW
hw_cqe
hw_cqe
if (wq == NULL) {		ret = -EAGAIN;		goto skip_cqe;	}
wq == NULL
wq
wq
NULL
NULL
{		ret = -EAGAIN;		goto skip_cqe;	}
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
if (wq->flushed && !SW_CQE(hw_cqe)) {		ret = -EAGAIN;		goto skip_cqe;	}
wq->flushed && !SW_CQE(hw_cqe)
wq->flushed
wq
wq
flushed
!SW_CQE(hw_cqe)
SW_CQE(hw_cqe)
SW_CQE
SW_CQE
hw_cqe
hw_cqe
{		ret = -EAGAIN;		goto skip_cqe;	}
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
if (CQE_OPCODE(hw_cqe) == FW_RI_TERMINATE) {		ret = -EAGAIN;		goto skip_cqe;	}
CQE_OPCODE(hw_cqe) == FW_RI_TERMINATE
CQE_OPCODE(hw_cqe)
CQE_OPCODE
CQE_OPCODE
hw_cqe
hw_cqe
FW_RI_TERMINATE
FW_RI_TERMINATE
{		ret = -EAGAIN;		goto skip_cqe;	}
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
if (DRAIN_CQE(hw_cqe)) {		*cookie = CQE_DRAIN_COOKIE(hw_cqe);		*cqe = *hw_cqe;		goto skip_cqe;	}
DRAIN_CQE(hw_cqe)
DRAIN_CQE
DRAIN_CQE
hw_cqe
hw_cqe
{		*cookie = CQE_DRAIN_COOKIE(hw_cqe);		*cqe = *hw_cqe;		goto skip_cqe;	}
*cookie = CQE_DRAIN_COOKIE(hw_cqe);
*cookie = CQE_DRAIN_COOKIE(hw_cqe)
*cookie
cookie
cookie
CQE_DRAIN_COOKIE(hw_cqe)
CQE_DRAIN_COOKIE
CQE_DRAIN_COOKIE
hw_cqe
hw_cqe
*cqe = *hw_cqe;
*cqe = *hw_cqe
*cqe
cqe
cqe
*hw_cqe
hw_cqe
hw_cqe
goto skip_cqe;
skip_cqe
if (RQ_TYPE(hw_cqe) && (CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP)) {		/* If we have reached here because of async		 * event or other error, and have egress error		 * then drop		 */		if (CQE_TYPE(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/* If this is an unsolicited read response, then the read		 * was generated by the kernel driver as part of peer-2-peer		 * connection setup.  So ignore the completion.		 */		if (CQE_WRID_STAG(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Eat completions for unsignaled read WRs.		 */		if (!wq->sq.oldest_read->signaled) {			advance_oldest_read(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Don't write to the HWCQ, so create a new read req CQE		 * in local memory.		 */		create_read_req_cqe(wq, hw_cqe, &read_cqe);		hw_cqe = &read_cqe;		advance_oldest_read(wq);	}
RQ_TYPE(hw_cqe) && (CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP)
RQ_TYPE(hw_cqe)
RQ_TYPE
RQ_TYPE
hw_cqe
hw_cqe
(CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP)
CQE_OPCODE(hw_cqe) == FW_RI_READ_RESP
CQE_OPCODE(hw_cqe)
CQE_OPCODE
CQE_OPCODE
hw_cqe
hw_cqe
FW_RI_READ_RESP
FW_RI_READ_RESP
{		/* If we have reached here because of async		 * event or other error, and have egress error		 * then drop		 */		if (CQE_TYPE(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/* If this is an unsolicited read response, then the read		 * was generated by the kernel driver as part of peer-2-peer		 * connection setup.  So ignore the completion.		 */		if (CQE_WRID_STAG(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Eat completions for unsignaled read WRs.		 */		if (!wq->sq.oldest_read->signaled) {			advance_oldest_read(wq);			ret = -EAGAIN;			goto skip_cqe;		}		/*		 * Don't write to the HWCQ, so create a new read req CQE		 * in local memory.		 */		create_read_req_cqe(wq, hw_cqe, &read_cqe);		hw_cqe = &read_cqe;		advance_oldest_read(wq);	}
if (CQE_TYPE(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}
CQE_TYPE(hw_cqe) == 1
CQE_TYPE(hw_cqe)
CQE_TYPE
CQE_TYPE
hw_cqe
hw_cqe
1
{			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}
if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);
CQE_STATUS(hw_cqe)
CQE_STATUS
CQE_STATUS
hw_cqe
hw_cqe
t4_set_wq_in_error(wq);
t4_set_wq_in_error(wq)
t4_set_wq_in_error
t4_set_wq_in_error
wq
wq
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
if (CQE_WRID_STAG(hw_cqe) == 1) {			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}
CQE_WRID_STAG(hw_cqe) == 1
CQE_WRID_STAG(hw_cqe)
CQE_WRID_STAG
CQE_WRID_STAG
hw_cqe
hw_cqe
1
{			if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}
if (CQE_STATUS(hw_cqe))				t4_set_wq_in_error(wq);
CQE_STATUS(hw_cqe)
CQE_STATUS
CQE_STATUS
hw_cqe
hw_cqe
t4_set_wq_in_error(wq);
t4_set_wq_in_error(wq)
t4_set_wq_in_error
t4_set_wq_in_error
wq
wq
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
if (!wq->sq.oldest_read->signaled) {			advance_oldest_read(wq);			ret = -EAGAIN;			goto skip_cqe;		}
!wq->sq.oldest_read->signaled
wq->sq.oldest_read->signaled
wq->sq.oldest_read
wq->sq
wq
wq
sq
oldest_read
signaled
{			advance_oldest_read(wq);			ret = -EAGAIN;			goto skip_cqe;		}
advance_oldest_read(wq);
advance_oldest_read(wq)
advance_oldest_read
advance_oldest_read
wq
wq
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
create_read_req_cqe(wq, hw_cqe, &read_cqe);
create_read_req_cqe(wq, hw_cqe, &read_cqe)
create_read_req_cqe
create_read_req_cqe
wq
wq
hw_cqe
hw_cqe
&read_cqe
read_cqe
read_cqe
hw_cqe = &read_cqe;
hw_cqe = &read_cqe
hw_cqe
hw_cqe
&read_cqe
read_cqe
read_cqe
advance_oldest_read(wq);
advance_oldest_read(wq)
advance_oldest_read
advance_oldest_read
wq
wq
if (CQE_STATUS(hw_cqe) || t4_wq_in_error(wq)) {		*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH);		t4_set_wq_in_error(wq);	}
CQE_STATUS(hw_cqe) || t4_wq_in_error(wq)
CQE_STATUS(hw_cqe)
CQE_STATUS
CQE_STATUS
hw_cqe
hw_cqe
t4_wq_in_error(wq)
t4_wq_in_error
t4_wq_in_error
wq
wq
{		*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH);		t4_set_wq_in_error(wq);	}
*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH);
*cqe_flushed = (CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH)
*cqe_flushed
cqe_flushed
cqe_flushed
(CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH)
CQE_STATUS(hw_cqe) == T4_ERR_SWFLUSH
CQE_STATUS(hw_cqe)
CQE_STATUS
CQE_STATUS
hw_cqe
hw_cqe
T4_ERR_SWFLUSH
T4_ERR_SWFLUSH
t4_set_wq_in_error(wq);
t4_set_wq_in_error(wq)
t4_set_wq_in_error
t4_set_wq_in_error
wq
wq
if (RQ_TYPE(hw_cqe)) {		/*		 * HW only validates 4 bits of MSN.  So we must validate that		 * the MSN in the SEND is the next expected MSN.  If its not,		 * then we complete this with T4_ERR_MSN and mark the wq in		 * error.		 */		if (t4_rq_empty(wq)) {			t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		if (unlikely(!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)) {			t4_set_wq_in_error(wq);			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));		}		goto proc_cqe;	}
RQ_TYPE(hw_cqe)
RQ_TYPE
RQ_TYPE
hw_cqe
hw_cqe
{		/*		 * HW only validates 4 bits of MSN.  So we must validate that		 * the MSN in the SEND is the next expected MSN.  If its not,		 * then we complete this with T4_ERR_MSN and mark the wq in		 * error.		 */		if (t4_rq_empty(wq)) {			t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}		if (unlikely(!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)) {			t4_set_wq_in_error(wq);			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));		}		goto proc_cqe;	}
if (t4_rq_empty(wq)) {			t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}
t4_rq_empty(wq)
t4_rq_empty
t4_rq_empty
wq
wq
{			t4_set_wq_in_error(wq);			ret = -EAGAIN;			goto skip_cqe;		}
t4_set_wq_in_error(wq);
t4_set_wq_in_error(wq)
t4_set_wq_in_error
t4_set_wq_in_error
wq
wq
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto skip_cqe;
skip_cqe
if (unlikely(!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)) {			t4_set_wq_in_error(wq);			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));		}
unlikely(!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn)
unlikely
unlikely
!CQE_STATUS(hw_cqe) &&			     CQE_WRID_MSN(hw_cqe) != wq->rq.msn
!CQE_STATUS(hw_cqe)
CQE_STATUS(hw_cqe)
CQE_STATUS
CQE_STATUS
hw_cqe
hw_cqe
CQE_WRID_MSN(hw_cqe) != wq->rq.msn
CQE_WRID_MSN(hw_cqe)
CQE_WRID_MSN
CQE_WRID_MSN
hw_cqe
hw_cqe
wq->rq.msn
wq->rq
wq
wq
rq
msn
{			t4_set_wq_in_error(wq);			hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));		}
t4_set_wq_in_error(wq);
t4_set_wq_in_error(wq)
t4_set_wq_in_error
t4_set_wq_in_error
wq
wq
hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN));
hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN))
hw_cqe->header
hw_cqe
hw_cqe
header
cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN))
cpu_to_be32
cpu_to_be32
CQE_STATUS_V(T4_ERR_MSN)
CQE_STATUS_V
CQE_STATUS_V
T4_ERR_MSN
T4_ERR_MSN
goto proc_cqe;
proc_cqe
if (!SW_CQE(hw_cqe) && (CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx)) {		struct t4_swsqe *swsqe;		pr_debug("out of order completion going in sw_sq at idx %u\n",			 CQE_WRID_SQ_IDX(hw_cqe));		swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)];		swsqe->cqe = *hw_cqe;		swsqe->complete = 1;		ret = -EAGAIN;		goto flush_wq;	}
!SW_CQE(hw_cqe) && (CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx)
!SW_CQE(hw_cqe)
SW_CQE(hw_cqe)
SW_CQE
SW_CQE
hw_cqe
hw_cqe
(CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx)
CQE_WRID_SQ_IDX(hw_cqe) != wq->sq.cidx
CQE_WRID_SQ_IDX(hw_cqe)
CQE_WRID_SQ_IDX
CQE_WRID_SQ_IDX
hw_cqe
hw_cqe
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
{		struct t4_swsqe *swsqe;		pr_debug("out of order completion going in sw_sq at idx %u\n",			 CQE_WRID_SQ_IDX(hw_cqe));		swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)];		swsqe->cqe = *hw_cqe;		swsqe->complete = 1;		ret = -EAGAIN;		goto flush_wq;	}
struct t4_swsqe *swsqe;
struct t4_swsqe *swsqe;
struct t4_swsqe
t4_swsqe
*swsqe
*
swsqe
pr_debug("out of order completion going in sw_sq at idx %u\n",			 CQE_WRID_SQ_IDX(hw_cqe));
pr_debug("out of order completion going in sw_sq at idx %u\n",			 CQE_WRID_SQ_IDX(hw_cqe))
pr_debug
pr_debug
"out of order completion going in sw_sq at idx %u\n"
CQE_WRID_SQ_IDX(hw_cqe)
CQE_WRID_SQ_IDX
CQE_WRID_SQ_IDX
hw_cqe
hw_cqe
swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)];
swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)]
swsqe
swsqe
&wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)]
wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)]
wq->sq.sw_sq
wq->sq
wq
wq
sq
sw_sq
CQE_WRID_SQ_IDX(hw_cqe)
CQE_WRID_SQ_IDX
CQE_WRID_SQ_IDX
hw_cqe
hw_cqe
swsqe->cqe = *hw_cqe;
swsqe->cqe = *hw_cqe
swsqe->cqe
swsqe
swsqe
cqe
*hw_cqe
hw_cqe
hw_cqe
swsqe->complete = 1;
swsqe->complete = 1
swsqe->complete
swsqe
swsqe
complete
1
ret = -EAGAIN;
ret = -EAGAIN
ret
ret
-EAGAIN
EAGAIN
EAGAIN
goto flush_wq;
flush_wq
proc_cqe:	*cqe = *hw_cqe;
proc_cqe
*cqe = *hw_cqe;
*cqe = *hw_cqe
*cqe
cqe
cqe
*hw_cqe
hw_cqe
hw_cqe
if (SQ_TYPE(hw_cqe)) {		int idx = CQE_WRID_SQ_IDX(hw_cqe);		/*		* Account for any unsignaled completions completed by		* this signaled completion.  In this case, cidx points		* to the first unsignaled one, and idx points to the		* signaled one.  So adjust in_use based on this delta.		* if this is not completing any unsigned wrs, then the		* delta will be 0. Handle wrapping also!		*/		if (idx < wq->sq.cidx)			wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;		else			wq->sq.in_use -= idx - wq->sq.cidx;		wq->sq.cidx = (uint16_t)idx;		pr_debug("completing sq idx %u\n", wq->sq.cidx);		*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_sq_consume(wq);	} else {		pr_debug("completing rq idx %u\n", wq->rq.cidx);		*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_rq_consume(wq);		goto skip_cqe;	}
SQ_TYPE(hw_cqe)
SQ_TYPE
SQ_TYPE
hw_cqe
hw_cqe
{		int idx = CQE_WRID_SQ_IDX(hw_cqe);		/*		* Account for any unsignaled completions completed by		* this signaled completion.  In this case, cidx points		* to the first unsignaled one, and idx points to the		* signaled one.  So adjust in_use based on this delta.		* if this is not completing any unsigned wrs, then the		* delta will be 0. Handle wrapping also!		*/		if (idx < wq->sq.cidx)			wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;		else			wq->sq.in_use -= idx - wq->sq.cidx;		wq->sq.cidx = (uint16_t)idx;		pr_debug("completing sq idx %u\n", wq->sq.cidx);		*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_sq_consume(wq);	}
int idx = CQE_WRID_SQ_IDX(hw_cqe);
int idx = CQE_WRID_SQ_IDX(hw_cqe);
int
idx = CQE_WRID_SQ_IDX(hw_cqe)
idx
= CQE_WRID_SQ_IDX(hw_cqe)
CQE_WRID_SQ_IDX(hw_cqe)
CQE_WRID_SQ_IDX
CQE_WRID_SQ_IDX
hw_cqe
hw_cqe
if (idx < wq->sq.cidx)			wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;		else			wq->sq.in_use -= idx - wq->sq.cidx;
idx < wq->sq.cidx
idx
idx
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx;
wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx
wq->sq.in_use
wq->sq
wq
wq
sq
in_use
wq->sq.size + idx - wq->sq.cidx
wq->sq.size + idx
wq->sq.size
wq->sq
wq
wq
sq
size
idx
idx
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
wq->sq.in_use -= idx - wq->sq.cidx;
wq->sq.in_use -= idx - wq->sq.cidx
wq->sq.in_use
wq->sq
wq
wq
sq
in_use
idx - wq->sq.cidx
idx
idx
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
wq->sq.cidx = (uint16_t)idx;
wq->sq.cidx = (uint16_t)idx
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
(uint16_t)idx
uint16_t
uint16_t
uint16_t

idx
idx
pr_debug("completing sq idx %u\n", wq->sq.cidx);
pr_debug("completing sq idx %u\n", wq->sq.cidx)
pr_debug
pr_debug
"completing sq idx %u\n"
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id;
*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id
*cookie
cookie
cookie
wq->sq.sw_sq[wq->sq.cidx].wr_id
wq->sq.sw_sq[wq->sq.cidx]
wq->sq.sw_sq
wq->sq
wq
wq
sq
sw_sq
wq->sq.cidx
wq->sq
wq
wq
sq
cidx
wr_id
if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);
c4iw_wr_log
c4iw_wr_log
c4iw_log_wr_stats(wq, hw_cqe);
c4iw_log_wr_stats(wq, hw_cqe)
c4iw_log_wr_stats
c4iw_log_wr_stats
wq
wq
hw_cqe
hw_cqe
t4_sq_consume(wq);
t4_sq_consume(wq)
t4_sq_consume
t4_sq_consume
wq
wq
{		pr_debug("completing rq idx %u\n", wq->rq.cidx);		*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id;		if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);		t4_rq_consume(wq);		goto skip_cqe;	}
pr_debug("completing rq idx %u\n", wq->rq.cidx);
pr_debug("completing rq idx %u\n", wq->rq.cidx)
pr_debug
pr_debug
"completing rq idx %u\n"
wq->rq.cidx
wq->rq
wq
wq
rq
cidx
*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id;
*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id
*cookie
cookie
cookie
wq->rq.sw_rq[wq->rq.cidx].wr_id
wq->rq.sw_rq[wq->rq.cidx]
wq->rq.sw_rq
wq->rq
wq
wq
rq
sw_rq
wq->rq.cidx
wq->rq
wq
wq
rq
cidx
wr_id
if (c4iw_wr_log)			c4iw_log_wr_stats(wq, hw_cqe);
c4iw_wr_log
c4iw_wr_log
c4iw_log_wr_stats(wq, hw_cqe);
c4iw_log_wr_stats(wq, hw_cqe)
c4iw_log_wr_stats
c4iw_log_wr_stats
wq
wq
hw_cqe
hw_cqe
t4_rq_consume(wq);
t4_rq_consume(wq)
t4_rq_consume
t4_rq_consume
wq
wq
goto skip_cqe;
skip_cqe
flush_wq:	/*	 * Flush any completed cqes that are now in-order.	 */	flush_completed_wrs(wq, cq);
flush_wq
flush_completed_wrs(wq, cq);
flush_completed_wrs(wq, cq)
flush_completed_wrs
flush_completed_wrs
wq
wq
cq
cq
skip_cqe:	if (SW_CQE(hw_cqe)) {		pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx);		t4_swcq_consume(cq);	} else {		pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx);		t4_hwcq_consume(cq);	}
skip_cqe
if (SW_CQE(hw_cqe)) {		pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx);		t4_swcq_consume(cq);	} else {		pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx);		t4_hwcq_consume(cq);	}
SW_CQE(hw_cqe)
SW_CQE
SW_CQE
hw_cqe
hw_cqe
{		pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx);		t4_swcq_consume(cq);	}
pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx);
pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\n",			 cq, cq->cqid, cq->sw_cidx)
pr_debug
pr_debug
"cq %p cqid 0x%x skip sw cqe cidx %u\n"
cq
cq
cq->cqid
cq
cq
cqid
cq->sw_cidx
cq
cq
sw_cidx
t4_swcq_consume(cq);
t4_swcq_consume(cq)
t4_swcq_consume
t4_swcq_consume
cq
cq
{		pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx);		t4_hwcq_consume(cq);	}
pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx);
pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\n",			 cq, cq->cqid, cq->cidx)
pr_debug
pr_debug
"cq %p cqid 0x%x skip hw cqe cidx %u\n"
cq
cq
cq->cqid
cq
cq
cqid
cq->cidx
cq
cq
cidx
t4_hwcq_consume(cq);
t4_hwcq_consume(cq)
t4_hwcq_consume
t4_hwcq_consume
cq
cq
return ret;
ret
ret
-----joern-----
(66,51,0)
(387,283,0)
(164,12,0)
(371,11,0)
(299,31,0)
(169,224,0)
(109,185,0)
(360,410,0)
(39,159,0)
(31,391,0)
(189,389,0)
(107,259,0)
(391,234,0)
(108,54,0)
(259,45,0)
(31,223,0)
(36,370,0)
(175,361,0)
(410,327,0)
(229,4,0)
(432,53,0)
(382,310,0)
(257,153,0)
(239,45,0)
(410,72,0)
(203,115,0)
(358,385,0)
(65,181,0)
(429,382,0)
(319,358,0)
(159,86,0)
(294,386,0)
(265,45,0)
(426,318,0)
(217,149,0)
(169,77,0)
(164,199,0)
(336,208,0)
(183,77,0)
(209,334,0)
(316,85,0)
(205,421,0)
(414,163,0)
(90,385,0)
(183,67,0)
(371,116,0)
(215,131,0)
(345,57,0)
(309,410,0)
(164,41,0)
(30,148,0)
(210,361,0)
(245,115,0)
(32,217,0)
(54,108,0)
(216,361,0)
(396,376,0)
(386,294,0)
(11,371,0)
(32,126,0)
(32,283,0)
(158,116,0)
(30,223,0)
(303,392,0)
(134,263,0)
(296,69,0)
(346,25,0)
(1,163,0)
(368,33,0)
(213,226,0)
(129,23,0)
(312,149,0)
(372,224,0)
(142,361,0)
(25,125,0)
(164,329,0)
(364,41,0)
(369,235,0)
(123,378,0)
(236,202,0)
(62,142,0)
(422,140,0)
(416,283,0)
(218,408,0)
(410,360,0)
(202,194,0)
(128,373,0)
(122,142,0)
(53,175,0)
(82,227,0)
(409,381,0)
(212,0,0)
(36,120,0)
(153,157,0)
(160,324,0)
(351,253,0)
(11,88,0)
(88,11,0)
(30,126,0)
(248,361,0)
(45,194,0)
(173,238,0)
(277,331,0)
(411,257,0)
(352,286,0)
(333,224,0)
(138,32,0)
(407,3,0)
(157,153,0)
(67,361,0)
(25,361,0)
(52,23,0)
(269,376,0)
(28,190,0)
(400,178,0)
(168,181,0)
(250,383,0)
(206,116,0)
(336,46,0)
(350,45,0)
(74,385,0)
(427,283,0)
(108,365,0)
(205,361,0)
(8,45,0)
(383,55,0)
(428,283,0)
(44,381,0)
(84,283,0)
(227,62,0)
(267,327,0)
(160,238,0)
(3,223,0)
(339,119,0)
(220,179,0)
(281,89,0)
(420,45,0)
(133,319,0)
(75,47,0)
(146,178,0)
(32,358,0)
(142,62,0)
(170,217,0)
(395,208,0)
(0,347,0)
(292,420,0)
(313,234,0)
(137,132,0)
(255,132,0)
(96,151,0)
(48,217,0)
(399,60,0)
(230,140,0)
(167,371,0)
(77,253,0)
(21,45,0)
(325,54,0)
(410,309,0)
(190,28,0)
(335,303,0)
(324,160,0)
(13,167,0)
(195,106,0)
(318,223,0)
(228,0,0)
(32,89,0)
(199,416,0)
(131,200,0)
(388,283,0)
(383,361,0)
(193,283,0)
(318,3,0)
(393,402,0)
(339,45,0)
(53,47,0)
(4,375,0)
(179,119,0)
(240,32,0)
(302,188,0)
(404,386,0)
(46,421,0)
(270,42,0)
(398,306,0)
(55,242,0)
(10,420,0)
(6,402,0)
(285,426,0)
(359,303,0)
(151,361,0)
(208,385,0)
(352,361,0)
(179,220,0)
(78,81,0)
(394,283,0)
(152,124,0)
(141,213,0)
(305,175,0)
(248,401,0)
(87,361,0)
(135,188,0)
(262,384,0)
(47,41,0)
(406,85,0)
(421,46,0)
(304,95,0)
(161,283,0)
(35,265,0)
(42,361,0)
(213,361,0)
(217,48,0)
(379,261,0)
(227,119,0)
(311,248,0)
(380,125,0)
(38,1,0)
(262,361,0)
(105,131,0)
(50,396,0)
(274,116,0)
(111,235,0)
(186,234,0)
(75,125,0)
(176,52,0)
(154,81,0)
(91,149,0)
(208,336,0)
(98,391,0)
(57,190,0)
(28,350,0)
(253,119,0)
(237,239,0)
(19,259,0)
(62,227,0)
(273,198,0)
(420,361,0)
(357,401,0)
(151,220,0)
(95,340,0)
(21,306,0)
(174,412,0)
(356,209,0)
(70,258,0)
(112,340,0)
(181,168,0)
(184,195,0)
(328,220,0)
(238,160,0)
(32,422,0)
(51,223,0)
(64,391,0)
(130,119,0)
(374,205,0)
(23,52,0)
(324,45,0)
(191,95,0)
(263,45,0)
(99,283,0)
(271,283,0)
(202,361,0)
(410,198,0)
(257,411,0)
(3,318,0)
(188,45,0)
(293,3,0)
(103,111,0)
(234,391,0)
(256,52,0)
(367,216,0)
(365,108,0)
(408,45,0)
(234,223,0)
(221,244,0)
(127,214,0)
(92,410,0)
(364,226,0)
(32,131,0)
(166,241,0)
(347,88,0)
(410,290,0)
(47,329,0)
(253,77,0)
(110,283,0)
(164,263,0)
(124,261,0)
(197,205,0)
(216,223,0)
(185,109,0)
(201,24,0)
(219,283,0)
(334,209,0)
(235,111,0)
(107,385,0)
(341,294,0)
(425,174,0)
(14,87,0)
(364,106,0)
(282,329,0)
(71,358,0)
(191,77,0)
(12,164,0)
(278,161,0)
(192,410,0)
(185,159,0)
(72,410,0)
(251,109,0)
(23,12,0)
(54,286,0)
(167,412,0)
(422,378,0)
(240,247,0)
(401,248,0)
(354,377,0)
(153,257,0)
(40,283,0)
(210,171,0)
(231,252,0)
(106,195,0)
(32,303,0)
(253,180,0)
(4,45,0)
(413,394,0)
(32,245,0)
(175,53,0)
(83,411,0)
(373,284,0)
(364,196,0)
(150,1,0)
(245,241,0)
(264,360,0)
(187,171,0)
(424,361,0)
(247,126,0)
(421,205,0)
(20,45,0)
(353,158,0)
(375,4,0)
(136,57,0)
(235,45,0)
(410,92,0)
(254,383,0)
(15,157,0)
(334,158,0)
(42,392,0)
(274,361,0)
(126,30,0)
(164,196,0)
(139,340,0)
(358,319,0)
(314,245,0)
(326,75,0)
(225,36,0)
(12,227,0)
(7,216,0)
(233,410,0)
(97,286,0)
(55,383,0)
(342,306,0)
(125,75,0)
(402,6,0)
(272,11,0)
(268,283,0)
(303,335,0)
(26,262,0)
(88,401,0)
(318,426,0)
(111,103,0)
(337,283,0)
(52,361,0)
(426,223,0)
(118,330,0)
(101,191,0)
(113,89,0)
(143,178,0)
(291,31,0)
(222,30,0)
(29,199,0)
(51,266,0)
(28,103,0)
(288,86,0)
(59,175,0)
(290,410,0)
(58,274,0)
(375,108,0)
(5,411,0)
(373,164,0)
(54,325,0)
(1,194,0)
(33,368,0)
(101,361,0)
(108,375,0)
(362,48,0)
(391,223,0)
(298,318,0)
(419,72,0)
(363,67,0)
(350,28,0)
(24,120,0)
(263,364,0)
(126,283,0)
(320,101,0)
(332,284,0)
(308,426,0)
(296,242,0)
(366,20,0)
(162,179,0)
(121,44,0)
(177,318,0)
(16,116,0)
(276,281,0)
(115,245,0)
(95,191,0)
(171,181,0)
(415,215,0)
(132,208,0)
(301,67,0)
(204,392,0)
(144,196,0)
(198,410,0)
(410,283,0)
(159,185,0)
(119,340,0)
(131,215,0)
(214,385,0)
(104,350,0)
(300,190,0)
(67,183,0)
(190,57,0)
(47,263,0)
(180,253,0)
(183,242,0)
(94,142,0)
(386,45,0)
(163,1,0)
(261,124,0)
(411,361,0)
(216,283,0)
(182,126,0)
(349,381,0)
(209,361,0)
(120,376,0)
(391,266,0)
(409,361,0)
(117,378,0)
(106,364,0)
(22,309,0)
(242,55,0)
(244,361,0)
(86,159,0)
(88,347,0)
(390,209,0)
(347,0,0)
(171,210,0)
(389,283,0)
(172,41,0)
(396,50,0)
(155,194,0)
(196,394,0)
(63,194,0)
(27,263,0)
(330,361,0)
(119,339,0)
(307,55,0)
(224,169,0)
(410,192,0)
(17,33,0)
(46,336,0)
(45,408,0)
(224,361,0)
(120,24,0)
(391,31,0)
(85,208,0)
(9,248,0)
(405,247,0)
(294,385,0)
(196,93,0)
(114,194,0)
(20,46,0)
(327,410,0)
(0,361,0)
(284,361,0)
(243,101,0)
(132,214,0)
(47,196,0)
(69,296,0)
(85,107,0)
(41,317,0)
(329,342,0)
(1,361,0)
(321,200,0)
(57,361,0)
(297,210,0)
(47,75,0)
(284,373,0)
(364,329,0)
(329,317,0)
(397,339,0)
(220,151,0)
(318,310,0)
(416,239,0)
(60,45,0)
(315,347,0)
(43,421,0)
(12,23,0)
(61,151,0)
(80,191,0)
(242,183,0)
(68,169,0)
(46,20,0)
(158,334,0)
(238,361,0)
(242,296,0)
(56,76,0)
(102,283,0)
(249,334,0)
(165,352,0)
(89,338,0)
(227,12,0)
(47,199,0)
(199,370,0)
(322,25,0)
(286,352,0)
(275,210,0)
(418,21,0)
(417,340,0)
(342,384,0)
(401,88,0)
(348,284,0)
(424,340,0)
(49,368,0)
(430,325,0)
(259,107,0)
(103,28,0)
(148,30,0)
(246,290,0)
(423,352,0)
(18,389,0)
(331,45,0)
(286,54,0)
(207,283,0)
(306,342,0)
(73,296,0)
(44,252,0)
(69,340,0)
(289,6,0)
(382,223,0)
(260,92,0)
(140,422,0)
(280,183,0)
(174,69,0)
(188,361,0)
(355,335,0)
(258,396,0)
(181,171,0)
(145,192,0)
(252,44,0)
(410,100,0)
(258,412,0)
(147,283,0)
(100,410,0)
(75,119,0)
(89,281,0)
(306,21,0)
(125,25,0)
(403,100,0)
(41,161,0)
(325,45,0)
(32,44,0)
(295,148,0)
(2,338,0)
(77,340,0)
(34,422,0)
(279,50,0)
(191,101,0)
(81,361,0)
(343,409,0)
(232,283,0)
(79,156,0)
(37,424,0)
(287,324,0)
(431,62,0)
(239,416,0)
(410,327,1)
(96,61,1)
(142,361,1)
(367,74,1)
(37,188,1)
(202,236,1)
(39,86,1)
(75,119,1)
(29,103,1)
(153,157,1)
(333,164,1)
(334,249,1)
(74,358,1)
(199,29,1)
(144,161,1)
(331,277,1)
(305,179,1)
(352,165,1)
(402,393,1)
(88,347,1)
(303,335,1)
(368,49,1)
(263,134,1)
(196,93,1)
(71,214,1)
(397,130,1)
(100,403,1)
(169,224,1)
(313,186,1)
(270,168,1)
(238,361,1)
(279,258,1)
(234,313,1)
(224,372,1)
(66,391,1)
(164,329,1)
(343,244,1)
(35,117,1)
(35,216,1)
(410,360,1)
(113,402,1)
(115,203,1)
(13,158,1)
(142,94,1)
(281,276,1)
(36,370,1)
(120,24,1)
(55,307,1)
(389,189,1)
(332,179,1)
(421,205,1)
(1,163,1)
(272,88,1)
(190,57,1)
(253,351,1)
(245,115,1)
(77,253,1)
(175,59,1)
(158,334,1)
(171,210,1)
(166,245,1)
(164,12,1)
(336,46,1)
(64,265,1)
(365,108,1)
(35,321,1)
(304,77,1)
(366,421,1)
(251,76,1)
(42,270,1)
(24,201,1)
(44,252,1)
(196,144,1)
(234,223,1)
(246,327,1)
(319,133,1)
(258,412,1)
(160,324,1)
(182,394,1)
(418,329,1)
(399,416,1)
(118,377,1)
(172,389,1)
(347,0,1)
(70,76,1)
(300,57,1)
(135,302,1)
(227,119,1)
(28,190,1)
(238,173,1)
(339,45,1)
(364,196,1)
(329,282,1)
(416,239,1)
(46,20,1)
(323,371,1)
(52,256,1)
(202,361,1)
(394,413,1)
(87,361,1)
(173,324,1)
(379,124,1)
(228,212,1)
(125,380,1)
(6,289,1)
(131,215,1)
(32,217,1)
(410,72,1)
(35,16,1)
(318,426,1)
(47,199,1)
(329,317,1)
(162,119,1)
(88,401,1)
(30,148,1)
(176,373,1)
(325,45,1)
(2,89,1)
(373,128,1)
(109,251,1)
(288,109,1)
(156,79,1)
(41,172,1)
(62,142,1)
(47,75,1)
(306,398,1)
(154,78,1)
(362,170,1)
(105,257,1)
(168,181,1)
(191,77,1)
(311,167,1)
(121,409,1)
(247,405,1)
(12,227,1)
(331,45,1)
(350,45,1)
(197,374,1)
(344,126,1)
(290,246,1)
(26,342,1)
(42,361,1)
(330,361,1)
(20,366,1)
(143,364,1)
(278,41,1)
(23,129,1)
(222,182,1)
(55,383,1)
(175,361,1)
(159,39,1)
(352,361,1)
(87,14,1)
(287,202,1)
(307,383,1)
(274,361,1)
(419,92,1)
(210,275,1)
(220,151,1)
(275,297,1)
(174,425,1)
(410,92,1)
(424,37,1)
(29,143,1)
(374,395,1)
(19,85,1)
(119,339,1)
(11,272,1)
(255,107,1)
(286,97,1)
(108,54,1)
(4,45,1)
(249,209,1)
(11,88,1)
(306,21,1)
(411,83,1)
(51,223,1)
(364,41,1)
(277,262,1)
(210,361,1)
(192,145,1)
(132,137,1)
(47,263,1)
(117,422,1)
(377,354,1)
(106,195,1)
(350,104,1)
(108,375,1)
(231,121,1)
(136,345,1)
(267,100,1)
(47,41,1)
(89,281,1)
(398,21,1)
(401,248,1)
(318,3,1)
(16,274,1)
(12,23,1)
(32,303,1)
(191,101,1)
(62,431,1)
(52,361,1)
(401,357,1)
(413,196,1)
(58,420,1)
(371,11,1)
(239,45,1)
(287,185,1)
(101,361,1)
(181,171,1)
(92,260,1)
(134,27,1)
(25,322,1)
(354,368,1)
(351,169,1)
(253,180,1)
(225,396,1)
(429,318,1)
(308,285,1)
(324,287,1)
(289,257,1)
(82,23,1)
(38,168,1)
(409,361,1)
(216,7,1)
(318,223,1)
(20,45,1)
(314,81,1)
(264,192,1)
(262,361,1)
(67,301,1)
(151,96,1)
(3,293,1)
(229,244,1)
(177,298,1)
(386,404,1)
(258,70,1)
(184,263,1)
(262,26,1)
(256,176,1)
(138,382,1)
(35,166,1)
(327,267,1)
(35,349,1)
(205,197,1)
(68,224,1)
(402,6,1)
(165,423,1)
(364,106,1)
(58,323,1)
(285,3,1)
(86,288,1)
(383,254,1)
(386,45,1)
(357,248,1)
(188,135,1)
(97,352,1)
(298,265,1)
(159,86,1)
(83,5,1)
(163,414,1)
(130,60,1)
(161,278,1)
(244,221,1)
(244,361,1)
(297,261,1)
(137,255,1)
(54,286,1)
(360,264,1)
(36,225,1)
(174,412,1)
(57,361,1)
(403,233,1)
(69,296,1)
(302,211,1)
(426,308,1)
(32,358,1)
(309,22,1)
(32,89,1)
(263,45,1)
(341,103,1)
(382,223,1)
(431,142,1)
(375,4,1)
(47,196,1)
(325,430,1)
(151,361,1)
(273,290,1)
(111,235,1)
(383,361,1)
(284,348,1)
(355,359,1)
(208,336,1)
(220,328,1)
(373,284,1)
(265,45,1)
(3,223,1)
(240,247,1)
(103,28,1)
(269,120,1)
(391,31,1)
(280,67,1)
(167,13,1)
(46,421,1)
(94,122,1)
(420,292,1)
(265,35,1)
(248,361,1)
(188,361,1)
(349,44,1)
(242,55,1)
(188,45,1)
(169,68,1)
(183,77,1)
(415,105,1)
(190,300,1)
(282,160,1)
(333,47,1)
(235,45,1)
(359,42,1)
(107,259,1)
(203,314,1)
(185,109,1)
(369,331,1)
(364,329,1)
(91,217,1)
(101,243,1)
(31,223,1)
(9,311,1)
(382,429,1)
(421,43,1)
(286,352,1)
(393,6,1)
(205,361,1)
(43,205,1)
(95,191,1)
(367,424,1)
(79,261,1)
(152,368,1)
(10,323,1)
(50,279,1)
(259,45,1)
(32,245,1)
(395,294,1)
(405,344,1)
(261,124,1)
(183,280,1)
(104,111,1)
(164,196,1)
(189,18,1)
(259,19,1)
(179,220,1)
(411,361,1)
(316,208,1)
(103,111,1)
(326,53,1)
(295,222,1)
(78,410,1)
(294,386,1)
(407,177,1)
(426,223,1)
(8,1,1)
(321,131,1)
(217,48,1)
(126,30,1)
(33,17,1)
(7,367,1)
(22,72,1)
(335,355,1)
(410,198,1)
(145,309,1)
(209,356,1)
(432,175,1)
(15,411,1)
(404,341,1)
(17,185,1)
(127,132,1)
(252,231,1)
(122,82,1)
(363,55,1)
(138,51,1)
(347,315,1)
(150,38,1)
(61,162,1)
(236,45,1)
(213,141,1)
(227,62,1)
(372,333,1)
(128,284,1)
(0,228,1)
(56,402,1)
(5,81,1)
(420,45,1)
(195,184,1)
(322,346,1)
(296,242,1)
(221,331,1)
(348,332,1)
(47,329,1)
(242,183,1)
(235,369,1)
(129,52,1)
(215,415,1)
(81,361,1)
(186,31,1)
(257,411,1)
(183,67,1)
(199,370,1)
(98,64,1)
(204,303,1)
(164,263,1)
(390,353,1)
(37,211,1)
(339,397,1)
(85,406,1)
(396,50,1)
(328,151,1)
(32,44,1)
(14,156,1)
(408,218,1)
(4,229,1)
(23,52,1)
(346,326,1)
(342,306,1)
(430,375,1)
(54,325,1)
(85,208,1)
(132,208,1)
(60,399,1)
(76,56,1)
(21,418,1)
(260,198,1)
(257,153,1)
(299,98,1)
(425,95,1)
(414,150,1)
(409,343,1)
(75,125,1)
(356,390,1)
(80,101,1)
(27,213,1)
(422,140,1)
(30,223,1)
(368,33,1)
(380,25,1)
(125,25,1)
(424,361,1)
(291,299,1)
(167,412,1)
(25,361,1)
(164,41,1)
(171,187,1)
(410,192,1)
(224,361,1)
(293,407,1)
(237,199,1)
(57,136,1)
(353,60,1)
(216,223,1)
(51,66,1)
(248,9,1)
(277,160,1)
(324,45,1)
(230,34,1)
(216,361,1)
(59,305,1)
(160,238,1)
(133,71,1)
(233,344,1)
(60,45,1)
(53,432,1)
(170,87,1)
(140,230,1)
(35,2,1)
(276,113,1)
(185,159,1)
(358,319,1)
(315,0,1)
(345,350,1)
(240,32,1)
(239,237,1)
(41,317,1)
(73,242,1)
(35,269,1)
(212,401,1)
(31,291,1)
(247,126,1)
(261,379,1)
(320,304,1)
(21,45,1)
(48,362,1)
(141,365,1)
(296,73,1)
(1,361,1)
(301,363,1)
(157,15,1)
(201,36,1)
(274,58,1)
(32,422,1)
(410,309,1)
(65,171,1)
(420,361,1)
(32,138,1)
(213,361,1)
(34,377,1)
(32,126,1)
(214,127,1)
(191,80,1)
(292,10,1)
(35,91,1)
(187,210,1)
(35,204,1)
(330,118,1)
(45,408,1)
(198,273,1)
(406,316,1)
(391,223,1)
(53,175,1)
(391,234,1)
(67,361,1)
(0,361,1)
(72,419,1)
(124,152,1)
(164,199,1)
(250,174,1)
(211,69,1)
(334,209,1)
(28,350,1)
(179,119,1)
(181,65,1)
(32,131,1)
(170,156,1)
(410,100,1)
(143,365,1)
(254,250,1)
(243,320,1)
(423,325,1)
(218,8,1)
(148,295,1)
(284,361,1)
(253,119,1)
(209,361,1)
(410,290,1)
(34,330,1)
(81,154,1)
(49,33,1)
(373,179,2)
(318,223,2)
(286,352,2)
(379,368,2)
(424,60,2)
(190,57,2)
(329,160,2)
(187,261,2)
(275,261,2)
(20,103,2)
(410,92,2)
(281,402,2)
(46,421,2)
(348,179,2)
(177,265,2)
(426,265,2)
(128,179,2)
(118,377,2)
(397,60,2)
(299,265,2)
(79,261,2)
(359,168,2)
(181,171,2)
(421,103,2)
(88,401,2)
(253,180,2)
(15,411,2)
(92,344,2)
(419,344,2)
(257,153,2)
(216,223,2)
(75,125,2)
(410,360,2)
(37,60,2)
(29,244,2)
(160,185,2)
(249,60,2)
(49,185,2)
(405,344,2)
(160,168,2)
(141,365,2)
(236,168,2)
(415,257,2)
(19,103,2)
(404,103,2)
(1,163,2)
(133,103,2)
(305,179,2)
(124,368,2)
(12,227,2)
(74,103,2)
(260,344,2)
(125,25,2)
(95,60,2)
(422,368,2)
(286,375,2)
(14,156,2)
(160,324,2)
(69,60,2)
(111,235,2)
(211,60,2)
(26,160,2)
(374,103,2)
(334,209,2)
(426,223,2)
(259,45,2)
(330,377,2)
(416,244,2)
(234,265,2)
(326,179,2)
(318,3,2)
(351,60,2)
(218,168,2)
(168,181,2)
(188,211,2)
(208,103,2)
(51,223,2)
(410,344,2)
(47,196,2)
(210,361,2)
(264,344,2)
(142,179,2)
(38,168,2)
(85,103,2)
(120,76,2)
(336,46,2)
(51,265,2)
(410,309,2)
(76,402,2)
(256,179,2)
(420,323,2)
(31,223,2)
(321,257,2)
(309,344,2)
(47,179,2)
(138,344,2)
(16,60,2)
(308,265,2)
(126,30,2)
(221,331,2)
(95,191,2)
(368,185,2)
(30,148,2)
(247,344,2)
(325,375,2)
(81,361,2)
(54,375,2)
(152,368,2)
(142,361,2)
(331,185,2)
(166,81,2)
(383,60,2)
(173,324,2)
(44,244,2)
(418,160,2)
(42,361,2)
(62,179,2)
(41,317,2)
(382,223,2)
(57,361,2)
(239,45,2)
(386,45,2)
(284,361,2)
(362,261,2)
(217,48,2)
(409,361,2)
(47,41,2)
(332,179,2)
(86,109,2)
(130,60,2)
(191,60,2)
(416,103,2)
(153,411,2)
(364,41,2)
(27,365,2)
(71,103,2)
(336,103,2)
(422,140,2)
(366,103,2)
(316,103,2)
(315,60,2)
(87,361,2)
(190,111,2)
(257,411,2)
(289,257,2)
(109,76,2)
(89,281,2)
(150,168,2)
(276,402,2)
(244,331,2)
(250,60,2)
(339,60,2)
(3,265,2)
(85,208,2)
(258,76,2)
(113,402,2)
(335,168,2)
(46,20,2)
(13,60,2)
(7,60,2)
(100,344,2)
(205,361,2)
(318,265,2)
(227,119,2)
(72,344,2)
(216,60,2)
(101,361,2)
(67,361,2)
(424,361,2)
(107,103,2)
(345,111,2)
(184,365,2)
(56,402,2)
(414,168,2)
(132,103,2)
(69,296,2)
(279,76,2)
(45,408,2)
(186,265,2)
(302,211,2)
(432,179,2)
(373,284,2)
(429,265,2)
(296,242,2)
(372,60,2)
(204,168,2)
(237,244,2)
(10,323,2)
(159,109,2)
(33,185,2)
(391,265,2)
(367,60,2)
(185,76,2)
(32,131,2)
(47,329,2)
(140,368,2)
(174,412,2)
(91,261,2)
(64,265,2)
(353,60,2)
(227,179,2)
(238,324,2)
(375,244,2)
(382,265,2)
(105,257,2)
(341,103,2)
(259,103,2)
(242,55,2)
(101,60,2)
(248,361,2)
(242,183,2)
(420,45,2)
(210,261,2)
(36,370,2)
(331,168,2)
(205,103,2)
(393,257,2)
(331,45,2)
(399,103,2)
(406,103,2)
(231,244,2)
(391,234,2)
(368,33,2)
(274,361,2)
(135,211,2)
(48,261,2)
(323,60,2)
(120,24,2)
(371,60,2)
(213,361,2)
(364,196,2)
(127,103,2)
(20,45,2)
(398,160,2)
(328,60,2)
(402,257,2)
(9,60,2)
(227,62,2)
(320,60,2)
(410,327,2)
(416,239,2)
(234,223,2)
(403,344,2)
(96,60,2)
(220,151,2)
(301,60,2)
(167,412,2)
(55,60,2)
(83,81,2)
(162,60,2)
(401,248,2)
(261,368,2)
(224,60,2)
(215,257,2)
(408,168,2)
(65,261,2)
(383,361,2)
(239,103,2)
(407,265,2)
(98,265,2)
(167,60,2)
(399,244,2)
(134,365,2)
(32,126,2)
(342,306,2)
(171,261,2)
(8,168,2)
(62,142,2)
(4,244,2)
(303,335,2)
(60,244,2)
(1,168,2)
(125,179,2)
(192,344,2)
(199,103,2)
(29,103,2)
(195,365,2)
(32,344,2)
(43,103,2)
(160,238,2)
(54,325,2)
(391,223,2)
(55,383,2)
(32,44,2)
(324,45,2)
(70,76,2)
(75,179,2)
(80,60,2)
(213,365,2)
(122,179,2)
(395,103,2)
(119,60,2)
(311,60,2)
(354,368,2)
(78,344,2)
(401,60,2)
(294,386,2)
(410,198,2)
(115,81,2)
(410,72,2)
(365,108,2)
(35,344,2)
(42,168,2)
(107,259,2)
(32,358,2)
(169,60,2)
(158,334,2)
(0,60,2)
(183,67,2)
(108,54,2)
(292,323,2)
(1,361,2)
(306,21,2)
(191,77,2)
(290,344,2)
(306,160,2)
(360,344,2)
(247,126,2)
(7,103,2)
(103,28,2)
(164,12,2)
(352,375,2)
(318,426,2)
(185,159,2)
(176,179,2)
(81,344,2)
(183,60,2)
(75,119,2)
(157,411,2)
(151,60,2)
(191,101,2)
(364,106,2)
(39,109,2)
(32,89,2)
(32,422,2)
(168,261,2)
(367,103,2)
(233,344,2)
(298,265,2)
(156,261,2)
(402,6,2)
(46,103,2)
(183,77,2)
(196,93,2)
(216,103,2)
(280,60,2)
(235,45,2)
(269,76,2)
(36,76,2)
(294,103,2)
(349,244,2)
(66,265,2)
(198,344,2)
(145,344,2)
(11,88,2)
(273,344,2)
(238,361,2)
(248,60,2)
(11,60,2)
(263,45,2)
(21,45,2)
(371,11,2)
(197,103,2)
(23,179,2)
(235,331,2)
(82,179,2)
(60,45,2)
(358,103,2)
(391,31,2)
(202,168,2)
(24,76,2)
(291,265,2)
(396,76,2)
(253,119,2)
(201,76,2)
(59,179,2)
(425,60,2)
(89,402,2)
(246,344,2)
(252,244,2)
(350,45,2)
(239,244,2)
(421,205,2)
(267,344,2)
(88,60,2)
(188,45,2)
(68,60,2)
(179,220,2)
(253,60,2)
(164,196,2)
(121,244,2)
(4,45,2)
(17,185,2)
(242,60,2)
(106,365,2)
(45,168,2)
(303,168,2)
(171,210,2)
(220,60,2)
(31,265,2)
(324,168,2)
(108,244,2)
(25,361,2)
(158,60,2)
(347,0,2)
(103,111,2)
(188,361,2)
(111,331,2)
(262,361,2)
(265,344,2)
(228,60,2)
(377,368,2)
(272,60,2)
(225,76,2)
(263,365,2)
(325,45,2)
(364,329,2)
(277,168,2)
(32,303,2)
(60,103,2)
(22,344,2)
(61,60,2)
(32,245,2)
(285,265,2)
(169,224,2)
(390,60,2)
(170,261,2)
(0,361,2)
(30,223,2)
(324,185,2)
(165,375,2)
(243,60,2)
(254,60,2)
(333,60,2)
(352,361,2)
(364,365,2)
(53,175,2)
(28,111,2)
(322,179,2)
(258,412,2)
(154,344,2)
(287,185,2)
(21,160,2)
(208,336,2)
(430,375,2)
(131,215,2)
(282,160,2)
(179,119,2)
(73,60,2)
(297,261,2)
(262,160,2)
(117,368,2)
(380,179,2)
(34,368,2)
(410,192,2)
(164,179,2)
(164,199,2)
(47,199,2)
(57,111,2)
(229,244,2)
(307,60,2)
(6,257,2)
(28,350,2)
(265,45,2)
(23,52,2)
(119,339,2)
(216,361,2)
(369,331,2)
(136,111,2)
(164,41,2)
(251,76,2)
(174,60,2)
(261,124,2)
(209,60,2)
(314,81,2)
(245,81,2)
(151,361,2)
(97,375,2)
(129,179,2)
(164,329,2)
(67,60,2)
(410,100,2)
(175,179,2)
(164,263,2)
(224,361,2)
(347,60,2)
(327,344,2)
(175,361,2)
(255,103,2)
(396,50,2)
(47,263,2)
(431,179,2)
(319,103,2)
(77,253,2)
(274,60,2)
(202,361,2)
(52,179,2)
(108,375,2)
(350,111,2)
(153,157,2)
(77,60,2)
(300,111,2)
(411,81,2)
(357,60,2)
(181,261,2)
(106,195,2)
(346,179,2)
(131,257,2)
(386,103,2)
(293,265,2)
(411,361,2)
(355,168,2)
(5,81,2)
(356,60,2)
(212,60,2)
(363,60,2)
(132,208,2)
(199,244,2)
(209,361,2)
(12,23,2)
(163,168,2)
(284,179,2)
(179,60,2)
(245,115,2)
(358,319,2)
(339,45,2)
(342,160,2)
(304,60,2)
(199,370,2)
(420,361,2)
(296,60,2)
(230,368,2)
(53,179,2)
(50,76,2)
(237,103,2)
(244,361,2)
(375,4,2)
(159,86,2)
(240,32,2)
(94,179,2)
(214,103,2)
(329,317,2)
(288,109,2)
(44,252,2)
(32,217,2)
(365,244,2)
(87,156,2)
(52,361,2)
(287,168,2)
(28,190,2)
(25,179,2)
(137,103,2)
(330,361,2)
(270,168,2)
(58,60,2)
(2,402,2)
(313,265,2)
(103,331,2)
(240,247,2)
(410,290,2)
(88,347,2)
(217,261,2)
(143,244,2)
(423,375,2)
(185,109,2)
(12,179,2)
(54,286,2)
(334,60,2)
(409,244,2)
(277,185,2)
(203,81,2)
(3,223,2)
(343,244,2)
(104,111,2)
(257,81,2)
(47,75,2)
-----------------------------------
(0,wq->rq)
(1,create_read_req_cqe(wq, hw_cqe, &read_cqe)
(2,goto skip_cqe;)
(3,cq->cqid)
(4,CQE_STATUS(hw_cqe)
(5,wq)
(6,CQE_OPCODE(hw_cqe)
(7,cq)
(8,hw_cqe)
(9,rq)
(10,wq)
(11,wq->rq.sw_rq[wq->rq.cidx].wr_id)
(12,wq->sq.size + idx - wq->sq.cidx)
(13,cookie)
(14,wq)
(15,hw_cqe)
(16,goto skip_cqe;)
(17,hw_cqe)
(18,ret)
(19,hw_cqe)
(20,CQE_WRID_SQ_IDX(hw_cqe)
(21,CQE_STATUS(hw_cqe)
(22,hw_cqe)
(23,wq->sq.size)
(24,*hw_cqe)
(25,wq->sq)
(26,wq)
(27,hw_cqe)
(28,CQE_WRID_SQ_IDX(hw_cqe)
(29,cqe)
(30,t4_next_cqe(cq, &hw_cqe)
(31,cq->cqid)
(32,return ret;)
(33,CQE_TYPE(hw_cqe)
(34,ret)
(35,hw_cqe)
(36,*cqe)
(37,wq)
(38,wq)
(39,FW_RI_READ_RESP)
(40,if (CQE_STATUS(hw_cqe)
(41,*cqe_flushed)
(42,advance_oldest_read(wq)
(43,sw_sq)
(44,ret = -EAGAIN)
(45,hw_cqe = &read_cqe)
(46,wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)
(47,wq->sq.in_use -= idx - wq->sq.cidx)
(48,-EAGAIN)
(49,1)
(50,CQE_DRAIN_COOKIE(hw_cqe)
(51,t4_hwcq_consume(cq)
(52,wq->sq)
(53,wq->sq.in_use)
(54,CQE_WRID_MSN(hw_cqe)
(55,wq->sq.sw_sq)
(56,hw_cqe)
(57,wq->sq)
(58,wq)
(59,sq)
(60,SQ_TYPE(hw_cqe)
(61,wq)
(62,wq->sq.cidx)
(63,if (CQE_WRID_STAG(hw_cqe)
(64,"cq %p cqid 0x%x skip hw cqe cidx %u\\n")
(65,signaled)
(66,cq)
(67,wq->sq)
(68,cidx)
(69,*cookie = wq->sq.sw_sq[wq->sq.cidx].wr_id)
(70,cookie)
(71,ret)
(72,CQE_OPCODE(hw_cqe)
(73,wr_id)
(74,goto flush_wq;)
(75,idx - wq->sq.cidx)
(76,DRAIN_CQE(hw_cqe)
(77,wq->sq.cidx = (uint16_t)
(78,wq)
(79,hw_cqe)
(80,cidx)
(81,wq == NULL)
(82,idx)
(83,flushed)
(84,if (wq->flushed && !SW_CQE(hw_cqe)
(85,swsqe->cqe)
(86,CQE_OPCODE(hw_cqe)
(87,t4_set_wq_in_error(wq)
(88,wq->rq.sw_rq[wq->rq.cidx])
(89,ret = -EAGAIN)
(90,swsqe)
(91,goto skip_cqe;)
(92,CQE_STATUS(hw_cqe)
(93,u32 *credit)
(94,sq)
(95,pr_debug("completing sq idx %u\\n", wq->sq.cidx)
(96,sq)
(97,msn)
(98,cq)
(99,if (CQE_OPCODE(hw_cqe)
(100,CQE_OVFBIT(hw_cqe)
(101,wq->sq)
(102,if (wq == NULL)
(103,!SW_CQE(hw_cqe)
(104,hw_cqe)
(105,ret)
(106,cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN)
(107,swsqe->cqe = *hw_cqe)
(108,!CQE_STATUS(hw_cqe)
(109,RQ_TYPE(hw_cqe)
(110,hw_cqe)
(111,!SW_CQE(hw_cqe)
(112,if (c4iw_wr_log)
(113,ret)
(114,if (!wq->sq.oldest_read->signaled)
(115,-EAGAIN)
(116,)
(117,goto skip_cqe;)
(118,wq)
(119,idx = CQE_WRID_SQ_IDX(hw_cqe)
(120,*cqe = *hw_cqe)
(121,ret)
(122,wq)
(123,if (CQE_STATUS(hw_cqe)
(124,CQE_WRID_STAG(hw_cqe)
(125,wq->sq.cidx)
(126,ret = t4_next_cqe(cq, &hw_cqe)
(127,1)
(128,in_use)
(129,size)
(130,idx)
(131,ret = -EAGAIN)
(132,swsqe->complete)
(133,EAGAIN)
(134,header)
(135,hw_cqe)
(136,sq)
(137,complete)
(138,ret)
(139,idx)
(140,-EAGAIN)
(141,wq)
(142,wq->sq)
(143,goto proc_cqe;)
(144,credit)
(145,hw_cqe)
(146,if (t4_rq_empty(wq)
(147,if (SQ_TYPE(hw_cqe)
(148,&hw_cqe)
(149,)
(150,hw_cqe)
(151,wq->sq)
(152,hw_cqe)
(153,!SW_CQE(hw_cqe)
(154,NULL)
(155,if (CQE_TYPE(hw_cqe)
(156,CQE_STATUS(hw_cqe)
(157,SW_CQE(hw_cqe)
(158,pr_debug("completing rq idx %u\\n", wq->rq.cidx)
(159,CQE_OPCODE(hw_cqe)
(160,CQE_STATUS(hw_cqe)
(161,*cqe_flushed = 0)
(162,idx)
(163,&read_cqe)
(164,wq->sq.in_use -= wq->sq.size + idx - wq->sq.cidx)
(165,rq)
(166,goto skip_cqe;)
(167,*cookie)
(168,!wq->sq.oldest_read->signaled)
(169,wq->sq.cidx)
(170,ret)
(171,wq->sq.oldest_read)
(172,cqe_flushed)
(173,wq)
(174,*cookie)
(175,wq->sq)
(176,wq)
(177,cq)
(178,)
(179,idx < wq->sq.cidx)
(180,uint16_t)
(181,wq->sq.oldest_read->signaled)
(182,ret)
(183,wq->sq.cidx)
(184,T4_ERR_MSN)
(185,RQ_TYPE(hw_cqe)
(186,cq)
(187,oldest_read)
(188,c4iw_log_wr_stats(wq, hw_cqe)
(189,0)
(190,wq->sq.cidx)
(191,wq->sq.cidx)
(192,CQE_WRID_HI(hw_cqe)
(193,if (SW_CQE(hw_cqe)
(194,)
(195,CQE_STATUS_V(T4_ERR_MSN)
(196,*credit)
(197,sq)
(198,CQE_TYPE(hw_cqe)
(199,*cqe)
(200,)
(201,hw_cqe)
(202,advance_oldest_read(wq)
(203,EAGAIN)
(204,goto skip_cqe;)
(205,wq->sq)
(206,if (c4iw_wr_log)
(207,if (ret)
(208,swsqe = &wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)
(209,wq->rq)
(210,wq->sq)
(211,c4iw_wr_log)
(212,wq)
(213,t4_set_wq_in_error(wq)
(214,swsqe->complete = 1)
(215,-EAGAIN)
(216,flush_completed_wrs(wq, cq)
(217,ret = -EAGAIN)
(218,read_cqe)
(219,if (!SW_CQE(hw_cqe)
(220,wq->sq.cidx)
(221,wq)
(222,cq)
(223,struct t4_cq *cq)
(224,wq->sq)
(225,cqe)
(226,)
(227,idx - wq->sq.cidx)
(228,rq)
(229,hw_cqe)
(230,EAGAIN)
(231,EAGAIN)
(232,if (RQ_TYPE(hw_cqe)
(233,"CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\\n")
(234,cq->cidx)
(235,SW_CQE(hw_cqe)
(236,wq)
(237,hw_cqe)
(238,t4_wq_in_error(wq)
(239,*hw_cqe)
(240,RET)
(241,)
(242,wq->sq.sw_sq[wq->sq.cidx])
(243,sq)
(244,t4_rq_empty(wq)
(245,ret = -EAGAIN)
(246,hw_cqe)
(247,return ret;)
(248,wq->rq)
(249,cidx)
(250,wq)
(251,hw_cqe)
(252,-EAGAIN)
(253,(uint16_t)
(254,sq)
(255,swsqe)
(256,sq)
(257,wq->flushed && !SW_CQE(hw_cqe)
(258,*cookie)
(259,*hw_cqe)
(260,hw_cqe)
(261,CQE_WRID_STAG(hw_cqe)
(262,t4_set_wq_in_error(wq)
(263,hw_cqe->header)
(264,hw_cqe)
(265,SW_CQE(hw_cqe)
(266,)
(267,hw_cqe)
(268,read_cqe)
(269,goto skip_cqe;)
(270,wq)
(271,if (RQ_TYPE(hw_cqe)
(272,wr_id)
(273,hw_cqe)
(274,t4_rq_consume(wq)
(275,sq)
(276,EAGAIN)
(277,hw_cqe)
(278,0)
(279,hw_cqe)
(280,cidx)
(281,-EAGAIN)
(282,cqe_flushed)
(283,)
(284,wq->sq)
(285,cq)
(286,wq->rq.msn)
(287,hw_cqe)
(288,hw_cqe)
(289,hw_cqe)
(290,CQE_GENBIT(hw_cqe)
(291,cqid)
(292,hw_cqe)
(293,cqid)
(294,pr_debug("out of order completion going in sw_sq at idx %u\\n",\n\\n\\t\\t\\t CQE_WRID_SQ_IDX(hw_cqe)
(295,hw_cqe)
(296,wq->sq.sw_sq[wq->sq.cidx].wr_id)
(297,wq)
(298,"cq %p cqid 0x%x skip sw cqe cidx %u\\n")
(299,cq)
(300,cidx)
(301,sq)
(302,wq)
(303,ret = -EAGAIN)
(304,"completing sq idx %u\\n")
(305,wq)
(306,CQE_STATUS(hw_cqe)
(307,sw_sq)
(308,sw_cidx)
(309,CQE_LEN(hw_cqe)
(310,)
(311,wq)
(312,if (CQE_STATUS(hw_cqe)
(313,cidx)
(314,ret)
(315,cidx)
(316,swsqe)
(317,u8 *cqe_flushed)
(318,pr_debug("cq %p cqid 0x%x skip sw cqe cidx %u\\n",\n\\n\\t\\t\\t cq, cq->cqid, cq->sw_cidx)
(319,-EAGAIN)
(320,wq)
(321,goto skip_cqe;)
(322,sq)
(323,c4iw_wr_log)
(324,CQE_STATUS(hw_cqe)
(325,CQE_WRID_MSN(hw_cqe)
(326,idx)
(327,CQE_QPID(hw_cqe)
(328,cidx)
(329,*cqe_flushed)
(330,t4_set_wq_in_error(wq)
(331,RQ_TYPE(hw_cqe)
(332,wq)
(333,wq)
(334,wq->rq.cidx)
(335,-EAGAIN)
(336,&wq->sq.sw_sq[CQE_WRID_SQ_IDX(hw_cqe)
(337,if (DRAIN_CQE(hw_cqe)
(338,)
(339,CQE_WRID_SQ_IDX(hw_cqe)
(340,)
(341,"out of order completion going in sw_sq at idx %u\\n")
(342,*cqe_flushed = (CQE_STATUS(hw_cqe)
(343,wq)
(344,ret)
(345,wq)
(346,wq)
(347,wq->rq.cidx)
(348,sq)
(349,goto skip_cqe;)
(350,CQE_WRID_SQ_IDX(hw_cqe)
(351,idx)
(352,wq->rq)
(353,"completing rq idx %u\\n")
(354,hw_cqe)
(355,EAGAIN)
(356,rq)
(357,sw_rq)
(358,ret = -EAGAIN)
(359,ret)
(360,CQE_WRID_LOW(hw_cqe)
(361,struct t4_wq *wq)
(362,EAGAIN)
(363,wq)
(364,hw_cqe->header |= cpu_to_be32(CQE_STATUS_V(T4_ERR_MSN)
(365,unlikely(!CQE_STATUS(hw_cqe)
(366,hw_cqe)
(367,wq)
(368,CQE_TYPE(hw_cqe)
(369,hw_cqe)
(370,struct t4_cqe *cqe)
(371,*cookie = wq->rq.sw_rq[wq->rq.cidx].wr_id)
(372,sq)
(373,wq->sq.in_use)
(374,wq)
(375,!CQE_STATUS(hw_cqe)
(376,)
(377,CQE_STATUS(hw_cqe)
(378,)
(379,1)
(380,cidx)
(381,)
(382,t4_swcq_consume(cq)
(383,wq->sq)
(384,)
(385,)
(386,CQE_WRID_SQ_IDX(hw_cqe)
(387,proc_cqe:)
(388,skip_cqe:)
(389,ret = 0)
(390,wq)
(391,pr_debug("cq %p cqid 0x%x skip hw cqe cidx %u\\n",\n\\n\\t\\t\\t cq, cq->cqid, cq->cidx)
(392,)
(393,FW_RI_TERMINATE)
(394,*credit = 0)
(395,swsqe)
(396,*cookie = CQE_DRAIN_COOKIE(hw_cqe)
(397,hw_cqe)
(398,T4_ERR_SWFLUSH)
(399,hw_cqe)
(400,if (unlikely(!CQE_STATUS(hw_cqe)
(401,wq->rq.sw_rq)
(402,CQE_OPCODE(hw_cqe)
(403,hw_cqe)
(404,hw_cqe)
(405,ret)
(406,cqe)
(407,cq)
(408,&read_cqe)
(409,t4_set_wq_in_error(wq)
(410,pr_debug("CQE OVF %u qpid 0x%0x genbit %u type %u status 0x%0x opcode 0x%0x len 0x%0x wrid_hi_stag 0x%x wrid_low_msn 0x%x\\n",\n\\n\\t\\t CQE_OVFBIT(hw_cqe)
(411,wq->flushed)
(412,u64 *cookie)
(413,0)
(414,read_cqe)
(415,EAGAIN)
(416,*cqe = *hw_cqe)
(417,if (idx < wq->sq.cidx)
(418,hw_cqe)
(419,hw_cqe)
(420,c4iw_log_wr_stats(wq, hw_cqe)
(421,wq->sq.sw_sq)
(422,ret = -EAGAIN)
(423,wq)
(424,t4_sq_consume(wq)
(425,cookie)
(426,cq->sw_cidx)
(427,ret)
(428,flush_wq:)
(429,cq)
(430,hw_cqe)
(431,cidx)
(432,in_use)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^