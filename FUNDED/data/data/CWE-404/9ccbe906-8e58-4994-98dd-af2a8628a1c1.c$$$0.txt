-----label-----
1
-----code-----
int arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,
		 void *cpu_addr, dma_addr_t handle, size_t size,
		 struct dma_attrs *attrs)
{
	unsigned long pfn = dma_to_pfn(dev, handle);
	struct page *page;
	int ret;

	/* If the PFN is not valid, we do not have a struct page */
	if (!pfn_valid(pfn))
		return -ENXIO;

	page = pfn_to_page(pfn);

	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
	if (unlikely(ret))
		return ret;

	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
38,39
38,40
38,41
38,42
38,43
38,44
38,45
38,46
38,47
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
45,48
46,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
71,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
89,90
91,92
94,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
105,106
106,107
106,108
106,109
106,110
106,111
107,108
109,110
109,111
110,111
113,114
115,116
115,117
116,117
118,119
121,122
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,24,26,29,31,34,36,37,41,43,47,49,51,55,57,58,61,63,68,70,74,78,81,83,87,90,92,93,95,99,101,104,108,111,112,114,117,119,120,122
-----computeFrom-----
76,77
76,78
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,		 void *cpu_addr, dma_addr_t handle, size_t size,		 struct dma_attrs *attrs){	unsigned long pfn = dma_to_pfn(dev, handle);	struct page *page;	int ret;	/* If the PFN is not valid, we do not have a struct page */	if (!pfn_valid(pfn))		return -ENXIO;	page = pfn_to_page(pfn);	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);	if (unlikely(ret))		return ret;	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);	return 0;}
int
arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,		 void *cpu_addr, dma_addr_t handle, size_t size,		 struct dma_attrs *attrs)
arm_dma_get_sgtable
struct device *dev
struct device
device
*dev
*
dev
struct sg_table *sgt
struct sg_table
sg_table
*sgt
*
sgt
void *cpu_addr
void
*cpu_addr
*
cpu_addr
dma_addr_t handle
dma_addr_t
dma_addr_t
handle
handle
size_t size
size_t
size_t
size
size
struct dma_attrs *attrs
struct dma_attrs
dma_attrs
*attrs
*
attrs
{	unsigned long pfn = dma_to_pfn(dev, handle);	struct page *page;	int ret;	/* If the PFN is not valid, we do not have a struct page */	if (!pfn_valid(pfn))		return -ENXIO;	page = pfn_to_page(pfn);	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);	if (unlikely(ret))		return ret;	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);	return 0;}
unsigned long pfn = dma_to_pfn(dev, handle);
unsigned long pfn = dma_to_pfn(dev, handle);
unsigned long
pfn = dma_to_pfn(dev, handle)
pfn
= dma_to_pfn(dev, handle)
dma_to_pfn(dev, handle)
dma_to_pfn
dma_to_pfn
dev
dev
handle
handle
struct page *page;
struct page *page;
struct page
page
*page
*
page
int ret;
int ret;
int
ret
ret
if (!pfn_valid(pfn))		return -ENXIO;
!pfn_valid(pfn)
pfn_valid(pfn)
pfn_valid
pfn_valid
pfn
pfn
return -ENXIO;
-ENXIO
ENXIO
ENXIO
page = pfn_to_page(pfn);
page = pfn_to_page(pfn)
page
page
pfn_to_page(pfn)
pfn_to_page
pfn_to_page
pfn
pfn
ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
ret = sg_alloc_table(sgt, 1, GFP_KERNEL)
ret
ret
sg_alloc_table(sgt, 1, GFP_KERNEL)
sg_alloc_table
sg_alloc_table
sgt
sgt
1
GFP_KERNEL
GFP_KERNEL
if (unlikely(ret))		return ret;
unlikely(ret)
unlikely
unlikely
ret
ret
return ret;
ret
ret
sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);
sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0)
sg_set_page
sg_set_page
sgt->sgl
sgt
sgt
sgl
page
page
PAGE_ALIGN(size)
PAGE_ALIGN
PAGE_ALIGN
size
size
0
return 0;
0
-----joern-----
(43,35,0)
(16,31,0)
(32,21,0)
(18,16,0)
(28,1,0)
(1,43,0)
(24,35,0)
(12,35,0)
(40,29,0)
(37,1,0)
(31,16,0)
(0,35,0)
(29,16,0)
(36,4,0)
(1,38,0)
(2,7,0)
(40,5,0)
(38,1,0)
(7,35,0)
(15,16,0)
(4,34,0)
(10,7,0)
(23,28,0)
(13,18,0)
(14,31,0)
(2,43,0)
(41,28,0)
(21,35,0)
(4,7,0)
(1,28,0)
(3,6,0)
(31,9,0)
(45,35,0)
(30,4,0)
(40,21,0)
(25,17,0)
(8,31,0)
(16,35,0)
(19,1,0)
(25,7,0)
(33,38,0)
(22,35,0)
(20,25,0)
(7,4,0)
(42,29,0)
(27,31,0)
(38,39,0)
(4,44,0)
(6,5,0)
(17,25,0)
(1,35,0)
(26,43,0)
(43,2,0)
(28,9,0)
(11,2,0)
(18,13,1)
(33,19,1)
(1,43,1)
(32,1,1)
(29,16,1)
(25,20,1)
(28,9,1)
(42,18,1)
(17,25,1)
(40,29,1)
(38,39,1)
(40,5,1)
(13,16,1)
(38,33,1)
(1,38,1)
(3,17,1)
(28,23,1)
(18,16,1)
(36,30,1)
(27,8,1)
(1,28,1)
(2,7,1)
(25,7,1)
(5,6,1)
(14,15,1)
(4,44,1)
(11,26,1)
(4,36,1)
(1,37,1)
(23,41,1)
(6,3,1)
(29,42,1)
(43,2,1)
(30,10,1)
(21,32,1)
(7,4,1)
(19,28,1)
(40,21,1)
(20,7,1)
(26,17,1)
(4,34,1)
(8,14,1)
(2,11,1)
(15,43,1)
(31,27,1)
(41,18,1)
(37,38,1)
(16,31,1)
(31,9,1)
(28,18,2)
(18,16,2)
(43,2,2)
(3,17,2)
(2,7,2)
(40,5,2)
(1,18,2)
(1,28,2)
(13,17,2)
(1,43,2)
(2,17,2)
(6,17,2)
(21,18,2)
(19,18,2)
(14,17,2)
(42,18,2)
(4,34,2)
(29,16,2)
(43,17,2)
(31,9,2)
(23,18,2)
(37,18,2)
(15,17,2)
(26,17,2)
(29,18,2)
(1,38,2)
(33,18,2)
(17,25,2)
(38,18,2)
(16,31,2)
(41,18,2)
(7,4,2)
(18,17,2)
(27,17,2)
(8,17,2)
(28,9,2)
(40,21,2)
(16,17,2)
(32,18,2)
(31,17,2)
(5,17,2)
(4,44,2)
(38,39,2)
(11,17,2)
(40,29,2)
(25,7,2)
-----------------------------------
(0,page)
(1,sg_set_page(sgt->sgl, page, PAGE_ALIGN(size)
(2,pfn_to_page(pfn)
(3,ENXIO)
(4,dma_to_pfn(dev, handle)
(5,return -ENXIO;)
(6,-ENXIO)
(7,pfn = dma_to_pfn(dev, handle)
(8,1)
(9,struct sg_table *sgt)
(10,pfn)
(11,pfn)
(12,if (!pfn_valid(pfn)
(13,ret)
(14,sgt)
(15,ret)
(16,ret = sg_alloc_table(sgt, 1, GFP_KERNEL)
(17,!pfn_valid(pfn)
(18,unlikely(ret)
(19,page)
(20,pfn)
(21,return 0;)
(22,if (unlikely(ret)
(23,sgl)
(24,pfn)
(25,pfn_valid(pfn)
(26,page)
(27,GFP_KERNEL)
(28,sgt->sgl)
(29,return ret;)
(30,dev)
(31,sg_alloc_table(sgt, 1, GFP_KERNEL)
(32,0)
(33,size)
(34,struct device *dev)
(35,)
(36,handle)
(37,0)
(38,PAGE_ALIGN(size)
(39,size_t size)
(40,RET)
(41,sgt)
(42,ret)
(43,page = pfn_to_page(pfn)
(44,dma_addr_t handle)
(45,ret)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^