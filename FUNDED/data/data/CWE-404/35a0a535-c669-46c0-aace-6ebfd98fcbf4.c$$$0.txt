-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
37,38
37,39
37,40
38,39
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,42,46,48,49
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
static void
goodG2B()
goodG2B
{    wchar_t * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
;
-----joern-----
(0,1,0)
(8,10,0)
(5,1,0)
(12,16,0)
(5,2,0)
(1,5,0)
(6,12,0)
(16,12,0)
(0,7,0)
(14,12,0)
(10,7,0)
(9,10,0)
(2,5,0)
(12,6,0)
(15,7,0)
(1,7,0)
(3,16,0)
(5,6,0)
(11,1,0)
(13,0,0)
(6,5,0)
(1,5,1)
(9,8,1)
(0,1,1)
(6,12,1)
(4,0,1)
(10,9,1)
(3,14,1)
(13,1,1)
(16,3,1)
(12,16,1)
(0,13,1)
(14,11,1)
(11,10,1)
(5,2,1)
(5,6,1)
(5,2,2)
(12,16,2)
(6,12,2)
(1,5,2)
(0,1,2)
(5,6,2)
-----------------------------------
(0,printWLine(data)
(1,data = (wchar_t *)
(2,wchar_t *)
(3,wchar_t)
(4,RET)
(5,(wchar_t *)
(6,ALLOCA(100*sizeof(wchar_t)
(7,)
(8,data)
(9,NULL)
(10,data = NULL)
(11,data)
(12,100*sizeof(wchar_t)
(13,data)
(14,100)
(15,data)
(16,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^