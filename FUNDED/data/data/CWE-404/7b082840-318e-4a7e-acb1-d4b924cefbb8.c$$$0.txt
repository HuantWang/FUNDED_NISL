-----label-----
0
-----code-----
static void __get_memory_limit(struct dm_bufio_client *c,
			       unsigned long *threshold_buffers,
			       unsigned long *limit_buffers)
{
	unsigned long buffers;

	if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {
		if (mutex_trylock(&dm_bufio_clients_lock)) {
			__cache_size_refresh();
			mutex_unlock(&dm_bufio_clients_lock);
		}
	}

	buffers = dm_bufio_cache_size_per_client >>
		  (c->sectors_per_block_bits + SECTOR_SHIFT);

	if (buffers < c->minimum_buffers)
		buffers = c->minimum_buffers;

	*limit_buffers = buffers;
	*threshold_buffers = mult_frac(buffers,
				       DM_BUFIO_WRITEBACK_PERCENT, 100);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
27,29
28,29
28,30
29,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
39,40
40,41
40,42
41,42
41,43
42,43
44,45
45,46
45,47
48,49
48,50
49,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
94,95
96,97
98,99
99,100
99,101
100,101
101,102
103,104
103,105
103,106
103,107
104,105
106,107
108,109
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,24,26,30,34,36,38,43,46,47,52,56,59,63,66,71,72,74,78,81,82,86,89,90,95,97,102,105,107,109,110
-----computeFrom-----
31,32
31,33
61,62
61,63
64,65
64,66
68,69
68,70
76,77
76,78
84,85
84,86
92,93
92,94
99,100
99,101
-----guardedBy-----
81,89
78,86
82,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void __get_memory_limit(struct dm_bufio_client *c,			       unsigned long *threshold_buffers,			       unsigned long *limit_buffers){	unsigned long buffers;	if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}	buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT);	if (buffers < c->minimum_buffers)		buffers = c->minimum_buffers;	*limit_buffers = buffers;	*threshold_buffers = mult_frac(buffers,				       DM_BUFIO_WRITEBACK_PERCENT, 100);}
static void
__get_memory_limit(struct dm_bufio_client *c,			       unsigned long *threshold_buffers,			       unsigned long *limit_buffers)
__get_memory_limit
struct dm_bufio_client *c
struct dm_bufio_client
dm_bufio_client
*c
*
c
unsigned long *threshold_buffers
unsigned long
*threshold_buffers
*
threshold_buffers
unsigned long *limit_buffers
unsigned long
*limit_buffers
*
limit_buffers
{	unsigned long buffers;	if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}	buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT);	if (buffers < c->minimum_buffers)		buffers = c->minimum_buffers;	*limit_buffers = buffers;	*threshold_buffers = mult_frac(buffers,				       DM_BUFIO_WRITEBACK_PERCENT, 100);}
unsigned long buffers;
unsigned long buffers;
unsigned long
buffers
buffers
if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}
unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)
unlikely
unlikely
ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch
ACCESS_ONCE(dm_bufio_cache_size)
ACCESS_ONCE
ACCESS_ONCE
dm_bufio_cache_size
dm_bufio_cache_size
dm_bufio_cache_size_latch
dm_bufio_cache_size_latch
{		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}
if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}
mutex_trylock(&dm_bufio_clients_lock)
mutex_trylock
mutex_trylock
(&dm_bufio_clients_lock)
&dm_bufio_clients_lock
&
dm_bufio_clients_lock
{			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}
__cache_size_refresh();
__cache_size_refresh()
__cache_size_refresh
__cache_size_refresh
mutex_unlock(&dm_bufio_clients_lock);
mutex_unlock(&dm_bufio_clients_lock)
mutex_unlock
mutex_unlock
&dm_bufio_clients_lock
dm_bufio_clients_lock
dm_bufio_clients_lock
buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT);
buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT)
buffers
buffers
dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT)
dm_bufio_cache_size_per_client
dm_bufio_cache_size_per_client
(c->sectors_per_block_bits + SECTOR_SHIFT)
c->sectors_per_block_bits + SECTOR_SHIFT
c->sectors_per_block_bits
c
c
sectors_per_block_bits
SECTOR_SHIFT
SECTOR_SHIFT
if (buffers < c->minimum_buffers)		buffers = c->minimum_buffers;
buffers < c->minimum_buffers
buffers
buffers
c->minimum_buffers
c
c
minimum_buffers
buffers = c->minimum_buffers;
buffers = c->minimum_buffers
buffers
buffers
c->minimum_buffers
c
c
minimum_buffers
*limit_buffers = buffers;
*limit_buffers = buffers
*limit_buffers
limit_buffers
limit_buffers
buffers
buffers
*threshold_buffers = mult_frac(buffers,				       DM_BUFIO_WRITEBACK_PERCENT, 100);
*threshold_buffers = mult_frac(buffers,				       DM_BUFIO_WRITEBACK_PERCENT, 100)
*threshold_buffers
threshold_buffers
threshold_buffers
mult_frac(buffers,				       DM_BUFIO_WRITEBACK_PERCENT, 100)
mult_frac
mult_frac
buffers
buffers
DM_BUFIO_WRITEBACK_PERCENT
DM_BUFIO_WRITEBACK_PERCENT
100
-----joern-----
(46,44,0)
(41,45,0)
(9,20,0)
(27,45,0)
(22,40,0)
(5,52,0)
(34,14,0)
(43,46,0)
(49,36,0)
(13,52,0)
(31,12,0)
(3,21,0)
(35,11,0)
(20,25,0)
(38,10,0)
(51,13,0)
(48,12,0)
(27,46,0)
(20,45,0)
(17,22,0)
(36,10,0)
(42,36,0)
(13,2,0)
(50,52,0)
(39,13,0)
(44,11,0)
(0,3,0)
(12,2,0)
(44,46,0)
(13,45,0)
(16,27,0)
(39,26,0)
(25,11,0)
(4,33,0)
(23,52,0)
(36,49,0)
(3,0,0)
(24,44,0)
(33,4,0)
(37,39,0)
(10,36,0)
(45,52,0)
(7,2,0)
(30,21,0)
(29,44,0)
(25,20,0)
(46,27,0)
(6,12,0)
(18,0,0)
(32,25,0)
(22,48,0)
(2,35,0)
(12,48,0)
(45,27,0)
(12,45,0)
(48,52,0)
(28,35,0)
(8,35,0)
(47,25,0)
(15,12,0)
(1,33,0)
(35,2,0)
(16,41,1)
(27,46,1)
(0,18,1)
(35,8,1)
(18,30,1)
(41,4,1)
(51,39,1)
(44,24,1)
(12,2,1)
(31,22,1)
(36,42,1)
(46,44,1)
(47,9,1)
(30,4,1)
(4,33,1)
(22,17,1)
(7,20,1)
(43,44,1)
(24,29,1)
(3,0,1)
(39,26,1)
(13,2,1)
(2,35,1)
(12,6,1)
(33,1,1)
(45,27,1)
(17,13,1)
(13,45,1)
(42,10,1)
(46,43,1)
(20,25,1)
(20,45,1)
(6,15,1)
(39,37,1)
(29,16,1)
(12,45,1)
(1,49,1)
(44,11,1)
(41,3,1)
(28,7,1)
(48,12,1)
(35,11,1)
(13,51,1)
(41,49,1)
(37,2,1)
(19,48,1)
(37,20,1)
(10,38,1)
(36,10,1)
(25,11,1)
(49,36,1)
(15,31,1)
(22,40,1)
(8,28,1)
(25,32,1)
(9,45,1)
(32,47,1)
(3,4,2)
(45,27,2)
(49,36,2)
(4,49,2)
(44,11,2)
(12,45,2)
(20,25,2)
(46,44,2)
(33,49,2)
(20,45,2)
(22,40,2)
(39,26,2)
(35,20,2)
(2,35,2)
(13,2,2)
(0,4,2)
(4,33,2)
(12,2,2)
(36,10,2)
(30,4,2)
(35,11,2)
(27,46,2)
(13,45,2)
(25,11,2)
(1,49,2)
(18,4,2)
(48,12,2)
(8,20,2)
(3,0,2)
(2,20,2)
(7,20,2)
(28,20,2)
-----------------------------------
(0,&dm_bufio_clients_lock)
(1,dm_bufio_clients_lock)
(2,buffers = c->minimum_buffers)
(3,mutex_unlock(&dm_bufio_clients_lock)
(4,mutex_trylock(&dm_bufio_clients_lock)
(5,if (buffers < c->minimum_buffers)
(6,100)
(7,buffers)
(8,minimum_buffers)
(9,buffers)
(10,ACCESS_ONCE(dm_bufio_cache_size)
(11,struct dm_bufio_client *c)
(12,mult_frac(buffers,\n\\n\\t\\t\\t\\t       DM_BUFIO_WRITEBACK_PERCENT, 100)
(13,*limit_buffers = buffers)
(14,)
(15,DM_BUFIO_WRITEBACK_PERCENT)
(16,dm_bufio_cache_size_per_client)
(17,threshold_buffers)
(18,dm_bufio_clients_lock)
(19,RET)
(20,buffers < c->minimum_buffers)
(21,)
(22,*threshold_buffers)
(23,if (unlikely(ACCESS_ONCE(dm_bufio_cache_size)
(24,sectors_per_block_bits)
(25,c->minimum_buffers)
(26,unsigned long *limit_buffers)
(27,dm_bufio_cache_size_per_client >>\n\\n\\t\\t  (c->sectors_per_block_bits + SECTOR_SHIFT)
(28,c)
(29,c)
(30,__cache_size_refresh()
(31,buffers)
(32,minimum_buffers)
(33,&dm_bufio_clients_lock)
(34,if (mutex_trylock(&dm_bufio_clients_lock)
(35,c->minimum_buffers)
(36,ACCESS_ONCE(dm_bufio_cache_size)
(37,limit_buffers)
(38,dm_bufio_cache_size)
(39,*limit_buffers)
(40,unsigned long *threshold_buffers)
(41,buffers)
(42,dm_bufio_cache_size_latch)
(43,SECTOR_SHIFT)
(44,c->sectors_per_block_bits)
(45,buffers = dm_bufio_cache_size_per_client >>\n\\n\\t\\t  (c->sectors_per_block_bits + SECTOR_SHIFT)
(46,c->sectors_per_block_bits + SECTOR_SHIFT)
(47,c)
(48,*threshold_buffers = mult_frac(buffers,\n\\n\\t\\t\\t\\t       DM_BUFIO_WRITEBACK_PERCENT, 100)
(49,unlikely(ACCESS_ONCE(dm_bufio_cache_size)
(50,buffers)
(51,buffers)
(52,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^