-----label-----
0
-----code-----
static ssize_t store_timer_rate(struct cpufreq_interactive_tunables *tunables,
		const char *buf, size_t count)
{
	int ret;
	unsigned long val, val_round;
	struct cpufreq_interactive_tunables *t;
	int cpu;

	ret = strict_strtoul(buf, 0, &val);
	if (ret < 0)
		return ret;

	val_round = jiffies_to_usecs(usecs_to_jiffies(val));
	if (val != val_round)
		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",
			val_round);
	tunables->timer_rate = val_round;

	if (!tunables->use_sched_load)
		return count;

	for_each_possible_cpu(cpu) {
		if (!per_cpu(polinfo, cpu))
			continue;
		t = per_cpu(polinfo, cpu)->cached_tunables;
		if (t && t->use_sched_load)
			t->timer_rate = val_round;
	}
	set_window_helper(tunables);

	return count;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
23,24
24,25
24,26
26,27
28,29
29,30
29,31
29,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
57,58
58,59
60,61
60,62
61,62
61,63
62,63
65,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
101,103
102,103
103,104
103,105
104,105
107,108
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
117,120
118,119
118,120
119,120
120,121
120,122
120,123
121,122
123,124
125,126
128,129
129,130
129,131
130,131
132,133
132,134
133,134
133,135
133,136
134,135
136,137
138,139
141,142
141,143
142,143
142,144
143,144
145,146
145,147
146,147
149,150
150,151
150,152
151,152
151,153
152,153
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
-----nextToken-----
3,5,8,10,11,13,15,16,19,21,25,27,30,32,34,38,40,41,44,46,50,53,55,56,59,63,64,67,71,74,77,79,83,85,89,90,92,97,98,100,105,106,109,113,115,122,124,126,127,131,135,137,139,140,144,147,148,153,154,156,160,162,165
-----computeFrom-----
48,49
48,50
61,62
61,63
69,70
69,71
81,82
81,83
94,95
94,96
129,130
129,131
142,143
142,144
150,151
150,152
-----guardedBy-----
63,67
85,92
147,153
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static ssize_t store_timer_rate(struct cpufreq_interactive_tunables *tunables,		const char *buf, size_t count){	int ret;	unsigned long val, val_round;	struct cpufreq_interactive_tunables *t;	int cpu;	ret = strict_strtoul(buf, 0, &val);	if (ret < 0)		return ret;	val_round = jiffies_to_usecs(usecs_to_jiffies(val));	if (val != val_round)		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);	tunables->timer_rate = val_round;	if (!tunables->use_sched_load)		return count;	for_each_possible_cpu(cpu) {		if (!per_cpu(polinfo, cpu))			continue;		t = per_cpu(polinfo, cpu)->cached_tunables;		if (t && t->use_sched_load)			t->timer_rate = val_round;	}	set_window_helper(tunables);	return count;}
static ssize_t
ssize_t
store_timer_rate(struct cpufreq_interactive_tunables *tunables,		const char *buf, size_t count)
store_timer_rate
struct cpufreq_interactive_tunables *tunables
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*tunables
*
tunables
const char *buf
const char
*buf
*
buf
size_t count
size_t
size_t
count
count
{	int ret;	unsigned long val, val_round;	struct cpufreq_interactive_tunables *t;	int cpu;	ret = strict_strtoul(buf, 0, &val);	if (ret < 0)		return ret;	val_round = jiffies_to_usecs(usecs_to_jiffies(val));	if (val != val_round)		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);	tunables->timer_rate = val_round;	if (!tunables->use_sched_load)		return count;	for_each_possible_cpu(cpu) {		if (!per_cpu(polinfo, cpu))			continue;		t = per_cpu(polinfo, cpu)->cached_tunables;		if (t && t->use_sched_load)			t->timer_rate = val_round;	}	set_window_helper(tunables);	return count;}
int ret;
int ret;
int
ret
ret
unsigned long val, val_round;
unsigned long val, val_round;
unsigned long
val
val
val_round
val_round
struct cpufreq_interactive_tunables *t;
struct cpufreq_interactive_tunables *t;
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*t
*
t
int cpu;
int cpu;
int
cpu
cpu
ret = strict_strtoul(buf, 0, &val);
ret = strict_strtoul(buf, 0, &val)
ret
ret
strict_strtoul(buf, 0, &val)
strict_strtoul
strict_strtoul
buf
buf
0
&val
val
val
if (ret < 0)		return ret;
ret < 0
ret
ret
0
return ret;
ret
ret
val_round = jiffies_to_usecs(usecs_to_jiffies(val));
val_round = jiffies_to_usecs(usecs_to_jiffies(val))
val_round
val_round
jiffies_to_usecs(usecs_to_jiffies(val))
jiffies_to_usecs
jiffies_to_usecs
usecs_to_jiffies(val)
usecs_to_jiffies
usecs_to_jiffies
val
val
if (val != val_round)		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);
val != val_round
val
val
val_round
val_round
pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);
pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round)
pr_warn
pr_warn
"timer_rate not aligned to jiffy. Rounded up to %lu\n"
val_round
val_round
tunables->timer_rate = val_round;
tunables->timer_rate = val_round
tunables->timer_rate
tunables
tunables
timer_rate
val_round
val_round
if (!tunables->use_sched_load)		return count;
!tunables->use_sched_load
tunables->use_sched_load
tunables
tunables
use_sched_load
return count;
count
count
for_each_possible_cpu(cpu)
for_each_possible_cpu(cpu)
for_each_possible_cpu
for_each_possible_cpu
cpu
cpu
)
{		if (!per_cpu(polinfo, cpu))			continue;		t = per_cpu(polinfo, cpu)->cached_tunables;		if (t && t->use_sched_load)			t->timer_rate = val_round;	}
if (!per_cpu(polinfo, cpu))			continue;
!per_cpu(polinfo, cpu)
per_cpu(polinfo, cpu)
per_cpu
per_cpu
polinfo
polinfo
cpu
cpu
continue;
t = per_cpu(polinfo, cpu)->cached_tunables;
t = per_cpu(polinfo, cpu)->cached_tunables
t
t
per_cpu(polinfo, cpu)->cached_tunables
per_cpu(polinfo, cpu)
per_cpu
per_cpu
polinfo
polinfo
cpu
cpu
cached_tunables
if (t && t->use_sched_load)			t->timer_rate = val_round;
t && t->use_sched_load
t
t
t->use_sched_load
t
t
use_sched_load
t->timer_rate = val_round;
t->timer_rate = val_round
t->timer_rate
t
t
timer_rate
val_round
val_round
set_window_helper(tunables);
set_window_helper(tunables)
set_window_helper
set_window_helper
tunables
tunables
return count;
count
count
-----joern-----
(28,56,0)
(61,44,0)
(23,12,0)
(63,14,0)
(30,12,0)
(44,38,0)
(33,51,0)
(8,60,0)
(43,47,0)
(57,51,0)
(45,35,0)
(29,71,0)
(70,74,0)
(12,32,0)
(24,32,0)
(69,51,0)
(39,24,0)
(65,1,0)
(5,69,0)
(41,14,0)
(27,51,0)
(2,69,0)
(50,24,0)
(21,11,0)
(31,5,0)
(15,56,0)
(74,70,0)
(19,2,0)
(18,60,0)
(42,32,0)
(32,51,0)
(12,59,0)
(13,1,0)
(26,2,0)
(12,11,0)
(41,51,0)
(73,74,0)
(67,40,0)
(32,12,0)
(64,51,0)
(69,3,0)
(3,69,0)
(54,69,0)
(71,49,0)
(64,69,0)
(60,51,0)
(9,51,0)
(6,49,0)
(52,47,0)
(38,47,0)
(3,34,0)
(16,64,0)
(20,38,0)
(10,63,0)
(50,71,0)
(53,5,0)
(47,38,0)
(1,44,0)
(1,0,0)
(0,1,0)
(7,41,0)
(25,34,0)
(22,74,0)
(72,44,0)
(66,51,0)
(4,51,0)
(34,3,0)
(48,56,0)
(62,63,0)
(6,51,0)
(35,32,0)
(68,51,0)
(74,14,0)
(11,12,0)
(44,60,0)
(56,28,0)
(72,40,0)
(55,6,0)
(50,6,0)
(40,69,0)
(17,72,0)
(58,72,0)
(75,51,0)
(63,64,0)
(36,35,0)
(46,0,0)
(38,44,0)
(0,44,0)
(72,17,1)
(19,26,1)
(5,53,1)
(40,69,1)
(2,69,1)
(35,45,1)
(58,0,1)
(7,0,1)
(17,58,1)
(46,44,1)
(38,20,1)
(25,54,1)
(7,40,1)
(1,44,1)
(69,3,1)
(0,46,1)
(23,30,1)
(32,12,1)
(43,61,1)
(50,24,1)
(38,47,1)
(62,5,1)
(71,29,1)
(45,36,1)
(2,19,1)
(11,21,1)
(35,32,1)
(28,56,1)
(10,62,1)
(39,35,1)
(29,70,1)
(3,34,1)
(13,46,1)
(15,48,1)
(44,38,1)
(71,49,1)
(22,73,1)
(30,42,1)
(55,41,1)
(67,72,1)
(24,32,1)
(12,59,1)
(21,23,1)
(56,15,1)
(65,13,1)
(73,64,1)
(74,22,1)
(0,1,1)
(61,28,1)
(5,69,1)
(1,65,1)
(6,55,1)
(64,16,1)
(41,14,1)
(50,71,1)
(52,43,1)
(24,39,1)
(72,44,1)
(63,14,1)
(6,49,1)
(41,7,1)
(0,44,1)
(37,28,1)
(64,69,1)
(31,2,1)
(62,2,1)
(53,31,1)
(63,10,1)
(74,14,1)
(16,63,1)
(70,74,1)
(26,69,1)
(20,47,1)
(50,6,1)
(34,25,1)
(40,67,1)
(12,11,1)
(47,52,1)
(48,70,1)
(54,35,1)
(61,37,1)
(36,32,1)
(2,69,2)
(5,69,2)
(61,70,2)
(28,56,2)
(38,70,2)
(52,70,2)
(73,35,2)
(41,14,2)
(12,59,2)
(17,0,2)
(63,14,2)
(53,2,2)
(29,70,2)
(16,35,2)
(70,35,2)
(13,46,2)
(64,69,2)
(1,46,2)
(25,35,2)
(43,70,2)
(22,35,2)
(71,49,2)
(6,70,2)
(0,1,2)
(5,2,2)
(41,70,2)
(40,69,2)
(65,46,2)
(15,70,2)
(72,0,2)
(28,70,2)
(50,6,2)
(6,49,2)
(55,70,2)
(69,3,2)
(47,70,2)
(20,70,2)
(50,24,2)
(46,70,2)
(44,38,2)
(40,0,2)
(67,0,2)
(64,35,2)
(0,44,2)
(7,70,2)
(38,47,2)
(56,70,2)
(32,12,2)
(26,35,2)
(72,44,2)
(31,2,2)
(74,14,2)
(12,11,2)
(62,35,2)
(71,70,2)
(10,35,2)
(0,70,2)
(37,28,2)
(50,71,2)
(48,70,2)
(69,35,2)
(24,32,2)
(24,35,2)
(58,0,2)
(34,35,2)
(74,35,2)
(3,34,2)
(44,70,2)
(54,35,2)
(70,74,2)
(3,35,2)
(63,35,2)
(35,32,2)
(1,44,2)
(2,35,2)
(19,35,2)
(39,35,2)
-----------------------------------
(0,t && t->use_sched_load)
(1,t->use_sched_load)
(2,val != val_round)
(3,jiffies_to_usecs(usecs_to_jiffies(val)
(4,cpu)
(5,pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\\n",\n\\n\\t\\t\\tval_round)
(6,return count;)
(7,tunables)
(8,if (!per_cpu(polinfo, cpu)
(9,if (!tunables->use_sched_load)
(10,timer_rate)
(11,&val)
(12,strict_strtoul(buf, 0, &val)
(13,t)
(14,struct cpufreq_interactive_tunables *tunables)
(15,cpu)
(16,val_round)
(17,timer_rate)
(18,if (t && t->use_sched_load)
(19,val_round)
(20,cached_tunables)
(21,val)
(22,use_sched_load)
(23,0)
(24,return ret;)
(25,val)
(26,val)
(27,val)
(28,!per_cpu(polinfo, cpu)
(29,count)
(30,buf)
(31,"timer_rate not aligned to jiffy. Rounded up to %lu\\n")
(32,ret = strict_strtoul(buf, 0, &val)
(33,if (val != val_round)
(34,usecs_to_jiffies(val)
(35,ret < 0)
(36,ret)
(37,continue;)
(38,per_cpu(polinfo, cpu)
(39,ret)
(40,t->timer_rate = val_round)
(41,set_window_helper(tunables)
(42,ret)
(43,polinfo)
(44,t = per_cpu(polinfo, cpu)
(45,0)
(46,t)
(47,per_cpu(polinfo, cpu)
(48,polinfo)
(49,size_t count)
(50,RET)
(51,)
(52,cpu)
(53,val_round)
(54,val_round)
(55,count)
(56,per_cpu(polinfo, cpu)
(57,t)
(58,t)
(59,const char *buf)
(60,)
(61,t)
(62,tunables)
(63,tunables->timer_rate)
(64,tunables->timer_rate = val_round)
(65,use_sched_load)
(66,if (ret < 0)
(67,val_round)
(68,val_round)
(69,val_round = jiffies_to_usecs(usecs_to_jiffies(val)
(70,!tunables->use_sched_load)
(71,return count;)
(72,t->timer_rate)
(73,tunables)
(74,tunables->use_sched_load)
(75,ret)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^