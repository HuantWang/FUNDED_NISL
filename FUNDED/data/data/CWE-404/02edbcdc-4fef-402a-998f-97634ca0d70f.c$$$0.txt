-----label-----
1
-----code-----
static void pnp_clean_resource_table(struct pnp_resource_table * res)
{
	int idx;
	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {
		if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO))
			continue;
		res->irq_resource[idx].start = -1;
		res->irq_resource[idx].end = -1;
		res->irq_resource[idx].flags = IORESOURCE_AUTO;
	}
	for (idx = 0; idx < PNP_MAX_DMA; idx++) {
		if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO))
			continue;
		res->dma_resource[idx].start = -1;
		res->dma_resource[idx].end = -1;
		res->dma_resource[idx].flags = IORESOURCE_AUTO;
	}
	for (idx = 0; idx < PNP_MAX_PORT; idx++) {
		if (!(res->port_resource[idx].flags & IORESOURCE_AUTO))
			continue;
		res->port_resource[idx].start = 0;
		res->port_resource[idx].end = 0;
		res->port_resource[idx].flags = IORESOURCE_AUTO;
	}
	for (idx = 0; idx < PNP_MAX_MEM; idx++) {
		if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO))
			continue;
		res->mem_resource[idx].start = 0;
		res->mem_resource[idx].end = 0;
		res->mem_resource[idx].flags = IORESOURCE_AUTO;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
15,16
17,18
17,19
17,20
17,21
18,19
19,20
19,21
20,21
23,24
23,25
24,25
26,27
28,29
29,30
31,32
31,33
31,34
31,35
32,33
32,34
33,34
34,35
35,36
35,37
36,37
36,38
37,38
37,39
38,39
38,40
39,40
42,43
45,46
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
52,54
53,54
56,57
59,60
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
65,67
66,67
69,70
72,73
74,75
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
79,80
82,83
85,86
87,88
87,89
87,90
87,91
88,89
89,90
89,91
90,91
93,94
93,95
94,95
96,97
98,99
99,100
101,102
101,103
101,104
101,105
102,103
102,104
103,104
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
109,110
112,113
115,116
118,119
119,120
119,121
120,121
120,122
121,122
121,123
122,123
122,124
123,124
126,127
129,130
131,132
132,133
132,134
133,134
133,135
134,135
134,136
135,136
135,137
136,137
139,140
142,143
144,145
145,146
145,147
146,147
146,148
147,148
147,149
148,149
148,150
149,150
152,153
155,156
157,158
157,159
157,160
157,161
158,159
159,160
159,161
160,161
163,164
163,165
164,165
166,167
168,169
169,170
171,172
171,173
171,174
171,175
172,173
172,174
173,174
174,175
175,176
175,177
176,177
176,178
177,178
177,179
178,179
178,180
179,180
182,183
185,186
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
192,194
193,194
196,197
200,201
201,202
201,203
202,203
202,204
203,204
203,205
204,205
204,206
205,206
208,209
212,213
213,214
213,215
214,215
214,216
215,216
215,217
216,217
216,218
217,218
220,221
223,224
225,226
225,227
225,228
225,229
226,227
227,228
227,229
228,229
231,232
231,233
232,233
234,235
236,237
237,238
239,240
239,241
239,242
239,243
240,241
240,242
241,242
242,243
243,244
243,245
244,245
244,246
245,246
245,247
246,247
246,248
247,248
250,251
253,254
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
260,262
261,262
264,265
268,269
269,270
269,271
270,271
270,272
271,272
271,273
272,273
272,274
273,274
276,277
280,281
281,282
281,283
282,283
282,284
283,284
283,285
284,285
284,286
285,286
288,289
291,292
-----nextToken-----
2,4,7,9,10,14,16,21,22,25,27,30,40,41,43,44,46,47,54,55,57,58,60,67,68,70,71,73,80,81,83,84,86,91,92,95,97,100,110,111,113,114,116,117,124,125,127,128,130,137,138,140,141,143,150,151,153,154,156,161,162,165,167,170,180,181,183,184,186,187,194,195,197,198,199,206,207,209,210,211,218,219,221,222,224,229,230,233,235,238,248,249,251,252,254,255,262,263,265,266,267,274,275,277,278,279,286,287,289,290,292
-----computeFrom-----
19,20
19,21
23,24
23,25
35,36
35,37
49,50
49,51
62,63
62,64
75,76
75,77
89,90
89,91
93,94
93,95
105,106
105,107
119,120
119,121
132,133
132,134
145,146
145,147
159,160
159,161
163,164
163,165
175,176
175,177
189,190
189,191
201,202
201,203
213,214
213,215
227,228
227,229
231,232
231,233
243,244
243,245
257,258
257,259
269,270
269,271
281,282
281,283
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void pnp_clean_resource_table(struct pnp_resource_table * res){	int idx;	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {		if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->irq_resource[idx].start = -1;		res->irq_resource[idx].end = -1;		res->irq_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_DMA; idx++) {		if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->dma_resource[idx].start = -1;		res->dma_resource[idx].end = -1;		res->dma_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_PORT; idx++) {		if (!(res->port_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->port_resource[idx].start = 0;		res->port_resource[idx].end = 0;		res->port_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_MEM; idx++) {		if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->mem_resource[idx].start = 0;		res->mem_resource[idx].end = 0;		res->mem_resource[idx].flags = IORESOURCE_AUTO;	}}
static void
pnp_clean_resource_table(struct pnp_resource_table * res)
pnp_clean_resource_table
struct pnp_resource_table * res
struct pnp_resource_table
pnp_resource_table
* res
*
res
{	int idx;	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {		if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->irq_resource[idx].start = -1;		res->irq_resource[idx].end = -1;		res->irq_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_DMA; idx++) {		if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->dma_resource[idx].start = -1;		res->dma_resource[idx].end = -1;		res->dma_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_PORT; idx++) {		if (!(res->port_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->port_resource[idx].start = 0;		res->port_resource[idx].end = 0;		res->port_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_MEM; idx++) {		if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->mem_resource[idx].start = 0;		res->mem_resource[idx].end = 0;		res->mem_resource[idx].flags = IORESOURCE_AUTO;	}}
int idx;
int idx;
int
idx
idx
for (idx = 0; idx < PNP_MAX_IRQ; idx++) {		if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->irq_resource[idx].start = -1;		res->irq_resource[idx].end = -1;		res->irq_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_IRQ
idx
idx
PNP_MAX_IRQ
PNP_MAX_IRQ
idx++
idx
idx
{		if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->irq_resource[idx].start = -1;		res->irq_resource[idx].end = -1;		res->irq_resource[idx].flags = IORESOURCE_AUTO;	}
if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO))			continue;
!(res->irq_resource[idx].flags & IORESOURCE_AUTO)
(res->irq_resource[idx].flags & IORESOURCE_AUTO)
res->irq_resource[idx].flags & IORESOURCE_AUTO
res->irq_resource[idx].flags
res->irq_resource[idx]
res->irq_resource
res
res
irq_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
continue;
res->irq_resource[idx].start = -1;
res->irq_resource[idx].start = -1
res->irq_resource[idx].start
res->irq_resource[idx]
res->irq_resource
res
res
irq_resource
idx
idx
start
-1
1
res->irq_resource[idx].end = -1;
res->irq_resource[idx].end = -1
res->irq_resource[idx].end
res->irq_resource[idx]
res->irq_resource
res
res
irq_resource
idx
idx
end
-1
1
res->irq_resource[idx].flags = IORESOURCE_AUTO;
res->irq_resource[idx].flags = IORESOURCE_AUTO
res->irq_resource[idx].flags
res->irq_resource[idx]
res->irq_resource
res
res
irq_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
for (idx = 0; idx < PNP_MAX_DMA; idx++) {		if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->dma_resource[idx].start = -1;		res->dma_resource[idx].end = -1;		res->dma_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_DMA
idx
idx
PNP_MAX_DMA
PNP_MAX_DMA
idx++
idx
idx
{		if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->dma_resource[idx].start = -1;		res->dma_resource[idx].end = -1;		res->dma_resource[idx].flags = IORESOURCE_AUTO;	}
if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO))			continue;
!(res->dma_resource[idx].flags & IORESOURCE_AUTO)
(res->dma_resource[idx].flags & IORESOURCE_AUTO)
res->dma_resource[idx].flags & IORESOURCE_AUTO
res->dma_resource[idx].flags
res->dma_resource[idx]
res->dma_resource
res
res
dma_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
continue;
res->dma_resource[idx].start = -1;
res->dma_resource[idx].start = -1
res->dma_resource[idx].start
res->dma_resource[idx]
res->dma_resource
res
res
dma_resource
idx
idx
start
-1
1
res->dma_resource[idx].end = -1;
res->dma_resource[idx].end = -1
res->dma_resource[idx].end
res->dma_resource[idx]
res->dma_resource
res
res
dma_resource
idx
idx
end
-1
1
res->dma_resource[idx].flags = IORESOURCE_AUTO;
res->dma_resource[idx].flags = IORESOURCE_AUTO
res->dma_resource[idx].flags
res->dma_resource[idx]
res->dma_resource
res
res
dma_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
for (idx = 0; idx < PNP_MAX_PORT; idx++) {		if (!(res->port_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->port_resource[idx].start = 0;		res->port_resource[idx].end = 0;		res->port_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_PORT
idx
idx
PNP_MAX_PORT
PNP_MAX_PORT
idx++
idx
idx
{		if (!(res->port_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->port_resource[idx].start = 0;		res->port_resource[idx].end = 0;		res->port_resource[idx].flags = IORESOURCE_AUTO;	}
if (!(res->port_resource[idx].flags & IORESOURCE_AUTO))			continue;
!(res->port_resource[idx].flags & IORESOURCE_AUTO)
(res->port_resource[idx].flags & IORESOURCE_AUTO)
res->port_resource[idx].flags & IORESOURCE_AUTO
res->port_resource[idx].flags
res->port_resource[idx]
res->port_resource
res
res
port_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
continue;
res->port_resource[idx].start = 0;
res->port_resource[idx].start = 0
res->port_resource[idx].start
res->port_resource[idx]
res->port_resource
res
res
port_resource
idx
idx
start
0
res->port_resource[idx].end = 0;
res->port_resource[idx].end = 0
res->port_resource[idx].end
res->port_resource[idx]
res->port_resource
res
res
port_resource
idx
idx
end
0
res->port_resource[idx].flags = IORESOURCE_AUTO;
res->port_resource[idx].flags = IORESOURCE_AUTO
res->port_resource[idx].flags
res->port_resource[idx]
res->port_resource
res
res
port_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
for (idx = 0; idx < PNP_MAX_MEM; idx++) {		if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->mem_resource[idx].start = 0;		res->mem_resource[idx].end = 0;		res->mem_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_MEM
idx
idx
PNP_MAX_MEM
PNP_MAX_MEM
idx++
idx
idx
{		if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO))			continue;		res->mem_resource[idx].start = 0;		res->mem_resource[idx].end = 0;		res->mem_resource[idx].flags = IORESOURCE_AUTO;	}
if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO))			continue;
!(res->mem_resource[idx].flags & IORESOURCE_AUTO)
(res->mem_resource[idx].flags & IORESOURCE_AUTO)
res->mem_resource[idx].flags & IORESOURCE_AUTO
res->mem_resource[idx].flags
res->mem_resource[idx]
res->mem_resource
res
res
mem_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
continue;
res->mem_resource[idx].start = 0;
res->mem_resource[idx].start = 0
res->mem_resource[idx].start
res->mem_resource[idx]
res->mem_resource
res
res
mem_resource
idx
idx
start
0
res->mem_resource[idx].end = 0;
res->mem_resource[idx].end = 0
res->mem_resource[idx].end
res->mem_resource[idx]
res->mem_resource
res
res
mem_resource
idx
idx
end
0
res->mem_resource[idx].flags = IORESOURCE_AUTO;
res->mem_resource[idx].flags = IORESOURCE_AUTO
res->mem_resource[idx].flags
res->mem_resource[idx]
res->mem_resource
res
res
mem_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
-----joern-----
(187,88,0)
(106,121,0)
(64,202,0)
(44,8,0)
(75,56,0)
(154,61,0)
(173,123,0)
(37,200,0)
(74,162,0)
(162,174,0)
(56,75,0)
(15,98,0)
(200,54,0)
(118,0,0)
(129,203,0)
(116,80,0)
(193,0,0)
(95,38,0)
(169,71,0)
(102,61,0)
(147,21,0)
(38,100,0)
(172,107,0)
(144,103,0)
(64,41,0)
(52,177,0)
(167,142,0)
(38,73,0)
(58,107,0)
(88,69,0)
(109,200,0)
(45,200,0)
(195,89,0)
(97,53,0)
(87,31,0)
(121,52,0)
(201,100,0)
(96,149,0)
(88,124,0)
(89,16,0)
(186,54,0)
(114,132,0)
(199,106,0)
(186,18,0)
(81,114,0)
(2,169,0)
(188,149,0)
(110,36,0)
(70,58,0)
(171,132,0)
(11,38,0)
(128,192,0)
(121,106,0)
(149,16,0)
(162,100,0)
(62,46,0)
(29,114,0)
(93,15,0)
(85,186,0)
(63,35,0)
(113,193,0)
(86,58,0)
(99,177,0)
(112,98,0)
(36,10,0)
(142,149,0)
(28,30,0)
(202,35,0)
(33,172,0)
(31,87,0)
(56,71,0)
(174,56,0)
(30,132,0)
(192,47,0)
(134,40,0)
(77,22,0)
(51,12,0)
(90,45,0)
(34,24,0)
(149,142,0)
(21,120,0)
(8,36,0)
(139,190,0)
(17,46,0)
(196,53,0)
(161,35,0)
(51,23,0)
(15,16,0)
(160,4,0)
(103,144,0)
(203,54,0)
(108,164,0)
(67,142,0)
(11,54,0)
(198,18,0)
(18,10,0)
(14,2,0)
(45,132,0)
(96,154,0)
(193,54,0)
(148,75,0)
(20,79,0)
(151,73,0)
(21,175,0)
(32,13,0)
(28,54,0)
(82,24,0)
(5,100,0)
(126,5,0)
(90,58,0)
(13,123,0)
(159,16,0)
(81,54,0)
(163,81,0)
(202,64,0)
(24,100,0)
(103,13,0)
(184,87,0)
(65,10,0)
(36,8,0)
(149,96,0)
(8,12,0)
(48,98,0)
(23,3,0)
(194,28,0)
(39,10,0)
(30,70,0)
(125,174,0)
(60,164,0)
(179,16,0)
(91,11,0)
(68,202,0)
(77,190,0)
(57,30,0)
(117,47,0)
(93,50,0)
(121,100,0)
(131,65,0)
(45,90,0)
(192,114,0)
(144,54,0)
(43,203,0)
(76,79,0)
(87,54,0)
(157,36,0)
(114,81,0)
(190,77,0)
(190,177,0)
(178,172,0)
(73,169,0)
(31,178,0)
(143,90,0)
(187,0,0)
(122,31,0)
(51,18,0)
(94,132,0)
(106,54,0)
(201,190,0)
(78,124,0)
(22,77,0)
(124,88,0)
(3,23,0)
(84,157,0)
(36,157,0)
(70,30,0)
(123,61,0)
(137,80,0)
(155,193,0)
(41,69,0)
(120,21,0)
(55,106,0)
(152,186,0)
(203,162,0)
(202,10,0)
(145,81,0)
(150,10,0)
(98,15,0)
(130,156,0)
(136,15,0)
(4,175,0)
(156,132,0)
(170,40,0)
(13,103,0)
(189,127,0)
(49,201,0)
(127,41,0)
(175,50,0)
(0,193,0)
(169,2,0)
(168,100,0)
(153,121,0)
(98,54,0)
(15,93,0)
(73,38,0)
(140,144,0)
(9,178,0)
(70,40,0)
(47,107,0)
(12,69,0)
(133,93,0)
(185,144,0)
(135,52,0)
(46,201,0)
(115,50,0)
(105,77,0)
(27,187,0)
(162,203,0)
(7,120,0)
(175,4,0)
(157,54,0)
(183,107,0)
(190,201,0)
(18,186,0)
(19,87,0)
(21,16,0)
(120,54,0)
(174,162,0)
(79,132,0)
(146,64,0)
(0,187,0)
(101,71,0)
(103,16,0)
(38,11,0)
(104,157,0)
(35,54,0)
(4,160,0)
(25,45,0)
(200,45,0)
(1,53,0)
(35,202,0)
(23,51,0)
(41,127,0)
(66,28,0)
(158,96,0)
(175,21,0)
(119,69,0)
(138,100,0)
(50,61,0)
(83,70,0)
(177,71,0)
(178,31,0)
(40,170,0)
(180,51,0)
(142,54,0)
(0,10,0)
(59,103,0)
(114,192,0)
(6,120,0)
(42,53,0)
(18,51,0)
(46,54,0)
(31,132,0)
(182,154,0)
(176,4,0)
(197,11,0)
(166,12,0)
(30,28,0)
(40,70,0)
(80,16,0)
(92,53,0)
(201,46,0)
(164,10,0)
(165,175,0)
(52,121,0)
(26,23,0)
(186,54,1)
(176,175,1)
(173,13,1)
(115,93,1)
(125,162,1)
(18,10,1)
(145,170,1)
(162,100,1)
(202,68,1)
(44,36,1)
(89,16,1)
(36,110,1)
(138,164,1)
(106,55,1)
(65,131,1)
(15,16,1)
(46,54,1)
(87,19,1)
(58,86,1)
(104,88,1)
(73,151,1)
(0,193,1)
(9,31,1)
(80,137,1)
(144,54,1)
(37,172,1)
(28,54,1)
(120,7,1)
(170,40,1)
(98,48,1)
(131,12,1)
(114,29,1)
(155,41,1)
(67,167,1)
(140,185,1)
(179,159,1)
(64,146,1)
(99,52,1)
(190,177,1)
(77,190,1)
(48,112,1)
(60,65,1)
(129,43,1)
(76,132,1)
(169,2,1)
(132,94,1)
(130,58,1)
(168,138,1)
(19,184,1)
(122,87,1)
(131,141,1)
(192,128,1)
(51,180,1)
(59,144,1)
(195,50,1)
(0,10,1)
(182,96,1)
(197,22,1)
(148,174,1)
(11,91,1)
(191,160,1)
(117,192,1)
(198,186,1)
(166,8,1)
(201,49,1)
(141,3,1)
(86,90,1)
(27,0,1)
(195,191,1)
(18,186,1)
(21,120,1)
(78,187,1)
(193,113,1)
(130,181,1)
(28,194,1)
(113,155,1)
(13,32,1)
(73,38,1)
(193,54,1)
(93,133,1)
(139,201,1)
(60,10,1)
(157,54,1)
(8,36,1)
(142,54,1)
(7,6,1)
(15,98,1)
(65,10,1)
(40,70,1)
(79,20,1)
(0,118,1)
(4,176,1)
(202,10,1)
(79,132,1)
(52,121,1)
(201,46,1)
(134,70,1)
(128,114,1)
(45,132,1)
(64,202,1)
(118,193,1)
(90,143,1)
(186,85,1)
(35,63,1)
(34,82,1)
(30,28,1)
(2,14,1)
(70,83,1)
(159,24,1)
(88,124,1)
(45,25,1)
(96,158,1)
(68,35,1)
(35,54,1)
(149,16,1)
(110,157,1)
(167,160,1)
(47,117,1)
(85,152,1)
(172,33,1)
(14,73,1)
(123,173,1)
(149,142,1)
(100,168,1)
(133,15,1)
(187,27,1)
(82,5,1)
(114,81,1)
(146,202,1)
(40,134,1)
(13,103,1)
(38,100,1)
(81,163,1)
(82,100,1)
(91,197,1)
(76,156,1)
(201,100,1)
(149,188,1)
(103,16,1)
(161,3,1)
(103,59,1)
(156,130,1)
(89,195,1)
(171,80,1)
(103,144,1)
(116,89,1)
(63,161,1)
(10,39,1)
(187,0,1)
(203,129,1)
(184,47,1)
(36,10,1)
(38,95,1)
(136,98,1)
(93,15,1)
(38,11,1)
(175,165,1)
(151,38,1)
(108,60,1)
(162,203,1)
(106,54,1)
(175,21,1)
(51,12,1)
(25,200,1)
(192,114,1)
(165,21,1)
(55,199,1)
(137,116,1)
(164,108,1)
(36,157,1)
(74,203,1)
(31,132,1)
(8,44,1)
(121,106,1)
(43,169,1)
(153,106,1)
(3,23,1)
(178,31,1)
(160,4,1)
(12,166,1)
(32,103,1)
(16,179,1)
(75,148,1)
(105,190,1)
(96,149,1)
(111,79,1)
(200,109,1)
(6,80,1)
(21,16,1)
(95,11,1)
(127,189,1)
(70,58,1)
(30,57,1)
(17,62,1)
(4,175,1)
(157,84,1)
(126,177,1)
(164,10,1)
(81,54,1)
(203,54,1)
(21,147,1)
(33,178,1)
(194,66,1)
(112,123,1)
(39,150,1)
(163,145,1)
(45,200,1)
(121,100,1)
(5,126,1)
(152,164,1)
(98,54,1)
(50,115,1)
(56,75,1)
(83,30,1)
(174,125,1)
(62,24,1)
(177,99,1)
(162,74,1)
(158,149,1)
(72,22,1)
(178,9,1)
(29,81,1)
(114,132,1)
(185,154,1)
(142,67,1)
(57,28,1)
(77,105,1)
(156,132,1)
(11,54,1)
(49,46,1)
(154,182,1)
(147,120,1)
(202,35,1)
(109,37,1)
(188,142,1)
(189,64,1)
(175,50,1)
(120,54,1)
(190,201,1)
(190,139,1)
(94,171,1)
(199,56,1)
(26,51,1)
(52,135,1)
(46,17,1)
(23,26,1)
(15,136,1)
(181,170,1)
(143,45,1)
(121,153,1)
(126,72,1)
(70,30,1)
(80,16,1)
(135,121,1)
(31,87,1)
(51,18,1)
(20,76,1)
(24,34,1)
(30,132,1)
(18,198,1)
(180,18,1)
(90,45,1)
(200,54,1)
(174,162,1)
(41,127,1)
(24,100,1)
(124,78,1)
(87,54,1)
(5,100,1)
(23,51,1)
(66,79,1)
(84,104,1)
(31,122,1)
(22,77,1)
(116,16,1)
(144,140,1)
(91,22,2)
(30,28,2)
(99,22,2)
(110,3,2)
(6,80,2)
(63,3,2)
(38,11,2)
(169,22,2)
(0,3,2)
(31,170,2)
(98,160,2)
(0,193,2)
(197,22,2)
(41,3,2)
(7,80,2)
(103,160,2)
(57,79,2)
(31,87,2)
(201,100,2)
(153,22,2)
(118,3,2)
(33,170,2)
(121,106,2)
(125,22,2)
(40,70,2)
(22,24,2)
(60,164,2)
(103,144,2)
(37,170,2)
(114,81,2)
(64,202,2)
(82,24,2)
(136,160,2)
(130,79,2)
(77,190,2)
(51,18,2)
(140,160,2)
(164,164,2)
(66,79,2)
(148,22,2)
(20,79,2)
(25,170,2)
(12,3,2)
(32,160,2)
(73,38,2)
(160,4,2)
(89,16,2)
(4,80,2)
(141,3,2)
(145,170,2)
(106,22,2)
(175,21,2)
(124,3,2)
(202,10,2)
(72,22,2)
(155,3,2)
(149,16,2)
(44,3,2)
(73,22,2)
(190,177,2)
(105,24,2)
(162,100,2)
(26,164,2)
(190,201,2)
(137,80,2)
(3,23,2)
(90,170,2)
(116,80,2)
(98,54,2)
(64,3,2)
(38,22,2)
(46,24,2)
(195,80,2)
(169,2,2)
(5,100,2)
(146,3,2)
(172,170,2)
(70,79,2)
(80,80,2)
(79,132,2)
(21,80,2)
(95,22,2)
(156,79,2)
(27,3,2)
(18,10,2)
(49,24,2)
(38,100,2)
(67,160,2)
(161,3,2)
(41,127,2)
(45,170,2)
(123,160,2)
(18,186,2)
(85,164,2)
(93,160,2)
(193,54,2)
(40,79,2)
(198,164,2)
(117,170,2)
(52,121,2)
(30,79,2)
(131,164,2)
(11,22,2)
(56,75,2)
(165,80,2)
(184,170,2)
(181,170,2)
(147,80,2)
(199,22,2)
(81,170,2)
(36,3,2)
(182,160,2)
(144,160,2)
(162,22,2)
(65,10,2)
(139,24,2)
(149,142,2)
(154,160,2)
(90,45,2)
(203,54,2)
(8,36,2)
(173,160,2)
(43,22,2)
(15,160,2)
(106,54,2)
(30,132,2)
(128,170,2)
(188,160,2)
(45,200,2)
(177,22,2)
(201,24,2)
(178,31,2)
(65,164,2)
(58,170,2)
(50,160,2)
(203,22,2)
(35,54,2)
(74,22,2)
(19,170,2)
(13,103,2)
(83,79,2)
(104,3,2)
(167,160,2)
(14,22,2)
(2,22,2)
(80,16,2)
(93,15,2)
(200,54,2)
(192,170,2)
(87,170,2)
(174,22,2)
(202,3,2)
(186,164,2)
(51,164,2)
(142,54,2)
(68,3,2)
(34,24,2)
(3,164,2)
(88,3,2)
(29,170,2)
(143,170,2)
(185,160,2)
(86,170,2)
(114,170,2)
(75,22,2)
(122,170,2)
(187,3,2)
(149,160,2)
(0,10,2)
(162,203,2)
(194,79,2)
(175,50,2)
(59,160,2)
(24,24,2)
(46,54,2)
(96,149,2)
(190,24,2)
(127,3,2)
(78,3,2)
(135,22,2)
(115,160,2)
(79,79,2)
(15,98,2)
(202,35,2)
(5,24,2)
(164,10,2)
(31,132,2)
(81,54,2)
(176,80,2)
(142,160,2)
(76,79,2)
(134,79,2)
(47,170,2)
(21,16,2)
(103,16,2)
(166,3,2)
(121,22,2)
(121,100,2)
(23,51,2)
(160,80,2)
(187,0,2)
(163,170,2)
(175,80,2)
(120,54,2)
(191,160,2)
(15,16,2)
(62,24,2)
(108,164,2)
(186,54,2)
(158,160,2)
(189,3,2)
(52,22,2)
(18,164,2)
(70,30,2)
(120,80,2)
(201,46,2)
(151,22,2)
(192,114,2)
(36,157,2)
(157,54,2)
(4,175,2)
(126,24,2)
(113,3,2)
(144,54,2)
(152,164,2)
(178,170,2)
(17,24,2)
(84,3,2)
(28,54,2)
(9,170,2)
(96,160,2)
(109,170,2)
(112,160,2)
(200,170,2)
(70,58,2)
(88,124,2)
(87,54,2)
(22,77,2)
(8,3,2)
(51,12,2)
(55,22,2)
(11,54,2)
(28,79,2)
(21,120,2)
(180,164,2)
(35,3,2)
(129,22,2)
(77,24,2)
(23,164,2)
(89,80,2)
(45,132,2)
(170,40,2)
(13,160,2)
(48,160,2)
(36,10,2)
(24,100,2)
(157,3,2)
(133,160,2)
(174,162,2)
(156,132,2)
(193,3,2)
(170,79,2)
(56,22,2)
(114,132,2)
-----------------------------------
(0,res->irq_resource[idx])
(1,for (idx = 0; idx < PNP_MAX_DMA; idx++)
(2,-1)
(3,!(res->irq_resource[idx].flags & IORESOURCE_AUTO)
(4,res->port_resource[idx].flags & IORESOURCE_AUTO)
(5,idx++)
(6,res)
(7,port_resource)
(8,res->irq_resource[idx].flags)
(9,end)
(10,idx = 0)
(11,res->dma_resource)
(12,res->irq_resource[idx].flags = IORESOURCE_AUTO)
(13,res->port_resource[idx].end)
(14,1)
(15,res->port_resource[idx])
(16,idx = 0)
(17,dma_resource)
(18,res->irq_resource[idx])
(19,mem_resource)
(20,PNP_MAX_MEM)
(21,res->port_resource[idx])
(22,!(res->dma_resource[idx].flags & IORESOURCE_AUTO)
(23,res->irq_resource[idx].flags & IORESOURCE_AUTO)
(24,idx < PNP_MAX_DMA)
(25,idx)
(26,IORESOURCE_AUTO)
(27,end)
(28,res->mem_resource)
(29,idx)
(30,res->mem_resource[idx])
(31,res->mem_resource[idx])
(32,end)
(33,0)
(34,PNP_MAX_DMA)
(35,res->irq_resource)
(36,res->irq_resource[idx])
(37,res)
(38,res->dma_resource[idx])
(39,0)
(40,res->mem_resource[idx].flags & IORESOURCE_AUTO)
(41,res->irq_resource[idx].start = -1)
(42,idx)
(43,res)
(44,flags)
(45,res->mem_resource[idx])
(46,res->dma_resource)
(47,res->mem_resource[idx].start = 0)
(48,port_resource)
(49,idx)
(50,res->port_resource[idx].flags = IORESOURCE_AUTO)
(51,res->irq_resource[idx].flags)
(52,res->dma_resource[idx].flags)
(53,)
(54,struct pnp_resource_table * res)
(55,dma_resource)
(56,res->dma_resource[idx].end = -1)
(57,idx)
(58,res->mem_resource[idx].flags = IORESOURCE_AUTO)
(59,idx)
(60,idx)
(61,)
(62,res)
(63,irq_resource)
(64,res->irq_resource[idx].start)
(65,idx++)
(66,res)
(67,port_resource)
(68,idx)
(69,)
(70,res->mem_resource[idx].flags)
(71,)
(72,continue;)
(73,res->dma_resource[idx].start)
(74,idx)
(75,-1)
(76,idx)
(77,res->dma_resource[idx].flags & IORESOURCE_AUTO)
(78,1)
(79,idx < PNP_MAX_MEM)
(80,idx < PNP_MAX_PORT)
(81,res->mem_resource)
(82,idx)
(83,flags)
(84,irq_resource)
(85,irq_resource)
(86,IORESOURCE_AUTO)
(87,res->mem_resource)
(88,res->irq_resource[idx].end = -1)
(89,idx++)
(90,res->mem_resource[idx].flags)
(91,dma_resource)
(92,for (idx = 0; idx < PNP_MAX_PORT; idx++)
(93,res->port_resource[idx].flags)
(94,0)
(95,idx)
(96,res->port_resource[idx].start)
(97,for (idx = 0; idx < PNP_MAX_IRQ; idx++)
(98,res->port_resource)
(99,IORESOURCE_AUTO)
(100,idx = 0)
(101,if (!(res->dma_resource[idx].flags & IORESOURCE_AUTO)
(102,if (!(res->port_resource[idx].flags & IORESOURCE_AUTO)
(103,res->port_resource[idx])
(104,res)
(105,IORESOURCE_AUTO)
(106,res->dma_resource)
(107,)
(108,PNP_MAX_IRQ)
(109,mem_resource)
(110,idx)
(111,RET)
(112,res)
(113,irq_resource)
(114,res->mem_resource[idx])
(115,IORESOURCE_AUTO)
(116,idx)
(117,0)
(118,idx)
(119,if (!(res->irq_resource[idx].flags & IORESOURCE_AUTO)
(120,res->port_resource)
(121,res->dma_resource[idx])
(122,idx)
(123,res->port_resource[idx].end = 0)
(124,-1)
(125,end)
(126,idx)
(127,-1)
(128,start)
(129,dma_resource)
(130,idx)
(131,idx)
(132,idx = 0)
(133,flags)
(134,IORESOURCE_AUTO)
(135,flags)
(136,idx)
(137,PNP_MAX_PORT)
(138,idx)
(139,flags)
(140,port_resource)
(141,continue;)
(142,res->port_resource)
(143,flags)
(144,res->port_resource)
(145,res)
(146,start)
(147,idx)
(148,1)
(149,res->port_resource[idx])
(150,idx)
(151,start)
(152,res)
(153,idx)
(154,res->port_resource[idx].start = 0)
(155,res)
(156,idx++)
(157,res->irq_resource)
(158,start)
(159,idx)
(160,!(res->port_resource[idx].flags & IORESOURCE_AUTO)
(161,res)
(162,res->dma_resource[idx])
(163,mem_resource)
(164,idx < PNP_MAX_IRQ)
(165,flags)
(166,IORESOURCE_AUTO)
(167,res)
(168,0)
(169,res->dma_resource[idx].start = -1)
(170,!(res->mem_resource[idx].flags & IORESOURCE_AUTO)
(171,idx)
(172,res->mem_resource[idx].end = 0)
(173,0)
(174,res->dma_resource[idx].end)
(175,res->port_resource[idx].flags)
(176,IORESOURCE_AUTO)
(177,res->dma_resource[idx].flags = IORESOURCE_AUTO)
(178,res->mem_resource[idx].end)
(179,0)
(180,flags)
(181,continue;)
(182,0)
(183,if (!(res->mem_resource[idx].flags & IORESOURCE_AUTO)
(184,res)
(185,res)
(186,res->irq_resource)
(187,res->irq_resource[idx].end)
(188,idx)
(189,1)
(190,res->dma_resource[idx].flags)
(191,continue;)
(192,res->mem_resource[idx].start)
(193,res->irq_resource)
(194,mem_resource)
(195,idx)
(196,for (idx = 0; idx < PNP_MAX_MEM; idx++)
(197,res)
(198,idx)
(199,res)
(200,res->mem_resource)
(201,res->dma_resource[idx])
(202,res->irq_resource[idx])
(203,res->dma_resource)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^