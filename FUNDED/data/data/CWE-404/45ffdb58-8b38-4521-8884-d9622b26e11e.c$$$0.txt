-----label-----
0
-----code-----
static int zx_dma_probe(struct platform_device *op)
{
	struct zx_dma_dev *d;
	struct resource *iores;
	int i, ret = 0;

	iores = platform_get_resource(op, IORESOURCE_MEM, 0);
	if (!iores)
		return -EINVAL;

	d = devm_kzalloc(&op->dev, sizeof(*d), GFP_KERNEL);
	if (!d)
		return -ENOMEM;

	d->base = devm_ioremap_resource(&op->dev, iores);
	if (IS_ERR(d->base))
		return PTR_ERR(d->base);

	of_property_read_u32((&op->dev)->of_node,
			     "dma-channels", &d->dma_channels);
	of_property_read_u32((&op->dev)->of_node,
			     "dma-requests", &d->dma_requests);
	if (!d->dma_requests || !d->dma_channels)
		return -EINVAL;

	d->clk = devm_clk_get(&op->dev, NULL);
	if (IS_ERR(d->clk)) {
		dev_err(&op->dev, "no dma clk\n");
		return PTR_ERR(d->clk);
	}

	d->irq = platform_get_irq(op, 0);
	ret = devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,
			       0, DRIVER_NAME, d);
	if (ret)
		return ret;

	/* A DMA memory pool for LLIs, align on 32-byte boundary */
	d->pool = dmam_pool_create(DRIVER_NAME, &op->dev,
			LLI_BLOCK_SIZE, 32, 0);
	if (!d->pool)
		return -ENOMEM;

	/* init phy channel */
	d->phy = devm_kzalloc(&op->dev,
		d->dma_channels * sizeof(struct zx_dma_phy), GFP_KERNEL);
	if (!d->phy)
		return -ENOMEM;

	for (i = 0; i < d->dma_channels; i++) {
		struct zx_dma_phy *p = &d->phy[i];

		p->idx = i;
		p->base = d->base + i * 0x40;
	}

	INIT_LIST_HEAD(&d->slave.channels);
	dma_cap_set(DMA_SLAVE, d->slave.cap_mask);
	dma_cap_set(DMA_MEMCPY, d->slave.cap_mask);
	dma_cap_set(DMA_CYCLIC, d->slave.cap_mask);
	dma_cap_set(DMA_PRIVATE, d->slave.cap_mask);
	d->slave.dev = &op->dev;
	d->slave.device_free_chan_resources = zx_dma_free_chan_resources;
	d->slave.device_tx_status = zx_dma_tx_status;
	d->slave.device_prep_dma_memcpy = zx_dma_prep_memcpy;
	d->slave.device_prep_slave_sg = zx_dma_prep_slave_sg;
	d->slave.device_prep_dma_cyclic = zx_dma_prep_dma_cyclic;
	d->slave.device_issue_pending = zx_dma_issue_pending;
	d->slave.device_config = zx_dma_config;
	d->slave.device_terminate_all = zx_dma_terminate_all;
	d->slave.device_pause = zx_dma_transfer_pause;
	d->slave.device_resume = zx_dma_transfer_resume;
	d->slave.copy_align = DMA_ALIGN;
	d->slave.src_addr_widths = ZX_DMA_BUSWIDTHS;
	d->slave.dst_addr_widths = ZX_DMA_BUSWIDTHS;
	d->slave.directions = BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)
			| BIT(DMA_DEV_TO_MEM);
	d->slave.residue_granularity = DMA_RESIDUE_GRANULARITY_SEGMENT;

	/* init virtual channel */
	d->chans = devm_kzalloc(&op->dev,
		d->dma_requests * sizeof(struct zx_dma_chan), GFP_KERNEL);
	if (!d->chans)
		return -ENOMEM;

	for (i = 0; i < d->dma_requests; i++) {
		struct zx_dma_chan *c = &d->chans[i];

		c->status = DMA_IN_PROGRESS;
		INIT_LIST_HEAD(&c->node);
		c->vc.desc_free = zx_dma_free_desc;
		vchan_init(&c->vc, &d->slave);
	}

	/* Enable clock before accessing registers */
	ret = clk_prepare_enable(d->clk);
	if (ret < 0) {
		dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret);
		goto zx_dma_out;
	}

	zx_dma_init_state(d);

	spin_lock_init(&d->lock);
	INIT_LIST_HEAD(&d->chan_pending);
	platform_set_drvdata(op, d);

	ret = dma_async_device_register(&d->slave);
	if (ret)
		goto clk_dis;

	ret = of_dma_controller_register((&op->dev)->of_node,
					 zx_of_dma_simple_xlate, d);
	if (ret)
		goto of_dma_register_fail;

	dev_info(&op->dev, "initialized\n");
	return 0;

of_dma_register_fail:
	dma_async_device_unregister(&d->slave);
clk_dis:
	clk_disable_unprepare(d->clk);
zx_dma_out:
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
11,59
11,60
11,61
11,62
11,63
11,64
11,65
11,66
11,67
11,68
11,69
11,70
11,71
11,72
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
27,30
29,30
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
39,43
40,41
42,43
44,45
47,48
47,49
48,49
49,50
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
59,62
59,63
60,61
62,63
63,64
63,65
64,65
67,68
68,69
69,70
70,71
72,73
74,75
74,76
75,76
76,77
78,79
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
88,89
88,90
88,91
89,90
91,92
92,93
92,94
93,94
96,97
98,99
98,100
99,100
99,101
100,101
102,103
102,104
103,104
106,107
107,108
107,109
108,109
110,111
110,112
111,112
114,115
115,116
115,117
115,118
115,119
116,117
118,119
118,120
119,120
120,121
121,122
121,123
122,123
127,128
128,129
128,130
129,130
132,133
133,134
133,135
133,136
133,137
134,135
136,137
136,138
137,138
138,139
139,140
139,141
140,141
145,146
146,147
146,148
147,148
150,151
150,152
151,152
151,153
152,153
153,154
153,155
154,155
157,158
158,159
158,160
159,160
162,163
163,164
164,165
166,167
167,168
167,169
168,169
168,170
169,170
172,173
172,174
172,175
173,174
175,176
176,177
176,178
177,178
180,181
182,183
182,184
183,184
183,185
184,185
186,187
186,188
187,188
190,191
190,192
191,192
192,193
192,194
192,195
193,194
195,196
196,197
196,198
197,198
201,202
202,203
202,204
203,204
205,206
205,207
206,207
209,210
210,211
210,212
211,212
211,213
212,213
215,216
215,217
215,218
216,217
218,219
221,222
222,223
222,224
223,224
225,226
225,227
225,228
225,229
225,230
225,231
225,232
226,227
228,229
229,230
229,231
230,231
233,234
233,235
234,235
237,238
240,241
242,243
244,245
244,246
245,246
247,248
248,249
250,251
251,252
251,253
252,253
252,254
253,254
256,257
256,258
256,259
256,260
256,261
256,262
257,258
259,260
261,262
262,263
262,264
263,264
266,267
270,271
270,272
271,272
272,273
272,274
273,274
276,277
277,278
278,279
280,281
281,282
281,283
282,283
282,284
283,284
286,287
286,288
286,289
286,290
287,288
289,290
290,291
290,292
291,292
294,295
294,296
295,296
295,297
296,297
299,300
300,301
300,302
301,302
304,305
306,307
306,308
307,308
308,309
308,310
309,310
312,313
313,314
314,315
316,317
316,318
316,319
316,320
317,318
318,319
318,320
319,320
322,323
322,324
323,324
325,326
325,327
326,327
329,330
330,331
332,333
332,334
332,335
333,334
334,335
334,336
335,336
337,338
337,339
337,340
340,341
341,342
342,343
342,344
343,344
343,345
344,345
347,348
349,350
350,351
350,352
351,352
351,353
352,353
355,356
357,358
358,359
358,360
359,360
359,361
360,361
363,364
363,365
364,365
364,366
365,366
368,369
368,370
369,370
372,373
373,374
373,375
374,375
376,377
377,378
377,379
378,379
378,380
379,380
383,384
384,385
384,386
384,387
385,386
387,388
389,390
389,391
390,391
390,392
391,392
395,396
396,397
396,398
396,399
397,398
399,400
401,402
401,403
402,403
402,404
403,404
407,408
408,409
408,410
408,411
409,410
411,412
413,414
413,415
414,415
414,416
415,416
419,420
420,421
420,422
420,423
421,422
423,424
425,426
425,427
426,427
426,428
427,428
431,432
432,433
432,434
433,434
433,435
434,435
434,436
435,436
439,440
440,441
440,442
441,442
444,445
445,446
445,447
446,447
446,448
447,448
447,449
448,449
452,453
454,455
455,456
455,457
456,457
456,458
457,458
457,459
458,459
462,463
464,465
465,466
465,467
466,467
466,468
467,468
467,469
468,469
472,473
474,475
475,476
475,477
476,477
476,478
477,478
477,479
478,479
482,483
484,485
485,486
485,487
486,487
486,488
487,488
487,489
488,489
492,493
494,495
495,496
495,497
496,497
496,498
497,498
497,499
498,499
502,503
504,505
505,506
505,507
506,507
506,508
507,508
507,509
508,509
512,513
514,515
515,516
515,517
516,517
516,518
517,518
517,519
518,519
522,523
524,525
525,526
525,527
526,527
526,528
527,528
527,529
528,529
532,533
534,535
535,536
535,537
536,537
536,538
537,538
537,539
538,539
542,543
544,545
545,546
545,547
546,547
546,548
547,548
547,549
548,549
552,553
554,555
555,556
555,557
556,557
556,558
557,558
557,559
558,559
562,563
564,565
565,566
565,567
566,567
566,568
567,568
567,569
568,569
572,573
574,575
575,576
575,577
576,577
576,578
577,578
577,579
578,579
582,583
582,584
583,584
583,585
584,585
584,586
585,586
587,588
589,590
589,591
590,591
592,593
594,595
594,596
595,596
597,598
599,600
600,601
600,602
601,602
601,603
602,603
602,604
603,604
607,608
609,610
610,611
610,612
611,612
611,613
612,613
615,616
615,617
615,618
615,619
616,617
618,619
619,620
619,621
620,621
623,624
623,625
624,625
624,626
625,626
628,629
629,630
629,631
630,631
633,634
635,636
635,637
636,637
637,638
637,639
638,639
641,642
642,643
643,644
645,646
645,647
645,648
645,649
646,647
647,648
647,649
648,649
651,652
651,653
652,653
654,655
654,656
655,656
658,659
659,660
661,662
661,663
661,664
661,665
661,666
662,663
663,664
663,665
664,665
666,667
666,668
666,669
669,670
670,671
671,672
671,673
672,673
672,674
673,674
676,677
678,679
679,680
679,681
680,681
680,682
681,682
684,685
686,687
687,688
687,689
688,689
690,691
691,692
691,693
692,693
695,696
696,697
696,698
697,698
697,699
698,699
698,700
699,700
703,704
705,706
706,707
706,708
706,709
707,708
709,710
710,711
710,712
711,712
714,715
715,716
715,717
716,717
719,720
720,721
720,722
721,722
723,724
723,725
724,725
726,727
726,728
727,728
730,731
730,732
731,732
731,733
732,733
735,736
735,737
736,737
737,738
737,739
737,740
737,741
738,739
740,741
741,742
741,743
742,743
746,747
748,749
750,751
751,752
751,753
752,753
754,755
756,757
757,758
757,759
758,759
760,761
761,762
761,763
762,763
765,766
766,767
766,768
767,768
769,770
770,771
770,772
771,772
774,775
775,776
775,777
775,778
776,777
778,779
780,781
782,783
783,784
783,785
784,785
786,787
786,788
787,788
789,790
790,791
790,792
791,792
794,795
794,796
795,796
797,798
799,800
800,801
800,802
801,802
803,804
803,805
803,806
803,807
804,805
806,807
806,808
807,808
808,809
809,810
809,811
810,811
814,815
816,817
818,819
818,820
819,820
821,822
823,824
824,825
824,826
824,827
825,826
827,828
828,829
828,830
829,830
833,834
835,836
835,837
837,838
838,839
838,840
839,840
841,842
842,843
842,844
843,844
846,847
846,848
848,849
849,850
849,851
850,851
852,853
852,854
853,854
856,857
856,858
858,859
859,860
-----nextToken-----

-----computeFrom-----
36,37
36,38
56,57
56,58
83,84
83,85
151,152
151,153
167,168
167,169
210,211
210,212
222,223
222,224
251,252
251,253
281,282
281,283
294,295
294,296
318,319
318,320
322,323
322,324
350,351
350,352
358,359
358,360
363,364
363,365
368,369
368,370
432,433
432,434
445,446
445,447
455,456
455,457
465,466
465,467
475,476
475,477
485,486
485,487
495,496
495,497
505,506
505,507
515,516
515,517
525,526
525,527
535,536
535,537
545,546
545,547
555,556
555,557
565,566
565,567
575,576
575,577
582,583
582,584
583,584
583,585
600,601
600,602
610,611
610,612
623,624
623,625
647,648
647,649
651,652
651,653
679,680
679,681
696,697
696,698
720,721
720,722
731,732
731,733
783,784
783,785
800,801
800,802
-----guardedBy-----
733,747
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int zx_dma_probe(struct platform_device *op){	struct zx_dma_dev *d;	struct resource *iores;	int i, ret = 0;	iores = platform_get_resource(op, IORESOURCE_MEM, 0);	if (!iores)		return -EINVAL;	d = devm_kzalloc(&op->dev, sizeof(*d), GFP_KERNEL);	if (!d)		return -ENOMEM;	d->base = devm_ioremap_resource(&op->dev, iores);	if (IS_ERR(d->base))		return PTR_ERR(d->base);	of_property_read_u32((&op->dev)->of_node,			     "dma-channels", &d->dma_channels);	of_property_read_u32((&op->dev)->of_node,			     "dma-requests", &d->dma_requests);	if (!d->dma_requests || !d->dma_channels)		return -EINVAL;	d->clk = devm_clk_get(&op->dev, NULL);	if (IS_ERR(d->clk)) {		dev_err(&op->dev, "no dma clk\n");		return PTR_ERR(d->clk);	}	d->irq = platform_get_irq(op, 0);	ret = devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,			       0, DRIVER_NAME, d);	if (ret)		return ret;	/* A DMA memory pool for LLIs, align on 32-byte boundary */	d->pool = dmam_pool_create(DRIVER_NAME, &op->dev,			LLI_BLOCK_SIZE, 32, 0);	if (!d->pool)		return -ENOMEM;	/* init phy channel */	d->phy = devm_kzalloc(&op->dev,		d->dma_channels * sizeof(struct zx_dma_phy), GFP_KERNEL);	if (!d->phy)		return -ENOMEM;	for (i = 0; i < d->dma_channels; i++) {		struct zx_dma_phy *p = &d->phy[i];		p->idx = i;		p->base = d->base + i * 0x40;	}	INIT_LIST_HEAD(&d->slave.channels);	dma_cap_set(DMA_SLAVE, d->slave.cap_mask);	dma_cap_set(DMA_MEMCPY, d->slave.cap_mask);	dma_cap_set(DMA_CYCLIC, d->slave.cap_mask);	dma_cap_set(DMA_PRIVATE, d->slave.cap_mask);	d->slave.dev = &op->dev;	d->slave.device_free_chan_resources = zx_dma_free_chan_resources;	d->slave.device_tx_status = zx_dma_tx_status;	d->slave.device_prep_dma_memcpy = zx_dma_prep_memcpy;	d->slave.device_prep_slave_sg = zx_dma_prep_slave_sg;	d->slave.device_prep_dma_cyclic = zx_dma_prep_dma_cyclic;	d->slave.device_issue_pending = zx_dma_issue_pending;	d->slave.device_config = zx_dma_config;	d->slave.device_terminate_all = zx_dma_terminate_all;	d->slave.device_pause = zx_dma_transfer_pause;	d->slave.device_resume = zx_dma_transfer_resume;	d->slave.copy_align = DMA_ALIGN;	d->slave.src_addr_widths = ZX_DMA_BUSWIDTHS;	d->slave.dst_addr_widths = ZX_DMA_BUSWIDTHS;	d->slave.directions = BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)			| BIT(DMA_DEV_TO_MEM);	d->slave.residue_granularity = DMA_RESIDUE_GRANULARITY_SEGMENT;	/* init virtual channel */	d->chans = devm_kzalloc(&op->dev,		d->dma_requests * sizeof(struct zx_dma_chan), GFP_KERNEL);	if (!d->chans)		return -ENOMEM;	for (i = 0; i < d->dma_requests; i++) {		struct zx_dma_chan *c = &d->chans[i];		c->status = DMA_IN_PROGRESS;		INIT_LIST_HEAD(&c->node);		c->vc.desc_free = zx_dma_free_desc;		vchan_init(&c->vc, &d->slave);	}	/* Enable clock before accessing registers */	ret = clk_prepare_enable(d->clk);	if (ret < 0) {		dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret);		goto zx_dma_out;	}	zx_dma_init_state(d);	spin_lock_init(&d->lock);	INIT_LIST_HEAD(&d->chan_pending);	platform_set_drvdata(op, d);	ret = dma_async_device_register(&d->slave);	if (ret)		goto clk_dis;	ret = of_dma_controller_register((&op->dev)->of_node,					 zx_of_dma_simple_xlate, d);	if (ret)		goto of_dma_register_fail;	dev_info(&op->dev, "initialized\n");	return 0;of_dma_register_fail:	dma_async_device_unregister(&d->slave);clk_dis:	clk_disable_unprepare(d->clk);zx_dma_out:	return ret;}
static int
zx_dma_probe(struct platform_device *op)
zx_dma_probe
struct platform_device *op
struct platform_device
platform_device
*op
*
op
{	struct zx_dma_dev *d;	struct resource *iores;	int i, ret = 0;	iores = platform_get_resource(op, IORESOURCE_MEM, 0);	if (!iores)		return -EINVAL;	d = devm_kzalloc(&op->dev, sizeof(*d), GFP_KERNEL);	if (!d)		return -ENOMEM;	d->base = devm_ioremap_resource(&op->dev, iores);	if (IS_ERR(d->base))		return PTR_ERR(d->base);	of_property_read_u32((&op->dev)->of_node,			     "dma-channels", &d->dma_channels);	of_property_read_u32((&op->dev)->of_node,			     "dma-requests", &d->dma_requests);	if (!d->dma_requests || !d->dma_channels)		return -EINVAL;	d->clk = devm_clk_get(&op->dev, NULL);	if (IS_ERR(d->clk)) {		dev_err(&op->dev, "no dma clk\n");		return PTR_ERR(d->clk);	}	d->irq = platform_get_irq(op, 0);	ret = devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,			       0, DRIVER_NAME, d);	if (ret)		return ret;	/* A DMA memory pool for LLIs, align on 32-byte boundary */	d->pool = dmam_pool_create(DRIVER_NAME, &op->dev,			LLI_BLOCK_SIZE, 32, 0);	if (!d->pool)		return -ENOMEM;	/* init phy channel */	d->phy = devm_kzalloc(&op->dev,		d->dma_channels * sizeof(struct zx_dma_phy), GFP_KERNEL);	if (!d->phy)		return -ENOMEM;	for (i = 0; i < d->dma_channels; i++) {		struct zx_dma_phy *p = &d->phy[i];		p->idx = i;		p->base = d->base + i * 0x40;	}	INIT_LIST_HEAD(&d->slave.channels);	dma_cap_set(DMA_SLAVE, d->slave.cap_mask);	dma_cap_set(DMA_MEMCPY, d->slave.cap_mask);	dma_cap_set(DMA_CYCLIC, d->slave.cap_mask);	dma_cap_set(DMA_PRIVATE, d->slave.cap_mask);	d->slave.dev = &op->dev;	d->slave.device_free_chan_resources = zx_dma_free_chan_resources;	d->slave.device_tx_status = zx_dma_tx_status;	d->slave.device_prep_dma_memcpy = zx_dma_prep_memcpy;	d->slave.device_prep_slave_sg = zx_dma_prep_slave_sg;	d->slave.device_prep_dma_cyclic = zx_dma_prep_dma_cyclic;	d->slave.device_issue_pending = zx_dma_issue_pending;	d->slave.device_config = zx_dma_config;	d->slave.device_terminate_all = zx_dma_terminate_all;	d->slave.device_pause = zx_dma_transfer_pause;	d->slave.device_resume = zx_dma_transfer_resume;	d->slave.copy_align = DMA_ALIGN;	d->slave.src_addr_widths = ZX_DMA_BUSWIDTHS;	d->slave.dst_addr_widths = ZX_DMA_BUSWIDTHS;	d->slave.directions = BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)			| BIT(DMA_DEV_TO_MEM);	d->slave.residue_granularity = DMA_RESIDUE_GRANULARITY_SEGMENT;	/* init virtual channel */	d->chans = devm_kzalloc(&op->dev,		d->dma_requests * sizeof(struct zx_dma_chan), GFP_KERNEL);	if (!d->chans)		return -ENOMEM;	for (i = 0; i < d->dma_requests; i++) {		struct zx_dma_chan *c = &d->chans[i];		c->status = DMA_IN_PROGRESS;		INIT_LIST_HEAD(&c->node);		c->vc.desc_free = zx_dma_free_desc;		vchan_init(&c->vc, &d->slave);	}	/* Enable clock before accessing registers */	ret = clk_prepare_enable(d->clk);	if (ret < 0) {		dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret);		goto zx_dma_out;	}	zx_dma_init_state(d);	spin_lock_init(&d->lock);	INIT_LIST_HEAD(&d->chan_pending);	platform_set_drvdata(op, d);	ret = dma_async_device_register(&d->slave);	if (ret)		goto clk_dis;	ret = of_dma_controller_register((&op->dev)->of_node,					 zx_of_dma_simple_xlate, d);	if (ret)		goto of_dma_register_fail;	dev_info(&op->dev, "initialized\n");	return 0;of_dma_register_fail:	dma_async_device_unregister(&d->slave);clk_dis:	clk_disable_unprepare(d->clk);zx_dma_out:	return ret;}
struct zx_dma_dev *d;
struct zx_dma_dev *d;
struct zx_dma_dev
zx_dma_dev
*d
*
d
struct resource *iores;
struct resource *iores;
struct resource
resource
*iores
*
iores
int i, ret = 0;
int i, ret = 0;
int
i
i
ret = 0
ret
= 0
0
iores = platform_get_resource(op, IORESOURCE_MEM, 0);
iores = platform_get_resource(op, IORESOURCE_MEM, 0)
iores
iores
platform_get_resource(op, IORESOURCE_MEM, 0)
platform_get_resource
platform_get_resource
op
op
IORESOURCE_MEM
IORESOURCE_MEM
0
if (!iores)		return -EINVAL;
!iores
iores
iores
return -EINVAL;
-EINVAL
EINVAL
EINVAL
d = devm_kzalloc(&op->dev, sizeof(*d), GFP_KERNEL);
d = devm_kzalloc(&op->dev, sizeof(*d), GFP_KERNEL)
d
d
devm_kzalloc(&op->dev, sizeof(*d), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&op->dev
op->dev
op
op
dev
sizeof(*d)
(*d)
*d
d
d
GFP_KERNEL
GFP_KERNEL
if (!d)		return -ENOMEM;
!d
d
d
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
d->base = devm_ioremap_resource(&op->dev, iores);
d->base = devm_ioremap_resource(&op->dev, iores)
d->base
d
d
base
devm_ioremap_resource(&op->dev, iores)
devm_ioremap_resource
devm_ioremap_resource
&op->dev
op->dev
op
op
dev
iores
iores
if (IS_ERR(d->base))		return PTR_ERR(d->base);
IS_ERR(d->base)
IS_ERR
IS_ERR
d->base
d
d
base
return PTR_ERR(d->base);
PTR_ERR(d->base)
PTR_ERR
PTR_ERR
d->base
d
d
base
of_property_read_u32((&op->dev)->of_node,			     "dma-channels", &d->dma_channels);
of_property_read_u32((&op->dev)->of_node,			     "dma-channels", &d->dma_channels)
of_property_read_u32
of_property_read_u32
(&op->dev)->of_node
(&op->dev)
&op->dev
op->dev
op
op
dev
of_node
"dma-channels"
&d->dma_channels
d->dma_channels
d
d
dma_channels
of_property_read_u32((&op->dev)->of_node,			     "dma-requests", &d->dma_requests);
of_property_read_u32((&op->dev)->of_node,			     "dma-requests", &d->dma_requests)
of_property_read_u32
of_property_read_u32
(&op->dev)->of_node
(&op->dev)
&op->dev
op->dev
op
op
dev
of_node
"dma-requests"
&d->dma_requests
d->dma_requests
d
d
dma_requests
if (!d->dma_requests || !d->dma_channels)		return -EINVAL;
!d->dma_requests || !d->dma_channels
!d->dma_requests
d->dma_requests
d
d
dma_requests
!d->dma_channels
d->dma_channels
d
d
dma_channels
return -EINVAL;
-EINVAL
EINVAL
EINVAL
d->clk = devm_clk_get(&op->dev, NULL);
d->clk = devm_clk_get(&op->dev, NULL)
d->clk
d
d
clk
devm_clk_get(&op->dev, NULL)
devm_clk_get
devm_clk_get
&op->dev
op->dev
op
op
dev
NULL
NULL
if (IS_ERR(d->clk)) {		dev_err(&op->dev, "no dma clk\n");		return PTR_ERR(d->clk);	}
IS_ERR(d->clk)
IS_ERR
IS_ERR
d->clk
d
d
clk
{		dev_err(&op->dev, "no dma clk\n");		return PTR_ERR(d->clk);	}
dev_err(&op->dev, "no dma clk\n");
dev_err(&op->dev, "no dma clk\n")
dev_err
dev_err
&op->dev
op->dev
op
op
dev
"no dma clk\n"
return PTR_ERR(d->clk);
PTR_ERR(d->clk)
PTR_ERR
PTR_ERR
d->clk
d
d
clk
d->irq = platform_get_irq(op, 0);
d->irq = platform_get_irq(op, 0)
d->irq
d
d
irq
platform_get_irq(op, 0)
platform_get_irq
platform_get_irq
op
op
0
ret = devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,			       0, DRIVER_NAME, d);
ret = devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,			       0, DRIVER_NAME, d)
ret
ret
devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,			       0, DRIVER_NAME, d)
devm_request_irq
devm_request_irq
&op->dev
op->dev
op
op
dev
d->irq
d
d
irq
zx_dma_int_handler
zx_dma_int_handler
0
DRIVER_NAME
DRIVER_NAME
d
d
if (ret)		return ret;
ret
ret
return ret;
ret
ret
d->pool = dmam_pool_create(DRIVER_NAME, &op->dev,			LLI_BLOCK_SIZE, 32, 0);
d->pool = dmam_pool_create(DRIVER_NAME, &op->dev,			LLI_BLOCK_SIZE, 32, 0)
d->pool
d
d
pool
dmam_pool_create(DRIVER_NAME, &op->dev,			LLI_BLOCK_SIZE, 32, 0)
dmam_pool_create
dmam_pool_create
DRIVER_NAME
DRIVER_NAME
&op->dev
op->dev
op
op
dev
LLI_BLOCK_SIZE
LLI_BLOCK_SIZE
32
0
if (!d->pool)		return -ENOMEM;
!d->pool
d->pool
d
d
pool
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
d->phy = devm_kzalloc(&op->dev,		d->dma_channels * sizeof(struct zx_dma_phy), GFP_KERNEL);
d->phy = devm_kzalloc(&op->dev,		d->dma_channels * sizeof(struct zx_dma_phy), GFP_KERNEL)
d->phy
d
d
phy
devm_kzalloc(&op->dev,		d->dma_channels * sizeof(struct zx_dma_phy), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&op->dev
op->dev
op
op
dev
d->dma_channels * sizeof(struct zx_dma_phy)
d->dma_channels
d
d
dma_channels
sizeof(struct zx_dma_phy)
struct zx_dma_phy
struct zx_dma_phy
zx_dma_phy

GFP_KERNEL
GFP_KERNEL
if (!d->phy)		return -ENOMEM;
!d->phy
d->phy
d
d
phy
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
for (i = 0; i < d->dma_channels; i++) {		struct zx_dma_phy *p = &d->phy[i];		p->idx = i;		p->base = d->base + i * 0x40;	}
i = 0;
i = 0
i
i
0
i < d->dma_channels
i
i
d->dma_channels
d
d
dma_channels
i++
i
i
{		struct zx_dma_phy *p = &d->phy[i];		p->idx = i;		p->base = d->base + i * 0x40;	}
struct zx_dma_phy *p = &d->phy[i];
struct zx_dma_phy *p = &d->phy[i];
struct zx_dma_phy
zx_dma_phy
*p = &d->phy[i]
*
p
= &d->phy[i]
&d->phy[i]
d->phy[i]
d->phy
d
d
phy
i
i
p->idx = i;
p->idx = i
p->idx
p
p
idx
i
i
p->base = d->base + i * 0x40;
p->base = d->base + i * 0x40
p->base
p
p
base
d->base + i * 0x40
d->base
d
d
base
i * 0x40
i
i
0x40
INIT_LIST_HEAD(&d->slave.channels);
INIT_LIST_HEAD(&d->slave.channels)
INIT_LIST_HEAD
INIT_LIST_HEAD
&d->slave.channels
d->slave.channels
d->slave
d
d
slave
channels
dma_cap_set(DMA_SLAVE, d->slave.cap_mask);
dma_cap_set(DMA_SLAVE, d->slave.cap_mask)
dma_cap_set
dma_cap_set
DMA_SLAVE
DMA_SLAVE
d->slave.cap_mask
d->slave
d
d
slave
cap_mask
dma_cap_set(DMA_MEMCPY, d->slave.cap_mask);
dma_cap_set(DMA_MEMCPY, d->slave.cap_mask)
dma_cap_set
dma_cap_set
DMA_MEMCPY
DMA_MEMCPY
d->slave.cap_mask
d->slave
d
d
slave
cap_mask
dma_cap_set(DMA_CYCLIC, d->slave.cap_mask);
dma_cap_set(DMA_CYCLIC, d->slave.cap_mask)
dma_cap_set
dma_cap_set
DMA_CYCLIC
DMA_CYCLIC
d->slave.cap_mask
d->slave
d
d
slave
cap_mask
dma_cap_set(DMA_PRIVATE, d->slave.cap_mask);
dma_cap_set(DMA_PRIVATE, d->slave.cap_mask)
dma_cap_set
dma_cap_set
DMA_PRIVATE
DMA_PRIVATE
d->slave.cap_mask
d->slave
d
d
slave
cap_mask
d->slave.dev = &op->dev;
d->slave.dev = &op->dev
d->slave.dev
d->slave
d
d
slave
dev
&op->dev
op->dev
op
op
dev
d->slave.device_free_chan_resources = zx_dma_free_chan_resources;
d->slave.device_free_chan_resources = zx_dma_free_chan_resources
d->slave.device_free_chan_resources
d->slave
d
d
slave
device_free_chan_resources
zx_dma_free_chan_resources
zx_dma_free_chan_resources
d->slave.device_tx_status = zx_dma_tx_status;
d->slave.device_tx_status = zx_dma_tx_status
d->slave.device_tx_status
d->slave
d
d
slave
device_tx_status
zx_dma_tx_status
zx_dma_tx_status
d->slave.device_prep_dma_memcpy = zx_dma_prep_memcpy;
d->slave.device_prep_dma_memcpy = zx_dma_prep_memcpy
d->slave.device_prep_dma_memcpy
d->slave
d
d
slave
device_prep_dma_memcpy
zx_dma_prep_memcpy
zx_dma_prep_memcpy
d->slave.device_prep_slave_sg = zx_dma_prep_slave_sg;
d->slave.device_prep_slave_sg = zx_dma_prep_slave_sg
d->slave.device_prep_slave_sg
d->slave
d
d
slave
device_prep_slave_sg
zx_dma_prep_slave_sg
zx_dma_prep_slave_sg
d->slave.device_prep_dma_cyclic = zx_dma_prep_dma_cyclic;
d->slave.device_prep_dma_cyclic = zx_dma_prep_dma_cyclic
d->slave.device_prep_dma_cyclic
d->slave
d
d
slave
device_prep_dma_cyclic
zx_dma_prep_dma_cyclic
zx_dma_prep_dma_cyclic
d->slave.device_issue_pending = zx_dma_issue_pending;
d->slave.device_issue_pending = zx_dma_issue_pending
d->slave.device_issue_pending
d->slave
d
d
slave
device_issue_pending
zx_dma_issue_pending
zx_dma_issue_pending
d->slave.device_config = zx_dma_config;
d->slave.device_config = zx_dma_config
d->slave.device_config
d->slave
d
d
slave
device_config
zx_dma_config
zx_dma_config
d->slave.device_terminate_all = zx_dma_terminate_all;
d->slave.device_terminate_all = zx_dma_terminate_all
d->slave.device_terminate_all
d->slave
d
d
slave
device_terminate_all
zx_dma_terminate_all
zx_dma_terminate_all
d->slave.device_pause = zx_dma_transfer_pause;
d->slave.device_pause = zx_dma_transfer_pause
d->slave.device_pause
d->slave
d
d
slave
device_pause
zx_dma_transfer_pause
zx_dma_transfer_pause
d->slave.device_resume = zx_dma_transfer_resume;
d->slave.device_resume = zx_dma_transfer_resume
d->slave.device_resume
d->slave
d
d
slave
device_resume
zx_dma_transfer_resume
zx_dma_transfer_resume
d->slave.copy_align = DMA_ALIGN;
d->slave.copy_align = DMA_ALIGN
d->slave.copy_align
d->slave
d
d
slave
copy_align
DMA_ALIGN
DMA_ALIGN
d->slave.src_addr_widths = ZX_DMA_BUSWIDTHS;
d->slave.src_addr_widths = ZX_DMA_BUSWIDTHS
d->slave.src_addr_widths
d->slave
d
d
slave
src_addr_widths
ZX_DMA_BUSWIDTHS
ZX_DMA_BUSWIDTHS
d->slave.dst_addr_widths = ZX_DMA_BUSWIDTHS;
d->slave.dst_addr_widths = ZX_DMA_BUSWIDTHS
d->slave.dst_addr_widths
d->slave
d
d
slave
dst_addr_widths
ZX_DMA_BUSWIDTHS
ZX_DMA_BUSWIDTHS
d->slave.directions = BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)			| BIT(DMA_DEV_TO_MEM);
d->slave.directions = BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)			| BIT(DMA_DEV_TO_MEM)
d->slave.directions
d->slave
d
d
slave
directions
BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)			| BIT(DMA_DEV_TO_MEM)
BIT(DMA_MEM_TO_MEM) | BIT(DMA_MEM_TO_DEV)
BIT(DMA_MEM_TO_MEM)
BIT
BIT
DMA_MEM_TO_MEM
DMA_MEM_TO_MEM
BIT(DMA_MEM_TO_DEV)
BIT
BIT
DMA_MEM_TO_DEV
DMA_MEM_TO_DEV
BIT(DMA_DEV_TO_MEM)
BIT
BIT
DMA_DEV_TO_MEM
DMA_DEV_TO_MEM
d->slave.residue_granularity = DMA_RESIDUE_GRANULARITY_SEGMENT;
d->slave.residue_granularity = DMA_RESIDUE_GRANULARITY_SEGMENT
d->slave.residue_granularity
d->slave
d
d
slave
residue_granularity
DMA_RESIDUE_GRANULARITY_SEGMENT
DMA_RESIDUE_GRANULARITY_SEGMENT
d->chans = devm_kzalloc(&op->dev,		d->dma_requests * sizeof(struct zx_dma_chan), GFP_KERNEL);
d->chans = devm_kzalloc(&op->dev,		d->dma_requests * sizeof(struct zx_dma_chan), GFP_KERNEL)
d->chans
d
d
chans
devm_kzalloc(&op->dev,		d->dma_requests * sizeof(struct zx_dma_chan), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&op->dev
op->dev
op
op
dev
d->dma_requests * sizeof(struct zx_dma_chan)
d->dma_requests
d
d
dma_requests
sizeof(struct zx_dma_chan)
struct zx_dma_chan
struct zx_dma_chan
zx_dma_chan

GFP_KERNEL
GFP_KERNEL
if (!d->chans)		return -ENOMEM;
!d->chans
d->chans
d
d
chans
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
for (i = 0; i < d->dma_requests; i++) {		struct zx_dma_chan *c = &d->chans[i];		c->status = DMA_IN_PROGRESS;		INIT_LIST_HEAD(&c->node);		c->vc.desc_free = zx_dma_free_desc;		vchan_init(&c->vc, &d->slave);	}
i = 0;
i = 0
i
i
0
i < d->dma_requests
i
i
d->dma_requests
d
d
dma_requests
i++
i
i
{		struct zx_dma_chan *c = &d->chans[i];		c->status = DMA_IN_PROGRESS;		INIT_LIST_HEAD(&c->node);		c->vc.desc_free = zx_dma_free_desc;		vchan_init(&c->vc, &d->slave);	}
struct zx_dma_chan *c = &d->chans[i];
struct zx_dma_chan *c = &d->chans[i];
struct zx_dma_chan
zx_dma_chan
*c = &d->chans[i]
*
c
= &d->chans[i]
&d->chans[i]
d->chans[i]
d->chans
d
d
chans
i
i
c->status = DMA_IN_PROGRESS;
c->status = DMA_IN_PROGRESS
c->status
c
c
status
DMA_IN_PROGRESS
DMA_IN_PROGRESS
INIT_LIST_HEAD(&c->node);
INIT_LIST_HEAD(&c->node)
INIT_LIST_HEAD
INIT_LIST_HEAD
&c->node
c->node
c
c
node
c->vc.desc_free = zx_dma_free_desc;
c->vc.desc_free = zx_dma_free_desc
c->vc.desc_free
c->vc
c
c
vc
desc_free
zx_dma_free_desc
zx_dma_free_desc
vchan_init(&c->vc, &d->slave);
vchan_init(&c->vc, &d->slave)
vchan_init
vchan_init
&c->vc
c->vc
c
c
vc
&d->slave
d->slave
d
d
slave
ret = clk_prepare_enable(d->clk);
ret = clk_prepare_enable(d->clk)
ret
ret
clk_prepare_enable(d->clk)
clk_prepare_enable
clk_prepare_enable
d->clk
d
d
clk
if (ret < 0) {		dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret);		goto zx_dma_out;	}
ret < 0
ret
ret
0
{		dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret);		goto zx_dma_out;	}
dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret);
dev_err(&op->dev, "clk_prepare_enable failed: %d\n", ret)
dev_err
dev_err
&op->dev
op->dev
op
op
dev
"clk_prepare_enable failed: %d\n"
ret
ret
goto zx_dma_out;
zx_dma_out
zx_dma_init_state(d);
zx_dma_init_state(d)
zx_dma_init_state
zx_dma_init_state
d
d
spin_lock_init(&d->lock);
spin_lock_init(&d->lock)
spin_lock_init
spin_lock_init
&d->lock
d->lock
d
d
lock
INIT_LIST_HEAD(&d->chan_pending);
INIT_LIST_HEAD(&d->chan_pending)
INIT_LIST_HEAD
INIT_LIST_HEAD
&d->chan_pending
d->chan_pending
d
d
chan_pending
platform_set_drvdata(op, d);
platform_set_drvdata(op, d)
platform_set_drvdata
platform_set_drvdata
op
op
d
d
ret = dma_async_device_register(&d->slave);
ret = dma_async_device_register(&d->slave)
ret
ret
dma_async_device_register(&d->slave)
dma_async_device_register
dma_async_device_register
&d->slave
d->slave
d
d
slave
if (ret)		goto clk_dis;
ret
ret
goto clk_dis;
clk_dis
ret = of_dma_controller_register((&op->dev)->of_node,					 zx_of_dma_simple_xlate, d);
ret = of_dma_controller_register((&op->dev)->of_node,					 zx_of_dma_simple_xlate, d)
ret
ret
of_dma_controller_register((&op->dev)->of_node,					 zx_of_dma_simple_xlate, d)
of_dma_controller_register
of_dma_controller_register
(&op->dev)->of_node
(&op->dev)
&op->dev
op->dev
op
op
dev
of_node
zx_of_dma_simple_xlate
zx_of_dma_simple_xlate
d
d
if (ret)		goto of_dma_register_fail;
ret
ret
goto of_dma_register_fail;
of_dma_register_fail
dev_info(&op->dev, "initialized\n");
dev_info(&op->dev, "initialized\n")
dev_info
dev_info
&op->dev
op->dev
op
op
dev
"initialized\n"
return 0;
0
of_dma_register_fail:	dma_async_device_unregister(&d->slave);
of_dma_register_fail
dma_async_device_unregister(&d->slave);
dma_async_device_unregister(&d->slave)
dma_async_device_unregister
dma_async_device_unregister
&d->slave
d->slave
d
d
slave
clk_dis:	clk_disable_unprepare(d->clk);
clk_dis
clk_disable_unprepare(d->clk);
clk_disable_unprepare(d->clk)
clk_disable_unprepare
clk_disable_unprepare
d->clk
d
d
clk
zx_dma_out:	return ret;
zx_dma_out
return ret;
ret
ret
-----joern-----
(109,436,0)
(288,270,0)
(241,186,0)
(70,363,0)
(491,360,0)
(191,131,0)
(472,329,0)
(304,390,0)
(118,266,0)
(386,186,0)
(125,189,0)
(79,388,0)
(88,406,0)
(430,119,0)
(344,50,0)
(40,317,0)
(413,202,0)
(440,429,0)
(351,281,0)
(448,55,0)
(416,493,0)
(283,274,0)
(23,327,0)
(182,215,0)
(375,382,0)
(187,186,0)
(82,97,0)
(439,529,0)
(35,137,0)
(158,274,0)
(131,191,0)
(523,163,0)
(391,142,0)
(496,100,0)
(218,85,0)
(57,72,0)
(443,97,0)
(406,137,0)
(95,45,0)
(309,336,0)
(416,72,0)
(355,340,0)
(125,239,0)
(390,304,0)
(467,186,0)
(487,433,0)
(282,371,0)
(99,357,0)
(398,134,0)
(416,288,0)
(239,302,0)
(395,57,0)
(44,97,0)
(119,97,0)
(336,213,0)
(450,414,0)
(372,200,0)
(501,44,0)
(479,258,0)
(279,186,0)
(205,185,0)
(248,247,0)
(369,276,0)
(384,367,0)
(443,388,0)
(316,532,0)
(363,28,0)
(189,248,0)
(396,45,0)
(34,60,0)
(9,186,0)
(514,340,0)
(519,97,0)
(16,210,0)
(26,201,0)
(382,191,0)
(189,196,0)
(77,20,0)
(100,439,0)
(105,142,0)
(237,348,0)
(240,461,0)
(72,388,0)
(178,82,0)
(189,493,0)
(148,457,0)
(429,440,0)
(530,507,0)
(252,263,0)
(313,186,0)
(358,141,0)
(141,358,0)
(41,51,0)
(189,182,0)
(481,44,0)
(357,388,0)
(455,97,0)
(83,85,0)
(431,259,0)
(458,419,0)
(96,536,0)
(477,382,0)
(97,56,0)
(265,182,0)
(165,97,0)
(331,291,0)
(388,79,0)
(219,491,0)
(338,295,0)
(63,178,0)
(455,205,0)
(39,186,0)
(202,65,0)
(196,242,0)
(6,485,0)
(497,144,0)
(356,471,0)
(146,72,0)
(42,516,0)
(227,210,0)
(317,97,0)
(302,186,0)
(125,9,0)
(381,163,0)
(490,519,0)
(12,101,0)
(20,77,0)
(107,446,0)
(50,188,0)
(304,210,0)
(297,509,0)
(154,186,0)
(435,532,0)
(177,97,0)
(333,164,0)
(502,369,0)
(467,533,0)
(436,411,0)
(432,532,0)
(130,103,0)
(387,186,0)
(91,341,0)
(189,32,0)
(471,34,0)
(261,83,0)
(437,131,0)
(301,509,0)
(11,123,0)
(200,156,0)
(56,328,0)
(2,97,0)
(56,97,0)
(181,69,0)
(229,475,0)
(361,8,0)
(503,196,0)
(268,118,0)
(489,65,0)
(3,475,0)
(189,325,0)
(34,186,0)
(174,468,0)
(134,210,0)
(382,270,0)
(470,23,0)
(309,186,0)
(56,26,0)
(47,338,0)
(11,210,0)
(388,186,0)
(476,340,0)
(322,301,0)
(156,376,0)
(78,72,0)
(29,382,0)
(0,134,0)
(138,212,0)
(117,291,0)
(128,253,0)
(103,186,0)
(236,186,0)
(211,44,0)
(180,209,0)
(299,390,0)
(2,51,0)
(204,77,0)
(312,519,0)
(18,373,0)
(308,51,0)
(208,350,0)
(146,288,0)
(403,65,0)
(311,236,0)
(204,97,0)
(339,432,0)
(359,510,0)
(126,249,0)
(415,177,0)
(317,7,0)
(176,186,0)
(82,178,0)
(384,97,0)
(416,2,0)
(32,419,0)
(488,532,0)
(160,2,0)
(236,194,0)
(25,5,0)
(393,253,0)
(263,194,0)
(516,317,0)
(292,100,0)
(411,436,0)
(416,333,0)
(464,227,0)
(257,316,0)
(113,438,0)
(266,258,0)
(278,7,0)
(294,317,0)
(341,513,0)
(65,202,0)
(423,82,0)
(329,225,0)
(78,288,0)
(78,2,0)
(66,440,0)
(36,202,0)
(425,443,0)
(108,239,0)
(254,462,0)
(491,97,0)
(50,97,0)
(324,433,0)
(194,263,0)
(508,210,0)
(49,325,0)
(330,113,0)
(188,50,0)
(473,43,0)
(189,455,0)
(58,213,0)
(189,141,0)
(273,11,0)
(13,288,0)
(349,454,0)
(177,298,0)
(28,363,0)
(343,255,0)
(10,167,0)
(333,31,0)
(117,35,0)
(43,313,0)
(80,443,0)
(45,208,0)
(197,169,0)
(352,355,0)
(416,301,0)
(412,299,0)
(353,485,0)
(234,186,0)
(281,97,0)
(347,386,0)
(525,25,0)
(255,343,0)
(524,207,0)
(452,291,0)
(189,330,0)
(266,118,0)
(416,325,0)
(246,476,0)
(376,156,0)
(325,360,0)
(30,399,0)
(280,519,0)
(291,51,0)
(247,152,0)
(143,450,0)
(404,515,0)
(443,531,0)
(530,249,0)
(247,339,0)
(313,43,0)
(377,2,0)
(457,210,0)
(236,529,0)
(358,97,0)
(441,248,0)
(457,148,0)
(478,131,0)
(258,210,0)
(464,376,0)
(260,293,0)
(115,50,0)
(400,186,0)
(185,225,0)
(401,456,0)
(492,384,0)
(476,246,0)
(118,353,0)
(169,197,0)
(350,186,0)
(27,156,0)
(451,255,0)
(164,97,0)
(416,196,0)
(61,461,0)
(328,106,0)
(189,23,0)
(462,254,0)
(438,113,0)
(81,104,0)
(169,468,0)
(436,97,0)
(439,100,0)
(385,390,0)
(37,536,0)
(195,461,0)
(357,339,0)
(215,173,0)
(465,44,0)
(511,97,0)
(512,404,0)
(317,516,0)
(190,227,0)
(405,483,0)
(125,78,0)
(428,97,0)
(466,5,0)
(146,182,0)
(64,510,0)
(338,152,0)
(94,271,0)
(399,253,0)
(194,236,0)
(84,146,0)
(320,134,0)
(145,31,0)
(139,355,0)
(74,56,0)
(148,41,0)
(184,302,0)
(485,353,0)
(125,57,0)
(433,97,0)
(450,97,0)
(319,358,0)
(277,529,0)
(15,357,0)
(228,488,0)
(131,210,0)
(421,104,0)
(416,298,0)
(520,23,0)
(531,443,0)
(416,414,0)
(123,11,0)
(494,51,0)
(48,205,0)
(341,340,0)
(171,405,0)
(69,493,0)
(193,373,0)
(310,47,0)
(129,354,0)
(405,128,0)
(422,186,0)
(21,418,0)
(156,200,0)
(198,454,0)
(298,177,0)
(185,411,0)
(454,354,0)
(111,164,0)
(9,467,0)
(189,8,0)
(362,508,0)
(372,97,0)
(205,186,0)
(269,96,0)
(55,270,0)
(302,44,0)
(454,97,0)
(60,34,0)
(510,128,0)
(157,395,0)
(24,173,0)
(416,455,0)
(101,438,0)
(164,333,0)
(259,205,0)
(335,467,0)
(293,416,0)
(135,119,0)
(225,185,0)
(134,320,0)
(300,186,0)
(383,97,0)
(59,333,0)
(357,97,0)
(221,253,0)
(354,112,0)
(320,516,0)
(509,186,0)
(409,165,0)
(461,210,0)
(147,201,0)
(44,165,0)
(369,502,0)
(125,238,0)
(122,258,0)
(397,246,0)
(416,83,0)
(420,249,0)
(482,124,0)
(163,167,0)
(416,208,0)
(484,96,0)
(207,524,0)
(213,97,0)
(515,404,0)
(7,317,0)
(419,32,0)
(113,186,0)
(21,428,0)
(354,454,0)
(440,418,0)
(4,220,0)
(89,177,0)
(284,72,0)
(165,44,0)
(288,97,0)
(416,8,0)
(144,43,0)
(119,301,0)
(508,97,0)
(246,97,0)
(336,309,0)
(92,199,0)
(483,393,0)
(346,327,0)
(258,266,0)
(314,491,0)
(189,178,0)
(209,274,0)
(7,186,0)
(250,348,0)
(233,494,0)
(19,155,0)
(243,47,0)
(173,215,0)
(416,32,0)
(446,532,0)
(9,340,0)
(118,360,0)
(416,330,0)
(332,201,0)
(125,305,0)
(123,79,0)
(114,418,0)
(75,186,0)
(502,128,0)
(285,186,0)
(83,417,0)
(411,185,0)
(104,421,0)
(146,325,0)
(196,142,0)
(370,186,0)
(271,186,0)
(43,144,0)
(72,97,0)
(303,144,0)
(365,455,0)
(342,304,0)
(416,141,0)
(216,485,0)
(427,231,0)
(140,350,0)
(60,124,0)
(272,455,0)
(225,329,0)
(116,428,0)
(463,259,0)
(159,21,0)
(515,341,0)
(202,36,0)
(404,210,0)
(376,464,0)
(46,372,0)
(245,419,0)
(78,182,0)
(189,208,0)
(156,186,0)
(220,186,0)
(321,502,0)
(249,530,0)
(30,128,0)
(36,186,0)
(456,186,0)
(416,248,0)
(384,388,0)
(340,476,0)
(151,30,0)
(295,316,0)
(433,330,0)
(287,363,0)
(475,186,0)
(267,78,0)
(10,186,0)
(142,97,0)
(380,9,0)
(182,97,0)
(264,41,0)
(207,411,0)
(149,275,0)
(136,69,0)
(125,416,0)
(307,384,0)
(189,30,0)
(45,97,0)
(128,429,0)
(429,128,0)
(323,530,0)
(232,44,0)
(244,106,0)
(201,210,0)
(531,284,0)
(378,298,0)
(296,414,0)
(71,510,0)
(224,288,0)
(367,384,0)
(125,146,0)
(348,231,0)
(97,186,0)
(55,97,0)
(201,26,0)
(459,304,0)
(93,186,0)
(517,186,0)
(529,236,0)
(486,508,0)
(474,186,0)
(5,97,0)
(414,450,0)
(485,97,0)
(217,450,0)
(516,320,0)
(447,330,0)
(536,96,0)
(155,186,0)
(428,21,0)
(406,195,0)
(416,23,0)
(22,189,0)
(32,386,0)
(373,232,0)
(67,308,0)
(213,336,0)
(505,417,0)
(248,338,0)
(125,35,0)
(214,502,0)
(62,185,0)
(25,456,0)
(499,432,0)
(189,301,0)
(146,2,0)
(373,210,0)
(438,104,0)
(121,370,0)
(227,464,0)
(520,97,0)
(337,418,0)
(183,165,0)
(124,210,0)
(195,406,0)
(52,81,0)
(274,97,0)
(189,47,0)
(366,173,0)
(536,37,0)
(235,305,0)
(189,25,0)
(286,227,0)
(270,186,0)
(438,101,0)
(527,513,0)
(407,186,0)
(440,259,0)
(79,390,0)
(414,212,0)
(104,81,0)
(185,205,0)
(44,302,0)
(209,532,0)
(125,284,0)
(189,369,0)
(460,128,0)
(53,329,0)
(291,117,0)
(508,186,0)
(535,213,0)
(493,279,0)
(491,316,0)
(348,97,0)
(28,533,0)
(127,248,0)
(444,72,0)
(38,325,0)
(9,7,0)
(142,196,0)
(200,372,0)
(242,186,0)
(461,195,0)
(259,440,0)
(16,343,0)
(23,520,0)
(371,186,0)
(222,32,0)
(339,357,0)
(246,51,0)
(363,97,0)
(291,97,0)
(104,438,0)
(471,275,0)
(189,288,0)
(493,69,0)
(167,163,0)
(325,97,0)
(275,471,0)
(102,480,0)
(203,186,0)
(68,376,0)
(189,186,0)
(35,72,0)
(326,382,0)
(393,483,0)
(189,72,0)
(98,124,0)
(306,72,0)
(364,186,0)
(206,304,0)
(20,280,0)
(392,520,0)
(50,360,0)
(432,339,0)
(232,373,0)
(51,41,0)
(120,152,0)
(76,112,0)
(534,186,0)
(112,186,0)
(394,372,0)
(379,511,0)
(276,253,0)
(298,271,0)
(167,10,0)
(417,97,0)
(54,242,0)
(100,210,0)
(259,97,0)
(51,186,0)
(178,155,0)
(223,457,0)
(112,354,0)
(189,2,0)
(85,186,0)
(189,471,0)
(230,263,0)
(504,246,0)
(453,141,0)
(166,313,0)
(419,97,0)
(189,333,0)
(295,338,0)
(339,247,0)
(353,254,0)
(197,253,0)
(231,220,0)
(328,56,0)
(416,25,0)
(445,204,0)
(506,308,0)
(494,97,0)
(424,16,0)
(189,414,0)
(389,493,0)
(141,371,0)
(106,328,0)
(416,182,0)
(47,446,0)
(519,280,0)
(208,45,0)
(179,186,0)
(353,118,0)
(510,359,0)
(249,97,0)
(511,8,0)
(144,97,0)
(411,207,0)
(255,186,0)
(8,511,0)
(77,204,0)
(360,118,0)
(197,359,0)
(442,404,0)
(132,208,0)
(410,186,0)
(449,432,0)
(308,506,0)
(39,507,0)
(529,439,0)
(251,532,0)
(69,97,0)
(469,399,0)
(96,97,0)
(175,369,0)
(522,30,0)
(343,16,0)
(345,5,0)
(494,93,0)
(280,20,0)
(327,186,0)
(14,436,0)
(8,370,0)
(215,186,0)
(256,186,0)
(87,405,0)
(17,468,0)
(526,276,0)
(498,417,0)
(341,515,0)
(163,97,0)
(191,382,0)
(231,348,0)
(416,47,0)
(329,210,0)
(270,382,0)
(254,353,0)
(480,418,0)
(124,60,0)
(170,457,0)
(168,182,0)
(316,491,0)
(521,494,0)
(507,530,0)
(468,169,0)
(173,210,0)
(533,28,0)
(172,82,0)
(48,97,0)
(86,55,0)
(44,232,0)
(189,83,0)
(416,178,0)
(162,204,0)
(41,148,0)
(301,119,0)
(65,97,0)
(334,235,0)
(483,405,0)
(360,186,0)
(500,338,0)
(73,55,0)
(315,267,0)
(316,295,0)
(90,11,0)
(26,56,0)
(518,16,0)
(318,358,0)
(537,79,0)
(153,48,0)
(359,197,0)
(1,520,0)
(212,186,0)
(150,421,0)
(468,97,0)
(31,186,0)
(308,97,0)
(189,298,0)
(199,238,0)
(417,83,0)
(263,97,0)
(5,25,0)
(402,511,0)
(426,84,0)
(340,186,0)
(275,97,0)
(220,231,0)
(408,428,0)
(161,279,0)
(374,275,0)
(79,123,0)
(35,2,0)
(507,39,0)
(103,97,0)
(110,186,0)
(165,215,0)
(93,494,0)
(192,36,0)
(37,186,0)
(262,164,0)
(48,368,0)
(274,209,0)
(33,341,0)
(290,48,0)
(368,48,0)
(390,186,0)
(446,152,0)
(55,448,0)
(330,433,0)
(416,471,0)
(533,467,0)
(133,308,0)
(460,21,1)
(35,72,1)
(54,196,1)
(32,222,1)
(397,514,1)
(515,404,1)
(55,97,1)
(52,101,1)
(126,420,1)
(174,17,1)
(416,333,1)
(514,21,1)
(263,97,1)
(429,440,1)
(348,250,1)
(189,2,1)
(416,182,1)
(351,97,1)
(227,190,1)
(433,97,1)
(491,97,1)
(358,97,1)
(406,88,1)
(131,478,1)
(207,436,1)
(298,378,1)
(372,394,1)
(189,23,1)
(416,298,1)
(200,372,1)
(384,388,1)
(443,388,1)
(416,178,1)
(122,325,1)
(313,43,1)
(219,500,1)
(335,508,1)
(329,472,1)
(231,427,1)
(216,266,1)
(209,274,1)
(101,12,1)
(135,430,1)
(423,212,1)
(301,119,1)
(371,282,1)
(104,421,1)
(62,411,1)
(58,535,1)
(197,359,1)
(308,51,1)
(77,204,1)
(55,86,1)
(363,287,1)
(426,188,1)
(303,166,1)
(74,328,1)
(416,293,1)
(333,59,1)
(402,371,1)
(141,358,1)
(291,97,1)
(510,128,1)
(454,97,1)
(506,308,1)
(125,146,1)
(14,225,1)
(280,519,1)
(269,484,1)
(218,83,1)
(353,485,1)
(383,299,1)
(163,381,1)
(342,459,1)
(155,19,1)
(189,182,1)
(180,532,1)
(164,111,1)
(503,142,1)
(34,60,1)
(146,182,1)
(50,115,1)
(78,72,1)
(185,62,1)
(390,304,1)
(189,248,1)
(493,69,1)
(502,128,1)
(159,418,1)
(127,441,1)
(434,467,1)
(61,240,1)
(451,343,1)
(204,445,1)
(518,528,1)
(363,97,1)
(418,114,1)
(173,210,1)
(45,97,1)
(368,48,1)
(240,506,1)
(48,97,1)
(287,70,1)
(341,515,1)
(329,210,1)
(473,144,1)
(125,57,1)
(380,93,1)
(357,388,1)
(488,228,1)
(262,350,1)
(251,435,1)
(208,132,1)
(206,385,1)
(288,97,1)
(416,141,1)
(119,97,1)
(343,16,1)
(279,161,1)
(528,7,1)
(386,347,1)
(68,464,1)
(41,264,1)
(189,369,1)
(436,97,1)
(307,388,1)
(486,309,1)
(494,51,1)
(315,448,1)
(166,36,1)
(428,97,1)
(16,424,1)
(181,85,1)
(202,413,1)
(41,148,1)
(362,486,1)
(35,117,1)
(157,20,1)
(31,145,1)
(69,97,1)
(6,216,1)
(450,217,1)
(322,119,1)
(413,65,1)
(299,412,1)
(226,302,1)
(136,181,1)
(530,323,1)
(468,174,1)
(24,182,1)
(249,97,1)
(331,406,1)
(189,47,1)
(330,433,1)
(232,373,1)
(29,326,1)
(189,288,1)
(239,302,1)
(485,97,1)
(352,340,1)
(205,185,1)
(292,496,1)
(360,118,1)
(519,312,1)
(326,375,1)
(345,34,1)
(9,340,1)
(162,236,1)
(1,370,1)
(312,490,1)
(246,97,1)
(172,423,1)
(537,123,1)
(146,2,1)
(70,335,1)
(489,403,1)
(182,97,1)
(144,497,1)
(117,291,1)
(183,232,1)
(340,476,1)
(274,97,1)
(416,301,1)
(297,301,1)
(448,55,1)
(320,134,1)
(13,226,1)
(130,355,1)
(159,480,1)
(461,61,1)
(125,284,1)
(103,130,1)
(94,298,1)
(346,23,1)
(536,96,1)
(306,281,1)
(114,337,1)
(108,226,1)
(427,348,1)
(531,443,1)
(105,391,1)
(520,97,1)
(508,362,1)
(291,51,1)
(222,419,1)
(78,2,1)
(431,463,1)
(471,275,1)
(20,77,1)
(86,73,1)
(118,266,1)
(318,271,1)
(419,97,1)
(479,122,1)
(158,283,1)
(294,40,1)
(67,51,1)
(185,225,1)
(416,288,1)
(404,512,1)
(530,249,1)
(405,87,1)
(385,475,1)
(249,126,1)
(466,345,1)
(140,208,1)
(500,209,1)
(492,307,1)
(484,103,1)
(533,28,1)
(403,192,1)
(464,227,1)
(440,66,1)
(139,352,1)
(239,108,1)
(5,466,1)
(487,324,1)
(30,128,1)
(281,97,1)
(259,431,1)
(316,491,1)
(446,107,1)
(208,45,1)
(125,416,1)
(366,24,1)
(93,494,1)
(229,3,1)
(17,359,1)
(189,83,1)
(504,397,1)
(416,47,1)
(100,210,1)
(147,383,1)
(376,464,1)
(270,382,1)
(66,259,1)
(442,355,1)
(184,215,1)
(361,511,1)
(9,380,1)
(415,89,1)
(353,254,1)
(284,72,1)
(498,327,1)
(28,363,1)
(446,532,1)
(463,460,1)
(499,357,1)
(104,81,1)
(71,64,1)
(428,408,1)
(483,405,1)
(310,243,1)
(178,82,1)
(148,457,1)
(235,334,1)
(81,52,1)
(485,6,1)
(115,344,1)
(281,351,1)
(5,97,1)
(267,315,1)
(497,303,1)
(22,255,1)
(293,260,1)
(394,46,1)
(356,275,1)
(64,276,1)
(56,26,1)
(276,526,1)
(381,523,1)
(189,196,1)
(299,390,1)
(260,368,1)
(79,390,1)
(255,451,1)
(488,532,1)
(438,104,1)
(416,471,1)
(309,336,1)
(338,295,1)
(520,392,1)
(296,450,1)
(416,25,1)
(78,267,1)
(401,25,1)
(57,395,1)
(18,184,1)
(508,97,1)
(467,533,1)
(103,97,1)
(189,325,1)
(237,4,1)
(404,210,1)
(493,389,1)
(0,398,1)
(374,313,1)
(521,233,1)
(377,20,1)
(63,82,1)
(44,501,1)
(494,97,1)
(308,97,1)
(42,320,1)
(378,177,1)
(509,297,1)
(96,269,1)
(246,504,1)
(236,194,1)
(189,333,1)
(202,65,1)
(189,208,1)
(79,123,1)
(355,139,1)
(165,409,1)
(408,116,1)
(49,448,1)
(170,2,1)
(191,131,1)
(134,210,1)
(125,35,1)
(212,138,1)
(298,177,1)
(258,210,1)
(195,461,1)
(91,33,1)
(189,330,1)
(482,471,1)
(189,32,1)
(379,402,1)
(146,84,1)
(259,205,1)
(189,72,1)
(11,273,1)
(494,521,1)
(46,27,1)
(449,499,1)
(443,425,1)
(156,376,1)
(398,278,1)
(97,56,1)
(278,434,1)
(190,286,1)
(341,340,1)
(8,361,1)
(350,140,1)
(111,262,1)
(511,97,1)
(57,72,1)
(173,366,1)
(444,306,1)
(23,470,1)
(83,261,1)
(113,438,1)
(349,76,1)
(417,97,1)
(505,498,1)
(89,386,1)
(248,127,1)
(369,175,1)
(461,210,1)
(125,9,1)
(39,507,1)
(8,511,1)
(201,210,1)
(196,503,1)
(21,428,1)
(416,32,1)
(189,25,1)
(369,502,1)
(412,390,1)
(319,318,1)
(259,97,1)
(236,529,1)
(167,163,1)
(395,157,1)
(325,97,1)
(373,193,1)
(433,487,1)
(255,343,1)
(432,449,1)
(495,528,1)
(76,39,1)
(121,8,1)
(192,220,1)
(333,164,1)
(189,141,1)
(7,317,1)
(268,353,1)
(72,444,1)
(275,149,1)
(396,509,1)
(189,455,1)
(416,208,1)
(282,141,1)
(145,333,1)
(316,257,1)
(20,280,1)
(178,63,1)
(112,354,1)
(193,18,1)
(213,97,1)
(457,210,1)
(432,532,1)
(80,367,1)
(83,417,1)
(109,14,1)
(144,97,1)
(470,520,1)
(284,531,1)
(438,101,1)
(37,536,1)
(334,299,1)
(10,167,1)
(286,367,1)
(141,453,1)
(124,98,1)
(265,168,1)
(443,97,1)
(35,2,1)
(526,369,1)
(392,1,1)
(355,340,1)
(288,224,1)
(409,183,1)
(445,162,1)
(146,72,1)
(84,426,1)
(382,29,1)
(23,520,1)
(204,97,1)
(450,97,1)
(48,205,1)
(73,270,1)
(414,450,1)
(244,26,1)
(271,94,1)
(435,188,1)
(416,83,1)
(213,58,1)
(439,100,1)
(189,414,1)
(304,342,1)
(275,97,1)
(9,7,1)
(25,5,1)
(302,44,1)
(254,485,1)
(453,358,1)
(245,456,1)
(382,191,1)
(231,348,1)
(185,411,1)
(420,209,1)
(459,206,1)
(399,469,1)
(189,22,1)
(273,90,1)
(143,279,1)
(11,210,1)
(56,74,1)
(180,488,1)
(165,215,1)
(416,414,1)
(44,165,1)
(163,97,1)
(305,235,1)
(78,182,1)
(323,249,1)
(289,434,1)
(171,399,1)
(425,80,1)
(19,178,1)
(40,516,1)
(160,377,1)
(220,231,1)
(263,252,1)
(33,515,1)
(264,148,1)
(169,468,1)
(317,97,1)
(507,530,1)
(123,11,1)
(380,527,1)
(437,477,1)
(88,195,1)
(375,191,1)
(522,128,1)
(354,129,1)
(455,97,1)
(519,97,1)
(246,51,1)
(525,5,1)
(82,172,1)
(301,322,1)
(491,314,1)
(175,502,1)
(36,202,1)
(26,201,1)
(38,49,1)
(456,401,1)
(238,199,1)
(478,437,1)
(441,446,1)
(348,97,1)
(455,365,1)
(189,301,1)
(291,452,1)
(266,258,1)
(370,121,1)
(43,144,1)
(227,210,1)
(21,418,1)
(447,433,1)
(341,91,1)
(189,8,1)
(469,30,1)
(411,436,1)
(45,95,1)
(330,447,1)
(532,251,1)
(47,310,1)
(347,32,1)
(79,537,1)
(138,414,1)
(373,210,1)
(194,263,1)
(416,493,1)
(165,97,1)
(411,207,1)
(308,133,1)
(405,128,1)
(406,195,1)
(317,294,1)
(416,248,1)
(414,296,1)
(508,210,1)
(125,239,1)
(132,45,1)
(65,489,1)
(125,238,1)
(224,13,1)
(416,8,1)
(2,160,1)
(391,113,1)
(367,384,1)
(118,268,1)
(188,50,1)
(44,97,1)
(131,210,1)
(358,319,1)
(133,67,1)
(124,210,1)
(65,97,1)
(344,360,1)
(161,493,1)
(336,213,1)
(217,143,1)
(452,331,1)
(151,522,1)
(523,495,1)
(48,290,1)
(51,41,1)
(389,69,1)
(440,259,1)
(314,219,1)
(85,218,1)
(458,245,1)
(146,288,1)
(417,505,1)
(290,153,1)
(304,210,1)
(225,329,1)
(421,150,1)
(419,458,1)
(501,481,1)
(424,518,1)
(50,360,1)
(311,529,1)
(339,432,1)
(277,439,1)
(436,109,1)
(502,321,1)
(72,97,1)
(47,338,1)
(198,349,1)
(223,170,1)
(325,38,1)
(430,155,1)
(214,393,1)
(2,97,1)
(274,158,1)
(142,105,1)
(189,298,1)
(107,47,1)
(119,135,1)
(32,419,1)
(142,97,1)
(535,37,1)
(324,31,1)
(512,442,1)
(471,356,1)
(87,171,1)
(60,124,1)
(129,454,1)
(496,156,1)
(228,247,1)
(189,178,1)
(12,330,1)
(134,0,1)
(149,374,1)
(283,180,1)
(182,265,1)
(254,462,1)
(106,244,1)
(416,23,1)
(153,205,1)
(481,465,1)
(327,346,1)
(230,311,1)
(243,338,1)
(490,77,1)
(27,376,1)
(527,341,1)
(55,270,1)
(164,97,1)
(258,479,1)
(491,360,1)
(99,15,1)
(199,92,1)
(95,396,1)
(529,439,1)
(416,2,1)
(252,230,1)
(388,79,1)
(416,196,1)
(416,455,1)
(25,525,1)
(98,482,1)
(43,473,1)
(354,454,1)
(78,288,1)
(233,289,1)
(250,237,1)
(4,112,1)
(30,151,1)
(516,42,1)
(197,169,1)
(337,368,1)
(480,102,1)
(168,506,1)
(465,211,1)
(468,97,1)
(384,492,1)
(150,81,1)
(416,325,1)
(69,136,1)
(248,338,1)
(196,142,1)
(189,493,1)
(50,97,1)
(357,97,1)
(102,197,1)
(476,246,1)
(59,164,1)
(511,379,1)
(177,415,1)
(457,223,1)
(480,418,1)
(416,72,1)
(211,165,1)
(207,524,1)
(56,328,1)
(393,483,1)
(15,248,1)
(272,242,1)
(233,10,1)
(90,72,1)
(257,491,1)
(332,147,1)
(116,159,1)
(472,53,1)
(359,510,1)
(177,97,1)
(125,305,1)
(201,332,1)
(440,418,1)
(247,339,1)
(9,467,1)
(339,357,1)
(317,516,1)
(477,288,1)
(328,106,1)
(209,532,1)
(454,198,1)
(96,97,1)
(321,214,1)
(128,429,1)
(376,68,1)
(475,229,1)
(372,97,1)
(125,78,1)
(82,97,1)
(125,189,1)
(156,200,1)
(118,353,1)
(357,99,1)
(215,173,1)
(16,210,1)
(416,330,1)
(92,281,1)
(53,455,1)
(316,532,1)
(242,54,1)
(189,30,1)
(44,232,1)
(146,325,1)
(189,471,1)
(384,97,1)
(100,292,1)
(295,316,1)
(510,71,1)
(516,320,1)
(261,417,1)
(529,277,1)
(365,272,1)
(246,97,2)
(260,368,2)
(370,188,2)
(231,348,2)
(514,368,2)
(453,188,2)
(163,97,2)
(189,25,2)
(363,97,2)
(189,182,2)
(160,20,2)
(339,432,2)
(50,97,2)
(377,20,2)
(125,284,2)
(132,188,2)
(77,204,2)
(205,188,2)
(65,97,2)
(17,21,2)
(325,97,2)
(9,355,2)
(276,21,2)
(88,506,2)
(372,367,2)
(213,97,2)
(507,188,2)
(193,506,2)
(397,368,2)
(188,50,2)
(127,209,2)
(487,188,2)
(189,196,2)
(102,21,2)
(96,97,2)
(416,182,2)
(9,528,2)
(218,188,2)
(504,368,2)
(34,60,2)
(323,188,2)
(50,448,2)
(44,97,2)
(189,298,2)
(382,226,2)
(15,209,2)
(249,97,2)
(142,97,2)
(349,188,2)
(165,97,2)
(146,182,2)
(502,21,2)
(416,25,2)
(361,188,2)
(227,367,2)
(446,209,2)
(40,434,2)
(420,188,2)
(191,131,2)
(189,493,2)
(485,448,2)
(139,368,2)
(520,188,2)
(116,368,2)
(158,188,2)
(112,354,2)
(72,281,2)
(251,188,2)
(322,188,2)
(289,434,2)
(482,188,2)
(9,434,2)
(493,188,2)
(99,209,2)
(104,421,2)
(168,506,2)
(386,188,2)
(157,20,2)
(57,72,2)
(248,209,2)
(11,210,2)
(483,21,2)
(393,21,2)
(248,338,2)
(448,226,2)
(237,188,2)
(156,200,2)
(280,77,2)
(417,188,2)
(140,188,2)
(115,448,2)
(178,188,2)
(352,368,2)
(26,201,2)
(485,97,2)
(443,388,2)
(12,188,2)
(44,165,2)
(340,368,2)
(270,226,2)
(415,188,2)
(167,528,2)
(78,288,2)
(50,360,2)
(0,434,2)
(338,295,2)
(189,325,2)
(427,188,2)
(78,72,2)
(441,209,2)
(101,188,2)
(296,188,2)
(523,528,2)
(438,101,2)
(9,467,2)
(438,188,2)
(416,32,2)
(83,417,2)
(369,502,2)
(395,20,2)
(416,47,2)
(416,196,2)
(416,368,2)
(419,188,2)
(189,330,2)
(223,20,2)
(125,9,2)
(255,528,2)
(313,43,2)
(200,367,2)
(207,524,2)
(249,188,2)
(384,281,2)
(307,281,2)
(302,44,2)
(334,299,2)
(360,448,2)
(213,355,2)
(310,209,2)
(490,77,2)
(418,368,2)
(123,11,2)
(87,21,2)
(532,188,2)
(191,226,2)
(468,21,2)
(48,188,2)
(32,419,2)
(470,188,2)
(209,274,2)
(189,72,2)
(216,448,2)
(189,32,2)
(55,97,2)
(518,528,2)
(8,188,2)
(317,516,2)
(263,97,2)
(189,301,2)
(57,20,2)
(141,358,2)
(189,528,2)
(526,21,2)
(457,20,2)
(428,21,2)
(178,82,2)
(2,97,2)
(56,299,2)
(416,414,2)
(104,188,2)
(512,355,2)
(497,188,2)
(119,97,2)
(328,299,2)
(452,506,2)
(37,536,2)
(24,506,2)
(189,333,2)
(202,65,2)
(144,188,2)
(396,188,2)
(200,372,2)
(258,210,2)
(416,330,2)
(411,207,2)
(97,56,2)
(432,532,2)
(31,188,2)
(374,188,2)
(96,355,2)
(314,209,2)
(189,208,2)
(339,357,2)
(530,249,2)
(311,367,2)
(465,506,2)
(421,188,2)
(135,188,2)
(148,20,2)
(402,188,2)
(22,528,2)
(333,164,2)
(404,210,2)
(432,209,2)
(454,188,2)
(159,21,2)
(164,188,2)
(521,434,2)
(189,414,2)
(376,367,2)
(455,188,2)
(85,188,2)
(9,340,2)
(208,45,2)
(281,299,2)
(380,434,2)
(527,355,2)
(403,188,2)
(231,188,2)
(448,55,2)
(21,368,2)
(134,434,2)
(291,97,2)
(21,21,2)
(97,299,2)
(199,281,2)
(108,226,2)
(308,51,2)
(463,21,2)
(45,97,2)
(331,506,2)
(41,20,2)
(434,355,2)
(357,388,2)
(525,188,2)
(280,519,2)
(172,188,2)
(508,97,2)
(354,188,2)
(408,368,2)
(45,188,2)
(530,188,2)
(189,141,2)
(416,493,2)
(419,97,2)
(63,188,2)
(60,124,2)
(473,188,2)
(159,368,2)
(26,299,2)
(439,367,2)
(125,305,2)
(484,355,2)
(80,367,2)
(208,188,2)
(330,188,2)
(324,188,2)
(515,355,2)
(180,188,2)
(114,368,2)
(5,188,2)
(46,367,2)
(443,97,2)
(197,359,2)
(345,188,2)
(175,21,2)
(321,21,2)
(347,188,2)
(429,440,2)
(416,178,2)
(537,281,2)
(246,368,2)
(416,141,2)
(259,205,2)
(288,226,2)
(217,188,2)
(58,355,2)
(228,209,2)
(298,188,2)
(4,188,2)
(118,448,2)
(72,97,2)
(500,209,2)
(124,210,2)
(281,97,2)
(82,188,2)
(79,390,2)
(243,209,2)
(299,390,2)
(38,448,2)
(312,77,2)
(450,97,2)
(506,308,2)
(317,97,2)
(320,434,2)
(269,355,2)
(155,188,2)
(194,263,2)
(358,97,2)
(355,368,2)
(118,353,2)
(433,97,2)
(440,259,2)
(209,209,2)
(423,188,2)
(169,21,2)
(341,340,2)
(125,35,2)
(440,418,2)
(41,148,2)
(104,81,2)
(62,188,2)
(189,369,2)
(305,299,2)
(90,281,2)
(52,188,2)
(259,97,2)
(273,281,2)
(336,355,2)
(531,367,2)
(408,21,2)
(106,299,2)
(201,299,2)
(378,188,2)
(288,97,2)
(392,188,2)
(357,209,2)
(32,188,2)
(143,188,2)
(328,106,2)
(520,97,2)
(447,188,2)
(189,8,2)
(390,304,2)
(495,528,2)
(536,96,2)
(93,494,2)
(44,232,2)
(266,258,2)
(189,23,2)
(198,188,2)
(236,529,2)
(265,506,2)
(170,20,2)
(264,20,2)
(290,188,2)
(511,188,2)
(492,281,2)
(209,188,2)
(183,506,2)
(197,169,2)
(44,506,2)
(477,226,2)
(308,97,2)
(8,511,2)
(461,210,2)
(533,355,2)
(439,100,2)
(185,188,2)
(48,97,2)
(480,418,2)
(78,2,2)
(375,226,2)
(136,188,2)
(79,281,2)
(146,72,2)
(125,416,2)
(189,471,2)
(162,367,2)
(201,210,2)
(64,21,2)
(211,506,2)
(113,438,2)
(220,188,2)
(358,188,2)
(373,506,2)
(301,119,2)
(189,178,2)
(232,506,2)
(173,210,2)
(47,209,2)
(480,21,2)
(51,41,2)
(451,528,2)
(11,281,2)
(131,226,2)
(348,188,2)
(460,21,2)
(277,367,2)
(371,188,2)
(185,225,2)
(156,367,2)
(254,462,2)
(489,188,2)
(516,434,2)
(308,20,2)
(189,30,2)
(1,188,2)
(354,454,2)
(343,16,2)
(35,72,2)
(103,97,2)
(467,533,2)
(194,367,2)
(146,2,2)
(83,188,2)
(469,21,2)
(49,448,2)
(23,520,2)
(330,433,2)
(435,188,2)
(318,188,2)
(376,464,2)
(149,188,2)
(326,226,2)
(233,528,2)
(239,302,2)
(89,188,2)
(521,528,2)
(61,506,2)
(6,448,2)
(28,355,2)
(69,188,2)
(257,209,2)
(169,468,2)
(535,355,2)
(329,188,2)
(236,367,2)
(476,368,2)
(242,188,2)
(222,188,2)
(445,367,2)
(245,188,2)
(302,506,2)
(363,355,2)
(130,355,2)
(167,163,2)
(353,485,2)
(316,532,2)
(348,97,2)
(13,226,2)
(93,528,2)
(373,210,2)
(255,343,2)
(182,97,2)
(309,355,2)
(192,188,2)
(505,188,2)
(494,528,2)
(145,188,2)
(336,213,2)
(329,210,2)
(27,367,2)
(284,367,2)
(153,188,2)
(394,367,2)
(283,209,2)
(34,188,2)
(506,20,2)
(150,188,2)
(177,97,2)
(301,188,2)
(353,448,2)
(51,20,2)
(503,188,2)
(471,188,2)
(332,299,2)
(261,188,2)
(189,2,2)
(190,367,2)
(414,450,2)
(43,144,2)
(502,128,2)
(266,448,2)
(215,173,2)
(284,72,2)
(466,188,2)
(164,97,2)
(416,2,2)
(202,188,2)
(189,248,2)
(247,209,2)
(294,434,2)
(416,301,2)
(533,28,2)
(368,188,2)
(405,21,2)
(367,281,2)
(528,434,2)
(417,97,2)
(292,367,2)
(494,434,2)
(220,231,2)
(59,188,2)
(56,328,2)
(357,97,2)
(212,188,2)
(144,97,2)
(293,368,2)
(133,20,2)
(353,254,2)
(471,275,2)
(5,97,2)
(48,205,2)
(94,188,2)
(295,209,2)
(458,188,2)
(125,57,2)
(134,210,2)
(476,246,2)
(339,209,2)
(424,528,2)
(189,288,2)
(275,188,2)
(21,418,2)
(20,367,2)
(128,429,2)
(340,476,2)
(9,7,2)
(360,118,2)
(491,360,2)
(189,47,2)
(433,188,2)
(501,506,2)
(119,188,2)
(350,188,2)
(259,21,2)
(55,270,2)
(33,355,2)
(320,134,2)
(337,368,2)
(232,373,2)
(291,51,2)
(380,528,2)
(181,188,2)
(214,21,2)
(461,506,2)
(74,299,2)
(225,329,2)
(416,333,2)
(359,21,2)
(366,506,2)
(438,104,2)
(79,123,2)
(174,21,2)
(479,448,2)
(122,448,2)
(156,376,2)
(197,21,2)
(30,21,2)
(60,188,2)
(215,506,2)
(73,226,2)
(304,210,2)
(67,20,2)
(446,532,2)
(444,281,2)
(204,97,2)
(282,188,2)
(283,188,2)
(388,79,2)
(142,188,2)
(126,188,2)
(309,336,2)
(275,97,2)
(507,530,2)
(416,325,2)
(428,97,2)
(125,189,2)
(25,5,2)
(116,21,2)
(10,167,2)
(86,226,2)
(416,471,2)
(70,355,2)
(238,281,2)
(246,51,2)
(416,83,2)
(21,428,2)
(36,188,2)
(98,188,2)
(189,83,2)
(236,194,2)
(404,355,2)
(440,21,2)
(71,21,2)
(398,434,2)
(219,209,2)
(247,339,2)
(252,367,2)
(240,506,2)
(372,97,2)
(362,355,2)
(306,281,2)
(128,21,2)
(105,188,2)
(272,188,2)
(464,367,2)
(443,367,2)
(335,355,2)
(436,97,2)
(274,97,2)
(351,299,2)
(414,188,2)
(380,355,2)
(499,209,2)
(39,188,2)
(165,215,2)
(189,455,2)
(267,448,2)
(389,188,2)
(467,355,2)
(437,226,2)
(146,325,2)
(54,188,2)
(401,188,2)
(428,368,2)
(107,209,2)
(125,78,2)
(344,448,2)
(103,355,2)
(456,188,2)
(268,448,2)
(161,188,2)
(338,209,2)
(317,434,2)
(100,367,2)
(84,188,2)
(515,404,2)
(388,281,2)
(359,510,2)
(498,188,2)
(493,69,2)
(509,188,2)
(92,281,2)
(118,266,2)
(416,298,2)
(511,97,2)
(519,77,2)
(522,21,2)
(442,355,2)
(177,188,2)
(315,448,2)
(383,299,2)
(28,363,2)
(66,21,2)
(381,528,2)
(409,506,2)
(416,248,2)
(29,226,2)
(316,491,2)
(195,506,2)
(69,97,2)
(81,188,2)
(117,291,2)
(416,288,2)
(510,21,2)
(508,210,2)
(16,528,2)
(274,188,2)
(204,367,2)
(406,195,2)
(343,528,2)
(36,202,2)
(431,21,2)
(2,20,2)
(391,188,2)
(184,506,2)
(165,506,2)
(472,188,2)
(416,23,2)
(227,210,2)
(129,188,2)
(158,209,2)
(405,128,2)
(531,443,2)
(416,208,2)
(516,320,2)
(68,367,2)
(468,97,2)
(195,461,2)
(25,188,2)
(384,388,2)
(233,434,2)
(411,188,2)
(411,436,2)
(367,384,2)
(355,340,2)
(483,405,2)
(536,355,2)
(39,507,2)
(488,532,2)
(125,146,2)
(82,97,2)
(163,528,2)
(496,367,2)
(205,185,2)
(224,226,2)
(18,506,2)
(109,188,2)
(239,226,2)
(491,209,2)
(117,506,2)
(124,188,2)
(230,367,2)
(481,506,2)
(488,209,2)
(519,97,2)
(10,528,2)
(494,97,2)
(30,128,2)
(379,188,2)
(141,188,2)
(100,210,2)
(510,128,2)
(138,188,2)
(93,434,2)
(226,506,2)
(147,299,2)
(426,188,2)
(450,188,2)
(55,226,2)
(455,97,2)
(146,288,2)
(313,188,2)
(151,21,2)
(244,299,2)
(166,188,2)
(333,188,2)
(270,382,2)
(112,188,2)
(263,367,2)
(37,355,2)
(125,238,2)
(16,210,2)
(382,191,2)
(529,367,2)
(121,188,2)
(188,448,2)
(196,188,2)
(529,439,2)
(42,434,2)
(384,97,2)
(77,367,2)
(295,316,2)
(278,434,2)
(125,239,2)
(185,411,2)
(274,209,2)
(14,188,2)
(56,26,2)
(298,177,2)
(279,188,2)
(173,506,2)
(35,2,2)
(235,299,2)
(319,188,2)
(287,355,2)
(262,188,2)
(449,209,2)
(43,188,2)
(258,448,2)
(406,506,2)
(464,227,2)
(225,188,2)
(182,506,2)
(95,188,2)
(297,188,2)
(356,188,2)
(491,97,2)
(271,188,2)
(508,355,2)
(250,188,2)
(113,188,2)
(207,188,2)
(346,188,2)
(196,142,2)
(286,367,2)
(416,72,2)
(429,21,2)
(19,188,2)
(148,457,2)
(76,188,2)
(209,532,2)
(494,51,2)
(325,448,2)
(368,48,2)
(65,188,2)
(20,280,2)
(111,188,2)
(47,338,2)
(7,317,2)
(436,188,2)
(78,448,2)
(23,188,2)
(131,210,2)
(416,8,2)
(416,455,2)
(20,77,2)
(7,434,2)
(341,515,2)
(341,355,2)
(316,209,2)
(146,188,2)
(327,188,2)
(78,182,2)
(123,281,2)
(303,188,2)
(425,367,2)
(254,448,2)
(180,209,2)
(171,21,2)
(291,506,2)
(399,21,2)
(393,483,2)
(369,21,2)
(430,188,2)
(365,188,2)
(53,188,2)
(478,226,2)
(454,97,2)
(457,210,2)
(35,506,2)
(413,188,2)
(91,355,2)
(486,355,2)
-----------------------------------
(0,dev)
(1,d)
(2,d->clk)
(3,ret)
(4,DMA_MEMCPY)
(5,d->slave)
(6,dma_channels)
(7,ret = of_dma_controller_register((&op->dev)
(8,d->slave.device_prep_dma_cyclic)
(9,return ret;)
(10,dma_async_device_unregister(&d->slave)
(11,op->dev)
(12,DMA_MEM_TO_MEM)
(13,d)
(14,d)
(15,d)
(16,op->dev)
(17,d)
(18,op)
(19,zx_dma_transfer_resume)
(20,!d->dma_requests || !d->dma_channels)
(21,i < d->dma_requests)
(22,0)
(23,d->slave.device_issue_pending)
(24,op)
(25,d->slave.device_free_chan_resources)
(26,&op->dev)
(27,"dma-channels")
(28,&d->slave)
(29,0)
(30,c->status)
(31,d->slave.dst_addr_widths = ZX_DMA_BUSWIDTHS)
(32,d->slave.device_tx_status)
(33,"clk_prepare_enable failed: %d\\n")
(34,d->slave.dev = &op->dev)
(35,return PTR_ERR(d->clk)
(36,dma_cap_set(DMA_CYCLIC, d->slave.cap_mask)
(37,spin_lock_init(&d->lock)
(38,phy)
(39,INIT_LIST_HEAD(&d->slave.channels)
(40,zx_of_dma_simple_xlate)
(41,devm_clk_get(&op->dev, NULL)
(42,of_node)
(43,d->slave.cap_mask)
(44,devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,\n\\n\\t\\t\\t       0, DRIVER_NAME, d)
(45,d->slave)
(46,d)
(47,p->idx)
(48,d->chans)
(49,d)
(50,d->phy)
(51,d->clk = devm_clk_get(&op->dev, NULL)
(52,DMA_MEM_TO_DEV)
(53,op)
(54,DMA_RESIDUE_GRANULARITY_SEGMENT)
(55,d->pool)
(56,devm_kzalloc(&op->dev, sizeof(*d)
(57,return -EINVAL;)
(58,chan_pending)
(59,dst_addr_widths)
(60,&op->dev)
(61,dev)
(62,GFP_KERNEL)
(63,device_resume)
(64,c)
(65,d->slave)
(66,i)
(67,d)
(68,of_node)
(69,d->slave)
(70,d)
(71,vc)
(72,d->base)
(73,d)
(74,GFP_KERNEL)
(75,i)
(76,DMA_SLAVE)
(77,!d->dma_requests)
(78,return -ENOMEM;)
(79,devm_ioremap_resource(&op->dev, iores)
(80,d)
(81,BIT(DMA_MEM_TO_DEV)
(82,d->slave)
(83,d->slave.device_config)
(84,-ENOMEM)
(85,d->slave.device_config = zx_dma_config)
(86,pool)
(87,node)
(88,"no dma clk\\n")
(89,d)
(90,op)
(91,ret)
(92,ENOMEM)
(93,clk_disable_unprepare(d->clk)
(94,zx_dma_prep_memcpy)
(95,slave)
(96,d->lock)
(97,d = devm_kzalloc(&op->dev, sizeof(*d)
(98,dev)
(99,base)
(100,op->dev)
(101,BIT(DMA_MEM_TO_MEM)
(102,i)
(103,zx_dma_init_state(d)
(104,BIT(DMA_MEM_TO_DEV)
(105,slave)
(106,*d)
(107,i)
(108,ret)
(109,dma_requests)
(110,if (!d->pool)
(111,slave)
(112,dma_cap_set(DMA_SLAVE, d->slave.cap_mask)
(113,d->slave.directions = BIT(DMA_MEM_TO_MEM)
(114,0)
(115,phy)
(116,d)
(117,PTR_ERR(d->clk)
(118,devm_kzalloc(&op->dev,\n\\n\\t\\td->dma_channels * sizeof(struct zx_dma_phy)
(119,d->slave)
(120,p)
(121,zx_dma_prep_dma_cyclic)
(122,op)
(123,&op->dev)
(124,op->dev)
(125,RET)
(126,slave)
(127,base)
(128,*c = &d->chans[i])
(129,cap_mask)
(130,d)
(131,op->dev)
(132,src_addr_widths)
(133,clk)
(134,op->dev)
(135,slave)
(136,slave)
(137,)
(138,zx_dma_transfer_pause)
(139,0)
(140,ZX_DMA_BUSWIDTHS)
(141,d->slave.device_prep_slave_sg)
(142,d->slave)
(143,d)
(144,d->slave)
(145,ZX_DMA_BUSWIDTHS)
(146,return -ENOMEM;)
(147,op)
(148,&op->dev)
(149,slave)
(150,DMA_DEV_TO_MEM)
(151,status)
(152,)
(153,d)
(154,for (i = 0; i < d->dma_channels; i++)
(155,d->slave.device_resume = zx_dma_transfer_resume)
(156,of_property_read_u32((&op->dev)
(157,EINVAL)
(158,dma_channels)
(159,i)
(160,clk)
(161,zx_dma_terminate_all)
(162,d)
(163,d->slave)
(164,d->slave)
(165,d->irq)
(166,DMA_PRIVATE)
(167,&d->slave)
(168,d)
(169,&d->slave)
(170,op)
(171,c)
(172,slave)
(173,platform_get_irq(op, 0)
(174,slave)
(175,desc_free)
(176,clk_dis:)
(177,d->slave)
(178,d->slave.device_resume)
(179,if (ret < 0)
(180,i)
(181,d)
(182,d->irq)
(183,d)
(184,ret)
(185,devm_kzalloc(&op->dev,\n\\n\\t\\td->dma_requests * sizeof(struct zx_dma_chan)
(186,)
(187,ret)
(188,!d->phy)
(189,return 0;)
(190,dev)
(191,&op->dev)
(192,DMA_CYCLIC)
(193,dev)
(194,&d->dma_requests)
(195,&op->dev)
(196,d->slave.residue_granularity)
(197,vchan_init(&c->vc, &d->slave)
(198,slave)
(199,-ENOMEM)
(200,&d->dma_channels)
(201,op->dev)
(202,d->slave.cap_mask)
(203,d)
(204,d->dma_requests)
(205,d->chans = devm_kzalloc(&op->dev,\n\\n\\t\\td->dma_requests * sizeof(struct zx_dma_chan)
(206,op)
(207,sizeof(struct zx_dma_chan)
(208,d->slave.src_addr_widths)
(209,i < d->dma_channels)
(210,struct platform_device *op)
(211,zx_dma_int_handler)
(212,d->slave.device_pause = zx_dma_transfer_pause)
(213,d->chan_pending)
(214,c)
(215,d->irq = platform_get_irq(op, 0)
(216,d)
(217,slave)
(218,zx_dma_config)
(219,d)
(220,dma_cap_set(DMA_MEMCPY, d->slave.cap_mask)
(221,c)
(222,device_tx_status)
(223,dev)
(224,pool)
(225,&op->dev)
(226,ret)
(227,op->dev)
(228,i)
(229,0)
(230,d)
(231,d->slave.cap_mask)
(232,&op->dev)
(233,d)
(234,if (!d)
(235,-EINVAL)
(236,of_property_read_u32((&op->dev)
(237,d)
(238,return -ENOMEM;)
(239,return ret;)
(240,op)
(241,if (IS_ERR(d->base)
(242,d->slave.residue_granularity = DMA_RESIDUE_GRANULARITY_SEGMENT)
(243,p)
(244,d)
(245,d)
(246,d->clk)
(247,p->base = d->base + i * 0x40)
(248,p->base)
(249,d->slave)
(250,slave)
(251,0)
(252,dma_requests)
(253,)
(254,sizeof(struct zx_dma_phy)
(255,dev_info(&op->dev, "initialized\\n")
(256,if (ret)
(257,i)
(258,op->dev)
(259,d->chans)
(260,ENOMEM)
(261,device_config)
(262,d)
(263,d->dma_requests)
(264,NULL)
(265,irq)
(266,&op->dev)
(267,-ENOMEM)
(268,GFP_KERNEL)
(269,lock)
(270,d->pool = dmam_pool_create(DRIVER_NAME, &op->dev,\n\\n\\t\\t\\tLLI_BLOCK_SIZE, 32, 0)
(271,d->slave.device_prep_dma_memcpy = zx_dma_prep_memcpy)
(272,d)
(273,dev)
(274,d->dma_channels)
(275,d->slave)
(276,c->vc.desc_free = zx_dma_free_desc)
(277,of_node)
(278,ret)
(279,d->slave.device_terminate_all = zx_dma_terminate_all)
(280,!d->dma_channels)
(281,!d)
(282,zx_dma_prep_slave_sg)
(283,d)
(284,return PTR_ERR(d->base)
(285,if (!d->dma_requests || !d->dma_channels)
(286,op)
(287,slave)
(288,d->pool)
(289,goto clk_dis;)
(290,chans)
(291,d->clk)
(292,dev)
(293,-ENOMEM)
(294,d)
(295,&d->phy[i])
(296,device_pause)
(297,DMA_ALIGN)
(298,d->slave.device_prep_dma_memcpy)
(299,!iores)
(300,for (i = 0; i < d->dma_requests; i++)
(301,d->slave.copy_align)
(302,ret = devm_request_irq(&op->dev, d->irq, zx_dma_int_handler,\n\\n\\t\\t\\t       0, DRIVER_NAME, d)
(303,d)
(304,platform_get_resource(op, IORESOURCE_MEM, 0)
(305,return -EINVAL;)
(306,d)
(307,d)
(308,d->clk)
(309,INIT_LIST_HEAD(&d->chan_pending)
(310,idx)
(311,"dma-requests")
(312,dma_channels)
(313,dma_cap_set(DMA_PRIVATE, d->slave.cap_mask)
(314,phy)
(315,ENOMEM)
(316,d->phy[i])
(317,of_dma_controller_register((&op->dev)
(318,d)
(319,slave)
(320,&op->dev)
(321,vc)
(322,copy_align)
(323,channels)
(324,d)
(325,d->phy)
(326,32)
(327,d->slave.device_issue_pending = zx_dma_issue_pending)
(328,sizeof(*d)
(329,op->dev)
(330,d->slave.directions)
(331,d)
(332,dev)
(333,d->slave.dst_addr_widths)
(334,EINVAL)
(335,ret)
(336,&d->chan_pending)
(337,i)
(338,*p = &d->phy[i])
(339,d->base + i * 0x40)
(340,ret = clk_prepare_enable(d->clk)
(341,dev_err(&op->dev, "clk_prepare_enable failed: %d\\n", ret)
(342,0)
(343,&op->dev)
(344,d)
(345,d)
(346,zx_dma_issue_pending)
(347,zx_dma_tx_status)
(348,d->slave)
(349,d)
(350,d->slave.src_addr_widths = ZX_DMA_BUSWIDTHS)
(351,d)
(352,ret)
(353,d->dma_channels * sizeof(struct zx_dma_phy)
(354,d->slave.cap_mask)
(355,ret < 0)
(356,dev)
(357,d->base)
(358,d->slave)
(359,&c->vc)
(360,d->phy = devm_kzalloc(&op->dev,\n\\n\\t\\td->dma_channels * sizeof(struct zx_dma_phy)
(361,device_prep_dma_cyclic)
(362,d)
(363,d->slave)
(364,iores)
(365,chans)
(366,0)
(367,IS_ERR(d->base)
(368,!d->chans)
(369,c->vc.desc_free)
(370,d->slave.device_prep_dma_cyclic = zx_dma_prep_dma_cyclic)
(371,d->slave.device_prep_slave_sg = zx_dma_prep_slave_sg)
(372,d->dma_channels)
(373,op->dev)
(374,d)
(375,LLI_BLOCK_SIZE)
(376,(&op->dev)
(377,d)
(378,device_prep_dma_memcpy)
(379,slave)
(380,ret)
(381,slave)
(382,dmam_pool_create(DRIVER_NAME, &op->dev,\n\\n\\t\\t\\tLLI_BLOCK_SIZE, 32, 0)
(383,d)
(384,d->base)
(385,iores)
(386,d->slave.device_tx_status = zx_dma_tx_status)
(387,if (!iores)
(388,d->base = devm_ioremap_resource(&op->dev, iores)
(389,device_terminate_all)
(390,iores = platform_get_resource(op, IORESOURCE_MEM, 0)
(391,d)
(392,slave)
(393,INIT_LIST_HEAD(&c->node)
(394,dma_channels)
(395,-EINVAL)
(396,d)
(397,d)
(398,op)
(399,c->status = DMA_IN_PROGRESS)
(400,if (IS_ERR(d->clk)
(401,zx_dma_free_chan_resources)
(402,d)
(403,d)
(404,op->dev)
(405,c->node)
(406,dev_err(&op->dev, "no dma clk\\n")
(407,if (!d->chans)
(408,dma_requests)
(409,irq)
(410,of_dma_register_fail:)
(411,d->dma_requests * sizeof(struct zx_dma_chan)
(412,iores)
(413,cap_mask)
(414,d->slave.device_pause)
(415,slave)
(416,return -ENOMEM;)
(417,d->slave)
(418,i = 0)
(419,d->slave)
(420,d)
(421,BIT(DMA_DEV_TO_MEM)
(422,if (!d->phy)
(423,d)
(424,dev)
(425,base)
(426,ENOMEM)
(427,cap_mask)
(428,d->dma_requests)
(429,&d->chans[i])
(430,d)
(431,chans)
(432,i * 0x40)
(433,d->slave)
(434,ret)
(435,i)
(436,d->dma_requests)
(437,op)
(438,BIT(DMA_MEM_TO_MEM)
(439,&op->dev)
(440,d->chans[i])
(441,p)
(442,op)
(443,d->base)
(444,base)
(445,dma_requests)
(446,p->idx = i)
(447,directions)
(448,!d->pool)
(449,0x40)
(450,d->slave)
(451,"initialized\\n")
(452,clk)
(453,device_prep_slave_sg)
(454,d->slave)
(455,d->chans)
(456,d->slave.device_free_chan_resources = zx_dma_free_chan_resources)
(457,op->dev)
(458,slave)
(459,IORESOURCE_MEM)
(460,c)
(461,op->dev)
(462,struct zx_dma_phy)
(463,d)
(464,&op->dev)
(465,0)
(466,slave)
(467,ret = dma_async_device_register(&d->slave)
(468,d->slave)
(469,DMA_IN_PROGRESS)
(470,device_issue_pending)
(471,d->slave.dev)
(472,dev)
(473,cap_mask)
(474,zx_dma_out:)
(475,ret = 0)
(476,clk_prepare_enable(d->clk)
(477,DRIVER_NAME)
(478,dev)
(479,dev)
(480,i++)
(481,DRIVER_NAME)
(482,op)
(483,&c->node)
(484,d)
(485,d->dma_channels)
(486,op)
(487,slave)
(488,i++)
(489,slave)
(490,d)
(491,d->phy)
(492,base)
(493,d->slave.device_terminate_all)
(494,d->clk)
(495,goto of_dma_register_fail;)
(496,op)
(497,slave)
(498,d)
(499,i)
(500,p)
(501,d)
(502,c->vc)
(503,residue_granularity)
(504,clk)
(505,slave)
(506,IS_ERR(d->clk)
(507,&d->slave.channels)
(508,platform_set_drvdata(op, d)
(509,d->slave.copy_align = DMA_ALIGN)
(510,c->vc)
(511,d->slave)
(512,dev)
(513,)
(514,ret)
(515,&op->dev)
(516,(&op->dev)
(517,if (ret)
(518,op)
(519,d->dma_channels)
(520,d->slave)
(521,clk)
(522,c)
(523,d)
(524,struct zx_dma_chan)
(525,device_free_chan_resources)
(526,zx_dma_free_desc)
(527,goto zx_dma_out;)
(528,ret)
(529,(&op->dev)
(530,d->slave.channels)
(531,PTR_ERR(d->base)
(532,i = 0)
(533,dma_async_device_register(&d->slave)
(534,if (ret)
(535,d)
(536,&d->lock)
(537,iores)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^