-----label-----
0
-----code-----
static void fill_event(struct v4l2_event *ev, struct v4l2_ctrl *ctrl, u32 changes)
{
	memset(ev->reserved, 0, sizeof(ev->reserved));
	ev->type = V4L2_EVENT_CTRL;
	ev->id = ctrl->id;
	ev->u.ctrl.changes = changes;
	ev->u.ctrl.type = ctrl->type;
	ev->u.ctrl.flags = user_flags(ctrl);
	if (ctrl->is_ptr)
		ev->u.ctrl.value64 = 0;
	else
		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;
	ev->u.ctrl.minimum = ctrl->minimum;
	ev->u.ctrl.maximum = ctrl->maximum;
	if (ctrl->type == V4L2_CTRL_TYPE_MENU
	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
		ev->u.ctrl.step = 1;
	else
		ev->u.ctrl.step = ctrl->step;
	ev->u.ctrl.default_value = ctrl->default_value;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
23,24
24,25
24,26
24,27
24,28
25,26
27,28
27,29
28,29
32,33
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
86,88
87,88
92,93
92,94
93,94
95,96
97,98
97,99
97,100
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
105,107
106,107
106,108
107,108
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
123,124
124,125
124,126
125,126
125,127
126,127
130,131
131,132
131,133
132,133
132,134
133,134
133,135
134,135
134,136
135,136
140,141
140,142
141,142
144,145
145,146
145,147
146,147
146,148
147,148
147,149
148,149
148,150
149,150
154,155
154,156
155,156
158,159
158,160
158,161
159,160
159,161
160,161
160,162
161,162
161,163
162,163
165,166
167,168
167,169
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
176,178
177,178
177,179
178,179
178,180
179,180
185,186
186,187
186,188
187,188
187,189
188,189
188,190
189,190
189,191
190,191
195,196
195,197
196,197
199,200
200,201
200,202
201,202
201,203
202,203
202,204
203,204
203,205
204,205
209,210
209,211
210,211
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,26,29,30,31,36,37,42,43,45,50,51,54,55,62,63,64,65,67,74,75,76,77,80,81,88,89,90,91,94,96,100,101,108,109,110,111,112,119,120,121,122,127,128,129,136,137,138,139,142,143,150,151,152,153,156,157,163,164,166,170,171,173,180,181,182,183,184,191,192,193,194,197,198,205,206,207,208,211,212
-----computeFrom-----
39,40
39,41
47,48
47,49
57,58
57,59
69,70
69,71
83,84
83,85
103,104
103,105
114,115
114,116
131,132
131,133
145,146
145,147
159,160
159,161
160,161
160,162
167,168
167,169
175,176
175,177
186,187
186,188
200,201
200,202
-----guardedBy-----
170,182
-----guardedByNegation-----
170,197
-----lastLexicalUse-----
170,197
-----jump-----
170,197
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static void fill_event(struct v4l2_event *ev, struct v4l2_ctrl *ctrl, u32 changes){	memset(ev->reserved, 0, sizeof(ev->reserved));	ev->type = V4L2_EVENT_CTRL;	ev->id = ctrl->id;	ev->u.ctrl.changes = changes;	ev->u.ctrl.type = ctrl->type;	ev->u.ctrl.flags = user_flags(ctrl);	if (ctrl->is_ptr)		ev->u.ctrl.value64 = 0;	else		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;	ev->u.ctrl.minimum = ctrl->minimum;	ev->u.ctrl.maximum = ctrl->maximum;	if (ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)		ev->u.ctrl.step = 1;	else		ev->u.ctrl.step = ctrl->step;	ev->u.ctrl.default_value = ctrl->default_value;}
static void
fill_event(struct v4l2_event *ev, struct v4l2_ctrl *ctrl, u32 changes)
fill_event
struct v4l2_event *ev
struct v4l2_event
v4l2_event
*ev
*
ev
struct v4l2_ctrl *ctrl
struct v4l2_ctrl
v4l2_ctrl
*ctrl
*
ctrl
u32 changes
u32
u32
changes
changes
{	memset(ev->reserved, 0, sizeof(ev->reserved));	ev->type = V4L2_EVENT_CTRL;	ev->id = ctrl->id;	ev->u.ctrl.changes = changes;	ev->u.ctrl.type = ctrl->type;	ev->u.ctrl.flags = user_flags(ctrl);	if (ctrl->is_ptr)		ev->u.ctrl.value64 = 0;	else		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;	ev->u.ctrl.minimum = ctrl->minimum;	ev->u.ctrl.maximum = ctrl->maximum;	if (ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)		ev->u.ctrl.step = 1;	else		ev->u.ctrl.step = ctrl->step;	ev->u.ctrl.default_value = ctrl->default_value;}
memset(ev->reserved, 0, sizeof(ev->reserved));
memset(ev->reserved, 0, sizeof(ev->reserved))
memset
memset
ev->reserved
ev
ev
reserved
0
sizeof(ev->reserved)
(ev->reserved)
ev->reserved
ev
ev
reserved
ev->type = V4L2_EVENT_CTRL;
ev->type = V4L2_EVENT_CTRL
ev->type
ev
ev
type
V4L2_EVENT_CTRL
V4L2_EVENT_CTRL
ev->id = ctrl->id;
ev->id = ctrl->id
ev->id
ev
ev
id
ctrl->id
ctrl
ctrl
id
ev->u.ctrl.changes = changes;
ev->u.ctrl.changes = changes
ev->u.ctrl.changes
ev->u.ctrl
ev->u
ev
ev
u
ctrl
changes
changes
changes
ev->u.ctrl.type = ctrl->type;
ev->u.ctrl.type = ctrl->type
ev->u.ctrl.type
ev->u.ctrl
ev->u
ev
ev
u
ctrl
type
ctrl->type
ctrl
ctrl
type
ev->u.ctrl.flags = user_flags(ctrl);
ev->u.ctrl.flags = user_flags(ctrl)
ev->u.ctrl.flags
ev->u.ctrl
ev->u
ev
ev
u
ctrl
flags
user_flags(ctrl)
user_flags
user_flags
ctrl
ctrl
if (ctrl->is_ptr)		ev->u.ctrl.value64 = 0;	else		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;
ctrl->is_ptr
ctrl
ctrl
is_ptr
ev->u.ctrl.value64 = 0;
ev->u.ctrl.value64 = 0
ev->u.ctrl.value64
ev->u.ctrl
ev->u
ev
ev
u
ctrl
value64
0
ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;
ev->u.ctrl.value64 = *ctrl->p_cur.p_s64
ev->u.ctrl.value64
ev->u.ctrl
ev->u
ev
ev
u
ctrl
value64
*ctrl->p_cur.p_s64
ctrl->p_cur.p_s64
ctrl->p_cur
ctrl
ctrl
p_cur
p_s64
ev->u.ctrl.minimum = ctrl->minimum;
ev->u.ctrl.minimum = ctrl->minimum
ev->u.ctrl.minimum
ev->u.ctrl
ev->u
ev
ev
u
ctrl
minimum
ctrl->minimum
ctrl
ctrl
minimum
ev->u.ctrl.maximum = ctrl->maximum;
ev->u.ctrl.maximum = ctrl->maximum
ev->u.ctrl.maximum
ev->u.ctrl
ev->u
ev
ev
u
ctrl
maximum
ctrl->maximum
ctrl
ctrl
maximum
if (ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)		ev->u.ctrl.step = 1;	else		ev->u.ctrl.step = ctrl->step;
ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU
ctrl->type == V4L2_CTRL_TYPE_MENU
ctrl->type
ctrl
ctrl
type
V4L2_CTRL_TYPE_MENU
V4L2_CTRL_TYPE_MENU
ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU
ctrl->type
ctrl
ctrl
type
V4L2_CTRL_TYPE_INTEGER_MENU
V4L2_CTRL_TYPE_INTEGER_MENU
ev->u.ctrl.step = 1;
ev->u.ctrl.step = 1
ev->u.ctrl.step
ev->u.ctrl
ev->u
ev
ev
u
ctrl
step
1
ev->u.ctrl.step = ctrl->step;
ev->u.ctrl.step = ctrl->step
ev->u.ctrl.step
ev->u.ctrl
ev->u
ev
ev
u
ctrl
step
ctrl->step
ctrl
ctrl
step
ev->u.ctrl.default_value = ctrl->default_value;
ev->u.ctrl.default_value = ctrl->default_value
ev->u.ctrl.default_value
ev->u.ctrl
ev->u
ev
ev
u
ctrl
default_value
ctrl->default_value
ctrl
ctrl
default_value
-----joern-----
(62,123,0)
(84,28,0)
(14,86,0)
(77,113,0)
(24,59,0)
(106,84,0)
(50,56,0)
(28,84,0)
(43,13,0)
(64,47,0)
(39,140,0)
(123,62,0)
(55,129,0)
(97,81,0)
(94,95,0)
(129,55,0)
(13,131,0)
(6,113,0)
(18,59,0)
(87,115,0)
(52,57,0)
(107,60,0)
(9,56,0)
(4,50,0)
(139,119,0)
(77,16,0)
(34,9,0)
(107,56,0)
(33,136,0)
(111,35,0)
(95,94,0)
(120,94,0)
(40,100,0)
(40,56,0)
(146,35,0)
(30,45,0)
(59,56,0)
(112,37,0)
(97,61,0)
(22,130,0)
(19,119,0)
(93,50,0)
(69,45,0)
(143,107,0)
(137,136,0)
(72,129,0)
(47,56,0)
(119,146,0)
(105,132,0)
(135,35,0)
(85,7,0)
(48,146,0)
(79,55,0)
(58,105,0)
(127,0,0)
(80,37,0)
(62,78,0)
(41,135,0)
(125,47,0)
(114,145,0)
(122,54,0)
(26,13,0)
(61,97,0)
(108,115,0)
(99,61,0)
(0,76,0)
(131,13,0)
(65,40,0)
(109,98,0)
(15,16,0)
(60,107,0)
(92,56,0)
(89,57,0)
(36,9,0)
(70,57,0)
(100,40,0)
(102,132,0)
(47,86,0)
(5,77,0)
(86,130,0)
(0,140,0)
(43,114,0)
(63,59,0)
(7,85,0)
(68,81,0)
(31,54,0)
(141,72,0)
(140,0,0)
(119,139,0)
(8,98,0)
(53,73,0)
(7,35,0)
(72,92,0)
(45,35,0)
(103,140,0)
(2,30,0)
(117,132,0)
(11,131,0)
(21,82,0)
(44,100,0)
(130,86,0)
(130,22,0)
(10,89,0)
(37,56,0)
(71,131,0)
(73,121,0)
(118,123,0)
(51,92,0)
(13,43,0)
(29,45,0)
(115,89,0)
(81,20,0)
(84,111,0)
(92,72,0)
(16,22,0)
(59,24,0)
(132,117,0)
(146,119,0)
(24,57,0)
(140,35,0)
(28,46,0)
(123,35,0)
(132,105,0)
(121,9,0)
(74,7,0)
(139,82,0)
(90,123,0)
(12,35,0)
(138,12,0)
(86,47,0)
(44,30,0)
(114,57,0)
(52,85,0)
(12,52,0)
(76,0,0)
(75,114,0)
(3,40,0)
(54,56,0)
(32,78,0)
(88,61,0)
(96,92,0)
(9,121,0)
(100,57,0)
(49,113,0)
(147,76,0)
(78,24,0)
(135,94,0)
(83,117,0)
(20,136,0)
(16,77,0)
(37,70,0)
(25,12,0)
(110,57,0)
(45,30,0)
(116,28,0)
(142,57,0)
(111,84,0)
(60,57,0)
(38,146,0)
(113,77,0)
(61,35,0)
(105,35,0)
(136,20,0)
(52,12,0)
(66,135,0)
(144,139,0)
(17,95,0)
(128,52,0)
(113,35,0)
(98,55,0)
(78,62,0)
(70,37,0)
(134,111,0)
(1,62,0)
(121,57,0)
(91,73,0)
(124,111,0)
(50,4,0)
(23,97,0)
(131,35,0)
(101,105,0)
(67,43,0)
(136,56,0)
(85,52,0)
(104,7,0)
(4,57,0)
(129,72,0)
(98,56,0)
(126,44,0)
(95,60,0)
(76,4,0)
(117,70,0)
(73,35,0)
(81,97,0)
(27,46,0)
(30,44,0)
(55,98,0)
(115,35,0)
(133,50,0)
(94,135,0)
(123,118,1)
(92,56,1)
(136,56,1)
(41,100,1)
(58,20,1)
(46,27,1)
(78,62,1)
(6,49,1)
(26,131,1)
(117,83,1)
(123,35,1)
(105,35,1)
(20,136,1)
(147,0,1)
(97,23,1)
(73,91,1)
(54,56,1)
(105,101,1)
(84,111,1)
(117,132,1)
(143,95,1)
(99,129,1)
(28,116,1)
(4,50,1)
(16,77,1)
(139,119,1)
(132,105,1)
(121,9,1)
(122,60,1)
(77,5,1)
(60,107,1)
(120,135,1)
(62,123,1)
(58,82,1)
(94,135,1)
(81,97,1)
(71,11,1)
(139,144,1)
(81,68,1)
(93,76,1)
(28,84,1)
(48,129,1)
(22,130,1)
(134,124,1)
(127,140,1)
(31,122,1)
(91,53,1)
(72,141,1)
(13,131,1)
(55,79,1)
(87,108,1)
(44,30,1)
(11,121,1)
(76,147,1)
(90,22,1)
(65,44,1)
(86,14,1)
(114,145,1)
(32,62,1)
(100,40,1)
(75,43,1)
(55,98,1)
(21,139,1)
(90,46,1)
(141,92,1)
(119,19,1)
(9,56,1)
(40,56,1)
(132,102,1)
(8,4,1)
(62,1,1)
(53,89,1)
(131,71,1)
(5,113,1)
(9,34,1)
(61,35,1)
(12,35,1)
(45,35,1)
(140,35,1)
(106,111,1)
(80,117,1)
(10,115,1)
(30,2,1)
(36,73,1)
(97,61,1)
(146,35,1)
(85,7,1)
(103,39,1)
(111,134,1)
(63,78,1)
(3,65,1)
(114,75,1)
(33,137,1)
(113,35,1)
(137,81,1)
(74,104,1)
(98,109,1)
(7,35,1)
(70,37,1)
(7,74,1)
(37,112,1)
(39,24,1)
(78,32,1)
(131,35,1)
(12,138,1)
(125,16,1)
(77,113,1)
(2,45,1)
(86,47,1)
(102,105,1)
(94,120,1)
(128,12,1)
(140,103,1)
(43,67,1)
(59,18,1)
(42,70,1)
(95,94,1)
(40,3,1)
(18,63,1)
(64,125,1)
(68,97,1)
(0,127,1)
(76,0,1)
(24,59,1)
(133,93,1)
(112,80,1)
(126,30,1)
(73,35,1)
(59,56,1)
(84,106,1)
(129,55,1)
(37,56,1)
(107,143,1)
(135,66,1)
(52,12,1)
(146,38,1)
(50,56,1)
(138,25,1)
(43,13,1)
(82,21,1)
(0,140,1)
(66,41,1)
(61,88,1)
(47,64,1)
(79,98,1)
(19,146,1)
(52,85,1)
(96,51,1)
(88,99,1)
(101,58,1)
(16,15,1)
(124,54,1)
(72,92,1)
(69,114,1)
(111,35,1)
(115,87,1)
(135,35,1)
(89,10,1)
(15,77,1)
(14,47,1)
(115,35,1)
(92,96,1)
(113,6,1)
(98,56,1)
(30,45,1)
(29,69,1)
(107,56,1)
(118,90,1)
(1,123,1)
(17,94,1)
(109,8,1)
(34,36,1)
(67,13,1)
(116,84,1)
(38,48,1)
(45,29,1)
(83,132,1)
(144,119,1)
(49,54,1)
(129,72,1)
(47,56,1)
(50,133,1)
(51,55,1)
(108,52,1)
(23,61,1)
(136,33,1)
(27,28,1)
(130,86,1)
(54,31,1)
(13,26,1)
(104,128,1)
(119,146,1)
(44,126,1)
(95,17,1)
(116,54,2)
(111,54,2)
(73,35,2)
(131,35,2)
(48,129,2)
(14,54,2)
(7,35,2)
(40,56,2)
(45,35,2)
(28,54,2)
(9,56,2)
(100,40,2)
(96,55,2)
(19,129,2)
(52,12,2)
(70,37,2)
(20,136,2)
(119,146,2)
(22,130,2)
(15,54,2)
(51,55,2)
(6,54,2)
(30,45,2)
(16,77,2)
(117,132,2)
(115,35,2)
(105,35,2)
(62,123,2)
(137,129,2)
(78,62,2)
(77,54,2)
(81,129,2)
(54,56,2)
(47,56,2)
(146,129,2)
(77,113,2)
(88,129,2)
(136,129,2)
(125,54,2)
(49,54,2)
(130,54,2)
(107,56,2)
(52,85,2)
(139,129,2)
(37,56,2)
(27,54,2)
(114,145,2)
(24,59,2)
(99,129,2)
(119,129,2)
(121,9,2)
(113,35,2)
(86,54,2)
(76,0,2)
(92,55,2)
(22,54,2)
(98,56,2)
(92,56,2)
(140,35,2)
(13,131,2)
(139,119,2)
(135,35,2)
(72,55,2)
(144,129,2)
(84,54,2)
(16,54,2)
(111,35,2)
(95,94,2)
(141,55,2)
(130,86,2)
(106,54,2)
(21,129,2)
(85,7,2)
(5,54,2)
(38,129,2)
(72,92,2)
(134,54,2)
(68,129,2)
(43,13,2)
(136,56,2)
(64,54,2)
(0,140,2)
(94,135,2)
(97,61,2)
(124,54,2)
(50,56,2)
(61,129,2)
(86,47,2)
(4,50,2)
(12,35,2)
(20,129,2)
(60,107,2)
(97,129,2)
(113,54,2)
(132,105,2)
(84,111,2)
(33,129,2)
(28,84,2)
(61,35,2)
(81,97,2)
(23,129,2)
(59,56,2)
(123,35,2)
(146,35,2)
(82,129,2)
(129,72,2)
(129,55,2)
(55,98,2)
(47,54,2)
(46,54,2)
(44,30,2)
-----------------------------------
(0,ev->u.ctrl)
(1,ctrl)
(2,ctrl)
(3,type)
(4,ev->u.ctrl.maximum = ctrl->maximum)
(5,ctrl)
(6,u)
(7,ev->reserved)
(8,ctrl)
(9,ctrl->id)
(10,V4L2_EVENT_CTRL)
(11,ev)
(12,ev->reserved)
(13,ev->u.ctrl)
(14,p_s64)
(15,value64)
(16,ev->u.ctrl.value64)
(17,flags)
(18,minimum)
(19,ctrl)
(20,ev->u.ctrl.step = ctrl->step)
(21,1)
(22,ev->u.ctrl.value64 = *ctrl->p_cur.p_s64)
(23,ctrl)
(24,ev->u.ctrl.minimum = ctrl->minimum)
(25,ev)
(26,ctrl)
(27,0)
(28,ev->u.ctrl.value64)
(29,u)
(30,ev->u.ctrl)
(31,is_ptr)
(32,minimum)
(33,step)
(34,id)
(35,struct v4l2_event *ev)
(36,ctrl)
(37,ctrl->default_value)
(38,u)
(39,ev)
(40,ctrl->type)
(41,ev)
(42,RET)
(43,ev->u.ctrl.changes)
(44,ev->u.ctrl.type)
(45,ev->u)
(46,ev->u.ctrl.value64 = 0)
(47,ctrl->p_cur)
(48,ev)
(49,ev)
(50,ctrl->maximum)
(51,ctrl)
(52,memset(ev->reserved, 0, sizeof(ev->reserved)
(53,ev)
(54,ctrl->is_ptr)
(55,ctrl->type == V4L2_CTRL_TYPE_MENU)
(56,struct v4l2_ctrl *ctrl)
(57,)
(58,ev)
(59,ctrl->minimum)
(60,ev->u.ctrl.flags = user_flags(ctrl)
(61,ev->u)
(62,ev->u.ctrl)
(63,ctrl)
(64,p_cur)
(65,ctrl)
(66,u)
(67,changes)
(68,step)
(69,ev)
(70,ev->u.ctrl.default_value = ctrl->default_value)
(71,u)
(72,ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
(73,ev->id)
(74,reserved)
(75,changes)
(76,ev->u.ctrl.maximum)
(77,ev->u.ctrl)
(78,ev->u.ctrl.minimum)
(79,V4L2_CTRL_TYPE_MENU)
(80,ctrl)
(81,ev->u.ctrl.step)
(82,ev->u.ctrl.step = 1)
(83,default_value)
(84,ev->u.ctrl)
(85,sizeof(ev->reserved)
(86,ctrl->p_cur.p_s64)
(87,type)
(88,u)
(89,ev->type = V4L2_EVENT_CTRL)
(90,ev)
(91,id)
(92,ctrl->type)
(93,ctrl)
(94,ev->u.ctrl)
(95,ev->u.ctrl.flags)
(96,type)
(97,ev->u.ctrl)
(98,ctrl->type)
(99,ev)
(100,ev->u.ctrl.type = ctrl->type)
(101,u)
(102,ctrl)
(103,u)
(104,ev)
(105,ev->u)
(106,ctrl)
(107,user_flags(ctrl)
(108,ev)
(109,type)
(110,if (ctrl->type == V4L2_CTRL_TYPE_MENU\n\\n\\t    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
(111,ev->u)
(112,default_value)
(113,ev->u)
(114,ev->u.ctrl.changes = changes)
(115,ev->type)
(116,value64)
(117,ev->u.ctrl.default_value)
(118,u)
(119,ev->u.ctrl)
(120,ctrl)
(121,ev->id = ctrl->id)
(122,ctrl)
(123,ev->u)
(124,ev)
(125,ctrl)
(126,type)
(127,ctrl)
(128,0)
(129,ctrl->type == V4L2_CTRL_TYPE_MENU\n\\n\\t    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
(130,*ctrl->p_cur.p_s64)
(131,ev->u)
(132,ev->u.ctrl)
(133,maximum)
(134,u)
(135,ev->u)
(136,ctrl->step)
(137,ctrl)
(138,reserved)
(139,ev->u.ctrl.step)
(140,ev->u)
(141,V4L2_CTRL_TYPE_INTEGER_MENU)
(142,if (ctrl->is_ptr)
(143,ctrl)
(144,step)
(145,u32 changes)
(146,ev->u)
(147,maximum)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^