-----label-----
1
-----code-----
static void __dump_instr(const char *lvl, struct pt_regs *regs)
{
	unsigned long addr = instruction_pointer(regs);
	const int thumb = thumb_mode(regs);
	const int width = thumb ? 4 : 8;
	char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;
	int i;

	/*
	 * Note that we now dump the code first, just in case the backtrace
	 * kills us.
	 */

	for (i = -4; i < 1 + !!thumb; i++) {
		unsigned int val, bad;

		if (thumb)
			bad = get_user(val, &((u16 *)addr)[i]);
		else
			bad = get_user(val, &((u32 *)addr)[i]);

		if (!bad)
			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",
					width, val);
		else {
			p += sprintf(p, "bad PC value");
			break;
		}
	}
	printk("%sCode: %s\n", lvl, str);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
17,18
18,19
18,20
20,21
20,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
45,48
46,47
50,51
51,52
51,53
51,54
53,54
53,55
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
60,61
65,66
65,67
65,68
68,69
69,70
71,72
72,73
72,74
74,75
76,77
76,78
76,79
76,80
77,78
78,79
78,80
79,80
81,82
83,84
83,85
84,85
86,87
86,88
88,89
89,90
90,91
92,93
93,94
95,96
95,97
95,98
96,97
97,98
97,99
97,100
99,100
101,102
103,104
103,105
103,106
104,105
106,107
107,108
107,109
108,109
110,111
110,112
110,113
111,112
113,114
115,116
116,117
116,118
117,118
118,119
118,120
119,120
119,121
120,121
122,123
124,125
126,127
128,129
129,130
129,131
130,131
132,133
132,134
132,135
133,134
135,136
137,138
138,139
138,140
139,140
140,141
140,142
141,142
141,143
142,143
144,145
146,147
148,149
150,151
150,152
150,153
151,152
152,153
154,155
155,156
155,157
156,157
158,159
158,160
158,161
158,162
158,163
159,160
161,162
163,164
163,165
163,166
164,165
164,166
165,166
170,171
172,173
174,175
174,176
175,176
176,177
176,178
177,178
179,180
179,181
179,182
180,181
182,183
186,187
187,188
187,189
187,190
187,191
188,189
191,192
193,194
-----nextToken-----
2,4,6,8,9,12,14,15,19,21,25,27,30,32,36,38,41,43,47,48,49,52,54,61,62,63,64,66,67,70,73,75,80,82,85,87,91,94,98,100,102,105,109,112,114,121,123,125,127,131,134,136,143,145,147,149,153,157,160,162,166,167,168,169,171,173,178,181,183,184,185,189,190,192,194
-----computeFrom-----
56,57
56,58
57,58
57,59
58,59
58,60
78,79
78,80
83,84
83,85
86,87
86,88
107,108
107,109
129,130
129,131
155,156
155,157
164,165
164,166
176,177
176,178
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void __dump_instr(const char *lvl, struct pt_regs *regs){	unsigned long addr = instruction_pointer(regs);	const int thumb = thumb_mode(regs);	const int width = thumb ? 4 : 8;	char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;	int i;	/*	 * Note that we now dump the code first, just in case the backtrace	 * kills us.	 */	for (i = -4; i < 1 + !!thumb; i++) {		unsigned int val, bad;		if (thumb)			bad = get_user(val, &((u16 *)addr)[i]);		else			bad = get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}	printk("%sCode: %s\n", lvl, str);}
static void
__dump_instr(const char *lvl, struct pt_regs *regs)
__dump_instr
const char *lvl
const char
*lvl
*
lvl
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
{	unsigned long addr = instruction_pointer(regs);	const int thumb = thumb_mode(regs);	const int width = thumb ? 4 : 8;	char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;	int i;	/*	 * Note that we now dump the code first, just in case the backtrace	 * kills us.	 */	for (i = -4; i < 1 + !!thumb; i++) {		unsigned int val, bad;		if (thumb)			bad = get_user(val, &((u16 *)addr)[i]);		else			bad = get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}	printk("%sCode: %s\n", lvl, str);}
unsigned long addr = instruction_pointer(regs);
unsigned long addr = instruction_pointer(regs);
unsigned long
addr = instruction_pointer(regs)
addr
= instruction_pointer(regs)
instruction_pointer(regs)
instruction_pointer
instruction_pointer
regs
regs
const int thumb = thumb_mode(regs);
const int thumb = thumb_mode(regs);
const int
thumb = thumb_mode(regs)
thumb
= thumb_mode(regs)
thumb_mode(regs)
thumb_mode
thumb_mode
regs
regs
const int width = thumb ? 4 : 8;
const int width = thumb ? 4 : 8;
const int
width = thumb ? 4 : 8
width
= thumb ? 4 : 8
thumb ? 4 : 8
thumb
thumb
4
8
char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;
char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;
char
str[sizeof("00000000 ") * 5 + 2 + 1]
str
[sizeof("00000000 ") * 5 + 2 + 1]
sizeof("00000000 ") * 5 + 2 + 1
sizeof("00000000 ") * 5 + 2
sizeof("00000000 ") * 5
sizeof("00000000 ")
("00000000 ")
"00000000 "
5
2
1
*p = str
*
p
= str
str
str
int i;
int i;
int
i
i
for (i = -4; i < 1 + !!thumb; i++) {		unsigned int val, bad;		if (thumb)			bad = get_user(val, &((u16 *)addr)[i]);		else			bad = get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}
i = -4;
i = -4
i
i
-4
4
i < 1 + !!thumb
i
i
1 + !!thumb
1
!!thumb
!thumb
thumb
thumb
i++
i
i
{		unsigned int val, bad;		if (thumb)			bad = get_user(val, &((u16 *)addr)[i]);		else			bad = get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}
unsigned int val, bad;
unsigned int val, bad;
unsigned int
val
val
bad
bad
if (thumb)			bad = get_user(val, &((u16 *)addr)[i]);		else			bad = get_user(val, &((u32 *)addr)[i]);
thumb
thumb
bad = get_user(val, &((u16 *)addr)[i]);
bad = get_user(val, &((u16 *)addr)[i])
bad
bad
get_user(val, &((u16 *)addr)[i])
get_user
get_user
val
val
&((u16 *)addr)[i]
((u16 *)addr)[i]
((u16 *)addr)
(u16 *)addr
u16 *
u16
u16
*
*
addr
addr
i
i
bad = get_user(val, &((u32 *)addr)[i]);
bad = get_user(val, &((u32 *)addr)[i])
bad
bad
get_user(val, &((u32 *)addr)[i])
get_user
get_user
val
val
&((u32 *)addr)[i]
((u32 *)addr)[i]
((u32 *)addr)
(u32 *)addr
u32 *
u32
u32
*
*
addr
addr
i
i
if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}
!bad
bad
bad
p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);
p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val)
p
p
sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val)
sprintf
sprintf
p
p
i == 0 ? "(%0*x) " : "%0*x "
i == 0
i
i
0
"(%0*x) "
"%0*x "
width
width
val
val
{			p += sprintf(p, "bad PC value");			break;		}
p += sprintf(p, "bad PC value");
p += sprintf(p, "bad PC value")
p
p
sprintf(p, "bad PC value")
sprintf
sprintf
p
p
"bad PC value"
break;
printk("%sCode: %s\n", lvl, str);
printk("%sCode: %s\n", lvl, str)
printk
printk
"%sCode: %s\n"
lvl
lvl
str
str
-----joern-----
(69,38,0)
(73,37,0)
(28,5,0)
(33,46,0)
(81,70,0)
(53,46,0)
(85,37,0)
(9,43,0)
(42,17,0)
(49,60,0)
(60,91,0)
(7,39,0)
(46,53,0)
(34,13,0)
(33,56,0)
(79,54,0)
(66,71,0)
(75,70,0)
(13,50,0)
(86,46,0)
(84,81,0)
(18,50,0)
(2,20,0)
(5,35,0)
(25,59,0)
(5,23,0)
(73,42,0)
(17,17,0)
(42,37,0)
(39,16,0)
(63,70,0)
(57,5,0)
(29,62,0)
(83,77,0)
(73,17,0)
(54,19,0)
(13,17,0)
(12,58,0)
(72,22,0)
(45,79,0)
(82,10,0)
(45,21,0)
(42,62,0)
(26,42,0)
(60,48,0)
(10,82,0)
(50,13,0)
(17,13,0)
(87,5,0)
(68,79,0)
(39,79,0)
(31,58,0)
(40,13,0)
(41,54,0)
(60,70,0)
(42,73,0)
(76,58,0)
(17,37,0)
(24,45,0)
(88,59,0)
(11,35,0)
(48,60,0)
(59,35,0)
(59,25,0)
(14,81,0)
(78,35,0)
(52,82,0)
(32,35,0)
(53,38,0)
(77,20,0)
(81,50,0)
(47,58,0)
(30,37,0)
(21,45,0)
(20,77,0)
(1,16,0)
(37,35,0)
(77,21,0)
(61,35,0)
(38,53,0)
(13,16,0)
(91,60,0)
(65,73,0)
(36,10,0)
(16,39,0)
(6,17,0)
(22,43,0)
(8,73,0)
(48,59,0)
(48,0,0)
(33,59,0)
(43,38,0)
(13,37,0)
(0,48,0)
(79,35,0)
(89,25,0)
(10,91,0)
(80,35,0)
(91,10,0)
(67,39,0)
(54,79,0)
(21,77,0)
(51,48,0)
(71,70,0)
(4,35,0)
(64,33,0)
(56,33,0)
(15,50,0)
(46,33,0)
(44,35,0)
(38,43,0)
(74,39,0)
(25,19,0)
(46,70,0)
(20,70,0)
(22,82,0)
(90,75,0)
(70,71,0)
(50,81,0)
(27,13,0)
(16,35,0)
(26,22,1)
(70,71,1)
(74,7,1)
(5,23,1)
(17,37,1)
(18,81,1)
(8,65,1)
(13,40,1)
(82,10,1)
(17,13,1)
(13,37,1)
(10,91,1)
(83,2,1)
(39,67,1)
(86,33,1)
(13,16,1)
(51,36,1)
(29,42,1)
(25,19,1)
(30,85,1)
(75,90,1)
(73,37,1)
(2,70,1)
(38,53,1)
(22,82,1)
(77,21,1)
(42,17,1)
(79,54,1)
(81,84,1)
(46,70,1)
(84,14,1)
(45,79,1)
(13,17,1)
(60,49,1)
(46,86,1)
(27,6,1)
(73,8,1)
(1,79,1)
(20,70,1)
(64,69,1)
(60,48,1)
(6,22,1)
(69,9,1)
(34,50,1)
(59,25,1)
(72,43,1)
(36,52,1)
(71,66,1)
(3,20,1)
(5,87,1)
(22,72,1)
(50,15,1)
(2,75,1)
(24,83,1)
(25,89,1)
(40,34,1)
(55,5,1)
(15,81,1)
(20,77,1)
(22,43,1)
(16,39,1)
(41,68,1)
(46,33,1)
(9,3,1)
(54,19,1)
(60,70,1)
(81,70,1)
(85,16,1)
(45,24,1)
(68,59,1)
(14,27,1)
(13,50,1)
(33,56,1)
(39,79,1)
(50,18,1)
(42,73,1)
(48,0,1)
(48,59,1)
(89,88,1)
(73,17,1)
(33,59,1)
(57,20,1)
(7,1,1)
(87,28,1)
(42,37,1)
(52,3,1)
(39,74,1)
(17,17,1)
(50,81,1)
(37,30,1)
(67,7,1)
(49,48,1)
(33,64,1)
(63,37,1)
(43,38,1)
(90,17,1)
(28,57,1)
(54,41,1)
(48,51,1)
(66,63,1)
(91,60,1)
(65,26,1)
(53,46,1)
(21,45,1)
(72,82,1)
(75,70,1)
(57,29,1)
(42,17,2)
(42,73,2)
(65,22,2)
(53,46,2)
(53,3,2)
(42,37,2)
(73,22,2)
(59,25,2)
(21,45,2)
(34,22,2)
(46,3,2)
(20,70,2)
(73,37,2)
(42,22,2)
(81,22,2)
(36,3,2)
(24,22,2)
(16,39,2)
(54,19,2)
(13,50,2)
(15,81,2)
(39,79,2)
(75,70,2)
(3,20,2)
(38,53,2)
(52,3,2)
(77,22,2)
(40,22,2)
(50,22,2)
(17,13,2)
(33,59,2)
(20,22,2)
(14,22,2)
(74,7,2)
(10,91,2)
(51,3,2)
(43,3,2)
(49,3,2)
(46,33,2)
(46,70,2)
(21,22,2)
(5,23,2)
(48,59,2)
(91,3,2)
(72,20,2)
(22,20,2)
(90,22,2)
(18,81,2)
(60,70,2)
(26,22,2)
(45,22,2)
(27,22,2)
(50,81,2)
(33,3,2)
(2,22,2)
(43,38,2)
(73,17,2)
(69,3,2)
(8,22,2)
(17,37,2)
(48,0,2)
(67,7,2)
(17,22,2)
(91,60,2)
(25,19,2)
(9,3,2)
(77,21,2)
(70,71,2)
(79,54,2)
(64,3,2)
(22,82,2)
(29,22,2)
(20,77,2)
(86,3,2)
(48,3,2)
(38,3,2)
(81,70,2)
(82,3,2)
(33,56,2)
(82,10,2)
(60,48,2)
(22,43,2)
(17,17,2)
(45,79,2)
(60,3,2)
(10,3,2)
(13,17,2)
(83,22,2)
(13,37,2)
(6,22,2)
(13,22,2)
(75,22,2)
(84,22,2)
(13,16,2)
-----------------------------------
(0,u16 *)
(1,width)
(2,i)
(3,thumb)
(4,p)
(5,printk("%sCode: %s\\n", lvl, str)
(6,p)
(7,thumb)
(8,"bad PC value")
(9,bad)
(10,get_user(val, &((u16 *)
(11,i)
(12,bad)
(13,sprintf(p, i == 0 ? "(%0*x)
(14,i)
(15,"(%0*x)
(16,width = thumb ? 4 : 8)
(17,p += sprintf(p, i == 0 ? "(%0*x)
(18,"%0*x ")
(19,struct pt_regs *regs)
(20,i < 1 + !!thumb)
(21,!!thumb)
(22,!bad)
(23,const char *lvl)
(24,thumb)
(25,instruction_pointer(regs)
(26,p)
(27,p)
(28,lvl)
(29,break;)
(30,str)
(31,if (thumb)
(32,for (i = -4; i < 1 + !!thumb; i++)
(33,(u32 *)
(34,width)
(35,)
(36,val)
(37,*p = str)
(38,get_user(val, &((u32 *)
(39,thumb ? 4 : 8)
(40,val)
(41,regs)
(42,p += sprintf(p, "bad PC value")
(43,bad = get_user(val, &((u32 *)
(44,width)
(45,!thumb)
(46,((u32 *)
(47,val)
(48,(u16 *)
(49,i)
(50,i == 0 ? "(%0*x)
(51,addr)
(52,bad)
(53,&((u32 *)
(54,thumb_mode(regs)
(55,RET)
(56,u32 *)
(57,"%sCode: %s\\n")
(58,)
(59,addr = instruction_pointer(regs)
(60,((u16 *)
(61,addr)
(62,)
(63,i)
(64,addr)
(65,p)
(66,4)
(67,4)
(68,thumb)
(69,val)
(70,i = -4)
(71,-4)
(72,bad)
(73,sprintf(p, "bad PC value")
(74,8)
(75,i++)
(76,if (!bad)
(77,1 + !!thumb)
(78,str)
(79,thumb = thumb_mode(regs)
(80,thumb)
(81,i == 0)
(82,bad = get_user(val, &((u16 *)
(83,1)
(84,0)
(85,p)
(86,i)
(87,str)
(88,addr)
(89,regs)
(90,i)
(91,&((u16 *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^