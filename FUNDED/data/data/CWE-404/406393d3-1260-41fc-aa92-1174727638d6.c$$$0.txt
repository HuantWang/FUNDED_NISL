-----label-----
1
-----code-----
static int * badSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)realloc(data, 100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,27,30,31,35,37,42,44,49,50,51,55,58,59,62
-----computeFrom-----
13,14
13,15
26,27
26,28
33,34
33,35
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * badSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
static int
* badSource(int * data)
*
badSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(27,0,0)
(8,11,0)
(31,22,0)
(30,22,0)
(24,21,0)
(11,21,0)
(27,2,0)
(2,27,0)
(26,20,0)
(28,26,0)
(19,29,0)
(3,20,0)
(18,2,0)
(4,15,0)
(29,21,0)
(13,7,0)
(25,30,0)
(15,12,0)
(26,28,0)
(7,24,0)
(29,24,0)
(29,12,0)
(23,7,0)
(16,15,0)
(7,21,0)
(1,24,0)
(11,24,0)
(14,29,0)
(20,26,0)
(20,30,0)
(17,12,0)
(30,20,0)
(26,24,0)
(23,12,0)
(7,15,0)
(4,24,0)
(20,21,0)
(9,7,0)
(24,12,0)
(22,30,0)
(6,11,0)
(7,23,0)
(24,26,0)
(10,4,0)
(4,21,0)
(5,4,0)
(31,25,1)
(29,19,1)
(13,15,1)
(26,20,1)
(29,21,1)
(24,21,1)
(27,2,1)
(22,31,1)
(3,1,1)
(25,3,1)
(7,21,1)
(5,27,1)
(24,26,1)
(11,8,1)
(20,30,1)
(4,24,1)
(19,23,1)
(18,11,1)
(23,7,1)
(16,4,1)
(2,18,1)
(6,24,1)
(7,15,1)
(29,24,1)
(20,21,1)
(4,10,1)
(9,13,1)
(30,22,1)
(11,21,1)
(8,6,1)
(7,24,1)
(26,28,1)
(4,21,1)
(14,29,1)
(15,16,1)
(11,24,1)
(10,5,1)
(7,9,1)
(5,11,1)
(27,2,2)
(30,22,2)
(4,21,2)
(26,28,2)
(11,24,2)
(7,15,2)
(14,29,2)
(24,21,2)
(2,11,2)
(20,30,2)
(7,24,2)
(23,7,2)
(24,26,2)
(29,24,2)
(29,21,2)
(7,21,2)
(18,11,2)
(11,21,2)
(20,21,2)
(26,20,2)
(4,24,2)
(27,11,2)
-----------------------------------
(0,)
(1,data)
(2,-1)
(3,data)
(4,data[0])
(5,data)
(6,data)
(7,data[0])
(8,NULL)
(9,0)
(10,0)
(11,data == NULL)
(12,)
(13,data)
(14,RET)
(15,data[0] = 5)
(16,5)
(17,if (data == NULL)
(18,1)
(19,data)
(20,realloc(data, 100*sizeof(int)
(21,int * data)
(22,sizeof(int)
(23,printIntLine(data[0])
(24,data = (int *)
(25,100)
(26,(int *)
(27,exit(-1)
(28,int *)
(29,return data;)
(30,100*sizeof(int)
(31,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^