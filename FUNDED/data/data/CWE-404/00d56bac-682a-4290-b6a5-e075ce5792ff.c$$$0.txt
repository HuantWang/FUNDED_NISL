-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_54_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    CWE401_Memory_Leak__int_malloc_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
37,38
37,39
38,39
38,40
39,40
43,44
44,45
44,46
45,46
47,48
47,49
48,49
51,52
52,53
52,54
53,54
55,56
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,40,41,42,46,49,50,54,56
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_54_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    CWE401_Memory_Leak__int_malloc_54b_badSink(data);}
void
CWE401_Memory_Leak__int_malloc_54_bad()
CWE401_Memory_Leak__int_malloc_54_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    CWE401_Memory_Leak__int_malloc_54b_badSink(data);}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
CWE401_Memory_Leak__int_malloc_54b_badSink(data);
CWE401_Memory_Leak__int_malloc_54b_badSink(data)
CWE401_Memory_Leak__int_malloc_54b_badSink
CWE401_Memory_Leak__int_malloc_54b_badSink
data
data
-----joern-----
(15,5,0)
(3,13,0)
(17,2,0)
(9,20,0)
(1,5,0)
(2,9,0)
(25,13,0)
(20,9,0)
(24,3,0)
(16,3,0)
(22,20,0)
(21,6,0)
(4,20,0)
(9,12,0)
(5,4,0)
(19,9,0)
(7,23,0)
(10,23,0)
(14,12,0)
(5,15,0)
(20,4,0)
(13,12,0)
(6,9,0)
(8,2,0)
(0,3,0)
(18,15,0)
(2,13,0)
(20,22,0)
(4,5,0)
(6,12,0)
(16,12,0)
(3,9,0)
(23,12,0)
(3,16,0)
(13,25,1)
(15,18,1)
(4,5,1)
(3,13,1)
(11,6,1)
(5,15,1)
(25,2,1)
(21,16,1)
(8,9,1)
(0,24,1)
(3,0,1)
(2,17,1)
(3,9,1)
(23,10,1)
(9,20,1)
(6,21,1)
(18,1,1)
(24,13,1)
(2,9,1)
(1,19,1)
(10,7,1)
(6,9,1)
(20,22,1)
(16,3,1)
(19,23,1)
(17,8,1)
(20,4,1)
(6,9,2)
(3,9,2)
(2,9,2)
(16,3,2)
(20,22,2)
(4,5,2)
(20,4,2)
(5,15,2)
(9,20,2)
(3,13,2)
-----------------------------------
(0,0)
(1,100)
(2,data[0])
(3,data[0])
(4,malloc(100*sizeof(int)
(5,100*sizeof(int)
(6,CWE401_Memory_Leak__int_malloc_54b_badSink(data)
(7,data)
(8,data)
(9,data = (int *)
(10,NULL)
(11,RET)
(12,)
(13,data[0] = 5)
(14,data)
(15,sizeof(int)
(16,printIntLine(data[0])
(17,0)
(18,int)
(19,data)
(20,(int *)
(21,data)
(22,int *)
(23,data = NULL)
(24,data)
(25,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^