-----label-----
0
-----code-----
static void hpet_legacy_clockevent_register(void)
{
	/* Start HPET legacy interrupts */
	hpet_enable_legacy_int();

	/*
	 * The mult factor is defined as (include/linux/clockchips.h)
	 *  mult/2^shift = cyc/ns (in contrast to ns/cyc in clocksource.h)
	 * hpet_period is in units of femtoseconds (per cycle), so
	 *  mult/2^shift = cyc/ns = 10^6/hpet_period
	 *  mult = (10^6 * 2^shift)/hpet_period
	 *  mult = (FSEC_PER_NSEC << hpet_clockevent.shift)/hpet_period
	 */
	hpet_clockevent.mult = div_sc((unsigned long) FSEC_PER_NSEC,
				      hpet_period, hpet_clockevent.shift);
	/* Calculate the min / max delta */
	hpet_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,
							   &hpet_clockevent);
	/* 5 usec minimum reprogramming delta. */
	hpet_clockevent.min_delta_ns = 5000;

	/*
	 * Start hpet with the boot cpu mask and make it
	 * global after the IO_APIC has been initialized.
	 */
	hpet_clockevent.cpumask = cpumask_of(smp_processor_id());
	clockevents_register_device(&hpet_clockevent);
	global_clock_event = &hpet_clockevent;
	printk(KERN_DEBUG "hpet clockevent registered\n");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
10,11
11,12
12,13
14,15
15,16
15,17
16,17
16,18
17,18
20,21
20,22
20,23
20,24
21,22
23,24
23,25
24,25
24,26
27,28
29,30
31,32
31,33
32,33
35,36
36,37
36,38
37,38
37,39
38,39
41,42
41,43
41,44
42,43
45,46
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
56,58
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
67,68
68,69
68,70
69,70
71,72
72,73
72,74
75,76
76,77
76,78
77,78
79,80
80,81
-----nextToken-----
2,4,6,8,13,18,19,22,25,26,28,30,33,34,39,40,43,44,47,52,53,54,59,60,63,66,70,73,74,78,81
-----computeFrom-----
15,16
15,17
36,37
36,38
49,50
49,51
56,57
56,58
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ProblemStatement;
-----ast_node-----
static void hpet_legacy_clockevent_register(void){	/* Start HPET legacy interrupts */	hpet_enable_legacy_int();	/*	 * The mult factor is defined as (include/linux/clockchips.h)	 *  mult/2^shift = cyc/ns (in contrast to ns/cyc in clocksource.h)	 * hpet_period is in units of femtoseconds (per cycle), so	 *  mult/2^shift = cyc/ns = 10^6/hpet_period	 *  mult = (10^6 * 2^shift)/hpet_period	 *  mult = (FSEC_PER_NSEC << hpet_clockevent.shift)/hpet_period	 */	hpet_clockevent.mult = div_sc((unsigned long) FSEC_PER_NSEC,				      hpet_period, hpet_clockevent.shift);	/* Calculate the min / max delta */	hpet_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,							   &hpet_clockevent);	/* 5 usec minimum reprogramming delta. */	hpet_clockevent.min_delta_ns = 5000;	/*	 * Start hpet with the boot cpu mask and make it	 * global after the IO_APIC has been initialized.	 */	hpet_clockevent.cpumask = cpumask_of(smp_processor_id());	clockevents_register_device(&hpet_clockevent);	global_clock_event = &hpet_clockevent;	printk(KERN_DEBUG "hpet clockevent registered\n");}
static void
hpet_legacy_clockevent_register(void)
hpet_legacy_clockevent_register
void
void


{	/* Start HPET legacy interrupts */	hpet_enable_legacy_int();	/*	 * The mult factor is defined as (include/linux/clockchips.h)	 *  mult/2^shift = cyc/ns (in contrast to ns/cyc in clocksource.h)	 * hpet_period is in units of femtoseconds (per cycle), so	 *  mult/2^shift = cyc/ns = 10^6/hpet_period	 *  mult = (10^6 * 2^shift)/hpet_period	 *  mult = (FSEC_PER_NSEC << hpet_clockevent.shift)/hpet_period	 */	hpet_clockevent.mult = div_sc((unsigned long) FSEC_PER_NSEC,				      hpet_period, hpet_clockevent.shift);	/* Calculate the min / max delta */	hpet_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,							   &hpet_clockevent);	/* 5 usec minimum reprogramming delta. */	hpet_clockevent.min_delta_ns = 5000;	/*	 * Start hpet with the boot cpu mask and make it	 * global after the IO_APIC has been initialized.	 */	hpet_clockevent.cpumask = cpumask_of(smp_processor_id());	clockevents_register_device(&hpet_clockevent);	global_clock_event = &hpet_clockevent;	printk(KERN_DEBUG "hpet clockevent registered\n");}
hpet_enable_legacy_int();
hpet_enable_legacy_int()
hpet_enable_legacy_int
hpet_enable_legacy_int
hpet_clockevent.mult = div_sc((unsigned long) FSEC_PER_NSEC,				      hpet_period, hpet_clockevent.shift);
hpet_clockevent.mult = div_sc((unsigned long) FSEC_PER_NSEC,				      hpet_period, hpet_clockevent.shift)
hpet_clockevent.mult
hpet_clockevent
hpet_clockevent
mult
div_sc((unsigned long) FSEC_PER_NSEC,				      hpet_period, hpet_clockevent.shift)
div_sc
div_sc
(unsigned long) FSEC_PER_NSEC
unsigned long
unsigned long

FSEC_PER_NSEC
FSEC_PER_NSEC
hpet_period
hpet_period
hpet_clockevent.shift
hpet_clockevent
hpet_clockevent
shift
hpet_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,							   &hpet_clockevent);
hpet_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,							   &hpet_clockevent)
hpet_clockevent.max_delta_ns
hpet_clockevent
hpet_clockevent
max_delta_ns
clockevent_delta2ns(0x7FFFFFFF,							   &hpet_clockevent)
clockevent_delta2ns
clockevent_delta2ns
0x7FFFFFFF
&hpet_clockevent
hpet_clockevent
hpet_clockevent
hpet_clockevent.min_delta_ns = 5000;
hpet_clockevent.min_delta_ns = 5000
hpet_clockevent.min_delta_ns
hpet_clockevent
hpet_clockevent
min_delta_ns
5000
hpet_clockevent.cpumask = cpumask_of(smp_processor_id());
hpet_clockevent.cpumask = cpumask_of(smp_processor_id())
hpet_clockevent.cpumask
hpet_clockevent
hpet_clockevent
cpumask
cpumask_of(smp_processor_id())
cpumask_of
cpumask_of
smp_processor_id()
smp_processor_id
smp_processor_id
clockevents_register_device(&hpet_clockevent);
clockevents_register_device(&hpet_clockevent);
clockevents_register_device
clockevents_register_device
(&hpet_clockevent)
&hpet_clockevent
&
hpet_clockevent
global_clock_event = &hpet_clockevent;
global_clock_event = &hpet_clockevent
global_clock_event
global_clock_event
&hpet_clockevent
hpet_clockevent
hpet_clockevent
printk(KERN_DEBUG "hpet clockevent registered\n");
-----joern-----
(28,20,0)
(7,6,0)
(15,0,0)
(26,20,0)
(18,4,0)
(25,31,0)
(2,0,0)
(35,33,0)
(21,2,0)
(22,24,0)
(16,39,0)
(12,0,0)
(13,12,0)
(4,8,0)
(15,40,0)
(34,31,0)
(27,40,0)
(17,11,0)
(39,2,0)
(1,12,0)
(11,20,0)
(8,0,0)
(30,0,0)
(36,29,0)
(8,4,0)
(23,24,0)
(32,3,0)
(24,28,0)
(28,0,0)
(12,1,0)
(11,17,0)
(33,15,0)
(6,29,0)
(40,27,0)
(29,6,0)
(3,20,0)
(14,33,0)
(10,0,0)
(31,10,0)
(5,1,0)
(20,11,0)
(20,3,0)
(19,11,0)
(20,28,0)
(10,29,0)
(40,15,0)
(38,39,0)
(37,3,0)
(29,10,0)
(18,15,1)
(1,5,1)
(7,36,1)
(27,33,1)
(20,11,1)
(34,28,1)
(5,13,1)
(25,34,1)
(3,37,1)
(6,7,1)
(26,11,1)
(39,16,1)
(31,25,1)
(9,12,1)
(28,20,1)
(10,29,1)
(36,31,1)
(40,27,1)
(15,40,1)
(14,35,1)
(21,39,1)
(22,30,1)
(35,2,1)
(38,10,1)
(4,18,1)
(32,26,1)
(8,4,1)
(11,19,1)
(23,22,1)
(33,14,1)
(2,21,1)
(16,38,1)
(19,24,1)
(12,1,1)
(37,32,1)
(29,6,1)
(13,8,1)
(24,23,1)
(20,3,1)
(11,17,1)
(29,6,2)
(28,20,2)
(8,4,2)
(15,40,2)
(12,1,2)
(10,29,2)
(40,27,2)
(11,17,2)
(20,11,2)
(20,3,2)
-----------------------------------
(0,)
(1,&hpet_clockevent)
(2,hpet_clockevent.min_delta_ns = 5000)
(3,hpet_clockevent.shift)
(4,&hpet_clockevent)
(5,hpet_clockevent)
(6,&hpet_clockevent)
(7,hpet_clockevent)
(8,clockevents_register_device(&hpet_clockevent)
(9,RET)
(10,hpet_clockevent.max_delta_ns = clockevent_delta2ns(0x7FFFFFFF,\n\\n\\t\\t\\t\\t\\t\\t\\t   &hpet_clockevent)
(11,(unsigned long)
(12,global_clock_event = &hpet_clockevent)
(13,global_clock_event)
(14,cpumask)
(15,hpet_clockevent.cpumask = cpumask_of(smp_processor_id()
(16,min_delta_ns)
(17,unsigned long)
(18,hpet_clockevent)
(19,FSEC_PER_NSEC)
(20,div_sc((unsigned long)
(21,5000)
(22,hpet_clockevent)
(23,mult)
(24,hpet_clockevent.mult)
(25,max_delta_ns)
(26,hpet_period)
(27,smp_processor_id()
(28,hpet_clockevent.mult = div_sc((unsigned long)
(29,clockevent_delta2ns(0x7FFFFFFF,\n\\n\\t\\t\\t\\t\\t\\t\\t   &hpet_clockevent)
(30,hpet_enable_legacy_int()
(31,hpet_clockevent.max_delta_ns)
(32,hpet_clockevent)
(33,hpet_clockevent.cpumask)
(34,hpet_clockevent)
(35,hpet_clockevent)
(36,0x7FFFFFFF)
(37,shift)
(38,hpet_clockevent)
(39,hpet_clockevent.min_delta_ns)
(40,cpumask_of(smp_processor_id()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^