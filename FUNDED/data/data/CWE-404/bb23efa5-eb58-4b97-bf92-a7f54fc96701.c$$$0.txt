-----label-----
0
-----code-----
void start_secondary(void)
{
	unsigned int cpu;

	cpu_probe();
	per_cpu_trap_init(false);
	mips_clockevent_init();
	mp_ops->init_secondary();
	cpu_report();
	maar_init();

	/*
	 * XXX parity protection should be folded in here when it's converted
	 * to an option instead of something based on .cputype
	 */

	calibrate_delay();
	preempt_disable();
	cpu = smp_processor_id();
	cpu_data[cpu].udelay_val = loops_per_jiffy;

	cpumask_set_cpu(cpu, &cpu_coherent_mask);
	notify_cpu_starting(cpu);

	/* Notify boot CPU that we're starting & ready to sync counters */
	complete(&cpu_starting);

	synchronise_count_slave(cpu);

	/* The CPU is running and counters synchronised, now mark it online */
	set_cpu_online(cpu, true);

	set_cpu_sibling_map(cpu);
	set_cpu_core_map(cpu);

	calculate_cpu_foreign_map();

	/*
	 * Notify boot CPU that we're up & online and it can safely return
	 * from __cpu_up
	 */
	complete(&cpu_running);

	/*
	 * irq will be enabled in ->smp_finish(), enabling it too early
	 * is dangerous.
	 */
	WARN_ON_ONCE(!irqs_disabled());
	mp_ops->smp_finish();

	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
10,11
11,12
11,13
13,14
15,16
16,17
17,18
19,20
20,21
20,22
21,22
24,25
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
35,36
36,37
38,39
39,40
40,41
42,43
43,44
44,45
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
63,64
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
88,89
88,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
99,100
101,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
118,119
120,121
121,122
121,123
122,123
124,125
125,126
125,127
128,129
129,130
129,131
130,131
132,133
133,134
134,135
136,137
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
146,147
147,148
-----nextToken-----
2,4,6,8,12,14,18,22,23,27,32,33,37,41,45,49,53,56,62,64,65,67,71,73,76,80,82,86,89,90,94,96,100,102,103,107,109,113,115,119,123,126,127,131,135,140,141,145,148
-----computeFrom-----
51,52
51,53
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;
-----ast_node-----
void start_secondary(void){	unsigned int cpu;	cpu_probe();	per_cpu_trap_init(false);	mips_clockevent_init();	mp_ops->init_secondary();	cpu_report();	maar_init();	/*	 * XXX parity protection should be folded in here when it's converted	 * to an option instead of something based on .cputype	 */	calibrate_delay();	preempt_disable();	cpu = smp_processor_id();	cpu_data[cpu].udelay_val = loops_per_jiffy;	cpumask_set_cpu(cpu, &cpu_coherent_mask);	notify_cpu_starting(cpu);	/* Notify boot CPU that we're starting & ready to sync counters */	complete(&cpu_starting);	synchronise_count_slave(cpu);	/* The CPU is running and counters synchronised, now mark it online */	set_cpu_online(cpu, true);	set_cpu_sibling_map(cpu);	set_cpu_core_map(cpu);	calculate_cpu_foreign_map();	/*	 * Notify boot CPU that we're up & online and it can safely return	 * from __cpu_up	 */	complete(&cpu_running);	/*	 * irq will be enabled in ->smp_finish(), enabling it too early	 * is dangerous.	 */	WARN_ON_ONCE(!irqs_disabled());	mp_ops->smp_finish();	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);}
void
start_secondary(void)
start_secondary
void
void


{	unsigned int cpu;	cpu_probe();	per_cpu_trap_init(false);	mips_clockevent_init();	mp_ops->init_secondary();	cpu_report();	maar_init();	/*	 * XXX parity protection should be folded in here when it's converted	 * to an option instead of something based on .cputype	 */	calibrate_delay();	preempt_disable();	cpu = smp_processor_id();	cpu_data[cpu].udelay_val = loops_per_jiffy;	cpumask_set_cpu(cpu, &cpu_coherent_mask);	notify_cpu_starting(cpu);	/* Notify boot CPU that we're starting & ready to sync counters */	complete(&cpu_starting);	synchronise_count_slave(cpu);	/* The CPU is running and counters synchronised, now mark it online */	set_cpu_online(cpu, true);	set_cpu_sibling_map(cpu);	set_cpu_core_map(cpu);	calculate_cpu_foreign_map();	/*	 * Notify boot CPU that we're up & online and it can safely return	 * from __cpu_up	 */	complete(&cpu_running);	/*	 * irq will be enabled in ->smp_finish(), enabling it too early	 * is dangerous.	 */	WARN_ON_ONCE(!irqs_disabled());	mp_ops->smp_finish();	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);}
unsigned int cpu;
unsigned int cpu;
unsigned int
cpu
cpu
cpu_probe();
cpu_probe()
cpu_probe
cpu_probe
per_cpu_trap_init(false);
per_cpu_trap_init(false)
per_cpu_trap_init
per_cpu_trap_init
false
mips_clockevent_init();
mips_clockevent_init()
mips_clockevent_init
mips_clockevent_init
mp_ops->init_secondary();
mp_ops->init_secondary()
mp_ops->init_secondary
mp_ops
mp_ops
init_secondary
cpu_report();
cpu_report()
cpu_report
cpu_report
maar_init();
maar_init()
maar_init
maar_init
calibrate_delay();
calibrate_delay()
calibrate_delay
calibrate_delay
preempt_disable();
preempt_disable()
preempt_disable
preempt_disable
cpu = smp_processor_id();
cpu = smp_processor_id()
cpu
cpu
smp_processor_id()
smp_processor_id
smp_processor_id
cpu_data[cpu].udelay_val = loops_per_jiffy;
cpu_data[cpu].udelay_val = loops_per_jiffy
cpu_data[cpu].udelay_val
cpu_data[cpu]
cpu_data
cpu_data
cpu
cpu
udelay_val
loops_per_jiffy
loops_per_jiffy
cpumask_set_cpu(cpu, &cpu_coherent_mask);
cpumask_set_cpu(cpu, &cpu_coherent_mask)
cpumask_set_cpu
cpumask_set_cpu
cpu
cpu
&cpu_coherent_mask
cpu_coherent_mask
cpu_coherent_mask
notify_cpu_starting(cpu);
notify_cpu_starting(cpu)
notify_cpu_starting
notify_cpu_starting
cpu
cpu
complete(&cpu_starting);
complete(&cpu_starting);
complete
complete
(&cpu_starting)
&cpu_starting
&
cpu_starting
synchronise_count_slave(cpu);
synchronise_count_slave(cpu)
synchronise_count_slave
synchronise_count_slave
cpu
cpu
set_cpu_online(cpu, true);
set_cpu_online(cpu, true)
set_cpu_online
set_cpu_online
cpu
cpu
true
set_cpu_sibling_map(cpu);
set_cpu_sibling_map(cpu)
set_cpu_sibling_map
set_cpu_sibling_map
cpu
cpu
set_cpu_core_map(cpu);
set_cpu_core_map(cpu)
set_cpu_core_map
set_cpu_core_map
cpu
cpu
calculate_cpu_foreign_map();
calculate_cpu_foreign_map()
calculate_cpu_foreign_map
calculate_cpu_foreign_map
complete(&cpu_running);
complete(&cpu_running);
complete
complete
(&cpu_running)
&cpu_running
&
cpu_running
WARN_ON_ONCE(!irqs_disabled());
WARN_ON_ONCE(!irqs_disabled())
WARN_ON_ONCE
WARN_ON_ONCE
!irqs_disabled()
irqs_disabled()
irqs_disabled
irqs_disabled
mp_ops->smp_finish();
mp_ops->smp_finish()
mp_ops->smp_finish
mp_ops
mp_ops
smp_finish
cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
cpu_startup_entry
cpu_startup_entry
(CPUHP_AP_ONLINE_IDLE)
CPUHP_AP_ONLINE_IDLE
CPUHP_AP_ONLINE_IDLE
-----joern-----
(47,29,0)
(3,28,0)
(39,41,0)
(1,43,0)
(10,43,0)
(20,37,0)
(16,43,0)
(27,43,0)
(36,48,0)
(24,44,0)
(41,39,0)
(2,12,0)
(29,44,0)
(5,24,0)
(11,7,0)
(25,27,0)
(45,26,0)
(39,43,0)
(39,44,0)
(28,19,0)
(0,43,0)
(33,29,0)
(26,45,0)
(23,36,0)
(24,43,0)
(6,44,0)
(30,43,0)
(7,44,0)
(36,29,0)
(40,43,0)
(17,25,0)
(44,13,0)
(26,49,0)
(12,43,0)
(6,43,0)
(31,43,0)
(22,16,0)
(15,43,0)
(8,43,0)
(13,44,0)
(12,44,0)
(37,43,0)
(21,44,0)
(44,43,0)
(42,10,0)
(32,39,0)
(49,26,0)
(7,43,0)
(4,6,0)
(45,43,0)
(48,43,0)
(38,43,0)
(35,43,0)
(27,25,0)
(19,43,0)
(34,43,0)
(29,36,0)
(9,48,0)
(19,28,0)
(46,6,0)
(14,41,0)
(16,44,0)
(37,20,1)
(12,2,1)
(42,38,1)
(26,49,1)
(1,8,1)
(12,44,1)
(3,35,1)
(7,11,1)
(18,37,1)
(33,47,1)
(20,40,1)
(39,44,1)
(13,21,1)
(16,44,1)
(23,29,1)
(4,7,1)
(40,45,1)
(19,28,1)
(28,3,1)
(21,1,1)
(31,0,1)
(30,31,1)
(0,10,1)
(29,33,1)
(11,27,1)
(7,44,1)
(16,22,1)
(39,41,1)
(14,32,1)
(6,44,1)
(32,48,1)
(24,44,1)
(45,26,1)
(10,42,1)
(6,46,1)
(17,24,1)
(48,9,1)
(8,15,1)
(15,30,1)
(22,12,1)
(27,25,1)
(2,6,1)
(25,17,1)
(35,16,1)
(9,36,1)
(36,29,1)
(46,4,1)
(49,19,1)
(41,14,1)
(44,13,1)
(47,44,1)
(24,5,1)
(29,44,1)
(5,39,1)
(36,23,1)
(39,44,2)
(12,44,2)
(45,26,2)
(24,44,2)
(36,29,2)
(27,25,2)
(16,44,2)
(44,13,2)
(6,44,2)
(39,41,2)
(19,28,2)
(29,44,2)
(26,49,2)
(7,44,2)
-----------------------------------
(0,mips_clockevent_init()
(1,preempt_disable()
(2,cpu)
(3,cpu_running)
(4,cpu)
(5,cpu)
(6,set_cpu_online(cpu, true)
(7,synchronise_count_slave(cpu)
(8,calibrate_delay()
(9,loops_per_jiffy)
(10,per_cpu_trap_init(false)
(11,cpu)
(12,set_cpu_sibling_map(cpu)
(13,smp_processor_id()
(14,cpu_coherent_mask)
(15,maar_init()
(16,set_cpu_core_map(cpu)
(17,cpu_starting)
(18,RET)
(19,complete(&cpu_running)
(20,CPUHP_AP_ONLINE_IDLE)
(21,cpu)
(22,cpu)
(23,udelay_val)
(24,notify_cpu_starting(cpu)
(25,&cpu_starting)
(26,!irqs_disabled()
(27,complete(&cpu_starting)
(28,&cpu_running)
(29,cpu_data[cpu])
(30,cpu_report()
(31,mp_ops->init_secondary()
(32,cpu)
(33,cpu)
(34,cpu)
(35,calculate_cpu_foreign_map()
(36,cpu_data[cpu].udelay_val)
(37,cpu_startup_entry(CPUHP_AP_ONLINE_IDLE)
(38,cpu_probe()
(39,cpumask_set_cpu(cpu, &cpu_coherent_mask)
(40,mp_ops->smp_finish()
(41,&cpu_coherent_mask)
(42,false)
(43,)
(44,cpu = smp_processor_id()
(45,WARN_ON_ONCE(!irqs_disabled()
(46,true)
(47,cpu_data)
(48,cpu_data[cpu].udelay_val = loops_per_jiffy)
(49,irqs_disabled()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^