-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (char *)ALLOCA(100*sizeof(char));
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
37,38
37,39
37,40
38,39
40,41
43,44
44,45
44,46
45,46
47,48
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,42,46,48,49
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    char * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
static void
goodG2B()
goodG2B
{    char * data;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (char *)ALLOCA(100*sizeof(char));    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
;
-----joern-----
(13,4,0)
(16,11,0)
(15,4,0)
(9,1,0)
(19,1,0)
(5,11,0)
(11,5,0)
(18,9,0)
(11,16,0)
(8,7,0)
(7,1,0)
(5,1,0)
(6,5,0)
(11,17,0)
(15,17,0)
(4,15,0)
(17,15,0)
(17,11,0)
(14,15,0)
(7,5,0)
(0,7,0)
(10,12,0)
(12,1,0)
(9,5,0)
(3,12,0)
(4,13,1)
(9,18,1)
(18,7,1)
(7,5,1)
(12,10,1)
(11,16,1)
(14,6,1)
(17,15,1)
(10,3,1)
(0,8,1)
(9,5,1)
(2,9,1)
(11,17,1)
(6,12,1)
(8,5,1)
(7,0,1)
(5,11,1)
(15,4,1)
(13,14,1)
(5,11,2)
(9,5,2)
(15,4,2)
(11,17,2)
(11,16,2)
(7,5,2)
(17,15,2)
-----------------------------------
(0,"A String")
(1,)
(2,RET)
(3,data)
(4,sizeof(char)
(5,data = (char *)
(6,data)
(7,strcpy(data, "A String")
(8,data)
(9,printLine(data)
(10,NULL)
(11,(char *)
(12,data = NULL)
(13,char)
(14,100)
(15,100*sizeof(char)
(16,char *)
(17,ALLOCA(100*sizeof(char)
(18,data)
(19,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^