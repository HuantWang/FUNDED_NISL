-----label-----
0
-----code-----
static void goodG2B()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (int *)ALLOCA(100*sizeof(int));
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
42,43
42,44
43,44
47,48
48,49
48,50
49,50
51,52
51,53
52,53
55,56
57,58
57,59
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,35,38,39,44,45,46,50,53,54,56,58,59
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    int * data;    data = NULL;    goto source;source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int *)ALLOCA(100*sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
static void
goodG2B()
goodG2B
{    int * data;    data = NULL;    goto source;source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int *)ALLOCA(100*sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int *)ALLOCA(100*sizeof(int));
source
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(1,10,0)
(23,25,0)
(7,10,0)
(24,12,0)
(26,25,0)
(14,7,0)
(21,9,0)
(4,20,0)
(16,9,0)
(3,7,0)
(12,24,0)
(20,25,0)
(10,25,0)
(6,24,0)
(20,4,0)
(22,4,0)
(0,24,0)
(2,25,0)
(5,16,0)
(24,20,0)
(12,25,0)
(27,25,0)
(11,25,0)
(4,22,0)
(9,13,0)
(13,4,0)
(7,20,0)
(15,25,0)
(4,13,0)
(24,10,0)
(18,26,0)
(9,16,0)
(19,20,0)
(13,9,0)
(17,26,0)
(4,22,1)
(1,7,1)
(21,19,1)
(24,0,1)
(3,14,1)
(8,11,1)
(6,10,1)
(18,17,1)
(0,6,1)
(11,12,1)
(10,1,1)
(20,4,1)
(24,10,1)
(19,2,1)
(14,20,1)
(9,16,1)
(13,9,1)
(2,26,1)
(24,20,1)
(16,5,1)
(7,20,1)
(4,13,1)
(12,24,1)
(7,3,1)
(5,21,1)
(26,18,1)
(4,22,2)
(7,20,2)
(24,20,2)
(12,24,2)
(9,16,2)
(20,4,2)
(4,13,2)
(24,10,2)
(13,9,2)
-----------------------------------
(0,0)
(1,5)
(2,goto source;)
(3,0)
(4,(int *)
(5,int)
(6,data)
(7,data[0])
(8,RET)
(9,100*sizeof(int)
(10,data[0] = 5)
(11,goto sink;)
(12,printIntLine(data[0])
(13,ALLOCA(100*sizeof(int)
(14,data)
(15,data)
(16,sizeof(int)
(17,data)
(18,NULL)
(19,data)
(20,data = (int *)
(21,100)
(22,int *)
(23,source:)
(24,data[0])
(25,)
(26,data = NULL)
(27,sink:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^