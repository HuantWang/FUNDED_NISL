-----label-----
1
-----code-----
long bch_bucket_alloc(struct cache *ca, unsigned reserve, bool wait)
{
	DEFINE_WAIT(w);
	struct bucket *b;
	long r;

	/* fastpath */
	if (fifo_pop(&ca->free[RESERVE_NONE], r) ||
	    fifo_pop(&ca->free[reserve], r))
		goto out;

	if (!wait) {
		trace_bcache_alloc_fail(ca, reserve);
		return -1;
	}

	do {
		prepare_to_wait(&ca->set->bucket_wait, &w,
				TASK_UNINTERRUPTIBLE);

		mutex_unlock(&ca->set->bucket_lock);
		schedule();
		mutex_lock(&ca->set->bucket_lock);
	} while (!fifo_pop(&ca->free[RESERVE_NONE], r) &&
		 !fifo_pop(&ca->free[reserve], r));

	finish_wait(&ca->set->bucket_wait, &w);
out:
	if (ca->alloc_thread)
		wake_up_process(ca->alloc_thread);

	trace_bcache_alloc(ca, reserve);

	if (expensive_debug_checks(ca->set)) {
		size_t iter;
		long i;
		unsigned j;

		for (iter = 0; iter < prio_buckets(ca) * 2; iter++)
			BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);

		for (j = 0; j < RESERVE_NR; j++)
			fifo_for_each(i, &ca->free[j], iter)
				BUG_ON(i == r);
		fifo_for_each(i, &ca->free_inc, iter)
			BUG_ON(i == r);
	}

	b = ca->buckets + r;

	BUG_ON(atomic_read(&b->pin) != 1);

	SET_GC_SECTORS_USED(b, ca->sb.bucket_size);

	if (reserve <= RESERVE_PRIO) {
		SET_GC_MARK(b, GC_MARK_METADATA);
		SET_GC_MOVE(b, 0);
		b->prio = BTREE_PRIO;
	} else {
		SET_GC_MARK(b, GC_MARK_RECLAIMABLE);
		SET_GC_MOVE(b, 0);
		b->prio = INITIAL_PRIO;
	}

	return r;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
19,24
19,25
19,26
19,27
19,28
19,29
19,30
19,31
19,32
19,33
19,34
20,21
21,22
21,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
37,38
39,40
39,41
40,41
40,42
41,42
41,43
41,44
42,43
44,45
45,46
45,47
46,47
46,48
47,48
50,51
52,53
54,55
54,56
54,57
55,56
57,58
58,59
58,60
59,60
59,61
60,61
63,64
65,66
67,68
69,70
69,71
70,71
71,72
73,74
73,75
74,75
75,76
75,77
75,78
76,77
78,79
80,81
82,83
83,84
85,86
85,87
86,87
86,88
86,89
86,90
87,88
88,89
88,90
88,91
88,92
89,90
91,92
92,93
92,94
93,94
93,95
94,95
98,99
99,100
101,102
103,104
104,105
104,106
105,106
107,108
108,109
108,110
109,110
109,111
110,111
114,115
115,116
116,117
118,119
119,120
119,121
120,121
122,123
123,124
123,125
124,125
124,126
125,126
129,130
129,131
130,131
131,132
131,133
131,134
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
142,143
144,145
145,146
145,147
145,148
146,147
148,149
149,150
149,151
150,151
150,152
151,152
154,155
156,157
158,159
159,160
159,161
159,162
160,161
162,163
163,164
163,165
164,165
164,166
165,166
169,170
170,171
172,173
172,174
174,175
174,176
175,176
175,177
176,177
179,180
180,181
180,182
181,182
183,184
183,185
184,185
187,188
188,189
188,190
188,191
189,190
191,192
193,194
195,196
195,197
196,197
196,198
197,198
199,200
199,201
200,201
203,204
203,205
203,206
203,207
203,208
203,209
203,210
203,211
203,212
203,213
204,205
205,206
205,207
206,207
208,209
210,211
211,212
211,213
213,214
215,216
216,217
216,218
218,219
220,221
220,222
220,223
220,224
221,222
222,223
222,224
223,224
226,227
226,228
227,228
229,230
229,231
230,231
230,232
231,232
233,234
236,237
237,238
239,240
240,241
240,242
241,242
243,244
243,245
244,245
244,246
245,246
245,247
246,247
249,250
251,252
251,253
252,253
252,254
253,254
256,257
258,259
259,260
259,261
259,262
259,263
260,261
262,263
264,265
265,266
265,267
266,267
266,268
267,268
270,271
272,273
274,275
275,276
276,277
276,278
277,278
279,280
279,281
280,281
282,283
284,285
285,286
285,287
285,288
285,289
286,287
288,289
290,291
291,292
291,293
292,293
295,296
297,298
298,299
299,300
299,301
300,301
302,303
302,304
303,304
305,306
307,308
308,309
308,310
309,310
311,312
311,313
312,313
312,314
313,314
316,317
318,319
319,320
319,321
320,321
322,323
322,324
323,324
323,325
324,325
326,327
327,328
327,329
328,329
332,333
333,334
333,335
333,336
334,335
336,337
338,339
338,340
339,340
339,341
340,341
344,345
344,346
344,347
345,346
345,347
346,347
348,349
350,351
350,352
350,353
351,352
352,353
352,354
352,355
353,354
355,356
357,358
359,360
360,361
360,362
360,363
361,362
363,364
366,367
367,368
367,369
368,369
368,370
369,370
372,373
374,375
374,376
374,377
375,376
376,377
376,378
376,379
377,378
379,380
381,382
383,384
384,385
384,386
384,387
385,386
387,388
390,391
391,392
391,393
392,393
392,394
393,394
396,397
398,399
399,400
-----nextToken-----
2,4,7,9,10,12,14,16,18,23,26,30,32,33,36,38,43,48,49,51,53,56,61,62,64,66,68,72,77,79,81,84,90,95,96,97,100,102,106,111,112,113,117,121,126,127,128,133,138,139,141,143,147,152,153,155,157,161,166,167,168,171,173,177,178,182,185,186,190,192,194,198,201,202,207,209,212,214,217,219,224,225,228,232,234,235,238,242,247,248,250,254,255,257,261,263,268,269,271,273,278,281,283,287,289,293,294,296,301,304,306,310,314,315,317,321,325,329,330,331,335,337,341,342,343,347,349,354,356,358,362,364,365,370,371,373,378,380,382,386,388,389,394,395,397,400
-----computeFrom-----
40,41
40,42
129,130
129,131
222,223
222,224
226,227
226,228
229,230
229,231
243,244
243,245
279,280
279,281
302,303
302,304
308,309
308,310
311,312
311,313
322,323
322,324
345,346
345,347
367,368
367,369
391,392
391,393
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;DoStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
long bch_bucket_alloc(struct cache *ca, unsigned reserve, bool wait){	DEFINE_WAIT(w);	struct bucket *b;	long r;	/* fastpath */	if (fifo_pop(&ca->free[RESERVE_NONE], r) ||	    fifo_pop(&ca->free[reserve], r))		goto out;	if (!wait) {		trace_bcache_alloc_fail(ca, reserve);		return -1;	}	do {		prepare_to_wait(&ca->set->bucket_wait, &w,				TASK_UNINTERRUPTIBLE);		mutex_unlock(&ca->set->bucket_lock);		schedule();		mutex_lock(&ca->set->bucket_lock);	} while (!fifo_pop(&ca->free[RESERVE_NONE], r) &&		 !fifo_pop(&ca->free[reserve], r));	finish_wait(&ca->set->bucket_wait, &w);out:	if (ca->alloc_thread)		wake_up_process(ca->alloc_thread);	trace_bcache_alloc(ca, reserve);	if (expensive_debug_checks(ca->set)) {		size_t iter;		long i;		unsigned j;		for (iter = 0; iter < prio_buckets(ca) * 2; iter++)			BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);		for (j = 0; j < RESERVE_NR; j++)			fifo_for_each(i, &ca->free[j], iter)				BUG_ON(i == r);		fifo_for_each(i, &ca->free_inc, iter)			BUG_ON(i == r);	}	b = ca->buckets + r;	BUG_ON(atomic_read(&b->pin) != 1);	SET_GC_SECTORS_USED(b, ca->sb.bucket_size);	if (reserve <= RESERVE_PRIO) {		SET_GC_MARK(b, GC_MARK_METADATA);		SET_GC_MOVE(b, 0);		b->prio = BTREE_PRIO;	} else {		SET_GC_MARK(b, GC_MARK_RECLAIMABLE);		SET_GC_MOVE(b, 0);		b->prio = INITIAL_PRIO;	}	return r;}
long
bch_bucket_alloc(struct cache *ca, unsigned reserve, bool wait)
bch_bucket_alloc
struct cache *ca
struct cache
cache
*ca
*
ca
unsigned reserve
unsigned
reserve
reserve
bool wait
bool
wait
wait
{	DEFINE_WAIT(w);	struct bucket *b;	long r;	/* fastpath */	if (fifo_pop(&ca->free[RESERVE_NONE], r) ||	    fifo_pop(&ca->free[reserve], r))		goto out;	if (!wait) {		trace_bcache_alloc_fail(ca, reserve);		return -1;	}	do {		prepare_to_wait(&ca->set->bucket_wait, &w,				TASK_UNINTERRUPTIBLE);		mutex_unlock(&ca->set->bucket_lock);		schedule();		mutex_lock(&ca->set->bucket_lock);	} while (!fifo_pop(&ca->free[RESERVE_NONE], r) &&		 !fifo_pop(&ca->free[reserve], r));	finish_wait(&ca->set->bucket_wait, &w);out:	if (ca->alloc_thread)		wake_up_process(ca->alloc_thread);	trace_bcache_alloc(ca, reserve);	if (expensive_debug_checks(ca->set)) {		size_t iter;		long i;		unsigned j;		for (iter = 0; iter < prio_buckets(ca) * 2; iter++)			BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);		for (j = 0; j < RESERVE_NR; j++)			fifo_for_each(i, &ca->free[j], iter)				BUG_ON(i == r);		fifo_for_each(i, &ca->free_inc, iter)			BUG_ON(i == r);	}	b = ca->buckets + r;	BUG_ON(atomic_read(&b->pin) != 1);	SET_GC_SECTORS_USED(b, ca->sb.bucket_size);	if (reserve <= RESERVE_PRIO) {		SET_GC_MARK(b, GC_MARK_METADATA);		SET_GC_MOVE(b, 0);		b->prio = BTREE_PRIO;	} else {		SET_GC_MARK(b, GC_MARK_RECLAIMABLE);		SET_GC_MOVE(b, 0);		b->prio = INITIAL_PRIO;	}	return r;}
DEFINE_WAIT(w);
DEFINE_WAIT(w);
DEFINE_WAIT
DEFINE_WAIT
(w)
w
w
struct bucket *b;
struct bucket *b;
struct bucket
bucket
*b
*
b
long r;
long r;
long
r
r
if (fifo_pop(&ca->free[RESERVE_NONE], r) ||	    fifo_pop(&ca->free[reserve], r))		goto out;
fifo_pop(&ca->free[RESERVE_NONE], r) ||	    fifo_pop(&ca->free[reserve], r)
fifo_pop(&ca->free[RESERVE_NONE], r)
fifo_pop
fifo_pop
&ca->free[RESERVE_NONE]
ca->free[RESERVE_NONE]
ca->free
ca
ca
free
RESERVE_NONE
RESERVE_NONE
r
r
fifo_pop(&ca->free[reserve], r)
fifo_pop
fifo_pop
&ca->free[reserve]
ca->free[reserve]
ca->free
ca
ca
free
reserve
reserve
r
r
goto out;
out
if (!wait) {		trace_bcache_alloc_fail(ca, reserve);		return -1;	}
!wait
wait
wait
{		trace_bcache_alloc_fail(ca, reserve);		return -1;	}
trace_bcache_alloc_fail(ca, reserve);
trace_bcache_alloc_fail(ca, reserve)
trace_bcache_alloc_fail
trace_bcache_alloc_fail
ca
ca
reserve
reserve
return -1;
-1
1
do {		prepare_to_wait(&ca->set->bucket_wait, &w,				TASK_UNINTERRUPTIBLE);		mutex_unlock(&ca->set->bucket_lock);		schedule();		mutex_lock(&ca->set->bucket_lock);	} while (!fifo_pop(&ca->free[RESERVE_NONE], r) &&		 !fifo_pop(&ca->free[reserve], r));
{		prepare_to_wait(&ca->set->bucket_wait, &w,				TASK_UNINTERRUPTIBLE);		mutex_unlock(&ca->set->bucket_lock);		schedule();		mutex_lock(&ca->set->bucket_lock);	}
prepare_to_wait(&ca->set->bucket_wait, &w,				TASK_UNINTERRUPTIBLE);
prepare_to_wait(&ca->set->bucket_wait, &w,				TASK_UNINTERRUPTIBLE)
prepare_to_wait
prepare_to_wait
&ca->set->bucket_wait
ca->set->bucket_wait
ca->set
ca
ca
set
bucket_wait
&w
w
w
TASK_UNINTERRUPTIBLE
TASK_UNINTERRUPTIBLE
mutex_unlock(&ca->set->bucket_lock);
mutex_unlock(&ca->set->bucket_lock)
mutex_unlock
mutex_unlock
&ca->set->bucket_lock
ca->set->bucket_lock
ca->set
ca
ca
set
bucket_lock
schedule();
schedule()
schedule
schedule
mutex_lock(&ca->set->bucket_lock);
mutex_lock(&ca->set->bucket_lock)
mutex_lock
mutex_lock
&ca->set->bucket_lock
ca->set->bucket_lock
ca->set
ca
ca
set
bucket_lock
!fifo_pop(&ca->free[RESERVE_NONE], r) &&		 !fifo_pop(&ca->free[reserve], r)
!fifo_pop(&ca->free[RESERVE_NONE], r)
fifo_pop(&ca->free[RESERVE_NONE], r)
fifo_pop
fifo_pop
&ca->free[RESERVE_NONE]
ca->free[RESERVE_NONE]
ca->free
ca
ca
free
RESERVE_NONE
RESERVE_NONE
r
r
!fifo_pop(&ca->free[reserve], r)
fifo_pop(&ca->free[reserve], r)
fifo_pop
fifo_pop
&ca->free[reserve]
ca->free[reserve]
ca->free
ca
ca
free
reserve
reserve
r
r
finish_wait(&ca->set->bucket_wait, &w);
finish_wait(&ca->set->bucket_wait, &w)
finish_wait
finish_wait
&ca->set->bucket_wait
ca->set->bucket_wait
ca->set
ca
ca
set
bucket_wait
&w
w
w
out:	if (ca->alloc_thread)		wake_up_process(ca->alloc_thread);
out
if (ca->alloc_thread)		wake_up_process(ca->alloc_thread);
ca->alloc_thread
ca
ca
alloc_thread
wake_up_process(ca->alloc_thread);
wake_up_process(ca->alloc_thread)
wake_up_process
wake_up_process
ca->alloc_thread
ca
ca
alloc_thread
trace_bcache_alloc(ca, reserve);
trace_bcache_alloc(ca, reserve)
trace_bcache_alloc
trace_bcache_alloc
ca
ca
reserve
reserve
if (expensive_debug_checks(ca->set)) {		size_t iter;		long i;		unsigned j;		for (iter = 0; iter < prio_buckets(ca) * 2; iter++)			BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);		for (j = 0; j < RESERVE_NR; j++)			fifo_for_each(i, &ca->free[j], iter)				BUG_ON(i == r);		fifo_for_each(i, &ca->free_inc, iter)			BUG_ON(i == r);	}
expensive_debug_checks(ca->set)
expensive_debug_checks
expensive_debug_checks
ca->set
ca
ca
set
{		size_t iter;		long i;		unsigned j;		for (iter = 0; iter < prio_buckets(ca) * 2; iter++)			BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);		for (j = 0; j < RESERVE_NR; j++)			fifo_for_each(i, &ca->free[j], iter)				BUG_ON(i == r);		fifo_for_each(i, &ca->free_inc, iter)			BUG_ON(i == r);	}
size_t iter;
size_t iter;
size_t
size_t
iter
iter
long i;
long i;
long
i
i
unsigned j;
unsigned j;
unsigned
j
j
for (iter = 0; iter < prio_buckets(ca) * 2; iter++)			BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);
iter = 0;
iter = 0
iter
iter
0
iter < prio_buckets(ca) * 2
iter
iter
prio_buckets(ca) * 2
prio_buckets(ca)
prio_buckets
prio_buckets
ca
ca
2
iter++
iter
iter
BUG_ON(ca->prio_buckets[iter] == (uint64_t) r);
BUG_ON(ca->prio_buckets[iter] == (uint64_t) r)
BUG_ON
BUG_ON
ca->prio_buckets[iter] == (uint64_t) r
ca->prio_buckets[iter]
ca->prio_buckets
ca
ca
prio_buckets
iter
iter
(uint64_t) r
uint64_t
uint64_t
uint64_t

r
r
fifo_for_each(i, &ca->free[j], iter)
fifo_for_each(i, &ca->free[j], iter)
fifo_for_each
fifo_for_each
i
i
&ca->free[j]
ca->free[j]
ca->free
ca
ca
free
j
j
iter
iter
)
BUG_ON(i == r);
BUG_ON(i == r)
BUG_ON
BUG_ON
i == r
i
i
r
r
fifo_for_each(i, &ca->free_inc, iter)
fifo_for_each(i, &ca->free_inc, iter)
fifo_for_each
fifo_for_each
i
i
&ca->free_inc
ca->free_inc
ca
ca
free_inc
iter
iter
)
BUG_ON(i == r);
BUG_ON(i == r)
BUG_ON
BUG_ON
i == r
i
i
r
r
b = ca->buckets + r;
b = ca->buckets + r
b
b
ca->buckets + r
ca->buckets
ca
ca
buckets
r
r
BUG_ON(atomic_read(&b->pin) != 1);
BUG_ON(atomic_read(&b->pin) != 1)
BUG_ON
BUG_ON
atomic_read(&b->pin) != 1
atomic_read(&b->pin)
atomic_read
atomic_read
&b->pin
b->pin
b
b
pin
1
SET_GC_SECTORS_USED(b, ca->sb.bucket_size);
SET_GC_SECTORS_USED(b, ca->sb.bucket_size)
SET_GC_SECTORS_USED
SET_GC_SECTORS_USED
b
b
ca->sb.bucket_size
ca->sb
ca
ca
sb
bucket_size
if (reserve <= RESERVE_PRIO) {		SET_GC_MARK(b, GC_MARK_METADATA);		SET_GC_MOVE(b, 0);		b->prio = BTREE_PRIO;	} else {		SET_GC_MARK(b, GC_MARK_RECLAIMABLE);		SET_GC_MOVE(b, 0);		b->prio = INITIAL_PRIO;	}
reserve <= RESERVE_PRIO
reserve
reserve
RESERVE_PRIO
RESERVE_PRIO
{		SET_GC_MARK(b, GC_MARK_METADATA);		SET_GC_MOVE(b, 0);		b->prio = BTREE_PRIO;	}
SET_GC_MARK(b, GC_MARK_METADATA);
SET_GC_MARK(b, GC_MARK_METADATA)
SET_GC_MARK
SET_GC_MARK
b
b
GC_MARK_METADATA
GC_MARK_METADATA
SET_GC_MOVE(b, 0);
SET_GC_MOVE(b, 0)
SET_GC_MOVE
SET_GC_MOVE
b
b
0
b->prio = BTREE_PRIO;
b->prio = BTREE_PRIO
b->prio
b
b
prio
BTREE_PRIO
BTREE_PRIO
{		SET_GC_MARK(b, GC_MARK_RECLAIMABLE);		SET_GC_MOVE(b, 0);		b->prio = INITIAL_PRIO;	}
SET_GC_MARK(b, GC_MARK_RECLAIMABLE);
SET_GC_MARK(b, GC_MARK_RECLAIMABLE)
SET_GC_MARK
SET_GC_MARK
b
b
GC_MARK_RECLAIMABLE
GC_MARK_RECLAIMABLE
SET_GC_MOVE(b, 0);
SET_GC_MOVE(b, 0)
SET_GC_MOVE
SET_GC_MOVE
b
b
0
b->prio = INITIAL_PRIO;
b->prio = INITIAL_PRIO
b->prio
b
b
prio
INITIAL_PRIO
INITIAL_PRIO
return r;
r
r
-----joern-----
(89,73,0)
(76,176,0)
(152,44,0)
(178,101,0)
(123,162,0)
(131,101,0)
(173,118,0)
(47,140,0)
(175,19,0)
(96,183,0)
(120,177,0)
(45,185,0)
(66,2,0)
(78,199,0)
(83,20,0)
(48,46,0)
(167,197,0)
(72,160,0)
(181,134,0)
(67,65,0)
(172,78,0)
(149,10,0)
(47,5,0)
(120,69,0)
(144,127,0)
(3,41,0)
(65,18,0)
(35,142,0)
(170,159,0)
(103,7,0)
(185,118,0)
(134,7,0)
(175,121,0)
(192,83,0)
(190,2,0)
(65,83,0)
(44,152,0)
(130,5,0)
(96,18,0)
(56,194,0)
(80,127,0)
(179,86,0)
(138,158,0)
(1,103,0)
(36,160,0)
(22,51,0)
(86,94,0)
(38,183,0)
(195,142,0)
(112,184,0)
(4,76,0)
(26,185,0)
(166,174,0)
(100,134,0)
(125,101,0)
(24,159,0)
(73,89,0)
(94,18,0)
(157,54,0)
(184,142,0)
(182,92,0)
(161,18,0)
(28,193,0)
(185,26,0)
(189,23,0)
(169,22,0)
(13,7,0)
(40,202,0)
(137,86,0)
(124,134,0)
(119,201,0)
(191,148,0)
(101,7,0)
(202,18,0)
(191,159,0)
(16,2,0)
(57,154,0)
(69,120,0)
(122,166,0)
(81,167,0)
(123,32,0)
(160,66,0)
(23,204,0)
(148,121,0)
(102,65,0)
(155,96,0)
(27,126,0)
(105,90,0)
(18,159,0)
(87,162,0)
(130,7,0)
(198,39,0)
(0,90,0)
(100,69,0)
(139,9,0)
(85,93,0)
(33,47,0)
(201,142,0)
(9,92,0)
(147,111,0)
(110,168,0)
(193,46,0)
(50,30,0)
(87,152,0)
(152,87,0)
(173,187,0)
(49,13,0)
(10,149,0)
(29,94,0)
(118,173,0)
(194,7,0)
(126,42,0)
(89,7,0)
(6,168,0)
(154,18,0)
(204,23,0)
(30,50,0)
(47,7,0)
(121,175,0)
(92,9,0)
(10,39,0)
(14,159,0)
(169,114,0)
(58,197,0)
(59,2,0)
(187,173,0)
(9,184,0)
(39,10,0)
(176,76,0)
(167,81,0)
(120,159,0)
(177,120,0)
(71,166,0)
(146,47,0)
(30,7,0)
(137,7,0)
(118,185,0)
(164,183,0)
(63,180,0)
(111,147,0)
(54,81,0)
(186,197,0)
(42,126,0)
(104,130,0)
(176,2,0)
(60,13,0)
(135,159,0)
(64,115,0)
(88,159,0)
(197,167,0)
(13,39,0)
(183,96,0)
(106,135,0)
(43,148,0)
(103,23,0)
(184,9,0)
(84,188,0)
(171,159,0)
(126,162,0)
(11,19,0)
(134,100,0)
(153,2,0)
(44,158,0)
(143,41,0)
(61,159,0)
(42,50,0)
(77,159,0)
(158,7,0)
(128,177,0)
(78,18,0)
(188,169,0)
(90,168,0)
(39,13,0)
(95,30,0)
(109,84,0)
(148,191,0)
(92,7,0)
(98,188,0)
(166,7,0)
(141,34,0)
(188,142,0)
(151,100,0)
(52,187,0)
(86,137,0)
(39,5,0)
(129,78,0)
(91,81,0)
(31,202,0)
(202,199,0)
(94,86,0)
(101,178,0)
(51,22,0)
(188,84,0)
(180,18,0)
(41,18,0)
(19,175,0)
(115,199,0)
(145,17,0)
(84,7,0)
(127,5,0)
(21,111,0)
(93,159,0)
(163,89,0)
(126,34,0)
(19,18,0)
(8,130,0)
(107,52,0)
(22,169,0)
(174,26,0)
(25,44,0)
(62,84,0)
(116,50,0)
(187,52,0)
(69,100,0)
(165,2,0)
(66,160,0)
(18,96,0)
(203,89,0)
(79,147,0)
(74,70,0)
(204,52,0)
(174,166,0)
(99,162,0)
(97,194,0)
(34,126,0)
(68,154,0)
(130,159,0)
(26,174,0)
(52,204,0)
(197,186,0)
(81,54,0)
(108,54,0)
(23,5,0)
(53,137,0)
(133,158,0)
(15,137,0)
(23,103,0)
(183,7,0)
(48,135,0)
(50,42,0)
(149,186,0)
(121,148,0)
(169,188,0)
(136,159,0)
(41,20,0)
(200,76,0)
(117,149,0)
(17,168,0)
(54,7,0)
(32,123,0)
(132,19,0)
(196,174,0)
(114,169,0)
(154,20,0)
(75,147,0)
(12,103,0)
(94,159,0)
(37,159,0)
(46,140,0)
(147,7,0)
(158,44,0)
(82,74,0)
(186,149,0)
(32,111,0)
(113,180,0)
(180,115,0)
(150,22,0)
(55,30,0)
(111,32,0)
(197,58,1)
(119,114,1)
(52,204,1)
(54,108,1)
(195,178,1)
(56,120,1)
(100,151,1)
(78,172,1)
(13,49,1)
(19,132,1)
(194,97,1)
(152,44,1)
(64,180,1)
(185,45,1)
(35,195,1)
(105,0,1)
(186,197,1)
(54,7,1)
(134,7,1)
(69,100,1)
(184,142,1)
(175,19,1)
(63,113,1)
(178,101,1)
(148,121,1)
(158,138,1)
(13,7,1)
(174,196,1)
(43,121,1)
(130,7,1)
(128,69,1)
(166,7,1)
(124,173,1)
(50,116,1)
(10,39,1)
(179,137,1)
(130,104,1)
(97,56,1)
(33,74,1)
(47,146,1)
(106,83,1)
(103,7,1)
(107,204,1)
(96,183,1)
(112,201,1)
(113,78,1)
(197,167,1)
(42,50,1)
(106,115,1)
(86,137,1)
(78,18,1)
(94,18,1)
(47,5,1)
(154,68,1)
(186,149,1)
(81,91,1)
(72,36,1)
(75,99,1)
(53,15,1)
(133,126,1)
(83,192,1)
(200,4,1)
(1,12,1)
(126,42,1)
(174,166,1)
(92,182,1)
(23,5,1)
(74,70,1)
(23,189,1)
(87,152,1)
(23,103,1)
(131,125,1)
(8,194,1)
(180,18,1)
(44,158,1)
(90,168,1)
(46,193,1)
(22,51,1)
(52,107,1)
(19,18,1)
(84,7,1)
(109,62,1)
(169,188,1)
(141,42,1)
(32,111,1)
(177,128,1)
(117,10,1)
(57,127,1)
(202,18,1)
(150,188,1)
(104,8,1)
(157,93,1)
(176,76,1)
(30,95,1)
(187,52,1)
(164,161,1)
(101,131,1)
(130,5,1)
(49,60,1)
(132,11,1)
(99,87,1)
(100,134,1)
(71,123,1)
(122,71,1)
(55,74,1)
(189,103,1)
(110,6,1)
(38,164,1)
(50,30,1)
(93,85,1)
(193,28,1)
(47,7,1)
(134,181,1)
(4,66,1)
(115,64,1)
(126,34,1)
(196,166,1)
(56,156,1)
(126,27,1)
(161,178,1)
(144,94,1)
(48,46,1)
(48,135,1)
(74,82,1)
(188,98,1)
(18,96,1)
(145,90,1)
(138,133,1)
(204,23,1)
(121,175,1)
(55,173,1)
(3,143,1)
(185,26,1)
(6,184,1)
(120,69,1)
(101,7,1)
(45,26,1)
(17,145,1)
(182,112,1)
(27,34,1)
(163,194,1)
(58,167,1)
(92,7,1)
(68,57,1)
(135,106,1)
(194,7,1)
(8,73,1)
(34,141,1)
(39,5,1)
(201,142,1)
(191,148,1)
(127,5,1)
(102,67,1)
(94,86,1)
(12,118,1)
(28,47,1)
(26,174,1)
(142,35,1)
(147,7,1)
(146,33,1)
(36,90,1)
(158,7,1)
(149,117,1)
(9,139,1)
(167,81,1)
(81,54,1)
(86,179,1)
(22,150,1)
(66,160,1)
(180,63,1)
(125,130,1)
(29,191,1)
(116,30,1)
(148,43,1)
(65,18,1)
(62,184,1)
(21,147,1)
(149,10,1)
(17,168,1)
(25,158,1)
(40,31,1)
(155,183,1)
(79,75,1)
(91,54,1)
(137,53,1)
(202,40,1)
(160,72,1)
(143,154,1)
(192,65,1)
(111,147,1)
(31,127,1)
(73,89,1)
(96,155,1)
(80,144,1)
(112,142,1)
(95,55,1)
(9,92,1)
(120,177,1)
(111,21,1)
(41,3,1)
(172,129,1)
(161,176,1)
(39,198,1)
(181,124,1)
(201,119,1)
(15,29,1)
(169,22,1)
(84,109,1)
(184,9,1)
(89,7,1)
(203,163,1)
(183,7,1)
(98,84,1)
(173,187,1)
(183,38,1)
(65,102,1)
(0,17,1)
(123,32,1)
(118,185,1)
(108,157,1)
(60,197,1)
(90,105,1)
(127,80,1)
(89,203,1)
(188,142,1)
(129,202,1)
(103,1,1)
(39,13,1)
(156,186,1)
(139,92,1)
(173,118,1)
(76,200,1)
(151,134,1)
(188,84,1)
(198,13,1)
(0,168,1)
(11,18,1)
(67,41,1)
(137,7,1)
(147,79,1)
(168,110,1)
(41,18,1)
(30,7,1)
(154,18,1)
(166,122,1)
(44,25,1)
(114,169,1)
(82,186,1)
(56,74,2)
(38,74,2)
(57,127,2)
(35,178,2)
(200,178,2)
(196,74,2)
(112,178,2)
(191,148,2)
(92,7,2)
(13,197,2)
(120,69,2)
(22,184,2)
(202,18,2)
(138,173,2)
(183,7,2)
(185,173,2)
(163,194,2)
(194,186,2)
(86,74,2)
(204,118,2)
(107,118,2)
(66,160,2)
(143,127,2)
(177,74,2)
(121,175,2)
(144,74,2)
(79,74,2)
(123,74,2)
(19,18,2)
(89,7,2)
(62,184,2)
(166,74,2)
(131,74,2)
(152,74,2)
(185,74,2)
(9,184,2)
(130,74,2)
(104,186,2)
(30,7,2)
(23,103,2)
(158,173,2)
(110,178,2)
(12,118,2)
(161,186,2)
(95,74,2)
(40,127,2)
(26,74,2)
(137,74,2)
(15,74,2)
(76,178,2)
(87,152,2)
(41,18,2)
(176,76,2)
(19,74,2)
(120,74,2)
(10,39,2)
(204,23,2)
(52,118,2)
(17,90,2)
(111,147,2)
(105,178,2)
(71,173,2)
(55,74,2)
(44,158,2)
(178,74,2)
(139,184,2)
(132,186,2)
(50,173,2)
(103,7,2)
(75,74,2)
(186,149,2)
(189,118,2)
(116,173,2)
(146,74,2)
(181,74,2)
(184,9,2)
(65,127,2)
(48,46,2)
(148,121,2)
(42,74,2)
(52,204,2)
(83,127,2)
(25,74,2)
(29,74,2)
(188,84,2)
(1,118,2)
(43,186,2)
(15,186,2)
(169,184,2)
(97,186,2)
(95,173,2)
(8,74,2)
(184,184,2)
(161,74,2)
(72,178,2)
(187,118,2)
(154,18,2)
(127,5,2)
(23,118,2)
(17,168,2)
(164,186,2)
(45,173,2)
(33,74,2)
(102,127,2)
(18,186,2)
(86,137,2)
(111,74,2)
(132,74,2)
(169,22,2)
(84,184,2)
(160,178,2)
(176,178,2)
(130,186,2)
(130,5,2)
(188,142,2)
(175,19,2)
(117,197,2)
(152,173,2)
(126,173,2)
(81,54,2)
(113,127,2)
(44,173,2)
(60,197,2)
(18,74,2)
(80,74,2)
(21,173,2)
(173,118,2)
(155,186,2)
(39,197,2)
(116,74,2)
(173,187,2)
(101,186,2)
(44,74,2)
(184,178,2)
(111,173,2)
(67,127,2)
(48,135,2)
(104,74,2)
(69,100,2)
(26,174,2)
(175,186,2)
(47,5,2)
(53,186,2)
(185,26,2)
(66,178,2)
(11,186,2)
(82,186,2)
(8,186,2)
(106,74,2)
(87,173,2)
(184,142,2)
(191,74,2)
(119,184,2)
(129,127,2)
(74,70,2)
(32,111,2)
(90,178,2)
(32,173,2)
(100,134,2)
(125,74,2)
(89,194,2)
(122,74,2)
(139,178,2)
(39,13,2)
(126,74,2)
(179,74,2)
(87,74,2)
(123,32,2)
(96,74,2)
(103,118,2)
(27,74,2)
(100,74,2)
(55,173,2)
(120,177,2)
(75,173,2)
(166,173,2)
(155,74,2)
(46,74,2)
(19,186,2)
(118,74,2)
(147,7,2)
(69,74,2)
(138,74,2)
(131,186,2)
(168,178,2)
(197,167,2)
(141,173,2)
(0,178,2)
(90,90,2)
(28,74,2)
(137,186,2)
(94,18,2)
(198,197,2)
(135,186,2)
(127,74,2)
(29,186,2)
(78,18,2)
(31,127,2)
(6,178,2)
(142,178,2)
(98,184,2)
(174,173,2)
(30,173,2)
(13,7,2)
(114,169,2)
(194,74,2)
(23,5,2)
(34,74,2)
(84,7,2)
(121,186,2)
(182,178,2)
(201,142,2)
(86,186,2)
(94,186,2)
(9,92,2)
(148,186,2)
(73,89,2)
(150,184,2)
(94,86,2)
(173,173,2)
(112,184,2)
(179,186,2)
(63,127,2)
(54,7,2)
(134,7,2)
(178,186,2)
(194,7,2)
(174,166,2)
(178,101,2)
(203,194,2)
(106,186,2)
(151,74,2)
(43,74,2)
(4,178,2)
(158,74,2)
(42,173,2)
(201,184,2)
(36,178,2)
(27,173,2)
(30,74,2)
(166,7,2)
(64,127,2)
(196,173,2)
(180,18,2)
(79,173,2)
(126,34,2)
(186,197,2)
(173,74,2)
(154,127,2)
(97,74,2)
(0,90,2)
(133,173,2)
(164,74,2)
(99,173,2)
(25,173,2)
(50,30,2)
(134,74,2)
(147,173,2)
(109,184,2)
(80,186,2)
(68,127,2)
(32,74,2)
(92,184,2)
(127,186,2)
(187,52,2)
(21,74,2)
(56,186,2)
(18,96,2)
(175,74,2)
(148,74,2)
(90,168,2)
(145,90,2)
(71,74,2)
(115,127,2)
(167,81,2)
(49,197,2)
(191,186,2)
(141,74,2)
(121,74,2)
(126,42,2)
(174,74,2)
(183,74,2)
(118,173,2)
(41,127,2)
(149,10,2)
(42,50,2)
(92,178,2)
(118,185,2)
(122,173,2)
(125,186,2)
(47,7,2)
(78,127,2)
(96,183,2)
(53,74,2)
(172,127,2)
(193,74,2)
(133,74,2)
(38,186,2)
(128,74,2)
(101,7,2)
(3,127,2)
(169,188,2)
(105,90,2)
(101,74,2)
(135,74,2)
(34,173,2)
(158,7,2)
(123,173,2)
(156,186,2)
(10,197,2)
(99,74,2)
(188,184,2)
(45,74,2)
(149,197,2)
(22,51,2)
(50,74,2)
(147,74,2)
(202,127,2)
(152,44,2)
(47,74,2)
(26,173,2)
(9,178,2)
(94,74,2)
(124,74,2)
(11,74,2)
(180,127,2)
(114,184,2)
(183,186,2)
(130,7,2)
(195,178,2)
(137,7,2)
(96,186,2)
(182,184,2)
(65,18,2)
(39,5,2)
(192,127,2)
(74,186,2)
(144,186,2)
(73,194,2)
-----------------------------------
(0,j)
(1,free)
(2,)
(3,0)
(4,i)
(5,unsigned reserve)
(6,j)
(7,struct cache *ca)
(8,ca)
(9,prio_buckets(ca)
(10,&ca->free[reserve])
(11,b)
(12,ca)
(13,ca->free)
(14,if (expensive_debug_checks(ca->set)
(15,ca)
(16,for (iter = 0; iter < prio_buckets(ca)
(17,j++)
(18,b = ca->buckets + r)
(19,b->pin)
(20,)
(21,bucket_lock)
(22,(uint64_t)
(23,ca->free[reserve])
(24,r)
(25,bucket_lock)
(26,&ca->free[RESERVE_NONE])
(27,TASK_UNINTERRUPTIBLE)
(28,1)
(29,b)
(30,ca->set)
(31,b)
(32,&ca->set->bucket_lock)
(33,ca)
(34,&w)
(35,0)
(36,i)
(37,b)
(38,buckets)
(39,ca->free[reserve])
(40,GC_MARK_METADATA)
(41,SET_GC_MOVE(b, 0)
(42,&ca->set->bucket_wait)
(43,1)
(44,ca->set->bucket_lock)
(45,r)
(46,return -1;)
(47,trace_bcache_alloc_fail(ca, reserve)
(48,RET)
(49,free)
(50,ca->set->bucket_wait)
(51,uint64_t)
(52,fifo_pop(&ca->free[reserve], r)
(53,sb)
(54,ca->free)
(55,ca)
(56,ca)
(57,b)
(58,r)
(59,iter)
(60,ca)
(61,if (fifo_pop(&ca->free[RESERVE_NONE], r)
(62,ca)
(63,prio)
(64,BTREE_PRIO)
(65,b->prio)
(66,BUG_ON(i == r)
(67,b)
(68,GC_MARK_RECLAIMABLE)
(69,&ca->set->bucket_wait)
(70,bool wait)
(71,ca)
(72,r)
(73,wake_up_process(ca->alloc_thread)
(74,!wait)
(75,ca)
(76,i == r)
(77,out:)
(78,SET_GC_MOVE(b, 0)
(79,set)
(80,RESERVE_PRIO)
(81,ca->free[RESERVE_NONE])
(82,wait)
(83,b->prio = INITIAL_PRIO)
(84,ca->prio_buckets)
(85,w)
(86,ca->sb.bucket_size)
(87,mutex_unlock(&ca->set->bucket_lock)
(88,do)
(89,ca->alloc_thread)
(90,j < RESERVE_NR)
(91,RESERVE_NONE)
(92,prio_buckets(ca)
(93,DEFINE_WAIT(w)
(94,SET_GC_SECTORS_USED(b, ca->sb.bucket_size)
(95,set)
(96,ca->buckets + r)
(97,alloc_thread)
(98,iter)
(99,schedule()
(100,ca->set->bucket_wait)
(101,ca->set)
(102,prio)
(103,ca->free)
(104,reserve)
(105,RESERVE_NR)
(106,r)
(107,r)
(108,free)
(109,prio_buckets)
(110,0)
(111,ca->set->bucket_lock)
(112,iter)
(113,b)
(114,BUG_ON(ca->prio_buckets[iter] == (uint64_t)
(115,b->prio = BTREE_PRIO)
(116,bucket_wait)
(117,r)
(118,!fifo_pop(&ca->free[RESERVE_NONE], r)
(119,iter)
(120,finish_wait(&ca->set->bucket_wait, &w)
(121,atomic_read(&b->pin)
(122,free)
(123,mutex_lock(&ca->set->bucket_lock)
(124,ca)
(125,ca)
(126,prepare_to_wait(&ca->set->bucket_wait, &w,\n\\n\\t\\t\\t\\tTASK_UNINTERRUPTIBLE)
(127,reserve <= RESERVE_PRIO)
(128,w)
(129,b)
(130,trace_bcache_alloc(ca, reserve)
(131,set)
(132,pin)
(133,ca)
(134,ca->set)
(135,return r;)
(136,if (ca->alloc_thread)
(137,ca->sb)
(138,set)
(139,2)
(140,)
(141,w)
(142,iter = 0)
(143,b)
(144,reserve)
(145,j)
(146,reserve)
(147,ca->set)
(148,atomic_read(&b->pin)
(149,fifo_pop(&ca->free[reserve], r)
(150,r)
(151,bucket_wait)
(152,&ca->set->bucket_lock)
(153,i)
(154,SET_GC_MARK(b, GC_MARK_RECLAIMABLE)
(155,r)
(156,goto out;)
(157,ca)
(158,ca->set)
(159,)
(160,i == r)
(161,b)
(162,)
(163,ca)
(164,ca)
(165,for (j = 0; j < RESERVE_NR; j++)
(166,ca->free)
(167,&ca->free[RESERVE_NONE])
(168,j = 0)
(169,ca->prio_buckets[iter] == (uint64_t)
(170,if (!wait)
(171,if (reserve <= RESERVE_PRIO)
(172,0)
(173,!fifo_pop(&ca->free[RESERVE_NONE], r)
(174,ca->free[RESERVE_NONE])
(175,&b->pin)
(176,BUG_ON(i == r)
(177,&w)
(178,expensive_debug_checks(ca->set)
(179,bucket_size)
(180,b->prio)
(181,set)
(182,ca)
(183,ca->buckets)
(184,iter < prio_buckets(ca)
(185,fifo_pop(&ca->free[RESERVE_NONE], r)
(186,fifo_pop(&ca->free[RESERVE_NONE], r)
(187,!fifo_pop(&ca->free[reserve], r)
(188,ca->prio_buckets[iter])
(189,reserve)
(190,j)
(191,BUG_ON(atomic_read(&b->pin)
(192,INITIAL_PRIO)
(193,-1)
(194,ca->alloc_thread)
(195,iter)
(196,RESERVE_NONE)
(197,fifo_pop(&ca->free[RESERVE_NONE], r)
(198,reserve)
(199,)
(200,r)
(201,iter++)
(202,SET_GC_MARK(b, GC_MARK_METADATA)
(203,alloc_thread)
(204,&ca->free[reserve])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^