-----label-----
0
-----code-----
static int add_unformed_module(struct module *mod)
{
	int err;
	struct module *old;

	mod->state = MODULE_STATE_UNFORMED;

again:
	mutex_lock(&module_mutex);
	old = find_module_all(mod->name, strlen(mod->name), true);
	if (old != NULL) {
		if (old->state == MODULE_STATE_COMING
		    || old->state == MODULE_STATE_UNFORMED) {
			/* Wait in case it fails to load. */
			mutex_unlock(&module_mutex);
			err = wait_event_interruptible(module_wq,
					       finished_loading(mod->name));
			if (err)
				goto out_unlocked;
			goto again;
		}
		err = -EEXIST;
		goto out;
	}
	mod_update_bounds(mod);
	list_add_rcu(&mod->list, &modules);
	mod_tree_insert(mod);
	err = 0;

out:
	mutex_unlock(&module_mutex);
out_unlocked:
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
61,62
61,63
62,63
62,64
63,64
65,66
67,68
67,69
67,70
68,69
68,70
69,70
69,71
70,71
70,72
71,72
71,73
72,73
75,76
77,78
77,79
78,79
78,80
79,80
82,83
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
89,90
90,91
92,93
93,94
93,95
94,95
96,97
96,98
96,99
97,98
99,100
101,102
101,103
102,103
104,105
104,106
105,106
108,109
108,110
109,110
111,112
113,114
115,116
116,117
116,118
117,118
119,120
120,121
122,123
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
131,134
132,133
134,135
135,136
135,137
136,137
139,140
140,141
142,143
143,144
143,145
144,145
146,147
148,149
149,150
149,151
150,151
153,154
153,155
155,156
156,157
156,158
157,158
159,160
160,161
162,163
162,164
164,165
165,166
-----nextToken-----
2,4,7,9,10,14,16,20,22,23,28,29,31,33,37,40,41,45,48,51,52,55,58,59,60,64,66,73,74,76,80,81,83,88,91,95,98,100,103,106,107,110,112,114,118,121,123,127,129,133,137,138,141,145,147,151,152,154,158,161,163,166
-----computeFrom-----
25,26
25,27
43,44
43,45
62,63
62,64
69,70
69,71
70,71
70,72
77,78
77,79
93,94
93,95
116,117
116,118
149,150
149,151
-----guardedBy-----
64,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int add_unformed_module(struct module *mod){	int err;	struct module *old;	mod->state = MODULE_STATE_UNFORMED;again:	mutex_lock(&module_mutex);	old = find_module_all(mod->name, strlen(mod->name), true);	if (old != NULL) {		if (old->state == MODULE_STATE_COMING		    || old->state == MODULE_STATE_UNFORMED) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}	mod_update_bounds(mod);	list_add_rcu(&mod->list, &modules);	mod_tree_insert(mod);	err = 0;out:	mutex_unlock(&module_mutex);out_unlocked:	return err;}
static int
add_unformed_module(struct module *mod)
add_unformed_module
struct module *mod
struct module
module
*mod
*
mod
{	int err;	struct module *old;	mod->state = MODULE_STATE_UNFORMED;again:	mutex_lock(&module_mutex);	old = find_module_all(mod->name, strlen(mod->name), true);	if (old != NULL) {		if (old->state == MODULE_STATE_COMING		    || old->state == MODULE_STATE_UNFORMED) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}	mod_update_bounds(mod);	list_add_rcu(&mod->list, &modules);	mod_tree_insert(mod);	err = 0;out:	mutex_unlock(&module_mutex);out_unlocked:	return err;}
int err;
int err;
int
err
err
struct module *old;
struct module *old;
struct module
module
*old
*
old
mod->state = MODULE_STATE_UNFORMED;
mod->state = MODULE_STATE_UNFORMED
mod->state
mod
mod
state
MODULE_STATE_UNFORMED
MODULE_STATE_UNFORMED
again:	mutex_lock(&module_mutex);
again
mutex_lock(&module_mutex);
mutex_lock(&module_mutex);
mutex_lock
mutex_lock
(&module_mutex)
&module_mutex
&
module_mutex
old = find_module_all(mod->name, strlen(mod->name), true);
old = find_module_all(mod->name, strlen(mod->name), true)
old
old
find_module_all(mod->name, strlen(mod->name), true)
find_module_all
find_module_all
mod->name
mod
mod
name
strlen(mod->name)
strlen
strlen
mod->name
mod
mod
name
true
if (old != NULL) {		if (old->state == MODULE_STATE_COMING		    || old->state == MODULE_STATE_UNFORMED) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}
old != NULL
old
old
NULL
NULL
{		if (old->state == MODULE_STATE_COMING		    || old->state == MODULE_STATE_UNFORMED) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}
if (old->state == MODULE_STATE_COMING		    || old->state == MODULE_STATE_UNFORMED) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}
old->state == MODULE_STATE_COMING		    || old->state == MODULE_STATE_UNFORMED
old->state == MODULE_STATE_COMING
old->state
old
old
state
MODULE_STATE_COMING
MODULE_STATE_COMING
old->state == MODULE_STATE_UNFORMED
old->state
old
old
state
MODULE_STATE_UNFORMED
MODULE_STATE_UNFORMED
{			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}
mutex_unlock(&module_mutex);
mutex_unlock(&module_mutex)
mutex_unlock
mutex_unlock
&module_mutex
module_mutex
module_mutex
err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));
err = wait_event_interruptible(module_wq,					       finished_loading(mod->name))
err
err
wait_event_interruptible(module_wq,					       finished_loading(mod->name))
wait_event_interruptible
wait_event_interruptible
module_wq
module_wq
finished_loading(mod->name)
finished_loading
finished_loading
mod->name
mod
mod
name
if (err)				goto out_unlocked;
err
err
goto out_unlocked;
out_unlocked
goto again;
again
err = -EEXIST;
err = -EEXIST
err
err
-EEXIST
EEXIST
EEXIST
goto out;
out
mod_update_bounds(mod);
mod_update_bounds(mod)
mod_update_bounds
mod_update_bounds
mod
mod
list_add_rcu(&mod->list, &modules);
list_add_rcu(&mod->list, &modules)
list_add_rcu
list_add_rcu
&mod->list
mod->list
mod
mod
list
&modules
modules
modules
mod_tree_insert(mod);
mod_tree_insert(mod)
mod_tree_insert
mod_tree_insert
mod
mod
err = 0;
err = 0
err
err
0
out:	mutex_unlock(&module_mutex);
out
mutex_unlock(&module_mutex);
mutex_unlock(&module_mutex)
mutex_unlock
mutex_unlock
&module_mutex
module_mutex
module_mutex
out_unlocked:	return err;
out_unlocked
return err;
err
err
-----joern-----
(63,61,0)
(5,10,0)
(83,35,0)
(42,13,0)
(48,64,0)
(77,10,0)
(40,59,0)
(23,59,0)
(2,62,0)
(32,55,0)
(27,26,0)
(58,39,0)
(64,62,0)
(79,61,0)
(49,62,0)
(50,63,0)
(53,63,0)
(31,62,0)
(52,82,0)
(17,28,0)
(16,37,0)
(1,13,0)
(22,64,0)
(6,10,0)
(23,20,0)
(71,26,0)
(12,62,0)
(56,62,0)
(51,20,0)
(54,62,0)
(76,35,0)
(81,21,0)
(24,56,0)
(31,47,0)
(47,31,0)
(39,33,0)
(13,33,0)
(77,20,0)
(20,77,0)
(25,62,0)
(46,61,0)
(21,61,0)
(15,62,0)
(68,29,0)
(28,6,0)
(36,43,0)
(59,33,0)
(78,83,0)
(61,68,0)
(65,46,0)
(12,33,0)
(3,31,0)
(8,56,0)
(60,70,0)
(30,46,0)
(69,34,0)
(56,77,0)
(68,39,0)
(61,62,0)
(29,26,0)
(37,82,0)
(39,68,0)
(45,12,0)
(43,62,0)
(20,23,0)
(41,77,0)
(59,23,0)
(6,28,0)
(80,10,0)
(83,33,0)
(15,14,0)
(4,70,0)
(67,62,0)
(14,15,0)
(73,19,0)
(26,33,0)
(66,69,0)
(34,69,0)
(11,62,0)
(26,29,0)
(75,83,0)
(56,64,0)
(38,55,0)
(4,62,0)
(13,3,0)
(82,55,0)
(82,37,0)
(46,69,0)
(74,21,0)
(35,62,0)
(69,46,0)
(57,14,0)
(44,59,0)
(68,61,0)
(70,4,0)
(3,13,0)
(9,39,0)
(34,19,0)
(0,47,0)
(7,68,0)
(29,68,0)
(19,21,0)
(21,19,0)
(19,34,0)
(31,3,0)
(43,33,0)
(56,82,0)
(34,19,1)
(56,82,1)
(24,18,1)
(61,68,1)
(48,12,1)
(6,28,1)
(77,20,1)
(57,5,1)
(73,21,1)
(71,27,1)
(38,82,1)
(68,7,1)
(26,33,1)
(21,81,1)
(58,79,1)
(31,3,1)
(14,57,1)
(69,66,1)
(83,33,1)
(19,21,1)
(51,41,1)
(41,6,1)
(23,59,1)
(59,33,1)
(20,23,1)
(65,19,1)
(0,3,1)
(28,17,1)
(56,77,1)
(36,63,1)
(7,29,1)
(76,83,1)
(19,73,1)
(27,39,1)
(31,47,1)
(60,64,1)
(30,65,1)
(5,72,1)
(46,61,1)
(78,75,1)
(45,31,1)
(68,29,1)
(64,22,1)
(21,61,1)
(40,44,1)
(22,48,1)
(63,61,1)
(43,36,1)
(66,46,1)
(52,34,1)
(39,9,1)
(74,63,1)
(50,53,1)
(13,33,1)
(60,38,1)
(37,16,1)
(13,1,1)
(39,33,1)
(18,72,1)
(26,71,1)
(43,33,1)
(82,37,1)
(47,0,1)
(16,52,1)
(79,15,1)
(68,39,1)
(81,74,1)
(9,58,1)
(53,61,1)
(12,33,1)
(42,43,1)
(59,40,1)
(17,34,1)
(70,60,1)
(72,77,1)
(4,70,1)
(63,50,1)
(34,69,1)
(15,14,1)
(57,35,1)
(29,26,1)
(69,46,1)
(12,45,1)
(3,13,1)
(46,30,1)
(35,76,1)
(56,64,1)
(1,42,1)
(56,24,1)
(83,78,1)
(8,56,1)
(44,51,1)
(24,4,1)
(41,34,2)
(23,59,2)
(22,63,2)
(58,72,2)
(26,33,2)
(3,13,2)
(79,72,2)
(37,34,2)
(21,63,2)
(59,34,2)
(81,63,2)
(30,19,2)
(68,29,2)
(46,19,2)
(63,72,2)
(19,63,2)
(73,63,2)
(31,47,2)
(19,21,2)
(77,20,2)
(43,33,2)
(70,63,2)
(13,63,2)
(65,19,2)
(43,63,2)
(82,34,2)
(47,63,2)
(20,23,2)
(56,64,2)
(39,33,2)
(0,63,2)
(29,26,2)
(29,72,2)
(4,34,2)
(44,34,2)
(12,33,2)
(15,14,2)
(18,72,2)
(3,63,2)
(12,63,2)
(56,77,2)
(63,61,2)
(14,72,2)
(72,34,2)
(69,19,2)
(6,34,2)
(56,82,2)
(74,63,2)
(69,46,2)
(38,34,2)
(83,33,2)
(51,34,2)
(61,68,2)
(82,37,2)
(48,63,2)
(21,61,2)
(70,34,2)
(64,63,2)
(68,39,2)
(8,56,2)
(50,72,2)
(4,63,2)
(53,72,2)
(45,63,2)
(39,72,2)
(4,70,2)
(68,72,2)
(23,34,2)
(59,33,2)
(31,63,2)
(20,34,2)
(7,72,2)
(9,72,2)
(71,72,2)
(36,63,2)
(15,72,2)
(60,63,2)
(6,28,2)
(1,63,2)
(66,19,2)
(27,72,2)
(42,63,2)
(26,72,2)
(40,34,2)
(57,72,2)
(61,72,2)
(16,34,2)
(34,63,2)
(5,72,2)
(46,61,2)
(77,34,2)
(31,3,2)
(52,34,2)
(34,19,2)
(60,34,2)
(34,69,2)
(13,33,2)
(28,34,2)
(17,34,2)
-----------------------------------
(0,modules)
(1,list)
(2,again:)
(3,&mod->list)
(4,mutex_unlock(&module_mutex)
(5,goto again;)
(6,mutex_unlock(&module_mutex)
(7,true)
(8,RET)
(9,name)
(10,)
(11,out:)
(12,mod_tree_insert(mod)
(13,mod->list)
(14,&module_mutex)
(15,mutex_lock(&module_mutex)
(16,EEXIST)
(17,module_mutex)
(18,goto out_unlocked;)
(19,old->state == MODULE_STATE_COMING)
(20,wait_event_interruptible(module_wq,\n\\n\\t\\t\\t\\t\\t       finished_loading(mod->name)
(21,old->state)
(22,0)
(23,finished_loading(mod->name)
(24,err)
(25,if (old != NULL)
(26,mod->name)
(27,mod)
(28,&module_mutex)
(29,strlen(mod->name)
(30,state)
(31,list_add_rcu(&mod->list, &modules)
(32,if (old->state == MODULE_STATE_COMING\n\\n\\t\\t    || old->state == MODULE_STATE_UNFORMED)
(33,struct module *mod)
(34,old->state == MODULE_STATE_COMING\n\\n\\t\\t    || old->state == MODULE_STATE_UNFORMED)
(35,mod->state = MODULE_STATE_UNFORMED)
(36,mod)
(37,-EEXIST)
(38,goto out;)
(39,mod->name)
(40,name)
(41,err)
(42,mod)
(43,mod_update_bounds(mod)
(44,mod)
(45,mod)
(46,old->state)
(47,&modules)
(48,err)
(49,out_unlocked:)
(50,NULL)
(51,module_wq)
(52,err)
(53,old)
(54,err)
(55,)
(56,return err;)
(57,module_mutex)
(58,mod)
(59,mod->name)
(60,module_mutex)
(61,old = find_module_all(mod->name, strlen(mod->name)
(62,)
(63,old != NULL)
(64,err = 0)
(65,old)
(66,MODULE_STATE_UNFORMED)
(67,old)
(68,find_module_all(mod->name, strlen(mod->name)
(69,old->state == MODULE_STATE_UNFORMED)
(70,&module_mutex)
(71,name)
(72,err)
(73,MODULE_STATE_COMING)
(74,old)
(75,mod)
(76,MODULE_STATE_UNFORMED)
(77,err = wait_event_interruptible(module_wq,\n\\n\\t\\t\\t\\t\\t       finished_loading(mod->name)
(78,state)
(79,old)
(80,if (err)
(81,state)
(82,err = -EEXIST)
(83,mod->state)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^