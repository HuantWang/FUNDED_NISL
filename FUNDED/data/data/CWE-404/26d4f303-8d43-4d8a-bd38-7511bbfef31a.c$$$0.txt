-----label-----
0
-----code-----
static int ltq_eiu_settype(struct irq_data *d, unsigned int type)
{
	int i;

	for (i = 0; i < exin_avail; i++) {
		if (d->hwirq == ltq_eiu_irq[i]) {
			int val = 0;
			int edge = 0;

			switch (type) {
			case IRQF_TRIGGER_NONE:
				break;
			case IRQF_TRIGGER_RISING:
				val = 1;
				edge = 1;
				break;
			case IRQF_TRIGGER_FALLING:
				val = 2;
				edge = 1;
				break;
			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:
				val = 3;
				edge = 1;
				break;
			case IRQF_TRIGGER_HIGH:
				val = 5;
				break;
			case IRQF_TRIGGER_LOW:
				val = 6;
				break;
			default:
				pr_err("invalid type %d for irq %ld\n",
					type, d->hwirq);
				return -EINVAL;
			}

			if (edge)
				irq_set_handler(d->hwirq, handle_edge_irq);

			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |
				(val << (i * 4)), LTQ_EIU_EXIN_C);
		}
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
16,17
17,18
17,19
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
30,31
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
45,46
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
65,68
65,69
65,70
65,71
65,72
65,73
65,74
65,75
65,76
65,77
65,78
65,79
65,80
65,81
65,82
65,83
65,84
65,85
65,86
65,87
65,88
66,67
67,68
70,71
71,72
73,74
74,75
74,76
75,76
78,79
79,80
79,81
80,81
84,85
85,86
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
98,99
99,100
99,101
100,101
102,103
104,105
105,106
105,107
106,107
109,110
110,111
110,112
111,112
115,116
116,117
118,119
119,120
119,121
120,121
124,125
125,126
127,128
128,129
128,130
129,130
134,135
135,136
135,137
135,138
135,139
136,137
139,140
141,142
141,143
142,143
145,146
146,147
147,148
149,150
149,151
150,151
152,153
153,154
153,155
153,156
154,155
156,157
156,158
157,158
160,161
162,163
163,164
163,165
163,166
164,165
166,167
166,168
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
177,178
177,179
178,179
181,182
183,184
-----nextToken-----
2,4,7,9,10,12,14,18,20,25,26,29,31,34,40,41,44,46,50,52,54,57,59,61,64,68,69,72,76,77,81,82,83,86,90,91,95,96,97,101,103,107,108,112,113,114,117,121,122,123,126,130,131,132,133,137,138,140,143,144,148,151,155,158,159,161,165,169,171,175,179,180,182,184
-----computeFrom-----
23,24
23,25
27,28
27,29
37,38
37,39
74,75
74,76
79,80
79,81
88,89
88,90
93,94
93,95
99,100
99,101
105,106
105,107
110,111
110,112
119,120
119,121
128,129
128,130
166,167
166,168
173,174
173,175
177,178
177,179
-----guardedBy-----
40,158
41,159
46,179
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ltq_eiu_settype(struct irq_data *d, unsigned int type){	int i;	for (i = 0; i < exin_avail; i++) {		if (d->hwirq == ltq_eiu_irq[i]) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);		}	}	return 0;}
static int
ltq_eiu_settype(struct irq_data *d, unsigned int type)
ltq_eiu_settype
struct irq_data *d
struct irq_data
irq_data
*d
*
d
unsigned int type
unsigned int
type
type
{	int i;	for (i = 0; i < exin_avail; i++) {		if (d->hwirq == ltq_eiu_irq[i]) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);		}	}	return 0;}
int i;
int i;
int
i
i
for (i = 0; i < exin_avail; i++) {		if (d->hwirq == ltq_eiu_irq[i]) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);		}	}
i = 0;
i = 0
i
i
0
i < exin_avail
i
i
exin_avail
exin_avail
i++
i
i
{		if (d->hwirq == ltq_eiu_irq[i]) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);		}	}
if (d->hwirq == ltq_eiu_irq[i]) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);		}
d->hwirq == ltq_eiu_irq[i]
d->hwirq
d
d
hwirq
ltq_eiu_irq[i]
ltq_eiu_irq
ltq_eiu_irq
i
i
{			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);		}
int val = 0;
int val = 0;
int
val = 0
val
= 0
0
int edge = 0;
int edge = 0;
int
edge = 0
edge
= 0
0
switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}
type
type
{			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}
case IRQF_TRIGGER_NONE:
IRQF_TRIGGER_NONE
IRQF_TRIGGER_NONE
break;
case IRQF_TRIGGER_RISING:
IRQF_TRIGGER_RISING
IRQF_TRIGGER_RISING
val = 1;
val = 1
val
val
1
edge = 1;
edge = 1
edge
edge
1
break;
case IRQF_TRIGGER_FALLING:
IRQF_TRIGGER_FALLING
IRQF_TRIGGER_FALLING
val = 2;
val = 2
val
val
2
edge = 1;
edge = 1
edge
edge
1
break;
case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:
IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING
IRQF_TRIGGER_RISING
IRQF_TRIGGER_RISING
IRQF_TRIGGER_FALLING
IRQF_TRIGGER_FALLING
val = 3;
val = 3
val
val
3
edge = 1;
edge = 1
edge
edge
1
break;
case IRQF_TRIGGER_HIGH:
IRQF_TRIGGER_HIGH
IRQF_TRIGGER_HIGH
val = 5;
val = 5
val
val
5
break;
case IRQF_TRIGGER_LOW:
IRQF_TRIGGER_LOW
IRQF_TRIGGER_LOW
val = 6;
val = 6
val
val
6
break;
default:
pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);
pr_err("invalid type %d for irq %ld\n",					type, d->hwirq)
pr_err
pr_err
"invalid type %d for irq %ld\n"
type
type
d->hwirq
d
d
hwirq
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);
edge
edge
irq_set_handler(d->hwirq, handle_edge_irq);
irq_set_handler(d->hwirq, handle_edge_irq)
irq_set_handler
irq_set_handler
d->hwirq
d
d
hwirq
handle_edge_irq
handle_edge_irq
ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C);
ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4)), LTQ_EIU_EXIN_C)
ltq_eiu_w32
ltq_eiu_w32
ltq_eiu_r32(LTQ_EIU_EXIN_C) |				(val << (i * 4))
ltq_eiu_r32(LTQ_EIU_EXIN_C)
ltq_eiu_r32
ltq_eiu_r32
LTQ_EIU_EXIN_C
LTQ_EIU_EXIN_C
(val << (i * 4))
val << (i * 4)
val
val
(i * 4)
i * 4
i
i
4
LTQ_EIU_EXIN_C
LTQ_EIU_EXIN_C
return 0;
0
-----joern-----
(89,84,0)
(71,84,0)
(93,37,0)
(37,90,0)
(25,55,0)
(22,57,0)
(64,75,0)
(85,23,0)
(64,8,0)
(55,57,0)
(99,43,0)
(34,23,0)
(84,45,0)
(80,8,0)
(51,21,0)
(65,32,0)
(61,54,0)
(4,57,0)
(92,62,0)
(9,57,0)
(14,48,0)
(78,9,0)
(16,7,0)
(23,29,0)
(83,75,0)
(64,32,0)
(62,43,0)
(11,82,0)
(7,41,0)
(21,82,0)
(17,89,0)
(53,89,0)
(33,84,0)
(64,55,0)
(18,73,0)
(81,73,0)
(68,41,0)
(64,13,0)
(98,9,0)
(89,44,0)
(58,32,0)
(90,64,0)
(97,57,0)
(69,7,0)
(63,57,0)
(40,10,0)
(26,42,0)
(35,18,0)
(54,43,0)
(49,29,0)
(1,75,0)
(30,29,0)
(84,57,0)
(8,57,0)
(94,42,0)
(96,8,0)
(13,57,0)
(77,66,0)
(70,54,0)
(87,99,0)
(5,57,0)
(41,7,0)
(90,37,0)
(59,67,0)
(10,44,0)
(39,55,0)
(6,57,0)
(91,56,0)
(31,57,0)
(64,42,0)
(15,57,0)
(46,43,0)
(0,57,0)
(84,89,0)
(54,40,0)
(99,64,0)
(24,29,0)
(90,67,0)
(76,10,0)
(10,40,0)
(40,54,0)
(47,43,0)
(36,10,0)
(20,3,0)
(79,13,0)
(11,18,0)
(95,66,0)
(67,90,0)
(82,57,0)
(42,57,0)
(27,62,0)
(67,29,0)
(64,90,0)
(60,57,0)
(66,57,0)
(48,43,0)
(64,99,0)
(2,64,0)
(7,44,0)
(12,29,0)
(38,57,0)
(74,57,0)
(50,57,0)
(75,57,0)
(3,57,0)
(32,29,0)
(52,99,0)
(88,3,0)
(86,73,0)
(19,13,0)
(99,52,1)
(65,58,1)
(64,8,1)
(23,85,1)
(93,72,1)
(77,95,1)
(72,31,1)
(62,27,1)
(72,4,1)
(64,42,1)
(15,13,1)
(14,40,1)
(89,44,1)
(11,18,1)
(26,28,1)
(42,94,1)
(72,97,1)
(10,36,1)
(9,98,1)
(87,2,1)
(13,79,1)
(58,40,1)
(82,21,1)
(79,19,1)
(53,17,1)
(69,16,1)
(54,43,1)
(3,20,1)
(27,92,1)
(7,69,1)
(39,25,1)
(34,32,1)
(8,96,1)
(10,44,1)
(90,64,1)
(67,59,1)
(78,8,1)
(16,72,1)
(5,28,1)
(90,37,1)
(25,28,1)
(62,43,1)
(64,55,1)
(7,44,1)
(11,82,1)
(48,14,1)
(17,33,1)
(55,39,1)
(66,77,1)
(19,28,1)
(14,67,1)
(54,61,1)
(2,37,1)
(41,7,1)
(75,83,1)
(37,93,1)
(71,28,1)
(35,62,1)
(95,55,1)
(31,75,1)
(48,43,1)
(41,68,1)
(84,89,1)
(51,84,1)
(64,99,1)
(33,71,1)
(28,23,1)
(83,1,1)
(84,45,1)
(89,53,1)
(72,0,1)
(98,78,1)
(40,54,1)
(4,3,1)
(1,28,1)
(64,75,1)
(61,70,1)
(72,15,1)
(20,88,1)
(72,5,1)
(18,35,1)
(67,90,1)
(52,87,1)
(59,90,1)
(94,26,1)
(40,10,1)
(43,47,1)
(36,76,1)
(93,41,1)
(64,32,1)
(99,43,1)
(92,48,1)
(88,42,1)
(76,62,1)
(96,80,1)
(47,46,1)
(97,66,1)
(32,65,1)
(70,10,1)
(68,7,1)
(85,34,1)
(64,13,1)
(21,51,1)
(92,43,1)
(0,9,1)
(5,28,2)
(72,28,2)
(61,62,2)
(28,40,2)
(17,28,2)
(76,62,2)
(84,45,2)
(88,28,2)
(64,99,2)
(82,28,2)
(20,28,2)
(16,72,2)
(83,28,2)
(62,43,2)
(89,28,2)
(64,75,2)
(85,40,2)
(48,40,2)
(10,44,2)
(27,40,2)
(64,32,2)
(7,72,2)
(25,28,2)
(64,42,2)
(41,7,2)
(84,89,2)
(3,28,2)
(66,28,2)
(97,28,2)
(4,28,2)
(37,28,2)
(39,28,2)
(40,54,2)
(40,10,2)
(36,62,2)
(15,28,2)
(99,28,2)
(90,37,2)
(59,28,2)
(2,28,2)
(27,28,2)
(10,62,2)
(34,40,2)
(62,28,2)
(64,8,2)
(31,28,2)
(14,40,2)
(64,13,2)
(1,28,2)
(32,40,2)
(18,62,2)
(71,28,2)
(67,28,2)
(21,28,2)
(94,28,2)
(69,72,2)
(26,28,2)
(79,28,2)
(70,62,2)
(89,44,2)
(23,40,2)
(11,82,2)
(11,18,2)
(68,72,2)
(77,28,2)
(67,90,2)
(92,28,2)
(95,28,2)
(99,43,2)
(87,28,2)
(42,28,2)
(64,55,2)
(53,28,2)
(33,28,2)
(48,43,2)
(14,28,2)
(55,28,2)
(92,40,2)
(48,28,2)
(90,64,2)
(64,28,2)
(52,28,2)
(65,40,2)
(19,28,2)
(13,28,2)
(90,28,2)
(93,28,2)
(41,72,2)
(84,28,2)
(35,62,2)
(7,44,2)
(75,28,2)
(54,62,2)
(40,62,2)
(54,43,2)
(58,40,2)
(51,28,2)
(62,40,2)
-----------------------------------
(0,break;)
(1,val)
(2,val)
(3,edge = 1)
(4,break;)
(5,break;)
(6,default:)
(7,d->hwirq)
(8,val = 3)
(9,edge = 1)
(10,d->hwirq)
(11,RET)
(12,val)
(13,val = 6)
(14,i)
(15,break;)
(16,d)
(17,d)
(18,return 0;)
(19,val)
(20,1)
(21,-EINVAL)
(22,case IRQF_TRIGGER_FALLING:)
(23,edge = 0)
(24,edge)
(25,val)
(26,val)
(27,exin_avail)
(28,type)
(29,)
(30,switch (type)
(31,break;)
(32,val = 0)
(33,type)
(34,edge)
(35,0)
(36,hwirq)
(37,ltq_eiu_r32(LTQ_EIU_EXIN_C)
(38,case IRQF_TRIGGER_HIGH:)
(39,2)
(40,d->hwirq == ltq_eiu_irq[i])
(41,irq_set_handler(d->hwirq, handle_edge_irq)
(42,val = 1)
(43,i = 0)
(44,struct irq_data *d)
(45,unsigned int type)
(46,i)
(47,0)
(48,i++)
(49,if (edge)
(50,case IRQF_TRIGGER_NONE:)
(51,EINVAL)
(52,4)
(53,hwirq)
(54,ltq_eiu_irq[i])
(55,val = 2)
(56,)
(57,)
(58,val)
(59,LTQ_EIU_EXIN_C)
(60,case IRQF_TRIGGER_LOW:)
(61,i)
(62,i < exin_avail)
(63,IRQF_TRIGGER_FALLING:)
(64,val << (i * 4)
(65,0)
(66,edge = 1)
(67,ltq_eiu_w32(ltq_eiu_r32(LTQ_EIU_EXIN_C)
(68,handle_edge_irq)
(69,hwirq)
(70,ltq_eiu_irq)
(71,"invalid type %d for irq %ld\\n")
(72,edge)
(73,)
(74,case IRQF_TRIGGER_RISING:)
(75,val = 5)
(76,d)
(77,1)
(78,edge)
(79,6)
(80,val)
(81,for (i = 0; i < exin_avail; i++)
(82,return -EINVAL;)
(83,5)
(84,pr_err("invalid type %d for irq %ld\\n",\n\\n\\t\\t\\t\\t\\ttype, d->hwirq)
(85,0)
(86,i)
(87,i)
(88,edge)
(89,d->hwirq)
(90,ltq_eiu_r32(LTQ_EIU_EXIN_C)
(91,if (d->hwirq == ltq_eiu_irq[i])
(92,i)
(93,LTQ_EIU_EXIN_C)
(94,1)
(95,edge)
(96,3)
(97,break;)
(98,1)
(99,i * 4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^