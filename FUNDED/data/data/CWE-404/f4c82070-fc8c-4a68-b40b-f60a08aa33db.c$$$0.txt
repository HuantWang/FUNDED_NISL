-----label-----
0
-----code-----
static int ltq_eiu_settype(struct irq_data *d, unsigned int type)
{
	int i;

	for (i = 0; i < MAX_EIU; i++) {
		if (d->hwirq == ltq_eiu_irq[i].start) {
			int val = 0;
			int edge = 0;

			switch (type) {
			case IRQF_TRIGGER_NONE:
				break;
			case IRQF_TRIGGER_RISING:
				val = 1;
				edge = 1;
				break;
			case IRQF_TRIGGER_FALLING:
				val = 2;
				edge = 1;
				break;
			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:
				val = 3;
				edge = 1;
				break;
			case IRQF_TRIGGER_HIGH:
				val = 5;
				break;
			case IRQF_TRIGGER_LOW:
				val = 6;
				break;
			default:
				pr_err("invalid type %d for irq %ld\n",
					type, d->hwirq);
				return -EINVAL;
			}

			if (edge)
				irq_set_handler(d->hwirq, handle_edge_irq);

			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &
				    (~(7 << (i * 4)))) | (val << (i * 4)),
				    LTQ_EIU_EXIN_C);
		}
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
16,17
17,18
17,19
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
27,28
27,29
28,29
30,31
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
53,54
53,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
67,70
67,71
67,72
67,73
67,74
67,75
67,76
67,77
67,78
67,79
67,80
67,81
67,82
67,83
67,84
67,85
67,86
67,87
67,88
67,89
67,90
68,69
69,70
72,73
73,74
75,76
76,77
76,78
77,78
80,81
81,82
81,83
82,83
86,87
87,88
89,90
90,91
90,92
91,92
94,95
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
111,112
112,113
112,114
113,114
117,118
118,119
120,121
121,122
121,123
122,123
126,127
127,128
129,130
130,131
130,132
131,132
136,137
137,138
137,139
137,140
137,141
138,139
141,142
143,144
143,145
144,145
147,148
148,149
149,150
151,152
151,153
152,153
154,155
155,156
155,157
155,158
156,157
158,159
158,160
159,160
162,163
164,165
165,166
165,167
165,168
166,167
168,169
168,170
169,170
170,171
170,172
171,172
171,173
172,173
174,175
176,177
177,178
178,179
179,180
179,181
181,182
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
191,192
191,193
192,193
195,196
197,198
-----nextToken-----
2,4,7,9,10,12,14,18,20,25,26,29,31,34,40,41,45,47,48,52,54,56,59,61,63,66,70,71,74,78,79,83,84,85,88,92,93,97,98,99,103,105,109,110,114,115,116,119,123,124,125,128,132,133,134,135,139,140,142,145,146,150,153,157,160,161,163,167,173,175,180,184,185,189,193,194,196,198
-----computeFrom-----
23,24
23,25
27,28
27,29
37,38
37,39
76,77
76,78
81,82
81,83
90,91
90,92
95,96
95,97
101,102
101,103
107,108
107,109
112,113
112,114
121,122
121,123
130,131
130,132
168,169
168,170
170,171
170,172
179,180
179,181
182,183
182,184
187,188
187,189
191,192
191,193
-----guardedBy-----
40,160
41,161
47,193
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ltq_eiu_settype(struct irq_data *d, unsigned int type){	int i;	for (i = 0; i < MAX_EIU; i++) {		if (d->hwirq == ltq_eiu_irq[i].start) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);		}	}	return 0;}
static int
ltq_eiu_settype(struct irq_data *d, unsigned int type)
ltq_eiu_settype
struct irq_data *d
struct irq_data
irq_data
*d
*
d
unsigned int type
unsigned int
type
type
{	int i;	for (i = 0; i < MAX_EIU; i++) {		if (d->hwirq == ltq_eiu_irq[i].start) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);		}	}	return 0;}
int i;
int i;
int
i
i
for (i = 0; i < MAX_EIU; i++) {		if (d->hwirq == ltq_eiu_irq[i].start) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);		}	}
i = 0;
i = 0
i
i
0
i < MAX_EIU
i
i
MAX_EIU
MAX_EIU
i++
i
i
{		if (d->hwirq == ltq_eiu_irq[i].start) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);		}	}
if (d->hwirq == ltq_eiu_irq[i].start) {			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);		}
d->hwirq == ltq_eiu_irq[i].start
d->hwirq
d
d
hwirq
ltq_eiu_irq[i].start
ltq_eiu_irq[i]
ltq_eiu_irq
ltq_eiu_irq
i
i
start
{			int val = 0;			int edge = 0;			switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}			if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);			ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);		}
int val = 0;
int val = 0;
int
val = 0
val
= 0
0
int edge = 0;
int edge = 0;
int
edge = 0
edge
= 0
0
switch (type) {			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}
type
type
{			case IRQF_TRIGGER_NONE:				break;			case IRQF_TRIGGER_RISING:				val = 1;				edge = 1;				break;			case IRQF_TRIGGER_FALLING:				val = 2;				edge = 1;				break;			case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:				val = 3;				edge = 1;				break;			case IRQF_TRIGGER_HIGH:				val = 5;				break;			case IRQF_TRIGGER_LOW:				val = 6;				break;			default:				pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);				return -EINVAL;			}
case IRQF_TRIGGER_NONE:
IRQF_TRIGGER_NONE
IRQF_TRIGGER_NONE
break;
case IRQF_TRIGGER_RISING:
IRQF_TRIGGER_RISING
IRQF_TRIGGER_RISING
val = 1;
val = 1
val
val
1
edge = 1;
edge = 1
edge
edge
1
break;
case IRQF_TRIGGER_FALLING:
IRQF_TRIGGER_FALLING
IRQF_TRIGGER_FALLING
val = 2;
val = 2
val
val
2
edge = 1;
edge = 1
edge
edge
1
break;
case IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING:
IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING
IRQF_TRIGGER_RISING
IRQF_TRIGGER_RISING
IRQF_TRIGGER_FALLING
IRQF_TRIGGER_FALLING
val = 3;
val = 3
val
val
3
edge = 1;
edge = 1
edge
edge
1
break;
case IRQF_TRIGGER_HIGH:
IRQF_TRIGGER_HIGH
IRQF_TRIGGER_HIGH
val = 5;
val = 5
val
val
5
break;
case IRQF_TRIGGER_LOW:
IRQF_TRIGGER_LOW
IRQF_TRIGGER_LOW
val = 6;
val = 6
val
val
6
break;
default:
pr_err("invalid type %d for irq %ld\n",					type, d->hwirq);
pr_err("invalid type %d for irq %ld\n",					type, d->hwirq)
pr_err
pr_err
"invalid type %d for irq %ld\n"
type
type
d->hwirq
d
d
hwirq
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (edge)				irq_set_handler(d->hwirq, handle_edge_irq);
edge
edge
irq_set_handler(d->hwirq, handle_edge_irq);
irq_set_handler(d->hwirq, handle_edge_irq)
irq_set_handler
irq_set_handler
d->hwirq
d
d
hwirq
handle_edge_irq
handle_edge_irq
ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C);
ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4)),				    LTQ_EIU_EXIN_C)
ltq_eiu_w32
ltq_eiu_w32
(ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))) | (val << (i * 4))
(ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4))))
ltq_eiu_r32(LTQ_EIU_EXIN_C) &				    (~(7 << (i * 4)))
ltq_eiu_r32(LTQ_EIU_EXIN_C)
ltq_eiu_r32
ltq_eiu_r32
LTQ_EIU_EXIN_C
LTQ_EIU_EXIN_C
(~(7 << (i * 4)))
~(7 << (i * 4))
(7 << (i * 4))
7 << (i * 4)
7
(i * 4)
i * 4
i
i
4
(val << (i * 4))
val << (i * 4)
val
val
(i * 4)
i * 4
i
i
4
LTQ_EIU_EXIN_C
LTQ_EIU_EXIN_C
return 0;
0
-----joern-----
(29,11,0)
(61,34,0)
(48,52,0)
(37,26,0)
(54,17,0)
(57,12,0)
(13,44,0)
(77,26,0)
(39,42,0)
(75,26,0)
(8,30,0)
(73,4,0)
(93,11,0)
(70,26,0)
(94,71,0)
(17,54,0)
(30,102,0)
(56,20,0)
(42,60,0)
(5,19,0)
(86,0,0)
(81,34,0)
(31,26,0)
(87,52,0)
(89,78,0)
(18,108,0)
(21,42,0)
(78,34,0)
(84,69,0)
(6,63,0)
(81,0,0)
(72,26,0)
(64,26,0)
(88,98,0)
(38,12,0)
(30,19,0)
(54,45,0)
(11,7,0)
(45,89,0)
(35,89,0)
(69,26,0)
(24,19,0)
(108,10,0)
(58,0,0)
(23,10,0)
(47,70,0)
(10,44,0)
(9,69,0)
(53,71,0)
(78,89,0)
(13,58,0)
(36,60,0)
(0,58,0)
(19,26,0)
(55,70,0)
(17,30,0)
(54,85,0)
(30,42,0)
(99,81,0)
(74,26,0)
(52,34,0)
(17,20,0)
(92,7,0)
(3,13,0)
(30,69,0)
(82,105,0)
(30,71,0)
(4,26,0)
(101,96,0)
(95,28,0)
(66,60,0)
(83,34,0)
(50,64,0)
(105,26,0)
(52,30,0)
(67,60,0)
(10,108,0)
(2,26,0)
(106,26,0)
(16,26,0)
(32,26,0)
(103,102,0)
(91,34,0)
(30,105,0)
(40,63,0)
(1,7,0)
(7,26,0)
(63,60,0)
(62,81,0)
(79,76,0)
(49,78,0)
(71,26,0)
(58,13,0)
(80,102,0)
(20,60,0)
(107,105,0)
(45,54,0)
(41,78,0)
(55,96,0)
(100,60,0)
(97,26,0)
(46,26,0)
(104,10,0)
(25,28,0)
(68,26,0)
(43,98,0)
(0,81,0)
(96,28,0)
(33,64,0)
(22,13,0)
(15,85,0)
(65,47,0)
(12,34,0)
(59,4,0)
(102,26,0)
(27,83,0)
(7,11,0)
(11,44,0)
(89,45,0)
(98,26,0)
(85,54,0)
(30,17,0)
(7,90,0)
(30,52,0)
(20,17,0)
(30,52,1)
(0,86,1)
(30,102,1)
(108,10,1)
(57,83,1)
(40,42,1)
(45,89,1)
(82,107,1)
(97,4,1)
(83,27,1)
(54,85,1)
(11,29,1)
(50,33,1)
(42,21,1)
(12,38,1)
(103,80,1)
(10,44,1)
(64,50,1)
(39,58,1)
(30,69,1)
(71,53,1)
(14,97,1)
(15,108,1)
(57,34,1)
(14,32,1)
(12,34,1)
(47,65,1)
(93,1,1)
(14,77,1)
(14,75,1)
(52,48,1)
(9,51,1)
(15,14,1)
(30,71,1)
(80,51,1)
(27,20,1)
(21,39,1)
(7,11,1)
(6,40,1)
(94,51,1)
(51,63,1)
(34,61,1)
(73,69,1)
(41,49,1)
(13,3,1)
(84,9,1)
(20,56,1)
(32,51,1)
(14,37,1)
(43,88,1)
(35,85,1)
(0,81,1)
(86,81,1)
(75,98,1)
(77,71,1)
(8,54,1)
(54,45,1)
(104,23,1)
(78,34,1)
(92,51,1)
(2,64,1)
(20,17,1)
(88,105,1)
(10,104,1)
(70,47,1)
(58,13,1)
(55,96,1)
(17,54,1)
(37,102,1)
(30,42,1)
(19,24,1)
(105,82,1)
(17,30,1)
(56,17,1)
(33,19,1)
(89,78,1)
(4,59,1)
(102,103,1)
(65,7,1)
(87,8,1)
(62,13,1)
(108,18,1)
(38,57,1)
(81,99,1)
(85,15,1)
(78,41,1)
(30,19,1)
(59,73,1)
(98,43,1)
(14,2,1)
(1,92,1)
(99,62,1)
(29,93,1)
(3,22,1)
(55,70,1)
(63,6,1)
(23,14,1)
(49,35,1)
(58,0,1)
(61,91,1)
(22,12,1)
(81,34,1)
(27,58,1)
(53,94,1)
(24,5,1)
(30,105,1)
(5,51,1)
(69,84,1)
(7,90,1)
(96,101,1)
(101,12,1)
(52,34,1)
(13,44,1)
(48,87,1)
(11,44,1)
(83,34,1)
(18,10,1)
(104,14,2)
(57,58,2)
(7,90,2)
(86,12,2)
(57,51,2)
(53,51,2)
(2,51,2)
(54,45,2)
(38,51,2)
(40,58,2)
(21,58,2)
(103,51,2)
(65,51,2)
(42,58,2)
(38,58,2)
(13,12,2)
(83,51,2)
(45,89,2)
(12,58,2)
(52,34,2)
(58,13,2)
(5,51,2)
(30,71,2)
(0,81,2)
(11,44,2)
(87,51,2)
(12,34,2)
(20,17,2)
(83,58,2)
(49,51,2)
(51,58,2)
(17,51,2)
(71,51,2)
(27,51,2)
(1,51,2)
(93,51,2)
(7,51,2)
(55,70,2)
(13,44,2)
(32,51,2)
(39,58,2)
(81,12,2)
(102,51,2)
(30,42,2)
(19,51,2)
(63,58,2)
(33,51,2)
(81,34,2)
(48,51,2)
(108,10,2)
(78,34,2)
(20,51,2)
(69,51,2)
(37,51,2)
(41,51,2)
(54,51,2)
(96,12,2)
(30,105,2)
(10,14,2)
(58,0,2)
(11,51,2)
(62,12,2)
(10,44,2)
(17,30,2)
(47,51,2)
(29,51,2)
(50,51,2)
(18,14,2)
(6,58,2)
(0,12,2)
(12,51,2)
(99,12,2)
(7,11,2)
(45,51,2)
(4,51,2)
(3,12,2)
(56,51,2)
(77,51,2)
(97,51,2)
(89,78,2)
(54,85,2)
(15,51,2)
(85,51,2)
(94,51,2)
(92,51,2)
(78,51,2)
(8,51,2)
(89,51,2)
(64,51,2)
(9,51,2)
(24,51,2)
(101,12,2)
(27,58,2)
(17,54,2)
(30,69,2)
(30,102,2)
(59,51,2)
(35,51,2)
(108,14,2)
(30,19,2)
(80,51,2)
(22,12,2)
(70,51,2)
(55,96,2)
(30,52,2)
(58,12,2)
(73,51,2)
(30,51,2)
(83,34,2)
(14,51,2)
(52,51,2)
(84,51,2)
(23,14,2)
-----------------------------------
(0,ltq_eiu_irq[i].start)
(1,type)
(2,break;)
(3,hwirq)
(4,edge = 1)
(5,val)
(6,0)
(7,pr_err("invalid type %d for irq %ld\\n",\n\\n\\t\\t\\t\\t\\ttype, d->hwirq)
(8,val)
(9,val)
(10,d->hwirq)
(11,d->hwirq)
(12,i < MAX_EIU)
(13,d->hwirq)
(14,edge)
(15,LTQ_EIU_EXIN_C)
(16,default:)
(17,(ltq_eiu_r32(LTQ_EIU_EXIN_C)
(18,handle_edge_irq)
(19,val = 1)
(20,ltq_eiu_w32((ltq_eiu_r32(LTQ_EIU_EXIN_C)
(21,0)
(22,d)
(23,d)
(24,1)
(25,i)
(26,)
(27,i)
(28,)
(29,hwirq)
(30,val << (i * 4)
(31,case IRQF_TRIGGER_HIGH:)
(32,break;)
(33,edge)
(34,i = 0)
(35,7)
(36,switch (type)
(37,break;)
(38,MAX_EIU)
(39,val)
(40,edge)
(41,4)
(42,val = 0)
(43,1)
(44,struct irq_data *d)
(45,~(7 << (i * 4)
(46,case IRQF_TRIGGER_FALLING:)
(47,-EINVAL)
(48,4)
(49,i)
(50,1)
(51,type)
(52,i * 4)
(53,6)
(54,ltq_eiu_r32(LTQ_EIU_EXIN_C)
(55,RET)
(56,LTQ_EIU_EXIN_C)
(57,i)
(58,d->hwirq == ltq_eiu_irq[i].start)
(59,1)
(60,)
(61,0)
(62,ltq_eiu_irq)
(63,edge = 0)
(64,edge = 1)
(65,EINVAL)
(66,edge)
(67,if (edge)
(68,case IRQF_TRIGGER_LOW:)
(69,val = 2)
(70,return -EINVAL;)
(71,val = 6)
(72,case IRQF_TRIGGER_NONE:)
(73,edge)
(74,case IRQF_TRIGGER_RISING:)
(75,break;)
(76,)
(77,break;)
(78,i * 4)
(79,if (d->hwirq == ltq_eiu_irq[i].start)
(80,val)
(81,ltq_eiu_irq[i])
(82,3)
(83,i++)
(84,2)
(85,ltq_eiu_r32(LTQ_EIU_EXIN_C)
(86,start)
(87,i)
(88,edge)
(89,7 << (i * 4)
(90,unsigned int type)
(91,i)
(92,"invalid type %d for irq %ld\\n")
(93,d)
(94,val)
(95,for (i = 0; i < MAX_EIU; i++)
(96,return 0;)
(97,break;)
(98,edge = 1)
(99,i)
(100,val)
(101,0)
(102,val = 5)
(103,5)
(104,hwirq)
(105,val = 3)
(106,IRQF_TRIGGER_FALLING:)
(107,val)
(108,irq_set_handler(d->hwirq, handle_edge_irq)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^