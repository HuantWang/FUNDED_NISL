-----label-----
1
-----code-----
static uint
font11_substitute_glyph_index_vertical(gs_font_type42 *pfont, uint glyph_index,
					  int WMode, gs_glyph glyph)
{
    gs_font_cid2 *pfcid = (gs_font_cid2 *)pfont;
    uint cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph);
    int WMode1 = !WMode;\
    gs_subst_CID_on_WMode_t *s = pfcid->subst_CID_on_WMode;

    if (s != NULL) {
	uint *subst = s->data[WMode1];
	int bi, ei, i;

	/* Binary search for cid in subst (2-int elements) : */
	bi = 0;
	ei = pfcid->subst_CID_on_WMode->size[WMode1];

	if (ei > 0) {
	    for (;;) {
		i = ((bi + ei) / 2) & ~1;
		if (subst[i] == cid) {
		    WMode = WMode1;
		    break;
		}
		if (bi + 2 >= ei)
		    break;
		if (subst[i] > cid)
		    ei = i;
		else
		    bi = i;
	    }
	}
    }
    return gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
19,20
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
27,28
28,29
28,30
29,30
31,32
31,33
31,34
34,35
35,36
35,37
36,37
36,38
37,38
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
51,52
51,53
51,54
52,53
52,54
53,54
55,56
57,58
57,59
58,59
60,61
62,63
64,65
65,66
65,67
67,68
67,69
69,70
70,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
77,80
80,81
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
91,94
91,95
91,96
92,93
93,94
93,95
94,95
96,97
96,98
96,99
99,100
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
108,110
108,111
108,112
110,111
112,113
114,115
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
125,126
125,127
126,127
126,128
127,128
127,129
128,129
132,133
134,135
134,136
135,136
135,137
136,137
139,140
140,141
140,142
142,143
142,144
142,145
142,146
143,144
144,145
144,146
145,146
147,148
147,149
148,149
149,150
149,151
150,151
151,152
151,153
152,153
154,155
157,158
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
168,169
168,170
169,170
170,171
170,172
171,172
173,174
176,177
176,178
177,178
177,179
178,179
178,180
179,180
182,183
185,186
185,187
185,188
186,187
186,188
187,188
187,189
188,189
190,191
192,193
194,195
195,196
195,197
196,197
198,199
200,201
201,202
201,203
202,203
204,205
206,207
207,208
207,209
207,210
207,211
207,212
208,209
210,211
212,213
214,215
216,217
-----nextToken-----
3,5,8,10,11,14,16,18,20,23,25,30,32,33,38,40,42,46,48,54,56,59,61,63,66,68,72,76,78,79,83,84,88,90,95,97,98,103,104,106,109,111,113,115,119,120,124,129,130,131,133,137,138,141,146,153,155,156,158,163,165,167,172,174,175,180,181,183,184,189,191,193,197,199,203,205,209,211,213,215,217
-----computeFrom-----
52,53
52,54
57,58
57,59
86,87
86,88
117,118
117,119
122,123
122,124
135,136
135,137
144,145
144,146
147,148
147,149
149,150
149,151
151,152
151,153
160,161
160,162
170,171
170,172
177,178
177,179
178,179
178,180
186,187
186,188
195,196
195,197
201,202
201,203
-----guardedBy-----
88,103
137,197
191,199
-----guardedByNegation-----
191,205
-----lastLexicalUse-----
191,205
-----jump-----
191,205
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;NullStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static uintfont11_substitute_glyph_index_vertical(gs_font_type42 *pfont, uint glyph_index,					  int WMode, gs_glyph glyph){    gs_font_cid2 *pfcid = (gs_font_cid2 *)pfont;    uint cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph);    int WMode1 = !WMode;\    gs_subst_CID_on_WMode_t *s = pfcid->subst_CID_on_WMode;    if (s != NULL) {	uint *subst = s->data[WMode1];	int bi, ei, i;	/* Binary search for cid in subst (2-int elements) : */	bi = 0;	ei = pfcid->subst_CID_on_WMode->size[WMode1];	if (ei > 0) {	    for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }	}    }    return gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph);}
static uint
uint
font11_substitute_glyph_index_vertical(gs_font_type42 *pfont, uint glyph_index,					  int WMode, gs_glyph glyph)
font11_substitute_glyph_index_vertical
gs_font_type42 *pfont
gs_font_type42
gs_font_type42
*pfont
*
pfont
uint glyph_index
uint
uint
glyph_index
glyph_index
int WMode
int
WMode
WMode
gs_glyph glyph
gs_glyph
gs_glyph
glyph
glyph
{    gs_font_cid2 *pfcid = (gs_font_cid2 *)pfont;    uint cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph);    int WMode1 = !WMode;\    gs_subst_CID_on_WMode_t *s = pfcid->subst_CID_on_WMode;    if (s != NULL) {	uint *subst = s->data[WMode1];	int bi, ei, i;	/* Binary search for cid in subst (2-int elements) : */	bi = 0;	ei = pfcid->subst_CID_on_WMode->size[WMode1];	if (ei > 0) {	    for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }	}    }    return gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph);}
gs_font_cid2 *pfcid = (gs_font_cid2 *)pfont;
gs_font_cid2 *pfcid = (gs_font_cid2 *)pfont;
gs_font_cid2
gs_font_cid2
*pfcid = (gs_font_cid2 *)pfont
*
pfcid
= (gs_font_cid2 *)pfont
(gs_font_cid2 *)pfont
gs_font_cid2 *
gs_font_cid2
gs_font_cid2
*
*
pfont
pfont
uint cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph);
uint cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph);
uint
uint
cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph)
cid
= (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph)
(glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph)
glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph
glyph >= GS_MIN_CID_GLYPH
glyph
glyph
GS_MIN_CID_GLYPH
GS_MIN_CID_GLYPH
glyph - GS_MIN_CID_GLYPH
glyph
glyph
GS_MIN_CID_GLYPH
GS_MIN_CID_GLYPH
glyph
glyph
int WMode1 = !WMode;\
int WMode1 = !WMode;\
int
WMode1 = !WMode
WMode1
= !WMode
!WMode
WMode
WMode
gs_subst_CID_on_WMode_t *s = pfcid->subst_CID_on_WMode;
gs_subst_CID_on_WMode_t *s = pfcid->subst_CID_on_WMode;
gs_subst_CID_on_WMode_t
gs_subst_CID_on_WMode_t
*s = pfcid->subst_CID_on_WMode
*
s
= pfcid->subst_CID_on_WMode
pfcid->subst_CID_on_WMode
pfcid
pfcid
subst_CID_on_WMode
if (s != NULL) {	uint *subst = s->data[WMode1];	int bi, ei, i;	/* Binary search for cid in subst (2-int elements) : */	bi = 0;	ei = pfcid->subst_CID_on_WMode->size[WMode1];	if (ei > 0) {	    for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }	}    }
s != NULL
s
s
NULL
NULL
{	uint *subst = s->data[WMode1];	int bi, ei, i;	/* Binary search for cid in subst (2-int elements) : */	bi = 0;	ei = pfcid->subst_CID_on_WMode->size[WMode1];	if (ei > 0) {	    for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }	}    }
uint *subst = s->data[WMode1];
uint *subst = s->data[WMode1];
uint
uint
*subst = s->data[WMode1]
*
subst
= s->data[WMode1]
s->data[WMode1]
s->data
s
s
data
WMode1
WMode1
int bi, ei, i;
int bi, ei, i;
int
bi
bi
ei
ei
i
i
bi = 0;
bi = 0
bi
bi
0
ei = pfcid->subst_CID_on_WMode->size[WMode1];
ei = pfcid->subst_CID_on_WMode->size[WMode1]
ei
ei
pfcid->subst_CID_on_WMode->size[WMode1]
pfcid->subst_CID_on_WMode->size
pfcid->subst_CID_on_WMode
pfcid
pfcid
subst_CID_on_WMode
size
WMode1
WMode1
if (ei > 0) {	    for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }	}
ei > 0
ei
ei
0
{	    for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }	}
for (;;) {		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }
;
{		i = ((bi + ei) / 2) & ~1;		if (subst[i] == cid) {		    WMode = WMode1;		    break;		}		if (bi + 2 >= ei)		    break;		if (subst[i] > cid)		    ei = i;		else		    bi = i;	    }
i = ((bi + ei) / 2) & ~1;
i = ((bi + ei) / 2) & ~1
i
i
((bi + ei) / 2) & ~1
((bi + ei) / 2)
(bi + ei) / 2
(bi + ei)
bi + ei
bi
bi
ei
ei
2
~1
1
if (subst[i] == cid) {		    WMode = WMode1;		    break;		}
subst[i] == cid
subst[i]
subst
subst
i
i
cid
cid
{		    WMode = WMode1;		    break;		}
WMode = WMode1;
WMode = WMode1
WMode
WMode
WMode1
WMode1
break;
if (bi + 2 >= ei)		    break;
bi + 2 >= ei
bi + 2
bi
bi
2
ei
ei
break;
if (subst[i] > cid)		    ei = i;		else		    bi = i;
subst[i] > cid
subst[i]
subst
subst
i
i
cid
cid
ei = i;
ei = i
ei
ei
i
i
bi = i;
bi = i
bi
bi
i
i
return gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph);
gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph)
gs_type42_substitute_glyph_index_vertical
gs_type42_substitute_glyph_index_vertical
pfont
pfont
glyph_index
glyph_index
WMode
WMode
glyph
glyph
-----joern-----
(58,11,0)
(8,23,0)
(9,14,0)
(81,75,0)
(90,79,0)
(112,34,0)
(38,13,0)
(53,92,0)
(78,90,0)
(22,39,0)
(6,78,0)
(113,13,0)
(93,46,0)
(52,104,0)
(48,31,0)
(81,97,0)
(29,56,0)
(107,93,0)
(12,13,0)
(24,107,0)
(67,88,0)
(79,90,0)
(18,22,0)
(70,107,0)
(45,79,0)
(87,18,0)
(1,31,0)
(27,56,0)
(87,112,0)
(10,13,0)
(92,79,0)
(85,113,0)
(66,23,0)
(75,81,0)
(104,11,0)
(97,81,0)
(107,4,0)
(34,22,0)
(47,85,0)
(109,22,0)
(79,92,0)
(68,54,0)
(5,39,0)
(83,13,0)
(16,93,0)
(75,23,0)
(34,112,0)
(11,75,0)
(54,85,0)
(85,91,0)
(55,101,0)
(100,78,0)
(37,107,0)
(54,92,0)
(40,93,0)
(51,44,0)
(22,34,0)
(56,13,0)
(64,85,0)
(101,31,0)
(9,49,0)
(14,23,0)
(61,18,0)
(108,87,0)
(31,48,0)
(44,56,0)
(0,57,0)
(89,81,0)
(94,66,0)
(33,23,0)
(96,84,0)
(69,18,0)
(4,23,0)
(25,4,0)
(14,9,0)
(44,22,0)
(27,66,0)
(107,62,0)
(50,2,0)
(15,44,0)
(87,92,0)
(59,113,0)
(1,27,0)
(54,18,0)
(90,78,0)
(32,48,0)
(28,104,0)
(48,14,0)
(103,87,0)
(36,95,0)
(11,104,0)
(102,91,0)
(77,97,0)
(98,113,0)
(21,99,0)
(17,48,0)
(27,1,0)
(60,91,0)
(104,22,0)
(107,46,0)
(81,99,0)
(87,91,0)
(79,66,0)
(92,13,0)
(78,14,0)
(74,27,0)
(85,54,0)
(80,112,0)
(31,23,0)
(71,23,0)
(49,9,0)
(86,39,0)
(82,31,0)
(66,95,0)
(9,42,0)
(30,75,0)
(76,101,0)
(20,39,0)
(91,22,0)
(93,66,0)
(99,81,0)
(88,44,0)
(84,92,0)
(19,14,0)
(26,107,0)
(107,63,0)
(110,34,0)
(72,97,0)
(111,1,0)
(99,63,0)
(104,56,0)
(107,42,0)
(112,87,0)
(56,27,0)
(93,2,0)
(97,63,0)
(43,9,0)
(105,1,0)
(88,75,0)
(44,88,0)
(87,113,0)
(7,84,0)
(41,13,0)
(73,99,0)
(95,46,0)
(81,63,0)
(65,23,0)
(95,66,0)
(3,23,0)
(35,90,0)
(110,112,1)
(27,74,1)
(104,22,1)
(18,61,1)
(64,47,1)
(53,113,1)
(84,92,1)
(18,22,1)
(54,18,1)
(50,93,1)
(91,60,1)
(59,56,1)
(27,1,1)
(101,31,1)
(78,100,1)
(88,44,1)
(68,85,1)
(34,110,1)
(106,54,1)
(97,63,1)
(93,46,1)
(29,101,1)
(105,29,1)
(44,15,1)
(87,113,1)
(100,6,1)
(107,24,1)
(30,14,1)
(80,87,1)
(35,78,1)
(54,68,1)
(25,4,1)
(79,45,1)
(107,46,1)
(69,88,1)
(79,90,1)
(72,77,1)
(21,73,1)
(22,34,1)
(103,108,1)
(58,104,1)
(85,91,1)
(97,72,1)
(95,46,1)
(90,78,1)
(34,112,1)
(95,36,1)
(7,92,1)
(104,52,1)
(81,89,1)
(14,9,1)
(75,81,1)
(60,102,1)
(101,76,1)
(74,1,1)
(9,49,1)
(109,91,1)
(107,93,1)
(45,90,1)
(1,31,1)
(36,94,1)
(96,7,1)
(81,97,1)
(27,66,1)
(54,92,1)
(109,84,1)
(76,55,1)
(85,113,1)
(88,67,1)
(87,92,1)
(77,30,1)
(109,18,1)
(99,63,1)
(48,17,1)
(16,11,1)
(92,79,1)
(113,98,1)
(112,80,1)
(1,111,1)
(107,63,1)
(87,18,1)
(94,75,1)
(43,19,1)
(61,69,1)
(78,14,1)
(48,14,1)
(87,91,1)
(44,56,1)
(90,35,1)
(81,99,1)
(11,75,1)
(67,44,1)
(107,42,1)
(104,56,1)
(66,95,1)
(85,64,1)
(28,22,1)
(9,43,1)
(99,21,1)
(111,105,1)
(11,58,1)
(40,16,1)
(17,32,1)
(87,103,1)
(24,37,1)
(82,66,1)
(51,54,1)
(112,87,1)
(73,97,1)
(89,97,1)
(32,82,1)
(6,53,1)
(9,42,1)
(15,51,1)
(11,104,1)
(91,22,1)
(44,22,1)
(4,107,1)
(108,109,1)
(37,70,1)
(55,31,1)
(93,66,1)
(70,26,1)
(88,75,1)
(56,27,1)
(84,96,1)
(26,106,1)
(52,28,1)
(107,62,1)
(31,48,1)
(26,84,1)
(79,66,1)
(93,40,1)
(102,88,1)
(81,63,1)
(98,59,1)
(26,101,1)
(54,85,1)
(47,11,1)
(26,50,1)
(88,54,2)
(34,54,2)
(84,92,2)
(90,101,2)
(104,84,2)
(84,101,2)
(87,92,2)
(27,1,2)
(1,101,2)
(35,101,2)
(9,49,2)
(9,42,2)
(40,11,2)
(22,84,2)
(104,56,2)
(75,81,2)
(67,54,2)
(58,84,2)
(88,44,2)
(109,84,2)
(34,84,2)
(50,11,2)
(85,11,2)
(18,22,2)
(93,11,2)
(87,84,2)
(93,46,2)
(108,84,2)
(79,90,2)
(107,93,2)
(106,54,2)
(90,78,2)
(108,54,2)
(110,54,2)
(27,101,2)
(92,101,2)
(54,11,2)
(98,101,2)
(27,66,2)
(107,62,2)
(64,11,2)
(74,101,2)
(16,11,2)
(95,46,2)
(93,66,2)
(69,88,2)
(54,92,2)
(103,54,2)
(102,88,2)
(66,95,2)
(11,75,2)
(59,101,2)
(28,54,2)
(109,54,2)
(97,63,2)
(87,91,2)
(110,84,2)
(52,84,2)
(56,101,2)
(58,54,2)
(87,18,2)
(96,101,2)
(34,112,2)
(48,14,2)
(112,84,2)
(107,46,2)
(87,113,2)
(31,48,2)
(29,101,2)
(107,63,2)
(52,54,2)
(104,54,2)
(14,9,2)
(54,18,2)
(78,14,2)
(79,101,2)
(104,22,2)
(85,91,2)
(18,88,2)
(11,54,2)
(92,79,2)
(113,101,2)
(1,31,2)
(88,75,2)
(15,54,2)
(11,84,2)
(61,88,2)
(85,113,2)
(6,101,2)
(111,101,2)
(56,27,2)
(87,54,2)
(73,97,2)
(107,42,2)
(81,97,2)
(81,99,2)
(54,85,2)
(100,101,2)
(44,54,2)
(78,101,2)
(91,22,2)
(44,22,2)
(47,11,2)
(89,97,2)
(44,56,2)
(22,54,2)
(7,101,2)
(99,97,2)
(81,63,2)
(99,63,2)
(53,101,2)
(103,84,2)
(21,97,2)
(80,54,2)
(60,88,2)
(112,87,2)
(112,54,2)
(101,31,2)
(68,11,2)
(80,84,2)
(91,88,2)
(25,4,2)
(51,54,2)
(45,101,2)
(28,84,2)
(22,34,2)
(105,101,2)
(11,104,2)
(79,66,2)
-----------------------------------
(0,for (;;)
(1,s->data)
(2,)
(3,cid)
(4,return gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph)
(5,if (subst[i] > cid)
(6,pfcid)
(7,ei)
(8,if (s != NULL)
(9,(gs_font_cid2 *)
(10,ei)
(11,subst[i] == cid)
(12,if (ei > 0)
(13,)
(14,*pfcid = (gs_font_cid2 *)
(15,i)
(16,WMode)
(17,subst_CID_on_WMode)
(18,ei = i)
(19,pfcid)
(20,if (bi + 2 >= ei)
(21,GS_MIN_CID_GLYPH)
(22,i = ((bi + ei)
(23,)
(24,glyph)
(25,RET)
(26,pfont)
(27,s->data[WMode1])
(28,subst)
(29,subst)
(30,cid)
(31,*s = pfcid->subst_CID_on_WMode)
(32,pfcid)
(33,WMode1)
(34,((bi + ei)
(35,size)
(36,WMode)
(37,WMode)
(38,bi)
(39,)
(40,WMode1)
(41,i)
(42,gs_font_type42 *pfont)
(43,pfont)
(44,subst[i])
(45,WMode1)
(46,int WMode)
(47,bi)
(48,pfcid->subst_CID_on_WMode)
(49,gs_font_cid2 *)
(50,break;)
(51,subst)
(52,i)
(53,ei)
(54,bi + 2 >= ei)
(55,s)
(56,*subst = s->data[WMode1])
(57,)
(58,cid)
(59,bi)
(60,i)
(61,i)
(62,uint glyph_index)
(63,gs_glyph glyph)
(64,2)
(65,s)
(66,WMode1 = !WMode)
(67,cid)
(68,ei)
(69,ei)
(70,glyph_index)
(71,pfcid)
(72,GS_MIN_CID_GLYPH)
(73,glyph)
(74,WMode1)
(75,cid = (glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph)
(76,NULL)
(77,glyph)
(78,pfcid->subst_CID_on_WMode)
(79,pfcid->subst_CID_on_WMode->size[WMode1])
(80,2)
(81,glyph >= GS_MIN_CID_GLYPH ? glyph - GS_MIN_CID_GLYPH : glyph)
(82,s)
(83,subst)
(84,ei > 0)
(85,bi + 2)
(86,if (subst[i] == cid)
(87,bi + ei)
(88,subst[i] > cid)
(89,glyph)
(90,pfcid->subst_CID_on_WMode->size)
(91,bi = i)
(92,ei = pfcid->subst_CID_on_WMode->size[WMode1])
(93,WMode = WMode1)
(94,WMode1)
(95,!WMode)
(96,0)
(97,glyph >= GS_MIN_CID_GLYPH)
(98,0)
(99,glyph - GS_MIN_CID_GLYPH)
(100,subst_CID_on_WMode)
(101,s != NULL)
(102,bi)
(103,ei)
(104,subst[i])
(105,s)
(106,break;)
(107,gs_type42_substitute_glyph_index_vertical(pfont, glyph_index, WMode, glyph)
(108,bi)
(109,i)
(110,~1)
(111,data)
(112,(bi + ei)
(113,bi = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^