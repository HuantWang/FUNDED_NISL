-----label-----
0
-----code-----
static struct dma_async_tx_descriptor *
rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,
			unsigned int sg_len, enum dma_transfer_direction dir,
			unsigned long flags, void *context)
{
	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
	dma_addr_t dev_addr;

	/* Someone calling slave DMA on a generic channel? */
	if (rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)) {
		dev_warn(chan->device->dev,
			 "%s: bad parameter: len=%d, id=%d\n",
			 __func__, sg_len, rchan->mid_rid);
		return NULL;
	}

	dev_addr = dir == DMA_DEV_TO_MEM
		 ? rchan->src_slave_addr : rchan->dst_slave_addr;
	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,
				      dir, flags, false);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
21,22
23,24
23,25
24,25
26,27
28,29
28,30
30,31
32,33
32,34
34,35
34,36
37,38
37,39
37,40
37,41
37,42
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
61,63
62,63
66,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
75,77
76,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
80,81
80,82
81,82
81,83
82,83
87,88
89,90
91,92
91,93
92,93
95,96
96,97
98,99
99,100
99,101
100,101
102,103
102,104
102,105
103,104
103,105
104,105
106,107
108,109
108,110
109,110
112,113
112,114
113,114
116,117
117,118
117,119
117,120
117,121
117,122
117,123
117,124
117,125
118,119
120,121
122,123
124,125
126,127
128,129
130,131
-----nextToken-----
3,5,6,9,11,12,15,17,18,20,22,25,27,29,31,33,35,36,41,43,44,48,50,54,56,63,64,65,68,72,74,79,83,84,85,86,88,90,93,94,97,101,105,107,110,111,114,115,119,121,123,125,127,129,131,132
-----computeFrom-----
58,59
58,60
59,60
59,61
60,61
60,62
99,100
99,101
103,104
103,105
-----guardedBy-----
63,93
64,94
68,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static struct dma_async_tx_descriptor *rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,			unsigned int sg_len, enum dma_transfer_direction dir,			unsigned long flags, void *context){	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);	dma_addr_t dev_addr;	/* Someone calling slave DMA on a generic channel? */	if (rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}	dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr;	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false);}
static struct dma_async_tx_descriptor
dma_async_tx_descriptor
*rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,			unsigned int sg_len, enum dma_transfer_direction dir,			unsigned long flags, void *context)
*
rcar_dmac_prep_slave_sg
struct dma_chan *chan
struct dma_chan
dma_chan
*chan
*
chan
struct scatterlist *sgl
struct scatterlist
scatterlist
*sgl
*
sgl
unsigned int sg_len
unsigned int
sg_len
sg_len
enum dma_transfer_direction dir
enum dma_transfer_direction
dma_transfer_direction
dir
dir
unsigned long flags
unsigned long
flags
flags
void *context
void
*context
*
context
{	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);	dma_addr_t dev_addr;	/* Someone calling slave DMA on a generic channel? */	if (rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}	dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr;	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false);}
struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
struct rcar_dmac_chan
rcar_dmac_chan
*rchan = to_rcar_dmac_chan(chan)
*
rchan
= to_rcar_dmac_chan(chan)
to_rcar_dmac_chan(chan)
to_rcar_dmac_chan
to_rcar_dmac_chan
chan
chan
dma_addr_t dev_addr;
dma_addr_t dev_addr;
dma_addr_t
dma_addr_t
dev_addr
dev_addr
if (rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}
rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)
rchan->mid_rid < 0 || !sg_len
rchan->mid_rid < 0
rchan->mid_rid
rchan
rchan
mid_rid
0
!sg_len
sg_len
sg_len
!sg_dma_len(sgl)
sg_dma_len(sgl)
sg_dma_len
sg_dma_len
sgl
sgl
{		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}
dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);
dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid)
dev_warn
dev_warn
chan->device->dev
chan->device
chan
chan
device
dev
"%s: bad parameter: len=%d, id=%d\n"
__func__
__func__
sg_len
sg_len
rchan->mid_rid
rchan
rchan
mid_rid
return NULL;
NULL
NULL
dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr;
dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr
dev_addr
dev_addr
dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr
dir == DMA_DEV_TO_MEM
dir
dir
DMA_DEV_TO_MEM
DMA_DEV_TO_MEM
rchan->src_slave_addr
rchan
rchan
src_slave_addr
rchan->dst_slave_addr
rchan
rchan
dst_slave_addr
return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false);
rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false)
rcar_dmac_chan_prep_sg
rcar_dmac_chan_prep_sg
rchan
rchan
sgl
sgl
sg_len
sg_len
dev_addr
dev_addr
dir
dir
flags
flags
false
-----joern-----
(31,29,0)
(8,2,0)
(51,19,0)
(0,47,0)
(1,46,0)
(50,19,0)
(42,33,0)
(34,20,0)
(29,26,0)
(16,57,0)
(19,50,0)
(37,51,0)
(23,44,0)
(5,2,0)
(45,53,0)
(36,47,0)
(35,42,0)
(25,55,0)
(41,47,0)
(0,19,0)
(53,14,0)
(26,49,0)
(48,47,0)
(7,50,0)
(40,23,0)
(14,2,0)
(19,1,0)
(21,50,0)
(11,57,0)
(12,31,0)
(10,31,0)
(13,1,0)
(27,29,0)
(51,48,0)
(14,33,0)
(61,48,0)
(28,57,0)
(49,42,0)
(26,29,0)
(56,14,0)
(57,48,0)
(60,44,0)
(23,53,0)
(32,34,0)
(39,14,0)
(31,48,0)
(43,60,0)
(6,51,0)
(50,48,0)
(57,33,0)
(57,52,0)
(9,14,0)
(48,60,0)
(14,53,0)
(1,19,0)
(57,17,0)
(24,57,0)
(29,31,0)
(22,47,0)
(59,0,0)
(57,0,0)
(2,48,0)
(20,49,0)
(15,57,0)
(19,0,0)
(25,36,0)
(60,48,0)
(19,51,0)
(14,30,0)
(38,47,0)
(53,23,0)
(18,55,0)
(34,52,0)
(20,34,0)
(42,49,0)
(3,23,0)
(57,46,0)
(57,36,0)
(2,14,0)
(54,1,0)
(55,30,0)
(49,20,0)
(58,57,0)
(49,26,0)
(4,57,0)
(51,48,1)
(55,18,1)
(21,7,1)
(14,53,1)
(40,26,1)
(2,5,1)
(49,20,1)
(60,44,1)
(25,36,1)
(11,24,1)
(57,17,1)
(34,52,1)
(57,33,1)
(59,26,1)
(29,31,1)
(42,35,1)
(28,58,1)
(42,33,1)
(19,1,1)
(3,40,1)
(1,13,1)
(36,57,1)
(7,1,1)
(19,50,1)
(29,27,1)
(39,56,1)
(5,8,1)
(34,32,1)
(49,42,1)
(57,46,1)
(53,45,1)
(9,53,1)
(37,1,1)
(51,6,1)
(19,51,1)
(10,12,1)
(16,28,1)
(32,42,1)
(43,61,1)
(60,43,1)
(57,0,1)
(26,29,1)
(31,48,1)
(12,48,1)
(35,29,1)
(2,48,1)
(23,3,1)
(31,10,1)
(4,15,1)
(57,48,1)
(13,54,1)
(56,9,1)
(20,34,1)
(15,11,1)
(27,31,1)
(24,16,1)
(6,37,1)
(45,23,1)
(0,19,1)
(14,2,1)
(48,60,1)
(14,33,1)
(23,44,1)
(26,49,1)
(18,14,1)
(1,46,1)
(25,55,1)
(50,48,1)
(50,21,1)
(58,0,1)
(57,52,1)
(57,4,1)
(53,23,1)
(8,39,1)
(54,59,1)
(0,26,2)
(34,42,2)
(49,29,2)
(29,31,2)
(25,36,2)
(39,26,2)
(4,26,2)
(60,44,2)
(1,46,2)
(21,1,2)
(55,26,2)
(2,26,2)
(40,26,2)
(9,26,2)
(24,26,2)
(16,26,2)
(51,48,2)
(15,26,2)
(19,1,2)
(49,20,2)
(57,17,2)
(14,53,2)
(13,26,2)
(26,49,2)
(7,1,2)
(11,26,2)
(0,19,2)
(57,26,2)
(42,29,2)
(26,29,2)
(36,26,2)
(50,1,2)
(32,42,2)
(19,50,2)
(23,44,2)
(14,2,2)
(31,48,2)
(8,26,2)
(28,26,2)
(48,60,2)
(6,1,2)
(57,48,2)
(14,26,2)
(20,42,2)
(18,26,2)
(19,26,2)
(57,33,2)
(51,1,2)
(23,26,2)
(2,48,2)
(5,26,2)
(58,26,2)
(25,55,2)
(53,26,2)
(42,33,2)
(1,26,2)
(54,26,2)
(35,29,2)
(37,1,2)
(59,26,2)
(45,26,2)
(20,34,2)
(57,0,2)
(14,33,2)
(49,42,2)
(19,51,2)
(56,26,2)
(57,46,2)
(53,23,2)
(34,52,2)
(50,48,2)
(57,52,2)
(3,26,2)
-----------------------------------
(0,dev_addr = dir == DMA_DEV_TO_MEM\n\\n\\t\\t ? rchan->src_slave_addr : rchan->dst_slave_addr)
(1,dir == DMA_DEV_TO_MEM)
(2,rchan->mid_rid)
(3,device)
(4,false)
(5,mid_rid)
(6,src_slave_addr)
(7,rchan)
(8,rchan)
(9,"%s: bad parameter: len=%d, id=%d\\n")
(10,mid_rid)
(11,dir)
(12,rchan)
(13,DMA_DEV_TO_MEM)
(14,dev_warn(chan->device->dev,\n\\n\\t\\t\\t "%s: bad parameter: len=%d, id=%d\\n",\n\\n\\t\\t\\t __func__, sg_len, rchan->mid_rid)
(15,flags)
(16,sg_len)
(17,unsigned long flags)
(18,NULL)
(19,dir == DMA_DEV_TO_MEM\n\\n\\t\\t ? rchan->src_slave_addr : rchan->dst_slave_addr)
(20,!sg_dma_len(sgl)
(21,dst_slave_addr)
(22,dev_addr)
(23,chan->device)
(24,dev_addr)
(25,RET)
(26,rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)
(27,0)
(28,sgl)
(29,rchan->mid_rid < 0)
(30,)
(31,rchan->mid_rid)
(32,sgl)
(33,unsigned int sg_len)
(34,sg_dma_len(sgl)
(35,sg_len)
(36,return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,\n\\n\\t\\t\\t\\t      dir, flags, false)
(37,rchan)
(38,if (rchan->mid_rid < 0 || !sg_len || !sg_dma_len(sgl)
(39,sg_len)
(40,chan)
(41,rchan)
(42,!sg_len)
(43,chan)
(44,struct dma_chan *chan)
(45,dev)
(46,enum dma_transfer_direction dir)
(47,)
(48,*rchan = to_rcar_dmac_chan(chan)
(49,!sg_len || !sg_dma_len(sgl)
(50,rchan->dst_slave_addr)
(51,rchan->src_slave_addr)
(52,struct scatterlist *sgl)
(53,chan->device->dev)
(54,dir)
(55,return NULL;)
(56,__func__)
(57,rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,\n\\n\\t\\t\\t\\t      dir, flags, false)
(58,rchan)
(59,dev_addr)
(60,to_rcar_dmac_chan(chan)
(61,rchan)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^