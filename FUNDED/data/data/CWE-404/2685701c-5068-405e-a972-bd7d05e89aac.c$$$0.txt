-----label-----
1
-----code-----
int hdd_wlan_startup(struct device *dev )
{
   VOS_STATUS status;
   hdd_adapter_t *pAdapter = NULL;
   hdd_adapter_t *pP2pAdapter = NULL;
   hdd_context_t *pHddCtx = NULL;
   v_CONTEXT_t pVosContext= NULL;
#ifdef WLAN_BTAMP_FEATURE
   VOS_STATUS vStatus = VOS_STATUS_SUCCESS;
   WLANBAP_ConfigType btAmpConfig;
   hdd_config_t *pConfig;
#endif
   int ret;
   struct wiphy *wiphy;
   v_MACADDR_t mac_addr;

   ENTER();
   /*
    * cfg80211: wiphy allocation
    */
   wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;

   if(wiphy == NULL)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);
      return -EIO;
   }
   pHddCtx = wiphy_priv(wiphy);

   //Initialize the adapter context to zeros.
   vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));

   pHddCtx->wiphy = wiphy;
   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;

   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);

   /* register for riva power on lock to platform driver
    * Locking power early to ensure FW doesn't reset by kernel while
    * host driver is busy initializing itself */
   if (req_riva_power_on_lock("wlan"))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",
                                     __func__);
      goto err_free_hdd_context;
   }

   /*Get vos context here bcoz vos_open requires it*/
   pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);

   if(pVosContext == NULL)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);
      goto err_free_hdd_context;
   }

   //Save the Global VOSS context in adapter context for future.
   pHddCtx->pvosContext = pVosContext;

   //Save the adapter context in global context for future.
   ((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;

   pHddCtx->parent_dev = dev;
   pHddCtx->con_scan_abort_cnt = 0;

   init_completion(&pHddCtx->full_pwr_comp_var);
   init_completion(&pHddCtx->standby_comp_var);
   init_completion(&pHddCtx->req_bmps_comp_var);
   init_completion(&pHddCtx->scan_info.scan_req_completion_event);
   init_completion(&pHddCtx->scan_info.abortscan_event_var);
   init_completion(&pHddCtx->wiphy_channel_update_event);
   init_completion(&pHddCtx->ssr_comp_var);
   init_completion(&pHddCtx->mc_sus_event_var);
   init_completion(&pHddCtx->tx_sus_event_var);
   init_completion(&pHddCtx->rx_sus_event_var);


   hdd_init_ll_stats_ctx(pHddCtx);

#ifdef CONFIG_ENABLE_LINUX_REG
   init_completion(&pHddCtx->linux_reg_req);
#else
   init_completion(&pHddCtx->driver_crda_req);
#endif

#ifdef WLAN_FEATURE_EXTSCAN
   init_completion(&pHddCtx->ext_scan_context.response_event);
#endif /* WLAN_FEATURE_EXTSCAN */

   spin_lock_init(&pHddCtx->schedScan_lock);

   hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );

   vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,
                                hdd_processSpoofMacAddrRequest);

#ifdef FEATURE_WLAN_TDLS
   /* tdls_lock is initialized before an hdd_open_adapter ( which is
    * invoked by other instances also) to protect the concurrent
    * access for the Adapters by TDLS module.
    */
   mutex_init(&pHddCtx->tdls_lock);
#endif
   mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);
   mutex_init(&pHddCtx->wmmLock);

   hdd_init_offloaded_packets_ctx(pHddCtx);
   /* By default Strict Regulatory For FCC should be false */

   pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;
   // Load all config first as TL config is needed during vos_open
   pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);
   if(pHddCtx->cfg_ini == NULL)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);
      goto err_free_hdd_context;
   }

   vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));

   // Read and parse the qcom_cfg.ini file
   status = hdd_parse_config_ini( pHddCtx );
   if ( VOS_STATUS_SUCCESS != status )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",
             __func__, WLAN_INI_FILE);
      goto err_config;
   }
#ifdef MEMORY_DEBUG
   if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
      vos_mem_init();

   hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",
          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled);
#endif

   /* INI has been read, initialise the configuredMcastBcastFilter with
    * INI value as this will serve as the default value
    */
   pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;
   hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",
                   pHddCtx->cfg_ini->mcastBcastFilterSetting);

   if (false == hdd_is_5g_supported(pHddCtx))
   {
      //5Ghz is not supported.
      if (1 != pHddCtx->cfg_ini->nBandCapability)
      {
         hddLog(VOS_TRACE_LEVEL_INFO,
                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);
         pHddCtx->cfg_ini->nBandCapability = 1;
      }
   }

   /* If SNR Monitoring is enabled, FW has to parse all beacons
    * for calcaluting and storing the average SNR, so set Nth beacon
    * filter to 1 to enable FW to parse all the beaocons
    */
   if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)
   {
      /* The log level is deliberately set to WARN as overriding
       * nthBeaconFilter to 1 will increase power cosumption and this
       * might just prove helpful to detect the power issue.
       */
      hddLog(VOS_TRACE_LEVEL_WARN,
             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);
      pHddCtx->cfg_ini->nthBeaconFilter = 1;
   }
   /*
    * cfg80211: Initialization  ...
    */
   if (VOS_FTM_MODE != hdd_get_conparam())
   {
      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))
      {
         hddLog(VOS_TRACE_LEVEL_FATAL,
                 "%s: wlan_hdd_cfg80211_init return failure", __func__);
         goto err_config;
      }
   }

   // Update VOS trace levels based upon the cfg.ini
   hdd_vos_trace_enable(VOS_MODULE_ID_BAP,
                        pHddCtx->cfg_ini->vosTraceEnableBAP);
   hdd_vos_trace_enable(VOS_MODULE_ID_TL,
                        pHddCtx->cfg_ini->vosTraceEnableTL);
   hdd_vos_trace_enable(VOS_MODULE_ID_WDI,
                        pHddCtx->cfg_ini->vosTraceEnableWDI);
   hdd_vos_trace_enable(VOS_MODULE_ID_HDD,
                        pHddCtx->cfg_ini->vosTraceEnableHDD);
   hdd_vos_trace_enable(VOS_MODULE_ID_SME,
                        pHddCtx->cfg_ini->vosTraceEnableSME);
   hdd_vos_trace_enable(VOS_MODULE_ID_PE,
                        pHddCtx->cfg_ini->vosTraceEnablePE);
   hdd_vos_trace_enable(VOS_MODULE_ID_PMC,
                         pHddCtx->cfg_ini->vosTraceEnablePMC);
   hdd_vos_trace_enable(VOS_MODULE_ID_WDA,
                        pHddCtx->cfg_ini->vosTraceEnableWDA);
   hdd_vos_trace_enable(VOS_MODULE_ID_SYS,
                        pHddCtx->cfg_ini->vosTraceEnableSYS);
   hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,
                        pHddCtx->cfg_ini->vosTraceEnableVOSS);
   hdd_vos_trace_enable(VOS_MODULE_ID_SAP,
                        pHddCtx->cfg_ini->vosTraceEnableSAP);
   hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,
                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);

   // Update WDI trace levels based upon the cfg.ini
   hdd_wdi_trace_enable(eWLAN_MODULE_DAL,
                        pHddCtx->cfg_ini->wdiTraceEnableDAL);
   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,
                        pHddCtx->cfg_ini->wdiTraceEnableCTL);
   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,
                        pHddCtx->cfg_ini->wdiTraceEnableDAT);
   hdd_wdi_trace_enable(eWLAN_MODULE_PAL,
                        pHddCtx->cfg_ini->wdiTraceEnablePAL);

   if (VOS_FTM_MODE == hdd_get_conparam())
   {
      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )
      {
          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);
          goto err_free_hdd_context;
      }
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);
      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
      return VOS_STATUS_SUCCESS;
   }

   if( VOS_MONITOR_MODE == hdd_get_conparam())
   {
       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))
       {
          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);
          goto err_free_hdd_context;
       }
       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);
       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
       return VOS_STATUS_SUCCESS;
   }

   //Open watchdog module
   if(pHddCtx->cfg_ini->fIsLogpEnabled)
   {
      status = vos_watchdog_open(pVosContext,
         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));

      if(!VOS_IS_STATUS_SUCCESS( status ))
      {
         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);
         goto err_wdclose;
      }
   }

   pHddCtx->isLogpInProgress = FALSE;
   vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);

#ifdef CONFIG_ENABLE_LINUX_REG
   /* initialize the NV module. This is required so that
      we can initialize the channel information in wiphy
      from the NV.bin data. The channel information in
      wiphy needs to be initialized before wiphy registration */

   status = vos_nv_open();
   if (!VOS_IS_STATUS_SUCCESS(status))
   {
       /* NV module cannot be initialized */
       hddLog( VOS_TRACE_LEVEL_FATAL,
                "%s: vos_nv_open failed", __func__);
       goto err_wdclose;
   }

   status = vos_init_wiphy_from_nv_bin();
   if (!VOS_IS_STATUS_SUCCESS(status))
   {
       /* NV module cannot be initialized */
       hddLog( VOS_TRACE_LEVEL_FATAL,
               "%s: vos_init_wiphy failed", __func__);
       goto err_vos_nv_close;
   }

#endif
   //Initialize the nlink service
   if(nl_srv_init() != 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);
      goto err_vos_nv_close;
   }

#ifdef WLAN_KD_READY_NOTIFIER
   pHddCtx->kd_nl_init = 1;
#endif /* WLAN_KD_READY_NOTIFIER */

   vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);
   status = vos_open( &pVosContext, pHddCtx->parent_dev);
   if ( !VOS_IS_STATUS_SUCCESS( status ))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);
      goto err_nl_srv;
   }

   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );

   if ( NULL == pHddCtx->hHal )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);
      goto err_vosclose;
   }

   status = vos_preStart( pHddCtx->pvosContext );
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);
      goto err_vosclose;
   }

   if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)
   {
      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;
      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",
             __func__, enable_dfs_chan_scan);
   }
   if (0 == enable_11d || 1 == enable_11d)
   {
      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;
      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",
             __func__, enable_11d);
   }

   /* Note that the vos_preStart() sequence triggers the cfg download.
      The cfg download must occur before we update the SME config
      since the SME config operation must access the cfg database */
   status = hdd_set_sme_config( pHddCtx );

   if ( VOS_STATUS_SUCCESS != status )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);
      goto err_vosclose;
   }

   /* In the integrated architecture we update the configuration from
      the INI file and from NV before vOSS has been started so that
      the final contents are available to send down to the cCPU   */

   // Apply the cfg.ini to cfg.dat
   if (FALSE == hdd_update_config_dat(pHddCtx))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
      goto err_vosclose;
   }

   // Get mac addr from platform driver
   ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);

   if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))
   {
      /* Store the mac addr for first interface */
      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;

      hddLog(VOS_TRACE_LEVEL_ERROR,
             "%s: WLAN Mac Addr: "
             MAC_ADDRESS_STR, __func__,
             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));

      /* Here, passing Arg2 as 1 because we do not want to change the
         last 3 bytes (means non OUI bytes) of first interface mac
         addr.
       */
      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))
      {
         hddLog(VOS_TRACE_LEVEL_ERROR,
                "%s: Failed to generate wlan interface mac addr "
                "using MAC from ini file ", __func__);
      }
   }
   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))
   {
      // Apply the NV to cfg.dat
      /* Prima Update MAC address only at here */
#ifdef WLAN_AUTOGEN_MACADDR_FEATURE
      /* There was not a valid set of MAC Addresses in NV.  See if the
         default addresses were modified by the cfg.ini settings.  If so,
         we'll use them, but if not, we'll autogenerate a set of MAC
         addresses based upon the device serial number */

      static const v_MACADDR_t default_address =
         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};

      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],
                   sizeof(default_address)))
      {
         /* cfg.ini has the default address, invoke autogen logic */

         /* Here, passing Arg2 as 0 because we want to change the
            last 3 bytes (means non OUI bytes) of all the interfaces
            mac addr.
          */
         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,
                                                            default_address))
         {
            hddLog(VOS_TRACE_LEVEL_ERROR,
                   "%s: Failed to generate wlan interface mac addr "
                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,
                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
         }
      }
      else
#endif //WLAN_AUTOGEN_MACADDR_FEATURE
      {
         hddLog(VOS_TRACE_LEVEL_ERROR,
                "%s: Invalid MAC address in NV, using MAC from ini file "
                MAC_ADDRESS_STR, __func__,
                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
      }
   }
   {
      eHalStatus halStatus;

      /* Set the MAC Address Currently this is used by HAL to
       * add self sta. Remove this once self sta is added as
       * part of session open.
       */
      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,
                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],
                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );

      if (!HAL_STATUS_SUCCESS( halStatus ))
      {
         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "
                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );
         goto err_vosclose;
      }
   }

   /*Start VOSS which starts up the SME/MAC/HAL modules and everything else
     Note: Firmware image will be read and downloaded inside vos_start API */
   status = vos_start( pHddCtx->pvosContext );
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
      if (isSsrPanicOnFailure())
          VOS_BUG(0);
      goto err_vosclose;
   }

#ifdef FEATURE_WLAN_CH_AVOID
    /* Plug in avoid channel notification callback
     * This should happen before ADD_SELF_STA
     * FW will send first IND with ADD_SELF_STA REQ from host */

    /* check the Channel Avoidance is enabled */
   if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)
   {
       sme_AddChAvoidCallback(pHddCtx->hHal,
                              hdd_hostapd_ch_avoid_cb);
   }
#endif /* FEATURE_WLAN_CH_AVOID */

   /* Exchange capability info between Host and FW and also get versioning info from FW */
   hdd_exchange_version_and_caps(pHddCtx);

#ifdef CONFIG_ENABLE_LINUX_REG
   status = wlan_hdd_init_channels(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",
             __func__);
      goto err_vosstop;
   }
#endif

   status = hdd_post_voss_start_config( pHddCtx );
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",
         __func__);
      goto err_vosstop;
   }

#ifndef CONFIG_ENABLE_LINUX_REG
   wlan_hdd_cfg80211_update_reg_info( wiphy );

   /* registration of wiphy dev with cfg80211 */
   if (0 > wlan_hdd_cfg80211_register(wiphy))
   {
       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);
       goto err_vosstop;
   }
#endif

#ifdef CONFIG_ENABLE_LINUX_REG
   /* registration of wiphy dev with cfg80211 */
   if (0 > wlan_hdd_cfg80211_register(wiphy))
   {
       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);
       goto err_vosstop;
   }

   status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",
             __func__);
      goto err_unregister_wiphy;
   }
#endif

   wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);

   if (VOS_STA_SAP_MODE == hdd_get_conparam())
   {
     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",
         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
   }
   else
   {
     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",
         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
     if (pAdapter != NULL)
     {
         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))
         {
               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,
                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,
                       sizeof(tSirMacAddr));

                /* Generate the P2P Device Address.  This consists of the device's
                 * primary MAC address with the locally administered bit set.
                */
                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;
         }
         else
         {
             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);
             if (p2p_dev_addr != NULL)
             {
                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],
                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);
             }
             else
             {
                   hddLog(VOS_TRACE_LEVEL_FATAL,
                           "%s: Failed to allocate mac_address for p2p_device",
                   __func__);
                   goto err_close_adapter;
             }
         }

         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",
                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );
         if ( NULL == pP2pAdapter )
         {
             hddLog(VOS_TRACE_LEVEL_FATAL,
                "%s: Failed to do hdd_open_adapter for P2P Device Interface",
                __func__);
             goto err_close_adapter;
         }
     }
   }

   if( pAdapter == NULL )
   {
      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);
      goto err_close_adapter;
   }

   if (country_code)
   {
      eHalStatus ret;
      INIT_COMPLETION(pAdapter->change_country_code);
      hdd_checkandupdate_dfssetting(pAdapter, country_code);
#ifndef CONFIG_ENABLE_LINUX_REG
      hdd_checkandupdate_phymode(pAdapter, country_code);
#endif
      ret = sme_ChangeCountryCode(pHddCtx->hHal,
                                  (void *)(tSmeChangeCountryCallback)
                                  wlan_hdd_change_country_code_callback,
                                  country_code,
                                  pAdapter, pHddCtx->pvosContext,
                                  eSIR_TRUE, eSIR_TRUE);
      if (eHAL_STATUS_SUCCESS == ret)
      {
         ret = wait_for_completion_interruptible_timeout(
                       &pAdapter->change_country_code,
                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));

         if (0 >= ret)
         {
            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                      "%s: SME while setting country code timed out", __func__);
         }
      }
      else
      {
         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                   "%s: SME Change Country code from module param fail ret=%d",
                   __func__, ret);
      }
   }

#ifdef WLAN_BTAMP_FEATURE
   vStatus = WLANBAP_Open(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to open BAP",__func__);
      goto err_close_adapter;
   }

   vStatus = BSL_Init(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to Init BSL",__func__);
     goto err_bap_close;
   }
   vStatus = WLANBAP_Start(pVosContext);
   if (!VOS_IS_STATUS_SUCCESS(vStatus))
   {
       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
               "%s: Failed to start TL",__func__);
       goto err_bap_close;
   }

   pConfig = pHddCtx->cfg_ini;
   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;
   status = WLANBAP_SetConfig(&btAmpConfig);

#endif //WLAN_BTAMP_FEATURE

   /*
    * UapsdMask is 0xf if U-APSD is enbaled for all AC's...
    * The value of CFG_QOS_WMM_UAPSD_MASK_DEFAULT is 0xaa(Magic Value)
    * which is greater than 0xf. So the below check is safe to make
    * sure that there is no entry for UapsdMask in the ini
    */
   if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)
   {
       if(IS_DYNAMIC_WMM_PS_ENABLED)
       {
           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",
                     __func__);
           pHddCtx->cfg_ini->UapsdMask =
                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;
       }
       else
       {
           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",
                     __func__);
           pHddCtx->cfg_ini->UapsdMask =
                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;
       }
   }

#ifdef WLAN_FEATURE_ROAM_SCAN_OFFLOAD
   if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE))
   {
      hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__);
      pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0;
      sme_UpdateRoamScanOffloadEnabled((tHalHandle)(pHddCtx->hHal),
                       pHddCtx->cfg_ini->isRoamOffloadScanEnabled);
   }
#endif

   wlan_hdd_tdls_init(pHddCtx);

   wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);

   vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,
                         wlan_hdd_schedule_defer_scan);

   sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);

   /* Register with platform driver as client for Suspend/Resume */
   status = hddRegisterPmOps(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
#ifdef WLAN_BTAMP_FEATURE
      goto err_bap_stop;
#else
      goto err_close_adapter;
#endif //WLAN_BTAMP_FEATURE
   }

   /* Open debugfs interface */
   if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))
   {
      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                 "%s: hdd_debugfs_init failed!", __func__);
   }

   /* Register TM level change handler function to the platform */
   status = hddDevTmRegisterNotifyCallback(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);
      goto err_unregister_pmops;
   }

   // register net device notifier for device change notification
   ret = register_netdevice_notifier(&hdd_netdev_notifier);

   if(ret < 0)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);
      goto err_unregister_pmops;
   }

   //Initialize the BTC service
   if(btc_activate_service(pHddCtx) != 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);
      goto err_reg_netdev;
   }

#ifdef FEATURE_OEM_DATA_SUPPORT
   //Initialize the OEM service
   if (oem_activate_service(pHddCtx) != 0)
   {
       hddLog(VOS_TRACE_LEVEL_FATAL,
              "%s: oem_activate_service failed", __func__);
       goto err_reg_netdev;
   }
#endif

#ifdef PTT_SOCK_SVC_ENABLE
   //Initialize the PTT service
   if(ptt_sock_activate_svc(pHddCtx) != 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__);
      goto err_reg_netdev;
   }
#endif

#ifdef WLAN_FEATURE_RMC
   if (hdd_open_cesium_nl_sock() < 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__);
      goto err_reg_netdev;
   }
#endif

#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE
   if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)
   {
       if(wlan_logging_sock_activate_svc(
                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,
                   pHddCtx->cfg_ini->wlanLoggingNumBuf,
                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,
                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf))
       {
           hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"
                   " failed", __func__);
           goto err_reg_netdev;
       }
       //TODO: To Remove enableDhcpDebug and use gEnableDebugLog for
       //EAPOL and DHCP
       if (!pHddCtx->cfg_ini->gEnableDebugLog)
           pHddCtx->cfg_ini->gEnableDebugLog =
           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |
           VOS_PKT_PROTO_TYPE_ARP;
   }

   if (pHddCtx->cfg_ini->wlanLoggingEnable &&
               (pHddCtx->cfg_ini->enableFWLogging ||
                pHddCtx->cfg_ini->enableMgmtLogging ||
                pHddCtx->cfg_ini->enableContFWLogging ||
                pHddCtx->cfg_ini->enableFwrMemDump )
                )
   {
       hdd_init_frame_logging(pHddCtx);
   }
   else
   {
       hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini"));
   }

#endif


   if (vos_is_multicast_logging())
       wlan_logging_set_log_level();

   hdd_register_mcast_bcast_filter(pHddCtx);
   if (VOS_STA_SAP_MODE != hdd_get_conparam())
   {
      /* Action frame registered in one adapter which will
       * applicable to all interfaces
       */
      wlan_hdd_cfg80211_register_frames(pAdapter);
   }

   mutex_init(&pHddCtx->sap_lock);
   mutex_init(&pHddCtx->roc_lock);

#ifdef WLAN_FEATURE_HOLD_RX_WAKELOCK
   /* Initialize the wake lcok */
   vos_wake_lock_init(&pHddCtx->rx_wake_lock,
           "qcom_rx_wakelock");

#endif
   /* Initialize the wake lcok */
   vos_wake_lock_init(&pHddCtx->sap_wake_lock,
           "qcom_sap_wakelock");


   vos_event_init(&pHddCtx->scan_info.scan_finished_event);
   pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;

   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);

#ifdef FEATURE_WLAN_SCAN_PNO
   /*SME must send channel update configuration to RIVA*/
   sme_UpdateChannelConfig(pHddCtx->hHal);
#endif
   /* Send the update default channel list to the FW*/
   sme_UpdateChannelList(pHddCtx->hHal);

   /* Fwr capabilities received, Set the Dot11 mode */
   sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),
       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));
   sme_SetDefDot11Mode(pHddCtx->hHal);

#ifndef CONFIG_ENABLE_LINUX_REG
   /*updating wiphy so that regulatory user hints can be processed*/
   if (wiphy)
   {
       regulatory_hint(wiphy, "00");
   }
#endif
   // Initialize the restart logic
   wlan_hdd_restart_init(pHddCtx);

   //Register the traffic monitor timer now
   if ( pHddCtx->cfg_ini->dynSplitscan)
   {
       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,
                     VOS_TIMER_TYPE_SW,
                     hdd_tx_rx_pkt_cnt_stat_timer_handler,
                     (void *)pHddCtx);
   }
   wlan_hdd_cfg80211_nan_init(pHddCtx);

   mutex_init(&pHddCtx->cur_rx_level_lock);
   vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,
                             hdd_tcp_delack_compute_function,(void *)pHddCtx);
   vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,
                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);

#ifdef WLAN_FEATURE_EXTSCAN
    sme_EXTScanRegisterCallback(pHddCtx->hHal,
            wlan_hdd_cfg80211_extscan_callback,
                           pHddCtx);
#endif /* WLAN_FEATURE_EXTSCAN */

#ifdef FEATURE_OEM_DATA_SUPPORT
    sme_OemDataRegisterCallback(pHddCtx->hHal,
            wlan_hdd_cfg80211_oemdata_callback,
                           pHddCtx);
#endif /* FEATURE_OEM_DATA_SUPPORT */

   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);
#ifdef WLAN_NS_OFFLOAD
   // Register IPv6 notifier to notify if any change in IP
   // So that we can reconfigure the offload parameters
   pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed;
   ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier);
   if (ret)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier"));
   }
   else
   {
      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier"));
   }
#endif

   // Register IPv4 notifier to notify if any change in IP
   // So that we can reconfigure the offload parameters
   pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;
   ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);
   if (ret)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));
   }
   else
   {
      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));
   }
   /*Fw mem dump procfs initialization*/
   memdump_init();
   hdd_dp_util_send_rps_ind(pHddCtx);

   goto success;

err_reg_netdev:
   unregister_netdevice_notifier(&hdd_netdev_notifier);

err_unregister_pmops:
   hddDevTmUnregisterNotifyCallback(pHddCtx);
   hddDeregisterPmOps(pHddCtx);

   hdd_debugfs_exit(pHddCtx);

#ifdef WLAN_BTAMP_FEATURE
err_bap_stop:
  WLANBAP_Stop(pVosContext);
#endif

#ifdef WLAN_BTAMP_FEATURE
err_bap_close:
   WLANBAP_Close(pVosContext);
#endif

err_close_adapter:
   hdd_close_all_adapters( pHddCtx );
#ifdef CONFIG_ENABLE_LINUX_REG
err_unregister_wiphy:
#endif
   wiphy_unregister(wiphy) ;
   hdd_wlan_free_wiphy_channels(wiphy);

err_vosstop:
   vos_stop(pVosContext);

err_vosclose:
   status = vos_sched_close( pVosContext );
   if (!VOS_IS_STATUS_SUCCESS(status))    {
      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,
         "%s: Failed to close VOSS Scheduler", __func__);
      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );
   }
   vos_close(pVosContext );

err_nl_srv:
#ifdef WLAN_KD_READY_NOTIFIER
   nl_srv_exit(pHddCtx->ptt_pid);
#else
   nl_srv_exit();
#endif /* WLAN_KD_READY_NOTIFIER */
err_vos_nv_close:

#ifdef CONFIG_ENABLE_LINUX_REG
   vos_nv_close();

#endif

err_wdclose:
   if(pHddCtx->cfg_ini->fIsLogpEnabled)
      vos_watchdog_close(pVosContext);

err_config:
   kfree(pHddCtx->cfg_ini);
   pHddCtx->cfg_ini= NULL;

err_free_hdd_context:
   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
   free_riva_power_on_lock("wlan");
   wiphy_free(wiphy) ;
   //kfree(wdev) ;
   VOS_BUG(1);

   if (hdd_is_ssr_required())
   {
       /* WDI timeout had happened during load, so SSR is needed here */
       subsystem_restart("wcnss");
       msleep(5000);
   }
   hdd_set_ssr_required (VOS_FALSE);

   return -EIO;

success:
   EXIT();
   return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
11,59
11,60
11,61
11,62
11,63
11,64
11,65
11,66
11,67
11,68
11,69
11,70
11,71
11,72
11,73
11,74
11,75
11,76
11,77
11,78
11,79
11,80
11,81
11,82
11,83
11,84
11,85
11,86
11,87
11,88
11,89
11,90
11,91
11,92
11,93
11,94
11,95
11,96
11,97
11,98
11,99
11,100
11,101
11,102
11,103
11,104
11,105
11,106
11,107
11,108
11,109
11,110
11,111
11,112
11,113
11,114
11,115
11,116
11,117
11,118
11,119
11,120
11,121
11,122
11,123
11,124
11,125
11,126
11,127
11,128
11,129
11,130
11,131
11,132
11,133
11,134
11,135
11,136
11,137
11,138
11,139
11,140
11,141
11,142
11,143
11,144
11,145
11,146
11,147
11,148
11,149
11,150
11,151
11,152
11,153
11,154
11,155
11,156
11,157
11,158
11,159
11,160
11,161
11,162
11,163
11,164
11,165
11,166
11,167
11,168
11,169
11,170
11,171
11,172
11,173
11,174
11,175
11,176
11,177
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
107,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
120,121
121,122
121,123
121,124
122,123
124,125
126,127
127,128
127,129
128,129
131,132
132,133
132,134
133,134
133,135
134,135
137,138
139,140
140,141
140,142
141,142
143,144
144,145
146,147
147,148
147,149
148,149
148,150
149,150
152,153
154,155
155,156
155,157
155,158
156,157
158,159
160,161
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
169,170
169,171
169,172
169,173
170,171
172,173
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
183,186
184,185
186,187
188,189
190,191
190,192
191,192
191,193
192,193
194,195
196,197
196,198
197,198
198,199
198,200
198,201
198,202
199,200
201,202
204,205
206,207
208,209
209,210
209,211
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
220,221
220,222
221,222
221,223
222,223
224,225
226,227
227,228
230,231
230,232
231,232
231,233
232,233
234,235
236,237
238,239
239,240
239,241
240,241
240,242
241,242
244,245
246,247
247,248
247,249
248,249
248,250
249,250
253,254
254,255
254,256
255,256
257,258
258,259
258,260
259,260
262,263
263,264
263,265
264,265
266,267
267,268
267,269
268,269
271,272
272,273
272,274
273,274
275,276
276,277
276,278
277,278
280,281
281,282
281,283
282,283
284,285
285,286
285,287
286,287
286,288
287,288
291,292
292,293
292,294
293,294
295,296
296,297
296,298
297,298
297,299
298,299
302,303
303,304
303,305
304,305
306,307
307,308
307,309
308,309
311,312
312,313
312,314
313,314
315,316
316,317
316,318
317,318
320,321
321,322
321,323
322,323
324,325
325,326
325,327
326,327
329,330
330,331
330,332
331,332
333,334
334,335
334,336
335,336
338,339
339,340
339,341
340,341
342,343
343,344
343,345
344,345
347,348
348,349
348,350
349,350
351,352
353,354
354,355
354,356
355,356
357,358
358,359
358,360
359,360
362,363
363,364
363,365
364,365
366,367
367,368
367,369
368,369
371,372
372,373
372,374
372,375
373,374
375,376
376,377
376,378
377,378
380,381
382,383
383,384
383,385
383,386
384,385
386,387
387,388
387,389
388,389
391,392
393,394
394,395
394,396
395,396
397,398
398,399
398,400
399,400
399,401
400,401
404,405
405,406
405,407
406,407
408,409
409,410
409,411
410,411
413,414
414,415
414,416
415,416
417,418
419,420
420,421
420,422
421,422
421,423
422,423
425,426
427,428
428,429
428,430
429,430
429,431
430,431
433,434
433,435
434,435
434,436
435,436
437,438
439,440
439,441
439,442
440,441
442,443
443,444
443,445
444,445
447,448
449,450
449,451
450,451
450,452
451,452
451,453
452,453
455,456
457,458
457,459
458,459
459,460
459,461
459,462
459,463
460,461
462,463
465,466
467,468
469,470
470,471
470,472
470,473
471,472
473,474
473,475
474,475
477,478
478,479
478,480
479,480
482,483
483,484
483,485
484,485
486,487
486,488
487,488
489,490
491,492
491,493
492,493
492,494
493,494
495,496
497,498
497,499
498,499
499,500
499,501
499,502
499,503
499,504
500,501
502,503
505,506
507,508
509,510
511,512
512,513
512,514
513,514
513,515
514,515
517,518
517,519
518,519
518,520
519,520
523,524
524,525
524,526
524,527
524,528
525,526
527,528
530,531
530,532
531,532
531,533
532,533
536,537
536,538
537,538
537,539
539,540
539,541
540,541
542,543
544,545
545,546
545,547
546,547
546,548
548,549
548,550
549,550
549,551
550,551
554,555
554,556
555,556
556,557
556,558
556,559
556,560
557,558
559,560
562,563
564,565
565,566
565,567
566,567
566,568
567,568
567,569
568,569
573,574
573,575
574,575
574,576
576,577
576,578
577,578
577,579
578,579
582,583
582,584
583,584
584,585
584,586
584,587
584,588
585,586
587,588
590,591
592,593
593,594
593,595
594,595
594,596
595,596
595,597
596,597
601,602
601,603
602,603
602,604
603,604
605,606
606,607
608,609
609,610
609,611
610,611
610,612
612,613
612,614
612,615
612,616
613,614
615,616
617,618
619,620
619,621
620,621
623,624
623,625
624,625
625,626
625,627
625,628
625,629
626,627
628,629
631,632
633,634
635,636
636,637
636,638
636,639
637,638
639,640
641,642
641,643
642,643
642,644
643,644
647,648
648,649
648,650
648,651
649,650
651,652
653,654
653,655
654,655
654,656
655,656
659,660
660,661
660,662
660,663
661,662
663,664
665,666
665,667
666,667
666,668
667,668
671,672
672,673
672,674
672,675
673,674
675,676
677,678
677,679
678,679
678,680
679,680
683,684
684,685
684,686
684,687
685,686
687,688
689,690
689,691
690,691
690,692
691,692
695,696
696,697
696,698
696,699
697,698
699,700
701,702
701,703
702,703
702,704
703,704
707,708
708,709
708,710
708,711
709,710
711,712
713,714
713,715
714,715
714,716
715,716
719,720
720,721
720,722
720,723
721,722
723,724
725,726
725,727
726,727
726,728
727,728
731,732
732,733
732,734
732,735
733,734
735,736
737,738
737,739
738,739
738,740
739,740
743,744
744,745
744,746
744,747
745,746
747,748
749,750
749,751
750,751
750,752
751,752
755,756
756,757
756,758
756,759
757,758
759,760
761,762
761,763
762,763
762,764
763,764
767,768
768,769
768,770
768,771
769,770
771,772
773,774
773,775
774,775
774,776
775,776
779,780
780,781
780,782
780,783
781,782
783,784
785,786
785,787
786,787
786,788
787,788
791,792
792,793
792,794
792,795
793,794
795,796
797,798
797,799
798,799
798,800
799,800
803,804
804,805
804,806
804,807
805,806
807,808
809,810
809,811
810,811
810,812
811,812
815,816
816,817
816,818
816,819
817,818
819,820
821,822
821,823
822,823
822,824
823,824
827,828
827,829
828,829
828,830
829,830
831,832
832,833
834,835
834,836
834,837
834,838
834,839
835,836
835,837
836,837
836,838
837,838
839,840
839,841
840,841
842,843
844,845
844,846
845,846
846,847
846,848
846,849
846,850
847,848
849,850
852,853
854,855
856,857
857,858
857,859
857,860
857,861
858,859
860,861
863,864
865,866
866,867
866,868
867,868
867,869
868,869
871,872
873,874
874,875
874,876
874,877
875,876
877,878
879,880
881,882
882,883
884,885
884,886
885,886
885,887
886,887
888,889
889,890
891,892
891,893
891,894
891,895
891,896
892,893
892,894
893,894
893,895
894,895
896,897
896,898
897,898
899,900
901,902
901,903
902,903
903,904
903,905
903,906
903,907
904,905
906,907
909,910
911,912
913,914
914,915
914,916
914,917
914,918
915,916
917,918
920,921
922,923
923,924
923,925
924,925
924,926
925,926
928,929
930,931
931,932
931,933
931,934
932,933
934,935
936,937
938,939
939,940
941,942
941,943
942,943
942,944
943,944
943,945
944,945
948,949
948,950
949,950
950,951
950,952
951,952
953,954
953,955
953,956
953,957
954,955
956,957
958,959
959,960
959,961
960,961
961,962
961,963
962,963
962,964
963,964
965,966
967,968
970,971
971,972
971,973
972,973
975,976
975,977
976,977
977,978
977,979
978,979
980,981
982,983
982,984
983,984
984,985
984,986
984,987
984,988
985,986
987,988
990,991
992,993
994,995
995,996
995,997
996,997
996,998
997,998
1000,1001
1002,1003
1003,1004
1003,1005
1003,1006
1004,1005
1006,1007
1008,1009
1010,1011
1010,1012
1011,1012
1011,1013
1012,1013
1013,1014
1016,1017
1016,1018
1017,1018
1018,1019
1018,1020
1018,1021
1018,1022
1019,1020
1021,1022
1024,1025
1026,1027
1028,1029
1029,1030
1029,1031
1030,1031
1032,1033
1032,1034
1033,1034
1033,1035
1034,1035
1038,1039
1039,1040
1039,1041
1040,1041
1042,1043
1042,1044
1042,1045
1043,1044
1045,1046
1046,1047
1048,1049
1048,1050
1049,1050
1052,1053
1052,1054
1053,1054
1054,1055
1054,1056
1055,1056
1057,1058
1059,1060
1059,1061
1060,1061
1061,1062
1061,1063
1061,1064
1061,1065
1062,1063
1064,1065
1067,1068
1069,1070
1071,1072
1072,1073
1072,1074
1073,1074
1073,1075
1074,1075
1077,1078
1077,1079
1078,1079
1078,1080
1079,1080
1082,1083
1082,1084
1082,1085
1083,1084
1085,1086
1087,1088
1089,1090
1089,1091
1090,1091
1090,1092
1091,1092
1093,1094
1093,1095
1094,1095
1097,1098
1097,1099
1098,1099
1099,1100
1099,1101
1099,1102
1099,1103
1100,1101
1102,1103
1105,1106
1107,1108
1109,1110
1110,1111
1110,1112
1111,1112
1113,1114
1113,1115
1114,1115
1116,1117
1116,1118
1117,1118
1120,1121
1120,1122
1121,1122
1122,1123
1122,1124
1123,1124
1125,1126
1127,1128
1127,1129
1128,1129
1129,1130
1129,1131
1129,1132
1129,1133
1130,1131
1132,1133
1135,1136
1137,1138
1139,1140
1139,1141
1140,1141
1140,1142
1141,1142
1141,1143
1143,1144
1145,1146
1145,1147
1147,1148
1149,1150
1149,1151
1150,1151
1151,1152
1151,1153
1152,1153
1152,1154
1153,1154
1153,1155
1154,1155
1158,1159
1160,1161
1161,1162
1161,1163
1161,1164
1161,1165
1161,1166
1162,1163
1164,1165
1167,1168
1169,1170
1171,1172
1171,1173
1172,1173
1172,1174
1173,1174
1173,1175
1175,1176
1177,1178
1177,1179
1179,1180
1181,1182
1181,1183
1182,1183
1183,1184
1183,1185
1184,1185
1184,1186
1185,1186
1185,1187
1186,1187
1190,1191
1192,1193
1193,1194
1193,1195
1193,1196
1193,1197
1193,1198
1194,1195
1196,1197
1199,1200
1201,1202
1203,1204
1204,1205
1204,1206
1205,1206
1207,1208
1207,1209
1208,1209
1210,1211
1212,1213
1212,1214
1213,1214
1213,1215
1214,1215
1216,1217
1218,1219
1218,1220
1219,1220
1220,1221
1220,1222
1220,1223
1220,1224
1221,1222
1223,1224
1226,1227
1228,1229
1230,1231
1230,1232
1231,1232
1231,1233
1232,1233
1234,1235
1234,1236
1235,1236
1237,1238
1239,1240
1239,1241
1240,1241
1241,1242
1241,1243
1241,1244
1241,1245
1242,1243
1244,1245
1247,1248
1249,1250
1251,1252
1252,1253
1252,1254
1253,1254
1255,1256
1255,1257
1256,1257
1258,1259
1258,1260
1259,1260
1259,1261
1261,1262
1263,1264
1264,1265
1264,1266
1265,1266
1268,1269
1268,1270
1268,1271
1269,1270
1269,1271
1270,1271
1271,1272
1271,1273
1273,1274
1275,1276
1276,1277
1277,1278
1277,1279
1278,1279
1280,1281
1281,1282
1283,1284
1283,1285
1283,1286
1284,1285
1285,1286
1285,1287
1286,1287
1286,1288
1287,1288
1287,1289
1288,1289
1288,1290
1289,1290
1294,1295
1296,1297
1297,1298
1297,1299
1298,1299
1298,1300
1300,1301
1300,1302
1300,1303
1300,1304
1301,1302
1303,1304
1306,1307
1308,1309
1309,1310
1310,1311
1310,1312
1310,1313
1310,1314
1311,1312
1313,1314
1316,1317
1318,1319
1318,1320
1319,1320
1319,1321
1320,1321
1322,1323
1322,1324
1323,1324
1325,1326
1327,1328
1328,1329
1329,1330
1330,1331
1330,1332
1330,1333
1331,1332
1332,1333
1332,1334
1333,1334
1335,1336
1337,1338
1338,1339
1338,1340
1339,1340
1341,1342
1341,1343
1341,1344
1341,1345
1341,1346
1342,1343
1344,1345
1344,1346
1345,1346
1348,1349
1350,1351
1350,1352
1351,1352
1351,1353
1352,1353
1354,1355
1356,1357
1357,1358
1357,1359
1358,1359
1358,1360
1359,1360
1359,1361
1360,1361
1365,1366
1366,1367
1367,1368
1367,1369
1368,1369
1368,1370
1369,1370
1369,1371
1370,1371
1375,1376
1375,1377
1376,1377
1377,1378
1377,1379
1378,1379
1380,1381
1382,1383
1382,1384
1383,1384
1384,1385
1384,1386
1384,1387
1384,1388
1384,1389
1384,1390
1385,1386
1387,1388
1390,1391
1392,1393
1394,1395
1396,1397
1398,1399
1399,1400
1399,1401
1400,1401
1402,1403
1402,1404
1403,1404
1405,1406
1405,1407
1406,1407
1409,1410
1409,1411
1410,1411
1411,1412
1411,1413
1412,1413
1414,1415
1416,1417
1416,1418
1416,1419
1417,1418
1418,1419
1418,1420
1418,1421
1418,1422
1419,1420
1421,1422
1424,1425
1426,1427
1426,1428
1427,1428
1428,1429
1430,1431
1431,1432
1431,1433
1432,1433
1435,1436
1437,1438
1438,1439
1438,1440
1439,1440
1441,1442
1443,1444
1444,1445
1444,1446
1445,1446
1447,1448
1447,1449
1448,1449
1450,1451
1452,1453
1452,1454
1453,1454
1454,1455
1454,1456
1455,1456
1457,1458
1459,1460
1459,1461
1460,1461
1461,1462
1461,1463
1461,1464
1461,1465
1462,1463
1464,1465
1467,1468
1469,1470
1471,1472
1472,1473
1472,1474
1473,1474
1475,1476
1477,1478
1477,1479
1478,1479
1478,1480
1480,1481
1480,1482
1481,1482
1483,1484
1485,1486
1485,1487
1486,1487
1487,1488
1487,1489
1487,1490
1487,1491
1488,1489
1490,1491
1493,1494
1495,1496
1497,1498
1498,1499
1498,1500
1498,1501
1499,1500
1501,1502
1501,1503
1502,1503
1505,1506
1507,1508
1507,1509
1507,1510
1508,1509
1508,1510
1509,1510
1511,1512
1512,1513
1514,1515
1515,1516
1516,1517
1516,1518
1517,1518
1519,1520
1519,1521
1519,1522
1519,1523
1519,1524
1519,1525
1520,1521
1522,1523
1524,1525
1527,1528
1527,1529
1528,1529
1530,1531
1532,1533
1534,1535
1534,1536
1535,1536
1536,1537
1536,1538
1537,1538
1539,1540
1539,1541
1539,1542
1539,1543
1539,1544
1539,1545
1540,1541
1542,1543
1544,1545
1547,1548
1547,1549
1548,1549
1550,1551
1552,1553
1554,1555
1554,1556
1555,1556
1555,1557
1556,1557
1558,1559
1560,1561
1560,1562
1560,1563
1561,1562
1561,1563
1561,1564
1562,1563
1562,1564
1563,1564
1563,1565
1564,1565
1564,1566
1565,1566
1569,1570
1570,1571
1571,1572
1571,1573
1572,1573
1572,1574
1573,1574
1573,1575
1574,1575
1574,1576
1575,1576
1575,1577
1576,1577
1576,1578
1577,1578
1585,1586
1585,1587
1586,1587
1587,1588
1587,1589
1587,1590
1587,1591
1588,1589
1590,1591
1590,1592
1591,1592
1591,1593
1592,1593
1596,1597
1596,1598
1597,1598
1597,1599
1598,1599
1598,1600
1599,1600
1599,1601
1600,1601
1606,1607
1607,1608
1607,1609
1608,1609
1611,1612
1612,1613
1612,1614
1613,1614
1613,1615
1614,1615
1614,1616
1615,1616
1615,1617
1616,1617
1622,1623
1622,1624
1623,1624
1624,1625
1624,1626
1625,1626
1627,1628
1627,1629
1627,1630
1630,1631
1631,1632
1631,1633
1632,1633
1634,1635
1636,1637
1636,1638
1636,1639
1637,1638
1637,1639
1638,1639
1640,1641
1642,1643
1643,1644
1644,1645
1644,1646
1644,1647
1644,1648
1645,1646
1647,1648
1648,1649
1648,1650
1649,1650
1649,1651
1650,1651
1650,1652
1651,1652
1656,1657
1658,1659
1660,1661
1660,1662
1661,1662
1662,1663
1662,1664
1662,1665
1662,1666
1663,1664
1665,1666
1668,1669
1670,1671
1672,1673
1673,1674
1673,1675
1674,1675
1676,1677
1676,1678
1676,1679
1676,1680
1676,1681
1676,1682
1677,1678
1679,1680
1681,1682
1684,1685
1685,1686
1685,1687
1686,1687
1686,1688
1687,1688
1687,1689
1688,1689
1693,1694
1695,1696
1695,1697
1696,1697
1696,1698
1697,1698
1699,1700
1701,1702
1701,1703
1702,1703
1703,1704
1703,1705
1703,1706
1703,1707
1704,1705
1706,1707
1709,1710
1711,1712
1713,1714
1713,1715
1714,1715
1714,1716
1715,1716
1717,1718
1719,1720
1719,1721
1720,1721
1721,1722
1721,1723
1721,1724
1721,1725
1722,1723
1724,1725
1727,1728
1729,1730
1731,1732
1731,1733
1732,1733
1734,1735
1734,1736
1734,1737
1734,1738
1734,1739
1734,1740
1735,1736
1736,1737
1736,1738
1737,1738
1739,1740
1741,1742
1742,1743
1742,1744
1743,1744
1745,1746
1745,1747
1746,1747
1749,1750
1750,1751
1750,1752
1750,1753
1751,1752
1753,1754
1755,1756
1757,1758
1758,1759
1758,1760
1758,1761
1759,1760
1761,1762
1763,1764
1765,1766
1766,1767
1766,1768
1767,1768
1769,1770
1769,1771
1769,1772
1769,1773
1769,1774
1769,1775
1769,1776
1769,1777
1770,1771
1772,1773
1772,1774
1773,1774
1776,1777
1776,1778
1777,1778
1777,1779
1779,1780
1781,1782
1781,1783
1782,1783
1782,1784
1783,1784
1786,1787
1788,1789
1790,1791
1792,1793
1792,1794
1793,1794
1796,1797
1798,1799
1800,1801
1800,1802
1800,1803
1801,1802
1801,1803
1802,1803
1804,1805
1806,1807
1806,1808
1807,1808
1808,1809
1808,1810
1809,1810
1811,1812
1811,1813
1811,1814
1812,1813
1814,1815
1815,1816
1815,1817
1816,1817
1819,1820
1819,1821
1820,1821
1822,1823
1824,1825
1824,1826
1825,1826
1825,1827
1827,1828
1829,1830
1830,1831
1831,1832
1831,1833
1831,1834
1831,1835
1831,1836
1832,1833
1834,1835
1836,1837
1839,1840
1841,1842
1842,1843
1843,1844
1843,1845
1843,1846
1843,1847
1843,1848
1843,1849
1844,1845
1846,1847
1848,1849
1851,1852
1853,1854
1855,1856
1855,1857
1856,1857
1856,1858
1857,1858
1859,1860
1859,1861
1860,1861
1860,1862
1861,1862
1865,1866
1866,1867
1866,1868
1866,1869
1867,1868
1869,1870
1869,1871
1870,1871
1871,1872
1871,1873
1871,1874
1871,1875
1872,1873
1874,1875
1877,1878
1879,1880
1880,1881
1880,1882
1881,1882
1881,1883
1882,1883
1882,1884
1883,1884
1887,1888
1889,1890
1889,1891
1890,1891
1891,1892
1891,1893
1891,1894
1891,1895
1892,1893
1894,1895
1897,1898
1899,1900
1900,1901
1900,1902
1901,1902
1901,1903
1902,1903
1902,1904
1903,1904
1907,1908
1909,1910
1910,1911
1910,1912
1911,1912
1913,1914
1915,1916
1916,1917
1916,1918
1917,1918
1919,1920
1920,1921
1920,1922
1921,1922
1924,1925
1925,1926
1925,1927
1925,1928
1926,1927
1928,1929
1929,1930
1929,1931
1930,1931
1930,1932
1931,1932
1935,1936
1937,1938
1938,1939
1938,1940
1938,1941
1939,1940
1941,1942
1941,1943
1942,1943
1945,1946
1947,1948
1948,1949
1948,1950
1949,1950
1951,1952
1951,1953
1952,1953
1954,1955
1956,1957
1956,1958
1957,1958
1958,1959
1958,1960
1959,1960
1961,1962
1963,1964
1963,1965
1964,1965
1965,1966
1965,1967
1965,1968
1965,1969
1966,1967
1968,1969
1971,1972
1973,1974
1975,1976
1975,1977
1976,1977
1976,1978
1977,1978
1979,1980
1979,1981
1980,1981
1982,1983
1984,1985
1985,1986
1986,1987
1986,1988
1986,1989
1986,1990
1986,1991
1987,1988
1989,1990
1991,1992
1994,1995
1996,1997
1997,1998
1997,1999
1998,1999
2000,2001
2000,2002
2001,2002
2003,2004
2005,2006
2005,2007
2006,2007
2007,2008
2007,2009
2008,2009
2010,2011
2012,2013
2012,2014
2013,2014
2014,2015
2014,2016
2014,2017
2014,2018
2015,2016
2017,2018
2020,2021
2022,2023
2024,2025
2025,2026
2025,2027
2026,2027
2028,2029
2028,2030
2029,2030
2031,2032
2032,2033
2034,2035
2034,2036
2035,2036
2035,2037
2036,2037
2039,2040
2039,2041
2040,2041
2041,2042
2041,2043
2041,2044
2041,2045
2042,2043
2044,2045
2047,2048
2049,2050
2051,2052
2051,2053
2052,2053
2052,2054
2053,2054
2053,2055
2054,2055
2056,2057
2059,2060
2059,2061
2060,2061
2061,2062
2061,2063
2061,2064
2061,2065
2062,2063
2064,2065
2067,2068
2069,2070
2071,2072
2071,2073
2072,2073
2073,2074
2075,2076
2076,2077
2077,2078
2079,2080
2080,2081
2080,2082
2081,2082
2083,2084
2085,2086
2085,2087
2086,2087
2086,2088
2087,2088
2089,2090
2090,2091
2092,2093
2093,2094
2094,2095
2094,2096
2095,2096
2097,2098
2099,2100
2100,2101
2100,2102
2101,2102
2103,2104
2104,2105
2104,2106
2105,2106
2108,2109
2109,2110
2109,2111
2110,2111
2112,2113
2113,2114
2113,2115
2114,2115
2117,2118
2118,2119
2118,2120
2118,2121
2119,2120
2121,2122
2122,2123
2122,2124
2123,2124
2127,2128
2128,2129
2128,2130
2129,2130
2131,2132
2132,2133
2132,2134
2133,2134
2133,2135
2134,2135
2138,2139
2139,2140
2139,2141
2140,2141
2140,2142
2141,2142
2141,2143
2142,2143
2146,2147
2148,2149
2149,2150
2149,2151
2150,2151
2150,2152
2151,2152
2154,2155
2156,2157
2157,2158
2157,2159
2157,2160
2158,2159
2160,2161
2162,2163
2164,2165
2165,2166
2165,2167
2166,2167
2168,2169
2170,2171
2171,2172
2171,2173
2172,2173
2174,2175
2174,2176
2175,2176
2178,2179
2179,2180
2179,2181
2179,2182
2180,2181
2182,2183
2182,2184
2183,2184
2185,2186
2187,2188
2187,2189
2188,2189
2190,2191
2190,2192
2191,2192
2191,2193
2192,2193
2196,2197
2197,2198
2197,2199
2198,2199
2200,2201
2200,2202
2201,2202
2204,2205
2204,2206
2205,2206
2207,2208
2208,2209
2209,2210
2209,2211
2209,2212
2210,2211
2212,2213
2215,2216
2216,2217
2216,2218
2217,2218
2219,2220
2221,2222
2221,2223
2222,2223
2222,2224
2223,2224
2223,2225
2224,2225
2228,2229
2229,2230
2230,2231
2230,2232
2230,2233
2230,2234
2230,2235
2231,2232
2233,2234
2234,2235
2234,2236
2235,2236
2238,2239
2240,2241
2242,2243
2242,2244
2243,2244
2243,2245
2245,2246
2247,2248
2249,2250
2250,2251
2250,2252
2251,2252
2253,2254
2255,2256
2256,2257
2256,2258
2257,2258
2259,2260
2260,2261
2260,2262
2261,2262
2264,2265
2265,2266
2265,2267
2265,2268
2265,2269
2265,2270
2266,2267
2268,2269
2269,2270
2269,2271
2270,2271
2273,2274
2275,2276
2277,2278
2277,2279
2278,2279
2278,2280
2280,2281
2282,2283
2284,2285
2285,2286
2285,2287
2285,2288
2285,2289
2285,2290
2286,2287
2288,2289
2289,2290
2289,2291
2290,2291
2293,2294
2295,2296
2297,2298
2297,2299
2298,2299
2298,2300
2300,2301
2302,2303
2304,2305
2305,2306
2305,2307
2305,2308
2306,2307
2308,2309
2308,2310
2309,2310
2312,2313
2314,2315
2315,2316
2315,2317
2316,2317
2316,2318
2317,2318
2317,2319
2318,2319
2322,2323
2324,2325
2325,2326
2325,2327
2326,2327
2328,2329
2328,2330
2329,2330
2331,2332
2332,2333
2332,2334
2333,2334
2336,2337
2336,2338
2336,2339
2337,2338
2339,2340
2340,2341
2341,2342
2341,2343
2341,2344
2342,2343
2344,2345
2346,2347
2346,2348
2347,2348
2350,2351
2351,2352
2352,2353
2352,2354
2352,2355
2353,2354
2355,2356
2357,2358
2357,2359
2358,2359
2361,2362
2362,2363
2363,2364
2365,2366
2366,2367
2366,2368
2367,2368
2369,2370
2371,2372
2373,2374
2373,2375
2375,2376
2376,2377
2376,2378
2377,2378
2379,2380
2380,2381
2380,2382
2383,2384
2383,2385
2385,2386
2386,2387
2386,2388
2387,2388
2389,2390
2391,2392
2392,2393
2392,2394
2393,2394
2395,2396
2397,2398
2398,2399
2398,2400
2399,2400
2401,2402
2403,2404
2403,2405
2405,2406
2406,2407
2406,2408
2407,2408
2409,2410
2411,2412
2412,2413
2412,2414
2413,2414
2415,2416
2417,2418
2418,2419
2418,2420
2419,2420
2421,2422
2423,2424
2423,2425
2425,2426
2426,2427
2426,2428
2427,2428
2429,2430
2431,2432
2431,2433
2433,2434
2434,2435
2434,2436
2435,2436
2437,2438
2437,2439
2438,2439
2440,2441
2442,2443
2442,2444
2443,2444
2444,2445
2444,2446
2445,2446
2447,2448
2449,2450
2449,2451
2450,2451
2451,2452
2451,2453
2451,2454
2451,2455
2451,2456
2452,2453
2454,2455
2456,2457
2459,2460
2461,2462
2462,2463
2462,2464
2463,2464
2465,2466
2465,2467
2466,2467
2468,2469
2470,2471
2471,2472
2471,2473
2472,2473
2474,2475
2476,2477
2476,2478
2478,2479
2479,2480
2480,2481
2482,2483
2482,2484
2484,2485
2484,2486
2486,2487
2486,2488
2487,2488
2487,2489
2488,2489
2488,2490
2489,2490
2493,2494
2494,2495
2494,2496
2495,2496
2497,2498
2499,2500
2499,2501
2501,2502
2502,2503
2502,2504
2503,2504
2505,2506
2505,2507
2506,2507
2509,2510
2510,2511
2510,2512
2511,2512
2511,2513
2512,2513
2515,2516
2517,2518
2517,2519
2519,2520
2520,2521
2520,2522
2521,2522
2523,2524
2525,2526
2526,2527
2526,2528
2527,2528
2530,2531
2531,2532
2531,2533
2532,2533
2534,2535
2536,2537
2537,2538
2537,2539
2538,2539
2541,2542
2541,2543
2542,2543
2543,2544
2545,2546
2545,2547
2546,2547
2547,2548
2547,2549
2548,2549
2551,2552
2552,2553
2552,2554
2553,2554
2556,2557
2557,2558
2557,2559
2558,2559
2560,2561
2561,2562
2563,2564
2564,2565
2565,2566
2567,2568
2567,2569
2569,2570
2570,2571
2571,2572
2573,2574
-----nextToken-----
2,4,7,9,10,15,17,21,23,24,27,31,33,34,37,41,43,44,47,51,53,56,59,61,65,67,68,72,74,78,82,85,89,90,94,96,101,103,104,106,110,114,117,119,123,125,129,130,135,136,138,142,145,150,151,153,157,159,161,165,166,171,173,174,176,178,182,185,187,189,193,195,200,202,203,205,207,212,213,215,223,225,228,229,233,235,237,242,243,245,250,251,252,256,260,261,265,269,270,274,278,279,283,288,289,290,294,299,300,301,305,309,310,314,318,319,323,327,328,332,336,337,341,345,346,350,352,356,360,361,365,369,370,374,378,379,381,385,389,390,392,396,401,402,403,407,411,412,416,418,423,424,426,431,432,436,438,441,445,446,448,453,454,456,461,463,464,466,468,472,475,476,480,481,485,488,490,494,496,501,503,504,506,508,510,515,516,520,521,522,526,528,529,533,534,535,538,541,543,547,551,552,553,558,560,561,563,569,570,571,572,575,579,580,581,586,588,589,591,597,598,599,600,604,607,611,614,616,618,621,622,627,629,630,632,634,638,640,644,645,646,650,652,656,657,658,662,664,668,669,670,674,676,680,681,682,686,688,692,693,694,698,700,704,705,706,710,712,716,717,718,722,724,728,729,730,734,736,740,741,742,746,748,752,753,754,758,760,764,765,766,770,772,776,777,778,782,784,788,789,790,794,796,800,801,802,806,808,812,813,814,818,820,824,825,826,830,833,838,841,843,848,850,851,853,855,859,861,862,864,869,870,872,876,878,880,883,887,890,895,898,900,905,907,908,910,912,916,918,919,921,926,927,929,933,935,937,940,945,946,947,952,955,957,964,966,968,969,973,974,979,981,986,988,989,991,993,998,999,1001,1005,1007,1009,1014,1015,1020,1022,1023,1025,1027,1031,1035,1036,1037,1041,1044,1047,1050,1051,1056,1058,1063,1065,1066,1068,1070,1075,1076,1080,1081,1084,1086,1088,1092,1095,1096,1101,1103,1104,1106,1108,1112,1115,1118,1119,1124,1126,1131,1133,1134,1136,1138,1142,1144,1146,1148,1155,1156,1157,1159,1163,1165,1166,1168,1170,1174,1176,1178,1180,1187,1188,1189,1191,1195,1197,1198,1200,1202,1206,1209,1211,1215,1217,1222,1224,1225,1227,1229,1233,1236,1238,1243,1245,1246,1248,1250,1254,1257,1260,1262,1266,1267,1272,1274,1279,1282,1290,1291,1292,1293,1295,1299,1302,1304,1305,1307,1312,1314,1315,1317,1321,1324,1326,1334,1336,1340,1343,1346,1347,1349,1353,1355,1361,1362,1363,1364,1371,1372,1373,1374,1379,1381,1386,1388,1389,1391,1393,1395,1397,1401,1404,1407,1408,1413,1415,1420,1422,1423,1425,1429,1433,1434,1436,1440,1442,1446,1449,1451,1456,1458,1463,1465,1466,1468,1470,1474,1476,1479,1482,1484,1489,1491,1492,1494,1496,1500,1503,1504,1506,1510,1513,1518,1521,1523,1525,1526,1529,1531,1533,1538,1541,1543,1545,1546,1549,1551,1553,1557,1559,1566,1567,1568,1578,1579,1580,1581,1582,1583,1584,1589,1593,1594,1595,1601,1602,1603,1604,1605,1609,1610,1617,1618,1619,1620,1621,1626,1628,1629,1633,1635,1639,1641,1646,1652,1653,1654,1655,1657,1659,1664,1666,1667,1669,1671,1675,1678,1680,1682,1683,1689,1690,1691,1692,1694,1698,1700,1705,1707,1708,1710,1712,1716,1718,1723,1725,1726,1728,1730,1733,1738,1740,1744,1747,1748,1752,1754,1756,1760,1762,1764,1768,1771,1774,1775,1778,1780,1784,1785,1787,1789,1791,1794,1795,1797,1799,1803,1805,1810,1813,1817,1818,1821,1823,1826,1828,1833,1835,1837,1838,1840,1845,1847,1849,1850,1852,1854,1858,1862,1863,1864,1868,1873,1875,1876,1878,1884,1885,1886,1888,1893,1895,1896,1898,1904,1905,1906,1908,1912,1914,1918,1922,1923,1927,1932,1933,1934,1936,1940,1943,1944,1946,1950,1953,1955,1960,1962,1967,1969,1970,1972,1974,1978,1981,1983,1988,1990,1992,1993,1995,1999,2002,2004,2009,2011,2016,2018,2019,2021,2023,2027,2030,2033,2037,2038,2043,2045,2046,2048,2050,2055,2057,2058,2063,2065,2066,2068,2070,2074,2078,2082,2084,2088,2091,2096,2098,2102,2106,2107,2111,2115,2116,2120,2124,2125,2126,2130,2135,2136,2137,2143,2144,2145,2147,2152,2153,2155,2159,2161,2163,2167,2169,2173,2176,2177,2181,2184,2186,2189,2193,2194,2195,2199,2202,2203,2206,2211,2213,2214,2218,2220,2225,2226,2227,2232,2236,2237,2239,2241,2244,2246,2248,2252,2254,2258,2262,2263,2267,2271,2272,2274,2276,2279,2281,2283,2287,2291,2292,2294,2296,2299,2301,2303,2307,2310,2311,2313,2319,2320,2321,2323,2327,2330,2334,2335,2338,2343,2345,2348,2349,2354,2356,2359,2360,2364,2368,2370,2372,2374,2378,2381,2382,2384,2388,2390,2394,2396,2400,2402,2404,2408,2410,2414,2416,2420,2422,2424,2428,2430,2432,2436,2439,2441,2446,2448,2453,2455,2457,2458,2460,2464,2467,2469,2473,2475,2477,2481,2483,2485,2490,2491,2492,2496,2498,2500,2504,2507,2508,2513,2514,2516,2518,2522,2524,2528,2529,2533,2535,2539,2540,2544,2549,2550,2554,2555,2559,2562,2566,2568,2572,2574
-----computeFrom-----
80,81
80,82
92,93
92,94
112,113
112,114
132,133
132,134
147,148
147,149
180,181
180,182
191,192
191,193
209,210
209,211
217,218
217,219
239,240
239,241
247,248
247,249
420,421
420,422
428,429
428,430
450,451
450,452
483,484
483,485
492,493
492,494
512,513
512,514
537,538
537,539
546,547
546,548
565,566
565,567
574,575
574,576
593,594
593,595
602,603
602,604
610,611
610,612
828,829
828,830
836,837
836,838
866,867
866,868
885,886
885,887
893,894
893,895
923,924
923,925
950,951
950,952
995,996
995,997
1011,1012
1011,1013
1039,1040
1039,1041
1072,1073
1072,1074
1090,1091
1090,1092
1110,1111
1110,1112
1140,1141
1140,1142
1141,1142
1141,1143
1145,1146
1145,1147
1151,1152
1151,1153
1172,1173
1172,1174
1173,1174
1173,1175
1177,1178
1177,1179
1183,1184
1183,1185
1204,1205
1204,1206
1213,1214
1213,1215
1231,1232
1231,1233
1252,1253
1252,1254
1269,1270
1269,1271
1271,1272
1271,1273
1285,1286
1285,1287
1298,1299
1298,1300
1319,1320
1319,1321
1338,1339
1338,1340
1399,1400
1399,1401
1444,1445
1444,1446
1478,1479
1478,1480
1508,1509
1508,1510
1516,1517
1516,1518
1536,1537
1536,1538
1555,1556
1555,1557
1562,1563
1562,1564
1571,1572
1571,1573
1612,1613
1612,1614
1637,1638
1637,1639
1673,1674
1673,1675
1696,1697
1696,1698
1714,1715
1714,1716
1766,1767
1766,1768
1801,1802
1801,1803
1808,1809
1808,1810
1825,1826
1825,1827
1856,1857
1856,1858
1880,1881
1880,1882
1900,1901
1900,1902
1948,1949
1948,1950
1976,1977
1976,1978
1997,1998
1997,1999
2025,2026
2025,2027
2035,2036
2035,2037
2052,2053
2052,2054
2086,2087
2086,2088
2139,2140
2139,2141
2149,2150
2149,2151
2315,2316
2315,2317
2325,2326
2325,2327
2434,2435
2434,2436
2510,2511
2510,2512
-----guardedBy-----
543,569
552,570
551,569
553,571
580,598
579,597
1148,1170
1180,1202
1282,1307
1559,1698
1579,1602
1582,1619
1580,1603
1578,1617
1639,1657
1805,1828
1863,1905
1864,1906
1862,1904
-----guardedByNegation-----
1582,1654
1578,1652
1805,1854
-----lastLexicalUse-----
1582,1654
1578,1652
1805,1854
-----jump-----
1582,1654
1578,1652
1805,1854
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LabelStatement;Name;LabelStatement;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int hdd_wlan_startup(struct device *dev ){   VOS_STATUS status;   hdd_adapter_t *pAdapter = NULL;   hdd_adapter_t *pP2pAdapter = NULL;   hdd_context_t *pHddCtx = NULL;   v_CONTEXT_t pVosContext= NULL;#ifdef WLAN_BTAMP_FEATURE   VOS_STATUS vStatus = VOS_STATUS_SUCCESS;   WLANBAP_ConfigType btAmpConfig;   hdd_config_t *pConfig;#endif   int ret;   struct wiphy *wiphy;   v_MACADDR_t mac_addr;   ENTER();   /*    * cfg80211: wiphy allocation    */   wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;   if(wiphy == NULL)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }   pHddCtx = wiphy_priv(wiphy);   //Initialize the adapter context to zeros.   vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));   pHddCtx->wiphy = wiphy;   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);   /* register for riva power on lock to platform driver    * Locking power early to ensure FW doesn't reset by kernel while    * host driver is busy initializing itself */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }   /*Get vos context here bcoz vos_open requires it*/   pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);   if(pVosContext == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }   //Save the Global VOSS context in adapter context for future.   pHddCtx->pvosContext = pVosContext;   //Save the adapter context in global context for future.   ((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;   pHddCtx->parent_dev = dev;   pHddCtx->con_scan_abort_cnt = 0;   init_completion(&pHddCtx->full_pwr_comp_var);   init_completion(&pHddCtx->standby_comp_var);   init_completion(&pHddCtx->req_bmps_comp_var);   init_completion(&pHddCtx->scan_info.scan_req_completion_event);   init_completion(&pHddCtx->scan_info.abortscan_event_var);   init_completion(&pHddCtx->wiphy_channel_update_event);   init_completion(&pHddCtx->ssr_comp_var);   init_completion(&pHddCtx->mc_sus_event_var);   init_completion(&pHddCtx->tx_sus_event_var);   init_completion(&pHddCtx->rx_sus_event_var);   hdd_init_ll_stats_ctx(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   init_completion(&pHddCtx->linux_reg_req);#else   init_completion(&pHddCtx->driver_crda_req);#endif#ifdef WLAN_FEATURE_EXTSCAN   init_completion(&pHddCtx->ext_scan_context.response_event);#endif /* WLAN_FEATURE_EXTSCAN */   spin_lock_init(&pHddCtx->schedScan_lock);   hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );   vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest);#ifdef FEATURE_WLAN_TDLS   /* tdls_lock is initialized before an hdd_open_adapter ( which is    * invoked by other instances also) to protect the concurrent    * access for the Adapters by TDLS module.    */   mutex_init(&pHddCtx->tdls_lock);#endif   mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);   mutex_init(&pHddCtx->wmmLock);   hdd_init_offloaded_packets_ctx(pHddCtx);   /* By default Strict Regulatory For FCC should be false */   pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;   // Load all config first as TL config is needed during vos_open   pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);   if(pHddCtx->cfg_ini == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }   vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));   // Read and parse the qcom_cfg.ini file   status = hdd_parse_config_ini( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }#ifdef MEMORY_DEBUG   if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)      vos_mem_init();   hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled);#endif   /* INI has been read, initialise the configuredMcastBcastFilter with    * INI value as this will serve as the default value    */   pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;   hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting);   if (false == hdd_is_5g_supported(pHddCtx))   {      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }   /* If SNR Monitoring is enabled, FW has to parse all beacons    * for calcaluting and storing the average SNR, so set Nth beacon    * filter to 1 to enable FW to parse all the beaocons    */   if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)   {      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }   /*    * cfg80211: Initialization  ...    */   if (VOS_FTM_MODE != hdd_get_conparam())   {      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }   // Update VOS trace levels based upon the cfg.ini   hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP);   hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL);   hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD);   hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME);   hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE);   hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC);   hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA);   hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS);   hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS);   hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);   // Update WDI trace levels based upon the cfg.ini   hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT);   hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL);   if (VOS_FTM_MODE == hdd_get_conparam())   {      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }   if( VOS_MONITOR_MODE == hdd_get_conparam())   {       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }   //Open watchdog module   if(pHddCtx->cfg_ini->fIsLogpEnabled)   {      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }   pHddCtx->isLogpInProgress = FALSE;   vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);#ifdef CONFIG_ENABLE_LINUX_REG   /* initialize the NV module. This is required so that      we can initialize the channel information in wiphy      from the NV.bin data. The channel information in      wiphy needs to be initialized before wiphy registration */   status = vos_nv_open();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,                "%s: vos_nv_open failed", __func__);       goto err_wdclose;   }   status = vos_init_wiphy_from_nv_bin();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,               "%s: vos_init_wiphy failed", __func__);       goto err_vos_nv_close;   }#endif   //Initialize the nlink service   if(nl_srv_init() != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }#ifdef WLAN_KD_READY_NOTIFIER   pHddCtx->kd_nl_init = 1;#endif /* WLAN_KD_READY_NOTIFIER */   vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);   status = vos_open( &pVosContext, pHddCtx->parent_dev);   if ( !VOS_IS_STATUS_SUCCESS( status ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }   status = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }   if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)   {      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }   if (0 == enable_11d || 1 == enable_11d)   {      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }   /* Note that the vos_preStart() sequence triggers the cfg download.      The cfg download must occur before we update the SME config      since the SME config operation must access the cfg database */   status = hdd_set_sme_config( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   // Apply the cfg.ini to cfg.dat   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   // Get mac addr from platform driver   ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);   if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))   {      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }   {      eHalStatus halStatus;      /* Set the MAC Address Currently this is used by HAL to       * add self sta. Remove this once self sta is added as       * part of session open.       */      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );      if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }   }   /*Start VOSS which starts up the SME/MAC/HAL modules and everything else     Note: Firmware image will be read and downloaded inside vos_start API */   status = vos_start( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }#ifdef FEATURE_WLAN_CH_AVOID    /* Plug in avoid channel notification callback     * This should happen before ADD_SELF_STA     * FW will send first IND with ADD_SELF_STA REQ from host */    /* check the Channel Avoidance is enabled */   if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)   {       sme_AddChAvoidCallback(pHddCtx->hHal,                              hdd_hostapd_ch_avoid_cb);   }#endif /* FEATURE_WLAN_CH_AVOID */   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   status = wlan_hdd_init_channels(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",             __func__);      goto err_vosstop;   }#endif   status = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifndef CONFIG_ENABLE_LINUX_REG   wlan_hdd_cfg80211_update_reg_info( wiphy );   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }#endif#ifdef CONFIG_ENABLE_LINUX_REG   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }   status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",             __func__);      goto err_unregister_wiphy;   }#endif   wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);   if (VOS_STA_SAP_MODE == hdd_get_conparam())   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }   else   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }   if( pAdapter == NULL )   {      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }   if (country_code)   {      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }#ifdef WLAN_BTAMP_FEATURE   vStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_close_adapter;   }   vStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   status = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE   /*    * UapsdMask is 0xf if U-APSD is enbaled for all AC's...    * The value of CFG_QOS_WMM_UAPSD_MASK_DEFAULT is 0xaa(Magic Value)    * which is greater than 0xf. So the below check is safe to make    * sure that there is no entry for UapsdMask in the ini    */   if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)   {       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }#ifdef WLAN_FEATURE_ROAM_SCAN_OFFLOAD   if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE))   {      hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__);      pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0;      sme_UpdateRoamScanOffloadEnabled((tHalHandle)(pHddCtx->hHal),                       pHddCtx->cfg_ini->isRoamOffloadScanEnabled);   }#endif   wlan_hdd_tdls_init(pHddCtx);   wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);   vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan);   sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);   /* Register with platform driver as client for Suspend/Resume */   status = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }   /* Open debugfs interface */   if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))   {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }   /* Register TM level change handler function to the platform */   status = hddDevTmRegisterNotifyCallback(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }   // register net device notifier for device change notification   ret = register_netdevice_notifier(&hdd_netdev_notifier);   if(ret < 0)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }   //Initialize the BTC service   if(btc_activate_service(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }#ifdef FEATURE_OEM_DATA_SUPPORT   //Initialize the OEM service   if (oem_activate_service(pHddCtx) != 0)   {       hddLog(VOS_TRACE_LEVEL_FATAL,              "%s: oem_activate_service failed", __func__);       goto err_reg_netdev;   }#endif#ifdef PTT_SOCK_SVC_ENABLE   //Initialize the PTT service   if(ptt_sock_activate_svc(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_FEATURE_RMC   if (hdd_open_cesium_nl_sock() < 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE   if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)   {       if(wlan_logging_sock_activate_svc(                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,                   pHddCtx->cfg_ini->wlanLoggingNumBuf,                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf))       {           hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"                   " failed", __func__);           goto err_reg_netdev;       }       //TODO: To Remove enableDhcpDebug and use gEnableDebugLog for       //EAPOL and DHCP       if (!pHddCtx->cfg_ini->gEnableDebugLog)           pHddCtx->cfg_ini->gEnableDebugLog =           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |           VOS_PKT_PROTO_TYPE_ARP;   }   if (pHddCtx->cfg_ini->wlanLoggingEnable &&               (pHddCtx->cfg_ini->enableFWLogging ||                pHddCtx->cfg_ini->enableMgmtLogging ||                pHddCtx->cfg_ini->enableContFWLogging ||                pHddCtx->cfg_ini->enableFwrMemDump )                )   {       hdd_init_frame_logging(pHddCtx);   }   else   {       hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini"));   }#endif   if (vos_is_multicast_logging())       wlan_logging_set_log_level();   hdd_register_mcast_bcast_filter(pHddCtx);   if (VOS_STA_SAP_MODE != hdd_get_conparam())   {      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }   mutex_init(&pHddCtx->sap_lock);   mutex_init(&pHddCtx->roc_lock);#ifdef WLAN_FEATURE_HOLD_RX_WAKELOCK   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->rx_wake_lock,           "qcom_rx_wakelock");#endif   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock");   vos_event_init(&pHddCtx->scan_info.scan_finished_event);   pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);#ifdef FEATURE_WLAN_SCAN_PNO   /*SME must send channel update configuration to RIVA*/   sme_UpdateChannelConfig(pHddCtx->hHal);#endif   /* Send the update default channel list to the FW*/   sme_UpdateChannelList(pHddCtx->hHal);   /* Fwr capabilities received, Set the Dot11 mode */   sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));   sme_SetDefDot11Mode(pHddCtx->hHal);#ifndef CONFIG_ENABLE_LINUX_REG   /*updating wiphy so that regulatory user hints can be processed*/   if (wiphy)   {       regulatory_hint(wiphy, "00");   }#endif   // Initialize the restart logic   wlan_hdd_restart_init(pHddCtx);   //Register the traffic monitor timer now   if ( pHddCtx->cfg_ini->dynSplitscan)   {       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }   wlan_hdd_cfg80211_nan_init(pHddCtx);   mutex_init(&pHddCtx->cur_rx_level_lock);   vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx);   vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);#ifdef WLAN_FEATURE_EXTSCAN    sme_EXTScanRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_extscan_callback,                           pHddCtx);#endif /* WLAN_FEATURE_EXTSCAN */#ifdef FEATURE_OEM_DATA_SUPPORT    sme_OemDataRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_oemdata_callback,                           pHddCtx);#endif /* FEATURE_OEM_DATA_SUPPORT */   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);#ifdef WLAN_NS_OFFLOAD   // Register IPv6 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed;   ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier"));   }#endif   // Register IPv4 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;   ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }   /*Fw mem dump procfs initialization*/   memdump_init();   hdd_dp_util_send_rps_ind(pHddCtx);   goto success;err_reg_netdev:   unregister_netdevice_notifier(&hdd_netdev_notifier);err_unregister_pmops:   hddDevTmUnregisterNotifyCallback(pHddCtx);   hddDeregisterPmOps(pHddCtx);   hdd_debugfs_exit(pHddCtx);#ifdef WLAN_BTAMP_FEATUREerr_bap_stop:  WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_close_adapter:   hdd_close_all_adapters( pHddCtx );#ifdef CONFIG_ENABLE_LINUX_REGerr_unregister_wiphy:#endif   wiphy_unregister(wiphy) ;   hdd_wlan_free_wiphy_channels(wiphy);err_vosstop:   vos_stop(pVosContext);err_vosclose:   status = vos_sched_close( pVosContext );   if (!VOS_IS_STATUS_SUCCESS(status))    {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }   vos_close(pVosContext );err_nl_srv:#ifdef WLAN_KD_READY_NOTIFIER   nl_srv_exit(pHddCtx->ptt_pid);#else   nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */err_vos_nv_close:#ifdef CONFIG_ENABLE_LINUX_REG   vos_nv_close();#endiferr_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);err_config:   kfree(pHddCtx->cfg_ini);   pHddCtx->cfg_ini= NULL;err_free_hdd_context:   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   free_riva_power_on_lock("wlan");   wiphy_free(wiphy) ;   //kfree(wdev) ;   VOS_BUG(1);   if (hdd_is_ssr_required())   {       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }   hdd_set_ssr_required (VOS_FALSE);   return -EIO;success:   EXIT();   return 0;}
int
hdd_wlan_startup(struct device *dev )
hdd_wlan_startup
struct device *dev
struct device
device
*dev
*
dev
{   VOS_STATUS status;   hdd_adapter_t *pAdapter = NULL;   hdd_adapter_t *pP2pAdapter = NULL;   hdd_context_t *pHddCtx = NULL;   v_CONTEXT_t pVosContext= NULL;#ifdef WLAN_BTAMP_FEATURE   VOS_STATUS vStatus = VOS_STATUS_SUCCESS;   WLANBAP_ConfigType btAmpConfig;   hdd_config_t *pConfig;#endif   int ret;   struct wiphy *wiphy;   v_MACADDR_t mac_addr;   ENTER();   /*    * cfg80211: wiphy allocation    */   wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;   if(wiphy == NULL)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }   pHddCtx = wiphy_priv(wiphy);   //Initialize the adapter context to zeros.   vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));   pHddCtx->wiphy = wiphy;   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);   /* register for riva power on lock to platform driver    * Locking power early to ensure FW doesn't reset by kernel while    * host driver is busy initializing itself */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }   /*Get vos context here bcoz vos_open requires it*/   pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);   if(pVosContext == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }   //Save the Global VOSS context in adapter context for future.   pHddCtx->pvosContext = pVosContext;   //Save the adapter context in global context for future.   ((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;   pHddCtx->parent_dev = dev;   pHddCtx->con_scan_abort_cnt = 0;   init_completion(&pHddCtx->full_pwr_comp_var);   init_completion(&pHddCtx->standby_comp_var);   init_completion(&pHddCtx->req_bmps_comp_var);   init_completion(&pHddCtx->scan_info.scan_req_completion_event);   init_completion(&pHddCtx->scan_info.abortscan_event_var);   init_completion(&pHddCtx->wiphy_channel_update_event);   init_completion(&pHddCtx->ssr_comp_var);   init_completion(&pHddCtx->mc_sus_event_var);   init_completion(&pHddCtx->tx_sus_event_var);   init_completion(&pHddCtx->rx_sus_event_var);   hdd_init_ll_stats_ctx(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   init_completion(&pHddCtx->linux_reg_req);#else   init_completion(&pHddCtx->driver_crda_req);#endif#ifdef WLAN_FEATURE_EXTSCAN   init_completion(&pHddCtx->ext_scan_context.response_event);#endif /* WLAN_FEATURE_EXTSCAN */   spin_lock_init(&pHddCtx->schedScan_lock);   hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );   vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest);#ifdef FEATURE_WLAN_TDLS   /* tdls_lock is initialized before an hdd_open_adapter ( which is    * invoked by other instances also) to protect the concurrent    * access for the Adapters by TDLS module.    */   mutex_init(&pHddCtx->tdls_lock);#endif   mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);   mutex_init(&pHddCtx->wmmLock);   hdd_init_offloaded_packets_ctx(pHddCtx);   /* By default Strict Regulatory For FCC should be false */   pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;   // Load all config first as TL config is needed during vos_open   pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);   if(pHddCtx->cfg_ini == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }   vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));   // Read and parse the qcom_cfg.ini file   status = hdd_parse_config_ini( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }#ifdef MEMORY_DEBUG   if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)      vos_mem_init();   hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled);#endif   /* INI has been read, initialise the configuredMcastBcastFilter with    * INI value as this will serve as the default value    */   pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;   hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting);   if (false == hdd_is_5g_supported(pHddCtx))   {      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }   /* If SNR Monitoring is enabled, FW has to parse all beacons    * for calcaluting and storing the average SNR, so set Nth beacon    * filter to 1 to enable FW to parse all the beaocons    */   if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)   {      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }   /*    * cfg80211: Initialization  ...    */   if (VOS_FTM_MODE != hdd_get_conparam())   {      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }   // Update VOS trace levels based upon the cfg.ini   hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP);   hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL);   hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD);   hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME);   hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE);   hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC);   hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA);   hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS);   hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS);   hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);   // Update WDI trace levels based upon the cfg.ini   hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT);   hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL);   if (VOS_FTM_MODE == hdd_get_conparam())   {      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }   if( VOS_MONITOR_MODE == hdd_get_conparam())   {       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }   //Open watchdog module   if(pHddCtx->cfg_ini->fIsLogpEnabled)   {      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }   pHddCtx->isLogpInProgress = FALSE;   vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);#ifdef CONFIG_ENABLE_LINUX_REG   /* initialize the NV module. This is required so that      we can initialize the channel information in wiphy      from the NV.bin data. The channel information in      wiphy needs to be initialized before wiphy registration */   status = vos_nv_open();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,                "%s: vos_nv_open failed", __func__);       goto err_wdclose;   }   status = vos_init_wiphy_from_nv_bin();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,               "%s: vos_init_wiphy failed", __func__);       goto err_vos_nv_close;   }#endif   //Initialize the nlink service   if(nl_srv_init() != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }#ifdef WLAN_KD_READY_NOTIFIER   pHddCtx->kd_nl_init = 1;#endif /* WLAN_KD_READY_NOTIFIER */   vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);   status = vos_open( &pVosContext, pHddCtx->parent_dev);   if ( !VOS_IS_STATUS_SUCCESS( status ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }   status = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }   if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)   {      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }   if (0 == enable_11d || 1 == enable_11d)   {      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }   /* Note that the vos_preStart() sequence triggers the cfg download.      The cfg download must occur before we update the SME config      since the SME config operation must access the cfg database */   status = hdd_set_sme_config( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   // Apply the cfg.ini to cfg.dat   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   // Get mac addr from platform driver   ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);   if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))   {      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }   {      eHalStatus halStatus;      /* Set the MAC Address Currently this is used by HAL to       * add self sta. Remove this once self sta is added as       * part of session open.       */      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );      if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }   }   /*Start VOSS which starts up the SME/MAC/HAL modules and everything else     Note: Firmware image will be read and downloaded inside vos_start API */   status = vos_start( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }#ifdef FEATURE_WLAN_CH_AVOID    /* Plug in avoid channel notification callback     * This should happen before ADD_SELF_STA     * FW will send first IND with ADD_SELF_STA REQ from host */    /* check the Channel Avoidance is enabled */   if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)   {       sme_AddChAvoidCallback(pHddCtx->hHal,                              hdd_hostapd_ch_avoid_cb);   }#endif /* FEATURE_WLAN_CH_AVOID */   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   status = wlan_hdd_init_channels(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",             __func__);      goto err_vosstop;   }#endif   status = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifndef CONFIG_ENABLE_LINUX_REG   wlan_hdd_cfg80211_update_reg_info( wiphy );   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }#endif#ifdef CONFIG_ENABLE_LINUX_REG   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }   status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",             __func__);      goto err_unregister_wiphy;   }#endif   wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);   if (VOS_STA_SAP_MODE == hdd_get_conparam())   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }   else   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }   if( pAdapter == NULL )   {      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }   if (country_code)   {      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }#ifdef WLAN_BTAMP_FEATURE   vStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_close_adapter;   }   vStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   status = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE   /*    * UapsdMask is 0xf if U-APSD is enbaled for all AC's...    * The value of CFG_QOS_WMM_UAPSD_MASK_DEFAULT is 0xaa(Magic Value)    * which is greater than 0xf. So the below check is safe to make    * sure that there is no entry for UapsdMask in the ini    */   if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)   {       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }#ifdef WLAN_FEATURE_ROAM_SCAN_OFFLOAD   if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE))   {      hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__);      pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0;      sme_UpdateRoamScanOffloadEnabled((tHalHandle)(pHddCtx->hHal),                       pHddCtx->cfg_ini->isRoamOffloadScanEnabled);   }#endif   wlan_hdd_tdls_init(pHddCtx);   wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);   vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan);   sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);   /* Register with platform driver as client for Suspend/Resume */   status = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }   /* Open debugfs interface */   if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))   {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }   /* Register TM level change handler function to the platform */   status = hddDevTmRegisterNotifyCallback(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }   // register net device notifier for device change notification   ret = register_netdevice_notifier(&hdd_netdev_notifier);   if(ret < 0)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }   //Initialize the BTC service   if(btc_activate_service(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }#ifdef FEATURE_OEM_DATA_SUPPORT   //Initialize the OEM service   if (oem_activate_service(pHddCtx) != 0)   {       hddLog(VOS_TRACE_LEVEL_FATAL,              "%s: oem_activate_service failed", __func__);       goto err_reg_netdev;   }#endif#ifdef PTT_SOCK_SVC_ENABLE   //Initialize the PTT service   if(ptt_sock_activate_svc(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_FEATURE_RMC   if (hdd_open_cesium_nl_sock() < 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE   if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)   {       if(wlan_logging_sock_activate_svc(                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,                   pHddCtx->cfg_ini->wlanLoggingNumBuf,                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf))       {           hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"                   " failed", __func__);           goto err_reg_netdev;       }       //TODO: To Remove enableDhcpDebug and use gEnableDebugLog for       //EAPOL and DHCP       if (!pHddCtx->cfg_ini->gEnableDebugLog)           pHddCtx->cfg_ini->gEnableDebugLog =           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |           VOS_PKT_PROTO_TYPE_ARP;   }   if (pHddCtx->cfg_ini->wlanLoggingEnable &&               (pHddCtx->cfg_ini->enableFWLogging ||                pHddCtx->cfg_ini->enableMgmtLogging ||                pHddCtx->cfg_ini->enableContFWLogging ||                pHddCtx->cfg_ini->enableFwrMemDump )                )   {       hdd_init_frame_logging(pHddCtx);   }   else   {       hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini"));   }#endif   if (vos_is_multicast_logging())       wlan_logging_set_log_level();   hdd_register_mcast_bcast_filter(pHddCtx);   if (VOS_STA_SAP_MODE != hdd_get_conparam())   {      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }   mutex_init(&pHddCtx->sap_lock);   mutex_init(&pHddCtx->roc_lock);#ifdef WLAN_FEATURE_HOLD_RX_WAKELOCK   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->rx_wake_lock,           "qcom_rx_wakelock");#endif   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock");   vos_event_init(&pHddCtx->scan_info.scan_finished_event);   pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);#ifdef FEATURE_WLAN_SCAN_PNO   /*SME must send channel update configuration to RIVA*/   sme_UpdateChannelConfig(pHddCtx->hHal);#endif   /* Send the update default channel list to the FW*/   sme_UpdateChannelList(pHddCtx->hHal);   /* Fwr capabilities received, Set the Dot11 mode */   sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));   sme_SetDefDot11Mode(pHddCtx->hHal);#ifndef CONFIG_ENABLE_LINUX_REG   /*updating wiphy so that regulatory user hints can be processed*/   if (wiphy)   {       regulatory_hint(wiphy, "00");   }#endif   // Initialize the restart logic   wlan_hdd_restart_init(pHddCtx);   //Register the traffic monitor timer now   if ( pHddCtx->cfg_ini->dynSplitscan)   {       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }   wlan_hdd_cfg80211_nan_init(pHddCtx);   mutex_init(&pHddCtx->cur_rx_level_lock);   vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx);   vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);#ifdef WLAN_FEATURE_EXTSCAN    sme_EXTScanRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_extscan_callback,                           pHddCtx);#endif /* WLAN_FEATURE_EXTSCAN */#ifdef FEATURE_OEM_DATA_SUPPORT    sme_OemDataRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_oemdata_callback,                           pHddCtx);#endif /* FEATURE_OEM_DATA_SUPPORT */   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);#ifdef WLAN_NS_OFFLOAD   // Register IPv6 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed;   ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier"));   }#endif   // Register IPv4 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;   ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }   /*Fw mem dump procfs initialization*/   memdump_init();   hdd_dp_util_send_rps_ind(pHddCtx);   goto success;err_reg_netdev:   unregister_netdevice_notifier(&hdd_netdev_notifier);err_unregister_pmops:   hddDevTmUnregisterNotifyCallback(pHddCtx);   hddDeregisterPmOps(pHddCtx);   hdd_debugfs_exit(pHddCtx);#ifdef WLAN_BTAMP_FEATUREerr_bap_stop:  WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_close_adapter:   hdd_close_all_adapters( pHddCtx );#ifdef CONFIG_ENABLE_LINUX_REGerr_unregister_wiphy:#endif   wiphy_unregister(wiphy) ;   hdd_wlan_free_wiphy_channels(wiphy);err_vosstop:   vos_stop(pVosContext);err_vosclose:   status = vos_sched_close( pVosContext );   if (!VOS_IS_STATUS_SUCCESS(status))    {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }   vos_close(pVosContext );err_nl_srv:#ifdef WLAN_KD_READY_NOTIFIER   nl_srv_exit(pHddCtx->ptt_pid);#else   nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */err_vos_nv_close:#ifdef CONFIG_ENABLE_LINUX_REG   vos_nv_close();#endiferr_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);err_config:   kfree(pHddCtx->cfg_ini);   pHddCtx->cfg_ini= NULL;err_free_hdd_context:   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   free_riva_power_on_lock("wlan");   wiphy_free(wiphy) ;   //kfree(wdev) ;   VOS_BUG(1);   if (hdd_is_ssr_required())   {       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }   hdd_set_ssr_required (VOS_FALSE);   return -EIO;success:   EXIT();   return 0;}
VOS_STATUS status;
VOS_STATUS status;
VOS_STATUS
VOS_STATUS
status
status
hdd_adapter_t *pAdapter = NULL;
hdd_adapter_t *pAdapter = NULL;
hdd_adapter_t
hdd_adapter_t
*pAdapter = NULL
*
pAdapter
= NULL
NULL
NULL
hdd_adapter_t *pP2pAdapter = NULL;
hdd_adapter_t *pP2pAdapter = NULL;
hdd_adapter_t
hdd_adapter_t
*pP2pAdapter = NULL
*
pP2pAdapter
= NULL
NULL
NULL
hdd_context_t *pHddCtx = NULL;
hdd_context_t *pHddCtx = NULL;
hdd_context_t
hdd_context_t
*pHddCtx = NULL
*
pHddCtx
= NULL
NULL
NULL
v_CONTEXT_t pVosContext= NULL;
v_CONTEXT_t pVosContext= NULL;
v_CONTEXT_t
v_CONTEXT_t
pVosContext= NULL
pVosContext
= NULL
NULL
NULL
int ret;
int ret;
int
ret
ret
struct wiphy *wiphy;
struct wiphy *wiphy;
struct wiphy
wiphy
*wiphy
*
wiphy
v_MACADDR_t mac_addr;
v_MACADDR_t mac_addr;
v_MACADDR_t
v_MACADDR_t
mac_addr
mac_addr
ENTER();
ENTER()
ENTER
ENTER
wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;
wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t))
wiphy
wiphy
wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t))
wlan_hdd_cfg80211_wiphy_alloc
wlan_hdd_cfg80211_wiphy_alloc
sizeof(hdd_context_t)
hdd_context_t
hdd_context_t
hdd_context_t

if(wiphy == NULL)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }
wiphy == NULL
wiphy
wiphy
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: cfg80211 init failed"
__func__
__func__
return -EIO;
-EIO
EIO
EIO
pHddCtx = wiphy_priv(wiphy);
pHddCtx = wiphy_priv(wiphy)
pHddCtx
pHddCtx
wiphy_priv(wiphy)
wiphy_priv
wiphy_priv
wiphy
wiphy
vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));
vos_mem_zero(pHddCtx, sizeof( hdd_context_t ))
vos_mem_zero
vos_mem_zero
pHddCtx
pHddCtx
sizeof( hdd_context_t )
hdd_context_t
hdd_context_t
hdd_context_t

pHddCtx->wiphy = wiphy;
pHddCtx->wiphy = wiphy
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
wiphy
wiphy
hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_prevent_suspend
hdd_prevent_suspend
(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_LOAD_IN_PROGRESS
WLAN_HDD_LOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
TRUE
TRUE
if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }
req_riva_power_on_lock("wlan")
req_riva_power_on_lock
req_riva_power_on_lock
"wlan"
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: req riva power on lock failed"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);
pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
pVosContext
pVosContext
vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
vos_get_global_context
vos_get_global_context
VOS_MODULE_ID_SYS
VOS_MODULE_ID_SYS
NULL
NULL
if(pVosContext == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }
pVosContext == NULL
pVosContext
pVosContext
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed vos_get_global_context"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
pHddCtx->pvosContext = pVosContext;
pHddCtx->pvosContext = pVosContext
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
pVosContext
pVosContext
((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;
((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx
((VosContextType*)(pVosContext))->pHDDContext
((VosContextType*)(pVosContext))
(VosContextType*)(pVosContext)
VosContextType*
VosContextType
VosContextType
*
*
(pVosContext)
pVosContext
pVosContext
pHDDContext
(v_VOID_t*)pHddCtx
v_VOID_t*
v_VOID_t
v_VOID_t
*
*
pHddCtx
pHddCtx
pHddCtx->parent_dev = dev;
pHddCtx->parent_dev = dev
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
dev
dev
pHddCtx->con_scan_abort_cnt = 0;
pHddCtx->con_scan_abort_cnt = 0
pHddCtx->con_scan_abort_cnt
pHddCtx
pHddCtx
con_scan_abort_cnt
0
init_completion(&pHddCtx->full_pwr_comp_var);
init_completion(&pHddCtx->full_pwr_comp_var)
init_completion
init_completion
&pHddCtx->full_pwr_comp_var
pHddCtx->full_pwr_comp_var
pHddCtx
pHddCtx
full_pwr_comp_var
init_completion(&pHddCtx->standby_comp_var);
init_completion(&pHddCtx->standby_comp_var)
init_completion
init_completion
&pHddCtx->standby_comp_var
pHddCtx->standby_comp_var
pHddCtx
pHddCtx
standby_comp_var
init_completion(&pHddCtx->req_bmps_comp_var);
init_completion(&pHddCtx->req_bmps_comp_var)
init_completion
init_completion
&pHddCtx->req_bmps_comp_var
pHddCtx->req_bmps_comp_var
pHddCtx
pHddCtx
req_bmps_comp_var
init_completion(&pHddCtx->scan_info.scan_req_completion_event);
init_completion(&pHddCtx->scan_info.scan_req_completion_event)
init_completion
init_completion
&pHddCtx->scan_info.scan_req_completion_event
pHddCtx->scan_info.scan_req_completion_event
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
scan_req_completion_event
init_completion(&pHddCtx->scan_info.abortscan_event_var);
init_completion(&pHddCtx->scan_info.abortscan_event_var)
init_completion
init_completion
&pHddCtx->scan_info.abortscan_event_var
pHddCtx->scan_info.abortscan_event_var
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
abortscan_event_var
init_completion(&pHddCtx->wiphy_channel_update_event);
init_completion(&pHddCtx->wiphy_channel_update_event)
init_completion
init_completion
&pHddCtx->wiphy_channel_update_event
pHddCtx->wiphy_channel_update_event
pHddCtx
pHddCtx
wiphy_channel_update_event
init_completion(&pHddCtx->ssr_comp_var);
init_completion(&pHddCtx->ssr_comp_var)
init_completion
init_completion
&pHddCtx->ssr_comp_var
pHddCtx->ssr_comp_var
pHddCtx
pHddCtx
ssr_comp_var
init_completion(&pHddCtx->mc_sus_event_var);
init_completion(&pHddCtx->mc_sus_event_var)
init_completion
init_completion
&pHddCtx->mc_sus_event_var
pHddCtx->mc_sus_event_var
pHddCtx
pHddCtx
mc_sus_event_var
init_completion(&pHddCtx->tx_sus_event_var);
init_completion(&pHddCtx->tx_sus_event_var)
init_completion
init_completion
&pHddCtx->tx_sus_event_var
pHddCtx->tx_sus_event_var
pHddCtx
pHddCtx
tx_sus_event_var
init_completion(&pHddCtx->rx_sus_event_var);
init_completion(&pHddCtx->rx_sus_event_var)
init_completion
init_completion
&pHddCtx->rx_sus_event_var
pHddCtx->rx_sus_event_var
pHddCtx
pHddCtx
rx_sus_event_var
hdd_init_ll_stats_ctx(pHddCtx);
hdd_init_ll_stats_ctx(pHddCtx)
hdd_init_ll_stats_ctx
hdd_init_ll_stats_ctx
pHddCtx
pHddCtx
init_completion(&pHddCtx->driver_crda_req);
init_completion(&pHddCtx->driver_crda_req)
init_completion
init_completion
&pHddCtx->driver_crda_req
pHddCtx->driver_crda_req
pHddCtx
pHddCtx
driver_crda_req
spin_lock_init(&pHddCtx->schedScan_lock);
spin_lock_init(&pHddCtx->schedScan_lock)
spin_lock_init
spin_lock_init
&pHddCtx->schedScan_lock
pHddCtx->schedScan_lock
pHddCtx
pHddCtx
schedScan_lock
hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );
hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS )
hdd_list_init
hdd_list_init
&pHddCtx->hddAdapters
pHddCtx->hddAdapters
pHddCtx
pHddCtx
hddAdapters
MAX_NUMBER_OF_ADAPTERS
MAX_NUMBER_OF_ADAPTERS
vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest);
vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest)
vos_init_delayed_work
vos_init_delayed_work
&pHddCtx->spoof_mac_addr_work
pHddCtx->spoof_mac_addr_work
pHddCtx
pHddCtx
spoof_mac_addr_work
hdd_processSpoofMacAddrRequest
hdd_processSpoofMacAddrRequest
mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);
mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock)
mutex_init
mutex_init
&pHddCtx->spoofMacAddr.macSpoofingLock
pHddCtx->spoofMacAddr.macSpoofingLock
pHddCtx->spoofMacAddr
pHddCtx
pHddCtx
spoofMacAddr
macSpoofingLock
mutex_init(&pHddCtx->wmmLock);
mutex_init(&pHddCtx->wmmLock)
mutex_init
mutex_init
&pHddCtx->wmmLock
pHddCtx->wmmLock
pHddCtx
pHddCtx
wmmLock
hdd_init_offloaded_packets_ctx(pHddCtx);
hdd_init_offloaded_packets_ctx(pHddCtx)
hdd_init_offloaded_packets_ctx
hdd_init_offloaded_packets_ctx
pHddCtx
pHddCtx
pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;
pHddCtx->nEnableStrictRegulatoryForFCC = FALSE
pHddCtx->nEnableStrictRegulatoryForFCC
pHddCtx
pHddCtx
nEnableStrictRegulatoryForFCC
FALSE
FALSE
pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);
pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL)
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
(hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL)
hdd_config_t*
hdd_config_t
hdd_config_t
*
*
kmalloc(sizeof(hdd_config_t), GFP_KERNEL)
kmalloc
kmalloc
sizeof(hdd_config_t)
hdd_config_t
hdd_config_t
hdd_config_t

GFP_KERNEL
GFP_KERNEL
if(pHddCtx->cfg_ini == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }
pHddCtx->cfg_ini == NULL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed kmalloc hdd_config_t"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));
vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ))
vos_mem_zero
vos_mem_zero
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
sizeof( hdd_config_t )
hdd_config_t
hdd_config_t
hdd_config_t

status = hdd_parse_config_ini( pHddCtx );
status = hdd_parse_config_ini( pHddCtx )
status
status
hdd_parse_config_ini( pHddCtx )
hdd_parse_config_ini
hdd_parse_config_ini
pHddCtx
pHddCtx
if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }
VOS_STATUS_SUCCESS != status
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: error parsing %s"
__func__
__func__
WLAN_INI_FILE
WLAN_INI_FILE
goto err_config;
err_config
pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;
pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting
pHddCtx->configuredMcastBcastFilter
pHddCtx
pHddCtx
configuredMcastBcastFilter
pHddCtx->cfg_ini->mcastBcastFilterSetting
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
mcastBcastFilterSetting
hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting);
hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"Setting configuredMcastBcastFilter: %d"
pHddCtx->cfg_ini->mcastBcastFilterSetting
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
mcastBcastFilterSetting
if (false == hdd_is_5g_supported(pHddCtx))   {      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }
false == hdd_is_5g_supported(pHddCtx)
false
hdd_is_5g_supported(pHddCtx)
hdd_is_5g_supported
hdd_is_5g_supported
pHddCtx
pHddCtx
{      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }
if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }
1 != pHddCtx->cfg_ini->nBandCapability
1
pHddCtx->cfg_ini->nBandCapability
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
nBandCapability
{         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }
hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);
hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: Setting pHddCtx->cfg_ini->nBandCapability = 1"
__func__
__func__
pHddCtx->cfg_ini->nBandCapability = 1;
pHddCtx->cfg_ini->nBandCapability = 1
pHddCtx->cfg_ini->nBandCapability
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
nBandCapability
1
if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)   {      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }
1 == pHddCtx->cfg_ini->fEnableSNRMonitoring
1
pHddCtx->cfg_ini->fEnableSNRMonitoring
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
fEnableSNRMonitoring
{      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }
hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);
hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_WARN
VOS_TRACE_LEVEL_WARN
"%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1"
__func__
__func__
pHddCtx->cfg_ini->nthBeaconFilter = 1;
pHddCtx->cfg_ini->nthBeaconFilter = 1
pHddCtx->cfg_ini->nthBeaconFilter
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
nthBeaconFilter
1
if (VOS_FTM_MODE != hdd_get_conparam())   {      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }
VOS_FTM_MODE != hdd_get_conparam()
VOS_FTM_MODE
VOS_FTM_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }
if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }
0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
0
wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
wlan_hdd_cfg80211_init
wlan_hdd_cfg80211_init
dev
dev
wiphy
wiphy
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
{         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }
hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wlan_hdd_cfg80211_init return failure"
__func__
__func__
goto err_config;
err_config
hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP);
hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
pHddCtx->cfg_ini->vosTraceEnableBAP
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableBAP
hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL);
hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_TL
VOS_MODULE_ID_TL
pHddCtx->cfg_ini->vosTraceEnableTL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableTL
hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI);
hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_WDI
VOS_MODULE_ID_WDI
pHddCtx->cfg_ini->vosTraceEnableWDI
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableWDI
hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD);
hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
pHddCtx->cfg_ini->vosTraceEnableHDD
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableHDD
hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME);
hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_SME
VOS_MODULE_ID_SME
pHddCtx->cfg_ini->vosTraceEnableSME
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableSME
hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE);
hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_PE
VOS_MODULE_ID_PE
pHddCtx->cfg_ini->vosTraceEnablePE
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnablePE
hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC);
hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_PMC
VOS_MODULE_ID_PMC
pHddCtx->cfg_ini->vosTraceEnablePMC
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnablePMC
hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA);
hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_WDA
VOS_MODULE_ID_WDA
pHddCtx->cfg_ini->vosTraceEnableWDA
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableWDA
hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS);
hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_SYS
VOS_MODULE_ID_SYS
pHddCtx->cfg_ini->vosTraceEnableSYS
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableSYS
hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS);
hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
pHddCtx->cfg_ini->vosTraceEnableVOSS
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableVOSS
hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP);
hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_SAP
VOS_MODULE_ID_SAP
pHddCtx->cfg_ini->vosTraceEnableSAP
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableSAP
hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);
hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_HDD_SOFTAP
VOS_MODULE_ID_HDD_SOFTAP
pHddCtx->cfg_ini->vosTraceEnableHDDSAP
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableHDDSAP
hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL);
hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_DAL
eWLAN_MODULE_DAL
pHddCtx->cfg_ini->wdiTraceEnableDAL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnableDAL
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL);
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_DAL_CTRL
eWLAN_MODULE_DAL_CTRL
pHddCtx->cfg_ini->wdiTraceEnableCTL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnableCTL
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT);
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
pHddCtx->cfg_ini->wdiTraceEnableDAT
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnableDAT
hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL);
hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_PAL
eWLAN_MODULE_PAL
pHddCtx->cfg_ini->wdiTraceEnablePAL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnablePAL
if (VOS_FTM_MODE == hdd_get_conparam())   {      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }
VOS_FTM_MODE == hdd_get_conparam()
VOS_FTM_MODE
VOS_FTM_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }
if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }
VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
wlan_hdd_ftm_open(pHddCtx)
wlan_hdd_ftm_open
wlan_hdd_ftm_open
pHddCtx
pHddCtx
{          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wlan_hdd_ftm_open Failed"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: FTM driver loaded success fully"
__func__
__func__
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
if( VOS_MONITOR_MODE == hdd_get_conparam())   {       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }
VOS_MONITOR_MODE == hdd_get_conparam()
VOS_MONITOR_MODE
VOS_MONITOR_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }
if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }
VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
wlan_hdd_mon_open(pHddCtx)
wlan_hdd_mon_open
wlan_hdd_mon_open
pHddCtx
pHddCtx
{          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wlan_hdd_mon_open Failed"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Driver loaded in Monitor Mode"
__func__
__func__
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
if(pHddCtx->cfg_ini->fIsLogpEnabled)   {      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }
pHddCtx->cfg_ini->fIsLogpEnabled
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
fIsLogpEnabled
{      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }
status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));
status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext))
status
status
vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext))
vos_watchdog_open
vos_watchdog_open
pVosContext
pVosContext
&((VosContextType*)pVosContext)->vosWatchdog
((VosContextType*)pVosContext)->vosWatchdog
((VosContextType*)pVosContext)
(VosContextType*)pVosContext
VosContextType*
VosContextType
VosContextType
*
*
pVosContext
pVosContext
vosWatchdog
sizeof(VosWatchdogContext)
VosWatchdogContext
VosWatchdogContext
VosWatchdogContext

if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_watchdog_open failed"
__func__
__func__
goto err_wdclose;
err_wdclose
pHddCtx->isLogpInProgress = FALSE;
pHddCtx->isLogpInProgress = FALSE
pHddCtx->isLogpInProgress
pHddCtx
pHddCtx
isLogpInProgress
FALSE
FALSE
vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_logp_in_progress
vos_set_logp_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
if(nl_srv_init() != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }
nl_srv_init() != 0
nl_srv_init()
nl_srv_init
nl_srv_init
0
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: nl_srv_init failed"
__func__
__func__
goto err_vos_nv_close;
err_vos_nv_close
vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);
vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats)
vos_set_roam_delay_stats_enabled
vos_set_roam_delay_stats_enabled
pHddCtx->cfg_ini->gEnableRoamDelayStats
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
gEnableRoamDelayStats
status = vos_open( &pVosContext, pHddCtx->parent_dev);
status = vos_open( &pVosContext, pHddCtx->parent_dev)
status
status
vos_open( &pVosContext, pHddCtx->parent_dev)
vos_open
vos_open
&pVosContext
pVosContext
pVosContext
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
if ( !VOS_IS_STATUS_SUCCESS( status ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_open failed"
__func__
__func__
goto err_nl_srv;
err_nl_srv
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
(tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
tHalHandle
tHalHandle
tHalHandle

vos_get_context( VOS_MODULE_ID_SME, pVosContext )
vos_get_context
vos_get_context
VOS_MODULE_ID_SME
VOS_MODULE_ID_SME
pVosContext
pVosContext
if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }
NULL == pHddCtx->hHal
NULL
NULL
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: HAL context is null"
__func__
__func__
goto err_vosclose;
err_vosclose
status = vos_preStart( pHddCtx->pvosContext );
status = vos_preStart( pHddCtx->pvosContext )
status
status
vos_preStart( pHddCtx->pvosContext )
vos_preStart
vos_preStart
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_preStart failed"
__func__
__func__
goto err_vosclose;
err_vosclose
if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)   {      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }
0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan
0 == enable_dfs_chan_scan
0
enable_dfs_chan_scan
enable_dfs_chan_scan
1 == enable_dfs_chan_scan
1
enable_dfs_chan_scan
enable_dfs_chan_scan
{      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }
pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;
pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan
pHddCtx->cfg_ini->enableDFSChnlScan
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
enableDFSChnlScan
enable_dfs_chan_scan
enable_dfs_chan_scan
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: module enable_dfs_chan_scan set to %d"
__func__
__func__
enable_dfs_chan_scan
enable_dfs_chan_scan
if (0 == enable_11d || 1 == enable_11d)   {      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }
0 == enable_11d || 1 == enable_11d
0 == enable_11d
0
enable_11d
enable_11d
1 == enable_11d
1
enable_11d
enable_11d
{      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }
pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;
pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d
pHddCtx->cfg_ini->Is11dSupportEnabled
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
Is11dSupportEnabled
enable_11d
enable_11d
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: module enable_11d set to %d"
__func__
__func__
enable_11d
enable_11d
status = hdd_set_sme_config( pHddCtx );
status = hdd_set_sme_config( pHddCtx )
status
status
hdd_set_sme_config( pHddCtx )
hdd_set_sme_config
hdd_set_sme_config
pHddCtx
pHddCtx
if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }
VOS_STATUS_SUCCESS != status
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed hdd_set_sme_config"
__func__
__func__
goto err_vosclose;
err_vosclose
if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
FALSE == hdd_update_config_dat(pHddCtx)
FALSE
FALSE
hdd_update_config_dat(pHddCtx)
hdd_update_config_dat
hdd_update_config_dat
pHddCtx
pHddCtx
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: config update failed"
__func__
__func__
goto err_vosclose;
err_vosclose
ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);
ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes)
ret
ret
wcnss_get_wlan_mac_address((char*)&mac_addr.bytes)
wcnss_get_wlan_mac_address
wcnss_get_wlan_mac_address
(char*)&mac_addr.bytes
char*
char
*
*
&mac_addr.bytes
mac_addr.bytes
mac_addr
mac_addr
bytes
if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))   {      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }
(0 == ret) && (!vos_is_macaddr_zero(&mac_addr))
(0 == ret)
0 == ret
0
ret
ret
(!vos_is_macaddr_zero(&mac_addr))
!vos_is_macaddr_zero(&mac_addr)
vos_is_macaddr_zero(&mac_addr)
vos_is_macaddr_zero
vos_is_macaddr_zero
&mac_addr
mac_addr
mac_addr
{      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }
pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;
pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
mac_addr
mac_addr
hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }
0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
0
hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
hdd_generate_iface_mac_addr_auto
hdd_generate_iface_mac_addr_auto
pHddCtx
pHddCtx
1
mac_addr
mac_addr
{         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }
hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: Failed to generate wlan interface mac addr "                "using MAC from ini file "
__func__
__func__
if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }
VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
hdd_update_config_from_nv(pHddCtx)
hdd_update_config_from_nv
hdd_update_config_from_nv
pHddCtx
pHddCtx
{      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }
{         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }
hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
{      eHalStatus halStatus;      /* Set the MAC Address Currently this is used by HAL to       * add self sta. Remove this once self sta is added as       * part of session open.       */      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );      if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }   }
eHalStatus halStatus;
eHalStatus halStatus;
eHalStatus
eHalStatus
halStatus
halStatus
halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );
halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) )
halStatus
halStatus
cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) )
cfgSetStr
cfgSetStr
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
WNI_CFG_STA_ID
WNI_CFG_STA_ID
(v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0]
v_U8_t *
v_U8_t
v_U8_t
*
*
&pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
sizeof( pHddCtx->cfg_ini->intfMacAddr[0])
( pHddCtx->cfg_ini->intfMacAddr[0])
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }
!HAL_STATUS_SUCCESS( halStatus )
HAL_STATUS_SUCCESS( halStatus )
HAL_STATUS_SUCCESS
HAL_STATUS_SUCCESS
halStatus
halStatus
{         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus )
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]"
__func__
__func__
halStatus
halStatus
halStatus
halStatus
goto err_vosclose;
err_vosclose
status = vos_start( pHddCtx->pvosContext );
status = vos_start( pHddCtx->pvosContext )
status
status
vos_start( pHddCtx->pvosContext )
vos_start
vos_start
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_start failed"
__func__
__func__
if (isSsrPanicOnFailure())          VOS_BUG(0);
isSsrPanicOnFailure()
isSsrPanicOnFailure
isSsrPanicOnFailure
VOS_BUG(0);
VOS_BUG(0)
VOS_BUG
VOS_BUG
0
goto err_vosclose;
err_vosclose
hdd_exchange_version_and_caps(pHddCtx);
hdd_exchange_version_and_caps(pHddCtx)
hdd_exchange_version_and_caps
hdd_exchange_version_and_caps
pHddCtx
pHddCtx
status = hdd_post_voss_start_config( pHddCtx );
status = hdd_post_voss_start_config( pHddCtx )
status
status
hdd_post_voss_start_config( pHddCtx )
hdd_post_voss_start_config
hdd_post_voss_start_config
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hdd_post_voss_start_config failed"
__func__
__func__
goto err_vosstop;
err_vosstop
wlan_hdd_cfg80211_update_reg_info( wiphy );
wlan_hdd_cfg80211_update_reg_info( wiphy )
wlan_hdd_cfg80211_update_reg_info
wlan_hdd_cfg80211_update_reg_info
wiphy
wiphy
if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }
0 > wlan_hdd_cfg80211_register(wiphy)
0
wlan_hdd_cfg80211_register(wiphy)
wlan_hdd_cfg80211_register
wlan_hdd_cfg80211_register
wiphy
wiphy
{       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: wiphy register failed"
__func__
__func__
goto err_vosstop;
err_vosstop
wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);
wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx)
wcnss_wlan_set_drvdata
wcnss_wlan_set_drvdata
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
pHddCtx
pHddCtx
if (VOS_STA_SAP_MODE == hdd_get_conparam())   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }   else   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }
VOS_STA_SAP_MODE == hdd_get_conparam()
VOS_STA_SAP_MODE
VOS_STA_SAP_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
pAdapter
pAdapter
hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
hdd_open_adapter
hdd_open_adapter
pHddCtx
pHddCtx
WLAN_HDD_SOFTAP
WLAN_HDD_SOFTAP
"softap.%d"
wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr
wlan_hdd_get_intf_addr
pHddCtx
pHddCtx
FALSE
FALSE
{     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
pAdapter
pAdapter
hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
hdd_open_adapter
hdd_open_adapter
pHddCtx
pHddCtx
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
"wlan%d"
wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr
wlan_hdd_get_intf_addr
pHddCtx
pHddCtx
FALSE
FALSE
if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }
pAdapter != NULL
pAdapter
pAdapter
NULL
NULL
{         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }
if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }
pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
isP2pDeviceAddrAdministrated
!(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02
pHddCtx->cfg_ini->intfMacAddr[0].bytes[0]
pHddCtx->cfg_ini->intfMacAddr[0].bytes
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
bytes
0
0x02
{               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }
vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));
vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr))
vos_mem_copy
vos_mem_copy
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
pHddCtx->cfg_ini->intfMacAddr[0].bytes
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
bytes
sizeof(tSirMacAddr)
tSirMacAddr
tSirMacAddr
tSirMacAddr

pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;
pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02
pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
0
0x02
{             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }
tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);
tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);
tANI_U8
tANI_U8
* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx)
*
p2p_dev_addr
= wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr
wlan_hdd_get_intf_addr
pHddCtx
pHddCtx
if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }
p2p_dev_addr != NULL
p2p_dev_addr
p2p_dev_addr
NULL
NULL
{                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }
vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);
vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE)
vos_mem_copy
vos_mem_copy
&pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
0
p2p_dev_addr
p2p_dev_addr
VOS_MAC_ADDR_SIZE
VOS_MAC_ADDR_SIZE
{                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }
hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed to allocate mac_address for p2p_device"
__func__
__func__
goto err_close_adapter;
err_close_adapter
pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );
pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
pP2pAdapter
pP2pAdapter
hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
hdd_open_adapter
hdd_open_adapter
pHddCtx
pHddCtx
WLAN_HDD_P2P_DEVICE
WLAN_HDD_P2P_DEVICE
"p2p%d"
&pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
0
FALSE
FALSE
if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }
NULL == pP2pAdapter
NULL
NULL
pP2pAdapter
pP2pAdapter
{             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }
hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed to do hdd_open_adapter for P2P Device Interface"
__func__
__func__
goto err_close_adapter;
err_close_adapter
if( pAdapter == NULL )   {      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }
pAdapter == NULL
pAdapter
pAdapter
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }
hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: hdd_open_adapter failed"
__func__
__func__
goto err_close_adapter;
err_close_adapter
if (country_code)   {      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }
country_code
country_code
{      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }
eHalStatus ret;
eHalStatus ret;
eHalStatus
eHalStatus
ret
ret
INIT_COMPLETION(pAdapter->change_country_code);
INIT_COMPLETION(pAdapter->change_country_code)
INIT_COMPLETION
INIT_COMPLETION
pAdapter->change_country_code
pAdapter
pAdapter
change_country_code
hdd_checkandupdate_dfssetting(pAdapter, country_code);
hdd_checkandupdate_dfssetting(pAdapter, country_code)
hdd_checkandupdate_dfssetting
hdd_checkandupdate_dfssetting
pAdapter
pAdapter
country_code
country_code
hdd_checkandupdate_phymode(pAdapter, country_code);
hdd_checkandupdate_phymode(pAdapter, country_code)
hdd_checkandupdate_phymode
hdd_checkandupdate_phymode
pAdapter
pAdapter
country_code
country_code
ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);
ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE)
ret
ret
sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE)
sme_ChangeCountryCode
sme_ChangeCountryCode
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
(void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback
void *
void
*
*
(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback
tSmeChangeCountryCallback
tSmeChangeCountryCallback
tSmeChangeCountryCallback

wlan_hdd_change_country_code_callback
wlan_hdd_change_country_code_callback
country_code
country_code
pAdapter
pAdapter
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
eSIR_TRUE
eSIR_TRUE
eSIR_TRUE
eSIR_TRUE
if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }
eHAL_STATUS_SUCCESS == ret
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
ret
ret
{         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }
ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));
ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY))
ret
ret
wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY))
wait_for_completion_interruptible_timeout
wait_for_completion_interruptible_timeout
&pAdapter->change_country_code
pAdapter->change_country_code
pAdapter
pAdapter
change_country_code
msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
msecs_to_jiffies
msecs_to_jiffies
WLAN_WAIT_TIME_COUNTRY
WLAN_WAIT_TIME_COUNTRY
if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }
0 >= ret
0
ret
ret
{            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: SME while setting country code timed out"
__func__
__func__
{         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: SME Change Country code from module param fail ret=%d"
__func__
__func__
ret
ret
if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)   {       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }
CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask
CFG_QOS_WMM_UAPSD_MASK_DEFAULT
CFG_QOS_WMM_UAPSD_MASK_DEFAULT
pHddCtx->cfg_ini->UapsdMask
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
UapsdMask
{       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }
if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }
IS_DYNAMIC_WMM_PS_ENABLED
IS_DYNAMIC_WMM_PS_ENABLED
{           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_DEBUG
VOS_TRACE_LEVEL_DEBUG
"%s: Enable UAPSD for VI & VO"
__func__
__func__
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT
pHddCtx->cfg_ini->UapsdMask
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
UapsdMask
CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT
CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT
{           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_DEBUG
VOS_TRACE_LEVEL_DEBUG
"%s: Do not enable UAPSD"
__func__
__func__
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT
pHddCtx->cfg_ini->UapsdMask
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
UapsdMask
CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT
CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT
wlan_hdd_tdls_init(pHddCtx);
wlan_hdd_tdls_init(pHddCtx)
wlan_hdd_tdls_init
wlan_hdd_tdls_init
pHddCtx
pHddCtx
wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);
wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt)
wlan_hdd_init_deinit_defer_scan_context
wlan_hdd_init_deinit_defer_scan_context
&pHddCtx->scan_ctxt
pHddCtx->scan_ctxt
pHddCtx
pHddCtx
scan_ctxt
vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan);
vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan)
vos_init_delayed_work
vos_init_delayed_work
&pHddCtx->scan_ctxt.scan_work
pHddCtx->scan_ctxt.scan_work
pHddCtx->scan_ctxt
pHddCtx
pHddCtx
scan_ctxt
scan_work
wlan_hdd_schedule_defer_scan
wlan_hdd_schedule_defer_scan
sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);
sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done)
sme_Register11dScanDoneCallback
sme_Register11dScanDoneCallback
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
hdd_11d_scan_done
hdd_11d_scan_done
status = hddRegisterPmOps(pHddCtx);
status = hddRegisterPmOps(pHddCtx)
status
status
hddRegisterPmOps(pHddCtx)
hddRegisterPmOps
hddRegisterPmOps
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hddRegisterPmOps failed"
__func__
__func__
goto err_close_adapter;
err_close_adapter
if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))   {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }
VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
hdd_debugfs_init(pAdapter)
hdd_debugfs_init
hdd_debugfs_init
pAdapter
pAdapter
{      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: hdd_debugfs_init failed!"
__func__
__func__
status = hddDevTmRegisterNotifyCallback(pHddCtx);
status = hddDevTmRegisterNotifyCallback(pHddCtx)
status
status
hddDevTmRegisterNotifyCallback(pHddCtx)
hddDevTmRegisterNotifyCallback
hddDevTmRegisterNotifyCallback
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hddDevTmRegisterNotifyCallback failed"
__func__
__func__
goto err_unregister_pmops;
err_unregister_pmops
ret = register_netdevice_notifier(&hdd_netdev_notifier);
ret = register_netdevice_notifier(&hdd_netdev_notifier)
ret
ret
register_netdevice_notifier(&hdd_netdev_notifier)
register_netdevice_notifier
register_netdevice_notifier
&hdd_netdev_notifier
hdd_netdev_notifier
hdd_netdev_notifier
if(ret < 0)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }
ret < 0
ret
ret
0
{      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: register_netdevice_notifier failed"
__func__
__func__
goto err_unregister_pmops;
err_unregister_pmops
if(btc_activate_service(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }
btc_activate_service(pHddCtx) != 0
btc_activate_service(pHddCtx)
btc_activate_service
btc_activate_service
pHddCtx
pHddCtx
0
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: btc_activate_service failed"
__func__
__func__
goto err_reg_netdev;
err_reg_netdev
if (vos_is_multicast_logging())       wlan_logging_set_log_level();
vos_is_multicast_logging()
vos_is_multicast_logging
vos_is_multicast_logging
wlan_logging_set_log_level();
wlan_logging_set_log_level()
wlan_logging_set_log_level
wlan_logging_set_log_level
hdd_register_mcast_bcast_filter(pHddCtx);
hdd_register_mcast_bcast_filter(pHddCtx)
hdd_register_mcast_bcast_filter
hdd_register_mcast_bcast_filter
pHddCtx
pHddCtx
if (VOS_STA_SAP_MODE != hdd_get_conparam())   {      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }
VOS_STA_SAP_MODE != hdd_get_conparam()
VOS_STA_SAP_MODE
VOS_STA_SAP_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }
wlan_hdd_cfg80211_register_frames(pAdapter);
wlan_hdd_cfg80211_register_frames(pAdapter)
wlan_hdd_cfg80211_register_frames
wlan_hdd_cfg80211_register_frames
pAdapter
pAdapter
mutex_init(&pHddCtx->sap_lock);
mutex_init(&pHddCtx->sap_lock)
mutex_init
mutex_init
&pHddCtx->sap_lock
pHddCtx->sap_lock
pHddCtx
pHddCtx
sap_lock
mutex_init(&pHddCtx->roc_lock);
mutex_init(&pHddCtx->roc_lock)
mutex_init
mutex_init
&pHddCtx->roc_lock
pHddCtx->roc_lock
pHddCtx
pHddCtx
roc_lock
vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock");
vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock")
vos_wake_lock_init
vos_wake_lock_init
&pHddCtx->sap_wake_lock
pHddCtx->sap_wake_lock
pHddCtx
pHddCtx
sap_wake_lock
"qcom_sap_wakelock"
vos_event_init(&pHddCtx->scan_info.scan_finished_event);
vos_event_init(&pHddCtx->scan_info.scan_finished_event)
vos_event_init
vos_event_init
&pHddCtx->scan_info.scan_finished_event
pHddCtx->scan_info.scan_finished_event
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
scan_finished_event
pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;
pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP
pHddCtx->scan_info.scan_pending_option
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
scan_pending_option
WEXT_SCAN_PENDING_GIVEUP
WEXT_SCAN_PENDING_GIVEUP
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
hdd_allow_suspend
hdd_allow_suspend
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
sme_UpdateChannelList(pHddCtx->hHal);
sme_UpdateChannelList(pHddCtx->hHal)
sme_UpdateChannelList
sme_UpdateChannelList
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));
sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode))
sme_SetPhyMode
sme_SetPhyMode
WLAN_HDD_GET_HAL_CTX(pAdapter)
WLAN_HDD_GET_HAL_CTX
WLAN_HDD_GET_HAL_CTX
pAdapter
pAdapter
hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode)
hdd_cfg_xlate_to_csr_phy_mode
hdd_cfg_xlate_to_csr_phy_mode
pHddCtx->cfg_ini->dot11Mode
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
dot11Mode
sme_SetDefDot11Mode(pHddCtx->hHal);
sme_SetDefDot11Mode(pHddCtx->hHal)
sme_SetDefDot11Mode
sme_SetDefDot11Mode
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
if (wiphy)   {       regulatory_hint(wiphy, "00");   }
wiphy
wiphy
{       regulatory_hint(wiphy, "00");   }
regulatory_hint(wiphy, "00");
regulatory_hint(wiphy, "00")
regulatory_hint
regulatory_hint
wiphy
wiphy
"00"
wlan_hdd_restart_init(pHddCtx);
wlan_hdd_restart_init(pHddCtx)
wlan_hdd_restart_init
wlan_hdd_restart_init
pHddCtx
pHddCtx
if ( pHddCtx->cfg_ini->dynSplitscan)   {       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }
pHddCtx->cfg_ini->dynSplitscan
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
dynSplitscan
{       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }
vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);
vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx)
vos_timer_init
vos_timer_init
&pHddCtx->tx_rx_trafficTmr
pHddCtx->tx_rx_trafficTmr
pHddCtx
pHddCtx
tx_rx_trafficTmr
VOS_TIMER_TYPE_SW
VOS_TIMER_TYPE_SW
hdd_tx_rx_pkt_cnt_stat_timer_handler
hdd_tx_rx_pkt_cnt_stat_timer_handler
(void *)pHddCtx
void *
void
*
*
pHddCtx
pHddCtx
wlan_hdd_cfg80211_nan_init(pHddCtx);
wlan_hdd_cfg80211_nan_init(pHddCtx)
wlan_hdd_cfg80211_nan_init
wlan_hdd_cfg80211_nan_init
pHddCtx
pHddCtx
mutex_init(&pHddCtx->cur_rx_level_lock);
mutex_init(&pHddCtx->cur_rx_level_lock)
mutex_init
mutex_init
&pHddCtx->cur_rx_level_lock
pHddCtx->cur_rx_level_lock
pHddCtx
pHddCtx
cur_rx_level_lock
vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx);
vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx)
vos_timer_init
vos_timer_init
&pHddCtx->delack_timer
pHddCtx->delack_timer
pHddCtx
pHddCtx
delack_timer
VOS_TIMER_TYPE_SW
VOS_TIMER_TYPE_SW
hdd_tcp_delack_compute_function
hdd_tcp_delack_compute_function
(void *)pHddCtx
void *
void
*
*
pHddCtx
pHddCtx
vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);
vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx)
vos_timer_init
vos_timer_init
&pHddCtx->tdls_source_timer
pHddCtx->tdls_source_timer
pHddCtx
pHddCtx
tdls_source_timer
VOS_TIMER_TYPE_SW
VOS_TIMER_TYPE_SW
wlan_hdd_change_tdls_mode
wlan_hdd_change_tdls_mode
(void *)pHddCtx
void *
void
*
*
pHddCtx
pHddCtx
sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);
sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb)
sme_set_rssi_threshold_breached_cb
sme_set_rssi_threshold_breached_cb
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
hdd_rssi_threshold_breached_cb
hdd_rssi_threshold_breached_cb
pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;
pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed
pHddCtx->ipv4_notifier.notifier_call
pHddCtx->ipv4_notifier
pHddCtx
pHddCtx
ipv4_notifier
notifier_call
wlan_hdd_ipv4_changed
wlan_hdd_ipv4_changed
ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);
ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
ret
ret
register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
register_inetaddr_notifier
register_inetaddr_notifier
&pHddCtx->ipv4_notifier
pHddCtx->ipv4_notifier
pHddCtx
pHddCtx
ipv4_notifier
if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }
ret
ret
{      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }
hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));
hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"))
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
FL("Failed to register IPv4 notifier")
FL
FL
"Failed to register IPv4 notifier"
{      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }
hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));
hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"))
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
FL("Registered IPv4 notifier")
FL
FL
"Registered IPv4 notifier"
memdump_init();
memdump_init()
memdump_init
memdump_init
hdd_dp_util_send_rps_ind(pHddCtx);
hdd_dp_util_send_rps_ind(pHddCtx)
hdd_dp_util_send_rps_ind
hdd_dp_util_send_rps_ind
pHddCtx
pHddCtx
goto success;
success
err_reg_netdev:   unregister_netdevice_notifier(&hdd_netdev_notifier);
err_reg_netdev
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier
unregister_netdevice_notifier
(&hdd_netdev_notifier)
&hdd_netdev_notifier
&
hdd_netdev_notifier
err_unregister_pmops:   hddDevTmUnregisterNotifyCallback(pHddCtx);
err_unregister_pmops
hddDevTmUnregisterNotifyCallback(pHddCtx);
hddDevTmUnregisterNotifyCallback(pHddCtx)
hddDevTmUnregisterNotifyCallback
hddDevTmUnregisterNotifyCallback
pHddCtx
pHddCtx
hddDeregisterPmOps(pHddCtx);
hddDeregisterPmOps(pHddCtx)
hddDeregisterPmOps
hddDeregisterPmOps
pHddCtx
pHddCtx
hdd_debugfs_exit(pHddCtx);
hdd_debugfs_exit(pHddCtx)
hdd_debugfs_exit
hdd_debugfs_exit
pHddCtx
pHddCtx
err_close_adapter:   hdd_close_all_adapters( pHddCtx );
err_close_adapter
hdd_close_all_adapters( pHddCtx );
hdd_close_all_adapters( pHddCtx )
hdd_close_all_adapters
hdd_close_all_adapters
pHddCtx
pHddCtx
wiphy_unregister(wiphy) ;
wiphy_unregister(wiphy)
wiphy_unregister
wiphy_unregister
wiphy
wiphy
hdd_wlan_free_wiphy_channels(wiphy);
hdd_wlan_free_wiphy_channels(wiphy)
hdd_wlan_free_wiphy_channels
hdd_wlan_free_wiphy_channels
wiphy
wiphy
err_vosstop:   vos_stop(pVosContext);
err_vosstop
vos_stop(pVosContext);
vos_stop(pVosContext)
vos_stop
vos_stop
pVosContext
pVosContext
err_vosclose:   status = vos_sched_close( pVosContext );
err_vosclose
status = vos_sched_close( pVosContext );
status = vos_sched_close( pVosContext )
status
status
vos_sched_close( pVosContext )
vos_sched_close
vos_sched_close
pVosContext
pVosContext
if (!VOS_IS_STATUS_SUCCESS(status))    {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }
!VOS_IS_STATUS_SUCCESS(status)
VOS_IS_STATUS_SUCCESS(status)
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed to close VOSS Scheduler"
__func__
__func__
VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );
VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) )
VOS_ASSERT
VOS_ASSERT
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
vos_close(pVosContext );
vos_close(pVosContext )
vos_close
vos_close
pVosContext
pVosContext
err_nl_srv:#ifdef WLAN_KD_READY_NOTIFIER   nl_srv_exit(pHddCtx->ptt_pid);#else   nl_srv_exit();
err_nl_srv
nl_srv_exit();
nl_srv_exit()
nl_srv_exit
nl_srv_exit
err_vos_nv_close:#ifdef CONFIG_ENABLE_LINUX_REG   vos_nv_close();#endiferr_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);
err_vos_nv_close
err_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);
err_wdclose
if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);
pHddCtx->cfg_ini->fIsLogpEnabled
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
fIsLogpEnabled
vos_watchdog_close(pVosContext);
vos_watchdog_close(pVosContext)
vos_watchdog_close
vos_watchdog_close
pVosContext
pVosContext
err_config:   kfree(pHddCtx->cfg_ini);
err_config
kfree(pHddCtx->cfg_ini);
kfree(pHddCtx->cfg_ini)
kfree
kfree
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
pHddCtx->cfg_ini= NULL;
pHddCtx->cfg_ini= NULL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
NULL
NULL
err_free_hdd_context:   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
err_free_hdd_context
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
hdd_allow_suspend
hdd_allow_suspend
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
free_riva_power_on_lock("wlan");
free_riva_power_on_lock("wlan")
free_riva_power_on_lock
free_riva_power_on_lock
"wlan"
wiphy_free(wiphy) ;
wiphy_free(wiphy)
wiphy_free
wiphy_free
wiphy
wiphy
VOS_BUG(1);
VOS_BUG(1)
VOS_BUG
VOS_BUG
1
if (hdd_is_ssr_required())   {       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }
hdd_is_ssr_required()
hdd_is_ssr_required
hdd_is_ssr_required
{       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }
subsystem_restart("wcnss");
subsystem_restart("wcnss")
subsystem_restart
subsystem_restart
"wcnss"
msleep(5000);
msleep(5000)
msleep
msleep
5000
hdd_set_ssr_required (VOS_FALSE);
hdd_set_ssr_required (VOS_FALSE);
hdd_set_ssr_required
hdd_set_ssr_required
(VOS_FALSE)
VOS_FALSE
VOS_FALSE
return -EIO;
-EIO
EIO
EIO
success:   EXIT();
success
EXIT();
EXIT()
EXIT
EXIT
return 0;
0
-----joern-----
(665,983,0)
(1617,859,0)
(1359,1251,0)
(0,299,0)
(1702,1324,0)
(297,506,0)
(857,901,0)
(1525,1772,0)
(1310,432,0)
(1340,1714,0)
(1117,689,0)
(40,689,0)
(1157,971,0)
(1187,840,0)
(996,1576,0)
(1553,347,0)
(111,689,0)
(1665,1328,0)
(558,324,0)
(1526,1618,0)
(1423,1046,0)
(397,421,0)
(899,357,0)
(546,646,0)
(77,309,0)
(591,850,0)
(1406,1498,0)
(29,1320,0)
(35,464,0)
(1333,859,0)
(1497,333,0)
(1575,1324,0)
(1189,52,0)
(1780,831,0)
(831,468,0)
(667,1304,0)
(1214,1321,0)
(1696,689,0)
(680,169,0)
(37,52,0)
(367,52,0)
(955,522,0)
(1525,997,0)
(1772,1525,0)
(687,1175,0)
(629,733,0)
(1609,107,0)
(1339,1042,0)
(903,739,0)
(1113,1295,0)
(586,52,0)
(1451,221,0)
(224,983,0)
(770,1572,0)
(1424,1649,0)
(1484,1430,0)
(368,1132,0)
(1515,689,0)
(1702,484,0)
(737,439,0)
(881,429,0)
(1063,1155,0)
(515,1771,0)
(377,1282,0)
(495,877,0)
(1564,499,0)
(341,165,0)
(1312,903,0)
(472,1647,0)
(1739,1759,0)
(183,1148,0)
(1020,79,0)
(556,1273,0)
(1515,1448,0)
(822,1657,0)
(455,1378,0)
(941,289,0)
(1786,219,0)
(1115,1102,0)
(1781,1465,0)
(309,77,0)
(760,896,0)
(968,859,0)
(138,1239,0)
(1258,1310,0)
(1559,1044,0)
(946,1013,0)
(1345,1635,0)
(1044,859,0)
(1028,429,0)
(670,657,0)
(1591,1097,0)
(1051,303,0)
(335,1360,0)
(632,684,0)
(160,924,0)
(1213,661,0)
(170,820,0)
(356,1197,0)
(880,1491,0)
(1488,333,0)
(1782,1761,0)
(887,16,0)
(557,38,0)
(181,1224,0)
(658,1239,0)
(150,579,0)
(1005,1737,0)
(829,25,0)
(1359,689,0)
(1235,1666,0)
(119,1723,0)
(758,689,0)
(281,1090,0)
(903,1083,0)
(1779,206,0)
(1358,859,0)
(685,1518,0)
(869,689,0)
(339,1600,0)
(211,783,0)
(1549,661,0)
(1590,900,0)
(1271,249,0)
(1784,846,0)
(571,864,0)
(1481,7,0)
(1374,1078,0)
(1404,1103,0)
(260,807,0)
(1525,1783,0)
(1730,689,0)
(736,689,0)
(1794,859,0)
(691,432,0)
(822,1570,0)
(1004,439,0)
(562,968,0)
(1043,68,0)
(973,1526,0)
(1285,689,0)
(1600,221,0)
(54,22,0)
(1202,619,0)
(214,744,0)
(1231,968,0)
(640,694,0)
(242,449,0)
(890,715,0)
(1660,1148,0)
(1197,1188,0)
(1192,1132,0)
(1418,119,0)
(1433,689,0)
(1085,689,0)
(147,1572,0)
(713,530,0)
(226,401,0)
(1665,1612,0)
(1097,228,0)
(678,900,0)
(943,318,0)
(1649,52,0)
(822,421,0)
(384,197,0)
(641,794,0)
(372,384,0)
(662,1720,0)
(1419,689,0)
(1138,260,0)
(421,859,0)
(373,380,0)
(1412,859,0)
(1544,689,0)
(983,264,0)
(1227,959,0)
(3,92,0)
(1112,709,0)
(1580,698,0)
(779,1117,0)
(742,761,0)
(643,1181,0)
(78,1618,0)
(27,1588,0)
(582,1415,0)
(768,142,0)
(664,803,0)
(919,689,0)
(866,621,0)
(1392,53,0)
(378,1241,0)
(1393,678,0)
(149,689,0)
(1312,859,0)
(124,1612,0)
(1331,1489,0)
(1645,289,0)
(1614,422,0)
(688,522,0)
(931,464,0)
(1054,689,0)
(334,270,0)
(1771,975,0)
(972,1771,0)
(836,264,0)
(503,766,0)
(1444,268,0)
(133,527,0)
(818,1097,0)
(1389,1248,0)
(1324,1783,0)
(1055,1632,0)
(262,16,0)
(187,1040,0)
(99,1660,0)
(1140,1739,0)
(877,495,0)
(1720,1221,0)
(1286,694,0)
(232,1076,0)
(1018,29,0)
(1311,926,0)
(355,185,0)
(1495,52,0)
(1531,1253,0)
(1310,1258,0)
(985,264,0)
(500,689,0)
(1104,303,0)
(1679,1285,0)
(1204,1599,0)
(1369,1472,0)
(1337,609,0)
(410,52,0)
(251,859,0)
(1724,689,0)
(1520,1675,0)
(1767,791,0)
(994,1520,0)
(372,524,0)
(1347,223,0)
(206,689,0)
(1300,859,0)
(797,1618,0)
(176,1281,0)
(323,1692,0)
(87,1027,0)
(251,983,0)
(1743,689,0)
(1260,132,0)
(1328,300,0)
(258,740,0)
(1078,859,0)
(446,787,0)
(593,874,0)
(1303,859,0)
(68,689,0)
(1188,1197,0)
(876,1143,0)
(360,1122,0)
(128,1220,0)
(1615,1012,0)
(1448,689,0)
(614,859,0)
(990,689,0)
(484,535,0)
(749,52,0)
(622,1354,0)
(323,279,0)
(116,716,0)
(275,1067,0)
(1577,1002,0)
(698,345,0)
(492,1686,0)
(234,1165,0)
(353,948,0)
(569,41,0)
(1143,52,0)
(767,749,0)
(727,130,0)
(1126,307,0)
(1674,640,0)
(59,859,0)
(11,862,0)
(822,416,0)
(747,859,0)
(1062,124,0)
(296,859,0)
(268,1444,0)
(1082,482,0)
(642,1584,0)
(573,1604,0)
(637,924,0)
(1189,859,0)
(647,689,0)
(539,49,0)
(21,1804,0)
(173,579,0)
(1676,1788,0)
(233,1618,0)
(992,4,0)
(1296,1561,0)
(698,963,0)
(1089,859,0)
(192,689,0)
(677,689,0)
(398,1300,0)
(1238,259,0)
(1681,877,0)
(1143,859,0)
(142,689,0)
(159,4,0)
(1245,1188,0)
(1527,1068,0)
(56,109,0)
(1714,1340,0)
(230,268,0)
(1069,1100,0)
(1264,1227,0)
(1798,1514,0)
(1734,1699,0)
(1319,1189,0)
(1659,324,0)
(1444,1607,0)
(1409,1425,0)
(779,1358,0)
(1624,25,0)
(965,1539,0)
(324,689,0)
(173,1017,0)
(559,1570,0)
(753,1795,0)
(107,52,0)
(428,410,0)
(823,440,0)
(124,859,0)
(1328,1665,0)
(1589,406,0)
(237,926,0)
(49,52,0)
(593,689,0)
(480,1458,0)
(168,1737,0)
(1653,107,0)
(1019,579,0)
(565,511,0)
(1735,1194,0)
(917,270,0)
(491,1327,0)
(384,1199,0)
(505,826,0)
(1083,689,0)
(1454,1427,0)
(1739,859,0)
(1182,1146,0)
(22,859,0)
(15,528,0)
(1799,1677,0)
(1355,1684,0)
(1791,1425,0)
(585,284,0)
(707,4,0)
(101,689,0)
(563,1416,0)
(783,543,0)
(822,1418,0)
(1542,1592,0)
(543,734,0)
(450,840,0)
(1641,689,0)
(1689,1224,0)
(1697,689,0)
(1283,747,0)
(1388,123,0)
(701,908,0)
(1561,834,0)
(1635,1500,0)
(1184,237,0)
(174,1324,0)
(1226,1199,0)
(452,689,0)
(136,817,0)
(151,740,0)
(1124,1440,0)
(364,689,0)
(190,351,0)
(313,689,0)
(1673,689,0)
(1772,173,0)
(543,955,0)
(468,831,0)
(961,835,0)
(1371,1513,0)
(952,1221,0)
(1065,1236,0)
(525,22,0)
(321,180,0)
(644,1611,0)
(1805,983,0)
(4,707,0)
(974,1126,0)
(442,1151,0)
(1011,1392,0)
(604,879,0)
(57,463,0)
(1453,689,0)
(505,1359,0)
(983,251,0)
(695,1136,0)
(1749,1188,0)
(1467,233,0)
(298,1170,0)
(1530,267,0)
(982,689,0)
(1458,52,0)
(19,1759,0)
(432,1310,0)
(1150,376,0)
(331,342,0)
(1225,1465,0)
(1226,264,0)
(815,859,0)
(1273,556,0)
(1416,689,0)
(1658,645,0)
(350,689,0)
(460,689,0)
(1197,1458,0)
(1736,222,0)
(62,871,0)
(307,1126,0)
(1754,37,0)
(115,1150,0)
(182,330,0)
(1308,1617,0)
(367,817,0)
(227,38,0)
(1793,689,0)
(95,15,0)
(1571,797,0)
(1391,585,0)
(1022,689,0)
(900,1759,0)
(522,955,0)
(1109,514,0)
(346,865,0)
(381,1526,0)
(1040,859,0)
(75,1130,0)
(558,1464,0)
(1806,38,0)
(1768,279,0)
(1346,1293,0)
(1251,324,0)
(65,1448,0)
(469,324,0)
(1762,746,0)
(474,854,0)
(402,437,0)
(1075,1660,0)
(274,1242,0)
(1131,324,0)
(962,1548,0)
(789,713,0)
(984,1279,0)
(177,957,0)
(487,1781,0)
(1030,249,0)
(793,1187,0)
(1528,689,0)
(195,594,0)
(668,1154,0)
(276,689,0)
(790,1251,0)
(1220,1029,0)
(1035,581,0)
(874,1122,0)
(156,1668,0)
(1804,21,0)
(543,260,0)
(485,689,0)
(189,879,0)
(716,1707,0)
(169,1228,0)
(1787,1378,0)
(180,1456,0)
(1638,506,0)
(1279,1654,0)
(908,327,0)
(926,237,0)
(900,859,0)
(1340,1746,0)
(1161,395,0)
(46,689,0)
(985,1618,0)
(605,1219,0)
(652,1137,0)
(63,642,0)
(618,123,0)
(260,859,0)
(999,1081,0)
(361,797,0)
(1636,766,0)
(269,1038,0)
(862,498,0)
(1792,859,0)
(1167,1418,0)
(1491,245,0)
(1725,689,0)
(337,689,0)
(268,859,0)
(270,1514,0)
(925,1239,0)
(829,1319,0)
(946,702,0)
(781,429,0)
(1501,1599,0)
(922,233,0)
(825,689,0)
(1050,1336,0)
(245,214,0)
(855,1732,0)
(1226,1618,0)
(1130,75,0)
(41,569,0)
(383,141,0)
(408,1448,0)
(764,1282,0)
(1215,244,0)
(330,859,0)
(1054,1739,0)
(884,677,0)
(674,859,0)
(1723,312,0)
(811,965,0)
(1649,859,0)
(420,689,0)
(1611,859,0)
(1717,1364,0)
(1576,52,0)
(2,896,0)
(1199,384,0)
(739,324,0)
(1513,1371,0)
(336,1111,0)
(1029,192,0)
(300,1612,0)
(86,1354,0)
(1144,526,0)
(838,1686,0)
(1448,514,0)
(1740,1707,0)
(178,815,0)
(1220,25,0)
(1581,987,0)
(628,324,0)
(1644,1246,0)
(1534,1412,0)
(25,52,0)
(576,1155,0)
(550,674,0)
(1147,1090,0)
(1726,689,0)
(613,1194,0)
(749,859,0)
(1254,702,0)
(1469,1554,0)
(1220,260,0)
(1413,212,0)
(1136,695,0)
(1722,150,0)
(310,1757,0)
(1333,689,0)
(484,1702,0)
(1548,962,0)
(1619,1552,0)
(1335,25,0)
(305,1331,0)
(210,324,0)
(324,1131,0)
(1297,689,0)
(829,1638,0)
(1052,260,0)
(1268,962,0)
(414,345,0)
(651,584,0)
(1629,59,0)
(264,1002,0)
(1056,1651,0)
(434,689,0)
(555,689,0)
(249,859,0)
(1624,416,0)
(1608,689,0)
(512,821,0)
(185,355,0)
(1336,1019,0)
(18,781,0)
(1698,1397,0)
(1151,859,0)
(25,859,0)
(40,1375,0)
(1514,859,0)
(1068,1527,0)
(164,1794,0)
(369,1109,0)
(83,1134,0)
(431,219,0)
(519,354,0)
(175,1400,0)
(822,59,0)
(447,980,0)
(734,859,0)
(1301,689,0)
(829,1407,0)
(165,1759,0)
(1195,1067,0)
(827,1569,0)
(1248,52,0)
(1084,859,0)
(1771,859,0)
(699,439,0)
(308,1081,0)
(1616,1607,0)
(1563,1651,0)
(561,520,0)
(1176,183,0)
(835,52,0)
(359,1796,0)
(26,52,0)
(257,1267,0)
(906,689,0)
(839,197,0)
(1518,267,0)
(1270,1131,0)
(319,335,0)
(173,1772,0)
(822,954,0)
(1118,1425,0)
(954,859,0)
(1045,908,0)
(1440,1124,0)
(421,991,0)
(543,1029,0)
(594,1677,0)
(1741,1526,0)
(1475,1124,0)
(1649,1263,0)
(484,444,0)
(496,372,0)
(1633,689,0)
(449,1172,0)
(1624,1355,0)
(822,1454,0)
(348,803,0)
(1019,1433,0)
(934,1337,0)
(540,1129,0)
(1362,689,0)
(918,364,0)
(686,558,0)
(517,942,0)
(863,1496,0)
(868,679,0)
(1639,1797,0)
(1427,707,0)
(888,1229,0)
(1464,558,0)
(123,1388,0)
(1505,614,0)
(543,1319,0)
(1,401,0)
(263,52,0)
(219,431,0)
(743,1747,0)
(777,689,0)
(59,276,0)
(1223,822,0)
(799,1026,0)
(1304,52,0)
(1160,890,0)
(1473,277,0)
(1133,689,0)
(1221,1720,0)
(482,859,0)
(964,623,0)
(1542,859,0)
(1624,948,0)
(1570,424,0)
(1692,109,0)
(824,1320,0)
(1675,815,0)
(1378,1787,0)
(137,1037,0)
(746,859,0)
(982,859,0)
(1012,943,0)
(781,859,0)
(1583,958,0)
(520,869,0)
(627,1151,0)
(1459,1201,0)
(1164,301,0)
(0,292,0)
(1586,160,0)
(456,1042,0)
(730,329,0)
(1365,607,0)
(806,49,0)
(1428,1757,0)
(118,139,0)
(467,421,0)
(716,52,0)
(150,1722,0)
(1470,36,0)
(205,447,0)
(1066,466,0)
(769,1630,0)
(1496,1253,0)
(741,1129,0)
(645,859,0)
(280,689,0)
(523,33,0)
(1219,1291,0)
(1683,466,0)
(1150,1435,0)
(1669,558,0)
(145,718,0)
(388,1651,0)
(1449,387,0)
(1438,416,0)
(653,794,0)
(1124,1303,0)
(570,674,0)
(55,1794,0)
(1255,37,0)
(856,882,0)
(1497,1274,0)
(426,1346,0)
(1486,132,0)
(528,15,0)
(1315,1263,0)
(1598,329,0)
(1450,1037,0)
(1573,141,0)
(1302,107,0)
(1237,1588,0)
(449,1663,0)
(1403,1806,0)
(1547,34,0)
(430,689,0)
(475,77,0)
(1796,807,0)
(207,1466,0)
(429,1028,0)
(1474,807,0)
(659,982,0)
(611,1699,0)
(1069,52,0)
(983,859,0)
(1792,52,0)
(133,623,0)
(1105,371,0)
(963,689,0)
(976,859,0)
(822,955,0)
(800,1128,0)
(822,1407,0)
(822,1100,0)
(1613,729,0)
(1184,1036,0)
(113,1130,0)
(1388,859,0)
(42,1146,0)
(377,1192,0)
(1243,622,0)
(1447,628,0)
(1720,1630,0)
(1624,1044,0)
(715,890,0)
(959,52,0)
(437,1196,0)
(822,948,0)
(1441,606,0)
(482,563,0)
(1282,377,0)
(511,530,0)
(971,1349,0)
(805,309,0)
(621,911,0)
(936,916,0)
(1597,38,0)
(432,1546,0)
(748,354,0)
(1631,1130,0)
(1363,1495,0)
(320,859,0)
(1508,1125,0)
(1165,859,0)
(299,0,0)
(232,52,0)
(1408,689,0)
(1498,1256,0)
(711,689,0)
(1516,859,0)
(1146,697,0)
(1137,859,0)
(1543,1416,0)
(901,857,0)
(140,786,0)
(1709,579,0)
(625,59,0)
(1128,689,0)
(1446,1376,0)
(731,1376,0)
(1576,859,0)
(747,1347,0)
(1516,1092,0)
(1077,1604,0)
(24,689,0)
(9,634,0)
(1776,1711,0)
(388,1691,0)
(107,859,0)
(295,854,0)
(1204,689,0)
(817,79,0)
(703,284,0)
(1480,551,0)
(1111,336,0)
(241,586,0)
(1477,1649,0)
(822,1355,0)
(696,1388,0)
(595,511,0)
(1728,1132,0)
(405,944,0)
(1220,879,0)
(1291,1678,0)
(774,919,0)
(1592,1542,0)
(289,1373,0)
(14,689,0)
(1175,184,0)
(7,689,0)
(214,245,0)
(225,111,0)
(1038,859,0)
(1289,1760,0)
(167,118,0)
(1117,779,0)
(739,903,0)
(395,347,0)
(1442,859,0)
(1347,747,0)
(687,859,0)
(877,1657,0)
(1692,323,0)
(10,16,0)
(1143,17,0)
(859,689,0)
(1792,476,0)
(253,1362,0)
(694,640,0)
(124,1062,0)
(1088,1216,0)
(1103,1448,0)
(987,859,0)
(1625,248,0)
(1803,627,0)
(829,511,0)
(404,1612,0)
(1241,1148,0)
(1172,1073,0)
(1489,638,0)
(640,484,0)
(999,819,0)
(263,859,0)
(1165,132,0)
(588,1142,0)
(648,1173,0)
(815,1675,0)
(991,689,0)
(222,1736,0)
(1064,687,0)
(1757,859,0)
(1125,1373,0)
(784,1222,0)
(1263,1649,0)
(135,296,0)
(791,1767,0)
(533,1307,0)
(148,1005,0)
(1526,1741,0)
(1487,1201,0)
(1123,1224,0)
(469,19,0)
(1095,942,0)
(1240,832,0)
(76,263,0)
(746,1762,0)
(1421,1355,0)
(1596,324,0)
(1599,1040,0)
(1663,449,0)
(132,689,0)
(1162,1090,0)
(1304,859,0)
(32,1097,0)
(1801,689,0)
(660,622,0)
(235,689,0)
(1758,56,0)
(803,239,0)
(1380,689,0)
(21,859,0)
(597,1474,0)
(318,689,0)
(829,1355,0)
(1119,20,0)
(1251,1359,0)
(621,866,0)
(1348,23,0)
(376,1646,0)
(223,1347,0)
(1220,59,0)
(1605,583,0)
(435,1699,0)
(995,682,0)
(510,1748,0)
(199,307,0)
(543,25,0)
(845,330,0)
(645,1759,0)
(822,25,0)
(340,689,0)
(490,1526,0)
(188,323,0)
(1420,689,0)
(410,859,0)
(1685,859,0)
(829,948,0)
(1490,689,0)
(1553,859,0)
(1383,689,0)
(1196,437,0)
(1711,859,0)
(1522,1400,0)
(822,689,0)
(306,673,0)
(985,98,0)
(878,1311,0)
(854,823,0)
(1042,385,0)
(1170,948,0)
(53,1392,0)
(1076,232,0)
(870,259,0)
(1523,1095,0)
(1240,1618,0)
(347,502,0)
(1212,447,0)
(482,52,0)
(1763,689,0)
(836,1646,0)
(1163,168,0)
(1246,1407,0)
(966,1388,0)
(1630,859,0)
(1407,1246,0)
(1687,1303,0)
(1026,51,0)
(88,731,0)
(1435,859,0)
(1551,787,0)
(1263,101,0)
(1426,30,0)
(575,807,0)
(1133,1271,0)
(851,25,0)
(374,49,0)
(1258,1471,0)
(522,859,0)
(719,1654,0)
(1053,235,0)
(1092,1516,0)
(1617,52,0)
(732,954,0)
(1031,93,0)
(1759,19,0)
(329,264,0)
(896,1448,0)
(1472,729,0)
(766,859,0)
(711,859,0)
(1727,1619,0)
(657,1250,0)
(7,324,0)
(483,1400,0)
(1413,34,0)
(915,689,0)
(1309,1778,0)
(1361,259,0)
(206,1779,0)
(1474,859,0)
(217,259,0)
(820,1328,0)
(1574,1038,0)
(755,1548,0)
(1710,269,0)
(1271,1133,0)
(676,781,0)
(1708,1380,0)
(1632,1729,0)
(1700,926,0)
(812,689,0)
(894,534,0)
(901,689,0)
(669,1714,0)
(1209,1454,0)
(1624,1029,0)
(320,1759,0)
(802,1685,0)
(1509,1741,0)
(304,1442,0)
(1638,1783,0)
(1595,1660,0)
(1485,980,0)
(813,1246,0)
(1630,1720,0)
(1533,1397,0)
(1175,687,0)
(586,944,0)
(626,408,0)
(935,729,0)
(1439,1605,0)
(1575,1794,0)
(1690,935,0)
(1188,1245,0)
(287,1122,0)
(757,1667,0)
(1069,859,0)
(794,1800,0)
(829,955,0)
(504,584,0)
(646,859,0)
(822,1319,0)
(1364,1526,0)
(144,1800,0)
(1325,1073,0)
(1234,1415,0)
(1646,689,0)
(979,1076,0)
(453,959,0)
(829,59,0)
(1317,239,0)
(1578,689,0)
(1228,1579,0)
(846,461,0)
(666,689,0)
(240,1630,0)
(1802,137,0)
(1013,689,0)
(81,1549,0)
(1794,1575,0)
(509,1368,0)
(477,679,0)
(1220,1657,0)
(709,1611,0)
(538,232,0)
(448,879,0)
(67,1468,0)
(1281,211,0)
(826,505,0)
(19,860,0)
(118,1759,0)
(1193,1777,0)
(429,781,0)
(301,1667,0)
(1265,859,0)
(208,412,0)
(1264,1576,0)
(965,859,0)
(433,588,0)
(822,734,0)
(33,859,0)
(1539,831,0)
(1031,1248,0)
(340,859,0)
(1751,689,0)
(1652,869,0)
(761,254,0)
(1168,1526,0)
(394,114,0)
(1211,1059,0)
(1314,390,0)
(1789,301,0)
(1466,207,0)
(30,1327,0)
(1227,1264,0)
(302,836,0)
(543,1418,0)
(817,367,0)
(1217,1452,0)
(1747,1229,0)
(1746,1340,0)
(935,1618,0)
(468,1328,0)
(517,689,0)
(364,918,0)
(347,1553,0)
(1336,1050,0)
(772,914,0)
(416,975,0)
(1172,449,0)
(619,1685,0)
(207,859,0)
(927,210,0)
(141,689,0)
(1132,859,0)
(1331,52,0)
(45,420,0)
(1415,1759,0)
(1749,627,0)
(1796,859,0)
(829,734,0)
(1777,869,0)
(110,212,0)
(1222,859,0)
(1137,1526,0)
(441,1747,0)
(1067,275,0)
(1196,263,0)
(928,1657,0)
(579,1415,0)
(1232,985,0)
(259,1386,0)
(756,1300,0)
(311,803,0)
(152,211,0)
(581,857,0)
(1211,689,0)
(960,997,0)
(1057,312,0)
(810,1499,0)
(679,868,0)
(700,964,0)
(1208,1081,0)
(600,975,0)
(642,859,0)
(1570,859,0)
(787,1663,0)
(84,1617,0)
(1343,1405,0)
(1412,918,0)
(1458,1197,0)
(332,731,0)
(865,859,0)
(1700,686,0)
(1282,689,0)
(1415,859,0)
(1395,26,0)
(65,689,0)
(782,1019,0)
(1458,859,0)
(1192,377,0)
(1101,539,0)
(1177,447,0)
(459,859,0)
(101,1263,0)
(1495,859,0)
(1558,365,0)
(1149,689,0)
(1330,689,0)
(1040,1599,0)
(440,823,0)
(1060,207,0)
(1111,1736,0)
(1494,785,0)
(1592,1650,0)
(1682,1729,0)
(196,391,0)
(1108,335,0)
(49,539,0)
(807,324,0)
(728,949,0)
(1572,147,0)
(28,1801,0)
(6,1418,0)
(1280,56,0)
(822,511,0)
(401,226,0)
(91,1151,0)
(362,233,0)
(1634,1228,0)
(1220,948,0)
(279,323,0)
(907,689,0)
(1769,1699,0)
(410,493,0)
(821,829,0)
(603,586,0)
(861,1008,0)
(1220,1154,0)
(609,1337,0)
(1322,1572,0)
(272,29,0)
(252,689,0)
(860,19,0)
(1329,338,0)
(986,1614,0)
(857,581,0)
(873,1452,0)
(1663,1661,0)
(1651,210,0)
(1347,1692,0)
(1334,54,0)
(997,1525,0)
(154,1542,0)
(993,746,0)
(1016,1252,0)
(1276,1142,0)
(951,235,0)
(1200,1446,0)
(1220,1418,0)
(765,1513,0)
(463,689,0)
(926,1311,0)
(846,1784,0)
(514,1109,0)
(338,52,0)
(1265,864,0)
(246,1226,0)
(1651,689,0)
(1617,342,0)
(1621,889,0)
(367,859,0)
(1415,579,0)
(52,689,0)
(1545,466,0)
(1106,192,0)
(552,357,0)
(1112,689,0)
(543,1638,0)
(722,1302,0)
(1775,1624,0)
(750,935,0)
(761,1759,0)
(157,300,0)
(131,1527,0)
(766,52,0)
(1312,975,0)
(547,788,0)
(964,859,0)
(1794,52,0)
(950,1027,0)
(1137,1759,0)
(712,1359,0)
(601,1369,0)
(254,761,0)
(328,840,0)
(312,52,0)
(1783,244,0)
(1194,859,0)
(526,166,0)
(761,859,0)
(1765,731,0)
(493,1008,0)
(1027,1316,0)
(1604,573,0)
(12,1702,0)
(545,739,0)
(153,689,0)
(1707,573,0)
(158,312,0)
(90,687,0)
(896,2,0)
(1775,1220,0)
(1755,689,0)
(110,689,0)
(100,26,0)
(1722,1783,0)
(532,345,0)
(322,1602,0)
(530,713,0)
(1455,1635,0)
(345,698,0)
(51,859,0)
(451,1065,0)
(49,859,0)
(1775,1134,0)
(902,460,0)
(932,689,0)
(391,721,0)
(1257,689,0)
(1588,859,0)
(709,1112,0)
(93,689,0)
(107,1302,0)
(781,52,0)
(862,215,0)
(976,1285,0)
(303,52,0)
(488,689,0)
(572,34,0)
(829,416,0)
(438,689,0)
(1752,1761,0)
(1693,1175,0)
(751,794,0)
(904,604,0)
(1357,823,0)
(413,165,0)
(673,689,0)
(683,464,0)
(74,1774,0)
(1233,689,0)
(705,331,0)
(577,1781,0)
(54,1334,0)
(424,689,0)
(1344,708,0)
(716,859,0)
(73,388,0)
(536,850,0)
(1180,917,0)
(1775,829,0)
(1764,505,0)
(1307,138,0)
(1093,1441,0)
(1763,550,0)
(1370,584,0)
(617,1498,0)
(161,1672,0)
(265,718,0)
(1557,77,0)
(461,846,0)
(1483,207,0)
(1435,52,0)
(1622,866,0)
(726,263,0)
(1358,779,0)
(1349,338,0)
(69,255,0)
(549,689,0)
(497,1100,0)
(1468,689,0)
(581,859,0)
(1532,1516,0)
(819,153,0)
(507,871,0)
(1719,729,0)
(706,850,0)
(933,1222,0)
(1664,964,0)
(255,52,0)
(344,689,0)
(1170,52,0)
(1153,250,0)
(798,1576,0)
(1640,1470,0)
(869,1777,0)
(981,1322,0)
(592,620,0)
(38,689,0)
(1704,1542,0)
(1156,1226,0)
(1023,689,0)
(1584,642,0)
(318,943,0)
(380,1614,0)
(745,449,0)
(1675,1520,0)
(266,689,0)
(387,689,0)
(169,859,0)
(185,1155,0)
(293,1400,0)
(1400,1368,0)
(939,469,0)
(1218,949,0)
(166,526,0)
(1158,124,0)
(1059,507,0)
(937,1410,0)
(303,859,0)
(1642,1792,0)
(971,657,0)
(749,997,0)
(573,1707,0)
(622,859,0)
(1048,1005,0)
(366,343,0)
(1179,408,0)
(71,41,0)
(1307,859,0)
(1588,52,0)
(828,443,0)
(48,689,0)
(114,689,0)
(1470,689,0)
(608,976,0)
(1479,1166,0)
(522,52,0)
(1210,464,0)
(1218,1397,0)
(138,1307,0)
(1091,634,0)
(423,1435,0)
(548,147,0)
(534,859,0)
(1331,859,0)
(162,759,0)
(744,1250,0)
(948,1170,0)
(1429,1222,0)
(1293,1788,0)
(1250,744,0)
(1767,406,0)
(1654,1279,0)
(1463,459,0)
(15,1239,0)
(1417,715,0)
(614,180,0)
(843,1468,0)
(1476,551,0)
(325,0,0)
(5,689,0)
(568,1685,0)
(460,859,0)
(1499,1620,0)
(1154,448,0)
(1759,689,0)
(1221,689,0)
(396,254,0)
(294,689,0)
(1443,689,0)
(1612,354,0)
(1725,706,0)
(1086,1040,0)
(1398,1433,0)
(1562,1539,0)
(261,1661,0)
(1384,342,0)
(563,482,0)
(1714,859,0)
(775,1684,0)
(607,859,0)
(1079,1549,0)
(1033,105,0)
(738,965,0)
(1220,1355,0)
(37,859,0)
(543,421,0)
(1456,689,0)
(1716,416,0)
(1304,1602,0)
(1495,380,0)
(1796,1678,0)
(470,410,0)
(822,619,0)
(1013,946,0)
(543,1355,0)
(638,1489,0)
(1328,468,0)
(1552,859,0)
(527,133,0)
(620,506,0)
(1081,859,0)
(1774,1519,0)
(36,1766,0)
(492,859,0)
(1228,169,0)
(202,1331,0)
(930,1029,0)
(1628,1413,0)
(300,1328,0)
(432,859,0)
(1375,40,0)
(1624,1657,0)
(1431,563,0)
(1275,317,0)
(1356,1552,0)
(874,593,0)
(1688,686,0)
(619,1420,0)
(679,52,0)
(1198,634,0)
(1554,1194,0)
(684,689,0)
(296,689,0)
(323,371,0)
(720,1173,0)
(1355,859,0)
(675,594,0)
(1021,1498,0)
(1692,1347,0)
(1731,1549,0)
(1207,1747,0)
(1173,52,0)
(1377,21,0)
(1456,180,0)
(835,569,0)
(1346,426,0)
(634,1448,0)
(830,1216,0)
(1520,689,0)
(678,1288,0)
(1399,464,0)
(102,1722,0)
(916,689,0)
(762,1131,0)
(82,1659,0)
(329,1618,0)
(254,689,0)
(1181,1610,0)
(721,391,0)
(1602,1304,0)
(1527,206,0)
(279,859,0)
(407,1544,0)
(1281,859,0)
(614,52,0)
(796,1518,0)
(550,1763,0)
(579,1019,0)
(345,859,0)
(631,255,0)
(1306,31,0)
(1122,874,0)
(284,585,0)
(636,335,0)
(439,248,0)
(717,689,0)
(1266,233,0)
(1630,52,0)
(1732,689,0)
(997,749,0)
(823,854,0)
(615,1452,0)
(1239,689,0)
(620,52,0)
(584,859,0)
(924,160,0)
(935,264,0)
(920,1065,0)
(954,1751,0)
(333,1497,0)
(1103,1278,0)
(338,859,0)
(1526,264,0)
(543,320,0)
(797,264,0)
(105,52,0)
(1646,376,0)
(944,586,0)
(642,52,0)
(801,1474,0)
(412,893,0)
(963,698,0)
(416,859,0)
(507,1059,0)
(1127,1369,0)
(255,634,0)
(331,689,0)
(1145,1069,0)
(508,1489,0)
(105,1033,0)
(129,494,0)
(1171,1252,0)
(292,0,0)
(464,1019,0)
(117,1600,0)
(245,1491,0)
(1100,1069,0)
(848,1184,0)
(1250,657,0)
(1252,1381,0)
(1354,86,0)
(1538,1307,0)
(1385,1181,0)
(1249,689,0)
(953,1153,0)
(1367,1471,0)
(531,1265,0)
(829,689,0)
(1322,859,0)
(1092,1009,0)
(142,859,0)
(958,1583,0)
(1624,1319,0)
(1346,1375,0)
(290,340,0)
(1008,493,0)
(586,859,0)
(778,51,0)
(15,859,0)
(1324,1702,0)
(1572,1322,0)
(1219,1517,0)
(551,1323,0)
(1047,786,0)
(459,689,0)
(792,1146,0)
(1139,1388,0)
(1474,576,0)
(330,1289,0)
(427,327,0)
(478,1430,0)
(1121,949,0)
(98,985,0)
(1036,1184,0)
(926,324,0)
(867,937,0)
(1005,859,0)
(1239,15,0)
(589,1756,0)
(714,1291,0)
(1074,1605,0)
(139,689,0)
(1262,151,0)
(119,689,0)
(61,395,0)
(1122,859,0)
(23,537,0)
(1784,1500,0)
(1190,1801,0)
(1044,1241,0)
(937,859,0)
(681,96,0)
(263,1196,0)
(599,449,0)
(1753,482,0)
(1607,1444,0)
(1061,1322,0)
(33,1142,0)
(542,1154,0)
(544,33,0)
(26,859,0)
(352,621,0)
(342,331,0)
(1245,638,0)
(942,1095,0)
(847,689,0)
(303,682,0)
(36,1470,0)
(146,642,0)
(1245,476,0)
(580,788,0)
(1066,689,0)
(1155,576,0)
(1552,1759,0)
(1432,1549,0)
(543,416,0)
(744,214,0)
(910,689,0)
(357,1364,0)
(108,689,0)
(216,954,0)
(584,651,0)
(1471,859,0)
(1482,461,0)
(885,772,0)
(854,52,0)
(892,1420,0)
(1599,1204,0)
(326,1201,0)
(1770,689,0)
(358,1583,0)
(1303,1124,0)
(458,1189,0)
(704,543,0)
(489,1579,0)
(97,1725,0)
(829,260,0)
(212,110,0)
(393,859,0)
(382,1358,0)
(1670,347,0)
(118,859,0)
(155,1065,0)
(576,1474,0)
(250,1153,0)
(1548,859,0)
(100,638,0)
(912,83,0)
(317,868,0)
(690,1632,0)
(962,1479,0)
(829,1418,0)
(1738,689,0)
(1535,275,0)
(578,75,0)
(1471,1258,0)
(386,1737,0)
(829,1029,0)
(418,277,0)
(1680,1248,0)
(34,859,0)
(1408,1711,0)
(1116,1261,0)
(1043,574,0)
(268,52,0)
(1668,422,0)
(1733,233,0)
(1565,1605,0)
(275,1588,0)
(1126,1135,0)
(1567,68,0)
(1134,228,0)
(1512,367,0)
(449,859,0)
(1678,1796,0)
(791,689,0)
(231,22,0)
(1292,689,0)
(1007,645,0)
(815,52,0)
(1773,124,0)
(526,859,0)
(1721,1240,0)
(1718,689,0)
(1216,729,0)
(1694,689,0)
(650,955,0)
(527,689,0)
(1310,1382,0)
(31,481,0)
(466,1066,0)
(401,933,0)
(351,812,0)
(79,817,0)
(1110,1103,0)
(436,1525,0)
(77,859,0)
(1460,689,0)
(1715,674,0)
(160,859,0)
(1579,1256,0)
(142,645,0)
(1479,962,0)
(220,744,0)
(1422,689,0)
(270,689,0)
(1220,1319,0)
(1078,916,0)
(573,944,0)
(1646,836,0)
(409,1756,0)
(247,1760,0)
(1588,275,0)
(1072,118,0)
(177,859,0)
(1414,1304,0)
(1550,259,0)
(1178,628,0)
(918,1412,0)
(1244,959,0)
(807,689,0)
(1129,689,0)
(1284,1111,0)
(607,1405,0)
(33,52,0)
(1364,357,0)
(612,1333,0)
(1606,399,0)
(121,689,0)
(1624,1148,0)
(850,706,0)
(1073,543,0)
(16,1267,0)
(1390,264,0)
(1142,588,0)
(1526,1472,0)
(829,1570,0)
(799,689,0)
(968,1806,0)
(200,1611,0)
(822,1092,0)
(1006,689,0)
(1536,1563,0)
(1294,689,0)
(192,1448,0)
(569,835,0)
(1349,971,0)
(822,398,0)
(284,1703,0)
(1220,416,0)
(987,1486,0)
(201,520,0)
(584,1759,0)
(237,1672,0)
(1766,36,0)
(1274,1497,0)
(264,983,0)
(674,550,0)
(1252,1662,0)
(797,72,0)
(72,797,0)
(1618,233,0)
(1619,689,0)
(1026,799,0)
(1544,859,0)
(754,998,0)
(543,59,0)
(945,1028,0)
(1029,859,0)
(875,169,0)
(1008,689,0)
(285,716,0)
(316,1641,0)
(574,1043,0)
(1081,999,0)
(1040,52,0)
(1750,689,0)
(37,1604,0)
(1611,709,0)
(1437,815,0)
(967,29,0)
(795,689,0)
(822,1029,0)
(1246,52,0)
(1695,1310,0)
(1620,1499,0)
(506,620,0)
(829,865,0)
(877,324,0)
(513,1600,0)
(498,862,0)
(634,255,0)
(1248,1031,0)
(343,859,0)
(1298,713,0)
(1342,1355,0)
(1624,1418,0)
(406,1767,0)
(635,406,0)
(1039,749,0)
(1627,30,0)
(706,1725,0)
(1637,1552,0)
(180,614,0)
(1436,689,0)
(243,1087,0)
(708,1344,0)
(657,971,0)
(392,151,0)
(1073,75,0)
(1206,1661,0)
(376,1150,0)
(1189,1319,0)
(315,39,0)
(1166,1479,0)
(1736,689,0)
(849,492,0)
(1655,1665,0)
(947,1766,0)
(184,1175,0)
(1452,1778,0)
(1350,695,0)
(1285,976,0)
(134,444,0)
(1489,1331,0)
(734,1460,0)
(1706,1187,0)
(92,324,0)
(836,1618,0)
(238,1083,0)
(543,535,0)
(724,289,0)
(312,1723,0)
(112,1605,0)
(465,1407,0)
(1468,67,0)
(1486,987,0)
(841,137,0)
(255,859,0)
(125,1013,0)
(1070,900,0)
(837,786,0)
(1100,23,0)
(1194,52,0)
(1328,820,0)
(1290,1788,0)
(814,1561,0)
(279,52,0)
(1216,264,0)
(209,594,0)
(938,268,0)
(1185,96,0)
(1130,859,0)
(735,56,0)
(1379,333,0)
(971,1783,0)
(165,859,0)
(1583,269,0)
(1604,37,0)
(686,1700,0)
(913,1049,0)
(905,868,0)
(978,1466,0)
(1397,1218,0)
(1552,1619,0)
(1491,343,0)
(286,1714,0)
(1504,957,0)
(1454,766,0)
(1555,1668,0)
(349,1069,0)
(1318,251,0)
(1017,173,0)
(858,566,0)
(1014,412,0)
(809,1762,0)
(1099,177,0)
(1159,589,0)
(923,926,0)
(1394,276,0)
(520,201,0)
(357,552,0)
(1560,1795,0)
(1246,859,0)
(554,711,0)
(1806,968,0)
(1272,338,0)
(1511,527,0)
(466,859,0)
(822,380,0)
(314,51,0)
(1120,1013,0)
(476,1792,0)
(1500,1635,0)
(804,449,0)
(1521,1165,0)
(852,139,0)
(1643,1146,0)
(1352,17,0)
(553,1448,0)
(882,1089,0)
(277,264,0)
(17,1143,0)
(1402,343,0)
(693,569,0)
(473,1136,0)
(476,1245,0)
(1757,1261,0)
(1401,494,0)
(844,96,0)
(1332,1281,0)
(1737,1005,0)
(1084,689,0)
(1568,279,0)
(1603,1663,0)
(30,859,0)
(411,556,0)
(1425,537,0)
(702,946,0)
(365,689,0)
(1299,1196,0)
(1711,52,0)
(1593,1012,0)
(842,335,0)
(1657,299,0)
(207,52,0)
(1435,1150,0)
(816,524,0)
(1648,183,0)
(1656,589,0)
(39,583,0)
(444,484,0)
(1723,119,0)
(1073,1172,0)
(1364,1717,0)
(22,54,0)
(723,124,0)
(1248,859,0)
(1701,1433,0)
(1354,622,0)
(763,320,0)
(1203,917,0)
(1686,492,0)
(623,133,0)
(812,351,0)
(1777,859,0)
(854,859,0)
(785,372,0)
(389,590,0)
(232,859,0)
(1089,882,0)
(1224,1046,0)
(1128,1448,0)
(132,1165,0)
(713,1076,0)
(957,177,0)
(44,689,0)
(623,964,0)
(333,859,0)
(1154,859,0)
(1096,783,0)
(543,1657,0)
(147,689,0)
(579,173,0)
(1788,1293,0)
(486,1638,0)
(1576,1264,0)
(1155,689,0)
(695,859,0)
(172,689,0)
(1624,734,0)
(638,100,0)
(398,5,0)
(1240,264,0)
(194,999,0)
(80,142,0)
(1771,296,0)
(891,522,0)
(256,1561,0)
(1722,1466,0)
(1041,1747,0)
(1624,59,0)
(86,689,0)
(718,265,0)
(1804,1362,0)
(771,1624,0)
(1353,1460,0)
(1351,273,0)
(93,1031,0)
(139,118,0)
(1457,1387,0)
(1326,517,0)
(1790,476,0)
(596,865,0)
(1277,983,0)
(96,733,0)
(656,933,0)
(654,1781,0)
(1142,33,0)
(1381,168,0)
(1327,30,0)
(66,991,0)
(940,922,0)
(1107,1668,0)
(1405,689,0)
(1313,963,0)
(959,859,0)
(566,1666,0)
(1173,1608,0)
(829,1228,0)
(1493,1312,0)
(948,1125,0)
(829,380,0)
(1608,590,0)
(1152,222,0)
(122,679,0)
(1083,903,0)
(1205,494,0)
(506,1638,0)
(679,859,0)
(1684,689,0)
(1678,1291,0)
(236,1516,0)
(399,1519,0)
(1038,269,0)
(1090,879,0)
(620,859,0)
(634,1091,0)
(1478,185,0)
(1711,1408,0)
(645,142,0)
(85,79,0)
(1537,165,0)
(68,1659,0)
(1713,1031,0)
(1647,689,0)
(968,52,0)
(900,678,0)
(1199,1226,0)
(1524,1009,0)
(371,109,0)
(829,320,0)
(1739,1054,0)
(342,1617,0)
(521,895,0)
(933,689,0)
(1741,859,0)
(269,689,0)
(805,689,0)
(420,324,0)
(1252,347,0)
(725,1496,0)
(406,859,0)
(819,999,0)
(914,1448,0)
(649,1029,0)
(1380,324,0)
(955,39,0)
(1691,388,0)
(633,1120,0)
(1624,260,0)
(1585,689,0)
(222,324,0)
(440,689,0)
(51,1026,0)
(1705,5,0)
(1012,859,0)
(417,689,0)
(283,502,0)
(942,517,0)
(943,1012,0)
(1541,1264,0)
(1582,1711,0)
(1372,623,0)
(153,819,0)
(165,1537,0)
(949,1218,0)
(916,1078,0)
(773,502,0)
(588,689,0)
(166,1233,0)
(193,1748,0)
(317,689,0)
(587,1043,0)
(1151,52,0)
(1650,689,0)
(1507,895,0)
(926,1700,0)
(1529,1570,0)
(1584,573,0)
(168,1381,0)
(564,1739,0)
(1461,526,0)
(94,689,0)
(1341,1584,0)
(1785,232,0)
(567,689,0)
(573,1584,0)
(198,40,0)
(944,573,0)
(721,1387,0)
(132,1486,0)
(197,384,0)
(956,1668,0)
(1712,65,0)
(868,317,0)
(64,1783,0)
(1334,689,0)
(1641,316,0)
(822,783,0)
(1322,52,0)
(70,1796,0)
(1623,448,0)
(903,1312,0)
(111,1554,0)
(808,707,0)
(72,729,0)
(1556,424,0)
(1407,371,0)
(534,1448,0)
(213,93,0)
(249,1271,0)
(977,871,0)
(1025,100,0)
(835,859,0)
(494,130,0)
(1003,551,0)
(579,150,0)
(26,100,0)
(186,1518,0)
(1166,689,0)
(126,365,0)
(897,689,0)
(998,689,0)
(965,52,0)
(616,1548,0)
(8,137,0)
(1186,689,0)
(639,1358,0)
(1737,168,0)
(171,747,0)
(516,589,0)
(624,734,0)
(1506,26,0)
(853,987,0)
(1502,1170,0)
(921,412,0)
(865,555,0)
(970,689,0)
(1183,1761,0)
(1647,859,0)
(1526,1364,0)
(776,1143,0)
(788,916,0)
(1699,1295,0)
(1141,1319,0)
(1434,1092,0)
(682,303,0)
(425,1042,0)
(747,1759,0)
(543,1570,0)
(278,1435,0)
(687,52,0)
(1746,689,0)
(484,640,0)
(543,380,0)
(1441,1321,0)
(343,52,0)
(1387,721,0)
(1220,734,0)
(822,320,0)
(988,1632,0)
(833,101,0)
(1001,566,0)
(1032,1736,0)
(1305,320,0)
(1362,1804,0)
(1058,301,0)
(1499,1285,0)
(338,1349,0)
(1654,859,0)
(1009,689,0)
(1795,499,0)
(630,1292,0)
(786,1569,0)
(1462,21,0)
(1289,330,0)
(634,462,0)
(1466,1722,0)
(309,805,0)
(50,367,0)
(710,237,0)
(120,908,0)
(106,689,0)
(419,206,0)
(1174,1027,0)
(375,1496,0)
(909,620,0)
(1744,893,0)
(211,1281,0)
(163,507,0)
(203,1741,0)
(1034,1723,0)
(602,1795,0)
(1635,40,0)
(872,1181,0)
(783,211,0)
(871,859,0)
(139,859,0)
(1503,785,0)
(210,1651,0)
(1654,689,0)
(104,581,0)
(79,689,0)
(1761,58,0)
(282,889,0)
(694,859,0)
(52,105,0)
(829,1100,0)
(1366,58,0)
(1566,151,0)
(1287,566,0)
(886,1575,0)
(291,440,0)
(975,462,0)
(864,1265,0)
(1169,1336,0)
(1657,877,0)
(651,689,0)
(204,604,0)
(1165,1521,0)
(1618,454,0)
(1216,1618,0)
(1766,859,0)
(1321,1441,0)
(780,1273,0)
(1230,1472,0)
(92,689,0)
(766,1454,0)
(43,689,0)
(1076,689,0)
(1010,1089,0)
(822,1638,0)
(312,859,0)
(1324,1575,0)
(1514,270,0)
(1526,1137,0)
(288,914,0)
(1173,859,0)
(370,835,0)
(1430,1484,0)
(1194,1554,0)
(883,1349,0)
(1381,1252,0)
(959,1227,0)
(560,689,0)
(1375,1346,0)
(598,1137,0)
(1546,432,0)
(1626,1387,0)
(1392,1083,0)
(663,1148,0)
(1273,859,0)
(1222,933,0)
(655,1236,0)
(1098,1189,0)
(403,734,0)
(343,1491,0)
(638,1245,0)
(233,859,0)
(1094,139,0)
(345,52,0)
(30,1759,0)
(829,421,0)
(316,1261,0)
(169,52,0)
(1601,1675,0)
(530,689,0)
(1024,1204,0)
(271,1084,0)
(929,614,0)
(1269,1091,0)
(1707,716,0)
(379,385,0)
(822,260,0)
(13,2,0)
(1418,859,0)
(179,689,0)
(989,1458,0)
(1259,1310,0)
(543,948,0)
(692,1471,0)
(850,859,0)
(1319,1446,0)
(400,1316,0)
(1445,1732,0)
(218,555,0)
(871,507,0)
(299,689,0)
(1261,1757,0)
(1087,324,0)
(1760,1289,0)
(60,1751,0)
(1015,1412,0)
(514,1448,0)
(1067,689,0)
(590,1608,0)
(1510,398,0)
(919,859,0)
(1291,689,0)
(1261,316,0)
(143,689,0)
(859,534,0)
(541,1360,0)
(1563,1113,0)
(34,1413,0)
(1411,1250,0)
(627,1749,0)
(752,1187,0)
(558,686,0)
(1517,1219,0)
(922,859,0)
(646,689,0)
(471,1062,0)
(1594,694,0)
(105,890,0)
(212,1413,0)
(518,1044,0)
(610,1515,0)
(895,689,0)
(1760,689,0)
(829,1657,0)
(1151,627,0)
(1537,689,0)
(969,249,0)
(259,1472,0)
(898,1444,0)
(0,859,0)
(1650,1592,0)
(415,761,0)
(1059,1211,0)
(1293,1346,0)
(1554,111,0)
(380,1495,0)
(1247,1303,0)
(296,1771,0)
(1405,607,0)
(47,1300,0)
(1201,1797,0)
(1239,138,0)
(1741,807,0)
(529,1553,0)
(1071,1456,0)
(229,1792,0)
(1132,1192,0)
(481,31,0)
(75,1073,0)
(672,1766,0)
(384,372,0)
(1170,859,0)
(677,1274,0)
(914,772,0)
(822,1228,0)
(1188,1749,0)
(673,1448,0)
(1303,52,0)
(829,783,0)
(1659,68,0)
(38,1806,0)
(191,132,0)
(1775,822,0)
(1080,493,0)
(1472,1526,0)
(1000,1181,0)
(1440,689,0)
(19,469,0)
(975,689,0)
(1742,498,0)
(233,922,0)
(890,105,0)
(1540,1495,0)
(1274,677,0)
(1748,689,0)
(1685,619,0)
(831,1539,0)
(1430,1405,0)
(1587,1312,0)
(1442,689,0)
(1113,1563,0)
(1300,398,0)
(363,469,0)
(1338,391,0)
(1378,1468,0)
(1745,1344,0)
(493,410,0)
(445,98,0)
(457,1120,0)
(1500,1784,0)
(707,1427,0)
(89,834,0)
(464,1049,0)
(1608,1173,0)
(1539,965,0)
(1233,166,0)
(1416,563,0)
(230,1616,1)
(982,659,1)
(311,787,1)
(563,482,1)
(1617,52,1)
(1757,310,1)
(1319,1189,1)
(1463,144,1)
(281,1162,1)
(1234,782,1)
(732,5,1)
(1737,386,1)
(1142,1276,1)
(1364,1717,1)
(363,320,1)
(961,71,1)
(1152,1032,1)
(1722,1466,1)
(802,568,1)
(525,1084,1)
(22,859,1)
(634,255,1)
(1054,1739,1)
(1307,859,1)
(646,859,1)
(801,597,1)
(1725,706,1)
(780,1136,1)
(127,1302,1)
(888,1747,1)
(158,1057,1)
(927,1056,1)
(21,1377,1)
(1322,859,1)
(84,705,1)
(392,1566,1)
(1491,343,1)
(262,1068,1)
(135,1771,1)
(736,284,1)
(584,1370,1)
(1572,1322,1)
(1503,372,1)
(1279,984,1)
(1657,877,1)
(1272,1329,1)
(822,948,1)
(615,1217,1)
(116,285,1)
(992,808,1)
(822,619,1)
(1170,859,1)
(210,324,1)
(25,859,1)
(829,783,1)
(796,556,1)
(1080,410,1)
(1056,328,1)
(726,76,1)
(1627,491,1)
(1246,859,1)
(804,745,1)
(1456,180,1)
(1040,187,1)
(886,1794,1)
(8,841,1)
(1417,25,1)
(935,1618,1)
(377,1192,1)
(769,952,1)
(1541,1576,1)
(1693,687,1)
(1124,1303,1)
(890,715,1)
(1440,1124,1)
(822,1418,1)
(416,859,1)
(997,960,1)
(299,0,1)
(822,1657,1)
(1136,473,1)
(1226,1156,1)
(754,684,1)
(1181,643,1)
(822,1454,1)
(1762,746,1)
(49,806,1)
(1378,1468,1)
(1130,1631,1)
(959,52,1)
(564,1140,1)
(1329,1491,1)
(1798,334,1)
(1452,873,1)
(1199,1226,1)
(312,52,1)
(1044,518,1)
(1603,543,1)
(163,871,1)
(1389,1680,1)
(1638,486,1)
(1043,587,1)
(57,399,1)
(170,1612,1)
(1,933,1)
(1624,1418,1)
(659,901,1)
(1195,1456,1)
(546,919,1)
(1273,859,1)
(673,1448,1)
(290,1492,1)
(1402,366,1)
(839,1199,1)
(1065,155,1)
(1624,59,1)
(1137,652,1)
(1582,1776,1)
(469,939,1)
(829,1100,1)
(155,451,1)
(761,742,1)
(1190,28,1)
(27,1237,1)
(602,1560,1)
(1072,167,1)
(1488,1379,1)
(1601,815,1)
(735,1280,1)
(28,235,1)
(1553,859,1)
(821,512,1)
(67,843,1)
(1523,1326,1)
(1183,1752,1)
(877,495,1)
(723,1158,1)
(242,804,1)
(718,265,1)
(1164,1058,1)
(1714,286,1)
(555,218,1)
(399,1606,1)
(17,1143,1)
(782,551,1)
(1637,527,1)
(1492,937,1)
(376,1150,1)
(445,201,1)
(1318,1805,1)
(1032,259,1)
(1588,27,1)
(1175,687,1)
(1428,1470,1)
(1277,251,1)
(1345,1455,1)
(703,103,1)
(1300,756,1)
(1411,657,1)
(1027,950,1)
(1775,829,1)
(465,1246,1)
(340,859,1)
(785,372,1)
(1555,956,1)
(1648,1176,1)
(1165,1521,1)
(1481,1113,1)
(1282,377,1)
(1238,1369,1)
(824,29,1)
(169,859,1)
(1380,1708,1)
(59,859,1)
(1430,478,1)
(160,1586,1)
(406,1589,1)
(716,116,1)
(129,1205,1)
(945,1125,1)
(1059,507,1)
(699,329,1)
(1418,859,1)
(1574,1710,1)
(1615,1166,1)
(1534,1015,1)
(303,859,1)
(185,1478,1)
(156,1107,1)
(1641,316,1)
(1650,1592,1)
(1542,859,1)
(1512,50,1)
(1155,576,1)
(459,1463,1)
(397,718,1)
(37,1255,1)
(193,276,1)
(190,1485,1)
(971,1349,1)
(11,671,1)
(1132,1728,1)
(653,1120,1)
(1235,566,1)
(1269,219,1)
(890,1160,1)
(1125,1508,1)
(698,1580,1)
(1151,52,1)
(1491,880,1)
(99,1686,1)
(1220,416,1)
(1431,482,1)
(395,347,1)
(760,13,1)
(684,632,1)
(778,314,1)
(691,1259,1)
(1446,1200,1)
(375,725,1)
(3,888,1)
(353,1170,1)
(222,324,1)
(607,1365,1)
(1261,1757,1)
(682,303,1)
(642,859,1)
(1772,1525,1)
(1595,1075,1)
(1310,1258,1)
(1140,1537,1)
(1212,205,1)
(507,163,1)
(566,858,1)
(176,484,1)
(457,633,1)
(964,700,1)
(169,52,1)
(196,1387,1)
(973,1741,1)
(83,912,1)
(543,1029,1)
(1753,1543,1)
(829,25,1)
(792,1182,1)
(1608,1173,1)
(1787,1378,1)
(1388,859,1)
(1513,765,1)
(138,1307,1)
(1509,203,1)
(1639,1201,1)
(962,1548,1)
(940,1733,1)
(110,212,1)
(1194,52,1)
(1614,986,1)
(453,1244,1)
(1264,1576,1)
(1143,859,1)
(174,1575,1)
(644,791,1)
(1156,246,1)
(246,496,1)
(87,1174,1)
(326,1459,1)
(1712,998,1)
(199,974,1)
(1245,476,1)
(1056,258,1)
(971,1783,1)
(869,1777,1)
(739,324,1)
(649,1654,1)
(1307,1538,1)
(190,1744,1)
(177,1099,1)
(1653,917,1)
(45,1423,1)
(1796,807,1)
(1062,124,1)
(1617,1308,1)
(845,182,1)
(747,859,1)
(49,859,1)
(26,1506,1)
(698,345,1)
(822,25,1)
(1437,994,1)
(946,702,1)
(1176,1241,1)
(954,859,1)
(1796,359,1)
(1439,112,1)
(487,654,1)
(1450,137,1)
(1078,859,1)
(941,724,1)
(1331,859,1)
(1607,1444,1)
(1602,1304,1)
(19,469,1)
(543,734,1)
(749,859,1)
(1123,181,1)
(1794,164,1)
(1197,1458,1)
(484,640,1)
(664,311,1)
(1522,483,1)
(559,1529,1)
(822,955,1)
(1226,1618,1)
(1737,1005,1)
(1392,1011,1)
(917,270,1)
(822,734,1)
(198,924,1)
(0,292,1)
(330,845,1)
(782,123,1)
(1760,247,1)
(761,859,1)
(1116,1757,1)
(771,183,1)
(625,1629,1)
(997,749,1)
(1606,1774,1)
(1612,404,1)
(807,324,1)
(1530,1518,1)
(989,627,1)
(905,679,1)
(867,1749,1)
(737,699,1)
(91,184,1)
(150,1722,1)
(1535,1588,1)
(1358,639,1)
(1510,1300,1)
(779,1358,1)
(1091,634,1)
(871,859,1)
(211,152,1)
(1362,253,1)
(65,1448,1)
(352,671,1)
(1518,685,1)
(579,150,1)
(408,1448,1)
(1539,965,1)
(309,77,1)
(955,650,1)
(1766,859,1)
(1765,88,1)
(440,823,1)
(572,1547,1)
(793,752,1)
(682,995,1)
(969,1030,1)
(1185,957,1)
(204,448,1)
(1189,859,1)
(25,1335,1)
(92,3,1)
(1325,75,1)
(1336,1169,1)
(1680,213,1)
(112,39,1)
(1603,1252,1)
(1524,1092,1)
(622,1243,1)
(978,207,1)
(1576,859,1)
(496,1369,1)
(810,1285,1)
(300,157,1)
(349,1145,1)
(1515,1448,1)
(1646,836,1)
(1547,1334,1)
(985,1618,1)
(1536,1699,1)
(497,1069,1)
(1567,826,1)
(1335,851,1)
(125,958,1)
(865,346,1)
(332,1765,1)
(1250,657,1)
(320,1305,1)
(64,1638,1)
(896,1448,1)
(687,52,1)
(1644,813,1)
(557,1302,1)
(432,1546,1)
(1704,154,1)
(960,749,1)
(1302,722,1)
(1442,304,1)
(314,1344,1)
(1401,1686,1)
(1513,1371,1)
(1702,1324,1)
(908,1045,1)
(694,1594,1)
(818,408,1)
(0,325,1)
(877,1681,1)
(971,1157,1)
(448,1623,1)
(105,1033,1)
(162,479,1)
(1137,1759,1)
(945,41,1)
(160,859,1)
(191,1260,1)
(1635,40,1)
(432,691,1)
(836,264,1)
(1702,12,1)
(1201,326,1)
(1804,21,1)
(1723,312,1)
(1063,1050,1)
(1416,563,1)
(482,859,1)
(1570,559,1)
(829,1418,1)
(1296,256,1)
(254,396,1)
(1153,250,1)
(1559,1660,1)
(1048,148,1)
(800,1484,1)
(1324,1575,1)
(891,1218,1)
(186,796,1)
(829,320,1)
(55,640,1)
(1466,978,1)
(1670,245,1)
(245,214,1)
(182,1725,1)
(1544,407,1)
(749,52,1)
(1706,793,1)
(466,1683,1)
(671,677,1)
(1045,120,1)
(1471,859,1)
(926,1700,1)
(1593,1615,1)
(483,336,1)
(398,1300,1)
(1312,859,1)
(279,1768,1)
(614,859,1)
(59,625,1)
(1129,741,1)
(1558,1751,1)
(317,868,1)
(1031,1713,1)
(1216,1618,1)
(1545,7,1)
(402,517,1)
(449,859,1)
(657,971,1)
(853,1133,1)
(984,719,1)
(628,324,1)
(1319,1141,1)
(1255,1754,1)
(494,129,1)
(1098,458,1)
(1032,501,1)
(1359,1251,1)
(240,769,1)
(122,477,1)
(755,616,1)
(751,641,1)
(919,774,1)
(49,52,1)
(1632,690,1)
(1434,1516,1)
(1499,810,1)
(1207,441,1)
(617,1406,1)
(123,1388,1)
(680,1498,1)
(965,859,1)
(1192,1132,1)
(1759,19,1)
(765,1371,1)
(389,1173,1)
(822,954,1)
(522,859,1)
(1630,240,1)
(648,682,1)
(1265,531,1)
(167,1239,1)
(255,859,1)
(1186,1023,1)
(939,363,1)
(1051,52,1)
(633,1013,1)
(772,914,1)
(1583,358,1)
(777,427,1)
(1026,51,1)
(192,1106,1)
(1007,139,1)
(640,1674,1)
(678,900,1)
(319,636,1)
(1430,1405,1)
(264,983,1)
(1333,612,1)
(1263,1649,1)
(767,1039,1)
(1173,52,1)
(1532,236,1)
(1227,959,1)
(925,658,1)
(988,201,1)
(1529,17,1)
(951,141,1)
(1605,1074,1)
(1004,737,1)
(1172,1073,1)
(620,859,1)
(784,1429,1)
(1328,468,1)
(41,569,1)
(489,1228,1)
(1782,1183,1)
(1598,730,1)
(687,859,1)
(1692,323,1)
(1364,357,1)
(53,1392,1)
(1165,234,1)
(467,397,1)
(805,309,1)
(593,874,1)
(345,859,1)
(1124,1475,1)
(1769,611,1)
(1735,613,1)
(1399,35,1)
(475,711,1)
(410,52,1)
(1636,503,1)
(1698,1533,1)
(764,1009,1)
(1141,1189,1)
(188,279,1)
(865,859,1)
(1306,296,1)
(1118,1409,1)
(781,18,1)
(721,1387,1)
(1030,1333,1)
(1304,52,1)
(1624,1044,1)
(545,238,1)
(543,1319,1)
(1655,468,1)
(903,739,1)
(935,264,1)
(1783,64,1)
(470,861,1)
(1421,975,1)
(829,865,1)
(1624,1319,1)
(586,52,1)
(219,431,1)
(1776,1602,1)
(1649,1477,1)
(514,1109,1)
(1624,416,1)
(1435,278,1)
(1543,963,1)
(466,859,1)
(1211,1059,1)
(539,1101,1)
(836,1618,1)
(1564,1795,1)
(1162,957,1)
(238,1440,1)
(1371,1762,1)
(956,156,1)
(1196,263,1)
(1780,1539,1)
(1303,859,1)
(306,1647,1)
(1100,497,1)
(118,859,1)
(874,1122,1)
(1790,1792,1)
(290,1114,1)
(585,1391,1)
(1309,1452,1)
(1626,1457,1)
(10,887,1)
(558,1464,1)
(1540,721,1)
(137,1802,1)
(774,459,1)
(861,93,1)
(913,464,1)
(1599,1040,1)
(1275,588,1)
(817,367,1)
(1286,245,1)
(521,1507,1)
(491,1759,1)
(268,938,1)
(935,1690,1)
(318,943,1)
(527,133,1)
(331,342,1)
(1707,1740,1)
(1514,859,1)
(749,767,1)
(632,1309,1)
(1096,211,1)
(788,580,1)
(651,584,1)
(45,757,1)
(1597,557,1)
(1688,558,1)
(823,854,1)
(285,944,1)
(22,231,1)
(279,859,1)
(686,558,1)
(1078,1374,1)
(1752,1327,1)
(323,279,1)
(329,1618,1)
(1092,1434,1)
(803,348,1)
(1056,1366,1)
(145,265,1)
(1388,696,1)
(1508,948,1)
(609,934,1)
(1208,308,1)
(829,1355,1)
(1525,436,1)
(183,1648,1)
(1671,437,1)
(1291,1678,1)
(1177,1212,1)
(1170,1502,1)
(406,859,1)
(1075,99,1)
(543,1355,1)
(1659,82,1)
(665,1390,1)
(934,1153,1)
(1669,923,1)
(169,875,1)
(1619,1727,1)
(134,1702,1)
(254,761,1)
(338,52,1)
(1413,34,1)
(144,794,1)
(1493,1587,1)
(1658,1007,1)
(1038,1574,1)
(1365,1343,1)
(696,1139,1)
(1659,324,1)
(171,1283,1)
(791,1767,1)
(165,859,1)
(637,788,1)
(403,982,1)
(632,629,1)
(1328,1665,1)
(1575,1794,1)
(579,173,1)
(639,382,1)
(725,863,1)
(544,523,1)
(1732,1445,1)
(902,1103,1)
(1241,378,1)
(1520,1675,1)
(1137,859,1)
(948,1170,1)
(1173,720,1)
(1643,792,1)
(836,302,1)
(52,105,1)
(1584,642,1)
(632,379,1)
(1354,622,1)
(1551,446,1)
(734,859,1)
(645,1759,1)
(1441,1321,1)
(300,1612,1)
(674,859,1)
(255,52,1)
(227,1597,1)
(1736,222,1)
(421,859,1)
(650,522,1)
(1785,979,1)
(415,142,1)
(1218,949,1)
(718,145,1)
(1209,766,1)
(1708,1682,1)
(492,859,1)
(1774,74,1)
(419,1787,1)
(976,608,1)
(948,353,1)
(620,52,1)
(232,538,1)
(638,1489,1)
(1248,1389,1)
(1221,1720,1)
(1324,1783,1)
(1070,1607,1)
(868,905,1)
(472,509,1)
(704,783,1)
(428,470,1)
(1008,493,1)
(1654,1279,1)
(1283,371,1)
(695,1350,1)
(638,100,1)
(107,52,1)
(702,1254,1)
(78,31,1)
(846,461,1)
(900,859,1)
(1304,1414,1)
(1375,1346,1)
(1315,1649,1)
(808,1454,1)
(1806,968,1)
(693,835,1)
(101,1263,1)
(608,1679,1)
(571,79,1)
(634,462,1)
(1013,946,1)
(1321,1214,1)
(1058,772,1)
(929,1071,1)
(1757,859,1)
(1150,115,1)
(1683,1545,1)
(786,837,1)
(1749,1188,1)
(3,1380,1)
(959,453,1)
(822,380,1)
(1407,465,1)
(484,444,1)
(829,948,1)
(1448,514,1)
(768,80,1)
(449,599,1)
(1754,1584,1)
(1252,1381,1)
(558,1669,1)
(132,1165,1)
(1001,395,1)
(451,920,1)
(1313,1221,1)
(1000,1385,1)
(1764,1359,1)
(1773,723,1)
(1111,1284,1)
(32,818,1)
(1010,856,1)
(287,318,1)
(1273,780,1)
(822,398,1)
(1053,951,1)
(1031,1248,1)
(1136,695,1)
(260,1052,1)
(1139,966,1)
(1103,1448,1)
(968,52,1)
(1495,52,1)
(148,395,1)
(369,553,1)
(358,269,1)
(493,410,1)
(1219,1291,1)
(1324,174,1)
(1128,800,1)
(366,277,1)
(1355,859,1)
(1084,859,1)
(681,1185,1)
(342,1617,1)
(835,370,1)
(1079,1432,1)
(672,1362,1)
(1789,1164,1)
(1362,1804,1)
(464,931,1)
(481,1306,1)
(1566,1262,1)
(531,571,1)
(584,1759,1)
(543,948,1)
(1126,307,1)
(511,595,1)
(79,817,1)
(410,859,1)
(1021,1671,1)
(1250,1411,1)
(97,706,1)
(745,1603,1)
(277,264,1)
(1548,755,1)
(581,1035,1)
(165,1759,1)
(1217,628,1)
(1625,439,1)
(1624,1355,1)
(118,1072,1)
(271,1763,1)
(427,908,1)
(822,260,1)
(1405,607,1)
(1548,859,1)
(1263,1315,1)
(678,1393,1)
(864,1265,1)
(2,896,1)
(1349,338,1)
(1311,878,1)
(522,52,1)
(1040,52,1)
(1741,807,1)
(598,1230,1)
(1355,1342,1)
(986,380,1)
(857,581,1)
(942,1095,1)
(815,859,1)
(1526,1168,1)
(1663,449,1)
(1034,312,1)
(1700,686,1)
(591,1650,1)
(599,1172,1)
(212,1413,1)
(1722,102,1)
(388,1651,1)
(1741,1509,1)
(747,1759,1)
(120,701,1)
(1685,802,1)
(100,1025,1)
(534,1448,1)
(518,1559,1)
(782,1062,1)
(1629,1292,1)
(1179,626,1)
(550,674,1)
(1220,260,1)
(842,1108,1)
(91,1227,1)
(1260,1486,1)
(1762,809,1)
(1357,854,1)
(1328,300,1)
(887,262,1)
(235,1053,1)
(822,59,1)
(249,859,1)
(1240,1721,1)
(1554,1469,1)
(1713,1248,1)
(88,1028,1)
(1232,445,1)
(679,122,1)
(1055,988,1)
(425,682,1)
(325,1657,1)
(472,1235,1)
(1259,1695,1)
(341,387,1)
(45,1531,1)
(1144,1760,1)
(721,391,1)
(291,1204,1)
(73,1651,1)
(829,1657,1)
(1500,1635,1)
(464,1019,1)
(556,411,1)
(1768,1568,1)
(468,831,1)
(1284,1736,1)
(1322,52,1)
(460,859,1)
(1604,1077,1)
(1447,1178,1)
(530,713,1)
(168,1737,1)
(526,859,1)
(357,552,1)
(65,1712,1)
(259,1472,1)
(1776,541,1)
(75,578,1)
(1012,859,1)
(506,620,1)
(1457,1218,1)
(1454,766,1)
(263,859,1)
(607,859,1)
(573,1604,1)
(460,902,1)
(575,260,1)
(1050,1336,1)
(904,204,1)
(610,673,1)
(381,1364,1)
(817,136,1)
(1469,1194,1)
(829,421,1)
(423,836,1)
(1504,1153,1)
(1299,263,1)
(278,423,1)
(982,859,1)
(1333,859,1)
(1747,1041,1)
(1505,929,1)
(513,117,1)
(310,1428,1)
(1575,886,1)
(781,52,1)
(1699,435,1)
(1746,1340,1)
(284,585,1)
(296,135,1)
(1143,876,1)
(355,185,1)
(829,1638,1)
(1374,936,1)
(762,1270,1)
(785,1494,1)
(208,573,1)
(492,849,1)
(383,1129,1)
(709,1611,1)
(1665,1655,1)
(23,1348,1)
(996,959,1)
(1604,37,1)
(1353,734,1)
(1722,1783,1)
(1173,859,1)
(630,192,1)
(522,688,1)
(614,52,1)
(15,859,1)
(787,1663,1)
(954,216,1)
(361,501,1)
(384,197,1)
(1247,1687,1)
(1802,8,1)
(411,1273,1)
(714,1327,1)
(975,600,1)
(68,1659,1)
(394,65,1)
(1596,20,1)
(1005,859,1)
(746,993,1)
(482,52,1)
(640,694,1)
(541,335,1)
(750,1216,1)
(1539,1562,1)
(722,107,1)
(1157,1349,1)
(233,922,1)
(304,736,1)
(930,649,1)
(1069,349,1)
(562,1231,1)
(1112,709,1)
(508,1331,1)
(95,925,1)
(590,389,1)
(498,1742,1)
(26,52,1)
(968,562,1)
(926,324,1)
(1350,1120,1)
(1327,30,1)
(1018,958,1)
(1090,1147,1)
(1168,973,1)
(1092,1516,1)
(210,927,1)
(829,734,1)
(716,859,1)
(763,53,1)
(1222,859,1)
(471,820,1)
(1228,169,1)
(1073,75,1)
(1271,249,1)
(1198,9,1)
(1681,807,1)
(1485,447,1)
(998,754,1)
(692,1367,1)
(302,1054,1)
(393,408,1)
(1506,1395,1)
(180,614,1)
(1088,72,1)
(1110,1404,1)
(557,127,1)
(616,153,1)
(634,1448,1)
(386,1005,1)
(679,859,1)
(1619,1552,1)
(601,1127,1)
(276,1394,1)
(56,735,1)
(1377,1462,1)
(1248,859,1)
(414,532,1)
(936,1668,1)
(1560,1762,1)
(1109,369,1)
(554,1692,1)
(505,1359,1)
(1788,1290,1)
(20,1119,1)
(335,842,1)
(312,158,1)
(543,1638,1)
(612,1310,1)
(873,615,1)
(719,859,1)
(1665,1612,1)
(1200,1319,1)
(1203,270,1)
(321,614,1)
(18,676,1)
(1725,97,1)
(741,540,1)
(743,1207,1)
(777,257,1)
(724,1645,1)
(642,63,1)
(1460,1353,1)
(736,1126,1)
(168,1163,1)
(31,481,1)
(190,1530,1)
(1069,52,1)
(843,895,1)
(829,260,1)
(1084,271,1)
(1474,801,1)
(1287,1001,1)
(855,1801,1)
(587,68,1)
(652,598,1)
(1775,822,1)
(1628,34,1)
(367,859,1)
(885,1128,1)
(1106,1029,1)
(739,545,1)
(822,511,1)
(1060,1483,1)
(1343,1620,1)
(944,405,1)
(632,555,1)
(1038,859,1)
(474,291,1)
(61,1161,1)
(245,1491,1)
(683,1050,1)
(1104,1051,1)
(1570,859,1)
(1312,1493,1)
(1120,1013,1)
(506,297,1)
(708,1745,1)
(1231,227,1)
(1145,1425,1)
(439,1004,1)
(1527,206,1)
(365,126,1)
(730,1618,1)
(1714,859,1)
(371,1105,1)
(1710,98,1)
(1403,968,1)
(1331,52,1)
(504,1646,1)
(1303,1247,1)
(1188,1245,1)
(165,413,1)
(277,1473,1)
(1478,1155,1)
(1393,900,1)
(814,1296,1)
(548,111,1)
(822,1319,1)
(705,1008,1)
(937,859,1)
(872,98,1)
(1023,1442,1)
(1651,210,1)
(173,1772,1)
(1073,543,1)
(976,859,1)
(613,225,1)
(1099,1504,1)
(236,621,1)
(15,528,1)
(1225,1781,1)
(584,859,1)
(1073,1325,1)
(1064,573,1)
(955,522,1)
(449,1172,1)
(1130,859,1)
(1429,656,1)
(151,392,1)
(1061,981,1)
(146,1707,1)
(782,882,1)
(1367,539,1)
(1068,1527,1)
(844,681,1)
(1480,1476,1)
(1308,84,1)
(1391,703,1)
(209,675,1)
(596,1408,1)
(1495,859,1)
(1380,324,1)
(374,460,1)
(1516,859,1)
(556,1273,1)
(993,556,1)
(1420,892,1)
(1565,1439,1)
(677,1274,1)
(1444,898,1)
(77,859,1)
(922,859,1)
(1230,935,1)
(657,670,1)
(734,624,1)
(654,1136,1)
(1763,550,1)
(77,1557,1)
(1486,987,1)
(981,548,1)
(744,220,1)
(706,850,1)
(1767,406,1)
(307,199,1)
(667,777,1)
(1105,1407,1)
(933,1222,1)
(711,859,1)
(104,1211,1)
(1588,52,1)
(829,380,1)
(476,1792,1)
(207,859,1)
(339,1517,1)
(38,1806,1)
(429,881,1)
(437,1196,1)
(728,1397,1)
(296,859,1)
(1685,859,1)
(1069,859,1)
(592,909,1)
(70,714,1)
(1151,859,1)
(1081,1208,1)
(1095,1523,1)
(328,759,1)
(1742,11,1)
(1692,1347,1)
(1476,123,1)
(1461,1144,1)
(787,1551,1)
(658,138,1)
(1340,1714,1)
(578,1130,1)
(1131,762,1)
(54,22,1)
(432,859,1)
(1134,83,1)
(233,859,1)
(854,859,1)
(896,760,1)
(1568,1347,1)
(1442,859,1)
(1015,799,1)
(673,306,1)
(1003,1480,1)
(894,393,1)
(260,859,1)
(543,320,1)
(5,1705,1)
(1748,510,1)
(139,859,1)
(912,1097,1)
(1496,375,1)
(852,1094,1)
(273,1351,1)
(854,295,1)
(1334,54,1)
(57,1396,1)
(580,547,1)
(346,596,1)
(102,1466,1)
(82,1567,1)
(1415,582,1)
(275,1588,1)
(1499,1285,1)
(841,226,1)
(1322,1061,1)
(19,860,1)
(312,859,1)
(554,273,1)
(1369,1472,1)
(1537,165,1)
(641,653,1)
(441,574,1)
(1220,1418,1)
(1044,859,1)
(595,565,1)
(1107,1614,1)
(1791,1671,1)
(142,645,1)
(966,618,1)
(979,574,1)
(789,1298,1)
(1749,627,1)
(136,367,1)
(202,305,1)
(1361,217,1)
(1089,1010,1)
(1029,859,1)
(619,1202,1)
(928,877,1)
(433,219,1)
(1239,138,1)
(1705,398,1)
(1761,1782,1)
(1025,26,1)
(1466,207,1)
(1675,1601,1)
(76,402,1)
(1600,513,1)
(269,1038,1)
(1363,1540,1)
(539,49,1)
(1220,25,1)
(945,864,1)
(859,534,1)
(561,869,1)
(623,964,1)
(343,52,1)
(543,1570,1)
(1042,456,1)
(90,1064,1)
(878,1700,1)
(1233,166,1)
(217,1550,1)
(154,110,1)
(1634,169,1)
(1346,426,1)
(1611,200,1)
(1184,237,1)
(628,1447,1)
(119,1723,1)
(60,954,1)
(124,1612,1)
(574,1043,1)
(1674,694,1)
(1202,1685,1)
(431,1786,1)
(435,1734,1)
(241,603,1)
(234,191,1)
(1483,173,1)
(7,1481,1)
(1412,1534,1)
(965,52,1)
(972,226,1)
(1227,1264,1)
(197,839,1)
(938,230,1)
(866,1622,1)
(380,373,1)
(1660,1595,1)
(1533,1517,1)
(482,1082,1)
(850,536,1)
(251,1318,1)
(1526,1137,1)
(103,1282,1)
(542,668,1)
(348,664,1)
(1556,1570,1)
(322,1304,1)
(1240,1618,1)
(624,403,1)
(710,17,1)
(1414,667,1)
(690,1055,1)
(573,944,1)
(1525,997,1)
(831,1539,1)
(568,254,1)
(247,1289,1)
(1576,798,1)
(1265,859,1)
(829,1407,1)
(259,1361,1)
(152,1281,1)
(1218,1397,1)
(543,59,1)
(1526,1741,1)
(420,324,1)
(667,1639,1)
(831,1780,1)
(962,1268,1)
(1728,368,1)
(1358,859,1)
(1424,833,1)
(1356,1637,1)
(1032,1146,1)
(1170,52,1)
(206,1779,1)
(799,1026,1)
(1127,1472,1)
(175,293,1)
(918,1412,1)
(1160,715,1)
(837,140,1)
(29,272,1)
(1425,1118,1)
(1293,1788,1)
(526,1461,1)
(1562,965,1)
(1423,1224,1)
(316,1261,1)
(336,1111,1)
(1771,859,1)
(484,1702,1)
(1801,1190,1)
(1572,770,1)
(1571,361,1)
(1654,859,1)
(1379,884,1)
(1056,400,1)
(1587,739,1)
(1435,859,1)
(553,1249,1)
(1775,1220,1)
(333,859,1)
(1470,36,1)
(1310,432,1)
(1723,1034,1)
(91,1427,1)
(1305,763,1)
(1187,1706,1)
(612,539,1)
(231,525,1)
(730,787,1)
(1734,1769,1)
(1266,1467,1)
(716,52,1)
(822,421,1)
(1220,948,1)
(1675,815,1)
(368,764,1)
(1147,281,1)
(190,1225,1)
(1413,1628,1)
(1351,437,1)
(373,1495,1)
(111,1554,1)
(1133,1271,1)
(1210,683,1)
(405,586,1)
(1117,779,1)
(1599,1501,1)
(4,159,1)
(1592,1542,1)
(629,96,1)
(1616,355,1)
(1351,23,1)
(959,859,1)
(1474,859,1)
(298,289,1)
(1500,1784,1)
(370,961,1)
(1630,859,1)
(62,1233,1)
(1089,859,1)
(1188,1197,1)
(1083,903,1)
(822,1638,1)
(1687,991,1)
(1545,89,1)
(503,184,1)
(1248,52,1)
(1220,59,1)
(1617,859,1)
(1161,347,1)
(12,1324,1)
(1406,1021,1)
(1501,1040,1)
(1342,1421,1)
(107,859,1)
(1381,168,1)
(334,1608,1)
(1370,504,1)
(645,1658,1)
(1029,930,1)
(1803,1151,1)
(1193,1652,1)
(1586,637,1)
(442,91,1)
(1526,264,1)
(1552,1356,1)
(797,1571,1)
(7,324,1)
(1392,1083,1)
(1111,1736,1)
(1445,855,1)
(33,52,1)
(1799,594,1)
(424,1556,1)
(1676,198,1)
(1194,1735,1)
(977,62,1)
(1261,1116,1)
(409,589,1)
(670,971,1)
(360,287,1)
(830,1088,1)
(1482,1635,1)
(936,721,1)
(139,118,1)
(1028,429,1)
(444,134,1)
(822,320,1)
(1484,1430,1)
(47,1641,1)
(1590,1070,1)
(330,859,1)
(1047,1091,1)
(1550,870,1)
(1303,52,1)
(656,2,1)
(1052,1138,1)
(1552,1759,1)
(776,1337,1)
(517,942,1)
(1394,59,1)
(851,1460,1)
(1727,1552,1)
(797,1618,1)
(251,859,1)
(40,1375,1)
(1471,692,1)
(1515,610,1)
(1024,101,1)
(407,1607,1)
(1760,1289,1)
(829,1029,1)
(1487,1787,1)
(806,374,1)
(1739,564,1)
(51,859,1)
(1739,1759,1)
(1166,1479,1)
(205,1513,1)
(30,1759,1)
(1280,1758,1)
(1057,1418,1)
(788,916,1)
(286,669,1)
(459,859,1)
(34,572,1)
(343,859,1)
(1781,577,1)
(1458,480,1)
(69,631,1)
(34,859,1)
(207,1060,1)
(404,882,1)
(1468,67,1)
(1009,1524,1)
(1709,1415,1)
(1415,859,1)
(1608,590,1)
(416,1438,1)
(211,1281,1)
(875,680,1)
(614,1505,1)
(323,188,1)
(1074,1565,1)
(1581,853,1)
(902,1191,1)
(1561,814,1)
(947,672,1)
(253,1804,1)
(655,1065,1)
(1142,33,1)
(1246,52,1)
(991,66,1)
(1498,617,1)
(367,52,1)
(185,1155,1)
(1056,1451,1)
(1489,508,1)
(884,1420,1)
(224,665,1)
(1620,1499,1)
(333,1488,1)
(16,10,1)
(1638,506,1)
(1792,859,1)
(604,904,1)
(1721,1344,1)
(379,1042,1)
(364,918,1)
(923,710,1)
(1588,859,1)
(257,16,1)
(569,693,1)
(829,1570,1)
(1631,113,1)
(1146,1643,1)
(51,778,1)
(203,490,1)
(1103,1110,1)
(1526,1364,1)
(1216,830,1)
(536,591,1)
(632,727,1)
(1341,642,1)
(9,1269,1)
(1678,1796,1)
(1656,2,1)
(1108,319,1)
(538,1785,1)
(1086,1024,1)
(75,1130,1)
(1740,716,1)
(1624,25,1)
(258,151,1)
(308,86,1)
(86,1354,1)
(1175,1693,1)
(543,704,1)
(89,1561,1)
(26,859,1)
(983,859,1)
(1043,68,1)
(173,1017,1)
(1623,1154,1)
(1711,859,1)
(1438,1716,1)
(829,511,1)
(268,859,1)
(1151,442,1)
(1649,859,1)
(983,1277,1)
(1270,1596,1)
(914,288,1)
(695,859,1)
(1611,859,1)
(1511,133,1)
(486,506,1)
(1463,824,1)
(1067,275,1)
(501,329,1)
(1739,859,1)
(413,341,1)
(752,355,1)
(881,781,1)
(646,546,1)
(712,336,1)
(812,351,1)
(1474,807,1)
(118,1759,1)
(436,997,1)
(512,463,1)
(746,859,1)
(250,953,1)
(515,972,1)
(713,789,1)
(372,384,1)
(1786,1446,1)
(1396,114,1)
(480,989,1)
(711,554,1)
(401,1,1)
(472,1317,1)
(1369,601,1)
(1792,52,1)
(858,1287,1)
(715,1417,1)
(1041,743,1)
(74,1396,1)
(458,731,1)
(1249,1732,1)
(72,797,1)
(964,859,1)
(477,1275,1)
(1304,859,1)
(533,132,1)
(1771,515,1)
(958,1583,1)
(1094,118,1)
(1274,1497,1)
(166,526,1)
(345,52,1)
(766,1636,1)
(627,1151,1)
(66,421,1)
(456,1339,1)
(829,416,1)
(256,53,1)
(1039,1709,1)
(1081,859,1)
(80,645,1)
(338,859,1)
(1407,1246,1)
(581,859,1)
(71,864,1)
(1477,1424,1)
(1336,1019,1)
(1005,1048,1)
(1220,1657,1)
(1514,1798,1)
(1426,1627,1)
(1624,734,1)
(37,859,1)
(236,862,1)
(418,264,1)
(342,1384,1)
(543,955,1)
(570,1715,1)
(1163,1737,1)
(1408,1711,1)
(849,838,1)
(1647,859,1)
(922,940,1)
(1138,628,1)
(1246,1644,1)
(1624,1029,1)
(1525,1783,1)
(944,586,1)
(527,1511,1)
(701,718,1)
(631,1198,1)
(797,264,1)
(822,1029,1)
(920,1036,1)
(565,1076,1)
(153,819,1)
(1178,324,1)
(42,785,1)
(822,783,1)
(63,146,1)
(447,1177,1)
(190,1564,1)
(113,242,1)
(770,1322,1)
(218,865,1)
(870,1238,1)
(93,1031,1)
(1691,388,1)
(387,1449,1)
(295,474,1)
(407,678,1)
(967,1018,1)
(226,401,1)
(822,1223,1)
(1252,347,1)
(1122,859,1)
(1649,52,1)
(1557,475,1)
(1458,859,1)
(1744,412,1)
(597,1063,1)
(1630,52,1)
(1784,846,1)
(1647,472,1)
(214,744,1)
(33,859,1)
(636,917,1)
(433,1091,1)
(700,1664,1)
(192,1448,1)
(1290,1676,1)
(410,428,1)
(1300,859,1)
(232,859,1)
(1224,1123,1)
(1114,1492,1)
(523,433,1)
(1457,1605,1)
(520,869,1)
(1214,1093,1)
(757,301,1)
(621,866,1)
(463,57,1)
(420,45,1)
(1451,1600,1)
(1101,49,1)
(883,338,1)
(1332,176,1)
(1222,784,1)
(114,394,1)
(315,955,1)
(1435,52,1)
(141,1573,1)
(815,52,1)
(1066,466,1)
(895,521,1)
(798,996,1)
(949,1121,1)
(1622,352,1)
(1384,1617,1)
(1454,1209,1)
(1174,924,1)
(605,1291,1)
(1182,42,1)
(30,859,1)
(279,52,1)
(1213,1549,1)
(520,561,1)
(159,992,1)
(289,941,1)
(1624,260,1)
(1400,175,1)
(957,177,1)
(98,985,1)
(626,1448,1)
(1121,728,1)
(1122,360,1)
(985,1232,1)
(783,1096,1)
(1689,1620,1)
(30,1426,1)
(1169,1019,1)
(1463,812,1)
(1741,859,1)
(603,1227,1)
(1618,233,1)
(1796,859,1)
(1191,651,1)
(1220,1029,1)
(115,1435,1)
(1594,1286,1)
(611,1691,1)
(1745,340,1)
(1097,1591,1)
(126,1558,1)
(822,1570,1)
(1189,1098,1)
(811,738,1)
(1455,40,1)
(17,1352,1)
(685,186,1)
(829,59,1)
(747,171,1)
(1475,1303,1)
(0,859,1)
(1251,790,1)
(338,1272,1)
(421,467,1)
(1032,785,1)
(573,1707,1)
(229,1197,1)
(509,1400,1)
(822,1355,1)
(632,1799,1)
(516,1656,1)
(937,867,1)
(782,820,1)
(829,1228,1)
(157,170,1)
(1686,492,1)
(1056,913,1)
(871,977,1)
(1473,418,1)
(1695,1258,1)
(1806,1403,1)
(225,331,1)
(216,732,1)
(367,1512,1)
(1244,1513,1)
(660,1117,1)
(1635,1345,1)
(1602,322,1)
(1684,775,1)
(586,859,1)
(429,781,1)
(619,1685,1)
(1326,530,1)
(33,544,1)
(1204,1599,1)
(1682,1632,1)
(547,916,1)
(395,61,1)
(807,575,1)
(473,695,1)
(1132,859,1)
(1346,1293,1)
(131,206,1)
(1268,1548,1)
(882,1089,1)
(1552,859,1)
(455,1468,1)
(1317,803,1)
(1338,196,1)
(1507,424,1)
(919,859,1)
(777,1066,1)
(781,859,1)
(1226,264,1)
(667,655,1)
(1580,345,1)
(1645,41,1)
(324,1131,1)
(822,416,1)
(345,414,1)
(1196,1299,1)
(178,1437,1)
(21,859,1)
(1216,264,1)
(1584,1341,1)
(37,52,1)
(124,1773,1)
(1467,78,1)
(180,321,1)
(1077,37,1)
(783,211,1)
(1128,1448,1)
(39,315,1)
(306,1450,1)
(1715,1112,1)
(1292,630,1)
(1154,859,1)
(1517,1219,1)
(534,894,1)
(1312,975,1)
(1766,947,1)
(243,1602,1)
(1228,1634,1)
(1281,1332,1)
(329,1598,1)
(968,859,1)
(1158,471,1)
(713,1076,1)
(81,1731,1)
(727,494,1)
(1538,533,1)
(340,290,1)
(1657,928,1)
(357,899,1)
(388,73,1)
(45,1515,1)
(92,324,1)
(124,859,1)
(1220,128,1)
(623,1372,1)
(1690,750,1)
(1071,147,1)
(1553,529,1)
(543,416,1)
(1771,975,1)
(1220,1319,1)
(140,1047,1)
(1120,457,1)
(835,52,1)
(577,487,1)
(563,1431,1)
(1087,324,1)
(1220,1154,1)
(794,751,1)
(790,712,1)
(759,162,1)
(1579,489,1)
(401,933,1)
(507,871,1)
(1351,1579,1)
(301,1789,1)
(1366,1761,1)
(1526,1618,1)
(1489,1331,1)
(3,1213,1)
(396,761,1)
(753,602,1)
(1220,734,1)
(669,1684,1)
(1589,635,1)
(1167,6,1)
(676,945,1)
(1404,1191,1)
(13,772,1)
(184,1175,1)
(461,1482,1)
(343,1402,1)
(270,1514,1)
(589,1159,1)
(876,776,1)
(675,20,1)
(1795,753,1)
(1289,330,1)
(822,1092,1)
(900,1590,1)
(1019,579,1)
(756,47,1)
(1794,859,1)
(6,38,1)
(579,1415,1)
(132,1486,1)
(263,726,1)
(1576,52,1)
(1220,1355,1)
(1786,1028,1)
(809,746,1)
(391,1338,1)
(293,1522,1)
(408,1179,1)
(142,768,1)
(378,1044,1)
(829,821,1)
(213,317,1)
(472,1625,1)
(551,1003,1)
(479,1187,1)
(1397,1698,1)
(117,339,1)
(1189,52,1)
(1432,826,1)
(237,926,1)
(730,277,1)
(642,52,1)
(1245,638,1)
(1720,662,1)
(903,1312,1)
(850,859,1)
(856,1500,1)
(822,1407,1)
(620,592,1)
(826,505,1)
(1036,1184,1)
(142,859,1)
(1331,202,1)
(490,381,1)
(594,195,1)
(85,119,1)
(1344,708,1)
(868,679,1)
(384,1199,1)
(1563,1536,1)
(268,52,1)
(1758,273,1)
(255,69,1)
(766,52,1)
(1573,383,1)
(1020,85,1)
(1165,859,1)
(1348,1100,1)
(573,1584,1)
(1076,232,1)
(924,160,1)
(1100,1069,1)
(249,969,1)
(543,421,1)
(627,1803,1)
(1624,948,1)
(899,1137,1)
(288,885,1)
(1779,419,1)
(921,1014,1)
(296,1771,1)
(558,324,1)
(838,1337,1)
(1150,1435,1)
(164,55,1)
(362,922,1)
(1390,31,1)
(472,92,1)
(1497,333,1)
(766,859,1)
(707,4,1)
(829,955,1)
(320,859,1)
(1542,1704,1)
(1159,516,1)
(985,264,1)
(761,1759,1)
(1258,1471,1)
(588,1142,1)
(478,1405,1)
(505,1764,1)
(1777,859,1)
(582,1234,1)
(1609,1653,1)
(720,648,1)
(1716,299,1)
(974,103,1)
(1093,1749,1)
(916,1078,1)
(775,1355,1)
(643,1000,1)
(815,178,1)
(1479,962,1)
(1339,425,1)
(1529,1036,1)
(995,303,1)
(1197,356,1)
(900,1759,1)
(569,835,1)
(1640,36,1)
(1502,298,1)
(543,1657,1)
(446,1663,1)
(880,343,1)
(107,1609,1)
(233,362,1)
(600,416,1)
(1240,264,1)
(999,1081,1)
(892,619,1)
(1349,883,1)
(1775,1134,1)
(688,891,1)
(187,1086,1)
(1563,1651,1)
(987,1581,1)
(1642,229,1)
(543,380,1)
(1205,1401,1)
(917,1180,1)
(1583,269,1)
(1378,455,1)
(820,1328,1)
(863,1484,1)
(635,593,1)
(1035,104,1)
(1462,364,1)
(1119,1748,1)
(329,264,1)
(1792,1642,1)
(1219,605,1)
(987,859,1)
(835,859,1)
(1652,1619,1)
(1264,1541,1)
(674,570,1)
(1646,376,1)
(952,440,1)
(36,1766,1)
(999,194,1)
(975,462,1)
(662,1630,1)
(305,100,1)
(493,1080,1)
(1243,660,1)
(833,1067,1)
(139,852,1)
(1276,33,1)
(914,1448,1)
(943,1012,1)
(822,1228,1)
(1516,1532,1)
(177,859,1)
(1347,747,1)
(1449,365,1)
(412,921,1)
(543,1418,1)
(1492,1441,1)
(265,1068,1)
(1720,1630,1)
(1427,707,1)
(744,1250,1)
(618,1783,1)
(510,193,1)
(220,1250,1)
(586,241,1)
(983,251,1)
(1733,1266,1)
(622,859,1)
(1385,872,1)
(328,479,1)
(1113,1563,1)
(1711,1582,1)
(731,332,1)
(1777,1193,1)
(200,644,1)
(1664,805,1)
(1180,1203,1)
(1251,324,1)
(931,1399,1)
(1459,1487,1)
(901,857,1)
(1444,268,1)
(1387,1626,1)
(1040,859,1)
(323,371,1)
(1624,771,1)
(1014,208,1)
(1285,976,1)
(738,300,1)
(1252,1171,1)
(1751,60,1)
(1494,1503,1)
(1056,420,1)
(854,52,1)
(679,52,1)
(400,1027,1)
(147,1572,1)
(1794,52,1)
(1554,1194,1)
(1016,1381,1)
(926,1311,1)
(1254,125,1)
(398,1510,1)
(1668,1555,1)
(128,604,1)
(576,1474,1)
(823,1357,1)
(297,620,1)
(1082,1753,1)
(822,1100,1)
(1239,15,1)
(275,1535,1)
(898,268,1)
(1337,609,1)
(314,1240,1)
(1194,859,1)
(15,95,1)
(100,26,1)
(1776,827,1)
(1409,1791,1)
(476,1790,1)
(1223,1186,1)
(195,209,1)
(105,890,1)
(1458,52,1)
(380,1495,1)
(1184,848,1)
(909,1500,1)
(1711,52,1)
(1591,32,1)
(347,1553,1)
(1011,1083,1)
(1262,788,1)
(232,52,1)
(45,409,1)
(1143,52,1)
(1472,1526,1)
(687,90,1)
(645,859,1)
(1731,1079,1)
(50,1020,1)
(532,1313,1)
(1237,1195,1)
(207,52,1)
(1679,1544,1)
(1154,542,1)
(529,1670,1)
(742,415,1)
(1624,1657,1)
(862,498,1)
(963,698,1)
(1395,476,1)
(813,56,1)
(303,1104,1)
(1481,1691,1)
(263,52,1)
(1544,859,1)
(686,1688,1)
(965,811,1)
(1527,131,1)
(303,52,1)
(359,70,1)
(1776,1087,1)
(1418,1167,1)
(1171,1016,1)
(1352,1143,1)
(1495,1363,1)
(201,520,1)
(848,237,1)
(222,1152,1)
(96,844,1)
(1805,224,1)
(1708,646,1)
(181,1689,1)
(351,190,1)
(1775,1624,1)
(829,1319,1)
(1531,1496,1)
(877,324,1)
(1549,81,1)
(1372,964,1)
(1281,859,1)
(827,786,1)
(1470,1640,1)
(1710,1181,1)
(819,999,1)
(382,1746,1)
(35,1210,1)
(1087,243,1)
(668,1090,1)
(1302,107,1)
(469,324,1)
(1298,511,1)
(356,1458,1)
(1707,716,1)
(694,859,1)
(133,623,1)
(1012,1593,1)
(272,967,1)
(953,1520,1)
(1347,223,1)
(950,87,1)
(1415,1759,1)
(543,25,1)
(194,1081,1)
(1412,859,1)
(543,260,1)
(994,1416,1)
(520,574,2)
(489,1671,2)
(1140,573,2)
(1192,1132,2)
(218,718,2)
(777,1136,2)
(73,1484,2)
(772,914,2)
(1513,1762,2)
(1201,1787,2)
(210,1513,2)
(1510,1227,2)
(538,574,2)
(360,628,2)
(596,355,2)
(1736,329,2)
(1444,355,2)
(1296,53,2)
(1252,347,2)
(322,1513,2)
(440,823,2)
(1776,573,2)
(3,556,2)
(466,201,2)
(114,1136,2)
(1642,1197,2)
(598,501,2)
(406,628,2)
(962,628,2)
(703,103,2)
(548,219,2)
(324,20,2)
(1282,377,2)
(844,957,2)
(1414,53,2)
(1712,1136,2)
(472,826,2)
(3,573,2)
(255,52,2)
(1414,201,2)
(218,826,2)
(484,1702,2)
(1430,1620,2)
(829,25,2)
(667,573,2)
(1176,1686,2)
(543,734,2)
(667,1327,2)
(809,556,2)
(865,1050,2)
(33,859,2)
(929,1091,2)
(1408,1091,2)
(381,501,2)
(1776,826,2)
(573,944,2)
(636,917,2)
(300,1612,2)
(1233,628,2)
(927,1327,2)
(1781,1136,2)
(1663,395,2)
(812,1513,2)
(968,52,2)
(1349,338,2)
(819,628,2)
(814,53,2)
(833,219,2)
(614,1091,2)
(1774,1396,2)
(402,574,2)
(777,329,2)
(822,1228,2)
(122,1091,2)
(1570,17,2)
(492,859,2)
(1647,395,2)
(713,574,2)
(306,556,2)
(1356,574,2)
(716,1227,2)
(734,859,2)
(1620,1499,2)
(753,1762,2)
(1304,1050,2)
(484,640,2)
(998,329,2)
(1175,687,2)
(1684,628,2)
(466,1050,2)
(218,2,2)
(852,573,2)
(1441,1749,2)
(829,783,2)
(245,214,2)
(754,355,2)
(543,1355,2)
(1066,826,2)
(1530,556,2)
(1415,1759,2)
(1691,1620,2)
(218,556,2)
(387,1227,2)
(673,1136,2)
(1045,718,2)
(777,772,2)
(1712,924,2)
(1512,917,2)
(1762,556,2)
(826,336,2)
(394,355,2)
(410,219,2)
(1568,273,2)
(1477,219,2)
(144,1120,2)
(328,355,2)
(1586,788,2)
(210,395,2)
(1481,1513,2)
(1540,721,2)
(768,573,2)
(1550,1369,2)
(869,574,2)
(679,219,2)
(931,1050,2)
(1646,573,2)
(1582,1068,2)
(30,53,2)
(114,20,2)
(925,1227,2)
(1396,1036,2)
(815,859,2)
(1371,1762,2)
(405,1227,2)
(1527,206,2)
(207,859,2)
(77,574,2)
(998,788,2)
(973,501,2)
(1056,924,2)
(620,1500,2)
(139,573,2)
(1683,1517,2)
(512,1513,2)
(256,53,2)
(774,1513,2)
(322,787,2)
(114,628,2)
(491,53,2)
(394,826,2)
(673,1762,2)
(393,408,2)
(1380,1513,2)
(317,1091,2)
(1481,1762,2)
(1549,826,2)
(1261,1227,2)
(1691,556,2)
(1711,1620,2)
(544,1091,2)
(696,1500,2)
(1396,201,2)
(732,1227,2)
(1315,219,2)
(1587,718,2)
(364,1227,2)
(73,201,2)
(1106,408,2)
(1358,859,2)
(1083,718,2)
(1104,628,2)
(978,924,2)
(463,355,2)
(1711,772,2)
(1789,772,2)
(1493,718,2)
(1042,682,2)
(667,395,2)
(1779,1787,2)
(1683,395,2)
(1223,573,2)
(1766,859,2)
(463,1620,2)
(57,395,2)
(1764,336,2)
(463,718,2)
(1005,395,2)
(632,2,2)
(33,1091,2)
(1026,1227,2)
(1071,1091,2)
(306,329,2)
(1408,924,2)
(1122,859,2)
(1576,52,2)
(1629,408,2)
(250,1091,2)
(865,917,2)
(1322,1091,2)
(1603,395,2)
(1685,859,2)
(463,826,2)
(270,1514,2)
(1188,1245,2)
(1086,1091,2)
(114,1686,2)
(284,103,2)
(546,1136,2)
(1651,329,2)
(1210,1050,2)
(1772,1525,2)
(1671,437,2)
(1805,31,2)
(1603,245,2)
(512,201,2)
(1459,1787,2)
(788,916,2)
(322,395,2)
(1509,501,2)
(632,1484,2)
(829,1319,2)
(927,226,2)
(602,1762,2)
(305,100,2)
(821,1136,2)
(1664,574,2)
(1567,826,2)
(998,1120,2)
(1767,628,2)
(1582,336,2)
(1491,343,2)
(458,1028,2)
(673,574,2)
(1517,1219,2)
(1448,514,2)
(1624,1355,2)
(1776,1327,2)
(861,1091,2)
(821,201,2)
(54,22,2)
(1741,501,2)
(777,1762,2)
(57,226,2)
(394,226,2)
(577,1136,2)
(679,52,2)
(645,1759,2)
(1132,1227,2)
(599,395,2)
(1675,1091,2)
(1124,718,2)
(1685,1227,2)
(296,859,2)
(464,1050,2)
(1784,846,2)
(65,718,2)
(210,1050,2)
(576,1050,2)
(218,573,2)
(1153,219,2)
(1081,628,2)
(673,958,2)
(1080,219,2)
(1066,226,2)
(512,682,2)
(5,573,2)
(1488,1227,2)
(632,1327,2)
(1219,1327,2)
(196,1387,2)
(92,1120,2)
(631,219,2)
(334,682,2)
(1635,40,2)
(1122,628,2)
(1602,1513,2)
(191,1227,2)
(1132,859,2)
(394,1513,2)
(32,408,2)
(1202,573,2)
(1605,1218,2)
(667,355,2)
(322,556,2)
(797,1618,2)
(555,201,2)
(823,1091,2)
(833,1091,2)
(124,1612,2)
(93,219,2)
(1408,556,2)
(905,219,2)
(65,2,2)
(1232,201,2)
(146,1227,2)
(817,917,2)
(754,226,2)
(1711,1036,2)
(1154,957,2)
(1374,1517,2)
(177,859,2)
(1248,219,2)
(512,1120,2)
(1123,1620,2)
(351,556,2)
(1651,1620,2)
(65,574,2)
(322,573,2)
(1447,20,2)
(1580,219,2)
(829,421,2)
(1582,1620,2)
(1336,1019,2)
(57,1620,2)
(1455,924,2)
(1216,501,2)
(971,1349,2)
(333,1227,2)
(1370,573,2)
(1246,52,2)
(1180,682,2)
(1554,219,2)
(754,958,2)
(596,1513,2)
(505,336,2)
(565,574,2)
(543,1319,2)
(582,924,2)
(632,574,2)
(673,826,2)
(1408,718,2)
(1136,695,2)
(1414,2,2)
(1776,226,2)
(1117,779,2)
(876,1337,2)
(1683,336,2)
(420,336,2)
(812,573,2)
(368,1227,2)
(210,1327,2)
(821,1327,2)
(707,4,2)
(1348,1671,2)
(1309,628,2)
(259,1472,2)
(1654,408,2)
(400,924,2)
(1393,1607,2)
(1683,53,2)
(1239,1227,2)
(562,917,2)
(1712,1068,2)
(1599,1091,2)
(365,1227,2)
(1193,574,2)
(210,826,2)
(51,859,2)
(251,31,2)
(1264,959,2)
(919,573,2)
(1711,1484,2)
(1408,772,2)
(114,573,2)
(1304,787,2)
(477,1091,2)
(206,1787,2)
(777,53,2)
(1545,355,2)
(421,718,2)
(1408,1136,2)
(765,1762,2)
(1010,1500,2)
(229,1197,2)
(306,787,2)
(1563,1651,2)
(1347,747,2)
(857,581,2)
(1396,226,2)
(580,1517,2)
(1665,882,2)
(594,20,2)
(568,573,2)
(684,924,2)
(1239,573,2)
(410,52,2)
(92,1513,2)
(998,20,2)
(829,948,2)
(777,1620,2)
(306,958,2)
(1164,772,2)
(822,380,2)
(295,1091,2)
(409,2,2)
(634,462,2)
(63,1227,2)
(918,1412,2)
(987,859,2)
(1602,1136,2)
(49,52,2)
(57,682,2)
(708,573,2)
(1218,1397,2)
(865,718,2)
(1056,1517,2)
(1469,1091,2)
(1072,1227,2)
(1545,336,2)
(1658,1227,2)
(1117,628,2)
(1440,718,2)
(543,1029,2)
(587,826,2)
(985,1618,2)
(1396,1091,2)
(1285,976,2)
(54,628,2)
(73,826,2)
(558,17,2)
(1172,245,2)
(1408,1327,2)
(1776,1762,2)
(1302,107,2)
(891,1218,2)
(1711,958,2)
(1525,1783,2)
(103,1227,2)
(25,859,2)
(673,336,2)
(1683,201,2)
(210,574,2)
(1582,1136,2)
(1513,1371,2)
(1523,574,2)
(865,2,2)
(543,380,2)
(989,627,2)
(859,534,2)
(1582,201,2)
(1641,1227,2)
(935,1618,2)
(114,53,2)
(1466,207,2)
(916,1517,2)
(320,53,2)
(1757,859,2)
(981,1091,2)
(777,718,2)
(1226,1369,2)
(1470,36,2)
(1412,1227,2)
(1248,52,2)
(812,351,2)
(466,556,2)
(388,573,2)
(101,1091,2)
(1338,1387,2)
(1457,1517,2)
(346,1762,2)
(466,329,2)
(218,1513,2)
(581,628,2)
(420,958,2)
(998,1136,2)
(1161,245,2)
(1617,1091,2)
(547,1517,2)
(21,573,2)
(1691,924,2)
(114,1513,2)
(1511,574,2)
(754,573,2)
(596,1136,2)
(1706,355,2)
(1687,718,2)
(1641,573,2)
(1472,501,2)
(1601,1091,2)
(60,573,2)
(829,2,2)
(721,1517,2)
(1541,959,2)
(236,1227,2)
(265,1068,2)
(1101,573,2)
(822,1092,2)
(342,1091,2)
(1031,1248,2)
(3,1136,2)
(923,17,2)
(1056,226,2)
(1227,1513,2)
(705,219,2)
(114,1620,2)
(493,410,2)
(1,2,2)
(543,955,2)
(1396,1136,2)
(1708,573,2)
(92,324,2)
(722,917,2)
(1221,1091,2)
(1712,1620,2)
(218,1327,2)
(624,628,2)
(139,118,2)
(1404,1191,2)
(1735,1091,2)
(902,573,2)
(1651,395,2)
(1189,1028,2)
(114,336,2)
(416,628,2)
(1691,772,2)
(192,408,2)
(821,1091,2)
(555,1762,2)
(974,103,2)
(1013,946,2)
(466,924,2)
(998,1762,2)
(1495,52,2)
(555,1050,2)
(442,1227,2)
(1270,20,2)
(3,574,2)
(1280,273,2)
(806,573,2)
(927,329,2)
(1647,958,2)
(242,395,2)
(998,787,2)
(1282,573,2)
(667,1513,2)
(1183,1327,2)
(329,1618,2)
(1050,1336,2)
(673,201,2)
(1169,924,2)
(1396,1513,2)
(926,17,2)
(1342,628,2)
(198,924,2)
(1396,1484,2)
(1545,1050,2)
(1233,166,2)
(632,201,2)
(433,219,2)
(822,1657,2)
(831,882,2)
(1711,355,2)
(1156,1369,2)
(1515,226,2)
(1094,1227,2)
(777,788,2)
(415,1227,2)
(555,772,2)
(1146,785,2)
(73,329,2)
(472,201,2)
(31,226,2)
(65,917,2)
(596,1620,2)
(1545,1136,2)
(536,628,2)
(1078,859,2)
(1776,787,2)
(821,826,2)
(11,671,2)
(953,1091,2)
(998,226,2)
(394,573,2)
(652,501,2)
(854,52,2)
(1072,573,2)
(459,556,2)
(1056,787,2)
(1481,924,2)
(1265,917,2)
(219,431,2)
(451,1036,2)
(543,1418,2)
(775,628,2)
(1119,408,2)
(927,788,2)
(596,826,2)
(667,1484,2)
(1160,628,2)
(1749,627,2)
(532,219,2)
(596,958,2)
(463,1787,2)
(213,1091,2)
(316,573,2)
(927,1050,2)
(218,772,2)
(1712,2,2)
(160,859,2)
(1508,41,2)
(394,924,2)
(659,628,2)
(1582,1327,2)
(1066,355,2)
(610,1136,2)
(1396,574,2)
(1723,917,2)
(1651,201,2)
(804,395,2)
(456,682,2)
(1458,859,2)
(1381,395,2)
(278,1227,2)
(466,395,2)
(662,1091,2)
(394,1517,2)
(96,957,2)
(470,219,2)
(1341,1227,2)
(1602,574,2)
(822,1407,2)
(460,573,2)
(114,1787,2)
(1484,1430,2)
(343,52,2)
(695,1120,2)
(1048,395,2)
(1683,355,2)
(1670,245,2)
(676,917,2)
(346,395,2)
(388,2,2)
(1408,788,2)
(1799,20,2)
(263,859,2)
(555,556,2)
(226,2,2)
(1618,233,2)
(73,1513,2)
(829,865,2)
(1558,1227,2)
(1777,574,2)
(463,787,2)
(1334,54,2)
(1097,408,2)
(218,226,2)
(1566,788,2)
(1776,1513,2)
(1712,1120,2)
(1307,1227,2)
(1434,573,2)
(107,859,2)
(900,1759,2)
(780,1136,2)
(420,1120,2)
(829,329,2)
(1231,917,2)
(555,1091,2)
(512,1686,2)
(322,1787,2)
(1481,772,2)
(976,355,2)
(1077,1227,2)
(423,1227,2)
(754,1686,2)
(709,628,2)
(543,421,2)
(1308,219,2)
(578,395,2)
(1529,17,2)
(1683,1513,2)
(227,917,2)
(470,1091,2)
(314,1227,2)
(475,574,2)
(822,421,2)
(877,628,2)
(1396,958,2)
(558,324,2)
(338,859,2)
(998,826,2)
(1712,395,2)
(1711,556,2)
(783,211,2)
(1082,1091,2)
(927,201,2)
(1624,59,2)
(632,1068,2)
(1754,1227,2)
(836,264,2)
(220,1491,2)
(37,859,2)
(1378,1036,2)
(815,1091,2)
(924,160,2)
(1456,1091,2)
(586,52,2)
(708,1227,2)
(649,408,2)
(826,505,2)
(1776,1484,2)
(347,245,2)
(187,219,2)
(346,1050,2)
(754,336,2)
(921,573,2)
(147,1572,2)
(1408,574,2)
(201,520,2)
(472,336,2)
(1199,1226,2)
(258,788,2)
(619,1685,2)
(1481,1620,2)
(1023,573,2)
(1237,1091,2)
(713,1076,2)
(645,859,2)
(1506,476,2)
(543,1657,2)
(821,395,2)
(1093,1749,2)
(1399,1050,2)
(57,1513,2)
(437,1196,2)
(92,1136,2)
(596,1484,2)
(1355,628,2)
(581,859,2)
(927,2,2)
(723,820,2)
(1505,1091,2)
(463,556,2)
(1008,219,2)
(346,201,2)
(287,628,2)
(1776,788,2)
(1624,1686,2)
(1220,1029,2)
(19,860,2)
(1545,2,2)
(1234,924,2)
(175,336,2)
(441,574,2)
(1304,958,2)
(45,1620,2)
(1396,718,2)
(1462,1227,2)
(57,2,2)
(346,2,2)
(1331,52,2)
(1652,574,2)
(1188,1197,2)
(190,573,2)
(757,772,2)
(857,628,2)
(336,1111,2)
(610,201,2)
(1116,573,2)
(1304,573,2)
(1380,1136,2)
(1066,466,2)
(1400,336,2)
(1322,219,2)
(1056,826,2)
(1325,245,2)
(852,1227,2)
(1310,539,2)
(466,574,2)
(1431,219,2)
(1304,201,2)
(388,1050,2)
(829,511,2)
(446,245,2)
(156,721,2)
(998,1036,2)
(632,1120,2)
(73,1050,2)
(277,264,2)
(632,1091,2)
(1456,219,2)
(658,573,2)
(1602,201,2)
(1481,329,2)
(388,574,2)
(548,1091,2)
(694,245,2)
(1647,859,2)
(1709,924,2)
(329,31,2)
(210,1517,2)
(1704,628,2)
(36,1227,2)
(1711,1513,2)
(1708,958,2)
(394,1484,2)
(998,201,2)
(1486,573,2)
(684,958,2)
(543,416,2)
(62,628,2)
(942,574,2)
(66,718,2)
(477,219,2)
(57,201,2)
(1525,924,2)
(364,573,2)
(1274,573,2)
(673,329,2)
(346,787,2)
(919,958,2)
(1354,622,2)
(474,219,2)
(667,1762,2)
(394,53,2)
(420,1762,2)
(316,1261,2)
(1588,1091,2)
(1602,788,2)
(10,1068,2)
(596,1068,2)
(1241,1686,2)
(333,859,2)
(118,1227,2)
(465,273,2)
(1112,628,2)
(346,53,2)
(1024,219,2)
(829,355,2)
(1040,859,2)
(1551,245,2)
(1582,329,2)
(346,1620,2)
(1534,1227,2)
(433,1091,2)
(253,1227,2)
(353,41,2)
(482,219,2)
(271,628,2)
(330,859,2)
(821,329,2)
(787,395,2)
(1439,1218,2)
(787,245,2)
(65,556,2)
(1481,958,2)
(264,31,2)
(667,226,2)
(1304,52,2)
(394,1620,2)
(1435,52,2)
(1481,1120,2)
(472,958,2)
(1545,1513,2)
(1502,41,2)
(821,718,2)
(880,277,2)
(1345,924,2)
(1396,355,2)
(824,958,2)
(718,265,2)
(667,958,2)
(1066,556,2)
(346,355,2)
(114,2,2)
(527,133,2)
(1617,859,2)
(1486,1227,2)
(512,20,2)
(812,1762,2)
(1491,277,2)
(1771,226,2)
(546,958,2)
(124,859,2)
(544,219,2)
(503,184,2)
(790,336,2)
(1357,219,2)
(981,219,2)
(1776,201,2)
(1291,1327,2)
(1600,1517,2)
(610,329,2)
(3,1762,2)
(1364,1717,2)
(1263,219,2)
(147,1091,2)
(865,556,2)
(1558,573,2)
(677,1274,2)
(764,1227,2)
(218,1762,2)
(91,1227,2)
(190,1762,2)
(1134,408,2)
(1708,1513,2)
(571,917,2)
(45,1513,2)
(57,718,2)
(255,219,2)
(490,501,2)
(1414,826,2)
(64,1500,2)
(329,787,2)
(7,958,2)
(614,859,2)
(1712,20,2)
(210,329,2)
(806,1227,2)
(1304,329,2)
(309,574,2)
(388,395,2)
(1414,1050,2)
(1651,1513,2)
(1324,1783,2)
(982,859,2)
(1396,826,2)
(754,826,2)
(7,788,2)
(1765,1028,2)
(1547,628,2)
(205,1513,2)
(306,201,2)
(1189,859,2)
(1776,355,2)
(1501,1091,2)
(1066,1136,2)
(1460,628,2)
(1228,1671,2)
(927,574,2)
(1151,1227,2)
(129,1686,2)
(646,1120,2)
(1408,573,2)
(865,788,2)
(903,739,2)
(754,628,2)
(1507,17,2)
(1582,788,2)
(71,864,2)
(397,718,2)
(1582,395,2)
(1515,573,2)
(1683,772,2)
(178,1091,2)
(306,395,2)
(679,859,2)
(114,958,2)
(673,1513,2)
(346,718,2)
(1028,429,2)
(774,1120,2)
(992,184,2)
(512,826,2)
(1711,1327,2)
(1056,574,2)
(1195,1091,2)
(512,1787,2)
(1683,329,2)
(1626,1517,2)
(632,573,2)
(1414,1620,2)
(57,1484,2)
(1688,17,2)
(1602,958,2)
(1686,492,2)
(512,1136,2)
(17,1337,2)
(584,1759,2)
(47,1227,2)
(167,573,2)
(807,324,2)
(709,1611,2)
(684,1050,2)
(865,1484,2)
(1066,1050,2)
(1025,476,2)
(388,788,2)
(1024,1091,2)
(77,859,2)
(937,1749,2)
(871,859,2)
(403,628,2)
(1711,336,2)
(1310,432,2)
(75,395,2)
(65,329,2)
(1582,1036,2)
(1337,1153,2)
(1424,1091,2)
(345,52,2)
(1003,123,2)
(511,574,2)
(1611,859,2)
(821,1686,2)
(65,1068,2)
(218,787,2)
(864,1265,2)
(463,957,2)
(506,620,2)
(526,859,2)
(1526,501,2)
(466,772,2)
(0,859,2)
(111,1091,2)
(820,882,2)
(644,628,2)
(98,985,2)
(463,395,2)
(279,273,2)
(1167,917,2)
(1515,1448,2)
(279,859,2)
(512,355,2)
(791,1767,2)
(539,1227,2)
(1515,826,2)
(1069,1671,2)
(57,329,2)
(1283,273,2)
(589,2,2)
(1396,573,2)
(1220,948,2)
(138,573,2)
(1711,329,2)
(732,573,2)
(1582,226,2)
(127,1302,2)
(1474,1050,2)
(829,628,2)
(1683,556,2)
(1351,574,2)
(756,573,2)
(596,395,2)
(1481,395,2)
(1487,1787,2)
(1545,1484,2)
(484,245,2)
(720,682,2)
(1776,772,2)
(1681,628,2)
(440,219,2)
(512,1068,2)
(1414,787,2)
(1011,718,2)
(885,1484,2)
(222,329,2)
(684,1136,2)
(1712,1036,2)
(57,1120,2)
(73,787,2)
(7,1327,2)
(1683,826,2)
(632,1787,2)
(1527,1787,2)
(466,1120,2)
(1481,355,2)
(1498,1671,2)
(197,1369,2)
(1359,1251,2)
(1582,1517,2)
(1414,1327,2)
(610,1762,2)
(761,573,2)
(599,245,2)
(1051,628,2)
(684,1327,2)
(394,1327,2)
(65,395,2)
(1595,1686,2)
(704,245,2)
(1396,1050,2)
(693,864,2)
(1312,718,2)
(65,958,2)
(1542,859,2)
(884,1227,2)
(1545,574,2)
(210,324,2)
(351,573,2)
(1150,1435,2)
(1787,1036,2)
(1711,787,2)
(512,1050,2)
(1712,787,2)
(139,1227,2)
(513,1517,2)
(453,1513,2)
(1358,628,2)
(120,718,2)
(1346,924,2)
(965,882,2)
(1504,1153,2)
(45,556,2)
(1173,52,2)
(942,1095,2)
(632,628,2)
(218,1517,2)
(1644,273,2)
(1347,223,2)
(698,345,2)
(822,260,2)
(640,694,2)
(78,31,2)
(214,1491,2)
(1185,957,2)
(850,859,2)
(1700,686,2)
(472,573,2)
(823,854,2)
(192,1448,2)
(1782,1327,2)
(781,52,2)
(851,628,2)
(1056,1762,2)
(555,573,2)
(1711,1517,2)
(97,628,2)
(618,1500,2)
(1044,1686,2)
(420,556,2)
(12,245,2)
(512,2,2)
(512,1091,2)
(1428,1227,2)
(1725,628,2)
(1615,628,2)
(114,788,2)
(463,1762,2)
(774,573,2)
(1239,138,2)
(427,718,2)
(865,787,2)
(240,219,2)
(336,329,2)
(555,1068,2)
(76,574,2)
(1692,1347,2)
(118,859,2)
(512,226,2)
(1350,1120,2)
(1698,1517,2)
(1720,219,2)
(551,123,2)
(388,556,2)
(1734,1691,2)
(1482,1635,2)
(237,17,2)
(746,859,2)
(994,219,2)
(998,1513,2)
(586,1227,2)
(1790,1197,2)
(1624,416,2)
(171,273,2)
(1712,772,2)
(1722,1466,2)
(75,1130,2)
(827,1091,2)
(737,329,2)
(1408,1787,2)
(103,573,2)
(466,958,2)
(322,201,2)
(835,864,2)
(26,476,2)
(1313,1091,2)
(7,924,2)
(658,1227,2)
(1327,53,2)
(180,219,2)
(1380,1120,2)
(114,329,2)
(1542,628,2)
(51,573,2)
(1194,859,2)
(1712,1513,2)
(1019,924,2)
(1776,924,2)
(865,329,2)
(1056,573,2)
(15,859,2)
(1194,52,2)
(118,1759,2)
(783,245,2)
(829,20,2)
(65,1050,2)
(596,1036,2)
(1414,1120,2)
(1151,52,2)
(687,573,2)
(541,917,2)
(1556,1036,2)
(1066,787,2)
(1375,924,2)
(1396,682,2)
(444,245,2)
(822,59,2)
(410,1091,2)
(1651,336,2)
(241,1227,2)
(1023,1227,2)
(531,917,2)
(927,958,2)
(1052,628,2)
(1598,277,2)
(557,917,2)
(89,53,2)
(1425,1671,2)
(325,628,2)
(784,2,2)
(463,1513,2)
(1378,1468,2)
(1711,917,2)
(1749,573,2)
(799,1026,2)
(1262,788,2)
(1322,52,2)
(1683,2,2)
(1495,859,2)
(346,1136,2)
(1384,1091,2)
(459,573,2)
(1292,408,2)
(7,1050,2)
(1582,355,2)
(419,1787,2)
(1602,787,2)
(939,53,2)
(45,201,2)
(999,628,2)
(912,408,2)
(845,628,2)
(1680,1091,2)
(1289,628,2)
(1396,772,2)
(563,1091,2)
(1317,787,2)
(1066,924,2)
(739,718,2)
(299,0,2)
(1346,1293,2)
(1098,1028,2)
(1188,627,2)
(1415,924,2)
(657,971,2)
(132,573,2)
(154,628,2)
(169,859,2)
(1127,501,2)
(463,682,2)
(463,1091,2)
(1334,628,2)
(815,219,2)
(394,1050,2)
(1514,682,2)
(1143,1337,2)
(275,1091,2)
(736,1227,2)
(632,772,2)
(774,1136,2)
(900,1607,2)
(188,273,2)
(919,859,2)
(1056,1120,2)
(998,1484,2)
(307,103,2)
(1608,682,2)
(396,1227,2)
(865,826,2)
(1775,1134,2)
(1221,1720,2)
(322,2,2)
(998,718,2)
(466,788,2)
(7,573,2)
(1300,1227,2)
(822,1100,2)
(501,329,2)
(574,826,2)
(1483,924,2)
(57,1327,2)
(1086,219,2)
(420,226,2)
(1388,1500,2)
(1028,917,2)
(1602,718,2)
(1189,52,2)
(69,219,2)
(184,573,2)
(777,787,2)
(829,1029,2)
(1380,201,2)
(1584,642,2)
(593,628,2)
(731,1028,2)
(634,1448,2)
(1463,573,2)
(361,501,2)
(829,1091,2)
(322,1327,2)
(829,917,2)
(466,1517,2)
(1304,859,2)
(797,501,2)
(59,408,2)
(1265,859,2)
(1708,1762,2)
(1643,785,2)
(1333,573,2)
(651,1227,2)
(1081,859,2)
(1634,1671,2)
(1332,245,2)
(60,1227,2)
(1087,324,2)
(608,355,2)
(468,882,2)
(210,336,2)
(919,1136,2)
(948,1170,2)
(346,556,2)
(1712,1762,2)
(165,1227,2)
(822,955,2)
(142,645,2)
(187,1091,2)
(1669,17,2)
(1637,574,2)
(1646,376,2)
(155,1036,2)
(1056,788,2)
(640,245,2)
(80,1227,2)
(1178,20,2)
(73,772,2)
(643,98,2)
(821,573,2)
(57,772,2)
(469,53,2)
(1220,59,2)
(346,788,2)
(1526,1618,2)
(1544,859,2)
(1408,1068,2)
(896,1448,2)
(829,1418,2)
(7,336,2)
(1408,226,2)
(1361,1369,2)
(868,679,2)
(322,1036,2)
(927,395,2)
(1791,1671,2)
(211,1281,2)
(1056,556,2)
(861,219,2)
(378,1686,2)
(965,52,2)
(1310,1258,2)
(190,1136,2)
(512,574,2)
(1739,573,2)
(546,1513,2)
(1691,1762,2)
(1121,1397,2)
(1515,329,2)
(1276,1091,2)
(959,859,2)
(742,1227,2)
(1165,573,2)
(232,859,2)
(632,826,2)
(1165,1521,2)
(812,556,2)
(1469,219,2)
(1414,336,2)
(1649,52,2)
(1339,682,2)
(927,787,2)
(625,408,2)
(1107,721,2)
(472,1513,2)
(985,264,2)
(1038,859,2)
(1517,1327,2)
(761,1227,2)
(210,573,2)
(1651,2,2)
(1728,573,2)
(829,718,2)
(623,574,2)
(745,395,2)
(667,772,2)
(754,556,2)
(1347,273,2)
(1553,245,2)
(596,718,2)
(1763,628,2)
(786,1091,2)
(1631,395,2)
(1084,859,2)
(997,749,2)
(512,924,2)
(821,1036,2)
(166,526,2)
(65,1686,2)
(523,219,2)
(881,917,2)
(856,1500,2)
(45,573,2)
(370,864,2)
(1111,1736,2)
(1776,1050,2)
(101,1263,2)
(1728,1227,2)
(596,1762,2)
(1153,1091,2)
(449,859,2)
(754,772,2)
(115,1227,2)
(555,395,2)
(322,336,2)
(977,628,2)
(613,1091,2)
(865,859,2)
(268,355,2)
(684,329,2)
(904,957,2)
(1277,31,2)
(437,574,2)
(949,1397,2)
(1716,628,2)
(57,53,2)
(463,2,2)
(322,1620,2)
(479,355,2)
(65,573,2)
(684,20,2)
(1711,1136,2)
(865,1517,2)
(1389,219,2)
(346,1517,2)
(7,395,2)
(49,1227,2)
(1200,1028,2)
(1548,859,2)
(431,917,2)
(190,1513,2)
(190,556,2)
(394,1136,2)
(927,573,2)
(684,788,2)
(351,1513,2)
(919,1513,2)
(698,1091,2)
(459,1136,2)
(1544,355,2)
(1463,1136,2)
(634,255,2)
(394,1091,2)
(927,772,2)
(609,1153,2)
(1485,1513,2)
(1165,1227,2)
(821,787,2)
(429,917,2)
(627,573,2)
(600,628,2)
(877,324,2)
(1322,859,2)
(218,355,2)
(341,1227,2)
(983,859,2)
(558,1464,2)
(1396,1517,2)
(411,1136,2)
(203,501,2)
(285,1227,2)
(65,788,2)
(1552,1759,2)
(1066,395,2)
(998,1620,2)
(1133,1271,2)
(276,408,2)
(772,1484,2)
(1452,628,2)
(829,320,2)
(1479,962,2)
(610,826,2)
(684,1091,2)
(550,628,2)
(1066,2,2)
(579,924,2)
(1056,355,2)
(253,573,2)
(778,1227,2)
(512,718,2)
(1424,219,2)
(1691,388,2)
(440,1091,2)
(1289,330,2)
(322,958,2)
(1582,574,2)
(829,1068,2)
(88,1028,2)
(823,219,2)
(80,573,2)
(584,859,2)
(927,924,2)
(1494,1369,2)
(119,1723,2)
(168,395,2)
(1111,329,2)
(65,826,2)
(936,1517,2)
(1545,53,2)
(1624,1319,2)
(1286,245,2)
(1783,1500,2)
(388,924,2)
(1184,237,2)
(65,1120,2)
(110,628,2)
(555,788,2)
(291,219,2)
(1285,355,2)
(890,628,2)
(922,859,2)
(1711,1762,2)
(1495,721,2)
(1624,1418,2)
(1499,355,2)
(998,336,2)
(1416,1091,2)
(140,1091,2)
(863,1484,2)
(872,98,2)
(1481,556,2)
(829,787,2)
(651,573,2)
(240,1091,2)
(821,1787,2)
(964,859,2)
(1304,1136,2)
(226,401,2)
(420,1513,2)
(210,1484,2)
(7,556,2)
(596,329,2)
(117,1517,2)
(927,1136,2)
(787,1663,2)
(1651,924,2)
(1731,826,2)
(17,1143,2)
(493,219,2)
(1307,573,2)
(290,1227,2)
(1686,1337,2)
(392,788,2)
(1125,41,2)
(868,219,2)
(892,1227,2)
(1515,1513,2)
(1630,52,2)
(1712,329,2)
(1776,395,2)
(1219,1291,2)
(355,1050,2)
(1291,1678,2)
(1515,336,2)
(927,1620,2)
(1545,1620,2)
(1432,826,2)
(882,1089,2)
(1319,1028,2)
(1711,1787,2)
(114,355,2)
(1258,539,2)
(1739,1759,2)
(1171,395,2)
(878,17,2)
(667,336,2)
(1651,788,2)
(596,573,2)
(1056,958,2)
(391,1387,2)
(1537,573,2)
(464,1019,2)
(216,573,2)
(706,628,2)
(445,201,2)
(1624,260,2)
(1442,573,2)
(699,329,2)
(839,1369,2)
(1057,917,2)
(1500,1635,2)
(1602,1762,2)
(1602,1620,2)
(463,788,2)
(29,958,2)
(1758,273,2)
(1466,924,2)
(1220,1355,2)
(1515,787,2)
(281,957,2)
(388,201,2)
(428,1091,2)
(1150,573,2)
(92,201,2)
(1617,219,2)
(1772,924,2)
(821,336,2)
(1420,573,2)
(777,556,2)
(73,1517,2)
(107,52,2)
(396,573,2)
(1238,1369,2)
(1720,1091,2)
(1640,1227,2)
(865,772,2)
(601,501,2)
(1087,1602,2)
(466,787,2)
(138,1227,2)
(1130,245,2)
(1273,859,2)
(1099,1153,2)
(1431,1091,2)
(627,1151,2)
(1304,336,2)
(653,1120,2)
(1304,53,2)
(829,1327,2)
(836,573,2)
(634,219,2)
(466,2,2)
(247,628,2)
(1066,574,2)
(596,1787,2)
(667,1620,2)
(1496,1484,2)
(259,1369,2)
(596,556,2)
(1570,1036,2)
(86,628,2)
(648,682,2)
(463,53,2)
(678,900,2)
(1792,859,2)
(1497,1227,2)
(1281,859,2)
(512,958,2)
(1548,628,2)
(1066,53,2)
(356,627,2)
(1632,201,2)
(1481,1327,2)
(968,859,2)
(1131,20,2)
(829,1050,2)
(555,329,2)
(1396,556,2)
(1691,787,2)
(983,31,2)
(632,788,2)
(1484,1620,2)
(466,1620,2)
(853,573,2)
(18,917,2)
(651,584,2)
(829,1638,2)
(829,53,2)
(191,573,2)
(459,1120,2)
(1327,30,2)
(821,1620,2)
(0,292,2)
(836,1227,2)
(998,1050,2)
(284,585,2)
(507,871,2)
(410,859,2)
(388,1120,2)
(886,245,2)
(8,226,2)
(512,788,2)
(596,788,2)
(455,17,2)
(782,924,2)
(1582,556,2)
(829,226,2)
(512,53,2)
(940,31,2)
(829,1228,2)
(596,336,2)
(983,251,2)
(619,573,2)
(7,201,2)
(1590,1607,2)
(1505,219,2)
(1570,859,2)
(747,859,2)
(1015,573,2)
(559,17,2)
(363,53,2)
(47,573,2)
(801,1050,2)
(466,336,2)
(291,1091,2)
(472,1762,2)
(998,556,2)
(965,859,2)
(754,788,2)
(322,1136,2)
(1739,859,2)
(1239,15,2)
(297,1500,2)
(1543,219,2)
(1723,312,2)
(1545,226,2)
(1252,1381,2)
(1030,573,2)
(760,772,2)
(621,671,2)
(1562,882,2)
(1140,1227,2)
(730,31,2)
(1589,628,2)
(1426,53,2)
(128,957,2)
(306,826,2)
(463,329,2)
(1657,877,2)
(1074,1218,2)
(1100,1069,2)
(1150,1227,2)
(1412,573,2)
(1775,1220,2)
(1650,628,2)
(1158,820,2)
(962,1548,2)
(412,573,2)
(1602,2,2)
(843,1036,2)
(642,1227,2)
(152,245,2)
(681,957,2)
(671,573,2)
(1588,859,2)
(1427,184,2)
(829,734,2)
(1041,574,2)
(1711,52,2)
(632,1513,2)
(865,1091,2)
(1745,573,2)
(1711,1050,2)
(1304,1513,2)
(1499,1285,2)
(747,273,2)
(756,1227,2)
(1066,788,2)
(16,1068,2)
(142,859,2)
(1240,264,2)
(1059,628,2)
(90,573,2)
(829,59,2)
(927,1517,2)
(277,31,2)
(1248,859,2)
(57,957,2)
(65,336,2)
(546,1120,2)
(139,859,2)
(346,1036,2)
(935,264,2)
(36,573,2)
(388,1651,2)
(420,574,2)
(667,1068,2)
(1552,574,2)
(1212,1513,2)
(588,1091,2)
(299,628,2)
(1524,1227,2)
(1656,2,2)
(632,395,2)
(1582,1513,2)
(646,1136,2)
(1712,957,2)
(1575,1794,2)
(673,556,2)
(1388,859,2)
(739,324,2)
(1451,1517,2)
(646,859,2)
(114,1068,2)
(1545,772,2)
(1725,706,2)
(375,1484,2)
(388,826,2)
(269,201,2)
(1414,772,2)
(728,1397,2)
(1446,1028,2)
(506,1500,2)
(1582,718,2)
(579,150,2)
(3,201,2)
(1598,787,2)
(1408,1517,2)
(204,957,2)
(463,772,2)
(943,1012,2)
(1264,1576,2)
(799,1227,2)
(955,1218,2)
(1157,1491,2)
(1771,859,2)
(646,1513,2)
(7,772,2)
(1274,1497,2)
(1165,859,2)
(1142,1091,2)
(160,788,2)
(1429,2,2)
(1133,1227,2)
(865,226,2)
(1409,1671,2)
(761,859,2)
(57,355,2)
(821,682,2)
(526,628,2)
(1064,573,2)
(1414,1068,2)
(1529,1036,2)
(1663,449,2)
(1592,1542,2)
(754,1120,2)
(1608,1173,2)
(463,573,2)
(343,277,2)
(1796,807,2)
(326,1787,2)
(40,1375,2)
(1220,734,2)
(1537,165,2)
(104,628,2)
(1396,957,2)
(346,917,2)
(1712,917,2)
(185,1155,2)
(829,380,2)
(1481,1517,2)
(633,958,2)
(42,785,2)
(114,826,2)
(1414,924,2)
(1458,52,2)
(998,1787,2)
(1776,917,2)
(482,1091,2)
(1775,1624,2)
(539,573,2)
(1617,52,2)
(65,924,2)
(95,573,2)
(1172,1073,2)
(998,2,2)
(218,1120,2)
(1414,1036,2)
(998,917,2)
(928,628,2)
(777,355,2)
(1066,573,2)
(1691,395,2)
(1204,1091,2)
(289,41,2)
(1435,573,2)
(1375,1346,2)
(1711,1091,2)
(972,226,2)
(114,1517,2)
(673,1120,2)
(1553,859,2)
(1237,219,2)
(771,1686,2)
(1126,307,2)
(1142,33,2)
(1120,1013,2)
(615,628,2)
(612,573,2)
(388,1136,2)
(948,41,2)
(1602,1120,2)
(251,859,2)
(65,226,2)
(711,859,2)
(167,1227,2)
(591,628,2)
(463,574,2)
(1651,1136,2)
(1531,1484,2)
(218,1484,2)
(705,1091,2)
(596,917,2)
(1396,917,2)
(1281,245,2)
(1312,975,2)
(413,573,2)
(1428,573,2)
(1576,859,2)
(52,105,2)
(675,20,2)
(843,17,2)
(372,1369,2)
(529,245,2)
(1192,1227,2)
(1582,1762,2)
(322,53,2)
(218,53,2)
(1520,1091,2)
(1217,628,2)
(810,355,2)
(466,1762,2)
(330,628,2)
(218,788,2)
(1331,100,2)
(1711,395,2)
(40,924,2)
(1733,31,2)
(1380,556,2)
(819,999,2)
(463,336,2)
(1120,958,2)
(270,682,2)
(1091,634,2)
(1035,628,2)
(1113,1691,2)
(481,226,2)
(691,539,2)
(829,826,2)
(213,219,2)
(1651,1517,2)
(73,226,2)
(596,226,2)
(822,1570,2)
(372,384,2)
(1031,1091,2)
(1796,1327,2)
(79,917,2)
(1555,721,2)
(632,329,2)
(73,1327,2)
(1168,501,2)
(1056,329,2)
(596,787,2)
(822,511,2)
(290,573,2)
(1066,1120,2)
(466,1484,2)
(45,226,2)
(698,219,2)
(210,787,2)
(3,826,2)
(777,395,2)
(222,324,2)
(1031,219,2)
(616,628,2)
(687,859,2)
(1250,1491,2)
(1500,1784,2)
(954,859,2)
(480,627,2)
(210,1136,2)
(865,201,2)
(829,1407,2)
(1396,1787,2)
(919,1762,2)
(1481,336,2)
(667,826,2)
(1266,31,2)
(1545,924,2)
(331,342,2)
(632,1762,2)
(463,924,2)
(394,957,2)
(998,1068,2)
(115,573,2)
(1651,1120,2)
(1408,1711,2)
(1427,707,2)
(665,31,2)
(868,1091,2)
(1304,1120,2)
(1554,1091,2)
(1659,826,2)
(1456,180,2)
(632,53,2)
(72,797,2)
(65,1036,2)
(1340,1714,2)
(1539,965,2)
(173,1017,2)
(1463,1762,2)
(1175,573,2)
(340,573,2)
(67,17,2)
(835,859,2)
(1561,53,2)
(667,1787,2)
(57,826,2)
(27,219,2)
(1312,859,2)
(573,1707,2)
(1408,1513,2)
(766,859,2)
(208,573,2)
(1066,1327,2)
(917,682,2)
(57,1050,2)
(638,476,2)
(1357,1091,2)
(507,628,2)
(712,336,2)
(555,1484,2)
(574,1043,2)
(150,1722,2)
(509,336,2)
(555,1120,2)
(1442,859,2)
(1329,1491,2)
(1702,245,2)
(380,721,2)
(1757,1227,2)
(820,1328,2)
(1572,1091,2)
(1029,408,2)
(195,20,2)
(1516,1227,2)
(322,826,2)
(306,574,2)
(39,1218,2)
(813,273,2)
(15,573,2)
(35,1050,2)
(568,1227,2)
(646,556,2)
(1362,1227,2)
(865,355,2)
(1282,1227,2)
(113,245,2)
(1145,1671,2)
(1159,2,2)
(1794,859,2)
(1742,671,2)
(789,574,2)
(1005,859,2)
(37,1227,2)
(1630,219,2)
(1092,1516,2)
(27,1091,2)
(1766,573,2)
(398,1300,2)
(966,1500,2)
(695,859,2)
(389,682,2)
(1776,1068,2)
(1545,788,2)
(335,917,2)
(114,1036,2)
(1246,273,2)
(1304,574,2)
(19,53,2)
(484,444,2)
(1463,1513,2)
(1182,785,2)
(900,859,2)
(346,826,2)
(1174,924,2)
(1707,1227,2)
(483,336,2)
(268,859,2)
(1397,1517,2)
(33,52,2)
(1244,1513,2)
(447,1513,2)
(1227,1264,2)
(924,788,2)
(864,917,2)
(610,1513,2)
(632,718,2)
(613,219,2)
(463,226,2)
(1151,573,2)
(927,826,2)
(162,479,2)
(1020,917,2)
(746,556,2)
(210,556,2)
(306,573,2)
(1712,1050,2)
(835,52,2)
(1307,859,2)
(394,395,2)
(133,574,2)
(399,1396,2)
(13,772,2)
(677,573,2)
(1647,1136,2)
(1449,1227,2)
(632,355,2)
(1359,336,2)
(1417,628,2)
(1222,2,2)
(218,1620,2)
(744,1491,2)
(829,772,2)
(398,1227,2)
(1602,53,2)
(1604,37,2)
(572,628,2)
(776,1337,2)
(777,226,2)
(1276,219,2)
(945,917,2)
(1647,1762,2)
(628,324,2)
(318,943,2)
(684,957,2)
(578,245,2)
(471,820,2)
(231,628,2)
(1416,219,2)
(93,1091,2)
(1802,226,2)
(1406,1671,2)
(684,1787,2)
(822,1418,2)
(684,1036,2)
(310,1227,2)
(352,671,2)
(394,682,2)
(36,1766,2)
(1619,1552,2)
(673,573,2)
(850,628,2)
(65,1091,2)
(829,260,2)
(114,957,2)
(1691,1327,2)
(225,219,2)
(533,1227,2)
(1313,219,2)
(1344,1227,2)
(73,1136,2)
(781,917,2)
(707,184,2)
(1582,1050,2)
(1804,573,2)
(57,1686,2)
(478,1620,2)
(234,573,2)
(975,628,2)
(754,1036,2)
(632,1620,2)
(604,957,2)
(719,408,2)
(754,1327,2)
(1572,1322,2)
(1565,1218,2)
(449,395,2)
(623,964,2)
(512,787,2)
(1759,53,2)
(742,573,2)
(902,1227,2)
(1745,1227,2)
(1712,1686,2)
(1380,324,2)
(1713,219,2)
(859,408,2)
(1467,31,2)
(65,1517,2)
(1776,556,2)
(1727,574,2)
(998,958,2)
(1128,1448,2)
(153,628,2)
(346,336,2)
(1776,2,2)
(408,1448,2)
(1147,957,2)
(404,882,2)
(212,1413,2)
(218,1136,2)
(555,1513,2)
(1507,1036,2)
(998,682,2)
(304,573,2)
(1363,721,2)
(821,20,2)
(388,1484,2)
(219,917,2)
(1273,1136,2)
(1583,269,2)
(1647,556,2)
(1518,556,2)
(346,1120,2)
(1407,1246,2)
(1092,573,2)
(908,718,2)
(114,226,2)
(472,574,2)
(45,2,2)
(1118,1671,2)
(1056,1620,2)
(1746,628,2)
(754,957,2)
(837,1091,2)
(982,628,2)
(114,1050,2)
(642,52,2)
(763,53,2)
(200,628,2)
(743,574,2)
(345,859,2)
(169,1671,2)
(432,539,2)
(584,1227,2)
(821,574,2)
(92,958,2)
(1444,268,2)
(1454,766,2)
(114,682,2)
(177,1153,2)
(65,1484,2)
(460,859,2)
(865,1136,2)
(1700,17,2)
(686,17,2)
(883,1491,2)
(874,628,2)
(512,1762,2)
(233,922,2)
(1602,336,2)
(1414,556,2)
(1279,408,2)
(617,1671,2)
(1760,628,2)
(473,1120,2)
(961,864,2)
(865,1513,2)
(388,787,2)
(579,1415,2)
(1776,1620,2)
(1479,628,2)
(903,718,2)
(1073,395,2)
(1114,1492,2)
(394,958,2)
(596,1120,2)
(1638,1500,2)
(745,245,2)
(1408,395,2)
(690,201,2)
(1554,1194,2)
(985,201,2)
(1414,1484,2)
(515,226,2)
(23,1671,2)
(517,574,2)
(1220,1319,2)
(1481,226,2)
(684,628,2)
(306,1120,2)
(829,574,2)
(1711,201,2)
(1612,882,2)
(799,573,2)
(250,219,2)
(882,1500,2)
(777,2,2)
(1380,1762,2)
(1735,219,2)
(1414,718,2)
(1414,788,2)
(958,1583,2)
(964,574,2)
(998,772,2)
(142,1227,2)
(65,53,2)
(1069,859,2)
(1091,219,2)
(909,1500,2)
(805,309,2)
(700,574,2)
(159,184,2)
(858,395,2)
(401,933,2)
(1227,959,2)
(1747,574,2)
(1678,1796,2)
(1602,1050,2)
(1328,1665,2)
(754,201,2)
(323,273,2)
(1304,1036,2)
(178,219,2)
(1408,329,2)
(1647,826,2)
(747,1759,2)
(779,1358,2)
(1073,245,2)
(614,219,2)
(394,1686,2)
(1751,1227,2)
(543,260,2)
(254,1227,2)
(377,573,2)
(1066,336,2)
(332,1028,2)
(33,219,2)
(821,355,2)
(1692,273,2)
(388,1762,2)
(1468,67,2)
(1073,543,2)
(575,628,2)
(777,1120,2)
(132,1165,2)
(1110,1191,2)
(218,917,2)
(831,1539,2)
(65,682,2)
(684,201,2)
(870,1369,2)
(442,573,2)
(492,1337,2)
(357,552,2)
(1319,1189,2)
(420,573,2)
(829,955,2)
(554,574,2)
(114,556,2)
(1582,772,2)
(1618,31,2)
(1103,1448,2)
(1651,958,2)
(1690,501,2)
(57,1136,2)
(1096,245,2)
(1651,1327,2)
(1582,53,2)
(1753,1091,2)
(1275,1091,2)
(45,336,2)
(777,574,2)
(1026,51,2)
(995,628,2)
(322,1068,2)
(1166,628,2)
(45,329,2)
(100,26,2)
(1408,1050,2)
(527,574,2)
(114,201,2)
(517,942,2)
(829,1787,2)
(1325,395,2)
(1328,468,2)
(57,20,2)
(947,573,2)
(1331,859,2)
(556,1136,2)
(309,77,2)
(346,1484,2)
(971,1491,2)
(394,574,2)
(822,25,2)
(610,787,2)
(1473,31,2)
(546,1762,2)
(655,1036,2)
(1108,917,2)
(347,1553,2)
(185,1050,2)
(821,226,2)
(176,245,2)
(246,1369,2)
(1306,226,2)
(79,817,2)
(1611,628,2)
(183,1686,2)
(1640,573,2)
(1252,395,2)
(952,219,2)
(463,1120,2)
(92,556,2)
(941,41,2)
(242,245,2)
(432,1546,2)
(38,917,2)
(92,574,2)
(1691,1050,2)
(1318,31,2)
(1646,836,2)
(1683,226,2)
(1649,859,2)
(1328,882,2)
(1526,264,2)
(148,395,2)
(684,1513,2)
(1066,1517,2)
(901,628,2)
(298,41,2)
(82,826,2)
(761,1759,2)
(394,1787,2)
(1651,556,2)
(113,395,2)
(913,1050,2)
(1489,100,2)
(321,1091,2)
(423,573,2)
(1197,627,2)
(463,1686,2)
(684,556,2)
(1683,1327,2)
(463,917,2)
(555,787,2)
(209,20,2)
(875,1671,2)
(684,2,2)
(1599,1040,2)
(630,408,2)
(55,245,2)
(1032,329,2)
(1497,573,2)
(3,958,2)
(487,1136,2)
(68,1659,2)
(512,1484,2)
(632,556,2)
(1392,1083,2)
(92,573,2)
(892,573,2)
(45,1136,2)
(1776,53,2)
(944,586,2)
(1607,355,2)
(394,628,2)
(821,1762,2)
(829,1686,2)
(416,859,2)
(331,219,2)
(800,1484,2)
(1804,21,2)
(1639,1787,2)
(960,924,2)
(610,395,2)
(1539,882,2)
(1651,1762,2)
(1254,958,2)
(1680,219,2)
(1481,1484,2)
(346,1513,2)
(1207,574,2)
(65,355,2)
(459,958,2)
(1463,1120,2)
(673,226,2)
(262,1068,2)
(65,201,2)
(718,1068,2)
(210,201,2)
(754,917,2)
(1481,1136,2)
(927,336,2)
(61,245,2)
(632,226,2)
(1636,184,2)
(7,787,2)
(998,395,2)
(543,59,2)
(1043,826,2)
(1056,1136,2)
(449,245,2)
(938,355,2)
(138,1307,2)
(1143,52,2)
(767,924,2)
(1187,355,2)
(302,1227,2)
(1089,1500,2)
(1545,329,2)
(1442,1227,2)
(1683,787,2)
(774,958,2)
(1545,1762,2)
(1796,859,2)
(1776,574,2)
(1014,573,2)
(777,1327,2)
(673,787,2)
(1324,1575,2)
(218,201,2)
(1522,336,2)
(1225,1136,2)
(376,1150,2)
(1647,1513,2)
(1421,628,2)
(1414,1136,2)
(232,52,2)
(207,924,2)
(133,623,2)
(1683,1762,2)
(754,1484,2)
(75,245,2)
(922,31,2)
(7,1762,2)
(1556,17,2)
(812,1136,2)
(1526,1741,2)
(218,1050,2)
(1691,329,2)
(1602,556,2)
(673,1448,2)
(955,522,2)
(1166,1479,2)
(898,355,2)
(84,219,2)
(1792,1197,2)
(355,185,2)
(1468,17,2)
(829,1513,2)
(829,682,2)
(342,1617,2)
(1355,859,2)
(286,628,2)
(596,1091,2)
(1305,53,2)
(754,682,2)
(749,52,2)
(1405,607,2)
(123,1388,2)
(821,1050,2)
(1537,1227,2)
(1714,859,2)
(420,329,2)
(394,1036,2)
(1136,1120,2)
(829,1762,2)
(1525,997,2)
(1678,1327,2)
(1712,1484,2)
(322,1484,2)
(114,1327,2)
(684,395,2)
(85,917,2)
(957,177,2)
(1711,718,2)
(865,1036,2)
(1396,628,2)
(1514,859,2)
(1675,815,2)
(1602,1036,2)
(1069,52,2)
(1602,924,2)
(1708,556,2)
(512,336,2)
(593,874,2)
(1250,657,2)
(865,336,2)
(1481,826,2)
(1803,573,2)
(504,573,2)
(926,324,2)
(376,573,2)
(1245,1197,2)
(1075,1686,2)
(114,1762,2)
(521,17,2)
(730,277,2)
(1251,324,2)
(667,1120,2)
(70,1327,2)
(206,1779,2)
(7,2,2)
(1138,628,2)
(818,408,2)
(1364,357,2)
(1408,1484,2)
(1689,1620,2)
(597,1050,2)
(684,573,2)
(380,1495,2)
(1691,826,2)
(230,355,2)
(865,1120,2)
(1607,1444,2)
(836,1618,2)
(1780,882,2)
(317,219,2)
(123,1500,2)
(1481,787,2)
(612,1227,2)
(822,320,2)
(684,574,2)
(184,1175,2)
(534,1448,2)
(822,416,2)
(92,826,2)
(1691,355,2)
(1771,975,2)
(667,787,2)
(1580,1091,2)
(865,1787,2)
(667,1036,2)
(249,1227,2)
(522,859,2)
(174,245,2)
(1220,1657,2)
(1056,201,2)
(1113,1563,2)
(322,1762,2)
(1396,787,2)
(225,1091,2)
(382,628,2)
(555,1787,2)
(1170,859,2)
(918,1227,2)
(394,788,2)
(1711,788,2)
(555,53,2)
(218,958,2)
(1685,573,2)
(569,835,2)
(73,2,2)
(1786,917,2)
(388,772,2)
(829,1657,2)
(769,219,2)
(210,924,2)
(556,1273,2)
(1304,1484,2)
(620,859,2)
(774,1762,2)
(808,184,2)
(1414,573,2)
(555,924,2)
(1153,250,2)
(1711,924,2)
(543,948,2)
(694,859,2)
(1594,245,2)
(1683,1120,2)
(388,1327,2)
(680,1671,2)
(1012,859,2)
(312,859,2)
(0,628,2)
(979,574,2)
(7,329,2)
(420,787,2)
(1693,573,2)
(118,573,2)
(555,718,2)
(1058,772,2)
(1641,316,2)
(555,355,2)
(1470,573,2)
(1753,219,2)
(791,628,2)
(684,1120,2)
(1268,628,2)
(1027,924,2)
(1533,1517,2)
(1198,219,2)
(846,1635,2)
(1246,859,2)
(1486,987,2)
(463,1517,2)
(421,859,2)
(821,2,2)
(1597,917,2)
(217,1369,2)
(777,201,2)
(672,1227,2)
(1290,924,2)
(1602,329,2)
(628,20,2)
(201,574,2)
(1195,219,2)
(165,1759,2)
(1346,426,2)
(1205,1686,2)
(7,355,2)
(1599,219,2)
(1408,1620,2)
(1788,924,2)
(865,53,2)
(829,1355,2)
(512,573,2)
(1245,476,2)
(687,52,2)
(1712,1091,2)
(1073,75,2)
(394,718,2)
(65,787,2)
(1066,1620,2)
(1714,628,2)
(1413,628,2)
(684,682,2)
(1683,1620,2)
(573,1604,2)
(988,201,2)
(1602,226,2)
(701,718,2)
(1408,958,2)
(1326,574,2)
(386,395,2)
(1126,103,2)
(1214,1749,2)
(374,573,2)
(777,1517,2)
(1050,924,2)
(493,1091,2)
(1707,716,2)
(1068,1527,2)
(1152,329,2)
(829,395,2)
(1054,1227,2)
(68,826,2)
(398,573,2)
(512,556,2)
(1304,2,2)
(7,1620,2)
(684,336,2)
(346,1091,2)
(65,1136,2)
(815,52,2)
(420,772,2)
(169,52,2)
(998,355,2)
(65,772,2)
(1369,1472,2)
(301,772,2)
(73,395,2)
(1579,1671,2)
(210,1620,2)
(463,1036,2)
(1066,329,2)
(777,1484,2)
(288,1484,2)
(804,245,2)
(99,1686,2)
(865,574,2)
(1682,201,2)
(935,501,2)
(512,772,2)
(1066,1484,2)
(1488,573,2)
(463,958,2)
(504,1227,2)
(92,1762,2)
(522,52,2)
(1481,788,2)
(778,573,2)
(1481,2,2)
(1645,41,2)
(466,826,2)
(684,1068,2)
(777,1068,2)
(1054,1739,2)
(1538,1227,2)
(754,395,2)
(862,498,2)
(829,1517,2)
(207,52,2)
(958,201,2)
(516,2,2)
(1557,574,2)
(65,1787,2)
(736,573,2)
(1602,1787,2)
(1627,53,2)
(1620,355,2)
(1015,1227,2)
(366,277,2)
(1775,822,2)
(1722,1783,2)
(1415,859,2)
(1775,829,2)
(359,1327,2)
(1683,574,2)
(1414,226,2)
(1137,501,2)
(596,772,2)
(927,1484,2)
(1651,226,2)
(1545,1327,2)
(846,461,2)
(1071,219,2)
(667,924,2)
(1601,219,2)
(224,31,2)
(466,226,2)
(1515,1136,2)
(1162,957,2)
(1065,1036,2)
(394,20,2)
(57,1036,2)
(592,1500,2)
(1304,1787,2)
(388,958,2)
(1691,1517,2)
(1768,273,2)
(1407,273,2)
(387,573,2)
(994,1091,2)
(163,628,2)
(1216,1618,2)
(1711,226,2)
(854,1091,2)
(374,1227,2)
(254,761,2)
(1076,232,2)
(463,1327,2)
(306,336,2)
(1679,355,2)
(1414,1787,2)
(322,1120,2)
(321,219,2)
(821,628,2)
(1066,1513,2)
(920,1036,2)
(1691,958,2)
(15,1227,2)
(1304,1327,2)
(822,783,2)
(821,556,2)
(1602,355,2)
(1712,201,2)
(1695,539,2)
(646,573,2)
(670,1491,2)
(755,628,2)
(848,17,2)
(596,1050,2)
(595,574,2)
(317,868,2)
(100,476,2)
(346,924,2)
(1304,1762,2)
(1144,628,2)
(367,52,2)
(543,320,2)
(1463,556,2)
(1112,709,2)
(1624,734,2)
(1066,772,2)
(984,408,2)
(233,859,2)
(550,674,2)
(1711,53,2)
(610,573,2)
(667,53,2)
(319,917,2)
(45,574,2)
(754,787,2)
(1711,859,2)
(667,556,2)
(933,2,2)
(1630,1091,2)
(1137,1759,2)
(1173,859,2)
(1222,859,2)
(73,958,2)
(682,628,2)
(1377,1227,2)
(1343,1620,2)
(610,226,2)
(829,201,2)
(388,355,2)
(1582,917,2)
(682,303,2)
(829,924,2)
(821,917,2)
(102,924,2)
(314,573,2)
(822,573,2)
(1396,395,2)
(461,1635,2)
(1477,1091,2)
(1396,20,2)
(145,1068,2)
(1746,1340,2)
(376,1227,2)
(829,556,2)
(522,1218,2)
(1647,787,2)
(807,628,2)
(1665,1612,2)
(340,1227,2)
(1396,1327,2)
(1480,123,2)
(774,556,2)
(1602,1327,2)
(394,329,2)
(1806,917,2)
(1226,264,2)
(1416,563,2)
(7,1120,2)
(1088,501,2)
(1584,1227,2)
(1377,573,2)
(1300,859,2)
(646,1762,2)
(518,1686,2)
(1560,1762,2)
(686,558,2)
(1414,574,2)
(512,395,2)
(1062,124,2)
(998,1686,2)
(1592,628,2)
(667,2,2)
(1199,1369,2)
(1423,1620,2)
(51,1227,2)
(218,924,2)
(19,469,2)
(1501,219,2)
(1304,718,2)
(466,1513,2)
(873,628,2)
(777,1050,2)
(1094,573,2)
(65,1620,2)
(1414,1517,2)
(627,1227,2)
(1588,52,2)
(1691,1513,2)
(368,573,2)
(45,958,2)
(243,1602,2)
(420,826,2)
(1651,210,2)
(632,917,2)
(1408,917,2)
(766,52,2)
(1008,1091,2)
(754,53,2)
(1776,329,2)
(56,273,2)
(914,1448,2)
(1260,1227,2)
(1396,1120,2)
(111,219,2)
(508,100,2)
(673,395,2)
(312,52,2)
(632,1517,2)
(1040,219,2)
(1798,682,2)
(1763,550,2)
(1787,17,2)
(959,1513,2)
(1776,958,2)
(998,1091,2)
(822,948,2)
(486,1500,2)
(26,52,2)
(341,573,2)
(1235,395,2)
(186,556,2)
(1654,859,2)
(1007,1227,2)
(660,628,2)
(1602,395,2)
(345,1091,2)
(963,1091,2)
(1785,574,2)
(114,1484,2)
(218,395,2)
(306,1136,2)
(1089,859,2)
(41,864,2)
(57,556,2)
(1683,924,2)
(555,917,2)
(424,1036,2)
(57,574,2)
(1712,556,2)
(1571,501,2)
(57,1068,2)
(114,924,2)
(1582,958,2)
(1440,1124,2)
(621,866,2)
(1079,826,2)
(439,329,2)
(667,1050,2)
(193,408,2)
(662,219,2)
(1563,1691,2)
(73,1762,2)
(260,859,2)
(1438,628,2)
(1311,17,2)
(520,869,2)
(890,715,2)
(1564,1762,2)
(312,917,2)
(669,628,2)
(1194,1091,2)
(1396,788,2)
(460,1227,2)
(1218,949,2)
(1503,1369,2)
(1462,573,2)
(49,859,2)
(986,721,2)
(821,53,2)
(173,924,2)
(346,573,2)
(407,355,2)
(684,787,2)
(1691,336,2)
(245,1491,2)
(1776,718,2)
(930,408,2)
(1692,323,2)
(1708,1136,2)
(1582,826,2)
(576,1474,2)
(1396,924,2)
(1624,25,2)
(1606,1396,2)
(998,574,2)
(645,573,2)
(684,1484,2)
(482,859,2)
(1628,628,2)
(754,1050,2)
(420,395,2)
(351,1136,2)
(1336,924,2)
(952,1091,2)
(436,924,2)
(1712,628,2)
(543,1570,2)
(1572,219,2)
(1721,1344,2)
(803,787,2)
(797,264,2)
(998,957,2)
(1038,201,2)
(1683,1050,2)
(1261,573,2)
(1092,1227,2)
(1247,718,2)
(7,1517,2)
(822,1454,2)
(956,721,2)
(1712,574,2)
(472,556,2)
(611,1691,2)
(424,17,2)
(394,336,2)
(2,896,2)
(1269,219,2)
(1712,958,2)
(1515,201,2)
(1751,573,2)
(357,501,2)
(394,556,2)
(346,772,2)
(588,219,2)
(1385,98,2)
(1552,859,2)
(73,1620,2)
(943,628,2)
(1543,1091,2)
(1408,1036,2)
(1420,1227,2)
(420,2,2)
(1711,826,2)
(667,574,2)
(1220,260,2)
(1259,539,2)
(1220,957,2)
(684,1620,2)
(999,1081,2)
(521,1036,2)
(1623,957,2)
(1625,329,2)
(724,41,2)
(570,628,2)
(164,245,2)
(1624,1044,2)
(1403,917,2)
(1414,1513,2)
(1740,1227,2)
(1749,1227,2)
(822,1355,2)
(338,1491,2)
(1582,1787,2)
(446,395,2)
(622,628,2)
(1712,1787,2)
(596,201,2)
(754,574,2)
(472,787,2)
(822,734,2)
(1414,329,2)
(1492,573,2)
(38,1806,2)
(7,1484,2)
(561,574,2)
(1056,1327,2)
(322,772,2)
(15,528,2)
(937,859,2)
(1653,917,2)
(210,1120,2)
(218,1068,2)
(1582,787,2)
(91,573,2)
(901,857,2)
(338,52,2)
(232,574,2)
(377,1227,2)
(1478,1050,2)
(1004,329,2)
(170,882,2)
(57,924,2)
(996,959,2)
(512,329,2)
(260,628,2)
(1576,959,2)
(346,574,2)
(1536,1691,2)
(596,924,2)
(706,850,2)
(1520,1675,2)
(1608,590,2)
(57,958,2)
(1777,859,2)
(512,628,2)
(466,1136,2)
(343,859,2)
(1787,1378,2)
(1084,628,2)
(1741,807,2)
(770,219,2)
(1335,628,2)
(829,1100,2)
(122,219,2)
(1712,682,2)
(126,573,2)
(1018,958,2)
(1054,573,2)
(684,226,2)
(1647,573,2)
(1581,1227,2)
(45,1762,2)
(1333,1227,2)
(1396,2,2)
(822,1227,2)
(683,1050,2)
(1263,1649,2)
(1076,574,2)
(684,826,2)
(1450,226,2)
(114,917,2)
(124,820,2)
(1663,245,2)
(1776,1036,2)
(472,329,2)
(829,1484,2)
(1304,826,2)
(865,1762,2)
(114,718,2)
(1683,1136,2)
(1776,1136,2)
(1526,1137,2)
(1354,628,2)
(388,226,2)
(1654,1279,2)
(1408,201,2)
(73,1120,2)
(57,336,2)
(754,1762,2)
(1515,395,2)
(645,1227,2)
(57,573,2)
(322,226,2)
(667,329,2)
(388,1513,2)
(1510,573,2)
(218,1036,2)
(2,772,2)
(584,573,2)
(1287,395,2)
(137,226,2)
(1602,1484,2)
(1396,1762,2)
(1095,574,2)
(406,859,2)
(1683,958,2)
(202,100,2)
(57,1091,2)
(684,355,2)
(346,329,2)
(1414,958,2)
(449,1172,2)
(111,1554,2)
(877,495,2)
(887,1068,2)
(1391,103,2)
(496,1369,2)
(822,398,2)
(278,573,2)
(1712,355,2)
(632,1050,2)
(1369,501,2)
(1736,222,2)
(1500,924,2)
(21,1227,2)
(1380,958,2)
(969,573,2)
(1209,184,2)
(158,917,2)
(1337,609,2)
(1776,336,2)
(418,31,2)
(933,1222,2)
(65,1327,2)
(414,1091,2)
(1435,859,2)
(1609,917,2)
(1582,573,2)
(1062,820,2)
(73,573,2)
(1324,245,2)
(1009,573,2)
(1418,859,2)
(306,1513,2)
(1691,1120,2)
(888,574,2)
(1245,638,2)
(1744,573,2)
(1258,1471,2)
(45,395,2)
(255,859,2)
(895,1036,2)
(555,574,2)
(817,367,2)
(34,628,2)
(559,1036,2)
(50,917,2)
(7,1136,2)
(1602,1304,2)
(532,1091,2)
(954,1227,2)
(563,219,2)
(211,245,2)
(512,1620,2)
(1711,1120,2)
(1186,573,2)
(918,573,2)
(1651,355,2)
(1712,826,2)
(1647,201,2)
(750,501,2)
(919,556,2)
(57,788,2)
(322,924,2)
(322,355,2)
(1520,219,2)
(596,1327,2)
(1712,718,2)
(116,1227,2)
(268,52,2)
(1582,1120,2)
(1367,539,2)
(754,1068,2)
(257,1068,2)
(279,52,2)
(1116,1227,2)
(822,954,2)
(793,355,2)
(716,52,2)
(563,482,2)
(308,628,2)
(105,890,2)
(781,859,2)
(667,788,2)
(1303,859,2)
(428,219,2)
(1545,958,2)
(1056,395,2)
(311,787,2)
(52,628,2)
(476,1792,2)
(1408,1762,2)
(394,772,2)
(1683,573,2)
(1218,1517,2)
(684,1686,2)
(315,1218,2)
(1712,1517,2)
(1515,1120,2)
(1767,406,2)
(1315,1091,2)
(564,573,2)
(769,1091,2)
(388,329,2)
(131,1787,2)
(1545,556,2)
(1408,2,2)
(1275,219,2)
(1635,924,2)
(1263,1091,2)
(674,859,2)
(622,859,2)
(234,1227,2)
(1392,718,2)
(1192,573,2)
(545,718,2)
(384,1369,2)
(514,1109,2)
(1141,1028,2)
(1591,408,2)
(1752,1327,2)
(388,336,2)
(98,201,2)
(1441,1321,2)
(1474,807,2)
(1344,573,2)
(1026,573,2)
(1196,574,2)
(596,1517,2)
(632,787,2)
(953,219,2)
(1202,1227,2)
(632,20,2)
(1260,573,2)
(132,1486,2)
(1298,574,2)
(1454,184,2)
(829,1036,2)
(1372,574,2)
(1596,20,2)
(796,556,2)
(1274,1227,2)
(316,1227,2)
(555,1620,2)
(1683,788,2)
(925,573,2)
(1593,628,2)
(1515,556,2)
(632,682,2)
(894,408,2)
(735,273,2)
(1794,52,2)
(779,628,2)
(394,1762,2)
(788,1517,2)
(151,788,2)
(1009,1227,2)
(153,819,2)
(1481,573,2)
(969,1227,2)
(346,1327,2)
(1449,573,2)
(654,1136,2)
(264,983,2)
(596,53,2)
(1304,788,2)
(605,1327,2)
(81,826,2)
(865,958,2)
(388,1620,2)
(296,1771,2)
(1492,1227,2)
(512,917,2)
(727,1686,2)
(1340,628,2)
(926,1700,2)
(512,1517,2)
(1647,336,2)
(1090,957,2)
(1760,1289,2)
(1181,98,2)
(1220,1154,2)
(677,1227,2)
(1304,226,2)
(303,859,2)
(754,20,2)
(1220,1418,2)
(388,1517,2)
(318,628,2)
(917,270,2)
(874,1122,2)
(45,1484,2)
(674,628,2)
(684,1517,2)
(216,1227,2)
(420,324,2)
(555,958,2)
(1437,219,2)
(684,1762,2)
(472,1136,2)
(1691,201,2)
(322,788,2)
(1784,1635,2)
(959,52,2)
(1602,772,2)
(1381,168,2)
(346,958,2)
(420,1484,2)
(854,219,2)
(1691,788,2)
(632,924,2)
(657,1491,2)
(590,682,2)
(792,785,2)
(1602,1068,2)
(684,772,2)
(1651,574,2)
(944,1227,2)
(1271,249,2)
(854,859,2)
(65,957,2)
(530,713,2)
(349,1671,2)
(822,1638,2)
(1211,628,2)
(254,573,2)
(165,859,2)
(1060,924,2)
(998,1327,2)
(7,324,2)
(373,721,2)
(1646,1227,2)
(340,859,2)
(249,859,2)
(1806,968,2)
(668,957,2)
(811,882,2)
(394,1120,2)
(45,826,2)
(1365,1620,2)
(322,329,2)
(579,173,2)
(296,226,2)
(632,958,2)
(768,1227,2)
(546,573,2)
(821,1484,2)
(73,336,2)
(7,826,2)
(998,53,2)
(1040,1091,2)
(320,859,2)
(829,416,2)
(963,698,2)
(614,52,2)
(1702,1324,2)
(641,1120,2)
(871,628,2)
(539,49,2)
(1534,573,2)
(435,1691,2)
(306,226,2)
(692,539,2)
(57,917,2)
(1622,671,2)
(7,1513,2)
(31,481,2)
(632,1036,2)
(754,1620,2)
(1497,333,2)
(1396,336,2)
(1737,395,2)
(53,1392,2)
(218,574,2)
(1304,1517,2)
(821,772,2)
(821,958,2)
(1461,628,2)
(646,958,2)
(57,1787,2)
(466,859,2)
(210,1762,2)
(794,1120,2)
(73,924,2)
(472,395,2)
(1524,573,2)
(1061,1091,2)
(1602,826,2)
(1648,1686,2)
(1197,1458,2)
(1240,1344,2)
(1056,772,2)
(896,772,2)
(429,781,2)
(67,1036,2)
(1387,1517,2)
(468,831,2)
(1047,1091,2)
(1559,1686,2)
(1545,395,2)
(210,355,2)
(1396,1068,2)
(927,1762,2)
(1708,1120,2)
(114,395,2)
(1481,574,2)
(610,556,2)
(865,924,2)
(1668,721,2)
(72,501,2)
(1056,1513,2)
(367,917,2)
(1194,219,2)
(1575,245,2)
(1328,300,2)
(1413,34,2)
(466,573,2)
(555,826,2)
(1132,573,2)
(95,1227,2)
(1066,958,2)
(1304,556,2)
(1649,1091,2)
(1515,574,2)
(555,226,2)
(849,1337,2)
(1526,1364,2)
(1163,395,2)
(1056,1050,2)
(1344,708,2)
(1083,903,2)
(457,958,2)
(7,226,2)
(1792,52,2)
(798,959,2)
(1066,1762,2)
(721,1387,2)
(573,1584,2)
(73,556,2)
(377,1192,2)
(1154,859,2)
(199,103,2)
(1582,1484,2)
(684,718,2)
(275,219,2)
(829,788,2)
(136,917,2)
(802,573,2)
(916,1078,2)
(9,219,2)
(512,957,2)
(957,1153,2)
(293,336,2)
(1261,1757,2)
(1545,201,2)
(322,1517,2)
(629,957,2)
(45,1120,2)
(469,324,2)
(976,859,2)
(1516,859,2)
(555,1136,2)
(822,1029,2)
(927,355,2)
(1737,1005,2)
(1379,1227,2)
(914,1484,2)
(1070,1607,2)
(1532,573,2)
(510,408,2)
(73,788,2)
(322,718,2)
(87,924,2)
(420,1136,2)
(1352,1337,2)
(269,1038,2)
(1773,820,2)
(1133,573,2)
(1170,41,2)
(777,826,2)
(555,1517,2)
(1366,1327,2)
(147,219,2)
(323,279,2)
(998,573,2)
(1474,859,2)
(1303,718,2)
(884,573,2)
(1471,859,2)
(543,245,2)
(821,788,2)
(300,882,2)
(83,408,2)
(1458,627,2)
(249,573,2)
(829,957,2)
(415,573,2)
(533,573,2)
(303,52,2)
(394,917,2)
(1396,53,2)
(865,1068,2)
(1481,201,2)
(1293,1788,2)
(715,628,2)
(1063,1050,2)
(310,573,2)
(1378,17,2)
(272,958,2)
(1516,573,2)
(1000,98,2)
(101,219,2)
(1674,245,2)
(30,859,2)
(1221,219,2)
(842,917,2)
(1650,1592,2)
(1468,1036,2)
(346,226,2)
(1481,1050,2)
(1476,123,2)
(1630,859,2)
(754,1517,2)
(459,859,2)
(1300,573,2)
(114,787,2)
(455,1036,2)
(1408,787,2)
(339,1517,2)
(420,1620,2)
(664,787,2)
(1395,476,2)
(1130,395,2)
(555,2,2)
(869,1777,2)
(114,574,2)
(1471,539,2)
(119,917,2)
(762,20,2)
(1408,336,2)
(1255,1227,2)
(1651,1050,2)
(395,245,2)
(903,1312,2)
(555,336,2)
(57,1762,2)
(1333,859,2)
(236,573,2)
(632,336,2)
(5,1227,2)
(1769,1691,2)
(1711,574,2)
(1515,1762,2)
(1059,507,2)
(671,1227,2)
(1203,682,2)
(1061,219,2)
(954,573,2)
(1616,355,2)
(744,1250,2)
(822,619,2)
(112,1218,2)
(1757,573,2)
(394,2,2)
(838,1337,2)
(1220,416,2)
(379,682,2)
(1284,329,2)
(1128,1484,2)
(525,628,2)
(1216,264,2)
(1304,1620,2)
(1535,1091,2)
(523,1091,2)
(214,744,2)
(1583,201,2)
(157,882,2)
(899,501,2)
(679,1091,2)
(1078,1517,2)
(710,17,2)
(546,556,2)
(638,100,2)
(1056,1484,2)
(829,1136,2)
(1776,1091,2)
(754,329,2)
(114,1091,2)
(1614,721,2)
(21,859,2)
(1631,245,2)
(467,718,2)
(302,573,2)
(1139,1500,2)
(1362,573,2)
(829,1570,2)
(1067,219,2)
(1651,826,2)
(497,1671,2)
(1124,1303,2)
(1243,628,2)
(1582,924,2)
(1739,1227,2)
(754,1787,2)
(754,1513,2)
(841,226,2)
(777,1513,2)
(323,371,2)
(1408,355,2)
(610,574,2)
(6,917,2)
(125,958,2)
(25,628,2)
(734,628,2)
(65,628,2)
(420,201,2)
(1130,859,2)
(534,408,2)
(1293,924,2)
(1030,1227,2)
(168,1737,2)
(134,245,2)
(927,1120,2)
(569,864,2)
(333,573,2)
(946,958,2)
(1624,948,2)
(1408,53,2)
(65,1513,2)
(632,957,2)
(1649,219,2)
(1401,1686,2)
(530,574,2)
(555,1327,2)
(348,787,2)
(263,52,2)
(1418,917,2)
(1271,573,2)
(971,1783,2)
(1676,924,2)
(1308,1091,2)
(414,219,2)
(3,1513,2)
(324,1131,2)
(1251,336,2)
(166,628,2)
(425,682,2)
(463,1050,2)
(1489,1331,2)
(1155,1050,2)
(1103,1191,2)
(474,1091,2)
(1691,574,2)
(1394,408,2)
(210,788,2)
(105,1033,2)
(688,1218,2)
(22,859,2)
(632,1686,2)
(1412,859,2)
(1304,395,2)
(721,391,2)
(1545,787,2)
(401,2,2)
(1223,1227,2)
(351,1762,2)
(1414,355,2)
(1008,493,2)
(1712,336,2)
(1660,1686,2)
(865,1327,2)
(1598,31,2)
(895,17,2)
(1402,277,2)
(73,355,2)
(588,1142,2)
(1100,1671,2)
(967,958,2)
(919,1120,2)
(466,355,2)
(1196,263,2)
(759,479,2)
(1651,772,2)
(86,1354,2)
(1191,573,2)
(165,573,2)
(346,1068,2)
(1186,1227,2)
(754,2,2)
(1776,1120,2)
(45,772,2)
(542,957,2)
(1211,1059,2)
(1691,226,2)
(1658,573,2)
(1396,1620,2)
(210,226,2)
(322,574,2)
(637,788,2)
(1712,226,2)
(1720,1630,2)
(365,573,2)
(1647,1120,2)
(1795,1762,2)
(394,787,2)
(991,718,2)
(1651,1484,2)
(829,1120,2)
(1470,1227,2)
(1226,1618,2)
(73,574,2)
(494,1686,2)
(865,1620,2)
(1396,329,2)
(596,2,2)
(821,1068,2)
(194,628,2)
(543,1638,2)
(498,671,2)
(1082,219,2)
(331,1091,2)
(754,1091,2)
(754,924,2)
(1659,324,2)
(1056,2,2)
(1220,25,2)
(1304,924,2)
(1019,579,2)
(1177,1513,2)
(1036,17,2)
(53,718,2)
(210,772,2)
(1602,1517,2)
(1036,1184,2)
(466,1327,2)
(1066,201,2)
(459,1762,2)
(738,882,2)
(1638,506,2)
(1581,573,2)
(218,336,2)
(303,628,2)
(1303,52,2)
(1155,576,2)
(362,31,2)
(65,1448,2)
(1710,201,2)
(1408,1120,2)
(1535,219,2)
(987,1227,2)
(463,20,2)
(463,201,2)
(667,1136,2)
(371,273,2)
(685,556,2)
(1651,573,2)
(684,917,2)
(998,628,2)
(603,1227,2)
(180,614,2)
(472,1120,2)
(1588,219,2)
(1624,1029,2)
(802,1227,2)
(1705,573,2)
(218,1787,2)
(1699,1691,2)
(1408,826,2)
(275,1588,2)
(1708,201,2)
(1435,1227,2)
(1705,1227,2)
(1691,573,2)
(295,219,2)
(726,574,2)
(1172,395,2)
(1551,395,2)
(413,1227,2)
(4,184,2)
(1204,219,2)
(829,336,2)
(829,958,2)
(1390,31,2)
(1001,395,2)
(512,1036,2)
(754,718,2)
(1213,826,2)
(182,628,2)
(57,787,2)
(950,924,2)
(1080,1091,2)
(1713,1091,2)
(45,787,2)
(987,573,2)
(1711,1068,2)
(926,1311,2)
(1691,1484,2)
(702,958,2)
(1766,1227,2)
(49,573,2)
(1353,628,2)
(20,408,2)
(273,574,2)
(585,103,2)
(329,264,2)
(1013,958,2)
(865,395,2)
(1647,329,2)
(1430,1405,2)
(59,859,2)
(821,957,2)
(821,1120,2)
(263,574,2)
(74,1396,2)
(555,1036,2)
(367,859,2)
(1411,1491,2)
(107,917,2)
(1651,787,2)
(1602,573,2)
(132,1227,2)
(716,859,2)
(596,574,2)
(1007,573,2)
(1712,53,2)
(1683,1484,2)
(1302,917,2)
(1434,1227,2)
(1021,1671,2)
(785,372,2)
(180,1091,2)
(1364,501,2)
(770,1091,2)
(210,958,2)
(749,859,2)
(1463,958,2)
(610,958,2)
(384,1199,2)
(1414,395,2)
(1067,1091,2)
(1759,19,2)
(1039,924,2)
(1137,859,2)
(1545,1120,2)
(1271,1227,2)
(1040,52,2)
(632,1136,2)
(1142,219,2)
(466,53,2)
(345,219,2)
(865,573,2)
(1712,1327,2)
(725,1484,2)
(505,1359,2)
(463,1068,2)
(1803,1227,2)
(543,25,2)
(1055,201,2)
(610,336,2)
(1272,1491,2)
(135,226,2)
(30,1759,2)
(993,556,2)
(1170,52,2)
(1304,772,2)
(1748,408,2)
(1437,1091,2)
(777,924,2)
(57,1517,2)
(620,52,2)
(1794,245,2)
(1043,68,2)
(1379,573,2)
(607,1620,2)
(1582,1091,2)
(1143,859,2)
(1414,1762,2)
(1776,1787,2)
(395,347,2)
(1624,1657,2)
(394,201,2)
(463,1136,2)
(1741,859,2)
(1582,2,2)
(1475,718,2)
(432,859,2)
(173,1772,2)
(1574,201,2)
(57,628,2)
(3,1120,2)
(463,1484,2)
(306,1762,2)
(304,1227,2)
(639,628,2)
(1675,219,2)
(764,573,2)
(566,395,2)
(1068,1787,2)
(946,702,2)
(1230,501,2)
(448,957,2)
(1248,1091,2)
(93,1031,2)
(1472,1526,2)
(968,917,2)
(777,336,2)
(1657,628,2)
(656,2,2)
(822,1319,2)
(1545,826,2)
(245,277,2)
(1056,336,2)
(364,918,2)
(610,1120,2)
(212,628,2)
(862,671,2)
(1712,788,2)
(1389,1091,2)
(766,184,2)
(238,718,2)
(1370,1227,2)
(1204,1599,2)
(394,1068,2)
(777,573,2)
(905,1091,2)
(711,574,2)
(752,355,2)
(1012,628,2)
(1362,1804,2)
(1715,628,2)
(142,573,2)
(358,201,2)
(218,329,2)
(1776,1517,2)
(1208,628,2)
(26,859,2)
(638,1489,2)
(1691,2,2)
(667,1517,2)
(1101,1227,2)
(1299,574,2)
(1532,1227,2)
(34,859,2)
(126,1227,2)
(667,718,2)
(642,859,2)
(114,1120,2)
(821,1517,2)
(1619,574,2)
(678,1607,2)
(218,1091,2)
(963,219,2)
(867,1749,2)
(1538,573,2)
(1228,169,2)
(1173,682,2)
(65,1762,2)
(998,924,2)
(342,219,2)
(65,20,2)
(1405,1620,2)
(754,1136,2)
(635,628,2)
(1184,17,2)
(1191,1227,2)
(821,1513,2)
(564,1227,2)
(1240,1618,2)
(41,569,2)
(829,573,2)
(482,52,2)
(586,859,2)
(22,628,2)
(512,1327,2)
(1647,574,2)
(1804,1227,2)
(829,1620,2)
(751,1120,2)
(927,556,2)
(181,1620,2)
(667,201,2)
(1711,2,2)
(1349,1491,2)
(1604,1227,2)
(821,924,2)
(346,1787,2)
(1304,1068,2)
(684,53,2)
(84,1091,2)
(853,1227,2)
(927,1513,2)
(1761,1327,2)
(1304,355,2)
(1762,746,2)
(619,1227,2)
(947,1227,2)
(384,197,2)
(1545,573,2)
(573,1227,2)
(459,1513,2)
(650,1218,2)
(607,859,2)
(934,1153,2)
(929,219,2)
(1545,1517,2)
(210,2,2)
(1067,275,2)
(785,1369,2)
(114,772,2)
(749,924,2)
(1044,859,2)
(997,924,2)
(1016,395,2)
(805,574,2)
(463,628,2)
(1749,1188,2)
(1722,924,2)
(1029,859,2)
(37,52,2)
(1034,917,2)
(1712,573,2)
(998,1517,2)
(1691,1136,2)
(866,671,2)
(1321,1749,2)
(476,1197,2)
(1515,958,2)
(110,212,2)
(777,958,2)
(1655,882,2)
(1224,1620,2)
(1711,573,2)
(730,787,2)
(672,573,2)
(1396,1686,2)
(714,1327,2)
(237,926,2)
(1384,219,2)
(322,1050,2)
(1105,273,2)
(830,501,2)
(1380,573,2)
(150,924,2)
(975,462,2)
(7,574,2)
(233,31,2)
(105,628,2)
(1151,859,2)
(329,277,2)
-----------------------------------
(0,(v_VOID_t*)
(1,status)
(2,0 > wlan_hdd_cfg80211_register(wiphy)
(3,pVosContext)
(4,VOS_PKT_PROTO_TYPE_DHCP |\n\\n           VOS_PKT_PROTO_TYPE_ARP)
(5,pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP)
(6,pHddCtx)
(7,vos_close(pVosContext )
(8,"%s: wlan_hdd_init_channels_for_cc failed")
(9,dev)
(10,__func__)
(11,VOS_TRACE_LEVEL_INFO)
(12,bytes)
(13,0)
(14,if ( !VOS_IS_STATUS_SUCCESS( status )
(15,(void *)
(16,hddLog( VOS_TRACE_LEVEL_FATAL,\n\\n               "%s: vos_init_wiphy failed", __func__)
(17,pHddCtx->cfg_ini->fIsLogpEnabled)
(18,cfg_ini)
(19,(tHalHandle)
(20,req_riva_power_on_lock("wlan")
(21,pHddCtx->rx_wake_lock)
(22,pHddCtx->linux_reg_req)
(23,pHddCtx->cfg_ini->UapsdMask =\n\\n                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT)
(24,if (!VOS_IS_STATUS_SUCCESS(status)
(25,pHddCtx->cfg_ini)
(26,pHddCtx->cfg_ini)
(27,cfg_ini)
(28,pVosContext)
(29,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__)
(30,pHddCtx->hHal)
(31,VOS_STA_SAP_MODE == hdd_get_conparam()
(32,"%s: cfg80211 init failed")
(33,pHddCtx->cfg_ini)
(34,pHddCtx->ext_scan_context)
(35,__func__)
(36,&pHddCtx->sap_wake_lock)
(37,pHddCtx->cfg_ini)
(38,hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",\n\\n          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(39,pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan)
(40,ret = wcnss_get_wlan_mac_address((char*)
(41,1 != pHddCtx->cfg_ini->nBandCapability)
(42,VOS_MODULE_ID_VOSS)
(43,if ( VOS_STATUS_SUCCESS != status )
(44,if( VOS_MONITOR_MODE == hdd_get_conparam()
(45,pVosContext)
(46,btAmpConfig)
(47,pHddCtx)
(48,if ( VOS_STATUS_SUCCESS != status )
(49,pHddCtx->cfg_ini)
(50,pHddCtx)
(51,pHddCtx->sap_lock)
(52,pHddCtx->cfg_ini = (hdd_config_t*)
(53,!VOS_IS_STATUS_SUCCESS( status )
(54,&pHddCtx->linux_reg_req)
(55,pHddCtx)
(56,hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__)
(57,VOS_FALSE)
(58,)
(59,pHddCtx->isLoadUnloadInProgress)
(60,WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(61,NULL)
(62,pHddCtx)
(63,cfg_ini)
(64,mac_addr)
(65,wiphy_free(wiphy)
(66,1)
(67,vos_nv_open()
(68,vStatus = WLANBAP_Start(pVosContext)
(69,cfg_ini)
(70,pHddCtx)
(71,1)
(72,INIT_COMPLETION(pAdapter->change_country_code)
(73,status)
(74,"wcnss")
(75,pHddCtx->p2pDeviceAddress.bytes)
(76,pHddCtx)
(77,pHddCtx->scan_ctxt)
(78,pAdapter)
(79,hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",\n\\n                   pHddCtx->cfg_ini->mcastBcastFilterSetting)
(80,wlan_hdd_cfg80211_oemdata_callback)
(81,__func__)
(82,pVosContext)
(83,-EIO)
(84,pHddCtx)
(85,VOS_TRACE_LEVEL_INFO)
(86,init_completion(&pHddCtx->req_bmps_comp_var)
(87,"%s: config update failed")
(88,VOS_TRACE_LEVEL_WARN)
(89,goto err_nl_srv;)
(90,cfg_ini)
(91,pHddCtx)
(92,WLANBAP_Close(pVosContext)
(93,hdd_vos_trace_enable(VOS_MODULE_ID_WDI,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableWDI)
(94,if ( pHddCtx->cfg_ini->dynSplitscan)
(95,pHddCtx)
(96,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__)
(97,MAX_NUMBER_OF_ADAPTERS)
(98,VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter)
(99,VOS_TRACE_LEVEL_FATAL)
(100,pHddCtx->cfg_ini->enableContFWLogging)
(101,hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableVOSS)
(102,0)
(103,ret)
(104,pHddCtx)
(105,(hdd_config_t*)
(106,if(!VOS_IS_STATUS_SUCCESS(vStatus)
(107,pHddCtx->cfg_ini)
(108,if(wiphy == NULL)
(109,)
(110,init_completion(&pHddCtx->ext_scan_context.response_event)
(111,hdd_vos_trace_enable(VOS_MODULE_ID_PE,\n\\n                        pHddCtx->cfg_ini->vosTraceEnablePE)
(112,VOS_TRACE_LEVEL_INFO)
(113,pHddCtx)
(114,VOS_BUG(1)
(115,dot11Mode)
(116,cfg_ini)
(117,"%s: vos_preStart failed")
(118,pHddCtx->hHal)
(119,pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting)
(120,"%s: nl_srv_init failed")
(121,if (VOS_FTM_MODE != hdd_get_conparam()
(122,cfg_ini)
(123,0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
(124,hdd_generate_iface_mac_addr_auto(pHddCtx, 0,\n\\n                                                            default_address)
(125,ret)
(126,FALSE)
(127,vos_mem_init()
(128,VOS_STATUS_SUCCESS)
(129,__func__)
(130,)
(131,status)
(132,vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,\n\\n                             hdd_tcp_delack_compute_function,(void *)
(133,&pHddCtx->scan_ctxt.scan_work)
(134,tSirMacAddr)
(135,pHddCtx)
(136,mcastBcastFilterSetting)
(137,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",\n\\n             __func__)
(138,&pHddCtx->tdls_source_timer)
(139,sme_EXTScanRegisterCallback(pHddCtx->hHal,\n\\n            wlan_hdd_cfg80211_extscan_callback,\n\\n                           pHddCtx)
(140,"%s: wlan_hdd_cfg80211_init return failure")
(141,*pP2pAdapter = NULL)
(142,sme_OemDataRegisterCallback(pHddCtx->hHal,\n\\n            wlan_hdd_cfg80211_oemdata_callback,\n\\n                           pHddCtx)
(143,err_unregister_wiphy:)
(144,goto err_unregister_pmops;)
(145,0)
(146,pHddCtx)
(147,hdd_vos_trace_enable(VOS_MODULE_ID_PMC,\n\\n                         pHddCtx->cfg_ini->vosTraceEnablePMC)
(148,pHddCtx)
(149,if (ret)
(150,sizeof( pHddCtx->cfg_ini->intfMacAddr[0])
(151,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__)
(152,bytes)
(153,init_completion(&pHddCtx->scan_info.scan_req_completion_event)
(154,pHddCtx)
(155,__func__)
(156,"%s: module enable_11d set to %d")
(157,default_address)
(158,cfg_ini)
(159,VOS_PKT_PROTO_TYPE_ARP)
(160,hdd_update_config_dat(pHddCtx)
(161,if(!VOS_IS_STATUS_SUCCESS( status )
(162,0)
(163,macSpoofingLock)
(164,cfg_ini)
(165,pHddCtx->hHal)
(166,&pHddCtx->tdls_lock)
(167,pHddCtx)
(168,pHddCtx->p2pDeviceAddress.bytes[0])
(169,pHddCtx->cfg_ini)
(170,0)
(171,hHal)
(172,if (!VOS_IS_STATUS_SUCCESS(status)
(173,(v_U8_t *)
(174,0)
(175,__func__)
(176,pHddCtx)
(177,wlan_hdd_ftm_open(pHddCtx)
(178,cfg_ini)
(179,success:)
(180,pHddCtx->cfg_ini->vosTraceEnableWDA)
(181,"%s: wlan_hdd_init_channels failed")
(182,pHddCtx)
(183,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(184,!pHddCtx->cfg_ini->gEnableDebugLog)
(185,VOS_IS_STATUS_SUCCESS( status )
(186,"%s: oem_activate_service failed")
(187,cfg_ini)
(188,isRoamOffloadScanEnabled)
(189,if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx)
(190,hdd_netdev_notifier)
(191,hdd_tcp_delack_compute_function)
(192,pHddCtx->wiphy = wiphy)
(193,VOS_MODULE_ID_VOSS)
(194,scan_req_completion_event)
(195,__func__)
(196,1)
(197,msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
(198,ret)
(199,"Failed to register IPv4 notifier")
(200,tx_sus_event_var)
(201,!VOS_IS_STATUS_SUCCESS( status )
(202,cfg_ini)
(203,pHddCtx)
(204,VOS_MODULE_ID_VOSS)
(205,VOS_TRACE_LEVEL_FATAL)
(206,status = vos_init_wiphy_from_nv_bin()
(207,pHddCtx->cfg_ini)
(208,VOS_TRACE_LEVEL_ERROR)
(209,"%s: req riva power on lock failed")
(210,vos_sched_close( pVosContext )
(211,pHddCtx->p2pDeviceAddress.bytes)
(212,&pHddCtx->ext_scan_context.response_event)
(213,VOS_MODULE_ID_WDI)
(214,!(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(215,)
(216,isLoadUnloadInProgress)
(217,__func__)
(218,NULL)
(219,VOS_FTM_MODE != hdd_get_conparam()
(220,0x02)
(221,)
(222,WLANBAP_Open(pVosContext)
(223,tHalHandle)
(224,WLAN_HDD_INFRA_STATION)
(225,VOS_MODULE_ID_PE)
(226,!VOS_IS_STATUS_SUCCESS( status )
(227,__func__)
(228,)
(229,pHddCtx)
(230,pHddCtx)
(231,linux_reg_req)
(232,pHddCtx->cfg_ini)
(233,hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(234,pHddCtx)
(235,*pHddCtx = NULL)
(236,pHddCtx)
(237,status = vos_watchdog_open(pVosContext,\n\\n         &((VosContextType*)
(238,status)
(239,)
(240,cfg_ini)
(241,cfg_ini)
(242,"p2p%d")
(243,pVosContext)
(244,)
(245,pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(246,pAdapter)
(247,hdd_processSpoofMacAddrRequest)
(248,)
(249,pHddCtx->cur_rx_level_lock)
(250,hdd_get_conparam()
(251,wlan_hdd_get_intf_addr(pHddCtx)
(252,if (VOS_STA_SAP_MODE != hdd_get_conparam()
(253,"qcom_rx_wakelock")
(254,sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb)
(255,pHddCtx->cfg_ini)
(256,VOS_TRACE_LEVEL_FATAL)
(257,goto err_vos_nv_close;)
(258,goto err_vosclose;)
(259,VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n                   "%s: SME Change Country code from module param fail ret=%d",\n\\n                   __func__, ret)
(260,pHddCtx->pvosContext)
(261,if ( NULL == pP2pAdapter )
(262,VOS_TRACE_LEVEL_FATAL)
(263,pHddCtx->cfg_ini)
(264,pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(265,nl_srv_init()
(266,if ( !VOS_IS_STATUS_SUCCESS( status )
(267,)
(268,pHddCtx->cfg_ini)
(269,status = hddDevTmRegisterNotifyCallback(pHddCtx)
(270,status = hdd_parse_config_ini( pHddCtx )
(271,pHddCtx)
(272,__func__)
(273,!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE)
(274,if (1 != pHddCtx->cfg_ini->nBandCapability)
(275,pHddCtx->cfg_ini->vosTraceEnableSYS)
(276,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS)
(277,pAdapter != NULL)
(278,cfg_ini)
(279,pHddCtx->cfg_ini)
(280,if (wiphy)
(281,"%s: FTM driver loaded success fully")
(282,if (!pHddCtx->cfg_ini->gEnableDebugLog)
(283,if (p2p_dev_addr != NULL)
(284,hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier")
(285,pHddCtx)
(286,full_pwr_comp_var)
(287,pHddCtx)
(288,wiphy)
(289,hddLog(VOS_TRACE_LEVEL_INFO,\n\\n                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__)
(290,pHddCtx)
(291,VOS_MODULE_ID_HDD_SOFTAP)
(292,v_VOID_t*)
(293,"%s: Failed to open BAP")
(294,err_wdclose:)
(295,cfg_ini)
(296,wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx)
(297,intfMacAddr)
(298,pHddCtx)
(299,((VosContextType*)
(300,&default_address)
(301,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__)
(302,pAdapter)
(303,pHddCtx->cfg_ini)
(304,pHddCtx)
(305,pHddCtx)
(306,wiphy)
(307,FL("Failed to register IPv4 notifier")
(308,pHddCtx)
(309,&pHddCtx->scan_ctxt)
(310,scan_info)
(311,VOS_TRACE_LEVEL_FATAL)
(312,pHddCtx->cfg_ini)
(313,if ( !VOS_IS_STATUS_SUCCESS( status )
(314,pHddCtx)
(315,enable_dfs_chan_scan)
(316,&pHddCtx->scan_info.scan_finished_event)
(317,hdd_vos_trace_enable(VOS_MODULE_ID_TL,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableTL)
(318,init_completion(&pHddCtx->wiphy_channel_update_event)
(319,"%s: error parsing %s")
(320,pHddCtx->hHal)
(321,vosTraceEnableWDA)
(322,fIsLogpEnabled)
(323,pHddCtx->cfg_ini->isRoamOffloadScanEnabled)
(324,pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
(325,pHddCtx)
(326,__func__)
(327,)
(328,goto err_vosclose;)
(329,pAdapter == NULL)
(330,pHddCtx->spoof_mac_addr_work)
(331,hdd_vos_trace_enable(VOS_MODULE_ID_SME,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableSME)
(332,__func__)
(333,pHddCtx->ipv6_notifier)
(334,status)
(335,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",\n\\n             __func__, WLAN_INI_FILE)
(336,!VOS_IS_STATUS_SUCCESS(vStatus)
(337,if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(338,pHddCtx->cfg_ini)
(339,VOS_TRACE_LEVEL_FATAL)
(340,hdd_register_mcast_bcast_filter(pHddCtx)
(341,pHddCtx)
(342,pHddCtx->cfg_ini->vosTraceEnableSME)
(343,pHddCtx->cfg_ini)
(344,if (VOS_STA_SAP_MODE == hdd_get_conparam()
(345,pHddCtx->cfg_ini)
(346,cfg_ini)
(347,* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx)
(348,__func__)
(349,cfg_ini)
(350,if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE)
(351,&hdd_netdev_notifier)
(352,VOS_TRACE_LEVEL_ERROR)
(353,nBandCapability)
(354,)
(355,!VOS_IS_STATUS_SUCCESS( status )
(356,enableFWLogging)
(357,(tSmeChangeCountryCallback)
(358,status)
(359,pvosContext)
(360,ssr_comp_var)
(361,pAdapter)
(362,FALSE)
(363,VOS_MODULE_ID_SME)
(364,mutex_init(&pHddCtx->roc_lock)
(365,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(366,pHddCtx)
(367,pHddCtx->cfg_ini)
(368,pHddCtx)
(369,hdd_context_t)
(370,cfg_ini)
(371,pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0)
(372,ret = wait_for_completion_interruptible_timeout(\n\\n                       &pAdapter->change_country_code,\n\\n                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
(373,Is11dSupportEnabled)
(374,pHddCtx)
(375,__func__)
(376,hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode)
(377,register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
(378,WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(379,goto err_free_hdd_context;)
(380,pHddCtx->cfg_ini->Is11dSupportEnabled)
(381,country_code)
(382,pHddCtx)
(383,pP2pAdapter)
(384,wait_for_completion_interruptible_timeout(\n\\n                       &pAdapter->change_country_code,\n\\n                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
(385,)
(386,bytes)
(387,hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(388,VOS_IS_STATUS_SUCCESS(status)
(389,hdd_config_t)
(390,)
(391,1 == enable_11d)
(392,__func__)
(393,pHddCtx)
(394,1)
(395,p2p_dev_addr != NULL)
(396,hdd_rssi_threshold_breached_cb)
(397,pHddCtx)
(398,pHddCtx->scan_info.scan_pending_option)
(399,msleep(5000)
(400,goto err_vosclose;)
(401,VOS_IS_STATUS_SUCCESS( status )
(402,CFG_QOS_WMM_UAPSD_MASK_DEFAULT)
(403,pHddCtx)
(404,default_address)
(405,wlanLoggingFEToConsole)
(406,pHddCtx->mc_sus_event_var)
(407,pHddCtx)
(408,wiphy == NULL)
(409,goto err_vosstop;)
(410,pHddCtx->cfg_ini)
(411,0)
(412,hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"\n\\n                   " failed", __func__)
(413,hHal)
(414,cfg_ini)
(415,pHddCtx)
(416,pHddCtx->parent_dev)
(417,if(pHddCtx->cfg_ini->fIsLogpEnabled)
(418,pAdapter)
(419,status)
(420,vos_stop(pVosContext)
(421,pHddCtx->kd_nl_init)
(422,)
(423,pHddCtx)
(424,pHddCtx->isLogpInProgress = FALSE)
(425,VOS_TRACE_LEVEL_FATAL)
(426,char*)
(427,goto err_vos_nv_close;)
(428,cfg_ini)
(429,pHddCtx->cfg_ini->fEnableSNRMonitoring)
(430,if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)
(431,hdd_get_conparam()
(432,(void *)
(433,VOS_MODULE_ID_BAP)
(434,if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter)
(435,__func__)
(436,0)
(437,CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)
(438,if( pAdapter == NULL )
(439,hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__)
(440,hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP)
(441,VOS_MODULE_ID_VOSS)
(442,cfg_ini)
(443,)
(444,sizeof(tSirMacAddr)
(445,VOS_STATUS_SUCCESS)
(446,NULL)
(447,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__)
(448,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(449,hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",\n\\n                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
(450,if (isSsrPanicOnFailure()
(451,"%s: vos_watchdog_open failed")
(452,err_unregister_pmops:)
(453,cfg_ini)
(454,)
(455,status)
(456,__func__)
(457,0)
(458,pHddCtx)
(459,hddDevTmUnregisterNotifyCallback(pHddCtx)
(460,wlan_hdd_restart_init(pHddCtx)
(461,&mac_addr)
(462,struct device *dev)
(463,hdd_set_ssr_required (VOS_FALSE)
(464,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "\n\\n                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus )
(465,isRoamOffloadScanEnabled)
(466,pHddCtx->ptt_pid)
(467,kd_nl_init)
(468,&pHddCtx->cfg_ini->intfMacAddr[0])
(469,vos_get_context( VOS_MODULE_ID_SME, pVosContext )
(470,pHddCtx)
(471,0)
(472,pHddCtx)
(473,0)
(474,pHddCtx)
(475,pHddCtx)
(476,pHddCtx->cfg_ini->enableMgmtLogging)
(477,pHddCtx)
(478,status)
(479,isSsrPanicOnFailure()
(480,cfg_ini)
(481,hdd_get_conparam()
(482,pHddCtx->cfg_ini)
(483,VOS_MODULE_ID_VOSS)
(484,vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,\n\\n                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,\n\\n                       sizeof(tSirMacAddr)
(485,if (req_riva_power_on_lock("wlan")
(486,0)
(487,"%s: btc_activate_service failed")
(488,err_bap_close:)
(489,CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT)
(490,pAdapter)
(491,NULL)
(492,wlan_hdd_mon_open(pHddCtx)
(493,pHddCtx->cfg_ini->vosTraceEnableHDD)
(494,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__)
(495,VosContextType*)
(496,ret)
(497,UapsdMask)
(498,FL("Registered IPv6 notifier")
(499,)
(500,if ( !VOS_IS_STATUS_SUCCESS( status )
(501,country_code)
(502,)
(503,pHddCtx)
(504,pHddCtx)
(505,VOS_IS_STATUS_SUCCESS(vStatus)
(506,pHddCtx->cfg_ini->intfMacAddr)
(507,pHddCtx->spoofMacAddr.macSpoofingLock)
(508,enableFwrMemDump)
(509,goto err_close_adapter;)
(510,TRUE)
(511,btAmpConfig.ucPreferredChannel)
(512,EIO)
(513,__func__)
(514,wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)
(515,parent_dev)
(516,"%s: wiphy register failed")
(517,status = WLANBAP_SetConfig(&btAmpConfig)
(518,isLoadUnloadInProgress)
(519,default_address)
(520,VOS_IS_STATUS_SUCCESS( status )
(521,FALSE)
(522,pHddCtx->cfg_ini)
(523,pHddCtx)
(524,)
(525,pHddCtx)
(526,pHddCtx->tdls_lock)
(527,vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,\n\\n                         wlan_hdd_schedule_defer_scan)
(528,void *)
(529,pHddCtx)
(530,btAmpConfig.ucPreferredChannel = pConfig->preferredChannel)
(531,pHddCtx)
(532,pHddCtx)
(533,pHddCtx)
(534,wiphy_priv(wiphy)
(535,)
(536,hddAdapters)
(537,)
(538,cfg_ini)
(539,pHddCtx->cfg_ini->dynSplitscan)
(540,pAdapter)
(541,goto err_config;)
(542,isLoadUnloadInProgress)
(543,pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02)
(544,cfg_ini)
(545,pVosContext)
(546,pHddCtx)
(547,VOS_STATUS_SUCCESS)
(548,VOS_MODULE_ID_PMC)
(549,if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)
(550,&pHddCtx->rx_sus_event_var)
(551,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                "%s: Failed to generate wlan interface mac addr "\n\\n                "using MAC from ini file ", __func__)
(552,tSmeChangeCountryCallback)
(553,wiphy)
(554,pHddCtx)
(555,pHddCtx->cfg_ini= NULL)
(556,oem_activate_service(pHddCtx)
(557,VOS_TRACE_LEVEL_INFO)
(558,(VosContextType*)
(559,isLogpInProgress)
(560,if (0 > wlan_hdd_cfg80211_register(wiphy)
(561,status)
(562,cfg_ini)
(563,pHddCtx->cfg_ini->wdiTraceEnableDAT)
(564,hHal)
(565,btAmpConfig)
(566,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n                           "%s: Failed to allocate mac_address for p2p_device",\n\\n                   __func__)
(567,if(pHddCtx->cfg_ini->fIsLogpEnabled)
(568,pHddCtx)
(569,pHddCtx->cfg_ini->nBandCapability)
(570,rx_sus_event_var)
(571,false)
(572,ext_scan_context)
(573,wlan_logging_sock_activate_svc(\n\\n                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,\n\\n                   pHddCtx->cfg_ini->wlanLoggingNumBuf,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf)
(574,!VOS_IS_STATUS_SUCCESS(vStatus)
(575,pVosContext)
(576,vos_start( pHddCtx->pvosContext )
(577,__func__)
(578,bytes)
(579,cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n                             (v_U8_t *)
(580,status)
(581,pHddCtx->wmmLock)
(582,hHal)
(583,)
(584,pHddCtx->hHal)
(585,FL("Registered IPv4 notifier")
(586,pHddCtx->cfg_ini)
(587,vStatus)
(588,hdd_vos_trace_enable(VOS_MODULE_ID_BAP,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableBAP)
(589,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__)
(590,sizeof( hdd_config_t )
(591,pHddCtx)
(592,cfg_ini)
(593,init_completion(&pHddCtx->ssr_comp_var)
(594,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",\n\\n                                     __func__)
(595,ucPreferredChannel)
(596,pHddCtx)
(597,pHddCtx)
(598,pHddCtx)
(599,FALSE)
(600,dev)
(601,ret)
(602,"%s: ptt_sock_activate_svc failed")
(603,pHddCtx)
(604,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(605,status)
(606,)
(607,hdd_post_voss_start_config( pHddCtx )
(608,pHddCtx)
(609,hdd_get_conparam()
(610,wiphy)
(611,VOS_MODULE_ID_VOSS)
(612,pHddCtx)
(613,pHddCtx)
(614,pHddCtx->cfg_ini)
(615,"%s: Failed vos_get_global_context")
(616,pHddCtx)
(617,__func__)
(618,0)
(619,pHddCtx->ipv6_notifier.notifier_call)
(620,pHddCtx->cfg_ini)
(621,hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier")
(622,pHddCtx->req_bmps_comp_var)
(623,pHddCtx->scan_ctxt.scan_work)
(624,nEnableStrictRegulatoryForFCC)
(625,isLoadUnloadInProgress)
(626,wiphy)
(627,pHddCtx->cfg_ini->wlanLoggingEnable)
(628,pVosContext == NULL)
(629,goto err_free_hdd_context;)
(630,WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(631,pHddCtx)
(632,WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(633,ret)
(634,wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
(635,pHddCtx)
(636,VOS_TRACE_LEVEL_FATAL)
(637,FALSE)
(638,pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump)
(639,standby_comp_var)
(640,pHddCtx->p2pDeviceAddress.bytes)
(641,"%s: register_netdevice_notifier failed")
(642,pHddCtx->cfg_ini)
(643,__func__)
(644,pHddCtx)
(645,pHddCtx->hHal)
(646,hdd_debugfs_exit(pHddCtx)
(647,if(nl_srv_init()
(648,pHddCtx)
(649,pHddCtx)
(650,enableDFSChnlScan)
(651,sme_SetDefDot11Mode(pHddCtx->hHal)
(652,hHal)
(653,VOS_TRACE_LEVEL_ERROR)
(654,VOS_TRACE_LEVEL_FATAL)
(655,goto err_wdclose;)
(656,status)
(657,pHddCtx->cfg_ini->intfMacAddr[0].bytes)
(658,VOS_TIMER_TYPE_SW)
(659,pHddCtx)
(660,pHddCtx)
(661,)
(662,wdiTraceEnableDAL)
(663,if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx)
(664,"%s: Failed to do hdd_open_adapter for P2P Device Interface")
(665,pHddCtx)
(666,err_vosstop:)
(667,pHddCtx)
(668,pHddCtx)
(669,pHddCtx)
(670,bytes)
(671,ret)
(672,pHddCtx)
(673,wiphy_unregister(wiphy)
(674,pHddCtx->rx_sus_event_var)
(675,VOS_TRACE_LEVEL_FATAL)
(676,pHddCtx)
(677,ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier)
(678,sme_AddChAvoidCallback(pHddCtx->hHal,\n\\n                              hdd_hostapd_ch_avoid_cb)
(679,pHddCtx->cfg_ini)
(680,pHddCtx)
(681,"%s: wlan_hdd_ftm_open Failed")
(682,pHddCtx->cfg_ini == NULL)
(683,VOS_TRACE_LEVEL_ERROR)
(684,hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(685,__func__)
(686,((VosContextType*)
(687,pHddCtx->cfg_ini)
(688,cfg_ini)
(689,)
(690,__func__)
(691,pHddCtx)
(692,tx_rx_trafficTmr)
(693,nBandCapability)
(694,pHddCtx->p2pDeviceAddress)
(695,btc_activate_service(pHddCtx)
(696,mac_addr)
(697,)
(698,pHddCtx->cfg_ini->wdiTraceEnableCTL)
(699,VOS_TRACE_LEVEL_ERROR)
(700,scan_ctxt)
(701,VOS_TRACE_LEVEL_FATAL)
(702,&hdd_netdev_notifier)
(703,VOS_TRACE_LEVEL_INFO)
(704,0x02)
(705,VOS_MODULE_ID_SME)
(706,&pHddCtx->hddAdapters)
(707,VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |\n\\n           VOS_PKT_PROTO_TYPE_ARP)
(708,hdd_get_conparam()
(709,&pHddCtx->tx_sus_event_var)
(710,status)
(711,wlan_hdd_tdls_init(pHddCtx)
(712,vStatus)
(713,pConfig->preferredChannel)
(714,status)
(715,sizeof(hdd_config_t)
(716,pHddCtx->cfg_ini)
(717,if (oem_activate_service(pHddCtx)
(718,nl_srv_init()
(719,pHddCtx)
(720,cfg_ini)
(721,0 == enable_11d || 1 == enable_11d)
(722,IsMemoryDebugSupportEnabled)
(723,0)
(724,"%s: Setting pHddCtx->cfg_ini->nBandCapability = 1")
(725,"%s: hdd_post_voss_start_config failed")
(726,cfg_ini)
(727,goto err_free_hdd_context;)
(728,1)
(729,)
(730,pAdapter)
(731,hddLog(VOS_TRACE_LEVEL_WARN,\n\\n             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__)
(732,pHddCtx)
(733,)
(734,pHddCtx->nEnableStrictRegulatoryForFCC)
(735,__func__)
(736,memdump_init()
(737,"%s: hdd_open_adapter failed")
(738,pHddCtx)
(739,&pVosContext)
(740,)
(741,NULL)
(742,hHal)
(743,"%s: Failed to start TL")
(744,pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(745,pHddCtx)
(746,ptt_sock_activate_svc(pHddCtx)
(747,pHddCtx->hHal)
(748,if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],\n\\n                   sizeof(default_address)
(749,pHddCtx->cfg_ini)
(750,pAdapter)
(751,__func__)
(752,VOS_TRACE_LEVEL_FATAL)
(753,__func__)
(754,"wlan")
(755,scan_info)
(756,scan_info)
(757,goto err_vosstop;)
(758,wiphy)
(759,VOS_BUG(0)
(760,wiphy)
(761,pHddCtx->hHal)
(762,NULL)
(763,pHddCtx)
(764,ret)
(765,0)
(766,pHddCtx->cfg_ini)
(767,cfg_ini)
(768,pHddCtx)
(769,pHddCtx)
(770,vosTraceEnablePMC)
(771,VOS_STATUS_SUCCESS)
(772,0 > wlan_hdd_cfg80211_register(wiphy)
(773,p2p_dev_addr)
(774,pHddCtx)
(775,0)
(776,pHddCtx)
(777,vos_nv_close()
(778,sap_lock)
(779,&pHddCtx->standby_comp_var)
(780,pHddCtx)
(781,pHddCtx->cfg_ini)
(782,halStatus)
(783,pHddCtx->p2pDeviceAddress.bytes[0])
(784,INIT)
(785,0 >= ret)
(786,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n                 "%s: wlan_hdd_cfg80211_init return failure", __func__)
(787,NULL == pP2pAdapter)
(788,VOS_STATUS_SUCCESS != status)
(789,preferredChannel)
(790,pVosContext)
(791,init_completion(&pHddCtx->mc_sus_event_var)
(792,"%s: SME while setting country code timed out")
(793,"%s: vos_start failed")
(794,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__)
(795,if (!VOS_IS_STATUS_SUCCESS(vStatus)
(796,VOS_TRACE_LEVEL_FATAL)
(797,pAdapter->change_country_code)
(798,cfg_ini)
(799,mutex_init(&pHddCtx->sap_lock)
(800,wiphy)
(801,pvosContext)
(802,ipv6_notifier)
(803,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n                "%s: Failed to do hdd_open_adapter for P2P Device Interface",\n\\n                __func__)
(804,WLAN_HDD_P2P_DEVICE)
(805,wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt)
(806,cfg_ini)
(807,pHddCtx->pvosContext = pVosContext)
(808,VOS_PKT_PROTO_TYPE_EAPOL)
(809,0)
(810,status)
(811,cfg_ini)
(812,unregister_netdevice_notifier(&hdd_netdev_notifier)
(813,pHddCtx)
(814,__func__)
(815,pHddCtx->cfg_ini)
(816,if (0 >= ret)
(817,pHddCtx->cfg_ini->mcastBcastFilterSetting)
(818,VOS_TRACE_LEVEL_ERROR)
(819,&pHddCtx->scan_info.scan_req_completion_event)
(820,0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],\n\\n                   sizeof(default_address)
(821,-EIO)
(822,return 0;)
(823,pHddCtx->cfg_ini->vosTraceEnableHDDSAP)
(824,goto err_unregister_pmops;)
(825,if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)
(826,!VOS_IS_STATUS_SUCCESS(vStatus)
(827,goto err_config;)
(828,if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
(829,return -EIO;)
(830,country_code)
(831,pHddCtx->cfg_ini->intfMacAddr[0])
(832,)
(833,VOS_MODULE_ID_VOSS)
(834,)
(835,pHddCtx->cfg_ini)
(836,WLAN_HDD_GET_HAL_CTX(pAdapter)
(837,__func__)
(838,VOS_STATUS_SUCCESS)
(839,WLAN_WAIT_TIME_COUNTRY)
(840,)
(841,VOS_TRACE_LEVEL_FATAL)
(842,WLAN_INI_FILE)
(843,status)
(844,__func__)
(845,spoof_mac_addr_work)
(846,vos_is_macaddr_zero(&mac_addr)
(847,pAdapter)
(848,status)
(849,pHddCtx)
(850,pHddCtx->hddAdapters)
(851,pHddCtx)
(852,pHddCtx)
(853,pHddCtx)
(854,pHddCtx->cfg_ini)
(855,vStatus)
(856,VOS_STATUS_SUCCESS)
(857,&pHddCtx->wmmLock)
(858,__func__)
(859,pHddCtx = wiphy_priv(wiphy)
(860,tHalHandle)
(861,VOS_MODULE_ID_HDD)
(862,hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier")
(863,VOS_TRACE_LEVEL_FATAL)
(864,false == hdd_is_5g_supported(pHddCtx)
(865,pHddCtx->cfg_ini)
(866,FL("Failed to register IPv6 notifier")
(867,pHddCtx)
(868,pHddCtx->cfg_ini->vosTraceEnableTL)
(869,status = hddRegisterPmOps(pHddCtx)
(870,VOS_TRACE_LEVEL_ERROR)
(871,pHddCtx->spoofMacAddr)
(872,VOS_MODULE_ID_VOSS)
(873,__func__)
(874,&pHddCtx->ssr_comp_var)
(875,cfg_ini)
(876,cfg_ini)
(877,(VosContextType*)
(878,VosWatchdogContext)
(879,)
(880,isP2pDeviceAddrAdministrated)
(881,fEnableSNRMonitoring)
(882,VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx)
(883,intfMacAddr)
(884,ret)
(885,0)
(886,intfMacAddr)
(887,"%s: vos_init_wiphy failed")
(888,goto err_bap_close;)
(889,)
(890,kmalloc(sizeof(hdd_config_t)
(891,pHddCtx)
(892,wlan_hdd_ipv6_changed)
(893,)
(894,wiphy)
(895,vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(896,wlan_hdd_cfg80211_register(wiphy)
(897,err_bap_stop:)
(898,fenableCHAvoidance)
(899,wlan_hdd_change_country_code_callback)
(900,pHddCtx->hHal)
(901,mutex_init(&pHddCtx->wmmLock)
(902,pHddCtx)
(903,vos_open( &pVosContext, pHddCtx->parent_dev)
(904,FALSE)
(905,vosTraceEnableTL)
(906,if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)
(907,if (0 > wlan_hdd_cfg80211_register(wiphy)
(908,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__)
(909,pHddCtx)
(910,if ( !VOS_IS_STATUS_SUCCESS( status )
(911,)
(912,EIO)
(913,goto err_vosclose;)
(914,wlan_hdd_cfg80211_register(wiphy)
(915,status)
(916,status = hdd_set_sme_config( pHddCtx )
(917,VOS_STATUS_SUCCESS != status)
(918,&pHddCtx->roc_lock)
(919,hddDeregisterPmOps(pHddCtx)
(920,VOS_TRACE_LEVEL_FATAL)
(921,__func__)
(922,wlan_hdd_get_intf_addr(pHddCtx)
(923,pVosContext)
(924,FALSE == hdd_update_config_dat(pHddCtx)
(925,wlan_hdd_change_tdls_mode)
(926,vos_watchdog_open(pVosContext,\n\\n         &((VosContextType*)
(927,pVosContext)
(928,pHDDContext)
(929,pHddCtx)
(930,wiphy)
(931,halStatus)
(932,if(ptt_sock_activate_svc(pHddCtx)
(933,status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT)
(934,VOS_MONITOR_MODE)
(935,hdd_checkandupdate_phymode(pAdapter, country_code)
(936,status)
(937,hdd_init_frame_logging(pHddCtx)
(938,cfg_ini)
(939,pVosContext)
(940,pHddCtx)
(941,__func__)
(942,WLANBAP_SetConfig(&btAmpConfig)
(943,&pHddCtx->wiphy_channel_update_event)
(944,pHddCtx->cfg_ini->wlanLoggingFEToConsole)
(945,1)
(946,register_netdevice_notifier(&hdd_netdev_notifier)
(947,sap_wake_lock)
(948,pHddCtx->cfg_ini->nBandCapability)
(949,1 == enable_dfs_chan_scan)
(950,__func__)
(951,pHddCtx)
(952,eWLAN_MODULE_DAL)
(953,VOS_FTM_MODE)
(954,pHddCtx->isLoadUnloadInProgress)
(955,pHddCtx->cfg_ini->enableDFSChnlScan)
(956,__func__)
(957,VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx)
(958,!VOS_IS_STATUS_SUCCESS( status )
(959,pHddCtx->cfg_ini)
(960,intfMacAddr)
(961,pHddCtx)
(962,pHddCtx->scan_info.abortscan_event_var)
(963,hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnableCTL)
(964,pHddCtx->scan_ctxt)
(965,pHddCtx->cfg_ini)
(966,pHddCtx)
(967,"%s: hddDevTmRegisterNotifyCallback failed")
(968,pHddCtx->cfg_ini)
(969,cur_rx_level_lock)
(970,mac_addr)
(971,pHddCtx->cfg_ini->intfMacAddr[0])
(972,pHddCtx)
(973,eSIR_TRUE)
(974,VOS_TRACE_LEVEL_ERROR)
(975,pHddCtx->parent_dev = dev)
(976,wlan_hdd_init_channels(pHddCtx)
(977,spoofMacAddr)
(978,intfMacAddr)
(979,pConfig)
(980,)
(981,pHddCtx)
(982,hdd_init_offloaded_packets_ctx(pHddCtx)
(983,hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(984,hdd_context_t)
(985,hdd_debugfs_init(pAdapter)
(986,enable_11d)
(987,pHddCtx->delack_timer)
(988,VOS_TRACE_LEVEL_FATAL)
(989,pHddCtx)
(990,if(pVosContext == NULL)
(991,pHddCtx->kd_nl_init = 1)
(992,VOS_PKT_PROTO_TYPE_DHCP)
(993,pHddCtx)
(994,eWLAN_MODULE_PAL)
(995,NULL)
(996,pHddCtx)
(997,pHddCtx->cfg_ini->intfMacAddr)
(998,free_riva_power_on_lock("wlan")
(999,pHddCtx->scan_info.scan_req_completion_event)
(1000,"%s: hdd_debugfs_init failed!")
(1001,VOS_TRACE_LEVEL_FATAL)
(1002,)
(1003,__func__)
(1004,__func__)
(1005,pHddCtx->p2pDeviceAddress)
(1006,if(pHddCtx->cfg_ini == NULL)
(1007,pHddCtx)
(1008,hdd_vos_trace_enable(VOS_MODULE_ID_HDD,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableHDD)
(1009,pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed)
(1010,pHddCtx)
(1011,status)
(1012,pHddCtx->wiphy_channel_update_event)
(1013,ret = register_netdevice_notifier(&hdd_netdev_notifier)
(1014,"%s: wlan_logging_sock_activate_svc"\n\\n                   " failed")
(1015,pHddCtx)
(1016,p2p_dev_addr)
(1017,v_U8_t *)
(1018,VOS_TRACE_LEVEL_FATAL)
(1019,halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n                             (v_U8_t *)
(1020,"Setting configuredMcastBcastFilter: %d")
(1021,VOS_TRACE_LEVEL_DEBUG)
(1022,if ( !VOS_IS_STATUS_SUCCESS( status )
(1023,goto success;)
(1024,VOS_MODULE_ID_SAP)
(1025,enableContFWLogging)
(1026,&pHddCtx->sap_lock)
(1027,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
(1028,1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)
(1029,pHddCtx->wiphy)
(1030,pHddCtx)
(1031,pHddCtx->cfg_ini->vosTraceEnableWDI)
(1032,vStatus)
(1033,hdd_config_t*)
(1034,mcastBcastFilterSetting)
(1035,wmmLock)
(1036,!VOS_IS_STATUS_SUCCESS( status )
(1037,)
(1038,hddDevTmRegisterNotifyCallback(pHddCtx)
(1039,pHddCtx)
(1040,pHddCtx->cfg_ini)
(1041,__func__)
(1042,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__)
(1043,VOS_IS_STATUS_SUCCESS(vStatus)
(1044,pHddCtx->isLoadUnloadInProgress)
(1045,__func__)
(1046,)
(1047,VOS_TRACE_LEVEL_FATAL)
(1048,p2pDeviceAddress)
(1049,)
(1050,!HAL_STATUS_SUCCESS( halStatus )
(1051,pHddCtx)
(1052,pvosContext)
(1053,NULL)
(1054,sme_UpdateChannelList(pHddCtx->hHal)
(1055,"%s: hddRegisterPmOps failed")
(1056,status)
(1057,pHddCtx)
(1058,VOS_TRACE_LEVEL_ERROR)
(1059,&pHddCtx->spoofMacAddr.macSpoofingLock)
(1060,cfg_ini)
(1061,cfg_ini)
(1062,0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,\n\\n                                                            default_address)
(1063,status)
(1064,pHddCtx)
(1065,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__)
(1066,nl_srv_exit(pHddCtx->ptt_pid)
(1067,hdd_vos_trace_enable(VOS_MODULE_ID_SYS,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableSYS)
(1068,!VOS_IS_STATUS_SUCCESS(status)
(1069,pHddCtx->cfg_ini)
(1070,pHddCtx)
(1071,VOS_MODULE_ID_WDA)
(1072,hHal)
(1073,pHddCtx->p2pDeviceAddress.bytes[0])
(1074,enable_dfs_chan_scan)
(1075,"%s: Driver loaded in Monitor Mode")
(1076,pConfig = pHddCtx->cfg_ini)
(1077,wlanPerPktStatsNumBuf)
(1078,hdd_set_sme_config( pHddCtx )
(1079,VOS_TRACE_LEVEL_ERROR)
(1080,vosTraceEnableHDD)
(1081,pHddCtx->scan_info)
(1082,cfg_ini)
(1083,status = vos_open( &pVosContext, pHddCtx->parent_dev)
(1084,hdd_init_ll_stats_ctx(pHddCtx)
(1085,if (hdd_is_ssr_required()
(1086,pHddCtx)
(1087,vos_watchdog_close(pVosContext)
(1088,pAdapter)
(1089,hdd_update_config_from_nv(pHddCtx)
(1090,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__)
(1091,0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
(1092,pHddCtx->ipv4_notifier.notifier_call)
(1093,VOS_TRACE_LEVEL_INFO)
(1094,wlan_hdd_cfg80211_extscan_callback)
(1095,&btAmpConfig)
(1096,0)
(1097,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__)
(1098,cfg_ini)
(1099,pHddCtx)
(1100,pHddCtx->cfg_ini->UapsdMask)
(1101,dynSplitscan)
(1102,)
(1103,regulatory_hint(wiphy, "00")
(1104,cfg_ini)
(1105,0)
(1106,wiphy)
(1107,VOS_TRACE_LEVEL_INFO)
(1108,__func__)
(1109,sizeof(hdd_context_t)
(1110,"00")
(1111,VOS_IS_STATUS_SUCCESS(vStatus)
(1112,init_completion(&pHddCtx->tx_sus_event_var)
(1113,VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status )
(1114,wlan_logging_set_log_level()
(1115,if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,\n\\n                                                            default_address)
(1116,scan_finished_event)
(1117,init_completion(&pHddCtx->standby_comp_var)
(1118,__func__)
(1119,"wlan")
(1120,ret < 0)
(1121,enable_dfs_chan_scan)
(1122,pHddCtx->ssr_comp_var)
(1123,__func__)
(1124,pHddCtx->cfg_ini->gEnableRoamDelayStats)
(1125,pHddCtx->cfg_ini->nBandCapability = 1)
(1126,hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier")
(1127,eHAL_STATUS_SUCCESS)
(1128,wlan_hdd_cfg80211_update_reg_info( wiphy )
(1129,*pAdapter = NULL)
(1130,pHddCtx->p2pDeviceAddress)
(1131,vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
(1132,pHddCtx->ipv4_notifier)
(1133,mutex_init(&pHddCtx->cur_rx_level_lock)
(1134,return -EIO;)
(1135,)
(1136,btc_activate_service(pHddCtx)
(1137,pHddCtx->hHal)
(1138,pHddCtx)
(1139,1)
(1140,pHddCtx)
(1141,nthBeaconFilter)
(1142,pHddCtx->cfg_ini->vosTraceEnableBAP)
(1143,pHddCtx->cfg_ini)
(1144,pHddCtx)
(1145,pHddCtx)
(1146,VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n                      "%s: SME while setting country code timed out", __func__)
(1147,__func__)
(1148,)
(1149,err_nl_srv:)
(1150,pHddCtx->cfg_ini->dot11Mode)
(1151,pHddCtx->cfg_ini)
(1152,pVosContext)
(1153,VOS_FTM_MODE == hdd_get_conparam()
(1154,pHddCtx->isLoadUnloadInProgress)
(1155,status = vos_start( pHddCtx->pvosContext )
(1156,change_country_code)
(1157,0)
(1158,pHddCtx)
(1159,__func__)
(1160,GFP_KERNEL)
(1161,p2p_dev_addr)
(1162,VOS_TRACE_LEVEL_FATAL)
(1163,0)
(1164,"%s: wiphy register failed")
(1165,(void *)
(1166,init_completion(&pHddCtx->scan_info.abortscan_event_var)
(1167,configuredMcastBcastFilter)
(1168,eSIR_TRUE)
(1169,halStatus)
(1170,pHddCtx->cfg_ini)
(1171,VOS_MAC_ADDR_SIZE)
(1172,&pHddCtx->p2pDeviceAddress.bytes[0])
(1173,pHddCtx->cfg_ini)
(1174,VOS_TRACE_LEVEL_FATAL)
(1175,pHddCtx->cfg_ini->gEnableDebugLog)
(1176,VOS_MODULE_ID_VOSS)
(1177,__func__)
(1178,pVosContext)
(1179,NULL)
(1180,status)
(1181,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n                 "%s: hdd_debugfs_init failed!", __func__)
(1182,VOS_TRACE_LEVEL_ERROR)
(1183,"%s: HAL context is null")
(1184,VOS_IS_STATUS_SUCCESS( status )
(1185,VOS_TRACE_LEVEL_FATAL)
(1186,EXIT()
(1187,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
(1188,pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump)
(1189,pHddCtx->cfg_ini)
(1190,NULL)
(1191,wiphy)
(1192,&pHddCtx->ipv4_notifier)
(1193,pHddCtx)
(1194,pHddCtx->cfg_ini)
(1195,VOS_MODULE_ID_SYS)
(1196,pHddCtx->cfg_ini->UapsdMask)
(1197,pHddCtx->cfg_ini->enableFWLogging)
(1198,wiphy)
(1199,&pAdapter->change_country_code)
(1200,1)
(1201,hddLog( VOS_TRACE_LEVEL_FATAL,\n\\n                "%s: vos_nv_open failed", __func__)
(1202,notifier_call)
(1203,VOS_STATUS_SUCCESS)
(1204,hdd_vos_trace_enable(VOS_MODULE_ID_SAP,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableSAP)
(1205,"%s: wlan_hdd_mon_open Failed")
(1206,if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(1207,VOS_TRACE_LEVEL_ERROR)
(1208,scan_info)
(1209,gEnableDebugLog)
(1210,"%s: Failed to set MAC Address. "\n\\n                "HALStatus is %08d [x%08x]")
(1211,mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock)
(1212,"%s: hdd_open_cesium_nl_sock failed")
(1213,goto err_bap_close;)
(1214,"Logging disabled in ini")
(1215,if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
(1216,hdd_checkandupdate_dfssetting(pAdapter, country_code)
(1217,VOS_TRACE_LEVEL_FATAL)
(1218,0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)
(1219,VOS_IS_STATUS_SUCCESS( status )
(1220,return VOS_STATUS_SUCCESS;)
(1221,hdd_wdi_trace_enable(eWLAN_MODULE_DAL,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnableDAL)
(1222,wlan_hdd_init_channels_for_cc(pHddCtx, INIT)
(1223,0)
(1224,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",\n\\n             __func__)
(1225,goto err_reg_netdev;)
(1226,pAdapter->change_country_code)
(1227,pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)
(1228,pHddCtx->cfg_ini->UapsdMask)
(1229,)
(1230,ret)
(1231,pHddCtx)
(1232,pAdapter)
(1233,mutex_init(&pHddCtx->tdls_lock)
(1234,pHddCtx)
(1235,goto err_close_adapter;)
(1236,)
(1237,pHddCtx)
(1238,VOS_MODULE_ID_VOSS)
(1239,vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,\n\\n                  wlan_hdd_change_tdls_mode, (void *)
(1240,wlan_hdd_cfg80211_register_frames(pAdapter)
(1241,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(1242,)
(1243,req_bmps_comp_var)
(1244,pHddCtx)
(1245,pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump)
(1246,pHddCtx->cfg_ini)
(1247,cfg_ini)
(1248,pHddCtx->cfg_ini)
(1249,ENTER()
(1250,pHddCtx->cfg_ini->intfMacAddr[0].bytes[0])
(1251,BSL_Init(pVosContext)
(1252,vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],\n\\n                             p2p_dev_addr, VOS_MAC_ADDR_SIZE)
(1253,)
(1254,hdd_netdev_notifier)
(1255,cfg_ini)
(1256,)
(1257,pVosContext)
(1258,&pHddCtx->tx_rx_trafficTmr)
(1259,hdd_tx_rx_pkt_cnt_stat_timer_handler)
(1260,VOS_TIMER_TYPE_SW)
(1261,pHddCtx->scan_info.scan_finished_event)
(1262,VOS_TRACE_LEVEL_FATAL)
(1263,pHddCtx->cfg_ini->vosTraceEnableVOSS)
(1264,pHddCtx->cfg_ini->wlanLoggingEnable)
(1265,hdd_is_5g_supported(pHddCtx)
(1266,WLAN_HDD_SOFTAP)
(1267,)
(1268,abortscan_event_var)
(1269,0)
(1270,VOS_MODULE_ID_SYS)
(1271,&pHddCtx->cur_rx_level_lock)
(1272,cfg_ini)
(1273,oem_activate_service(pHddCtx)
(1274,register_inet6addr_notifier(&pHddCtx->ipv6_notifier)
(1275,VOS_MODULE_ID_TL)
(1276,vosTraceEnableBAP)
(1277,FALSE)
(1278,)
(1279,sizeof( hdd_context_t )
(1280,"%s: ROAM_SCAN_OFFLOAD Feature not supported")
(1281,pHddCtx->p2pDeviceAddress)
(1282,ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
(1283,pHddCtx)
(1284,vStatus)
(1285,status = wlan_hdd_init_channels(pHddCtx)
(1286,pHddCtx)
(1287,"%s: Failed to allocate mac_address for p2p_device")
(1288,)
(1289,&pHddCtx->spoof_mac_addr_work)
(1290,bytes)
(1291,status = vos_preStart( pHddCtx->pvosContext )
(1292,hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(1293,&mac_addr.bytes)
(1294,if (country_code)
(1295,)
(1296,"%s: vos_open failed")
(1297,if ( NULL == pHddCtx->hHal )
(1298,pConfig)
(1299,UapsdMask)
(1300,pHddCtx->scan_info)
(1301,if (pHddCtx->cfg_ini->wlanLoggingEnable &&\n\\n               (pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump )
(1302,pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(1303,pHddCtx->cfg_ini)
(1304,pHddCtx->cfg_ini)
(1305,hHal)
(1306,VOS_STA_SAP_MODE)
(1307,pHddCtx->tdls_source_timer)
(1308,cfg_ini)
(1309,goto err_free_hdd_context;)
(1310,vos_timer_init(&pHddCtx->tx_rx_trafficTmr,\n\\n                     VOS_TIMER_TYPE_SW,\n\\n                     hdd_tx_rx_pkt_cnt_stat_timer_handler,\n\\n                     (void *)
(1311,sizeof(VosWatchdogContext)
(1312,pHddCtx->parent_dev)
(1313,eWLAN_MODULE_DAL_CTRL)
(1314,if(IS_DYNAMIC_WMM_PS_ENABLED)
(1315,vosTraceEnableVOSS)
(1316,)
(1317,goto err_close_adapter;)
(1318,pHddCtx)
(1319,pHddCtx->cfg_ini->nthBeaconFilter)
(1320,)
(1321,FL("Logging disabled in ini")
(1322,pHddCtx->cfg_ini)
(1323,)
(1324,pHddCtx->cfg_ini->intfMacAddr[0])
(1325,0)
(1326,status)
(1327,NULL == pHddCtx->hHal)
(1328,memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],\n\\n                   sizeof(default_address)
(1329,pHddCtx)
(1330,if(ret < 0)
(1331,pHddCtx->cfg_ini)
(1332,p2pDeviceAddress)
(1333,wlan_hdd_cfg80211_nan_init(pHddCtx)
(1334,init_completion(&pHddCtx->linux_reg_req)
(1335,cfg_ini)
(1336,HAL_STATUS_SUCCESS( halStatus )
(1337,VOS_MONITOR_MODE == hdd_get_conparam()
(1338,enable_11d)
(1339,"%s: Failed kmalloc hdd_config_t")
(1340,&pHddCtx->full_pwr_comp_var)
(1341,wlanPerPktStatsLogEnable)
(1342,con_scan_abort_cnt)
(1343,status)
(1344,VOS_STA_SAP_MODE != hdd_get_conparam()
(1345,ret)
(1346,(char*)
(1347,(tHalHandle)
(1348,CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT)
(1349,pHddCtx->cfg_ini->intfMacAddr)
(1350,pHddCtx)
(1351,IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE)
(1352,fIsLogpEnabled)
(1353,FALSE)
(1354,&pHddCtx->req_bmps_comp_var)
(1355,pHddCtx->con_scan_abort_cnt)
(1356,hHal)
(1357,vosTraceEnableHDDSAP)
(1358,pHddCtx->standby_comp_var)
(1359,vStatus = BSL_Init(pVosContext)
(1360,)
(1361,ret)
(1362,vos_wake_lock_init(&pHddCtx->rx_wake_lock,\n\\n           "qcom_rx_wakelock")
(1363,cfg_ini)
(1364,(void *)
(1365,pHddCtx)
(1366,goto err_vosclose;)
(1367,pHddCtx)
(1368,)
(1369,eHAL_STATUS_SUCCESS == ret)
(1370,hHal)
(1371,hdd_open_cesium_nl_sock()
(1372,scan_work)
(1373,)
(1374,pHddCtx)
(1375,wcnss_get_wlan_mac_address((char*)
(1376,)
(1377,rx_wake_lock)
(1378,VOS_IS_STATUS_SUCCESS(status)
(1379,pHddCtx)
(1380,WLANBAP_Stop(pVosContext)
(1381,&pHddCtx->p2pDeviceAddress.bytes[0])
(1382,)
(1383,if ( !VOS_IS_STATUS_SUCCESS( status )
(1384,vosTraceEnableSME)
(1385,VOS_TRACE_LEVEL_ERROR)
(1386,)
(1387,0 == enable_11d)
(1388,hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
(1389,cfg_ini)
(1390,pAdapter)
(1391,"Registered IPv4 notifier")
(1392,VOS_IS_STATUS_SUCCESS( status )
(1393,hdd_hostapd_ch_avoid_cb)
(1394,WLAN_HDD_LOAD_IN_PROGRESS)
(1395,pHddCtx)
(1396,hdd_is_ssr_required()
(1397,0 == enable_dfs_chan_scan)
(1398,halStatus)
(1399,halStatus)
(1400,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to open BAP",__func__)
(1401,VOS_TRACE_LEVEL_FATAL)
(1402,cfg_ini)
(1403,IsMemoryDebugSupportEnabled)
(1404,wiphy)
(1405,status = hdd_post_voss_start_config( pHddCtx )
(1406,"%s: Do not enable UAPSD")
(1407,pHddCtx->cfg_ini->isRoamOffloadScanEnabled)
(1408,kfree(pHddCtx->cfg_ini)
(1409,"%s: Enable UAPSD for VI & VO")
(1410,)
(1411,0)
(1412,pHddCtx->roc_lock)
(1413,pHddCtx->ext_scan_context.response_event)
(1414,cfg_ini)
(1415,pHddCtx->hHal)
(1416,hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnableDAT)
(1417,hdd_config_t)
(1418,pHddCtx->configuredMcastBcastFilter)
(1419,err_config:)
(1420,pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed)
(1421,pHddCtx)
(1422,ret)
(1423,goto err_vosstop;)
(1424,pHddCtx)
(1425,hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",\n\\n                     __func__)
(1426,hHal)
(1427,pHddCtx->cfg_ini->gEnableDebugLog =\n\\n           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |\n\\n           VOS_PKT_PROTO_TYPE_ARP)
(1428,pHddCtx)
(1429,pHddCtx)
(1430,VOS_IS_STATUS_SUCCESS( status )
(1431,wdiTraceEnableDAT)
(1432,VOS_MODULE_ID_VOSS)
(1433,)
(1434,notifier_call)
(1435,pHddCtx->cfg_ini)
(1436,err_free_hdd_context:)
(1437,pHddCtx)
(1438,parent_dev)
(1439,"%s: module enable_dfs_chan_scan set to %d")
(1440,vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats)
(1441,hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini")
(1442,hdd_dp_util_send_rps_ind(pHddCtx)
(1443,err_vos_nv_close:)
(1444,pHddCtx->cfg_ini->fenableCHAvoidance)
(1445,VOS_STATUS_SUCCESS)
(1446,pHddCtx->cfg_ini->nthBeaconFilter = 1)
(1447,NULL)
(1448,wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)
(1449,WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(1450,goto err_unregister_wiphy;)
(1451,goto err_vosclose;)
(1452,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__)
(1453,if (ret)
(1454,pHddCtx->cfg_ini->gEnableDebugLog)
(1455,0)
(1456,hdd_vos_trace_enable(VOS_MODULE_ID_WDA,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableWDA)
(1457,0)
(1458,pHddCtx->cfg_ini)
(1459,"%s: vos_nv_open failed")
(1460,pHddCtx->nEnableStrictRegulatoryForFCC = FALSE)
(1461,tdls_lock)
(1462,pHddCtx)
(1463,pHddCtx)
(1464,VosContextType*)
(1465,)
(1466,pHddCtx->cfg_ini->intfMacAddr)
(1467,pHddCtx)
(1468,status = vos_nv_open()
(1469,vosTraceEnablePE)
(1470,vos_wake_lock_init(&pHddCtx->sap_wake_lock,\n\\n           "qcom_sap_wakelock")
(1471,pHddCtx->tx_rx_trafficTmr)
(1472,ret = sme_ChangeCountryCode(pHddCtx->hHal,\n\\n                                  (void *)
(1473,NULL)
(1474,pHddCtx->pvosContext)
(1475,gEnableRoamDelayStats)
(1476,VOS_TRACE_LEVEL_ERROR)
(1477,cfg_ini)
(1478,status)
(1479,&pHddCtx->scan_info.abortscan_event_var)
(1480,"%s: Failed to generate wlan interface mac addr "\n\\n                "using MAC from ini file ")
(1481,pVosContext)
(1482,mac_addr)
(1483,pHddCtx)
(1484,!VOS_IS_STATUS_SUCCESS( status )
(1485,goto err_reg_netdev;)
(1486,&pHddCtx->delack_timer)
(1487,VOS_TRACE_LEVEL_FATAL)
(1488,ipv6_notifier)
(1489,pHddCtx->cfg_ini->enableFwrMemDump)
(1490,if ( !VOS_IS_STATUS_SUCCESS( status )
(1491,pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated)
(1492,vos_is_multicast_logging()
(1493,parent_dev)
(1494,ret)
(1495,pHddCtx->cfg_ini)
(1496,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",\n\\n         __func__)
(1497,&pHddCtx->ipv6_notifier)
(1498,hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",\n\\n                     __func__)
(1499,VOS_IS_STATUS_SUCCESS( status )
(1500,(0 == ret)
(1501,vosTraceEnableSAP)
(1502,cfg_ini)
(1503,0)
(1504,VOS_STATUS_SUCCESS)
(1505,cfg_ini)
(1506,cfg_ini)
(1507,VOS_MODULE_ID_VOSS)
(1508,1)
(1509,pvosContext)
(1510,scan_pending_option)
(1511,wlan_hdd_schedule_defer_scan)
(1512,cfg_ini)
(1513,hdd_open_cesium_nl_sock()
(1514,hdd_parse_config_ini( pHddCtx )
(1515,hdd_wlan_free_wiphy_channels(wiphy)
(1516,pHddCtx->ipv4_notifier)
(1517,!VOS_IS_STATUS_SUCCESS( status )
(1518,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n              "%s: oem_activate_service failed", __func__)
(1519,)
(1520,hdd_wdi_trace_enable(eWLAN_MODULE_PAL,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnablePAL)
(1521,void *)
(1522,VOS_TRACE_LEVEL_ERROR)
(1523,btAmpConfig)
(1524,wlan_hdd_ipv4_changed)
(1525,pHddCtx->cfg_ini->intfMacAddr[0])
(1526,sme_ChangeCountryCode(pHddCtx->hHal,\n\\n                                  (void *)
(1527,VOS_IS_STATUS_SUCCESS(status)
(1528,err_vosclose:)
(1529,pHddCtx)
(1530,goto err_reg_netdev;)
(1531,goto err_vosstop;)
(1532,ipv4_notifier)
(1533,0)
(1534,roc_lock)
(1535,vosTraceEnableSYS)
(1536,status)
(1537,sme_UpdateChannelConfig(pHddCtx->hHal)
(1538,tdls_source_timer)
(1539,pHddCtx->cfg_ini->intfMacAddr)
(1540,pHddCtx)
(1541,wlanLoggingEnable)
(1542,pHddCtx->schedScan_lock)
(1543,eWLAN_MODULE_DAL_DATA)
(1544,hdd_exchange_version_and_caps(pHddCtx)
(1545,pHddCtx)
(1546,void *)
(1547,pHddCtx)
(1548,pHddCtx->scan_info)
(1549,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to Init BSL",__func__)
(1550,"%s: SME Change Country code from module param fail ret=%d")
(1551,pP2pAdapter)
(1552,pHddCtx->hHal)
(1553,wlan_hdd_get_intf_addr(pHddCtx)
(1554,pHddCtx->cfg_ini->vosTraceEnablePE)
(1555,enable_11d)
(1556,FALSE)
(1557,scan_ctxt)
(1558,VOS_MODULE_ID_VOSS)
(1559,pHddCtx)
(1560,VOS_TRACE_LEVEL_FATAL)
(1561,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__)
(1562,intfMacAddr)
(1563,VOS_IS_STATUS_SUCCESS( status )
(1564,goto err_reg_netdev;)
(1565,__func__)
(1566,"%s: Failed hdd_set_sme_config")
(1567,vStatus)
(1568,pHddCtx)
(1569,)
(1570,pHddCtx->isLogpInProgress)
(1571,change_country_code)
(1572,pHddCtx->cfg_ini->vosTraceEnablePMC)
(1573,NULL)
(1574,pHddCtx)
(1575,pHddCtx->cfg_ini->intfMacAddr)
(1576,pHddCtx->cfg_ini)
(1577,if (pAdapter != NULL)
(1578,if (FALSE == hdd_update_config_dat(pHddCtx)
(1579,pHddCtx->cfg_ini->UapsdMask =\n\\n                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT)
(1580,wdiTraceEnableCTL)
(1581,delack_timer)
(1582,cfg_ini)
(1583,VOS_IS_STATUS_SUCCESS( status )
(1584,pHddCtx->cfg_ini->wlanPerPktStatsLogEnable)
(1585,vStatus)
(1586,pHddCtx)
(1587,pHddCtx)
(1588,pHddCtx->cfg_ini)
(1589,mc_sus_event_var)
(1590,hHal)
(1591,__func__)
(1592,&pHddCtx->schedScan_lock)
(1593,wiphy_channel_update_event)
(1594,p2pDeviceAddress)
(1595,__func__)
(1596,pVosContext)
(1597,"%s: gEnableMemoryDebug=%d")
(1598,NULL)
(1599,pHddCtx->cfg_ini->vosTraceEnableSAP)
(1600,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__)
(1601,wdiTraceEnablePAL)
(1602,pHddCtx->cfg_ini->fIsLogpEnabled)
(1603,pP2pAdapter)
(1604,pHddCtx->cfg_ini->wlanPerPktStatsNumBuf)
(1605,hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",\n\\n             __func__, enable_dfs_chan_scan)
(1606,5000)
(1607,TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)
(1608,vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t )
(1609,cfg_ini)
(1610,)
(1611,pHddCtx->tx_sus_event_var)
(1612,default_address =\n\\n         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}})
(1613,ret)
(1614,pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d)
(1615,pHddCtx)
(1616,TRUE)
(1617,pHddCtx->cfg_ini)
(1618,pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(1619,sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done)
(1620,!VOS_IS_STATUS_SUCCESS( status )
(1621,if(wlan_logging_sock_activate_svc(\n\\n                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,\n\\n                   pHddCtx->cfg_ini->wlanLoggingNumBuf,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf)
(1622,"Failed to register IPv6 notifier")
(1623,WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(1624,return VOS_STATUS_SUCCESS;)
(1625,goto err_close_adapter;)
(1626,enable_11d)
(1627,pHddCtx)
(1628,response_event)
(1629,pHddCtx)
(1630,pHddCtx->cfg_ini)
(1631,p2pDeviceAddress)
(1632,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
(1633,err_reg_netdev:)
(1634,UapsdMask)
(1635,0 == ret)
(1636,cfg_ini)
(1637,pHddCtx)
(1638,pHddCtx->cfg_ini->intfMacAddr[0])
(1639,goto err_wdclose;)
(1640,"qcom_sap_wakelock")
(1641,vos_event_init(&pHddCtx->scan_info.scan_finished_event)
(1642,cfg_ini)
(1643,__func__)
(1644,cfg_ini)
(1645,VOS_TRACE_LEVEL_INFO)
(1646,sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter)
(1647,hdd_close_all_adapters( pHddCtx )
(1648,FALSE)
(1649,pHddCtx->cfg_ini)
(1650,spin_lock_init(&pHddCtx->schedScan_lock)
(1651,status = vos_sched_close( pVosContext )
(1652,status)
(1653,pHddCtx)
(1654,vos_mem_zero(pHddCtx, sizeof( hdd_context_t )
(1655,default_address)
(1656,VOS_TRACE_LEVEL_ERROR)
(1657,((VosContextType*)
(1658,hHal)
(1659,WLANBAP_Start(pVosContext)
(1660,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__)
(1661,)
(1662,)
(1663,pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",\n\\n                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
(1664,pHddCtx)
(1665,sizeof(default_address)
(1666,)
(1667,)
(1668,hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",\n\\n             __func__, enable_11d)
(1669,pVosContext)
(1670,p2p_dev_addr)
(1671,IS_DYNAMIC_WMM_PS_ENABLED)
(1672,)
(1673,if ((0 == ret)
(1674,bytes)
(1675,pHddCtx->cfg_ini->wdiTraceEnablePAL)
(1676,mac_addr)
(1677,)
(1678,vos_preStart( pHddCtx->pvosContext )
(1679,status)
(1680,pHddCtx)
(1681,pVosContext)
(1682,goto err_bap_stop;)
(1683,ptt_pid)
(1684,pHddCtx->con_scan_abort_cnt = 0)
(1685,pHddCtx->ipv6_notifier)
(1686,VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx)
(1687,pHddCtx)
(1688,vosWatchdog)
(1689,VOS_TRACE_LEVEL_FATAL)
(1690,country_code)
(1691,!VOS_IS_STATUS_SUCCESS(status)
(1692,sme_UpdateRoamScanOffloadEnabled((tHalHandle)
(1693,gEnableDebugLog)
(1694,pP2pAdapter)
(1695,VOS_TIMER_TYPE_SW)
(1696,err_close_adapter:)
(1697,if(!VOS_IS_STATUS_SUCCESS(vStatus)
(1698,enable_dfs_chan_scan)
(1699,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,\n\\n         "%s: Failed to close VOSS Scheduler", __func__)
(1700,&((VosContextType*)
(1701,if (!HAL_STATUS_SUCCESS( halStatus )
(1702,pHddCtx->cfg_ini->intfMacAddr[0].bytes)
(1703,)
(1704,schedScan_lock)
(1705,WEXT_SCAN_PENDING_GIVEUP)
(1706,__func__)
(1707,pHddCtx->cfg_ini->wlanLoggingNumBuf)
(1708,pVosContext)
(1709,WNI_CFG_STA_ID)
(1710,status)
(1711,pHddCtx->cfg_ini)
(1712,wiphy)
(1713,vosTraceEnableWDI)
(1714,pHddCtx->full_pwr_comp_var)
(1715,pHddCtx)
(1716,pHddCtx)
(1717,void *)
(1718,pHddCtx)
(1719,if (eHAL_STATUS_SUCCESS == ret)
(1720,pHddCtx->cfg_ini->wdiTraceEnableDAL)
(1721,pAdapter)
(1722,pHddCtx->cfg_ini->intfMacAddr[0])
(1723,pHddCtx->cfg_ini->mcastBcastFilterSetting)
(1724,if (vos_is_multicast_logging()
(1725,hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS )
(1726,pConfig)
(1727,hdd_11d_scan_done)
(1728,ipv4_notifier)
(1729,)
(1730,if (VOS_FTM_MODE == hdd_get_conparam()
(1731,"%s: Failed to Init BSL")
(1732,vStatus = VOS_STATUS_SUCCESS)
(1733,"softap.%d")
(1734,"%s: Failed to close VOSS Scheduler")
(1735,cfg_ini)
(1736,vStatus = WLANBAP_Open(pVosContext)
(1737,pHddCtx->p2pDeviceAddress.bytes)
(1738,if (0 == enable_11d || 1 == enable_11d)
(1739,pHddCtx->hHal)
(1740,wlanLoggingNumBuf)
(1741,pHddCtx->pvosContext)
(1742,"Registered IPv6 notifier")
(1743,if (false == hdd_is_5g_supported(pHddCtx)
(1744,goto err_reg_netdev;)
(1745,VOS_STA_SAP_MODE)
(1746,init_completion(&pHddCtx->full_pwr_comp_var)
(1747,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n               "%s: Failed to start TL",__func__)
(1748,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE)
(1749,pHddCtx->cfg_ini->wlanLoggingEnable &&\n\\n               (pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump )
(1750,if (hdd_open_cesium_nl_sock()
(1751,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(1752,VOS_TRACE_LEVEL_FATAL)
(1753,pHddCtx)
(1754,pHddCtx)
(1755,if(btc_activate_service(pHddCtx)
(1756,)
(1757,pHddCtx->scan_info)
(1758,VOS_TRACE_LEVEL_DEBUG)
(1759,pHddCtx->hHal = (tHalHandle)
(1760,vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,\n\\n                                hdd_processSpoofMacAddrRequest)
(1761,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__)
(1762,ptt_sock_activate_svc(pHddCtx)
(1763,init_completion(&pHddCtx->rx_sus_event_var)
(1764,vStatus)
(1765,"%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1")
(1766,pHddCtx->sap_wake_lock)
(1767,&pHddCtx->mc_sus_event_var)
(1768,cfg_ini)
(1769,VOS_TRACE_LEVEL_FATAL)
(1770,if (!VOS_IS_STATUS_SUCCESS(status)
(1771,pHddCtx->parent_dev)
(1772,&pHddCtx->cfg_ini->intfMacAddr[0])
(1773,default_address)
(1774,subsystem_restart("wcnss")
(1775,RET)
(1776,pHddCtx)
(1777,hddRegisterPmOps(pHddCtx)
(1778,)
(1779,vos_init_wiphy_from_nv_bin()
(1780,0)
(1781,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__)
(1782,__func__)
(1783,pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr)
(1784,!vos_is_macaddr_zero(&mac_addr)
(1785,pHddCtx)
(1786,VOS_FTM_MODE)
(1787,!VOS_IS_STATUS_SUCCESS(status)
(1788,mac_addr.bytes)
(1789,__func__)
(1790,enableMgmtLogging)
(1791,VOS_TRACE_LEVEL_DEBUG)
(1792,pHddCtx->cfg_ini)
(1793,if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)
(1794,pHddCtx->cfg_ini)
(1795,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__)
(1796,pHddCtx->pvosContext)
(1797,)
(1798,pHddCtx)
(1799,goto err_free_hdd_context;)
(1800,)
(1801,pVosContext= NULL)
(1802,__func__)
(1803,wlanLoggingEnable)
(1804,&pHddCtx->rx_wake_lock)
(1805,"wlan%d")
(1806,pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^