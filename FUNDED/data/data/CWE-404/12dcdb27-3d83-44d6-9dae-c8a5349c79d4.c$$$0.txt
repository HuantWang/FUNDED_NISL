-----label-----
1
-----code-----
int c4iw_post_send(struct ib_qp *ibqp, struct ib_send_wr *wr,
		   struct ib_send_wr **bad_wr)
{
	int err = 0;
	u8 len16 = 0;
	enum fw_wr_opcodes fw_opcode = 0;
	enum fw_ri_wr_flags fw_flags;
	struct c4iw_qp *qhp;
	union t4_wr *wqe = NULL;
	u32 num_wrs;
	struct t4_swsqe *swsqe;
	unsigned long flag;
	u16 idx = 0;

	qhp = to_c4iw_qp(ibqp);
	spin_lock_irqsave(&qhp->lock, flag);

	/*
	 * If the qp has been flushed, then just insert a special
	 * drain cqe.
	 */
	if (qhp->wq.flushed) {
		spin_unlock_irqrestore(&qhp->lock, flag);
		err = complete_sq_drain_wrs(qhp, wr, bad_wr);
		return err;
	}
	num_wrs = t4_sq_avail(&qhp->wq);
	if (num_wrs == 0) {
		spin_unlock_irqrestore(&qhp->lock, flag);
		*bad_wr = wr;
		return -ENOMEM;
	}
	while (wr) {
		if (num_wrs == 0) {
			err = -ENOMEM;
			*bad_wr = wr;
			break;
		}
		wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +
		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE);

		fw_flags = 0;
		if (wr->send_flags & IB_SEND_SOLICITED)
			fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;
		if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)
			fw_flags |= FW_RI_COMPLETION_FLAG;
		swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx];
		switch (wr->opcode) {
		case IB_WR_SEND_WITH_INV:
		case IB_WR_SEND:
			if (wr->send_flags & IB_SEND_FENCE)
				fw_flags |= FW_RI_READ_FENCE_FLAG;
			fw_opcode = FW_RI_SEND_WR;
			if (wr->opcode == IB_WR_SEND)
				swsqe->opcode = FW_RI_SEND;
			else
				swsqe->opcode = FW_RI_SEND_WITH_INV;
			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);
			break;
		case IB_WR_RDMA_WRITE:
			fw_opcode = FW_RI_RDMA_WRITE_WR;
			swsqe->opcode = FW_RI_RDMA_WRITE;
			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);
			break;
		case IB_WR_RDMA_READ:
		case IB_WR_RDMA_READ_WITH_INV:
			fw_opcode = FW_RI_RDMA_READ_WR;
			swsqe->opcode = FW_RI_READ_REQ;
			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {
				c4iw_invalidate_mr(qhp->rhp,
						   wr->sg_list[0].lkey);
				fw_flags = FW_RI_RDMA_READ_INVALIDATE;
			} else {
				fw_flags = 0;
			}
			err = build_rdma_read(wqe, wr, &len16);
			if (err)
				break;
			swsqe->read_len = wr->sg_list[0].length;
			if (!qhp->wq.sq.oldest_read)
				qhp->wq.sq.oldest_read = swsqe;
			break;
		case IB_WR_REG_MR: {
			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);

			swsqe->opcode = FW_RI_FAST_REGISTER;
			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&
			    !mhp->attr.state && mhp->mpl_len <= 2) {
				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;
				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),
						  mhp, &len16);
			} else {
				fw_opcode = FW_RI_FR_NSMR_WR;
				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),
				       mhp, &len16,
				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);
				if (err)
					break;
			}
			mhp->attr.state = 1;
			break;
		}
		case IB_WR_LOCAL_INV:
			if (wr->send_flags & IB_SEND_FENCE)
				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;
			fw_opcode = FW_RI_INV_LSTAG_WR;
			swsqe->opcode = FW_RI_LOCAL_INV;
			err = build_inv_stag(wqe, wr, &len16);
			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);
			break;
		default:
			pr_warn("%s post of type=%d TBD!\n", __func__,
				wr->opcode);
			err = -EINVAL;
		}
		if (err) {
			*bad_wr = wr;
			break;
		}
		swsqe->idx = qhp->wq.sq.pidx;
		swsqe->complete = 0;
		swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||
				  qhp->sq_sig_all;
		swsqe->flushed = 0;
		swsqe->wr_id = wr->wr_id;
		if (c4iw_wr_log) {
			swsqe->sge_ts = cxgb4_read_sge_timestamp(
					qhp->rhp->rdev.lldi.ports[0]);
			getnstimeofday(&swsqe->host_ts);
		}

		init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16);

		pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",
			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,
			 swsqe->opcode, swsqe->read_len);
		wr = wr->next;
		num_wrs--;
		t4_sq_produce(&qhp->wq, len16);
		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);
	}
	if (!qhp->rhp->rdev.status_page->db_off) {
		t4_ring_sq_db(&qhp->wq, idx, wqe);
		spin_unlock_irqrestore(&qhp->lock, flag);
	} else {
		spin_unlock_irqrestore(&qhp->lock, flag);
		ring_kernel_sq_db(qhp, idx);
	}
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
20,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
24,38
24,39
24,40
24,41
24,42
25,26
26,27
26,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
61,62
62,63
62,64
63,64
65,66
65,67
65,68
68,69
69,70
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
81,83
84,85
85,86
85,87
87,88
89,90
90,91
90,92
91,92
93,94
93,95
95,96
97,98
98,99
98,100
99,100
101,102
101,103
102,103
104,105
106,107
107,108
107,109
107,110
108,109
110,111
111,112
111,113
112,113
115,116
117,118
117,119
118,119
118,120
119,120
119,121
120,121
124,125
124,126
124,127
125,126
126,127
126,128
126,129
127,128
129,130
130,131
130,132
131,132
134,135
136,137
137,138
137,139
138,139
140,141
140,142
140,143
140,144
141,142
143,144
145,146
147,148
149,150
150,151
152,153
153,154
153,155
154,155
156,157
156,158
157,158
159,160
160,161
160,162
161,162
164,165
164,166
165,166
165,167
166,167
169,170
169,171
169,172
170,171
171,172
171,173
171,174
172,173
174,175
175,176
175,177
176,177
179,180
181,182
182,183
182,184
183,184
184,185
186,187
188,189
189,190
190,191
192,193
192,194
193,194
195,196
195,197
195,198
195,199
195,200
195,201
195,202
195,203
195,204
195,205
195,206
195,207
195,208
195,209
195,210
195,211
195,212
195,213
195,214
195,215
196,197
196,198
197,198
197,199
198,199
201,202
201,203
201,204
202,203
203,204
203,205
204,205
206,207
207,208
209,210
210,211
210,212
211,212
212,213
214,215
217,218
218,219
218,220
219,220
221,222
221,223
222,223
222,224
223,224
225,226
227,228
228,229
228,230
229,230
229,231
230,231
230,232
231,232
233,234
235,236
235,237
236,237
236,238
237,238
237,239
238,239
243,244
243,245
244,245
244,246
245,246
245,247
246,247
246,248
247,248
252,253
254,255
255,256
255,257
256,257
259,260
259,261
260,261
260,262
261,262
261,263
262,263
265,266
267,268
268,269
268,270
269,270
271,272
273,274
273,275
274,275
274,276
275,276
275,277
276,277
276,278
277,278
280,281
282,283
282,284
283,284
286,287
287,288
287,289
288,289
290,291
292,293
293,294
293,295
294,295
296,297
297,298
297,299
298,299
298,300
299,300
299,301
300,301
300,302
301,302
306,307
306,308
307,308
307,309
308,309
308,310
309,310
314,315
314,316
315,316
315,317
316,317
319,320
319,321
319,322
319,323
319,324
319,325
319,326
319,327
319,328
319,329
319,330
319,331
319,332
319,333
319,334
319,335
319,336
319,337
319,338
319,339
319,340
319,341
319,342
319,343
319,344
319,345
319,346
319,347
319,348
319,349
319,350
319,351
319,352
319,353
320,321
321,322
323,324
324,325
326,327
326,328
327,328
327,329
328,329
328,330
329,330
332,333
334,335
335,336
335,337
336,337
338,339
340,341
341,342
341,343
342,343
344,345
346,347
346,348
346,349
347,348
347,349
348,349
348,350
349,350
352,353
354,355
355,356
355,357
356,357
356,358
357,358
360,361
362,363
363,364
363,365
364,365
364,366
365,366
368,369
370,371
371,372
371,373
372,373
374,375
374,376
374,377
374,378
374,379
375,376
377,378
378,379
378,380
379,380
379,381
380,381
384,385
386,387
388,389
389,390
392,393
393,394
395,396
396,397
396,398
397,398
399,400
401,402
402,403
402,404
403,404
403,405
404,405
407,408
409,410
410,411
410,412
411,412
413,414
413,415
413,416
413,417
413,418
414,415
416,417
417,418
417,419
418,419
418,420
419,420
423,424
425,426
427,428
428,429
431,432
432,433
434,435
435,436
437,438
438,439
438,440
439,440
441,442
443,444
444,445
444,446
445,446
445,447
446,447
449,450
451,452
451,453
451,454
452,453
452,454
453,454
453,455
454,455
457,458
459,460
459,461
460,461
461,462
461,463
461,464
462,463
464,465
464,466
465,466
468,469
468,470
469,470
469,471
470,471
470,472
471,472
476,477
477,478
477,479
478,479
480,481
482,483
483,484
484,485
484,486
485,486
488,489
489,490
489,491
490,491
492,493
492,494
492,495
492,496
493,494
495,496
497,498
499,500
500,501
502,503
502,504
503,504
506,507
507,508
507,509
508,509
508,510
509,510
512,513
512,514
513,514
513,515
514,515
514,516
515,516
520,521
520,522
521,522
522,523
522,524
523,524
523,525
524,525
524,526
525,526
530,531
531,532
531,533
532,533
532,534
533,534
533,535
534,535
534,536
535,536
540,541
543,544
544,545
546,547
546,548
546,549
546,550
546,551
547,548
548,549
548,550
549,550
551,552
551,553
551,554
554,555
555,556
555,557
556,557
558,559
558,560
559,560
559,561
560,561
562,563
565,566
566,567
566,568
567,568
567,569
568,569
571,572
573,574
573,575
573,576
574,575
574,576
575,576
575,577
576,577
576,578
577,578
577,579
578,579
578,580
579,580
579,581
580,581
586,587
587,588
587,589
588,589
588,590
589,590
593,594
593,595
594,595
594,596
595,596
599,600
599,601
600,601
601,602
601,603
602,603
604,605
606,607
607,608
607,609
607,610
607,611
607,612
608,609
610,611
611,612
611,613
612,613
615,616
615,617
616,617
618,619
620,621
622,623
623,624
625,626
625,627
625,628
626,627
627,628
627,629
628,629
630,631
632,633
633,634
633,635
634,635
636,637
636,638
636,639
636,640
636,641
636,642
636,643
637,638
639,640
640,641
640,642
641,642
641,643
642,643
646,647
648,649
648,650
649,650
651,652
653,654
655,656
656,657
658,659
658,660
659,660
659,661
660,661
660,662
661,662
661,663
662,663
668,669
668,670
669,670
672,673
673,674
673,675
674,675
674,676
675,676
675,677
676,677
682,683
683,684
685,686
685,687
686,687
686,688
687,688
687,689
688,689
691,692
693,694
694,695
694,696
695,696
697,698
699,700
700,701
700,702
701,702
703,704
705,706
706,707
706,708
707,708
707,709
708,709
711,712
713,714
714,715
714,716
715,716
717,718
717,719
717,720
717,721
718,719
720,721
722,723
724,725
725,726
727,728
728,729
728,730
728,731
729,730
731,732
731,733
732,733
735,736
735,737
736,737
736,738
737,738
743,744
744,745
744,746
744,747
744,748
745,746
748,749
750,751
750,752
751,752
754,755
755,756
755,757
756,757
758,759
759,760
761,762
761,763
762,763
764,765
764,766
765,766
766,767
766,768
767,768
768,769
770,771
773,774
774,775
774,776
775,776
775,777
776,777
779,780
779,781
780,781
780,782
781,782
781,783
782,783
787,788
788,789
788,790
789,790
789,791
790,791
794,795
795,796
795,797
796,797
796,798
797,798
800,801
800,802
801,802
802,803
802,804
803,804
803,805
804,805
807,808
809,810
809,811
810,811
813,814
814,815
814,816
815,816
815,817
816,817
820,821
821,822
821,823
822,823
822,824
823,824
826,827
826,828
827,828
830,831
830,832
831,832
833,834
833,835
834,835
835,836
835,837
836,837
836,838
837,838
840,841
840,842
841,842
843,844
843,845
844,845
844,846
845,846
845,847
846,847
846,848
847,848
847,849
848,849
855,856
856,857
856,858
857,858
859,860
860,861
860,862
861,862
864,865
865,866
865,867
865,868
865,869
865,870
865,871
866,867
868,869
870,871
870,872
871,872
871,873
872,873
872,874
873,874
878,879
880,881
882,883
884,885
885,886
885,887
885,888
885,889
885,890
885,891
886,887
889,890
889,891
890,891
890,892
893,894
893,895
894,895
897,898
897,899
898,899
898,900
899,900
899,901
900,901
905,906
905,907
906,907
909,910
909,911
910,911
913,914
914,915
914,916
915,916
917,918
917,919
918,919
921,922
922,923
923,924
925,926
926,927
926,928
926,929
927,928
929,930
930,931
930,932
931,932
934,935
936,937
937,938
937,939
938,939
940,941
940,942
940,943
941,942
943,944
943,945
944,945
947,948
949,950
949,951
949,952
950,951
951,952
951,953
952,953
952,954
953,954
953,955
954,955
954,956
955,956
961,962
961,963
962,963
963,964
963,965
963,966
963,967
964,965
966,967
967,968
967,969
968,969
971,972
973,974
975,976
976,977
976,978
976,979
977,978
979,980
980,981
980,982
981,982
984,985
986,987
986,988
987,988
988,989
988,990
988,991
989,990
991,992
992,993
992,994
993,994
996,997
998,999
999,1000
999,1001
999,1002
1000,1001
1002,1003
1004,1005
1006,1007
1007,1008
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,23,27,29,31,35,37,39,43,45,47,51,53,57,59,60,64,66,67,70,74,76,80,82,83,86,88,92,94,96,100,103,105,109,113,114,116,121,122,123,128,132,133,135,139,142,144,146,148,151,155,158,162,163,167,168,173,177,178,180,185,187,191,194,199,200,205,208,213,215,216,220,224,226,232,234,239,240,241,242,248,249,250,251,253,257,258,263,264,266,270,272,278,279,281,284,285,289,291,295,302,303,304,305,310,311,312,313,317,318,322,325,330,331,333,337,339,343,345,350,351,353,358,359,361,366,367,369,373,376,381,382,383,385,387,390,391,394,398,400,405,406,408,412,415,420,421,422,424,426,429,430,433,436,440,442,447,448,450,455,456,458,463,466,467,472,473,474,475,479,481,486,487,491,494,496,498,501,504,505,510,511,516,517,518,519,526,527,528,529,536,537,538,539,541,542,545,550,552,553,557,561,563,564,569,570,572,581,582,583,584,585,590,591,592,596,597,598,603,605,609,613,614,617,619,621,624,629,631,635,638,643,644,645,647,650,652,654,657,663,664,665,666,667,670,671,677,678,679,680,681,684,689,690,692,696,698,702,704,709,710,712,716,719,721,723,726,730,733,734,738,739,740,741,742,746,747,749,752,753,757,760,763,769,771,772,777,778,783,784,785,786,791,792,793,798,799,805,806,808,811,812,817,818,819,824,825,828,829,832,838,839,842,849,850,851,852,853,854,858,862,863,867,869,874,875,876,877,879,881,883,887,888,891,892,895,896,901,902,903,904,907,908,911,912,916,919,920,924,928,932,933,935,939,942,945,946,948,956,957,958,959,960,965,969,970,972,974,978,982,983,985,990,994,995,997,1001,1003,1005,1008
-----computeFrom-----
98,99
98,100
137,138
137,139
153,154
153,155
165,166
165,167
182,183
182,184
197,198
197,199
203,204
203,205
210,211
210,212
218,219
218,220
228,229
228,230
243,244
243,245
255,256
255,257
260,261
260,262
268,269
268,270
274,275
274,276
275,276
275,277
287,288
287,289
293,294
293,295
327,328
327,329
335,336
335,337
341,342
341,343
347,348
347,349
355,356
355,357
363,364
363,365
371,372
371,373
396,397
396,398
402,403
402,404
410,411
410,412
438,439
438,440
444,445
444,446
452,453
452,454
477,478
477,479
484,485
484,486
489,490
489,491
507,508
507,509
531,532
531,533
566,567
566,568
574,575
574,576
575,576
575,577
593,594
593,595
601,602
601,603
627,628
627,629
633,634
633,635
673,674
673,675
686,687
686,688
694,695
694,696
700,701
700,702
706,707
706,708
714,715
714,716
755,756
755,757
766,767
766,768
774,775
774,776
788,789
788,790
795,796
795,797
800,801
800,802
802,803
802,804
814,815
814,816
821,822
821,823
835,836
835,837
914,915
914,916
937,938
937,939
943,944
943,945
-----guardedBy-----
351,359
455,472
596,621
-----guardedByNegation-----
351,367
596,654
583,665
584,666
581,663
582,664
-----lastLexicalUse-----
351,367
596,654
-----jump-----
351,367
596,654
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IfStatement;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int c4iw_post_send(struct ib_qp *ibqp, struct ib_send_wr *wr,		   struct ib_send_wr **bad_wr){	int err = 0;	u8 len16 = 0;	enum fw_wr_opcodes fw_opcode = 0;	enum fw_ri_wr_flags fw_flags;	struct c4iw_qp *qhp;	union t4_wr *wqe = NULL;	u32 num_wrs;	struct t4_swsqe *swsqe;	unsigned long flag;	u16 idx = 0;	qhp = to_c4iw_qp(ibqp);	spin_lock_irqsave(&qhp->lock, flag);	/*	 * If the qp has been flushed, then just insert a special	 * drain cqe.	 */	if (qhp->wq.flushed) {		spin_unlock_irqrestore(&qhp->lock, flag);		err = complete_sq_drain_wrs(qhp, wr, bad_wr);		return err;	}	num_wrs = t4_sq_avail(&qhp->wq);	if (num_wrs == 0) {		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}	while (wr) {		if (num_wrs == 0) {			err = -ENOMEM;			*bad_wr = wr;			break;		}		wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE);		fw_flags = 0;		if (wr->send_flags & IB_SEND_SOLICITED)			fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;		if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)			fw_flags |= FW_RI_COMPLETION_FLAG;		swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx];		switch (wr->opcode) {		case IB_WR_SEND_WITH_INV:		case IB_WR_SEND:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;			fw_opcode = FW_RI_SEND_WR;			if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_WRITE:			fw_opcode = FW_RI_RDMA_WRITE_WR;			swsqe->opcode = FW_RI_RDMA_WRITE;			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_READ:		case IB_WR_RDMA_READ_WITH_INV:			fw_opcode = FW_RI_RDMA_READ_WR;			swsqe->opcode = FW_RI_READ_REQ;			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}			err = build_rdma_read(wqe, wr, &len16);			if (err)				break;			swsqe->read_len = wr->sg_list[0].length;			if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;			break;		case IB_WR_REG_MR: {			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}		case IB_WR_LOCAL_INV:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;			fw_opcode = FW_RI_INV_LSTAG_WR;			swsqe->opcode = FW_RI_LOCAL_INV;			err = build_inv_stag(wqe, wr, &len16);			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);			break;		default:			pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);			err = -EINVAL;		}		if (err) {			*bad_wr = wr;			break;		}		swsqe->idx = qhp->wq.sq.pidx;		swsqe->complete = 0;		swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all;		swsqe->flushed = 0;		swsqe->wr_id = wr->wr_id;		if (c4iw_wr_log) {			swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(&swsqe->host_ts);		}		init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16);		pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,			 swsqe->opcode, swsqe->read_len);		wr = wr->next;		num_wrs--;		t4_sq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);	}	if (!qhp->rhp->rdev.status_page->db_off) {		t4_ring_sq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	} else {		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_sq_db(qhp, idx);	}	return err;}
int
c4iw_post_send(struct ib_qp *ibqp, struct ib_send_wr *wr,		   struct ib_send_wr **bad_wr)
c4iw_post_send
struct ib_qp *ibqp
struct ib_qp
ib_qp
*ibqp
*
ibqp
struct ib_send_wr *wr
struct ib_send_wr
ib_send_wr
*wr
*
wr
struct ib_send_wr **bad_wr
struct ib_send_wr
ib_send_wr
**bad_wr
*
*
bad_wr
{	int err = 0;	u8 len16 = 0;	enum fw_wr_opcodes fw_opcode = 0;	enum fw_ri_wr_flags fw_flags;	struct c4iw_qp *qhp;	union t4_wr *wqe = NULL;	u32 num_wrs;	struct t4_swsqe *swsqe;	unsigned long flag;	u16 idx = 0;	qhp = to_c4iw_qp(ibqp);	spin_lock_irqsave(&qhp->lock, flag);	/*	 * If the qp has been flushed, then just insert a special	 * drain cqe.	 */	if (qhp->wq.flushed) {		spin_unlock_irqrestore(&qhp->lock, flag);		err = complete_sq_drain_wrs(qhp, wr, bad_wr);		return err;	}	num_wrs = t4_sq_avail(&qhp->wq);	if (num_wrs == 0) {		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}	while (wr) {		if (num_wrs == 0) {			err = -ENOMEM;			*bad_wr = wr;			break;		}		wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE);		fw_flags = 0;		if (wr->send_flags & IB_SEND_SOLICITED)			fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;		if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)			fw_flags |= FW_RI_COMPLETION_FLAG;		swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx];		switch (wr->opcode) {		case IB_WR_SEND_WITH_INV:		case IB_WR_SEND:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;			fw_opcode = FW_RI_SEND_WR;			if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_WRITE:			fw_opcode = FW_RI_RDMA_WRITE_WR;			swsqe->opcode = FW_RI_RDMA_WRITE;			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_READ:		case IB_WR_RDMA_READ_WITH_INV:			fw_opcode = FW_RI_RDMA_READ_WR;			swsqe->opcode = FW_RI_READ_REQ;			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}			err = build_rdma_read(wqe, wr, &len16);			if (err)				break;			swsqe->read_len = wr->sg_list[0].length;			if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;			break;		case IB_WR_REG_MR: {			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}		case IB_WR_LOCAL_INV:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;			fw_opcode = FW_RI_INV_LSTAG_WR;			swsqe->opcode = FW_RI_LOCAL_INV;			err = build_inv_stag(wqe, wr, &len16);			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);			break;		default:			pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);			err = -EINVAL;		}		if (err) {			*bad_wr = wr;			break;		}		swsqe->idx = qhp->wq.sq.pidx;		swsqe->complete = 0;		swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all;		swsqe->flushed = 0;		swsqe->wr_id = wr->wr_id;		if (c4iw_wr_log) {			swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(&swsqe->host_ts);		}		init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16);		pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,			 swsqe->opcode, swsqe->read_len);		wr = wr->next;		num_wrs--;		t4_sq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);	}	if (!qhp->rhp->rdev.status_page->db_off) {		t4_ring_sq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	} else {		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_sq_db(qhp, idx);	}	return err;}
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
u8 len16 = 0;
u8 len16 = 0;
u8
u8
len16 = 0
len16
= 0
0
enum fw_wr_opcodes fw_opcode = 0;
enum fw_wr_opcodes fw_opcode = 0;
enum fw_wr_opcodes
fw_wr_opcodes
fw_opcode = 0
fw_opcode
= 0
0
enum fw_ri_wr_flags fw_flags;
enum fw_ri_wr_flags fw_flags;
enum fw_ri_wr_flags
fw_ri_wr_flags
fw_flags
fw_flags
struct c4iw_qp *qhp;
struct c4iw_qp *qhp;
struct c4iw_qp
c4iw_qp
*qhp
*
qhp
union t4_wr *wqe = NULL;
union t4_wr *wqe = NULL;
union t4_wr
t4_wr
*wqe = NULL
*
wqe
= NULL
NULL
NULL
u32 num_wrs;
u32 num_wrs;
u32
u32
num_wrs
num_wrs
struct t4_swsqe *swsqe;
struct t4_swsqe *swsqe;
struct t4_swsqe
t4_swsqe
*swsqe
*
swsqe
unsigned long flag;
unsigned long flag;
unsigned long
flag
flag
u16 idx = 0;
u16 idx = 0;
u16
u16
idx = 0
idx
= 0
0
qhp = to_c4iw_qp(ibqp);
qhp = to_c4iw_qp(ibqp)
qhp
qhp
to_c4iw_qp(ibqp)
to_c4iw_qp
to_c4iw_qp
ibqp
ibqp
spin_lock_irqsave(&qhp->lock, flag);
spin_lock_irqsave(&qhp->lock, flag)
spin_lock_irqsave
spin_lock_irqsave
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
if (qhp->wq.flushed) {		spin_unlock_irqrestore(&qhp->lock, flag);		err = complete_sq_drain_wrs(qhp, wr, bad_wr);		return err;	}
qhp->wq.flushed
qhp->wq
qhp
qhp
wq
flushed
{		spin_unlock_irqrestore(&qhp->lock, flag);		err = complete_sq_drain_wrs(qhp, wr, bad_wr);		return err;	}
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
err = complete_sq_drain_wrs(qhp, wr, bad_wr);
err = complete_sq_drain_wrs(qhp, wr, bad_wr)
err
err
complete_sq_drain_wrs(qhp, wr, bad_wr)
complete_sq_drain_wrs
complete_sq_drain_wrs
qhp
qhp
wr
wr
bad_wr
bad_wr
return err;
err
err
num_wrs = t4_sq_avail(&qhp->wq);
num_wrs = t4_sq_avail(&qhp->wq)
num_wrs
num_wrs
t4_sq_avail(&qhp->wq)
t4_sq_avail
t4_sq_avail
&qhp->wq
qhp->wq
qhp
qhp
wq
if (num_wrs == 0) {		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}
num_wrs == 0
num_wrs
num_wrs
0
{		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
*bad_wr = wr;
*bad_wr = wr
*bad_wr
bad_wr
bad_wr
wr
wr
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
while (wr) {		if (num_wrs == 0) {			err = -ENOMEM;			*bad_wr = wr;			break;		}		wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE);		fw_flags = 0;		if (wr->send_flags & IB_SEND_SOLICITED)			fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;		if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)			fw_flags |= FW_RI_COMPLETION_FLAG;		swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx];		switch (wr->opcode) {		case IB_WR_SEND_WITH_INV:		case IB_WR_SEND:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;			fw_opcode = FW_RI_SEND_WR;			if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_WRITE:			fw_opcode = FW_RI_RDMA_WRITE_WR;			swsqe->opcode = FW_RI_RDMA_WRITE;			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_READ:		case IB_WR_RDMA_READ_WITH_INV:			fw_opcode = FW_RI_RDMA_READ_WR;			swsqe->opcode = FW_RI_READ_REQ;			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}			err = build_rdma_read(wqe, wr, &len16);			if (err)				break;			swsqe->read_len = wr->sg_list[0].length;			if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;			break;		case IB_WR_REG_MR: {			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}		case IB_WR_LOCAL_INV:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;			fw_opcode = FW_RI_INV_LSTAG_WR;			swsqe->opcode = FW_RI_LOCAL_INV;			err = build_inv_stag(wqe, wr, &len16);			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);			break;		default:			pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);			err = -EINVAL;		}		if (err) {			*bad_wr = wr;			break;		}		swsqe->idx = qhp->wq.sq.pidx;		swsqe->complete = 0;		swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all;		swsqe->flushed = 0;		swsqe->wr_id = wr->wr_id;		if (c4iw_wr_log) {			swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(&swsqe->host_ts);		}		init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16);		pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,			 swsqe->opcode, swsqe->read_len);		wr = wr->next;		num_wrs--;		t4_sq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);	}
wr
wr
{		if (num_wrs == 0) {			err = -ENOMEM;			*bad_wr = wr;			break;		}		wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE);		fw_flags = 0;		if (wr->send_flags & IB_SEND_SOLICITED)			fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;		if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)			fw_flags |= FW_RI_COMPLETION_FLAG;		swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx];		switch (wr->opcode) {		case IB_WR_SEND_WITH_INV:		case IB_WR_SEND:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;			fw_opcode = FW_RI_SEND_WR;			if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_WRITE:			fw_opcode = FW_RI_RDMA_WRITE_WR;			swsqe->opcode = FW_RI_RDMA_WRITE;			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_READ:		case IB_WR_RDMA_READ_WITH_INV:			fw_opcode = FW_RI_RDMA_READ_WR;			swsqe->opcode = FW_RI_READ_REQ;			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}			err = build_rdma_read(wqe, wr, &len16);			if (err)				break;			swsqe->read_len = wr->sg_list[0].length;			if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;			break;		case IB_WR_REG_MR: {			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}		case IB_WR_LOCAL_INV:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;			fw_opcode = FW_RI_INV_LSTAG_WR;			swsqe->opcode = FW_RI_LOCAL_INV;			err = build_inv_stag(wqe, wr, &len16);			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);			break;		default:			pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);			err = -EINVAL;		}		if (err) {			*bad_wr = wr;			break;		}		swsqe->idx = qhp->wq.sq.pidx;		swsqe->complete = 0;		swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all;		swsqe->flushed = 0;		swsqe->wr_id = wr->wr_id;		if (c4iw_wr_log) {			swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(&swsqe->host_ts);		}		init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16);		pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,			 swsqe->opcode, swsqe->read_len);		wr = wr->next;		num_wrs--;		t4_sq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);	}
if (num_wrs == 0) {			err = -ENOMEM;			*bad_wr = wr;			break;		}
num_wrs == 0
num_wrs
num_wrs
0
{			err = -ENOMEM;			*bad_wr = wr;			break;		}
err = -ENOMEM;
err = -ENOMEM
err
err
-ENOMEM
ENOMEM
ENOMEM
*bad_wr = wr;
*bad_wr = wr
*bad_wr
bad_wr
bad_wr
wr
wr
break;
wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE);
wqe = (union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE)
wqe
wqe
(union t4_wr *)((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE)
union t4_wr *
union t4_wr
t4_wr
*
*
((u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE)
(u8 *)qhp->wq.sq.queue +		      qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE
(u8 *)qhp->wq.sq.queue
u8 *
u8
u8
*
*
qhp->wq.sq.queue
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
queue
qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE
qhp->wq.sq.wq_pidx
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
wq_pidx
T4_EQ_ENTRY_SIZE
T4_EQ_ENTRY_SIZE
fw_flags = 0;
fw_flags = 0
fw_flags
fw_flags
0
if (wr->send_flags & IB_SEND_SOLICITED)			fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;
wr->send_flags & IB_SEND_SOLICITED
wr->send_flags
wr
wr
send_flags
IB_SEND_SOLICITED
IB_SEND_SOLICITED
fw_flags |= FW_RI_SOLICITED_EVENT_FLAG;
fw_flags |= FW_RI_SOLICITED_EVENT_FLAG
fw_flags
fw_flags
FW_RI_SOLICITED_EVENT_FLAG
FW_RI_SOLICITED_EVENT_FLAG
if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)			fw_flags |= FW_RI_COMPLETION_FLAG;
wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all
wr->send_flags & IB_SEND_SIGNALED
wr->send_flags
wr
wr
send_flags
IB_SEND_SIGNALED
IB_SEND_SIGNALED
qhp->sq_sig_all
qhp
qhp
sq_sig_all
fw_flags |= FW_RI_COMPLETION_FLAG;
fw_flags |= FW_RI_COMPLETION_FLAG
fw_flags
fw_flags
FW_RI_COMPLETION_FLAG
FW_RI_COMPLETION_FLAG
swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx];
swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx]
swsqe
swsqe
&qhp->wq.sq.sw_sq[qhp->wq.sq.pidx]
qhp->wq.sq.sw_sq[qhp->wq.sq.pidx]
qhp->wq.sq.sw_sq
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
sw_sq
qhp->wq.sq.pidx
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
pidx
switch (wr->opcode) {		case IB_WR_SEND_WITH_INV:		case IB_WR_SEND:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;			fw_opcode = FW_RI_SEND_WR;			if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_WRITE:			fw_opcode = FW_RI_RDMA_WRITE_WR;			swsqe->opcode = FW_RI_RDMA_WRITE;			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_READ:		case IB_WR_RDMA_READ_WITH_INV:			fw_opcode = FW_RI_RDMA_READ_WR;			swsqe->opcode = FW_RI_READ_REQ;			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}			err = build_rdma_read(wqe, wr, &len16);			if (err)				break;			swsqe->read_len = wr->sg_list[0].length;			if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;			break;		case IB_WR_REG_MR: {			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}		case IB_WR_LOCAL_INV:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;			fw_opcode = FW_RI_INV_LSTAG_WR;			swsqe->opcode = FW_RI_LOCAL_INV;			err = build_inv_stag(wqe, wr, &len16);			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);			break;		default:			pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);			err = -EINVAL;		}
wr->opcode
wr
wr
opcode
{		case IB_WR_SEND_WITH_INV:		case IB_WR_SEND:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;			fw_opcode = FW_RI_SEND_WR;			if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;			err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_WRITE:			fw_opcode = FW_RI_RDMA_WRITE_WR;			swsqe->opcode = FW_RI_RDMA_WRITE;			err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);			break;		case IB_WR_RDMA_READ:		case IB_WR_RDMA_READ_WITH_INV:			fw_opcode = FW_RI_RDMA_READ_WR;			swsqe->opcode = FW_RI_READ_REQ;			if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}			err = build_rdma_read(wqe, wr, &len16);			if (err)				break;			swsqe->read_len = wr->sg_list[0].length;			if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;			break;		case IB_WR_REG_MR: {			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}		case IB_WR_LOCAL_INV:			if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;			fw_opcode = FW_RI_INV_LSTAG_WR;			swsqe->opcode = FW_RI_LOCAL_INV;			err = build_inv_stag(wqe, wr, &len16);			c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);			break;		default:			pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);			err = -EINVAL;		}
case IB_WR_SEND_WITH_INV:
IB_WR_SEND_WITH_INV
IB_WR_SEND_WITH_INV
case IB_WR_SEND:
IB_WR_SEND
IB_WR_SEND
if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_READ_FENCE_FLAG;
wr->send_flags & IB_SEND_FENCE
wr->send_flags
wr
wr
send_flags
IB_SEND_FENCE
IB_SEND_FENCE
fw_flags |= FW_RI_READ_FENCE_FLAG;
fw_flags |= FW_RI_READ_FENCE_FLAG
fw_flags
fw_flags
FW_RI_READ_FENCE_FLAG
FW_RI_READ_FENCE_FLAG
fw_opcode = FW_RI_SEND_WR;
fw_opcode = FW_RI_SEND_WR
fw_opcode
fw_opcode
FW_RI_SEND_WR
FW_RI_SEND_WR
if (wr->opcode == IB_WR_SEND)				swsqe->opcode = FW_RI_SEND;			else				swsqe->opcode = FW_RI_SEND_WITH_INV;
wr->opcode == IB_WR_SEND
wr->opcode
wr
wr
opcode
IB_WR_SEND
IB_WR_SEND
swsqe->opcode = FW_RI_SEND;
swsqe->opcode = FW_RI_SEND
swsqe->opcode
swsqe
swsqe
opcode
FW_RI_SEND
FW_RI_SEND
swsqe->opcode = FW_RI_SEND_WITH_INV;
swsqe->opcode = FW_RI_SEND_WITH_INV
swsqe->opcode
swsqe
swsqe
opcode
FW_RI_SEND_WITH_INV
FW_RI_SEND_WITH_INV
err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16);
err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16)
err
err
build_rdma_send(&qhp->wq.sq, wqe, wr, &len16)
build_rdma_send
build_rdma_send
&qhp->wq.sq
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
wqe
wqe
wr
wr
&len16
len16
len16
break;
case IB_WR_RDMA_WRITE:
IB_WR_RDMA_WRITE
IB_WR_RDMA_WRITE
fw_opcode = FW_RI_RDMA_WRITE_WR;
fw_opcode = FW_RI_RDMA_WRITE_WR
fw_opcode
fw_opcode
FW_RI_RDMA_WRITE_WR
FW_RI_RDMA_WRITE_WR
swsqe->opcode = FW_RI_RDMA_WRITE;
swsqe->opcode = FW_RI_RDMA_WRITE
swsqe->opcode
swsqe
swsqe
opcode
FW_RI_RDMA_WRITE
FW_RI_RDMA_WRITE
err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16);
err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16)
err
err
build_rdma_write(&qhp->wq.sq, wqe, wr, &len16)
build_rdma_write
build_rdma_write
&qhp->wq.sq
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
wqe
wqe
wr
wr
&len16
len16
len16
break;
case IB_WR_RDMA_READ:
IB_WR_RDMA_READ
IB_WR_RDMA_READ
case IB_WR_RDMA_READ_WITH_INV:
IB_WR_RDMA_READ_WITH_INV
IB_WR_RDMA_READ_WITH_INV
fw_opcode = FW_RI_RDMA_READ_WR;
fw_opcode = FW_RI_RDMA_READ_WR
fw_opcode
fw_opcode
FW_RI_RDMA_READ_WR
FW_RI_RDMA_READ_WR
swsqe->opcode = FW_RI_READ_REQ;
swsqe->opcode = FW_RI_READ_REQ
swsqe->opcode
swsqe
swsqe
opcode
FW_RI_READ_REQ
FW_RI_READ_REQ
if (wr->opcode == IB_WR_RDMA_READ_WITH_INV) {				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			} else {				fw_flags = 0;			}
wr->opcode == IB_WR_RDMA_READ_WITH_INV
wr->opcode
wr
wr
opcode
IB_WR_RDMA_READ_WITH_INV
IB_WR_RDMA_READ_WITH_INV
{				c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);				fw_flags = FW_RI_RDMA_READ_INVALIDATE;			}
c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey);
c4iw_invalidate_mr(qhp->rhp,						   wr->sg_list[0].lkey)
c4iw_invalidate_mr
c4iw_invalidate_mr
qhp->rhp
qhp
qhp
rhp
wr->sg_list[0].lkey
wr->sg_list[0]
wr->sg_list
wr
wr
sg_list
0
lkey
fw_flags = FW_RI_RDMA_READ_INVALIDATE;
fw_flags = FW_RI_RDMA_READ_INVALIDATE
fw_flags
fw_flags
FW_RI_RDMA_READ_INVALIDATE
FW_RI_RDMA_READ_INVALIDATE
{				fw_flags = 0;			}
fw_flags = 0;
fw_flags = 0
fw_flags
fw_flags
0
err = build_rdma_read(wqe, wr, &len16);
err = build_rdma_read(wqe, wr, &len16)
err
err
build_rdma_read(wqe, wr, &len16)
build_rdma_read
build_rdma_read
wqe
wqe
wr
wr
&len16
len16
len16
if (err)				break;
err
err
break;
swsqe->read_len = wr->sg_list[0].length;
swsqe->read_len = wr->sg_list[0].length
swsqe->read_len
swsqe
swsqe
read_len
wr->sg_list[0].length
wr->sg_list[0]
wr->sg_list
wr
wr
sg_list
0
length
if (!qhp->wq.sq.oldest_read)				qhp->wq.sq.oldest_read = swsqe;
!qhp->wq.sq.oldest_read
qhp->wq.sq.oldest_read
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
oldest_read
qhp->wq.sq.oldest_read = swsqe;
qhp->wq.sq.oldest_read = swsqe
qhp->wq.sq.oldest_read
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
oldest_read
swsqe
swsqe
break;
case IB_WR_REG_MR:
IB_WR_REG_MR
IB_WR_REG_MR
{			struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);			swsqe->opcode = FW_RI_FAST_REGISTER;			if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}			mhp->attr.state = 1;			break;		}
struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);
struct c4iw_mr *mhp = to_c4iw_mr(reg_wr(wr)->mr);
struct c4iw_mr
c4iw_mr
*mhp = to_c4iw_mr(reg_wr(wr)->mr)
*
mhp
= to_c4iw_mr(reg_wr(wr)->mr)
to_c4iw_mr(reg_wr(wr)->mr)
to_c4iw_mr
to_c4iw_mr
reg_wr(wr)->mr
reg_wr(wr)
reg_wr
reg_wr
wr
wr
mr
swsqe->opcode = FW_RI_FAST_REGISTER;
swsqe->opcode = FW_RI_FAST_REGISTER
swsqe->opcode
swsqe
swsqe
opcode
FW_RI_FAST_REGISTER
FW_RI_FAST_REGISTER
if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2) {				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			} else {				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}
qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state && mhp->mpl_len <= 2
qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&			    !mhp->attr.state
qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support
qhp->rhp->rdev.lldi
qhp->rhp->rdev
qhp->rhp
qhp
qhp
rhp
rdev
lldi
fr_nsmr_tpte_wr_support
!mhp->attr.state
mhp->attr.state
mhp->attr
mhp
mhp
attr
state
mhp->mpl_len <= 2
mhp->mpl_len
mhp
mhp
mpl_len
2
{				fw_opcode = FW_RI_FR_NSMR_TPTE_WR;				build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);			}
fw_opcode = FW_RI_FR_NSMR_TPTE_WR;
fw_opcode = FW_RI_FR_NSMR_TPTE_WR
fw_opcode
fw_opcode
FW_RI_FR_NSMR_TPTE_WR
FW_RI_FR_NSMR_TPTE_WR
build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16);
build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr),						  mhp, &len16)
build_tpte_memreg
build_tpte_memreg
&wqe->fr_tpte
wqe->fr_tpte
wqe
wqe
fr_tpte
reg_wr(wr)
reg_wr
reg_wr
wr
wr
mhp
mhp
&len16
len16
len16
{				fw_opcode = FW_RI_FR_NSMR_WR;				err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);				if (err)					break;			}
fw_opcode = FW_RI_FR_NSMR_WR;
fw_opcode = FW_RI_FR_NSMR_WR
fw_opcode
fw_opcode
FW_RI_FR_NSMR_WR
FW_RI_FR_NSMR_WR
err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl);
err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl)
err
err
build_memreg(&qhp->wq.sq, wqe, reg_wr(wr),				       mhp, &len16,				       qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl)
build_memreg
build_memreg
&qhp->wq.sq
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
wqe
wqe
reg_wr(wr)
reg_wr
reg_wr
wr
wr
mhp
mhp
&len16
len16
len16
qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl
qhp->rhp->rdev.lldi
qhp->rhp->rdev
qhp->rhp
qhp
qhp
rhp
rdev
lldi
ulptx_memwrite_dsgl
if (err)					break;
err
err
break;
mhp->attr.state = 1;
mhp->attr.state = 1
mhp->attr.state
mhp->attr
mhp
mhp
attr
state
1
break;
case IB_WR_LOCAL_INV:
IB_WR_LOCAL_INV
IB_WR_LOCAL_INV
if (wr->send_flags & IB_SEND_FENCE)				fw_flags |= FW_RI_LOCAL_FENCE_FLAG;
wr->send_flags & IB_SEND_FENCE
wr->send_flags
wr
wr
send_flags
IB_SEND_FENCE
IB_SEND_FENCE
fw_flags |= FW_RI_LOCAL_FENCE_FLAG;
fw_flags |= FW_RI_LOCAL_FENCE_FLAG
fw_flags
fw_flags
FW_RI_LOCAL_FENCE_FLAG
FW_RI_LOCAL_FENCE_FLAG
fw_opcode = FW_RI_INV_LSTAG_WR;
fw_opcode = FW_RI_INV_LSTAG_WR
fw_opcode
fw_opcode
FW_RI_INV_LSTAG_WR
FW_RI_INV_LSTAG_WR
swsqe->opcode = FW_RI_LOCAL_INV;
swsqe->opcode = FW_RI_LOCAL_INV
swsqe->opcode
swsqe
swsqe
opcode
FW_RI_LOCAL_INV
FW_RI_LOCAL_INV
err = build_inv_stag(wqe, wr, &len16);
err = build_inv_stag(wqe, wr, &len16)
err
err
build_inv_stag(wqe, wr, &len16)
build_inv_stag
build_inv_stag
wqe
wqe
wr
wr
&len16
len16
len16
c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey);
c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey)
c4iw_invalidate_mr
c4iw_invalidate_mr
qhp->rhp
qhp
qhp
rhp
wr->ex.invalidate_rkey
wr->ex
wr
wr
ex
invalidate_rkey
break;
default:
pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode);
pr_warn("%s post of type=%d TBD!\n", __func__,				wr->opcode)
pr_warn
pr_warn
"%s post of type=%d TBD!\n"
__func__
__func__
wr->opcode
wr
wr
opcode
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
if (err) {			*bad_wr = wr;			break;		}
err
err
{			*bad_wr = wr;			break;		}
*bad_wr = wr;
*bad_wr = wr
*bad_wr
bad_wr
bad_wr
wr
wr
break;
swsqe->idx = qhp->wq.sq.pidx;
swsqe->idx = qhp->wq.sq.pidx
swsqe->idx
swsqe
swsqe
idx
qhp->wq.sq.pidx
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
pidx
swsqe->complete = 0;
swsqe->complete = 0
swsqe->complete
swsqe
swsqe
complete
0
swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all;
swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all
swsqe->signaled
swsqe
swsqe
signaled
(wr->send_flags & IB_SEND_SIGNALED) ||				  qhp->sq_sig_all
(wr->send_flags & IB_SEND_SIGNALED)
wr->send_flags & IB_SEND_SIGNALED
wr->send_flags
wr
wr
send_flags
IB_SEND_SIGNALED
IB_SEND_SIGNALED
qhp->sq_sig_all
qhp
qhp
sq_sig_all
swsqe->flushed = 0;
swsqe->flushed = 0
swsqe->flushed
swsqe
swsqe
flushed
0
swsqe->wr_id = wr->wr_id;
swsqe->wr_id = wr->wr_id
swsqe->wr_id
swsqe
swsqe
wr_id
wr->wr_id
wr
wr
wr_id
if (c4iw_wr_log) {			swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(&swsqe->host_ts);		}
c4iw_wr_log
c4iw_wr_log
{			swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(&swsqe->host_ts);		}
swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0]);
swsqe->sge_ts = cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0])
swsqe->sge_ts
swsqe
swsqe
sge_ts
cxgb4_read_sge_timestamp(					qhp->rhp->rdev.lldi.ports[0])
cxgb4_read_sge_timestamp
cxgb4_read_sge_timestamp
qhp->rhp->rdev.lldi.ports[0]
qhp->rhp->rdev.lldi.ports
qhp->rhp->rdev.lldi
qhp->rhp->rdev
qhp->rhp
qhp
qhp
rhp
rdev
lldi
ports
0
getnstimeofday(&swsqe->host_ts);
getnstimeofday(&swsqe->host_ts)
getnstimeofday
getnstimeofday
&swsqe->host_ts
swsqe->host_ts
swsqe
swsqe
host_ts
init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16);
init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16)
init_wr_hdr
init_wr_hdr
wqe
wqe
qhp->wq.sq.pidx
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
pidx
fw_opcode
fw_opcode
fw_flags
fw_flags
len16
len16
pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,			 swsqe->opcode, swsqe->read_len);
pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.sq.pidx,			 swsqe->opcode, swsqe->read_len)
pr_debug
pr_debug
"cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\n"
(unsigned long long)wr->wr_id
unsigned long long
unsigned long long

wr->wr_id
wr
wr
wr_id
qhp->wq.sq.pidx
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
pidx
swsqe->opcode
swsqe
swsqe
opcode
swsqe->read_len
swsqe
swsqe
read_len
wr = wr->next;
wr = wr->next
wr
wr
wr->next
wr
wr
next
num_wrs--;
num_wrs--
num_wrs
num_wrs
t4_sq_produce(&qhp->wq, len16);
t4_sq_produce(&qhp->wq, len16)
t4_sq_produce
t4_sq_produce
&qhp->wq
qhp->wq
qhp
qhp
wq
len16
len16
idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);
idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
idx
idx
DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
DIV_ROUND_UP
DIV_ROUND_UP
len16*16
len16
len16
16
T4_EQ_ENTRY_SIZE
T4_EQ_ENTRY_SIZE
if (!qhp->rhp->rdev.status_page->db_off) {		t4_ring_sq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	} else {		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_sq_db(qhp, idx);	}
!qhp->rhp->rdev.status_page->db_off
qhp->rhp->rdev.status_page->db_off
qhp->rhp->rdev.status_page
qhp->rhp->rdev
qhp->rhp
qhp
qhp
rhp
rdev
status_page
db_off
{		t4_ring_sq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	}
t4_ring_sq_db(&qhp->wq, idx, wqe);
t4_ring_sq_db(&qhp->wq, idx, wqe)
t4_ring_sq_db
t4_ring_sq_db
&qhp->wq
qhp->wq
qhp
qhp
wq
idx
idx
wqe
wqe
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
{		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_sq_db(qhp, idx);	}
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
ring_kernel_sq_db(qhp, idx);
ring_kernel_sq_db(qhp, idx)
ring_kernel_sq_db
ring_kernel_sq_db
qhp
qhp
idx
idx
return err;
err
err
-----joern-----
(186,594,0)
(46,198,0)
(68,490,0)
(142,524,0)
(175,333,0)
(25,601,0)
(190,429,0)
(587,164,0)
(240,587,0)
(82,267,0)
(134,352,0)
(453,256,0)
(224,444,0)
(180,300,0)
(189,466,0)
(513,352,0)
(32,44,0)
(213,474,0)
(332,77,0)
(108,86,0)
(514,43,0)
(157,237,0)
(145,165,0)
(103,211,0)
(55,179,0)
(434,542,0)
(474,213,0)
(544,178,0)
(81,283,0)
(415,504,0)
(285,443,0)
(494,507,0)
(311,572,0)
(210,257,0)
(86,37,0)
(162,438,0)
(163,44,0)
(259,29,0)
(563,139,0)
(110,517,0)
(271,399,0)
(348,59,0)
(568,458,0)
(70,89,0)
(430,37,0)
(22,100,0)
(334,425,0)
(413,139,0)
(566,413,0)
(69,458,0)
(545,490,0)
(539,475,0)
(147,590,0)
(367,234,0)
(305,567,0)
(75,608,0)
(484,534,0)
(525,339,0)
(71,162,0)
(336,179,0)
(23,209,0)
(267,77,0)
(198,209,0)
(435,390,0)
(11,472,0)
(552,178,0)
(554,254,0)
(352,490,0)
(43,514,0)
(404,425,0)
(85,6,0)
(120,390,0)
(587,588,0)
(266,93,0)
(396,15,0)
(290,102,0)
(253,227,0)
(237,139,0)
(273,43,0)
(558,366,0)
(270,573,0)
(316,498,0)
(205,183,0)
(193,594,0)
(389,226,0)
(228,468,0)
(259,179,0)
(101,226,0)
(430,68,0)
(541,360,0)
(288,504,0)
(375,386,0)
(326,533,0)
(133,583,0)
(331,44,0)
(504,415,0)
(603,532,0)
(587,451,0)
(478,166,0)
(64,139,0)
(64,475,0)
(150,527,0)
(444,472,0)
(494,139,0)
(532,44,0)
(430,178,0)
(488,466,0)
(180,91,0)
(33,217,0)
(126,107,0)
(351,399,0)
(491,57,0)
(63,158,0)
(594,186,0)
(524,122,0)
(557,259,0)
(214,230,0)
(466,475,0)
(342,323,0)
(577,77,0)
(604,425,0)
(279,47,0)
(473,228,0)
(428,44,0)
(333,44,0)
(91,180,0)
(341,250,0)
(614,208,0)
(563,83,0)
(546,44,0)
(235,257,0)
(348,570,0)
(4,336,0)
(18,399,0)
(106,518,0)
(245,287,0)
(114,510,0)
(222,140,0)
(387,64,0)
(348,212,0)
(117,106,0)
(224,79,0)
(54,232,0)
(154,224,0)
(177,178,0)
(31,582,0)
(310,256,0)
(502,452,0)
(371,44,0)
(270,567,0)
(231,475,0)
(608,508,0)
(286,30,0)
(606,345,0)
(272,32,0)
(27,209,0)
(191,334,0)
(237,530,0)
(248,351,0)
(601,77,0)
(52,485,0)
(407,502,0)
(329,439,0)
(144,475,0)
(287,44,0)
(517,212,0)
(499,486,0)
(513,2,0)
(230,335,0)
(595,527,0)
(84,475,0)
(377,475,0)
(275,399,0)
(435,399,0)
(372,425,0)
(348,177,0)
(61,546,0)
(583,194,0)
(349,131,0)
(351,520,0)
(299,351,0)
(167,510,0)
(223,470,0)
(344,348,0)
(207,77,0)
(300,180,0)
(45,366,0)
(129,1,0)
(587,425,0)
(8,275,0)
(50,498,0)
(366,77,0)
(83,563,0)
(476,169,0)
(139,475,0)
(128,336,0)
(376,504,0)
(0,386,0)
(47,279,0)
(345,166,0)
(121,47,0)
(294,55,0)
(282,422,0)
(498,295,0)
(391,234,0)
(379,300,0)
(521,601,0)
(520,598,0)
(58,518,0)
(166,444,0)
(118,437,0)
(48,533,0)
(380,59,0)
(184,612,0)
(325,466,0)
(485,91,0)
(514,59,0)
(106,179,0)
(8,163,0)
(9,595,0)
(231,224,0)
(234,139,0)
(503,178,0)
(549,281,0)
(229,77,0)
(64,614,0)
(217,436,0)
(520,518,0)
(351,346,0)
(211,139,0)
(115,496,0)
(186,475,0)
(494,582,0)
(482,494,0)
(154,361,0)
(232,438,0)
(418,451,0)
(292,123,0)
(149,166,0)
(439,486,0)
(66,35,0)
(224,66,0)
(139,539,0)
(458,555,0)
(125,59,0)
(74,93,0)
(415,3,0)
(8,100,0)
(37,86,0)
(135,77,0)
(243,292,0)
(122,524,0)
(323,475,0)
(534,590,0)
(352,139,0)
(250,178,0)
(361,169,0)
(587,16,0)
(360,214,0)
(6,492,0)
(127,380,0)
(130,194,0)
(486,439,0)
(93,266,0)
(276,142,0)
(413,475,0)
(420,403,0)
(57,112,0)
(102,44,0)
(527,150,0)
(241,205,0)
(405,241,0)
(587,89,0)
(107,224,0)
(335,192,0)
(107,295,0)
(86,139,0)
(169,44,0)
(385,77,0)
(228,221,0)
(233,430,0)
(355,377,0)
(583,256,0)
(300,139,0)
(287,454,0)
(196,444,0)
(555,458,0)
(582,494,0)
(440,348,0)
(116,270,0)
(204,177,0)
(605,164,0)
(156,608,0)
(249,485,0)
(24,2,0)
(575,428,0)
(323,565,0)
(430,385,0)
(112,57,0)
(485,44,0)
(159,427,0)
(532,56,0)
(535,319,0)
(250,150,0)
(587,504,0)
(139,399,0)
(181,124,0)
(598,77,0)
(573,378,0)
(358,237,0)
(393,178,0)
(252,429,0)
(424,77,0)
(309,231,0)
(301,399,0)
(400,139,0)
(374,83,0)
(322,81,0)
(76,211,0)
(324,345,0)
(181,179,0)
(369,208,0)
(248,386,0)
(361,154,0)
(470,35,0)
(527,595,0)
(12,606,0)
(219,24,0)
(59,399,0)
(79,425,0)
(530,237,0)
(1,216,0)
(386,248,0)
(501,29,0)
(172,32,0)
(368,66,0)
(431,223,0)
(403,250,0)
(470,223,0)
(486,499,0)
(59,570,0)
(520,351,0)
(26,73,0)
(95,77,0)
(221,228,0)
(536,259,0)
(124,377,0)
(88,178,0)
(357,223,0)
(56,532,0)
(315,131,0)
(257,235,0)
(24,307,0)
(6,44,0)
(451,192,0)
(499,161,0)
(437,21,0)
(226,475,0)
(173,74,0)
(165,509,0)
(519,472,0)
(356,594,0)
(261,510,0)
(158,179,0)
(427,44,0)
(433,563,0)
(320,444,0)
(483,406,0)
(44,178,0)
(234,475,0)
(242,93,0)
(539,139,0)
(413,199,0)
(362,341,0)
(398,275,0)
(506,479,0)
(493,43,0)
(449,494,0)
(458,44,0)
(439,425,0)
(30,286,0)
(394,47,0)
(444,320,0)
(93,74,0)
(123,519,0)
(91,485,0)
(40,472,0)
(587,443,0)
(492,6,0)
(84,2,0)
(381,81,0)
(594,77,0)
(417,382,0)
(561,589,0)
(398,179,0)
(354,164,0)
(600,178,0)
(278,514,0)
(345,519,0)
(80,295,0)
(504,399,0)
(520,11,0)
(21,422,0)
(416,451,0)
(230,214,0)
(143,177,0)
(186,139,0)
(315,297,0)
(308,199,0)
(602,181,0)
(57,508,0)
(335,230,0)
(289,321,0)
(179,399,0)
(94,179,0)
(587,267,0)
(473,179,0)
(90,186,0)
(68,97,0)
(569,333,0)
(304,600,0)
(438,162,0)
(494,504,0)
(535,114,0)
(328,546,0)
(146,604,0)
(162,14,0)
(401,280,0)
(555,426,0)
(489,346,0)
(317,323,0)
(428,112,0)
(35,66,0)
(160,361,0)
(163,8,0)
(279,517,0)
(194,583,0)
(225,406,0)
(587,533,0)
(588,414,0)
(254,179,0)
(436,217,0)
(592,165,0)
(144,139,0)
(507,425,0)
(256,583,0)
(335,542,0)
(16,89,0)
(282,12,0)
(12,506,0)
(496,115,0)
(101,2,0)
(571,474,0)
(480,224,0)
(613,16,0)
(211,475,0)
(576,520,0)
(339,44,0)
(586,598,0)
(611,331,0)
(265,472,0)
(183,436,0)
(141,11,0)
(102,344,0)
(67,144,0)
(564,570,0)
(92,84,0)
(327,535,0)
(35,470,0)
(421,580,0)
(553,479,0)
(224,231,0)
(209,44,0)
(386,139,0)
(423,77,0)
(550,86,0)
(170,144,0)
(591,414,0)
(351,248,0)
(450,428,0)
(142,415,0)
(194,528,0)
(520,321,0)
(264,605,0)
(562,77,0)
(103,320,0)
(464,555,0)
(425,178,0)
(187,572,0)
(56,199,0)
(66,224,0)
(400,475,0)
(456,164,0)
(486,139,0)
(479,444,0)
(78,156,0)
(360,475,0)
(248,340,0)
(49,287,0)
(430,107,0)
(161,499,0)
(474,179,0)
(415,142,0)
(528,426,0)
(185,348,0)
(446,77,0)
(150,250,0)
(96,573,0)
(164,89,0)
(214,360,0)
(430,15,0)
(580,612,0)
(395,227,0)
(606,12,0)
(183,205,0)
(565,569,0)
(344,102,0)
(218,103,0)
(39,595,0)
(168,570,0)
(410,331,0)
(343,473,0)
(502,44,0)
(315,444,0)
(260,77,0)
(348,344,0)
(166,345,0)
(587,498,0)
(590,534,0)
(314,378,0)
(597,532,0)
(441,77,0)
(99,530,0)
(599,307,0)
(492,346,0)
(496,139,0)
(234,391,0)
(174,400,0)
(84,44,0)
(15,323,0)
(97,68,0)
(274,230,0)
(28,77,0)
(510,44,0)
(206,315,0)
(280,351,0)
(378,573,0)
(565,323,0)
(244,21,0)
(365,271,0)
(462,163,0)
(12,282,0)
(426,555,0)
(340,248,0)
(459,519,0)
(200,32,0)
(136,492,0)
(313,496,0)
(523,377,0)
(138,380,0)
(75,580,0)
(436,183,0)
(551,286,0)
(567,179,0)
(377,124,0)
(202,205,0)
(37,77,0)
(515,506,0)
(226,397,0)
(109,64,0)
(323,139,0)
(47,44,0)
(516,587,0)
(72,263,0)
(447,587,0)
(472,77,0)
(224,107,0)
(388,463,0)
(334,61,0)
(86,475,0)
(517,279,0)
(246,398,0)
(164,533,0)
(112,428,0)
(350,400,0)
(20,470,0)
(256,44,0)
(385,486,0)
(487,267,0)
(590,77,0)
(30,276,0)
(528,556,0)
(587,1,0)
(255,539,0)
(43,425,0)
(593,399,0)
(227,321,0)
(614,64,0)
(477,35,0)
(496,475,0)
(321,77,0)
(587,605,0)
(284,413,0)
(345,606,0)
(411,443,0)
(32,200,0)
(596,569,0)
(222,44,0)
(297,315,0)
(461,84,0)
(386,475,0)
(269,425,0)
(429,179,0)
(36,513,0)
(438,232,0)
(338,427,0)
(591,44,0)
(587,165,0)
(588,587,0)
(339,161,0)
(427,286,0)
(304,331,0)
(131,315,0)
(578,398,0)
(529,77,0)
(495,502,0)
(227,179,0)
(437,589,0)
(270,293,0)
(232,44,0)
(104,399,0)
(463,200,0)
(119,163,0)
(205,241,0)
(113,241,0)
(15,77,0)
(247,479,0)
(526,333,0)
(208,614,0)
(38,614,0)
(75,430,0)
(197,89,0)
(426,528,0)
(542,335,0)
(543,414,0)
(41,37,0)
(132,180,0)
(463,524,0)
(65,224,0)
(460,1,0)
(522,257,0)
(298,77,0)
(17,235,0)
(390,435,0)
(123,292,0)
(563,475,0)
(42,385,0)
(506,12,0)
(587,406,0)
(520,179,0)
(131,139,0)
(86,504,0)
(587,601,0)
(390,454,0)
(213,203,0)
(226,139,0)
(585,178,0)
(79,224,0)
(408,139,0)
(169,361,0)
(300,475,0)
(158,207,0)
(221,217,0)
(81,179,0)
(505,399,0)
(533,89,0)
(481,399,0)
(283,77,0)
(587,366,0)
(430,590,0)
(580,14,0)
(257,44,0)
(62,123,0)
(430,572,0)
(61,334,0)
(315,263,0)
(465,77,0)
(148,507,0)
(34,84,0)
(199,413,0)
(137,426,0)
(612,14,0)
(195,77,0)
(528,194,0)
(142,276,0)
(211,103,0)
(546,61,0)
(334,399,0)
(151,391,0)
(303,79,0)
(466,325,0)
(414,588,0)
(347,288,0)
(604,86,0)
(414,591,0)
(579,292,0)
(600,304,0)
(570,178,0)
(595,44,0)
(86,604,0)
(53,178,0)
(171,422,0)
(87,178,0)
(241,44,0)
(584,600,0)
(412,496,0)
(44,222,0)
(21,437,0)
(105,276,0)
(280,283,0)
(220,250,0)
(337,30,0)
(507,494,0)
(384,563,0)
(609,546,0)
(331,304,0)
(200,463,0)
(188,55,0)
(469,591,0)
(605,89,0)
(224,154,0)
(419,6,0)
(377,139,0)
(511,542,0)
(161,339,0)
(452,502,0)
(363,232,0)
(346,492,0)
(263,315,0)
(100,8,0)
(486,504,0)
(152,360,0)
(291,77,0)
(352,475,0)
(572,178,0)
(277,587,0)
(283,208,0)
(443,77,0)
(251,169,0)
(406,178,0)
(258,300,0)
(10,73,0)
(203,213,0)
(237,475,0)
(520,207,0)
(235,74,0)
(239,472,0)
(346,351,0)
(330,588,0)
(336,11,0)
(382,567,0)
(500,115,0)
(269,323,0)
(13,589,0)
(51,207,0)
(111,605,0)
(380,570,0)
(520,281,0)
(612,84,0)
(271,250,0)
(353,222,0)
(348,504,0)
(542,44,0)
(497,97,0)
(370,16,0)
(430,582,0)
(89,399,0)
(100,144,0)
(224,504,0)
(176,178,0)
(471,473,0)
(280,179,0)
(556,528,0)
(201,178,0)
(236,486,0)
(323,504,0)
(208,283,0)
(531,214,0)
(589,44,0)
(538,397,0)
(307,508,0)
(610,183,0)
(98,68,0)
(302,161,0)
(179,556,0)
(442,474,0)
(445,325,0)
(203,468,0)
(124,399,0)
(383,378,0)
(382,452,0)
(605,533,0)
(60,101,0)
(608,24,0)
(320,103,0)
(29,399,0)
(268,403,0)
(422,282,0)
(392,106,0)
(556,179,0)
(182,181,0)
(215,454,0)
(454,287,0)
(73,179,0)
(275,8,0)
(524,142,0)
(380,44,0)
(589,437,0)
(315,216,0)
(3,415,0)
(323,15,0)
(479,506,0)
(373,288,0)
(351,280,0)
(73,598,0)
(540,280,0)
(409,178,0)
(293,270,0)
(537,591,0)
(262,102,0)
(114,535,0)
(131,475,0)
(59,59,0)
(312,158,0)
(307,475,0)
(486,475,0)
(560,77,0)
(547,269,0)
(209,198,0)
(153,178,0)
(454,390,0)
(296,178,0)
(84,612,0)
(486,385,0)
(569,565,0)
(587,399,0)
(74,235,0)
(548,486,0)
(19,200,0)
(581,539,0)
(378,44,0)
(333,569,0)
(573,270,0)
(5,452,0)
(144,100,0)
(360,139,0)
(574,178,0)
(494,475,0)
(297,288,0)
(402,234,0)
(55,435,0)
(155,301,0)
(524,463,0)
(364,520,0)
(607,341,0)
(254,281,0)
(422,21,0)
(318,399,0)
(510,114,0)
(231,139,0)
(455,186,0)
(380,319,0)
(263,425,0)
(467,254,0)
(16,164,0)
(223,44,0)
(286,427,0)
(448,339,0)
(288,297,0)
(292,444,0)
(199,56,0)
(452,382,0)
(59,514,0)
(217,221,0)
(429,301,0)
(16,533,0)
(276,30,0)
(466,139,0)
(91,77,0)
(306,436,0)
(582,77,0)
(323,269,0)
(471,343,1)
(418,416,1)
(414,543,1)
(94,56,1)
(137,555,1)
(351,346,1)
(16,164,1)
(336,179,1)
(300,475,1)
(197,504,1)
(336,4,1)
(182,301,1)
(105,30,1)
(246,578,1)
(478,149,1)
(542,511,1)
(342,317,1)
(196,400,1)
(220,198,1)
(511,434,1)
(145,115,1)
(271,365,1)
(144,139,1)
(56,199,1)
(302,339,1)
(167,266,1)
(204,143,1)
(482,31,1)
(320,103,1)
(437,589,1)
(408,351,1)
(480,231,1)
(59,514,1)
(230,274,1)
(45,16,1)
(373,1,1)
(495,293,1)
(183,610,1)
(207,51,1)
(141,336,1)
(166,478,1)
(584,304,1)
(256,310,1)
(348,177,1)
(350,179,1)
(5,502,1)
(523,181,1)
(55,188,1)
(361,160,1)
(460,129,1)
(415,3,1)
(23,600,1)
(289,227,1)
(156,78,1)
(248,386,1)
(86,504,1)
(238,403,1)
(58,106,1)
(587,498,1)
(244,437,1)
(485,249,1)
(510,261,1)
(57,112,1)
(348,570,1)
(224,231,1)
(258,485,1)
(68,97,1)
(411,400,1)
(596,333,1)
(223,44,1)
(442,571,1)
(225,425,1)
(125,334,1)
(43,273,1)
(413,475,1)
(74,173,1)
(535,327,1)
(70,197,1)
(377,139,1)
(215,287,1)
(163,119,1)
(277,240,1)
(426,137,1)
(369,614,1)
(486,439,1)
(257,44,1)
(452,502,1)
(103,211,1)
(185,344,1)
(306,183,1)
(420,268,1)
(605,164,1)
(361,169,1)
(496,412,1)
(386,139,1)
(430,15,1)
(587,16,1)
(520,321,1)
(112,428,1)
(93,74,1)
(380,127,1)
(50,316,1)
(305,382,1)
(299,587,1)
(16,533,1)
(587,89,1)
(520,179,1)
(447,7,1)
(455,90,1)
(61,546,1)
(148,449,1)
(533,48,1)
(432,298,1)
(136,6,1)
(401,540,1)
(315,263,1)
(160,169,1)
(390,120,1)
(261,167,1)
(73,179,1)
(81,322,1)
(101,2,1)
(21,244,1)
(256,44,1)
(128,444,1)
(555,464,1)
(561,11,1)
(276,105,1)
(554,530,1)
(283,208,1)
(439,425,1)
(510,44,1)
(474,442,1)
(83,374,1)
(183,205,1)
(517,110,1)
(383,314,1)
(414,591,1)
(271,250,1)
(75,430,1)
(494,507,1)
(522,545,1)
(31,451,1)
(435,390,1)
(531,360,1)
(164,533,1)
(297,288,1)
(427,159,1)
(72,206,1)
(8,100,1)
(438,232,1)
(463,388,1)
(165,592,1)
(502,44,1)
(31,165,1)
(594,186,1)
(217,436,1)
(113,405,1)
(494,139,1)
(181,602,1)
(249,52,1)
(459,123,1)
(463,200,1)
(567,305,1)
(348,440,1)
(186,455,1)
(437,118,1)
(515,479,1)
(346,489,1)
(440,185,1)
(419,248,1)
(612,84,1)
(339,44,1)
(331,44,1)
(100,22,1)
(20,223,1)
(168,177,1)
(349,297,1)
(598,586,1)
(524,463,1)
(124,377,1)
(430,107,1)
(587,588,1)
(470,223,1)
(597,199,1)
(520,11,1)
(385,486,1)
(351,248,1)
(171,21,1)
(35,470,1)
(235,257,1)
(366,558,1)
(45,83,1)
(34,184,1)
(469,447,1)
(605,533,1)
(487,325,1)
(84,475,1)
(86,475,1)
(359,582,1)
(132,300,1)
(382,417,1)
(154,361,1)
(290,266,1)
(159,338,1)
(496,475,1)
(94,164,1)
(569,333,1)
(92,34,1)
(264,325,1)
(85,419,1)
(365,139,1)
(581,408,1)
(473,179,1)
(454,287,1)
(224,154,1)
(199,308,1)
(398,179,1)
(563,475,1)
(64,139,1)
(231,475,1)
(606,345,1)
(338,524,1)
(537,469,1)
(587,601,1)
(147,594,1)
(506,515,1)
(354,56,1)
(116,573,1)
(547,342,1)
(214,360,1)
(425,404,1)
(417,452,1)
(12,506,1)
(522,538,1)
(200,19,1)
(232,54,1)
(282,422,1)
(519,459,1)
(314,283,1)
(236,548,1)
(169,44,1)
(157,358,1)
(396,281,1)
(109,387,1)
(588,330,1)
(1,460,1)
(66,35,1)
(492,6,1)
(214,531,1)
(428,44,1)
(532,603,1)
(26,443,1)
(262,290,1)
(59,570,1)
(522,238,1)
(84,2,1)
(421,612,1)
(48,326,1)
(605,89,1)
(591,44,1)
(270,567,1)
(422,171,1)
(101,60,1)
(348,59,1)
(430,385,1)
(228,221,1)
(466,139,1)
(360,139,1)
(270,116,1)
(378,44,1)
(367,89,1)
(479,553,1)
(63,312,1)
(298,567,1)
(227,253,1)
(543,591,1)
(363,198,1)
(162,438,1)
(149,422,1)
(131,139,1)
(316,282,1)
(389,101,1)
(226,389,1)
(152,541,1)
(607,238,1)
(614,38,1)
(595,44,1)
(573,378,1)
(208,369,1)
(83,563,1)
(144,170,1)
(111,264,1)
(381,359,1)
(427,44,1)
(313,598,1)
(41,321,1)
(587,504,1)
(27,23,1)
(98,341,1)
(266,93,1)
(189,400,1)
(413,139,1)
(44,222,1)
(254,179,1)
(504,415,1)
(221,217,1)
(186,475,1)
(301,155,1)
(33,436,1)
(432,446,1)
(462,100,1)
(123,62,1)
(121,348,1)
(240,516,1)
(47,44,1)
(91,180,1)
(100,144,1)
(218,211,1)
(52,37,1)
(530,99,1)
(341,250,1)
(520,598,1)
(250,150,1)
(55,179,1)
(286,551,1)
(123,292,1)
(351,520,1)
(241,44,1)
(333,44,1)
(32,172,1)
(234,402,1)
(322,381,1)
(583,256,1)
(252,190,1)
(476,126,1)
(551,427,1)
(521,25,1)
(118,589,1)
(370,613,1)
(151,234,1)
(388,200,1)
(238,59,1)
(403,420,1)
(230,214,1)
(446,385,1)
(129,282,1)
(520,281,1)
(86,604,1)
(587,366,1)
(226,475,1)
(110,279,1)
(352,139,1)
(335,542,1)
(79,303,1)
(533,89,1)
(16,370,1)
(146,550,1)
(67,398,1)
(46,209,1)
(186,139,1)
(43,425,1)
(563,139,1)
(84,461,1)
(587,267,1)
(270,573,1)
(356,400,1)
(269,425,1)
(487,605,1)
(224,444,1)
(404,372,1)
(436,183,1)
(330,414,1)
(311,187,1)
(161,302,1)
(60,432,1)
(188,294,1)
(550,108,1)
(237,157,1)
(589,44,1)
(545,352,1)
(430,68,1)
(587,425,1)
(84,44,1)
(362,607,1)
(391,234,1)
(224,66,1)
(243,579,1)
(174,350,1)
(573,96,1)
(211,76,1)
(226,139,1)
(81,179,1)
(263,72,1)
(604,146,1)
(315,297,1)
(191,61,1)
(432,512,1)
(90,193,1)
(231,309,1)
(610,205,1)
(587,443,1)
(571,228,1)
(323,139,1)
(115,496,1)
(470,20,1)
(557,435,1)
(17,257,1)
(247,606,1)
(542,44,1)
(436,306,1)
(345,324,1)
(134,513,1)
(288,504,1)
(307,599,1)
(49,245,1)
(347,373,1)
(428,450,1)
(530,237,1)
(492,136,1)
(524,122,1)
(567,179,1)
(117,530,1)
(164,89,1)
(485,44,1)
(486,504,1)
(219,57,1)
(380,44,1)
(19,32,1)
(502,407,1)
(163,44,1)
(483,225,1)
(525,42,1)
(464,458,1)
(93,242,1)
(400,139,1)
(315,444,1)
(114,510,1)
(450,575,1)
(267,82,1)
(144,475,1)
(8,163,1)
(586,73,1)
(206,131,1)
(29,501,1)
(353,371,1)
(227,179,1)
(506,479,1)
(334,191,1)
(115,500,1)
(47,394,1)
(493,125,1)
(400,475,1)
(38,64,1)
(213,474,1)
(241,113,1)
(235,17,1)
(284,566,1)
(430,582,1)
(348,344,1)
(391,151,1)
(587,1,1)
(559,359,1)
(280,179,1)
(344,102,1)
(139,475,1)
(587,406,1)
(310,453,1)
(407,495,1)
(24,219,1)
(376,341,1)
(588,414,1)
(194,130,1)
(432,265,1)
(410,44,1)
(126,498,1)
(467,554,1)
(604,425,1)
(351,280,1)
(175,396,1)
(430,590,1)
(99,237,1)
(575,403,1)
(534,484,1)
(430,233,1)
(59,59,1)
(89,70,1)
(447,203,1)
(405,473,1)
(76,196,1)
(371,570,1)
(500,496,1)
(423,91,1)
(352,134,1)
(374,563,1)
(79,425,1)
(194,583,1)
(587,164,1)
(583,133,1)
(288,347,1)
(142,276,1)
(539,139,1)
(466,475,1)
(331,611,1)
(323,269,1)
(614,64,1)
(64,475,1)
(334,61,1)
(507,425,1)
(180,300,1)
(12,606,1)
(205,202,1)
(193,356,1)
(108,41,1)
(608,24,1)
(458,568,1)
(355,523,1)
(303,480,1)
(429,252,1)
(106,179,1)
(380,570,1)
(198,46,1)
(479,444,1)
(339,448,1)
(377,475,1)
(379,258,1)
(4,128,1)
(513,2,1)
(334,425,1)
(312,601,1)
(491,112,1)
(489,492,1)
(429,179,1)
(257,210,1)
(209,44,1)
(518,58,1)
(254,467,1)
(251,476,1)
(326,391,1)
(445,466,1)
(127,138,1)
(456,354,1)
(173,235,1)
(103,218,1)
(565,569,1)
(143,406,1)
(335,230,1)
(36,68,1)
(211,475,1)
(106,392,1)
(276,30,1)
(321,289,1)
(591,537,1)
(317,565,1)
(202,241,1)
(599,24,1)
(91,485,1)
(142,524,1)
(119,462,1)
(595,9,1)
(520,518,1)
(532,44,1)
(300,139,1)
(325,445,1)
(580,612,1)
(69,194,1)
(42,207,1)
(592,145,1)
(292,243,1)
(546,609,1)
(603,597,1)
(323,475,1)
(570,564,1)
(130,583,1)
(308,413,1)
(516,588,1)
(406,483,1)
(324,166,1)
(494,475,1)
(386,475,1)
(611,410,1)
(444,320,1)
(280,401,1)
(300,379,1)
(461,92,1)
(526,175,1)
(161,339,1)
(390,454,1)
(514,278,1)
(466,488,1)
(6,44,1)
(587,277,1)
(400,174,1)
(21,437,1)
(102,262,1)
(86,139,1)
(590,534,1)
(613,83,1)
(279,47,1)
(563,384,1)
(454,215,1)
(398,246,1)
(358,267,1)
(71,438,1)
(9,39,1)
(556,528,1)
(275,8,1)
(582,494,1)
(608,156,1)
(233,517,1)
(520,576,1)
(496,139,1)
(245,55,1)
(285,411,1)
(394,121,1)
(453,94,1)
(488,189,1)
(64,109,1)
(56,532,1)
(395,366,1)
(292,444,1)
(325,466,1)
(158,63,1)
(384,433,1)
(486,139,1)
(528,426,1)
(546,44,1)
(452,5,1)
(263,425,1)
(133,256,1)
(172,272,1)
(540,520,1)
(587,605,1)
(198,209,1)
(549,254,1)
(507,148,1)
(211,139,1)
(16,89,1)
(539,255,1)
(237,475,1)
(177,204,1)
(387,81,1)
(286,427,1)
(329,236,1)
(431,357,1)
(416,335,1)
(237,139,1)
(30,337,1)
(233,380,1)
(74,235,1)
(309,65,1)
(341,362,1)
(538,226,1)
(25,400,1)
(426,555,1)
(265,519,1)
(422,21,1)
(11,141,1)
(131,475,1)
(513,36,1)
(576,364,1)
(578,29,1)
(587,165,1)
(548,499,1)
(287,44,1)
(605,111,1)
(386,375,1)
(579,315,1)
(536,557,1)
(131,349,1)
(514,43,1)
(224,79,1)
(392,117,1)
(535,114,1)
(345,166,1)
(323,565,1)
(272,376,1)
(181,179,1)
(402,367,1)
(580,421,1)
(82,487,1)
(120,454,1)
(209,27,1)
(432,559,1)
(432,423,1)
(162,71,1)
(96,378,1)
(255,581,1)
(32,44,1)
(10,26,1)
(357,79,1)
(566,533,1)
(7,124,1)
(377,355,1)
(434,115,1)
(75,608,1)
(190,275,1)
(234,139,1)
(199,413,1)
(589,13,1)
(364,346,1)
(328,271,1)
(600,304,1)
(380,59,1)
(51,158,1)
(433,400,1)
(517,279,1)
(222,140,1)
(155,429,1)
(484,147,1)
(520,207,1)
(333,526,1)
(107,224,1)
(601,521,1)
(280,283,1)
(412,313,1)
(477,470,1)
(579,457,1)
(158,179,1)
(304,331,1)
(512,457,1)
(432,135,1)
(600,584,1)
(555,458,1)
(0,299,1)
(539,475,1)
(348,504,1)
(293,270,1)
(439,329,1)
(346,492,1)
(203,213,1)
(448,525,1)
(66,368,1)
(403,250,1)
(327,114,1)
(458,44,1)
(138,535,1)
(223,431,1)
(587,451,1)
(527,595,1)
(541,542,1)
(259,179,1)
(572,311,1)
(315,131,1)
(30,286,1)
(486,499,1)
(587,533,1)
(253,395,1)
(382,452,1)
(22,144,1)
(307,475,1)
(274,214,1)
(396,518,1)
(378,383,1)
(287,49,1)
(224,504,1)
(150,527,1)
(278,43,1)
(217,33,1)
(360,152,1)
(432,590,1)
(180,132,1)
(184,162,1)
(343,7,1)
(352,475,1)
(486,475,1)
(294,432,1)
(97,497,1)
(474,179,1)
(528,194,1)
(494,504,1)
(451,418,1)
(164,456,1)
(368,35,1)
(62,292,1)
(232,44,1)
(360,475,1)
(135,15,1)
(205,241,1)
(37,86,1)
(499,161,1)
(553,247,1)
(415,142,1)
(337,286,1)
(281,549,1)
(248,340,1)
(268,250,1)
(473,471,1)
(375,0,1)
(273,493,1)
(75,580,1)
(234,475,1)
(372,572,1)
(564,168,1)
(231,139,1)
(65,154,1)
(323,504,1)
(170,67,1)
(78,307,1)
(443,285,1)
(35,477,1)
(609,328,1)
(15,323,1)
(269,547,1)
(345,519,1)
(413,284,1)
(6,85,1)
(102,44,1)
(139,539,1)
(73,10,1)
(39,220,1)
(210,522,1)
(259,536,1)
(54,363,1)
(430,37,1)
(169,251,1)
(13,561,1)
(498,50,1)
(282,12,1)
(430,572,1)
(449,482,1)
(166,444,1)
(298,293,1)
(179,556,1)
(24,2,1)
(501,259,1)
(57,491,1)
(200,32,1)
(457,107,1)
(602,182,1)
(497,98,1)
(242,74,1)
(568,69,1)
(566,391,1)
(222,353,1)
(558,45,1)
(208,614,1)
(569,596,1)
(501,432,2)
(219,403,2)
(179,341,2)
(164,89,2)
(285,400,2)
(594,400,2)
(93,403,2)
(68,341,2)
(613,83,2)
(587,1,2)
(391,341,2)
(132,400,2)
(379,400,2)
(32,341,2)
(24,403,2)
(414,432,2)
(476,282,2)
(167,266,2)
(241,44,2)
(235,403,2)
(139,475,2)
(459,282,2)
(13,400,2)
(520,321,2)
(37,86,2)
(186,475,2)
(251,282,2)
(280,432,2)
(358,400,2)
(519,282,2)
(464,341,2)
(528,341,2)
(351,346,2)
(520,179,2)
(408,432,2)
(430,590,2)
(504,341,2)
(200,32,2)
(144,139,2)
(115,400,2)
(34,198,2)
(384,400,2)
(604,425,2)
(540,432,2)
(19,341,2)
(166,422,2)
(486,439,2)
(327,266,2)
(605,89,2)
(435,390,2)
(377,475,2)
(342,400,2)
(323,269,2)
(98,341,2)
(474,7,2)
(238,432,2)
(543,432,2)
(283,208,2)
(69,341,2)
(587,601,2)
(265,457,2)
(248,386,2)
(392,530,2)
(437,589,2)
(362,238,2)
(237,139,2)
(182,432,2)
(73,179,2)
(249,400,2)
(614,359,2)
(256,341,2)
(228,221,2)
(338,341,2)
(47,44,2)
(232,198,2)
(30,341,2)
(446,400,2)
(400,139,2)
(155,432,2)
(152,115,2)
(265,282,2)
(450,403,2)
(548,400,2)
(16,83,2)
(276,30,2)
(10,400,2)
(590,400,2)
(282,422,2)
(240,432,2)
(73,400,2)
(460,282,2)
(144,475,2)
(363,198,2)
(309,282,2)
(224,444,2)
(211,139,2)
(470,223,2)
(67,432,2)
(145,115,2)
(286,427,2)
(180,300,2)
(32,44,2)
(549,530,2)
(270,573,2)
(131,475,2)
(26,400,2)
(114,510,2)
(360,115,2)
(172,341,2)
(275,8,2)
(237,400,2)
(583,341,2)
(110,266,2)
(86,400,2)
(74,403,2)
(12,606,2)
(524,122,2)
(221,217,2)
(604,400,2)
(398,179,2)
(430,68,2)
(6,44,2)
(269,425,2)
(315,297,2)
(466,400,2)
(308,341,2)
(270,359,2)
(415,3,2)
(335,542,2)
(532,44,2)
(587,165,2)
(403,198,2)
(345,519,2)
(243,457,2)
(224,231,2)
(124,377,2)
(591,432,2)
(96,359,2)
(345,422,2)
(428,44,2)
(81,179,2)
(430,582,2)
(83,400,2)
(154,282,2)
(61,432,2)
(59,514,2)
(434,115,2)
(48,391,2)
(84,475,2)
(116,359,2)
(565,569,2)
(231,139,2)
(42,400,2)
(57,112,2)
(473,179,2)
(315,263,2)
(563,139,2)
(259,179,2)
(82,400,2)
(359,400,2)
(516,432,2)
(199,413,2)
(257,403,2)
(573,378,2)
(566,341,2)
(266,403,2)
(12,422,2)
(477,282,2)
(605,325,2)
(107,282,2)
(348,344,2)
(588,414,2)
(115,496,2)
(5,293,2)
(437,400,2)
(612,198,2)
(64,475,2)
(402,341,2)
(440,266,2)
(553,606,2)
(47,266,2)
(610,7,2)
(430,107,2)
(131,282,2)
(100,432,2)
(123,292,2)
(123,457,2)
(191,432,2)
(458,341,2)
(583,256,2)
(333,44,2)
(492,6,2)
(233,403,2)
(86,604,2)
(117,530,2)
(289,400,2)
(224,154,2)
(175,400,2)
(606,345,2)
(89,341,2)
(356,400,2)
(271,250,2)
(507,400,2)
(365,432,2)
(86,139,2)
(349,282,2)
(556,528,2)
(513,2,2)
(21,437,2)
(101,432,2)
(430,37,2)
(502,44,2)
(76,400,2)
(539,432,2)
(587,498,2)
(171,400,2)
(432,341,2)
(563,475,2)
(462,100,2)
(527,595,2)
(86,475,2)
(467,530,2)
(528,426,2)
(59,59,2)
(297,282,2)
(70,341,2)
(559,359,2)
(334,61,2)
(433,400,2)
(333,400,2)
(281,530,2)
(91,485,2)
(236,400,2)
(186,400,2)
(111,325,2)
(22,432,2)
(600,304,2)
(107,224,2)
(323,565,2)
(307,403,2)
(294,432,2)
(489,432,2)
(224,504,2)
(56,341,2)
(383,359,2)
(390,432,2)
(542,44,2)
(418,115,2)
(390,454,2)
(213,474,2)
(250,150,2)
(106,530,2)
(520,207,2)
(561,400,2)
(270,567,2)
(588,432,2)
(354,56,2)
(109,359,2)
(8,100,2)
(587,533,2)
(12,506,2)
(267,400,2)
(398,432,2)
(79,425,2)
(52,400,2)
(230,214,2)
(480,282,2)
(521,400,2)
(38,359,2)
(313,400,2)
(74,235,2)
(587,588,2)
(419,432,2)
(224,282,2)
(546,44,2)
(586,400,2)
(563,400,2)
(341,250,2)
(331,44,2)
(520,281,2)
(339,400,2)
(114,266,2)
(605,164,2)
(226,475,2)
(449,400,2)
(364,432,2)
(579,457,2)
(203,7,2)
(130,341,2)
(156,403,2)
(158,179,2)
(513,341,2)
(595,44,2)
(554,530,2)
(198,209,2)
(422,21,2)
(415,142,2)
(55,179,2)
(66,282,2)
(244,400,2)
(378,359,2)
(527,198,2)
(556,341,2)
(86,504,2)
(463,341,2)
(241,7,2)
(506,606,2)
(245,432,2)
(428,403,2)
(405,7,2)
(343,7,2)
(263,425,2)
(494,504,2)
(124,432,2)
(580,198,2)
(599,403,2)
(234,341,2)
(154,361,2)
(519,457,2)
(367,341,2)
(39,198,2)
(387,359,2)
(551,341,2)
(68,97,2)
(457,282,2)
(400,475,2)
(439,425,2)
(430,385,2)
(162,438,2)
(205,241,2)
(71,198,2)
(91,400,2)
(469,432,2)
(412,400,2)
(174,341,2)
(470,282,2)
(119,100,2)
(523,432,2)
(272,341,2)
(304,331,2)
(103,211,2)
(150,527,2)
(199,341,2)
(569,333,2)
(108,400,2)
(445,400,2)
(83,563,2)
(146,400,2)
(9,198,2)
(323,475,2)
(380,266,2)
(121,266,2)
(222,140,2)
(169,282,2)
(366,400,2)
(102,44,2)
(496,139,2)
(377,139,2)
(243,282,2)
(44,222,2)
(60,432,2)
(587,443,2)
(454,287,2)
(179,556,2)
(315,444,2)
(148,400,2)
(235,257,2)
(135,400,2)
(16,533,2)
(131,139,2)
(601,400,2)
(607,238,2)
(166,444,2)
(84,44,2)
(303,282,2)
(550,400,2)
(287,44,2)
(139,432,2)
(341,238,2)
(300,139,2)
(45,400,2)
(185,266,2)
(473,7,2)
(348,504,2)
(323,400,2)
(478,422,2)
(369,359,2)
(190,432,2)
(228,7,2)
(479,606,2)
(587,267,2)
(36,341,2)
(4,400,2)
(37,400,2)
(247,606,2)
(283,359,2)
(587,16,2)
(7,432,2)
(102,266,2)
(310,341,2)
(547,400,2)
(530,400,2)
(386,475,2)
(161,339,2)
(587,451,2)
(575,403,2)
(417,293,2)
(163,100,2)
(453,341,2)
(288,504,2)
(136,432,2)
(314,359,2)
(279,266,2)
(360,475,2)
(64,359,2)
(147,400,2)
(539,475,2)
(435,432,2)
(300,475,2)
(463,200,2)
(380,44,2)
(576,432,2)
(451,115,2)
(101,2,2)
(203,213,2)
(352,341,2)
(301,432,2)
(91,180,2)
(347,282,2)
(361,169,2)
(231,282,2)
(62,282,2)
(24,2,2)
(515,606,2)
(498,282,2)
(223,44,2)
(429,179,2)
(292,444,2)
(335,115,2)
(197,341,2)
(223,282,2)
(210,403,2)
(537,432,2)
(587,425,2)
(400,341,2)
(590,534,2)
(35,282,2)
(16,89,2)
(415,341,2)
(536,432,2)
(259,432,2)
(334,425,2)
(524,341,2)
(8,432,2)
(466,475,2)
(351,432,2)
(486,400,2)
(293,270,2)
(250,198,2)
(325,400,2)
(160,282,2)
(237,475,2)
(227,179,2)
(307,475,2)
(587,504,2)
(106,179,2)
(126,282,2)
(389,432,2)
(471,7,2)
(326,391,2)
(286,341,2)
(274,115,2)
(430,15,2)
(315,282,2)
(258,400,2)
(488,400,2)
(351,520,2)
(485,44,2)
(29,432,2)
(169,44,2)
(456,56,2)
(430,403,2)
(282,400,2)
(256,44,2)
(592,115,2)
(526,400,2)
(162,198,2)
(322,359,2)
(276,341,2)
(426,341,2)
(608,403,2)
(248,432,2)
(112,428,2)
(444,320,2)
(431,282,2)
(224,79,2)
(411,400,2)
(414,591,2)
(538,432,2)
(317,400,2)
(334,432,2)
(494,507,2)
(520,518,2)
(533,89,2)
(558,400,2)
(211,400,2)
(351,280,2)
(278,432,2)
(510,266,2)
(443,400,2)
(58,530,2)
(510,44,2)
(183,205,2)
(56,532,2)
(535,266,2)
(520,11,2)
(325,466,2)
(511,115,2)
(288,282,2)
(63,400,2)
(6,432,2)
(542,115,2)
(180,400,2)
(51,400,2)
(189,400,2)
(436,7,2)
(31,400,2)
(92,198,2)
(494,139,2)
(183,7,2)
(597,199,2)
(321,400,2)
(57,403,2)
(214,360,2)
(479,444,2)
(569,400,2)
(413,341,2)
(493,432,2)
(11,400,2)
(41,400,2)
(230,115,2)
(520,432,2)
(211,475,2)
(75,580,2)
(97,341,2)
(413,475,2)
(336,400,2)
(518,530,2)
(423,400,2)
(79,282,2)
(459,457,2)
(142,524,2)
(54,198,2)
(448,400,2)
(514,43,2)
(139,539,2)
(324,422,2)
(368,282,2)
(248,340,2)
(165,115,2)
(262,266,2)
(99,400,2)
(567,179,2)
(578,432,2)
(269,400,2)
(587,366,2)
(496,400,2)
(253,400,2)
(194,341,2)
(525,400,2)
(221,7,2)
(277,432,2)
(336,179,2)
(614,64,2)
(530,237,2)
(571,7,2)
(280,179,2)
(329,400,2)
(200,341,2)
(381,359,2)
(429,432,2)
(377,432,2)
(292,457,2)
(507,425,2)
(497,341,2)
(382,293,2)
(84,198,2)
(320,103,2)
(522,403,2)
(602,432,2)
(232,44,2)
(254,530,2)
(568,341,2)
(385,400,2)
(385,486,2)
(380,59,2)
(605,533,2)
(72,282,2)
(193,400,2)
(90,400,2)
(486,504,2)
(496,475,2)
(255,432,2)
(442,7,2)
(125,432,2)
(181,179,2)
(361,282,2)
(391,234,2)
(0,432,2)
(555,341,2)
(545,341,2)
(401,432,2)
(284,341,2)
(422,400,2)
(531,115,2)
(438,232,2)
(512,457,2)
(15,323,2)
(220,198,2)
(430,572,2)
(297,288,2)
(21,400,2)
(100,144,2)
(55,432,2)
(246,432,2)
(546,432,2)
(520,598,2)
(316,282,2)
(487,400,2)
(213,7,2)
(93,74,2)
(587,89,2)
(348,570,2)
(141,400,2)
(273,432,2)
(312,400,2)
(150,198,2)
(59,570,2)
(163,44,2)
(407,293,2)
(62,457,2)
(502,293,2)
(351,248,2)
(224,66,2)
(25,400,2)
(64,139,2)
(184,198,2)
(499,161,2)
(17,403,2)
(596,400,2)
(188,432,2)
(15,400,2)
(133,341,2)
(261,266,2)
(533,391,2)
(403,250,2)
(8,163,2)
(158,400,2)
(127,266,2)
(504,415,2)
(105,341,2)
(535,114,2)
(539,139,2)
(378,44,2)
(129,282,2)
(231,475,2)
(517,266,2)
(275,432,2)
(421,198,2)
(234,475,2)
(323,504,2)
(137,341,2)
(252,432,2)
(386,139,2)
(196,400,2)
(103,400,2)
(227,400,2)
(305,293,2)
(439,400,2)
(345,166,2)
(280,283,2)
(279,47,2)
(214,115,2)
(587,406,2)
(328,432,2)
(157,400,2)
(330,432,2)
(118,400,2)
(373,282,2)
(582,494,2)
(591,44,2)
(207,400,2)
(346,432,2)
(128,400,2)
(254,179,2)
(238,403,2)
(394,266,2)
(438,198,2)
(264,325,2)
(292,282,2)
(65,282,2)
(208,614,2)
(113,7,2)
(534,400,2)
(360,139,2)
(215,432,2)
(348,177,2)
(142,276,2)
(426,555,2)
(455,400,2)
(218,400,2)
(598,400,2)
(541,115,2)
(603,199,2)
(16,164,2)
(375,432,2)
(357,282,2)
(555,458,2)
(524,463,2)
(151,341,2)
(491,403,2)
(134,341,2)
(506,479,2)
(587,164,2)
(396,400,2)
(485,400,2)
(427,44,2)
(452,502,2)
(352,139,2)
(532,199,2)
(84,2,2)
(413,139,2)
(293,359,2)
(20,282,2)
(170,432,2)
(209,44,2)
(427,341,2)
(30,286,2)
(112,403,2)
(94,341,2)
(388,341,2)
(149,422,2)
(416,115,2)
(217,436,2)
(234,139,2)
(142,341,2)
(123,282,2)
(302,400,2)
(226,432,2)
(268,198,2)
(194,583,2)
(382,452,2)
(484,400,2)
(205,7,2)
(173,403,2)
(386,432,2)
(444,400,2)
(492,432,2)
(164,533,2)
(287,432,2)
(266,93,2)
(565,400,2)
(144,432,2)
(608,24,2)
(164,56,2)
(595,198,2)
(299,432,2)
(346,492,2)
(474,179,2)
(344,266,2)
(380,570,2)
(75,608,2)
(120,432,2)
(242,403,2)
(587,605,2)
(589,400,2)
(81,359,2)
(557,432,2)
(395,400,2)
(75,430,2)
(458,44,2)
(348,59,2)
(582,400,2)
(263,282,2)
(436,183,2)
(49,432,2)
(482,400,2)
(257,44,2)
(514,432,2)
(159,341,2)
(486,475,2)
(50,282,2)
(495,293,2)
(271,432,2)
(573,359,2)
(355,432,2)
(420,198,2)
(1,282,2)
(589,44,2)
(323,139,2)
(454,432,2)
(300,400,2)
(352,475,2)
(609,432,2)
(33,7,2)
(567,293,2)
(370,83,2)
(66,35,2)
(350,341,2)
(461,198,2)
(517,279,2)
(447,432,2)
(306,7,2)
(56,199,2)
(579,282,2)
(315,131,2)
(466,139,2)
(217,7,2)
(298,359,2)
(580,612,2)
(587,432,2)
(581,432,2)
(181,432,2)
(348,266,2)
(500,400,2)
(78,403,2)
(344,102,2)
(320,400,2)
(61,546,2)
(606,422,2)
(208,359,2)
(337,341,2)
(528,194,2)
(374,400,2)
(138,266,2)
(202,7,2)
(290,266,2)
(186,139,2)
(59,432,2)
(486,139,2)
(594,186,2)
(161,400,2)
(494,475,2)
(226,139,2)
(499,400,2)
(612,84,2)
(206,282,2)
(486,499,2)
(335,230,2)
(43,425,2)
(339,44,2)
(43,432,2)
(35,470,2)
(282,12,2)
(85,432,2)
(376,341,2)
(494,400,2)
(452,293,2)
-----------------------------------
(0,wr)
(1,fw_opcode = FW_RI_FR_NSMR_TPTE_WR)
(2,struct ib_send_wr **bad_wr)
(3,union t4_wr *)
(4,opcode)
(5,sq)
(6,qhp->wq)
(7,c4iw_wr_log)
(8,(wr->send_flags & IB_SEND_SIGNALED)
(9,wq)
(10,opcode)
(11,swsqe->opcode = FW_RI_FAST_REGISTER)
(12,!mhp->attr.state && mhp->mpl_len <= 2)
(13,rhp)
(14,)
(15,err = build_rdma_send(&qhp->wq.sq, wqe, wr, &len16)
(16,fw_flags |= FW_RI_LOCAL_FENCE_FLAG)
(17,rdev)
(18,if (c4iw_wr_log)
(19,sq)
(20,rdev)
(21,qhp->rhp->rdev.lldi)
(22,IB_SEND_SIGNALED)
(23,qhp)
(24,*bad_wr)
(25,fw_opcode)
(26,swsqe)
(27,wq)
(28,if (wr->send_flags & IB_SEND_FENCE)
(29,swsqe->complete = 0)
(30,qhp->wq.sq.wq_pidx)
(31,err)
(32,qhp->wq)
(33,0)
(34,qhp)
(35,qhp->rhp->rdev.lldi)
(36,bad_wr)
(37,err = build_inv_stag(wqe, wr, &len16)
(38,0)
(39,qhp)
(40,if (qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&\n\\n\\t\\t\\t    !mhp->attr.state && mhp->mpl_len <= 2)
(41,err)
(42,err)
(43,len16*16)
(44,qhp = to_c4iw_qp(ibqp)
(45,fw_opcode)
(46,flushed)
(47,qhp->lock)
(48,FW_RI_SOLICITED_EVENT_FLAG)
(49,wq)
(50,FW_RI_FR_NSMR_WR)
(51,FW_RI_RDMA_WRITE)
(52,qhp)
(53,if (!qhp->rhp->rdev.status_page->db_off)
(54,lock)
(55,swsqe->idx)
(56,wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)
(57,spin_unlock_irqrestore(&qhp->lock, flag)
(58,FW_RI_SEND_WITH_INV)
(59,idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
(60,bad_wr)
(61,&qhp->wq)
(62,state)
(63,opcode)
(64,wr->sg_list)
(65,wqe)
(66,qhp->rhp->rdev.lldi.ulptx_memwrite_dsgl)
(67,wr)
(68,err = -ENOMEM)
(69,qhp)
(70,0)
(71,flag)
(72,len16)
(73,swsqe->opcode)
(74,qhp->rhp->rdev.status_page)
(75,RET)
(76,wr)
(77,)
(78,ENOMEM)
(79,&len16)
(80,if (err)
(81,swsqe->read_len)
(82,FW_RI_SEND_WR)
(83,wr->send_flags & IB_SEND_FENCE)
(84,complete_sq_drain_wrs(qhp, wr, bad_wr)
(85,wq)
(86,build_inv_stag(wqe, wr, &len16)
(87,qhp)
(88,flag)
(89,fw_flags = 0)
(90,wr)
(91,c4iw_invalidate_mr(qhp->rhp, wr->ex.invalidate_rkey)
(92,wr)
(93,qhp->rhp->rdev.status_page->db_off)
(94,swsqe)
(95,case IB_WR_RDMA_READ_WITH_INV:)
(96,sq)
(97,-ENOMEM)
(98,err)
(99,IB_WR_SEND)
(100,wr->send_flags & IB_SEND_SIGNALED)
(101,*bad_wr)
(102,qhp->wq)
(103,reg_wr(wr)
(104,switch (wr->opcode)
(105,T4_EQ_ENTRY_SIZE)
(106,swsqe->opcode)
(107,err = build_memreg(&qhp->wq.sq, wqe, reg_wr(wr)
(108,wqe)
(109,sg_list)
(110,flag)
(111,FW_RI_READ_FENCE_FLAG)
(112,&qhp->lock)
(113,rhp)
(114,&qhp->lock)
(115,wr->opcode == IB_WR_RDMA_READ_WITH_INV)
(116,oldest_read)
(117,swsqe)
(118,rdev)
(119,sq_sig_all)
(120,pidx)
(121,qhp)
(122,u8 *)
(123,mhp->attr.state)
(124,swsqe->wr_id = wr->wr_id)
(125,idx)
(126,err)
(127,idx)
(128,swsqe)
(129,fw_opcode)
(130,sw_sq)
(131,reg_wr(wr)
(132,invalidate_rkey)
(133,sq)
(134,wr)
(135,break;)
(136,sq)
(137,pidx)
(138,qhp)
(139,wr = wr->next)
(140,struct ib_qp *ibqp)
(141,FW_RI_FAST_REGISTER)
(142,(u8 *)
(143,wqe)
(144,wr->send_flags)
(145,fw_flags)
(146,len16)
(147,err)
(148,len16)
(149,mhp)
(150,t4_sq_avail(&qhp->wq)
(151,IB_SEND_SOLICITED)
(152,sg_list)
(153,len16)
(154,&qhp->wq.sq)
(155,0)
(156,-ENOMEM)
(157,opcode)
(158,swsqe->opcode)
(159,wq)
(160,sq)
(161,qhp->wq.sq)
(162,spin_unlock_irqrestore(&qhp->lock, flag)
(163,qhp->sq_sig_all)
(164,fw_flags |= FW_RI_COMPLETION_FLAG)
(165,fw_flags = 0)
(166,mhp->attr)
(167,qhp)
(168,idx)
(169,qhp->wq)
(170,send_flags)
(171,fr_nsmr_tpte_wr_support)
(172,wq)
(173,status_page)
(174,opcode)
(175,qhp)
(176,idx)
(177,*wqe = NULL)
(178,)
(179,swsqe = &qhp->wq.sq.sw_sq[qhp->wq.sq.pidx])
(180,wr->ex.invalidate_rkey)
(181,swsqe->wr_id)
(182,swsqe)
(183,qhp->rhp->rdev.lldi)
(184,err)
(185,idx)
(186,wr->opcode)
(187,err)
(188,idx)
(189,wr)
(190,swsqe)
(191,len16)
(192,)
(193,__func__)
(194,qhp->wq.sq.sw_sq)
(195,case IB_WR_LOCAL_INV:)
(196,mhp)
(197,fw_flags)
(198,qhp->wq.flushed)
(199,wr->send_flags & IB_SEND_SIGNALED)
(200,qhp->wq.sq)
(201,wqe)
(202,rdev)
(203,getnstimeofday(&swsqe->host_ts)
(204,NULL)
(205,qhp->rhp->rdev)
(206,mhp)
(207,swsqe->opcode = FW_RI_RDMA_WRITE)
(208,wr->sg_list[0].length)
(209,qhp->wq)
(210,rhp)
(211,reg_wr(wr)
(212,)
(213,&swsqe->host_ts)
(214,wr->sg_list[0])
(215,sq)
(216,)
(217,qhp->rhp->rdev.lldi.ports[0])
(218,mr)
(219,bad_wr)
(220,num_wrs)
(221,cxgb4_read_sge_timestamp(\n\\n\\t\\t\\t\\t\\tqhp->rhp->rdev.lldi.ports[0])
(222,to_c4iw_qp(ibqp)
(223,qhp->rhp)
(224,build_memreg(&qhp->wq.sq, wqe, reg_wr(wr)
(225,fw_opcode)
(226,*bad_wr = wr)
(227,swsqe->opcode)
(228,swsqe->sge_ts = cxgb4_read_sge_timestamp(\n\\n\\t\\t\\t\\t\\tqhp->rhp->rdev.lldi.ports[0])
(229,if (!qhp->wq.sq.oldest_read)
(230,wr->sg_list[0].lkey)
(231,reg_wr(wr)
(232,qhp->lock)
(233,err)
(234,wr->send_flags)
(235,qhp->rhp->rdev)
(236,wr)
(237,wr->opcode)
(238,wr)
(239,mhp)
(240,fw_flags)
(241,qhp->rhp)
(242,db_off)
(243,attr)
(244,lldi)
(245,qhp)
(246,signaled)
(247,mhp)
(248,(unsigned long long)
(249,rhp)
(250,num_wrs = t4_sq_avail(&qhp->wq)
(251,wq)
(252,flushed)
(253,opcode)
(254,swsqe->opcode)
(255,next)
(256,qhp->wq)
(257,qhp->rhp)
(258,wr)
(259,swsqe->complete)
(260,if (wr->opcode == IB_WR_RDMA_READ_WITH_INV)
(261,lock)
(262,wq)
(263,&len16)
(264,fw_flags)
(265,break;)
(266,!qhp->rhp->rdev.status_page->db_off)
(267,fw_opcode = FW_RI_SEND_WR)
(268,num_wrs)
(269,&len16)
(270,qhp->wq.sq.oldest_read)
(271,num_wrs--)
(272,qhp)
(273,16)
(274,lkey)
(275,swsqe->signaled = (wr->send_flags & IB_SEND_SIGNALED)
(276,qhp->wq.sq.wq_pidx * T4_EQ_ENTRY_SIZE)
(277,len16)
(278,T4_EQ_ENTRY_SIZE)
(279,&qhp->lock)
(280,swsqe->read_len)
(281,swsqe->opcode = FW_RI_SEND)
(282,qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support &&\n\\n\\t\\t\\t    !mhp->attr.state && mhp->mpl_len <= 2)
(283,swsqe->read_len = wr->sg_list[0].length)
(284,send_flags)
(285,FW_RI_RDMA_READ_WR)
(286,qhp->wq.sq)
(287,qhp->wq)
(288,wqe->fr_tpte)
(289,FW_RI_LOCAL_INV)
(290,qhp)
(291,if (wr->send_flags & IB_SEND_FENCE)
(292,mhp->attr)
(293,!qhp->wq.sq.oldest_read)
(294,swsqe)
(295,)
(296,swsqe)
(297,&wqe->fr_tpte)
(298,break;)
(299,"cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\\n")
(300,wr->ex)
(301,swsqe->flushed = 0)
(302,sq)
(303,len16)
(304,&qhp->lock)
(305,swsqe)
(306,ports)
(307,*bad_wr = wr)
(308,IB_SEND_SIGNALED)
(309,wr)
(310,wq)
(311,0)
(312,swsqe)
(313,wr)
(314,qhp)
(315,build_tpte_memreg(&wqe->fr_tpte, reg_wr(wr)
(316,fw_opcode)
(317,wqe)
(318,if (wr->send_flags & IB_SEND_SIGNALED || qhp->sq_sig_all)
(319,)
(320,to_c4iw_mr(reg_wr(wr)
(321,swsqe->opcode = FW_RI_LOCAL_INV)
(322,read_len)
(323,build_rdma_send(&qhp->wq.sq, wqe, wr, &len16)
(324,state)
(325,wr->send_flags & IB_SEND_FENCE)
(326,fw_flags)
(327,flag)
(328,qhp)
(329,len16)
(330,pidx)
(331,qhp->lock)
(332,case IB_WR_SEND_WITH_INV:)
(333,qhp->wq)
(334,t4_sq_produce(&qhp->wq, len16)
(335,c4iw_invalidate_mr(qhp->rhp,\n\\n\\t\\t\\t\\t\\t\\t   wr->sg_list[0].lkey)
(336,swsqe->opcode)
(337,wq_pidx)
(338,qhp)
(339,qhp->wq)
(340,unsigned long long)
(341,num_wrs == 0)
(342,wr)
(343,swsqe)
(344,&qhp->wq)
(345,mhp->attr.state)
(346,qhp->wq.sq.pidx)
(347,fr_tpte)
(348,t4_ring_sq_db(&qhp->wq, idx, wqe)
(349,wr)
(350,wr)
(351,pr_debug("cookie 0x%llx pidx 0x%x opcode 0x%x read_len %u\\n",\n\\n\\t\\t\\t (unsigned long long)
(352,*bad_wr = wr)
(353,ibqp)
(354,fw_flags)
(355,wr_id)
(356,"%s post of type=%d TBD!\\n")
(357,qhp)
(358,wr)
(359,err)
(360,wr->sg_list)
(361,qhp->wq.sq)
(362,0)
(363,qhp)
(364,swsqe)
(365,num_wrs)
(366,fw_opcode = FW_RI_INV_LSTAG_WR)
(367,wr)
(368,ulptx_memwrite_dsgl)
(369,length)
(370,FW_RI_LOCAL_FENCE_FLAG)
(371,qhp)
(372,len16)
(373,wqe)
(374,IB_SEND_FENCE)
(375,wr_id)
(376,wqe)
(377,wr->wr_id)
(378,qhp->wq)
(379,ex)
(380,ring_kernel_sq_db(qhp, idx)
(381,swsqe)
(382,qhp->wq.sq.oldest_read)
(383,wq)
(384,send_flags)
(385,err = build_rdma_write(&qhp->wq.sq, wqe, wr, &len16)
(386,wr->wr_id)
(387,wr)
(388,queue)
(389,wr)
(390,qhp->wq.sq.pidx)
(391,wr->send_flags & IB_SEND_SOLICITED)
(392,opcode)
(393,fw_opcode)
(394,lock)
(395,swsqe)
(396,err)
(397,)
(398,swsqe->signaled)
(399,)
(400,wr->opcode)
(401,read_len)
(402,send_flags)
(403,num_wrs == 0)
(404,0)
(405,qhp)
(406,fw_opcode = 0)
(407,wq)
(408,wr)
(409,if (qhp->wq.flushed)
(410,qhp)
(411,fw_opcode)
(412,opcode)
(413,wr->send_flags)
(414,qhp->wq.sq)
(415,(union t4_wr *)
(416,fw_flags)
(417,oldest_read)
(418,FW_RI_RDMA_READ_INVALIDATE)
(419,qhp)
(420,0)
(421,err)
(422,qhp->rhp->rdev.lldi.fr_nsmr_tpte_wr_support)
(423,break;)
(424,if (err)
(425,len16 = 0)
(426,qhp->wq.sq.pidx)
(427,qhp->wq)
(428,qhp->lock)
(429,swsqe->flushed)
(430,return err;)
(431,rhp)
(432,err)
(433,wr)
(434,qhp)
(435,swsqe->idx = qhp->wq.sq.pidx)
(436,qhp->rhp->rdev.lldi.ports)
(437,qhp->rhp->rdev)
(438,&qhp->lock)
(439,&len16)
(440,wqe)
(441,case IB_WR_RDMA_READ:)
(442,host_ts)
(443,fw_opcode = FW_RI_RDMA_READ_WR)
(444,*mhp = to_c4iw_mr(reg_wr(wr)
(445,IB_SEND_FENCE)
(446,break;)
(447,wqe)
(448,wq)
(449,wr)
(450,lock)
(451,fw_flags = FW_RI_RDMA_READ_INVALIDATE)
(452,qhp->wq.sq)
(453,qhp)
(454,qhp->wq.sq)
(455,opcode)
(456,FW_RI_COMPLETION_FLAG)
(457,err)
(458,qhp->wq)
(459,1)
(460,FW_RI_FR_NSMR_TPTE_WR)
(461,bad_wr)
(462,qhp)
(463,qhp->wq.sq.queue)
(464,sq)
(465,default:)
(466,wr->send_flags)
(467,opcode)
(468,)
(469,qhp)
(470,qhp->rhp->rdev)
(471,sge_ts)
(472,)
(473,swsqe->sge_ts)
(474,swsqe->host_ts)
(475,struct ib_send_wr *wr)
(476,qhp)
(477,lldi)
(478,attr)
(479,mhp->mpl_len)
(480,mhp)
(481,if (err)
(482,wqe)
(483,0)
(484,EINVAL)
(485,qhp->rhp)
(486,build_rdma_write(&qhp->wq.sq, wqe, wr, &len16)
(487,fw_opcode)
(488,send_flags)
(489,pidx)
(490,)
(491,flag)
(492,qhp->wq.sq)
(493,len16)
(494,build_rdma_read(wqe, wr, &len16)
(495,qhp)
(496,wr->opcode)
(497,ENOMEM)
(498,fw_opcode = FW_RI_FR_NSMR_WR)
(499,&qhp->wq.sq)
(500,IB_WR_RDMA_READ_WITH_INV)
(501,0)
(502,qhp->wq)
(503,num_wrs)
(504,wqe = (union t4_wr *)
(505,if (num_wrs == 0)
(506,mhp->mpl_len <= 2)
(507,&len16)
(508,)
(509,)
(510,qhp->lock)
(511,rhp)
(512,break;)
(513,*bad_wr)
(514,DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
(515,2)
(516,fw_opcode)
(517,spin_unlock_irqrestore(&qhp->lock, flag)
(518,swsqe->opcode = FW_RI_SEND_WITH_INV)
(519,mhp->attr.state = 1)
(520,swsqe->opcode)
(521,FW_RI_RDMA_WRITE_WR)
(522,qhp)
(523,wr)
(524,(u8 *)
(525,qhp)
(526,wq)
(527,&qhp->wq)
(528,qhp->wq.sq.sw_sq[qhp->wq.sq.pidx])
(529,case IB_WR_REG_MR:)
(530,wr->opcode == IB_WR_SEND)
(531,0)
(532,qhp->sq_sig_all)
(533,fw_flags |= FW_RI_SOLICITED_EVENT_FLAG)
(534,-EINVAL)
(535,spin_unlock_irqrestore(&qhp->lock, flag)
(536,complete)
(537,wq)
(538,break;)
(539,wr->next)
(540,swsqe)
(541,wr)
(542,qhp->rhp)
(543,sq)
(544,while (wr)
(545,break;)
(546,qhp->wq)
(547,len16)
(548,wqe)
(549,FW_RI_SEND)
(550,wr)
(551,sq)
(552,fw_flags)
(553,mpl_len)
(554,swsqe)
(555,qhp->wq.sq)
(556,&qhp->wq.sq.sw_sq[qhp->wq.sq.pidx])
(557,swsqe)
(558,FW_RI_INV_LSTAG_WR)
(559,break;)
(560,case IB_WR_RDMA_WRITE:)
(561,qhp)
(562,if (wr->opcode == IB_WR_SEND)
(563,wr->send_flags)
(564,0)
(565,&qhp->wq.sq)
(566,wr)
(567,qhp->wq.sq.oldest_read = swsqe)
(568,wq)
(569,qhp->wq.sq)
(570,idx = 0)
(571,swsqe)
(572,err = 0)
(573,qhp->wq.sq)
(574,err)
(575,qhp)
(576,opcode)
(577,case IB_WR_SEND:)
(578,swsqe)
(579,mhp)
(580,return err;)
(581,wr)
(582,err = build_rdma_read(wqe, wr, &len16)
(583,qhp->wq.sq)
(584,flag)
(585,if (num_wrs == 0)
(586,FW_RI_READ_REQ)
(587,init_wr_hdr(wqe, qhp->wq.sq.pidx, fw_opcode, fw_flags, len16)
(588,qhp->wq.sq.pidx)
(589,qhp->rhp)
(590,err = -EINVAL)
(591,qhp->wq)
(592,0)
(593,if (wr->send_flags & IB_SEND_SOLICITED)
(594,pr_warn("%s post of type=%d TBD!\\n", __func__,\n\\n\\t\\t\\t\\twr->opcode)
(595,qhp->wq)
(596,sq)
(597,qhp)
(598,swsqe->opcode = FW_RI_READ_REQ)
(599,wr)
(600,spin_lock_irqsave(&qhp->lock, flag)
(601,fw_opcode = FW_RI_RDMA_WRITE_WR)
(602,wr_id)
(603,sq_sig_all)
(604,&len16)
(605,fw_flags |= FW_RI_READ_FENCE_FLAG)
(606,!mhp->attr.state)
(607,num_wrs)
(608,return -ENOMEM;)
(609,wq)
(610,lldi)
(611,lock)
(612,err = complete_sq_drain_wrs(qhp, wr, bad_wr)
(613,fw_flags)
(614,wr->sg_list[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^