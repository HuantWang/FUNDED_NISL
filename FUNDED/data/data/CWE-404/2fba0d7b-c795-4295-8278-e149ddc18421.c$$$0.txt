-----label-----
1
-----code-----
void update_vsyscall(struct timekeeper *tk)
{
	u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");

	++vdso_data->tb_seq_count;
	smp_wmb();

	vdso_data->use_syscall			= use_syscall;
	vdso_data->xtime_coarse_sec		= tk->xtime_sec;
	vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>
							tk->tkr_mono.shift;
	vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;
	vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;

	if (!use_syscall) {
		/* tkr_mono.cycle_last == tkr_raw.cycle_last */
		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;
		vdso_data->raw_time_sec		= tk->raw_time.tv_sec;
		vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec;
		vdso_data->xtime_clock_sec	= tk->xtime_sec;
		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;
		/* tkr_raw.xtime_nsec == 0 */
		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;
		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;
		/* tkr_mono.shift == tkr_raw.shift */
		vdso_data->cs_shift		= tk->tkr_mono.shift;
	}

	smp_wmb();
	++vdso_data->tb_seq_count;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
19,22
20,21
22,23
22,24
23,24
23,25
24,25
24,26
25,26
31,32
32,33
33,34
33,35
34,35
37,38
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
50,51
50,52
51,52
51,53
52,53
55,56
55,57
56,57
59,60
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
67,69
68,69
72,73
72,74
73,74
73,75
74,75
78,79
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
104,105
106,107
106,108
106,109
106,110
106,111
106,112
106,113
106,114
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
114,116
115,116
119,120
120,121
120,122
121,122
121,123
122,123
125,126
125,127
126,127
126,128
127,128
131,132
132,133
132,134
133,134
133,135
134,135
137,138
137,139
138,139
138,140
139,140
143,144
144,145
144,146
145,146
145,147
146,147
149,150
149,151
150,151
153,154
154,155
154,156
155,156
155,157
156,157
159,160
159,161
160,161
160,162
161,162
165,166
166,167
166,168
167,168
167,169
168,169
171,172
171,173
172,173
172,174
173,174
177,178
178,179
178,180
179,180
179,181
180,181
183,184
183,185
184,185
184,186
185,186
189,190
190,191
190,192
191,192
191,193
192,193
195,196
195,197
196,197
196,198
197,198
201,202
202,203
203,204
205,206
206,207
207,208
207,209
208,209
-----nextToken-----
2,4,7,9,10,15,17,21,26,27,28,29,30,35,36,40,45,46,48,53,54,57,58,63,64,69,70,71,75,76,77,82,83,87,88,89,94,95,99,100,101,105,111,112,116,117,118,123,124,128,129,130,135,136,140,141,142,147,148,151,152,157,158,162,163,164,169,170,174,175,176,181,182,186,187,188,193,194,198,199,200,204,209,210
-----computeFrom-----
42,43
42,44
50,51
50,52
60,61
60,62
65,66
65,67
79,80
79,81
91,92
91,93
108,109
108,110
120,121
120,122
132,133
132,134
144,145
144,146
154,155
154,156
166,167
166,168
178,179
178,180
190,191
190,192
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void update_vsyscall(struct timekeeper *tk){	u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");	++vdso_data->tb_seq_count;	smp_wmb();	vdso_data->use_syscall			= use_syscall;	vdso_data->xtime_coarse_sec		= tk->xtime_sec;	vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift;	vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;	vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;	if (!use_syscall) {		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec		= tk->raw_time.tv_sec;		vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}	smp_wmb();	++vdso_data->tb_seq_count;}
void
update_vsyscall(struct timekeeper *tk)
update_vsyscall
struct timekeeper *tk
struct timekeeper
timekeeper
*tk
*
tk
{	u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");	++vdso_data->tb_seq_count;	smp_wmb();	vdso_data->use_syscall			= use_syscall;	vdso_data->xtime_coarse_sec		= tk->xtime_sec;	vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift;	vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;	vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;	if (!use_syscall) {		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec		= tk->raw_time.tv_sec;		vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}	smp_wmb();	++vdso_data->tb_seq_count;}
u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");
u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");
u32
u32
use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
use_syscall
= strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
strcmp
strcmp
tk->tkr_mono.clock->name
tk->tkr_mono.clock
tk->tkr_mono
tk
tk
tkr_mono
clock
name
"arch_sys_counter"
++vdso_data->tb_seq_count;
++vdso_data->tb_seq_count
vdso_data->tb_seq_count
vdso_data
vdso_data
tb_seq_count
smp_wmb();
smp_wmb()
smp_wmb
smp_wmb
vdso_data->use_syscall			= use_syscall;
vdso_data->use_syscall			= use_syscall
vdso_data->use_syscall
vdso_data
vdso_data
use_syscall
use_syscall
use_syscall
vdso_data->xtime_coarse_sec		= tk->xtime_sec;
vdso_data->xtime_coarse_sec		= tk->xtime_sec
vdso_data->xtime_coarse_sec
vdso_data
vdso_data
xtime_coarse_sec
tk->xtime_sec
tk
tk
xtime_sec
vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift;
vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift
vdso_data->xtime_coarse_nsec
vdso_data
vdso_data
xtime_coarse_nsec
tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift
tk->tkr_mono.xtime_nsec
tk->tkr_mono
tk
tk
tkr_mono
xtime_nsec
tk->tkr_mono.shift
tk->tkr_mono
tk
tk
tkr_mono
shift
vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;
vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec
vdso_data->wtm_clock_sec
vdso_data
vdso_data
wtm_clock_sec
tk->wall_to_monotonic.tv_sec
tk->wall_to_monotonic
tk
tk
wall_to_monotonic
tv_sec
vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;
vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec
vdso_data->wtm_clock_nsec
vdso_data
vdso_data
wtm_clock_nsec
tk->wall_to_monotonic.tv_nsec
tk->wall_to_monotonic
tk
tk
wall_to_monotonic
tv_nsec
if (!use_syscall) {		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec		= tk->raw_time.tv_sec;		vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}
!use_syscall
use_syscall
use_syscall
{		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec		= tk->raw_time.tv_sec;		vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}
vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;
vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last
vdso_data->cs_cycle_last
vdso_data
vdso_data
cs_cycle_last
tk->tkr_mono.cycle_last
tk->tkr_mono
tk
tk
tkr_mono
cycle_last
vdso_data->raw_time_sec		= tk->raw_time.tv_sec;
vdso_data->raw_time_sec		= tk->raw_time.tv_sec
vdso_data->raw_time_sec
vdso_data
vdso_data
raw_time_sec
tk->raw_time.tv_sec
tk->raw_time
tk
tk
raw_time
tv_sec
vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec;
vdso_data->raw_time_nsec	= tk->raw_time.tv_nsec
vdso_data->raw_time_nsec
vdso_data
vdso_data
raw_time_nsec
tk->raw_time.tv_nsec
tk->raw_time
tk
tk
raw_time
tv_nsec
vdso_data->xtime_clock_sec	= tk->xtime_sec;
vdso_data->xtime_clock_sec	= tk->xtime_sec
vdso_data->xtime_clock_sec
vdso_data
vdso_data
xtime_clock_sec
tk->xtime_sec
tk
tk
xtime_sec
vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;
vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec
vdso_data->xtime_clock_nsec
vdso_data
vdso_data
xtime_clock_nsec
tk->tkr_mono.xtime_nsec
tk->tkr_mono
tk
tk
tkr_mono
xtime_nsec
vdso_data->cs_mono_mult		= tk->tkr_mono.mult;
vdso_data->cs_mono_mult		= tk->tkr_mono.mult
vdso_data->cs_mono_mult
vdso_data
vdso_data
cs_mono_mult
tk->tkr_mono.mult
tk->tkr_mono
tk
tk
tkr_mono
mult
vdso_data->cs_raw_mult		= tk->tkr_raw.mult;
vdso_data->cs_raw_mult		= tk->tkr_raw.mult
vdso_data->cs_raw_mult
vdso_data
vdso_data
cs_raw_mult
tk->tkr_raw.mult
tk->tkr_raw
tk
tk
tkr_raw
mult
vdso_data->cs_shift		= tk->tkr_mono.shift;
vdso_data->cs_shift		= tk->tkr_mono.shift
vdso_data->cs_shift
vdso_data
vdso_data
cs_shift
tk->tkr_mono.shift
tk->tkr_mono
tk
tk
tkr_mono
shift
smp_wmb();
smp_wmb()
smp_wmb
smp_wmb
++vdso_data->tb_seq_count;
++vdso_data->tb_seq_count
vdso_data->tb_seq_count
vdso_data
vdso_data
tb_seq_count
-----joern-----
(114,27,0)
(90,131,0)
(134,98,0)
(46,132,0)
(109,55,0)
(40,99,0)
(17,107,0)
(82,131,0)
(44,83,0)
(116,113,0)
(17,63,0)
(99,131,0)
(49,97,0)
(138,132,0)
(6,16,0)
(27,114,0)
(8,104,0)
(60,76,0)
(107,131,0)
(126,127,0)
(53,57,0)
(102,132,0)
(82,125,0)
(68,8,0)
(76,60,0)
(92,87,0)
(10,112,0)
(32,97,0)
(115,107,0)
(83,40,0)
(84,90,0)
(48,46,0)
(50,63,0)
(97,76,0)
(63,17,0)
(125,82,0)
(35,125,0)
(86,61,0)
(80,71,0)
(102,24,0)
(41,129,0)
(124,131,0)
(85,53,0)
(140,112,0)
(52,85,0)
(0,104,0)
(123,108,0)
(87,27,0)
(101,34,0)
(26,87,0)
(96,118,0)
(110,104,0)
(75,30,0)
(130,54,0)
(78,133,0)
(106,125,0)
(25,124,0)
(71,138,0)
(138,71,0)
(28,109,0)
(66,89,0)
(135,24,0)
(16,24,0)
(33,113,0)
(109,28,0)
(118,46,0)
(74,82,0)
(58,99,0)
(70,104,0)
(129,102,0)
(113,131,0)
(127,70,0)
(98,54,0)
(3,83,0)
(4,118,0)
(39,70,0)
(19,138,0)
(61,131,0)
(34,101,0)
(45,16,0)
(14,60,0)
(124,48,0)
(90,133,0)
(2,107,0)
(128,57,0)
(99,40,0)
(69,112,0)
(21,131,0)
(57,21,0)
(43,89,0)
(61,62,0)
(20,23,0)
(141,50,0)
(62,61,0)
(108,54,0)
(65,131,0)
(16,131,0)
(79,114,0)
(47,78,0)
(48,124,0)
(101,131,0)
(1,23,0)
(54,98,0)
(53,132,0)
(113,71,0)
(37,68,0)
(35,104,0)
(21,57,0)
(103,79,0)
(13,104,0)
(64,129,0)
(55,131,0)
(63,50,0)
(42,19,0)
(24,16,0)
(117,104,0)
(36,63,0)
(119,34,0)
(73,19,0)
(27,132,0)
(91,17,0)
(107,17,0)
(77,82,0)
(7,61,0)
(30,28,0)
(34,88,0)
(22,62,0)
(89,81,0)
(60,65,0)
(142,124,0)
(67,79,0)
(98,132,0)
(136,137,0)
(88,62,0)
(40,132,0)
(38,101,0)
(55,109,0)
(112,140,0)
(72,109,0)
(18,108,0)
(57,53,0)
(8,88,0)
(94,65,0)
(51,55,0)
(120,104,0)
(28,104,0)
(93,55,0)
(13,137,0)
(24,102,0)
(62,88,0)
(88,34,0)
(133,104,0)
(125,35,0)
(12,114,0)
(105,134,0)
(31,30,0)
(59,134,0)
(95,78,0)
(15,21,0)
(46,48,0)
(133,90,0)
(140,104,0)
(65,60,0)
(70,50,0)
(88,8,0)
(76,132,0)
(122,137,0)
(108,131,0)
(143,99,0)
(121,48,0)
(137,13,0)
(100,85,0)
(139,90,0)
(54,108,0)
(23,35,0)
(29,81,0)
(50,70,0)
(79,131,0)
(81,104,0)
(9,21,0)
(5,101,0)
(111,65,0)
(81,70,0)
(71,113,0)
(114,79,0)
(11,68,0)
(46,48,1)
(55,93,1)
(116,33,1)
(90,131,1)
(64,98,1)
(17,107,1)
(89,66,1)
(112,69,1)
(113,116,1)
(71,80,1)
(141,63,1)
(68,37,1)
(103,67,1)
(55,131,1)
(115,39,1)
(33,19,1)
(22,61,1)
(41,64,1)
(21,15,1)
(1,28,1)
(113,131,1)
(47,81,1)
(122,136,1)
(86,7,1)
(56,140,1)
(19,73,1)
(81,29,1)
(18,134,1)
(9,85,1)
(109,72,1)
(10,0,1)
(123,18,1)
(76,60,1)
(48,124,1)
(54,130,1)
(70,50,1)
(15,9,1)
(119,101,1)
(32,49,1)
(130,108,1)
(62,61,1)
(50,141,1)
(127,126,1)
(124,131,1)
(4,96,1)
(126,35,1)
(88,62,1)
(67,87,1)
(5,62,1)
(72,55,1)
(61,131,1)
(109,55,1)
(16,45,1)
(40,99,1)
(84,139,1)
(105,59,1)
(78,95,1)
(137,122,1)
(108,123,1)
(125,106,1)
(3,44,1)
(53,57,1)
(28,109,1)
(71,113,1)
(114,79,1)
(62,22,1)
(65,111,1)
(59,127,1)
(11,133,1)
(52,100,1)
(140,112,1)
(36,17,1)
(20,1,1)
(106,82,1)
(125,82,1)
(57,21,1)
(110,13,1)
(34,119,1)
(100,76,1)
(16,131,1)
(82,131,1)
(24,135,1)
(6,129,1)
(107,131,1)
(60,65,1)
(92,53,1)
(98,54,1)
(99,58,1)
(95,47,1)
(42,102,1)
(30,31,1)
(17,91,1)
(94,97,1)
(23,20,1)
(143,83,1)
(21,131,1)
(80,113,1)
(51,30,1)
(0,127,1)
(114,12,1)
(82,77,1)
(25,118,1)
(136,70,1)
(83,3,1)
(87,26,1)
(49,40,1)
(65,131,1)
(108,131,1)
(79,103,1)
(77,74,1)
(97,32,1)
(88,34,1)
(75,8,1)
(58,143,1)
(0,46,1)
(133,90,1)
(79,131,1)
(50,63,1)
(14,65,1)
(63,36,1)
(29,89,1)
(124,142,1)
(27,114,1)
(7,68,1)
(63,17,1)
(13,137,1)
(60,14,1)
(61,86,1)
(134,105,1)
(127,70,1)
(37,11,1)
(96,27,1)
(135,16,1)
(44,138,1)
(121,124,1)
(73,42,1)
(101,38,1)
(93,51,1)
(99,131,1)
(142,25,1)
(102,24,1)
(31,75,1)
(8,88,1)
(129,41,1)
(85,52,1)
(74,23,1)
(34,101,1)
(66,43,1)
(38,5,1)
(48,121,1)
(139,78,1)
(90,84,1)
(43,110,1)
(2,115,1)
(35,125,1)
(107,2,1)
(118,4,1)
(138,71,1)
(111,94,1)
(69,10,1)
(81,70,1)
(45,6,1)
(57,128,1)
(91,107,1)
(24,16,1)
(128,21,1)
(54,108,1)
(12,79,1)
(26,92,1)
(101,131,1)
(116,127,2)
(49,127,2)
(16,131,2)
(63,17,2)
(114,127,2)
(33,127,2)
(118,127,2)
(98,54,2)
(99,131,2)
(102,24,2)
(100,127,2)
(16,127,2)
(13,137,2)
(109,55,2)
(73,127,2)
(82,131,2)
(27,114,2)
(79,127,2)
(27,127,2)
(58,127,2)
(12,127,2)
(54,127,2)
(55,131,2)
(80,127,2)
(134,127,2)
(79,131,2)
(26,127,2)
(76,127,2)
(88,62,2)
(67,127,2)
(140,112,2)
(123,127,2)
(101,131,2)
(96,127,2)
(50,63,2)
(25,127,2)
(135,127,2)
(21,131,2)
(53,57,2)
(113,127,2)
(19,127,2)
(65,127,2)
(48,127,2)
(90,131,2)
(124,127,2)
(8,88,2)
(70,50,2)
(18,127,2)
(57,21,2)
(17,107,2)
(102,127,2)
(133,90,2)
(128,127,2)
(32,127,2)
(60,65,2)
(46,127,2)
(87,127,2)
(94,127,2)
(81,70,2)
(53,127,2)
(4,127,2)
(76,60,2)
(45,127,2)
(6,127,2)
(108,131,2)
(41,127,2)
(52,127,2)
(111,127,2)
(113,131,2)
(130,127,2)
(21,127,2)
(127,70,2)
(142,127,2)
(54,108,2)
(14,127,2)
(59,127,2)
(9,127,2)
(71,113,2)
(129,127,2)
(65,131,2)
(42,127,2)
(99,127,2)
(105,127,2)
(71,127,2)
(3,127,2)
(40,99,2)
(60,127,2)
(62,61,2)
(15,127,2)
(103,127,2)
(24,16,2)
(88,34,2)
(35,125,2)
(83,127,2)
(85,127,2)
(61,131,2)
(107,131,2)
(121,127,2)
(124,131,2)
(114,79,2)
(138,127,2)
(98,127,2)
(44,127,2)
(46,48,2)
(48,124,2)
(92,127,2)
(34,101,2)
(28,109,2)
(64,127,2)
(40,127,2)
(57,127,2)
(108,127,2)
(97,127,2)
(125,82,2)
(143,127,2)
(24,127,2)
(138,71,2)
-----------------------------------
(0,smp_wmb()
(1,vdso_data)
(2,tkr_mono)
(3,xtime_clock_sec)
(4,cs_shift)
(5,tk)
(6,tk)
(7,tk)
(8,vdso_data->xtime_coarse_nsec\\t\\t= tk->tkr_mono.xtime_nsec >>\n\\n\\t\\t\\t\\t\\t\\t\\ttk->tkr_mono.shift)
(9,tk)
(10,vdso_data)
(11,vdso_data)
(12,mult)
(13,++vdso_data->tb_seq_count)
(14,xtime_nsec)
(15,tkr_mono)
(16,tk->raw_time)
(17,tk->tkr_mono.clock)
(18,tk)
(19,vdso_data->raw_time_nsec)
(20,wtm_clock_nsec)
(21,tk->tkr_mono)
(22,xtime_nsec)
(23,vdso_data->wtm_clock_nsec)
(24,tk->raw_time.tv_sec)
(25,tk)
(26,cs_raw_mult)
(27,vdso_data->cs_raw_mult\\t\\t= tk->tkr_raw.mult)
(28,vdso_data->wtm_clock_sec\\t\\t= tk->wall_to_monotonic.tv_sec)
(29,use_syscall)
(30,vdso_data->wtm_clock_sec)
(31,wtm_clock_sec)
(32,xtime_clock_nsec)
(33,tk)
(34,tk->tkr_mono.shift)
(35,vdso_data->wtm_clock_nsec\\t\\t= tk->wall_to_monotonic.tv_nsec)
(36,name)
(37,xtime_coarse_nsec)
(38,tkr_mono)
(39,use_syscall)
(40,vdso_data->xtime_clock_sec\\t= tk->xtime_sec)
(41,raw_time_sec)
(42,vdso_data)
(43,vdso_data)
(44,vdso_data)
(45,raw_time)
(46,vdso_data->cs_shift\\t\\t= tk->tkr_mono.shift)
(47,vdso_data)
(48,tk->tkr_mono.shift)
(49,vdso_data)
(50,strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
(51,tk)
(52,cs_mono_mult)
(53,vdso_data->cs_mono_mult\\t\\t= tk->tkr_mono.mult)
(54,tk->tkr_mono.cycle_last)
(55,tk->wall_to_monotonic)
(56,RET)
(57,tk->tkr_mono.mult)
(58,xtime_sec)
(59,vdso_data)
(60,tk->tkr_mono.xtime_nsec)
(61,tk->tkr_mono)
(62,tk->tkr_mono.xtime_nsec)
(63,tk->tkr_mono.clock->name)
(64,vdso_data)
(65,tk->tkr_mono)
(66,use_syscall)
(67,tk)
(68,vdso_data->xtime_coarse_nsec)
(69,tb_seq_count)
(70,use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
(71,tk->raw_time.tv_nsec)
(72,tv_sec)
(73,raw_time_nsec)
(74,tk)
(75,vdso_data)
(76,vdso_data->xtime_clock_nsec\\t= tk->tkr_mono.xtime_nsec)
(77,wall_to_monotonic)
(78,vdso_data->xtime_coarse_sec)
(79,tk->tkr_raw)
(80,tv_nsec)
(81,vdso_data->use_syscall\\t\\t\\t= use_syscall)
(82,tk->wall_to_monotonic)
(83,vdso_data->xtime_clock_sec)
(84,xtime_sec)
(85,vdso_data->cs_mono_mult)
(86,tkr_mono)
(87,vdso_data->cs_raw_mult)
(88,tk->tkr_mono.xtime_nsec >>\n\\n\\t\\t\\t\\t\\t\\t\\ttk->tkr_mono.shift)
(89,vdso_data->use_syscall)
(90,tk->xtime_sec)
(91,clock)
(92,vdso_data)
(93,wall_to_monotonic)
(94,tk)
(95,xtime_coarse_sec)
(96,vdso_data)
(97,vdso_data->xtime_clock_nsec)
(98,vdso_data->cs_cycle_last\\t= tk->tkr_mono.cycle_last)
(99,tk->xtime_sec)
(100,vdso_data)
(101,tk->tkr_mono)
(102,vdso_data->raw_time_sec\\t\\t= tk->raw_time.tv_sec)
(103,tkr_raw)
(104,)
(105,cs_cycle_last)
(106,tv_nsec)
(107,tk->tkr_mono)
(108,tk->tkr_mono)
(109,tk->wall_to_monotonic.tv_sec)
(110,smp_wmb()
(111,tkr_mono)
(112,vdso_data->tb_seq_count)
(113,tk->raw_time)
(114,tk->tkr_raw.mult)
(115,tk)
(116,raw_time)
(117,use_syscall)
(118,vdso_data->cs_shift)
(119,shift)
(120,if (!use_syscall)
(121,shift)
(122,tb_seq_count)
(123,tkr_mono)
(124,tk->tkr_mono)
(125,tk->wall_to_monotonic.tv_nsec)
(126,use_syscall)
(127,!use_syscall)
(128,mult)
(129,vdso_data->raw_time_sec)
(130,cycle_last)
(131,struct timekeeper *tk)
(132,)
(133,vdso_data->xtime_coarse_sec\\t\\t= tk->xtime_sec)
(134,vdso_data->cs_cycle_last)
(135,tv_sec)
(136,vdso_data)
(137,vdso_data->tb_seq_count)
(138,vdso_data->raw_time_nsec\\t= tk->raw_time.tv_nsec)
(139,tk)
(140,++vdso_data->tb_seq_count)
(141,"arch_sys_counter")
(142,tkr_mono)
(143,tk)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^