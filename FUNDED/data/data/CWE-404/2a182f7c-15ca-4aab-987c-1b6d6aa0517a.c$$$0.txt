-----label-----
1
-----code-----
static bool finished_loading(const char *name)
{
	struct module *mod;
	bool ret;

	/*
	 * The module_mutex should not be a heavily contended lock;
	 * if we get the occasional sleep here, we'll go an extra iteration
	 * in the wait_event_interruptible(), which is harmless.
	 */
	sched_annotate_sleep();
	mutex_lock(&module_mutex);
	mod = find_module_all(name, strlen(name), true);
	ret = !mod || mod->state == MODULE_STATE_LIVE;
	mutex_unlock(&module_mutex);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
18,19
19,20
19,21
21,22
23,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
39,43
40,41
42,43
44,45
44,46
45,46
47,48
50,51
51,52
51,53
52,53
54,55
54,56
55,56
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
66,68
67,68
69,70
70,71
72,73
73,74
-----nextToken-----
2,4,6,8,9,14,16,17,20,22,26,30,33,34,38,41,43,46,48,49,53,57,61,62,64,68,71,74
-----computeFrom-----
36,37
36,38
51,52
51,53
54,55
54,56
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static bool finished_loading(const char *name){	struct module *mod;	bool ret;	/*	 * The module_mutex should not be a heavily contended lock;	 * if we get the occasional sleep here, we'll go an extra iteration	 * in the wait_event_interruptible(), which is harmless.	 */	sched_annotate_sleep();	mutex_lock(&module_mutex);	mod = find_module_all(name, strlen(name), true);	ret = !mod || mod->state == MODULE_STATE_LIVE;	mutex_unlock(&module_mutex);	return ret;}
static bool
finished_loading(const char *name)
finished_loading
const char *name
const char
*name
*
name
{	struct module *mod;	bool ret;	/*	 * The module_mutex should not be a heavily contended lock;	 * if we get the occasional sleep here, we'll go an extra iteration	 * in the wait_event_interruptible(), which is harmless.	 */	sched_annotate_sleep();	mutex_lock(&module_mutex);	mod = find_module_all(name, strlen(name), true);	ret = !mod || mod->state == MODULE_STATE_LIVE;	mutex_unlock(&module_mutex);	return ret;}
struct module *mod;
struct module *mod;
struct module
module
*mod
*
mod
bool ret;
bool ret;
bool
ret
ret
sched_annotate_sleep();
sched_annotate_sleep()
sched_annotate_sleep
sched_annotate_sleep
mutex_lock(&module_mutex);
mutex_lock(&module_mutex);
mutex_lock
mutex_lock
(&module_mutex)
&module_mutex
&
module_mutex
mod = find_module_all(name, strlen(name), true);
mod = find_module_all(name, strlen(name), true)
mod
mod
find_module_all(name, strlen(name), true)
find_module_all
find_module_all
name
name
strlen(name)
strlen
strlen
name
name
true
ret = !mod || mod->state == MODULE_STATE_LIVE;
ret = !mod || mod->state == MODULE_STATE_LIVE
ret
ret
!mod || mod->state == MODULE_STATE_LIVE
!mod
mod
mod
mod->state == MODULE_STATE_LIVE
mod->state
mod
mod
state
MODULE_STATE_LIVE
MODULE_STATE_LIVE
mutex_unlock(&module_mutex);
mutex_unlock(&module_mutex)
mutex_unlock
mutex_unlock
&module_mutex
module_mutex
module_mutex
return ret;
ret
ret
-----joern-----
(6,7,0)
(10,22,0)
(19,7,0)
(22,13,0)
(25,5,0)
(27,16,0)
(3,10,0)
(14,20,0)
(22,18,0)
(9,6,0)
(13,7,0)
(30,27,0)
(16,28,0)
(26,3,0)
(3,27,0)
(20,14,0)
(18,27,0)
(1,7,0)
(5,25,0)
(21,16,0)
(11,2,0)
(2,28,0)
(16,27,0)
(4,3,0)
(15,25,0)
(22,10,0)
(16,2,0)
(5,7,0)
(12,14,0)
(6,13,0)
(17,7,0)
(2,16,0)
(29,6,0)
(27,7,0)
(0,16,0)
(10,3,0)
(8,18,0)
(13,22,0)
(23,10,0)
(18,22,0)
(24,13,0)
(20,7,0)
(0,30,1)
(6,13,1)
(16,2,1)
(2,28,1)
(12,1,1)
(10,23,1)
(21,2,1)
(8,24,1)
(13,22,1)
(25,15,1)
(22,10,1)
(4,18,1)
(15,13,1)
(9,6,1)
(29,5,1)
(5,25,1)
(18,8,1)
(3,26,1)
(20,14,1)
(6,29,1)
(26,4,1)
(11,0,1)
(24,27,1)
(16,28,1)
(22,18,1)
(16,21,1)
(2,11,1)
(23,3,1)
(3,27,1)
(30,20,1)
(10,3,1)
(14,12,1)
(27,16,1)
(18,27,1)
(9,6,2)
(26,18,2)
(16,28,2)
(13,22,2)
(4,18,2)
(5,25,2)
(10,18,2)
(2,28,2)
(22,10,2)
(3,18,2)
(23,18,2)
(27,16,2)
(20,14,2)
(6,13,2)
(22,18,2)
(16,2,2)
(18,27,2)
(3,27,2)
(10,3,2)
-----------------------------------
(0,name)
(1,sched_annotate_sleep()
(2,strlen(name)
(3,mod->state)
(4,mod)
(5,mutex_unlock(&module_mutex)
(6,return ret;)
(7,)
(8,mod)
(9,RET)
(10,mod->state == MODULE_STATE_LIVE)
(11,name)
(12,module_mutex)
(13,ret = !mod || mod->state == MODULE_STATE_LIVE)
(14,&module_mutex)
(15,module_mutex)
(16,find_module_all(name, strlen(name)
(17,mod)
(18,!mod)
(19,ret)
(20,mutex_lock(&module_mutex)
(21,true)
(22,!mod || mod->state == MODULE_STATE_LIVE)
(23,MODULE_STATE_LIVE)
(24,ret)
(25,&module_mutex)
(26,state)
(27,mod = find_module_all(name, strlen(name)
(28,const char *name)
(29,ret)
(30,mod)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^