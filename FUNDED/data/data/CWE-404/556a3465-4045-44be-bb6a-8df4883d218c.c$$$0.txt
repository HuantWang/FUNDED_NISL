-----label-----
1
-----code-----
void CWE590_Free_Memory_Not_on_Heap__free_int_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType myStruct)
{
    int * data = myStruct.structFirst;
    printIntLine(data[0]);
    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,7,9,13,15,16,20,21,25,28,29,33,35
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE590_Free_Memory_Not_on_Heap__free_int_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType myStruct){    int * data = myStruct.structFirst;    printIntLine(data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
void
CWE590_Free_Memory_Not_on_Heap__free_int_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType myStruct)
CWE590_Free_Memory_Not_on_Heap__free_int_static_67b_badSink
CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType myStruct
CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType
CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType
myStruct
myStruct
{    int * data = myStruct.structFirst;    printIntLine(data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
int * data = myStruct.structFirst;
int * data = myStruct.structFirst;
int
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(9,14,0)
(4,13,0)
(13,10,0)
(2,14,0)
(0,13,0)
(1,14,0)
(6,12,0)
(8,6,0)
(10,13,0)
(14,3,0)
(6,2,0)
(10,12,0)
(5,2,0)
(14,2,0)
(2,12,0)
(11,12,0)
(13,2,0)
(9,1,1)
(7,6,1)
(6,2,1)
(13,2,1)
(0,2,1)
(4,0,1)
(1,5,1)
(8,10,1)
(2,14,1)
(13,4,1)
(14,3,1)
(10,13,1)
(14,9,1)
(6,8,1)
(2,14,2)
(6,2,2)
(14,3,2)
(13,2,2)
(10,13,2)
-----------------------------------
(0,data)
(1,myStruct)
(2,* data = myStruct.structFirst)
(3,CWE590_Free_Memory_Not_on_Heap__free_int_static_67_structType myStruct)
(4,0)
(5,data)
(6,free(data)
(7,RET)
(8,data)
(9,structFirst)
(10,printIntLine(data[0])
(11,data)
(12,)
(13,data[0])
(14,myStruct.structFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^