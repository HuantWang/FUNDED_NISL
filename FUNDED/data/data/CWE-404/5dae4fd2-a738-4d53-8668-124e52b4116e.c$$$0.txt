-----label-----
1
-----code-----
static int binder_fixup_parent(struct binder_transaction *t,
			       struct binder_thread *thread,
			       struct binder_buffer_object *bp,
			       binder_size_t *off_start,
			       binder_size_t num_valid,
			       struct binder_buffer_object *last_fixup_obj,
			       binder_size_t last_fixup_min_off)
{
	struct binder_buffer_object *parent;
	u8 *parent_buffer;
	struct binder_buffer *b = t->buffer;
	struct binder_proc *proc = thread->proc;
	struct binder_proc *target_proc = t->to_proc;

	if (!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT))
		return 0;

	parent = binder_validate_ptr(b, bp->parent, off_start, num_valid);
	if (!parent) {
		binder_user_error("%d:%d got transaction with invalid parent offset or type\n",
				  proc->pid, thread->pid);
		return -EINVAL;
	}

	if (!binder_validate_fixup(b, off_start,
				   parent, bp->parent_offset,
				   last_fixup_obj,
				   last_fixup_min_off)) {
		binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",
				  proc->pid, thread->pid);
		return -EINVAL;
	}

	if (parent->length < sizeof(binder_uintptr_t) ||
	    bp->parent_offset > parent->length - sizeof(binder_uintptr_t)) {
		/* No space for a pointer here! */
		binder_user_error("%d:%d got transaction with invalid parent offset\n",
				  proc->pid, thread->pid);
		return -EINVAL;
	}
	parent_buffer = (u8 *)((uintptr_t)parent->buffer -
			binder_alloc_get_user_buffer_offset(
				&target_proc->alloc));
	*(binder_uintptr_t *)(parent_buffer + bp->parent_offset) = bp->buffer;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
45,51
45,52
45,53
45,54
45,55
45,56
45,57
45,58
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
60,61
61,62
61,63
62,63
64,65
64,66
64,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
76,78
76,79
79,80
80,81
80,82
81,82
84,85
85,86
85,87
86,87
88,89
88,90
88,91
91,92
92,93
92,94
93,94
96,97
96,98
97,98
98,99
99,100
99,101
100,101
100,102
101,102
104,105
106,107
108,109
109,110
109,111
110,111
112,113
112,114
112,115
112,116
112,117
113,114
115,116
117,118
117,119
118,119
121,122
123,124
125,126
125,127
126,127
127,128
129,130
129,131
130,131
131,132
131,133
131,134
131,135
132,133
135,136
135,137
136,137
139,140
139,141
140,141
143,144
144,145
145,146
147,148
147,149
148,149
149,150
149,151
149,152
149,153
149,154
149,155
149,156
150,151
152,153
154,155
156,157
158,159
158,160
159,160
162,163
164,165
166,167
166,168
167,168
168,169
168,170
168,171
168,172
169,170
172,173
172,174
173,174
176,177
176,178
177,178
180,181
181,182
182,183
184,185
184,186
185,186
185,187
186,187
186,188
187,188
187,189
188,189
191,192
192,193
192,194
193,194
196,197
196,198
197,198
197,199
198,199
201,202
201,203
202,203
202,204
203,204
206,207
207,208
207,209
208,209
211,212
211,213
212,213
213,214
213,215
213,216
213,217
214,215
217,218
217,219
218,219
221,222
221,223
222,223
225,226
226,227
227,228
229,230
230,231
230,232
231,232
233,234
233,235
234,235
234,236
235,236
237,238
239,240
240,241
240,242
241,242
241,243
242,243
242,244
243,244
246,247
246,248
247,248
250,251
250,252
251,252
253,254
254,255
254,256
255,256
258,259
259,260
259,261
260,261
261,262
261,263
262,263
262,264
263,264
265,266
267,268
268,269
268,270
269,270
271,272
271,273
272,273
275,276
275,277
276,277
279,280
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,31,33,36,38,39,42,44,49,51,52,56,58,59,63,65,66,70,71,75,77,78,82,83,87,89,90,94,95,102,103,105,107,111,114,116,119,120,122,124,128,133,134,137,138,141,142,146,151,153,155,157,160,161,163,165,170,171,174,175,178,179,183,189,190,194,195,199,200,204,205,209,210,215,216,219,220,223,224,228,232,236,238,244,245,248,249,252,256,257,264,266,270,273,274,277,278,280
-----computeFrom-----
99,100
99,101
109,110
109,111
185,186
185,187
186,187
186,188
196,197
196,198
201,202
201,203
230,231
230,232
240,241
240,242
259,260
259,261
268,269
268,270
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int binder_fixup_parent(struct binder_transaction *t,			       struct binder_thread *thread,			       struct binder_buffer_object *bp,			       binder_size_t *off_start,			       binder_size_t num_valid,			       struct binder_buffer_object *last_fixup_obj,			       binder_size_t last_fixup_min_off){	struct binder_buffer_object *parent;	u8 *parent_buffer;	struct binder_buffer *b = t->buffer;	struct binder_proc *proc = thread->proc;	struct binder_proc *target_proc = t->to_proc;	if (!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT))		return 0;	parent = binder_validate_ptr(b, bp->parent, off_start, num_valid);	if (!parent) {		binder_user_error("%d:%d got transaction with invalid parent offset or type\n",				  proc->pid, thread->pid);		return -EINVAL;	}	if (!binder_validate_fixup(b, off_start,				   parent, bp->parent_offset,				   last_fixup_obj,				   last_fixup_min_off)) {		binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",				  proc->pid, thread->pid);		return -EINVAL;	}	if (parent->length < sizeof(binder_uintptr_t) ||	    bp->parent_offset > parent->length - sizeof(binder_uintptr_t)) {		/* No space for a pointer here! */		binder_user_error("%d:%d got transaction with invalid parent offset\n",				  proc->pid, thread->pid);		return -EINVAL;	}	parent_buffer = (u8 *)((uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc));	*(binder_uintptr_t *)(parent_buffer + bp->parent_offset) = bp->buffer;	return 0;}
static int
binder_fixup_parent(struct binder_transaction *t,			       struct binder_thread *thread,			       struct binder_buffer_object *bp,			       binder_size_t *off_start,			       binder_size_t num_valid,			       struct binder_buffer_object *last_fixup_obj,			       binder_size_t last_fixup_min_off)
binder_fixup_parent
struct binder_transaction *t
struct binder_transaction
binder_transaction
*t
*
t
struct binder_thread *thread
struct binder_thread
binder_thread
*thread
*
thread
struct binder_buffer_object *bp
struct binder_buffer_object
binder_buffer_object
*bp
*
bp
binder_size_t *off_start
binder_size_t
binder_size_t
*off_start
*
off_start
binder_size_t num_valid
binder_size_t
binder_size_t
num_valid
num_valid
struct binder_buffer_object *last_fixup_obj
struct binder_buffer_object
binder_buffer_object
*last_fixup_obj
*
last_fixup_obj
binder_size_t last_fixup_min_off
binder_size_t
binder_size_t
last_fixup_min_off
last_fixup_min_off
{	struct binder_buffer_object *parent;	u8 *parent_buffer;	struct binder_buffer *b = t->buffer;	struct binder_proc *proc = thread->proc;	struct binder_proc *target_proc = t->to_proc;	if (!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT))		return 0;	parent = binder_validate_ptr(b, bp->parent, off_start, num_valid);	if (!parent) {		binder_user_error("%d:%d got transaction with invalid parent offset or type\n",				  proc->pid, thread->pid);		return -EINVAL;	}	if (!binder_validate_fixup(b, off_start,				   parent, bp->parent_offset,				   last_fixup_obj,				   last_fixup_min_off)) {		binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",				  proc->pid, thread->pid);		return -EINVAL;	}	if (parent->length < sizeof(binder_uintptr_t) ||	    bp->parent_offset > parent->length - sizeof(binder_uintptr_t)) {		/* No space for a pointer here! */		binder_user_error("%d:%d got transaction with invalid parent offset\n",				  proc->pid, thread->pid);		return -EINVAL;	}	parent_buffer = (u8 *)((uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc));	*(binder_uintptr_t *)(parent_buffer + bp->parent_offset) = bp->buffer;	return 0;}
struct binder_buffer_object *parent;
struct binder_buffer_object *parent;
struct binder_buffer_object
binder_buffer_object
*parent
*
parent
u8 *parent_buffer;
u8 *parent_buffer;
u8
u8
*parent_buffer
*
parent_buffer
struct binder_buffer *b = t->buffer;
struct binder_buffer *b = t->buffer;
struct binder_buffer
binder_buffer
*b = t->buffer
*
b
= t->buffer
t->buffer
t
t
buffer
struct binder_proc *proc = thread->proc;
struct binder_proc *proc = thread->proc;
struct binder_proc
binder_proc
*proc = thread->proc
*
proc
= thread->proc
thread->proc
thread
thread
proc
struct binder_proc *target_proc = t->to_proc;
struct binder_proc *target_proc = t->to_proc;
struct binder_proc
binder_proc
*target_proc = t->to_proc
*
target_proc
= t->to_proc
t->to_proc
t
t
to_proc
if (!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT))		return 0;
!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT)
(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT)
bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT
bp->flags
bp
bp
flags
BINDER_BUFFER_FLAG_HAS_PARENT
BINDER_BUFFER_FLAG_HAS_PARENT
return 0;
0
parent = binder_validate_ptr(b, bp->parent, off_start, num_valid);
parent = binder_validate_ptr(b, bp->parent, off_start, num_valid)
parent
parent
binder_validate_ptr(b, bp->parent, off_start, num_valid)
binder_validate_ptr
binder_validate_ptr
b
b
bp->parent
bp
bp
parent
off_start
off_start
num_valid
num_valid
if (!parent) {		binder_user_error("%d:%d got transaction with invalid parent offset or type\n",				  proc->pid, thread->pid);		return -EINVAL;	}
!parent
parent
parent
{		binder_user_error("%d:%d got transaction with invalid parent offset or type\n",				  proc->pid, thread->pid);		return -EINVAL;	}
binder_user_error("%d:%d got transaction with invalid parent offset or type\n",				  proc->pid, thread->pid);
binder_user_error("%d:%d got transaction with invalid parent offset or type\n",				  proc->pid, thread->pid)
binder_user_error
binder_user_error
"%d:%d got transaction with invalid parent offset or type\n"
proc->pid
proc
proc
pid
thread->pid
thread
thread
pid
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (!binder_validate_fixup(b, off_start,				   parent, bp->parent_offset,				   last_fixup_obj,				   last_fixup_min_off)) {		binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",				  proc->pid, thread->pid);		return -EINVAL;	}
!binder_validate_fixup(b, off_start,				   parent, bp->parent_offset,				   last_fixup_obj,				   last_fixup_min_off)
binder_validate_fixup(b, off_start,				   parent, bp->parent_offset,				   last_fixup_obj,				   last_fixup_min_off)
binder_validate_fixup
binder_validate_fixup
b
b
off_start
off_start
parent
parent
bp->parent_offset
bp
bp
parent_offset
last_fixup_obj
last_fixup_obj
last_fixup_min_off
last_fixup_min_off
{		binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",				  proc->pid, thread->pid);		return -EINVAL;	}
binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",				  proc->pid, thread->pid);
binder_user_error("%d:%d got transaction with out-of-order buffer fixup\n",				  proc->pid, thread->pid)
binder_user_error
binder_user_error
"%d:%d got transaction with out-of-order buffer fixup\n"
proc->pid
proc
proc
pid
thread->pid
thread
thread
pid
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (parent->length < sizeof(binder_uintptr_t) ||	    bp->parent_offset > parent->length - sizeof(binder_uintptr_t)) {		/* No space for a pointer here! */		binder_user_error("%d:%d got transaction with invalid parent offset\n",				  proc->pid, thread->pid);		return -EINVAL;	}
parent->length < sizeof(binder_uintptr_t) ||	    bp->parent_offset > parent->length - sizeof(binder_uintptr_t)
parent->length < sizeof(binder_uintptr_t)
parent->length
parent
parent
length
sizeof(binder_uintptr_t)
binder_uintptr_t
binder_uintptr_t
binder_uintptr_t

bp->parent_offset > parent->length - sizeof(binder_uintptr_t)
bp->parent_offset
bp
bp
parent_offset
parent->length - sizeof(binder_uintptr_t)
parent->length
parent
parent
length
sizeof(binder_uintptr_t)
binder_uintptr_t
binder_uintptr_t
binder_uintptr_t

{		/* No space for a pointer here! */		binder_user_error("%d:%d got transaction with invalid parent offset\n",				  proc->pid, thread->pid);		return -EINVAL;	}
binder_user_error("%d:%d got transaction with invalid parent offset\n",				  proc->pid, thread->pid);
binder_user_error("%d:%d got transaction with invalid parent offset\n",				  proc->pid, thread->pid)
binder_user_error
binder_user_error
"%d:%d got transaction with invalid parent offset\n"
proc->pid
proc
proc
pid
thread->pid
thread
thread
pid
return -EINVAL;
-EINVAL
EINVAL
EINVAL
parent_buffer = (u8 *)((uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc));
parent_buffer = (u8 *)((uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc))
parent_buffer
parent_buffer
(u8 *)((uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc))
u8 *
u8
u8
*
*
((uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc))
(uintptr_t)parent->buffer -			binder_alloc_get_user_buffer_offset(				&target_proc->alloc)
(uintptr_t)parent->buffer
uintptr_t
uintptr_t
uintptr_t

parent->buffer
parent
parent
buffer
binder_alloc_get_user_buffer_offset(				&target_proc->alloc)
binder_alloc_get_user_buffer_offset
binder_alloc_get_user_buffer_offset
&target_proc->alloc
target_proc->alloc
target_proc
target_proc
alloc
*(binder_uintptr_t *)(parent_buffer + bp->parent_offset) = bp->buffer;
*(binder_uintptr_t *)(parent_buffer + bp->parent_offset) = bp->buffer
*(binder_uintptr_t *)(parent_buffer + bp->parent_offset)
(binder_uintptr_t *)(parent_buffer + bp->parent_offset)
binder_uintptr_t *
binder_uintptr_t
binder_uintptr_t
*
*
(parent_buffer + bp->parent_offset)
parent_buffer + bp->parent_offset
parent_buffer
parent_buffer
bp->parent_offset
bp
bp
parent_offset
bp->buffer
bp
bp
buffer
return 0;
0
-----joern-----
(130,98,0)
(75,101,0)
(113,13,0)
(2,90,0)
(139,115,0)
(3,38,0)
(124,4,0)
(130,82,0)
(35,68,0)
(1,117,0)
(138,5,0)
(5,116,0)
(60,87,0)
(57,42,0)
(84,37,0)
(111,13,0)
(13,128,0)
(5,34,0)
(98,130,0)
(69,106,0)
(56,15,0)
(93,15,0)
(143,22,0)
(59,61,0)
(74,40,0)
(32,9,0)
(96,141,0)
(101,75,0)
(39,40,0)
(115,139,0)
(88,72,0)
(127,82,0)
(84,72,0)
(117,1,0)
(118,5,0)
(115,61,0)
(40,80,0)
(114,46,0)
(90,16,0)
(98,16,0)
(53,29,0)
(50,10,0)
(119,73,0)
(3,50,0)
(45,71,0)
(90,15,0)
(25,35,0)
(20,88,0)
(101,117,0)
(1,115,0)
(61,115,0)
(84,92,0)
(95,90,0)
(141,117,0)
(21,108,0)
(116,24,0)
(40,143,0)
(61,68,0)
(38,4,0)
(87,60,0)
(72,84,0)
(100,4,0)
(82,36,0)
(9,46,0)
(130,50,0)
(143,91,0)
(120,116,0)
(45,137,0)
(68,5,0)
(105,22,0)
(46,110,0)
(36,82,0)
(131,43,0)
(77,60,0)
(41,61,0)
(137,28,0)
(102,4,0)
(20,106,0)
(83,71,0)
(121,16,0)
(48,68,0)
(106,20,0)
(22,87,0)
(71,3,0)
(132,110,0)
(101,35,0)
(13,19,0)
(15,90,0)
(45,66,0)
(37,68,0)
(106,55,0)
(104,27,0)
(13,116,0)
(67,11,0)
(116,4,0)
(71,4,0)
(121,38,0)
(88,20,0)
(64,98,0)
(24,116,0)
(27,5,0)
(117,141,0)
(0,4,0)
(13,31,0)
(58,4,0)
(63,36,0)
(107,75,0)
(31,13,0)
(42,16,0)
(108,73,0)
(73,44,0)
(92,84,0)
(45,140,0)
(44,87,0)
(97,4,0)
(125,139,0)
(50,130,0)
(81,108,0)
(5,68,0)
(73,28,0)
(82,4,0)
(43,132,0)
(13,68,0)
(117,101,0)
(60,80,0)
(46,9,0)
(62,27,0)
(103,76,0)
(5,19,0)
(13,6,0)
(22,143,0)
(44,73,0)
(7,13,0)
(123,4,0)
(10,50,0)
(23,24,0)
(55,11,0)
(13,42,0)
(47,11,0)
(133,130,0)
(108,80,0)
(11,109,0)
(72,36,0)
(143,40,0)
(52,98,0)
(112,143,0)
(9,80,0)
(55,4,0)
(79,106,0)
(76,68,0)
(141,16,0)
(126,4,0)
(86,44,0)
(135,37,0)
(45,132,0)
(50,3,0)
(49,22,0)
(72,88,0)
(17,4,0)
(5,27,0)
(46,29,0)
(68,4,0)
(70,35,0)
(24,109,0)
(136,134,0)
(78,121,0)
(8,9,0)
(51,29,0)
(129,44,0)
(14,141,0)
(36,63,0)
(29,46,0)
(85,66,0)
(35,101,0)
(115,1,0)
(134,137,0)
(122,13,0)
(37,84,0)
(87,4,0)
(142,13,0)
(30,87,0)
(18,121,0)
(36,72,0)
(27,16,0)
(29,87,0)
(42,13,0)
(99,85,0)
(65,60,0)
(73,108,0)
(11,55,0)
(66,91,0)
(54,24,0)
(38,121,0)
(89,42,0)
(15,93,0)
(12,140,0)
(94,5,0)
(26,37,0)
(33,55,0)
(98,64,1)
(71,3,1)
(1,117,1)
(22,87,1)
(8,29,1)
(2,55,1)
(60,77,1)
(13,113,1)
(13,6,1)
(68,5,1)
(11,67,1)
(53,51,1)
(9,32,1)
(31,13,1)
(130,98,1)
(137,134,1)
(76,68,1)
(114,76,1)
(62,94,1)
(119,1,1)
(142,122,1)
(72,88,1)
(76,103,1)
(143,40,1)
(65,30,1)
(122,111,1)
(5,34,1)
(129,86,1)
(44,129,1)
(127,1,1)
(83,38,1)
(37,135,1)
(27,104,1)
(111,76,1)
(117,141,1)
(108,80,1)
(45,137,1)
(24,54,1)
(96,115,1)
(117,101,1)
(125,61,1)
(13,68,1)
(13,19,1)
(45,66,1)
(98,16,1)
(46,29,1)
(95,2,1)
(132,43,1)
(52,133,1)
(71,83,1)
(45,140,1)
(131,46,1)
(89,57,1)
(24,109,1)
(78,18,1)
(29,87,1)
(72,84,1)
(104,62,1)
(35,68,1)
(9,80,1)
(25,141,1)
(37,68,1)
(87,60,1)
(66,85,1)
(88,20,1)
(106,69,1)
(57,142,1)
(32,8,1)
(138,118,1)
(75,107,1)
(85,99,1)
(141,16,1)
(115,139,1)
(135,26,1)
(90,95,1)
(30,116,1)
(73,44,1)
(61,59,1)
(13,116,1)
(15,56,1)
(11,109,1)
(79,84,1)
(1,115,1)
(90,16,1)
(136,73,1)
(5,116,1)
(23,120,1)
(143,22,1)
(84,92,1)
(81,21,1)
(48,93,1)
(134,136,1)
(140,12,1)
(5,19,1)
(93,15,1)
(94,48,1)
(108,81,1)
(103,68,1)
(5,138,1)
(141,14,1)
(64,52,1)
(46,9,1)
(101,75,1)
(7,42,1)
(22,49,1)
(115,61,1)
(82,36,1)
(15,90,1)
(55,11,1)
(42,16,1)
(21,44,1)
(130,82,1)
(133,82,1)
(74,39,1)
(99,143,1)
(105,112,1)
(118,27,1)
(26,127,1)
(113,7,1)
(121,78,1)
(20,106,1)
(33,87,1)
(107,35,1)
(39,22,1)
(121,16,1)
(59,41,1)
(101,35,1)
(50,130,1)
(56,90,1)
(77,65,1)
(14,96,1)
(40,80,1)
(45,71,1)
(36,72,1)
(41,31,1)
(61,68,1)
(84,37,1)
(112,31,1)
(36,63,1)
(69,79,1)
(51,114,1)
(49,105,1)
(139,125,1)
(54,23,1)
(13,42,1)
(73,108,1)
(47,33,1)
(45,132,1)
(27,16,1)
(29,53,1)
(3,50,1)
(5,27,1)
(44,87,1)
(38,121,1)
(60,80,1)
(50,10,1)
(35,70,1)
(67,47,1)
(86,119,1)
(12,93,1)
(70,25,1)
(43,131,1)
(13,128,1)
(116,24,1)
(106,55,1)
(42,89,1)
(40,74,1)
(18,3,1)
(9,80,2)
(50,130,2)
(46,9,2)
(72,84,2)
(1,117,2)
(134,1,2)
(31,76,2)
(129,1,2)
(40,80,2)
(72,1,2)
(46,76,2)
(27,16,2)
(27,93,2)
(20,1,2)
(7,76,2)
(83,1,2)
(84,37,2)
(13,6,2)
(101,35,2)
(13,19,2)
(79,1,2)
(41,31,2)
(64,1,2)
(44,1,2)
(121,16,2)
(89,76,2)
(36,72,2)
(73,1,2)
(50,1,2)
(43,76,2)
(66,31,2)
(36,1,2)
(140,93,2)
(119,1,2)
(68,5,2)
(37,68,2)
(143,40,2)
(82,1,2)
(11,109,2)
(50,10,2)
(113,76,2)
(31,13,2)
(101,75,2)
(18,1,2)
(24,109,2)
(122,76,2)
(136,1,2)
(14,115,2)
(72,88,2)
(125,31,2)
(22,31,2)
(42,76,2)
(45,137,2)
(13,116,2)
(62,93,2)
(55,11,2)
(139,31,2)
(84,1,2)
(61,31,2)
(78,1,2)
(117,141,2)
(121,1,2)
(141,16,2)
(82,36,2)
(68,93,2)
(46,29,2)
(130,1,2)
(45,66,2)
(71,1,2)
(5,27,2)
(39,31,2)
(22,87,2)
(115,139,2)
(3,1,2)
(60,80,2)
(98,16,2)
(98,1,2)
(38,1,2)
(57,76,2)
(84,92,2)
(1,31,2)
(26,1,2)
(85,31,2)
(73,44,2)
(106,1,2)
(12,93,2)
(37,1,2)
(93,15,2)
(35,115,2)
(94,93,2)
(99,31,2)
(138,93,2)
(103,93,2)
(59,31,2)
(118,93,2)
(3,50,2)
(115,61,2)
(81,1,2)
(114,76,2)
(52,1,2)
(49,31,2)
(90,16,2)
(13,76,2)
(86,1,2)
(116,24,2)
(137,1,2)
(135,1,2)
(107,115,2)
(5,116,2)
(61,68,2)
(75,115,2)
(21,1,2)
(32,76,2)
(8,76,2)
(13,128,2)
(13,68,2)
(29,87,2)
(5,34,2)
(36,63,2)
(106,55,2)
(71,3,2)
(70,115,2)
(53,76,2)
(111,76,2)
(15,90,2)
(5,19,2)
(20,106,2)
(130,98,2)
(88,1,2)
(88,20,2)
(45,71,2)
(112,31,2)
(42,16,2)
(74,31,2)
(48,93,2)
(35,68,2)
(141,115,2)
(105,31,2)
(104,93,2)
(132,76,2)
(73,108,2)
(133,1,2)
(108,80,2)
(87,60,2)
(117,115,2)
(5,93,2)
(76,93,2)
(142,76,2)
(131,76,2)
(13,42,2)
(25,115,2)
(45,132,2)
(1,115,2)
(40,31,2)
(115,31,2)
(143,22,2)
(96,115,2)
(44,87,2)
(69,1,2)
(29,76,2)
(130,82,2)
(127,1,2)
(101,115,2)
(143,31,2)
(51,76,2)
(76,68,2)
(9,76,2)
(45,140,2)
(38,121,2)
(117,101,2)
(108,1,2)
-----------------------------------
(0,if (!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT)
(1,parent->length < sizeof(binder_uintptr_t)
(2,bp)
(3,*(binder_uintptr_t *)
(4,)
(5,binder_validate_ptr(b, bp->parent, off_start, num_valid)
(6,binder_size_t last_fixup_min_off)
(7,last_fixup_obj)
(8,thread)
(9,thread->pid)
(10,binder_uintptr_t *)
(11,t->to_proc)
(12,0)
(13,binder_validate_fixup(b, off_start,\n\\n\\t\\t\\t\\t   parent, bp->parent_offset,\n\\n\\t\\t\\t\\t   last_fixup_obj,\n\\n\\t\\t\\t\\t   last_fixup_min_off)
(14,parent_offset)
(15,bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT)
(16,struct binder_buffer_object *bp)
(17,parent)
(18,bp)
(19,binder_size_t *off_start)
(20,&target_proc->alloc)
(21,thread)
(22,proc->pid)
(23,t)
(24,t->buffer)
(25,parent)
(26,parent)
(27,bp->parent)
(28,)
(29,proc->pid)
(30,proc)
(31,!binder_validate_fixup(b, off_start,\n\\n\\t\\t\\t\\t   parent, bp->parent_offset,\n\\n\\t\\t\\t\\t   last_fixup_obj,\n\\n\\t\\t\\t\\t   last_fixup_min_off)
(32,pid)
(33,target_proc)
(34,binder_size_t num_valid)
(35,parent->length)
(36,(u8 *)
(37,parent->buffer)
(38,*(binder_uintptr_t *)
(39,thread)
(40,thread->pid)
(41,parent)
(42,bp->parent_offset)
(43,-EINVAL)
(44,proc->pid)
(45,RET)
(46,binder_user_error("%d:%d got transaction with invalid parent offset or type\\n",\n\\n\\t\\t\\t\\t  proc->pid, thread->pid)
(47,t)
(48,parent)
(49,pid)
(50,(binder_uintptr_t *)
(51,proc)
(52,bp)
(53,pid)
(54,buffer)
(55,*target_proc = t->to_proc)
(56,BINDER_BUFFER_FLAG_HAS_PARENT)
(57,bp)
(58,if (!parent)
(59,length)
(60,thread->proc)
(61,parent->length)
(62,bp)
(63,u8 *)
(64,parent_offset)
(65,thread)
(66,return -EINVAL;)
(67,to_proc)
(68,parent = binder_validate_ptr(b, bp->parent, off_start, num_valid)
(69,alloc)
(70,length)
(71,return 0;)
(72,(uintptr_t)
(73,binder_user_error("%d:%d got transaction with invalid parent offset\\n",\n\\n\\t\\t\\t\\t  proc->pid, thread->pid)
(74,pid)
(75,sizeof(binder_uintptr_t)
(76,!parent)
(77,proc)
(78,buffer)
(79,target_proc)
(80,struct binder_thread *thread)
(81,pid)
(82,parent_buffer = (u8 *)
(83,0)
(84,(uintptr_t)
(85,-EINVAL)
(86,proc)
(87,*proc = thread->proc)
(88,binder_alloc_get_user_buffer_offset(\n\\n\\t\\t\\t\\t&target_proc->alloc)
(89,parent_offset)
(90,bp->flags)
(91,)
(92,uintptr_t)
(93,!(bp->flags & BINDER_BUFFER_FLAG_HAS_PARENT)
(94,b)
(95,flags)
(96,bp)
(97,proc)
(98,bp->parent_offset)
(99,EINVAL)
(100,if (parent->length < sizeof(binder_uintptr_t)
(101,parent->length - sizeof(binder_uintptr_t)
(102,target_proc)
(103,parent)
(104,parent)
(105,proc)
(106,target_proc->alloc)
(107,binder_uintptr_t)
(108,thread->pid)
(109,struct binder_transaction *t)
(110,)
(111,b)
(112,"%d:%d got transaction with out-of-order buffer fixup\\n")
(113,last_fixup_min_off)
(114,"%d:%d got transaction with invalid parent offset or type\\n")
(115,parent->length < sizeof(binder_uintptr_t)
(116,*b = t->buffer)
(117,bp->parent_offset > parent->length - sizeof(binder_uintptr_t)
(118,off_start)
(119,"%d:%d got transaction with invalid parent offset\\n")
(120,b)
(121,bp->buffer)
(122,off_start)
(123,parent_buffer)
(124,if (!binder_validate_fixup(b, off_start,\n\\n\\t\\t\\t\\t   parent, bp->parent_offset,\n\\n\\t\\t\\t\\t   last_fixup_obj,\n\\n\\t\\t\\t\\t   last_fixup_min_off)
(125,binder_uintptr_t)
(126,b)
(127,parent_buffer)
(128,struct binder_buffer_object *last_fixup_obj)
(129,pid)
(130,parent_buffer + bp->parent_offset)
(131,EINVAL)
(132,return -EINVAL;)
(133,parent_buffer)
(134,-EINVAL)
(135,buffer)
(136,EINVAL)
(137,return -EINVAL;)
(138,num_valid)
(139,sizeof(binder_uintptr_t)
(140,return 0;)
(141,bp->parent_offset)
(142,parent)
(143,binder_user_error("%d:%d got transaction with out-of-order buffer fixup\\n",\n\\n\\t\\t\\t\\t  proc->pid, thread->pid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^