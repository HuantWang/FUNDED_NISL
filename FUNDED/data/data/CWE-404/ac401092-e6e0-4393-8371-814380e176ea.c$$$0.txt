-----label-----
0
-----code-----
const struct user_regset_view *task_user_regset_view(struct task_struct *task)
{
#ifdef CONFIG_32BIT
	return &user_mips_view;
#else
#ifdef CONFIG_MIPS32_O32
	if (test_tsk_thread_flag(task, TIF_32BIT_REGS))
		return &user_mips_view;
#endif
#ifdef CONFIG_MIPS32_N32
	if (test_tsk_thread_flag(task, TIF_32BIT_ADDR))
		return &user_mipsn32_view;
#endif
	return &user_mips64_view;
#endif
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
15,16
16,17
-----nextToken-----
3,5,6,9,11,12,17
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
const struct user_regset_view *task_user_regset_view(struct task_struct *task){#ifdef CONFIG_32BIT	return &user_mips_view;#else#ifdef CONFIG_MIPS32_O32	if (test_tsk_thread_flag(task, TIF_32BIT_REGS))		return &user_mips_view;#endif#ifdef CONFIG_MIPS32_N32	if (test_tsk_thread_flag(task, TIF_32BIT_ADDR))		return &user_mipsn32_view;#endif	return &user_mips64_view;#endif}
const struct user_regset_view
user_regset_view
*task_user_regset_view(struct task_struct *task)
*
task_user_regset_view
struct task_struct *task
struct task_struct
task_struct
*task
*
task
{#ifdef CONFIG_32BIT	return &user_mips_view;#else#ifdef CONFIG_MIPS32_O32	if (test_tsk_thread_flag(task, TIF_32BIT_REGS))		return &user_mips_view;#endif#ifdef CONFIG_MIPS32_N32	if (test_tsk_thread_flag(task, TIF_32BIT_ADDR))		return &user_mipsn32_view;#endif	return &user_mips64_view;#endif}
return &user_mips64_view;
&user_mips64_view
user_mips64_view
user_mips64_view
-----joern-----
(4,1,0)
(3,0,0)
(2,3,0)
(1,3,0)
(2,3,1)
(3,1,1)
(1,4,1)
(2,3,2)
-----------------------------------
(0,)
(1,&user_mips_view)
(2,RET)
(3,return &user_mips_view;)
(4,user_mips_view)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^