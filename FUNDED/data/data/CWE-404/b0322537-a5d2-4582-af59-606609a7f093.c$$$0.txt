-----label-----
1
-----code-----
static int
type42_finish(i_ctx_t *i_ctx_p, int (*cont) (gs_state *))
{
    os_ptr op = osp;
    gs_font *pfont;
    gs_font_type42 *pfont42;
    int code;
    gs_text_enum_t *penum = op_show_find(i_ctx_p);
    double sbxy[2];
    gs_point sbpt;
    gs_point *psbpt = 0;
    os_ptr opc = op;
    uint glyph_index;

    if (!r_has_type(op - 3, t_dictionary)) {
	check_op(6);
	code = num_params(op, 2, sbxy);
	if (code < 0)
	    return code;
	sbpt.x = sbxy[0];
	sbpt.y = sbxy[1];
	psbpt = &sbpt;
	opc -= 2;
    }
    check_type(*opc, t_integer);
    code = font_param(opc - 3, &pfont);
    if (code < 0)
	return code;
    if (penum == 0 || (pfont->FontType != ft_TrueType &&
		       pfont->FontType != ft_CID_TrueType)
	)
	return_error(e_undefined);
    pfont42 = (gs_font_type42 *)pfont;

    if (!i_ctx_p->RenderTTNotdef) {
	if (r_has_type(op - 1, t_name)) {
	    ref gref;

	    name_string_ref(imemory, op - 1, &gref);

	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||
		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {
		pop((psbpt == 0 ? 4 : 6));
		return (*cont)(igs);
	    }
	}
    }
    glyph_index = (uint)opc->value.intval;
    if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)
	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);
    /*
     * We have to disregard penum->pis and penum->path, and render to
     * the current gstate and path.  This is a design bug that we will
     * have to address someday!
     */
    code = gs_type42_append(glyph_index, igs,
			    igs->path, penum, pfont,
			    (penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0);
    if (code < 0)
	return code;
    pop((psbpt == 0 ? 4 : 6));
    return (*cont)(igs);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
23,42
23,43
23,44
23,45
23,46
24,25
25,26
25,27
26,27
28,29
28,30
30,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
82,84
82,85
85,86
87,88
88,89
88,90
89,90
91,92
91,93
93,94
94,95
96,97
97,98
97,99
98,99
100,101
102,103
102,104
103,104
104,105
104,106
104,107
105,106
107,108
107,109
108,109
111,112
113,114
113,115
113,116
113,117
113,118
113,119
113,120
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
123,125
123,126
123,127
124,125
126,127
129,130
131,132
131,133
132,133
132,134
133,134
136,137
137,138
139,140
140,141
140,142
141,142
141,143
142,143
145,146
145,147
146,147
149,150
150,151
150,152
151,152
151,153
152,153
155,156
155,157
156,157
159,160
160,161
160,162
161,162
163,164
164,165
166,167
167,168
167,169
168,169
171,172
172,173
172,174
172,175
173,174
175,176
176,177
178,179
180,181
181,182
181,183
182,183
184,185
184,186
184,187
185,186
187,188
187,189
188,189
191,192
192,193
194,195
194,196
195,196
195,197
196,197
199,200
200,201
202,203
202,204
203,204
203,205
204,205
204,206
205,206
208,209
209,210
209,211
210,211
210,212
211,212
211,213
212,213
215,216
217,218
217,219
218,219
218,220
219,220
222,223
224,225
225,226
225,227
226,227
228,229
229,230
231,232
232,233
232,234
233,234
235,236
235,237
236,237
236,238
237,238
239,240
241,242
243,244
243,245
244,245
245,246
245,247
246,247
249,250
250,251
250,252
251,252
251,253
251,254
252,253
254,255
254,256
255,256
258,259
260,261
260,262
260,263
261,262
262,263
262,264
263,264
265,266
267,268
268,269
268,270
268,271
268,272
269,270
271,272
273,274
273,275
274,275
277,278
278,279
280,281
280,282
281,282
281,283
282,283
283,284
283,285
284,285
284,286
285,286
285,287
286,287
286,288
287,288
292,293
292,294
293,294
293,295
293,296
293,297
294,295
296,297
296,298
297,298
297,299
299,300
301,302
301,303
302,303
302,304
303,304
310,311
311,312
311,313
312,313
312,314
313,314
313,315
314,315
314,316
315,316
320,321
320,322
321,322
321,323
321,324
321,325
322,323
324,325
324,326
325,326
325,327
327,328
329,330
329,331
330,331
330,332
331,332
338,339
338,340
339,340
340,341
340,342
341,342
343,344
344,345
344,346
344,347
345,346
345,347
346,347
351,352
352,353
352,354
353,354
354,355
355,356
357,358
359,360
360,361
360,362
361,362
363,364
363,365
364,365
364,366
365,366
368,369
368,370
369,370
369,371
370,371
374,375
374,376
375,376
375,377
376,377
376,378
377,378
377,379
378,379
380,381
383,384
383,385
384,385
384,386
385,386
389,390
390,391
390,392
391,392
393,394
393,395
393,396
394,395
396,397
398,399
400,401
401,402
401,403
402,403
404,405
404,406
404,407
404,408
404,409
404,410
404,411
405,406
407,408
409,410
411,412
411,413
412,413
415,416
417,418
419,420
419,421
420,421
421,422
421,423
422,423
422,424
423,424
423,425
424,425
428,429
431,432
431,433
432,433
432,434
433,434
436,437
437,438
439,440
440,441
440,442
441,442
443,444
444,445
444,446
444,447
445,446
445,447
446,447
451,452
452,453
452,454
453,454
454,455
455,456
457,458
-----nextToken-----
2,4,7,9,10,12,15,16,19,21,22,27,29,32,36,38,39,43,45,46,49,51,55,57,58,62,64,67,69,71,75,77,81,83,84,86,90,92,95,99,101,106,109,110,112,117,118,122,125,127,128,130,134,135,138,143,144,147,148,153,154,157,158,162,165,169,170,174,177,179,183,186,189,190,193,197,198,201,206,207,213,214,216,220,221,223,227,230,234,238,240,242,247,248,253,256,257,259,264,266,270,272,275,276,279,288,289,290,291,295,298,300,304,305,306,307,308,309,316,317,318,319,323,326,328,332,333,334,335,336,337,342,347,348,349,350,356,358,362,366,367,371,372,373,379,381,382,386,387,388,392,395,397,399,403,406,408,410,413,414,416,418,425,426,427,429,430,434,435,438,442,447,448,449,450,456,458
-----computeFrom-----
107,108
107,109
120,121
120,122
132,133
132,134
140,141
140,142
150,151
150,152
160,161
160,162
167,168
167,169
181,182
181,183
187,188
187,189
195,196
195,197
203,204
203,205
204,205
204,206
209,210
209,211
210,211
210,212
217,218
217,219
232,233
232,234
254,255
254,256
273,274
273,275
281,282
281,283
283,284
283,285
284,285
284,286
292,293
292,294
311,312
311,313
312,313
312,314
320,321
320,322
345,346
345,347
360,361
360,362
375,376
375,377
390,391
390,392
401,402
401,403
419,420
419,421
421,422
421,423
432,433
432,434
445,446
445,447
-----guardedBy-----
134,138
197,201
386,397
434,438
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static inttype42_finish(i_ctx_t *i_ctx_p, int (*cont) (gs_state *)){    os_ptr op = osp;    gs_font *pfont;    gs_font_type42 *pfont42;    int code;    gs_text_enum_t *penum = op_show_find(i_ctx_p);    double sbxy[2];    gs_point sbpt;    gs_point *psbpt = 0;    os_ptr opc = op;    uint glyph_index;    if (!r_has_type(op - 3, t_dictionary)) {	check_op(6);	code = num_params(op, 2, sbxy);	if (code < 0)	    return code;	sbpt.x = sbxy[0];	sbpt.y = sbxy[1];	psbpt = &sbpt;	opc -= 2;    }    check_type(*opc, t_integer);    code = font_param(opc - 3, &pfont);    if (code < 0)	return code;    if (penum == 0 || (pfont->FontType != ft_TrueType &&		       pfont->FontType != ft_CID_TrueType)	)	return_error(e_undefined);    pfont42 = (gs_font_type42 *)pfont;    if (!i_ctx_p->RenderTTNotdef) {	if (r_has_type(op - 1, t_name)) {	    ref gref;	    name_string_ref(imemory, op - 1, &gref);	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }	}    }    glyph_index = (uint)opc->value.intval;    if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);    /*     * We have to disregard penum->pis and penum->path, and render to     * the current gstate and path.  This is a design bug that we will     * have to address someday!     */    code = gs_type42_append(glyph_index, igs,			    igs->path, penum, pfont,			    (penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0);    if (code < 0)	return code;    pop((psbpt == 0 ? 4 : 6));    return (*cont)(igs);}
static int
type42_finish(i_ctx_t *i_ctx_p, int (*cont) (gs_state *))
type42_finish
i_ctx_t *i_ctx_p
i_ctx_t
i_ctx_t
*i_ctx_p
*
i_ctx_p
int (*cont) (gs_state *)
int
(*cont) (gs_state *)
*cont
*
cont
gs_state *
gs_state
gs_state
*
*

{    os_ptr op = osp;    gs_font *pfont;    gs_font_type42 *pfont42;    int code;    gs_text_enum_t *penum = op_show_find(i_ctx_p);    double sbxy[2];    gs_point sbpt;    gs_point *psbpt = 0;    os_ptr opc = op;    uint glyph_index;    if (!r_has_type(op - 3, t_dictionary)) {	check_op(6);	code = num_params(op, 2, sbxy);	if (code < 0)	    return code;	sbpt.x = sbxy[0];	sbpt.y = sbxy[1];	psbpt = &sbpt;	opc -= 2;    }    check_type(*opc, t_integer);    code = font_param(opc - 3, &pfont);    if (code < 0)	return code;    if (penum == 0 || (pfont->FontType != ft_TrueType &&		       pfont->FontType != ft_CID_TrueType)	)	return_error(e_undefined);    pfont42 = (gs_font_type42 *)pfont;    if (!i_ctx_p->RenderTTNotdef) {	if (r_has_type(op - 1, t_name)) {	    ref gref;	    name_string_ref(imemory, op - 1, &gref);	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }	}    }    glyph_index = (uint)opc->value.intval;    if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);    /*     * We have to disregard penum->pis and penum->path, and render to     * the current gstate and path.  This is a design bug that we will     * have to address someday!     */    code = gs_type42_append(glyph_index, igs,			    igs->path, penum, pfont,			    (penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0);    if (code < 0)	return code;    pop((psbpt == 0 ? 4 : 6));    return (*cont)(igs);}
os_ptr op = osp;
os_ptr op = osp;
os_ptr
os_ptr
op = osp
op
= osp
osp
osp
gs_font *pfont;
gs_font *pfont;
gs_font
gs_font
*pfont
*
pfont
gs_font_type42 *pfont42;
gs_font_type42 *pfont42;
gs_font_type42
gs_font_type42
*pfont42
*
pfont42
int code;
int code;
int
code
code
gs_text_enum_t *penum = op_show_find(i_ctx_p);
gs_text_enum_t *penum = op_show_find(i_ctx_p);
gs_text_enum_t
gs_text_enum_t
*penum = op_show_find(i_ctx_p)
*
penum
= op_show_find(i_ctx_p)
op_show_find(i_ctx_p)
op_show_find
op_show_find
i_ctx_p
i_ctx_p
double sbxy[2];
double sbxy[2];
double
sbxy[2]
sbxy
[2]
2
gs_point sbpt;
gs_point sbpt;
gs_point
gs_point
sbpt
sbpt
gs_point *psbpt = 0;
gs_point *psbpt = 0;
gs_point
gs_point
*psbpt = 0
*
psbpt
= 0
0
os_ptr opc = op;
os_ptr opc = op;
os_ptr
os_ptr
opc = op
opc
= op
op
op
uint glyph_index;
uint glyph_index;
uint
uint
glyph_index
glyph_index
if (!r_has_type(op - 3, t_dictionary)) {	check_op(6);	code = num_params(op, 2, sbxy);	if (code < 0)	    return code;	sbpt.x = sbxy[0];	sbpt.y = sbxy[1];	psbpt = &sbpt;	opc -= 2;    }
!r_has_type(op - 3, t_dictionary)
r_has_type(op - 3, t_dictionary)
r_has_type
r_has_type
op - 3
op
op
3
t_dictionary
t_dictionary
{	check_op(6);	code = num_params(op, 2, sbxy);	if (code < 0)	    return code;	sbpt.x = sbxy[0];	sbpt.y = sbxy[1];	psbpt = &sbpt;	opc -= 2;    }
check_op(6);
check_op(6)
check_op
check_op
6
code = num_params(op, 2, sbxy);
code = num_params(op, 2, sbxy)
code
code
num_params(op, 2, sbxy)
num_params
num_params
op
op
2
sbxy
sbxy
if (code < 0)	    return code;
code < 0
code
code
0
return code;
code
code
sbpt.x = sbxy[0];
sbpt.x = sbxy[0]
sbpt.x
sbpt
sbpt
x
sbxy[0]
sbxy
sbxy
0
sbpt.y = sbxy[1];
sbpt.y = sbxy[1]
sbpt.y
sbpt
sbpt
y
sbxy[1]
sbxy
sbxy
1
psbpt = &sbpt;
psbpt = &sbpt
psbpt
psbpt
&sbpt
sbpt
sbpt
opc -= 2;
opc -= 2
opc
opc
2
check_type(*opc, t_integer);
check_type(*opc, t_integer)
check_type
check_type
*opc
opc
opc
t_integer
t_integer
code = font_param(opc - 3, &pfont);
code = font_param(opc - 3, &pfont)
code
code
font_param(opc - 3, &pfont)
font_param
font_param
opc - 3
opc
opc
3
&pfont
pfont
pfont
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
if (penum == 0 || (pfont->FontType != ft_TrueType &&		       pfont->FontType != ft_CID_TrueType)	)	return_error(e_undefined);
penum == 0 || (pfont->FontType != ft_TrueType &&		       pfont->FontType != ft_CID_TrueType)
penum == 0
penum
penum
0
(pfont->FontType != ft_TrueType &&		       pfont->FontType != ft_CID_TrueType)
pfont->FontType != ft_TrueType &&		       pfont->FontType != ft_CID_TrueType
pfont->FontType != ft_TrueType
pfont->FontType
pfont
pfont
FontType
ft_TrueType
ft_TrueType
pfont->FontType != ft_CID_TrueType
pfont->FontType
pfont
pfont
FontType
ft_CID_TrueType
ft_CID_TrueType
return_error(e_undefined);
return_error(e_undefined);
return_error
return_error
(e_undefined)
e_undefined
e_undefined
pfont42 = (gs_font_type42 *)pfont;
pfont42 = (gs_font_type42 *)pfont
pfont42
pfont42
(gs_font_type42 *)pfont
gs_font_type42 *
gs_font_type42
gs_font_type42
*
*
pfont
pfont
if (!i_ctx_p->RenderTTNotdef) {	if (r_has_type(op - 1, t_name)) {	    ref gref;	    name_string_ref(imemory, op - 1, &gref);	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }	}    }
!i_ctx_p->RenderTTNotdef
i_ctx_p->RenderTTNotdef
i_ctx_p
i_ctx_p
RenderTTNotdef
{	if (r_has_type(op - 1, t_name)) {	    ref gref;	    name_string_ref(imemory, op - 1, &gref);	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }	}    }
if (r_has_type(op - 1, t_name)) {	    ref gref;	    name_string_ref(imemory, op - 1, &gref);	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }	}
r_has_type(op - 1, t_name)
r_has_type
r_has_type
op - 1
op
op
1
t_name
t_name
{	    ref gref;	    name_string_ref(imemory, op - 1, &gref);	    if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }	}
ref gref;
ref gref;
ref
ref
gref
gref
name_string_ref(imemory, op - 1, &gref);
name_string_ref(imemory, op - 1, &gref)
name_string_ref
name_string_ref
imemory
imemory
op - 1
op
op
1
&gref
gref
gref
if ((gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)) {		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }
(gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0) ||		(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)
(gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0)
gref.tas.rsize == 7 && strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0
gref.tas.rsize == 7
gref.tas.rsize
gref.tas
gref
gref
tas
rsize
7
strncmp((const char *)gref.value.const_bytes, ".notdef", 7) == 0
strncmp((const char *)gref.value.const_bytes, ".notdef", 7)
strncmp
strncmp
(const char *)gref.value.const_bytes
const char *
const char
*
*
gref.value.const_bytes
gref.value
gref
gref
value
const_bytes
".notdef"
7
0
(gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0)
gref.tas.rsize > 9 && strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0
gref.tas.rsize > 9
gref.tas.rsize
gref.tas
gref
gref
tas
rsize
9
strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10) == 0
strncmp((const char *)gref.value.const_bytes, ".notdef~GS", 10)
strncmp
strncmp
(const char *)gref.value.const_bytes
const char *
const char
*
*
gref.value.const_bytes
gref.value
gref
gref
value
const_bytes
".notdef~GS"
10
0
{		pop((psbpt == 0 ? 4 : 6));		return (*cont)(igs);	    }
pop((psbpt == 0 ? 4 : 6));
pop((psbpt == 0 ? 4 : 6))
pop
pop
(psbpt == 0 ? 4 : 6)
psbpt == 0 ? 4 : 6
psbpt == 0
psbpt
psbpt
0
4
6
return (*cont)(igs);
(*cont)(igs)
(*cont)
*cont
cont
cont
igs
igs
glyph_index = (uint)opc->value.intval;
glyph_index = (uint)opc->value.intval
glyph_index
glyph_index
(uint)opc->value.intval
uint
uint
uint

opc->value.intval
opc->value
opc
opc
value
intval
if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);
gs_rootfont(igs)->WMode && pfont42->data.gsub_size
gs_rootfont(igs)->WMode
gs_rootfont(igs)
gs_rootfont
gs_rootfont
igs
igs
WMode
pfont42->data.gsub_size
pfont42->data
pfont42
pfont42
data
gsub_size
glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);
glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
glyph_index
glyph_index
gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
gs_type42_substitute_glyph_index_vertical
gs_type42_substitute_glyph_index_vertical
pfont42
pfont42
glyph_index
glyph_index
code = gs_type42_append(glyph_index, igs,			    igs->path, penum, pfont,			    (penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0);
code = gs_type42_append(glyph_index, igs,			    igs->path, penum, pfont,			    (penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0)
code
code
gs_type42_append(glyph_index, igs,			    igs->path, penum, pfont,			    (penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0)
gs_type42_append
gs_type42_append
glyph_index
glyph_index
igs
igs
igs->path
igs
igs
path
penum
penum
pfont
pfont
(penum->text.operation & TEXT_DO_ANY_CHARPATH) != 0
(penum->text.operation & TEXT_DO_ANY_CHARPATH)
penum->text.operation & TEXT_DO_ANY_CHARPATH
penum->text.operation
penum->text
penum
penum
text
operation
TEXT_DO_ANY_CHARPATH
TEXT_DO_ANY_CHARPATH
0
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
pop((psbpt == 0 ? 4 : 6));
pop((psbpt == 0 ? 4 : 6))
pop
pop
(psbpt == 0 ? 4 : 6)
psbpt == 0 ? 4 : 6
psbpt == 0
psbpt
psbpt
0
4
6
return (*cont)(igs);
(*cont)(igs)
(*cont)
*cont
cont
cont
igs
igs
-----joern-----
(45,129,0)
(118,206,0)
(13,28,0)
(110,142,0)
(49,203,0)
(92,106,0)
(77,191,0)
(243,240,0)
(235,37,0)
(81,2,0)
(88,3,0)
(230,95,0)
(206,95,0)
(102,67,0)
(228,155,0)
(72,142,0)
(118,106,0)
(108,215,0)
(40,209,0)
(92,206,0)
(75,240,0)
(139,205,0)
(66,95,0)
(176,124,0)
(23,146,0)
(82,7,0)
(69,221,0)
(195,181,0)
(52,121,0)
(42,71,0)
(202,231,0)
(76,121,0)
(240,106,0)
(175,95,0)
(107,100,0)
(240,75,0)
(99,118,0)
(69,64,0)
(122,206,0)
(86,155,0)
(91,7,0)
(61,0,0)
(26,233,0)
(242,95,0)
(220,57,0)
(22,84,0)
(119,211,0)
(191,2,0)
(24,107,0)
(163,16,0)
(67,102,0)
(5,231,0)
(84,67,0)
(11,211,0)
(84,100,0)
(82,132,0)
(227,92,0)
(123,95,0)
(41,26,0)
(127,95,0)
(117,75,0)
(113,62,0)
(223,95,0)
(112,75,0)
(225,19,0)
(155,83,0)
(101,145,0)
(150,124,0)
(20,131,0)
(36,125,0)
(76,102,0)
(7,95,0)
(11,70,0)
(182,203,0)
(82,34,0)
(149,1,0)
(131,132,0)
(70,11,0)
(163,91,0)
(106,206,0)
(158,107,0)
(73,174,0)
(231,126,0)
(126,103,0)
(125,7,0)
(17,92,0)
(204,191,0)
(138,62,0)
(28,129,0)
(90,11,0)
(168,221,0)
(47,5,0)
(88,132,0)
(120,99,0)
(79,34,0)
(54,70,0)
(152,21,0)
(126,181,0)
(132,95,0)
(161,79,0)
(33,25,0)
(103,126,0)
(174,168,0)
(112,98,0)
(216,224,0)
(16,95,0)
(111,240,0)
(209,95,0)
(71,157,0)
(0,3,0)
(60,128,0)
(144,7,0)
(0,27,0)
(128,82,0)
(98,112,0)
(44,221,0)
(181,126,0)
(94,154,0)
(224,211,0)
(70,54,0)
(6,233,0)
(239,177,0)
(65,224,0)
(141,69,0)
(226,131,0)
(215,66,0)
(213,101,0)
(240,206,0)
(121,52,0)
(203,95,0)
(56,66,0)
(38,25,0)
(142,146,0)
(198,28,0)
(63,26,0)
(89,21,0)
(173,40,0)
(206,233,0)
(115,157,0)
(7,82,0)
(208,215,0)
(78,64,0)
(168,174,0)
(207,206,0)
(121,76,0)
(51,2,0)
(217,145,0)
(233,95,0)
(66,112,0)
(159,1,0)
(83,155,0)
(121,93,0)
(50,221,0)
(189,180,0)
(130,30,0)
(200,156,0)
(32,5,0)
(154,177,0)
(57,132,0)
(242,180,0)
(68,129,0)
(71,42,0)
(190,236,0)
(124,44,0)
(164,180,0)
(197,151,0)
(129,28,0)
(145,168,0)
(215,160,0)
(25,233,0)
(156,37,0)
(82,128,0)
(99,120,0)
(205,139,0)
(85,0,0)
(139,21,0)
(29,95,0)
(198,137,0)
(131,103,0)
(55,146,0)
(135,95,0)
(209,40,0)
(8,30,0)
(93,222,0)
(162,233,0)
(1,180,0)
(53,125,0)
(101,185,0)
(166,222,0)
(180,242,0)
(186,145,0)
(178,95,0)
(92,17,0)
(198,62,0)
(203,99,0)
(103,131,0)
(83,185,0)
(147,95,0)
(136,93,0)
(199,87,0)
(67,84,0)
(241,118,0)
(48,165,0)
(155,142,0)
(177,25,0)
(12,143,0)
(40,173,0)
(96,118,0)
(163,49,0)
(134,95,0)
(205,233,0)
(43,82,0)
(2,233,0)
(18,181,0)
(116,139,0)
(15,160,0)
(31,156,0)
(99,203,0)
(1,69,0)
(126,231,0)
(171,26,0)
(80,132,0)
(14,25,0)
(153,95,0)
(172,40,0)
(229,209,0)
(184,174,0)
(192,95,0)
(211,224,0)
(142,69,0)
(177,221,0)
(42,37,0)
(201,91,0)
(137,198,0)
(191,77,0)
(170,82,0)
(70,19,0)
(109,154,0)
(163,87,0)
(16,145,0)
(37,42,0)
(82,66,0)
(34,79,0)
(87,177,0)
(179,169,0)
(19,62,0)
(219,148,0)
(114,165,0)
(62,19,0)
(218,116,0)
(165,203,0)
(62,198,0)
(106,221,0)
(67,54,0)
(112,66,0)
(28,198,0)
(196,88,0)
(93,121,0)
(100,107,0)
(30,44,0)
(139,116,0)
(140,205,0)
(2,191,0)
(4,18,0)
(238,120,0)
(222,93,0)
(234,41,0)
(64,69,0)
(214,57,0)
(74,205,0)
(236,221,0)
(75,112,0)
(100,84,0)
(46,106,0)
(19,70,0)
(232,100,0)
(17,95,0)
(27,0,0)
(163,101,0)
(167,139,0)
(82,160,0)
(1,146,0)
(160,215,0)
(26,41,0)
(58,71,0)
(142,155,0)
(181,18,0)
(215,209,0)
(157,71,0)
(102,76,0)
(35,82,0)
(210,128,0)
(211,11,0)
(132,88,0)
(212,102,0)
(101,124,0)
(193,49,0)
(146,95,0)
(9,76,0)
(10,222,0)
(16,124,0)
(39,18,0)
(169,16,0)
(194,213,0)
(34,82,0)
(231,5,0)
(187,76,0)
(54,67,0)
(44,30,0)
(133,82,0)
(118,99,0)
(183,95,0)
(37,156,0)
(104,95,0)
(180,1,0)
(237,95,0)
(148,79,0)
(79,148,0)
(25,177,0)
(105,106,0)
(156,209,0)
(59,95,0)
(148,57,0)
(188,34,0)
(97,17,0)
(57,148,0)
(181,195,1)
(27,0,1)
(231,202,1)
(56,41,1)
(79,148,1)
(26,233,1)
(108,208,1)
(196,80,1)
(155,86,1)
(203,99,1)
(205,140,1)
(187,9,1)
(46,69,1)
(9,121,1)
(17,92,1)
(37,235,1)
(67,84,1)
(184,145,1)
(78,141,1)
(57,132,1)
(122,146,1)
(31,71,1)
(92,106,1)
(86,142,1)
(1,69,1)
(32,181,1)
(157,115,1)
(65,216,1)
(73,184,1)
(102,212,1)
(94,109,1)
(191,204,1)
(189,1,1)
(82,66,1)
(199,154,1)
(232,107,1)
(82,34,1)
(43,133,1)
(155,142,1)
(40,173,1)
(4,39,1)
(105,46,1)
(182,17,1)
(138,113,1)
(71,58,1)
(126,231,1)
(142,146,1)
(240,106,1)
(144,160,1)
(188,79,1)
(91,7,1)
(97,92,1)
(231,5,1)
(8,130,1)
(37,156,1)
(111,56,1)
(224,65,1)
(129,45,1)
(103,126,1)
(222,166,1)
(235,156,1)
(164,1,1)
(93,136,1)
(87,177,1)
(132,88,1)
(39,131,1)
(30,8,1)
(139,205,1)
(194,83,1)
(215,108,1)
(140,74,1)
(45,68,1)
(85,61,1)
(214,220,1)
(156,200,1)
(87,199,1)
(172,229,1)
(106,206,1)
(141,44,1)
(168,174,1)
(217,186,1)
(60,35,1)
(57,214,1)
(195,18,1)
(82,128,1)
(28,13,1)
(101,213,1)
(180,189,1)
(124,176,1)
(229,151,1)
(150,168,1)
(133,128,1)
(211,119,1)
(193,165,1)
(145,217,1)
(20,165,1)
(96,182,1)
(202,5,1)
(110,54,1)
(227,77,1)
(22,100,1)
(128,210,1)
(205,233,1)
(1,149,1)
(206,233,1)
(142,72,1)
(179,242,1)
(54,67,1)
(209,40,1)
(75,117,1)
(15,42,1)
(35,170,1)
(125,36,1)
(115,66,1)
(180,1,1)
(156,209,1)
(229,103,1)
(99,118,1)
(88,3,1)
(234,26,1)
(26,171,1)
(131,132,1)
(118,241,1)
(74,167,1)
(215,209,1)
(17,97,1)
(28,129,1)
(163,16,1)
(158,70,1)
(70,11,1)
(154,177,1)
(155,228,1)
(118,106,1)
(180,164,1)
(42,37,1)
(36,53,1)
(126,181,1)
(92,206,1)
(109,177,1)
(170,144,1)
(76,121,1)
(201,125,1)
(10,84,1)
(112,98,1)
(49,193,1)
(75,240,1)
(186,154,1)
(206,207,1)
(92,227,1)
(190,77,1)
(38,239,1)
(42,71,1)
(70,19,1)
(80,233,1)
(191,2,1)
(54,70,1)
(225,62,1)
(49,203,1)
(174,73,1)
(69,64,1)
(103,131,1)
(63,27,1)
(99,120,1)
(100,232,1)
(0,3,1)
(102,76,1)
(163,101,1)
(162,6,1)
(82,160,1)
(207,122,1)
(243,111,1)
(51,81,1)
(165,48,1)
(11,90,1)
(121,52,1)
(113,198,1)
(131,226,1)
(210,60,1)
(18,4,1)
(19,225,1)
(77,191,1)
(34,188,1)
(219,57,1)
(216,139,1)
(91,201,1)
(118,206,1)
(213,194,1)
(107,24,1)
(47,32,1)
(148,57,1)
(197,103,1)
(53,7,1)
(142,69,1)
(176,150,1)
(93,222,1)
(66,112,1)
(171,63,1)
(83,155,1)
(64,78,1)
(161,148,1)
(139,116,1)
(233,162,1)
(117,240,1)
(163,91,1)
(215,66,1)
(34,79,1)
(181,18,1)
(163,49,1)
(148,219,1)
(1,146,1)
(227,106,1)
(106,105,1)
(116,218,1)
(239,236,1)
(204,2,1)
(241,96,1)
(240,206,1)
(211,224,1)
(159,125,1)
(62,138,1)
(48,114,1)
(62,198,1)
(198,28,1)
(84,100,1)
(119,224,1)
(71,157,1)
(25,233,1)
(2,51,1)
(212,76,1)
(41,26,1)
(23,132,1)
(81,206,1)
(7,82,1)
(236,190,1)
(228,142,1)
(146,55,1)
(90,211,1)
(101,124,1)
(198,137,1)
(58,157,1)
(200,31,1)
(25,33,1)
(177,25,1)
(125,7,1)
(5,47,1)
(2,233,1)
(100,107,1)
(56,27,1)
(19,62,1)
(55,23,1)
(120,238,1)
(40,172,1)
(76,187,1)
(242,180,1)
(72,110,1)
(151,197,1)
(11,211,1)
(61,209,1)
(218,205,1)
(167,41,1)
(208,15,1)
(130,124,1)
(0,85,1)
(121,93,1)
(44,30,1)
(84,22,1)
(112,75,1)
(226,20,1)
(154,94,1)
(16,145,1)
(16,124,1)
(24,158,1)
(169,179,1)
(160,215,1)
(136,222,1)
(149,159,1)
(165,203,1)
(88,196,1)
(163,87,1)
(67,102,1)
(144,42,1)
(79,161,1)
(13,129,1)
(68,11,1)
(33,14,1)
(56,54,1)
(166,10,1)
(41,234,1)
(114,203,1)
(14,38,1)
(220,43,1)
(238,118,1)
(240,243,1)
(82,132,1)
(16,169,1)
(101,145,1)
(219,54,2)
(66,41,2)
(7,27,2)
(169,125,2)
(242,180,2)
(118,106,2)
(86,142,2)
(198,11,2)
(37,71,2)
(138,11,2)
(64,154,2)
(60,41,2)
(54,70,2)
(128,27,2)
(159,125,2)
(75,54,2)
(194,54,2)
(111,41,2)
(31,71,2)
(156,71,2)
(56,41,2)
(76,121,2)
(184,154,2)
(20,165,2)
(17,92,2)
(108,42,2)
(121,52,2)
(34,27,2)
(30,154,2)
(165,77,2)
(74,41,2)
(220,41,2)
(203,99,2)
(163,91,2)
(36,54,2)
(142,69,2)
(158,70,2)
(188,54,2)
(40,173,2)
(0,165,2)
(26,27,2)
(16,145,2)
(128,54,2)
(219,27,2)
(232,70,2)
(121,84,2)
(163,101,2)
(126,181,2)
(25,77,2)
(41,27,2)
(75,27,2)
(241,154,2)
(191,2,2)
(82,132,2)
(49,165,2)
(144,54,2)
(75,41,2)
(180,125,2)
(13,11,2)
(193,165,2)
(44,30,2)
(124,154,2)
(67,102,2)
(160,215,2)
(240,106,2)
(18,131,2)
(66,54,2)
(132,88,2)
(239,77,2)
(149,125,2)
(186,154,2)
(24,70,2)
(39,131,2)
(34,41,2)
(211,224,2)
(69,64,2)
(220,54,2)
(54,41,2)
(170,54,2)
(103,126,2)
(37,156,2)
(209,165,2)
(8,154,2)
(58,54,2)
(33,77,2)
(35,27,2)
(163,87,2)
(190,77,2)
(240,41,2)
(200,71,2)
(54,67,2)
(117,27,2)
(60,27,2)
(139,205,2)
(34,54,2)
(205,41,2)
(141,154,2)
(49,203,2)
(203,77,2)
(165,154,2)
(97,77,2)
(92,77,2)
(243,27,2)
(155,142,2)
(114,77,2)
(168,174,2)
(225,11,2)
(62,198,2)
(26,233,2)
(88,3,2)
(238,154,2)
(112,54,2)
(136,84,2)
(208,42,2)
(171,27,2)
(198,28,2)
(78,154,2)
(120,154,2)
(10,84,2)
(79,54,2)
(144,41,2)
(154,177,2)
(163,16,2)
(2,233,2)
(62,11,2)
(119,41,2)
(11,41,2)
(126,231,2)
(205,233,2)
(209,40,2)
(35,41,2)
(97,154,2)
(131,132,2)
(41,26,2)
(101,145,2)
(87,177,2)
(84,100,2)
(131,165,2)
(28,129,2)
(210,27,2)
(106,154,2)
(160,42,2)
(154,77,2)
(101,124,2)
(106,206,2)
(16,125,2)
(129,11,2)
(114,154,2)
(7,41,2)
(28,11,2)
(240,206,2)
(161,27,2)
(112,27,2)
(125,7,2)
(165,203,2)
(128,41,2)
(82,34,2)
(125,41,2)
(116,41,2)
(43,41,2)
(57,41,2)
(70,19,2)
(133,41,2)
(82,41,2)
(84,70,2)
(4,131,2)
(215,209,2)
(56,54,2)
(148,41,2)
(42,54,2)
(195,131,2)
(242,125,2)
(99,118,2)
(215,66,2)
(110,54,2)
(198,137,2)
(174,154,2)
(243,41,2)
(235,71,2)
(96,77,2)
(203,154,2)
(181,131,2)
(57,132,2)
(182,154,2)
(201,125,2)
(212,84,2)
(48,154,2)
(170,41,2)
(75,240,2)
(70,11,2)
(105,154,2)
(19,62,2)
(156,209,2)
(240,27,2)
(182,77,2)
(115,41,2)
(229,165,2)
(177,25,2)
(5,181,2)
(103,131,2)
(66,112,2)
(140,41,2)
(215,42,2)
(148,57,2)
(82,66,2)
(71,41,2)
(243,54,2)
(133,54,2)
(66,27,2)
(133,27,2)
(112,41,2)
(164,1,2)
(170,27,2)
(139,41,2)
(57,54,2)
(155,54,2)
(234,27,2)
(206,233,2)
(92,106,2)
(17,154,2)
(1,125,2)
(163,49,2)
(0,3,2)
(107,70,2)
(113,11,2)
(36,27,2)
(65,41,2)
(144,27,2)
(117,41,2)
(83,155,2)
(172,165,2)
(48,77,2)
(19,11,2)
(142,54,2)
(220,27,2)
(56,27,2)
(231,181,2)
(63,27,2)
(7,82,2)
(157,41,2)
(228,142,2)
(68,11,2)
(214,41,2)
(71,27,2)
(148,27,2)
(71,54,2)
(32,181,2)
(94,77,2)
(42,27,2)
(125,27,2)
(90,41,2)
(188,41,2)
(91,125,2)
(139,116,2)
(42,37,2)
(216,41,2)
(93,222,2)
(77,191,2)
(111,27,2)
(100,70,2)
(214,54,2)
(9,84,2)
(92,206,2)
(79,41,2)
(60,54,2)
(43,54,2)
(241,77,2)
(101,54,2)
(112,98,2)
(187,84,2)
(102,76,2)
(79,148,2)
(226,165,2)
(82,54,2)
(145,154,2)
(109,77,2)
(148,54,2)
(16,124,2)
(219,41,2)
(38,77,2)
(120,77,2)
(91,7,2)
(125,54,2)
(238,77,2)
(17,77,2)
(58,41,2)
(96,154,2)
(83,54,2)
(36,41,2)
(99,77,2)
(210,54,2)
(67,84,2)
(161,54,2)
(218,41,2)
(92,154,2)
(1,146,2)
(157,27,2)
(82,27,2)
(82,128,2)
(25,233,2)
(166,84,2)
(53,54,2)
(76,84,2)
(231,5,2)
(15,42,2)
(11,211,2)
(99,120,2)
(46,154,2)
(168,154,2)
(70,41,2)
(151,103,2)
(34,79,2)
(45,11,2)
(188,27,2)
(197,103,2)
(217,154,2)
(44,154,2)
(176,154,2)
(240,54,2)
(67,70,2)
(211,41,2)
(181,18,2)
(177,77,2)
(102,84,2)
(236,77,2)
(72,54,2)
(27,165,2)
(199,154,2)
(53,41,2)
(100,107,2)
(61,165,2)
(42,41,2)
(40,165,2)
(79,27,2)
(115,54,2)
(69,154,2)
(210,41,2)
(93,84,2)
(99,154,2)
(150,154,2)
(189,1,2)
(142,146,2)
(87,154,2)
(157,54,2)
(117,54,2)
(227,154,2)
(43,27,2)
(213,54,2)
(180,1,2)
(227,77,2)
(118,154,2)
(222,84,2)
(167,41,2)
(7,54,2)
(73,154,2)
(121,93,2)
(27,0,2)
(22,70,2)
(112,75,2)
(224,41,2)
(202,181,2)
(57,27,2)
(85,165,2)
(14,77,2)
(42,71,2)
(214,27,2)
(1,69,2)
(47,181,2)
(35,54,2)
(71,157,2)
(179,125,2)
(103,165,2)
(118,77,2)
(53,27,2)
(118,206,2)
(161,41,2)
(58,27,2)
(82,160,2)
(115,27,2)
(130,154,2)
(111,54,2)
(126,131,2)
-----------------------------------
(0,i_ctx_p->RenderTTNotdef)
(1,psbpt == 0)
(2,op - 3)
(3,i_ctx_t *i_ctx_p)
(4,FontType)
(5,pfont->FontType)
(6,op)
(7,code = gs_type42_append(glyph_index, igs,\n\\n\\t\\t\\t    igs->path, penum, pfont,\n\\n\\t\\t\\t    (penum->text.operation & TEXT_DO_ANY_CHARPATH)
(8,1)
(9,".notdef~GS")
(10,gref)
(11,gref.tas.rsize == 7)
(12,if (r_has_type(op - 1, t_name)
(13,const_bytes)
(14,2)
(15,glyph_index)
(16,return (*cont)
(17,check_type(*opc, t_integer)
(18,pfont->FontType)
(19,strncmp((const char *)
(20,penum)
(21,)
(22,9)
(23,psbpt)
(24,tas)
(25,num_params(op, 2, sbxy)
(26,op - 1)
(27,!i_ctx_p->RenderTTNotdef)
(28,gref.value.const_bytes)
(29,opc)
(30,sbxy[1])
(31,pfont42)
(32,pfont)
(33,sbxy)
(34,(penum->text.operation & TEXT_DO_ANY_CHARPATH)
(35,igs)
(36,0)
(37,pfont42->data.gsub_size)
(38,op)
(39,pfont)
(40,(gs_font_type42 *)
(41,r_has_type(op - 1, t_name)
(42,gs_rootfont(igs)
(43,pfont)
(44,sbpt.y = sbxy[1])
(45,value)
(46,opc)
(47,FontType)
(48,0)
(49,return code;)
(50,if (code < 0)
(51,3)
(52,const char *)
(53,code)
(54,(gref.tas.rsize == 7 && strncmp((const char *)
(55,0)
(56,glyph_index)
(57,penum->text)
(58,WMode)
(59,pfont)
(60,igs)
(61,i_ctx_p)
(62,strncmp((const char *)
(63,op)
(64,&sbpt)
(65,tas)
(66,glyph_index = (uint)
(67,gref.tas.rsize > 9 && strncmp((const char *)
(68,gref)
(69,psbpt = &sbpt)
(70,gref.tas.rsize == 7 && strncmp((const char *)
(71,gs_rootfont(igs)
(72,0)
(73,0)
(74,op)
(75,opc->value.intval)
(76,strncmp((const char *)
(77,!r_has_type(op - 3, t_dictionary)
(78,sbpt)
(79,penum->text.operation & TEXT_DO_ANY_CHARPATH)
(80,penum)
(81,op)
(82,gs_type42_append(glyph_index, igs,\n\\n\\t\\t\\t    igs->path, penum, pfont,\n\\n\\t\\t\\t    (penum->text.operation & TEXT_DO_ANY_CHARPATH)
(83,pop((psbpt == 0 ? 4 : 6)
(84,gref.tas.rsize > 9)
(85,RenderTTNotdef)
(86,4)
(87,return code;)
(88,op_show_find(i_ctx_p)
(89,gref)
(90,7)
(91,return code;)
(92,*opc)
(93,gref.value.const_bytes)
(94,0)
(95,)
(96,opc)
(97,t_integer)
(98,uint)
(99,font_param(opc - 3, &pfont)
(100,gref.tas.rsize)
(101,return (*cont)
(102,strncmp((const char *)
(103,penum == 0 || (pfont->FontType != ft_TrueType &&\n\\n\\t\\t       pfont->FontType != ft_CID_TrueType)
(104,penum)
(105,2)
(106,opc -= 2)
(107,gref.tas)
(108,glyph_index)
(109,code)
(110,psbpt)
(111,opc)
(112,(uint)
(113,".notdef")
(114,code)
(115,igs)
(116,&gref)
(117,intval)
(118,opc - 3)
(119,rsize)
(120,&pfont)
(121,(const char *)
(122,opc)
(123,if (gs_rootfont(igs)
(124,sbpt.y)
(125,code < 0)
(126,pfont->FontType != ft_TrueType &&\n\\n\\t\\t       pfont->FontType != ft_CID_TrueType)
(127,psbpt)
(128,igs->path)
(129,gref.value)
(130,sbxy)
(131,penum == 0)
(132,*penum = op_show_find(i_ctx_p)
(133,penum)
(134,sbpt)
(135,if (!r_has_type(op - 3, t_dictionary)
(136,const_bytes)
(137,const char *)
(138,7)
(139,name_string_ref(imemory, op - 1, &gref)
(140,1)
(141,psbpt)
(142,psbpt == 0)
(143,)
(144,code)
(145,sbpt.x)
(146,*psbpt = 0)
(147,if (code < 0)
(148,penum->text.operation)
(149,0)
(150,sbpt)
(151,return_error(e_undefined)
(152,if ((gref.tas.rsize == 7 && strncmp((const char *)
(153,if (penum == 0 || (pfont->FontType != ft_TrueType &&\n\\n\\t\\t       pfont->FontType != ft_CID_TrueType)
(154,code < 0)
(155,psbpt == 0 ? 4 : 6)
(156,pfont42->data)
(157,gs_rootfont(igs)
(158,gref)
(159,psbpt)
(160,glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
(161,TEXT_DO_ANY_CHARPATH)
(162,osp)
(163,RET)
(164,4)
(165,code < 0)
(166,value)
(167,imemory)
(168,sbpt.x = sbxy[0])
(169,(*cont)
(170,glyph_index)
(171,1)
(172,pfont)
(173,gs_font_type42 *)
(174,sbxy[0])
(175,pfont42)
(176,y)
(177,code = num_params(op, 2, sbxy)
(178,sbxy)
(179,igs)
(180,psbpt == 0 ? 4 : 6)
(181,pfont->FontType != ft_TrueType)
(182,code)
(183,op)
(184,sbxy)
(185,)
(186,sbpt)
(187,10)
(188,0)
(189,6)
(190,6)
(191,r_has_type(op - 3, t_dictionary)
(192,if (!i_ctx_p->RenderTTNotdef)
(193,code)
(194,igs)
(195,ft_TrueType)
(196,i_ctx_p)
(197,e_undefined)
(198,(const char *)
(199,code)
(200,data)
(201,code)
(202,ft_CID_TrueType)
(203,code = font_param(opc - 3, &pfont)
(204,t_dictionary)
(205,op - 1)
(206,opc = op)
(207,op)
(208,pfont42)
(209,pfont42 = (gs_font_type42 *)
(210,path)
(211,gref.tas.rsize)
(212,0)
(213,(*cont)
(214,text)
(215,gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
(216,gref)
(217,x)
(218,gref)
(219,operation)
(220,penum)
(221,)
(222,gref.value)
(223,code)
(224,gref.tas)
(225,0)
(226,0)
(227,opc)
(228,6)
(229,pfont42)
(230,if (code < 0)
(231,pfont->FontType != ft_CID_TrueType)
(232,rsize)
(233,op = osp)
(234,t_name)
(235,gsub_size)
(236,check_op(6)
(237,glyph_index)
(238,pfont)
(239,code)
(240,opc->value)
(241,3)
(242,pop((psbpt == 0 ? 4 : 6)
(243,value)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^