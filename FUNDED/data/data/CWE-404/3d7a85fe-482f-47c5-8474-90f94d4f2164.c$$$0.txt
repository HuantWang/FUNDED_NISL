-----label-----
0
-----code-----
static void drm_mm_insert_helper_range(struct drm_mm_node *hole_node,
				       struct drm_mm_node *node,
				       u64 size, unsigned alignment,
				       unsigned long color,
				       u64 start, u64 end,
				       enum drm_mm_allocator_flags flags)
{
	struct drm_mm *mm = hole_node->mm;
	u64 hole_start = drm_mm_hole_node_start(hole_node);
	u64 hole_end = drm_mm_hole_node_end(hole_node);
	u64 adj_start = hole_start;
	u64 adj_end = hole_end;

	BUG_ON(!hole_node->hole_follows || node->allocated);

	if (mm->color_adjust)
		mm->color_adjust(hole_node, color, &adj_start, &adj_end);

	adj_start = max(adj_start, start);
	adj_end = min(adj_end, end);

	if (flags & DRM_MM_CREATE_TOP)
		adj_start = adj_end - size;

	if (alignment) {
		u64 tmp = adj_start;
		unsigned rem;

		rem = do_div(tmp, alignment);
		if (rem) {
			if (flags & DRM_MM_CREATE_TOP)
				adj_start -= rem;
			else
				adj_start += alignment - rem;
		}
	}

	if (adj_start == hole_start) {
		hole_node->hole_follows = 0;
		list_del(&hole_node->hole_stack);
	}

	node->start = adj_start;
	node->size = size;
	node->mm = mm;
	node->color = color;
	node->allocated = 1;

	INIT_LIST_HEAD(&node->hole_stack);
	list_add(&node->node_list, &hole_node->node_list);

	BUG_ON(node->start < start);
	BUG_ON(node->start < adj_start);
	BUG_ON(node->start + node->size > adj_end);
	BUG_ON(node->start + node->size > end);

	node->hole_follows = 0;
	if (__drm_mm_hole_node_start(node) < hole_end) {
		list_add(&node->hole_stack, &mm->hole_stack);
		node->hole_follows = 1;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
24,25
26,27
26,28
28,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
45,51
45,52
45,53
45,54
45,55
45,56
45,57
45,58
45,59
45,60
45,61
45,62
45,63
45,64
45,65
45,66
45,67
45,68
45,69
45,70
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
86,88
88,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
97,98
98,99
100,101
101,102
101,103
102,103
104,105
104,106
105,106
106,107
106,108
107,108
110,111
110,112
111,112
114,115
114,116
115,116
115,117
116,117
119,120
120,121
120,122
120,123
120,124
120,125
121,122
121,123
122,123
125,126
127,128
129,130
130,131
132,133
133,134
135,136
136,137
136,138
137,138
139,140
139,141
139,142
140,141
142,143
144,145
146,147
147,148
147,149
148,149
150,151
150,152
150,153
151,152
153,154
155,156
157,158
157,159
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
168,169
170,171
172,173
172,174
173,174
175,176
175,177
175,178
175,179
176,177
177,178
177,179
178,179
180,181
180,182
182,183
183,184
185,186
186,187
186,188
188,189
190,191
191,192
191,193
192,193
194,195
194,196
194,197
195,196
197,198
199,200
201,202
201,203
202,203
204,205
205,206
205,207
205,208
206,207
206,208
207,208
209,210
211,212
212,213
212,214
213,214
215,216
217,218
218,219
218,220
219,220
221,222
221,223
222,223
224,225
226,227
226,228
227,228
227,229
228,229
230,231
232,233
232,234
233,234
234,235
234,236
235,236
235,237
236,237
240,241
241,242
241,243
242,243
244,245
245,246
245,247
246,247
249,250
250,251
250,252
251,252
251,253
252,253
255,256
257,258
258,259
258,260
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
267,269
268,269
271,272
273,274
274,275
274,276
275,276
275,277
276,277
279,280
281,282
282,283
282,284
283,284
283,285
284,285
288,289
289,290
289,291
290,291
292,293
293,294
293,295
294,295
297,298
298,299
298,300
298,301
299,300
301,302
302,303
302,304
303,304
306,307
307,308
307,309
308,309
311,312
312,313
312,314
313,314
315,316
315,317
316,317
316,318
317,318
320,321
322,323
323,324
323,325
324,325
326,327
326,328
327,328
327,329
328,329
331,332
333,334
334,335
334,336
335,336
337,338
337,339
338,339
338,340
339,340
339,341
340,341
343,344
343,345
344,345
347,348
349,350
350,351
350,352
351,352
353,354
353,355
354,355
354,356
355,356
355,357
356,357
359,360
359,361
360,361
363,364
365,366
366,367
366,368
367,368
367,369
368,369
372,373
372,374
373,374
373,375
374,375
374,376
375,376
377,378
379,380
381,382
381,383
382,383
383,384
383,385
383,386
384,385
386,387
387,388
387,389
388,389
391,392
392,393
392,394
393,394
396,397
397,398
397,399
398,399
398,400
399,400
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,23,25,27,29,32,34,37,39,42,44,49,51,52,56,57,61,63,67,69,73,75,79,81,85,87,90,94,96,99,103,108,109,112,113,117,118,123,124,126,128,131,134,138,141,143,145,149,152,154,156,160,162,166,169,171,174,179,181,184,187,189,193,196,198,200,203,208,210,214,216,220,223,225,229,231,237,238,239,243,247,248,253,254,256,261,262,264,269,270,272,277,278,280,285,286,287,291,295,296,300,304,305,309,310,314,318,319,321,325,329,330,332,336,341,342,345,346,348,352,357,358,361,362,364,369,370,371,376,378,380,385,389,390,394,395,400,401,402
-----computeFrom-----
104,105
104,106
136,137
136,138
147,148
147,149
158,159
158,160
164,165
164,166
167,168
167,169
191,192
191,193
206,207
206,208
212,213
212,214
218,219
218,220
221,222
221,223
227,228
227,229
234,235
234,236
250,251
250,252
258,259
258,260
266,267
266,268
274,275
274,276
282,283
282,284
315,316
315,317
326,327
326,328
337,338
337,339
338,339
338,340
353,354
353,355
354,355
354,356
366,367
366,368
373,374
373,375
397,398
397,399
-----guardedBy-----
378,400
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static void drm_mm_insert_helper_range(struct drm_mm_node *hole_node,				       struct drm_mm_node *node,				       u64 size, unsigned alignment,				       unsigned long color,				       u64 start, u64 end,				       enum drm_mm_allocator_flags flags){	struct drm_mm *mm = hole_node->mm;	u64 hole_start = drm_mm_hole_node_start(hole_node);	u64 hole_end = drm_mm_hole_node_end(hole_node);	u64 adj_start = hole_start;	u64 adj_end = hole_end;	BUG_ON(!hole_node->hole_follows || node->allocated);	if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);	adj_start = max(adj_start, start);	adj_end = min(adj_end, end);	if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;	if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}	if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}	node->start = adj_start;	node->size = size;	node->mm = mm;	node->color = color;	node->allocated = 1;	INIT_LIST_HEAD(&node->hole_stack);	list_add(&node->node_list, &hole_node->node_list);	BUG_ON(node->start < start);	BUG_ON(node->start < adj_start);	BUG_ON(node->start + node->size > adj_end);	BUG_ON(node->start + node->size > end);	node->hole_follows = 0;	if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}}
static void
drm_mm_insert_helper_range(struct drm_mm_node *hole_node,				       struct drm_mm_node *node,				       u64 size, unsigned alignment,				       unsigned long color,				       u64 start, u64 end,				       enum drm_mm_allocator_flags flags)
drm_mm_insert_helper_range
struct drm_mm_node *hole_node
struct drm_mm_node
drm_mm_node
*hole_node
*
hole_node
struct drm_mm_node *node
struct drm_mm_node
drm_mm_node
*node
*
node
u64 size
u64
u64
size
size
unsigned alignment
unsigned
alignment
alignment
unsigned long color
unsigned long
color
color
u64 start
u64
u64
start
start
u64 end
u64
u64
end
end
enum drm_mm_allocator_flags flags
enum drm_mm_allocator_flags
drm_mm_allocator_flags
flags
flags
{	struct drm_mm *mm = hole_node->mm;	u64 hole_start = drm_mm_hole_node_start(hole_node);	u64 hole_end = drm_mm_hole_node_end(hole_node);	u64 adj_start = hole_start;	u64 adj_end = hole_end;	BUG_ON(!hole_node->hole_follows || node->allocated);	if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);	adj_start = max(adj_start, start);	adj_end = min(adj_end, end);	if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;	if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}	if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}	node->start = adj_start;	node->size = size;	node->mm = mm;	node->color = color;	node->allocated = 1;	INIT_LIST_HEAD(&node->hole_stack);	list_add(&node->node_list, &hole_node->node_list);	BUG_ON(node->start < start);	BUG_ON(node->start < adj_start);	BUG_ON(node->start + node->size > adj_end);	BUG_ON(node->start + node->size > end);	node->hole_follows = 0;	if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}}
struct drm_mm *mm = hole_node->mm;
struct drm_mm *mm = hole_node->mm;
struct drm_mm
drm_mm
*mm = hole_node->mm
*
mm
= hole_node->mm
hole_node->mm
hole_node
hole_node
mm
u64 hole_start = drm_mm_hole_node_start(hole_node);
u64 hole_start = drm_mm_hole_node_start(hole_node);
u64
u64
hole_start = drm_mm_hole_node_start(hole_node)
hole_start
= drm_mm_hole_node_start(hole_node)
drm_mm_hole_node_start(hole_node)
drm_mm_hole_node_start
drm_mm_hole_node_start
hole_node
hole_node
u64 hole_end = drm_mm_hole_node_end(hole_node);
u64 hole_end = drm_mm_hole_node_end(hole_node);
u64
u64
hole_end = drm_mm_hole_node_end(hole_node)
hole_end
= drm_mm_hole_node_end(hole_node)
drm_mm_hole_node_end(hole_node)
drm_mm_hole_node_end
drm_mm_hole_node_end
hole_node
hole_node
u64 adj_start = hole_start;
u64 adj_start = hole_start;
u64
u64
adj_start = hole_start
adj_start
= hole_start
hole_start
hole_start
u64 adj_end = hole_end;
u64 adj_end = hole_end;
u64
u64
adj_end = hole_end
adj_end
= hole_end
hole_end
hole_end
BUG_ON(!hole_node->hole_follows || node->allocated);
BUG_ON(!hole_node->hole_follows || node->allocated)
BUG_ON
BUG_ON
!hole_node->hole_follows || node->allocated
!hole_node->hole_follows
hole_node->hole_follows
hole_node
hole_node
hole_follows
node->allocated
node
node
allocated
if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);
mm->color_adjust
mm
mm
color_adjust
mm->color_adjust(hole_node, color, &adj_start, &adj_end);
mm->color_adjust(hole_node, color, &adj_start, &adj_end)
mm->color_adjust
mm
mm
color_adjust
hole_node
hole_node
color
color
&adj_start
adj_start
adj_start
&adj_end
adj_end
adj_end
adj_start = max(adj_start, start);
adj_start = max(adj_start, start)
adj_start
adj_start
max(adj_start, start)
max
max
adj_start
adj_start
start
start
adj_end = min(adj_end, end);
adj_end = min(adj_end, end)
adj_end
adj_end
min(adj_end, end)
min
min
adj_end
adj_end
end
end
if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;
flags & DRM_MM_CREATE_TOP
flags
flags
DRM_MM_CREATE_TOP
DRM_MM_CREATE_TOP
adj_start = adj_end - size;
adj_start = adj_end - size
adj_start
adj_start
adj_end - size
adj_end
adj_end
size
size
if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}
alignment
alignment
{		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}
u64 tmp = adj_start;
u64 tmp = adj_start;
u64
u64
tmp = adj_start
tmp
= adj_start
adj_start
adj_start
unsigned rem;
unsigned rem;
unsigned
rem
rem
rem = do_div(tmp, alignment);
rem = do_div(tmp, alignment)
rem
rem
do_div(tmp, alignment)
do_div
do_div
tmp
tmp
alignment
alignment
if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}
rem
rem
{			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}
if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;
flags & DRM_MM_CREATE_TOP
flags
flags
DRM_MM_CREATE_TOP
DRM_MM_CREATE_TOP
adj_start -= rem;
adj_start -= rem
adj_start
adj_start
rem
rem
adj_start += alignment - rem;
adj_start += alignment - rem
adj_start
adj_start
alignment - rem
alignment
alignment
rem
rem
if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}
adj_start == hole_start
adj_start
adj_start
hole_start
hole_start
{		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}
hole_node->hole_follows = 0;
hole_node->hole_follows = 0
hole_node->hole_follows
hole_node
hole_node
hole_follows
0
list_del(&hole_node->hole_stack);
list_del(&hole_node->hole_stack)
list_del
list_del
&hole_node->hole_stack
hole_node->hole_stack
hole_node
hole_node
hole_stack
node->start = adj_start;
node->start = adj_start
node->start
node
node
start
adj_start
adj_start
node->size = size;
node->size = size
node->size
node
node
size
size
size
node->mm = mm;
node->mm = mm
node->mm
node
node
mm
mm
mm
node->color = color;
node->color = color
node->color
node
node
color
color
color
node->allocated = 1;
node->allocated = 1
node->allocated
node
node
allocated
1
INIT_LIST_HEAD(&node->hole_stack);
INIT_LIST_HEAD(&node->hole_stack)
INIT_LIST_HEAD
INIT_LIST_HEAD
&node->hole_stack
node->hole_stack
node
node
hole_stack
list_add(&node->node_list, &hole_node->node_list);
list_add(&node->node_list, &hole_node->node_list)
list_add
list_add
&node->node_list
node->node_list
node
node
node_list
&hole_node->node_list
hole_node->node_list
hole_node
hole_node
node_list
BUG_ON(node->start < start);
BUG_ON(node->start < start)
BUG_ON
BUG_ON
node->start < start
node->start
node
node
start
start
start
BUG_ON(node->start < adj_start);
BUG_ON(node->start < adj_start)
BUG_ON
BUG_ON
node->start < adj_start
node->start
node
node
start
adj_start
adj_start
BUG_ON(node->start + node->size > adj_end);
BUG_ON(node->start + node->size > adj_end)
BUG_ON
BUG_ON
node->start + node->size > adj_end
node->start + node->size
node->start
node
node
start
node->size
node
node
size
adj_end
adj_end
BUG_ON(node->start + node->size > end);
BUG_ON(node->start + node->size > end)
BUG_ON
BUG_ON
node->start + node->size > end
node->start + node->size
node->start
node
node
start
node->size
node
node
size
end
end
node->hole_follows = 0;
node->hole_follows = 0
node->hole_follows
node
node
hole_follows
0
if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}
__drm_mm_hole_node_start(node) < hole_end
__drm_mm_hole_node_start(node)
__drm_mm_hole_node_start
__drm_mm_hole_node_start
node
node
hole_end
hole_end
{		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}
list_add(&node->hole_stack, &mm->hole_stack);
list_add(&node->hole_stack, &mm->hole_stack)
list_add
list_add
&node->hole_stack
node->hole_stack
node
node
hole_stack
&mm->hole_stack
mm->hole_stack
mm
mm
hole_stack
node->hole_follows = 1;
node->hole_follows = 1
node->hole_follows
node
node
hole_follows
1
-----joern-----
(96,21,0)
(57,153,0)
(167,21,0)
(92,30,0)
(104,188,0)
(147,28,0)
(181,184,0)
(133,28,0)
(113,194,0)
(167,28,0)
(147,174,0)
(75,5,0)
(172,174,0)
(133,117,0)
(91,30,0)
(34,146,0)
(177,24,0)
(131,141,0)
(209,128,0)
(112,117,0)
(151,73,0)
(188,174,0)
(201,31,0)
(26,131,0)
(0,28,0)
(179,166,0)
(1,116,0)
(24,100,0)
(35,94,0)
(203,33,0)
(146,4,0)
(189,72,0)
(183,184,0)
(168,172,0)
(131,116,0)
(39,137,0)
(183,5,0)
(117,5,0)
(46,103,0)
(125,28,0)
(153,155,0)
(87,116,0)
(106,192,0)
(18,197,0)
(137,39,0)
(103,150,0)
(30,92,0)
(173,188,0)
(125,150,0)
(17,166,0)
(25,116,0)
(163,190,0)
(139,150,0)
(2,160,0)
(12,5,0)
(93,5,0)
(123,151,0)
(174,5,0)
(197,51,0)
(53,13,0)
(176,13,0)
(97,190,0)
(21,153,0)
(172,28,0)
(31,180,0)
(113,6,0)
(84,22,0)
(189,5,0)
(206,141,0)
(158,57,0)
(145,28,0)
(152,17,0)
(192,122,0)
(138,45,0)
(205,179,0)
(159,64,0)
(182,5,0)
(72,189,0)
(67,45,0)
(48,17,0)
(172,137,0)
(84,125,0)
(204,28,0)
(105,58,0)
(194,5,0)
(130,33,0)
(44,146,0)
(187,61,0)
(150,6,0)
(78,186,0)
(189,164,0)
(137,172,0)
(198,1,0)
(114,1,0)
(164,204,0)
(70,23,0)
(190,97,0)
(69,116,0)
(144,90,0)
(37,105,0)
(6,153,0)
(150,5,0)
(33,49,0)
(55,204,0)
(155,54,0)
(10,144,0)
(13,148,0)
(132,52,0)
(100,166,0)
(30,24,0)
(134,5,0)
(13,28,0)
(20,132,0)
(45,28,0)
(135,97,0)
(32,172,0)
(202,171,0)
(107,40,0)
(100,24,0)
(4,146,0)
(89,5,0)
(150,153,0)
(42,40,0)
(21,167,0)
(180,31,0)
(118,144,0)
(144,183,0)
(75,39,0)
(82,128,0)
(4,183,0)
(154,125,0)
(81,5,0)
(76,5,0)
(140,54,0)
(146,109,0)
(14,94,0)
(198,111,0)
(117,24,0)
(71,131,0)
(16,133,0)
(113,153,0)
(60,0,0)
(126,5,0)
(170,143,0)
(6,141,0)
(155,74,0)
(194,179,0)
(141,151,0)
(101,155,0)
(98,202,0)
(211,23,0)
(181,166,0)
(122,160,0)
(190,163,0)
(203,166,0)
(193,100,0)
(21,141,0)
(164,189,0)
(21,57,0)
(149,39,0)
(129,202,0)
(108,58,0)
(196,183,0)
(146,166,0)
(43,177,0)
(204,164,0)
(142,198,0)
(186,64,0)
(23,131,0)
(146,35,0)
(155,153,0)
(175,167,0)
(40,42,0)
(9,113,0)
(23,111,0)
(105,28,0)
(23,1,0)
(11,109,0)
(186,28,0)
(39,54,0)
(38,148,0)
(22,5,0)
(163,5,0)
(128,28,0)
(40,166,0)
(80,174,0)
(21,96,0)
(88,30,0)
(147,171,0)
(17,72,0)
(119,94,0)
(86,183,0)
(79,177,0)
(141,5,0)
(39,75,0)
(54,5,0)
(41,167,0)
(122,92,0)
(185,125,0)
(202,28,0)
(178,145,0)
(171,31,0)
(56,97,0)
(63,203,0)
(113,141,0)
(38,5,0)
(124,57,0)
(143,51,0)
(132,20,0)
(148,42,0)
(150,57,0)
(42,148,0)
(64,5,0)
(125,84,0)
(165,143,0)
(122,192,0)
(31,90,0)
(131,153,0)
(59,181,0)
(15,113,0)
(106,28,0)
(144,54,0)
(96,5,0)
(127,103,0)
(95,147,0)
(36,133,0)
(208,194,0)
(94,194,0)
(52,166,0)
(45,11,0)
(103,137,0)
(57,1,0)
(85,197,0)
(113,57,0)
(84,73,0)
(66,5,0)
(192,106,0)
(57,141,0)
(35,146,0)
(27,0,0)
(99,106,0)
(50,4,0)
(22,84,0)
(156,151,0)
(29,184,0)
(195,145,0)
(97,28,0)
(151,141,0)
(72,17,0)
(184,5,0)
(200,2,0)
(103,28,0)
(207,100,0)
(184,181,0)
(169,186,0)
(136,6,0)
(120,24,0)
(180,5,0)
(191,40,0)
(198,6,0)
(148,38,0)
(148,13,0)
(210,5,0)
(161,155,0)
(0,2,0)
(199,52,0)
(7,52,0)
(115,5,0)
(150,141,0)
(145,126,0)
(54,144,0)
(11,5,0)
(179,194,0)
(171,147,0)
(151,94,0)
(202,150,0)
(171,202,0)
(128,150,0)
(102,153,0)
(52,132,0)
(110,11,0)
(174,74,0)
(58,105,0)
(83,21,0)
(188,28,0)
(77,147,0)
(68,84,0)
(167,150,0)
(21,6,0)
(162,106,0)
(31,171,0)
(3,35,0)
(1,23,0)
(19,203,0)
(94,5,0)
(24,5,0)
(6,198,0)
(62,204,0)
(58,184,0)
(92,122,0)
(157,198,0)
(137,103,0)
(20,49,0)
(65,126,0)
(31,171,1)
(157,136,1)
(103,28,1)
(105,28,1)
(167,150,1)
(86,94,1)
(151,156,1)
(190,97,1)
(209,20,1)
(103,127,1)
(57,153,1)
(195,178,1)
(113,194,1)
(17,48,1)
(8,143,1)
(139,128,1)
(45,28,1)
(208,24,1)
(128,28,1)
(167,28,1)
(21,141,1)
(197,85,1)
(4,50,1)
(80,188,1)
(146,4,1)
(211,70,1)
(152,164,1)
(85,18,1)
(198,111,1)
(20,132,1)
(96,21,1)
(129,75,1)
(19,113,1)
(203,166,1)
(169,180,1)
(113,57,1)
(30,24,1)
(4,183,1)
(7,199,1)
(32,103,1)
(18,47,1)
(175,22,1)
(171,147,1)
(150,57,1)
(147,77,1)
(170,165,1)
(42,40,1)
(17,166,1)
(125,154,1)
(68,125,1)
(117,112,1)
(95,202,1)
(167,41,1)
(135,56,1)
(174,80,1)
(113,141,1)
(146,109,1)
(84,125,1)
(183,184,1)
(58,184,1)
(131,153,1)
(36,16,1)
(1,23,1)
(202,150,1)
(101,102,1)
(178,11,1)
(21,6,1)
(0,27,1)
(43,38,1)
(177,79,1)
(204,28,1)
(23,131,1)
(65,145,1)
(24,100,1)
(183,196,1)
(100,207,1)
(47,1,1)
(150,139,1)
(146,166,1)
(35,3,1)
(21,57,1)
(107,191,1)
(105,37,1)
(114,131,1)
(100,166,1)
(58,105,1)
(9,47,1)
(33,130,1)
(13,53,1)
(189,72,1)
(16,174,1)
(172,174,1)
(9,6,1)
(121,2,1)
(179,205,1)
(117,24,1)
(113,6,1)
(136,197,1)
(189,164,1)
(199,33,1)
(121,58,1)
(161,101,1)
(21,153,1)
(159,186,1)
(131,141,1)
(99,58,1)
(206,177,1)
(113,15,1)
(22,84,1)
(186,78,1)
(26,8,1)
(39,137,1)
(181,59,1)
(154,185,1)
(155,74,1)
(198,142,1)
(148,13,1)
(196,86,1)
(21,167,1)
(72,17,1)
(119,184,1)
(103,150,1)
(194,179,1)
(126,65,1)
(163,190,1)
(202,28,1)
(181,166,1)
(197,51,1)
(52,7,1)
(176,42,1)
(205,208,1)
(23,111,1)
(141,151,1)
(27,60,1)
(133,36,1)
(94,194,1)
(165,54,1)
(185,189,1)
(13,28,1)
(15,9,1)
(40,166,1)
(184,181,1)
(209,113,1)
(35,94,1)
(191,183,1)
(207,193,1)
(147,28,1)
(97,135,1)
(123,206,1)
(67,138,1)
(112,133,1)
(192,106,1)
(150,141,1)
(164,204,1)
(3,34,1)
(145,28,1)
(173,150,1)
(11,109,1)
(144,90,1)
(108,105,1)
(177,24,1)
(140,141,1)
(54,144,1)
(150,153,1)
(201,171,1)
(29,194,1)
(168,32,1)
(71,26,1)
(98,129,1)
(125,28,1)
(34,44,1)
(6,198,1)
(133,28,1)
(174,74,1)
(132,52,1)
(113,153,1)
(155,54,1)
(193,120,1)
(10,140,1)
(94,14,1)
(153,155,1)
(97,28,1)
(143,51,1)
(122,192,1)
(110,45,1)
(151,73,1)
(40,107,1)
(2,200,1)
(145,195,1)
(106,162,1)
(200,0,1)
(206,146,1)
(146,35,1)
(188,104,1)
(14,119,1)
(83,167,1)
(202,98,1)
(198,1,1)
(137,172,1)
(46,96,1)
(204,55,1)
(143,170,1)
(39,54,1)
(38,148,1)
(104,173,1)
(63,19,1)
(130,203,1)
(91,192,1)
(58,108,1)
(0,28,1)
(88,91,1)
(82,209,1)
(131,71,1)
(9,8,1)
(106,28,1)
(144,118,1)
(78,169,1)
(56,126,1)
(52,166,1)
(45,67,1)
(142,157,1)
(44,177,1)
(144,183,1)
(79,43,1)
(31,201,1)
(77,95,1)
(55,62,1)
(125,150,1)
(37,64,1)
(84,68,1)
(203,63,1)
(180,31,1)
(57,1,1)
(64,159,1)
(31,90,1)
(50,35,1)
(137,103,1)
(11,110,1)
(59,29,1)
(147,174,1)
(148,42,1)
(118,10,1)
(6,141,1)
(23,211,1)
(151,94,1)
(172,28,1)
(8,153,1)
(172,168,1)
(39,149,1)
(57,124,1)
(124,158,1)
(156,123,1)
(155,161,1)
(92,30,1)
(41,175,1)
(57,141,1)
(60,122,1)
(186,28,1)
(9,57,1)
(53,176,1)
(84,73,1)
(102,143,1)
(48,152,1)
(30,88,1)
(149,137,1)
(128,82,1)
(62,163,1)
(127,46,1)
(122,92,1)
(21,83,1)
(150,6,1)
(75,39,1)
(162,99,1)
(138,117,1)
(179,166,1)
(158,197,1)
(6,153,1)
(70,114,1)
(171,202,1)
(188,28,1)
(57,141,2)
(146,166,2)
(6,153,2)
(136,197,2)
(163,190,2)
(26,8,2)
(161,143,2)
(131,141,2)
(75,39,2)
(70,8,2)
(50,177,2)
(23,111,2)
(21,167,2)
(192,106,2)
(60,58,2)
(131,153,2)
(57,153,2)
(190,97,2)
(155,54,2)
(85,47,2)
(1,8,2)
(158,197,2)
(142,197,2)
(137,172,2)
(113,194,2)
(24,100,2)
(54,144,2)
(84,125,2)
(63,113,2)
(99,58,2)
(146,35,2)
(167,28,2)
(47,8,2)
(23,131,2)
(164,204,2)
(131,8,2)
(7,113,2)
(92,30,2)
(183,184,2)
(6,198,2)
(42,40,2)
(146,177,2)
(153,143,2)
(122,192,2)
(94,194,2)
(172,28,2)
(103,28,2)
(52,166,2)
(13,42,2)
(203,166,2)
(198,197,2)
(1,23,2)
(174,74,2)
(39,54,2)
(162,58,2)
(21,6,2)
(184,181,2)
(6,197,2)
(144,90,2)
(39,137,2)
(45,28,2)
(34,177,2)
(113,153,2)
(124,197,2)
(125,150,2)
(147,28,2)
(197,47,2)
(148,13,2)
(171,202,2)
(92,58,2)
(4,183,2)
(186,28,2)
(27,58,2)
(171,147,2)
(197,51,2)
(148,42,2)
(88,58,2)
(157,197,2)
(155,74,2)
(176,42,2)
(150,6,2)
(179,166,2)
(4,177,2)
(31,90,2)
(132,113,2)
(151,94,2)
(19,113,2)
(91,58,2)
(96,21,2)
(6,141,2)
(113,57,2)
(153,155,2)
(3,177,2)
(198,111,2)
(143,51,2)
(30,24,2)
(172,174,2)
(211,8,2)
(20,113,2)
(188,28,2)
(40,166,2)
(31,171,2)
(0,58,2)
(200,58,2)
(113,6,2)
(146,4,2)
(84,73,2)
(189,164,2)
(2,58,2)
(72,17,2)
(106,58,2)
(113,141,2)
(167,150,2)
(141,151,2)
(52,113,2)
(202,28,2)
(180,31,2)
(11,109,2)
(106,28,2)
(35,177,2)
(128,28,2)
(150,57,2)
(150,153,2)
(58,105,2)
(38,148,2)
(198,1,2)
(44,177,2)
(144,183,2)
(21,141,2)
(189,72,2)
(23,8,2)
(0,28,2)
(194,179,2)
(97,28,2)
(30,58,2)
(202,150,2)
(114,8,2)
(133,28,2)
(100,166,2)
(22,84,2)
(57,1,2)
(33,113,2)
(155,143,2)
(13,28,2)
(130,113,2)
(137,103,2)
(122,92,2)
(102,143,2)
(145,28,2)
(204,28,2)
(177,24,2)
(147,174,2)
(125,28,2)
(105,28,2)
(57,197,2)
(101,143,2)
(181,166,2)
(71,8,2)
(20,132,2)
(151,73,2)
(35,94,2)
(146,109,2)
(192,58,2)
(203,113,2)
(53,42,2)
(17,166,2)
(58,184,2)
(122,58,2)
(199,113,2)
(21,57,2)
(150,141,2)
(103,150,2)
(18,47,2)
(132,52,2)
(117,24,2)
(21,153,2)
-----------------------------------
(0,node->hole_follows)
(1,rem = do_div(tmp, alignment)
(2,node->hole_follows = 1)
(3,adj_start)
(4,&adj_end)
(5,)
(6,adj_start += alignment - rem)
(7,hole_stack)
(8,alignment)
(9,adj_start)
(10,adj_end)
(11,node->color = color)
(12,hole_end)
(13,node->allocated)
(14,hole_start)
(15,hole_start)
(16,node)
(17,hole_node->node_list)
(18,flags)
(19,hole_node)
(20,list_del(&hole_node->hole_stack)
(21,node->start < adj_start)
(22,BUG_ON(node->start < start)
(23,do_div(tmp, alignment)
(24,*mm = hole_node->mm)
(25,rem)
(26,tmp)
(27,hole_follows)
(28,struct drm_mm_node *node)
(29,hole_end)
(30,mm->hole_stack)
(31,node->start + node->size > end)
(32,node)
(33,hole_node->hole_follows = 0)
(34,color)
(35,&adj_start)
(36,mm)
(37,node)
(38,BUG_ON(!hole_node->hole_follows || node->allocated)
(39,node->start + node->size > adj_end)
(40,hole_node->hole_follows)
(41,start)
(42,!hole_node->hole_follows)
(43,mm)
(44,hole_node)
(45,node->color)
(46,node)
(47,rem)
(48,node_list)
(49,)
(50,adj_end)
(51,enum drm_mm_allocator_flags flags)
(52,hole_node->hole_stack)
(53,allocated)
(54,adj_end = min(adj_end, end)
(55,node_list)
(56,node)
(57,adj_start -= rem)
(58,__drm_mm_hole_node_start(node)
(59,hole_node)
(60,node)
(61,)
(62,node)
(63,hole_follows)
(64,node->hole_follows = 0)
(65,1)
(66,if (mm->color_adjust)
(67,color)
(68,start)
(69,if (rem)
(70,tmp)
(71,adj_start)
(72,&hole_node->node_list)
(73,u64 start)
(74,u64 size)
(75,BUG_ON(node->start + node->size > adj_end)
(76,mm)
(77,size)
(78,hole_follows)
(79,color_adjust)
(80,size)
(81,if (__drm_mm_hole_node_start(node)
(82,start)
(83,adj_start)
(84,node->start < start)
(85,DRM_MM_CREATE_TOP)
(86,adj_end)
(87,tmp)
(88,hole_stack)
(89,hole_start)
(90,u64 end)
(91,mm)
(92,&mm->hole_stack)
(93,adj_end)
(94,adj_start = hole_start)
(95,node)
(96,BUG_ON(node->start < adj_start)
(97,node->hole_stack)
(98,start)
(99,node)
(100,hole_node->mm)
(101,adj_end)
(102,adj_start)
(103,node->start)
(104,size)
(105,__drm_mm_hole_node_start(node)
(106,node->hole_stack)
(107,hole_follows)
(108,hole_end)
(109,unsigned long color)
(110,color)
(111,unsigned alignment)
(112,mm)
(113,adj_start == hole_start)
(114,rem)
(115,adj_start)
(116,)
(117,node->mm = mm)
(118,end)
(119,adj_start)
(120,mm)
(121,RET)
(122,list_add(&node->hole_stack, &mm->hole_stack)
(123,adj_start)
(124,rem)
(125,node->start)
(126,node->allocated = 1)
(127,start)
(128,node->start)
(129,node)
(130,0)
(131,tmp = adj_start)
(132,&hole_node->hole_stack)
(133,node->mm)
(134,if (alignment)
(135,hole_stack)
(136,adj_start)
(137,node->start + node->size)
(138,node)
(139,adj_start)
(140,adj_end)
(141,adj_start = max(adj_start, start)
(142,rem)
(143,flags & DRM_MM_CREATE_TOP)
(144,min(adj_end, end)
(145,node->allocated)
(146,mm->color_adjust(hole_node, color, &adj_start, &adj_end)
(147,node->size)
(148,!hole_node->hole_follows || node->allocated)
(149,adj_end)
(150,node->start = adj_start)
(151,max(adj_start, start)
(152,hole_node)
(153,adj_start = adj_end - size)
(154,start)
(155,adj_end - size)
(156,start)
(157,alignment)
(158,adj_start)
(159,0)
(160,)
(161,size)
(162,hole_stack)
(163,INIT_LIST_HEAD(&node->hole_stack)
(164,&node->node_list)
(165,flags)
(166,struct drm_mm_node *hole_node)
(167,node->start)
(168,size)
(169,node)
(170,DRM_MM_CREATE_TOP)
(171,node->start + node->size)
(172,node->size)
(173,node)
(174,node->size = size)
(175,node)
(176,node)
(177,mm->color_adjust)
(178,node)
(179,drm_mm_hole_node_start(hole_node)
(180,BUG_ON(node->start + node->size > end)
(181,drm_mm_hole_node_end(hole_node)
(182,if (adj_start == hole_start)
(183,adj_end = hole_end)
(184,hole_end = drm_mm_hole_node_end(hole_node)
(185,node)
(186,node->hole_follows)
(187,if (flags & DRM_MM_CREATE_TOP)
(188,node->size)
(189,list_add(&node->node_list, &hole_node->node_list)
(190,&node->hole_stack)
(191,hole_node)
(192,&node->hole_stack)
(193,hole_node)
(194,hole_start = drm_mm_hole_node_start(hole_node)
(195,allocated)
(196,hole_end)
(197,flags & DRM_MM_CREATE_TOP)
(198,alignment - rem)
(199,hole_node)
(200,1)
(201,end)
(202,node->start)
(203,hole_node->hole_follows)
(204,node->node_list)
(205,hole_node)
(206,adj_start)
(207,mm)
(208,hole_start)
(209,node)
(210,if (flags & DRM_MM_CREATE_TOP)
(211,alignment)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^