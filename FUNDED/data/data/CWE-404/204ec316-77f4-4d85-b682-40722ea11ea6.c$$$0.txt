-----label-----
1
-----code-----
static int
zbuildfont11(i_ctx_t *i_ctx_p)
{
    os_ptr op = osp;
    gs_font_cid_data common;
    gs_font_type42 *pfont;
    gs_font_cid2 *pfcid;
    int MetricsCount;
    ref rcidmap, ignore_gdir, file, *pfile, cfnstr, *pCIDFontName, CIDFontName, *t;
    ulong loca_glyph_pos[2][2];
    int code = cid_font_data_param(op, &common, &ignore_gdir);

    if (code < 0 ||
	(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||
	(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0
	)
	return code;
    /*
     * Since build_gs_simple_font may resize the dictionary and cause
     * pointers to become invalid, save CIDFontName
     */
    CIDFontName = *pCIDFontName;
    if (MetricsCount & 1)	/* only allowable values are 0, 2, 4 */
	return_error(e_rangecheck);
    code = dict_find_string(op, "File", &pfile);
    if (code < 0 && code != e_undefined)
	return code;
    if (code > 0) {
	ref *file_table_pos, *a, v;
	const char *name[2] = {"loca", "glyf"};
	int i, j;

	/*
	 * Since build_gs_simple_font may resize the dictionary and cause
	 * pointers to become invalid, save File and CIDFontName
	 */
	file = *pfile;
        check_read_type(file, t_file);
	code = dict_find_string(op, "file_table_pos", &file_table_pos);
	if (code <= 0 || r_type(file_table_pos) != t_dictionary)
	    return_error(e_invalidfont);
	for (i = 0; i < 2; i++) {
	    code = dict_find_string(file_table_pos, name[i], &a);
	    if (code <= 0 || r_type(a) != t_array)
		return_error(e_invalidfont);
	    for (j = 0; j < 2; j++) {
	        code = array_get(imemory, a, j, &v);
		if (code < 0 || r_type(&v) != t_integer)
		    return_error(e_invalidfont);
		loca_glyph_pos[i][j] = v.value.intval;
	    }
	}
    } else
	pfile = NULL;
    code = font_string_array_param(imemory, op, "CIDMap", &rcidmap);
    switch (code) {
    case 0:			/* in PLRM3 */
    gdb:
	/* GDBytes is required for indexing a string or string array. */
	if (common.GDBytes == 0)
	    return_error(e_rangecheck);
	break;
    default:
	return code;
    case e_typecheck:
	switch (r_type(&rcidmap)) {
	case t_string:		/* in PLRM3 */
	    goto gdb;
	case t_dictionary:	/* added in 3011 */
	case t_integer:		/* added in 3011 */
	    break;
	default:
	    return code;
	}
	break;
    }
    code = build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,
				  &st_gs_font_cid2,
				  (const char *)0, "%Type11BuildGlyph",
				  bf_Encoding_optional |
				  bf_UniqueID_ignored |
				  bf_CharStrings_optional |
				  (pfile != NULL ? bf_has_font_file : 0));
    if (code < 0)
	return code;
    pfcid = (gs_font_cid2 *)pfont;
    if (dict_find_string(op, "subst_CID_on_WMode", &t) > 0 && r_type(t) == t_dictionary) {
	gs_subst_CID_on_WMode_t *subst = NULL;
	ref *o;
	gs_font *font;

	if (dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string)
	    return_error(e_invalidfont);
	for (font = ifont_dir->orig_fonts; font != NULL; font = font->next) {
	    if (font->FontType == ft_CID_TrueType) {
		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;
		if (pfcid1->subst_CID_on_WMode != NULL &&
		    bytes_compare(o->value.const_bytes, r_size(o),
			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,
			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {
		    subst = pfcid1->subst_CID_on_WMode;
		    break;
		}
	    }
	}
	if (subst == NULL) {
	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,
			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");
	    subst->data[0] = subst->data[1] = 0;
	    pfcid->subst_CID_on_WMode = subst;
	    code = get_subst_CID_on_WMode(subst, t, 0);
	    if (code < 0)
		return code;
	    code = get_subst_CID_on_WMode(subst, t, 1);
	    if (code < 0)
		return code;
	} else {
	    pfcid->subst_CID_on_WMode = subst;
	    rc_increment(subst);
	}
	code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid);
	if (code < 0)
	    return code;
	rc_increment(subst);
   }
    pfcid->cidata.common = common;
    pfcid->cidata.MetricsCount = MetricsCount;
    ref_assign(&pfont_data(pfont)->u.type42.CIDMap, &rcidmap);
    pfcid->cidata.CIDMap_proc = z11_CIDMap_proc;
    pfcid->data.substitute_glyph_index_vertical = font11_substitute_glyph_index_vertical;
    pfont->procs.enumerate_glyph = z11_enumerate_glyph;
    pfont->procs.glyph_info = z11_glyph_info;
    pfont->procs.glyph_outline = z11_glyph_outline;
    pfont->data.get_glyph_index = z11_get_glyph_index;
    if (pfcid->font_name.size == 0) {
	get_font_name(imemory, &cfnstr, &CIDFontName);
	copy_font_name(&pfcid->font_name, &cfnstr);
    }
    if (MetricsCount) {
	/* "Wrap" the glyph accessor procedures. */
	pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline;
	pfont->data.get_outline = z11_get_outline;
	pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics;
	pfont->data.get_metrics = z11_get_metrics;
    } else if(pfile != NULL) {
        /*
	 * We assume that disk fonts has no MetricsCount.
	 * We could do not, but the number of virtual function wariants increases.
	 */
	stream *s;

	check_read_file(s, &file);
	pfont->data.loca = loca_glyph_pos[0][0];
	pfont->data.glyf = loca_glyph_pos[1][0];
	pfont->data.get_outline = gs_get_glyph_data_cached;
   	pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);
    }
    return define_gs_font((gs_font *)pfont);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
44,45
46,47
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
47,56
48,49
50,51
52,53
54,55
56,57
56,58
59,60
61,62
61,63
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
75,76
77,78
79,80
80,81
80,82
82,83
82,84
84,85
85,86
85,87
85,88
85,89
86,87
88,89
90,91
91,92
93,94
94,95
96,97
96,98
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
105,106
105,107
106,107
108,109
108,110
108,111
108,112
109,110
111,112
114,115
115,116
118,119
118,120
119,120
120,121
120,122
121,122
123,124
123,125
123,126
123,127
123,128
123,129
123,130
124,125
126,127
132,133
133,134
136,137
137,138
139,140
140,141
140,142
141,142
143,144
144,145
146,147
146,148
147,148
147,149
148,149
151,152
152,153
152,154
153,154
155,156
156,157
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
163,164
165,166
168,169
169,170
171,172
171,173
172,173
172,174
173,174
173,175
174,175
177,178
177,179
178,179
180,181
182,183
183,184
185,186
185,187
185,188
186,187
186,188
187,188
190,191
190,192
190,193
190,194
190,195
190,196
190,197
190,198
191,192
192,193
192,194
192,195
192,196
193,194
195,196
195,197
198,199
198,200
201,202
203,204
204,205
204,206
206,207
206,208
206,209
206,210
209,210
211,212
212,213
212,214
215,216
216,217
216,218
216,219
218,219
220,221
222,223
223,224
223,225
224,225
226,227
227,228
229,230
230,231
230,232
230,233
231,232
233,234
235,236
237,238
238,239
238,240
239,240
241,242
241,243
241,244
241,245
242,243
244,245
247,248
248,249
250,251
250,252
251,252
251,253
252,253
252,254
253,254
256,257
256,258
257,258
257,259
258,259
260,261
262,263
264,265
265,266
265,267
266,267
268,269
269,270
271,272
271,273
271,274
271,275
272,273
273,274
273,275
274,275
277,278
277,279
278,279
281,282
282,283
284,285
284,286
284,287
285,286
286,287
286,288
287,288
289,290
289,291
289,292
289,293
290,291
292,293
294,295
294,296
295,296
297,298
299,300
300,301
302,303
302,304
303,304
303,305
304,305
304,306
305,306
308,309
308,310
309,310
309,311
310,311
312,313
314,315
316,317
317,318
317,319
318,319
320,321
321,322
323,324
323,325
323,326
323,327
324,325
325,326
325,327
326,327
329,330
329,331
330,331
333,334
334,335
336,337
336,338
336,339
337,338
338,339
338,340
339,340
341,342
341,343
341,344
341,345
341,346
342,343
344,345
346,347
348,349
350,351
351,352
353,354
353,355
354,355
354,356
355,356
355,357
356,357
359,360
359,361
360,361
360,362
361,362
363,364
364,365
366,367
368,369
369,370
369,371
370,371
372,373
373,374
375,376
376,377
376,378
377,378
377,379
378,379
378,380
379,380
381,382
383,384
385,386
385,387
386,387
386,388
387,388
391,392
392,393
392,394
393,394
395,396
397,398
398,399
398,400
399,400
401,402
401,403
401,404
401,405
401,406
402,403
404,405
406,407
409,410
410,411
412,413
412,414
413,414
415,416
415,417
415,418
415,419
415,420
415,421
415,422
415,423
416,417
418,419
418,420
420,421
420,422
421,422
421,423
422,423
422,424
423,424
427,428
428,429
428,430
429,430
431,432
432,433
436,437
437,438
439,440
440,441
442,443
442,444
443,444
443,445
444,445
446,447
447,448
449,450
449,451
449,452
449,453
449,454
449,455
449,456
450,451
451,452
453,454
455,456
456,457
458,459
459,460
463,464
464,465
467,468
468,469
468,470
469,470
471,472
471,473
471,474
471,475
471,476
471,477
471,478
471,479
471,480
472,473
474,475
476,477
478,479
479,480
481,482
483,484
484,485
486,487
486,488
487,488
487,489
489,490
493,494
493,495
494,495
494,496
495,496
495,497
496,497
498,499
500,501
502,503
503,504
503,505
503,506
504,505
504,506
505,506
507,508
509,510
512,513
512,514
513,514
513,515
514,515
517,518
518,519
520,521
521,522
521,523
522,523
524,525
524,526
525,526
525,527
526,527
528,529
530,531
532,533
532,534
533,534
533,535
534,535
534,536
535,536
535,537
535,538
535,539
536,537
538,539
541,542
542,543
545,546
545,547
546,547
546,548
547,548
549,550
551,552
553,554
553,555
553,556
553,557
553,558
553,559
553,560
553,561
553,562
554,555
555,556
555,557
556,557
558,559
558,560
558,561
561,562
562,563
564,565
565,566
565,567
566,567
568,569
568,570
571,572
572,573
572,574
573,574
575,576
575,577
578,579
578,580
579,580
579,581
580,581
580,582
581,582
581,583
581,584
581,585
582,583
584,585
587,588
588,589
591,592
591,593
592,593
592,594
593,594
595,596
597,598
599,600
600,601
600,602
601,602
603,604
604,605
606,607
606,608
606,609
606,610
607,608
608,609
608,610
609,610
611,612
611,613
612,613
615,616
615,617
616,617
618,619
620,621
620,622
621,622
623,624
623,625
624,625
627,628
628,629
628,630
629,630
629,631
630,631
630,632
631,632
634,635
636,637
636,638
637,638
638,639
638,640
639,640
641,642
641,643
641,644
644,645
645,646
645,647
646,647
646,648
647,648
649,650
651,652
653,654
653,655
654,655
654,656
655,656
655,657
656,657
656,658
657,658
660,661
662,663
662,664
662,665
662,666
662,667
663,664
665,666
665,667
666,667
666,668
667,668
671,672
671,673
672,673
674,675
676,677
676,678
677,678
677,679
678,679
678,680
679,680
679,681
680,681
680,682
681,682
688,689
688,690
689,690
689,691
690,691
690,692
691,692
691,693
692,693
692,694
693,694
700,701
700,702
701,702
702,703
702,704
703,704
705,706
705,707
706,707
710,711
710,712
710,713
711,712
711,713
712,713
714,715
716,717
716,718
716,719
716,720
716,721
716,722
716,723
717,718
718,719
718,720
718,721
718,722
718,723
718,724
718,725
719,720
721,722
723,724
725,726
726,727
728,729
728,730
729,730
732,733
732,734
733,734
735,736
738,739
739,740
739,741
740,741
740,742
741,742
741,743
742,743
746,747
746,748
747,748
747,749
748,749
748,750
749,750
754,755
755,756
755,757
756,757
756,758
757,758
760,761
762,763
763,764
763,765
764,765
766,767
766,768
766,769
766,770
767,768
769,770
771,772
774,775
774,776
775,776
775,777
776,777
779,780
780,781
782,783
783,784
783,785
784,785
786,787
786,788
786,789
786,790
787,788
789,790
791,792
794,795
794,796
795,796
795,797
796,797
799,800
800,801
802,803
802,804
803,804
804,805
804,806
805,806
805,807
806,807
809,810
811,812
812,813
812,814
813,814
815,816
817,818
818,819
818,820
819,820
821,822
821,823
821,824
821,825
822,823
824,825
824,826
825,826
825,827
826,827
828,829
830,831
832,833
834,835
834,836
835,836
835,837
837,838
839,840
841,842
841,843
842,843
842,844
843,844
846,847
847,848
849,850
850,851
850,852
851,852
853,854
855,856
856,857
856,858
857,858
857,859
858,859
858,860
859,860
863,864
865,866
866,867
866,868
867,868
867,869
868,869
868,870
869,870
873,874
875,876
876,877
876,878
876,879
877,878
879,880
880,881
880,882
881,882
881,883
882,883
882,884
883,884
883,885
884,885
886,887
891,892
892,893
894,895
895,896
895,897
896,897
896,898
897,898
897,899
898,899
902,903
904,905
905,906
905,907
906,907
906,908
907,908
907,909
908,909
912,913
914,915
915,916
915,917
916,917
916,918
917,918
917,919
918,919
922,923
924,925
925,926
925,927
926,927
926,928
927,928
927,929
928,929
932,933
934,935
935,936
935,937
936,937
936,938
937,938
937,939
938,939
942,943
944,945
945,946
945,947
946,947
946,948
947,948
947,949
948,949
952,953
954,955
954,956
955,956
955,957
956,957
956,958
957,958
957,959
958,959
963,964
963,965
964,965
965,966
965,967
965,968
965,969
966,967
968,969
970,971
971,972
973,974
974,975
976,977
977,978
977,979
977,980
978,979
980,981
981,982
981,983
982,983
985,986
986,987
988,989
988,990
988,991
989,990
991,992
991,993
991,994
991,995
992,993
993,994
993,995
994,995
994,996
995,996
995,997
996,997
996,998
997,998
1002,1003
1002,1004
1003,1004
1003,1005
1004,1005
1008,1009
1009,1010
1009,1011
1010,1011
1010,1012
1011,1012
1011,1013
1012,1013
1016,1017
1018,1019
1019,1020
1019,1021
1020,1021
1020,1022
1021,1022
1021,1023
1022,1023
1022,1024
1023,1024
1028,1029
1028,1030
1029,1030
1029,1031
1030,1031
1034,1035
1035,1036
1035,1037
1036,1037
1036,1038
1037,1038
1037,1039
1038,1039
1042,1043
1044,1045
1044,1046
1045,1046
1045,1047
1046,1047
1048,1049
1050,1051
1050,1052
1050,1053
1050,1054
1050,1055
1050,1056
1051,1052
1052,1053
1052,1054
1053,1054
1055,1056
1055,1057
1058,1059
1059,1060
1059,1061
1059,1062
1060,1061
1062,1063
1064,1065
1065,1066
1067,1068
1068,1069
1068,1070
1069,1070
1069,1071
1070,1071
1070,1072
1071,1072
1075,1076
1075,1077
1076,1077
1076,1078
1077,1078
1081,1082
1082,1083
1082,1084
1083,1084
1083,1085
1084,1085
1084,1086
1085,1086
1089,1090
1089,1091
1090,1091
1090,1092
1091,1092
1095,1096
1096,1097
1096,1098
1097,1098
1097,1099
1098,1099
1098,1100
1099,1100
1103,1104
1105,1106
1106,1107
1106,1108
1107,1108
1107,1109
1108,1109
1108,1110
1109,1110
1113,1114
1113,1115
1113,1116
1113,1117
1114,1115
1116,1117
1118,1119
1120,1121
1122,1123
1123,1124
1123,1125
1124,1125
1126,1127
1126,1128
1127,1128
1127,1129
1128,1129
1130,1131
1132,1133
-----nextToken-----
2,4,7,9,10,15,17,20,24,26,30,32,33,37,39,40,43,45,49,51,53,55,57,58,60,62,63,65,67,68,72,74,76,78,81,83,87,89,92,95,101,102,107,110,112,113,116,117,122,125,127,128,129,130,131,134,135,138,142,145,149,150,154,157,161,164,166,167,170,175,176,179,181,184,188,189,194,196,197,199,200,202,205,207,208,210,213,214,217,219,221,225,228,232,234,236,240,243,245,246,249,254,255,259,261,263,267,270,275,276,279,280,283,288,291,293,296,298,301,306,307,311,313,315,319,322,327,328,331,332,335,340,343,345,347,349,352,357,358,362,365,367,371,374,380,382,384,388,389,390,394,396,400,403,405,407,408,411,414,417,419,424,425,426,430,433,434,435,438,441,445,448,452,454,457,460,461,462,465,466,470,473,475,477,480,482,485,488,490,491,492,497,499,501,506,508,510,511,515,516,519,523,527,529,531,537,539,540,543,544,548,550,552,557,559,560,563,567,569,570,574,576,577,583,585,586,589,590,594,596,598,602,605,610,613,614,617,619,622,625,626,632,633,635,640,642,643,648,650,652,658,659,661,664,668,669,670,673,675,682,683,684,685,686,687,694,695,696,697,698,699,704,707,708,709,713,715,720,722,724,727,730,731,734,736,737,743,744,745,750,751,752,753,758,759,761,765,768,770,772,773,777,778,781,785,788,790,792,793,797,798,801,807,808,810,814,816,820,823,827,829,831,833,836,838,840,844,845,848,852,854,860,861,862,864,870,871,872,874,878,885,887,888,889,890,893,899,900,901,903,909,910,911,913,919,920,921,923,929,930,931,933,939,940,941,943,949,950,951,953,959,960,961,962,967,969,972,975,979,983,984,987,990,998,999,1000,1001,1005,1006,1007,1013,1014,1015,1017,1024,1025,1026,1027,1031,1032,1033,1039,1040,1041,1043,1047,1049,1054,1056,1057,1061,1063,1066,1072,1073,1074,1078,1079,1080,1086,1087,1088,1092,1093,1094,1100,1101,1102,1104,1110,1111,1112,1115,1117,1119,1121,1125,1129,1131,1133
-----computeFrom-----
97,98
97,99
98,99
98,100
99,100
99,101
103,104
103,105
105,106
105,107
118,119
118,120
120,121
120,122
140,141
140,142
147,148
147,149
159,160
159,161
172,173
172,174
173,174
173,175
177,178
177,179
186,187
186,188
223,224
223,225
238,239
238,240
251,252
251,253
252,253
252,254
256,257
256,258
273,274
273,275
277,278
277,279
286,287
286,288
303,304
303,305
304,305
304,306
308,309
308,310
325,326
325,327
329,330
329,331
338,339
338,340
354,355
354,356
355,356
355,357
359,360
359,361
376,377
376,378
392,393
392,394
398,399
398,400
421,422
421,423
468,469
468,470
493,494
493,495
494,495
494,496
495,496
495,497
504,505
504,506
513,514
513,515
521,522
521,523
533,534
533,535
534,535
534,536
545,546
545,547
579,580
579,581
580,581
580,582
591,592
591,593
608,609
608,610
615,616
615,617
620,621
620,622
629,630
629,631
654,655
654,656
655,656
655,657
702,703
702,704
711,712
711,713
739,740
739,741
746,747
746,748
755,756
755,757
763,764
763,765
775,776
775,777
783,784
783,785
795,796
795,797
804,805
804,806
818,819
818,820
842,843
842,844
856,857
856,858
866,867
866,868
895,896
895,897
905,906
905,907
915,916
915,917
925,926
925,927
935,936
935,937
945,946
945,947
955,956
955,957
993,994
993,995
1009,1010
1009,1011
1019,1020
1019,1021
1035,1036
1035,1037
1045,1046
1045,1047
1068,1069
1068,1070
1082,1083
1082,1084
1096,1097
1096,1098
1106,1107
1106,1108
-----guardedBy-----
122,138
179,184
188,357
515,519
537,583
550,792
548,594
632,652
694,707
659,708
713,790
777,781
797,801
844,848
959,983
960,984
-----guardedByNegation-----
713,816
-----lastLexicalUse-----
713,816
-----jump-----
713,816
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Pointer;Name;Declarator;Name;Declarator;Pointer;Name;Declarator;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;LabelStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;DefaultStatement;ReturnStatement;IdExpression;Name;CaseStatement;IdExpression;Name;SwitchStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;GotoStatement;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;BreakStatement;DefaultStatement;ReturnStatement;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;LiteralExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
static intzbuildfont11(i_ctx_t *i_ctx_p){    os_ptr op = osp;    gs_font_cid_data common;    gs_font_type42 *pfont;    gs_font_cid2 *pfcid;    int MetricsCount;    ref rcidmap, ignore_gdir, file, *pfile, cfnstr, *pCIDFontName, CIDFontName, *t;    ulong loca_glyph_pos[2][2];    int code = cid_font_data_param(op, &common, &ignore_gdir);    if (code < 0 ||	(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||	(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0	)	return code;    /*     * Since build_gs_simple_font may resize the dictionary and cause     * pointers to become invalid, save CIDFontName     */    CIDFontName = *pCIDFontName;    if (MetricsCount & 1)	/* only allowable values are 0, 2, 4 */	return_error(e_rangecheck);    code = dict_find_string(op, "File", &pfile);    if (code < 0 && code != e_undefined)	return code;    if (code > 0) {	ref *file_table_pos, *a, v;	const char *name[2] = {"loca", "glyf"};	int i, j;	/*	 * Since build_gs_simple_font may resize the dictionary and cause	 * pointers to become invalid, save File and CIDFontName	 */	file = *pfile;        check_read_type(file, t_file);	code = dict_find_string(op, "file_table_pos", &file_table_pos);	if (code <= 0 || r_type(file_table_pos) != t_dictionary)	    return_error(e_invalidfont);	for (i = 0; i < 2; i++) {	    code = dict_find_string(file_table_pos, name[i], &a);	    if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);	    for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }	}    } else	pfile = NULL;    code = font_string_array_param(imemory, op, "CIDMap", &rcidmap);    switch (code) {    case 0:			/* in PLRM3 */    gdb:	/* GDBytes is required for indexing a string or string array. */	if (common.GDBytes == 0)	    return_error(e_rangecheck);	break;    default:	return code;    case e_typecheck:	switch (r_type(&rcidmap)) {	case t_string:		/* in PLRM3 */	    goto gdb;	case t_dictionary:	/* added in 3011 */	case t_integer:		/* added in 3011 */	    break;	default:	    return code;	}	break;    }    code = build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,				  &st_gs_font_cid2,				  (const char *)0, "%Type11BuildGlyph",				  bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional |				  (pfile != NULL ? bf_has_font_file : 0));    if (code < 0)	return code;    pfcid = (gs_font_cid2 *)pfont;    if (dict_find_string(op, "subst_CID_on_WMode", &t) > 0 && r_type(t) == t_dictionary) {	gs_subst_CID_on_WMode_t *subst = NULL;	ref *o;	gs_font *font;	if (dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string)	    return_error(e_invalidfont);	for (font = ifont_dir->orig_fonts; font != NULL; font = font->next) {	    if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }	}	if (subst == NULL) {	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");	    subst->data[0] = subst->data[1] = 0;	    pfcid->subst_CID_on_WMode = subst;	    code = get_subst_CID_on_WMode(subst, t, 0);	    if (code < 0)		return code;	    code = get_subst_CID_on_WMode(subst, t, 1);	    if (code < 0)		return code;	} else {	    pfcid->subst_CID_on_WMode = subst;	    rc_increment(subst);	}	code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid);	if (code < 0)	    return code;	rc_increment(subst);   }    pfcid->cidata.common = common;    pfcid->cidata.MetricsCount = MetricsCount;    ref_assign(&pfont_data(pfont)->u.type42.CIDMap, &rcidmap);    pfcid->cidata.CIDMap_proc = z11_CIDMap_proc;    pfcid->data.substitute_glyph_index_vertical = font11_substitute_glyph_index_vertical;    pfont->procs.enumerate_glyph = z11_enumerate_glyph;    pfont->procs.glyph_info = z11_glyph_info;    pfont->procs.glyph_outline = z11_glyph_outline;    pfont->data.get_glyph_index = z11_get_glyph_index;    if (pfcid->font_name.size == 0) {	get_font_name(imemory, &cfnstr, &CIDFontName);	copy_font_name(&pfcid->font_name, &cfnstr);    }    if (MetricsCount) {	/* "Wrap" the glyph accessor procedures. */	pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline;	pfont->data.get_outline = z11_get_outline;	pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics;	pfont->data.get_metrics = z11_get_metrics;    } else if(pfile != NULL) {        /*	 * We assume that disk fonts has no MetricsCount.	 * We could do not, but the number of virtual function wariants increases.	 */	stream *s;	check_read_file(s, &file);	pfont->data.loca = loca_glyph_pos[0][0];	pfont->data.glyf = loca_glyph_pos[1][0];	pfont->data.get_outline = gs_get_glyph_data_cached;   	pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);    }    return define_gs_font((gs_font *)pfont);}
static int
zbuildfont11(i_ctx_t *i_ctx_p)
zbuildfont11
i_ctx_t *i_ctx_p
i_ctx_t
i_ctx_t
*i_ctx_p
*
i_ctx_p
{    os_ptr op = osp;    gs_font_cid_data common;    gs_font_type42 *pfont;    gs_font_cid2 *pfcid;    int MetricsCount;    ref rcidmap, ignore_gdir, file, *pfile, cfnstr, *pCIDFontName, CIDFontName, *t;    ulong loca_glyph_pos[2][2];    int code = cid_font_data_param(op, &common, &ignore_gdir);    if (code < 0 ||	(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||	(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0	)	return code;    /*     * Since build_gs_simple_font may resize the dictionary and cause     * pointers to become invalid, save CIDFontName     */    CIDFontName = *pCIDFontName;    if (MetricsCount & 1)	/* only allowable values are 0, 2, 4 */	return_error(e_rangecheck);    code = dict_find_string(op, "File", &pfile);    if (code < 0 && code != e_undefined)	return code;    if (code > 0) {	ref *file_table_pos, *a, v;	const char *name[2] = {"loca", "glyf"};	int i, j;	/*	 * Since build_gs_simple_font may resize the dictionary and cause	 * pointers to become invalid, save File and CIDFontName	 */	file = *pfile;        check_read_type(file, t_file);	code = dict_find_string(op, "file_table_pos", &file_table_pos);	if (code <= 0 || r_type(file_table_pos) != t_dictionary)	    return_error(e_invalidfont);	for (i = 0; i < 2; i++) {	    code = dict_find_string(file_table_pos, name[i], &a);	    if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);	    for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }	}    } else	pfile = NULL;    code = font_string_array_param(imemory, op, "CIDMap", &rcidmap);    switch (code) {    case 0:			/* in PLRM3 */    gdb:	/* GDBytes is required for indexing a string or string array. */	if (common.GDBytes == 0)	    return_error(e_rangecheck);	break;    default:	return code;    case e_typecheck:	switch (r_type(&rcidmap)) {	case t_string:		/* in PLRM3 */	    goto gdb;	case t_dictionary:	/* added in 3011 */	case t_integer:		/* added in 3011 */	    break;	default:	    return code;	}	break;    }    code = build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,				  &st_gs_font_cid2,				  (const char *)0, "%Type11BuildGlyph",				  bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional |				  (pfile != NULL ? bf_has_font_file : 0));    if (code < 0)	return code;    pfcid = (gs_font_cid2 *)pfont;    if (dict_find_string(op, "subst_CID_on_WMode", &t) > 0 && r_type(t) == t_dictionary) {	gs_subst_CID_on_WMode_t *subst = NULL;	ref *o;	gs_font *font;	if (dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string)	    return_error(e_invalidfont);	for (font = ifont_dir->orig_fonts; font != NULL; font = font->next) {	    if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }	}	if (subst == NULL) {	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");	    subst->data[0] = subst->data[1] = 0;	    pfcid->subst_CID_on_WMode = subst;	    code = get_subst_CID_on_WMode(subst, t, 0);	    if (code < 0)		return code;	    code = get_subst_CID_on_WMode(subst, t, 1);	    if (code < 0)		return code;	} else {	    pfcid->subst_CID_on_WMode = subst;	    rc_increment(subst);	}	code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid);	if (code < 0)	    return code;	rc_increment(subst);   }    pfcid->cidata.common = common;    pfcid->cidata.MetricsCount = MetricsCount;    ref_assign(&pfont_data(pfont)->u.type42.CIDMap, &rcidmap);    pfcid->cidata.CIDMap_proc = z11_CIDMap_proc;    pfcid->data.substitute_glyph_index_vertical = font11_substitute_glyph_index_vertical;    pfont->procs.enumerate_glyph = z11_enumerate_glyph;    pfont->procs.glyph_info = z11_glyph_info;    pfont->procs.glyph_outline = z11_glyph_outline;    pfont->data.get_glyph_index = z11_get_glyph_index;    if (pfcid->font_name.size == 0) {	get_font_name(imemory, &cfnstr, &CIDFontName);	copy_font_name(&pfcid->font_name, &cfnstr);    }    if (MetricsCount) {	/* "Wrap" the glyph accessor procedures. */	pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline;	pfont->data.get_outline = z11_get_outline;	pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics;	pfont->data.get_metrics = z11_get_metrics;    } else if(pfile != NULL) {        /*	 * We assume that disk fonts has no MetricsCount.	 * We could do not, but the number of virtual function wariants increases.	 */	stream *s;	check_read_file(s, &file);	pfont->data.loca = loca_glyph_pos[0][0];	pfont->data.glyf = loca_glyph_pos[1][0];	pfont->data.get_outline = gs_get_glyph_data_cached;   	pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);    }    return define_gs_font((gs_font *)pfont);}
os_ptr op = osp;
os_ptr op = osp;
os_ptr
os_ptr
op = osp
op
= osp
osp
osp
gs_font_cid_data common;
gs_font_cid_data common;
gs_font_cid_data
gs_font_cid_data
common
common
gs_font_type42 *pfont;
gs_font_type42 *pfont;
gs_font_type42
gs_font_type42
*pfont
*
pfont
gs_font_cid2 *pfcid;
gs_font_cid2 *pfcid;
gs_font_cid2
gs_font_cid2
*pfcid
*
pfcid
int MetricsCount;
int MetricsCount;
int
MetricsCount
MetricsCount
ref rcidmap, ignore_gdir, file, *pfile, cfnstr, *pCIDFontName, CIDFontName, *t;
ref rcidmap, ignore_gdir, file, *pfile, cfnstr, *pCIDFontName, CIDFontName, *t;
ref
ref
rcidmap
rcidmap
ignore_gdir
ignore_gdir
file
file
*pfile
*
pfile
cfnstr
cfnstr
*pCIDFontName
*
pCIDFontName
CIDFontName
CIDFontName
*t
*
t
ulong loca_glyph_pos[2][2];
ulong loca_glyph_pos[2][2];
ulong
ulong
loca_glyph_pos[2][2]
loca_glyph_pos
[2]
2
[2]
2
int code = cid_font_data_param(op, &common, &ignore_gdir);
int code = cid_font_data_param(op, &common, &ignore_gdir);
int
code = cid_font_data_param(op, &common, &ignore_gdir)
code
= cid_font_data_param(op, &common, &ignore_gdir)
cid_font_data_param(op, &common, &ignore_gdir)
cid_font_data_param
cid_font_data_param
op
op
&common
common
common
&ignore_gdir
ignore_gdir
ignore_gdir
if (code < 0 ||	(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||	(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0	)	return code;
code < 0 ||	(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||	(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0
code < 0 ||	(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0
code < 0
code
code
0
(code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0
(code = dict_find_string(op, "CIDFontName", &pCIDFontName))
code = dict_find_string(op, "CIDFontName", &pCIDFontName)
code
code
dict_find_string(op, "CIDFontName", &pCIDFontName)
dict_find_string
dict_find_string
op
op
"CIDFontName"
&pCIDFontName
pCIDFontName
pCIDFontName
0
(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0
(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount))
code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)
code
code
dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)
dict_int_param
dict_int_param
op
op
"MetricsCount"
0
4
0
&MetricsCount
MetricsCount
MetricsCount
0
return code;
code
code
CIDFontName = *pCIDFontName;
CIDFontName = *pCIDFontName
CIDFontName
CIDFontName
*pCIDFontName
pCIDFontName
pCIDFontName
if (MetricsCount & 1)	/* only allowable values are 0, 2, 4 */	return_error(e_rangecheck);
MetricsCount & 1
MetricsCount
MetricsCount
1
return_error(e_rangecheck);
return_error(e_rangecheck);
return_error
return_error
(e_rangecheck)
e_rangecheck
e_rangecheck
code = dict_find_string(op, "File", &pfile);
code = dict_find_string(op, "File", &pfile)
code
code
dict_find_string(op, "File", &pfile)
dict_find_string
dict_find_string
op
op
"File"
&pfile
pfile
pfile
if (code < 0 && code != e_undefined)	return code;
code < 0 && code != e_undefined
code < 0
code
code
0
code != e_undefined
code
code
e_undefined
e_undefined
return code;
code
code
if (code > 0) {	ref *file_table_pos, *a, v;	const char *name[2] = {"loca", "glyf"};	int i, j;	/*	 * Since build_gs_simple_font may resize the dictionary and cause	 * pointers to become invalid, save File and CIDFontName	 */	file = *pfile;        check_read_type(file, t_file);	code = dict_find_string(op, "file_table_pos", &file_table_pos);	if (code <= 0 || r_type(file_table_pos) != t_dictionary)	    return_error(e_invalidfont);	for (i = 0; i < 2; i++) {	    code = dict_find_string(file_table_pos, name[i], &a);	    if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);	    for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }	}    } else	pfile = NULL;
code > 0
code
code
0
{	ref *file_table_pos, *a, v;	const char *name[2] = {"loca", "glyf"};	int i, j;	/*	 * Since build_gs_simple_font may resize the dictionary and cause	 * pointers to become invalid, save File and CIDFontName	 */	file = *pfile;        check_read_type(file, t_file);	code = dict_find_string(op, "file_table_pos", &file_table_pos);	if (code <= 0 || r_type(file_table_pos) != t_dictionary)	    return_error(e_invalidfont);	for (i = 0; i < 2; i++) {	    code = dict_find_string(file_table_pos, name[i], &a);	    if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);	    for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }	}    }
ref *file_table_pos, *a, v;
ref *file_table_pos, *a, v;
ref
ref
*file_table_pos
*
file_table_pos
*a
*
a
v
v
const char *name[2] = {"loca", "glyf"};
const char *name[2] = {"loca", "glyf"};
const char
*name[2] = {"loca", "glyf"}
*
name
[2]
2
= {"loca", "glyf"}
{"loca", "glyf"}
"loca"
"glyf"
int i, j;
int i, j;
int
i
i
j
j
file = *pfile;
file = *pfile
file
file
*pfile
pfile
pfile
check_read_type(file, t_file);
check_read_type(file, t_file)
check_read_type
check_read_type
file
file
t_file
t_file
code = dict_find_string(op, "file_table_pos", &file_table_pos);
code = dict_find_string(op, "file_table_pos", &file_table_pos)
code
code
dict_find_string(op, "file_table_pos", &file_table_pos)
dict_find_string
dict_find_string
op
op
"file_table_pos"
&file_table_pos
file_table_pos
file_table_pos
if (code <= 0 || r_type(file_table_pos) != t_dictionary)	    return_error(e_invalidfont);
code <= 0 || r_type(file_table_pos) != t_dictionary
code <= 0
code
code
0
r_type(file_table_pos) != t_dictionary
r_type(file_table_pos)
r_type
r_type
file_table_pos
file_table_pos
t_dictionary
t_dictionary
return_error(e_invalidfont);
return_error(e_invalidfont);
return_error
return_error
(e_invalidfont)
e_invalidfont
e_invalidfont
for (i = 0; i < 2; i++) {	    code = dict_find_string(file_table_pos, name[i], &a);	    if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);	    for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }	}
i = 0;
i = 0
i
i
0
i < 2
i
i
2
i++
i
i
{	    code = dict_find_string(file_table_pos, name[i], &a);	    if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);	    for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }	}
code = dict_find_string(file_table_pos, name[i], &a);
code = dict_find_string(file_table_pos, name[i], &a)
code
code
dict_find_string(file_table_pos, name[i], &a)
dict_find_string
dict_find_string
file_table_pos
file_table_pos
name[i]
name
name
i
i
&a
a
a
if (code <= 0 || r_type(a) != t_array)		return_error(e_invalidfont);
code <= 0 || r_type(a) != t_array
code <= 0
code
code
0
r_type(a) != t_array
r_type(a)
r_type
r_type
a
a
t_array
t_array
return_error(e_invalidfont);
return_error(e_invalidfont);
return_error
return_error
(e_invalidfont)
e_invalidfont
e_invalidfont
for (j = 0; j < 2; j++) {	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }
j = 0;
j = 0
j
j
0
j < 2
j
j
2
j++
j
j
{	        code = array_get(imemory, a, j, &v);		if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);		loca_glyph_pos[i][j] = v.value.intval;	    }
code = array_get(imemory, a, j, &v);
code = array_get(imemory, a, j, &v)
code
code
array_get(imemory, a, j, &v)
array_get
array_get
imemory
imemory
a
a
j
j
&v
v
v
if (code < 0 || r_type(&v) != t_integer)		    return_error(e_invalidfont);
code < 0 || r_type(&v) != t_integer
code < 0
code
code
0
r_type(&v) != t_integer
r_type(&v)
r_type
r_type
&v
v
v
t_integer
t_integer
return_error(e_invalidfont);
return_error(e_invalidfont);
return_error
return_error
(e_invalidfont)
e_invalidfont
e_invalidfont
loca_glyph_pos[i][j] = v.value.intval;
loca_glyph_pos[i][j] = v.value.intval
loca_glyph_pos[i][j]
loca_glyph_pos[i]
loca_glyph_pos
loca_glyph_pos
i
i
j
j
v.value.intval
v.value
v
v
value
intval
pfile = NULL;
pfile = NULL
pfile
pfile
NULL
NULL
code = font_string_array_param(imemory, op, "CIDMap", &rcidmap);
code = font_string_array_param(imemory, op, "CIDMap", &rcidmap)
code
code
font_string_array_param(imemory, op, "CIDMap", &rcidmap)
font_string_array_param
font_string_array_param
imemory
imemory
op
op
"CIDMap"
&rcidmap
rcidmap
rcidmap
switch (code) {    case 0:			/* in PLRM3 */    gdb:	/* GDBytes is required for indexing a string or string array. */	if (common.GDBytes == 0)	    return_error(e_rangecheck);	break;    default:	return code;    case e_typecheck:	switch (r_type(&rcidmap)) {	case t_string:		/* in PLRM3 */	    goto gdb;	case t_dictionary:	/* added in 3011 */	case t_integer:		/* added in 3011 */	    break;	default:	    return code;	}	break;    }
code
code
{    case 0:			/* in PLRM3 */    gdb:	/* GDBytes is required for indexing a string or string array. */	if (common.GDBytes == 0)	    return_error(e_rangecheck);	break;    default:	return code;    case e_typecheck:	switch (r_type(&rcidmap)) {	case t_string:		/* in PLRM3 */	    goto gdb;	case t_dictionary:	/* added in 3011 */	case t_integer:		/* added in 3011 */	    break;	default:	    return code;	}	break;    }
case 0:
0
gdb:	/* GDBytes is required for indexing a string or string array. */	if (common.GDBytes == 0)	    return_error(e_rangecheck);
gdb
if (common.GDBytes == 0)	    return_error(e_rangecheck);
common.GDBytes == 0
common.GDBytes
common
common
GDBytes
0
return_error(e_rangecheck);
return_error(e_rangecheck);
return_error
return_error
(e_rangecheck)
e_rangecheck
e_rangecheck
break;
default:
return code;
code
code
case e_typecheck:
e_typecheck
e_typecheck
switch (r_type(&rcidmap)) {	case t_string:		/* in PLRM3 */	    goto gdb;	case t_dictionary:	/* added in 3011 */	case t_integer:		/* added in 3011 */	    break;	default:	    return code;	}
r_type(&rcidmap)
r_type
r_type
&rcidmap
rcidmap
rcidmap
{	case t_string:		/* in PLRM3 */	    goto gdb;	case t_dictionary:	/* added in 3011 */	case t_integer:		/* added in 3011 */	    break;	default:	    return code;	}
case t_string:
t_string
t_string
goto gdb;
gdb
case t_dictionary:
t_dictionary
t_dictionary
case t_integer:
t_integer
t_integer
break;
default:
return code;
code
code
break;
code = build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,				  &st_gs_font_cid2,				  (const char *)0, "%Type11BuildGlyph",				  bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional |				  (pfile != NULL ? bf_has_font_file : 0));
code = build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,				  &st_gs_font_cid2,				  (const char *)0, "%Type11BuildGlyph",				  bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional |				  (pfile != NULL ? bf_has_font_file : 0))
code
code
build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,				  &st_gs_font_cid2,				  (const char *)0, "%Type11BuildGlyph",				  bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional |				  (pfile != NULL ? bf_has_font_file : 0))
build_gs_TrueType_font
build_gs_TrueType_font
i_ctx_p
i_ctx_p
op
op
&pfont
pfont
pfont
ft_CID_TrueType
ft_CID_TrueType
&st_gs_font_cid2
st_gs_font_cid2
st_gs_font_cid2
(const char *)0
const char *
const char
*
*
0
"%Type11BuildGlyph"
bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional |				  (pfile != NULL ? bf_has_font_file : 0)
bf_Encoding_optional |				  bf_UniqueID_ignored |				  bf_CharStrings_optional
bf_Encoding_optional |				  bf_UniqueID_ignored
bf_Encoding_optional
bf_Encoding_optional
bf_UniqueID_ignored
bf_UniqueID_ignored
bf_CharStrings_optional
bf_CharStrings_optional
(pfile != NULL ? bf_has_font_file : 0)
pfile != NULL ? bf_has_font_file : 0
pfile != NULL
pfile
pfile
NULL
NULL
bf_has_font_file
bf_has_font_file
0
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
pfcid = (gs_font_cid2 *)pfont;
pfcid = (gs_font_cid2 *)pfont
pfcid
pfcid
(gs_font_cid2 *)pfont
gs_font_cid2 *
gs_font_cid2
gs_font_cid2
*
*
pfont
pfont
if (dict_find_string(op, "subst_CID_on_WMode", &t) > 0 && r_type(t) == t_dictionary) {	gs_subst_CID_on_WMode_t *subst = NULL;	ref *o;	gs_font *font;	if (dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string)	    return_error(e_invalidfont);	for (font = ifont_dir->orig_fonts; font != NULL; font = font->next) {	    if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }	}	if (subst == NULL) {	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");	    subst->data[0] = subst->data[1] = 0;	    pfcid->subst_CID_on_WMode = subst;	    code = get_subst_CID_on_WMode(subst, t, 0);	    if (code < 0)		return code;	    code = get_subst_CID_on_WMode(subst, t, 1);	    if (code < 0)		return code;	} else {	    pfcid->subst_CID_on_WMode = subst;	    rc_increment(subst);	}	code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid);	if (code < 0)	    return code;	rc_increment(subst);   }
dict_find_string(op, "subst_CID_on_WMode", &t) > 0 && r_type(t) == t_dictionary
dict_find_string(op, "subst_CID_on_WMode", &t) > 0
dict_find_string(op, "subst_CID_on_WMode", &t)
dict_find_string
dict_find_string
op
op
"subst_CID_on_WMode"
&t
t
t
0
r_type(t) == t_dictionary
r_type(t)
r_type
r_type
t
t
t_dictionary
t_dictionary
{	gs_subst_CID_on_WMode_t *subst = NULL;	ref *o;	gs_font *font;	if (dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string)	    return_error(e_invalidfont);	for (font = ifont_dir->orig_fonts; font != NULL; font = font->next) {	    if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }	}	if (subst == NULL) {	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");	    subst->data[0] = subst->data[1] = 0;	    pfcid->subst_CID_on_WMode = subst;	    code = get_subst_CID_on_WMode(subst, t, 0);	    if (code < 0)		return code;	    code = get_subst_CID_on_WMode(subst, t, 1);	    if (code < 0)		return code;	} else {	    pfcid->subst_CID_on_WMode = subst;	    rc_increment(subst);	}	code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid);	if (code < 0)	    return code;	rc_increment(subst);   }
gs_subst_CID_on_WMode_t *subst = NULL;
gs_subst_CID_on_WMode_t *subst = NULL;
gs_subst_CID_on_WMode_t
gs_subst_CID_on_WMode_t
*subst = NULL
*
subst
= NULL
NULL
NULL
ref *o;
ref *o;
ref
ref
*o
*
o
gs_font *font;
gs_font *font;
gs_font
gs_font
*font
*
font
if (dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string)	    return_error(e_invalidfont);
dict_find_string(t, "Ordering", &o) <= 0 || r_type(o) != t_string
dict_find_string(t, "Ordering", &o) <= 0
dict_find_string(t, "Ordering", &o)
dict_find_string
dict_find_string
t
t
"Ordering"
&o
o
o
0
r_type(o) != t_string
r_type(o)
r_type
r_type
o
o
t_string
t_string
return_error(e_invalidfont);
return_error(e_invalidfont);
return_error
return_error
(e_invalidfont)
e_invalidfont
e_invalidfont
for (font = ifont_dir->orig_fonts; font != NULL; font = font->next) {	    if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }	}
font = ifont_dir->orig_fonts;
font = ifont_dir->orig_fonts
font
font
ifont_dir->orig_fonts
ifont_dir
ifont_dir
orig_fonts
font != NULL
font
font
NULL
NULL
font = font->next
font
font
font->next
font
font
next
{	    if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }	}
if (font->FontType == ft_CID_TrueType) {		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }
font->FontType == ft_CID_TrueType
font->FontType
font
font
FontType
ft_CID_TrueType
ft_CID_TrueType
{		gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;		if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}	    }
gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;
gs_font_cid2 *pfcid1 = (gs_font_cid2 *)font;
gs_font_cid2
gs_font_cid2
*pfcid1 = (gs_font_cid2 *)font
*
pfcid1
= (gs_font_cid2 *)font
(gs_font_cid2 *)font
gs_font_cid2 *
gs_font_cid2
gs_font_cid2
*
*
font
font
if (pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)) {		    subst = pfcid1->subst_CID_on_WMode;		    break;		}
pfcid1->subst_CID_on_WMode != NULL &&		    bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)
pfcid1->subst_CID_on_WMode != NULL
pfcid1->subst_CID_on_WMode
pfcid1
pfcid1
subst_CID_on_WMode
NULL
NULL
bytes_compare(o->value.const_bytes, r_size(o),			    pfcid1->cidata.common.CIDSystemInfo.Ordering.data,			    pfcid1->cidata.common.CIDSystemInfo.Ordering.size)
bytes_compare
bytes_compare
o->value.const_bytes
o->value
o
o
value
const_bytes
r_size(o)
r_size
r_size
o
o
pfcid1->cidata.common.CIDSystemInfo.Ordering.data
pfcid1->cidata.common.CIDSystemInfo.Ordering
pfcid1->cidata.common.CIDSystemInfo
pfcid1->cidata.common
pfcid1->cidata
pfcid1
pfcid1
cidata
common
CIDSystemInfo
Ordering
data
pfcid1->cidata.common.CIDSystemInfo.Ordering.size
pfcid1->cidata.common.CIDSystemInfo.Ordering
pfcid1->cidata.common.CIDSystemInfo
pfcid1->cidata.common
pfcid1->cidata
pfcid1
pfcid1
cidata
common
CIDSystemInfo
Ordering
size
{		    subst = pfcid1->subst_CID_on_WMode;		    break;		}
subst = pfcid1->subst_CID_on_WMode;
subst = pfcid1->subst_CID_on_WMode
subst
subst
pfcid1->subst_CID_on_WMode
pfcid1
pfcid1
subst_CID_on_WMode
break;
if (subst == NULL) {	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");	    subst->data[0] = subst->data[1] = 0;	    pfcid->subst_CID_on_WMode = subst;	    code = get_subst_CID_on_WMode(subst, t, 0);	    if (code < 0)		return code;	    code = get_subst_CID_on_WMode(subst, t, 1);	    if (code < 0)		return code;	} else {	    pfcid->subst_CID_on_WMode = subst;	    rc_increment(subst);	}
subst == NULL
subst
subst
NULL
NULL
{	    rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");	    subst->data[0] = subst->data[1] = 0;	    pfcid->subst_CID_on_WMode = subst;	    code = get_subst_CID_on_WMode(subst, t, 0);	    if (code < 0)		return code;	    code = get_subst_CID_on_WMode(subst, t, 1);	    if (code < 0)		return code;	}
rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11");
rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,			    pfcid->memory, return_error(e_VMerror), "zbuildfont11")
rc_alloc_struct_1
rc_alloc_struct_1
subst
subst
gs_subst_CID_on_WMode_t
gs_subst_CID_on_WMode_t
&st_subst_CID_on_WMode
st_subst_CID_on_WMode
st_subst_CID_on_WMode
pfcid->memory
pfcid
pfcid
memory
return_error(e_VMerror)
return_error
return_error
e_VMerror
e_VMerror
"zbuildfont11"
subst->data[0] = subst->data[1] = 0;
subst->data[0] = subst->data[1] = 0
subst->data[0]
subst->data
subst
subst
data
0
subst->data[1] = 0
subst->data[1]
subst->data
subst
subst
data
1
0
pfcid->subst_CID_on_WMode = subst;
pfcid->subst_CID_on_WMode = subst
pfcid->subst_CID_on_WMode
pfcid
pfcid
subst_CID_on_WMode
subst
subst
code = get_subst_CID_on_WMode(subst, t, 0);
code = get_subst_CID_on_WMode(subst, t, 0)
code
code
get_subst_CID_on_WMode(subst, t, 0)
get_subst_CID_on_WMode
get_subst_CID_on_WMode
subst
subst
t
t
0
if (code < 0)		return code;
code < 0
code
code
0
return code;
code
code
code = get_subst_CID_on_WMode(subst, t, 1);
code = get_subst_CID_on_WMode(subst, t, 1)
code
code
get_subst_CID_on_WMode(subst, t, 1)
get_subst_CID_on_WMode
get_subst_CID_on_WMode
subst
subst
t
t
1
if (code < 0)		return code;
code < 0
code
code
0
return code;
code
code
{	    pfcid->subst_CID_on_WMode = subst;	    rc_increment(subst);	}
pfcid->subst_CID_on_WMode = subst;
pfcid->subst_CID_on_WMode = subst
pfcid->subst_CID_on_WMode
pfcid
pfcid
subst_CID_on_WMode
subst
subst
rc_increment(subst);
rc_increment(subst)
rc_increment
rc_increment
subst
subst
code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid);
code = gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid)
code
code
gs_font_notify_register((gs_font *)pfcid, release_subst_CID_on_WMode, (void *)pfcid)
gs_font_notify_register
gs_font_notify_register
(gs_font *)pfcid
gs_font *
gs_font
gs_font
*
*
pfcid
pfcid
release_subst_CID_on_WMode
release_subst_CID_on_WMode
(void *)pfcid
void *
void
*
*
pfcid
pfcid
if (code < 0)	    return code;
code < 0
code
code
0
return code;
code
code
rc_increment(subst);
rc_increment(subst)
rc_increment
rc_increment
subst
subst
pfcid->cidata.common = common;
pfcid->cidata.common = common
pfcid->cidata.common
pfcid->cidata
pfcid
pfcid
cidata
common
common
common
pfcid->cidata.MetricsCount = MetricsCount;
pfcid->cidata.MetricsCount = MetricsCount
pfcid->cidata.MetricsCount
pfcid->cidata
pfcid
pfcid
cidata
MetricsCount
MetricsCount
MetricsCount
ref_assign(&pfont_data(pfont)->u.type42.CIDMap, &rcidmap);
ref_assign(&pfont_data(pfont)->u.type42.CIDMap, &rcidmap)
ref_assign
ref_assign
&pfont_data(pfont)->u.type42.CIDMap
pfont_data(pfont)->u.type42.CIDMap
pfont_data(pfont)->u.type42
pfont_data(pfont)->u
pfont_data(pfont)
pfont_data
pfont_data
pfont
pfont
u
type42
CIDMap
&rcidmap
rcidmap
rcidmap
pfcid->cidata.CIDMap_proc = z11_CIDMap_proc;
pfcid->cidata.CIDMap_proc = z11_CIDMap_proc
pfcid->cidata.CIDMap_proc
pfcid->cidata
pfcid
pfcid
cidata
CIDMap_proc
z11_CIDMap_proc
z11_CIDMap_proc
pfcid->data.substitute_glyph_index_vertical = font11_substitute_glyph_index_vertical;
pfcid->data.substitute_glyph_index_vertical = font11_substitute_glyph_index_vertical
pfcid->data.substitute_glyph_index_vertical
pfcid->data
pfcid
pfcid
data
substitute_glyph_index_vertical
font11_substitute_glyph_index_vertical
font11_substitute_glyph_index_vertical
pfont->procs.enumerate_glyph = z11_enumerate_glyph;
pfont->procs.enumerate_glyph = z11_enumerate_glyph
pfont->procs.enumerate_glyph
pfont->procs
pfont
pfont
procs
enumerate_glyph
z11_enumerate_glyph
z11_enumerate_glyph
pfont->procs.glyph_info = z11_glyph_info;
pfont->procs.glyph_info = z11_glyph_info
pfont->procs.glyph_info
pfont->procs
pfont
pfont
procs
glyph_info
z11_glyph_info
z11_glyph_info
pfont->procs.glyph_outline = z11_glyph_outline;
pfont->procs.glyph_outline = z11_glyph_outline
pfont->procs.glyph_outline
pfont->procs
pfont
pfont
procs
glyph_outline
z11_glyph_outline
z11_glyph_outline
pfont->data.get_glyph_index = z11_get_glyph_index;
pfont->data.get_glyph_index = z11_get_glyph_index
pfont->data.get_glyph_index
pfont->data
pfont
pfont
data
get_glyph_index
z11_get_glyph_index
z11_get_glyph_index
if (pfcid->font_name.size == 0) {	get_font_name(imemory, &cfnstr, &CIDFontName);	copy_font_name(&pfcid->font_name, &cfnstr);    }
pfcid->font_name.size == 0
pfcid->font_name.size
pfcid->font_name
pfcid
pfcid
font_name
size
0
{	get_font_name(imemory, &cfnstr, &CIDFontName);	copy_font_name(&pfcid->font_name, &cfnstr);    }
get_font_name(imemory, &cfnstr, &CIDFontName);
get_font_name(imemory, &cfnstr, &CIDFontName)
get_font_name
get_font_name
imemory
imemory
&cfnstr
cfnstr
cfnstr
&CIDFontName
CIDFontName
CIDFontName
copy_font_name(&pfcid->font_name, &cfnstr);
copy_font_name(&pfcid->font_name, &cfnstr)
copy_font_name
copy_font_name
&pfcid->font_name
pfcid->font_name
pfcid
pfcid
font_name
&cfnstr
cfnstr
cfnstr
if (MetricsCount) {	/* "Wrap" the glyph accessor procedures. */	pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline;	pfont->data.get_outline = z11_get_outline;	pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics;	pfont->data.get_metrics = z11_get_metrics;    } else if(pfile != NULL) {        /*	 * We assume that disk fonts has no MetricsCount.	 * We could do not, but the number of virtual function wariants increases.	 */	stream *s;	check_read_file(s, &file);	pfont->data.loca = loca_glyph_pos[0][0];	pfont->data.glyf = loca_glyph_pos[1][0];	pfont->data.get_outline = gs_get_glyph_data_cached;   	pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);    }
MetricsCount
MetricsCount
{	/* "Wrap" the glyph accessor procedures. */	pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline;	pfont->data.get_outline = z11_get_outline;	pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics;	pfont->data.get_metrics = z11_get_metrics;    }
pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline;
pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline
pfcid->cidata.orig_procs.get_outline
pfcid->cidata.orig_procs
pfcid->cidata
pfcid
pfcid
cidata
orig_procs
get_outline
pfont->data.get_outline
pfont->data
pfont
pfont
data
get_outline
pfont->data.get_outline = z11_get_outline;
pfont->data.get_outline = z11_get_outline
pfont->data.get_outline
pfont->data
pfont
pfont
data
get_outline
z11_get_outline
z11_get_outline
pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics;
pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics
pfcid->cidata.orig_procs.get_metrics
pfcid->cidata.orig_procs
pfcid->cidata
pfcid
pfcid
cidata
orig_procs
get_metrics
pfont->data.get_metrics
pfont->data
pfont
pfont
data
get_metrics
pfont->data.get_metrics = z11_get_metrics;
pfont->data.get_metrics = z11_get_metrics
pfont->data.get_metrics
pfont->data
pfont
pfont
data
get_metrics
z11_get_metrics
z11_get_metrics
if(pfile != NULL) {        /*	 * We assume that disk fonts has no MetricsCount.	 * We could do not, but the number of virtual function wariants increases.	 */	stream *s;	check_read_file(s, &file);	pfont->data.loca = loca_glyph_pos[0][0];	pfont->data.glyf = loca_glyph_pos[1][0];	pfont->data.get_outline = gs_get_glyph_data_cached;   	pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);    }
pfile != NULL
pfile
pfile
NULL
NULL
{        /*	 * We assume that disk fonts has no MetricsCount.	 * We could do not, but the number of virtual function wariants increases.	 */	stream *s;	check_read_file(s, &file);	pfont->data.loca = loca_glyph_pos[0][0];	pfont->data.glyf = loca_glyph_pos[1][0];	pfont->data.get_outline = gs_get_glyph_data_cached;   	pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);    }
stream *s;
stream *s;
stream
stream
*s
*
s
check_read_file(s, &file);
check_read_file(s, &file)
check_read_file
check_read_file
s
s
&file
file
file
pfont->data.loca = loca_glyph_pos[0][0];
pfont->data.loca = loca_glyph_pos[0][0]
pfont->data.loca
pfont->data
pfont
pfont
data
loca
loca_glyph_pos[0][0]
loca_glyph_pos[0]
loca_glyph_pos
loca_glyph_pos
0
0
pfont->data.glyf = loca_glyph_pos[1][0];
pfont->data.glyf = loca_glyph_pos[1][0]
pfont->data.glyf
pfont->data
pfont
pfont
data
glyf
loca_glyph_pos[1][0]
loca_glyph_pos[1]
loca_glyph_pos
loca_glyph_pos
1
0
pfont->data.get_outline = gs_get_glyph_data_cached;
pfont->data.get_outline = gs_get_glyph_data_cached
pfont->data.get_outline
pfont->data
pfont
pfont
data
get_outline
gs_get_glyph_data_cached
gs_get_glyph_data_cached
pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file);
pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file)
pfont->data.gdcache
pfont->data
pfont
pfont
data
gdcache
gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file)
gs_glyph_cache__alloc
gs_glyph_cache__alloc
pfont
pfont
s
s
gs_type42_get_outline_from_TT_file
gs_type42_get_outline_from_TT_file
return define_gs_font((gs_font *)pfont);
define_gs_font((gs_font *)pfont)
define_gs_font
define_gs_font
(gs_font *)pfont
gs_font *
gs_font
gs_font
*
*
pfont
pfont
-----joern-----
(235,394,0)
(219,401,0)
(459,550,0)
(140,182,0)
(179,601,0)
(115,217,0)
(602,458,0)
(500,383,0)
(630,303,0)
(646,380,0)
(462,522,0)
(151,40,0)
(232,147,0)
(492,102,0)
(447,633,0)
(187,364,0)
(86,636,0)
(238,83,0)
(25,394,0)
(638,171,0)
(612,410,0)
(148,362,0)
(542,131,0)
(183,417,0)
(557,40,0)
(184,130,0)
(524,186,0)
(312,131,0)
(465,68,0)
(642,299,0)
(304,151,0)
(133,131,0)
(276,377,0)
(380,646,0)
(263,62,0)
(597,289,0)
(245,160,0)
(220,299,0)
(241,561,0)
(231,388,0)
(173,526,0)
(401,219,0)
(367,441,0)
(364,45,0)
(463,113,0)
(58,289,0)
(395,504,0)
(387,301,0)
(62,263,0)
(465,336,0)
(99,264,0)
(81,93,0)
(40,131,0)
(418,55,0)
(594,325,0)
(285,310,0)
(233,131,0)
(145,326,0)
(427,204,0)
(465,528,0)
(171,127,0)
(43,101,0)
(408,526,0)
(123,147,0)
(171,583,0)
(481,40,0)
(263,87,0)
(604,419,0)
(498,130,0)
(393,334,0)
(292,131,0)
(118,45,0)
(369,264,0)
(621,27,0)
(437,130,0)
(321,250,0)
(363,238,0)
(530,372,0)
(257,383,0)
(9,437,0)
(399,638,0)
(543,4,0)
(12,131,0)
(276,67,0)
(19,263,0)
(203,161,0)
(181,504,0)
(474,484,0)
(458,214,0)
(432,269,0)
(409,394,0)
(336,333,0)
(521,190,0)
(3,22,0)
(315,177,0)
(648,124,0)
(69,133,0)
(327,9,0)
(651,401,0)
(278,126,0)
(0,545,0)
(347,654,0)
(37,214,0)
(388,201,0)
(223,310,0)
(144,232,0)
(29,557,0)
(502,437,0)
(71,403,0)
(158,382,0)
(465,248,0)
(506,58,0)
(520,204,0)
(627,163,0)
(516,599,0)
(241,40,0)
(551,218,0)
(503,17,0)
(548,238,0)
(309,340,0)
(93,81,0)
(626,147,0)
(357,234,0)
(483,8,0)
(650,156,0)
(334,130,0)
(404,14,0)
(322,136,0)
(517,143,0)
(649,9,0)
(383,257,0)
(267,505,0)
(497,177,0)
(182,599,0)
(218,417,0)
(97,211,0)
(172,182,0)
(251,461,0)
(471,196,0)
(482,297,0)
(582,326,0)
(616,332,0)
(501,173,0)
(269,221,0)
(225,204,0)
(442,98,0)
(215,131,0)
(5,347,0)
(503,261,0)
(409,522,0)
(60,387,0)
(280,447,0)
(504,395,0)
(303,401,0)
(163,434,0)
(327,314,0)
(68,25,0)
(503,357,0)
(411,447,0)
(599,177,0)
(421,2,0)
(171,40,0)
(341,4,0)
(603,599,0)
(614,68,0)
(171,654,0)
(245,9,0)
(35,394,0)
(256,531,0)
(587,357,0)
(598,632,0)
(138,333,0)
(258,471,0)
(465,222,0)
(484,247,0)
(632,619,0)
(143,397,0)
(296,110,0)
(121,542,0)
(329,155,0)
(237,538,0)
(594,94,0)
(550,395,0)
(441,10,0)
(67,593,0)
(211,97,0)
(446,131,0)
(360,577,0)
(387,563,0)
(599,314,0)
(262,8,0)
(11,186,0)
(606,310,0)
(324,161,0)
(413,314,0)
(371,237,0)
(503,47,0)
(293,594,0)
(195,646,0)
(354,147,0)
(476,229,0)
(465,136,0)
(95,151,0)
(326,582,0)
(235,170,0)
(151,15,0)
(438,161,0)
(550,204,0)
(623,431,0)
(168,178,0)
(159,309,0)
(550,130,0)
(217,327,0)
(518,305,0)
(578,455,0)
(465,385,0)
(332,131,0)
(465,388,0)
(537,72,0)
(87,150,0)
(53,552,0)
(24,241,0)
(609,127,0)
(315,297,0)
(498,186,0)
(465,580,0)
(210,498,0)
(388,344,0)
(581,219,0)
(134,431,0)
(384,314,0)
(47,124,0)
(204,225,0)
(373,323,0)
(457,201,0)
(277,147,0)
(75,155,0)
(335,170,0)
(550,84,0)
(49,192,0)
(546,34,0)
(423,106,0)
(454,25,0)
(523,599,0)
(109,234,0)
(634,364,0)
(536,434,0)
(599,9,0)
(289,58,0)
(401,131,0)
(519,177,0)
(110,567,0)
(557,253,0)
(221,55,0)
(153,582,0)
(84,550,0)
(191,592,0)
(479,161,0)
(186,11,0)
(96,482,0)
(381,93,0)
(595,285,0)
(651,419,0)
(283,437,0)
(591,133,0)
(572,127,0)
(415,150,0)
(526,173,0)
(316,67,0)
(162,538,0)
(294,222,0)
(494,648,0)
(142,335,0)
(273,294,0)
(8,565,0)
(315,9,0)
(109,625,0)
(561,241,0)
(9,50,0)
(386,131,0)
(344,388,0)
(585,158,0)
(266,330,0)
(428,50,0)
(56,434,0)
(116,102,0)
(419,7,0)
(196,101,0)
(320,263,0)
(248,190,0)
(93,40,0)
(284,654,0)
(272,48,0)
(390,306,0)
(275,165,0)
(378,577,0)
(564,178,0)
(38,94,0)
(282,225,0)
(599,523,0)
(55,221,0)
(465,319,0)
(465,392,0)
(466,131,0)
(329,113,0)
(77,234,0)
(36,76,0)
(437,9,0)
(379,427,0)
(575,131,0)
(613,131,0)
(499,344,0)
(73,17,0)
(351,263,0)
(6,462,0)
(242,271,0)
(596,297,0)
(108,651,0)
(489,519,0)
(530,110,0)
(65,170,0)
(200,580,0)
(336,235,0)
(61,385,0)
(594,251,0)
(493,599,0)
(534,131,0)
(628,310,0)
(305,565,0)
(265,119,0)
(345,234,0)
(139,299,0)
(173,306,0)
(270,571,0)
(124,648,0)
(306,390,0)
(7,530,0)
(190,248,0)
(584,270,0)
(240,601,0)
(270,184,0)
(350,159,0)
(318,269,0)
(490,647,0)
(519,9,0)
(611,251,0)
(528,245,0)
(515,131,0)
(66,651,0)
(654,131,0)
(333,336,0)
(327,177,0)
(250,124,0)
(346,45,0)
(586,622,0)
(227,214,0)
(193,392,0)
(241,496,0)
(453,341,0)
(416,190,0)
(560,452,0)
(103,498,0)
(34,131,0)
(631,599,0)
(448,147,0)
(110,530,0)
(137,214,0)
(403,9,0)
(554,130,0)
(580,200,0)
(465,217,0)
(21,310,0)
(295,580,0)
(224,105,0)
(443,345,0)
(146,294,0)
(254,93,0)
(465,431,0)
(593,67,0)
(569,377,0)
(417,40,0)
(302,88,0)
(42,465,0)
(213,430,0)
(303,353,0)
(592,15,0)
(297,315,0)
(526,571,0)
(89,271,0)
(253,557,0)
(496,241,0)
(305,15,0)
(177,299,0)
(545,131,0)
(208,196,0)
(589,121,0)
(519,392,0)
(247,484,0)
(513,327,0)
(396,68,0)
(106,401,0)
(17,654,0)
(20,624,0)
(182,401,0)
(58,214,0)
(339,635,0)
(579,636,0)
(374,306,0)
(237,286,0)
(22,179,0)
(528,401,0)
(434,163,0)
(301,387,0)
(430,619,0)
(205,406,0)
(143,517,0)
(362,177,0)
(567,110,0)
(221,269,0)
(571,270,0)
(503,305,0)
(136,647,0)
(487,430,0)
(171,471,0)
(313,47,0)
(648,177,0)
(331,0,0)
(426,240,0)
(391,163,0)
(460,161,0)
(63,567,0)
(433,95,0)
(349,372,0)
(300,344,0)
(207,131,0)
(176,247,0)
(419,651,0)
(485,69,0)
(473,134,0)
(342,286,0)
(563,387,0)
(622,340,0)
(503,285,0)
(98,542,0)
(23,178,0)
(622,586,0)
(128,374,0)
(42,202,0)
(288,131,0)
(557,48,0)
(398,131,0)
(627,150,0)
(539,417,0)
(179,299,0)
(349,275,0)
(590,441,0)
(427,395,0)
(547,202,0)
(383,395,0)
(406,432,0)
(549,517,0)
(563,253,0)
(101,364,0)
(91,7,0)
(633,131,0)
(79,184,0)
(214,58,0)
(251,105,0)
(644,325,0)
(377,306,0)
(46,648,0)
(592,157,0)
(577,69,0)
(570,496,0)
(163,627,0)
(98,309,0)
(124,314,0)
(74,83,0)
(562,131,0)
(281,299,0)
(529,401,0)
(465,69,0)
(10,441,0)
(234,266,0)
(130,14,0)
(244,14,0)
(540,225,0)
(297,314,0)
(260,177,0)
(287,333,0)
(178,401,0)
(309,159,0)
(252,249,0)
(162,341,0)
(625,109,0)
(230,390,0)
(69,577,0)
(234,131,0)
(209,253,0)
(130,550,0)
(164,315,0)
(392,635,0)
(330,266,0)
(491,15,0)
(445,624,0)
(114,143,0)
(167,99,0)
(531,605,0)
(198,26,0)
(68,396,0)
(268,612,0)
(306,173,0)
(588,368,0)
(544,475,0)
(236,301,0)
(647,136,0)
(470,619,0)
(637,328,0)
(189,245,0)
(260,160,0)
(67,276,0)
(120,528,0)
(271,401,0)
(495,619,0)
(431,452,0)
(512,631,0)
(469,396,0)
(417,218,0)
(149,131,0)
(165,275,0)
(101,196,0)
(32,319,0)
(568,542,0)
(135,240,0)
(99,278,0)
(352,16,0)
(377,276,0)
(311,406,0)
(59,171,0)
(535,299,0)
(639,94,0)
(542,121,0)
(343,290,0)
(465,131,0)
(422,648,0)
(625,345,0)
(51,396,0)
(264,99,0)
(414,22,0)
(383,204,0)
(93,112,0)
(402,633,0)
(309,98,0)
(439,564,0)
(18,8,0)
(571,526,0)
(8,18,0)
(410,612,0)
(605,326,0)
(319,627,0)
(52,266,0)
(201,131,0)
(178,564,0)
(616,264,0)
(261,161,0)
(440,315,0)
(507,250,0)
(355,363,0)
(245,177,0)
(488,183,0)
(134,401,0)
(247,455,0)
(478,131,0)
(556,171,0)
(88,94,0)
(362,299,0)
(157,289,0)
(522,462,0)
(503,465,0)
(599,631,0)
(385,475,0)
(538,162,0)
(417,565,0)
(127,572,0)
(406,87,0)
(361,217,0)
(624,374,0)
(82,192,0)
(196,471,0)
(251,594,0)
(222,409,0)
(7,419,0)
(266,40,0)
(155,75,0)
(31,462,0)
(278,99,0)
(290,171,0)
(573,40,0)
(217,401,0)
(326,605,0)
(605,531,0)
(222,294,0)
(511,62,0)
(465,435,0)
(158,271,0)
(545,0,0)
(269,432,0)
(374,624,0)
(239,131,0)
(152,147,0)
(461,251,0)
(154,484,0)
(263,619,0)
(266,234,0)
(541,126,0)
(348,200,0)
(600,299,0)
(249,211,0)
(232,155,0)
(449,202,0)
(647,9,0)
(112,147,0)
(465,158,0)
(64,566,0)
(477,519,0)
(341,162,0)
(200,401,0)
(338,16,0)
(186,498,0)
(365,248,0)
(565,131,0)
(194,315,0)
(436,211,0)
(13,531,0)
(90,345,0)
(465,7,0)
(306,377,0)
(610,106,0)
(496,131,0)
(113,394,0)
(464,177,0)
(332,616,0)
(465,238,0)
(375,151,0)
(97,401,0)
(255,330,0)
(444,131,0)
(580,446,0)
(465,247,0)
(157,592,0)
(635,413,0)
(228,363,0)
(240,135,0)
(41,647,0)
(366,523,0)
(403,177,0)
(18,157,0)
(286,237,0)
(1,565,0)
(574,124,0)
(106,586,0)
(505,112,0)
(180,237,0)
(30,403,0)
(243,528,0)
(175,280,0)
(425,427,0)
(80,329,0)
(76,94,0)
(188,567,0)
(275,349,0)
(166,131,0)
(420,222,0)
(565,417,0)
(100,219,0)
(206,276,0)
(593,334,0)
(431,134,0)
(358,171,0)
(376,347,0)
(641,594,0)
(279,165,0)
(184,270,0)
(174,395,0)
(105,251,0)
(514,310,0)
(645,131,0)
(122,446,0)
(345,625,0)
(156,646,0)
(601,240,0)
(87,263,0)
(397,394,0)
(169,257,0)
(417,183,0)
(16,234,0)
(111,435,0)
(202,449,0)
(503,27,0)
(505,380,0)
(264,616,0)
(432,406,0)
(44,109,0)
(504,204,0)
(126,278,0)
(226,131,0)
(151,95,0)
(127,171,0)
(92,601,0)
(558,310,0)
(117,94,0)
(531,461,0)
(291,76,0)
(197,134,0)
(527,88,0)
(564,435,0)
(412,480,0)
(503,482,0)
(306,11,0)
(76,319,0)
(509,147,0)
(608,504,0)
(471,171,0)
(508,278,0)
(599,182,0)
(216,310,0)
(455,372,0)
(475,131,0)
(136,413,0)
(307,383,0)
(486,557,0)
(211,249,0)
(461,323,0)
(385,61,0)
(219,100,0)
(607,260,0)
(4,341,0)
(617,505,0)
(332,2,0)
(451,309,0)
(647,177,0)
(33,112,0)
(601,303,0)
(45,102,0)
(28,310,0)
(246,109,0)
(397,636,0)
(472,593,0)
(576,636,0)
(450,334,0)
(337,165,0)
(129,522,0)
(533,161,0)
(112,93,0)
(214,458,0)
(113,329,0)
(104,0,0)
(253,563,0)
(274,335,0)
(2,332,0)
(119,622,0)
(382,131,0)
(260,9,0)
(289,157,0)
(559,61,0)
(370,385,0)
(155,147,0)
(334,593,0)
(48,557,0)
(171,638,0)
(157,18,0)
(532,480,0)
(615,461,0)
(305,58,0)
(238,363,0)
(636,397,0)
(405,323,0)
(202,42,0)
(555,184,0)
(646,156,0)
(620,38,0)
(248,34,0)
(653,75,0)
(303,601,0)
(618,147,0)
(212,280,0)
(107,241,0)
(435,564,0)
(413,635,0)
(325,147,0)
(465,143,0)
(15,151,0)
(171,290,0)
(39,61,0)
(525,517,0)
(447,280,0)
(11,306,0)
(424,299,0)
(15,592,0)
(259,10,0)
(467,571,0)
(468,131,0)
(622,119,0)
(643,336,0)
(85,229,0)
(170,235,0)
(359,87,0)
(214,40,0)
(452,131,0)
(429,241,0)
(380,505,0)
(364,101,0)
(125,545,0)
(132,314,0)
(553,232,0)
(229,297,0)
(356,538,0)
(456,185,0)
(83,372,0)
(480,102,0)
(271,158,0)
(306,374,0)
(400,155,0)
(298,171,0)
(648,9,0)
(362,9,0)
(240,401,0)
(652,266,0)
(61,401,0)
(522,409,0)
(629,214,0)
(319,76,0)
(78,382,0)
(510,97,0)
(54,275,0)
(465,447,0)
(261,496,0)
(57,214,0)
(586,106,0)
(538,237,0)
(654,171,0)
(435,349,0)
(319,619,0)
(70,261,0)
(285,496,0)
(640,200,0)
(27,179,0)
(407,561,0)
(170,335,0)
(392,519,0)
(353,303,0)
(308,81,0)
(389,179,0)
(45,364,0)
(199,97,0)
(601,179,0)
(266,40,1)
(365,190,1)
(503,17,1)
(538,237,1)
(463,480,1)
(470,368,1)
(347,376,1)
(516,631,1)
(260,9,1)
(46,422,1)
(117,72,1)
(101,364,1)
(117,380,1)
(461,251,1)
(65,335,1)
(550,395,1)
(599,182,1)
(647,9,1)
(592,191,1)
(137,506,1)
(92,240,1)
(173,501,1)
(181,174,1)
(542,121,1)
(68,614,1)
(433,375,1)
(21,324,1)
(31,6,1)
(339,392,1)
(586,106,1)
(465,68,1)
(106,401,1)
(652,52,1)
(348,362,1)
(125,0,1)
(158,271,1)
(495,470,1)
(634,45,1)
(437,283,1)
(434,56,1)
(593,472,1)
(322,647,1)
(521,133,1)
(219,581,1)
(247,484,1)
(316,593,1)
(229,297,1)
(654,171,1)
(503,305,1)
(61,401,1)
(29,401,1)
(235,170,1)
(241,561,1)
(293,611,1)
(8,565,1)
(564,439,1)
(430,619,1)
(397,636,1)
(472,334,1)
(307,427,1)
(193,519,1)
(357,587,1)
(15,151,1)
(317,496,1)
(388,231,1)
(518,18,1)
(67,316,1)
(122,580,1)
(647,177,1)
(465,238,1)
(174,11,1)
(103,210,1)
(68,396,1)
(605,326,1)
(186,524,1)
(522,129,1)
(418,406,1)
(590,367,1)
(282,520,1)
(646,195,1)
(622,586,1)
(399,556,1)
(76,36,1)
(497,464,1)
(165,337,1)
(197,332,1)
(335,274,1)
(649,11,1)
(4,543,1)
(533,410,1)
(99,278,1)
(255,652,1)
(113,329,1)
(580,200,1)
(345,90,1)
(607,245,1)
(128,624,1)
(311,87,1)
(556,290,1)
(205,311,1)
(202,547,1)
(108,455,1)
(162,341,1)
(447,280,1)
(630,92,1)
(604,651,1)
(63,7,1)
(427,395,1)
(330,255,1)
(540,282,1)
(571,467,1)
(253,209,1)
(332,616,1)
(377,276,1)
(500,307,1)
(74,238,1)
(489,136,1)
(98,442,1)
(19,359,1)
(608,181,1)
(284,21,1)
(360,378,1)
(343,358,1)
(593,334,1)
(631,512,1)
(417,40,1)
(302,38,1)
(382,78,1)
(200,640,1)
(232,155,1)
(124,648,1)
(99,167,1)
(319,76,1)
(474,154,1)
(574,327,1)
(157,592,1)
(647,41,1)
(369,99,1)
(633,402,1)
(519,477,1)
(140,172,1)
(546,248,1)
(83,74,1)
(157,289,1)
(278,508,1)
(567,188,1)
(271,401,1)
(612,268,1)
(93,81,1)
(327,513,1)
(18,8,1)
(26,198,1)
(42,202,1)
(176,484,1)
(167,278,1)
(64,432,1)
(225,540,1)
(427,379,1)
(419,651,1)
(315,440,1)
(560,431,1)
(595,317,1)
(435,111,1)
(447,411,1)
(185,456,1)
(427,204,1)
(414,3,1)
(217,361,1)
(221,55,1)
(482,96,1)
(402,447,1)
(43,208,1)
(440,164,1)
(409,522,1)
(587,625,1)
(259,441,1)
(80,463,1)
(616,264,1)
(171,471,1)
(557,48,1)
(622,119,1)
(309,98,1)
(263,62,1)
(304,491,1)
(564,178,1)
(175,382,1)
(625,345,1)
(243,403,1)
(417,183,1)
(66,108,1)
(71,427,1)
(141,249,1)
(45,102,1)
(643,333,1)
(580,295,1)
(127,572,1)
(547,397,1)
(510,34,1)
(111,564,1)
(465,42,1)
(297,315,1)
(503,47,1)
(319,32,1)
(395,504,1)
(557,40,1)
(271,89,1)
(554,257,1)
(367,317,1)
(269,318,1)
(571,270,1)
(505,617,1)
(393,450,1)
(615,88,1)
(416,521,1)
(406,87,1)
(173,526,1)
(324,410,1)
(465,222,1)
(190,416,1)
(245,9,1)
(437,130,1)
(183,488,1)
(250,124,1)
(599,177,1)
(403,9,1)
(450,173,1)
(366,603,1)
(465,217,1)
(570,88,1)
(506,592,1)
(58,214,1)
(211,436,1)
(326,145,1)
(493,403,1)
(174,257,1)
(363,355,1)
(614,396,1)
(109,44,1)
(531,461,1)
(639,117,1)
(334,130,1)
(520,328,1)
(568,18,1)
(632,598,1)
(262,565,1)
(644,16,1)
(246,234,1)
(599,9,1)
(18,157,1)
(429,24,1)
(329,80,1)
(406,205,1)
(539,1,1)
(536,319,1)
(309,159,1)
(592,15,1)
(465,528,1)
(7,91,1)
(142,336,1)
(194,596,1)
(320,19,1)
(401,219,1)
(162,538,1)
(236,253,1)
(547,83,1)
(392,193,1)
(550,204,1)
(352,338,1)
(503,465,1)
(471,196,1)
(112,93,1)
(250,321,1)
(648,9,1)
(261,496,1)
(504,204,1)
(375,304,1)
(388,344,1)
(367,533,1)
(184,555,1)
(432,269,1)
(189,528,1)
(503,285,1)
(40,481,1)
(651,401,1)
(77,26,1)
(289,58,1)
(267,112,1)
(465,247,1)
(89,242,1)
(551,183,1)
(171,127,1)
(170,65,1)
(85,297,1)
(133,591,1)
(328,637,1)
(186,498,1)
(599,631,1)
(465,385,1)
(54,165,1)
(524,498,1)
(158,585,1)
(550,459,1)
(0,331,1)
(480,102,1)
(465,392,1)
(538,356,1)
(432,406,1)
(646,156,1)
(163,434,1)
(347,654,1)
(155,75,1)
(237,286,1)
(498,130,1)
(116,16,1)
(588,605,1)
(481,573,1)
(295,200,1)
(52,77,1)
(374,624,1)
(179,601,1)
(602,57,1)
(498,103,1)
(476,85,1)
(273,113,1)
(443,109,1)
(1,545,1)
(59,127,1)
(526,408,1)
(629,37,1)
(67,593,1)
(361,115,1)
(303,630,1)
(251,105,1)
(305,518,1)
(61,559,1)
(95,433,1)
(559,39,1)
(610,309,1)
(436,97,1)
(517,549,1)
(621,22,1)
(245,177,1)
(154,349,1)
(119,265,1)
(224,594,1)
(467,270,1)
(5,654,1)
(171,40,1)
(32,76,1)
(563,387,1)
(594,94,1)
(650,505,1)
(422,494,1)
(502,649,1)
(403,177,1)
(109,234,1)
(16,352,1)
(582,153,1)
(581,529,1)
(480,532,1)
(172,523,1)
(505,112,1)
(82,542,1)
(381,33,1)
(601,240,1)
(163,391,1)
(248,365,1)
(392,519,1)
(275,54,1)
(441,590,1)
(378,201,1)
(526,571,1)
(503,357,1)
(242,452,1)
(78,158,1)
(377,569,1)
(336,333,1)
(333,138,1)
(465,431,1)
(411,280,1)
(98,542,1)
(336,643,1)
(305,15,1)
(465,336,1)
(431,134,1)
(547,480,1)
(486,29,1)
(47,313,1)
(370,61,1)
(423,610,1)
(465,143,1)
(141,622,1)
(599,523,1)
(648,177,1)
(136,647,1)
(206,67,1)
(201,457,1)
(482,297,1)
(218,551,1)
(609,638,1)
(110,296,1)
(527,302,1)
(219,100,1)
(228,530,1)
(110,567,1)
(635,339,1)
(511,351,1)
(25,454,1)
(208,258,1)
(272,486,1)
(222,294,1)
(300,633,1)
(209,557,1)
(589,568,1)
(465,7,1)
(321,507,1)
(38,620,1)
(374,128,1)
(577,360,1)
(446,122,1)
(283,502,1)
(257,383,1)
(87,263,1)
(357,234,1)
(528,401,1)
(601,303,1)
(496,241,1)
(171,583,1)
(168,23,1)
(636,86,1)
(187,45,1)
(459,554,1)
(465,136,1)
(391,434,1)
(389,229,1)
(565,417,1)
(287,409,1)
(48,272,1)
(445,20,1)
(294,146,1)
(196,101,1)
(452,560,1)
(548,363,1)
(247,176,1)
(458,602,1)
(528,120,1)
(594,641,1)
(456,10,1)
(549,525,1)
(465,158,1)
(537,380,1)
(617,267,1)
(442,159,1)
(60,301,1)
(254,381,1)
(318,221,1)
(270,184,1)
(49,82,1)
(494,574,1)
(520,162,1)
(10,441,1)
(345,234,1)
(550,84,1)
(253,557,1)
(13,256,1)
(264,99,1)
(200,401,1)
(529,347,1)
(151,40,1)
(213,632,1)
(73,347,1)
(541,475,1)
(570,102,1)
(151,95,1)
(134,473,1)
(30,71,1)
(315,177,1)
(519,9,1)
(240,426,1)
(114,517,1)
(383,500,1)
(57,629,1)
(504,395,1)
(303,353,1)
(338,625,1)
(55,418,1)
(306,173,1)
(17,73,1)
(596,250,1)
(138,287,1)
(348,563,1)
(387,301,1)
(3,179,1)
(17,654,1)
(362,177,1)
(39,446,1)
(420,294,1)
(492,116,1)
(144,155,1)
(171,290,1)
(483,262,1)
(22,414,1)
(45,118,1)
(469,51,1)
(188,63,1)
(180,371,1)
(230,374,1)
(24,570,1)
(27,179,1)
(211,97,1)
(93,40,1)
(97,401,1)
(385,370,1)
(62,511,1)
(285,496,1)
(291,432,1)
(578,247,1)
(597,58,1)
(105,224,1)
(284,628,1)
(465,319,1)
(431,623,1)
(88,527,1)
(6,222,1)
(69,577,1)
(545,125,1)
(274,142,1)
(390,230,1)
(396,469,1)
(153,531,1)
(543,538,1)
(56,536,1)
(9,437,1)
(465,435,1)
(349,275,1)
(315,9,1)
(462,31,1)
(620,430,1)
(439,178,1)
(248,190,1)
(632,619,1)
(350,451,1)
(302,94,1)
(417,218,1)
(129,462,1)
(213,619,1)
(355,228,1)
(182,140,1)
(531,13,1)
(34,546,1)
(584,184,1)
(11,186,1)
(306,374,1)
(591,69,1)
(455,578,1)
(380,505,1)
(499,300,1)
(47,124,1)
(303,401,1)
(198,192,1)
(430,487,1)
(285,595,1)
(605,531,1)
(512,182,1)
(403,30,1)
(359,430,1)
(41,490,1)
(532,412,1)
(115,413,1)
(79,390,1)
(426,389,1)
(364,187,1)
(351,320,1)
(561,407,1)
(260,177,1)
(127,609,1)
(146,273,1)
(376,5,1)
(245,189,1)
(121,589,1)
(334,393,1)
(77,192,1)
(72,537,1)
(327,177,1)
(508,126,1)
(232,553,1)
(465,388,1)
(11,306,1)
(270,584,1)
(38,94,1)
(229,476,1)
(341,453,1)
(170,335,1)
(435,564,1)
(120,243,1)
(217,401,1)
(214,458,1)
(651,66,1)
(261,70,1)
(501,526,1)
(265,586,1)
(576,143,1)
(275,165,1)
(628,185,1)
(362,148,1)
(623,134,1)
(308,254,1)
(553,144,1)
(383,204,1)
(280,212,1)
(278,126,1)
(544,385,1)
(130,550,1)
(523,366,1)
(325,644,1)
(465,69,1)
(102,492,1)
(465,447,1)
(212,175,1)
(81,308,1)
(192,49,1)
(504,608,1)
(264,369,1)
(410,612,1)
(51,235,1)
(118,346,1)
(90,443,1)
(178,168,1)
(530,110,1)
(412,141,1)
(210,130,1)
(260,607,1)
(619,495,1)
(75,653,1)
(371,177,1)
(169,383,1)
(106,423,1)
(202,449,1)
(389,260,1)
(276,206,1)
(2,421,1)
(159,350,1)
(269,221,1)
(637,162,1)
(594,325,1)
(36,291,1)
(70,410,1)
(240,135,1)
(337,279,1)
(507,124,1)
(379,425,1)
(44,246,1)
(513,217,1)
(33,232,1)
(296,567,1)
(465,580,1)
(362,9,1)
(145,582,1)
(342,180,1)
(222,420,1)
(344,499,1)
(627,163,1)
(156,650,1)
(327,9,1)
(214,40,1)
(94,639,1)
(10,259,1)
(380,646,1)
(266,330,1)
(231,344,1)
(364,634,1)
(238,363,1)
(346,43,1)
(473,197,1)
(249,211,1)
(579,576,1)
(104,40,1)
(341,4,1)
(171,638,1)
(306,377,1)
(252,211,1)
(457,388,1)
(76,94,1)
(199,510,1)
(364,45,1)
(408,571,1)
(599,516,1)
(178,401,1)
(204,225,1)
(27,621,1)
(356,237,1)
(331,104,1)
(387,60,1)
(503,261,1)
(503,27,1)
(624,445,1)
(625,109,1)
(241,40,1)
(301,236,1)
(20,186,1)
(487,213,1)
(648,46,1)
(503,482,1)
(107,429,1)
(329,155,1)
(454,68,1)
(91,419,1)
(143,517,1)
(485,577,1)
(126,541,1)
(177,497,1)
(86,579,1)
(268,317,1)
(465,248,1)
(358,298,1)
(96,229,1)
(313,250,1)
(484,474,1)
(470,605,1)
(182,401,1)
(191,15,1)
(88,94,1)
(545,0,1)
(143,114,1)
(69,485,1)
(258,59,1)
(332,2,1)
(326,582,1)
(425,395,1)
(383,395,1)
(525,25,1)
(555,79,1)
(566,64,1)
(291,566,1)
(453,4,1)
(385,61,1)
(227,137,1)
(464,563,1)
(8,483,1)
(16,234,1)
(263,619,1)
(425,204,1)
(22,179,1)
(148,22,1)
(305,58,1)
(421,616,1)
(477,489,1)
(240,401,1)
(164,194,1)
(491,8,1)
(413,635,1)
(286,342,1)
(234,266,1)
(585,271,1)
(628,10,1)
(475,544,1)
(653,400,1)
(563,253,1)
(251,594,1)
(306,390,1)
(488,539,1)
(97,199,1)
(319,619,1)
(289,597,1)
(519,177,1)
(569,276,1)
(641,293,1)
(428,9,1)
(71,428,1)
(136,322,1)
(256,461,1)
(611,615,1)
(490,599,1)
(603,493,1)
(276,67,1)
(37,227,1)
(134,401,1)
(598,627,1)
(368,588,1)
(638,399,1)
(640,348,1)
(279,435,1)
(522,462,1)
(184,130,1)
(305,565,1)
(451,249,1)
(7,419,1)
(195,156,1)
(419,604,1)
(23,141,1)
(290,343,1)
(257,169,1)
(407,107,1)
(238,548,1)
(400,325,1)
(249,252,1)
(298,284,1)
(602,592,2)
(280,22,2)
(69,22,2)
(211,97,2)
(196,101,2)
(10,317,2)
(33,16,2)
(599,9,2)
(278,126,2)
(91,141,2)
(276,67,2)
(30,563,2)
(647,9,2)
(557,40,2)
(571,186,2)
(19,430,2)
(248,22,2)
(528,401,2)
(305,15,2)
(243,403,2)
(171,583,2)
(336,480,2)
(155,75,2)
(94,16,2)
(446,22,2)
(430,88,2)
(211,22,2)
(506,592,2)
(388,344,2)
(197,22,2)
(369,22,2)
(370,563,2)
(278,22,2)
(582,531,2)
(251,594,2)
(426,403,2)
(547,563,2)
(647,403,2)
(599,523,2)
(605,531,2)
(252,22,2)
(101,317,2)
(544,563,2)
(213,430,2)
(126,563,2)
(219,347,2)
(325,16,2)
(395,504,2)
(435,141,2)
(128,186,2)
(187,45,2)
(414,229,2)
(22,179,2)
(302,88,2)
(97,401,2)
(526,186,2)
(470,88,2)
(397,480,2)
(531,88,2)
(403,563,2)
(371,563,2)
(382,563,2)
(126,22,2)
(351,430,2)
(182,403,2)
(621,22,2)
(352,625,2)
(389,403,2)
(396,480,2)
(7,419,2)
(271,563,2)
(42,202,2)
(629,592,2)
(15,8,2)
(367,410,2)
(106,249,2)
(293,88,2)
(76,94,2)
(619,88,2)
(167,22,2)
(456,10,2)
(305,58,2)
(176,141,2)
(103,257,2)
(115,403,2)
(305,18,2)
(98,249,2)
(179,601,2)
(457,22,2)
(393,186,2)
(136,647,2)
(622,586,2)
(162,563,2)
(471,410,2)
(329,155,2)
(58,214,2)
(212,22,2)
(356,563,2)
(10,410,2)
(440,250,2)
(85,250,2)
(383,204,2)
(240,403,2)
(510,22,2)
(391,430,2)
(500,427,2)
(557,347,2)
(55,406,2)
(263,430,2)
(465,68,2)
(465,69,2)
(198,192,2)
(180,563,2)
(388,563,2)
(120,403,2)
(208,410,2)
(301,253,2)
(73,347,2)
(67,593,2)
(184,130,2)
(520,563,2)
(566,432,2)
(452,22,2)
(49,18,2)
(409,522,2)
(584,186,2)
(27,22,2)
(56,430,2)
(253,347,2)
(32,430,2)
(395,257,2)
(492,16,2)
(327,177,2)
(263,619,2)
(518,18,2)
(22,229,2)
(503,285,2)
(11,186,2)
(4,538,2)
(266,40,2)
(338,625,2)
(648,9,2)
(421,22,2)
(315,9,2)
(200,563,2)
(382,22,2)
(341,538,2)
(436,22,2)
(309,159,2)
(48,347,2)
(641,88,2)
(5,410,2)
(75,16,2)
(146,480,2)
(554,257,2)
(229,250,2)
(638,317,2)
(9,11,2)
(38,88,2)
(628,317,2)
(118,410,2)
(345,234,2)
(498,130,2)
(45,410,2)
(23,141,2)
(507,403,2)
(306,374,2)
(332,616,2)
(260,177,2)
(204,225,2)
(497,563,2)
(513,403,2)
(503,305,2)
(109,234,2)
(616,563,2)
(141,563,2)
(567,141,2)
(633,563,2)
(425,257,2)
(167,563,2)
(119,249,2)
(246,18,2)
(392,519,2)
(432,269,2)
(608,11,2)
(378,22,2)
(465,336,2)
(275,141,2)
(643,480,2)
(653,16,2)
(341,4,2)
(240,135,2)
(153,531,2)
(60,253,2)
(110,141,2)
(465,238,2)
(298,410,2)
(402,563,2)
(363,141,2)
(343,410,2)
(563,347,2)
(511,430,2)
(130,550,2)
(432,430,2)
(508,22,2)
(229,297,2)
(287,480,2)
(266,330,2)
(546,563,2)
(201,22,2)
(631,403,2)
(90,109,2)
(280,563,2)
(614,480,2)
(271,22,2)
(465,136,2)
(164,250,2)
(410,612,2)
(59,410,2)
(313,250,2)
(121,18,2)
(430,430,2)
(465,528,2)
(252,563,2)
(399,410,2)
(51,480,2)
(475,563,2)
(249,563,2)
(527,16,2)
(27,179,2)
(491,8,2)
(427,204,2)
(265,249,2)
(140,403,2)
(266,18,2)
(441,410,2)
(461,88,2)
(241,625,2)
(648,403,2)
(630,229,2)
(523,403,2)
(595,317,2)
(92,403,2)
(182,401,2)
(99,22,2)
(240,401,2)
(594,94,2)
(44,18,2)
(264,22,2)
(41,403,2)
(165,141,2)
(3,403,2)
(503,357,2)
(503,47,2)
(627,430,2)
(334,186,2)
(200,22,2)
(601,403,2)
(454,480,2)
(383,427,2)
(87,263,2)
(538,563,2)
(503,261,2)
(306,377,2)
(250,403,2)
(633,22,2)
(362,22,2)
(569,186,2)
(420,480,2)
(93,81,2)
(447,563,2)
(175,22,2)
(499,22,2)
(45,102,2)
(465,247,2)
(476,250,2)
(416,22,2)
(18,157,2)
(276,186,2)
(214,458,2)
(172,403,2)
(250,124,2)
(78,563,2)
(611,88,2)
(162,341,2)
(389,229,2)
(517,480,2)
(586,106,2)
(637,162,2)
(639,16,2)
(559,22,2)
(385,61,2)
(599,182,2)
(130,257,2)
(11,257,2)
(622,119,2)
(202,22,2)
(406,430,2)
(522,462,2)
(20,186,2)
(439,141,2)
(359,430,2)
(519,177,2)
(81,16,2)
(586,249,2)
(427,11,2)
(286,563,2)
(526,571,2)
(222,480,2)
(110,567,2)
(259,317,2)
(171,317,2)
(170,480,2)
(379,11,2)
(268,317,2)
(585,22,2)
(107,625,2)
(194,250,2)
(181,257,2)
(550,84,2)
(101,410,2)
(598,430,2)
(632,430,2)
(163,434,2)
(108,141,2)
(57,592,2)
(425,563,2)
(624,186,2)
(259,410,2)
(46,403,2)
(142,480,2)
(522,480,2)
(264,563,2)
(445,186,2)
(342,563,2)
(592,8,2)
(315,250,2)
(247,484,2)
(348,22,2)
(202,449,2)
(623,563,2)
(221,406,2)
(134,22,2)
(211,563,2)
(241,40,2)
(465,388,2)
(200,401,2)
(16,234,2)
(18,8,2)
(503,17,2)
(99,278,2)
(579,480,2)
(550,204,2)
(640,22,2)
(79,186,2)
(96,229,2)
(241,561,2)
(134,401,2)
(585,563,2)
(604,141,2)
(390,186,2)
(68,480,2)
(98,542,2)
(580,563,2)
(260,403,2)
(247,141,2)
(228,141,2)
(487,430,2)
(16,625,2)
(413,635,2)
(650,505,2)
(179,229,2)
(401,347,2)
(544,22,2)
(133,22,2)
(242,22,2)
(581,347,2)
(97,563,2)
(37,592,2)
(188,141,2)
(21,410,2)
(474,141,2)
(521,563,2)
(593,334,2)
(571,270,2)
(427,395,2)
(261,410,2)
(560,22,2)
(580,22,2)
(574,403,2)
(607,403,2)
(156,505,2)
(69,577,2)
(387,301,2)
(326,531,2)
(42,563,2)
(560,563,2)
(319,76,2)
(58,592,2)
(141,22,2)
(64,432,2)
(545,0,2)
(577,563,2)
(437,11,2)
(432,406,2)
(68,396,2)
(555,186,2)
(92,229,2)
(347,410,2)
(238,141,2)
(278,563,2)
(306,173,2)
(300,22,2)
(651,401,2)
(652,18,2)
(486,347,2)
(521,22,2)
(334,130,2)
(622,249,2)
(209,347,2)
(224,88,2)
(465,563,2)
(563,387,2)
(464,563,2)
(376,410,2)
(232,16,2)
(644,16,2)
(564,178,2)
(42,22,2)
(157,289,2)
(587,625,2)
(157,592,2)
(648,177,2)
(284,317,2)
(510,563,2)
(646,505,2)
(133,563,2)
(31,480,2)
(457,563,2)
(101,364,2)
(251,88,2)
(245,177,2)
(273,480,2)
(88,94,2)
(453,538,2)
(297,315,2)
(538,237,2)
(210,257,2)
(368,605,2)
(605,326,2)
(298,317,2)
(465,248,2)
(392,403,2)
(3,229,2)
(208,317,2)
(113,329,2)
(129,480,2)
(136,403,2)
(480,141,2)
(175,563,2)
(540,563,2)
(227,592,2)
(435,564,2)
(505,16,2)
(591,22,2)
(408,186,2)
(322,403,2)
(625,345,2)
(348,563,2)
(592,15,2)
(347,654,2)
(610,249,2)
(308,16,2)
(295,22,2)
(463,480,2)
(177,563,2)
(47,250,2)
(627,163,2)
(442,249,2)
(385,563,2)
(487,88,2)
(525,480,2)
(212,563,2)
(512,403,2)
(114,480,2)
(102,16,2)
(504,204,2)
(69,563,2)
(257,427,2)
(593,186,2)
(635,403,2)
(527,88,2)
(530,141,2)
(556,317,2)
(344,22,2)
(654,410,2)
(72,380,2)
(319,619,2)
(472,186,2)
(591,563,2)
(171,290,2)
(328,162,2)
(430,619,2)
(15,151,2)
(217,403,2)
(189,403,2)
(490,403,2)
(431,134,2)
(159,249,2)
(297,250,2)
(503,482,2)
(169,427,2)
(61,401,2)
(599,631,2)
(113,480,2)
(66,141,2)
(447,280,2)
(379,563,2)
(206,186,2)
(461,251,2)
(590,410,2)
(640,563,2)
(249,22,2)
(482,297,2)
(377,276,2)
(475,22,2)
(93,16,2)
(469,480,2)
(296,141,2)
(588,605,2)
(304,8,2)
(235,170,2)
(482,229,2)
(505,112,2)
(157,8,2)
(339,403,2)
(184,186,2)
(480,102,2)
(473,22,2)
(498,257,2)
(336,333,2)
(630,403,2)
(242,563,2)
(36,430,2)
(237,286,2)
(122,22,2)
(349,275,2)
(367,317,2)
(70,410,2)
(603,403,2)
(52,18,2)
(78,22,2)
(616,22,2)
(496,625,2)
(335,480,2)
(138,480,2)
(248,563,2)
(196,410,2)
(145,531,2)
(275,165,2)
(303,229,2)
(214,40,2)
(137,592,2)
(6,480,2)
(421,563,2)
(385,22,2)
(429,625,2)
(634,45,2)
(616,264,2)
(646,156,2)
(608,257,2)
(383,395,2)
(303,401,2)
(222,294,2)
(381,16,2)
(155,16,2)
(158,271,2)
(282,563,2)
(376,317,2)
(494,403,2)
(450,186,2)
(144,16,2)
(465,217,2)
(455,141,2)
(124,403,2)
(345,109,2)
(418,406,2)
(249,211,2)
(254,16,2)
(178,401,2)
(230,186,2)
(366,403,2)
(260,9,2)
(11,306,2)
(343,317,2)
(74,141,2)
(344,563,2)
(171,471,2)
(411,563,2)
(197,563,2)
(427,257,2)
(380,16,2)
(447,22,2)
(87,430,2)
(549,480,2)
(24,625,2)
(5,317,2)
(594,88,2)
(143,517,2)
(181,11,2)
(337,141,2)
(88,88,2)
(419,651,2)
(651,141,2)
(519,9,2)
(174,257,2)
(524,257,2)
(465,435,2)
(548,141,2)
(2,563,2)
(380,646,2)
(89,22,2)
(465,447,2)
(255,18,2)
(238,363,2)
(601,303,2)
(597,592,2)
(294,480,2)
(465,158,2)
(163,430,2)
(82,18,2)
(235,480,2)
(542,121,2)
(261,496,2)
(609,317,2)
(465,431,2)
(173,186,2)
(417,40,2)
(529,347,2)
(403,177,2)
(559,563,2)
(158,563,2)
(154,141,2)
(557,48,2)
(358,410,2)
(465,222,2)
(577,22,2)
(43,410,2)
(411,22,2)
(190,22,2)
(326,582,2)
(321,403,2)
(462,480,2)
(193,403,2)
(625,109,2)
(25,480,2)
(564,141,2)
(649,11,2)
(295,563,2)
(47,124,2)
(151,95,2)
(151,40,2)
(446,563,2)
(556,410,2)
(565,417,2)
(346,410,2)
(271,401,2)
(360,563,2)
(412,141,2)
(320,430,2)
(364,45,2)
(22,403,2)
(270,184,2)
(284,410,2)
(61,22,2)
(248,190,2)
(185,10,2)
(530,110,2)
(473,563,2)
(501,186,2)
(568,18,2)
(270,186,2)
(377,186,2)
(83,141,2)
(417,218,2)
(437,130,2)
(245,403,2)
(612,317,2)
(143,480,2)
(88,16,2)
(425,11,2)
(580,200,2)
(400,16,2)
(289,58,2)
(578,141,2)
(553,16,2)
(269,406,2)
(234,18,2)
(54,141,2)
(134,563,2)
(431,22,2)
(528,403,2)
(465,319,2)
(428,11,2)
(219,100,2)
(546,22,2)
(186,257,2)
(162,538,2)
(485,22,2)
(17,347,2)
(485,563,2)
(504,257,2)
(171,40,2)
(623,22,2)
(375,8,2)
(285,496,2)
(358,317,2)
(493,403,2)
(605,88,2)
(654,317,2)
(413,403,2)
(550,257,2)
(7,141,2)
(443,109,2)
(441,317,2)
(414,403,2)
(221,55,2)
(499,563,2)
(395,11,2)
(306,390,2)
(237,563,2)
(364,410,2)
(309,249,2)
(617,16,2)
(315,177,2)
(496,241,2)
(434,430,2)
(186,498,2)
(245,9,2)
(71,563,2)
(274,480,2)
(601,229,2)
(97,22,2)
(213,88,2)
(403,9,2)
(327,9,2)
(10,441,2)
(111,141,2)
(330,18,2)
(537,380,2)
(151,8,2)
(547,22,2)
(285,317,2)
(628,410,2)
(374,186,2)
(290,317,2)
(196,317,2)
(347,317,2)
(465,392,2)
(231,22,2)
(26,192,2)
(29,347,2)
(380,505,2)
(279,141,2)
(127,317,2)
(236,253,2)
(173,526,2)
(263,62,2)
(168,141,2)
(80,480,2)
(484,141,2)
(269,221,2)
(190,563,2)
(477,403,2)
(201,563,2)
(202,563,2)
(402,22,2)
(311,430,2)
(309,98,2)
(39,22,2)
(333,480,2)
(532,141,2)
(504,11,2)
(65,480,2)
(117,16,2)
(231,563,2)
(76,430,2)
(365,22,2)
(45,317,2)
(467,186,2)
(519,403,2)
(283,11,2)
(423,249,2)
(217,401,2)
(170,335,2)
(388,22,2)
(127,572,2)
(495,88,2)
(116,16,2)
(647,177,2)
(307,427,2)
(576,480,2)
(232,155,2)
(2,22,2)
(178,141,2)
(589,18,2)
(431,563,2)
(317,625,2)
(489,403,2)
(127,410,2)
(318,406,2)
(542,18,2)
(291,430,2)
(570,625,2)
(364,317,2)
(17,654,2)
(174,11,2)
(109,18,2)
(8,565,2)
(399,317,2)
(62,430,2)
(433,8,2)
(346,317,2)
(204,563,2)
(349,141,2)
(195,505,2)
(379,257,2)
(89,563,2)
(426,229,2)
(95,8,2)
(543,538,2)
(303,403,2)
(350,249,2)
(541,563,2)
(419,141,2)
(406,87,2)
(290,410,2)
(305,565,2)
(409,480,2)
(302,16,2)
(112,93,2)
(34,563,2)
(638,410,2)
(365,563,2)
(93,40,2)
(332,22,2)
(471,317,2)
(422,403,2)
(465,143,2)
(369,563,2)
(272,347,2)
(401,219,2)
(43,317,2)
(417,183,2)
(436,563,2)
(86,480,2)
(106,401,2)
(516,403,2)
(360,22,2)
(596,250,2)
(452,563,2)
(122,563,2)
(303,353,2)
(374,624,2)
(319,430,2)
(199,563,2)
(112,16,2)
(536,430,2)
(171,410,2)
(148,22,2)
(357,625,2)
(387,253,2)
(594,325,2)
(502,11,2)
(256,88,2)
(332,563,2)
(61,563,2)
(620,88,2)
(324,410,2)
(289,592,2)
(541,22,2)
(191,8,2)
(465,22,2)
(370,22,2)
(563,253,2)
(316,186,2)
(39,563,2)
(258,410,2)
(205,430,2)
(300,563,2)
(199,22,2)
(267,16,2)
(355,141,2)
(632,619,2)
(465,580,2)
(362,177,2)
(407,625,2)
(240,229,2)
(427,563,2)
(9,437,2)
(67,186,2)
(533,410,2)
(306,186,2)
(531,461,2)
(599,403,2)
(258,317,2)
(590,317,2)
(34,22,2)
(397,636,2)
(118,317,2)
(465,385,2)
(234,266,2)
(361,403,2)
(451,249,2)
(550,395,2)
(609,410,2)
(214,592,2)
(503,465,2)
(257,383,2)
(179,403,2)
(654,171,2)
(508,563,2)
(77,18,2)
(171,638,2)
(378,563,2)
(416,563,2)
(192,18,2)
(465,7,2)
(471,196,2)
(362,9,2)
(357,234,2)
(458,592,2)
(459,257,2)
(253,557,2)
(99,563,2)
(158,22,2)
(38,94,2)
(410,317,2)
(63,141,2)
(503,27,2)
(327,403,2)
(251,105,2)
(332,2,2)
(329,480,2)
(13,88,2)
(225,563,2)
(601,240,2)
(59,317,2)
(171,127,2)
(636,480,2)
(561,625,2)
(105,88,2)
(504,395,2)
(124,648,2)
(615,88,2)
(599,177,2)
(264,99,2)
(625,18,2)
-----------------------------------
(0,loca_glyph_pos[2])
(1,code)
(2,&rcidmap)
(3,code)
(4,r_type(o)
(5,code)
(6,loca_glyph_pos)
(7,pfcid->cidata.orig_procs.get_metrics)
(8,code < 0)
(9,subst = pfcid1->subst_CID_on_WMode)
(10,common.GDBytes == 0)
(11,pfcid1->subst_CID_on_WMode != NULL &&\n\\n\\t\\t    bytes_compare(o->value.const_bytes, r_size(o)
(12,if (code < 0 && code != e_undefined)
(13,0)
(14,)
(15,code = dict_find_string(op, "CIDFontName", &pCIDFontName)
(16,code > 0)
(17,return code;)
(18,code < 0 ||\n\\n\\t(code = dict_find_string(op, "CIDFontName", &pCIDFontName)
(19,imemory)
(20,o)
(21,break;)
(22,code < 0)
(23,pfcid)
(24,imemory)
(25,pfont->data.get_outline = gs_get_glyph_data_cached)
(26,return_error(e_rangecheck)
(27,return code;)
(28,if (common.GDBytes == 0)
(29,op)
(30,NULL)
(31,0)
(32,j)
(33,code)
(34,pfont->data.get_glyph_index = z11_get_glyph_index)
(35,s)
(36,i)
(37,0)
(38,i++)
(39,pfcid)
(40,op = osp)
(41,data)
(42,define_gs_font((gs_font *)
(43,bf_CharStrings_optional)
(44,0)
(45,pfile != NULL)
(46,0)
(47,return code;)
(48,&t)
(49,1)
(50,)
(51,pfont)
(52,op)
(53,if (font->FontType == ft_CID_TrueType)
(54,get_outline)
(55,&v)
(56,value)
(57,0)
(58,code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)
(59,"%Type11BuildGlyph")
(60,t_dictionary)
(61,pfcid->cidata)
(62,&v)
(63,pfont)
(64,e_invalidfont)
(65,0)
(66,cidata)
(67,pfcid1->cidata.common.CIDSystemInfo)
(68,pfont->data.get_outline)
(69,pfont->procs.glyph_outline)
(70,code)
(71,subst)
(72,return_error(e_invalidfont)
(73,code)
(74,z11_get_metrics)
(75,*pfile)
(76,loca_glyph_pos[i])
(77,code)
(78,font11_substitute_glyph_index_vertical)
(79,pfcid1)
(80,file)
(81,&file_table_pos)
(82,MetricsCount)
(83,pfont->data.get_metrics = z11_get_metrics)
(84,gs_font_cid2 *)
(85,code)
(86,gs_type42_get_outline_from_TT_file)
(87,code = array_get(imemory, a, j, &v)
(88,i < 2)
(89,data)
(90,e_undefined)
(91,get_metrics)
(92,release_subst_CID_on_WMode)
(93,dict_find_string(op, "file_table_pos", &file_table_pos)
(94,i = 0)
(95,&pCIDFontName)
(96,code)
(97,pfcid->font_name)
(98,&CIDFontName)
(99,pfont_data(pfont)
(100,gs_font_cid2 *)
(101,bf_CharStrings_optional |\n\\n\\t\\t\\t\\t  (pfile != NULL ? bf_has_font_file : 0)
(102,pfile = NULL)
(103,subst_CID_on_WMode)
(104,loca_glyph_pos)
(105,&a)
(106,pfcid->font_name)
(107,"CIDMap")
(108,pfcid)
(109,code < 0)
(110,pfont->data.get_metrics)
(111,get_outline)
(112,code = dict_find_string(op, "file_table_pos", &file_table_pos)
(113,check_read_file(s, &file)
(114,gdcache)
(115,pfcid)
(116,pfile)
(117,i)
(118,NULL)
(119,&cfnstr)
(120,subst_CID_on_WMode)
(121,*pCIDFontName)
(122,common)
(123,v)
(124,code = get_subst_CID_on_WMode(subst, t, 0)
(125,2)
(126,pfont_data(pfont)
(127,(const char *)
(128,const_bytes)
(129,0)
(130,*pfcid1 = (gs_font_cid2 *)
(131,)
(132,if (code < 0)
(133,pfont->procs.glyph_outline = z11_glyph_outline)
(134,pfcid->cidata)
(135,gs_font *)
(136,subst->data[0])
(137,op)
(138,data)
(139,if (code < 0)
(140,memory)
(141,MetricsCount)
(142,loca_glyph_pos)
(143,pfont->data.gdcache)
(144,file)
(145,t_array)
(146,data)
(147,)
(148,subst)
(149,pCIDFontName)
(150,)
(151,dict_find_string(op, "CIDFontName", &pCIDFontName)
(152,name)
(153,a)
(154,pfont)
(155,file = *pfile)
(156,r_type(file_table_pos)
(157,(code = dict_find_string(op, "CIDFontName", &pCIDFontName)
(158,pfcid->data.substitute_glyph_index_vertical)
(159,&cfnstr)
(160,)
(161,)
(162,dict_find_string(t, "Ordering", &o)
(163,v.value.intval)
(164,t)
(165,pfont->data)
(166,switch (code)
(167,type42)
(168,cidata)
(169,ft_CID_TrueType)
(170,loca_glyph_pos[1][0])
(171,build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,\n\\n\\t\\t\\t\\t  &st_gs_font_cid2,\n\\n\\t\\t\\t\\t  (const char *)
(172,pfcid)
(173,pfcid1->cidata.common.CIDSystemInfo.Ordering.data)
(174,font)
(175,pfont)
(176,get_outline)
(177,*subst = NULL)
(178,pfcid->cidata)
(179,code = gs_font_notify_register((gs_font *)
(180,"Ordering")
(181,font)
(182,pfcid->memory)
(183,&common)
(184,pfcid1->cidata)
(185,return_error(e_rangecheck)
(186,pfcid1->subst_CID_on_WMode != NULL)
(187,0)
(188,data)
(189,subst)
(190,pfont->data)
(191,0)
(192,MetricsCount & 1)
(193,1)
(194,subst)
(195,t_dictionary)
(196,bf_UniqueID_ignored |\n\\n\\t\\t\\t\\t  bf_CharStrings_optional |\n\\n\\t\\t\\t\\t  (pfile != NULL ? bf_has_font_file : 0)
(197,pfcid)
(198,e_rangecheck)
(199,font_name)
(200,pfcid->cidata)
(201,pfont->procs.glyph_info = z11_glyph_info)
(202,(gs_font *)
(203,case t_string:)
(204,font = ifont_dir->orig_fonts)
(205,0)
(206,Ordering)
(207,if (code < 0 ||\n\\n\\t(code = dict_find_string(op, "CIDFontName", &pCIDFontName)
(208,bf_UniqueID_ignored)
(209,0)
(210,pfcid1)
(211,pfcid->font_name.size)
(212,procs)
(213,j)
(214,dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)
(215,if (pfcid->font_name.size == 0)
(216,gdb:)
(217,pfcid->subst_CID_on_WMode)
(218,&ignore_gdir)
(219,(gs_font_cid2 *)
(220,o)
(221,r_type(&v)
(222,pfont->data.loca)
(223,switch (r_type(&rcidmap)
(224,a)
(225,ifont_dir->orig_fonts)
(226,CIDFontName)
(227,"MetricsCount")
(228,pfont)
(229,code < 0)
(230,o)
(231,glyph_info)
(232,check_read_type(file, t_file)
(233,cfnstr)
(234,code = dict_find_string(op, "File", &pfile)
(235,pfont->data.glyf = loca_glyph_pos[1][0])
(236,t)
(237,dict_find_string(t, "Ordering", &o)
(238,pfont->data.get_metrics)
(239,pfcid)
(240,(gs_font *)
(241,font_string_array_param(imemory, op, "CIDMap", &rcidmap)
(242,pfcid)
(243,pfcid)
(244,pfcid1)
(245,pfcid->subst_CID_on_WMode = subst)
(246,code)
(247,pfont->data.get_outline)
(248,pfont->data.get_glyph_index)
(249,pfcid->font_name.size == 0)
(250,code < 0)
(251,dict_find_string(file_table_pos, name[i], &a)
(252,0)
(253,dict_find_string(op, "subst_CID_on_WMode", &t)
(254,"file_table_pos")
(255,pfile)
(256,code)
(257,font->FontType == ft_CID_TrueType)
(258,bf_Encoding_optional)
(259,0)
(260,rc_increment(subst)
(261,return code;)
(262,code)
(263,array_get(imemory, a, j, &v)
(264,pfont_data(pfont)
(265,cfnstr)
(266,dict_find_string(op, "File", &pfile)
(267,code)
(268,rcidmap)
(269,r_type(&v)
(270,pfcid1->cidata.common)
(271,pfcid->data)
(272,t)
(273,pfont)
(274,1)
(275,pfont->data.get_outline)
(276,pfcid1->cidata.common.CIDSystemInfo.Ordering)
(277,if (code <= 0 || r_type(file_table_pos)
(278,pfont_data(pfont)
(279,pfont)
(280,pfont->procs)
(281,subst)
(282,ifont_dir)
(283,subst_CID_on_WMode)
(284,code)
(285,return code;)
(286,&o)
(287,pfont)
(288,op)
(289,(code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)
(290,&pfont)
(291,loca_glyph_pos)
(292,if (dict_find_string(op, "subst_CID_on_WMode", &t)
(293,name)
(294,pfont->data)
(295,common)
(296,get_metrics)
(297,code = get_subst_CID_on_WMode(subst, t, 1)
(298,i_ctx_p)
(299,)
(300,pfont)
(301,r_type(t)
(302,i)
(303,(void *)
(304,op)
(305,return code;)
(306,bytes_compare(o->value.const_bytes, r_size(o)
(307,font)
(308,file_table_pos)
(309,get_font_name(imemory, &cfnstr, &CIDFontName)
(310,)
(311,code)
(312,code)
(313,code)
(314,)
(315,get_subst_CID_on_WMode(subst, t, 1)
(316,CIDSystemInfo)
(317,code)
(318,t_integer)
(319,loca_glyph_pos[i][j])
(320,a)
(321,0)
(322,0)
(323,)
(324,break;)
(325,*name[2] = {"loca", "glyf"})
(326,r_type(a)
(327,pfcid->subst_CID_on_WMode = subst)
(328,return_error(e_invalidfont)
(329,&file)
(330,&pfile)
(331,2)
(332,ref_assign(&pfont_data(pfont)
(333,pfont->data)
(334,pfcid1->cidata)
(335,loca_glyph_pos[1])
(336,pfont->data.glyf)
(337,data)
(338,code)
(339,0)
(340,)
(341,r_type(o)
(342,o)
(343,pfont)
(344,pfont->procs)
(345,code != e_undefined)
(346,pfile)
(347,code < 0)
(348,pfcid)
(349,pfcid->cidata.orig_procs.get_outline = pfont->data.get_outline)
(350,cfnstr)
(351,j)
(352,0)
(353,void *)
(354,i)
(355,data)
(356,0)
(357,return code;)
(358,op)
(359,code)
(360,procs)
(361,subst_CID_on_WMode)
(362,rc_increment(subst)
(363,pfont->data)
(364,pfile != NULL ? bf_has_font_file : 0)
(365,get_glyph_index)
(366,st_subst_CID_on_WMode)
(367,common)
(368,return_error(e_invalidfont)
(369,CIDMap)
(370,MetricsCount)
(371,t)
(372,)
(373,if (code <= 0 || r_type(a)
(374,o->value.const_bytes)
(375,"CIDFontName")
(376,0)
(377,pfcid1->cidata.common.CIDSystemInfo.Ordering.size)
(378,pfont)
(379,NULL)
(380,code <= 0 || r_type(file_table_pos)
(381,op)
(382,pfcid->data.substitute_glyph_index_vertical = font11_substitute_glyph_index_vertical)
(383,font->FontType)
(384,if (code < 0)
(385,pfcid->cidata.MetricsCount)
(386,MetricsCount)
(387,r_type(t)
(388,pfont->procs.glyph_info)
(389,code)
(390,r_size(o)
(391,intval)
(392,subst->data[1])
(393,cidata)
(394,)
(395,font = font->next)
(396,pfont->data)
(397,pfont->data.gdcache = gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file)
(398,common)
(399,st_gs_font_cid2)
(400,file)
(401,pfcid = (gs_font_cid2 *)
(402,z11_enumerate_glyph)
(403,subst == NULL)
(404,if (pfcid1->subst_CID_on_WMode != NULL &&\n\\n\\t\\t    bytes_compare(o->value.const_bytes, r_size(o)
(405,for (j = 0; j < 2; j++)
(406,code < 0)
(407,rcidmap)
(408,Ordering)
(409,pfont->data.loca = loca_glyph_pos[0][0])
(410,r_type(&rcidmap)
(411,enumerate_glyph)
(412,pfile)
(413,subst->data[0] = subst->data[1] = 0)
(414,0)
(415,if (code < 0 || r_type(&v)
(416,data)
(417,cid_font_data_param(op, &common, &ignore_gdir)
(418,v)
(419,pfcid->cidata.orig_procs)
(420,loca)
(421,rcidmap)
(422,t)
(423,font_name)
(424,font)
(425,font)
(426,pfcid)
(427,font != NULL)
(428,break;)
(429,op)
(430,j < 2)
(431,pfcid->cidata.CIDMap_proc)
(432,code < 0 || r_type(&v)
(433,pCIDFontName)
(434,v.value)
(435,pfcid->cidata.orig_procs.get_outline)
(436,size)
(437,pfcid1->subst_CID_on_WMode)
(438,case t_integer:)
(439,orig_procs)
(440,1)
(441,common.GDBytes)
(442,CIDFontName)
(443,code)
(444,pfile)
(445,value)
(446,pfcid->cidata.common = common)
(447,pfont->procs.enumerate_glyph)
(448,file_table_pos)
(449,gs_font *)
(450,pfcid1)
(451,imemory)
(452,pfcid->cidata.CIDMap_proc = z11_CIDMap_proc)
(453,t_string)
(454,gs_get_glyph_data_cached)
(455,pfont->data.get_outline = z11_get_outline)
(456,e_rangecheck)
(457,z11_glyph_info)
(458,&MetricsCount)
(459,font)
(460,case t_dictionary:)
(461,code = dict_find_string(file_table_pos, name[i], &a)
(462,loca_glyph_pos[0])
(463,s)
(464,subst)
(465,return define_gs_font((gs_font *)
(466,pfont)
(467,CIDSystemInfo)
(468,if (code > 0)
(469,data)
(470,j)
(471,bf_Encoding_optional |\n\\n\\t\\t\\t\\t  bf_UniqueID_ignored |\n\\n\\t\\t\\t\\t  bf_CharStrings_optional |\n\\n\\t\\t\\t\\t  (pfile != NULL ? bf_has_font_file : 0)
(472,common)
(473,cidata)
(474,data)
(475,pfcid->cidata.MetricsCount = MetricsCount)
(476,0)
(477,data)
(478,t)
(479,default:)
(480,pfile != NULL)
(481,osp)
(482,return code;)
(483,0)
(484,pfont->data)
(485,glyph_outline)
(486,"subst_CID_on_WMode")
(487,2)
(488,common)
(489,subst)
(490,subst)
(491,code)
(492,NULL)
(493,subst)
(494,subst)
(495,0)
(496,code = font_string_array_param(imemory, op, "CIDMap", &rcidmap)
(497,NULL)
(498,pfcid1->subst_CID_on_WMode)
(499,procs)
(500,FontType)
(501,data)
(502,pfcid1)
(503,RET)
(504,font->next)
(505,code <= 0)
(506,code)
(507,code)
(508,u)
(509,a)
(510,pfcid)
(511,v)
(512,e_VMerror)
(513,subst)
(514,default:)
(515,rcidmap)
(516,"zbuildfont11")
(517,pfont->data)
(518,code)
(519,subst->data)
(520,font)
(521,pfont)
(522,loca_glyph_pos[0][0])
(523,&st_subst_CID_on_WMode)
(524,NULL)
(525,pfont)
(526,pfcid1->cidata.common.CIDSystemInfo.Ordering)
(527,2)
(528,pfcid->subst_CID_on_WMode)
(529,pfcid)
(530,pfcid->cidata.orig_procs.get_metrics = pfont->data.get_metrics)
(531,code <= 0)
(532,NULL)
(533,goto gdb;)
(534,ignore_gdir)
(535,if (dict_find_string(t, "Ordering", &o)
(536,v)
(537,e_invalidfont)
(538,dict_find_string(t, "Ordering", &o)
(539,op)
(540,orig_fonts)
(541,pfont)
(542,CIDFontName = *pCIDFontName)
(543,o)
(544,MetricsCount)
(545,loca_glyph_pos[2][2])
(546,z11_get_glyph_index)
(547,pfont)
(548,get_metrics)
(549,data)
(550,(gs_font_cid2 *)
(551,ignore_gdir)
(552,)
(553,t_file)
(554,pfcid1)
(555,cidata)
(556,ft_CID_TrueType)
(557,dict_find_string(op, "subst_CID_on_WMode", &t)
(558,case e_typecheck:)
(559,cidata)
(560,z11_CIDMap_proc)
(561,&rcidmap)
(562,if (MetricsCount & 1)
(563,dict_find_string(op, "subst_CID_on_WMode", &t)
(564,pfcid->cidata.orig_procs)
(565,code = cid_font_data_param(op, &common, &ignore_gdir)
(566,return_error(e_invalidfont)
(567,pfont->data)
(568,CIDFontName)
(569,size)
(570,code)
(571,pfcid1->cidata.common.CIDSystemInfo)
(572,const char *)
(573,op)
(574,code)
(575,if (MetricsCount)
(576,pfont)
(577,pfont->procs)
(578,z11_get_outline)
(579,s)
(580,pfcid->cidata.common)
(581,pfont)
(582,r_type(a)
(583,i_ctx_t *i_ctx_p)
(584,common)
(585,substitute_glyph_index_vertical)
(586,&pfcid->font_name)
(587,code)
(588,e_invalidfont)
(589,pCIDFontName)
(590,GDBytes)
(591,z11_glyph_outline)
(592,(code = dict_find_string(op, "CIDFontName", &pCIDFontName)
(593,pfcid1->cidata.common)
(594,name[i])
(595,code)
(596,code)
(597,0)
(598,j)
(599,rc_alloc_struct_1(subst, gs_subst_CID_on_WMode_t, &st_subst_CID_on_WMode,\n\\n\\t\\t\\t    pfcid->memory, return_error(e_VMerror)
(600,if (subst == NULL)
(601,gs_font_notify_register((gs_font *)
(602,MetricsCount)
(603,gs_subst_CID_on_WMode_t)
(604,orig_procs)
(605,code <= 0 || r_type(a)
(606,case 0:)
(607,subst)
(608,next)
(609,0)
(610,pfcid)
(611,file_table_pos)
(612,&rcidmap)
(613,if (code < 0)
(614,get_outline)
(615,code)
(616,&pfont_data(pfont)
(617,0)
(618,for (i = 0; i < 2; i++)
(619,j = 0)
(620,i)
(621,code)
(622,copy_font_name(&pfcid->font_name, &cfnstr)
(623,CIDMap_proc)
(624,o->value)
(625,code < 0 && code != e_undefined)
(626,j)
(627,loca_glyph_pos[i][j] = v.value.intval)
(628,break;)
(629,4)
(630,pfcid)
(631,return_error(e_VMerror)
(632,j++)
(633,pfont->procs.enumerate_glyph = z11_enumerate_glyph)
(634,bf_has_font_file)
(635,subst->data[1] = 0)
(636,gs_glyph_cache__alloc(pfont, s, gs_type42_get_outline_from_TT_file)
(637,e_invalidfont)
(638,&st_gs_font_cid2)
(639,0)
(640,cidata)
(641,i)
(642,for (font = ifont_dir->orig_fonts; font != NULL; font = font->next)
(643,glyf)
(644,name)
(645,file)
(646,r_type(file_table_pos)
(647,subst->data)
(648,get_subst_CID_on_WMode(subst, t, 0)
(649,subst)
(650,file_table_pos)
(651,pfcid->cidata)
(652,"File")
(653,pfile)
(654,code = build_gs_TrueType_font(i_ctx_p, op, &pfont, ft_CID_TrueType,\n\\n\\t\\t\\t\\t  &st_gs_font_cid2,\n\\n\\t\\t\\t\\t  (const char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^