-----label-----
0
-----code-----
static int gfs2_write_end(struct file *file, struct address_space *mapping,
			  loff_t pos, unsigned len, unsigned copied,
			  struct page *page, void *fsdata)
{
	struct inode *inode = page->mapping->host;
	struct gfs2_inode *ip = GFS2_I(inode);
	struct gfs2_sbd *sdp = GFS2_SB(inode);
	struct gfs2_inode *m_ip = GFS2_I(sdp->sd_statfs_inode);
	struct buffer_head *dibh;
	unsigned int from = pos & (PAGE_CACHE_SIZE - 1);
	unsigned int to = from + len;
	int ret;
	struct gfs2_trans *tr = current->journal_info;
	BUG_ON(!tr);

	BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL);

	ret = gfs2_meta_inode_buffer(ip, &dibh);
	if (unlikely(ret)) {
		unlock_page(page);
		page_cache_release(page);
		goto failed;
	}

	if (gfs2_is_stuffed(ip))
		return gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page);

	if (!gfs2_is_writeback(ip))
		gfs2_page_add_databufs(ip, page, from, to);

	ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata);
	if (tr->tr_num_buf_new)
		__mark_inode_dirty(inode, I_DIRTY_DATASYNC);
	else
		gfs2_trans_add_meta(ip->i_gl, dibh);


	if (inode == sdp->sd_rindex) {
		adjust_fs_space(inode);
		sdp->sd_rindex_uptodate = 0;
	}

	brelse(dibh);
failed:
	gfs2_trans_end(sdp);
	gfs2_inplace_release(ip);
	if (ip->i_res->rs_qa_qd_num)
		gfs2_quota_unlock(ip);
	if (inode == sdp->sd_rindex) {
		gfs2_glock_dq(&m_ip->i_gh);
		gfs2_holder_uninit(&m_ip->i_gh);
	}
	gfs2_glock_dq(&ip->i_gh);
	gfs2_holder_uninit(&ip->i_gh);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
24,25
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
36,37
36,38
38,39
38,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
41,49
41,50
41,51
41,52
41,53
41,54
41,55
41,56
41,57
41,58
41,59
41,60
41,61
41,62
41,63
41,64
41,65
41,66
41,67
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
60,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
86,88
86,89
89,90
90,91
90,92
91,92
93,94
93,95
94,95
97,98
98,99
98,100
99,100
101,102
101,103
104,105
105,106
105,107
107,108
107,109
109,110
110,111
110,112
111,112
113,114
114,115
114,116
115,116
118,119
119,120
119,121
121,122
121,123
123,124
124,125
124,126
125,126
127,128
129,130
130,131
130,132
132,133
134,135
135,136
135,137
136,137
138,139
138,140
138,141
141,142
142,143
142,144
143,144
146,147
147,148
147,149
148,149
150,151
151,152
153,154
154,155
154,156
155,156
157,158
157,159
158,159
158,160
159,160
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
171,172
171,173
171,174
172,173
174,175
176,177
177,178
179,180
179,181
180,181
180,182
181,182
183,184
185,186
185,187
185,188
186,187
187,188
187,189
188,189
190,191
192,193
193,194
193,195
194,195
196,197
198,199
200,201
200,202
201,202
201,203
202,203
204,205
206,207
207,208
207,209
207,210
207,211
207,212
207,213
207,214
208,209
210,211
212,213
214,215
216,217
218,219
220,221
222,223
222,224
223,224
224,225
224,226
225,226
227,228
229,230
230,231
230,232
230,233
230,234
230,235
231,232
233,234
235,236
237,238
239,240
241,242
242,243
242,244
243,244
245,246
245,247
245,248
245,249
245,250
245,251
245,252
245,253
246,247
248,249
250,251
252,253
254,255
256,257
258,259
260,261
262,263
262,264
262,265
263,264
263,265
264,265
267,268
268,269
268,270
268,271
269,270
271,272
273,274
275,276
276,277
276,278
276,279
277,278
279,280
279,281
280,281
283,284
285,286
285,287
286,287
286,288
287,288
289,290
289,291
290,291
293,294
293,295
294,295
295,296
295,297
296,297
298,299
300,301
301,302
301,303
302,303
302,304
303,304
307,308
308,309
308,310
309,310
311,312
313,314
313,315
315,316
316,317
316,318
317,318
319,320
321,322
322,323
322,324
323,324
325,326
327,328
327,329
328,329
328,330
329,330
329,331
330,331
334,335
335,336
335,337
336,337
338,339
340,341
340,342
341,342
341,343
342,343
344,345
344,346
345,346
348,349
348,350
349,350
350,351
350,352
351,352
353,354
354,355
354,356
355,356
358,359
359,360
359,361
360,361
362,363
363,364
363,365
364,365
367,368
368,369
368,370
369,370
371,372
372,373
372,374
373,374
376,377
377,378
377,379
378,379
380,381
381,382
381,383
382,383
385,386
386,387
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,23,25,27,29,32,34,35,37,39,40,45,47,48,53,54,55,59,61,62,66,68,72,74,75,79,81,85,87,88,92,95,96,100,102,103,106,108,112,116,117,120,122,126,128,131,133,137,139,140,144,145,149,152,156,160,163,164,166,170,173,175,178,182,184,189,191,195,197,199,203,205,209,211,213,215,217,219,221,226,228,232,234,236,238,240,244,247,249,251,253,255,257,259,261,265,266,270,272,274,278,281,282,284,288,291,292,297,299,304,305,306,310,312,314,318,320,324,326,331,332,333,337,339,343,346,347,352,356,357,361,365,366,370,374,375,379,383,384,387
-----computeFrom-----
110,111
110,112
114,115
114,116
124,125
124,126
157,158
157,159
168,169
168,170
242,243
242,244
286,287
286,288
301,302
301,303
341,342
341,343
-----guardedBy-----
288,299
291,304
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int gfs2_write_end(struct file *file, struct address_space *mapping,			  loff_t pos, unsigned len, unsigned copied,			  struct page *page, void *fsdata){	struct inode *inode = page->mapping->host;	struct gfs2_inode *ip = GFS2_I(inode);	struct gfs2_sbd *sdp = GFS2_SB(inode);	struct gfs2_inode *m_ip = GFS2_I(sdp->sd_statfs_inode);	struct buffer_head *dibh;	unsigned int from = pos & (PAGE_CACHE_SIZE - 1);	unsigned int to = from + len;	int ret;	struct gfs2_trans *tr = current->journal_info;	BUG_ON(!tr);	BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL);	ret = gfs2_meta_inode_buffer(ip, &dibh);	if (unlikely(ret)) {		unlock_page(page);		page_cache_release(page);		goto failed;	}	if (gfs2_is_stuffed(ip))		return gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page);	if (!gfs2_is_writeback(ip))		gfs2_page_add_databufs(ip, page, from, to);	ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata);	if (tr->tr_num_buf_new)		__mark_inode_dirty(inode, I_DIRTY_DATASYNC);	else		gfs2_trans_add_meta(ip->i_gl, dibh);	if (inode == sdp->sd_rindex) {		adjust_fs_space(inode);		sdp->sd_rindex_uptodate = 0;	}	brelse(dibh);failed:	gfs2_trans_end(sdp);	gfs2_inplace_release(ip);	if (ip->i_res->rs_qa_qd_num)		gfs2_quota_unlock(ip);	if (inode == sdp->sd_rindex) {		gfs2_glock_dq(&m_ip->i_gh);		gfs2_holder_uninit(&m_ip->i_gh);	}	gfs2_glock_dq(&ip->i_gh);	gfs2_holder_uninit(&ip->i_gh);	return ret;}
static int
gfs2_write_end(struct file *file, struct address_space *mapping,			  loff_t pos, unsigned len, unsigned copied,			  struct page *page, void *fsdata)
gfs2_write_end
struct file *file
struct file
file
*file
*
file
struct address_space *mapping
struct address_space
address_space
*mapping
*
mapping
loff_t pos
loff_t
loff_t
pos
pos
unsigned len
unsigned
len
len
unsigned copied
unsigned
copied
copied
struct page *page
struct page
page
*page
*
page
void *fsdata
void
*fsdata
*
fsdata
{	struct inode *inode = page->mapping->host;	struct gfs2_inode *ip = GFS2_I(inode);	struct gfs2_sbd *sdp = GFS2_SB(inode);	struct gfs2_inode *m_ip = GFS2_I(sdp->sd_statfs_inode);	struct buffer_head *dibh;	unsigned int from = pos & (PAGE_CACHE_SIZE - 1);	unsigned int to = from + len;	int ret;	struct gfs2_trans *tr = current->journal_info;	BUG_ON(!tr);	BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL);	ret = gfs2_meta_inode_buffer(ip, &dibh);	if (unlikely(ret)) {		unlock_page(page);		page_cache_release(page);		goto failed;	}	if (gfs2_is_stuffed(ip))		return gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page);	if (!gfs2_is_writeback(ip))		gfs2_page_add_databufs(ip, page, from, to);	ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata);	if (tr->tr_num_buf_new)		__mark_inode_dirty(inode, I_DIRTY_DATASYNC);	else		gfs2_trans_add_meta(ip->i_gl, dibh);	if (inode == sdp->sd_rindex) {		adjust_fs_space(inode);		sdp->sd_rindex_uptodate = 0;	}	brelse(dibh);failed:	gfs2_trans_end(sdp);	gfs2_inplace_release(ip);	if (ip->i_res->rs_qa_qd_num)		gfs2_quota_unlock(ip);	if (inode == sdp->sd_rindex) {		gfs2_glock_dq(&m_ip->i_gh);		gfs2_holder_uninit(&m_ip->i_gh);	}	gfs2_glock_dq(&ip->i_gh);	gfs2_holder_uninit(&ip->i_gh);	return ret;}
struct inode *inode = page->mapping->host;
struct inode *inode = page->mapping->host;
struct inode
inode
*inode = page->mapping->host
*
inode
= page->mapping->host
page->mapping->host
page->mapping
page
page
mapping
host
struct gfs2_inode *ip = GFS2_I(inode);
struct gfs2_inode *ip = GFS2_I(inode);
struct gfs2_inode
gfs2_inode
*ip = GFS2_I(inode)
*
ip
= GFS2_I(inode)
GFS2_I(inode)
GFS2_I
GFS2_I
inode
inode
struct gfs2_sbd *sdp = GFS2_SB(inode);
struct gfs2_sbd *sdp = GFS2_SB(inode);
struct gfs2_sbd
gfs2_sbd
*sdp = GFS2_SB(inode)
*
sdp
= GFS2_SB(inode)
GFS2_SB(inode)
GFS2_SB
GFS2_SB
inode
inode
struct gfs2_inode *m_ip = GFS2_I(sdp->sd_statfs_inode);
struct gfs2_inode *m_ip = GFS2_I(sdp->sd_statfs_inode);
struct gfs2_inode
gfs2_inode
*m_ip = GFS2_I(sdp->sd_statfs_inode)
*
m_ip
= GFS2_I(sdp->sd_statfs_inode)
GFS2_I(sdp->sd_statfs_inode)
GFS2_I
GFS2_I
sdp->sd_statfs_inode
sdp
sdp
sd_statfs_inode
struct buffer_head *dibh;
struct buffer_head *dibh;
struct buffer_head
buffer_head
*dibh
*
dibh
unsigned int from = pos & (PAGE_CACHE_SIZE - 1);
unsigned int from = pos & (PAGE_CACHE_SIZE - 1);
unsigned int
from = pos & (PAGE_CACHE_SIZE - 1)
from
= pos & (PAGE_CACHE_SIZE - 1)
pos & (PAGE_CACHE_SIZE - 1)
pos
pos
(PAGE_CACHE_SIZE - 1)
PAGE_CACHE_SIZE - 1
PAGE_CACHE_SIZE
PAGE_CACHE_SIZE
1
unsigned int to = from + len;
unsigned int to = from + len;
unsigned int
to = from + len
to
= from + len
from + len
from
from
len
len
int ret;
int ret;
int
ret
ret
struct gfs2_trans *tr = current->journal_info;
struct gfs2_trans *tr = current->journal_info;
struct gfs2_trans
gfs2_trans
*tr = current->journal_info
*
tr
= current->journal_info
current->journal_info
current
current
journal_info
BUG_ON(!tr);
BUG_ON(!tr)
BUG_ON
BUG_ON
!tr
tr
tr
BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL);
BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl) == NULL)
BUG_ON
BUG_ON
gfs2_glock_is_locked_by_me(ip->i_gl) == NULL
gfs2_glock_is_locked_by_me(ip->i_gl)
gfs2_glock_is_locked_by_me
gfs2_glock_is_locked_by_me
ip->i_gl
ip
ip
i_gl
NULL
NULL
ret = gfs2_meta_inode_buffer(ip, &dibh);
ret = gfs2_meta_inode_buffer(ip, &dibh)
ret
ret
gfs2_meta_inode_buffer(ip, &dibh)
gfs2_meta_inode_buffer
gfs2_meta_inode_buffer
ip
ip
&dibh
dibh
dibh
if (unlikely(ret)) {		unlock_page(page);		page_cache_release(page);		goto failed;	}
unlikely(ret)
unlikely
unlikely
ret
ret
{		unlock_page(page);		page_cache_release(page);		goto failed;	}
unlock_page(page);
unlock_page(page)
unlock_page
unlock_page
page
page
page_cache_release(page);
page_cache_release(page)
page_cache_release
page_cache_release
page
page
goto failed;
failed
if (gfs2_is_stuffed(ip))		return gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page);
gfs2_is_stuffed(ip)
gfs2_is_stuffed
gfs2_is_stuffed
ip
ip
return gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page);
gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page)
gfs2_stuffed_write_end
gfs2_stuffed_write_end
inode
inode
dibh
dibh
pos
pos
len
len
copied
copied
page
page
if (!gfs2_is_writeback(ip))		gfs2_page_add_databufs(ip, page, from, to);
!gfs2_is_writeback(ip)
gfs2_is_writeback(ip)
gfs2_is_writeback
gfs2_is_writeback
ip
ip
gfs2_page_add_databufs(ip, page, from, to);
gfs2_page_add_databufs(ip, page, from, to)
gfs2_page_add_databufs
gfs2_page_add_databufs
ip
ip
page
page
from
from
to
to
ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata);
ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata)
ret
ret
generic_write_end(file, mapping, pos, len, copied, page, fsdata)
generic_write_end
generic_write_end
file
file
mapping
mapping
pos
pos
len
len
copied
copied
page
page
fsdata
fsdata
if (tr->tr_num_buf_new)		__mark_inode_dirty(inode, I_DIRTY_DATASYNC);	else		gfs2_trans_add_meta(ip->i_gl, dibh);
tr->tr_num_buf_new
tr
tr
tr_num_buf_new
__mark_inode_dirty(inode, I_DIRTY_DATASYNC);
__mark_inode_dirty(inode, I_DIRTY_DATASYNC)
__mark_inode_dirty
__mark_inode_dirty
inode
inode
I_DIRTY_DATASYNC
I_DIRTY_DATASYNC
gfs2_trans_add_meta(ip->i_gl, dibh);
gfs2_trans_add_meta(ip->i_gl, dibh)
gfs2_trans_add_meta
gfs2_trans_add_meta
ip->i_gl
ip
ip
i_gl
dibh
dibh
if (inode == sdp->sd_rindex) {		adjust_fs_space(inode);		sdp->sd_rindex_uptodate = 0;	}
inode == sdp->sd_rindex
inode
inode
sdp->sd_rindex
sdp
sdp
sd_rindex
{		adjust_fs_space(inode);		sdp->sd_rindex_uptodate = 0;	}
adjust_fs_space(inode);
adjust_fs_space(inode)
adjust_fs_space
adjust_fs_space
inode
inode
sdp->sd_rindex_uptodate = 0;
sdp->sd_rindex_uptodate = 0
sdp->sd_rindex_uptodate
sdp
sdp
sd_rindex_uptodate
0
brelse(dibh);
brelse(dibh)
brelse
brelse
dibh
dibh
failed:	gfs2_trans_end(sdp);
failed
gfs2_trans_end(sdp);
gfs2_trans_end(sdp)
gfs2_trans_end
gfs2_trans_end
sdp
sdp
gfs2_inplace_release(ip);
gfs2_inplace_release(ip)
gfs2_inplace_release
gfs2_inplace_release
ip
ip
if (ip->i_res->rs_qa_qd_num)		gfs2_quota_unlock(ip);
ip->i_res->rs_qa_qd_num
ip->i_res
ip
ip
i_res
rs_qa_qd_num
gfs2_quota_unlock(ip);
gfs2_quota_unlock(ip)
gfs2_quota_unlock
gfs2_quota_unlock
ip
ip
if (inode == sdp->sd_rindex) {		gfs2_glock_dq(&m_ip->i_gh);		gfs2_holder_uninit(&m_ip->i_gh);	}
inode == sdp->sd_rindex
inode
inode
sdp->sd_rindex
sdp
sdp
sd_rindex
{		gfs2_glock_dq(&m_ip->i_gh);		gfs2_holder_uninit(&m_ip->i_gh);	}
gfs2_glock_dq(&m_ip->i_gh);
gfs2_glock_dq(&m_ip->i_gh)
gfs2_glock_dq
gfs2_glock_dq
&m_ip->i_gh
m_ip->i_gh
m_ip
m_ip
i_gh
gfs2_holder_uninit(&m_ip->i_gh);
gfs2_holder_uninit(&m_ip->i_gh)
gfs2_holder_uninit
gfs2_holder_uninit
&m_ip->i_gh
m_ip->i_gh
m_ip
m_ip
i_gh
gfs2_glock_dq(&ip->i_gh);
gfs2_glock_dq(&ip->i_gh)
gfs2_glock_dq
gfs2_glock_dq
&ip->i_gh
ip->i_gh
ip
ip
i_gh
gfs2_holder_uninit(&ip->i_gh);
gfs2_holder_uninit(&ip->i_gh)
gfs2_holder_uninit
gfs2_holder_uninit
&ip->i_gh
ip->i_gh
ip
ip
i_gh
return ret;
ret
ret
-----joern-----
(112,108,0)
(147,88,0)
(5,34,0)
(116,37,0)
(26,9,0)
(125,53,0)
(130,93,0)
(108,112,0)
(85,79,0)
(134,89,0)
(101,144,0)
(127,37,0)
(40,174,0)
(7,24,0)
(128,124,0)
(157,107,0)
(46,89,0)
(19,120,0)
(16,149,0)
(145,85,0)
(167,20,0)
(119,112,0)
(161,39,0)
(121,21,0)
(123,27,0)
(76,64,0)
(20,10,0)
(132,151,0)
(88,123,0)
(144,175,0)
(15,107,0)
(2,112,0)
(33,144,0)
(156,34,0)
(48,89,0)
(150,89,0)
(70,93,0)
(64,118,0)
(57,157,0)
(86,9,0)
(44,27,0)
(171,161,0)
(9,37,0)
(180,93,0)
(27,89,0)
(161,27,0)
(178,19,0)
(160,79,0)
(37,29,0)
(37,89,0)
(177,144,0)
(157,135,0)
(97,32,0)
(135,157,0)
(59,81,0)
(160,84,0)
(112,115,0)
(72,150,0)
(9,79,0)
(69,74,0)
(39,144,0)
(82,89,0)
(148,179,0)
(148,96,0)
(152,69,0)
(55,172,0)
(97,139,0)
(21,19,0)
(50,29,0)
(106,173,0)
(77,172,0)
(21,89,0)
(90,53,0)
(4,153,0)
(176,139,0)
(12,53,0)
(93,79,0)
(159,64,0)
(110,89,0)
(39,89,0)
(98,160,0)
(168,148,0)
(151,124,0)
(144,79,0)
(131,34,0)
(144,41,0)
(65,35,0)
(95,172,0)
(93,21,0)
(133,127,0)
(102,89,0)
(13,67,0)
(96,89,0)
(68,37,0)
(141,179,0)
(144,1,0)
(123,88,0)
(42,27,0)
(69,152,0)
(36,116,0)
(154,96,0)
(74,89,0)
(112,2,0)
(9,105,0)
(19,2,0)
(137,89,0)
(93,96,0)
(135,37,0)
(53,12,0)
(93,2,0)
(47,108,0)
(23,89,0)
(73,89,0)
(72,124,0)
(40,96,0)
(29,85,0)
(62,123,0)
(52,49,0)
(27,123,0)
(136,148,0)
(34,131,0)
(142,135,0)
(6,18,0)
(87,89,0)
(7,161,0)
(95,94,0)
(53,96,0)
(80,167,0)
(34,96,0)
(91,89,0)
(18,107,0)
(167,56,0)
(162,9,0)
(139,97,0)
(48,131,0)
(20,167,0)
(38,124,0)
(126,9,0)
(169,37,0)
(8,89,0)
(111,32,0)
(3,67,0)
(155,38,0)
(61,9,0)
(138,19,0)
(123,96,0)
(144,120,0)
(144,105,0)
(153,96,0)
(94,95,0)
(85,29,0)
(114,127,0)
(109,32,0)
(100,72,0)
(150,72,0)
(67,107,0)
(28,89,0)
(122,96,0)
(103,10,0)
(174,40,0)
(170,10,0)
(152,96,0)
(166,122,0)
(45,107,0)
(19,21,0)
(92,152,0)
(74,69,0)
(149,89,0)
(10,96,0)
(143,45,0)
(164,68,0)
(99,40,0)
(81,84,0)
(107,45,0)
(118,64,0)
(10,20,0)
(9,115,0)
(117,89,0)
(56,167,0)
(18,116,0)
(172,95,0)
(2,89,0)
(60,157,0)
(173,89,0)
(67,65,0)
(68,35,0)
(146,38,0)
(52,118,0)
(118,52,0)
(9,24,0)
(31,39,0)
(83,65,0)
(124,151,0)
(179,148,0)
(144,115,0)
(25,151,0)
(43,85,0)
(107,89,0)
(78,44,0)
(96,122,0)
(116,18,0)
(149,107,0)
(0,89,0)
(144,39,0)
(29,37,0)
(131,48,0)
(30,84,0)
(58,144,0)
(64,139,0)
(56,89,0)
(9,120,0)
(71,152,0)
(113,96,0)
(14,113,0)
(63,18,0)
(113,89,0)
(124,89,0)
(51,2,0)
(139,89,0)
(32,107,0)
(66,9,0)
(158,144,0)
(163,12,0)
(122,37,0)
(104,89,0)
(129,144,0)
(45,37,0)
(172,139,0)
(140,93,0)
(17,89,0)
(165,89,0)
(161,89,0)
(81,79,0)
(32,97,0)
(11,75,0)
(22,108,0)
(94,49,0)
(75,96,0)
(54,144,0)
(57,60,1)
(107,45,1)
(106,135,1)
(144,175,1)
(161,39,1)
(45,37,1)
(144,1,1)
(37,29,1)
(93,21,1)
(179,148,1)
(34,96,1)
(30,160,1)
(157,57,1)
(80,20,1)
(59,44,1)
(14,149,1)
(75,96,1)
(36,75,1)
(167,20,1)
(142,127,1)
(72,100,1)
(108,47,1)
(153,4,1)
(40,99,1)
(9,79,1)
(168,136,1)
(159,116,1)
(12,53,1)
(4,44,1)
(106,65,1)
(31,93,1)
(135,157,1)
(111,109,1)
(63,6,1)
(173,106,1)
(2,112,1)
(9,115,1)
(149,107,1)
(67,107,1)
(70,180,1)
(16,30,1)
(60,142,1)
(127,133,1)
(139,97,1)
(177,31,1)
(109,176,1)
(52,118,1)
(166,154,1)
(92,94,1)
(18,63,1)
(40,96,1)
(53,90,1)
(85,79,1)
(113,14,1)
(64,139,1)
(32,107,1)
(20,10,1)
(11,179,1)
(176,107,1)
(5,74,1)
(33,54,1)
(19,2,1)
(143,15,1)
(71,92,1)
(44,27,1)
(54,101,1)
(9,37,1)
(22,119,1)
(158,58,1)
(3,68,1)
(179,141,1)
(119,51,1)
(155,39,1)
(45,143,1)
(100,124,1)
(88,147,1)
(38,124,1)
(13,3,1)
(21,19,1)
(127,37,1)
(83,67,1)
(75,11,1)
(77,55,1)
(163,53,1)
(144,158,1)
(85,145,1)
(138,121,1)
(124,151,1)
(9,61,1)
(32,111,1)
(43,169,1)
(56,167,1)
(164,135,1)
(68,37,1)
(74,69,1)
(144,105,1)
(61,126,1)
(26,162,1)
(161,171,1)
(174,40,1)
(128,21,1)
(112,115,1)
(153,96,1)
(29,50,1)
(94,95,1)
(47,22,1)
(154,37,1)
(18,107,1)
(6,36,1)
(68,164,1)
(99,153,1)
(152,71,1)
(146,155,1)
(55,52,1)
(172,139,1)
(122,37,1)
(123,96,1)
(67,13,1)
(144,41,1)
(123,88,1)
(180,174,1)
(42,56,1)
(142,12,1)
(160,98,1)
(19,178,1)
(132,128,1)
(15,96,1)
(39,144,1)
(25,132,1)
(96,122,1)
(125,38,1)
(81,79,1)
(149,16,1)
(48,131,1)
(76,159,1)
(121,2,1)
(157,107,1)
(51,139,1)
(161,27,1)
(90,125,1)
(135,37,1)
(7,24,1)
(50,85,1)
(160,79,1)
(19,120,1)
(53,96,1)
(131,34,1)
(97,32,1)
(93,2,1)
(10,103,1)
(93,96,1)
(7,161,1)
(92,116,1)
(64,76,1)
(44,78,1)
(172,77,1)
(69,152,1)
(58,129,1)
(144,79,1)
(62,42,1)
(112,108,1)
(38,146,1)
(114,38,1)
(162,153,1)
(151,25,1)
(95,172,1)
(93,79,1)
(29,85,1)
(150,72,1)
(24,9,1)
(12,163,1)
(81,59,1)
(66,26,1)
(140,130,1)
(170,150,1)
(147,62,1)
(113,96,1)
(118,64,1)
(130,70,1)
(116,37,1)
(9,120,1)
(78,27,1)
(72,124,1)
(9,105,1)
(93,140,1)
(98,81,1)
(36,179,1)
(116,18,1)
(10,96,1)
(65,83,1)
(31,174,1)
(141,148,1)
(152,96,1)
(171,48,1)
(145,43,1)
(103,170,1)
(129,33,1)
(27,123,1)
(144,115,1)
(122,166,1)
(148,168,1)
(178,138,1)
(16,173,1)
(101,177,1)
(126,86,1)
(156,5,1)
(144,120,1)
(34,156,1)
(86,66,1)
(148,96,1)
(136,113,1)
(133,114,1)
(167,80,1)
(12,38,2)
(141,153,2)
(131,153,2)
(74,153,2)
(116,37,2)
(16,44,2)
(171,44,2)
(40,96,2)
(9,105,2)
(113,96,2)
(68,135,2)
(160,44,2)
(161,39,2)
(157,153,2)
(174,153,2)
(131,34,2)
(11,179,2)
(93,2,2)
(127,37,2)
(69,44,2)
(58,153,2)
(60,153,2)
(125,38,2)
(45,37,2)
(144,115,2)
(155,153,2)
(172,139,2)
(4,44,2)
(146,153,2)
(177,153,2)
(135,157,2)
(144,79,2)
(153,96,2)
(52,116,2)
(57,153,2)
(38,124,2)
(149,153,2)
(174,40,2)
(179,153,2)
(93,96,2)
(18,44,2)
(9,115,2)
(9,79,2)
(163,38,2)
(39,153,2)
(72,124,2)
(96,122,2)
(67,107,2)
(95,116,2)
(161,27,2)
(126,153,2)
(112,115,2)
(148,153,2)
(141,44,2)
(81,79,2)
(161,44,2)
(10,96,2)
(162,153,2)
(179,44,2)
(85,79,2)
(113,153,2)
(9,153,2)
(67,135,2)
(97,32,2)
(116,18,2)
(54,153,2)
(122,37,2)
(16,153,2)
(94,116,2)
(69,153,2)
(83,135,2)
(90,38,2)
(75,96,2)
(152,96,2)
(27,123,2)
(26,153,2)
(136,44,2)
(39,144,2)
(20,10,2)
(133,38,2)
(63,153,2)
(92,44,2)
(29,85,2)
(130,174,2)
(19,120,2)
(135,153,2)
(172,116,2)
(9,120,2)
(149,44,2)
(98,44,2)
(179,148,2)
(144,153,2)
(75,179,2)
(118,64,2)
(64,116,2)
(139,97,2)
(53,38,2)
(144,105,2)
(114,38,2)
(19,2,2)
(36,153,2)
(21,19,2)
(6,153,2)
(86,153,2)
(5,44,2)
(113,44,2)
(159,116,2)
(116,44,2)
(156,44,2)
(158,153,2)
(34,44,2)
(81,44,2)
(157,107,2)
(180,174,2)
(95,172,2)
(152,153,2)
(38,153,2)
(150,72,2)
(31,153,2)
(37,29,2)
(34,96,2)
(14,153,2)
(52,118,2)
(161,153,2)
(135,37,2)
(167,20,2)
(93,21,2)
(106,153,2)
(129,153,2)
(149,107,2)
(93,79,2)
(40,153,2)
(34,153,2)
(131,44,2)
(14,44,2)
(70,174,2)
(76,116,2)
(74,69,2)
(48,44,2)
(127,38,2)
(93,174,2)
(71,44,2)
(24,153,2)
(64,139,2)
(32,107,2)
(99,153,2)
(59,44,2)
(152,44,2)
(148,96,2)
(107,45,2)
(140,174,2)
(7,24,2)
(12,53,2)
(144,41,2)
(118,116,2)
(77,116,2)
(173,153,2)
(2,112,2)
(68,37,2)
(18,107,2)
(92,153,2)
(164,135,2)
(56,167,2)
(5,153,2)
(63,44,2)
(71,153,2)
(44,27,2)
(30,44,2)
(156,153,2)
(116,153,2)
(168,44,2)
(136,153,2)
(9,37,2)
(61,153,2)
(123,88,2)
(94,95,2)
(74,44,2)
(48,153,2)
(69,152,2)
(7,161,2)
(3,135,2)
(33,153,2)
(6,44,2)
(65,135,2)
(112,108,2)
(124,151,2)
(55,116,2)
(36,44,2)
(123,96,2)
(66,153,2)
(101,153,2)
(153,44,2)
(144,175,2)
(148,44,2)
(171,153,2)
(144,1,2)
(13,135,2)
(168,153,2)
(48,131,2)
(160,79,2)
(53,96,2)
(144,120,2)
(142,153,2)
(18,153,2)
-----------------------------------
(0,tr)
(1,struct file *file)
(2,from = pos & (PAGE_CACHE_SIZE - 1)
(3,sdp)
(4,ip)
(5,ip)
(6,sdp)
(7,RET)
(8,if (inode == sdp->sd_rindex)
(9,gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page)
(10,ip->i_gl)
(11,ip)
(12,gfs2_trans_add_meta(ip->i_gl, dibh)
(13,sd_rindex_uptodate)
(14,ip)
(15,sdp)
(16,sdp)
(17,if (inode == sdp->sd_rindex)
(18,sdp->sd_rindex)
(19,from + len)
(20,gfs2_glock_is_locked_by_me(ip->i_gl)
(21,to = from + len)
(22,PAGE_CACHE_SIZE)
(23,if (unlikely(ret)
(24,return gfs2_stuffed_write_end(inode, dibh, pos, len, copied, page)
(25,journal_info)
(26,dibh)
(27,ret = gfs2_meta_inode_buffer(ip, &dibh)
(28,failed:)
(29,page->mapping->host)
(30,goto failed;)
(31,ret)
(32,sdp->sd_statfs_inode)
(33,len)
(34,ip->i_gh)
(35,)
(36,inode)
(37,*inode = page->mapping->host)
(38,tr->tr_num_buf_new)
(39,ret = generic_write_end(file, mapping, pos, len, copied, page, fsdata)
(40,gfs2_is_writeback(ip)
(41,struct address_space *mapping)
(42,ret)
(43,page)
(44,unlikely(ret)
(45,GFS2_SB(inode)
(46,if (tr->tr_num_buf_new)
(47,1)
(48,gfs2_holder_uninit(&ip->i_gh)
(49,)
(50,host)
(51,from)
(52,gfs2_glock_dq(&m_ip->i_gh)
(53,ip->i_gl)
(54,pos)
(55,m_ip)
(56,BUG_ON(gfs2_glock_is_locked_by_me(ip->i_gl)
(57,sd_rindex)
(58,page)
(59,page)
(60,sdp)
(61,page)
(62,ip)
(63,sd_rindex)
(64,m_ip->i_gh)
(65,sdp->sd_rindex_uptodate = 0)
(66,pos)
(67,sdp->sd_rindex_uptodate)
(68,adjust_fs_space(inode)
(69,&ip->i_gh)
(70,page)
(71,i_gh)
(72,!tr)
(73,ret)
(74,gfs2_glock_dq(&ip->i_gh)
(75,gfs2_quota_unlock(ip)
(76,i_gh)
(77,i_gh)
(78,ret)
(79,struct page *page)
(80,NULL)
(81,unlock_page(page)
(82,to)
(83,0)
(84,)
(85,page->mapping)
(86,len)
(87,dibh)
(88,&dibh)
(89,)
(90,i_gl)
(91,from)
(92,ip)
(93,gfs2_page_add_databufs(ip, page, from, to)
(94,gfs2_holder_uninit(&m_ip->i_gh)
(95,&m_ip->i_gh)
(96,*ip = GFS2_I(inode)
(97,GFS2_I(sdp->sd_statfs_inode)
(98,page)
(99,ip)
(100,tr)
(101,mapping)
(102,inode)
(103,i_gl)
(104,m_ip)
(105,unsigned copied)
(106,dibh)
(107,*sdp = GFS2_SB(inode)
(108,PAGE_CACHE_SIZE - 1)
(109,sdp)
(110,sdp)
(111,sd_statfs_inode)
(112,pos & (PAGE_CACHE_SIZE - 1)
(113,gfs2_inplace_release(ip)
(114,inode)
(115,loff_t pos)
(116,inode == sdp->sd_rindex)
(117,if (ip->i_res->rs_qa_qd_num)
(118,&m_ip->i_gh)
(119,pos)
(120,unsigned len)
(121,to)
(122,GFS2_I(inode)
(123,gfs2_meta_inode_buffer(ip, &dibh)
(124,*tr = current->journal_info)
(125,ip)
(126,copied)
(127,__mark_inode_dirty(inode, I_DIRTY_DATASYNC)
(128,tr)
(129,copied)
(130,from)
(131,&ip->i_gh)
(132,current)
(133,I_DIRTY_DATASYNC)
(134,if (!gfs2_is_writeback(ip)
(135,inode == sdp->sd_rindex)
(136,ip)
(137,ip)
(138,from)
(139,*m_ip = GFS2_I(sdp->sd_statfs_inode)
(140,to)
(141,rs_qa_qd_num)
(142,inode)
(143,inode)
(144,generic_write_end(file, mapping, pos, len, copied, page, fsdata)
(145,mapping)
(146,tr_num_buf_new)
(147,dibh)
(148,ip->i_res)
(149,gfs2_trans_end(sdp)
(150,BUG_ON(!tr)
(151,current->journal_info)
(152,ip->i_gh)
(153,gfs2_is_stuffed(ip)
(154,ip)
(155,tr)
(156,i_gh)
(157,sdp->sd_rindex)
(158,fsdata)
(159,m_ip)
(160,page_cache_release(page)
(161,return ret;)
(162,inode)
(163,dibh)
(164,inode)
(165,if (gfs2_is_stuffed(ip)
(166,inode)
(167,gfs2_glock_is_locked_by_me(ip->i_gl)
(168,i_res)
(169,inode)
(170,ip)
(171,ret)
(172,m_ip->i_gh)
(173,brelse(dibh)
(174,!gfs2_is_writeback(ip)
(175,void *fsdata)
(176,m_ip)
(177,file)
(178,len)
(179,ip->i_res->rs_qa_qd_num)
(180,ip)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^