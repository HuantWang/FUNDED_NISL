-----label-----
1
-----code-----
void CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType myStruct)
{
    wchar_t * data = myStruct.structFirst;
    printWLine(data);
    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
-----nextToken-----
2,4,7,9,13,15,16,20,21,25,27,31,33
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType myStruct){    wchar_t * data = myStruct.structFirst;    printWLine(data);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
void
CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType myStruct)
CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67b_badSink
CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType myStruct
CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType
CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType
myStruct
myStruct
{    wchar_t * data = myStruct.structFirst;    printWLine(data);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
wchar_t * data = myStruct.structFirst;
wchar_t * data = myStruct.structFirst;
wchar_t
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,8,0)
(11,5,0)
(8,9,0)
(5,8,0)
(0,5,0)
(1,8,0)
(6,8,0)
(10,3,0)
(2,9,0)
(12,1,0)
(8,5,0)
(5,4,0)
(3,9,0)
(1,9,0)
(1,8,1)
(11,0,1)
(0,6,1)
(12,8,1)
(7,3,1)
(5,4,1)
(5,11,1)
(8,5,1)
(1,12,1)
(3,8,1)
(10,1,1)
(3,10,1)
(3,8,2)
(5,4,2)
(1,8,2)
(8,5,2)
-----------------------------------
(0,myStruct)
(1,printWLine(data)
(2,data)
(3,free(data)
(4,CWE590_Free_Memory_Not_on_Heap__free_wchar_t_static_67_structType myStruct)
(5,myStruct.structFirst)
(6,data)
(7,RET)
(8,* data = myStruct.structFirst)
(9,)
(10,data)
(11,structFirst)
(12,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^