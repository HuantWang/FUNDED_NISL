-----label-----
0
-----code-----
static int add_unformed_module(struct module *mod)
{
	int err;
	struct module *old;

	mod->state = MODULE_STATE_UNFORMED;

again:
	mutex_lock(&module_mutex);
	old = find_module_all(mod->name, strlen(mod->name), true);
	if (old != NULL) {
		if (old->state != MODULE_STATE_LIVE) {
			/* Wait in case it fails to load. */
			mutex_unlock(&module_mutex);
			err = wait_event_interruptible(module_wq,
					       finished_loading(mod->name));
			if (err)
				goto out_unlocked;
			goto again;
		}
		err = -EEXIST;
		goto out;
	}
	mod_update_bounds(mod);
	list_add_rcu(&mod->list, &modules);
	mod_tree_insert(mod);
	err = 0;

out:
	mutex_unlock(&module_mutex);
out_unlocked:
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
15,16
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
26,28
27,28
30,31
32,33
32,34
34,35
35,36
35,37
36,37
38,39
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
61,62
61,63
62,63
62,64
63,64
65,66
67,68
67,69
67,70
68,69
68,70
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
76,79
76,80
77,78
78,79
78,80
79,80
81,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
89,90
91,92
93,94
93,95
94,95
96,97
96,98
97,98
100,101
100,102
101,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
112,113
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
123,126
124,125
126,127
127,128
127,129
128,129
131,132
132,133
134,135
135,136
135,137
136,137
138,139
140,141
141,142
141,143
142,143
145,146
145,147
147,148
148,149
148,150
149,150
151,152
152,153
154,155
154,156
156,157
157,158
-----nextToken-----
2,4,7,9,10,14,16,20,22,23,28,29,31,33,37,40,41,45,48,51,52,55,58,59,60,64,66,72,73,75,80,83,87,90,92,95,98,99,102,104,106,110,113,115,119,121,125,129,130,133,137,139,143,144,146,150,153,155,158
-----computeFrom-----
25,26
25,27
43,44
43,45
62,63
62,64
69,70
69,71
85,86
85,87
108,109
108,110
141,142
141,143
-----guardedBy-----
64,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int add_unformed_module(struct module *mod){	int err;	struct module *old;	mod->state = MODULE_STATE_UNFORMED;again:	mutex_lock(&module_mutex);	old = find_module_all(mod->name, strlen(mod->name), true);	if (old != NULL) {		if (old->state != MODULE_STATE_LIVE) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}	mod_update_bounds(mod);	list_add_rcu(&mod->list, &modules);	mod_tree_insert(mod);	err = 0;out:	mutex_unlock(&module_mutex);out_unlocked:	return err;}
static int
add_unformed_module(struct module *mod)
add_unformed_module
struct module *mod
struct module
module
*mod
*
mod
{	int err;	struct module *old;	mod->state = MODULE_STATE_UNFORMED;again:	mutex_lock(&module_mutex);	old = find_module_all(mod->name, strlen(mod->name), true);	if (old != NULL) {		if (old->state != MODULE_STATE_LIVE) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}	mod_update_bounds(mod);	list_add_rcu(&mod->list, &modules);	mod_tree_insert(mod);	err = 0;out:	mutex_unlock(&module_mutex);out_unlocked:	return err;}
int err;
int err;
int
err
err
struct module *old;
struct module *old;
struct module
module
*old
*
old
mod->state = MODULE_STATE_UNFORMED;
mod->state = MODULE_STATE_UNFORMED
mod->state
mod
mod
state
MODULE_STATE_UNFORMED
MODULE_STATE_UNFORMED
again:	mutex_lock(&module_mutex);
again
mutex_lock(&module_mutex);
mutex_lock(&module_mutex);
mutex_lock
mutex_lock
(&module_mutex)
&module_mutex
&
module_mutex
old = find_module_all(mod->name, strlen(mod->name), true);
old = find_module_all(mod->name, strlen(mod->name), true)
old
old
find_module_all(mod->name, strlen(mod->name), true)
find_module_all
find_module_all
mod->name
mod
mod
name
strlen(mod->name)
strlen
strlen
mod->name
mod
mod
name
true
if (old != NULL) {		if (old->state != MODULE_STATE_LIVE) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}
old != NULL
old
old
NULL
NULL
{		if (old->state != MODULE_STATE_LIVE) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}		err = -EEXIST;		goto out;	}
if (old->state != MODULE_STATE_LIVE) {			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}
old->state != MODULE_STATE_LIVE
old->state
old
old
state
MODULE_STATE_LIVE
MODULE_STATE_LIVE
{			/* Wait in case it fails to load. */			mutex_unlock(&module_mutex);			err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));			if (err)				goto out_unlocked;			goto again;		}
mutex_unlock(&module_mutex);
mutex_unlock(&module_mutex)
mutex_unlock
mutex_unlock
&module_mutex
module_mutex
module_mutex
err = wait_event_interruptible(module_wq,					       finished_loading(mod->name));
err = wait_event_interruptible(module_wq,					       finished_loading(mod->name))
err
err
wait_event_interruptible(module_wq,					       finished_loading(mod->name))
wait_event_interruptible
wait_event_interruptible
module_wq
module_wq
finished_loading(mod->name)
finished_loading
finished_loading
mod->name
mod
mod
name
if (err)				goto out_unlocked;
err
err
goto out_unlocked;
out_unlocked
goto again;
again
err = -EEXIST;
err = -EEXIST
err
err
-EEXIST
EEXIST
EEXIST
goto out;
out
mod_update_bounds(mod);
mod_update_bounds(mod)
mod_update_bounds
mod_update_bounds
mod
mod
list_add_rcu(&mod->list, &modules);
list_add_rcu(&mod->list, &modules)
list_add_rcu
list_add_rcu
&mod->list
mod->list
mod
mod
list
&modules
modules
modules
mod_tree_insert(mod);
mod_tree_insert(mod)
mod_tree_insert
mod_tree_insert
mod
mod
err = 0;
err = 0
err
err
0
out:	mutex_unlock(&module_mutex);
out
mutex_unlock(&module_mutex);
mutex_unlock(&module_mutex)
mutex_unlock
mutex_unlock
&module_mutex
module_mutex
module_mutex
out_unlocked:	return err;
out_unlocked
return err;
err
err
-----joern-----
(14,5,0)
(13,43,0)
(55,59,0)
(28,45,0)
(27,23,0)
(62,53,0)
(1,77,0)
(53,25,0)
(28,52,0)
(70,15,0)
(24,29,0)
(21,4,0)
(20,33,0)
(34,74,0)
(20,43,0)
(59,43,0)
(11,43,0)
(16,40,0)
(29,25,0)
(66,33,0)
(33,20,0)
(14,51,0)
(4,61,0)
(40,25,0)
(49,77,0)
(48,50,0)
(60,50,0)
(32,45,0)
(52,77,0)
(28,43,0)
(16,13,0)
(45,71,0)
(58,47,0)
(2,43,0)
(37,71,0)
(30,57,0)
(64,52,0)
(44,43,0)
(3,23,0)
(72,25,0)
(36,5,0)
(42,14,0)
(39,46,0)
(74,34,0)
(56,29,0)
(10,43,0)
(67,47,0)
(27,53,0)
(22,43,0)
(68,40,0)
(65,45,0)
(23,52,0)
(38,15,0)
(13,16,0)
(50,25,0)
(76,36,0)
(41,34,0)
(13,57,0)
(57,13,0)
(61,4,0)
(46,25,0)
(36,76,0)
(7,72,0)
(15,25,0)
(5,43,0)
(40,16,0)
(54,28,0)
(9,36,0)
(36,15,0)
(72,43,0)
(17,43,0)
(29,76,0)
(18,51,0)
(8,71,0)
(26,43,0)
(46,43,0)
(50,11,0)
(74,43,0)
(73,28,0)
(53,27,0)
(47,5,0)
(35,11,0)
(31,59,0)
(75,14,0)
(28,59,0)
(12,53,0)
(6,40,0)
(51,14,0)
(45,32,0)
(0,5,0)
(63,32,0)
(61,77,0)
(23,27,0)
(15,36,0)
(5,36,0)
(76,29,0)
(52,23,0)
(55,31,1)
(24,56,1)
(0,74,1)
(61,4,1)
(72,7,1)
(54,69,1)
(67,58,1)
(15,70,1)
(12,3,1)
(75,47,1)
(28,59,1)
(58,5,1)
(15,25,1)
(36,15,1)
(3,64,1)
(7,47,1)
(31,46,1)
(28,52,1)
(76,29,1)
(53,25,1)
(37,45,1)
(13,57,1)
(29,25,1)
(48,60,1)
(19,52,1)
(11,35,1)
(32,63,1)
(5,36,1)
(63,65,1)
(39,13,1)
(40,6,1)
(46,25,1)
(41,1,1)
(56,15,1)
(4,21,1)
(69,19,1)
(57,30,1)
(74,34,1)
(34,41,1)
(65,51,1)
(54,20,1)
(28,45,1)
(50,25,1)
(40,25,1)
(36,9,1)
(41,11,1)
(66,59,1)
(50,48,1)
(30,16,1)
(51,18,1)
(16,40,1)
(47,67,1)
(13,16,1)
(18,14,1)
(73,28,1)
(33,66,1)
(45,32,1)
(64,61,1)
(27,53,1)
(1,19,1)
(28,54,1)
(20,33,1)
(42,75,1)
(59,55,1)
(35,50,1)
(14,5,1)
(23,27,1)
(70,38,1)
(68,72,1)
(51,14,1)
(6,68,1)
(38,0,1)
(14,42,1)
(36,76,1)
(66,37,1)
(52,23,1)
(29,24,1)
(46,39,1)
(53,62,1)
(72,25,1)
(9,76,1)
(21,51,1)
(47,5,1)
(62,12,1)
(15,19,2)
(27,53,2)
(61,4,2)
(57,47,2)
(23,51,2)
(45,51,2)
(28,45,2)
(51,47,2)
(9,19,2)
(72,47,2)
(37,51,2)
(66,51,2)
(5,36,2)
(65,51,2)
(56,19,2)
(19,51,2)
(52,23,2)
(20,47,2)
(4,51,2)
(32,51,2)
(33,51,2)
(23,27,2)
(27,51,2)
(67,19,2)
(30,47,2)
(63,51,2)
(13,57,2)
(61,51,2)
(47,5,2)
(59,47,2)
(12,51,2)
(36,76,2)
(74,34,2)
(16,47,2)
(13,16,2)
(76,19,2)
(13,47,2)
(41,19,2)
(28,59,2)
(15,25,2)
(20,33,2)
(38,19,2)
(14,47,2)
(47,19,2)
(42,47,2)
(16,40,2)
(45,32,2)
(73,28,2)
(70,19,2)
(68,47,2)
(74,19,2)
(34,19,2)
(53,51,2)
(62,51,2)
(36,19,2)
(31,47,2)
(7,47,2)
(72,25,2)
(69,19,2)
(1,19,2)
(0,19,2)
(33,47,2)
(14,5,2)
(6,47,2)
(55,47,2)
(51,14,2)
(46,47,2)
(66,47,2)
(53,25,2)
(29,19,2)
(50,25,2)
(21,51,2)
(40,47,2)
(24,19,2)
(28,52,2)
(18,47,2)
(75,47,2)
(76,29,2)
(52,51,2)
(29,25,2)
(20,51,2)
(39,47,2)
(36,15,2)
(3,51,2)
(5,19,2)
(40,25,2)
(64,51,2)
(46,25,2)
(58,19,2)
-----------------------------------
(0,old)
(1,goto again;)
(2,if (old != NULL)
(3,module_wq)
(4,&module_mutex)
(5,old = find_module_all(mod->name, strlen(mod->name)
(6,list)
(7,mod)
(8,if (old->state != MODULE_STATE_LIVE)
(9,true)
(10,out:)
(11,mod->state = MODULE_STATE_UNFORMED)
(12,mod)
(13,list_add_rcu(&mod->list, &modules)
(14,old->state)
(15,mod->name)
(16,&mod->list)
(17,out_unlocked:)
(18,MODULE_STATE_LIVE)
(19,err)
(20,mutex_unlock(&module_mutex)
(21,module_mutex)
(22,err)
(23,wait_event_interruptible(module_wq,\n\\n\\t\\t\\t\\t\\t       finished_loading(mod->name)
(24,name)
(25,struct module *mod)
(26,again:)
(27,finished_loading(mod->name)
(28,return err;)
(29,mod->name)
(30,modules)
(31,err)
(32,-EEXIST)
(33,&module_mutex)
(34,&module_mutex)
(35,MODULE_STATE_UNFORMED)
(36,find_module_all(mod->name, strlen(mod->name)
(37,goto out;)
(38,mod)
(39,mod)
(40,mod->list)
(41,module_mutex)
(42,state)
(43,)
(44,old)
(45,err = -EEXIST)
(46,mod_tree_insert(mod)
(47,old != NULL)
(48,state)
(49,if (err)
(50,mod->state)
(51,old->state != MODULE_STATE_LIVE)
(52,err = wait_event_interruptible(module_wq,\n\\n\\t\\t\\t\\t\\t       finished_loading(mod->name)
(53,mod->name)
(54,err)
(55,0)
(56,mod)
(57,&modules)
(58,old)
(59,err = 0)
(60,mod)
(61,mutex_unlock(&module_mutex)
(62,name)
(63,EEXIST)
(64,err)
(65,err)
(66,module_mutex)
(67,NULL)
(68,mod)
(69,goto out_unlocked;)
(70,name)
(71,)
(72,mod_update_bounds(mod)
(73,RET)
(74,mutex_lock(&module_mutex)
(75,old)
(76,strlen(mod->name)
(77,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^