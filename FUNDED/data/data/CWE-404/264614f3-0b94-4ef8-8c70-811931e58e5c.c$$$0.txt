-----label-----
1
-----code-----
static void iomd_enable_dma(unsigned int chan, dma_t *dma)
{
	struct iomd_dma *idma = container_of(dma, struct iomd_dma, dma);
	unsigned long dma_base = idma->base;
	unsigned int ctrl = TRANSFER_SIZE | DMA_CR_E;

	if (idma->dma.invalid) {
		idma->dma.invalid = 0;

		/*
		 * Cope with ISA-style drivers which expect cache
		 * coherence.
		 */
		if (!idma->dma.sg) {
			idma->dma.sg = &idma->dma.buf;
			idma->dma.sgcount = 1;
			idma->dma.buf.length = idma->dma.count;
			idma->dma.buf.dma_address = dma_map_single(NULL,
				idma->dma.addr, idma->dma.count,
				idma->dma.dma_mode == DMA_MODE_READ ?
				DMA_FROM_DEVICE : DMA_TO_DEVICE);
		}

		idma->dma_addr = idma->dma.sg->dma_address;
		idma->dma_len = idma->dma.sg->length;

		iomd_writeb(DMA_CR_C, dma_base + CR);
		idma->state = DMA_ST_AB;
	}

	if (idma->dma.dma_mode == DMA_MODE_READ)
		ctrl |= DMA_CR_D;

	iomd_writeb(ctrl, dma_base + CR);
	enable_irq(idma->irq);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
16,17
17,18
18,19
20,21
21,22
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
45,47
46,47
50,51
50,52
50,53
50,54
50,55
50,56
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
60,62
61,62
62,63
62,64
63,64
63,65
64,65
68,69
68,70
68,71
68,72
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
77,78
78,79
78,80
79,80
79,81
80,81
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
97,99
98,99
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
113,115
114,115
119,120
119,121
119,122
119,123
119,124
120,121
122,123
124,125
124,126
125,126
125,127
126,127
130,131
130,132
131,132
131,133
132,133
136,137
136,138
136,139
137,138
137,139
138,139
138,140
139,140
139,141
140,141
144,145
146,147
148,149
150,151
151,152
151,153
152,153
152,154
153,154
156,157
156,158
157,158
157,159
158,159
158,160
159,160
164,165
165,166
165,167
166,167
166,168
167,168
170,171
170,172
171,172
171,173
172,173
172,174
173,174
178,179
179,180
179,181
179,182
180,181
182,183
184,185
184,186
185,186
187,188
189,190
190,191
190,192
191,192
191,193
192,193
195,196
197,198
197,199
198,199
198,200
199,200
199,201
200,201
200,202
201,202
205,206
207,208
208,209
208,210
209,210
211,212
213,214
214,215
214,216
214,217
215,216
217,218
219,220
219,221
220,221
222,223
224,225
225,226
225,227
226,227
228,229
228,230
229,230
-----nextToken-----
2,4,6,8,11,13,14,19,24,26,30,31,34,36,40,42,47,48,49,56,57,58,59,65,66,67,74,75,76,81,82,83,89,90,91,92,99,100,101,102,106,107,108,115,116,117,118,121,123,127,128,129,133,134,135,141,142,143,145,147,149,154,155,160,161,162,163,168,169,174,175,176,177,181,183,186,188,193,194,196,202,203,204,206,210,212,216,218,221,223,227,230,231
-----computeFrom-----
38,39
38,40
52,53
52,54
70,71
70,72
85,86
85,87
94,95
94,96
110,111
110,112
137,138
137,139
151,152
151,153
165,166
165,167
184,185
184,186
190,191
190,192
198,199
198,200
208,209
208,210
219,220
219,221
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ProblemStatement;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static void iomd_enable_dma(unsigned int chan, dma_t *dma){	struct iomd_dma *idma = container_of(dma, struct iomd_dma, dma);	unsigned long dma_base = idma->base;	unsigned int ctrl = TRANSFER_SIZE | DMA_CR_E;	if (idma->dma.invalid) {		idma->dma.invalid = 0;		/*		 * Cope with ISA-style drivers which expect cache		 * coherence.		 */		if (!idma->dma.sg) {			idma->dma.sg = &idma->dma.buf;			idma->dma.sgcount = 1;			idma->dma.buf.length = idma->dma.count;			idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);		}		idma->dma_addr = idma->dma.sg->dma_address;		idma->dma_len = idma->dma.sg->length;		iomd_writeb(DMA_CR_C, dma_base + CR);		idma->state = DMA_ST_AB;	}	if (idma->dma.dma_mode == DMA_MODE_READ)		ctrl |= DMA_CR_D;	iomd_writeb(ctrl, dma_base + CR);	enable_irq(idma->irq);}
static void
iomd_enable_dma(unsigned int chan, dma_t *dma)
iomd_enable_dma
unsigned int chan
unsigned int
chan
chan
dma_t *dma
dma_t
dma_t
*dma
*
dma
{	struct iomd_dma *idma = container_of(dma, struct iomd_dma, dma);	unsigned long dma_base = idma->base;	unsigned int ctrl = TRANSFER_SIZE | DMA_CR_E;	if (idma->dma.invalid) {		idma->dma.invalid = 0;		/*		 * Cope with ISA-style drivers which expect cache		 * coherence.		 */		if (!idma->dma.sg) {			idma->dma.sg = &idma->dma.buf;			idma->dma.sgcount = 1;			idma->dma.buf.length = idma->dma.count;			idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);		}		idma->dma_addr = idma->dma.sg->dma_address;		idma->dma_len = idma->dma.sg->length;		iomd_writeb(DMA_CR_C, dma_base + CR);		idma->state = DMA_ST_AB;	}	if (idma->dma.dma_mode == DMA_MODE_READ)		ctrl |= DMA_CR_D;	iomd_writeb(ctrl, dma_base + CR);	enable_irq(idma->irq);}
struct iomd_dma
struct iomd_dma
struct iomd_dma
iomd_dma
a
*idma = container_of(dma, struct iomd_dma, dma);
unsigned long dma_base = idma->base;
unsigned long dma_base = idma->base;
unsigned long
dma_base = idma->base
dma_base
= idma->base
idma->base
idma
idma
base
unsigned int ctrl = TRANSFER_SIZE | DMA_CR_E;
unsigned int ctrl = TRANSFER_SIZE | DMA_CR_E;
unsigned int
ctrl = TRANSFER_SIZE | DMA_CR_E
ctrl
= TRANSFER_SIZE | DMA_CR_E
TRANSFER_SIZE | DMA_CR_E
TRANSFER_SIZE
TRANSFER_SIZE
DMA_CR_E
DMA_CR_E
if (idma->dma.invalid) {		idma->dma.invalid = 0;		/*		 * Cope with ISA-style drivers which expect cache		 * coherence.		 */		if (!idma->dma.sg) {			idma->dma.sg = &idma->dma.buf;			idma->dma.sgcount = 1;			idma->dma.buf.length = idma->dma.count;			idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);		}		idma->dma_addr = idma->dma.sg->dma_address;		idma->dma_len = idma->dma.sg->length;		iomd_writeb(DMA_CR_C, dma_base + CR);		idma->state = DMA_ST_AB;	}
idma->dma.invalid
idma->dma
idma
idma
dma
invalid
{		idma->dma.invalid = 0;		/*		 * Cope with ISA-style drivers which expect cache		 * coherence.		 */		if (!idma->dma.sg) {			idma->dma.sg = &idma->dma.buf;			idma->dma.sgcount = 1;			idma->dma.buf.length = idma->dma.count;			idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);		}		idma->dma_addr = idma->dma.sg->dma_address;		idma->dma_len = idma->dma.sg->length;		iomd_writeb(DMA_CR_C, dma_base + CR);		idma->state = DMA_ST_AB;	}
idma->dma.invalid = 0;
idma->dma.invalid = 0
idma->dma.invalid
idma->dma
idma
idma
dma
invalid
0
if (!idma->dma.sg) {			idma->dma.sg = &idma->dma.buf;			idma->dma.sgcount = 1;			idma->dma.buf.length = idma->dma.count;			idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);		}
!idma->dma.sg
idma->dma.sg
idma->dma
idma
idma
dma
sg
{			idma->dma.sg = &idma->dma.buf;			idma->dma.sgcount = 1;			idma->dma.buf.length = idma->dma.count;			idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);		}
idma->dma.sg = &idma->dma.buf;
idma->dma.sg = &idma->dma.buf
idma->dma.sg
idma->dma
idma
idma
dma
sg
&idma->dma.buf
idma->dma.buf
idma->dma
idma
idma
dma
buf
idma->dma.sgcount = 1;
idma->dma.sgcount = 1
idma->dma.sgcount
idma->dma
idma
idma
dma
sgcount
1
idma->dma.buf.length = idma->dma.count;
idma->dma.buf.length = idma->dma.count
idma->dma.buf.length
idma->dma.buf
idma->dma
idma
idma
dma
buf
length
idma->dma.count
idma->dma
idma
idma
dma
count
idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE);
idma->dma.buf.dma_address = dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE)
idma->dma.buf.dma_address
idma->dma.buf
idma->dma
idma
idma
dma
buf
dma_address
dma_map_single(NULL,				idma->dma.addr, idma->dma.count,				idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE)
dma_map_single
dma_map_single
NULL
NULL
idma->dma.addr
idma->dma
idma
idma
dma
addr
idma->dma.count
idma->dma
idma
idma
dma
count
idma->dma.dma_mode == DMA_MODE_READ ?				DMA_FROM_DEVICE : DMA_TO_DEVICE
idma->dma.dma_mode == DMA_MODE_READ
idma->dma.dma_mode
idma->dma
idma
idma
dma
dma_mode
DMA_MODE_READ
DMA_MODE_READ
DMA_FROM_DEVICE
DMA_FROM_DEVICE
DMA_TO_DEVICE
DMA_TO_DEVICE
idma->dma_addr = idma->dma.sg->dma_address;
idma->dma_addr = idma->dma.sg->dma_address
idma->dma_addr
idma
idma
dma_addr
idma->dma.sg->dma_address
idma->dma.sg
idma->dma
idma
idma
dma
sg
dma_address
idma->dma_len = idma->dma.sg->length;
idma->dma_len = idma->dma.sg->length
idma->dma_len
idma
idma
dma_len
idma->dma.sg->length
idma->dma.sg
idma->dma
idma
idma
dma
sg
length
iomd_writeb(DMA_CR_C, dma_base + CR);
iomd_writeb(DMA_CR_C, dma_base + CR)
iomd_writeb
iomd_writeb
DMA_CR_C
DMA_CR_C
dma_base + CR
dma_base
dma_base
CR
CR
idma->state = DMA_ST_AB;
idma->state = DMA_ST_AB
idma->state
idma
idma
state
DMA_ST_AB
DMA_ST_AB
if (idma->dma.dma_mode == DMA_MODE_READ)		ctrl |= DMA_CR_D;
idma->dma.dma_mode == DMA_MODE_READ
idma->dma.dma_mode
idma->dma
idma
idma
dma
dma_mode
DMA_MODE_READ
DMA_MODE_READ
ctrl |= DMA_CR_D;
ctrl |= DMA_CR_D
ctrl
ctrl
DMA_CR_D
DMA_CR_D
iomd_writeb(ctrl, dma_base + CR);
iomd_writeb(ctrl, dma_base + CR)
iomd_writeb
iomd_writeb
ctrl
ctrl
dma_base + CR
dma_base
dma_base
CR
CR
enable_irq(idma->irq);
enable_irq(idma->irq)
enable_irq
enable_irq
idma->irq
idma
idma
irq
-----joern-----
(51,90,0)
(23,93,0)
(39,30,0)
(23,124,0)
(50,141,0)
(63,77,0)
(60,120,0)
(131,145,0)
(117,134,0)
(26,30,0)
(90,51,0)
(59,106,0)
(11,16,0)
(98,96,0)
(128,16,0)
(65,105,0)
(115,82,0)
(96,39,0)
(126,6,0)
(91,3,0)
(22,98,0)
(45,100,0)
(68,80,0)
(66,37,0)
(25,7,0)
(147,73,0)
(110,124,0)
(69,54,0)
(51,100,0)
(47,67,0)
(133,90,0)
(124,56,0)
(120,70,0)
(97,142,0)
(64,80,0)
(129,53,0)
(122,38,0)
(99,132,0)
(72,98,0)
(13,132,0)
(145,95,0)
(43,37,0)
(54,85,0)
(54,42,0)
(48,146,0)
(23,121,0)
(52,134,0)
(82,114,0)
(73,134,0)
(37,53,0)
(130,73,0)
(14,3,0)
(127,90,0)
(143,51,0)
(15,77,0)
(23,63,0)
(19,76,0)
(89,143,0)
(63,23,0)
(114,82,0)
(135,101,0)
(113,100,0)
(94,118,0)
(56,124,0)
(102,23,0)
(10,69,0)
(35,100,0)
(49,69,0)
(96,106,0)
(28,121,0)
(74,118,0)
(44,141,0)
(0,76,0)
(71,77,0)
(70,120,0)
(144,61,0)
(57,50,0)
(94,100,0)
(148,80,0)
(104,38,0)
(20,26,0)
(111,100,0)
(73,130,0)
(136,61,0)
(79,56,0)
(12,4,0)
(106,96,0)
(33,130,0)
(78,106,0)
(88,146,0)
(116,114,0)
(138,35,0)
(46,68,0)
(24,124,0)
(146,32,0)
(35,114,0)
(68,7,0)
(141,50,0)
(7,104,0)
(81,13,0)
(13,3,0)
(93,23,0)
(17,85,0)
(29,116,0)
(107,118,0)
(76,51,0)
(142,121,0)
(26,6,0)
(59,42,0)
(146,48,0)
(34,82,0)
(85,108,0)
(53,42,0)
(109,116,0)
(123,96,0)
(84,51,0)
(58,50,0)
(92,32,0)
(40,63,0)
(104,95,0)
(149,67,0)
(39,38,0)
(80,68,0)
(119,31,0)
(141,39,0)
(18,114,0)
(9,12,0)
(93,38,0)
(70,122,0)
(140,70,0)
(137,12,0)
(134,73,0)
(106,59,0)
(27,119,0)
(125,6,0)
(4,12,0)
(31,119,0)
(7,68,0)
(6,26,0)
(96,98,0)
(103,32,0)
(108,39,0)
(114,100,0)
(56,4,0)
(124,23,0)
(4,56,0)
(16,108,0)
(86,95,0)
(121,23,0)
(21,120,0)
(32,146,0)
(5,100,0)
(30,39,0)
(105,76,0)
(2,143,0)
(143,35,0)
(95,145,0)
(85,54,0)
(62,145,0)
(55,142,0)
(77,63,0)
(132,13,0)
(101,67,0)
(35,116,0)
(108,16,0)
(75,31,0)
(121,142,0)
(139,112,0)
(118,94,0)
(8,4,0)
(108,85,0)
(36,108,0)
(76,105,0)
(35,143,0)
(67,101,0)
(30,26,0)
(41,122,0)
(61,59,0)
(112,42,0)
(83,42,0)
(3,13,0)
(87,119,0)
(105,42,0)
(31,112,0)
(130,93,0)
(95,104,0)
(94,118,1)
(144,54,1)
(120,60,1)
(109,132,1)
(61,136,1)
(122,41,1)
(20,6,1)
(65,59,1)
(14,101,1)
(12,137,1)
(95,145,1)
(34,115,1)
(149,114,1)
(75,119,1)
(79,4,1)
(85,108,1)
(98,72,1)
(112,139,1)
(49,93,1)
(33,73,1)
(30,26,1)
(88,32,1)
(106,78,1)
(68,46,1)
(108,39,1)
(137,9,1)
(60,21,1)
(4,8,1)
(101,67,1)
(73,147,1)
(1,94,1)
(13,3,1)
(53,129,1)
(89,138,1)
(130,33,1)
(50,57,1)
(72,22,1)
(26,20,1)
(17,108,1)
(18,51,1)
(95,86,1)
(117,104,1)
(4,12,1)
(71,15,1)
(19,65,1)
(8,12,1)
(31,119,1)
(2,89,1)
(48,146,1)
(143,2,1)
(124,56,1)
(0,19,1)
(62,131,1)
(32,92,1)
(26,6,1)
(29,109,1)
(138,116,1)
(132,13,1)
(54,85,1)
(23,124,1)
(127,84,1)
(13,81,1)
(41,70,1)
(146,88,1)
(23,121,1)
(16,128,1)
(70,140,1)
(138,132,1)
(123,98,1)
(58,48,1)
(63,40,1)
(104,95,1)
(74,35,1)
(91,14,1)
(114,82,1)
(118,107,1)
(132,99,1)
(99,13,1)
(131,7,1)
(47,149,1)
(81,3,1)
(110,56,1)
(76,51,1)
(51,90,1)
(73,134,1)
(97,55,1)
(25,68,1)
(77,71,1)
(121,28,1)
(43,66,1)
(28,142,1)
(64,148,1)
(35,143,1)
(92,103,1)
(102,130,1)
(140,120,1)
(125,126,1)
(133,127,1)
(96,123,1)
(57,58,1)
(108,36,1)
(40,77,1)
(22,61,1)
(9,63,1)
(46,80,1)
(124,24,1)
(96,98,1)
(69,10,1)
(116,114,1)
(105,76,1)
(10,49,1)
(14,53,1)
(121,142,1)
(139,31,1)
(143,51,1)
(101,135,1)
(148,122,1)
(146,32,1)
(106,96,1)
(90,133,1)
(80,64,1)
(124,110,1)
(24,56,1)
(49,48,1)
(108,16,1)
(126,141,1)
(86,145,1)
(85,17,1)
(56,4,1)
(141,44,1)
(39,30,1)
(52,117,1)
(145,62,1)
(93,23,1)
(63,77,1)
(68,80,1)
(27,101,1)
(67,47,1)
(103,112,1)
(36,16,1)
(70,120,1)
(128,11,1)
(7,25,1)
(35,116,1)
(66,105,1)
(3,91,1)
(37,43,1)
(135,67,1)
(136,144,1)
(55,102,1)
(116,29,1)
(59,106,1)
(76,0,1)
(78,96,1)
(56,79,1)
(96,39,1)
(142,97,1)
(115,18,1)
(87,27,1)
(141,50,1)
(23,63,1)
(31,75,1)
(130,73,1)
(82,34,1)
(134,52,1)
(11,69,1)
(107,74,1)
(6,125,1)
(15,121,1)
(129,37,1)
(147,134,1)
(119,87,1)
(21,39,1)
(35,114,1)
(44,50,1)
(7,68,1)
(59,101,2)
(112,101,2)
(114,82,2)
(23,121,2)
(20,48,2)
(24,56,2)
(46,48,2)
(32,101,2)
(73,48,2)
(146,32,2)
(68,80,2)
(97,48,2)
(25,48,2)
(8,48,2)
(53,101,2)
(106,101,2)
(140,48,2)
(104,48,2)
(35,143,2)
(94,118,2)
(7,68,2)
(72,101,2)
(119,101,2)
(62,48,2)
(106,96,2)
(128,101,2)
(143,51,2)
(125,48,2)
(142,48,2)
(0,101,2)
(57,48,2)
(130,73,2)
(116,114,2)
(108,16,2)
(10,101,2)
(78,101,2)
(108,39,2)
(120,48,2)
(87,101,2)
(4,12,2)
(56,48,2)
(145,48,2)
(7,48,2)
(105,76,2)
(30,26,2)
(104,95,2)
(35,114,2)
(80,48,2)
(16,101,2)
(96,39,2)
(6,48,2)
(56,4,2)
(54,101,2)
(122,48,2)
(29,132,2)
(68,48,2)
(63,48,2)
(36,101,2)
(108,101,2)
(69,101,2)
(39,48,2)
(35,116,2)
(9,48,2)
(110,56,2)
(17,101,2)
(109,132,2)
(66,101,2)
(71,48,2)
(126,48,2)
(49,101,2)
(101,67,2)
(54,85,2)
(48,101,2)
(61,101,2)
(144,101,2)
(147,48,2)
(48,146,2)
(96,98,2)
(116,132,2)
(137,48,2)
(103,101,2)
(51,90,2)
(70,120,2)
(121,48,2)
(63,77,2)
(141,50,2)
(15,48,2)
(124,48,2)
(132,13,2)
(31,119,2)
(124,56,2)
(41,48,2)
(30,48,2)
(77,48,2)
(79,48,2)
(141,48,2)
(73,134,2)
(123,101,2)
(117,48,2)
(76,101,2)
(105,101,2)
(75,101,2)
(64,48,2)
(33,48,2)
(93,23,2)
(92,101,2)
(50,48,2)
(11,101,2)
(139,101,2)
(19,101,2)
(4,48,2)
(26,6,2)
(134,48,2)
(60,48,2)
(23,48,2)
(130,48,2)
(27,101,2)
(95,145,2)
(86,48,2)
(43,101,2)
(95,48,2)
(98,101,2)
(148,48,2)
(102,48,2)
(88,101,2)
(58,48,2)
(28,48,2)
(23,124,2)
(76,51,2)
(52,48,2)
(39,30,2)
(37,101,2)
(96,101,2)
(40,48,2)
(31,101,2)
(26,48,2)
(44,48,2)
(85,101,2)
(22,101,2)
(12,48,2)
(23,63,2)
(65,101,2)
(70,48,2)
(55,48,2)
(21,48,2)
(59,106,2)
(131,48,2)
(85,108,2)
(129,101,2)
(93,48,2)
(136,101,2)
(146,101,2)
(13,3,2)
(121,142,2)
-----------------------------------
(0,CR)
(1,RET)
(2,CR)
(3,idma->dma)
(4,idma->dma.dma_mode)
(5,ctrl)
(6,idma->dma)
(7,idma->dma.buf.length)
(8,dma_mode)
(9,idma)
(10,dma_addr)
(11,idma)
(12,idma->dma)
(13,idma->dma.dma_mode)
(14,idma)
(15,idma)
(16,idma->dma)
(17,dma_address)
(18,ctrl)
(19,dma_base)
(20,buf)
(21,idma)
(22,idma)
(23,dma_map_single(NULL,\n\\n\\t\\t\\t\\tidma->dma.addr, idma->dma.count,\n\\n\\t\\t\\t\\tidma->dma.dma_mode == DMA_MODE_READ ?\n\\n\\t\\t\\t\\tDMA_FROM_DEVICE : DMA_TO_DEVICE)
(24,DMA_FROM_DEVICE)
(25,length)
(26,idma->dma.buf)
(27,idma)
(28,addr)
(29,DMA_CR_D)
(30,&idma->dma.buf)
(31,idma->dma.invalid)
(32,idma->dma)
(33,dma_address)
(34,DMA_CR_E)
(35,iomd_writeb(ctrl, dma_base + CR)
(36,sg)
(37,idma->state)
(38,)
(39,idma->dma.sg = &idma->dma.buf)
(40,count)
(41,1)
(42,)
(43,state)
(44,sg)
(45,dma_base)
(46,buf)
(47,dma)
(48,!idma->dma.sg)
(49,idma)
(50,idma->dma)
(51,dma_base = idma->base)
(52,dma)
(53,idma->state = DMA_ST_AB)
(54,idma->dma_addr = idma->dma.sg->dma_address)
(55,idma)
(56,idma->dma.dma_mode == DMA_MODE_READ)
(57,dma)
(58,idma)
(59,idma->dma_len = idma->dma.sg->length)
(60,dma)
(61,idma->dma_len)
(62,dma)
(63,idma->dma.count)
(64,dma)
(65,DMA_CR_C)
(66,idma)
(67,idma->dma)
(68,idma->dma.buf)
(69,idma->dma_addr)
(70,idma->dma.sgcount)
(71,dma)
(72,dma)
(73,idma->dma.buf)
(74,idma)
(75,invalid)
(76,dma_base + CR)
(77,idma->dma)
(78,length)
(79,DMA_MODE_READ)
(80,idma->dma)
(81,dma_mode)
(82,TRANSFER_SIZE | DMA_CR_E)
(83,if (!idma->dma.sg)
(84,dma_base)
(85,idma->dma.sg->dma_address)
(86,count)
(87,dma)
(88,sg)
(89,dma_base)
(90,idma->base)
(91,dma)
(92,dma)
(93,idma->dma.buf.dma_address = dma_map_single(NULL,\n\\n\\t\\t\\t\\tidma->dma.addr, idma->dma.count,\n\\n\\t\\t\\t\\tidma->dma.dma_mode == DMA_MODE_READ ?\n\\n\\t\\t\\t\\tDMA_FROM_DEVICE : DMA_TO_DEVICE)
(94,enable_irq(idma->irq)
(95,idma->dma.count)
(96,idma->dma.sg)
(97,dma)
(98,idma->dma)
(99,DMA_MODE_READ)
(100,)
(101,idma->dma.invalid)
(102,NULL)
(103,idma)
(104,idma->dma.buf.length = idma->dma.count)
(105,iomd_writeb(DMA_CR_C, dma_base + CR)
(106,idma->dma.sg->length)
(107,irq)
(108,idma->dma.sg)
(109,ctrl)
(110,DMA_TO_DEVICE)
(111,if (idma->dma.invalid)
(112,idma->dma.invalid = 0)
(113,if (idma->dma.dma_mode == DMA_MODE_READ)
(114,ctrl = TRANSFER_SIZE | DMA_CR_E)
(115,TRANSFER_SIZE)
(116,ctrl |= DMA_CR_D)
(117,idma)
(118,idma->irq)
(119,idma->dma)
(120,idma->dma)
(121,idma->dma.addr)
(122,idma->dma.sgcount = 1)
(123,sg)
(124,idma->dma.dma_mode == DMA_MODE_READ ?\n\\n\\t\\t\\t\\tDMA_FROM_DEVICE : DMA_TO_DEVICE)
(125,dma)
(126,idma)
(127,idma)
(128,dma)
(129,DMA_ST_AB)
(130,idma->dma.buf.dma_address)
(131,idma)
(132,idma->dma.dma_mode == DMA_MODE_READ)
(133,base)
(134,idma->dma)
(135,invalid)
(136,dma_len)
(137,dma)
(138,ctrl)
(139,0)
(140,sgcount)
(141,idma->dma.sg)
(142,idma->dma)
(143,dma_base + CR)
(144,idma)
(145,idma->dma)
(146,idma->dma.sg)
(147,buf)
(148,idma)
(149,idma)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^