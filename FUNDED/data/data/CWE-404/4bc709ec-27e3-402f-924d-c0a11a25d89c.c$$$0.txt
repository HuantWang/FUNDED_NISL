-----label-----
1
-----code-----
void arch_pick_mmap_layout(struct mm_struct *mm)
{
	unsigned long random_factor = 0UL;

	if (current->flags & PF_RANDOMIZE)
		random_factor = arch_mmap_rnd();

	if (mmap_is_legacy()) {
		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;
		mm->get_unmapped_area = arch_get_unmapped_area;
	} else {
		mm->mmap_base = mmap_base(random_factor);
		mm->get_unmapped_area = arch_get_unmapped_area_topdown;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
15,16
15,17
17,18
19,20
19,21
20,21
20,22
21,22
21,23
22,23
25,26
27,28
28,29
28,30
29,30
31,32
32,33
34,35
34,36
34,37
35,36
36,37
38,39
38,40
39,40
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
52,54
53,54
56,57
58,59
58,60
59,60
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
-----nextToken-----
2,4,7,9,10,14,16,18,23,24,26,30,33,37,43,44,47,49,54,55,57,63,64,67,69,74,75,77
-----computeFrom-----
20,21
20,22
28,29
28,30
40,41
40,42
45,46
45,47
51,52
51,53
60,61
60,62
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
void arch_pick_mmap_layout(struct mm_struct *mm){	unsigned long random_factor = 0UL;	if (current->flags & PF_RANDOMIZE)		random_factor = arch_mmap_rnd();	if (mmap_is_legacy()) {		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;		mm->get_unmapped_area = arch_get_unmapped_area;	} else {		mm->mmap_base = mmap_base(random_factor);		mm->get_unmapped_area = arch_get_unmapped_area_topdown;	}}
void
arch_pick_mmap_layout(struct mm_struct *mm)
arch_pick_mmap_layout
struct mm_struct *mm
struct mm_struct
mm_struct
*mm
*
mm
{	unsigned long random_factor = 0UL;	if (current->flags & PF_RANDOMIZE)		random_factor = arch_mmap_rnd();	if (mmap_is_legacy()) {		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;		mm->get_unmapped_area = arch_get_unmapped_area;	} else {		mm->mmap_base = mmap_base(random_factor);		mm->get_unmapped_area = arch_get_unmapped_area_topdown;	}}
unsigned long random_factor = 0UL;
unsigned long random_factor = 0UL;
unsigned long
random_factor = 0UL
random_factor
= 0UL
0UL
if (current->flags & PF_RANDOMIZE)		random_factor = arch_mmap_rnd();
current->flags & PF_RANDOMIZE
current->flags
current
current
flags
PF_RANDOMIZE
PF_RANDOMIZE
random_factor = arch_mmap_rnd();
random_factor = arch_mmap_rnd()
random_factor
random_factor
arch_mmap_rnd()
arch_mmap_rnd
arch_mmap_rnd
if (mmap_is_legacy()) {		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;		mm->get_unmapped_area = arch_get_unmapped_area;	} else {		mm->mmap_base = mmap_base(random_factor);		mm->get_unmapped_area = arch_get_unmapped_area_topdown;	}
mmap_is_legacy()
mmap_is_legacy
mmap_is_legacy
{		mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;		mm->get_unmapped_area = arch_get_unmapped_area;	}
mm->mmap_base = TASK_UNMAPPED_BASE + random_factor;
mm->mmap_base = TASK_UNMAPPED_BASE + random_factor
mm->mmap_base
mm
mm
mmap_base
TASK_UNMAPPED_BASE + random_factor
TASK_UNMAPPED_BASE
TASK_UNMAPPED_BASE
random_factor
random_factor
mm->get_unmapped_area = arch_get_unmapped_area;
mm->get_unmapped_area = arch_get_unmapped_area
mm->get_unmapped_area
mm
mm
get_unmapped_area
arch_get_unmapped_area
arch_get_unmapped_area
{		mm->mmap_base = mmap_base(random_factor);		mm->get_unmapped_area = arch_get_unmapped_area_topdown;	}
mm->mmap_base = mmap_base(random_factor);
mm->mmap_base = mmap_base(random_factor)
mm->mmap_base
mm
mm
mmap_base
mmap_base(random_factor)
mmap_base
mmap_base
random_factor
random_factor
mm->get_unmapped_area = arch_get_unmapped_area_topdown;
mm->get_unmapped_area = arch_get_unmapped_area_topdown
mm->get_unmapped_area
mm
mm
get_unmapped_area
arch_get_unmapped_area_topdown
arch_get_unmapped_area_topdown
-----joern-----
(25,40,0)
(22,7,0)
(21,38,0)
(31,11,0)
(39,11,0)
(2,36,0)
(42,32,0)
(5,34,0)
(20,19,0)
(12,38,0)
(40,25,0)
(25,20,0)
(33,21,0)
(29,42,0)
(0,34,0)
(1,28,0)
(13,7,0)
(26,21,0)
(4,2,0)
(40,6,0)
(42,29,0)
(31,36,0)
(38,32,0)
(15,28,0)
(8,34,0)
(34,0,0)
(23,29,0)
(35,25,0)
(11,6,0)
(3,19,0)
(25,28,0)
(7,36,0)
(29,20,0)
(29,28,0)
(9,20,0)
(2,40,0)
(14,2,0)
(30,20,0)
(21,36,0)
(7,42,0)
(17,31,0)
(28,1,0)
(18,31,0)
(37,29,0)
(16,19,0)
(10,0,0)
(27,19,0)
(24,38,1)
(2,36,1)
(31,36,1)
(37,23,1)
(14,41,1)
(17,40,1)
(35,2,1)
(22,13,1)
(29,20,1)
(20,30,1)
(4,14,1)
(41,0,1)
(25,35,1)
(34,8,1)
(7,22,1)
(41,28,1)
(10,34,1)
(24,11,1)
(12,21,1)
(25,28,1)
(30,9,1)
(11,39,1)
(5,20,1)
(28,1,1)
(21,36,1)
(1,15,1)
(29,28,1)
(7,36,1)
(31,18,1)
(18,17,1)
(38,12,1)
(0,10,1)
(40,25,1)
(25,20,1)
(42,29,1)
(15,0,1)
(8,5,1)
(39,31,1)
(21,33,1)
(23,7,1)
(29,37,1)
(2,4,1)
(13,41,1)
(33,26,1)
(0,34,1)
(26,42,1)
(28,0,2)
(33,41,2)
(2,41,2)
(13,41,2)
(17,41,2)
(37,41,2)
(7,41,2)
(11,41,2)
(29,20,2)
(23,41,2)
(38,41,2)
(29,41,2)
(42,41,2)
(15,0,2)
(4,41,2)
(25,20,2)
(26,41,2)
(21,41,2)
(40,25,2)
(1,0,2)
(35,41,2)
(25,41,2)
(42,29,2)
(0,34,2)
(31,41,2)
(39,41,2)
(40,41,2)
(25,28,2)
(12,41,2)
(22,41,2)
(2,36,2)
(31,36,2)
(14,41,2)
(28,1,2)
(29,28,2)
(7,36,2)
(21,36,2)
(18,41,2)
-----------------------------------
(0,current->flags & PF_RANDOMIZE)
(1,arch_mmap_rnd()
(2,mm->mmap_base)
(3,random_factor)
(4,mmap_base)
(5,current)
(6,)
(7,mm->mmap_base)
(8,flags)
(9,random_factor)
(10,PF_RANDOMIZE)
(11,mm->get_unmapped_area = arch_get_unmapped_area_topdown)
(12,arch_get_unmapped_area)
(13,mm)
(14,mm)
(15,random_factor)
(16,if (current->flags & PF_RANDOMIZE)
(17,mm)
(18,get_unmapped_area)
(19,)
(20,random_factor = 0UL)
(21,mm->get_unmapped_area)
(22,mmap_base)
(23,TASK_UNMAPPED_BASE)
(24,RET)
(25,mmap_base(random_factor)
(26,mm)
(27,if (mmap_is_legacy()
(28,random_factor = arch_mmap_rnd()
(29,TASK_UNMAPPED_BASE + random_factor)
(30,0UL)
(31,mm->get_unmapped_area)
(32,)
(33,get_unmapped_area)
(34,current->flags)
(35,random_factor)
(36,struct mm_struct *mm)
(37,random_factor)
(38,mm->get_unmapped_area = arch_get_unmapped_area)
(39,arch_get_unmapped_area_topdown)
(40,mm->mmap_base = mmap_base(random_factor)
(41,mmap_is_legacy()
(42,mm->mmap_base = TASK_UNMAPPED_BASE + random_factor)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^