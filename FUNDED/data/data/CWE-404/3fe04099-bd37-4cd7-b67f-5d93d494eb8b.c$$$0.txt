-----label-----
0
-----code-----
static void goodB2G()
{
    wchar_t * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    goodB2GSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
51,52
53,54
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,59,61,65,67
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goodB2GSink(data);}
static void
goodB2G()
goodB2G
{    wchar_t * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    goodB2GSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
goodB2GSink(data);
goodB2GSink(data)
goodB2GSink
goodB2GSink
data
data
-----joern-----
(17,9,0)
(2,22,0)
(23,14,0)
(14,10,0)
(0,1,0)
(12,9,0)
(7,1,0)
(18,22,0)
(11,25,0)
(16,26,0)
(13,24,0)
(6,25,0)
(5,13,0)
(24,9,0)
(8,23,0)
(19,0,0)
(1,12,0)
(4,24,0)
(22,24,0)
(9,17,0)
(24,25,0)
(20,3,0)
(3,24,0)
(14,23,0)
(3,25,0)
(1,0,0)
(13,25,0)
(12,1,0)
(9,12,0)
(15,26,0)
(26,25,0)
(9,24,0)
(1,0,1)
(20,22,1)
(9,12,1)
(9,17,1)
(2,24,1)
(16,15,1)
(5,3,1)
(4,26,1)
(26,16,1)
(13,24,1)
(8,22,1)
(14,23,1)
(19,7,1)
(20,14,1)
(3,24,1)
(22,24,1)
(13,5,1)
(18,2,1)
(23,8,1)
(21,13,1)
(7,4,1)
(22,18,1)
(3,20,1)
(24,9,1)
(0,19,1)
(12,1,1)
(23,22,2)
(12,1,2)
(14,23,2)
(1,0,2)
(3,24,2)
(22,24,2)
(14,22,2)
(8,22,2)
(24,9,2)
(13,24,2)
(9,17,2)
(9,12,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,100*sizeof(wchar_t)
(2,data)
(3,printWLine(data)
(4,data)
(5,data)
(6,data)
(7,100)
(8,1)
(9,(wchar_t *)
(10,)
(11,if (data == NULL)
(12,malloc(100*sizeof(wchar_t)
(13,goodB2GSink(data)
(14,exit(-1)
(15,data)
(16,NULL)
(17,wchar_t *)
(18,NULL)
(19,wchar_t)
(20,data)
(21,RET)
(22,data == NULL)
(23,-1)
(24,data = (wchar_t *)
(25,)
(26,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^