-----label-----
1
-----code-----
int
svr4_sys_waitsys(struct svr4_sys_waitsys_args *uap)
{
	struct proc *p = curproc;
	int nfound;
	int error, *retval = &uap->sysmsg_result;
	struct proc *q, *t;


	switch (SCARG(uap, grp)) {
	case SVR4_P_PID:
		break;

	case SVR4_P_PGID:
		SCARG(uap, id) = -p->p_pgid;
		break;

	case SVR4_P_ALL:
		SCARG(uap, id) = WAIT_ANY;
		break;

	default:
		return EINVAL;
	}

	DPRINTF(("waitsys(%d, %d, %p, %x)\n",
	         SCARG(uap, grp), SCARG(uap, id),
		 SCARG(uap, info), SCARG(uap, options)));

loop:
	nfound = 0;
	for (q = p->p_children.lh_first; q != 0; q = q->p_sibling.le_next) {
		if (SCARG(uap, id) != WAIT_ANY &&
		    q->p_pid != SCARG(uap, id) &&
		    q->p_pgid != -SCARG(uap, id)) {
			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,
				 q->p_pgid, SCARG(uap, id)));
			continue;
		}
		nfound++;
		if (q->p_stat == SZOMB &&
		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))) {
			*retval = 0;
			DPRINTF(("found %d\n", q->p_pid));
			if ((error = svr4_setinfo(q, q->p_xstat,
						  SCARG(uap, info))) != 0)
				return error;


		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {
				DPRINTF(("Don't wait\n"));
				return 0;
			}

			/*
			 * If we got the child via ptrace(2) or procfs, and
			 * the parent is different (meaning the process was
			 * attached, rather than run as a child), then we need
			 * to give it back to the ol dparent, and send the
			 * parent a SIGCHLD.  The rest of the cleanup will be
			 * done when the old parent waits on the child.
			 */
			if ((q->p_flag & P_TRACED) &&
			    q->p_oppid != q->p_pptr->p_pid) {
				t = pfind(q->p_oppid);
				proc_reparent(q, t ? t : initproc);
				q->p_oppid = 0;
				q->p_flag &= ~(P_TRACED | P_WAITED);
				wakeup((caddr_t)q->p_pptr);
				return 0;
			}
			q->p_xstat = 0;
			ruadd(&p->p_stats->p_cru, q->p_ru);

			FREE(q->p_ru, M_ZOMBIE);

			/*
			 * Finally finished with old proc entry.
			 * Unlink it from its process group and free it.
			 */
			leavepgrp(q);

			LIST_REMOVE(q, p_list); /* off zombproc */

			LIST_REMOVE(q, p_sibling);

			/*
			 * Decrement the count of procs running with this uid.
			 */
			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);

			/*
			 * Free up credentials.
			 */
			crfree(q->p_ucred);
			q->p_ucred = NULL;

			/*
			 * Release reference to text vnode
			 */
			if (q->p_textvp)
				vrele(q->p_textvp);

			/*
			 * Give machine-dependent layer a chance
			 * to free anything that cpu_exit couldn't
			 * release while still running in process context.
			 */
			vm_waitproc(q);
			/* XXX what about process 'q' itself?  zfree? */
#if defined(__NetBSD__)
			pool_put(&proc_pool, q);
#endif
			nprocs--;
			return 0;
		}
		if (q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&
		    (q->p_flag & P_TRACED ||
		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))) {
			DPRINTF(("jobcontrol %d\n", q->p_pid));
		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)
				q->p_flag |= P_WAITED;
			*retval = 0;
			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),
					    SCARG(uap, info));
		}
	}

	if (nfound == 0)
		return ECHILD;

	if (SCARG(uap, options) & SVR4_WNOHANG) {
		*retval = 0;
		if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0)
			return error;
		return 0;
	}

	if ((error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)) != 0)
		return error;
	goto loop;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
28,31
30,31
32,33
32,34
32,35
35,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
42,45
43,44
45,46
45,47
48,49
48,50
51,52
51,53
52,53
52,54
52,55
53,54
55,56
57,58
59,60
59,61
59,62
59,63
59,64
59,65
59,66
59,67
59,68
59,69
60,61
61,62
64,65
65,66
67,68
68,69
68,70
69,70
69,71
69,72
70,71
72,73
74,75
76,77
77,78
77,79
78,79
82,83
83,84
85,86
86,87
86,88
87,88
87,89
87,90
88,89
90,91
92,93
94,95
98,99
99,100
101,102
102,103
102,104
103,104
105,106
106,107
106,108
106,109
106,110
106,111
108,109
108,110
108,111
109,110
111,112
113,114
115,116
115,117
115,118
116,117
118,119
120,121
122,123
122,124
122,125
123,124
125,126
127,128
129,130
129,131
129,132
130,131
132,133
134,135
136,137
136,138
138,139
139,140
139,141
140,141
143,144
143,145
143,146
143,147
144,145
145,146
145,147
146,147
148,149
148,150
149,150
149,151
150,151
154,155
154,156
155,156
158,159
158,160
159,160
161,162
161,163
162,163
162,164
163,164
167,168
167,169
167,170
167,171
168,169
168,170
169,170
169,171
170,171
170,172
171,172
171,173
172,173
172,174
172,175
173,174
175,176
177,178
179,180
181,182
181,183
182,183
182,184
183,184
186,187
186,188
186,189
187,188
189,190
191,192
193,194
193,195
194,195
194,196
195,196
198,199
199,200
199,201
199,202
200,201
202,203
204,205
206,207
206,208
207,208
208,209
208,210
209,210
211,212
212,213
212,214
212,215
212,216
214,215
214,216
215,216
218,219
218,220
219,220
222,223
222,224
222,225
223,224
225,226
227,228
230,231
231,232
232,233
234,235
234,236
235,236
235,237
236,237
236,238
237,238
237,239
238,239
241,242
243,244
244,245
245,246
245,247
246,247
246,248
246,249
247,248
249,250
251,252
253,254
254,255
254,256
255,256
257,258
259,260
259,261
259,262
259,263
259,264
259,265
259,266
259,267
259,268
259,269
259,270
259,271
259,272
259,273
259,274
259,275
259,276
259,277
260,261
261,262
261,263
262,263
263,264
266,267
267,268
267,269
268,269
270,271
271,272
271,273
273,274
273,275
274,275
277,278
277,279
278,279
278,280
279,280
280,281
280,282
281,282
283,284
283,285
283,286
283,287
284,285
286,287
288,289
288,290
289,290
292,293
292,294
292,295
293,294
295,296
297,298
300,301
301,302
303,304
303,305
304,305
305,306
305,307
306,307
306,308
306,309
307,308
309,310
311,312
313,314
315,316
315,317
316,317
317,318
317,319
318,319
320,321
322,323
324,325
324,326
325,326
325,327
326,327
327,328
327,329
328,329
328,330
329,330
332,333
334,335
334,336
335,336
335,337
336,337
339,340
339,341
340,341
340,342
341,342
345,346
345,347
345,348
345,349
345,350
345,351
346,347
347,348
347,349
348,349
350,351
350,352
351,352
353,354
353,355
354,355
357,358
358,359
358,360
358,361
359,360
361,362
363,364
363,365
363,366
364,365
366,367
368,369
370,371
371,372
371,373
372,373
372,374
373,374
377,378
378,379
378,380
379,380
379,381
380,381
383,384
384,385
385,386
385,387
386,387
388,389
390,391
391,392
391,393
392,393
394,395
394,396
395,396
395,397
396,397
399,400
399,401
400,401
403,404
405,406
406,407
406,408
407,408
407,409
408,409
412,413
413,414
413,415
413,416
414,415
416,417
417,418
417,419
418,419
418,420
419,420
423,424
423,425
424,425
427,428
428,429
428,430
428,431
429,430
431,432
431,433
432,433
435,436
437,438
438,439
438,440
439,440
441,442
443,444
444,445
444,446
444,447
445,446
447,448
449,450
451,452
452,453
452,454
452,455
453,454
455,456
457,458
459,460
460,461
460,462
461,462
461,463
464,465
464,466
464,467
464,468
465,466
467,468
467,469
468,469
468,470
469,470
473,474
476,477
477,478
477,479
478,479
480,481
480,482
481,482
484,485
485,486
485,487
486,487
486,488
487,488
490,491
492,493
492,494
493,494
493,495
494,495
497,498
498,499
498,500
499,500
501,502
501,503
502,503
505,506
506,507
506,508
507,508
509,510
511,512
512,513
513,514
515,516
517,518
517,519
518,519
518,520
519,520
519,521
520,521
520,522
521,522
521,523
522,523
525,526
527,528
527,529
528,529
529,530
529,531
530,531
530,532
531,532
534,535
537,538
538,539
538,540
539,540
539,541
540,541
540,542
541,542
544,545
546,547
547,548
547,549
548,549
548,550
548,551
549,550
551,552
553,554
555,556
556,557
556,558
557,558
559,560
561,562
561,563
561,564
561,565
562,563
563,564
563,565
564,565
566,567
567,568
567,569
569,570
569,571
570,571
573,574
573,575
574,575
574,576
575,576
576,577
577,578
577,579
578,579
578,580
578,581
579,580
581,582
583,584
585,586
588,589
589,590
589,591
590,591
590,592
591,592
594,595
596,597
597,598
597,599
598,599
599,600
602,603
603,604
603,605
603,606
603,607
604,605
606,607
608,609
608,610
609,610
611,612
611,613
612,613
615,616
615,617
615,618
616,617
618,619
620,621
622,623
622,624
623,624
623,625
624,625
627,628
628,629
630,631
630,632
631,632
631,633
632,633
632,634
632,635
633,634
635,636
637,638
639,640
641,642
641,643
641,644
642,643
643,644
643,645
644,645
645,646
648,649
648,650
649,650
649,651
650,651
651,652
651,653
652,653
654,655
654,656
654,657
654,658
655,656
657,658
660,661
660,662
660,663
661,662
663,664
665,666
668,669
669,670
671,672
673,674
673,675
674,675
674,676
675,676
676,677
676,678
677,678
679,680
679,681
679,682
679,683
679,684
680,681
682,683
682,684
683,684
683,685
684,685
687,688
689,690
694,695
695,696
697,698
-----nextToken-----
2,4,7,9,10,15,17,18,21,24,26,29,31,33,34,39,40,44,46,47,49,50,54,56,58,62,63,66,71,73,75,79,80,81,84,89,91,93,95,96,97,100,104,107,110,112,114,117,119,121,124,126,128,131,133,135,137,141,142,147,151,152,153,156,157,160,164,165,166,174,176,178,180,184,185,188,190,192,196,197,201,203,205,210,213,216,217,220,221,224,226,228,229,233,239,240,242,248,250,252,256,258,264,265,269,272,275,276,282,285,287,290,291,294,296,298,299,302,308,310,312,314,319,321,323,330,331,333,337,338,342,343,344,349,352,355,356,360,362,365,367,369,374,375,376,381,382,387,389,393,397,398,401,402,404,409,410,411,415,420,421,422,425,426,430,433,434,436,440,442,446,448,450,454,456,458,462,463,466,470,471,472,474,475,479,482,483,488,489,491,495,496,500,503,504,508,510,514,516,523,524,526,532,533,535,536,542,543,545,550,552,554,558,560,565,568,571,572,580,582,584,586,587,592,593,595,600,601,605,607,610,613,614,617,619,621,625,626,629,634,636,638,640,646,647,653,656,658,659,662,664,666,667,670,672,678,681,685,686,688,690,691,692,693,696,698
-----computeFrom-----
68,69
68,70
86,87
86,88
139,140
139,141
145,146
145,147
154,155
154,156
158,159
158,160
169,170
169,171
170,171
170,172
171,172
171,173
181,182
181,183
193,194
193,195
235,236
235,237
236,237
236,238
245,246
245,247
254,255
254,256
261,262
261,263
278,279
278,280
280,281
280,282
305,306
305,307
325,326
325,327
327,328
327,329
334,335
334,336
347,348
347,349
371,372
371,373
378,379
378,380
385,386
385,387
406,407
406,408
485,486
485,487
518,519
518,520
519,520
519,521
520,521
520,522
527,528
527,529
529,530
529,531
538,539
538,540
539,540
539,541
547,548
547,549
556,557
556,558
574,575
574,576
577,578
577,579
589,590
589,591
597,598
597,599
623,624
623,625
631,632
631,633
643,644
643,645
649,650
649,651
651,652
651,653
674,675
674,676
676,677
676,678
-----guardedBy-----
196,220
203,226
201,224
205,228
185,217
197,221
239,510
250,310
248,308
252,312
282,302
342,401
331,382
343,402
333,387
338,375
542,613
543,593
552,619
550,617
554,584
535,595
636,664
634,662
653,670
678,696
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;SwitchStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ExpressionList;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;GotoStatement;Name;
-----ast_node-----
intsvr4_sys_waitsys(struct svr4_sys_waitsys_args *uap){	struct proc *p = curproc;	int nfound;	int error, *retval = &uap->sysmsg_result;	struct proc *q, *t;	switch (SCARG(uap, grp)) {	case SVR4_P_PID:		break;	case SVR4_P_PGID:		SCARG(uap, id) = -p->p_pgid;		break;	case SVR4_P_ALL:		SCARG(uap, id) = WAIT_ANY;		break;	default:		return EINVAL;	}	DPRINTF(("waitsys(%d, %d, %p, %x)\n",	         SCARG(uap, grp), SCARG(uap, id),		 SCARG(uap, info), SCARG(uap, options)));loop:	nfound = 0;	for (q = p->p_children.lh_first; q != 0; q = q->p_sibling.le_next) {		if (SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id) &&		    q->p_pgid != -SCARG(uap, id)) {			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));			continue;		}		nfound++;		if (q->p_stat == SZOMB &&		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))) {			*retval = 0;			DPRINTF(("found %d\n", q->p_pid));			if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}			/*			 * If we got the child via ptrace(2) or procfs, and			 * the parent is different (meaning the process was			 * attached, rather than run as a child), then we need			 * to give it back to the ol dparent, and send the			 * parent a SIGCHLD.  The rest of the cleanup will be			 * done when the old parent waits on the child.			 */			if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}			q->p_xstat = 0;			ruadd(&p->p_stats->p_cru, q->p_ru);			FREE(q->p_ru, M_ZOMBIE);			/*			 * Finally finished with old proc entry.			 * Unlink it from its process group and free it.			 */			leavepgrp(q);			LIST_REMOVE(q, p_list); /* off zombproc */			LIST_REMOVE(q, p_sibling);			/*			 * Decrement the count of procs running with this uid.			 */			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);			/*			 * Free up credentials.			 */			crfree(q->p_ucred);			q->p_ucred = NULL;			/*			 * Release reference to text vnode			 */			if (q->p_textvp)				vrele(q->p_textvp);			/*			 * Give machine-dependent layer a chance			 * to free anything that cpu_exit couldn't			 * release while still running in process context.			 */			vm_waitproc(q);			/* XXX what about process 'q' itself?  zfree? */#if defined(__NetBSD__)			pool_put(&proc_pool, q);#endif			nprocs--;			return 0;		}		if (q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&		    (q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))) {			DPRINTF(("jobcontrol %d\n", q->p_pid));		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;			*retval = 0;			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));		}	}	if (nfound == 0)		return ECHILD;	if (SCARG(uap, options) & SVR4_WNOHANG) {		*retval = 0;		if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0)			return error;		return 0;	}	if ((error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)) != 0)		return error;	goto loop;}
int
svr4_sys_waitsys(struct svr4_sys_waitsys_args *uap)
svr4_sys_waitsys
struct svr4_sys_waitsys_args *uap
struct svr4_sys_waitsys_args
svr4_sys_waitsys_args
*uap
*
uap
{	struct proc *p = curproc;	int nfound;	int error, *retval = &uap->sysmsg_result;	struct proc *q, *t;	switch (SCARG(uap, grp)) {	case SVR4_P_PID:		break;	case SVR4_P_PGID:		SCARG(uap, id) = -p->p_pgid;		break;	case SVR4_P_ALL:		SCARG(uap, id) = WAIT_ANY;		break;	default:		return EINVAL;	}	DPRINTF(("waitsys(%d, %d, %p, %x)\n",	         SCARG(uap, grp), SCARG(uap, id),		 SCARG(uap, info), SCARG(uap, options)));loop:	nfound = 0;	for (q = p->p_children.lh_first; q != 0; q = q->p_sibling.le_next) {		if (SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id) &&		    q->p_pgid != -SCARG(uap, id)) {			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));			continue;		}		nfound++;		if (q->p_stat == SZOMB &&		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))) {			*retval = 0;			DPRINTF(("found %d\n", q->p_pid));			if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}			/*			 * If we got the child via ptrace(2) or procfs, and			 * the parent is different (meaning the process was			 * attached, rather than run as a child), then we need			 * to give it back to the ol dparent, and send the			 * parent a SIGCHLD.  The rest of the cleanup will be			 * done when the old parent waits on the child.			 */			if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}			q->p_xstat = 0;			ruadd(&p->p_stats->p_cru, q->p_ru);			FREE(q->p_ru, M_ZOMBIE);			/*			 * Finally finished with old proc entry.			 * Unlink it from its process group and free it.			 */			leavepgrp(q);			LIST_REMOVE(q, p_list); /* off zombproc */			LIST_REMOVE(q, p_sibling);			/*			 * Decrement the count of procs running with this uid.			 */			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);			/*			 * Free up credentials.			 */			crfree(q->p_ucred);			q->p_ucred = NULL;			/*			 * Release reference to text vnode			 */			if (q->p_textvp)				vrele(q->p_textvp);			/*			 * Give machine-dependent layer a chance			 * to free anything that cpu_exit couldn't			 * release while still running in process context.			 */			vm_waitproc(q);			/* XXX what about process 'q' itself?  zfree? */#if defined(__NetBSD__)			pool_put(&proc_pool, q);#endif			nprocs--;			return 0;		}		if (q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&		    (q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))) {			DPRINTF(("jobcontrol %d\n", q->p_pid));		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;			*retval = 0;			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));		}	}	if (nfound == 0)		return ECHILD;	if (SCARG(uap, options) & SVR4_WNOHANG) {		*retval = 0;		if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0)			return error;		return 0;	}	if ((error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)) != 0)		return error;	goto loop;}
struct proc *p = curproc;
struct proc *p = curproc;
struct proc
proc
*p = curproc
*
p
= curproc
curproc
curproc
int nfound;
int nfound;
int
nfound
nfound
int error, *retval = &uap->sysmsg_result;
int error, *retval = &uap->sysmsg_result;
int
error
error
*retval = &uap->sysmsg_result
*
retval
= &uap->sysmsg_result
&uap->sysmsg_result
uap->sysmsg_result
uap
uap
sysmsg_result
struct proc *q, *t;
struct proc *q, *t;
struct proc
proc
*q
*
q
*t
*
t
switch (SCARG(uap, grp)) {	case SVR4_P_PID:		break;	case SVR4_P_PGID:		SCARG(uap, id) = -p->p_pgid;		break;	case SVR4_P_ALL:		SCARG(uap, id) = WAIT_ANY;		break;	default:		return EINVAL;	}
SCARG(uap, grp)
SCARG
SCARG
uap
uap
grp
grp
{	case SVR4_P_PID:		break;	case SVR4_P_PGID:		SCARG(uap, id) = -p->p_pgid;		break;	case SVR4_P_ALL:		SCARG(uap, id) = WAIT_ANY;		break;	default:		return EINVAL;	}
case SVR4_P_PID:
SVR4_P_PID
SVR4_P_PID
break;
case SVR4_P_PGID:
SVR4_P_PGID
SVR4_P_PGID
SCARG(uap, id) = -p->p_pgid;
SCARG(uap, id) = -p->p_pgid
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
-p->p_pgid
p->p_pgid
p
p
p_pgid
break;
case SVR4_P_ALL:
SVR4_P_ALL
SVR4_P_ALL
SCARG(uap, id) = WAIT_ANY;
SCARG(uap, id) = WAIT_ANY
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
WAIT_ANY
WAIT_ANY
break;
default:
return EINVAL;
EINVAL
EINVAL
DPRINTF(("waitsys(%d, %d, %p, %x)\n",	         SCARG(uap, grp), SCARG(uap, id),		 SCARG(uap, info), SCARG(uap, options)));
DPRINTF(("waitsys(%d, %d, %p, %x)\n",	         SCARG(uap, grp), SCARG(uap, id),		 SCARG(uap, info), SCARG(uap, options)))
DPRINTF
DPRINTF
("waitsys(%d, %d, %p, %x)\n",	         SCARG(uap, grp), SCARG(uap, id),		 SCARG(uap, info), SCARG(uap, options))
"waitsys(%d, %d, %p, %x)\n",	         SCARG(uap, grp), SCARG(uap, id),		 SCARG(uap, info), SCARG(uap, options)
"waitsys(%d, %d, %p, %x)\n"
SCARG(uap, grp)
SCARG
SCARG
uap
uap
grp
grp
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
SCARG(uap, info)
SCARG
SCARG
uap
uap
info
info
SCARG(uap, options)
SCARG
SCARG
uap
uap
options
options
loop:	nfound = 0;
loop
nfound = 0;
nfound = 0
nfound
nfound
0
for (q = p->p_children.lh_first; q != 0; q = q->p_sibling.le_next) {		if (SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id) &&		    q->p_pgid != -SCARG(uap, id)) {			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));			continue;		}		nfound++;		if (q->p_stat == SZOMB &&		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))) {			*retval = 0;			DPRINTF(("found %d\n", q->p_pid));			if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}			/*			 * If we got the child via ptrace(2) or procfs, and			 * the parent is different (meaning the process was			 * attached, rather than run as a child), then we need			 * to give it back to the ol dparent, and send the			 * parent a SIGCHLD.  The rest of the cleanup will be			 * done when the old parent waits on the child.			 */			if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}			q->p_xstat = 0;			ruadd(&p->p_stats->p_cru, q->p_ru);			FREE(q->p_ru, M_ZOMBIE);			/*			 * Finally finished with old proc entry.			 * Unlink it from its process group and free it.			 */			leavepgrp(q);			LIST_REMOVE(q, p_list); /* off zombproc */			LIST_REMOVE(q, p_sibling);			/*			 * Decrement the count of procs running with this uid.			 */			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);			/*			 * Free up credentials.			 */			crfree(q->p_ucred);			q->p_ucred = NULL;			/*			 * Release reference to text vnode			 */			if (q->p_textvp)				vrele(q->p_textvp);			/*			 * Give machine-dependent layer a chance			 * to free anything that cpu_exit couldn't			 * release while still running in process context.			 */			vm_waitproc(q);			/* XXX what about process 'q' itself?  zfree? */#if defined(__NetBSD__)			pool_put(&proc_pool, q);#endif			nprocs--;			return 0;		}		if (q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&		    (q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))) {			DPRINTF(("jobcontrol %d\n", q->p_pid));		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;			*retval = 0;			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));		}	}
q = p->p_children.lh_first;
q = p->p_children.lh_first
q
q
p->p_children.lh_first
p->p_children
p
p
p_children
lh_first
q != 0
q
q
0
q = q->p_sibling.le_next
q
q
q->p_sibling.le_next
q->p_sibling
q
q
p_sibling
le_next
{		if (SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id) &&		    q->p_pgid != -SCARG(uap, id)) {			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));			continue;		}		nfound++;		if (q->p_stat == SZOMB &&		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))) {			*retval = 0;			DPRINTF(("found %d\n", q->p_pid));			if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}			/*			 * If we got the child via ptrace(2) or procfs, and			 * the parent is different (meaning the process was			 * attached, rather than run as a child), then we need			 * to give it back to the ol dparent, and send the			 * parent a SIGCHLD.  The rest of the cleanup will be			 * done when the old parent waits on the child.			 */			if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}			q->p_xstat = 0;			ruadd(&p->p_stats->p_cru, q->p_ru);			FREE(q->p_ru, M_ZOMBIE);			/*			 * Finally finished with old proc entry.			 * Unlink it from its process group and free it.			 */			leavepgrp(q);			LIST_REMOVE(q, p_list); /* off zombproc */			LIST_REMOVE(q, p_sibling);			/*			 * Decrement the count of procs running with this uid.			 */			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);			/*			 * Free up credentials.			 */			crfree(q->p_ucred);			q->p_ucred = NULL;			/*			 * Release reference to text vnode			 */			if (q->p_textvp)				vrele(q->p_textvp);			/*			 * Give machine-dependent layer a chance			 * to free anything that cpu_exit couldn't			 * release while still running in process context.			 */			vm_waitproc(q);			/* XXX what about process 'q' itself?  zfree? */#if defined(__NetBSD__)			pool_put(&proc_pool, q);#endif			nprocs--;			return 0;		}		if (q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&		    (q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))) {			DPRINTF(("jobcontrol %d\n", q->p_pid));		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;			*retval = 0;			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));		}	}
if (SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id) &&		    q->p_pgid != -SCARG(uap, id)) {			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));			continue;		}
SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id) &&		    q->p_pgid != -SCARG(uap, id)
SCARG(uap, id) != WAIT_ANY &&		    q->p_pid != SCARG(uap, id)
SCARG(uap, id) != WAIT_ANY
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
WAIT_ANY
WAIT_ANY
q->p_pid != SCARG(uap, id)
q->p_pid
q
q
p_pid
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
q->p_pgid != -SCARG(uap, id)
q->p_pgid
q
q
p_pgid
-SCARG(uap, id)
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
{			DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));			continue;		}
DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)));
DPRINTF(("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)))
DPRINTF
DPRINTF
("pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id))
"pid %d pgid %d != %d\n", q->p_pid,				 q->p_pgid, SCARG(uap, id)
"pid %d pgid %d != %d\n"
q->p_pid
q
q
p_pid
q->p_pgid
q
q
p_pgid
SCARG(uap, id)
SCARG
SCARG
uap
uap
id
id
continue;
nfound++;
nfound++
nfound
nfound
if (q->p_stat == SZOMB &&		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))) {			*retval = 0;			DPRINTF(("found %d\n", q->p_pid));			if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}			/*			 * If we got the child via ptrace(2) or procfs, and			 * the parent is different (meaning the process was			 * attached, rather than run as a child), then we need			 * to give it back to the ol dparent, and send the			 * parent a SIGCHLD.  The rest of the cleanup will be			 * done when the old parent waits on the child.			 */			if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}			q->p_xstat = 0;			ruadd(&p->p_stats->p_cru, q->p_ru);			FREE(q->p_ru, M_ZOMBIE);			/*			 * Finally finished with old proc entry.			 * Unlink it from its process group and free it.			 */			leavepgrp(q);			LIST_REMOVE(q, p_list); /* off zombproc */			LIST_REMOVE(q, p_sibling);			/*			 * Decrement the count of procs running with this uid.			 */			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);			/*			 * Free up credentials.			 */			crfree(q->p_ucred);			q->p_ucred = NULL;			/*			 * Release reference to text vnode			 */			if (q->p_textvp)				vrele(q->p_textvp);			/*			 * Give machine-dependent layer a chance			 * to free anything that cpu_exit couldn't			 * release while still running in process context.			 */			vm_waitproc(q);			/* XXX what about process 'q' itself?  zfree? */#if defined(__NetBSD__)			pool_put(&proc_pool, q);#endif			nprocs--;			return 0;		}
q->p_stat == SZOMB &&		    ((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))
q->p_stat == SZOMB
q->p_stat
q
q
p_stat
SZOMB
SZOMB
((SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)))
(SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED))
SCARG(uap, options) & (SVR4_WEXITED|SVR4_WTRAPPED)
SCARG(uap, options)
SCARG
SCARG
uap
uap
options
options
(SVR4_WEXITED|SVR4_WTRAPPED)
SVR4_WEXITED|SVR4_WTRAPPED
SVR4_WEXITED
SVR4_WEXITED
SVR4_WTRAPPED
SVR4_WTRAPPED
{			*retval = 0;			DPRINTF(("found %d\n", q->p_pid));			if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;		        if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}			/*			 * If we got the child via ptrace(2) or procfs, and			 * the parent is different (meaning the process was			 * attached, rather than run as a child), then we need			 * to give it back to the ol dparent, and send the			 * parent a SIGCHLD.  The rest of the cleanup will be			 * done when the old parent waits on the child.			 */			if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}			q->p_xstat = 0;			ruadd(&p->p_stats->p_cru, q->p_ru);			FREE(q->p_ru, M_ZOMBIE);			/*			 * Finally finished with old proc entry.			 * Unlink it from its process group and free it.			 */			leavepgrp(q);			LIST_REMOVE(q, p_list); /* off zombproc */			LIST_REMOVE(q, p_sibling);			/*			 * Decrement the count of procs running with this uid.			 */			(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);			/*			 * Free up credentials.			 */			crfree(q->p_ucred);			q->p_ucred = NULL;			/*			 * Release reference to text vnode			 */			if (q->p_textvp)				vrele(q->p_textvp);			/*			 * Give machine-dependent layer a chance			 * to free anything that cpu_exit couldn't			 * release while still running in process context.			 */			vm_waitproc(q);			/* XXX what about process 'q' itself?  zfree? */#if defined(__NetBSD__)			pool_put(&proc_pool, q);#endif			nprocs--;			return 0;		}
*retval = 0;
*retval = 0
*retval
retval
retval
0
DPRINTF(("found %d\n", q->p_pid));
DPRINTF(("found %d\n", q->p_pid))
DPRINTF
DPRINTF
("found %d\n", q->p_pid)
"found %d\n", q->p_pid
"found %d\n"
q->p_pid
q
q
p_pid
if ((error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0)				return error;
(error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))) != 0
(error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info)))
error = svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))
error
error
svr4_setinfo(q, q->p_xstat,						  SCARG(uap, info))
svr4_setinfo
svr4_setinfo
q
q
q->p_xstat
q
q
p_xstat
SCARG(uap, info)
SCARG
SCARG
uap
uap
info
info
0
return error;
error
error
if ((SCARG(uap, options) & SVR4_WNOWAIT)) {				DPRINTF(("Don't wait\n"));				return 0;			}
(SCARG(uap, options) & SVR4_WNOWAIT)
SCARG(uap, options) & SVR4_WNOWAIT
SCARG(uap, options)
SCARG
SCARG
uap
uap
options
options
SVR4_WNOWAIT
SVR4_WNOWAIT
{				DPRINTF(("Don't wait\n"));				return 0;			}
DPRINTF(("Don't wait\n"));
DPRINTF(("Don't wait\n"))
DPRINTF
DPRINTF
("Don't wait\n")
"Don't wait\n"
return 0;
0
if ((q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid) {				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}
(q->p_flag & P_TRACED) &&			    q->p_oppid != q->p_pptr->p_pid
(q->p_flag & P_TRACED)
q->p_flag & P_TRACED
q->p_flag
q
q
p_flag
P_TRACED
P_TRACED
q->p_oppid != q->p_pptr->p_pid
q->p_oppid
q
q
p_oppid
q->p_pptr->p_pid
q->p_pptr
q
q
p_pptr
p_pid
{				t = pfind(q->p_oppid);				proc_reparent(q, t ? t : initproc);				q->p_oppid = 0;				q->p_flag &= ~(P_TRACED | P_WAITED);				wakeup((caddr_t)q->p_pptr);				return 0;			}
t = pfind(q->p_oppid);
t = pfind(q->p_oppid)
t
t
pfind(q->p_oppid)
pfind
pfind
q->p_oppid
q
q
p_oppid
proc_reparent(q, t ? t : initproc);
proc_reparent(q, t ? t : initproc)
proc_reparent
proc_reparent
q
q
t ? t : initproc
t
t
t
t
initproc
initproc
q->p_oppid = 0;
q->p_oppid = 0
q->p_oppid
q
q
p_oppid
0
q->p_flag &= ~(P_TRACED | P_WAITED);
q->p_flag &= ~(P_TRACED | P_WAITED)
q->p_flag
q
q
p_flag
~(P_TRACED | P_WAITED)
(P_TRACED | P_WAITED)
P_TRACED | P_WAITED
P_TRACED
P_TRACED
P_WAITED
P_WAITED
wakeup((caddr_t)q->p_pptr);
wakeup((caddr_t)q->p_pptr)
wakeup
wakeup
(caddr_t)q->p_pptr
caddr_t
caddr_t
caddr_t

q->p_pptr
q
q
p_pptr
return 0;
0
q->p_xstat = 0;
q->p_xstat = 0
q->p_xstat
q
q
p_xstat
0
ruadd(&p->p_stats->p_cru, q->p_ru);
ruadd(&p->p_stats->p_cru, q->p_ru)
ruadd
ruadd
&p->p_stats->p_cru
p->p_stats->p_cru
p->p_stats
p
p
p_stats
p_cru
q->p_ru
q
q
p_ru
FREE(q->p_ru, M_ZOMBIE);
FREE(q->p_ru, M_ZOMBIE)
FREE
FREE
q->p_ru
q
q
p_ru
M_ZOMBIE
M_ZOMBIE
leavepgrp(q);
leavepgrp(q)
leavepgrp
leavepgrp
q
q
LIST_REMOVE(q, p_list);
LIST_REMOVE(q, p_list)
LIST_REMOVE
LIST_REMOVE
q
q
p_list
p_list
LIST_REMOVE(q, p_sibling);
LIST_REMOVE(q, p_sibling)
LIST_REMOVE
LIST_REMOVE
q
q
p_sibling
p_sibling
(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0);
(void)chgproccnt(q->p_ucred->cr_uidinfo, -1, 0)
void
void

chgproccnt(q->p_ucred->cr_uidinfo, -1, 0)
chgproccnt
chgproccnt
q->p_ucred->cr_uidinfo
q->p_ucred
q
q
p_ucred
cr_uidinfo
-1
1
0
crfree(q->p_ucred);
crfree(q->p_ucred)
crfree
crfree
q->p_ucred
q
q
p_ucred
q->p_ucred = NULL;
q->p_ucred = NULL
q->p_ucred
q
q
p_ucred
NULL
NULL
if (q->p_textvp)				vrele(q->p_textvp);
q->p_textvp
q
q
p_textvp
vrele(q->p_textvp);
vrele(q->p_textvp)
vrele
vrele
q->p_textvp
q
q
p_textvp
vm_waitproc(q);
vm_waitproc(q)
vm_waitproc
vm_waitproc
q
q
nprocs--;
nprocs--
nprocs
nprocs
return 0;
0
if (q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&		    (q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))) {			DPRINTF(("jobcontrol %d\n", q->p_pid));		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;			*retval = 0;			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));		}
q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0 &&		    (q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))
q->p_stat == SSTOP && (q->p_flag & P_WAITED) == 0
q->p_stat == SSTOP
q->p_stat
q
q
p_stat
SSTOP
SSTOP
(q->p_flag & P_WAITED) == 0
(q->p_flag & P_WAITED)
q->p_flag & P_WAITED
q->p_flag
q
q
p_flag
P_WAITED
P_WAITED
0
(q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)))
q->p_flag & P_TRACED ||		     (SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED))
q->p_flag & P_TRACED
q->p_flag
q
q
p_flag
P_TRACED
P_TRACED
(SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED))
SCARG(uap, options) & (SVR4_WSTOPPED|SVR4_WCONTINUED)
SCARG(uap, options)
SCARG
SCARG
uap
uap
options
options
(SVR4_WSTOPPED|SVR4_WCONTINUED)
SVR4_WSTOPPED|SVR4_WCONTINUED
SVR4_WSTOPPED
SVR4_WSTOPPED
SVR4_WCONTINUED
SVR4_WCONTINUED
{			DPRINTF(("jobcontrol %d\n", q->p_pid));		        if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;			*retval = 0;			return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));		}
DPRINTF(("jobcontrol %d\n", q->p_pid));
DPRINTF(("jobcontrol %d\n", q->p_pid))
DPRINTF
DPRINTF
("jobcontrol %d\n", q->p_pid)
"jobcontrol %d\n", q->p_pid
"jobcontrol %d\n"
q->p_pid
q
q
p_pid
if (((SCARG(uap, options) & SVR4_WNOWAIT)) == 0)				q->p_flag |= P_WAITED;
((SCARG(uap, options) & SVR4_WNOWAIT)) == 0
((SCARG(uap, options) & SVR4_WNOWAIT))
(SCARG(uap, options) & SVR4_WNOWAIT)
SCARG(uap, options) & SVR4_WNOWAIT
SCARG(uap, options)
SCARG
SCARG
uap
uap
options
options
SVR4_WNOWAIT
SVR4_WNOWAIT
0
q->p_flag |= P_WAITED;
q->p_flag |= P_WAITED
q->p_flag
q
q
p_flag
P_WAITED
P_WAITED
*retval = 0;
*retval = 0
*retval
retval
retval
0
return svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info));
svr4_setinfo(q, W_STOPCODE(q->p_xstat),					    SCARG(uap, info))
svr4_setinfo
svr4_setinfo
q
q
W_STOPCODE(q->p_xstat)
W_STOPCODE
W_STOPCODE
q->p_xstat
q
q
p_xstat
SCARG(uap, info)
SCARG
SCARG
uap
uap
info
info
if (nfound == 0)		return ECHILD;
nfound == 0
nfound
nfound
0
return ECHILD;
ECHILD
ECHILD
if (SCARG(uap, options) & SVR4_WNOHANG) {		*retval = 0;		if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0)			return error;		return 0;	}
SCARG(uap, options) & SVR4_WNOHANG
SCARG(uap, options)
SCARG
SCARG
uap
uap
options
options
SVR4_WNOHANG
SVR4_WNOHANG
{		*retval = 0;		if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0)			return error;		return 0;	}
*retval = 0;
*retval = 0
*retval
retval
retval
0
if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0)			return error;
(error = svr4_setinfo(NULL, 0, SCARG(uap, info))) != 0
(error = svr4_setinfo(NULL, 0, SCARG(uap, info)))
error = svr4_setinfo(NULL, 0, SCARG(uap, info))
error
error
svr4_setinfo(NULL, 0, SCARG(uap, info))
svr4_setinfo
svr4_setinfo
NULL
NULL
0
SCARG(uap, info)
SCARG
SCARG
uap
uap
info
info
0
return error;
error
error
return 0;
0
if ((error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)) != 0)		return error;
(error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)) != 0
(error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0))
error = tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)
error
error
tsleep((caddr_t)p, PCATCH, "svr4_wait", 0)
tsleep
tsleep
(caddr_t)p
caddr_t
caddr_t
caddr_t

p
p
PCATCH
PCATCH
"svr4_wait"
0
0
return error;
error
error
goto loop;
loop
-----joern-----
(167,377,0)
(152,137,0)
(110,116,0)
(188,212,0)
(117,165,0)
(250,63,0)
(346,57,0)
(114,187,0)
(167,311,0)
(234,261,0)
(215,293,0)
(228,212,0)
(281,128,0)
(175,11,0)
(385,274,0)
(255,397,0)
(386,200,0)
(154,14,0)
(326,63,0)
(275,63,0)
(96,63,0)
(333,291,0)
(29,242,0)
(235,335,0)
(36,218,0)
(143,287,0)
(341,103,0)
(131,326,0)
(123,356,0)
(317,258,0)
(179,96,0)
(245,63,0)
(369,53,0)
(97,353,0)
(300,258,0)
(200,103,0)
(119,10,0)
(147,312,0)
(14,51,0)
(307,147,0)
(151,271,0)
(401,339,0)
(108,339,0)
(391,6,0)
(370,224,0)
(265,333,0)
(150,363,0)
(292,154,0)
(125,242,0)
(19,189,0)
(327,63,0)
(387,151,0)
(205,93,0)
(57,346,0)
(14,331,0)
(337,279,0)
(87,63,0)
(244,339,0)
(138,90,0)
(99,329,0)
(308,339,0)
(180,16,0)
(362,242,0)
(386,319,0)
(93,291,0)
(26,363,0)
(206,140,0)
(238,402,0)
(383,212,0)
(90,134,0)
(189,19,0)
(11,23,0)
(279,337,0)
(37,380,0)
(50,130,0)
(225,63,0)
(85,300,0)
(172,313,0)
(226,24,0)
(202,342,0)
(385,16,0)
(139,63,0)
(58,379,0)
(391,105,0)
(133,221,0)
(377,167,0)
(353,97,0)
(45,164,0)
(200,63,0)
(178,338,0)
(56,6,0)
(40,311,0)
(398,258,0)
(257,63,0)
(16,224,0)
(89,139,0)
(258,205,0)
(374,7,0)
(300,63,0)
(208,219,0)
(274,19,0)
(168,317,0)
(309,308,0)
(185,128,0)
(241,269,0)
(279,343,0)
(390,315,0)
(331,358,0)
(319,386,0)
(60,312,0)
(203,212,0)
(2,339,0)
(390,258,0)
(94,212,0)
(227,215,0)
(154,292,0)
(127,93,0)
(292,339,0)
(378,274,0)
(219,60,0)
(141,245,0)
(125,102,0)
(113,358,0)
(302,63,0)
(120,312,0)
(176,239,0)
(53,147,0)
(346,63,0)
(348,291,0)
(322,136,0)
(160,287,0)
(277,312,0)
(165,63,0)
(261,96,0)
(67,226,0)
(148,134,0)
(293,215,0)
(245,354,0)
(23,11,0)
(42,105,0)
(140,6,0)
(252,385,0)
(182,49,0)
(363,63,0)
(356,195,0)
(145,402,0)
(297,355,0)
(183,377,0)
(337,312,0)
(158,363,0)
(260,287,0)
(390,63,0)
(45,258,0)
(385,105,0)
(371,242,0)
(172,339,0)
(347,113,0)
(275,92,0)
(299,154,0)
(137,63,0)
(331,14,0)
(200,258,0)
(165,117,0)
(90,61,0)
(11,291,0)
(36,345,0)
(109,96,0)
(219,63,0)
(165,258,0)
(96,261,0)
(184,365,0)
(195,330,0)
(54,165,0)
(151,387,0)
(86,63,0)
(278,63,0)
(313,92,0)
(159,317,0)
(57,0,0)
(20,164,0)
(103,339,0)
(174,251,0)
(298,241,0)
(119,398,0)
(380,129,0)
(108,190,0)
(63,12,0)
(135,386,0)
(393,378,0)
(278,258,0)
(215,191,0)
(34,258,0)
(191,10,0)
(363,26,0)
(353,2,0)
(128,63,0)
(153,204,0)
(397,243,0)
(24,226,0)
(151,258,0)
(193,369,0)
(259,250,0)
(315,329,0)
(137,140,0)
(296,311,0)
(254,63,0)
(24,136,0)
(271,250,0)
(66,287,0)
(289,63,0)
(100,292,0)
(187,114,0)
(368,292,0)
(344,287,0)
(87,258,0)
(187,151,0)
(317,365,0)
(255,339,0)
(130,388,0)
(317,63,0)
(327,200,0)
(61,326,0)
(122,255,0)
(216,45,0)
(285,327,0)
(372,129,0)
(74,333,0)
(337,87,0)
(251,190,0)
(20,129,0)
(38,27,0)
(254,258,0)
(323,398,0)
(328,27,0)
(86,258,0)
(311,339,0)
(190,28,0)
(3,289,0)
(274,339,0)
(399,63,0)
(366,338,0)
(357,212,0)
(73,256,0)
(113,336,0)
(163,155,0)
(349,205,0)
(394,339,0)
(204,63,0)
(49,68,0)
(293,339,0)
(282,51,0)
(346,258,0)
(33,245,0)
(205,258,0)
(80,261,0)
(355,105,0)
(77,287,0)
(53,235,0)
(209,291,0)
(68,49,0)
(239,258,0)
(72,379,0)
(196,312,0)
(197,274,0)
(288,219,0)
(226,331,0)
(154,299,0)
(388,258,0)
(222,399,0)
(389,167,0)
(359,108,0)
(199,114,0)
(251,339,0)
(25,345,0)
(354,245,0)
(12,289,0)
(239,312,0)
(164,20,0)
(217,377,0)
(198,200,0)
(401,28,0)
(381,282,0)
(14,154,0)
(318,86,0)
(81,212,0)
(21,97,0)
(271,274,0)
(211,239,0)
(210,354,0)
(314,330,0)
(76,326,0)
(36,369,0)
(36,197,0)
(124,244,0)
(136,24,0)
(59,217,0)
(177,236,0)
(350,293,0)
(35,139,0)
(191,215,0)
(58,117,0)
(105,339,0)
(289,12,0)
(254,312,0)
(388,63,0)
(84,380,0)
(236,63,0)
(310,172,0)
(83,293,0)
(30,212,0)
(2,353,0)
(207,53,0)
(244,124,0)
(128,155,0)
(334,320,0)
(369,105,0)
(88,204,0)
(332,151,0)
(51,14,0)
(65,84,0)
(402,119,0)
(385,263,0)
(269,56,0)
(117,10,0)
(197,53,0)
(327,258,0)
(336,113,0)
(149,342,0)
(249,114,0)
(144,11,0)
(345,49,0)
(0,397,0)
(338,366,0)
(10,119,0)
(7,63,0)
(369,274,0)
(219,258,0)
(340,12,0)
(364,26,0)
(71,379,0)
(119,402,0)
(392,103,0)
(161,108,0)
(234,6,0)
(302,258,0)
(139,258,0)
(28,133,0)
(256,386,0)
(336,258,0)
(338,329,0)
(272,342,0)
(86,312,0)
(201,221,0)
(375,209,0)
(64,23,0)
(78,282,0)
(36,271,0)
(268,287,0)
(155,222,0)
(142,212,0)
(379,339,0)
(250,258,0)
(107,365,0)
(82,390,0)
(91,212,0)
(398,119,0)
(336,63,0)
(222,155,0)
(236,258,0)
(204,56,0)
(69,236,0)
(391,137,0)
(366,258,0)
(269,241,0)
(197,118,0)
(246,244,0)
(358,331,0)
(329,6,0)
(316,336,0)
(379,58,0)
(79,319,0)
(11,175,0)
(75,387,0)
(117,58,0)
(321,51,0)
(365,107,0)
(352,327,0)
(214,87,0)
(49,23,0)
(333,343,0)
(16,235,0)
(267,366,0)
(295,394,0)
(30,221,0)
(84,235,0)
(224,263,0)
(136,258,0)
(44,87,0)
(329,315,0)
(56,269,0)
(305,222,0)
(36,256,0)
(291,212,0)
(282,258,0)
(18,401,0)
(303,77,0)
(22,251,0)
(275,258,0)
(48,387,0)
(294,257,0)
(36,385,0)
(366,6,0)
(376,312,0)
(377,217,0)
(9,312,0)
(213,243,0)
(271,129,0)
(286,302,0)
(402,339,0)
(240,336,0)
(151,63,0)
(395,93,0)
(394,133,0)
(223,149,0)
(5,7,0)
(257,196,0)
(382,212,0)
(326,61,0)
(354,163,0)
(12,63,0)
(237,90,0)
(132,312,0)
(61,90,0)
(369,7,0)
(32,346,0)
(315,390,0)
(342,149,0)
(31,299,0)
(46,257,0)
(248,377,0)
(19,287,0)
(36,391,0)
(243,397,0)
(253,209,0)
(7,320,0)
(13,289,0)
(166,302,0)
(369,219,0)
(36,378,0)
(231,165,0)
(137,258,0)
(220,338,0)
(1,95,0)
(93,205,0)
(41,391,0)
(92,356,0)
(169,275,0)
(27,102,0)
(388,312,0)
(398,63,0)
(271,84,0)
(173,302,0)
(399,258,0)
(134,312,0)
(95,339,0)
(233,399,0)
(98,275,0)
(51,282,0)
(373,401,0)
(43,45,0)
(235,212,0)
(236,312,0)
(155,128,0)
(221,30,0)
(324,218,0)
(218,287,0)
(45,63,0)
(342,339,0)
(302,166,0)
(103,200,0)
(355,274,0)
(343,279,0)
(276,346,0)
(325,338,0)
(261,80,0)
(388,130,0)
(8,308,0)
(170,183,0)
(391,53,0)
(105,77,0)
(56,204,0)
(112,2,0)
(192,164,0)
(7,258,0)
(96,258,0)
(400,235,0)
(26,312,0)
(245,258,0)
(115,274,0)
(102,212,0)
(134,148,0)
(70,398,0)
(284,197,0)
(232,299,0)
(114,63,0)
(87,337,0)
(308,335,0)
(163,354,0)
(270,255,0)
(195,356,0)
(335,235,0)
(262,95,0)
(378,105,0)
(306,254,0)
(62,2,0)
(23,49,0)
(301,102,0)
(101,105,0)
(10,191,0)
(367,278,0)
(335,308,0)
(107,312,0)
(146,353,0)
(250,355,0)
(326,258,0)
(52,241,0)
(156,394,0)
(10,117,0)
(230,137,0)
(396,212,0)
(343,333,0)
(369,312,0)
(282,63,0)
(47,60,0)
(397,255,0)
(186,376,0)
(111,125,0)
(351,124,0)
(0,57,0)
(261,234,0)
(126,291,0)
(360,263,0)
(15,237,0)
(311,167,0)
(157,136,0)
(247,287,0)
(391,274,0)
(194,102,0)
(128,258,0)
(197,105,0)
(320,312,0)
(397,0,0)
(121,167,0)
(384,57,0)
(55,343,0)
(300,313,0)
(196,257,0)
(289,258,0)
(136,63,0)
(4,243,0)
(273,172,0)
(399,222,0)
(114,258,0)
(264,24,0)
(363,258,0)
(387,339,0)
(358,113,0)
(290,244,0)
(181,61,0)
(116,118,0)
(17,274,0)
(266,23,0)
(189,209,0)
(171,212,0)
(36,183,0)
(304,399,0)
(229,300,0)
(204,258,0)
(200,386,0)
(209,189,0)
(106,68,0)
(90,237,0)
(271,105,0)
(155,163,0)
(361,278,0)
(200,327,0)
(280,212,0)
(134,90,0)
(39,388,0)
(162,250,0)
(283,390,0)
(366,63,0)
(331,226,0)
(239,63,0)
(104,23,0)
(151,187,0)
(257,258,0)
(139,63,1)
(174,22,1)
(111,191,1)
(306,166,1)
(136,258,1)
(37,84,1)
(8,400,1)
(136,157,1)
(258,205,1)
(327,352,1)
(107,317,1)
(53,235,1)
(206,137,1)
(238,145,1)
(292,368,1)
(222,305,1)
(61,181,1)
(217,59,1)
(317,63,1)
(264,136,1)
(343,55,1)
(331,14,1)
(110,124,1)
(0,57,1)
(304,128,1)
(73,319,1)
(113,347,1)
(11,144,1)
(26,364,1)
(65,355,1)
(90,61,1)
(113,336,1)
(376,186,1)
(180,149,1)
(275,169,1)
(36,369,1)
(223,342,1)
(130,50,1)
(234,261,1)
(233,304,1)
(84,235,1)
(137,63,1)
(311,40,1)
(353,2,1)
(54,119,1)
(114,199,1)
(189,209,1)
(243,4,1)
(10,117,1)
(201,247,1)
(337,87,1)
(11,291,1)
(51,321,1)
(126,348,1)
(402,339,1)
(300,63,1)
(107,365,1)
(19,189,1)
(36,378,1)
(397,255,1)
(381,78,1)
(200,63,1)
(358,113,1)
(275,258,1)
(124,244,1)
(391,53,1)
(14,51,1)
(271,151,1)
(215,227,1)
(222,399,1)
(47,219,1)
(387,339,1)
(361,367,1)
(88,153,1)
(51,282,1)
(398,323,1)
(321,282,1)
(385,274,1)
(26,363,1)
(62,20,1)
(159,184,1)
(399,63,1)
(310,273,1)
(299,232,1)
(35,89,1)
(44,279,1)
(255,122,1)
(379,339,1)
(204,88,1)
(68,106,1)
(289,13,1)
(327,63,1)
(346,276,1)
(131,236,1)
(108,359,1)
(314,195,1)
(254,306,1)
(308,339,1)
(23,64,1)
(106,49,1)
(157,322,1)
(83,139,1)
(67,24,1)
(254,63,1)
(283,99,1)
(168,159,1)
(320,334,1)
(4,213,1)
(158,150,1)
(363,258,1)
(194,383,1)
(369,7,1)
(182,149,1)
(122,270,1)
(64,104,1)
(36,218,1)
(204,63,1)
(121,389,1)
(323,70,1)
(256,73,1)
(247,19,1)
(219,288,1)
(115,95,1)
(239,63,1)
(261,80,1)
(390,63,1)
(251,174,1)
(155,222,1)
(125,102,1)
(295,201,1)
(185,354,1)
(225,358,1)
(282,381,1)
(7,63,1)
(385,16,1)
(89,63,1)
(124,351,1)
(90,237,1)
(154,292,1)
(220,325,1)
(343,333,1)
(96,258,1)
(112,62,1)
(167,311,1)
(401,373,1)
(177,239,1)
(391,274,1)
(72,165,1)
(316,0,1)
(399,258,1)
(139,258,1)
(3,225,1)
(86,258,1)
(367,60,1)
(97,353,1)
(302,63,1)
(271,274,1)
(151,387,1)
(303,105,1)
(326,258,1)
(128,258,1)
(25,68,1)
(108,339,1)
(199,249,1)
(200,103,1)
(201,66,1)
(56,269,1)
(14,154,1)
(119,402,1)
(291,126,1)
(201,143,1)
(151,258,1)
(394,156,1)
(315,390,1)
(96,179,1)
(217,377,1)
(226,24,1)
(23,11,1)
(165,63,1)
(152,366,1)
(36,256,1)
(386,200,1)
(12,289,1)
(394,339,1)
(102,301,1)
(338,178,1)
(197,105,1)
(245,63,1)
(297,250,1)
(325,267,1)
(270,57,1)
(293,339,1)
(191,215,1)
(257,63,1)
(385,252,1)
(390,258,1)
(204,258,1)
(331,226,1)
(345,25,1)
(338,220,1)
(305,399,1)
(137,230,1)
(380,37,1)
(45,63,1)
(150,337,1)
(16,235,1)
(77,303,1)
(271,105,1)
(192,358,1)
(99,163,1)
(378,274,1)
(385,105,1)
(245,258,1)
(163,155,1)
(218,324,1)
(369,193,1)
(70,215,1)
(244,339,1)
(196,257,1)
(366,258,1)
(195,172,1)
(398,63,1)
(346,258,1)
(369,105,1)
(244,246,1)
(355,274,1)
(269,241,1)
(30,108,1)
(256,386,1)
(239,258,1)
(89,258,1)
(194,30,1)
(377,167,1)
(202,27,1)
(137,258,1)
(87,258,1)
(140,206,1)
(213,255,1)
(274,339,1)
(336,63,1)
(333,265,1)
(306,278,1)
(100,51,1)
(276,32,1)
(144,182,1)
(96,63,1)
(338,329,1)
(20,45,1)
(85,229,1)
(20,164,1)
(402,238,1)
(225,314,1)
(33,124,1)
(57,346,1)
(173,286,1)
(229,275,1)
(400,291,1)
(257,258,1)
(302,173,1)
(267,329,1)
(76,131,1)
(388,39,1)
(388,130,1)
(98,123,1)
(128,63,1)
(278,361,1)
(214,44,1)
(134,148,1)
(351,244,1)
(117,165,1)
(36,345,1)
(332,380,1)
(375,274,1)
(261,96,1)
(252,217,1)
(21,353,1)
(52,204,1)
(46,294,1)
(191,10,1)
(208,196,1)
(5,374,1)
(379,71,1)
(71,72,1)
(393,27,1)
(317,168,1)
(231,54,1)
(24,136,1)
(103,392,1)
(336,258,1)
(30,221,1)
(105,339,1)
(307,53,1)
(61,326,1)
(82,283,1)
(135,107,1)
(2,339,1)
(369,219,1)
(328,38,1)
(250,63,1)
(43,216,1)
(311,339,1)
(288,208,1)
(60,47,1)
(282,63,1)
(292,339,1)
(114,63,1)
(12,340,1)
(79,386,1)
(286,278,1)
(346,63,1)
(250,258,1)
(355,297,1)
(273,300,1)
(169,98,1)
(271,250,1)
(340,289,1)
(355,105,1)
(38,139,1)
(87,214,1)
(193,376,1)
(318,26,1)
(284,116,1)
(230,152,1)
(317,258,1)
(45,43,1)
(236,69,1)
(254,258,1)
(389,248,1)
(388,258,1)
(186,388,1)
(147,307,1)
(86,63,1)
(74,320,1)
(369,274,1)
(10,119,1)
(327,258,1)
(241,298,1)
(236,258,1)
(15,61,1)
(326,76,1)
(78,226,1)
(245,141,1)
(285,198,1)
(36,385,1)
(308,309,1)
(57,384,1)
(40,296,1)
(69,177,1)
(296,121,1)
(41,234,1)
(294,134,1)
(45,258,1)
(335,308,1)
(58,379,1)
(354,245,1)
(65,97,1)
(383,68,1)
(139,35,1)
(329,315,1)
(349,93,1)
(165,231,1)
(378,393,1)
(390,82,1)
(278,63,1)
(104,266,1)
(109,56,1)
(181,326,1)
(384,346,1)
(342,272,1)
(205,93,1)
(141,33,1)
(128,281,1)
(359,161,1)
(397,243,1)
(341,327,1)
(1,235,1)
(136,63,1)
(255,339,1)
(205,349,1)
(366,338,1)
(368,100,1)
(392,341,1)
(363,63,1)
(253,375,1)
(7,258,1)
(179,109,1)
(145,398,1)
(149,223,1)
(93,395,1)
(350,83,1)
(236,63,1)
(197,274,1)
(319,386,1)
(95,262,1)
(178,325,1)
(197,284,1)
(197,53,1)
(165,258,1)
(259,97,1)
(114,258,1)
(293,350,1)
(97,21,1)
(219,63,1)
(36,271,1)
(209,253,1)
(49,23,1)
(237,15,1)
(31,292,1)
(24,264,1)
(125,111,1)
(401,339,1)
(298,52,1)
(146,2,1)
(50,254,1)
(246,290,1)
(257,46,1)
(75,48,1)
(215,293,1)
(279,343,1)
(36,183,1)
(248,224,1)
(16,180,1)
(209,291,1)
(336,240,1)
(68,49,1)
(53,207,1)
(345,49,1)
(387,75,1)
(391,41,1)
(95,339,1)
(42,101,1)
(395,127,1)
(324,95,1)
(322,113,1)
(301,194,1)
(289,258,1)
(271,84,1)
(195,356,1)
(151,187,1)
(333,291,1)
(156,295,1)
(251,339,1)
(398,258,1)
(200,327,1)
(13,3,1)
(101,95,1)
(240,316,1)
(289,63,1)
(119,398,1)
(0,397,1)
(32,125,1)
(274,17,1)
(337,279,1)
(374,163,1)
(391,105,1)
(200,258,1)
(235,335,1)
(34,102,1)
(282,258,1)
(154,299,1)
(278,258,1)
(319,79,1)
(378,105,1)
(27,328,1)
(281,185,1)
(275,63,1)
(103,339,1)
(388,63,1)
(36,197,1)
(354,210,1)
(266,11,1)
(170,217,1)
(224,370,1)
(59,377,1)
(198,135,1)
(86,318,1)
(352,285,1)
(155,128,1)
(399,233,1)
(302,258,1)
(187,114,1)
(249,332,1)
(334,7,1)
(210,245,1)
(39,130,1)
(90,138,1)
(342,339,1)
(63,12,1)
(18,394,1)
(262,1,1)
(151,63,1)
(172,310,1)
(166,302,1)
(66,77,1)
(105,42,1)
(366,63,1)
(250,162,1)
(226,67,1)
(116,110,1)
(219,258,1)
(363,158,1)
(183,377,1)
(207,0,1)
(127,34,1)
(239,211,1)
(184,147,1)
(300,85,1)
(36,391,1)
(353,146,1)
(391,137,1)
(123,191,1)
(117,58,1)
(216,192,1)
(138,237,1)
(17,115,1)
(172,339,1)
(326,63,1)
(309,8,1)
(149,342,1)
(56,204,1)
(232,31,1)
(48,187,1)
(162,259,1)
(370,16,1)
(93,291,1)
(183,170,1)
(134,90,1)
(27,102,1)
(143,95,1)
(373,18,1)
(364,363,1)
(11,175,1)
(22,401,1)
(369,53,1)
(290,319,1)
(2,112,1)
(265,74,1)
(358,331,1)
(153,140,1)
(227,293,1)
(84,65,1)
(55,333,1)
(300,258,1)
(176,86,1)
(211,176,1)
(347,336,1)
(7,5,1)
(161,251,1)
(272,202,1)
(163,354,1)
(87,63,1)
(165,119,2)
(390,163,2)
(402,339,2)
(333,291,2)
(183,377,2)
(376,163,2)
(250,97,2)
(100,51,2)
(271,105,2)
(385,217,2)
(98,191,2)
(233,354,2)
(347,0,2)
(363,163,2)
(137,163,2)
(36,271,2)
(76,163,2)
(293,339,2)
(391,274,2)
(117,119,2)
(300,258,2)
(390,258,2)
(352,0,2)
(281,354,2)
(235,335,2)
(239,258,2)
(272,27,2)
(254,63,2)
(205,68,2)
(245,124,2)
(238,215,2)
(116,124,2)
(172,339,2)
(308,339,2)
(90,61,2)
(86,163,2)
(107,365,2)
(334,163,2)
(61,163,2)
(353,2,2)
(204,63,2)
(60,163,2)
(39,163,2)
(270,57,2)
(97,353,2)
(108,339,2)
(358,331,2)
(56,163,2)
(58,119,2)
(253,95,2)
(301,68,2)
(337,87,2)
(257,258,2)
(368,51,2)
(226,113,2)
(93,68,2)
(163,354,2)
(289,191,2)
(256,319,2)
(255,339,2)
(161,95,2)
(398,63,2)
(278,163,2)
(402,215,2)
(121,149,2)
(205,93,2)
(200,258,2)
(395,95,2)
(243,57,2)
(53,235,2)
(35,358,2)
(34,68,2)
(147,0,2)
(225,358,2)
(102,95,2)
(196,257,2)
(128,63,2)
(338,329,2)
(369,105,2)
(35,95,2)
(72,119,2)
(139,95,2)
(232,51,2)
(230,163,2)
(114,258,2)
(271,250,2)
(141,124,2)
(42,95,2)
(44,163,2)
(0,397,2)
(27,139,2)
(181,163,2)
(69,163,2)
(363,258,2)
(3,191,2)
(276,191,2)
(251,95,2)
(89,191,2)
(151,187,2)
(54,119,2)
(119,398,2)
(123,191,2)
(10,215,2)
(12,289,2)
(254,163,2)
(269,163,2)
(289,63,2)
(145,215,2)
(335,308,2)
(388,258,2)
(326,63,2)
(261,163,2)
(343,163,2)
(156,95,2)
(250,258,2)
(51,226,2)
(200,327,2)
(197,124,2)
(392,0,2)
(279,343,2)
(96,163,2)
(114,63,2)
(292,339,2)
(248,149,2)
(254,258,2)
(327,258,2)
(56,269,2)
(350,139,2)
(386,200,2)
(15,163,2)
(52,163,2)
(136,113,2)
(35,68,2)
(177,163,2)
(257,63,2)
(196,163,2)
(125,102,2)
(55,163,2)
(108,95,2)
(194,68,2)
(269,241,2)
(111,191,2)
(137,258,2)
(79,0,2)
(252,217,2)
(328,139,2)
(45,63,2)
(97,358,2)
(369,53,2)
(90,237,2)
(139,191,2)
(305,354,2)
(36,345,2)
(158,163,2)
(227,139,2)
(231,119,2)
(266,149,2)
(165,63,2)
(213,57,2)
(106,149,2)
(125,191,2)
(36,183,2)
(369,219,2)
(264,113,2)
(195,356,2)
(124,244,2)
(215,293,2)
(134,148,2)
(149,27,2)
(391,163,2)
(331,226,2)
(4,57,2)
(20,164,2)
(136,63,2)
(336,63,2)
(346,63,2)
(338,163,2)
(163,155,2)
(154,51,2)
(162,97,2)
(206,163,2)
(222,354,2)
(215,139,2)
(176,163,2)
(383,68,2)
(26,363,2)
(167,149,2)
(130,163,2)
(274,339,2)
(170,217,2)
(113,0,2)
(13,191,2)
(399,258,2)
(117,165,2)
(36,197,2)
(89,358,2)
(151,358,2)
(310,191,2)
(105,95,2)
(226,24,2)
(378,105,2)
(139,63,2)
(89,68,2)
(282,258,2)
(151,387,2)
(256,386,2)
(86,258,2)
(398,258,2)
(30,221,2)
(11,291,2)
(366,63,2)
(71,119,2)
(23,149,2)
(336,0,2)
(399,354,2)
(134,163,2)
(155,128,2)
(265,163,2)
(209,95,2)
(390,63,2)
(7,258,2)
(36,385,2)
(99,163,2)
(38,139,2)
(271,274,2)
(201,95,2)
(315,390,2)
(299,51,2)
(275,63,2)
(166,278,2)
(385,105,2)
(240,0,2)
(251,339,2)
(157,113,2)
(386,0,2)
(378,27,2)
(144,149,2)
(278,63,2)
(136,258,2)
(361,163,2)
(333,163,2)
(258,68,2)
(225,191,2)
(342,27,2)
(249,358,2)
(258,95,2)
(241,163,2)
(151,63,2)
(12,358,2)
(68,49,2)
(295,95,2)
(124,319,2)
(316,0,2)
(323,215,2)
(186,163,2)
(65,358,2)
(36,218,2)
(63,358,2)
(261,80,2)
(302,258,2)
(222,399,2)
(375,95,2)
(358,113,2)
(70,215,2)
(191,215,2)
(114,358,2)
(337,279,2)
(45,358,2)
(57,346,2)
(366,258,2)
(204,163,2)
(244,319,2)
(146,358,2)
(128,354,2)
(355,105,2)
(95,339,2)
(208,163,2)
(224,149,2)
(329,163,2)
(354,124,2)
(165,258,2)
(153,163,2)
(370,149,2)
(324,95,2)
(43,358,2)
(184,0,2)
(394,95,2)
(131,163,2)
(96,258,2)
(259,97,2)
(327,0,2)
(317,0,2)
(47,163,2)
(82,163,2)
(217,377,2)
(36,391,2)
(189,95,2)
(369,274,2)
(75,358,2)
(207,0,2)
(345,49,2)
(48,358,2)
(122,57,2)
(393,27,2)
(62,358,2)
(205,95,2)
(220,325,2)
(397,57,2)
(320,163,2)
(369,163,2)
(377,167,2)
(219,163,2)
(103,339,2)
(321,226,2)
(282,63,2)
(337,163,2)
(194,95,2)
(89,95,2)
(11,149,2)
(128,258,2)
(384,191,2)
(154,299,2)
(267,163,2)
(127,68,2)
(200,103,2)
(358,0,2)
(204,258,2)
(315,163,2)
(300,63,2)
(86,63,2)
(174,95,2)
(152,163,2)
(143,95,2)
(289,258,2)
(200,63,2)
(246,319,2)
(31,51,2)
(397,255,2)
(364,163,2)
(2,358,2)
(355,274,2)
(302,278,2)
(399,63,2)
(84,358,2)
(355,97,2)
(346,191,2)
(64,149,2)
(10,117,2)
(296,149,2)
(87,63,2)
(278,258,2)
(255,57,2)
(327,63,2)
(45,258,2)
(195,191,2)
(63,191,2)
(322,113,2)
(236,63,2)
(239,163,2)
(301,95,2)
(302,63,2)
(185,354,2)
(59,149,2)
(49,23,2)
(18,95,2)
(319,386,2)
(23,11,2)
(26,163,2)
(289,358,2)
(245,258,2)
(7,63,2)
(93,291,2)
(200,0,2)
(288,163,2)
(166,302,2)
(37,358,2)
(57,191,2)
(304,354,2)
(198,0,2)
(35,191,2)
(349,95,2)
(127,95,2)
(279,163,2)
(137,63,2)
(261,96,2)
(12,191,2)
(394,339,2)
(155,222,2)
(311,149,2)
(271,358,2)
(388,163,2)
(10,119,2)
(87,163,2)
(159,0,2)
(307,0,2)
(389,149,2)
(61,326,2)
(103,0,2)
(36,378,2)
(218,95,2)
(84,235,2)
(68,149,2)
(138,163,2)
(30,95,2)
(385,16,2)
(51,282,2)
(169,191,2)
(115,95,2)
(345,68,2)
(134,90,2)
(56,204,2)
(102,68,2)
(197,274,2)
(192,358,2)
(14,226,2)
(90,163,2)
(24,113,2)
(398,215,2)
(189,209,2)
(326,258,2)
(187,114,2)
(317,63,2)
(101,95,2)
(332,358,2)
(380,358,2)
(257,163,2)
(285,0,2)
(318,163,2)
(283,163,2)
(117,58,2)
(239,63,2)
(13,358,2)
(78,226,2)
(366,163,2)
(363,63,2)
(66,95,2)
(250,63,2)
(0,191,2)
(234,261,2)
(85,191,2)
(11,175,2)
(5,163,2)
(349,68,2)
(388,63,2)
(237,163,2)
(14,154,2)
(282,226,2)
(395,68,2)
(24,136,2)
(19,95,2)
(46,163,2)
(271,84,2)
(342,339,2)
(401,95,2)
(63,12,2)
(391,105,2)
(216,358,2)
(366,338,2)
(210,124,2)
(219,258,2)
(340,358,2)
(379,339,2)
(109,163,2)
(27,102,2)
(34,95,2)
(155,354,2)
(331,113,2)
(306,163,2)
(325,163,2)
(319,0,2)
(154,292,2)
(359,95,2)
(244,339,2)
(234,163,2)
(294,163,2)
(22,95,2)
(14,51,2)
(7,163,2)
(219,63,2)
(236,258,2)
(373,95,2)
(300,191,2)
(93,95,2)
(202,27,2)
(53,0,2)
(168,0,2)
(298,163,2)
(179,163,2)
(77,95,2)
(139,258,2)
(209,291,2)
(178,325,2)
(163,124,2)
(197,105,2)
(397,243,2)
(258,205,2)
(41,163,2)
(199,358,2)
(314,191,2)
(354,245,2)
(286,278,2)
(275,191,2)
(119,215,2)
(341,0,2)
(367,163,2)
(67,113,2)
(107,0,2)
(16,235,2)
(343,333,2)
(378,274,2)
(369,7,2)
(149,342,2)
(20,358,2)
(236,163,2)
(229,191,2)
(2,339,2)
(346,258,2)
(191,10,2)
(297,97,2)
(83,139,2)
(336,258,2)
(110,124,2)
(214,163,2)
(351,319,2)
(36,369,2)
(105,339,2)
(191,139,2)
(326,163,2)
(49,149,2)
(96,63,2)
(32,191,2)
(50,163,2)
(223,27,2)
(40,149,2)
(0,57,2)
(119,402,2)
(292,51,2)
(197,53,2)
(385,274,2)
(387,339,2)
(377,149,2)
(19,189,2)
(73,319,2)
(104,149,2)
(180,149,2)
(167,311,2)
(311,339,2)
(329,315,2)
(88,163,2)
(187,358,2)
(391,53,2)
(379,119,2)
(401,339,2)
(247,95,2)
(139,358,2)
(3,358,2)
(275,258,2)
(217,149,2)
(33,124,2)
(113,336,2)
(388,130,2)
(290,319,2)
(151,258,2)
(25,68,2)
(74,163,2)
(293,139,2)
(135,0,2)
(381,226,2)
(353,358,2)
(193,163,2)
(173,278,2)
(274,95,2)
(391,137,2)
(211,163,2)
(182,149,2)
(36,256,2)
(273,191,2)
(303,95,2)
(183,217,2)
(317,258,2)
(139,68,2)
(140,163,2)
(387,358,2)
(58,379,2)
(16,149,2)
(150,163,2)
(172,191,2)
(245,63,2)
(17,95,2)
(340,191,2)
(374,163,2)
(21,358,2)
(87,258,2)
(331,14,2)
(112,358,2)
(284,124,2)
-----------------------------------
(0,q->p_stat == SZOMB &&\n\\n\\t\\t    ((SCARG(uap, options)
(1,uap)
(2,SCARG(uap, options)
(3,q)
(4,SVR4_WTRAPPED)
(5,p_xstat)
(6,)
(7,q->p_xstat)
(8,uap)
(9,if (q->p_textvp)
(10,q->p_pid != SCARG(uap, id)
(11,(caddr_t)
(12,q->p_sibling.le_next)
(13,p_sibling)
(14,q->p_flag & P_TRACED ||\n\\n\\t\\t     (SCARG(uap, options)
(15,1)
(16,*retval)
(17,id)
(18,uap)
(19,SCARG(uap, id)
(20,DPRINTF(("jobcontrol %d\\n", q->p_pid)
(21,0)
(22,uap)
(23,tsleep((caddr_t)
(24,q->p_flag & P_WAITED)
(25,error)
(26,FREE(q->p_ru, M_ZOMBIE)
(27,nfound == 0)
(28,)
(29,if (q->p_stat == SSTOP && (q->p_flag & P_WAITED)
(30,DPRINTF(("waitsys(%d, %d, %p, %x)
(31,SVR4_WSTOPPED)
(32,q)
(33,q)
(34,q)
(35,0)
(36,RET)
(37,0)
(38,nfound)
(39,q)
(40,info)
(41,0)
(42,id)
(43,p_pid)
(44,q)
(45,q->p_pid)
(46,p_ucred)
(47,NULL)
(48,uap)
(49,error = tsleep((caddr_t)
(50,proc_pool)
(51,q->p_flag & P_TRACED)
(52,P_TRACED)
(53,*retval)
(54,q)
(55,p_cru)
(56,q->p_flag &= ~(P_TRACED | P_WAITED)
(57,q->p_stat == SZOMB)
(58,-SCARG(uap, id)
(59,0)
(60,q->p_ucred = NULL)
(61,q->p_ucred->cr_uidinfo)
(62,uap)
(63,q = q->p_sibling.le_next)
(64,0)
(65,retval)
(66,break;)
(67,0)
(68,(error = tsleep((caddr_t)
(69,p_sibling)
(70,q)
(71,id)
(72,uap)
(73,error)
(74,p)
(75,info)
(76,p_ucred)
(77,SCARG(uap, id)
(78,q)
(79,0)
(80,caddr_t)
(81,retval)
(82,p_oppid)
(83,uap)
(84,*retval)
(85,p_pgid)
(86,leavepgrp(q)
(87,q->p_ru)
(88,p_flag)
(89,q)
(90,chgproccnt(q->p_ucred->cr_uidinfo, -1, 0)
(91,error)
(92,)
(93,p->p_children)
(94,p)
(95,SCARG(uap, grp)
(96,q->p_pptr)
(97,((SCARG(uap, options)
(98,q)
(99,t)
(100,uap)
(101,uap)
(102,nfound = 0)
(103,SCARG(uap, info)
(104,"svr4_wait")
(105,SCARG(uap, id)
(106,0)
(107,DPRINTF(("found %d\\n", q->p_pid)
(108,SCARG(uap, options)
(109,q)
(110,"Don\'t wait\\n")
(111,nfound)
(112,options)
(113,q->p_stat == SSTOP)
(114,q->p_xstat)
(115,uap)
(116,DPRINTF(("Don\'t wait\\n")
(117,q->p_pgid != -SCARG(uap, id)
(118,)
(119,q->p_pid != SCARG(uap, id)
(120,if ((SCARG(uap, options)
(121,0)
(122,options)
(123,"pid %d pgid %d != %d\\n")
(124,SCARG(uap, options)
(125,nfound++)
(126,curproc)
(127,p)
(128,q->p_oppid)
(129,)
(130,&proc_pool)
(131,q)
(132,if ((error = svr4_setinfo(q, q->p_xstat,\n\\n\\t\\t\\t\\t\\t\\t  SCARG(uap, info)
(133,)
(134,(void)
(135,error)
(136,q->p_flag)
(137,q->p_oppid)
(138,0)
(139,q != 0)
(140,q->p_oppid = 0)
(141,p_flag)
(142,if (SCARG(uap, options)
(143,break;)
(144,p)
(145,uap)
(146,SVR4_WNOWAIT)
(147,*retval = 0)
(148,void)
(149,SCARG(uap, options)
(150,q)
(151,svr4_setinfo(q, W_STOPCODE(q->p_xstat)
(152,q)
(153,q)
(154,SCARG(uap, options)
(155,q->p_oppid != q->p_pptr->p_pid)
(156,grp)
(157,p_flag)
(158,p_ru)
(159,q)
(160,case SVR4_P_ALL:)
(161,uap)
(162,p_flag)
(163,(q->p_flag & P_TRACED)
(164,)
(165,q->p_pgid)
(166,vrele(q->p_textvp)
(167,svr4_setinfo(NULL, 0, SCARG(uap, info)
(168,p_pid)
(169,p_pid)
(170,error)
(171,t)
(172,SCARG(uap, id)
(173,p_textvp)
(174,info)
(175,caddr_t)
(176,q)
(177,q)
(178,initproc)
(179,p_pptr)
(180,retval)
(181,cr_uidinfo)
(182,error)
(183,return error;)
(184,"found %d\\n")
(185,q)
(186,nprocs)
(187,W_STOPCODE(q->p_xstat)
(188,loop:)
(189,-p->p_pgid)
(190,)
(191,SCARG(uap, id)
(192,"jobcontrol %d\\n")
(193,0)
(194,nfound)
(195,DPRINTF(("pid %d pgid %d != %d\\n", q->p_pid,\n\\n\\t\\t\\t\\t q->p_pgid, SCARG(uap, id)
(196,crfree(q->p_ucred)
(197,return 0;)
(198,q)
(199,p_xstat)
(200,svr4_setinfo(q, q->p_xstat,\n\\n\\t\\t\\t\\t\\t\\t  SCARG(uap, info)
(201,"waitsys(%d, %d, %p, %x)
(202,uap)
(203,switch (SCARG(uap, grp)
(204,q->p_flag)
(205,p->p_children.lh_first)
(206,0)
(207,retval)
(208,q)
(209,p->p_pgid)
(210,P_TRACED)
(211,p_list)
(212,)
(213,SVR4_WEXITED)
(214,p_ru)
(215,SCARG(uap, id)
(216,q)
(217,(error = svr4_setinfo(NULL, 0, SCARG(uap, info)
(218,return EINVAL;)
(219,q->p_ucred)
(220,t)
(221,)
(222,q->p_pptr->p_pid)
(223,SVR4_WNOHANG)
(224,*retval = 0)
(225,q)
(226,(q->p_flag & P_WAITED)
(227,WAIT_ANY)
(228,for (q = p->p_children.lh_first; q != 0; q = q->p_sibling.le_next)
(229,q)
(230,p_oppid)
(231,p_pgid)
(232,SVR4_WCONTINUED)
(233,p_pptr)
(234,wakeup((caddr_t)
(235,*retval = &uap->sysmsg_result)
(236,LIST_REMOVE(q, p_sibling)
(237,-1)
(238,id)
(239,LIST_REMOVE(q, p_list)
(240,p_stat)
(241,P_TRACED | P_WAITED)
(242,)
(243,SVR4_WEXITED|SVR4_WTRAPPED)
(244,SCARG(uap, options)
(245,q->p_flag)
(246,options)
(247,break;)
(248,error)
(249,q)
(250,q->p_flag)
(251,SCARG(uap, info)
(252,0)
(253,p_pgid)
(254,vm_waitproc(q)
(255,SCARG(uap, options)
(256,return error;)
(257,q->p_ucred)
(258,q = p->p_children.lh_first)
(259,q)
(260,default:)
(261,(caddr_t)
(262,grp)
(263,)
(264,P_WAITED)
(265,p_stats)
(266,PCATCH)
(267,q)
(268,case SVR4_P_PGID:)
(269,~(P_TRACED | P_WAITED)
(270,uap)
(271,return svr4_setinfo(q, W_STOPCODE(q->p_xstat)
(272,options)
(273,uap)
(274,SCARG(uap, id)
(275,q->p_pid)
(276,p_stat)
(277,if ((q->p_flag & P_TRACED)
(278,q->p_textvp)
(279,&p->p_stats->p_cru)
(280,if ((error = tsleep((caddr_t)
(281,p_oppid)
(282,q->p_flag)
(283,q)
(284,0)
(285,q)
(286,q)
(287,)
(288,p_ucred)
(289,q->p_sibling)
(290,uap)
(291,*p = curproc)
(292,SCARG(uap, options)
(293,SCARG(uap, id)
(294,q)
(295,uap)
(296,uap)
(297,P_WAITED)
(298,P_WAITED)
(299,SVR4_WSTOPPED|SVR4_WCONTINUED)
(300,q->p_pgid)
(301,0)
(302,q->p_textvp)
(303,WAIT_ANY)
(304,q)
(305,p_pid)
(306,q)
(307,0)
(308,uap->sysmsg_result)
(309,sysmsg_result)
(310,id)
(311,SCARG(uap, info)
(312,)
(313,)
(314,continue;)
(315,pfind(q->p_oppid)
(316,q)
(317,q->p_pid)
(318,q)
(319,(error = svr4_setinfo(q, q->p_xstat,\n\\n\\t\\t\\t\\t\\t\\t  SCARG(uap, info)
(320,q->p_xstat = 0)
(321,P_TRACED)
(322,q)
(323,p_pid)
(324,EINVAL)
(325,t)
(326,q->p_ucred)
(327,q->p_xstat)
(328,0)
(329,t = pfind(q->p_oppid)
(330,)
(331,(q->p_flag & P_WAITED)
(332,q)
(333,p->p_stats)
(334,0)
(335,&uap->sysmsg_result)
(336,q->p_stat)
(337,ruadd(&p->p_stats->p_cru, q->p_ru)
(338,t ? t : initproc)
(339,struct svr4_sys_waitsys_args *uap)
(340,le_next)
(341,uap)
(342,SCARG(uap, options)
(343,p->p_stats->p_cru)
(344,case SVR4_P_PID:)
(345,return error;)
(346,q->p_stat)
(347,SSTOP)
(348,p)
(349,lh_first)
(350,id)
(351,SVR4_WNOWAIT)
(352,p_xstat)
(353,SCARG(uap, options)
(354,q->p_flag & P_TRACED)
(355,q->p_flag |= P_WAITED)
(356,)
(357,q)
(358,q->p_stat == SSTOP && (q->p_flag & P_WAITED)
(359,options)
(360,if ((error = svr4_setinfo(NULL, 0, SCARG(uap, info)
(361,p_textvp)
(362,if (SCARG(uap, id)
(363,q->p_ru)
(364,M_ZOMBIE)
(365,)
(366,proc_reparent(q, t ? t : initproc)
(367,q)
(368,options)
(369,return 0;)
(370,0)
(371,if (q->p_stat == SZOMB &&\n\\n\\t\\t    ((SCARG(uap, options)
(372,if (((SCARG(uap, options)
(373,id)
(374,q)
(375,p)
(376,nprocs--)
(377,error = svr4_setinfo(NULL, 0, SCARG(uap, info)
(378,return ECHILD;)
(379,SCARG(uap, id)
(380,*retval = 0)
(381,p_flag)
(382,nfound)
(383,goto loop;)
(384,SZOMB)
(385,return 0;)
(386,error = svr4_setinfo(q, q->p_xstat,\n\\n\\t\\t\\t\\t\\t\\t  SCARG(uap, info)
(387,SCARG(uap, info)
(388,pool_put(&proc_pool, q)
(389,NULL)
(390,q->p_oppid)
(391,return 0;)
(392,info)
(393,ECHILD)
(394,SCARG(uap, grp)
(395,p_children)
(396,if (nfound == 0)
(397,SCARG(uap, options)
(398,q->p_pid)
(399,q->p_pptr)
(400,retval)
(401,SCARG(uap, id)
(402,SCARG(uap, id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^