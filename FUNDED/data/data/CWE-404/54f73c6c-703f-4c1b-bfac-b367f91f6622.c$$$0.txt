-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_52_bad()
{
    wchar_t * data;
    data = NULL;
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    CWE401_Memory_Leak__strdup_wchar_t_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
22,23
22,24
22,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
-----nextToken-----
2,4,8,10,11,15,17,21,23,24,26,30,33,35,39,41,45,47
-----computeFrom-----
13,14
13,15
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_52_bad(){    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    CWE401_Memory_Leak__strdup_wchar_t_52b_badSink(data);}
void
CWE401_Memory_Leak__strdup_wchar_t_52_bad()
CWE401_Memory_Leak__strdup_wchar_t_52_bad
{    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    CWE401_Memory_Leak__strdup_wchar_t_52b_badSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
CWE401_Memory_Leak__strdup_wchar_t_52b_badSink(data);
CWE401_Memory_Leak__strdup_wchar_t_52b_badSink(data)
CWE401_Memory_Leak__strdup_wchar_t_52b_badSink
CWE401_Memory_Leak__strdup_wchar_t_52b_badSink
data
data
-----joern-----
(0,11,0)
(9,7,0)
(8,6,0)
(15,13,0)
(13,6,0)
(14,11,0)
(0,8,0)
(12,13,0)
(5,0,0)
(3,0,0)
(10,6,0)
(4,8,0)
(11,0,0)
(3,8,0)
(7,6,0)
(7,0,0)
(1,3,0)
(5,4,1)
(3,1,1)
(15,12,1)
(4,13,1)
(7,9,1)
(0,11,1)
(1,0,1)
(7,0,1)
(11,14,1)
(9,3,1)
(14,5,1)
(13,15,1)
(3,0,1)
(2,7,1)
(7,0,2)
(0,11,2)
(3,0,2)
-----------------------------------
(0,data = wcsdup(myString)
(1,data)
(2,RET)
(3,printWLine(data)
(4,"myString")
(5,data)
(6,)
(7,CWE401_Memory_Leak__strdup_wchar_t_52b_badSink(data)
(8,)
(9,data)
(10,data)
(11,wcsdup(myString)
(12,data)
(13,data = NULL)
(14,myString)
(15,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^