-----label-----
1
-----code-----
static int
ztype42execchar(i_ctx_t *i_ctx_p)
{
    os_ptr op = osp;
    gs_font *pfont;
    int code = font_param(op - 3, &pfont);
    gs_font_base *const pbfont = (gs_font_base *) pfont;
    gs_font_type42 *const pfont42 = (gs_font_type42 *) pfont;
    gs_text_enum_t *penum = op_show_find(i_ctx_p);
    op_proc_t cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke), exec_cont = 0;
    ref *cnref;
    uint glyph_index;

    if (code < 0)
	return code;
    if (penum == 0 ||
	(pfont->FontType != ft_TrueType &&
	 pfont->FontType != ft_CID_TrueType)
	)
	return_error(e_undefined);
    /*
     * Any reasonable implementation would execute something like
     *  1 setmiterlimit 0 setlinejoin 0 setlinecap
     * here, but apparently the Adobe implementations aren't reasonable.
     *
     * If this is a stroked font, set the stroke width.
     */
    if (pfont->PaintType)
	gs_setlinewidth(igs, pfont->StrokeWidth);
    check_estack(3);		/* for continuations */
    /*
     * Execute the definition of the character.
     */
    if (r_is_proc(op))
	return zchar_exec_char_proc(i_ctx_p);
    /*
     * The definition must be a Type 42 glyph index.
     * Note that we do not require read access: this is deliberate.
     */
    check_type(*op, t_integer);
    check_ostack(3);		/* for lsb values */
    /* Establish a current point. */
    code = gs_moveto(igs, 0.0, 0.0);
    if (code < 0)
	return code;
    cnref = op - 1;
    glyph_index = (uint)op->value.intval;
    if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)
	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);
    code = zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true);
    if (code >= 0 && exec_cont != 0)
	code = (*exec_cont)(i_ctx_p);
    return code;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
34,37
35,36
37,38
37,39
38,39
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
52,54
53,54
53,55
54,55
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
64,67
67,68
68,69
68,70
69,70
69,71
70,71
72,73
74,75
76,77
77,78
77,79
78,79
80,81
80,82
80,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
93,95
95,96
96,97
97,98
97,99
97,100
98,99
98,100
99,100
99,101
100,101
104,105
106,107
108,109
108,110
110,111
112,113
113,114
113,115
114,115
116,117
116,118
119,120
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
130,131
131,132
133,134
133,135
134,135
134,136
135,136
135,137
136,137
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
146,147
148,149
148,150
149,150
149,151
150,151
153,154
155,156
156,157
156,158
157,158
159,160
160,161
162,163
162,164
163,164
163,165
164,165
167,168
168,169
168,170
168,171
169,170
171,172
173,174
173,175
174,175
177,178
178,179
178,180
179,180
182,183
182,184
183,184
183,185
184,185
186,187
188,189
189,190
189,191
190,191
192,193
194,195
195,196
195,197
195,198
196,197
198,199
199,200
201,202
203,204
204,205
204,206
205,206
208,209
209,210
209,211
210,211
212,213
212,214
212,215
212,216
213,214
215,216
219,220
219,221
220,221
220,222
221,222
224,225
225,226
227,228
228,229
228,230
229,230
231,232
231,233
232,233
235,236
236,237
236,238
237,238
239,240
239,241
240,241
240,242
241,242
244,245
244,246
245,246
245,247
246,247
250,251
250,252
251,252
251,253
252,253
252,254
253,254
253,255
254,255
256,257
259,260
259,261
260,261
260,262
261,262
265,266
266,267
266,268
267,268
269,270
269,271
269,272
270,271
272,273
274,275
276,277
277,278
277,279
278,279
280,281
280,282
280,283
280,284
280,285
280,286
280,287
280,288
281,282
283,284
285,286
287,288
289,290
291,292
293,294
294,295
297,298
297,299
298,299
298,300
299,300
299,301
300,301
303,304
303,305
304,305
307,308
308,309
308,310
309,310
311,312
311,313
312,313
313,314
314,315
316,317
318,319
319,320
-----nextToken-----
2,4,7,9,10,15,17,20,24,26,27,30,32,36,39,40,43,47,49,50,55,57,59,63,65,66,71,73,75,79,81,82,86,88,92,94,101,102,103,105,107,109,111,115,117,118,122,124,128,129,132,137,138,144,145,147,151,152,154,158,161,165,166,170,172,175,176,180,181,185,187,191,193,197,200,202,206,207,211,214,216,217,218,222,223,226,230,233,234,238,242,243,247,248,249,255,257,258,262,263,264,268,271,273,275,279,282,284,286,288,290,292,295,296,301,302,305,306,310,315,317,320
-----computeFrom-----
37,38
37,39
98,99
98,100
126,127
126,128
134,135
134,136
135,136
135,137
140,141
140,142
141,142
141,143
148,149
148,150
209,210
209,211
220,221
220,222
228,229
228,230
231,232
231,233
236,237
236,238
251,252
251,253
266,267
266,268
277,278
277,279
298,299
298,300
299,300
299,301
303,304
303,305
308,309
308,310
-----guardedBy-----
128,132
222,226
262,273
301,310
305,315
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static intztype42execchar(i_ctx_t *i_ctx_p){    os_ptr op = osp;    gs_font *pfont;    int code = font_param(op - 3, &pfont);    gs_font_base *const pbfont = (gs_font_base *) pfont;    gs_font_type42 *const pfont42 = (gs_font_type42 *) pfont;    gs_text_enum_t *penum = op_show_find(i_ctx_p);    op_proc_t cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke), exec_cont = 0;    ref *cnref;    uint glyph_index;    if (code < 0)	return code;    if (penum == 0 ||	(pfont->FontType != ft_TrueType &&	 pfont->FontType != ft_CID_TrueType)	)	return_error(e_undefined);    /*     * Any reasonable implementation would execute something like     *  1 setmiterlimit 0 setlinejoin 0 setlinecap     * here, but apparently the Adobe implementations aren't reasonable.     *     * If this is a stroked font, set the stroke width.     */    if (pfont->PaintType)	gs_setlinewidth(igs, pfont->StrokeWidth);    check_estack(3);		/* for continuations */    /*     * Execute the definition of the character.     */    if (r_is_proc(op))	return zchar_exec_char_proc(i_ctx_p);    /*     * The definition must be a Type 42 glyph index.     * Note that we do not require read access: this is deliberate.     */    check_type(*op, t_integer);    check_ostack(3);		/* for lsb values */    /* Establish a current point. */    code = gs_moveto(igs, 0.0, 0.0);    if (code < 0)	return code;    cnref = op - 1;    glyph_index = (uint)op->value.intval;    if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);    code = zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true);    if (code >= 0 && exec_cont != 0)	code = (*exec_cont)(i_ctx_p);    return code;}
static int
ztype42execchar(i_ctx_t *i_ctx_p)
ztype42execchar
i_ctx_t *i_ctx_p
i_ctx_t
i_ctx_t
*i_ctx_p
*
i_ctx_p
{    os_ptr op = osp;    gs_font *pfont;    int code = font_param(op - 3, &pfont);    gs_font_base *const pbfont = (gs_font_base *) pfont;    gs_font_type42 *const pfont42 = (gs_font_type42 *) pfont;    gs_text_enum_t *penum = op_show_find(i_ctx_p);    op_proc_t cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke), exec_cont = 0;    ref *cnref;    uint glyph_index;    if (code < 0)	return code;    if (penum == 0 ||	(pfont->FontType != ft_TrueType &&	 pfont->FontType != ft_CID_TrueType)	)	return_error(e_undefined);    /*     * Any reasonable implementation would execute something like     *  1 setmiterlimit 0 setlinejoin 0 setlinecap     * here, but apparently the Adobe implementations aren't reasonable.     *     * If this is a stroked font, set the stroke width.     */    if (pfont->PaintType)	gs_setlinewidth(igs, pfont->StrokeWidth);    check_estack(3);		/* for continuations */    /*     * Execute the definition of the character.     */    if (r_is_proc(op))	return zchar_exec_char_proc(i_ctx_p);    /*     * The definition must be a Type 42 glyph index.     * Note that we do not require read access: this is deliberate.     */    check_type(*op, t_integer);    check_ostack(3);		/* for lsb values */    /* Establish a current point. */    code = gs_moveto(igs, 0.0, 0.0);    if (code < 0)	return code;    cnref = op - 1;    glyph_index = (uint)op->value.intval;    if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);    code = zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true);    if (code >= 0 && exec_cont != 0)	code = (*exec_cont)(i_ctx_p);    return code;}
os_ptr op = osp;
os_ptr op = osp;
os_ptr
os_ptr
op = osp
op
= osp
osp
osp
gs_font *pfont;
gs_font *pfont;
gs_font
gs_font
*pfont
*
pfont
int code = font_param(op - 3, &pfont);
int code = font_param(op - 3, &pfont);
int
code = font_param(op - 3, &pfont)
code
= font_param(op - 3, &pfont)
font_param(op - 3, &pfont)
font_param
font_param
op - 3
op
op
3
&pfont
pfont
pfont
gs_font_base *const pbfont = (gs_font_base *) pfont;
gs_font_base *const pbfont = (gs_font_base *) pfont;
gs_font_base
gs_font_base
*const pbfont = (gs_font_base *) pfont
*const
pbfont
= (gs_font_base *) pfont
(gs_font_base *) pfont
gs_font_base *
gs_font_base
gs_font_base
*
*
pfont
pfont
gs_font_type42 *const pfont42 = (gs_font_type42 *) pfont;
gs_font_type42 *const pfont42 = (gs_font_type42 *) pfont;
gs_font_type42
gs_font_type42
*const pfont42 = (gs_font_type42 *) pfont
*const
pfont42
= (gs_font_type42 *) pfont
(gs_font_type42 *) pfont
gs_font_type42 *
gs_font_type42
gs_font_type42
*
*
pfont
pfont
gs_text_enum_t *penum = op_show_find(i_ctx_p);
gs_text_enum_t *penum = op_show_find(i_ctx_p);
gs_text_enum_t
gs_text_enum_t
*penum = op_show_find(i_ctx_p)
*
penum
= op_show_find(i_ctx_p)
op_show_find(i_ctx_p)
op_show_find
op_show_find
i_ctx_p
i_ctx_p
op_proc_t cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke), exec_cont = 0;
op_proc_t cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke), exec_cont = 0;
op_proc_t
op_proc_t
cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke)
cont
= (pbfont->PaintType == 0 ? type42_fill : type42_stroke)
(pbfont->PaintType == 0 ? type42_fill : type42_stroke)
pbfont->PaintType == 0 ? type42_fill : type42_stroke
pbfont->PaintType == 0
pbfont->PaintType
pbfont
pbfont
PaintType
0
type42_fill
type42_fill
type42_stroke
type42_stroke
exec_cont = 0
exec_cont
= 0
0
ref *cnref;
ref *cnref;
ref
ref
*cnref
*
cnref
uint glyph_index;
uint glyph_index;
uint
uint
glyph_index
glyph_index
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
if (penum == 0 ||	(pfont->FontType != ft_TrueType &&	 pfont->FontType != ft_CID_TrueType)	)	return_error(e_undefined);
penum == 0 ||	(pfont->FontType != ft_TrueType &&	 pfont->FontType != ft_CID_TrueType)
penum == 0
penum
penum
0
(pfont->FontType != ft_TrueType &&	 pfont->FontType != ft_CID_TrueType)
pfont->FontType != ft_TrueType &&	 pfont->FontType != ft_CID_TrueType
pfont->FontType != ft_TrueType
pfont->FontType
pfont
pfont
FontType
ft_TrueType
ft_TrueType
pfont->FontType != ft_CID_TrueType
pfont->FontType
pfont
pfont
FontType
ft_CID_TrueType
ft_CID_TrueType
return_error(e_undefined);
return_error(e_undefined);
return_error
return_error
(e_undefined)
e_undefined
e_undefined
if (pfont->PaintType)	gs_setlinewidth(igs, pfont->StrokeWidth);
pfont->PaintType
pfont
pfont
PaintType
gs_setlinewidth(igs, pfont->StrokeWidth);
gs_setlinewidth(igs, pfont->StrokeWidth)
gs_setlinewidth
gs_setlinewidth
igs
igs
pfont->StrokeWidth
pfont
pfont
StrokeWidth
check_estack(3);
check_estack(3)
check_estack
check_estack
3
if (r_is_proc(op))	return zchar_exec_char_proc(i_ctx_p);
r_is_proc(op)
r_is_proc
r_is_proc
op
op
return zchar_exec_char_proc(i_ctx_p);
zchar_exec_char_proc(i_ctx_p)
zchar_exec_char_proc
zchar_exec_char_proc
i_ctx_p
i_ctx_p
check_type(*op, t_integer);
check_type(*op, t_integer)
check_type
check_type
*op
op
op
t_integer
t_integer
check_ostack(3);
check_ostack(3)
check_ostack
check_ostack
3
code = gs_moveto(igs, 0.0, 0.0);
code = gs_moveto(igs, 0.0, 0.0)
code
code
gs_moveto(igs, 0.0, 0.0)
gs_moveto
gs_moveto
igs
igs
0.0
0.0
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
cnref = op - 1;
cnref = op - 1
cnref
cnref
op - 1
op
op
1
glyph_index = (uint)op->value.intval;
glyph_index = (uint)op->value.intval
glyph_index
glyph_index
(uint)op->value.intval
uint
uint
uint

op->value.intval
op->value
op
op
value
intval
if (gs_rootfont(igs)->WMode && pfont42->data.gsub_size)	glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);
gs_rootfont(igs)->WMode && pfont42->data.gsub_size
gs_rootfont(igs)->WMode
gs_rootfont(igs)
gs_rootfont
gs_rootfont
igs
igs
WMode
pfont42->data.gsub_size
pfont42->data
pfont42
pfont42
data
gsub_size
glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index);
glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
glyph_index
glyph_index
gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
gs_type42_substitute_glyph_index_vertical
gs_type42_substitute_glyph_index_vertical
pfont42
pfont42
glyph_index
glyph_index
code = zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true);
code = zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true)
code
code
zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true)
zchar42_set_cache
zchar42_set_cache
i_ctx_p
i_ctx_p
pbfont
pbfont
cnref
cnref
glyph_index
glyph_index
cont
cont
&exec_cont
exec_cont
exec_cont
true
if (code >= 0 && exec_cont != 0)	code = (*exec_cont)(i_ctx_p);
code >= 0 && exec_cont != 0
code >= 0
code
code
0
exec_cont != 0
exec_cont
exec_cont
0
code = (*exec_cont)(i_ctx_p);
code = (*exec_cont)(i_ctx_p)
code
code
(*exec_cont)(i_ctx_p)
(*exec_cont)
*exec_cont
exec_cont
exec_cont
i_ctx_p
i_ctx_p
return code;
code
code
-----joern-----
(27,69,0)
(138,39,0)
(38,118,0)
(141,153,0)
(2,1,0)
(71,145,0)
(3,80,0)
(161,46,0)
(109,96,0)
(145,71,0)
(101,123,0)
(77,150,0)
(71,100,0)
(100,111,0)
(78,80,0)
(36,85,0)
(93,134,0)
(5,69,0)
(131,111,0)
(70,50,0)
(119,12,0)
(94,66,0)
(148,57,0)
(80,3,0)
(73,162,0)
(118,57,0)
(160,96,0)
(106,103,0)
(48,66,0)
(45,125,0)
(72,85,0)
(94,100,0)
(27,111,0)
(33,51,0)
(1,15,0)
(68,85,0)
(146,162,0)
(26,111,0)
(69,5,0)
(75,111,0)
(129,149,0)
(39,115,0)
(62,97,0)
(110,111,0)
(10,51,0)
(125,45,0)
(152,103,0)
(121,34,0)
(50,150,0)
(55,111,0)
(132,5,0)
(153,33,0)
(147,162,0)
(112,149,0)
(42,153,0)
(47,83,0)
(39,66,0)
(96,157,0)
(30,155,0)
(129,3,0)
(67,143,0)
(66,39,0)
(4,26,0)
(53,149,0)
(66,111,0)
(64,111,0)
(83,46,0)
(86,30,0)
(25,31,0)
(118,34,0)
(51,33,0)
(46,153,0)
(46,111,0)
(159,153,0)
(150,50,0)
(157,43,0)
(89,34,0)
(125,0,0)
(108,14,0)
(154,14,0)
(97,62,0)
(31,111,0)
(124,147,0)
(143,26,0)
(34,118,0)
(152,75,0)
(85,111,0)
(17,160,0)
(14,55,0)
(88,57,0)
(44,52,0)
(96,109,0)
(116,109,0)
(151,45,0)
(153,50,0)
(7,33,0)
(150,0,0)
(153,31,0)
(24,153,0)
(12,45,0)
(0,111,0)
(49,111,0)
(72,19,0)
(140,143,0)
(99,111,0)
(6,85,0)
(142,55,0)
(96,160,0)
(21,153,0)
(9,0,0)
(109,116,0)
(0,125,0)
(19,111,0)
(79,111,0)
(158,156,0)
(33,111,0)
(1,111,0)
(137,129,0)
(63,85,0)
(29,111,0)
(22,41,0)
(120,111,0)
(19,72,0)
(125,81,0)
(45,12,0)
(59,76,0)
(56,111,0)
(105,116,0)
(133,150,0)
(107,43,0)
(65,17,0)
(23,51,0)
(41,27,0)
(153,155,0)
(60,71,0)
(114,36,0)
(113,16,0)
(152,94,0)
(116,1,0)
(54,134,0)
(69,27,0)
(62,155,0)
(13,75,0)
(81,125,0)
(152,16,0)
(92,157,0)
(43,157,0)
(84,143,0)
(102,43,0)
(36,69,0)
(156,153,0)
(37,83,0)
(95,111,0)
(15,1,0)
(115,39,0)
(144,97,0)
(117,160,0)
(126,111,0)
(30,94,0)
(20,123,0)
(75,97,0)
(83,108,0)
(15,155,0)
(28,153,0)
(74,15,0)
(75,46,0)
(76,111,0)
(139,27,0)
(51,85,0)
(11,116,0)
(153,156,0)
(103,26,0)
(100,71,0)
(14,108,0)
(69,36,0)
(136,17,0)
(8,41,0)
(108,83,0)
(80,52,0)
(127,14,0)
(128,12,0)
(40,111,0)
(135,111,0)
(153,0,0)
(16,27,0)
(130,72,0)
(104,63,0)
(26,143,0)
(57,118,0)
(156,55,0)
(122,62,0)
(82,19,0)
(3,129,0)
(32,58,0)
(31,34,0)
(35,100,0)
(98,111,0)
(87,110,0)
(157,96,0)
(91,55,0)
(52,80,0)
(153,46,0)
(90,111,0)
(34,31,0)
(160,17,0)
(18,111,0)
(12,85,0)
(61,36,0)
(123,26,0)
(149,129,0)
(162,147,0)
(133,70,1)
(30,86,1)
(46,153,1)
(152,75,1)
(16,113,1)
(50,150,1)
(35,66,1)
(30,155,1)
(25,1,1)
(51,10,1)
(157,92,1)
(8,55,1)
(23,7,1)
(106,123,1)
(22,8,1)
(102,160,1)
(96,157,1)
(53,80,1)
(43,107,1)
(103,106,1)
(89,118,1)
(137,149,1)
(15,155,1)
(153,155,1)
(149,112,1)
(144,108,1)
(87,19,1)
(54,93,1)
(10,23,1)
(132,36,1)
(80,78,1)
(129,149,1)
(77,133,1)
(61,114,1)
(140,4,1)
(153,33,1)
(74,2,1)
(108,83,1)
(159,24,1)
(42,141,1)
(93,109,1)
(117,17,1)
(36,61,1)
(97,62,1)
(130,63,1)
(65,136,1)
(62,155,1)
(160,117,1)
(2,100,1)
(141,161,1)
(151,12,1)
(45,151,1)
(26,143,1)
(116,1,1)
(110,87,1)
(3,129,1)
(58,32,1)
(75,13,1)
(5,132,1)
(55,142,1)
(91,31,1)
(12,119,1)
(104,76,1)
(121,118,1)
(152,103,1)
(109,116,1)
(156,158,1)
(112,53,1)
(63,85,1)
(86,63,1)
(62,122,1)
(72,130,1)
(153,156,1)
(150,77,1)
(37,47,1)
(118,38,1)
(52,44,1)
(124,134,1)
(105,11,1)
(116,105,1)
(94,100,1)
(69,36,1)
(15,74,1)
(19,82,1)
(153,50,1)
(156,55,1)
(101,26,1)
(13,108,1)
(103,26,1)
(41,27,1)
(71,60,1)
(153,21,1)
(31,34,1)
(16,27,1)
(32,109,1)
(28,159,1)
(51,85,1)
(134,54,1)
(27,69,1)
(85,68,1)
(80,52,1)
(100,71,1)
(38,57,1)
(161,3,1)
(9,33,1)
(138,48,1)
(161,50,1)
(34,118,1)
(11,41,1)
(84,140,1)
(146,73,1)
(127,83,1)
(44,0,1)
(33,51,1)
(70,3,1)
(147,162,1)
(57,148,1)
(78,52,1)
(152,94,1)
(83,37,1)
(152,16,1)
(75,97,1)
(154,127,1)
(94,66,1)
(13,97,1)
(60,35,1)
(14,55,1)
(4,110,1)
(93,58,1)
(12,85,1)
(36,85,1)
(114,139,1)
(20,101,1)
(119,128,1)
(17,65,1)
(153,0,1)
(21,156,1)
(125,81,1)
(82,72,1)
(153,31,1)
(69,5,1)
(122,144,1)
(109,96,1)
(94,30,1)
(157,43,1)
(0,125,1)
(34,121,1)
(59,134,1)
(123,20,1)
(3,80,1)
(160,17,1)
(123,26,1)
(88,25,1)
(34,89,1)
(75,46,1)
(118,57,1)
(24,42,1)
(142,91,1)
(66,39,1)
(63,104,1)
(143,67,1)
(150,0,1)
(96,160,1)
(113,41,1)
(1,15,1)
(67,84,1)
(68,6,1)
(158,28,1)
(162,146,1)
(139,85,1)
(73,124,1)
(107,102,1)
(47,46,1)
(19,72,1)
(128,9,1)
(45,12,1)
(108,14,1)
(48,27,1)
(7,123,1)
(83,46,1)
(39,138,1)
(72,85,1)
(39,115,1)
(41,22,1)
(14,154,1)
(76,59,1)
(136,116,1)
(71,145,1)
(129,137,1)
(92,43,1)
(125,45,1)
(148,88,1)
(59,147,1)
(36,85,2)
(69,5,2)
(30,155,2)
(43,160,2)
(150,0,2)
(50,150,2)
(97,62,2)
(140,63,2)
(101,63,2)
(19,72,2)
(51,123,2)
(152,75,2)
(59,41,2)
(103,26,2)
(41,27,2)
(51,85,2)
(144,108,2)
(157,43,2)
(12,85,2)
(117,116,2)
(23,123,2)
(147,162,2)
(123,26,2)
(62,155,2)
(0,125,2)
(83,123,2)
(82,63,2)
(71,145,2)
(116,41,2)
(158,123,2)
(107,160,2)
(42,123,2)
(58,109,2)
(150,3,2)
(31,34,2)
(153,0,2)
(122,108,2)
(16,41,2)
(7,123,2)
(121,118,2)
(27,69,2)
(141,123,2)
(24,123,2)
(62,108,2)
(44,123,2)
(75,46,2)
(14,83,2)
(92,160,2)
(72,63,2)
(14,55,2)
(72,85,2)
(110,63,2)
(146,134,2)
(47,123,2)
(161,123,2)
(33,51,2)
(94,66,2)
(28,123,2)
(52,123,2)
(156,55,2)
(46,123,2)
(157,160,2)
(75,123,2)
(39,115,2)
(160,17,2)
(63,85,2)
(45,123,2)
(100,71,2)
(124,134,2)
(153,50,2)
(109,96,2)
(123,63,2)
(149,80,2)
(86,63,2)
(118,57,2)
(12,123,2)
(4,63,2)
(159,123,2)
(129,149,2)
(96,157,2)
(153,31,2)
(34,118,2)
(26,63,2)
(125,45,2)
(83,46,2)
(152,103,2)
(127,83,2)
(15,155,2)
(11,41,2)
(162,134,2)
(32,109,2)
(17,116,2)
(154,83,2)
(70,3,2)
(97,108,2)
(108,83,2)
(26,143,2)
(65,116,2)
(3,129,2)
(152,94,2)
(116,1,2)
(153,33,2)
(108,123,2)
(94,100,2)
(160,116,2)
(77,3,2)
(103,123,2)
(94,63,2)
(129,80,2)
(33,123,2)
(96,116,2)
(20,63,2)
(153,156,2)
(113,41,2)
(112,80,2)
(3,80,2)
(46,153,2)
(69,36,2)
(54,41,2)
(143,63,2)
(156,123,2)
(109,116,2)
(75,97,2)
(63,41,2)
(102,160,2)
(19,63,2)
(50,3,2)
(134,41,2)
(96,160,2)
(37,123,2)
(53,80,2)
(80,123,2)
(87,63,2)
(16,27,2)
(3,123,2)
(105,41,2)
(153,155,2)
(152,16,2)
(13,123,2)
(153,123,2)
(78,123,2)
(80,52,2)
(76,41,2)
(84,63,2)
(109,41,2)
(151,123,2)
(0,123,2)
(108,14,2)
(137,80,2)
(45,12,2)
(125,123,2)
(30,63,2)
(10,123,2)
(136,116,2)
(73,134,2)
(67,63,2)
(93,41,2)
(66,39,2)
(119,123,2)
(128,123,2)
(125,81,2)
(106,123,2)
(104,41,2)
(9,123,2)
(89,118,2)
(21,123,2)
(130,63,2)
(147,134,2)
(133,3,2)
(1,15,2)
-----------------------------------
(0,glyph_index = (uint)
(1,*penum = op_show_find(i_ctx_p)
(2,penum)
(3,gs_rootfont(igs)
(4,code)
(5,&pfont)
(6,op)
(7,cnref)
(8,code)
(9,glyph_index)
(10,1)
(11,penum)
(12,op->value)
(13,code)
(14,exec_cont != 0)
(15,op_show_find(i_ctx_p)
(16,return code;)
(17,pfont->FontType)
(18,penum)
(19,check_type(*op, t_integer)
(20,0)
(21,true)
(22,0)
(23,op)
(24,cnref)
(25,cont)
(26,code = gs_moveto(igs, 0.0, 0.0)
(27,code = font_param(op - 3, &pfont)
(28,cont)
(29,pfont)
(30,zchar_exec_char_proc(i_ctx_p)
(31,cont = (pbfont->PaintType == 0 ? type42_fill : type42_stroke)
(32,e_undefined)
(33,cnref = op - 1)
(34,pbfont->PaintType == 0 ? type42_fill : type42_stroke)
(35,pfont42)
(36,op - 3)
(37,0)
(38,0)
(39,(gs_font_base *)
(40,if (code < 0)
(41,code < 0)
(42,pbfont)
(43,pfont->FontType)
(44,igs)
(45,op->value.intval)
(46,code = zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true)
(47,code)
(48,pbfont)
(49,if (code < 0)
(50,glyph_index = gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
(51,op - 1)
(52,gs_rootfont(igs)
(53,pfont42)
(54,PaintType)
(55,exec_cont = 0)
(56,code)
(57,pbfont->PaintType)
(58,return_error(e_undefined)
(59,3)
(60,pfont)
(61,3)
(62,(*exec_cont)
(63,r_is_proc(op)
(64,cnref)
(65,FontType)
(66,pbfont = (gs_font_base *)
(67,0.0)
(68,osp)
(69,font_param(op - 3, &pfont)
(70,glyph_index)
(71,(gs_font_type42 *)
(72,*op)
(73,pfont)
(74,i_ctx_p)
(75,return code;)
(76,check_estack(3)
(77,glyph_index)
(78,WMode)
(79,exec_cont)
(80,gs_rootfont(igs)
(81,uint)
(82,t_integer)
(83,code >= 0)
(84,0.0)
(85,op = osp)
(86,i_ctx_p)
(87,3)
(88,pbfont)
(89,type42_stroke)
(90,if (r_is_proc(op)
(91,exec_cont)
(92,ft_CID_TrueType)
(93,pfont)
(94,return zchar_exec_char_proc(i_ctx_p)
(95,cont)
(96,pfont->FontType != ft_TrueType &&\n\\n\\t pfont->FontType != ft_CID_TrueType)
(97,code = (*exec_cont)
(98,if (penum == 0 ||\n\\n\\t(pfont->FontType != ft_TrueType &&\n\\n\\t pfont->FontType != ft_CID_TrueType)
(99,if (pfont->PaintType)
(100,pfont42 = (gs_font_type42 *)
(101,code)
(102,pfont)
(103,return code;)
(104,op)
(105,0)
(106,code)
(107,FontType)
(108,code >= 0 && exec_cont != 0)
(109,penum == 0 ||\n\\n\\t(pfont->FontType != ft_TrueType &&\n\\n\\t pfont->FontType != ft_CID_TrueType)
(110,check_ostack(3)
(111,)
(112,data)
(113,code)
(114,op)
(115,gs_font_base *)
(116,penum == 0)
(117,ft_TrueType)
(118,pbfont->PaintType == 0)
(119,value)
(120,if (gs_rootfont(igs)
(121,type42_fill)
(122,i_ctx_p)
(123,code < 0)
(124,igs)
(125,(uint)
(126,op)
(127,exec_cont)
(128,op)
(129,pfont42->data.gsub_size)
(130,op)
(131,if (code >= 0 && exec_cont != 0)
(132,pfont)
(133,pfont42)
(134,pfont->PaintType)
(135,glyph_index)
(136,pfont)
(137,gsub_size)
(138,pfont)
(139,code)
(140,igs)
(141,i_ctx_p)
(142,0)
(143,gs_moveto(igs, 0.0, 0.0)
(144,code)
(145,gs_font_type42 *)
(146,StrokeWidth)
(147,gs_setlinewidth(igs, pfont->StrokeWidth)
(148,PaintType)
(149,pfont42->data)
(150,gs_type42_substitute_glyph_index_vertical(pfont42, glyph_index)
(151,intval)
(152,RET)
(153,zchar42_set_cache(i_ctx_p, pbfont, cnref, glyph_index, cont, &exec_cont, true)
(154,0)
(155,i_ctx_t *i_ctx_p)
(156,&exec_cont)
(157,pfont->FontType != ft_CID_TrueType)
(158,exec_cont)
(159,glyph_index)
(160,pfont->FontType != ft_TrueType)
(161,code)
(162,pfont->StrokeWidth)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^