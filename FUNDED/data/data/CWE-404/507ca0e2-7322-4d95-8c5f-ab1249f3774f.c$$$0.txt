-----label-----
0
-----code-----
static struct dma_async_tx_descriptor *
rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,
			unsigned int sg_len, enum dma_transfer_direction dir,
			unsigned long flags, void *context)
{
	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
	dma_addr_t dev_addr;

	/* Someone calling slave DMA on a generic channel? */
	if (rchan->mid_rid < 0 || !sg_len) {
		dev_warn(chan->device->dev,
			 "%s: bad parameter: len=%d, id=%d\n",
			 __func__, sg_len, rchan->mid_rid);
		return NULL;
	}

	dev_addr = dir == DMA_DEV_TO_MEM
		 ? rchan->src_slave_addr : rchan->dst_slave_addr;
	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,
				      dir, flags, false);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
21,22
23,24
23,25
24,25
26,27
28,29
28,30
30,31
32,33
32,34
34,35
34,36
37,38
37,39
37,40
37,41
37,42
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
65,66
66,67
68,69
68,70
69,70
70,71
70,72
70,73
70,74
70,75
70,76
71,72
73,74
73,75
74,75
74,76
75,76
80,81
82,83
84,85
84,86
85,86
88,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
95,98
96,97
96,98
97,98
99,100
101,102
101,103
102,103
105,106
105,107
106,107
109,110
110,111
110,112
110,113
110,114
110,115
110,116
110,117
110,118
111,112
113,114
115,116
117,118
119,120
121,122
123,124
-----nextToken-----
3,5,6,9,11,12,15,17,18,20,22,25,27,29,31,33,35,36,41,43,44,48,50,54,56,62,63,64,67,72,76,77,78,79,81,83,86,87,90,94,98,100,103,104,107,108,112,114,116,118,120,122,124,125
-----computeFrom-----
58,59
58,60
59,60
59,61
92,93
92,94
96,97
96,98
-----guardedBy-----
62,86
63,87
67,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static struct dma_async_tx_descriptor *rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,			unsigned int sg_len, enum dma_transfer_direction dir,			unsigned long flags, void *context){	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);	dma_addr_t dev_addr;	/* Someone calling slave DMA on a generic channel? */	if (rchan->mid_rid < 0 || !sg_len) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}	dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr;	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false);}
static struct dma_async_tx_descriptor
dma_async_tx_descriptor
*rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,			unsigned int sg_len, enum dma_transfer_direction dir,			unsigned long flags, void *context)
*
rcar_dmac_prep_slave_sg
struct dma_chan *chan
struct dma_chan
dma_chan
*chan
*
chan
struct scatterlist *sgl
struct scatterlist
scatterlist
*sgl
*
sgl
unsigned int sg_len
unsigned int
sg_len
sg_len
enum dma_transfer_direction dir
enum dma_transfer_direction
dma_transfer_direction
dir
dir
unsigned long flags
unsigned long
flags
flags
void *context
void
*context
*
context
{	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);	dma_addr_t dev_addr;	/* Someone calling slave DMA on a generic channel? */	if (rchan->mid_rid < 0 || !sg_len) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}	dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr;	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false);}
struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
struct rcar_dmac_chan
rcar_dmac_chan
*rchan = to_rcar_dmac_chan(chan)
*
rchan
= to_rcar_dmac_chan(chan)
to_rcar_dmac_chan(chan)
to_rcar_dmac_chan
to_rcar_dmac_chan
chan
chan
dma_addr_t dev_addr;
dma_addr_t dev_addr;
dma_addr_t
dma_addr_t
dev_addr
dev_addr
if (rchan->mid_rid < 0 || !sg_len) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}
rchan->mid_rid < 0 || !sg_len
rchan->mid_rid < 0
rchan->mid_rid
rchan
rchan
mid_rid
0
!sg_len
sg_len
sg_len
{		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}
dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);
dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid)
dev_warn
dev_warn
chan->device->dev
chan->device
chan
chan
device
dev
"%s: bad parameter: len=%d, id=%d\n"
__func__
__func__
sg_len
sg_len
rchan->mid_rid
rchan
rchan
mid_rid
return NULL;
NULL
NULL
dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr;
dev_addr = dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr
dev_addr
dev_addr
dir == DMA_DEV_TO_MEM		 ? rchan->src_slave_addr : rchan->dst_slave_addr
dir == DMA_DEV_TO_MEM
dir
dir
DMA_DEV_TO_MEM
DMA_DEV_TO_MEM
rchan->src_slave_addr
rchan
rchan
src_slave_addr
rchan->dst_slave_addr
rchan
rchan
dst_slave_addr
return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false);
rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,				      dir, flags, false)
rcar_dmac_chan_prep_sg
rcar_dmac_chan_prep_sg
rchan
rchan
sgl
sgl
sg_len
sg_len
dev_addr
dev_addr
dir
dir
flags
flags
false
-----joern-----
(32,47,0)
(34,1,0)
(15,46,0)
(1,21,0)
(20,27,0)
(32,57,0)
(17,1,0)
(1,17,0)
(14,5,0)
(20,30,0)
(1,34,0)
(45,10,0)
(49,41,0)
(1,57,0)
(50,20,0)
(10,46,0)
(10,44,0)
(35,41,0)
(41,49,0)
(25,8,0)
(37,44,0)
(43,32,0)
(54,10,0)
(20,29,0)
(41,5,0)
(28,1,0)
(3,46,0)
(20,57,0)
(47,38,0)
(12,1,0)
(2,17,0)
(0,21,0)
(36,0,0)
(26,14,0)
(6,34,0)
(49,8,0)
(23,54,0)
(33,11,0)
(17,49,0)
(39,1,0)
(18,8,0)
(20,31,0)
(20,49,0)
(44,49,0)
(22,20,0)
(52,20,0)
(7,14,0)
(4,49,0)
(55,8,0)
(38,11,0)
(11,49,0)
(47,32,0)
(53,20,0)
(38,47,0)
(42,11,0)
(9,45,0)
(19,17,0)
(36,27,0)
(13,0,0)
(51,44,0)
(56,20,0)
(10,45,0)
(46,10,0)
(10,54,0)
(40,20,0)
(11,38,0)
(45,8,0)
(24,20,0)
(27,8,0)
(48,38,0)
(14,34,0)
(34,14,0)
(20,45,0)
(16,54,0)
(54,30,0)
(44,10,0)
(46,49,0)
(1,17,1)
(46,3,1)
(20,52,1)
(13,1,1)
(38,11,1)
(6,14,1)
(23,9,1)
(9,47,1)
(20,57,1)
(11,42,1)
(20,30,1)
(22,53,1)
(38,48,1)
(44,49,1)
(27,20,1)
(20,49,1)
(41,35,1)
(37,54,1)
(34,6,1)
(26,7,1)
(40,24,1)
(36,0,1)
(32,43,1)
(32,57,1)
(20,29,1)
(10,46,1)
(36,27,1)
(17,49,1)
(17,19,1)
(15,54,1)
(20,31,1)
(34,14,1)
(39,12,1)
(44,51,1)
(41,5,1)
(51,37,1)
(28,34,1)
(10,44,1)
(56,45,1)
(47,38,1)
(43,38,1)
(2,39,1)
(42,33,1)
(1,34,1)
(7,47,1)
(16,23,1)
(1,57,1)
(19,2,1)
(14,5,1)
(46,49,1)
(0,13,1)
(52,40,1)
(50,22,1)
(49,41,1)
(11,49,1)
(20,45,1)
(48,11,1)
(12,28,1)
(54,16,1)
(14,26,1)
(35,4,1)
(47,32,1)
(24,50,1)
(10,54,1)
(45,10,1)
(54,30,1)
(53,56,1)
(33,49,1)
(3,15,1)
(56,47,2)
(40,47,2)
(34,14,2)
(45,10,2)
(23,47,2)
(1,17,2)
(54,47,2)
(14,5,2)
(37,54,2)
(13,47,2)
(15,54,2)
(20,29,2)
(10,54,2)
(53,47,2)
(51,54,2)
(38,11,2)
(36,27,2)
(22,47,2)
(20,30,2)
(20,47,2)
(28,47,2)
(47,32,2)
(20,57,2)
(36,0,2)
(32,38,2)
(49,41,2)
(41,5,2)
(24,47,2)
(43,38,2)
(14,47,2)
(39,47,2)
(52,47,2)
(50,47,2)
(47,38,2)
(16,47,2)
(3,54,2)
(6,47,2)
(10,46,2)
(2,47,2)
(20,45,2)
(46,49,2)
(1,47,2)
(19,47,2)
(9,47,2)
(45,47,2)
(20,31,2)
(32,57,2)
(27,47,2)
(20,49,2)
(44,54,2)
(11,49,2)
(44,49,2)
(17,49,2)
(1,57,2)
(12,47,2)
(7,47,2)
(17,47,2)
(26,47,2)
(34,47,2)
(54,30,2)
(10,47,2)
(0,47,2)
(10,44,2)
(1,34,2)
(46,54,2)
-----------------------------------
(0,return NULL;)
(1,dev_warn(chan->device->dev,\n\\n\\t\\t\\t "%s: bad parameter: len=%d, id=%d\\n",\n\\n\\t\\t\\t __func__, sg_len, rchan->mid_rid)
(2,rchan)
(3,dst_slave_addr)
(4,rchan)
(5,struct dma_chan *chan)
(6,dev)
(7,chan)
(8,)
(9,dev_addr)
(10,dir == DMA_DEV_TO_MEM\n\\n\\t\\t ? rchan->src_slave_addr : rchan->dst_slave_addr)
(11,rchan->mid_rid)
(12,__func__)
(13,NULL)
(14,chan->device)
(15,rchan)
(16,DMA_DEV_TO_MEM)
(17,rchan->mid_rid)
(18,dev_addr)
(19,mid_rid)
(20,rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,\n\\n\\t\\t\\t\\t      dir, flags, false)
(21,)
(22,sg_len)
(23,dir)
(24,dir)
(25,if (rchan->mid_rid < 0 || !sg_len)
(26,device)
(27,return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, dev_addr,\n\\n\\t\\t\\t\\t      dir, flags, false)
(28,"%s: bad parameter: len=%d, id=%d\\n")
(29,unsigned long flags)
(30,enum dma_transfer_direction dir)
(31,struct scatterlist *sgl)
(32,!sg_len)
(33,rchan)
(34,chan->device->dev)
(35,chan)
(36,RET)
(37,rchan)
(38,rchan->mid_rid < 0)
(39,sg_len)
(40,flags)
(41,to_rcar_dmac_chan(chan)
(42,mid_rid)
(43,sg_len)
(44,rchan->src_slave_addr)
(45,dev_addr = dir == DMA_DEV_TO_MEM\n\\n\\t\\t ? rchan->src_slave_addr : rchan->dst_slave_addr)
(46,rchan->dst_slave_addr)
(47,rchan->mid_rid < 0 || !sg_len)
(48,0)
(49,*rchan = to_rcar_dmac_chan(chan)
(50,dev_addr)
(51,src_slave_addr)
(52,false)
(53,sgl)
(54,dir == DMA_DEV_TO_MEM)
(55,rchan)
(56,rchan)
(57,unsigned int sg_len)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^