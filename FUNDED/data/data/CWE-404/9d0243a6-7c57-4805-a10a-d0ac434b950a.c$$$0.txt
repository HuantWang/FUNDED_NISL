-----label-----
0
-----code-----
static void init_cyrix(struct cpuinfo_x86 *c)
{
	unsigned char dir0, dir0_msn, dir0_lsn, dir1 = 0;
	char *buf = c->x86_model_id;
	const char *p = NULL;

	/*
	 * Bit 31 in normal CPUID used for nonstandard 3DNow ID;
	 * 3DNow is IDd by bit 31 in extended CPUID (1*32+31) anyway
	 */
	clear_cpu_cap(c, 0*32+31);

	/* Cyrix used bit 24 in extended (AMD) CPUID for Cyrix MMX extensions */
	if (test_cpu_cap(c, 1*32+24)) {
		clear_cpu_cap(c, 1*32+24);
		set_cpu_cap(c, X86_FEATURE_CXMMX);
	}

	do_cyrix_devid(&dir0, &dir1);

	check_cx686_slop(c);

	Cx86_dir0_msb = dir0_msn = dir0 >> 4; /* identifies CPU "family"   */
	dir0_lsn = dir0 & 0xf;                /* model or clock multiplier */

	/* common case step number/rev -- exceptions handled below */
	c->x86_model = (dir1 >> 4) + 1;
	c->x86_mask = dir1 & 0xf;

	/* Now cook; the original recipe is by Channing Corn, from Cyrix.
	 * We do the same thing for each generation: we work out
	 * the model, multiplier and stepping.  Black magic included,
	 * to make the silicon step/rev numbers match the printed ones.
	 */

	switch (dir0_msn) {
		unsigned char tmp;

	case 0: /* Cx486SLC/DLC/SRx/DRx */
		p = Cx486_name[dir0_lsn & 7];
		break;

	case 1: /* Cx486S/DX/DX2/DX4 */
		p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]
			: Cx486S_name[dir0_lsn & 3];
		break;

	case 2: /* 5x86 */
		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];
		p = Cx86_cb+2;
		break;

	case 3: /* 6x86/6x86L */
		Cx86_cb[1] = ' ';
		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];
		if (dir1 > 0x21) { /* 686L */
			Cx86_cb[0] = 'L';
			p = Cx86_cb;
			(c->x86_model)++;
		} else             /* 686 */
			p = Cx86_cb+1;
		/* Emulate MTRRs using Cyrix's ARRs. */
		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);
		/* 6x86's contain this bug */
		set_cpu_bug(c, X86_BUG_COMA);
		break;

	case 4: /* MediaGX/GXm or Geode GXM/GXLV/GX1 */
#ifdef CONFIG_PCI
	{
		u32 vendor, device;
		/*
		 * It isn't really a PCI quirk directly, but the cure is the
		 * same. The MediaGX has deep magic SMM stuff that handles the
		 * SB emulation. It throws away the fifo on disable_dma() which
		 * is wrong and ruins the audio.
		 *
		 *  Bug2: VSA1 has a wrap bug so that using maximum sized DMA
		 *  causes bad things. According to NatSemi VSA2 has another
		 *  bug to do with 'hlt'. I've not seen any boards using VSA2
		 *  and X doesn't seem to support it either so who cares 8).
		 *  VSA1 we work around however.
		 */

		printk(KERN_INFO "Working around Cyrix MediaGX virtual DMA bugs.\n");
		isa_dma_bridge_buggy = 2;

		/* We do this before the PCI layer is running. However we
		   are safe here as we know the bridge must be a Cyrix
		   companion and must be present */
		vendor = read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID);
		device = read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID);

		/*
		 *  The 5510/5520 companion chips have a funky PIT.
		 */
		if (vendor == PCI_VENDOR_ID_CYRIX &&
			(device == PCI_DEVICE_ID_CYRIX_5510 ||
					device == PCI_DEVICE_ID_CYRIX_5520))
			mark_tsc_unstable("cyrix 5510/5520 detected");
	}
#endif
		c->x86_cache_size = 16;	/* Yep 16K integrated cache thats it */

		/* GXm supports extended cpuid levels 'ala' AMD */
		if (c->cpuid_level == 2) {
			/* Enable cxMMX extensions (GX1 Datasheet 54) */
			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);

			/*
			 * GXm : 0x30 ... 0x5f GXm  datasheet 51
			 * GXlv: 0x6x          GXlv datasheet 54
			 *  ?  : 0x7x
			 * GX1 : 0x8x          GX1  datasheet 56
			 */
			if ((0x30 <= dir1 && dir1 <= 0x6f) ||
					(0x80 <= dir1 && dir1 <= 0x8f))
				geode_configure();
			return;
		} else { /* MediaGX */
			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';
			p = Cx86_cb+2;
			c->x86_model = (dir1 & 0x20) ? 1 : 2;
		}
		break;

	case 5: /* 6x86MX/M II */
		if (dir1 > 7) {
			dir0_msn++;  /* M II */
			/* Enable MMX extensions (App note 108) */
			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);
		} else {
			/* A 6x86MX - it has the bug. */
			set_cpu_bug(c, X86_BUG_COMA);
		}
		tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0;
		Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7];
		p = Cx86_cb+tmp;
		if (((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20))
			(c->x86_model)++;
		/* Emulate MTRRs using Cyrix's ARRs. */
		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);
		break;

	case 0xf:  /* Cyrix 486 without DEVID registers */
		switch (dir0_lsn) {
		case 0xd:  /* either a 486SLC or DLC w/o DEVID */
			dir0_msn = 0;
			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];
			break;

		case 0xe:  /* a 486S A step */
			dir0_msn = 0;
			p = Cx486S_name[0];
			break;
		}
		break;

	default:  /* unknown (shouldn't happen, we know everyone ;-) */
		dir0_msn = 7;
		break;
	}
	strcpy(buf, Cx86_model[dir0_msn & 7]);
	if (p)
		strcat(buf, p);
	return;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
12,13
13,14
13,15
13,16
13,17
13,18
15,16
17,18
19,20
21,22
21,23
23,24
25,26
26,27
26,28
28,29
28,30
28,31
31,32
32,33
32,34
33,34
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
46,49
47,48
49,50
51,52
51,53
52,53
52,54
56,57
56,58
57,58
57,59
57,60
58,59
60,61
62,63
62,64
63,64
63,65
67,68
67,69
68,69
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
75,77
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
92,93
94,95
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
110,112
111,112
114,115
115,116
115,117
116,117
118,119
118,120
119,120
122,123
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
130,131
130,132
131,132
135,136
136,137
136,138
137,138
137,139
138,139
141,142
141,143
142,143
145,146
145,147
146,147
148,149
148,150
148,151
148,152
148,153
148,154
148,155
148,156
148,157
148,158
148,159
148,160
148,161
148,162
148,163
148,164
148,165
148,166
148,167
148,168
148,169
148,170
148,171
148,172
148,173
148,174
148,175
148,176
148,177
148,178
148,179
148,180
148,181
148,182
148,183
148,184
149,150
150,151
150,152
152,153
154,155
156,157
157,158
157,159
158,159
160,161
160,162
161,162
163,164
163,165
164,165
168,169
170,171
171,172
171,173
172,173
174,175
174,176
174,177
175,176
176,177
176,178
177,178
180,181
180,182
181,182
183,184
183,185
184,185
187,188
187,189
188,189
190,191
190,192
191,192
195,196
197,198
198,199
198,200
199,200
199,201
200,201
203,204
203,205
204,205
206,207
206,208
207,208
210,211
211,212
211,213
212,213
214,215
214,216
215,216
219,220
221,222
222,223
222,224
223,224
223,225
224,225
228,229
229,230
229,231
230,231
230,232
231,232
234,235
234,236
235,236
237,238
237,239
238,239
241,242
241,243
241,244
242,243
242,244
243,244
246,247
246,248
246,249
247,248
248,249
248,250
249,250
249,251
250,251
254,255
255,256
255,257
256,257
258,259
260,261
261,262
262,263
263,264
263,265
264,265
267,268
268,269
268,270
269,270
271,272
271,273
272,273
275,276
276,277
276,278
276,279
277,278
279,280
281,282
283,284
284,285
284,286
284,287
285,286
287,288
289,290
292,293
294,295
295,296
295,297
296,297
296,298
297,298
301,302
301,303
301,304
302,303
302,304
303,304
303,305
304,305
308,309
308,310
308,311
309,310
310,311
310,312
310,313
311,312
313,314
315,316
315,317
316,317
316,318
317,318
319,320
322,323
322,324
323,324
323,325
324,325
325,326
325,327
326,327
326,328
328,329
330,331
330,332
331,332
334,335
335,336
335,337
336,337
336,338
338,339
340,341
340,342
341,342
344,345
345,346
346,347
349,350
349,351
349,352
350,351
351,352
351,353
352,353
352,354
353,354
356,357
356,358
356,359
357,358
358,359
358,360
359,360
364,365
365,366
365,367
366,367
368,369
368,370
369,370
372,373
373,374
373,375
374,375
374,376
375,376
378,379
378,380
378,381
379,380
380,381
380,382
381,382
387,388
389,390
389,391
389,392
390,391
390,392
391,392
394,395
394,396
395,396
396,397
397,398
399,400
400,401
400,402
400,403
401,402
403,404
405,406
405,407
406,407
406,408
407,408
409,410
412,413
413,414
414,415
414,416
414,417
415,416
417,418
419,420
421,422
422,423
422,424
423,424
425,426
425,427
425,428
426,427
427,428
427,429
428,429
429,430
430,431
430,432
431,432
434,435
434,436
435,436
440,441
441,442
441,443
442,443
442,444
443,444
445,446
447,448
447,449
448,449
450,451
450,452
451,452
454,455
455,456
455,457
456,457
458,459
458,460
459,460
461,462
463,464
463,465
464,465
464,466
465,466
466,467
466,468
467,468
468,469
468,470
469,470
473,474
474,475
474,476
475,476
476,477
476,478
477,478
481,482
482,483
483,484
484,485
484,486
485,486
488,489
489,490
489,491
489,492
490,491
492,493
494,495
497,498
499,500
499,501
500,501
502,503
502,504
502,505
502,506
502,507
502,508
502,509
502,510
503,504
505,506
506,507
506,508
507,508
510,511
511,512
511,513
512,513
514,515
514,516
515,516
517,518
518,519
518,520
518,521
519,520
524,525
526,527
527,528
527,529
528,529
531,532
532,533
532,534
533,534
535,536
535,537
536,537
542,543
543,544
543,545
544,545
548,549
549,550
549,551
549,552
550,551
552,553
554,555
554,556
555,556
557,558
557,559
558,559
561,562
561,563
562,563
564,565
565,566
565,567
565,568
566,567
568,569
570,571
-----nextToken-----
2,4,7,9,10,14,16,18,20,22,24,27,29,30,34,35,38,40,41,44,48,50,53,54,55,59,61,64,65,66,71,73,76,77,78,82,84,86,90,93,96,100,102,106,109,112,113,117,120,121,126,127,132,133,134,139,140,143,144,147,151,153,155,159,162,165,166,167,169,173,178,179,182,185,186,189,192,193,194,196,201,202,205,208,209,213,216,217,218,220,225,226,227,232,233,236,239,240,244,245,251,252,253,257,259,265,266,270,273,274,278,280,282,286,288,290,291,293,298,299,300,305,306,307,312,314,318,320,321,327,329,332,333,337,339,342,343,347,348,354,355,360,361,362,363,367,370,371,376,377,382,383,384,385,386,388,392,393,398,402,404,408,410,411,416,418,420,424,432,433,436,437,438,439,444,446,449,452,453,457,460,462,470,471,472,478,479,480,486,487,491,493,495,496,498,501,504,508,509,513,516,520,521,522,523,525,529,530,534,537,538,539,540,541,545,546,547,551,553,556,559,560,563,567,569,571,572
-----computeFrom-----
51,52
51,53
52,53
52,54
62,63
62,64
63,64
63,65
74,75
74,76
75,76
75,77
104,105
104,106
107,108
107,109
110,111
110,112
115,116
115,117
118,119
118,120
123,124
123,125
128,129
128,130
130,131
130,132
136,137
136,138
141,142
141,143
157,158
157,159
163,164
163,165
171,172
171,173
176,177
176,178
183,184
183,185
190,191
190,192
198,199
198,200
206,207
206,208
211,212
211,213
214,215
214,216
222,223
222,224
229,230
229,231
237,238
237,239
242,243
242,244
248,249
248,250
255,256
255,257
268,269
268,270
271,272
271,273
295,296
295,297
302,303
302,304
315,316
315,317
323,324
323,325
325,326
325,327
326,327
326,328
330,331
330,332
335,336
335,337
336,337
336,338
340,341
340,342
351,352
351,353
358,359
358,360
365,366
365,367
368,369
368,370
373,374
373,375
380,381
380,382
390,391
390,392
405,406
405,407
422,423
422,424
427,428
427,429
430,431
430,432
434,435
434,436
441,442
441,443
450,451
450,452
455,456
455,457
458,459
458,460
464,465
464,466
466,467
466,468
468,469
468,470
474,475
474,476
476,477
476,478
506,507
506,508
511,512
511,513
527,528
527,529
532,533
532,534
543,544
543,545
557,558
557,559
-----guardedBy-----
-----guardedByNegation-----
305,376
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;
-----ast_node-----
static void init_cyrix(struct cpuinfo_x86 *c){	unsigned char dir0, dir0_msn, dir0_lsn, dir1 = 0;	char *buf = c->x86_model_id;	const char *p = NULL;	/*	 * Bit 31 in normal CPUID used for nonstandard 3DNow ID;	 * 3DNow is IDd by bit 31 in extended CPUID (1*32+31) anyway	 */	clear_cpu_cap(c, 0*32+31);	/* Cyrix used bit 24 in extended (AMD) CPUID for Cyrix MMX extensions */	if (test_cpu_cap(c, 1*32+24)) {		clear_cpu_cap(c, 1*32+24);		set_cpu_cap(c, X86_FEATURE_CXMMX);	}	do_cyrix_devid(&dir0, &dir1);	check_cx686_slop(c);	Cx86_dir0_msb = dir0_msn = dir0 >> 4; /* identifies CPU "family"   */	dir0_lsn = dir0 & 0xf;                /* model or clock multiplier */	/* common case step number/rev -- exceptions handled below */	c->x86_model = (dir1 >> 4) + 1;	c->x86_mask = dir1 & 0xf;	/* Now cook; the original recipe is by Channing Corn, from Cyrix.	 * We do the same thing for each generation: we work out	 * the model, multiplier and stepping.  Black magic included,	 * to make the silicon step/rev numbers match the printed ones.	 */	switch (dir0_msn) {		unsigned char tmp;	case 0: /* Cx486SLC/DLC/SRx/DRx */		p = Cx486_name[dir0_lsn & 7];		break;	case 1: /* Cx486S/DX/DX2/DX4 */		p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3];		break;	case 2: /* 5x86 */		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		p = Cx86_cb+2;		break;	case 3: /* 6x86/6x86L */		Cx86_cb[1] = ' ';		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		if (dir1 > 0x21) { /* 686L */			Cx86_cb[0] = 'L';			p = Cx86_cb;			(c->x86_model)++;		} else             /* 686 */			p = Cx86_cb+1;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		/* 6x86's contain this bug */		set_cpu_bug(c, X86_BUG_COMA);		break;	case 4: /* MediaGX/GXm or Geode GXM/GXLV/GX1 */#ifdef CONFIG_PCI	{		u32 vendor, device;		/*		 * It isn't really a PCI quirk directly, but the cure is the		 * same. The MediaGX has deep magic SMM stuff that handles the		 * SB emulation. It throws away the fifo on disable_dma() which		 * is wrong and ruins the audio.		 *		 *  Bug2: VSA1 has a wrap bug so that using maximum sized DMA		 *  causes bad things. According to NatSemi VSA2 has another		 *  bug to do with 'hlt'. I've not seen any boards using VSA2		 *  and X doesn't seem to support it either so who cares 8).		 *  VSA1 we work around however.		 */		printk(KERN_INFO "Working around Cyrix MediaGX virtual DMA bugs.\n");		isa_dma_bridge_buggy = 2;		/* We do this before the PCI layer is running. However we		   are safe here as we know the bridge must be a Cyrix		   companion and must be present */		vendor = read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID);		device = read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID);		/*		 *  The 5510/5520 companion chips have a funky PIT.		 */		if (vendor == PCI_VENDOR_ID_CYRIX &&			(device == PCI_DEVICE_ID_CYRIX_5510 ||					device == PCI_DEVICE_ID_CYRIX_5520))			mark_tsc_unstable("cyrix 5510/5520 detected");	}#endif		c->x86_cache_size = 16;	/* Yep 16K integrated cache thats it */		/* GXm supports extended cpuid levels 'ala' AMD */		if (c->cpuid_level == 2) {			/* Enable cxMMX extensions (GX1 Datasheet 54) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);			/*			 * GXm : 0x30 ... 0x5f GXm  datasheet 51			 * GXlv: 0x6x          GXlv datasheet 54			 *  ?  : 0x7x			 * GX1 : 0x8x          GX1  datasheet 56			 */			if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();			return;		} else { /* MediaGX */			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';			p = Cx86_cb+2;			c->x86_model = (dir1 & 0x20) ? 1 : 2;		}		break;	case 5: /* 6x86MX/M II */		if (dir1 > 7) {			dir0_msn++;  /* M II */			/* Enable MMX extensions (App note 108) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);		} else {			/* A 6x86MX - it has the bug. */			set_cpu_bug(c, X86_BUG_COMA);		}		tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0;		Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7];		p = Cx86_cb+tmp;		if (((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20))			(c->x86_model)++;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		break;	case 0xf:  /* Cyrix 486 without DEVID registers */		switch (dir0_lsn) {		case 0xd:  /* either a 486SLC or DLC w/o DEVID */			dir0_msn = 0;			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];			break;		case 0xe:  /* a 486S A step */			dir0_msn = 0;			p = Cx486S_name[0];			break;		}		break;	default:  /* unknown (shouldn't happen, we know everyone ;-) */		dir0_msn = 7;		break;	}	strcpy(buf, Cx86_model[dir0_msn & 7]);	if (p)		strcat(buf, p);	return;}
static void
init_cyrix(struct cpuinfo_x86 *c)
init_cyrix
struct cpuinfo_x86 *c
struct cpuinfo_x86
cpuinfo_x86
*c
*
c
{	unsigned char dir0, dir0_msn, dir0_lsn, dir1 = 0;	char *buf = c->x86_model_id;	const char *p = NULL;	/*	 * Bit 31 in normal CPUID used for nonstandard 3DNow ID;	 * 3DNow is IDd by bit 31 in extended CPUID (1*32+31) anyway	 */	clear_cpu_cap(c, 0*32+31);	/* Cyrix used bit 24 in extended (AMD) CPUID for Cyrix MMX extensions */	if (test_cpu_cap(c, 1*32+24)) {		clear_cpu_cap(c, 1*32+24);		set_cpu_cap(c, X86_FEATURE_CXMMX);	}	do_cyrix_devid(&dir0, &dir1);	check_cx686_slop(c);	Cx86_dir0_msb = dir0_msn = dir0 >> 4; /* identifies CPU "family"   */	dir0_lsn = dir0 & 0xf;                /* model or clock multiplier */	/* common case step number/rev -- exceptions handled below */	c->x86_model = (dir1 >> 4) + 1;	c->x86_mask = dir1 & 0xf;	/* Now cook; the original recipe is by Channing Corn, from Cyrix.	 * We do the same thing for each generation: we work out	 * the model, multiplier and stepping.  Black magic included,	 * to make the silicon step/rev numbers match the printed ones.	 */	switch (dir0_msn) {		unsigned char tmp;	case 0: /* Cx486SLC/DLC/SRx/DRx */		p = Cx486_name[dir0_lsn & 7];		break;	case 1: /* Cx486S/DX/DX2/DX4 */		p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3];		break;	case 2: /* 5x86 */		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		p = Cx86_cb+2;		break;	case 3: /* 6x86/6x86L */		Cx86_cb[1] = ' ';		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		if (dir1 > 0x21) { /* 686L */			Cx86_cb[0] = 'L';			p = Cx86_cb;			(c->x86_model)++;		} else             /* 686 */			p = Cx86_cb+1;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		/* 6x86's contain this bug */		set_cpu_bug(c, X86_BUG_COMA);		break;	case 4: /* MediaGX/GXm or Geode GXM/GXLV/GX1 */#ifdef CONFIG_PCI	{		u32 vendor, device;		/*		 * It isn't really a PCI quirk directly, but the cure is the		 * same. The MediaGX has deep magic SMM stuff that handles the		 * SB emulation. It throws away the fifo on disable_dma() which		 * is wrong and ruins the audio.		 *		 *  Bug2: VSA1 has a wrap bug so that using maximum sized DMA		 *  causes bad things. According to NatSemi VSA2 has another		 *  bug to do with 'hlt'. I've not seen any boards using VSA2		 *  and X doesn't seem to support it either so who cares 8).		 *  VSA1 we work around however.		 */		printk(KERN_INFO "Working around Cyrix MediaGX virtual DMA bugs.\n");		isa_dma_bridge_buggy = 2;		/* We do this before the PCI layer is running. However we		   are safe here as we know the bridge must be a Cyrix		   companion and must be present */		vendor = read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID);		device = read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID);		/*		 *  The 5510/5520 companion chips have a funky PIT.		 */		if (vendor == PCI_VENDOR_ID_CYRIX &&			(device == PCI_DEVICE_ID_CYRIX_5510 ||					device == PCI_DEVICE_ID_CYRIX_5520))			mark_tsc_unstable("cyrix 5510/5520 detected");	}#endif		c->x86_cache_size = 16;	/* Yep 16K integrated cache thats it */		/* GXm supports extended cpuid levels 'ala' AMD */		if (c->cpuid_level == 2) {			/* Enable cxMMX extensions (GX1 Datasheet 54) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);			/*			 * GXm : 0x30 ... 0x5f GXm  datasheet 51			 * GXlv: 0x6x          GXlv datasheet 54			 *  ?  : 0x7x			 * GX1 : 0x8x          GX1  datasheet 56			 */			if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();			return;		} else { /* MediaGX */			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';			p = Cx86_cb+2;			c->x86_model = (dir1 & 0x20) ? 1 : 2;		}		break;	case 5: /* 6x86MX/M II */		if (dir1 > 7) {			dir0_msn++;  /* M II */			/* Enable MMX extensions (App note 108) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);		} else {			/* A 6x86MX - it has the bug. */			set_cpu_bug(c, X86_BUG_COMA);		}		tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0;		Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7];		p = Cx86_cb+tmp;		if (((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20))			(c->x86_model)++;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		break;	case 0xf:  /* Cyrix 486 without DEVID registers */		switch (dir0_lsn) {		case 0xd:  /* either a 486SLC or DLC w/o DEVID */			dir0_msn = 0;			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];			break;		case 0xe:  /* a 486S A step */			dir0_msn = 0;			p = Cx486S_name[0];			break;		}		break;	default:  /* unknown (shouldn't happen, we know everyone ;-) */		dir0_msn = 7;		break;	}	strcpy(buf, Cx86_model[dir0_msn & 7]);	if (p)		strcat(buf, p);	return;}
unsigned char dir0, dir0_msn, dir0_lsn, dir1 = 0;
unsigned char dir0, dir0_msn, dir0_lsn, dir1 = 0;
unsigned char
dir0
dir0
dir0_msn
dir0_msn
dir0_lsn
dir0_lsn
dir1 = 0
dir1
= 0
0
char *buf = c->x86_model_id;
char *buf = c->x86_model_id;
char
*buf = c->x86_model_id
*
buf
= c->x86_model_id
c->x86_model_id
c
c
x86_model_id
const char *p = NULL;
const char *p = NULL;
const char
*p = NULL
*
p
= NULL
NULL
NULL
clear_cpu_cap(c, 0*32+31);
clear_cpu_cap(c, 0*32+31)
clear_cpu_cap
clear_cpu_cap
c
c
0*32+31
0*32
0
32
31
if (test_cpu_cap(c, 1*32+24)) {		clear_cpu_cap(c, 1*32+24);		set_cpu_cap(c, X86_FEATURE_CXMMX);	}
test_cpu_cap(c, 1*32+24)
test_cpu_cap
test_cpu_cap
c
c
1*32+24
1*32
1
32
24
{		clear_cpu_cap(c, 1*32+24);		set_cpu_cap(c, X86_FEATURE_CXMMX);	}
clear_cpu_cap(c, 1*32+24);
clear_cpu_cap(c, 1*32+24)
clear_cpu_cap
clear_cpu_cap
c
c
1*32+24
1*32
1
32
24
set_cpu_cap(c, X86_FEATURE_CXMMX);
set_cpu_cap(c, X86_FEATURE_CXMMX)
set_cpu_cap
set_cpu_cap
c
c
X86_FEATURE_CXMMX
X86_FEATURE_CXMMX
do_cyrix_devid(&dir0, &dir1);
do_cyrix_devid(&dir0, &dir1)
do_cyrix_devid
do_cyrix_devid
&dir0
dir0
dir0
&dir1
dir1
dir1
check_cx686_slop(c);
check_cx686_slop(c)
check_cx686_slop
check_cx686_slop
c
c
Cx86_dir0_msb = dir0_msn = dir0 >> 4;
Cx86_dir0_msb = dir0_msn = dir0 >> 4
Cx86_dir0_msb
Cx86_dir0_msb
dir0_msn = dir0 >> 4
dir0_msn
dir0_msn
dir0 >> 4
dir0
dir0
4
dir0_lsn = dir0 & 0xf;
dir0_lsn = dir0 & 0xf
dir0_lsn
dir0_lsn
dir0 & 0xf
dir0
dir0
0xf
c->x86_model = (dir1 >> 4) + 1;
c->x86_model = (dir1 >> 4) + 1
c->x86_model
c
c
x86_model
(dir1 >> 4) + 1
(dir1 >> 4)
dir1 >> 4
dir1
dir1
4
1
c->x86_mask = dir1 & 0xf;
c->x86_mask = dir1 & 0xf
c->x86_mask
c
c
x86_mask
dir1 & 0xf
dir1
dir1
0xf
switch (dir0_msn) {		unsigned char tmp;	case 0: /* Cx486SLC/DLC/SRx/DRx */		p = Cx486_name[dir0_lsn & 7];		break;	case 1: /* Cx486S/DX/DX2/DX4 */		p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3];		break;	case 2: /* 5x86 */		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		p = Cx86_cb+2;		break;	case 3: /* 6x86/6x86L */		Cx86_cb[1] = ' ';		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		if (dir1 > 0x21) { /* 686L */			Cx86_cb[0] = 'L';			p = Cx86_cb;			(c->x86_model)++;		} else             /* 686 */			p = Cx86_cb+1;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		/* 6x86's contain this bug */		set_cpu_bug(c, X86_BUG_COMA);		break;	case 4: /* MediaGX/GXm or Geode GXM/GXLV/GX1 */#ifdef CONFIG_PCI	{		u32 vendor, device;		/*		 * It isn't really a PCI quirk directly, but the cure is the		 * same. The MediaGX has deep magic SMM stuff that handles the		 * SB emulation. It throws away the fifo on disable_dma() which		 * is wrong and ruins the audio.		 *		 *  Bug2: VSA1 has a wrap bug so that using maximum sized DMA		 *  causes bad things. According to NatSemi VSA2 has another		 *  bug to do with 'hlt'. I've not seen any boards using VSA2		 *  and X doesn't seem to support it either so who cares 8).		 *  VSA1 we work around however.		 */		printk(KERN_INFO "Working around Cyrix MediaGX virtual DMA bugs.\n");		isa_dma_bridge_buggy = 2;		/* We do this before the PCI layer is running. However we		   are safe here as we know the bridge must be a Cyrix		   companion and must be present */		vendor = read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID);		device = read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID);		/*		 *  The 5510/5520 companion chips have a funky PIT.		 */		if (vendor == PCI_VENDOR_ID_CYRIX &&			(device == PCI_DEVICE_ID_CYRIX_5510 ||					device == PCI_DEVICE_ID_CYRIX_5520))			mark_tsc_unstable("cyrix 5510/5520 detected");	}#endif		c->x86_cache_size = 16;	/* Yep 16K integrated cache thats it */		/* GXm supports extended cpuid levels 'ala' AMD */		if (c->cpuid_level == 2) {			/* Enable cxMMX extensions (GX1 Datasheet 54) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);			/*			 * GXm : 0x30 ... 0x5f GXm  datasheet 51			 * GXlv: 0x6x          GXlv datasheet 54			 *  ?  : 0x7x			 * GX1 : 0x8x          GX1  datasheet 56			 */			if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();			return;		} else { /* MediaGX */			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';			p = Cx86_cb+2;			c->x86_model = (dir1 & 0x20) ? 1 : 2;		}		break;	case 5: /* 6x86MX/M II */		if (dir1 > 7) {			dir0_msn++;  /* M II */			/* Enable MMX extensions (App note 108) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);		} else {			/* A 6x86MX - it has the bug. */			set_cpu_bug(c, X86_BUG_COMA);		}		tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0;		Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7];		p = Cx86_cb+tmp;		if (((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20))			(c->x86_model)++;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		break;	case 0xf:  /* Cyrix 486 without DEVID registers */		switch (dir0_lsn) {		case 0xd:  /* either a 486SLC or DLC w/o DEVID */			dir0_msn = 0;			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];			break;		case 0xe:  /* a 486S A step */			dir0_msn = 0;			p = Cx486S_name[0];			break;		}		break;	default:  /* unknown (shouldn't happen, we know everyone ;-) */		dir0_msn = 7;		break;	}
dir0_msn
dir0_msn
{		unsigned char tmp;	case 0: /* Cx486SLC/DLC/SRx/DRx */		p = Cx486_name[dir0_lsn & 7];		break;	case 1: /* Cx486S/DX/DX2/DX4 */		p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3];		break;	case 2: /* 5x86 */		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		p = Cx86_cb+2;		break;	case 3: /* 6x86/6x86L */		Cx86_cb[1] = ' ';		Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];		if (dir1 > 0x21) { /* 686L */			Cx86_cb[0] = 'L';			p = Cx86_cb;			(c->x86_model)++;		} else             /* 686 */			p = Cx86_cb+1;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		/* 6x86's contain this bug */		set_cpu_bug(c, X86_BUG_COMA);		break;	case 4: /* MediaGX/GXm or Geode GXM/GXLV/GX1 */#ifdef CONFIG_PCI	{		u32 vendor, device;		/*		 * It isn't really a PCI quirk directly, but the cure is the		 * same. The MediaGX has deep magic SMM stuff that handles the		 * SB emulation. It throws away the fifo on disable_dma() which		 * is wrong and ruins the audio.		 *		 *  Bug2: VSA1 has a wrap bug so that using maximum sized DMA		 *  causes bad things. According to NatSemi VSA2 has another		 *  bug to do with 'hlt'. I've not seen any boards using VSA2		 *  and X doesn't seem to support it either so who cares 8).		 *  VSA1 we work around however.		 */		printk(KERN_INFO "Working around Cyrix MediaGX virtual DMA bugs.\n");		isa_dma_bridge_buggy = 2;		/* We do this before the PCI layer is running. However we		   are safe here as we know the bridge must be a Cyrix		   companion and must be present */		vendor = read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID);		device = read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID);		/*		 *  The 5510/5520 companion chips have a funky PIT.		 */		if (vendor == PCI_VENDOR_ID_CYRIX &&			(device == PCI_DEVICE_ID_CYRIX_5510 ||					device == PCI_DEVICE_ID_CYRIX_5520))			mark_tsc_unstable("cyrix 5510/5520 detected");	}#endif		c->x86_cache_size = 16;	/* Yep 16K integrated cache thats it */		/* GXm supports extended cpuid levels 'ala' AMD */		if (c->cpuid_level == 2) {			/* Enable cxMMX extensions (GX1 Datasheet 54) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);			/*			 * GXm : 0x30 ... 0x5f GXm  datasheet 51			 * GXlv: 0x6x          GXlv datasheet 54			 *  ?  : 0x7x			 * GX1 : 0x8x          GX1  datasheet 56			 */			if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();			return;		} else { /* MediaGX */			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';			p = Cx86_cb+2;			c->x86_model = (dir1 & 0x20) ? 1 : 2;		}		break;	case 5: /* 6x86MX/M II */		if (dir1 > 7) {			dir0_msn++;  /* M II */			/* Enable MMX extensions (App note 108) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);		} else {			/* A 6x86MX - it has the bug. */			set_cpu_bug(c, X86_BUG_COMA);		}		tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0;		Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7];		p = Cx86_cb+tmp;		if (((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20))			(c->x86_model)++;		/* Emulate MTRRs using Cyrix's ARRs. */		set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);		break;	case 0xf:  /* Cyrix 486 without DEVID registers */		switch (dir0_lsn) {		case 0xd:  /* either a 486SLC or DLC w/o DEVID */			dir0_msn = 0;			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];			break;		case 0xe:  /* a 486S A step */			dir0_msn = 0;			p = Cx486S_name[0];			break;		}		break;	default:  /* unknown (shouldn't happen, we know everyone ;-) */		dir0_msn = 7;		break;	}
unsigned char tmp;
unsigned char tmp;
unsigned char
tmp
tmp
case 0:
0
p = Cx486_name[dir0_lsn & 7];
p = Cx486_name[dir0_lsn & 7]
p
p
Cx486_name[dir0_lsn & 7]
Cx486_name
Cx486_name
dir0_lsn & 7
dir0_lsn
dir0_lsn
7
break;
case 1:
1
p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3];
p = (dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3]
p
p
(dir0_lsn & 8) ? Cx486D_name[dir0_lsn & 5]			: Cx486S_name[dir0_lsn & 3]
(dir0_lsn & 8)
dir0_lsn & 8
dir0_lsn
dir0_lsn
8
Cx486D_name[dir0_lsn & 5]
Cx486D_name
Cx486D_name
dir0_lsn & 5
dir0_lsn
dir0_lsn
5
Cx486S_name[dir0_lsn & 3]
Cx486S_name
Cx486S_name
dir0_lsn & 3
dir0_lsn
dir0_lsn
3
break;
case 2:
2
Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];
Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5]
Cx86_cb[2]
Cx86_cb
Cx86_cb
2
cyrix_model_mult1[dir0_lsn & 5]
cyrix_model_mult1
cyrix_model_mult1
dir0_lsn & 5
dir0_lsn
dir0_lsn
5
p = Cx86_cb+2;
p = Cx86_cb+2
p
p
Cx86_cb+2
Cx86_cb
Cx86_cb
2
break;
case 3:
3
Cx86_cb[1] = ' ';
Cx86_cb[1] = ' '
Cx86_cb[1]
Cx86_cb
Cx86_cb
1
' '
Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5];
Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5]
Cx86_cb[2]
Cx86_cb
Cx86_cb
2
cyrix_model_mult1[dir0_lsn & 5]
cyrix_model_mult1
cyrix_model_mult1
dir0_lsn & 5
dir0_lsn
dir0_lsn
5
if (dir1 > 0x21) { /* 686L */			Cx86_cb[0] = 'L';			p = Cx86_cb;			(c->x86_model)++;		} else             /* 686 */			p = Cx86_cb+1;
dir1 > 0x21
dir1
dir1
0x21
{ /* 686L */			Cx86_cb[0] = 'L';			p = Cx86_cb;			(c->x86_model)++;		}
Cx86_cb[0] = 'L';
Cx86_cb[0] = 'L'
Cx86_cb[0]
Cx86_cb
Cx86_cb
0
'L'
p = Cx86_cb;
p = Cx86_cb
p
p
Cx86_cb
Cx86_cb
(c->x86_model)++;
(c->x86_model)++
(c->x86_model)
c->x86_model
c
c
x86_model
p = Cx86_cb+1;
p = Cx86_cb+1
p
p
Cx86_cb+1
Cx86_cb
Cx86_cb
1
set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);
set_cpu_cap(c, X86_FEATURE_CYRIX_ARR)
set_cpu_cap
set_cpu_cap
c
c
X86_FEATURE_CYRIX_ARR
X86_FEATURE_CYRIX_ARR
set_cpu_bug(c, X86_BUG_COMA);
set_cpu_bug(c, X86_BUG_COMA)
set_cpu_bug
set_cpu_bug
c
c
X86_BUG_COMA
X86_BUG_COMA
break;
case 4:
4
c->x86_cache_size = 16;
c->x86_cache_size = 16
c->x86_cache_size
c
c
x86_cache_size
16
if (c->cpuid_level == 2) {			/* Enable cxMMX extensions (GX1 Datasheet 54) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);			/*			 * GXm : 0x30 ... 0x5f GXm  datasheet 51			 * GXlv: 0x6x          GXlv datasheet 54			 *  ?  : 0x7x			 * GX1 : 0x8x          GX1  datasheet 56			 */			if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();			return;		} else { /* MediaGX */			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';			p = Cx86_cb+2;			c->x86_model = (dir1 & 0x20) ? 1 : 2;		}
c->cpuid_level == 2
c->cpuid_level
c
c
cpuid_level
2
{			/* Enable cxMMX extensions (GX1 Datasheet 54) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);			/*			 * GXm : 0x30 ... 0x5f GXm  datasheet 51			 * GXlv: 0x6x          GXlv datasheet 54			 *  ?  : 0x7x			 * GX1 : 0x8x          GX1  datasheet 56			 */			if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();			return;		}
setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1);
setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7) | 1)
setCx86_old
setCx86_old
CX86_CCR7
CX86_CCR7
getCx86_old(CX86_CCR7) | 1
getCx86_old(CX86_CCR7)
getCx86_old
getCx86_old
CX86_CCR7
CX86_CCR7
1
if ((0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f))				geode_configure();
(0x30 <= dir1 && dir1 <= 0x6f) ||					(0x80 <= dir1 && dir1 <= 0x8f)
(0x30 <= dir1 && dir1 <= 0x6f)
0x30 <= dir1 && dir1 <= 0x6f
0x30 <= dir1
0x30
dir1
dir1
dir1 <= 0x6f
dir1
dir1
0x6f
(0x80 <= dir1 && dir1 <= 0x8f)
0x80 <= dir1 && dir1 <= 0x8f
0x80 <= dir1
0x80
dir1
dir1
dir1 <= 0x8f
dir1
dir1
0x8f
geode_configure();
geode_configure()
geode_configure
geode_configure
return;
{ /* MediaGX */			Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';			p = Cx86_cb+2;			c->x86_model = (dir1 & 0x20) ? 1 : 2;		}
Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4';
Cx86_cb[2] = (dir0_lsn & 1) ? '3' : '4'
Cx86_cb[2]
Cx86_cb
Cx86_cb
2
(dir0_lsn & 1) ? '3' : '4'
(dir0_lsn & 1)
dir0_lsn & 1
dir0_lsn
dir0_lsn
1
'3'
'4'
p = Cx86_cb+2;
p = Cx86_cb+2
p
p
Cx86_cb+2
Cx86_cb
Cx86_cb
2
c->x86_model = (dir1 & 0x20) ? 1 : 2;
c->x86_model = (dir1 & 0x20) ? 1 : 2
c->x86_model
c
c
x86_model
(dir1 & 0x20) ? 1 : 2
(dir1 & 0x20)
dir1 & 0x20
dir1
dir1
0x20
1
2
break;
case 5:
5
if (dir1 > 7) {			dir0_msn++;  /* M II */			/* Enable MMX extensions (App note 108) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);		} else {			/* A 6x86MX - it has the bug. */			set_cpu_bug(c, X86_BUG_COMA);		}
dir1 > 7
dir1
dir1
7
{			dir0_msn++;  /* M II */			/* Enable MMX extensions (App note 108) */			setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);		}
dir0_msn++;
dir0_msn++
dir0_msn
dir0_msn
setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1);
setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)|1)
setCx86_old
setCx86_old
CX86_CCR7
CX86_CCR7
getCx86_old(CX86_CCR7)|1
getCx86_old(CX86_CCR7)
getCx86_old
getCx86_old
CX86_CCR7
CX86_CCR7
1
{			/* A 6x86MX - it has the bug. */			set_cpu_bug(c, X86_BUG_COMA);		}
set_cpu_bug(c, X86_BUG_COMA);
set_cpu_bug(c, X86_BUG_COMA)
set_cpu_bug
set_cpu_bug
c
c
X86_BUG_COMA
X86_BUG_COMA
tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0;
tmp = (!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0
tmp
tmp
(!(dir0_lsn & 7) || dir0_lsn & 1) ? 2 : 0
(!(dir0_lsn & 7) || dir0_lsn & 1)
!(dir0_lsn & 7) || dir0_lsn & 1
!(dir0_lsn & 7)
(dir0_lsn & 7)
dir0_lsn & 7
dir0_lsn
dir0_lsn
7
dir0_lsn & 1
dir0_lsn
dir0_lsn
1
2
0
Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7];
Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7]
Cx86_cb[tmp]
Cx86_cb
Cx86_cb
tmp
tmp
cyrix_model_mult2[dir0_lsn & 7]
cyrix_model_mult2
cyrix_model_mult2
dir0_lsn & 7
dir0_lsn
dir0_lsn
7
p = Cx86_cb+tmp;
p = Cx86_cb+tmp
p
p
Cx86_cb+tmp
Cx86_cb
Cx86_cb
tmp
tmp
if (((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20))			(c->x86_model)++;
((dir1 & 0x0f) > 4) || ((dir1 & 0xf0) == 0x20)
((dir1 & 0x0f) > 4)
(dir1 & 0x0f) > 4
(dir1 & 0x0f)
dir1 & 0x0f
dir1
dir1
0x0f
4
((dir1 & 0xf0) == 0x20)
(dir1 & 0xf0) == 0x20
(dir1 & 0xf0)
dir1 & 0xf0
dir1
dir1
0xf0
0x20
(c->x86_model)++;
(c->x86_model)++
(c->x86_model)
c->x86_model
c
c
x86_model
set_cpu_cap(c, X86_FEATURE_CYRIX_ARR);
set_cpu_cap(c, X86_FEATURE_CYRIX_ARR)
set_cpu_cap
set_cpu_cap
c
c
X86_FEATURE_CYRIX_ARR
X86_FEATURE_CYRIX_ARR
break;
case 0xf:
0xf
switch (dir0_lsn) {		case 0xd:  /* either a 486SLC or DLC w/o DEVID */			dir0_msn = 0;			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];			break;		case 0xe:  /* a 486S A step */			dir0_msn = 0;			p = Cx486S_name[0];			break;		}
dir0_lsn
dir0_lsn
{		case 0xd:  /* either a 486SLC or DLC w/o DEVID */			dir0_msn = 0;			p = Cx486_name[(cpu_has_fpu ? 1 : 0)];			break;		case 0xe:  /* a 486S A step */			dir0_msn = 0;			p = Cx486S_name[0];			break;		}
case 0xd:
0xd
dir0_msn = 0;
dir0_msn = 0
dir0_msn
dir0_msn
0
p = Cx486_name[(cpu_has_fpu ? 1 : 0)];
p = Cx486_name[(cpu_has_fpu ? 1 : 0)]
p
p
Cx486_name[(cpu_has_fpu ? 1 : 0)]
Cx486_name
Cx486_name
(cpu_has_fpu ? 1 : 0)
cpu_has_fpu ? 1 : 0
cpu_has_fpu
cpu_has_fpu
1
0
break;
case 0xe:
0xe
dir0_msn = 0;
dir0_msn = 0
dir0_msn
dir0_msn
0
p = Cx486S_name[0];
p = Cx486S_name[0]
p
p
Cx486S_name[0]
Cx486S_name
Cx486S_name
0
break;
break;
default:
dir0_msn = 7;
dir0_msn = 7
dir0_msn
dir0_msn
7
break;
strcpy(buf, Cx86_model[dir0_msn & 7]);
strcpy(buf, Cx86_model[dir0_msn & 7])
strcpy
strcpy
buf
buf
Cx86_model[dir0_msn & 7]
Cx86_model
Cx86_model
dir0_msn & 7
dir0_msn
dir0_msn
7
if (p)		strcat(buf, p);
p
p
strcat(buf, p);
strcat(buf, p)
strcat
strcat
buf
buf
p
p
return;
-----joern-----
(143,134,0)
(213,368,0)
(58,279,0)
(194,356,0)
(19,329,0)
(213,104,0)
(127,280,0)
(63,41,0)
(207,216,0)
(334,159,0)
(107,59,0)
(309,338,0)
(350,194,0)
(27,119,0)
(256,158,0)
(221,356,0)
(338,136,0)
(306,228,0)
(55,356,0)
(246,328,0)
(173,95,0)
(138,5,0)
(352,333,0)
(171,73,0)
(196,229,0)
(113,305,0)
(114,107,0)
(286,28,0)
(183,356,0)
(39,34,0)
(153,306,0)
(291,18,0)
(16,165,0)
(196,123,0)
(137,201,0)
(168,359,0)
(24,352,0)
(51,240,0)
(190,368,0)
(179,202,0)
(85,247,0)
(7,89,0)
(91,13,0)
(312,133,0)
(206,168,0)
(168,134,0)
(294,138,0)
(215,358,0)
(343,260,0)
(64,356,0)
(147,348,0)
(38,41,0)
(244,134,0)
(236,356,0)
(315,200,0)
(314,1,0)
(302,356,0)
(67,359,0)
(155,156,0)
(254,20,0)
(193,356,0)
(0,365,0)
(369,160,0)
(307,355,0)
(13,283,0)
(216,77,0)
(127,17,0)
(190,134,0)
(248,163,0)
(111,349,0)
(140,369,0)
(17,127,0)
(320,349,0)
(225,305,0)
(269,134,0)
(122,223,0)
(284,134,0)
(160,206,0)
(54,266,0)
(228,306,0)
(266,260,0)
(223,98,0)
(107,244,0)
(340,83,0)
(251,295,0)
(169,305,0)
(273,348,0)
(331,89,0)
(176,36,0)
(369,194,0)
(230,190,0)
(217,328,0)
(290,98,0)
(97,358,0)
(359,168,0)
(352,368,0)
(107,113,0)
(366,321,0)
(188,186,0)
(149,77,0)
(335,264,0)
(129,168,0)
(116,274,0)
(23,1,0)
(289,208,0)
(32,285,0)
(85,163,0)
(81,134,0)
(209,356,0)
(263,119,0)
(200,315,0)
(283,212,0)
(376,240,0)
(182,220,0)
(75,222,0)
(92,300,0)
(346,36,0)
(297,180,0)
(17,163,0)
(77,70,0)
(144,198,0)
(56,234,0)
(243,327,0)
(353,121,0)
(300,163,0)
(250,352,0)
(360,142,0)
(295,251,0)
(354,140,0)
(29,364,0)
(104,134,0)
(257,44,0)
(45,210,0)
(310,365,0)
(314,36,0)
(191,274,0)
(125,351,0)
(206,160,0)
(199,168,0)
(13,223,0)
(364,202,0)
(132,222,0)
(222,132,0)
(73,368,0)
(156,188,0)
(204,343,0)
(69,134,0)
(373,305,0)
(331,136,0)
(76,244,0)
(170,220,0)
(363,356,0)
(219,333,0)
(174,356,0)
(181,134,0)
(234,314,0)
(140,354,0)
(210,356,0)
(89,328,0)
(285,368,0)
(21,369,0)
(145,83,0)
(266,134,0)
(82,79,0)
(247,85,0)
(287,213,0)
(102,306,0)
(148,356,0)
(318,206,0)
(165,356,0)
(161,123,0)
(322,315,0)
(73,12,0)
(183,28,0)
(369,140,0)
(259,18,0)
(293,249,0)
(234,212,0)
(327,168,0)
(47,198,0)
(202,179,0)
(211,103,0)
(142,134,0)
(378,119,0)
(379,177,0)
(158,305,0)
(315,168,0)
(26,226,0)
(72,310,0)
(107,194,0)
(95,127,0)
(142,368,0)
(33,119,0)
(199,351,0)
(117,79,0)
(166,354,0)
(343,110,0)
(369,21,0)
(84,251,0)
(60,95,0)
(133,356,0)
(220,182,0)
(282,98,0)
(152,260,0)
(11,257,0)
(96,289,0)
(141,98,0)
(361,161,0)
(371,356,0)
(329,19,0)
(278,1,0)
(78,329,0)
(112,326,0)
(186,157,0)
(221,208,0)
(343,158,0)
(347,8,0)
(77,216,0)
(201,37,0)
(20,228,0)
(275,358,0)
(338,368,0)
(115,364,0)
(119,33,0)
(232,182,0)
(87,110,0)
(2,317,0)
(336,85,0)
(296,289,0)
(264,110,0)
(289,168,0)
(311,140,0)
(71,169,0)
(98,223,0)
(202,364,0)
(121,46,0)
(362,200,0)
(270,19,0)
(167,199,0)
(339,234,0)
(261,134,0)
(300,34,0)
(107,169,0)
(186,188,0)
(1,356,0)
(327,251,0)
(122,283,0)
(113,151,0)
(255,177,0)
(365,163,0)
(377,249,0)
(253,134,0)
(297,261,0)
(279,134,0)
(237,244,0)
(106,279,0)
(330,229,0)
(8,210,0)
(252,144,0)
(272,199,0)
(208,221,0)
(107,83,0)
(245,36,0)
(142,222,0)
(34,104,0)
(139,327,0)
(150,186,0)
(20,221,0)
(355,163,0)
(337,151,0)
(345,356,0)
(274,368,0)
(308,73,0)
(65,17,0)
(249,163,0)
(66,168,0)
(128,223,0)
(144,168,0)
(104,34,0)
(178,257,0)
(344,12,0)
(135,206,0)
(177,121,0)
(127,95,0)
(28,183,0)
(211,182,0)
(260,175,0)
(25,132,0)
(70,77,0)
(277,175,0)
(365,310,0)
(285,179,0)
(57,188,0)
(222,142,0)
(172,208,0)
(152,157,0)
(306,362,0)
(212,283,0)
(108,213,0)
(188,156,0)
(358,368,0)
(333,352,0)
(198,37,0)
(354,168,0)
(328,89,0)
(247,280,0)
(53,44,0)
(362,306,0)
(355,247,0)
(323,211,0)
(268,158,0)
(279,58,0)
(295,356,0)
(66,362,0)
(107,295,0)
(107,333,0)
(313,356,0)
(375,228,0)
(14,285,0)
(187,295,0)
(218,354,0)
(159,168,0)
(367,344,0)
(101,356,0)
(357,183,0)
(33,169,0)
(358,97,0)
(99,260,0)
(351,125,0)
(260,266,0)
(229,196,0)
(121,177,0)
(22,97,0)
(118,305,0)
(226,317,0)
(107,183,0)
(18,368,0)
(380,28,0)
(36,314,0)
(4,305,0)
(31,356,0)
(341,344,0)
(95,163,0)
(333,134,0)
(41,356,0)
(205,85,0)
(200,362,0)
(162,133,0)
(179,46,0)
(62,356,0)
(189,329,0)
(44,374,0)
(276,356,0)
(238,332,0)
(262,359,0)
(343,348,0)
(182,211,0)
(106,163,0)
(194,369,0)
(107,121,0)
(280,247,0)
(227,1,0)
(374,310,0)
(125,356,0)
(120,356,0)
(124,33,0)
(6,351,0)
(364,163,0)
(86,122,0)
(74,145,0)
(223,1,0)
(281,331,0)
(105,21,0)
(159,317,0)
(362,66,0)
(298,338,0)
(15,70,0)
(224,21,0)
(233,134,0)
(195,134,0)
(203,144,0)
(208,289,0)
(180,103,0)
(280,127,0)
(133,368,0)
(145,228,0)
(264,134,0)
(94,26,0)
(79,356,0)
(107,19,0)
(344,163,0)
(93,202,0)
(292,132,0)
(18,356,0)
(37,46,0)
(231,122,0)
(348,305,0)
(100,66,0)
(299,175,0)
(40,314,0)
(50,356,0)
(303,356,0)
(226,356,0)
(59,123,0)
(214,355,0)
(42,13,0)
(192,356,0)
(271,1,0)
(283,122,0)
(198,144,0)
(251,327,0)
(83,356,0)
(79,368,0)
(61,107,0)
(89,331,0)
(343,41,0)
(37,198,0)
(52,138,0)
(351,199,0)
(228,356,0)
(326,368,0)
(48,26,0)
(126,66,0)
(160,369,0)
(324,321,0)
(229,104,0)
(257,163,0)
(301,315,0)
(130,58,0)
(49,70,0)
(304,20,0)
(342,145,0)
(34,300,0)
(21,168,0)
(83,145,0)
(68,326,0)
(44,257,0)
(310,374,0)
(265,113,0)
(110,264,0)
(12,134,0)
(169,33,0)
(175,260,0)
(213,108,0)
(197,343,0)
(317,226,0)
(151,113,0)
(184,356,0)
(274,165,0)
(110,343,0)
(264,333,0)
(163,134,0)
(247,355,0)
(109,98,0)
(321,161,0)
(229,368,0)
(3,365,0)
(239,160,0)
(319,356,0)
(9,103,0)
(241,23,0)
(288,36,0)
(279,106,0)
(372,59,0)
(235,59,0)
(164,152,0)
(267,8,0)
(12,344,0)
(138,368,0)
(88,202,0)
(283,13,0)
(317,159,0)
(370,229,0)
(185,163,0)
(325,300,0)
(131,17,0)
(80,106,0)
(316,201,0)
(30,151,0)
(258,198,0)
(216,368,0)
(331,368,0)
(240,125,0)
(242,213,0)
(146,23,0)
(349,163,0)
(212,234,0)
(10,159,0)
(326,104,0)
(374,44,0)
(171,308,1)
(335,174,1)
(247,85,1)
(44,257,1)
(21,168,1)
(65,247,1)
(112,68,1)
(232,220,1)
(216,77,1)
(190,230,1)
(323,97,1)
(41,38,1)
(100,126,1)
(272,6,1)
(77,70,1)
(223,98,1)
(13,91,1)
(138,294,1)
(142,222,1)
(151,30,1)
(75,132,1)
(326,112,1)
(122,86,1)
(297,261,1)
(369,140,1)
(229,370,1)
(369,160,1)
(27,263,1)
(280,247,1)
(107,295,1)
(146,241,1)
(118,169,1)
(89,7,1)
(149,70,1)
(324,349,1)
(135,239,1)
(285,368,1)
(142,368,1)
(327,243,1)
(297,180,1)
(335,148,1)
(204,197,1)
(85,336,1)
(107,333,1)
(351,199,1)
(137,316,1)
(346,176,1)
(114,154,1)
(266,260,1)
(353,37,1)
(22,358,1)
(174,295,1)
(182,232,1)
(144,168,1)
(295,251,1)
(217,246,1)
(294,52,1)
(21,224,1)
(140,354,1)
(344,163,1)
(206,318,1)
(101,118,1)
(258,144,1)
(14,121,1)
(150,152,1)
(116,191,1)
(249,377,1)
(211,182,1)
(113,151,1)
(191,332,1)
(166,311,1)
(104,34,1)
(317,159,1)
(25,360,1)
(334,2,1)
(92,326,1)
(124,71,1)
(262,67,1)
(273,147,1)
(375,138,1)
(170,323,1)
(132,292,1)
(379,255,1)
(72,365,1)
(198,47,1)
(279,58,1)
(101,43,1)
(310,365,1)
(307,211,1)
(281,216,1)
(265,348,1)
(335,50,1)
(243,139,1)
(283,122,1)
(180,90,1)
(94,48,1)
(7,328,1)
(285,32,1)
(355,214,1)
(261,154,1)
(315,322,1)
(163,248,1)
(320,111,1)
(121,177,1)
(97,358,1)
(366,324,1)
(19,329,1)
(198,258,1)
(188,156,1)
(364,29,1)
(311,21,1)
(256,43,1)
(210,45,1)
(160,206,1)
(343,41,1)
(66,100,1)
(13,223,1)
(58,130,1)
(159,10,1)
(318,135,1)
(20,254,1)
(331,89,1)
(340,221,1)
(289,296,1)
(349,163,1)
(200,315,1)
(214,307,1)
(313,183,1)
(289,168,1)
(162,79,1)
(11,178,1)
(111,226,1)
(222,132,1)
(335,363,1)
(76,237,1)
(128,314,1)
(326,368,1)
(115,285,1)
(4,113,1)
(56,339,1)
(335,64,1)
(30,337,1)
(44,53,1)
(77,149,1)
(45,8,1)
(362,66,1)
(213,104,1)
(40,23,1)
(255,353,1)
(107,113,1)
(335,209,1)
(202,88,1)
(87,335,1)
(18,368,1)
(90,280,1)
(96,172,1)
(99,54,1)
(314,36,1)
(52,249,1)
(343,158,1)
(177,379,1)
(338,368,1)
(267,347,1)
(155,150,1)
(152,164,1)
(292,25,1)
(139,84,1)
(17,163,1)
(301,375,1)
(153,362,1)
(133,368,1)
(257,163,1)
(364,163,1)
(316,97,1)
(202,364,1)
(12,344,1)
(235,372,1)
(83,145,1)
(358,368,1)
(257,11,1)
(70,49,1)
(57,156,1)
(159,168,1)
(8,267,1)
(85,163,1)
(125,351,1)
(274,116,1)
(73,368,1)
(38,63,1)
(158,268,1)
(375,186,1)
(189,270,1)
(67,129,1)
(190,368,1)
(229,368,1)
(208,289,1)
(20,228,1)
(110,343,1)
(244,76,1)
(361,321,1)
(306,153,1)
(84,187,1)
(300,163,1)
(254,304,1)
(286,380,1)
(216,368,1)
(39,300,1)
(79,368,1)
(129,266,1)
(279,106,1)
(127,95,1)
(304,228,1)
(377,293,1)
(47,144,1)
(82,117,1)
(138,368,1)
(350,35,1)
(339,223,1)
(78,189,1)
(88,364,1)
(300,325,1)
(342,340,1)
(337,265,1)
(18,291,1)
(221,208,1)
(374,44,1)
(63,35,1)
(107,183,1)
(16,274,1)
(327,168,1)
(2,26,1)
(354,218,1)
(194,369,1)
(64,18,1)
(308,104,1)
(209,194,1)
(161,361,1)
(133,312,1)
(179,202,1)
(270,349,1)
(331,368,1)
(188,57,1)
(152,260,1)
(59,235,1)
(309,298,1)
(33,119,1)
(349,320,1)
(322,301,1)
(80,58,1)
(231,234,1)
(187,35,1)
(98,141,1)
(95,60,1)
(106,163,1)
(245,346,1)
(66,168,1)
(325,92,1)
(107,83,1)
(336,205,1)
(107,121,1)
(165,16,1)
(230,279,1)
(280,127,1)
(10,334,1)
(220,170,1)
(43,35,1)
(310,72,1)
(234,314,1)
(0,83,1)
(343,204,1)
(36,288,1)
(355,163,1)
(250,219,1)
(79,82,1)
(268,256,1)
(183,28,1)
(108,213,1)
(306,362,1)
(333,352,1)
(251,327,1)
(198,144,1)
(237,333,1)
(290,282,1)
(222,75,1)
(117,19,1)
(175,299,1)
(374,310,1)
(367,341,1)
(107,194,1)
(347,35,1)
(107,19,1)
(298,331,1)
(74,342,1)
(24,250,1)
(50,133,1)
(234,56,1)
(34,300,1)
(199,168,1)
(380,357,1)
(169,33,1)
(219,163,1)
(287,242,1)
(369,21,1)
(202,93,1)
(105,350,1)
(54,190,1)
(212,234,1)
(344,367,1)
(274,368,1)
(348,273,1)
(215,165,1)
(249,163,1)
(3,0,1)
(332,238,1)
(352,24,1)
(73,171,1)
(212,283,1)
(154,264,1)
(205,355,1)
(261,107,1)
(359,262,1)
(127,17,1)
(206,168,1)
(328,217,1)
(264,110,1)
(197,87,1)
(42,122,1)
(49,15,1)
(109,128,1)
(60,173,1)
(180,280,1)
(207,142,1)
(213,287,1)
(315,168,1)
(259,108,1)
(357,125,1)
(228,306,1)
(201,137,1)
(288,245,1)
(226,317,1)
(312,162,1)
(321,366,1)
(196,229,1)
(145,228,1)
(131,65,1)
(362,200,1)
(199,167,1)
(86,231,1)
(71,158,1)
(343,260,1)
(378,263,1)
(343,348,1)
(283,13,1)
(107,244,1)
(252,203,1)
(107,169,1)
(6,240,1)
(341,73,1)
(167,272,1)
(97,22,1)
(61,114,1)
(330,59,1)
(102,362,1)
(173,17,1)
(358,275,1)
(182,220,1)
(130,338,1)
(122,223,1)
(299,277,1)
(119,378,1)
(89,328,1)
(37,198,1)
(239,21,1)
(145,74,1)
(293,35,1)
(23,146,1)
(246,281,1)
(107,61,1)
(376,35,1)
(363,179,1)
(106,80,1)
(365,3,1)
(191,212,1)
(241,35,1)
(335,101,1)
(51,376,1)
(91,42,1)
(32,14,1)
(48,210,1)
(28,286,1)
(242,374,1)
(148,41,1)
(172,20,1)
(291,259,1)
(354,168,1)
(238,212,1)
(53,257,1)
(372,161,1)
(156,155,1)
(176,40,1)
(101,4,1)
(338,309,1)
(282,109,1)
(144,252,1)
(240,51,1)
(264,333,1)
(277,99,1)
(260,175,1)
(17,131,1)
(168,359,1)
(35,12,1)
(335,313,1)
(164,249,1)
(247,355,1)
(306,102,1)
(15,207,1)
(107,59,1)
(218,166,1)
(365,163,1)
(29,115,1)
(370,330,1)
(296,96,1)
(147,43,1)
(259,374,1)
(117,196,1)
(178,310,1)
(360,244,1)
(186,188,1)
(248,185,1)
(141,290,1)
(203,201,1)
(93,364,1)
(229,104,1)
(126,200,1)
(275,215,1)
(329,78,1)
(68,168,1)
(130,216,1)
(34,39,1)
(352,368,1)
(119,27,1)
(26,94,1)
(263,124,1)
(95,163,1)
(224,105,1)
(213,368,1)
(30,43,2)
(135,21,2)
(8,35,2)
(266,260,2)
(95,163,2)
(364,163,2)
(330,349,2)
(288,35,2)
(19,349,2)
(10,35,2)
(13,223,2)
(168,359,2)
(37,97,2)
(216,368,2)
(257,163,2)
(327,168,2)
(254,35,2)
(297,261,2)
(343,260,2)
(257,310,2)
(34,300,2)
(21,168,2)
(42,122,2)
(119,43,2)
(239,21,2)
(264,110,2)
(139,35,2)
(289,168,2)
(196,229,2)
(138,249,2)
(177,97,2)
(179,202,2)
(28,35,2)
(83,35,2)
(247,97,2)
(78,349,2)
(200,35,2)
(358,35,2)
(186,188,2)
(317,35,2)
(138,368,2)
(162,35,2)
(45,35,2)
(133,35,2)
(228,306,2)
(249,35,2)
(222,132,2)
(235,349,2)
(354,21,2)
(126,200,2)
(212,283,2)
(87,97,2)
(18,368,2)
(127,95,2)
(261,97,2)
(14,97,2)
(0,35,2)
(66,200,2)
(329,349,2)
(105,35,2)
(121,97,2)
(221,208,2)
(107,59,2)
(107,83,2)
(282,35,2)
(43,35,2)
(290,35,2)
(234,35,2)
(369,160,2)
(57,249,2)
(342,35,2)
(95,17,2)
(91,122,2)
(261,35,2)
(215,35,2)
(194,35,2)
(107,183,2)
(323,97,2)
(366,349,2)
(198,97,2)
(38,35,2)
(369,35,2)
(242,374,2)
(107,19,2)
(22,35,2)
(279,58,2)
(160,206,2)
(218,21,2)
(343,35,2)
(312,35,2)
(362,35,2)
(159,35,2)
(108,213,2)
(156,249,2)
(29,97,2)
(127,17,2)
(172,35,2)
(146,35,2)
(375,35,2)
(247,85,2)
(264,333,2)
(33,43,2)
(109,35,2)
(152,260,2)
(202,97,2)
(93,364,2)
(293,35,2)
(212,35,2)
(379,97,2)
(307,97,2)
(107,295,2)
(268,43,2)
(121,177,2)
(251,327,2)
(131,247,2)
(297,180,2)
(60,17,2)
(107,121,2)
(59,349,2)
(260,175,2)
(182,220,2)
(351,35,2)
(211,182,2)
(280,97,2)
(97,35,2)
(364,97,2)
(7,216,2)
(142,368,2)
(191,35,2)
(18,35,2)
(324,349,2)
(107,113,2)
(141,35,2)
(344,163,2)
(97,358,2)
(286,35,2)
(337,43,2)
(251,35,2)
(188,156,2)
(16,35,2)
(118,43,2)
(204,35,2)
(335,35,2)
(183,28,2)
(348,43,2)
(289,35,2)
(144,168,2)
(247,355,2)
(107,333,2)
(223,35,2)
(287,374,2)
(167,35,2)
(296,35,2)
(374,310,2)
(117,35,2)
(150,249,2)
(232,97,2)
(295,251,2)
(214,97,2)
(285,97,2)
(153,362,2)
(4,43,2)
(107,194,2)
(111,35,2)
(100,200,2)
(352,368,2)
(213,104,2)
(154,35,2)
(335,97,2)
(285,368,2)
(333,352,2)
(107,154,2)
(223,98,2)
(228,35,2)
(334,35,2)
(110,343,2)
(3,35,2)
(113,151,2)
(114,154,2)
(104,34,2)
(142,222,2)
(338,216,2)
(19,329,2)
(283,122,2)
(229,349,2)
(61,154,2)
(124,43,2)
(326,368,2)
(267,35,2)
(353,97,2)
(84,35,2)
(17,247,2)
(211,97,2)
(64,35,2)
(315,168,2)
(343,97,2)
(200,315,2)
(241,35,2)
(11,310,2)
(122,223,2)
(188,249,2)
(137,97,2)
(259,35,2)
(79,35,2)
(336,355,2)
(52,249,2)
(374,35,2)
(74,35,2)
(13,122,2)
(44,310,2)
(89,328,2)
(291,35,2)
(179,97,2)
(151,43,2)
(72,35,2)
(17,163,2)
(110,97,2)
(33,119,2)
(204,97,2)
(79,368,2)
(197,97,2)
(249,163,2)
(65,247,2)
(101,35,2)
(365,35,2)
(358,368,2)
(178,310,2)
(140,354,2)
(98,35,2)
(125,351,2)
(220,97,2)
(206,168,2)
(37,198,2)
(85,355,2)
(320,35,2)
(331,216,2)
(224,35,2)
(306,362,2)
(317,159,2)
(210,35,2)
(263,43,2)
(50,35,2)
(173,17,2)
(258,144,2)
(53,310,2)
(63,35,2)
(370,349,2)
(6,35,2)
(327,35,2)
(362,66,2)
(310,365,2)
(332,212,2)
(355,97,2)
(252,97,2)
(316,97,2)
(338,368,2)
(243,35,2)
(347,35,2)
(183,35,2)
(205,355,2)
(275,35,2)
(152,249,2)
(12,344,2)
(187,35,2)
(155,249,2)
(94,35,2)
(306,35,2)
(343,348,2)
(238,212,2)
(245,35,2)
(362,200,2)
(159,168,2)
(309,216,2)
(331,368,2)
(85,163,2)
(36,35,2)
(190,368,2)
(313,35,2)
(378,263,2)
(208,35,2)
(174,35,2)
(51,35,2)
(27,263,2)
(280,247,2)
(182,97,2)
(281,216,2)
(213,368,2)
(314,35,2)
(145,35,2)
(363,97,2)
(194,369,2)
(369,21,2)
(199,168,2)
(256,43,2)
(199,35,2)
(96,35,2)
(145,228,2)
(180,97,2)
(328,216,2)
(89,216,2)
(176,35,2)
(240,35,2)
(44,257,2)
(20,228,2)
(113,43,2)
(331,89,2)
(264,35,2)
(87,35,2)
(339,35,2)
(128,35,2)
(314,36,2)
(165,35,2)
(349,35,2)
(226,35,2)
(147,43,2)
(369,140,2)
(318,21,2)
(283,13,2)
(357,35,2)
(304,35,2)
(166,21,2)
(270,349,2)
(169,43,2)
(361,349,2)
(372,349,2)
(355,163,2)
(343,41,2)
(274,368,2)
(158,43,2)
(321,349,2)
(161,349,2)
(82,35,2)
(154,97,2)
(213,374,2)
(350,35,2)
(283,234,2)
(133,368,2)
(41,35,2)
(349,163,2)
(294,249,2)
(115,97,2)
(221,35,2)
(47,144,2)
(144,97,2)
(343,158,2)
(310,35,2)
(203,97,2)
(255,97,2)
(377,35,2)
(20,35,2)
(160,21,2)
(202,364,2)
(169,33,2)
(279,106,2)
(217,216,2)
(102,362,2)
(209,35,2)
(21,35,2)
(116,35,2)
(140,21,2)
(376,35,2)
(365,163,2)
(107,244,2)
(189,349,2)
(374,44,2)
(322,35,2)
(127,247,2)
(311,21,2)
(122,234,2)
(66,168,2)
(73,368,2)
(56,35,2)
(170,97,2)
(23,35,2)
(148,35,2)
(164,249,2)
(197,35,2)
(186,249,2)
(107,169,2)
(272,35,2)
(315,35,2)
(226,317,2)
(206,21,2)
(86,234,2)
(229,104,2)
(106,163,2)
(201,97,2)
(48,35,2)
(380,35,2)
(229,368,2)
(231,234,2)
(346,35,2)
(71,43,2)
(295,35,2)
(32,97,2)
(280,127,2)
(265,43,2)
(83,145,2)
(301,35,2)
(246,216,2)
(216,77,2)
(198,144,2)
(40,35,2)
(125,35,2)
(88,364,2)
(208,289,2)
(90,280,2)
(108,374,2)
(298,216,2)
(212,234,2)
(110,35,2)
(340,35,2)
(300,163,2)
(2,35,2)
(264,97,2)
(354,168,2)
(77,70,2)
(274,35,2)
(234,314,2)
(273,43,2)
(26,35,2)
(351,199,2)
(196,349,2)
-----------------------------------
(0,dir1)
(1,)
(2,cyrix_model_mult1)
(3,0x0f)
(4,break;)
(5,)
(6,cyrix_model_mult1)
(7,24)
(8,Cx86_cb[1])
(9,if ((0x30 <= dir1 && dir1 <= 0x6f)
(10,5)
(11,0xf0)
(12,c->x86_mask = dir1 & 0xf)
(13,device == PCI_DEVICE_ID_CYRIX_5520)
(14,c)
(15,1)
(16,16)
(17,0x80 <= dir1)
(18,set_cpu_cap(c, X86_FEATURE_CYRIX_ARR)
(19,p = Cx86_cb+1)
(20,Cx86_cb[tmp])
(21,dir0_lsn & 8)
(22,2)
(23,isa_dma_bridge_buggy = 2)
(24,x86_model_id)
(25,0)
(26,Cx86_cb[2])
(27,1)
(28,Cx86_cb+2)
(29,0x20)
(30,0)
(31,if (((dir1 & 0x0f)
(32,x86_model)
(33,Cx486_name[(cpu_has_fpu ? 1 : 0)
(34,(dir1 >> 4)
(35,dir0_msn)
(36,read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID)
(37,Cx86_cb[2] = (dir0_lsn & 1)
(38,7)
(39,1)
(40,vendor)
(41,dir0_msn = 7)
(42,device)
(43,dir0_lsn)
(44,(dir1 & 0xf0)
(45,\' \')
(46,)
(47,\'3\')
(48,Cx86_cb)
(49,32)
(50,break;)
(51,2)
(52,c)
(53,0x20)
(54,Cx86_dir0_msb)
(55,case 4:)
(56,PCI_VENDOR_ID_CYRIX)
(57,1)
(58,&dir0)
(59,p = Cx86_cb)
(60,0x8f)
(61,p)
(62,default:)
(63,dir0_msn)
(64,break;)
(65,0x80)
(66,dir0_lsn & 1)
(67,dir0)
(68,c)
(69,dir1)
(70,1*32)
(71,p)
(72,4)
(73,c->x86_mask)
(74,tmp)
(75,31)
(76,NULL)
(77,1*32+24)
(78,1)
(79,set_cpu_cap(c, X86_FEATURE_CYRIX_ARR)
(80,dir1)
(81,buf)
(82,X86_FEATURE_CYRIX_ARR)
(83,p = Cx86_cb+tmp)
(84,Cx486_name)
(85,dir1 <= 0x6f)
(86,PCI_DEVICE_ID_CYRIX_5510)
(87,Cx86_model)
(88,2)
(89,1*32+24)
(90,geode_configure()
(91,PCI_DEVICE_ID_CYRIX_5520)
(92,dir1)
(93,1)
(94,2)
(95,dir1 <= 0x8f)
(96,dir0_lsn)
(97,c->cpuid_level == 2)
(98,read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID)
(99,dir0_msn)
(100,1)
(101,break;)
(102,0)
(103,)
(104,c->x86_model = (dir1 >> 4)
(105,dir0_lsn)
(106,&dir1)
(107,strcat(buf, p)
(108,(c->x86_model)
(109,0)
(110,Cx86_model[dir0_msn & 7])
(111,dir1)
(112,x86_model)
(113,p = Cx486S_name[0])
(114,buf)
(115,dir1)
(116,x86_cache_size)
(117,c)
(118,break;)
(119,cpu_has_fpu ? 1 : 0)
(120,case 0xf:)
(121,p = Cx86_cb+2)
(122,device == PCI_DEVICE_ID_CYRIX_5510)
(123,)
(124,Cx486_name)
(125,Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5])
(126,dir0_lsn)
(127,0x80 <= dir1 && dir1 <= 0x8f)
(128,device)
(129,dir0_lsn)
(130,dir0)
(131,dir1)
(132,0*32)
(133,set_cpu_bug(c, X86_BUG_COMA)
(134,)
(135,dir0_lsn)
(136,)
(137,2)
(138,set_cpu_bug(c, X86_BUG_COMA)
(139,dir0_lsn)
(140,Cx486S_name[dir0_lsn & 3])
(141,PCI_DEVICE_ID)
(142,clear_cpu_cap(c, 0*32+31)
(143,dir0)
(144,dir0_lsn & 1)
(145,Cx86_cb+tmp)
(146,2)
(147,dir0_msn)
(148,break;)
(149,24)
(150,CX86_CCR7)
(151,Cx486S_name[0])
(152,dir0_msn++)
(153,2)
(154,p)
(155,CX86_CCR7)
(156,getCx86_old(CX86_CCR7)
(157,)
(158,dir0_msn = 0)
(159,dir0_lsn & 5)
(160,Cx486D_name[dir0_lsn & 5])
(161,Cx86_cb[0] = \'L\')
(162,c)
(163,dir1 = 0)
(164,dir0_msn)
(165,c->x86_cache_size = 16)
(166,dir0_lsn)
(167,5)
(168,dir0_lsn = dir0 & 0xf)
(169,p = Cx486_name[(cpu_has_fpu ? 1 : 0)
(170,CX86_CCR7)
(171,x86_mask)
(172,cyrix_model_mult2)
(173,dir1)
(174,break;)
(175,dir0 >> 4)
(176,0)
(177,Cx86_cb+2)
(178,dir1)
(179,c->x86_model = (dir1 & 0x20)
(180,return;)
(181,dir0_lsn)
(182,getCx86_old(CX86_CCR7)
(183,p = Cx86_cb+2)
(184,case 1:)
(185,dir1)
(186,setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)
(187,p)
(188,getCx86_old(CX86_CCR7)
(189,Cx86_cb)
(190,check_cx686_slop(c)
(191,c)
(192,case 0:)
(193,if (dir1 > 0x21)
(194,p = (dir0_lsn & 8)
(195,switch (dir0_msn)
(196,(c->x86_model)
(197,dir0_msn)
(198,(dir0_lsn & 1)
(199,dir0_lsn & 5)
(200,!(dir0_lsn & 7)
(201,Cx86_cb[2])
(202,(dir1 & 0x20)
(203,dir0_lsn)
(204,7)
(205,dir1)
(206,dir0_lsn & 5)
(207,c)
(208,cyrix_model_mult2[dir0_lsn & 7])
(209,break;)
(210,Cx86_cb[1] = \' \')
(211,setCx86_old(CX86_CCR7, getCx86_old(CX86_CCR7)
(212,vendor == PCI_VENDOR_ID_CYRIX &&\n\\n\\t\\t\\t(device == PCI_DEVICE_ID_CYRIX_5510 ||\n\\n\\t\\t\\t\\t\\tdevice == PCI_DEVICE_ID_CYRIX_5520)
(213,c->x86_model)
(214,dir1)
(215,c)
(216,test_cpu_cap(c, 1*32+24)
(217,32)
(218,3)
(219,buf)
(220,getCx86_old(CX86_CCR7)
(221,Cx86_cb[tmp] = cyrix_model_mult2[dir0_lsn & 7])
(222,0*32+31)
(223,device = read_pci_config_16(0, 0, 0x12, PCI_DEVICE_ID)
(224,8)
(225,case 0xe:)
(226,Cx86_cb[2] = cyrix_model_mult1[dir0_lsn & 5])
(227,vendor)
(228,tmp = (!(dir0_lsn & 7)
(229,c->x86_model)
(230,c)
(231,device)
(232,1)
(233,if (test_cpu_cap(c, 1*32+24)
(234,vendor == PCI_VENDOR_ID_CYRIX)
(235,Cx86_cb)
(236,if (c->cpuid_level == 2)
(237,p)
(238,"cyrix 5510/5520 detected")
(239,Cx486D_name)
(240,Cx86_cb[2])
(241,isa_dma_bridge_buggy)
(242,c)
(243,7)
(244,*p = NULL)
(245,0x12)
(246,1)
(247,0x30 <= dir1 && dir1 <= 0x6f)
(248,0)
(249,dir1 > 7)
(250,c)
(251,Cx486_name[dir0_lsn & 7])
(252,1)
(253,if (p)
(254,tmp)
(255,Cx86_cb)
(256,dir0_msn)
(257,dir1 & 0xf0)
(258,\'4\')
(259,c)
(260,dir0_msn = dir0 >> 4)
(261,return;)
(262,0xf)
(263,cpu_has_fpu)
(264,strcpy(buf, Cx86_model[dir0_msn & 7])
(265,p)
(266,Cx86_dir0_msb = dir0_msn = dir0 >> 4)
(267,1)
(268,0)
(269,p)
(270,p)
(271,device)
(272,dir0_lsn)
(273,0)
(274,c->x86_cache_size)
(275,cpuid_level)
(276,switch (dir0_lsn)
(277,dir0)
(278,if (vendor == PCI_VENDOR_ID_CYRIX &&\n\\n\\t\\t\\t(device == PCI_DEVICE_ID_CYRIX_5510 ||\n\\n\\t\\t\\t\\t\\tdevice == PCI_DEVICE_ID_CYRIX_5520)
(279,do_cyrix_devid(&dir0, &dir1)
(280,(0x30 <= dir1 && dir1 <= 0x6f)
(281,c)
(282,0)
(283,device == PCI_DEVICE_ID_CYRIX_5510 ||\n\\n\\t\\t\\t\\t\\tdevice == PCI_DEVICE_ID_CYRIX_5520)
(284,dir0_msn)
(285,c->x86_model)
(286,2)
(287,x86_model)
(288,PCI_VENDOR_ID)
(289,dir0_lsn & 7)
(290,0x12)
(291,X86_FEATURE_CYRIX_ARR)
(292,32)
(293,dir1)
(294,X86_BUG_COMA)
(295,p = Cx486_name[dir0_lsn & 7])
(296,7)
(297,RET)
(298,c)
(299,4)
(300,dir1 >> 4)
(301,dir0_lsn)
(302,case 5:)
(303,if (dir1 > 7)
(304,Cx86_cb)
(305,)
(306,(!(dir0_lsn & 7)
(307,0x30)
(308,c)
(309,X86_FEATURE_CXMMX)
(310,(dir1 & 0x0f)
(311,Cx486S_name)
(312,X86_BUG_COMA)
(313,break;)
(314,vendor = read_pci_config_16(0, 0, 0x12, PCI_VENDOR_ID)
(315,dir0_lsn & 7)
(316,Cx86_cb)
(317,cyrix_model_mult1[dir0_lsn & 5])
(318,5)
(319,case 3:)
(320,0x21)
(321,Cx86_cb[0])
(322,7)
(323,CX86_CCR7)
(324,Cx86_cb)
(325,4)
(326,c->x86_model)
(327,dir0_lsn & 7)
(328,1*32)
(329,Cx86_cb+1)
(330,c)
(331,clear_cpu_cap(c, 1*32+24)
(332,mark_tsc_unstable("cyrix 5510/5520 detected")
(333,*buf = c->x86_model_id)
(334,dir0_lsn)
(335,buf)
(336,0x6f)
(337,Cx486S_name)
(338,set_cpu_cap(c, X86_FEATURE_CXMMX)
(339,vendor)
(340,p)
(341,dir1)
(342,Cx86_cb)
(343,dir0_msn & 7)
(344,dir1 & 0xf)
(345,case 2:)
(346,0)
(347,Cx86_cb)
(348,dir0_msn = 0)
(349,dir1 > 0x21)
(350,p)
(351,cyrix_model_mult1[dir0_lsn & 5])
(352,c->x86_model_id)
(353,p)
(354,dir0_lsn & 3)
(355,0x30 <= dir1)
(356,)
(357,p)
(358,c->cpuid_level)
(359,dir0 & 0xf)
(360,c)
(361,\'L\')
(362,!(dir0_lsn & 7)
(363,break;)
(364,dir1 & 0x20)
(365,dir1 & 0x0f)
(366,0)
(367,0xf)
(368,struct cpuinfo_x86 *c)
(369,(dir0_lsn & 8)
(370,x86_model)
(371,tmp)
(372,p)
(373,case 0xd:)
(374,((dir1 & 0x0f)
(375,tmp)
(376,Cx86_cb)
(377,7)
(378,0)
(379,2)
(380,Cx86_cb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^