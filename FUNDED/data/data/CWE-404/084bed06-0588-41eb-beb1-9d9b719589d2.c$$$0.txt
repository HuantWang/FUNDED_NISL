-----label-----
1
-----code-----
static void dump_instr(const char *lvl, struct pt_regs *regs)
{
	mm_segment_t fs;

	if (!user_mode(regs)) {
		fs = get_fs();
		set_fs(KERNEL_DS);
		__dump_instr(lvl, regs);
		set_fs(fs);
	} else {
		__dump_instr(lvl, regs);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
36,37
38,39
39,40
39,41
40,41
42,43
43,44
45,46
46,47
46,48
46,49
47,48
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
61,64
62,63
64,65
66,67
-----nextToken-----
2,4,6,8,9,12,14,15,20,22,27,29,34,37,41,44,48,50,52,56,58,63,65,67
-----computeFrom-----
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void dump_instr(const char *lvl, struct pt_regs *regs){	mm_segment_t fs;	if (!user_mode(regs)) {		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	} else {		__dump_instr(lvl, regs);	}}
static void
dump_instr(const char *lvl, struct pt_regs *regs)
dump_instr
const char *lvl
const char
*lvl
*
lvl
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
{	mm_segment_t fs;	if (!user_mode(regs)) {		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	} else {		__dump_instr(lvl, regs);	}}
mm_segment_t fs;
mm_segment_t fs;
mm_segment_t
mm_segment_t
fs
fs
if (!user_mode(regs)) {		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	} else {		__dump_instr(lvl, regs);	}
!user_mode(regs)
user_mode(regs)
user_mode
user_mode
regs
regs
{		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	}
fs = get_fs();
fs = get_fs()
fs
fs
get_fs()
get_fs
get_fs
set_fs(KERNEL_DS);
set_fs(KERNEL_DS);
set_fs
set_fs
(KERNEL_DS)
KERNEL_DS
KERNEL_DS
__dump_instr(lvl, regs);
__dump_instr(lvl, regs)
__dump_instr
__dump_instr
lvl
lvl
regs
regs
set_fs(fs);
set_fs(fs)
set_fs
set_fs
fs
fs
{		__dump_instr(lvl, regs);	}
__dump_instr(lvl, regs);
__dump_instr(lvl, regs)
__dump_instr
__dump_instr
lvl
lvl
regs
regs
-----joern-----
(9,23,0)
(3,23,0)
(10,20,0)
(13,7,0)
(20,12,0)
(5,22,0)
(15,7,0)
(14,13,0)
(22,11,0)
(18,13,0)
(19,17,0)
(0,23,0)
(20,11,0)
(22,5,0)
(6,15,0)
(0,7,0)
(23,7,0)
(21,17,0)
(20,16,0)
(2,20,0)
(8,0,0)
(1,22,0)
(13,12,0)
(23,9,0)
(13,11,0)
(5,22,1)
(4,20,1)
(20,11,1)
(10,2,1)
(9,3,1)
(2,5,1)
(8,13,1)
(3,5,1)
(0,23,1)
(13,11,1)
(15,6,1)
(22,11,1)
(6,23,1)
(13,18,1)
(14,15,1)
(13,12,1)
(18,14,1)
(20,10,1)
(20,12,1)
(4,0,1)
(0,8,1)
(23,9,1)
(22,1,1)
(13,12,2)
(0,5,2)
(0,23,2)
(20,12,2)
(23,9,2)
(14,5,2)
(13,11,2)
(2,5,2)
(23,5,2)
(3,5,2)
(13,5,2)
(20,11,2)
(22,11,2)
(15,5,2)
(10,5,2)
(5,22,2)
(8,5,2)
(18,5,2)
(9,5,2)
(20,5,2)
(6,5,2)
-----------------------------------
(0,set_fs(fs)
(1,regs)
(2,lvl)
(3,fs)
(4,RET)
(5,!user_mode(regs)
(6,KERNEL_DS)
(7,)
(8,fs)
(9,get_fs()
(10,regs)
(11,struct pt_regs *regs)
(12,const char *lvl)
(13,__dump_instr(lvl, regs)
(14,lvl)
(15,set_fs(KERNEL_DS)
(16,)
(17,)
(18,regs)
(19,fs)
(20,__dump_instr(lvl, regs)
(21,if (!user_mode(regs)
(22,user_mode(regs)
(23,fs = get_fs()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^