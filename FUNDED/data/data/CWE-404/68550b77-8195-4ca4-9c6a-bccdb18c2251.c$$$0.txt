-----label-----
1
-----code-----
v_BOOL_t hdd_isConnectionInProgress(hdd_context_t *pHddCtx, v_U8_t *session_id,
                                    scan_reject_states *reason)
{
    hdd_adapter_list_node_t *pAdapterNode = NULL, *pNext = NULL;
    hdd_station_ctx_t *pHddStaCtx = NULL;
    hdd_adapter_t *pAdapter = NULL;
    VOS_STATUS status = 0;
    v_U8_t staId = 0;
    v_U8_t *staMac = NULL;

    status = hdd_get_front_adapter ( pHddCtx, &pAdapterNode );

    while ( NULL != pAdapterNode && VOS_STATUS_SUCCESS == status )
    {
        pAdapter = pAdapterNode->pAdapter;

        if( pAdapter )
        {
            hddLog(VOS_TRACE_LEVEL_INFO,
                    "%s: Adapter with device mode %s (%d) exists",
                    __func__, hdd_device_modetoString(pAdapter->device_mode),
                                                       pAdapter->device_mode);
            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||
                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||
                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&
                 (eConnectionState_Connecting ==
                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))
            {
                hddLog(VOS_TRACE_LEVEL_ERROR,
                       "%s: %p(%d) Connection is in progress", __func__,
                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);
                if (session_id && reason)
                {
                    *session_id = pAdapter->sessionId;
                    *reason = eHDD_CONNECTION_IN_PROGRESS;
                }
                return VOS_TRUE;
            }
            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&
                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))
            {
                hddLog(VOS_TRACE_LEVEL_ERROR,
                       "%s: %p(%d) Reassociation is in progress", __func__,
                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);
                if (session_id && reason)
                {
                    *session_id = pAdapter->sessionId;
                    *reason = eHDD_REASSOC_IN_PROGRESS;
                }
                return VOS_TRUE;
            }
            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||
                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||
                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))
            {
                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);
                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&
                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))
                {
                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);
                    hddLog(VOS_TRACE_LEVEL_ERROR,
                           "%s: client " MAC_ADDRESS_STR
                           " is in the middle of WPS/EAPOL exchange.", __func__,
                            MAC_ADDR_ARRAY(staMac));
                    if (session_id && reason)
                    {
                        *session_id = pAdapter->sessionId;
                        *reason = eHDD_EAPOL_IN_PROGRESS;
                    }
                    return VOS_TRUE;
                }
            }
            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||
                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))
            {
                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;
                ptSapContext pSapCtx = NULL;
                pSapCtx = VOS_GET_SAP_CB(pVosContext);
                if(pSapCtx == NULL){
                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,
                            FL("psapCtx is NULL"));
                    return VOS_FALSE;
                }
                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)
                {
                    if ((pSapCtx->aStaInfo[staId].isUsed) &&
                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))
                    {
                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);

                        hddLog(VOS_TRACE_LEVEL_ERROR,
                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "
                               "middle of WPS/EAPOL exchange.", __func__,
                                MAC_ADDR_ARRAY(staMac));
                        if (session_id && reason)
                        {
                            *session_id = pAdapter->sessionId;
                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;
                        }
                        return VOS_TRUE;
                    }
                }
            }
        }
        status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext );
        pAdapterNode = pNext;
    }
    return VOS_FALSE;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
25,26
26,27
26,28
26,29
27,28
29,30
29,31
29,32
32,33
33,34
35,36
35,37
35,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
55,58
58,59
59,60
61,62
62,63
62,64
63,64
65,66
65,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
81,84
84,85
85,86
87,88
88,89
88,90
89,90
91,92
91,93
91,94
92,93
94,95
96,97
97,98
99,100
99,101
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
107,108
109,110
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
116,117
116,118
117,118
120,121
120,122
121,122
123,124
123,125
123,126
123,127
124,125
125,126
125,127
125,128
125,129
125,130
125,131
126,127
128,129
131,132
133,134
133,135
134,135
136,137
136,138
137,138
140,141
140,142
141,142
144,145
144,146
145,146
145,147
146,147
147,148
147,149
148,149
148,150
149,150
150,151
150,152
151,152
153,154
153,155
154,155
157,158
158,159
158,160
159,160
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
169,171
170,171
173,174
174,175
174,176
175,176
177,178
177,179
178,179
178,180
179,180
180,181
180,182
181,182
183,184
187,188
187,189
187,190
188,189
189,190
189,191
189,192
189,193
189,194
189,195
190,191
192,193
195,196
197,198
197,199
198,199
200,201
202,203
202,204
203,204
206,207
206,208
207,208
207,209
208,209
210,211
212,213
212,214
213,214
214,215
214,216
215,216
216,217
218,219
218,220
219,220
222,223
223,224
223,225
224,225
225,226
227,228
229,230
230,231
232,233
232,234
233,234
233,235
234,235
235,236
235,237
236,237
238,239
238,240
239,240
242,243
242,244
243,244
245,246
245,247
246,247
248,249
250,251
250,252
250,253
251,252
252,253
252,254
252,255
252,256
252,257
252,258
253,254
255,256
258,259
260,261
260,262
261,262
263,264
265,266
265,267
266,267
269,270
269,271
270,271
270,272
271,272
273,274
275,276
275,277
276,277
277,278
277,279
278,279
279,280
281,282
281,283
282,283
285,286
286,287
286,288
287,288
288,289
290,291
292,293
293,294
295,296
295,297
295,298
296,297
296,298
297,298
297,299
298,299
299,300
299,301
300,301
302,303
302,304
303,304
306,307
307,308
307,309
308,309
310,311
310,312
311,312
314,315
315,316
315,317
316,317
318,319
318,320
319,320
322,323
322,324
323,324
324,325
324,326
325,326
327,328
327,329
328,329
330,331
332,333
332,334
333,334
333,335
334,335
335,336
335,337
336,337
338,339
338,340
339,340
339,341
340,341
344,345
345,346
345,347
346,347
348,349
348,350
349,350
349,351
350,351
354,355
354,356
354,357
354,358
355,356
356,357
356,358
357,358
359,360
359,361
360,361
360,362
361,362
363,364
365,366
366,367
367,368
367,369
368,369
368,370
369,370
369,371
370,371
375,376
376,377
376,378
377,378
377,379
378,379
380,381
382,383
382,384
383,384
384,385
384,386
385,386
386,387
388,389
388,390
389,390
392,393
393,394
393,395
394,395
395,396
397,398
399,400
400,401
402,403
402,404
403,404
403,405
404,405
405,406
405,407
406,407
408,409
408,410
409,410
412,413
413,414
413,415
414,415
416,417
416,418
417,418
420,421
420,422
420,423
420,424
420,425
421,422
422,423
422,424
423,424
425,426
425,427
427,428
428,429
428,430
429,430
430,431
430,432
431,432
433,434
436,437
437,438
437,439
438,439
440,441
440,442
442,443
443,444
445,446
446,447
446,448
447,448
449,450
449,451
450,451
452,453
454,455
454,456
455,456
455,457
456,457
458,459
460,461
460,462
461,462
462,463
462,464
462,465
462,466
463,464
465,466
467,468
469,470
469,471
470,471
473,474
474,475
476,477
476,478
476,479
476,480
477,478
478,479
478,480
479,480
482,483
482,484
483,484
485,486
487,488
488,489
490,491
491,492
491,493
492,493
492,494
493,494
494,495
494,496
495,496
495,497
496,497
496,498
497,498
500,501
503,504
504,505
504,506
505,506
507,508
507,509
508,509
508,510
509,510
509,511
510,511
513,514
516,517
516,518
516,519
516,520
517,518
518,519
518,520
519,520
521,522
521,523
522,523
522,524
523,524
525,526
527,528
528,529
529,530
529,531
530,531
530,532
531,532
531,533
532,533
532,534
533,534
533,535
534,535
537,538
542,543
543,544
543,545
544,545
544,546
545,546
547,548
549,550
549,551
550,551
551,552
551,553
552,553
553,554
555,556
555,557
556,557
559,560
560,561
560,562
561,562
562,563
564,565
566,567
567,568
569,570
570,571
570,572
571,572
573,574
573,575
573,576
573,577
574,575
576,577
578,579
580,581
581,582
583,584
584,585
584,586
585,586
587,588
589,590
590,591
-----nextToken-----
3,5,8,10,11,14,16,17,20,22,23,28,30,31,34,36,37,40,44,46,47,50,54,56,57,60,64,66,68,72,74,76,80,82,83,86,90,93,95,98,103,105,108,110,115,118,119,122,127,129,130,132,135,138,139,142,143,152,155,156,160,163,164,168,171,172,176,182,184,185,186,191,193,194,196,199,201,204,205,209,211,217,220,221,226,228,231,237,240,241,244,247,249,254,256,257,259,262,264,267,268,272,274,280,283,284,289,291,294,301,304,305,309,312,313,317,320,321,326,329,331,337,341,342,343,347,351,352,353,358,362,364,371,372,373,374,379,381,387,390,391,396,398,401,407,410,411,415,418,419,424,426,432,434,435,439,441,444,448,451,453,457,459,464,466,468,471,472,475,480,481,484,486,489,498,499,501,502,506,511,512,514,515,520,524,526,535,536,538,539,540,541,546,548,554,557,558,563,565,568,572,575,577,579,582,586,588,591
-----computeFrom-----
88,89
88,90
100,101
100,102
101,102
101,103
106,107
106,108
113,114
113,115
145,146
145,147
147,148
147,149
148,149
148,150
150,151
150,152
158,159
158,160
166,167
166,168
174,175
174,176
207,208
207,209
214,215
214,216
223,224
223,225
233,234
233,235
235,236
235,237
270,271
270,272
277,278
277,279
286,287
286,288
296,297
296,298
297,298
297,299
299,300
299,301
307,308
307,309
315,316
315,317
324,325
324,326
333,334
333,335
335,336
335,337
345,346
345,347
356,357
356,358
377,378
377,379
384,385
384,386
393,394
393,395
403,404
403,405
405,406
405,407
413,414
413,415
446,447
446,448
455,456
455,457
478,479
478,480
482,483
482,484
492,493
492,494
504,505
504,506
518,519
518,520
544,545
544,546
551,552
551,553
560,561
560,562
570,571
570,572
584,585
584,586
-----guardedBy-----
182,199
184,220
211,226
209,217
249,283
274,289
272,280
320,390
381,396
379,387
418,557
514,538
511,535
512,536
548,563
546,554
-----guardedByNegation-----
320,557
321,419
-----lastLexicalUse-----
320,557
-----jump-----
320,557
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;LiteralExpression;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
v_BOOL_t hdd_isConnectionInProgress(hdd_context_t *pHddCtx, v_U8_t *session_id,                                    scan_reject_states *reason){    hdd_adapter_list_node_t *pAdapterNode = NULL, *pNext = NULL;    hdd_station_ctx_t *pHddStaCtx = NULL;    hdd_adapter_t *pAdapter = NULL;    VOS_STATUS status = 0;    v_U8_t staId = 0;    v_U8_t *staMac = NULL;    status = hdd_get_front_adapter ( pHddCtx, &pAdapterNode );    while ( NULL != pAdapterNode && VOS_STATUS_SUCCESS == status )    {        pAdapter = pAdapterNode->pAdapter;        if( pAdapter )        {            hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }        }        status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext );        pAdapterNode = pNext;    }    return VOS_FALSE;}
v_BOOL_t
v_BOOL_t
hdd_isConnectionInProgress(hdd_context_t *pHddCtx, v_U8_t *session_id,                                    scan_reject_states *reason)
hdd_isConnectionInProgress
hdd_context_t *pHddCtx
hdd_context_t
hdd_context_t
*pHddCtx
*
pHddCtx
v_U8_t *session_id
v_U8_t
v_U8_t
*session_id
*
session_id
scan_reject_states *reason
scan_reject_states
scan_reject_states
*reason
*
reason
{    hdd_adapter_list_node_t *pAdapterNode = NULL, *pNext = NULL;    hdd_station_ctx_t *pHddStaCtx = NULL;    hdd_adapter_t *pAdapter = NULL;    VOS_STATUS status = 0;    v_U8_t staId = 0;    v_U8_t *staMac = NULL;    status = hdd_get_front_adapter ( pHddCtx, &pAdapterNode );    while ( NULL != pAdapterNode && VOS_STATUS_SUCCESS == status )    {        pAdapter = pAdapterNode->pAdapter;        if( pAdapter )        {            hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }        }        status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext );        pAdapterNode = pNext;    }    return VOS_FALSE;}
hdd_adapter_list_node_t *pAdapterNode = NULL, *pNext = NULL;
hdd_adapter_list_node_t *pAdapterNode = NULL, *pNext = NULL;
hdd_adapter_list_node_t
hdd_adapter_list_node_t
*pAdapterNode = NULL
*
pAdapterNode
= NULL
NULL
NULL
*pNext = NULL
*
pNext
= NULL
NULL
NULL
hdd_station_ctx_t *pHddStaCtx = NULL;
hdd_station_ctx_t *pHddStaCtx = NULL;
hdd_station_ctx_t
hdd_station_ctx_t
*pHddStaCtx = NULL
*
pHddStaCtx
= NULL
NULL
NULL
hdd_adapter_t *pAdapter = NULL;
hdd_adapter_t *pAdapter = NULL;
hdd_adapter_t
hdd_adapter_t
*pAdapter = NULL
*
pAdapter
= NULL
NULL
NULL
VOS_STATUS status = 0;
VOS_STATUS status = 0;
VOS_STATUS
VOS_STATUS
status = 0
status
= 0
0
v_U8_t staId = 0;
v_U8_t staId = 0;
v_U8_t
v_U8_t
staId = 0
staId
= 0
0
v_U8_t *staMac = NULL;
v_U8_t *staMac = NULL;
v_U8_t
v_U8_t
*staMac = NULL
*
staMac
= NULL
NULL
NULL
status = hdd_get_front_adapter ( pHddCtx, &pAdapterNode );
status = hdd_get_front_adapter ( pHddCtx, &pAdapterNode )
status
status
hdd_get_front_adapter ( pHddCtx, &pAdapterNode )
hdd_get_front_adapter
hdd_get_front_adapter
pHddCtx
pHddCtx
&pAdapterNode
pAdapterNode
pAdapterNode
while ( NULL != pAdapterNode && VOS_STATUS_SUCCESS == status )    {        pAdapter = pAdapterNode->pAdapter;        if( pAdapter )        {            hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }        }        status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext );        pAdapterNode = pNext;    }
NULL != pAdapterNode && VOS_STATUS_SUCCESS == status
NULL != pAdapterNode
NULL
NULL
pAdapterNode
pAdapterNode
VOS_STATUS_SUCCESS == status
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
status
status
{        pAdapter = pAdapterNode->pAdapter;        if( pAdapter )        {            hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }        }        status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext );        pAdapterNode = pNext;    }
pAdapter = pAdapterNode->pAdapter;
pAdapter = pAdapterNode->pAdapter
pAdapter
pAdapter
pAdapterNode->pAdapter
pAdapterNode
pAdapterNode
pAdapter
if( pAdapter )        {            hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }        }
pAdapter
pAdapter
{            hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);            if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }            if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }        }
hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode);
hddLog(VOS_TRACE_LEVEL_INFO,                    "%s: Adapter with device mode %s (%d) exists",                    __func__, hdd_device_modetoString(pAdapter->device_mode),                                                       pAdapter->device_mode)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: Adapter with device mode %s (%d) exists"
__func__
__func__
hdd_device_modetoString(pAdapter->device_mode)
hdd_device_modetoString
hdd_device_modetoString
pAdapter->device_mode
pAdapter
pAdapter
device_mode
pAdapter->device_mode
pAdapter
pAdapter
device_mode
if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }
((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)) &&                 (eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState)
((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                 (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
WLAN_HDD_INFRA_STATION == pAdapter->device_mode
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
WLAN_HDD_P2P_CLIENT == pAdapter->device_mode
WLAN_HDD_P2P_CLIENT
WLAN_HDD_P2P_CLIENT
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)
WLAN_HDD_P2P_DEVICE == pAdapter->device_mode
WLAN_HDD_P2P_DEVICE
WLAN_HDD_P2P_DEVICE
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState)
eConnectionState_Connecting ==                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState
eConnectionState_Connecting
eConnectionState_Connecting
(WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info.connState
(WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))->conn_info
(WLAN_HDD_GET_STATION_CTX_PTR(pAdapter))
WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
WLAN_HDD_GET_STATION_CTX_PTR
WLAN_HDD_GET_STATION_CTX_PTR
pAdapter
pAdapter
conn_info
connState
{                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }                return VOS_TRUE;            }
hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);
hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Connection is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: %p(%d) Connection is in progress"
__func__
__func__
WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
WLAN_HDD_GET_STATION_CTX_PTR
WLAN_HDD_GET_STATION_CTX_PTR
pAdapter
pAdapter
pAdapter->sessionId
pAdapter
pAdapter
sessionId
if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }
session_id && reason
session_id
session_id
reason
reason
{                    *session_id = pAdapter->sessionId;                    *reason = eHDD_CONNECTION_IN_PROGRESS;                }
*session_id = pAdapter->sessionId;
*session_id = pAdapter->sessionId
*session_id
session_id
session_id
pAdapter->sessionId
pAdapter
pAdapter
sessionId
*reason = eHDD_CONNECTION_IN_PROGRESS;
*reason = eHDD_CONNECTION_IN_PROGRESS
*reason
reason
reason
eHDD_CONNECTION_IN_PROGRESS
eHDD_CONNECTION_IN_PROGRESS
return VOS_TRUE;
VOS_TRUE
VOS_TRUE
if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)))            {                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&                 smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter))
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
WLAN_HDD_INFRA_STATION == pAdapter->device_mode
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
pAdapter->device_mode
pAdapter
pAdapter
device_mode
smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter))
smeNeighborMiddleOfRoaming
smeNeighborMiddleOfRoaming
WLAN_HDD_GET_HAL_CTX(pAdapter)
WLAN_HDD_GET_HAL_CTX
WLAN_HDD_GET_HAL_CTX
pAdapter
pAdapter
{                hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);                if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }                return VOS_TRUE;            }
hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId);
hddLog(VOS_TRACE_LEVEL_ERROR,                       "%s: %p(%d) Reassociation is in progress", __func__,                       WLAN_HDD_GET_STATION_CTX_PTR(pAdapter), pAdapter->sessionId)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: %p(%d) Reassociation is in progress"
__func__
__func__
WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
WLAN_HDD_GET_STATION_CTX_PTR
WLAN_HDD_GET_STATION_CTX_PTR
pAdapter
pAdapter
pAdapter->sessionId
pAdapter
pAdapter
sessionId
if (session_id && reason)                {                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }
session_id && reason
session_id
session_id
reason
reason
{                    *session_id = pAdapter->sessionId;                    *reason = eHDD_REASSOC_IN_PROGRESS;                }
*session_id = pAdapter->sessionId;
*session_id = pAdapter->sessionId
*session_id
session_id
session_id
pAdapter->sessionId
pAdapter
pAdapter
sessionId
*reason = eHDD_REASSOC_IN_PROGRESS;
*reason = eHDD_REASSOC_IN_PROGRESS
*reason
reason
reason
eHDD_REASSOC_IN_PROGRESS
eHDD_REASSOC_IN_PROGRESS
return VOS_TRUE;
VOS_TRUE
VOS_TRUE
if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode))            {                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }            else if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode) ||                     (WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
WLAN_HDD_INFRA_STATION == pAdapter->device_mode
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
WLAN_HDD_P2P_CLIENT == pAdapter->device_mode
WLAN_HDD_P2P_CLIENT
WLAN_HDD_P2P_CLIENT
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)
WLAN_HDD_P2P_DEVICE == pAdapter->device_mode
WLAN_HDD_P2P_DEVICE
WLAN_HDD_P2P_DEVICE
pAdapter->device_mode
pAdapter
pAdapter
device_mode
{                pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);                if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }            }
pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter);
pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
pHddStaCtx
pHddStaCtx
WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
WLAN_HDD_GET_STATION_CTX_PTR
WLAN_HDD_GET_STATION_CTX_PTR
pAdapter
pAdapter
if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated))                {                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }
(eConnectionState_Associated == pHddStaCtx->conn_info.connState) &&                    (VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated)
(eConnectionState_Associated == pHddStaCtx->conn_info.connState)
eConnectionState_Associated == pHddStaCtx->conn_info.connState
eConnectionState_Associated
eConnectionState_Associated
pHddStaCtx->conn_info.connState
pHddStaCtx->conn_info
pHddStaCtx
pHddStaCtx
conn_info
connState
(VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated)
VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated
VOS_FALSE
VOS_FALSE
pHddStaCtx->conn_info.uIsAuthenticated
pHddStaCtx->conn_info
pHddStaCtx
pHddStaCtx
conn_info
uIsAuthenticated
{                    staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);                    hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));                    if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }                    return VOS_TRUE;                }
staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0]);
staMac = (v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0])
staMac
staMac
(v_U8_t *) &(pAdapter->macAddressCurrent.bytes[0])
v_U8_t *
v_U8_t
v_U8_t
*
*
&(pAdapter->macAddressCurrent.bytes[0])
(pAdapter->macAddressCurrent.bytes[0])
pAdapter->macAddressCurrent.bytes[0]
pAdapter->macAddressCurrent.bytes
pAdapter->macAddressCurrent
pAdapter
pAdapter
macAddressCurrent
bytes
0
hddLog(VOS_TRACE_LEVEL_ERROR,                           "%s: client " MAC_ADDRESS_STR                           " is in the middle of WPS/EAPOL exchange.", __func__,                            MAC_ADDR_ARRAY(staMac));
if (session_id && reason)                    {                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }
session_id && reason
session_id
session_id
reason
reason
{                        *session_id = pAdapter->sessionId;                        *reason = eHDD_EAPOL_IN_PROGRESS;                    }
*session_id = pAdapter->sessionId;
*session_id = pAdapter->sessionId
*session_id
session_id
session_id
pAdapter->sessionId
pAdapter
pAdapter
sessionId
*reason = eHDD_EAPOL_IN_PROGRESS;
*reason = eHDD_EAPOL_IN_PROGRESS
*reason
reason
reason
eHDD_EAPOL_IN_PROGRESS
eHDD_EAPOL_IN_PROGRESS
return VOS_TRUE;
VOS_TRUE
VOS_TRUE
if ((WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode))            {                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }
(WLAN_HDD_SOFTAP == pAdapter->device_mode) ||                    (WLAN_HDD_P2P_GO == pAdapter->device_mode)
(WLAN_HDD_SOFTAP == pAdapter->device_mode)
WLAN_HDD_SOFTAP == pAdapter->device_mode
WLAN_HDD_SOFTAP
WLAN_HDD_SOFTAP
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(WLAN_HDD_P2P_GO == pAdapter->device_mode)
WLAN_HDD_P2P_GO == pAdapter->device_mode
WLAN_HDD_P2P_GO
WLAN_HDD_P2P_GO
pAdapter->device_mode
pAdapter
pAdapter
device_mode
{                v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;                ptSapContext pSapCtx = NULL;                pSapCtx = VOS_GET_SAP_CB(pVosContext);                if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }                for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }            }
v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;
v_CONTEXT_t pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext;
v_CONTEXT_t
v_CONTEXT_t
pVosContext = ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext
pVosContext
= ( WLAN_HDD_GET_CTX(pAdapter))->pvosContext
( WLAN_HDD_GET_CTX(pAdapter))->pvosContext
( WLAN_HDD_GET_CTX(pAdapter))
WLAN_HDD_GET_CTX(pAdapter)
WLAN_HDD_GET_CTX
WLAN_HDD_GET_CTX
pAdapter
pAdapter
pvosContext
ptSapContext pSapCtx = NULL;
ptSapContext pSapCtx = NULL;
ptSapContext
ptSapContext
pSapCtx = NULL
pSapCtx
= NULL
NULL
NULL
pSapCtx = VOS_GET_SAP_CB(pVosContext);
pSapCtx = VOS_GET_SAP_CB(pVosContext)
pSapCtx
pSapCtx
VOS_GET_SAP_CB(pVosContext)
VOS_GET_SAP_CB
VOS_GET_SAP_CB
pVosContext
pVosContext
if(pSapCtx == NULL){                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }
pSapCtx == NULL
pSapCtx
pSapCtx
NULL
NULL
{                    VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));                    return VOS_FALSE;                }
VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"));
VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                            FL("psapCtx is NULL"))
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
FL("psapCtx is NULL")
FL
FL
"psapCtx is NULL"
return VOS_FALSE;
VOS_FALSE
VOS_FALSE
for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)                {                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }
staId = 0;
staId = 0
staId
staId
0
staId < WLAN_MAX_STA_COUNT
staId
staId
WLAN_MAX_STA_COUNT
WLAN_MAX_STA_COUNT
staId++
staId
staId
{                    if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }                }
if ((pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState))                    {                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }
(pSapCtx->aStaInfo[staId].isUsed) &&                            (WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState)
(pSapCtx->aStaInfo[staId].isUsed)
pSapCtx->aStaInfo[staId].isUsed
pSapCtx->aStaInfo[staId]
pSapCtx->aStaInfo
pSapCtx
pSapCtx
aStaInfo
staId
staId
isUsed
(WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState)
WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState
WLANTL_STA_CONNECTED
WLANTL_STA_CONNECTED
pSapCtx->aStaInfo[staId].tlSTAState
pSapCtx->aStaInfo[staId]
pSapCtx->aStaInfo
pSapCtx
pSapCtx
aStaInfo
staId
staId
tlSTAState
{                        staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);                        hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));                        if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }                        return VOS_TRUE;                    }
staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]);
staMac = (v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0])
staMac
staMac
(v_U8_t *) &(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0])
v_U8_t *
v_U8_t
v_U8_t
*
*
&(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0])
(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0])
pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0]
pSapCtx->aStaInfo[staId].macAddrSTA.bytes
pSapCtx->aStaInfo[staId].macAddrSTA
pSapCtx->aStaInfo[staId]
pSapCtx->aStaInfo
pSapCtx
pSapCtx
aStaInfo
staId
staId
macAddrSTA
bytes
0
hddLog(VOS_TRACE_LEVEL_ERROR,                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "                               "middle of WPS/EAPOL exchange.", __func__,                                MAC_ADDR_ARRAY(staMac));
if (session_id && reason)                        {                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }
session_id && reason
session_id
session_id
reason
reason
{                            *session_id = pAdapter->sessionId;                            *reason = eHDD_SAP_EAPOL_IN_PROGRESS;                        }
*session_id = pAdapter->sessionId;
*session_id = pAdapter->sessionId
*session_id
session_id
session_id
pAdapter->sessionId
pAdapter
pAdapter
sessionId
*reason = eHDD_SAP_EAPOL_IN_PROGRESS;
*reason = eHDD_SAP_EAPOL_IN_PROGRESS
*reason
reason
reason
eHDD_SAP_EAPOL_IN_PROGRESS
eHDD_SAP_EAPOL_IN_PROGRESS
return VOS_TRUE;
VOS_TRUE
VOS_TRUE
status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext );
status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext )
status
status
hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext )
hdd_get_next_adapter
hdd_get_next_adapter
pHddCtx
pHddCtx
pAdapterNode
pAdapterNode
&pNext
pNext
pNext
pAdapterNode = pNext;
pAdapterNode = pNext
pAdapterNode
pAdapterNode
pNext
pNext
return VOS_FALSE;
VOS_FALSE
VOS_FALSE
-----joern-----
(1,2,0)
(117,101,0)
(19,307,0)
(276,120,0)
(98,195,0)
(302,152,0)
(137,190,0)
(58,258,0)
(234,202,0)
(72,139,0)
(237,117,0)
(32,88,0)
(178,96,0)
(29,0,0)
(104,297,0)
(233,278,0)
(67,156,0)
(278,28,0)
(81,12,0)
(275,211,0)
(345,209,0)
(347,289,0)
(110,187,0)
(270,345,0)
(289,57,0)
(41,88,0)
(21,118,0)
(271,139,0)
(34,150,0)
(290,139,0)
(215,94,0)
(294,153,0)
(184,105,0)
(159,54,0)
(171,102,0)
(126,15,0)
(170,80,0)
(332,207,0)
(87,94,0)
(281,118,0)
(168,234,0)
(167,335,0)
(33,167,0)
(7,28,0)
(243,160,0)
(70,139,0)
(322,17,0)
(177,238,0)
(207,169,0)
(116,148,0)
(312,309,0)
(343,345,0)
(318,269,0)
(33,258,0)
(278,269,0)
(224,90,0)
(280,164,0)
(127,176,0)
(135,88,0)
(259,60,0)
(292,217,0)
(140,72,0)
(26,139,0)
(176,127,0)
(273,162,0)
(91,139,0)
(48,87,0)
(111,88,0)
(49,345,0)
(147,63,0)
(3,153,0)
(12,342,0)
(103,152,0)
(0,2,0)
(308,116,0)
(199,211,0)
(201,32,0)
(269,278,0)
(249,142,0)
(191,111,0)
(250,91,0)
(344,28,0)
(315,92,0)
(338,45,0)
(266,195,0)
(205,125,0)
(193,85,0)
(337,162,0)
(116,13,0)
(14,191,0)
(299,346,0)
(56,219,0)
(274,117,0)
(135,5,0)
(52,139,0)
(293,281,0)
(241,204,0)
(230,51,0)
(195,266,0)
(307,139,0)
(317,278,0)
(16,278,0)
(156,321,0)
(268,228,0)
(65,177,0)
(51,226,0)
(50,246,0)
(185,62,0)
(14,88,0)
(4,258,0)
(20,337,0)
(162,152,0)
(60,249,0)
(328,330,0)
(261,78,0)
(334,31,0)
(136,309,0)
(90,235,0)
(118,88,0)
(250,11,0)
(218,31,0)
(102,23,0)
(190,88,0)
(191,14,0)
(262,88,0)
(175,120,0)
(127,281,0)
(96,258,0)
(117,263,0)
(323,135,0)
(213,289,0)
(104,88,0)
(214,57,0)
(211,88,0)
(321,78,0)
(244,213,0)
(206,51,0)
(3,71,0)
(272,186,0)
(313,335,0)
(56,338,0)
(255,193,0)
(18,262,0)
(243,262,0)
(74,264,0)
(258,33,0)
(197,139,0)
(59,88,0)
(234,24,0)
(44,263,0)
(257,307,0)
(336,88,0)
(266,142,0)
(324,159,0)
(246,87,0)
(105,23,0)
(144,294,0)
(69,274,0)
(54,41,0)
(82,351,0)
(160,256,0)
(329,33,0)
(156,67,0)
(258,335,0)
(310,136,0)
(45,294,0)
(195,98,0)
(142,266,0)
(132,104,0)
(225,244,0)
(208,188,0)
(107,0,0)
(200,82,0)
(11,250,0)
(288,153,0)
(118,281,0)
(308,72,0)
(9,302,0)
(236,206,0)
(314,91,0)
(157,5,0)
(306,111,0)
(113,187,0)
(252,135,0)
(39,41,0)
(143,217,0)
(216,164,0)
(60,84,0)
(235,90,0)
(334,260,0)
(43,204,0)
(128,148,0)
(58,129,0)
(330,88,0)
(121,250,0)
(102,263,0)
(22,336,0)
(84,304,0)
(303,249,0)
(319,84,0)
(44,23,0)
(321,156,0)
(122,127,0)
(116,192,0)
(101,166,0)
(91,285,0)
(249,60,0)
(226,51,0)
(284,315,0)
(283,337,0)
(348,250,0)
(145,74,0)
(238,177,0)
(162,4,0)
(278,16,0)
(75,277,0)
(246,263,0)
(213,244,0)
(84,60,0)
(114,351,0)
(192,312,0)
(304,88,0)
(142,249,0)
(182,167,0)
(36,98,0)
(298,40,0)
(337,283,0)
(160,243,0)
(180,192,0)
(207,235,0)
(191,204,0)
(129,74,0)
(51,13,0)
(280,56,0)
(88,190,0)
(161,19,0)
(308,274,0)
(194,139,0)
(75,0,0)
(75,222,0)
(111,191,0)
(125,88,0)
(24,88,0)
(146,71,0)
(327,169,0)
(10,139,0)
(154,114,0)
(114,134,0)
(203,32,0)
(165,125,0)
(228,188,0)
(100,133,0)
(346,286,0)
(264,74,0)
(274,159,0)
(42,226,0)
(151,297,0)
(67,5,0)
(190,342,0)
(312,336,0)
(242,44,0)
(24,234,0)
(38,58,0)
(85,193,0)
(8,238,0)
(51,206,0)
(5,135,0)
(220,31,0)
(240,335,0)
(226,88,0)
(239,114,0)
(131,3,0)
(62,88,0)
(189,17,0)
(217,234,0)
(281,127,0)
(155,62,0)
(289,213,0)
(341,296,0)
(78,321,0)
(211,215,0)
(119,139,0)
(277,2,0)
(80,263,0)
(229,152,0)
(248,10,0)
(250,277,0)
(46,258,0)
(188,280,0)
(206,88,0)
(63,335,0)
(68,226,0)
(4,162,0)
(297,104,0)
(112,238,0)
(31,334,0)
(11,12,0)
(173,28,0)
(31,88,0)
(295,110,0)
(169,217,0)
(210,45,0)
(346,209,0)
(186,88,0)
(294,45,0)
(238,88,0)
(123,280,0)
(251,191,0)
(54,166,0)
(12,0,0)
(55,71,0)
(287,262,0)
(77,51,0)
(53,24,0)
(73,102,0)
(187,260,0)
(304,84,0)
(192,23,0)
(32,201,0)
(47,75,0)
(159,23,0)
(262,243,0)
(133,263,0)
(256,330,0)
(342,139,0)
(19,75,0)
(198,52,0)
(71,258,0)
(338,56,0)
(109,321,0)
(86,342,0)
(188,228,0)
(183,13,0)
(311,201,0)
(134,114,0)
(350,283,0)
(325,302,0)
(283,264,0)
(176,201,0)
(297,167,0)
(174,342,0)
(76,52,0)
(17,88,0)
(321,109,0)
(27,129,0)
(219,56,0)
(274,164,0)
(90,193,0)
(333,228,0)
(177,92,0)
(264,283,0)
(227,191,0)
(106,304,0)
(286,215,0)
(35,186,0)
(17,16,0)
(15,78,0)
(43,105,0)
(174,285,0)
(62,315,0)
(95,269,0)
(25,336,0)
(285,91,0)
(212,98,0)
(308,346,0)
(97,75,0)
(285,222,0)
(316,67,0)
(80,23,0)
(190,0,0)
(98,88,0)
(153,294,0)
(75,19,0)
(279,307,0)
(92,266,0)
(169,207,0)
(30,202,0)
(0,307,0)
(172,197,0)
(130,58,0)
(12,11,0)
(244,186,0)
(179,296,0)
(315,62,0)
(285,174,0)
(339,191,0)
(79,12,0)
(57,289,0)
(115,101,0)
(122,125,0)
(308,43,0)
(330,256,0)
(221,335,0)
(71,3,0)
(340,14,0)
(15,345,0)
(127,122,0)
(83,10,0)
(162,337,0)
(282,174,0)
(167,297,0)
(45,338,0)
(232,285,0)
(37,134,0)
(148,136,0)
(92,177,0)
(215,211,0)
(320,44,0)
(256,160,0)
(6,277,0)
(75,342,0)
(267,278,0)
(57,88,0)
(193,90,0)
(269,88,0)
(99,80,0)
(124,111,0)
(3,152,0)
(105,334,0)
(64,195,0)
(141,197,0)
(149,63,0)
(125,122,0)
(129,152,0)
(345,15,0)
(301,133,0)
(85,234,0)
(254,4,0)
(336,312,0)
(266,92,0)
(181,43,0)
(56,280,0)
(43,110,0)
(150,152,0)
(78,209,0)
(5,67,0)
(41,54,0)
(88,2,0)
(308,82,0)
(228,164,0)
(148,263,0)
(138,41,0)
(247,116,0)
(349,32,0)
(110,263,0)
(217,169,0)
(163,96,0)
(93,335,0)
(253,85,0)
(133,23,0)
(153,3,0)
(291,228,0)
(346,246,0)
(201,176,0)
(245,286,0)
(120,139,0)
(74,129,0)
(331,118,0)
(16,17,0)
(277,75,0)
(326,51,0)
(61,209,0)
(300,342,0)
(223,122,0)
(89,4,0)
(186,244,0)
(158,190,0)
(235,207,0)
(265,139,0)
(305,139,0)
(286,23,0)
(66,243,0)
(196,85,0)
(92,315,0)
(129,58,0)
(108,57,0)
(296,139,0)
(151,104,1)
(178,163,1)
(106,303,1)
(262,287,1)
(322,189,1)
(248,83,1)
(138,39,1)
(34,264,1)
(350,74,1)
(60,259,1)
(212,36,1)
(147,149,1)
(215,211,1)
(41,88,1)
(98,212,1)
(125,88,1)
(226,68,1)
(59,11,1)
(81,79,1)
(165,223,1)
(56,338,1)
(79,0,1)
(218,105,1)
(89,350,1)
(43,105,1)
(316,5,1)
(130,302,1)
(92,315,1)
(203,311,1)
(79,91,1)
(176,127,1)
(236,230,1)
(288,3,1)
(11,12,1)
(33,167,1)
(57,88,1)
(145,129,1)
(43,181,1)
(73,171,1)
(69,101,1)
(103,229,1)
(116,247,1)
(127,281,1)
(238,88,1)
(347,244,1)
(190,137,1)
(65,315,1)
(156,67,1)
(129,58,1)
(208,333,1)
(84,304,1)
(308,116,1)
(150,34,1)
(91,285,1)
(114,134,1)
(48,246,1)
(230,77,1)
(346,286,1)
(36,64,1)
(51,226,1)
(102,263,1)
(104,132,1)
(16,17,1)
(250,91,1)
(278,16,1)
(67,316,1)
(76,198,1)
(224,234,1)
(257,342,1)
(284,195,1)
(29,107,1)
(180,44,1)
(117,263,1)
(15,78,1)
(129,27,1)
(169,327,1)
(311,160,1)
(19,161,1)
(261,235,1)
(246,263,1)
(187,113,1)
(232,314,1)
(155,185,1)
(272,225,1)
(168,176,1)
(162,273,1)
(6,213,1)
(6,302,1)
(105,184,1)
(274,159,1)
(99,345,1)
(52,76,1)
(33,329,1)
(95,16,1)
(44,242,1)
(314,197,1)
(19,307,1)
(281,118,1)
(104,88,1)
(302,152,1)
(319,304,1)
(217,143,1)
(0,29,1)
(25,192,1)
(133,23,1)
(118,88,1)
(237,54,1)
(184,133,1)
(343,78,1)
(24,88,1)
(318,95,1)
(58,258,1)
(306,14,1)
(228,188,1)
(14,88,1)
(3,131,1)
(117,237,1)
(331,21,1)
(291,268,1)
(295,334,1)
(280,56,1)
(235,90,1)
(206,236,1)
(88,190,1)
(83,120,1)
(182,213,1)
(299,87,1)
(18,66,1)
(50,215,1)
(9,150,1)
(131,71,1)
(264,283,1)
(10,248,1)
(244,186,1)
(321,156,1)
(185,284,1)
(170,99,1)
(60,84,1)
(115,117,1)
(98,88,1)
(74,145,1)
(308,346,1)
(247,44,1)
(110,263,1)
(133,100,1)
(153,288,1)
(256,330,1)
(43,110,1)
(262,88,1)
(337,162,1)
(174,282,1)
(134,37,1)
(12,0,1)
(308,274,1)
(297,104,1)
(326,160,1)
(325,9,1)
(251,142,1)
(4,254,1)
(128,312,1)
(142,266,1)
(276,296,1)
(301,191,1)
(339,227,1)
(80,23,1)
(336,88,1)
(67,5,1)
(336,22,1)
(330,328,1)
(8,112,1)
(191,14,1)
(282,232,1)
(269,318,1)
(205,165,1)
(196,253,1)
(197,141,1)
(296,341,1)
(80,99,1)
(124,306,1)
(345,15,1)
(97,6,1)
(346,246,1)
(12,342,1)
(102,23,1)
(250,277,1)
(285,222,1)
(191,111,1)
(233,231,1)
(186,88,1)
(286,23,1)
(108,347,1)
(214,108,1)
(63,147,1)
(200,114,1)
(341,179,1)
(330,88,1)
(44,320,1)
(181,133,1)
(324,102,1)
(286,245,1)
(141,172,1)
(338,45,1)
(181,187,1)
(107,277,1)
(259,84,1)
(297,151,1)
(116,192,1)
(210,294,1)
(77,326,1)
(41,138,1)
(3,71,1)
(278,269,1)
(323,252,1)
(31,220,1)
(102,171,1)
(268,280,1)
(317,267,1)
(198,307,1)
(121,12,1)
(32,349,1)
(4,258,1)
(349,203,1)
(68,42,1)
(92,177,1)
(153,3,1)
(132,182,1)
(24,53,1)
(223,201,1)
(213,244,1)
(162,4,1)
(72,140,1)
(90,193,1)
(249,60,1)
(310,148,1)
(294,153,1)
(66,142,1)
(188,280,1)
(160,243,1)
(85,234,1)
(17,322,1)
(85,196,1)
(226,88,1)
(312,336,1)
(239,154,1)
(304,106,1)
(246,50,1)
(229,96,1)
(270,49,1)
(274,69,1)
(238,8,1)
(207,169,1)
(176,201,1)
(264,74,1)
(174,342,1)
(274,117,1)
(289,57,1)
(220,218,1)
(44,23,1)
(125,205,1)
(122,125,1)
(329,46,1)
(247,136,1)
(74,129,1)
(31,88,1)
(159,23,1)
(78,321,1)
(275,199,1)
(49,343,1)
(53,168,1)
(279,257,1)
(84,319,1)
(159,324,1)
(160,256,1)
(44,263,1)
(171,228,1)
(0,307,1)
(75,19,1)
(245,80,1)
(35,272,1)
(144,153,1)
(11,250,1)
(300,86,1)
(333,291,1)
(75,0,1)
(308,43,1)
(346,299,1)
(211,275,1)
(308,82,1)
(234,24,1)
(199,286,1)
(47,97,1)
(308,72,1)
(287,18,1)
(146,55,1)
(227,251,1)
(186,35,1)
(195,98,1)
(45,294,1)
(258,33,1)
(56,219,1)
(129,152,1)
(12,81,1)
(307,279,1)
(315,62,1)
(302,325,1)
(167,297,1)
(112,65,1)
(71,146,1)
(120,175,1)
(80,263,1)
(157,135,1)
(71,258,1)
(105,23,1)
(123,264,1)
(20,162,1)
(22,25,1)
(304,88,1)
(321,109,1)
(320,242,1)
(143,292,1)
(152,103,1)
(6,235,1)
(169,217,1)
(55,123,1)
(148,263,1)
(252,261,1)
(292,332,1)
(267,233,1)
(340,339,1)
(337,20,1)
(21,293,1)
(193,85,1)
(57,214,1)
(201,32,1)
(294,144,1)
(163,258,1)
(9,152,1)
(243,262,1)
(137,158,1)
(277,75,1)
(179,52,1)
(27,58,1)
(154,96,1)
(45,210,1)
(14,340,1)
(135,323,1)
(51,206,1)
(332,90,1)
(62,155,1)
(96,178,1)
(100,301,1)
(211,88,1)
(42,206,1)
(172,10,1)
(161,47,1)
(150,152,1)
(46,63,1)
(133,263,1)
(158,59,1)
(96,258,1)
(116,148,1)
(6,231,1)
(269,88,1)
(254,89,1)
(148,128,1)
(113,110,1)
(136,310,1)
(127,122,1)
(135,88,1)
(64,278,1)
(327,217,1)
(38,130,1)
(283,337,1)
(188,208,1)
(17,88,1)
(5,157,1)
(192,180,1)
(111,88,1)
(189,317,1)
(110,295,1)
(213,289,1)
(32,88,1)
(285,174,1)
(348,121,1)
(162,152,1)
(217,234,1)
(299,80,1)
(190,0,1)
(111,124,1)
(334,31,1)
(37,239,1)
(293,122,1)
(266,92,1)
(126,270,1)
(3,152,1)
(80,170,1)
(190,342,1)
(69,102,1)
(231,88,1)
(235,207,1)
(266,195,1)
(58,38,1)
(82,200,1)
(177,238,1)
(149,167,1)
(328,243,1)
(15,126,1)
(303,266,1)
(175,276,1)
(273,4,1)
(5,135,1)
(225,176,1)
(118,331,1)
(255,85,1)
(62,88,1)
(342,300,1)
(253,224,1)
(133,301,1)
(54,41,1)
(242,51,1)
(142,249,1)
(206,88,1)
(193,255,1)
(140,11,1)
(39,159,1)
(75,342,1)
(102,73,1)
(75,222,1)
(101,115,1)
(192,23,1)
(87,48,1)
(250,348,1)
(133,23,2)
(42,160,2)
(220,133,2)
(272,176,2)
(264,74,2)
(247,160,2)
(303,266,2)
(60,266,2)
(65,315,2)
(116,160,2)
(195,231,2)
(128,44,2)
(193,85,2)
(29,231,2)
(150,264,2)
(90,193,2)
(223,201,2)
(4,74,2)
(249,60,2)
(246,263,2)
(143,90,2)
(79,231,2)
(234,176,2)
(88,11,2)
(156,235,2)
(277,235,2)
(67,5,2)
(321,109,2)
(191,14,2)
(180,44,2)
(16,17,2)
(92,315,2)
(19,307,2)
(226,160,2)
(112,315,2)
(11,302,2)
(214,244,2)
(56,264,2)
(29,302,2)
(213,176,2)
(338,264,2)
(256,330,2)
(320,242,2)
(218,133,2)
(60,84,2)
(195,98,2)
(56,338,2)
(288,264,2)
(228,264,2)
(45,264,2)
(57,244,2)
(124,142,2)
(308,72,2)
(125,201,2)
(113,133,2)
(278,231,2)
(304,266,2)
(84,304,2)
(18,142,2)
(102,264,2)
(142,249,2)
(231,11,2)
(152,96,2)
(277,302,2)
(308,116,2)
(201,32,2)
(84,266,2)
(150,152,2)
(205,201,2)
(162,152,2)
(81,235,2)
(176,201,2)
(258,33,2)
(217,234,2)
(5,135,2)
(11,231,2)
(338,45,2)
(253,176,2)
(161,231,2)
(75,213,2)
(140,11,2)
(159,102,2)
(9,264,2)
(147,213,2)
(193,176,2)
(73,171,2)
(116,148,2)
(337,162,2)
(56,219,2)
(59,11,2)
(107,302,2)
(110,263,2)
(199,80,2)
(268,264,2)
(67,235,2)
(312,336,2)
(31,88,2)
(29,213,2)
(277,75,2)
(281,118,2)
(0,213,2)
(138,102,2)
(82,96,2)
(31,133,2)
(243,262,2)
(249,266,2)
(127,281,2)
(234,24,2)
(291,264,2)
(285,174,2)
(262,142,2)
(287,142,2)
(15,78,2)
(286,80,2)
(87,80,2)
(295,133,2)
(332,90,2)
(163,213,2)
(186,88,2)
(264,302,2)
(12,342,2)
(167,297,2)
(80,235,2)
(213,244,2)
(127,122,2)
(142,231,2)
(306,142,2)
(63,213,2)
(131,264,2)
(277,231,2)
(51,226,2)
(66,142,2)
(16,231,2)
(75,231,2)
(328,243,2)
(330,243,2)
(54,102,2)
(213,289,2)
(103,96,2)
(0,235,2)
(47,213,2)
(215,80,2)
(191,111,2)
(41,88,2)
(142,266,2)
(11,235,2)
(25,44,2)
(153,3,2)
(238,315,2)
(230,160,2)
(96,213,2)
(68,160,2)
(24,176,2)
(274,159,2)
(329,213,2)
(189,231,2)
(266,195,2)
(80,263,2)
(12,231,2)
(315,195,2)
(62,88,2)
(33,213,2)
(132,213,2)
(211,80,2)
(252,235,2)
(281,122,2)
(165,201,2)
(89,74,2)
(126,235,2)
(58,302,2)
(19,235,2)
(273,74,2)
(5,235,2)
(75,19,2)
(162,4,2)
(34,264,2)
(118,88,2)
(187,133,2)
(106,266,2)
(349,160,2)
(129,58,2)
(283,337,2)
(102,23,2)
(110,133,2)
(122,125,2)
(161,235,2)
(160,243,2)
(135,88,2)
(280,56,2)
(19,231,2)
(343,235,2)
(8,315,2)
(50,80,2)
(224,176,2)
(47,231,2)
(130,302,2)
(75,342,2)
(331,122,2)
(19,302,2)
(0,307,2)
(136,44,2)
(235,176,2)
(294,264,2)
(122,201,2)
(250,277,2)
(264,283,2)
(161,213,2)
(88,190,2)
(107,235,2)
(283,74,2)
(3,71,2)
(196,176,2)
(321,235,2)
(0,302,2)
(326,160,2)
(149,213,2)
(134,96,2)
(292,90,2)
(154,96,2)
(6,235,2)
(258,213,2)
(9,96,2)
(54,41,2)
(325,264,2)
(79,213,2)
(98,231,2)
(239,96,2)
(116,192,2)
(75,235,2)
(51,160,2)
(227,142,2)
(325,96,2)
(35,176,2)
(48,80,2)
(44,23,2)
(80,23,2)
(91,285,2)
(350,74,2)
(321,156,2)
(238,88,2)
(3,264,2)
(270,235,2)
(254,74,2)
(345,235,2)
(323,235,2)
(200,96,2)
(250,12,2)
(336,88,2)
(115,102,2)
(229,96,2)
(71,258,2)
(158,11,2)
(100,301,2)
(125,88,2)
(334,133,2)
(92,195,2)
(310,44,2)
(269,88,2)
(201,160,2)
(267,231,2)
(235,90,2)
(24,88,2)
(261,235,2)
(297,104,2)
(148,44,2)
(210,264,2)
(133,142,2)
(75,302,2)
(157,235,2)
(43,110,2)
(169,217,2)
(39,102,2)
(294,153,2)
(14,142,2)
(85,176,2)
(285,222,2)
(278,269,2)
(11,12,2)
(244,186,2)
(269,231,2)
(97,213,2)
(44,263,2)
(312,44,2)
(137,11,2)
(117,263,2)
(78,235,2)
(192,23,2)
(151,213,2)
(280,264,2)
(181,142,2)
(192,44,2)
(225,176,2)
(160,256,2)
(233,231,2)
(104,88,2)
(12,213,2)
(178,213,2)
(145,302,2)
(107,231,2)
(146,264,2)
(289,244,2)
(345,15,2)
(33,167,2)
(190,0,2)
(97,235,2)
(160,142,2)
(99,235,2)
(297,213,2)
(98,88,2)
(246,80,2)
(108,244,2)
(6,213,2)
(47,235,2)
(182,213,2)
(153,264,2)
(250,91,2)
(162,74,2)
(167,213,2)
(174,342,2)
(102,263,2)
(49,235,2)
(206,88,2)
(96,258,2)
(228,188,2)
(148,263,2)
(235,207,2)
(184,133,2)
(14,88,2)
(330,88,2)
(266,231,2)
(46,213,2)
(114,134,2)
(156,67,2)
(75,0,2)
(203,160,2)
(79,302,2)
(168,176,2)
(47,302,2)
(217,90,2)
(188,264,2)
(43,105,2)
(38,302,2)
(319,266,2)
(346,235,2)
(81,213,2)
(81,302,2)
(32,88,2)
(304,88,2)
(215,211,2)
(339,142,2)
(129,302,2)
(77,160,2)
(251,142,2)
(81,231,2)
(159,23,2)
(101,102,2)
(129,152,2)
(11,250,2)
(176,160,2)
(244,176,2)
(206,160,2)
(274,117,2)
(334,31,2)
(274,264,2)
(21,122,2)
(346,246,2)
(190,11,2)
(333,264,2)
(12,0,2)
(75,222,2)
(29,235,2)
(17,88,2)
(255,176,2)
(176,127,2)
(64,231,2)
(308,43,2)
(299,235,2)
(266,92,2)
(45,294,2)
(92,177,2)
(58,258,2)
(0,231,2)
(135,235,2)
(327,90,2)
(161,302,2)
(43,142,2)
(191,142,2)
(78,321,2)
(237,102,2)
(188,280,2)
(236,160,2)
(6,302,2)
(15,235,2)
(293,122,2)
(12,302,2)
(317,231,2)
(243,142,2)
(12,235,2)
(275,80,2)
(111,142,2)
(97,302,2)
(121,12,2)
(177,238,2)
(208,264,2)
(105,133,2)
(97,231,2)
(316,235,2)
(51,206,2)
(20,74,2)
(85,234,2)
(242,160,2)
(111,88,2)
(107,213,2)
(127,201,2)
(118,122,2)
(348,12,2)
(336,44,2)
(41,102,2)
(207,169,2)
(95,231,2)
(123,264,2)
(340,142,2)
(346,286,2)
(57,88,2)
(19,213,2)
(315,62,2)
(90,176,2)
(286,23,2)
(133,263,2)
(318,231,2)
(104,213,2)
(55,264,2)
(22,44,2)
(11,213,2)
(79,235,2)
(347,244,2)
(289,57,2)
(72,11,2)
(337,74,2)
(27,302,2)
(17,231,2)
(308,274,2)
(190,342,2)
(308,82,2)
(262,88,2)
(32,160,2)
(226,88,2)
(74,129,2)
(284,195,2)
(212,231,2)
(37,96,2)
(71,264,2)
(3,152,2)
(186,176,2)
(185,195,2)
(44,160,2)
(117,102,2)
(171,264,2)
(302,96,2)
(277,213,2)
(245,80,2)
(36,231,2)
(69,264,2)
(259,266,2)
(311,160,2)
(114,96,2)
(105,23,2)
(302,152,2)
(155,195,2)
(144,264,2)
(322,231,2)
(301,142,2)
(256,243,2)
(278,16,2)
(6,231,2)
(177,315,2)
(74,302,2)
(324,102,2)
(62,195,2)
(169,90,2)
(4,258,2)
(302,264,2)
(170,99,2)
(207,90,2)
(308,346,2)
(53,176,2)
(211,88,2)
-----------------------------------
(0,pAdapterNode = pNext)
(1,if( pAdapter )
(2,)
(3,pSapCtx->aStaInfo[staId])
(4,pSapCtx->aStaInfo)
(5,pAdapter->macAddressCurrent.bytes)
(6,status)
(7,if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(8,device_mode)
(9,staId)
(10,staId = 0)
(11,NULL != pAdapterNode && VOS_STATUS_SUCCESS == status)
(12,NULL != pAdapterNode)
(13,)
(14,WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(15,MAC_ADDR_ARRAY(staMac)
(16,hdd_device_modetoString(pAdapter->device_mode)
(17,pAdapter->device_mode)
(18,pAdapter)
(19,&pNext)
(20,tlSTAState)
(21,pAdapter)
(22,sessionId)
(23,v_U8_t *session_id)
(24,WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(25,pAdapter)
(26,status)
(27,staId)
(28,)
(29,pNext)
(30,if ((eConnectionState_Associated == pHddStaCtx->conn_info.connState)
(31,pAdapter->sessionId)
(32,pAdapter->device_mode)
(33,VOS_GET_SAP_CB(pVosContext)
(34,staId)
(35,device_mode)
(36,pAdapter)
(37,"psapCtx is NULL")
(38,aStaInfo)
(39,pAdapter)
(40,)
(41,pAdapter->sessionId)
(42,pAdapter)
(43,return VOS_TRUE;)
(44,session_id && reason)
(45,pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0])
(46,pSapCtx)
(47,pAdapterNode)
(48,eHDD_EAPOL_IN_PROGRESS)
(49,"%s: client " MAC_ADDRESS_STR\n\\n                           " is in the middle of WPS/EAPOL exchange.")
(50,reason)
(51,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                       "%s: %p(%d)
(52,*pHddStaCtx = NULL)
(53,pAdapter)
(54,*session_id = pAdapter->sessionId)
(55,pSapCtx)
(56,(v_U8_t *)
(57,pAdapter->device_mode)
(58,pSapCtx->aStaInfo)
(59,pAdapter)
(60,(WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(61,if (session_id && reason)
(62,pAdapter->device_mode)
(63,pSapCtx = NULL)
(64,WLAN_HDD_INFRA_STATION)
(65,WLAN_HDD_P2P_DEVICE)
(66,WLAN_HDD_INFRA_STATION)
(67,pAdapter->macAddressCurrent.bytes[0])
(68,sessionId)
(69,VOS_TRUE)
(70,pNext)
(71,pSapCtx->aStaInfo)
(72,return VOS_FALSE;)
(73,reason)
(74,pSapCtx->aStaInfo[staId].isUsed)
(75,hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext )
(76,NULL)
(77,"%s: %p(%d)
(78,staMac = (v_U8_t *)
(79,NULL)
(80,session_id && reason)
(81,pAdapterNode)
(82,return VOS_FALSE;)
(83,staId)
(84,(WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(85,pHddStaCtx->conn_info)
(86,pAdapterNode)
(87,*reason = eHDD_EAPOL_IN_PROGRESS)
(88,pAdapter = pAdapterNode->pAdapter)
(89,pSapCtx)
(90,eConnectionState_Associated == pHddStaCtx->conn_info.connState)
(91,status = hdd_get_front_adapter ( pHddCtx, &pAdapterNode )
(92,(WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
(93,for (staId = 0; staId < WLAN_MAX_STA_COUNT; staId++)
(94,)
(95,pAdapter)
(96,pSapCtx == NULL)
(97,pHddCtx)
(98,pAdapter->device_mode)
(99,session_id)
(100,reason)
(101,*reason = eHDD_SAP_EAPOL_IN_PROGRESS)
(102,session_id && reason)
(103,0)
(104,WLAN_HDD_GET_CTX(pAdapter)
(105,*session_id)
(106,pAdapter)
(107,pAdapterNode)
(108,pAdapter)
(109,v_U8_t *)
(110,*reason)
(111,pAdapter->sessionId)
(112,pAdapter)
(113,eHDD_CONNECTION_IN_PROGRESS)
(114,VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,\n\\n                            FL("psapCtx is NULL")
(115,eHDD_SAP_EAPOL_IN_PROGRESS)
(116,return VOS_TRUE;)
(117,*reason)
(118,pAdapter->device_mode)
(119,pAdapterNode)
(120,status = 0)
(121,VOS_STATUS_SUCCESS)
(122,WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
(123,staMac)
(124,sessionId)
(125,pAdapter->device_mode)
(126,staMac)
(127,(WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
(128,reason)
(129,pSapCtx->aStaInfo[staId])
(130,pSapCtx)
(131,staId)
(132,pAdapter)
(133,session_id && reason)
(134,FL("psapCtx is NULL")
(135,pAdapter->macAddressCurrent)
(136,*reason = eHDD_REASSOC_IN_PROGRESS)
(137,pAdapter)
(138,sessionId)
(139,)
(140,VOS_FALSE)
(141,NULL)
(142,((WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(143,conn_info)
(144,bytes)
(145,isUsed)
(146,aStaInfo)
(147,NULL)
(148,*reason)
(149,pSapCtx)
(150,staId++)
(151,pvosContext)
(152,staId = 0)
(153,pSapCtx->aStaInfo[staId].macAddrSTA)
(154,VOS_MODULE_ID_HDD)
(155,device_mode)
(156,&(pAdapter->macAddressCurrent.bytes[0])
(157,bytes)
(158,pAdapterNode)
(159,*session_id)
(160,(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(161,pNext)
(162,pSapCtx->aStaInfo[staId])
(163,pSapCtx)
(164,)
(165,pAdapter)
(166,)
(167,pVosContext = ( WLAN_HDD_GET_CTX(pAdapter)
(168,pHddStaCtx)
(169,pHddStaCtx->conn_info.uIsAuthenticated)
(170,reason)
(171,session_id)
(172,staMac)
(173,if (((WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(174,&pAdapterNode)
(175,0)
(176,(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(177,WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)
(178,NULL)
(179,pAdapter)
(180,session_id)
(181,VOS_TRUE)
(182,pVosContext)
(183,if (session_id && reason)
(184,session_id)
(185,pAdapter)
(186,pAdapter->device_mode)
(187,*reason = eHDD_CONNECTION_IN_PROGRESS)
(188,MAC_ADDR_ARRAY(staMac)
(189,pAdapter)
(190,pAdapterNode->pAdapter)
(191,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                       "%s: %p(%d)
(192,*session_id)
(193,pHddStaCtx->conn_info.connState)
(194,while ( NULL != pAdapterNode && VOS_STATUS_SUCCESS == status )
(195,WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(196,conn_info)
(197,*staMac = NULL)
(198,pHddStaCtx)
(199,pAdapter)
(200,VOS_FALSE)
(201,WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(202,)
(203,pAdapter)
(204,)
(205,device_mode)
(206,WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(207,VOS_FALSE == pHddStaCtx->conn_info.uIsAuthenticated)
(208,staMac)
(209,)
(210,0)
(211,pAdapter->sessionId)
(212,device_mode)
(213,(WLAN_HDD_SOFTAP == pAdapter->device_mode)
(214,device_mode)
(215,*session_id = pAdapter->sessionId)
(216,if (session_id && reason)
(217,pHddStaCtx->conn_info)
(218,pAdapter)
(219,v_U8_t *)
(220,sessionId)
(221,pSapCtx)
(222,hdd_context_t *pHddCtx)
(223,WLAN_HDD_P2P_CLIENT)
(224,eConnectionState_Associated)
(225,WLAN_HDD_SOFTAP)
(226,pAdapter->sessionId)
(227,"%s: %p(%d)
(228,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                               "%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "\n\\n                               "middle of WPS/EAPOL exchange.", __func__,\n\\n                                MAC_ADDR_ARRAY(staMac)
(229,staId)
(230,__func__)
(231,pAdapter)
(232,pHddCtx)
(233,VOS_TRACE_LEVEL_INFO)
(234,pHddStaCtx = WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(235,(eConnectionState_Associated == pHddStaCtx->conn_info.connState)
(236,pAdapter)
(237,reason)
(238,pAdapter->device_mode)
(239,VOS_TRACE_LEVEL_ERROR)
(240,pVosContext)
(241,if (session_id && reason)
(242,session_id)
(243,WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(244,WLAN_HDD_SOFTAP == pAdapter->device_mode)
(245,session_id)
(246,*reason)
(247,VOS_TRUE)
(248,0)
(249,eConnectionState_Connecting ==\n\\n                (WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(250,VOS_STATUS_SUCCESS == status)
(251,VOS_TRACE_LEVEL_ERROR)
(252,pAdapter)
(253,pHddStaCtx)
(254,aStaInfo)
(255,connState)
(256,smeNeighborMiddleOfRoaming(WLAN_HDD_GET_HAL_CTX(pAdapter)
(257,pNext)
(258,pSapCtx = VOS_GET_SAP_CB(pVosContext)
(259,connState)
(260,)
(261,staMac)
(262,pAdapter->device_mode)
(263,scan_reject_states *reason)
(264,(pSapCtx->aStaInfo[staId].isUsed)
(265,staId)
(266,(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(267,"%s: Adapter with device mode %s (%d)
(268,VOS_TRACE_LEVEL_ERROR)
(269,pAdapter->device_mode)
(270,__func__)
(271,pHddStaCtx)
(272,pAdapter)
(273,staId)
(274,return VOS_TRUE;)
(275,sessionId)
(276,status)
(277,status = hdd_get_next_adapter ( pHddCtx, pAdapterNode, &pNext )
(278,hddLog(VOS_TRACE_LEVEL_INFO,\n\\n                    "%s: Adapter with device mode %s (%d)
(279,NULL)
(280,staMac = (v_U8_t *)
(281,WLAN_HDD_P2P_DEVICE == pAdapter->device_mode)
(282,pAdapterNode)
(283,WLANTL_STA_CONNECTED == pSapCtx->aStaInfo[staId].tlSTAState)
(284,WLAN_HDD_P2P_CLIENT)
(285,hdd_get_front_adapter ( pHddCtx, &pAdapterNode )
(286,*session_id)
(287,device_mode)
(288,macAddrSTA)
(289,WLAN_HDD_P2P_GO == pAdapter->device_mode)
(290,pAdapter)
(291,"%s: client " MAC_ADDRESS_STR " of SoftAP/P2P-GO is in the "\n\\n                               "middle of WPS/EAPOL exchange.")
(292,pHddStaCtx)
(293,WLAN_HDD_P2P_DEVICE)
(294,pSapCtx->aStaInfo[staId].macAddrSTA.bytes)
(295,reason)
(296,*pAdapter = NULL)
(297,( WLAN_HDD_GET_CTX(pAdapter)
(298,if ((pSapCtx->aStaInfo[staId].isUsed)
(299,VOS_TRUE)
(300,NULL)
(301,session_id)
(302,staId < WLAN_MAX_STA_COUNT)
(303,eConnectionState_Connecting)
(304,WLAN_HDD_GET_STATION_CTX_PTR(pAdapter)
(305,staMac)
(306,pAdapter)
(307,*pNext = NULL)
(308,RET)
(309,)
(310,eHDD_REASSOC_IN_PROGRESS)
(311,WLAN_HDD_INFRA_STATION)
(312,*session_id = pAdapter->sessionId)
(313,if(pSapCtx == NULL)
(314,status)
(315,WLAN_HDD_P2P_CLIENT == pAdapter->device_mode)
(316,0)
(317,__func__)
(318,device_mode)
(319,conn_info)
(320,reason)
(321,(v_U8_t *)
(322,device_mode)
(323,macAddressCurrent)
(324,session_id)
(325,WLAN_MAX_STA_COUNT)
(326,VOS_TRACE_LEVEL_ERROR)
(327,uIsAuthenticated)
(328,pAdapter)
(329,pVosContext)
(330,WLAN_HDD_GET_HAL_CTX(pAdapter)
(331,device_mode)
(332,VOS_FALSE)
(333,__func__)
(334,*session_id = pAdapter->sessionId)
(335,)
(336,pAdapter->sessionId)
(337,pSapCtx->aStaInfo[staId].tlSTAState)
(338,&(pSapCtx->aStaInfo[staId].macAddrSTA.bytes[0])
(339,__func__)
(340,pAdapter)
(341,NULL)
(342,*pAdapterNode = NULL)
(343,VOS_TRACE_LEVEL_ERROR)
(344,if ((WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(345,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                           "%s: client " MAC_ADDRESS_STR\n\\n                           " is in the middle of WPS/EAPOL exchange.", __func__,\n\\n                            MAC_ADDR_ARRAY(staMac)
(346,return VOS_TRUE;)
(347,WLAN_HDD_P2P_GO)
(348,status)
(349,device_mode)
(350,WLANTL_STA_CONNECTED)
(351,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^