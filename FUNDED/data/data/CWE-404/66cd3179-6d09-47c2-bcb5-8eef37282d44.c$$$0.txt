-----label-----
1
-----code-----
int arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,
		 void *cpu_addr, dma_addr_t handle, size_t size,
		 struct dma_attrs *attrs)
{
	unsigned long pfn = dma_to_pfn(dev, handle);
	struct page *page;
	int ret;

	/* If the PFN is not valid, we do not have a struct page */
	if (!pfn_valid(pfn))
		return -ENXIO;

	page = pfn_to_page(pfn);

	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
	if (unlikely(ret))
		return ret;

	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
38,39
38,40
38,41
38,42
38,43
38,44
38,45
38,46
38,47
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
45,48
46,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
71,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
88,92
89,90
91,92
94,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
105,106
106,107
106,108
106,109
106,110
106,111
107,108
109,110
109,111
110,111
113,114
115,116
115,117
116,117
118,119
121,122
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,24,26,29,31,34,36,37,41,43,47,49,51,55,57,58,61,63,68,70,74,78,81,83,87,90,92,93,95,99,101,104,108,111,112,114,117,119,120,122
-----computeFrom-----
76,77
76,78
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,		 void *cpu_addr, dma_addr_t handle, size_t size,		 struct dma_attrs *attrs){	unsigned long pfn = dma_to_pfn(dev, handle);	struct page *page;	int ret;	/* If the PFN is not valid, we do not have a struct page */	if (!pfn_valid(pfn))		return -ENXIO;	page = pfn_to_page(pfn);	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);	if (unlikely(ret))		return ret;	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);	return 0;}
int
arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,		 void *cpu_addr, dma_addr_t handle, size_t size,		 struct dma_attrs *attrs)
arm_dma_get_sgtable
struct device *dev
struct device
device
*dev
*
dev
struct sg_table *sgt
struct sg_table
sg_table
*sgt
*
sgt
void *cpu_addr
void
*cpu_addr
*
cpu_addr
dma_addr_t handle
dma_addr_t
dma_addr_t
handle
handle
size_t size
size_t
size_t
size
size
struct dma_attrs *attrs
struct dma_attrs
dma_attrs
*attrs
*
attrs
{	unsigned long pfn = dma_to_pfn(dev, handle);	struct page *page;	int ret;	/* If the PFN is not valid, we do not have a struct page */	if (!pfn_valid(pfn))		return -ENXIO;	page = pfn_to_page(pfn);	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);	if (unlikely(ret))		return ret;	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);	return 0;}
unsigned long pfn = dma_to_pfn(dev, handle);
unsigned long pfn = dma_to_pfn(dev, handle);
unsigned long
pfn = dma_to_pfn(dev, handle)
pfn
= dma_to_pfn(dev, handle)
dma_to_pfn(dev, handle)
dma_to_pfn
dma_to_pfn
dev
dev
handle
handle
struct page *page;
struct page *page;
struct page
page
*page
*
page
int ret;
int ret;
int
ret
ret
if (!pfn_valid(pfn))		return -ENXIO;
!pfn_valid(pfn)
pfn_valid(pfn)
pfn_valid
pfn_valid
pfn
pfn
return -ENXIO;
-ENXIO
ENXIO
ENXIO
page = pfn_to_page(pfn);
page = pfn_to_page(pfn)
page
page
pfn_to_page(pfn)
pfn_to_page
pfn_to_page
pfn
pfn
ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
ret = sg_alloc_table(sgt, 1, GFP_KERNEL)
ret
ret
sg_alloc_table(sgt, 1, GFP_KERNEL)
sg_alloc_table
sg_alloc_table
sgt
sgt
1
GFP_KERNEL
GFP_KERNEL
if (unlikely(ret))		return ret;
unlikely(ret)
unlikely
unlikely
ret
ret
return ret;
ret
ret
sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);
sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0)
sg_set_page
sg_set_page
sgt->sgl
sgt
sgt
sgl
page
page
PAGE_ALIGN(size)
PAGE_ALIGN
PAGE_ALIGN
size
size
0
return 0;
0
-----joern-----
(0,26,0)
(34,40,0)
(8,16,0)
(30,36,0)
(45,34,0)
(31,19,0)
(39,26,0)
(26,36,0)
(6,40,0)
(34,13,0)
(19,40,0)
(34,30,0)
(2,19,0)
(15,19,0)
(15,5,0)
(13,23,0)
(13,34,0)
(17,19,0)
(7,40,0)
(20,2,0)
(42,39,0)
(27,31,0)
(31,21,0)
(18,39,0)
(1,40,0)
(31,37,0)
(19,31,0)
(30,34,0)
(4,40,0)
(32,7,0)
(34,20,0)
(22,18,0)
(20,40,0)
(25,2,0)
(9,7,0)
(11,26,0)
(24,26,0)
(2,20,0)
(16,41,0)
(9,41,0)
(39,40,0)
(12,40,0)
(3,31,0)
(5,15,0)
(9,14,0)
(33,34,0)
(14,39,0)
(43,15,0)
(10,40,0)
(35,13,0)
(44,20,0)
(28,30,0)
(29,30,0)
(38,14,0)
(26,39,0)
(3,17,1)
(38,18,1)
(43,19,1)
(34,20,1)
(44,5,1)
(14,38,1)
(8,5,1)
(19,31,1)
(25,44,1)
(5,15,1)
(2,25,1)
(35,33,1)
(26,11,1)
(39,26,1)
(11,24,1)
(13,35,1)
(30,36,1)
(29,18,1)
(31,27,1)
(33,30,1)
(20,2,1)
(42,20,1)
(45,13,1)
(18,22,1)
(32,34,1)
(13,23,1)
(30,28,1)
(7,32,1)
(0,42,1)
(31,21,1)
(2,19,1)
(41,16,1)
(28,29,1)
(16,8,1)
(34,30,1)
(15,19,1)
(14,39,1)
(15,43,1)
(18,39,1)
(9,14,1)
(27,3,1)
(22,39,1)
(9,7,1)
(34,45,1)
(24,0,1)
(34,13,1)
(9,41,1)
(26,36,1)
(31,37,1)
(39,5,2)
(18,39,2)
(14,18,2)
(9,14,2)
(42,5,2)
(9,41,2)
(18,5,2)
(8,5,2)
(26,5,2)
(20,2,2)
(13,23,2)
(13,18,2)
(30,18,2)
(22,5,2)
(45,18,2)
(16,5,2)
(44,5,2)
(34,13,2)
(11,5,2)
(19,31,2)
(34,18,2)
(5,15,2)
(34,20,2)
(14,39,2)
(29,18,2)
(2,19,2)
(26,36,2)
(25,5,2)
(34,30,2)
(39,26,2)
(31,21,2)
(35,18,2)
(30,36,2)
(15,19,2)
(20,5,2)
(24,5,2)
(0,5,2)
(38,18,2)
(33,18,2)
(28,18,2)
(32,18,2)
(7,18,2)
(9,7,2)
(31,37,2)
(2,5,2)
(41,5,2)
-----------------------------------
(0,sgt)
(1,if (unlikely(ret)
(2,pfn_to_page(pfn)
(3,dev)
(4,pfn)
(5,!pfn_valid(pfn)
(6,if (!pfn_valid(pfn)
(7,return 0;)
(8,ENXIO)
(9,RET)
(10,page)
(11,GFP_KERNEL)
(12,ret)
(13,PAGE_ALIGN(size)
(14,return ret;)
(15,pfn_valid(pfn)
(16,-ENXIO)
(17,pfn)
(18,unlikely(ret)
(19,pfn = dma_to_pfn(dev, handle)
(20,page = pfn_to_page(pfn)
(21,dma_addr_t handle)
(22,ret)
(23,size_t size)
(24,1)
(25,pfn)
(26,sg_alloc_table(sgt, 1, GFP_KERNEL)
(27,handle)
(28,sgl)
(29,sgt)
(30,sgt->sgl)
(31,dma_to_pfn(dev, handle)
(32,0)
(33,page)
(34,sg_set_page(sgt->sgl, page, PAGE_ALIGN(size)
(35,size)
(36,struct sg_table *sgt)
(37,struct device *dev)
(38,ret)
(39,ret = sg_alloc_table(sgt, 1, GFP_KERNEL)
(40,)
(41,return -ENXIO;)
(42,ret)
(43,pfn)
(44,page)
(45,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^