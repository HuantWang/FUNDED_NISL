-----label-----
1
-----code-----
void CWE590_Free_Memory_Not_on_Heap__free_long_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType myStruct)
{
    long * data = myStruct.structFirst;
    printLongLine(data[0]);
    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,7,9,13,15,16,20,21,25,28,29,33,35
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE590_Free_Memory_Not_on_Heap__free_long_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType myStruct){    long * data = myStruct.structFirst;    printLongLine(data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
void
CWE590_Free_Memory_Not_on_Heap__free_long_static_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType myStruct)
CWE590_Free_Memory_Not_on_Heap__free_long_static_67b_badSink
CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType myStruct
CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType
CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType
myStruct
myStruct
{    long * data = myStruct.structFirst;    printLongLine(data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
long * data = myStruct.structFirst;
long * data = myStruct.structFirst;
long
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
printLongLine(data[0]);
printLongLine(data[0])
printLongLine
printLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(8,5,0)
(3,5,0)
(0,8,0)
(14,8,0)
(2,13,0)
(0,7,0)
(14,5,0)
(8,13,0)
(13,9,0)
(7,5,0)
(4,14,0)
(11,8,0)
(1,0,0)
(13,8,0)
(12,0,0)
(7,0,0)
(10,13,0)
(0,12,1)
(13,9,1)
(8,13,1)
(1,8,1)
(6,14,1)
(7,0,1)
(14,4,1)
(0,8,1)
(2,10,1)
(14,8,1)
(10,11,1)
(13,2,1)
(12,1,1)
(4,7,1)
(7,0,2)
(13,9,2)
(0,8,2)
(8,13,2)
(14,8,2)
-----------------------------------
(0,data[0])
(1,data)
(2,structFirst)
(3,data)
(4,data)
(5,)
(6,RET)
(7,printLongLine(data[0])
(8,* data = myStruct.structFirst)
(9,CWE590_Free_Memory_Not_on_Heap__free_long_static_67_structType myStruct)
(10,myStruct)
(11,data)
(12,0)
(13,myStruct.structFirst)
(14,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^