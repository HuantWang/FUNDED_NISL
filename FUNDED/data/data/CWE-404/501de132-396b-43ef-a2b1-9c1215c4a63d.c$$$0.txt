-----label-----
0
-----code-----
int
command_line_get_integer (const char* prompt, int* value)
{
        char     def_str [10];
        char*    input;
        int      valid;

        snprintf (def_str, 10, "%d", *value);
        input = command_line_get_word (prompt, *value ? def_str : NULL,
                                       NULL, 1);
        if (!input)
                return 0;
        valid = sscanf (input, "%d", value);
        free (input);
        return valid;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
16,17
17,18
17,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
26,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
35,38
35,39
35,40
36,37
38,39
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
49,53
49,54
50,51
52,53
54,55
54,56
54,57
55,56
56,57
58,59
60,61
62,63
65,66
65,67
66,67
67,68
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
-----nextToken-----
2,4,6,8,9,11,13,14,18,20,22,25,27,28,31,33,37,39,40,41,44,48,51,53,57,59,61,63,64,68,70,74,77,79,80,82,86,88,91
-----computeFrom-----
46,47
46,48
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
intcommand_line_get_integer (const char* prompt, int* value){        char     def_str [10];        char*    input;        int      valid;        snprintf (def_str, 10, "%d", *value);        input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1);        if (!input)                return 0;        valid = sscanf (input, "%d", value);        free (input);        return valid;}
int
command_line_get_integer (const char* prompt, int* value)
command_line_get_integer
const char* prompt
const char
* prompt
*
prompt
int* value
int
* value
*
value
{        char     def_str [10];        char*    input;        int      valid;        snprintf (def_str, 10, "%d", *value);        input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1);        if (!input)                return 0;        valid = sscanf (input, "%d", value);        free (input);        return valid;}
char     def_str [10];
char     def_str [10];
char
def_str [10]
def_str
[10]
10
char*    input;
char*    input;
char
*    input
*
input
int      valid;
int      valid;
int
valid
valid
snprintf (def_str, 10, "%d", *value);
snprintf (def_str, 10, "%d", *value)
snprintf
snprintf
def_str
def_str
10
"%d"
*value
value
value
input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1);
input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1)
input
input
command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1)
command_line_get_word
command_line_get_word
prompt
prompt
*value ? def_str : NULL
*value
value
value
def_str
def_str
NULL
NULL
NULL
NULL
1
if (!input)                return 0;
!input
input
input
return 0;
0
valid = sscanf (input, "%d", value);
valid = sscanf (input, "%d", value)
valid
valid
sscanf (input, "%d", value)
sscanf
sscanf
input
input
"%d"
value
value
free (input);
free (input)
free
free
input
input
return valid;
valid
valid
-----joern-----
(36,14,0)
(33,12,0)
(17,21,0)
(16,32,0)
(9,32,0)
(24,28,0)
(31,12,0)
(25,23,0)
(22,23,0)
(1,25,0)
(37,22,0)
(35,32,0)
(4,13,0)
(13,28,0)
(5,32,0)
(15,32,0)
(8,35,0)
(3,17,0)
(0,14,0)
(12,21,0)
(7,31,0)
(18,17,0)
(6,32,0)
(25,14,0)
(19,38,0)
(35,13,0)
(21,17,0)
(19,35,0)
(30,21,0)
(12,32,0)
(11,28,0)
(2,38,0)
(10,28,0)
(15,12,0)
(28,13,0)
(20,14,0)
(22,17,0)
(29,21,0)
(28,12,0)
(14,25,0)
(34,21,0)
(14,32,0)
(13,32,0)
(26,15,0)
(28,23,0)
(21,27,0)
(17,22,0)
(21,12,0)
(19,35,1)
(11,4,1)
(19,38,1)
(35,13,1)
(12,21,1)
(2,31,1)
(15,26,1)
(21,34,1)
(24,10,1)
(10,11,1)
(38,2,1)
(0,20,1)
(21,17,1)
(28,23,1)
(17,3,1)
(29,33,1)
(18,22,1)
(26,13,1)
(25,1,1)
(15,12,1)
(33,14,1)
(22,37,1)
(4,31,1)
(22,23,1)
(25,23,1)
(17,18,1)
(28,24,1)
(8,15,1)
(35,8,1)
(21,27,1)
(31,12,1)
(14,25,1)
(17,22,1)
(3,22,1)
(13,28,1)
(1,36,1)
(37,29,1)
(34,30,1)
(28,12,1)
(31,7,1)
(30,17,1)
(7,12,1)
(36,0,1)
(11,31,2)
(15,31,2)
(18,22,2)
(28,31,2)
(22,23,2)
(3,22,2)
(21,17,2)
(4,31,2)
(15,12,2)
(24,31,2)
(28,23,2)
(17,22,2)
(12,21,2)
(14,25,2)
(25,23,2)
(19,38,2)
(2,31,2)
(8,31,2)
(21,27,2)
(31,12,2)
(13,28,2)
(13,31,2)
(28,12,2)
(10,31,2)
(38,31,2)
(19,35,2)
(35,13,2)
(26,31,2)
(35,31,2)
-----------------------------------
(0,10)
(1,value)
(2,0)
(3,def_str)
(4,valid)
(5,input)
(6,if (!input)
(7,input)
(8,valid)
(9,def_str)
(10,"%d")
(11,input)
(12,input = command_line_get_word (prompt, *value ? def_str : NULL,\n\\n                                       NULL, 1)
(13,valid = sscanf (input, "%d", value)
(14,snprintf (def_str, 10, "%d", *value)
(15,free (input)
(16,valid)
(17,*value ? def_str : NULL)
(18,NULL)
(19,RET)
(20,def_str)
(21,command_line_get_word (prompt, *value ? def_str : NULL,\n\\n                                       NULL, 1)
(22,*value)
(23,int* value)
(24,value)
(25,*value)
(26,input)
(27,const char* prompt)
(28,sscanf (input, "%d", value)
(29,prompt)
(30,NULL)
(31,!input)
(32,)
(33,input)
(34,1)
(35,return valid;)
(36,"%d")
(37,value)
(38,return 0;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^