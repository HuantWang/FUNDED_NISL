-----label-----
1
-----code-----
int arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,
		 void *cpu_addr, dma_addr_t handle, size_t size,
		 struct dma_attrs *attrs)
{
	struct page *page = pfn_to_page(dma_to_pfn(dev, handle));
	int ret;

	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
	if (unlikely(ret))
		return ret;

	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
23,24
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
38,39
38,40
38,41
38,42
38,43
38,44
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
47,49
48,49
50,51
50,52
50,53
51,52
53,54
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
72,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
83,84
84,85
84,86
84,87
84,88
84,89
85,86
87,88
87,89
88,89
91,92
93,94
93,95
94,95
96,97
99,100
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,24,26,29,31,34,36,37,42,44,45,49,52,54,56,59,61,65,68,70,71,73,77,79,82,86,89,90,92,95,97,98,100
-----computeFrom-----
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,		 void *cpu_addr, dma_addr_t handle, size_t size,		 struct dma_attrs *attrs){	struct page *page = pfn_to_page(dma_to_pfn(dev, handle));	int ret;	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);	if (unlikely(ret))		return ret;	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);	return 0;}
int
arm_dma_get_sgtable(struct device *dev, struct sg_table *sgt,		 void *cpu_addr, dma_addr_t handle, size_t size,		 struct dma_attrs *attrs)
arm_dma_get_sgtable
struct device *dev
struct device
device
*dev
*
dev
struct sg_table *sgt
struct sg_table
sg_table
*sgt
*
sgt
void *cpu_addr
void
*cpu_addr
*
cpu_addr
dma_addr_t handle
dma_addr_t
dma_addr_t
handle
handle
size_t size
size_t
size_t
size
size
struct dma_attrs *attrs
struct dma_attrs
dma_attrs
*attrs
*
attrs
{	struct page *page = pfn_to_page(dma_to_pfn(dev, handle));	int ret;	ret = sg_alloc_table(sgt, 1, GFP_KERNEL);	if (unlikely(ret))		return ret;	sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);	return 0;}
struct page *page = pfn_to_page(dma_to_pfn(dev, handle));
struct page *page = pfn_to_page(dma_to_pfn(dev, handle));
struct page
page
*page = pfn_to_page(dma_to_pfn(dev, handle))
*
page
= pfn_to_page(dma_to_pfn(dev, handle))
pfn_to_page(dma_to_pfn(dev, handle))
pfn_to_page
pfn_to_page
dma_to_pfn(dev, handle)
dma_to_pfn
dma_to_pfn
dev
dev
handle
handle
int ret;
int ret;
int
ret
ret
ret = sg_alloc_table(sgt, 1, GFP_KERNEL);
ret = sg_alloc_table(sgt, 1, GFP_KERNEL)
ret
ret
sg_alloc_table(sgt, 1, GFP_KERNEL)
sg_alloc_table
sg_alloc_table
sgt
sgt
1
GFP_KERNEL
GFP_KERNEL
if (unlikely(ret))		return ret;
unlikely(ret)
unlikely
unlikely
ret
ret
return ret;
ret
ret
sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0);
sg_set_page(sgt->sgl, page, PAGE_ALIGN(size), 0)
sg_set_page
sg_set_page
sgt->sgl
sgt
sgt
sgl
page
page
PAGE_ALIGN(size)
PAGE_ALIGN
PAGE_ALIGN
size
size
0
return 0;
0
-----joern-----
(22,10,0)
(24,6,0)
(32,15,0)
(19,27,0)
(12,33,0)
(4,7,0)
(6,30,0)
(2,12,0)
(10,33,0)
(12,15,0)
(16,15,0)
(15,0,0)
(9,22,0)
(14,33,0)
(23,10,0)
(6,24,0)
(20,33,0)
(18,22,0)
(29,5,0)
(13,19,0)
(7,0,0)
(28,7,0)
(24,10,0)
(17,2,0)
(21,6,0)
(34,14,0)
(7,22,0)
(22,33,0)
(22,19,0)
(31,12,0)
(5,12,0)
(8,14,0)
(6,11,0)
(25,6,0)
(19,22,0)
(3,33,0)
(1,33,0)
(15,12,0)
(8,2,0)
(10,24,0)
(26,15,0)
(22,7,0)
(16,32,1)
(5,12,1)
(32,31,1)
(7,0,1)
(19,13,1)
(10,24,1)
(6,11,1)
(22,19,1)
(6,25,1)
(6,30,1)
(12,15,1)
(22,9,1)
(8,14,1)
(25,21,1)
(9,19,1)
(22,7,1)
(2,17,1)
(22,10,1)
(26,16,1)
(14,34,1)
(18,7,1)
(7,28,1)
(28,4,1)
(15,0,1)
(15,26,1)
(17,5,1)
(34,22,1)
(13,18,1)
(21,23,1)
(29,12,1)
(24,6,1)
(5,29,1)
(8,2,1)
(31,10,1)
(4,5,1)
(2,12,1)
(19,27,1)
(6,11,2)
(7,0,2)
(8,2,2)
(18,5,2)
(19,5,2)
(4,5,2)
(28,5,2)
(22,5,2)
(24,6,2)
(6,30,2)
(5,12,2)
(19,27,2)
(2,5,2)
(7,5,2)
(22,19,2)
(10,24,2)
(22,10,2)
(13,5,2)
(17,5,2)
(22,7,2)
(9,5,2)
(2,12,2)
(15,0,2)
(14,5,2)
(34,5,2)
(12,15,2)
(8,14,2)
-----------------------------------
(0,struct sg_table *sgt)
(1,if (unlikely(ret)
(2,return ret;)
(3,ret)
(4,sgt)
(5,unlikely(ret)
(6,dma_to_pfn(dev, handle)
(7,sgt->sgl)
(8,RET)
(9,0)
(10,*page = pfn_to_page(dma_to_pfn(dev, handle)
(11,struct device *dev)
(12,ret = sg_alloc_table(sgt, 1, GFP_KERNEL)
(13,size)
(14,return 0;)
(15,sg_alloc_table(sgt, 1, GFP_KERNEL)
(16,1)
(17,ret)
(18,page)
(19,PAGE_ALIGN(size)
(20,page)
(21,dev)
(22,sg_set_page(sgt->sgl, page, PAGE_ALIGN(size)
(23,page)
(24,pfn_to_page(dma_to_pfn(dev, handle)
(25,handle)
(26,GFP_KERNEL)
(27,size_t size)
(28,sgl)
(29,ret)
(30,dma_addr_t handle)
(31,ret)
(32,sgt)
(33,)
(34,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^