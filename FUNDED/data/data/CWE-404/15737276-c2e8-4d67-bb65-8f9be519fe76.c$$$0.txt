-----label-----
1
-----code-----
int c4iw_post_receive(struct ib_qp *ibqp, struct ib_recv_wr *wr,
		      struct ib_recv_wr **bad_wr)
{
	int err = 0;
	struct c4iw_qp *qhp;
	union t4_recv_wr *wqe = NULL;
	u32 num_wrs;
	u8 len16 = 0;
	unsigned long flag;
	u16 idx = 0;

	qhp = to_c4iw_qp(ibqp);
	spin_lock_irqsave(&qhp->lock, flag);

	/*
	 * If the qp has been flushed, then just insert a special
	 * drain cqe.
	 */
	if (qhp->wq.flushed) {
		spin_unlock_irqrestore(&qhp->lock, flag);
		complete_rq_drain_wrs(qhp, wr);
		return err;
	}
	num_wrs = t4_rq_avail(&qhp->wq);
	if (num_wrs == 0) {
		spin_unlock_irqrestore(&qhp->lock, flag);
		*bad_wr = wr;
		return -ENOMEM;
	}
	while (wr) {
		if (wr->num_sge > T4_MAX_RECV_SGE) {
			err = -EINVAL;
			*bad_wr = wr;
			break;
		}
		wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +
					   qhp->wq.rq.wq_pidx *
					   T4_EQ_ENTRY_SIZE);
		if (num_wrs)
			err = build_rdma_recv(qhp, wqe, wr, &len16);
		else
			err = -ENOMEM;
		if (err) {
			*bad_wr = wr;
			break;
		}

		qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id;
		if (c4iw_wr_log) {
			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =
				cxgb4_read_sge_timestamp(
						qhp->rhp->rdev.lldi.ports[0]);
			getnstimeofday(
				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);
		}

		wqe->recv.opcode = FW_RI_RECV_WR;
		wqe->recv.r1 = 0;
		wqe->recv.wrid = qhp->wq.rq.pidx;
		wqe->recv.r2[0] = 0;
		wqe->recv.r2[1] = 0;
		wqe->recv.r2[2] = 0;
		wqe->recv.len16 = len16;
		pr_debug("cookie 0x%llx pidx %u\n",
			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx);
		t4_rq_produce(&qhp->wq, len16);
		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);
		wr = wr->next;
		num_wrs--;
	}
	if (!qhp->rhp->rdev.status_page->db_off) {
		t4_ring_rq_db(&qhp->wq, idx, wqe);
		spin_unlock_irqrestore(&qhp->lock, flag);
	} else {
		spin_unlock_irqrestore(&qhp->lock, flag);
		ring_kernel_rq_db(qhp, idx);
	}
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
20,23
24,25
24,26
24,27
24,28
24,29
24,30
24,31
24,32
24,33
24,34
24,35
24,36
24,37
24,38
24,39
25,26
26,27
26,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
61,62
63,64
64,65
64,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
90,91
90,92
91,92
94,95
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
103,106
104,105
105,106
105,107
105,108
106,107
108,109
109,110
109,111
110,111
113,114
115,116
116,117
116,118
116,119
117,118
119,120
121,122
123,124
124,125
126,127
127,128
127,129
128,129
130,131
130,132
131,132
133,134
134,135
134,136
135,136
138,139
138,140
139,140
139,141
140,141
143,144
143,145
143,146
144,145
145,146
145,147
145,148
146,147
148,149
149,150
149,151
150,151
153,154
155,156
156,157
156,158
157,158
158,159
160,161
162,163
163,164
164,165
166,167
166,168
167,168
169,170
169,171
169,172
169,173
169,174
169,175
169,176
169,177
169,178
169,179
169,180
169,181
169,182
169,183
169,184
169,185
169,186
169,187
170,171
170,172
171,172
171,173
172,173
172,174
173,174
176,177
178,179
178,180
178,181
179,180
180,181
180,182
181,182
183,184
184,185
186,187
187,188
187,189
188,189
189,190
191,192
194,195
195,196
195,197
196,197
198,199
198,200
199,200
199,201
200,201
202,203
204,205
205,206
205,207
206,207
206,208
207,208
207,209
208,209
210,211
212,213
212,214
213,214
213,215
214,215
214,216
215,216
220,221
220,222
221,222
221,223
222,223
222,224
223,224
223,225
224,225
229,230
231,232
231,233
231,234
232,233
234,235
235,236
235,237
236,237
238,239
238,240
238,241
238,242
238,243
239,240
241,242
243,244
245,246
247,248
248,249
250,251
251,252
251,253
252,253
254,255
255,256
257,258
257,259
258,259
260,261
260,262
261,262
262,263
262,264
263,264
264,265
266,267
269,270
270,271
270,272
271,272
271,273
272,273
272,274
273,274
273,275
274,275
274,276
275,276
275,277
276,277
281,282
281,283
282,283
282,284
283,284
283,285
284,285
290,291
290,292
291,292
294,295
294,296
295,296
297,298
297,299
298,299
299,300
299,301
300,301
300,302
301,302
301,303
302,303
302,304
303,304
303,305
304,305
304,306
305,306
310,311
310,312
311,312
311,313
312,313
312,314
313,314
319,320
319,321
320,321
322,323
322,324
323,324
323,325
324,325
324,326
325,326
325,327
326,327
326,328
327,328
334,335
335,336
335,337
336,337
338,339
339,340
339,341
340,341
340,342
341,342
341,343
342,343
342,344
343,344
343,345
344,345
349,350
349,351
350,351
350,352
351,352
351,353
352,353
358,359
359,360
359,361
360,361
360,362
361,362
361,363
362,363
366,367
368,369
369,370
369,371
370,371
370,372
371,372
371,373
372,373
377,378
378,379
378,380
379,380
379,381
380,381
380,382
381,382
385,386
385,387
386,387
386,388
387,388
387,389
388,389
393,394
394,395
394,396
395,396
395,397
396,397
396,398
397,398
397,399
398,399
404,405
405,406
405,407
406,407
406,408
407,408
407,409
408,409
408,410
409,410
415,416
416,417
416,418
417,418
417,419
418,419
418,420
419,420
419,421
420,421
426,427
427,428
427,429
428,429
428,430
429,430
429,431
430,431
434,435
436,437
437,438
437,439
437,440
437,441
438,439
441,442
441,443
442,443
442,444
445,446
445,447
446,447
449,450
449,451
450,451
450,452
451,452
451,453
452,453
457,458
458,459
458,460
458,461
459,460
461,462
462,463
462,464
463,464
466,467
468,469
469,470
469,471
470,471
472,473
472,474
472,475
473,474
475,476
475,477
476,477
479,480
481,482
482,483
482,484
483,484
485,486
485,487
486,487
489,490
490,491
491,492
493,494
493,495
493,496
494,495
495,496
495,497
496,497
496,498
497,498
497,499
498,499
498,500
499,500
505,506
505,507
506,507
507,508
507,509
507,510
507,511
508,509
510,511
511,512
511,513
512,513
515,516
517,518
519,520
520,521
520,522
520,523
521,522
523,524
524,525
524,526
525,526
528,529
530,531
530,532
531,532
532,533
532,534
532,535
533,534
535,536
536,537
536,538
537,538
540,541
542,543
543,544
543,545
543,546
544,545
546,547
548,549
550,551
551,552
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,23,27,29,31,35,37,38,42,44,45,48,52,54,58,60,62,65,67,71,73,75,79,82,84,88,92,93,95,100,101,102,107,111,112,114,118,120,122,125,129,132,136,137,141,142,147,151,152,154,159,161,165,168,174,175,177,182,185,190,192,193,197,201,203,209,211,216,217,218,219,225,226,227,228,230,233,237,240,242,244,246,249,253,256,259,265,267,268,277,278,279,280,285,286,287,288,289,292,293,296,306,307,308,309,314,315,316,317,318,321,328,329,330,331,332,333,337,345,346,347,348,353,354,355,356,357,363,364,365,367,373,374,375,376,382,383,384,389,390,391,392,399,400,401,402,403,410,411,412,413,414,421,422,423,424,425,431,432,433,435,439,440,443,444,447,448,453,454,455,456,460,464,465,467,471,474,477,478,480,484,487,488,492,500,501,502,503,504,509,513,514,516,518,522,526,527,529,534,538,539,541,545,547,549,552
-----computeFrom-----
77,78
77,79
127,128
127,129
139,140
139,141
156,157
156,158
171,172
171,173
180,181
180,182
187,188
187,189
195,196
195,197
205,206
205,207
220,221
220,222
235,236
235,237
251,252
251,253
262,263
262,264
270,271
270,272
299,300
299,301
359,360
359,361
369,370
369,371
378,379
378,380
394,395
394,396
405,406
405,407
416,417
416,418
427,428
427,429
469,470
469,471
475,476
475,477
482,483
482,484
-----guardedBy-----
174,192
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int c4iw_post_receive(struct ib_qp *ibqp, struct ib_recv_wr *wr,		      struct ib_recv_wr **bad_wr){	int err = 0;	struct c4iw_qp *qhp;	union t4_recv_wr *wqe = NULL;	u32 num_wrs;	u8 len16 = 0;	unsigned long flag;	u16 idx = 0;	qhp = to_c4iw_qp(ibqp);	spin_lock_irqsave(&qhp->lock, flag);	/*	 * If the qp has been flushed, then just insert a special	 * drain cqe.	 */	if (qhp->wq.flushed) {		spin_unlock_irqrestore(&qhp->lock, flag);		complete_rq_drain_wrs(qhp, wr);		return err;	}	num_wrs = t4_rq_avail(&qhp->wq);	if (num_wrs == 0) {		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}	while (wr) {		if (wr->num_sge > T4_MAX_RECV_SGE) {			err = -EINVAL;			*bad_wr = wr;			break;		}		wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE);		if (num_wrs)			err = build_rdma_recv(qhp, wqe, wr, &len16);		else			err = -ENOMEM;		if (err) {			*bad_wr = wr;			break;		}		qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id;		if (c4iw_wr_log) {			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);		}		wqe->recv.opcode = FW_RI_RECV_WR;		wqe->recv.r1 = 0;		wqe->recv.wrid = qhp->wq.rq.pidx;		wqe->recv.r2[0] = 0;		wqe->recv.r2[1] = 0;		wqe->recv.r2[2] = 0;		wqe->recv.len16 = len16;		pr_debug("cookie 0x%llx pidx %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx);		t4_rq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);		wr = wr->next;		num_wrs--;	}	if (!qhp->rhp->rdev.status_page->db_off) {		t4_ring_rq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	} else {		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_rq_db(qhp, idx);	}	return err;}
int
c4iw_post_receive(struct ib_qp *ibqp, struct ib_recv_wr *wr,		      struct ib_recv_wr **bad_wr)
c4iw_post_receive
struct ib_qp *ibqp
struct ib_qp
ib_qp
*ibqp
*
ibqp
struct ib_recv_wr *wr
struct ib_recv_wr
ib_recv_wr
*wr
*
wr
struct ib_recv_wr **bad_wr
struct ib_recv_wr
ib_recv_wr
**bad_wr
*
*
bad_wr
{	int err = 0;	struct c4iw_qp *qhp;	union t4_recv_wr *wqe = NULL;	u32 num_wrs;	u8 len16 = 0;	unsigned long flag;	u16 idx = 0;	qhp = to_c4iw_qp(ibqp);	spin_lock_irqsave(&qhp->lock, flag);	/*	 * If the qp has been flushed, then just insert a special	 * drain cqe.	 */	if (qhp->wq.flushed) {		spin_unlock_irqrestore(&qhp->lock, flag);		complete_rq_drain_wrs(qhp, wr);		return err;	}	num_wrs = t4_rq_avail(&qhp->wq);	if (num_wrs == 0) {		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}	while (wr) {		if (wr->num_sge > T4_MAX_RECV_SGE) {			err = -EINVAL;			*bad_wr = wr;			break;		}		wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE);		if (num_wrs)			err = build_rdma_recv(qhp, wqe, wr, &len16);		else			err = -ENOMEM;		if (err) {			*bad_wr = wr;			break;		}		qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id;		if (c4iw_wr_log) {			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);		}		wqe->recv.opcode = FW_RI_RECV_WR;		wqe->recv.r1 = 0;		wqe->recv.wrid = qhp->wq.rq.pidx;		wqe->recv.r2[0] = 0;		wqe->recv.r2[1] = 0;		wqe->recv.r2[2] = 0;		wqe->recv.len16 = len16;		pr_debug("cookie 0x%llx pidx %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx);		t4_rq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);		wr = wr->next;		num_wrs--;	}	if (!qhp->rhp->rdev.status_page->db_off) {		t4_ring_rq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	} else {		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_rq_db(qhp, idx);	}	return err;}
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
struct c4iw_qp *qhp;
struct c4iw_qp *qhp;
struct c4iw_qp
c4iw_qp
*qhp
*
qhp
union t4_recv_wr *wqe = NULL;
union t4_recv_wr *wqe = NULL;
union t4_recv_wr
t4_recv_wr
*wqe = NULL
*
wqe
= NULL
NULL
NULL
u32 num_wrs;
u32 num_wrs;
u32
u32
num_wrs
num_wrs
u8 len16 = 0;
u8 len16 = 0;
u8
u8
len16 = 0
len16
= 0
0
unsigned long flag;
unsigned long flag;
unsigned long
flag
flag
u16 idx = 0;
u16 idx = 0;
u16
u16
idx = 0
idx
= 0
0
qhp = to_c4iw_qp(ibqp);
qhp = to_c4iw_qp(ibqp)
qhp
qhp
to_c4iw_qp(ibqp)
to_c4iw_qp
to_c4iw_qp
ibqp
ibqp
spin_lock_irqsave(&qhp->lock, flag);
spin_lock_irqsave(&qhp->lock, flag)
spin_lock_irqsave
spin_lock_irqsave
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
if (qhp->wq.flushed) {		spin_unlock_irqrestore(&qhp->lock, flag);		complete_rq_drain_wrs(qhp, wr);		return err;	}
qhp->wq.flushed
qhp->wq
qhp
qhp
wq
flushed
{		spin_unlock_irqrestore(&qhp->lock, flag);		complete_rq_drain_wrs(qhp, wr);		return err;	}
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
complete_rq_drain_wrs(qhp, wr);
complete_rq_drain_wrs(qhp, wr)
complete_rq_drain_wrs
complete_rq_drain_wrs
qhp
qhp
wr
wr
return err;
err
err
num_wrs = t4_rq_avail(&qhp->wq);
num_wrs = t4_rq_avail(&qhp->wq)
num_wrs
num_wrs
t4_rq_avail(&qhp->wq)
t4_rq_avail
t4_rq_avail
&qhp->wq
qhp->wq
qhp
qhp
wq
if (num_wrs == 0) {		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}
num_wrs == 0
num_wrs
num_wrs
0
{		spin_unlock_irqrestore(&qhp->lock, flag);		*bad_wr = wr;		return -ENOMEM;	}
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
*bad_wr = wr;
*bad_wr = wr
*bad_wr
bad_wr
bad_wr
wr
wr
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
while (wr) {		if (wr->num_sge > T4_MAX_RECV_SGE) {			err = -EINVAL;			*bad_wr = wr;			break;		}		wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE);		if (num_wrs)			err = build_rdma_recv(qhp, wqe, wr, &len16);		else			err = -ENOMEM;		if (err) {			*bad_wr = wr;			break;		}		qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id;		if (c4iw_wr_log) {			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);		}		wqe->recv.opcode = FW_RI_RECV_WR;		wqe->recv.r1 = 0;		wqe->recv.wrid = qhp->wq.rq.pidx;		wqe->recv.r2[0] = 0;		wqe->recv.r2[1] = 0;		wqe->recv.r2[2] = 0;		wqe->recv.len16 = len16;		pr_debug("cookie 0x%llx pidx %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx);		t4_rq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);		wr = wr->next;		num_wrs--;	}
wr
wr
{		if (wr->num_sge > T4_MAX_RECV_SGE) {			err = -EINVAL;			*bad_wr = wr;			break;		}		wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE);		if (num_wrs)			err = build_rdma_recv(qhp, wqe, wr, &len16);		else			err = -ENOMEM;		if (err) {			*bad_wr = wr;			break;		}		qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id;		if (c4iw_wr_log) {			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);		}		wqe->recv.opcode = FW_RI_RECV_WR;		wqe->recv.r1 = 0;		wqe->recv.wrid = qhp->wq.rq.pidx;		wqe->recv.r2[0] = 0;		wqe->recv.r2[1] = 0;		wqe->recv.r2[2] = 0;		wqe->recv.len16 = len16;		pr_debug("cookie 0x%llx pidx %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx);		t4_rq_produce(&qhp->wq, len16);		idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);		wr = wr->next;		num_wrs--;	}
if (wr->num_sge > T4_MAX_RECV_SGE) {			err = -EINVAL;			*bad_wr = wr;			break;		}
wr->num_sge > T4_MAX_RECV_SGE
wr->num_sge
wr
wr
num_sge
T4_MAX_RECV_SGE
T4_MAX_RECV_SGE
{			err = -EINVAL;			*bad_wr = wr;			break;		}
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
*bad_wr = wr;
*bad_wr = wr
*bad_wr
bad_wr
bad_wr
wr
wr
break;
wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE);
wqe = (union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE)
wqe
wqe
(union t4_recv_wr *)((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE)
union t4_recv_wr *
union t4_recv_wr
t4_recv_wr
*
*
((u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE)
(u8 *)qhp->wq.rq.queue +					   qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE
(u8 *)qhp->wq.rq.queue
u8 *
u8
u8
*
*
qhp->wq.rq.queue
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
queue
qhp->wq.rq.wq_pidx *					   T4_EQ_ENTRY_SIZE
qhp->wq.rq.wq_pidx
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
wq_pidx
T4_EQ_ENTRY_SIZE
T4_EQ_ENTRY_SIZE
if (num_wrs)			err = build_rdma_recv(qhp, wqe, wr, &len16);		else			err = -ENOMEM;
num_wrs
num_wrs
err = build_rdma_recv(qhp, wqe, wr, &len16);
err = build_rdma_recv(qhp, wqe, wr, &len16)
err
err
build_rdma_recv(qhp, wqe, wr, &len16)
build_rdma_recv
build_rdma_recv
qhp
qhp
wqe
wqe
wr
wr
&len16
len16
len16
err = -ENOMEM;
err = -ENOMEM
err
err
-ENOMEM
ENOMEM
ENOMEM
if (err) {			*bad_wr = wr;			break;		}
err
err
{			*bad_wr = wr;			break;		}
*bad_wr = wr;
*bad_wr = wr
*bad_wr
bad_wr
bad_wr
wr
wr
break;
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id;
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx]
qhp->wq.rq.sw_rq
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
sw_rq
qhp->wq.rq.pidx
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
pidx
wr_id
wr->wr_id
wr
wr
wr_id
if (c4iw_wr_log) {			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);		}
c4iw_wr_log
c4iw_wr_log
{			qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);			getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);		}
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0]);
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =				cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0])
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx]
qhp->wq.rq.sw_rq
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
sw_rq
qhp->wq.rq.pidx
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
pidx
sge_ts
cxgb4_read_sge_timestamp(						qhp->rhp->rdev.lldi.ports[0])
cxgb4_read_sge_timestamp
cxgb4_read_sge_timestamp
qhp->rhp->rdev.lldi.ports[0]
qhp->rhp->rdev.lldi.ports
qhp->rhp->rdev.lldi
qhp->rhp->rdev
qhp->rhp
qhp
qhp
rhp
rdev
lldi
ports
0
getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts);
getnstimeofday(				&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts)
getnstimeofday
getnstimeofday
&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts
qhp->wq.rq.sw_rq[qhp->wq.rq.pidx]
qhp->wq.rq.sw_rq
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
sw_rq
qhp->wq.rq.pidx
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
pidx
host_ts
wqe->recv.opcode = FW_RI_RECV_WR;
wqe->recv.opcode = FW_RI_RECV_WR
wqe->recv.opcode
wqe->recv
wqe
wqe
recv
opcode
FW_RI_RECV_WR
FW_RI_RECV_WR
wqe->recv.r1 = 0;
wqe->recv.r1 = 0
wqe->recv.r1
wqe->recv
wqe
wqe
recv
r1
0
wqe->recv.wrid = qhp->wq.rq.pidx;
wqe->recv.wrid = qhp->wq.rq.pidx
wqe->recv.wrid
wqe->recv
wqe
wqe
recv
wrid
qhp->wq.rq.pidx
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
pidx
wqe->recv.r2[0] = 0;
wqe->recv.r2[0] = 0
wqe->recv.r2[0]
wqe->recv.r2
wqe->recv
wqe
wqe
recv
r2
0
0
wqe->recv.r2[1] = 0;
wqe->recv.r2[1] = 0
wqe->recv.r2[1]
wqe->recv.r2
wqe->recv
wqe
wqe
recv
r2
1
0
wqe->recv.r2[2] = 0;
wqe->recv.r2[2] = 0
wqe->recv.r2[2]
wqe->recv.r2
wqe->recv
wqe
wqe
recv
r2
2
0
wqe->recv.len16 = len16;
wqe->recv.len16 = len16
wqe->recv.len16
wqe->recv
wqe
wqe
recv
len16
len16
len16
pr_debug("cookie 0x%llx pidx %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx);
pr_debug("cookie 0x%llx pidx %u\n",			 (unsigned long long)wr->wr_id, qhp->wq.rq.pidx)
pr_debug
pr_debug
"cookie 0x%llx pidx %u\n"
(unsigned long long)wr->wr_id
unsigned long long
unsigned long long

wr->wr_id
wr
wr
wr_id
qhp->wq.rq.pidx
qhp->wq.rq
qhp->wq
qhp
qhp
wq
rq
pidx
t4_rq_produce(&qhp->wq, len16);
t4_rq_produce(&qhp->wq, len16)
t4_rq_produce
t4_rq_produce
&qhp->wq
qhp->wq
qhp
qhp
wq
len16
len16
idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE);
idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
idx
idx
DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
DIV_ROUND_UP
DIV_ROUND_UP
len16*16
len16
len16
16
T4_EQ_ENTRY_SIZE
T4_EQ_ENTRY_SIZE
wr = wr->next;
wr = wr->next
wr
wr
wr->next
wr
wr
next
num_wrs--;
num_wrs--
num_wrs
num_wrs
if (!qhp->rhp->rdev.status_page->db_off) {		t4_ring_rq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	} else {		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_rq_db(qhp, idx);	}
!qhp->rhp->rdev.status_page->db_off
qhp->rhp->rdev.status_page->db_off
qhp->rhp->rdev.status_page
qhp->rhp->rdev
qhp->rhp
qhp
qhp
rhp
rdev
status_page
db_off
{		t4_ring_rq_db(&qhp->wq, idx, wqe);		spin_unlock_irqrestore(&qhp->lock, flag);	}
t4_ring_rq_db(&qhp->wq, idx, wqe);
t4_ring_rq_db(&qhp->wq, idx, wqe)
t4_ring_rq_db
t4_ring_rq_db
&qhp->wq
qhp->wq
qhp
qhp
wq
idx
idx
wqe
wqe
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
{		spin_unlock_irqrestore(&qhp->lock, flag);		ring_kernel_rq_db(qhp, idx);	}
spin_unlock_irqrestore(&qhp->lock, flag);
spin_unlock_irqrestore(&qhp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&qhp->lock
qhp->lock
qhp
qhp
lock
flag
flag
ring_kernel_rq_db(qhp, idx);
ring_kernel_rq_db(qhp, idx)
ring_kernel_rq_db
ring_kernel_rq_db
qhp
qhp
idx
idx
return err;
err
err
-----joern-----
(69,109,0)
(47,20,0)
(225,129,0)
(129,143,0)
(272,280,0)
(24,327,0)
(222,196,0)
(252,161,0)
(317,280,0)
(6,196,0)
(263,339,0)
(75,326,0)
(63,237,0)
(218,84,0)
(181,286,0)
(338,331,0)
(43,338,0)
(272,107,0)
(98,338,0)
(227,246,0)
(174,148,0)
(73,191,0)
(275,98,0)
(247,184,0)
(318,297,0)
(336,102,0)
(237,339,0)
(61,73,0)
(183,272,0)
(278,212,0)
(205,143,0)
(281,165,0)
(231,338,0)
(39,116,0)
(132,33,0)
(266,305,0)
(218,297,0)
(176,112,0)
(299,109,0)
(274,154,0)
(149,57,0)
(178,37,0)
(41,32,0)
(99,121,0)
(72,268,0)
(38,196,0)
(344,109,0)
(310,159,0)
(311,24,0)
(293,59,0)
(127,338,0)
(205,338,0)
(257,224,0)
(136,340,0)
(287,205,0)
(335,51,0)
(135,259,0)
(111,213,0)
(231,242,0)
(90,109,0)
(241,31,0)
(57,149,0)
(185,43,0)
(125,164,0)
(69,128,0)
(312,261,0)
(115,299,0)
(305,338,0)
(182,150,0)
(338,196,0)
(307,56,0)
(101,27,0)
(68,127,0)
(318,338,0)
(48,80,0)
(62,134,0)
(137,204,0)
(94,177,0)
(142,109,0)
(177,56,0)
(242,231,0)
(48,338,0)
(220,121,0)
(20,162,0)
(290,112,0)
(194,109,0)
(144,320,0)
(172,174,0)
(89,85,0)
(40,84,0)
(223,148,0)
(120,104,0)
(282,150,0)
(23,333,0)
(165,225,0)
(114,153,0)
(300,43,0)
(129,225,0)
(49,91,0)
(305,266,0)
(332,23,0)
(259,219,0)
(232,206,0)
(98,275,0)
(258,145,0)
(314,172,0)
(176,87,0)
(120,127,0)
(36,59,0)
(104,208,0)
(195,109,0)
(84,109,0)
(123,196,0)
(34,324,0)
(235,202,0)
(320,338,0)
(181,277,0)
(315,228,0)
(146,252,0)
(301,70,0)
(191,91,0)
(276,109,0)
(237,201,0)
(121,90,0)
(215,87,0)
(44,85,0)
(229,274,0)
(37,196,0)
(157,244,0)
(35,201,0)
(82,142,0)
(282,221,0)
(118,231,0)
(292,221,0)
(236,149,0)
(9,176,0)
(203,147,0)
(173,212,0)
(209,104,0)
(199,10,0)
(275,31,0)
(130,56,0)
(291,62,0)
(193,98,0)
(256,224,0)
(98,87,0)
(112,241,0)
(108,147,0)
(23,338,0)
(261,338,0)
(45,212,0)
(192,250,0)
(207,153,0)
(161,252,0)
(277,181,0)
(159,279,0)
(10,239,0)
(36,324,0)
(102,210,0)
(46,300,0)
(43,300,0)
(54,213,0)
(174,172,0)
(33,132,0)
(280,338,0)
(74,98,0)
(177,327,0)
(91,191,0)
(221,196,0)
(339,237,0)
(29,21,0)
(260,126,0)
(127,120,0)
(150,196,0)
(201,109,0)
(268,210,0)
(26,159,0)
(212,173,0)
(112,176,0)
(87,132,0)
(149,161,0)
(55,305,0)
(64,192,0)
(131,260,0)
(250,192,0)
(124,307,0)
(115,32,0)
(148,174,0)
(234,260,0)
(92,114,0)
(212,90,0)
(238,194,0)
(98,90,0)
(304,280,0)
(202,340,0)
(30,341,0)
(208,104,0)
(19,31,0)
(40,341,0)
(51,32,0)
(139,279,0)
(106,322,0)
(77,48,0)
(184,102,0)
(126,242,0)
(180,275,0)
(326,90,0)
(158,148,0)
(244,107,0)
(298,259,0)
(273,145,0)
(253,116,0)
(119,167,0)
(233,268,0)
(0,196,0)
(255,324,0)
(65,231,0)
(153,114,0)
(202,113,0)
(325,176,0)
(133,31,0)
(299,115,0)
(57,246,0)
(13,113,0)
(13,315,0)
(230,255,0)
(56,196,0)
(93,128,0)
(53,145,0)
(326,137,0)
(169,13,0)
(216,283,0)
(128,93,0)
(25,196,0)
(170,111,0)
(132,57,0)
(134,62,0)
(59,255,0)
(70,286,0)
(301,208,0)
(192,87,0)
(2,174,0)
(309,53,0)
(260,196,0)
(282,316,0)
(166,11,0)
(342,282,0)
(8,253,0)
(164,338,0)
(31,196,0)
(297,218,0)
(76,318,0)
(59,154,0)
(333,34,0)
(20,90,0)
(128,69,0)
(217,109,0)
(321,167,0)
(32,115,0)
(160,343,0)
(228,315,0)
(285,106,0)
(50,139,0)
(343,62,0)
(172,221,0)
(284,129,0)
(189,315,0)
(288,322,0)
(210,268,0)
(116,338,0)
(110,109,0)
(204,137,0)
(208,139,0)
(261,342,0)
(264,127,0)
(153,207,0)
(34,333,0)
(289,210,0)
(190,301,0)
(327,24,0)
(116,253,0)
(280,272,0)
(341,40,0)
(343,87,0)
(242,126,0)
(250,21,0)
(10,244,0)
(12,69,0)
(106,114,0)
(299,137,0)
(148,31,0)
(337,276,0)
(322,106,0)
(277,345,0)
(137,299,0)
(320,60,0)
(214,196,0)
(11,90,0)
(320,172,0)
(87,109,0)
(147,207,0)
(340,202,0)
(79,92,0)
(329,282,0)
(37,266,0)
(11,175,0)
(171,320,0)
(114,92,0)
(168,327,0)
(7,345,0)
(244,10,0)
(83,250,0)
(139,208,0)
(145,53,0)
(163,184,0)
(198,241,0)
(113,345,0)
(282,87,0)
(265,279,0)
(164,322,0)
(210,102,0)
(107,272,0)
(295,318,0)
(90,175,0)
(32,51,0)
(53,276,0)
(339,224,0)
(206,252,0)
(228,338,0)
(307,143,0)
(134,142,0)
(172,109,0)
(117,165,0)
(270,48,0)
(308,93,0)
(328,80,0)
(27,90,0)
(51,338,0)
(155,134,0)
(156,221,0)
(126,260,0)
(71,56,0)
(212,175,0)
(184,163,0)
(246,226,0)
(328,316,0)
(172,172,0)
(27,195,0)
(42,11,0)
(1,299,0)
(52,338,0)
(243,23,0)
(58,205,0)
(104,120,0)
(274,20,0)
(167,338,0)
(267,43,0)
(122,341,0)
(341,87,0)
(323,162,0)
(208,301,0)
(21,109,0)
(69,31,0)
(90,11,0)
(95,109,0)
(98,28,0)
(186,191,0)
(345,277,0)
(207,147,0)
(151,116,0)
(22,326,0)
(159,338,0)
(114,106,0)
(140,219,0)
(322,164,0)
(195,27,0)
(313,90,0)
(259,298,0)
(177,28,0)
(16,207,0)
(333,23,0)
(302,298,0)
(211,99,0)
(240,343,0)
(124,36,0)
(177,196,0)
(121,175,0)
(279,139,0)
(93,338,0)
(96,227,0)
(57,132,0)
(254,196,0)
(300,227,0)
(86,261,0)
(161,149,0)
(3,115,0)
(239,10,0)
(342,261,0)
(99,154,0)
(206,338,0)
(103,111,0)
(66,234,0)
(67,206,0)
(282,172,0)
(326,175,0)
(188,218,0)
(279,159,0)
(80,48,0)
(132,87,0)
(246,227,0)
(303,228,0)
(78,196,0)
(147,338,0)
(124,177,0)
(111,338,0)
(239,70,0)
(105,40,0)
(331,88,0)
(97,196,0)
(283,36,0)
(246,57,0)
(297,318,0)
(179,98,0)
(234,109,0)
(28,98,0)
(241,109,0)
(253,8,0)
(320,221,0)
(167,340,0)
(224,87,0)
(334,51,0)
(70,239,0)
(4,93,0)
(294,228,0)
(271,120,0)
(84,218,0)
(319,282,0)
(251,196,0)
(152,173,0)
(5,28,0)
(245,164,0)
(100,305,0)
(345,113,0)
(262,27,0)
(98,175,0)
(145,87,0)
(200,91,0)
(102,184,0)
(187,307,0)
(197,107,0)
(8,60,0)
(330,150,0)
(138,8,0)
(249,297,0)
(113,202,0)
(213,111,0)
(225,165,0)
(121,219,0)
(248,192,0)
(205,175,0)
(340,167,0)
(85,260,0)
(165,338,0)
(107,244,0)
(81,328,0)
(20,175,0)
(191,73,0)
(177,259,0)
(226,246,0)
(91,87,0)
(73,194,0)
(268,338,0)
(266,37,0)
(92,195,0)
(252,206,0)
(113,13,0)
(62,343,0)
(80,328,0)
(331,338,0)
(17,153,0)
(27,175,0)
(137,326,0)
(282,342,0)
(18,34,0)
(296,161,0)
(224,339,0)
(14,331,0)
(255,175,0)
(315,13,0)
(227,300,0)
(160,84,1)
(149,161,1)
(163,184,1)
(220,99,1)
(206,338,1)
(239,10,1)
(190,208,1)
(180,74,1)
(15,234,1)
(311,168,1)
(145,258,1)
(305,338,1)
(187,205,1)
(309,145,1)
(147,108,1)
(118,65,1)
(11,175,1)
(306,28,1)
(18,333,1)
(127,338,1)
(108,203,1)
(318,295,1)
(146,206,1)
(205,175,1)
(96,300,1)
(325,9,1)
(101,92,1)
(266,305,1)
(212,90,1)
(259,298,1)
(338,331,1)
(177,327,1)
(242,231,1)
(275,180,1)
(224,256,1)
(26,310,1)
(77,270,1)
(237,339,1)
(36,59,1)
(69,128,1)
(237,63,1)
(177,259,1)
(323,20,1)
(76,40,1)
(210,289,1)
(308,4,1)
(333,23,1)
(120,127,1)
(161,252,1)
(31,133,1)
(74,179,1)
(218,297,1)
(72,233,1)
(46,43,1)
(192,87,1)
(14,52,1)
(295,76,1)
(248,269,1)
(299,137,1)
(225,165,1)
(211,259,1)
(19,150,1)
(288,164,1)
(193,5,1)
(157,107,1)
(203,106,1)
(341,30,1)
(244,157,1)
(306,327,1)
(147,338,1)
(11,42,1)
(32,51,1)
(43,338,1)
(91,87,1)
(104,120,1)
(275,31,1)
(301,208,1)
(121,175,1)
(94,320,1)
(223,314,1)
(2,148,1)
(310,269,1)
(139,279,1)
(235,340,1)
(320,338,1)
(249,318,1)
(62,291,1)
(119,321,1)
(304,317,1)
(340,136,1)
(153,17,1)
(122,276,1)
(282,87,1)
(103,37,1)
(290,176,1)
(207,16,1)
(209,120,1)
(213,54,1)
(80,48,1)
(192,64,1)
(98,175,1)
(20,175,1)
(332,243,1)
(117,281,1)
(320,221,1)
(335,334,1)
(149,236,1)
(99,154,1)
(11,90,1)
(52,221,1)
(51,338,1)
(64,248,1)
(282,221,1)
(129,225,1)
(298,302,1)
(260,126,1)
(177,94,1)
(79,114,1)
(111,170,1)
(152,212,1)
(343,87,1)
(171,8,1)
(186,91,1)
(21,29,1)
(255,175,1)
(98,90,1)
(264,68,1)
(8,253,1)
(44,89,1)
(277,345,1)
(272,280,1)
(238,73,1)
(24,311,1)
(150,330,1)
(91,49,1)
(69,12,1)
(51,335,1)
(328,81,1)
(104,209,1)
(86,312,1)
(34,18,1)
(124,36,1)
(240,160,1)
(300,43,1)
(81,80,1)
(177,56,1)
(302,135,1)
(172,172,1)
(47,274,1)
(245,306,1)
(282,319,1)
(199,244,1)
(130,71,1)
(116,338,1)
(148,31,1)
(17,207,1)
(70,239,1)
(230,59,1)
(116,151,1)
(229,306,1)
(221,156,1)
(65,131,1)
(58,287,1)
(173,212,1)
(174,148,1)
(246,227,1)
(121,220,1)
(140,121,1)
(279,265,1)
(37,266,1)
(276,337,1)
(63,339,1)
(67,232,1)
(267,215,1)
(291,343,1)
(107,272,1)
(128,93,1)
(100,338,1)
(124,307,1)
(258,273,1)
(166,313,1)
(56,130,1)
(234,66,1)
(301,190,1)
(105,341,1)
(34,333,1)
(106,322,1)
(313,172,1)
(250,192,1)
(68,139,1)
(23,338,1)
(75,22,1)
(345,7,1)
(341,87,1)
(124,177,1)
(210,268,1)
(61,191,1)
(177,28,1)
(224,87,1)
(156,292,1)
(40,341,1)
(331,88,1)
(343,240,1)
(30,122,1)
(329,342,1)
(98,87,1)
(83,192,1)
(274,229,1)
(201,35,1)
(233,140,1)
(227,96,1)
(205,338,1)
(202,340,1)
(165,117,1)
(208,139,1)
(41,51,1)
(10,199,1)
(57,149,1)
(282,342,1)
(294,303,1)
(315,228,1)
(28,98,1)
(247,102,1)
(228,338,1)
(234,260,1)
(145,87,1)
(142,82,1)
(314,69,1)
(255,230,1)
(55,100,1)
(99,211,1)
(137,326,1)
(57,246,1)
(84,218,1)
(289,268,1)
(330,182,1)
(241,31,1)
(195,27,1)
(66,90,1)
(87,132,1)
(126,242,1)
(7,113,1)
(315,189,1)
(282,172,1)
(45,278,1)
(73,61,1)
(337,53,1)
(27,175,1)
(300,46,1)
(89,260,1)
(39,163,1)
(133,19,1)
(244,107,1)
(132,57,1)
(205,58,1)
(167,119,1)
(326,90,1)
(299,115,1)
(20,90,1)
(231,118,1)
(216,255,1)
(345,113,1)
(293,34,1)
(134,155,1)
(164,125,1)
(10,244,1)
(107,197,1)
(136,167,1)
(13,169,1)
(92,79,1)
(59,293,1)
(4,299,1)
(236,161,1)
(151,39,1)
(262,101,1)
(29,250,1)
(153,207,1)
(312,163,1)
(181,277,1)
(179,193,1)
(307,187,1)
(12,128,1)
(321,13,1)
(27,90,1)
(322,164,1)
(15,85,1)
(155,62,1)
(303,70,1)
(212,175,1)
(273,21,1)
(42,166,1)
(339,263,1)
(32,41,1)
(129,284,1)
(125,245,1)
(185,267,1)
(54,111,1)
(233,323,1)
(184,102,1)
(212,45,1)
(322,288,1)
(253,116,1)
(280,338,1)
(296,252,1)
(20,47,1)
(13,315,1)
(40,105,1)
(9,201,1)
(279,159,1)
(292,31,1)
(135,173,1)
(170,103,1)
(283,216,1)
(228,294,1)
(194,238,1)
(252,206,1)
(215,173,1)
(90,175,1)
(250,83,1)
(102,336,1)
(176,325,1)
(1,241,1)
(208,104,1)
(331,14,1)
(111,338,1)
(178,266,1)
(16,147,1)
(272,183,1)
(85,44,1)
(200,142,1)
(62,343,1)
(132,33,1)
(257,194,1)
(227,300,1)
(307,56,1)
(3,32,1)
(320,172,1)
(198,112,1)
(138,253,1)
(336,210,1)
(317,301,1)
(139,50,1)
(269,195,1)
(131,213,1)
(8,138,1)
(265,159,1)
(167,338,1)
(287,129,1)
(102,210,1)
(114,106,1)
(278,15,1)
(326,175,1)
(184,247,1)
(92,114,1)
(327,24,1)
(165,338,1)
(49,200,1)
(43,185,1)
(114,153,1)
(206,67,1)
(158,223,1)
(69,31,1)
(53,145,1)
(23,332,1)
(231,338,1)
(191,186,1)
(263,224,1)
(191,91,1)
(284,225,1)
(137,204,1)
(113,13,1)
(305,55,1)
(73,191,1)
(328,80,1)
(246,226,1)
(270,282,1)
(48,338,1)
(176,87,1)
(183,280,1)
(256,257,1)
(340,167,1)
(261,338,1)
(113,202,1)
(326,75,1)
(274,154,1)
(182,56,1)
(172,221,1)
(241,198,1)
(268,338,1)
(37,178,1)
(120,271,1)
(112,290,1)
(27,262,1)
(115,3,1)
(319,329,1)
(106,285,1)
(148,158,1)
(271,127,1)
(115,32,1)
(48,77,1)
(94,328,1)
(202,235,1)
(282,150,1)
(112,176,1)
(285,322,1)
(127,264,1)
(218,188,1)
(169,315,1)
(22,1,1)
(90,11,1)
(174,2,1)
(297,249,1)
(36,283,1)
(53,309,1)
(172,174,1)
(233,15,1)
(268,72,1)
(297,318,1)
(98,275,1)
(59,154,1)
(213,111,1)
(50,279,1)
(134,62,1)
(197,272,1)
(121,90,1)
(342,261,1)
(188,297,1)
(173,152,1)
(280,304,1)
(334,137,1)
(281,213,1)
(261,86,1)
(339,224,1)
(93,338,1)
(141,87,1)
(35,237,1)
(252,146,1)
(207,147,1)
(189,228,1)
(5,141,1)
(93,308,1)
(232,246,1)
(82,134,1)
(243,85,1)
(159,338,1)
(320,144,1)
(98,338,1)
(318,338,1)
(85,260,1)
(164,338,1)
(168,141,1)
(159,26,1)
(144,171,1)
(248,181,1)
(161,296,1)
(265,269,2)
(174,306,2)
(228,269,2)
(148,306,2)
(50,269,2)
(258,306,2)
(27,306,2)
(245,306,2)
(237,339,2)
(269,306,2)
(91,87,2)
(121,173,2)
(39,163,2)
(63,306,2)
(30,306,2)
(205,213,2)
(165,338,2)
(307,213,2)
(275,141,2)
(92,114,2)
(64,306,2)
(41,306,2)
(276,306,2)
(212,15,2)
(79,306,2)
(93,338,2)
(190,269,2)
(322,306,2)
(345,113,2)
(311,141,2)
(279,269,2)
(11,175,2)
(297,318,2)
(174,148,2)
(58,213,2)
(57,149,2)
(106,322,2)
(84,306,2)
(86,163,2)
(17,306,2)
(239,10,2)
(278,15,2)
(227,300,2)
(70,269,2)
(92,306,2)
(93,306,2)
(223,306,2)
(18,85,2)
(326,306,2)
(165,213,2)
(259,173,2)
(21,306,2)
(312,163,2)
(280,269,2)
(297,306,2)
(300,43,2)
(20,90,2)
(69,128,2)
(282,172,2)
(273,306,2)
(231,338,2)
(173,15,2)
(114,153,2)
(136,269,2)
(235,269,2)
(23,338,2)
(317,269,2)
(12,306,2)
(289,85,2)
(185,173,2)
(189,269,2)
(282,87,2)
(84,218,2)
(320,221,2)
(282,342,2)
(205,338,2)
(48,338,2)
(197,269,2)
(9,306,2)
(20,306,2)
(53,145,2)
(67,173,2)
(113,13,2)
(272,269,2)
(327,24,2)
(115,32,2)
(241,31,2)
(208,269,2)
(323,306,2)
(127,269,2)
(16,306,2)
(65,213,2)
(48,163,2)
(23,85,2)
(268,85,2)
(163,85,2)
(244,107,2)
(99,173,2)
(305,338,2)
(146,173,2)
(90,11,2)
(266,305,2)
(209,269,2)
(334,306,2)
(234,306,2)
(172,306,2)
(167,338,2)
(188,306,2)
(310,269,2)
(187,213,2)
(119,269,2)
(27,175,2)
(7,269,2)
(285,306,2)
(198,306,2)
(207,306,2)
(28,141,2)
(128,306,2)
(336,85,2)
(40,341,2)
(284,213,2)
(168,141,2)
(201,306,2)
(149,173,2)
(82,306,2)
(147,306,2)
(322,164,2)
(216,85,2)
(176,87,2)
(62,306,2)
(227,173,2)
(157,269,2)
(87,132,2)
(89,213,2)
(275,31,2)
(155,306,2)
(59,85,2)
(15,85,2)
(236,173,2)
(238,306,2)
(274,306,2)
(47,306,2)
(142,306,2)
(34,333,2)
(145,87,2)
(282,150,2)
(319,163,2)
(159,338,2)
(98,90,2)
(304,269,2)
(94,85,2)
(2,306,2)
(302,173,2)
(164,306,2)
(243,85,2)
(77,163,2)
(315,228,2)
(8,163,2)
(250,306,2)
(191,91,2)
(177,28,2)
(137,306,2)
(122,306,2)
(342,261,2)
(13,315,2)
(192,87,2)
(194,306,2)
(224,306,2)
(333,85,2)
(129,225,2)
(11,306,2)
(40,306,2)
(159,269,2)
(277,269,2)
(153,306,2)
(104,120,2)
(116,338,2)
(282,221,2)
(291,306,2)
(244,269,2)
(35,306,2)
(44,213,2)
(128,93,2)
(107,269,2)
(318,306,2)
(177,327,2)
(42,306,2)
(177,85,2)
(329,163,2)
(199,269,2)
(85,213,2)
(253,163,2)
(261,163,2)
(172,174,2)
(233,85,2)
(161,252,2)
(29,306,2)
(96,173,2)
(184,102,2)
(137,326,2)
(282,163,2)
(326,175,2)
(300,173,2)
(126,213,2)
(36,59,2)
(43,173,2)
(211,173,2)
(240,306,2)
(113,269,2)
(335,306,2)
(277,345,2)
(49,306,2)
(127,338,2)
(76,306,2)
(215,173,2)
(169,269,2)
(299,115,2)
(274,154,2)
(102,85,2)
(179,141,2)
(181,277,2)
(99,154,2)
(283,85,2)
(98,87,2)
(259,298,2)
(326,90,2)
(340,167,2)
(208,104,2)
(252,206,2)
(66,306,2)
(341,87,2)
(1,306,2)
(139,269,2)
(234,260,2)
(280,338,2)
(328,163,2)
(20,175,2)
(62,343,2)
(37,266,2)
(218,297,2)
(207,147,2)
(112,176,2)
(81,163,2)
(73,306,2)
(177,259,2)
(314,306,2)
(206,173,2)
(134,62,2)
(137,204,2)
(218,306,2)
(176,306,2)
(24,141,2)
(104,269,2)
(132,33,2)
(69,306,2)
(301,208,2)
(249,306,2)
(5,141,2)
(34,85,2)
(121,175,2)
(27,90,2)
(149,161,2)
(85,260,2)
(108,306,2)
(183,269,2)
(298,173,2)
(325,306,2)
(148,31,2)
(141,173,2)
(98,175,2)
(32,51,2)
(192,306,2)
(140,173,2)
(202,340,2)
(3,306,2)
(51,338,2)
(117,213,2)
(202,269,2)
(180,141,2)
(248,306,2)
(345,269,2)
(91,306,2)
(13,269,2)
(225,213,2)
(113,202,2)
(293,85,2)
(213,111,2)
(195,306,2)
(342,163,2)
(341,306,2)
(287,213,2)
(145,306,2)
(73,191,2)
(105,306,2)
(252,173,2)
(318,338,2)
(139,279,2)
(242,213,2)
(72,85,2)
(161,173,2)
(267,173,2)
(26,269,2)
(114,106,2)
(255,85,2)
(205,175,2)
(332,85,2)
(212,175,2)
(327,141,2)
(87,173,2)
(272,280,2)
(339,224,2)
(296,173,2)
(46,173,2)
(172,221,2)
(237,306,2)
(138,163,2)
(320,172,2)
(28,98,2)
(129,213,2)
(177,56,2)
(186,306,2)
(135,173,2)
(124,307,2)
(172,172,2)
(231,213,2)
(225,165,2)
(333,23,2)
(299,306,2)
(255,175,2)
(125,306,2)
(101,306,2)
(229,306,2)
(200,306,2)
(321,269,2)
(239,269,2)
(116,163,2)
(309,306,2)
(158,306,2)
(230,85,2)
(303,269,2)
(212,90,2)
(126,242,2)
(166,306,2)
(263,306,2)
(164,338,2)
(151,163,2)
(184,85,2)
(253,116,2)
(70,239,2)
(98,141,2)
(11,90,2)
(132,57,2)
(257,306,2)
(83,306,2)
(57,173,2)
(264,269,2)
(69,31,2)
(338,331,2)
(132,173,2)
(90,306,2)
(90,175,2)
(271,269,2)
(337,306,2)
(315,269,2)
(261,338,2)
(111,338,2)
(120,127,2)
(307,56,2)
(115,306,2)
(210,85,2)
(193,141,2)
(80,48,2)
(124,177,2)
(32,306,2)
(260,126,2)
(279,159,2)
(208,139,2)
(242,231,2)
(167,269,2)
(206,338,2)
(4,306,2)
(246,173,2)
(288,306,2)
(163,184,2)
(112,306,2)
(147,338,2)
(75,306,2)
(343,306,2)
(114,306,2)
(250,192,2)
(247,85,2)
(256,306,2)
(210,268,2)
(262,306,2)
(320,163,2)
(241,306,2)
(98,338,2)
(160,306,2)
(10,269,2)
(281,213,2)
(191,306,2)
(98,275,2)
(308,306,2)
(124,36,2)
(203,306,2)
(80,163,2)
(15,306,2)
(339,306,2)
(294,269,2)
(53,306,2)
(61,306,2)
(295,306,2)
(173,212,2)
(313,306,2)
(232,173,2)
(144,163,2)
(74,141,2)
(59,154,2)
(8,253,2)
(328,80,2)
(171,163,2)
(181,269,2)
(153,207,2)
(320,338,2)
(10,244,2)
(343,87,2)
(268,338,2)
(68,269,2)
(246,226,2)
(224,87,2)
(45,15,2)
(106,306,2)
(121,90,2)
(220,173,2)
(301,269,2)
(131,213,2)
(340,269,2)
(36,85,2)
(152,15,2)
(107,272,2)
(246,227,2)
(195,27,2)
(306,173,2)
(120,269,2)
(22,306,2)
(260,213,2)
(102,210,2)
(118,213,2)
(51,306,2)
(290,306,2)
(331,88,2)
(43,338,2)
(299,137,2)
(134,306,2)
(270,163,2)
(228,338,2)
(57,246,2)
-----------------------------------
(0,if (num_wrs == 0)
(1,"cookie 0x%llx pidx %u\\n")
(2,T4_EQ_ENTRY_SIZE)
(3,pidx)
(4,qhp)
(5,err)
(6,while (wr)
(7,host_ts)
(8,spin_unlock_irqrestore(&qhp->lock, flag)
(9,wqe)
(10,qhp->rhp->rdev.lldi.ports[0])
(11,wr->next)
(12,len16)
(13,qhp->wq.rq.sw_rq)
(14,ibqp)
(15,wr)
(16,rq)
(17,pidx)
(18,flag)
(19,len16)
(20,*bad_wr = wr)
(21,wqe->recv.opcode = FW_RI_RECV_WR)
(22,wr)
(23,qhp->lock)
(24,-ENOMEM)
(25,if (qhp->wq.flushed)
(26,wq)
(27,wr->wr_id)
(28,err = build_rdma_recv(qhp, wqe, wr, &len16)
(29,FW_RI_RECV_WR)
(30,recv)
(31,len16 = 0)
(32,qhp->wq.rq)
(33,union t4_recv_wr *)
(34,spin_unlock_irqrestore(&qhp->lock, flag)
(35,0)
(36,return -ENOMEM;)
(37,spin_lock_irqsave(&qhp->lock, flag)
(38,flag)
(39,qhp)
(40,wqe->recv.wrid)
(41,rq)
(42,next)
(43,qhp->wq)
(44,0)
(45,num_sge)
(46,rq)
(47,wr)
(48,qhp->lock)
(49,recv)
(50,sw_rq)
(51,qhp->wq)
(52,qhp)
(53,wqe->recv.r1)
(54,flushed)
(55,lock)
(56,err = 0)
(57,(u8 *)
(58,wr)
(59,*bad_wr)
(60,)
(61,1)
(62,wqe->recv.r2)
(63,2)
(64,recv)
(65,qhp)
(66,num_wrs)
(67,wq)
(68,qhp)
(69,t4_rq_produce(&qhp->wq, len16)
(70,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts =\n\\n\\t\\t\\t\\tcxgb4_read_sge_timestamp(\n\\n\\t\\t\\t\\t\\t\\tqhp->rhp->rdev.lldi.ports[0])
(71,err)
(72,rhp)
(73,wqe->recv.r2[1])
(74,wr)
(75,wr_id)
(76,qhp)
(77,lock)
(78,if (!qhp->rhp->rdev.status_page->db_off)
(79,wr_id)
(80,&qhp->lock)
(81,flag)
(82,0)
(83,opcode)
(84,wqe->recv.wrid = qhp->wq.rq.pidx)
(85,num_wrs == 0)
(86,wq)
(87,wqe = (union t4_recv_wr *)
(88,struct ib_qp *ibqp)
(89,num_wrs)
(90,wr = wr->next)
(91,wqe->recv)
(92,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id)
(93,qhp->wq)
(94,err)
(95,if (c4iw_wr_log)
(96,queue)
(97,len16)
(98,build_rdma_recv(qhp, wqe, wr, &len16)
(99,*bad_wr)
(100,qhp)
(101,wr)
(102,qhp->rhp->rdev.status_page)
(103,qhp)
(104,qhp->wq.rq.pidx)
(105,wrid)
(106,qhp->wq.rq.sw_rq)
(107,qhp->rhp->rdev.lldi)
(108,wq)
(109,)
(110,if (num_wrs)
(111,qhp->wq)
(112,wqe->recv.len16)
(113,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx])
(114,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx])
(115,qhp->wq.rq.pidx)
(116,qhp->lock)
(117,lock)
(118,wq)
(119,wq)
(120,qhp->wq.rq)
(121,*bad_wr = wr)
(122,wqe)
(123,idx)
(124,RET)
(125,wq)
(126,t4_rq_avail(&qhp->wq)
(127,qhp->wq)
(128,&qhp->wq)
(129,spin_unlock_irqrestore(&qhp->lock, flag)
(130,0)
(131,num_wrs)
(132,(union t4_recv_wr *)
(133,0)
(134,wqe->recv.r2[0])
(135,err)
(136,rq)
(137,(unsigned long long)
(138,flag)
(139,qhp->wq.rq.sw_rq)
(140,break;)
(141,num_wrs)
(142,wqe->recv.r2[0] = 0)
(143,)
(144,idx)
(145,wqe->recv)
(146,rq)
(147,qhp->wq)
(148,len16*16)
(149,qhp->wq.rq.wq_pidx *\n\\n\\t\\t\\t\\t\\t   T4_EQ_ENTRY_SIZE)
(150,*wqe = NULL)
(151,lock)
(152,T4_MAX_RECV_SGE)
(153,qhp->wq.rq.pidx)
(154,struct ib_recv_wr **bad_wr)
(155,0)
(156,0)
(157,ports)
(158,16)
(159,qhp->wq)
(160,wqe)
(161,qhp->wq.rq.wq_pidx)
(162,)
(163,!qhp->rhp->rdev.status_page->db_off)
(164,qhp->wq)
(165,qhp->lock)
(166,wr)
(167,qhp->wq)
(168,err)
(169,sw_rq)
(170,wq)
(171,qhp)
(172,idx += DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
(173,wr->num_sge > T4_MAX_RECV_SGE)
(174,DIV_ROUND_UP(len16*16, T4_EQ_ENTRY_SIZE)
(175,struct ib_recv_wr *wr)
(176,wqe->recv)
(177,return err;)
(178,flag)
(179,wqe)
(180,len16)
(181,getnstimeofday(\n\\n\\t\\t\\t\\t&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts)
(182,wqe)
(183,rdev)
(184,qhp->rhp->rdev.status_page->db_off)
(185,wq)
(186,r2)
(187,err)
(188,pidx)
(189,rq)
(190,sge_ts)
(191,wqe->recv.r2)
(192,wqe->recv)
(193,qhp)
(194,wqe->recv.r2[1] = 0)
(195,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].wr_id = wr->wr_id)
(196,)
(197,lldi)
(198,len16)
(199,0)
(200,wqe)
(201,wqe->recv.r2[2] = 0)
(202,qhp->wq.rq.pidx)
(203,qhp)
(204,unsigned long long)
(205,complete_rq_drain_wrs(qhp, wr)
(206,qhp->wq)
(207,qhp->wq.rq)
(208,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx])
(209,pidx)
(210,qhp->rhp->rdev)
(211,bad_wr)
(212,wr->num_sge)
(213,qhp->wq.flushed)
(214,qhp)
(215,wqe)
(216,ENOMEM)
(217,if (err)
(218,qhp->wq.rq.pidx)
(219,)
(220,wr)
(221,idx = 0)
(222,err)
(223,len16)
(224,wqe->recv)
(225,&qhp->lock)
(226,u8 *)
(227,qhp->wq.rq.queue)
(228,qhp->wq)
(229,bad_wr)
(230,wr)
(231,qhp->wq)
(232,qhp)
(233,qhp)
(234,num_wrs--)
(235,pidx)
(236,T4_EQ_ENTRY_SIZE)
(237,wqe->recv.r2[2])
(238,0)
(239,cxgb4_read_sge_timestamp(\n\\n\\t\\t\\t\\t\\t\\tqhp->rhp->rdev.lldi.ports[0])
(240,recv)
(241,wqe->recv.len16 = len16)
(242,&qhp->wq)
(243,qhp)
(244,qhp->rhp->rdev.lldi.ports)
(245,qhp)
(246,(u8 *)
(247,db_off)
(248,wqe)
(249,rq)
(250,wqe->recv.opcode)
(251,wqe)
(252,qhp->wq.rq)
(253,&qhp->lock)
(254,num_wrs)
(255,*bad_wr = wr)
(256,recv)
(257,wqe)
(258,recv)
(259,err = -EINVAL)
(260,num_wrs = t4_rq_avail(&qhp->wq)
(261,qhp->wq)
(262,wr_id)
(263,r2)
(264,wq)
(265,rq)
(266,&qhp->lock)
(267,qhp)
(268,qhp->rhp)
(269,c4iw_wr_log)
(270,qhp)
(271,rq)
(272,qhp->rhp->rdev)
(273,wqe)
(274,*bad_wr)
(275,&len16)
(276,wqe->recv.r1 = 0)
(277,&qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts)
(278,wr)
(279,qhp->wq.rq)
(280,qhp->rhp)
(281,qhp)
(282,t4_ring_rq_db(&qhp->wq, idx, wqe)
(283,-ENOMEM)
(284,flag)
(285,sw_rq)
(286,)
(287,qhp)
(288,rq)
(289,rdev)
(290,len16)
(291,r2)
(292,idx)
(293,bad_wr)
(294,wq)
(295,wq)
(296,wq_pidx)
(297,qhp->wq.rq)
(298,-EINVAL)
(299,pr_debug("cookie 0x%llx pidx %u\\n",\n\\n\\t\\t\\t (unsigned long long)
(300,qhp->wq.rq)
(301,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].sge_ts)
(302,EINVAL)
(303,qhp)
(304,rhp)
(305,qhp->lock)
(306,err)
(307,return err;)
(308,wq)
(309,r1)
(310,qhp)
(311,ENOMEM)
(312,qhp)
(313,wr)
(314,idx)
(315,qhp->wq.rq)
(316,)
(317,qhp)
(318,qhp->wq)
(319,wqe)
(320,ring_kernel_rq_db(qhp, idx)
(321,qhp)
(322,qhp->wq.rq)
(323,break;)
(324,)
(325,recv)
(326,wr->wr_id)
(327,err = -ENOMEM)
(328,spin_unlock_irqrestore(&qhp->lock, flag)
(329,idx)
(330,NULL)
(331,to_c4iw_qp(ibqp)
(332,lock)
(333,&qhp->lock)
(334,qhp)
(335,wq)
(336,status_page)
(337,0)
(338,qhp = to_c4iw_qp(ibqp)
(339,wqe->recv.r2)
(340,qhp->wq.rq)
(341,wqe->recv)
(342,&qhp->wq)
(343,wqe->recv)
(344,if (wr->num_sge > T4_MAX_RECV_SGE)
(345,qhp->wq.rq.sw_rq[qhp->wq.rq.pidx].host_ts)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^