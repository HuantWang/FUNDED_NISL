-----label-----
1
-----code-----
void show_mem(unsigned int filter)
{
	int free = 0, total = 0, reserved = 0;
	int shared = 0, cached = 0, slab = 0, i;
	struct meminfo * mi = &meminfo;

	printk("Mem-info:\n");
	show_free_areas(filter);

	if (filter & SHOW_MEM_FILTER_PAGE_COUNT)
		return;

	for_each_bank (i, mi) {
		struct membank *bank = &mi->bank[i];
		unsigned int pfn1, pfn2;
		struct page *page, *end;

		pfn1 = bank_pfn_start(bank);
		pfn2 = bank_pfn_end(bank);

		page = pfn_to_page(pfn1);
		end  = pfn_to_page(pfn2 - 1) + 1;

		do {
			total++;
			if (PageReserved(page))
				reserved++;
			else if (PageSwapCache(page))
				cached++;
			else if (PageSlab(page))
				slab++;
			else if (!page_count(page))
				free++;
			else
				shared += page_count(page) - 1;
			page++;
#ifdef CONFIG_SPARSEMEM
			pfn1++;
			if (!(pfn1 % PAGES_PER_SECTION))
				page = pfn_to_page(pfn1);
		} while (pfn1 < pfn2);
#else
		} while (page < end);
#endif
	}

	printk("%d pages of RAM\n", total);
	printk("%d free pages\n", free);
	printk("%d reserved pages\n", reserved);
	printk("%d slab pages\n", slab);
	printk("%d pages shared\n", shared);
	printk("%d pages swap cached\n", cached);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
10,11
11,12
11,13
11,14
11,15
13,14
13,15
15,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
26,27
26,28
26,29
26,30
26,31
28,29
28,30
30,31
32,33
32,34
34,35
36,37
36,38
38,39
40,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
51,52
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
80,83
80,84
80,85
80,86
80,87
80,88
81,82
82,83
82,84
83,84
85,86
85,87
85,88
88,89
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
98,101
100,101
102,103
104,105
105,106
105,107
105,108
106,107
108,109
108,110
111,112
111,113
114,115
115,116
115,117
116,117
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
146,147
146,148
147,148
149,150
149,151
150,151
154,155
154,156
155,156
155,157
155,158
156,157
157,158
158,159
160,161
160,162
160,163
161,162
161,163
162,163
164,165
166,167
167,168
168,169
170,171
170,172
170,173
171,172
171,173
172,173
174,175
176,177
177,178
178,179
180,181
180,182
180,183
181,182
181,183
182,183
184,185
186,187
187,188
188,189
190,191
190,192
190,193
191,192
192,193
192,194
193,194
195,196
197,198
198,199
199,200
201,202
202,203
202,204
203,204
205,206
205,207
206,207
206,208
207,208
209,210
212,213
213,214
214,215
216,217
216,218
217,218
219,220
221,222
222,223
222,224
222,225
223,224
226,227
228,229
229,230
229,231
229,232
230,231
233,234
235,236
236,237
236,238
236,239
237,238
240,241
242,243
243,244
243,245
243,246
244,245
247,248
249,250
250,251
250,252
250,253
251,252
254,255
256,257
257,258
257,259
257,260
258,259
261,262
-----nextToken-----
2,4,6,8,12,14,16,18,20,22,24,27,29,31,33,35,37,39,41,45,47,48,52,56,57,61,63,67,69,70,74,76,78,84,86,87,93,94,96,99,101,103,107,109,110,112,113,117,120,122,126,129,131,135,138,140,144,148,151,152,153,159,163,165,169,173,175,179,183,185,189,194,196,200,204,208,210,211,215,218,220,224,225,227,231,232,234,238,239,241,245,246,248,252,253,255,259,260,262
-----computeFrom-----
65,66
65,67
115,116
115,117
124,125
124,126
133,134
133,135
142,143
142,144
145,146
145,147
149,150
149,151
202,203
202,204
205,206
205,207
216,217
216,218
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;DoStatement;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
void show_mem(unsigned int filter){	int free = 0, total = 0, reserved = 0;	int shared = 0, cached = 0, slab = 0, i;	struct meminfo * mi = &meminfo;	printk("Mem-info:\n");	show_free_areas(filter);	if (filter & SHOW_MEM_FILTER_PAGE_COUNT)		return;	for_each_bank (i, mi) {		struct membank *bank = &mi->bank[i];		unsigned int pfn1, pfn2;		struct page *page, *end;		pfn1 = bank_pfn_start(bank);		pfn2 = bank_pfn_end(bank);		page = pfn_to_page(pfn1);		end  = pfn_to_page(pfn2 - 1) + 1;		do {			total++;			if (PageReserved(page))				reserved++;			else if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;			page++;#ifdef CONFIG_SPARSEMEM			pfn1++;			if (!(pfn1 % PAGES_PER_SECTION))				page = pfn_to_page(pfn1);		} while (pfn1 < pfn2);#else		} while (page < end);#endif	}	printk("%d pages of RAM\n", total);	printk("%d free pages\n", free);	printk("%d reserved pages\n", reserved);	printk("%d slab pages\n", slab);	printk("%d pages shared\n", shared);	printk("%d pages swap cached\n", cached);}
void
show_mem(unsigned int filter)
show_mem
unsigned int filter
unsigned int
filter
filter
{	int free = 0, total = 0, reserved = 0;	int shared = 0, cached = 0, slab = 0, i;	struct meminfo * mi = &meminfo;	printk("Mem-info:\n");	show_free_areas(filter);	if (filter & SHOW_MEM_FILTER_PAGE_COUNT)		return;	for_each_bank (i, mi) {		struct membank *bank = &mi->bank[i];		unsigned int pfn1, pfn2;		struct page *page, *end;		pfn1 = bank_pfn_start(bank);		pfn2 = bank_pfn_end(bank);		page = pfn_to_page(pfn1);		end  = pfn_to_page(pfn2 - 1) + 1;		do {			total++;			if (PageReserved(page))				reserved++;			else if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;			page++;#ifdef CONFIG_SPARSEMEM			pfn1++;			if (!(pfn1 % PAGES_PER_SECTION))				page = pfn_to_page(pfn1);		} while (pfn1 < pfn2);#else		} while (page < end);#endif	}	printk("%d pages of RAM\n", total);	printk("%d free pages\n", free);	printk("%d reserved pages\n", reserved);	printk("%d slab pages\n", slab);	printk("%d pages shared\n", shared);	printk("%d pages swap cached\n", cached);}
int free = 0, total = 0, reserved = 0;
int free = 0, total = 0, reserved = 0;
int
free = 0
free
= 0
0
total = 0
total
= 0
0
reserved = 0
reserved
= 0
0
int shared = 0, cached = 0, slab = 0, i;
int shared = 0, cached = 0, slab = 0, i;
int
shared = 0
shared
= 0
0
cached = 0
cached
= 0
0
slab = 0
slab
= 0
0
i
i
struct meminfo * mi = &meminfo;
struct meminfo * mi = &meminfo;
struct meminfo
meminfo
* mi = &meminfo
*
mi
= &meminfo
&meminfo
meminfo
meminfo
printk("Mem-info:\n");
printk("Mem-info:\n")
printk
printk
"Mem-info:\n"
show_free_areas(filter);
show_free_areas(filter)
show_free_areas
show_free_areas
filter
filter
if (filter & SHOW_MEM_FILTER_PAGE_COUNT)		return;
filter & SHOW_MEM_FILTER_PAGE_COUNT
filter
filter
SHOW_MEM_FILTER_PAGE_COUNT
SHOW_MEM_FILTER_PAGE_COUNT
return;
for_each_bank (i, mi)
for_each_bank (i, mi)
for_each_bank
for_each_bank
i
i
mi
mi
)
{		struct membank *bank = &mi->bank[i];		unsigned int pfn1, pfn2;		struct page *page, *end;		pfn1 = bank_pfn_start(bank);		pfn2 = bank_pfn_end(bank);		page = pfn_to_page(pfn1);		end  = pfn_to_page(pfn2 - 1) + 1;		do {			total++;			if (PageReserved(page))				reserved++;			else if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;			page++;#ifdef CONFIG_SPARSEMEM			pfn1++;			if (!(pfn1 % PAGES_PER_SECTION))				page = pfn_to_page(pfn1);		} while (pfn1 < pfn2);#else		} while (page < end);#endif	}
struct membank *bank = &mi->bank[i];
struct membank *bank = &mi->bank[i];
struct membank
membank
*bank = &mi->bank[i]
*
bank
= &mi->bank[i]
&mi->bank[i]
mi->bank[i]
mi->bank
mi
mi
bank
i
i
unsigned int pfn1, pfn2;
unsigned int pfn1, pfn2;
unsigned int
pfn1
pfn1
pfn2
pfn2
struct page *page, *end;
struct page *page, *end;
struct page
page
*page
*
page
*end
*
end
pfn1 = bank_pfn_start(bank);
pfn1 = bank_pfn_start(bank)
pfn1
pfn1
bank_pfn_start(bank)
bank_pfn_start
bank_pfn_start
bank
bank
pfn2 = bank_pfn_end(bank);
pfn2 = bank_pfn_end(bank)
pfn2
pfn2
bank_pfn_end(bank)
bank_pfn_end
bank_pfn_end
bank
bank
page = pfn_to_page(pfn1);
page = pfn_to_page(pfn1)
page
page
pfn_to_page(pfn1)
pfn_to_page
pfn_to_page
pfn1
pfn1
end  = pfn_to_page(pfn2 - 1) + 1;
end  = pfn_to_page(pfn2 - 1) + 1
end
end
pfn_to_page(pfn2 - 1) + 1
pfn_to_page(pfn2 - 1)
pfn_to_page
pfn_to_page
pfn2 - 1
pfn2
pfn2
1
1
do {			total++;			if (PageReserved(page))				reserved++;			else if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;			page++;#ifdef CONFIG_SPARSEMEM			pfn1++;			if (!(pfn1 % PAGES_PER_SECTION))				page = pfn_to_page(pfn1);		} while (pfn1 < pfn2);#else		} while (page < end);
{			total++;			if (PageReserved(page))				reserved++;			else if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;			page++;#ifdef CONFIG_SPARSEMEM			pfn1++;			if (!(pfn1 % PAGES_PER_SECTION))				page = pfn_to_page(pfn1);		} while (pfn1 < pfn2);#else		}
total++;
total++
total
total
if (PageReserved(page))				reserved++;			else if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;
PageReserved(page)
PageReserved
PageReserved
page
page
reserved++;
reserved++
reserved
reserved
if (PageSwapCache(page))				cached++;			else if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;
PageSwapCache(page)
PageSwapCache
PageSwapCache
page
page
cached++;
cached++
cached
cached
if (PageSlab(page))				slab++;			else if (!page_count(page))				free++;			else				shared += page_count(page) - 1;
PageSlab(page)
PageSlab
PageSlab
page
page
slab++;
slab++
slab
slab
if (!page_count(page))				free++;			else				shared += page_count(page) - 1;
!page_count(page)
page_count(page)
page_count
page_count
page
page
free++;
free++
free
free
shared += page_count(page) - 1;
shared += page_count(page) - 1
shared
shared
page_count(page) - 1
page_count(page)
page_count
page_count
page
page
1
page++;
page++
page
page
page < end
page
page
end
end
printk("%d pages of RAM\n", total);
printk("%d pages of RAM\n", total)
printk
printk
"%d pages of RAM\n"
total
total
printk("%d free pages\n", free);
printk("%d free pages\n", free)
printk
printk
"%d free pages\n"
free
free
printk("%d reserved pages\n", reserved);
printk("%d reserved pages\n", reserved)
printk
printk
"%d reserved pages\n"
reserved
reserved
printk("%d slab pages\n", slab);
printk("%d slab pages\n", slab)
printk
printk
"%d slab pages\n"
slab
slab
printk("%d pages shared\n", shared);
printk("%d pages shared\n", shared)
printk
printk
"%d pages shared\n"
shared
shared
printk("%d pages swap cached\n", cached);
printk("%d pages swap cached\n", cached)
printk
printk
"%d pages swap cached\n"
cached
cached
-----joern-----
(135,136,0)
(64,33,0)
(10,53,0)
(72,17,0)
(120,108,0)
(49,115,0)
(4,121,0)
(134,112,0)
(123,115,0)
(7,74,0)
(137,136,0)
(124,49,0)
(120,4,0)
(47,13,0)
(85,120,0)
(121,4,0)
(101,53,0)
(102,14,0)
(49,55,0)
(122,13,0)
(59,80,0)
(136,123,0)
(131,104,0)
(62,21,0)
(21,13,0)
(8,108,0)
(77,108,0)
(14,9,0)
(89,125,0)
(56,74,0)
(21,16,0)
(74,13,0)
(12,68,0)
(53,101,0)
(55,49,0)
(116,22,0)
(127,64,0)
(50,115,0)
(87,43,0)
(11,115,0)
(92,31,0)
(64,127,0)
(51,13,0)
(112,123,0)
(31,92,0)
(82,13,0)
(17,123,0)
(106,13,0)
(87,115,0)
(78,51,0)
(123,17,0)
(75,11,0)
(39,115,0)
(60,16,0)
(100,13,0)
(108,13,0)
(104,137,0)
(48,60,0)
(28,49,0)
(46,14,0)
(16,13,0)
(76,53,0)
(88,92,0)
(101,43,0)
(106,9,0)
(112,92,0)
(11,104,0)
(42,112,0)
(63,88,0)
(28,33,0)
(37,123,0)
(96,13,0)
(86,33,0)
(83,31,0)
(53,44,0)
(92,115,0)
(96,68,0)
(132,122,0)
(20,80,0)
(79,38,0)
(60,25,0)
(28,25,0)
(107,33,0)
(128,13,0)
(0,16,0)
(107,49,0)
(114,13,0)
(125,44,0)
(41,22,0)
(32,100,0)
(54,38,0)
(4,120,0)
(29,4,0)
(55,92,0)
(95,13,0)
(115,13,0)
(126,82,0)
(30,13,0)
(1,68,0)
(65,25,0)
(88,23,0)
(73,122,0)
(130,115,0)
(61,25,0)
(66,92,0)
(119,49,0)
(71,51,0)
(26,25,0)
(124,33,0)
(117,101,0)
(94,121,0)
(91,38,0)
(80,13,0)
(64,49,0)
(33,66,0)
(5,96,0)
(67,103,0)
(22,13,0)
(3,16,0)
(121,49,0)
(113,21,0)
(97,68,0)
(2,13,0)
(58,136,0)
(27,13,0)
(121,33,0)
(18,28,0)
(90,92,0)
(45,24,0)
(19,65,0)
(118,88,0)
(69,74,0)
(129,44,0)
(44,125,0)
(31,87,0)
(81,64,0)
(93,49,0)
(34,115,0)
(120,120,0)
(15,96,0)
(133,107,0)
(110,119,0)
(68,13,0)
(70,66,0)
(136,137,0)
(35,13,0)
(137,104,0)
(98,13,0)
(43,87,0)
(51,74,0)
(105,115,0)
(40,124,0)
(111,56,0)
(17,87,0)
(80,38,0)
(6,12,0)
(66,33,0)
(44,13,0)
(23,88,0)
(84,82,0)
(103,82,0)
(57,55,0)
(22,120,0)
(119,33,0)
(22,108,0)
(104,11,0)
(122,82,0)
(36,115,0)
(65,92,0)
(38,13,0)
(52,87,0)
(99,106,0)
(109,91,0)
(43,101,0)
(104,137,1)
(122,132,1)
(38,79,1)
(55,57,1)
(22,41,1)
(112,123,1)
(94,85,1)
(21,113,1)
(129,74,1)
(54,108,1)
(45,24,1)
(80,38,1)
(83,90,1)
(80,20,1)
(136,123,1)
(107,33,1)
(79,54,1)
(89,129,1)
(124,40,1)
(73,96,1)
(135,58,1)
(64,81,1)
(107,133,1)
(17,87,1)
(0,3,1)
(119,110,1)
(16,0,1)
(18,103,1)
(51,71,1)
(124,49,1)
(108,77,1)
(119,33,1)
(110,60,1)
(1,97,1)
(46,102,1)
(28,18,1)
(65,92,1)
(49,55,1)
(19,28,1)
(81,107,1)
(107,49,1)
(66,70,1)
(106,99,1)
(52,14,1)
(3,68,1)
(112,92,1)
(106,9,1)
(60,16,1)
(70,86,1)
(20,59,1)
(122,82,1)
(65,19,1)
(53,10,1)
(133,124,1)
(125,89,1)
(40,119,1)
(14,46,1)
(112,134,1)
(22,108,1)
(134,42,1)
(75,49,1)
(102,106,1)
(17,72,1)
(121,94,1)
(60,48,1)
(131,137,1)
(121,33,1)
(127,64,1)
(4,29,1)
(136,135,1)
(67,119,1)
(37,92,1)
(101,53,1)
(12,68,1)
(64,33,1)
(48,112,1)
(14,9,1)
(126,84,1)
(124,33,1)
(85,127,1)
(119,49,1)
(113,62,1)
(123,17,1)
(100,32,1)
(72,37,1)
(32,44,1)
(62,112,1)
(18,120,1)
(4,121,1)
(56,74,1)
(42,33,1)
(5,15,1)
(96,5,1)
(56,111,1)
(96,68,1)
(120,4,1)
(21,16,1)
(55,92,1)
(12,6,1)
(91,38,1)
(31,83,1)
(84,16,1)
(6,127,1)
(109,124,1)
(7,38,1)
(117,53,1)
(66,92,1)
(86,23,1)
(8,82,1)
(45,80,1)
(42,23,1)
(48,11,1)
(74,69,1)
(11,104,1)
(91,109,1)
(116,51,1)
(58,75,1)
(111,107,1)
(29,121,1)
(82,126,1)
(24,14,1)
(28,33,1)
(51,74,1)
(64,49,1)
(78,122,1)
(31,87,1)
(10,76,1)
(99,100,1)
(44,125,1)
(18,91,1)
(69,7,1)
(90,87,1)
(76,52,1)
(22,120,1)
(15,21,1)
(43,101,1)
(101,117,1)
(104,131,1)
(88,92,1)
(18,56,1)
(28,49,1)
(93,123,1)
(120,108,1)
(63,65,1)
(118,63,1)
(33,66,1)
(103,82,1)
(132,73,1)
(68,1,1)
(120,120,1)
(77,8,1)
(59,22,1)
(41,116,1)
(88,118,1)
(23,88,1)
(137,136,1)
(92,31,1)
(53,44,1)
(71,78,1)
(121,49,1)
(57,93,1)
(87,43,1)
(18,12,1)
(103,67,1)
(64,33,2)
(31,87,2)
(5,14,2)
(65,14,2)
(56,74,2)
(120,127,2)
(109,124,2)
(131,14,2)
(64,107,2)
(15,14,2)
(96,14,2)
(121,33,2)
(90,14,2)
(40,119,2)
(4,127,2)
(85,127,2)
(6,127,2)
(78,14,2)
(88,14,2)
(23,112,2)
(120,108,2)
(117,14,2)
(111,107,2)
(113,14,2)
(119,49,2)
(136,123,2)
(124,49,2)
(49,14,2)
(83,14,2)
(18,14,2)
(101,14,2)
(21,14,2)
(66,92,2)
(86,23,2)
(48,14,2)
(80,38,2)
(51,14,2)
(10,14,2)
(136,14,2)
(132,14,2)
(107,49,2)
(12,68,2)
(53,14,2)
(110,112,2)
(17,87,2)
(119,33,2)
(42,14,2)
(91,124,2)
(121,127,2)
(127,107,2)
(28,33,2)
(106,9,2)
(137,14,2)
(122,14,2)
(92,31,2)
(29,127,2)
(31,14,2)
(44,125,2)
(96,68,2)
(118,14,2)
(53,44,2)
(67,119,2)
(104,14,2)
(60,112,2)
(91,38,2)
(28,49,2)
(17,14,2)
(72,14,2)
(49,55,2)
(45,24,2)
(88,92,2)
(28,14,2)
(134,112,2)
(28,112,2)
(123,14,2)
(55,92,2)
(88,112,2)
(37,14,2)
(133,124,2)
(103,119,2)
(65,92,2)
(43,101,2)
(120,4,2)
(70,23,2)
(121,49,2)
(112,92,2)
(22,14,2)
(110,14,2)
(11,104,2)
(42,112,2)
(80,14,2)
(62,14,2)
(64,49,2)
(94,127,2)
(66,23,2)
(4,121,2)
(127,64,2)
(134,14,2)
(101,53,2)
(122,82,2)
(57,14,2)
(52,14,2)
(23,14,2)
(33,66,2)
(73,14,2)
(107,124,2)
(12,127,2)
(107,33,2)
(124,119,2)
(137,136,2)
(65,112,2)
(11,14,2)
(63,14,2)
(60,16,2)
(81,107,2)
(48,112,2)
(118,112,2)
(71,14,2)
(112,14,2)
(87,14,2)
(24,14,2)
(112,123,2)
(92,14,2)
(19,112,2)
(63,112,2)
(112,112,2)
(135,14,2)
(43,14,2)
(76,14,2)
(18,112,2)
(33,23,2)
(116,14,2)
(51,74,2)
(104,137,2)
(19,14,2)
(93,14,2)
(56,107,2)
(20,14,2)
(75,14,2)
(14,9,2)
(87,43,2)
(123,17,2)
(22,108,2)
(23,88,2)
(41,14,2)
(59,14,2)
(21,16,2)
(55,14,2)
(103,82,2)
(119,112,2)
(119,14,2)
(60,14,2)
(22,120,2)
(120,120,2)
(58,14,2)
(124,33,2)
-----------------------------------
(0,0)
(1,0)
(2,free)
(3,total)
(4,page_count(page)
(5,free)
(6,free)
(7,slab)
(8,shared)
(9,unsigned int filter)
(10,bank)
(11,end  = pfn_to_page(pfn2 - 1)
(12,free++)
(13,)
(14,filter & SHOW_MEM_FILTER_PAGE_COUNT)
(15,"%d free pages\\n")
(16,total = 0)
(17,bank_pfn_end(bank)
(18,page)
(19,pfn1)
(20,cached)
(21,printk("%d pages of RAM\\n", total)
(22,printk("%d pages shared\\n", shared)
(23,!(pfn1 % PAGES_PER_SECTION)
(24,return;)
(25,)
(26,if (PageReserved(page)
(27,reserved)
(28,page++)
(29,1)
(30,slab)
(31,bank_pfn_start(bank)
(32,"Mem-info:\\n")
(33,page = pfn_to_page(pfn1)
(34,end)
(35,i)
(36,page)
(37,pfn2)
(38,cached = 0)
(39,pfn2)
(40,page)
(41,shared)
(42,pfn1)
(43,&mi->bank[i])
(44,* mi = &meminfo)
(45,RET)
(46,SHOW_MEM_FILTER_PAGE_COUNT)
(47,shared)
(48,total)
(49,page = pfn_to_page(pfn1)
(50,do)
(51,printk("%d slab pages\\n", slab)
(52,bank)
(53,mi->bank)
(54,cached)
(55,pfn_to_page(pfn1)
(56,slab++)
(57,pfn1)
(58,pfn2)
(59,"%d pages swap cached\\n")
(60,total++)
(61,if (!(pfn1 % PAGES_PER_SECTION)
(62,"%d pages of RAM\\n")
(63,pfn1)
(64,page_count(page)
(65,pfn1++)
(66,pfn_to_page(pfn1)
(67,reserved)
(68,free = 0)
(69,0)
(70,pfn1)
(71,slab)
(72,bank)
(73,"%d reserved pages\\n")
(74,slab = 0)
(75,end)
(76,mi)
(77,0)
(78,"%d slab pages\\n")
(79,0)
(80,printk("%d pages swap cached\\n", cached)
(81,page)
(82,reserved = 0)
(83,bank)
(84,reserved)
(85,shared)
(86,page)
(87,*bank = &mi->bank[i])
(88,pfn1 % PAGES_PER_SECTION)
(89,meminfo)
(90,pfn1)
(91,cached++)
(92,pfn1 = bank_pfn_start(bank)
(93,page)
(94,page)
(95,cached)
(96,printk("%d free pages\\n", free)
(97,free)
(98,total)
(99,filter)
(100,printk("Mem-info:\\n")
(101,mi->bank[i])
(102,filter)
(103,reserved++)
(104,pfn_to_page(pfn2 - 1)
(105,bank)
(106,show_free_areas(filter)
(107,PageSlab(page)
(108,shared = 0)
(109,cached)
(110,page)
(111,slab)
(112,pfn1 < pfn2)
(113,total)
(114,mi)
(115,)
(116,"%d pages shared\\n")
(117,i)
(118,PAGES_PER_SECTION)
(119,PageReserved(page)
(120,shared += page_count(page)
(121,page_count(page)
(122,printk("%d reserved pages\\n", reserved)
(123,pfn2 = bank_pfn_end(bank)
(124,PageSwapCache(page)
(125,&meminfo)
(126,0)
(127,!page_count(page)
(128,if (filter & SHOW_MEM_FILTER_PAGE_COUNT)
(129,mi)
(130,pfn1)
(131,1)
(132,reserved)
(133,page)
(134,pfn2)
(135,1)
(136,pfn2 - 1)
(137,pfn_to_page(pfn2 - 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^