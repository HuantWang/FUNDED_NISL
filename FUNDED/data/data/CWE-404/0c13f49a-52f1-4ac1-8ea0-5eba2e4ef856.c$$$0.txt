-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_01_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
56,58
57,58
59,60
59,61
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,52,53,54,58,61,62,63
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_01_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_calloc_01_bad()
CWE401_Memory_Leak__int_calloc_01_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
;
-----joern-----
(30,28,0)
(17,15,0)
(3,7,0)
(0,18,0)
(3,2,0)
(31,18,0)
(10,18,0)
(27,19,0)
(7,24,0)
(23,28,0)
(12,0,0)
(6,24,0)
(8,15,0)
(28,0,0)
(26,7,0)
(13,3,0)
(24,18,0)
(2,3,0)
(28,14,0)
(25,6,0)
(24,7,0)
(19,0,0)
(11,18,0)
(28,24,0)
(4,6,0)
(7,3,0)
(20,19,0)
(29,31,0)
(17,21,0)
(5,31,0)
(22,2,0)
(14,28,0)
(14,18,0)
(19,24,0)
(15,17,0)
(16,24,0)
(7,26,0)
(14,28,1)
(23,0,1)
(28,30,1)
(30,23,1)
(27,20,1)
(15,8,1)
(16,31,1)
(31,5,1)
(7,26,1)
(12,19,1)
(19,24,1)
(22,13,1)
(6,24,1)
(20,17,1)
(24,7,1)
(8,6,1)
(19,27,1)
(20,6,1)
(4,24,1)
(0,12,1)
(2,22,1)
(3,2,1)
(17,15,1)
(28,0,1)
(9,14,1)
(25,4,1)
(28,24,1)
(13,16,1)
(7,3,1)
(5,29,1)
(6,25,1)
(7,3,2)
(28,0,2)
(17,15,2)
(6,24,2)
(28,24,2)
(14,28,2)
(3,2,2)
(17,6,2)
(7,26,2)
(15,6,2)
(19,24,2)
(8,6,2)
(24,7,2)
-----------------------------------
(0,data[0] = 5)
(1, sizeof(int)
(2,sizeof(int)
(3,calloc(100, sizeof(int)
(4,data)
(5,NULL)
(6,data == NULL)
(7,(int *)
(8,1)
(9,RET)
(10,data)
(11,if (data == NULL)
(12,5)
(13,100)
(14,printIntLine(data[0])
(15,-1)
(16,data)
(17,exit(-1)
(18,)
(19,data[0])
(20,data)
(21,)
(22,int)
(23,data)
(24,data = (int *)
(25,NULL)
(26,int *)
(27,0)
(28,data[0])
(29,data)
(30,0)
(31,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^