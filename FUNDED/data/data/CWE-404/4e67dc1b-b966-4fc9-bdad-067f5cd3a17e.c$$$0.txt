-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    void (*funcPtr) (wchar_t *) = goodG2BSink;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    /* Initialize then use data */
    wcscpy(data, L"a string");
    printWLine(data);
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
51,52
52,53
52,54
52,55
53,54
55,56
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,49,50,54,56,57,61,63,67,69
-----computeFrom-----
28,29
28,30
34,35
34,36
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    void (*funcPtr) (wchar_t *) = goodG2BSink;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize then use data */    wcscpy(data, L"a string");    printWLine(data);    funcPtr(data);}
static void
goodG2B()
goodG2B
{    wchar_t * data;    void (*funcPtr) (wchar_t *) = goodG2BSink;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize then use data */    wcscpy(data, L"a string");    printWLine(data);    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = goodG2BSink;
void (*funcPtr) (wchar_t *) = goodG2BSink;
void
(*funcPtr) (wchar_t *) = goodG2BSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= goodG2BSink
goodG2BSink
goodG2BSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(20,4,0)
(10,15,0)
(9,20,0)
(4,14,0)
(10,20,0)
(8,7,0)
(14,4,0)
(3,10,0)
(7,5,0)
(7,8,0)
(2,16,0)
(16,15,0)
(20,15,0)
(9,15,0)
(12,20,0)
(5,4,0)
(5,7,0)
(4,20,0)
(19,15,0)
(21,15,0)
(13,15,0)
(0,9,0)
(11,13,0)
(4,5,0)
(22,16,0)
(1,7,0)
(6,13,0)
(17,8,0)
(0,10,1)
(9,20,1)
(10,20,1)
(8,17,1)
(16,22,1)
(17,1,1)
(10,3,1)
(7,8,1)
(20,4,1)
(9,0,1)
(3,20,1)
(22,2,1)
(5,7,1)
(12,16,1)
(13,6,1)
(6,11,1)
(1,12,1)
(18,9,1)
(2,13,1)
(4,5,1)
(4,14,1)
(4,5,2)
(10,20,2)
(7,8,2)
(20,4,2)
(4,14,2)
(9,20,2)
(5,7,2)
-----------------------------------
(0,data)
(1,100)
(2,data)
(3,data)
(4,(wchar_t *)
(5,ALLOCA(100*sizeof(wchar_t)
(6,goodG2BSink)
(7,100*sizeof(wchar_t)
(8,sizeof(wchar_t)
(9,funcPtr(data)
(10,printWLine(data)
(11,funcPtr)
(12,data)
(13,(*funcPtr)
(14,wchar_t *)
(15,)
(16,data = NULL)
(17,wchar_t)
(18,RET)
(19,data)
(20,data = (wchar_t *)
(21,funcPtr)
(22,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^