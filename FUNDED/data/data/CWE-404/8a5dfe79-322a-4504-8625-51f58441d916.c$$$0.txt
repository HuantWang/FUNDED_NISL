-----label-----
0
-----code-----
static int sha256_ce_finup(struct shash_desc *desc, const u8 *data,
			   unsigned int len, u8 *out)
{
	struct sha256_ce_state *sctx = shash_desc_ctx(desc);
	bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE);

	/*
	 * Allow the asm code to perform the finalization if there is no
	 * partial data and the input is a round multiple of the block size.
	 */
	sctx->finalize = finalize;

	kernel_neon_begin_partial(28);
	sha256_base_do_update(desc, data, len,
			      (sha256_block_fn *)sha2_ce_transform);
	if (!finalize)
		sha256_base_do_finalize(desc,
					(sha256_block_fn *)sha2_ce_transform);
	kernel_neon_end();
	return sha256_base_finish(desc, out);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
71,73
72,73
75,76
76,77
76,78
76,79
76,80
76,81
77,78
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
93,94
93,95
94,95
95,96
97,98
98,99
98,100
98,101
99,100
101,102
103,104
103,105
104,105
104,106
105,106
107,108
109,110
111,112
112,113
113,114
115,116
116,117
116,118
116,119
117,118
119,120
121,122
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,23,25,26,31,33,34,38,40,43,45,52,53,54,59,61,66,67,69,73,74,78,80,82,84,88,90,92,96,100,102,106,108,110,114,118,120,122
-----computeFrom-----
47,48
47,49
57,58
57,59
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int sha256_ce_finup(struct shash_desc *desc, const u8 *data,			   unsigned int len, u8 *out){	struct sha256_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE);	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(28);	sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform);	if (!finalize)		sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);	kernel_neon_end();	return sha256_base_finish(desc, out);}
static int
sha256_ce_finup(struct shash_desc *desc, const u8 *data,			   unsigned int len, u8 *out)
sha256_ce_finup
struct shash_desc *desc
struct shash_desc
shash_desc
*desc
*
desc
const u8 *data
const u8
u8
*data
*
data
unsigned int len
unsigned int
len
len
u8 *out
u8
u8
*out
*
out
{	struct sha256_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE);	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(28);	sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform);	if (!finalize)		sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);	kernel_neon_end();	return sha256_base_finish(desc, out);}
struct sha256_ce_state *sctx = shash_desc_ctx(desc);
struct sha256_ce_state *sctx = shash_desc_ctx(desc);
struct sha256_ce_state
sha256_ce_state
*sctx = shash_desc_ctx(desc)
*
sctx
= shash_desc_ctx(desc)
shash_desc_ctx(desc)
shash_desc_ctx
shash_desc_ctx
desc
desc
bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE);
bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE);
bool
finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
finalize
= !sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
!sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
!sctx->sst.count
sctx->sst.count
sctx->sst
sctx
sctx
sst
count
!(len % SHA256_BLOCK_SIZE)
(len % SHA256_BLOCK_SIZE)
len % SHA256_BLOCK_SIZE
len
len
SHA256_BLOCK_SIZE
SHA256_BLOCK_SIZE
sctx->finalize = finalize;
sctx->finalize = finalize
sctx->finalize
sctx
sctx
finalize
finalize
finalize
kernel_neon_begin_partial(28);
kernel_neon_begin_partial(28)
kernel_neon_begin_partial
kernel_neon_begin_partial
28
sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform);
sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform)
sha256_base_do_update
sha256_base_do_update
desc
desc
data
data
len
len
(sha256_block_fn *)sha2_ce_transform
sha256_block_fn *
sha256_block_fn
sha256_block_fn
*
*
sha2_ce_transform
sha2_ce_transform
if (!finalize)		sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);
!finalize
finalize
finalize
sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);
sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform)
sha256_base_do_finalize
sha256_base_do_finalize
desc
desc
(sha256_block_fn *)sha2_ce_transform
sha256_block_fn *
sha256_block_fn
sha256_block_fn
*
*
sha2_ce_transform
sha2_ce_transform
kernel_neon_end();
kernel_neon_end()
kernel_neon_end
kernel_neon_end
return sha256_base_finish(desc, out);
sha256_base_finish(desc, out)
sha256_base_finish
sha256_base_finish
desc
desc
out
out
-----joern-----
(18,15,0)
(28,41,0)
(4,34,0)
(24,18,0)
(5,50,0)
(43,42,0)
(5,40,0)
(18,42,0)
(14,40,0)
(50,5,0)
(39,31,0)
(43,19,0)
(35,18,0)
(41,46,0)
(42,34,0)
(32,41,0)
(5,44,0)
(42,14,0)
(20,34,0)
(19,43,0)
(51,5,0)
(23,30,0)
(26,34,0)
(5,34,0)
(27,39,0)
(14,42,0)
(5,48,0)
(2,45,0)
(13,19,0)
(25,9,0)
(2,36,0)
(6,35,0)
(45,13,0)
(45,3,0)
(37,43,0)
(7,43,0)
(15,3,0)
(38,15,0)
(21,3,0)
(39,30,0)
(3,34,0)
(33,5,0)
(49,42,0)
(13,45,0)
(35,34,0)
(45,2,0)
(10,3,0)
(50,0,0)
(47,36,0)
(16,14,0)
(30,40,0)
(29,34,0)
(36,48,0)
(41,35,0)
(11,5,0)
(9,34,0)
(8,36,0)
(3,45,0)
(12,18,0)
(0,50,0)
(17,50,0)
(22,21,0)
(30,39,0)
(31,39,0)
(36,2,0)
(15,34,0)
(41,40,0)
(1,19,0)
(19,13,0)
(19,43,1)
(19,1,1)
(21,3,1)
(39,31,1)
(47,13,1)
(25,15,1)
(36,8,1)
(37,7,1)
(5,50,1)
(3,45,1)
(17,51,1)
(39,27,1)
(36,48,1)
(14,40,1)
(18,42,1)
(30,40,1)
(22,5,1)
(15,3,1)
(15,38,1)
(9,25,1)
(7,10,1)
(38,18,1)
(35,41,1)
(27,23,1)
(41,46,1)
(35,18,1)
(43,37,1)
(5,48,1)
(2,36,1)
(50,17,1)
(30,39,1)
(32,28,1)
(29,21,1)
(1,43,1)
(5,44,1)
(13,19,1)
(41,40,1)
(24,12,1)
(10,42,1)
(6,35,1)
(42,14,1)
(41,32,1)
(16,49,1)
(43,42,1)
(8,47,1)
(14,16,1)
(21,22,1)
(28,29,1)
(45,13,1)
(33,9,1)
(50,0,1)
(29,30,1)
(12,3,1)
(51,11,1)
(23,21,1)
(45,2,1)
(5,40,1)
(18,24,1)
(11,33,1)
(42,14,2)
(23,21,2)
(8,13,2)
(43,42,2)
(45,2,2)
(5,44,2)
(47,13,2)
(19,43,2)
(36,13,2)
(50,0,2)
(5,50,2)
(41,46,2)
(27,21,2)
(41,40,2)
(2,36,2)
(3,45,2)
(45,13,2)
(30,21,2)
(39,21,2)
(5,40,2)
(5,48,2)
(13,19,2)
(2,13,2)
(6,35,2)
(15,3,2)
(30,40,2)
(35,18,2)
(18,42,2)
(21,3,2)
(14,40,2)
(30,39,2)
(39,31,2)
(36,48,2)
-----------------------------------
(0,sha256_block_fn *)
(1,count)
(2,!(len % SHA256_BLOCK_SIZE)
(3,finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
(4,finalize)
(5,sha256_base_do_update(desc, data, len,\n\\n\\t\\t\\t      (sha256_block_fn *)
(6,RET)
(7,sctx)
(8,SHA256_BLOCK_SIZE)
(9,kernel_neon_begin_partial(28)
(10,finalize)
(11,data)
(12,sctx)
(13,!sctx->sst.count)
(14,shash_desc_ctx(desc)
(15,sctx->finalize = finalize)
(16,desc)
(17,sha2_ce_transform)
(18,sctx->finalize)
(19,sctx->sst.count)
(20,sctx)
(21,!finalize)
(22,finalize)
(23,desc)
(24,finalize)
(25,28)
(26,if (!finalize)
(27,sha2_ce_transform)
(28,desc)
(29,kernel_neon_end()
(30,sha256_base_do_finalize(desc,\n\\n\\t\\t\\t\\t\\t(sha256_block_fn *)
(31,sha256_block_fn *)
(32,out)
(33,desc)
(34,)
(35,return sha256_base_finish(desc, out)
(36,len % SHA256_BLOCK_SIZE)
(37,sst)
(38,finalize)
(39,(sha256_block_fn *)
(40,struct shash_desc *desc)
(41,sha256_base_finish(desc, out)
(42,*sctx = shash_desc_ctx(desc)
(43,sctx->sst)
(44,const u8 *data)
(45,!sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
(46,u8 *out)
(47,len)
(48,unsigned int len)
(49,sctx)
(50,(sha256_block_fn *)
(51,len)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^