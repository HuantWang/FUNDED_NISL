-----label-----
1
-----code-----
static int64_t * badSource(int64_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)calloc(100, sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
24,27
25,26
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,27,31,32,36,38,43,45,50,51,52,56,59,60,63
-----computeFrom-----
15,16
15,17
34,35
34,36
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * badSource(int64_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)calloc(100, sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
static int64_t
int64_t
* badSource(int64_t * data)
*
badSource
int64_t * data
int64_t
int64_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)calloc(100, sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(25,0,0)
(15,24,0)
(18,10,0)
(22,26,0)
(13,12,0)
(5,14,0)
(16,7,0)
(14,23,0)
(21,10,0)
(24,18,0)
(17,7,0)
(9,7,0)
(19,24,0)
(20,13,0)
(13,20,0)
(26,8,0)
(3,20,0)
(0,8,0)
(1,23,0)
(18,7,0)
(4,26,0)
(23,14,0)
(24,7,0)
(24,8,0)
(9,0,0)
(2,0,0)
(10,21,0)
(10,18,0)
(26,18,0)
(14,10,0)
(0,18,0)
(10,14,0)
(11,18,0)
(0,9,0)
(18,8,0)
(2,25,1)
(24,15,1)
(5,11,1)
(1,5,1)
(10,21,1)
(0,8,1)
(13,20,1)
(25,16,1)
(0,18,1)
(18,10,1)
(22,18,1)
(26,4,1)
(10,14,1)
(19,24,1)
(4,22,1)
(24,18,1)
(18,8,1)
(14,23,1)
(0,2,1)
(16,26,1)
(26,8,1)
(26,18,1)
(16,13,1)
(24,8,1)
(23,1,1)
(20,3,1)
(9,0,1)
(15,9,1)
(3,26,1)
(3,26,2)
(18,8,2)
(13,20,2)
(9,0,2)
(0,8,2)
(13,26,2)
(18,10,2)
(10,21,2)
(24,8,2)
(26,8,2)
(19,24,2)
(0,18,2)
(20,26,2)
(26,18,2)
(10,14,2)
(14,23,2)
(24,18,2)
-----------------------------------
(0,data[0])
(1,int64_t)
(2,0)
(3,1)
(4,NULL)
(5,100)
(6, sizeof(int64_t)
(7,)
(8,int64_t * data)
(9,printLongLongLine(data[0])
(10,(int64_t *)
(11,data)
(12,)
(13,exit(-1)
(14,calloc(100, sizeof(int64_t)
(15,data)
(16,L)
(17,if (data == NULL)
(18,data = (int64_t *)
(19,RET)
(20,-1)
(21,int64_t *)
(22,data)
(23,sizeof(int64_t)
(24,return data;)
(25,data)
(26,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^