-----label-----
0
-----code-----
int
command_line_get_partition (const char* prompt, PedDisk* disk,
                            PedPartition** value)
{
        PedPartition*    part;
        int ret;

        /* Flawed logic, doesn't seem to work?!
        check = ped_disk_next_partition (disk, part);
        part  = ped_disk_next_partition (disk, check);

        if (part == NULL) {

        *value = check;
        printf (_("The (only) primary partition has "
                  "been automatically selected\n"));
        return 1;

        } else {
        */
        int num = (*value) ? (*value)->num : 0;

        ret = command_line_get_integer (prompt, &num);
        if ((!ret) || (num < 0)) {
                ped_exception_throw (PED_EXCEPTION_ERROR,
                                     PED_EXCEPTION_CANCEL,
                                     _("Expecting a partition number."));
                return 0;
        }

        part = ped_disk_get_partition (disk, num);

        if (!part) {
                ped_exception_throw (PED_EXCEPTION_ERROR,
                                     PED_EXCEPTION_CANCEL,
                                     _("Partition doesn't exist."));
            return 0;
        }

        *value = part;
        return 1;
        //}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
19,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
36,37
37,38
37,39
39,40
39,41
41,42
42,43
42,44
42,45
43,44
44,45
45,46
47,48
47,49
48,49
49,50
50,51
54,55
55,56
55,57
56,57
58,59
58,60
58,61
59,60
61,62
63,64
64,65
66,67
66,68
67,68
67,69
68,69
69,70
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
79,80
79,81
79,82
79,83
80,81
82,83
84,85
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
96,97
96,98
96,99
97,98
99,100
101,102
103,104
103,105
104,105
105,106
107,108
107,109
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
116,118
117,118
120,121
122,123
123,124
123,125
124,125
125,126
127,128
129,130
-----nextToken-----
2,4,6,8,9,12,14,15,18,20,21,22,27,29,30,33,35,38,40,46,51,52,53,57,60,62,65,71,75,76,81,83,85,88,89,91,95,98,100,102,106,111,113,115,118,119,121,126,128,130
-----computeFrom-----
55,56
55,57
67,68
67,69
73,74
73,75
93,94
93,95
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;UnaryExpression;UnaryExpression;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
intcommand_line_get_partition (const char* prompt, PedDisk* disk,                            PedPartition** value){        PedPartition*    part;        int ret;        /* Flawed logic, doesn't seem to work?!        check = ped_disk_next_partition (disk, part);        part  = ped_disk_next_partition (disk, check);        if (part == NULL) {        *value = check;        printf (_("The (only) primary partition has "                  "been automatically selected\n"));        return 1;        } else {        */        int num = (*value) ? (*value)->num : 0;        ret = command_line_get_integer (prompt, &num);        if ((!ret) || (num < 0)) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }        part = ped_disk_get_partition (disk, num);        if (!part) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }        *value = part;        return 1;        //}}
int
command_line_get_partition (const char* prompt, PedDisk* disk,                            PedPartition** value)
command_line_get_partition
const char* prompt
const char
* prompt
*
prompt
PedDisk* disk
PedDisk
PedDisk
* disk
*
disk
PedPartition** value
PedPartition
PedPartition
** value
*
*
value
{        PedPartition*    part;        int ret;        /* Flawed logic, doesn't seem to work?!        check = ped_disk_next_partition (disk, part);        part  = ped_disk_next_partition (disk, check);        if (part == NULL) {        *value = check;        printf (_("The (only) primary partition has "                  "been automatically selected\n"));        return 1;        } else {        */        int num = (*value) ? (*value)->num : 0;        ret = command_line_get_integer (prompt, &num);        if ((!ret) || (num < 0)) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }        part = ped_disk_get_partition (disk, num);        if (!part) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }        *value = part;        return 1;        //}}
PedPartition*    part;
PedPartition*    part;
PedPartition
PedPartition
*    part
*
part
int ret;
int ret;
int
ret
ret
int num = (*value) ? (*value)->num : 0;
int num = (*value) ? (*value)->num : 0;
int
num = (*value) ? (*value)->num : 0
num
= (*value) ? (*value)->num : 0
(*value) ? (*value)->num : 0
(*value)
*value
value
value
(*value)->num
(*value)
*value
value
value
num
0
ret = command_line_get_integer (prompt, &num);
ret = command_line_get_integer (prompt, &num)
ret
ret
command_line_get_integer (prompt, &num)
command_line_get_integer
command_line_get_integer
prompt
prompt
&num
num
num
if ((!ret) || (num < 0)) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }
(!ret) || (num < 0)
(!ret)
!ret
ret
ret
(num < 0)
num < 0
num
num
0
{                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."))
ped_exception_throw
ped_exception_throw
PED_EXCEPTION_ERROR
PED_EXCEPTION_ERROR
PED_EXCEPTION_CANCEL
PED_EXCEPTION_CANCEL
_("Expecting a partition number.")
_
_
"Expecting a partition number."
return 0;
0
part = ped_disk_get_partition (disk, num);
part = ped_disk_get_partition (disk, num)
part
part
ped_disk_get_partition (disk, num)
ped_disk_get_partition
ped_disk_get_partition
disk
disk
num
num
if (!part) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }
!part
part
part
{                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."))
ped_exception_throw
ped_exception_throw
PED_EXCEPTION_ERROR
PED_EXCEPTION_ERROR
PED_EXCEPTION_CANCEL
PED_EXCEPTION_CANCEL
_("Partition doesn't exist.")
_
_
"Partition doesn't exist."
return 0;
0
*value = part;
*value = part
*value
value
value
part
part
return 1;
1
-----joern-----
(59,13,0)
(51,46,0)
(49,25,0)
(7,32,0)
(33,11,0)
(10,6,0)
(36,19,0)
(16,52,0)
(13,32,0)
(20,1,0)
(60,10,0)
(30,5,0)
(31,32,0)
(5,6,0)
(23,45,0)
(1,40,0)
(21,14,0)
(27,41,0)
(54,13,0)
(37,50,0)
(38,21,0)
(57,13,0)
(22,10,0)
(41,11,0)
(56,32,0)
(28,60,0)
(52,16,0)
(46,25,0)
(6,32,0)
(17,21,0)
(54,6,0)
(45,50,0)
(52,14,0)
(2,16,0)
(55,32,0)
(47,6,0)
(16,45,0)
(48,32,0)
(59,32,0)
(38,32,0)
(50,45,0)
(53,52,0)
(5,1,0)
(8,59,0)
(4,33,0)
(39,51,0)
(19,1,0)
(3,49,0)
(45,16,0)
(24,46,0)
(44,15,0)
(60,28,0)
(42,43,0)
(43,33,0)
(1,5,0)
(27,38,0)
(13,54,0)
(19,32,0)
(28,19,0)
(58,38,0)
(29,54,0)
(10,60,0)
(1,19,0)
(9,41,0)
(15,13,0)
(50,14,0)
(46,51,0)
(6,45,0)
(21,59,0)
(33,43,0)
(0,33,0)
(45,6,0)
(27,49,0)
(18,46,0)
(35,10,0)
(34,54,0)
(12,28,0)
(54,26,0)
(4,15,1)
(41,9,1)
(16,2,1)
(10,6,1)
(19,1,1)
(22,35,1)
(50,14,1)
(12,19,1)
(59,8,1)
(16,52,1)
(44,13,1)
(23,50,1)
(34,57,1)
(57,60,1)
(8,21,1)
(28,12,1)
(54,6,1)
(28,19,1)
(45,23,1)
(54,26,1)
(46,51,1)
(53,50,1)
(52,14,1)
(45,50,1)
(51,39,1)
(30,20,1)
(37,47,1)
(38,21,1)
(27,41,1)
(42,0,1)
(1,40,1)
(29,34,1)
(27,49,1)
(50,37,1)
(45,16,1)
(59,13,1)
(27,38,1)
(2,52,1)
(18,60,1)
(39,24,1)
(33,43,1)
(52,53,1)
(10,22,1)
(24,18,1)
(15,13,1)
(5,30,1)
(58,59,1)
(17,15,1)
(21,17,1)
(49,3,1)
(5,6,1)
(21,14,1)
(15,44,1)
(20,36,1)
(9,33,1)
(3,46,1)
(54,29,1)
(6,45,1)
(60,28,1)
(38,58,1)
(43,42,1)
(0,4,1)
(35,28,1)
(36,6,1)
(60,10,1)
(13,54,1)
(1,5,1)
(27,38,2)
(4,15,2)
(27,41,2)
(16,50,2)
(18,60,2)
(1,40,2)
(34,60,2)
(42,15,2)
(17,15,2)
(54,6,2)
(6,45,2)
(43,15,2)
(49,60,2)
(59,13,2)
(13,54,2)
(10,28,2)
(60,28,2)
(21,14,2)
(45,16,2)
(16,52,2)
(29,60,2)
(3,60,2)
(52,50,2)
(41,15,2)
(24,60,2)
(5,6,2)
(46,51,2)
(15,60,2)
(33,43,2)
(54,60,2)
(9,15,2)
(1,5,2)
(8,15,2)
(46,60,2)
(53,50,2)
(35,28,2)
(19,1,2)
(28,19,2)
(0,15,2)
(27,49,2)
(52,14,2)
(59,15,2)
(10,6,2)
(45,50,2)
(57,60,2)
(44,60,2)
(22,28,2)
(13,60,2)
(54,26,2)
(58,15,2)
(50,14,2)
(51,60,2)
(33,15,2)
(21,15,2)
(38,15,2)
(60,10,2)
(23,50,2)
(15,13,2)
(38,21,2)
(39,60,2)
(2,50,2)
-----------------------------------
(0,PED_EXCEPTION_CANCEL)
(1,command_line_get_integer (prompt, &num)
(2,num)
(3,0)
(4,PED_EXCEPTION_ERROR)
(5,&num)
(6,num = (*value)
(7,if (!part)
(8,part)
(9,0)
(10,num < 0)
(11,)
(12,ret)
(13,part = ped_disk_get_partition (disk, num)
(14,PedPartition** value)
(15,!part)
(16,(*value)
(17,value)
(18,PED_EXCEPTION_ERROR)
(19,ret = command_line_get_integer (prompt, &num)
(20,prompt)
(21,*value)
(22,0)
(23,0)
(24,PED_EXCEPTION_CANCEL)
(25,)
(26,PedDisk* disk)
(27,RET)
(28,!ret)
(29,num)
(30,num)
(31,if ((!ret)
(32,)
(33,ped_exception_throw (PED_EXCEPTION_ERROR,\n\\n                                     PED_EXCEPTION_CANCEL,\n\\n                                     _("Partition doesn\'t exist.")
(34,disk)
(35,num)
(36,ret)
(37,value)
(38,return 1;)
(39,"Expecting a partition number.")
(40,const char* prompt)
(41,return 0;)
(42,"Partition doesn\'t exist.")
(43,_("Partition doesn\'t exist.")
(44,part)
(45,(*value)
(46,ped_exception_throw (PED_EXCEPTION_ERROR,\n\\n                                     PED_EXCEPTION_CANCEL,\n\\n                                     _("Expecting a partition number.")
(47,num)
(48,ret)
(49,return 0;)
(50,*value)
(51,_("Expecting a partition number.")
(52,*value)
(53,value)
(54,ped_disk_get_partition (disk, num)
(55,part)
(56,num)
(57,part)
(58,1)
(59,*value = part)
(60,(!ret)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^