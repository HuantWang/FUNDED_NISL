-----label-----
0
-----code-----
static int svm_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr)
{
	struct vcpu_svm *svm = to_svm(vcpu);

	u32 ecx = msr->index;
	u64 data = msr->data;
	switch (ecx) {
	case MSR_IA32_CR_PAT:
		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))
			return 1;
		vcpu->arch.pat = data;
		svm->vmcb->save.g_pat = data;
		mark_dirty(svm->vmcb, VMCB_NPT);
		break;
	case MSR_IA32_TSC:
		kvm_write_tsc(vcpu, msr);
		break;
	case MSR_STAR:
		svm->vmcb->save.star = data;
		break;
#ifdef CONFIG_X86_64
	case MSR_LSTAR:
		svm->vmcb->save.lstar = data;
		break;
	case MSR_CSTAR:
		svm->vmcb->save.cstar = data;
		break;
	case MSR_KERNEL_GS_BASE:
		svm->vmcb->save.kernel_gs_base = data;
		break;
	case MSR_SYSCALL_MASK:
		svm->vmcb->save.sfmask = data;
		break;
#endif
	case MSR_IA32_SYSENTER_CS:
		svm->vmcb->save.sysenter_cs = data;
		break;
	case MSR_IA32_SYSENTER_EIP:
		svm->sysenter_eip = data;
		svm->vmcb->save.sysenter_eip = data;
		break;
	case MSR_IA32_SYSENTER_ESP:
		svm->sysenter_esp = data;
		svm->vmcb->save.sysenter_esp = data;
		break;
	case MSR_TSC_AUX:
		if (!boot_cpu_has(X86_FEATURE_RDTSCP))
			return 1;

		/*
		 * This is rare, so we update the MSR here instead of using
		 * direct_access_msrs.  Doing that would require a rdmsr in
		 * svm_vcpu_put.
		 */
		svm->tsc_aux = data;
		wrmsrl(MSR_TSC_AUX, svm->tsc_aux);
		break;
	case MSR_IA32_DEBUGCTLMSR:
		if (!boot_cpu_has(X86_FEATURE_LBRV)) {
			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",
				    __func__, data);
			break;
		}
		if (data & DEBUGCTL_RESERVED_BITS)
			return 1;

		svm->vmcb->save.dbgctl = data;
		mark_dirty(svm->vmcb, VMCB_LBR);
		if (data & (1ULL<<0))
			svm_enable_lbrv(svm);
		else
			svm_disable_lbrv(svm);
		break;
	case MSR_VM_HSAVE_PA:
		svm->nested.hsave_msr = data;
		break;
	case MSR_VM_CR:
		return svm_set_vm_cr(vcpu, data);
	case MSR_VM_IGNNE:
		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);
		break;
	case MSR_IA32_APICBASE:
		if (kvm_vcpu_apicv_active(vcpu))
			avic_update_vapic_bar(to_svm(vcpu), data);
		/* Follow through */
	default:
		return kvm_set_msr_common(vcpu, msr);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
56,65
56,66
56,67
56,68
56,69
56,70
56,71
56,72
56,73
56,74
56,75
56,76
56,77
56,78
56,79
56,80
56,81
56,82
56,83
56,84
56,85
56,86
56,87
56,88
56,89
56,90
56,91
56,92
56,93
56,94
56,95
56,96
56,97
56,98
56,99
56,100
56,101
56,102
56,103
57,58
58,59
60,61
60,62
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
81,82
83,84
84,85
84,86
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
95,96
96,97
96,98
96,99
97,98
99,100
99,101
100,101
103,104
106,107
107,108
109,110
110,111
110,112
110,113
111,112
113,114
115,116
118,119
119,120
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
125,127
126,127
131,132
134,135
135,136
137,138
138,139
138,140
139,140
139,141
140,141
140,142
141,142
141,143
142,143
147,148
150,151
151,152
153,154
154,155
154,156
155,156
155,157
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
164,166
165,166
165,167
166,167
171,172
174,175
175,176
177,178
178,179
178,180
179,180
179,181
180,181
183,184
185,186
186,187
186,188
187,188
187,189
188,189
188,190
189,190
189,191
190,191
195,196
198,199
199,200
201,202
201,203
202,203
203,204
203,205
204,205
206,207
208,209
210,211
211,212
211,213
212,213
212,214
213,214
216,217
218,219
219,220
219,221
219,222
220,221
222,223
224,225
224,226
225,226
229,230
230,231
232,233
232,234
233,234
234,235
234,236
235,236
237,238
239,240
239,241
240,241
241,242
241,243
241,244
241,245
241,246
242,243
244,245
247,248
249,250
252,253
252,254
253,254
253,255
254,255
256,257
258,259
260,261
261,262
261,263
262,263
262,264
263,264
263,265
264,265
264,266
265,266
270,271
272,273
273,274
273,275
273,276
274,275
276,277
276,278
277,278
280,281
282,283
282,284
282,285
283,284
283,285
284,285
286,287
287,288
287,289
290,291
291,292
291,293
292,293
294,295
296,297
297,298
297,299
298,299
300,301
303,304
304,305
306,307
307,308
307,309
308,309
308,310
309,310
309,311
310,311
314,315
317,318
318,319
320,321
321,322
321,323
321,324
322,323
324,325
326,327
328,329
329,330
331,332
332,333
332,334
332,335
332,336
332,337
333,334
335,336
338,339
340,341
343,344
344,345
346,347
346,348
347,348
347,349
348,349
350,351
352,353
353,354
353,355
353,356
354,355
356,357
356,358
357,358
359,360
361,362
364,365
365,366
365,367
365,368
366,367
368,369
370,371
372,373
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,34,36,40,41,45,47,51,52,55,59,64,66,68,70,72,78,79,80,82,89,90,91,92,94,98,101,102,104,105,108,112,114,116,117,120,127,128,129,130,132,133,136,143,144,145,146,148,149,152,157,158,160,167,168,169,170,172,173,176,181,182,184,191,192,193,194,196,197,200,205,207,209,214,215,217,221,223,226,227,228,231,236,238,243,245,246,248,250,251,255,257,259,266,267,268,269,271,275,278,279,281,285,288,289,293,295,299,301,302,305,311,312,313,315,316,319,323,325,327,330,334,336,337,339,341,342,345,349,351,355,358,360,362,363,367,369,371,373
-----computeFrom-----
74,75
74,76
84,85
84,86
122,123
122,124
138,139
138,140
154,155
154,156
162,163
162,164
178,179
178,180
186,187
186,188
211,212
211,213
253,254
253,255
261,262
261,263
283,284
283,285
287,288
287,289
307,308
307,309
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DefaultStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int svm_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr){	struct vcpu_svm *svm = to_svm(vcpu);	u32 ecx = msr->index;	u64 data = msr->data;	switch (ecx) {	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_TSC_AUX:		if (!boot_cpu_has(X86_FEATURE_RDTSCP))			return 1;		/*		 * This is rare, so we update the MSR here instead of using		 * direct_access_msrs.  Doing that would require a rdmsr in		 * svm_vcpu_put.		 */		svm->tsc_aux = data;		wrmsrl(MSR_TSC_AUX, svm->tsc_aux);		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	case MSR_IA32_APICBASE:		if (kvm_vcpu_apicv_active(vcpu))			avic_update_vapic_bar(to_svm(vcpu), data);		/* Follow through */	default:		return kvm_set_msr_common(vcpu, msr);	}	return 0;}
static int
svm_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr)
svm_set_msr
struct kvm_vcpu *vcpu
struct kvm_vcpu
kvm_vcpu
*vcpu
*
vcpu
struct msr_data *msr
struct msr_data
msr_data
*msr
*
msr
{	struct vcpu_svm *svm = to_svm(vcpu);	u32 ecx = msr->index;	u64 data = msr->data;	switch (ecx) {	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_TSC_AUX:		if (!boot_cpu_has(X86_FEATURE_RDTSCP))			return 1;		/*		 * This is rare, so we update the MSR here instead of using		 * direct_access_msrs.  Doing that would require a rdmsr in		 * svm_vcpu_put.		 */		svm->tsc_aux = data;		wrmsrl(MSR_TSC_AUX, svm->tsc_aux);		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	case MSR_IA32_APICBASE:		if (kvm_vcpu_apicv_active(vcpu))			avic_update_vapic_bar(to_svm(vcpu), data);		/* Follow through */	default:		return kvm_set_msr_common(vcpu, msr);	}	return 0;}
struct vcpu_svm *svm = to_svm(vcpu);
struct vcpu_svm *svm = to_svm(vcpu);
struct vcpu_svm
vcpu_svm
*svm = to_svm(vcpu)
*
svm
= to_svm(vcpu)
to_svm(vcpu)
to_svm
to_svm
vcpu
vcpu
u32 ecx = msr->index;
u32 ecx = msr->index;
u32
u32
ecx = msr->index
ecx
= msr->index
msr->index
msr
msr
index
u64 data = msr->data;
u64 data = msr->data;
u64
u64
data = msr->data
data
= msr->data
msr->data
msr
msr
data
switch (ecx) {	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_TSC_AUX:		if (!boot_cpu_has(X86_FEATURE_RDTSCP))			return 1;		/*		 * This is rare, so we update the MSR here instead of using		 * direct_access_msrs.  Doing that would require a rdmsr in		 * svm_vcpu_put.		 */		svm->tsc_aux = data;		wrmsrl(MSR_TSC_AUX, svm->tsc_aux);		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	case MSR_IA32_APICBASE:		if (kvm_vcpu_apicv_active(vcpu))			avic_update_vapic_bar(to_svm(vcpu), data);		/* Follow through */	default:		return kvm_set_msr_common(vcpu, msr);	}
ecx
ecx
{	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_TSC_AUX:		if (!boot_cpu_has(X86_FEATURE_RDTSCP))			return 1;		/*		 * This is rare, so we update the MSR here instead of using		 * direct_access_msrs.  Doing that would require a rdmsr in		 * svm_vcpu_put.		 */		svm->tsc_aux = data;		wrmsrl(MSR_TSC_AUX, svm->tsc_aux);		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	case MSR_IA32_APICBASE:		if (kvm_vcpu_apicv_active(vcpu))			avic_update_vapic_bar(to_svm(vcpu), data);		/* Follow through */	default:		return kvm_set_msr_common(vcpu, msr);	}
case MSR_IA32_CR_PAT:
MSR_IA32_CR_PAT
MSR_IA32_CR_PAT
if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;
!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
kvm_mtrr_valid
kvm_mtrr_valid
vcpu
vcpu
MSR_IA32_CR_PAT
MSR_IA32_CR_PAT
data
data
return 1;
1
vcpu->arch.pat = data;
vcpu->arch.pat = data
vcpu->arch.pat
vcpu->arch
vcpu
vcpu
arch
pat
data
data
svm->vmcb->save.g_pat = data;
svm->vmcb->save.g_pat = data
svm->vmcb->save.g_pat
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
g_pat
data
data
mark_dirty(svm->vmcb, VMCB_NPT);
mark_dirty(svm->vmcb, VMCB_NPT)
mark_dirty
mark_dirty
svm->vmcb
svm
svm
vmcb
VMCB_NPT
VMCB_NPT
break;
case MSR_IA32_TSC:
MSR_IA32_TSC
MSR_IA32_TSC
kvm_write_tsc(vcpu, msr);
kvm_write_tsc(vcpu, msr)
kvm_write_tsc
kvm_write_tsc
vcpu
vcpu
msr
msr
break;
case MSR_STAR:
MSR_STAR
MSR_STAR
svm->vmcb->save.star = data;
svm->vmcb->save.star = data
svm->vmcb->save.star
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
star
data
data
break;
case MSR_IA32_SYSENTER_CS:
MSR_IA32_SYSENTER_CS
MSR_IA32_SYSENTER_CS
svm->vmcb->save.sysenter_cs = data;
svm->vmcb->save.sysenter_cs = data
svm->vmcb->save.sysenter_cs
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
sysenter_cs
data
data
break;
case MSR_IA32_SYSENTER_EIP:
MSR_IA32_SYSENTER_EIP
MSR_IA32_SYSENTER_EIP
svm->sysenter_eip = data;
svm->sysenter_eip = data
svm->sysenter_eip
svm
svm
sysenter_eip
data
data
svm->vmcb->save.sysenter_eip = data;
svm->vmcb->save.sysenter_eip = data
svm->vmcb->save.sysenter_eip
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
sysenter_eip
data
data
break;
case MSR_IA32_SYSENTER_ESP:
MSR_IA32_SYSENTER_ESP
MSR_IA32_SYSENTER_ESP
svm->sysenter_esp = data;
svm->sysenter_esp = data
svm->sysenter_esp
svm
svm
sysenter_esp
data
data
svm->vmcb->save.sysenter_esp = data;
svm->vmcb->save.sysenter_esp = data
svm->vmcb->save.sysenter_esp
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
sysenter_esp
data
data
break;
case MSR_TSC_AUX:
MSR_TSC_AUX
MSR_TSC_AUX
if (!boot_cpu_has(X86_FEATURE_RDTSCP))			return 1;
!boot_cpu_has(X86_FEATURE_RDTSCP)
boot_cpu_has(X86_FEATURE_RDTSCP)
boot_cpu_has
boot_cpu_has
X86_FEATURE_RDTSCP
X86_FEATURE_RDTSCP
return 1;
1
svm->tsc_aux = data;
svm->tsc_aux = data
svm->tsc_aux
svm
svm
tsc_aux
data
data
wrmsrl(MSR_TSC_AUX, svm->tsc_aux);
wrmsrl(MSR_TSC_AUX, svm->tsc_aux)
wrmsrl
wrmsrl
MSR_TSC_AUX
MSR_TSC_AUX
svm->tsc_aux
svm
svm
tsc_aux
break;
case MSR_IA32_DEBUGCTLMSR:
MSR_IA32_DEBUGCTLMSR
MSR_IA32_DEBUGCTLMSR
if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}
!boot_cpu_has(X86_FEATURE_LBRV)
boot_cpu_has(X86_FEATURE_LBRV)
boot_cpu_has
boot_cpu_has
X86_FEATURE_LBRV
X86_FEATURE_LBRV
{			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}
vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);
vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data)
vcpu_unimpl
vcpu_unimpl
vcpu
vcpu
"%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n"
__func__
__func__
data
data
break;
if (data & DEBUGCTL_RESERVED_BITS)			return 1;
data & DEBUGCTL_RESERVED_BITS
data
data
DEBUGCTL_RESERVED_BITS
DEBUGCTL_RESERVED_BITS
return 1;
1
svm->vmcb->save.dbgctl = data;
svm->vmcb->save.dbgctl = data
svm->vmcb->save.dbgctl
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
dbgctl
data
data
mark_dirty(svm->vmcb, VMCB_LBR);
mark_dirty(svm->vmcb, VMCB_LBR)
mark_dirty
mark_dirty
svm->vmcb
svm
svm
vmcb
VMCB_LBR
VMCB_LBR
if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);
data & (1ULL<<0)
data
data
(1ULL<<0)
1ULL<<0
1ULL
0
svm_enable_lbrv(svm);
svm_enable_lbrv(svm)
svm_enable_lbrv
svm_enable_lbrv
svm
svm
svm_disable_lbrv(svm);
svm_disable_lbrv(svm)
svm_disable_lbrv
svm_disable_lbrv
svm
svm
break;
case MSR_VM_HSAVE_PA:
MSR_VM_HSAVE_PA
MSR_VM_HSAVE_PA
svm->nested.hsave_msr = data;
svm->nested.hsave_msr = data
svm->nested.hsave_msr
svm->nested
svm
svm
nested
hsave_msr
data
data
break;
case MSR_VM_CR:
MSR_VM_CR
MSR_VM_CR
return svm_set_vm_cr(vcpu, data);
svm_set_vm_cr(vcpu, data)
svm_set_vm_cr
svm_set_vm_cr
vcpu
vcpu
data
data
case MSR_VM_IGNNE:
MSR_VM_IGNNE
MSR_VM_IGNNE
vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);
vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data)
vcpu_unimpl
vcpu_unimpl
vcpu
vcpu
"unimplemented wrmsr: 0x%x data 0x%llx\n"
ecx
ecx
data
data
break;
case MSR_IA32_APICBASE:
MSR_IA32_APICBASE
MSR_IA32_APICBASE
if (kvm_vcpu_apicv_active(vcpu))			avic_update_vapic_bar(to_svm(vcpu), data);
kvm_vcpu_apicv_active(vcpu)
kvm_vcpu_apicv_active
kvm_vcpu_apicv_active
vcpu
vcpu
avic_update_vapic_bar(to_svm(vcpu), data);
avic_update_vapic_bar(to_svm(vcpu), data)
avic_update_vapic_bar
avic_update_vapic_bar
to_svm(vcpu)
to_svm
to_svm
vcpu
vcpu
data
data
default:
return kvm_set_msr_common(vcpu, msr);
kvm_set_msr_common(vcpu, msr)
kvm_set_msr_common
kvm_set_msr_common
vcpu
vcpu
msr
msr
return 0;
0
-----joern-----
(215,154,0)
(53,13,0)
(163,100,0)
(71,8,0)
(190,105,0)
(240,97,0)
(245,13,0)
(41,169,0)
(187,6,0)
(40,13,0)
(146,27,0)
(90,13,0)
(98,169,0)
(111,114,0)
(75,242,0)
(239,13,0)
(178,13,0)
(23,235,0)
(113,13,0)
(187,19,0)
(151,236,0)
(115,13,0)
(66,166,0)
(64,169,0)
(74,156,0)
(186,143,0)
(73,230,0)
(107,94,0)
(173,198,0)
(88,214,0)
(95,78,0)
(187,212,0)
(94,16,0)
(136,235,0)
(243,21,0)
(65,212,0)
(188,13,0)
(133,9,0)
(117,2,0)
(21,228,0)
(187,117,0)
(16,94,0)
(230,195,0)
(55,16,0)
(3,20,0)
(135,145,0)
(100,169,0)
(164,238,0)
(127,239,0)
(98,13,0)
(84,94,0)
(222,13,0)
(6,37,0)
(42,51,0)
(202,65,0)
(166,169,0)
(56,5,0)
(236,169,0)
(39,2,0)
(226,239,0)
(79,98,0)
(247,13,0)
(141,169,0)
(46,23,0)
(229,13,0)
(205,117,0)
(61,13,0)
(224,236,0)
(59,180,0)
(197,210,0)
(128,64,0)
(159,239,0)
(44,210,0)
(241,242,0)
(204,13,0)
(210,197,0)
(52,13,0)
(142,177,0)
(107,245,0)
(187,220,0)
(15,242,0)
(176,169,0)
(111,9,0)
(167,208,0)
(227,16,0)
(138,239,0)
(43,207,0)
(197,169,0)
(83,242,0)
(187,139,0)
(62,35,0)
(152,106,0)
(200,168,0)
(20,242,0)
(33,154,0)
(8,169,0)
(230,242,0)
(168,200,0)
(54,41,0)
(9,13,0)
(179,13,0)
(19,106,0)
(109,13,0)
(53,242,0)
(103,36,0)
(169,104,0)
(83,13,0)
(114,13,0)
(221,13,0)
(238,15,0)
(91,13,0)
(111,22,0)
(187,77,0)
(181,37,0)
(187,88,0)
(112,133,0)
(101,187,0)
(75,193,0)
(65,154,0)
(126,41,0)
(123,13,0)
(67,13,0)
(150,35,0)
(155,220,0)
(117,169,0)
(194,75,0)
(220,186,0)
(12,107,0)
(78,95,0)
(85,13,0)
(245,242,0)
(175,140,0)
(26,242,0)
(213,88,0)
(97,35,0)
(150,242,0)
(232,13,0)
(25,62,0)
(92,195,0)
(50,83,0)
(145,228,0)
(187,107,0)
(196,51,0)
(7,53,0)
(170,13,0)
(86,186,0)
(31,77,0)
(211,36,0)
(187,235,0)
(147,13,0)
(80,13,0)
(180,64,0)
(51,169,0)
(139,52,0)
(198,234,0)
(239,242,0)
(242,145,0)
(235,247,0)
(241,13,0)
(218,13,0)
(122,168,0)
(230,35,0)
(104,169,0)
(78,13,0)
(238,97,0)
(187,130,0)
(182,207,0)
(21,13,0)
(191,13,0)
(143,186,0)
(132,139,0)
(37,176,0)
(108,19,0)
(111,177,0)
(223,13,0)
(201,97,0)
(5,178,0)
(212,161,0)
(2,242,0)
(153,143,0)
(172,200,0)
(150,114,0)
(110,90,0)
(187,110,0)
(14,13,0)
(99,143,0)
(148,176,0)
(161,13,0)
(106,166,0)
(185,230,0)
(154,169,0)
(214,88,0)
(212,65,0)
(176,37,0)
(125,78,0)
(214,236,0)
(81,242,0)
(178,242,0)
(29,166,0)
(225,13,0)
(137,234,0)
(60,13,0)
(97,238,0)
(70,95,0)
(57,22,0)
(52,242,0)
(34,130,0)
(4,13,0)
(130,141,0)
(2,13,0)
(30,6,0)
(111,187,0)
(116,13,0)
(129,104,0)
(216,75,0)
(133,35,0)
(110,180,0)
(162,133,0)
(38,13,0)
(187,200,0)
(208,41,0)
(182,77,0)
(207,182,0)
(49,247,0)
(189,178,0)
(130,221,0)
(118,139,0)
(5,198,0)
(48,161,0)
(23,51,0)
(95,169,0)
(82,13,0)
(89,221,0)
(120,207,0)
(18,212,0)
(197,81,0)
(88,105,0)
(134,169,0)
(93,197,0)
(209,26,0)
(144,100,0)
(105,242,0)
(133,228,0)
(203,230,0)
(64,180,0)
(90,242,0)
(187,5,0)
(16,169,0)
(131,13,0)
(75,35,0)
(32,13,0)
(244,176,0)
(192,75,0)
(20,62,0)
(208,13,0)
(198,5,0)
(219,64,0)
(96,141,0)
(28,13,0)
(121,182,0)
(239,182,0)
(63,110,0)
(15,13,0)
(193,75,0)
(17,21,0)
(169,77,0)
(183,13,0)
(156,169,0)
(174,140,0)
(100,81,0)
(94,107,0)
(165,234,0)
(10,52,0)
(87,77,0)
(139,169,0)
(207,228,0)
(145,242,0)
(143,169,0)
(0,26,0)
(158,217,0)
(1,13,0)
(69,191,0)
(62,20,0)
(47,214,0)
(11,150,0)
(111,217,0)
(234,169,0)
(81,13,0)
(184,13,0)
(187,238,0)
(24,81,0)
(51,23,0)
(58,13,0)
(37,6,0)
(21,35,0)
(168,8,0)
(186,220,0)
(8,168,0)
(246,245,0)
(124,117,0)
(104,35,0)
(140,174,0)
(36,103,0)
(200,53,0)
(6,191,0)
(161,242,0)
(76,241,0)
(242,77,0)
(220,241,0)
(119,77,0)
(45,242,0)
(236,214,0)
(68,77,0)
(231,13,0)
(160,230,0)
(171,145,0)
(206,90,0)
(235,23,0)
(247,242,0)
(102,8,0)
(149,95,0)
(72,197,0)
(180,110,0)
(210,13,0)
(106,19,0)
(233,13,0)
(248,141,0)
(239,35,0)
(187,100,0)
(221,242,0)
(105,13,0)
(41,208,0)
(191,242,0)
(154,65,0)
(19,83,0)
(27,35,0)
(157,150,0)
(166,106,0)
(237,15,0)
(141,130,0)
(234,198,0)
(141,96,1)
(198,173,1)
(153,99,1)
(184,21,1)
(101,1,1)
(187,200,1)
(106,152,1)
(230,160,1)
(220,186,1)
(234,165,1)
(71,199,1)
(69,6,1)
(111,177,1)
(108,106,1)
(185,73,1)
(248,199,1)
(78,125,1)
(187,238,1)
(75,35,1)
(6,37,1)
(148,156,1)
(187,107,1)
(117,169,1)
(187,100,1)
(3,62,1)
(200,168,1)
(19,106,1)
(168,122,1)
(165,137,1)
(219,52,1)
(241,76,1)
(57,26,1)
(89,130,1)
(146,199,1)
(95,70,1)
(48,212,1)
(160,185,1)
(18,65,1)
(161,242,1)
(178,189,1)
(179,239,1)
(75,192,1)
(66,29,1)
(235,136,1)
(187,88,1)
(152,166,1)
(130,34,1)
(125,95,1)
(172,168,1)
(191,242,1)
(20,3,1)
(180,64,1)
(101,170,1)
(196,42,1)
(161,48,1)
(5,198,1)
(98,169,1)
(207,228,1)
(113,53,1)
(111,217,1)
(239,182,1)
(239,35,1)
(74,26,1)
(150,157,1)
(245,246,1)
(112,20,1)
(51,169,1)
(37,176,1)
(190,88,1)
(24,100,1)
(221,242,1)
(129,134,1)
(187,19,1)
(21,228,1)
(76,220,1)
(150,35,1)
(227,199,1)
(192,216,1)
(100,163,1)
(133,228,1)
(100,169,1)
(149,191,1)
(20,62,1)
(75,242,1)
(139,118,1)
(97,201,1)
(133,162,1)
(209,103,1)
(154,169,1)
(144,174,1)
(15,237,1)
(70,149,1)
(164,97,1)
(198,234,1)
(23,51,1)
(64,128,1)
(99,15,1)
(241,242,1)
(20,242,1)
(151,224,1)
(245,242,1)
(238,97,1)
(72,44,1)
(10,139,1)
(246,107,1)
(110,180,1)
(189,5,1)
(17,243,1)
(85,221,1)
(90,206,1)
(187,101,1)
(150,242,1)
(105,242,1)
(174,140,1)
(210,197,1)
(187,139,1)
(186,143,1)
(145,135,1)
(114,150,1)
(216,194,1)
(88,214,1)
(45,182,1)
(177,142,1)
(133,35,1)
(21,17,1)
(145,228,1)
(8,169,1)
(187,130,1)
(111,22,1)
(126,54,1)
(8,102,1)
(156,169,1)
(101,113,1)
(25,27,1)
(122,8,1)
(117,124,1)
(52,10,1)
(127,199,1)
(101,85,1)
(112,199,1)
(49,235,1)
(203,103,1)
(63,180,1)
(194,199,1)
(155,186,1)
(168,8,1)
(237,238,1)
(213,214,1)
(111,9,1)
(62,35,1)
(105,190,1)
(59,64,1)
(2,39,1)
(201,240,1)
(115,83,1)
(81,24,1)
(101,92,1)
(83,50,1)
(44,81,1)
(16,55,1)
(236,151,1)
(26,242,1)
(26,0,1)
(81,242,1)
(247,49,1)
(15,242,1)
(187,117,1)
(21,35,1)
(191,69,1)
(110,63,1)
(238,164,1)
(6,30,1)
(27,146,1)
(208,41,1)
(101,58,1)
(187,220,1)
(101,28,1)
(208,167,1)
(86,143,1)
(43,121,1)
(33,215,1)
(205,199,1)
(234,169,1)
(98,79,1)
(178,242,1)
(236,169,1)
(83,242,1)
(55,227,1)
(124,205,1)
(224,199,1)
(173,234,1)
(147,178,1)
(54,241,1)
(79,78,1)
(197,93,1)
(28,105,1)
(101,115,1)
(106,166,1)
(121,169,1)
(239,159,1)
(214,236,1)
(140,175,1)
(34,141,1)
(93,72,1)
(103,36,1)
(230,242,1)
(5,56,1)
(221,89,1)
(187,212,1)
(187,6,1)
(166,169,1)
(118,132,1)
(111,187,1)
(29,199,1)
(101,147,1)
(73,203,1)
(182,207,1)
(226,138,1)
(2,242,1)
(39,117,1)
(141,169,1)
(65,154,1)
(23,46,1)
(188,210,1)
(159,226,1)
(36,211,1)
(53,242,1)
(202,154,1)
(193,75,1)
(197,169,1)
(167,41,1)
(96,248,1)
(65,202,1)
(12,94,1)
(58,247,1)
(16,169,1)
(94,16,1)
(142,193,1)
(101,123,1)
(37,181,1)
(214,47,1)
(97,35,1)
(52,242,1)
(235,23,1)
(107,94,1)
(163,144,1)
(30,37,1)
(84,16,1)
(136,23,1)
(94,84,1)
(138,127,1)
(162,112,1)
(92,230,1)
(139,169,1)
(42,199,1)
(53,7,1)
(46,51,1)
(7,200,1)
(88,213,1)
(137,2,1)
(143,153,1)
(158,174,1)
(64,169,1)
(233,98,1)
(239,242,1)
(180,59,1)
(187,110,1)
(206,110,1)
(176,169,1)
(128,219,1)
(154,33,1)
(90,242,1)
(197,81,1)
(207,120,1)
(166,66,1)
(11,199,1)
(78,95,1)
(47,236,1)
(102,71,1)
(211,199,1)
(187,235,1)
(101,232,1)
(171,45,1)
(187,5,1)
(217,158,1)
(41,126,1)
(62,25,1)
(101,233,1)
(175,199,1)
(107,12,1)
(176,244,1)
(220,155,1)
(232,245,1)
(186,86,1)
(104,129,1)
(1,161,1)
(111,114,1)
(41,169,1)
(212,18,1)
(95,169,1)
(123,90,1)
(212,65,1)
(132,199,1)
(101,184,1)
(50,19,1)
(240,193,1)
(19,108,1)
(135,171,1)
(101,188,1)
(157,11,1)
(156,74,1)
(247,242,1)
(242,145,1)
(143,169,1)
(9,133,1)
(51,196,1)
(120,43,1)
(170,208,1)
(244,148,1)
(27,35,1)
(22,57,1)
(181,176,1)
(243,199,1)
(200,172,1)
(56,198,1)
(215,199,1)
(130,141,1)
(104,35,1)
(101,179,1)
(112,27,1)
(199,242,1)
(230,35,1)
(0,209,1)
(169,104,1)
(150,242,2)
(132,199,2)
(243,199,2)
(208,41,2)
(110,180,2)
(65,154,2)
(111,114,2)
(21,35,2)
(56,199,2)
(227,199,2)
(187,212,2)
(72,174,2)
(146,199,2)
(158,174,2)
(41,193,2)
(245,242,2)
(185,103,2)
(15,242,2)
(113,199,2)
(65,199,2)
(178,199,2)
(75,199,2)
(238,97,2)
(111,187,2)
(52,242,2)
(105,242,2)
(161,242,2)
(212,65,2)
(245,199,2)
(140,199,2)
(168,8,2)
(187,193,2)
(164,193,2)
(217,174,2)
(90,242,2)
(174,199,2)
(233,26,2)
(189,199,2)
(192,199,2)
(219,199,2)
(94,199,2)
(50,199,2)
(187,6,2)
(101,199,2)
(105,199,2)
(24,174,2)
(201,193,2)
(139,199,2)
(21,228,2)
(187,26,2)
(48,199,2)
(46,199,2)
(197,169,2)
(30,26,2)
(75,35,2)
(95,169,2)
(168,199,2)
(110,199,2)
(244,26,2)
(98,26,2)
(41,169,2)
(106,199,2)
(111,22,2)
(71,199,2)
(154,169,2)
(178,242,2)
(118,199,2)
(55,199,2)
(138,199,2)
(25,27,2)
(212,199,2)
(96,199,2)
(78,26,2)
(101,174,2)
(198,199,2)
(107,199,2)
(66,199,2)
(145,228,2)
(125,26,2)
(187,174,2)
(196,199,2)
(187,107,2)
(220,186,2)
(5,199,2)
(26,242,2)
(151,199,2)
(49,199,2)
(187,103,2)
(6,37,2)
(141,169,2)
(92,103,2)
(52,199,2)
(42,199,2)
(230,35,2)
(115,199,2)
(86,193,2)
(156,169,2)
(163,174,2)
(150,199,2)
(100,174,2)
(100,169,2)
(187,117,2)
(18,199,2)
(34,199,2)
(246,199,2)
(239,242,2)
(83,199,2)
(53,242,2)
(20,62,2)
(159,199,2)
(210,174,2)
(173,199,2)
(112,199,2)
(123,199,2)
(180,199,2)
(5,198,2)
(224,199,2)
(239,199,2)
(8,199,2)
(114,199,2)
(3,27,2)
(103,36,2)
(101,26,2)
(117,199,2)
(12,199,2)
(63,199,2)
(241,193,2)
(206,199,2)
(139,169,2)
(141,199,2)
(26,103,2)
(174,140,2)
(184,199,2)
(133,228,2)
(210,197,2)
(143,193,2)
(130,199,2)
(133,35,2)
(93,174,2)
(155,193,2)
(193,75,2)
(152,199,2)
(130,141,2)
(106,166,2)
(27,35,2)
(111,217,2)
(6,26,2)
(75,242,2)
(187,100,2)
(149,26,2)
(64,169,2)
(108,199,2)
(198,234,2)
(70,26,2)
(57,26,2)
(187,220,2)
(216,199,2)
(83,242,2)
(200,168,2)
(101,103,2)
(19,199,2)
(73,103,2)
(10,199,2)
(88,199,2)
(19,106,2)
(166,199,2)
(235,23,2)
(17,199,2)
(39,199,2)
(15,193,2)
(69,26,2)
(126,193,2)
(197,81,2)
(102,199,2)
(144,174,2)
(11,199,2)
(187,5,2)
(236,169,2)
(237,193,2)
(181,26,2)
(242,145,2)
(211,199,2)
(84,199,2)
(88,214,2)
(176,169,2)
(51,199,2)
(239,182,2)
(162,199,2)
(186,193,2)
(160,103,2)
(235,199,2)
(177,193,2)
(202,199,2)
(213,199,2)
(176,26,2)
(193,199,2)
(156,26,2)
(47,199,2)
(187,238,2)
(236,199,2)
(187,199,2)
(20,242,2)
(148,26,2)
(188,174,2)
(117,169,2)
(128,199,2)
(2,199,2)
(2,242,2)
(74,26,2)
(182,207,2)
(127,199,2)
(90,199,2)
(37,176,2)
(241,242,2)
(165,199,2)
(191,26,2)
(179,199,2)
(187,200,2)
(190,199,2)
(209,103,2)
(172,199,2)
(194,199,2)
(186,143,2)
(104,35,2)
(147,199,2)
(136,199,2)
(215,199,2)
(33,199,2)
(200,199,2)
(99,193,2)
(1,199,2)
(157,199,2)
(28,199,2)
(167,193,2)
(247,242,2)
(79,26,2)
(180,64,2)
(81,174,2)
(187,110,2)
(230,103,2)
(51,169,2)
(22,26,2)
(203,103,2)
(187,139,2)
(111,177,2)
(8,169,2)
(9,199,2)
(143,169,2)
(247,199,2)
(98,169,2)
(59,199,2)
(23,199,2)
(175,199,2)
(240,193,2)
(20,27,2)
(187,130,2)
(221,242,2)
(133,199,2)
(85,199,2)
(44,174,2)
(62,35,2)
(230,242,2)
(187,235,2)
(122,199,2)
(97,193,2)
(169,104,2)
(208,193,2)
(191,242,2)
(64,199,2)
(29,199,2)
(232,199,2)
(81,242,2)
(94,16,2)
(187,19,2)
(234,199,2)
(205,199,2)
(161,199,2)
(207,228,2)
(97,35,2)
(166,169,2)
(111,9,2)
(234,169,2)
(154,199,2)
(197,174,2)
(16,199,2)
(187,88,2)
(7,199,2)
(62,27,2)
(226,199,2)
(153,193,2)
(248,199,2)
(54,193,2)
(101,193,2)
(107,94,2)
(95,26,2)
(78,95,2)
(239,35,2)
(221,199,2)
(53,199,2)
(142,193,2)
(36,199,2)
(89,199,2)
(21,199,2)
(170,193,2)
(214,199,2)
(238,193,2)
(16,169,2)
(58,199,2)
(220,193,2)
(214,236,2)
(124,199,2)
(76,193,2)
(37,26,2)
(150,35,2)
(23,51,2)
(137,199,2)
(27,199,2)
(0,103,2)
(103,199,2)
-----------------------------------
(0,DEBUGCTL_RESERVED_BITS)
(1,break;)
(2,svm->sysenter_esp = data)
(3,data)
(4,if (!boot_cpu_has(X86_FEATURE_RDTSCP)
(5,svm->vmcb->save.sysenter_esp)
(6,svm->vmcb->save.dbgctl)
(7,data)
(8,svm->vmcb)
(9,return kvm_set_msr_common(vcpu, msr)
(10,data)
(11,vcpu)
(12,lstar)
(13,)
(14,case MSR_LSTAR:)
(15,vcpu->arch.pat = data)
(16,svm->vmcb)
(17,msr)
(18,sfmask)
(19,svm->vmcb->save.star)
(20,avic_update_vapic_bar(to_svm(vcpu)
(21,kvm_write_tsc(vcpu, msr)
(22,return 1;)
(23,svm->vmcb->save)
(24,data)
(25,vcpu)
(26,data & DEBUGCTL_RESERVED_BITS)
(27,kvm_vcpu_apicv_active(vcpu)
(28,break;)
(29,svm)
(30,dbgctl)
(31,data)
(32,if (data & DEBUGCTL_RESERVED_BITS)
(33,vmcb)
(34,hsave_msr)
(35,struct kvm_vcpu *vcpu)
(36,boot_cpu_has(X86_FEATURE_LBRV)
(37,svm->vmcb->save)
(38,case MSR_IA32_TSC:)
(39,data)
(40,case MSR_IA32_SYSENTER_ESP:)
(41,svm->vmcb)
(42,svm)
(43,msr)
(44,MSR_TSC_AUX)
(45,data)
(46,save)
(47,save)
(48,data)
(49,data)
(50,data)
(51,svm->vmcb)
(52,svm->sysenter_eip = data)
(53,svm->vmcb->save.sysenter_cs = data)
(54,svm)
(55,vmcb)
(56,sysenter_esp)
(57,1)
(58,break;)
(59,save)
(60,case MSR_KERNEL_GS_BASE:)
(61,case MSR_STAR:)
(62,to_svm(vcpu)
(63,sysenter_eip)
(64,svm->vmcb)
(65,svm->vmcb->save)
(66,vmcb)
(67,case MSR_CSTAR:)
(68,ecx)
(69,data)
(70,vmcb)
(71,svm)
(72,svm)
(73,"%s: MSR_IA32_DEBUGCTL 0x%llx, nop\\n")
(74,svm)
(75,kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
(76,data)
(77,)
(78,mark_dirty(svm->vmcb, VMCB_LBR)
(79,svm)
(80,default:)
(81,svm->tsc_aux = data)
(82,case MSR_IA32_CR_PAT:)
(83,svm->vmcb->save.star = data)
(84,save)
(85,break;)
(86,save)
(87,svm)
(88,svm->vmcb->save.kernel_gs_base)
(89,data)
(90,svm->vmcb->save.sysenter_eip = data)
(91,case MSR_VM_CR:)
(92,break;)
(93,tsc_aux)
(94,svm->vmcb->save)
(95,svm->vmcb)
(96,nested)
(97,vcpu->arch)
(98,svm_enable_lbrv(svm)
(99,svm)
(100,svm->tsc_aux)
(101,0)
(102,vmcb)
(103,!boot_cpu_has(X86_FEATURE_LBRV)
(104,to_svm(vcpu)
(105,svm->vmcb->save.kernel_gs_base = data)
(106,svm->vmcb->save)
(107,svm->vmcb->save.lstar)
(108,star)
(109,case MSR_IA32_SYSENTER_EIP:)
(110,svm->vmcb->save.sysenter_eip)
(111,RET)
(112,vcpu)
(113,break;)
(114,return svm_set_vm_cr(vcpu, data)
(115,break;)
(116,if (!boot_cpu_has(X86_FEATURE_LBRV)
(117,svm->sysenter_esp)
(118,sysenter_eip)
(119,switch (ecx)
(120,index)
(121,ecx)
(122,save)
(123,break;)
(124,sysenter_esp)
(125,VMCB_LBR)
(126,vmcb)
(127,vcpu)
(128,vmcb)
(129,vcpu)
(130,svm->nested.hsave_msr)
(131,case MSR_SYSCALL_MASK:)
(132,svm)
(133,kvm_set_msr_common(vcpu, msr)
(134,svm)
(135,data)
(136,cstar)
(137,svm)
(138,"unimplemented wrmsr: 0x%x data 0x%llx\\n")
(139,svm->sysenter_eip)
(140,boot_cpu_has(X86_FEATURE_RDTSCP)
(141,svm->nested)
(142,1)
(143,svm->vmcb)
(144,svm)
(145,msr->data)
(146,vcpu)
(147,break;)
(148,svm)
(149,svm)
(150,svm_set_vm_cr(vcpu, data)
(151,vmcb)
(152,save)
(153,vmcb)
(154,svm->vmcb)
(155,g_pat)
(156,svm_disable_lbrv(svm)
(157,data)
(158,1)
(159,data)
(160,data)
(161,svm->vmcb->save.sfmask = data)
(162,msr)
(163,tsc_aux)
(164,pat)
(165,vmcb)
(166,svm->vmcb)
(167,VMCB_NPT)
(168,svm->vmcb->save)
(169,*svm = to_svm(vcpu)
(170,break;)
(171,msr)
(172,sysenter_cs)
(173,save)
(174,!boot_cpu_has(X86_FEATURE_RDTSCP)
(175,X86_FEATURE_RDTSCP)
(176,svm->vmcb)
(177,return 1;)
(178,svm->vmcb->save.sysenter_esp = data)
(179,break;)
(180,svm->vmcb->save)
(181,save)
(182,ecx = msr->index)
(183,if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
(184,break;)
(185,__func__)
(186,svm->vmcb->save)
(187,return 0;)
(188,break;)
(189,data)
(190,data)
(191,svm->vmcb->save.dbgctl = data)
(192,data)
(193,!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
(194,vcpu)
(195,)
(196,vmcb)
(197,svm->tsc_aux)
(198,svm->vmcb->save)
(199,ecx)
(200,svm->vmcb->save.sysenter_cs)
(201,arch)
(202,save)
(203,vcpu)
(204,case MSR_VM_IGNNE:)
(205,svm)
(206,data)
(207,msr->index)
(208,mark_dirty(svm->vmcb, VMCB_NPT)
(209,data)
(210,wrmsrl(MSR_TSC_AUX, svm->tsc_aux)
(211,X86_FEATURE_LBRV)
(212,svm->vmcb->save.sfmask)
(213,kernel_gs_base)
(214,svm->vmcb->save)
(215,svm)
(216,MSR_IA32_CR_PAT)
(217,return 1;)
(218,case MSR_IA32_DEBUGCTLMSR:)
(219,svm)
(220,svm->vmcb->save.g_pat)
(221,svm->nested.hsave_msr = data)
(222,case MSR_IA32_SYSENTER_CS:)
(223,case MSR_IA32_APICBASE:)
(224,svm)
(225,case MSR_TSC_AUX:)
(226,ecx)
(227,svm)
(228,struct msr_data *msr)
(229,if (kvm_vcpu_apicv_active(vcpu)
(230,vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\\n",\n\\n\\t\\t\\t\\t    __func__, data)
(231,case MSR_VM_HSAVE_PA:)
(232,break;)
(233,break;)
(234,svm->vmcb)
(235,svm->vmcb->save.cstar)
(236,svm->vmcb)
(237,data)
(238,vcpu->arch.pat)
(239,vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\\n", ecx, data)
(240,vcpu)
(241,svm->vmcb->save.g_pat = data)
(242,data = msr->data)
(243,vcpu)
(244,vmcb)
(245,svm->vmcb->save.lstar = data)
(246,data)
(247,svm->vmcb->save.cstar = data)
(248,svm)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^