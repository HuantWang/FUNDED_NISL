-----label-----
0
-----code-----
static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
{
	struct at24_platform_data chip;
	kernel_ulong_t magic = 0;
	bool writable;
	int use_smbus = 0;
	int use_smbus_write = 0;
	struct at24_data *at24;
	int err;
	unsigned i, num_addresses;
	u8 test_byte;

	if (client->dev.platform_data) {
		chip = *(struct at24_platform_data *)client->dev.platform_data;
	} else {
		if (id) {
			magic = id->driver_data;
		} else {
			const struct acpi_device_id *aid;

			aid = acpi_match_device(at24_acpi_ids, &client->dev);
			if (aid)
				magic = aid->driver_data;
		}
		if (!magic)
			return -ENODEV;

		chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN));
		magic >>= AT24_SIZE_BYTELEN;
		chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS);
		/*
		 * This is slow, but we can't know all eeproms, so we better
		 * play safe. Specifying custom eeprom-types via platform_data
		 * is recommended anyhow.
		 */
		chip.page_size = 1;

		/* update chipdata if OF is present */
		at24_get_ofdata(client, &chip);

		chip.setup = NULL;
		chip.context = NULL;
	}

	if (!is_power_of_2(chip.byte_len))
		dev_warn(&client->dev,
			"byte_len looks suspicious (no power of 2)!\n");
	if (!chip.page_size) {
		dev_err(&client->dev, "page_size must not be 0!\n");
		return -EINVAL;
	}
	if (!is_power_of_2(chip.page_size))
		dev_warn(&client->dev,
			"page_size looks suspicious (no power of 2)!\n");

	/*
	 * REVISIT: the size of the EUI-48 byte array is 6 in at24mac402, while
	 * the call to ilog2() in AT24_DEVICE_MAGIC() rounds it down to 4.
	 *
	 * Eventually we'll get rid of the magic values altoghether in favor of
	 * real structs, but for now just manually set the right size.
	 */
	if (chip.flags & AT24_FLAG_MAC && chip.byte_len == 4)
		chip.byte_len = 6;

	/* Use I2C operations unless we're stuck with SMBus extensions. */
	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
		if (chip.flags & AT24_FLAG_ADDR16)
			return -EPFNOSUPPORT;

		if (i2c_check_functionality(client->adapter,
				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {
			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;
		} else if (i2c_check_functionality(client->adapter,
				I2C_FUNC_SMBUS_READ_WORD_DATA)) {
			use_smbus = I2C_SMBUS_WORD_DATA;
		} else if (i2c_check_functionality(client->adapter,
				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {
			use_smbus = I2C_SMBUS_BYTE_DATA;
		} else {
			return -EPFNOSUPPORT;
		}

		if (i2c_check_functionality(client->adapter,
				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) {
			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;
		} else if (i2c_check_functionality(client->adapter,
				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {
			use_smbus_write = I2C_SMBUS_BYTE_DATA;
			chip.page_size = 1;
		}
	}

	if (chip.flags & AT24_FLAG_TAKE8ADDR)
		num_addresses = 8;
	else
		num_addresses =	DIV_ROUND_UP(chip.byte_len,
			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256);

	at24 = devm_kzalloc(&client->dev, sizeof(struct at24_data) +
		num_addresses * sizeof(struct i2c_client *), GFP_KERNEL);
	if (!at24)
		return -ENOMEM;

	mutex_init(&at24->lock);
	at24->use_smbus = use_smbus;
	at24->use_smbus_write = use_smbus_write;
	at24->chip = chip;
	at24->num_addresses = num_addresses;

	if ((chip.flags & AT24_FLAG_SERIAL) && (chip.flags & AT24_FLAG_MAC)) {
		dev_err(&client->dev,
			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.");
		return -EINVAL;
	}

	if (chip.flags & AT24_FLAG_SERIAL) {
		at24->read_func = at24_eeprom_read_serial;
	} else if (chip.flags & AT24_FLAG_MAC) {
		at24->read_func = at24_eeprom_read_mac;
	} else {
		at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus
						  : at24_eeprom_read_i2c;
	}

	if (at24->use_smbus) {
		if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)
			at24->write_func = at24_eeprom_write_smbus_block;
		else
			at24->write_func = at24_eeprom_write_smbus_byte;
	} else {
		at24->write_func = at24_eeprom_write_i2c;
	}

	writable = !(chip.flags & AT24_FLAG_READONLY);
	if (writable) {
		if (!use_smbus || use_smbus_write) {

			unsigned write_max = chip.page_size;

			if (write_max > io_limit)
				write_max = io_limit;
			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)
				write_max = I2C_SMBUS_BLOCK_MAX;
			at24->write_max = write_max;

			/* buffer (data + address at the beginning) */
			at24->writebuf = devm_kzalloc(&client->dev,
				write_max + 2, GFP_KERNEL);
			if (!at24->writebuf)
				return -ENOMEM;
		} else {
			dev_warn(&client->dev,
				"cannot write due to controller restrictions.");
		}
	}

	at24->client[0] = client;

	/* use dummy devices for multiple-address chips */
	for (i = 1; i < num_addresses; i++) {
		at24->client[i] = i2c_new_dummy(client->adapter,
					client->addr + i);
		if (!at24->client[i]) {
			dev_err(&client->dev, "address 0x%02x unavailable\n",
					client->addr + i);
			err = -EADDRINUSE;
			goto err_clients;
		}
	}

	i2c_set_clientdata(client, at24);

	/*
	 * Perform a one-byte test read to verify that the
	 * chip is functional.
	 */
	err = at24_read(at24, 0, &test_byte, 1);
	if (err) {
		err = -ENODEV;
		goto err_clients;
	}

	at24->nvmem_config.name = dev_name(&client->dev);
	at24->nvmem_config.dev = &client->dev;
	at24->nvmem_config.read_only = !writable;
	at24->nvmem_config.root_only = true;
	at24->nvmem_config.owner = THIS_MODULE;
	at24->nvmem_config.compat = true;
	at24->nvmem_config.base_dev = &client->dev;
	at24->nvmem_config.reg_read = at24_read;
	at24->nvmem_config.reg_write = at24_write;
	at24->nvmem_config.priv = at24;
	at24->nvmem_config.stride = 1;
	at24->nvmem_config.word_size = 1;
	at24->nvmem_config.size = chip.byte_len;

	at24->nvmem = nvmem_register(&at24->nvmem_config);

	if (IS_ERR(at24->nvmem)) {
		err = PTR_ERR(at24->nvmem);
		goto err_clients;
	}

	dev_info(&client->dev, "%u byte %s EEPROM, %s, %u bytes/write\n",
		chip.byte_len, client->name,
		writable ? "writable" : "read-only", at24->write_max);
	if (use_smbus == I2C_SMBUS_WORD_DATA ||
	    use_smbus == I2C_SMBUS_BYTE_DATA) {
		dev_notice(&client->dev, "Falling back to %s reads, "
			   "performance will suffer\n", use_smbus ==
			   I2C_SMBUS_WORD_DATA ? "word" : "byte");
	}

	/* export data to kernel code */
	if (chip.setup)
		chip.setup(at24->nvmem, chip.context);

	return 0;

err_clients:
	for (i = 1; i < num_addresses; i++)
		if (at24->client[i])
			i2c_unregister_device(at24->client[i]);

	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
17,50
17,51
17,52
17,53
17,54
17,55
17,56
17,57
17,58
17,59
17,60
17,61
17,62
17,63
17,64
17,65
17,66
17,67
17,68
17,69
17,70
17,71
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
30,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
58,59
59,60
59,61
61,62
63,64
64,65
64,66
64,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
76,77
76,78
76,79
77,78
77,79
78,79
78,80
79,80
83,84
84,85
85,86
85,87
86,87
88,89
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
96,97
96,98
97,98
101,102
101,103
101,104
101,105
101,106
101,107
101,108
101,109
101,110
102,103
102,104
102,105
103,104
105,106
106,107
107,108
107,109
108,109
110,111
110,112
111,112
114,115
114,116
114,117
115,116
116,117
116,118
117,118
119,120
119,121
122,123
123,124
123,125
124,125
126,127
126,128
126,129
127,128
129,130
131,132
132,133
132,134
133,134
136,137
136,138
137,138
139,140
140,141
140,142
141,142
143,144
143,145
144,145
147,148
147,149
148,149
149,150
151,152
152,153
153,154
155,156
156,157
156,158
157,158
157,159
158,159
161,162
161,163
162,163
164,165
164,166
165,166
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
178,179
179,180
179,181
180,181
180,182
181,182
184,185
184,186
185,186
187,188
187,189
188,189
190,191
192,193
193,194
193,195
194,195
194,196
195,196
199,200
200,201
200,202
200,203
201,202
203,204
205,206
206,207
208,209
209,210
209,211
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
222,223
224,225
224,226
225,226
226,227
226,228
227,228
229,230
229,231
230,231
233,234
234,235
234,236
234,237
235,236
237,238
238,239
238,240
239,240
243,244
243,245
244,245
245,246
245,247
246,247
249,250
249,251
250,251
251,252
251,253
251,254
252,253
254,255
255,256
255,257
256,257
260,261
261,262
262,263
264,265
264,266
265,266
266,267
266,268
267,268
269,270
269,271
270,271
273,274
274,275
274,276
274,277
275,276
277,278
278,279
278,280
279,280
283,284
283,285
284,285
284,286
285,286
285,287
286,287
286,288
287,288
290,291
292,293
292,294
293,294
293,295
294,295
298,299
299,300
299,301
300,301
300,302
301,302
305,306
305,307
306,307
307,308
307,309
307,310
308,309
310,311
310,312
311,312
314,315
316,317
316,318
316,319
317,318
317,319
318,319
318,320
319,320
319,321
320,321
323,324
325,326
326,327
327,328
329,330
329,331
329,332
330,331
330,332
330,333
331,332
333,334
333,335
334,335
337,338
339,340
340,341
341,342
341,343
342,343
344,345
346,347
346,348
346,349
347,348
347,349
347,350
348,349
350,351
350,352
351,352
354,355
356,357
357,358
358,359
358,360
359,360
361,362
363,364
363,365
363,366
364,365
364,366
364,367
365,366
367,368
367,369
368,369
371,372
373,374
374,375
375,376
375,377
376,377
378,379
380,381
381,382
382,383
383,384
385,386
385,387
385,388
386,387
386,388
386,389
387,388
389,390
389,391
390,391
393,394
395,396
396,397
397,398
397,399
398,399
400,401
402,403
402,404
403,404
403,405
403,406
404,405
406,407
406,408
407,408
410,411
412,413
412,414
413,414
414,415
414,416
415,416
417,418
419,420
420,421
420,422
421,422
421,423
422,423
426,427
426,428
426,429
427,428
427,429
428,429
428,430
429,430
432,433
434,435
435,436
435,437
436,437
439,440
440,441
440,442
441,442
443,444
443,445
443,446
444,445
446,447
446,448
447,448
450,451
450,452
450,453
451,452
452,453
452,454
453,454
453,455
454,455
457,458
461,462
462,463
462,464
463,464
465,466
465,467
465,468
465,469
466,467
468,469
469,470
469,471
470,471
473,474
473,475
474,475
475,476
475,477
476,477
479,480
479,481
480,481
482,483
483,484
483,485
484,485
486,487
488,489
490,491
490,492
491,492
492,493
494,495
495,496
496,497
498,499
499,500
499,501
500,501
502,503
503,504
503,505
504,505
507,508
508,509
508,510
509,510
509,511
510,511
513,514
515,516
516,517
516,518
517,518
517,519
518,519
521,522
523,524
524,525
524,526
525,526
525,527
526,527
529,530
531,532
532,533
532,534
533,534
533,535
534,535
537,538
539,540
539,541
540,541
540,542
541,542
542,543
542,544
543,544
543,545
544,545
547,548
549,550
550,551
550,552
551,552
551,553
552,553
555,556
557,558
557,559
558,559
559,560
559,561
559,562
560,561
562,563
563,564
563,565
564,565
568,569
569,570
570,571
572,573
572,574
572,575
573,574
573,575
574,575
574,576
575,576
578,579
580,581
581,582
582,583
582,584
583,584
583,585
584,585
587,588
589,590
589,591
589,592
590,591
590,592
591,592
591,593
592,593
595,596
597,598
598,599
599,600
599,601
600,601
600,602
601,602
604,605
606,607
607,608
608,609
608,610
609,610
609,611
610,611
613,614
613,615
613,616
614,615
614,616
615,616
618,619
620,621
622,623
622,624
622,625
623,624
623,625
624,625
627,628
628,629
628,630
628,631
629,630
629,631
630,631
630,632
631,632
634,635
636,637
637,638
637,639
638,639
638,640
639,640
642,643
644,645
645,646
645,647
646,647
646,648
647,648
650,651
652,653
653,654
654,655
654,656
655,656
655,657
656,657
659,660
661,662
662,663
662,664
663,664
665,666
666,667
667,668
667,669
668,669
668,670
669,670
672,673
674,675
674,676
675,676
677,678
678,679
678,680
678,681
679,680
679,681
680,681
681,682
683,684
685,686
685,687
685,688
685,689
685,690
685,691
686,687
687,688
687,689
689,690
689,691
691,692
692,693
692,694
693,694
696,697
696,698
697,698
697,699
698,699
700,701
702,703
703,704
703,705
704,705
706,707
708,709
708,710
709,710
709,711
710,711
712,713
712,714
713,714
715,716
717,718
718,719
718,720
719,720
721,722
723,724
724,725
724,726
725,726
725,727
726,727
729,730
731,732
732,733
732,734
733,734
733,735
734,735
737,738
737,739
737,740
737,741
738,739
740,741
741,742
741,743
742,743
745,746
745,747
746,747
749,750
751,752
751,753
752,753
753,754
753,755
754,755
757,758
758,759
759,760
761,762
762,763
763,764
763,765
763,766
764,765
766,767
767,768
767,769
768,769
772,773
773,774
773,775
774,775
774,776
775,776
775,777
776,777
780,781
782,783
782,784
782,785
782,786
783,784
784,785
784,786
785,786
788,789
788,790
789,790
791,792
793,794
794,795
796,797
796,798
797,798
798,799
798,800
799,800
799,801
800,801
800,802
801,802
804,805
806,807
806,808
806,809
807,808
809,810
809,811
810,811
813,814
813,815
814,815
814,816
815,816
818,819
820,821
820,822
821,822
822,823
822,824
823,824
823,825
824,825
827,828
829,830
829,831
829,832
830,831
831,832
831,833
831,834
831,835
832,833
834,835
835,836
835,837
836,837
840,841
840,842
841,842
841,843
842,843
845,846
847,848
848,849
848,850
849,850
851,852
852,853
854,855
856,857
857,858
857,859
857,860
858,859
860,861
862,863
864,865
865,866
865,867
866,867
868,869
868,870
868,871
868,872
868,873
869,870
871,872
874,875
875,876
878,879
878,880
879,880
881,882
881,883
882,883
883,884
883,885
884,885
886,887
887,888
889,890
891,892
892,893
892,894
893,894
893,895
894,895
894,896
895,896
899,900
899,901
900,901
902,903
903,904
903,905
904,905
907,908
908,909
908,910
909,910
909,911
910,911
910,912
911,912
915,916
916,917
916,918
917,918
920,921
921,922
921,923
922,923
922,924
923,924
923,925
924,925
928,929
929,930
931,932
932,933
932,934
933,934
933,935
934,935
934,936
935,936
940,941
941,942
941,943
942,943
942,944
943,944
943,945
944,945
948,949
950,951
951,952
951,953
952,953
952,954
953,954
953,955
954,955
959,960
960,961
960,962
961,962
961,963
962,963
962,964
963,964
967,968
968,969
968,970
969,970
972,973
973,974
973,975
974,975
974,976
975,976
975,977
976,977
980,981
982,983
983,984
983,985
984,985
984,986
985,986
985,987
986,987
990,991
992,993
993,994
993,995
994,995
994,996
995,996
995,997
996,997
1000,1001
1002,1003
1003,1004
1003,1005
1004,1005
1004,1006
1005,1006
1005,1007
1006,1007
1011,1012
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1014,1016
1015,1016
1020,1021
1021,1022
1021,1023
1022,1023
1022,1024
1023,1024
1023,1025
1024,1025
1028,1029
1028,1030
1029,1030
1032,1033
1033,1034
1033,1035
1034,1035
1034,1036
1035,1036
1038,1039
1038,1040
1039,1040
1041,1042
1042,1043
1042,1044
1043,1044
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1050,1051
1050,1052
1051,1052
1054,1055
1054,1056
1055,1056
1056,1057
1056,1058
1057,1058
1059,1060
1059,1061
1060,1061
1062,1063
1062,1064
1063,1064
1066,1067
1068,1069
1069,1070
1069,1071
1069,1072
1069,1073
1069,1074
1069,1075
1069,1076
1070,1071
1072,1073
1073,1074
1073,1075
1074,1075
1078,1079
1078,1080
1079,1080
1082,1083
1082,1084
1083,1084
1086,1087
1086,1088
1086,1089
1087,1088
1091,1092
1091,1093
1092,1093
1095,1096
1095,1097
1096,1097
1096,1098
1097,1098
1097,1099
1098,1099
1100,1101
1102,1103
1102,1104
1103,1104
1105,1106
1107,1108
1108,1109
1109,1110
1109,1111
1109,1112
1109,1113
1110,1111
1112,1113
1113,1114
1113,1115
1114,1115
1118,1119
1118,1120
1118,1121
1119,1120
1119,1121
1120,1121
1122,1123
1126,1127
1126,1128
1127,1128
1127,1129
1128,1129
1131,1132
1132,1133
1132,1134
1132,1135
1133,1134
1133,1135
1134,1135
1137,1138
1137,1139
1138,1139
1141,1142
1141,1143
1142,1143
1145,1146
1147,1148
1147,1149
1149,1150
1149,1151
1149,1152
1149,1153
1150,1151
1151,1152
1151,1153
1152,1153
1155,1156
1155,1157
1156,1157
1158,1159
1160,1161
1161,1162
1163,1164
1163,1165
1164,1165
1164,1166
1165,1166
1165,1167
1166,1167
1169,1170
1171,1172
1172,1173
1172,1174
1173,1174
1175,1176
1175,1177
1176,1177
1176,1178
1177,1178
1180,1181
1182,1183
1183,1184
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,27,29,31,34,36,39,41,43,46,48,50,54,56,57,60,62,65,67,69,73,75,80,81,82,87,92,94,98,99,100,104,109,112,113,118,120,121,125,128,130,134,135,138,142,145,146,150,154,159,160,163,166,169,171,175,177,182,183,186,189,191,196,197,198,202,204,207,212,213,215,220,221,223,228,231,232,236,240,241,242,247,248,253,257,258,259,263,268,271,272,276,280,281,282,288,289,291,295,296,297,302,303,304,309,312,313,315,321,322,324,328,332,335,336,338,343,345,349,352,353,355,360,362,366,369,370,372,377,379,384,388,391,392,394,399,401,405,408,409,411,416,418,423,424,425,430,431,433,437,438,442,445,448,449,455,456,458,459,460,464,467,471,472,477,478,481,485,487,489,493,497,501,505,506,511,512,514,519,520,522,527,528,530,535,536,538,545,546,548,553,554,556,561,565,566,567,571,576,577,579,585,586,588,593,594,596,602,603,605,611,612,616,617,619,621,625,626,632,633,635,640,641,643,648,649,651,657,658,660,664,670,671,673,676,682,684,688,690,694,695,699,701,705,707,711,714,716,720,722,727,728,730,735,736,739,743,744,747,748,750,755,756,760,765,769,770,771,777,778,779,781,786,787,790,792,795,802,803,805,808,811,812,816,817,819,825,826,828,833,837,838,839,843,844,846,850,853,855,859,861,863,867,870,872,873,876,877,880,885,888,890,896,897,898,901,905,906,912,913,914,918,919,925,926,927,930,936,937,938,939,945,946,947,949,955,956,957,958,964,965,966,970,971,977,978,979,981,987,988,989,991,997,998,999,1001,1007,1008,1009,1010,1016,1017,1018,1019,1025,1026,1027,1030,1031,1036,1037,1040,1044,1045,1049,1052,1053,1058,1061,1064,1065,1067,1071,1075,1076,1077,1080,1081,1084,1085,1088,1089,1090,1093,1094,1099,1101,1104,1106,1111,1115,1116,1117,1121,1123,1124,1125,1129,1130,1135,1136,1139,1140,1143,1144,1146,1148,1153,1154,1157,1159,1162,1167,1168,1170,1174,1178,1179,1181,1184
-----computeFrom-----
85,86
85,87
107,108
107,109
123,124
123,125
140,141
140,142
156,157
156,158
164,165
164,166
173,174
173,175
179,180
179,181
184,185
184,186
193,194
193,195
209,210
209,211
217,218
217,219
284,285
284,286
285,286
285,287
292,293
292,294
299,300
299,301
318,319
318,320
341,342
341,343
358,359
358,360
375,376
375,377
397,398
397,399
414,415
414,416
420,421
420,422
427,428
427,429
435,436
435,437
440,441
440,442
452,453
452,454
462,463
462,464
473,474
473,475
479,480
479,481
508,509
508,510
516,517
516,518
524,525
524,526
532,533
532,534
540,541
540,542
542,543
542,544
550,551
550,552
573,574
573,575
582,583
582,584
590,591
590,592
599,600
599,601
608,609
608,610
629,630
629,631
637,638
637,639
645,646
645,647
654,655
654,656
662,663
662,664
667,668
667,669
679,680
679,681
697,698
697,699
703,704
703,705
709,710
709,711
712,713
712,714
718,719
718,720
724,725
724,726
732,733
732,734
745,746
745,747
773,774
773,775
784,785
784,786
788,789
788,790
798,799
798,800
813,814
813,815
840,841
840,842
848,849
848,850
865,866
865,867
883,884
883,885
892,893
892,894
908,909
908,910
921,922
921,923
932,933
932,934
941,942
941,943
951,952
951,953
960,961
960,962
973,974
973,975
983,984
983,985
993,994
993,995
1003,1004
1003,1005
1012,1013
1012,1014
1021,1022
1021,1023
1033,1034
1033,1035
1056,1057
1056,1058
1096,1097
1096,1098
1097,1098
1097,1099
1102,1103
1102,1104
1119,1120
1119,1121
1151,1152
1151,1153
1155,1156
1155,1157
-----guardedBy-----
295,302
296,303
632,640
682,711
699,705
701,707
714,720
716,722
1104,1121
1101,1123
-----guardedByNegation-----
430,455
431,456
576,593
577,594
632,648
-----lastLexicalUse-----
632,648
-----jump-----
632,648
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int at24_probe(struct i2c_client *client, const struct i2c_device_id *id){	struct at24_platform_data chip;	kernel_ulong_t magic = 0;	bool writable;	int use_smbus = 0;	int use_smbus_write = 0;	struct at24_data *at24;	int err;	unsigned i, num_addresses;	u8 test_byte;	if (client->dev.platform_data) {		chip = *(struct at24_platform_data *)client->dev.platform_data;	} else {		if (id) {			magic = id->driver_data;		} else {			const struct acpi_device_id *aid;			aid = acpi_match_device(at24_acpi_ids, &client->dev);			if (aid)				magic = aid->driver_data;		}		if (!magic)			return -ENODEV;		chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN));		magic >>= AT24_SIZE_BYTELEN;		chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS);		/*		 * This is slow, but we can't know all eeproms, so we better		 * play safe. Specifying custom eeprom-types via platform_data		 * is recommended anyhow.		 */		chip.page_size = 1;		/* update chipdata if OF is present */		at24_get_ofdata(client, &chip);		chip.setup = NULL;		chip.context = NULL;	}	if (!is_power_of_2(chip.byte_len))		dev_warn(&client->dev,			"byte_len looks suspicious (no power of 2)!\n");	if (!chip.page_size) {		dev_err(&client->dev, "page_size must not be 0!\n");		return -EINVAL;	}	if (!is_power_of_2(chip.page_size))		dev_warn(&client->dev,			"page_size looks suspicious (no power of 2)!\n");	/*	 * REVISIT: the size of the EUI-48 byte array is 6 in at24mac402, while	 * the call to ilog2() in AT24_DEVICE_MAGIC() rounds it down to 4.	 *	 * Eventually we'll get rid of the magic values altoghether in favor of	 * real structs, but for now just manually set the right size.	 */	if (chip.flags & AT24_FLAG_MAC && chip.byte_len == 4)		chip.byte_len = 6;	/* Use I2C operations unless we're stuck with SMBus extensions. */	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {		if (chip.flags & AT24_FLAG_ADDR16)			return -EPFNOSUPPORT;		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)) {			use_smbus = I2C_SMBUS_WORD_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) {			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}	}	if (chip.flags & AT24_FLAG_TAKE8ADDR)		num_addresses = 8;	else		num_addresses =	DIV_ROUND_UP(chip.byte_len,			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256);	at24 = devm_kzalloc(&client->dev, sizeof(struct at24_data) +		num_addresses * sizeof(struct i2c_client *), GFP_KERNEL);	if (!at24)		return -ENOMEM;	mutex_init(&at24->lock);	at24->use_smbus = use_smbus;	at24->use_smbus_write = use_smbus_write;	at24->chip = chip;	at24->num_addresses = num_addresses;	if ((chip.flags & AT24_FLAG_SERIAL) && (chip.flags & AT24_FLAG_MAC)) {		dev_err(&client->dev,			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.");		return -EINVAL;	}	if (chip.flags & AT24_FLAG_SERIAL) {		at24->read_func = at24_eeprom_read_serial;	} else if (chip.flags & AT24_FLAG_MAC) {		at24->read_func = at24_eeprom_read_mac;	} else {		at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c;	}	if (at24->use_smbus) {		if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)			at24->write_func = at24_eeprom_write_smbus_block;		else			at24->write_func = at24_eeprom_write_smbus_byte;	} else {		at24->write_func = at24_eeprom_write_i2c;	}	writable = !(chip.flags & AT24_FLAG_READONLY);	if (writable) {		if (!use_smbus || use_smbus_write) {			unsigned write_max = chip.page_size;			if (write_max > io_limit)				write_max = io_limit;			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;			at24->write_max = write_max;			/* buffer (data + address at the beginning) */			at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);			if (!at24->writebuf)				return -ENOMEM;		} else {			dev_warn(&client->dev,				"cannot write due to controller restrictions.");		}	}	at24->client[0] = client;	/* use dummy devices for multiple-address chips */	for (i = 1; i < num_addresses; i++) {		at24->client[i] = i2c_new_dummy(client->adapter,					client->addr + i);		if (!at24->client[i]) {			dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);			err = -EADDRINUSE;			goto err_clients;		}	}	i2c_set_clientdata(client, at24);	/*	 * Perform a one-byte test read to verify that the	 * chip is functional.	 */	err = at24_read(at24, 0, &test_byte, 1);	if (err) {		err = -ENODEV;		goto err_clients;	}	at24->nvmem_config.name = dev_name(&client->dev);	at24->nvmem_config.dev = &client->dev;	at24->nvmem_config.read_only = !writable;	at24->nvmem_config.root_only = true;	at24->nvmem_config.owner = THIS_MODULE;	at24->nvmem_config.compat = true;	at24->nvmem_config.base_dev = &client->dev;	at24->nvmem_config.reg_read = at24_read;	at24->nvmem_config.reg_write = at24_write;	at24->nvmem_config.priv = at24;	at24->nvmem_config.stride = 1;	at24->nvmem_config.word_size = 1;	at24->nvmem_config.size = chip.byte_len;	at24->nvmem = nvmem_register(&at24->nvmem_config);	if (IS_ERR(at24->nvmem)) {		err = PTR_ERR(at24->nvmem);		goto err_clients;	}	dev_info(&client->dev, "%u byte %s EEPROM, %s, %u bytes/write\n",		chip.byte_len, client->name,		writable ? "writable" : "read-only", at24->write_max);	if (use_smbus == I2C_SMBUS_WORD_DATA ||	    use_smbus == I2C_SMBUS_BYTE_DATA) {		dev_notice(&client->dev, "Falling back to %s reads, "			   "performance will suffer\n", use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte");	}	/* export data to kernel code */	if (chip.setup)		chip.setup(at24->nvmem, chip.context);	return 0;err_clients:	for (i = 1; i < num_addresses; i++)		if (at24->client[i])			i2c_unregister_device(at24->client[i]);	return err;}
static int
at24_probe(struct i2c_client *client, const struct i2c_device_id *id)
at24_probe
struct i2c_client *client
struct i2c_client
i2c_client
*client
*
client
const struct i2c_device_id *id
const struct i2c_device_id
i2c_device_id
*id
*
id
{	struct at24_platform_data chip;	kernel_ulong_t magic = 0;	bool writable;	int use_smbus = 0;	int use_smbus_write = 0;	struct at24_data *at24;	int err;	unsigned i, num_addresses;	u8 test_byte;	if (client->dev.platform_data) {		chip = *(struct at24_platform_data *)client->dev.platform_data;	} else {		if (id) {			magic = id->driver_data;		} else {			const struct acpi_device_id *aid;			aid = acpi_match_device(at24_acpi_ids, &client->dev);			if (aid)				magic = aid->driver_data;		}		if (!magic)			return -ENODEV;		chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN));		magic >>= AT24_SIZE_BYTELEN;		chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS);		/*		 * This is slow, but we can't know all eeproms, so we better		 * play safe. Specifying custom eeprom-types via platform_data		 * is recommended anyhow.		 */		chip.page_size = 1;		/* update chipdata if OF is present */		at24_get_ofdata(client, &chip);		chip.setup = NULL;		chip.context = NULL;	}	if (!is_power_of_2(chip.byte_len))		dev_warn(&client->dev,			"byte_len looks suspicious (no power of 2)!\n");	if (!chip.page_size) {		dev_err(&client->dev, "page_size must not be 0!\n");		return -EINVAL;	}	if (!is_power_of_2(chip.page_size))		dev_warn(&client->dev,			"page_size looks suspicious (no power of 2)!\n");	/*	 * REVISIT: the size of the EUI-48 byte array is 6 in at24mac402, while	 * the call to ilog2() in AT24_DEVICE_MAGIC() rounds it down to 4.	 *	 * Eventually we'll get rid of the magic values altoghether in favor of	 * real structs, but for now just manually set the right size.	 */	if (chip.flags & AT24_FLAG_MAC && chip.byte_len == 4)		chip.byte_len = 6;	/* Use I2C operations unless we're stuck with SMBus extensions. */	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {		if (chip.flags & AT24_FLAG_ADDR16)			return -EPFNOSUPPORT;		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)) {			use_smbus = I2C_SMBUS_WORD_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) {			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}	}	if (chip.flags & AT24_FLAG_TAKE8ADDR)		num_addresses = 8;	else		num_addresses =	DIV_ROUND_UP(chip.byte_len,			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256);	at24 = devm_kzalloc(&client->dev, sizeof(struct at24_data) +		num_addresses * sizeof(struct i2c_client *), GFP_KERNEL);	if (!at24)		return -ENOMEM;	mutex_init(&at24->lock);	at24->use_smbus = use_smbus;	at24->use_smbus_write = use_smbus_write;	at24->chip = chip;	at24->num_addresses = num_addresses;	if ((chip.flags & AT24_FLAG_SERIAL) && (chip.flags & AT24_FLAG_MAC)) {		dev_err(&client->dev,			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.");		return -EINVAL;	}	if (chip.flags & AT24_FLAG_SERIAL) {		at24->read_func = at24_eeprom_read_serial;	} else if (chip.flags & AT24_FLAG_MAC) {		at24->read_func = at24_eeprom_read_mac;	} else {		at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c;	}	if (at24->use_smbus) {		if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)			at24->write_func = at24_eeprom_write_smbus_block;		else			at24->write_func = at24_eeprom_write_smbus_byte;	} else {		at24->write_func = at24_eeprom_write_i2c;	}	writable = !(chip.flags & AT24_FLAG_READONLY);	if (writable) {		if (!use_smbus || use_smbus_write) {			unsigned write_max = chip.page_size;			if (write_max > io_limit)				write_max = io_limit;			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;			at24->write_max = write_max;			/* buffer (data + address at the beginning) */			at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);			if (!at24->writebuf)				return -ENOMEM;		} else {			dev_warn(&client->dev,				"cannot write due to controller restrictions.");		}	}	at24->client[0] = client;	/* use dummy devices for multiple-address chips */	for (i = 1; i < num_addresses; i++) {		at24->client[i] = i2c_new_dummy(client->adapter,					client->addr + i);		if (!at24->client[i]) {			dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);			err = -EADDRINUSE;			goto err_clients;		}	}	i2c_set_clientdata(client, at24);	/*	 * Perform a one-byte test read to verify that the	 * chip is functional.	 */	err = at24_read(at24, 0, &test_byte, 1);	if (err) {		err = -ENODEV;		goto err_clients;	}	at24->nvmem_config.name = dev_name(&client->dev);	at24->nvmem_config.dev = &client->dev;	at24->nvmem_config.read_only = !writable;	at24->nvmem_config.root_only = true;	at24->nvmem_config.owner = THIS_MODULE;	at24->nvmem_config.compat = true;	at24->nvmem_config.base_dev = &client->dev;	at24->nvmem_config.reg_read = at24_read;	at24->nvmem_config.reg_write = at24_write;	at24->nvmem_config.priv = at24;	at24->nvmem_config.stride = 1;	at24->nvmem_config.word_size = 1;	at24->nvmem_config.size = chip.byte_len;	at24->nvmem = nvmem_register(&at24->nvmem_config);	if (IS_ERR(at24->nvmem)) {		err = PTR_ERR(at24->nvmem);		goto err_clients;	}	dev_info(&client->dev, "%u byte %s EEPROM, %s, %u bytes/write\n",		chip.byte_len, client->name,		writable ? "writable" : "read-only", at24->write_max);	if (use_smbus == I2C_SMBUS_WORD_DATA ||	    use_smbus == I2C_SMBUS_BYTE_DATA) {		dev_notice(&client->dev, "Falling back to %s reads, "			   "performance will suffer\n", use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte");	}	/* export data to kernel code */	if (chip.setup)		chip.setup(at24->nvmem, chip.context);	return 0;err_clients:	for (i = 1; i < num_addresses; i++)		if (at24->client[i])			i2c_unregister_device(at24->client[i]);	return err;}
struct at24_platform_data chip;
struct at24_platform_data chip;
struct at24_platform_data
at24_platform_data
chip
chip
kernel_ulong_t magic = 0;
kernel_ulong_t magic = 0;
kernel_ulong_t
kernel_ulong_t
magic = 0
magic
= 0
0
bool writable;
bool writable;
bool
writable
writable
int use_smbus = 0;
int use_smbus = 0;
int
use_smbus = 0
use_smbus
= 0
0
int use_smbus_write = 0;
int use_smbus_write = 0;
int
use_smbus_write = 0
use_smbus_write
= 0
0
struct at24_data *at24;
struct at24_data *at24;
struct at24_data
at24_data
*at24
*
at24
int err;
int err;
int
err
err
unsigned i, num_addresses;
unsigned i, num_addresses;
unsigned
i
i
num_addresses
num_addresses
u8 test_byte;
u8 test_byte;
u8
u8
test_byte
test_byte
if (client->dev.platform_data) {		chip = *(struct at24_platform_data *)client->dev.platform_data;	} else {		if (id) {			magic = id->driver_data;		} else {			const struct acpi_device_id *aid;			aid = acpi_match_device(at24_acpi_ids, &client->dev);			if (aid)				magic = aid->driver_data;		}		if (!magic)			return -ENODEV;		chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN));		magic >>= AT24_SIZE_BYTELEN;		chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS);		/*		 * This is slow, but we can't know all eeproms, so we better		 * play safe. Specifying custom eeprom-types via platform_data		 * is recommended anyhow.		 */		chip.page_size = 1;		/* update chipdata if OF is present */		at24_get_ofdata(client, &chip);		chip.setup = NULL;		chip.context = NULL;	}
client->dev.platform_data
client->dev
client
client
dev
platform_data
{		chip = *(struct at24_platform_data *)client->dev.platform_data;	}
chip = *(struct at24_platform_data *)client->dev.platform_data;
chip = *(struct at24_platform_data *)client->dev.platform_data
chip
chip
*(struct at24_platform_data *)client->dev.platform_data
(struct at24_platform_data *)client->dev.platform_data
struct at24_platform_data *
struct at24_platform_data
at24_platform_data
*
*
client->dev.platform_data
client->dev
client
client
dev
platform_data
{		if (id) {			magic = id->driver_data;		} else {			const struct acpi_device_id *aid;			aid = acpi_match_device(at24_acpi_ids, &client->dev);			if (aid)				magic = aid->driver_data;		}		if (!magic)			return -ENODEV;		chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN));		magic >>= AT24_SIZE_BYTELEN;		chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS);		/*		 * This is slow, but we can't know all eeproms, so we better		 * play safe. Specifying custom eeprom-types via platform_data		 * is recommended anyhow.		 */		chip.page_size = 1;		/* update chipdata if OF is present */		at24_get_ofdata(client, &chip);		chip.setup = NULL;		chip.context = NULL;	}
if (id) {			magic = id->driver_data;		} else {			const struct acpi_device_id *aid;			aid = acpi_match_device(at24_acpi_ids, &client->dev);			if (aid)				magic = aid->driver_data;		}
id
id
{			magic = id->driver_data;		}
magic = id->driver_data;
magic = id->driver_data
magic
magic
id->driver_data
id
id
driver_data
{			const struct acpi_device_id *aid;			aid = acpi_match_device(at24_acpi_ids, &client->dev);			if (aid)				magic = aid->driver_data;		}
const struct acpi_device_id *aid;
const struct acpi_device_id *aid;
const struct acpi_device_id
acpi_device_id
*aid
*
aid
aid = acpi_match_device(at24_acpi_ids, &client->dev);
aid = acpi_match_device(at24_acpi_ids, &client->dev)
aid
aid
acpi_match_device(at24_acpi_ids, &client->dev)
acpi_match_device
acpi_match_device
at24_acpi_ids
at24_acpi_ids
&client->dev
client->dev
client
client
dev
if (aid)				magic = aid->driver_data;
aid
aid
magic = aid->driver_data;
magic = aid->driver_data
magic
magic
aid->driver_data
aid
aid
driver_data
if (!magic)			return -ENODEV;
!magic
magic
magic
return -ENODEV;
-ENODEV
ENODEV
ENODEV
chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN));
chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN))
chip.byte_len
chip
chip
byte_len
BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN))
BIT
BIT
magic & AT24_BITMASK(AT24_SIZE_BYTELEN)
magic
magic
AT24_BITMASK(AT24_SIZE_BYTELEN)
AT24_BITMASK
AT24_BITMASK
AT24_SIZE_BYTELEN
AT24_SIZE_BYTELEN
magic >>= AT24_SIZE_BYTELEN;
magic >>= AT24_SIZE_BYTELEN
magic
magic
AT24_SIZE_BYTELEN
AT24_SIZE_BYTELEN
chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS);
chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS)
chip.flags
chip
chip
flags
magic & AT24_BITMASK(AT24_SIZE_FLAGS)
magic
magic
AT24_BITMASK(AT24_SIZE_FLAGS)
AT24_BITMASK
AT24_BITMASK
AT24_SIZE_FLAGS
AT24_SIZE_FLAGS
chip.page_size = 1;
chip.page_size = 1
chip.page_size
chip
chip
page_size
1
at24_get_ofdata(client, &chip);
at24_get_ofdata(client, &chip)
at24_get_ofdata
at24_get_ofdata
client
client
&chip
chip
chip
chip.setup = NULL;
chip.setup = NULL
chip.setup
chip
chip
setup
NULL
NULL
chip.context = NULL;
chip.context = NULL
chip.context
chip
chip
context
NULL
NULL
if (!is_power_of_2(chip.byte_len))		dev_warn(&client->dev,			"byte_len looks suspicious (no power of 2)!\n");
!is_power_of_2(chip.byte_len)
is_power_of_2(chip.byte_len)
is_power_of_2
is_power_of_2
chip.byte_len
chip
chip
byte_len
dev_warn(&client->dev,			"byte_len looks suspicious (no power of 2)!\n");
dev_warn(&client->dev,			"byte_len looks suspicious (no power of 2)!\n")
dev_warn
dev_warn
&client->dev
client->dev
client
client
dev
"byte_len looks suspicious (no power of 2)!\n"
if (!chip.page_size) {		dev_err(&client->dev, "page_size must not be 0!\n");		return -EINVAL;	}
!chip.page_size
chip.page_size
chip
chip
page_size
{		dev_err(&client->dev, "page_size must not be 0!\n");		return -EINVAL;	}
dev_err(&client->dev, "page_size must not be 0!\n");
dev_err(&client->dev, "page_size must not be 0!\n")
dev_err
dev_err
&client->dev
client->dev
client
client
dev
"page_size must not be 0!\n"
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (!is_power_of_2(chip.page_size))		dev_warn(&client->dev,			"page_size looks suspicious (no power of 2)!\n");
!is_power_of_2(chip.page_size)
is_power_of_2(chip.page_size)
is_power_of_2
is_power_of_2
chip.page_size
chip
chip
page_size
dev_warn(&client->dev,			"page_size looks suspicious (no power of 2)!\n");
dev_warn(&client->dev,			"page_size looks suspicious (no power of 2)!\n")
dev_warn
dev_warn
&client->dev
client->dev
client
client
dev
"page_size looks suspicious (no power of 2)!\n"
if (chip.flags & AT24_FLAG_MAC && chip.byte_len == 4)		chip.byte_len = 6;
chip.flags & AT24_FLAG_MAC && chip.byte_len == 4
chip.flags & AT24_FLAG_MAC
chip.flags
chip
chip
flags
AT24_FLAG_MAC
AT24_FLAG_MAC
chip.byte_len == 4
chip.byte_len
chip
chip
byte_len
4
chip.byte_len = 6;
chip.byte_len = 6
chip.byte_len
chip
chip
byte_len
6
if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {		if (chip.flags & AT24_FLAG_ADDR16)			return -EPFNOSUPPORT;		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)) {			use_smbus = I2C_SMBUS_WORD_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) {			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}	}
!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)
i2c_check_functionality(client->adapter, I2C_FUNC_I2C)
i2c_check_functionality
i2c_check_functionality
client->adapter
client
client
adapter
I2C_FUNC_I2C
I2C_FUNC_I2C
{		if (chip.flags & AT24_FLAG_ADDR16)			return -EPFNOSUPPORT;		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)) {			use_smbus = I2C_SMBUS_WORD_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}		if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) {			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}	}
if (chip.flags & AT24_FLAG_ADDR16)			return -EPFNOSUPPORT;
chip.flags & AT24_FLAG_ADDR16
chip.flags
chip
chip
flags
AT24_FLAG_ADDR16
AT24_FLAG_ADDR16
return -EPFNOSUPPORT;
-EPFNOSUPPORT
EPFNOSUPPORT
EPFNOSUPPORT
if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_I2C_BLOCK)) {			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)) {			use_smbus = I2C_SMBUS_WORD_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}
i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_I2C_BLOCK)
i2c_check_functionality
i2c_check_functionality
client->adapter
client
client
adapter
I2C_FUNC_SMBUS_READ_I2C_BLOCK
I2C_FUNC_SMBUS_READ_I2C_BLOCK
{			use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;		}
use_smbus = I2C_SMBUS_I2C_BLOCK_DATA;
use_smbus = I2C_SMBUS_I2C_BLOCK_DATA
use_smbus
use_smbus
I2C_SMBUS_I2C_BLOCK_DATA
I2C_SMBUS_I2C_BLOCK_DATA
if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)) {			use_smbus = I2C_SMBUS_WORD_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}
i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_WORD_DATA)
i2c_check_functionality
i2c_check_functionality
client->adapter
client
client
adapter
I2C_FUNC_SMBUS_READ_WORD_DATA
I2C_FUNC_SMBUS_READ_WORD_DATA
{			use_smbus = I2C_SMBUS_WORD_DATA;		}
use_smbus = I2C_SMBUS_WORD_DATA;
use_smbus = I2C_SMBUS_WORD_DATA
use_smbus
use_smbus
I2C_SMBUS_WORD_DATA
I2C_SMBUS_WORD_DATA
if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)) {			use_smbus = I2C_SMBUS_BYTE_DATA;		} else {			return -EPFNOSUPPORT;		}
i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_READ_BYTE_DATA)
i2c_check_functionality
i2c_check_functionality
client->adapter
client
client
adapter
I2C_FUNC_SMBUS_READ_BYTE_DATA
I2C_FUNC_SMBUS_READ_BYTE_DATA
{			use_smbus = I2C_SMBUS_BYTE_DATA;		}
use_smbus = I2C_SMBUS_BYTE_DATA;
use_smbus = I2C_SMBUS_BYTE_DATA
use_smbus
use_smbus
I2C_SMBUS_BYTE_DATA
I2C_SMBUS_BYTE_DATA
{			return -EPFNOSUPPORT;		}
return -EPFNOSUPPORT;
-EPFNOSUPPORT
EPFNOSUPPORT
EPFNOSUPPORT
if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)) {			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;		} else if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}
i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)
i2c_check_functionality
i2c_check_functionality
client->adapter
client
client
adapter
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
I2C_FUNC_SMBUS_WRITE_I2C_BLOCK
{			use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;		}
use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA;
use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA
use_smbus_write
use_smbus_write
I2C_SMBUS_I2C_BLOCK_DATA
I2C_SMBUS_I2C_BLOCK_DATA
if (i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)) {			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}
i2c_check_functionality(client->adapter,				I2C_FUNC_SMBUS_WRITE_BYTE_DATA)
i2c_check_functionality
i2c_check_functionality
client->adapter
client
client
adapter
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
I2C_FUNC_SMBUS_WRITE_BYTE_DATA
{			use_smbus_write = I2C_SMBUS_BYTE_DATA;			chip.page_size = 1;		}
use_smbus_write = I2C_SMBUS_BYTE_DATA;
use_smbus_write = I2C_SMBUS_BYTE_DATA
use_smbus_write
use_smbus_write
I2C_SMBUS_BYTE_DATA
I2C_SMBUS_BYTE_DATA
chip.page_size = 1;
chip.page_size = 1
chip.page_size
chip
chip
page_size
1
if (chip.flags & AT24_FLAG_TAKE8ADDR)		num_addresses = 8;	else		num_addresses =	DIV_ROUND_UP(chip.byte_len,			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256);
chip.flags & AT24_FLAG_TAKE8ADDR
chip.flags
chip
chip
flags
AT24_FLAG_TAKE8ADDR
AT24_FLAG_TAKE8ADDR
num_addresses = 8;
num_addresses = 8
num_addresses
num_addresses
8
num_addresses =	DIV_ROUND_UP(chip.byte_len,			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256);
num_addresses =	DIV_ROUND_UP(chip.byte_len,			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256)
num_addresses
num_addresses
DIV_ROUND_UP(chip.byte_len,			(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256)
DIV_ROUND_UP
DIV_ROUND_UP
chip.byte_len
chip
chip
byte_len
(chip.flags & AT24_FLAG_ADDR16) ? 65536 : 256
(chip.flags & AT24_FLAG_ADDR16)
chip.flags & AT24_FLAG_ADDR16
chip.flags
chip
chip
flags
AT24_FLAG_ADDR16
AT24_FLAG_ADDR16
65536
256
at24 = devm_kzalloc(&client->dev, sizeof(struct at24_data) +		num_addresses * sizeof(struct i2c_client *), GFP_KERNEL);
at24 = devm_kzalloc(&client->dev, sizeof(struct at24_data) +		num_addresses * sizeof(struct i2c_client *), GFP_KERNEL)
at24
at24
devm_kzalloc(&client->dev, sizeof(struct at24_data) +		num_addresses * sizeof(struct i2c_client *), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&client->dev
client->dev
client
client
dev
sizeof(struct at24_data) +		num_addresses * sizeof(struct i2c_client *)
sizeof(struct at24_data)
struct at24_data
struct at24_data
at24_data

num_addresses * sizeof(struct i2c_client *)
num_addresses
num_addresses
sizeof(struct i2c_client *)
struct i2c_client *
struct i2c_client
i2c_client
*
*
GFP_KERNEL
GFP_KERNEL
if (!at24)		return -ENOMEM;
!at24
at24
at24
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
mutex_init(&at24->lock);
mutex_init(&at24->lock)
mutex_init
mutex_init
&at24->lock
at24->lock
at24
at24
lock
at24->use_smbus = use_smbus;
at24->use_smbus = use_smbus
at24->use_smbus
at24
at24
use_smbus
use_smbus
use_smbus
at24->use_smbus_write = use_smbus_write;
at24->use_smbus_write = use_smbus_write
at24->use_smbus_write
at24
at24
use_smbus_write
use_smbus_write
use_smbus_write
at24->chip = chip;
at24->chip = chip
at24->chip
at24
at24
chip
chip
chip
at24->num_addresses = num_addresses;
at24->num_addresses = num_addresses
at24->num_addresses
at24
at24
num_addresses
num_addresses
num_addresses
if ((chip.flags & AT24_FLAG_SERIAL) && (chip.flags & AT24_FLAG_MAC)) {		dev_err(&client->dev,			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.");		return -EINVAL;	}
(chip.flags & AT24_FLAG_SERIAL) && (chip.flags & AT24_FLAG_MAC)
(chip.flags & AT24_FLAG_SERIAL)
chip.flags & AT24_FLAG_SERIAL
chip.flags
chip
chip
flags
AT24_FLAG_SERIAL
AT24_FLAG_SERIAL
(chip.flags & AT24_FLAG_MAC)
chip.flags & AT24_FLAG_MAC
chip.flags
chip
chip
flags
AT24_FLAG_MAC
AT24_FLAG_MAC
{		dev_err(&client->dev,			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.");		return -EINVAL;	}
dev_err(&client->dev,			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.");
dev_err(&client->dev,			"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.")
dev_err
dev_err
&client->dev
client->dev
client
client
dev
"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC."
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (chip.flags & AT24_FLAG_SERIAL) {		at24->read_func = at24_eeprom_read_serial;	} else if (chip.flags & AT24_FLAG_MAC) {		at24->read_func = at24_eeprom_read_mac;	} else {		at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c;	}
chip.flags & AT24_FLAG_SERIAL
chip.flags
chip
chip
flags
AT24_FLAG_SERIAL
AT24_FLAG_SERIAL
{		at24->read_func = at24_eeprom_read_serial;	}
at24->read_func = at24_eeprom_read_serial;
at24->read_func = at24_eeprom_read_serial
at24->read_func
at24
at24
read_func
at24_eeprom_read_serial
at24_eeprom_read_serial
if (chip.flags & AT24_FLAG_MAC) {		at24->read_func = at24_eeprom_read_mac;	} else {		at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c;	}
chip.flags & AT24_FLAG_MAC
chip.flags
chip
chip
flags
AT24_FLAG_MAC
AT24_FLAG_MAC
{		at24->read_func = at24_eeprom_read_mac;	}
at24->read_func = at24_eeprom_read_mac;
at24->read_func = at24_eeprom_read_mac
at24->read_func
at24
at24
read_func
at24_eeprom_read_mac
at24_eeprom_read_mac
{		at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c;	}
at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c;
at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c
at24->read_func
at24
at24
read_func
at24->use_smbus ? at24_eeprom_read_smbus						  : at24_eeprom_read_i2c
at24->use_smbus
at24
at24
use_smbus
at24_eeprom_read_smbus
at24_eeprom_read_smbus
at24_eeprom_read_i2c
at24_eeprom_read_i2c
if (at24->use_smbus) {		if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)			at24->write_func = at24_eeprom_write_smbus_block;		else			at24->write_func = at24_eeprom_write_smbus_byte;	} else {		at24->write_func = at24_eeprom_write_i2c;	}
at24->use_smbus
at24
at24
use_smbus
{		if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)			at24->write_func = at24_eeprom_write_smbus_block;		else			at24->write_func = at24_eeprom_write_smbus_byte;	}
if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)			at24->write_func = at24_eeprom_write_smbus_block;		else			at24->write_func = at24_eeprom_write_smbus_byte;
at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA
at24->use_smbus_write
at24
at24
use_smbus_write
I2C_SMBUS_I2C_BLOCK_DATA
I2C_SMBUS_I2C_BLOCK_DATA
at24->write_func = at24_eeprom_write_smbus_block;
at24->write_func = at24_eeprom_write_smbus_block
at24->write_func
at24
at24
write_func
at24_eeprom_write_smbus_block
at24_eeprom_write_smbus_block
at24->write_func = at24_eeprom_write_smbus_byte;
at24->write_func = at24_eeprom_write_smbus_byte
at24->write_func
at24
at24
write_func
at24_eeprom_write_smbus_byte
at24_eeprom_write_smbus_byte
{		at24->write_func = at24_eeprom_write_i2c;	}
at24->write_func = at24_eeprom_write_i2c;
at24->write_func = at24_eeprom_write_i2c
at24->write_func
at24
at24
write_func
at24_eeprom_write_i2c
at24_eeprom_write_i2c
writable = !(chip.flags & AT24_FLAG_READONLY);
writable = !(chip.flags & AT24_FLAG_READONLY)
writable
writable
!(chip.flags & AT24_FLAG_READONLY)
(chip.flags & AT24_FLAG_READONLY)
chip.flags & AT24_FLAG_READONLY
chip.flags
chip
chip
flags
AT24_FLAG_READONLY
AT24_FLAG_READONLY
if (writable) {		if (!use_smbus || use_smbus_write) {			unsigned write_max = chip.page_size;			if (write_max > io_limit)				write_max = io_limit;			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;			at24->write_max = write_max;			/* buffer (data + address at the beginning) */			at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);			if (!at24->writebuf)				return -ENOMEM;		} else {			dev_warn(&client->dev,				"cannot write due to controller restrictions.");		}	}
writable
writable
{		if (!use_smbus || use_smbus_write) {			unsigned write_max = chip.page_size;			if (write_max > io_limit)				write_max = io_limit;			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;			at24->write_max = write_max;			/* buffer (data + address at the beginning) */			at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);			if (!at24->writebuf)				return -ENOMEM;		} else {			dev_warn(&client->dev,				"cannot write due to controller restrictions.");		}	}
if (!use_smbus || use_smbus_write) {			unsigned write_max = chip.page_size;			if (write_max > io_limit)				write_max = io_limit;			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;			at24->write_max = write_max;			/* buffer (data + address at the beginning) */			at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);			if (!at24->writebuf)				return -ENOMEM;		} else {			dev_warn(&client->dev,				"cannot write due to controller restrictions.");		}
!use_smbus || use_smbus_write
!use_smbus
use_smbus
use_smbus
use_smbus_write
use_smbus_write
{			unsigned write_max = chip.page_size;			if (write_max > io_limit)				write_max = io_limit;			if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;			at24->write_max = write_max;			/* buffer (data + address at the beginning) */			at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);			if (!at24->writebuf)				return -ENOMEM;		}
unsigned write_max = chip.page_size;
unsigned write_max = chip.page_size;
unsigned
write_max = chip.page_size
write_max
= chip.page_size
chip.page_size
chip
chip
page_size
if (write_max > io_limit)				write_max = io_limit;
write_max > io_limit
write_max
write_max
io_limit
io_limit
write_max = io_limit;
write_max = io_limit
write_max
write_max
io_limit
io_limit
if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)				write_max = I2C_SMBUS_BLOCK_MAX;
use_smbus && write_max > I2C_SMBUS_BLOCK_MAX
use_smbus
use_smbus
write_max > I2C_SMBUS_BLOCK_MAX
write_max
write_max
I2C_SMBUS_BLOCK_MAX
I2C_SMBUS_BLOCK_MAX
write_max = I2C_SMBUS_BLOCK_MAX;
write_max = I2C_SMBUS_BLOCK_MAX
write_max
write_max
I2C_SMBUS_BLOCK_MAX
I2C_SMBUS_BLOCK_MAX
at24->write_max = write_max;
at24->write_max = write_max
at24->write_max
at24
at24
write_max
write_max
write_max
at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL);
at24->writebuf = devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL)
at24->writebuf
at24
at24
writebuf
devm_kzalloc(&client->dev,				write_max + 2, GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&client->dev
client->dev
client
client
dev
write_max + 2
write_max
write_max
2
GFP_KERNEL
GFP_KERNEL
if (!at24->writebuf)				return -ENOMEM;
!at24->writebuf
at24->writebuf
at24
at24
writebuf
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
{			dev_warn(&client->dev,				"cannot write due to controller restrictions.");		}
dev_warn(&client->dev,				"cannot write due to controller restrictions.");
dev_warn(&client->dev,				"cannot write due to controller restrictions.")
dev_warn
dev_warn
&client->dev
client->dev
client
client
dev
"cannot write due to controller restrictions."
at24->client[0] = client;
at24->client[0] = client
at24->client[0]
at24->client
at24
at24
client
0
client
client
for (i = 1; i < num_addresses; i++) {		at24->client[i] = i2c_new_dummy(client->adapter,					client->addr + i);		if (!at24->client[i]) {			dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);			err = -EADDRINUSE;			goto err_clients;		}	}
i = 1;
i = 1
i
i
1
i < num_addresses
i
i
num_addresses
num_addresses
i++
i
i
{		at24->client[i] = i2c_new_dummy(client->adapter,					client->addr + i);		if (!at24->client[i]) {			dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);			err = -EADDRINUSE;			goto err_clients;		}	}
at24->client[i] = i2c_new_dummy(client->adapter,					client->addr + i);
at24->client[i] = i2c_new_dummy(client->adapter,					client->addr + i)
at24->client[i]
at24->client
at24
at24
client
i
i
i2c_new_dummy(client->adapter,					client->addr + i)
i2c_new_dummy
i2c_new_dummy
client->adapter
client
client
adapter
client->addr + i
client->addr
client
client
addr
i
i
if (!at24->client[i]) {			dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);			err = -EADDRINUSE;			goto err_clients;		}
!at24->client[i]
at24->client[i]
at24->client
at24
at24
client
i
i
{			dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);			err = -EADDRINUSE;			goto err_clients;		}
dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i);
dev_err(&client->dev, "address 0x%02x unavailable\n",					client->addr + i)
dev_err
dev_err
&client->dev
client->dev
client
client
dev
"address 0x%02x unavailable\n"
client->addr + i
client->addr
client
client
addr
i
i
err = -EADDRINUSE;
err = -EADDRINUSE
err
err
-EADDRINUSE
EADDRINUSE
EADDRINUSE
goto err_clients;
err_clients
i2c_set_clientdata(client, at24);
i2c_set_clientdata(client, at24)
i2c_set_clientdata
i2c_set_clientdata
client
client
at24
at24
err = at24_read(at24, 0, &test_byte, 1);
err = at24_read(at24, 0, &test_byte, 1)
err
err
at24_read(at24, 0, &test_byte, 1)
at24_read
at24_read
at24
at24
0
&test_byte
test_byte
test_byte
1
if (err) {		err = -ENODEV;		goto err_clients;	}
err
err
{		err = -ENODEV;		goto err_clients;	}
err = -ENODEV;
err = -ENODEV
err
err
-ENODEV
ENODEV
ENODEV
goto err_clients;
err_clients
at24->nvmem_config.name = dev_name(&client->dev);
at24->nvmem_config.name = dev_name(&client->dev)
at24->nvmem_config.name
at24->nvmem_config
at24
at24
nvmem_config
name
dev_name(&client->dev)
dev_name
dev_name
&client->dev
client->dev
client
client
dev
at24->nvmem_config.dev = &client->dev;
at24->nvmem_config.dev = &client->dev
at24->nvmem_config.dev
at24->nvmem_config
at24
at24
nvmem_config
dev
&client->dev
client->dev
client
client
dev
at24->nvmem_config.read_only = !writable;
at24->nvmem_config.read_only = !writable
at24->nvmem_config.read_only
at24->nvmem_config
at24
at24
nvmem_config
read_only
!writable
writable
writable
at24->nvmem_config.root_only = true;
at24->nvmem_config.root_only = true
at24->nvmem_config.root_only
at24->nvmem_config
at24
at24
nvmem_config
root_only
true
at24->nvmem_config.owner = THIS_MODULE;
at24->nvmem_config.owner = THIS_MODULE
at24->nvmem_config.owner
at24->nvmem_config
at24
at24
nvmem_config
owner
THIS_MODULE
THIS_MODULE
at24->nvmem_config.compat = true;
at24->nvmem_config.compat = true
at24->nvmem_config.compat
at24->nvmem_config
at24
at24
nvmem_config
compat
true
at24->nvmem_config.base_dev = &client->dev;
at24->nvmem_config.base_dev = &client->dev
at24->nvmem_config.base_dev
at24->nvmem_config
at24
at24
nvmem_config
base_dev
&client->dev
client->dev
client
client
dev
at24->nvmem_config.reg_read = at24_read;
at24->nvmem_config.reg_read = at24_read
at24->nvmem_config.reg_read
at24->nvmem_config
at24
at24
nvmem_config
reg_read
at24_read
at24_read
at24->nvmem_config.reg_write = at24_write;
at24->nvmem_config.reg_write = at24_write
at24->nvmem_config.reg_write
at24->nvmem_config
at24
at24
nvmem_config
reg_write
at24_write
at24_write
at24->nvmem_config.priv = at24;
at24->nvmem_config.priv = at24
at24->nvmem_config.priv
at24->nvmem_config
at24
at24
nvmem_config
priv
at24
at24
at24->nvmem_config.stride = 1;
at24->nvmem_config.stride = 1
at24->nvmem_config.stride
at24->nvmem_config
at24
at24
nvmem_config
stride
1
at24->nvmem_config.word_size = 1;
at24->nvmem_config.word_size = 1
at24->nvmem_config.word_size
at24->nvmem_config
at24
at24
nvmem_config
word_size
1
at24->nvmem_config.size = chip.byte_len;
at24->nvmem_config.size = chip.byte_len
at24->nvmem_config.size
at24->nvmem_config
at24
at24
nvmem_config
size
chip.byte_len
chip
chip
byte_len
at24->nvmem = nvmem_register(&at24->nvmem_config);
at24->nvmem = nvmem_register(&at24->nvmem_config)
at24->nvmem
at24
at24
nvmem
nvmem_register(&at24->nvmem_config)
nvmem_register
nvmem_register
&at24->nvmem_config
at24->nvmem_config
at24
at24
nvmem_config
if (IS_ERR(at24->nvmem)) {		err = PTR_ERR(at24->nvmem);		goto err_clients;	}
IS_ERR(at24->nvmem)
IS_ERR
IS_ERR
at24->nvmem
at24
at24
nvmem
{		err = PTR_ERR(at24->nvmem);		goto err_clients;	}
err = PTR_ERR(at24->nvmem);
err = PTR_ERR(at24->nvmem)
err
err
PTR_ERR(at24->nvmem)
PTR_ERR
PTR_ERR
at24->nvmem
at24
at24
nvmem
goto err_clients;
err_clients
dev_info(&client->dev, "%u byte %s EEPROM, %s, %u bytes/write\n",		chip.byte_len, client->name,		writable ? "writable" : "read-only", at24->write_max);
dev_info(&client->dev, "%u byte %s EEPROM, %s, %u bytes/write\n",		chip.byte_len, client->name,		writable ? "writable" : "read-only", at24->write_max)
dev_info
dev_info
&client->dev
client->dev
client
client
dev
"%u byte %s EEPROM, %s, %u bytes/write\n"
chip.byte_len
chip
chip
byte_len
client->name
client
client
name
writable ? "writable" : "read-only"
writable
writable
"writable"
"read-only"
at24->write_max
at24
at24
write_max
if (use_smbus == I2C_SMBUS_WORD_DATA ||	    use_smbus == I2C_SMBUS_BYTE_DATA) {		dev_notice(&client->dev, "Falling back to %s reads, "			   "performance will suffer\n", use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte");	}
use_smbus == I2C_SMBUS_WORD_DATA ||	    use_smbus == I2C_SMBUS_BYTE_DATA
use_smbus == I2C_SMBUS_WORD_DATA
use_smbus
use_smbus
I2C_SMBUS_WORD_DATA
I2C_SMBUS_WORD_DATA
use_smbus == I2C_SMBUS_BYTE_DATA
use_smbus
use_smbus
I2C_SMBUS_BYTE_DATA
I2C_SMBUS_BYTE_DATA
{		dev_notice(&client->dev, "Falling back to %s reads, "			   "performance will suffer\n", use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte");	}
dev_notice(&client->dev, "Falling back to %s reads, "			   "performance will suffer\n", use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte");
dev_notice(&client->dev, "Falling back to %s reads, "			   "performance will suffer\n", use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte")
dev_notice
dev_notice
&client->dev
client->dev
client
client
dev
"Falling back to %s reads, "			   "performance will suffer\n"
use_smbus ==			   I2C_SMBUS_WORD_DATA ? "word" : "byte"
use_smbus ==			   I2C_SMBUS_WORD_DATA
use_smbus
use_smbus
I2C_SMBUS_WORD_DATA
I2C_SMBUS_WORD_DATA
"word"
"byte"
if (chip.setup)		chip.setup(at24->nvmem, chip.context);
chip.setup
chip
chip
setup
chip.setup(at24->nvmem, chip.context);
chip.setup(at24->nvmem, chip.context)
chip.setup
chip
chip
setup
at24->nvmem
at24
at24
nvmem
chip.context
chip
chip
context
return 0;
0
err_clients:	for (i = 1; i < num_addresses; i++)		if (at24->client[i])			i2c_unregister_device(at24->client[i]);
err_clients
for (i = 1; i < num_addresses; i++)		if (at24->client[i])			i2c_unregister_device(at24->client[i]);
i = 1;
i = 1
i
i
1
i < num_addresses
i
i
num_addresses
num_addresses
i++
i
i
if (at24->client[i])			i2c_unregister_device(at24->client[i]);
at24->client[i]
at24->client
at24
at24
client
i
i
i2c_unregister_device(at24->client[i]);
i2c_unregister_device(at24->client[i])
i2c_unregister_device
i2c_unregister_device
at24->client[i]
at24->client
at24
at24
client
i
i
return err;
err
err
-----joern-----
(496,265,0)
(671,538,0)
(547,514,0)
(533,498,0)
(34,13,0)
(519,78,0)
(617,575,0)
(9,22,0)
(669,608,0)
(575,355,0)
(314,86,0)
(28,597,0)
(34,372,0)
(231,597,0)
(503,498,0)
(332,321,0)
(103,621,0)
(514,243,0)
(438,734,0)
(6,58,0)
(480,147,0)
(566,100,0)
(249,14,0)
(723,321,0)
(595,597,0)
(723,639,0)
(594,551,0)
(21,162,0)
(196,11,0)
(145,179,0)
(300,698,0)
(95,356,0)
(654,489,0)
(260,582,0)
(334,179,0)
(299,597,0)
(184,618,0)
(310,179,0)
(158,323,0)
(452,112,0)
(137,568,0)
(532,179,0)
(191,498,0)
(447,86,0)
(205,503,0)
(89,417,0)
(221,297,0)
(226,293,0)
(365,217,0)
(466,716,0)
(577,597,0)
(455,58,0)
(34,58,0)
(668,682,0)
(265,597,0)
(655,503,0)
(166,179,0)
(252,241,0)
(700,634,0)
(692,429,0)
(303,185,0)
(297,169,0)
(709,202,0)
(158,420,0)
(508,396,0)
(503,655,0)
(67,516,0)
(443,140,0)
(274,603,0)
(259,216,0)
(458,363,0)
(300,551,0)
(507,199,0)
(612,498,0)
(117,297,0)
(44,647,0)
(60,715,0)
(43,202,0)
(420,18,0)
(111,58,0)
(329,179,0)
(391,353,0)
(101,559,0)
(146,147,0)
(412,723,0)
(19,498,0)
(735,179,0)
(315,441,0)
(427,6,0)
(413,230,0)
(216,498,0)
(78,48,0)
(647,79,0)
(470,475,0)
(116,502,0)
(581,140,0)
(551,521,0)
(127,628,0)
(657,374,0)
(426,645,0)
(610,472,0)
(223,327,0)
(354,501,0)
(504,191,0)
(293,321,0)
(429,244,0)
(632,81,0)
(174,107,0)
(433,568,0)
(57,37,0)
(174,58,0)
(297,179,0)
(434,105,0)
(444,597,0)
(110,636,0)
(56,160,0)
(300,610,0)
(484,490,0)
(319,597,0)
(142,193,0)
(425,416,0)
(422,597,0)
(161,580,0)
(483,704,0)
(107,267,0)
(455,107,0)
(281,58,0)
(183,143,0)
(207,143,0)
(300,86,0)
(29,216,0)
(77,267,0)
(399,467,0)
(120,536,0)
(193,657,0)
(90,651,0)
(326,158,0)
(12,417,0)
(20,632,0)
(660,321,0)
(653,455,0)
(585,453,0)
(593,398,0)
(58,281,0)
(380,177,0)
(700,612,0)
(177,597,0)
(569,229,0)
(698,236,0)
(465,597,0)
(350,493,0)
(37,321,0)
(36,58,0)
(63,597,0)
(466,332,0)
(104,166,0)
(98,720,0)
(327,498,0)
(409,608,0)
(73,364,0)
(301,498,0)
(256,392,0)
(429,458,0)
(91,656,0)
(102,483,0)
(300,544,0)
(196,4,0)
(44,629,0)
(429,243,0)
(553,408,0)
(429,48,0)
(519,484,0)
(622,724,0)
(360,498,0)
(307,107,0)
(507,119,0)
(126,196,0)
(300,9,0)
(331,0,0)
(163,55,0)
(651,213,0)
(329,46,0)
(638,231,0)
(421,686,0)
(179,597,0)
(682,707,0)
(22,179,0)
(630,160,0)
(519,425,0)
(638,179,0)
(415,79,0)
(626,236,0)
(519,115,0)
(171,289,0)
(367,174,0)
(705,321,0)
(435,537,0)
(605,437,0)
(228,307,0)
(390,493,0)
(346,654,0)
(365,171,0)
(629,588,0)
(181,289,0)
(187,597,0)
(462,685,0)
(472,237,0)
(4,196,0)
(115,110,0)
(506,685,0)
(373,656,0)
(509,660,0)
(33,662,0)
(351,546,0)
(300,359,0)
(264,610,0)
(111,321,0)
(524,662,0)
(574,363,0)
(349,173,0)
(109,230,0)
(650,203,0)
(210,222,0)
(37,58,0)
(574,329,0)
(250,705,0)
(429,147,0)
(300,398,0)
(676,475,0)
(302,79,0)
(343,608,0)
(606,568,0)
(62,391,0)
(710,79,0)
(730,113,0)
(564,179,0)
(467,11,0)
(608,77,0)
(519,146,0)
(674,100,0)
(519,300,0)
(193,422,0)
(46,597,0)
(541,236,0)
(723,58,0)
(338,587,0)
(429,140,0)
(552,242,0)
(596,599,0)
(241,30,0)
(119,507,0)
(55,498,0)
(598,79,0)
(53,76,0)
(512,151,0)
(407,327,0)
(22,9,0)
(235,461,0)
(738,639,0)
(504,73,0)
(578,580,0)
(715,60,0)
(628,597,0)
(323,107,0)
(340,618,0)
(601,422,0)
(136,372,0)
(429,551,0)
(461,179,0)
(159,597,0)
(513,679,0)
(296,179,0)
(193,420,0)
(206,360,0)
(242,552,0)
(408,58,0)
(484,451,0)
(647,44,0)
(197,597,0)
(331,724,0)
(365,223,0)
(238,458,0)
(370,296,0)
(331,255,0)
(1,422,0)
(300,244,0)
(539,321,0)
(7,362,0)
(492,455,0)
(429,398,0)
(209,566,0)
(571,107,0)
(323,158,0)
(284,179,0)
(373,166,0)
(169,597,0)
(275,267,0)
(419,516,0)
(300,730,0)
(175,498,0)
(482,715,0)
(125,597,0)
(76,179,0)
(52,533,0)
(429,128,0)
(253,597,0)
(655,202,0)
(355,321,0)
(705,58,0)
(477,596,0)
(130,693,0)
(450,451,0)
(27,694,0)
(268,645,0)
(704,653,0)
(17,716,0)
(311,81,0)
(293,58,0)
(114,9,0)
(615,145,0)
(560,181,0)
(527,498,0)
(653,704,0)
(152,65,0)
(273,528,0)
(74,117,0)
(600,425,0)
(515,332,0)
(273,40,0)
(209,231,0)
(602,139,0)
(376,656,0)
(528,273,0)
(716,466,0)
(285,199,0)
(390,105,0)
(44,177,0)
(473,656,0)
(670,22,0)
(288,146,0)
(213,685,0)
(239,124,0)
(88,76,0)
(71,360,0)
(592,597,0)
(430,414,0)
(739,179,0)
(393,649,0)
(548,169,0)
(486,189,0)
(179,693,0)
(408,553,0)
(135,119,0)
(165,152,0)
(587,597,0)
(263,13,0)
(628,177,0)
(337,255,0)
(599,395,0)
(211,570,0)
(406,656,0)
(667,8,0)
(469,255,0)
(318,159,0)
(268,280,0)
(148,475,0)
(334,91,0)
(146,551,0)
(289,34,0)
(32,453,0)
(96,503,0)
(580,199,0)
(616,29,0)
(401,699,0)
(510,12,0)
(166,373,0)
(630,289,0)
(525,660,0)
(619,3,0)
(215,116,0)
(31,177,0)
(211,555,0)
(716,653,0)
(612,700,0)
(141,344,0)
(310,597,0)
(628,230,0)
(576,458,0)
(300,699,0)
(464,128,0)
(441,58,0)
(484,128,0)
(289,143,0)
(721,37,0)
(307,58,0)
(563,284,0)
(484,140,0)
(658,739,0)
(538,199,0)
(99,730,0)
(232,296,0)
(300,417,0)
(83,7,0)
(579,123,0)
(452,498,0)
(378,152,0)
(146,140,0)
(395,675,0)
(78,140,0)
(682,356,0)
(647,356,0)
(458,179,0)
(217,365,0)
(138,597,0)
(224,6,0)
(484,398,0)
(292,597,0)
(403,179,0)
(152,165,0)
(300,243,0)
(200,597,0)
(476,214,0)
(361,267,0)
(116,498,0)
(60,679,0)
(223,365,0)
(637,181,0)
(332,466,0)
(70,614,0)
(78,243,0)
(38,158,0)
(316,638,0)
(171,160,0)
(384,175,0)
(332,58,0)
(169,297,0)
(158,422,0)
(134,358,0)
(321,355,0)
(188,46,0)
(15,293,0)
(583,280,0)
(64,716,0)
(309,735,0)
(304,527,0)
(484,461,0)
(172,686,0)
(266,100,0)
(185,498,0)
(0,331,0)
(706,739,0)
(105,390,0)
(185,324,0)
(45,691,0)
(355,193,0)
(244,179,0)
(92,193,0)
(396,143,0)
(213,651,0)
(390,693,0)
(396,123,0)
(652,571,0)
(572,301,0)
(330,408,0)
(699,200,0)
(514,147,0)
(0,542,0)
(483,686,0)
(632,179,0)
(193,267,0)
(155,364,0)
(455,320,0)
(191,504,0)
(345,472,0)
(199,571,0)
(519,325,0)
(562,539,0)
(484,48,0)
(324,614,0)
(381,574,0)
(139,367,0)
(429,222,0)
(414,197,0)
(634,700,0)
(374,43,0)
(533,189,0)
(436,638,0)
(502,116,0)
(514,551,0)
(129,527,0)
(300,162,0)
(500,26,0)
(720,597,0)
(484,65,0)
(44,230,0)
(241,735,0)
(566,209,0)
(613,597,0)
(439,544,0)
(602,179,0)
(604,631,0)
(666,665,0)
(363,573,0)
(402,18,0)
(168,455,0)
(153,243,0)
(110,316,0)
(724,331,0)
(199,649,0)
(229,179,0)
(599,596,0)
(437,2,0)
(12,179,0)
(453,231,0)
(46,435,0)
(424,373,0)
(385,452,0)
(59,435,0)
(425,140,0)
(296,232,0)
(145,70,0)
(146,644,0)
(554,334,0)
(360,496,0)
(418,113,0)
(516,686,0)
(253,179,0)
(425,147,0)
(608,58,0)
(382,528,0)
(446,451,0)
(475,498,0)
(182,262,0)
(392,229,0)
(230,49,0)
(639,723,0)
(79,389,0)
(705,54,0)
(415,435,0)
(596,498,0)
(478,143,0)
(703,211,0)
(48,321,0)
(688,307,0)
(684,70,0)
(420,312,0)
(257,597,0)
(97,34,0)
(146,243,0)
(280,597,0)
(549,222,0)
(505,179,0)
(245,415,0)
(357,172,0)
(91,334,0)
(540,618,0)
(158,657,0)
(105,704,0)
(13,267,0)
(174,367,0)
(158,38,0)
(171,123,0)
(642,495,0)
(300,140,0)
(516,704,0)
(565,314,0)
(442,302,0)
(247,359,0)
(392,265,0)
(258,41,0)
(714,724,0)
(75,55,0)
(261,143,0)
(342,329,0)
(489,131,0)
(429,610,0)
(112,734,0)
(516,255,0)
(375,166,0)
(582,532,0)
(86,314,0)
(484,243,0)
(171,365,0)
(675,415,0)
(400,665,0)
(300,505,0)
(276,532,0)
(678,489,0)
(694,217,0)
(448,356,0)
(529,111,0)
(631,179,0)
(313,356,0)
(493,350,0)
(108,558,0)
(649,179,0)
(383,542,0)
(519,514,0)
(645,179,0)
(471,137,0)
(634,85,0)
(195,200,0)
(734,438,0)
(373,73,0)
(440,564,0)
(339,518,0)
(18,420,0)
(234,735,0)
(468,19,0)
(128,179,0)
(523,730,0)
(490,628,0)
(694,179,0)
(546,231,0)
(494,374,0)
(274,13,0)
(395,599,0)
(156,128,0)
(485,246,0)
(317,314,0)
(739,640,0)
(557,297,0)
(628,629,0)
(410,645,0)
(46,356,0)
(488,408,0)
(254,373,0)
(355,575,0)
(425,551,0)
(242,105,0)
(489,597,0)
(505,262,0)
(429,451,0)
(243,58,0)
(641,505,0)
(535,597,0)
(649,396,0)
(367,597,0)
(682,435,0)
(645,268,0)
(5,539,0)
(520,337,0)
(327,223,0)
(608,343,0)
(481,54,0)
(202,655,0)
(302,356,0)
(726,723,0)
(736,630,0)
(460,191,0)
(100,566,0)
(715,179,0)
(347,682,0)
(453,343,0)
(675,395,0)
(625,44,0)
(131,151,0)
(200,58,0)
(54,705,0)
(374,657,0)
(352,636,0)
(202,43,0)
(172,656,0)
(282,631,0)
(386,172,0)
(379,171,0)
(582,292,0)
(725,253,0)
(448,79,0)
(199,507,0)
(558,518,0)
(543,698,0)
(253,498,0)
(425,451,0)
(308,551,0)
(589,23,0)
(527,165,0)
(137,471,0)
(146,451,0)
(46,437,0)
(302,707,0)
(495,111,0)
(536,179,0)
(504,337,0)
(291,48,0)
(518,203,0)
(448,437,0)
(170,403,0)
(448,435,0)
(220,332,0)
(405,544,0)
(212,4,0)
(300,490,0)
(35,597,0)
(603,680,0)
(648,597,0)
(280,498,0)
(78,398,0)
(178,329,0)
(731,676,0)
(451,77,0)
(699,179,0)
(528,498,0)
(128,46,0)
(70,145,0)
(244,391,0)
(553,666,0)
(428,18,0)
(454,23,0)
(300,60,0)
(664,629,0)
(51,19,0)
(638,316,0)
(337,504,0)
(479,302,0)
(685,213,0)
(300,268,0)
(415,675,0)
(711,435,0)
(41,498,0)
(694,27,0)
(555,211,0)
(112,452,0)
(632,628,0)
(279,40,0)
(174,320,0)
(7,41,0)
(457,448,0)
(222,217,0)
(300,232,0)
(115,597,0)
(526,160,0)
(456,694,0)
(536,338,0)
(643,699,0)
(302,437,0)
(607,597,0)
(740,185,0)
(300,139,0)
(707,302,0)
(348,300,0)
(336,441,0)
(68,580,0)
(0,340,0)
(24,77,0)
(682,79,0)
(672,403,0)
(4,321,0)
(647,435,0)
(695,597,0)
(483,597,0)
(227,197,0)
(623,602,0)
(660,665,0)
(396,289,0)
(522,600,0)
(201,288,0)
(293,151,0)
(162,403,0)
(624,640,0)
(567,327,0)
(139,602,0)
(149,538,0)
(397,145,0)
(286,597,0)
(432,686,0)
(496,360,0)
(229,392,0)
(570,211,0)
(517,634,0)
(689,632,0)
(539,58,0)
(429,490,0)
(531,597,0)
(356,597,0)
(677,246,0)
(10,570,0)
(609,297,0)
(651,416,0)
(518,558,0)
(614,597,0)
(519,429,0)
(647,437,0)
(679,597,0)
(362,7,0)
(30,597,0)
(265,496,0)
(189,533,0)
(396,160,0)
(218,597,0)
(46,79,0)
(151,131,0)
(487,174,0)
(43,501,0)
(300,597,0)
(580,489,0)
(222,179,0)
(666,553,0)
(690,355,0)
(84,359,0)
(499,612,0)
(732,629,0)
(584,646,0)
(467,539,0)
(270,287,0)
(40,273,0)
(78,551,0)
(614,324,0)
(544,396,0)
(404,243,0)
(300,48,0)
(459,597,0)
(490,179,0)
(278,334,0)
(274,58,0)
(417,12,0)
(653,716,0)
(39,647,0)
(329,574,0)
(105,242,0)
(373,254,0)
(662,337,0)
(530,301,0)
(4,58,0)
(93,60,0)
(559,657,0)
(236,698,0)
(118,654,0)
(429,461,0)
(199,538,0)
(232,255,0)
(344,301,0)
(37,358,0)
(47,12,0)
(346,597,0)
(111,495,0)
(369,376,0)
(693,179,0)
(300,70,0)
(417,595,0)
(73,504,0)
(398,58,0)
(277,441,0)
(635,649,0)
(243,320,0)
(165,527,0)
(665,660,0)
(550,78,0)
(300,582,0)
(729,675,0)
(302,435,0)
(546,179,0)
(314,179,0)
(26,307,0)
(18,586,0)
(3,511,0)
(461,483,0)
(696,43,0)
(719,229,0)
(368,91,0)
(660,58,0)
(300,458,0)
(534,694,0)
(377,437,0)
(162,346,0)
(208,174,0)
(701,602,0)
(78,147,0)
(87,34,0)
(730,179,0)
(231,209,0)
(646,631,0)
(708,420,0)
(9,720,0)
(415,356,0)
(341,693,0)
(41,7,0)
(662,498,0)
(649,199,0)
(290,675,0)
(11,467,0)
(338,536,0)
(172,704,0)
(204,705,0)
(559,420,0)
(611,597,0)
(42,610,0)
(659,244,0)
(568,137,0)
(23,498,0)
(11,196,0)
(80,289,0)
(359,231,0)
(630,448,0)
(269,41,0)
(511,542,0)
(199,597,0)
(685,498,0)
(358,37,0)
(571,320,0)
(445,596,0)
(559,422,0)
(620,232,0)
(545,191,0)
(521,267,0)
(66,521,0)
(316,110,0)
(514,140,0)
(146,48,0)
(532,582,0)
(349,55,0)
(722,115,0)
(211,73,0)
(122,466,0)
(300,646,0)
(216,29,0)
(147,107,0)
(610,179,0)
(448,630,0)
(251,292,0)
(484,699,0)
(25,502,0)
(363,574,0)
(737,255,0)
(697,490,0)
(734,112,0)
(366,571,0)
(571,199,0)
(192,274,0)
(514,48,0)
(115,518,0)
(300,461,0)
(665,666,0)
(217,143,0)
(707,682,0)
(423,532,0)
(194,511,0)
(673,547,0)
(511,3,0)
(23,130,0)
(663,119,0)
(190,48,0)
(297,117,0)
(300,241,0)
(603,274,0)
(199,580,0)
(724,498,0)
(618,498,0)
(618,340,0)
(484,147,0)
(175,214,0)
(55,349,0)
(595,173,0)
(691,484,0)
(50,597,0)
(167,553,0)
(154,461,0)
(408,107,0)
(180,546,0)
(164,365,0)
(324,185,0)
(683,692,0)
(335,112,0)
(571,58,0)
(186,452,0)
(453,179,0)
(702,630,0)
(219,612,0)
(81,632,0)
(631,646,0)
(646,159,0)
(157,570,0)
(414,284,0)
(415,437,0)
(16,253,0)
(216,267,0)
(305,471,0)
(546,351,0)
(94,246,0)
(733,469,0)
(654,346,0)
(431,123,0)
(14,597,0)
(429,544,0)
(105,686,0)
(463,395,0)
(394,22,0)
(272,110,0)
(86,14,0)
(491,415,0)
(333,715,0)
(140,13,0)
(176,147,0)
(591,597,0)
(300,451,0)
(568,498,0)
(570,179,0)
(132,501,0)
(425,48,0)
(119,498,0)
(497,550,0)
(240,657,0)
(232,73,0)
(121,179,0)
(633,398,0)
(281,734,0)
(19,8,0)
(429,730,0)
(130,23,0)
(69,30,0)
(449,274,0)
(284,414,0)
(150,597,0)
(321,267,0)
(455,653,0)
(680,603,0)
(82,111,0)
(337,662,0)
(493,390,0)
(173,595,0)
(734,281,0)
(372,588,0)
(211,255,0)
(556,331,0)
(698,310,0)
(300,392,0)
(300,414,0)
(300,222,0)
(712,171,0)
(198,704,0)
(283,546,0)
(113,233,0)
(294,374,0)
(544,179,0)
(539,467,0)
(587,338,0)
(298,139,0)
(359,179,0)
(328,574,0)
(133,0,0)
(300,128,0)
(300,147,0)
(693,390,0)
(124,325,0)
(411,597,0)
(295,310,0)
(398,372,0)
(682,437,0)
(214,175,0)
(484,551,0)
(590,505,0)
(34,289,0)
(131,489,0)
(387,320,0)
(717,490,0)
(727,533,0)
(475,676,0)
(340,0,0)
(429,739,0)
(301,344,0)
(474,296,0)
(687,4,0)
(300,739,0)
(735,241,0)
(322,536,0)
(441,315,0)
(681,268,0)
(58,271,0)
(151,293,0)
(561,284,0)
(236,179,0)
(72,175,0)
(429,699,0)
(693,130,0)
(100,179,0)
(395,718,0)
(8,19,0)
(78,451,0)
(106,597,0)
(713,116,0)
(248,638,0)
(343,453,0)
(429,505,0)
(307,26,0)
(61,597,0)
(388,255,0)
(26,500,0)
(107,323,0)
(538,498,0)
(173,349,0)
(441,13,0)
(728,528,0)
(225,244,0)
(115,511,0)
(514,451,0)
(403,162,0)
(306,38,0)
(343,453,1)
(115,110,1)
(307,228,1)
(227,414,1)
(162,403,1)
(0,331,1)
(221,548,1)
(4,321,1)
(253,179,1)
(188,128,1)
(462,506,1)
(455,58,1)
(208,487,1)
(367,174,1)
(34,97,1)
(519,146,1)
(513,60,1)
(345,610,1)
(34,13,1)
(414,284,1)
(253,498,1)
(519,78,1)
(410,27,1)
(413,109,1)
(730,523,1)
(671,571,1)
(25,116,1)
(609,221,1)
(12,179,1)
(62,244,1)
(167,408,1)
(126,4,1)
(429,451,1)
(676,475,1)
(551,594,1)
(365,223,1)
(310,295,1)
(544,405,1)
(570,179,1)
(166,179,1)
(409,669,1)
(276,423,1)
(602,179,1)
(658,706,1)
(493,130,1)
(175,498,1)
(374,494,1)
(255,388,1)
(119,135,1)
(504,191,1)
(42,264,1)
(429,147,1)
(119,498,1)
(448,79,1)
(533,498,1)
(561,563,1)
(439,123,1)
(78,147,1)
(278,554,1)
(472,345,1)
(599,596,1)
(216,29,1)
(601,1,1)
(692,683,1)
(239,559,1)
(429,140,1)
(426,410,1)
(123,431,1)
(277,500,1)
(164,171,1)
(352,110,1)
(694,217,1)
(694,179,1)
(682,435,1)
(525,680,1)
(578,538,1)
(177,31,1)
(101,420,1)
(329,179,1)
(140,443,1)
(362,7,1)
(84,367,1)
(182,505,1)
(133,340,1)
(260,532,1)
(419,255,1)
(105,704,1)
(430,284,1)
(76,53,1)
(23,498,1)
(229,569,1)
(396,160,1)
(254,373,1)
(646,584,1)
(186,385,1)
(165,527,1)
(571,107,1)
(484,128,1)
(57,11,1)
(359,179,1)
(515,220,1)
(348,343,1)
(122,332,1)
(585,32,1)
(401,643,1)
(197,227,1)
(379,223,1)
(443,581,1)
(290,415,1)
(437,377,1)
(11,467,1)
(526,181,1)
(484,140,1)
(262,182,1)
(418,730,1)
(316,638,1)
(216,498,1)
(632,628,1)
(232,296,1)
(473,650,1)
(645,179,1)
(694,456,1)
(450,446,1)
(555,211,1)
(428,708,1)
(429,610,1)
(693,130,1)
(647,356,1)
(196,4,1)
(337,255,1)
(153,404,1)
(466,122,1)
(739,179,1)
(420,18,1)
(377,605,1)
(115,722,1)
(518,558,1)
(173,349,1)
(190,193,1)
(486,533,1)
(96,205,1)
(506,315,1)
(626,197,1)
(405,439,1)
(300,48,1)
(166,104,1)
(562,5,1)
(174,107,1)
(148,502,1)
(144,489,1)
(327,498,1)
(451,450,1)
(110,316,1)
(734,112,1)
(453,231,1)
(320,387,1)
(630,160,1)
(664,732,1)
(514,243,1)
(91,334,1)
(539,58,1)
(163,417,1)
(189,533,1)
(479,199,1)
(574,381,1)
(274,58,1)
(738,723,1)
(484,699,1)
(629,664,1)
(681,645,1)
(293,58,1)
(502,116,1)
(641,81,1)
(429,551,1)
(117,74,1)
(18,586,1)
(425,48,1)
(634,517,1)
(300,392,1)
(580,161,1)
(88,363,1)
(396,123,1)
(158,422,1)
(284,179,1)
(329,178,1)
(735,309,1)
(242,434,1)
(192,449,1)
(402,428,1)
(717,697,1)
(347,668,1)
(82,529,1)
(638,179,1)
(461,235,1)
(75,163,1)
(571,652,1)
(115,518,1)
(387,243,1)
(300,417,1)
(274,192,1)
(195,699,1)
(663,351,1)
(725,516,1)
(337,520,1)
(559,422,1)
(702,736,1)
(285,507,1)
(705,204,1)
(300,551,1)
(44,230,1)
(716,17,1)
(181,637,1)
(118,162,1)
(661,43,1)
(538,498,1)
(363,574,1)
(222,549,1)
(565,317,1)
(9,22,1)
(332,321,1)
(494,294,1)
(469,733,1)
(398,58,1)
(429,222,1)
(71,392,1)
(56,526,1)
(408,488,1)
(731,475,1)
(564,440,1)
(653,455,1)
(425,147,1)
(23,454,1)
(456,534,1)
(425,600,1)
(527,498,1)
(376,656,1)
(86,447,1)
(696,371,1)
(11,196,1)
(410,634,1)
(162,21,1)
(737,280,1)
(682,356,1)
(242,552,1)
(5,483,1)
(152,378,1)
(477,707,1)
(39,144,1)
(517,700,1)
(632,689,1)
(249,86,1)
(559,420,1)
(490,179,1)
(649,179,1)
(708,371,1)
(454,589,1)
(482,265,1)
(46,356,1)
(489,131,1)
(532,179,1)
(651,90,1)
(300,140,1)
(124,239,1)
(622,714,1)
(564,179,1)
(369,91,1)
(557,117,1)
(193,142,1)
(78,140,1)
(483,686,1)
(618,498,1)
(688,58,1)
(683,27,1)
(269,666,1)
(503,498,1)
(360,206,1)
(612,499,1)
(488,330,1)
(723,58,1)
(248,436,1)
(724,498,1)
(359,247,1)
(241,252,1)
(4,58,1)
(194,0,1)
(224,427,1)
(475,470,1)
(44,629,1)
(672,614,1)
(620,296,1)
(300,505,1)
(455,168,1)
(701,623,1)
(97,87,1)
(111,321,1)
(441,336,1)
(467,399,1)
(46,437,1)
(78,550,1)
(590,641,1)
(8,19,1)
(448,457,1)
(556,724,1)
(380,356,1)
(100,674,1)
(528,498,1)
(209,566,1)
(582,260,1)
(41,498,1)
(647,437,1)
(452,186,1)
(86,314,1)
(406,473,1)
(583,268,1)
(60,715,1)
(171,160,1)
(580,489,1)
(448,437,1)
(715,179,1)
(294,240,1)
(54,481,1)
(199,571,1)
(441,58,1)
(79,598,1)
(436,272,1)
(675,729,1)
(638,231,1)
(475,498,1)
(519,115,1)
(112,452,1)
(211,703,1)
(301,498,1)
(390,493,1)
(151,293,1)
(250,372,1)
(264,495,1)
(22,394,1)
(574,328,1)
(128,179,1)
(300,243,1)
(452,498,1)
(698,543,1)
(631,179,1)
(514,551,1)
(536,179,1)
(679,513,1)
(234,720,1)
(473,352,1)
(131,151,1)
(191,460,1)
(667,19,1)
(77,24,1)
(189,486,1)
(571,320,1)
(52,437,1)
(344,141,1)
(14,249,1)
(469,255,1)
(524,33,1)
(365,171,1)
(516,704,1)
(92,107,1)
(484,691,1)
(558,108,1)
(604,292,1)
(525,471,1)
(427,395,1)
(425,451,1)
(108,339,1)
(300,241,1)
(98,9,1)
(66,551,1)
(656,406,1)
(331,255,1)
(706,81,1)
(646,631,1)
(113,418,1)
(338,536,1)
(48,291,1)
(303,740,1)
(296,370,1)
(608,409,1)
(608,58,1)
(78,243,1)
(328,329,1)
(678,640,1)
(581,321,1)
(357,386,1)
(381,329,1)
(141,301,1)
(205,709,1)
(476,175,1)
(80,44,1)
(429,739,1)
(175,72,1)
(546,180,1)
(457,160,1)
(575,617,1)
(519,514,1)
(723,321,1)
(415,435,1)
(682,347,1)
(78,398,1)
(649,396,1)
(214,476,1)
(369,254,1)
(727,52,1)
(502,25,1)
(712,379,1)
(484,490,1)
(151,512,1)
(178,342,1)
(509,525,1)
(219,44,1)
(158,657,1)
(339,627,1)
(168,492,1)
(468,51,1)
(559,101,1)
(26,307,1)
(229,179,1)
(307,107,1)
(628,127,1)
(429,48,1)
(434,493,1)
(12,510,1)
(633,593,1)
(490,717,1)
(508,544,1)
(516,255,1)
(519,429,1)
(480,559,1)
(300,139,1)
(41,258,1)
(142,92,1)
(495,642,1)
(193,422,1)
(334,278,1)
(95,422,1)
(514,547,1)
(662,498,1)
(383,511,1)
(732,8,1)
(31,380,1)
(263,140,1)
(550,497,1)
(115,511,1)
(594,308,1)
(500,26,1)
(650,518,1)
(300,244,1)
(331,724,1)
(211,570,1)
(422,601,1)
(470,148,1)
(514,140,1)
(348,6,1)
(519,325,1)
(104,375,1)
(429,244,1)
(273,528,1)
(684,145,1)
(135,663,1)
(171,289,1)
(553,408,1)
(376,369,1)
(534,217,1)
(230,413,1)
(425,140,1)
(642,111,1)
(467,539,1)
(429,505,1)
(243,153,1)
(654,118,1)
(678,113,1)
(137,568,1)
(610,42,1)
(415,79,1)
(514,451,1)
(116,215,1)
(87,80,1)
(447,314,1)
(13,263,1)
(474,516,1)
(46,79,1)
(647,435,1)
(471,305,1)
(596,445,1)
(666,553,1)
(6,224,1)
(690,48,1)
(396,508,1)
(499,219,1)
(146,451,1)
(574,329,1)
(397,595,1)
(324,185,1)
(393,580,1)
(302,442,1)
(346,654,1)
(665,660,1)
(729,415,1)
(335,452,1)
(724,622,1)
(735,179,1)
(589,121,1)
(10,73,1)
(297,179,1)
(200,195,1)
(519,300,1)
(300,582,1)
(631,282,1)
(149,671,1)
(266,359,1)
(231,209,1)
(30,69,1)
(199,538,1)
(403,170,1)
(70,145,1)
(617,690,1)
(337,662,1)
(24,451,1)
(355,575,1)
(116,498,1)
(300,70,1)
(315,441,1)
(16,725,1)
(429,730,1)
(740,70,1)
(441,13,1)
(386,656,1)
(349,55,1)
(423,310,1)
(300,451,1)
(139,602,1)
(628,177,1)
(46,435,1)
(81,632,1)
(250,8,1)
(378,165,1)
(491,463,1)
(446,521,1)
(652,366,1)
(185,498,1)
(374,43,1)
(301,572,1)
(22,179,1)
(728,500,1)
(710,502,1)
(603,274,1)
(439,448,1)
(653,716,1)
(572,530,1)
(512,293,1)
(408,107,1)
(593,629,1)
(78,451,1)
(425,551,1)
(372,136,1)
(310,179,1)
(463,599,1)
(700,612,1)
(570,157,1)
(559,657,1)
(649,635,1)
(458,576,1)
(145,179,1)
(503,96,1)
(373,166,1)
(533,727,1)
(628,230,1)
(250,230,1)
(300,699,1)
(600,522,1)
(404,666,1)
(453,585,1)
(730,179,1)
(160,56,1)
(628,629,1)
(385,36,1)
(429,458,1)
(358,134,1)
(356,313,1)
(619,194,1)
(199,649,1)
(528,382,1)
(212,467,1)
(697,46,1)
(711,59,1)
(689,20,1)
(484,451,1)
(36,344,1)
(639,738,1)
(495,111,1)
(199,580,1)
(395,675,1)
(522,651,1)
(302,435,1)
(333,482,1)
(660,58,1)
(146,243,1)
(146,48,1)
(675,290,1)
(21,403,1)
(146,147,1)
(52,435,1)
(282,604,1)
(111,58,1)
(288,201,1)
(265,496,1)
(7,83,1)
(277,40,1)
(584,631,1)
(244,659,1)
(415,245,1)
(655,503,1)
(280,498,1)
(146,288,1)
(300,698,1)
(258,269,1)
(292,251,1)
(659,225,1)
(127,490,1)
(279,273,1)
(296,179,1)
(99,76,1)
(159,318,1)
(243,58,1)
(211,73,1)
(483,102,1)
(17,466,1)
(415,356,1)
(220,455,1)
(484,147,1)
(45,152,1)
(300,739,1)
(300,730,1)
(530,177,1)
(52,79,1)
(280,583,1)
(7,41,1)
(152,165,1)
(69,241,1)
(55,75,1)
(351,546,1)
(429,128,1)
(226,678,1)
(329,46,1)
(268,681,1)
(582,532,1)
(210,396,1)
(643,628,1)
(300,610,1)
(20,76,1)
(300,458,1)
(46,188,1)
(614,324,1)
(308,216,1)
(215,713,1)
(571,58,1)
(206,71,1)
(223,327,1)
(375,91,1)
(580,68,1)
(306,326,1)
(269,320,1)
(172,686,1)
(373,656,1)
(417,12,1)
(169,297,1)
(429,692,1)
(665,400,1)
(715,333,1)
(34,58,1)
(344,301,1)
(618,540,1)
(693,390,1)
(720,98,1)
(400,660,1)
(516,67,1)
(302,356,1)
(44,647,1)
(360,498,1)
(300,268,1)
(55,498,1)
(51,189,1)
(179,693,1)
(637,560,1)
(330,665,1)
(698,236,1)
(289,34,1)
(666,665,1)
(70,684,1)
(392,229,1)
(40,279,1)
(44,625,1)
(181,289,1)
(293,15,1)
(579,448,1)
(252,735,1)
(199,507,1)
(172,704,1)
(305,137,1)
(53,88,1)
(704,653,1)
(300,9,1)
(341,390,1)
(496,360,1)
(81,311,1)
(268,645,1)
(587,338,1)
(68,578,1)
(83,41,1)
(627,169,1)
(516,686,1)
(705,58,1)
(300,490,1)
(250,362,1)
(298,602,1)
(399,539,1)
(429,461,1)
(493,350,1)
(739,658,1)
(232,255,1)
(200,58,1)
(514,48,1)
(365,164,1)
(78,551,1)
(553,167,1)
(606,680,1)
(300,414,1)
(545,232,1)
(435,711,1)
(295,698,1)
(398,633,1)
(146,551,1)
(300,544,1)
(394,670,1)
(172,656,1)
(321,355,1)
(283,231,1)
(47,627,1)
(37,721,1)
(651,213,1)
(707,682,1)
(662,524,1)
(236,541,1)
(325,124,1)
(403,179,1)
(382,728,1)
(371,344,1)
(238,495,1)
(507,119,1)
(109,189,1)
(332,515,1)
(37,321,1)
(598,710,1)
(313,95,1)
(576,238,1)
(156,464,1)
(202,655,1)
(318,646,1)
(392,256,1)
(669,453,1)
(546,179,1)
(687,212,1)
(458,179,1)
(101,657,1)
(300,86,1)
(32,6,1)
(90,213,1)
(612,498,1)
(196,126,1)
(505,590,1)
(610,179,1)
(719,30,1)
(654,489,1)
(660,509,1)
(707,302,1)
(302,437,1)
(327,567,1)
(302,79,1)
(300,461,1)
(15,226,1)
(323,158,1)
(180,283,1)
(554,172,1)
(343,608,1)
(514,147,1)
(442,479,1)
(37,58,1)
(713,214,1)
(432,54,1)
(322,564,1)
(563,679,1)
(217,365,1)
(415,437,1)
(300,398,1)
(102,461,1)
(539,562,1)
(284,561,1)
(673,639,1)
(484,551,1)
(602,701,1)
(429,699,1)
(484,398,1)
(191,498,1)
(253,16,1)
(511,3,1)
(198,54,1)
(27,694,1)
(723,726,1)
(685,462,1)
(440,179,1)
(736,457,1)
(529,358,1)
(33,191,1)
(504,337,1)
(107,323,1)
(678,262,1)
(484,48,1)
(596,498,1)
(19,498,1)
(548,253,1)
(139,298,1)
(566,100,1)
(429,490,1)
(171,712,1)
(492,198,1)
(519,484,1)
(448,435,1)
(300,359,1)
(634,700,1)
(158,420,1)
(214,175,1)
(78,48,1)
(300,147,1)
(38,306,1)
(314,565,1)
(120,322,1)
(682,437,1)
(670,14,1)
(630,289,1)
(184,555,1)
(247,84,1)
(547,673,1)
(453,179,1)
(129,304,1)
(336,277,1)
(448,356,1)
(73,504,1)
(722,172,1)
(484,461,1)
(484,243,1)
(660,321,1)
(691,45,1)
(685,498,1)
(568,433,1)
(174,58,1)
(111,82,1)
(43,202,1)
(241,735,1)
(429,398,1)
(483,704,1)
(121,704,1)
(674,266,1)
(88,391,1)
(703,570,1)
(421,432,1)
(105,686,1)
(91,656,1)
(455,320,1)
(568,498,1)
(291,190,1)
(431,579,1)
(699,179,1)
(245,491,1)
(185,303,1)
(541,626,1)
(519,425,1)
(235,154,1)
(121,686,1)
(510,47,1)
(311,632,1)
(449,315,1)
(539,321,1)
(716,466,1)
(332,58,1)
(72,384,1)
(445,477,1)
(236,179,1)
(726,412,1)
(4,687,1)
(251,582,1)
(91,368,1)
(657,374,1)
(497,564,1)
(560,289,1)
(300,128,1)
(300,232,1)
(201,676,1)
(635,393,1)
(93,715,1)
(645,426,1)
(640,624,1)
(540,184,1)
(407,222,1)
(161,578,1)
(368,334,1)
(505,179,1)
(174,320,1)
(170,672,1)
(624,739,1)
(211,255,1)
(429,544,1)
(676,731,1)
(532,276,1)
(549,210,1)
(366,285,1)
(630,702,1)
(714,133,1)
(639,723,1)
(340,618,1)
(427,707,1)
(213,685,1)
(3,619,1)
(222,179,1)
(390,105,1)
(225,358,1)
(114,22,1)
(358,37,1)
(105,242,1)
(244,179,1)
(136,398,1)
(668,302,1)
(297,557,1)
(342,458,1)
(395,599,1)
(19,468,1)
(8,667,1)
(688,77,1)
(567,407,1)
(300,348,1)
(527,129,1)
(536,120,1)
(76,179,1)
(487,139,1)
(455,107,1)
(705,321,1)
(466,332,1)
(595,173,1)
(130,23,1)
(309,234,1)
(146,140,1)
(171,123,1)
(538,149,1)
(615,397,1)
(521,66,1)
(680,603,1)
(734,438,1)
(408,58,1)
(410,144,1)
(272,351,1)
(675,415,1)
(414,430,1)
(464,587,1)
(240,661,1)
(297,117,1)
(44,177,1)
(370,474,1)
(6,58,1)
(417,89,1)
(373,424,1)
(334,179,1)
(331,556,1)
(112,335,1)
(60,93,1)
(145,615,1)
(638,248,1)
(64,466,1)
(157,10,1)
(0,340,1)
(172,357,1)
(384,639,1)
(300,222,1)
(300,646,1)
(733,555,1)
(256,229,1)
(228,688,1)
(232,620,1)
(424,166,1)
(259,13,1)
(40,273,1)
(523,99,1)
(429,243,1)
(686,421,1)
(647,79,1)
(699,401,1)
(412,362,1)
(460,545,1)
(18,402,1)
(471,137,1)
(433,606,1)
(448,630,1)
(204,250,1)
(293,321,1)
(100,179,1)
(176,480,1)
(59,676,1)
(616,259,1)
(307,58,1)
(457,181,1)
(721,57,1)
(128,156,1)
(693,341,1)
(716,64,1)
(682,79,1)
(281,734,1)
(314,179,1)
(608,77,1)
(473,383,1)
(647,39,1)
(193,420,1)
(67,419,1)
(300,162,1)
(88,472,1)
(709,696,1)
(193,657,1)
(101,661,1)
(461,179,1)
(58,281,1)
(419,469,1)
(174,208,1)
(386,376,1)
(546,231,1)
(569,719,1)
(544,179,1)
(158,38,1)
(154,200,1)
(74,609,1)
(29,616,1)
(134,37,1)
(623,159,1)
(317,346,1)
(304,11,1)
(632,179,1)
(481,705,1)
(355,193,1)
(147,176,1)
(388,737,1)
(520,662,1)
(34,372,1)
(396,289,1)
(605,214,1)
(391,62,1)
(9,114,1)
(543,236,1)
(89,12,1)
(54,705,1)
(625,647,1)
(326,147,1)
(300,60,1)
(274,13,1)
(373,73,1)
(118,627,2)
(454,214,2)
(512,11,2)
(687,467,2)
(98,627,2)
(78,551,2)
(610,495,2)
(694,179,2)
(204,362,2)
(288,676,2)
(608,6,2)
(281,344,2)
(86,627,2)
(321,559,2)
(415,437,2)
(244,358,2)
(300,9,2)
(232,255,2)
(295,627,2)
(169,297,2)
(158,420,2)
(91,334,2)
(466,332,2)
(332,54,2)
(553,665,2)
(43,371,2)
(133,555,2)
(641,81,2)
(308,559,2)
(511,555,2)
(705,502,2)
(716,54,2)
(482,627,2)
(520,516,2)
(29,559,2)
(363,495,2)
(189,214,2)
(736,457,2)
(429,147,2)
(320,666,2)
(179,676,2)
(355,193,2)
(650,627,2)
(231,209,2)
(713,214,2)
(595,173,2)
(659,358,2)
(115,627,2)
(660,321,2)
(555,516,2)
(493,350,2)
(217,44,2)
(247,627,2)
(186,344,2)
(649,396,2)
(73,504,2)
(126,467,2)
(123,448,2)
(673,639,2)
(70,627,2)
(703,516,2)
(185,627,2)
(516,704,2)
(497,564,2)
(23,362,2)
(245,707,2)
(620,516,2)
(199,507,2)
(584,627,2)
(4,467,2)
(740,627,2)
(415,707,2)
(250,362,2)
(395,675,2)
(159,627,2)
(62,358,2)
(473,627,2)
(195,564,2)
(293,321,2)
(429,458,2)
(514,551,2)
(429,244,2)
(484,551,2)
(508,44,2)
(541,627,2)
(481,214,2)
(493,676,2)
(462,315,2)
(334,179,2)
(189,533,2)
(253,179,2)
(490,179,2)
(654,627,2)
(144,11,2)
(37,11,2)
(152,165,2)
(179,362,2)
(653,455,2)
(684,627,2)
(181,44,2)
(425,140,2)
(6,58,2)
(121,214,2)
(583,144,2)
(625,647,2)
(208,627,2)
(571,107,2)
(78,147,2)
(278,172,2)
(128,564,2)
(268,645,2)
(174,107,2)
(647,144,2)
(448,44,2)
(230,189,2)
(711,676,2)
(417,12,2)
(128,179,2)
(727,502,2)
(165,527,2)
(241,627,2)
(390,214,2)
(614,324,2)
(557,516,2)
(429,544,2)
(453,231,2)
(20,76,2)
(243,666,2)
(18,371,2)
(137,568,2)
(300,582,2)
(224,351,2)
(335,344,2)
(436,351,2)
(704,653,2)
(700,612,2)
(42,495,2)
(594,559,2)
(281,734,2)
(180,627,2)
(544,179,2)
(311,76,2)
(533,214,2)
(735,627,2)
(26,307,2)
(115,351,2)
(250,502,2)
(54,214,2)
(630,457,2)
(193,420,2)
(612,498,2)
(559,657,2)
(403,179,2)
(484,490,2)
(429,243,2)
(220,54,2)
(223,44,2)
(372,8,2)
(554,172,2)
(250,676,2)
(678,11,2)
(173,627,2)
(315,441,2)
(653,716,2)
(458,495,2)
(253,498,2)
(505,81,2)
(73,516,2)
(616,559,2)
(448,79,2)
(652,351,2)
(324,627,2)
(111,321,2)
(522,315,2)
(64,466,2)
(259,559,2)
(136,8,2)
(199,538,2)
(332,58,2)
(632,76,2)
(211,570,2)
(146,140,2)
(45,11,2)
(685,315,2)
(146,147,2)
(413,189,2)
(408,107,2)
(548,516,2)
(405,44,2)
(484,128,2)
(395,707,2)
(202,371,2)
(100,179,2)
(447,627,2)
(452,498,2)
(204,676,2)
(338,564,2)
(78,243,2)
(117,516,2)
(510,627,2)
(349,55,2)
(152,11,2)
(296,516,2)
(323,158,2)
(365,44,2)
(656,555,2)
(369,172,2)
(433,680,2)
(540,555,2)
(242,362,2)
(570,516,2)
(568,498,2)
(342,495,2)
(571,351,2)
(639,362,2)
(25,214,2)
(234,627,2)
(119,498,2)
(649,179,2)
(555,211,2)
(583,27,2)
(414,284,2)
(466,54,2)
(302,437,2)
(210,44,2)
(272,351,2)
(373,73,2)
(358,37,2)
(269,315,2)
(516,255,2)
(91,172,2)
(730,76,2)
(44,177,2)
(19,498,2)
(340,618,2)
(172,351,2)
(110,316,2)
(523,76,2)
(300,70,2)
(657,374,2)
(643,564,2)
(585,6,2)
(382,500,2)
(720,627,2)
(148,502,2)
(397,627,2)
(486,502,2)
(99,76,2)
(149,351,2)
(475,502,2)
(460,516,2)
(137,680,2)
(514,140,2)
(265,627,2)
(44,629,2)
(484,461,2)
(46,564,2)
(649,351,2)
(216,559,2)
(330,665,2)
(507,351,2)
(193,657,2)
(664,8,2)
(341,214,2)
(300,232,2)
(300,392,2)
(580,351,2)
(589,214,2)
(670,627,2)
(215,214,2)
(40,500,2)
(419,555,2)
(134,11,2)
(714,555,2)
(351,627,2)
(211,73,2)
(250,214,2)
(671,351,2)
(396,160,2)
(260,627,2)
(191,516,2)
(660,58,2)
(734,112,2)
(334,172,2)
(76,179,2)
(116,498,2)
(474,516,2)
(310,179,2)
(7,41,2)
(341,362,2)
(409,6,2)
(483,564,2)
(693,362,2)
(692,27,2)
(366,351,2)
(300,698,2)
(645,144,2)
(145,627,2)
(378,11,2)
(693,130,2)
(368,172,2)
(121,502,2)
(178,495,2)
(667,189,2)
(326,559,2)
(300,551,2)
(322,564,2)
(7,315,2)
(715,179,2)
(37,321,2)
(264,495,2)
(248,351,2)
(483,704,2)
(172,627,2)
(388,44,2)
(581,559,2)
(252,627,2)
(216,29,2)
(519,429,2)
(449,315,2)
(351,546,2)
(524,516,2)
(105,502,2)
(519,78,2)
(9,22,2)
(306,559,2)
(329,495,2)
(461,179,2)
(651,315,2)
(495,111,2)
(519,115,2)
(519,514,2)
(44,230,2)
(726,362,2)
(656,351,2)
(179,693,2)
(345,495,2)
(80,44,2)
(81,76,2)
(222,44,2)
(739,81,2)
(504,516,2)
(214,175,2)
(440,214,2)
(146,676,2)
(647,79,2)
(83,315,2)
(628,629,2)
(199,649,2)
(72,639,2)
(528,498,2)
(472,495,2)
(663,351,2)
(429,27,2)
(429,451,2)
(8,19,2)
(435,676,2)
(669,6,2)
(558,627,2)
(386,172,2)
(189,676,2)
(146,451,2)
(519,146,2)
(666,665,2)
(412,362,2)
(169,516,2)
(367,174,2)
(23,502,2)
(492,54,2)
(386,351,2)
(293,58,2)
(429,730,2)
(698,236,2)
(724,498,2)
(105,214,2)
(194,555,2)
(297,117,2)
(694,217,2)
(624,81,2)
(327,498,2)
(655,371,2)
(705,676,2)
(196,4,2)
(579,448,2)
(685,498,2)
(54,676,2)
(101,344,2)
(336,344,2)
(560,44,2)
(115,511,2)
(722,627,2)
(471,680,2)
(429,739,2)
(289,34,2)
(111,58,2)
(374,661,2)
(514,48,2)
(439,44,2)
(284,179,2)
(307,559,2)
(628,177,2)
(598,502,2)
(211,255,2)
(209,627,2)
(398,8,2)
(158,559,2)
(539,58,2)
(457,44,2)
(386,627,2)
(268,44,2)
(489,131,2)
(196,467,2)
(441,58,2)
(115,555,2)
(325,559,2)
(519,325,2)
(300,730,2)
(723,58,2)
(162,627,2)
(102,564,2)
(96,371,2)
(500,559,2)
(603,274,2)
(40,273,2)
(172,704,2)
(509,315,2)
(340,555,2)
(429,222,2)
(589,502,2)
(238,495,2)
(300,646,2)
(434,502,2)
(343,608,2)
(282,627,2)
(676,475,2)
(390,362,2)
(181,289,2)
(268,144,2)
(156,564,2)
(26,559,2)
(300,222,2)
(384,639,2)
(528,500,2)
(737,144,2)
(589,362,2)
(22,627,2)
(429,48,2)
(153,666,2)
(59,676,2)
(227,627,2)
(518,558,2)
(37,58,2)
(481,502,2)
(223,327,2)
(110,351,2)
(392,229,2)
(107,559,2)
(415,356,2)
(517,44,2)
(398,58,2)
(665,660,2)
(105,242,2)
(363,574,2)
(731,502,2)
(419,144,2)
(562,564,2)
(550,564,2)
(580,489,2)
(172,656,2)
(647,437,2)
(254,91,2)
(496,360,2)
(348,351,2)
(453,6,2)
(518,627,2)
(628,564,2)
(5,564,2)
(545,516,2)
(463,707,2)
(610,179,2)
(27,44,2)
(121,676,2)
(672,627,2)
(18,586,2)
(723,362,2)
(283,627,2)
(467,564,2)
(273,528,2)
(292,627,2)
(538,498,2)
(105,676,2)
(154,564,2)
(729,415,2)
(661,371,2)
(521,559,2)
(108,627,2)
(404,666,2)
(468,189,2)
(593,8,2)
(314,627,2)
(396,289,2)
(441,344,2)
(705,362,2)
(23,214,2)
(651,213,2)
(603,315,2)
(633,8,2)
(543,627,2)
(157,516,2)
(179,502,2)
(396,44,2)
(254,373,2)
(129,11,2)
(78,451,2)
(503,371,2)
(386,555,2)
(333,627,2)
(426,144,2)
(374,43,2)
(56,181,2)
(68,578,2)
(600,315,2)
(632,628,2)
(112,344,2)
(527,11,2)
(104,91,2)
(4,321,2)
(434,676,2)
(27,694,2)
(391,358,2)
(142,559,2)
(469,255,2)
(24,559,2)
(599,707,2)
(608,58,2)
(686,54,2)
(385,344,2)
(448,435,2)
(429,610,2)
(454,502,2)
(487,627,2)
(332,321,2)
(166,179,2)
(614,627,2)
(328,329,2)
(300,268,2)
(582,532,2)
(300,451,2)
(192,315,2)
(355,559,2)
(484,398,2)
(226,11,2)
(242,676,2)
(67,555,2)
(698,627,2)
(693,502,2)
(394,627,2)
(590,81,2)
(202,655,2)
(212,467,2)
(23,498,2)
(725,516,2)
(337,255,2)
(434,362,2)
(406,627,2)
(693,676,2)
(362,315,2)
(78,48,2)
(10,516,2)
(431,448,2)
(527,498,2)
(289,44,2)
(377,214,2)
(564,214,2)
(484,11,2)
(71,627,2)
(629,8,2)
(120,564,2)
(549,44,2)
(315,559,2)
(88,11,2)
(130,362,2)
(408,58,2)
(184,555,2)
(139,627,2)
(89,627,2)
(654,489,2)
(647,435,2)
(67,27,2)
(519,425,2)
(127,564,2)
(57,11,2)
(365,171,2)
(622,555,2)
(17,466,2)
(197,627,2)
(74,516,2)
(419,27,2)
(109,189,2)
(707,302,2)
(578,351,2)
(300,461,2)
(710,502,2)
(565,627,2)
(455,107,2)
(642,358,2)
(516,555,2)
(662,516,2)
(417,627,2)
(480,559,2)
(258,315,2)
(222,179,2)
(105,704,2)
(705,214,2)
(236,627,2)
(484,451,2)
(640,81,2)
(410,44,2)
(355,575,2)
(491,707,2)
(131,11,2)
(429,551,2)
(728,500,2)
(453,179,2)
(437,214,2)
(158,38,2)
(443,559,2)
(388,144,2)
(280,498,2)
(454,362,2)
(67,144,2)
(300,241,2)
(302,351,2)
(55,627,2)
(571,58,2)
(19,189,2)
(300,162,2)
(448,630,2)
(676,502,2)
(732,8,2)
(228,344,2)
(420,371,2)
(430,627,2)
(43,202,2)
(658,81,2)
(526,181,2)
(688,344,2)
(420,18,2)
(130,676,2)
(556,555,2)
(609,516,2)
(514,451,2)
(481,362,2)
(539,564,2)
(730,179,2)
(701,627,2)
(341,676,2)
(546,231,2)
(596,498,2)
(163,627,2)
(415,79,2)
(161,578,2)
(566,100,2)
(300,147,2)
(151,11,2)
(160,181,2)
(255,44,2)
(280,27,2)
(170,627,2)
(174,58,2)
(483,686,2)
(691,11,2)
(516,686,2)
(52,502,2)
(9,627,2)
(399,564,2)
(321,355,2)
(52,214,2)
(317,627,2)
(172,686,2)
(630,289,2)
(461,564,2)
(519,484,2)
(544,44,2)
(697,564,2)
(737,44,2)
(532,627,2)
(114,627,2)
(570,179,2)
(39,144,2)
(723,321,2)
(266,627,2)
(232,516,2)
(359,627,2)
(216,498,2)
(656,627,2)
(300,699,2)
(575,559,2)
(406,555,2)
(688,559,2)
(323,559,2)
(705,58,2)
(146,551,2)
(429,398,2)
(647,356,2)
(513,627,2)
(702,457,2)
(229,627,2)
(373,166,2)
(634,44,2)
(473,555,2)
(681,44,2)
(206,627,2)
(473,351,2)
(596,707,2)
(559,420,2)
(199,571,2)
(445,707,2)
(26,344,2)
(370,516,2)
(119,351,2)
(504,191,2)
(201,676,2)
(30,627,2)
(602,179,2)
(193,559,2)
(135,351,2)
(166,91,2)
(22,179,2)
(47,627,2)
(499,44,2)
(448,356,2)
(130,214,2)
(539,321,2)
(55,498,2)
(627,516,2)
(343,6,2)
(477,707,2)
(54,502,2)
(214,639,2)
(300,351,2)
(274,13,2)
(606,680,2)
(471,137,2)
(300,505,2)
(682,435,2)
(440,362,2)
(700,44,2)
(305,680,2)
(734,344,2)
(309,627,2)
(107,323,2)
(574,329,2)
(514,147,2)
(699,564,2)
(406,351,2)
(373,91,2)
(3,555,2)
(739,179,2)
(493,362,2)
(500,26,2)
(595,627,2)
(429,140,2)
(240,661,2)
(724,555,2)
(631,179,2)
(373,656,2)
(200,58,2)
(146,48,2)
(66,559,2)
(564,362,2)
(277,344,2)
(36,344,2)
(199,351,2)
(516,44,2)
(255,27,2)
(11,467,2)
(488,665,2)
(357,172,2)
(91,656,2)
(300,414,2)
(158,657,2)
(221,516,2)
(707,351,2)
(171,123,2)
(189,502,2)
(263,559,2)
(733,555,2)
(489,11,2)
(175,639,2)
(425,451,2)
(300,128,2)
(475,498,2)
(58,281,2)
(92,559,2)
(495,358,2)
(78,564,2)
(576,495,2)
(300,139,2)
(6,351,2)
(360,627,2)
(300,86,2)
(8,189,2)
(44,144,2)
(58,344,2)
(696,371,2)
(425,147,2)
(173,349,2)
(34,13,2)
(268,27,2)
(300,739,2)
(426,44,2)
(559,422,2)
(365,223,2)
(709,371,2)
(569,627,2)
(140,559,2)
(294,661,2)
(402,371,2)
(329,179,2)
(191,498,2)
(302,435,2)
(396,123,2)
(727,214,2)
(53,11,2)
(612,44,2)
(415,435,2)
(693,390,2)
(15,11,2)
(293,11,2)
(307,107,2)
(407,44,2)
(425,48,2)
(11,564,2)
(11,196,2)
(645,179,2)
(694,44,2)
(339,627,2)
(307,344,2)
(425,315,2)
(296,179,2)
(689,76,2)
(564,502,2)
(551,559,2)
(434,214,2)
(646,627,2)
(297,179,2)
(265,496,2)
(44,647,2)
(467,539,2)
(681,27,2)
(329,46,2)
(589,676,2)
(41,498,2)
(33,516,2)
(660,315,2)
(115,518,2)
(393,351,2)
(69,627,2)
(646,631,2)
(147,559,2)
(217,365,2)
(280,44,2)
(401,564,2)
(441,559,2)
(274,315,2)
(587,564,2)
(693,214,2)
(358,11,2)
(331,724,2)
(493,214,2)
(546,179,2)
(297,516,2)
(427,351,2)
(674,627,2)
(682,79,2)
(182,81,2)
(410,27,2)
(479,351,2)
(511,3,2)
(235,564,2)
(301,498,2)
(87,44,2)
(679,627,2)
(680,315,2)
(715,627,2)
(525,315,2)
(46,437,2)
(79,502,2)
(666,315,2)
(274,58,2)
(130,502,2)
(172,555,2)
(115,110,2)
(476,639,2)
(574,495,2)
(376,656,2)
(290,415,2)
(666,553,2)
(645,27,2)
(452,344,2)
(105,686,2)
(564,676,2)
(500,344,2)
(347,302,2)
(390,502,2)
(536,179,2)
(428,371,2)
(516,144,2)
(46,79,2)
(198,54,2)
(16,516,2)
(514,639,2)
(253,516,2)
(171,44,2)
(421,54,2)
(582,627,2)
(67,44,2)
(121,362,2)
(38,559,2)
(567,44,2)
(256,627,2)
(242,552,2)
(41,315,2)
(429,461,2)
(734,438,2)
(82,358,2)
(0,331,2)
(167,665,2)
(300,490,2)
(124,559,2)
(390,105,2)
(60,627,2)
(699,179,2)
(375,91,2)
(481,676,2)
(486,676,2)
(571,320,2)
(638,231,2)
(228,559,2)
(371,344,2)
(70,145,2)
(346,627,2)
(111,358,2)
(34,372,2)
(51,189,2)
(529,358,2)
(13,559,2)
(455,54,2)
(635,351,2)
(78,398,2)
(113,76,2)
(735,179,2)
(116,214,2)
(708,371,2)
(300,140,2)
(561,627,2)
(547,639,2)
(277,559,2)
(97,44,2)
(638,179,2)
(423,627,2)
(502,214,2)
(604,627,2)
(721,11,2)
(682,356,2)
(279,500,2)
(727,676,2)
(675,707,2)
(359,179,2)
(122,54,2)
(587,338,2)
(130,23,2)
(470,502,2)
(236,179,2)
(706,81,2)
(628,230,2)
(205,371,2)
(626,627,2)
(414,627,2)
(331,255,2)
(448,437,2)
(653,54,2)
(174,627,2)
(262,81,2)
(484,48,2)
(307,58,2)
(21,627,2)
(162,403,2)
(392,627,2)
(145,179,2)
(315,344,2)
(533,502,2)
(690,559,2)
(12,179,2)
(357,627,2)
(446,559,2)
(395,599,2)
(717,564,2)
(54,705,2)
(346,654,2)
(175,498,2)
(519,300,2)
(300,398,2)
(357,555,2)
(682,437,2)
(388,27,2)
(211,516,2)
(316,638,2)
(615,627,2)
(172,172,2)
(655,503,2)
(179,214,2)
(314,179,2)
(605,214,2)
(34,58,2)
(536,564,2)
(493,502,2)
(360,498,2)
(367,627,2)
(336,559,2)
(84,627,2)
(631,627,2)
(502,116,2)
(424,91,2)
(304,11,2)
(432,54,2)
(503,498,2)
(564,179,2)
(638,351,2)
(77,559,2)
(231,627,2)
(280,144,2)
(665,315,2)
(300,544,2)
(229,179,2)
(618,498,2)
(105,362,2)
(327,44,2)
(14,627,2)
(4,58,2)
(637,44,2)
(425,551,2)
(442,351,2)
(410,144,2)
(176,559,2)
(146,243,2)
(300,243,2)
(52,676,2)
(505,179,2)
(738,362,2)
(504,337,2)
(681,144,2)
(381,329,2)
(379,44,2)
(400,315,2)
(204,502,2)
(639,723,2)
(390,493,2)
(682,302,2)
(464,564,2)
(276,627,2)
(310,627,2)
(249,627,2)
(232,296,2)
(0,340,2)
(440,502,2)
(302,79,2)
(251,627,2)
(408,665,2)
(76,11,2)
(515,54,2)
(455,320,2)
(337,662,2)
(32,6,2)
(46,356,2)
(484,699,2)
(533,676,2)
(285,351,2)
(441,13,2)
(704,54,2)
(273,500,2)
(387,666,2)
(341,502,2)
(300,610,2)
(429,505,2)
(623,627,2)
(300,417,2)
(546,627,2)
(553,408,2)
(454,676,2)
(630,160,2)
(86,314,2)
(243,58,2)
(705,321,2)
(419,44,2)
(343,453,2)
(291,559,2)
(376,172,2)
(300,244,2)
(241,735,2)
(450,559,2)
(171,289,2)
(675,415,2)
(185,498,2)
(225,358,2)
(722,351,2)
(668,302,2)
(469,555,2)
(707,682,2)
(23,676,2)
(139,602,2)
(303,627,2)
(331,555,2)
(34,44,2)
(357,351,2)
(300,48,2)
(300,359,2)
(599,596,2)
(164,44,2)
(338,536,2)
(165,11,2)
(657,661,2)
(204,214,2)
(318,627,2)
(737,27,2)
(538,351,2)
(440,676,2)
(429,128,2)
(390,676,2)
(458,179,2)
(131,151,2)
(344,301,2)
(602,627,2)
(506,315,2)
(662,498,2)
(90,315,2)
(429,699,2)
(456,44,2)
(426,27,2)
(566,627,2)
(174,320,2)
(193,422,2)
(242,502,2)
(486,214,2)
(244,179,2)
(490,564,2)
(618,555,2)
(48,559,2)
(199,580,2)
(722,555,2)
(516,27,2)
(451,559,2)
(496,627,2)
(54,362,2)
(93,627,2)
(78,140,2)
(242,214,2)
(100,627,2)
(75,627,2)
(617,559,2)
(12,627,2)
(158,422,2)
(494,661,2)
(719,627,2)
(429,490,2)
(619,555,2)
(484,243,2)
(324,185,2)
(507,119,2)
(302,356,2)
(680,603,2)
(534,44,2)
(484,140,2)
(455,58,2)
(188,564,2)
(171,160,2)
(151,293,2)
(190,559,2)
(300,60,2)
(219,44,2)
(634,700,2)
(645,44,2)
(418,76,2)
(362,7,2)
(383,555,2)
(712,44,2)
(209,566,2)
(298,627,2)
(403,627,2)
(683,27,2)
(568,680,2)
(716,466,2)
(514,243,2)
(112,452,2)
(316,351,2)
(200,564,2)
(349,627,2)
(81,632,2)
(213,685,2)
(60,715,2)
(168,54,2)
(255,144,2)
(239,559,2)
(563,627,2)
(213,315,2)
(337,516,2)
(484,147,2)
(559,344,2)
(632,179,2)
(352,351,2)
(284,627,2)
(608,77,2)
(46,435,2)
(300,458,2)
(532,179,2)
(533,498,2)
(0,555,2)
(583,44,2)
-----------------------------------
(0,dev_err(&client->dev, "address 0x%02x unavailable\\n",\n\\n\\t\\t\\t\\t\\tclient->addr + i)
(1,magic)
(2,)
(3,-EADDRINUSE)
(4,chip.flags)
(5,chip)
(6,chip.setup)
(7,i2c_check_functionality(client->adapter, I2C_FUNC_I2C)
(8,i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_WRITE_BYTE_DATA)
(9,at24->nvmem_config.owner)
(10,at24)
(11,(chip.flags & AT24_FLAG_SERIAL)
(12,at24->nvmem_config)
(13,chip.page_size = 1)
(14,at24->nvmem_config.root_only = true)
(15,flags)
(16,at24)
(17,65536)
(18,id->driver_data)
(19,client->adapter)
(20,at24)
(21,read_only)
(22,at24->nvmem_config)
(23,client->dev)
(24,NULL)
(25,I2C_FUNC_SMBUS_READ_WORD_DATA)
(26,is_power_of_2(chip.byte_len)
(27,!at24->writebuf)
(28,if (IS_ERR(at24->nvmem)
(29,&chip)
(30,at24->nvmem_config.compat = true)
(31,0)
(32,at24)
(33,client)
(34,chip.page_size)
(35,if (at24->use_smbus)
(36,chip)
(37,chip.flags)
(38,AT24_BITMASK(AT24_SIZE_BYTELEN)
(39,use_smbus)
(40,dev_warn(&client->dev,\n\\n\\t\\t\\t"byte_len looks suspicious (no power of 2)
(41,client->adapter)
(42,read_func)
(43,aid = acpi_match_device(at24_acpi_ids, &client->dev)
(44,!use_smbus || use_smbus_write)
(45,EINVAL)
(46,at24->use_smbus = use_smbus)
(47,at24)
(48,chip.flags)
(49,)
(50,if (chip.flags & AT24_FLAG_TAKE8ADDR)
(51,client)
(52,client)
(53,use_smbus)
(54,chip.flags & AT24_FLAG_TAKE8ADDR)
(55,client->dev)
(56,io_limit)
(57,chip)
(58,chip = *(struct at24_platform_data *)
(59,use_smbus)
(60,at24->nvmem_config.reg_read)
(61,if (chip.flags & AT24_FLAG_MAC && chip.byte_len == 4)
(62,at24_eeprom_read_serial)
(63,if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)
(64,256)
(65,)
(66,NULL)
(67,num_addresses)
(68,"writable")
(69,true)
(70,at24->nvmem_config.dev)
(71,client)
(72,adapter)
(73,at24->client[i] = i2c_new_dummy(client->adapter,\n\\n\\t\\t\\t\\t\\tclient->addr + i)
(74,test_byte)
(75,dev)
(76,at24->use_smbus)
(77,chip.context = NULL)
(78,return -ENOMEM;)
(79,use_smbus = I2C_SMBUS_WORD_DATA)
(80,write_max)
(81,at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)
(82,flags)
(83,I2C_FUNC_I2C)
(84,at24)
(85,)
(86,at24->nvmem_config.root_only)
(87,chip)
(88,at24)
(89,name)
(90,"page_size must not be 0!\\n")
(91,at24->client[i])
(92,magic)
(93,reg_read)
(94,if (i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_WRITE_I2C_BLOCK)
(95,use_smbus)
(96,dev)
(97,page_size)
(98,THIS_MODULE)
(99,at24)
(100,at24->nvmem_config)
(101,magic)
(102,num_addresses)
(103,if (!use_smbus || use_smbus_write)
(104,client)
(105,num_addresses * sizeof(struct i2c_client *)
(106,if (!chip.page_size)
(107,chip.byte_len = BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN)
(108,ENODEV)
(109,use_smbus_write)
(110,err = PTR_ERR(at24->nvmem)
(111,chip.flags)
(112,client->dev.platform_data)
(113,at24->write_func = at24_eeprom_write_i2c)
(114,owner)
(115,return err;)
(116,client->adapter)
(117,&test_byte)
(118,writable)
(119,client->dev)
(120,lock)
(121,at24)
(122,AT24_FLAG_ADDR16)
(123,write_max = I2C_SMBUS_BLOCK_MAX)
(124,-ENODEV)
(125,at24)
(126,AT24_FLAG_MAC)
(127,use_smbus_write)
(128,at24->use_smbus)
(129,dev)
(130,&client->dev)
(131,!(chip.flags & AT24_FLAG_READONLY)
(132,aid)
(133,"address 0x%02x unavailable\\n")
(134,AT24_FLAG_SERIAL)
(135,dev)
(136,1)
(137,&client->dev)
(138,if (!is_power_of_2(chip.byte_len)
(139,at24->nvmem_config.size)
(140,chip.page_size)
(141,platform_data)
(142,AT24_SIZE_BYTELEN)
(143,)
(144,writable)
(145,at24->nvmem_config)
(146,return -EPFNOSUPPORT;)
(147,chip.byte_len)
(148,client)
(149,name)
(150,test_byte)
(151,chip.flags & AT24_FLAG_READONLY)
(152,dev_err(&client->dev,\n\\n\\t\\t\\t"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.")
(153,byte_len)
(154,at24)
(155,if (!at24->client[i])
(156,use_smbus)
(157,client)
(158,magic & AT24_BITMASK(AT24_SIZE_BYTELEN)
(159,at24->nvmem_config.word_size = 1)
(160,write_max = io_limit)
(161,"read-only")
(162,at24->nvmem_config.read_only)
(163,client)
(164,GFP_KERNEL)
(165,&client->dev)
(166,at24->client)
(167,4)
(168,byte_len)
(169,err = at24_read(at24, 0, &test_byte, 1)
(170,nvmem_config)
(171,write_max + 2)
(172,i < num_addresses)
(173,dev_name(&client->dev)
(174,chip.byte_len)
(175,client->adapter)
(176,byte_len)
(177,use_smbus_write = 0)
(178,use_smbus)
(179,at24 = devm_kzalloc(&client->dev, sizeof(struct at24_data)
(180,nvmem)
(181,write_max > io_limit)
(182,at24_eeprom_write_smbus_byte)
(183,if (use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)
(184,client)
(185,client->dev)
(186,dev)
(187,num_addresses)
(188,use_smbus)
(189,i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_WRITE_I2C_BLOCK)
(190,chip)
(191,client->adapter)
(192,page_size)
(193,magic >>= AT24_SIZE_BYTELEN)
(194,err)
(195,chip)
(196,chip.flags & AT24_FLAG_MAC)
(197,at24->nvmem_config.reg_write = at24_write)
(198,num_addresses)
(199,dev_info(&client->dev, "%u byte %s EEPROM, %s, %u bytes/write\\n",\n\\n\\t\\tchip.byte_len, client->name,\n\\n\\t\\twritable ? "writable" : "read-only", at24->write_max)
(200,at24->chip = chip)
(201,EPFNOSUPPORT)
(202,acpi_match_device(at24_acpi_ids, &client->dev)
(203,)
(204,flags)
(205,client)
(206,dev)
(207,if (write_max > io_limit)
(208,byte_len)
(209,nvmem_register(&at24->nvmem_config)
(210,at24)
(211,at24->client[i])
(212,chip)
(213,&client->dev)
(214,i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_READ_I2C_BLOCK)
(215,adapter)
(216,at24_get_ofdata(client, &chip)
(217,at24->writebuf = devm_kzalloc(&client->dev,\n\\n\\t\\t\\t\\twrite_max + 2, GFP_KERNEL)
(218,if (err)
(219,client)
(220,chip)
(221,at24)
(222,at24->writebuf)
(223,&client->dev)
(224,setup)
(225,at24)
(226,chip)
(227,at24_write)
(228,byte_len)
(229,at24->nvmem_config)
(230,use_smbus_write = I2C_SMBUS_I2C_BLOCK_DATA)
(231,at24->nvmem = nvmem_register(&at24->nvmem_config)
(232,at24->client[i])
(233,)
(234,at24)
(235,num_addresses)
(236,at24->nvmem_config)
(237,)
(238,at24)
(239,ENODEV)
(240,magic)
(241,at24->nvmem_config.compat)
(242,sizeof(struct i2c_client *)
(243,chip.byte_len)
(244,at24->read_func)
(245,I2C_SMBUS_WORD_DATA)
(246,)
(247,nvmem)
(248,nvmem)
(249,true)
(250,chip)
(251,1)
(252,compat)
(253,i2c_set_clientdata(client, at24)
(254,i2c_unregister_device(at24->client[i])
(255,i = 1)
(256,base_dev)
(257,magic)
(258,adapter)
(259,client)
(260,stride)
(261,if (!at24->writebuf)
(262,at24->write_func = at24_eeprom_write_smbus_byte)
(263,1)
(264,at24)
(265,at24->nvmem_config.base_dev = &client->dev)
(266,at24)
(267,)
(268,at24->client[0])
(269,client)
(270,if (at24->use_smbus_write == I2C_SMBUS_I2C_BLOCK_DATA)
(271,)
(272,err)
(273,&client->dev)
(274,chip.page_size)
(275,if (id)
(276,nvmem_config)
(277,chip)
(278,client)
(279,"byte_len looks suspicious (no power of 2)
(280,at24->client[0] = client)
(281,*(struct at24_platform_data *)
(282,nvmem_config)
(283,at24)
(284,at24->nvmem_config)
(285,"%u byte %s EEPROM, %s, %u bytes/write\\n")
(286,use_smbus)
(287,)
(288,-EPFNOSUPPORT)
(289,write_max = chip.page_size)
(290,"byte")
(291,flags)
(292,at24->nvmem_config.stride = 1)
(293,chip.flags)
(294,aid)
(295,at24)
(296,at24->client)
(297,at24_read(at24, 0, &test_byte, 1)
(298,size)
(299,chip)
(300,return 0;)
(301,client->dev)
(302,use_smbus == I2C_SMBUS_WORD_DATA)
(303,dev)
(304,client)
(305,"page_size looks suspicious (no power of 2)
(306,AT24_SIZE_BYTELEN)
(307,chip.byte_len)
(308,chip)
(309,nvmem_config)
(310,at24->nvmem_config.priv = at24)
(311,I2C_SMBUS_I2C_BLOCK_DATA)
(312,)
(313,0)
(314,at24->nvmem_config)
(315,!chip.page_size)
(316,PTR_ERR(at24->nvmem)
(317,at24)
(318,1)
(319,if (writable)
(320,chip.byte_len = 6)
(321,chip.flags = magic & AT24_BITMASK(AT24_SIZE_FLAGS)
(322,at24)
(323,BIT(magic & AT24_BITMASK(AT24_SIZE_BYTELEN)
(324,&client->dev)
(325,return -ENODEV;)
(326,magic)
(327,client->dev)
(328,at24_eeprom_read_smbus)
(329,at24->use_smbus)
(330,chip)
(331,client->addr + i)
(332,chip.flags)
(333,nvmem_config)
(334,at24->client)
(335,platform_data)
(336,page_size)
(337,client->addr + i)
(338,&at24->lock)
(339,err)
(340,&client->dev)
(341,GFP_KERNEL)
(342,at24)
(343,chip.setup(at24->nvmem, chip.context)
(344,client->dev.platform_data)
(345,at24_eeprom_read_mac)
(346,at24->nvmem_config.read_only = !writable)
(347,I2C_SMBUS_BYTE_DATA)
(348,0)
(349,&client->dev)
(350,struct at24_data)
(351,IS_ERR(at24->nvmem)
(352,goto err_clients;)
(353,)
(354,if (aid)
(355,magic & AT24_BITMASK(AT24_SIZE_FLAGS)
(356,use_smbus = 0)
(357,num_addresses)
(358,chip.flags & AT24_FLAG_SERIAL)
(359,at24->nvmem)
(360,client->dev)
(361,if (!magic)
(362,!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)
(363,at24->read_func = at24->use_smbus ? at24_eeprom_read_smbus\n\\n\\t\\t\\t\\t\\t\\t  : at24_eeprom_read_i2c)
(364,)
(365,devm_kzalloc(&client->dev,\n\\n\\t\\t\\t\\twrite_max + 2, GFP_KERNEL)
(366,chip)
(367,at24->nvmem_config.size = chip.byte_len)
(368,i)
(369,i)
(370,client)
(371,id)
(372,chip.page_size = 1)
(373,at24->client[i])
(374,aid->driver_data)
(375,at24)
(376,i++)
(377,I2C_SMBUS_I2C_BLOCK_DATA)
(378,"invalid device data - cannot have both AT24_FLAG_SERIAL & AT24_FLAG_MAC.")
(379,write_max)
(380,use_smbus_write)
(381,at24_eeprom_read_i2c)
(382,dev)
(383,goto err_clients;)
(384,client)
(385,client)
(386,i)
(387,6)
(388,1)
(389,)
(390,sizeof(struct at24_data)
(391,at24->read_func = at24_eeprom_read_serial)
(392,at24->nvmem_config.base_dev)
(393,at24)
(394,nvmem_config)
(395,dev_notice(&client->dev, "Falling back to %s reads, "\n\\n\\t\\t\\t   "performance will suffer\\n", use_smbus ==\n\\n\\t\\t\\t   I2C_SMBUS_WORD_DATA ? "word" : "byte")
(396,at24->write_max = write_max)
(397,at24)
(398,chip.page_size)
(399,AT24_FLAG_SERIAL)
(400,AT24_FLAG_MAC)
(401,chip)
(402,driver_data)
(403,at24->nvmem_config)
(404,chip)
(405,write_max)
(406,1)
(407,client)
(408,chip.byte_len)
(409,context)
(410,at24)
(411,if (chip.flags & AT24_FLAG_SERIAL)
(412,chip)
(413,I2C_SMBUS_I2C_BLOCK_DATA)
(414,at24->nvmem_config.reg_write)
(415,use_smbus ==\n\\n\\t\\t\\t   I2C_SMBUS_WORD_DATA)
(416,)
(417,at24->nvmem_config.name)
(418,at24_eeprom_write_i2c)
(419,i)
(420,magic = id->driver_data)
(421,8)
(422,magic = 0)
(423,at24)
(424,i)
(425,return -EINVAL;)
(426,client)
(427,chip)
(428,id)
(429,return -ENOMEM;)
(430,reg_write)
(431,I2C_SMBUS_BLOCK_MAX)
(432,num_addresses)
(433,dev)
(434,num_addresses)
(435,use_smbus = I2C_SMBUS_BYTE_DATA)
(436,at24)
(437,use_smbus = I2C_SMBUS_I2C_BLOCK_DATA)
(438,struct at24_platform_data *)
(439,at24)
(440,at24)
(441,chip.page_size)
(442,I2C_SMBUS_WORD_DATA)
(443,page_size)
(444,if (client->dev.platform_data)
(445,dev)
(446,chip)
(447,root_only)
(448,use_smbus && write_max > I2C_SMBUS_BLOCK_MAX)
(449,chip)
(450,context)
(451,chip.context)
(452,client->dev)
(453,at24->nvmem)
(454,dev)
(455,chip.byte_len)
(456,writebuf)
(457,use_smbus)
(458,at24->read_func)
(459,if (!at24)
(460,adapter)
(461,at24->num_addresses)
(462,dev)
(463,"Falling back to %s reads, "\n\\n\\t\\t\\t   "performance will suffer\\n")
(464,at24)
(465,use_smbus_write)
(466,chip.flags & AT24_FLAG_ADDR16)
(467,chip.flags & AT24_FLAG_SERIAL)
(468,adapter)
(469,i++)
(470,adapter)
(471,dev_warn(&client->dev,\n\\n\\t\\t\\t"page_size looks suspicious (no power of 2)
(472,at24->read_func = at24_eeprom_read_mac)
(473,i)
(474,at24)
(475,client->adapter)
(476,I2C_FUNC_SMBUS_READ_I2C_BLOCK)
(477,client)
(478,write_max)
(479,use_smbus)
(480,chip)
(481,AT24_FLAG_TAKE8ADDR)
(482,at24)
(483,at24->num_addresses = num_addresses)
(484,return -EINVAL;)
(485,if (i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_READ_I2C_BLOCK)
(486,I2C_FUNC_SMBUS_WRITE_I2C_BLOCK)
(487,chip)
(488,byte_len)
(489,writable = !(chip.flags & AT24_FLAG_READONLY)
(490,at24->use_smbus_write)
(491,use_smbus)
(492,chip)
(493,sizeof(struct at24_data)
(494,driver_data)
(495,chip.flags & AT24_FLAG_MAC)
(496,&client->dev)
(497,ENOMEM)
(498,struct i2c_client *client)
(499,dev)
(500,!is_power_of_2(chip.byte_len)
(501,)
(502,i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_READ_WORD_DATA)
(503,client->dev)
(504,i2c_new_dummy(client->adapter,\n\\n\\t\\t\\t\\t\\tclient->addr + i)
(505,at24->write_func)
(506,client)
(507,&client->dev)
(508,write_max)
(509,flags)
(510,nvmem_config)
(511,err = -EADDRINUSE)
(512,AT24_FLAG_READONLY)
(513,at24_read)
(514,return -EPFNOSUPPORT;)
(515,flags)
(516,i < num_addresses)
(517,"cannot write due to controller restrictions.")
(518,err = -ENODEV)
(519,RET)
(520,i)
(521,chip.setup = NULL)
(522,EINVAL)
(523,write_func)
(524,addr)
(525,chip)
(526,write_max)
(527,client->dev)
(528,client->dev)
(529,chip)
(530,client)
(531,i)
(532,at24->nvmem_config)
(533,client->adapter)
(534,at24)
(535,if ((chip.flags & AT24_FLAG_SERIAL)
(536,at24->lock)
(537,)
(538,client->name)
(539,chip.flags)
(540,dev)
(541,nvmem_config)
(542,)
(543,priv)
(544,at24->write_max)
(545,client)
(546,at24->nvmem)
(547,-EPFNOSUPPORT)
(548,err)
(549,writebuf)
(550,-ENOMEM)
(551,chip.setup)
(552,struct i2c_client *)
(553,chip.byte_len == 4)
(554,at24)
(555,!at24->client[i])
(556,i)
(557,1)
(558,-ENODEV)
(559,!magic)
(560,write_max)
(561,nvmem_config)
(562,flags)
(563,at24)
(564,!at24)
(565,nvmem_config)
(566,&at24->nvmem_config)
(567,dev)
(568,client->dev)
(569,nvmem_config)
(570,at24->client)
(571,chip.byte_len)
(572,dev)
(573,)
(574,at24->use_smbus ? at24_eeprom_read_smbus\n\\n\\t\\t\\t\\t\\t\\t  : at24_eeprom_read_i2c)
(575,AT24_BITMASK(AT24_SIZE_FLAGS)
(576,read_func)
(577,if (chip.setup)
(578,writable)
(579,write_max)
(580,writable ? "writable" : "read-only")
(581,chip)
(582,at24->nvmem_config.stride)
(583,client)
(584,word_size)
(585,nvmem)
(586,const struct i2c_device_id *id)
(587,mutex_init(&at24->lock)
(588,)
(589,client)
(590,write_func)
(591,for (i = 1; i < num_addresses; i++)
(592,if (use_smbus == I2C_SMBUS_WORD_DATA ||\n\\n\\t    use_smbus == I2C_SMBUS_BYTE_DATA)
(593,chip)
(594,setup)
(595,at24->nvmem_config.name = dev_name(&client->dev)
(596,client->dev)
(597,)
(598,I2C_SMBUS_WORD_DATA)
(599,&client->dev)
(600,-EINVAL)
(601,0)
(602,at24->nvmem_config)
(603,is_power_of_2(chip.page_size)
(604,at24)
(605,use_smbus)
(606,client)
(607,writable)
(608,chip.context)
(609,0)
(610,at24->read_func)
(611,if (!is_power_of_2(chip.page_size)
(612,client->dev)
(613,for (i = 1; i < num_addresses; i++)
(614,at24->nvmem_config.dev = &client->dev)
(615,nvmem_config)
(616,chip)
(617,AT24_SIZE_FLAGS)
(618,client->dev)
(619,EADDRINUSE)
(620,i)
(621,)
(622,addr)
(623,at24)
(624,at24_eeprom_write_smbus_block)
(625,use_smbus_write)
(626,at24)
(627,err)
(628,at24->use_smbus_write = use_smbus_write)
(629,use_smbus_write = I2C_SMBUS_BYTE_DATA)
(630,write_max > I2C_SMBUS_BLOCK_MAX)
(631,at24->nvmem_config)
(632,at24->use_smbus_write)
(633,page_size)
(634,dev_warn(&client->dev,\n\\n\\t\\t\\t\\t"cannot write due to controller restrictions.")
(635,write_max)
(636,)
(637,io_limit)
(638,at24->nvmem)
(639,chip.flags & AT24_FLAG_ADDR16)
(640,at24->write_func = at24_eeprom_write_smbus_block)
(641,at24)
(642,AT24_FLAG_MAC)
(643,at24)
(644,)
(645,at24->client)
(646,at24->nvmem_config.word_size)
(647,!use_smbus)
(648,err)
(649,at24->write_max)
(650,goto err_clients;)
(651,dev_err(&client->dev, "page_size must not be 0!\\n")
(652,byte_len)
(653,DIV_ROUND_UP(chip.byte_len,\n\\n\\t\\t\\t(chip.flags & AT24_FLAG_ADDR16)
(654,!writable)
(655,&client->dev)
(656,i = 1)
(657,magic = aid->driver_data)
(658,write_func)
(659,read_func)
(660,chip.flags)
(661,aid)
(662,client->addr)
(663,client)
(664,I2C_SMBUS_BYTE_DATA)
(665,chip.flags & AT24_FLAG_MAC)
(666,chip.flags & AT24_FLAG_MAC && chip.byte_len == 4)
(667,I2C_FUNC_SMBUS_WRITE_BYTE_DATA)
(668,use_smbus)
(669,chip)
(670,at24)
(671,client)
(672,at24)
(673,EPFNOSUPPORT)
(674,nvmem_config)
(675,use_smbus ==\n\\n\\t\\t\\t   I2C_SMBUS_WORD_DATA ? "word" : "byte")
(676,i2c_check_functionality(client->adapter,\n\\n\\t\\t\\t\\tI2C_FUNC_SMBUS_READ_BYTE_DATA)
(677,if (chip.flags & AT24_FLAG_ADDR16)
(678,writable)
(679,at24->nvmem_config.reg_read = at24_read)
(680,!is_power_of_2(chip.page_size)
(681,0)
(682,use_smbus == I2C_SMBUS_BYTE_DATA)
(683,ENOMEM)
(684,dev)
(685,client->dev)
(686,num_addresses = 8)
(687,flags)
(688,chip)
(689,use_smbus_write)
(690,magic)
(691,-EINVAL)
(692,-ENOMEM)
(693,devm_kzalloc(&client->dev, sizeof(struct at24_data)
(694,at24->writebuf)
(695,err_clients:)
(696,aid)
(697,at24)
(698,at24->nvmem_config.priv)
(699,at24->chip)
(700,&client->dev)
(701,nvmem_config)
(702,I2C_SMBUS_BLOCK_MAX)
(703,i)
(704,num_addresses =\\tDIV_ROUND_UP(chip.byte_len,\n\\n\\t\\t\\t(chip.flags & AT24_FLAG_ADDR16)
(705,chip.flags)
(706,at24)
(707,use_smbus == I2C_SMBUS_WORD_DATA ||\n\\n\\t    use_smbus == I2C_SMBUS_BYTE_DATA)
(708,magic)
(709,at24_acpi_ids)
(710,use_smbus)
(711,I2C_SMBUS_BYTE_DATA)
(712,2)
(713,client)
(714,client)
(715,at24->nvmem_config)
(716,(chip.flags & AT24_FLAG_ADDR16)
(717,use_smbus_write)
(718,)
(719,at24)
(720,at24->nvmem_config.owner = THIS_MODULE)
(721,flags)
(722,err)
(723,chip.flags)
(724,client->addr)
(725,client)
(726,flags)
(727,adapter)
(728,client)
(729,"word")
(730,at24->write_func)
(731,I2C_FUNC_SMBUS_READ_BYTE_DATA)
(732,use_smbus_write)
(733,i)
(734,(struct at24_platform_data *)
(735,at24->nvmem_config)
(736,write_max)
(737,i)
(738,AT24_FLAG_ADDR16)
(739,at24->write_func)
(740,client)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^