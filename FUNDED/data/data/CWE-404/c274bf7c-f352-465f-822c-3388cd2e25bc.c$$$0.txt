-----label-----
0
-----code-----
static int ce_aes_expandkey(struct crypto_aes_ctx *ctx, const u8 *in_key,
			    unsigned int key_len)
{
	/*
	 * The AES key schedule round constants
	 */
	static u8 const rcon[] = {
		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
	};

	u32 kwords = key_len / sizeof(u32);
	struct aes_block *key_enc, *key_dec;
	int i, j;

	if (key_len != AES_KEYSIZE_128 &&
	    key_len != AES_KEYSIZE_192 &&
	    key_len != AES_KEYSIZE_256)
		return -EINVAL;

	memcpy(ctx->key_enc, in_key, key_len);
	ctx->key_length = key_len;

	kernel_neon_begin();
	for (i = 0; i < sizeof(rcon); i++) {
		u32 *rki = ctx->key_enc + (i * kwords);
		u32 *rko = rki + kwords;

#ifndef CONFIG_CPU_BIG_ENDIAN
		rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8);
		rko[0] = rko[0] ^ rki[0] ^ rcon[i];
#else
		rko[0] = rol32(ce_aes_sub(rki[kwords - 1]), 8);
		rko[0] = rko[0] ^ rki[0] ^ (rcon[i] << 24);
#endif
		rko[1] = rko[0] ^ rki[1];
		rko[2] = rko[1] ^ rki[2];
		rko[3] = rko[2] ^ rki[3];

		if (key_len == AES_KEYSIZE_192) {
			if (i >= 7)
				break;
			rko[4] = rko[3] ^ rki[4];
			rko[5] = rko[4] ^ rki[5];
		} else if (key_len == AES_KEYSIZE_256) {
			if (i >= 6)
				break;
			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];
			rko[5] = rko[4] ^ rki[5];
			rko[6] = rko[5] ^ rki[6];
			rko[7] = rko[6] ^ rki[7];
		}
	}

	/*
	 * Generate the decryption keys for the Equivalent Inverse Cipher.
	 * This involves reversing the order of the round keys, and applying
	 * the Inverse Mix Columns transformation on all but the first and
	 * the last one.
	 */
	key_enc = (struct aes_block *)ctx->key_enc;
	key_dec = (struct aes_block *)ctx->key_dec;
	j = num_rounds(ctx);

	key_dec[0] = key_enc[j];
	for (i = 1, j--; j > 0; i++, j--)
		ce_aes_invert(key_dec + i, key_enc + j);
	key_dec[i] = key_enc[0];

	kernel_neon_end();
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
30,40
41,42
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
49,50
51,52
52,53
52,54
53,54
56,57
57,58
57,59
57,60
58,59
60,61
60,62
63,64
63,65
66,67
67,68
67,69
67,70
69,70
71,72
73,74
73,75
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
89,90
91,92
92,93
93,94
95,96
96,97
96,98
96,99
96,100
97,98
99,100
99,101
100,101
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
115,116
116,117
117,118
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
125,126
125,127
126,127
128,129
129,130
130,131
132,133
133,134
135,136
135,137
135,138
135,139
135,140
135,141
135,142
135,143
136,137
137,138
137,139
138,139
140,141
140,142
140,143
143,144
144,145
144,146
145,146
145,147
146,147
149,150
150,151
150,152
151,152
153,154
155,156
156,157
156,158
157,158
159,160
159,161
159,162
162,163
163,164
163,165
164,165
166,167
168,169
169,170
169,171
170,171
170,172
171,172
174,175
174,176
174,177
175,176
177,178
177,179
178,179
180,181
180,182
181,182
183,184
183,185
184,185
188,189
189,190
189,191
190,191
190,192
191,192
194,195
194,196
195,196
195,197
196,197
196,198
197,198
200,201
200,202
201,202
204,205
204,206
205,206
207,208
209,210
210,211
210,212
211,212
211,213
212,213
215,216
215,217
216,217
216,218
217,218
220,221
220,222
221,222
224,225
225,226
225,227
226,227
226,228
227,228
230,231
230,232
231,232
231,233
232,233
235,236
235,237
236,237
239,240
240,241
240,242
241,242
241,243
242,243
245,246
245,247
246,247
246,248
247,248
250,251
250,252
251,252
254,255
254,256
254,257
255,256
255,257
256,257
258,259
260,261
260,262
260,263
261,262
261,263
262,263
262,264
263,264
267,268
268,269
268,270
269,270
269,271
270,271
273,274
273,275
274,275
274,276
275,276
278,279
278,280
279,280
282,283
283,284
283,285
284,285
284,286
285,286
288,289
288,290
289,290
289,291
290,291
293,294
293,295
294,295
297,298
297,299
298,299
298,300
299,300
301,302
303,304
303,305
303,306
303,307
303,308
304,305
304,306
305,306
305,307
306,307
310,311
311,312
311,313
312,313
312,314
313,314
316,317
316,318
317,318
317,319
318,319
320,321
320,322
321,322
324,325
324,326
325,326
328,329
329,330
329,331
330,331
330,332
331,332
334,335
334,336
335,336
335,337
336,337
339,340
339,341
340,341
343,344
344,345
344,346
345,346
345,347
346,347
349,350
349,351
350,351
350,352
351,352
354,355
354,356
355,356
358,359
359,360
359,361
360,361
360,362
361,362
364,365
364,366
365,366
365,367
366,367
369,370
369,371
370,371
373,374
374,375
374,376
375,376
377,378
377,379
378,379
378,380
379,380
381,382
383,384
383,385
384,385
387,388
388,389
388,390
389,390
391,392
391,393
392,393
392,394
393,394
395,396
397,398
397,399
398,399
401,402
402,403
402,404
403,404
405,406
405,407
406,407
408,409
410,411
411,412
411,413
412,413
412,414
413,414
416,417
416,418
417,418
419,420
421,422
421,423
421,424
421,425
422,423
423,424
423,425
424,425
424,426
425,426
428,429
429,430
431,432
431,433
432,433
435,436
435,437
436,437
437,438
439,440
440,441
442,443
443,444
443,445
443,446
444,445
446,447
446,448
447,448
449,450
451,452
451,453
452,453
454,455
456,457
457,458
457,459
458,459
458,460
459,460
461,462
463,464
463,465
464,465
467,468
468,469
469,470
471,472
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,25,27,28,31,32,33,34,35,36,37,38,39,40,44,46,50,54,55,59,61,62,64,65,68,70,72,78,80,83,85,88,90,94,98,101,102,104,106,111,112,114,118,123,124,127,131,134,139,141,142,147,148,152,154,158,160,161,165,167,172,173,176,179,182,185,186,187,192,193,198,199,202,203,206,208,213,214,218,219,222,223,228,229,233,234,237,238,243,244,248,249,252,253,257,259,264,265,266,271,272,276,277,280,281,286,287,291,292,295,296,300,302,307,308,309,314,315,319,322,323,326,327,332,333,337,338,341,342,347,348,352,353,356,357,362,363,367,368,371,372,376,380,382,385,386,390,394,396,399,400,404,407,409,414,415,418,420,426,427,430,433,434,438,441,445,448,450,453,455,460,462,465,466,470,472
-----computeFrom-----
48,49
48,50
74,75
74,76
75,76
75,77
76,77
76,78
81,82
81,83
86,87
86,88
108,109
108,110
121,122
121,123
125,126
125,127
144,145
144,146
150,151
150,152
163,164
163,165
169,170
169,171
183,184
183,185
189,190
189,191
194,195
194,196
195,196
195,197
210,211
210,212
215,216
215,217
225,226
225,227
230,231
230,232
240,241
240,242
245,246
245,247
255,256
255,257
262,263
262,264
268,269
268,270
273,274
273,275
283,284
283,285
288,289
288,290
298,299
298,300
305,306
305,307
311,312
311,313
316,317
316,318
329,330
329,331
334,335
334,336
344,345
344,346
349,350
349,351
359,360
359,361
364,365
364,366
374,375
374,376
388,389
388,390
402,403
402,404
411,412
411,413
424,425
424,426
431,432
431,433
446,447
446,448
451,452
451,453
457,458
457,459
-----guardedBy-----
-----guardedByNegation-----
257,300
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ce_aes_expandkey(struct crypto_aes_ctx *ctx, const u8 *in_key,			    unsigned int key_len){	/*	 * The AES key schedule round constants	 */	static u8 const rcon[] = {		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	};	u32 kwords = key_len / sizeof(u32);	struct aes_block *key_enc, *key_dec;	int i, j;	if (key_len != AES_KEYSIZE_128 &&	    key_len != AES_KEYSIZE_192 &&	    key_len != AES_KEYSIZE_256)		return -EINVAL;	memcpy(ctx->key_enc, in_key, key_len);	ctx->key_length = key_len;	kernel_neon_begin();	for (i = 0; i < sizeof(rcon); i++) {		u32 *rki = ctx->key_enc + (i * kwords);		u32 *rko = rki + kwords;#ifndef CONFIG_CPU_BIG_ENDIAN		rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ rcon[i];#else		rko[0] = rol32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ (rcon[i] << 24);#endif		rko[1] = rko[0] ^ rki[1];		rko[2] = rko[1] ^ rki[2];		rko[3] = rko[2] ^ rki[3];		if (key_len == AES_KEYSIZE_192) {			if (i >= 7)				break;			rko[4] = rko[3] ^ rki[4];			rko[5] = rko[4] ^ rki[5];		} else if (key_len == AES_KEYSIZE_256) {			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}	}	/*	 * Generate the decryption keys for the Equivalent Inverse Cipher.	 * This involves reversing the order of the round keys, and applying	 * the Inverse Mix Columns transformation on all but the first and	 * the last one.	 */	key_enc = (struct aes_block *)ctx->key_enc;	key_dec = (struct aes_block *)ctx->key_dec;	j = num_rounds(ctx);	key_dec[0] = key_enc[j];	for (i = 1, j--; j > 0; i++, j--)		ce_aes_invert(key_dec + i, key_enc + j);	key_dec[i] = key_enc[0];	kernel_neon_end();	return 0;}
static int
ce_aes_expandkey(struct crypto_aes_ctx *ctx, const u8 *in_key,			    unsigned int key_len)
ce_aes_expandkey
struct crypto_aes_ctx *ctx
struct crypto_aes_ctx
crypto_aes_ctx
*ctx
*
ctx
const u8 *in_key
const u8
u8
*in_key
*
in_key
unsigned int key_len
unsigned int
key_len
key_len
{	/*	 * The AES key schedule round constants	 */	static u8 const rcon[] = {		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	};	u32 kwords = key_len / sizeof(u32);	struct aes_block *key_enc, *key_dec;	int i, j;	if (key_len != AES_KEYSIZE_128 &&	    key_len != AES_KEYSIZE_192 &&	    key_len != AES_KEYSIZE_256)		return -EINVAL;	memcpy(ctx->key_enc, in_key, key_len);	ctx->key_length = key_len;	kernel_neon_begin();	for (i = 0; i < sizeof(rcon); i++) {		u32 *rki = ctx->key_enc + (i * kwords);		u32 *rko = rki + kwords;#ifndef CONFIG_CPU_BIG_ENDIAN		rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ rcon[i];#else		rko[0] = rol32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ (rcon[i] << 24);#endif		rko[1] = rko[0] ^ rki[1];		rko[2] = rko[1] ^ rki[2];		rko[3] = rko[2] ^ rki[3];		if (key_len == AES_KEYSIZE_192) {			if (i >= 7)				break;			rko[4] = rko[3] ^ rki[4];			rko[5] = rko[4] ^ rki[5];		} else if (key_len == AES_KEYSIZE_256) {			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}	}	/*	 * Generate the decryption keys for the Equivalent Inverse Cipher.	 * This involves reversing the order of the round keys, and applying	 * the Inverse Mix Columns transformation on all but the first and	 * the last one.	 */	key_enc = (struct aes_block *)ctx->key_enc;	key_dec = (struct aes_block *)ctx->key_dec;	j = num_rounds(ctx);	key_dec[0] = key_enc[j];	for (i = 1, j--; j > 0; i++, j--)		ce_aes_invert(key_dec + i, key_enc + j);	key_dec[i] = key_enc[0];	kernel_neon_end();	return 0;}
static u8 const rcon[] = {		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	};
static u8 const rcon[] = {		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	};
static u8 const
u8
rcon[] = {		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	}
rcon
[]
= {		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	}
{		0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,	}
0x01
0x02
0x04
0x08
0x10
0x20
0x40
0x80
0x1b
0x36
u32 kwords = key_len / sizeof(u32);
u32 kwords = key_len / sizeof(u32);
u32
u32
kwords = key_len / sizeof(u32)
kwords
= key_len / sizeof(u32)
key_len / sizeof(u32)
key_len
key_len
sizeof(u32)
u32
u32
u32

struct aes_block *key_enc, *key_dec;
struct aes_block *key_enc, *key_dec;
struct aes_block
aes_block
*key_enc
*
key_enc
*key_dec
*
key_dec
int i, j;
int i, j;
int
i
i
j
j
if (key_len != AES_KEYSIZE_128 &&	    key_len != AES_KEYSIZE_192 &&	    key_len != AES_KEYSIZE_256)		return -EINVAL;
key_len != AES_KEYSIZE_128 &&	    key_len != AES_KEYSIZE_192 &&	    key_len != AES_KEYSIZE_256
key_len != AES_KEYSIZE_128 &&	    key_len != AES_KEYSIZE_192
key_len != AES_KEYSIZE_128
key_len
key_len
AES_KEYSIZE_128
AES_KEYSIZE_128
key_len != AES_KEYSIZE_192
key_len
key_len
AES_KEYSIZE_192
AES_KEYSIZE_192
key_len != AES_KEYSIZE_256
key_len
key_len
AES_KEYSIZE_256
AES_KEYSIZE_256
return -EINVAL;
-EINVAL
EINVAL
EINVAL
memcpy(ctx->key_enc, in_key, key_len);
memcpy(ctx->key_enc, in_key, key_len)
memcpy
memcpy
ctx->key_enc
ctx
ctx
key_enc
in_key
in_key
key_len
key_len
ctx->key_length = key_len;
ctx->key_length = key_len
ctx->key_length
ctx
ctx
key_length
key_len
key_len
kernel_neon_begin();
kernel_neon_begin()
kernel_neon_begin
kernel_neon_begin
for (i = 0; i < sizeof(rcon); i++) {		u32 *rki = ctx->key_enc + (i * kwords);		u32 *rko = rki + kwords;#ifndef CONFIG_CPU_BIG_ENDIAN		rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ rcon[i];#else		rko[0] = rol32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ (rcon[i] << 24);#endif		rko[1] = rko[0] ^ rki[1];		rko[2] = rko[1] ^ rki[2];		rko[3] = rko[2] ^ rki[3];		if (key_len == AES_KEYSIZE_192) {			if (i >= 7)				break;			rko[4] = rko[3] ^ rki[4];			rko[5] = rko[4] ^ rki[5];		} else if (key_len == AES_KEYSIZE_256) {			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}	}
i = 0;
i = 0
i
i
0
i < sizeof(rcon)
i
i
sizeof(rcon)
(rcon)
rcon
rcon
i++
i
i
{		u32 *rki = ctx->key_enc + (i * kwords);		u32 *rko = rki + kwords;#ifndef CONFIG_CPU_BIG_ENDIAN		rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ rcon[i];#else		rko[0] = rol32(ce_aes_sub(rki[kwords - 1]), 8);		rko[0] = rko[0] ^ rki[0] ^ (rcon[i] << 24);#endif		rko[1] = rko[0] ^ rki[1];		rko[2] = rko[1] ^ rki[2];		rko[3] = rko[2] ^ rki[3];		if (key_len == AES_KEYSIZE_192) {			if (i >= 7)				break;			rko[4] = rko[3] ^ rki[4];			rko[5] = rko[4] ^ rki[5];		} else if (key_len == AES_KEYSIZE_256) {			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}	}
u32 *rki = ctx->key_enc + (i * kwords);
u32 *rki = ctx->key_enc + (i * kwords);
u32
u32
*rki = ctx->key_enc + (i * kwords)
*
rki
= ctx->key_enc + (i * kwords)
ctx->key_enc + (i * kwords)
ctx->key_enc
ctx
ctx
key_enc
(i * kwords)
i * kwords
i
i
kwords
kwords
u32 *rko = rki + kwords;
u32 *rko = rki + kwords;
u32
u32
*rko = rki + kwords
*
rko
= rki + kwords
rki + kwords
rki
rki
kwords
kwords
rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8);
rko[0] = ror32(ce_aes_sub(rki[kwords - 1]), 8)
rko[0]
rko
rko
0
ror32(ce_aes_sub(rki[kwords - 1]), 8)
ror32
ror32
ce_aes_sub(rki[kwords - 1])
ce_aes_sub
ce_aes_sub
rki[kwords - 1]
rki
rki
kwords - 1
kwords
kwords
1
8
rko[0] = rko[0] ^ rki[0] ^ rcon[i];
rko[0] = rko[0] ^ rki[0] ^ rcon[i]
rko[0]
rko
rko
0
rko[0] ^ rki[0] ^ rcon[i]
rko[0] ^ rki[0]
rko[0]
rko
rko
0
rki[0]
rki
rki
0
rcon[i]
rcon
rcon
i
i
rko[1] = rko[0] ^ rki[1];
rko[1] = rko[0] ^ rki[1]
rko[1]
rko
rko
1
rko[0] ^ rki[1]
rko[0]
rko
rko
0
rki[1]
rki
rki
1
rko[2] = rko[1] ^ rki[2];
rko[2] = rko[1] ^ rki[2]
rko[2]
rko
rko
2
rko[1] ^ rki[2]
rko[1]
rko
rko
1
rki[2]
rki
rki
2
rko[3] = rko[2] ^ rki[3];
rko[3] = rko[2] ^ rki[3]
rko[3]
rko
rko
3
rko[2] ^ rki[3]
rko[2]
rko
rko
2
rki[3]
rki
rki
3
if (key_len == AES_KEYSIZE_192) {			if (i >= 7)				break;			rko[4] = rko[3] ^ rki[4];			rko[5] = rko[4] ^ rki[5];		} else if (key_len == AES_KEYSIZE_256) {			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}
key_len == AES_KEYSIZE_192
key_len
key_len
AES_KEYSIZE_192
AES_KEYSIZE_192
{			if (i >= 7)				break;			rko[4] = rko[3] ^ rki[4];			rko[5] = rko[4] ^ rki[5];		}
if (i >= 7)				break;
i >= 7
i
i
7
break;
rko[4] = rko[3] ^ rki[4];
rko[4] = rko[3] ^ rki[4]
rko[4]
rko
rko
4
rko[3] ^ rki[4]
rko[3]
rko
rko
3
rki[4]
rki
rki
4
rko[5] = rko[4] ^ rki[5];
rko[5] = rko[4] ^ rki[5]
rko[5]
rko
rko
5
rko[4] ^ rki[5]
rko[4]
rko
rko
4
rki[5]
rki
rki
5
if (key_len == AES_KEYSIZE_256) {			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}
key_len == AES_KEYSIZE_256
key_len
key_len
AES_KEYSIZE_256
AES_KEYSIZE_256
{			if (i >= 6)				break;			rko[4] = ce_aes_sub(rko[3]) ^ rki[4];			rko[5] = rko[4] ^ rki[5];			rko[6] = rko[5] ^ rki[6];			rko[7] = rko[6] ^ rki[7];		}
if (i >= 6)				break;
i >= 6
i
i
6
break;
rko[4] = ce_aes_sub(rko[3]) ^ rki[4];
rko[4] = ce_aes_sub(rko[3]) ^ rki[4]
rko[4]
rko
rko
4
ce_aes_sub(rko[3]) ^ rki[4]
ce_aes_sub(rko[3])
ce_aes_sub
ce_aes_sub
rko[3]
rko
rko
3
rki[4]
rki
rki
4
rko[5] = rko[4] ^ rki[5];
rko[5] = rko[4] ^ rki[5]
rko[5]
rko
rko
5
rko[4] ^ rki[5]
rko[4]
rko
rko
4
rki[5]
rki
rki
5
rko[6] = rko[5] ^ rki[6];
rko[6] = rko[5] ^ rki[6]
rko[6]
rko
rko
6
rko[5] ^ rki[6]
rko[5]
rko
rko
5
rki[6]
rki
rki
6
rko[7] = rko[6] ^ rki[7];
rko[7] = rko[6] ^ rki[7]
rko[7]
rko
rko
7
rko[6] ^ rki[7]
rko[6]
rko
rko
6
rki[7]
rki
rki
7
key_enc = (struct aes_block *)ctx->key_enc;
key_enc = (struct aes_block *)ctx->key_enc
key_enc
key_enc
(struct aes_block *)ctx->key_enc
struct aes_block *
struct aes_block
aes_block
*
*
ctx->key_enc
ctx
ctx
key_enc
key_dec = (struct aes_block *)ctx->key_dec;
key_dec = (struct aes_block *)ctx->key_dec
key_dec
key_dec
(struct aes_block *)ctx->key_dec
struct aes_block *
struct aes_block
aes_block
*
*
ctx->key_dec
ctx
ctx
key_dec
j = num_rounds(ctx);
j = num_rounds(ctx)
j
j
num_rounds(ctx)
num_rounds
num_rounds
ctx
ctx
key_dec[0] = key_enc[j];
key_dec[0] = key_enc[j]
key_dec[0]
key_dec
key_dec
0
key_enc[j]
key_enc
key_enc
j
j
for (i = 1, j--; j > 0; i++, j--)		ce_aes_invert(key_dec + i, key_enc + j);
i = 1, j--;
i = 1, j--
i = 1
i
i
1
j--
j
j
j > 0
j
j
0
i++, j--
i++
i
i
j--
j
j
ce_aes_invert(key_dec + i, key_enc + j);
ce_aes_invert(key_dec + i, key_enc + j)
ce_aes_invert
ce_aes_invert
key_dec + i
key_dec
key_dec
i
i
key_enc + j
key_enc
key_enc
j
j
key_dec[i] = key_enc[0];
key_dec[i] = key_enc[0]
key_dec[i]
key_dec
key_dec
i
i
key_enc[0]
key_enc
key_enc
0
kernel_neon_end();
kernel_neon_end()
kernel_neon_end
kernel_neon_end
return 0;
0
-----joern-----
(186,7,0)
(91,187,0)
(31,191,0)
(146,29,0)
(240,142,0)
(79,185,0)
(144,198,0)
(167,1,0)
(212,250,0)
(34,257,0)
(26,158,0)
(22,123,0)
(176,195,0)
(190,6,0)
(122,7,0)
(187,132,0)
(173,87,0)
(216,263,0)
(119,221,0)
(58,96,0)
(38,146,0)
(238,128,0)
(201,250,0)
(154,199,0)
(74,227,0)
(238,1,0)
(36,177,0)
(105,197,0)
(241,136,0)
(105,192,0)
(87,222,0)
(271,48,0)
(170,180,0)
(54,35,0)
(259,212,0)
(39,126,0)
(217,228,0)
(145,147,0)
(118,1,0)
(233,5,0)
(66,137,0)
(171,201,0)
(68,74,0)
(63,250,0)
(262,71,0)
(130,42,0)
(128,238,0)
(190,267,0)
(220,46,0)
(45,66,0)
(228,217,0)
(42,250,0)
(195,132,0)
(249,128,0)
(231,143,0)
(51,142,0)
(241,228,0)
(50,72,0)
(41,260,0)
(164,138,0)
(164,126,0)
(71,6,0)
(101,130,0)
(84,146,0)
(95,30,0)
(133,146,0)
(122,103,0)
(233,222,0)
(212,22,0)
(268,192,0)
(179,4,0)
(33,94,0)
(100,144,0)
(66,38,0)
(192,161,0)
(96,66,0)
(78,191,0)
(147,101,0)
(199,9,0)
(72,250,0)
(199,22,0)
(70,5,0)
(218,82,0)
(152,209,0)
(62,42,0)
(109,63,0)
(83,250,0)
(224,4,0)
(22,199,0)
(26,250,0)
(250,13,0)
(54,250,0)
(93,132,0)
(230,15,0)
(17,9,0)
(166,75,0)
(113,48,0)
(2,128,0)
(263,250,0)
(107,105,0)
(170,15,0)
(209,24,0)
(221,192,0)
(82,139,0)
(69,212,0)
(182,150,0)
(25,122,0)
(221,119,0)
(111,201,0)
(60,93,0)
(242,29,0)
(16,221,0)
(177,250,0)
(115,177,0)
(236,54,0)
(192,142,0)
(1,250,0)
(29,117,0)
(13,29,0)
(13,66,0)
(46,101,0)
(241,67,0)
(38,71,0)
(139,82,0)
(164,212,0)
(185,225,0)
(28,136,0)
(57,108,0)
(97,83,0)
(149,269,0)
(150,22,0)
(13,250,0)
(175,190,0)
(49,57,0)
(232,121,0)
(177,172,0)
(74,35,0)
(191,66,0)
(164,95,0)
(38,66,0)
(9,172,0)
(87,173,0)
(149,45,0)
(74,250,0)
(158,198,0)
(130,91,0)
(197,267,0)
(82,132,0)
(269,149,0)
(173,159,0)
(61,96,0)
(156,270,0)
(105,110,0)
(5,66,0)
(4,6,0)
(243,142,0)
(253,260,0)
(207,117,0)
(251,142,0)
(72,92,0)
(146,132,0)
(27,6,0)
(92,35,0)
(269,108,0)
(270,117,0)
(42,101,0)
(121,45,0)
(92,72,0)
(30,153,0)
(229,41,0)
(48,227,0)
(11,94,0)
(247,57,0)
(168,210,0)
(253,6,0)
(164,177,0)
(121,29,0)
(91,102,0)
(42,130,0)
(9,250,0)
(255,66,0)
(161,192,0)
(205,137,0)
(164,54,0)
(96,153,0)
(80,121,0)
(164,27,0)
(151,103,0)
(135,221,0)
(260,253,0)
(78,169,0)
(147,250,0)
(59,238,0)
(29,142,0)
(238,59,0)
(81,197,0)
(155,142,0)
(178,105,0)
(158,123,0)
(257,132,0)
(10,123,0)
(143,41,0)
(124,142,0)
(35,92,0)
(52,132,0)
(162,138,0)
(173,194,0)
(164,57,0)
(228,241,0)
(260,41,0)
(221,197,0)
(48,66,0)
(41,142,0)
(134,13,0)
(153,30,0)
(35,75,0)
(164,65,0)
(73,261,0)
(153,147,0)
(32,9,0)
(157,170,0)
(108,269,0)
(141,102,0)
(5,233,0)
(186,192,0)
(160,45,0)
(213,27,0)
(45,121,0)
(147,153,0)
(87,35,0)
(24,142,0)
(116,142,0)
(194,123,0)
(94,15,0)
(150,250,0)
(170,4,0)
(85,87,0)
(12,140,0)
(45,149,0)
(267,196,0)
(189,27,0)
(208,217,0)
(126,250,0)
(203,95,0)
(267,197,0)
(37,143,0)
(159,66,0)
(65,103,0)
(198,150,0)
(46,250,0)
(120,150,0)
(110,143,0)
(237,253,0)
(261,112,0)
(174,142,0)
(193,137,0)
(273,170,0)
(83,194,0)
(9,199,0)
(169,137,0)
(18,155,0)
(181,225,0)
(234,65,0)
(3,26,0)
(56,210,0)
(188,23,0)
(117,15,0)
(210,192,0)
(65,24,0)
(161,6,0)
(219,161,0)
(223,263,0)
(19,190,0)
(244,140,0)
(184,253,0)
(194,173,0)
(126,59,0)
(170,142,0)
(99,257,0)
(172,227,0)
(42,108,0)
(9,194,0)
(252,126,0)
(136,15,0)
(165,187,0)
(90,83,0)
(24,209,0)
(143,110,0)
(199,154,0)
(154,66,0)
(155,15,0)
(245,186,0)
(106,139,0)
(239,65,0)
(263,78,0)
(98,74,0)
(117,270,0)
(146,38,0)
(130,101,0)
(65,41,0)
(204,154,0)
(172,75,0)
(40,67,0)
(89,138,0)
(140,59,0)
(198,144,0)
(131,230,0)
(74,222,0)
(198,158,0)
(1,238,0)
(217,15,0)
(206,102,0)
(222,123,0)
(250,137,0)
(164,26,0)
(57,250,0)
(244,233,0)
(191,78,0)
(77,209,0)
(102,91,0)
(125,159,0)
(30,137,0)
(47,5,0)
(88,63,0)
(200,250,0)
(264,137,0)
(164,83,0)
(63,169,0)
(128,66,0)
(8,142,0)
(215,142,0)
(164,46,0)
(110,105,0)
(43,46,0)
(72,59,0)
(159,173,0)
(150,198,0)
(27,155,0)
(169,78,0)
(4,170,0)
(23,66,0)
(127,42,0)
(55,159,0)
(138,41,0)
(91,130,0)
(222,233,0)
(140,250,0)
(214,103,0)
(101,137,0)
(272,154,0)
(248,147,0)
(187,91,0)
(20,144,0)
(261,192,0)
(260,86,0)
(71,38,0)
(117,29,0)
(202,269,0)
(92,23,0)
(201,222,0)
(87,250,0)
(209,197,0)
(197,142,0)
(103,112,0)
(148,26,0)
(147,108,0)
(164,142,0)
(0,164,0)
(59,137,0)
(227,48,0)
(53,72,0)
(263,30,0)
(95,250,0)
(164,201,0)
(67,241,0)
(181,164,0)
(163,195,0)
(67,15,0)
(196,267,0)
(138,119,0)
(14,54,0)
(246,136,0)
(258,142,0)
(153,96,0)
(78,263,0)
(266,187,0)
(227,74,0)
(114,95,0)
(102,66,0)
(254,140,0)
(108,137,0)
(235,142,0)
(136,241,0)
(23,92,0)
(76,87,0)
(44,191,0)
(21,13,0)
(265,71,0)
(86,260,0)
(183,217,0)
(227,172,0)
(143,103,0)
(1,169,0)
(233,244,0)
(226,230,0)
(119,142,0)
(164,63,0)
(140,244,0)
(129,67,0)
(267,190,0)
(256,23,0)
(211,132,0)
(144,66,0)
(228,217,1)
(53,50,1)
(230,131,1)
(210,192,1)
(38,71,1)
(77,152,1)
(23,256,1)
(141,42,1)
(105,107,1)
(220,108,1)
(161,219,1)
(182,120,1)
(198,150,1)
(110,105,1)
(120,26,1)
(2,1,1)
(175,81,1)
(241,136,1)
(164,57,1)
(78,263,1)
(270,156,1)
(54,250,1)
(170,273,1)
(62,127,1)
(147,101,1)
(189,170,1)
(204,272,1)
(13,29,1)
(229,197,1)
(147,108,1)
(122,25,1)
(9,32,1)
(170,4,1)
(162,89,1)
(244,140,1)
(164,201,1)
(271,113,1)
(260,253,1)
(90,222,1)
(119,221,1)
(163,230,1)
(164,65,1)
(144,66,1)
(103,151,1)
(114,203,1)
(117,15,1)
(93,60,1)
(143,37,1)
(67,15,1)
(18,27,1)
(263,216,1)
(164,54,1)
(164,212,1)
(71,262,1)
(42,62,1)
(72,59,1)
(27,6,1)
(139,106,1)
(176,163,1)
(218,132,1)
(72,53,1)
(46,43,1)
(55,87,1)
(265,255,1)
(33,11,1)
(197,267,1)
(132,52,1)
(252,169,1)
(209,77,1)
(91,102,1)
(267,196,1)
(187,165,1)
(52,211,1)
(149,45,1)
(67,129,1)
(96,61,1)
(227,48,1)
(225,185,1)
(63,109,1)
(240,24,1)
(25,110,1)
(239,234,1)
(36,35,1)
(146,132,1)
(101,130,1)
(32,17,1)
(150,182,1)
(117,270,1)
(102,66,1)
(46,250,1)
(5,70,1)
(247,49,1)
(223,63,1)
(198,144,1)
(272,9,1)
(213,189,1)
(263,250,1)
(65,41,1)
(87,250,1)
(164,177,1)
(269,202,1)
(60,172,1)
(34,94,1)
(249,2,1)
(80,232,1)
(208,183,1)
(179,228,1)
(228,241,1)
(89,192,1)
(43,220,1)
(221,197,1)
(135,16,1)
(83,97,1)
(164,0,1)
(236,14,1)
(66,38,1)
(91,187,1)
(85,83,1)
(83,250,1)
(173,87,1)
(17,212,1)
(122,103,1)
(20,150,1)
(129,40,1)
(130,91,1)
(1,167,1)
(190,19,1)
(87,76,1)
(211,116,1)
(12,254,1)
(61,58,1)
(238,128,1)
(245,122,1)
(71,6,1)
(29,117,1)
(134,21,1)
(9,194,1)
(263,30,1)
(224,179,1)
(191,66,1)
(218,93,1)
(260,86,1)
(256,188,1)
(177,250,1)
(88,30,1)
(14,195,1)
(107,178,1)
(159,125,1)
(199,9,1)
(145,95,1)
(150,250,1)
(231,210,1)
(39,252,1)
(95,250,1)
(212,69,1)
(128,249,1)
(257,99,1)
(65,239,1)
(154,66,1)
(238,1,1)
(184,237,1)
(241,67,1)
(203,101,1)
(9,250,1)
(147,248,1)
(206,141,1)
(259,194,1)
(118,126,1)
(69,259,1)
(164,95,1)
(226,59,1)
(153,147,1)
(121,80,1)
(195,132,1)
(255,82,1)
(207,242,1)
(60,158,1)
(155,15,1)
(28,67,1)
(201,171,1)
(234,210,1)
(221,135,1)
(94,33,1)
(140,12,1)
(0,240,1)
(74,68,1)
(169,78,1)
(257,132,1)
(164,26,1)
(131,226,1)
(194,173,1)
(4,6,1)
(95,114,1)
(45,121,1)
(1,169,1)
(237,229,1)
(221,192,1)
(158,198,1)
(250,13,1)
(104,257,1)
(188,72,1)
(38,146,1)
(79,228,1)
(140,59,1)
(262,265,1)
(96,66,1)
(248,145,1)
(171,111,1)
(26,3,1)
(99,34,1)
(127,46,1)
(216,223,1)
(4,224,1)
(1,250,1)
(266,102,1)
(93,132,1)
(57,247,1)
(87,35,1)
(76,85,1)
(152,65,1)
(161,6,1)
(68,98,1)
(232,160,1)
(170,180,1)
(82,139,1)
(170,15,1)
(58,147,1)
(261,192,1)
(16,138,1)
(44,263,1)
(115,36,1)
(70,47,1)
(181,225,1)
(253,6,1)
(178,143,1)
(126,39,1)
(146,29,1)
(227,74,1)
(187,132,1)
(74,222,1)
(60,94,1)
(147,250,1)
(130,42,1)
(233,244,1)
(121,29,1)
(146,133,1)
(50,54,1)
(42,250,1)
(219,268,1)
(144,100,1)
(98,177,1)
(13,134,1)
(113,74,1)
(19,175,1)
(42,108,1)
(159,66,1)
(133,84,1)
(87,222,1)
(195,176,1)
(268,41,1)
(191,31,1)
(136,246,1)
(253,184,1)
(41,260,1)
(154,204,1)
(269,149,1)
(64,195,1)
(164,126,1)
(222,233,1)
(185,79,1)
(37,231,1)
(97,90,1)
(49,250,1)
(11,230,1)
(143,103,1)
(26,250,1)
(23,66,1)
(148,22,1)
(165,266,1)
(212,250,1)
(186,245,1)
(160,57,1)
(35,92,1)
(200,66,1)
(105,197,1)
(102,206,1)
(125,55,1)
(84,71,1)
(210,56,1)
(217,15,1)
(81,104,1)
(151,214,1)
(168,186,1)
(150,22,1)
(183,29,1)
(126,250,1)
(153,96,1)
(42,101,1)
(110,143,1)
(82,132,1)
(54,236,1)
(73,103,1)
(57,250,1)
(105,192,1)
(164,138,1)
(181,164,1)
(192,161,1)
(92,72,1)
(261,73,1)
(9,172,1)
(199,154,1)
(186,192,1)
(106,218,1)
(5,66,1)
(63,250,1)
(214,119,1)
(136,15,1)
(254,201,1)
(48,271,1)
(128,66,1)
(27,213,1)
(173,159,1)
(40,217,1)
(22,199,1)
(94,15,1)
(138,41,1)
(273,157,1)
(168,261,1)
(156,207,1)
(164,27,1)
(59,238,1)
(116,155,1)
(157,4,1)
(201,250,1)
(138,162,1)
(140,250,1)
(74,250,1)
(81,82,1)
(190,6,1)
(100,20,1)
(202,149,1)
(78,191,1)
(109,88,1)
(246,28,1)
(267,190,1)
(74,35,1)
(143,41,1)
(3,148,1)
(21,200,1)
(24,209,1)
(47,244,1)
(81,64,1)
(92,23,1)
(72,250,1)
(233,5,1)
(164,46,1)
(111,257,1)
(31,44,1)
(172,227,1)
(30,153,1)
(164,83,1)
(108,269,1)
(45,66,1)
(230,15,1)
(209,197,1)
(48,66,1)
(177,115,1)
(56,168,1)
(164,63,1)
(167,118,1)
(65,103,1)
(155,18,1)
(13,66,1)
(217,208,1)
(265,82,2)
(199,257,2)
(106,228,2)
(130,82,2)
(87,257,2)
(3,257,2)
(96,82,2)
(106,94,2)
(202,82,2)
(44,82,2)
(93,132,2)
(115,195,2)
(105,192,2)
(273,228,2)
(121,82,2)
(146,29,2)
(87,222,2)
(42,101,2)
(66,82,2)
(198,144,2)
(221,197,2)
(140,59,2)
(91,82,2)
(53,195,2)
(38,146,2)
(103,228,2)
(164,126,2)
(93,195,2)
(167,82,2)
(198,150,2)
(20,257,2)
(257,132,2)
(169,82,2)
(253,228,2)
(161,228,2)
(13,66,2)
(164,83,2)
(38,82,2)
(35,92,2)
(153,147,2)
(260,86,2)
(159,257,2)
(206,82,2)
(22,257,2)
(81,228,2)
(188,195,2)
(244,140,2)
(57,82,2)
(48,66,2)
(89,228,2)
(254,257,2)
(138,41,2)
(45,82,2)
(211,228,2)
(272,257,2)
(106,195,2)
(144,66,2)
(27,228,2)
(87,35,2)
(85,257,2)
(42,250,2)
(58,82,2)
(146,82,2)
(121,29,2)
(153,96,2)
(117,270,2)
(84,82,2)
(187,132,2)
(192,161,2)
(216,82,2)
(63,82,2)
(108,269,2)
(239,228,2)
(139,195,2)
(177,250,2)
(130,91,2)
(47,257,2)
(171,257,2)
(60,257,2)
(229,228,2)
(98,195,2)
(172,227,2)
(9,172,2)
(212,250,2)
(152,228,2)
(56,228,2)
(34,94,2)
(241,136,2)
(228,241,2)
(151,228,2)
(105,197,2)
(190,228,2)
(261,228,2)
(153,82,2)
(74,250,2)
(227,48,2)
(177,195,2)
(155,228,2)
(104,257,2)
(223,82,2)
(120,257,2)
(226,82,2)
(191,82,2)
(72,59,2)
(154,257,2)
(165,82,2)
(65,41,2)
(92,72,2)
(49,82,2)
(209,197,2)
(164,212,2)
(125,257,2)
(122,210,2)
(101,82,2)
(63,250,2)
(158,198,2)
(69,257,2)
(186,192,2)
(71,6,2)
(82,195,2)
(88,82,2)
(139,228,2)
(96,66,2)
(24,209,2)
(164,138,2)
(186,210,2)
(150,257,2)
(139,94,2)
(133,82,2)
(210,192,2)
(5,66,2)
(135,228,2)
(197,228,2)
(27,6,2)
(230,15,2)
(19,228,2)
(1,82,2)
(210,210,2)
(250,82,2)
(36,195,2)
(141,82,2)
(250,13,2)
(230,82,2)
(143,210,2)
(267,190,2)
(70,257,2)
(194,173,2)
(1,169,2)
(256,195,2)
(17,257,2)
(159,66,2)
(22,199,2)
(145,82,2)
(93,94,2)
(114,82,2)
(82,132,2)
(83,257,2)
(113,195,2)
(132,228,2)
(91,102,2)
(266,82,2)
(147,250,2)
(128,82,2)
(102,66,2)
(108,82,2)
(255,82,2)
(29,117,2)
(257,94,2)
(0,228,2)
(23,66,2)
(110,105,2)
(244,257,2)
(131,82,2)
(163,230,2)
(72,250,2)
(41,228,2)
(164,228,2)
(90,257,2)
(140,250,2)
(172,195,2)
(5,257,2)
(185,228,2)
(144,257,2)
(80,82,2)
(168,210,2)
(110,210,2)
(72,195,2)
(100,257,2)
(228,217,2)
(150,22,2)
(111,257,2)
(37,210,2)
(190,6,2)
(143,41,2)
(106,257,2)
(164,54,2)
(160,82,2)
(74,195,2)
(55,257,2)
(62,82,2)
(122,103,2)
(136,15,2)
(9,194,2)
(45,121,2)
(42,82,2)
(220,82,2)
(95,82,2)
(109,82,2)
(93,257,2)
(23,195,2)
(4,6,2)
(248,82,2)
(213,228,2)
(136,67,2)
(170,4,2)
(252,82,2)
(82,257,2)
(162,228,2)
(110,143,2)
(92,195,2)
(198,257,2)
(97,257,2)
(195,132,2)
(225,228,2)
(79,228,2)
(78,191,2)
(9,250,2)
(1,250,2)
(187,82,2)
(232,82,2)
(74,222,2)
(233,244,2)
(30,82,2)
(260,228,2)
(140,257,2)
(238,128,2)
(13,29,2)
(214,228,2)
(199,9,2)
(271,195,2)
(227,74,2)
(48,195,2)
(92,23,2)
(231,210,2)
(263,82,2)
(147,108,2)
(107,210,2)
(40,217,2)
(116,228,2)
(269,149,2)
(147,82,2)
(2,82,2)
(154,66,2)
(59,82,2)
(170,228,2)
(41,260,2)
(82,94,2)
(39,82,2)
(184,228,2)
(65,228,2)
(181,164,2)
(74,35,2)
(238,82,2)
(127,82,2)
(155,15,2)
(66,38,2)
(32,257,2)
(253,6,2)
(82,228,2)
(164,26,2)
(45,66,2)
(182,257,2)
(54,195,2)
(200,82,2)
(203,82,2)
(236,195,2)
(25,210,2)
(218,195,2)
(218,228,2)
(119,221,2)
(33,230,2)
(237,228,2)
(149,82,2)
(150,250,2)
(26,250,2)
(128,66,2)
(18,228,2)
(38,71,2)
(119,228,2)
(30,153,2)
(56,210,2)
(233,257,2)
(197,267,2)
(249,82,2)
(118,82,2)
(191,66,2)
(138,228,2)
(173,257,2)
(82,139,2)
(194,257,2)
(68,195,2)
(259,257,2)
(268,228,2)
(261,192,2)
(164,177,2)
(16,228,2)
(218,94,2)
(173,87,2)
(14,195,2)
(95,250,2)
(130,42,2)
(267,196,2)
(67,217,2)
(54,250,2)
(199,154,2)
(209,228,2)
(78,263,2)
(105,210,2)
(147,101,2)
(67,15,2)
(46,82,2)
(26,257,2)
(65,103,2)
(164,57,2)
(52,228,2)
(101,130,2)
(50,195,2)
(94,15,2)
(218,257,2)
(134,82,2)
(157,228,2)
(212,257,2)
(234,228,2)
(169,78,2)
(260,253,2)
(222,233,2)
(262,82,2)
(94,230,2)
(43,82,2)
(42,108,2)
(164,63,2)
(170,180,2)
(173,159,2)
(71,82,2)
(146,132,2)
(126,250,2)
(64,195,2)
(149,45,2)
(168,228,2)
(233,5,2)
(164,65,2)
(164,95,2)
(73,228,2)
(99,94,2)
(76,257,2)
(245,210,2)
(201,257,2)
(31,82,2)
(224,228,2)
(148,257,2)
(219,228,2)
(221,192,2)
(176,230,2)
(35,195,2)
(9,257,2)
(170,15,2)
(181,225,2)
(60,195,2)
(59,238,2)
(164,201,2)
(267,228,2)
(28,67,2)
(210,228,2)
(227,195,2)
(217,15,2)
(263,30,2)
(24,228,2)
(269,82,2)
(195,230,2)
(175,228,2)
(12,257,2)
(241,217,2)
(46,250,2)
(263,250,2)
(143,103,2)
(91,187,2)
(221,228,2)
(102,82,2)
(11,230,2)
(83,250,2)
(21,82,2)
(139,257,2)
(238,1,2)
(246,67,2)
(204,257,2)
(164,27,2)
(201,250,2)
(178,210,2)
(57,250,2)
(4,228,2)
(164,46,2)
(77,228,2)
(126,82,2)
(247,82,2)
(158,257,2)
(117,15,2)
(61,82,2)
(192,228,2)
(240,228,2)
(179,228,2)
(129,217,2)
(87,250,2)
(161,6,2)
(60,94,2)
(13,82,2)
(222,257,2)
(241,67,2)
(189,228,2)
(78,82,2)
-----------------------------------
(0,0)
(1,rko[2])
(2,rki)
(3,7)
(4,ctx->key_enc)
(5,rki[4])
(6,struct crypto_aes_ctx *ctx)
(7,)
(8,)
(9,rko[5])
(10,if (i >= 6)
(11,key_len)
(12,3)
(13,rki + kwords)
(14,rko)
(15,unsigned int key_len)
(16,key_enc)
(17,rko)
(18,key_len)
(19,key_enc)
(20,rki)
(21,rki)
(22,rko[6] = rko[5] ^ rki[6])
(23,rki[4])
(24,key_dec[i] = key_enc[0])
(25,i)
(26,rko[7])
(27,ctx->key_length)
(28,key_len)
(29,kwords = key_len / sizeof(u32)
(30,rko[1] = rko[0] ^ rki[1])
(31,2)
(32,5)
(33,AES_KEYSIZE_256)
(34,i)
(35,rko[4] = rko[3] ^ rki[4])
(36,rko)
(37,i)
(38,ctx->key_enc + (i * kwords)
(39,3)
(40,key_len)
(41,key_dec = (struct aes_block *)
(42,rko[0])
(43,0)
(44,rki)
(45,rki[kwords - 1])
(46,rko[0])
(47,rki)
(48,rki[5])
(49,rko)
(50,rko)
(51,kwords)
(52,0)
(53,3)
(54,rko[4])
(55,rki)
(56,0)
(57,rko[0])
(58,rki)
(59,rko[3] = rko[2] ^ rki[3])
(60,i)
(61,1)
(62,0)
(63,rko[2])
(64,break;)
(65,key_dec[i])
(66,*rki = ctx->key_enc + (i * kwords)
(67,key_len != AES_KEYSIZE_192)
(68,4)
(69,6)
(70,4)
(71,ctx->key_enc)
(72,rko[3])
(73,j)
(74,rko[4])
(75,)
(76,4)
(77,0)
(78,rko[1] ^ rki[2])
(79,EINVAL)
(80,1)
(81,key_enc)
(82,i < sizeof(rcon)
(83,rko[5])
(84,i)
(85,rko)
(86,struct aes_block *)
(87,rko[4])
(88,rko)
(89,key_dec)
(90,rko)
(91,rki[0] ^ rcon[i])
(92,rko[3] ^ rki[4])
(93,i++)
(94,key_len == AES_KEYSIZE_256)
(95,rko[1])
(96,rki[1])
(97,5)
(98,rko)
(99,6)
(100,7)
(101,rko[0] = rko[0] ^ rki[0] ^ rcon[i])
(102,rki[0])
(103,i = 1)
(104,break;)
(105,key_enc + j)
(106,rcon)
(107,j)
(108,rko[0] = ror32(ce_aes_sub(rki[kwords - 1])
(109,2)
(110,ce_aes_invert(key_dec + i, key_enc + j)
(111,rko)
(112,)
(113,rki)
(114,1)
(115,5)
(116,kernel_neon_begin()
(117,key_len / sizeof(u32)
(118,rko)
(119,key_dec[0] = key_enc[j])
(120,rko)
(121,kwords - 1)
(122,i++)
(123,)
(124,if (key_len != AES_KEYSIZE_128 &&\n\\n\\t    key_len != AES_KEYSIZE_192 &&\n\\n\\t    key_len != AES_KEYSIZE_256)
(125,5)
(126,rko[3])
(127,rko)
(128,rki[3])
(129,AES_KEYSIZE_192)
(130,rko[0] ^ rki[0] ^ rcon[i])
(131,AES_KEYSIZE_192)
(132,i = 0)
(133,kwords)
(134,kwords)
(135,j)
(136,key_len != AES_KEYSIZE_256)
(137,)
(138,key_dec[0])
(139,sizeof(rcon)
(140,rko[3])
(141,rki)
(142,)
(143,key_dec + i)
(144,rki[7])
(145,rko)
(146,i * kwords)
(147,rko[0])
(148,rko)
(149,ce_aes_sub(rki[kwords - 1])
(150,rko[6])
(151,1)
(152,key_enc)
(153,rko[0] ^ rki[1])
(154,rki[6])
(155,ctx->key_length = key_len)
(156,u32)
(157,in_key)
(158,rko[7] = rko[6] ^ rki[7])
(159,rki[5])
(160,rki)
(161,num_rounds(ctx)
(162,0)
(163,i)
(164,return 0;)
(165,i)
(166,if (i >= 7)
(167,2)
(168,j)
(169,rko[2] = rko[1] ^ rki[2])
(170,memcpy(ctx->key_enc, in_key, key_len)
(171,4)
(172,rko[5] = rko[4] ^ rki[5])
(173,rko[4] ^ rki[5])
(174,for (i = 0; i < sizeof(rcon)
(175,ctx)
(176,7)
(177,rko[5])
(178,key_enc)
(179,ctx)
(180,const u8 *in_key)
(181,RET)
(182,6)
(183,key_len)
(184,key_dec)
(185,-EINVAL)
(186,j--)
(187,rcon[i])
(188,rki)
(189,ctx)
(190,ctx->key_enc)
(191,rki[2])
(192,j = num_rounds(ctx)
(193,if (key_len == AES_KEYSIZE_192)
(194,rko[5] = rko[4] ^ rki[5])
(195,i >= 7)
(196,struct aes_block *)
(197,key_enc = (struct aes_block *)
(198,rko[6] ^ rki[7])
(199,rko[5] ^ rki[6])
(200,rko)
(201,rko[4])
(202,8)
(203,rko)
(204,6)
(205,rko)
(206,0)
(207,key_len)
(208,AES_KEYSIZE_128)
(209,key_enc[0])
(210,j > 0)
(211,i)
(212,rko[6])
(213,key_length)
(214,i)
(215,key_dec)
(216,1)
(217,key_len != AES_KEYSIZE_128)
(218,i)
(219,ctx)
(220,rko)
(221,key_enc[j])
(222,rko[4] = ce_aes_sub(rko[3])
(223,rko)
(224,key_enc)
(225,return -EINVAL;)
(226,key_len)
(227,rko[4] ^ rki[5])
(228,key_len != AES_KEYSIZE_128 &&\n\\n\\t    key_len != AES_KEYSIZE_192 &&\n\\n\\t    key_len != AES_KEYSIZE_256)
(229,key_dec)
(230,key_len == AES_KEYSIZE_192)
(231,key_dec)
(232,kwords)
(233,ce_aes_sub(rko[3])
(234,key_dec)
(235,key_enc)
(236,4)
(237,ctx)
(238,rko[2] ^ rki[3])
(239,i)
(240,kernel_neon_end()
(241,key_len != AES_KEYSIZE_192 &&\n\\n\\t    key_len != AES_KEYSIZE_256)
(242,kwords)
(243,i)
(244,ce_aes_sub(rko[3])
(245,j)
(246,AES_KEYSIZE_256)
(247,0)
(248,0)
(249,3)
(250,*rko = rki + kwords)
(251,j)
(252,rko)
(253,ctx->key_dec)
(254,rko)
(255,rki)
(256,4)
(257,i >= 6)
(258,for (i = 1, j--; j > 0; i++, j--)
(259,rko)
(260,(struct aes_block *)
(261,j--)
(262,key_enc)
(263,rko[1])
(264,rki)
(265,ctx)
(266,rcon)
(267,(struct aes_block *)
(268,j)
(269,ror32(ce_aes_sub(rki[kwords - 1])
(270,sizeof(u32)
(271,5)
(272,rki)
(273,key_len)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^