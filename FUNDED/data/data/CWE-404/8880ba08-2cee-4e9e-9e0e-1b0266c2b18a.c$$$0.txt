-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_01_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
51,52
53,54
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,59,61,62
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_01_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__char_malloc_01_bad()
CWE401_Memory_Leak__char_malloc_01_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
;
-----joern-----
(24,2,0)
(27,25,0)
(17,0,0)
(16,24,0)
(0,25,0)
(15,4,0)
(19,14,0)
(12,14,0)
(24,14,0)
(6,14,0)
(7,2,0)
(2,14,0)
(11,0,0)
(3,26,0)
(12,2,0)
(25,0,0)
(1,12,0)
(23,2,0)
(13,14,0)
(20,15,0)
(3,2,0)
(10,7,0)
(26,3,0)
(5,12,0)
(22,19,0)
(4,15,0)
(0,11,0)
(2,3,0)
(8,7,0)
(4,9,0)
(11,3,0)
(3,11,0)
(18,19,0)
(0,25,1)
(17,23,1)
(5,1,1)
(8,10,1)
(4,15,1)
(24,16,1)
(7,2,1)
(12,2,1)
(1,4,1)
(19,22,1)
(15,20,1)
(22,18,1)
(24,2,1)
(25,27,1)
(7,8,1)
(23,19,1)
(3,11,1)
(1,7,1)
(10,2,1)
(27,17,1)
(20,7,1)
(2,3,1)
(21,24,1)
(12,5,1)
(11,0,1)
(3,26,1)
(16,12,1)
(2,3,2)
(0,25,2)
(4,7,2)
(4,15,2)
(20,7,2)
(7,2,2)
(24,2,2)
(11,0,2)
(3,11,2)
(15,7,2)
(12,2,2)
(3,26,2)
-----------------------------------
(0,100*sizeof(char)
(1,data)
(2,data = (char *)
(3,(char *)
(4,exit(-1)
(5,"A String")
(6,data)
(7,data == NULL)
(8,NULL)
(9,)
(10,data)
(11,malloc(100*sizeof(char)
(12,strcpy(data, "A String")
(13,if (data == NULL)
(14,)
(15,-1)
(16,data)
(17,100)
(18,data)
(19,data = NULL)
(20,1)
(21,RET)
(22,NULL)
(23,data)
(24,printLine(data)
(25,sizeof(char)
(26,char *)
(27,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^