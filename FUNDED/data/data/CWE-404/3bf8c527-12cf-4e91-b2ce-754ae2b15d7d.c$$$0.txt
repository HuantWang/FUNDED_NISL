-----label-----
1
-----code-----
static void
saveuser(KINFO *ki)
{
	struct usave *usp;

	usp = &ki->ki_u;

	if (KI_PROC(ki)->p_flag & P_INMEM) {
		/*
		 * The u-area might be swapped out, and we can't get
		 * at it because we have a crashdump and no swap.
		 * If it's here fill in these fields, otherwise, just
		 * leave them 0.
		 */
		usp->u_start = KI_PROC(ki)->p_start;
		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;
		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;
		usp->u_valid = 1;
	} else
		usp->u_valid = 0;
	/*
	 * save arguments if needed
	 */
	if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {
		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,
		    MAXCOMLEN);
	} else if (needcomm) {
		char *tmp;
		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);
		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);
		ki->ki_args = tmp;
	} else {
		ki->ki_args = NULL;
	}
	if (needenv && UREADOK(ki)) {
		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);
	} else if (needenv) {
		ki->ki_env = "()";
	} else {
		ki->ki_env = NULL;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
29,31
30,31
30,32
31,32
31,33
32,33
34,35
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
53,54
54,55
54,56
55,56
55,57
56,57
59,60
59,61
60,61
60,62
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
70,72
71,72
74,75
74,76
75,76
75,77
76,77
76,78
77,78
79,80
83,84
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
92,94
93,94
97,98
97,99
97,100
98,99
98,100
99,100
101,102
102,103
102,104
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
111,113
112,113
114,115
117,118
119,120
120,121
121,122
121,123
122,123
122,124
123,124
126,127
126,128
126,129
126,130
126,131
127,128
129,130
131,132
133,134
133,135
134,135
134,136
135,136
137,138
140,141
142,143
142,144
142,145
143,144
145,146
145,147
145,148
145,149
146,147
147,148
147,149
149,150
149,151
152,153
153,154
153,155
154,155
156,157
156,158
157,158
159,160
159,161
160,161
160,162
161,162
163,164
163,165
164,165
164,166
165,166
167,168
171,172
172,173
172,174
172,175
172,176
173,174
175,176
178,179
178,180
179,180
179,181
180,181
182,183
185,186
186,187
186,188
187,188
187,189
188,189
191,192
193,194
194,195
195,196
195,197
196,197
196,198
197,198
200,201
202,203
202,204
202,205
203,204
203,205
204,205
206,207
206,208
207,208
209,210
211,212
212,213
213,214
213,215
214,215
214,216
215,216
218,219
218,220
218,221
218,222
218,223
219,220
221,222
223,224
225,226
225,227
226,227
226,228
228,229
230,231
233,234
233,235
233,236
234,235
236,237
237,238
238,239
238,240
239,240
239,241
240,241
244,245
245,246
246,247
246,248
247,248
247,249
248,249
251,252
-----nextToken-----
2,4,7,9,10,15,17,18,22,26,27,33,35,36,38,44,45,49,51,52,57,58,63,65,66,67,72,73,78,80,81,82,87,88,89,94,95,96,100,105,107,113,115,116,118,124,125,128,130,132,136,138,139,141,144,148,150,151,155,158,162,166,168,169,170,174,176,177,181,183,184,189,190,192,198,199,201,205,208,210,216,217,220,222,224,227,229,231,232,235,241,242,243,249,250,252
-----computeFrom-----
20,21
20,22
29,30
29,31
41,42
41,43
54,55
54,56
69,70
69,71
84,85
84,86
91,92
91,93
98,99
98,100
102,103
102,104
109,110
109,111
121,122
121,123
153,154
153,155
159,160
159,161
186,187
186,188
195,196
195,197
203,204
203,205
213,214
213,215
238,239
238,240
246,247
246,248
-----guardedBy-----
33,49
35,80
115,138
210,224
-----guardedByNegation-----
118,201
100,144
115,198
205,235
210,249
-----lastLexicalUse-----
115,198
210,249
-----jump-----
115,198
210,249
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static voidsaveuser(KINFO *ki){	struct usave *usp;	usp = &ki->ki_u;	if (KI_PROC(ki)->p_flag & P_INMEM) {		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	} else		usp->u_valid = 0;	/*	 * save arguments if needed	 */	if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	} else if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}	if (needenv && UREADOK(ki)) {		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	} else if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}}
static void
saveuser(KINFO *ki)
saveuser
KINFO *ki
KINFO
KINFO
*ki
*
ki
{	struct usave *usp;	usp = &ki->ki_u;	if (KI_PROC(ki)->p_flag & P_INMEM) {		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	} else		usp->u_valid = 0;	/*	 * save arguments if needed	 */	if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	} else if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}	if (needenv && UREADOK(ki)) {		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	} else if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}}
struct usave *usp;
struct usave *usp;
struct usave
usave
*usp
*
usp
usp = &ki->ki_u;
usp = &ki->ki_u
usp
usp
&ki->ki_u
ki->ki_u
ki
ki
ki_u
if (KI_PROC(ki)->p_flag & P_INMEM) {		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	} else		usp->u_valid = 0;
KI_PROC(ki)->p_flag & P_INMEM
KI_PROC(ki)->p_flag
KI_PROC(ki)
KI_PROC
KI_PROC
ki
ki
p_flag
P_INMEM
P_INMEM
{		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	}
usp->u_start = KI_PROC(ki)->p_start;
usp->u_start = KI_PROC(ki)->p_start
usp->u_start
usp
usp
u_start
KI_PROC(ki)->p_start
KI_PROC(ki)
KI_PROC
KI_PROC
ki
ki
p_start
usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;
usp->u_ru = KI_EPROC(ki)->e_stats.p_ru
usp->u_ru
usp
usp
u_ru
KI_EPROC(ki)->e_stats.p_ru
KI_EPROC(ki)->e_stats
KI_EPROC(ki)
KI_EPROC
KI_EPROC
ki
ki
e_stats
p_ru
usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;
usp->u_cru = KI_EPROC(ki)->e_stats.p_cru
usp->u_cru
usp
usp
u_cru
KI_EPROC(ki)->e_stats.p_cru
KI_EPROC(ki)->e_stats
KI_EPROC(ki)
KI_EPROC
KI_EPROC
ki
ki
e_stats
p_cru
usp->u_valid = 1;
usp->u_valid = 1
usp->u_valid
usp
usp
u_valid
1
usp->u_valid = 0;
usp->u_valid = 0
usp->u_valid
usp
usp
u_valid
0
if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	} else if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}
needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))
needcomm
needcomm
(UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))
UREADOK(ki) || (KI_PROC(ki)->p_args != NULL)
UREADOK(ki)
UREADOK
UREADOK
ki
ki
(KI_PROC(ki)->p_args != NULL)
KI_PROC(ki)->p_args != NULL
KI_PROC(ki)->p_args
KI_PROC(ki)
KI_PROC
KI_PROC
ki
ki
p_args
NULL
NULL
{		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	}
ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);
ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN)
ki->ki_args
ki
ki
ki_args
getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN)
getfmt
getfmt
kvm_getargv
kvm_getargv
ki
ki
KI_THREAD(ki)->td_comm
KI_THREAD(ki)
KI_THREAD
KI_THREAD
ki
ki
td_comm
MAXCOMLEN
MAXCOMLEN
if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}
needcomm
needcomm
{		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	}
char *tmp;
char *tmp;
char
*tmp
*
tmp
tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);
tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3)
tmp
tmp
malloc(strlen(KI_THREAD(ki)->td_comm) + 3)
malloc
malloc
strlen(KI_THREAD(ki)->td_comm) + 3
strlen(KI_THREAD(ki)->td_comm)
strlen
strlen
KI_THREAD(ki)->td_comm
KI_THREAD(ki)
KI_THREAD
KI_THREAD
ki
ki
td_comm
3
sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);
sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm)
sprintf
sprintf
tmp
tmp
"(%s)"
KI_THREAD(ki)->td_comm
KI_THREAD(ki)
KI_THREAD
KI_THREAD
ki
ki
td_comm
ki->ki_args = tmp;
ki->ki_args = tmp
ki->ki_args
ki
ki
ki_args
tmp
tmp
{		ki->ki_args = NULL;	}
ki->ki_args = NULL;
ki->ki_args = NULL
ki->ki_args
ki
ki
ki_args
NULL
NULL
if (needenv && UREADOK(ki)) {		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	} else if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}
needenv && UREADOK(ki)
needenv
needenv
UREADOK(ki)
UREADOK
UREADOK
ki
ki
{		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	}
ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);
ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0)
ki->ki_env
ki
ki
ki_env
getfmt(kvm_getenvv, ki, (char *)NULL, 0)
getfmt
getfmt
kvm_getenvv
kvm_getenvv
ki
ki
(char *)NULL
char *
char
*
*
NULL
NULL
0
if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}
needenv
needenv
{		ki->ki_env = "()";	}
ki->ki_env = "()";
ki->ki_env = "()"
ki->ki_env
ki
ki
ki_env
"()"
{		ki->ki_env = NULL;	}
ki->ki_env = NULL;
ki->ki_env = NULL
ki->ki_env
ki
ki
ki_env
NULL
NULL
-----joern-----
(16,84,0)
(83,62,0)
(138,99,0)
(107,99,0)
(48,28,0)
(100,127,0)
(104,99,0)
(47,25,0)
(10,62,0)
(9,99,0)
(130,17,0)
(49,68,0)
(74,44,0)
(129,60,0)
(121,59,0)
(21,1,0)
(138,128,0)
(4,24,0)
(128,38,0)
(35,110,0)
(82,63,0)
(111,105,0)
(46,129,0)
(74,17,0)
(51,20,0)
(97,6,0)
(59,72,0)
(9,95,0)
(40,114,0)
(125,99,0)
(66,99,0)
(119,105,0)
(130,89,0)
(118,126,0)
(76,64,0)
(84,110,0)
(118,103,0)
(71,125,0)
(94,6,0)
(38,128,0)
(53,128,0)
(40,99,0)
(126,118,0)
(91,137,0)
(110,106,0)
(20,40,0)
(66,33,0)
(98,138,0)
(77,9,0)
(107,76,0)
(74,90,0)
(27,63,0)
(12,28,0)
(85,95,0)
(40,20,0)
(50,129,0)
(84,99,0)
(63,140,0)
(72,123,0)
(67,40,0)
(120,10,0)
(24,49,0)
(93,61,0)
(63,72,0)
(19,46,0)
(103,118,0)
(126,38,0)
(92,58,0)
(117,120,0)
(37,125,0)
(6,72,0)
(135,84,0)
(116,40,0)
(60,99,0)
(104,86,0)
(60,129,0)
(20,73,0)
(39,51,0)
(89,130,0)
(23,107,0)
(51,99,0)
(137,86,0)
(34,60,0)
(109,30,0)
(32,122,0)
(137,140,0)
(124,59,0)
(18,10,0)
(13,89,0)
(52,45,0)
(87,76,0)
(1,21,0)
(140,132,0)
(81,93,0)
(58,105,0)
(44,74,0)
(3,28,0)
(22,75,0)
(139,104,0)
(21,105,0)
(68,30,0)
(41,81,0)
(105,21,0)
(61,95,0)
(134,86,0)
(68,49,0)
(114,40,0)
(7,33,0)
(29,107,0)
(59,45,0)
(46,75,0)
(89,99,0)
(54,61,0)
(49,132,0)
(95,9,0)
(11,17,0)
(141,25,0)
(86,104,0)
(56,75,0)
(14,21,0)
(95,61,0)
(42,103,0)
(55,132,0)
(79,51,0)
(140,137,0)
(133,90,0)
(113,81,0)
(61,93,0)
(122,114,0)
(38,126,0)
(136,127,0)
(103,75,0)
(30,68,0)
(62,10,0)
(141,99,0)
(72,28,0)
(129,46,0)
(33,115,0)
(44,99,0)
(105,99,0)
(6,55,0)
(81,72,0)
(93,132,0)
(96,66,0)
(125,123,0)
(127,22,0)
(22,103,0)
(0,114,0)
(127,99,0)
(102,141,0)
(17,74,0)
(101,105,0)
(78,66,0)
(80,55,0)
(120,99,0)
(17,130,0)
(92,99,0)
(10,120,0)
(26,46,0)
(8,22,0)
(105,58,0)
(30,99,0)
(122,99,0)
(65,126,0)
(131,68,0)
(90,74,0)
(88,92,0)
(5,130,0)
(46,103,0)
(123,125,0)
(57,92,0)
(25,141,0)
(123,72,0)
(128,138,0)
(2,72,0)
(15,40,0)
(70,44,0)
(24,72,0)
(31,28,0)
(43,24,0)
(86,137,0)
(114,122,0)
(58,36,0)
(125,99,1)
(110,35,1)
(58,105,1)
(86,134,1)
(124,62,1)
(112,90,1)
(137,91,1)
(61,95,1)
(22,103,1)
(92,99,1)
(0,122,1)
(80,6,1)
(122,99,1)
(66,78,1)
(129,50,1)
(57,25,1)
(8,127,1)
(126,65,1)
(92,88,1)
(14,111,1)
(81,41,1)
(41,113,1)
(33,7,1)
(108,25,1)
(11,130,1)
(68,131,1)
(59,121,1)
(47,76,1)
(130,5,1)
(94,140,1)
(122,32,1)
(104,99,1)
(21,14,1)
(131,30,1)
(86,104,1)
(82,27,1)
(133,55,1)
(22,8,1)
(141,102,1)
(127,99,1)
(24,4,1)
(20,40,1)
(90,74,1)
(117,72,1)
(98,42,1)
(134,104,1)
(29,23,1)
(17,130,1)
(59,72,1)
(46,103,1)
(105,119,1)
(68,30,1)
(5,89,1)
(69,110,1)
(83,10,1)
(25,141,1)
(121,124,1)
(130,89,1)
(9,77,1)
(109,24,1)
(30,109,1)
(70,133,1)
(71,2,1)
(16,135,1)
(113,49,1)
(125,37,1)
(74,44,1)
(51,99,1)
(101,92,1)
(76,87,1)
(44,99,1)
(127,136,1)
(69,58,1)
(137,86,1)
(26,19,1)
(96,108,1)
(51,79,1)
(89,99,1)
(78,96,1)
(67,114,1)
(23,112,1)
(140,137,1)
(95,85,1)
(15,51,1)
(104,139,1)
(9,99,1)
(63,82,1)
(27,93,1)
(60,34,1)
(7,66,1)
(105,99,1)
(91,86,1)
(79,39,1)
(18,120,1)
(46,129,1)
(103,118,1)
(42,112,1)
(139,63,1)
(40,99,1)
(69,33,1)
(54,95,1)
(114,122,1)
(81,72,1)
(38,128,1)
(120,99,1)
(19,103,1)
(65,38,1)
(47,22,1)
(74,17,1)
(39,90,1)
(6,72,1)
(6,97,1)
(21,1,1)
(66,99,1)
(88,57,1)
(107,99,1)
(32,116,1)
(40,67,1)
(63,72,1)
(95,9,1)
(136,100,1)
(100,46,1)
(4,43,1)
(138,99,1)
(25,47,1)
(116,15,1)
(87,107,1)
(44,70,1)
(128,53,1)
(60,99,1)
(105,21,1)
(111,101,1)
(53,138,1)
(34,26,1)
(89,13,1)
(47,20,1)
(45,52,1)
(55,80,1)
(17,11,1)
(72,123,1)
(50,60,1)
(102,47,1)
(40,114,1)
(126,38,1)
(61,54,1)
(107,29,1)
(129,60,1)
(62,10,1)
(77,81,1)
(118,126,1)
(123,125,1)
(10,120,1)
(97,94,1)
(84,99,1)
(128,138,1)
(133,45,1)
(49,68,1)
(90,133,1)
(62,83,1)
(84,16,1)
(35,84,1)
(13,44,1)
(138,98,1)
(135,108,1)
(52,59,1)
(85,9,1)
(43,62,1)
(119,21,1)
(30,99,1)
(141,99,1)
(120,117,1)
(114,0,1)
(37,71,1)
(93,61,1)
(10,18,1)
(24,72,1)
(44,99,2)
(15,90,2)
(30,99,2)
(137,62,2)
(127,99,2)
(79,90,2)
(6,62,2)
(55,62,2)
(138,99,2)
(14,25,2)
(104,62,2)
(22,103,2)
(43,62,2)
(35,108,2)
(93,62,2)
(42,112,2)
(68,30,2)
(24,62,2)
(105,25,2)
(0,90,2)
(101,25,2)
(92,25,2)
(60,112,2)
(46,103,2)
(128,138,2)
(141,99,2)
(66,99,2)
(138,112,2)
(59,72,2)
(122,99,2)
(113,62,2)
(111,25,2)
(105,99,2)
(59,62,2)
(26,112,2)
(17,130,2)
(33,108,2)
(81,62,2)
(89,99,2)
(129,60,2)
(44,133,2)
(30,62,2)
(92,99,2)
(58,25,2)
(82,62,2)
(137,86,2)
(74,17,2)
(130,44,2)
(51,99,2)
(6,72,2)
(114,122,2)
(8,112,2)
(131,62,2)
(123,125,2)
(60,99,2)
(130,89,2)
(136,112,2)
(23,112,2)
(34,112,2)
(107,112,2)
(84,99,2)
(95,9,2)
(49,68,2)
(9,99,2)
(21,25,2)
(103,118,2)
(93,61,2)
(76,112,2)
(116,90,2)
(49,62,2)
(63,72,2)
(134,62,2)
(81,72,2)
(74,44,2)
(141,47,2)
(84,108,2)
(118,126,2)
(109,62,2)
(62,10,2)
(119,25,2)
(54,62,2)
(32,90,2)
(124,62,2)
(121,62,2)
(38,128,2)
(53,112,2)
(40,99,2)
(105,21,2)
(70,133,2)
(20,40,2)
(65,112,2)
(98,112,2)
(139,62,2)
(87,112,2)
(63,62,2)
(38,112,2)
(16,108,2)
(51,90,2)
(61,95,2)
(104,99,2)
(77,62,2)
(86,104,2)
(91,62,2)
(21,1,2)
(22,112,2)
(46,112,2)
(102,47,2)
(11,44,2)
(135,108,2)
(45,62,2)
(72,123,2)
(67,90,2)
(5,44,2)
(128,112,2)
(27,62,2)
(19,112,2)
(17,44,2)
(20,90,2)
(107,99,2)
(120,99,2)
(95,62,2)
(94,62,2)
(74,133,2)
(40,114,2)
(90,74,2)
(126,112,2)
(100,112,2)
(29,112,2)
(25,141,2)
(52,62,2)
(80,62,2)
(9,62,2)
(10,120,2)
(126,38,2)
(108,25,2)
(13,44,2)
(122,90,2)
(41,62,2)
(57,25,2)
(125,99,2)
(97,62,2)
(110,108,2)
(88,25,2)
(86,62,2)
(140,137,2)
(112,90,2)
(58,105,2)
(61,62,2)
(127,112,2)
(103,112,2)
(78,108,2)
(66,108,2)
(40,90,2)
(96,108,2)
(140,62,2)
(85,62,2)
(114,90,2)
(7,108,2)
(46,129,2)
(118,112,2)
(50,112,2)
(39,90,2)
(4,62,2)
(129,112,2)
(89,44,2)
(24,72,2)
(68,62,2)
-----------------------------------
(0,td_comm)
(1,char *)
(2,usp)
(3,if (KI_PROC(ki)
(4,u_start)
(5,p_args)
(6,usp->u_valid)
(7,NULL)
(8,tmp)
(9,KI_EPROC(ki)
(10,KI_PROC(ki)
(11,NULL)
(12,usp)
(13,ki)
(14,NULL)
(15,kvm_getargv)
(16,ki_env)
(17,KI_PROC(ki)
(18,p_flag)
(19,tmp)
(20,ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)
(21,(char *)
(22,ki->ki_args = tmp)
(23,ki)
(24,usp->u_start)
(25,needenv && UREADOK(ki)
(26,"(%s)
(27,usp)
(28,)
(29,ki_args)
(30,KI_PROC(ki)
(31,if (needenv && UREADOK(ki)
(32,ki)
(33,ki->ki_env = NULL)
(34,ki)
(35,"()
(36,)
(37,ki_u)
(38,strlen(KI_THREAD(ki)
(39,ki)
(40,getfmt(kvm_getargv, ki, KI_THREAD(ki)
(41,u_ru)
(42,tmp)
(43,usp)
(44,UREADOK(ki)
(45,usp->u_valid = 0)
(46,sprintf(tmp, "(%s)
(47,needenv)
(48,if (needcomm && (UREADOK(ki)
(49,usp->u_start = KI_PROC(ki)
(50,td_comm)
(51,ki->ki_args)
(52,0)
(53,td_comm)
(54,p_ru)
(55,usp->u_valid = 1)
(56,tmp)
(57,ki)
(58,ki->ki_env = getfmt(kvm_getenvv, ki, (char *)
(59,usp->u_valid)
(60,KI_THREAD(ki)
(61,KI_EPROC(ki)
(62,KI_PROC(ki)
(63,usp->u_cru)
(64,)
(65,3)
(66,ki->ki_env)
(67,MAXCOMLEN)
(68,KI_PROC(ki)
(69,RET)
(70,ki)
(71,ki)
(72,usp = &ki->ki_u)
(73,)
(74,UREADOK(ki)
(75,)
(76,ki->ki_args = NULL)
(77,ki)
(78,ki_env)
(79,ki_args)
(80,1)
(81,usp->u_ru)
(82,u_cru)
(83,P_INMEM)
(84,ki->ki_env)
(85,e_stats)
(86,KI_EPROC(ki)
(87,NULL)
(88,ki_env)
(89,KI_PROC(ki)
(90,needcomm && (UREADOK(ki)
(91,p_cru)
(92,ki->ki_env)
(93,usp->u_ru = KI_EPROC(ki)
(94,usp)
(95,KI_EPROC(ki)
(96,ki)
(97,u_valid)
(98,ki)
(99,KINFO *ki)
(100,ki)
(101,kvm_getenvv)
(102,ki)
(103,tmp = malloc(strlen(KI_THREAD(ki)
(104,KI_EPROC(ki)
(105,getfmt(kvm_getenvv, ki, (char *)
(106,)
(107,ki->ki_args)
(108,needenv)
(109,ki)
(110,ki->ki_env = "()
(111,ki)
(112,needcomm)
(113,usp)
(114,KI_THREAD(ki)
(115,)
(116,ki)
(117,ki)
(118,malloc(strlen(KI_THREAD(ki)
(119,0)
(120,KI_PROC(ki)
(121,u_valid)
(122,KI_THREAD(ki)
(123,&ki->ki_u)
(124,usp)
(125,ki->ki_u)
(126,strlen(KI_THREAD(ki)
(127,ki->ki_args)
(128,KI_THREAD(ki)
(129,KI_THREAD(ki)
(130,KI_PROC(ki)
(131,p_start)
(132,)
(133,needcomm)
(134,e_stats)
(135,ki)
(136,ki_args)
(137,KI_EPROC(ki)
(138,KI_THREAD(ki)
(139,ki)
(140,usp->u_cru = KI_EPROC(ki)
(141,UREADOK(ki)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^