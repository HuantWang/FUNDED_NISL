-----label-----
0
-----code-----
static void do_signal(struct pt_regs *regs)
{
	sigset_t *oldset = sigmask_to_save();
	struct ksignal ksig;
	int ret;
	int is32 = is_32bit_task();

	get_signal(&ksig);

	/* Is there any syscall restart business here ? */
	check_syscall_restart(regs, &ksig.ka, ksig.sig > 0);

	if (ksig.sig <= 0) {
		/* No signal to deliver -- put the saved sigmask back */
		restore_saved_sigmask();
		regs->trap = 0;
		return;               /* no signals delivered */
	}

#ifndef CONFIG_PPC_ADV_DEBUG_REGS
        /*
	 * Reenable the DABR before delivering the signal to
	 * user space. The DABR will have been cleared if it
	 * triggered inside the kernel.
	 */
	if (current->thread.hw_brk.address &&
		current->thread.hw_brk.type)
		__set_breakpoint(&current->thread.hw_brk);
#endif
	/* Re-enable the breakpoints for the signal stack */
	thread_change_pc(current, regs);

	if (is32) {
        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)
			ret = handle_rt_signal32(&ksig, oldset, regs);
		else
			ret = handle_signal32(&ksig, oldset, regs);
	} else {
		ret = handle_rt_signal64(&ksig, oldset, regs);
	}

	regs->trap = 0;
	signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
56,57
57,58
57,59
58,59
61,62
61,63
62,63
62,64
63,64
67,68
67,69
68,69
68,70
69,70
69,71
70,71
74,75
74,76
74,77
75,76
76,77
77,78
79,80
80,81
80,82
81,82
81,83
82,83
87,88
87,89
88,89
88,90
89,90
89,91
90,91
90,92
91,92
91,93
92,93
97,98
97,99
98,99
98,100
99,100
99,101
100,101
105,106
106,107
106,108
107,108
109,110
110,111
110,112
111,112
111,113
112,113
116,117
117,118
117,119
117,120
118,119
120,121
122,123
124,125
124,126
124,127
125,126
127,128
128,129
128,130
128,131
129,130
129,131
130,131
130,132
131,132
131,133
132,133
132,134
133,134
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
145,146
147,148
148,149
150,151
152,153
154,155
155,156
155,157
156,157
158,159
158,160
158,161
158,162
159,160
161,162
162,163
164,165
166,167
168,169
169,170
170,171
170,172
171,172
173,174
173,175
173,176
173,177
174,175
176,177
177,178
179,180
181,182
183,184
184,185
184,186
185,186
185,187
186,187
190,191
191,192
191,193
191,194
191,195
192,193
194,195
196,197
197,198
199,200
199,201
200,201
202,203
-----nextToken-----
2,4,7,9,10,15,17,18,22,26,28,31,33,36,38,42,46,49,53,55,59,60,64,65,66,71,72,73,78,83,84,85,86,93,94,95,96,101,102,103,104,108,113,114,115,119,121,123,126,134,135,136,137,139,143,146,149,151,153,157,160,163,165,167,172,175,178,180,182,187,188,189,193,195,198,201,203
-----computeFrom-----
61,62
61,63
68,69
68,70
80,81
80,82
88,89
88,90
129,130
129,131
141,142
141,143
155,156
155,157
170,171
170,172
184,185
184,186
-----guardedBy-----
101,113
103,115
102,114
134,149
-----guardedByNegation-----
134,163
-----lastLexicalUse-----
134,163
-----jump-----
134,163
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void do_signal(struct pt_regs *regs){	sigset_t *oldset = sigmask_to_save();	struct ksignal ksig;	int ret;	int is32 = is_32bit_task();	get_signal(&ksig);	/* Is there any syscall restart business here ? */	check_syscall_restart(regs, &ksig.ka, ksig.sig > 0);	if (ksig.sig <= 0) {		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		regs->trap = 0;		return;               /* no signals delivered */	}#ifndef CONFIG_PPC_ADV_DEBUG_REGS        /*	 * Reenable the DABR before delivering the signal to	 * user space. The DABR will have been cleared if it	 * triggered inside the kernel.	 */	if (current->thread.hw_brk.address &&		current->thread.hw_brk.type)		__set_breakpoint(&current->thread.hw_brk);#endif	/* Re-enable the breakpoints for the signal stack */	thread_change_pc(current, regs);	if (is32) {        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, regs);		else			ret = handle_signal32(&ksig, oldset, regs);	} else {		ret = handle_rt_signal64(&ksig, oldset, regs);	}	regs->trap = 0;	signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));}
static void
do_signal(struct pt_regs *regs)
do_signal
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
{	sigset_t *oldset = sigmask_to_save();	struct ksignal ksig;	int ret;	int is32 = is_32bit_task();	get_signal(&ksig);	/* Is there any syscall restart business here ? */	check_syscall_restart(regs, &ksig.ka, ksig.sig > 0);	if (ksig.sig <= 0) {		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		regs->trap = 0;		return;               /* no signals delivered */	}#ifndef CONFIG_PPC_ADV_DEBUG_REGS        /*	 * Reenable the DABR before delivering the signal to	 * user space. The DABR will have been cleared if it	 * triggered inside the kernel.	 */	if (current->thread.hw_brk.address &&		current->thread.hw_brk.type)		__set_breakpoint(&current->thread.hw_brk);#endif	/* Re-enable the breakpoints for the signal stack */	thread_change_pc(current, regs);	if (is32) {        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, regs);		else			ret = handle_signal32(&ksig, oldset, regs);	} else {		ret = handle_rt_signal64(&ksig, oldset, regs);	}	regs->trap = 0;	signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));}
sigset_t *oldset = sigmask_to_save();
sigset_t *oldset = sigmask_to_save();
sigset_t
sigset_t
*oldset = sigmask_to_save()
*
oldset
= sigmask_to_save()
sigmask_to_save()
sigmask_to_save
sigmask_to_save
struct ksignal ksig;
struct ksignal ksig;
struct ksignal
ksignal
ksig
ksig
int ret;
int ret;
int
ret
ret
int is32 = is_32bit_task();
int is32 = is_32bit_task();
int
is32 = is_32bit_task()
is32
= is_32bit_task()
is_32bit_task()
is_32bit_task
is_32bit_task
get_signal(&ksig);
get_signal(&ksig)
get_signal
get_signal
&ksig
ksig
ksig
check_syscall_restart(regs, &ksig.ka, ksig.sig > 0);
check_syscall_restart(regs, &ksig.ka, ksig.sig > 0)
check_syscall_restart
check_syscall_restart
regs
regs
&ksig.ka
ksig.ka
ksig
ksig
ka
ksig.sig > 0
ksig.sig
ksig
ksig
sig
0
if (ksig.sig <= 0) {		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		regs->trap = 0;		return;               /* no signals delivered */	}
ksig.sig <= 0
ksig.sig
ksig
ksig
sig
0
{		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		regs->trap = 0;		return;               /* no signals delivered */	}
restore_saved_sigmask();
restore_saved_sigmask()
restore_saved_sigmask
restore_saved_sigmask
regs->trap = 0;
regs->trap = 0
regs->trap
regs
regs
trap
0
return;
if (current->thread.hw_brk.address &&		current->thread.hw_brk.type)		__set_breakpoint(&current->thread.hw_brk);
current->thread.hw_brk.address &&		current->thread.hw_brk.type
current->thread.hw_brk.address
current->thread.hw_brk
current->thread
current
current
thread
hw_brk
address
current->thread.hw_brk.type
current->thread.hw_brk
current->thread
current
current
thread
hw_brk
type
__set_breakpoint(&current->thread.hw_brk);
__set_breakpoint(&current->thread.hw_brk)
__set_breakpoint
__set_breakpoint
&current->thread.hw_brk
current->thread.hw_brk
current->thread
current
current
thread
hw_brk
thread_change_pc(current, regs);
thread_change_pc(current, regs)
thread_change_pc
thread_change_pc
current
current
regs
regs
if (is32) {        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, regs);		else			ret = handle_signal32(&ksig, oldset, regs);	} else {		ret = handle_rt_signal64(&ksig, oldset, regs);	}
is32
is32
{        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, regs);		else			ret = handle_signal32(&ksig, oldset, regs);	}
if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, regs);		else			ret = handle_signal32(&ksig, oldset, regs);
ksig.ka.sa.sa_flags & SA_SIGINFO
ksig.ka.sa.sa_flags
ksig.ka.sa
ksig.ka
ksig
ksig
ka
sa
sa_flags
SA_SIGINFO
SA_SIGINFO
ret = handle_rt_signal32(&ksig, oldset, regs);
ret = handle_rt_signal32(&ksig, oldset, regs)
ret
ret
handle_rt_signal32(&ksig, oldset, regs)
handle_rt_signal32
handle_rt_signal32
&ksig
ksig
ksig
oldset
oldset
regs
regs
ret = handle_signal32(&ksig, oldset, regs);
ret = handle_signal32(&ksig, oldset, regs)
ret
ret
handle_signal32(&ksig, oldset, regs)
handle_signal32
handle_signal32
&ksig
ksig
ksig
oldset
oldset
regs
regs
{		ret = handle_rt_signal64(&ksig, oldset, regs);	}
ret = handle_rt_signal64(&ksig, oldset, regs);
ret = handle_rt_signal64(&ksig, oldset, regs)
ret
ret
handle_rt_signal64(&ksig, oldset, regs)
handle_rt_signal64
handle_rt_signal64
&ksig
ksig
ksig
oldset
oldset
regs
regs
regs->trap = 0;
regs->trap = 0
regs->trap
regs
regs
trap
0
signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));
signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP))
signal_setup_done
signal_setup_done
ret
ret
&ksig
ksig
ksig
test_thread_flag(TIF_SINGLESTEP)
test_thread_flag
test_thread_flag
TIF_SINGLESTEP
TIF_SINGLESTEP
-----joern-----
(100,84,0)
(66,16,0)
(79,14,0)
(15,92,0)
(36,37,0)
(84,67,0)
(16,66,0)
(90,108,0)
(92,8,0)
(53,95,0)
(56,32,0)
(21,57,0)
(0,58,0)
(81,5,0)
(4,93,0)
(91,4,0)
(72,102,0)
(5,81,0)
(78,106,0)
(84,21,0)
(44,92,0)
(74,32,0)
(93,50,0)
(96,58,0)
(70,29,0)
(35,29,0)
(3,44,0)
(25,8,0)
(48,37,0)
(6,7,0)
(22,57,0)
(54,84,0)
(20,40,0)
(33,79,0)
(102,90,0)
(43,37,0)
(13,57,0)
(75,14,0)
(62,68,0)
(66,7,0)
(82,29,0)
(41,16,0)
(95,14,0)
(79,77,0)
(61,81,0)
(50,34,0)
(7,14,0)
(57,14,0)
(111,84,0)
(65,25,0)
(83,108,0)
(7,104,0)
(24,59,0)
(68,37,0)
(49,21,0)
(63,35,0)
(76,112,0)
(34,50,0)
(112,76,0)
(102,14,0)
(30,16,0)
(106,32,0)
(94,44,0)
(52,111,0)
(84,33,0)
(101,76,0)
(104,59,0)
(50,93,0)
(81,82,0)
(55,35,0)
(9,77,0)
(42,8,0)
(105,37,0)
(38,108,0)
(17,37,0)
(46,4,0)
(88,100,0)
(68,62,0)
(110,37,0)
(2,19,0)
(89,37,0)
(104,7,0)
(7,66,0)
(93,4,0)
(60,99,0)
(1,48,0)
(27,75,0)
(69,19,0)
(107,89,0)
(10,75,0)
(45,90,0)
(98,83,0)
(82,81,0)
(59,104,0)
(73,95,0)
(84,111,0)
(40,19,0)
(64,104,0)
(19,48,0)
(84,37,0)
(57,48,0)
(80,33,0)
(97,37,0)
(48,39,0)
(8,25,0)
(29,82,0)
(79,48,0)
(11,57,0)
(5,58,0)
(109,5,0)
(67,19,0)
(92,44,0)
(19,14,0)
(19,67,0)
(112,37,0)
(57,13,0)
(29,35,0)
(19,40,0)
(79,33,0)
(57,21,0)
(39,48,0)
(85,79,0)
(12,63,0)
(75,89,0)
(51,102,0)
(71,93,0)
(23,63,0)
(31,68,0)
(86,59,0)
(32,106,0)
(26,79,0)
(77,79,0)
(95,37,0)
(103,13,0)
(8,92,0)
(7,37,0)
(28,67,0)
(87,37,0)
(58,5,0)
(84,100,0)
(35,63,0)
(33,47,0)
(111,52,1)
(30,6,1)
(12,23,1)
(112,76,1)
(8,42,1)
(45,102,1)
(84,33,1)
(103,49,1)
(56,7,1)
(26,85,1)
(52,54,1)
(18,95,1)
(34,50,1)
(25,8,1)
(73,53,1)
(84,100,1)
(35,63,1)
(68,62,1)
(109,58,1)
(7,66,1)
(77,9,1)
(80,18,1)
(15,44,1)
(29,70,1)
(19,48,1)
(82,81,1)
(53,34,1)
(64,59,1)
(38,106,1)
(75,27,1)
(19,40,1)
(0,96,1)
(76,101,1)
(2,40,1)
(98,84,1)
(42,92,1)
(59,24,1)
(101,68,1)
(63,12,1)
(62,31,1)
(70,35,1)
(46,91,1)
(41,30,1)
(27,10,1)
(53,82,1)
(83,90,1)
(75,14,1)
(90,45,1)
(40,20,1)
(57,48,1)
(25,65,1)
(94,3,1)
(61,5,1)
(71,4,1)
(11,13,1)
(96,29,1)
(67,19,1)
(81,5,1)
(7,14,1)
(19,14,1)
(86,66,1)
(8,92,1)
(5,109,1)
(85,77,1)
(57,22,1)
(24,86,1)
(82,29,1)
(39,1,1)
(106,78,1)
(106,32,1)
(88,111,1)
(95,73,1)
(102,14,1)
(49,25,1)
(102,51,1)
(10,67,1)
(66,16,1)
(78,32,1)
(35,55,1)
(19,69,1)
(6,112,1)
(95,14,1)
(69,2,1)
(23,106,1)
(93,71,1)
(65,8,1)
(91,82,1)
(57,13,1)
(100,88,1)
(21,57,1)
(107,75,1)
(104,59,1)
(28,25,1)
(5,58,1)
(93,4,1)
(9,80,1)
(4,46,1)
(50,93,1)
(31,48,1)
(3,18,1)
(58,0,1)
(16,41,1)
(89,107,1)
(98,83,1)
(33,79,1)
(74,56,1)
(10,21,1)
(81,61,1)
(13,103,1)
(79,48,1)
(72,38,1)
(79,77,1)
(104,64,1)
(51,72,1)
(54,89,1)
(44,94,1)
(84,21,1)
(92,44,1)
(84,111,1)
(10,33,1)
(7,104,1)
(22,11,1)
(57,14,1)
(92,15,1)
(29,35,1)
(79,14,1)
(48,39,1)
(20,28,1)
(84,67,1)
(32,74,1)
(79,26,1)
(55,63,1)
(84,111,2)
(5,29,2)
(80,18,2)
(55,106,2)
(93,82,2)
(11,25,2)
(12,106,2)
(79,14,2)
(33,79,2)
(71,82,2)
(63,106,2)
(81,5,2)
(107,106,2)
(75,14,2)
(94,18,2)
(7,14,2)
(2,25,2)
(95,106,2)
(18,106,2)
(81,29,2)
(57,13,2)
(7,66,2)
(79,48,2)
(57,14,2)
(106,32,2)
(50,93,2)
(93,4,2)
(42,18,2)
(89,106,2)
(19,25,2)
(23,106,2)
(109,29,2)
(0,29,2)
(91,82,2)
(65,18,2)
(25,8,2)
(29,35,2)
(84,106,2)
(67,19,2)
(83,106,2)
(52,106,2)
(8,18,2)
(70,106,2)
(79,18,2)
(27,106,2)
(79,77,2)
(15,18,2)
(84,33,2)
(19,48,2)
(21,57,2)
(102,14,2)
(35,106,2)
(20,25,2)
(19,14,2)
(82,81,2)
(61,29,2)
(82,29,2)
(92,44,2)
(7,104,2)
(102,106,2)
(104,59,2)
(84,100,2)
(54,106,2)
(66,16,2)
(10,106,2)
(67,25,2)
(57,48,2)
(53,106,2)
(68,62,2)
(26,18,2)
(73,106,2)
(13,25,2)
(48,39,2)
(82,106,2)
(100,106,2)
(58,29,2)
(69,25,2)
(40,25,2)
(38,106,2)
(57,25,2)
(112,76,2)
(98,83,2)
(111,106,2)
(103,25,2)
(88,106,2)
(33,18,2)
(46,82,2)
(35,63,2)
(85,18,2)
(77,18,2)
(90,106,2)
(4,82,2)
(22,25,2)
(5,58,2)
(50,82,2)
(72,106,2)
(95,14,2)
(9,18,2)
(75,106,2)
(96,29,2)
(8,92,2)
(34,50,2)
(84,67,2)
(92,18,2)
(34,82,2)
(29,106,2)
(3,18,2)
(45,106,2)
(21,25,2)
(25,18,2)
(28,25,2)
(44,18,2)
(51,106,2)
(49,25,2)
(84,21,2)
(19,40,2)
-----------------------------------
(0,thread)
(1,oldset)
(2,oldset)
(3,ksig)
(4,current->thread)
(5,current->thread.hw_brk)
(6,regs)
(7,check_syscall_restart(regs, &ksig.ka, ksig.sig > 0)
(8,ksig.ka.sa.sa_flags)
(9,ksig)
(10,regs)
(11,oldset)
(12,thread)
(13,&ksig)
(14,struct pt_regs *regs)
(15,sa)
(16,ksig.ka)
(17,is32)
(18,is32)
(19,handle_rt_signal32(&ksig, oldset, regs)
(20,ksig)
(21,ret = handle_signal32(&ksig, oldset, regs)
(22,regs)
(23,current)
(24,sig)
(25,ksig.ka.sa.sa_flags & SA_SIGINFO)
(26,regs)
(27,trap)
(28,ret)
(29,current->thread.hw_brk.address)
(30,ksig)
(31,is32)
(32,ksig.sig)
(33,ret = handle_rt_signal64(&ksig, oldset, regs)
(34,__set_breakpoint(&current->thread.hw_brk)
(35,current->thread.hw_brk)
(36,ksig)
(37,)
(38,restore_saved_sigmask()
(39,sigmask_to_save()
(40,&ksig)
(41,ka)
(42,sa_flags)
(43,oldset)
(44,ksig.ka)
(45,0)
(46,thread)
(47,)
(48,*oldset = sigmask_to_save()
(49,ret)
(50,&current->thread.hw_brk)
(51,trap)
(52,ksig)
(53,current)
(54,ret)
(55,hw_brk)
(56,ksig)
(57,handle_signal32(&ksig, oldset, regs)
(58,current->thread)
(59,ksig.sig)
(60,if (ksig.ka.sa.sa_flags & SA_SIGINFO)
(61,type)
(62,is_32bit_task()
(63,current->thread)
(64,0)
(65,SA_SIGINFO)
(66,&ksig.ka)
(67,ret = handle_rt_signal32(&ksig, oldset, regs)
(68,is32 = is_32bit_task()
(69,regs)
(70,address)
(71,hw_brk)
(72,regs)
(73,regs)
(74,sig)
(75,regs->trap)
(76,&ksig)
(77,&ksig)
(78,0)
(79,handle_rt_signal64(&ksig, oldset, regs)
(80,ret)
(81,current->thread.hw_brk.type)
(82,current->thread.hw_brk.address &&\n\\n\\t\\tcurrent->thread.hw_brk.type)
(83,return;)
(84,signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP)
(85,oldset)
(86,ksig)
(87,if (ksig.sig <= 0)
(88,TIF_SINGLESTEP)
(89,regs->trap = 0)
(90,regs->trap = 0)
(91,current)
(92,ksig.ka.sa)
(93,current->thread.hw_brk)
(94,ka)
(95,thread_change_pc(current, regs)
(96,current)
(97,ret)
(98,RET)
(99,)
(100,test_thread_flag(TIF_SINGLESTEP)
(101,ksig)
(102,regs->trap)
(103,ksig)
(104,ksig.sig > 0)
(105,if (current->thread.hw_brk.address &&\n\\n\\t\\tcurrent->thread.hw_brk.type)
(106,ksig.sig <= 0)
(107,0)
(108,)
(109,hw_brk)
(110,if (is32)
(111,&ksig)
(112,get_signal(&ksig)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^