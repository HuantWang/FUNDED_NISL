-----label-----
1
-----code-----
void blk_sync_queue(struct request_queue *q)
{
	del_timer_sync(&q->timeout);
	cancel_work_sync(&q->timeout_work);

	if (q->mq_ops) {
		struct blk_mq_hw_ctx *hctx;
		int i;

		queue_for_each_hw_ctx(q, hctx, i) {
			cancel_work_sync(&hctx->run_work);
			cancel_delayed_work_sync(&hctx->delay_work);
		}
	} else {
		cancel_delayed_work_sync(&q->delay_work);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
26,27
26,28
27,28
30,31
30,32
30,33
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
59,60
59,61
60,61
61,62
61,63
62,63
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
79,80
80,81
80,82
81,82
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,7,9,10,15,19,20,24,28,29,33,34,39,41,42,45,47,51,53,55,57,63,67,68,72,76,77,82,86,87
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void blk_sync_queue(struct request_queue *q){	del_timer_sync(&q->timeout);	cancel_work_sync(&q->timeout_work);	if (q->mq_ops) {		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	} else {		cancel_delayed_work_sync(&q->delay_work);	}}
void
blk_sync_queue(struct request_queue *q)
blk_sync_queue
struct request_queue *q
struct request_queue
request_queue
*q
*
q
{	del_timer_sync(&q->timeout);	cancel_work_sync(&q->timeout_work);	if (q->mq_ops) {		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	} else {		cancel_delayed_work_sync(&q->delay_work);	}}
del_timer_sync(&q->timeout);
del_timer_sync(&q->timeout)
del_timer_sync
del_timer_sync
&q->timeout
q->timeout
q
q
timeout
cancel_work_sync(&q->timeout_work);
cancel_work_sync(&q->timeout_work)
cancel_work_sync
cancel_work_sync
&q->timeout_work
q->timeout_work
q
q
timeout_work
if (q->mq_ops) {		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	} else {		cancel_delayed_work_sync(&q->delay_work);	}
q->mq_ops
q
q
mq_ops
{		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	}
struct blk_mq_hw_ctx *hctx;
struct blk_mq_hw_ctx *hctx;
struct blk_mq_hw_ctx
blk_mq_hw_ctx
*hctx
*
hctx
int i;
int i;
int
i
i
queue_for_each_hw_ctx(q, hctx, i)
queue_for_each_hw_ctx(q, hctx, i)
queue_for_each_hw_ctx
queue_for_each_hw_ctx
q
q
hctx
hctx
i
i
)
{			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}
cancel_work_sync(&hctx->run_work);
cancel_work_sync(&hctx->run_work)
cancel_work_sync
cancel_work_sync
&hctx->run_work
hctx->run_work
hctx
hctx
run_work
cancel_delayed_work_sync(&hctx->delay_work);
cancel_delayed_work_sync(&hctx->delay_work)
cancel_delayed_work_sync
cancel_delayed_work_sync
&hctx->delay_work
hctx->delay_work
hctx
hctx
delay_work
{		cancel_delayed_work_sync(&q->delay_work);	}
cancel_delayed_work_sync(&q->delay_work);
cancel_delayed_work_sync(&q->delay_work)
cancel_delayed_work_sync
cancel_delayed_work_sync
&q->delay_work
q->delay_work
q
q
delay_work
-----joern-----
(8,14,0)
(29,20,0)
(14,8,0)
(20,3,0)
(11,30,0)
(30,9,0)
(23,1,0)
(11,3,0)
(12,36,0)
(13,12,0)
(18,36,0)
(31,21,0)
(16,2,0)
(9,21,0)
(28,33,0)
(0,1,0)
(22,21,0)
(15,11,0)
(25,20,0)
(33,28,0)
(12,13,0)
(13,10,0)
(6,2,0)
(5,8,0)
(36,12,0)
(16,22,0)
(8,5,0)
(22,16,0)
(26,19,0)
(10,19,0)
(4,36,0)
(33,10,0)
(2,16,0)
(28,1,0)
(7,19,0)
(17,5,0)
(2,3,0)
(30,11,0)
(1,28,0)
(35,5,0)
(34,11,0)
(5,3,0)
(9,30,0)
(14,32,0)
(24,2,0)
(18,4,1)
(14,8,1)
(2,24,1)
(1,0,1)
(30,11,1)
(35,20,1)
(25,22,1)
(5,3,1)
(5,17,1)
(2,3,1)
(28,1,1)
(15,34,1)
(17,35,1)
(20,29,1)
(4,33,1)
(20,3,1)
(8,5,1)
(27,14,1)
(13,12,1)
(29,25,1)
(0,23,1)
(27,13,1)
(22,16,1)
(6,9,1)
(33,28,1)
(16,2,1)
(11,3,1)
(12,36,1)
(11,15,1)
(9,30,1)
(24,6,1)
(36,18,1)
(23,20,1)
(20,3,2)
(16,2,2)
(28,20,2)
(23,20,2)
(8,20,2)
(22,16,2)
(1,20,2)
(35,20,2)
(18,20,2)
(30,11,2)
(13,12,2)
(14,20,2)
(2,3,2)
(9,30,2)
(17,20,2)
(12,36,2)
(28,1,2)
(13,20,2)
(33,28,2)
(8,5,2)
(14,8,2)
(5,3,2)
(12,20,2)
(0,20,2)
(4,20,2)
(36,20,2)
(33,20,2)
(5,20,2)
(11,3,2)
-----------------------------------
(0,run_work)
(1,hctx->run_work)
(2,q->timeout_work)
(3,struct request_queue *q)
(4,hctx)
(5,q->delay_work)
(6,q)
(7,i)
(8,&q->delay_work)
(9,del_timer_sync(&q->timeout)
(10,)
(11,q->timeout)
(12,&hctx->delay_work)
(13,cancel_delayed_work_sync(&hctx->delay_work)
(14,cancel_delayed_work_sync(&q->delay_work)
(15,timeout)
(16,&q->timeout_work)
(17,delay_work)
(18,delay_work)
(19,)
(20,q->mq_ops)
(21,)
(22,cancel_work_sync(&q->timeout_work)
(23,hctx)
(24,timeout_work)
(25,q)
(26,hctx)
(27,RET)
(28,&hctx->run_work)
(29,mq_ops)
(30,&q->timeout)
(31,if (q->mq_ops)
(32,)
(33,cancel_work_sync(&hctx->run_work)
(34,q)
(35,q)
(36,hctx->delay_work)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^