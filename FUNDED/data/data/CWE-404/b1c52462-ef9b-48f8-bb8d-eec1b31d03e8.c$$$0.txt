-----label-----
1
-----code-----
void smp_message_recv(int msg)
{
	switch(msg) {
	case PPC_MSG_CALL_FUNCTION:
		generic_smp_call_function_interrupt();
		break;
	case PPC_MSG_RESCHEDULE:
		/* we notice need_resched on exit */
		scheduler_ipi();
		break;
	case PPC_MSG_CALL_FUNC_SINGLE:
		generic_smp_call_function_single_interrupt();
		break;
	case PPC_MSG_DEBUGGER_BREAK:
		if (crash_ipi_function_ptr) {
			crash_ipi_function_ptr(get_irq_regs());
			break;
		}
#ifdef CONFIG_DEBUGGER
		debugger_ipi(get_irq_regs());
		break;
#endif /* CONFIG_DEBUGGER */
		/* FALLTHROUGH */
	default:
		printk("SMP %d: smp_message_recv(): unknown msg %d\n",
		       smp_processor_id(), msg);
		break;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
13,27
14,15
15,16
17,18
18,19
19,20
22,23
23,24
25,26
26,27
27,28
30,31
31,32
33,34
34,35
35,36
38,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
46,47
46,48
47,48
49,50
50,51
54,55
55,56
55,57
55,58
55,59
56,57
59,60
60,61
62,63
-----nextToken-----
2,4,6,8,12,16,20,21,24,28,29,32,36,37,40,43,48,51,52,53,57,58,61,63,64
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;FunctionDeclarator;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void smp_message_recv(int msg){	switch(msg) {	case PPC_MSG_CALL_FUNCTION:		generic_smp_call_function_interrupt();		break;	case PPC_MSG_RESCHEDULE:		/* we notice need_resched on exit */		scheduler_ipi();		break;	case PPC_MSG_CALL_FUNC_SINGLE:		generic_smp_call_function_single_interrupt();		break;	case PPC_MSG_DEBUGGER_BREAK:		if (crash_ipi_function_ptr) {			crash_ipi_function_ptr(get_irq_regs());			break;		}#ifdef CONFIG_DEBUGGER		debugger_ipi(get_irq_regs());		break;#endif /* CONFIG_DEBUGGER */		/* FALLTHROUGH */	default:		printk("SMP %d: smp_message_recv(): unknown msg %d\n",		       smp_processor_id(), msg);		break;	}}
void
smp_message_recv(int msg)
smp_message_recv
int msg
int
msg
msg
{	switch(msg) {	case PPC_MSG_CALL_FUNCTION:		generic_smp_call_function_interrupt();		break;	case PPC_MSG_RESCHEDULE:		/* we notice need_resched on exit */		scheduler_ipi();		break;	case PPC_MSG_CALL_FUNC_SINGLE:		generic_smp_call_function_single_interrupt();		break;	case PPC_MSG_DEBUGGER_BREAK:		if (crash_ipi_function_ptr) {			crash_ipi_function_ptr(get_irq_regs());			break;		}#ifdef CONFIG_DEBUGGER		debugger_ipi(get_irq_regs());		break;#endif /* CONFIG_DEBUGGER */		/* FALLTHROUGH */	default:		printk("SMP %d: smp_message_recv(): unknown msg %d\n",		       smp_processor_id(), msg);		break;	}}
switch(msg) {	case PPC_MSG_CALL_FUNCTION:		generic_smp_call_function_interrupt();		break;	case PPC_MSG_RESCHEDULE:		/* we notice need_resched on exit */		scheduler_ipi();		break;	case PPC_MSG_CALL_FUNC_SINGLE:		generic_smp_call_function_single_interrupt();		break;	case PPC_MSG_DEBUGGER_BREAK:		if (crash_ipi_function_ptr) {			crash_ipi_function_ptr(get_irq_regs());			break;		}#ifdef CONFIG_DEBUGGER		debugger_ipi(get_irq_regs());		break;#endif /* CONFIG_DEBUGGER */		/* FALLTHROUGH */	default:		printk("SMP %d: smp_message_recv(): unknown msg %d\n",		       smp_processor_id(), msg);		break;	}
msg
msg
{	case PPC_MSG_CALL_FUNCTION:		generic_smp_call_function_interrupt();		break;	case PPC_MSG_RESCHEDULE:		/* we notice need_resched on exit */		scheduler_ipi();		break;	case PPC_MSG_CALL_FUNC_SINGLE:		generic_smp_call_function_single_interrupt();		break;	case PPC_MSG_DEBUGGER_BREAK:		if (crash_ipi_function_ptr) {			crash_ipi_function_ptr(get_irq_regs());			break;		}#ifdef CONFIG_DEBUGGER		debugger_ipi(get_irq_regs());		break;#endif /* CONFIG_DEBUGGER */		/* FALLTHROUGH */	default:		printk("SMP %d: smp_message_recv(): unknown msg %d\n",		       smp_processor_id(), msg);		break;	}
case PPC_MSG_CALL_FUNCTION:
PPC_MSG_CALL_FUNCTION
PPC_MSG_CALL_FUNCTION
generic_smp_call_function_interrupt();
generic_smp_call_function_interrupt()
generic_smp_call_function_interrupt
generic_smp_call_function_interrupt
break;
case PPC_MSG_RESCHEDULE:
PPC_MSG_RESCHEDULE
PPC_MSG_RESCHEDULE
scheduler_ipi();
scheduler_ipi()
scheduler_ipi
scheduler_ipi
break;
case PPC_MSG_CALL_FUNC_SINGLE:
PPC_MSG_CALL_FUNC_SINGLE
PPC_MSG_CALL_FUNC_SINGLE
generic_smp_call_function_single_interrupt();
generic_smp_call_function_single_interrupt()
generic_smp_call_function_single_interrupt
generic_smp_call_function_single_interrupt
break;
case PPC_MSG_DEBUGGER_BREAK:
PPC_MSG_DEBUGGER_BREAK
PPC_MSG_DEBUGGER_BREAK
if (crash_ipi_function_ptr) {			crash_ipi_function_ptr(get_irq_regs());			break;		}
crash_ipi_function_ptr
crash_ipi_function_ptr
{			crash_ipi_function_ptr(get_irq_regs());			break;		}
crash_ipi_function_ptr(get_irq_regs());
crash_ipi_function_ptr(get_irq_regs());
crash_ipi_function_ptr
crash_ipi_function_ptr
(get_irq_regs())
get_irq_regs()
get_irq_regs
break;
default:
printk("SMP %d: smp_message_recv(): unknown msg %d\n",		       smp_processor_id(), msg);
printk("SMP %d: smp_message_recv(): unknown msg %d\n",		       smp_processor_id(), msg)
printk
printk
"SMP %d: smp_message_recv(): unknown msg %d\n"
smp_processor_id()
smp_processor_id
smp_processor_id
msg
msg
break;
-----joern-----
(14,0,0)
(18,0,0)
(19,7,0)
(14,28,0)
(2,23,0)
(1,7,0)
(16,7,0)
(2,7,0)
(25,7,0)
(20,2,0)
(4,7,0)
(27,7,0)
(23,2,0)
(8,15,0)
(19,10,0)
(28,14,0)
(30,7,0)
(5,7,0)
(6,7,0)
(10,19,0)
(11,7,0)
(17,2,0)
(21,7,0)
(29,7,0)
(2,3,0)
(24,7,0)
(12,7,0)
(13,7,0)
(2,23,1)
(27,25,1)
(17,9,1)
(18,14,1)
(22,27,1)
(16,2,1)
(24,9,1)
(19,10,1)
(2,20,1)
(22,13,1)
(14,28,1)
(1,12,1)
(25,9,1)
(22,1,1)
(20,23,1)
(13,19,1)
(12,9,1)
(28,26,1)
(2,3,1)
(22,18,1)
(26,9,1)
(22,5,1)
(10,26,1)
(22,16,1)
(5,24,1)
(23,17,1)
(12,9,2)
(1,9,2)
(27,9,2)
(20,9,2)
(2,9,2)
(24,9,2)
(17,9,2)
(2,23,2)
(19,10,2)
(14,26,2)
(5,9,2)
(2,3,2)
(26,9,2)
(25,9,2)
(10,26,2)
(23,9,2)
(18,26,2)
(16,9,2)
(14,28,2)
(28,26,2)
(19,26,2)
(13,26,2)
-----------------------------------
(0,)
(1,break;)
(2,printk("SMP %d: smp_message_recv()
(3,int msg)
(4,if (crash_ipi_function_ptr)
(5,break;)
(6,case PPC_MSG_CALL_FUNCTION:)
(7,)
(8,switch(msg)
(9,msg)
(10,get_irq_regs()
(11,case PPC_MSG_RESCHEDULE:)
(12,generic_smp_call_function_single_interrupt()
(13,break;)
(14,crash_ipi_function_ptr(get_irq_regs()
(15,)
(16,break;)
(17,"SMP %d: smp_message_recv()
(18,break;)
(19,debugger_ipi(get_irq_regs()
(20,msg)
(21,case PPC_MSG_DEBUGGER_BREAK:)
(22,RET)
(23,smp_processor_id()
(24,scheduler_ipi()
(25,generic_smp_call_function_interrupt()
(26,crash_ipi_function_ptr)
(27,break;)
(28,get_irq_regs()
(29,case PPC_MSG_CALL_FUNC_SINGLE:)
(30,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^