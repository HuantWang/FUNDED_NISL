-----label-----
0
-----code-----
static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
		unsigned int event)
{
	int rc;
	struct cpufreq_interactive_policyinfo *ppol;
	struct cpufreq_frequency_table *freq_table;
	struct cpufreq_interactive_tunables *tunables;
	unsigned long flags;
	unsigned int anyboost;

	if (have_governor_per_policy())
		tunables = policy->governor_data;
	else
		tunables = common_tunables;

	BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));

	switch (event) {
	case CPUFREQ_GOV_POLICY_INIT:
		ppol = get_policyinfo(policy);
		if (IS_ERR(ppol))
			return PTR_ERR(ppol);

		if (have_governor_per_policy()) {
			WARN_ON(tunables);
		} else if (tunables) {
			tunables->usage_count++;
			policy->governor_data = tunables;
			return 0;
		}

		tunables = get_tunables(ppol);
		if (!tunables) {
			tunables = alloc_tunable(policy);
			if (IS_ERR(tunables))
				return PTR_ERR(tunables);
		}

		tunables->usage_count = 1;
		policy->governor_data = tunables;
		if (!have_governor_per_policy()) {
			WARN_ON(cpufreq_get_global_kobject());
			common_tunables = tunables;
		}

		rc = sysfs_create_group(get_governor_parent_kobj(policy),
				get_sysfs_attr());
		if (rc) {
			kfree(tunables);
			policy->governor_data = NULL;
			if (!have_governor_per_policy()) {
				common_tunables = NULL;
				cpufreq_put_global_kobject();
			}
			return rc;
		}

		if (!policy->governor->initialized)
			cpufreq_register_notifier(&cpufreq_notifier_block,
					CPUFREQ_TRANSITION_NOTIFIER);

		if (tunables->use_sched_load)
			cpufreq_interactive_enable_sched_input(tunables);

		if (have_governor_per_policy())
			ppol->cached_tunables = tunables;
		else
			cached_common_tunables = tunables;

		break;

	case CPUFREQ_GOV_POLICY_EXIT:
		if (!--tunables->usage_count) {
			if (policy->governor->initialized == 1)
				cpufreq_unregister_notifier(&cpufreq_notifier_block,
						CPUFREQ_TRANSITION_NOTIFIER);

			sysfs_remove_group(get_governor_parent_kobj(policy),
					get_sysfs_attr());
			if (!have_governor_per_policy())
				cpufreq_put_global_kobject();
			common_tunables = NULL;
		}

		policy->governor_data = NULL;

		if (tunables->use_sched_load)
			cpufreq_interactive_disable_sched_input(tunables);

		break;

	case CPUFREQ_GOV_START:
		mutex_lock(&gov_lock);

		freq_table = cpufreq_frequency_get_table(policy->cpu);
		if (!tunables->hispeed_freq)
			tunables->hispeed_freq = policy->max;

		ppol = per_cpu(polinfo, policy->cpu);
		ppol->policy = policy;
		ppol->target_freq = policy->cur;
		ppol->freq_table = freq_table;
		ppol->floor_freq = ppol->target_freq;
		ppol->floor_validate_time = ktime_to_us(ktime_get());
		ppol->hispeed_validate_time = ppol->floor_validate_time;
		ppol->min_freq = policy->min;
		ppol->reject_notification = true;
		down_write(&ppol->enable_sem);
		del_timer_sync(&ppol->policy_timer);
		del_timer_sync(&ppol->policy_slack_timer);
		ppol->policy_timer.data = policy->cpu;
		ppol->last_evaluated_jiffy = get_jiffies_64();
		cpufreq_interactive_timer_start(tunables, policy->cpu);
		ppol->governor_enabled = 1;
		up_write(&ppol->enable_sem);
		ppol->reject_notification = false;

		mutex_unlock(&gov_lock);
		break;

	case CPUFREQ_GOV_STOP:
		mutex_lock(&gov_lock);

		ppol = per_cpu(polinfo, policy->cpu);
		ppol->reject_notification = true;
		down_write(&ppol->enable_sem);
		ppol->governor_enabled = 0;
		ppol->target_freq = 0;
		del_timer_sync(&ppol->policy_timer);
		del_timer_sync(&ppol->policy_slack_timer);
		up_write(&ppol->enable_sem);
		ppol->reject_notification = false;

		mutex_unlock(&gov_lock);
		break;

	case CPUFREQ_GOV_LIMITS:
		__cpufreq_driver_target(policy,
				policy->cur, CPUFREQ_RELATION_L);

		ppol = per_cpu(polinfo, policy->cpu);

		down_read(&ppol->enable_sem);
		if (ppol->governor_enabled) {
			spin_lock_irqsave(&ppol->target_freq_lock, flags);
			if (policy->max < ppol->target_freq) {
				ppol->target_freq = policy->max;
			} else if (policy->min > ppol->target_freq) {
				ppol->target_freq = policy->min;
				anyboost = 1;
			}
			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);

			if (policy->min < ppol->min_freq)
				cpufreq_interactive_timer_resched(policy->cpu,
								  true);
			ppol->min_freq = policy->min;
		}

		up_read(&ppol->enable_sem);

		if (anyboost) {
			u64 now = ktime_to_us(ktime_get());

			ppol->hispeed_validate_time = now;
			ppol->floor_freq = policy->min;
			ppol->floor_validate_time = now;
		}

		break;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
16,17
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
45,46
47,48
48,49
48,50
50,51
52,53
52,54
52,55
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
75,76
76,77
78,79
79,80
79,81
80,81
82,83
84,85
84,86
85,86
87,88
87,89
87,90
87,91
87,92
87,93
87,94
87,95
87,96
87,97
87,98
87,99
87,100
87,101
87,102
87,103
87,104
87,105
87,106
87,107
87,108
87,109
87,110
87,111
87,112
87,113
87,114
87,115
87,116
87,117
87,118
87,119
87,120
87,121
87,122
87,123
87,124
87,125
87,126
87,127
87,128
87,129
87,130
87,131
87,132
87,133
87,134
87,135
87,136
87,137
87,138
87,139
87,140
87,141
87,142
87,143
87,144
87,145
87,146
87,147
87,148
87,149
87,150
87,151
87,152
88,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
112,114
112,115
113,114
114,115
116,117
117,118
118,119
118,120
119,120
121,122
123,124
123,125
124,125
126,127
126,128
126,129
127,128
128,129
129,130
129,131
130,131
133,134
134,135
134,136
135,136
135,137
136,137
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
148,149
150,151
152,153
152,154
153,154
154,155
156,157
156,158
157,158
158,159
158,160
159,160
161,162
161,163
162,163
164,165
166,167
166,168
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
178,179
179,180
179,181
180,181
180,182
181,182
185,186
186,187
186,188
187,188
187,189
188,189
191,192
193,194
193,195
194,195
195,196
196,197
198,199
198,200
199,200
200,201
200,202
201,202
203,204
204,205
206,207
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
216,219
217,218
219,220
219,221
220,221
222,223
224,225
225,226
227,228
227,229
228,229
230,231
230,232
230,233
230,234
231,232
232,233
232,234
233,234
235,236
237,238
238,239
238,240
239,240
239,241
240,241
243,244
245,246
245,247
246,247
247,248
248,249
250,251
250,252
251,252
252,253
252,254
253,254
255,256
257,258
258,259
259,260
261,262
262,263
264,265
264,266
265,266
266,267
266,268
267,268
267,269
268,269
272,273
273,274
273,275
273,276
274,275
276,277
277,278
279,280
281,282
281,283
282,283
282,284
283,284
286,287
287,288
287,289
288,289
290,291
292,293
292,294
292,295
293,294
294,295
296,297
297,298
297,299
298,299
298,300
299,300
302,303
304,305
305,306
305,307
306,307
308,309
311,312
312,313
314,315
314,316
315,316
316,317
317,318
317,319
318,319
321,322
321,323
321,324
321,325
322,323
322,324
323,324
323,325
324,325
324,326
325,326
325,327
326,327
331,332
332,333
332,334
332,335
333,334
335,336
336,337
338,339
340,341
341,342
341,343
341,344
342,343
344,345
344,346
345,346
347,348
349,350
350,351
352,353
352,354
353,354
354,355
355,356
357,358
358,359
359,360
361,362
362,363
362,364
363,364
365,366
367,368
368,369
368,370
369,370
369,371
370,371
373,374
375,376
375,377
376,377
376,378
377,378
380,381
381,382
381,383
382,383
384,385
387,388
388,389
390,391
391,392
391,393
392,393
394,395
395,396
395,397
398,399
399,400
399,401
400,401
402,403
402,404
403,404
405,406
405,407
406,407
409,410
409,411
410,411
411,412
411,413
412,413
415,416
416,417
416,418
417,418
417,419
418,419
421,422
421,423
422,423
425,426
426,427
426,428
427,428
429,430
429,431
429,432
430,431
432,433
434,435
434,436
435,436
438,439
439,440
439,441
440,441
440,442
441,442
444,445
446,447
447,448
447,449
448,449
448,450
449,450
452,453
452,454
453,454
456,457
457,458
457,459
458,459
458,460
459,460
462,463
464,465
465,466
465,467
466,467
466,468
467,468
470,471
470,472
471,472
474,475
475,476
475,477
476,477
476,478
477,478
480,481
480,482
481,482
483,484
484,485
486,487
487,488
487,489
488,489
488,490
489,490
492,493
492,494
493,494
496,497
497,498
497,499
498,499
498,500
499,500
502,503
502,504
503,504
506,507
507,508
507,509
508,509
508,510
509,510
513,514
514,515
514,516
515,516
517,518
518,519
518,520
519,520
522,523
523,524
523,525
524,525
526,527
527,528
527,529
528,529
531,532
532,533
532,534
533,534
535,536
536,537
536,538
537,538
540,541
541,542
541,543
542,543
542,544
543,544
543,545
544,545
548,549
548,550
549,550
552,553
553,554
553,555
554,555
554,556
555,556
558,559
559,560
561,562
562,563
562,564
562,565
563,564
565,566
567,568
567,569
568,569
571,572
572,573
572,574
573,574
573,575
574,575
578,579
579,580
579,581
580,581
582,583
583,584
583,585
584,585
587,588
588,589
588,590
589,590
589,591
590,591
594,595
595,596
595,597
596,597
598,599
599,600
602,603
603,604
605,606
606,607
606,608
607,608
609,610
610,611
612,613
613,614
613,615
614,615
616,617
616,618
616,619
617,618
619,620
621,622
621,623
622,623
625,626
626,627
626,628
627,628
627,629
628,629
632,633
633,634
633,635
634,635
636,637
637,638
637,639
638,639
641,642
642,643
642,644
643,644
643,645
644,645
648,649
649,650
649,651
650,651
650,652
651,652
655,656
656,657
656,658
657,658
659,660
660,661
660,662
661,662
664,665
665,666
665,667
666,667
668,669
669,670
669,671
670,671
673,674
674,675
674,676
675,676
677,678
678,679
678,680
679,680
682,683
683,684
683,685
684,685
684,686
685,686
689,690
690,691
690,692
691,692
693,694
694,695
697,698
698,699
700,701
701,702
701,703
701,704
701,705
702,703
704,705
706,707
706,708
707,708
710,711
712,713
713,714
713,715
714,715
716,717
716,718
716,719
717,718
719,720
721,722
721,723
722,723
725,726
726,727
726,728
727,728
729,730
730,731
730,732
731,732
734,735
734,736
735,736
735,737
736,737
739,740
739,741
739,742
739,743
739,744
740,741
741,742
741,743
741,744
742,743
744,745
745,746
745,747
746,747
749,750
751,752
751,753
751,754
752,753
752,754
753,754
753,755
754,755
757,758
757,759
758,759
761,762
762,763
763,764
763,765
764,765
764,766
765,766
768,769
768,770
769,770
772,773
772,774
773,774
773,775
774,775
774,776
775,776
778,779
778,780
779,780
782,783
782,784
783,784
784,785
784,786
785,786
785,787
786,787
789,790
789,791
790,791
793,794
794,795
794,796
795,796
798,799
799,800
799,801
799,802
800,801
802,803
803,804
803,805
804,805
807,808
809,810
809,811
810,811
810,812
811,812
811,813
812,813
815,816
815,817
816,817
819,820
820,821
820,822
820,823
821,822
823,824
823,825
824,825
828,829
829,830
829,831
830,831
830,832
831,832
834,835
834,836
835,836
838,839
839,840
839,841
840,841
842,843
843,844
843,845
844,845
847,848
847,849
848,849
850,851
850,852
850,853
850,854
851,852
852,853
852,854
853,854
855,856
855,857
857,858
858,859
858,860
859,860
861,862
862,863
864,865
865,866
865,867
866,867
866,868
867,868
870,871
872,873
873,874
873,875
874,875
874,876
875,876
878,879
878,880
879,880
882,883
883,884
883,885
884,885
884,886
885,886
888,889
891,892
-----nextToken-----

-----computeFrom-----
57,58
57,59
65,66
65,67
74,75
74,76
79,80
79,81
92,93
92,94
134,135
134,136
144,145
144,146
158,159
158,160
179,180
179,181
186,187
186,188
207,208
207,209
213,214
213,215
238,239
238,240
252,253
252,254
297,298
297,299
305,306
305,307
323,324
323,325
362,363
362,364
368,369
368,370
399,400
399,401
416,417
416,418
426,427
426,428
439,440
439,441
447,448
447,449
457,458
457,459
465,466
465,467
475,476
475,477
487,488
487,489
497,498
497,499
507,508
507,509
541,542
541,543
553,554
553,555
572,573
572,574
588,589
588,590
613,614
613,615
626,627
626,628
642,643
642,644
649,650
649,651
683,684
683,685
713,714
713,715
752,753
752,754
763,764
763,765
773,774
773,775
784,785
784,786
794,795
794,796
810,811
810,812
829,830
829,831
865,866
865,867
873,874
873,875
883,884
883,885
-----guardedBy-----
756,771
759,766
755,770
760,767
777,792
780,787
776,791
781,788
813,825
-----guardedByNegation-----
759,787
755,791
760,788
-----lastLexicalUse-----
759,787
760,788
755,791
-----jump-----
759,787
760,788
755,791
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;FunctionDeclarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static int cpufreq_governor_interactive(struct cpufreq_policy *policy,		unsigned int event){	int rc;	struct cpufreq_interactive_policyinfo *ppol;	struct cpufreq_frequency_table *freq_table;	struct cpufreq_interactive_tunables *tunables;	unsigned long flags;	unsigned int anyboost;	if (have_governor_per_policy())		tunables = policy->governor_data;	else		tunables = common_tunables;	BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));	switch (event) {	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		if (anyboost) {			u64 now = ktime_to_us(ktime_get());			ppol->hispeed_validate_time = now;			ppol->floor_freq = policy->min;			ppol->floor_validate_time = now;		}		break;	}	return 0;}
static int
cpufreq_governor_interactive(struct cpufreq_policy *policy,		unsigned int event)
cpufreq_governor_interactive
struct cpufreq_policy *policy
struct cpufreq_policy
cpufreq_policy
*policy
*
policy
unsigned int event
unsigned int
event
event
{	int rc;	struct cpufreq_interactive_policyinfo *ppol;	struct cpufreq_frequency_table *freq_table;	struct cpufreq_interactive_tunables *tunables;	unsigned long flags;	unsigned int anyboost;	if (have_governor_per_policy())		tunables = policy->governor_data;	else		tunables = common_tunables;	BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));	switch (event) {	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		if (anyboost) {			u64 now = ktime_to_us(ktime_get());			ppol->hispeed_validate_time = now;			ppol->floor_freq = policy->min;			ppol->floor_validate_time = now;		}		break;	}	return 0;}
int rc;
int rc;
int
rc
rc
struct cpufreq_interactive_policyinfo *ppol;
struct cpufreq_interactive_policyinfo *ppol;
struct cpufreq_interactive_policyinfo
cpufreq_interactive_policyinfo
*ppol
*
ppol
struct cpufreq_frequency_table *freq_table;
struct cpufreq_frequency_table *freq_table;
struct cpufreq_frequency_table
cpufreq_frequency_table
*freq_table
*
freq_table
struct cpufreq_interactive_tunables *tunables;
struct cpufreq_interactive_tunables *tunables;
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*tunables
*
tunables
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
unsigned int anyboost;
unsigned int anyboost;
unsigned int
anyboost
anyboost
if (have_governor_per_policy())		tunables = policy->governor_data;	else		tunables = common_tunables;
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
tunables = policy->governor_data;
tunables = policy->governor_data
tunables
tunables
policy->governor_data
policy
policy
governor_data
tunables = common_tunables;
tunables = common_tunables
tunables
tunables
common_tunables
common_tunables
BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));
BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT))
BUG_ON
BUG_ON
!tunables && (event != CPUFREQ_GOV_POLICY_INIT)
!tunables
tunables
tunables
(event != CPUFREQ_GOV_POLICY_INIT)
event != CPUFREQ_GOV_POLICY_INIT
event
event
CPUFREQ_GOV_POLICY_INIT
CPUFREQ_GOV_POLICY_INIT
switch (event) {	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		if (anyboost) {			u64 now = ktime_to_us(ktime_get());			ppol->hispeed_validate_time = now;			ppol->floor_freq = policy->min;			ppol->floor_validate_time = now;		}		break;	}
event
event
{	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		if (anyboost) {			u64 now = ktime_to_us(ktime_get());			ppol->hispeed_validate_time = now;			ppol->floor_freq = policy->min;			ppol->floor_validate_time = now;		}		break;	}
case CPUFREQ_GOV_POLICY_INIT:
CPUFREQ_GOV_POLICY_INIT
CPUFREQ_GOV_POLICY_INIT
ppol = get_policyinfo(policy);
ppol = get_policyinfo(policy)
ppol
ppol
get_policyinfo(policy)
get_policyinfo
get_policyinfo
policy
policy
if (IS_ERR(ppol))			return PTR_ERR(ppol);
IS_ERR(ppol)
IS_ERR
IS_ERR
ppol
ppol
return PTR_ERR(ppol);
PTR_ERR(ppol)
PTR_ERR
PTR_ERR
ppol
ppol
if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
{			WARN_ON(tunables);		}
WARN_ON(tunables);
WARN_ON(tunables)
WARN_ON
WARN_ON
tunables
tunables
if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}
tunables
tunables
{			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}
tunables->usage_count++;
tunables->usage_count++
tunables->usage_count
tunables
tunables
usage_count
policy->governor_data = tunables;
policy->governor_data = tunables
policy->governor_data
policy
policy
governor_data
tunables
tunables
return 0;
0
tunables = get_tunables(ppol);
tunables = get_tunables(ppol)
tunables
tunables
get_tunables(ppol)
get_tunables
get_tunables
ppol
ppol
if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}
!tunables
tunables
tunables
{			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}
tunables = alloc_tunable(policy);
tunables = alloc_tunable(policy)
tunables
tunables
alloc_tunable(policy)
alloc_tunable
alloc_tunable
policy
policy
if (IS_ERR(tunables))				return PTR_ERR(tunables);
IS_ERR(tunables)
IS_ERR
IS_ERR
tunables
tunables
return PTR_ERR(tunables);
PTR_ERR(tunables)
PTR_ERR
PTR_ERR
tunables
tunables
tunables->usage_count = 1;
tunables->usage_count = 1
tunables->usage_count
tunables
tunables
usage_count
1
policy->governor_data = tunables;
policy->governor_data = tunables
policy->governor_data
policy
policy
governor_data
tunables
tunables
if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}
!have_governor_per_policy()
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
{			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}
WARN_ON(cpufreq_get_global_kobject());
WARN_ON(cpufreq_get_global_kobject());
WARN_ON
WARN_ON
(cpufreq_get_global_kobject())
cpufreq_get_global_kobject()
cpufreq_get_global_kobject
common_tunables = tunables;
common_tunables = tunables
common_tunables
common_tunables
tunables
tunables
rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());
rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr())
rc
rc
sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr())
sysfs_create_group
sysfs_create_group
get_governor_parent_kobj(policy)
get_governor_parent_kobj
get_governor_parent_kobj
policy
policy
get_sysfs_attr()
get_sysfs_attr
get_sysfs_attr
if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}
rc
rc
{			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}
kfree(tunables);
kfree(tunables)
kfree
kfree
tunables
tunables
policy->governor_data = NULL;
policy->governor_data = NULL
policy->governor_data
policy
policy
governor_data
NULL
NULL
if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}
!have_governor_per_policy()
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
{				common_tunables = NULL;				cpufreq_put_global_kobject();			}
common_tunables = NULL;
common_tunables = NULL
common_tunables
common_tunables
NULL
NULL
cpufreq_put_global_kobject();
cpufreq_put_global_kobject()
cpufreq_put_global_kobject
cpufreq_put_global_kobject
return rc;
rc
rc
if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);
!policy->governor->initialized
policy->governor->initialized
policy->governor
policy
policy
governor
initialized
cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);
cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER)
cpufreq_register_notifier
cpufreq_register_notifier
&cpufreq_notifier_block
cpufreq_notifier_block
cpufreq_notifier_block
CPUFREQ_TRANSITION_NOTIFIER
CPUFREQ_TRANSITION_NOTIFIER
if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);
tunables->use_sched_load
tunables
tunables
use_sched_load
cpufreq_interactive_enable_sched_input(tunables);
cpufreq_interactive_enable_sched_input(tunables)
cpufreq_interactive_enable_sched_input
cpufreq_interactive_enable_sched_input
tunables
tunables
if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
ppol->cached_tunables = tunables;
ppol->cached_tunables = tunables
ppol->cached_tunables
ppol
ppol
cached_tunables
tunables
tunables
cached_common_tunables = tunables;
cached_common_tunables = tunables
cached_common_tunables
cached_common_tunables
tunables
tunables
break;
case CPUFREQ_GOV_POLICY_EXIT:
CPUFREQ_GOV_POLICY_EXIT
CPUFREQ_GOV_POLICY_EXIT
if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}
!--tunables->usage_count
--tunables->usage_count
tunables->usage_count
tunables
tunables
usage_count
{			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}
if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);
policy->governor->initialized == 1
policy->governor->initialized
policy->governor
policy
policy
governor
initialized
1
cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);
cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER)
cpufreq_unregister_notifier
cpufreq_unregister_notifier
&cpufreq_notifier_block
cpufreq_notifier_block
cpufreq_notifier_block
CPUFREQ_TRANSITION_NOTIFIER
CPUFREQ_TRANSITION_NOTIFIER
sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());
sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr())
sysfs_remove_group
sysfs_remove_group
get_governor_parent_kobj(policy)
get_governor_parent_kobj
get_governor_parent_kobj
policy
policy
get_sysfs_attr()
get_sysfs_attr
get_sysfs_attr
if (!have_governor_per_policy())				cpufreq_put_global_kobject();
!have_governor_per_policy()
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
cpufreq_put_global_kobject();
cpufreq_put_global_kobject()
cpufreq_put_global_kobject
cpufreq_put_global_kobject
common_tunables = NULL;
common_tunables = NULL
common_tunables
common_tunables
NULL
NULL
policy->governor_data = NULL;
policy->governor_data = NULL
policy->governor_data
policy
policy
governor_data
NULL
NULL
if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);
tunables->use_sched_load
tunables
tunables
use_sched_load
cpufreq_interactive_disable_sched_input(tunables);
cpufreq_interactive_disable_sched_input(tunables)
cpufreq_interactive_disable_sched_input
cpufreq_interactive_disable_sched_input
tunables
tunables
break;
case CPUFREQ_GOV_START:
CPUFREQ_GOV_START
CPUFREQ_GOV_START
mutex_lock(&gov_lock);
mutex_lock(&gov_lock);
mutex_lock
mutex_lock
(&gov_lock)
&gov_lock
&
gov_lock
freq_table = cpufreq_frequency_get_table(policy->cpu);
freq_table = cpufreq_frequency_get_table(policy->cpu)
freq_table
freq_table
cpufreq_frequency_get_table(policy->cpu)
cpufreq_frequency_get_table
cpufreq_frequency_get_table
policy->cpu
policy
policy
cpu
if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;
!tunables->hispeed_freq
tunables->hispeed_freq
tunables
tunables
hispeed_freq
tunables->hispeed_freq = policy->max;
tunables->hispeed_freq = policy->max
tunables->hispeed_freq
tunables
tunables
hispeed_freq
policy->max
policy
policy
max
ppol = per_cpu(polinfo, policy->cpu);
ppol = per_cpu(polinfo, policy->cpu)
ppol
ppol
per_cpu(polinfo, policy->cpu)
per_cpu
per_cpu
polinfo
polinfo
policy->cpu
policy
policy
cpu
ppol->policy = policy;
ppol->policy = policy
ppol->policy
ppol
ppol
policy
policy
policy
ppol->target_freq = policy->cur;
ppol->target_freq = policy->cur
ppol->target_freq
ppol
ppol
target_freq
policy->cur
policy
policy
cur
ppol->freq_table = freq_table;
ppol->freq_table = freq_table
ppol->freq_table
ppol
ppol
freq_table
freq_table
freq_table
ppol->floor_freq = ppol->target_freq;
ppol->floor_freq = ppol->target_freq
ppol->floor_freq
ppol
ppol
floor_freq
ppol->target_freq
ppol
ppol
target_freq
ppol->floor_validate_time = ktime_to_us(ktime_get());
ppol->floor_validate_time = ktime_to_us(ktime_get())
ppol->floor_validate_time
ppol
ppol
floor_validate_time
ktime_to_us(ktime_get())
ktime_to_us
ktime_to_us
ktime_get()
ktime_get
ktime_get
ppol->hispeed_validate_time = ppol->floor_validate_time;
ppol->hispeed_validate_time = ppol->floor_validate_time
ppol->hispeed_validate_time
ppol
ppol
hispeed_validate_time
ppol->floor_validate_time
ppol
ppol
floor_validate_time
ppol->min_freq = policy->min;
ppol->min_freq = policy->min
ppol->min_freq
ppol
ppol
min_freq
policy->min
policy
policy
min
ppol->reject_notification = true;
ppol->reject_notification = true
ppol->reject_notification
ppol
ppol
reject_notification
true
down_write(&ppol->enable_sem);
down_write(&ppol->enable_sem)
down_write
down_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
del_timer_sync(&ppol->policy_timer);
del_timer_sync(&ppol->policy_timer)
del_timer_sync
del_timer_sync
&ppol->policy_timer
ppol->policy_timer
ppol
ppol
policy_timer
del_timer_sync(&ppol->policy_slack_timer);
del_timer_sync(&ppol->policy_slack_timer)
del_timer_sync
del_timer_sync
&ppol->policy_slack_timer
ppol->policy_slack_timer
ppol
ppol
policy_slack_timer
ppol->policy_timer.data = policy->cpu;
ppol->policy_timer.data = policy->cpu
ppol->policy_timer.data
ppol->policy_timer
ppol
ppol
policy_timer
data
policy->cpu
policy
policy
cpu
ppol->last_evaluated_jiffy = get_jiffies_64();
ppol->last_evaluated_jiffy = get_jiffies_64()
ppol->last_evaluated_jiffy
ppol
ppol
last_evaluated_jiffy
get_jiffies_64()
get_jiffies_64
get_jiffies_64
cpufreq_interactive_timer_start(tunables, policy->cpu);
cpufreq_interactive_timer_start(tunables, policy->cpu)
cpufreq_interactive_timer_start
cpufreq_interactive_timer_start
tunables
tunables
policy->cpu
policy
policy
cpu
ppol->governor_enabled = 1;
ppol->governor_enabled = 1
ppol->governor_enabled
ppol
ppol
governor_enabled
1
up_write(&ppol->enable_sem);
up_write(&ppol->enable_sem)
up_write
up_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
ppol->reject_notification = false;
ppol->reject_notification = false
ppol->reject_notification
ppol
ppol
reject_notification
false
mutex_unlock(&gov_lock);
mutex_unlock(&gov_lock)
mutex_unlock
mutex_unlock
&gov_lock
gov_lock
gov_lock
break;
case CPUFREQ_GOV_STOP:
CPUFREQ_GOV_STOP
CPUFREQ_GOV_STOP
mutex_lock(&gov_lock);
mutex_lock(&gov_lock)
mutex_lock
mutex_lock
&gov_lock
gov_lock
gov_lock
ppol = per_cpu(polinfo, policy->cpu);
ppol = per_cpu(polinfo, policy->cpu)
ppol
ppol
per_cpu(polinfo, policy->cpu)
per_cpu
per_cpu
polinfo
polinfo
policy->cpu
policy
policy
cpu
ppol->reject_notification = true;
ppol->reject_notification = true
ppol->reject_notification
ppol
ppol
reject_notification
true
down_write(&ppol->enable_sem);
down_write(&ppol->enable_sem)
down_write
down_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
ppol->governor_enabled = 0;
ppol->governor_enabled = 0
ppol->governor_enabled
ppol
ppol
governor_enabled
0
ppol->target_freq = 0;
ppol->target_freq = 0
ppol->target_freq
ppol
ppol
target_freq
0
del_timer_sync(&ppol->policy_timer);
del_timer_sync(&ppol->policy_timer)
del_timer_sync
del_timer_sync
&ppol->policy_timer
ppol->policy_timer
ppol
ppol
policy_timer
del_timer_sync(&ppol->policy_slack_timer);
del_timer_sync(&ppol->policy_slack_timer)
del_timer_sync
del_timer_sync
&ppol->policy_slack_timer
ppol->policy_slack_timer
ppol
ppol
policy_slack_timer
up_write(&ppol->enable_sem);
up_write(&ppol->enable_sem)
up_write
up_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
ppol->reject_notification = false;
ppol->reject_notification = false
ppol->reject_notification
ppol
ppol
reject_notification
false
mutex_unlock(&gov_lock);
mutex_unlock(&gov_lock)
mutex_unlock
mutex_unlock
&gov_lock
gov_lock
gov_lock
break;
case CPUFREQ_GOV_LIMITS:
CPUFREQ_GOV_LIMITS
CPUFREQ_GOV_LIMITS
__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);
__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L)
__cpufreq_driver_target
__cpufreq_driver_target
policy
policy
policy->cur
policy
policy
cur
CPUFREQ_RELATION_L
CPUFREQ_RELATION_L
ppol = per_cpu(polinfo, policy->cpu);
ppol = per_cpu(polinfo, policy->cpu)
ppol
ppol
per_cpu(polinfo, policy->cpu)
per_cpu
per_cpu
polinfo
polinfo
policy->cpu
policy
policy
cpu
down_read(&ppol->enable_sem);
down_read(&ppol->enable_sem)
down_read
down_read
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}
ppol->governor_enabled
ppol
ppol
governor_enabled
{			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}
spin_lock_irqsave(&ppol->target_freq_lock, flags);
spin_lock_irqsave(&ppol->target_freq_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
if (policy->max < ppol->target_freq) {				ppol->target_freq = policy->max;			} else if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}
policy->max < ppol->target_freq
policy->max
policy
policy
max
ppol->target_freq
ppol
ppol
target_freq
{				ppol->target_freq = policy->max;			}
ppol->target_freq = policy->max;
ppol->target_freq = policy->max
ppol->target_freq
ppol
ppol
target_freq
policy->max
policy
policy
max
if (policy->min > ppol->target_freq) {				ppol->target_freq = policy->min;				anyboost = 1;			}
policy->min > ppol->target_freq
policy->min
policy
policy
min
ppol->target_freq
ppol
ppol
target_freq
{				ppol->target_freq = policy->min;				anyboost = 1;			}
ppol->target_freq = policy->min;
ppol->target_freq = policy->min
ppol->target_freq
ppol
ppol
target_freq
policy->min
policy
policy
min
anyboost = 1;
anyboost = 1
anyboost
anyboost
1
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);
policy->min < ppol->min_freq
policy->min
policy
policy
min
ppol->min_freq
ppol
ppol
min_freq
cpufreq_interactive_timer_resched(policy->cpu,								  true);
cpufreq_interactive_timer_resched(policy->cpu,								  true)
cpufreq_interactive_timer_resched
cpufreq_interactive_timer_resched
policy->cpu
policy
policy
cpu
true
ppol->min_freq = policy->min;
ppol->min_freq = policy->min
ppol->min_freq
ppol
ppol
min_freq
policy->min
policy
policy
min
up_read(&ppol->enable_sem);
up_read(&ppol->enable_sem)
up_read
up_read
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
if (anyboost) {			u64 now = ktime_to_us(ktime_get());			ppol->hispeed_validate_time = now;			ppol->floor_freq = policy->min;			ppol->floor_validate_time = now;		}
anyboost
anyboost
{			u64 now = ktime_to_us(ktime_get());			ppol->hispeed_validate_time = now;			ppol->floor_freq = policy->min;			ppol->floor_validate_time = now;		}
u64 now = ktime_to_us(ktime_get());
u64 now = ktime_to_us(ktime_get());
u64
u64
now = ktime_to_us(ktime_get())
now
= ktime_to_us(ktime_get())
ktime_to_us(ktime_get())
ktime_to_us
ktime_to_us
ktime_get()
ktime_get
ktime_get
ppol->hispeed_validate_time = now;
ppol->hispeed_validate_time = now
ppol->hispeed_validate_time
ppol
ppol
hispeed_validate_time
now
now
ppol->floor_freq = policy->min;
ppol->floor_freq = policy->min
ppol->floor_freq
ppol
ppol
floor_freq
policy->min
policy
policy
min
ppol->floor_validate_time = now;
ppol->floor_validate_time = now
ppol->floor_validate_time
ppol
ppol
floor_validate_time
now
now
break;
return 0;
0
-----joern-----
(39,492,0)
(470,164,0)
(99,54,0)
(483,82,0)
(93,177,0)
(500,26,0)
(48,42,0)
(259,390,0)
(309,318,0)
(49,395,0)
(384,315,0)
(75,93,0)
(89,90,0)
(44,486,0)
(93,126,0)
(218,352,0)
(209,390,0)
(5,138,0)
(377,160,0)
(421,338,0)
(433,24,0)
(379,311,0)
(93,249,0)
(163,82,0)
(338,498,0)
(374,406,0)
(45,202,0)
(361,145,0)
(30,267,0)
(386,439,0)
(497,486,0)
(441,437,0)
(464,445,0)
(415,146,0)
(115,179,0)
(221,447,0)
(156,296,0)
(56,164,0)
(137,390,0)
(14,477,0)
(393,151,0)
(77,1,0)
(350,215,0)
(323,390,0)
(255,390,0)
(91,350,0)
(489,164,0)
(455,190,0)
(16,412,0)
(477,390,0)
(136,78,0)
(169,82,0)
(409,390,0)
(256,390,0)
(479,500,0)
(493,329,0)
(158,9,0)
(318,43,0)
(11,65,0)
(147,100,0)
(449,290,0)
(278,343,0)
(258,207,0)
(100,86,0)
(47,56,0)
(282,390,0)
(303,439,0)
(93,422,0)
(324,167,0)
(353,260,0)
(443,143,0)
(92,241,0)
(176,461,0)
(291,352,0)
(235,307,0)
(143,164,0)
(57,260,0)
(307,329,0)
(439,390,0)
(290,437,0)
(319,400,0)
(102,41,0)
(500,145,0)
(340,133,0)
(14,190,0)
(462,345,0)
(267,329,0)
(376,57,0)
(28,174,0)
(182,439,0)
(155,331,0)
(383,46,0)
(225,402,0)
(8,390,0)
(79,10,0)
(330,168,0)
(45,43,0)
(174,439,0)
(355,373,0)
(179,152,0)
(121,486,0)
(199,411,0)
(491,122,0)
(210,412,0)
(412,352,0)
(113,343,0)
(93,254,0)
(4,482,0)
(93,433,0)
(286,450,0)
(360,481,0)
(93,290,0)
(494,434,0)
(431,332,0)
(170,349,0)
(114,99,0)
(211,489,0)
(495,367,0)
(480,164,0)
(412,215,0)
(233,154,0)
(84,328,0)
(249,450,0)
(211,407,0)
(420,4,0)
(331,102,0)
(181,443,0)
(400,215,0)
(468,26,0)
(93,279,0)
(431,390,0)
(267,35,0)
(93,12,0)
(472,400,0)
(412,365,0)
(15,60,0)
(323,152,0)
(174,36,0)
(224,215,0)
(383,352,0)
(459,390,0)
(378,164,0)
(168,330,0)
(465,390,0)
(291,215,0)
(225,390,0)
(105,482,0)
(129,195,0)
(294,403,0)
(64,413,0)
(281,149,0)
(398,428,0)
(381,439,0)
(40,329,0)
(182,192,0)
(49,390,0)
(350,352,0)
(427,207,0)
(295,390,0)
(149,145,0)
(441,24,0)
(496,292,0)
(345,26,0)
(32,493,0)
(413,24,0)
(60,191,0)
(13,104,0)
(349,390,0)
(408,396,0)
(299,489,0)
(180,264,0)
(217,390,0)
(130,73,0)
(170,493,0)
(349,170,0)
(220,237,0)
(469,1,0)
(175,142,0)
(336,122,0)
(400,352,0)
(145,339,0)
(25,322,0)
(340,443,0)
(17,233,0)
(250,186,0)
(447,9,0)
(307,25,0)
(85,329,0)
(367,395,0)
(270,34,0)
(167,261,0)
(161,5,0)
(346,184,0)
(233,439,0)
(134,195,0)
(93,486,0)
(348,104,0)
(70,390,0)
(413,164,0)
(226,352,0)
(26,390,0)
(149,26,0)
(429,126,0)
(275,136,0)
(371,390,0)
(469,454,0)
(262,168,0)
(205,468,0)
(283,454,0)
(458,60,0)
(165,207,0)
(401,226,0)
(187,386,0)
(326,137,0)
(381,318,0)
(490,390,0)
(243,480,0)
(339,145,0)
(417,326,0)
(88,176,0)
(311,164,0)
(145,476,0)
(97,69,0)
(62,161,0)
(51,143,0)
(273,120,0)
(34,439,0)
(119,85,0)
(85,456,0)
(195,215,0)
(52,484,0)
(394,407,0)
(12,439,0)
(4,164,0)
(464,10,0)
(84,26,0)
(117,182,0)
(43,481,0)
(446,222,0)
(440,90,0)
(190,164,0)
(171,433,0)
(199,73,0)
(141,439,0)
(269,390,0)
(196,381,0)
(93,114,0)
(23,246,0)
(387,486,0)
(109,54,0)
(34,406,0)
(373,477,0)
(74,256,0)
(364,303,0)
(83,164,0)
(102,331,0)
(245,160,0)
(212,307,0)
(315,160,0)
(186,164,0)
(241,409,0)
(466,45,0)
(293,56,0)
(411,390,0)
(61,116,0)
(116,343,0)
(276,187,0)
(229,428,0)
(403,26,0)
(245,149,0)
(167,329,0)
(330,329,0)
(78,136,0)
(253,398,0)
(427,404,0)
(107,256,0)
(152,179,0)
(104,396,0)
(406,374,0)
(207,427,0)
(148,422,0)
(438,486,0)
(67,126,0)
(104,164,0)
(43,202,0)
(317,241,0)
(423,203,0)
(489,211,0)
(120,329,0)
(316,390,0)
(433,329,0)
(458,297,0)
(176,215,0)
(197,57,0)
(443,6,0)
(29,100,0)
(231,125,0)
(228,129,0)
(226,6,0)
(198,202,0)
(124,164,0)
(73,390,0)
(254,145,0)
(298,390,0)
(279,477,0)
(266,175,0)
(315,164,0)
(499,477,0)
(93,42,0)
(3,354,0)
(187,164,0)
(290,329,0)
(391,46,0)
(432,486,0)
(470,192,0)
(425,161,0)
(93,90,0)
(340,492,0)
(308,177,0)
(422,329,0)
(246,23,0)
(380,187,0)
(151,393,0)
(326,329,0)
(285,390,0)
(464,485,0)
(471,279,0)
(101,84,0)
(213,480,0)
(105,215,0)
(239,255,0)
(183,390,0)
(93,466,0)
(120,409,0)
(130,419,0)
(180,372,0)
(240,220,0)
(456,302,0)
(208,390,0)
(402,225,0)
(65,26,0)
(415,390,0)
(374,164,0)
(151,164,0)
(312,473,0)
(59,374,0)
(382,151,0)
(458,218,0)
(160,390,0)
(56,498,0)
(397,5,0)
(367,329,0)
(158,390,0)
(288,85,0)
(297,486,0)
(128,473,0)
(108,390,0)
(65,390,0)
(320,378,0)
(125,142,0)
(236,493,0)
(407,211,0)
(460,245,0)
(344,150,0)
(24,390,0)
(230,234,0)
(314,156,0)
(57,439,0)
(159,466,0)
(410,42,0)
(254,26,0)
(153,381,0)
(334,114,0)
(173,390,0)
(447,477,0)
(82,169,0)
(93,174,0)
(86,390,0)
(226,215,0)
(185,83,0)
(195,352,0)
(93,245,0)
(473,164,0)
(83,65,0)
(93,267,0)
(347,199,0)
(473,99,0)
(435,402,0)
(332,431,0)
(142,125,0)
(105,352,0)
(36,296,0)
(407,390,0)
(72,177,0)
(2,124,0)
(238,373,0)
(365,412,0)
(451,303,0)
(93,122,0)
(260,353,0)
(340,93,0)
(500,343,0)
(41,102,0)
(222,164,0)
(73,130,0)
(306,35,0)
(422,108,0)
(93,84,0)
(300,58,0)
(96,486,0)
(430,233,0)
(127,489,0)
(38,331,0)
(192,470,0)
(329,390,0)
(93,157,0)
(214,390,0)
(313,14,0)
(498,338,0)
(368,372,0)
(93,83,0)
(444,466,0)
(129,228,0)
(172,422,0)
(87,264,0)
(94,280,0)
(58,145,0)
(93,120,0)
(186,198,0)
(375,254,0)
(161,164,0)
(103,470,0)
(138,5,0)
(41,390,0)
(241,164,0)
(37,81,0)
(466,439,0)
(244,398,0)
(26,389,0)
(110,54,0)
(98,222,0)
(193,330,0)
(179,477,0)
(302,390,0)
(416,105,0)
(112,374,0)
(99,473,0)
(55,113,0)
(218,458,0)
(370,180,0)
(450,390,0)
(157,329,0)
(292,36,0)
(113,10,0)
(297,458,0)
(287,393,0)
(399,456,0)
(7,292,0)
(195,129,0)
(144,105,0)
(95,78,0)
(392,454,0)
(68,490,0)
(355,173,0)
(481,360,0)
(237,220,0)
(84,145,0)
(383,390,0)
(257,261,0)
(126,477,0)
(90,264,0)
(140,114,0)
(434,160,0)
(265,84,0)
(366,190,0)
(454,439,0)
(337,60,0)
(93,100,0)
(350,487,0)
(426,249,0)
(484,52,0)
(150,26,0)
(142,175,0)
(461,176,0)
(261,390,0)
(310,108,0)
(10,390,0)
(31,199,0)
(263,174,0)
(311,154,0)
(232,81,0)
(369,470,0)
(363,175,0)
(1,469,0)
(81,37,0)
(222,116,0)
(124,352,0)
(93,456,0)
(5,161,0)
(437,390,0)
(340,113,0)
(132,413,0)
(328,390,0)
(237,390,0)
(260,57,0)
(126,490,0)
(441,329,0)
(389,160,0)
(304,390,0)
(100,329,0)
(152,323,0)
(188,445,0)
(341,441,0)
(268,311,0)
(383,215,0)
(71,195,0)
(21,46,0)
(175,439,0)
(63,157,0)
(474,12,0)
(419,130,0)
(135,151,0)
(386,187,0)
(395,367,0)
(190,14,0)
(69,332,0)
(332,69,0)
(477,14,0)
(302,378,0)
(80,184,0)
(251,179,0)
(39,145,0)
(80,390,0)
(357,267,0)
(176,352,0)
(452,447,0)
(36,292,0)
(488,390,0)
(150,145,0)
(256,164,0)
(177,280,0)
(242,326,0)
(1,54,0)
(173,355,0)
(22,290,0)
(389,26,0)
(177,477,0)
(481,43,0)
(20,264,0)
(396,390,0)
(301,390,0)
(106,83,0)
(279,255,0)
(27,156,0)
(189,218,0)
(248,150,0)
(93,468,0)
(252,367,0)
(139,143,0)
(160,315,0)
(385,137,0)
(424,486,0)
(329,393,0)
(192,182,0)
(339,164,0)
(131,279,0)
(359,160,0)
(482,4,0)
(93,307,0)
(66,12,0)
(35,407,0)
(69,477,0)
(76,45,0)
(453,26,0)
(247,219,0)
(93,381,0)
(137,164,0)
(93,167,0)
(206,215,0)
(53,182,0)
(93,104,0)
(439,386,0)
(122,411,0)
(9,447,0)
(442,390,0)
(10,464,0)
(325,468,0)
(194,330,0)
(93,326,0)
(395,49,0)
(289,328,0)
(388,37,0)
(8,169,0)
(118,186,0)
(456,85,0)
(111,254,0)
(180,370,0)
(498,56,0)
(445,464,0)
(393,329,0)
(322,25,0)
(35,390,0)
(448,146,0)
(272,339,0)
(46,164,0)
(372,180,0)
(467,167,0)
(162,81,0)
(352,124,0)
(434,133,0)
(454,469,0)
(354,234,0)
(480,256,0)
(12,198,0)
(122,329,0)
(207,164,0)
(362,245,0)
(353,390,0)
(468,145,0)
(256,480,0)
(50,352,0)
(414,4,0)
(493,170,0)
(42,439,0)
(178,291,0)
(82,439,0)
(25,390,0)
(234,354,0)
(169,8,0)
(218,215,0)
(277,433,0)
(199,329,0)
(418,441,0)
(274,176,0)
(219,335,0)
(184,80,0)
(475,498,0)
(254,335,0)
(42,427,0)
(403,145,0)
(114,439,0)
(437,441,0)
(157,73,0)
(284,373,0)
(227,389,0)
(271,390,0)
(445,164,0)
(81,164,0)
(249,477,0)
(461,6,0)
(280,390,0)
(373,355,0)
(262,390,0)
(405,378,0)
(372,164,0)
(351,34,0)
(146,415,0)
(201,120,0)
(378,302,0)
(219,247,0)
(125,54,0)
(166,390,0)
(411,199,0)
(65,145,0)
(204,124,0)
(223,249,0)
(327,383,0)
(46,383,0)
(305,86,0)
(331,329,0)
(203,423,0)
(478,359,0)
(143,226,0)
(154,311,0)
(457,390,0)
(60,458,0)
(19,476,0)
(198,186,0)
(333,69,0)
(321,43,0)
(292,164,0)
(9,158,0)
(24,413,0)
(436,386,0)
(501,39,0)
(168,262,0)
(33,202,0)
(406,34,0)
(318,202,0)
(409,241,0)
(154,233,0)
(485,464,0)
(93,105,0)
(358,157,0)
(63,358,1)
(174,439,1)
(189,352,1)
(216,342,1)
(381,153,1)
(493,32,1)
(88,274,1)
(46,164,1)
(339,272,1)
(24,413,1)
(464,485,1)
(197,303,1)
(431,332,1)
(395,367,1)
(126,477,1)
(100,329,1)
(337,15,1)
(303,439,1)
(93,254,1)
(241,92,1)
(199,329,1)
(392,283,1)
(27,36,1)
(456,399,1)
(97,323,1)
(79,254,1)
(480,164,1)
(480,213,1)
(412,352,1)
(93,104,1)
(290,329,1)
(188,79,1)
(93,249,1)
(460,356,1)
(93,157,1)
(106,328,1)
(175,439,1)
(376,197,1)
(347,31,1)
(150,26,1)
(125,231,1)
(436,141,1)
(170,493,1)
(458,60,1)
(354,3,1)
(323,152,1)
(93,267,1)
(375,219,1)
(203,65,1)
(247,423,1)
(382,287,1)
(329,393,1)
(223,426,1)
(129,195,1)
(484,116,1)
(69,477,1)
(93,167,1)
(315,384,1)
(333,97,1)
(260,57,1)
(93,279,1)
(175,363,1)
(4,420,1)
(434,160,1)
(31,122,1)
(179,115,1)
(233,430,1)
(13,228,1)
(117,53,1)
(256,480,1)
(59,112,1)
(468,145,1)
(18,353,1)
(346,463,1)
(451,364,1)
(104,164,1)
(179,477,1)
(267,329,1)
(498,56,1)
(440,23,1)
(75,371,1)
(210,407,1)
(468,325,1)
(157,63,1)
(147,29,1)
(150,145,1)
(93,326,1)
(338,421,1)
(184,346,1)
(157,329,1)
(213,243,1)
(400,352,1)
(251,280,1)
(292,7,1)
(379,268,1)
(235,212,1)
(412,215,1)
(1,469,1)
(238,490,1)
(445,188,1)
(176,352,1)
(498,475,1)
(250,118,1)
(403,145,1)
(186,164,1)
(470,164,1)
(194,193,1)
(371,45,1)
(93,120,1)
(144,416,1)
(500,26,1)
(115,251,1)
(196,43,1)
(331,329,1)
(350,91,1)
(241,164,1)
(205,356,1)
(67,429,1)
(237,220,1)
(398,244,1)
(470,369,1)
(222,98,1)
(413,164,1)
(122,491,1)
(91,342,1)
(373,284,1)
(399,85,1)
(145,339,1)
(107,463,1)
(46,21,1)
(75,301,1)
(156,314,1)
(298,400,1)
(71,463,1)
(371,18,1)
(103,154,1)
(153,196,1)
(233,439,1)
(477,14,1)
(252,495,1)
(313,499,1)
(130,419,1)
(229,398,1)
(345,462,1)
(201,273,1)
(99,473,1)
(135,382,1)
(447,477,1)
(271,415,1)
(310,422,1)
(452,221,1)
(152,179,1)
(174,263,1)
(199,73,1)
(388,81,1)
(406,374,1)
(298,291,1)
(403,294,1)
(79,423,1)
(94,177,1)
(227,453,1)
(495,86,1)
(132,433,1)
(195,215,1)
(352,124,1)
(171,277,1)
(448,450,1)
(474,318,1)
(122,329,1)
(356,150,1)
(356,403,1)
(15,218,1)
(74,480,1)
(68,126,1)
(422,329,1)
(93,75,1)
(500,479,1)
(36,292,1)
(41,102,1)
(204,2,1)
(384,377,1)
(433,171,1)
(185,106,1)
(439,386,1)
(23,246,1)
(396,408,1)
(131,471,1)
(78,95,1)
(317,120,1)
(277,137,1)
(84,145,1)
(314,27,1)
(276,436,1)
(120,201,1)
(340,133,1)
(469,454,1)
(128,114,1)
(176,215,1)
(462,26,1)
(93,433,1)
(104,348,1)
(8,169,1)
(365,412,1)
(84,265,1)
(268,125,1)
(344,138,1)
(292,164,1)
(230,338,1)
(12,66,1)
(320,405,1)
(403,26,1)
(473,164,1)
(172,383,1)
(386,187,1)
(454,392,1)
(137,164,1)
(311,164,1)
(189,215,1)
(16,210,1)
(334,140,1)
(149,26,1)
(123,23,1)
(380,276,1)
(105,144,1)
(307,235,1)
(162,232,1)
(272,361,1)
(9,447,1)
(446,500,1)
(360,321,1)
(355,373,1)
(160,315,1)
(38,108,1)
(108,310,1)
(496,174,1)
(447,452,1)
(200,10,1)
(234,230,1)
(332,69,1)
(93,100,1)
(231,142,1)
(40,365,1)
(148,172,1)
(482,4,1)
(321,18,1)
(124,164,1)
(363,266,1)
(48,154,1)
(113,10,1)
(345,26,1)
(62,425,1)
(328,289,1)
(258,42,1)
(348,13,1)
(75,298,1)
(81,164,1)
(77,469,1)
(154,311,1)
(139,51,1)
(93,105,1)
(287,40,1)
(90,89,1)
(473,312,1)
(481,360,1)
(483,439,1)
(353,260,1)
(456,85,1)
(34,351,1)
(78,136,1)
(249,223,1)
(83,185,1)
(311,379,1)
(137,385,1)
(25,322,1)
(253,52,1)
(57,376,1)
(372,164,1)
(441,329,1)
(93,122,1)
(133,434,1)
(354,234,1)
(397,161,1)
(453,216,1)
(326,329,1)
(218,215,1)
(245,362,1)
(52,484,1)
(64,132,1)
(244,253,1)
(267,30,1)
(491,336,1)
(444,159,1)
(57,439,1)
(291,215,1)
(75,463,1)
(393,151,1)
(29,409,1)
(405,456,1)
(167,329,1)
(400,215,1)
(226,401,1)
(373,477,1)
(489,299,1)
(443,143,1)
(297,458,1)
(389,160,1)
(283,427,1)
(58,145,1)
(499,80,1)
(102,331,1)
(437,441,1)
(26,389,1)
(61,222,1)
(215,224,1)
(279,477,1)
(65,11,1)
(143,164,1)
(326,417,1)
(14,190,1)
(385,326,1)
(394,225,1)
(291,178,1)
(427,207,1)
(423,203,1)
(338,498,1)
(490,68,1)
(351,270,1)
(92,317,1)
(82,439,1)
(5,397,1)
(315,164,1)
(256,74,1)
(37,81,1)
(39,145,1)
(10,464,1)
(65,145,1)
(101,58,1)
(11,83,1)
(1,77,1)
(45,76,1)
(242,329,1)
(86,305,1)
(66,474,1)
(207,164,1)
(100,147,1)
(455,313,1)
(254,111,1)
(291,352,1)
(261,257,1)
(471,173,1)
(426,158,1)
(43,481,1)
(325,205,1)
(195,352,1)
(383,352,1)
(218,352,1)
(42,410,1)
(406,34,1)
(89,440,1)
(206,0,1)
(400,472,1)
(422,148,1)
(182,439,1)
(236,262,1)
(220,240,1)
(93,83,1)
(3,234,1)
(425,200,1)
(114,439,1)
(449,35,1)
(349,170,1)
(324,467,1)
(181,226,1)
(12,439,1)
(283,156,1)
(341,418,1)
(83,164,1)
(445,164,1)
(443,181,1)
(359,478,1)
(414,105,1)
(226,215,1)
(82,163,1)
(265,101,1)
(350,215,1)
(60,191,1)
(420,414,1)
(55,229,1)
(93,174,1)
(198,186,1)
(435,463,1)
(161,62,1)
(284,238,1)
(136,275,1)
(389,227,1)
(119,288,1)
(93,114,1)
(149,281,1)
(274,216,1)
(429,477,1)
(364,8,1)
(75,271,1)
(359,160,1)
(262,168,1)
(327,25,1)
(190,366,1)
(357,24,1)
(161,164,1)
(30,357,1)
(85,329,1)
(93,126,1)
(69,333,1)
(374,59,1)
(127,394,1)
(111,375,1)
(150,248,1)
(199,347,1)
(330,329,1)
(72,308,1)
(467,41,1)
(246,180,1)
(377,463,1)
(441,341,1)
(113,55,1)
(105,352,1)
(222,164,1)
(330,194,1)
(101,345,1)
(273,411,1)
(306,267,1)
(381,439,1)
(93,12,1)
(401,143,1)
(340,443,1)
(361,345,1)
(35,407,1)
(168,330,1)
(279,131,1)
(257,167,1)
(93,381,1)
(93,90,1)
(494,359,1)
(369,103,1)
(116,61,1)
(301,149,1)
(374,164,1)
(73,130,1)
(331,155,1)
(81,162,1)
(182,117,1)
(125,142,1)
(45,43,1)
(249,477,1)
(85,119,1)
(224,206,1)
(56,164,1)
(336,73,1)
(22,449,1)
(500,145,1)
(163,483,1)
(7,496,1)
(221,431,1)
(158,9,1)
(93,245,1)
(218,189,1)
(155,38,1)
(339,164,1)
(120,329,1)
(391,327,1)
(13,90,1)
(140,37,1)
(219,247,1)
(340,93,1)
(17,311,1)
(49,395,1)
(378,320,1)
(93,466,1)
(187,164,1)
(93,468,1)
(299,127,1)
(466,439,1)
(255,239,1)
(489,164,1)
(409,241,1)
(266,303,1)
(232,406,1)
(312,128,1)
(93,422,1)
(93,42,1)
(402,435,1)
(34,439,1)
(211,489,1)
(5,161,1)
(370,372,1)
(35,306,1)
(60,337,1)
(228,129,1)
(281,245,1)
(245,160,1)
(308,255,1)
(417,242,1)
(56,293,1)
(173,355,1)
(433,329,1)
(177,72,1)
(98,446,1)
(309,381,1)
(95,136,1)
(301,468,1)
(42,439,1)
(475,56,1)
(463,297,1)
(239,279,1)
(124,204,1)
(383,215,1)
(151,164,1)
(421,498,1)
(154,233,1)
(105,215,1)
(2,50,1)
(180,370,1)
(411,199,1)
(286,249,1)
(275,138,1)
(186,250,1)
(21,391,1)
(270,374,1)
(383,46,1)
(362,460,1)
(195,134,1)
(212,302,1)
(138,5,1)
(40,482,1)
(159,198,1)
(350,352,1)
(367,329,1)
(302,378,1)
(149,145,1)
(93,307,1)
(419,157,1)
(322,307,1)
(501,58,1)
(4,164,1)
(28,192,1)
(300,145,1)
(430,17,1)
(305,100,1)
(358,437,1)
(93,177,1)
(243,107,1)
(240,261,1)
(318,43,1)
(440,123,1)
(318,309,1)
(178,400,1)
(169,82,1)
(288,349,1)
(197,99,1)
(468,26,1)
(472,319,1)
(151,135,1)
(464,445,1)
(366,455,1)
(263,28,1)
(80,184,1)
(58,300,1)
(492,39,1)
(192,182,1)
(37,388,1)
(177,477,1)
(450,286,1)
(458,218,1)
(176,88,1)
(378,164,1)
(415,146,1)
(146,448,1)
(461,176,1)
(134,71,1)
(479,200,1)
(290,22,1)
(304,237,1)
(454,439,1)
(167,324,1)
(143,139,1)
(165,258,1)
(368,354,1)
(342,359,1)
(93,290,1)
(187,380,1)
(293,47,1)
(141,256,1)
(112,1,1)
(39,501,1)
(410,48,1)
(307,329,1)
(485,445,1)
(248,344,1)
(466,444,1)
(207,165,1)
(180,372,1)
(84,26,1)
(418,290,1)
(368,338,1)
(493,329,1)
(478,160,1)
(93,456,1)
(140,406,1)
(142,175,1)
(192,470,1)
(126,67,1)
(340,492,1)
(294,150,1)
(76,466,1)
(441,24,1)
(367,252,1)
(372,368,1)
(51,461,1)
(416,365,1)
(32,236,1)
(289,84,1)
(434,494,1)
(453,350,1)
(407,211,1)
(413,64,1)
(408,104,1)
(319,396,1)
(118,12,1)
(280,94,1)
(256,164,1)
(50,0,1)
(340,113,1)
(412,16,1)
(114,334,1)
(254,26,1)
(190,164,1)
(65,26,1)
(254,145,1)
(55,52,1)
(193,49,1)
(226,352,1)
(283,192,1)
(47,228,1)
(344,78,1)
(53,470,1)
(93,84,1)
(225,402,1)
(75,304,1)
(303,451,1)
(134,463,2)
(395,367,2)
(233,439,2)
(130,419,2)
(474,18,2)
(279,463,2)
(262,168,2)
(484,200,2)
(409,463,2)
(163,463,2)
(422,463,2)
(55,200,2)
(88,216,2)
(142,303,2)
(452,463,2)
(180,370,2)
(286,463,2)
(500,26,2)
(137,164,2)
(482,365,2)
(250,18,2)
(445,58,2)
(464,485,2)
(403,26,2)
(37,81,2)
(218,352,2)
(480,164,2)
(369,154,2)
(65,26,2)
(334,303,2)
(419,463,2)
(276,463,2)
(495,463,2)
(185,58,2)
(431,332,2)
(162,406,2)
(52,200,2)
(42,154,2)
(160,463,2)
(257,463,2)
(483,463,2)
(146,463,2)
(93,83,2)
(364,463,2)
(195,352,2)
(430,303,2)
(173,355,2)
(113,200,2)
(480,463,2)
(329,393,2)
(433,329,2)
(485,58,2)
(69,463,2)
(187,164,2)
(72,463,2)
(10,58,2)
(93,126,2)
(358,463,2)
(412,215,2)
(489,463,2)
(49,463,2)
(352,124,2)
(113,10,2)
(31,463,2)
(12,18,2)
(35,463,2)
(324,463,2)
(290,329,2)
(453,342,2)
(178,400,2)
(90,228,2)
(423,203,2)
(169,82,2)
(380,463,2)
(242,463,2)
(66,18,2)
(303,439,2)
(303,463,2)
(392,303,2)
(93,174,2)
(469,454,2)
(93,122,2)
(422,329,2)
(411,463,2)
(304,463,2)
(64,463,2)
(176,352,2)
(157,463,2)
(52,484,2)
(18,463,2)
(86,463,2)
(111,423,2)
(384,463,2)
(236,463,2)
(93,84,2)
(167,329,2)
(362,356,2)
(274,216,2)
(93,279,2)
(441,24,2)
(206,0,2)
(180,372,2)
(248,200,2)
(232,406,2)
(492,58,2)
(10,345,2)
(423,58,2)
(41,463,2)
(372,228,2)
(63,463,2)
(289,345,2)
(273,463,2)
(93,422,2)
(439,463,2)
(340,93,2)
(464,445,2)
(32,463,2)
(395,463,2)
(450,463,2)
(356,200,2)
(204,0,2)
(177,463,2)
(150,26,2)
(156,192,2)
(247,423,2)
(24,463,2)
(409,241,2)
(84,145,2)
(272,345,2)
(254,423,2)
(361,345,2)
(322,463,2)
(195,463,2)
(224,0,2)
(125,142,2)
(321,18,2)
(485,345,2)
(127,463,2)
(133,359,2)
(172,463,2)
(389,160,2)
(93,105,2)
(434,160,2)
(226,215,2)
(154,311,2)
(493,463,2)
(462,216,2)
(294,150,2)
(350,342,2)
(365,463,2)
(205,356,2)
(326,463,2)
(61,200,2)
(98,200,2)
(93,120,2)
(9,447,2)
(420,365,2)
(81,164,2)
(137,463,2)
(93,90,2)
(120,463,2)
(383,352,2)
(207,154,2)
(449,463,2)
(311,303,2)
(94,463,2)
(318,43,2)
(34,439,2)
(493,329,2)
(460,356,2)
(49,395,2)
(226,352,2)
(11,58,2)
(367,463,2)
(238,463,2)
(150,200,2)
(211,489,2)
(152,179,2)
(26,389,2)
(47,228,2)
(26,216,2)
(203,58,2)
(118,18,2)
(99,473,2)
(302,463,2)
(256,480,2)
(184,463,2)
(24,413,2)
(79,345,2)
(383,463,2)
(126,477,2)
(93,157,2)
(8,169,2)
(93,290,2)
(300,345,2)
(352,0,2)
(93,177,2)
(196,18,2)
(447,463,2)
(93,468,2)
(141,463,2)
(58,345,2)
(315,463,2)
(244,52,2)
(477,14,2)
(440,228,2)
(340,133,2)
(105,215,2)
(7,192,2)
(292,164,2)
(290,463,2)
(320,463,2)
(78,136,2)
(89,228,2)
(192,154,2)
(344,200,2)
(169,463,2)
(38,463,2)
(93,245,2)
(267,329,2)
(451,463,2)
(427,154,2)
(397,200,2)
(131,463,2)
(468,26,2)
(243,463,2)
(149,26,2)
(85,329,2)
(107,463,2)
(340,492,2)
(489,164,2)
(101,345,2)
(100,463,2)
(325,356,2)
(423,345,2)
(326,329,2)
(2,0,2)
(228,463,2)
(122,463,2)
(219,247,2)
(51,216,2)
(378,164,2)
(342,359,2)
(231,303,2)
(498,56,2)
(93,200,2)
(386,187,2)
(194,463,2)
(93,466,2)
(161,200,2)
(427,207,2)
(129,195,2)
(365,412,2)
(393,463,2)
(104,463,2)
(291,400,2)
(271,463,2)
(27,192,2)
(426,463,2)
(461,216,2)
(197,463,2)
(138,5,2)
(77,303,2)
(173,463,2)
(1,469,2)
(413,164,2)
(222,164,2)
(9,463,2)
(67,463,2)
(431,463,2)
(293,228,2)
(145,345,2)
(288,463,2)
(379,303,2)
(14,190,2)
(468,356,2)
(68,463,2)
(398,52,2)
(58,145,2)
(368,228,2)
(142,175,2)
(62,200,2)
(287,463,2)
(71,463,2)
(93,326,2)
(150,145,2)
(403,145,2)
(260,57,2)
(182,439,2)
(226,216,2)
(73,130,2)
(400,352,2)
(151,164,2)
(25,322,2)
(99,303,2)
(412,352,2)
(357,463,2)
(225,402,2)
(175,439,2)
(100,329,2)
(340,113,2)
(429,463,2)
(417,463,2)
(437,463,2)
(154,303,2)
(17,303,2)
(441,329,2)
(105,352,2)
(345,26,2)
(307,329,2)
(471,463,2)
(43,18,2)
(227,342,2)
(353,463,2)
(240,463,2)
(230,338,2)
(85,463,2)
(477,463,2)
(175,303,2)
(65,345,2)
(211,463,2)
(84,345,2)
(378,463,2)
(317,463,2)
(283,303,2)
(406,34,2)
(298,463,2)
(126,463,2)
(35,407,2)
(179,463,2)
(407,463,2)
(251,463,2)
(83,345,2)
(188,58,2)
(213,463,2)
(406,374,2)
(130,463,2)
(363,303,2)
(253,52,2)
(225,463,2)
(158,9,2)
(132,463,2)
(42,439,2)
(200,58,2)
(167,463,2)
(4,164,2)
(65,145,2)
(174,439,2)
(291,215,2)
(93,42,2)
(106,58,2)
(93,463,2)
(366,463,2)
(23,228,2)
(453,216,2)
(374,164,2)
(161,164,2)
(56,164,2)
(467,463,2)
(28,192,2)
(331,463,2)
(200,345,2)
(447,477,2)
(177,477,2)
(371,463,2)
(22,463,2)
(470,164,2)
(3,338,2)
(221,463,2)
(45,18,2)
(299,463,2)
(81,406,2)
(455,463,2)
(101,58,2)
(105,365,2)
(458,218,2)
(413,463,2)
(149,145,2)
(120,329,2)
(222,200,2)
(235,463,2)
(367,329,2)
(330,329,2)
(83,58,2)
(234,338,2)
(354,234,2)
(83,164,2)
(117,154,2)
(74,463,2)
(468,145,2)
(375,423,2)
(115,463,2)
(138,200,2)
(329,463,2)
(210,463,2)
(323,463,2)
(112,303,2)
(198,18,2)
(469,303,2)
(97,463,2)
(182,154,2)
(349,463,2)
(444,18,2)
(135,463,2)
(145,339,2)
(246,228,2)
(412,463,2)
(312,303,2)
(95,138,2)
(30,463,2)
(386,463,2)
(277,463,2)
(26,342,2)
(158,463,2)
(181,216,2)
(346,463,2)
(252,463,2)
(454,439,2)
(475,228,2)
(385,463,2)
(40,463,2)
(443,216,2)
(122,329,2)
(377,463,2)
(291,352,2)
(445,164,2)
(60,218,2)
(470,154,2)
(433,463,2)
(340,443,2)
(168,463,2)
(400,215,2)
(498,228,2)
(212,463,2)
(149,356,2)
(125,303,2)
(84,26,2)
(170,493,2)
(8,463,2)
(491,463,2)
(349,170,2)
(482,4,2)
(258,154,2)
(341,463,2)
(501,58,2)
(93,114,2)
(139,216,2)
(57,439,2)
(263,192,2)
(441,463,2)
(473,164,2)
(237,463,2)
(328,58,2)
(45,43,2)
(338,228,2)
(75,200,2)
(187,463,2)
(401,216,2)
(220,463,2)
(153,18,2)
(399,463,2)
(405,463,2)
(147,463,2)
(280,463,2)
(381,18,2)
(92,463,2)
(500,200,2)
(499,463,2)
(456,85,2)
(266,303,2)
(406,303,2)
(333,463,2)
(36,292,2)
(143,216,2)
(93,456,2)
(155,463,2)
(203,345,2)
(348,463,2)
(60,191,2)
(355,463,2)
(157,329,2)
(93,12,2)
(4,365,2)
(1,303,2)
(124,164,2)
(301,200,2)
(93,307,2)
(265,58,2)
(500,145,2)
(268,303,2)
(239,463,2)
(5,200,2)
(82,463,2)
(93,167,2)
(104,164,2)
(275,138,2)
(216,342,2)
(355,373,2)
(75,463,2)
(478,463,2)
(148,463,2)
(383,46,2)
(93,254,2)
(82,439,2)
(256,463,2)
(443,143,2)
(281,356,2)
(297,458,2)
(421,228,2)
(360,18,2)
(302,378,2)
(39,145,2)
(353,260,2)
(16,463,2)
(5,161,2)
(481,360,2)
(354,338,2)
(93,104,2)
(80,184,2)
(425,200,2)
(199,329,2)
(332,463,2)
(415,463,2)
(12,439,2)
(128,303,2)
(56,228,2)
(389,342,2)
(327,463,2)
(454,303,2)
(373,463,2)
(254,26,2)
(383,215,2)
(39,58,2)
(403,150,2)
(114,439,2)
(136,138,2)
(336,463,2)
(21,463,2)
(43,481,2)
(473,303,2)
(160,315,2)
(215,0,2)
(227,216,2)
(219,423,2)
(458,60,2)
(306,463,2)
(13,463,2)
(171,463,2)
(168,330,2)
(179,477,2)
(36,192,2)
(245,160,2)
(328,345,2)
(435,463,2)
(284,463,2)
(345,342,2)
(170,463,2)
(108,463,2)
(481,18,2)
(393,151,2)
(374,303,2)
(218,215,2)
(448,463,2)
(255,463,2)
(186,18,2)
(338,498,2)
(93,249,2)
(265,345,2)
(389,216,2)
(351,303,2)
(494,359,2)
(10,464,2)
(59,303,2)
(370,228,2)
(93,100,2)
(307,463,2)
(25,463,2)
(414,365,2)
(331,329,2)
(466,18,2)
(256,164,2)
(80,463,2)
(84,58,2)
(337,218,2)
(228,129,2)
(372,164,2)
(411,199,2)
(34,303,2)
(41,102,2)
(91,342,2)
(445,345,2)
(241,463,2)
(415,146,2)
(188,345,2)
(350,215,2)
(313,463,2)
(461,176,2)
(180,228,2)
(143,164,2)
(347,463,2)
(472,463,2)
(159,18,2)
(48,154,2)
(332,69,2)
(319,463,2)
(434,359,2)
(310,463,2)
(464,58,2)
(323,152,2)
(46,164,2)
(305,463,2)
(186,164,2)
(116,200,2)
(479,200,2)
(151,463,2)
(439,386,2)
(229,52,2)
(93,267,2)
(339,164,2)
(400,463,2)
(391,463,2)
(402,463,2)
(165,154,2)
(140,303,2)
(262,463,2)
(381,439,2)
(29,463,2)
(176,216,2)
(446,200,2)
(207,164,2)
(93,381,2)
(249,463,2)
(261,463,2)
(456,463,2)
(373,477,2)
(23,246,2)
(436,463,2)
(388,406,2)
(350,352,2)
(69,477,2)
(408,463,2)
(418,463,2)
(124,0,2)
(73,463,2)
(407,211,2)
(15,218,2)
(192,182,2)
(199,463,2)
(37,406,2)
(241,164,2)
(330,463,2)
(57,463,2)
(76,18,2)
(176,215,2)
(198,186,2)
(314,192,2)
(152,463,2)
(192,470,2)
(53,154,2)
(490,463,2)
(185,345,2)
(464,345,2)
(394,463,2)
(195,215,2)
(129,463,2)
(254,145,2)
(359,160,2)
(245,356,2)
(11,345,2)
(190,164,2)
(174,192,2)
(65,58,2)
(309,18,2)
(223,463,2)
(154,233,2)
(93,433,2)
(79,58,2)
(292,192,2)
(396,463,2)
(462,342,2)
(339,345,2)
(260,463,2)
(46,463,2)
(267,463,2)
(376,463,2)
(437,441,2)
(311,164,2)
(308,463,2)
(315,164,2)
(102,331,2)
(199,73,2)
(382,463,2)
(416,365,2)
(270,303,2)
(466,439,2)
(14,463,2)
(193,463,2)
(190,463,2)
(279,477,2)
(114,303,2)
(144,365,2)
(103,154,2)
(359,463,2)
(123,23,2)
(201,463,2)
(78,138,2)
(289,58,2)
(102,463,2)
(119,463,2)
(50,0,2)
(318,18,2)
(345,216,2)
(106,345,2)
(233,303,2)
(496,192,2)
(410,154,2)
(249,477,2)
(237,220,2)
-----------------------------------
(0,have_governor_per_policy()
(1,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(2,policy)
(3,CPUFREQ_TRANSITION_NOTIFIER)
(4,policy->max)
(5,policy->governor->initialized)
(6,)
(7,min)
(8,down_read(&ppol->enable_sem)
(9,&ppol->enable_sem)
(10,rc = sysfs_create_group(get_governor_parent_kobj(policy)
(11,tunables)
(12,ppol->floor_freq)
(13,policy)
(14,per_cpu(polinfo, policy->cpu)
(15,event)
(16,hispeed_freq)
(17,ppol)
(18,anyboost)
(19,if (IS_ERR(tunables)
(20,if (!have_governor_per_policy()
(21,cpu)
(22,floor_freq)
(23,!have_governor_per_policy()
(24,ppol->target_freq = policy->cur)
(25,ppol->last_evaluated_jiffy = get_jiffies_64()
(26,tunables = get_tunables(ppol)
(27,anyboost)
(28,ppol)
(29,ppol)
(30,freq_table)
(31,ppol)
(32,policy_slack_timer)
(33,now)
(34,ppol->min_freq)
(35,ppol->freq_table = freq_table)
(36,ppol->target_freq = policy->min)
(37,cpufreq_interactive_timer_resched(policy->cpu,\n\\n\\t\\t\\t\\t\\t\\t\\t\\t  true)
(38,ppol)
(39,PTR_ERR(tunables)
(40,ppol)
(41,up_write(&ppol->enable_sem)
(42,ppol->target_freq)
(43,now = ktime_to_us(ktime_get()
(44,switch (event)
(45,ppol->floor_validate_time = now)
(46,policy->cpu)
(47,policy)
(48,ppol)
(49,down_write(&ppol->enable_sem)
(50,tunables)
(51,policy)
(52,!have_governor_per_policy()
(53,ppol)
(54,)
(55,rc)
(56,policy->governor)
(57,ppol->enable_sem)
(58,IS_ERR(tunables)
(59,min)
(60,event != CPUFREQ_GOV_POLICY_INIT)
(61,NULL)
(62,governor)
(63,floor_validate_time)
(64,cur)
(65,policy->governor_data = tunables)
(66,floor_freq)
(67,reject_notification)
(68,true)
(69,ppol->policy_slack_timer)
(70,case CPUFREQ_GOV_START:)
(71,tunables)
(72,target_freq)
(73,ppol->floor_validate_time = ktime_to_us(ktime_get()
(74,CPUFREQ_RELATION_L)
(75,0)
(76,now)
(77,flags)
(78,cpufreq_register_notifier(&cpufreq_notifier_block,\n\\n\\t\\t\\t\\t\\tCPUFREQ_TRANSITION_NOTIFIER)
(79,rc)
(80,mutex_lock(&gov_lock)
(81,policy->cpu)
(82,ppol->enable_sem)
(83,policy->governor_data)
(84,tunables->usage_count)
(85,ppol->policy_timer)
(86,ppol->reject_notification = true)
(87,if (policy->governor->initialized == 1)
(88,usage_count)
(89,NULL)
(90,common_tunables = NULL)
(91,tunables)
(92,min)
(93,return 0;)
(94,0)
(95,CPUFREQ_TRANSITION_NOTIFIER)
(96,ppol)
(97,ppol)
(98,governor_data)
(99,ppol->min_freq = policy->min)
(100,ppol->reject_notification)
(101,tunables)
(102,&ppol->enable_sem)
(103,policy)
(104,policy->governor_data)
(105,tunables->hispeed_freq)
(106,policy)
(107,policy)
(108,ppol->governor_enabled = 1)
(109,if (policy->min < ppol->min_freq)
(110,if (policy->max < ppol->target_freq)
(111,tunables)
(112,policy)
(113,return rc;)
(114,ppol->min_freq)
(115,policy_timer)
(116,policy->governor_data = NULL)
(117,target_freq)
(118,policy)
(119,policy_timer)
(120,ppol->min_freq)
(121,tunables)
(122,ppol->hispeed_validate_time)
(123,cpufreq_put_global_kobject()
(124,policy->governor_data)
(125,spin_lock_irqsave(&ppol->target_freq_lock, flags)
(126,ppol->reject_notification)
(127,policy)
(128,policy)
(129,--tunables->usage_count)
(130,ktime_to_us(ktime_get()
(131,governor_enabled)
(132,policy)
(133,return PTR_ERR(ppol)
(134,usage_count)
(135,cpu)
(136,&cpufreq_notifier_block)
(137,ppol->policy = policy)
(138,!policy->governor->initialized)
(139,governor_data)
(140,ppol)
(141,ppol)
(142,&ppol->target_freq_lock)
(143,policy->governor_data)
(144,hispeed_freq)
(145,tunables = alloc_tunable(policy)
(146,&gov_lock)
(147,reject_notification)
(148,governor_enabled)
(149,ppol->cached_tunables = tunables)
(150,tunables->use_sched_load)
(151,policy->cpu)
(152,&ppol->policy_timer)
(153,hispeed_validate_time)
(154,policy->max < ppol->target_freq)
(155,enable_sem)
(156,anyboost = 1)
(157,ppol->floor_validate_time)
(158,up_write(&ppol->enable_sem)
(159,ppol)
(160,ppol = get_policyinfo(policy)
(161,policy->governor)
(162,cpu)
(163,enable_sem)
(164,struct cpufreq_policy *policy)
(165,max)
(166,case CPUFREQ_GOV_POLICY_EXIT:)
(167,ppol->reject_notification)
(168,&ppol->policy_timer)
(169,&ppol->enable_sem)
(170,&ppol->policy_slack_timer)
(171,target_freq)
(172,ppol)
(173,down_write(&ppol->enable_sem)
(174,ppol->target_freq)
(175,ppol->target_freq_lock)
(176,tunables->usage_count)
(177,ppol->target_freq)
(178,tunables)
(179,ppol->policy_timer)
(180,sysfs_remove_group(get_governor_parent_kobj(policy)
(181,0)
(182,ppol->target_freq)
(183,if (rc)
(184,&gov_lock)
(185,governor_data)
(186,policy->min)
(187,policy->cpu)
(188,policy)
(189,tunables)
(190,policy->cpu)
(191,unsigned int event)
(192,policy->min > ppol->target_freq)
(193,ppol)
(194,policy_timer)
(195,tunables->usage_count)
(196,ppol)
(197,ppol)
(198,ppol->floor_freq = policy->min)
(199,ppol->floor_validate_time)
(200,rc)
(201,min_freq)
(202,)
(203,have_governor_per_policy()
(204,governor_data)
(205,cached_common_tunables)
(206,tunables)
(207,policy->max)
(208,case CPUFREQ_GOV_LIMITS:)
(209,if (!tunables->hispeed_freq)
(210,tunables)
(211,cpufreq_frequency_get_table(policy->cpu)
(212,ppol)
(213,cur)
(214,if (tunables->use_sched_load)
(215,tunables = common_tunables)
(216,tunables)
(217,if (IS_ERR(ppol)
(218,!tunables)
(219,WARN_ON(cpufreq_get_global_kobject()
(220,&gov_lock)
(221,ppol)
(222,policy->governor_data)
(223,reject_notification)
(224,common_tunables)
(225,mutex_lock(&gov_lock)
(226,policy->governor_data = tunables)
(227,ppol)
(228,!--tunables->usage_count)
(229,cpufreq_put_global_kobject()
(230,cpufreq_notifier_block)
(231,flags)
(232,policy)
(233,ppol->target_freq)
(234,&cpufreq_notifier_block)
(235,last_evaluated_jiffy)
(236,ppol)
(237,mutex_unlock(&gov_lock)
(238,ppol)
(239,0)
(240,gov_lock)
(241,policy->min)
(242,ppol)
(243,policy)
(244,NULL)
(245,ppol->cached_tunables)
(246,have_governor_per_policy()
(247,cpufreq_get_global_kobject()
(248,use_sched_load)
(249,ppol->reject_notification)
(250,min)
(251,ppol)
(252,enable_sem)
(253,common_tunables)
(254,common_tunables = tunables)
(255,ppol->governor_enabled = 0)
(256,__cpufreq_driver_target(policy,\n\\n\\t\\t\\t\\tpolicy->cur, CPUFREQ_RELATION_L)
(257,false)
(258,policy)
(259,case CPUFREQ_GOV_STOP:)
(260,&ppol->enable_sem)
(261,ppol->reject_notification = false)
(262,del_timer_sync(&ppol->policy_timer)
(263,target_freq)
(264,)
(265,usage_count)
(266,ppol)
(267,ppol->freq_table)
(268,policy)
(269,case CPUFREQ_GOV_POLICY_INIT:)
(270,ppol)
(271,break;)
(272,policy)
(273,ppol)
(274,tunables)
(275,cpufreq_notifier_block)
(276,policy)
(277,ppol)
(278,if (!have_governor_per_policy()
(279,ppol->governor_enabled)
(280,ppol->target_freq = 0)
(281,tunables)
(282,if (!--tunables->usage_count)
(283,ppol)
(284,enable_sem)
(285,if (!policy->governor->initialized)
(286,false)
(287,polinfo)
(288,ppol)
(289,1)
(290,ppol->floor_freq)
(291,cpufreq_interactive_disable_sched_input(tunables)
(292,policy->min)
(293,governor)
(294,tunables)
(295,if (have_governor_per_policy()
(296,)
(297,BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT)
(298,break;)
(299,cpu)
(300,tunables)
(301,break;)
(302,ppol->policy_timer.data = policy->cpu)
(303,ppol->governor_enabled)
(304,break;)
(305,true)
(306,freq_table)
(307,ppol->last_evaluated_jiffy)
(308,ppol)
(309,now)
(310,1)
(311,policy->max)
(312,min)
(313,polinfo)
(314,1)
(315,get_policyinfo(policy)
(316,if (tunables->use_sched_load)
(317,policy)
(318,ppol->hispeed_validate_time = now)
(319,tunables)
(320,cpu)
(321,now)
(322,get_jiffies_64()
(323,del_timer_sync(&ppol->policy_timer)
(324,reject_notification)
(325,tunables)
(326,ppol->policy)
(327,tunables)
(328,tunables->usage_count = 1)
(329,ppol = per_cpu(polinfo, policy->cpu)
(330,ppol->policy_timer)
(331,ppol->enable_sem)
(332,&ppol->policy_slack_timer)
(333,policy_slack_timer)
(334,min_freq)
(335,)
(336,ppol)
(337,CPUFREQ_GOV_POLICY_INIT)
(338,policy->governor->initialized == 1)
(339,alloc_tunable(policy)
(340,RET)
(341,target_freq)
(342,have_governor_per_policy()
(343,)
(344,tunables)
(345,!tunables)
(346,gov_lock)
(347,floor_validate_time)
(348,governor_data)
(349,del_timer_sync(&ppol->policy_slack_timer)
(350,WARN_ON(tunables)
(351,min_freq)
(352,tunables = policy->governor_data)
(353,up_read(&ppol->enable_sem)
(354,cpufreq_unregister_notifier(&cpufreq_notifier_block,\n\\n\\t\\t\\t\\t\\t\\tCPUFREQ_TRANSITION_NOTIFIER)
(355,&ppol->enable_sem)
(356,have_governor_per_policy()
(357,ppol)
(358,ppol)
(359,IS_ERR(ppol)
(360,ktime_get()
(361,tunables)
(362,cached_tunables)
(363,target_freq_lock)
(364,ppol)
(365,!tunables->hispeed_freq)
(366,cpu)
(367,ppol->enable_sem)
(368,policy)
(369,min)
(370,get_sysfs_attr()
(371,break;)
(372,get_governor_parent_kobj(policy)
(373,ppol->enable_sem)
(374,policy->min)
(375,common_tunables)
(376,enable_sem)
(377,ppol)
(378,policy->cpu)
(379,max)
(380,cpu)
(381,ppol->hispeed_validate_time)
(382,policy)
(383,cpufreq_interactive_timer_start(tunables, policy->cpu)
(384,policy)
(385,policy)
(386,per_cpu(polinfo, policy->cpu)
(387,rc)
(388,true)
(389,get_tunables(ppol)
(390,)
(391,policy)
(392,target_freq_lock)
(393,per_cpu(polinfo, policy->cpu)
(394,freq_table)
(395,&ppol->enable_sem)
(396,policy->governor_data = NULL)
(397,initialized)
(398,common_tunables = NULL)
(399,data)
(400,tunables->use_sched_load)
(401,tunables)
(402,&gov_lock)
(403,cpufreq_interactive_enable_sched_input(tunables)
(404,)
(405,policy)
(406,policy->min < ppol->min_freq)
(407,freq_table = cpufreq_frequency_get_table(policy->cpu)
(408,NULL)
(409,ppol->min_freq = policy->min)
(410,target_freq)
(411,ppol->hispeed_validate_time = ppol->floor_validate_time)
(412,tunables->hispeed_freq)
(413,policy->cur)
(414,policy)
(415,mutex_unlock(&gov_lock)
(416,tunables)
(417,policy)
(418,ppol)
(419,ktime_get()
(420,max)
(421,1)
(422,ppol->governor_enabled)
(423,!have_governor_per_policy()
(424,freq_table)
(425,policy)
(426,ppol)
(427,ppol->target_freq = policy->max)
(428,)
(429,ppol)
(430,target_freq)
(431,del_timer_sync(&ppol->policy_slack_timer)
(432,if (have_governor_per_policy()
(433,ppol->target_freq)
(434,PTR_ERR(ppol)
(435,gov_lock)
(436,polinfo)
(437,ppol->floor_freq = ppol->target_freq)
(438,flags)
(439,ppol = per_cpu(polinfo, policy->cpu)
(440,common_tunables)
(441,ppol->target_freq)
(442,if (!have_governor_per_policy()
(443,return 0;)
(444,floor_validate_time)
(445,get_governor_parent_kobj(policy)
(446,policy)
(447,ppol->enable_sem)
(448,gov_lock)
(449,ppol)
(450,ppol->reject_notification = false)
(451,governor_enabled)
(452,enable_sem)
(453,tunables)
(454,ppol->target_freq_lock)
(455,policy)
(456,ppol->policy_timer.data)
(457,if (ppol->governor_enabled)
(458,!tunables && (event != CPUFREQ_GOV_POLICY_INIT)
(459,if (!tunables)
(460,ppol)
(461,tunables->usage_count++)
(462,tunables)
(463,event)
(464,sysfs_create_group(get_governor_parent_kobj(policy)
(465,if (have_governor_per_policy()
(466,ppol->floor_validate_time)
(467,ppol)
(468,cached_common_tunables = tunables)
(469,&ppol->target_freq_lock)
(470,policy->min)
(471,ppol)
(472,use_sched_load)
(473,policy->min)
(474,ppol)
(475,initialized)
(476,)
(477,ppol = per_cpu(polinfo, policy->cpu)
(478,ppol)
(479,tunables)
(480,policy->cur)
(481,ktime_to_us(ktime_get()
(482,tunables->hispeed_freq = policy->max)
(483,ppol)
(484,have_governor_per_policy()
(485,get_sysfs_attr()
(486,)
(487,)
(488,if (anyboost)
(489,policy->cpu)
(490,ppol->reject_notification = true)
(491,hispeed_validate_time)
(492,return PTR_ERR(tunables)
(493,ppol->policy_slack_timer)
(494,ppol)
(495,ppol)
(496,policy)
(497,anyboost)
(498,policy->governor->initialized)
(499,ppol)
(500,kfree(tunables)
(501,tunables)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^