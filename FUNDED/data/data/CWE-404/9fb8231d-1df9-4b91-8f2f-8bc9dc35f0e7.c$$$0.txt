-----label-----
0
-----code-----
int
command_line_get_integer (const char* prompt, int* value)
{
        char     def_str [10];
        char*    input;
        long     ret;

        snprintf (def_str, 10, "%d", *value);
        input = command_line_get_word (prompt, *value ? def_str : NULL,
                                       NULL, 1);
        if (!input)
                return 0;

        errno = 0;
        ret = strtol (input, (char**) NULL, 10);
        if (errno)
                goto error;

        if ((ret > INT_MAX) || (ret < INT_MIN))
                goto error;
        else
                *value = (int) ret;

        free (input);
        return 1;

error:
        free (input);
        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
16,17
17,18
17,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
26,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
35,38
35,39
35,40
36,37
38,39
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
49,53
49,54
50,51
52,53
54,55
54,56
54,57
55,56
56,57
58,59
60,61
62,63
65,66
65,67
66,67
67,68
69,70
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
80,82
80,83
80,84
81,82
83,84
85,86
85,87
86,87
86,88
88,89
88,90
91,92
94,95
94,96
95,96
97,98
99,100
99,101
99,102
100,101
100,102
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
115,116
116,117
116,118
117,118
118,119
120,121
120,122
121,122
121,123
124,125
126,127
127,128
127,129
128,129
130,131
132,133
134,135
134,136
136,137
137,138
137,139
138,139
140,141
142,143
-----nextToken-----
2,4,6,8,9,11,13,14,18,20,22,25,27,28,31,33,37,39,40,41,44,48,51,53,57,59,61,63,64,68,70,74,75,79,82,84,87,89,90,92,93,96,98,104,106,110,112,114,119,122,123,125,129,131,133,135,139,141,143
-----computeFrom-----
46,47
46,48
72,73
72,74
77,78
77,79
100,101
100,102
102,103
102,104
108,109
108,110
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
110,125
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
intcommand_line_get_integer (const char* prompt, int* value){        char     def_str [10];        char*    input;        long     ret;        snprintf (def_str, 10, "%d", *value);        input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1);        if (!input)                return 0;        errno = 0;        ret = strtol (input, (char**) NULL, 10);        if (errno)                goto error;        if ((ret > INT_MAX) || (ret < INT_MIN))                goto error;        else                *value = (int) ret;        free (input);        return 1;error:        free (input);        return 0;}
int
command_line_get_integer (const char* prompt, int* value)
command_line_get_integer
const char* prompt
const char
* prompt
*
prompt
int* value
int
* value
*
value
{        char     def_str [10];        char*    input;        long     ret;        snprintf (def_str, 10, "%d", *value);        input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1);        if (!input)                return 0;        errno = 0;        ret = strtol (input, (char**) NULL, 10);        if (errno)                goto error;        if ((ret > INT_MAX) || (ret < INT_MIN))                goto error;        else                *value = (int) ret;        free (input);        return 1;error:        free (input);        return 0;}
char     def_str [10];
char     def_str [10];
char
def_str [10]
def_str
[10]
10
char*    input;
char*    input;
char
*    input
*
input
long     ret;
long     ret;
long
ret
ret
snprintf (def_str, 10, "%d", *value);
snprintf (def_str, 10, "%d", *value)
snprintf
snprintf
def_str
def_str
10
"%d"
*value
value
value
input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1);
input = command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1)
input
input
command_line_get_word (prompt, *value ? def_str : NULL,                                       NULL, 1)
command_line_get_word
command_line_get_word
prompt
prompt
*value ? def_str : NULL
*value
value
value
def_str
def_str
NULL
NULL
NULL
NULL
1
if (!input)                return 0;
!input
input
input
return 0;
0
errno = 0;
errno = 0
errno
errno
0
ret = strtol (input, (char**) NULL, 10);
ret = strtol (input, (char**) NULL, 10)
ret
ret
strtol (input, (char**) NULL, 10)
strtol
strtol
input
input
(char**) NULL
char**
char
**
*
*
NULL
NULL
10
if (errno)                goto error;
errno
errno
goto error;
error
if ((ret > INT_MAX) || (ret < INT_MIN))                goto error;        else                *value = (int) ret;
(ret > INT_MAX) || (ret < INT_MIN)
(ret > INT_MAX)
ret > INT_MAX
ret
ret
INT_MAX
INT_MAX
(ret < INT_MIN)
ret < INT_MIN
ret
ret
INT_MIN
INT_MIN
goto error;
error
*value = (int) ret;
*value = (int) ret
*value
value
value
(int) ret
int
int

ret
ret
free (input);
free (input)
free
free
input
input
return 1;
1
error:        free (input);
error
free (input);
free (input)
free
free
input
input
return 0;
0
-----joern-----
(60,66,0)
(55,11,0)
(54,31,0)
(47,29,0)
(15,29,0)
(11,27,0)
(40,29,0)
(36,6,0)
(14,2,0)
(44,7,0)
(55,33,0)
(59,29,0)
(48,15,0)
(60,33,0)
(42,49,0)
(61,2,0)
(16,46,0)
(48,45,0)
(37,29,0)
(63,15,0)
(43,18,0)
(41,48,0)
(18,15,0)
(38,60,0)
(3,29,0)
(33,29,0)
(62,14,0)
(56,47,0)
(64,47,0)
(33,14,0)
(21,48,0)
(15,48,0)
(7,31,0)
(5,63,0)
(28,15,0)
(20,29,0)
(25,27,0)
(31,29,0)
(32,33,0)
(1,40,0)
(14,33,0)
(40,36,0)
(40,47,0)
(24,29,0)
(39,48,0)
(22,29,0)
(26,47,0)
(4,55,0)
(63,29,0)
(65,31,0)
(57,14,0)
(49,48,0)
(49,16,0)
(50,20,0)
(10,26,0)
(26,29,0)
(1,52,0)
(60,6,0)
(1,26,0)
(66,60,0)
(19,29,0)
(7,46,0)
(48,49,0)
(20,15,0)
(0,29,0)
(36,46,0)
(2,17,0)
(53,52,0)
(17,2,0)
(8,55,0)
(27,33,0)
(27,11,0)
(14,15,0)
(31,7,0)
(16,49,0)
(51,27,0)
(2,14,0)
(11,55,0)
(34,36,0)
(30,40,0)
(6,60,0)
(9,49,0)
(13,31,0)
(58,16,0)
(8,27,1)
(63,15,1)
(48,41,1)
(49,9,1)
(40,47,1)
(55,33,1)
(16,46,1)
(53,18,1)
(34,11,1)
(49,16,1)
(48,45,1)
(11,55,1)
(26,10,1)
(58,39,1)
(27,25,1)
(20,50,1)
(55,4,1)
(21,49,1)
(36,34,1)
(2,17,1)
(1,40,1)
(47,64,1)
(60,38,1)
(13,65,1)
(1,26,1)
(27,33,1)
(39,28,1)
(60,66,1)
(7,46,1)
(28,31,1)
(20,15,1)
(44,13,1)
(64,56,1)
(61,57,1)
(25,51,1)
(23,11,1)
(12,35,1)
(6,60,1)
(4,8,1)
(32,47,1)
(7,44,1)
(35,33,1)
(51,35,1)
(31,7,1)
(57,32,1)
(5,6,1)
(60,33,1)
(16,58,1)
(18,15,1)
(30,63,1)
(42,16,1)
(48,49,1)
(11,27,1)
(40,30,1)
(14,62,1)
(14,15,1)
(43,15,1)
(40,36,1)
(65,54,1)
(9,16,1)
(56,18,1)
(36,46,1)
(63,5,1)
(50,12,1)
(15,48,1)
(26,47,1)
(52,53,1)
(10,20,1)
(33,14,1)
(62,2,1)
(18,43,1)
(38,36,1)
(1,52,1)
(14,2,1)
(41,21,1)
(49,42,1)
(50,23,1)
(2,61,1)
(11,27,2)
(36,46,2)
(40,47,2)
(26,47,2)
(53,18,2)
(51,35,2)
(60,33,2)
(14,18,2)
(11,55,2)
(15,48,2)
(47,18,2)
(16,46,2)
(25,35,2)
(55,27,2)
(26,11,2)
(14,2,2)
(52,18,2)
(42,16,2)
(36,11,2)
(6,11,2)
(20,11,2)
(57,18,2)
(14,15,2)
(33,18,2)
(26,35,2)
(55,33,2)
(27,35,2)
(35,18,2)
(34,11,2)
(4,27,2)
(6,60,2)
(1,52,2)
(30,11,2)
(1,26,2)
(11,35,2)
(20,35,2)
(7,46,2)
(1,40,2)
(60,11,2)
(48,45,2)
(20,15,2)
(62,18,2)
(49,16,2)
(48,49,2)
(64,18,2)
(40,36,2)
(63,15,2)
(50,35,2)
(38,11,2)
(18,15,2)
(63,11,2)
(9,16,2)
(61,18,2)
(32,18,2)
(27,33,2)
(31,7,2)
(56,18,2)
(2,18,2)
(33,14,2)
(5,11,2)
(12,35,2)
(2,17,2)
(8,27,2)
(50,11,2)
(40,11,2)
(10,35,2)
(10,11,2)
(23,11,2)
(60,66,2)
-----------------------------------
(0,def_str)
(1,RET)
(2,(char**)
(3,ret)
(4,INT_MIN)
(5,input)
(6,*value = (int)
(7,*value)
(8,ret)
(9,def_str)
(10,0)
(11,(ret > INT_MAX)
(12,goto error;)
(13,"%d")
(14,strtol (input, (char**)
(15,input = command_line_get_word (prompt, *value ? def_str : NULL,\n\\n                                       NULL, 1)
(16,*value)
(17,char**)
(18,!input)
(19,if (errno)
(20,free (input)
(21,NULL)
(22,error:)
(23,goto error;)
(24,if (!input)
(25,INT_MAX)
(26,return 0;)
(27,ret > INT_MAX)
(28,input)
(29,)
(30,1)
(31,snprintf (def_str, 10, "%d", *value)
(32,ret)
(33,ret = strtol (input, (char**)
(34,value)
(35,errno)
(36,*value)
(37,if ((ret > INT_MAX)
(38,ret)
(39,prompt)
(40,return 1;)
(41,1)
(42,NULL)
(43,input)
(44,value)
(45,const char* prompt)
(46,int* value)
(47,errno = 0)
(48,command_line_get_word (prompt, *value ? def_str : NULL,\n\\n                                       NULL, 1)
(49,*value ? def_str : NULL)
(50,input)
(51,ret)
(52,return 0;)
(53,0)
(54,def_str)
(55,ret < INT_MIN)
(56,errno)
(57,input)
(58,value)
(59,input)
(60,(int)
(61,NULL)
(62,10)
(63,free (input)
(64,0)
(65,10)
(66,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^