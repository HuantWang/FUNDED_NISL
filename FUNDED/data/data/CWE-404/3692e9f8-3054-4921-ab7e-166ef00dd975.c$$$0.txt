-----label-----
1
-----code-----
static void do_signal(struct pt_regs *regs)
{
	sigset_t *oldset = sigmask_to_save();
	struct ksignal ksig = { .sig = 0 }
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
-----nextToken-----
2,4,7,9,10,15,17,18,22
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ProblemStatement;
-----ast_node-----
static void do_signal(struct pt_regs *regs){	sigset_t *oldset = sigmask_to_save();	struct ksignal ksig = { .sig = 0 }
static void
do_signal(struct pt_regs *regs)
do_signal
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
{	sigset_t *oldset = sigmask_to_save();	struct ksignal ksig = { .sig = 0 }
sigset_t *oldset = sigmask_to_save();
sigset_t *oldset = sigmask_to_save();
sigset_t
sigset_t
*oldset = sigmask_to_save()
*
oldset
= sigmask_to_save()
sigmask_to_save()
sigmask_to_save
sigmask_to_save
struct ksignal ksig = { .sig = 0
-----joern-----
(9,22,0)
(15,2,0)
(10,2,0)
(9,1,1)
(2,10,1)
(9,7,1)
(10,15,1)
(6,3,1)
-----------------------------------
(0,__set_breakpoint(&current->thread.hw_brk)
(1,ret = handle_rt_signal32(&ksig, oldset, regs)
(2,current->thread)
(3,current)
(4,if (is32)
(5,&ksig)
(6,thread)
(7,ret = handle_signal32(&ksig, oldset, regs)
(8,)
(9,regs)
(10,thread)
(11,address)
(12,ret)
(13,RET)
(14,ksig.ka)
(15,current)
(16,sigmask_to_save()
(17,current->thread.hw_brk)
(18,check_syscall_restart(regs, &ksig.ka, ksig.sig > 0)
(19,0)
(20,is32 = is_32bit_task()
(21,)
(22,regs->trap)
(23,ksig)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^