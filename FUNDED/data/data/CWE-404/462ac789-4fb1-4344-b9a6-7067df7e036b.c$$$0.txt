-----label-----
0
-----code-----
static void __get_memory_limit(struct dm_bufio_client *c,
			       unsigned long *threshold_buffers,
			       unsigned long *limit_buffers)
{
	unsigned long buffers;

	if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {
		if (mutex_trylock(&dm_bufio_clients_lock)) {
			__cache_size_refresh();
			mutex_unlock(&dm_bufio_clients_lock);
		}
	}

	buffers = dm_bufio_cache_size_per_client >>
		  (c->sectors_per_block_bits + SECTOR_SHIFT);

	if (buffers < c->minimum_buffers)
		buffers = c->minimum_buffers;

	*limit_buffers = buffers;
	*threshold_buffers = buffers * DM_BUFIO_WRITEBACK_PERCENT / 100;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
27,29
28,29
28,30
29,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
39,40
40,41
40,42
41,42
41,43
42,43
44,45
45,46
45,47
48,49
48,50
49,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
67,68
68,69
68,70
69,70
69,71
70,71
73,74
75,76
75,77
76,77
76,78
77,78
79,80
79,81
80,81
83,84
84,85
84,86
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
94,95
96,97
98,99
99,100
99,101
100,101
101,102
103,104
103,105
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,24,26,30,34,36,38,43,46,47,52,56,59,63,66,71,72,74,78,81,82,86,89,90,95,97,102,106,108,109
-----computeFrom-----
31,32
31,33
61,62
61,63
64,65
64,66
68,69
68,70
76,77
76,78
84,85
84,86
92,93
92,94
99,100
99,101
103,104
103,105
104,105
104,106
-----guardedBy-----
81,89
78,86
82,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void __get_memory_limit(struct dm_bufio_client *c,			       unsigned long *threshold_buffers,			       unsigned long *limit_buffers){	unsigned long buffers;	if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}	buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT);	if (buffers < c->minimum_buffers)		buffers = c->minimum_buffers;	*limit_buffers = buffers;	*threshold_buffers = buffers * DM_BUFIO_WRITEBACK_PERCENT / 100;}
static void
__get_memory_limit(struct dm_bufio_client *c,			       unsigned long *threshold_buffers,			       unsigned long *limit_buffers)
__get_memory_limit
struct dm_bufio_client *c
struct dm_bufio_client
dm_bufio_client
*c
*
c
unsigned long *threshold_buffers
unsigned long
*threshold_buffers
*
threshold_buffers
unsigned long *limit_buffers
unsigned long
*limit_buffers
*
limit_buffers
{	unsigned long buffers;	if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}	buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT);	if (buffers < c->minimum_buffers)		buffers = c->minimum_buffers;	*limit_buffers = buffers;	*threshold_buffers = buffers * DM_BUFIO_WRITEBACK_PERCENT / 100;}
unsigned long buffers;
unsigned long buffers;
unsigned long
buffers
buffers
if (unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)) {		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}
unlikely(ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch)
unlikely
unlikely
ACCESS_ONCE(dm_bufio_cache_size) != dm_bufio_cache_size_latch
ACCESS_ONCE(dm_bufio_cache_size)
ACCESS_ONCE
ACCESS_ONCE
dm_bufio_cache_size
dm_bufio_cache_size
dm_bufio_cache_size_latch
dm_bufio_cache_size_latch
{		if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}	}
if (mutex_trylock(&dm_bufio_clients_lock)) {			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}
mutex_trylock(&dm_bufio_clients_lock)
mutex_trylock
mutex_trylock
(&dm_bufio_clients_lock)
&dm_bufio_clients_lock
&
dm_bufio_clients_lock
{			__cache_size_refresh();			mutex_unlock(&dm_bufio_clients_lock);		}
__cache_size_refresh();
__cache_size_refresh()
__cache_size_refresh
__cache_size_refresh
mutex_unlock(&dm_bufio_clients_lock);
mutex_unlock(&dm_bufio_clients_lock)
mutex_unlock
mutex_unlock
&dm_bufio_clients_lock
dm_bufio_clients_lock
dm_bufio_clients_lock
buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT);
buffers = dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT)
buffers
buffers
dm_bufio_cache_size_per_client >>		  (c->sectors_per_block_bits + SECTOR_SHIFT)
dm_bufio_cache_size_per_client
dm_bufio_cache_size_per_client
(c->sectors_per_block_bits + SECTOR_SHIFT)
c->sectors_per_block_bits + SECTOR_SHIFT
c->sectors_per_block_bits
c
c
sectors_per_block_bits
SECTOR_SHIFT
SECTOR_SHIFT
if (buffers < c->minimum_buffers)		buffers = c->minimum_buffers;
buffers < c->minimum_buffers
buffers
buffers
c->minimum_buffers
c
c
minimum_buffers
buffers = c->minimum_buffers;
buffers = c->minimum_buffers
buffers
buffers
c->minimum_buffers
c
c
minimum_buffers
*limit_buffers = buffers;
*limit_buffers = buffers
*limit_buffers
limit_buffers
limit_buffers
buffers
buffers
*threshold_buffers = buffers * DM_BUFIO_WRITEBACK_PERCENT / 100;
*threshold_buffers = buffers * DM_BUFIO_WRITEBACK_PERCENT / 100
*threshold_buffers
threshold_buffers
threshold_buffers
buffers * DM_BUFIO_WRITEBACK_PERCENT / 100
buffers * DM_BUFIO_WRITEBACK_PERCENT
buffers
buffers
DM_BUFIO_WRITEBACK_PERCENT
DM_BUFIO_WRITEBACK_PERCENT
100
-----joern-----
(30,1,0)
(10,1,0)
(25,22,0)
(20,45,0)
(4,12,0)
(42,27,0)
(34,0,0)
(23,27,0)
(46,53,0)
(5,20,0)
(15,22,0)
(39,31,0)
(31,39,0)
(33,10,0)
(36,32,0)
(4,22,0)
(53,15,0)
(12,11,0)
(20,23,0)
(41,12,0)
(16,31,0)
(22,27,0)
(22,4,0)
(52,34,0)
(23,39,0)
(31,29,0)
(11,29,0)
(0,15,0)
(17,47,0)
(34,48,0)
(47,17,0)
(1,29,0)
(1,10,0)
(15,0,0)
(11,12,0)
(24,18,0)
(28,11,0)
(10,22,0)
(38,26,0)
(49,17,0)
(32,36,0)
(47,6,0)
(51,4,0)
(15,39,0)
(8,47,0)
(37,24,0)
(23,22,0)
(50,37,0)
(35,27,0)
(44,36,0)
(6,47,0)
(3,53,0)
(21,11,0)
(9,1,0)
(12,4,0)
(40,18,0)
(24,37,0)
(43,31,0)
(13,15,0)
(0,27,0)
(2,23,0)
(14,27,0)
(15,53,0)
(19,39,0)
(5,39,1)
(36,44,1)
(34,48,1)
(15,22,1)
(28,21,1)
(15,39,1)
(19,10,1)
(25,24,1)
(34,52,1)
(1,30,1)
(23,39,1)
(10,22,1)
(33,22,1)
(31,43,1)
(30,9,1)
(41,11,1)
(21,51,1)
(2,20,1)
(15,53,1)
(46,13,1)
(11,29,1)
(39,31,1)
(23,22,1)
(32,36,1)
(0,15,1)
(11,28,1)
(1,29,1)
(44,6,1)
(10,1,1)
(52,23,1)
(47,8,1)
(23,2,1)
(25,32,1)
(8,17,1)
(51,25,1)
(37,50,1)
(17,49,1)
(12,11,1)
(7,0,1)
(31,29,1)
(20,5,1)
(12,41,1)
(22,4,1)
(4,12,1)
(16,19,1)
(24,37,1)
(47,17,1)
(9,33,1)
(40,32,1)
(50,40,1)
(25,6,1)
(20,45,1)
(5,10,1)
(53,3,1)
(13,34,1)
(43,16,1)
(3,46,1)
(6,47,1)
(15,53,2)
(10,1,2)
(36,6,2)
(39,10,2)
(0,15,2)
(31,29,2)
(16,10,2)
(43,10,2)
(32,6,2)
(10,22,2)
(24,37,2)
(34,48,2)
(40,32,2)
(32,36,2)
(1,29,2)
(6,47,2)
(47,17,2)
(23,39,2)
(19,10,2)
(31,10,2)
(44,6,2)
(4,12,2)
(39,31,2)
(50,32,2)
(24,32,2)
(12,11,2)
(11,29,2)
(22,4,2)
(37,32,2)
(23,22,2)
(20,45,2)
(15,22,2)
(15,39,2)
-----------------------------------
(0,*threshold_buffers = buffers * DM_BUFIO_WRITEBACK_PERCENT / 100)
(1,c->minimum_buffers)
(2,buffers)
(3,100)
(4,dm_bufio_cache_size_per_client >>\n\\n\\t\\t  (c->sectors_per_block_bits + SECTOR_SHIFT)
(5,limit_buffers)
(6,unlikely(ACCESS_ONCE(dm_bufio_cache_size)
(7,RET)
(8,dm_bufio_cache_size_latch)
(9,c)
(10,buffers < c->minimum_buffers)
(11,c->sectors_per_block_bits)
(12,c->sectors_per_block_bits + SECTOR_SHIFT)
(13,buffers)
(14,if (unlikely(ACCESS_ONCE(dm_bufio_cache_size)
(15,buffers * DM_BUFIO_WRITEBACK_PERCENT / 100)
(16,c)
(17,ACCESS_ONCE(dm_bufio_cache_size)
(18,)
(19,buffers)
(20,*limit_buffers)
(21,c)
(22,buffers = dm_bufio_cache_size_per_client >>\n\\n\\t\\t  (c->sectors_per_block_bits + SECTOR_SHIFT)
(23,*limit_buffers = buffers)
(24,mutex_unlock(&dm_bufio_clients_lock)
(25,buffers)
(26,)
(27,)
(28,sectors_per_block_bits)
(29,struct dm_bufio_client *c)
(30,minimum_buffers)
(31,c->minimum_buffers)
(32,mutex_trylock(&dm_bufio_clients_lock)
(33,buffers)
(34,*threshold_buffers)
(35,if (buffers < c->minimum_buffers)
(36,&dm_bufio_clients_lock)
(37,&dm_bufio_clients_lock)
(38,if (mutex_trylock(&dm_bufio_clients_lock)
(39,buffers = c->minimum_buffers)
(40,__cache_size_refresh()
(41,SECTOR_SHIFT)
(42,buffers)
(43,minimum_buffers)
(44,dm_bufio_clients_lock)
(45,unsigned long *limit_buffers)
(46,DM_BUFIO_WRITEBACK_PERCENT)
(47,ACCESS_ONCE(dm_bufio_cache_size)
(48,unsigned long *threshold_buffers)
(49,dm_bufio_cache_size)
(50,dm_bufio_clients_lock)
(51,dm_bufio_cache_size_per_client)
(52,threshold_buffers)
(53,DM_BUFIO_WRITEBACK_PERCENT / 100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^