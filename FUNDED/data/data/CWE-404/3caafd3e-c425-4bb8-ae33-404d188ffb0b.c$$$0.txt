-----label-----
0
-----code-----
static void cp_clcd_enable(struct clcd_fb *fb)
{
	struct fb_var_screeninfo *var = &fb->fb.var;
	u32 val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2
			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1;

	if (var->bits_per_pixel <= 8 ||
	    (var->bits_per_pixel == 16 && var->green.length == 5))
		/* Pseudocolor, RGB555, BGR555 */
		val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555;
	else if (fb->fb.var.bits_per_pixel <= 16)
		/* truecolor RGB565 */
		val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555;
	else
		val = 0; /* no idea for this, don't trust the docs */

	cm_control(CM_CTRL_LCDMUXSEL_MASK|
		   CM_CTRL_LCDEN0|
		   CM_CTRL_LCDEN1|
		   CM_CTRL_STATIC1|
		   CM_CTRL_STATIC2|
		   CM_CTRL_STATIC|
		   CM_CTRL_n24BITEN, val);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
21,23
22,23
22,24
23,24
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
35,36
35,37
36,37
36,38
37,38
39,40
41,42
43,44
45,46
45,47
45,48
46,47
46,48
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
75,76
75,77
75,78
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
80,81
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
97,98
98,99
98,100
98,101
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
104,106
105,106
105,107
106,107
106,108
107,108
109,110
111,112
113,114
115,116
117,118
119,120
121,122
-----nextToken-----
2,4,7,9,10,15,17,18,24,25,26,30,32,38,40,42,44,50,51,52,58,59,60,65,66,67,68,72,74,81,82,83,84,85,89,91,95,96,100,108,110,112,114,116,118,120,122
-----computeFrom-----
34,35
34,36
35,36
35,37
36,37
36,38
46,47
46,48
47,48
47,49
54,55
54,56
55,56
55,57
61,62
61,63
70,71
70,72
76,77
76,78
87,88
87,89
93,94
93,95
101,102
101,103
102,103
102,104
103,104
103,105
104,105
104,106
105,106
105,107
106,107
106,108
-----guardedBy-----
-----guardedByNegation-----
65,83
59,84
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void cp_clcd_enable(struct clcd_fb *fb){	struct fb_var_screeninfo *var = &fb->fb.var;	u32 val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1;	if (var->bits_per_pixel <= 8 ||	    (var->bits_per_pixel == 16 && var->green.length == 5))		/* Pseudocolor, RGB555, BGR555 */		val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555;	else if (fb->fb.var.bits_per_pixel <= 16)		/* truecolor RGB565 */		val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555;	else		val = 0; /* no idea for this, don't trust the docs */	cm_control(CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2|		   CM_CTRL_STATIC|		   CM_CTRL_n24BITEN, val);}
static void
cp_clcd_enable(struct clcd_fb *fb)
cp_clcd_enable
struct clcd_fb *fb
struct clcd_fb
clcd_fb
*fb
*
fb
{	struct fb_var_screeninfo *var = &fb->fb.var;	u32 val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1;	if (var->bits_per_pixel <= 8 ||	    (var->bits_per_pixel == 16 && var->green.length == 5))		/* Pseudocolor, RGB555, BGR555 */		val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555;	else if (fb->fb.var.bits_per_pixel <= 16)		/* truecolor RGB565 */		val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555;	else		val = 0; /* no idea for this, don't trust the docs */	cm_control(CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2|		   CM_CTRL_STATIC|		   CM_CTRL_n24BITEN, val);}
struct fb_var_screeninfo *var = &fb->fb.var;
struct fb_var_screeninfo *var = &fb->fb.var;
struct fb_var_screeninfo
fb_var_screeninfo
*var = &fb->fb.var
*
var
= &fb->fb.var
&fb->fb.var
fb->fb.var
fb->fb
fb
fb
fb
var
u32 val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1;
u32 val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1;
u32
u32
val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1
val
= CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1
CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1
CM_CTRL_STATIC1 | CM_CTRL_STATIC2			| CM_CTRL_LCDEN0
CM_CTRL_STATIC1 | CM_CTRL_STATIC2
CM_CTRL_STATIC1
CM_CTRL_STATIC1
CM_CTRL_STATIC2
CM_CTRL_STATIC2
CM_CTRL_LCDEN0
CM_CTRL_LCDEN0
CM_CTRL_LCDEN1
CM_CTRL_LCDEN1
if (var->bits_per_pixel <= 8 ||	    (var->bits_per_pixel == 16 && var->green.length == 5))		/* Pseudocolor, RGB555, BGR555 */		val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555;	else if (fb->fb.var.bits_per_pixel <= 16)		/* truecolor RGB565 */		val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555;	else		val = 0;
var->bits_per_pixel <= 8 ||	    (var->bits_per_pixel == 16 && var->green.length == 5)
var->bits_per_pixel <= 8
var->bits_per_pixel
var
var
bits_per_pixel
8
(var->bits_per_pixel == 16 && var->green.length == 5)
var->bits_per_pixel == 16 && var->green.length == 5
var->bits_per_pixel == 16
var->bits_per_pixel
var
var
bits_per_pixel
16
var->green.length == 5
var->green.length
var->green
var
var
green
length
5
val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555;
val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555
val
val
CM_CTRL_LCDMUXSEL_VGA555_TFT555
CM_CTRL_LCDMUXSEL_VGA555_TFT555
if (fb->fb.var.bits_per_pixel <= 16)		/* truecolor RGB565 */		val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555;	else		val = 0;
fb->fb.var.bits_per_pixel <= 16
fb->fb.var.bits_per_pixel
fb->fb.var
fb->fb
fb
fb
fb
var
bits_per_pixel
16
val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555;
val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555
val
val
CM_CTRL_LCDMUXSEL_VGA565_TFT555
CM_CTRL_LCDMUXSEL_VGA565_TFT555
val = 0;
val = 0
val
val
0
cm_control(CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2|		   CM_CTRL_STATIC|		   CM_CTRL_n24BITEN, val);
cm_control(CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2|		   CM_CTRL_STATIC|		   CM_CTRL_n24BITEN, val)
cm_control
cm_control
CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2|		   CM_CTRL_STATIC|		   CM_CTRL_n24BITEN
CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2|		   CM_CTRL_STATIC
CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1|		   CM_CTRL_STATIC2
CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1|		   CM_CTRL_STATIC1
CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0|		   CM_CTRL_LCDEN1
CM_CTRL_LCDMUXSEL_MASK|		   CM_CTRL_LCDEN0
CM_CTRL_LCDMUXSEL_MASK
CM_CTRL_LCDMUXSEL_MASK
CM_CTRL_LCDEN0
CM_CTRL_LCDEN0
CM_CTRL_LCDEN1
CM_CTRL_LCDEN1
CM_CTRL_STATIC1
CM_CTRL_STATIC1
CM_CTRL_STATIC2
CM_CTRL_STATIC2
CM_CTRL_STATIC
CM_CTRL_STATIC
CM_CTRL_n24BITEN
CM_CTRL_n24BITEN
val
val
-----joern-----
(28,40,0)
(60,51,0)
(61,53,0)
(1,45,0)
(14,68,0)
(74,47,0)
(38,73,0)
(54,30,0)
(33,46,0)
(21,29,0)
(65,25,0)
(51,30,0)
(35,46,0)
(58,51,0)
(38,23,0)
(23,11,0)
(32,60,0)
(54,15,0)
(70,47,0)
(38,25,0)
(37,18,0)
(24,51,0)
(55,30,0)
(23,38,0)
(69,19,0)
(64,9,0)
(17,62,0)
(47,68,0)
(57,51,0)
(22,25,0)
(7,53,0)
(29,57,0)
(51,60,0)
(74,64,0)
(39,11,0)
(73,44,0)
(66,64,0)
(40,16,0)
(44,73,0)
(62,10,0)
(41,16,0)
(68,47,0)
(15,16,0)
(59,46,0)
(73,38,0)
(11,18,0)
(62,17,0)
(31,58,0)
(29,45,0)
(3,44,0)
(63,40,0)
(20,57,0)
(6,54,0)
(56,59,0)
(16,40,0)
(12,44,0)
(29,19,0)
(17,45,0)
(72,10,0)
(29,30,0)
(15,54,0)
(59,10,0)
(45,29,0)
(16,15,0)
(18,11,0)
(5,61,0)
(18,54,0)
(13,22,0)
(22,54,0)
(44,3,0)
(2,64,0)
(47,74,0)
(71,30,0)
(29,58,0)
(0,22,0)
(36,57,0)
(10,59,0)
(4,19,0)
(53,60,0)
(34,58,0)
(52,23,0)
(53,61,0)
(25,38,0)
(8,61,0)
(45,17,0)
(3,54,0)
(26,3,0)
(64,74,0)
(60,53,0)
(40,9,0)
(10,62,0)
(25,22,0)
(49,17,0)
(46,59,0)
(67,18,0)
(42,62,0)
(11,23,0)
(50,3,0)
(27,30,0)
(48,74,0)
(15,16,1)
(14,47,1)
(52,11,1)
(47,70,1)
(48,64,1)
(65,22,1)
(64,66,1)
(66,2,1)
(24,54,1)
(46,33,1)
(41,40,1)
(40,63,1)
(11,39,1)
(10,59,1)
(22,0,1)
(68,47,1)
(50,26,1)
(60,53,1)
(36,73,1)
(42,49,1)
(40,9,1)
(2,73,1)
(38,23,1)
(3,50,1)
(59,46,1)
(1,57,1)
(29,58,1)
(11,18,1)
(26,51,1)
(16,40,1)
(18,54,1)
(49,1,1)
(34,31,1)
(0,13,1)
(7,32,1)
(72,42,1)
(4,69,1)
(63,28,1)
(74,64,1)
(33,35,1)
(64,9,1)
(44,12,1)
(53,61,1)
(16,41,1)
(57,51,1)
(37,67,1)
(62,10,1)
(47,74,1)
(28,6,1)
(25,65,1)
(3,54,1)
(1,19,1)
(25,22,1)
(58,34,1)
(69,68,1)
(29,19,1)
(5,8,1)
(73,44,1)
(57,20,1)
(22,54,1)
(74,48,1)
(44,3,1)
(32,24,1)
(13,44,1)
(29,45,1)
(17,62,1)
(38,25,1)
(20,36,1)
(12,3,1)
(56,72,1)
(35,56,1)
(23,52,1)
(29,21,1)
(70,74,1)
(43,29,1)
(39,18,1)
(1,58,1)
(8,7,1)
(68,14,1)
(19,4,1)
(29,57,1)
(54,15,1)
(61,5,1)
(67,25,1)
(45,17,1)
(23,11,1)
(51,60,1)
(73,38,1)
(21,45,1)
(18,37,1)
(58,51,1)
(31,68,1)
(73,38,2)
(18,54,2)
(36,73,2)
(47,74,2)
(10,59,2)
(31,68,2)
(4,68,2)
(22,44,2)
(47,73,2)
(54,15,2)
(16,40,2)
(60,53,2)
(74,73,2)
(22,54,2)
(70,73,2)
(2,73,2)
(23,11,2)
(14,73,2)
(40,9,2)
(38,44,2)
(29,19,2)
(51,60,2)
(34,68,2)
(29,57,2)
(19,68,2)
(13,44,2)
(23,25,2)
(39,25,2)
(11,18,2)
(53,61,2)
(65,44,2)
(73,44,2)
(15,16,2)
(68,73,2)
(29,58,2)
(59,46,2)
(45,17,2)
(52,25,2)
(38,25,2)
(3,54,2)
(68,47,2)
(20,73,2)
(37,25,2)
(57,73,2)
(58,51,2)
(62,10,2)
(64,73,2)
(69,68,2)
(74,64,2)
(66,73,2)
(64,9,2)
(44,3,2)
(48,73,2)
(18,25,2)
(57,51,2)
(58,68,2)
(17,62,2)
(0,44,2)
(25,22,2)
(29,45,2)
(25,44,2)
(38,23,2)
(67,25,2)
(11,25,2)
-----------------------------------
(0,bits_per_pixel)
(1,CM_CTRL_LCDMUXSEL_MASK)
(2,fb)
(3,var->bits_per_pixel)
(4,0)
(5,CM_CTRL_LCDEN1)
(6,var)
(7,CM_CTRL_STATIC2)
(8,CM_CTRL_LCDEN0)
(9,struct clcd_fb *fb)
(10,CM_CTRL_STATIC1|\n\\n\\t\\t   CM_CTRL_STATIC2|\n\\n\\t\\t   CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN)
(11,var->green.length)
(12,8)
(13,var)
(14,16)
(15,&fb->fb.var)
(16,fb->fb.var)
(17,CM_CTRL_LCDEN0|\n\\n\\t\\t   CM_CTRL_LCDEN1|\n\\n\\t\\t   CM_CTRL_STATIC1|\n\\n\\t\\t   CM_CTRL_STATIC2|\n\\n\\t\\t   CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN)
(18,var->green)
(19,val = 0)
(20,CM_CTRL_LCDMUXSEL_VGA555_TFT555)
(21,val)
(22,var->bits_per_pixel)
(23,var->green.length == 5)
(24,val)
(25,var->bits_per_pixel == 16)
(26,var)
(27,val)
(28,fb)
(29,cm_control(CM_CTRL_LCDMUXSEL_MASK|\n\\n\\t\\t   CM_CTRL_LCDEN0|\n\\n\\t\\t   CM_CTRL_LCDEN1|\n\\n\\t\\t   CM_CTRL_STATIC1|\n\\n\\t\\t   CM_CTRL_STATIC2|\n\\n\\t\\t   CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN, val)
(30,)
(31,val)
(32,CM_CTRL_STATIC1)
(33,CM_CTRL_n24BITEN)
(34,CM_CTRL_LCDMUXSEL_VGA565_TFT555)
(35,CM_CTRL_STATIC)
(36,val)
(37,green)
(38,var->bits_per_pixel == 16 && var->green.length == 5)
(39,length)
(40,fb->fb)
(41,var)
(42,CM_CTRL_LCDEN1)
(43,RET)
(44,var->bits_per_pixel <= 8)
(45,CM_CTRL_LCDMUXSEL_MASK|\n\\n\\t\\t   CM_CTRL_LCDEN0|\n\\n\\t\\t   CM_CTRL_LCDEN1|\n\\n\\t\\t   CM_CTRL_STATIC1|\n\\n\\t\\t   CM_CTRL_STATIC2|\n\\n\\t\\t   CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN)
(46,CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN)
(47,fb->fb.var.bits_per_pixel)
(48,var)
(49,CM_CTRL_LCDEN0)
(50,bits_per_pixel)
(51,val = CM_CTRL_STATIC1 | CM_CTRL_STATIC2\n\\n\\t\\t\\t| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1)
(52,5)
(53,CM_CTRL_STATIC2\n\\n\\t\\t\\t| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1)
(54,*var = &fb->fb.var)
(55,if (var->bits_per_pixel <= 8 ||\n\\n\\t    (var->bits_per_pixel == 16 && var->green.length == 5)
(56,CM_CTRL_STATIC2)
(57,val |= CM_CTRL_LCDMUXSEL_VGA555_TFT555)
(58,val |= CM_CTRL_LCDMUXSEL_VGA565_TFT555)
(59,CM_CTRL_STATIC2|\n\\n\\t\\t   CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN)
(60,CM_CTRL_STATIC1 | CM_CTRL_STATIC2\n\\n\\t\\t\\t| CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1)
(61,CM_CTRL_LCDEN0 | CM_CTRL_LCDEN1)
(62,CM_CTRL_LCDEN1|\n\\n\\t\\t   CM_CTRL_STATIC1|\n\\n\\t\\t   CM_CTRL_STATIC2|\n\\n\\t\\t   CM_CTRL_STATIC|\n\\n\\t\\t   CM_CTRL_n24BITEN)
(63,fb)
(64,fb->fb)
(65,16)
(66,fb)
(67,var)
(68,fb->fb.var.bits_per_pixel <= 16)
(69,val)
(70,bits_per_pixel)
(71,var)
(72,CM_CTRL_STATIC1)
(73,var->bits_per_pixel <= 8 ||\n\\n\\t    (var->bits_per_pixel == 16 && var->green.length == 5)
(74,fb->fb.var)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^