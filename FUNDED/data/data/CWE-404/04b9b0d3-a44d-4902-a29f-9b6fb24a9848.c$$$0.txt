-----label-----
1
-----code-----
void pnp_init_resource_table(struct pnp_resource_table *table)
{
	int idx;
	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {
		table->irq_resource[idx].name = NULL;
		table->irq_resource[idx].start = -1;
		table->irq_resource[idx].end = -1;
		table->irq_resource[idx].flags = IORESOURCE_AUTO;
	}
	for (idx = 0; idx < PNP_MAX_DMA; idx++) {
		table->dma_resource[idx].name = NULL;
		table->dma_resource[idx].start = -1;
		table->dma_resource[idx].end = -1;
		table->dma_resource[idx].flags = IORESOURCE_AUTO;
	}
	for (idx = 0; idx < PNP_MAX_PORT; idx++) {
		table->port_resource[idx].name = NULL;
		table->port_resource[idx].start = 0;
		table->port_resource[idx].end = 0;
		table->port_resource[idx].flags = IORESOURCE_AUTO;
	}
	for (idx = 0; idx < PNP_MAX_MEM; idx++) {
		table->mem_resource[idx].name = NULL;
		table->mem_resource[idx].start = 0;
		table->mem_resource[idx].end = 0;
		table->mem_resource[idx].flags = IORESOURCE_AUTO;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
15,16
17,18
17,19
17,20
17,21
18,19
19,20
19,21
20,21
23,24
23,25
24,25
26,27
28,29
29,30
31,32
31,33
31,34
31,35
32,33
33,34
33,35
34,35
34,36
35,36
35,37
36,37
36,38
37,38
40,41
43,44
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
49,51
50,51
53,54
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
62,64
63,64
66,67
69,70
71,72
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
76,77
79,80
82,83
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
93,94
95,96
96,97
98,99
98,100
98,101
98,102
99,100
100,101
100,102
101,102
101,103
102,103
102,104
103,104
103,105
104,105
107,108
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
116,118
117,118
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
129,131
130,131
133,134
136,137
138,139
139,140
139,141
140,141
140,142
141,142
141,143
142,143
142,144
143,144
146,147
149,150
151,152
151,153
151,154
151,155
152,153
153,154
153,155
154,155
157,158
157,159
158,159
160,161
162,163
163,164
165,166
165,167
165,168
165,169
166,167
167,168
167,169
168,169
168,170
169,170
169,171
170,171
170,172
171,172
174,175
177,178
179,180
180,181
180,182
181,182
181,183
182,183
182,184
183,184
183,185
184,185
187,188
191,192
192,193
192,194
193,194
193,195
194,195
194,196
195,196
195,197
196,197
199,200
203,204
204,205
204,206
205,206
205,207
206,207
206,208
207,208
207,209
208,209
211,212
214,215
216,217
216,218
216,219
216,220
217,218
218,219
218,220
219,220
222,223
222,224
223,224
225,226
227,228
228,229
230,231
230,232
230,233
230,234
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
235,237
236,237
239,240
242,243
244,245
245,246
245,247
246,247
246,248
247,248
247,249
248,249
248,250
249,250
252,253
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
260,262
261,262
264,265
268,269
269,270
269,271
270,271
270,272
271,272
271,273
272,273
272,274
273,274
276,277
279,280
-----nextToken-----
2,4,7,9,10,14,16,21,22,25,27,30,38,39,41,42,44,51,52,54,55,57,64,65,67,68,70,77,78,80,81,83,88,89,92,94,97,105,106,108,109,111,118,119,121,122,124,131,132,134,135,137,144,145,147,148,150,155,156,159,161,164,172,173,175,176,178,185,186,188,189,190,197,198,200,201,202,209,210,212,213,215,220,221,224,226,229,237,238,240,241,243,250,251,253,254,255,262,263,265,266,267,274,275,277,278,280
-----computeFrom-----
19,20
19,21
23,24
23,25
33,34
33,35
46,47
46,48
59,60
59,61
72,73
72,74
86,87
86,88
90,91
90,92
100,101
100,102
113,114
113,115
126,127
126,128
139,140
139,141
153,154
153,155
157,158
157,159
167,168
167,169
180,181
180,182
192,193
192,194
204,205
204,206
218,219
218,220
222,223
222,224
232,233
232,234
245,246
245,247
257,258
257,259
269,270
269,271
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
void pnp_init_resource_table(struct pnp_resource_table *table){	int idx;	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {		table->irq_resource[idx].name = NULL;		table->irq_resource[idx].start = -1;		table->irq_resource[idx].end = -1;		table->irq_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_DMA; idx++) {		table->dma_resource[idx].name = NULL;		table->dma_resource[idx].start = -1;		table->dma_resource[idx].end = -1;		table->dma_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_PORT; idx++) {		table->port_resource[idx].name = NULL;		table->port_resource[idx].start = 0;		table->port_resource[idx].end = 0;		table->port_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_MEM; idx++) {		table->mem_resource[idx].name = NULL;		table->mem_resource[idx].start = 0;		table->mem_resource[idx].end = 0;		table->mem_resource[idx].flags = IORESOURCE_AUTO;	}}
void
pnp_init_resource_table(struct pnp_resource_table *table)
pnp_init_resource_table
struct pnp_resource_table *table
struct pnp_resource_table
pnp_resource_table
*table
*
table
{	int idx;	for (idx = 0; idx < PNP_MAX_IRQ; idx++) {		table->irq_resource[idx].name = NULL;		table->irq_resource[idx].start = -1;		table->irq_resource[idx].end = -1;		table->irq_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_DMA; idx++) {		table->dma_resource[idx].name = NULL;		table->dma_resource[idx].start = -1;		table->dma_resource[idx].end = -1;		table->dma_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_PORT; idx++) {		table->port_resource[idx].name = NULL;		table->port_resource[idx].start = 0;		table->port_resource[idx].end = 0;		table->port_resource[idx].flags = IORESOURCE_AUTO;	}	for (idx = 0; idx < PNP_MAX_MEM; idx++) {		table->mem_resource[idx].name = NULL;		table->mem_resource[idx].start = 0;		table->mem_resource[idx].end = 0;		table->mem_resource[idx].flags = IORESOURCE_AUTO;	}}
int idx;
int idx;
int
idx
idx
for (idx = 0; idx < PNP_MAX_IRQ; idx++) {		table->irq_resource[idx].name = NULL;		table->irq_resource[idx].start = -1;		table->irq_resource[idx].end = -1;		table->irq_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_IRQ
idx
idx
PNP_MAX_IRQ
PNP_MAX_IRQ
idx++
idx
idx
{		table->irq_resource[idx].name = NULL;		table->irq_resource[idx].start = -1;		table->irq_resource[idx].end = -1;		table->irq_resource[idx].flags = IORESOURCE_AUTO;	}
table->irq_resource[idx].name = NULL;
table->irq_resource[idx].name = NULL
table->irq_resource[idx].name
table->irq_resource[idx]
table->irq_resource
table
table
irq_resource
idx
idx
name
NULL
NULL
table->irq_resource[idx].start = -1;
table->irq_resource[idx].start = -1
table->irq_resource[idx].start
table->irq_resource[idx]
table->irq_resource
table
table
irq_resource
idx
idx
start
-1
1
table->irq_resource[idx].end = -1;
table->irq_resource[idx].end = -1
table->irq_resource[idx].end
table->irq_resource[idx]
table->irq_resource
table
table
irq_resource
idx
idx
end
-1
1
table->irq_resource[idx].flags = IORESOURCE_AUTO;
table->irq_resource[idx].flags = IORESOURCE_AUTO
table->irq_resource[idx].flags
table->irq_resource[idx]
table->irq_resource
table
table
irq_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
for (idx = 0; idx < PNP_MAX_DMA; idx++) {		table->dma_resource[idx].name = NULL;		table->dma_resource[idx].start = -1;		table->dma_resource[idx].end = -1;		table->dma_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_DMA
idx
idx
PNP_MAX_DMA
PNP_MAX_DMA
idx++
idx
idx
{		table->dma_resource[idx].name = NULL;		table->dma_resource[idx].start = -1;		table->dma_resource[idx].end = -1;		table->dma_resource[idx].flags = IORESOURCE_AUTO;	}
table->dma_resource[idx].name = NULL;
table->dma_resource[idx].name = NULL
table->dma_resource[idx].name
table->dma_resource[idx]
table->dma_resource
table
table
dma_resource
idx
idx
name
NULL
NULL
table->dma_resource[idx].start = -1;
table->dma_resource[idx].start = -1
table->dma_resource[idx].start
table->dma_resource[idx]
table->dma_resource
table
table
dma_resource
idx
idx
start
-1
1
table->dma_resource[idx].end = -1;
table->dma_resource[idx].end = -1
table->dma_resource[idx].end
table->dma_resource[idx]
table->dma_resource
table
table
dma_resource
idx
idx
end
-1
1
table->dma_resource[idx].flags = IORESOURCE_AUTO;
table->dma_resource[idx].flags = IORESOURCE_AUTO
table->dma_resource[idx].flags
table->dma_resource[idx]
table->dma_resource
table
table
dma_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
for (idx = 0; idx < PNP_MAX_PORT; idx++) {		table->port_resource[idx].name = NULL;		table->port_resource[idx].start = 0;		table->port_resource[idx].end = 0;		table->port_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_PORT
idx
idx
PNP_MAX_PORT
PNP_MAX_PORT
idx++
idx
idx
{		table->port_resource[idx].name = NULL;		table->port_resource[idx].start = 0;		table->port_resource[idx].end = 0;		table->port_resource[idx].flags = IORESOURCE_AUTO;	}
table->port_resource[idx].name = NULL;
table->port_resource[idx].name = NULL
table->port_resource[idx].name
table->port_resource[idx]
table->port_resource
table
table
port_resource
idx
idx
name
NULL
NULL
table->port_resource[idx].start = 0;
table->port_resource[idx].start = 0
table->port_resource[idx].start
table->port_resource[idx]
table->port_resource
table
table
port_resource
idx
idx
start
0
table->port_resource[idx].end = 0;
table->port_resource[idx].end = 0
table->port_resource[idx].end
table->port_resource[idx]
table->port_resource
table
table
port_resource
idx
idx
end
0
table->port_resource[idx].flags = IORESOURCE_AUTO;
table->port_resource[idx].flags = IORESOURCE_AUTO
table->port_resource[idx].flags
table->port_resource[idx]
table->port_resource
table
table
port_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
for (idx = 0; idx < PNP_MAX_MEM; idx++) {		table->mem_resource[idx].name = NULL;		table->mem_resource[idx].start = 0;		table->mem_resource[idx].end = 0;		table->mem_resource[idx].flags = IORESOURCE_AUTO;	}
idx = 0;
idx = 0
idx
idx
0
idx < PNP_MAX_MEM
idx
idx
PNP_MAX_MEM
PNP_MAX_MEM
idx++
idx
idx
{		table->mem_resource[idx].name = NULL;		table->mem_resource[idx].start = 0;		table->mem_resource[idx].end = 0;		table->mem_resource[idx].flags = IORESOURCE_AUTO;	}
table->mem_resource[idx].name = NULL;
table->mem_resource[idx].name = NULL
table->mem_resource[idx].name
table->mem_resource[idx]
table->mem_resource
table
table
mem_resource
idx
idx
name
NULL
NULL
table->mem_resource[idx].start = 0;
table->mem_resource[idx].start = 0
table->mem_resource[idx].start
table->mem_resource[idx]
table->mem_resource
table
table
mem_resource
idx
idx
start
0
table->mem_resource[idx].end = 0;
table->mem_resource[idx].end = 0
table->mem_resource[idx].end
table->mem_resource[idx]
table->mem_resource
table
table
mem_resource
idx
idx
end
0
table->mem_resource[idx].flags = IORESOURCE_AUTO;
table->mem_resource[idx].flags = IORESOURCE_AUTO
table->mem_resource[idx].flags
table->mem_resource[idx]
table->mem_resource
table
table
mem_resource
idx
idx
flags
IORESOURCE_AUTO
IORESOURCE_AUTO
-----joern-----
(134,112,0)
(168,140,0)
(98,47,0)
(26,156,0)
(23,150,0)
(31,109,0)
(191,182,0)
(38,27,0)
(79,57,0)
(71,122,0)
(82,69,0)
(3,115,0)
(21,40,0)
(61,71,0)
(26,66,0)
(147,112,0)
(74,62,0)
(39,133,0)
(167,80,0)
(135,7,0)
(29,97,0)
(111,133,0)
(98,114,0)
(162,169,0)
(61,133,0)
(155,189,0)
(30,89,0)
(132,82,0)
(105,96,0)
(17,150,0)
(21,111,0)
(174,65,0)
(80,122,0)
(42,5,0)
(96,150,0)
(104,125,0)
(1,156,0)
(142,21,0)
(78,109,0)
(101,150,0)
(65,69,0)
(97,45,0)
(182,57,0)
(156,26,0)
(127,144,0)
(67,122,0)
(157,76,0)
(165,41,0)
(72,85,0)
(172,180,0)
(7,65,0)
(10,41,0)
(83,186,0)
(64,80,0)
(90,122,0)
(61,0,0)
(106,167,0)
(54,102,0)
(65,5,0)
(153,54,0)
(56,77,0)
(147,169,0)
(9,6,0)
(180,125,0)
(145,167,0)
(6,125,0)
(183,143,0)
(182,186,0)
(53,111,0)
(114,98,0)
(82,73,0)
(159,76,0)
(5,122,0)
(12,133,0)
(45,191,0)
(172,122,0)
(187,90,0)
(111,21,0)
(160,106,0)
(67,17,0)
(144,125,0)
(17,67,0)
(75,77,0)
(36,97,0)
(143,50,0)
(136,38,0)
(80,167,0)
(170,26,0)
(131,31,0)
(7,35,0)
(73,82,0)
(140,27,0)
(25,85,0)
(25,126,0)
(95,41,0)
(93,62,0)
(166,191,0)
(37,96,0)
(154,125,0)
(38,122,0)
(138,73,0)
(73,122,0)
(13,109,0)
(176,15,0)
(34,99,0)
(89,186,0)
(114,150,0)
(146,17,0)
(11,40,0)
(91,41,0)
(131,12,0)
(115,69,0)
(191,45,0)
(189,122,0)
(40,109,0)
(120,100,0)
(44,159,0)
(103,83,0)
(163,2,0)
(16,133,0)
(51,69,0)
(118,82,0)
(106,89,0)
(15,122,0)
(114,189,0)
(46,66,0)
(2,122,0)
(93,154,0)
(63,5,0)
(178,15,0)
(27,140,0)
(124,69,0)
(25,150,0)
(89,30,0)
(158,41,0)
(126,25,0)
(60,16,0)
(24,80,0)
(171,128,0)
(77,111,0)
(66,26,0)
(161,133,0)
(97,122,0)
(45,125,0)
(4,131,0)
(2,12,0)
(129,172,0)
(85,25,0)
(188,124,0)
(57,182,0)
(88,180,0)
(8,2,0)
(18,66,0)
(26,150,0)
(132,159,0)
(52,12,0)
(0,61,0)
(126,100,0)
(45,97,0)
(90,154,0)
(12,131,0)
(108,47,0)
(99,76,0)
(27,133,0)
(55,126,0)
(128,157,0)
(59,144,0)
(32,132,0)
(43,172,0)
(81,180,0)
(154,93,0)
(50,69,0)
(27,38,0)
(19,185,0)
(5,65,0)
(48,35,0)
(151,134,0)
(100,112,0)
(111,77,0)
(107,45,0)
(22,50,0)
(84,133,0)
(62,186,0)
(116,146,0)
(85,122,0)
(54,69,0)
(173,125,0)
(47,112,0)
(184,93,0)
(181,81,0)
(102,99,0)
(190,17,0)
(185,150,0)
(167,106,0)
(65,7,0)
(17,146,0)
(140,78,0)
(143,122,0)
(113,124,0)
(87,114,0)
(68,85,0)
(154,90,0)
(70,30,0)
(180,81,0)
(189,114,0)
(77,122,0)
(54,15,0)
(66,122,0)
(35,76,0)
(50,143,0)
(121,143,0)
(167,125,0)
(180,172,0)
(58,27,0)
(110,67,0)
(20,98,0)
(15,54,0)
(82,132,0)
(177,0,0)
(169,147,0)
(139,71,0)
(156,147,0)
(81,83,0)
(164,61,0)
(0,13,0)
(123,25,0)
(128,50,0)
(49,102,0)
(33,71,0)
(149,69,0)
(146,134,0)
(50,128,0)
(47,108,0)
(14,161,0)
(102,54,0)
(86,38,0)
(148,73,0)
(117,157,0)
(179,108,0)
(12,2,0)
(152,161,0)
(141,67,0)
(92,90,0)
(119,78,0)
(28,154,0)
(71,61,0)
(175,189,0)
(94,13,0)
(130,31,0)
(27,133,1)
(189,122,1)
(189,175,1)
(161,14,1)
(100,120,1)
(87,189,1)
(67,141,1)
(102,49,1)
(147,169,1)
(136,86,1)
(96,37,1)
(93,184,1)
(63,42,1)
(90,92,1)
(182,57,1)
(45,125,1)
(54,15,1)
(148,157,1)
(71,122,1)
(107,97,1)
(114,150,1)
(12,133,1)
(69,51,1)
(164,71,1)
(42,99,1)
(12,2,1)
(101,144,1)
(61,71,1)
(175,155,1)
(89,30,1)
(154,125,1)
(116,17,1)
(143,121,1)
(9,62,1)
(48,7,1)
(25,150,1)
(119,140,1)
(74,93,1)
(54,69,1)
(128,50,1)
(132,32,1)
(65,69,1)
(117,128,1)
(180,125,1)
(68,147,1)
(185,19,1)
(46,47,1)
(6,9,1)
(167,80,1)
(188,113,1)
(150,23,1)
(25,123,1)
(115,3,1)
(114,87,1)
(56,75,1)
(145,80,1)
(43,144,1)
(137,161,1)
(32,82,1)
(99,34,1)
(6,125,1)
(17,67,1)
(177,61,1)
(2,8,1)
(83,103,1)
(97,36,1)
(16,133,1)
(154,28,1)
(57,79,1)
(162,156,1)
(45,107,1)
(143,122,1)
(152,16,1)
(138,148,1)
(144,127,1)
(92,187,1)
(26,170,1)
(140,168,1)
(185,150,1)
(23,101,1)
(21,142,1)
(126,55,1)
(127,59,1)
(172,129,1)
(121,183,1)
(0,61,1)
(21,111,1)
(170,66,1)
(65,5,1)
(157,117,1)
(39,84,1)
(22,143,1)
(131,12,1)
(17,150,1)
(141,110,1)
(156,26,1)
(12,52,1)
(77,56,1)
(59,6,1)
(33,139,1)
(17,190,1)
(80,24,1)
(130,131,1)
(124,69,1)
(47,108,1)
(34,102,1)
(5,122,1)
(52,2,1)
(82,69,1)
(187,89,1)
(140,27,1)
(180,88,1)
(45,97,1)
(111,53,1)
(8,163,1)
(180,172,1)
(111,133,1)
(40,11,1)
(144,125,1)
(176,124,1)
(168,27,1)
(152,133,1)
(85,72,1)
(159,44,1)
(178,176,1)
(156,1,1)
(18,46,1)
(1,26,1)
(13,94,1)
(191,45,1)
(179,98,1)
(27,58,1)
(55,25,1)
(153,15,1)
(161,133,1)
(59,125,1)
(123,85,1)
(97,122,1)
(15,178,1)
(86,13,1)
(105,150,1)
(146,116,1)
(75,31,1)
(80,122,1)
(167,145,1)
(111,77,1)
(128,171,1)
(35,48,1)
(173,104,1)
(124,188,1)
(38,136,1)
(113,69,1)
(73,122,1)
(7,135,1)
(73,138,1)
(108,179,1)
(106,167,1)
(4,12,1)
(114,189,1)
(26,150,1)
(167,125,1)
(146,17,1)
(160,167,1)
(191,166,1)
(38,122,1)
(155,134,1)
(190,67,1)
(79,191,1)
(181,180,1)
(19,100,1)
(81,181,1)
(66,122,1)
(27,38,1)
(81,180,1)
(71,33,1)
(77,122,1)
(88,172,1)
(82,118,1)
(30,70,1)
(169,162,1)
(20,114,1)
(90,122,1)
(5,63,1)
(139,161,1)
(96,150,1)
(15,122,1)
(135,65,1)
(50,69,1)
(84,124,1)
(28,90,1)
(82,73,1)
(61,164,1)
(61,133,1)
(142,111,1)
(131,4,1)
(154,90,1)
(29,83,1)
(62,74,1)
(106,160,1)
(2,122,1)
(64,182,1)
(115,69,1)
(151,146,1)
(172,122,1)
(7,65,1)
(78,119,1)
(133,39,1)
(36,29,1)
(102,54,1)
(16,60,1)
(44,132,1)
(110,96,1)
(98,20,1)
(134,151,1)
(49,54,1)
(72,68,1)
(183,35,1)
(54,153,1)
(24,64,1)
(31,130,1)
(70,106,1)
(120,126,1)
(93,154,1)
(50,22,1)
(125,173,1)
(58,38,1)
(163,78,1)
(51,149,1)
(129,43,1)
(14,152,1)
(98,114,1)
(37,105,1)
(26,66,1)
(60,40,1)
(105,185,1)
(184,154,1)
(65,174,1)
(149,96,1)
(103,81,1)
(3,159,1)
(171,50,1)
(126,25,1)
(25,85,1)
(50,143,1)
(118,73,1)
(53,77,1)
(94,0,1)
(113,115,1)
(0,177,1)
(166,45,1)
(132,82,1)
(11,21,1)
(85,122,1)
(174,5,1)
(67,122,1)
(66,18,1)
(114,150,2)
(166,144,2)
(72,96,2)
(17,96,2)
(169,96,2)
(87,96,2)
(143,122,2)
(33,161,2)
(175,96,2)
(65,124,2)
(71,122,2)
(29,144,2)
(59,144,2)
(174,124,2)
(3,124,2)
(146,17,2)
(2,122,2)
(171,124,2)
(70,144,2)
(64,144,2)
(148,124,2)
(94,161,2)
(12,2,2)
(66,122,2)
(7,124,2)
(30,144,2)
(6,125,2)
(141,96,2)
(167,80,2)
(121,124,2)
(147,169,2)
(114,96,2)
(187,144,2)
(5,122,2)
(129,144,2)
(179,96,2)
(73,124,2)
(111,161,2)
(81,180,2)
(43,144,2)
(74,144,2)
(128,124,2)
(66,96,2)
(130,161,2)
(154,144,2)
(164,161,2)
(8,161,2)
(17,67,2)
(25,150,2)
(188,124,2)
(58,161,2)
(161,133,2)
(18,96,2)
(105,96,2)
(12,161,2)
(35,124,2)
(55,96,2)
(19,96,2)
(79,144,2)
(1,96,2)
(185,96,2)
(189,122,2)
(57,144,2)
(47,96,2)
(54,69,2)
(26,96,2)
(102,124,2)
(178,124,2)
(176,124,2)
(180,172,2)
(38,122,2)
(36,144,2)
(96,150,2)
(77,122,2)
(126,96,2)
(144,125,2)
(136,161,2)
(124,124,2)
(46,96,2)
(167,125,2)
(183,124,2)
(180,125,2)
(27,133,2)
(155,96,2)
(181,144,2)
(167,144,2)
(17,150,2)
(115,69,2)
(27,38,2)
(37,96,2)
(28,144,2)
(144,144,2)
(12,133,2)
(113,124,2)
(162,96,2)
(185,150,2)
(98,114,2)
(97,144,2)
(99,124,2)
(50,124,2)
(115,124,2)
(15,122,2)
(82,124,2)
(170,96,2)
(15,124,2)
(60,161,2)
(47,108,2)
(172,144,2)
(67,96,2)
(21,111,2)
(97,122,2)
(140,27,2)
(191,45,2)
(50,143,2)
(191,144,2)
(62,144,2)
(85,96,2)
(143,124,2)
(161,161,2)
(25,85,2)
(75,161,2)
(86,161,2)
(2,161,2)
(61,71,2)
(108,96,2)
(159,124,2)
(31,161,2)
(189,96,2)
(38,161,2)
(182,144,2)
(5,124,2)
(90,122,2)
(83,144,2)
(40,161,2)
(45,144,2)
(54,124,2)
(44,124,2)
(114,189,2)
(119,161,2)
(184,144,2)
(98,96,2)
(50,69,2)
(154,125,2)
(93,144,2)
(65,5,2)
(63,124,2)
(11,161,2)
(103,144,2)
(107,144,2)
(71,161,2)
(180,144,2)
(80,144,2)
(52,161,2)
(111,77,2)
(154,90,2)
(68,96,2)
(80,122,2)
(106,167,2)
(139,161,2)
(177,161,2)
(53,161,2)
(7,65,2)
(172,122,2)
(24,144,2)
(126,25,2)
(16,161,2)
(156,26,2)
(81,144,2)
(78,161,2)
(134,96,2)
(182,57,2)
(131,12,2)
(92,144,2)
(61,133,2)
(93,154,2)
(135,124,2)
(13,161,2)
(120,96,2)
(106,144,2)
(128,50,2)
(160,144,2)
(90,144,2)
(22,124,2)
(6,144,2)
(146,96,2)
(49,124,2)
(100,96,2)
(27,161,2)
(157,124,2)
(96,96,2)
(45,125,2)
(45,97,2)
(77,161,2)
(151,96,2)
(123,96,2)
(48,124,2)
(156,96,2)
(102,54,2)
(132,124,2)
(168,161,2)
(138,124,2)
(110,96,2)
(89,30,2)
(56,161,2)
(21,161,2)
(88,144,2)
(4,161,2)
(153,124,2)
(132,82,2)
(147,96,2)
(54,15,2)
(82,69,2)
(116,96,2)
(190,96,2)
(16,133,2)
(152,161,2)
(163,161,2)
(145,144,2)
(42,124,2)
(0,161,2)
(111,133,2)
(32,124,2)
(82,73,2)
(0,61,2)
(89,144,2)
(127,144,2)
(117,124,2)
(20,96,2)
(26,66,2)
(142,161,2)
(14,161,2)
(73,122,2)
(9,144,2)
(85,122,2)
(124,69,2)
(34,124,2)
(118,124,2)
(26,150,2)
(67,122,2)
(61,161,2)
(25,96,2)
(131,161,2)
(140,161,2)
(65,69,2)
-----------------------------------
(0,table->mem_resource[idx].name)
(1,end)
(2,table->mem_resource)
(3,idx)
(4,end)
(5,table->port_resource)
(6,idx++)
(7,table->port_resource[idx].start)
(8,mem_resource)
(9,idx)
(10,for (idx = 0; idx < PNP_MAX_DMA; idx++)
(11,IORESOURCE_AUTO)
(12,table->mem_resource[idx])
(13,table->mem_resource[idx].name = NULL)
(14,PNP_MAX_MEM)
(15,table->port_resource)
(16,idx++)
(17,table->dma_resource[idx])
(18,dma_resource)
(19,idx)
(20,start)
(21,table->mem_resource[idx].flags)
(22,idx)
(23,0)
(24,irq_resource)
(25,table->dma_resource[idx])
(26,table->dma_resource[idx])
(27,table->mem_resource[idx])
(28,idx)
(29,table)
(30,-1)
(31,table->mem_resource[idx].end = 0)
(32,flags)
(33,mem_resource)
(34,NULL)
(35,table->port_resource[idx].start = 0)
(36,irq_resource)
(37,PNP_MAX_DMA)
(38,table->mem_resource)
(39,0)
(40,table->mem_resource[idx].flags = IORESOURCE_AUTO)
(41,)
(42,table)
(43,table)
(44,IORESOURCE_AUTO)
(45,table->irq_resource[idx])
(46,table)
(47,table->dma_resource[idx].start = -1)
(48,0)
(49,name)
(50,table->port_resource[idx])
(51,0)
(52,idx)
(53,idx)
(54,table->port_resource[idx])
(55,flags)
(56,mem_resource)
(57,-1)
(58,idx)
(59,idx)
(60,idx)
(61,table->mem_resource[idx])
(62,table->irq_resource[idx].flags = IORESOURCE_AUTO)
(63,port_resource)
(64,table)
(65,table->port_resource[idx])
(66,table->dma_resource)
(67,table->dma_resource)
(68,table)
(69,idx = 0)
(70,1)
(71,table->mem_resource)
(72,dma_resource)
(73,table->port_resource)
(74,IORESOURCE_AUTO)
(75,table)
(76,)
(77,table->mem_resource)
(78,table->mem_resource[idx].start = 0)
(79,1)
(80,table->irq_resource)
(81,table->irq_resource[idx].name)
(82,table->port_resource[idx])
(83,table->irq_resource[idx].name = NULL)
(84,idx)
(85,table->dma_resource)
(86,table)
(87,idx)
(88,idx)
(89,table->irq_resource[idx].end = -1)
(90,table->irq_resource)
(91,for (idx = 0; idx < PNP_MAX_MEM; idx++)
(92,irq_resource)
(93,table->irq_resource[idx].flags)
(94,NULL)
(95,for (idx = 0; idx < PNP_MAX_PORT; idx++)
(96,idx < PNP_MAX_DMA)
(97,table->irq_resource)
(98,table->dma_resource[idx].start)
(99,table->port_resource[idx].name = NULL)
(100,table->dma_resource[idx].flags = IORESOURCE_AUTO)
(101,idx)
(102,table->port_resource[idx].name)
(103,NULL)
(104,idx)
(105,idx)
(106,table->irq_resource[idx].end)
(107,idx)
(108,-1)
(109,)
(110,table)
(111,table->mem_resource[idx])
(112,)
(113,idx)
(114,table->dma_resource[idx])
(115,idx++)
(116,name)
(117,0)
(118,idx)
(119,0)
(120,IORESOURCE_AUTO)
(121,port_resource)
(122,struct pnp_resource_table *table)
(123,idx)
(124,idx < PNP_MAX_PORT)
(125,idx = 0)
(126,table->dma_resource[idx].flags)
(127,PNP_MAX_IRQ)
(128,table->port_resource[idx].end)
(129,irq_resource)
(130,0)
(131,table->mem_resource[idx].end)
(132,table->port_resource[idx].flags)
(133,idx = 0)
(134,table->dma_resource[idx].name = NULL)
(135,start)
(136,mem_resource)
(137,RET)
(138,port_resource)
(139,table)
(140,table->mem_resource[idx].start)
(141,dma_resource)
(142,flags)
(143,table->port_resource)
(144,idx < PNP_MAX_IRQ)
(145,idx)
(146,table->dma_resource[idx].name)
(147,table->dma_resource[idx].end = -1)
(148,table)
(149,idx)
(150,idx = 0)
(151,NULL)
(152,idx)
(153,idx)
(154,table->irq_resource[idx])
(155,table)
(156,table->dma_resource[idx].end)
(157,table->port_resource[idx].end = 0)
(158,for (idx = 0; idx < PNP_MAX_IRQ; idx++)
(159,table->port_resource[idx].flags = IORESOURCE_AUTO)
(160,end)
(161,idx < PNP_MAX_MEM)
(162,1)
(163,table)
(164,idx)
(165,idx)
(166,start)
(167,table->irq_resource[idx])
(168,start)
(169,-1)
(170,idx)
(171,end)
(172,table->irq_resource)
(173,0)
(174,idx)
(175,dma_resource)
(176,table)
(177,name)
(178,port_resource)
(179,1)
(180,table->irq_resource[idx])
(181,name)
(182,table->irq_resource[idx].start = -1)
(183,table)
(184,flags)
(185,idx++)
(186,)
(187,table)
(188,PNP_MAX_PORT)
(189,table->dma_resource)
(190,idx)
(191,table->irq_resource[idx].start)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^