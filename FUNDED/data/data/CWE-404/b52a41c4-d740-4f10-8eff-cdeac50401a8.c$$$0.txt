-----label-----
1
-----code-----
static int create_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,
				 struct ib_pd *pd,
				 struct ib_qp_init_attr *init_attr,
				 struct ib_udata *udata)
{
	struct ib_uobject *uobj = pd->uobject;
	struct ib_ucontext *ucontext = uobj->context;
	struct mlx5_ib_ucontext *mucontext = to_mucontext(ucontext);
	struct mlx5_ib_create_qp_resp resp = {};
	int inlen;
	int err;
	u32 *in;
	void *tirc;
	void *hfso;
	u32 selected_fields = 0;
	size_t min_resp_len;
	u32 tdn = mucontext->tdn;
	struct mlx5_ib_create_qp_rss ucmd = {};
	size_t required_cmd_sz;

	if (init_attr->qp_type != IB_QPT_RAW_PACKET)
		return -EOPNOTSUPP;

	if (init_attr->create_flags || init_attr->send_cq)
		return -EINVAL;

	min_resp_len = offsetof(typeof(resp), uuar_index) + sizeof(resp.uuar_index);
	if (udata->outlen < min_resp_len)
		return -EINVAL;

	required_cmd_sz = offsetof(typeof(ucmd), reserved1) + sizeof(ucmd.reserved1);
	if (udata->inlen < required_cmd_sz) {
		mlx5_ib_dbg(dev, "invalid inlen\n");
		return -EINVAL;
	}

	if (udata->inlen > sizeof(ucmd) &&
	    !ib_is_udata_cleared(udata, sizeof(ucmd),
				 udata->inlen - sizeof(ucmd))) {
		mlx5_ib_dbg(dev, "inlen is not supported\n");
		return -EOPNOTSUPP;
	}

	if (ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd), udata->inlen))) {
		mlx5_ib_dbg(dev, "copy failed\n");
		return -EFAULT;
	}

	if (ucmd.comp_mask) {
		mlx5_ib_dbg(dev, "invalid comp mask\n");
		return -EOPNOTSUPP;
	}

	if (memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)) || ucmd.reserved1) {
		mlx5_ib_dbg(dev, "invalid reserved\n");
		return -EOPNOTSUPP;
	}

	err = ib_copy_to_udata(udata, &resp, min_resp_len);
	if (err) {
		mlx5_ib_dbg(dev, "copy failed\n");
		return -EINVAL;
	}

	inlen = MLX5_ST_SZ_BYTES(create_tir_in);
	in = mlx5_vzalloc(inlen);
	if (!in)
		return -ENOMEM;

	tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
	MLX5_SET(tirc, tirc, disp_type,
		 MLX5_TIRC_DISP_TYPE_INDIRECT);
	MLX5_SET(tirc, tirc, indirect_table,
		 init_attr->rwq_ind_tbl->ind_tbl_num);
	MLX5_SET(tirc, tirc, transport_domain, tdn);

	hfso = MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer);
	switch (ucmd.rx_hash_function) {
	case MLX5_RX_HASH_FUNC_TOEPLITZ:
	{
		void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);
		size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);

		if (len != ucmd.rx_key_len) {
			err = -EINVAL;
			goto err;
		}

		MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);
		MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);
		memcpy(rss_key, ucmd.rx_hash_key, len);
		break;
	}
	default:
		err = -EOPNOTSUPP;
		goto err;
	}

	if (!ucmd.rx_hash_fields_mask) {
		/* special case when this TIR serves as steering entry without hashing */
		if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)
			goto create_tir;
		err = -EINVAL;
		goto err;
	}

	if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||
	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)) &&
	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||
	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))) {
		err = -EINVAL;
		goto err;
	}

	/* If none of IPV4 & IPV6 SRC/DST was set - this bit field is ignored */
	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||
	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4))
		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,
			 MLX5_L3_PROT_TYPE_IPV4);
	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||
		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))
		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,
			 MLX5_L3_PROT_TYPE_IPV6);

	if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||
	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)) &&
	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||
	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))) {
		err = -EINVAL;
		goto err;
	}

	/* If none of TCP & UDP SRC/DST was set - this bit field is ignored */
	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||
	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP))
		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,
			 MLX5_L4_PROT_TYPE_TCP);
	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||
		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))
		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,
			 MLX5_L4_PROT_TYPE_UDP);

	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||
	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6))
		selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP;

	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4) ||
	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))
		selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP;

	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||
	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP))
		selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT;

	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP) ||
	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))
		selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT;

	MLX5_SET(rx_hash_field_select, hfso, selected_fields, selected_fields);

create_tir:
	err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn);

	if (err)
		goto err;

	kvfree(in);
	/* qpn is reserved for that QP */
	qp->trans_qp.base.mqp.qpn = 0;
	qp->flags |= MLX5_IB_QP_RSS;
	return 0;

err:
	kvfree(in);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
35,46
35,47
35,48
35,49
35,50
35,51
35,52
35,53
35,54
35,55
35,56
35,57
35,58
35,59
35,60
35,61
35,62
35,63
35,64
35,65
35,66
35,67
35,68
35,69
35,70
35,71
35,72
35,73
35,74
35,75
35,76
35,77
35,78
35,79
35,80
35,81
35,82
35,83
35,84
35,85
35,86
35,87
35,88
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
52,53
52,54
52,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
64,67
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
79,80
81,82
82,83
82,84
84,85
86,87
87,88
87,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
98,99
99,100
99,101
101,102
101,103
104,105
105,106
105,107
107,108
107,109
110,111
111,112
111,113
112,113
114,115
114,116
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
128,130
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
139,140
139,141
141,142
143,144
144,145
144,146
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
152,153
155,156
157,158
158,159
159,160
161,162
161,163
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
171,172
172,173
173,174
175,176
176,177
176,178
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
186,187
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
195,196
197,198
197,199
198,199
199,200
199,201
199,202
200,201
202,203
205,206
206,207
207,208
209,210
209,211
210,211
210,212
211,212
211,213
212,213
212,214
213,214
216,217
217,218
218,219
220,221
221,222
221,223
221,224
221,225
222,223
224,225
226,227
227,228
228,229
230,231
230,232
231,232
231,233
232,233
235,236
236,237
237,238
239,240
239,241
240,241
241,242
241,243
241,244
242,243
244,245
247,248
248,249
249,250
251,252
251,253
252,253
252,254
252,255
252,256
253,254
255,256
256,257
258,259
260,261
260,262
260,263
261,262
263,264
264,265
265,266
267,268
267,269
268,269
271,272
271,273
272,273
273,274
273,275
273,276
274,275
276,277
279,280
280,281
281,282
283,284
283,285
284,285
284,286
285,286
288,289
288,290
289,290
290,291
290,292
290,293
291,292
293,294
296,297
297,298
298,299
300,301
300,302
301,302
301,303
302,303
302,304
302,305
302,306
303,304
305,306
305,307
306,307
310,311
311,312
312,313
312,314
313,314
316,317
316,318
317,318
320,321
320,322
321,322
322,323
322,324
322,325
323,324
325,326
328,329
329,330
330,331
332,333
333,334
333,335
334,335
336,337
336,338
336,339
336,340
337,338
339,340
341,342
342,343
344,345
346,347
346,348
347,348
349,350
349,351
350,351
351,352
351,353
351,354
352,353
354,355
357,358
358,359
359,360
361,362
362,363
362,364
363,364
365,366
365,367
366,367
368,369
370,371
371,372
371,373
372,373
374,375
374,376
375,376
377,378
379,380
379,381
380,381
381,382
383,384
384,385
385,386
387,388
388,389
388,390
389,390
391,392
391,393
391,394
391,395
392,393
394,395
396,397
398,399
400,401
401,402
401,403
401,404
401,405
401,406
402,403
404,405
406,407
408,409
410,411
412,413
413,414
413,415
413,416
413,417
413,418
414,415
416,417
418,419
420,421
422,423
422,424
423,424
423,425
424,425
428,429
429,430
429,431
429,432
429,433
429,434
430,431
432,433
434,435
436,437
438,439
440,441
441,442
441,443
442,443
444,445
444,446
444,447
444,448
445,446
447,448
449,450
451,452
453,454
453,455
454,455
454,456
455,456
458,459
458,460
458,461
458,462
458,463
459,460
460,461
462,463
462,464
462,465
462,466
462,467
462,468
462,469
463,464
464,465
464,466
466,467
466,468
466,469
469,470
470,471
470,472
470,473
470,474
471,472
473,474
475,476
477,478
479,480
480,481
480,482
481,482
483,484
483,485
485,486
486,487
486,488
486,489
487,488
489,490
491,492
493,494
493,495
494,495
494,496
495,496
497,498
497,499
498,499
501,502
501,503
502,503
503,504
503,505
504,505
506,507
507,508
509,510
511,512
512,513
512,514
512,515
512,516
512,517
513,514
515,516
517,518
519,520
521,522
523,524
524,525
524,526
524,527
524,528
524,529
525,526
527,528
529,530
531,532
534,535
535,536
535,537
535,538
535,539
536,537
538,539
540,541
540,542
541,542
544,545
548,549
549,550
549,551
550,551
552,553
553,554
555,556
557,558
557,559
558,559
559,560
559,561
560,561
563,564
563,565
563,566
564,565
564,566
565,566
566,567
566,568
567,568
567,569
568,569
572,573
574,575
575,576
575,577
576,577
578,579
579,580
581,582
583,584
583,585
584,585
584,586
585,586
586,587
586,588
587,588
588,589
588,590
589,590
589,591
590,591
593,594
595,596
596,597
596,598
597,598
597,599
598,599
601,602
603,604
604,605
604,606
605,606
606,607
606,608
607,608
607,609
608,609
611,612
613,614
614,615
614,616
615,616
615,617
616,617
619,620
621,622
621,623
622,623
623,624
623,625
624,625
626,627
627,628
629,630
631,632
631,633
631,634
632,633
632,634
633,634
634,635
634,636
635,636
635,637
636,637
639,640
641,642
642,643
642,644
643,644
643,645
644,645
647,648
649,650
650,651
650,652
650,653
650,654
650,655
651,652
653,654
655,656
657,658
659,660
661,662
661,663
662,663
662,664
663,664
664,665
664,666
665,666
665,667
666,667
669,670
671,672
672,673
672,674
673,674
673,675
674,675
677,678
679,680
680,681
680,682
680,683
680,684
680,685
681,682
683,684
685,686
687,688
689,690
691,692
691,693
692,693
692,694
693,694
694,695
694,696
695,696
696,697
696,698
697,698
697,699
698,699
701,702
703,704
704,705
704,706
705,706
705,707
706,707
709,710
711,712
712,713
712,714
713,714
714,715
714,716
715,716
715,717
716,717
719,720
721,722
722,723
722,724
723,724
723,725
724,725
727,728
729,730
729,731
730,731
731,732
731,733
732,733
734,735
735,736
737,738
739,740
739,741
739,742
740,741
740,742
741,742
742,743
742,744
743,744
743,745
744,745
747,748
749,750
750,751
750,752
751,752
751,753
752,753
755,756
757,758
758,759
758,760
758,761
758,762
758,763
759,760
761,762
763,764
765,766
767,768
769,770
769,771
770,771
770,772
771,772
772,773
772,774
773,774
773,775
774,775
777,778
779,780
780,781
780,782
781,782
781,783
782,783
785,786
787,788
788,789
788,790
788,791
788,792
788,793
789,790
791,792
793,794
795,796
797,798
799,800
799,801
800,801
800,802
801,802
802,803
802,804
803,804
803,805
804,805
807,808
809,810
810,811
810,812
811,812
811,813
812,813
815,816
817,818
818,819
818,820
819,820
821,822
823,824
823,825
824,825
824,826
825,826
826,827
826,828
827,828
827,829
828,829
831,832
833,834
834,835
834,836
835,836
835,837
836,837
839,840
841,842
842,843
842,844
843,844
845,846
847,848
847,849
848,849
848,850
849,850
850,851
850,852
851,852
851,853
852,853
855,856
857,858
858,859
858,860
859,860
859,861
860,861
863,864
865,866
866,867
866,868
867,868
869,870
871,872
871,873
872,873
872,874
873,874
874,875
874,876
875,876
875,877
876,877
879,880
881,882
882,883
882,884
883,884
883,885
884,885
887,888
889,890
890,891
890,892
891,892
893,894
895,896
896,897
896,898
896,899
896,900
896,901
897,898
899,900
901,902
903,904
905,906
907,908
907,909
909,910
910,911
910,912
911,912
913,914
913,915
913,916
913,917
913,918
914,915
916,917
916,918
917,918
920,921
922,923
924,925
925,926
925,927
926,927
926,928
927,928
931,932
931,933
932,933
934,935
936,937
937,938
937,939
938,939
940,941
942,943
943,944
943,945
944,945
944,946
945,946
945,947
946,947
946,948
947,948
947,949
948,949
955,956
956,957
956,958
957,958
957,959
958,959
961,962
963,964
965,966
965,967
967,968
968,969
968,970
969,970
971,972
973,974
974,975
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,25,27,28,31,33,34,39,41,42,46,47,51,53,54,58,59,63,65,66,70,72,76,78,80,83,85,88,90,94,96,97,100,102,103,106,108,109,113,115,117,121,123,127,129,133,134,138,140,142,146,148,153,154,156,160,165,166,169,170,174,180,181,183,187,193,194,196,201,203,204,208,214,215,219,223,225,229,233,234,238,243,245,246,250,254,257,259,262,266,269,270,275,277,278,282,286,287,292,294,295,299,304,307,308,309,314,315,318,319,324,326,327,331,335,338,340,343,345,348,353,355,356,360,364,367,369,373,376,378,382,386,390,393,395,397,399,403,405,407,409,411,415,417,419,421,425,426,427,431,433,435,437,439,443,446,448,450,452,456,457,461,465,467,468,472,474,476,478,482,484,488,490,492,496,499,500,505,508,510,514,516,518,520,522,526,528,530,532,533,537,539,542,543,545,546,547,551,554,556,561,562,569,570,571,573,577,580,582,591,592,594,599,600,602,609,610,612,617,618,620,625,628,630,637,638,640,645,646,648,652,654,656,658,660,667,668,670,675,676,678,682,684,686,688,690,699,700,702,707,708,710,717,718,720,725,726,728,733,736,738,745,746,748,753,754,756,760,762,764,766,768,775,776,778,783,784,786,790,792,794,796,798,805,806,808,813,814,816,820,822,829,830,832,837,838,840,844,846,853,854,856,861,862,864,868,870,877,878,880,885,886,888,892,894,898,900,902,904,906,908,912,915,918,919,921,923,928,929,930,933,935,939,941,949,950,951,952,953,954,959,960,962,964,966,970,972,975
-----computeFrom-----
150,151
150,152
162,163
162,164
177,178
177,179
190,191
190,192
210,211
210,212
211,212
211,213
230,231
230,232
301,302
301,303
333,334
333,335
362,363
362,364
371,372
371,373
388,389
388,390
441,442
441,443
494,495
494,496
503,504
503,505
549,550
549,551
575,576
575,577
584,585
584,586
586,587
586,588
588,589
588,590
596,597
596,598
604,605
604,606
606,607
606,608
614,615
614,616
623,624
623,625
632,633
632,634
634,635
634,636
642,643
642,644
662,663
662,664
664,665
664,666
672,673
672,674
692,693
692,694
694,695
694,696
696,697
696,698
704,705
704,706
712,713
712,714
714,715
714,716
722,723
722,724
731,732
731,733
740,741
740,742
742,743
742,744
750,751
750,752
770,771
770,772
772,773
772,774
780,781
780,782
800,801
800,802
802,803
802,804
810,811
810,812
818,819
818,820
824,825
824,826
826,827
826,828
834,835
834,836
842,843
842,844
848,849
848,850
850,851
850,852
858,859
858,860
866,867
866,868
872,873
872,874
874,875
874,876
882,883
882,884
890,891
890,892
910,911
910,912
943,944
943,945
956,957
956,958
-----guardedBy-----
-----guardedByNegation-----
645,675
646,676
753,783
754,784
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int create_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,				 struct ib_pd *pd,				 struct ib_qp_init_attr *init_attr,				 struct ib_udata *udata){	struct ib_uobject *uobj = pd->uobject;	struct ib_ucontext *ucontext = uobj->context;	struct mlx5_ib_ucontext *mucontext = to_mucontext(ucontext);	struct mlx5_ib_create_qp_resp resp = {};	int inlen;	int err;	u32 *in;	void *tirc;	void *hfso;	u32 selected_fields = 0;	size_t min_resp_len;	u32 tdn = mucontext->tdn;	struct mlx5_ib_create_qp_rss ucmd = {};	size_t required_cmd_sz;	if (init_attr->qp_type != IB_QPT_RAW_PACKET)		return -EOPNOTSUPP;	if (init_attr->create_flags || init_attr->send_cq)		return -EINVAL;	min_resp_len = offsetof(typeof(resp), uuar_index) + sizeof(resp.uuar_index);	if (udata->outlen < min_resp_len)		return -EINVAL;	required_cmd_sz = offsetof(typeof(ucmd), reserved1) + sizeof(ucmd.reserved1);	if (udata->inlen < required_cmd_sz) {		mlx5_ib_dbg(dev, "invalid inlen\n");		return -EINVAL;	}	if (udata->inlen > sizeof(ucmd) &&	    !ib_is_udata_cleared(udata, sizeof(ucmd),				 udata->inlen - sizeof(ucmd))) {		mlx5_ib_dbg(dev, "inlen is not supported\n");		return -EOPNOTSUPP;	}	if (ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd), udata->inlen))) {		mlx5_ib_dbg(dev, "copy failed\n");		return -EFAULT;	}	if (ucmd.comp_mask) {		mlx5_ib_dbg(dev, "invalid comp mask\n");		return -EOPNOTSUPP;	}	if (memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)) || ucmd.reserved1) {		mlx5_ib_dbg(dev, "invalid reserved\n");		return -EOPNOTSUPP;	}	err = ib_copy_to_udata(udata, &resp, min_resp_len);	if (err) {		mlx5_ib_dbg(dev, "copy failed\n");		return -EINVAL;	}	inlen = MLX5_ST_SZ_BYTES(create_tir_in);	in = mlx5_vzalloc(inlen);	if (!in)		return -ENOMEM;	tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);	MLX5_SET(tirc, tirc, disp_type,		 MLX5_TIRC_DISP_TYPE_INDIRECT);	MLX5_SET(tirc, tirc, indirect_table,		 init_attr->rwq_ind_tbl->ind_tbl_num);	MLX5_SET(tirc, tirc, transport_domain, tdn);	hfso = MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer);	switch (ucmd.rx_hash_function) {	case MLX5_RX_HASH_FUNC_TOEPLITZ:	{		void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);		size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);		if (len != ucmd.rx_key_len) {			err = -EINVAL;			goto err;		}		MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);		MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);		memcpy(rss_key, ucmd.rx_hash_key, len);		break;	}	default:		err = -EOPNOTSUPP;		goto err;	}	if (!ucmd.rx_hash_fields_mask) {		/* special case when this TIR serves as steering entry without hashing */		if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)			goto create_tir;		err = -EINVAL;		goto err;	}	if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))) {		err = -EINVAL;		goto err;	}	/* If none of IPV4 & IPV6 SRC/DST was set - this bit field is ignored */	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV4);	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV6);	if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))) {		err = -EINVAL;		goto err;	}	/* If none of TCP & UDP SRC/DST was set - this bit field is ignored */	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_TCP);	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_UDP);	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6))		selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP;	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP;	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP))		selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT;	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT;	MLX5_SET(rx_hash_field_select, hfso, selected_fields, selected_fields);create_tir:	err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn);	if (err)		goto err;	kvfree(in);	/* qpn is reserved for that QP */	qp->trans_qp.base.mqp.qpn = 0;	qp->flags |= MLX5_IB_QP_RSS;	return 0;err:	kvfree(in);	return err;}
static int
create_rss_raw_qp_tir(struct mlx5_ib_dev *dev, struct mlx5_ib_qp *qp,				 struct ib_pd *pd,				 struct ib_qp_init_attr *init_attr,				 struct ib_udata *udata)
create_rss_raw_qp_tir
struct mlx5_ib_dev *dev
struct mlx5_ib_dev
mlx5_ib_dev
*dev
*
dev
struct mlx5_ib_qp *qp
struct mlx5_ib_qp
mlx5_ib_qp
*qp
*
qp
struct ib_pd *pd
struct ib_pd
ib_pd
*pd
*
pd
struct ib_qp_init_attr *init_attr
struct ib_qp_init_attr
ib_qp_init_attr
*init_attr
*
init_attr
struct ib_udata *udata
struct ib_udata
ib_udata
*udata
*
udata
{	struct ib_uobject *uobj = pd->uobject;	struct ib_ucontext *ucontext = uobj->context;	struct mlx5_ib_ucontext *mucontext = to_mucontext(ucontext);	struct mlx5_ib_create_qp_resp resp = {};	int inlen;	int err;	u32 *in;	void *tirc;	void *hfso;	u32 selected_fields = 0;	size_t min_resp_len;	u32 tdn = mucontext->tdn;	struct mlx5_ib_create_qp_rss ucmd = {};	size_t required_cmd_sz;	if (init_attr->qp_type != IB_QPT_RAW_PACKET)		return -EOPNOTSUPP;	if (init_attr->create_flags || init_attr->send_cq)		return -EINVAL;	min_resp_len = offsetof(typeof(resp), uuar_index) + sizeof(resp.uuar_index);	if (udata->outlen < min_resp_len)		return -EINVAL;	required_cmd_sz = offsetof(typeof(ucmd), reserved1) + sizeof(ucmd.reserved1);	if (udata->inlen < required_cmd_sz) {		mlx5_ib_dbg(dev, "invalid inlen\n");		return -EINVAL;	}	if (udata->inlen > sizeof(ucmd) &&	    !ib_is_udata_cleared(udata, sizeof(ucmd),				 udata->inlen - sizeof(ucmd))) {		mlx5_ib_dbg(dev, "inlen is not supported\n");		return -EOPNOTSUPP;	}	if (ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd), udata->inlen))) {		mlx5_ib_dbg(dev, "copy failed\n");		return -EFAULT;	}	if (ucmd.comp_mask) {		mlx5_ib_dbg(dev, "invalid comp mask\n");		return -EOPNOTSUPP;	}	if (memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)) || ucmd.reserved1) {		mlx5_ib_dbg(dev, "invalid reserved\n");		return -EOPNOTSUPP;	}	err = ib_copy_to_udata(udata, &resp, min_resp_len);	if (err) {		mlx5_ib_dbg(dev, "copy failed\n");		return -EINVAL;	}	inlen = MLX5_ST_SZ_BYTES(create_tir_in);	in = mlx5_vzalloc(inlen);	if (!in)		return -ENOMEM;	tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);	MLX5_SET(tirc, tirc, disp_type,		 MLX5_TIRC_DISP_TYPE_INDIRECT);	MLX5_SET(tirc, tirc, indirect_table,		 init_attr->rwq_ind_tbl->ind_tbl_num);	MLX5_SET(tirc, tirc, transport_domain, tdn);	hfso = MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer);	switch (ucmd.rx_hash_function) {	case MLX5_RX_HASH_FUNC_TOEPLITZ:	{		void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);		size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);		if (len != ucmd.rx_key_len) {			err = -EINVAL;			goto err;		}		MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);		MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);		memcpy(rss_key, ucmd.rx_hash_key, len);		break;	}	default:		err = -EOPNOTSUPP;		goto err;	}	if (!ucmd.rx_hash_fields_mask) {		/* special case when this TIR serves as steering entry without hashing */		if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)			goto create_tir;		err = -EINVAL;		goto err;	}	if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))) {		err = -EINVAL;		goto err;	}	/* If none of IPV4 & IPV6 SRC/DST was set - this bit field is ignored */	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV4);	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV6);	if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))) {		err = -EINVAL;		goto err;	}	/* If none of TCP & UDP SRC/DST was set - this bit field is ignored */	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_TCP);	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_UDP);	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6))		selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP;	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP;	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP))		selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT;	if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT;	MLX5_SET(rx_hash_field_select, hfso, selected_fields, selected_fields);create_tir:	err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn);	if (err)		goto err;	kvfree(in);	/* qpn is reserved for that QP */	qp->trans_qp.base.mqp.qpn = 0;	qp->flags |= MLX5_IB_QP_RSS;	return 0;err:	kvfree(in);	return err;}
struct ib_uobject *uobj = pd->uobject;
struct ib_uobject *uobj = pd->uobject;
struct ib_uobject
ib_uobject
*uobj = pd->uobject
*
uobj
= pd->uobject
pd->uobject
pd
pd
uobject
struct ib_ucontext *ucontext = uobj->context;
struct ib_ucontext *ucontext = uobj->context;
struct ib_ucontext
ib_ucontext
*ucontext = uobj->context
*
ucontext
= uobj->context
uobj->context
uobj
uobj
context
struct mlx5_ib_ucontext *mucontext = to_mucontext(ucontext);
struct mlx5_ib_ucontext *mucontext = to_mucontext(ucontext);
struct mlx5_ib_ucontext
mlx5_ib_ucontext
*mucontext = to_mucontext(ucontext)
*
mucontext
= to_mucontext(ucontext)
to_mucontext(ucontext)
to_mucontext
to_mucontext
ucontext
ucontext
struct mlx5_ib_create_qp_resp resp = {};
struct mlx5_ib_create_qp_resp resp = {};
struct mlx5_ib_create_qp_resp
mlx5_ib_create_qp_resp
resp = {}
resp
= {}
{}
int inlen;
int inlen;
int
inlen
inlen
int err;
int err;
int
err
err
u32 *in;
u32 *in;
u32
u32
*in
*
in
void *tirc;
void *tirc;
void
*tirc
*
tirc
void *hfso;
void *hfso;
void
*hfso
*
hfso
u32 selected_fields = 0;
u32 selected_fields = 0;
u32
u32
selected_fields = 0
selected_fields
= 0
0
size_t min_resp_len;
size_t min_resp_len;
size_t
size_t
min_resp_len
min_resp_len
u32 tdn = mucontext->tdn;
u32 tdn = mucontext->tdn;
u32
u32
tdn = mucontext->tdn
tdn
= mucontext->tdn
mucontext->tdn
mucontext
mucontext
tdn
struct mlx5_ib_create_qp_rss ucmd = {};
struct mlx5_ib_create_qp_rss ucmd = {};
struct mlx5_ib_create_qp_rss
mlx5_ib_create_qp_rss
ucmd = {}
ucmd
= {}
{}
size_t required_cmd_sz;
size_t required_cmd_sz;
size_t
size_t
required_cmd_sz
required_cmd_sz
if (init_attr->qp_type != IB_QPT_RAW_PACKET)		return -EOPNOTSUPP;
init_attr->qp_type != IB_QPT_RAW_PACKET
init_attr->qp_type
init_attr
init_attr
qp_type
IB_QPT_RAW_PACKET
IB_QPT_RAW_PACKET
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
if (init_attr->create_flags || init_attr->send_cq)		return -EINVAL;
init_attr->create_flags || init_attr->send_cq
init_attr->create_flags
init_attr
init_attr
create_flags
init_attr->send_cq
init_attr
init_attr
send_cq
return -EINVAL;
-EINVAL
EINVAL
EINVAL
min_resp_len = offsetof(typeof(resp), uuar_index) + sizeof(resp.uuar_index);
if (udata->outlen < min_resp_len)		return -EINVAL;
udata->outlen < min_resp_len
udata->outlen
udata
udata
outlen
min_resp_len
min_resp_len
return -EINVAL;
-EINVAL
EINVAL
EINVAL
required_cmd_sz = offsetof(typeof(ucmd), reserved1) + sizeof(ucmd.reserved1);
if (udata->inlen < required_cmd_sz) {		mlx5_ib_dbg(dev, "invalid inlen\n");		return -EINVAL;	}
udata->inlen < required_cmd_sz
udata->inlen
udata
udata
inlen
required_cmd_sz
required_cmd_sz
{		mlx5_ib_dbg(dev, "invalid inlen\n");		return -EINVAL;	}
mlx5_ib_dbg(dev, "invalid inlen\n");
mlx5_ib_dbg(dev, "invalid inlen\n")
mlx5_ib_dbg
mlx5_ib_dbg
dev
dev
"invalid inlen\n"
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (udata->inlen > sizeof(ucmd) &&	    !ib_is_udata_cleared(udata, sizeof(ucmd),				 udata->inlen - sizeof(ucmd))) {		mlx5_ib_dbg(dev, "inlen is not supported\n");		return -EOPNOTSUPP;	}
udata->inlen > sizeof(ucmd) &&	    !ib_is_udata_cleared(udata, sizeof(ucmd),				 udata->inlen - sizeof(ucmd))
udata->inlen > sizeof(ucmd)
udata->inlen
udata
udata
inlen
sizeof(ucmd)
(ucmd)
ucmd
ucmd
!ib_is_udata_cleared(udata, sizeof(ucmd),				 udata->inlen - sizeof(ucmd))
ib_is_udata_cleared(udata, sizeof(ucmd),				 udata->inlen - sizeof(ucmd))
ib_is_udata_cleared
ib_is_udata_cleared
udata
udata
sizeof(ucmd)
(ucmd)
ucmd
ucmd
udata->inlen - sizeof(ucmd)
udata->inlen
udata
udata
inlen
sizeof(ucmd)
(ucmd)
ucmd
ucmd
{		mlx5_ib_dbg(dev, "inlen is not supported\n");		return -EOPNOTSUPP;	}
mlx5_ib_dbg(dev, "inlen is not supported\n");
mlx5_ib_dbg(dev, "inlen is not supported\n")
mlx5_ib_dbg
mlx5_ib_dbg
dev
dev
"inlen is not supported\n"
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
if (ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd), udata->inlen))) {		mlx5_ib_dbg(dev, "copy failed\n");		return -EFAULT;	}
ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd), udata->inlen))
ib_copy_from_udata
ib_copy_from_udata
&ucmd
ucmd
ucmd
udata
udata
min(sizeof(ucmd), udata->inlen)
min
min
sizeof(ucmd)
(ucmd)
ucmd
ucmd
udata->inlen
udata
udata
inlen
{		mlx5_ib_dbg(dev, "copy failed\n");		return -EFAULT;	}
mlx5_ib_dbg(dev, "copy failed\n");
mlx5_ib_dbg(dev, "copy failed\n")
mlx5_ib_dbg
mlx5_ib_dbg
dev
dev
"copy failed\n"
return -EFAULT;
-EFAULT
EFAULT
EFAULT
if (ucmd.comp_mask) {		mlx5_ib_dbg(dev, "invalid comp mask\n");		return -EOPNOTSUPP;	}
ucmd.comp_mask
ucmd
ucmd
comp_mask
{		mlx5_ib_dbg(dev, "invalid comp mask\n");		return -EOPNOTSUPP;	}
mlx5_ib_dbg(dev, "invalid comp mask\n");
mlx5_ib_dbg(dev, "invalid comp mask\n")
mlx5_ib_dbg
mlx5_ib_dbg
dev
dev
"invalid comp mask\n"
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
if (memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)) || ucmd.reserved1) {		mlx5_ib_dbg(dev, "invalid reserved\n");		return -EOPNOTSUPP;	}
memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)) || ucmd.reserved1
memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved))
memchr_inv
memchr_inv
ucmd.reserved
ucmd
ucmd
reserved
0
sizeof(ucmd.reserved)
(ucmd.reserved)
ucmd.reserved
ucmd
ucmd
reserved
ucmd.reserved1
ucmd
ucmd
reserved1
{		mlx5_ib_dbg(dev, "invalid reserved\n");		return -EOPNOTSUPP;	}
mlx5_ib_dbg(dev, "invalid reserved\n");
mlx5_ib_dbg(dev, "invalid reserved\n")
mlx5_ib_dbg
mlx5_ib_dbg
dev
dev
"invalid reserved\n"
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
err = ib_copy_to_udata(udata, &resp, min_resp_len);
err = ib_copy_to_udata(udata, &resp, min_resp_len)
err
err
ib_copy_to_udata(udata, &resp, min_resp_len)
ib_copy_to_udata
ib_copy_to_udata
udata
udata
&resp
resp
resp
min_resp_len
min_resp_len
if (err) {		mlx5_ib_dbg(dev, "copy failed\n");		return -EINVAL;	}
err
err
{		mlx5_ib_dbg(dev, "copy failed\n");		return -EINVAL;	}
mlx5_ib_dbg(dev, "copy failed\n");
mlx5_ib_dbg(dev, "copy failed\n")
mlx5_ib_dbg
mlx5_ib_dbg
dev
dev
"copy failed\n"
return -EINVAL;
-EINVAL
EINVAL
EINVAL
inlen = MLX5_ST_SZ_BYTES(create_tir_in);
inlen = MLX5_ST_SZ_BYTES(create_tir_in)
inlen
inlen
MLX5_ST_SZ_BYTES(create_tir_in)
MLX5_ST_SZ_BYTES
MLX5_ST_SZ_BYTES
create_tir_in
create_tir_in
in = mlx5_vzalloc(inlen);
in = mlx5_vzalloc(inlen)
in
in
mlx5_vzalloc(inlen)
mlx5_vzalloc
mlx5_vzalloc
inlen
inlen
if (!in)		return -ENOMEM;
!in
in
in
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
tirc = MLX5_ADDR_OF(create_tir_in, in, ctx);
tirc = MLX5_ADDR_OF(create_tir_in, in, ctx)
tirc
tirc
MLX5_ADDR_OF(create_tir_in, in, ctx)
MLX5_ADDR_OF
MLX5_ADDR_OF
create_tir_in
create_tir_in
in
in
ctx
ctx
MLX5_SET(tirc, tirc, disp_type,		 MLX5_TIRC_DISP_TYPE_INDIRECT);
MLX5_SET(tirc, tirc, disp_type,		 MLX5_TIRC_DISP_TYPE_INDIRECT)
MLX5_SET
MLX5_SET
tirc
tirc
tirc
tirc
disp_type
disp_type
MLX5_TIRC_DISP_TYPE_INDIRECT
MLX5_TIRC_DISP_TYPE_INDIRECT
MLX5_SET(tirc, tirc, indirect_table,		 init_attr->rwq_ind_tbl->ind_tbl_num);
MLX5_SET(tirc, tirc, indirect_table,		 init_attr->rwq_ind_tbl->ind_tbl_num)
MLX5_SET
MLX5_SET
tirc
tirc
tirc
tirc
indirect_table
indirect_table
init_attr->rwq_ind_tbl->ind_tbl_num
init_attr->rwq_ind_tbl
init_attr
init_attr
rwq_ind_tbl
ind_tbl_num
MLX5_SET(tirc, tirc, transport_domain, tdn);
MLX5_SET(tirc, tirc, transport_domain, tdn)
MLX5_SET
MLX5_SET
tirc
tirc
tirc
tirc
transport_domain
transport_domain
tdn
tdn
hfso = MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer);
hfso = MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer)
hfso
hfso
MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer)
MLX5_ADDR_OF
MLX5_ADDR_OF
tirc
tirc
tirc
tirc
rx_hash_field_selector_outer
rx_hash_field_selector_outer
switch (ucmd.rx_hash_function) {	case MLX5_RX_HASH_FUNC_TOEPLITZ:	{		void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);		size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);		if (len != ucmd.rx_key_len) {			err = -EINVAL;			goto err;		}		MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);		MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);		memcpy(rss_key, ucmd.rx_hash_key, len);		break;	}	default:		err = -EOPNOTSUPP;		goto err;	}
ucmd.rx_hash_function
ucmd
ucmd
rx_hash_function
{	case MLX5_RX_HASH_FUNC_TOEPLITZ:	{		void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);		size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);		if (len != ucmd.rx_key_len) {			err = -EINVAL;			goto err;		}		MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);		MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);		memcpy(rss_key, ucmd.rx_hash_key, len);		break;	}	default:		err = -EOPNOTSUPP;		goto err;	}
case MLX5_RX_HASH_FUNC_TOEPLITZ:
MLX5_RX_HASH_FUNC_TOEPLITZ
MLX5_RX_HASH_FUNC_TOEPLITZ
{		void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);		size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);		if (len != ucmd.rx_key_len) {			err = -EINVAL;			goto err;		}		MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);		MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);		memcpy(rss_key, ucmd.rx_hash_key, len);		break;	}
void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);
void *rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key);
void
*rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key)
*
rss_key
= MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key)
MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key)
MLX5_ADDR_OF
MLX5_ADDR_OF
tirc
tirc
tirc
tirc
rx_hash_toeplitz_key
rx_hash_toeplitz_key
size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);
size_t len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key);
size_t
size_t
len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key)
len
= MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key)
MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key)
MLX5_FLD_SZ_BYTES
MLX5_FLD_SZ_BYTES
tirc
tirc
rx_hash_toeplitz_key
rx_hash_toeplitz_key
if (len != ucmd.rx_key_len) {			err = -EINVAL;			goto err;		}
len != ucmd.rx_key_len
len
len
ucmd.rx_key_len
ucmd
ucmd
rx_key_len
{			err = -EINVAL;			goto err;		}
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ);
MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ)
MLX5_SET
MLX5_SET
tirc
tirc
tirc
tirc
rx_hash_fn
rx_hash_fn
MLX5_RX_HASH_FN_TOEPLITZ
MLX5_RX_HASH_FN_TOEPLITZ
MLX5_SET(tirc, tirc, rx_hash_symmetric, 1);
MLX5_SET(tirc, tirc, rx_hash_symmetric, 1)
MLX5_SET
MLX5_SET
tirc
tirc
tirc
tirc
rx_hash_symmetric
rx_hash_symmetric
1
memcpy(rss_key, ucmd.rx_hash_key, len);
memcpy(rss_key, ucmd.rx_hash_key, len)
memcpy
memcpy
rss_key
rss_key
ucmd.rx_hash_key
ucmd
ucmd
rx_hash_key
len
len
break;
default:
err = -EOPNOTSUPP;
err = -EOPNOTSUPP
err
err
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
goto err;
err
if (!ucmd.rx_hash_fields_mask) {		/* special case when this TIR serves as steering entry without hashing */		if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)			goto create_tir;		err = -EINVAL;		goto err;	}
!ucmd.rx_hash_fields_mask
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
{		/* special case when this TIR serves as steering entry without hashing */		if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)			goto create_tir;		err = -EINVAL;		goto err;	}
if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)			goto create_tir;
!init_attr->rwq_ind_tbl->log_ind_tbl_size
init_attr->rwq_ind_tbl->log_ind_tbl_size
init_attr->rwq_ind_tbl
init_attr
init_attr
rwq_ind_tbl
log_ind_tbl_size
goto create_tir;
create_tir
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))) {		err = -EINVAL;		goto err;	}
((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))
((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4))
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_IPV4
MLX5_RX_HASH_SRC_IPV4
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_IPV4
MLX5_RX_HASH_DST_IPV4
((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_IPV6
MLX5_RX_HASH_SRC_IPV6
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_IPV6
MLX5_RX_HASH_DST_IPV6
{		err = -EINVAL;		goto err;	}
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV4);	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV6);
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_IPV4
MLX5_RX_HASH_SRC_IPV4
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_IPV4
MLX5_RX_HASH_DST_IPV4
MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV4);
MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV4)
MLX5_SET
MLX5_SET
rx_hash_field_select
rx_hash_field_select
hfso
hfso
l3_prot_type
l3_prot_type
MLX5_L3_PROT_TYPE_IPV4
MLX5_L3_PROT_TYPE_IPV4
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV6);
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_IPV6
MLX5_RX_HASH_SRC_IPV6
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_IPV6
MLX5_RX_HASH_DST_IPV6
MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV6);
MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,			 MLX5_L3_PROT_TYPE_IPV6)
MLX5_SET
MLX5_SET
rx_hash_field_select
rx_hash_field_select
hfso
hfso
l3_prot_type
l3_prot_type
MLX5_L3_PROT_TYPE_IPV6
MLX5_L3_PROT_TYPE_IPV6
if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))) {		err = -EINVAL;		goto err;	}
((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)) &&	     ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))
((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP))
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_PORT_TCP
MLX5_RX_HASH_SRC_PORT_TCP
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_PORT_TCP
MLX5_RX_HASH_DST_PORT_TCP
((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||	     (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_PORT_UDP
MLX5_RX_HASH_SRC_PORT_UDP
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_PORT_UDP
MLX5_RX_HASH_DST_PORT_UDP
{		err = -EINVAL;		goto err;	}
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
goto err;
err
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_TCP);	else if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_UDP);
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_PORT_TCP
MLX5_RX_HASH_SRC_PORT_TCP
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_PORT_TCP
MLX5_RX_HASH_DST_PORT_TCP
MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_TCP);
MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_TCP)
MLX5_SET
MLX5_SET
rx_hash_field_select
rx_hash_field_select
hfso
hfso
l4_prot_type
l4_prot_type
MLX5_L4_PROT_TYPE_TCP
MLX5_L4_PROT_TYPE_TCP
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_UDP);
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP) ||		 (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_PORT_UDP
MLX5_RX_HASH_SRC_PORT_UDP
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_PORT_UDP
MLX5_RX_HASH_DST_PORT_UDP
MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_UDP);
MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,			 MLX5_L4_PROT_TYPE_UDP)
MLX5_SET
MLX5_SET
rx_hash_field_select
rx_hash_field_select
hfso
hfso
l4_prot_type
l4_prot_type
MLX5_L4_PROT_TYPE_UDP
MLX5_L4_PROT_TYPE_UDP
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6))		selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP;
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_IPV4
MLX5_RX_HASH_SRC_IPV4
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_IPV6
MLX5_RX_HASH_SRC_IPV6
selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP;
selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP
selected_fields
selected_fields
MLX5_HASH_FIELD_SEL_SRC_IP
MLX5_HASH_FIELD_SEL_SRC_IP
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6))		selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP;
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_IPV4
MLX5_RX_HASH_DST_IPV4
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_IPV6
MLX5_RX_HASH_DST_IPV6
selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP;
selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP
selected_fields
selected_fields
MLX5_HASH_FIELD_SEL_DST_IP
MLX5_HASH_FIELD_SEL_DST_IP
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP))		selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT;
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_PORT_TCP
MLX5_RX_HASH_SRC_PORT_TCP
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_SRC_PORT_UDP
MLX5_RX_HASH_SRC_PORT_UDP
selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT;
selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT
selected_fields
selected_fields
MLX5_HASH_FIELD_SEL_L4_SPORT
MLX5_HASH_FIELD_SEL_L4_SPORT
if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP))		selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT;
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP) ||	    (ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_PORT_TCP
MLX5_RX_HASH_DST_PORT_TCP
(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP
ucmd.rx_hash_fields_mask
ucmd
ucmd
rx_hash_fields_mask
MLX5_RX_HASH_DST_PORT_UDP
MLX5_RX_HASH_DST_PORT_UDP
selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT;
selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT
selected_fields
selected_fields
MLX5_HASH_FIELD_SEL_L4_DPORT
MLX5_HASH_FIELD_SEL_L4_DPORT
MLX5_SET(rx_hash_field_select, hfso, selected_fields, selected_fields);
MLX5_SET(rx_hash_field_select, hfso, selected_fields, selected_fields)
MLX5_SET
MLX5_SET
rx_hash_field_select
rx_hash_field_select
hfso
hfso
selected_fields
selected_fields
selected_fields
selected_fields
create_tir:	err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn);
create_tir
err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn);
err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn)
err
err
mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn)
mlx5_core_create_tir
mlx5_core_create_tir
dev->mdev
dev
dev
mdev
in
in
inlen
inlen
&qp->rss_qp.tirn
qp->rss_qp.tirn
qp->rss_qp
qp
qp
rss_qp
tirn
if (err)		goto err;
err
err
goto err;
err
kvfree(in);
kvfree(in)
kvfree
kvfree
in
in
qp->trans_qp.base.mqp.qpn = 0;
qp->trans_qp.base.mqp.qpn = 0
qp->trans_qp.base.mqp.qpn
qp->trans_qp.base.mqp
qp->trans_qp.base
qp->trans_qp
qp
qp
trans_qp
base
mqp
qpn
0
qp->flags |= MLX5_IB_QP_RSS;
qp->flags |= MLX5_IB_QP_RSS
qp->flags
qp
qp
flags
MLX5_IB_QP_RSS
MLX5_IB_QP_RSS
return 0;
0
err:	kvfree(in);
err
kvfree(in);
kvfree(in)
kvfree
kvfree
in
in
return err;
err
err
-----joern-----
(297,464,0)
(535,0,0)
(313,19,0)
(460,377,0)
(93,27,0)
(49,276,0)
(60,145,0)
(465,428,0)
(202,264,0)
(389,124,0)
(85,347,0)
(168,215,0)
(283,178,0)
(290,395,0)
(344,354,0)
(542,265,0)
(214,435,0)
(253,409,0)
(220,143,0)
(287,402,0)
(96,369,0)
(427,4,0)
(188,4,0)
(24,457,0)
(147,155,0)
(40,435,0)
(3,30,0)
(26,214,0)
(413,40,0)
(298,340,0)
(442,343,0)
(177,378,0)
(107,36,0)
(320,328,0)
(335,132,0)
(381,377,0)
(92,316,0)
(459,344,0)
(276,94,0)
(393,513,0)
(329,400,0)
(22,519,0)
(401,292,0)
(203,272,0)
(253,241,0)
(135,10,0)
(365,216,0)
(226,179,0)
(146,301,0)
(50,456,0)
(285,213,0)
(398,400,0)
(375,377,0)
(93,88,0)
(426,383,0)
(92,382,0)
(159,377,0)
(402,103,0)
(379,377,0)
(50,358,0)
(342,243,0)
(227,67,0)
(519,104,0)
(428,506,0)
(400,351,0)
(315,390,0)
(108,245,0)
(9,537,0)
(538,428,0)
(155,273,0)
(545,494,0)
(194,369,0)
(30,3,0)
(356,347,0)
(19,270,0)
(383,426,0)
(256,325,0)
(521,203,0)
(360,454,0)
(273,377,0)
(422,377,0)
(65,450,0)
(409,88,0)
(466,432,0)
(460,230,0)
(198,365,0)
(499,104,0)
(386,267,0)
(123,377,0)
(110,178,0)
(206,310,0)
(237,302,0)
(179,226,0)
(409,253,0)
(494,10,0)
(184,388,0)
(542,429,0)
(312,104,0)
(476,145,0)
(489,377,0)
(242,232,0)
(173,435,0)
(547,273,0)
(395,290,0)
(247,425,0)
(173,495,0)
(426,115,0)
(176,172,0)
(198,85,0)
(52,280,0)
(307,59,0)
(107,104,0)
(531,377,0)
(323,383,0)
(110,377,0)
(188,206,0)
(173,270,0)
(293,128,0)
(370,377,0)
(265,71,0)
(498,302,0)
(33,273,0)
(301,146,0)
(85,415,0)
(346,377,0)
(383,377,0)
(120,100,0)
(468,456,0)
(190,343,0)
(362,167,0)
(327,457,0)
(213,104,0)
(543,381,0)
(447,511,0)
(440,425,0)
(453,115,0)
(245,8,0)
(12,534,0)
(198,8,0)
(164,377,0)
(368,443,0)
(371,477,0)
(435,325,0)
(350,470,0)
(291,377,0)
(366,15,0)
(369,194,0)
(76,190,0)
(466,525,0)
(147,104,0)
(128,293,0)
(90,259,0)
(73,377,0)
(420,232,0)
(397,120,0)
(391,312,0)
(6,377,0)
(296,430,0)
(499,438,0)
(318,278,0)
(494,223,0)
(333,244,0)
(488,383,0)
(469,519,0)
(195,172,0)
(446,276,0)
(331,343,0)
(59,388,0)
(348,486,0)
(376,14,0)
(292,438,0)
(12,243,0)
(513,393,0)
(274,474,0)
(415,377,0)
(217,316,0)
(228,61,0)
(530,194,0)
(215,476,0)
(236,268,0)
(500,168,0)
(145,60,0)
(141,230,0)
(71,265,0)
(198,21,0)
(265,546,0)
(15,352,0)
(46,337,0)
(37,226,0)
(276,367,0)
(234,382,0)
(457,327,0)
(199,460,0)
(17,19,0)
(475,167,0)
(204,133,0)
(200,377,0)
(75,426,0)
(495,377,0)
(171,455,0)
(239,102,0)
(462,232,0)
(222,93,0)
(445,340,0)
(124,432,0)
(76,343,0)
(342,142,0)
(491,267,0)
(210,147,0)
(160,463,0)
(162,173,0)
(525,466,0)
(240,348,0)
(263,270,0)
(506,428,0)
(430,377,0)
(267,491,0)
(213,47,0)
(150,323,0)
(78,261,0)
(421,179,0)
(517,147,0)
(142,189,0)
(271,278,0)
(8,47,0)
(429,351,0)
(419,287,0)
(42,396,0)
(396,390,0)
(349,268,0)
(487,109,0)
(280,52,0)
(206,138,0)
(319,258,0)
(132,383,0)
(115,452,0)
(272,203,0)
(358,367,0)
(223,494,0)
(252,415,0)
(196,223,0)
(206,188,0)
(317,409,0)
(550,377,0)
(208,445,0)
(354,186,0)
(464,429,0)
(137,128,0)
(299,199,0)
(380,383,0)
(486,377,0)
(122,377,0)
(293,3,0)
(219,377,0)
(390,396,0)
(310,88,0)
(241,27,0)
(17,97,0)
(311,502,0)
(486,348,0)
(264,316,0)
(161,426,0)
(111,173,0)
(76,394,0)
(146,88,0)
(536,76,0)
(58,522,0)
(403,40,0)
(133,27,0)
(248,15,0)
(229,107,0)
(546,143,0)
(408,20,0)
(199,383,0)
(207,261,0)
(67,534,0)
(482,432,0)
(324,381,0)
(173,17,0)
(507,525,0)
(534,67,0)
(101,354,0)
(512,163,0)
(433,82,0)
(155,103,0)
(146,110,0)
(240,7,0)
(85,100,0)
(275,534,0)
(238,63,0)
(230,550,0)
(443,36,0)
(268,367,0)
(98,511,0)
(533,214,0)
(19,495,0)
(416,358,0)
(230,460,0)
(328,156,0)
(381,543,0)
(155,415,0)
(434,495,0)
(70,7,0)
(27,241,0)
(385,40,0)
(41,100,0)
(17,270,0)
(115,377,0)
(414,425,0)
(198,309,0)
(513,88,0)
(16,109,0)
(310,206,0)
(463,160,0)
(34,426,0)
(72,289,0)
(351,429,0)
(100,20,0)
(166,84,0)
(145,476,0)
(76,536,0)
(84,458,0)
(102,21,0)
(323,190,0)
(456,367,0)
(274,409,0)
(355,377,0)
(85,377,0)
(10,377,0)
(496,244,0)
(61,228,0)
(300,325,0)
(3,333,0)
(505,124,0)
(259,525,0)
(529,297,0)
(534,12,0)
(0,494,0)
(153,52,0)
(103,155,0)
(464,297,0)
(98,12,0)
(388,470,0)
(15,104,0)
(373,535,0)
(178,283,0)
(45,395,0)
(549,244,0)
(113,238,0)
(63,327,0)
(175,497,0)
(121,145,0)
(332,67,0)
(1,214,0)
(380,343,0)
(394,258,0)
(358,50,0)
(0,377,0)
(29,249,0)
(155,147,0)
(180,380,0)
(209,127,0)
(287,441,0)
(188,88,0)
(316,264,0)
(274,249,0)
(524,128,0)
(2,60,0)
(190,323,0)
(246,113,0)
(169,61,0)
(205,71,0)
(333,3,0)
(481,155,0)
(479,377,0)
(402,287,0)
(44,499,0)
(327,63,0)
(337,302,0)
(153,506,0)
(284,377,0)
(82,377,0)
(472,160,0)
(409,492,0)
(85,537,0)
(452,273,0)
(548,393,0)
(173,97,0)
(85,463,0)
(282,199,0)
(182,155,0)
(27,93,0)
(306,38,0)
(289,115,0)
(152,112,0)
(509,199,0)
(351,400,0)
(502,381,0)
(86,261,0)
(281,109,0)
(467,377,0)
(476,215,0)
(192,358,0)
(235,347,0)
(12,98,0)
(32,171,0)
(95,280,0)
(485,464,0)
(388,59,0)
(305,495,0)
(540,535,0)
(537,56,0)
(149,85,0)
(337,377,0)
(251,114,0)
(357,93,0)
(451,280,0)
(140,33,0)
(294,82,0)
(439,340,0)
(199,377,0)
(262,310,0)
(295,377,0)
(458,84,0)
(142,342,0)
(444,315,0)
(112,382,0)
(519,87,0)
(186,354,0)
(515,132,0)
(364,30,0)
(173,19,0)
(458,290,0)
(14,115,0)
(198,114,0)
(119,20,0)
(325,383,0)
(493,494,0)
(146,430,0)
(170,343,0)
(201,267,0)
(132,377,0)
(241,253,0)
(302,337,0)
(232,383,0)
(471,173,0)
(82,236,0)
(193,258,0)
(4,188,0)
(326,351,0)
(178,110,0)
(55,377,0)
(181,136,0)
(5,550,0)
(411,214,0)
(38,309,0)
(340,445,0)
(477,71,0)
(312,216,0)
(372,203,0)
(77,230,0)
(314,463,0)
(290,458,0)
(35,543,0)
(266,97,0)
(118,270,0)
(322,343,0)
(539,328,0)
(7,240,0)
(338,368,0)
(387,297,0)
(502,550,0)
(473,17,0)
(527,132,0)
(347,454,0)
(492,409,0)
(131,0,0)
(11,377,0)
(497,283,0)
(503,513,0)
(526,377,0)
(269,377,0)
(520,323,0)
(143,546,0)
(432,466,0)
(221,492,0)
(278,395,0)
(334,259,0)
(198,127,0)
(541,377,0)
(493,377,0)
(448,97,0)
(156,328,0)
(64,251,0)
(154,377,0)
(315,522,0)
(378,231,0)
(342,487,0)
(309,87,0)
(390,315,0)
(62,377,0)
(348,226,0)
(158,272,0)
(238,113,0)
(382,112,0)
(163,365,0)
(103,402,0)
(491,439,0)
(325,435,0)
(283,497,0)
(126,30,0)
(139,301,0)
(31,236,0)
(321,506,0)
(550,502,0)
(396,136,0)
(303,168,0)
(80,497,0)
(130,401,0)
(506,153,0)
(129,310,0)
(174,159,0)
(28,136,0)
(347,356,0)
(232,343,0)
(63,238,0)
(463,425,0)
(328,88,0)
(431,455,0)
(487,342,0)
(393,110,0)
(52,153,0)
(243,342,0)
(399,232,0)
(412,339,0)
(501,7,0)
(13,17,0)
(384,143,0)
(528,138,0)
(424,435,0)
(125,377,0)
(198,443,0)
(504,536,0)
(258,394,0)
(185,486,0)
(151,146,0)
(3,293,0)
(484,522,0)
(483,536,0)
(91,94,0)
(159,115,0)
(478,215,0)
(165,377,0)
(452,115,0)
(223,455,0)
(523,98,0)
(27,133,0)
(415,155,0)
(508,377,0)
(394,343,0)
(304,213,0)
(392,76,0)
(430,146,0)
(308,325,0)
(395,278,0)
(225,40,0)
(81,110,0)
(198,493,0)
(178,194,0)
(359,537,0)
(226,348,0)
(18,172,0)
(157,238,0)
(39,377,0)
(436,76,0)
(480,402,0)
(522,315,0)
(474,274,0)
(525,259,0)
(535,441,0)
(224,61,0)
(410,146,0)
(514,261,0)
(439,491,0)
(172,435,0)
(100,120,0)
(194,178,0)
(136,396,0)
(19,97,0)
(198,292,0)
(138,206,0)
(272,394,0)
(302,279,0)
(277,477,0)
(109,487,0)
(511,98,0)
(254,458,0)
(144,189,0)
(354,344,0)
(66,457,0)
(348,240,0)
(249,274,0)
(551,456,0)
(99,487,0)
(148,380,0)
(250,82,0)
(406,188,0)
(97,495,0)
(286,474,0)
(432,124,0)
(215,168,0)
(244,333,0)
(260,460,0)
(330,377,0)
(340,439,0)
(270,495,0)
(68,394,0)
(53,499,0)
(134,268,0)
(48,323,0)
(336,543,0)
(94,276,0)
(316,92,0)
(43,356,0)
(198,437,0)
(243,12,0)
(261,435,0)
(429,542,0)
(51,56,0)
(116,249,0)
(257,359,0)
(341,511,0)
(404,445,0)
(518,3,0)
(82,383,0)
(198,231,0)
(339,437,0)
(343,425,0)
(183,107,0)
(189,142,0)
(89,493,0)
(273,33,0)
(449,377,0)
(544,112,0)
(197,377,0)
(532,344,0)
(191,171,0)
(429,464,0)
(173,377,0)
(17,495,0)
(418,491,0)
(537,359,0)
(105,377,0)
(211,450,0)
(455,171,0)
(493,535,0)
(345,142,0)
(25,287,0)
(363,546,0)
(407,172,0)
(265,542,0)
(268,236,0)
(83,52,0)
(255,327,0)
(249,88,0)
(490,113,0)
(85,388,0)
(516,380,0)
(23,380,0)
(344,367,0)
(353,189,0)
(382,92,0)
(69,132,0)
(218,377,0)
(231,352,0)
(455,223,0)
(456,50,0)
(212,19,0)
(258,383,0)
(510,60,0)
(543,337,0)
(54,199,0)
(435,377,0)
(155,115,0)
(270,97,0)
(288,377,0)
(236,82,0)
(289,377,0)
(233,264,0)
(79,513,0)
(409,274,0)
(461,452,0)
(57,84,0)
(423,209,0)
(405,190,0)
(546,265,0)
(71,477,0)
(374,173,0)
(361,312,0)
(106,156,0)
(171,441,0)
(156,486,0)
(194,369,1)
(155,103,1)
(483,392,1)
(3,333,1)
(72,360,1)
(132,335,1)
(58,484,1)
(280,95,1)
(451,506,1)
(432,124,1)
(72,74,1)
(121,60,1)
(504,483,1)
(326,400,1)
(272,203,1)
(544,290,1)
(173,17,1)
(409,492,1)
(299,282,1)
(213,104,1)
(447,341,1)
(480,287,1)
(426,115,1)
(446,460,1)
(94,276,1)
(69,515,1)
(403,385,1)
(194,530,1)
(85,415,1)
(542,429,1)
(390,396,1)
(41,186,1)
(111,17,1)
(183,293,1)
(329,398,1)
(281,142,1)
(384,220,1)
(492,221,1)
(402,480,1)
(499,104,1)
(532,459,1)
(535,441,1)
(169,331,1)
(354,344,1)
(45,278,1)
(198,365,1)
(356,43,1)
(386,201,1)
(177,15,1)
(374,471,1)
(396,42,1)
(376,115,1)
(85,347,1)
(173,270,1)
(503,79,1)
(31,268,1)
(398,261,1)
(519,22,1)
(433,132,1)
(485,297,1)
(9,272,1)
(142,345,1)
(150,405,1)
(290,458,1)
(487,99,1)
(198,8,1)
(392,380,1)
(83,280,1)
(498,46,1)
(17,495,1)
(27,93,1)
(251,64,1)
(502,381,1)
(413,403,1)
(138,528,1)
(478,168,1)
(40,435,1)
(128,137,1)
(85,388,1)
(244,549,1)
(264,233,1)
(519,104,1)
(189,144,1)
(514,207,1)
(2,19,1)
(160,472,1)
(119,100,1)
(491,267,1)
(273,33,1)
(106,328,1)
(98,511,1)
(417,415,1)
(362,435,1)
(223,196,1)
(168,303,1)
(543,336,1)
(215,478,1)
(211,188,1)
(163,512,1)
(272,394,1)
(92,316,1)
(338,107,1)
(172,195,1)
(471,111,1)
(14,376,1)
(434,550,1)
(399,462,1)
(304,285,1)
(344,367,1)
(501,226,1)
(293,3,1)
(293,128,1)
(487,109,1)
(19,212,1)
(212,313,1)
(513,88,1)
(158,394,1)
(188,88,1)
(303,500,1)
(43,235,1)
(184,243,1)
(336,35,1)
(459,228,1)
(476,215,1)
(159,174,1)
(542,265,1)
(493,89,1)
(339,412,1)
(198,114,1)
(143,384,1)
(270,97,1)
(342,487,1)
(309,38,1)
(463,160,1)
(101,344,1)
(220,429,1)
(35,324,1)
(12,534,1)
(473,476,1)
(188,206,1)
(432,482,1)
(429,464,1)
(315,444,1)
(301,139,1)
(522,58,1)
(393,513,1)
(307,184,1)
(365,163,1)
(72,51,1)
(130,499,1)
(146,110,1)
(146,410,1)
(287,441,1)
(236,268,1)
(265,71,1)
(524,3,1)
(245,108,1)
(262,138,1)
(460,230,1)
(351,400,1)
(496,518,1)
(32,191,1)
(141,260,1)
(296,293,1)
(348,226,1)
(525,507,1)
(198,443,1)
(95,451,1)
(156,106,1)
(312,391,1)
(453,273,1)
(213,304,1)
(306,519,1)
(537,359,1)
(256,308,1)
(224,169,1)
(427,241,1)
(161,34,1)
(153,506,1)
(205,477,1)
(21,102,1)
(538,390,1)
(102,239,1)
(22,469,1)
(30,126,1)
(364,450,1)
(84,166,1)
(488,14,1)
(13,473,1)
(146,88,1)
(153,52,1)
(357,156,1)
(418,267,1)
(444,522,1)
(390,315,1)
(429,351,1)
(195,18,1)
(486,348,1)
(139,151,1)
(547,187,1)
(52,280,1)
(335,69,1)
(317,27,1)
(48,520,1)
(155,147,1)
(348,240,1)
(44,188,1)
(134,349,1)
(40,413,1)
(534,275,1)
(188,4,1)
(395,45,1)
(66,24,1)
(428,465,1)
(455,171,1)
(252,117,1)
(331,76,1)
(203,372,1)
(173,495,1)
(350,388,1)
(313,439,1)
(252,173,1)
(491,418,1)
(28,181,1)
(91,276,1)
(171,32,1)
(525,259,1)
(513,503,1)
(38,306,1)
(502,311,1)
(340,445,1)
(493,535,1)
(533,1,1)
(456,551,1)
(233,202,1)
(435,325,1)
(546,143,1)
(267,386,1)
(481,147,1)
(398,92,1)
(76,536,1)
(157,113,1)
(17,97,1)
(506,428,1)
(320,539,1)
(17,19,1)
(85,537,1)
(156,328,1)
(351,326,1)
(431,171,1)
(243,342,1)
(34,488,1)
(27,133,1)
(82,236,1)
(156,486,1)
(226,37,1)
(536,504,1)
(2,439,1)
(185,393,1)
(198,493,1)
(111,476,1)
(198,292,1)
(248,366,1)
(228,61,1)
(172,435,1)
(440,463,1)
(323,48,1)
(90,432,1)
(534,67,1)
(405,167,1)
(67,332,1)
(135,494,1)
(127,209,1)
(424,199,1)
(145,60,1)
(311,5,1)
(437,339,1)
(82,383,1)
(314,167,1)
(15,104,1)
(155,115,1)
(274,249,1)
(261,78,1)
(97,495,1)
(26,533,1)
(353,228,1)
(198,437,1)
(86,290,1)
(360,347,1)
(76,436,1)
(472,314,1)
(37,179,1)
(174,417,1)
(294,433,1)
(484,542,1)
(520,150,1)
(401,130,1)
(145,121,1)
(68,190,1)
(445,404,1)
(175,80,1)
(393,548,1)
(23,148,1)
(80,194,1)
(543,337,1)
(385,225,1)
(466,432,1)
(407,176,1)
(253,409,1)
(198,309,1)
(179,421,1)
(17,270,1)
(310,129,1)
(187,430,1)
(298,445,1)
(468,94,1)
(334,90,1)
(436,536,1)
(324,337,1)
(465,538,1)
(372,521,1)
(63,327,1)
(70,501,1)
(257,9,1)
(77,141,1)
(457,66,1)
(54,82,1)
(136,28,1)
(358,367,1)
(300,424,1)
(499,53,1)
(549,496,1)
(340,298,1)
(173,162,1)
(72,440,1)
(199,509,1)
(255,457,1)
(137,524,1)
(371,546,1)
(497,175,1)
(285,450,1)
(99,109,1)
(439,491,1)
(17,13,1)
(243,12,1)
(510,2,1)
(12,98,1)
(144,353,1)
(206,138,1)
(493,494,1)
(316,217,1)
(308,300,1)
(500,145,1)
(494,545,1)
(277,371,1)
(358,192,1)
(283,497,1)
(495,305,1)
(33,140,1)
(8,245,1)
(349,250,1)
(173,97,1)
(232,383,1)
(120,397,1)
(342,142,1)
(426,75,1)
(400,329,1)
(318,243,1)
(263,118,1)
(521,158,1)
(235,542,1)
(10,135,1)
(181,315,1)
(393,110,1)
(535,540,1)
(265,546,1)
(51,537,1)
(151,296,1)
(16,281,1)
(59,307,1)
(49,446,1)
(42,136,1)
(490,466,1)
(276,49,1)
(215,168,1)
(109,16,1)
(328,320,1)
(3,30,1)
(19,97,1)
(142,189,1)
(0,494,1)
(455,431,1)
(452,461,1)
(249,29,1)
(548,513,1)
(530,369,1)
(71,205,1)
(523,511,1)
(207,86,1)
(260,495,1)
(250,294,1)
(57,395,1)
(461,453,1)
(75,161,1)
(404,208,1)
(107,229,1)
(321,428,1)
(423,14,1)
(270,263,1)
(406,4,1)
(133,204,1)
(231,378,1)
(15,248,1)
(246,490,1)
(25,419,1)
(297,387,1)
(18,407,1)
(178,194,1)
(221,317,1)
(114,251,1)
(229,183,1)
(93,222,1)
(118,63,1)
(410,301,1)
(402,287,1)
(509,299,1)
(100,120,1)
(456,367,1)
(254,84,1)
(546,363,1)
(50,358,1)
(490,97,1)
(389,214,1)
(148,516,1)
(7,70,1)
(198,231,1)
(108,213,1)
(5,381,1)
(327,255,1)
(85,100,1)
(395,278,1)
(382,234,1)
(126,364,1)
(275,67,1)
(14,115,1)
(92,382,1)
(409,88,1)
(186,354,1)
(0,131,1)
(176,92,1)
(258,193,1)
(292,401,1)
(359,257,1)
(316,264,1)
(448,266,1)
(180,232,1)
(289,72,1)
(97,448,1)
(208,270,1)
(63,238,1)
(315,522,1)
(464,297,1)
(328,88,1)
(230,77,1)
(74,417,1)
(439,340,1)
(226,179,1)
(182,481,1)
(196,455,1)
(387,529,1)
(171,441,1)
(276,367,1)
(19,270,1)
(72,350,1)
(61,224,1)
(354,101,1)
(131,535,1)
(107,104,1)
(238,157,1)
(310,88,1)
(389,153,1)
(270,495,1)
(450,65,1)
(116,492,1)
(4,427,1)
(380,383,1)
(29,116,1)
(198,127,1)
(241,253,1)
(323,383,1)
(53,44,1)
(389,40,1)
(199,383,1)
(268,367,1)
(380,23,1)
(512,312,1)
(208,63,1)
(383,426,1)
(217,264,1)
(210,252,1)
(239,393,1)
(76,190,1)
(222,357,1)
(223,455,1)
(232,242,1)
(378,177,1)
(518,30,1)
(96,81,1)
(382,112,1)
(140,547,1)
(368,338,1)
(394,258,1)
(65,211,1)
(527,383,1)
(477,277,1)
(198,21,1)
(241,27,1)
(230,550,1)
(474,286,1)
(234,112,1)
(529,351,1)
(516,180,1)
(113,246,1)
(397,41,1)
(475,362,1)
(19,495,1)
(517,210,1)
(464,485,1)
(237,498,1)
(287,25,1)
(167,475,1)
(266,466,1)
(381,543,1)
(412,50,1)
(162,374,1)
(337,302,1)
(89,0,1)
(81,50,1)
(93,88,1)
(305,434,1)
(462,420,1)
(458,84,1)
(409,274,1)
(388,59,1)
(85,149,1)
(347,356,1)
(344,532,1)
(166,57,1)
(191,159,1)
(420,272,1)
(369,96,1)
(505,389,1)
(201,340,1)
(85,463,1)
(173,435,1)
(147,517,1)
(193,319,1)
(225,153,1)
(391,361,1)
(286,249,1)
(341,342,1)
(366,187,1)
(71,477,1)
(274,474,1)
(268,134,1)
(236,31,1)
(511,447,1)
(416,456,1)
(155,273,1)
(198,85,1)
(72,119,1)
(76,394,1)
(199,460,1)
(258,383,1)
(206,310,1)
(192,416,1)
(214,26,1)
(476,145,1)
(202,382,1)
(282,54,1)
(507,259,1)
(361,156,1)
(98,523,1)
(443,368,1)
(458,254,1)
(363,143,1)
(227,98,1)
(178,283,1)
(214,435,1)
(249,88,1)
(242,399,1)
(319,68,1)
(528,406,1)
(302,237,1)
(421,185,1)
(327,457,1)
(540,373,1)
(129,262,1)
(396,136,1)
(60,510,1)
(173,19,1)
(240,7,1)
(78,514,1)
(124,505,1)
(24,238,1)
(345,189,1)
(190,323,1)
(1,411,1)
(110,178,1)
(94,91,1)
(147,104,1)
(515,527,1)
(79,110,1)
(159,115,1)
(149,289,1)
(112,152,1)
(411,390,1)
(466,525,1)
(550,502,1)
(261,435,1)
(64,94,1)
(115,452,1)
(152,544,1)
(52,83,1)
(332,227,1)
(469,241,1)
(103,402,1)
(312,104,1)
(545,223,1)
(325,383,1)
(398,172,1)
(238,113,1)
(204,93,1)
(419,182,1)
(259,334,1)
(302,279,1)
(289,115,1)
(494,223,1)
(209,423,1)
(415,155,1)
(146,301,1)
(132,383,1)
(278,271,1)
(539,486,1)
(50,456,1)
(430,146,1)
(325,256,1)
(271,318,1)
(551,468,1)
(373,10,1)
(333,244,1)
(117,186,1)
(482,124,1)
(452,273,1)
(506,321,1)
(290,395,1)
(158,167,2)
(273,187,2)
(109,142,2)
(19,439,2)
(147,542,2)
(461,187,2)
(50,456,2)
(301,293,2)
(360,542,2)
(160,167,2)
(413,153,2)
(452,187,2)
(494,223,2)
(388,243,2)
(423,14,2)
(198,231,2)
(499,188,2)
(29,27,2)
(241,156,2)
(315,522,2)
(175,50,2)
(473,476,2)
(180,272,2)
(30,450,2)
(398,243,2)
(159,115,2)
(145,60,2)
(448,466,2)
(33,187,2)
(155,103,2)
(456,367,2)
(272,167,2)
(139,293,2)
(8,450,2)
(53,188,2)
(296,293,2)
(82,383,2)
(299,14,2)
(238,542,2)
(243,342,2)
(214,390,2)
(188,88,2)
(0,494,2)
(328,393,2)
(153,390,2)
(450,188,2)
(146,301,2)
(120,186,2)
(287,441,2)
(455,417,2)
(126,450,2)
(383,14,2)
(115,452,2)
(99,142,2)
(79,50,2)
(491,340,2)
(435,325,2)
(82,236,2)
(502,381,2)
(376,187,2)
(116,27,2)
(40,153,2)
(519,104,2)
(463,160,2)
(283,497,2)
(173,17,2)
(537,272,2)
(497,50,2)
(198,8,2)
(520,167,2)
(85,167,2)
(319,167,2)
(205,546,2)
(52,280,2)
(3,30,2)
(198,21,2)
(344,228,2)
(493,417,2)
(42,315,2)
(340,445,2)
(536,272,2)
(21,393,2)
(282,14,2)
(407,92,2)
(214,435,2)
(190,167,2)
(48,167,2)
(27,156,2)
(85,272,2)
(240,393,2)
(213,104,2)
(472,167,2)
(289,115,2)
(253,409,2)
(50,358,2)
(275,98,2)
(318,243,2)
(323,383,2)
(89,417,2)
(345,228,2)
(85,537,2)
(350,243,2)
(117,186,2)
(443,293,2)
(206,310,2)
(505,542,2)
(430,293,2)
(37,393,2)
(369,50,2)
(525,259,2)
(521,167,2)
(97,466,2)
(363,429,2)
(149,272,2)
(22,241,2)
(236,268,2)
(484,542,2)
(351,243,2)
(115,187,2)
(358,456,2)
(92,290,2)
(149,243,2)
(395,278,2)
(153,506,2)
(464,351,2)
(506,428,2)
(290,243,2)
(178,283,2)
(386,340,2)
(265,71,2)
(176,92,2)
(107,293,2)
(458,395,2)
(543,337,2)
(313,439,2)
(469,241,2)
(542,243,2)
(246,542,2)
(409,274,2)
(68,167,2)
(28,315,2)
(202,382,2)
(58,542,2)
(490,542,2)
(72,167,2)
(338,293,2)
(417,186,2)
(514,290,2)
(127,14,2)
(325,383,2)
(130,188,2)
(420,272,2)
(344,367,2)
(524,3,2)
(193,167,2)
(332,98,2)
(173,495,2)
(198,127,2)
(60,542,2)
(213,450,2)
(289,272,2)
(93,156,2)
(415,542,2)
(232,383,2)
(437,50,2)
(198,437,2)
(41,186,2)
(354,228,2)
(155,273,2)
(417,542,2)
(210,186,2)
(199,14,2)
(427,241,2)
(15,104,2)
(365,156,2)
(119,186,2)
(439,340,2)
(236,14,2)
(157,542,2)
(153,52,2)
(307,243,2)
(199,383,2)
(208,542,2)
(64,94,2)
(249,27,2)
(402,287,2)
(276,367,2)
(74,417,2)
(198,309,2)
(391,156,2)
(196,417,2)
(108,450,2)
(393,513,2)
(163,156,2)
(118,63,2)
(226,179,2)
(353,228,2)
(198,114,2)
(401,188,2)
(381,543,2)
(342,228,2)
(155,115,2)
(146,88,2)
(339,50,2)
(474,27,2)
(348,226,2)
(270,495,2)
(59,243,2)
(453,187,2)
(217,382,2)
(140,187,2)
(267,340,2)
(465,390,2)
(239,393,2)
(173,97,2)
(155,147,2)
(528,241,2)
(362,14,2)
(186,354,2)
(337,302,2)
(430,146,2)
(222,156,2)
(515,14,2)
(273,33,2)
(406,241,2)
(356,542,2)
(252,186,2)
(187,293,2)
(25,542,2)
(76,536,2)
(2,542,2)
(327,238,2)
(191,417,2)
(340,542,2)
(503,50,2)
(72,272,2)
(280,506,2)
(51,272,2)
(215,168,2)
(459,228,2)
(402,542,2)
(341,342,2)
(90,432,2)
(233,382,2)
(486,348,2)
(287,186,2)
(542,429,2)
(207,290,2)
(387,351,2)
(7,393,2)
(143,429,2)
(374,542,2)
(294,14,2)
(429,243,2)
(94,276,2)
(26,390,2)
(361,156,2)
(241,253,2)
(468,94,2)
(444,542,2)
(317,27,2)
(107,104,2)
(309,241,2)
(230,550,2)
(389,542,2)
(194,369,2)
(17,19,2)
(223,417,2)
(400,243,2)
(4,241,2)
(54,14,2)
(15,187,2)
(238,113,2)
(272,394,2)
(228,272,2)
(266,466,2)
(277,546,2)
(264,382,2)
(289,417,2)
(133,156,2)
(293,3,2)
(533,390,2)
(329,243,2)
(493,494,2)
(18,92,2)
(513,88,2)
(431,417,2)
(283,50,2)
(171,417,2)
(100,186,2)
(522,542,2)
(228,61,2)
(16,142,2)
(293,128,2)
(131,417,2)
(220,429,2)
(10,417,2)
(52,506,2)
(263,63,2)
(358,367,2)
(174,417,2)
(481,186,2)
(211,188,2)
(198,365,2)
(40,435,2)
(523,342,2)
(481,542,2)
(402,186,2)
(14,115,2)
(149,417,2)
(171,441,2)
(534,67,2)
(76,190,2)
(306,241,2)
(289,243,2)
(289,542,2)
(0,417,2)
(81,50,2)
(12,342,2)
(439,491,2)
(25,186,2)
(149,186,2)
(517,542,2)
(148,272,2)
(102,393,2)
(532,228,2)
(349,14,2)
(155,542,2)
(315,542,2)
(159,417,2)
(550,502,2)
(286,27,2)
(257,272,2)
(194,50,2)
(128,3,2)
(518,450,2)
(516,272,2)
(97,495,2)
(261,290,2)
(192,456,2)
(372,167,2)
(215,145,2)
(390,542,2)
(71,477,2)
(432,124,2)
(151,293,2)
(412,50,2)
(172,435,2)
(85,186,2)
(226,393,2)
(204,156,2)
(198,85,2)
(371,546,2)
(519,241,2)
(12,98,2)
(392,272,2)
(290,458,2)
(547,187,2)
(19,97,2)
(429,464,2)
(409,88,2)
(310,241,2)
(394,167,2)
(303,145,2)
(142,189,2)
(482,542,2)
(146,293,2)
(85,463,2)
(411,390,2)
(544,290,2)
(32,417,2)
(405,167,2)
(458,84,2)
(451,506,2)
(76,272,2)
(251,94,2)
(156,486,2)
(419,542,2)
(67,98,2)
(455,171,2)
(527,14,2)
(83,506,2)
(466,432,2)
(78,290,2)
(188,241,2)
(476,542,2)
(409,492,2)
(382,112,2)
(517,186,2)
(9,272,2)
(492,27,2)
(487,142,2)
(188,4,2)
(415,155,2)
(229,293,2)
(466,542,2)
(12,534,2)
(388,59,2)
(396,315,2)
(496,450,2)
(223,455,2)
(333,450,2)
(320,393,2)
(19,270,2)
(426,14,2)
(480,542,2)
(463,167,2)
(144,228,2)
(253,27,2)
(225,153,2)
(19,495,2)
(110,50,2)
(235,542,2)
(206,138,2)
(113,542,2)
(161,14,2)
(334,432,2)
(290,395,2)
(327,457,2)
(65,188,2)
(249,88,2)
(210,542,2)
(302,279,2)
(124,542,2)
(172,92,2)
(168,145,2)
(31,14,2)
(304,450,2)
(149,167,2)
(27,93,2)
(137,3,2)
(435,14,2)
(312,156,2)
(404,542,2)
(178,194,2)
(258,383,2)
(178,50,2)
(525,432,2)
(70,393,2)
(198,443,2)
(155,186,2)
(45,243,2)
(289,167,2)
(368,293,2)
(66,238,2)
(403,153,2)
(316,382,2)
(245,450,2)
(243,228,2)
(433,14,2)
(17,270,2)
(261,435,2)
(384,429,2)
(351,400,2)
(348,240,2)
(310,88,2)
(530,50,2)
(475,14,2)
(486,393,2)
(198,493,2)
(347,542,2)
(3,333,2)
(390,315,2)
(380,383,2)
(366,187,2)
(549,450,2)
(227,98,2)
(471,542,2)
(129,241,2)
(98,342,2)
(506,390,2)
(316,264,2)
(456,94,2)
(416,456,2)
(85,100,2)
(3,450,2)
(24,238,2)
(146,110,2)
(17,97,2)
(418,340,2)
(17,476,2)
(244,450,2)
(297,351,2)
(409,27,2)
(63,327,2)
(184,243,2)
(494,417,2)
(186,228,2)
(134,14,2)
(308,14,2)
(460,230,2)
(132,14,2)
(167,14,2)
(147,186,2)
(419,186,2)
(265,546,2)
(14,187,2)
(92,382,2)
(156,328,2)
(250,14,2)
(545,417,2)
(348,393,2)
(542,265,2)
(373,417,2)
(540,417,2)
(110,178,2)
(23,272,2)
(181,315,2)
(85,388,2)
(241,27,2)
(421,393,2)
(357,156,2)
(289,186,2)
(426,115,2)
(103,542,2)
(285,450,2)
(415,186,2)
(201,340,2)
(76,394,2)
(534,98,2)
(185,393,2)
(509,14,2)
(111,542,2)
(96,50,2)
(477,546,2)
(537,359,2)
(270,63,2)
(232,272,2)
(243,12,2)
(142,228,2)
(378,187,2)
(466,525,2)
(439,542,2)
(258,167,2)
(436,272,2)
(393,110,2)
(152,290,2)
(156,393,2)
(281,142,2)
(135,417,2)
(198,292,2)
(72,186,2)
(173,19,2)
(347,356,2)
(224,272,2)
(321,390,2)
(240,7,2)
(234,290,2)
(274,27,2)
(27,133,2)
(546,429,2)
(268,367,2)
(462,272,2)
(504,272,2)
(212,439,2)
(265,429,2)
(429,351,2)
(95,506,2)
(190,323,2)
(72,417,2)
(274,474,2)
(57,395,2)
(162,542,2)
(85,415,2)
(147,104,2)
(292,188,2)
(63,238,2)
(256,14,2)
(538,390,2)
(476,215,2)
(138,241,2)
(114,94,2)
(394,258,2)
(72,243,2)
(380,272,2)
(255,238,2)
(501,393,2)
(72,542,2)
(342,487,2)
(203,167,2)
(333,244,2)
(325,14,2)
(69,14,2)
(179,393,2)
(173,435,2)
(342,142,2)
(359,272,2)
(488,14,2)
(314,167,2)
(410,293,2)
(270,97,2)
(493,535,2)
(254,395,2)
(335,14,2)
(512,156,2)
(300,14,2)
(195,92,2)
(298,542,2)
(136,315,2)
(274,249,2)
(424,14,2)
(457,238,2)
(364,450,2)
(173,270,2)
(432,542,2)
(287,542,2)
(82,14,2)
(252,542,2)
(132,383,2)
(452,273,2)
(85,347,2)
(397,186,2)
(103,186,2)
(106,393,2)
(209,14,2)
(121,542,2)
(535,417,2)
(312,104,2)
(399,272,2)
(242,272,2)
(17,495,2)
(173,542,2)
(551,94,2)
(75,14,2)
(231,187,2)
(13,476,2)
(221,27,2)
(326,243,2)
(548,50,2)
(510,542,2)
(71,546,2)
(92,316,2)
(262,241,2)
(182,186,2)
(293,450,2)
(485,351,2)
(93,88,2)
(464,297,2)
(393,50,2)
(183,293,2)
(80,50,2)
(323,167,2)
(328,88,2)
(188,206,2)
(166,395,2)
(61,272,2)
(189,228,2)
(513,50,2)
(382,290,2)
(206,241,2)
(98,511,2)
(511,342,2)
(103,402,2)
(539,393,2)
(354,344,2)
(440,167,2)
(331,272,2)
(447,342,2)
(145,542,2)
(529,351,2)
(85,417,2)
(43,542,2)
(182,542,2)
(259,432,2)
(86,290,2)
(101,228,2)
(487,109,2)
(38,241,2)
(396,136,2)
(476,145,2)
(546,143,2)
(478,145,2)
(491,267,2)
(385,153,2)
(112,290,2)
(535,441,2)
(395,243,2)
(169,272,2)
(177,187,2)
(1,390,2)
(445,542,2)
(50,94,2)
(150,167,2)
(85,243,2)
(63,542,2)
(428,390,2)
(100,120,2)
(199,460,2)
(84,395,2)
(271,243,2)
(499,104,2)
(480,186,2)
(149,542,2)
(34,14,2)
(390,396,2)
(44,188,2)
(483,272,2)
(278,243,2)
(85,542,2)
(268,14,2)
(507,432,2)
(272,203,2)
(500,145,2)
(383,426,2)
(248,187,2)
-----------------------------------
(0,qp->flags |= MLX5_IB_QP_RSS)
(1,hfso)
(2,ucmd)
(3,memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)
(4,&ucmd)
(5,mucontext)
(6,switch (ucmd.rx_hash_function)
(7,ucmd.reserved1)
(8,return -EOPNOTSUPP;)
(9,err)
(10,qp->trans_qp.base.mqp.qpn = 0)
(11,if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(12,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
(13,MLX5_HASH_FIELD_SEL_L4_DPORT)
(14,!in)
(15,mlx5_ib_dbg(dev, "copy failed\\n")
(16,rx_hash_fields_mask)
(17,selected_fields |= MLX5_HASH_FIELD_SEL_L4_DPORT)
(18,l3_prot_type)
(19,selected_fields |= MLX5_HASH_FIELD_SEL_L4_SPORT)
(20,)
(21,return -EINVAL;)
(22,"inlen is not supported\\n")
(23,1)
(24,ucmd)
(25,rss_qp)
(26,MLX5_L4_PROT_TYPE_TCP)
(27,udata->inlen > sizeof(ucmd)
(28,rx_hash_fields_mask)
(29,inlen)
(30,ucmd.reserved)
(31,ind_tbl_num)
(32,trans_qp)
(33,MLX5_ST_SZ_BYTES(create_tir_in)
(34,create_tir_in)
(35,uobj)
(36,)
(37,reserved1)
(38,-EOPNOTSUPP)
(39,if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(40,MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,\n\\n\\t\\t\\t MLX5_L4_PROT_TYPE_UDP)
(41,err)
(42,MLX5_RX_HASH_DST_PORT_TCP)
(43,EINVAL)
(44,dev)
(45,MLX5_RX_HASH_SRC_IPV4)
(46,uobj)
(47,)
(48,rx_hash_toeplitz_key)
(49,qp_type)
(50,init_attr->create_flags || init_attr->send_cq)
(51,goto err;)
(52,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
(53,"copy failed\\n")
(54,tirc)
(55,)
(56,)
(57,ucmd)
(58,rx_hash_fields_mask)
(59,-EINVAL)
(60,ucmd.rx_hash_fields_mask)
(61,ucmd.rx_hash_fields_mask)
(62,if (err)
(63,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(64,EOPNOTSUPP)
(65,comp_mask)
(66,rx_hash_fields_mask)
(67,ucmd.rx_hash_fields_mask)
(68,len)
(69,disp_type)
(70,reserved1)
(71,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
(72,in)
(73,if (udata->inlen < required_cmd_sz)
(74,goto err;)
(75,ctx)
(76,memcpy(rss_key, ucmd.rx_hash_key, len)
(77,tdn)
(78,MLX5_L3_PROT_TYPE_IPV4)
(79,udata)
(80,resp)
(81,min_resp_len)
(82,MLX5_SET(tirc, tirc, indirect_table,\n\\n\\t\\t init_attr->rwq_ind_tbl->ind_tbl_num)
(83,MLX5_RX_HASH_DST_PORT_UDP)
(84,ucmd.rx_hash_fields_mask)
(85,return err;)
(86,rx_hash_field_select)
(87,)
(88,struct ib_udata *udata)
(89,0)
(90,ucmd)
(91,IB_QPT_RAW_PACKET)
(92,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
(93,udata->inlen)
(94,init_attr->qp_type != IB_QPT_RAW_PACKET)
(95,rx_hash_fields_mask)
(96,resp)
(97,selected_fields |= MLX5_HASH_FIELD_SEL_SRC_IP)
(98,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
(99,MLX5_RX_HASH_DST_IPV4)
(100,err = -EINVAL)
(101,log_ind_tbl_size)
(102,-EINVAL)
(103,&qp->rss_qp.tirn)
(104,struct mlx5_ib_dev *dev)
(105,if (err)
(106,required_cmd_sz)
(107,mlx5_ib_dbg(dev, "invalid reserved\\n")
(108,EOPNOTSUPP)
(109,ucmd.rx_hash_fields_mask)
(110,min_resp_len = offsetof(typeof(resp)
(111,rx_hash_field_select)
(112,ucmd.rx_hash_fields_mask)
(113,ucmd.rx_hash_fields_mask)
(114,return -EOPNOTSUPP;)
(115,in = mlx5_vzalloc(inlen)
(116,udata)
(117,goto create_tir;)
(118,selected_fields)
(119,goto err;)
(120,-EINVAL)
(121,MLX5_RX_HASH_DST_PORT_TCP)
(122,inlen)
(123,tdn)
(124,ucmd.rx_hash_fields_mask)
(125,if (udata->inlen > sizeof(ucmd)
(126,reserved)
(127,return -ENOMEM;)
(128,ucmd.reserved1)
(129,inlen)
(130,EFAULT)
(131,MLX5_IB_QP_RSS)
(132,MLX5_SET(tirc, tirc, disp_type,\n\\n\\t\\t MLX5_TIRC_DISP_TYPE_INDIRECT)
(133,sizeof(ucmd)
(134,rwq_ind_tbl)
(135,0)
(136,ucmd.rx_hash_fields_mask)
(137,reserved1)
(138,sizeof(ucmd)
(139,resp)
(140,create_tir_in)
(141,mucontext)
(142,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(143,ucmd.rx_hash_fields_mask)
(144,rx_hash_fields_mask)
(145,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(146,ib_copy_to_udata(udata, &resp, min_resp_len)
(147,dev->mdev)
(148,rx_hash_symmetric)
(149,err)
(150,tirc)
(151,udata)
(152,rx_hash_fields_mask)
(153,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
(154,err)
(155,mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn)
(156,udata->inlen < required_cmd_sz)
(157,MLX5_RX_HASH_DST_IPV4)
(158,len)
(159,kvfree(in)
(160,-EOPNOTSUPP)
(161,in)
(162,selected_fields)
(163,-EINVAL)
(164,if (ucmd.comp_mask)
(165,min_resp_len)
(166,rx_hash_fields_mask)
(167,ucmd.rx_hash_function)
(168,ucmd.rx_hash_fields_mask)
(169,ucmd)
(170,rss_key)
(171,qp->trans_qp)
(172,MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,\n\\n\\t\\t\\t MLX5_L3_PROT_TYPE_IPV6)
(173,MLX5_SET(rx_hash_field_select, hfso, selected_fields, selected_fields)
(174,in)
(175,uuar_index)
(176,rx_hash_field_select)
(177,EINVAL)
(178,offsetof(typeof(resp)
(179,typeof(ucmd)
(180,tirc)
(181,ucmd)
(182,inlen)
(183,dev)
(184,err)
(185,required_cmd_sz)
(186,!init_attr->rwq_ind_tbl->log_ind_tbl_size)
(187,err)
(188,ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd)
(189,ucmd.rx_hash_fields_mask)
(190,*rss_key = MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key)
(191,qp)
(192,send_cq)
(193,rx_hash_toeplitz_key)
(194,offsetof(typeof(resp)
(195,MLX5_L3_PROT_TYPE_IPV6)
(196,mqp)
(197,if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(198,RET)
(199,MLX5_SET(tirc, tirc, transport_domain, tdn)
(200,if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(201,ucmd)
(202,ucmd)
(203,ucmd.rx_key_len)
(204,ucmd)
(205,MLX5_RX_HASH_DST_PORT_UDP)
(206,min(sizeof(ucmd)
(207,hfso)
(208,ucmd)
(209,-ENOMEM)
(210,dev)
(211,ucmd)
(212,MLX5_HASH_FIELD_SEL_L4_SPORT)
(213,mlx5_ib_dbg(dev, "invalid comp mask\\n")
(214,MLX5_SET(rx_hash_field_select, hfso, l4_prot_type,\n\\n\\t\\t\\t MLX5_L4_PROT_TYPE_TCP)
(215,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_UDP)
(216,)
(217,MLX5_RX_HASH_DST_IPV6)
(218,if (init_attr->qp_type != IB_QPT_RAW_PACKET)
(219,mucontext)
(220,ucmd)
(221,ucmd)
(222,inlen)
(223,qp->trans_qp.base.mqp)
(224,rx_hash_fields_mask)
(225,rx_hash_field_select)
(226,offsetof(typeof(ucmd)
(227,ucmd)
(228,!ucmd.rx_hash_fields_mask)
(229,"invalid reserved\\n")
(230,mucontext->tdn)
(231,return -EINVAL;)
(232,MLX5_SET(tirc, tirc, rx_hash_fn, MLX5_RX_HASH_FN_TOEPLITZ)
(233,rx_hash_fields_mask)
(234,MLX5_RX_HASH_SRC_IPV6)
(235,err)
(236,init_attr->rwq_ind_tbl->ind_tbl_num)
(237,uobject)
(238,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(239,EINVAL)
(240,sizeof(ucmd.reserved1)
(241,udata->inlen > sizeof(ucmd)
(242,MLX5_RX_HASH_FN_TOEPLITZ)
(243,((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(244,ucmd.reserved)
(245,-EOPNOTSUPP)
(246,rx_hash_fields_mask)
(247,default:)
(248,"copy failed\\n")
(249,udata->inlen)
(250,indirect_table)
(251,-EOPNOTSUPP)
(252,err)
(253,!ib_is_udata_cleared(udata, sizeof(ucmd)
(254,MLX5_RX_HASH_DST_IPV4)
(255,MLX5_RX_HASH_DST_IPV6)
(256,rx_hash_field_selector_outer)
(257,EINVAL)
(258,MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key)
(259,ucmd.rx_hash_fields_mask)
(260,tdn)
(261,MLX5_SET(rx_hash_field_select, hfso, l3_prot_type,\n\\n\\t\\t\\t MLX5_L3_PROT_TYPE_IPV4)
(262,udata)
(263,MLX5_HASH_FIELD_SEL_DST_IP)
(264,ucmd.rx_hash_fields_mask)
(265,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
(266,selected_fields)
(267,ucmd.rx_hash_fields_mask)
(268,init_attr->rwq_ind_tbl)
(269,if (!ucmd.rx_hash_fields_mask)
(270,selected_fields |= MLX5_HASH_FIELD_SEL_DST_IP)
(271,rx_hash_fields_mask)
(272,len != ucmd.rx_key_len)
(273,inlen = MLX5_ST_SZ_BYTES(create_tir_in)
(274,udata->inlen - sizeof(ucmd)
(275,MLX5_RX_HASH_DST_IPV6)
(276,init_attr->qp_type)
(277,rx_hash_fields_mask)
(278,ucmd.rx_hash_fields_mask)
(279,struct ib_pd *pd)
(280,ucmd.rx_hash_fields_mask)
(281,ucmd)
(282,tirc)
(283,sizeof(resp.uuar_index)
(284,err:)
(285,dev)
(286,ucmd)
(287,qp->rss_qp)
(288,if (memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)
(289,kvfree(in)
(290,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(291,hfso)
(292,return -EFAULT;)
(293,memchr_inv(ucmd.reserved, 0, sizeof(ucmd.reserved)
(294,tirc)
(295,if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(296,err)
(297,ucmd.rx_hash_fields_mask)
(298,MLX5_RX_HASH_SRC_PORT_TCP)
(299,transport_domain)
(300,tirc)
(301,&resp)
(302,pd->uobject)
(303,rx_hash_fields_mask)
(304,"invalid comp mask\\n")
(305,0)
(306,EOPNOTSUPP)
(307,EINVAL)
(308,tirc)
(309,return -EOPNOTSUPP;)
(310,udata->inlen)
(311,ucontext)
(312,mlx5_ib_dbg(dev, "invalid inlen\\n")
(313,selected_fields)
(314,err)
(315,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(316,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
(317,udata)
(318,ucmd)
(319,tirc)
(320,inlen)
(321,MLX5_RX_HASH_SRC_PORT_UDP)
(322,len)
(323,MLX5_ADDR_OF(tirc, tirc, rx_hash_toeplitz_key)
(324,ucontext)
(325,MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer)
(326,MLX5_RX_HASH_SRC_PORT_TCP)
(327,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
(328,udata->inlen)
(329,rx_hash_fields_mask)
(330,uobj)
(331,break;)
(332,rx_hash_fields_mask)
(333,sizeof(ucmd.reserved)
(334,rx_hash_fields_mask)
(335,MLX5_TIRC_DISP_TYPE_INDIRECT)
(336,context)
(337,*uobj = pd->uobject)
(338,EOPNOTSUPP)
(339,-EINVAL)
(340,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(341,ucmd)
(342,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(343,)
(344,init_attr->rwq_ind_tbl)
(345,MLX5_RX_HASH_SRC_IPV4)
(346,tirc)
(347,err = -EINVAL)
(348,offsetof(typeof(ucmd)
(349,init_attr)
(350,goto err;)
(351,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(352,)
(353,ucmd)
(354,init_attr->rwq_ind_tbl->log_ind_tbl_size)
(355,)
(356,-EINVAL)
(357,udata)
(358,init_attr->send_cq)
(359,-EINVAL)
(360,goto err;)
(361,dev)
(362,ucmd)
(363,MLX5_RX_HASH_SRC_PORT_UDP)
(364,ucmd)
(365,return -EINVAL;)
(366,dev)
(367,struct ib_qp_init_attr *init_attr)
(368,-EOPNOTSUPP)
(369,typeof(resp)
(370,if (!in)
(371,ucmd)
(372,rx_key_len)
(373,qp)
(374,selected_fields)
(375,required_cmd_sz)
(376,in)
(377,)
(378,-EINVAL)
(379,if (ib_copy_from_udata(&ucmd, udata, min(sizeof(ucmd)
(380,MLX5_SET(tirc, tirc, rx_hash_symmetric, 1)
(381,*ucontext = uobj->context)
(382,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
(383,tirc = MLX5_ADDR_OF(create_tir_in, in, ctx)
(384,rx_hash_fields_mask)
(385,hfso)
(386,rx_hash_fields_mask)
(387,rx_hash_fields_mask)
(388,err = -EINVAL)
(389,ucmd)
(390,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(391,"invalid inlen\\n")
(392,rss_key)
(393,udata->outlen < min_resp_len)
(394,len = MLX5_FLD_SZ_BYTES(tirc, rx_hash_toeplitz_key)
(395,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(396,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(397,EINVAL)
(398,ucmd)
(399,rx_hash_fn)
(400,ucmd.rx_hash_fields_mask)
(401,-EFAULT)
(402,qp->rss_qp.tirn)
(403,l4_prot_type)
(404,rx_hash_fields_mask)
(405,rss_key)
(406,udata)
(407,hfso)
(408,if (!init_attr->rwq_ind_tbl->log_ind_tbl_size)
(409,ib_is_udata_cleared(udata, sizeof(ucmd)
(410,min_resp_len)
(411,rx_hash_field_select)
(412,EINVAL)
(413,MLX5_L4_PROT_TYPE_UDP)
(414,case MLX5_RX_HASH_FUNC_TOEPLITZ:)
(415,err = mlx5_core_create_tir(dev->mdev, in, inlen, &qp->rss_qp.tirn)
(416,init_attr)
(417,err)
(418,MLX5_RX_HASH_SRC_PORT_UDP)
(419,qp)
(420,tirc)
(421,ucmd)
(422,create_tir:)
(423,ENOMEM)
(424,hfso)
(425,)
(426,MLX5_ADDR_OF(create_tir_in, in, ctx)
(427,ucmd)
(428,ucmd.rx_hash_fields_mask)
(429,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(430,err = ib_copy_to_udata(udata, &resp, min_resp_len)
(431,base)
(432,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(433,tirc)
(434,selected_fields)
(435,hfso = MLX5_ADDR_OF(tirc, tirc, rx_hash_field_selector_outer)
(436,len)
(437,return -EINVAL;)
(438,)
(439,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(440,goto err;)
(441,struct mlx5_ib_qp *qp)
(442,if (len != ucmd.rx_key_len)
(443,return -EOPNOTSUPP;)
(444,MLX5_RX_HASH_SRC_PORT_TCP)
(445,ucmd.rx_hash_fields_mask)
(446,init_attr)
(447,rx_hash_fields_mask)
(448,MLX5_HASH_FIELD_SEL_SRC_IP)
(449,if (init_attr->create_flags || init_attr->send_cq)
(450,ucmd.comp_mask)
(451,ucmd)
(452,mlx5_vzalloc(inlen)
(453,in)
(454,)
(455,qp->trans_qp.base)
(456,init_attr->create_flags)
(457,ucmd.rx_hash_fields_mask)
(458,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(459,init_attr)
(460,tdn = mucontext->tdn)
(461,inlen)
(462,tirc)
(463,err = -EOPNOTSUPP)
(464,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(465,rx_hash_fields_mask)
(466,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(467,if (((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV4)
(468,init_attr)
(469,dev)
(470,)
(471,hfso)
(472,EOPNOTSUPP)
(473,selected_fields)
(474,sizeof(ucmd)
(475,rx_hash_function)
(476,(ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(477,ucmd.rx_hash_fields_mask)
(478,MLX5_RX_HASH_DST_PORT_UDP)
(479,in)
(480,tirn)
(481,in)
(482,MLX5_RX_HASH_SRC_IPV4)
(483,ucmd)
(484,ucmd)
(485,MLX5_RX_HASH_DST_PORT_TCP)
(486,required_cmd_sz = offsetof(typeof(ucmd)
(487,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV4)
(488,tirc)
(489,if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_PORT_TCP)
(490,ucmd)
(491,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
(492,sizeof(ucmd)
(493,return 0;)
(494,qp->trans_qp.base.mqp.qpn)
(495,selected_fields = 0)
(496,ucmd)
(497,resp.uuar_index)
(498,pd)
(499,mlx5_ib_dbg(dev, "copy failed\\n")
(500,ucmd)
(501,ucmd)
(502,to_mucontext(ucontext)
(503,outlen)
(504,rx_hash_key)
(505,rx_hash_fields_mask)
(506,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
(507,MLX5_RX_HASH_SRC_IPV6)
(508,selected_fields)
(509,tdn)
(510,rx_hash_fields_mask)
(511,ucmd.rx_hash_fields_mask)
(512,EINVAL)
(513,udata->outlen)
(514,l3_prot_type)
(515,tirc)
(516,tirc)
(517,mdev)
(518,0)
(519,mlx5_ib_dbg(dev, "inlen is not supported\\n")
(520,tirc)
(521,ucmd)
(522,ucmd.rx_hash_fields_mask)
(523,MLX5_RX_HASH_SRC_IPV6)
(524,ucmd)
(525,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_IPV6)
(526,if ((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(527,tirc)
(528,ucmd)
(529,ucmd)
(530,uuar_index)
(531,if (udata->outlen < min_resp_len)
(532,rwq_ind_tbl)
(533,l4_prot_type)
(534,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_DST_IPV6)
(535,qp->flags)
(536,ucmd.rx_hash_key)
(537,err = -EINVAL)
(538,ucmd)
(539,udata)
(540,flags)
(541,ucontext)
(542,((ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_TCP)
(543,uobj->context)
(544,ucmd)
(545,qpn)
(546,ucmd.rx_hash_fields_mask & MLX5_RX_HASH_SRC_PORT_UDP)
(547,inlen)
(548,min_resp_len)
(549,reserved)
(550,*mucontext = to_mucontext(ucontext)
(551,create_flags)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^