-----label-----
0
-----code-----
static int read_unit_address_configuration(struct dasd_device *device,
					   struct alias_lcu *lcu)
{
	struct dasd_psf_prssd_data *prssdp;
	struct dasd_ccw_req *cqr;
	struct ccw1 *ccw;
	int rc;
	unsigned long flags;

	cqr = dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */	+ 1 /* RSSD */,
				   (sizeof(struct dasd_psf_prssd_data)),
				   device);
	if (IS_ERR(cqr))
		return PTR_ERR(cqr);
	cqr->startdev = device;
	cqr->memdev = device;
	clear_bit(DASD_CQR_FLAGS_USE_ERP, &cqr->flags);
	cqr->retries = 10;
	cqr->expires = 20 * HZ;

	/* Prepare for Read Subsystem Data */
	prssdp = (struct dasd_psf_prssd_data *) cqr->data;
	memset(prssdp, 0, sizeof(struct dasd_psf_prssd_data));
	prssdp->order = PSF_ORDER_PRSSD;
	prssdp->suborder = 0x0e;	/* Read unit address configuration */
	/* all other bytes of prssdp must be zero */

	ccw = cqr->cpaddr;
	ccw->cmd_code = DASD_ECKD_CCW_PSF;
	ccw->count = sizeof(struct dasd_psf_prssd_data);
	ccw->flags |= CCW_FLAG_CC;
	ccw->cda = (__u32)(addr_t) prssdp;

	/* Read Subsystem Data - feature codes */
	memset(lcu->uac, 0, sizeof(*(lcu->uac)));

	ccw++;
	ccw->cmd_code = DASD_ECKD_CCW_RSSD;
	ccw->count = sizeof(*(lcu->uac));
	ccw->cda = (__u32)(addr_t) lcu->uac;

	cqr->buildclk = get_tod_clock();
	cqr->status = DASD_CQR_FILLED;

	/* need to unset flag here to detect race with summary unit check */
	spin_lock_irqsave(&lcu->lock, flags);
	lcu->flags &= ~NEED_UAC_UPDATE;
	spin_unlock_irqrestore(&lcu->lock, flags);

	do {
		rc = dasd_sleep_on(cqr);
		if (rc && suborder_not_supported(cqr))
			return -EOPNOTSUPP;
	} while (rc && (cqr->retries > 0));
	if (rc) {
		spin_lock_irqsave(&lcu->lock, flags);
		lcu->flags |= NEED_UAC_UPDATE;
		spin_unlock_irqrestore(&lcu->lock, flags);
	}
	dasd_kfree_request(cqr, cqr->memdev);
	return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
17,50
17,51
17,52
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
53,57
53,58
54,55
56,57
58,59
58,60
61,62
62,63
63,64
63,65
64,65
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
98,101
99,100
101,102
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
115,116
116,117
116,118
117,118
117,119
118,119
121,122
121,123
123,124
125,126
126,127
126,128
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
135,137
136,137
139,140
140,141
140,142
140,143
140,144
141,142
143,144
146,147
147,148
147,149
148,149
151,152
152,153
152,154
153,154
153,155
154,155
157,158
159,160
160,161
160,162
161,162
161,163
162,163
166,167
167,168
167,169
168,169
170,171
170,172
171,172
174,175
175,176
175,177
176,177
176,178
177,178
180,181
182,183
183,184
183,185
184,185
184,186
185,186
188,189
189,190
189,191
190,191
193,194
194,195
194,196
195,196
195,197
196,197
199,200
201,202
202,203
202,204
203,204
203,205
204,205
207,208
207,209
208,209
208,210
209,210
212,213
212,214
213,214
213,215
214,215
217,218
219,220
220,221
220,222
220,223
220,224
221,222
223,224
223,225
224,225
228,229
229,230
230,231
231,232
232,233
232,234
233,234
236,237
237,238
238,239
240,241
241,242
241,243
242,243
242,244
243,244
246,247
248,249
249,250
249,251
250,251
250,252
251,252
254,255
255,256
256,257
257,258
258,259
258,260
259,260
262,263
263,264
263,265
264,265
264,266
265,266
268,269
268,270
269,270
269,271
270,271
273,274
273,275
274,275
274,276
275,276
278,279
278,280
279,280
282,283
283,284
283,285
284,285
284,286
285,286
288,289
289,290
291,292
292,293
292,294
293,294
293,295
294,295
297,298
299,300
300,301
300,302
300,303
301,302
303,304
304,305
304,306
305,306
308,309
310,311
311,312
311,313
312,313
312,314
313,314
316,317
317,318
319,320
320,321
320,322
320,323
321,322
323,324
324,325
324,326
325,326
328,329
330,331
330,332
331,332
331,333
332,333
333,334
333,335
334,335
336,337
336,338
337,338
339,340
341,342
341,343
342,343
342,344
343,344
345,346
345,347
346,347
348,349
350,351
351,352
352,353
354,355
354,356
355,356
357,358
358,359
358,360
359,360
359,361
360,361
364,365
364,366
365,366
367,368
367,369
367,370
368,369
369,370
369,371
369,372
370,371
372,373
373,374
373,375
374,375
377,378
379,380
380,381
380,382
381,382
381,383
382,383
385,386
387,388
388,389
388,390
388,391
389,390
391,392
392,393
392,394
393,394
396,397
398,399
399,400
399,401
399,402
400,401
402,403
404,405
404,406
405,406
408,409
409,410
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,31,35,37,38,41,43,46,48,52,55,57,59,60,65,66,68,72,74,78,80,85,86,88,93,94,96,100,102,106,107,112,113,114,119,120,122,124,128,132,134,137,138,142,144,145,149,150,155,156,158,163,164,165,169,172,173,178,179,181,186,187,191,192,197,198,200,205,206,210,211,215,216,218,222,225,226,227,234,235,239,244,245,247,252,253,260,261,266,267,271,272,276,277,280,281,286,287,290,295,296,298,302,306,307,309,314,315,318,322,326,327,329,335,338,340,344,347,349,353,356,361,362,363,366,371,375,376,378,383,384,386,390,394,395,397,401,403,406,407,410
-----computeFrom-----
50,51
50,52
58,59
58,60
82,83
82,84
90,91
90,92
109,110
109,111
116,117
116,118
121,122
121,123
126,127
126,128
152,153
152,154
160,161
160,162
167,168
167,169
175,176
175,177
183,184
183,185
194,195
194,196
202,203
202,204
241,242
241,243
249,250
249,251
263,264
263,265
283,284
283,285
292,293
292,294
311,312
311,313
333,334
333,335
342,343
342,344
354,355
354,356
358,359
358,360
380,381
380,382
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;UnaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int read_unit_address_configuration(struct dasd_device *device,					   struct alias_lcu *lcu){	struct dasd_psf_prssd_data *prssdp;	struct dasd_ccw_req *cqr;	struct ccw1 *ccw;	int rc;	unsigned long flags;	cqr = dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */	+ 1 /* RSSD */,				   (sizeof(struct dasd_psf_prssd_data)),				   device);	if (IS_ERR(cqr))		return PTR_ERR(cqr);	cqr->startdev = device;	cqr->memdev = device;	clear_bit(DASD_CQR_FLAGS_USE_ERP, &cqr->flags);	cqr->retries = 10;	cqr->expires = 20 * HZ;	/* Prepare for Read Subsystem Data */	prssdp = (struct dasd_psf_prssd_data *) cqr->data;	memset(prssdp, 0, sizeof(struct dasd_psf_prssd_data));	prssdp->order = PSF_ORDER_PRSSD;	prssdp->suborder = 0x0e;	/* Read unit address configuration */	/* all other bytes of prssdp must be zero */	ccw = cqr->cpaddr;	ccw->cmd_code = DASD_ECKD_CCW_PSF;	ccw->count = sizeof(struct dasd_psf_prssd_data);	ccw->flags |= CCW_FLAG_CC;	ccw->cda = (__u32)(addr_t) prssdp;	/* Read Subsystem Data - feature codes */	memset(lcu->uac, 0, sizeof(*(lcu->uac)));	ccw++;	ccw->cmd_code = DASD_ECKD_CCW_RSSD;	ccw->count = sizeof(*(lcu->uac));	ccw->cda = (__u32)(addr_t) lcu->uac;	cqr->buildclk = get_tod_clock();	cqr->status = DASD_CQR_FILLED;	/* need to unset flag here to detect race with summary unit check */	spin_lock_irqsave(&lcu->lock, flags);	lcu->flags &= ~NEED_UAC_UPDATE;	spin_unlock_irqrestore(&lcu->lock, flags);	do {		rc = dasd_sleep_on(cqr);		if (rc && suborder_not_supported(cqr))			return -EOPNOTSUPP;	} while (rc && (cqr->retries > 0));	if (rc) {		spin_lock_irqsave(&lcu->lock, flags);		lcu->flags |= NEED_UAC_UPDATE;		spin_unlock_irqrestore(&lcu->lock, flags);	}	dasd_kfree_request(cqr, cqr->memdev);	return rc;}
static int
read_unit_address_configuration(struct dasd_device *device,					   struct alias_lcu *lcu)
read_unit_address_configuration
struct dasd_device *device
struct dasd_device
dasd_device
*device
*
device
struct alias_lcu *lcu
struct alias_lcu
alias_lcu
*lcu
*
lcu
{	struct dasd_psf_prssd_data *prssdp;	struct dasd_ccw_req *cqr;	struct ccw1 *ccw;	int rc;	unsigned long flags;	cqr = dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */	+ 1 /* RSSD */,				   (sizeof(struct dasd_psf_prssd_data)),				   device);	if (IS_ERR(cqr))		return PTR_ERR(cqr);	cqr->startdev = device;	cqr->memdev = device;	clear_bit(DASD_CQR_FLAGS_USE_ERP, &cqr->flags);	cqr->retries = 10;	cqr->expires = 20 * HZ;	/* Prepare for Read Subsystem Data */	prssdp = (struct dasd_psf_prssd_data *) cqr->data;	memset(prssdp, 0, sizeof(struct dasd_psf_prssd_data));	prssdp->order = PSF_ORDER_PRSSD;	prssdp->suborder = 0x0e;	/* Read unit address configuration */	/* all other bytes of prssdp must be zero */	ccw = cqr->cpaddr;	ccw->cmd_code = DASD_ECKD_CCW_PSF;	ccw->count = sizeof(struct dasd_psf_prssd_data);	ccw->flags |= CCW_FLAG_CC;	ccw->cda = (__u32)(addr_t) prssdp;	/* Read Subsystem Data - feature codes */	memset(lcu->uac, 0, sizeof(*(lcu->uac)));	ccw++;	ccw->cmd_code = DASD_ECKD_CCW_RSSD;	ccw->count = sizeof(*(lcu->uac));	ccw->cda = (__u32)(addr_t) lcu->uac;	cqr->buildclk = get_tod_clock();	cqr->status = DASD_CQR_FILLED;	/* need to unset flag here to detect race with summary unit check */	spin_lock_irqsave(&lcu->lock, flags);	lcu->flags &= ~NEED_UAC_UPDATE;	spin_unlock_irqrestore(&lcu->lock, flags);	do {		rc = dasd_sleep_on(cqr);		if (rc && suborder_not_supported(cqr))			return -EOPNOTSUPP;	} while (rc && (cqr->retries > 0));	if (rc) {		spin_lock_irqsave(&lcu->lock, flags);		lcu->flags |= NEED_UAC_UPDATE;		spin_unlock_irqrestore(&lcu->lock, flags);	}	dasd_kfree_request(cqr, cqr->memdev);	return rc;}
struct dasd_psf_prssd_data *prssdp;
struct dasd_psf_prssd_data *prssdp;
struct dasd_psf_prssd_data
dasd_psf_prssd_data
*prssdp
*
prssdp
struct dasd_ccw_req *cqr;
struct dasd_ccw_req *cqr;
struct dasd_ccw_req
dasd_ccw_req
*cqr
*
cqr
struct ccw1 *ccw;
struct ccw1 *ccw;
struct ccw1
ccw1
*ccw
*
ccw
int rc;
int rc;
int
rc
rc
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
cqr = dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */	+ 1 /* RSSD */,				   (sizeof(struct dasd_psf_prssd_data)),				   device);
cqr = dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */	+ 1 /* RSSD */,				   (sizeof(struct dasd_psf_prssd_data)),				   device)
cqr
cqr
dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */	+ 1 /* RSSD */,				   (sizeof(struct dasd_psf_prssd_data)),				   device)
dasd_kmalloc_request
dasd_kmalloc_request
DASD_ECKD_MAGIC
DASD_ECKD_MAGIC
1 /* PSF */	+ 1
1
1
(sizeof(struct dasd_psf_prssd_data))
sizeof(struct dasd_psf_prssd_data)
struct dasd_psf_prssd_data
struct dasd_psf_prssd_data
dasd_psf_prssd_data

device
device
if (IS_ERR(cqr))		return PTR_ERR(cqr);
IS_ERR(cqr)
IS_ERR
IS_ERR
cqr
cqr
return PTR_ERR(cqr);
PTR_ERR(cqr)
PTR_ERR
PTR_ERR
cqr
cqr
cqr->startdev = device;
cqr->startdev = device
cqr->startdev
cqr
cqr
startdev
device
device
cqr->memdev = device;
cqr->memdev = device
cqr->memdev
cqr
cqr
memdev
device
device
clear_bit(DASD_CQR_FLAGS_USE_ERP, &cqr->flags);
clear_bit(DASD_CQR_FLAGS_USE_ERP, &cqr->flags)
clear_bit
clear_bit
DASD_CQR_FLAGS_USE_ERP
DASD_CQR_FLAGS_USE_ERP
&cqr->flags
cqr->flags
cqr
cqr
flags
cqr->retries = 10;
cqr->retries = 10
cqr->retries
cqr
cqr
retries
10
cqr->expires = 20 * HZ;
cqr->expires = 20 * HZ
cqr->expires
cqr
cqr
expires
20 * HZ
20
HZ
HZ
prssdp = (struct dasd_psf_prssd_data *) cqr->data;
prssdp = (struct dasd_psf_prssd_data *) cqr->data
prssdp
prssdp
(struct dasd_psf_prssd_data *) cqr->data
struct dasd_psf_prssd_data *
struct dasd_psf_prssd_data
dasd_psf_prssd_data
*
*
cqr->data
cqr
cqr
data
memset(prssdp, 0, sizeof(struct dasd_psf_prssd_data));
memset(prssdp, 0, sizeof(struct dasd_psf_prssd_data))
memset
memset
prssdp
prssdp
0
sizeof(struct dasd_psf_prssd_data)
struct dasd_psf_prssd_data
struct dasd_psf_prssd_data
dasd_psf_prssd_data

prssdp->order = PSF_ORDER_PRSSD;
prssdp->order = PSF_ORDER_PRSSD
prssdp->order
prssdp
prssdp
order
PSF_ORDER_PRSSD
PSF_ORDER_PRSSD
prssdp->suborder = 0x0e;
prssdp->suborder = 0x0e
prssdp->suborder
prssdp
prssdp
suborder
0x0e
ccw = cqr->cpaddr;
ccw = cqr->cpaddr
ccw
ccw
cqr->cpaddr
cqr
cqr
cpaddr
ccw->cmd_code = DASD_ECKD_CCW_PSF;
ccw->cmd_code = DASD_ECKD_CCW_PSF
ccw->cmd_code
ccw
ccw
cmd_code
DASD_ECKD_CCW_PSF
DASD_ECKD_CCW_PSF
ccw->count = sizeof(struct dasd_psf_prssd_data);
ccw->count = sizeof(struct dasd_psf_prssd_data)
ccw->count
ccw
ccw
count
sizeof(struct dasd_psf_prssd_data)
struct dasd_psf_prssd_data
struct dasd_psf_prssd_data
dasd_psf_prssd_data

ccw->flags |= CCW_FLAG_CC;
ccw->flags |= CCW_FLAG_CC
ccw->flags
ccw
ccw
flags
CCW_FLAG_CC
CCW_FLAG_CC
ccw->cda = (__u32)(addr_t) prssdp;
ccw->cda = (__u32)(addr_t) prssdp
ccw->cda
ccw
ccw
cda
(__u32)(addr_t) prssdp
__u32
__u32
__u32

(addr_t) prssdp
addr_t
addr_t
addr_t

prssdp
prssdp
memset(lcu->uac, 0, sizeof(*(lcu->uac)));
memset(lcu->uac, 0, sizeof(*(lcu->uac)))
memset
memset
lcu->uac
lcu
lcu
uac
0
sizeof(*(lcu->uac))
(*(lcu->uac))
*(lcu->uac)
(lcu->uac)
lcu->uac
lcu
lcu
uac
ccw++;
ccw++
ccw
ccw
ccw->cmd_code = DASD_ECKD_CCW_RSSD;
ccw->cmd_code = DASD_ECKD_CCW_RSSD
ccw->cmd_code
ccw
ccw
cmd_code
DASD_ECKD_CCW_RSSD
DASD_ECKD_CCW_RSSD
ccw->count = sizeof(*(lcu->uac));
ccw->count = sizeof(*(lcu->uac))
ccw->count
ccw
ccw
count
sizeof(*(lcu->uac))
(*(lcu->uac))
*(lcu->uac)
(lcu->uac)
lcu->uac
lcu
lcu
uac
ccw->cda = (__u32)(addr_t) lcu->uac;
ccw->cda = (__u32)(addr_t) lcu->uac
ccw->cda
ccw
ccw
cda
(__u32)(addr_t) lcu->uac
__u32
__u32
__u32

(addr_t) lcu->uac
addr_t
addr_t
addr_t

lcu->uac
lcu
lcu
uac
cqr->buildclk = get_tod_clock();
cqr->buildclk = get_tod_clock()
cqr->buildclk
cqr
cqr
buildclk
get_tod_clock()
get_tod_clock
get_tod_clock
cqr->status = DASD_CQR_FILLED;
cqr->status = DASD_CQR_FILLED
cqr->status
cqr
cqr
status
DASD_CQR_FILLED
DASD_CQR_FILLED
spin_lock_irqsave(&lcu->lock, flags);
spin_lock_irqsave(&lcu->lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&lcu->lock
lcu->lock
lcu
lcu
lock
flags
flags
lcu->flags &= ~NEED_UAC_UPDATE;
lcu->flags &= ~NEED_UAC_UPDATE
lcu->flags
lcu
lcu
flags
~NEED_UAC_UPDATE
NEED_UAC_UPDATE
NEED_UAC_UPDATE
spin_unlock_irqrestore(&lcu->lock, flags);
spin_unlock_irqrestore(&lcu->lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&lcu->lock
lcu->lock
lcu
lcu
lock
flags
flags
do {		rc = dasd_sleep_on(cqr);		if (rc && suborder_not_supported(cqr))			return -EOPNOTSUPP;	} while (rc && (cqr->retries > 0));
{		rc = dasd_sleep_on(cqr);		if (rc && suborder_not_supported(cqr))			return -EOPNOTSUPP;	}
rc = dasd_sleep_on(cqr);
rc = dasd_sleep_on(cqr)
rc
rc
dasd_sleep_on(cqr)
dasd_sleep_on
dasd_sleep_on
cqr
cqr
if (rc && suborder_not_supported(cqr))			return -EOPNOTSUPP;
rc && suborder_not_supported(cqr)
rc
rc
suborder_not_supported(cqr)
suborder_not_supported
suborder_not_supported
cqr
cqr
return -EOPNOTSUPP;
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
rc && (cqr->retries > 0)
rc
rc
(cqr->retries > 0)
cqr->retries > 0
cqr->retries
cqr
cqr
retries
0
if (rc) {		spin_lock_irqsave(&lcu->lock, flags);		lcu->flags |= NEED_UAC_UPDATE;		spin_unlock_irqrestore(&lcu->lock, flags);	}
rc
rc
{		spin_lock_irqsave(&lcu->lock, flags);		lcu->flags |= NEED_UAC_UPDATE;		spin_unlock_irqrestore(&lcu->lock, flags);	}
spin_lock_irqsave(&lcu->lock, flags);
spin_lock_irqsave(&lcu->lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&lcu->lock
lcu->lock
lcu
lcu
lock
flags
flags
lcu->flags |= NEED_UAC_UPDATE;
lcu->flags |= NEED_UAC_UPDATE
lcu->flags
lcu
lcu
flags
NEED_UAC_UPDATE
NEED_UAC_UPDATE
spin_unlock_irqrestore(&lcu->lock, flags);
spin_unlock_irqrestore(&lcu->lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&lcu->lock
lcu->lock
lcu
lcu
lock
flags
flags
dasd_kfree_request(cqr, cqr->memdev);
dasd_kfree_request(cqr, cqr->memdev)
dasd_kfree_request
dasd_kfree_request
cqr
cqr
cqr->memdev
cqr
cqr
memdev
return rc;
rc
rc
-----joern-----
(66,145,0)
(55,186,0)
(31,116,0)
(110,6,0)
(59,42,0)
(32,31,0)
(70,214,0)
(162,45,0)
(211,162,0)
(128,40,0)
(78,123,0)
(126,177,0)
(7,185,0)
(123,117,0)
(180,211,0)
(185,122,0)
(54,199,0)
(36,196,0)
(23,84,0)
(164,48,0)
(90,81,0)
(89,76,0)
(169,31,0)
(74,84,0)
(130,83,0)
(165,27,0)
(215,140,0)
(182,203,0)
(71,72,0)
(38,168,0)
(189,125,0)
(44,51,0)
(79,10,0)
(162,71,0)
(191,117,0)
(106,138,0)
(104,29,0)
(195,36,0)
(131,71,0)
(115,132,0)
(57,149,0)
(97,44,0)
(177,199,0)
(211,123,0)
(174,107,0)
(116,140,0)
(122,185,0)
(78,205,0)
(62,175,0)
(56,209,0)
(188,144,0)
(72,92,0)
(197,10,0)
(51,44,0)
(209,56,0)
(96,121,0)
(140,116,0)
(17,10,0)
(208,95,0)
(102,103,0)
(20,131,0)
(109,163,0)
(148,10,0)
(196,10,0)
(43,56,0)
(32,100,0)
(17,126,0)
(82,76,0)
(80,10,0)
(178,205,0)
(186,119,0)
(11,114,0)
(175,71,0)
(138,83,0)
(41,103,0)
(30,32,0)
(117,10,0)
(132,115,0)
(72,71,0)
(19,211,0)
(121,29,0)
(39,10,0)
(113,67,0)
(119,186,0)
(98,104,0)
(131,210,0)
(6,48,0)
(116,10,0)
(48,6,0)
(93,216,0)
(210,10,0)
(108,30,0)
(56,43,0)
(100,71,0)
(32,162,0)
(22,72,0)
(31,83,0)
(78,120,0)
(32,131,0)
(211,125,0)
(78,162,0)
(171,45,0)
(211,120,0)
(207,6,0)
(190,82,0)
(199,29,0)
(47,95,0)
(0,10,0)
(69,210,0)
(42,76,0)
(4,11,0)
(184,142,0)
(35,19,0)
(103,41,0)
(61,10,0)
(153,73,0)
(185,49,0)
(21,43,0)
(40,128,0)
(140,63,0)
(143,83,0)
(211,67,0)
(168,71,0)
(4,29,0)
(32,136,0)
(210,92,0)
(152,147,0)
(94,215,0)
(64,162,0)
(208,32,0)
(87,171,0)
(151,123,0)
(161,120,0)
(60,71,0)
(177,126,0)
(142,184,0)
(119,214,0)
(32,67,0)
(18,36,0)
(135,127,0)
(28,27,0)
(132,148,0)
(78,10,0)
(211,100,0)
(121,122,0)
(83,10,0)
(19,29,0)
(211,200,0)
(122,121,0)
(194,168,0)
(32,81,0)
(181,91,0)
(8,115,0)
(172,73,0)
(73,111,0)
(211,136,0)
(187,138,0)
(208,144,0)
(211,205,0)
(137,100,0)
(141,123,0)
(25,215,0)
(9,163,0)
(84,29,0)
(124,71,0)
(211,81,0)
(204,10,0)
(3,100,0)
(101,10,0)
(156,10,0)
(211,138,0)
(211,91,0)
(170,27,0)
(32,138,0)
(81,17,0)
(26,57,0)
(14,0,0)
(57,84,0)
(126,17,0)
(205,83,0)
(41,149,0)
(32,123,0)
(127,29,0)
(78,136,0)
(175,76,0)
(28,10,0)
(150,171,0)
(215,111,0)
(211,131,0)
(201,103,0)
(36,111,0)
(32,200,0)
(168,83,0)
(216,93,0)
(159,10,0)
(88,197,0)
(183,155,0)
(200,184,0)
(32,120,0)
(11,44,0)
(32,36,0)
(72,155,0)
(40,127,0)
(46,158,0)
(6,117,0)
(11,4,0)
(112,73,0)
(32,91,0)
(214,119,0)
(140,215,0)
(144,10,0)
(211,49,0)
(115,71,0)
(37,148,0)
(77,200,0)
(146,9,0)
(114,11,0)
(9,107,0)
(68,136,0)
(86,155,0)
(213,121,0)
(133,131,0)
(147,71,0)
(72,93,0)
(34,104,0)
(104,34,0)
(91,197,0)
(63,140,0)
(51,10,0)
(173,111,0)
(44,97,0)
(78,36,0)
(71,10,0)
(127,40,0)
(155,72,0)
(78,131,0)
(145,10,0)
(212,43,0)
(163,10,0)
(32,125,0)
(13,136,0)
(45,171,0)
(82,107,0)
(78,125,0)
(45,10,0)
(84,57,0)
(111,10,0)
(157,60,0)
(130,10,0)
(57,10,0)
(211,31,0)
(44,11,0)
(50,10,0)
(47,71,0)
(166,4,0)
(186,29,0)
(81,83,0)
(202,67,0)
(129,91,0)
(211,36,0)
(107,9,0)
(200,71,0)
(75,186,0)
(144,76,0)
(27,28,0)
(149,57,0)
(58,19,0)
(1,39,0)
(2,115,0)
(32,205,0)
(24,101,0)
(85,47,0)
(149,41,0)
(199,177,0)
(160,31,0)
(65,127,0)
(125,83,0)
(205,39,0)
(138,51,0)
(134,10,0)
(16,72,0)
(48,71,0)
(42,147,0)
(167,196,0)
(147,42,0)
(43,71,0)
(67,83,0)
(83,168,0)
(125,159,0)
(148,132,0)
(158,46,0)
(5,153,0)
(117,92,0)
(73,153,0)
(76,203,0)
(107,82,0)
(136,71,0)
(9,71,0)
(184,10,0)
(52,28,0)
(118,199,0)
(48,10,0)
(159,158,0)
(15,81,0)
(215,25,0)
(67,78,0)
(12,128,0)
(33,10,0)
(27,29,0)
(53,104,0)
(139,130,0)
(103,29,0)
(93,72,0)
(128,49,0)
(145,34,0)
(120,0,0)
(100,101,0)
(176,78,0)
(111,56,0)
(6,71,0)
(73,10,0)
(214,10,0)
(99,200,0)
(153,5,0)
(76,175,0)
(193,205,0)
(158,159,0)
(123,71,0)
(105,162,0)
(56,111,0)
(154,125,0)
(179,4,0)
(206,120,0)
(91,83,0)
(120,111,0)
(34,145,0)
(192,9,0)
(136,163,0)
(136,68,1)
(173,45,1)
(211,31,1)
(126,177,1)
(211,123,1)
(78,120,1)
(90,197,1)
(81,83,1)
(145,34,1)
(86,22,1)
(13,148,1)
(28,27,1)
(211,180,1)
(158,46,1)
(117,92,1)
(214,119,1)
(157,71,1)
(96,198,1)
(210,69,1)
(135,65,1)
(55,75,1)
(100,71,1)
(32,138,1)
(128,40,1)
(35,58,1)
(191,123,1)
(171,150,1)
(71,72,1)
(152,59,1)
(93,216,1)
(115,2,1)
(121,213,1)
(30,108,1)
(162,71,1)
(99,51,1)
(81,15,1)
(144,188,1)
(136,71,1)
(211,131,1)
(128,12,1)
(66,34,1)
(0,14,1)
(94,31,1)
(4,179,1)
(146,190,1)
(78,36,1)
(32,30,1)
(37,117,1)
(172,112,1)
(116,140,1)
(183,86,1)
(185,122,1)
(89,214,1)
(175,71,1)
(27,165,1)
(78,136,1)
(123,71,1)
(104,98,1)
(178,193,1)
(95,47,1)
(211,91,1)
(118,81,1)
(123,151,1)
(138,83,1)
(184,142,1)
(76,175,1)
(100,3,1)
(78,205,1)
(82,190,1)
(11,114,1)
(187,17,1)
(101,24,1)
(208,95,1)
(36,111,1)
(153,5,1)
(125,189,1)
(103,102,1)
(57,149,1)
(9,163,1)
(77,99,1)
(109,136,1)
(199,54,1)
(180,19,1)
(78,176,1)
(20,133,1)
(6,207,1)
(215,25,1)
(119,186,1)
(14,120,1)
(11,4,1)
(211,100,1)
(211,200,1)
(32,91,1)
(41,103,1)
(72,92,1)
(127,29,1)
(7,122,1)
(32,125,1)
(40,127,1)
(43,212,1)
(197,88,1)
(78,131,1)
(42,147,1)
(42,76,1)
(89,82,1)
(78,125,1)
(113,202,1)
(144,76,1)
(215,94,1)
(107,174,1)
(12,40,1)
(47,71,1)
(91,129,1)
(23,116,1)
(36,18,1)
(164,198,1)
(48,71,1)
(142,200,1)
(211,205,1)
(54,118,1)
(168,194,1)
(186,29,1)
(132,115,1)
(65,211,1)
(59,76,1)
(168,71,1)
(62,89,1)
(15,90,1)
(133,60,1)
(153,172,1)
(85,60,1)
(196,167,1)
(72,93,1)
(8,37,1)
(22,124,1)
(211,120,1)
(56,43,1)
(67,113,1)
(167,36,1)
(44,97,1)
(210,92,1)
(73,111,1)
(145,66,1)
(83,168,1)
(57,84,1)
(60,71,1)
(16,93,1)
(24,100,1)
(125,83,1)
(78,162,1)
(200,71,1)
(129,181,1)
(201,26,1)
(31,83,1)
(174,9,1)
(198,82,1)
(185,7,1)
(69,131,1)
(169,160,1)
(19,35,1)
(52,27,1)
(98,53,1)
(88,91,1)
(87,162,1)
(2,8,1)
(179,166,1)
(27,29,1)
(140,215,1)
(21,173,1)
(111,56,1)
(107,9,1)
(26,84,1)
(147,71,1)
(45,171,1)
(115,71,1)
(130,139,1)
(211,125,1)
(32,31,1)
(31,169,1)
(34,104,1)
(202,159,1)
(160,78,1)
(141,210,1)
(108,42,1)
(188,48,1)
(200,77,1)
(6,117,1)
(105,64,1)
(212,21,1)
(117,191,1)
(56,209,1)
(32,136,1)
(211,136,1)
(72,16,1)
(211,138,1)
(82,107,1)
(75,28,1)
(112,111,1)
(64,163,1)
(192,146,1)
(53,101,1)
(121,29,1)
(206,196,1)
(18,195,1)
(120,111,1)
(32,36,1)
(149,41,1)
(6,71,1)
(70,119,1)
(32,67,1)
(127,135,1)
(195,73,1)
(122,121,1)
(47,85,1)
(199,29,1)
(193,83,1)
(60,157,1)
(161,206,1)
(177,199,1)
(106,187,1)
(189,154,1)
(67,83,1)
(91,83,1)
(211,162,1)
(140,63,1)
(32,200,1)
(138,106,1)
(110,164,1)
(42,59,1)
(32,123,1)
(78,123,1)
(103,29,1)
(163,109,1)
(102,201,1)
(175,62,1)
(148,132,1)
(51,44,1)
(186,55,1)
(205,178,1)
(143,0,1)
(150,87,1)
(158,125,1)
(32,131,1)
(32,81,1)
(120,161,1)
(213,96,1)
(32,120,1)
(176,67,1)
(58,185,1)
(39,1,1)
(154,39,1)
(207,110,1)
(43,71,1)
(73,153,1)
(166,138,1)
(151,141,1)
(1,205,1)
(74,23,1)
(84,74,1)
(130,83,1)
(155,183,1)
(68,13,1)
(131,71,1)
(17,126,1)
(139,57,1)
(137,184,1)
(164,128,1)
(190,42,1)
(3,137,1)
(38,143,1)
(214,70,1)
(131,20,1)
(32,162,1)
(147,152,1)
(211,36,1)
(93,155,1)
(170,145,1)
(208,32,1)
(9,71,1)
(32,205,1)
(84,29,1)
(181,130,1)
(19,29,1)
(28,52,1)
(211,81,1)
(215,111,1)
(208,144,1)
(194,38,1)
(211,67,1)
(32,100,1)
(82,76,1)
(44,11,1)
(4,29,1)
(72,155,1)
(9,192,1)
(165,170,1)
(205,83,1)
(48,6,1)
(104,29,1)
(162,105,1)
(159,158,1)
(215,25,2)
(32,136,2)
(189,60,2)
(99,60,2)
(167,60,2)
(100,71,2)
(55,60,2)
(200,60,2)
(6,117,2)
(140,63,2)
(110,82,2)
(103,29,2)
(175,82,2)
(186,60,2)
(208,95,2)
(186,29,2)
(41,103,2)
(42,60,2)
(177,199,2)
(94,60,2)
(72,155,2)
(143,60,2)
(172,60,2)
(164,82,2)
(74,60,2)
(36,111,2)
(179,60,2)
(198,82,2)
(215,60,2)
(51,60,2)
(78,125,2)
(119,186,2)
(197,60,2)
(59,82,2)
(131,71,2)
(42,82,2)
(211,136,2)
(115,71,2)
(82,42,2)
(173,60,2)
(56,209,2)
(206,60,2)
(101,60,2)
(32,67,2)
(139,60,2)
(31,60,2)
(9,163,2)
(42,76,2)
(184,142,2)
(159,60,2)
(8,60,2)
(120,111,2)
(145,60,2)
(200,71,2)
(127,29,2)
(213,198,2)
(9,71,2)
(199,60,2)
(53,60,2)
(62,82,2)
(158,46,2)
(144,82,2)
(153,60,2)
(28,27,2)
(136,60,2)
(32,120,2)
(184,60,2)
(56,43,2)
(111,60,2)
(32,138,2)
(56,60,2)
(210,92,2)
(191,60,2)
(40,127,2)
(93,216,2)
(207,82,2)
(60,71,2)
(14,60,2)
(73,153,2)
(36,60,2)
(211,81,2)
(81,60,2)
(194,60,2)
(193,60,2)
(32,123,2)
(169,60,2)
(48,82,2)
(171,60,2)
(149,41,2)
(211,125,2)
(111,56,2)
(126,60,2)
(109,60,2)
(32,31,2)
(4,29,2)
(170,60,2)
(133,60,2)
(78,162,2)
(185,198,2)
(72,93,2)
(123,60,2)
(65,198,2)
(166,60,2)
(32,91,2)
(81,83,2)
(116,60,2)
(125,60,2)
(6,71,2)
(120,60,2)
(30,42,2)
(51,44,2)
(158,60,2)
(44,97,2)
(57,60,2)
(91,83,2)
(32,205,2)
(18,60,2)
(123,71,2)
(201,60,2)
(37,60,2)
(205,60,2)
(208,32,2)
(62,60,2)
(187,60,2)
(32,125,2)
(205,83,2)
(165,60,2)
(211,131,2)
(78,136,2)
(17,126,2)
(125,83,2)
(148,60,2)
(162,60,2)
(185,122,2)
(126,177,2)
(103,60,2)
(76,82,2)
(168,71,2)
(104,60,2)
(9,190,2)
(7,198,2)
(211,198,2)
(142,60,2)
(77,60,2)
(27,60,2)
(140,60,2)
(3,60,2)
(211,200,2)
(102,60,2)
(113,60,2)
(105,60,2)
(38,60,2)
(78,120,2)
(163,60,2)
(188,82,2)
(211,205,2)
(4,60,2)
(41,60,2)
(72,92,2)
(73,60,2)
(132,60,2)
(131,60,2)
(83,60,2)
(24,60,2)
(115,60,2)
(67,83,2)
(190,42,2)
(144,76,2)
(148,132,2)
(119,60,2)
(211,36,2)
(154,60,2)
(129,60,2)
(181,60,2)
(85,60,2)
(161,60,2)
(177,60,2)
(69,60,2)
(45,60,2)
(70,60,2)
(6,82,2)
(84,29,2)
(20,60,2)
(121,29,2)
(73,111,2)
(32,200,2)
(195,60,2)
(160,60,2)
(215,111,2)
(178,60,2)
(202,60,2)
(78,60,2)
(31,83,2)
(211,31,2)
(108,42,2)
(19,198,2)
(107,9,2)
(208,144,2)
(75,60,2)
(162,71,2)
(83,168,2)
(26,60,2)
(106,60,2)
(54,60,2)
(59,60,2)
(48,6,2)
(43,71,2)
(88,60,2)
(44,60,2)
(149,60,2)
(122,198,2)
(32,81,2)
(211,67,2)
(89,60,2)
(211,100,2)
(57,149,2)
(2,60,2)
(17,60,2)
(13,60,2)
(11,60,2)
(84,60,2)
(89,82,2)
(78,123,2)
(130,60,2)
(82,107,2)
(32,42,2)
(28,60,2)
(130,83,2)
(76,175,2)
(153,5,2)
(140,215,2)
(168,60,2)
(19,29,2)
(58,198,2)
(57,84,2)
(152,59,2)
(211,123,2)
(100,60,2)
(107,190,2)
(40,198,2)
(132,115,2)
(39,60,2)
(47,60,2)
(1,60,2)
(146,190,2)
(52,60,2)
(90,60,2)
(104,29,2)
(21,60,2)
(67,60,2)
(150,60,2)
(199,29,2)
(27,29,2)
(32,162,2)
(43,60,2)
(147,59,2)
(174,190,2)
(42,147,2)
(82,76,2)
(147,71,2)
(78,131,2)
(78,205,2)
(141,60,2)
(45,171,2)
(68,60,2)
(128,40,2)
(122,121,2)
(12,198,2)
(34,104,2)
(112,60,2)
(15,60,2)
(34,60,2)
(44,11,2)
(78,36,2)
(214,60,2)
(180,198,2)
(128,198,2)
(211,162,2)
(23,60,2)
(211,138,2)
(196,60,2)
(98,60,2)
(159,158,2)
(11,114,2)
(71,72,2)
(32,131,2)
(66,60,2)
(212,60,2)
(138,60,2)
(137,60,2)
(96,198,2)
(116,140,2)
(135,198,2)
(121,198,2)
(91,60,2)
(151,60,2)
(145,34,2)
(138,83,2)
(175,71,2)
(136,71,2)
(95,60,2)
(211,120,2)
(211,91,2)
(118,60,2)
(48,71,2)
(32,36,2)
(47,71,2)
(210,60,2)
(64,60,2)
(76,60,2)
(175,60,2)
(32,100,2)
(35,198,2)
(87,60,2)
(11,4,2)
(117,60,2)
(117,92,2)
(192,190,2)
(214,119,2)
(127,198,2)
(176,60,2)
(0,60,2)
-----------------------------------
(0,prssdp->suborder = 0x0e)
(1,DASD_ECKD_CCW_PSF)
(2,flags)
(3,status)
(4,lcu->uac)
(5,struct dasd_psf_prssd_data)
(6,cqr->memdev)
(7,flags)
(8,cqr)
(9,cqr->retries)
(10,)
(11,(addr_t)
(12,flags)
(13,cqr)
(14,0x0e)
(15,count)
(16,device)
(17,ccw->count = sizeof(*(lcu->uac)
(18,order)
(19,lcu->flags)
(20,startdev)
(21,cqr)
(22,DASD_ECKD_MAGIC)
(23,lcu)
(24,DASD_CQR_FILLED)
(25,addr_t)
(26,0)
(27,lcu->flags)
(28,lcu->flags &= ~NEED_UAC_UPDATE)
(29,struct alias_lcu *lcu)
(30,-EOPNOTSUPP)
(31,ccw->cda)
(32,return -EOPNOTSUPP;)
(33,cqr)
(34,&lcu->lock)
(35,flags)
(36,prssdp->order)
(37,DASD_CQR_FLAGS_USE_ERP)
(38,cqr)
(39,ccw->cmd_code = DASD_ECKD_CCW_PSF)
(40,&lcu->lock)
(41,*(lcu->uac)
(42,rc && suborder_not_supported(cqr)
(43,cqr->data)
(44,(__u32)
(45,cqr->expires = 20 * HZ)
(46,struct dasd_psf_prssd_data)
(47,PTR_ERR(cqr)
(48,dasd_kfree_request(cqr, cqr->memdev)
(49,)
(50,rc)
(51,ccw->cda = (__u32)
(52,~NEED_UAC_UPDATE)
(53,lcu)
(54,uac)
(55,lock)
(56,(struct dasd_psf_prssd_data *)
(57,memset(lcu->uac, 0, sizeof(*(lcu->uac)
(58,lcu)
(59,rc)
(60,IS_ERR(cqr)
(61,flags)
(62,cqr)
(63,__u32)
(64,cqr)
(65,lcu)
(66,flags)
(67,ccw->flags)
(68,retries)
(69,device)
(70,flags)
(71,cqr = dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */\\t+ 1 /* RSSD */,\n\\n\\t\\t\\t\\t   (sizeof(struct dasd_psf_prssd_data)
(72,dasd_kmalloc_request(DASD_ECKD_MAGIC, 1 /* PSF */\\t+ 1 /* RSSD */,\n\\n\\t\\t\\t\\t   (sizeof(struct dasd_psf_prssd_data)
(73,memset(prssdp, 0, sizeof(struct dasd_psf_prssd_data)
(74,uac)
(75,lcu)
(76,rc = dasd_sleep_on(cqr)
(77,buildclk)
(78,ccw->flags |= CCW_FLAG_CC)
(79,if (rc)
(80,if (IS_ERR(cqr)
(81,ccw->count)
(82,rc && (cqr->retries > 0)
(83,ccw = cqr->cpaddr)
(84,lcu->uac)
(85,cqr)
(86,1)
(87,20)
(88,DASD_ECKD_CCW_RSSD)
(89,rc)
(90,ccw)
(91,ccw->cmd_code)
(92,struct dasd_device *device)
(93,sizeof(struct dasd_psf_prssd_data)
(94,prssdp)
(95,return PTR_ERR(cqr)
(96,lcu)
(97,__u32)
(98,lock)
(99,cqr)
(100,cqr->status)
(101,cqr->status = DASD_CQR_FILLED)
(102,uac)
(103,lcu->uac)
(104,lcu->lock)
(105,expires)
(106,cda)
(107,cqr->retries > 0)
(108,EOPNOTSUPP)
(109,10)
(110,cqr)
(111,prssdp = (struct dasd_psf_prssd_data *)
(112,prssdp)
(113,flags)
(114,addr_t)
(115,cqr->flags)
(116,ccw->cda = (__u32)
(117,cqr->memdev = device)
(118,lcu)
(119,&lcu->lock)
(120,prssdp->suborder)
(121,lcu->lock)
(122,&lcu->lock)
(123,cqr->memdev)
(124,cqr)
(125,ccw->count)
(126,sizeof(*(lcu->uac)
(127,lcu->lock)
(128,spin_unlock_irqrestore(&lcu->lock, flags)
(129,cmd_code)
(130,ccw++)
(131,cqr->startdev)
(132,&cqr->flags)
(133,cqr)
(134,ccw)
(135,lock)
(136,cqr->retries)
(137,cqr)
(138,ccw->cda)
(139,ccw)
(140,(__u32)
(141,cqr)
(142,get_tod_clock()
(143,ccw)
(144,return rc;)
(145,spin_lock_irqsave(&lcu->lock, flags)
(146,cqr)
(147,suborder_not_supported(cqr)
(148,clear_bit(DASD_CQR_FLAGS_USE_ERP, &cqr->flags)
(149,sizeof(*(lcu->uac)
(150,HZ)
(151,memdev)
(152,cqr)
(153,sizeof(struct dasd_psf_prssd_data)
(154,ccw)
(155,1 /* PSF */\\t+ 1)
(156,do)
(157,cqr)
(158,sizeof(struct dasd_psf_prssd_data)
(159,ccw->count = sizeof(struct dasd_psf_prssd_data)
(160,ccw)
(161,suborder)
(162,cqr->expires)
(163,cqr->retries = 10)
(164,cqr)
(165,flags)
(166,lcu)
(167,PSF_ORDER_PRSSD)
(168,cqr->cpaddr)
(169,cda)
(170,lcu)
(171,20 * HZ)
(172,0)
(173,prssdp)
(174,0)
(175,dasd_sleep_on(cqr)
(176,CCW_FLAG_CC)
(177,*(lcu->uac)
(178,cmd_code)
(179,uac)
(180,NEED_UAC_UPDATE)
(181,ccw)
(182,if (rc && suborder_not_supported(cqr)
(183,1)
(184,cqr->buildclk = get_tod_clock()
(185,spin_lock_irqsave(&lcu->lock, flags)
(186,lcu->lock)
(187,ccw)
(188,rc)
(189,count)
(190,rc)
(191,device)
(192,retries)
(193,ccw)
(194,cpaddr)
(195,prssdp)
(196,prssdp->order = PSF_ORDER_PRSSD)
(197,ccw->cmd_code = DASD_ECKD_CCW_RSSD)
(198,rc)
(199,lcu->uac)
(200,cqr->buildclk)
(201,lcu)
(202,ccw)
(203,)
(204,prssdp)
(205,ccw->cmd_code)
(206,prssdp)
(207,memdev)
(208,RET)
(209,struct dasd_psf_prssd_data *)
(210,cqr->startdev = device)
(211,lcu->flags |= NEED_UAC_UPDATE)
(212,data)
(213,lock)
(214,spin_unlock_irqrestore(&lcu->lock, flags)
(215,(addr_t)
(216,struct dasd_psf_prssd_data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^