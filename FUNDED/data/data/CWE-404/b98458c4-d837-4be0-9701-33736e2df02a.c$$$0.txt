-----label-----
0
-----code-----
static int of_dra7_atl_clk_probe(struct platform_device *pdev)
{
	struct device_node *node = pdev->dev.of_node;
	struct dra7_atl_clock_info *cinfo;
	int i;
	int ret = 0;

	if (!node)
		return -ENODEV;

	cinfo = devm_kzalloc(&pdev->dev, sizeof(*cinfo), GFP_KERNEL);
	if (!cinfo)
		return -ENOMEM;

	cinfo->iobase = of_iomap(node, 0);
	cinfo->dev = &pdev->dev;
	pm_runtime_enable(cinfo->dev);
	pm_runtime_irq_safe(cinfo->dev);

	pm_runtime_get_sync(cinfo->dev);
	atl_write(cinfo, DRA7_ATL_PCLKMUX_REG(0), DRA7_ATL_PCLKMUX);

	for (i = 0; i < DRA7_ATL_INSTANCES; i++) {
		struct device_node *cfg_node;
		char prop[5];
		struct dra7_atl_desc *cdesc;
		struct of_phandle_args clkspec;
		struct clk *clk;
		int rc;

		rc = of_parse_phandle_with_args(node, "ti,provided-clocks",
						NULL, i, &clkspec);

		if (rc) {
			pr_err("%s: failed to lookup atl clock %d\n", __func__,
			       i);
			return -EINVAL;
		}

		clk = of_clk_get_from_provider(&clkspec);
		if (IS_ERR(clk)) {
			pr_err("%s: failed to get atl clock %d from provider\n",
			       __func__, i);
			return PTR_ERR(clk);
		}

		cdesc = to_atl_desc(__clk_get_hw(clk));
		cdesc->cinfo = cinfo;
		cdesc->id = i;

		/* Get configuration for the ATL instances */
		snprintf(prop, sizeof(prop), "atl%u", i);
		cfg_node = of_find_node_by_name(node, prop);
		if (cfg_node) {
			ret = of_property_read_u32(cfg_node, "bws",
						   &cdesc->bws);
			ret |= of_property_read_u32(cfg_node, "aws",
						    &cdesc->aws);
			if (!ret) {
				cdesc->valid = true;
				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),
					  cdesc->bws);
				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),
					  cdesc->aws);
			}
		}

		cdesc->probed = true;
		/*
		 * Enable the clock if it has been asked prior to loading the
		 * hw driver
		 */
		if (cdesc->enabled)
			atl_clk_enable(__clk_get_hw(clk));
	}
	pm_runtime_put_sync(cinfo->dev);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
45,46
45,47
46,47
47,48
49,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
61,62
61,63
62,63
65,66
66,67
67,68
68,69
70,71
72,73
72,74
73,74
74,75
76,77
77,78
78,79
80,81
81,82
81,83
82,83
82,84
83,84
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
94,96
95,96
98,99
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
107,109
108,109
111,112
112,113
112,114
113,114
115,116
115,117
116,117
119,120
120,121
120,122
121,122
123,124
123,125
124,125
127,128
128,129
128,130
128,131
128,132
129,130
131,132
133,134
133,135
134,135
137,138
139,140
139,141
139,142
139,143
140,141
141,142
141,143
142,143
145,146
145,147
146,147
148,149
150,151
151,152
153,154
153,155
153,156
153,157
153,158
153,159
153,160
153,161
153,162
153,163
153,164
153,165
153,166
153,167
153,168
153,169
153,170
153,171
154,155
155,156
155,157
156,157
158,159
158,160
161,162
162,163
162,164
164,165
164,166
166,167
168,169
169,170
169,171
170,171
172,173
172,174
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
188,189
189,190
189,191
191,192
193,194
194,195
194,196
195,196
197,198
197,199
197,200
197,201
197,202
197,203
198,199
200,201
203,204
205,206
207,208
208,209
210,211
210,212
211,212
213,214
213,215
214,215
215,216
215,217
215,218
215,219
216,217
219,220
221,222
223,224
224,225
225,226
227,228
228,229
228,230
229,230
231,232
231,233
232,233
234,235
235,236
237,238
237,239
238,239
238,240
239,240
241,242
243,244
243,245
244,245
245,246
245,247
245,248
245,249
246,247
249,250
251,252
253,254
254,255
254,256
255,256
257,258
259,260
260,261
260,262
261,262
263,264
263,265
264,265
266,267
266,268
267,268
269,270
271,272
272,273
272,274
273,274
273,275
274,275
277,278
279,280
280,281
280,282
281,282
281,283
282,283
285,286
287,288
288,289
288,290
288,291
288,292
288,293
289,290
291,292
293,294
294,295
295,296
298,299
300,301
301,302
301,303
302,303
304,305
304,306
304,307
305,306
307,308
309,310
311,312
311,313
312,313
314,315
314,316
314,317
315,316
316,317
316,318
317,318
319,320
319,321
319,322
319,323
320,321
322,323
325,326
326,327
326,328
327,328
330,331
331,332
331,333
332,333
334,335
334,336
334,337
334,338
335,336
337,338
340,341
341,342
341,343
342,343
345,346
345,347
346,347
347,348
349,350
349,351
349,352
350,351
351,352
351,353
352,353
352,354
353,354
357,358
358,359
358,360
358,361
358,362
359,360
361,362
363,364
363,365
364,365
366,367
368,369
368,370
369,370
372,373
373,374
373,375
373,376
373,377
374,375
376,377
378,379
378,380
379,380
381,382
383,384
383,385
384,385
387,388
388,389
388,390
389,390
389,391
390,391
394,395
394,396
395,396
395,397
396,397
399,400
400,401
400,402
401,402
403,404
403,405
404,405
406,407
408,409
409,410
409,411
410,411
412,413
412,414
413,414
416,417
417,418
-----nextToken-----
2,4,7,9,10,15,17,18,23,24,25,29,31,32,35,37,40,42,44,48,52,56,59,63,64,69,71,75,79,84,85,88,90,91,96,97,101,102,106,109,110,114,117,118,122,125,126,130,132,135,136,138,143,144,147,149,152,157,159,160,163,165,167,171,173,174,178,180,184,186,187,190,192,196,199,201,202,204,206,209,212,217,218,220,222,226,230,233,236,240,242,247,248,250,252,256,258,262,265,268,270,275,276,278,283,284,286,290,292,296,297,299,303,306,308,310,313,318,321,323,324,328,329,333,336,338,339,343,344,348,354,355,356,360,362,365,367,370,371,375,377,380,382,385,386,391,392,393,397,398,402,405,407,411,414,415,418
-----computeFrom-----
54,55
54,56
81,82
81,83
93,94
93,95
141,142
141,143
145,146
145,147
194,195
194,196
228,229
228,230
260,261
260,262
272,273
272,274
280,281
280,282
301,302
301,303
316,317
316,318
331,332
331,333
351,352
351,353
388,389
388,390
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int of_dra7_atl_clk_probe(struct platform_device *pdev){	struct device_node *node = pdev->dev.of_node;	struct dra7_atl_clock_info *cinfo;	int i;	int ret = 0;	if (!node)		return -ENODEV;	cinfo = devm_kzalloc(&pdev->dev, sizeof(*cinfo), GFP_KERNEL);	if (!cinfo)		return -ENOMEM;	cinfo->iobase = of_iomap(node, 0);	cinfo->dev = &pdev->dev;	pm_runtime_enable(cinfo->dev);	pm_runtime_irq_safe(cinfo->dev);	pm_runtime_get_sync(cinfo->dev);	atl_write(cinfo, DRA7_ATL_PCLKMUX_REG(0), DRA7_ATL_PCLKMUX);	for (i = 0; i < DRA7_ATL_INSTANCES; i++) {		struct device_node *cfg_node;		char prop[5];		struct dra7_atl_desc *cdesc;		struct of_phandle_args clkspec;		struct clk *clk;		int rc;		rc = of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec);		if (rc) {			pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);			return -EINVAL;		}		clk = of_clk_get_from_provider(&clkspec);		if (IS_ERR(clk)) {			pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);			return PTR_ERR(clk);		}		cdesc = to_atl_desc(__clk_get_hw(clk));		cdesc->cinfo = cinfo;		cdesc->id = i;		/* Get configuration for the ATL instances */		snprintf(prop, sizeof(prop), "atl%u", i);		cfg_node = of_find_node_by_name(node, prop);		if (cfg_node) {			ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);			ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);			if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}		}		cdesc->probed = true;		/*		 * Enable the clock if it has been asked prior to loading the		 * hw driver		 */		if (cdesc->enabled)			atl_clk_enable(__clk_get_hw(clk));	}	pm_runtime_put_sync(cinfo->dev);	return ret;}
static int
of_dra7_atl_clk_probe(struct platform_device *pdev)
of_dra7_atl_clk_probe
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct device_node *node = pdev->dev.of_node;	struct dra7_atl_clock_info *cinfo;	int i;	int ret = 0;	if (!node)		return -ENODEV;	cinfo = devm_kzalloc(&pdev->dev, sizeof(*cinfo), GFP_KERNEL);	if (!cinfo)		return -ENOMEM;	cinfo->iobase = of_iomap(node, 0);	cinfo->dev = &pdev->dev;	pm_runtime_enable(cinfo->dev);	pm_runtime_irq_safe(cinfo->dev);	pm_runtime_get_sync(cinfo->dev);	atl_write(cinfo, DRA7_ATL_PCLKMUX_REG(0), DRA7_ATL_PCLKMUX);	for (i = 0; i < DRA7_ATL_INSTANCES; i++) {		struct device_node *cfg_node;		char prop[5];		struct dra7_atl_desc *cdesc;		struct of_phandle_args clkspec;		struct clk *clk;		int rc;		rc = of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec);		if (rc) {			pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);			return -EINVAL;		}		clk = of_clk_get_from_provider(&clkspec);		if (IS_ERR(clk)) {			pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);			return PTR_ERR(clk);		}		cdesc = to_atl_desc(__clk_get_hw(clk));		cdesc->cinfo = cinfo;		cdesc->id = i;		/* Get configuration for the ATL instances */		snprintf(prop, sizeof(prop), "atl%u", i);		cfg_node = of_find_node_by_name(node, prop);		if (cfg_node) {			ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);			ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);			if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}		}		cdesc->probed = true;		/*		 * Enable the clock if it has been asked prior to loading the		 * hw driver		 */		if (cdesc->enabled)			atl_clk_enable(__clk_get_hw(clk));	}	pm_runtime_put_sync(cinfo->dev);	return ret;}
struct device_node *node = pdev->dev.of_node;
struct device_node *node = pdev->dev.of_node;
struct device_node
device_node
*node = pdev->dev.of_node
*
node
= pdev->dev.of_node
pdev->dev.of_node
pdev->dev
pdev
pdev
dev
of_node
struct dra7_atl_clock_info *cinfo;
struct dra7_atl_clock_info *cinfo;
struct dra7_atl_clock_info
dra7_atl_clock_info
*cinfo
*
cinfo
int i;
int i;
int
i
i
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
if (!node)		return -ENODEV;
!node
node
node
return -ENODEV;
-ENODEV
ENODEV
ENODEV
cinfo = devm_kzalloc(&pdev->dev, sizeof(*cinfo), GFP_KERNEL);
cinfo = devm_kzalloc(&pdev->dev, sizeof(*cinfo), GFP_KERNEL)
cinfo
cinfo
devm_kzalloc(&pdev->dev, sizeof(*cinfo), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&pdev->dev
pdev->dev
pdev
pdev
dev
sizeof(*cinfo)
(*cinfo)
*cinfo
cinfo
cinfo
GFP_KERNEL
GFP_KERNEL
if (!cinfo)		return -ENOMEM;
!cinfo
cinfo
cinfo
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
cinfo->iobase = of_iomap(node, 0);
cinfo->iobase = of_iomap(node, 0)
cinfo->iobase
cinfo
cinfo
iobase
of_iomap(node, 0)
of_iomap
of_iomap
node
node
0
cinfo->dev = &pdev->dev;
cinfo->dev = &pdev->dev
cinfo->dev
cinfo
cinfo
dev
&pdev->dev
pdev->dev
pdev
pdev
dev
pm_runtime_enable(cinfo->dev);
pm_runtime_enable(cinfo->dev)
pm_runtime_enable
pm_runtime_enable
cinfo->dev
cinfo
cinfo
dev
pm_runtime_irq_safe(cinfo->dev);
pm_runtime_irq_safe(cinfo->dev)
pm_runtime_irq_safe
pm_runtime_irq_safe
cinfo->dev
cinfo
cinfo
dev
pm_runtime_get_sync(cinfo->dev);
pm_runtime_get_sync(cinfo->dev)
pm_runtime_get_sync
pm_runtime_get_sync
cinfo->dev
cinfo
cinfo
dev
atl_write(cinfo, DRA7_ATL_PCLKMUX_REG(0), DRA7_ATL_PCLKMUX);
atl_write(cinfo, DRA7_ATL_PCLKMUX_REG(0), DRA7_ATL_PCLKMUX)
atl_write
atl_write
cinfo
cinfo
DRA7_ATL_PCLKMUX_REG(0)
DRA7_ATL_PCLKMUX_REG
DRA7_ATL_PCLKMUX_REG
0
DRA7_ATL_PCLKMUX
DRA7_ATL_PCLKMUX
for (i = 0; i < DRA7_ATL_INSTANCES; i++) {		struct device_node *cfg_node;		char prop[5];		struct dra7_atl_desc *cdesc;		struct of_phandle_args clkspec;		struct clk *clk;		int rc;		rc = of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec);		if (rc) {			pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);			return -EINVAL;		}		clk = of_clk_get_from_provider(&clkspec);		if (IS_ERR(clk)) {			pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);			return PTR_ERR(clk);		}		cdesc = to_atl_desc(__clk_get_hw(clk));		cdesc->cinfo = cinfo;		cdesc->id = i;		/* Get configuration for the ATL instances */		snprintf(prop, sizeof(prop), "atl%u", i);		cfg_node = of_find_node_by_name(node, prop);		if (cfg_node) {			ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);			ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);			if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}		}		cdesc->probed = true;		/*		 * Enable the clock if it has been asked prior to loading the		 * hw driver		 */		if (cdesc->enabled)			atl_clk_enable(__clk_get_hw(clk));	}
i = 0;
i = 0
i
i
0
i < DRA7_ATL_INSTANCES
i
i
DRA7_ATL_INSTANCES
DRA7_ATL_INSTANCES
i++
i
i
{		struct device_node *cfg_node;		char prop[5];		struct dra7_atl_desc *cdesc;		struct of_phandle_args clkspec;		struct clk *clk;		int rc;		rc = of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec);		if (rc) {			pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);			return -EINVAL;		}		clk = of_clk_get_from_provider(&clkspec);		if (IS_ERR(clk)) {			pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);			return PTR_ERR(clk);		}		cdesc = to_atl_desc(__clk_get_hw(clk));		cdesc->cinfo = cinfo;		cdesc->id = i;		/* Get configuration for the ATL instances */		snprintf(prop, sizeof(prop), "atl%u", i);		cfg_node = of_find_node_by_name(node, prop);		if (cfg_node) {			ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);			ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);			if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}		}		cdesc->probed = true;		/*		 * Enable the clock if it has been asked prior to loading the		 * hw driver		 */		if (cdesc->enabled)			atl_clk_enable(__clk_get_hw(clk));	}
struct device_node *cfg_node;
struct device_node *cfg_node;
struct device_node
device_node
*cfg_node
*
cfg_node
char prop[5];
char prop[5];
char
prop[5]
prop
[5]
5
struct dra7_atl_desc *cdesc;
struct dra7_atl_desc *cdesc;
struct dra7_atl_desc
dra7_atl_desc
*cdesc
*
cdesc
struct of_phandle_args clkspec;
struct of_phandle_args clkspec;
struct of_phandle_args
of_phandle_args
clkspec
clkspec
struct clk *clk;
struct clk *clk;
struct clk
clk
*clk
*
clk
int rc;
int rc;
int
rc
rc
rc = of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec);
rc = of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec)
rc
rc
of_parse_phandle_with_args(node, "ti,provided-clocks",						NULL, i, &clkspec)
of_parse_phandle_with_args
of_parse_phandle_with_args
node
node
"ti,provided-clocks"
NULL
NULL
i
i
&clkspec
clkspec
clkspec
if (rc) {			pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);			return -EINVAL;		}
rc
rc
{			pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);			return -EINVAL;		}
pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i);
pr_err("%s: failed to lookup atl clock %d\n", __func__,			       i)
pr_err
pr_err
"%s: failed to lookup atl clock %d\n"
__func__
__func__
i
i
return -EINVAL;
-EINVAL
EINVAL
EINVAL
clk = of_clk_get_from_provider(&clkspec);
clk = of_clk_get_from_provider(&clkspec)
clk
clk
of_clk_get_from_provider(&clkspec)
of_clk_get_from_provider
of_clk_get_from_provider
&clkspec
clkspec
clkspec
if (IS_ERR(clk)) {			pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);			return PTR_ERR(clk);		}
IS_ERR(clk)
IS_ERR
IS_ERR
clk
clk
{			pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);			return PTR_ERR(clk);		}
pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i);
pr_err("%s: failed to get atl clock %d from provider\n",			       __func__, i)
pr_err
pr_err
"%s: failed to get atl clock %d from provider\n"
__func__
__func__
i
i
return PTR_ERR(clk);
PTR_ERR(clk)
PTR_ERR
PTR_ERR
clk
clk
cdesc = to_atl_desc(__clk_get_hw(clk));
cdesc = to_atl_desc(__clk_get_hw(clk))
cdesc
cdesc
to_atl_desc(__clk_get_hw(clk))
to_atl_desc
to_atl_desc
__clk_get_hw(clk)
__clk_get_hw
__clk_get_hw
clk
clk
cdesc->cinfo = cinfo;
cdesc->cinfo = cinfo
cdesc->cinfo
cdesc
cdesc
cinfo
cinfo
cinfo
cdesc->id = i;
cdesc->id = i
cdesc->id
cdesc
cdesc
id
i
i
snprintf(prop, sizeof(prop), "atl%u", i);
snprintf(prop, sizeof(prop), "atl%u", i)
snprintf
snprintf
prop
prop
sizeof(prop)
(prop)
prop
prop
"atl%u"
i
i
cfg_node = of_find_node_by_name(node, prop);
cfg_node = of_find_node_by_name(node, prop)
cfg_node
cfg_node
of_find_node_by_name(node, prop)
of_find_node_by_name
of_find_node_by_name
node
node
prop
prop
if (cfg_node) {			ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);			ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);			if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}		}
cfg_node
cfg_node
{			ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);			ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);			if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}		}
ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws);
ret = of_property_read_u32(cfg_node, "bws",						   &cdesc->bws)
ret
ret
of_property_read_u32(cfg_node, "bws",						   &cdesc->bws)
of_property_read_u32
of_property_read_u32
cfg_node
cfg_node
"bws"
&cdesc->bws
cdesc->bws
cdesc
cdesc
bws
ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws);
ret |= of_property_read_u32(cfg_node, "aws",						    &cdesc->aws)
ret
ret
of_property_read_u32(cfg_node, "aws",						    &cdesc->aws)
of_property_read_u32
of_property_read_u32
cfg_node
cfg_node
"aws"
&cdesc->aws
cdesc->aws
cdesc
cdesc
aws
if (!ret) {				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}
!ret
ret
ret
{				cdesc->valid = true;				atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);				atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);			}
cdesc->valid = true;
cdesc->valid = true
cdesc->valid
cdesc
cdesc
valid
true
atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws);
atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i),					  cdesc->bws)
atl_write
atl_write
cinfo
cinfo
DRA7_ATL_BWSMUX_REG(i)
DRA7_ATL_BWSMUX_REG
DRA7_ATL_BWSMUX_REG
i
i
cdesc->bws
cdesc
cdesc
bws
atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws);
atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i),					  cdesc->aws)
atl_write
atl_write
cinfo
cinfo
DRA7_ATL_AWSMUX_REG(i)
DRA7_ATL_AWSMUX_REG
DRA7_ATL_AWSMUX_REG
i
i
cdesc->aws
cdesc
cdesc
aws
cdesc->probed = true;
cdesc->probed = true
cdesc->probed
cdesc
cdesc
probed
true
if (cdesc->enabled)			atl_clk_enable(__clk_get_hw(clk));
cdesc->enabled
cdesc
cdesc
enabled
atl_clk_enable(__clk_get_hw(clk));
atl_clk_enable(__clk_get_hw(clk))
atl_clk_enable
atl_clk_enable
__clk_get_hw(clk)
__clk_get_hw
__clk_get_hw
clk
clk
pm_runtime_put_sync(cinfo->dev);
pm_runtime_put_sync(cinfo->dev)
pm_runtime_put_sync
pm_runtime_put_sync
cinfo->dev
cinfo
cinfo
dev
return ret;
ret
ret
-----joern-----
(210,24,0)
(4,174,0)
(160,6,0)
(14,205,0)
(189,72,0)
(2,158,0)
(204,8,0)
(129,150,0)
(172,70,0)
(38,169,0)
(64,179,0)
(143,100,0)
(8,72,0)
(68,101,0)
(60,203,0)
(42,112,0)
(24,158,0)
(92,159,0)
(115,95,0)
(126,53,0)
(81,27,0)
(203,72,0)
(123,150,0)
(188,174,0)
(69,56,0)
(142,127,0)
(202,148,0)
(128,102,0)
(25,174,0)
(97,191,0)
(8,69,0)
(110,178,0)
(32,105,0)
(44,128,0)
(191,163,0)
(75,127,0)
(0,85,0)
(199,95,0)
(102,128,0)
(197,95,0)
(33,170,0)
(192,174,0)
(98,69,0)
(59,98,0)
(102,56,0)
(56,96,0)
(144,86,0)
(166,195,0)
(11,83,0)
(86,112,0)
(171,108,0)
(69,95,0)
(98,77,0)
(138,132,0)
(118,160,0)
(70,153,0)
(9,85,0)
(201,95,0)
(60,21,0)
(65,112,0)
(198,132,0)
(66,201,0)
(96,56,0)
(64,127,0)
(65,40,0)
(173,119,0)
(89,55,0)
(183,174,0)
(9,6,0)
(135,113,0)
(36,6,0)
(27,36,0)
(128,21,0)
(90,206,0)
(52,9,0)
(27,179,0)
(162,36,0)
(86,167,0)
(22,152,0)
(205,174,0)
(132,6,0)
(166,55,0)
(83,174,0)
(136,19,0)
(19,136,0)
(119,152,0)
(175,19,0)
(10,56,0)
(179,6,0)
(197,74,0)
(205,69,0)
(72,203,0)
(120,136,0)
(103,95,0)
(164,19,0)
(161,20,0)
(168,108,0)
(137,164,0)
(131,126,0)
(74,197,0)
(0,112,0)
(189,69,0)
(27,70,0)
(166,130,0)
(191,97,0)
(206,195,0)
(85,9,0)
(156,191,0)
(74,72,0)
(127,69,0)
(100,153,0)
(6,174,0)
(193,0,0)
(67,95,0)
(31,179,0)
(160,205,0)
(207,163,0)
(84,11,0)
(200,65,0)
(154,174,0)
(27,160,0)
(74,69,0)
(122,174,0)
(153,95,0)
(133,150,0)
(176,2,0)
(80,112,0)
(138,69,0)
(39,24,0)
(27,167,0)
(165,137,0)
(46,60,0)
(61,95,0)
(88,138,0)
(105,6,0)
(97,6,0)
(88,112,0)
(72,95,0)
(99,174,0)
(117,174,0)
(13,108,0)
(34,6,0)
(130,95,0)
(23,25,0)
(19,164,0)
(113,174,0)
(164,119,0)
(163,53,0)
(37,9,0)
(203,60,0)
(24,119,0)
(138,149,0)
(73,36,0)
(108,29,0)
(8,115,0)
(178,95,0)
(194,105,0)
(158,24,0)
(148,174,0)
(177,128,0)
(64,36,0)
(24,83,0)
(155,163,0)
(178,69,0)
(168,174,0)
(151,95,0)
(109,201,0)
(19,83,0)
(48,163,0)
(1,8,0)
(15,189,0)
(121,95,0)
(207,146,0)
(208,25,0)
(184,80,0)
(56,102,0)
(181,69,0)
(159,108,0)
(186,85,0)
(147,57,0)
(25,112,0)
(150,129,0)
(114,95,0)
(2,6,0)
(53,163,0)
(64,40,0)
(87,65,0)
(116,25,0)
(49,179,0)
(145,130,0)
(108,112,0)
(178,20,0)
(209,19,0)
(57,29,0)
(91,207,0)
(47,69,0)
(63,83,0)
(5,112,0)
(100,29,0)
(119,24,0)
(41,120,0)
(93,169,0)
(11,29,0)
(78,65,0)
(17,29,0)
(70,69,0)
(104,181,0)
(25,101,0)
(115,8,0)
(7,178,0)
(85,0,0)
(54,88,0)
(158,2,0)
(3,74,0)
(124,43,0)
(50,95,0)
(169,112,0)
(28,132,0)
(29,95,0)
(140,164,0)
(83,11,0)
(81,163,0)
(62,108,0)
(53,126,0)
(98,72,0)
(146,207,0)
(6,97,0)
(94,2,0)
(189,199,0)
(85,149,0)
(96,196,0)
(77,95,0)
(196,96,0)
(58,160,0)
(157,108,0)
(35,138,0)
(79,70,0)
(64,105,0)
(27,127,0)
(30,155,0)
(45,86,0)
(163,174,0)
(36,148,0)
(150,21,0)
(43,149,0)
(120,6,0)
(29,129,0)
(166,64,0)
(27,105,0)
(134,100,0)
(130,201,0)
(71,129,0)
(199,189,0)
(82,196,0)
(56,69,0)
(108,159,0)
(153,100,0)
(85,69,0)
(107,174,0)
(77,98,0)
(166,27,0)
(76,174,0)
(136,120,0)
(139,98,0)
(129,29,0)
(64,70,0)
(125,60,0)
(16,34,0)
(138,88,0)
(141,74,0)
(26,89,0)
(179,113,0)
(180,6,0)
(127,72,0)
(132,138,0)
(164,152,0)
(101,25,0)
(130,164,0)
(182,189,0)
(170,64,0)
(105,43,0)
(190,86,0)
(148,112,0)
(111,168,0)
(108,168,0)
(64,160,0)
(185,11,0)
(20,178,0)
(51,34,0)
(106,120,0)
(187,81,0)
(159,92,1)
(79,181,1)
(144,45,1)
(126,131,1)
(163,53,1)
(166,64,1)
(10,96,1)
(178,20,1)
(57,29,1)
(85,9,1)
(83,11,1)
(47,57,1)
(145,115,1)
(60,21,1)
(66,29,1)
(63,25,1)
(3,141,1)
(98,69,1)
(113,135,1)
(29,129,1)
(11,185,1)
(28,198,1)
(155,163,1)
(124,105,1)
(25,112,1)
(203,60,1)
(178,69,1)
(184,146,1)
(80,112,1)
(127,69,1)
(93,112,1)
(118,6,1)
(56,10,1)
(64,105,1)
(171,157,1)
(90,181,1)
(137,164,1)
(100,29,1)
(74,72,1)
(85,0,1)
(19,136,1)
(108,159,1)
(148,112,1)
(75,153,1)
(131,48,1)
(70,69,1)
(74,69,1)
(130,201,1)
(156,180,1)
(132,6,1)
(64,170,1)
(202,36,1)
(96,196,1)
(179,6,1)
(92,62,1)
(193,186,1)
(68,116,1)
(119,24,1)
(207,91,1)
(186,43,1)
(109,66,1)
(81,187,1)
(33,65,1)
(166,195,1)
(41,106,1)
(184,34,1)
(45,155,1)
(15,182,1)
(86,112,1)
(158,2,1)
(88,112,1)
(27,127,1)
(129,71,1)
(72,203,1)
(208,101,1)
(27,36,1)
(98,72,1)
(91,34,1)
(194,32,1)
(78,18,1)
(81,163,1)
(36,73,1)
(64,70,1)
(88,54,1)
(130,164,1)
(134,70,1)
(23,208,1)
(27,70,1)
(12,83,1)
(19,83,1)
(6,97,1)
(157,111,1)
(129,150,1)
(125,127,1)
(11,29,1)
(55,89,1)
(84,63,1)
(150,133,1)
(73,162,1)
(49,138,1)
(138,88,1)
(53,126,1)
(147,201,1)
(8,1,1)
(58,118,1)
(104,69,1)
(74,3,1)
(200,78,1)
(13,171,1)
(64,127,1)
(199,189,1)
(102,128,1)
(8,72,1)
(189,69,1)
(161,7,1)
(127,142,1)
(25,23,1)
(180,155,1)
(106,175,1)
(160,6,1)
(110,20,1)
(94,176,1)
(148,202,1)
(2,6,1)
(49,137,1)
(5,42,1)
(166,55,1)
(141,199,1)
(31,49,1)
(189,15,1)
(142,75,1)
(56,102,1)
(182,72,1)
(82,102,1)
(24,83,1)
(108,112,1)
(138,69,1)
(189,72,1)
(25,101,1)
(52,37,1)
(65,112,1)
(191,163,1)
(185,84,1)
(24,158,1)
(60,46,1)
(181,104,1)
(16,113,1)
(205,69,1)
(179,31,1)
(210,39,1)
(133,123,1)
(36,6,1)
(164,119,1)
(105,6,1)
(116,148,1)
(132,28,1)
(187,86,1)
(54,35,1)
(165,164,1)
(85,69,1)
(34,51,1)
(7,77,1)
(46,125,1)
(120,41,1)
(112,5,1)
(48,18,1)
(37,0,1)
(181,69,1)
(32,137,1)
(42,178,1)
(27,160,1)
(196,82,1)
(120,6,1)
(177,47,1)
(160,58,1)
(43,124,1)
(168,108,1)
(64,36,1)
(169,38,1)
(206,90,1)
(49,12,1)
(69,56,1)
(1,204,1)
(115,8,1)
(111,169,1)
(166,27,1)
(27,105,1)
(0,112,1)
(39,173,1)
(97,191,1)
(27,81,1)
(86,190,1)
(18,168,1)
(87,200,1)
(27,179,1)
(9,52,1)
(123,17,1)
(44,177,1)
(108,29,1)
(80,184,1)
(59,197,1)
(30,163,1)
(170,33,1)
(150,21,1)
(197,74,1)
(201,109,1)
(204,169,1)
(139,59,1)
(173,12,1)
(128,21,1)
(77,98,1)
(70,172,1)
(176,210,1)
(166,130,1)
(89,26,1)
(153,100,1)
(93,80,1)
(172,79,1)
(8,69,1)
(14,160,1)
(51,16,1)
(2,94,1)
(57,147,1)
(128,44,1)
(64,179,1)
(56,96,1)
(34,6,1)
(175,209,1)
(205,14,1)
(140,119,1)
(169,112,1)
(130,145,1)
(191,156,1)
(62,13,1)
(135,179,1)
(20,161,1)
(101,68,1)
(137,165,1)
(98,139,1)
(138,132,1)
(146,207,1)
(9,6,1)
(195,206,1)
(71,150,1)
(65,87,1)
(64,160,1)
(164,19,1)
(38,93,1)
(136,120,1)
(35,85,1)
(100,143,1)
(178,110,1)
(207,163,1)
(26,57,1)
(162,205,1)
(0,193,1)
(143,134,1)
(209,140,1)
(190,144,1)
(155,30,1)
(198,88,1)
(105,194,1)
(105,137,2)
(30,18,2)
(64,179,2)
(189,181,2)
(27,155,2)
(1,169,2)
(158,12,2)
(198,137,2)
(91,34,2)
(204,169,2)
(115,8,2)
(59,181,2)
(153,100,2)
(49,155,2)
(186,137,2)
(178,181,2)
(88,112,2)
(150,21,2)
(33,18,2)
(126,18,2)
(44,57,2)
(187,155,2)
(128,21,2)
(64,36,2)
(137,164,2)
(27,105,2)
(138,88,2)
(163,18,2)
(166,64,2)
(156,155,2)
(153,181,2)
(184,155,2)
(131,18,2)
(53,18,2)
(64,105,2)
(209,12,2)
(77,98,2)
(70,69,2)
(189,72,2)
(127,69,2)
(29,129,2)
(166,55,2)
(74,181,2)
(72,181,2)
(166,130,2)
(164,12,2)
(161,181,2)
(100,29,2)
(65,18,2)
(132,137,2)
(143,181,2)
(181,69,2)
(64,18,2)
(169,181,2)
(19,12,2)
(6,155,2)
(86,155,2)
(171,169,2)
(57,29,2)
(166,27,2)
(77,181,2)
(32,137,2)
(120,6,2)
(146,207,2)
(115,169,2)
(120,12,2)
(28,137,2)
(142,181,2)
(189,69,2)
(8,169,2)
(85,9,2)
(206,181,2)
(138,132,2)
(169,155,2)
(62,169,2)
(69,56,2)
(178,20,2)
(199,189,2)
(24,158,2)
(185,155,2)
(36,155,2)
(18,169,2)
(98,181,2)
(56,102,2)
(63,155,2)
(155,18,2)
(191,163,2)
(24,83,2)
(160,155,2)
(179,6,2)
(25,155,2)
(20,181,2)
(97,155,2)
(31,155,2)
(175,12,2)
(38,155,2)
(73,155,2)
(53,126,2)
(202,155,2)
(108,29,2)
(130,201,2)
(102,57,2)
(27,70,2)
(210,12,2)
(27,160,2)
(119,24,2)
(130,164,2)
(140,12,2)
(162,155,2)
(146,34,2)
(45,155,2)
(172,181,2)
(155,163,2)
(14,155,2)
(132,6,2)
(119,12,2)
(158,2,2)
(144,155,2)
(101,155,2)
(129,150,2)
(113,155,2)
(83,11,2)
(81,155,2)
(96,196,2)
(80,112,2)
(203,60,2)
(148,155,2)
(127,181,2)
(19,83,2)
(164,19,2)
(116,155,2)
(141,181,2)
(24,12,2)
(27,127,2)
(85,0,2)
(68,155,2)
(97,191,2)
(38,181,2)
(130,169,2)
(164,119,2)
(34,6,2)
(56,57,2)
(163,53,2)
(35,137,2)
(170,18,2)
(197,74,2)
(37,137,2)
(145,169,2)
(72,203,2)
(27,36,2)
(9,6,2)
(52,137,2)
(42,181,2)
(65,112,2)
(102,128,2)
(74,72,2)
(194,137,2)
(88,137,2)
(118,155,2)
(148,112,2)
(203,181,2)
(190,155,2)
(177,57,2)
(207,163,2)
(64,160,2)
(75,181,2)
(34,155,2)
(19,136,2)
(0,112,2)
(11,155,2)
(87,18,2)
(11,29,2)
(82,57,2)
(200,18,2)
(78,18,2)
(85,137,2)
(70,181,2)
(157,169,2)
(196,57,2)
(138,69,2)
(134,181,2)
(83,155,2)
(96,57,2)
(193,137,2)
(60,21,2)
(94,12,2)
(2,6,2)
(90,181,2)
(60,181,2)
(104,57,2)
(36,6,2)
(56,96,2)
(128,57,2)
(207,34,2)
(136,12,2)
(25,101,2)
(7,181,2)
(182,181,2)
(168,169,2)
(69,57,2)
(100,181,2)
(85,69,2)
(41,12,2)
(12,155,2)
(108,169,2)
(169,112,2)
(55,57,2)
(181,57,2)
(106,12,2)
(46,181,2)
(8,72,2)
(136,120,2)
(98,69,2)
(205,155,2)
(26,57,2)
(197,181,2)
(105,6,2)
(137,12,2)
(43,137,2)
(195,181,2)
(98,72,2)
(125,181,2)
(111,169,2)
(79,181,2)
(110,181,2)
(16,155,2)
(64,127,2)
(165,12,2)
(2,12,2)
(178,69,2)
(168,108,2)
(89,57,2)
(47,57,2)
(93,155,2)
(160,6,2)
(13,169,2)
(191,155,2)
(135,155,2)
(51,155,2)
(80,155,2)
(81,163,2)
(9,137,2)
(3,181,2)
(74,69,2)
(15,181,2)
(199,181,2)
(176,12,2)
(179,155,2)
(6,97,2)
(166,195,2)
(64,70,2)
(208,155,2)
(173,12,2)
(124,137,2)
(39,12,2)
(86,112,2)
(23,155,2)
(205,69,2)
(0,137,2)
(139,181,2)
(84,155,2)
(8,69,2)
(108,159,2)
(112,181,2)
(180,155,2)
(5,181,2)
(27,179,2)
(93,181,2)
(48,18,2)
(25,112,2)
(54,137,2)
(138,137,2)
(10,57,2)
(58,155,2)
(108,112,2)
(92,169,2)
(159,169,2)
-----------------------------------
(0,DRA7_ATL_BWSMUX_REG(i)
(1,dev)
(2,cdesc->bws)
(3,dev)
(4,if (cfg_node)
(5,0)
(6,cdesc = to_atl_desc(__clk_get_hw(clk)
(7,cinfo)
(8,cinfo->dev)
(9,cdesc->bws)
(10,GFP_KERNEL)
(11,of_find_node_by_name(node, prop)
(12,cfg_node)
(13,NULL)
(14,cinfo)
(15,dev)
(16,cdesc)
(17,node)
(18,rc)
(19,of_property_read_u32(cfg_node, "aws",\n\\n\\t\\t\\t\\t\\t\\t    &cdesc->aws)
(20,DRA7_ATL_PCLKMUX_REG(0)
(21,struct platform_device *pdev)
(22,if (!ret)
(23,i)
(24,of_property_read_u32(cfg_node, "bws",\n\\n\\t\\t\\t\\t\\t\\t   &cdesc->bws)
(25,snprintf(prop, sizeof(prop)
(26,ENODEV)
(27,return PTR_ERR(clk)
(28,aws)
(29,*node = pdev->dev.of_node)
(30,clk)
(31,probed)
(32,cdesc)
(33,EINVAL)
(34,cdesc->enabled)
(35,cinfo)
(36,cdesc->id)
(37,cdesc)
(38,DRA7_ATL_INSTANCES)
(39,cfg_node)
(40,)
(41,aws)
(42,i)
(43,cdesc->valid = true)
(44,dev)
(45,"%s: failed to get atl clock %d from provider\\n")
(46,dev)
(47,cinfo)
(48,clk)
(49,cdesc)
(50,ret)
(51,enabled)
(52,bws)
(53,of_clk_get_from_provider(&clkspec)
(54,i)
(55,return -ENODEV;)
(56,devm_kzalloc(&pdev->dev, sizeof(*cinfo)
(57,!node)
(58,cinfo)
(59,cinfo)
(60,pdev->dev)
(61,i)
(62,i)
(63,cfg_node)
(64,return -EINVAL;)
(65,pr_err("%s: failed to lookup atl clock %d\\n", __func__,\n\\n\\t\\t\\t       i)
(66,ret)
(67,for (i = 0; i < DRA7_ATL_INSTANCES; i++)
(68,prop)
(69,cinfo = devm_kzalloc(&pdev->dev, sizeof(*cinfo)
(70,cinfo->iobase)
(71,of_node)
(72,cinfo->dev = &pdev->dev)
(73,id)
(74,cinfo->dev)
(75,cinfo)
(76,if (IS_ERR(clk)
(77,pm_runtime_get_sync(cinfo->dev)
(78,"%s: failed to lookup atl clock %d\\n")
(79,cinfo)
(80,i++)
(81,PTR_ERR(clk)
(82,cinfo)
(83,cfg_node = of_find_node_by_name(node, prop)
(84,node)
(85,atl_write(cinfo, DRA7_ATL_BWSMUX_REG(i)
(86,pr_err("%s: failed to get atl clock %d from provider\\n",\n\\n\\t\\t\\t       __func__, i)
(87,i)
(88,DRA7_ATL_AWSMUX_REG(i)
(89,-ENODEV)
(90,ENOMEM)
(91,clk)
(92,clkspec)
(93,i)
(94,bws)
(95,)
(96,sizeof(*cinfo)
(97,to_atl_desc(__clk_get_hw(clk)
(98,cinfo->dev)
(99,if (rc)
(100,of_iomap(node, 0)
(101,sizeof(prop)
(102,&pdev->dev)
(103,if (!node)
(104,cinfo)
(105,cdesc->valid)
(106,cdesc)
(107,clkspec)
(108,of_parse_phandle_with_args(node, "ti,provided-clocks",\n\\n\\t\\t\\t\\t\\t\\tNULL, i, &clkspec)
(109,0)
(110,DRA7_ATL_PCLKMUX)
(111,rc)
(112,i = 0)
(113,cdesc->probed = true)
(114,if (!cinfo)
(115,pm_runtime_put_sync(cinfo->dev)
(116,prop)
(117,rc)
(118,cdesc)
(119,ret = of_property_read_u32(cfg_node, "bws",\n\\n\\t\\t\\t\\t\\t\\t   &cdesc->bws)
(120,cdesc->aws)
(121,cinfo)
(122,clk)
(123,pdev)
(124,true)
(125,pdev)
(126,&clkspec)
(127,cinfo->dev)
(128,pdev->dev)
(129,pdev->dev.of_node)
(130,return ret;)
(131,clkspec)
(132,cdesc->aws)
(133,dev)
(134,node)
(135,true)
(136,&cdesc->aws)
(137,!ret)
(138,atl_write(cinfo, DRA7_ATL_AWSMUX_REG(i)
(139,dev)
(140,ret)
(141,cinfo)
(142,dev)
(143,0)
(144,__func__)
(145,ret)
(146,atl_clk_enable(__clk_get_hw(clk)
(147,node)
(148,cdesc->id = i)
(149,)
(150,pdev->dev)
(151,node)
(152,)
(153,cinfo->iobase = of_iomap(node, 0)
(154,if (cdesc->enabled)
(155,IS_ERR(clk)
(156,clk)
(157,node)
(158,&cdesc->bws)
(159,&clkspec)
(160,cdesc->cinfo)
(161,0)
(162,cdesc)
(163,clk = of_clk_get_from_provider(&clkspec)
(164,ret |= of_property_read_u32(cfg_node, "aws",\n\\n\\t\\t\\t\\t\\t\\t    &cdesc->aws)
(165,ret)
(166,RET)
(167,)
(168,rc = of_parse_phandle_with_args(node, "ti,provided-clocks",\n\\n\\t\\t\\t\\t\\t\\tNULL, i, &clkspec)
(169,i < DRA7_ATL_INSTANCES)
(170,-EINVAL)
(171,"ti,provided-clocks")
(172,iobase)
(173,ret)
(174,)
(175,"aws")
(176,cdesc)
(177,pdev)
(178,atl_write(cinfo, DRA7_ATL_PCLKMUX_REG(0)
(179,cdesc->probed)
(180,cdesc)
(181,!cinfo)
(182,cinfo)
(183,prop)
(184,i)
(185,prop)
(186,cinfo)
(187,clk)
(188,cfg_node)
(189,cinfo->dev)
(190,i)
(191,__clk_get_hw(clk)
(192,cdesc)
(193,i)
(194,valid)
(195,return -ENOMEM;)
(196,*cinfo)
(197,pm_runtime_irq_safe(cinfo->dev)
(198,cdesc)
(199,pm_runtime_enable(cinfo->dev)
(200,__func__)
(201,ret = 0)
(202,i)
(203,&pdev->dev)
(204,cinfo)
(205,cdesc->cinfo = cinfo)
(206,-ENOMEM)
(207,__clk_get_hw(clk)
(208,"atl%u")
(209,cfg_node)
(210,"bws")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^