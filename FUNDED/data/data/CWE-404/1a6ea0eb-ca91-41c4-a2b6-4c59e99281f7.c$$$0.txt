-----label-----
0
-----code-----
static int call_break_hook(struct pt_regs *regs, unsigned int esr)
{
	struct break_hook *hook;
	int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;

	read_lock(&break_hook_lock);
	list_for_each_entry(hook, &break_hook, node)
		if ((esr & hook->esr_mask) == hook->esr_val)
			fn = hook->fn;
	read_unlock(&break_hook_lock);

	return fn ? fn(regs, esr) : DBG_HOOK_ERROR;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
16,17
17,18
17,19
18,19
20,21
20,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
27,28
27,29
30,31
30,32
31,32
33,34
33,35
36,37
36,38
38,39
40,41
41,42
43,44
44,45
44,46
45,46
47,48
48,49
48,50
51,52
52,53
52,54
52,55
52,56
53,54
55,56
57,58
58,59
60,61
62,63
63,64
63,65
64,65
64,66
65,66
66,67
66,68
67,68
69,70
69,71
70,71
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
85,86
86,87
86,88
87,88
89,90
90,91
92,93
93,94
93,95
93,96
94,95
96,97
96,98
96,99
97,98
99,100
101,102
103,104
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,25,28,29,32,34,35,37,39,42,46,49,50,54,56,59,61,68,71,72,75,76,80,83,84,88,91,95,98,100,102,104
-----computeFrom-----
64,65
64,66
66,67
66,68
78,79
78,80
-----guardedBy-----
75,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int call_break_hook(struct pt_regs *regs, unsigned int esr){	struct break_hook *hook;	int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;	read_lock(&break_hook_lock);	list_for_each_entry(hook, &break_hook, node)		if ((esr & hook->esr_mask) == hook->esr_val)			fn = hook->fn;	read_unlock(&break_hook_lock);	return fn ? fn(regs, esr) : DBG_HOOK_ERROR;}
static int
call_break_hook(struct pt_regs *regs, unsigned int esr)
call_break_hook
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
unsigned int esr
unsigned int
esr
esr
{	struct break_hook *hook;	int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;	read_lock(&break_hook_lock);	list_for_each_entry(hook, &break_hook, node)		if ((esr & hook->esr_mask) == hook->esr_val)			fn = hook->fn;	read_unlock(&break_hook_lock);	return fn ? fn(regs, esr) : DBG_HOOK_ERROR;}
struct break_hook *hook;
struct break_hook *hook;
struct break_hook
break_hook
*hook
*
hook
int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;
int (*fn)(struct pt_regs *regs, unsigned int esr) = NULL;
int
(*fn)(struct pt_regs *regs, unsigned int esr) = NULL
*fn
*
fn
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
unsigned int esr
unsigned int
esr
esr
= NULL
NULL
NULL
read_lock(&break_hook_lock);
read_lock(&break_hook_lock);
read_lock
read_lock
(&break_hook_lock)
&break_hook_lock
&
break_hook_lock
list_for_each_entry(hook, &break_hook, node)
list_for_each_entry(hook, &break_hook, node)
list_for_each_entry
list_for_each_entry
hook
hook
&break_hook
break_hook
break_hook
node
node
)
if ((esr & hook->esr_mask) == hook->esr_val)			fn = hook->fn;
(esr & hook->esr_mask) == hook->esr_val
(esr & hook->esr_mask)
esr & hook->esr_mask
esr
esr
hook->esr_mask
hook
hook
esr_mask
hook->esr_val
hook
hook
esr_val
fn = hook->fn;
fn = hook->fn
fn
fn
hook->fn
hook
hook
fn
read_unlock(&break_hook_lock);
read_unlock(&break_hook_lock)
read_unlock
read_unlock
&break_hook_lock
break_hook_lock
break_hook_lock
return fn ? fn(regs, esr) : DBG_HOOK_ERROR;
fn ? fn(regs, esr) : DBG_HOOK_ERROR
fn
fn
fn(regs, esr)
fn
fn
regs
regs
esr
esr
DBG_HOOK_ERROR
DBG_HOOK_ERROR
-----joern-----
(21,6,0)
(31,16,0)
(14,16,0)
(18,9,0)
(17,35,0)
(20,7,0)
(0,20,0)
(23,12,0)
(2,9,0)
(29,12,0)
(23,13,0)
(26,2,0)
(21,23,0)
(10,27,0)
(11,23,0)
(33,13,0)
(9,2,0)
(35,17,0)
(36,22,0)
(19,0,0)
(34,10,0)
(25,10,0)
(27,20,0)
(20,0,0)
(27,10,0)
(24,23,0)
(21,7,0)
(4,0,0)
(36,16,0)
(32,16,0)
(23,2,0)
(17,16,0)
(15,22,0)
(20,27,0)
(5,21,0)
(1,20,0)
(8,21,0)
(30,35,0)
(23,21,0)
(22,36,0)
(12,16,0)
(3,9,0)
(28,13,0)
(13,16,0)
(27,20,1)
(9,3,1)
(23,2,1)
(8,5,1)
(33,28,1)
(20,7,1)
(21,8,1)
(1,17,1)
(26,27,1)
(36,22,1)
(21,6,1)
(22,15,1)
(25,20,1)
(4,1,1)
(10,34,1)
(29,12,1)
(23,13,1)
(20,0,1)
(13,33,1)
(5,24,1)
(23,21,1)
(3,18,1)
(35,30,1)
(12,23,1)
(27,10,1)
(30,13,1)
(11,24,1)
(24,36,1)
(23,11,1)
(15,27,1)
(21,7,1)
(15,2,1)
(34,25,1)
(18,26,1)
(0,19,1)
(2,9,1)
(17,35,1)
(19,4,1)
(23,2,2)
(21,6,2)
(29,12,2)
(17,35,2)
(3,27,2)
(23,21,2)
(26,27,2)
(23,13,2)
(20,0,2)
(21,7,2)
(27,10,2)
(2,9,2)
(36,22,2)
(27,20,2)
(8,24,2)
(11,24,2)
(5,24,2)
(2,27,2)
(21,24,2)
(20,7,2)
(9,27,2)
(18,27,2)
-----------------------------------
(0,hook->esr_mask)
(1,esr)
(2,fn = hook->fn)
(3,fn)
(4,hook)
(5,regs)
(6,struct pt_regs *regs)
(7,unsigned int esr)
(8,esr)
(9,hook->fn)
(10,hook->esr_val)
(11,DBG_HOOK_ERROR)
(12,return fn ? fn(regs, esr)
(13,(*fn)
(14,if ((esr & hook->esr_mask)
(15,break_hook_lock)
(16,)
(17,read_lock(&break_hook_lock)
(18,hook)
(19,esr_mask)
(20,esr & hook->esr_mask)
(21,fn(regs, esr)
(22,&break_hook_lock)
(23,fn ? fn(regs, esr)
(24,fn)
(25,hook)
(26,fn)
(27,(esr & hook->esr_mask)
(28,fn)
(29,RET)
(30,break_hook_lock)
(31,hook)
(32,fn)
(33,NULL)
(34,esr_val)
(35,&break_hook_lock)
(36,read_unlock(&break_hook_lock)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^