-----label-----
1
-----code-----
static void
saveuser(KINFO *ki)
{
	struct usave *usp;

	usp = &ki->ki_u;

	if ((KI_PROC(ki)->p_flag & P_SWAPPEDOUT) == 0) {
		/*
		 * The u-area might be swapped out, and we can't get
		 * at it because we have a crashdump and no swap.
		 * If it's here fill in these fields, otherwise, just
		 * leave them 0.
		 */
		usp->u_start = KI_PROC(ki)->p_start;
		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;
		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;
		usp->u_valid = 1;
	} else
		usp->u_valid = 0;
	/*
	 * save arguments if needed
	 */
	if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {
		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,
		    MAXCOMLEN);
	} else if (needcomm) {
		char *tmp;
		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);
		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);
		ki->ki_args = tmp;
	} else {
		ki->ki_args = NULL;
	}
	if (needenv && UREADOK(ki)) {
		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);
	} else if (needenv) {
		ki->ki_env = "()";
	} else {
		ki->ki_env = NULL;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
29,31
30,31
31,32
31,33
32,33
32,34
33,34
33,35
34,35
36,37
39,40
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
53,54
56,57
57,58
57,59
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
64,66
65,66
67,68
71,72
72,73
72,74
73,74
73,75
74,75
77,78
77,79
78,79
78,80
79,80
79,81
80,81
82,83
86,87
87,88
87,89
88,89
88,90
89,90
93,94
94,95
94,96
95,96
95,97
96,97
100,101
100,102
100,103
101,102
101,103
102,103
104,105
105,106
105,107
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
117,118
120,121
122,123
123,124
124,125
124,126
125,126
125,127
126,127
129,130
129,131
129,132
129,133
129,134
130,131
132,133
134,135
136,137
136,138
137,138
137,139
138,139
140,141
143,144
145,146
145,147
145,148
146,147
148,149
148,150
148,151
148,152
149,150
150,151
150,152
152,153
152,154
155,156
156,157
156,158
157,158
159,160
159,161
160,161
162,163
162,164
163,164
163,165
164,165
166,167
166,168
167,168
167,169
168,169
170,171
174,175
175,176
175,177
175,178
175,179
176,177
178,179
181,182
181,183
182,183
182,184
183,184
185,186
188,189
189,190
189,191
190,191
190,192
191,192
194,195
196,197
197,198
198,199
198,200
199,200
199,201
200,201
203,204
205,206
205,207
205,208
206,207
206,208
207,208
209,210
209,211
210,211
212,213
214,215
215,216
216,217
216,218
217,218
217,219
218,219
221,222
221,223
221,224
221,225
221,226
222,223
224,225
226,227
228,229
228,230
229,230
229,231
231,232
233,234
236,237
236,238
236,239
237,238
239,240
240,241
241,242
241,243
242,243
242,244
243,244
247,248
248,249
249,250
249,251
250,251
250,252
251,252
254,255
-----nextToken-----
2,4,7,9,10,15,17,18,22,26,27,35,37,38,40,41,47,48,52,54,55,60,61,66,68,69,70,75,76,81,83,84,85,90,91,92,97,98,99,103,108,110,116,118,119,121,127,128,131,133,135,139,141,142,144,147,151,153,154,158,161,165,169,171,172,173,177,179,180,184,186,187,192,193,195,201,202,204,208,211,213,219,220,223,225,227,230,232,234,235,238,244,245,246,252,253,255
-----computeFrom-----
20,21
20,22
29,30
29,31
31,32
31,33
44,45
44,46
57,58
57,59
72,73
72,74
87,88
87,89
94,95
94,96
101,102
101,103
105,106
105,107
112,113
112,114
124,125
124,126
156,157
156,158
162,163
162,164
189,190
189,191
198,199
198,200
206,207
206,208
216,217
216,218
241,242
241,243
249,250
249,251
-----guardedBy-----
35,52
37,83
118,141
213,227
-----guardedByNegation-----
121,204
103,147
118,201
208,238
213,252
-----lastLexicalUse-----
118,201
213,252
-----jump-----
118,201
213,252
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static voidsaveuser(KINFO *ki){	struct usave *usp;	usp = &ki->ki_u;	if ((KI_PROC(ki)->p_flag & P_SWAPPEDOUT) == 0) {		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	} else		usp->u_valid = 0;	/*	 * save arguments if needed	 */	if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	} else if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}	if (needenv && UREADOK(ki)) {		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	} else if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}}
static void
saveuser(KINFO *ki)
saveuser
KINFO *ki
KINFO
KINFO
*ki
*
ki
{	struct usave *usp;	usp = &ki->ki_u;	if ((KI_PROC(ki)->p_flag & P_SWAPPEDOUT) == 0) {		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	} else		usp->u_valid = 0;	/*	 * save arguments if needed	 */	if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	} else if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}	if (needenv && UREADOK(ki)) {		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	} else if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}}
struct usave *usp;
struct usave *usp;
struct usave
usave
*usp
*
usp
usp = &ki->ki_u;
usp = &ki->ki_u
usp
usp
&ki->ki_u
ki->ki_u
ki
ki
ki_u
if ((KI_PROC(ki)->p_flag & P_SWAPPEDOUT) == 0) {		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	} else		usp->u_valid = 0;
(KI_PROC(ki)->p_flag & P_SWAPPEDOUT) == 0
(KI_PROC(ki)->p_flag & P_SWAPPEDOUT)
KI_PROC(ki)->p_flag & P_SWAPPEDOUT
KI_PROC(ki)->p_flag
KI_PROC(ki)
KI_PROC
KI_PROC
ki
ki
p_flag
P_SWAPPEDOUT
P_SWAPPEDOUT
0
{		/*		 * The u-area might be swapped out, and we can't get		 * at it because we have a crashdump and no swap.		 * If it's here fill in these fields, otherwise, just		 * leave them 0.		 */		usp->u_start = KI_PROC(ki)->p_start;		usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;		usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;		usp->u_valid = 1;	}
usp->u_start = KI_PROC(ki)->p_start;
usp->u_start = KI_PROC(ki)->p_start
usp->u_start
usp
usp
u_start
KI_PROC(ki)->p_start
KI_PROC(ki)
KI_PROC
KI_PROC
ki
ki
p_start
usp->u_ru = KI_EPROC(ki)->e_stats.p_ru;
usp->u_ru = KI_EPROC(ki)->e_stats.p_ru
usp->u_ru
usp
usp
u_ru
KI_EPROC(ki)->e_stats.p_ru
KI_EPROC(ki)->e_stats
KI_EPROC(ki)
KI_EPROC
KI_EPROC
ki
ki
e_stats
p_ru
usp->u_cru = KI_EPROC(ki)->e_stats.p_cru;
usp->u_cru = KI_EPROC(ki)->e_stats.p_cru
usp->u_cru
usp
usp
u_cru
KI_EPROC(ki)->e_stats.p_cru
KI_EPROC(ki)->e_stats
KI_EPROC(ki)
KI_EPROC
KI_EPROC
ki
ki
e_stats
p_cru
usp->u_valid = 1;
usp->u_valid = 1
usp->u_valid
usp
usp
u_valid
1
usp->u_valid = 0;
usp->u_valid = 0
usp->u_valid
usp
usp
u_valid
0
if (needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))) {		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	} else if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}
needcomm && (UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))
needcomm
needcomm
(UREADOK(ki) || (KI_PROC(ki)->p_args != NULL))
UREADOK(ki) || (KI_PROC(ki)->p_args != NULL)
UREADOK(ki)
UREADOK
UREADOK
ki
ki
(KI_PROC(ki)->p_args != NULL)
KI_PROC(ki)->p_args != NULL
KI_PROC(ki)->p_args
KI_PROC(ki)
KI_PROC
KI_PROC
ki
ki
p_args
NULL
NULL
{		ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);	}
ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN);
ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN)
ki->ki_args
ki
ki
ki_args
getfmt(kvm_getargv, ki, KI_THREAD(ki)->td_comm,		    MAXCOMLEN)
getfmt
getfmt
kvm_getargv
kvm_getargv
ki
ki
KI_THREAD(ki)->td_comm
KI_THREAD(ki)
KI_THREAD
KI_THREAD
ki
ki
td_comm
MAXCOMLEN
MAXCOMLEN
if (needcomm) {		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	} else {		ki->ki_args = NULL;	}
needcomm
needcomm
{		char *tmp;		tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);		sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);		ki->ki_args = tmp;	}
char *tmp;
char *tmp;
char
*tmp
*
tmp
tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3);
tmp = malloc(strlen(KI_THREAD(ki)->td_comm) + 3)
tmp
tmp
malloc(strlen(KI_THREAD(ki)->td_comm) + 3)
malloc
malloc
strlen(KI_THREAD(ki)->td_comm) + 3
strlen(KI_THREAD(ki)->td_comm)
strlen
strlen
KI_THREAD(ki)->td_comm
KI_THREAD(ki)
KI_THREAD
KI_THREAD
ki
ki
td_comm
3
sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm);
sprintf(tmp, "(%s)", KI_THREAD(ki)->td_comm)
sprintf
sprintf
tmp
tmp
"(%s)"
KI_THREAD(ki)->td_comm
KI_THREAD(ki)
KI_THREAD
KI_THREAD
ki
ki
td_comm
ki->ki_args = tmp;
ki->ki_args = tmp
ki->ki_args
ki
ki
ki_args
tmp
tmp
{		ki->ki_args = NULL;	}
ki->ki_args = NULL;
ki->ki_args = NULL
ki->ki_args
ki
ki
ki_args
NULL
NULL
if (needenv && UREADOK(ki)) {		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	} else if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}
needenv && UREADOK(ki)
needenv
needenv
UREADOK(ki)
UREADOK
UREADOK
ki
ki
{		ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);	}
ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0);
ki->ki_env = getfmt(kvm_getenvv, ki, (char *)NULL, 0)
ki->ki_env
ki
ki
ki_env
getfmt(kvm_getenvv, ki, (char *)NULL, 0)
getfmt
getfmt
kvm_getenvv
kvm_getenvv
ki
ki
(char *)NULL
char *
char
*
*
NULL
NULL
0
if (needenv) {		ki->ki_env = "()";	} else {		ki->ki_env = NULL;	}
needenv
needenv
{		ki->ki_env = "()";	}
ki->ki_env = "()";
ki->ki_env = "()"
ki->ki_env
ki
ki
ki_env
"()"
{		ki->ki_env = NULL;	}
ki->ki_env = NULL;
ki->ki_env = NULL
ki->ki_env
ki
ki
ki_env
NULL
NULL
-----joern-----
(121,96,0)
(112,4,0)
(104,70,0)
(123,23,0)
(109,133,0)
(132,110,0)
(83,9,0)
(90,17,0)
(56,131,0)
(4,143,0)
(19,70,0)
(46,8,0)
(10,96,0)
(12,6,0)
(127,35,0)
(9,11,0)
(78,63,0)
(110,132,0)
(26,11,0)
(96,8,0)
(85,127,0)
(87,110,0)
(25,119,0)
(135,56,0)
(4,58,0)
(43,7,0)
(101,7,0)
(8,46,0)
(13,33,0)
(61,128,0)
(74,11,0)
(70,40,0)
(72,101,0)
(74,99,0)
(61,131,0)
(101,120,0)
(58,143,0)
(97,44,0)
(119,11,0)
(20,16,0)
(76,58,0)
(6,12,0)
(79,26,0)
(40,47,0)
(1,54,0)
(81,69,0)
(75,69,0)
(67,37,0)
(119,25,0)
(41,99,0)
(42,10,0)
(21,54,0)
(33,96,0)
(93,20,0)
(38,31,0)
(24,41,0)
(6,54,0)
(32,11,0)
(120,110,0)
(54,1,0)
(129,36,0)
(84,73,0)
(41,11,0)
(1,11,0)
(50,33,0)
(29,96,0)
(98,96,0)
(133,2,0)
(126,79,0)
(70,11,0)
(59,97,0)
(128,2,0)
(16,70,0)
(69,45,0)
(27,119,0)
(124,139,0)
(71,129,0)
(118,26,0)
(36,136,0)
(3,25,0)
(132,58,0)
(114,99,0)
(65,10,0)
(77,38,0)
(7,101,0)
(88,98,0)
(96,139,0)
(17,80,0)
(0,14,0)
(46,11,0)
(70,16,0)
(57,51,0)
(25,109,0)
(37,32,0)
(99,74,0)
(137,61,0)
(89,31,0)
(138,59,0)
(133,109,0)
(103,35,0)
(9,83,0)
(28,4,0)
(108,41,0)
(115,29,0)
(30,136,0)
(127,11,0)
(18,74,0)
(102,46,0)
(120,101,0)
(20,11,0)
(39,109,0)
(69,11,0)
(117,46,0)
(38,11,0)
(134,45,0)
(83,129,0)
(125,70,0)
(131,56,0)
(140,113,0)
(59,11,0)
(98,44,0)
(106,113,0)
(63,11,0)
(129,83,0)
(66,143,0)
(44,97,0)
(63,36,0)
(10,51,0)
(29,128,0)
(32,37,0)
(16,48,0)
(4,37,0)
(34,139,0)
(116,98,0)
(95,9,0)
(62,14,0)
(45,143,0)
(97,59,0)
(122,1,0)
(35,141,0)
(113,96,0)
(47,40,0)
(51,2,0)
(33,133,0)
(44,2,0)
(123,41,0)
(99,41,0)
(111,97,0)
(45,58,0)
(14,17,0)
(128,61,0)
(113,91,0)
(15,83,0)
(8,96,0)
(142,139,0)
(36,63,0)
(136,36,0)
(86,91,0)
(37,4,0)
(41,123,0)
(7,11,0)
(40,70,0)
(73,123,0)
(107,139,0)
(55,40,0)
(110,120,0)
(5,38,0)
(100,6,0)
(73,11,0)
(31,53,0)
(49,29,0)
(94,131,0)
(26,79,0)
(68,32,0)
(131,61,0)
(109,25,0)
(52,12,0)
(92,20,0)
(130,73,0)
(14,11,0)
(105,41,0)
(22,127,0)
(58,132,0)
(36,129,0)
(56,11,0)
(54,6,0)
(49,115,1)
(101,72,1)
(56,11,1)
(110,87,1)
(72,7,1)
(131,56,1)
(7,43,1)
(123,41,1)
(65,128,1)
(94,56,1)
(76,60,1)
(7,11,1)
(41,108,1)
(78,30,1)
(30,91,1)
(44,97,1)
(129,71,1)
(27,33,1)
(35,103,1)
(57,10,1)
(32,68,1)
(83,15,1)
(61,131,1)
(136,36,1)
(39,25,1)
(88,12,1)
(64,79,1)
(9,95,1)
(41,11,1)
(113,96,1)
(112,58,1)
(61,137,1)
(127,85,1)
(77,64,1)
(10,42,1)
(0,62,1)
(82,17,1)
(46,117,1)
(138,98,1)
(58,132,1)
(73,11,1)
(50,44,1)
(126,35,1)
(36,129,1)
(16,70,1)
(20,11,1)
(4,58,1)
(84,130,1)
(10,96,1)
(119,27,1)
(99,114,1)
(6,100,1)
(82,31,1)
(102,121,1)
(25,119,1)
(132,110,1)
(52,6,1)
(96,8,1)
(74,18,1)
(43,76,1)
(19,104,1)
(133,109,1)
(20,93,1)
(14,11,1)
(137,131,1)
(60,136,1)
(116,88,1)
(93,92,1)
(114,74,1)
(120,101,1)
(26,118,1)
(105,73,1)
(54,21,1)
(98,96,1)
(15,9,1)
(130,136,1)
(86,113,1)
(40,55,1)
(128,61,1)
(98,116,1)
(91,86,1)
(79,126,1)
(108,99,1)
(26,11,1)
(69,81,1)
(17,90,1)
(5,77,1)
(126,45,1)
(22,60,1)
(90,14,1)
(51,57,1)
(127,11,1)
(3,119,1)
(70,125,1)
(82,16,1)
(14,0,1)
(117,102,1)
(110,120,1)
(135,29,1)
(79,26,1)
(40,47,1)
(109,39,1)
(29,49,1)
(71,83,1)
(63,11,1)
(41,99,1)
(25,3,1)
(55,19,1)
(37,32,1)
(131,94,1)
(67,32,1)
(129,83,1)
(115,133,1)
(33,13,1)
(89,38,1)
(92,79,1)
(75,4,1)
(4,37,1)
(140,106,1)
(33,96,1)
(12,52,1)
(56,135,1)
(1,122,1)
(8,46,1)
(54,1,1)
(31,89,1)
(83,9,1)
(29,96,1)
(104,20,1)
(62,64,1)
(24,105,1)
(28,112,1)
(99,74,1)
(95,63,1)
(87,120,1)
(73,84,1)
(21,1,1)
(59,138,1)
(36,63,1)
(1,11,1)
(74,11,1)
(103,127,1)
(101,7,1)
(30,51,1)
(97,111,1)
(125,40,1)
(85,22,1)
(70,11,1)
(12,6,1)
(106,12,1)
(6,54,1)
(38,5,1)
(81,75,1)
(45,134,1)
(69,11,1)
(113,140,1)
(111,59,1)
(126,123,1)
(109,25,1)
(63,78,1)
(59,11,1)
(119,11,1)
(32,11,1)
(100,54,1)
(45,58,1)
(136,30,1)
(38,11,1)
(13,50,1)
(37,67,1)
(42,65,1)
(18,24,1)
(134,69,1)
(70,40,1)
(97,59,1)
(68,28,1)
(46,11,1)
(122,96,1)
(118,126,1)
(9,11,1)
(67,60,2)
(36,63,2)
(10,12,2)
(41,11,2)
(4,37,2)
(94,12,2)
(91,12,2)
(31,64,2)
(110,120,2)
(45,58,2)
(24,136,2)
(89,64,2)
(93,79,2)
(12,6,2)
(56,12,2)
(110,60,2)
(36,30,2)
(40,47,2)
(0,64,2)
(108,136,2)
(106,12,2)
(7,60,2)
(33,12,2)
(86,12,2)
(109,25,2)
(49,12,2)
(112,60,2)
(8,46,2)
(79,26,2)
(78,30,2)
(113,96,2)
(13,12,2)
(118,126,2)
(58,60,2)
(36,129,2)
(99,74,2)
(129,83,2)
(81,60,2)
(63,30,2)
(137,12,2)
(101,60,2)
(68,60,2)
(77,64,2)
(50,12,2)
(7,11,2)
(43,60,2)
(119,11,2)
(114,136,2)
(55,79,2)
(109,12,2)
(74,11,2)
(83,63,2)
(130,136,2)
(4,60,2)
(120,101,2)
(132,60,2)
(131,56,2)
(10,96,2)
(92,79,2)
(22,60,2)
(123,41,2)
(65,12,2)
(138,12,2)
(29,12,2)
(40,79,2)
(6,54,2)
(140,12,2)
(42,12,2)
(96,8,2)
(33,96,2)
(88,12,2)
(135,12,2)
(99,136,2)
(95,63,2)
(17,64,2)
(133,12,2)
(76,60,2)
(9,63,2)
(129,63,2)
(70,79,2)
(58,132,2)
(51,12,2)
(125,79,2)
(18,136,2)
(116,12,2)
(38,11,2)
(14,11,2)
(84,136,2)
(98,96,2)
(29,96,2)
(25,119,2)
(14,64,2)
(37,60,2)
(44,97,2)
(60,136,2)
(63,11,2)
(132,110,2)
(128,12,2)
(101,7,2)
(98,12,2)
(16,70,2)
(41,99,2)
(134,60,2)
(104,79,2)
(120,60,2)
(54,1,2)
(71,63,2)
(9,11,2)
(19,79,2)
(26,11,2)
(75,60,2)
(87,60,2)
(72,60,2)
(15,63,2)
(16,79,2)
(1,11,2)
(39,12,2)
(131,12,2)
(20,79,2)
(27,12,2)
(56,11,2)
(127,60,2)
(85,60,2)
(46,11,2)
(128,61,2)
(97,12,2)
(103,60,2)
(70,11,2)
(73,11,2)
(119,12,2)
(105,136,2)
(90,64,2)
(70,40,2)
(127,11,2)
(26,126,2)
(25,12,2)
(37,32,2)
(133,109,2)
(123,136,2)
(5,64,2)
(38,64,2)
(73,136,2)
(74,136,2)
(4,58,2)
(3,12,2)
(20,11,2)
(61,131,2)
(44,12,2)
(61,12,2)
(97,59,2)
(69,11,2)
(41,136,2)
(69,60,2)
(57,12,2)
(32,60,2)
(62,64,2)
(45,60,2)
(111,12,2)
(64,79,2)
(28,60,2)
(59,12,2)
(113,12,2)
(83,9,2)
(35,60,2)
(136,36,2)
(115,12,2)
(59,11,2)
(32,11,2)
-----------------------------------
(0,ki_env)
(1,KI_PROC(ki)
(2,)
(3,e_stats)
(4,sprintf(tmp, "(%s)
(5,ki_env)
(6,KI_PROC(ki)
(7,KI_THREAD(ki)
(8,&ki->ki_u)
(9,KI_PROC(ki)
(10,usp->u_valid)
(11,KINFO *ki)
(12,(KI_PROC(ki)
(13,u_ru)
(14,ki->ki_env)
(15,p_args)
(16,ki->ki_env = getfmt(kvm_getenvv, ki, (char *)
(17,ki->ki_env = "()
(18,ki)
(19,ki)
(20,ki->ki_env)
(21,p_flag)
(22,ki)
(23,)
(24,ki)
(25,KI_EPROC(ki)
(26,UREADOK(ki)
(27,ki)
(28,"(%s)
(29,usp->u_cru)
(30,needcomm)
(31,ki->ki_env = NULL)
(32,KI_THREAD(ki)
(33,usp->u_ru)
(34,if ((KI_PROC(ki)
(35,ki->ki_args = NULL)
(36,UREADOK(ki)
(37,KI_THREAD(ki)
(38,ki->ki_env)
(39,p_ru)
(40,(char *)
(41,getfmt(kvm_getargv, ki, KI_THREAD(ki)
(42,u_valid)
(43,ki)
(44,usp->u_start = KI_PROC(ki)
(45,ki->ki_args = tmp)
(46,ki->ki_u)
(47,char *)
(48,)
(49,u_cru)
(50,usp)
(51,usp->u_valid = 1)
(52,0)
(53,)
(54,KI_PROC(ki)
(55,NULL)
(56,KI_EPROC(ki)
(57,1)
(58,tmp = malloc(strlen(KI_THREAD(ki)
(59,KI_PROC(ki)
(60,needcomm)
(61,KI_EPROC(ki)
(62,ki)
(63,UREADOK(ki)
(64,needenv)
(65,usp)
(66,tmp)
(67,td_comm)
(68,ki)
(69,ki->ki_args)
(70,getfmt(kvm_getenvv, ki, (char *)
(71,NULL)
(72,td_comm)
(73,ki->ki_args)
(74,KI_THREAD(ki)
(75,ki)
(76,tmp)
(77,ki)
(78,ki)
(79,needenv && UREADOK(ki)
(80,)
(81,ki_args)
(82,RET)
(83,KI_PROC(ki)
(84,ki_args)
(85,ki_args)
(86,0)
(87,3)
(88,usp)
(89,NULL)
(90,"()
(91,usp->u_valid = 0)
(92,ki)
(93,ki_env)
(94,e_stats)
(95,ki)
(96,usp = &ki->ki_u)
(97,KI_PROC(ki)
(98,usp->u_start)
(99,KI_THREAD(ki)
(100,P_SWAPPEDOUT)
(101,KI_THREAD(ki)
(102,ki)
(103,NULL)
(104,kvm_getenvv)
(105,kvm_getargv)
(106,usp)
(107,usp)
(108,MAXCOMLEN)
(109,KI_EPROC(ki)
(110,strlen(KI_THREAD(ki)
(111,p_start)
(112,tmp)
(113,usp->u_valid)
(114,td_comm)
(115,usp)
(116,u_start)
(117,ki_u)
(118,ki)
(119,KI_EPROC(ki)
(120,strlen(KI_THREAD(ki)
(121,usp)
(122,ki)
(123,ki->ki_args = getfmt(kvm_getargv, ki, KI_THREAD(ki)
(124,if (needenv && UREADOK(ki)
(125,0)
(126,needenv)
(127,ki->ki_args)
(128,usp->u_cru = KI_EPROC(ki)
(129,KI_PROC(ki)
(130,ki)
(131,KI_EPROC(ki)
(132,malloc(strlen(KI_THREAD(ki)
(133,usp->u_ru = KI_EPROC(ki)
(134,tmp)
(135,ki)
(136,needcomm && (UREADOK(ki)
(137,p_cru)
(138,ki)
(139,)
(140,u_valid)
(141,)
(142,if (needcomm && (UREADOK(ki)
(143,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^