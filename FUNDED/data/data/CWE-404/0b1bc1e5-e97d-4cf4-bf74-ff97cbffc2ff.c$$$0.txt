-----label-----
1
-----code-----
static struct drm_mm_node *drm_mm_search_free_in_range_generic(const struct drm_mm *mm,
							u64 size,
							unsigned alignment,
							unsigned long color,
							u64 start,
							u64 end,
							enum drm_mm_search_flags flags)
{
	struct drm_mm_node *entry;
	struct drm_mm_node *best;
	u64 adj_start;
	u64 adj_end;
	u64 best_size;

	BUG_ON(mm->scanned_blocks);

	best = NULL;
	best_size = ~0UL;

	for (entry = get_first_hole(mm, flags);
			drm_mm_hole_traversal_condition(mm, entry, flags);
			entry = get_next_hole(entry, flags)) {
		u64 hole_size;

		adj_start = drm_mm_hole_node_start(entry);
		adj_end = drm_mm_hole_node_end(entry);
		hole_size = adj_end - adj_start;

		if (mm->color_adjust) {
			mm->color_adjust(entry, color, &adj_start, &adj_end);
			if (adj_end <= adj_start)
				continue;
		}

		adj_start = max(adj_start, start);
		adj_end = min(adj_end, end);

		if (!check_free_hole(adj_start, adj_end, size, alignment))
			continue;

		if (!(flags & DRM_MM_SEARCH_BEST))
			return entry;

		if (hole_size < best_size) {
			best = entry;
			best_size = hole_size;
		}
	}

	return best;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
4,13
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
20,21
22,23
22,24
24,25
26,27
26,28
27,28
29,30
31,32
31,33
32,33
34,35
36,37
36,38
37,38
39,40
41,42
41,43
41,44
41,45
41,46
41,47
41,48
41,49
41,50
41,51
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
78,79
78,80
79,80
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
94,96
94,97
94,98
95,96
96,97
96,98
97,98
99,100
99,101
99,102
100,101
102,103
104,105
106,107
106,108
106,109
106,110
107,108
109,110
111,112
113,114
115,116
115,117
116,117
118,119
118,120
118,121
119,120
121,122
123,124
125,126
125,127
125,128
125,129
125,130
125,131
125,132
125,133
125,134
125,135
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
136,138
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
146,147
148,149
150,151
151,152
151,153
152,153
154,155
154,156
155,156
157,158
159,160
159,161
160,161
160,162
161,162
164,165
164,166
165,166
166,167
166,168
166,169
166,170
166,171
167,168
167,169
168,169
171,172
173,174
175,176
176,177
178,179
179,180
181,182
181,183
182,183
182,184
183,184
185,186
188,189
189,190
189,191
190,191
192,193
192,194
192,195
193,194
195,196
197,198
199,200
200,201
200,202
201,202
203,204
203,205
203,206
204,205
206,207
208,209
210,211
210,212
211,212
212,213
212,214
212,215
212,216
212,217
213,214
215,216
217,218
219,220
221,222
224,225
224,226
225,226
226,227
227,228
227,229
228,229
230,231
232,233
233,234
235,236
235,237
236,237
236,238
237,238
239,240
241,242
241,243
242,243
243,244
243,245
244,245
246,247
248,249
249,250
249,251
250,251
252,253
254,255
255,256
-----nextToken-----
3,5,6,9,11,12,15,17,19,21,23,25,28,30,33,35,38,40,45,47,48,52,54,55,59,61,65,67,71,73,77,80,81,85,87,91,93,98,101,103,105,108,110,112,114,117,120,122,124,129,131,135,138,140,144,147,149,153,156,158,162,163,169,170,172,174,177,180,184,186,187,191,194,196,198,202,205,207,209,214,216,218,220,222,223,229,231,234,238,240,245,247,251,253,256
-----computeFrom-----
83,84
83,85
89,90
89,91
96,97
96,98
115,116
115,117
133,134
133,135
142,143
142,144
151,152
151,153
154,155
154,156
182,183
182,184
189,190
189,191
200,201
200,202
227,228
227,229
236,237
236,238
243,244
243,245
249,250
249,251
-----guardedBy-----
240,251
238,253
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct drm_mm_node *drm_mm_search_free_in_range_generic(const struct drm_mm *mm,							u64 size,							unsigned alignment,							unsigned long color,							u64 start,							u64 end,							enum drm_mm_search_flags flags){	struct drm_mm_node *entry;	struct drm_mm_node *best;	u64 adj_start;	u64 adj_end;	u64 best_size;	BUG_ON(mm->scanned_blocks);	best = NULL;	best_size = ~0UL;	for (entry = get_first_hole(mm, flags);			drm_mm_hole_traversal_condition(mm, entry, flags);			entry = get_next_hole(entry, flags)) {		u64 hole_size;		adj_start = drm_mm_hole_node_start(entry);		adj_end = drm_mm_hole_node_end(entry);		hole_size = adj_end - adj_start;		if (mm->color_adjust) {			mm->color_adjust(entry, color, &adj_start, &adj_end);			if (adj_end <= adj_start)				continue;		}		adj_start = max(adj_start, start);		adj_end = min(adj_end, end);		if (!check_free_hole(adj_start, adj_end, size, alignment))			continue;		if (!(flags & DRM_MM_SEARCH_BEST))			return entry;		if (hole_size < best_size) {			best = entry;			best_size = hole_size;		}	}	return best;}
static struct drm_mm_node
drm_mm_node
*drm_mm_search_free_in_range_generic(const struct drm_mm *mm,							u64 size,							unsigned alignment,							unsigned long color,							u64 start,							u64 end,							enum drm_mm_search_flags flags)
*
drm_mm_search_free_in_range_generic
const struct drm_mm *mm
const struct drm_mm
drm_mm
*mm
*
mm
u64 size
u64
u64
size
size
unsigned alignment
unsigned
alignment
alignment
unsigned long color
unsigned long
color
color
u64 start
u64
u64
start
start
u64 end
u64
u64
end
end
enum drm_mm_search_flags flags
enum drm_mm_search_flags
drm_mm_search_flags
flags
flags
{	struct drm_mm_node *entry;	struct drm_mm_node *best;	u64 adj_start;	u64 adj_end;	u64 best_size;	BUG_ON(mm->scanned_blocks);	best = NULL;	best_size = ~0UL;	for (entry = get_first_hole(mm, flags);			drm_mm_hole_traversal_condition(mm, entry, flags);			entry = get_next_hole(entry, flags)) {		u64 hole_size;		adj_start = drm_mm_hole_node_start(entry);		adj_end = drm_mm_hole_node_end(entry);		hole_size = adj_end - adj_start;		if (mm->color_adjust) {			mm->color_adjust(entry, color, &adj_start, &adj_end);			if (adj_end <= adj_start)				continue;		}		adj_start = max(adj_start, start);		adj_end = min(adj_end, end);		if (!check_free_hole(adj_start, adj_end, size, alignment))			continue;		if (!(flags & DRM_MM_SEARCH_BEST))			return entry;		if (hole_size < best_size) {			best = entry;			best_size = hole_size;		}	}	return best;}
struct drm_mm_node *entry;
struct drm_mm_node *entry;
struct drm_mm_node
drm_mm_node
*entry
*
entry
struct drm_mm_node *best;
struct drm_mm_node *best;
struct drm_mm_node
drm_mm_node
*best
*
best
u64 adj_start;
u64 adj_start;
u64
u64
adj_start
adj_start
u64 adj_end;
u64 adj_end;
u64
u64
adj_end
adj_end
u64 best_size;
u64 best_size;
u64
u64
best_size
best_size
BUG_ON(mm->scanned_blocks);
BUG_ON(mm->scanned_blocks)
BUG_ON
BUG_ON
mm->scanned_blocks
mm
mm
scanned_blocks
best = NULL;
best = NULL
best
best
NULL
NULL
best_size = ~0UL;
best_size = ~0UL
best_size
best_size
~0UL
0UL
for (entry = get_first_hole(mm, flags);			drm_mm_hole_traversal_condition(mm, entry, flags);			entry = get_next_hole(entry, flags)) {		u64 hole_size;		adj_start = drm_mm_hole_node_start(entry);		adj_end = drm_mm_hole_node_end(entry);		hole_size = adj_end - adj_start;		if (mm->color_adjust) {			mm->color_adjust(entry, color, &adj_start, &adj_end);			if (adj_end <= adj_start)				continue;		}		adj_start = max(adj_start, start);		adj_end = min(adj_end, end);		if (!check_free_hole(adj_start, adj_end, size, alignment))			continue;		if (!(flags & DRM_MM_SEARCH_BEST))			return entry;		if (hole_size < best_size) {			best = entry;			best_size = hole_size;		}	}
entry = get_first_hole(mm, flags);
entry = get_first_hole(mm, flags)
entry
entry
get_first_hole(mm, flags)
get_first_hole
get_first_hole
mm
mm
flags
flags
drm_mm_hole_traversal_condition(mm, entry, flags)
drm_mm_hole_traversal_condition
drm_mm_hole_traversal_condition
mm
mm
entry
entry
flags
flags
entry = get_next_hole(entry, flags)
entry
entry
get_next_hole(entry, flags)
get_next_hole
get_next_hole
entry
entry
flags
flags
{		u64 hole_size;		adj_start = drm_mm_hole_node_start(entry);		adj_end = drm_mm_hole_node_end(entry);		hole_size = adj_end - adj_start;		if (mm->color_adjust) {			mm->color_adjust(entry, color, &adj_start, &adj_end);			if (adj_end <= adj_start)				continue;		}		adj_start = max(adj_start, start);		adj_end = min(adj_end, end);		if (!check_free_hole(adj_start, adj_end, size, alignment))			continue;		if (!(flags & DRM_MM_SEARCH_BEST))			return entry;		if (hole_size < best_size) {			best = entry;			best_size = hole_size;		}	}
u64 hole_size;
u64 hole_size;
u64
u64
hole_size
hole_size
adj_start = drm_mm_hole_node_start(entry);
adj_start = drm_mm_hole_node_start(entry)
adj_start
adj_start
drm_mm_hole_node_start(entry)
drm_mm_hole_node_start
drm_mm_hole_node_start
entry
entry
adj_end = drm_mm_hole_node_end(entry);
adj_end = drm_mm_hole_node_end(entry)
adj_end
adj_end
drm_mm_hole_node_end(entry)
drm_mm_hole_node_end
drm_mm_hole_node_end
entry
entry
hole_size = adj_end - adj_start;
hole_size = adj_end - adj_start
hole_size
hole_size
adj_end - adj_start
adj_end
adj_end
adj_start
adj_start
if (mm->color_adjust) {			mm->color_adjust(entry, color, &adj_start, &adj_end);			if (adj_end <= adj_start)				continue;		}
mm->color_adjust
mm
mm
color_adjust
{			mm->color_adjust(entry, color, &adj_start, &adj_end);			if (adj_end <= adj_start)				continue;		}
mm->color_adjust(entry, color, &adj_start, &adj_end);
mm->color_adjust(entry, color, &adj_start, &adj_end)
mm->color_adjust
mm
mm
color_adjust
entry
entry
color
color
&adj_start
adj_start
adj_start
&adj_end
adj_end
adj_end
if (adj_end <= adj_start)				continue;
adj_end <= adj_start
adj_end
adj_end
adj_start
adj_start
continue;
adj_start = max(adj_start, start);
adj_start = max(adj_start, start)
adj_start
adj_start
max(adj_start, start)
max
max
adj_start
adj_start
start
start
adj_end = min(adj_end, end);
adj_end = min(adj_end, end)
adj_end
adj_end
min(adj_end, end)
min
min
adj_end
adj_end
end
end
if (!check_free_hole(adj_start, adj_end, size, alignment))			continue;
!check_free_hole(adj_start, adj_end, size, alignment)
check_free_hole(adj_start, adj_end, size, alignment)
check_free_hole
check_free_hole
adj_start
adj_start
adj_end
adj_end
size
size
alignment
alignment
continue;
if (!(flags & DRM_MM_SEARCH_BEST))			return entry;
!(flags & DRM_MM_SEARCH_BEST)
(flags & DRM_MM_SEARCH_BEST)
flags & DRM_MM_SEARCH_BEST
flags
flags
DRM_MM_SEARCH_BEST
DRM_MM_SEARCH_BEST
return entry;
entry
entry
if (hole_size < best_size) {			best = entry;			best_size = hole_size;		}
hole_size < best_size
hole_size
hole_size
best_size
best_size
{			best = entry;			best_size = hole_size;		}
best = entry;
best = entry
best
best
entry
entry
best_size = hole_size;
best_size = hole_size
best_size
best_size
hole_size
hole_size
return best;
best
best
-----joern-----
(93,90,0)
(31,108,0)
(78,43,0)
(93,85,0)
(89,42,0)
(72,13,0)
(88,87,0)
(93,43,0)
(77,87,0)
(12,43,0)
(43,25,0)
(5,77,0)
(32,83,0)
(88,6,0)
(103,92,0)
(6,10,0)
(6,78,0)
(17,21,0)
(75,88,0)
(99,43,0)
(87,102,0)
(61,46,0)
(43,42,0)
(4,38,0)
(84,38,0)
(6,2,0)
(83,63,0)
(24,98,0)
(64,29,0)
(95,85,0)
(104,46,0)
(94,72,0)
(41,51,0)
(86,21,0)
(18,10,0)
(45,65,0)
(25,108,0)
(82,102,0)
(14,12,0)
(38,63,0)
(77,76,0)
(54,6,0)
(98,65,0)
(108,26,0)
(69,106,0)
(26,10,0)
(34,6,0)
(6,108,0)
(1,12,0)
(107,104,0)
(72,10,0)
(101,21,0)
(99,87,0)
(77,74,0)
(26,108,0)
(51,42,0)
(102,10,0)
(38,84,0)
(33,105,0)
(0,40,0)
(46,21,0)
(92,76,0)
(55,105,0)
(26,13,0)
(52,42,0)
(102,108,0)
(73,56,0)
(58,42,0)
(25,43,0)
(97,26,0)
(40,0,0)
(59,42,0)
(84,21,0)
(66,56,0)
(102,87,0)
(105,63,0)
(76,42,0)
(39,38,0)
(72,63,0)
(7,21,0)
(71,65,0)
(105,108,0)
(57,40,0)
(3,92,0)
(36,98,0)
(19,76,0)
(85,93,0)
(66,104,0)
(98,51,0)
(40,13,0)
(80,21,0)
(92,22,0)
(105,10,0)
(91,21,0)
(64,108,0)
(67,99,0)
(70,72,0)
(12,51,0)
(16,78,0)
(6,88,0)
(25,10,0)
(56,10,0)
(68,64,0)
(44,93,0)
(106,29,0)
(50,93,0)
(30,64,0)
(8,92,0)
(81,2,0)
(78,6,0)
(64,10,0)
(15,46,0)
(100,77,0)
(65,21,0)
(37,43,0)
(85,42,0)
(76,77,0)
(53,42,0)
(9,25,0)
(104,21,0)
(96,99,0)
(92,3,0)
(62,26,0)
(92,79,0)
(6,49,0)
(28,87,0)
(12,87,0)
(23,106,0)
(48,92,0)
(51,12,0)
(27,40,0)
(56,108,0)
(106,51,0)
(10,72,0)
(92,85,0)
(87,42,0)
(20,105,0)
(98,106,0)
(105,13,0)
(47,83,0)
(104,64,0)
(35,92,0)
(40,13,1)
(6,88,1)
(45,71,1)
(108,26,1)
(105,10,1)
(98,24,1)
(38,39,1)
(69,64,1)
(71,46,1)
(38,63,1)
(16,88,1)
(41,43,1)
(33,10,1)
(64,30,1)
(95,76,1)
(88,87,1)
(98,51,1)
(66,56,1)
(102,108,1)
(98,106,1)
(73,0,1)
(105,63,1)
(57,27,1)
(56,10,1)
(66,104,1)
(92,76,1)
(31,98,1)
(105,20,1)
(62,97,1)
(47,51,1)
(39,4,1)
(87,102,1)
(64,108,1)
(26,10,1)
(34,54,1)
(93,44,1)
(8,48,1)
(56,73,1)
(11,99,1)
(93,43,1)
(83,32,1)
(55,33,1)
(19,99,1)
(99,96,1)
(12,87,1)
(50,95,1)
(100,19,1)
(105,108,1)
(92,85,1)
(103,85,1)
(97,31,1)
(25,108,1)
(44,50,1)
(1,41,1)
(33,108,1)
(43,25,1)
(60,3,1)
(92,79,1)
(6,10,1)
(26,108,1)
(26,62,1)
(14,1,1)
(31,106,1)
(3,92,1)
(28,105,1)
(25,9,1)
(76,77,1)
(98,65,1)
(104,64,1)
(26,13,1)
(12,43,1)
(99,43,1)
(92,22,1)
(78,16,1)
(6,78,1)
(99,87,1)
(6,108,1)
(40,57,1)
(85,93,1)
(82,28,1)
(15,84,1)
(75,34,1)
(48,103,1)
(12,14,1)
(102,82,1)
(46,61,1)
(32,47,1)
(83,63,1)
(24,36,1)
(102,10,1)
(77,74,1)
(0,40,1)
(104,46,1)
(68,98,1)
(35,8,1)
(36,0,1)
(104,107,1)
(93,90,1)
(106,23,1)
(51,12,1)
(92,35,1)
(5,100,1)
(30,68,1)
(10,72,1)
(9,37,1)
(64,10,1)
(65,45,1)
(31,11,1)
(72,94,1)
(20,55,1)
(107,105,1)
(6,49,1)
(56,108,1)
(72,63,1)
(54,83,1)
(37,87,1)
(84,38,1)
(19,83,1)
(77,87,1)
(77,5,1)
(78,43,1)
(105,13,1)
(18,65,1)
(23,69,1)
(61,15,1)
(25,10,1)
(96,67,1)
(70,18,1)
(31,60,1)
(94,70,1)
(88,75,1)
(67,6,1)
(106,51,1)
(27,3,1)
(72,13,1)
(85,93,2)
(8,83,2)
(100,99,2)
(103,99,2)
(75,83,2)
(5,99,2)
(78,43,2)
(33,3,2)
(19,83,2)
(35,83,2)
(85,99,2)
(99,87,2)
(103,83,2)
(105,10,2)
(20,0,2)
(104,46,2)
(105,108,2)
(6,108,2)
(16,83,2)
(11,99,2)
(34,83,2)
(85,83,2)
(27,3,2)
(92,99,2)
(55,3,2)
(40,3,2)
(24,0,2)
(1,105,2)
(54,83,2)
(98,65,2)
(62,99,2)
(108,99,2)
(83,105,2)
(87,102,2)
(97,0,2)
(55,99,2)
(20,3,2)
(55,0,2)
(6,10,2)
(6,78,2)
(64,108,2)
(12,87,2)
(6,83,2)
(26,108,2)
(10,72,2)
(44,99,2)
(73,0,2)
(26,10,2)
(0,3,2)
(97,3,2)
(104,64,2)
(88,83,2)
(108,0,2)
(76,83,2)
(72,13,2)
(92,85,2)
(8,99,2)
(69,98,2)
(102,108,2)
(56,108,2)
(92,79,2)
(50,83,2)
(25,105,2)
(51,105,2)
(92,22,2)
(99,43,2)
(43,105,2)
(93,43,2)
(26,3,2)
(92,83,2)
(26,99,2)
(106,98,2)
(40,13,2)
(37,105,2)
(105,3,2)
(66,56,2)
(56,10,2)
(6,49,2)
(26,13,2)
(41,105,2)
(33,99,2)
(93,83,2)
(0,40,2)
(105,13,2)
(99,83,2)
(3,92,2)
(48,99,2)
(95,83,2)
(9,105,2)
(19,99,2)
(60,3,2)
(92,76,2)
(76,77,2)
(77,74,2)
(68,98,2)
(82,105,2)
(104,105,2)
(50,99,2)
(48,83,2)
(25,10,2)
(20,99,2)
(107,105,2)
(43,25,2)
(83,63,2)
(72,63,2)
(26,0,2)
(93,99,2)
(12,43,2)
(38,63,2)
(30,98,2)
(106,51,2)
(88,87,2)
(98,0,2)
(105,63,2)
(14,105,2)
(36,0,2)
(32,105,2)
(35,99,2)
(28,105,2)
(51,12,2)
(102,10,2)
(97,99,2)
(64,10,2)
(31,99,2)
(31,3,2)
(105,0,2)
(12,105,2)
(108,26,2)
(31,0,2)
(47,105,2)
(57,3,2)
(33,0,2)
(62,3,2)
(76,99,2)
(3,99,2)
(87,105,2)
(23,98,2)
(105,99,2)
(25,108,2)
(108,3,2)
(3,83,2)
(77,87,2)
(77,83,2)
(56,0,2)
(100,83,2)
(6,88,2)
(98,106,2)
(95,99,2)
(62,0,2)
(44,83,2)
(67,83,2)
(102,105,2)
(96,83,2)
(66,104,2)
(84,38,2)
(5,83,2)
(93,90,2)
(98,51,2)
(64,98,2)
(78,83,2)
(77,99,2)
-----------------------------------
(0,!(flags & DRM_MM_SEARCH_BEST)
(1,adj_end)
(2,)
(3,!check_free_hole(adj_start, adj_end, size, alignment)
(4,mm)
(5,start)
(6,mm->color_adjust(entry, color, &adj_start, &adj_end)
(7,adj_end)
(8,size)
(9,entry)
(10,entry = get_first_hole(mm, flags)
(11,continue;)
(12,adj_end - adj_start)
(13,enum drm_mm_search_flags flags)
(14,adj_start)
(15,best)
(16,adj_end)
(17,adj_start)
(18,entry)
(19,adj_start)
(20,flags)
(21,)
(22,u64 size)
(23,hole_size)
(24,best_size)
(25,drm_mm_hole_node_end(entry)
(26,get_next_hole(entry, flags)
(27,flags)
(28,adj_start)
(29,)
(30,entry)
(31,entry)
(32,color_adjust)
(33,mm)
(34,color)
(35,alignment)
(36,hole_size)
(37,adj_end)
(38,mm->scanned_blocks)
(39,scanned_blocks)
(40,flags & DRM_MM_SEARCH_BEST)
(41,hole_size)
(42,)
(43,adj_end = drm_mm_hole_node_end(entry)
(44,end)
(45,~0UL)
(46,best = NULL)
(47,mm)
(48,adj_end)
(49,unsigned long color)
(50,adj_end)
(51,hole_size = adj_end - adj_start)
(52,if (hole_size < best_size)
(53,hole_size)
(54,entry)
(55,entry)
(56,return entry;)
(57,DRM_MM_SEARCH_BEST)
(58,if (mm->color_adjust)
(59,if (!check_free_hole(adj_start, adj_end, size, alignment)
(60,continue;)
(61,NULL)
(62,flags)
(63,const struct drm_mm *mm)
(64,best = entry)
(65,best_size = ~0UL)
(66,RET)
(67,adj_end)
(68,best)
(69,best_size)
(70,mm)
(71,best_size)
(72,get_first_hole(mm, flags)
(73,entry)
(74,u64 start)
(75,adj_start)
(76,adj_start = max(adj_start, start)
(77,max(adj_start, start)
(78,&adj_end)
(79,unsigned alignment)
(80,for (entry = get_first_hole(mm, flags)
(81,if (adj_end <= adj_start)
(82,entry)
(83,mm->color_adjust)
(84,BUG_ON(mm->scanned_blocks)
(85,adj_end = min(adj_end, end)
(86,entry)
(87,adj_start = drm_mm_hole_node_start(entry)
(88,&adj_start)
(89,if (!(flags & DRM_MM_SEARCH_BEST)
(90,u64 end)
(91,best)
(92,check_free_hole(adj_start, adj_end, size, alignment)
(93,min(adj_end, end)
(94,flags)
(95,adj_end)
(96,adj_start)
(97,entry)
(98,hole_size < best_size)
(99,adj_end <= adj_start)
(100,adj_start)
(101,best_size)
(102,drm_mm_hole_node_start(entry)
(103,adj_start)
(104,return best;)
(105,drm_mm_hole_traversal_condition(mm, entry, flags)
(106,best_size = hole_size)
(107,best)
(108,entry = get_next_hole(entry, flags)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^