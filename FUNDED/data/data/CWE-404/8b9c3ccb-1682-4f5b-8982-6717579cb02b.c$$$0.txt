-----label-----
0
-----code-----
struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
{
	struct request_queue *q;
	int err;

	q = kmem_cache_alloc_node(blk_requestq_cachep,
				gfp_mask | __GFP_ZERO, node_id);
	if (!q)
		return NULL;

	q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);
	if (q->id < 0)
		goto fail_q;

	q->bio_split = bioset_create(BIO_POOL_SIZE, 0);
	if (!q->bio_split)
		goto fail_id;

	q->backing_dev_info.ra_pages =
			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;
	q->backing_dev_info.capabilities = BDI_CAP_CGROUP_WRITEBACK;
	q->backing_dev_info.name = "block";
	q->node = node_id;

	err = bdi_init(&q->backing_dev_info);
	if (err)
		goto fail_split;

	setup_timer(&q->backing_dev_info.laptop_mode_wb_timer,
		    laptop_mode_timer_fn, (unsigned long) q);
	setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);
	INIT_WORK(&q->timeout_work, NULL);
	INIT_LIST_HEAD(&q->queue_head);
	INIT_LIST_HEAD(&q->timeout_list);
	INIT_LIST_HEAD(&q->icq_list);
#ifdef CONFIG_BLK_CGROUP
	INIT_LIST_HEAD(&q->blkg_list);
#endif
	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);

	kobject_init(&q->kobj, &blk_queue_ktype);

	mutex_init(&q->sysfs_lock);
	spin_lock_init(&q->__queue_lock);

	/*
	 * By default initialize queue_lock to internal lock and driver can
	 * override it later if need be.
	 */
	q->queue_lock = &q->__queue_lock;

	/*
	 * A queue starts its life with bypass turned on to avoid
	 * unnecessary bypass on/off overhead and nasty surprises during
	 * init.  The initial bypass will be finished when the queue is
	 * registered by blk_register_queue().
	 */
	q->bypass_depth = 1;
	__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);

	init_waitqueue_head(&q->mq_freeze_wq);

	/*
	 * Init percpu_ref in atomic mode so that it's faster to shutdown.
	 * See blk_register_queue() for details.
	 */
	if (percpu_ref_init(&q->q_usage_counter,
				blk_queue_usage_counter_release,
				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))
		goto fail_bdi;

	if (blkcg_init_queue(q))
		goto fail_ref;

	return q;

fail_ref:
	percpu_ref_exit(&q->q_usage_counter);
fail_bdi:
	bdi_destroy(&q->backing_dev_info);
fail_split:
	bioset_free(q->bio_split);
fail_id:
	ida_simple_remove(&blk_queue_ida, q->id);
fail_q:
	kmem_cache_free(blk_requestq_cachep, q);
	return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
12,13
12,14
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
16,34
16,35
16,36
16,37
16,38
16,39
16,40
16,41
16,42
16,43
16,44
16,45
16,46
16,47
16,48
16,49
16,50
16,51
16,52
16,53
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
33,37
34,35
36,37
38,39
38,40
39,40
41,42
43,44
45,46
45,47
46,47
47,48
49,50
50,51
52,53
53,54
53,55
54,55
54,56
55,56
58,59
58,60
58,61
58,62
58,63
59,60
61,62
62,63
66,67
68,69
68,70
69,70
69,71
70,71
70,72
71,72
75,76
77,78
78,79
78,80
79,80
79,81
80,81
83,84
83,85
83,86
84,85
86,87
89,90
89,91
90,91
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
105,106
105,107
106,107
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
121,122
123,124
124,125
124,126
125,126
125,127
126,127
126,128
127,128
132,133
133,134
133,135
134,135
134,136
135,136
138,139
140,141
141,142
141,143
142,143
144,145
144,146
145,146
147,148
148,149
148,150
149,150
152,153
152,154
153,154
155,156
157,158
158,159
158,160
158,161
158,162
159,160
161,162
162,163
162,164
163,164
163,165
164,165
168,169
170,171
170,172
171,172
171,173
174,175
176,177
177,178
177,179
177,180
177,181
178,179
180,181
181,182
181,183
182,183
185,186
187,188
187,189
188,189
188,190
191,192
193,194
194,195
194,196
194,197
195,196
197,198
198,199
198,200
199,200
202,203
204,205
205,206
205,207
206,207
208,209
209,210
209,211
210,211
213,214
214,215
214,216
215,216
217,218
218,219
218,220
219,220
222,223
223,224
223,225
224,225
226,227
227,228
227,229
228,229
231,232
232,233
232,234
232,235
233,234
235,236
236,237
236,238
237,238
240,241
242,243
243,244
243,245
243,246
244,245
246,247
247,248
247,249
248,249
251,252
252,253
254,255
255,256
255,257
256,257
258,259
259,260
259,261
260,261
263,264
264,265
264,266
265,266
267,268
268,269
268,270
269,270
272,273
273,274
273,275
274,275
274,276
275,276
278,279
279,280
279,281
280,281
283,284
284,285
284,286
285,286
285,287
286,287
290,291
291,292
291,293
291,294
292,293
294,295
296,297
297,298
297,299
298,299
301,302
302,303
302,304
303,304
305,306
306,307
306,308
307,308
310,311
310,312
311,312
311,313
311,314
311,315
311,316
312,313
314,315
315,316
315,317
316,317
319,320
321,322
323,324
325,326
327,328
327,329
328,329
328,330
329,330
331,332
333,334
335,336
336,337
338,339
338,340
340,341
341,342
341,343
342,343
344,345
345,346
345,347
346,347
349,350
349,351
351,352
352,353
352,354
353,354
355,356
356,357
356,358
357,358
360,361
360,362
362,363
363,364
363,365
364,365
366,367
366,368
367,368
370,371
370,372
372,373
373,374
373,375
373,376
374,375
376,377
377,378
379,380
379,381
380,381
383,384
383,385
385,386
386,387
386,388
386,389
387,388
389,390
391,392
393,394
394,395
-----nextToken-----
3,5,6,9,11,13,15,20,22,23,26,28,32,35,37,40,42,44,48,51,56,57,60,63,64,65,67,72,73,74,76,81,82,85,87,88,93,94,96,102,103,104,109,110,112,118,119,120,122,128,129,130,131,136,137,139,143,146,150,151,154,156,160,165,166,167,169,172,173,175,179,183,184,186,189,190,192,196,200,201,203,207,211,212,216,220,221,225,229,230,234,238,239,241,245,249,250,253,257,261,262,266,270,271,276,277,281,282,287,288,289,293,295,299,300,304,308,309,313,317,318,320,322,324,326,330,332,334,337,339,343,347,348,350,354,358,359,361,365,368,369,371,375,378,381,382,384,388,390,392,395
-----computeFrom-----
30,31
30,32
38,39
38,40
53,54
53,55
69,70
69,71
78,79
78,80
98,99
98,100
105,106
105,107
107,108
107,109
114,115
114,116
124,125
124,126
133,134
133,135
141,142
141,143
273,274
273,275
284,285
284,286
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id){	struct request_queue *q;	int err;	q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id);	if (!q)		return NULL;	q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);	if (q->id < 0)		goto fail_q;	q->bio_split = bioset_create(BIO_POOL_SIZE, 0);	if (!q->bio_split)		goto fail_id;	q->backing_dev_info.ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;	q->backing_dev_info.capabilities = BDI_CAP_CGROUP_WRITEBACK;	q->backing_dev_info.name = "block";	q->node = node_id;	err = bdi_init(&q->backing_dev_info);	if (err)		goto fail_split;	setup_timer(&q->backing_dev_info.laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q);	setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);	INIT_WORK(&q->timeout_work, NULL);	INIT_LIST_HEAD(&q->queue_head);	INIT_LIST_HEAD(&q->timeout_list);	INIT_LIST_HEAD(&q->icq_list);#ifdef CONFIG_BLK_CGROUP	INIT_LIST_HEAD(&q->blkg_list);#endif	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);	kobject_init(&q->kobj, &blk_queue_ktype);	mutex_init(&q->sysfs_lock);	spin_lock_init(&q->__queue_lock);	/*	 * By default initialize queue_lock to internal lock and driver can	 * override it later if need be.	 */	q->queue_lock = &q->__queue_lock;	/*	 * A queue starts its life with bypass turned on to avoid	 * unnecessary bypass on/off overhead and nasty surprises during	 * init.  The initial bypass will be finished when the queue is	 * registered by blk_register_queue().	 */	q->bypass_depth = 1;	__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);	init_waitqueue_head(&q->mq_freeze_wq);	/*	 * Init percpu_ref in atomic mode so that it's faster to shutdown.	 * See blk_register_queue() for details.	 */	if (percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))		goto fail_bdi;	if (blkcg_init_queue(q))		goto fail_ref;	return q;fail_ref:	percpu_ref_exit(&q->q_usage_counter);fail_bdi:	bdi_destroy(&q->backing_dev_info);fail_split:	bioset_free(q->bio_split);fail_id:	ida_simple_remove(&blk_queue_ida, q->id);fail_q:	kmem_cache_free(blk_requestq_cachep, q);	return NULL;}
struct request_queue
request_queue
*blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
*
blk_alloc_queue_node
gfp_t gfp_mask
gfp_t
gfp_t
gfp_mask
gfp_mask
int node_id
int
node_id
node_id
{	struct request_queue *q;	int err;	q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id);	if (!q)		return NULL;	q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);	if (q->id < 0)		goto fail_q;	q->bio_split = bioset_create(BIO_POOL_SIZE, 0);	if (!q->bio_split)		goto fail_id;	q->backing_dev_info.ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;	q->backing_dev_info.capabilities = BDI_CAP_CGROUP_WRITEBACK;	q->backing_dev_info.name = "block";	q->node = node_id;	err = bdi_init(&q->backing_dev_info);	if (err)		goto fail_split;	setup_timer(&q->backing_dev_info.laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q);	setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);	INIT_WORK(&q->timeout_work, NULL);	INIT_LIST_HEAD(&q->queue_head);	INIT_LIST_HEAD(&q->timeout_list);	INIT_LIST_HEAD(&q->icq_list);#ifdef CONFIG_BLK_CGROUP	INIT_LIST_HEAD(&q->blkg_list);#endif	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);	kobject_init(&q->kobj, &blk_queue_ktype);	mutex_init(&q->sysfs_lock);	spin_lock_init(&q->__queue_lock);	/*	 * By default initialize queue_lock to internal lock and driver can	 * override it later if need be.	 */	q->queue_lock = &q->__queue_lock;	/*	 * A queue starts its life with bypass turned on to avoid	 * unnecessary bypass on/off overhead and nasty surprises during	 * init.  The initial bypass will be finished when the queue is	 * registered by blk_register_queue().	 */	q->bypass_depth = 1;	__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);	init_waitqueue_head(&q->mq_freeze_wq);	/*	 * Init percpu_ref in atomic mode so that it's faster to shutdown.	 * See blk_register_queue() for details.	 */	if (percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))		goto fail_bdi;	if (blkcg_init_queue(q))		goto fail_ref;	return q;fail_ref:	percpu_ref_exit(&q->q_usage_counter);fail_bdi:	bdi_destroy(&q->backing_dev_info);fail_split:	bioset_free(q->bio_split);fail_id:	ida_simple_remove(&blk_queue_ida, q->id);fail_q:	kmem_cache_free(blk_requestq_cachep, q);	return NULL;}
struct request_queue *q;
struct request_queue *q;
struct request_queue
request_queue
*q
*
q
int err;
int err;
int
err
err
q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id);
q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id)
q
q
kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id)
kmem_cache_alloc_node
kmem_cache_alloc_node
blk_requestq_cachep
blk_requestq_cachep
gfp_mask | __GFP_ZERO
gfp_mask
gfp_mask
__GFP_ZERO
__GFP_ZERO
node_id
node_id
if (!q)		return NULL;
!q
q
q
return NULL;
NULL
NULL
q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);
q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
q->id
q
q
id
ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
ida_simple_get
ida_simple_get
&blk_queue_ida
blk_queue_ida
blk_queue_ida
0
0
gfp_mask
gfp_mask
if (q->id < 0)		goto fail_q;
q->id < 0
q->id
q
q
id
0
goto fail_q;
fail_q
q->bio_split = bioset_create(BIO_POOL_SIZE, 0);
q->bio_split = bioset_create(BIO_POOL_SIZE, 0)
q->bio_split
q
q
bio_split
bioset_create(BIO_POOL_SIZE, 0)
bioset_create
bioset_create
BIO_POOL_SIZE
BIO_POOL_SIZE
0
if (!q->bio_split)		goto fail_id;
!q->bio_split
q->bio_split
q
q
bio_split
goto fail_id;
fail_id
q->backing_dev_info.ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;
q->backing_dev_info.ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE
q->backing_dev_info.ra_pages
q->backing_dev_info
q
q
backing_dev_info
ra_pages
(VM_MAX_READAHEAD * 1024) / PAGE_SIZE
(VM_MAX_READAHEAD * 1024)
VM_MAX_READAHEAD * 1024
VM_MAX_READAHEAD
VM_MAX_READAHEAD
1024
PAGE_SIZE
PAGE_SIZE
q->backing_dev_info.capabilities = BDI_CAP_CGROUP_WRITEBACK;
q->backing_dev_info.capabilities = BDI_CAP_CGROUP_WRITEBACK
q->backing_dev_info.capabilities
q->backing_dev_info
q
q
backing_dev_info
capabilities
BDI_CAP_CGROUP_WRITEBACK
BDI_CAP_CGROUP_WRITEBACK
q->backing_dev_info.name = "block";
q->backing_dev_info.name = "block"
q->backing_dev_info.name
q->backing_dev_info
q
q
backing_dev_info
name
"block"
q->node = node_id;
q->node = node_id
q->node
q
q
node
node_id
node_id
err = bdi_init(&q->backing_dev_info);
err = bdi_init(&q->backing_dev_info)
err
err
bdi_init(&q->backing_dev_info)
bdi_init
bdi_init
&q->backing_dev_info
q->backing_dev_info
q
q
backing_dev_info
if (err)		goto fail_split;
err
err
goto fail_split;
fail_split
setup_timer(&q->backing_dev_info.laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q);
setup_timer(&q->backing_dev_info.laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q)
setup_timer
setup_timer
&q->backing_dev_info.laptop_mode_wb_timer
q->backing_dev_info.laptop_mode_wb_timer
q->backing_dev_info
q
q
backing_dev_info
laptop_mode_wb_timer
laptop_mode_timer_fn
laptop_mode_timer_fn
(unsigned long) q
unsigned long
unsigned long

q
q
setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);
setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q)
setup_timer
setup_timer
&q->timeout
q->timeout
q
q
timeout
blk_rq_timed_out_timer
blk_rq_timed_out_timer
(unsigned long) q
unsigned long
unsigned long

q
q
INIT_WORK(&q->timeout_work, NULL);
INIT_WORK(&q->timeout_work, NULL)
INIT_WORK
INIT_WORK
&q->timeout_work
q->timeout_work
q
q
timeout_work
NULL
NULL
INIT_LIST_HEAD(&q->queue_head);
INIT_LIST_HEAD(&q->queue_head)
INIT_LIST_HEAD
INIT_LIST_HEAD
&q->queue_head
q->queue_head
q
q
queue_head
INIT_LIST_HEAD(&q->timeout_list);
INIT_LIST_HEAD(&q->timeout_list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&q->timeout_list
q->timeout_list
q
q
timeout_list
INIT_LIST_HEAD(&q->icq_list);
INIT_LIST_HEAD(&q->icq_list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&q->icq_list
q->icq_list
q
q
icq_list
INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);
INIT_DELAYED_WORK(&q->delay_work, blk_delay_work)
INIT_DELAYED_WORK
INIT_DELAYED_WORK
&q->delay_work
q->delay_work
q
q
delay_work
blk_delay_work
blk_delay_work
kobject_init(&q->kobj, &blk_queue_ktype);
kobject_init(&q->kobj, &blk_queue_ktype)
kobject_init
kobject_init
&q->kobj
q->kobj
q
q
kobj
&blk_queue_ktype
blk_queue_ktype
blk_queue_ktype
mutex_init(&q->sysfs_lock);
mutex_init(&q->sysfs_lock)
mutex_init
mutex_init
&q->sysfs_lock
q->sysfs_lock
q
q
sysfs_lock
spin_lock_init(&q->__queue_lock);
spin_lock_init(&q->__queue_lock)
spin_lock_init
spin_lock_init
&q->__queue_lock
q->__queue_lock
q
q
__queue_lock
q->queue_lock = &q->__queue_lock;
q->queue_lock = &q->__queue_lock
q->queue_lock
q
q
queue_lock
&q->__queue_lock
q->__queue_lock
q
q
__queue_lock
q->bypass_depth = 1;
q->bypass_depth = 1
q->bypass_depth
q
q
bypass_depth
1
__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);
__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags)
__set_bit
__set_bit
QUEUE_FLAG_BYPASS
QUEUE_FLAG_BYPASS
&q->queue_flags
q->queue_flags
q
q
queue_flags
init_waitqueue_head(&q->mq_freeze_wq);
init_waitqueue_head(&q->mq_freeze_wq)
init_waitqueue_head
init_waitqueue_head
&q->mq_freeze_wq
q->mq_freeze_wq
q
q
mq_freeze_wq
if (percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))		goto fail_bdi;
percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL)
percpu_ref_init
percpu_ref_init
&q->q_usage_counter
q->q_usage_counter
q
q
q_usage_counter
blk_queue_usage_counter_release
blk_queue_usage_counter_release
PERCPU_REF_INIT_ATOMIC
PERCPU_REF_INIT_ATOMIC
GFP_KERNEL
GFP_KERNEL
goto fail_bdi;
fail_bdi
if (blkcg_init_queue(q))		goto fail_ref;
blkcg_init_queue(q)
blkcg_init_queue
blkcg_init_queue
q
q
goto fail_ref;
fail_ref
return q;
q
q
fail_ref:	percpu_ref_exit(&q->q_usage_counter);
fail_ref
percpu_ref_exit(&q->q_usage_counter);
percpu_ref_exit(&q->q_usage_counter)
percpu_ref_exit
percpu_ref_exit
&q->q_usage_counter
q->q_usage_counter
q
q
q_usage_counter
fail_bdi:	bdi_destroy(&q->backing_dev_info);
fail_bdi
bdi_destroy(&q->backing_dev_info);
bdi_destroy(&q->backing_dev_info)
bdi_destroy
bdi_destroy
&q->backing_dev_info
q->backing_dev_info
q
q
backing_dev_info
fail_split:	bioset_free(q->bio_split);
fail_split
bioset_free(q->bio_split);
bioset_free(q->bio_split)
bioset_free
bioset_free
q->bio_split
q
q
bio_split
fail_id:	ida_simple_remove(&blk_queue_ida, q->id);
fail_id
ida_simple_remove(&blk_queue_ida, q->id);
ida_simple_remove(&blk_queue_ida, q->id)
ida_simple_remove
ida_simple_remove
&blk_queue_ida
blk_queue_ida
blk_queue_ida
q->id
q
q
id
fail_q:	kmem_cache_free(blk_requestq_cachep, q);
fail_q
kmem_cache_free(blk_requestq_cachep, q);
kmem_cache_free(blk_requestq_cachep, q)
kmem_cache_free
kmem_cache_free
blk_requestq_cachep
blk_requestq_cachep
q
q
return NULL;
NULL
NULL
-----joern-----
(221,223,0)
(82,132,0)
(93,71,0)
(15,42,0)
(2,71,0)
(40,47,0)
(24,119,0)
(63,108,0)
(23,148,0)
(38,220,0)
(115,71,0)
(12,94,0)
(3,97,0)
(97,183,0)
(29,125,0)
(186,8,0)
(204,105,0)
(202,80,0)
(16,209,0)
(91,2,0)
(119,68,0)
(215,12,0)
(120,210,0)
(161,29,0)
(207,5,0)
(171,203,0)
(98,96,0)
(71,125,0)
(44,125,0)
(197,28,0)
(179,227,0)
(212,132,0)
(197,206,0)
(224,126,0)
(20,111,0)
(187,94,0)
(157,177,0)
(87,15,0)
(207,71,0)
(13,180,0)
(196,72,0)
(86,225,0)
(111,33,0)
(217,47,0)
(177,71,0)
(51,142,0)
(106,177,0)
(29,82,0)
(21,167,0)
(72,196,0)
(174,125,0)
(155,8,0)
(152,177,0)
(75,37,0)
(57,146,0)
(172,20,0)
(109,146,0)
(223,125,0)
(104,31,0)
(192,161,0)
(202,118,0)
(25,31,0)
(164,142,0)
(35,16,0)
(140,207,0)
(214,181,0)
(205,203,0)
(118,125,0)
(203,171,0)
(91,49,0)
(201,126,0)
(108,63,0)
(167,21,0)
(134,118,0)
(46,155,0)
(12,88,0)
(112,152,0)
(15,16,0)
(137,97,0)
(139,125,0)
(76,93,0)
(210,78,0)
(18,164,0)
(19,180,0)
(21,122,0)
(92,35,0)
(68,119,0)
(36,88,0)
(74,93,0)
(81,91,0)
(33,225,0)
(145,5,0)
(84,206,0)
(8,155,0)
(119,24,0)
(170,31,0)
(184,113,0)
(54,71,0)
(27,196,0)
(188,125,0)
(33,111,0)
(45,53,0)
(144,15,0)
(35,71,0)
(22,205,0)
(96,98,0)
(23,125,0)
(55,220,0)
(117,107,0)
(112,217,0)
(219,107,0)
(17,2,0)
(56,71,0)
(205,71,0)
(83,24,0)
(190,171,0)
(130,71,0)
(4,125,0)
(52,224,0)
(146,109,0)
(39,35,0)
(136,142,0)
(141,8,0)
(194,125,0)
(220,38,0)
(147,209,0)
(1,47,0)
(47,71,0)
(198,71,0)
(28,197,0)
(170,4,0)
(164,193,0)
(89,114,0)
(146,71,0)
(197,125,0)
(143,7,0)
(123,97,0)
(213,148,0)
(4,170,0)
(94,12,0)
(91,125,0)
(85,125,0)
(191,71,0)
(113,184,0)
(47,217,0)
(31,71,0)
(78,53,0)
(28,71,0)
(103,125,0)
(203,205,0)
(0,152,0)
(68,71,0)
(71,142,0)
(127,68,0)
(209,16,0)
(49,188,0)
(196,71,0)
(158,80,0)
(79,37,0)
(179,125,0)
(142,227,0)
(222,2,0)
(78,125,0)
(67,205,0)
(185,66,0)
(14,33,0)
(105,125,0)
(218,130,0)
(94,71,0)
(15,71,0)
(31,170,0)
(180,71,0)
(199,181,0)
(110,143,0)
(75,71,0)
(30,49,0)
(97,3,0)
(63,109,0)
(202,91,0)
(107,71,0)
(66,125,0)
(206,197,0)
(26,108,0)
(161,116,0)
(132,82,0)
(3,125,0)
(5,207,0)
(180,34,0)
(111,125,0)
(181,71,0)
(216,207,0)
(150,75,0)
(217,125,0)
(116,161,0)
(91,130,0)
(132,71,0)
(213,71,0)
(154,183,0)
(163,125,0)
(224,3,0)
(99,97,0)
(160,125,0)
(32,38,0)
(70,122,0)
(156,196,0)
(20,114,0)
(62,125,0)
(178,115,0)
(64,213,0)
(107,7,0)
(42,15,0)
(165,132,0)
(145,125,0)
(114,20,0)
(29,161,0)
(129,38,0)
(195,125,0)
(115,179,0)
(162,146,0)
(130,105,0)
(10,143,0)
(188,34,0)
(49,71,0)
(153,94,0)
(50,125,0)
(98,93,0)
(43,125,0)
(169,66,0)
(97,193,0)
(120,71,0)
(59,125,0)
(161,71,0)
(16,125,0)
(11,224,0)
(82,29,0)
(208,125,0)
(55,125,0)
(148,23,0)
(109,63,0)
(118,71,0)
(78,210,0)
(8,71,0)
(90,100,0)
(46,125,0)
(48,217,0)
(72,226,0)
(24,125,0)
(88,125,0)
(6,68,0)
(177,152,0)
(108,125,0)
(61,209,0)
(91,20,0)
(126,224,0)
(167,125,0)
(2,16,0)
(93,98,0)
(37,223,0)
(122,21,0)
(100,3,0)
(200,120,0)
(181,113,0)
(210,120,0)
(102,35,0)
(121,130,0)
(220,55,0)
(171,125,0)
(7,143,0)
(37,75,0)
(182,28,0)
(226,125,0)
(91,12,0)
(35,39,0)
(9,164,0)
(148,213,0)
(5,145,0)
(211,115,0)
(133,114,0)
(217,112,0)
(173,191,0)
(38,71,0)
(100,71,0)
(166,191,0)
(183,97,0)
(114,71,0)
(65,54,0)
(7,107,0)
(73,122,0)
(96,125,0)
(91,100,0)
(34,188,0)
(225,33,0)
(224,71,0)
(166,50,0)
(28,3,0)
(191,166,0)
(47,1,0)
(226,72,0)
(142,71,0)
(155,46,0)
(41,225,0)
(189,179,0)
(138,28,0)
(152,112,0)
(113,181,0)
(34,180,0)
(39,125,0)
(159,75,0)
(184,125,0)
(128,120,0)
(151,100,0)
(142,164,0)
(58,184,0)
(53,78,0)
(135,29,0)
(95,213,0)
(50,166,0)
(168,191,0)
(60,49,0)
(91,37,0)
(122,71,0)
(66,71,0)
(131,143,0)
(91,115,0)
(77,56,0)
(10,131,1)
(186,175,1)
(214,29,1)
(46,155,1)
(107,219,1)
(88,36,1)
(12,94,1)
(3,97,1)
(24,83,1)
(75,71,1)
(51,164,1)
(222,126,1)
(152,177,1)
(42,15,1)
(153,187,1)
(54,65,1)
(218,121,1)
(96,98,1)
(197,206,1)
(50,166,1)
(213,95,1)
(188,34,1)
(134,56,1)
(2,17,1)
(5,207,1)
(141,186,1)
(191,168,1)
(83,119,1)
(224,11,1)
(121,188,1)
(154,100,1)
(209,61,1)
(8,71,1)
(224,71,1)
(20,172,1)
(140,96,1)
(15,87,1)
(93,71,1)
(92,102,1)
(132,212,1)
(17,222,1)
(70,73,1)
(181,71,1)
(161,71,1)
(11,52,1)
(74,76,1)
(156,145,1)
(75,159,1)
(171,203,1)
(189,115,1)
(60,30,1)
(89,133,1)
(223,221,1)
(13,49,1)
(28,3,1)
(49,71,1)
(87,144,1)
(94,153,1)
(29,82,1)
(159,150,1)
(97,123,1)
(113,181,1)
(180,19,1)
(29,161,1)
(179,189,1)
(23,148,1)
(148,213,1)
(168,173,1)
(206,84,1)
(126,224,1)
(81,66,1)
(58,113,1)
(15,16,1)
(143,10,1)
(119,68,1)
(73,69,1)
(124,176,1)
(61,147,1)
(112,152,1)
(207,216,1)
(210,120,1)
(84,39,1)
(224,3,1)
(161,116,1)
(27,156,1)
(39,35,1)
(86,41,1)
(91,130,1)
(219,117,1)
(32,129,1)
(91,100,1)
(155,8,1)
(212,165,1)
(56,77,1)
(146,162,1)
(52,3,1)
(131,110,1)
(54,71,1)
(142,227,1)
(122,70,1)
(20,114,1)
(26,179,1)
(120,71,1)
(97,193,1)
(211,88,1)
(55,220,1)
(126,201,1)
(98,93,1)
(226,72,1)
(152,0,1)
(84,101,1)
(179,227,1)
(104,25,1)
(205,71,1)
(145,5,1)
(79,75,1)
(28,182,1)
(6,226,1)
(101,42,1)
(102,124,1)
(202,118,1)
(185,169,1)
(181,199,1)
(202,80,1)
(120,128,1)
(0,177,1)
(33,225,1)
(34,180,1)
(47,40,1)
(136,198,1)
(177,71,1)
(7,107,1)
(167,21,1)
(66,71,1)
(138,206,1)
(187,223,1)
(130,218,1)
(56,71,1)
(169,149,1)
(178,211,1)
(72,196,1)
(82,132,1)
(143,7,1)
(161,192,1)
(204,130,1)
(166,191,1)
(192,135,1)
(35,71,1)
(33,14,1)
(173,4,1)
(49,60,1)
(184,58,1)
(130,71,1)
(201,224,1)
(40,48,1)
(147,2,1)
(14,225,1)
(182,138,1)
(80,158,1)
(137,99,1)
(164,193,1)
(57,26,1)
(184,113,1)
(53,45,1)
(165,217,1)
(162,57,1)
(132,71,1)
(225,86,1)
(164,18,1)
(2,71,1)
(41,20,1)
(77,143,1)
(4,170,1)
(91,81,1)
(95,64,1)
(169,197,1)
(15,71,1)
(91,12,1)
(133,42,1)
(217,112,1)
(71,142,1)
(146,71,1)
(128,200,1)
(19,13,1)
(24,119,1)
(175,56,1)
(151,54,1)
(68,71,1)
(109,146,1)
(200,24,1)
(37,75,1)
(122,71,1)
(22,67,1)
(180,71,1)
(217,47,1)
(63,109,1)
(78,210,1)
(176,108,1)
(114,89,1)
(190,105,1)
(144,16,1)
(38,32,1)
(199,214,1)
(115,71,1)
(158,54,1)
(45,210,1)
(47,1,1)
(172,114,1)
(123,137,1)
(205,22,1)
(64,171,1)
(36,12,1)
(203,205,1)
(91,20,1)
(142,164,1)
(215,94,1)
(28,71,1)
(129,184,1)
(16,209,1)
(66,185,1)
(25,78,1)
(48,112,1)
(118,134,1)
(114,71,1)
(37,79,1)
(196,27,1)
(30,50,1)
(31,104,1)
(196,71,1)
(67,190,1)
(177,157,1)
(111,33,1)
(90,151,1)
(135,82,1)
(91,37,1)
(117,23,1)
(65,71,1)
(170,31,1)
(115,178,1)
(142,51,1)
(207,71,1)
(149,126,1)
(91,49,1)
(91,2,1)
(35,92,1)
(12,215,1)
(150,111,1)
(100,90,1)
(106,176,1)
(9,136,1)
(97,183,1)
(202,91,1)
(91,115,1)
(78,53,1)
(221,37,1)
(99,183,1)
(191,71,1)
(100,71,1)
(76,55,1)
(18,9,1)
(213,71,1)
(69,143,1)
(118,71,1)
(31,71,1)
(216,140,1)
(183,154,1)
(110,7,1)
(105,204,1)
(157,106,1)
(73,46,1)
(47,71,1)
(127,6,1)
(197,28,1)
(35,16,1)
(93,74,1)
(107,71,1)
(108,63,1)
(220,38,1)
(68,127,1)
(38,71,1)
(94,71,1)
(102,167,1)
(8,141,1)
(21,122,1)
(223,42,2)
(159,42,2)
(28,3,2)
(6,176,2)
(202,118,2)
(118,71,2)
(73,143,2)
(35,176,2)
(197,56,2)
(218,176,2)
(196,176,2)
(127,176,2)
(95,176,2)
(37,42,2)
(98,93,2)
(10,176,2)
(102,143,2)
(8,56,2)
(138,176,2)
(66,71,2)
(189,42,2)
(28,42,2)
(112,176,2)
(200,176,2)
(17,126,2)
(203,205,2)
(75,71,2)
(84,56,2)
(61,126,2)
(70,56,2)
(170,176,2)
(24,176,2)
(182,56,2)
(91,143,2)
(84,42,2)
(213,176,2)
(161,116,2)
(25,176,2)
(66,176,2)
(91,37,2)
(143,7,2)
(83,176,2)
(166,176,2)
(140,176,2)
(220,38,2)
(4,170,2)
(142,164,2)
(173,176,2)
(185,143,2)
(167,143,2)
(29,176,2)
(46,56,2)
(130,71,2)
(190,176,2)
(72,176,2)
(153,42,2)
(63,42,2)
(92,143,2)
(12,42,2)
(154,54,2)
(201,54,2)
(217,112,2)
(128,176,2)
(119,176,2)
(75,42,2)
(149,126,2)
(20,42,2)
(221,42,2)
(183,54,2)
(180,176,2)
(49,176,2)
(225,42,2)
(47,176,2)
(145,5,2)
(113,181,2)
(98,176,2)
(196,71,2)
(97,193,2)
(29,82,2)
(150,42,2)
(155,8,2)
(179,227,2)
(202,91,2)
(35,16,2)
(129,176,2)
(219,176,2)
(21,143,2)
(124,176,2)
(66,143,2)
(111,42,2)
(138,42,2)
(8,71,2)
(66,126,2)
(96,98,2)
(108,63,2)
(184,176,2)
(206,56,2)
(93,71,2)
(224,3,2)
(100,71,2)
(99,54,2)
(90,54,2)
(101,42,2)
(70,143,2)
(188,176,2)
(7,176,2)
(87,126,2)
(91,42,2)
(50,176,2)
(76,176,2)
(107,176,2)
(144,126,2)
(143,176,2)
(181,71,2)
(132,176,2)
(5,176,2)
(172,42,2)
(81,42,2)
(110,176,2)
(121,176,2)
(147,126,2)
(226,176,2)
(67,176,2)
(104,176,2)
(118,56,2)
(91,130,2)
(91,100,2)
(180,71,2)
(134,56,2)
(91,126,2)
(197,206,2)
(166,191,2)
(91,176,2)
(32,176,2)
(35,56,2)
(92,176,2)
(54,71,2)
(88,42,2)
(161,176,2)
(111,33,2)
(133,42,2)
(20,114,2)
(84,143,2)
(41,42,2)
(94,42,2)
(207,71,2)
(58,176,2)
(15,16,2)
(60,176,2)
(0,176,2)
(2,71,2)
(57,42,2)
(28,71,2)
(215,42,2)
(205,176,2)
(33,225,2)
(89,42,2)
(186,56,2)
(171,176,2)
(105,176,2)
(91,20,2)
(206,143,2)
(16,126,2)
(212,176,2)
(56,143,2)
(185,42,2)
(80,54,2)
(48,176,2)
(132,71,2)
(187,42,2)
(96,176,2)
(169,126,2)
(214,176,2)
(148,176,2)
(39,143,2)
(42,15,2)
(66,42,2)
(155,56,2)
(211,42,2)
(114,71,2)
(146,71,2)
(52,54,2)
(217,47,2)
(84,176,2)
(182,42,2)
(119,68,2)
(3,54,2)
(86,42,2)
(81,176,2)
(40,176,2)
(14,42,2)
(177,176,2)
(145,176,2)
(34,180,2)
(74,176,2)
(35,71,2)
(122,143,2)
(107,71,2)
(15,71,2)
(55,176,2)
(19,176,2)
(109,42,2)
(92,56,2)
(72,196,2)
(28,56,2)
(102,56,2)
(5,207,2)
(220,176,2)
(192,176,2)
(137,54,2)
(77,143,2)
(162,42,2)
(42,126,2)
(4,176,2)
(158,54,2)
(82,132,2)
(209,126,2)
(206,176,2)
(179,42,2)
(37,75,2)
(46,155,2)
(210,176,2)
(167,21,2)
(21,122,2)
(206,42,2)
(146,42,2)
(226,72,2)
(102,176,2)
(56,71,2)
(79,42,2)
(21,56,2)
(197,42,2)
(38,71,2)
(11,54,2)
(36,42,2)
(203,176,2)
(97,183,2)
(123,54,2)
(12,94,2)
(181,176,2)
(224,71,2)
(93,176,2)
(30,176,2)
(117,176,2)
(216,176,2)
(22,176,2)
(29,161,2)
(91,49,2)
(151,54,2)
(148,213,2)
(23,148,2)
(109,146,2)
(106,176,2)
(178,42,2)
(13,176,2)
(169,176,2)
(126,224,2)
(152,177,2)
(71,142,2)
(81,126,2)
(164,193,2)
(182,143,2)
(170,31,2)
(222,126,2)
(2,126,2)
(28,176,2)
(39,35,2)
(31,176,2)
(15,126,2)
(91,12,2)
(49,71,2)
(204,176,2)
(100,54,2)
(161,71,2)
(91,56,2)
(26,42,2)
(68,176,2)
(191,176,2)
(3,97,2)
(126,54,2)
(152,176,2)
(38,176,2)
(53,176,2)
(131,176,2)
(115,42,2)
(113,176,2)
(197,28,2)
(82,176,2)
(185,126,2)
(28,143,2)
(63,109,2)
(112,152,2)
(24,119,2)
(169,42,2)
(184,113,2)
(115,71,2)
(39,176,2)
(185,56,2)
(108,42,2)
(47,71,2)
(45,176,2)
(157,176,2)
(78,210,2)
(73,56,2)
(197,176,2)
(91,115,2)
(66,56,2)
(199,176,2)
(97,54,2)
(23,176,2)
(120,71,2)
(68,71,2)
(94,71,2)
(168,176,2)
(156,176,2)
(31,71,2)
(16,209,2)
(210,120,2)
(81,56,2)
(165,176,2)
(141,56,2)
(176,42,2)
(69,143,2)
(122,71,2)
(171,203,2)
(188,34,2)
(169,143,2)
(122,56,2)
(7,107,2)
(197,143,2)
(27,176,2)
(34,176,2)
(213,71,2)
(55,220,2)
(177,71,2)
(130,176,2)
(207,176,2)
(47,1,2)
(39,56,2)
(35,143,2)
(191,71,2)
(78,176,2)
(114,42,2)
(135,176,2)
(224,54,2)
(142,227,2)
(167,56,2)
(81,143,2)
(91,2,2)
(138,143,2)
(202,80,2)
(138,56,2)
(205,71,2)
(33,42,2)
(182,176,2)
(169,56,2)
(78,53,2)
(64,176,2)
(120,176,2)
(175,56,2)
(185,176,2)
(50,166,2)
(217,176,2)
-----------------------------------
(0,laptop_mode_wb_timer)
(1,unsigned long)
(2,q->bio_split)
(3,q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
(4,mutex_init(&q->sysfs_lock)
(5,&q->icq_list)
(6,q)
(7,&q->q_usage_counter)
(8,q->q_usage_counter)
(9,gfp_mask)
(10,GFP_KERNEL)
(11,id)
(12,q->backing_dev_info.name)
(13,q)
(14,PAGE_SIZE)
(15,q->bio_split)
(16,q->bio_split = bioset_create(BIO_POOL_SIZE, 0)
(17,bio_split)
(18,__GFP_ZERO)
(19,__queue_lock)
(20,q->backing_dev_info.ra_pages)
(21,&q->backing_dev_info)
(22,queue_flags)
(23,init_waitqueue_head(&q->mq_freeze_wq)
(24,INIT_DELAYED_WORK(&q->delay_work, blk_delay_work)
(25,q)
(26,err)
(27,blkg_list)
(28,q->id)
(29,setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long)
(30,q)
(31,q->sysfs_lock)
(32,queue_head)
(33,(VM_MAX_READAHEAD * 1024)
(34,&q->__queue_lock)
(35,q->bio_split)
(36,"block")
(37,q->backing_dev_info.capabilities)
(38,q->queue_head)
(39,bioset_free(q->bio_split)
(40,q)
(41,VM_MAX_READAHEAD)
(42,!q->bio_split)
(43,err)
(44,if (!q->bio_split)
(45,blk_queue_ktype)
(46,percpu_ref_exit(&q->q_usage_counter)
(47,(unsigned long)
(48,laptop_mode_timer_fn)
(49,q->queue_lock)
(50,spin_lock_init(&q->__queue_lock)
(51,node_id)
(52,q)
(53,&blk_queue_ktype)
(54,!q)
(55,INIT_LIST_HEAD(&q->queue_head)
(56,blkcg_init_queue(q)
(57,q)
(58,NULL)
(59,fail_split:)
(60,queue_lock)
(61,0)
(62,if (q->id < 0)
(63,bdi_init(&q->backing_dev_info)
(64,q)
(65,q)
(66,kmem_cache_free(blk_requestq_cachep, q)
(67,q)
(68,q->delay_work)
(69,goto fail_bdi;)
(70,backing_dev_info)
(71,q = kmem_cache_alloc_node(blk_requestq_cachep,\n\\n\\t\\t\\t\\tgfp_mask | __GFP_ZERO, node_id)
(72,&q->blkg_list)
(73,q)
(74,timeout_list)
(75,q->backing_dev_info)
(76,q)
(77,q)
(78,kobject_init(&q->kobj, &blk_queue_ktype)
(79,capabilities)
(80,return NULL;)
(81,NULL)
(82,&q->timeout)
(83,blk_delay_work)
(84,blk_queue_ida)
(85,fail_bdi:)
(86,1024)
(87,bio_split)
(88,q->backing_dev_info.name = "block")
(89,backing_dev_info)
(90,id)
(91,return NULL;)
(92,bio_split)
(93,q->timeout_list)
(94,q->backing_dev_info)
(95,mq_freeze_wq)
(96,INIT_LIST_HEAD(&q->timeout_list)
(97,ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
(98,&q->timeout_list)
(99,0)
(100,q->id)
(101,goto fail_id;)
(102,q)
(103,fail_id:)
(104,sysfs_lock)
(105,q->bypass_depth = 1)
(106,q)
(107,q->q_usage_counter)
(108,err = bdi_init(&q->backing_dev_info)
(109,&q->backing_dev_info)
(110,blk_queue_usage_counter_release)
(111,q->backing_dev_info.ra_pages =\n\\n\\t\\t\\t(VM_MAX_READAHEAD * 1024)
(112,&q->backing_dev_info.laptop_mode_wb_timer)
(113,&q->timeout_work)
(114,q->backing_dev_info)
(115,q->node)
(116,unsigned long)
(117,q)
(118,return q;)
(119,&q->delay_work)
(120,q->kobj)
(121,q)
(122,q->backing_dev_info)
(123,gfp_mask)
(124,goto fail_split;)
(125,)
(126,q->id < 0)
(127,delay_work)
(128,kobj)
(129,q)
(130,q->bypass_depth)
(131,PERCPU_REF_INIT_ATOMIC)
(132,q->timeout)
(133,q)
(134,q)
(135,blk_rq_timed_out_timer)
(136,blk_requestq_cachep)
(137,0)
(138,q)
(139,fail_ref:)
(140,q)
(141,q_usage_counter)
(142,kmem_cache_alloc_node(blk_requestq_cachep,\n\\n\\t\\t\\t\\tgfp_mask | __GFP_ZERO, node_id)
(143,percpu_ref_init(&q->q_usage_counter,\n\\n\\t\\t\\t\\tblk_queue_usage_counter_release,\n\\n\\t\\t\\t\\tPERCPU_REF_INIT_ATOMIC, GFP_KERNEL)
(144,q)
(145,INIT_LIST_HEAD(&q->icq_list)
(146,q->backing_dev_info)
(147,BIO_POOL_SIZE)
(148,&q->mq_freeze_wq)
(149,goto fail_q;)
(150,q)
(151,q)
(152,q->backing_dev_info.laptop_mode_wb_timer)
(153,backing_dev_info)
(154,blk_queue_ida)
(155,&q->q_usage_counter)
(156,q)
(157,backing_dev_info)
(158,NULL)
(159,backing_dev_info)
(160,if (percpu_ref_init(&q->q_usage_counter,\n\\n\\t\\t\\t\\tblk_queue_usage_counter_release,\n\\n\\t\\t\\t\\tPERCPU_REF_INIT_ATOMIC, GFP_KERNEL)
(161,(unsigned long)
(162,backing_dev_info)
(163,if (blkcg_init_queue(q)
(164,gfp_mask | __GFP_ZERO)
(165,q)
(166,&q->__queue_lock)
(167,bdi_destroy(&q->backing_dev_info)
(168,__queue_lock)
(169,blk_requestq_cachep)
(170,&q->sysfs_lock)
(171,__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags)
(172,ra_pages)
(173,q)
(174,q)
(175,goto fail_ref;)
(176,err)
(177,q->backing_dev_info)
(178,node)
(179,q->node = node_id)
(180,q->__queue_lock)
(181,q->timeout_work)
(182,id)
(183,&blk_queue_ida)
(184,INIT_WORK(&q->timeout_work, NULL)
(185,q)
(186,q)
(187,q)
(188,q->queue_lock = &q->__queue_lock)
(189,node_id)
(190,QUEUE_FLAG_BYPASS)
(191,q->__queue_lock)
(192,q)
(193,gfp_t gfp_mask)
(194,if (err)
(195,if (!q)
(196,q->blkg_list)
(197,ida_simple_remove(&blk_queue_ida, q->id)
(198,q)
(199,timeout_work)
(200,q)
(201,0)
(202,RET)
(203,&q->queue_flags)
(204,1)
(205,q->queue_flags)
(206,&blk_queue_ida)
(207,q->icq_list)
(208,fail_q:)
(209,bioset_create(BIO_POOL_SIZE, 0)
(210,&q->kobj)
(211,q)
(212,timeout)
(213,q->mq_freeze_wq)
(214,q)
(215,name)
(216,icq_list)
(217,setup_timer(&q->backing_dev_info.laptop_mode_wb_timer,\n\\n\\t\\t    laptop_mode_timer_fn, (unsigned long)
(218,bypass_depth)
(219,q_usage_counter)
(220,&q->queue_head)
(221,BDI_CAP_CGROUP_WRITEBACK)
(222,q)
(223,q->backing_dev_info.capabilities = BDI_CAP_CGROUP_WRITEBACK)
(224,q->id)
(225,VM_MAX_READAHEAD * 1024)
(226,INIT_LIST_HEAD(&q->blkg_list)
(227,int node_id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^