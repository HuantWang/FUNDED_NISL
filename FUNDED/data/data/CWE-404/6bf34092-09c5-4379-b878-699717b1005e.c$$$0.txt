-----label-----
1
-----code-----
wchar_t * CWE401_Memory_Leak__strdup_wchar_t_61b_badSource(wchar_t * data)
{
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
16,17
16,18
16,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
26,27
28,29
30,31
31,32
31,33
32,33
34,35
36,37
37,38
-----nextToken-----
2,4,5,7,9,10,15,17,18,20,24,27,29,33,35,38
-----computeFrom-----
22,23
22,24
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
wchar_t * CWE401_Memory_Leak__strdup_wchar_t_61b_badSource(wchar_t * data){    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    return data;}
wchar_t
* CWE401_Memory_Leak__strdup_wchar_t_61b_badSource(wchar_t * data)
*
CWE401_Memory_Leak__strdup_wchar_t_61b_badSource
wchar_t * data
wchar_t
* data
*
data
{    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    return data;}
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
return data;
data
data
-----joern-----
(4,5,0)
(11,2,0)
(5,2,0)
(5,7,0)
(11,0,0)
(6,9,0)
(12,0,0)
(8,11,0)
(3,7,0)
(7,9,0)
(5,10,0)
(7,2,0)
(9,7,0)
(0,10,0)
(1,5,0)
(7,0,0)
(11,7,0)
(7,9,1)
(5,2,1)
(11,2,1)
(5,7,1)
(7,2,1)
(6,3,1)
(8,7,1)
(4,5,1)
(11,7,1)
(9,6,1)
(11,8,1)
(5,1,1)
(1,11,1)
(3,12,1)
(7,2,2)
(11,2,2)
(5,7,2)
(4,5,2)
(5,2,2)
(11,7,2)
(7,9,2)
-----------------------------------
(0,)
(1,data)
(2,wchar_t * data)
(3,data)
(4,RET)
(5,return data;)
(6,myString)
(7,data = wcsdup(myString)
(8,data)
(9,wcsdup(myString)
(10,)
(11,printWLine(data)
(12,"myString")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^