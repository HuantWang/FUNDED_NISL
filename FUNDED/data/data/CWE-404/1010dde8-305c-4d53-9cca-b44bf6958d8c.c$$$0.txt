-----label-----
0
-----code-----
void start_secondary(void)
{
	unsigned int cpu;

	cpu_probe();
	per_cpu_trap_init(false);
	mips_clockevent_init();
	mp_ops->init_secondary();
	cpu_report();
	maar_init();

	/*
	 * XXX parity protection should be folded in here when it's converted
	 * to an option instead of something based on .cputype
	 */

	calibrate_delay();
	preempt_disable();
	cpu = smp_processor_id();
	cpu_data[cpu].udelay_val = loops_per_jiffy;

	cpumask_set_cpu(cpu, &cpu_coherent_mask);
	notify_cpu_starting(cpu);

	cpumask_set_cpu(cpu, &cpu_callin_map);
	synchronise_count_slave(cpu);

	set_cpu_online(cpu, true);

	set_cpu_sibling_map(cpu);
	set_cpu_core_map(cpu);

	calculate_cpu_foreign_map();

	/*
	 * irq will be enabled in ->smp_finish(), enabling it too early
	 * is dangerous.
	 */
	WARN_ON_ONCE(!irqs_disabled());
	mp_ops->smp_finish();

	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
10,11
11,12
11,13
13,14
15,16
16,17
17,18
19,20
20,21
20,22
21,22
24,25
25,26
26,27
28,29
29,30
30,31
30,32
31,32
34,35
35,36
36,37
38,39
39,40
40,41
42,43
43,44
44,45
46,47
47,48
48,49
50,51
51,52
51,53
52,53
54,55
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
63,64
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
99,102
100,101
102,103
105,106
106,107
106,108
107,108
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
119,120
121,122
122,123
122,124
123,124
125,126
126,127
127,128
129,130
130,131
131,132
131,133
132,133
135,136
136,137
136,138
137,138
139,140
140,141
-----nextToken-----
2,4,6,8,12,14,18,22,23,27,32,33,37,41,45,49,53,56,62,64,65,67,71,73,76,80,82,86,88,91,95,97,101,103,104,108,110,114,116,120,124,128,133,134,138,141
-----computeFrom-----
51,52
51,53
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;
-----ast_node-----
void start_secondary(void){	unsigned int cpu;	cpu_probe();	per_cpu_trap_init(false);	mips_clockevent_init();	mp_ops->init_secondary();	cpu_report();	maar_init();	/*	 * XXX parity protection should be folded in here when it's converted	 * to an option instead of something based on .cputype	 */	calibrate_delay();	preempt_disable();	cpu = smp_processor_id();	cpu_data[cpu].udelay_val = loops_per_jiffy;	cpumask_set_cpu(cpu, &cpu_coherent_mask);	notify_cpu_starting(cpu);	cpumask_set_cpu(cpu, &cpu_callin_map);	synchronise_count_slave(cpu);	set_cpu_online(cpu, true);	set_cpu_sibling_map(cpu);	set_cpu_core_map(cpu);	calculate_cpu_foreign_map();	/*	 * irq will be enabled in ->smp_finish(), enabling it too early	 * is dangerous.	 */	WARN_ON_ONCE(!irqs_disabled());	mp_ops->smp_finish();	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);}
void
start_secondary(void)
start_secondary
void
void


{	unsigned int cpu;	cpu_probe();	per_cpu_trap_init(false);	mips_clockevent_init();	mp_ops->init_secondary();	cpu_report();	maar_init();	/*	 * XXX parity protection should be folded in here when it's converted	 * to an option instead of something based on .cputype	 */	calibrate_delay();	preempt_disable();	cpu = smp_processor_id();	cpu_data[cpu].udelay_val = loops_per_jiffy;	cpumask_set_cpu(cpu, &cpu_coherent_mask);	notify_cpu_starting(cpu);	cpumask_set_cpu(cpu, &cpu_callin_map);	synchronise_count_slave(cpu);	set_cpu_online(cpu, true);	set_cpu_sibling_map(cpu);	set_cpu_core_map(cpu);	calculate_cpu_foreign_map();	/*	 * irq will be enabled in ->smp_finish(), enabling it too early	 * is dangerous.	 */	WARN_ON_ONCE(!irqs_disabled());	mp_ops->smp_finish();	cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);}
unsigned int cpu;
unsigned int cpu;
unsigned int
cpu
cpu
cpu_probe();
cpu_probe()
cpu_probe
cpu_probe
per_cpu_trap_init(false);
per_cpu_trap_init(false)
per_cpu_trap_init
per_cpu_trap_init
false
mips_clockevent_init();
mips_clockevent_init()
mips_clockevent_init
mips_clockevent_init
mp_ops->init_secondary();
mp_ops->init_secondary()
mp_ops->init_secondary
mp_ops
mp_ops
init_secondary
cpu_report();
cpu_report()
cpu_report
cpu_report
maar_init();
maar_init()
maar_init
maar_init
calibrate_delay();
calibrate_delay()
calibrate_delay
calibrate_delay
preempt_disable();
preempt_disable()
preempt_disable
preempt_disable
cpu = smp_processor_id();
cpu = smp_processor_id()
cpu
cpu
smp_processor_id()
smp_processor_id
smp_processor_id
cpu_data[cpu].udelay_val = loops_per_jiffy;
cpu_data[cpu].udelay_val = loops_per_jiffy
cpu_data[cpu].udelay_val
cpu_data[cpu]
cpu_data
cpu_data
cpu
cpu
udelay_val
loops_per_jiffy
loops_per_jiffy
cpumask_set_cpu(cpu, &cpu_coherent_mask);
cpumask_set_cpu(cpu, &cpu_coherent_mask)
cpumask_set_cpu
cpumask_set_cpu
cpu
cpu
&cpu_coherent_mask
cpu_coherent_mask
cpu_coherent_mask
notify_cpu_starting(cpu);
notify_cpu_starting(cpu)
notify_cpu_starting
notify_cpu_starting
cpu
cpu
cpumask_set_cpu(cpu, &cpu_callin_map);
cpumask_set_cpu(cpu, &cpu_callin_map)
cpumask_set_cpu
cpumask_set_cpu
cpu
cpu
&cpu_callin_map
cpu_callin_map
cpu_callin_map
synchronise_count_slave(cpu);
synchronise_count_slave(cpu)
synchronise_count_slave
synchronise_count_slave
cpu
cpu
set_cpu_online(cpu, true);
set_cpu_online(cpu, true)
set_cpu_online
set_cpu_online
cpu
cpu
true
set_cpu_sibling_map(cpu);
set_cpu_sibling_map(cpu)
set_cpu_sibling_map
set_cpu_sibling_map
cpu
cpu
set_cpu_core_map(cpu);
set_cpu_core_map(cpu)
set_cpu_core_map
set_cpu_core_map
cpu
cpu
calculate_cpu_foreign_map();
calculate_cpu_foreign_map()
calculate_cpu_foreign_map
calculate_cpu_foreign_map
WARN_ON_ONCE(!irqs_disabled());
WARN_ON_ONCE(!irqs_disabled())
WARN_ON_ONCE
WARN_ON_ONCE
!irqs_disabled()
irqs_disabled()
irqs_disabled
irqs_disabled
mp_ops->smp_finish();
mp_ops->smp_finish()
mp_ops->smp_finish
mp_ops
mp_ops
smp_finish
cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
cpu_startup_entry(CPUHP_AP_ONLINE_IDLE);
cpu_startup_entry
cpu_startup_entry
(CPUHP_AP_ONLINE_IDLE)
CPUHP_AP_ONLINE_IDLE
CPUHP_AP_ONLINE_IDLE
-----joern-----
(18,35,0)
(19,4,0)
(45,19,0)
(42,46,0)
(3,46,0)
(14,46,0)
(25,46,0)
(27,20,0)
(6,37,0)
(31,46,0)
(28,2,0)
(26,7,0)
(13,20,0)
(0,21,0)
(30,2,0)
(38,7,0)
(34,46,0)
(4,46,0)
(34,6,0)
(33,12,0)
(16,11,0)
(11,2,0)
(44,46,0)
(4,19,0)
(1,46,0)
(17,46,0)
(20,2,0)
(6,34,0)
(26,12,0)
(37,6,0)
(5,41,0)
(28,46,0)
(39,1,0)
(36,28,0)
(11,46,0)
(1,2,0)
(20,46,0)
(40,4,0)
(8,46,0)
(15,26,0)
(12,46,0)
(2,46,0)
(23,46,0)
(25,2,0)
(22,46,0)
(25,41,0)
(21,46,0)
(21,2,0)
(7,26,0)
(10,46,0)
(32,7,0)
(9,46,0)
(29,22,0)
(43,2,0)
(2,30,0)
(35,46,0)
(4,2,0)
(24,25,0)
(41,25,0)
(7,2,0)
(16,25,1)
(32,2,1)
(42,22,1)
(0,20,1)
(26,15,1)
(4,2,1)
(6,37,1)
(10,42,1)
(20,2,1)
(22,29,1)
(29,3,1)
(33,26,1)
(1,2,1)
(38,32,1)
(28,36,1)
(25,41,1)
(43,23,1)
(25,2,1)
(23,9,1)
(28,2,1)
(15,7,1)
(7,2,1)
(24,28,1)
(5,24,1)
(30,43,1)
(27,13,1)
(41,5,1)
(17,31,1)
(40,12,1)
(19,45,1)
(35,18,1)
(12,33,1)
(44,34,1)
(39,21,1)
(4,19,1)
(36,4,1)
(37,8,1)
(7,38,1)
(21,2,1)
(45,40,1)
(18,44,1)
(47,35,1)
(20,27,1)
(8,1,1)
(2,30,1)
(34,6,1)
(11,2,1)
(11,16,1)
(21,0,1)
(9,17,1)
(1,39,1)
(31,10,1)
(26,7,1)
(13,11,1)
(20,2,2)
(6,37,2)
(7,2,2)
(34,6,2)
(11,2,2)
(4,19,2)
(25,41,2)
(2,30,2)
(1,2,2)
(25,2,2)
(26,7,2)
(21,2,2)
(28,2,2)
(4,2,2)
-----------------------------------
(0,cpu)
(1,set_cpu_core_map(cpu)
(2,cpu = smp_processor_id()
(3,cpu_probe()
(4,cpumask_set_cpu(cpu, &cpu_coherent_mask)
(5,cpu_callin_map)
(6,!irqs_disabled()
(7,cpu_data[cpu])
(8,calculate_cpu_foreign_map()
(9,calibrate_delay()
(10,mp_ops->init_secondary()
(11,synchronise_count_slave(cpu)
(12,cpu_data[cpu].udelay_val = loops_per_jiffy)
(13,cpu)
(14,cpu)
(15,udelay_val)
(16,cpu)
(17,maar_init()
(18,CPUHP_AP_ONLINE_IDLE)
(19,&cpu_coherent_mask)
(20,set_cpu_online(cpu, true)
(21,set_cpu_sibling_map(cpu)
(22,per_cpu_trap_init(false)
(23,preempt_disable()
(24,cpu)
(25,cpumask_set_cpu(cpu, &cpu_callin_map)
(26,cpu_data[cpu].udelay_val)
(27,true)
(28,notify_cpu_starting(cpu)
(29,false)
(30,smp_processor_id()
(31,cpu_report()
(32,cpu_data)
(33,loops_per_jiffy)
(34,WARN_ON_ONCE(!irqs_disabled()
(35,cpu_startup_entry(CPUHP_AP_ONLINE_IDLE)
(36,cpu)
(37,irqs_disabled()
(38,cpu)
(39,cpu)
(40,cpu)
(41,&cpu_callin_map)
(42,mips_clockevent_init()
(43,cpu)
(44,mp_ops->smp_finish()
(45,cpu_coherent_mask)
(46,)
(47,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^