-----label-----
1
-----code-----
static char * badSource(char * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
45,46
47,48
50,51
51,52
51,53
52,53
54,55
56,57
57,58
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,53,55,58
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(9,24,0)
(23,10,0)
(4,14,0)
(13,7,0)
(22,21,0)
(11,17,0)
(2,18,0)
(1,11,0)
(14,24,0)
(25,26,0)
(1,13,0)
(13,1,0)
(11,1,0)
(6,18,0)
(21,11,0)
(7,19,0)
(5,24,0)
(1,0,0)
(14,11,0)
(11,24,0)
(3,11,0)
(7,13,0)
(16,14,0)
(14,17,0)
(21,17,0)
(0,1,0)
(25,10,0)
(19,7,0)
(18,11,0)
(12,7,0)
(15,9,0)
(20,19,0)
(10,25,0)
(9,11,0)
(8,21,0)
(18,17,0)
(18,24,0)
(9,17,0)
(18,17,1)
(15,14,1)
(22,8,1)
(10,23,1)
(14,17,1)
(21,11,1)
(13,7,1)
(11,1,1)
(21,22,1)
(14,16,1)
(20,12,1)
(11,17,1)
(9,11,1)
(6,9,1)
(14,11,1)
(4,25,1)
(18,6,1)
(21,17,1)
(4,21,1)
(18,11,1)
(9,17,1)
(19,20,1)
(25,10,1)
(16,4,1)
(1,13,1)
(1,0,1)
(12,3,1)
(8,11,1)
(23,21,1)
(2,18,1)
(9,15,1)
(7,19,1)
(9,17,2)
(9,11,2)
(25,21,2)
(1,0,2)
(21,11,2)
(25,10,2)
(10,21,2)
(1,13,2)
(11,17,2)
(11,1,2)
(13,7,2)
(14,17,2)
(2,18,2)
(18,17,2)
(18,11,2)
(14,11,2)
(7,19,2)
(21,17,2)
(23,21,2)
-----------------------------------
(0,char *)
(1,(char *)
(2,RET)
(3,data)
(4,data)
(5,if (data == NULL)
(6,data)
(7,100*sizeof(char)
(8,data)
(9,printLine(data)
(10,-1)
(11,data = (char *)
(12,100)
(13,malloc(100*sizeof(char)
(14,strcpy(data, "A String")
(15,data)
(16,"A String")
(17,char * data)
(18,return data;)
(19,sizeof(char)
(20,char)
(21,data == NULL)
(22,NULL)
(23,1)
(24,)
(25,exit(-1)
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^