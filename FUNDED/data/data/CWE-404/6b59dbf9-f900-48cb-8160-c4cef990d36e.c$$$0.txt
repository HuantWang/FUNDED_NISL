-----label-----
0
-----code-----
static void goodB2G()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* FIX: Deallocate memory */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
50,53
51,52
53,54
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,52,54,55,59,61,65,67
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* FIX: Deallocate memory */    free(data);}
static void
goodB2G()
goodB2G
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* FIX: Deallocate memory */    free(data);}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(29,25,0)
(7,4,0)
(3,7,0)
(8,4,0)
(25,2,0)
(2,10,0)
(13,26,0)
(18,23,0)
(8,10,0)
(1,8,0)
(16,4,0)
(19,10,0)
(5,7,0)
(23,4,0)
(16,8,0)
(0,16,0)
(27,4,0)
(22,4,0)
(17,14,0)
(6,11,0)
(21,6,0)
(7,8,0)
(10,2,0)
(10,8,0)
(20,8,0)
(14,8,0)
(2,25,0)
(14,4,0)
(24,21,0)
(25,26,0)
(26,25,0)
(9,23,0)
(10,19,0)
(6,21,0)
(28,20,0)
(12,20,0)
(14,17,1)
(26,13,1)
(0,14,1)
(25,26,1)
(14,8,1)
(1,23,1)
(8,10,1)
(17,7,1)
(23,9,1)
(28,8,1)
(13,29,1)
(7,8,1)
(3,5,1)
(16,0,1)
(20,8,1)
(9,18,1)
(24,20,1)
(20,12,1)
(16,8,1)
(29,1,1)
(12,28,1)
(10,19,1)
(7,3,1)
(5,20,1)
(15,16,1)
(21,24,1)
(5,6,1)
(2,25,1)
(10,2,1)
(6,21,1)
(25,26,2)
(20,8,2)
(24,20,2)
(10,2,2)
(14,8,2)
(21,20,2)
(16,8,2)
(6,20,2)
(8,10,2)
(7,8,2)
(10,19,2)
(2,25,2)
(6,21,2)
-----------------------------------
(0,data)
(1,data)
(2,malloc(100*sizeof(char)
(3,"A String")
(4,)
(5,data)
(6,exit(-1)
(7,strcpy(data, "A String")
(8,data = (char *)
(9,NULL)
(10,(char *)
(11,)
(12,NULL)
(13,char)
(14,printLine(data)
(15,RET)
(16,free(data)
(17,data)
(18,data)
(19,char *)
(20,data == NULL)
(21,-1)
(22,if (data == NULL)
(23,data = NULL)
(24,1)
(25,100*sizeof(char)
(26,sizeof(char)
(27,data)
(28,data)
(29,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^