-----label-----
1
-----code-----
static struct dma_async_tx_descriptor *
rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,
			unsigned int sg_len, enum dma_transfer_direction dir,
			unsigned long flags, void *context)
{
	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);

	/* Someone calling slave DMA on a generic channel? */
	if (rchan->mid_rid < 0 || !sg_len) {
		dev_warn(chan->device->dev,
			 "%s: bad parameter: len=%d, id=%d\n",
			 __func__, sg_len, rchan->mid_rid);
		return NULL;
	}

	if (rcar_dmac_map_slave_addr(chan, dir))
		return NULL;

	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,
				      dir, flags, false);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
21,22
23,24
23,25
24,25
26,27
28,29
28,30
30,31
32,33
32,34
34,35
34,36
37,38
37,39
37,40
37,41
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
46,48
47,48
49,50
51,52
51,53
52,53
52,54
53,54
53,55
54,55
54,56
55,56
59,60
60,61
62,63
62,64
63,64
64,65
64,66
64,67
64,68
64,69
64,70
65,66
67,68
67,69
68,69
68,70
69,70
74,75
76,77
78,79
78,80
79,80
82,83
83,84
85,86
85,87
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
96,97
97,98
97,99
97,100
97,101
97,102
97,103
97,104
97,105
98,99
100,101
102,103
104,105
106,107
106,108
107,108
107,109
108,109
112,113
114,115
-----nextToken-----
3,5,6,9,11,12,15,17,18,20,22,25,27,29,31,33,35,36,41,43,44,48,50,56,57,58,61,66,70,71,72,73,75,77,80,81,84,88,90,92,95,99,101,103,105,109,110,111,113,115,116
-----computeFrom-----
52,53
52,54
53,54
53,55
-----guardedBy-----
56,80
57,81
61,77
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static struct dma_async_tx_descriptor *rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,			unsigned int sg_len, enum dma_transfer_direction dir,			unsigned long flags, void *context){	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);	/* Someone calling slave DMA on a generic channel? */	if (rchan->mid_rid < 0 || !sg_len) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}	if (rcar_dmac_map_slave_addr(chan, dir))		return NULL;	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,				      dir, flags, false);}
static struct dma_async_tx_descriptor
dma_async_tx_descriptor
*rcar_dmac_prep_slave_sg(struct dma_chan *chan, struct scatterlist *sgl,			unsigned int sg_len, enum dma_transfer_direction dir,			unsigned long flags, void *context)
*
rcar_dmac_prep_slave_sg
struct dma_chan *chan
struct dma_chan
dma_chan
*chan
*
chan
struct scatterlist *sgl
struct scatterlist
scatterlist
*sgl
*
sgl
unsigned int sg_len
unsigned int
sg_len
sg_len
enum dma_transfer_direction dir
enum dma_transfer_direction
dma_transfer_direction
dir
dir
unsigned long flags
unsigned long
flags
flags
void *context
void
*context
*
context
{	struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);	/* Someone calling slave DMA on a generic channel? */	if (rchan->mid_rid < 0 || !sg_len) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}	if (rcar_dmac_map_slave_addr(chan, dir))		return NULL;	return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,				      dir, flags, false);}
struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
struct rcar_dmac_chan *rchan = to_rcar_dmac_chan(chan);
struct rcar_dmac_chan
rcar_dmac_chan
*rchan = to_rcar_dmac_chan(chan)
*
rchan
= to_rcar_dmac_chan(chan)
to_rcar_dmac_chan(chan)
to_rcar_dmac_chan
to_rcar_dmac_chan
chan
chan
if (rchan->mid_rid < 0 || !sg_len) {		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}
rchan->mid_rid < 0 || !sg_len
rchan->mid_rid < 0
rchan->mid_rid
rchan
rchan
mid_rid
0
!sg_len
sg_len
sg_len
{		dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);		return NULL;	}
dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid);
dev_warn(chan->device->dev,			 "%s: bad parameter: len=%d, id=%d\n",			 __func__, sg_len, rchan->mid_rid)
dev_warn
dev_warn
chan->device->dev
chan->device
chan
chan
device
dev
"%s: bad parameter: len=%d, id=%d\n"
__func__
__func__
sg_len
sg_len
rchan->mid_rid
rchan
rchan
mid_rid
return NULL;
NULL
NULL
if (rcar_dmac_map_slave_addr(chan, dir))		return NULL;
rcar_dmac_map_slave_addr(chan, dir)
rcar_dmac_map_slave_addr
rcar_dmac_map_slave_addr
chan
chan
dir
dir
return NULL;
NULL
NULL
return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,				      dir, flags, false);
rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,				      dir, flags, false)
rcar_dmac_chan_prep_sg
rcar_dmac_chan_prep_sg
rchan
rchan
sgl
sgl
sg_len
sg_len
rchan->map.addr
rchan->map
rchan
rchan
map
addr
dir
dir
flags
flags
false
-----joern-----
(14,39,0)
(32,12,0)
(45,12,0)
(10,29,0)
(11,20,0)
(11,7,0)
(24,33,0)
(33,29,0)
(19,34,0)
(41,11,0)
(29,7,0)
(29,17,0)
(35,38,0)
(44,34,0)
(13,2,0)
(6,34,0)
(26,20,0)
(43,19,0)
(1,33,0)
(11,46,0)
(54,1,0)
(22,29,0)
(40,1,0)
(29,19,0)
(1,19,0)
(27,39,0)
(2,5,0)
(29,44,0)
(12,32,0)
(29,21,0)
(15,29,0)
(50,34,0)
(2,38,0)
(39,38,0)
(20,11,0)
(35,19,0)
(36,11,0)
(49,7,0)
(30,49,0)
(5,11,0)
(23,2,0)
(48,12,0)
(3,44,0)
(0,32,0)
(31,8,0)
(52,34,0)
(39,17,0)
(49,0,0)
(3,18,0)
(47,29,0)
(4,29,0)
(53,5,0)
(9,29,0)
(42,20,0)
(19,35,0)
(11,5,0)
(5,2,0)
(0,49,0)
(12,19,0)
(29,16,0)
(51,11,0)
(3,8,0)
(29,33,0)
(18,46,0)
(28,32,0)
(37,35,0)
(25,18,0)
(32,0,0)
(20,19,0)
(33,1,0)
(11,5,1)
(0,49,1)
(45,19,1)
(23,13,1)
(12,19,1)
(33,1,1)
(29,19,1)
(41,51,1)
(36,41,1)
(31,39,1)
(20,19,1)
(39,17,1)
(2,23,1)
(29,17,1)
(25,11,1)
(4,47,1)
(29,7,1)
(37,43,1)
(47,33,1)
(5,53,1)
(27,14,1)
(26,36,1)
(30,32,1)
(54,9,1)
(35,37,1)
(51,5,1)
(29,33,1)
(20,42,1)
(10,4,1)
(29,10,1)
(13,0,1)
(32,12,1)
(28,12,1)
(1,40,1)
(11,7,1)
(39,27,1)
(44,29,1)
(14,0,1)
(11,20,1)
(22,39,1)
(3,44,1)
(2,38,1)
(29,21,1)
(40,54,1)
(1,19,1)
(33,24,1)
(12,48,1)
(15,22,1)
(3,8,1)
(48,45,1)
(19,35,1)
(53,2,1)
(8,31,1)
(42,26,1)
(3,18,1)
(35,38,1)
(9,15,1)
(49,7,1)
(24,1,1)
(0,32,1)
(32,28,1)
(5,2,1)
(29,16,1)
(18,25,1)
(49,30,1)
(39,38,1)
(8,39,2)
(29,19,2)
(39,0,2)
(26,0,2)
(39,17,2)
(2,38,2)
(11,20,2)
(30,32,2)
(12,19,2)
(3,18,2)
(23,0,2)
(44,39,2)
(4,39,2)
(24,39,2)
(13,0,2)
(36,0,2)
(3,8,2)
(10,39,2)
(18,0,2)
(42,0,2)
(39,38,2)
(22,39,2)
(0,49,2)
(33,1,2)
(15,39,2)
(19,35,2)
(29,39,2)
(2,0,2)
(11,0,2)
(49,7,2)
(41,0,2)
(29,16,2)
(1,19,2)
(0,32,2)
(14,0,2)
(54,39,2)
(29,21,2)
(32,12,2)
(33,39,2)
(3,44,2)
(49,32,2)
(35,38,2)
(20,0,2)
(11,5,2)
(20,19,2)
(51,0,2)
(29,7,2)
(11,7,2)
(31,39,2)
(25,0,2)
(9,39,2)
(1,39,2)
(27,0,2)
(5,2,2)
(29,17,2)
(40,39,2)
(29,33,2)
(47,39,2)
(5,0,2)
(53,0,2)
-----------------------------------
(0,rchan->mid_rid < 0 || !sg_len)
(1,rchan->map)
(2,chan->device)
(3,RET)
(4,flags)
(5,chan->device->dev)
(6,if (rchan->mid_rid < 0 || !sg_len)
(7,unsigned int sg_len)
(8,return NULL;)
(9,sg_len)
(10,false)
(11,dev_warn(chan->device->dev,\n\\n\\t\\t\\t "%s: bad parameter: len=%d, id=%d\\n",\n\\n\\t\\t\\t __func__, sg_len, rchan->mid_rid)
(12,rchan->mid_rid)
(13,chan)
(14,chan)
(15,sgl)
(16,unsigned long flags)
(17,enum dma_transfer_direction dir)
(18,return NULL;)
(19,*rchan = to_rcar_dmac_chan(chan)
(20,rchan->mid_rid)
(21,struct scatterlist *sgl)
(22,rchan)
(23,device)
(24,addr)
(25,NULL)
(26,rchan)
(27,dir)
(28,0)
(29,rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,\n\\n\\t\\t\\t\\t      dir, flags, false)
(30,sg_len)
(31,NULL)
(32,rchan->mid_rid < 0)
(33,rchan->map.addr)
(34,)
(35,to_rcar_dmac_chan(chan)
(36,sg_len)
(37,chan)
(38,struct dma_chan *chan)
(39,rcar_dmac_map_slave_addr(chan, dir)
(40,map)
(41,__func__)
(42,mid_rid)
(43,rchan)
(44,return rcar_dmac_chan_prep_sg(rchan, sgl, sg_len, rchan->map.addr,\n\\n\\t\\t\\t\\t      dir, flags, false)
(45,rchan)
(46,)
(47,dir)
(48,mid_rid)
(49,!sg_len)
(50,rchan)
(51,"%s: bad parameter: len=%d, id=%d\\n")
(52,if (rcar_dmac_map_slave_addr(chan, dir)
(53,dev)
(54,rchan)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^