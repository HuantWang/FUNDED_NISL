-----label-----
0
-----code-----
void CWE590_Free_Memory_Not_on_Heap__free_int_declare_67b_goodG2BSink(CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType myStruct)
{
    int * data = myStruct.structFirst;
    printIntLine(data[0]);
    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
-----nextToken-----
2,4,7,9,13,15,16,20,21,25,28,29,33,35
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE590_Free_Memory_Not_on_Heap__free_int_declare_67b_goodG2BSink(CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType myStruct){    int * data = myStruct.structFirst;    printIntLine(data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
void
CWE590_Free_Memory_Not_on_Heap__free_int_declare_67b_goodG2BSink(CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType myStruct)
CWE590_Free_Memory_Not_on_Heap__free_int_declare_67b_goodG2BSink
CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType myStruct
CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType
CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType
myStruct
myStruct
{    int * data = myStruct.structFirst;    printIntLine(data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
int * data = myStruct.structFirst;
int * data = myStruct.structFirst;
int
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(0,11,0)
(6,13,0)
(12,4,0)
(1,12,0)
(7,12,0)
(9,5,0)
(13,11,0)
(5,13,0)
(14,11,0)
(6,11,0)
(12,13,0)
(3,13,0)
(10,6,0)
(13,12,0)
(0,5,0)
(5,0,0)
(8,5,0)
(1,3,1)
(12,4,1)
(6,10,1)
(12,7,1)
(7,1,1)
(8,9,1)
(0,5,1)
(6,13,1)
(9,13,1)
(2,6,1)
(10,0,1)
(5,13,1)
(5,8,1)
(13,12,1)
(12,4,2)
(13,12,2)
(6,13,2)
(5,13,2)
(0,5,2)
-----------------------------------
(0,printIntLine(data[0])
(1,myStruct)
(2,RET)
(3,data)
(4,CWE590_Free_Memory_Not_on_Heap__free_int_declare_67_structType myStruct)
(5,data[0])
(6,free(data)
(7,structFirst)
(8,0)
(9,data)
(10,data)
(11,)
(12,myStruct.structFirst)
(13,* data = myStruct.structFirst)
(14,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^