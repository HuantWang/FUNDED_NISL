-----label-----
0
-----code-----
static int * goodG2BSource(int * data)
{
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (int *)ALLOCA(100*sizeof(int));
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
31,32
31,33
32,33
32,34
33,34
37,38
38,39
38,40
39,40
41,42
41,43
42,43
45,46
46,47
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,34,35,36,40,43,44,47
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * goodG2BSource(int * data){    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int *)ALLOCA(100*sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
static int
* goodG2BSource(int * data)
*
goodG2BSource
int * data
int
* data
*
data
{    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (int *)ALLOCA(100*sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(20,22,0)
(2,5,0)
(22,18,0)
(11,16,0)
(14,5,0)
(5,8,0)
(16,1,0)
(6,18,0)
(22,3,0)
(7,11,0)
(21,12,0)
(3,21,0)
(13,16,0)
(0,9,0)
(5,2,0)
(21,8,0)
(9,1,0)
(18,22,0)
(15,8,0)
(9,8,0)
(17,9,0)
(4,5,0)
(21,3,0)
(8,21,0)
(19,11,0)
(8,10,0)
(8,1,0)
(11,10,0)
(3,22,0)
(5,10,0)
(5,16,0)
(11,8,0)
(9,10,0)
(2,1,0)
(12,21,0)
(9,0,1)
(4,14,1)
(5,16,1)
(11,7,1)
(21,3,1)
(16,13,1)
(9,10,1)
(6,20,1)
(14,16,1)
(3,22,1)
(7,19,1)
(21,12,1)
(5,4,1)
(11,10,1)
(13,11,1)
(19,8,1)
(0,2,1)
(22,18,1)
(18,6,1)
(20,15,1)
(5,8,1)
(2,5,1)
(9,8,1)
(8,21,1)
(11,8,1)
(17,9,1)
(8,10,1)
(5,10,1)
(17,9,2)
(2,5,2)
(5,10,2)
(5,16,2)
(9,8,2)
(21,3,2)
(11,10,2)
(9,10,2)
(8,10,2)
(5,8,2)
(3,22,2)
(8,21,2)
(22,18,2)
(11,8,2)
(21,12,2)
-----------------------------------
(0,data)
(1,)
(2,printIntLine(data[0])
(3,ALLOCA(100*sizeof(int)
(4,0)
(5,data[0])
(6,int)
(7,0)
(8,data = (int *)
(9,return data;)
(10,int * data)
(11,data[0])
(12,int *)
(13,5)
(14,data)
(15,data)
(16,data[0] = 5)
(17,RET)
(18,sizeof(int)
(19,data)
(20,100)
(21,(int *)
(22,100*sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^