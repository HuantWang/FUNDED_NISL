-----label-----
1
-----code-----
void
db_stack_trace_cmd(db_expr_t addr, boolean_t have_addr, db_expr_t count,
		   char *modif)
{
	struct i386_frame *frame;
	int *argp;
	db_addr_t callpc;
	boolean_t first;
	struct pcb *pcb;
	struct proc *p;
	pid_t pid;
	int i;

	if (count == -1)
		count = 1024;

	if (!have_addr) {
		frame = (struct i386_frame *)BP_REGS(&ddb_regs);
		if (frame == NULL)
			frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);
		callpc = PC_REGS(&ddb_regs);
	} else if (!INKERNEL(addr)) {
		pid = (addr % 16) + ((addr >> 4) % 16) * 10 +
		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +
		    ((addr >> 16) % 16) * 10000;
		/*
		 * The pcb for curproc is not valid at this point,
		 * so fall back to the default case.
		 */
		if ((curproc != NULL) && (pid == curproc->p_pid)) {
			frame = (struct i386_frame *)BP_REGS(&ddb_regs);
			if (frame == NULL)
				frame = (struct i386_frame *)
				    (SP_REGS(&ddb_regs) - 4);
			callpc = PC_REGS(&ddb_regs);
		} else {

			/* sx_slock(&allproc_lock); */
			FOREACH_PROC_IN_SYSTEM(p) {
				if (p->p_pid == pid)
					break;
			}
			/* sx_sunlock(&allproc_lock); */
			if (p == NULL) {
				db_printf("pid %d not found\n", pid);
				return;
			}
			if ((p->p_flag & P_INMEM) == 0) {
				db_printf("pid %d swapped out\n", pid);
				return;
			}
			pcb = p->p_thread->td_pcb;
			frame = (struct i386_frame *)pcb->pcb_ebp;
			if (frame == NULL)
				frame = (struct i386_frame *)
				    (pcb->pcb_esp - 4);
			callpc = (db_addr_t)pcb->pcb_eip;
		}
	} else {
		/*
		 * Look for something that might be a frame pointer, just as
		 * a convenience.
		 */
		frame = (struct i386_frame *)addr;
		for (i = 0; i < 4096; i += 4) {
			struct i386_frame *check;

			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);
			if ((char *)check - (char *)frame >= 0 &&
			    (char *)check - (char *)frame < 4096
			) {
				break;
			}
			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);
		}
		if (i == 4096) {
			db_printf("Unable to find anything that looks like a stack frame\n");
			return;
		}
		frame = (void *)((char *)frame + i);
		db_printf("Trace beginning at frame %p\n", frame);
		callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);
	}

	first = TRUE;
	while (count--) {
		struct i386_frame *actframe;
		int		narg;
		const char *	name;
		db_expr_t	offset;
		c_db_sym_t	sym;
#define MAXNARG	16
		char	*argnames[MAXNARG], **argnp = NULL;

		sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);
		db_symbol_values(sym, &name, NULL);

		/*
		 * Attempt to determine a (possibly fake) frame that gives
		 * the caller's pc.  It may differ from `frame' if the
		 * current function never sets up a standard frame or hasn't
		 * set one up yet or has just discarded one.  The last two
		 * cases can be guessed fairly reliably for code generated
		 * by gcc.  The first case is too much trouble to handle in
		 * general because the amount of junk on the stack depends
		 * on the pc (the special handling of "calltrap", etc. in
		 * db_nextframe() works because the `next' pc is special).
		 */
		actframe = frame;
		if (first) {
			if (!have_addr) {
				int instr;

				instr = db_get_value(callpc, 4, FALSE);
				if ((instr & 0x00ffffff) == 0x00e58955) {
					/* pushl %ebp; movl %esp, %ebp */
					actframe = (struct i386_frame *)
					    (SP_REGS(&ddb_regs) - 4);
				} else if ((instr & 0x0000ffff) == 0x0000e589) {
					/* movl %esp, %ebp */
					actframe = (struct i386_frame *)
					    SP_REGS(&ddb_regs);
					if (ddb_regs.tf_ebp == 0) {
						/* Fake caller's frame better. */
						frame = actframe;
					}
				} else if ((instr & 0x000000ff) == 0x000000c3) {
					/* ret */
					actframe = (struct i386_frame *)
					    (SP_REGS(&ddb_regs) - 4);
				} else if (offset == 0) {
					/* Probably a symbol in assembler code. */
					actframe = (struct i386_frame *)
					    (SP_REGS(&ddb_regs) - 4);
				}
			} else if (!strcmp(name, "fork_trampoline")) {
				/*
				 * Don't try to walk back on a stack for a
				 * process that hasn't actually been run yet.
				 */
				db_print_stack_entry(name, 0, 0, 0, callpc);
				break;
			}
			first = FALSE;
		}

		argp = &actframe->f_arg0;
		narg = MAXNARG;
		if (sym != NULL && db_sym_numargs(sym, &narg, argnames)) {
			argnp = argnames;
		} else {
			narg = db_numargs(frame);
		}

		db_print_stack_entry(name, narg, argnp, argp, callpc);

		if (actframe != frame) {
			/* `frame' belongs to caller. */
			callpc = (db_addr_t)
			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);
			continue;
		}

		db_nextframe(&frame, &callpc);

		if (INKERNEL((int) callpc) && !INKERNEL((int) frame)) {
			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);
			db_symbol_values(sym, &name, NULL);
			db_print_stack_entry(name, 0, 0, 0, callpc);
			break;
		}
		if (!INKERNEL((int) frame)) {
			break;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
15,16
15,17
16,17
18,19
20,21
20,22
22,23
22,24
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
36,37
36,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
55,56
55,57
58,59
59,60
59,61
60,61
62,63
62,64
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
87,88
87,89
87,90
88,89
89,90
91,92
91,93
91,94
92,93
93,94
93,95
94,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
103,104
105,106
106,107
108,109
108,110
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
118,120
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
126,128
127,128
129,130
130,131
133,134
134,135
134,136
135,136
137,138
137,139
138,139
140,141
141,142
143,144
143,145
143,146
144,145
145,146
145,147
146,147
148,149
150,151
150,152
151,152
152,153
152,154
153,154
155,156
155,157
156,157
156,158
157,158
157,159
158,159
158,160
159,160
160,161
160,162
161,162
164,165
164,166
165,166
166,167
166,168
167,168
168,169
168,170
169,170
174,175
174,176
175,176
176,177
176,178
177,178
178,179
178,180
179,180
184,185
184,186
185,186
186,187
186,188
187,188
188,189
188,190
189,190
194,195
194,196
195,196
196,197
196,198
197,198
198,199
198,200
199,200
204,205
204,206
204,207
205,206
205,207
206,207
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
217,218
220,221
220,222
220,223
221,222
222,223
222,224
223,224
225,226
225,227
226,227
226,228
227,228
229,230
231,232
231,233
232,233
234,235
235,236
237,238
237,239
238,239
238,240
239,240
241,242
243,244
244,245
244,246
245,246
247,248
247,249
248,249
248,250
249,250
251,252
253,254
254,255
254,256
255,256
255,257
256,257
258,259
259,260
262,263
263,264
263,265
264,265
266,267
266,268
267,268
269,270
270,271
272,273
272,274
272,275
272,276
272,277
272,278
272,279
272,280
272,281
273,274
274,275
274,276
275,276
277,278
279,280
280,281
281,282
281,283
282,283
282,284
283,284
283,285
284,285
287,288
290,291
290,292
291,292
291,293
292,293
294,295
296,297
296,298
297,298
298,299
298,300
298,301
299,300
302,303
305,306
305,307
306,307
306,308
307,308
308,309
308,310
309,310
309,311
310,311
313,314
316,317
316,318
317,318
318,319
318,320
318,321
319,320
322,323
325,326
326,327
326,328
327,328
329,330
329,331
330,331
330,332
331,332
335,336
336,337
336,338
337,338
339,340
339,341
340,341
340,342
341,342
343,344
345,346
345,347
346,347
349,350
349,351
350,351
350,352
351,352
353,354
355,356
356,357
356,358
357,358
359,360
359,361
360,361
360,362
361,362
363,364
365,366
366,367
366,368
367,368
367,369
368,369
372,373
373,374
373,375
374,375
376,377
376,378
377,378
377,379
378,379
381,382
381,383
382,383
385,386
385,387
385,388
385,389
385,390
385,391
386,387
387,388
387,389
388,389
390,391
390,392
391,392
391,393
392,393
394,395
396,397
398,399
398,400
398,401
398,402
399,400
400,401
400,402
401,402
404,405
404,406
405,406
408,409
408,410
409,410
412,413
412,414
412,415
412,416
413,414
414,415
414,416
415,416
417,418
417,419
420,421
421,422
421,423
422,423
424,425
424,426
425,426
425,427
426,427
428,429
430,431
430,432
430,433
430,434
431,432
433,434
433,435
434,435
434,436
437,438
438,439
438,440
439,440
439,441
440,441
440,442
442,443
444,445
445,446
445,447
446,447
449,450
452,453
454,455
454,456
455,456
455,457
456,457
456,458
457,458
457,459
458,459
458,460
459,460
459,461
461,462
463,464
465,466
465,467
466,467
466,468
468,469
470,471
473,474
473,475
474,475
474,476
475,476
475,477
476,477
476,478
478,479
480,481
482,483
482,484
483,484
483,485
485,486
487,488
490,491
492,493
493,494
493,495
493,496
494,495
497,498
497,499
498,499
498,500
499,500
499,501
501,502
503,504
504,505
504,506
505,506
508,509
510,511
510,512
511,512
511,513
512,513
515,516
515,517
516,517
517,518
517,519
518,519
522,523
523,524
523,525
524,525
526,527
526,528
527,528
527,529
529,530
531,532
532,533
532,534
533,534
533,535
534,535
534,536
536,537
538,539
540,541
542,543
543,544
543,545
543,546
544,545
547,548
549,550
550,551
550,552
551,552
553,554
553,555
554,555
554,556
555,556
558,559
558,560
558,561
558,562
559,560
561,562
561,563
562,563
562,564
565,566
566,567
566,568
567,568
571,572
573,574
574,575
574,576
575,576
577,578
579,580
579,581
580,581
581,582
583,584
583,585
583,586
583,587
583,588
583,589
583,590
583,591
583,592
583,593
583,594
583,595
583,596
583,597
583,598
583,599
583,600
583,601
584,585
585,586
585,587
586,587
588,589
588,590
591,592
592,593
592,594
594,595
596,597
597,598
597,599
599,600
599,601
602,603
603,604
603,605
604,605
606,607
608,609
609,610
609,611
610,611
612,613
614,615
615,616
615,617
615,618
617,618
617,619
617,620
620,621
622,623
622,624
622,625
622,626
626,627
627,628
629,630
630,631
630,632
631,632
633,634
633,635
633,636
633,637
634,635
636,637
638,639
640,641
641,642
643,644
644,645
644,646
644,647
644,648
645,646
647,648
649,650
650,651
652,653
654,655
655,656
655,657
656,657
658,659
660,661
660,662
661,662
663,664
663,665
664,665
664,666
664,667
665,666
666,667
668,669
668,670
668,671
669,670
670,671
670,672
672,673
674,675
675,676
675,677
676,677
678,679
678,680
678,681
678,682
679,680
681,682
684,685
686,687
686,688
686,689
687,688
687,689
688,689
689,690
689,691
690,691
694,695
695,696
696,697
696,698
697,698
699,700
699,701
700,701
700,702
701,702
703,704
705,706
706,707
706,708
707,708
707,709
708,709
710,711
711,712
714,715
714,716
714,717
715,716
715,717
716,717
717,718
717,719
718,719
722,723
722,724
723,724
724,725
724,726
725,726
727,728
727,729
728,729
728,730
729,730
731,732
733,734
733,735
734,735
736,737
737,738
739,740
739,741
740,741
740,742
741,742
741,743
742,743
746,747
747,748
748,749
748,750
749,750
751,752
753,754
753,755
753,756
754,755
754,756
755,756
756,757
756,758
757,758
761,762
762,763
763,764
763,765
764,765
766,767
766,768
767,768
767,769
768,769
770,771
772,773
773,774
773,775
774,775
774,776
775,776
777,778
778,779
781,782
781,783
782,783
782,784
783,784
786,787
787,788
788,789
788,790
789,790
791,792
791,793
792,793
792,794
793,794
795,796
797,798
798,799
798,800
799,800
799,801
800,801
802,803
803,804
806,807
806,808
807,808
808,809
808,810
808,811
809,810
811,812
814,815
814,816
815,816
816,817
816,818
816,819
816,820
816,821
816,822
817,818
819,820
824,825
827,828
828,829
828,830
829,830
831,832
833,834
834,835
834,836
835,836
837,838
838,839
838,840
839,840
842,843
843,844
843,845
844,845
847,848
847,849
847,850
848,849
848,850
849,850
849,851
850,851
852,853
854,855
854,856
854,857
854,858
855,856
857,858
859,860
860,861
862,863
864,865
865,866
866,867
866,868
867,868
869,870
871,872
872,873
873,874
873,875
874,875
876,877
876,878
877,878
879,880
881,882
882,883
882,884
882,885
882,886
882,887
882,888
883,884
885,886
887,888
889,890
891,892
893,894
895,896
895,897
896,897
896,898
897,898
899,900
901,902
901,903
902,903
903,904
903,905
904,905
906,907
906,908
907,908
907,909
908,909
911,912
911,913
911,914
911,915
912,913
914,915
914,916
915,916
915,917
918,919
919,920
919,921
920,921
924,925
927,928
928,929
928,930
928,931
929,930
931,932
932,933
934,935
935,936
937,938
937,939
938,939
938,940
939,940
939,941
940,941
942,943
942,944
943,944
943,945
946,947
948,949
949,950
949,951
950,951
952,953
952,954
953,954
953,955
956,957
958,959
958,960
958,961
958,962
959,960
960,961
960,962
961,962
963,964
963,965
963,966
963,967
964,965
966,967
968,969
970,971
971,972
973,974
974,975
974,976
974,977
974,978
975,976
977,978
979,980
980,981
982,983
984,985
985,986
985,987
985,988
985,989
985,990
985,991
986,987
988,989
993,994
996,997
996,998
997,998
998,999
998,1000
999,1000
1001,1002
1001,1003
1002,1003
1002,1004
1005,1006
1007,1008
-----nextToken-----
2,4,7,9,12,14,17,19,21,23,24,29,31,32,35,37,38,42,44,48,50,54,56,57,61,63,64,68,70,73,75,79,81,85,86,90,95,99,101,104,107,111,113,117,121,123,128,131,132,136,139,142,147,149,154,162,163,170,171,172,173,180,181,182,183,190,191,192,193,200,201,202,203,209,211,215,218,219,224,228,230,233,236,240,242,246,250,252,257,260,261,265,268,271,276,278,285,286,288,289,293,295,300,301,303,304,311,312,314,315,320,321,323,324,328,332,333,334,338,342,344,347,348,352,354,358,362,364,369,370,371,375,379,380,383,384,389,393,395,397,402,403,406,407,410,411,416,418,419,423,427,429,432,435,436,441,443,447,448,450,451,453,460,462,464,467,469,471,472,477,479,481,484,486,488,489,491,495,496,500,502,506,507,509,513,514,519,520,521,525,528,530,535,537,539,541,545,546,548,552,556,557,560,563,564,568,569,570,572,576,578,582,587,589,590,593,595,598,600,601,605,607,611,613,616,618,619,621,623,624,625,628,632,635,637,639,642,646,648,651,653,657,659,662,667,671,673,677,680,682,683,685,691,692,693,698,702,704,709,712,713,719,720,721,726,730,732,735,738,743,744,745,750,752,758,759,760,765,769,771,776,779,780,784,785,790,794,796,801,804,805,810,812,813,818,820,821,822,823,825,826,830,832,836,840,841,845,846,851,853,856,858,861,863,868,870,875,878,880,884,886,888,890,892,894,898,900,905,909,910,913,916,917,921,922,923,925,926,930,933,936,941,944,945,947,951,954,955,957,962,965,967,969,972,976,978,981,983,987,989,990,991,992,994,995,1000,1003,1004,1006,1008
-----computeFrom-----
77,78
77,79
83,84
83,85
93,94
93,95
109,110
109,111
115,116
115,117
125,126
125,127
134,135
134,136
152,153
152,154
155,156
155,157
156,157
156,158
157,158
157,159
158,159
158,160
160,161
160,162
164,165
164,166
166,167
166,168
168,169
168,170
174,175
174,176
176,177
176,178
178,179
178,180
184,185
184,186
186,187
186,188
188,189
188,190
194,195
194,196
196,197
196,198
198,199
198,200
205,206
205,207
207,208
207,209
213,214
213,215
222,223
222,224
238,239
238,240
244,245
244,246
254,255
254,256
263,264
263,265
282,283
282,284
291,292
291,293
306,307
306,308
308,309
308,310
326,327
326,328
336,337
336,338
350,351
350,352
356,357
356,358
366,367
366,368
373,374
373,375
387,388
387,389
400,401
400,402
404,405
404,406
408,409
408,410
421,422
421,423
438,439
438,440
455,456
455,457
456,457
456,458
457,458
457,459
473,474
473,475
474,475
474,476
497,498
497,499
511,512
511,513
523,524
523,525
532,533
532,534
550,551
550,552
574,575
574,576
630,631
630,632
655,656
655,657
675,676
675,677
687,688
687,689
689,690
689,691
696,697
696,698
706,707
706,708
715,716
715,717
717,718
717,719
724,725
724,726
740,741
740,742
748,749
748,750
754,755
754,756
756,757
756,758
763,764
763,765
773,774
773,775
782,783
782,784
788,789
788,790
798,799
798,800
828,829
828,830
834,835
834,836
843,844
843,845
848,849
848,850
849,850
849,851
866,867
866,868
873,874
873,875
896,897
896,898
903,904
903,905
938,939
938,940
960,961
960,962
-----guardedBy-----
79,85
111,117
211,242
240,246
352,358
863,870
898,921
947,994
-----guardedByNegation-----
211,354
215,323
219,286
691,758
719,758
861,875
-----lastLexicalUse-----
211,354
-----jump-----
211,354
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;LiteralExpression;Declarator;Pointer;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;BreakStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;BreakStatement;
-----ast_node-----
voiddb_stack_trace_cmd(db_expr_t addr, boolean_t have_addr, db_expr_t count,		   char *modif){	struct i386_frame *frame;	int *argp;	db_addr_t callpc;	boolean_t first;	struct pcb *pcb;	struct proc *p;	pid_t pid;	int i;	if (count == -1)		count = 1024;	if (!have_addr) {		frame = (struct i386_frame *)BP_REGS(&ddb_regs);		if (frame == NULL)			frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);		callpc = PC_REGS(&ddb_regs);	} else if (!INKERNEL(addr)) {		pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000;		/*		 * The pcb for curproc is not valid at this point,		 * so fall back to the default case.		 */		if ((curproc != NULL) && (pid == curproc->p_pid)) {			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		} else {			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}	} else {		/*		 * Look for something that might be a frame pointer, just as		 * a convenience.		 */		frame = (struct i386_frame *)addr;		for (i = 0; i < 4096; i += 4) {			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}		if (i == 4096) {			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}		frame = (void *)((char *)frame + i);		db_printf("Trace beginning at frame %p\n", frame);		callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);	}	first = TRUE;	while (count--) {		struct i386_frame *actframe;		int		narg;		const char *	name;		db_expr_t	offset;		c_db_sym_t	sym;#define MAXNARG	16		char	*argnames[MAXNARG], **argnp = NULL;		sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);		db_symbol_values(sym, &name, NULL);		/*		 * Attempt to determine a (possibly fake) frame that gives		 * the caller's pc.  It may differ from `frame' if the		 * current function never sets up a standard frame or hasn't		 * set one up yet or has just discarded one.  The last two		 * cases can be guessed fairly reliably for code generated		 * by gcc.  The first case is too much trouble to handle in		 * general because the amount of junk on the stack depends		 * on the pc (the special handling of "calltrap", etc. in		 * db_nextframe() works because the `next' pc is special).		 */		actframe = frame;		if (first) {			if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}			first = FALSE;		}		argp = &actframe->f_arg0;		narg = MAXNARG;		if (sym != NULL && db_sym_numargs(sym, &narg, argnames)) {			argnp = argnames;		} else {			narg = db_numargs(frame);		}		db_print_stack_entry(name, narg, argnp, argp, callpc);		if (actframe != frame) {			/* `frame' belongs to caller. */			callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);			continue;		}		db_nextframe(&frame, &callpc);		if (INKERNEL((int) callpc) && !INKERNEL((int) frame)) {			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);			db_symbol_values(sym, &name, NULL);			db_print_stack_entry(name, 0, 0, 0, callpc);			break;		}		if (!INKERNEL((int) frame)) {			break;		}	}}
void
db_stack_trace_cmd(db_expr_t addr, boolean_t have_addr, db_expr_t count,		   char *modif)
db_stack_trace_cmd
db_expr_t addr
db_expr_t
db_expr_t
addr
addr
boolean_t have_addr
boolean_t
boolean_t
have_addr
have_addr
db_expr_t count
db_expr_t
db_expr_t
count
count
char *modif
char
*modif
*
modif
{	struct i386_frame *frame;	int *argp;	db_addr_t callpc;	boolean_t first;	struct pcb *pcb;	struct proc *p;	pid_t pid;	int i;	if (count == -1)		count = 1024;	if (!have_addr) {		frame = (struct i386_frame *)BP_REGS(&ddb_regs);		if (frame == NULL)			frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);		callpc = PC_REGS(&ddb_regs);	} else if (!INKERNEL(addr)) {		pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000;		/*		 * The pcb for curproc is not valid at this point,		 * so fall back to the default case.		 */		if ((curproc != NULL) && (pid == curproc->p_pid)) {			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		} else {			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}	} else {		/*		 * Look for something that might be a frame pointer, just as		 * a convenience.		 */		frame = (struct i386_frame *)addr;		for (i = 0; i < 4096; i += 4) {			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}		if (i == 4096) {			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}		frame = (void *)((char *)frame + i);		db_printf("Trace beginning at frame %p\n", frame);		callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);	}	first = TRUE;	while (count--) {		struct i386_frame *actframe;		int		narg;		const char *	name;		db_expr_t	offset;		c_db_sym_t	sym;#define MAXNARG	16		char	*argnames[MAXNARG], **argnp = NULL;		sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);		db_symbol_values(sym, &name, NULL);		/*		 * Attempt to determine a (possibly fake) frame that gives		 * the caller's pc.  It may differ from `frame' if the		 * current function never sets up a standard frame or hasn't		 * set one up yet or has just discarded one.  The last two		 * cases can be guessed fairly reliably for code generated		 * by gcc.  The first case is too much trouble to handle in		 * general because the amount of junk on the stack depends		 * on the pc (the special handling of "calltrap", etc. in		 * db_nextframe() works because the `next' pc is special).		 */		actframe = frame;		if (first) {			if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}			first = FALSE;		}		argp = &actframe->f_arg0;		narg = MAXNARG;		if (sym != NULL && db_sym_numargs(sym, &narg, argnames)) {			argnp = argnames;		} else {			narg = db_numargs(frame);		}		db_print_stack_entry(name, narg, argnp, argp, callpc);		if (actframe != frame) {			/* `frame' belongs to caller. */			callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);			continue;		}		db_nextframe(&frame, &callpc);		if (INKERNEL((int) callpc) && !INKERNEL((int) frame)) {			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);			db_symbol_values(sym, &name, NULL);			db_print_stack_entry(name, 0, 0, 0, callpc);			break;		}		if (!INKERNEL((int) frame)) {			break;		}	}}
struct i386_frame *frame;
struct i386_frame *frame;
struct i386_frame
i386_frame
*frame
*
frame
int *argp;
int *argp;
int
*argp
*
argp
db_addr_t callpc;
db_addr_t callpc;
db_addr_t
db_addr_t
callpc
callpc
boolean_t first;
boolean_t first;
boolean_t
boolean_t
first
first
struct pcb *pcb;
struct pcb *pcb;
struct pcb
pcb
*pcb
*
pcb
struct proc *p;
struct proc *p;
struct proc
proc
*p
*
p
pid_t pid;
pid_t pid;
pid_t
pid_t
pid
pid
int i;
int i;
int
i
i
if (count == -1)		count = 1024;
count == -1
count
count
-1
1
count = 1024;
count = 1024
count
count
1024
if (!have_addr) {		frame = (struct i386_frame *)BP_REGS(&ddb_regs);		if (frame == NULL)			frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);		callpc = PC_REGS(&ddb_regs);	} else if (!INKERNEL(addr)) {		pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000;		/*		 * The pcb for curproc is not valid at this point,		 * so fall back to the default case.		 */		if ((curproc != NULL) && (pid == curproc->p_pid)) {			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		} else {			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}	} else {		/*		 * Look for something that might be a frame pointer, just as		 * a convenience.		 */		frame = (struct i386_frame *)addr;		for (i = 0; i < 4096; i += 4) {			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}		if (i == 4096) {			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}		frame = (void *)((char *)frame + i);		db_printf("Trace beginning at frame %p\n", frame);		callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);	}
!have_addr
have_addr
have_addr
{		frame = (struct i386_frame *)BP_REGS(&ddb_regs);		if (frame == NULL)			frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);		callpc = PC_REGS(&ddb_regs);	}
frame = (struct i386_frame *)BP_REGS(&ddb_regs);
frame = (struct i386_frame *)BP_REGS(&ddb_regs)
frame
frame
(struct i386_frame *)BP_REGS(&ddb_regs)
struct i386_frame *
struct i386_frame
i386_frame
*
*
BP_REGS(&ddb_regs)
BP_REGS
BP_REGS
&ddb_regs
ddb_regs
ddb_regs
if (frame == NULL)			frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);
frame == NULL
frame
frame
NULL
NULL
frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4);
frame = (struct i386_frame *)(SP_REGS(&ddb_regs) - 4)
frame
frame
(struct i386_frame *)(SP_REGS(&ddb_regs) - 4)
struct i386_frame *
struct i386_frame
i386_frame
*
*
(SP_REGS(&ddb_regs) - 4)
SP_REGS(&ddb_regs) - 4
SP_REGS(&ddb_regs)
SP_REGS
SP_REGS
&ddb_regs
ddb_regs
ddb_regs
4
callpc = PC_REGS(&ddb_regs);
callpc = PC_REGS(&ddb_regs)
callpc
callpc
PC_REGS(&ddb_regs)
PC_REGS
PC_REGS
&ddb_regs
ddb_regs
ddb_regs
if (!INKERNEL(addr)) {		pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000;		/*		 * The pcb for curproc is not valid at this point,		 * so fall back to the default case.		 */		if ((curproc != NULL) && (pid == curproc->p_pid)) {			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		} else {			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}	} else {		/*		 * Look for something that might be a frame pointer, just as		 * a convenience.		 */		frame = (struct i386_frame *)addr;		for (i = 0; i < 4096; i += 4) {			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}		if (i == 4096) {			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}		frame = (void *)((char *)frame + i);		db_printf("Trace beginning at frame %p\n", frame);		callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);	}
!INKERNEL(addr)
INKERNEL(addr)
INKERNEL
INKERNEL
addr
addr
{		pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000;		/*		 * The pcb for curproc is not valid at this point,		 * so fall back to the default case.		 */		if ((curproc != NULL) && (pid == curproc->p_pid)) {			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		} else {			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}	}
pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000;
pid = (addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000
pid
pid
(addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000 +		    ((addr >> 16) % 16) * 10000
(addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100 + ((addr >> 12) % 16) * 1000
(addr % 16) + ((addr >> 4) % 16) * 10 +		    ((addr >> 8) % 16) * 100
(addr % 16) + ((addr >> 4) % 16) * 10
(addr % 16)
addr % 16
addr
addr
16
((addr >> 4) % 16) * 10
((addr >> 4) % 16)
(addr >> 4) % 16
(addr >> 4)
addr >> 4
addr
addr
4
16
10
((addr >> 8) % 16) * 100
((addr >> 8) % 16)
(addr >> 8) % 16
(addr >> 8)
addr >> 8
addr
addr
8
16
100
((addr >> 12) % 16) * 1000
((addr >> 12) % 16)
(addr >> 12) % 16
(addr >> 12)
addr >> 12
addr
addr
12
16
1000
((addr >> 16) % 16) * 10000
((addr >> 16) % 16)
(addr >> 16) % 16
(addr >> 16)
addr >> 16
addr
addr
16
16
10000
if ((curproc != NULL) && (pid == curproc->p_pid)) {			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		} else {			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}
(curproc != NULL) && (pid == curproc->p_pid)
(curproc != NULL)
curproc != NULL
curproc
curproc
NULL
NULL
(pid == curproc->p_pid)
pid == curproc->p_pid
pid
pid
curproc->p_pid
curproc
curproc
p_pid
{			frame = (struct i386_frame *)BP_REGS(&ddb_regs);			if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);			callpc = PC_REGS(&ddb_regs);		}
frame = (struct i386_frame *)BP_REGS(&ddb_regs);
frame = (struct i386_frame *)BP_REGS(&ddb_regs)
frame
frame
(struct i386_frame *)BP_REGS(&ddb_regs)
struct i386_frame *
struct i386_frame
i386_frame
*
*
BP_REGS(&ddb_regs)
BP_REGS
BP_REGS
&ddb_regs
ddb_regs
ddb_regs
if (frame == NULL)				frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);
frame == NULL
frame
frame
NULL
NULL
frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4);
frame = (struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4)
frame
frame
(struct i386_frame *)				    (SP_REGS(&ddb_regs) - 4)
struct i386_frame *
struct i386_frame
i386_frame
*
*
(SP_REGS(&ddb_regs) - 4)
SP_REGS(&ddb_regs) - 4
SP_REGS(&ddb_regs)
SP_REGS
SP_REGS
&ddb_regs
ddb_regs
ddb_regs
4
callpc = PC_REGS(&ddb_regs);
callpc = PC_REGS(&ddb_regs)
callpc
callpc
PC_REGS(&ddb_regs)
PC_REGS
PC_REGS
&ddb_regs
ddb_regs
ddb_regs
{			/* sx_slock(&allproc_lock); */			FOREACH_PROC_IN_SYSTEM(p) {				if (p->p_pid == pid)					break;			}			/* sx_sunlock(&allproc_lock); */			if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}			if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}			pcb = p->p_thread->td_pcb;			frame = (struct i386_frame *)pcb->pcb_ebp;			if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);			callpc = (db_addr_t)pcb->pcb_eip;		}
FOREACH_PROC_IN_SYSTEM(p)
FOREACH_PROC_IN_SYSTEM(p)
FOREACH_PROC_IN_SYSTEM
FOREACH_PROC_IN_SYSTEM
p
p
)
{				if (p->p_pid == pid)					break;			}
if (p->p_pid == pid)					break;
p->p_pid == pid
p->p_pid
p
p
p_pid
pid
pid
break;
if (p == NULL) {				db_printf("pid %d not found\n", pid);				return;			}
p == NULL
p
p
NULL
NULL
{				db_printf("pid %d not found\n", pid);				return;			}
db_printf("pid %d not found\n", pid);
db_printf("pid %d not found\n", pid)
db_printf
db_printf
"pid %d not found\n"
pid
pid
return;
if ((p->p_flag & P_INMEM) == 0) {				db_printf("pid %d swapped out\n", pid);				return;			}
(p->p_flag & P_INMEM) == 0
(p->p_flag & P_INMEM)
p->p_flag & P_INMEM
p->p_flag
p
p
p_flag
P_INMEM
P_INMEM
0
{				db_printf("pid %d swapped out\n", pid);				return;			}
db_printf("pid %d swapped out\n", pid);
db_printf("pid %d swapped out\n", pid)
db_printf
db_printf
"pid %d swapped out\n"
pid
pid
return;
pcb = p->p_thread->td_pcb;
pcb = p->p_thread->td_pcb
pcb
pcb
p->p_thread->td_pcb
p->p_thread
p
p
p_thread
td_pcb
frame = (struct i386_frame *)pcb->pcb_ebp;
frame = (struct i386_frame *)pcb->pcb_ebp
frame
frame
(struct i386_frame *)pcb->pcb_ebp
struct i386_frame *
struct i386_frame
i386_frame
*
*
pcb->pcb_ebp
pcb
pcb
pcb_ebp
if (frame == NULL)				frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);
frame == NULL
frame
frame
NULL
NULL
frame = (struct i386_frame *)				    (pcb->pcb_esp - 4);
frame = (struct i386_frame *)				    (pcb->pcb_esp - 4)
frame
frame
(struct i386_frame *)				    (pcb->pcb_esp - 4)
struct i386_frame *
struct i386_frame
i386_frame
*
*
(pcb->pcb_esp - 4)
pcb->pcb_esp - 4
pcb->pcb_esp
pcb
pcb
pcb_esp
4
callpc = (db_addr_t)pcb->pcb_eip;
callpc = (db_addr_t)pcb->pcb_eip
callpc
callpc
(db_addr_t)pcb->pcb_eip
db_addr_t
db_addr_t
db_addr_t

pcb->pcb_eip
pcb
pcb
pcb_eip
{		/*		 * Look for something that might be a frame pointer, just as		 * a convenience.		 */		frame = (struct i386_frame *)addr;		for (i = 0; i < 4096; i += 4) {			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}		if (i == 4096) {			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}		frame = (void *)((char *)frame + i);		db_printf("Trace beginning at frame %p\n", frame);		callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);	}
frame = (struct i386_frame *)addr;
frame = (struct i386_frame *)addr
frame
frame
(struct i386_frame *)addr
struct i386_frame *
struct i386_frame
i386_frame
*
*
addr
addr
for (i = 0; i < 4096; i += 4) {			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}
i = 0;
i = 0
i
i
0
i < 4096
i
i
4096
i += 4
i
i
4
{			struct i386_frame *check;			check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);			if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}			db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);		}
struct i386_frame *check;
struct i386_frame *check;
struct i386_frame
i386_frame
*check
*
check
check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE);
check = (struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE)
check
check
(struct i386_frame *)db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE)
struct i386_frame *
struct i386_frame
i386_frame
*
*
db_get_value((int)((char *)&frame->f_frame + i), 4, FALSE)
db_get_value
db_get_value
(int)((char *)&frame->f_frame + i)
int
int

((char *)&frame->f_frame + i)
(char *)&frame->f_frame + i
(char *)&frame->f_frame
char *
char
*
*
&frame->f_frame
frame->f_frame
frame
frame
f_frame
i
i
4
FALSE
FALSE
if ((char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096			) {				break;			}
(char *)check - (char *)frame >= 0 &&			    (char *)check - (char *)frame < 4096
(char *)check - (char *)frame >= 0
(char *)check - (char *)frame
(char *)check
char *
char
*
*
check
check
(char *)frame
char *
char
*
*
frame
frame
0
(char *)check - (char *)frame < 4096
(char *)check - (char *)frame
(char *)check
char *
char
*
*
check
check
(char *)frame
char *
char
*
*
frame
frame
4096
{				break;			}
break;
db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i);
db_printf("%p does not look like a stack frame, skipping\n", (char *)&frame->f_frame + i)
db_printf
db_printf
"%p does not look like a stack frame, skipping\n"
(char *)&frame->f_frame + i
(char *)&frame->f_frame
char *
char
*
*
&frame->f_frame
frame->f_frame
frame
frame
f_frame
i
i
if (i == 4096) {			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}
i == 4096
i
i
4096
{			db_printf("Unable to find anything that looks like a stack frame\n");			return;		}
db_printf("Unable to find anything that looks like a stack frame\n");
db_printf("Unable to find anything that looks like a stack frame\n")
db_printf
db_printf
"Unable to find anything that looks like a stack frame\n"
return;
frame = (void *)((char *)frame + i);
frame = (void *)((char *)frame + i)
frame
frame
(void *)((char *)frame + i)
void *
void
*
*
((char *)frame + i)
(char *)frame + i
(char *)frame
char *
char
*
*
frame
frame
i
i
db_printf("Trace beginning at frame %p\n", frame);
db_printf("Trace beginning at frame %p\n", frame)
db_printf
db_printf
"Trace beginning at frame %p\n"
frame
frame
callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE);
callpc = (db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE)
callpc
callpc
(db_addr_t)db_get_value((int)&frame->f_retaddr, 4, FALSE)
db_addr_t
db_addr_t
db_addr_t

db_get_value((int)&frame->f_retaddr, 4, FALSE)
db_get_value
db_get_value
(int)&frame->f_retaddr
int
int

&frame->f_retaddr
frame->f_retaddr
frame
frame
f_retaddr
4
FALSE
FALSE
first = TRUE;
first = TRUE
first
first
TRUE
TRUE
while (count--) {		struct i386_frame *actframe;		int		narg;		const char *	name;		db_expr_t	offset;		c_db_sym_t	sym;#define MAXNARG	16		char	*argnames[MAXNARG], **argnp = NULL;		sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);		db_symbol_values(sym, &name, NULL);		/*		 * Attempt to determine a (possibly fake) frame that gives		 * the caller's pc.  It may differ from `frame' if the		 * current function never sets up a standard frame or hasn't		 * set one up yet or has just discarded one.  The last two		 * cases can be guessed fairly reliably for code generated		 * by gcc.  The first case is too much trouble to handle in		 * general because the amount of junk on the stack depends		 * on the pc (the special handling of "calltrap", etc. in		 * db_nextframe() works because the `next' pc is special).		 */		actframe = frame;		if (first) {			if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}			first = FALSE;		}		argp = &actframe->f_arg0;		narg = MAXNARG;		if (sym != NULL && db_sym_numargs(sym, &narg, argnames)) {			argnp = argnames;		} else {			narg = db_numargs(frame);		}		db_print_stack_entry(name, narg, argnp, argp, callpc);		if (actframe != frame) {			/* `frame' belongs to caller. */			callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);			continue;		}		db_nextframe(&frame, &callpc);		if (INKERNEL((int) callpc) && !INKERNEL((int) frame)) {			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);			db_symbol_values(sym, &name, NULL);			db_print_stack_entry(name, 0, 0, 0, callpc);			break;		}		if (!INKERNEL((int) frame)) {			break;		}	}
count--
count
count
{		struct i386_frame *actframe;		int		narg;		const char *	name;		db_expr_t	offset;		c_db_sym_t	sym;#define MAXNARG	16		char	*argnames[MAXNARG], **argnp = NULL;		sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);		db_symbol_values(sym, &name, NULL);		/*		 * Attempt to determine a (possibly fake) frame that gives		 * the caller's pc.  It may differ from `frame' if the		 * current function never sets up a standard frame or hasn't		 * set one up yet or has just discarded one.  The last two		 * cases can be guessed fairly reliably for code generated		 * by gcc.  The first case is too much trouble to handle in		 * general because the amount of junk on the stack depends		 * on the pc (the special handling of "calltrap", etc. in		 * db_nextframe() works because the `next' pc is special).		 */		actframe = frame;		if (first) {			if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}			first = FALSE;		}		argp = &actframe->f_arg0;		narg = MAXNARG;		if (sym != NULL && db_sym_numargs(sym, &narg, argnames)) {			argnp = argnames;		} else {			narg = db_numargs(frame);		}		db_print_stack_entry(name, narg, argnp, argp, callpc);		if (actframe != frame) {			/* `frame' belongs to caller. */			callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);			continue;		}		db_nextframe(&frame, &callpc);		if (INKERNEL((int) callpc) && !INKERNEL((int) frame)) {			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);			db_symbol_values(sym, &name, NULL);			db_print_stack_entry(name, 0, 0, 0, callpc);			break;		}		if (!INKERNEL((int) frame)) {			break;		}	}
struct i386_frame *actframe;
struct i386_frame *actframe;
struct i386_frame
i386_frame
*actframe
*
actframe
int		narg;
int		narg;
int
narg
narg
const char *	name;
const char *	name;
const char
*	name
*
name
db_expr_t	offset;
db_expr_t	offset;
db_expr_t
db_expr_t
offset
offset
c_db_sym_t	sym;
c_db_sym_t	sym;
c_db_sym_t
c_db_sym_t
sym
sym
char	*argnames[MAXNARG], **argnp = NULL;
char	*argnames[MAXNARG], **argnp = NULL;
char
*argnames[MAXNARG]
*
argnames
[MAXNARG]
MAXNARG
**argnp = NULL
*
*
argnp
= NULL
NULL
NULL
sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);
sym = db_search_symbol(callpc, DB_STGY_ANY, &offset)
sym
sym
db_search_symbol(callpc, DB_STGY_ANY, &offset)
db_search_symbol
db_search_symbol
callpc
callpc
DB_STGY_ANY
DB_STGY_ANY
&offset
offset
offset
db_symbol_values(sym, &name, NULL);
db_symbol_values(sym, &name, NULL)
db_symbol_values
db_symbol_values
sym
sym
&name
name
name
NULL
NULL
actframe = frame;
actframe = frame
actframe
actframe
frame
frame
if (first) {			if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}			first = FALSE;		}
first
first
{			if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}			first = FALSE;		}
if (!have_addr) {				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			} else if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}
!have_addr
have_addr
have_addr
{				int instr;				instr = db_get_value(callpc, 4, FALSE);				if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}			}
int instr;
int instr;
int
instr
instr
instr = db_get_value(callpc, 4, FALSE);
instr = db_get_value(callpc, 4, FALSE)
instr
instr
db_get_value(callpc, 4, FALSE)
db_get_value
db_get_value
callpc
callpc
4
FALSE
FALSE
if ((instr & 0x00ffffff) == 0x00e58955) {					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
(instr & 0x00ffffff) == 0x00e58955
(instr & 0x00ffffff)
instr & 0x00ffffff
instr
instr
0x00ffffff
0x00e58955
{					/* pushl %ebp; movl %esp, %ebp */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);
actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4)
actframe
actframe
(struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4)
struct i386_frame *
struct i386_frame
i386_frame
*
*
(SP_REGS(&ddb_regs) - 4)
SP_REGS(&ddb_regs) - 4
SP_REGS(&ddb_regs)
SP_REGS
SP_REGS
&ddb_regs
ddb_regs
ddb_regs
4
if ((instr & 0x0000ffff) == 0x0000e589) {					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				} else if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
(instr & 0x0000ffff) == 0x0000e589
(instr & 0x0000ffff)
instr & 0x0000ffff
instr
instr
0x0000ffff
0x0000e589
{					/* movl %esp, %ebp */					actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);					if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}				}
actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs);
actframe = (struct i386_frame *)					    SP_REGS(&ddb_regs)
actframe
actframe
(struct i386_frame *)					    SP_REGS(&ddb_regs)
struct i386_frame *
struct i386_frame
i386_frame
*
*
SP_REGS(&ddb_regs)
SP_REGS
SP_REGS
&ddb_regs
ddb_regs
ddb_regs
if (ddb_regs.tf_ebp == 0) {						/* Fake caller's frame better. */						frame = actframe;					}
ddb_regs.tf_ebp == 0
ddb_regs.tf_ebp
ddb_regs
ddb_regs
tf_ebp
0
{						/* Fake caller's frame better. */						frame = actframe;					}
frame = actframe;
frame = actframe
frame
frame
actframe
actframe
if ((instr & 0x000000ff) == 0x000000c3) {					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				} else if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
(instr & 0x000000ff) == 0x000000c3
(instr & 0x000000ff)
instr & 0x000000ff
instr
instr
0x000000ff
0x000000c3
{					/* ret */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);
actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4)
actframe
actframe
(struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4)
struct i386_frame *
struct i386_frame
i386_frame
*
*
(SP_REGS(&ddb_regs) - 4)
SP_REGS(&ddb_regs) - 4
SP_REGS(&ddb_regs)
SP_REGS
SP_REGS
&ddb_regs
ddb_regs
ddb_regs
4
if (offset == 0) {					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
offset == 0
offset
offset
0
{					/* Probably a symbol in assembler code. */					actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);				}
actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4);
actframe = (struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4)
actframe
actframe
(struct i386_frame *)					    (SP_REGS(&ddb_regs) - 4)
struct i386_frame *
struct i386_frame
i386_frame
*
*
(SP_REGS(&ddb_regs) - 4)
SP_REGS(&ddb_regs) - 4
SP_REGS(&ddb_regs)
SP_REGS
SP_REGS
&ddb_regs
ddb_regs
ddb_regs
4
if (!strcmp(name, "fork_trampoline")) {				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}
!strcmp(name, "fork_trampoline")
strcmp(name, "fork_trampoline")
strcmp
strcmp
name
name
"fork_trampoline"
{				/*				 * Don't try to walk back on a stack for a				 * process that hasn't actually been run yet.				 */				db_print_stack_entry(name, 0, 0, 0, callpc);				break;			}
db_print_stack_entry(name, 0, 0, 0, callpc);
db_print_stack_entry(name, 0, 0, 0, callpc)
db_print_stack_entry
db_print_stack_entry
name
name
0
0
0
callpc
callpc
break;
first = FALSE;
first = FALSE
first
first
FALSE
FALSE
argp = &actframe->f_arg0;
argp = &actframe->f_arg0
argp
argp
&actframe->f_arg0
actframe->f_arg0
actframe
actframe
f_arg0
narg = MAXNARG;
narg = MAXNARG
narg
narg
MAXNARG
if (sym != NULL && db_sym_numargs(sym, &narg, argnames)) {			argnp = argnames;		} else {			narg = db_numargs(frame);		}
sym != NULL && db_sym_numargs(sym, &narg, argnames)
sym != NULL
sym
sym
NULL
NULL
db_sym_numargs(sym, &narg, argnames)
db_sym_numargs
db_sym_numargs
sym
sym
&narg
narg
narg
argnames
argnames
{			argnp = argnames;		}
argnp = argnames;
argnp = argnames
argnp
argnp
argnames
argnames
{			narg = db_numargs(frame);		}
narg = db_numargs(frame);
narg = db_numargs(frame)
narg
narg
db_numargs(frame)
db_numargs
db_numargs
frame
frame
db_print_stack_entry(name, narg, argnp, argp, callpc);
db_print_stack_entry(name, narg, argnp, argp, callpc)
db_print_stack_entry
db_print_stack_entry
name
name
narg
narg
argnp
argnp
argp
argp
callpc
callpc
if (actframe != frame) {			/* `frame' belongs to caller. */			callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);			continue;		}
actframe != frame
actframe
actframe
frame
frame
{			/* `frame' belongs to caller. */			callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);			continue;		}
callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE);
callpc = (db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE)
callpc
callpc
(db_addr_t)			    db_get_value((int)&actframe->f_retaddr, 4, FALSE)
db_addr_t
db_addr_t
db_addr_t

db_get_value((int)&actframe->f_retaddr, 4, FALSE)
db_get_value
db_get_value
(int)&actframe->f_retaddr
int
int

&actframe->f_retaddr
actframe->f_retaddr
actframe
actframe
f_retaddr
4
FALSE
FALSE
continue;
db_nextframe(&frame, &callpc);
db_nextframe(&frame, &callpc)
db_nextframe
db_nextframe
&frame
frame
frame
&callpc
callpc
callpc
if (INKERNEL((int) callpc) && !INKERNEL((int) frame)) {			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);			db_symbol_values(sym, &name, NULL);			db_print_stack_entry(name, 0, 0, 0, callpc);			break;		}
INKERNEL((int) callpc) && !INKERNEL((int) frame)
INKERNEL((int) callpc)
INKERNEL
INKERNEL
(int) callpc
int
int

callpc
callpc
!INKERNEL((int) frame)
INKERNEL((int) frame)
INKERNEL
INKERNEL
(int) frame
int
int

frame
frame
{			sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);			db_symbol_values(sym, &name, NULL);			db_print_stack_entry(name, 0, 0, 0, callpc);			break;		}
sym = db_search_symbol(callpc, DB_STGY_ANY, &offset);
sym = db_search_symbol(callpc, DB_STGY_ANY, &offset)
sym
sym
db_search_symbol(callpc, DB_STGY_ANY, &offset)
db_search_symbol
db_search_symbol
callpc
callpc
DB_STGY_ANY
DB_STGY_ANY
&offset
offset
offset
db_symbol_values(sym, &name, NULL);
db_symbol_values(sym, &name, NULL)
db_symbol_values
db_symbol_values
sym
sym
&name
name
name
NULL
NULL
db_print_stack_entry(name, 0, 0, 0, callpc);
db_print_stack_entry(name, 0, 0, 0, callpc)
db_print_stack_entry
db_print_stack_entry
name
name
0
0
0
callpc
callpc
break;
if (!INKERNEL((int) frame)) {			break;		}
!INKERNEL((int) frame)
INKERNEL((int) frame)
INKERNEL
INKERNEL
(int) frame
int
int

frame
frame
{			break;		}
break;
-----joern-----
(266,93,0)
(301,423,0)
(38,396,0)
(337,408,0)
(260,384,0)
(442,230,0)
(302,391,0)
(276,86,0)
(321,250,0)
(104,163,0)
(337,30,0)
(31,339,0)
(372,408,0)
(288,466,0)
(431,42,0)
(139,469,0)
(408,270,0)
(363,126,0)
(371,284,0)
(179,163,0)
(364,25,0)
(94,375,0)
(385,291,0)
(482,458,0)
(335,477,0)
(141,424,0)
(310,397,0)
(278,483,0)
(66,423,0)
(168,173,0)
(499,235,0)
(167,275,0)
(22,395,0)
(454,61,0)
(285,305,0)
(178,231,0)
(187,173,0)
(412,410,0)
(126,144,0)
(126,437,0)
(412,414,0)
(100,470,0)
(408,271,0)
(204,426,0)
(429,464,0)
(95,314,0)
(489,204,0)
(136,509,0)
(397,208,0)
(200,2,0)
(327,238,0)
(20,86,0)
(339,31,0)
(298,312,0)
(226,399,0)
(61,454,0)
(225,281,0)
(511,268,0)
(346,74,0)
(350,60,0)
(389,344,0)
(86,130,0)
(476,511,0)
(337,19,0)
(467,301,0)
(444,418,0)
(337,128,0)
(479,192,0)
(476,475,0)
(204,394,0)
(145,140,0)
(192,191,0)
(288,408,0)
(240,19,0)
(113,199,0)
(40,9,0)
(402,192,0)
(276,288,0)
(132,145,0)
(215,271,0)
(200,314,0)
(113,382,0)
(121,447,0)
(355,118,0)
(15,281,0)
(89,337,0)
(96,271,0)
(20,266,0)
(23,234,0)
(0,165,0)
(384,421,0)
(138,425,0)
(94,86,0)
(342,288,0)
(140,145,0)
(77,400,0)
(222,291,0)
(383,366,0)
(400,152,0)
(212,106,0)
(302,113,0)
(296,511,0)
(395,432,0)
(129,437,0)
(102,467,0)
(25,364,0)
(211,485,0)
(366,383,0)
(448,113,0)
(288,19,0)
(240,375,0)
(24,414,0)
(9,445,0)
(19,497,0)
(400,511,0)
(354,120,0)
(369,106,0)
(497,373,0)
(164,256,0)
(472,291,0)
(59,268,0)
(414,412,0)
(353,131,0)
(135,376,0)
(202,493,0)
(324,60,0)
(89,512,0)
(51,192,0)
(284,42,0)
(154,314,0)
(395,144,0)
(232,175,0)
(128,316,0)
(300,286,0)
(274,173,0)
(324,347,0)
(71,55,0)
(55,317,0)
(318,162,0)
(268,470,0)
(108,426,0)
(12,187,0)
(127,179,0)
(327,1,0)
(188,477,0)
(120,109,0)
(421,384,0)
(210,263,0)
(450,82,0)
(308,346,0)
(478,475,0)
(192,462,0)
(295,472,0)
(159,95,0)
(455,466,0)
(192,466,0)
(486,118,0)
(481,394,0)
(470,314,0)
(142,453,0)
(276,375,0)
(418,444,0)
(213,507,0)
(403,200,0)
(25,509,0)
(32,497,0)
(191,170,0)
(317,437,0)
(445,283,0)
(277,477,0)
(225,76,0)
(448,283,0)
(322,7,0)
(71,142,0)
(443,316,0)
(143,401,0)
(264,71,0)
(384,260,0)
(433,276,0)
(45,476,0)
(299,504,0)
(464,429,0)
(35,86,0)
(332,509,0)
(495,152,0)
(91,458,0)
(304,421,0)
(168,454,0)
(287,507,0)
(487,470,0)
(123,211,0)
(93,266,0)
(94,30,0)
(294,14,0)
(55,466,0)
(286,447,0)
(17,286,0)
(424,270,0)
(94,341,0)
(122,327,0)
(306,130,0)
(275,511,0)
(330,319,0)
(25,447,0)
(331,34,0)
(271,215,0)
(220,371,0)
(115,321,0)
(269,155,0)
(33,131,0)
(341,324,0)
(105,291,0)
(20,375,0)
(194,126,0)
(198,291,0)
(42,401,0)
(443,109,0)
(95,444,0)
(317,113,0)
(126,113,0)
(163,104,0)
(57,60,0)
(420,42,0)
(225,86,0)
(91,193,0)
(340,373,0)
(189,466,0)
(423,301,0)
(62,113,0)
(149,273,0)
(515,455,0)
(20,128,0)
(68,380,0)
(319,314,0)
(106,212,0)
(202,67,0)
(90,466,0)
(257,394,0)
(12,497,0)
(416,195,0)
(271,408,0)
(493,202,0)
(80,448,0)
(212,375,0)
(240,266,0)
(83,481,0)
(448,307,0)
(2,200,0)
(456,58,0)
(398,332,0)
(313,350,0)
(272,337,0)
(400,267,0)
(332,421,0)
(428,175,0)
(96,424,0)
(513,337,0)
(27,256,0)
(276,128,0)
(240,128,0)
(282,319,0)
(86,225,0)
(217,478,0)
(338,270,0)
(458,91,0)
(72,240,0)
(217,210,0)
(386,317,0)
(460,199,0)
(161,291,0)
(381,466,0)
(488,307,0)
(233,462,0)
(427,412,0)
(234,23,0)
(412,427,0)
(332,447,0)
(106,250,0)
(235,499,0)
(197,93,0)
(173,274,0)
(276,266,0)
(197,141,0)
(394,257,0)
(504,154,0)
(94,266,0)
(391,466,0)
(370,188,0)
(224,12,0)
(98,74,0)
(464,401,0)
(238,59,0)
(256,283,0)
(358,429,0)
(172,46,0)
(395,82,0)
(512,89,0)
(414,486,0)
(491,93,0)
(93,491,0)
(411,408,0)
(38,284,0)
(367,126,0)
(20,30,0)
(505,192,0)
(351,504,0)
(239,509,0)
(126,401,0)
(42,307,0)
(173,168,0)
(211,307,0)
(432,395,0)
(378,200,0)
(196,20,0)
(265,471,0)
(458,382,0)
(107,31,0)
(276,0,0)
(452,237,0)
(218,329,0)
(237,303,0)
(316,443,0)
(171,461,0)
(382,484,0)
(178,55,0)
(316,13,0)
(515,14,0)
(179,127,0)
(12,288,0)
(284,312,0)
(192,113,0)
(134,372,0)
(219,396,0)
(317,283,0)
(444,95,0)
(118,355,0)
(371,34,0)
(133,61,0)
(421,304,0)
(492,192,0)
(140,71,0)
(494,493,0)
(343,483,0)
(396,38,0)
(477,335,0)
(103,188,0)
(42,113,0)
(260,410,0)
(177,334,0)
(211,113,0)
(56,42,0)
(462,466,0)
(63,413,0)
(150,168,0)
(175,232,0)
(448,80,0)
(14,187,0)
(18,509,0)
(267,400,0)
(20,104,0)
(279,386,0)
(180,86,0)
(481,374,0)
(360,211,0)
(37,94,0)
(23,70,0)
(261,507,0)
(415,418,0)
(165,0,0)
(34,371,0)
(20,408,0)
(65,70,0)
(283,130,0)
(451,195,0)
(362,20,0)
(383,437,0)
(361,270,0)
(305,267,0)
(117,447,0)
(11,138,0)
(256,401,0)
(6,291,0)
(94,19,0)
(116,278,0)
(337,513,0)
(42,283,0)
(212,214,0)
(448,401,0)
(276,408,0)
(516,256,0)
(440,389,0)
(23,59,0)
(382,113,0)
(391,302,0)
(292,291,0)
(454,168,0)
(380,54,0)
(276,19,0)
(307,54,0)
(52,284,0)
(114,131,0)
(320,291,0)
(145,55,0)
(42,437,0)
(262,194,0)
(359,380,0)
(211,401,0)
(58,50,0)
(414,24,0)
(323,466,0)
(297,412,0)
(169,154,0)
(307,205,0)
(349,172,0)
(435,144,0)
(324,341,0)
(474,98,0)
(209,364,0)
(71,140,0)
(409,275,0)
(424,50,0)
(303,344,0)
(192,437,0)
(365,97,0)
(142,71,0)
(356,372,0)
(60,509,0)
(486,414,0)
(317,386,0)
(473,119,0)
(477,188,0)
(175,410,0)
(111,359,0)
(207,96,0)
(286,509,0)
(162,243,0)
(235,332,0)
(192,119,0)
(127,448,0)
(216,7,0)
(81,276,0)
(131,284,0)
(104,20,0)
(317,307,0)
(497,97,0)
(10,31,0)
(417,74,0)
(406,96,0)
(153,466,0)
(503,91,0)
(94,128,0)
(59,238,0)
(84,238,0)
(394,204,0)
(288,128,0)
(67,422,0)
(380,359,0)
(448,437,0)
(429,424,0)
(500,15,0)
(41,288,0)
(181,58,0)
(184,30,0)
(203,485,0)
(59,23,0)
(160,141,0)
(477,277,0)
(352,95,0)
(484,382,0)
(94,119,0)
(387,54,0)
(36,154,0)
(339,177,0)
(183,258,0)
(163,179,0)
(357,355,0)
(54,380,0)
(67,202,0)
(192,401,0)
(437,383,0)
(247,35,0)
(174,162,0)
(434,270,0)
(87,453,0)
(26,0,0)
(240,341,0)
(13,316,0)
(302,437,0)
(60,447,0)
(166,165,0)
(348,141,0)
(394,481,0)
(289,55,0)
(201,366,0)
(156,191,0)
(288,375,0)
(401,270,0)
(30,471,0)
(254,125,0)
(14,497,0)
(509,447,0)
(319,282,0)
(251,380,0)
(1,314,0)
(14,0,0)
(60,350,0)
(290,208,0)
(258,503,0)
(49,350,0)
(240,30,0)
(148,260,0)
(288,30,0)
(463,191,0)
(418,234,0)
(326,466,0)
(267,305,0)
(288,86,0)
(514,341,0)
(238,327,0)
(249,24,0)
(192,283,0)
(42,284,0)
(359,111,0)
(67,30,0)
(20,341,0)
(345,231,0)
(111,12,0)
(14,481,0)
(256,113,0)
(74,98,0)
(186,50,0)
(464,99,0)
(480,413,0)
(109,120,0)
(92,317,0)
(79,142,0)
(373,48,0)
(508,335,0)
(467,165,0)
(390,443,0)
(211,437,0)
(12,0,0)
(459,317,0)
(162,174,0)
(208,397,0)
(185,205,0)
(234,418,0)
(301,467,0)
(20,362,0)
(410,138,0)
(131,33,0)
(341,199,0)
(275,469,0)
(152,400,0)
(332,235,0)
(236,35,0)
(355,243,0)
(146,178,0)
(368,466,0)
(125,344,0)
(50,58,0)
(217,139,0)
(379,108,0)
(3,1,0)
(340,230,0)
(241,211,0)
(311,256,0)
(389,125,0)
(188,235,0)
(504,299,0)
(227,12,0)
(176,429,0)
(157,38,0)
(245,291,0)
(2,70,0)
(496,239,0)
(165,467,0)
(240,391,0)
(175,243,0)
(177,25,0)
(154,504,0)
(138,410,0)
(276,481,0)
(223,145,0)
(258,341,0)
(453,466,0)
(70,23,0)
(373,340,0)
(438,239,0)
(350,410,0)
(382,458,0)
(419,283,0)
(91,503,0)
(54,307,0)
(28,280,0)
(510,19,0)
(69,199,0)
(328,410,0)
(337,375,0)
(252,302,0)
(39,472,0)
(256,437,0)
(244,24,0)
(465,448,0)
(470,268,0)
(21,14,0)
(187,333,0)
(337,266,0)
(401,464,0)
(404,2,0)
(228,125,0)
(190,444,0)
(74,346,0)
(54,387,0)
(336,266,0)
(445,9,0)
(124,466,0)
(234,299,0)
(31,410,0)
(375,212,0)
(437,471,0)
(155,30,0)
(141,197,0)
(439,187,0)
(317,55,0)
(302,283,0)
(110,395,0)
(119,94,0)
(441,375,0)
(446,211,0)
(144,82,0)
(0,206,0)
(192,453,0)
(248,280,0)
(309,270,0)
(16,211,0)
(25,177,0)
(182,371,0)
(99,464,0)
(144,126,0)
(243,175,0)
(14,515,0)
(337,86,0)
(281,15,0)
(239,447,0)
(112,260,0)
(421,332,0)
(29,466,0)
(455,515,0)
(192,455,0)
(281,225,0)
(302,307,0)
(299,234,0)
(126,307,0)
(126,194,0)
(12,111,0)
(255,424,0)
(410,199,0)
(511,4,0)
(214,212,0)
(193,91,0)
(246,1,0)
(268,59,0)
(177,339,0)
(64,71,0)
(276,497,0)
(288,266,0)
(405,197,0)
(44,258,0)
(426,204,0)
(359,490,0)
(240,408,0)
(317,401,0)
(20,19,0)
(229,303,0)
(109,443,0)
(316,128,0)
(195,199,0)
(231,178,0)
(75,155,0)
(483,278,0)
(12,481,0)
(126,283,0)
(48,373,0)
(293,152,0)
(192,307,0)
(498,128,0)
(503,258,0)
(502,33,0)
(162,335,0)
(165,166,0)
(240,86,0)
(88,291,0)
(461,263,0)
(448,127,0)
(43,466,0)
(501,486,0)
(5,462,0)
(430,19,0)
(1,327,0)
(337,341,0)
(425,138,0)
(392,476,0)
(335,413,0)
(377,178,0)
(276,341,0)
(337,89,0)
(50,424,0)
(276,187,0)
(93,197,0)
(14,288,0)
(243,162,0)
(271,96,0)
(243,355,0)
(256,82,0)
(242,208,0)
(147,432,0)
(230,340,0)
(250,321,0)
(468,25,0)
(250,106,0)
(276,30,0)
(85,291,0)
(211,283,0)
(253,256,0)
(256,307,0)
(449,376,0)
(178,466,0)
(506,338,0)
(315,466,0)
(138,314,0)
(350,313,0)
(151,4,0)
(490,359,0)
(158,312,0)
(268,511,0)
(47,346,0)
(119,388,0)
(24,244,0)
(235,188,0)
(422,67,0)
(137,278,0)
(118,486,0)
(457,458,0)
(73,436,0)
(283,445,0)
(364,413,0)
(303,237,0)
(94,408,0)
(397,511,0)
(173,187,0)
(78,455,0)
(509,509,0)
(373,497,0)
(30,67,0)
(391,240,0)
(399,46,0)
(426,108,0)
(101,305,0)
(60,324,0)
(70,2,0)
(325,466,0)
(8,453,0)
(19,407,0)
(221,299,0)
(288,341,0)
(302,401,0)
(24,335,0)
(280,436,0)
(259,38,0)
(195,341,0)
(76,225,0)
(507,261,0)
(347,324,0)
(334,177,0)
(399,226,1)
(282,319,1)
(27,253,1)
(187,173,1)
(440,512,1)
(241,16,1)
(236,86,1)
(452,229,1)
(228,303,1)
(509,136,1)
(182,396,1)
(186,58,1)
(70,65,1)
(358,143,1)
(488,276,1)
(126,401,1)
(336,372,1)
(44,183,1)
(64,142,1)
(36,169,1)
(169,70,1)
(220,182,1)
(19,430,1)
(276,187,1)
(493,494,1)
(448,401,1)
(28,248,1)
(112,148,1)
(208,290,1)
(192,113,1)
(509,447,1)
(450,256,1)
(178,231,1)
(179,127,1)
(395,144,1)
(295,401,1)
(486,501,1)
(23,234,1)
(141,160,1)
(20,19,1)
(462,5,1)
(337,375,1)
(477,188,1)
(94,37,1)
(331,371,1)
(288,128,1)
(14,187,1)
(72,276,1)
(500,180,1)
(472,39,1)
(20,362,1)
(121,117,1)
(286,447,1)
(110,432,1)
(92,459,1)
(398,421,1)
(405,141,1)
(248,19,1)
(58,181,1)
(24,335,1)
(223,132,1)
(139,275,1)
(248,187,1)
(286,300,1)
(2,404,1)
(0,165,1)
(239,496,1)
(455,515,1)
(126,307,1)
(389,440,1)
(254,228,1)
(470,487,1)
(261,507,1)
(240,86,1)
(91,503,1)
(377,55,1)
(293,495,1)
(106,369,1)
(237,452,1)
(256,113,1)
(341,324,1)
(271,96,1)
(240,128,1)
(243,162,1)
(162,174,1)
(498,35,1)
(397,310,1)
(103,235,1)
(301,423,1)
(281,15,1)
(242,267,1)
(33,502,1)
(473,140,1)
(317,386,1)
(42,307,1)
(126,194,1)
(295,437,1)
(337,19,1)
(195,341,1)
(275,167,1)
(276,341,1)
(113,382,1)
(12,187,1)
(371,220,1)
(421,304,1)
(515,14,1)
(288,266,1)
(316,13,1)
(302,437,1)
(138,314,1)
(14,0,1)
(127,448,1)
(253,516,1)
(54,380,1)
(367,435,1)
(132,453,1)
(373,48,1)
(271,215,1)
(235,499,1)
(283,445,1)
(327,122,1)
(230,442,1)
(87,8,1)
(235,332,1)
(143,372,1)
(240,408,1)
(74,417,1)
(221,504,1)
(20,266,1)
(430,510,1)
(101,285,1)
(366,201,1)
(317,401,1)
(423,66,1)
(65,2,1)
(25,468,1)
(1,314,1)
(204,426,1)
(276,19,1)
(238,84,1)
(144,126,1)
(400,152,1)
(504,351,1)
(212,106,1)
(284,42,1)
(448,80,1)
(442,32,1)
(93,197,1)
(505,402,1)
(40,419,1)
(316,443,1)
(240,375,1)
(51,119,1)
(217,478,1)
(217,139,1)
(428,162,1)
(299,504,1)
(288,375,1)
(288,342,1)
(302,401,1)
(178,146,1)
(464,99,1)
(77,305,1)
(383,366,1)
(411,424,1)
(246,3,1)
(302,307,1)
(172,46,1)
(177,339,1)
(194,262,1)
(369,250,1)
(357,243,1)
(176,358,1)
(16,261,1)
(268,59,1)
(217,203,1)
(310,208,1)
(435,179,1)
(248,261,1)
(86,225,1)
(162,318,1)
(412,427,1)
(83,396,1)
(477,277,1)
(516,164,1)
(60,509,1)
(231,345,1)
(116,137,1)
(213,399,1)
(243,175,1)
(201,129,1)
(192,462,1)
(483,278,1)
(123,446,1)
(122,1,1)
(496,438,1)
(418,444,1)
(451,416,1)
(240,341,1)
(184,267,1)
(492,479,1)
(12,224,1)
(465,391,1)
(138,425,1)
(412,297,1)
(59,23,1)
(348,336,1)
(384,260,1)
(247,236,1)
(234,299,1)
(389,344,1)
(41,178,1)
(42,420,1)
(42,401,1)
(155,75,1)
(318,486,1)
(337,341,1)
(461,171,1)
(59,238,1)
(276,481,1)
(217,450,1)
(143,266,1)
(181,456,1)
(372,356,1)
(140,71,1)
(142,453,1)
(256,311,1)
(35,247,1)
(507,287,1)
(191,463,1)
(192,492,1)
(192,453,1)
(54,387,1)
(294,21,1)
(192,283,1)
(248,376,1)
(216,397,1)
(1,246,1)
(432,147,1)
(78,53,1)
(172,349,1)
(32,34,1)
(12,0,1)
(317,113,1)
(424,50,1)
(288,408,1)
(209,118,1)
(445,9,1)
(352,159,1)
(94,266,1)
(248,0,1)
(3,470,1)
(290,242,1)
(302,113,1)
(165,467,1)
(300,17,1)
(359,490,1)
(49,514,1)
(192,437,1)
(399,46,1)
(391,302,1)
(332,447,1)
(56,52,1)
(354,498,1)
(35,86,1)
(303,344,1)
(38,157,1)
(397,511,1)
(343,278,1)
(464,429,1)
(276,433,1)
(14,497,1)
(346,308,1)
(319,314,1)
(444,95,1)
(81,192,1)
(502,131,1)
(295,283,1)
(400,511,1)
(382,458,1)
(33,131,1)
(415,444,1)
(433,81,1)
(233,389,1)
(288,86,1)
(8,455,1)
(196,127,1)
(409,7,1)
(20,408,1)
(37,473,1)
(371,284,1)
(148,508,1)
(402,51,1)
(350,410,1)
(463,156,1)
(125,254,1)
(391,240,1)
(53,288,1)
(447,121,1)
(185,307,1)
(317,283,1)
(180,172,1)
(332,398,1)
(107,209,1)
(68,359,1)
(125,344,1)
(359,111,1)
(94,128,1)
(160,348,1)
(118,355,1)
(372,408,1)
(14,294,1)
(258,341,1)
(327,1,1)
(406,207,1)
(364,25,1)
(419,128,1)
(332,421,1)
(227,488,1)
(104,20,1)
(55,317,1)
(240,266,1)
(12,288,1)
(171,286,1)
(197,405,1)
(168,150,1)
(138,11,1)
(256,283,1)
(19,497,1)
(267,400,1)
(211,283,1)
(240,19,1)
(337,272,1)
(360,241,1)
(308,47,1)
(94,19,1)
(114,353,1)
(401,464,1)
(414,24,1)
(510,483,1)
(71,55,1)
(156,140,1)
(417,346,1)
(179,163,1)
(42,283,1)
(420,431,1)
(192,191,1)
(458,91,1)
(256,401,1)
(25,177,1)
(267,305,1)
(376,449,1)
(276,128,1)
(459,289,1)
(324,60,1)
(321,115,1)
(426,108,1)
(168,454,1)
(141,424,1)
(211,307,1)
(375,212,1)
(342,41,1)
(136,18,1)
(328,282,1)
(370,103,1)
(70,2,1)
(278,116,1)
(418,415,1)
(322,216,1)
(120,354,1)
(495,77,1)
(67,202,1)
(305,101,1)
(503,258,1)
(38,284,1)
(175,232,1)
(337,266,1)
(145,55,1)
(395,110,1)
(288,341,1)
(279,92,1)
(373,340,1)
(117,410,1)
(159,299,1)
(71,64,1)
(98,74,1)
(219,38,1)
(319,330,1)
(217,389,1)
(501,414,1)
(202,493,1)
(414,412,1)
(131,114,1)
(448,113,1)
(353,34,1)
(60,57,1)
(26,376,1)
(203,211,1)
(96,424,1)
(256,307,1)
(119,94,1)
(93,491,1)
(437,383,1)
(192,401,1)
(108,379,1)
(397,208,1)
(276,30,1)
(285,511,1)
(286,509,1)
(448,283,1)
(14,481,1)
(255,98,1)
(275,511,1)
(240,72,1)
(239,509,1)
(289,462,1)
(118,486,1)
(211,113,1)
(133,439,1)
(175,428,1)
(276,266,1)
(251,68,1)
(380,251,1)
(340,230,1)
(438,509,1)
(330,172,1)
(30,67,1)
(494,184,1)
(511,268,1)
(126,113,1)
(276,86,1)
(252,240,1)
(31,410,1)
(167,409,1)
(337,408,1)
(467,102,1)
(419,35,1)
(217,210,1)
(240,30,1)
(238,327,1)
(10,107,1)
(408,271,1)
(307,54,1)
(403,378,1)
(394,257,1)
(226,53,1)
(349,125,1)
(345,377,1)
(188,370,1)
(443,390,1)
(162,335,1)
(489,426,1)
(363,367,1)
(250,321,1)
(497,373,1)
(276,375,1)
(84,327,1)
(444,190,1)
(355,357,1)
(287,213,1)
(94,341,1)
(393,397,1)
(337,30,1)
(164,395,1)
(355,243,1)
(441,155,1)
(20,30,1)
(467,301,1)
(276,288,1)
(248,483,1)
(458,482,1)
(234,418,1)
(134,408,1)
(280,28,1)
(268,470,1)
(508,239,1)
(207,411,1)
(335,477,1)
(218,118,1)
(350,313,1)
(448,465,1)
(95,352,1)
(204,489,1)
(155,30,1)
(24,249,1)
(396,219,1)
(256,437,1)
(211,437,1)
(412,410,1)
(225,76,1)
(302,252,1)
(303,237,1)
(449,135,1)
(390,109,1)
(337,128,1)
(295,113,1)
(410,138,1)
(66,26,1)
(351,154,1)
(51,191,1)
(154,314,1)
(67,422,1)
(504,154,1)
(350,49,1)
(173,168,1)
(299,221,1)
(45,392,1)
(311,27,1)
(324,347,1)
(476,511,1)
(157,259,1)
(211,123,1)
(317,437,1)
(188,235,1)
(200,403,1)
(126,283,1)
(115,441,1)
(276,408,1)
(262,363,1)
(106,250,1)
(34,371,1)
(39,295,1)
(145,223,1)
(89,337,1)
(152,293,1)
(94,408,1)
(479,505,1)
(94,375,1)
(379,83,1)
(302,283,1)
(78,280,1)
(146,231,1)
(22,144,1)
(356,134,1)
(512,89,1)
(25,447,1)
(212,214,1)
(470,314,1)
(173,274,1)
(258,44,1)
(382,484,1)
(17,218,1)
(102,301,1)
(380,359,1)
(42,113,1)
(468,177,1)
(439,33,1)
(339,31,1)
(386,279,1)
(20,86,1)
(248,481,1)
(210,461,1)
(195,451,1)
(431,56,1)
(429,424,1)
(478,476,1)
(416,341,1)
(126,437,1)
(31,10,1)
(514,286,1)
(259,284,1)
(100,296,1)
(297,24,1)
(147,22,1)
(456,255,1)
(443,109,1)
(20,375,1)
(404,200,1)
(378,238,1)
(52,399,1)
(260,112,1)
(50,58,1)
(476,45,1)
(337,513,1)
(266,93,1)
(75,269,1)
(17,239,1)
(332,509,1)
(175,410,1)
(192,307,1)
(440,472,1)
(129,375,1)
(440,185,1)
(79,264,1)
(217,149,1)
(192,119,1)
(239,447,1)
(200,314,1)
(394,204,1)
(481,394,1)
(135,33,1)
(216,393,1)
(487,100,1)
(249,335,1)
(288,30,1)
(14,288,1)
(448,307,1)
(11,328,1)
(111,12,1)
(396,38,1)
(149,512,1)
(91,193,1)
(94,30,1)
(60,350,1)
(349,303,1)
(509,509,1)
(296,282,1)
(211,401,1)
(109,120,1)
(165,166,1)
(446,360,1)
(94,86,1)
(61,133,1)
(395,432,1)
(260,410,1)
(50,186,1)
(288,19,1)
(15,500,1)
(317,307,1)
(264,145,1)
(392,98,1)
(142,79,1)
(224,227,1)
(12,481,1)
(154,36,1)
(42,437,1)
(337,86,1)
(276,497,1)
(137,497,1)
(74,346,1)
(486,414,1)
(183,62,1)
(24,244,1)
(18,364,1)
(96,406,1)
(71,142,1)
(20,341,1)
(62,195,1)
(269,30,1)
(25,509,1)
(448,437,1)
(129,155,1)
(5,233,1)
(150,454,1)
(23,70,1)
(454,61,1)
(457,91,1)
(60,447,1)
(131,284,1)
(192,455,1)
(421,384,1)
(7,322,1)
(20,128,1)
(453,87,1)
(20,196,1)
(140,145,1)
(197,141,1)
(483,343,1)
(178,55,1)
(474,74,1)
(163,104,1)
(9,40,1)
(98,474,1)
(389,125,1)
(272,179,1)
(21,78,1)
(57,350,1)
(438,447,1)
(482,457,1)
(225,281,1)
(429,176,1)
(95,314,1)
(128,316,1)
(190,95,1)
(2,200,1)
(47,7,1)
(34,331,1)
(12,497,1)
(276,0,1)
(177,334,1)
(178,231,2)
(114,34,2)
(21,261,2)
(51,53,2)
(192,437,2)
(337,266,2)
(350,286,2)
(238,327,2)
(14,187,2)
(68,276,2)
(288,389,2)
(31,118,2)
(8,399,2)
(240,128,2)
(394,257,2)
(86,225,2)
(20,362,2)
(119,140,2)
(87,399,2)
(378,282,2)
(337,408,2)
(391,240,2)
(160,372,2)
(477,188,2)
(252,276,2)
(177,118,2)
(416,286,2)
(302,437,2)
(301,423,2)
(94,128,2)
(500,172,2)
(192,453,2)
(138,425,2)
(109,35,2)
(147,179,2)
(211,283,2)
(177,339,2)
(451,286,2)
(235,332,2)
(389,344,2)
(212,214,2)
(373,34,2)
(392,98,2)
(503,286,2)
(316,443,2)
(288,266,2)
(435,179,2)
(140,53,2)
(389,98,2)
(438,118,2)
(177,334,2)
(141,424,2)
(71,55,2)
(2,282,2)
(339,31,2)
(271,96,2)
(227,276,2)
(350,410,2)
(396,399,2)
(95,282,2)
(109,120,2)
(102,376,2)
(476,511,2)
(383,267,2)
(44,286,2)
(42,307,2)
(240,19,2)
(12,481,2)
(276,288,2)
(249,239,2)
(307,54,2)
(89,179,2)
(465,276,2)
(440,286,2)
(14,261,2)
(444,282,2)
(70,2,2)
(332,421,2)
(71,142,2)
(294,53,2)
(20,341,2)
(35,86,2)
(288,408,2)
(75,267,2)
(448,276,2)
(332,509,2)
(335,239,2)
(0,376,2)
(197,372,2)
(276,266,2)
(200,314,2)
(510,483,2)
(324,286,2)
(319,314,2)
(171,286,2)
(169,282,2)
(175,486,2)
(20,30,2)
(359,111,2)
(23,234,2)
(59,238,2)
(496,118,2)
(145,53,2)
(417,7,2)
(212,106,2)
(308,7,2)
(45,98,2)
(261,399,2)
(67,422,2)
(276,53,2)
(234,299,2)
(383,366,2)
(380,359,2)
(195,286,2)
(122,282,2)
(316,35,2)
(295,267,2)
(192,307,2)
(239,118,2)
(223,399,2)
(86,172,2)
(366,267,2)
(459,389,2)
(39,286,2)
(404,282,2)
(14,497,2)
(19,483,2)
(262,179,2)
(317,283,2)
(186,98,2)
(15,172,2)
(428,486,2)
(37,140,2)
(360,261,2)
(281,172,2)
(67,202,2)
(150,33,2)
(34,371,2)
(192,261,2)
(440,267,2)
(276,128,2)
(372,98,2)
(474,7,2)
(94,341,2)
(1,314,2)
(87,261,2)
(192,53,2)
(336,372,2)
(448,113,2)
(54,387,2)
(327,282,2)
(14,0,2)
(21,399,2)
(145,261,2)
(116,34,2)
(18,118,2)
(179,163,2)
(139,7,2)
(187,33,2)
(288,19,2)
(455,261,2)
(98,74,2)
(42,437,2)
(21,53,2)
(301,376,2)
(367,179,2)
(93,491,2)
(515,14,2)
(93,197,2)
(276,341,2)
(118,355,2)
(225,172,2)
(106,250,2)
(328,282,2)
(337,128,2)
(498,35,2)
(514,286,2)
(492,399,2)
(94,375,2)
(431,399,2)
(343,34,2)
(483,278,2)
(456,98,2)
(128,35,2)
(210,286,2)
(421,384,2)
(173,168,2)
(12,187,2)
(83,396,2)
(221,282,2)
(140,145,2)
(411,98,2)
(454,61,2)
(373,340,2)
(20,266,2)
(127,448,2)
(255,98,2)
(228,303,2)
(487,282,2)
(178,55,2)
(415,282,2)
(310,267,2)
(113,286,2)
(240,341,2)
(179,127,2)
(217,210,2)
(445,172,2)
(470,282,2)
(91,286,2)
(11,282,2)
(91,193,2)
(289,389,2)
(110,179,2)
(279,389,2)
(71,145,2)
(516,179,2)
(96,98,2)
(440,512,2)
(284,42,2)
(253,179,2)
(5,389,2)
(433,53,2)
(168,33,2)
(290,267,2)
(213,399,2)
(402,399,2)
(121,282,2)
(225,281,2)
(389,512,2)
(331,396,2)
(132,399,2)
(78,399,2)
(268,59,2)
(341,324,2)
(59,23,2)
(358,98,2)
(240,86,2)
(464,429,2)
(364,25,2)
(118,486,2)
(486,414,2)
(70,282,2)
(351,282,2)
(240,408,2)
(24,335,2)
(31,410,2)
(77,305,2)
(440,172,2)
(96,424,2)
(149,512,2)
(60,350,2)
(418,444,2)
(12,0,2)
(60,286,2)
(194,179,2)
(437,383,2)
(234,282,2)
(142,145,2)
(162,174,2)
(28,399,2)
(409,7,2)
(445,9,2)
(53,389,2)
(14,288,2)
(426,108,2)
(248,399,2)
(200,282,2)
(376,33,2)
(463,140,2)
(327,1,2)
(196,127,2)
(173,33,2)
(497,373,2)
(141,372,2)
(258,341,2)
(8,53,2)
(278,34,2)
(33,131,2)
(286,282,2)
(93,372,2)
(74,7,2)
(275,511,2)
(384,239,2)
(492,53,2)
(202,493,2)
(129,267,2)
(12,497,2)
(458,91,2)
(236,172,2)
(38,284,2)
(340,230,2)
(337,341,2)
(502,34,2)
(61,33,2)
(423,376,2)
(38,399,2)
(284,399,2)
(283,172,2)
(414,239,2)
(3,282,2)
(288,86,2)
(318,486,2)
(20,128,2)
(494,267,2)
(294,399,2)
(317,401,2)
(163,127,2)
(369,155,2)
(389,267,2)
(267,305,2)
(143,98,2)
(78,261,2)
(1,282,2)
(482,286,2)
(224,276,2)
(332,239,2)
(128,316,2)
(94,30,2)
(56,399,2)
(302,276,2)
(414,412,2)
(225,76,2)
(352,282,2)
(240,276,2)
(455,53,2)
(295,98,2)
(59,282,2)
(94,266,2)
(40,172,2)
(350,313,2)
(111,12,2)
(26,376,2)
(256,401,2)
(246,282,2)
(134,98,2)
(165,467,2)
(192,283,2)
(202,267,2)
(103,239,2)
(396,38,2)
(17,282,2)
(464,99,2)
(389,125,2)
(324,60,2)
(156,140,2)
(341,286,2)
(359,276,2)
(478,98,2)
(505,53,2)
(51,261,2)
(104,20,2)
(302,307,2)
(462,389,2)
(448,307,2)
(136,118,2)
(440,276,2)
(303,344,2)
(111,276,2)
(181,98,2)
(183,286,2)
(179,276,2)
(444,95,2)
(243,162,2)
(14,53,2)
(375,212,2)
(515,53,2)
(126,437,2)
(282,319,2)
(400,152,2)
(140,71,2)
(260,239,2)
(472,286,2)
(209,118,2)
(421,239,2)
(107,118,2)
(235,239,2)
(295,172,2)
(41,389,2)
(64,145,2)
(157,399,2)
(144,179,2)
(51,399,2)
(20,127,2)
(79,145,2)
(211,261,2)
(155,267,2)
(261,507,2)
(486,239,2)
(60,509,2)
(91,503,2)
(337,375,2)
(412,410,2)
(448,401,2)
(391,302,2)
(168,454,2)
(208,267,2)
(239,509,2)
(247,172,2)
(319,172,2)
(126,194,2)
(240,375,2)
(399,46,2)
(497,34,2)
(256,113,2)
(455,399,2)
(187,173,2)
(438,282,2)
(243,175,2)
(397,511,2)
(65,282,2)
(233,389,2)
(20,375,2)
(239,447,2)
(8,261,2)
(429,98,2)
(217,139,2)
(509,118,2)
(276,399,2)
(276,19,2)
(258,286,2)
(142,453,2)
(20,408,2)
(440,98,2)
(453,399,2)
(424,50,2)
(36,282,2)
(185,276,2)
(433,399,2)
(382,286,2)
(39,98,2)
(42,401,2)
(340,34,2)
(354,35,2)
(240,30,2)
(429,424,2)
(505,261,2)
(398,239,2)
(135,33,2)
(118,239,2)
(119,94,2)
(223,261,2)
(421,304,2)
(394,396,2)
(259,399,2)
(285,282,2)
(493,267,2)
(470,314,2)
(297,239,2)
(35,172,2)
(501,239,2)
(25,177,2)
(276,0,2)
(504,282,2)
(248,261,2)
(115,155,2)
(235,499,2)
(288,341,2)
(377,389,2)
(371,284,2)
(220,396,2)
(503,258,2)
(276,408,2)
(472,98,2)
(211,401,2)
(288,375,2)
(370,239,2)
(89,337,2)
(127,276,2)
(515,261,2)
(397,267,2)
(192,119,2)
(163,104,2)
(455,515,2)
(449,33,2)
(132,53,2)
(104,127,2)
(138,282,2)
(242,267,2)
(146,389,2)
(476,98,2)
(30,267,2)
(332,447,2)
(62,286,2)
(450,179,2)
(178,389,2)
(256,307,2)
(302,113,2)
(144,126,2)
(192,399,2)
(125,344,2)
(137,34,2)
(393,397,2)
(0,165,2)
(50,98,2)
(408,271,2)
(27,179,2)
(98,7,2)
(182,396,2)
(321,155,2)
(299,504,2)
(426,396,2)
(424,98,2)
(164,179,2)
(483,34,2)
(272,179,2)
(412,239,2)
(316,13,2)
(294,261,2)
(33,34,2)
(382,484,2)
(307,276,2)
(339,118,2)
(359,490,2)
(268,470,2)
(508,239,2)
(100,282,2)
(288,128,2)
(477,239,2)
(410,138,2)
(266,372,2)
(162,486,2)
(441,155,2)
(132,261,2)
(133,33,2)
(195,341,2)
(505,399,2)
(223,53,2)
(276,481,2)
(216,267,2)
(400,511,2)
(271,98,2)
(140,399,2)
(317,389,2)
(299,282,2)
(348,372,2)
(283,445,2)
(267,282,2)
(357,486,2)
(375,155,2)
(406,98,2)
(140,261,2)
(410,282,2)
(192,455,2)
(219,399,2)
(512,89,2)
(57,286,2)
(353,34,2)
(14,481,2)
(32,34,2)
(264,145,2)
(276,187,2)
(303,237,2)
(81,261,2)
(180,172,2)
(154,314,2)
(94,140,2)
(379,396,2)
(12,288,2)
(260,410,2)
(269,267,2)
(24,244,2)
(191,140,2)
(126,307,2)
(204,426,2)
(243,486,2)
(443,35,2)
(159,282,2)
(419,172,2)
(126,113,2)
(391,276,2)
(467,301,2)
(509,509,2)
(495,305,2)
(145,55,2)
(230,34,2)
(117,282,2)
(401,464,2)
(492,261,2)
(9,172,2)
(364,118,2)
(286,447,2)
(207,98,2)
(267,400,2)
(78,53,2)
(287,399,2)
(126,283,2)
(175,410,2)
(481,394,2)
(84,282,2)
(453,53,2)
(453,261,2)
(256,437,2)
(10,118,2)
(397,208,2)
(275,7,2)
(184,267,2)
(131,34,2)
(251,276,2)
(120,35,2)
(418,282,2)
(281,15,2)
(94,408,2)
(16,261,2)
(231,389,2)
(95,314,2)
(399,53,2)
(276,30,2)
(55,389,2)
(240,266,2)
(12,276,2)
(24,239,2)
(401,98,2)
(101,282,2)
(123,261,2)
(504,154,2)
(512,179,2)
(489,396,2)
(515,399,2)
(405,372,2)
(430,483,2)
(60,447,2)
(403,282,2)
(324,347,2)
(412,427,2)
(138,314,2)
(192,462,2)
(256,283,2)
(19,497,2)
(420,399,2)
(330,172,2)
(394,204,2)
(87,53,2)
(335,477,2)
(461,286,2)
(54,380,2)
(271,215,2)
(305,282,2)
(131,284,2)
(302,401,2)
(113,382,2)
(293,305,2)
(457,286,2)
(254,303,2)
(442,34,2)
(395,179,2)
(7,267,2)
(25,447,2)
(337,513,2)
(280,399,2)
(165,376,2)
(400,305,2)
(145,399,2)
(94,86,2)
(67,267,2)
(148,239,2)
(395,144,2)
(342,389,2)
(42,283,2)
(317,386,2)
(386,389,2)
(317,113,2)
(42,399,2)
(282,172,2)
(371,396,2)
(162,335,2)
(458,286,2)
(384,260,2)
(443,109,2)
(28,261,2)
(39,267,2)
(373,48,2)
(238,282,2)
(155,30,2)
(217,478,2)
(346,7,2)
(52,399,2)
(42,113,2)
(188,239,2)
(496,282,2)
(479,53,2)
(25,509,2)
(106,155,2)
(54,276,2)
(382,458,2)
(511,282,2)
(226,53,2)
(280,261,2)
(192,401,2)
(14,399,2)
(337,19,2)
(241,261,2)
(203,261,2)
(511,268,2)
(58,98,2)
(380,276,2)
(288,30,2)
(167,7,2)
(211,437,2)
(337,179,2)
(173,274,2)
(276,261,2)
(337,30,2)
(39,172,2)
(20,19,2)
(473,140,2)
(454,33,2)
(448,437,2)
(414,24,2)
(345,389,2)
(468,118,2)
(108,396,2)
(402,53,2)
(268,282,2)
(72,276,2)
(363,179,2)
(250,321,2)
(355,243,2)
(311,179,2)
(190,282,2)
(55,317,2)
(356,98,2)
(286,509,2)
(30,67,2)
(20,86,2)
(256,179,2)
(488,276,2)
(250,155,2)
(464,98,2)
(23,282,2)
(204,396,2)
(239,282,2)
(408,98,2)
(432,179,2)
(433,261,2)
(467,376,2)
(355,486,2)
(389,172,2)
(126,179,2)
(276,375,2)
(211,113,2)
(509,447,2)
(66,376,2)
(188,235,2)
(446,261,2)
(218,118,2)
(448,80,2)
(402,261,2)
(322,267,2)
(390,35,2)
(507,399,2)
(276,497,2)
(211,307,2)
(112,239,2)
(447,282,2)
(81,399,2)
(92,389,2)
(192,113,2)
(276,86,2)
(125,303,2)
(389,276,2)
(266,93,2)
(472,267,2)
(176,98,2)
(395,432,2)
(175,232,2)
(472,172,2)
(481,396,2)
(34,396,2)
(389,286,2)
(23,70,2)
(448,283,2)
(94,19,2)
(201,267,2)
(337,86,2)
(439,33,2)
(479,399,2)
(477,277,2)
(152,305,2)
(295,286,2)
(2,200,2)
(197,141,2)
(22,179,2)
(49,286,2)
(126,401,2)
(479,261,2)
(81,53,2)
(302,283,2)
(47,7,2)
(437,267,2)
(212,155,2)
(296,282,2)
(372,408,2)
(154,282,2)
(25,118,2)
(234,418,2)
(192,191,2)
(165,166,2)
(300,282,2)
(50,58,2)
(74,346,2)
(172,46,2)
(317,437,2)
(317,307,2)
-----------------------------------
(0,actframe = (struct i386_frame *)
(1,addr >> 4)
(2,(addr >> 8)
(3,addr)
(4,)
(5,NULL)
(6,callpc)
(7,p == NULL)
(8,narg)
(9,&ddb_regs)
(10,f_frame)
(11,addr)
(12,actframe->f_retaddr)
(13,struct i386_frame *)
(14,actframe->f_arg0)
(15,&ddb_regs)
(16,name)
(17,i)
(18,i)
(19,frame = actframe)
(20,(int)
(21,actframe)
(22,sym)
(23,((addr >> 8)
(24,(char *)
(25,(char *)
(26,actframe)
(27,0)
(28,FALSE)
(29,offset)
(30,frame = (struct i386_frame *)
(31,frame->f_frame)
(32,actframe)
(33,(instr & 0x000000ff)
(34,(instr & 0x0000ffff)
(35,frame == NULL)
(36,12)
(37,frame)
(38,instr & 0x00ffffff)
(39,TRUE)
(40,ddb_regs)
(41,actframe)
(42,db_get_value(callpc, 4, FALSE)
(43,actframe)
(44,f_retaddr)
(45,pid)
(46,boolean_t have_addr)
(47,p)
(48,struct i386_frame *)
(49,frame)
(50,p->p_thread->td_pcb)
(51,name)
(52,instr)
(53,first)
(54,(db_addr_t)
(55,sym = db_search_symbol(callpc, DB_STGY_ANY, &offset)
(56,callpc)
(57,i)
(58,p->p_thread)
(59,((addr >> 4)
(60,(char *)
(61,&ddb_regs)
(62,callpc)
(63,check)
(64,argnames)
(65,100)
(66,ddb_regs)
(67,(struct i386_frame *)
(68,4)
(69,for (i = 0; i < 4096; i += 4)
(70,((addr >> 8)
(71,db_sym_numargs(sym, &narg, argnames)
(72,frame)
(73,if (!have_addr)
(74,p->p_flag & P_INMEM)
(75,NULL)
(76,struct i386_frame *)
(77,pid)
(78,argp)
(79,narg)
(80,int)
(81,actframe)
(82,)
(83,actframe)
(84,10)
(85,argp)
(86,frame = (struct i386_frame *)
(87,MAXNARG)
(88,pid)
(89,INKERNEL((int)
(90,if (INKERNEL((int)
(91,(int)
(92,DB_STGY_ANY)
(93,(struct i386_frame *)
(94,db_numargs(frame)
(95,addr >> 16)
(96,pcb->pcb_ebp)
(97,)
(98,(p->p_flag & P_INMEM)
(99,db_addr_t)
(100,addr)
(101,NULL)
(102,4)
(103,4)
(104,INKERNEL((int)
(105,i)
(106,SP_REGS(&ddb_regs)
(107,frame)
(108,&ddb_regs)
(109,SP_REGS(&ddb_regs)
(110,NULL)
(111,&actframe->f_retaddr)
(112,f_frame)
(113,callpc = (db_addr_t)
(114,0x000000ff)
(115,ddb_regs)
(116,tf_ebp)
(117,i)
(118,(char *)
(119,narg = db_numargs(frame)
(120,&ddb_regs)
(121,0)
(122,16)
(123,callpc)
(124,if (actframe != frame)
(125,count = 1024)
(126,db_search_symbol(callpc, DB_STGY_ANY, &offset)
(127,INKERNEL((int)
(128,frame = (struct i386_frame *)
(129,callpc)
(130,)
(131,instr & 0x000000ff)
(132,sym)
(133,ddb_regs)
(134,frame)
(135,offset)
(136,4)
(137,ddb_regs)
(138,(struct i386_frame *)
(139,return;)
(140,sym != NULL && db_sym_numargs(sym, &narg, argnames)
(141,pcb->pcb_esp)
(142,&narg)
(143,callpc)
(144,sym = db_search_symbol(callpc, DB_STGY_ANY, &offset)
(145,sym != NULL)
(146,NULL)
(147,name)
(148,frame)
(149,break;)
(150,4)
(151,if ((curproc != NULL)
(152,curproc->p_pid)
(153,if (sym != NULL && db_sym_numargs(sym, &narg, argnames)
(154,addr >> 12)
(155,frame == NULL)
(156,argnp)
(157,0x00ffffff)
(158,instr)
(159,addr)
(160,pcb_esp)
(161,if (count == -1)
(162,(char *)
(163,!INKERNEL((int)
(164,name)
(165,(struct i386_frame *)
(166,struct i386_frame *)
(167,pid)
(168,SP_REGS(&ddb_regs)
(169,addr)
(170,)
(171,"Unable to find anything that looks like a stack frame\\n")
(172,!have_addr)
(173,(struct i386_frame *)
(174,char *)
(175,(char *)
(176,pcb_eip)
(177,(char *)
(178,db_symbol_values(sym, &name, NULL)
(179,INKERNEL((int)
(180,frame)
(181,p_thread)
(182,instr)
(183,frame)
(184,frame)
(185,continue;)
(186,td_pcb)
(187,actframe = (struct i386_frame *)
(188,db_get_value((int)
(189,sym)
(190,16)
(191,argnp = argnames)
(192,db_print_stack_entry(name, narg, argnp, argp, callpc)
(193,int)
(194,&offset)
(195,db_printf("Trace beginning at frame %p\\n", frame)
(196,frame)
(197,pcb->pcb_esp - 4)
(198,frame)
(199,)
(200,addr >> 8)
(201,ddb_regs)
(202,BP_REGS(&ddb_regs)
(203,break;)
(204,SP_REGS(&ddb_regs)
(205,)
(206,)
(207,pcb)
(208,p->p_pid)
(209,"%p does not look like a stack frame, skipping\\n")
(210,return;)
(211,db_print_stack_entry(name, 0, 0, 0, callpc)
(212,(struct i386_frame *)
(213,name)
(214,struct i386_frame *)
(215,struct i386_frame *)
(216,p)
(217,RET)
(218,break;)
(219,0x00e58955)
(220,0x0000ffff)
(221,1000)
(222,p)
(223,NULL)
(224,f_retaddr)
(225,(struct i386_frame *)
(226,have_addr)
(227,actframe)
(228,count)
(229,count)
(230,&ddb_regs)
(231,&name)
(232,char *)
(233,argnp)
(234,((addr >> 12)
(235,(int)
(236,frame)
(237,-1)
(238,((addr >> 4)
(239,i < 4096)
(240,&frame)
(241,0)
(242,p)
(243,(char *)
(244,char *)
(245,first)
(246,4)
(247,NULL)
(248,first)
(249,check)
(250,SP_REGS(&ddb_regs)
(251,FALSE)
(252,callpc)
(253,0)
(254,1024)
(255,pcb)
(256,db_print_stack_entry(name, 0, 0, 0, callpc)
(257,struct i386_frame *)
(258,frame->f_retaddr)
(259,instr)
(260,frame->f_frame)
(261,!strcmp(name, "fork_trampoline")
(262,offset)
(263,)
(264,sym)
(265,if (frame == NULL)
(266,frame = (struct i386_frame *)
(267,(curproc != NULL)
(268,(addr % 16)
(269,frame)
(270,)
(271,(struct i386_frame *)
(272,frame)
(273,)
(274,struct i386_frame *)
(275,db_printf("pid %d not found\\n", pid)
(276,actframe != frame)
(277,struct i386_frame *)
(278,ddb_regs.tf_ebp)
(279,offset)
(280,first = FALSE)
(281,BP_REGS(&ddb_regs)
(282,!INKERNEL(addr)
(283,callpc = PC_REGS(&ddb_regs)
(284,instr = db_get_value(callpc, 4, FALSE)
(285,curproc)
(286,i == 4096)
(287,"fork_trampoline")
(288,actframe = frame)
(289,sym)
(290,p_pid)
(291,)
(292,if (!have_addr)
(293,p_pid)
(294,f_arg0)
(295,first)
(296,pid)
(297,frame)
(298,if ((instr & 0x00ffffff)
(299,((addr >> 12)
(300,4096)
(301,SP_REGS(&ddb_regs)
(302,&callpc)
(303,count == -1)
(304,char *)
(305,curproc != NULL)
(306,if (frame == NULL)
(307,callpc = (db_addr_t)
(308,p_flag)
(309,if ((p->p_flag & P_INMEM)
(310,pid)
(311,callpc)
(312,)
(313,char *)
(314,db_expr_t addr)
(315,argnp)
(316,(struct i386_frame *)
(317,db_search_symbol(callpc, DB_STGY_ANY, &offset)
(318,check)
(319,INKERNEL(addr)
(320,pcb)
(321,&ddb_regs)
(322,NULL)
(323,name)
(324,(void *)
(325,if (first)
(326,if (!INKERNEL((int)
(327,(addr >> 4)
(328,frame)
(329,)
(330,addr)
(331,0x0000e589)
(332,(char *)
(333,)
(334,char *)
(335,check = (struct i386_frame *)
(336,frame)
(337,(int)
(338,)
(339,&frame->f_frame)
(340,SP_REGS(&ddb_regs)
(341,frame = (void *)
(342,frame)
(343,0)
(344,db_expr_t count)
(345,name)
(346,p->p_flag)
(347,void *)
(348,pcb)
(349,have_addr)
(350,(char *)
(351,16)
(352,16)
(353,instr)
(354,ddb_regs)
(355,(char *)
(356,NULL)
(357,4096)
(358,pcb)
(359,(int)
(360,0)
(361,if (frame == NULL)
(362,int)
(363,DB_STGY_ANY)
(364,db_printf("%p does not look like a stack frame, skipping\\n", (char *)
(365,if (ddb_regs.tf_ebp == 0)
(366,&ddb_regs)
(367,callpc)
(368,argnames)
(369,4)
(370,FALSE)
(371,instr & 0x0000ffff)
(372,frame == NULL)
(373,(struct i386_frame *)
(374,)
(375,frame = (struct i386_frame *)
(376,offset == 0)
(377,sym)
(378,addr)
(379,ddb_regs)
(380,db_get_value((int)
(381,narg)
(382,(db_addr_t)
(383,PC_REGS(&ddb_regs)
(384,&frame->f_frame)
(385,while (count--)
(386,&offset)
(387,db_addr_t)
(388,)
(389,count--)
(390,4)
(391,db_nextframe(&frame, &callpc)
(392,"pid %d swapped out\\n")
(393,break;)
(394,(struct i386_frame *)
(395,db_symbol_values(sym, &name, NULL)
(396,(instr & 0x00ffffff)
(397,p->p_pid == pid)
(398,i)
(399,!have_addr)
(400,pid == curproc->p_pid)
(401,callpc = (db_addr_t)
(402,narg)
(403,8)
(404,16)
(405,4)
(406,pcb_ebp)
(407,)
(408,frame = (struct i386_frame *)
(409,"pid %d not found\\n")
(410,frame = (struct i386_frame *)
(411,frame)
(412,(char *)
(413,)
(414,(char *)
(415,10000)
(416,"Trace beginning at frame %p\\n")
(417,P_INMEM)
(418,((addr >> 16)
(419,callpc)
(420,FALSE)
(421,(char *)
(422,struct i386_frame *)
(423,&ddb_regs)
(424,pcb = p->p_thread->td_pcb)
(425,struct i386_frame *)
(426,SP_REGS(&ddb_regs)
(427,char *)
(428,frame)
(429,pcb->pcb_eip)
(430,actframe)
(431,4)
(432,&name)
(433,frame)
(434,if (p == NULL)
(435,sym)
(436,)
(437,callpc = PC_REGS(&ddb_regs)
(438,i)
(439,actframe)
(440,count)
(441,frame)
(442,ddb_regs)
(443,SP_REGS(&ddb_regs)
(444,(addr >> 16)
(445,PC_REGS(&ddb_regs)
(446,0)
(447,i = 0)
(448,(int)
(449,0)
(450,break;)
(451,frame)
(452,1)
(453,narg = MAXNARG)
(454,SP_REGS(&ddb_regs)
(455,argp = &actframe->f_arg0)
(456,p)
(457,4)
(458,db_get_value((int)
(459,callpc)
(460,if (i == 4096)
(461,db_printf("Unable to find anything that looks like a stack frame\\n")
(462,**argnp = NULL)
(463,argnames)
(464,(db_addr_t)
(465,callpc)
(466,)
(467,SP_REGS(&ddb_regs)
(468,i)
(469,)
(470,addr % 16)
(471,)
(472,first = TRUE)
(473,narg)
(474,0)
(475,)
(476,db_printf("pid %d swapped out\\n", pid)
(477,(struct i386_frame *)
(478,return;)
(479,argp)
(480,if ((char *)
(481,actframe = (struct i386_frame *)
(482,FALSE)
(483,ddb_regs.tf_ebp == 0)
(484,db_addr_t)
(485,)
(486,(char *)
(487,16)
(488,callpc)
(489,4)
(490,int)
(491,struct i386_frame *)
(492,callpc)
(493,&ddb_regs)
(494,ddb_regs)
(495,curproc)
(496,4096)
(497,actframe = (struct i386_frame *)
(498,frame)
(499,int)
(500,ddb_regs)
(501,0)
(502,0x000000c3)
(503,&frame->f_retaddr)
(504,(addr >> 12)
(505,argnp)
(506,if (p->p_pid == pid)
(507,strcmp(name, "fork_trampoline")
(508,check)
(509,i += 4)
(510,frame)
(511,pid = (addr % 16)
(512,!INKERNEL((int)
(513,int)
(514,frame)
(515,&actframe->f_arg0)
(516,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^