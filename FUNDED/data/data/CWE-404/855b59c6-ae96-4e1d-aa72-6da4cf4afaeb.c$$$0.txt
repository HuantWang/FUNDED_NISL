-----label-----
1
-----code-----
void exit_thread_runtime_instr(void)
{
	struct task_struct *task = current;

	preempt_disable();
	if (!task->thread.ri_cb)
		return;
	disable_runtime_instr();
	kfree(task->thread.ri_cb);
	task->thread.ri_cb = NULL;
	preempt_enable();
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
20,21
21,22
22,23
24,25
24,26
25,26
26,27
26,28
27,28
27,29
28,29
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
43,44
47,48
48,49
48,50
49,50
49,51
50,51
50,52
51,52
55,56
57,58
58,59
59,60
-----nextToken-----
2,4,6,8,13,15,16,19,23,29,30,31,32,36,40,44,45,46,52,53,54,56,60
-----computeFrom-----
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void exit_thread_runtime_instr(void){	struct task_struct *task = current;	preempt_disable();	if (!task->thread.ri_cb)		return;	disable_runtime_instr();	kfree(task->thread.ri_cb);	task->thread.ri_cb = NULL;	preempt_enable();}
void
exit_thread_runtime_instr(void)
exit_thread_runtime_instr
void
void


{	struct task_struct *task = current;	preempt_disable();	if (!task->thread.ri_cb)		return;	disable_runtime_instr();	kfree(task->thread.ri_cb);	task->thread.ri_cb = NULL;	preempt_enable();}
struct task_struct *task = current;
struct task_struct *task = current;
struct task_struct
task_struct
*task = current
*
task
= current
current
current
preempt_disable();
preempt_disable()
preempt_disable
preempt_disable
if (!task->thread.ri_cb)		return;
!task->thread.ri_cb
task->thread.ri_cb
task->thread
task
task
thread
ri_cb
return;
disable_runtime_instr();
disable_runtime_instr()
disable_runtime_instr
disable_runtime_instr
kfree(task->thread.ri_cb);
kfree(task->thread.ri_cb)
kfree
kfree
task->thread.ri_cb
task->thread
task
task
thread
ri_cb
task->thread.ri_cb = NULL;
task->thread.ri_cb = NULL
task->thread.ri_cb
task->thread
task
task
thread
ri_cb
NULL
NULL
preempt_enable();
preempt_enable()
preempt_enable
preempt_enable
-----joern-----
(4,12,0)
(9,15,0)
(7,15,0)
(3,23,0)
(19,23,0)
(16,15,0)
(20,15,0)
(2,24,0)
(27,2,0)
(11,0,0)
(24,2,0)
(13,12,0)
(2,8,0)
(28,12,0)
(24,29,0)
(8,15,0)
(6,2,0)
(9,4,0)
(12,4,0)
(21,20,0)
(23,8,0)
(18,24,0)
(17,8,0)
(5,25,0)
(25,20,0)
(25,23,0)
(14,8,0)
(22,4,0)
(1,15,0)
(29,24,0)
(26,15,0)
(4,9,0)
(12,8,0)
(10,15,0)
(23,25,0)
(3,19,1)
(2,8,1)
(21,25,1)
(4,22,1)
(28,13,1)
(23,3,1)
(12,28,1)
(11,0,1)
(1,20,1)
(23,8,1)
(19,9,1)
(9,4,1)
(24,2,1)
(8,17,1)
(10,29,1)
(11,1,1)
(26,8,1)
(0,29,1)
(27,6,1)
(2,27,1)
(5,23,1)
(6,26,1)
(22,12,1)
(25,23,1)
(4,12,1)
(24,18,1)
(17,14,1)
(25,5,1)
(12,8,1)
(29,24,1)
(20,21,1)
(13,10,1)
(18,2,1)
(4,29,2)
(28,29,2)
(12,8,2)
(1,29,2)
(9,29,2)
(24,2,2)
(3,29,2)
(12,29,2)
(11,0,2)
(19,29,2)
(25,29,2)
(5,29,2)
(10,29,2)
(29,24,2)
(23,8,2)
(9,4,2)
(2,8,2)
(22,29,2)
(13,29,2)
(4,12,2)
(23,29,2)
(25,23,2)
(20,29,2)
(0,29,2)
(21,29,2)
-----------------------------------
(0,return;)
(1,preempt_enable()
(2,task->thread)
(3,thread)
(4,task->thread.ri_cb)
(5,ri_cb)
(6,task)
(7,if (!task->thread.ri_cb)
(8,*task = current)
(9,kfree(task->thread.ri_cb)
(10,disable_runtime_instr()
(11,RET)
(12,task->thread)
(13,task)
(14,task)
(15,)
(16,task)
(17,current)
(18,ri_cb)
(19,task)
(20,task->thread.ri_cb = NULL)
(21,NULL)
(22,ri_cb)
(23,task->thread)
(24,task->thread.ri_cb)
(25,task->thread.ri_cb)
(26,preempt_disable()
(27,thread)
(28,thread)
(29,!task->thread.ri_cb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^