-----label-----
1
-----code-----
static int
get_subst_CID_on_WMode(gs_subst_CID_on_WMode_t *subst, ref *t, int WMode)
{
    ref r, *a, e;;

    make_int(&r, WMode);
    if (dict_find(t, &r, &a) > 0 && r_type(a) == t_array) {
	int n = r_size(a), i;
	uint *s;

	s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11");
	if (subst == NULL)
	    return_error(e_VMerror);
	for (i = 0; i < n; i++) {
	    array_get(subst->rc.memory, a, (long)i, &e);
	    if (r_type(&e) != t_integer)
		return_error(e_invalidfont);
	    s[i] = e.value.intval;
	}
	subst->data[WMode] = s;
	subst->size[WMode] = n;
    }
    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
23,26
23,27
24,25
26,27
28,29
28,30
31,32
34,35
35,36
35,37
35,38
36,37
38,39
39,40
41,42
43,44
43,45
44,45
44,46
45,46
45,47
46,47
46,48
46,49
46,50
47,48
49,50
51,52
52,53
54,55
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
66,67
66,68
66,69
66,70
66,71
66,72
66,73
67,68
68,69
68,70
68,71
70,71
70,72
72,73
73,74
73,75
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
84,86
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
97,101
97,102
98,99
100,101
100,102
101,102
101,103
102,103
106,107
108,109
109,110
109,111
113,114
113,115
114,115
114,116
115,116
117,118
119,120
120,121
120,122
121,122
123,124
124,125
126,127
126,128
126,129
126,130
127,128
128,129
128,130
129,130
132,133
132,134
133,134
135,136
137,138
138,139
140,141
140,142
140,143
141,142
142,143
142,144
142,145
142,146
142,147
143,144
145,146
145,147
146,147
146,148
147,148
151,152
153,154
153,155
154,155
154,156
157,158
159,160
160,161
162,163
162,164
163,164
163,165
164,165
164,166
165,166
167,168
168,169
170,171
172,173
173,174
173,175
174,175
176,177
177,178
179,180
180,181
180,182
181,182
181,183
182,183
184,185
186,187
186,188
187,188
187,189
188,189
192,193
193,194
193,195
194,195
194,196
195,196
195,197
196,197
199,200
201,202
203,204
204,205
204,206
205,206
205,207
206,207
206,208
207,208
210,211
212,213
214,215
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,25,27,29,30,32,33,37,40,42,48,50,53,56,57,61,63,65,69,71,75,77,79,83,85,86,90,94,96,99,103,104,105,107,110,111,112,116,118,122,125,130,131,134,136,139,144,148,149,150,152,155,156,158,161,166,169,171,175,178,183,185,189,190,191,197,198,200,202,208,209,211,213,215
-----computeFrom-----
44,45
44,46
45,46
45,47
58,59
58,60
88,89
88,90
114,115
114,116
128,129
128,130
132,133
132,134
163,164
163,165
180,181
180,182
193,194
193,195
204,205
204,206
-----guardedBy-----
63,152
61,166
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Pointer;Name;Declarator;Name;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intget_subst_CID_on_WMode(gs_subst_CID_on_WMode_t *subst, ref *t, int WMode){    ref r, *a, e;;    make_int(&r, WMode);    if (dict_find(t, &r, &a) > 0 && r_type(a) == t_array) {	int n = r_size(a), i;	uint *s;	s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11");	if (subst == NULL)	    return_error(e_VMerror);	for (i = 0; i < n; i++) {	    array_get(subst->rc.memory, a, (long)i, &e);	    if (r_type(&e) != t_integer)		return_error(e_invalidfont);	    s[i] = e.value.intval;	}	subst->data[WMode] = s;	subst->size[WMode] = n;    }    return 0;}
static int
get_subst_CID_on_WMode(gs_subst_CID_on_WMode_t *subst, ref *t, int WMode)
get_subst_CID_on_WMode
gs_subst_CID_on_WMode_t *subst
gs_subst_CID_on_WMode_t
gs_subst_CID_on_WMode_t
*subst
*
subst
ref *t
ref
ref
*t
*
t
int WMode
int
WMode
WMode
{    ref r, *a, e;;    make_int(&r, WMode);    if (dict_find(t, &r, &a) > 0 && r_type(a) == t_array) {	int n = r_size(a), i;	uint *s;	s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11");	if (subst == NULL)	    return_error(e_VMerror);	for (i = 0; i < n; i++) {	    array_get(subst->rc.memory, a, (long)i, &e);	    if (r_type(&e) != t_integer)		return_error(e_invalidfont);	    s[i] = e.value.intval;	}	subst->data[WMode] = s;	subst->size[WMode] = n;    }    return 0;}
ref r, *a, e;
ref r, *a, e;
ref
ref
r
r
*a
*
a
e
e
;
make_int(&r, WMode);
make_int(&r, WMode)
make_int
make_int
&r
r
r
WMode
WMode
if (dict_find(t, &r, &a) > 0 && r_type(a) == t_array) {	int n = r_size(a), i;	uint *s;	s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11");	if (subst == NULL)	    return_error(e_VMerror);	for (i = 0; i < n; i++) {	    array_get(subst->rc.memory, a, (long)i, &e);	    if (r_type(&e) != t_integer)		return_error(e_invalidfont);	    s[i] = e.value.intval;	}	subst->data[WMode] = s;	subst->size[WMode] = n;    }
dict_find(t, &r, &a) > 0 && r_type(a) == t_array
dict_find(t, &r, &a) > 0
dict_find(t, &r, &a)
dict_find
dict_find
t
t
&r
r
r
&a
a
a
0
r_type(a) == t_array
r_type(a)
r_type
r_type
a
a
t_array
t_array
{	int n = r_size(a), i;	uint *s;	s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11");	if (subst == NULL)	    return_error(e_VMerror);	for (i = 0; i < n; i++) {	    array_get(subst->rc.memory, a, (long)i, &e);	    if (r_type(&e) != t_integer)		return_error(e_invalidfont);	    s[i] = e.value.intval;	}	subst->data[WMode] = s;	subst->size[WMode] = n;    }
int n = r_size(a), i;
int n = r_size(a), i;
int
n = r_size(a)
n
= r_size(a)
r_size(a)
r_size
r_size
a
a
i
i
uint *s;
uint *s;
uint
uint
*s
*
s
s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11");
s = (uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11")
s
s
(uint *)gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11")
uint *
uint
uint
*
*
gs_alloc_byte_array(subst->rc.memory, n, sizeof(int), "zbuildfont11")
gs_alloc_byte_array
gs_alloc_byte_array
subst->rc.memory
subst->rc
subst
subst
rc
memory
n
n
sizeof(int)
int
int

"zbuildfont11"
if (subst == NULL)	    return_error(e_VMerror);
subst == NULL
subst
subst
NULL
NULL
return_error(e_VMerror);
return_error(e_VMerror);
return_error
return_error
(e_VMerror)
e_VMerror
e_VMerror
for (i = 0; i < n; i++) {	    array_get(subst->rc.memory, a, (long)i, &e);	    if (r_type(&e) != t_integer)		return_error(e_invalidfont);	    s[i] = e.value.intval;	}
i = 0;
i = 0
i
i
0
i < n
i
i
n
n
i++
i
i
{	    array_get(subst->rc.memory, a, (long)i, &e);	    if (r_type(&e) != t_integer)		return_error(e_invalidfont);	    s[i] = e.value.intval;	}
array_get(subst->rc.memory, a, (long)i, &e);
array_get(subst->rc.memory, a, (long)i, &e)
array_get
array_get
subst->rc.memory
subst->rc
subst
subst
rc
memory
a
a
(long)i
long
long

i
i
&e
e
e
if (r_type(&e) != t_integer)		return_error(e_invalidfont);
r_type(&e) != t_integer
r_type(&e)
r_type
r_type
&e
e
e
t_integer
t_integer
return_error(e_invalidfont);
return_error(e_invalidfont);
return_error
return_error
(e_invalidfont)
e_invalidfont
e_invalidfont
s[i] = e.value.intval;
s[i] = e.value.intval
s[i]
s
s
i
i
e.value.intval
e.value
e
e
value
intval
subst->data[WMode] = s;
subst->data[WMode] = s
subst->data[WMode]
subst->data
subst
subst
data
WMode
WMode
s
s
subst->size[WMode] = n;
subst->size[WMode] = n
subst->size[WMode]
subst->size
subst
subst
size
WMode
WMode
n
n
return 0;
0
-----joern-----
(58,103,0)
(85,10,0)
(94,76,0)
(81,25,0)
(92,103,0)
(54,61,0)
(92,17,0)
(65,96,0)
(68,10,0)
(74,66,0)
(16,61,0)
(42,48,0)
(15,107,0)
(102,100,0)
(29,75,0)
(59,40,0)
(41,10,0)
(31,82,0)
(33,65,0)
(95,43,0)
(9,72,0)
(34,10,0)
(45,13,0)
(45,100,0)
(92,40,0)
(60,92,0)
(88,82,0)
(96,65,0)
(72,76,0)
(54,105,0)
(99,10,0)
(88,108,0)
(80,7,0)
(56,98,0)
(47,98,0)
(4,36,0)
(24,11,0)
(4,55,0)
(70,75,0)
(64,45,0)
(11,61,0)
(6,75,0)
(51,55,0)
(94,30,0)
(50,99,0)
(69,26,0)
(49,71,0)
(97,58,0)
(39,82,0)
(96,36,0)
(108,10,0)
(58,15,0)
(13,45,0)
(54,108,0)
(104,103,0)
(100,45,0)
(29,82,0)
(86,14,0)
(44,24,0)
(90,61,0)
(14,55,0)
(76,94,0)
(28,46,0)
(61,75,0)
(72,45,0)
(62,46,0)
(61,11,0)
(73,15,0)
(107,10,0)
(19,107,0)
(106,3,0)
(15,17,0)
(27,48,0)
(84,36,0)
(58,42,0)
(93,48,0)
(48,42,0)
(40,92,0)
(2,30,0)
(48,89,0)
(91,56,0)
(26,96,0)
(75,70,0)
(98,96,0)
(88,4,0)
(71,61,0)
(24,89,0)
(55,14,0)
(38,31,0)
(52,10,0)
(66,89,0)
(43,95,0)
(30,94,0)
(76,72,0)
(61,54,0)
(77,70,0)
(57,108,0)
(12,24,0)
(98,56,0)
(1,103,0)
(108,54,0)
(35,103,0)
(45,72,0)
(105,54,0)
(15,66,0)
(0,26,0)
(18,13,0)
(53,66,0)
(83,58,0)
(20,88,0)
(26,0,0)
(96,26,0)
(66,15,0)
(23,43,0)
(95,25,0)
(75,10,0)
(96,98,0)
(56,89,0)
(25,95,0)
(107,108,0)
(58,88,0)
(42,99,0)
(8,56,0)
(79,103,0)
(11,24,0)
(78,29,0)
(101,29,0)
(45,22,0)
(26,82,0)
(21,88,0)
(32,42,0)
(55,4,0)
(87,96,0)
(37,94,0)
(46,89,0)
(67,11,0)
(61,71,0)
(63,82,0)
(5,14,0)
(42,17,0)
(99,75,0)
(48,89,1)
(57,75,1)
(83,99,1)
(75,70,1)
(20,21,1)
(46,62,1)
(31,38,1)
(51,14,1)
(18,64,1)
(88,20,1)
(7,80,1)
(26,0,1)
(100,102,1)
(21,43,1)
(19,15,1)
(58,83,1)
(55,14,1)
(66,74,1)
(4,55,1)
(23,95,1)
(50,42,1)
(94,30,1)
(43,95,1)
(86,88,1)
(58,42,1)
(88,82,1)
(29,78,1)
(65,33,1)
(92,17,1)
(43,23,1)
(48,93,1)
(11,24,1)
(98,56,1)
(21,7,1)
(107,108,1)
(96,65,1)
(95,25,1)
(90,11,1)
(54,105,1)
(108,54,1)
(83,76,1)
(107,19,1)
(15,66,1)
(87,98,1)
(28,108,1)
(76,94,1)
(63,46,1)
(5,86,1)
(37,30,1)
(16,71,1)
(29,75,1)
(39,63,1)
(71,49,1)
(58,88,1)
(56,91,1)
(26,69,1)
(99,50,1)
(93,27,1)
(76,72,1)
(73,66,1)
(74,53,1)
(29,82,1)
(45,22,1)
(62,28,1)
(15,73,1)
(61,16,1)
(3,106,1)
(24,89,1)
(40,59,1)
(98,47,1)
(92,60,1)
(45,13,1)
(70,77,1)
(101,82,1)
(64,92,1)
(54,61,1)
(25,81,1)
(80,43,1)
(27,107,1)
(24,12,1)
(46,89,1)
(61,71,1)
(82,39,1)
(66,89,1)
(56,89,1)
(72,45,1)
(72,9,1)
(94,37,1)
(32,48,1)
(31,82,1)
(42,17,1)
(88,108,1)
(67,24,1)
(58,15,1)
(13,18,1)
(77,6,1)
(6,76,1)
(47,56,1)
(60,40,1)
(55,51,1)
(61,75,1)
(99,75,1)
(81,96,1)
(11,67,1)
(12,44,1)
(78,101,1)
(42,32,1)
(2,72,1)
(91,8,1)
(26,82,1)
(30,2,1)
(49,90,1)
(96,98,1)
(69,87,1)
(63,3,1)
(101,31,1)
(9,45,1)
(45,100,1)
(38,4,1)
(15,17,1)
(14,5,1)
(96,26,1)
(97,58,1)
(8,29,1)
(102,13,1)
(61,11,1)
(106,46,1)
(44,57,1)
(33,26,1)
(92,40,1)
(42,48,1)
(53,29,1)
(26,29,2)
(101,29,2)
(5,29,2)
(61,71,2)
(61,76,2)
(94,30,2)
(56,29,2)
(94,72,2)
(65,29,2)
(27,76,2)
(72,45,2)
(82,76,2)
(12,76,2)
(57,76,2)
(4,55,2)
(95,29,2)
(28,76,2)
(61,75,2)
(71,76,2)
(29,75,2)
(26,0,2)
(106,46,2)
(49,76,2)
(48,89,2)
(96,98,2)
(56,89,2)
(55,14,2)
(81,29,2)
(62,76,2)
(96,26,2)
(21,29,2)
(44,76,2)
(43,95,2)
(93,76,2)
(42,76,2)
(78,76,2)
(15,66,2)
(86,29,2)
(31,82,2)
(108,54,2)
(97,58,2)
(66,89,2)
(53,76,2)
(95,25,2)
(7,43,2)
(107,76,2)
(63,76,2)
(80,43,2)
(3,46,2)
(15,76,2)
(58,88,2)
(75,70,2)
(96,65,2)
(23,29,2)
(66,76,2)
(107,108,2)
(98,29,2)
(37,72,2)
(77,76,2)
(92,40,2)
(11,76,2)
(87,29,2)
(45,100,2)
(108,76,2)
(4,29,2)
(42,17,2)
(76,72,2)
(88,29,2)
(45,13,2)
(14,29,2)
(6,76,2)
(88,108,2)
(99,76,2)
(20,29,2)
(88,82,2)
(19,76,2)
(55,29,2)
(8,29,2)
(29,82,2)
(43,29,2)
(98,56,2)
(11,24,2)
(58,15,2)
(38,29,2)
(47,29,2)
(16,76,2)
(32,76,2)
(90,76,2)
(69,29,2)
(75,76,2)
(54,61,2)
(78,29,2)
(2,72,2)
(61,11,2)
(26,82,2)
(70,76,2)
(25,29,2)
(15,17,2)
(39,76,2)
(31,29,2)
(50,76,2)
(51,29,2)
(29,29,2)
(101,76,2)
(54,105,2)
(42,48,2)
(54,76,2)
(74,76,2)
(92,17,2)
(73,76,2)
(24,76,2)
(48,76,2)
(76,94,2)
(24,89,2)
(67,76,2)
(96,29,2)
(29,76,2)
(46,89,2)
(30,72,2)
(46,76,2)
(33,29,2)
(45,22,2)
(99,75,2)
(58,42,2)
(91,29,2)
-----------------------------------
(0,long)
(1,a)
(2,a)
(3,return_error(e_VMerror)
(4,s[i] = e.value.intval)
(5,value)
(6,n)
(7,return_error(e_invalidfont)
(8,subst)
(9,0)
(10,)
(11,subst->rc.memory)
(12,rc)
(13,&r)
(14,e.value)
(15,subst->data[WMode])
(16,"zbuildfont11")
(17,int WMode)
(18,r)
(19,s)
(20,i)
(21,s)
(22,ref *t)
(23,t_integer)
(24,subst->rc)
(25,&e)
(26,(long)
(27,subst)
(28,subst)
(29,i < n)
(30,r_type(a)
(31,i++)
(32,WMode)
(33,e)
(34,s)
(35,r)
(36,)
(37,t_array)
(38,i)
(39,0)
(40,&r)
(41,n)
(42,subst->size[WMode])
(43,r_type(&e)
(44,subst)
(45,dict_find(t, &r, &a)
(46,subst == NULL)
(47,memory)
(48,subst->size)
(49,int)
(50,n)
(51,intval)
(52,for (i = 0; i < n; i++)
(53,subst)
(54,(uint *)
(55,e.value.intval)
(56,subst->rc)
(57,s)
(58,return 0;)
(59,r)
(60,WMode)
(61,gs_alloc_byte_array(subst->rc.memory, n, sizeof(int)
(62,NULL)
(63,i)
(64,t)
(65,&e)
(66,subst->data)
(67,memory)
(68,if (subst == NULL)
(69,i)
(70,r_size(a)
(71,sizeof(int)
(72,dict_find(t, &r, &a)
(73,WMode)
(74,data)
(75,n = r_size(a)
(76,dict_find(t, &r, &a)
(77,a)
(78,n)
(79,if (dict_find(t, &r, &a)
(80,e_invalidfont)
(81,e)
(82,i = 0)
(83,0)
(84,if (r_type(&e)
(85,i)
(86,e)
(87,a)
(88,s[i])
(89,gs_subst_CID_on_WMode_t *subst)
(90,n)
(91,rc)
(92,make_int(&r, WMode)
(93,size)
(94,r_type(a)
(95,r_type(&e)
(96,array_get(subst->rc.memory, a, (long)
(97,RET)
(98,subst->rc.memory)
(99,subst->size[WMode] = n)
(100,&a)
(101,i)
(102,a)
(103,)
(104,e)
(105,uint *)
(106,e_VMerror)
(107,subst->data[WMode] = s)
(108,s = (uint *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^