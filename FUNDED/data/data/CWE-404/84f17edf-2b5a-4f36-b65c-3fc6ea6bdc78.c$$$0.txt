-----label-----
1
-----code-----
int hdd_wlan_startup(struct device *dev )
{
   VOS_STATUS status;
   hdd_adapter_t *pAdapter = NULL;
   hdd_adapter_t *pP2pAdapter = NULL;
   hdd_context_t *pHddCtx = NULL;
   v_CONTEXT_t pVosContext= NULL;
#ifdef WLAN_BTAMP_FEATURE
   VOS_STATUS vStatus = VOS_STATUS_SUCCESS;
   WLANBAP_ConfigType btAmpConfig;
   hdd_config_t *pConfig;
#endif
   int ret;
   struct wiphy *wiphy;
   v_MACADDR_t mac_addr;

   ENTER();
   /*
    * cfg80211: wiphy allocation
    */
   wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;

   if(wiphy == NULL)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);
      return -EIO;
   }
   pHddCtx = wiphy_priv(wiphy);

   //Initialize the adapter context to zeros.
   vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));

   pHddCtx->wiphy = wiphy;
   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;

   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);

   /* register for riva power on lock to platform driver
    * Locking power early to ensure FW doesn't reset by kernel while
    * host driver is busy initializing itself */
   if (req_riva_power_on_lock("wlan"))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",
                                     __func__);
      goto err_free_hdd_context;
   }

   /*Get vos context here bcoz vos_open requires it*/
   pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);

   if(pVosContext == NULL)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);
      goto err_free_hdd_context;
   }

   //Save the Global VOSS context in adapter context for future.
   pHddCtx->pvosContext = pVosContext;

   //Save the adapter context in global context for future.
   ((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;

   pHddCtx->parent_dev = dev;
   pHddCtx->last_scan_reject_session_id = 0;
   pHddCtx->last_scan_reject_reason = 0xFF;
   pHddCtx->last_scan_reject_timestamp = 0;

   init_completion(&pHddCtx->full_pwr_comp_var);
   init_completion(&pHddCtx->standby_comp_var);
   init_completion(&pHddCtx->req_bmps_comp_var);
   init_completion(&pHddCtx->scan_info.scan_req_completion_event);
   init_completion(&pHddCtx->scan_info.abortscan_event_var);
   init_completion(&pHddCtx->wiphy_channel_update_event);
   init_completion(&pHddCtx->ssr_comp_var);
   init_completion(&pHddCtx->mc_sus_event_var);
   init_completion(&pHddCtx->tx_sus_event_var);
   init_completion(&pHddCtx->rx_sus_event_var);


   hdd_init_ll_stats_ctx(pHddCtx);

#ifdef CONFIG_ENABLE_LINUX_REG
   init_completion(&pHddCtx->linux_reg_req);
#else
   init_completion(&pHddCtx->driver_crda_req);
#endif

#ifdef WLAN_FEATURE_EXTSCAN
   init_completion(&pHddCtx->ext_scan_context.response_event);
#endif /* WLAN_FEATURE_EXTSCAN */

   spin_lock_init(&pHddCtx->schedScan_lock);

   hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );

   vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,
                                hdd_processSpoofMacAddrRequest);

#ifdef FEATURE_WLAN_TDLS
   /* tdls_lock is initialized before an hdd_open_adapter ( which is
    * invoked by other instances also) to protect the concurrent
    * access for the Adapters by TDLS module.
    */
   mutex_init(&pHddCtx->tdls_lock);
#endif
   mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);
   mutex_init(&pHddCtx->wmmLock);

   hdd_init_offloaded_packets_ctx(pHddCtx);
   /* By default Strict Regulatory For FCC should be false */

   pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;
   // Load all config first as TL config is needed during vos_open
   pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);
   if(pHddCtx->cfg_ini == NULL)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);
      goto err_free_hdd_context;
   }

   vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));

   // Read and parse the qcom_cfg.ini file
   status = hdd_parse_config_ini( pHddCtx );
   if ( VOS_STATUS_SUCCESS != status )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",
             __func__, WLAN_INI_FILE);
      goto err_config;
   }
#ifdef MEMORY_DEBUG
   if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
      vos_mem_init();

   hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",
          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled);
#endif

   /* INI has been read, initialise the configuredMcastBcastFilter with
    * INI value as this will serve as the default value
    */
   pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;
   hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",
                   pHddCtx->cfg_ini->mcastBcastFilterSetting);

   if (false == hdd_is_5g_supported(pHddCtx))
   {
      //5Ghz is not supported.
      if (1 != pHddCtx->cfg_ini->nBandCapability)
      {
         hddLog(VOS_TRACE_LEVEL_INFO,
                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);
         pHddCtx->cfg_ini->nBandCapability = 1;
      }
   }

   /* If SNR Monitoring is enabled, FW has to parse all beacons
    * for calcaluting and storing the average SNR, so set Nth beacon
    * filter to 1 to enable FW to parse all the beaocons
    */
   if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)
   {
      /* The log level is deliberately set to WARN as overriding
       * nthBeaconFilter to 1 will increase power cosumption and this
       * might just prove helpful to detect the power issue.
       */
      hddLog(VOS_TRACE_LEVEL_WARN,
             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);
      pHddCtx->cfg_ini->nthBeaconFilter = 1;
   }
   /*
    * cfg80211: Initialization  ...
    */
   if (VOS_FTM_MODE != hdd_get_conparam())
   {
      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))
      {
         hddLog(VOS_TRACE_LEVEL_FATAL,
                 "%s: wlan_hdd_cfg80211_init return failure", __func__);
         goto err_config;
      }
   }

   // Update VOS trace levels based upon the cfg.ini
   hdd_vos_trace_enable(VOS_MODULE_ID_BAP,
                        pHddCtx->cfg_ini->vosTraceEnableBAP);
   hdd_vos_trace_enable(VOS_MODULE_ID_TL,
                        pHddCtx->cfg_ini->vosTraceEnableTL);
   hdd_vos_trace_enable(VOS_MODULE_ID_WDI,
                        pHddCtx->cfg_ini->vosTraceEnableWDI);
   hdd_vos_trace_enable(VOS_MODULE_ID_HDD,
                        pHddCtx->cfg_ini->vosTraceEnableHDD);
   hdd_vos_trace_enable(VOS_MODULE_ID_SME,
                        pHddCtx->cfg_ini->vosTraceEnableSME);
   hdd_vos_trace_enable(VOS_MODULE_ID_PE,
                        pHddCtx->cfg_ini->vosTraceEnablePE);
   hdd_vos_trace_enable(VOS_MODULE_ID_PMC,
                         pHddCtx->cfg_ini->vosTraceEnablePMC);
   hdd_vos_trace_enable(VOS_MODULE_ID_WDA,
                        pHddCtx->cfg_ini->vosTraceEnableWDA);
   hdd_vos_trace_enable(VOS_MODULE_ID_SYS,
                        pHddCtx->cfg_ini->vosTraceEnableSYS);
   hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,
                        pHddCtx->cfg_ini->vosTraceEnableVOSS);
   hdd_vos_trace_enable(VOS_MODULE_ID_SAP,
                        pHddCtx->cfg_ini->vosTraceEnableSAP);
   hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,
                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);

   // Update WDI trace levels based upon the cfg.ini
   hdd_wdi_trace_enable(eWLAN_MODULE_DAL,
                        pHddCtx->cfg_ini->wdiTraceEnableDAL);
   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,
                        pHddCtx->cfg_ini->wdiTraceEnableCTL);
   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,
                        pHddCtx->cfg_ini->wdiTraceEnableDAT);
   hdd_wdi_trace_enable(eWLAN_MODULE_PAL,
                        pHddCtx->cfg_ini->wdiTraceEnablePAL);

   if (VOS_FTM_MODE == hdd_get_conparam())
   {
      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )
      {
          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);
          goto err_free_hdd_context;
      }
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);
      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
      return VOS_STATUS_SUCCESS;
   }

   if( VOS_MONITOR_MODE == hdd_get_conparam())
   {
       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))
       {
          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);
          goto err_free_hdd_context;
       }
       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);
       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
       return VOS_STATUS_SUCCESS;
   }

   //Open watchdog module
   if(pHddCtx->cfg_ini->fIsLogpEnabled)
   {
      status = vos_watchdog_open(pVosContext,
         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));

      if(!VOS_IS_STATUS_SUCCESS( status ))
      {
         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);
         goto err_wdclose;
      }
   }

   pHddCtx->isLogpInProgress = FALSE;
   vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);

#ifdef CONFIG_ENABLE_LINUX_REG
   /* initialize the NV module. This is required so that
      we can initialize the channel information in wiphy
      from the NV.bin data. The channel information in
      wiphy needs to be initialized before wiphy registration */

   status = vos_nv_open();
   if (!VOS_IS_STATUS_SUCCESS(status))
   {
       /* NV module cannot be initialized */
       hddLog( VOS_TRACE_LEVEL_FATAL,
                "%s: vos_nv_open failed", __func__);
       goto err_wdclose;
   }

   status = vos_init_wiphy_from_nv_bin();
   if (!VOS_IS_STATUS_SUCCESS(status))
   {
       /* NV module cannot be initialized */
       hddLog( VOS_TRACE_LEVEL_FATAL,
               "%s: vos_init_wiphy failed", __func__);
       goto err_vos_nv_close;
   }

#endif
   //Initialize the nlink service
   if(nl_srv_init() != 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);
      goto err_vos_nv_close;
   }

#ifdef WLAN_KD_READY_NOTIFIER
   pHddCtx->kd_nl_init = 1;
#endif /* WLAN_KD_READY_NOTIFIER */

   vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);
   status = vos_open( &pVosContext, pHddCtx->parent_dev);
   if ( !VOS_IS_STATUS_SUCCESS( status ))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);
      goto err_nl_srv;
   }

   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );

   if ( NULL == pHddCtx->hHal )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);
      goto err_vosclose;
   }

   status = vos_preStart( pHddCtx->pvosContext );
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);
      goto err_vosclose;
   }

   if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)
   {
      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;
      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",
             __func__, enable_dfs_chan_scan);
   }
   if (0 == enable_11d || 1 == enable_11d)
   {
      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;
      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",
             __func__, enable_11d);
   }

   /* Note that the vos_preStart() sequence triggers the cfg download.
      The cfg download must occur before we update the SME config
      since the SME config operation must access the cfg database */
   status = hdd_set_sme_config( pHddCtx );

   if ( VOS_STATUS_SUCCESS != status )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);
      goto err_vosclose;
   }

   /* In the integrated architecture we update the configuration from
      the INI file and from NV before vOSS has been started so that
      the final contents are available to send down to the cCPU   */

   // Apply the cfg.ini to cfg.dat
   if (FALSE == hdd_update_config_dat(pHddCtx))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
      goto err_vosclose;
   }

   // Get mac addr from platform driver
   ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);

   if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))
   {
      /* Store the mac addr for first interface */
      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;

      hddLog(VOS_TRACE_LEVEL_ERROR,
             "%s: WLAN Mac Addr: "
             MAC_ADDRESS_STR, __func__,
             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));

      /* Here, passing Arg2 as 1 because we do not want to change the
         last 3 bytes (means non OUI bytes) of first interface mac
         addr.
       */
      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))
      {
         hddLog(VOS_TRACE_LEVEL_ERROR,
                "%s: Failed to generate wlan interface mac addr "
                "using MAC from ini file ", __func__);
      }
   }
   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))
   {
      // Apply the NV to cfg.dat
      /* Prima Update MAC address only at here */
#ifdef WLAN_AUTOGEN_MACADDR_FEATURE
      /* There was not a valid set of MAC Addresses in NV.  See if the
         default addresses were modified by the cfg.ini settings.  If so,
         we'll use them, but if not, we'll autogenerate a set of MAC
         addresses based upon the device serial number */

      static const v_MACADDR_t default_address =
         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};

      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],
                   sizeof(default_address)))
      {
         /* cfg.ini has the default address, invoke autogen logic */

         /* Here, passing Arg2 as 0 because we want to change the
            last 3 bytes (means non OUI bytes) of all the interfaces
            mac addr.
          */
         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,
                                                            default_address))
         {
            hddLog(VOS_TRACE_LEVEL_ERROR,
                   "%s: Failed to generate wlan interface mac addr "
                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,
                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
         }
      }
      else
#endif //WLAN_AUTOGEN_MACADDR_FEATURE
      {
         hddLog(VOS_TRACE_LEVEL_ERROR,
                "%s: Invalid MAC address in NV, using MAC from ini file "
                MAC_ADDRESS_STR, __func__,
                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
      }
   }
   {
      eHalStatus halStatus;

      /* Set the MAC Address Currently this is used by HAL to
       * add self sta. Remove this once self sta is added as
       * part of session open.
       */
      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,
                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],
                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );

      if (!HAL_STATUS_SUCCESS( halStatus ))
      {
         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "
                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );
         goto err_vosclose;
      }
   }

   /*Start VOSS which starts up the SME/MAC/HAL modules and everything else
     Note: Firmware image will be read and downloaded inside vos_start API */
   status = vos_start( pHddCtx->pvosContext );
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
      if (isSsrPanicOnFailure())
          VOS_BUG(0);
      goto err_vosclose;
   }

#ifdef FEATURE_WLAN_CH_AVOID
    /* Plug in avoid channel notification callback
     * This should happen before ADD_SELF_STA
     * FW will send first IND with ADD_SELF_STA REQ from host */

    /* check the Channel Avoidance is enabled */
   if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)
   {
       sme_AddChAvoidCallback(pHddCtx->hHal,
                              hdd_hostapd_ch_avoid_cb);
   }
#endif /* FEATURE_WLAN_CH_AVOID */

   /* Exchange capability info between Host and FW and also get versioning info from FW */
   hdd_exchange_version_and_caps(pHddCtx);

#ifdef CONFIG_ENABLE_LINUX_REG
   status = wlan_hdd_init_channels(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",
             __func__);
      goto err_vosstop;
   }
#endif

   status = hdd_post_voss_start_config( pHddCtx );
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",
         __func__);
      goto err_vosstop;
   }

#ifndef CONFIG_ENABLE_LINUX_REG
   wlan_hdd_cfg80211_update_reg_info( wiphy );

   /* registration of wiphy dev with cfg80211 */
   if (0 > wlan_hdd_cfg80211_register(wiphy))
   {
       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);
       goto err_vosstop;
   }
#endif

#ifdef CONFIG_ENABLE_LINUX_REG
   /* registration of wiphy dev with cfg80211 */
   if (0 > wlan_hdd_cfg80211_register(wiphy))
   {
       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);
       goto err_vosstop;
   }

   status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",
             __func__);
      goto err_unregister_wiphy;
   }
#endif

   wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);

   if (VOS_STA_SAP_MODE == hdd_get_conparam())
   {
     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",
         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
   }
   else
   {
     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",
         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
     if (pAdapter != NULL)
     {
         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))
         {
               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,
                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,
                       sizeof(tSirMacAddr));

                /* Generate the P2P Device Address.  This consists of the device's
                 * primary MAC address with the locally administered bit set.
                */
                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;
         }
         else
         {
             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);
             if (p2p_dev_addr != NULL)
             {
                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],
                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);
             }
             else
             {
                   hddLog(VOS_TRACE_LEVEL_FATAL,
                           "%s: Failed to allocate mac_address for p2p_device",
                   __func__);
                   goto err_close_adapter;
             }
         }

         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",
                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );
         if ( NULL == pP2pAdapter )
         {
             hddLog(VOS_TRACE_LEVEL_FATAL,
                "%s: Failed to do hdd_open_adapter for P2P Device Interface",
                __func__);
             goto err_close_adapter;
         }
     }
   }

   if( pAdapter == NULL )
   {
      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);
      goto err_close_adapter;
   }

   if (country_code)
   {
      eHalStatus ret;
      INIT_COMPLETION(pAdapter->change_country_code);
      hdd_checkandupdate_dfssetting(pAdapter, country_code);
#ifndef CONFIG_ENABLE_LINUX_REG
      hdd_checkandupdate_phymode(pAdapter, country_code);
#endif
      ret = sme_ChangeCountryCode(pHddCtx->hHal,
                                  (void *)(tSmeChangeCountryCallback)
                                  wlan_hdd_change_country_code_callback,
                                  country_code,
                                  pAdapter, pHddCtx->pvosContext,
                                  eSIR_TRUE, eSIR_TRUE);
      if (eHAL_STATUS_SUCCESS == ret)
      {
         ret = wait_for_completion_interruptible_timeout(
                       &pAdapter->change_country_code,
                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));

         if (0 >= ret)
         {
            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                      "%s: SME while setting country code timed out", __func__);
         }
      }
      else
      {
         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                   "%s: SME Change Country code from module param fail ret=%d",
                   __func__, ret);
      }
   }

#ifdef WLAN_BTAMP_FEATURE
   vStatus = WLANBAP_Open(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to open BAP",__func__);
      goto err_close_adapter;
   }

   vStatus = BSL_Init(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to Init BSL",__func__);
     goto err_bap_close;
   }
   vStatus = WLANBAP_Start(pVosContext);
   if (!VOS_IS_STATUS_SUCCESS(vStatus))
   {
       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
               "%s: Failed to start TL",__func__);
       goto err_bap_close;
   }

   pConfig = pHddCtx->cfg_ini;
   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;
   status = WLANBAP_SetConfig(&btAmpConfig);

#endif //WLAN_BTAMP_FEATURE

   /*
    * UapsdMask is 0xf if U-APSD is enbaled for all AC's...
    * The value of CFG_QOS_WMM_UAPSD_MASK_DEFAULT is 0xaa(Magic Value)
    * which is greater than 0xf. So the below check is safe to make
    * sure that there is no entry for UapsdMask in the ini
    */
   if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)
   {
       if(IS_DYNAMIC_WMM_PS_ENABLED)
       {
           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",
                     __func__);
           pHddCtx->cfg_ini->UapsdMask =
                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;
       }
       else
       {
           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",
                     __func__);
           pHddCtx->cfg_ini->UapsdMask =
                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;
       }
   }

#ifdef WLAN_FEATURE_ROAM_SCAN_OFFLOAD
   if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE))
   {
      hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__);
      pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0;
      sme_UpdateRoamScanOffloadEnabled((tHalHandle)(pHddCtx->hHal),
                       pHddCtx->cfg_ini->isRoamOffloadScanEnabled);
   }
#endif

   wlan_hdd_tdls_init(pHddCtx);

   wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);

   vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,
                         wlan_hdd_schedule_defer_scan);

   sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);

   /* Register with platform driver as client for Suspend/Resume */
   status = hddRegisterPmOps(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
#ifdef WLAN_BTAMP_FEATURE
      goto err_bap_stop;
#else
      goto err_close_adapter;
#endif //WLAN_BTAMP_FEATURE
   }

   /* Open debugfs interface */
   if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))
   {
      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
                 "%s: hdd_debugfs_init failed!", __func__);
   }

   /* Register TM level change handler function to the platform */
   status = hddDevTmRegisterNotifyCallback(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( status ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);
      goto err_unregister_pmops;
   }

   // register net device notifier for device change notification
   ret = register_netdevice_notifier(&hdd_netdev_notifier);

   if(ret < 0)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);
      goto err_unregister_pmops;
   }

   //Initialize the BTC service
   if(btc_activate_service(pHddCtx) != 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);
      goto err_reg_netdev;
   }

#ifdef FEATURE_OEM_DATA_SUPPORT
   //Initialize the OEM service
   if (oem_activate_service(pHddCtx) != 0)
   {
       hddLog(VOS_TRACE_LEVEL_FATAL,
              "%s: oem_activate_service failed", __func__);
       goto err_reg_netdev;
   }
#endif

#ifdef PTT_SOCK_SVC_ENABLE
   //Initialize the PTT service
   if(ptt_sock_activate_svc(pHddCtx) != 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__);
      goto err_reg_netdev;
   }
#endif

#ifdef WLAN_FEATURE_RMC
   if (hdd_open_cesium_nl_sock() < 0)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__);
      goto err_reg_netdev;
   }
#endif

#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE
   if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)
   {
       if(wlan_logging_sock_activate_svc(
                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,
                   pHddCtx->cfg_ini->wlanLoggingNumBuf,
                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,
                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf))
       {
           hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"
                   " failed", __func__);
           goto err_reg_netdev;
       }
       //TODO: To Remove enableDhcpDebug and use gEnableDebugLog for
       //EAPOL and DHCP
       if (!pHddCtx->cfg_ini->gEnableDebugLog)
           pHddCtx->cfg_ini->gEnableDebugLog =
           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |
           VOS_PKT_PROTO_TYPE_ARP;
   }

   if (pHddCtx->cfg_ini->wlanLoggingEnable &&
               (pHddCtx->cfg_ini->enableFWLogging ||
                pHddCtx->cfg_ini->enableMgmtLogging ||
                pHddCtx->cfg_ini->enableContFWLogging ||
                pHddCtx->cfg_ini->enableFwrMemDump )
                )
   {
       hdd_init_frame_logging(pHddCtx);
   }
   else
   {
       hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini"));
   }

#endif


   if (vos_is_multicast_logging())
       wlan_logging_set_log_level();

   hdd_register_mcast_bcast_filter(pHddCtx);
   if (VOS_STA_SAP_MODE != hdd_get_conparam())
   {
      /* Action frame registered in one adapter which will
       * applicable to all interfaces
       */
      wlan_hdd_cfg80211_register_frames(pAdapter);
   }

   mutex_init(&pHddCtx->sap_lock);
   mutex_init(&pHddCtx->roc_lock);

#ifdef WLAN_FEATURE_HOLD_RX_WAKELOCK
   /* Initialize the wake lcok */
   vos_wake_lock_init(&pHddCtx->rx_wake_lock,
           "qcom_rx_wakelock");

#endif
   /* Initialize the wake lcok */
   vos_wake_lock_init(&pHddCtx->sap_wake_lock,
           "qcom_sap_wakelock");


   vos_event_init(&pHddCtx->scan_info.scan_finished_event);
   pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;

   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);

#ifdef FEATURE_WLAN_SCAN_PNO
   /*SME must send channel update configuration to RIVA*/
   sme_UpdateChannelConfig(pHddCtx->hHal);
#endif
   /* Send the update default channel list to the FW*/
   sme_UpdateChannelList(pHddCtx->hHal);

   /* Fwr capabilities received, Set the Dot11 mode */
   sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),
       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));
   sme_SetDefDot11Mode(pHddCtx->hHal);

#ifndef CONFIG_ENABLE_LINUX_REG
   /*updating wiphy so that regulatory user hints can be processed*/
   if (wiphy)
   {
       regulatory_hint(wiphy, "00");
   }
#endif
   // Initialize the restart logic
   wlan_hdd_restart_init(pHddCtx);

   //Register the traffic monitor timer now
   if ( pHddCtx->cfg_ini->dynSplitscan)
   {
       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,
                     VOS_TIMER_TYPE_SW,
                     hdd_tx_rx_pkt_cnt_stat_timer_handler,
                     (void *)pHddCtx);
   }
   wlan_hdd_cfg80211_nan_init(pHddCtx);

   mutex_init(&pHddCtx->cur_rx_level_lock);
   vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,
                             hdd_tcp_delack_compute_function,(void *)pHddCtx);
   vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,
                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);

#ifdef WLAN_FEATURE_EXTSCAN
    sme_EXTScanRegisterCallback(pHddCtx->hHal,
            wlan_hdd_cfg80211_extscan_callback,
                           pHddCtx);
#endif /* WLAN_FEATURE_EXTSCAN */

#ifdef FEATURE_OEM_DATA_SUPPORT
    sme_OemDataRegisterCallback(pHddCtx->hHal,
            wlan_hdd_cfg80211_oemdata_callback,
                           pHddCtx);
#endif /* FEATURE_OEM_DATA_SUPPORT */

   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);
#ifdef WLAN_NS_OFFLOAD
   // Register IPv6 notifier to notify if any change in IP
   // So that we can reconfigure the offload parameters
   pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed;
   ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier);
   if (ret)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier"));
   }
   else
   {
      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier"));
   }
#endif

   // Register IPv4 notifier to notify if any change in IP
   // So that we can reconfigure the offload parameters
   pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;
   ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);
   if (ret)
   {
      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));
   }
   else
   {
      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));
   }
   /*Fw mem dump procfs initialization*/
   memdump_init();
   hdd_dp_util_send_rps_ind(pHddCtx);

   goto success;

err_reg_netdev:
   unregister_netdevice_notifier(&hdd_netdev_notifier);

err_unregister_pmops:
   hddDevTmUnregisterNotifyCallback(pHddCtx);
   hddDeregisterPmOps(pHddCtx);

   hdd_debugfs_exit(pHddCtx);

#ifdef WLAN_BTAMP_FEATURE
err_bap_stop:
  WLANBAP_Stop(pVosContext);
#endif

#ifdef WLAN_BTAMP_FEATURE
err_bap_close:
   WLANBAP_Close(pVosContext);
#endif

err_close_adapter:
   hdd_close_all_adapters( pHddCtx );
#ifdef CONFIG_ENABLE_LINUX_REG
err_unregister_wiphy:
#endif
   wiphy_unregister(wiphy) ;
   hdd_wlan_free_wiphy_channels(wiphy);

err_vosstop:
   vos_stop(pVosContext);

err_vosclose:
   status = vos_sched_close( pVosContext );
   if (!VOS_IS_STATUS_SUCCESS(status))    {
      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,
         "%s: Failed to close VOSS Scheduler", __func__);
      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );
   }
   vos_close(pVosContext );

err_nl_srv:
#ifdef WLAN_KD_READY_NOTIFIER
   nl_srv_exit(pHddCtx->ptt_pid);
#else
   nl_srv_exit();
#endif /* WLAN_KD_READY_NOTIFIER */
err_vos_nv_close:

#ifdef CONFIG_ENABLE_LINUX_REG
   vos_nv_close();

#endif

err_wdclose:
   if(pHddCtx->cfg_ini->fIsLogpEnabled)
      vos_watchdog_close(pVosContext);

err_config:
   kfree(pHddCtx->cfg_ini);
   pHddCtx->cfg_ini= NULL;

err_free_hdd_context:
   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
   free_riva_power_on_lock("wlan");
   wiphy_free(wiphy) ;
   //kfree(wdev) ;
   VOS_BUG(1);

   if (hdd_is_ssr_required())
   {
       /* WDI timeout had happened during load, so SSR is needed here */
       subsystem_restart("wcnss");
       msleep(5000);
   }
   hdd_set_ssr_required (VOS_FALSE);

   return -EIO;

success:
   EXIT();
   return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
11,59
11,60
11,61
11,62
11,63
11,64
11,65
11,66
11,67
11,68
11,69
11,70
11,71
11,72
11,73
11,74
11,75
11,76
11,77
11,78
11,79
11,80
11,81
11,82
11,83
11,84
11,85
11,86
11,87
11,88
11,89
11,90
11,91
11,92
11,93
11,94
11,95
11,96
11,97
11,98
11,99
11,100
11,101
11,102
11,103
11,104
11,105
11,106
11,107
11,108
11,109
11,110
11,111
11,112
11,113
11,114
11,115
11,116
11,117
11,118
11,119
11,120
11,121
11,122
11,123
11,124
11,125
11,126
11,127
11,128
11,129
11,130
11,131
11,132
11,133
11,134
11,135
11,136
11,137
11,138
11,139
11,140
11,141
11,142
11,143
11,144
11,145
11,146
11,147
11,148
11,149
11,150
11,151
11,152
11,153
11,154
11,155
11,156
11,157
11,158
11,159
11,160
11,161
11,162
11,163
11,164
11,165
11,166
11,167
11,168
11,169
11,170
11,171
11,172
11,173
11,174
11,175
11,176
11,177
11,178
11,179
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
99,100
99,101
99,102
99,103
100,101
102,103
105,106
107,108
108,109
109,110
111,112
112,113
112,114
113,114
115,116
115,117
116,117
118,119
120,121
121,122
121,123
121,124
122,123
124,125
126,127
127,128
127,129
128,129
131,132
132,133
132,134
133,134
133,135
134,135
137,138
139,140
140,141
140,142
141,142
143,144
144,145
146,147
147,148
147,149
148,149
148,150
149,150
152,153
154,155
155,156
155,157
155,158
156,157
158,159
160,161
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
169,170
169,171
169,172
169,173
170,171
172,173
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
183,186
184,185
186,187
188,189
190,191
190,192
191,192
191,193
192,193
194,195
196,197
196,198
197,198
198,199
198,200
198,201
198,202
199,200
201,202
204,205
206,207
208,209
209,210
209,211
210,211
210,212
211,212
214,215
216,217
217,218
217,219
218,219
218,220
219,220
220,221
220,222
221,222
221,223
222,223
224,225
226,227
227,228
230,231
230,232
231,232
231,233
232,233
234,235
236,237
238,239
239,240
239,241
240,241
240,242
241,242
244,245
246,247
247,248
247,249
248,249
248,250
249,250
253,254
254,255
254,256
255,256
255,257
256,257
260,261
261,262
261,263
262,263
262,264
263,264
267,268
268,269
268,270
269,270
271,272
272,273
272,274
273,274
276,277
277,278
277,279
278,279
280,281
281,282
281,283
282,283
285,286
286,287
286,288
287,288
289,290
290,291
290,292
291,292
294,295
295,296
295,297
296,297
298,299
299,300
299,301
300,301
300,302
301,302
305,306
306,307
306,308
307,308
309,310
310,311
310,312
311,312
311,313
312,313
316,317
317,318
317,319
318,319
320,321
321,322
321,323
322,323
325,326
326,327
326,328
327,328
329,330
330,331
330,332
331,332
334,335
335,336
335,337
336,337
338,339
339,340
339,341
340,341
343,344
344,345
344,346
345,346
347,348
348,349
348,350
349,350
352,353
353,354
353,355
354,355
356,357
357,358
357,359
358,359
361,362
362,363
362,364
363,364
365,366
367,368
368,369
368,370
369,370
371,372
372,373
372,374
373,374
376,377
377,378
377,379
378,379
380,381
381,382
381,383
382,383
385,386
386,387
386,388
386,389
387,388
389,390
390,391
390,392
391,392
394,395
396,397
397,398
397,399
397,400
398,399
400,401
401,402
401,403
402,403
405,406
407,408
408,409
408,410
409,410
411,412
412,413
412,414
413,414
413,415
414,415
418,419
419,420
419,421
420,421
422,423
423,424
423,425
424,425
427,428
428,429
428,430
429,430
431,432
433,434
434,435
434,436
435,436
435,437
436,437
439,440
441,442
442,443
442,444
443,444
443,445
444,445
447,448
447,449
448,449
448,450
449,450
451,452
453,454
453,455
453,456
454,455
456,457
457,458
457,459
458,459
461,462
463,464
463,465
464,465
464,466
465,466
465,467
466,467
469,470
471,472
471,473
472,473
473,474
473,475
473,476
473,477
474,475
476,477
479,480
481,482
483,484
484,485
484,486
484,487
485,486
487,488
487,489
488,489
491,492
492,493
492,494
493,494
496,497
497,498
497,499
498,499
500,501
500,502
501,502
503,504
505,506
505,507
506,507
506,508
507,508
509,510
511,512
511,513
512,513
513,514
513,515
513,516
513,517
513,518
514,515
516,517
519,520
521,522
523,524
525,526
526,527
526,528
527,528
527,529
528,529
531,532
531,533
532,533
532,534
533,534
537,538
538,539
538,540
538,541
538,542
539,540
541,542
544,545
544,546
545,546
545,547
546,547
550,551
550,552
551,552
551,553
553,554
553,555
554,555
556,557
558,559
559,560
559,561
560,561
560,562
562,563
562,564
563,564
563,565
564,565
568,569
568,570
569,570
570,571
570,572
570,573
570,574
571,572
573,574
576,577
578,579
579,580
579,581
580,581
580,582
581,582
581,583
582,583
587,588
587,589
588,589
588,590
590,591
590,592
591,592
591,593
592,593
596,597
596,598
597,598
598,599
598,600
598,601
598,602
599,600
601,602
604,605
606,607
607,608
607,609
608,609
608,610
609,610
609,611
610,611
615,616
615,617
616,617
616,618
617,618
619,620
620,621
622,623
623,624
623,625
624,625
624,626
626,627
626,628
626,629
626,630
627,628
629,630
631,632
633,634
633,635
634,635
637,638
637,639
638,639
639,640
639,641
639,642
639,643
640,641
642,643
645,646
647,648
649,650
650,651
650,652
650,653
651,652
653,654
655,656
655,657
656,657
656,658
657,658
661,662
662,663
662,664
662,665
663,664
665,666
667,668
667,669
668,669
668,670
669,670
673,674
674,675
674,676
674,677
675,676
677,678
679,680
679,681
680,681
680,682
681,682
685,686
686,687
686,688
686,689
687,688
689,690
691,692
691,693
692,693
692,694
693,694
697,698
698,699
698,700
698,701
699,700
701,702
703,704
703,705
704,705
704,706
705,706
709,710
710,711
710,712
710,713
711,712
713,714
715,716
715,717
716,717
716,718
717,718
721,722
722,723
722,724
722,725
723,724
725,726
727,728
727,729
728,729
728,730
729,730
733,734
734,735
734,736
734,737
735,736
737,738
739,740
739,741
740,741
740,742
741,742
745,746
746,747
746,748
746,749
747,748
749,750
751,752
751,753
752,753
752,754
753,754
757,758
758,759
758,760
758,761
759,760
761,762
763,764
763,765
764,765
764,766
765,766
769,770
770,771
770,772
770,773
771,772
773,774
775,776
775,777
776,777
776,778
777,778
781,782
782,783
782,784
782,785
783,784
785,786
787,788
787,789
788,789
788,790
789,790
793,794
794,795
794,796
794,797
795,796
797,798
799,800
799,801
800,801
800,802
801,802
805,806
806,807
806,808
806,809
807,808
809,810
811,812
811,813
812,813
812,814
813,814
817,818
818,819
818,820
818,821
819,820
821,822
823,824
823,825
824,825
824,826
825,826
829,830
830,831
830,832
830,833
831,832
833,834
835,836
835,837
836,837
836,838
837,838
841,842
841,843
842,843
842,844
843,844
845,846
846,847
848,849
848,850
848,851
848,852
848,853
849,850
849,851
850,851
850,852
851,852
853,854
853,855
854,855
856,857
858,859
858,860
859,860
860,861
860,862
860,863
860,864
861,862
863,864
866,867
868,869
870,871
871,872
871,873
871,874
871,875
872,873
874,875
877,878
879,880
880,881
880,882
881,882
881,883
882,883
885,886
887,888
888,889
888,890
888,891
889,890
891,892
893,894
895,896
896,897
898,899
898,900
899,900
899,901
900,901
902,903
903,904
905,906
905,907
905,908
905,909
905,910
906,907
906,908
907,908
907,909
908,909
910,911
910,912
911,912
913,914
915,916
915,917
916,917
917,918
917,919
917,920
917,921
918,919
920,921
923,924
925,926
927,928
928,929
928,930
928,931
928,932
929,930
931,932
934,935
936,937
937,938
937,939
938,939
938,940
939,940
942,943
944,945
945,946
945,947
945,948
946,947
948,949
950,951
952,953
953,954
955,956
955,957
956,957
956,958
957,958
957,959
958,959
962,963
962,964
963,964
964,965
964,966
965,966
967,968
967,969
967,970
967,971
968,969
970,971
972,973
973,974
973,975
974,975
975,976
975,977
976,977
976,978
977,978
979,980
981,982
984,985
985,986
985,987
986,987
989,990
989,991
990,991
991,992
991,993
992,993
994,995
996,997
996,998
997,998
998,999
998,1000
998,1001
998,1002
999,1000
1001,1002
1004,1005
1006,1007
1008,1009
1009,1010
1009,1011
1010,1011
1010,1012
1011,1012
1014,1015
1016,1017
1017,1018
1017,1019
1017,1020
1018,1019
1020,1021
1022,1023
1024,1025
1024,1026
1025,1026
1025,1027
1026,1027
1027,1028
1030,1031
1030,1032
1031,1032
1032,1033
1032,1034
1032,1035
1032,1036
1033,1034
1035,1036
1038,1039
1040,1041
1042,1043
1043,1044
1043,1045
1044,1045
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1052,1053
1053,1054
1053,1055
1054,1055
1056,1057
1056,1058
1056,1059
1057,1058
1059,1060
1060,1061
1062,1063
1062,1064
1063,1064
1066,1067
1066,1068
1067,1068
1068,1069
1068,1070
1069,1070
1071,1072
1073,1074
1073,1075
1074,1075
1075,1076
1075,1077
1075,1078
1075,1079
1076,1077
1078,1079
1081,1082
1083,1084
1085,1086
1086,1087
1086,1088
1087,1088
1087,1089
1088,1089
1091,1092
1091,1093
1092,1093
1092,1094
1093,1094
1096,1097
1096,1098
1096,1099
1097,1098
1099,1100
1101,1102
1103,1104
1103,1105
1104,1105
1104,1106
1105,1106
1107,1108
1107,1109
1108,1109
1111,1112
1111,1113
1112,1113
1113,1114
1113,1115
1113,1116
1113,1117
1114,1115
1116,1117
1119,1120
1121,1122
1123,1124
1124,1125
1124,1126
1125,1126
1127,1128
1127,1129
1128,1129
1130,1131
1130,1132
1131,1132
1134,1135
1134,1136
1135,1136
1136,1137
1136,1138
1137,1138
1139,1140
1141,1142
1141,1143
1142,1143
1143,1144
1143,1145
1143,1146
1143,1147
1144,1145
1146,1147
1149,1150
1151,1152
1153,1154
1153,1155
1154,1155
1154,1156
1155,1156
1155,1157
1157,1158
1159,1160
1159,1161
1161,1162
1163,1164
1163,1165
1164,1165
1165,1166
1165,1167
1166,1167
1166,1168
1167,1168
1167,1169
1168,1169
1172,1173
1174,1175
1175,1176
1175,1177
1175,1178
1175,1179
1175,1180
1176,1177
1178,1179
1181,1182
1183,1184
1185,1186
1185,1187
1186,1187
1186,1188
1187,1188
1187,1189
1189,1190
1191,1192
1191,1193
1193,1194
1195,1196
1195,1197
1196,1197
1197,1198
1197,1199
1198,1199
1198,1200
1199,1200
1199,1201
1200,1201
1204,1205
1206,1207
1207,1208
1207,1209
1207,1210
1207,1211
1207,1212
1208,1209
1210,1211
1213,1214
1215,1216
1217,1218
1218,1219
1218,1220
1219,1220
1221,1222
1221,1223
1222,1223
1224,1225
1226,1227
1226,1228
1227,1228
1227,1229
1228,1229
1230,1231
1232,1233
1232,1234
1233,1234
1234,1235
1234,1236
1234,1237
1234,1238
1235,1236
1237,1238
1240,1241
1242,1243
1244,1245
1244,1246
1245,1246
1245,1247
1246,1247
1248,1249
1248,1250
1249,1250
1251,1252
1253,1254
1253,1255
1254,1255
1255,1256
1255,1257
1255,1258
1255,1259
1256,1257
1258,1259
1261,1262
1263,1264
1265,1266
1266,1267
1266,1268
1267,1268
1269,1270
1269,1271
1270,1271
1272,1273
1272,1274
1273,1274
1273,1275
1275,1276
1277,1278
1278,1279
1278,1280
1279,1280
1282,1283
1282,1284
1282,1285
1283,1284
1283,1285
1284,1285
1285,1286
1285,1287
1287,1288
1289,1290
1290,1291
1291,1292
1291,1293
1292,1293
1294,1295
1295,1296
1297,1298
1297,1299
1297,1300
1298,1299
1299,1300
1299,1301
1300,1301
1300,1302
1301,1302
1301,1303
1302,1303
1302,1304
1303,1304
1308,1309
1310,1311
1311,1312
1311,1313
1312,1313
1312,1314
1314,1315
1314,1316
1314,1317
1314,1318
1315,1316
1317,1318
1320,1321
1322,1323
1323,1324
1324,1325
1324,1326
1324,1327
1324,1328
1325,1326
1327,1328
1330,1331
1332,1333
1332,1334
1333,1334
1333,1335
1334,1335
1336,1337
1336,1338
1337,1338
1339,1340
1341,1342
1342,1343
1343,1344
1344,1345
1344,1346
1344,1347
1345,1346
1346,1347
1346,1348
1347,1348
1349,1350
1351,1352
1352,1353
1352,1354
1353,1354
1355,1356
1355,1357
1355,1358
1355,1359
1355,1360
1356,1357
1358,1359
1358,1360
1359,1360
1362,1363
1364,1365
1364,1366
1365,1366
1365,1367
1366,1367
1368,1369
1370,1371
1371,1372
1371,1373
1372,1373
1372,1374
1373,1374
1373,1375
1374,1375
1379,1380
1380,1381
1381,1382
1381,1383
1382,1383
1382,1384
1383,1384
1383,1385
1384,1385
1389,1390
1389,1391
1390,1391
1391,1392
1391,1393
1392,1393
1394,1395
1396,1397
1396,1398
1397,1398
1398,1399
1398,1400
1398,1401
1398,1402
1398,1403
1398,1404
1399,1400
1401,1402
1404,1405
1406,1407
1408,1409
1410,1411
1412,1413
1413,1414
1413,1415
1414,1415
1416,1417
1416,1418
1417,1418
1419,1420
1419,1421
1420,1421
1423,1424
1423,1425
1424,1425
1425,1426
1425,1427
1426,1427
1428,1429
1430,1431
1430,1432
1430,1433
1431,1432
1432,1433
1432,1434
1432,1435
1432,1436
1433,1434
1435,1436
1438,1439
1440,1441
1440,1442
1441,1442
1442,1443
1444,1445
1445,1446
1445,1447
1446,1447
1449,1450
1451,1452
1452,1453
1452,1454
1453,1454
1455,1456
1457,1458
1458,1459
1458,1460
1459,1460
1461,1462
1461,1463
1462,1463
1464,1465
1466,1467
1466,1468
1467,1468
1468,1469
1468,1470
1469,1470
1471,1472
1473,1474
1473,1475
1474,1475
1475,1476
1475,1477
1475,1478
1475,1479
1476,1477
1478,1479
1481,1482
1483,1484
1485,1486
1486,1487
1486,1488
1487,1488
1489,1490
1491,1492
1491,1493
1492,1493
1492,1494
1494,1495
1494,1496
1495,1496
1497,1498
1499,1500
1499,1501
1500,1501
1501,1502
1501,1503
1501,1504
1501,1505
1502,1503
1504,1505
1507,1508
1509,1510
1511,1512
1512,1513
1512,1514
1512,1515
1513,1514
1515,1516
1515,1517
1516,1517
1519,1520
1521,1522
1521,1523
1521,1524
1522,1523
1522,1524
1523,1524
1525,1526
1526,1527
1528,1529
1529,1530
1530,1531
1530,1532
1531,1532
1533,1534
1533,1535
1533,1536
1533,1537
1533,1538
1533,1539
1534,1535
1536,1537
1538,1539
1541,1542
1541,1543
1542,1543
1544,1545
1546,1547
1548,1549
1548,1550
1549,1550
1550,1551
1550,1552
1551,1552
1553,1554
1553,1555
1553,1556
1553,1557
1553,1558
1553,1559
1554,1555
1556,1557
1558,1559
1561,1562
1561,1563
1562,1563
1564,1565
1566,1567
1568,1569
1568,1570
1569,1570
1569,1571
1570,1571
1572,1573
1574,1575
1574,1576
1574,1577
1575,1576
1575,1577
1575,1578
1576,1577
1576,1578
1577,1578
1577,1579
1578,1579
1578,1580
1579,1580
1583,1584
1584,1585
1585,1586
1585,1587
1586,1587
1586,1588
1587,1588
1587,1589
1588,1589
1588,1590
1589,1590
1589,1591
1590,1591
1590,1592
1591,1592
1599,1600
1599,1601
1600,1601
1601,1602
1601,1603
1601,1604
1601,1605
1602,1603
1604,1605
1604,1606
1605,1606
1605,1607
1606,1607
1610,1611
1610,1612
1611,1612
1611,1613
1612,1613
1612,1614
1613,1614
1613,1615
1614,1615
1620,1621
1621,1622
1621,1623
1622,1623
1625,1626
1626,1627
1626,1628
1627,1628
1627,1629
1628,1629
1628,1630
1629,1630
1629,1631
1630,1631
1636,1637
1636,1638
1637,1638
1638,1639
1638,1640
1639,1640
1641,1642
1641,1643
1641,1644
1644,1645
1645,1646
1645,1647
1646,1647
1648,1649
1650,1651
1650,1652
1650,1653
1651,1652
1651,1653
1652,1653
1654,1655
1656,1657
1657,1658
1658,1659
1658,1660
1658,1661
1658,1662
1659,1660
1661,1662
1662,1663
1662,1664
1663,1664
1663,1665
1664,1665
1664,1666
1665,1666
1670,1671
1672,1673
1674,1675
1674,1676
1675,1676
1676,1677
1676,1678
1676,1679
1676,1680
1677,1678
1679,1680
1682,1683
1684,1685
1686,1687
1687,1688
1687,1689
1688,1689
1690,1691
1690,1692
1690,1693
1690,1694
1690,1695
1690,1696
1691,1692
1693,1694
1695,1696
1698,1699
1699,1700
1699,1701
1700,1701
1700,1702
1701,1702
1701,1703
1702,1703
1707,1708
1709,1710
1709,1711
1710,1711
1710,1712
1711,1712
1713,1714
1715,1716
1715,1717
1716,1717
1717,1718
1717,1719
1717,1720
1717,1721
1718,1719
1720,1721
1723,1724
1725,1726
1727,1728
1727,1729
1728,1729
1728,1730
1729,1730
1731,1732
1733,1734
1733,1735
1734,1735
1735,1736
1735,1737
1735,1738
1735,1739
1736,1737
1738,1739
1741,1742
1743,1744
1745,1746
1745,1747
1746,1747
1748,1749
1748,1750
1748,1751
1748,1752
1748,1753
1748,1754
1749,1750
1750,1751
1750,1752
1751,1752
1753,1754
1755,1756
1756,1757
1756,1758
1757,1758
1759,1760
1759,1761
1760,1761
1763,1764
1764,1765
1764,1766
1764,1767
1765,1766
1767,1768
1769,1770
1771,1772
1772,1773
1772,1774
1772,1775
1773,1774
1775,1776
1777,1778
1779,1780
1780,1781
1780,1782
1781,1782
1783,1784
1783,1785
1783,1786
1783,1787
1783,1788
1783,1789
1783,1790
1783,1791
1784,1785
1786,1787
1786,1788
1787,1788
1790,1791
1790,1792
1791,1792
1791,1793
1793,1794
1795,1796
1795,1797
1796,1797
1796,1798
1797,1798
1800,1801
1802,1803
1804,1805
1806,1807
1806,1808
1807,1808
1810,1811
1812,1813
1814,1815
1814,1816
1814,1817
1815,1816
1815,1817
1816,1817
1818,1819
1820,1821
1820,1822
1821,1822
1822,1823
1822,1824
1823,1824
1825,1826
1825,1827
1825,1828
1826,1827
1828,1829
1829,1830
1829,1831
1830,1831
1833,1834
1833,1835
1834,1835
1836,1837
1838,1839
1838,1840
1839,1840
1839,1841
1841,1842
1843,1844
1844,1845
1845,1846
1845,1847
1845,1848
1845,1849
1845,1850
1846,1847
1848,1849
1850,1851
1853,1854
1855,1856
1856,1857
1857,1858
1857,1859
1857,1860
1857,1861
1857,1862
1857,1863
1858,1859
1860,1861
1862,1863
1865,1866
1867,1868
1869,1870
1869,1871
1870,1871
1870,1872
1871,1872
1873,1874
1873,1875
1874,1875
1874,1876
1875,1876
1879,1880
1880,1881
1880,1882
1880,1883
1881,1882
1883,1884
1883,1885
1884,1885
1885,1886
1885,1887
1885,1888
1885,1889
1886,1887
1888,1889
1891,1892
1893,1894
1894,1895
1894,1896
1895,1896
1895,1897
1896,1897
1896,1898
1897,1898
1901,1902
1903,1904
1903,1905
1904,1905
1905,1906
1905,1907
1905,1908
1905,1909
1906,1907
1908,1909
1911,1912
1913,1914
1914,1915
1914,1916
1915,1916
1915,1917
1916,1917
1916,1918
1917,1918
1921,1922
1923,1924
1924,1925
1924,1926
1925,1926
1927,1928
1929,1930
1930,1931
1930,1932
1931,1932
1933,1934
1934,1935
1934,1936
1935,1936
1938,1939
1939,1940
1939,1941
1939,1942
1940,1941
1942,1943
1943,1944
1943,1945
1944,1945
1944,1946
1945,1946
1949,1950
1951,1952
1952,1953
1952,1954
1952,1955
1953,1954
1955,1956
1955,1957
1956,1957
1959,1960
1961,1962
1962,1963
1962,1964
1963,1964
1965,1966
1965,1967
1966,1967
1968,1969
1970,1971
1970,1972
1971,1972
1972,1973
1972,1974
1973,1974
1975,1976
1977,1978
1977,1979
1978,1979
1979,1980
1979,1981
1979,1982
1979,1983
1980,1981
1982,1983
1985,1986
1987,1988
1989,1990
1989,1991
1990,1991
1990,1992
1991,1992
1993,1994
1993,1995
1994,1995
1996,1997
1998,1999
1999,2000
2000,2001
2000,2002
2000,2003
2000,2004
2000,2005
2001,2002
2003,2004
2005,2006
2008,2009
2010,2011
2011,2012
2011,2013
2012,2013
2014,2015
2014,2016
2015,2016
2017,2018
2019,2020
2019,2021
2020,2021
2021,2022
2021,2023
2022,2023
2024,2025
2026,2027
2026,2028
2027,2028
2028,2029
2028,2030
2028,2031
2028,2032
2029,2030
2031,2032
2034,2035
2036,2037
2038,2039
2039,2040
2039,2041
2040,2041
2042,2043
2042,2044
2043,2044
2045,2046
2046,2047
2048,2049
2048,2050
2049,2050
2049,2051
2050,2051
2053,2054
2053,2055
2054,2055
2055,2056
2055,2057
2055,2058
2055,2059
2056,2057
2058,2059
2061,2062
2063,2064
2065,2066
2065,2067
2066,2067
2066,2068
2067,2068
2067,2069
2068,2069
2070,2071
2073,2074
2073,2075
2074,2075
2075,2076
2075,2077
2075,2078
2075,2079
2076,2077
2078,2079
2081,2082
2083,2084
2085,2086
2085,2087
2086,2087
2087,2088
2089,2090
2090,2091
2091,2092
2093,2094
2094,2095
2094,2096
2095,2096
2097,2098
2099,2100
2099,2101
2100,2101
2100,2102
2101,2102
2103,2104
2104,2105
2106,2107
2107,2108
2108,2109
2108,2110
2109,2110
2111,2112
2113,2114
2114,2115
2114,2116
2115,2116
2117,2118
2118,2119
2118,2120
2119,2120
2122,2123
2123,2124
2123,2125
2124,2125
2126,2127
2127,2128
2127,2129
2128,2129
2131,2132
2132,2133
2132,2134
2132,2135
2133,2134
2135,2136
2136,2137
2136,2138
2137,2138
2141,2142
2142,2143
2142,2144
2143,2144
2145,2146
2146,2147
2146,2148
2147,2148
2147,2149
2148,2149
2152,2153
2153,2154
2153,2155
2154,2155
2154,2156
2155,2156
2155,2157
2156,2157
2160,2161
2162,2163
2163,2164
2163,2165
2164,2165
2164,2166
2165,2166
2168,2169
2170,2171
2171,2172
2171,2173
2171,2174
2172,2173
2174,2175
2176,2177
2178,2179
2179,2180
2179,2181
2180,2181
2182,2183
2184,2185
2185,2186
2185,2187
2186,2187
2188,2189
2188,2190
2189,2190
2192,2193
2193,2194
2193,2195
2193,2196
2194,2195
2196,2197
2196,2198
2197,2198
2199,2200
2201,2202
2201,2203
2202,2203
2204,2205
2204,2206
2205,2206
2205,2207
2206,2207
2210,2211
2211,2212
2211,2213
2212,2213
2214,2215
2214,2216
2215,2216
2218,2219
2218,2220
2219,2220
2221,2222
2222,2223
2223,2224
2223,2225
2223,2226
2224,2225
2226,2227
2229,2230
2230,2231
2230,2232
2231,2232
2233,2234
2235,2236
2235,2237
2236,2237
2236,2238
2237,2238
2237,2239
2238,2239
2242,2243
2243,2244
2244,2245
2244,2246
2244,2247
2244,2248
2244,2249
2245,2246
2247,2248
2248,2249
2248,2250
2249,2250
2252,2253
2254,2255
2256,2257
2256,2258
2257,2258
2257,2259
2259,2260
2261,2262
2263,2264
2264,2265
2264,2266
2265,2266
2267,2268
2269,2270
2270,2271
2270,2272
2271,2272
2273,2274
2274,2275
2274,2276
2275,2276
2278,2279
2279,2280
2279,2281
2279,2282
2279,2283
2279,2284
2280,2281
2282,2283
2283,2284
2283,2285
2284,2285
2287,2288
2289,2290
2291,2292
2291,2293
2292,2293
2292,2294
2294,2295
2296,2297
2298,2299
2299,2300
2299,2301
2299,2302
2299,2303
2299,2304
2300,2301
2302,2303
2303,2304
2303,2305
2304,2305
2307,2308
2309,2310
2311,2312
2311,2313
2312,2313
2312,2314
2314,2315
2316,2317
2318,2319
2319,2320
2319,2321
2319,2322
2320,2321
2322,2323
2322,2324
2323,2324
2326,2327
2328,2329
2329,2330
2329,2331
2330,2331
2330,2332
2331,2332
2331,2333
2332,2333
2336,2337
2338,2339
2339,2340
2339,2341
2340,2341
2342,2343
2342,2344
2343,2344
2345,2346
2346,2347
2346,2348
2347,2348
2350,2351
2350,2352
2350,2353
2351,2352
2353,2354
2354,2355
2355,2356
2355,2357
2355,2358
2356,2357
2358,2359
2360,2361
2360,2362
2361,2362
2364,2365
2365,2366
2366,2367
2366,2368
2366,2369
2367,2368
2369,2370
2371,2372
2371,2373
2372,2373
2375,2376
2376,2377
2377,2378
2379,2380
2380,2381
2380,2382
2381,2382
2383,2384
2385,2386
2387,2388
2387,2389
2389,2390
2390,2391
2390,2392
2391,2392
2393,2394
2394,2395
2394,2396
2397,2398
2397,2399
2399,2400
2400,2401
2400,2402
2401,2402
2403,2404
2405,2406
2406,2407
2406,2408
2407,2408
2409,2410
2411,2412
2412,2413
2412,2414
2413,2414
2415,2416
2417,2418
2417,2419
2419,2420
2420,2421
2420,2422
2421,2422
2423,2424
2425,2426
2426,2427
2426,2428
2427,2428
2429,2430
2431,2432
2432,2433
2432,2434
2433,2434
2435,2436
2437,2438
2437,2439
2439,2440
2440,2441
2440,2442
2441,2442
2443,2444
2445,2446
2445,2447
2447,2448
2448,2449
2448,2450
2449,2450
2451,2452
2451,2453
2452,2453
2454,2455
2456,2457
2456,2458
2457,2458
2458,2459
2458,2460
2459,2460
2461,2462
2463,2464
2463,2465
2464,2465
2465,2466
2465,2467
2465,2468
2465,2469
2465,2470
2466,2467
2468,2469
2470,2471
2473,2474
2475,2476
2476,2477
2476,2478
2477,2478
2479,2480
2479,2481
2480,2481
2482,2483
2484,2485
2485,2486
2485,2487
2486,2487
2488,2489
2490,2491
2490,2492
2492,2493
2493,2494
2494,2495
2496,2497
2496,2498
2498,2499
2498,2500
2500,2501
2500,2502
2501,2502
2501,2503
2502,2503
2502,2504
2503,2504
2507,2508
2508,2509
2508,2510
2509,2510
2511,2512
2513,2514
2513,2515
2515,2516
2516,2517
2516,2518
2517,2518
2519,2520
2519,2521
2520,2521
2523,2524
2524,2525
2524,2526
2525,2526
2525,2527
2526,2527
2529,2530
2531,2532
2531,2533
2533,2534
2534,2535
2534,2536
2535,2536
2537,2538
2539,2540
2540,2541
2540,2542
2541,2542
2544,2545
2545,2546
2545,2547
2546,2547
2548,2549
2550,2551
2551,2552
2551,2553
2552,2553
2555,2556
2555,2557
2556,2557
2557,2558
2559,2560
2559,2561
2560,2561
2561,2562
2561,2563
2562,2563
2565,2566
2566,2567
2566,2568
2567,2568
2570,2571
2571,2572
2571,2573
2572,2573
2574,2575
2575,2576
2577,2578
2578,2579
2579,2580
2581,2582
2581,2583
2583,2584
2584,2585
2585,2586
2587,2588
-----nextToken-----
2,4,7,9,10,15,17,21,23,24,27,31,33,34,37,41,43,44,47,51,53,56,59,61,65,67,68,72,74,78,82,85,89,90,94,96,101,103,104,106,110,114,117,119,123,125,129,130,135,136,138,142,145,150,151,153,157,159,161,165,166,171,173,174,176,178,182,185,187,189,193,195,200,202,203,205,207,212,213,215,223,225,228,229,233,235,237,242,243,245,250,251,252,257,258,259,264,265,266,270,274,275,279,283,284,288,292,293,297,302,303,304,308,313,314,315,319,323,324,328,332,333,337,341,342,346,350,351,355,359,360,364,366,370,374,375,379,383,384,388,392,393,395,399,403,404,406,410,415,416,417,421,425,426,430,432,437,438,440,445,446,450,452,455,459,460,462,467,468,470,475,477,478,480,482,486,489,490,494,495,499,502,504,508,510,515,517,518,520,522,524,529,530,534,535,536,540,542,543,547,548,549,552,555,557,561,565,566,567,572,574,575,577,583,584,585,586,589,593,594,595,600,602,603,605,611,612,613,614,618,621,625,628,630,632,635,636,641,643,644,646,648,652,654,658,659,660,664,666,670,671,672,676,678,682,683,684,688,690,694,695,696,700,702,706,707,708,712,714,718,719,720,724,726,730,731,732,736,738,742,743,744,748,750,754,755,756,760,762,766,767,768,772,774,778,779,780,784,786,790,791,792,796,798,802,803,804,808,810,814,815,816,820,822,826,827,828,832,834,838,839,840,844,847,852,855,857,862,864,865,867,869,873,875,876,878,883,884,886,890,892,894,897,901,904,909,912,914,919,921,922,924,926,930,932,933,935,940,941,943,947,949,951,954,959,960,961,966,969,971,978,980,982,983,987,988,993,995,1000,1002,1003,1005,1007,1012,1013,1015,1019,1021,1023,1028,1029,1034,1036,1037,1039,1041,1045,1049,1050,1051,1055,1058,1061,1064,1065,1070,1072,1077,1079,1080,1082,1084,1089,1090,1094,1095,1098,1100,1102,1106,1109,1110,1115,1117,1118,1120,1122,1126,1129,1132,1133,1138,1140,1145,1147,1148,1150,1152,1156,1158,1160,1162,1169,1170,1171,1173,1177,1179,1180,1182,1184,1188,1190,1192,1194,1201,1202,1203,1205,1209,1211,1212,1214,1216,1220,1223,1225,1229,1231,1236,1238,1239,1241,1243,1247,1250,1252,1257,1259,1260,1262,1264,1268,1271,1274,1276,1280,1281,1286,1288,1293,1296,1304,1305,1306,1307,1309,1313,1316,1318,1319,1321,1326,1328,1329,1331,1335,1338,1340,1348,1350,1354,1357,1360,1361,1363,1367,1369,1375,1376,1377,1378,1385,1386,1387,1388,1393,1395,1400,1402,1403,1405,1407,1409,1411,1415,1418,1421,1422,1427,1429,1434,1436,1437,1439,1443,1447,1448,1450,1454,1456,1460,1463,1465,1470,1472,1477,1479,1480,1482,1484,1488,1490,1493,1496,1498,1503,1505,1506,1508,1510,1514,1517,1518,1520,1524,1527,1532,1535,1537,1539,1540,1543,1545,1547,1552,1555,1557,1559,1560,1563,1565,1567,1571,1573,1580,1581,1582,1592,1593,1594,1595,1596,1597,1598,1603,1607,1608,1609,1615,1616,1617,1618,1619,1623,1624,1631,1632,1633,1634,1635,1640,1642,1643,1647,1649,1653,1655,1660,1666,1667,1668,1669,1671,1673,1678,1680,1681,1683,1685,1689,1692,1694,1696,1697,1703,1704,1705,1706,1708,1712,1714,1719,1721,1722,1724,1726,1730,1732,1737,1739,1740,1742,1744,1747,1752,1754,1758,1761,1762,1766,1768,1770,1774,1776,1778,1782,1785,1788,1789,1792,1794,1798,1799,1801,1803,1805,1808,1809,1811,1813,1817,1819,1824,1827,1831,1832,1835,1837,1840,1842,1847,1849,1851,1852,1854,1859,1861,1863,1864,1866,1868,1872,1876,1877,1878,1882,1887,1889,1890,1892,1898,1899,1900,1902,1907,1909,1910,1912,1918,1919,1920,1922,1926,1928,1932,1936,1937,1941,1946,1947,1948,1950,1954,1957,1958,1960,1964,1967,1969,1974,1976,1981,1983,1984,1986,1988,1992,1995,1997,2002,2004,2006,2007,2009,2013,2016,2018,2023,2025,2030,2032,2033,2035,2037,2041,2044,2047,2051,2052,2057,2059,2060,2062,2064,2069,2071,2072,2077,2079,2080,2082,2084,2088,2092,2096,2098,2102,2105,2110,2112,2116,2120,2121,2125,2129,2130,2134,2138,2139,2140,2144,2149,2150,2151,2157,2158,2159,2161,2166,2167,2169,2173,2175,2177,2181,2183,2187,2190,2191,2195,2198,2200,2203,2207,2208,2209,2213,2216,2217,2220,2225,2227,2228,2232,2234,2239,2240,2241,2246,2250,2251,2253,2255,2258,2260,2262,2266,2268,2272,2276,2277,2281,2285,2286,2288,2290,2293,2295,2297,2301,2305,2306,2308,2310,2313,2315,2317,2321,2324,2325,2327,2333,2334,2335,2337,2341,2344,2348,2349,2352,2357,2359,2362,2363,2368,2370,2373,2374,2378,2382,2384,2386,2388,2392,2395,2396,2398,2402,2404,2408,2410,2414,2416,2418,2422,2424,2428,2430,2434,2436,2438,2442,2444,2446,2450,2453,2455,2460,2462,2467,2469,2471,2472,2474,2478,2481,2483,2487,2489,2491,2495,2497,2499,2504,2505,2506,2510,2512,2514,2518,2521,2522,2527,2528,2530,2532,2536,2538,2542,2543,2547,2549,2553,2554,2558,2563,2564,2568,2569,2573,2576,2580,2582,2586,2588
-----computeFrom-----
80,81
80,82
92,93
92,94
112,113
112,114
132,133
132,134
147,148
147,149
180,181
180,182
191,192
191,193
209,210
209,211
217,218
217,219
239,240
239,241
247,248
247,249
254,255
254,256
261,262
261,263
434,435
434,436
442,443
442,444
464,465
464,466
497,498
497,499
506,507
506,508
526,527
526,528
551,552
551,553
560,561
560,562
579,580
579,581
588,589
588,590
607,608
607,609
616,617
616,618
624,625
624,626
842,843
842,844
850,851
850,852
880,881
880,882
899,900
899,901
907,908
907,909
937,938
937,939
964,965
964,966
1009,1010
1009,1011
1025,1026
1025,1027
1053,1054
1053,1055
1086,1087
1086,1088
1104,1105
1104,1106
1124,1125
1124,1126
1154,1155
1154,1156
1155,1156
1155,1157
1159,1160
1159,1161
1165,1166
1165,1167
1186,1187
1186,1188
1187,1188
1187,1189
1191,1192
1191,1193
1197,1198
1197,1199
1218,1219
1218,1220
1227,1228
1227,1229
1245,1246
1245,1247
1266,1267
1266,1268
1283,1284
1283,1285
1285,1286
1285,1287
1299,1300
1299,1301
1312,1313
1312,1314
1333,1334
1333,1335
1352,1353
1352,1354
1413,1414
1413,1415
1458,1459
1458,1460
1492,1493
1492,1494
1522,1523
1522,1524
1530,1531
1530,1532
1550,1551
1550,1552
1569,1570
1569,1571
1576,1577
1576,1578
1585,1586
1585,1587
1626,1627
1626,1628
1651,1652
1651,1653
1687,1688
1687,1689
1710,1711
1710,1712
1728,1729
1728,1730
1780,1781
1780,1782
1815,1816
1815,1817
1822,1823
1822,1824
1839,1840
1839,1841
1870,1871
1870,1872
1894,1895
1894,1896
1914,1915
1914,1916
1962,1963
1962,1964
1990,1991
1990,1992
2011,2012
2011,2013
2039,2040
2039,2041
2049,2050
2049,2051
2066,2067
2066,2068
2100,2101
2100,2102
2153,2154
2153,2155
2163,2164
2163,2165
2329,2330
2329,2331
2339,2340
2339,2341
2448,2449
2448,2450
2524,2525
2524,2526
-----guardedBy-----
557,583
566,584
565,583
567,585
594,612
593,611
1162,1184
1194,1216
1296,1321
1573,1712
1593,1616
1596,1633
1594,1617
1592,1631
1653,1671
1819,1842
1877,1919
1878,1920
1876,1918
-----guardedByNegation-----
1596,1668
1592,1666
1819,1868
-----lastLexicalUse-----
1596,1668
1592,1666
1819,1868
-----jump-----
1596,1668
1592,1666
1819,1868
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LabelStatement;Name;LabelStatement;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int hdd_wlan_startup(struct device *dev ){   VOS_STATUS status;   hdd_adapter_t *pAdapter = NULL;   hdd_adapter_t *pP2pAdapter = NULL;   hdd_context_t *pHddCtx = NULL;   v_CONTEXT_t pVosContext= NULL;#ifdef WLAN_BTAMP_FEATURE   VOS_STATUS vStatus = VOS_STATUS_SUCCESS;   WLANBAP_ConfigType btAmpConfig;   hdd_config_t *pConfig;#endif   int ret;   struct wiphy *wiphy;   v_MACADDR_t mac_addr;   ENTER();   /*    * cfg80211: wiphy allocation    */   wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;   if(wiphy == NULL)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }   pHddCtx = wiphy_priv(wiphy);   //Initialize the adapter context to zeros.   vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));   pHddCtx->wiphy = wiphy;   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);   /* register for riva power on lock to platform driver    * Locking power early to ensure FW doesn't reset by kernel while    * host driver is busy initializing itself */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }   /*Get vos context here bcoz vos_open requires it*/   pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);   if(pVosContext == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }   //Save the Global VOSS context in adapter context for future.   pHddCtx->pvosContext = pVosContext;   //Save the adapter context in global context for future.   ((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;   pHddCtx->parent_dev = dev;   pHddCtx->last_scan_reject_session_id = 0;   pHddCtx->last_scan_reject_reason = 0xFF;   pHddCtx->last_scan_reject_timestamp = 0;   init_completion(&pHddCtx->full_pwr_comp_var);   init_completion(&pHddCtx->standby_comp_var);   init_completion(&pHddCtx->req_bmps_comp_var);   init_completion(&pHddCtx->scan_info.scan_req_completion_event);   init_completion(&pHddCtx->scan_info.abortscan_event_var);   init_completion(&pHddCtx->wiphy_channel_update_event);   init_completion(&pHddCtx->ssr_comp_var);   init_completion(&pHddCtx->mc_sus_event_var);   init_completion(&pHddCtx->tx_sus_event_var);   init_completion(&pHddCtx->rx_sus_event_var);   hdd_init_ll_stats_ctx(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   init_completion(&pHddCtx->linux_reg_req);#else   init_completion(&pHddCtx->driver_crda_req);#endif#ifdef WLAN_FEATURE_EXTSCAN   init_completion(&pHddCtx->ext_scan_context.response_event);#endif /* WLAN_FEATURE_EXTSCAN */   spin_lock_init(&pHddCtx->schedScan_lock);   hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );   vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest);#ifdef FEATURE_WLAN_TDLS   /* tdls_lock is initialized before an hdd_open_adapter ( which is    * invoked by other instances also) to protect the concurrent    * access for the Adapters by TDLS module.    */   mutex_init(&pHddCtx->tdls_lock);#endif   mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);   mutex_init(&pHddCtx->wmmLock);   hdd_init_offloaded_packets_ctx(pHddCtx);   /* By default Strict Regulatory For FCC should be false */   pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;   // Load all config first as TL config is needed during vos_open   pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);   if(pHddCtx->cfg_ini == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }   vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));   // Read and parse the qcom_cfg.ini file   status = hdd_parse_config_ini( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }#ifdef MEMORY_DEBUG   if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)      vos_mem_init();   hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled);#endif   /* INI has been read, initialise the configuredMcastBcastFilter with    * INI value as this will serve as the default value    */   pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;   hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting);   if (false == hdd_is_5g_supported(pHddCtx))   {      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }   /* If SNR Monitoring is enabled, FW has to parse all beacons    * for calcaluting and storing the average SNR, so set Nth beacon    * filter to 1 to enable FW to parse all the beaocons    */   if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)   {      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }   /*    * cfg80211: Initialization  ...    */   if (VOS_FTM_MODE != hdd_get_conparam())   {      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }   // Update VOS trace levels based upon the cfg.ini   hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP);   hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL);   hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD);   hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME);   hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE);   hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC);   hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA);   hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS);   hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS);   hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);   // Update WDI trace levels based upon the cfg.ini   hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT);   hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL);   if (VOS_FTM_MODE == hdd_get_conparam())   {      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }   if( VOS_MONITOR_MODE == hdd_get_conparam())   {       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }   //Open watchdog module   if(pHddCtx->cfg_ini->fIsLogpEnabled)   {      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }   pHddCtx->isLogpInProgress = FALSE;   vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);#ifdef CONFIG_ENABLE_LINUX_REG   /* initialize the NV module. This is required so that      we can initialize the channel information in wiphy      from the NV.bin data. The channel information in      wiphy needs to be initialized before wiphy registration */   status = vos_nv_open();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,                "%s: vos_nv_open failed", __func__);       goto err_wdclose;   }   status = vos_init_wiphy_from_nv_bin();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,               "%s: vos_init_wiphy failed", __func__);       goto err_vos_nv_close;   }#endif   //Initialize the nlink service   if(nl_srv_init() != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }#ifdef WLAN_KD_READY_NOTIFIER   pHddCtx->kd_nl_init = 1;#endif /* WLAN_KD_READY_NOTIFIER */   vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);   status = vos_open( &pVosContext, pHddCtx->parent_dev);   if ( !VOS_IS_STATUS_SUCCESS( status ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }   status = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }   if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)   {      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }   if (0 == enable_11d || 1 == enable_11d)   {      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }   /* Note that the vos_preStart() sequence triggers the cfg download.      The cfg download must occur before we update the SME config      since the SME config operation must access the cfg database */   status = hdd_set_sme_config( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   // Apply the cfg.ini to cfg.dat   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   // Get mac addr from platform driver   ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);   if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))   {      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }   {      eHalStatus halStatus;      /* Set the MAC Address Currently this is used by HAL to       * add self sta. Remove this once self sta is added as       * part of session open.       */      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );      if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }   }   /*Start VOSS which starts up the SME/MAC/HAL modules and everything else     Note: Firmware image will be read and downloaded inside vos_start API */   status = vos_start( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }#ifdef FEATURE_WLAN_CH_AVOID    /* Plug in avoid channel notification callback     * This should happen before ADD_SELF_STA     * FW will send first IND with ADD_SELF_STA REQ from host */    /* check the Channel Avoidance is enabled */   if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)   {       sme_AddChAvoidCallback(pHddCtx->hHal,                              hdd_hostapd_ch_avoid_cb);   }#endif /* FEATURE_WLAN_CH_AVOID */   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   status = wlan_hdd_init_channels(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",             __func__);      goto err_vosstop;   }#endif   status = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifndef CONFIG_ENABLE_LINUX_REG   wlan_hdd_cfg80211_update_reg_info( wiphy );   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }#endif#ifdef CONFIG_ENABLE_LINUX_REG   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }   status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",             __func__);      goto err_unregister_wiphy;   }#endif   wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);   if (VOS_STA_SAP_MODE == hdd_get_conparam())   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }   else   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }   if( pAdapter == NULL )   {      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }   if (country_code)   {      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }#ifdef WLAN_BTAMP_FEATURE   vStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_close_adapter;   }   vStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   status = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE   /*    * UapsdMask is 0xf if U-APSD is enbaled for all AC's...    * The value of CFG_QOS_WMM_UAPSD_MASK_DEFAULT is 0xaa(Magic Value)    * which is greater than 0xf. So the below check is safe to make    * sure that there is no entry for UapsdMask in the ini    */   if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)   {       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }#ifdef WLAN_FEATURE_ROAM_SCAN_OFFLOAD   if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE))   {      hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__);      pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0;      sme_UpdateRoamScanOffloadEnabled((tHalHandle)(pHddCtx->hHal),                       pHddCtx->cfg_ini->isRoamOffloadScanEnabled);   }#endif   wlan_hdd_tdls_init(pHddCtx);   wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);   vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan);   sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);   /* Register with platform driver as client for Suspend/Resume */   status = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }   /* Open debugfs interface */   if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))   {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }   /* Register TM level change handler function to the platform */   status = hddDevTmRegisterNotifyCallback(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }   // register net device notifier for device change notification   ret = register_netdevice_notifier(&hdd_netdev_notifier);   if(ret < 0)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }   //Initialize the BTC service   if(btc_activate_service(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }#ifdef FEATURE_OEM_DATA_SUPPORT   //Initialize the OEM service   if (oem_activate_service(pHddCtx) != 0)   {       hddLog(VOS_TRACE_LEVEL_FATAL,              "%s: oem_activate_service failed", __func__);       goto err_reg_netdev;   }#endif#ifdef PTT_SOCK_SVC_ENABLE   //Initialize the PTT service   if(ptt_sock_activate_svc(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_FEATURE_RMC   if (hdd_open_cesium_nl_sock() < 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE   if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)   {       if(wlan_logging_sock_activate_svc(                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,                   pHddCtx->cfg_ini->wlanLoggingNumBuf,                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf))       {           hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"                   " failed", __func__);           goto err_reg_netdev;       }       //TODO: To Remove enableDhcpDebug and use gEnableDebugLog for       //EAPOL and DHCP       if (!pHddCtx->cfg_ini->gEnableDebugLog)           pHddCtx->cfg_ini->gEnableDebugLog =           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |           VOS_PKT_PROTO_TYPE_ARP;   }   if (pHddCtx->cfg_ini->wlanLoggingEnable &&               (pHddCtx->cfg_ini->enableFWLogging ||                pHddCtx->cfg_ini->enableMgmtLogging ||                pHddCtx->cfg_ini->enableContFWLogging ||                pHddCtx->cfg_ini->enableFwrMemDump )                )   {       hdd_init_frame_logging(pHddCtx);   }   else   {       hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini"));   }#endif   if (vos_is_multicast_logging())       wlan_logging_set_log_level();   hdd_register_mcast_bcast_filter(pHddCtx);   if (VOS_STA_SAP_MODE != hdd_get_conparam())   {      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }   mutex_init(&pHddCtx->sap_lock);   mutex_init(&pHddCtx->roc_lock);#ifdef WLAN_FEATURE_HOLD_RX_WAKELOCK   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->rx_wake_lock,           "qcom_rx_wakelock");#endif   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock");   vos_event_init(&pHddCtx->scan_info.scan_finished_event);   pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);#ifdef FEATURE_WLAN_SCAN_PNO   /*SME must send channel update configuration to RIVA*/   sme_UpdateChannelConfig(pHddCtx->hHal);#endif   /* Send the update default channel list to the FW*/   sme_UpdateChannelList(pHddCtx->hHal);   /* Fwr capabilities received, Set the Dot11 mode */   sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));   sme_SetDefDot11Mode(pHddCtx->hHal);#ifndef CONFIG_ENABLE_LINUX_REG   /*updating wiphy so that regulatory user hints can be processed*/   if (wiphy)   {       regulatory_hint(wiphy, "00");   }#endif   // Initialize the restart logic   wlan_hdd_restart_init(pHddCtx);   //Register the traffic monitor timer now   if ( pHddCtx->cfg_ini->dynSplitscan)   {       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }   wlan_hdd_cfg80211_nan_init(pHddCtx);   mutex_init(&pHddCtx->cur_rx_level_lock);   vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx);   vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);#ifdef WLAN_FEATURE_EXTSCAN    sme_EXTScanRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_extscan_callback,                           pHddCtx);#endif /* WLAN_FEATURE_EXTSCAN */#ifdef FEATURE_OEM_DATA_SUPPORT    sme_OemDataRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_oemdata_callback,                           pHddCtx);#endif /* FEATURE_OEM_DATA_SUPPORT */   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);#ifdef WLAN_NS_OFFLOAD   // Register IPv6 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed;   ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier"));   }#endif   // Register IPv4 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;   ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }   /*Fw mem dump procfs initialization*/   memdump_init();   hdd_dp_util_send_rps_ind(pHddCtx);   goto success;err_reg_netdev:   unregister_netdevice_notifier(&hdd_netdev_notifier);err_unregister_pmops:   hddDevTmUnregisterNotifyCallback(pHddCtx);   hddDeregisterPmOps(pHddCtx);   hdd_debugfs_exit(pHddCtx);#ifdef WLAN_BTAMP_FEATUREerr_bap_stop:  WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_close_adapter:   hdd_close_all_adapters( pHddCtx );#ifdef CONFIG_ENABLE_LINUX_REGerr_unregister_wiphy:#endif   wiphy_unregister(wiphy) ;   hdd_wlan_free_wiphy_channels(wiphy);err_vosstop:   vos_stop(pVosContext);err_vosclose:   status = vos_sched_close( pVosContext );   if (!VOS_IS_STATUS_SUCCESS(status))    {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }   vos_close(pVosContext );err_nl_srv:#ifdef WLAN_KD_READY_NOTIFIER   nl_srv_exit(pHddCtx->ptt_pid);#else   nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */err_vos_nv_close:#ifdef CONFIG_ENABLE_LINUX_REG   vos_nv_close();#endiferr_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);err_config:   kfree(pHddCtx->cfg_ini);   pHddCtx->cfg_ini= NULL;err_free_hdd_context:   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   free_riva_power_on_lock("wlan");   wiphy_free(wiphy) ;   //kfree(wdev) ;   VOS_BUG(1);   if (hdd_is_ssr_required())   {       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }   hdd_set_ssr_required (VOS_FALSE);   return -EIO;success:   EXIT();   return 0;}
int
hdd_wlan_startup(struct device *dev )
hdd_wlan_startup
struct device *dev
struct device
device
*dev
*
dev
{   VOS_STATUS status;   hdd_adapter_t *pAdapter = NULL;   hdd_adapter_t *pP2pAdapter = NULL;   hdd_context_t *pHddCtx = NULL;   v_CONTEXT_t pVosContext= NULL;#ifdef WLAN_BTAMP_FEATURE   VOS_STATUS vStatus = VOS_STATUS_SUCCESS;   WLANBAP_ConfigType btAmpConfig;   hdd_config_t *pConfig;#endif   int ret;   struct wiphy *wiphy;   v_MACADDR_t mac_addr;   ENTER();   /*    * cfg80211: wiphy allocation    */   wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;   if(wiphy == NULL)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }   pHddCtx = wiphy_priv(wiphy);   //Initialize the adapter context to zeros.   vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));   pHddCtx->wiphy = wiphy;   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);   /* register for riva power on lock to platform driver    * Locking power early to ensure FW doesn't reset by kernel while    * host driver is busy initializing itself */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }   /*Get vos context here bcoz vos_open requires it*/   pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);   if(pVosContext == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }   //Save the Global VOSS context in adapter context for future.   pHddCtx->pvosContext = pVosContext;   //Save the adapter context in global context for future.   ((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;   pHddCtx->parent_dev = dev;   pHddCtx->last_scan_reject_session_id = 0;   pHddCtx->last_scan_reject_reason = 0xFF;   pHddCtx->last_scan_reject_timestamp = 0;   init_completion(&pHddCtx->full_pwr_comp_var);   init_completion(&pHddCtx->standby_comp_var);   init_completion(&pHddCtx->req_bmps_comp_var);   init_completion(&pHddCtx->scan_info.scan_req_completion_event);   init_completion(&pHddCtx->scan_info.abortscan_event_var);   init_completion(&pHddCtx->wiphy_channel_update_event);   init_completion(&pHddCtx->ssr_comp_var);   init_completion(&pHddCtx->mc_sus_event_var);   init_completion(&pHddCtx->tx_sus_event_var);   init_completion(&pHddCtx->rx_sus_event_var);   hdd_init_ll_stats_ctx(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   init_completion(&pHddCtx->linux_reg_req);#else   init_completion(&pHddCtx->driver_crda_req);#endif#ifdef WLAN_FEATURE_EXTSCAN   init_completion(&pHddCtx->ext_scan_context.response_event);#endif /* WLAN_FEATURE_EXTSCAN */   spin_lock_init(&pHddCtx->schedScan_lock);   hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );   vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest);#ifdef FEATURE_WLAN_TDLS   /* tdls_lock is initialized before an hdd_open_adapter ( which is    * invoked by other instances also) to protect the concurrent    * access for the Adapters by TDLS module.    */   mutex_init(&pHddCtx->tdls_lock);#endif   mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);   mutex_init(&pHddCtx->wmmLock);   hdd_init_offloaded_packets_ctx(pHddCtx);   /* By default Strict Regulatory For FCC should be false */   pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;   // Load all config first as TL config is needed during vos_open   pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);   if(pHddCtx->cfg_ini == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }   vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));   // Read and parse the qcom_cfg.ini file   status = hdd_parse_config_ini( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }#ifdef MEMORY_DEBUG   if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)      vos_mem_init();   hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled);#endif   /* INI has been read, initialise the configuredMcastBcastFilter with    * INI value as this will serve as the default value    */   pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;   hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting);   if (false == hdd_is_5g_supported(pHddCtx))   {      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }   /* If SNR Monitoring is enabled, FW has to parse all beacons    * for calcaluting and storing the average SNR, so set Nth beacon    * filter to 1 to enable FW to parse all the beaocons    */   if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)   {      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }   /*    * cfg80211: Initialization  ...    */   if (VOS_FTM_MODE != hdd_get_conparam())   {      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }   // Update VOS trace levels based upon the cfg.ini   hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP);   hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL);   hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD);   hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME);   hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE);   hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC);   hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA);   hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS);   hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS);   hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP);   hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);   // Update WDI trace levels based upon the cfg.ini   hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL);   hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT);   hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL);   if (VOS_FTM_MODE == hdd_get_conparam())   {      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }   if( VOS_MONITOR_MODE == hdd_get_conparam())   {       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }   //Open watchdog module   if(pHddCtx->cfg_ini->fIsLogpEnabled)   {      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }   pHddCtx->isLogpInProgress = FALSE;   vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);#ifdef CONFIG_ENABLE_LINUX_REG   /* initialize the NV module. This is required so that      we can initialize the channel information in wiphy      from the NV.bin data. The channel information in      wiphy needs to be initialized before wiphy registration */   status = vos_nv_open();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,                "%s: vos_nv_open failed", __func__);       goto err_wdclose;   }   status = vos_init_wiphy_from_nv_bin();   if (!VOS_IS_STATUS_SUCCESS(status))   {       /* NV module cannot be initialized */       hddLog( VOS_TRACE_LEVEL_FATAL,               "%s: vos_init_wiphy failed", __func__);       goto err_vos_nv_close;   }#endif   //Initialize the nlink service   if(nl_srv_init() != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }#ifdef WLAN_KD_READY_NOTIFIER   pHddCtx->kd_nl_init = 1;#endif /* WLAN_KD_READY_NOTIFIER */   vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);   status = vos_open( &pVosContext, pHddCtx->parent_dev);   if ( !VOS_IS_STATUS_SUCCESS( status ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }   status = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }   if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)   {      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }   if (0 == enable_11d || 1 == enable_11d)   {      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }   /* Note that the vos_preStart() sequence triggers the cfg download.      The cfg download must occur before we update the SME config      since the SME config operation must access the cfg database */   status = hdd_set_sme_config( pHddCtx );   if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   // Apply the cfg.ini to cfg.dat   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   // Get mac addr from platform driver   ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);   if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))   {      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }   {      eHalStatus halStatus;      /* Set the MAC Address Currently this is used by HAL to       * add self sta. Remove this once self sta is added as       * part of session open.       */      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );      if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }   }   /*Start VOSS which starts up the SME/MAC/HAL modules and everything else     Note: Firmware image will be read and downloaded inside vos_start API */   status = vos_start( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }#ifdef FEATURE_WLAN_CH_AVOID    /* Plug in avoid channel notification callback     * This should happen before ADD_SELF_STA     * FW will send first IND with ADD_SELF_STA REQ from host */    /* check the Channel Avoidance is enabled */   if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)   {       sme_AddChAvoidCallback(pHddCtx->hHal,                              hdd_hostapd_ch_avoid_cb);   }#endif /* FEATURE_WLAN_CH_AVOID */   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);#ifdef CONFIG_ENABLE_LINUX_REG   status = wlan_hdd_init_channels(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",             __func__);      goto err_vosstop;   }#endif   status = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifndef CONFIG_ENABLE_LINUX_REG   wlan_hdd_cfg80211_update_reg_info( wiphy );   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }#endif#ifdef CONFIG_ENABLE_LINUX_REG   /* registration of wiphy dev with cfg80211 */   if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }   status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",             __func__);      goto err_unregister_wiphy;   }#endif   wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);   if (VOS_STA_SAP_MODE == hdd_get_conparam())   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }   else   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }   if( pAdapter == NULL )   {      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }   if (country_code)   {      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }#ifdef WLAN_BTAMP_FEATURE   vStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_close_adapter;   }   vStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   status = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE   /*    * UapsdMask is 0xf if U-APSD is enbaled for all AC's...    * The value of CFG_QOS_WMM_UAPSD_MASK_DEFAULT is 0xaa(Magic Value)    * which is greater than 0xf. So the below check is safe to make    * sure that there is no entry for UapsdMask in the ini    */   if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)   {       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }#ifdef WLAN_FEATURE_ROAM_SCAN_OFFLOAD   if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE))   {      hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__);      pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0;      sme_UpdateRoamScanOffloadEnabled((tHalHandle)(pHddCtx->hHal),                       pHddCtx->cfg_ini->isRoamOffloadScanEnabled);   }#endif   wlan_hdd_tdls_init(pHddCtx);   wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);   vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan);   sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);   /* Register with platform driver as client for Suspend/Resume */   status = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }   /* Open debugfs interface */   if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))   {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }   /* Register TM level change handler function to the platform */   status = hddDevTmRegisterNotifyCallback(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }   // register net device notifier for device change notification   ret = register_netdevice_notifier(&hdd_netdev_notifier);   if(ret < 0)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }   //Initialize the BTC service   if(btc_activate_service(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }#ifdef FEATURE_OEM_DATA_SUPPORT   //Initialize the OEM service   if (oem_activate_service(pHddCtx) != 0)   {       hddLog(VOS_TRACE_LEVEL_FATAL,              "%s: oem_activate_service failed", __func__);       goto err_reg_netdev;   }#endif#ifdef PTT_SOCK_SVC_ENABLE   //Initialize the PTT service   if(ptt_sock_activate_svc(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_FEATURE_RMC   if (hdd_open_cesium_nl_sock() < 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__);      goto err_reg_netdev;   }#endif#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE   if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)   {       if(wlan_logging_sock_activate_svc(                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,                   pHddCtx->cfg_ini->wlanLoggingNumBuf,                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf))       {           hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"                   " failed", __func__);           goto err_reg_netdev;       }       //TODO: To Remove enableDhcpDebug and use gEnableDebugLog for       //EAPOL and DHCP       if (!pHddCtx->cfg_ini->gEnableDebugLog)           pHddCtx->cfg_ini->gEnableDebugLog =           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |           VOS_PKT_PROTO_TYPE_ARP;   }   if (pHddCtx->cfg_ini->wlanLoggingEnable &&               (pHddCtx->cfg_ini->enableFWLogging ||                pHddCtx->cfg_ini->enableMgmtLogging ||                pHddCtx->cfg_ini->enableContFWLogging ||                pHddCtx->cfg_ini->enableFwrMemDump )                )   {       hdd_init_frame_logging(pHddCtx);   }   else   {       hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini"));   }#endif   if (vos_is_multicast_logging())       wlan_logging_set_log_level();   hdd_register_mcast_bcast_filter(pHddCtx);   if (VOS_STA_SAP_MODE != hdd_get_conparam())   {      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }   mutex_init(&pHddCtx->sap_lock);   mutex_init(&pHddCtx->roc_lock);#ifdef WLAN_FEATURE_HOLD_RX_WAKELOCK   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->rx_wake_lock,           "qcom_rx_wakelock");#endif   /* Initialize the wake lcok */   vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock");   vos_event_init(&pHddCtx->scan_info.scan_finished_event);   pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;   pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;   vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);#ifdef FEATURE_WLAN_SCAN_PNO   /*SME must send channel update configuration to RIVA*/   sme_UpdateChannelConfig(pHddCtx->hHal);#endif   /* Send the update default channel list to the FW*/   sme_UpdateChannelList(pHddCtx->hHal);   /* Fwr capabilities received, Set the Dot11 mode */   sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));   sme_SetDefDot11Mode(pHddCtx->hHal);#ifndef CONFIG_ENABLE_LINUX_REG   /*updating wiphy so that regulatory user hints can be processed*/   if (wiphy)   {       regulatory_hint(wiphy, "00");   }#endif   // Initialize the restart logic   wlan_hdd_restart_init(pHddCtx);   //Register the traffic monitor timer now   if ( pHddCtx->cfg_ini->dynSplitscan)   {       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }   wlan_hdd_cfg80211_nan_init(pHddCtx);   mutex_init(&pHddCtx->cur_rx_level_lock);   vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx);   vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);#ifdef WLAN_FEATURE_EXTSCAN    sme_EXTScanRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_extscan_callback,                           pHddCtx);#endif /* WLAN_FEATURE_EXTSCAN */#ifdef FEATURE_OEM_DATA_SUPPORT    sme_OemDataRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_oemdata_callback,                           pHddCtx);#endif /* FEATURE_OEM_DATA_SUPPORT */   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);#ifdef WLAN_NS_OFFLOAD   // Register IPv6 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed;   ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier"));   }#endif   // Register IPv4 notifier to notify if any change in IP   // So that we can reconfigure the offload parameters   pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;   ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);   if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }   /*Fw mem dump procfs initialization*/   memdump_init();   hdd_dp_util_send_rps_ind(pHddCtx);   goto success;err_reg_netdev:   unregister_netdevice_notifier(&hdd_netdev_notifier);err_unregister_pmops:   hddDevTmUnregisterNotifyCallback(pHddCtx);   hddDeregisterPmOps(pHddCtx);   hdd_debugfs_exit(pHddCtx);#ifdef WLAN_BTAMP_FEATUREerr_bap_stop:  WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_close_adapter:   hdd_close_all_adapters( pHddCtx );#ifdef CONFIG_ENABLE_LINUX_REGerr_unregister_wiphy:#endif   wiphy_unregister(wiphy) ;   hdd_wlan_free_wiphy_channels(wiphy);err_vosstop:   vos_stop(pVosContext);err_vosclose:   status = vos_sched_close( pVosContext );   if (!VOS_IS_STATUS_SUCCESS(status))    {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }   vos_close(pVosContext );err_nl_srv:#ifdef WLAN_KD_READY_NOTIFIER   nl_srv_exit(pHddCtx->ptt_pid);#else   nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */err_vos_nv_close:#ifdef CONFIG_ENABLE_LINUX_REG   vos_nv_close();#endiferr_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);err_config:   kfree(pHddCtx->cfg_ini);   pHddCtx->cfg_ini= NULL;err_free_hdd_context:   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);   free_riva_power_on_lock("wlan");   wiphy_free(wiphy) ;   //kfree(wdev) ;   VOS_BUG(1);   if (hdd_is_ssr_required())   {       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }   hdd_set_ssr_required (VOS_FALSE);   return -EIO;success:   EXIT();   return 0;}
VOS_STATUS status;
VOS_STATUS status;
VOS_STATUS
VOS_STATUS
status
status
hdd_adapter_t *pAdapter = NULL;
hdd_adapter_t *pAdapter = NULL;
hdd_adapter_t
hdd_adapter_t
*pAdapter = NULL
*
pAdapter
= NULL
NULL
NULL
hdd_adapter_t *pP2pAdapter = NULL;
hdd_adapter_t *pP2pAdapter = NULL;
hdd_adapter_t
hdd_adapter_t
*pP2pAdapter = NULL
*
pP2pAdapter
= NULL
NULL
NULL
hdd_context_t *pHddCtx = NULL;
hdd_context_t *pHddCtx = NULL;
hdd_context_t
hdd_context_t
*pHddCtx = NULL
*
pHddCtx
= NULL
NULL
NULL
v_CONTEXT_t pVosContext= NULL;
v_CONTEXT_t pVosContext= NULL;
v_CONTEXT_t
v_CONTEXT_t
pVosContext= NULL
pVosContext
= NULL
NULL
NULL
int ret;
int ret;
int
ret
ret
struct wiphy *wiphy;
struct wiphy *wiphy;
struct wiphy
wiphy
*wiphy
*
wiphy
v_MACADDR_t mac_addr;
v_MACADDR_t mac_addr;
v_MACADDR_t
v_MACADDR_t
mac_addr
mac_addr
ENTER();
ENTER()
ENTER
ENTER
wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)) ;
wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t))
wiphy
wiphy
wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t))
wlan_hdd_cfg80211_wiphy_alloc
wlan_hdd_cfg80211_wiphy_alloc
sizeof(hdd_context_t)
hdd_context_t
hdd_context_t
hdd_context_t

if(wiphy == NULL)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }
wiphy == NULL
wiphy
wiphy
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);      return -EIO;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: cfg80211 init failed"
__func__
__func__
return -EIO;
-EIO
EIO
EIO
pHddCtx = wiphy_priv(wiphy);
pHddCtx = wiphy_priv(wiphy)
pHddCtx
pHddCtx
wiphy_priv(wiphy)
wiphy_priv
wiphy_priv
wiphy
wiphy
vos_mem_zero(pHddCtx, sizeof( hdd_context_t ));
vos_mem_zero(pHddCtx, sizeof( hdd_context_t ))
vos_mem_zero
vos_mem_zero
pHddCtx
pHddCtx
sizeof( hdd_context_t )
hdd_context_t
hdd_context_t
hdd_context_t

pHddCtx->wiphy = wiphy;
pHddCtx->wiphy = wiphy
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
wiphy
wiphy
hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_prevent_suspend
hdd_prevent_suspend
(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_LOAD_IN_PROGRESS
WLAN_HDD_LOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
TRUE
TRUE
if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }
req_riva_power_on_lock("wlan")
req_riva_power_on_lock
req_riva_power_on_lock
"wlan"
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);      goto err_free_hdd_context;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                     __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: req riva power on lock failed"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);
pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
pVosContext
pVosContext
vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
vos_get_global_context
vos_get_global_context
VOS_MODULE_ID_SYS
VOS_MODULE_ID_SYS
NULL
NULL
if(pVosContext == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }
pVosContext == NULL
pVosContext
pVosContext
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);      goto err_free_hdd_context;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed vos_get_global_context"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
pHddCtx->pvosContext = pVosContext;
pHddCtx->pvosContext = pVosContext
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
pVosContext
pVosContext
((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx;
((VosContextType*)(pVosContext))->pHDDContext = (v_VOID_t*)pHddCtx
((VosContextType*)(pVosContext))->pHDDContext
((VosContextType*)(pVosContext))
(VosContextType*)(pVosContext)
VosContextType*
VosContextType
VosContextType
*
*
(pVosContext)
pVosContext
pVosContext
pHDDContext
(v_VOID_t*)pHddCtx
v_VOID_t*
v_VOID_t
v_VOID_t
*
*
pHddCtx
pHddCtx
pHddCtx->parent_dev = dev;
pHddCtx->parent_dev = dev
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
dev
dev
pHddCtx->last_scan_reject_session_id = 0;
pHddCtx->last_scan_reject_session_id = 0
pHddCtx->last_scan_reject_session_id
pHddCtx
pHddCtx
last_scan_reject_session_id
0
pHddCtx->last_scan_reject_reason = 0xFF;
pHddCtx->last_scan_reject_reason = 0xFF
pHddCtx->last_scan_reject_reason
pHddCtx
pHddCtx
last_scan_reject_reason
0xFF
pHddCtx->last_scan_reject_timestamp = 0;
pHddCtx->last_scan_reject_timestamp = 0
pHddCtx->last_scan_reject_timestamp
pHddCtx
pHddCtx
last_scan_reject_timestamp
0
init_completion(&pHddCtx->full_pwr_comp_var);
init_completion(&pHddCtx->full_pwr_comp_var)
init_completion
init_completion
&pHddCtx->full_pwr_comp_var
pHddCtx->full_pwr_comp_var
pHddCtx
pHddCtx
full_pwr_comp_var
init_completion(&pHddCtx->standby_comp_var);
init_completion(&pHddCtx->standby_comp_var)
init_completion
init_completion
&pHddCtx->standby_comp_var
pHddCtx->standby_comp_var
pHddCtx
pHddCtx
standby_comp_var
init_completion(&pHddCtx->req_bmps_comp_var);
init_completion(&pHddCtx->req_bmps_comp_var)
init_completion
init_completion
&pHddCtx->req_bmps_comp_var
pHddCtx->req_bmps_comp_var
pHddCtx
pHddCtx
req_bmps_comp_var
init_completion(&pHddCtx->scan_info.scan_req_completion_event);
init_completion(&pHddCtx->scan_info.scan_req_completion_event)
init_completion
init_completion
&pHddCtx->scan_info.scan_req_completion_event
pHddCtx->scan_info.scan_req_completion_event
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
scan_req_completion_event
init_completion(&pHddCtx->scan_info.abortscan_event_var);
init_completion(&pHddCtx->scan_info.abortscan_event_var)
init_completion
init_completion
&pHddCtx->scan_info.abortscan_event_var
pHddCtx->scan_info.abortscan_event_var
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
abortscan_event_var
init_completion(&pHddCtx->wiphy_channel_update_event);
init_completion(&pHddCtx->wiphy_channel_update_event)
init_completion
init_completion
&pHddCtx->wiphy_channel_update_event
pHddCtx->wiphy_channel_update_event
pHddCtx
pHddCtx
wiphy_channel_update_event
init_completion(&pHddCtx->ssr_comp_var);
init_completion(&pHddCtx->ssr_comp_var)
init_completion
init_completion
&pHddCtx->ssr_comp_var
pHddCtx->ssr_comp_var
pHddCtx
pHddCtx
ssr_comp_var
init_completion(&pHddCtx->mc_sus_event_var);
init_completion(&pHddCtx->mc_sus_event_var)
init_completion
init_completion
&pHddCtx->mc_sus_event_var
pHddCtx->mc_sus_event_var
pHddCtx
pHddCtx
mc_sus_event_var
init_completion(&pHddCtx->tx_sus_event_var);
init_completion(&pHddCtx->tx_sus_event_var)
init_completion
init_completion
&pHddCtx->tx_sus_event_var
pHddCtx->tx_sus_event_var
pHddCtx
pHddCtx
tx_sus_event_var
init_completion(&pHddCtx->rx_sus_event_var);
init_completion(&pHddCtx->rx_sus_event_var)
init_completion
init_completion
&pHddCtx->rx_sus_event_var
pHddCtx->rx_sus_event_var
pHddCtx
pHddCtx
rx_sus_event_var
hdd_init_ll_stats_ctx(pHddCtx);
hdd_init_ll_stats_ctx(pHddCtx)
hdd_init_ll_stats_ctx
hdd_init_ll_stats_ctx
pHddCtx
pHddCtx
init_completion(&pHddCtx->driver_crda_req);
init_completion(&pHddCtx->driver_crda_req)
init_completion
init_completion
&pHddCtx->driver_crda_req
pHddCtx->driver_crda_req
pHddCtx
pHddCtx
driver_crda_req
spin_lock_init(&pHddCtx->schedScan_lock);
spin_lock_init(&pHddCtx->schedScan_lock)
spin_lock_init
spin_lock_init
&pHddCtx->schedScan_lock
pHddCtx->schedScan_lock
pHddCtx
pHddCtx
schedScan_lock
hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS );
hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS )
hdd_list_init
hdd_list_init
&pHddCtx->hddAdapters
pHddCtx->hddAdapters
pHddCtx
pHddCtx
hddAdapters
MAX_NUMBER_OF_ADAPTERS
MAX_NUMBER_OF_ADAPTERS
vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest);
vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,                                hdd_processSpoofMacAddrRequest)
vos_init_delayed_work
vos_init_delayed_work
&pHddCtx->spoof_mac_addr_work
pHddCtx->spoof_mac_addr_work
pHddCtx
pHddCtx
spoof_mac_addr_work
hdd_processSpoofMacAddrRequest
hdd_processSpoofMacAddrRequest
mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock);
mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock)
mutex_init
mutex_init
&pHddCtx->spoofMacAddr.macSpoofingLock
pHddCtx->spoofMacAddr.macSpoofingLock
pHddCtx->spoofMacAddr
pHddCtx
pHddCtx
spoofMacAddr
macSpoofingLock
mutex_init(&pHddCtx->wmmLock);
mutex_init(&pHddCtx->wmmLock)
mutex_init
mutex_init
&pHddCtx->wmmLock
pHddCtx->wmmLock
pHddCtx
pHddCtx
wmmLock
hdd_init_offloaded_packets_ctx(pHddCtx);
hdd_init_offloaded_packets_ctx(pHddCtx)
hdd_init_offloaded_packets_ctx
hdd_init_offloaded_packets_ctx
pHddCtx
pHddCtx
pHddCtx->nEnableStrictRegulatoryForFCC = FALSE;
pHddCtx->nEnableStrictRegulatoryForFCC = FALSE
pHddCtx->nEnableStrictRegulatoryForFCC
pHddCtx
pHddCtx
nEnableStrictRegulatoryForFCC
FALSE
FALSE
pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL);
pHddCtx->cfg_ini = (hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL)
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
(hdd_config_t*) kmalloc(sizeof(hdd_config_t), GFP_KERNEL)
hdd_config_t*
hdd_config_t
hdd_config_t
*
*
kmalloc(sizeof(hdd_config_t), GFP_KERNEL)
kmalloc
kmalloc
sizeof(hdd_config_t)
hdd_config_t
hdd_config_t
hdd_config_t

GFP_KERNEL
GFP_KERNEL
if(pHddCtx->cfg_ini == NULL)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }
pHddCtx->cfg_ini == NULL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);      goto err_free_hdd_context;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed kmalloc hdd_config_t"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ));
vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t ))
vos_mem_zero
vos_mem_zero
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
sizeof( hdd_config_t )
hdd_config_t
hdd_config_t
hdd_config_t

status = hdd_parse_config_ini( pHddCtx );
status = hdd_parse_config_ini( pHddCtx )
status
status
hdd_parse_config_ini( pHddCtx )
hdd_parse_config_ini
hdd_parse_config_ini
pHddCtx
pHddCtx
if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }
VOS_STATUS_SUCCESS != status
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);      goto err_config;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",             __func__, WLAN_INI_FILE)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: error parsing %s"
__func__
__func__
WLAN_INI_FILE
WLAN_INI_FILE
goto err_config;
err_config
pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting;
pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting
pHddCtx->configuredMcastBcastFilter
pHddCtx
pHddCtx
configuredMcastBcastFilter
pHddCtx->cfg_ini->mcastBcastFilterSetting
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
mcastBcastFilterSetting
hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting);
hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",                   pHddCtx->cfg_ini->mcastBcastFilterSetting)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"Setting configuredMcastBcastFilter: %d"
pHddCtx->cfg_ini->mcastBcastFilterSetting
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
mcastBcastFilterSetting
if (false == hdd_is_5g_supported(pHddCtx))   {      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }
false == hdd_is_5g_supported(pHddCtx)
false
hdd_is_5g_supported(pHddCtx)
hdd_is_5g_supported
hdd_is_5g_supported
pHddCtx
pHddCtx
{      //5Ghz is not supported.      if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }   }
if (1 != pHddCtx->cfg_ini->nBandCapability)      {         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }
1 != pHddCtx->cfg_ini->nBandCapability
1
pHddCtx->cfg_ini->nBandCapability
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
nBandCapability
{         hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);         pHddCtx->cfg_ini->nBandCapability = 1;      }
hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__);
hddLog(VOS_TRACE_LEVEL_INFO,                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: Setting pHddCtx->cfg_ini->nBandCapability = 1"
__func__
__func__
pHddCtx->cfg_ini->nBandCapability = 1;
pHddCtx->cfg_ini->nBandCapability = 1
pHddCtx->cfg_ini->nBandCapability
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
nBandCapability
1
if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)   {      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }
1 == pHddCtx->cfg_ini->fEnableSNRMonitoring
1
pHddCtx->cfg_ini->fEnableSNRMonitoring
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
fEnableSNRMonitoring
{      /* The log level is deliberately set to WARN as overriding       * nthBeaconFilter to 1 will increase power cosumption and this       * might just prove helpful to detect the power issue.       */      hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);      pHddCtx->cfg_ini->nthBeaconFilter = 1;   }
hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__);
hddLog(VOS_TRACE_LEVEL_WARN,             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_WARN
VOS_TRACE_LEVEL_WARN
"%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1"
__func__
__func__
pHddCtx->cfg_ini->nthBeaconFilter = 1;
pHddCtx->cfg_ini->nthBeaconFilter = 1
pHddCtx->cfg_ini->nthBeaconFilter
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
nthBeaconFilter
1
if (VOS_FTM_MODE != hdd_get_conparam())   {      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }
VOS_FTM_MODE != hdd_get_conparam()
VOS_FTM_MODE
VOS_FTM_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{      if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }   }
if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini))      {         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }
0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
0
wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
wlan_hdd_cfg80211_init
wlan_hdd_cfg80211_init
dev
dev
wiphy
wiphy
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
{         hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);         goto err_config;      }
hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,                 "%s: wlan_hdd_cfg80211_init return failure", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wlan_hdd_cfg80211_init return failure"
__func__
__func__
goto err_config;
err_config
hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP);
hdd_vos_trace_enable(VOS_MODULE_ID_BAP,                        pHddCtx->cfg_ini->vosTraceEnableBAP)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
pHddCtx->cfg_ini->vosTraceEnableBAP
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableBAP
hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL);
hdd_vos_trace_enable(VOS_MODULE_ID_TL,                        pHddCtx->cfg_ini->vosTraceEnableTL)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_TL
VOS_MODULE_ID_TL
pHddCtx->cfg_ini->vosTraceEnableTL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableTL
hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI);
hdd_vos_trace_enable(VOS_MODULE_ID_WDI,                        pHddCtx->cfg_ini->vosTraceEnableWDI)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_WDI
VOS_MODULE_ID_WDI
pHddCtx->cfg_ini->vosTraceEnableWDI
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableWDI
hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD);
hdd_vos_trace_enable(VOS_MODULE_ID_HDD,                        pHddCtx->cfg_ini->vosTraceEnableHDD)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
pHddCtx->cfg_ini->vosTraceEnableHDD
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableHDD
hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME);
hdd_vos_trace_enable(VOS_MODULE_ID_SME,                        pHddCtx->cfg_ini->vosTraceEnableSME)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_SME
VOS_MODULE_ID_SME
pHddCtx->cfg_ini->vosTraceEnableSME
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableSME
hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE);
hdd_vos_trace_enable(VOS_MODULE_ID_PE,                        pHddCtx->cfg_ini->vosTraceEnablePE)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_PE
VOS_MODULE_ID_PE
pHddCtx->cfg_ini->vosTraceEnablePE
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnablePE
hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC);
hdd_vos_trace_enable(VOS_MODULE_ID_PMC,                         pHddCtx->cfg_ini->vosTraceEnablePMC)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_PMC
VOS_MODULE_ID_PMC
pHddCtx->cfg_ini->vosTraceEnablePMC
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnablePMC
hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA);
hdd_vos_trace_enable(VOS_MODULE_ID_WDA,                        pHddCtx->cfg_ini->vosTraceEnableWDA)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_WDA
VOS_MODULE_ID_WDA
pHddCtx->cfg_ini->vosTraceEnableWDA
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableWDA
hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS);
hdd_vos_trace_enable(VOS_MODULE_ID_SYS,                        pHddCtx->cfg_ini->vosTraceEnableSYS)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_SYS
VOS_MODULE_ID_SYS
pHddCtx->cfg_ini->vosTraceEnableSYS
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableSYS
hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS);
hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,                        pHddCtx->cfg_ini->vosTraceEnableVOSS)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
pHddCtx->cfg_ini->vosTraceEnableVOSS
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableVOSS
hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP);
hdd_vos_trace_enable(VOS_MODULE_ID_SAP,                        pHddCtx->cfg_ini->vosTraceEnableSAP)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_SAP
VOS_MODULE_ID_SAP
pHddCtx->cfg_ini->vosTraceEnableSAP
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableSAP
hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP);
hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP)
hdd_vos_trace_enable
hdd_vos_trace_enable
VOS_MODULE_ID_HDD_SOFTAP
VOS_MODULE_ID_HDD_SOFTAP
pHddCtx->cfg_ini->vosTraceEnableHDDSAP
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
vosTraceEnableHDDSAP
hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL);
hdd_wdi_trace_enable(eWLAN_MODULE_DAL,                        pHddCtx->cfg_ini->wdiTraceEnableDAL)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_DAL
eWLAN_MODULE_DAL
pHddCtx->cfg_ini->wdiTraceEnableDAL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnableDAL
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL);
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,                        pHddCtx->cfg_ini->wdiTraceEnableCTL)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_DAL_CTRL
eWLAN_MODULE_DAL_CTRL
pHddCtx->cfg_ini->wdiTraceEnableCTL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnableCTL
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT);
hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,                        pHddCtx->cfg_ini->wdiTraceEnableDAT)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
pHddCtx->cfg_ini->wdiTraceEnableDAT
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnableDAT
hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL);
hdd_wdi_trace_enable(eWLAN_MODULE_PAL,                        pHddCtx->cfg_ini->wdiTraceEnablePAL)
hdd_wdi_trace_enable
hdd_wdi_trace_enable
eWLAN_MODULE_PAL
eWLAN_MODULE_PAL
pHddCtx->cfg_ini->wdiTraceEnablePAL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
wdiTraceEnablePAL
if (VOS_FTM_MODE == hdd_get_conparam())   {      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }
VOS_FTM_MODE == hdd_get_conparam()
VOS_FTM_MODE
VOS_FTM_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{      if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);      pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;      vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);      return VOS_STATUS_SUCCESS;   }
if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx) )      {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }
VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
wlan_hdd_ftm_open(pHddCtx)
wlan_hdd_ftm_open
wlan_hdd_ftm_open
pHddCtx
pHddCtx
{          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);          goto err_free_hdd_context;      }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wlan_hdd_ftm_open Failed"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: FTM driver loaded success fully"
__func__
__func__
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
if( VOS_MONITOR_MODE == hdd_get_conparam())   {       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }
VOS_MONITOR_MODE == hdd_get_conparam()
VOS_MONITOR_MODE
VOS_MONITOR_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{       if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }       hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);       pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;       vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_SUCCESS;   }
if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx))       {          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }
VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
wlan_hdd_mon_open(pHddCtx)
wlan_hdd_mon_open
wlan_hdd_mon_open
pHddCtx
pHddCtx
{          hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);          goto err_free_hdd_context;       }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wlan_hdd_mon_open Failed"
__func__
__func__
goto err_free_hdd_context;
err_free_hdd_context
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Driver loaded in Monitor Mode"
__func__
__func__
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
if(pHddCtx->cfg_ini->fIsLogpEnabled)   {      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }
pHddCtx->cfg_ini->fIsLogpEnabled
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
fIsLogpEnabled
{      status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));      if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }   }
status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext));
status = vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext))
status
status
vos_watchdog_open(pVosContext,         &((VosContextType*)pVosContext)->vosWatchdog, sizeof(VosWatchdogContext))
vos_watchdog_open
vos_watchdog_open
pVosContext
pVosContext
&((VosContextType*)pVosContext)->vosWatchdog
((VosContextType*)pVosContext)->vosWatchdog
((VosContextType*)pVosContext)
(VosContextType*)pVosContext
VosContextType*
VosContextType
VosContextType
*
*
pVosContext
pVosContext
vosWatchdog
sizeof(VosWatchdogContext)
VosWatchdogContext
VosWatchdogContext
VosWatchdogContext

if(!VOS_IS_STATUS_SUCCESS( status ))      {         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{         hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);         goto err_wdclose;      }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_watchdog_open failed"
__func__
__func__
goto err_wdclose;
err_wdclose
pHddCtx->isLogpInProgress = FALSE;
pHddCtx->isLogpInProgress = FALSE
pHddCtx->isLogpInProgress
pHddCtx
pHddCtx
isLogpInProgress
FALSE
FALSE
vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_logp_in_progress
vos_set_logp_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
if(nl_srv_init() != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }
nl_srv_init() != 0
nl_srv_init()
nl_srv_init
nl_srv_init
0
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);      goto err_vos_nv_close;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: nl_srv_init failed"
__func__
__func__
goto err_vos_nv_close;
err_vos_nv_close
vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats);
vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats)
vos_set_roam_delay_stats_enabled
vos_set_roam_delay_stats_enabled
pHddCtx->cfg_ini->gEnableRoamDelayStats
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
gEnableRoamDelayStats
status = vos_open( &pVosContext, pHddCtx->parent_dev);
status = vos_open( &pVosContext, pHddCtx->parent_dev)
status
status
vos_open( &pVosContext, pHddCtx->parent_dev)
vos_open
vos_open
&pVosContext
pVosContext
pVosContext
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
if ( !VOS_IS_STATUS_SUCCESS( status ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);      goto err_nl_srv;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_open failed"
__func__
__func__
goto err_nl_srv;
err_nl_srv
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
(tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
tHalHandle
tHalHandle
tHalHandle

vos_get_context( VOS_MODULE_ID_SME, pVosContext )
vos_get_context
vos_get_context
VOS_MODULE_ID_SME
VOS_MODULE_ID_SME
pVosContext
pVosContext
if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }
NULL == pHddCtx->hHal
NULL
NULL
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: HAL context is null"
__func__
__func__
goto err_vosclose;
err_vosclose
status = vos_preStart( pHddCtx->pvosContext );
status = vos_preStart( pHddCtx->pvosContext )
status
status
vos_preStart( pHddCtx->pvosContext )
vos_preStart
vos_preStart
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_preStart failed"
__func__
__func__
goto err_vosclose;
err_vosclose
if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)   {      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }
0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan
0 == enable_dfs_chan_scan
0
enable_dfs_chan_scan
enable_dfs_chan_scan
1 == enable_dfs_chan_scan
1
enable_dfs_chan_scan
enable_dfs_chan_scan
{      pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);   }
pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan;
pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan
pHddCtx->cfg_ini->enableDFSChnlScan
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
enableDFSChnlScan
enable_dfs_chan_scan
enable_dfs_chan_scan
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan);
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",             __func__, enable_dfs_chan_scan)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: module enable_dfs_chan_scan set to %d"
__func__
__func__
enable_dfs_chan_scan
enable_dfs_chan_scan
if (0 == enable_11d || 1 == enable_11d)   {      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }
0 == enable_11d || 1 == enable_11d
0 == enable_11d
0
enable_11d
enable_11d
1 == enable_11d
1
enable_11d
enable_11d
{      pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;      hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);   }
pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d;
pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d
pHddCtx->cfg_ini->Is11dSupportEnabled
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
Is11dSupportEnabled
enable_11d
enable_11d
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d);
hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",             __func__, enable_11d)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: module enable_11d set to %d"
__func__
__func__
enable_11d
enable_11d
status = hdd_set_sme_config( pHddCtx );
status = hdd_set_sme_config( pHddCtx )
status
status
hdd_set_sme_config( pHddCtx )
hdd_set_sme_config
hdd_set_sme_config
pHddCtx
pHddCtx
if ( VOS_STATUS_SUCCESS != status )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }
VOS_STATUS_SUCCESS != status
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed hdd_set_sme_config"
__func__
__func__
goto err_vosclose;
err_vosclose
if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
FALSE == hdd_update_config_dat(pHddCtx)
FALSE
FALSE
hdd_update_config_dat(pHddCtx)
hdd_update_config_dat
hdd_update_config_dat
pHddCtx
pHddCtx
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: config update failed"
__func__
__func__
goto err_vosclose;
err_vosclose
ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes);
ret = wcnss_get_wlan_mac_address((char*)&mac_addr.bytes)
ret
ret
wcnss_get_wlan_mac_address((char*)&mac_addr.bytes)
wcnss_get_wlan_mac_address
wcnss_get_wlan_mac_address
(char*)&mac_addr.bytes
char*
char
*
*
&mac_addr.bytes
mac_addr.bytes
mac_addr
mac_addr
bytes
if ((0 == ret) && (!vos_is_macaddr_zero(&mac_addr)))   {      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }   else if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }
(0 == ret) && (!vos_is_macaddr_zero(&mac_addr))
(0 == ret)
0 == ret
0
ret
ret
(!vos_is_macaddr_zero(&mac_addr))
!vos_is_macaddr_zero(&mac_addr)
vos_is_macaddr_zero(&mac_addr)
vos_is_macaddr_zero
vos_is_macaddr_zero
&mac_addr
mac_addr
mac_addr
{      /* Store the mac addr for first interface */      pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;      hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      /* Here, passing Arg2 as 1 because we do not want to change the         last 3 bytes (means non OUI bytes) of first interface mac         addr.       */      if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }   }
pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr;
pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
mac_addr
mac_addr
hddLog(VOS_TRACE_LEVEL_ERROR,             "%s: WLAN Mac Addr: "             MAC_ADDRESS_STR, __func__,             MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr))      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }
0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
0
hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
hdd_generate_iface_mac_addr_auto
hdd_generate_iface_mac_addr_auto
pHddCtx
pHddCtx
1
mac_addr
mac_addr
{         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);      }
hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Failed to generate wlan interface mac addr "                "using MAC from ini file ", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: Failed to generate wlan interface mac addr "                "using MAC from ini file "
__func__
__func__
if (VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx))   {      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }
VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
hdd_update_config_from_nv(pHddCtx)
hdd_update_config_from_nv
hdd_update_config_from_nv
pHddCtx
pHddCtx
{      // Apply the NV to cfg.dat      /* Prima Update MAC address only at here */#ifdef WLAN_AUTOGEN_MACADDR_FEATURE      /* There was not a valid set of MAC Addresses in NV.  See if the         default addresses were modified by the cfg.ini settings.  If so,         we'll use them, but if not, we'll autogenerate a set of MAC         addresses based upon the device serial number */      static const v_MACADDR_t default_address =         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}};      if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],                   sizeof(default_address)))      {         /* cfg.ini has the default address, invoke autogen logic */         /* Here, passing Arg2 as 0 because we want to change the            last 3 bytes (means non OUI bytes) of all the interfaces            mac addr.          */         if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,                                                            default_address))         {            hddLog(VOS_TRACE_LEVEL_ERROR,                   "%s: Failed to generate wlan interface mac addr "                   "using MAC from ini file " MAC_ADDRESS_STR, __func__,                   MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));         }      }      else#endif //WLAN_AUTOGEN_MACADDR_FEATURE      {         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }   }
{         hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));      }
hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: Invalid MAC address in NV, using MAC from ini file "                MAC_ADDRESS_STR, __func__,                MAC_ADDR_ARRAY(pHddCtx->cfg_ini->intfMacAddr[0].bytes));
{      eHalStatus halStatus;      /* Set the MAC Address Currently this is used by HAL to       * add self sta. Remove this once self sta is added as       * part of session open.       */      halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );      if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }   }
eHalStatus halStatus;
eHalStatus halStatus;
eHalStatus
eHalStatus
halStatus
halStatus
halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) );
halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) )
halStatus
halStatus
cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,                             (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],                             sizeof( pHddCtx->cfg_ini->intfMacAddr[0]) )
cfgSetStr
cfgSetStr
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
WNI_CFG_STA_ID
WNI_CFG_STA_ID
(v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0]
v_U8_t *
v_U8_t
v_U8_t
*
*
&pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
sizeof( pHddCtx->cfg_ini->intfMacAddr[0])
( pHddCtx->cfg_ini->intfMacAddr[0])
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
if (!HAL_STATUS_SUCCESS( halStatus ))      {         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }
!HAL_STATUS_SUCCESS( halStatus )
HAL_STATUS_SUCCESS( halStatus )
HAL_STATUS_SUCCESS
HAL_STATUS_SUCCESS
halStatus
halStatus
{         hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );         goto err_vosclose;      }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus );
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus )
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: Failed to set MAC Address. "                "HALStatus is %08d [x%08x]"
__func__
__func__
halStatus
halStatus
halStatus
halStatus
goto err_vosclose;
err_vosclose
status = vos_start( pHddCtx->pvosContext );
status = vos_start( pHddCtx->pvosContext )
status
status
vos_start( pHddCtx->pvosContext )
vos_start
vos_start
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_start failed"
__func__
__func__
if (isSsrPanicOnFailure())          VOS_BUG(0);
isSsrPanicOnFailure()
isSsrPanicOnFailure
isSsrPanicOnFailure
VOS_BUG(0);
VOS_BUG(0)
VOS_BUG
VOS_BUG
0
goto err_vosclose;
err_vosclose
hdd_exchange_version_and_caps(pHddCtx);
hdd_exchange_version_and_caps(pHddCtx)
hdd_exchange_version_and_caps
hdd_exchange_version_and_caps
pHddCtx
pHddCtx
status = hdd_post_voss_start_config( pHddCtx );
status = hdd_post_voss_start_config( pHddCtx )
status
status
hdd_post_voss_start_config( pHddCtx )
hdd_post_voss_start_config
hdd_post_voss_start_config
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hdd_post_voss_start_config failed"
__func__
__func__
goto err_vosstop;
err_vosstop
wlan_hdd_cfg80211_update_reg_info( wiphy );
wlan_hdd_cfg80211_update_reg_info( wiphy )
wlan_hdd_cfg80211_update_reg_info
wlan_hdd_cfg80211_update_reg_info
wiphy
wiphy
if (0 > wlan_hdd_cfg80211_register(wiphy))   {       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }
0 > wlan_hdd_cfg80211_register(wiphy)
0
wlan_hdd_cfg80211_register(wiphy)
wlan_hdd_cfg80211_register
wlan_hdd_cfg80211_register
wiphy
wiphy
{       hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);       goto err_vosstop;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: wiphy register failed"
__func__
__func__
goto err_vosstop;
err_vosstop
wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx);
wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx)
wcnss_wlan_set_drvdata
wcnss_wlan_set_drvdata
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
pHddCtx
pHddCtx
if (VOS_STA_SAP_MODE == hdd_get_conparam())   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }   else   {     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }
VOS_STA_SAP_MODE == hdd_get_conparam()
VOS_STA_SAP_MODE
VOS_STA_SAP_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );   }
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
pAdapter
pAdapter
hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
hdd_open_adapter
hdd_open_adapter
pHddCtx
pHddCtx
WLAN_HDD_SOFTAP
WLAN_HDD_SOFTAP
"softap.%d"
wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr
wlan_hdd_get_intf_addr
pHddCtx
pHddCtx
FALSE
FALSE
{     pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );     if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }   }
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE );
pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
pAdapter
pAdapter
hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",         wlan_hdd_get_intf_addr(pHddCtx), FALSE )
hdd_open_adapter
hdd_open_adapter
pHddCtx
pHddCtx
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
"wlan%d"
wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr
wlan_hdd_get_intf_addr
pHddCtx
pHddCtx
FALSE
FALSE
if (pAdapter != NULL)     {         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }
pAdapter != NULL
pAdapter
pAdapter
NULL
NULL
{         if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }         pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );         if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }     }
if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02))         {               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }         else         {             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }
pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
isP2pDeviceAddrAdministrated
!(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02
pHddCtx->cfg_ini->intfMacAddr[0].bytes[0]
pHddCtx->cfg_ini->intfMacAddr[0].bytes
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
bytes
0
0x02
{               vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));                /* Generate the P2P Device Address.  This consists of the device's                 * primary MAC address with the locally administered bit set.                */                pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;         }
vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr));
vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,                       sizeof(tSirMacAddr))
vos_mem_copy
vos_mem_copy
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
pHddCtx->cfg_ini->intfMacAddr[0].bytes
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
bytes
sizeof(tSirMacAddr)
tSirMacAddr
tSirMacAddr
tSirMacAddr

pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02;
pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02
pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
0
0x02
{             tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);             if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }         }
tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);
tANI_U8* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx);
tANI_U8
tANI_U8
* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx)
*
p2p_dev_addr
= wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr(pHddCtx)
wlan_hdd_get_intf_addr
wlan_hdd_get_intf_addr
pHddCtx
pHddCtx
if (p2p_dev_addr != NULL)             {                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }             else             {                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }
p2p_dev_addr != NULL
p2p_dev_addr
p2p_dev_addr
NULL
NULL
{                 vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);             }
vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE);
vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],                             p2p_dev_addr, VOS_MAC_ADDR_SIZE)
vos_mem_copy
vos_mem_copy
&pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
0
p2p_dev_addr
p2p_dev_addr
VOS_MAC_ADDR_SIZE
VOS_MAC_ADDR_SIZE
{                   hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);                   goto err_close_adapter;             }
hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,                           "%s: Failed to allocate mac_address for p2p_device",                   __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed to allocate mac_address for p2p_device"
__func__
__func__
goto err_close_adapter;
err_close_adapter
pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE );
pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
pP2pAdapter
pP2pAdapter
hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
hdd_open_adapter
hdd_open_adapter
pHddCtx
pHddCtx
WLAN_HDD_P2P_DEVICE
WLAN_HDD_P2P_DEVICE
"p2p%d"
&pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes[0]
pHddCtx->p2pDeviceAddress.bytes
pHddCtx->p2pDeviceAddress
pHddCtx
pHddCtx
p2pDeviceAddress
bytes
0
FALSE
FALSE
if ( NULL == pP2pAdapter )         {             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }
NULL == pP2pAdapter
NULL
NULL
pP2pAdapter
pP2pAdapter
{             hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);             goto err_close_adapter;         }
hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,                "%s: Failed to do hdd_open_adapter for P2P Device Interface",                __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed to do hdd_open_adapter for P2P Device Interface"
__func__
__func__
goto err_close_adapter;
err_close_adapter
if( pAdapter == NULL )   {      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }
pAdapter == NULL
pAdapter
pAdapter
NULL
NULL
{      hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);      goto err_close_adapter;   }
hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__);
hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: hdd_open_adapter failed"
__func__
__func__
goto err_close_adapter;
err_close_adapter
if (country_code)   {      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }
country_code
country_code
{      eHalStatus ret;      INIT_COMPLETION(pAdapter->change_country_code);      hdd_checkandupdate_dfssetting(pAdapter, country_code);#ifndef CONFIG_ENABLE_LINUX_REG      hdd_checkandupdate_phymode(pAdapter, country_code);#endif      ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);      if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }   }
eHalStatus ret;
eHalStatus ret;
eHalStatus
eHalStatus
ret
ret
INIT_COMPLETION(pAdapter->change_country_code);
INIT_COMPLETION(pAdapter->change_country_code)
INIT_COMPLETION
INIT_COMPLETION
pAdapter->change_country_code
pAdapter
pAdapter
change_country_code
hdd_checkandupdate_dfssetting(pAdapter, country_code);
hdd_checkandupdate_dfssetting(pAdapter, country_code)
hdd_checkandupdate_dfssetting
hdd_checkandupdate_dfssetting
pAdapter
pAdapter
country_code
country_code
hdd_checkandupdate_phymode(pAdapter, country_code);
hdd_checkandupdate_phymode(pAdapter, country_code)
hdd_checkandupdate_phymode
hdd_checkandupdate_phymode
pAdapter
pAdapter
country_code
country_code
ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE);
ret = sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE)
ret
ret
sme_ChangeCountryCode(pHddCtx->hHal,                                  (void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback,                                  country_code,                                  pAdapter, pHddCtx->pvosContext,                                  eSIR_TRUE, eSIR_TRUE)
sme_ChangeCountryCode
sme_ChangeCountryCode
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
(void *)(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback
void *
void
*
*
(tSmeChangeCountryCallback)                                  wlan_hdd_change_country_code_callback
tSmeChangeCountryCallback
tSmeChangeCountryCallback
tSmeChangeCountryCallback

wlan_hdd_change_country_code_callback
wlan_hdd_change_country_code_callback
country_code
country_code
pAdapter
pAdapter
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
eSIR_TRUE
eSIR_TRUE
eSIR_TRUE
eSIR_TRUE
if (eHAL_STATUS_SUCCESS == ret)      {         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }      else      {         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }
eHAL_STATUS_SUCCESS == ret
eHAL_STATUS_SUCCESS
eHAL_STATUS_SUCCESS
ret
ret
{         ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));         if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }      }
ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY));
ret = wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY))
ret
ret
wait_for_completion_interruptible_timeout(                       &pAdapter->change_country_code,                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY))
wait_for_completion_interruptible_timeout
wait_for_completion_interruptible_timeout
&pAdapter->change_country_code
pAdapter->change_country_code
pAdapter
pAdapter
change_country_code
msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
msecs_to_jiffies
msecs_to_jiffies
WLAN_WAIT_TIME_COUNTRY
WLAN_WAIT_TIME_COUNTRY
if (0 >= ret)         {            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }
0 >= ret
0
ret
ret
{            VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);         }
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__);
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                      "%s: SME while setting country code timed out", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: SME while setting country code timed out"
__func__
__func__
{         VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);      }
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret);
VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                   "%s: SME Change Country code from module param fail ret=%d",                   __func__, ret)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: SME Change Country code from module param fail ret=%d"
__func__
__func__
ret
ret
if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)   {       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }
CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask
CFG_QOS_WMM_UAPSD_MASK_DEFAULT
CFG_QOS_WMM_UAPSD_MASK_DEFAULT
pHddCtx->cfg_ini->UapsdMask
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
UapsdMask
{       if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }   }
if(IS_DYNAMIC_WMM_PS_ENABLED)       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }       else       {           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }
IS_DYNAMIC_WMM_PS_ENABLED
IS_DYNAMIC_WMM_PS_ENABLED
{           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;       }
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__);
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",                     __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_DEBUG
VOS_TRACE_LEVEL_DEBUG
"%s: Enable UAPSD for VI & VO"
__func__
__func__
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT;
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT
pHddCtx->cfg_ini->UapsdMask
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
UapsdMask
CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT
CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT
{           hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);           pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;       }
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__);
hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",                     __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_DEBUG
VOS_TRACE_LEVEL_DEBUG
"%s: Do not enable UAPSD"
__func__
__func__
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT;
pHddCtx->cfg_ini->UapsdMask =                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT
pHddCtx->cfg_ini->UapsdMask
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
UapsdMask
CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT
CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT
wlan_hdd_tdls_init(pHddCtx);
wlan_hdd_tdls_init(pHddCtx)
wlan_hdd_tdls_init
wlan_hdd_tdls_init
pHddCtx
pHddCtx
wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt);
wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt)
wlan_hdd_init_deinit_defer_scan_context
wlan_hdd_init_deinit_defer_scan_context
&pHddCtx->scan_ctxt
pHddCtx->scan_ctxt
pHddCtx
pHddCtx
scan_ctxt
vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan);
vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,                         wlan_hdd_schedule_defer_scan)
vos_init_delayed_work
vos_init_delayed_work
&pHddCtx->scan_ctxt.scan_work
pHddCtx->scan_ctxt.scan_work
pHddCtx->scan_ctxt
pHddCtx
pHddCtx
scan_ctxt
scan_work
wlan_hdd_schedule_defer_scan
wlan_hdd_schedule_defer_scan
sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done);
sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done)
sme_Register11dScanDoneCallback
sme_Register11dScanDoneCallback
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
hdd_11d_scan_done
hdd_11d_scan_done
status = hddRegisterPmOps(pHddCtx);
status = hddRegisterPmOps(pHddCtx)
status
status
hddRegisterPmOps(pHddCtx)
hddRegisterPmOps
hddRegisterPmOps
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);#ifdef WLAN_BTAMP_FEATURE      goto err_bap_stop;#else      goto err_close_adapter;#endif //WLAN_BTAMP_FEATURE   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hddRegisterPmOps failed"
__func__
__func__
goto err_close_adapter;
err_close_adapter
if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter))   {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }
VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter)
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
hdd_debugfs_init(pAdapter)
hdd_debugfs_init
hdd_debugfs_init
pAdapter
pAdapter
{      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);   }
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__);
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,                 "%s: hdd_debugfs_init failed!", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: hdd_debugfs_init failed!"
__func__
__func__
status = hddDevTmRegisterNotifyCallback(pHddCtx);
status = hddDevTmRegisterNotifyCallback(pHddCtx)
status
status
hddDevTmRegisterNotifyCallback(pHddCtx)
hddDevTmRegisterNotifyCallback
hddDevTmRegisterNotifyCallback
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( status ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }
!VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);      goto err_unregister_pmops;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hddDevTmRegisterNotifyCallback failed"
__func__
__func__
goto err_unregister_pmops;
err_unregister_pmops
ret = register_netdevice_notifier(&hdd_netdev_notifier);
ret = register_netdevice_notifier(&hdd_netdev_notifier)
ret
ret
register_netdevice_notifier(&hdd_netdev_notifier)
register_netdevice_notifier
register_netdevice_notifier
&hdd_netdev_notifier
hdd_netdev_notifier
hdd_netdev_notifier
if(ret < 0)   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }
ret < 0
ret
ret
0
{      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);      goto err_unregister_pmops;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: register_netdevice_notifier failed"
__func__
__func__
goto err_unregister_pmops;
err_unregister_pmops
if(btc_activate_service(pHddCtx) != 0)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }
btc_activate_service(pHddCtx) != 0
btc_activate_service(pHddCtx)
btc_activate_service
btc_activate_service
pHddCtx
pHddCtx
0
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);      goto err_reg_netdev;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: btc_activate_service failed"
__func__
__func__
goto err_reg_netdev;
err_reg_netdev
if (vos_is_multicast_logging())       wlan_logging_set_log_level();
vos_is_multicast_logging()
vos_is_multicast_logging
vos_is_multicast_logging
wlan_logging_set_log_level();
wlan_logging_set_log_level()
wlan_logging_set_log_level
wlan_logging_set_log_level
hdd_register_mcast_bcast_filter(pHddCtx);
hdd_register_mcast_bcast_filter(pHddCtx)
hdd_register_mcast_bcast_filter
hdd_register_mcast_bcast_filter
pHddCtx
pHddCtx
if (VOS_STA_SAP_MODE != hdd_get_conparam())   {      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }
VOS_STA_SAP_MODE != hdd_get_conparam()
VOS_STA_SAP_MODE
VOS_STA_SAP_MODE
hdd_get_conparam()
hdd_get_conparam
hdd_get_conparam
{      /* Action frame registered in one adapter which will       * applicable to all interfaces       */      wlan_hdd_cfg80211_register_frames(pAdapter);   }
wlan_hdd_cfg80211_register_frames(pAdapter);
wlan_hdd_cfg80211_register_frames(pAdapter)
wlan_hdd_cfg80211_register_frames
wlan_hdd_cfg80211_register_frames
pAdapter
pAdapter
mutex_init(&pHddCtx->sap_lock);
mutex_init(&pHddCtx->sap_lock)
mutex_init
mutex_init
&pHddCtx->sap_lock
pHddCtx->sap_lock
pHddCtx
pHddCtx
sap_lock
mutex_init(&pHddCtx->roc_lock);
mutex_init(&pHddCtx->roc_lock)
mutex_init
mutex_init
&pHddCtx->roc_lock
pHddCtx->roc_lock
pHddCtx
pHddCtx
roc_lock
vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock");
vos_wake_lock_init(&pHddCtx->sap_wake_lock,           "qcom_sap_wakelock")
vos_wake_lock_init
vos_wake_lock_init
&pHddCtx->sap_wake_lock
pHddCtx->sap_wake_lock
pHddCtx
pHddCtx
sap_wake_lock
"qcom_sap_wakelock"
vos_event_init(&pHddCtx->scan_info.scan_finished_event);
vos_event_init(&pHddCtx->scan_info.scan_finished_event)
vos_event_init
vos_event_init
&pHddCtx->scan_info.scan_finished_event
pHddCtx->scan_info.scan_finished_event
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
scan_finished_event
pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP;
pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP
pHddCtx->scan_info.scan_pending_option
pHddCtx->scan_info
pHddCtx
pHddCtx
scan_info
scan_pending_option
WEXT_SCAN_PENDING_GIVEUP
WEXT_SCAN_PENDING_GIVEUP
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS;
pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
pHddCtx->isLoadUnloadInProgress
pHddCtx
pHddCtx
isLoadUnloadInProgress
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_load_unload_in_progress
vos_set_load_unload_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
hdd_allow_suspend
hdd_allow_suspend
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
sme_UpdateChannelList(pHddCtx->hHal);
sme_UpdateChannelList(pHddCtx->hHal)
sme_UpdateChannelList
sme_UpdateChannelList
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode));
sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter),       hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode))
sme_SetPhyMode
sme_SetPhyMode
WLAN_HDD_GET_HAL_CTX(pAdapter)
WLAN_HDD_GET_HAL_CTX
WLAN_HDD_GET_HAL_CTX
pAdapter
pAdapter
hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode)
hdd_cfg_xlate_to_csr_phy_mode
hdd_cfg_xlate_to_csr_phy_mode
pHddCtx->cfg_ini->dot11Mode
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
dot11Mode
sme_SetDefDot11Mode(pHddCtx->hHal);
sme_SetDefDot11Mode(pHddCtx->hHal)
sme_SetDefDot11Mode
sme_SetDefDot11Mode
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
if (wiphy)   {       regulatory_hint(wiphy, "00");   }
wiphy
wiphy
{       regulatory_hint(wiphy, "00");   }
regulatory_hint(wiphy, "00");
regulatory_hint(wiphy, "00")
regulatory_hint
regulatory_hint
wiphy
wiphy
"00"
wlan_hdd_restart_init(pHddCtx);
wlan_hdd_restart_init(pHddCtx)
wlan_hdd_restart_init
wlan_hdd_restart_init
pHddCtx
pHddCtx
if ( pHddCtx->cfg_ini->dynSplitscan)   {       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }
pHddCtx->cfg_ini->dynSplitscan
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
dynSplitscan
{       vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);   }
vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx);
vos_timer_init(&pHddCtx->tx_rx_trafficTmr,                     VOS_TIMER_TYPE_SW,                     hdd_tx_rx_pkt_cnt_stat_timer_handler,                     (void *)pHddCtx)
vos_timer_init
vos_timer_init
&pHddCtx->tx_rx_trafficTmr
pHddCtx->tx_rx_trafficTmr
pHddCtx
pHddCtx
tx_rx_trafficTmr
VOS_TIMER_TYPE_SW
VOS_TIMER_TYPE_SW
hdd_tx_rx_pkt_cnt_stat_timer_handler
hdd_tx_rx_pkt_cnt_stat_timer_handler
(void *)pHddCtx
void *
void
*
*
pHddCtx
pHddCtx
wlan_hdd_cfg80211_nan_init(pHddCtx);
wlan_hdd_cfg80211_nan_init(pHddCtx)
wlan_hdd_cfg80211_nan_init
wlan_hdd_cfg80211_nan_init
pHddCtx
pHddCtx
mutex_init(&pHddCtx->cur_rx_level_lock);
mutex_init(&pHddCtx->cur_rx_level_lock)
mutex_init
mutex_init
&pHddCtx->cur_rx_level_lock
pHddCtx->cur_rx_level_lock
pHddCtx
pHddCtx
cur_rx_level_lock
vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx);
vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,                             hdd_tcp_delack_compute_function,(void *)pHddCtx)
vos_timer_init
vos_timer_init
&pHddCtx->delack_timer
pHddCtx->delack_timer
pHddCtx
pHddCtx
delack_timer
VOS_TIMER_TYPE_SW
VOS_TIMER_TYPE_SW
hdd_tcp_delack_compute_function
hdd_tcp_delack_compute_function
(void *)pHddCtx
void *
void
*
*
pHddCtx
pHddCtx
vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx);
vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,                  wlan_hdd_change_tdls_mode, (void *)pHddCtx)
vos_timer_init
vos_timer_init
&pHddCtx->tdls_source_timer
pHddCtx->tdls_source_timer
pHddCtx
pHddCtx
tdls_source_timer
VOS_TIMER_TYPE_SW
VOS_TIMER_TYPE_SW
wlan_hdd_change_tdls_mode
wlan_hdd_change_tdls_mode
(void *)pHddCtx
void *
void
*
*
pHddCtx
pHddCtx
sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);
sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb)
sme_set_rssi_threshold_breached_cb
sme_set_rssi_threshold_breached_cb
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
hdd_rssi_threshold_breached_cb
hdd_rssi_threshold_breached_cb
pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed;
pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed
pHddCtx->ipv4_notifier.notifier_call
pHddCtx->ipv4_notifier
pHddCtx
pHddCtx
ipv4_notifier
notifier_call
wlan_hdd_ipv4_changed
wlan_hdd_ipv4_changed
ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier);
ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
ret
ret
register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
register_inetaddr_notifier
register_inetaddr_notifier
&pHddCtx->ipv4_notifier
pHddCtx->ipv4_notifier
pHddCtx
pHddCtx
ipv4_notifier
if (ret)   {      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }   else   {      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }
ret
ret
{      hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));   }
hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"));
hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier"))
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
FL("Failed to register IPv4 notifier")
FL
FL
"Failed to register IPv4 notifier"
{      hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));   }
hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"));
hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier"))
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
FL("Registered IPv4 notifier")
FL
FL
"Registered IPv4 notifier"
memdump_init();
memdump_init()
memdump_init
memdump_init
hdd_dp_util_send_rps_ind(pHddCtx);
hdd_dp_util_send_rps_ind(pHddCtx)
hdd_dp_util_send_rps_ind
hdd_dp_util_send_rps_ind
pHddCtx
pHddCtx
goto success;
success
err_reg_netdev:   unregister_netdevice_notifier(&hdd_netdev_notifier);
err_reg_netdev
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier
unregister_netdevice_notifier
(&hdd_netdev_notifier)
&hdd_netdev_notifier
&
hdd_netdev_notifier
err_unregister_pmops:   hddDevTmUnregisterNotifyCallback(pHddCtx);
err_unregister_pmops
hddDevTmUnregisterNotifyCallback(pHddCtx);
hddDevTmUnregisterNotifyCallback(pHddCtx)
hddDevTmUnregisterNotifyCallback
hddDevTmUnregisterNotifyCallback
pHddCtx
pHddCtx
hddDeregisterPmOps(pHddCtx);
hddDeregisterPmOps(pHddCtx)
hddDeregisterPmOps
hddDeregisterPmOps
pHddCtx
pHddCtx
hdd_debugfs_exit(pHddCtx);
hdd_debugfs_exit(pHddCtx)
hdd_debugfs_exit
hdd_debugfs_exit
pHddCtx
pHddCtx
err_close_adapter:   hdd_close_all_adapters( pHddCtx );
err_close_adapter
hdd_close_all_adapters( pHddCtx );
hdd_close_all_adapters( pHddCtx )
hdd_close_all_adapters
hdd_close_all_adapters
pHddCtx
pHddCtx
wiphy_unregister(wiphy) ;
wiphy_unregister(wiphy)
wiphy_unregister
wiphy_unregister
wiphy
wiphy
hdd_wlan_free_wiphy_channels(wiphy);
hdd_wlan_free_wiphy_channels(wiphy)
hdd_wlan_free_wiphy_channels
hdd_wlan_free_wiphy_channels
wiphy
wiphy
err_vosstop:   vos_stop(pVosContext);
err_vosstop
vos_stop(pVosContext);
vos_stop(pVosContext)
vos_stop
vos_stop
pVosContext
pVosContext
err_vosclose:   status = vos_sched_close( pVosContext );
err_vosclose
status = vos_sched_close( pVosContext );
status = vos_sched_close( pVosContext )
status
status
vos_sched_close( pVosContext )
vos_sched_close
vos_sched_close
pVosContext
pVosContext
if (!VOS_IS_STATUS_SUCCESS(status))    {      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }
!VOS_IS_STATUS_SUCCESS(status)
VOS_IS_STATUS_SUCCESS(status)
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
{      VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);      VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );   }
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__);
VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,         "%s: Failed to close VOSS Scheduler", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed to close VOSS Scheduler"
__func__
__func__
VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) );
VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status ) )
VOS_ASSERT
VOS_ASSERT
VOS_IS_STATUS_SUCCESS( status )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
status
status
vos_close(pVosContext );
vos_close(pVosContext )
vos_close
vos_close
pVosContext
pVosContext
err_nl_srv:#ifdef WLAN_KD_READY_NOTIFIER   nl_srv_exit(pHddCtx->ptt_pid);#else   nl_srv_exit();
err_nl_srv
nl_srv_exit();
nl_srv_exit()
nl_srv_exit
nl_srv_exit
err_vos_nv_close:#ifdef CONFIG_ENABLE_LINUX_REG   vos_nv_close();#endiferr_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);
err_vos_nv_close
err_wdclose:   if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);
err_wdclose
if(pHddCtx->cfg_ini->fIsLogpEnabled)      vos_watchdog_close(pVosContext);
pHddCtx->cfg_ini->fIsLogpEnabled
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
fIsLogpEnabled
vos_watchdog_close(pVosContext);
vos_watchdog_close(pVosContext)
vos_watchdog_close
vos_watchdog_close
pVosContext
pVosContext
err_config:   kfree(pHddCtx->cfg_ini);
err_config
kfree(pHddCtx->cfg_ini);
kfree(pHddCtx->cfg_ini)
kfree
kfree
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
pHddCtx->cfg_ini= NULL;
pHddCtx->cfg_ini= NULL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
NULL
NULL
err_free_hdd_context:   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
err_free_hdd_context
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT);
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
hdd_allow_suspend
hdd_allow_suspend
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT
free_riva_power_on_lock("wlan");
free_riva_power_on_lock("wlan")
free_riva_power_on_lock
free_riva_power_on_lock
"wlan"
wiphy_free(wiphy) ;
wiphy_free(wiphy)
wiphy_free
wiphy_free
wiphy
wiphy
VOS_BUG(1);
VOS_BUG(1)
VOS_BUG
VOS_BUG
1
if (hdd_is_ssr_required())   {       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }
hdd_is_ssr_required()
hdd_is_ssr_required
hdd_is_ssr_required
{       /* WDI timeout had happened during load, so SSR is needed here */       subsystem_restart("wcnss");       msleep(5000);   }
subsystem_restart("wcnss");
subsystem_restart("wcnss")
subsystem_restart
subsystem_restart
"wcnss"
msleep(5000);
msleep(5000)
msleep
msleep
5000
hdd_set_ssr_required (VOS_FALSE);
hdd_set_ssr_required (VOS_FALSE);
hdd_set_ssr_required
hdd_set_ssr_required
(VOS_FALSE)
VOS_FALSE
VOS_FALSE
return -EIO;
-EIO
EIO
EIO
success:   EXIT();
success
EXIT();
EXIT()
EXIT
EXIT
return 0;
0
-----joern-----
(189,873,0)
(1264,428,0)
(181,792,0)
(1277,1625,0)
(421,1059,0)
(1380,873,0)
(1227,927,0)
(1501,307,0)
(1428,1677,0)
(381,727,0)
(478,1587,0)
(1680,686,0)
(1654,1525,0)
(15,873,0)
(1223,1645,0)
(597,335,0)
(1042,1049,0)
(1255,873,0)
(320,1214,0)
(285,1101,0)
(1472,993,0)
(386,1630,0)
(1660,763,0)
(1345,1677,0)
(296,927,0)
(425,637,0)
(776,1677,0)
(1145,189,0)
(123,883,0)
(184,1122,0)
(1728,1250,0)
(1071,1317,0)
(130,164,0)
(1576,1794,0)
(780,71,0)
(937,103,0)
(807,133,0)
(1120,873,0)
(1804,1677,0)
(1324,309,0)
(1242,134,0)
(1512,1442,0)
(145,1587,0)
(38,1056,0)
(1428,1165,0)
(1727,994,0)
(1303,737,0)
(598,1550,0)
(1062,1197,0)
(1738,1677,0)
(1504,944,0)
(1599,719,0)
(713,1660,0)
(457,825,0)
(6,307,0)
(1061,884,0)
(680,1398,0)
(17,873,0)
(575,348,0)
(1178,1337,0)
(1492,36,0)
(537,1606,0)
(669,1302,0)
(1418,873,0)
(349,1761,0)
(519,873,0)
(1366,873,0)
(55,704,0)
(1107,797,0)
(1024,1169,0)
(1423,226,0)
(857,476,0)
(514,1792,0)
(452,57,0)
(1513,1195,0)
(1083,307,0)
(347,75,0)
(478,645,0)
(600,873,0)
(1193,1677,0)
(1593,1253,0)
(1196,547,0)
(1284,879,0)
(1813,975,0)
(1389,111,0)
(260,1499,0)
(1190,873,0)
(397,1562,0)
(1010,1221,0)
(838,276,0)
(29,873,0)
(1717,850,0)
(1334,768,0)
(772,1645,0)
(1525,1677,0)
(1578,768,0)
(260,1804,0)
(373,1799,0)
(918,1626,0)
(373,1350,0)
(1538,1499,0)
(151,1057,0)
(479,6,0)
(624,811,0)
(15,153,0)
(1212,1121,0)
(1038,906,0)
(1660,479,0)
(896,1497,0)
(1542,465,0)
(1217,478,0)
(611,873,0)
(1397,927,0)
(75,1792,0)
(1573,1715,0)
(685,192,0)
(1369,1768,0)
(1231,1799,0)
(935,293,0)
(1431,725,0)
(1767,1264,0)
(731,906,0)
(388,241,0)
(1550,1130,0)
(497,1658,0)
(880,1452,0)
(1704,1496,0)
(541,1677,0)
(375,1011,0)
(627,1149,0)
(1043,1766,0)
(1729,712,0)
(1631,614,0)
(1636,1348,0)
(260,873,0)
(121,130,0)
(197,259,0)
(792,158,0)
(1380,120,0)
(1712,40,0)
(478,985,0)
(1179,1141,0)
(1166,730,0)
(673,669,0)
(1356,1025,0)
(818,1380,0)
(593,1772,0)
(435,1457,0)
(910,1141,0)
(828,873,0)
(782,1677,0)
(1169,528,0)
(71,1677,0)
(1644,1677,0)
(1446,1072,0)
(925,573,0)
(1399,1521,0)
(1543,1792,0)
(1447,794,0)
(855,1416,0)
(977,232,0)
(305,574,0)
(1220,509,0)
(869,1677,0)
(556,1677,0)
(602,1677,0)
(303,1414,0)
(1124,1543,0)
(281,1190,0)
(407,276,0)
(1383,776,0)
(626,196,0)
(1015,1290,0)
(616,1736,0)
(550,81,0)
(1812,1633,0)
(205,1339,0)
(1192,324,0)
(1455,1677,0)
(1238,291,0)
(270,889,0)
(494,1503,0)
(1248,81,0)
(478,763,0)
(507,1664,0)
(1356,1677,0)
(1136,1117,0)
(795,1071,0)
(1016,1677,0)
(480,873,0)
(528,873,0)
(1661,873,0)
(1577,873,0)
(1051,1199,0)
(1625,81,0)
(877,1677,0)
(1135,971,0)
(907,873,0)
(257,720,0)
(1653,705,0)
(613,873,0)
(680,1677,0)
(979,648,0)
(1214,750,0)
(343,76,0)
(460,1457,0)
(1666,152,0)
(98,1243,0)
(1525,307,0)
(1491,1677,0)
(3,232,0)
(1416,855,0)
(1666,1690,0)
(1257,749,0)
(1651,1606,0)
(1698,541,0)
(362,1100,0)
(1398,1763,0)
(1138,5,0)
(536,1677,0)
(1789,1127,0)
(1736,616,0)
(249,1226,0)
(39,1394,0)
(1167,1677,0)
(1017,1749,0)
(1584,976,0)
(229,1548,0)
(386,1095,0)
(569,969,0)
(1582,720,0)
(525,513,0)
(463,916,0)
(245,1724,0)
(167,310,0)
(1351,1670,0)
(1028,892,0)
(651,1677,0)
(621,132,0)
(109,1656,0)
(1733,1677,0)
(756,873,0)
(1394,1303,0)
(1616,696,0)
(1623,1077,0)
(384,6,0)
(187,644,0)
(1078,1498,0)
(172,1677,0)
(884,1677,0)
(230,1035,0)
(125,1263,0)
(1383,873,0)
(1040,863,0)
(914,782,0)
(190,1544,0)
(71,307,0)
(1771,1455,0)
(244,1189,0)
(1720,985,0)
(214,974,0)
(486,924,0)
(475,1770,0)
(442,624,0)
(1210,1288,0)
(365,1677,0)
(1347,416,0)
(957,494,0)
(887,1407,0)
(851,1801,0)
(644,873,0)
(163,1664,0)
(568,873,0)
(989,786,0)
(1232,611,0)
(1597,873,0)
(601,579,0)
(1132,1395,0)
(1458,1688,0)
(1362,719,0)
(1225,965,0)
(422,705,0)
(705,1653,0)
(351,873,0)
(1660,760,0)
(1713,1391,0)
(1216,1029,0)
(722,873,0)
(374,1392,0)
(99,1805,0)
(192,873,0)
(509,399,0)
(1684,912,0)
(496,1489,0)
(169,1677,0)
(1607,1516,0)
(80,651,0)
(1295,1284,0)
(1108,1677,0)
(260,399,0)
(796,1677,0)
(1235,873,0)
(1665,1660,0)
(1797,1138,0)
(1051,938,0)
(1076,1033,0)
(260,688,0)
(586,1698,0)
(451,1717,0)
(903,811,0)
(788,1421,0)
(26,873,0)
(1765,172,0)
(242,873,0)
(689,1651,0)
(1712,395,0)
(1511,1348,0)
(639,1677,0)
(528,1281,0)
(949,307,0)
(1443,1214,0)
(1685,1799,0)
(612,683,0)
(1,720,0)
(490,1717,0)
(595,317,0)
(474,1667,0)
(49,445,0)
(1348,494,0)
(1759,987,0)
(1451,385,0)
(1775,285,0)
(1029,521,0)
(281,960,0)
(59,320,0)
(160,1311,0)
(492,567,0)
(75,134,0)
(970,637,0)
(1151,1677,0)
(402,616,0)
(480,1810,0)
(1151,1678,0)
(160,704,0)
(1793,117,0)
(641,398,0)
(1698,873,0)
(1711,1464,0)
(1427,1214,0)
(488,373,0)
(1213,62,0)
(1552,1055,0)
(260,1086,0)
(273,307,0)
(142,483,0)
(1480,850,0)
(1492,307,0)
(1116,1467,0)
(1457,1761,0)
(260,1414,0)
(752,873,0)
(1329,873,0)
(1457,435,0)
(1174,18,0)
(316,940,0)
(508,456,0)
(1131,663,0)
(1624,479,0)
(1436,62,0)
(4,245,0)
(263,537,0)
(1060,643,0)
(1539,1169,0)
(905,182,0)
(97,1677,0)
(874,1745,0)
(157,1168,0)
(1287,1568,0)
(1780,411,0)
(945,61,0)
(1524,219,0)
(1782,417,0)
(1100,273,0)
(1058,1190,0)
(1804,614,0)
(896,1792,0)
(338,1161,0)
(1053,1218,0)
(1678,1151,0)
(1571,1661,0)
(83,873,0)
(310,951,0)
(71,1009,0)
(961,1381,0)
(1621,1129,0)
(662,373,0)
(616,1491,0)
(1313,447,0)
(1243,98,0)
(219,1524,0)
(1810,1452,0)
(1608,536,0)
(289,541,0)
(215,1677,0)
(916,31,0)
(1253,1593,0)
(1520,853,0)
(976,1719,0)
(674,1677,0)
(476,117,0)
(260,583,0)
(283,778,0)
(1497,896,0)
(825,834,0)
(1708,1416,0)
(716,548,0)
(1381,873,0)
(526,759,0)
(1233,1083,0)
(1761,1457,0)
(1242,73,0)
(173,815,0)
(990,98,0)
(920,809,0)
(993,1465,0)
(1534,1664,0)
(1207,1677,0)
(628,1590,0)
(264,1009,0)
(1562,1662,0)
(445,268,0)
(60,269,0)
(140,926,0)
(1656,798,0)
(1194,1431,0)
(56,1677,0)
(815,1677,0)
(258,307,0)
(1122,184,0)
(1784,1680,0)
(260,1455,0)
(1691,554,0)
(749,1257,0)
(1636,1770,0)
(1062,516,0)
(1771,986,0)
(699,642,0)
(1117,307,0)
(1402,298,0)
(412,42,0)
(1353,385,0)
(942,247,0)
(938,1051,0)
(1660,399,0)
(437,1806,0)
(473,357,0)
(881,763,0)
(555,831,0)
(220,307,0)
(1296,492,0)
(85,1677,0)
(24,278,0)
(1770,475,0)
(567,492,0)
(1190,1058,0)
(1801,851,0)
(985,1677,0)
(1771,119,0)
(704,1677,0)
(1304,1504,0)
(946,302,0)
(1756,873,0)
(1169,1732,0)
(1415,445,0)
(682,1771,0)
(1299,1122,0)
(1046,898,0)
(1152,1059,0)
(398,1512,0)
(1557,1375,0)
(273,1677,0)
(261,46,0)
(428,603,0)
(1595,1677,0)
(1165,1428,0)
(556,307,0)
(1051,35,0)
(1447,1465,0)
(1307,120,0)
(183,488,0)
(1491,307,0)
(1693,873,0)
(475,1677,0)
(1659,873,0)
(1679,1092,0)
(265,611,0)
(768,1578,0)
(228,1525,0)
(1798,873,0)
(1342,924,0)
(750,1214,0)
(235,873,0)
(264,1690,0)
(923,558,0)
(1209,237,0)
(505,1164,0)
(958,873,0)
(1256,136,0)
(441,873,0)
(443,1805,0)
(165,899,0)
(13,1781,0)
(1498,1117,0)
(1635,1563,0)
(1364,683,0)
(607,1700,0)
(797,266,0)
(753,1258,0)
(353,873,0)
(1598,873,0)
(1677,1248,0)
(1344,81,0)
(1796,813,0)
(1047,53,0)
(750,975,0)
(172,1060,0)
(1162,8,0)
(274,883,0)
(1009,264,0)
(1455,189,0)
(1763,1398,0)
(1596,81,0)
(1208,1294,0)
(137,1676,0)
(104,873,0)
(1247,874,0)
(511,940,0)
(1631,169,0)
(1089,1036,0)
(106,1110,0)
(1118,1677,0)
(1122,1299,0)
(352,71,0)
(1518,873,0)
(1401,1469,0)
(1800,873,0)
(1006,1431,0)
(491,1642,0)
(552,112,0)
(1734,1677,0)
(800,1270,0)
(1146,740,0)
(672,776,0)
(867,1250,0)
(1323,365,0)
(720,1677,0)
(1359,1772,0)
(1095,873,0)
(629,468,0)
(862,1105,0)
(1461,1620,0)
(1732,1169,0)
(1086,390,0)
(1002,1677,0)
(390,307,0)
(1464,873,0)
(560,1559,0)
(877,873,0)
(861,1324,0)
(365,307,0)
(1592,873,0)
(1395,307,0)
(579,601,0)
(1617,1571,0)
(1595,1258,0)
(448,873,0)
(478,986,0)
(1773,623,0)
(1802,1719,0)
(963,873,0)
(562,391,0)
(578,1152,0)
(1578,1677,0)
(260,146,0)
(916,112,0)
(763,1658,0)
(1184,1110,0)
(92,81,0)
(1715,70,0)
(509,1677,0)
(1205,1677,0)
(1660,1414,0)
(1645,395,0)
(936,649,0)
(610,348,0)
(1686,1048,0)
(1330,1598,0)
(102,939,0)
(642,1076,0)
(816,510,0)
(1574,1753,0)
(241,388,0)
(838,931,0)
(128,586,0)
(770,1101,0)
(909,1011,0)
(1755,317,0)
(1490,1452,0)
(831,1716,0)
(440,1054,0)
(1160,873,0)
(1593,1644,0)
(683,1364,0)
(1633,19,0)
(1749,1017,0)
(400,1011,0)
(704,1214,0)
(634,1410,0)
(553,1712,0)
(1432,1350,0)
(1349,35,0)
(953,260,0)
(1615,519,0)
(313,1643,0)
(1328,873,0)
(729,705,0)
(155,1345,0)
(671,385,0)
(141,1167,0)
(916,760,0)
(1476,688,0)
(61,307,0)
(1312,1682,0)
(1113,1606,0)
(1694,1680,0)
(1682,1312,0)
(792,307,0)
(809,1467,0)
(728,998,0)
(670,1492,0)
(1771,913,0)
(1495,689,0)
(1086,1529,0)
(706,624,0)
(188,598,0)
(592,475,0)
(1716,831,0)
(208,1425,0)
(958,65,0)
(693,1170,0)
(468,1677,0)
(1644,1593,0)
(1269,1438,0)
(277,748,0)
(1512,1363,0)
(1672,1500,0)
(938,848,0)
(689,1677,0)
(1564,1344,0)
(388,307,0)
(582,1326,0)
(668,1440,0)
(1264,873,0)
(1614,1545,0)
(1005,869,0)
(1677,873,0)
(1771,1804,0)
(236,874,0)
(260,1768,0)
(447,1013,0)
(169,307,0)
(1293,1581,0)
(133,307,0)
(54,1492,0)
(65,1035,0)
(1363,1512,0)
(1358,1299,0)
(398,1730,0)
(1416,1708,0)
(251,1469,0)
(661,159,0)
(1413,873,0)
(808,1083,0)
(72,1516,0)
(1288,725,0)
(1083,1677,0)
(1048,345,0)
(337,1363,0)
(472,873,0)
(1100,628,0)
(139,591,0)
(732,1203,0)
(1298,873,0)
(441,508,0)
(122,8,0)
(1303,1394,0)
(320,1677,0)
(845,911,0)
(1378,92,0)
(915,418,0)
(797,1288,0)
(588,872,0)
(1492,1677,0)
(318,873,0)
(1660,31,0)
(1405,774,0)
(108,873,0)
(1733,798,0)
(1231,571,0)
(709,873,0)
(1718,1561,0)
(785,651,0)
(1333,307,0)
(906,1038,0)
(741,1614,0)
(1620,873,0)
(191,1677,0)
(131,1806,0)
(971,1135,0)
(276,838,0)
(1328,81,0)
(199,1109,0)
(1021,994,0)
(82,873,0)
(743,796,0)
(16,1512,0)
(360,873,0)
(843,398,0)
(1493,1580,0)
(1660,1499,0)
(761,1455,0)
(545,1463,0)
(617,1582,0)
(1642,491,0)
(43,567,0)
(799,1160,0)
(718,873,0)
(1604,873,0)
(1708,873,0)
(1004,320,0)
(872,307,0)
(254,873,0)
(403,195,0)
(805,1420,0)
(1031,1749,0)
(789,598,0)
(396,1388,0)
(512,1647,0)
(1306,870,0)
(156,1677,0)
(962,1735,0)
(1453,1375,0)
(1338,565,0)
(439,1586,0)
(1463,545,0)
(1291,241,0)
(674,1149,0)
(21,873,0)
(605,1117,0)
(1080,873,0)
(626,929,0)
(234,1020,0)
(639,730,0)
(1243,873,0)
(69,832,0)
(1794,1799,0)
(1188,1465,0)
(478,367,0)
(568,1241,0)
(1551,1581,0)
(1245,873,0)
(146,380,0)
(256,169,0)
(1519,873,0)
(1189,244,0)
(76,158,0)
(298,1779,0)
(988,1345,0)
(1320,510,0)
(247,869,0)
(1660,1768,0)
(73,1242,0)
(864,606,0)
(175,949,0)
(511,565,0)
(472,1427,0)
(1314,1214,0)
(377,1792,0)
(1360,1550,0)
(713,916,0)
(547,853,0)
(1531,1735,0)
(1156,873,0)
(620,1541,0)
(1722,1264,0)
(810,873,0)
(1101,285,0)
(1282,1497,0)
(1318,1761,0)
(1611,1432,0)
(1642,873,0)
(924,101,0)
(1020,56,0)
(1749,873,0)
(417,1782,0)
(787,728,0)
(1350,1373,0)
(1786,1677,0)
(221,468,0)
(1361,698,0)
(643,1060,0)
(1290,1015,0)
(551,690,0)
(1165,1340,0)
(1795,637,0)
(225,1632,0)
(1646,1284,0)
(152,1666,0)
(1443,1677,0)
(746,456,0)
(1660,1207,0)
(174,124,0)
(1368,103,0)
(1364,522,0)
(1248,1677,0)
(723,1127,0)
(1218,1053,0)
(1278,259,0)
(1620,1678,0)
(1731,186,0)
(1515,873,0)
(512,1677,0)
(1018,1140,0)
(1604,304,0)
(502,1524,0)
(665,1071,0)
(1431,159,0)
(240,1235,0)
(1084,624,0)
(1167,418,0)
(401,768,0)
(1687,994,0)
(800,873,0)
(584,669,0)
(1395,1677,0)
(366,1792,0)
(1142,1579,0)
(1790,258,0)
(1556,1544,0)
(346,427,0)
(97,1214,0)
(478,1499,0)
(572,59,0)
(1266,1248,0)
(681,1464,0)
(117,1792,0)
(266,1253,0)
(1164,873,0)
(1106,1595,0)
(1099,202,0)
(1213,645,0)
(1424,399,0)
(824,873,0)
(680,307,0)
(602,873,0)
(987,1677,0)
(1550,719,0)
(1551,1677,0)
(806,974,0)
(268,445,0)
(600,1066,0)
(210,1504,0)
(968,556,0)
(1436,411,0)
(908,1149,0)
(866,874,0)
(640,137,0)
(1427,472,0)
(1088,135,0)
(214,220,0)
(194,873,0)
(1476,1002,0)
(581,1430,0)
(91,513,0)
(993,1677,0)
(1236,417,0)
(0,1413,0)
(1746,469,0)
(1703,1794,0)
(1622,1366,0)
(1134,359,0)
(1589,873,0)
(1066,600,0)
(992,1324,0)
(1155,1459,0)
(453,967,0)
(470,1277,0)
(393,1030,0)
(1300,1800,0)
(667,873,0)
(186,478,0)
(1660,536,0)
(654,1130,0)
(777,1284,0)
(1245,1267,0)
(166,1151,0)
(48,873,0)
(949,1677,0)
(985,1413,0)
(1027,1253,0)
(1460,1804,0)
(619,873,0)
(204,97,0)
(705,307,0)
(314,1350,0)
(482,1262,0)
(1044,804,0)
(952,725,0)
(290,870,0)
(305,873,0)
(238,132,0)
(1080,1677,0)
(408,768,0)
(172,307,0)
(1412,146,0)
(1579,873,0)
(315,788,0)
(1014,554,0)
(576,1345,0)
(606,1677,0)
(481,456,0)
(1411,985,0)
(694,1716,0)
(1419,1440,0)
(2,725,0)
(930,624,0)
(973,96,0)
(200,1335,0)
(577,1129,0)
(365,237,0)
(304,606,0)
(697,1231,0)
(1751,1509,0)
(972,416,0)
(286,1155,0)
(1183,873,0)
(1327,102,0)
(113,1395,0)
(1603,599,0)
(630,156,0)
(116,690,0)
(1697,1161,0)
(1693,972,0)
(1763,86,0)
(1541,1562,0)
(336,873,0)
(969,873,0)
(1002,1476,0)
(1554,723,0)
(1421,534,0)
(96,428,0)
(383,357,0)
(588,1203,0)
(1023,1474,0)
(564,598,0)
(577,19,0)
(1510,1086,0)
(1324,992,0)
(1174,483,0)
(1239,510,0)
(740,1799,0)
(1745,874,0)
(498,476,0)
(135,642,0)
(713,1771,0)
(688,1476,0)
(868,226,0)
(1141,667,0)
(1660,985,0)
(341,314,0)
(1085,722,0)
(120,42,0)
(1596,873,0)
(972,1693,0)
(79,1050,0)
(1456,1597,0)
(532,860,0)
(1660,1262,0)
(429,1121,0)
(1171,1161,0)
(1574,873,0)
(1699,367,0)
(1572,696,0)
(348,863,0)
(1467,1677,0)
(926,307,0)
(416,1677,0)
(1336,390,0)
(916,119,0)
(1254,1349,0)
(758,471,0)
(1408,873,0)
(1491,616,0)
(1260,810,0)
(1473,511,0)
(1753,1677,0)
(895,366,0)
(571,719,0)
(997,873,0)
(399,509,0)
(372,244,0)
(158,792,0)
(250,1442,0)
(191,1290,0)
(1498,1078,0)
(447,1313,0)
(872,1677,0)
(622,548,0)
(62,1436,0)
(90,1016,0)
(1008,1455,0)
(1448,1501,0)
(1785,687,0)
(926,1072,0)
(1434,516,0)
(1321,1491,0)
(1117,1498,0)
(1309,178,0)
(169,1631,0)
(1092,1001,0)
(495,1283,0)
(1567,1489,0)
(241,1291,0)
(1792,873,0)
(148,119,0)
(1479,273,0)
(80,1577,0)
(1090,530,0)
(1733,307,0)
(1488,651,0)
(1272,1756,0)
(1234,172,0)
(478,913,0)
(1440,185,0)
(35,1051,0)
(684,441,0)
(1522,215,0)
(1426,1726,0)
(798,1656,0)
(820,617,0)
(95,214,0)
(1650,873,0)
(1366,1622,0)
(827,558,0)
(14,1328,0)
(191,733,0)
(1414,1677,0)
(273,1100,0)
(111,708,0)
(1059,1152,0)
(322,99,0)
(1309,1393,0)
(1140,805,0)
(1528,320,0)
(1647,154,0)
(1627,391,0)
(36,1763,0)
(32,81,0)
(583,675,0)
(750,1285,0)
(419,1626,0)
(293,1799,0)
(1175,1669,0)
(127,1636,0)
(990,1610,0)
(1205,579,0)
(1181,1596,0)
(293,719,0)
(1483,563,0)
(1634,136,0)
(19,931,0)
(1110,106,0)
(1230,912,0)
(1536,873,0)
(81,873,0)
(754,1170,0)
(656,933,0)
(1326,582,0)
(1452,1677,0)
(252,999,0)
(603,1792,0)
(478,976,0)
(1310,953,0)
(1133,1677,0)
(1695,1140,0)
(1261,536,0)
(264,786,0)
(471,873,0)
(1671,1033,0)
(1050,1677,0)
(1166,873,0)
(156,307,0)
(1013,873,0)
(705,1677,0)
(1087,104,0)
(763,1677,0)
(330,873,0)
(424,29,0)
(971,235,0)
(724,1679,0)
(1244,1072,0)
(1452,1810,0)
(306,1717,0)
(489,842,0)
(527,99,0)
(1281,244,0)
(1659,554,0)
(377,435,0)
(1742,1126,0)
(1509,1751,0)
(521,1677,0)
(310,1319,0)
(260,1587,0)
(1130,1550,0)
(974,214,0)
(901,1644,0)
(1393,1309,0)
(1726,1049,0)
(1176,976,0)
(297,723,0)
(1235,156,0)
(1420,805,0)
(65,958,0)
(815,1241,0)
(1558,675,0)
(1206,301,0)
(1760,1135,0)
(368,493,0)
(882,112,0)
(524,390,0)
(1810,480,0)
(1602,674,0)
(1241,568,0)
(721,134,0)
(478,399,0)
(1771,1414,0)
(842,483,0)
(156,1235,0)
(462,958,0)
(506,873,0)
(1079,873,0)
(1150,1193,0)
(939,1677,0)
(314,1799,0)
(74,1002,0)
(964,1560,0)
(260,479,0)
(1467,307,0)
(1781,307,0)
(1118,307,0)
(634,81,0)
(458,56,0)
(432,1432,0)
(85,1214,0)
(601,873,0)
(549,563,0)
(1503,271,0)
(1387,873,0)
(115,1436,0)
(1385,873,0)
(1676,137,0)
(757,736,0)
(334,1058,0)
(1104,1161,0)
(260,31,0)
(177,1055,0)
(1660,1086,0)
(41,1796,0)
(728,307,0)
(1430,1545,0)
(1459,271,0)
(714,1786,0)
(1656,873,0)
(430,389,0)
(1630,386,0)
(1619,686,0)
(1533,273,0)
(933,1130,0)
(650,551,0)
(35,1349,0)
(1262,1055,0)
(86,701,0)
(1776,1333,0)
(1263,884,0)
(1325,72,0)
(994,860,0)
(599,1799,0)
(1425,1396,0)
(916,913,0)
(1435,1523,0)
(931,19,0)
(199,123,0)
(1622,259,0)
(300,873,0)
(129,727,0)
(35,1743,0)
(1291,1690,0)
(1660,146,0)
(1786,715,0)
(1180,951,0)
(260,760,0)
(1761,1318,0)
(152,1105,0)
(1109,873,0)
(1186,796,0)
(153,15,0)
(1101,1496,0)
(423,873,0)
(1094,1213,0)
(1305,57,0)
(1197,1062,0)
(1535,949,0)
(332,1735,0)
(596,873,0)
(651,80,0)
(1144,873,0)
(68,873,0)
(1692,701,0)
(1463,1221,0)
(848,938,0)
(872,588,0)
(50,1712,0)
(1812,307,0)
(658,1197,0)
(1229,873,0)
(911,845,0)
(1276,855,0)
(212,1593,0)
(1769,101,0)
(1735,332,0)
(906,1677,0)
(1633,1812,0)
(1158,913,0)
(409,1585,0)
(791,723,0)
(774,258,0)
(1038,153,0)
(1153,873,0)
(842,1677,0)
(1395,511,0)
(130,1677,0)
(388,1677,0)
(1316,541,0)
(184,1677,0)
(841,830,0)
(1118,760,0)
(1422,301,0)
(1500,873,0)
(899,1497,0)
(891,1610,0)
(1398,680,0)
(1275,1108,0)
(220,1367,0)
(89,883,0)
(309,611,0)
(1743,1199,0)
(1020,187,0)
(1314,1677,0)
(97,938,0)
(774,931,0)
(63,643,0)
(350,825,0)
(793,514,0)
(1019,1677,0)
(1273,1563,0)
(733,191,0)
(246,1597,0)
(206,873,0)
(533,1792,0)
(465,1407,0)
(955,873,0)
(1681,1627,0)
(1489,1550,0)
(1768,667,0)
(1591,1314,0)
(1771,689,0)
(354,819,0)
(1105,307,0)
(1794,545,0)
(1016,276,0)
(1281,528,0)
(1439,912,0)
(776,672,0)
(67,582,0)
(485,291,0)
(1669,372,0)
(1417,873,0)
(735,534,0)
(1594,563,0)
(270,1597,0)
(642,873,0)
(186,531,0)
(1182,1786,0)
(797,1107,0)
(1555,583,0)
(203,335,0)
(1098,873,0)
(1660,688,0)
(133,1677,0)
(1082,873,0)
(1035,1677,0)
(28,1207,0)
(1363,1677,0)
(369,382,0)
(805,1140,0)
(1155,317,0)
(1597,1456,0)
(1348,1636,0)
(1732,1526,0)
(1097,547,0)
(1025,1356,0)
(1698,586,0)
(1037,1243,0)
(1221,1463,0)
(1070,788,0)
(1290,191,0)
(1652,56,0)
(1496,1101,0)
(1761,1792,0)
(1771,536,0)
(624,309,0)
(849,1677,0)
(218,1056,0)
(1339,1792,0)
(192,1168,0)
(1807,882,0)
(1613,1643,0)
(738,1469,0)
(259,1622,0)
(996,1442,0)
(292,1071,0)
(1364,873,0)
(1641,195,0)
(1463,101,0)
(1543,873,0)
(319,42,0)
(773,747,0)
(900,184,0)
(991,1371,0)
(144,1443,0)
(1544,190,0)
(345,873,0)
(1719,1779,0)
(59,873,0)
(64,1812,0)
(1535,873,0)
(267,1172,0)
(1081,1283,0)
(744,1283,0)
(1610,1677,0)
(103,1050,0)
(1270,382,0)
(372,1669,0)
(608,1432,0)
(1737,873,0)
(395,1645,0)
(876,382,0)
(541,307,0)
(1592,1792,0)
(195,403,0)
(854,93,0)
(478,119,0)
(1191,1544,0)
(1161,873,0)
(456,307,0)
(574,1677,0)
(1237,1666,0)
(786,264,0)
(117,873,0)
(1076,642,0)
(573,803,0)
(812,951,0)
(1427,1677,0)
(405,1171,0)
(1521,1350,0)
(1754,1216,0)
(1660,1455,0)
(1152,578,0)
(1246,1407,0)
(762,873,0)
(1771,1499,0)
(1726,81,0)
(628,1100,0)
(846,377,0)
(231,1430,0)
(1590,628,0)
(521,1029,0)
(1111,873,0)
(513,307,0)
(643,873,0)
(399,1580,0)
(280,873,0)
(119,117,0)
(354,1661,0)
(1547,1469,0)
(1581,1551,0)
(916,976,0)
(1115,1432,0)
(932,1246,0)
(1377,345,0)
(1130,1350,0)
(508,441,0)
(1485,503,0)
(1147,574,0)
(585,873,0)
(1657,726,0)
(981,1432,0)
(1696,1667,0)
(931,838,0)
(1382,1529,0)
(494,1348,0)
(1068,1333,0)
(1066,715,0)
(1050,307,0)
(783,450,0)
(1450,937,0)
(154,873,0)
(703,1375,0)
(1259,1317,0)
(737,1677,0)
(1735,1677,0)
(126,387,0)
(1072,926,0)
(759,1456,0)
(1664,1523,0)
(748,185,0)
(260,367,0)
(1075,1216,0)
(546,1059,0)
(939,102,0)
(975,1792,0)
(1771,760,0)
(710,1138,0)
(232,1114,0)
(1630,1677,0)
(1610,990,0)
(956,508,0)
(819,354,0)
(1015,1670,0)
(1809,873,0)
(1016,307,0)
(782,873,0)
(1772,1225,0)
(153,1038,0)
(1792,366,0)
(893,357,0)
(381,1792,0)
(1407,465,0)
(445,307,0)
(259,1677,0)
(1280,1242,0)
(154,1647,0)
(1752,97,0)
(755,873,0)
(503,1485,0)
(465,307,0)
(615,1029,0)
(1712,1356,0)
(989,340,0)
(1059,1677,0)
(1096,913,0)
(567,1677,0)
(752,427,0)
(1770,1636,0)
(926,1677,0)
(700,119,0)
(892,873,0)
(1571,1677,0)
(340,989,0)
(1055,1677,0)
(456,1677,0)
(1794,1350,0)
(1683,1309,0)
(771,873,0)
(1477,832,0)
(692,1356,0)
(413,1000,0)
(516,873,0)
(1286,849,0)
(487,1197,0)
(52,873,0)
(967,1809,0)
(886,1661,0)
(941,834,0)
(652,598,0)
(1561,873,0)
(779,226,0)
(614,873,0)
(500,1053,0)
(1734,307,0)
(1198,602,0)
(31,104,0)
(1503,494,0)
(1655,1133,0)
(1734,190,0)
(1195,1513,0)
(598,364,0)
(1250,1728,0)
(1763,391,0)
(542,386,0)
(1203,873,0)
(751,1130,0)
(317,307,0)
(390,1677,0)
(1340,873,0)
(760,1118,0)
(215,873,0)
(888,873,0)
(1009,71,0)
(1161,1171,0)
(1744,993,0)
(211,130,0)
(1193,522,0)
(1527,158,0)
(357,53,0)
(220,214,0)
(1119,1753,0)
(1815,873,0)
(435,377,0)
(1674,34,0)
(260,1501,0)
(720,1582,0)
(1482,639,0)
(898,1214,0)
(890,583,0)
(1526,1732,0)
(158,76,0)
(258,774,0)
(325,923,0)
(373,488,0)
(804,1718,0)
(1211,1513,0)
(260,985,0)
(964,1677,0)
(698,1073,0)
(19,577,0)
(940,511,0)
(999,849,0)
(603,428,0)
(307,873,0)
(1670,1015,0)
(802,1174,0)
(46,873,0)
(831,843,0)
(339,1767,0)
(966,219,0)
(646,270,0)
(22,512,0)
(25,539,0)
(701,307,0)
(1390,1376,0)
(1741,1627,0)
(304,1604,0)
(967,1214,0)
(1133,873,0)
(571,1231,0)
(570,873,0)
(501,1474,0)
(1168,1677,0)
(503,727,0)
(980,892,0)
(1110,1677,0)
(1474,375,0)
(123,199,0)
(998,728,0)
(589,1440,0)
(730,1166,0)
(916,986,0)
(625,1521,0)
(260,976,0)
(1258,1595,0)
(1660,976,0)
(916,1167,0)
(138,923,0)
(1058,1677,0)
(33,760,0)
(696,1228,0)
(1283,1391,0)
(734,965,0)
(1481,31,0)
(394,381,0)
(1678,1620,0)
(107,849,0)
(207,1736,0)
(1200,1290,0)
(1093,1009,0)
(1814,1491,0)
(1270,800,0)
(647,587,0)
(1725,1167,0)
(1154,551,0)
(509,307,0)
(1660,1804,0)
(271,1503,0)
(1333,1677,0)
(58,1109,0)
(663,873,0)
(529,899,0)
(1370,873,0)
(931,774,0)
(307,220,0)
(852,1398,0)
(960,281,0)
(536,32,0)
(1349,307,0)
(1049,1726,0)
(493,1581,0)
(1532,1430,0)
(317,1155,0)
(114,32,0)
(664,72,0)
(635,815,0)
(1344,873,0)
(833,1118,0)
(1173,1250,0)
(1170,307,0)
(1605,648,0)
(42,120,0)
(85,767,0)
(414,1425,0)
(20,85,0)
(1660,1723,0)
(278,1626,0)
(875,1625,0)
(1709,1751,0)
(1026,335,0)
(8,1036,0)
(466,1122,0)
(579,1205,0)
(1249,510,0)
(150,680,0)
(110,873,0)
(814,1107,0)
(461,877,0)
(428,1264,0)
(1032,946,0)
(1471,87,0)
(766,573,0)
(1514,1812,0)
(255,232,0)
(786,989,0)
(1159,873,0)
(885,726,0)
(1772,1359,0)
(808,471,0)
(835,547,0)
(1130,1682,0)
(704,160,0)
(438,933,0)
(294,851,0)
(1258,753,0)
(216,228,0)
(801,1207,0)
(823,637,0)
(258,1677,0)
(1121,587,0)
(415,873,0)
(1102,626,0)
(260,1666,0)
(884,873,0)
(1505,1563,0)
(426,1688,0)
(1456,759,0)
(1682,851,0)
(1663,503,0)
(728,1677,0)
(1816,1376,0)
(1163,1427,0)
(1673,873,0)
(1577,80,0)
(356,1263,0)
(1105,152,0)
(1690,1000,0)
(1675,1168,0)
(1330,1108,0)
(778,1606,0)
(1757,1428,0)
(244,1281,0)
(335,379,0)
(1029,873,0)
(855,1677,0)
(1108,1330,0)
(1149,674,0)
(478,1666,0)
(916,536,0)
(1225,377,0)
(187,1020,0)
(916,1455,0)
(922,1431,0)
(1502,379,0)
(7,698,0)
(535,926,0)
(1701,712,0)
(768,1677,0)
(1338,873,0)
(321,1080,0)
(762,1443,0)
(711,906,0)
(387,126,0)
(1064,1410,0)
(760,748,0)
(1176,307,0)
(794,1447,0)
(878,873,0)
(1504,117,0)
(1213,1218,0)
(874,1677,0)
(223,1792,0)
(1775,873,0)
(730,639,0)
(1285,750,0)
(1019,804,0)
(1331,946,0)
(967,1677,0)
(1638,803,0)
(56,1020,0)
(375,1474,0)
(1660,845,0)
(1723,1333,0)
(999,186,0)
(1143,293,0)
(720,307,0)
(10,923,0)
(1767,339,0)
(344,1305,0)
(1083,808,0)
(1799,768,0)
(428,96,0)
(213,998,0)
(917,964,0)
(1803,1396,0)
(1078,873,0)
(275,873,0)
(713,260,0)
(1626,1214,0)
(176,314,0)
(1800,1677,0)
(101,1463,0)
(1467,809,0)
(1781,1048,0)
(1553,164,0)
(843,831,0)
(1791,534,0)
(1187,1105,0)
(767,873,0)
(42,1677,0)
(1035,65,0)
(324,309,0)
(982,726,0)
(504,674,0)
(345,1048,0)
(1706,873,0)
(436,1723,0)
(796,307,0)
(1262,1030,0)
(1092,1679,0)
(1598,1330,0)
(701,86,0)
(1530,1766,0)
(1298,1677,0)
(1714,1364,0)
(143,61,0)
(1045,430,0)
(455,911,0)
(1764,624,0)
(136,1204,0)
(483,842,0)
(284,6,0)
(1053,1677,0)
(311,873,0)
(938,97,0)
(1660,367,0)
(604,1781,0)
(1251,1121,0)
(1590,873,0)
(1618,798,0)
(66,512,0)
(943,475,0)
(70,1715,0)
(1496,1677,0)
(538,873,0)
(1643,1677,0)
(323,873,0)
(12,225,0)
(499,298,0)
(1747,1138,0)
(1013,944,0)
(1263,1338,0)
(898,1677,0)
(201,156,0)
(333,62,0)
(832,69,0)
(1432,1677,0)
(518,1496,0)
(291,873,0)
(541,1698,0)
(1034,533,0)
(1265,1428,0)
(477,964,0)
(683,1569,0)
(911,1677,0)
(76,873,0)
(96,1677,0)
(180,1298,0)
(1246,873,0)
(159,1431,0)
(1350,1432,0)
(478,1314,0)
(1148,398,0)
(978,1290,0)
(1151,307,0)
(237,365,0)
(804,1019,0)
(522,1193,0)
(776,1383,0)
(93,813,0)
(1583,1770,0)
(1525,228,0)
(566,1427,0)
(467,1595,0)
(531,186,0)
(1787,896,0)
(1170,1677,0)
(950,309,0)
(883,123,0)
(1494,872,0)
(312,929,0)
(1091,696,0)
(1355,792,0)
(1585,307,0)
(902,551,0)
(1130,476,0)
(590,627,0)
(134,873,0)
(1570,687,0)
(1660,1501,0)
(444,1659,0)
(826,1108,0)
(517,1090,0)
(1109,199,0)
(916,1501,0)
(869,247,0)
(260,536,0)
(727,381,0)
(633,1733,0)
(288,493,0)
(1808,712,0)
(86,1763,0)
(1771,1501,0)
(1504,1677,0)
(577,164,0)
(380,307,0)
(217,830,0)
(380,146,0)
(803,873,0)
(1324,989,0)
(1632,225,0)
(1433,1579,0)
(1129,796,0)
(840,817,0)
(679,1218,0)
(1030,873,0)
(513,411,0)
(1240,1610,0)
(1141,1235,0)
(1560,964,0)
(513,1677,0)
(531,1345,0)
(1123,1501,0)
(1670,1677,0)
(1475,332,0)
(51,93,0)
(411,513,0)
(701,1677,0)
(928,1172,0)
(1367,220,0)
(327,92,0)
(285,1775,0)
(377,94,0)
(717,737,0)
(1090,1677,0)
(1682,1130,0)
(479,1743,0)
(168,447,0)
(1172,1350,0)
(618,898,0)
(1072,1446,0)
(433,959,0)
(1381,1677,0)
(559,689,0)
(1171,61,0)
(947,763,0)
(1069,1245,0)
(146,1478,0)
(781,1560,0)
(591,873,0)
(403,873,0)
(594,416,0)
(1466,688,0)
(1333,1723,0)
(515,70,0)
(659,1759,0)
(454,1193,0)
(599,1590,0)
(856,380,0)
(395,1712,0)
(933,1214,0)
(434,365,0)
(775,367,0)
(1291,992,0)
(821,762,0)
(1354,1364,0)
(544,1688,0)
(179,698,0)
(951,310,0)
(986,1383,0)
(483,873,0)
(1469,1601,0)
(244,372,0)
(1319,310,0)
(582,1245,0)
(1250,1677,0)
(1519,302,0)
(1033,1076,0)
(959,433,0)
(1563,747,0)
(317,1677,0)
(548,716,0)
(523,1376,0)
(871,388,0)
(1301,873,0)
(727,873,0)
(1372,704,0)
(184,307,0)
(1484,1035,0)
(1585,1677,0)
(927,112,0)
(1653,228,0)
(1648,873,0)
(1626,1677,0)
(934,1130,0)
(1487,1592,0)
(580,752,0)
(753,873,0)
(6,479,0)
(1718,804,0)
(913,1338,0)
(859,1633,0)
(70,1677,0)
(1345,1421,0)
(1379,1392,0)
(899,529,0)
(1778,737,0)
(446,845,0)
(387,1170,0)
(1702,1425,0)
(299,1644,0)
(1783,99,0)
(1253,266,0)
(468,491,0)
(1394,873,0)
(1485,1114,0)
(631,136,0)
(1626,278,0)
(912,34,0)
(1299,873,0)
(1587,556,0)
(889,270,0)
(248,1467,0)
(130,307,0)
(1660,1587,0)
(476,1677,0)
(269,1586,0)
(1431,1677,0)
(1812,1677,0)
(556,1587,0)
(657,817,0)
(1660,913,0)
(847,1503,0)
(946,1677,0)
(2,797,0)
(459,1420,0)
(954,873,0)
(392,715,0)
(1507,1019,0)
(522,1364,0)
(406,1019,0)
(1445,749,0)
(554,1214,0)
(217,1526,0)
(309,1324,0)
(1160,1677,0)
(817,469,0)
(933,1677,0)
(164,577,0)
(1806,81,0)
(683,1677,0)
(837,1509,0)
(287,537,0)
(1292,511,0)
(1748,1509,0)
(742,324,0)
(1644,307,0)
(1575,242,0)
(1352,169,0)
(964,307,0)
(1521,1799,0)
(599,1350,0)
(983,1551,0)
(376,1118,0)
(1724,133,0)
(1432,1115,0)
(1647,512,0)
(1639,1314,0)
(944,1504,0)
(948,759,0)
(1799,1540,0)
(391,1763,0)
(516,1062,0)
(784,680,0)
(279,708,0)
(514,793,0)
(606,304,0)
(331,85,0)
(1660,1314,0)
(190,1734,0)
(105,235,0)
(198,728,0)
(1763,36,0)
(1758,1151,0)
(937,873,0)
(691,1515,0)
(944,1013,0)
(260,1314,0)
(1436,1690,0)
(739,1734,0)
(30,1393,0)
(984,124,0)
(293,1350,0)
(36,1492,0)
(416,972,0)
(478,1414,0)
(1454,987,0)
(1771,976,0)
(1710,606,0)
(1723,1319,0)
(675,873,0)
(1406,241,0)
(722,1677,0)
(1332,106,0)
(1658,873,0)
(478,1804,0)
(1544,873,0)
(266,797,0)
(1625,1277,0)
(759,117,0)
(31,1677,0)
(478,31,0)
(282,258,0)
(790,873,0)
(1649,366,0)
(1771,31,0)
(224,1038,0)
(1569,683,0)
(798,1733,0)
(227,1476,0)
(1565,911,0)
(1414,254,0)
(308,873,0)
(478,536,0)
(765,1690,0)
(1590,599,0)
(1345,531,0)
(1585,1017,0)
(636,46,0)
(1125,873,0)
(478,760,0)
(1537,1130,0)
(1168,192,0)
(839,1050,0)
(1252,1630,0)
(797,2,0)
(370,242,0)
(794,873,0)
(1241,815,0)
(433,727,0)
(1689,1753,0)
(740,1350,0)
(1462,298,0)
(1630,307,0)
(1065,648,0)
(456,508,0)
(302,946,0)
(427,1792,0)
(1580,1073,0)
(1176,1677,0)
(1627,307,0)
(1074,1724,0)
(1050,103,0)
(186,999,0)
(1645,1677,0)
(1384,1190,0)
(894,1548,0)
(1636,1690,0)
(749,752,0)
(1349,1677,0)
(1728,206,0)
(1566,653,0)
(363,72,0)
(69,873,0)
(302,1519,0)
(382,1270,0)
(1356,1712,0)
(471,808,0)
(561,939,0)
(380,1677,0)
(1117,1677,0)
(992,1291,0)
(61,1171,0)
(1707,1659,0)
(96,1338,0)
(554,1677,0)
(520,1205,0)
(1376,359,0)
(94,377,0)
(1470,1678,0)
(678,967,0)
(1600,1204,0)
(1201,1446,0)
(1771,367,0)
(328,603,0)
(1421,1345,0)
(1022,93,0)
(1751,663,0)
(228,1653,0)
(1517,36,0)
(1365,1585,0)
(100,1582,0)
(898,1324,0)
(1526,217,0)
(147,1420,0)
(1449,1338,0)
(1781,1677,0)
(632,873,0)
(1561,1718,0)
(1753,1574,0)
(475,307,0)
(377,1225,0)
(62,1213,0)
(223,873,0)
(1185,521,0)
(9,1804,0)
(493,368,0)
(1067,354,0)
(410,986,0)
(1444,509,0)
(637,84,0)
(1267,1245,0)
(829,808,0)
(1274,1231,0)
(1660,1751,0)
(1739,1176,0)
(1568,1677,0)
(1668,537,0)
(768,1799,0)
(545,1794,0)
(449,778,0)
(262,1095,0)
(1688,1057,0)
(1468,975,0)
(851,1682,0)
(1410,634,0)
(1279,160,0)
(418,112,0)
(206,1728,0)
(1063,69,0)
(514,986,0)
(1809,967,0)
(913,1677,0)
(792,1677,0)
(1643,1716,0)
(120,1380,0)
(1486,254,0)
(712,202,0)
(69,1677,0)
(849,999,0)
(638,698,0)
(1546,639,0)
(367,591,0)
(1429,268,0)
(614,1631,0)
(740,1400,0)
(865,712,0)
(904,855,0)
(1499,1677,0)
(1003,281,0)
(162,111,0)
(1766,305,0)
(253,1414,0)
(1559,873,0)
(1371,873,0)
(1288,797,0)
(1497,873,0)
(554,1659,0)
(1055,1262,0)
(583,1677,0)
(101,182,0)
(44,1525,0)
(726,1700,0)
(884,1263,0)
(431,1734,0)
(573,925,0)
(98,990,0)
(1404,1121,0)
(235,971,0)
(1297,588,0)
(916,367,0)
(1343,1670,0)
(803,677,0)
(1218,1213,0)
(478,1455,0)
(578,873,0)
(77,1631,0)
(1215,86,0)
(1628,152,0)
(1407,1246,0)
(1582,617,0)
(1060,172,0)
(37,1669,0)
(161,232,0)
(759,1677,0)
(883,1677,0)
(1548,1199,0)
(1213,1094,0)
(1515,81,0)
(986,514,0)
(1324,898,0)
(660,1676,0)
(42,307,0)
(6,1677,0)
(540,882,0)
(1289,817,0)
(674,307,0)
(987,1759,0)
(1128,1205,0)
(88,873,0)
(301,1206,0)
(1465,1447,0)
(1130,1799,0)
(648,1077,0)
(1501,1677,0)
(260,986,0)
(320,59,0)
(233,1053,0)
(170,1578,0)
(11,1651,0)
(1214,873,0)
(1130,933,0)
(845,1559,0)
(695,8,0)
(1777,305,0)
(916,1499,0)
(326,873,0)
(23,1499,0)
(1811,528,0)
(1011,375,0)
(1629,380,0)
(715,1066,0)
(222,433,0)
(745,1345,0)
(1736,873,0)
(707,206,0)
(1627,1677,0)
(1129,577,0)
(1103,387,0)
(1308,1094,0)
(103,937,0)
(1341,41,0)
(1612,2,0)
(271,1459,0)
(209,1767,0)
(1271,133,0)
(1250,307,0)
(164,130,0)
(767,85,0)
(1716,1643,0)
(796,1129,0)
(1203,588,0)
(1441,1733,0)
(420,1013,0)
(389,430,0)
(1806,1774,0)
(649,873,0)
(1509,1677,0)
(1007,439,0)
(445,1677,0)
(836,1792,0)
(301,192,0)
(57,858,0)
(1322,1092,0)
(543,1630,0)
(1263,1677,0)
(830,217,0)
(295,872,0)
(1048,1781,0)
(713,1796,0)
(1499,969,0)
(769,1768,0)
(1315,1115,0)
(975,750,0)
(1661,1571,0)
(1095,386,0)
(239,1478,0)
(398,843,0)
(1374,1002,0)
(511,1395,0)
(1640,1339,0)
(1139,190,0)
(332,1677,0)
(260,119,0)
(919,1371,0)
(1660,873,0)
(989,1324,0)
(574,305,0)
(1659,1677,0)
(32,873,0)
(324,1192,0)
(822,1392,0)
(539,1792,0)
(1222,873,0)
(688,478,0)
(1721,873,0)
(193,1642,0)
(464,264,0)
(655,1017,0)
(361,949,0)
(1170,387,0)
(715,1786,0)
(1041,1350,0)
(1724,245,0)
(1268,111,0)
(45,768,0)
(219,1677,0)
(929,626,0)
(916,1414,0)
(355,1225,0)
(1478,879,0)
(367,1677,0)
(1039,598,0)
(1735,1214,0)
(1375,623,0)
(78,1349,0)
(1115,1677,0)
(119,1677,0)
(1587,1614,0)
(897,776,0)
(687,1785,0)
(1290,873,0)
(1149,627,0)
(171,873,0)
(314,719,0)
(118,1430,0)
(276,1016,0)
(260,763,0)
(465,1677,0)
(921,1745,0)
(1346,701,0)
(427,752,0)
(976,1176,0)
(725,124,0)
(1052,600,0)
(1562,1541,0)
(378,1294,0)
(1465,993,0)
(332,873,0)
(1157,1016,0)
(844,1083,0)
(260,913,0)
(1459,1155,0)
(1506,1443,0)
(667,1141,0)
(1012,669,0)
(1403,135,0)
(1137,96,0)
(511,81,0)
(1660,119,0)
(1529,1302,0)
(1609,348,0)
(677,803,0)
(81,634,0)
(1771,1606,0)
(1392,1294,0)
(916,1804,0)
(390,1086,0)
(272,1176,0)
(1581,873,0)
(342,1373,0)
(1750,556,0)
(1219,332,0)
(1676,1677,0)
(1017,1585,0)
(478,1501,0)
(1197,1677,0)
(371,465,0)
(870,1306,0)
(510,736,0)
(149,1421,0)
(1443,762,0)
(18,1174,0)
(1660,1666,0)
(1357,1548,0)
(358,94,0)
(385,1337,0)
(226,1054,0)
(702,1071,0)
(563,1438,0)
(382,1677,0)
(557,825,0)
(949,1535,0)
(1508,184,0)
(1549,31,0)
(1056,1512,0)
(57,1305,0)
(1660,986,0)
(134,75,0)
(1340,1165,0)
(491,468,0)
(1105,1677,0)
(533,873,0)
(476,1130,0)
(411,1436,0)
(19,1633,0)
(1231,1350,0)
(764,1498,0)
(1224,514,0)
(1788,191,0)
(1740,1228,0)
(644,187,0)
(737,1303,0)
(27,1743,0)
(1637,873,0)
(47,223,0)
(1177,873,0)
(1762,1728,0)
(391,1627,0)
(1667,873,0)
(1568,873,0)
(1207,649,0)
(1202,1680,0)
(61,1677,0)
(666,1060,0)
(243,35,0)
(133,1724,0)
(404,1291,0)
(676,388,0)
(639,1677,1)
(1761,349,1)
(1146,225,1)
(456,1677,1)
(133,1271,1)
(283,449,1)
(1716,1643,1)
(674,1602,1)
(770,1496,1)
(1642,491,1)
(1117,307,1)
(1295,1646,1)
(989,340,1)
(678,453,1)
(1514,774,1)
(159,1431,1)
(273,1677,1)
(177,1552,1)
(304,606,1)
(798,1618,1)
(1053,1677,1)
(1453,1557,1)
(439,1007,1)
(1029,521,1)
(1505,1273,1)
(950,1745,1)
(1528,332,1)
(60,439,1)
(1717,451,1)
(674,307,1)
(1100,362,1)
(260,1666,1)
(1684,1230,1)
(964,917,1)
(1083,844,1)
(1515,691,1)
(1085,609,1)
(35,1743,1)
(1051,35,1)
(1,257,1)
(1374,1213,1)
(1446,1072,1)
(1273,1206,1)
(20,331,1)
(512,66,1)
(1499,23,1)
(231,118,1)
(463,882,1)
(1380,120,1)
(1524,219,1)
(505,32,1)
(1578,1677,1)
(1733,1677,1)
(786,264,1)
(1732,1169,1)
(1119,1592,1)
(610,575,1)
(583,1677,1)
(1303,737,1)
(1631,77,1)
(797,266,1)
(1045,937,1)
(1085,1806,1)
(1250,307,1)
(1551,983,1)
(1193,454,1)
(1469,1547,1)
(1736,616,1)
(175,1803,1)
(940,511,1)
(198,307,1)
(1467,1677,1)
(260,976,1)
(869,1005,1)
(478,536,1)
(1756,1272,1)
(960,281,1)
(1124,1099,1)
(432,608,1)
(458,1652,1)
(900,1358,1)
(1253,1027,1)
(14,773,1)
(985,1677,1)
(842,1677,1)
(1771,689,1)
(45,401,1)
(931,774,1)
(840,657,1)
(759,117,1)
(493,1581,1)
(215,1522,1)
(1276,904,1)
(7,638,1)
(387,1103,1)
(190,1139,1)
(426,544,1)
(137,1676,1)
(945,1697,1)
(893,383,1)
(56,458,1)
(133,307,1)
(691,960,1)
(75,1792,1)
(473,1277,1)
(175,1259,1)
(1112,1392,1)
(261,1371,1)
(1582,720,1)
(1459,271,1)
(1547,1401,1)
(92,81,1)
(1212,1257,1)
(1415,1435,1)
(1402,1462,1)
(315,1070,1)
(849,1286,1)
(1101,770,1)
(751,1537,1)
(281,1190,1)
(1248,81,1)
(1242,134,1)
(1039,1489,1)
(278,1626,1)
(1196,1097,1)
(1585,1365,1)
(1626,419,1)
(726,1657,1)
(54,391,1)
(276,1016,1)
(101,1463,1)
(758,441,1)
(371,932,1)
(107,155,1)
(833,1440,1)
(245,1724,1)
(1471,1529,1)
(1020,56,1)
(724,1322,1)
(1575,370,1)
(606,864,1)
(1193,1677,1)
(1783,527,1)
(310,951,1)
(998,728,1)
(874,1677,1)
(321,782,1)
(475,592,1)
(1795,970,1)
(1785,1570,1)
(656,1360,1)
(6,1677,1)
(1097,1763,1)
(761,1008,1)
(908,674,1)
(1667,1696,1)
(1704,601,1)
(1308,62,1)
(730,639,1)
(721,529,1)
(753,1258,1)
(417,1782,1)
(1250,1677,1)
(1151,1758,1)
(975,1468,1)
(644,187,1)
(298,499,1)
(1095,386,1)
(815,1677,1)
(887,465,1)
(1623,648,1)
(1527,792,1)
(160,1279,1)
(1350,1432,1)
(1347,594,1)
(1258,1595,1)
(1395,1677,1)
(1096,1158,1)
(1609,610,1)
(373,1350,1)
(518,1704,1)
(488,373,1)
(936,1207,1)
(429,1404,1)
(525,91,1)
(1170,307,1)
(1153,1160,1)
(263,287,1)
(1630,543,1)
(254,1486,1)
(1697,338,1)
(741,1587,1)
(189,1145,1)
(1328,14,1)
(814,725,1)
(398,843,1)
(572,320,1)
(1360,314,1)
(599,1350,1)
(495,1759,1)
(61,1677,1)
(590,1719,1)
(436,1333,1)
(1395,1132,1)
(149,398,1)
(574,1677,1)
(218,38,1)
(1542,371,1)
(493,288,1)
(516,1434,1)
(597,1026,1)
(573,803,1)
(1288,725,1)
(1660,1665,1)
(130,211,1)
(260,985,1)
(1660,1804,1)
(868,779,1)
(1009,71,1)
(521,1185,1)
(1404,1251,1)
(548,622,1)
(1356,692,1)
(969,569,1)
(166,1461,1)
(771,1574,1)
(545,1794,1)
(1641,532,1)
(1584,1176,1)
(577,1129,1)
(1696,474,1)
(1771,1414,1)
(555,1716,1)
(675,1558,1)
(1171,61,1)
(513,307,1)
(122,247,1)
(1621,796,1)
(609,767,1)
(148,1339,1)
(377,1792,1)
(978,1200,1)
(290,748,1)
(796,1677,1)
(513,525,1)
(527,322,1)
(589,1419,1)
(999,252,1)
(1782,925,1)
(1593,212,1)
(1811,137,1)
(1675,685,1)
(971,1135,1)
(117,1793,1)
(206,1728,1)
(1207,801,1)
(1240,1037,1)
(339,1767,1)
(1050,1677,1)
(382,876,1)
(935,1143,1)
(47,1568,1)
(914,1502,1)
(916,760,1)
(71,352,1)
(70,1677,1)
(560,845,1)
(1657,885,1)
(1013,944,1)
(438,656,1)
(762,1443,1)
(1059,421,1)
(77,169,1)
(740,1146,1)
(1034,1480,1)
(1264,428,1)
(902,1154,1)
(381,1792,1)
(720,1677,1)
(1034,440,1)
(990,1610,1)
(1218,679,1)
(400,698,1)
(1677,1248,1)
(1754,1075,1)
(1231,1799,1)
(1760,105,1)
(1659,1677,1)
(1447,1465,1)
(1034,1596,1)
(291,1238,1)
(1386,995,1)
(529,899,1)
(728,1677,1)
(121,1633,1)
(1769,1489,1)
(637,1795,1)
(1018,1313,1)
(680,784,1)
(821,1443,1)
(260,399,1)
(980,1028,1)
(1321,207,1)
(96,1677,1)
(162,1268,1)
(1660,1501,1)
(457,1524,1)
(1421,1345,1)
(950,1107,1)
(588,872,1)
(369,877,1)
(1263,1677,1)
(1118,307,1)
(1454,659,1)
(207,471,1)
(854,1022,1)
(1129,1621,1)
(430,389,1)
(215,1677,1)
(722,1677,1)
(1702,208,1)
(1739,298,1)
(1107,797,1)
(58,1559,1)
(9,1161,1)
(791,297,1)
(768,1334,1)
(1733,307,1)
(1314,1591,1)
(522,1193,1)
(256,1352,1)
(444,554,1)
(85,20,1)
(1470,1151,1)
(239,146,1)
(1249,1320,1)
(876,369,1)
(1539,1024,1)
(1691,1014,1)
(1747,1797,1)
(974,806,1)
(237,1209,1)
(260,367,1)
(981,1115,1)
(288,1581,1)
(689,1495,1)
(975,1792,1)
(1021,548,1)
(102,939,1)
(260,1414,1)
(959,433,1)
(846,355,1)
(1269,563,1)
(1406,388,1)
(260,1587,1)
(895,1649,1)
(158,792,1)
(703,1226,1)
(341,176,1)
(1280,134,1)
(241,1406,1)
(1698,586,1)
(90,126,1)
(993,1677,1)
(1383,776,1)
(1014,1290,1)
(1322,329,1)
(1476,1002,1)
(1468,1813,1)
(1121,429,1)
(368,493,1)
(1809,967,1)
(179,1580,1)
(1324,898,1)
(119,1677,1)
(1793,119,1)
(556,968,1)
(603,1792,1)
(1490,1642,1)
(976,1176,1)
(1585,307,1)
(1780,513,1)
(1750,375,1)
(1687,1021,1)
(1758,166,1)
(1472,1744,1)
(939,1677,1)
(1213,1094,1)
(1345,745,1)
(759,1677,1)
(31,1677,1)
(496,1567,1)
(659,687,1)
(1604,304,1)
(713,260,1)
(1376,1816,1)
(682,778,1)
(216,1525,1)
(988,576,1)
(1080,1677,1)
(1763,36,1)
(314,1350,1)
(729,548,1)
(97,1677,1)
(1334,1578,1)
(362,273,1)
(467,1106,1)
(1297,872,1)
(1763,391,1)
(152,1628,1)
(1139,1734,1)
(517,838,1)
(418,915,1)
(161,255,1)
(757,510,1)
(307,220,1)
(964,1677,1)
(366,895,1)
(102,1327,1)
(49,1415,1)
(1072,926,1)
(665,702,1)
(1582,100,1)
(1800,1300,1)
(1660,1751,1)
(1148,641,1)
(1218,1053,1)
(1576,1769,1)
(1534,1359,1)
(1032,1331,1)
(794,1447,1)
(387,1170,1)
(1124,223,1)
(731,1577,1)
(1390,523,1)
(1325,363,1)
(1052,1066,1)
(1197,1677,1)
(916,1414,1)
(1749,1017,1)
(1053,233,1)
(1109,199,1)
(1282,924,1)
(129,903,1)
(1379,374,1)
(1150,800,1)
(748,277,1)
(400,805,1)
(713,1771,1)
(603,328,1)
(631,1056,1)
(180,1386,1)
(862,1187,1)
(456,481,1)
(816,529,1)
(1751,1709,1)
(1342,101,1)
(1502,335,1)
(1202,135,1)
(1224,117,1)
(299,901,1)
(1593,1644,1)
(923,325,1)
(144,600,1)
(462,65,1)
(419,918,1)
(1012,584,1)
(1093,71,1)
(1598,1330,1)
(792,181,1)
(1605,1065,1)
(520,1128,1)
(1124,647,1)
(1283,744,1)
(1595,467,1)
(1427,1214,1)
(1130,1799,1)
(1674,912,1)
(972,416,1)
(944,1504,1)
(845,446,1)
(454,1150,1)
(688,1476,1)
(1216,1754,1)
(1210,814,1)
(478,1501,1)
(1343,1351,1)
(578,1152,1)
(841,1169,1)
(1682,851,1)
(917,477,1)
(1134,1376,1)
(435,1457,1)
(37,1811,1)
(1414,1677,1)
(1716,694,1)
(738,251,1)
(583,1555,1)
(680,307,1)
(1473,1292,1)
(1645,1677,1)
(97,204,1)
(861,898,1)
(1641,607,1)
(365,1677,1)
(71,1677,1)
(612,1714,1)
(1106,104,1)
(1481,1549,1)
(228,1525,1)
(1051,938,1)
(1172,267,1)
(1282,1469,1)
(1375,1453,1)
(1794,1350,1)
(324,742,1)
(626,929,1)
(464,1009,1)
(411,513,1)
(1241,815,1)
(1314,1677,1)
(668,627,1)
(815,173,1)
(1541,620,1)
(820,889,1)
(1455,1677,1)
(402,1491,1)
(1059,1677,1)
(916,536,1)
(456,307,1)
(297,417,1)
(849,1677,1)
(140,535,1)
(246,1192,1)
(1324,989,1)
(1349,1677,1)
(1685,1513,1)
(584,484,1)
(347,721,1)
(335,597,1)
(768,1677,1)
(1680,1694,1)
(1649,836,1)
(1444,805,1)
(912,1439,1)
(344,452,1)
(1506,144,1)
(19,1633,1)
(113,1473,1)
(233,500,1)
(1033,1671,1)
(219,1677,1)
(705,307,1)
(1728,1250,1)
(772,1223,1)
(698,7,1)
(1291,1690,1)
(807,4,1)
(782,1677,1)
(1168,157,1)
(1522,151,1)
(129,533,1)
(737,1677,1)
(1200,1015,1)
(785,1488,1)
(247,869,1)
(1399,625,1)
(356,1206,1)
(126,387,1)
(325,10,1)
(684,870,1)
(916,1501,1)
(1565,59,1)
(1615,279,1)
(176,293,1)
(376,833,1)
(777,1295,1)
(1191,1556,1)
(872,1494,1)
(1174,802,1)
(258,307,1)
(499,1402,1)
(1117,605,1)
(916,986,1)
(1393,30,1)
(564,188,1)
(50,553,1)
(1416,855,1)
(1672,1344,1)
(295,732,1)
(689,1677,1)
(1338,1449,1)
(704,1677,1)
(1544,190,1)
(635,1561,1)
(478,1455,1)
(220,1367,1)
(927,296,1)
(728,307,1)
(1180,812,1)
(1165,1428,1)
(1486,1414,1)
(792,307,1)
(303,1338,1)
(1643,313,1)
(1808,1701,1)
(186,478,1)
(948,246,1)
(1600,136,1)
(1205,520,1)
(1122,466,1)
(135,1088,1)
(1070,1421,1)
(129,378,1)
(1445,752,1)
(819,354,1)
(961,1051,1)
(1016,307,1)
(622,716,1)
(638,1361,1)
(886,637,1)
(115,411,1)
(1435,1664,1)
(1496,1677,1)
(1305,344,1)
(168,1013,1)
(348,1609,1)
(1695,1018,1)
(1615,675,1)
(384,1548,1)
(1807,418,1)
(1108,1677,1)
(195,1641,1)
(1712,395,1)
(829,1083,1)
(293,935,1)
(1495,559,1)
(197,578,1)
(478,1414,1)
(334,1384,1)
(1006,922,1)
(114,536,1)
(1324,992,1)
(329,1109,1)
(693,1763,1)
(1644,299,1)
(507,163,1)
(728,787,1)
(320,1004,1)
(478,1666,1)
(865,1729,1)
(694,1643,1)
(391,562,1)
(516,1062,1)
(968,1750,1)
(898,1677,1)
(710,1745,1)
(616,1491,1)
(1428,1757,1)
(1236,1782,1)
(1307,42,1)
(1746,817,1)
(293,1799,1)
(713,1660,1)
(422,729,1)
(608,1041,1)
(1574,1753,1)
(1660,1414,1)
(771,116,1)
(1176,272,1)
(285,1101,1)
(1626,1677,1)
(260,913,1)
(1072,1244,1)
(1810,1452,1)
(1525,1677,1)
(1171,405,1)
(1407,887,1)
(365,1323,1)
(722,1085,1)
(71,307,1)
(658,487,1)
(479,1624,1)
(1719,1802,1)
(1092,1679,1)
(1522,757,1)
(204,1752,1)
(1570,430,1)
(1100,273,1)
(1710,1775,1)
(127,1770,1)
(1560,781,1)
(624,1084,1)
(1436,115,1)
(986,514,1)
(103,1050,1)
(950,1715,1)
(1771,31,1)
(817,1289,1)
(1348,1511,1)
(1203,588,1)
(260,31,1)
(94,358,1)
(386,542,1)
(1660,1499,1)
(1262,482,1)
(32,114,1)
(208,940,1)
(1286,107,1)
(1451,1313,1)
(831,1716,1)
(1633,1812,1)
(331,1590,1)
(1718,804,1)
(1660,1262,1)
(460,1761,1)
(579,1205,1)
(989,786,1)
(745,531,1)
(1290,1015,1)
(1143,571,1)
(1155,317,1)
(81,634,1)
(513,1677,1)
(774,1405,1)
(625,1799,1)
(979,1216,1)
(752,427,1)
(175,268,1)
(737,717,1)
(1136,1413,1)
(1668,492,1)
(1701,73,1)
(949,1677,1)
(1395,307,1)
(498,751,1)
(1047,357,1)
(1509,1677,1)
(1715,70,1)
(382,1677,1)
(378,450,1)
(1608,69,1)
(314,341,1)
(478,119,1)
(475,1677,1)
(1660,1314,1)
(1659,554,1)
(1464,1711,1)
(1352,1804,1)
(1281,244,1)
(1221,1010,1)
(11,689,1)
(1167,1677,1)
(1579,1433,1)
(1231,697,1)
(577,164,1)
(688,1466,1)
(478,1217,1)
(1298,1677,1)
(1394,39,1)
(1806,81,1)
(51,92,1)
(478,1499,1)
(42,412,1)
(1744,958,1)
(680,1677,1)
(1011,909,1)
(1568,1287,1)
(1256,631,1)
(1428,1677,1)
(832,1477,1)
(1613,1056,1)
(1216,1029,1)
(1081,495,1)
(1788,978,1)
(1644,1677,1)
(1341,93,1)
(36,1492,1)
(92,1378,1)
(1160,1677,1)
(130,1677,1)
(1437,1243,1)
(478,763,1)
(1771,119,1)
(1384,368,1)
(1260,1409,1)
(494,1348,1)
(502,219,1)
(673,1012,1)
(1103,1170,1)
(720,1,1)
(270,1597,1)
(765,1666,1)
(875,470,1)
(795,292,1)
(1181,1328,1)
(711,731,1)
(700,148,1)
(1510,390,1)
(248,1116,1)
(1225,377,1)
(260,1768,1)
(1806,131,1)
(44,705,1)
(1187,1732,1)
(75,347,1)
(497,763,1)
(1772,1225,1)
(1300,568,1)
(1371,919,1)
(1703,1576,1)
(1040,348,1)
(1640,1792,1)
(1461,1246,1)
(276,407,1)
(234,56,1)
(1244,926,1)
(1089,8,1)
(598,652,1)
(541,1677,1)
(24,1214,1)
(1738,92,1)
(274,58,1)
(1370,1562,1)
(240,1257,1)
(899,165,1)
(1734,307,1)
(1163,1809,1)
(1265,753,1)
(568,1241,1)
(1340,1165,1)
(1498,1117,1)
(1698,541,1)
(1359,1772,1)
(1278,197,1)
(844,1233,1)
(1571,1617,1)
(1055,1677,1)
(776,672,1)
(554,1677,1)
(1688,426,1)
(367,1677,1)
(1344,1564,1)
(427,346,1)
(884,1061,1)
(1590,628,1)
(273,1533,1)
(616,402,1)
(440,226,1)
(478,986,1)
(1299,1122,1)
(391,1627,1)
(119,700,1)
(289,1316,1)
(827,923,1)
(380,1677,1)
(556,1677,1)
(214,974,1)
(1091,339,1)
(420,278,1)
(445,307,1)
(924,486,1)
(309,1324,1)
(279,111,1)
(1660,399,1)
(388,307,1)
(880,1490,1)
(692,50,1)
(957,1348,1)
(1372,617,1)
(1137,973,1)
(1356,1025,1)
(85,1677,1)
(1511,1636,1)
(707,76,1)
(1676,1677,1)
(991,242,1)
(399,509,1)
(1234,63,1)
(1664,507,1)
(877,461,1)
(1049,1726,1)
(97,1214,1)
(1333,1677,1)
(1612,266,1)
(1242,1280,1)
(1786,1677,1)
(253,303,1)
(386,1630,1)
(1533,1479,1)
(855,1677,1)
(319,818,1)
(1398,680,1)
(1522,827,1)
(575,1326,1)
(129,1178,1)
(1792,366,1)
(1504,1677,1)
(953,1310,1)
(916,1804,1)
(1118,1677,1)
(702,1766,1)
(1420,459,1)
(35,243,1)
(1099,712,1)
(723,1554,1)
(1194,1006,1)
(287,1668,1)
(1141,1179,1)
(1496,518,1)
(1290,191,1)
(1310,810,1)
(267,928,1)
(399,1424,1)
(916,367,1)
(1220,1444,1)
(445,49,1)
(90,1319,1)
(763,947,1)
(36,1517,1)
(574,1147,1)
(1761,1318,1)
(1450,206,1)
(1160,799,1)
(882,540,1)
(916,976,1)
(72,1325,1)
(1459,1155,1)
(1767,209,1)
(55,1372,1)
(1521,1799,1)
(1432,1677,1)
(1328,81,1)
(1087,31,1)
(1466,1476,1)
(30,1683,1)
(1627,1681,1)
(1247,866,1)
(345,1048,1)
(782,914,1)
(412,319,1)
(661,1107,1)
(1764,930,1)
(1245,1267,1)
(1761,1792,1)
(804,1019,1)
(514,1792,1)
(118,581,1)
(478,913,1)
(1499,1677,1)
(1629,1284,1)
(797,2,1)
(320,1677,1)
(1020,234,1)
(282,1790,1)
(521,1677,1)
(461,809,1)
(103,1368,1)
(866,236,1)
(615,1430,1)
(1272,519,1)
(141,927,1)
(1559,560,1)
(780,861,1)
(1501,1123,1)
(697,1274,1)
(754,693,1)
(1726,1426,1)
(69,1677,1)
(961,87,1)
(338,1104,1)
(926,1677,1)
(676,871,1)
(1215,701,1)
(642,1076,1)
(1118,376,1)
(532,994,1)
(892,980,1)
(264,1009,1)
(403,195,1)
(633,1441,1)
(373,1799,1)
(1660,688,1)
(25,268,1)
(851,294,1)
(1520,547,1)
(1592,1487,1)
(251,924,1)
(528,1281,1)
(1803,1425,1)
(913,1096,1)
(1642,193,1)
(1671,699,1)
(1083,307,1)
(35,1349,1)
(302,946,1)
(677,1638,1)
(1361,179,1)
(712,865,1)
(1768,1369,1)
(243,1349,1)
(1132,113,1)
(1812,1677,1)
(1176,1677,1)
(1771,1501,1)
(582,1245,1)
(1206,301,1)
(1167,1725,1)
(1678,1151,1)
(546,225,1)
(478,1587,1)
(1313,447,1)
(750,1285,1)
(1552,1092,1)
(1560,964,1)
(877,1677,1)
(825,557,1)
(87,1471,1)
(1243,98,1)
(1709,1509,1)
(1141,1235,1)
(19,577,1)
(1492,307,1)
(79,839,1)
(1130,933,1)
(1484,230,1)
(590,245,1)
(494,957,1)
(1660,1768,1)
(1530,305,1)
(1525,1654,1)
(1192,324,1)
(380,307,1)
(1235,156,1)
(42,1677,1)
(478,367,1)
(652,564,1)
(1665,423,1)
(715,392,1)
(111,1389,1)
(1184,1332,1)
(186,1731,1)
(554,1691,1)
(1660,985,1)
(1178,385,1)
(1733,633,1)
(553,395,1)
(1105,307,1)
(1771,913,1)
(1549,591,1)
(1105,862,1)
(1119,1740,1)
(1462,245,1)
(1548,1357,1)
(771,1789,1)
(74,1374,1)
(896,1787,1)
(701,307,1)
(1304,420,1)
(1725,141,1)
(130,307,1)
(993,1472,1)
(1670,1677,1)
(1624,6,1)
(16,1459,1)
(903,624,1)
(286,317,1)
(152,1105,1)
(1363,1677,1)
(172,1677,1)
(1129,796,1)
(830,841,1)
(394,129,1)
(173,635,1)
(232,977,1)
(221,516,1)
(242,1575,1)
(1463,545,1)
(1172,1350,1)
(313,1613,1)
(1287,1080,1)
(106,1110,1)
(911,1677,1)
(478,31,1)
(514,793,1)
(950,159,1)
(409,1031,1)
(192,1168,1)
(180,995,1)
(475,307,1)
(1344,81,1)
(32,81,1)
(260,479,1)
(1735,962,1)
(559,537,1)
(1596,1181,1)
(1394,1303,1)
(1392,822,1)
(938,848,1)
(1434,1062,1)
(229,87,1)
(1123,1448,1)
(39,1303,1)
(443,99,1)
(219,966,1)
(1708,1416,1)
(573,766,1)
(465,1542,1)
(1611,432,1)
(1441,109,1)
(377,435,1)
(1646,484,1)
(727,381,1)
(1497,896,1)
(1037,1030,1)
(503,1663,1)
(546,740,1)
(322,1049,1)
(408,45,1)
(226,1423,1)
(1633,859,1)
(1498,764,1)
(354,1067,1)
(1543,1124,1)
(1004,1528,1)
(247,942,1)
(1161,1171,1)
(1732,1526,1)
(667,1141,1)
(800,1270,1)
(381,394,1)
(1771,536,1)
(998,213,1)
(1413,0,1)
(1477,1063,1)
(716,247,1)
(468,1677,1)
(1513,1195,1)
(1298,180,1)
(1643,1677,1)
(1430,1532,1)
(80,651,1)
(1338,565,1)
(241,388,1)
(775,1699,1)
(1058,334,1)
(69,832,1)
(1138,1747,1)
(160,704,1)
(1345,1677,1)
(602,1198,1)
(504,590,1)
(1583,475,1)
(1590,599,1)
(1277,1625,1)
(116,551,1)
(624,309,1)
(42,307,1)
(764,1117,1)
(1067,1661,1)
(1571,1677,1)
(1044,1019,1)
(1252,262,1)
(1035,1677,1)
(1016,1157,1)
(1048,1686,1)
(699,819,1)
(1149,674,1)
(1063,1677,1)
(914,1619,1)
(1554,791,1)
(928,1350,1)
(1610,891,1)
(104,1087,1)
(317,307,1)
(1333,1068,1)
(1142,189,1)
(404,241,1)
(262,643,1)
(870,1306,1)
(1034,1047,1)
(1279,704,1)
(260,1455,1)
(1776,126,1)
(1090,1677,1)
(38,1512,1)
(201,630,1)
(1500,1672,1)
(539,1792,1)
(1581,1551,1)
(881,1359,1)
(598,1550,1)
(236,921,1)
(142,762,1)
(717,1778,1)
(433,222,1)
(1504,117,1)
(1465,1188,1)
(1116,722,1)
(1482,1546,1)
(1762,1250,1)
(461,1712,1)
(1753,1677,1)
(1239,1249,1)
(414,1702,1)
(1638,1326,1)
(1080,321,1)
(1425,414,1)
(333,1436,1)
(169,256,1)
(143,945,1)
(327,81,1)
(1804,1677,1)
(363,664,1)
(1195,1211,1)
(1663,232,1)
(153,1038,1)
(1356,1677,1)
(1587,556,1)
(725,952,1)
(1771,986,1)
(1726,81,1)
(977,3,1)
(1268,998,1)
(1122,184,1)
(258,1677,1)
(1813,1314,1)
(778,283,1)
(1058,1677,1)
(836,1226,1)
(390,1336,1)
(57,1305,1)
(1660,763,1)
(901,1288,1)
(1027,1593,1)
(184,1677,1)
(855,1276,1)
(260,146,1)
(1692,1346,1)
(983,1293,1)
(1478,239,1)
(1131,1751,1)
(260,1499,1)
(937,103,1)
(1263,1338,1)
(789,1039,1)
(556,307,1)
(685,1049,1)
(956,456,1)
(15,153,1)
(86,701,1)
(891,1240,1)
(1778,1366,1)
(602,1677,1)
(713,916,1)
(1587,145,1)
(85,1214,1)
(172,307,1)
(392,1786,1)
(220,214,1)
(1291,241,1)
(1253,1593,1)
(1457,460,1)
(1567,1550,1)
(909,400,1)
(149,478,1)
(704,1214,1)
(1151,307,1)
(388,676,1)
(1108,1275,1)
(483,842,1)
(701,1692,1)
(1509,837,1)
(1320,816,1)
(784,150,1)
(1186,164,1)
(1309,1393,1)
(1660,146,1)
(1009,1093,1)
(857,498,1)
(1660,1455,1)
(919,991,1)
(281,1003,1)
(269,60,1)
(136,1634,1)
(1751,1509,1)
(544,1458,1)
(367,775,1)
(1602,504,1)
(1130,1682,1)
(120,42,1)
(120,1307,1)
(1062,1197,1)
(1635,1505,1)
(1423,868,1)
(293,1350,1)
(714,1182,1)
(1223,809,1)
(1188,993,1)
(1781,604,1)
(683,1569,1)
(476,1677,1)
(643,1060,1)
(98,990,1)
(1460,9,1)
(357,893,1)
(683,612,1)
(358,435,1)
(378,1112,1)
(1475,1219,1)
(540,1807,1)
(18,1174,1)
(184,307,1)
(1263,125,1)
(1636,1770,1)
(1326,582,1)
(898,1214,1)
(1078,1498,1)
(227,1002,1)
(1625,875,1)
(29,424,1)
(1712,1356,1)
(1659,1707,1)
(377,94,1)
(1488,1340,1)
(1515,81,1)
(1766,1043,1)
(620,397,1)
(1370,57,1)
(181,1355,1)
(428,603,1)
(1517,1492,1)
(906,1677,1)
(938,97,1)
(1557,703,1)
(13,1377,1)
(670,54,1)
(1368,1050,1)
(312,1102,1)
(1427,566,1)
(641,843,1)
(1233,758,1)
(477,687,1)
(551,650,1)
(588,1297,1)
(511,81,1)
(1002,74,1)
(337,16,1)
(489,142,1)
(911,455,1)
(1735,1677,1)
(949,361,1)
(1130,476,1)
(1274,1705,1)
(1090,517,1)
(1254,78,1)
(1332,1544,1)
(410,514,1)
(1655,160,1)
(1660,1666,1)
(1558,583,1)
(352,780,1)
(314,1799,1)
(260,1314,1)
(1522,1543,1)
(1615,1134,1)
(1330,1108,1)
(916,913,1)
(1439,1684,1)
(481,746,1)
(1415,1040,1)
(476,117,1)
(465,307,1)
(933,1214,1)
(859,1812,1)
(1467,248,1)
(1767,1264,1)
(150,36,1)
(223,47,1)
(970,823,1)
(1552,626,1)
(1060,172,1)
(541,289,1)
(1501,1677,1)
(1471,1478,1)
(1619,1680,1)
(1226,249,1)
(1734,739,1)
(899,1497,1)
(1518,1667,1)
(1432,981,1)
(273,307,1)
(183,18,1)
(290,627,1)
(548,716,1)
(453,29,1)
(986,410,1)
(170,408,1)
(1627,1677,1)
(260,763,1)
(655,1585,1)
(705,1677,1)
(590,106,1)
(27,479,1)
(67,1245,1)
(916,1499,1)
(1050,79,1)
(650,902,1)
(1597,1456,1)
(630,240,1)
(715,1786,1)
(260,688,1)
(946,1677,1)
(1705,1521,1)
(1339,1792,1)
(437,609,1)
(8,1162,1)
(70,515,1)
(1632,12,1)
(995,1090,1)
(374,889,1)
(1197,658,1)
(763,1677,1)
(1537,1682,1)
(826,1166,1)
(1653,705,1)
(1147,1777,1)
(874,1247,1)
(1620,1678,1)
(543,1252,1)
(1117,1677,1)
(390,1677,1)
(244,1189,1)
(872,1677,1)
(1555,890,1)
(1786,714,1)
(1723,1333,1)
(90,1653,1)
(361,175,1)
(739,431,1)
(615,375,1)
(511,565,1)
(1440,589,1)
(64,1514,1)
(1661,1571,1)
(1296,430,1)
(1781,307,1)
(244,372,1)
(519,1615,1)
(332,1735,1)
(447,1013,1)
(808,829,1)
(22,644,1)
(1729,1808,1)
(129,1674,1)
(625,788,1)
(705,422,1)
(1553,130,1)
(799,1370,1)
(1028,1658,1)
(1766,305,1)
(63,1620,1)
(1521,1399,1)
(214,95,1)
(760,1118,1)
(1086,390,1)
(801,28,1)
(1595,1677,1)
(851,1801,1)
(1331,1381,1)
(47,1269,1)
(1424,509,1)
(933,1677,1)
(1772,593,1)
(885,982,1)
(249,1579,1)
(1507,406,1)
(1166,730,1)
(155,988,1)
(567,1677,1)
(1771,682,1)
(929,312,1)
(1551,1677,1)
(696,1572,1)
(706,1764,1)
(1038,224,1)
(503,727,1)
(1483,1594,1)
(1627,307,1)
(1110,1184,1)
(1572,1616,1)
(1152,1059,1)
(1363,337,1)
(599,1603,1)
(788,1421,1)
(154,1647,1)
(230,1394,1)
(1017,1585,1)
(428,96,1)
(884,1263,1)
(175,539,1)
(1414,253,1)
(258,282,1)
(1596,81,1)
(594,1598,1)
(922,661,1)
(812,167,1)
(806,1501,1)
(852,680,1)
(1179,910,1)
(260,1086,1)
(1727,1687,1)
(1170,1677,1)
(512,1677,1)
(1327,939,1)
(1519,302,1)
(222,727,1)
(1812,64,1)
(1248,1266,1)
(89,274,1)
(375,1474,1)
(906,711,1)
(809,920,1)
(649,936,1)
(1135,1760,1)
(932,1203,1)
(1660,1086,1)
(508,456,1)
(1532,231,1)
(547,835,1)
(252,849,1)
(1378,327,1)
(487,1604,1)
(1771,760,1)
(942,869,1)
(872,307,1)
(1682,1312,1)
(146,380,1)
(501,1023,1)
(1007,1409,1)
(510,1239,1)
(1364,522,1)
(260,953,1)
(105,667,1)
(260,986,1)
(1616,1091,1)
(582,67,1)
(792,1677,1)
(1250,1173,1)
(1734,1677,1)
(666,172,1)
(1745,874,1)
(190,1734,1)
(1041,1513,1)
(1763,1398,1)
(61,143,1)
(779,960,1)
(1543,1792,1)
(96,1137,1)
(732,1736,1)
(669,673,1)
(1065,979,1)
(1060,666,1)
(373,662,1)
(654,934,1)
(305,574,1)
(372,1669,1)
(1259,1071,1)
(1538,1800,1)
(332,1475,1)
(1431,1677,1)
(1790,276,1)
(1002,1677,1)
(449,1651,1)
(491,468,1)
(157,1675,1)
(926,307,1)
(210,1304,1)
(947,881,1)
(1094,1308,1)
(1017,655,1)
(600,1066,1)
(482,1055,1)
(164,1553,1)
(1802,976,1)
(1351,1364,1)
(370,291,1)
(1213,62,1)
(1660,845,1)
(193,491,1)
(385,1353,1)
(647,1121,1)
(264,464,1)
(1169,1539,1)
(1346,1653,1)
(1050,307,1)
(681,649,1)
(1339,205,1)
(31,1481,1)
(255,959,1)
(787,198,1)
(648,1605,1)
(1525,307,1)
(450,783,1)
(237,365,1)
(1585,1677,1)
(1773,1375,1)
(973,603,1)
(837,1748,1)
(1061,1263,1)
(1381,1677,1)
(416,1677,1)
(451,490,1)
(1433,1142,1)
(123,883,1)
(41,1341,1)
(1713,1283,1)
(999,849,1)
(967,678,1)
(1480,1717,1)
(966,102,1)
(383,473,1)
(1757,1265,1)
(746,684,1)
(1535,949,1)
(1349,1254,1)
(390,307,1)
(1615,1607,1)
(1467,307,1)
(651,1677,1)
(1458,788,1)
(523,1339,1)
(1777,1698,1)
(1031,1095,1)
(1412,380,1)
(1431,1194,1)
(776,897,1)
(823,425,1)
(1076,1033,1)
(1010,545,1)
(471,808,1)
(1174,483,1)
(987,1454,1)
(822,1379,1)
(1679,724,1)
(1261,1608,1)
(1443,1506,1)
(1607,72,1)
(1409,1500,1)
(259,1677,1)
(76,158,1)
(1812,307,1)
(1563,1635,1)
(571,1231,1)
(563,549,1)
(1022,51,1)
(452,1437,1)
(526,948,1)
(1140,1695,1)
(1618,1733,1)
(847,494,1)
(897,986,1)
(1149,908,1)
(810,1260,1)
(557,350,1)
(809,1467,1)
(1492,670,1)
(1660,1723,1)
(191,1677,1)
(186,999,1)
(1603,472,1)
(455,1565,1)
(417,1236,1)
(129,1746,1)
(1626,1214,1)
(1699,254,1)
(1429,445,1)
(924,101,1)
(1169,528,1)
(1771,1499,1)
(883,1677,1)
(1660,1587,1)
(1610,1677,1)
(536,1261,1)
(1110,1677,1)
(375,1011,1)
(406,480,1)
(1493,399,1)
(1711,681,1)
(1556,614,1)
(147,1140,1)
(1491,307,1)
(1175,37,1)
(317,1677,1)
(306,368,1)
(225,1632,1)
(270,646,1)
(1689,1119,1)
(766,803,1)
(424,1464,1)
(914,403,1)
(1660,119,1)
(1005,1524,1)
(1625,81,1)
(151,1688,1)
(1397,1227,1)
(1443,1214,1)
(380,856,1)
(749,1445,1)
(292,665,1)
(268,1429,1)
(425,488,1)
(1653,228,1)
(2,1612,1)
(1630,1677,1)
(145,556,1)
(199,123,1)
(1246,1407,1)
(776,1677,1)
(1740,696,1)
(617,1582,1)
(1731,999,1)
(1231,1350,1)
(1251,1212,1)
(1230,137,1)
(1660,986,1)
(591,139,1)
(135,642,1)
(625,1172,1)
(62,1436,1)
(1411,1720,1)
(1130,654,1)
(1639,339,1)
(964,307,1)
(1592,1792,1)
(1489,1550,1)
(1580,1493,1)
(804,1044,1)
(164,130,1)
(593,1225,1)
(890,1535,1)
(1655,617,1)
(472,1427,1)
(1503,847,1)
(1770,475,1)
(478,399,1)
(663,1131,1)
(918,24,1)
(1666,1237,1)
(191,733,1)
(1267,1069,1)
(446,911,1)
(133,1677,1)
(172,1765,1)
(1686,1781,1)
(713,1796,1)
(1463,1221,1)
(1364,683,1)
(466,184,1)
(1173,867,1)
(1794,1703,1)
(4,106,1)
(1168,1677,1)
(296,1397,1)
(1524,502,1)
(581,1614,1)
(416,1347,1)
(1770,1583,1)
(921,1690,1)
(1377,1656,1)
(1026,203,1)
(1452,880,1)
(1354,522,1)
(1019,1507,1)
(324,309,1)
(542,1630,1)
(607,726,1)
(1614,741,1)
(1176,307,1)
(1628,1105,1)
(634,1410,1)
(129,1623,1)
(28,663,1)
(213,728,1)
(889,270,1)
(838,931,1)
(1066,715,1)
(59,572,1)
(1349,307,1)
(1797,710,1)
(1182,1519,1)
(1355,343,1)
(1415,771,1)
(1104,1588,1)
(354,1661,1)
(1465,993,1)
(12,1298,1)
(1781,1677,1)
(1564,1756,1)
(1353,671,1)
(592,943,1)
(33,1118,1)
(1759,987,1)
(117,1792,1)
(1479,599,1)
(1641,1089,1)
(470,1515,1)
(260,536,1)
(1474,501,1)
(916,463,1)
(987,1677,1)
(478,976,1)
(260,1501,1)
(566,1163,1)
(1306,290,1)
(421,546,1)
(535,1201,1)
(1784,1202,1)
(139,367,1)
(967,1214,1)
(1722,1078,1)
(397,1437,1)
(1282,1705,1)
(759,526,1)
(1660,913,1)
(1034,443,1)
(1201,235,1)
(683,1677,1)
(212,1644,1)
(839,1450,1)
(1690,765,1)
(514,1224,1)
(1115,1315,1)
(550,1518,1)
(1133,1677,1)
(478,1314,1)
(328,1722,1)
(1550,1130,1)
(1771,367,1)
(541,307,1)
(1660,479,1)
(1591,1639,1)
(750,975,1)
(146,1412,1)
(1158,1383,1)
(301,192,1)
(235,971,1)
(1130,1350,1)
(569,1499,1)
(350,457,1)
(1728,1762,1)
(1227,1759,1)
(950,1138,1)
(1145,1455,1)
(1449,913,1)
(1743,27,1)
(767,85,1)
(949,307,1)
(687,1785,1)
(740,1799,1)
(1594,18,1)
(91,1218,1)
(1787,1282,1)
(167,1723,1)
(205,1640,1)
(138,1521,1)
(1799,768,1)
(509,1677,1)
(1086,1510,1)
(567,43,1)
(320,1214,1)
(65,1035,1)
(894,229,1)
(1170,754,1)
(845,911,1)
(445,1677,1)
(1369,769,1)
(896,1792,1)
(6,307,1)
(886,488,1)
(1443,1677,1)
(1426,1042,1)
(431,1191,1)
(1035,1484,1)
(484,1446,1)
(958,462,1)
(788,315,1)
(554,1214,1)
(1207,1677,1)
(1456,759,1)
(1104,237,1)
(100,720,1)
(1455,761,1)
(59,320,1)
(586,128,1)
(808,1083,1)
(500,1459,1)
(1316,998,1)
(783,1112,1)
(662,183,1)
(796,743,1)
(1755,1172,1)
(605,1136,1)
(1652,15,1)
(343,1299,1)
(1262,1055,1)
(1615,1773,1)
(992,1291,1)
(595,1755,1)
(1211,884,1)
(639,1482,1)
(1707,444,1)
(1213,1218,1)
(1365,409,1)
(1763,86,1)
(1282,598,1)
(163,1534,1)
(898,618,1)
(916,31,1)
(1284,777,1)
(831,555,1)
(476,857,1)
(134,75,1)
(627,1149,1)
(1681,1741,1)
(224,906,1)
(1238,485,1)
(916,1167,1)
(580,73,1)
(165,1497,1)
(537,263,1)
(1485,503,1)
(1660,367,1)
(742,309,1)
(925,573,1)
(769,1235,1)
(531,186,1)
(490,306,1)
(1670,1343,1)
(606,1677,1)
(66,22,1)
(636,261,1)
(1660,760,1)
(982,102,1)
(1410,1064,1)
(1048,1781,1)
(478,1804,1)
(1489,496,1)
(260,1804,1)
(1427,1677,1)
(941,825,1)
(671,1451,1)
(976,1584,1)
(524,669,1)
(994,1727,1)
(1319,310,1)
(14,215,1)
(1046,950,1)
(536,1677,1)
(3,161,1)
(1398,852,1)
(62,333,1)
(6,284,1)
(1796,41,1)
(260,583,1)
(46,636,1)
(1289,840,1)
(1219,1735,1)
(1419,668,1)
(695,122,1)
(1436,411,1)
(1381,961,1)
(95,974,1)
(405,61,1)
(1448,969,1)
(1647,512,1)
(856,1629,1)
(56,1677,1)
(492,567,1)
(842,489,1)
(1491,1814,1)
(1042,1277,1)
(434,1766,1)
(1260,269,1)
(1151,1677,1)
(346,580,1)
(1636,127,1)
(459,147,1)
(187,1020,1)
(1271,807,1)
(268,445,1)
(904,1693,1)
(1055,177,1)
(781,964,1)
(539,25,1)
(943,1155,1)
(651,785,1)
(1789,723,1)
(284,384,1)
(930,1192,1)
(96,1338,1)
(773,1563,1)
(701,1677,1)
(260,119,1)
(939,561,1)
(509,1220,1)
(1676,660,1)
(1634,1256,1)
(316,870,1)
(1436,1690,1)
(549,1483,1)
(933,438,1)
(951,1180,1)
(156,201,1)
(125,356,1)
(169,307,1)
(61,307,1)
(1508,900,1)
(259,1278,1)
(926,140,1)
(1503,494,1)
(744,1081,1)
(1157,90,1)
(407,1016,1)
(1529,1382,1)
(915,1167,1)
(1775,285,1)
(1270,382,1)
(1494,295,1)
(1015,1670,1)
(158,1527,1)
(614,1631,1)
(257,820,1)
(561,135,1)
(1720,417,1)
(1660,536,1)
(1804,1460,1)
(1291,404,1)
(1275,826,1)
(797,1288,1)
(1491,1677,1)
(913,1677,1)
(1030,393,1)
(211,121,1)
(156,307,1)
(128,541,1)
(509,307,1)
(1724,1074,1)
(389,1045,1)
(1382,1086,1)
(916,1455,1)
(1631,169,1)
(1814,1321,1)
(1315,1611,1)
(1752,1743,1)
(1056,218,1)
(1512,1363,1)
(864,1710,1)
(1714,1354,1)
(704,55,1)
(843,831,1)
(1190,1058,1)
(958,65,1)
(762,821,1)
(1348,1636,1)
(355,1560,1)
(1164,505,1)
(1794,1799,1)
(1615,1713,1)
(277,760,1)
(1526,217,1)
(1577,80,1)
(1345,531,1)
(427,1792,1)
(562,1627,1)
(1666,152,1)
(480,1810,1)
(1293,1133,1)
(1358,345,1)
(169,1677,1)
(1683,838,1)
(447,168,1)
(223,1792,1)
(1660,31,1)
(995,1309,1)
(604,13,1)
(1656,798,1)
(1366,1622,1)
(1568,1677,1)
(798,1733,1)
(1101,1496,1)
(1816,1390,1)
(768,1578,1)
(1457,1761,1)
(743,1186,1)
(1636,1690,1)
(657,278,1)
(760,33,1)
(883,89,1)
(441,508,1)
(1622,259,1)
(1407,465,1)
(1771,976,1)
(805,1140,1)
(1102,329,1)
(228,216,1)
(1214,750,1)
(1084,442,1)
(1389,162,1)
(867,707,1)
(1771,1804,1)
(1401,738,1)
(1669,1175,1)
(1741,86,1)
(1422,192,1)
(1205,1677,1)
(1257,749,1)
(423,1153,1)
(1043,1530,1)
(1644,307,1)
(156,1677,1)
(1357,894,1)
(1431,725,1)
(1476,227,1)
(109,1380,1)
(952,1715,1)
(486,1342,1)
(465,1677,1)
(1185,615,1)
(1561,1718,1)
(1452,1677,1)
(317,595,1)
(1105,1677,1)
(946,1032,1)
(365,307,1)
(1573,1732,1)
(511,1395,1)
(869,1677,1)
(802,483,1)
(1522,1600,1)
(479,6,1)
(1562,1541,1)
(349,846,1)
(1578,170,1)
(1068,1776,1)
(533,1034,1)
(640,1216,1)
(1266,1738,1)
(920,1467,1)
(1056,1512,1)
(1292,316,1)
(1024,528,1)
(468,629,1)
(1471,1446,1)
(332,1677,1)
(433,727,1)
(1405,258,1)
(1069,892,1)
(78,938,1)
(1531,1659,1)
(916,119,1)
(1654,44,1)
(774,258,1)
(515,1573,1)
(1723,436,1)
(1724,133,1)
(393,1262,1)
(1800,1677,1)
(1658,497,1)
(1630,307,1)
(2,725,1)
(0,985,1)
(1641,1520,1)
(1660,1207,1)
(664,492,1)
(1133,1655,1)
(1617,886,1)
(1504,210,1)
(1237,152,1)
(1771,1455,1)
(1038,906,1)
(1115,1677,1)
(1588,237,1)
(260,760,1)
(1693,972,1)
(1660,976,1)
(684,940,1)
(411,1780,1)
(600,1052,1)
(86,1215,1)
(910,1768,1)
(203,819,1)
(1748,794,1)
(398,1148,1)
(629,221,1)
(838,276,1)
(1765,1234,1)
(1753,1689,1)
(646,1597,1)
(1217,688,1)
(209,1264,1)
(1487,1485,1)
(1694,1784,1)
(1521,1350,1)
(1075,1029,1)
(818,1749,1)
(1678,1470,1)
(1487,959,1)
(835,1196,1)
(881,1560,1)
(884,1677,1)
(1333,307,1)
(1492,1677,1)
(985,1411,1)
(1155,286,1)
(1162,695,1)
(931,19,1)
(264,1690,1)
(398,1512,1)
(1198,1708,1)
(1209,365,1)
(1323,434,1)
(93,854,1)
(1074,133,1)
(474,46,1)
(271,1503,1)
(967,1677,1)
(740,1350,1)
(601,579,1)
(401,1685,1)
(803,677,1)
(23,1538,1)
(1735,1214,1)
(1288,1210,1)
(599,1799,1)
(1432,1115,1)
(805,1420,1)
(1645,772,1)
(1008,1164,1)
(871,989,1)
(674,1677,1)
(796,307,1)
(478,985,1)
(628,1100,1)
(1064,550,1)
(1336,524,1)
(1071,795,1)
(618,1046,1)
(1019,1677,1)
(1641,941,1)
(962,1531,1)
(99,1783,1)
(1403,642,1)
(294,933,1)
(395,1645,1)
(272,1739,1)
(720,307,1)
(1023,1011,1)
(508,956,1)
(1546,154,1)
(388,1677,1)
(1128,602,1)
(660,640,1)
(301,1422,1)
(1651,11,1)
(266,1253,1)
(131,437,1)
(217,830,1)
(10,138,1)
(73,1242,1)
(576,149,1)
(1083,1677,1)
(1154,925,1)
(442,706,1)
(533,1792,1)
(191,1788,1)
(43,1296,1)
(1016,1677,1)
(679,1053,1)
(1088,1403,1)
(184,1508,1)
(478,760,1)
(1003,1190,1)
(188,789,1)
(934,476,1)
(749,752,1)
(1326,582,2)
(1500,368,2)
(938,97,2)
(1016,1763,2)
(1260,548,2)
(1124,102,2)
(1543,73,2)
(609,1653,2)
(1034,18,2)
(746,940,2)
(1271,106,2)
(1699,1339,2)
(400,1313,2)
(228,705,2)
(129,1763,2)
(32,92,2)
(129,247,2)
(149,1459,2)
(753,1339,2)
(554,1677,2)
(1130,1705,2)
(1564,1049,2)
(1430,375,2)
(701,307,2)
(949,1763,2)
(31,1339,2)
(533,960,2)
(1034,102,2)
(1034,1521,2)
(553,809,2)
(1115,1677,2)
(1659,1763,2)
(602,1677,2)
(219,102,2)
(1310,339,2)
(1689,1521,2)
(1080,1677,2)
(215,529,2)
(1656,940,2)
(1223,809,2)
(1060,940,2)
(96,1338,2)
(782,1763,2)
(1431,1107,2)
(42,307,2)
(1564,1206,2)
(1409,368,2)
(643,870,2)
(960,368,2)
(1213,62,2)
(428,417,2)
(260,1313,2)
(1415,1763,2)
(1555,1257,2)
(519,1326,2)
(521,1313,2)
(56,1339,2)
(175,819,2)
(1268,998,2)
(1672,1763,2)
(1017,1585,2)
(105,1257,2)
(1260,819,2)
(1310,102,2)
(1484,1653,2)
(1732,1169,2)
(1428,1339,2)
(1034,135,2)
(1497,1521,2)
(1409,135,2)
(394,1763,2)
(1338,1339,2)
(1590,1763,2)
(1344,492,2)
(958,1763,2)
(959,960,2)
(371,870,2)
(445,18,2)
(394,1216,2)
(916,760,2)
(1528,1653,2)
(268,1524,2)
(949,1766,2)
(245,1724,2)
(1429,102,2)
(28,1653,2)
(75,1792,2)
(1246,1407,2)
(268,18,2)
(662,18,2)
(1033,819,2)
(583,102,2)
(1358,870,2)
(331,1763,2)
(1275,1339,2)
(1500,1359,2)
(651,1339,2)
(1034,1524,2)
(1604,304,2)
(49,278,2)
(180,1653,2)
(361,137,2)
(1758,940,2)
(1689,1056,2)
(157,1049,2)
(1231,1705,2)
(407,1653,2)
(1753,1257,2)
(399,509,2)
(720,889,2)
(810,1763,2)
(303,1339,2)
(1415,1257,2)
(1543,1792,2)
(962,1763,2)
(445,137,2)
(522,1193,2)
(816,529,2)
(1689,548,2)
(948,1192,2)
(1733,870,2)
(268,960,2)
(361,960,2)
(1278,1763,2)
(1466,1459,2)
(1230,137,2)
(1489,1550,2)
(949,278,2)
(1767,417,2)
(1460,1766,2)
(856,484,2)
(409,870,2)
(1689,889,2)
(1576,1489,2)
(1803,940,2)
(445,1521,2)
(949,1313,2)
(60,1409,2)
(1592,819,2)
(572,1763,2)
(1796,92,2)
(839,940,2)
(744,1759,2)
(1374,1459,2)
(1520,1763,2)
(998,1339,2)
(953,1257,2)
(603,1792,2)
(810,889,2)
(904,1339,2)
(1756,998,2)
(1672,819,2)
(1660,1414,2)
(1500,135,2)
(1049,1277,2)
(1050,940,2)
(959,548,2)
(1574,548,2)
(1615,788,2)
(260,339,2)
(361,548,2)
(731,1339,2)
(154,1339,2)
(1771,1414,2)
(810,137,2)
(583,1763,2)
(205,1226,2)
(1660,1768,2)
(1753,278,2)
(1500,73,2)
(321,819,2)
(1426,1277,2)
(37,137,2)
(1103,1763,2)
(890,889,2)
(1556,1766,2)
(898,1677,2)
(103,940,2)
(208,940,2)
(1535,1359,2)
(361,135,2)
(424,1763,2)
(477,687,2)
(637,488,2)
(1585,940,2)
(1237,1732,2)
(268,73,2)
(1193,1763,2)
(1513,1206,2)
(836,1226,2)
(445,819,2)
(936,1653,2)
(656,1705,2)
(925,1326,2)
(1558,1359,2)
(129,1206,2)
(1422,1049,2)
(1390,1339,2)
(583,368,2)
(949,788,2)
(149,1056,2)
(980,1359,2)
(727,548,2)
(1500,278,2)
(1214,339,2)
(794,1447,2)
(1324,989,2)
(1128,1339,2)
(1210,1715,2)
(175,137,2)
(1440,627,2)
(1310,925,2)
(1393,838,2)
(681,1653,2)
(179,805,2)
(1487,548,2)
(1008,92,2)
(1666,1732,2)
(211,1633,2)
(15,1339,2)
(175,1763,2)
(1756,102,2)
(1236,925,2)
(1384,368,2)
(486,1489,2)
(720,1677,2)
(394,960,2)
(446,1763,2)
(675,1763,2)
(457,1524,2)
(129,1524,2)
(135,642,2)
(1487,73,2)
(1004,1653,2)
(321,102,2)
(1660,119,2)
(674,1677,2)
(1607,492,2)
(541,307,2)
(403,195,2)
(175,135,2)
(1310,1049,2)
(688,1459,2)
(1808,73,2)
(678,1653,2)
(1168,1677,2)
(248,1763,2)
(240,1257,2)
(445,247,2)
(1535,548,2)
(655,870,2)
(675,819,2)
(519,960,2)
(973,417,2)
(533,1206,2)
(1624,87,2)
(1535,1326,2)
(1452,1339,2)
(367,1677,2)
(1735,1214,2)
(1429,1216,2)
(1200,1763,2)
(368,493,2)
(496,1705,2)
(1809,967,2)
(1658,1359,2)
(268,1326,2)
(390,307,2)
(1298,1677,2)
(433,788,2)
(295,940,2)
(1568,247,2)
(1753,137,2)
(1660,536,2)
(684,870,2)
(516,1062,2)
(1281,137,2)
(880,1339,2)
(1089,247,2)
(1167,1759,2)
(389,940,2)
(1415,925,2)
(1441,940,2)
(402,940,2)
(1668,492,2)
(892,1359,2)
(1753,1056,2)
(953,1524,2)
(1555,1763,2)
(1272,940,2)
(1407,465,2)
(810,18,2)
(1250,870,2)
(1324,137,2)
(1708,1339,2)
(1564,1359,2)
(387,1170,2)
(276,1763,2)
(154,1647,2)
(953,1226,2)
(137,1216,2)
(1452,1677,2)
(771,1192,2)
(417,1782,2)
(1090,838,2)
(433,278,2)
(1392,889,2)
(403,247,2)
(727,889,2)
(1574,960,2)
(321,135,2)
(639,1339,2)
(1751,1653,2)
(62,1436,2)
(129,788,2)
(974,1339,2)
(1736,616,2)
(1543,1763,2)
(445,278,2)
(1500,889,2)
(949,1677,2)
(81,634,2)
(1173,940,2)
(1487,889,2)
(130,307,2)
(467,1339,2)
(513,1459,2)
(1806,609,2)
(754,1763,2)
(1592,529,2)
(1409,960,2)
(43,430,2)
(1124,548,2)
(63,870,2)
(810,1049,2)
(445,417,2)
(882,1759,2)
(223,1792,2)
(980,1560,2)
(433,1524,2)
(985,417,2)
(624,1192,2)
(136,1056,2)
(810,1521,2)
(1409,1216,2)
(445,1049,2)
(391,1653,2)
(78,87,2)
(381,1763,2)
(195,102,2)
(556,1677,2)
(483,1257,2)
(445,529,2)
(1344,529,2)
(1756,529,2)
(1161,1171,2)
(937,103,2)
(840,278,2)
(1409,529,2)
(1272,1766,2)
(1753,548,2)
(727,1206,2)
(745,1056,2)
(355,1560,2)
(47,247,2)
(953,1049,2)
(1344,137,2)
(582,1359,2)
(268,339,2)
(1263,1338,2)
(180,1763,2)
(1653,228,2)
(49,247,2)
(939,1677,2)
(953,492,2)
(1260,788,2)
(1356,809,2)
(1140,1313,2)
(1344,960,2)
(28,1763,2)
(634,1410,2)
(423,1763,2)
(85,1653,2)
(1038,906,2)
(1151,940,2)
(394,135,2)
(1610,1763,2)
(953,889,2)
(533,135,2)
(394,18,2)
(959,1763,2)
(1331,1257,2)
(804,1019,2)
(960,281,2)
(61,1766,2)
(953,102,2)
(1615,1056,2)
(1314,1677,2)
(285,1339,2)
(1753,1049,2)
(65,1653,2)
(1467,1763,2)
(666,940,2)
(1344,788,2)
(766,1326,2)
(695,247,2)
(1260,889,2)
(953,529,2)
(1297,870,2)
(1733,307,2)
(1753,529,2)
(1106,1339,2)
(260,1257,2)
(455,1763,2)
(1550,1130,2)
(1500,1339,2)
(1574,1313,2)
(491,1339,2)
(1467,307,2)
(1370,1653,2)
(1564,1339,2)
(906,1677,2)
(831,1716,2)
(153,1339,2)
(975,1792,2)
(1031,870,2)
(1591,339,2)
(433,1277,2)
(1541,1437,2)
(1133,889,2)
(1256,1056,2)
(449,492,2)
(1756,1759,2)
(1287,135,2)
(771,102,2)
(1610,1677,2)
(933,1677,2)
(641,1056,2)
(916,986,2)
(671,1313,2)
(1564,247,2)
(1573,1732,2)
(445,1313,2)
(1015,1670,2)
(1395,870,2)
(764,417,2)
(14,73,2)
(1176,307,2)
(568,1241,2)
(433,1056,2)
(1500,998,2)
(133,307,2)
(1555,1326,2)
(345,870,2)
(1491,940,2)
(1564,137,2)
(917,687,2)
(1340,1165,2)
(1277,1625,2)
(1215,1653,2)
(320,1677,2)
(1251,1257,2)
(961,1257,2)
(949,368,2)
(1571,1677,2)
(810,1257,2)
(1756,1359,2)
(129,73,2)
(1676,1677,2)
(1756,1049,2)
(953,1313,2)
(1497,896,2)
(916,119,2)
(1672,960,2)
(923,1521,2)
(1299,1122,2)
(135,819,2)
(1500,1226,2)
(1672,529,2)
(1752,87,2)
(1131,1653,2)
(1310,18,2)
(535,1257,2)
(437,609,2)
(1260,247,2)
(1615,1359,2)
(184,940,2)
(1260,1056,2)
(519,417,2)
(874,1677,2)
(514,793,2)
(106,1766,2)
(1501,1339,2)
(1564,102,2)
(1432,1677,2)
(1122,870,2)
(1612,1715,2)
(1174,1257,2)
(1122,940,2)
(260,536,2)
(953,1277,2)
(1689,1313,2)
(890,247,2)
(549,18,2)
(727,278,2)
(890,960,2)
(1712,1356,2)
(542,870,2)
(595,1172,2)
(1535,1313,2)
(381,1313,2)
(1235,1257,2)
(683,1763,2)
(373,1350,2)
(1152,1653,2)
(750,975,2)
(533,1524,2)
(666,870,2)
(14,102,2)
(771,137,2)
(1342,1489,2)
(599,1799,2)
(1487,788,2)
(909,1313,2)
(1630,940,2)
(1119,548,2)
(1267,1359,2)
(47,18,2)
(1672,1521,2)
(1652,1339,2)
(913,1339,2)
(1348,1636,2)
(1595,1677,2)
(347,529,2)
(1173,870,2)
(433,889,2)
(1775,285,2)
(1344,548,2)
(630,1257,2)
(1168,1049,2)
(223,135,2)
(959,1277,2)
(1272,529,2)
(916,31,2)
(810,819,2)
(795,1766,2)
(1243,98,2)
(1157,1763,2)
(1615,819,2)
(1678,940,2)
(845,911,2)
(195,247,2)
(1119,1763,2)
(1504,278,2)
(1535,889,2)
(1660,1501,2)
(478,31,2)
(260,399,2)
(1533,1653,2)
(39,1763,2)
(1023,1011,2)
(890,102,2)
(1794,1350,2)
(129,819,2)
(752,73,2)
(959,1313,2)
(1272,1759,2)
(260,31,2)
(1645,809,2)
(222,960,2)
(1409,1766,2)
(1555,339,2)
(1446,1257,2)
(1174,483,2)
(260,960,2)
(1249,529,2)
(713,1796,2)
(1110,1766,2)
(727,788,2)
(930,1192,2)
(890,1216,2)
(1409,1056,2)
(1095,940,2)
(134,529,2)
(232,959,2)
(914,1524,2)
(1453,1226,2)
(1636,1155,2)
(651,1677,2)
(519,137,2)
(582,1560,2)
(1690,1732,2)
(761,92,2)
(1047,1277,2)
(843,831,2)
(1310,137,2)
(1048,940,2)
(1555,1277,2)
(1781,940,2)
(1349,87,2)
(1660,1587,2)
(1527,870,2)
(665,1766,2)
(1461,940,2)
(1755,1172,2)
(381,18,2)
(1069,1359,2)
(986,1339,2)
(192,1049,2)
(1680,135,2)
(361,1326,2)
(362,1653,2)
(497,1560,2)
(260,1216,2)
(1689,529,2)
(361,788,2)
(1191,1766,2)
(706,1192,2)
(1308,1459,2)
(1660,367,2)
(1723,1333,2)
(1587,375,2)
(1564,1216,2)
(729,548,2)
(926,1677,2)
(1660,479,2)
(1429,73,2)
(144,1257,2)
(1702,940,2)
(1487,1521,2)
(583,1056,2)
(1574,1049,2)
(1711,1653,2)
(24,339,2)
(456,1677,2)
(1660,1723,2)
(741,375,2)
(767,1763,2)
(771,339,2)
(72,492,2)
(445,368,2)
(1535,949,2)
(1500,940,2)
(468,1677,2)
(155,1459,2)
(1197,1677,2)
(1804,1766,2)
(987,687,2)
(1487,18,2)
(782,819,2)
(1085,1653,2)
(1287,247,2)
(14,1257,2)
(1072,926,2)
(405,1766,2)
(1658,1560,2)
(394,1049,2)
(810,1056,2)
(207,940,2)
(381,1216,2)
(6,87,2)
(576,1056,2)
(953,1521,2)
(533,1257,2)
(1296,430,2)
(915,1759,2)
(1260,1759,2)
(1564,1766,2)
(1522,1763,2)
(953,73,2)
(433,1763,2)
(252,1056,2)
(1565,1653,2)
(1514,774,2)
(571,1231,2)
(660,1216,2)
(551,925,2)
(842,1677,2)
(14,18,2)
(1289,278,2)
(959,102,2)
(683,1653,2)
(381,247,2)
(1119,889,2)
(1105,1732,2)
(1558,1521,2)
(215,1677,2)
(317,307,2)
(826,1339,2)
(1457,1761,2)
(478,119,2)
(1555,940,2)
(1592,788,2)
(1368,870,2)
(1151,1677,2)
(1070,1056,2)
(1564,1763,2)
(101,1463,2)
(268,819,2)
(478,1804,2)
(381,788,2)
(49,1326,2)
(1102,329,2)
(959,889,2)
(137,1676,2)
(1290,191,2)
(910,1257,2)
(1502,819,2)
(1592,102,2)
(317,1172,2)
(1310,1359,2)
(1429,339,2)
(1056,1459,2)
(1615,889,2)
(181,940,2)
(1124,1763,2)
(717,1763,2)
(778,492,2)
(675,1313,2)
(1107,797,2)
(1756,819,2)
(119,1339,2)
(792,1677,2)
(1467,1653,2)
(1415,960,2)
(770,1339,2)
(1756,1313,2)
(1015,1653,2)
(1500,925,2)
(1689,339,2)
(1344,1759,2)
(1781,307,2)
(1218,1053,2)
(970,488,2)
(802,1257,2)
(1709,1653,2)
(1535,1277,2)
(18,1174,2)
(260,1499,2)
(1328,18,2)
(1055,1677,2)
(1480,368,2)
(492,430,2)
(130,1633,2)
(1792,366,2)
(156,1677,2)
(1288,1715,2)
(1709,1763,2)
(1592,18,2)
(796,1677,2)
(158,940,2)
(947,1359,2)
(776,1677,2)
(1558,889,2)
(890,137,2)
(281,1190,2)
(1344,998,2)
(830,1169,2)
(582,1245,2)
(1555,1766,2)
(398,1512,2)
(260,119,2)
(1415,278,2)
(1260,1192,2)
(1515,81,2)
(361,1206,2)
(1459,1172,2)
(1592,368,2)
(418,1759,2)
(1756,1521,2)
(1672,278,2)
(156,307,2)
(1671,819,2)
(1568,1524,2)
(1029,521,2)
(883,1677,2)
(505,92,2)
(1726,1277,2)
(1592,1257,2)
(1381,1677,2)
(1216,1029,2)
(792,870,2)
(1574,529,2)
(260,985,2)
(209,417,2)
(1264,417,2)
(727,1049,2)
(951,126,2)
(1450,940,2)
(215,548,2)
(191,733,2)
(869,1524,2)
(1753,1677,2)
(1564,1277,2)
(49,1359,2)
(1574,889,2)
(1665,1763,2)
(1310,889,2)
(810,960,2)
(675,135,2)
(1535,135,2)
(1330,1108,2)
(1322,329,2)
(501,1011,2)
(293,1350,2)
(877,1677,2)
(1313,447,2)
(533,548,2)
(172,940,2)
(617,889,2)
(906,1339,2)
(1415,529,2)
(1350,1432,2)
(726,102,2)
(61,307,2)
(32,81,2)
(579,1339,2)
(1665,1653,2)
(116,925,2)
(1181,1763,2)
(969,1339,2)
(1596,548,2)
(1260,102,2)
(1522,1257,2)
(1032,1257,2)
(959,278,2)
(31,1677,2)
(375,1474,2)
(1734,1677,2)
(771,1763,2)
(957,1155,2)
(976,245,2)
(1672,548,2)
(458,1339,2)
(1558,137,2)
(1707,1653,2)
(1119,1192,2)
(541,1677,2)
(100,889,2)
(388,1677,2)
(624,309,2)
(49,417,2)
(519,368,2)
(1739,245,2)
(1328,1521,2)
(483,842,2)
(1615,1049,2)
(647,1257,2)
(1615,1766,2)
(287,492,2)
(1782,925,2)
(1756,1326,2)
(890,1206,2)
(1564,1521,2)
(979,1216,2)
(1260,925,2)
(169,307,2)
(1118,1677,2)
(466,870,2)
(129,548,2)
(1080,135,2)
(1192,324,2)
(1525,705,2)
(583,889,2)
(460,1560,2)
(1722,417,2)
(1561,1718,2)
(251,924,2)
(1324,898,2)
(1487,1049,2)
(753,1258,2)
(1415,102,2)
(1165,1339,2)
(1554,417,2)
(1672,1766,2)
(239,484,2)
(949,960,2)
(1027,1715,2)
(1152,1763,2)
(1628,1732,2)
(260,889,2)
(855,1339,2)
(1155,1172,2)
(959,247,2)
(1555,1216,2)
(851,1705,2)
(1290,1653,2)
(129,1313,2)
(1262,1055,2)
(1421,1056,2)
(771,1206,2)
(1767,1264,2)
(1678,870,2)
(1119,1313,2)
(890,18,2)
(97,87,2)
(1037,1763,2)
(1615,925,2)
(1610,1653,2)
(222,548,2)
(1596,1257,2)
(782,1524,2)
(1535,1192,2)
(1558,819,2)
(1758,870,2)
(1011,1313,2)
(900,870,2)
(1444,805,2)
(499,245,2)
(1509,1677,2)
(222,1313,2)
(63,940,2)
(543,940,2)
(129,529,2)
(204,87,2)
(536,1677,2)
(1558,339,2)
(1625,81,2)
(77,1766,2)
(1814,940,2)
(722,1653,2)
(1806,81,2)
(195,548,2)
(433,1049,2)
(771,1056,2)
(7,805,2)
(1024,137,2)
(1726,81,2)
(1756,1192,2)
(900,940,2)
(1398,680,2)
(1597,1192,2)
(1542,870,2)
(481,940,2)
(944,1504,2)
(1499,1677,2)
(771,1277,2)
(1181,135,2)
(675,548,2)
(1254,87,2)
(916,913,2)
(1463,545,2)
(309,1324,2)
(1119,1206,2)
(1689,18,2)
(1674,137,2)
(1555,247,2)
(1145,92,2)
(914,819,2)
(175,1277,2)
(260,548,2)
(295,870,2)
(191,1677,2)
(1660,1086,2)
(1119,1277,2)
(227,1459,2)
(762,1257,2)
(1568,819,2)
(1414,1339,2)
(296,1759,2)
(1067,18,2)
(1574,1277,2)
(375,1313,2)
(1344,1056,2)
(1712,809,2)
(519,102,2)
(361,1524,2)
(959,135,2)
(260,1277,2)
(1603,1653,2)
(890,1359,2)
(332,1653,2)
(990,1610,2)
(1429,1192,2)
(361,18,2)
(49,73,2)
(727,529,2)
(107,1459,2)
(1564,18,2)
(1734,307,2)
(583,135,2)
(1487,278,2)
(958,65,2)
(362,1763,2)
(1356,1677,2)
(1587,556,2)
(556,375,2)
(1500,1216,2)
(201,1257,2)
(1119,137,2)
(782,1677,2)
(49,1206,2)
(1225,1560,2)
(175,1326,2)
(1234,940,2)
(237,1766,2)
(1562,1437,2)
(1530,998,2)
(1585,870,2)
(1415,1206,2)
(1016,307,2)
(414,940,2)
(964,1677,2)
(519,1524,2)
(1088,819,2)
(704,617,2)
(175,960,2)
(49,1524,2)
(881,1359,2)
(1535,1257,2)
(796,164,2)
(304,1339,2)
(787,1339,2)
(478,367,2)
(1621,164,2)
(1403,819,2)
(260,247,2)
(1365,940,2)
(123,1653,2)
(160,617,2)
(1306,1766,2)
(810,788,2)
(478,763,2)
(1640,1226,2)
(887,870,2)
(1116,1763,2)
(268,1049,2)
(104,1339,2)
(1478,484,2)
(546,1763,2)
(1181,102,2)
(447,278,2)
(872,940,2)
(655,940,2)
(1272,73,2)
(380,484,2)
(1262,1653,2)
(716,247,2)
(1500,1257,2)
(69,92,2)
(468,1339,2)
(463,1759,2)
(583,1257,2)
(1555,417,2)
(642,1076,2)
(47,1763,2)
(197,1763,2)
(1521,1350,2)
(1647,512,2)
(262,870,2)
(1656,798,2)
(148,1339,2)
(103,1050,2)
(1344,1763,2)
(1731,1056,2)
(1364,1763,2)
(1059,1653,2)
(1463,1489,2)
(1059,1677,2)
(1324,992,2)
(519,1226,2)
(959,1049,2)
(1310,1277,2)
(1555,18,2)
(1501,1677,2)
(1525,1677,2)
(1247,1732,2)
(260,146,2)
(1328,135,2)
(1608,92,2)
(1557,1226,2)
(354,18,2)
(1582,889,2)
(1500,1056,2)
(995,1653,2)
(1216,1313,2)
(1698,586,2)
(1620,1678,2)
(1555,368,2)
(1272,137,2)
(810,1766,2)
(1078,417,2)
(1022,92,2)
(1060,870,2)
(1181,788,2)
(69,832,2)
(545,1794,2)
(244,372,2)
(583,529,2)
(949,1524,2)
(949,1257,2)
(1395,307,2)
(1592,135,2)
(1735,1653,2)
(394,1521,2)
(771,819,2)
(1568,102,2)
(1443,1677,2)
(1429,417,2)
(1660,1666,2)
(274,1653,2)
(916,976,2)
(129,1216,2)
(573,1326,2)
(1394,1763,2)
(1508,870,2)
(221,1339,2)
(1630,870,2)
(1181,1521,2)
(1326,1560,2)
(1260,1339,2)
(1383,1339,2)
(1250,940,2)
(1272,339,2)
(15,153,2)
(914,548,2)
(1663,959,2)
(769,1257,2)
(583,819,2)
(782,247,2)
(1252,940,2)
(85,1214,2)
(1181,529,2)
(583,1524,2)
(1694,135,2)
(1788,1653,2)
(427,1792,2)
(260,1339,2)
(1432,1115,2)
(1564,135,2)
(626,929,2)
(345,940,2)
(381,73,2)
(898,137,2)
(1615,1192,2)
(931,19,2)
(199,1653,2)
(1503,1155,2)
(222,1763,2)
(1429,819,2)
(1171,61,2)
(1248,81,2)
(1150,1763,2)
(1561,1339,2)
(1719,245,2)
(49,137,2)
(1344,889,2)
(1500,18,2)
(433,137,2)
(583,18,2)
(1572,339,2)
(1661,18,2)
(1558,1763,2)
(1535,368,2)
(316,870,2)
(1345,1677,2)
(1429,1359,2)
(358,1560,2)
(150,1653,2)
(1568,1763,2)
(1040,1326,2)
(49,889,2)
(1753,102,2)
(1066,1257,2)
(1535,417,2)
(1558,788,2)
(1592,1056,2)
(1766,305,2)
(1034,1206,2)
(1592,73,2)
(131,609,2)
(2,1715,2)
(1109,199,2)
(1172,1513,2)
(1627,307,2)
(890,1763,2)
(394,247,2)
(564,1489,2)
(1304,278,2)
(1328,73,2)
(1558,925,2)
(234,1339,2)
(1293,889,2)
(361,368,2)
(155,1056,2)
(1592,960,2)
(1415,73,2)
(168,278,2)
(1489,1705,2)
(478,1455,2)
(1564,1192,2)
(1068,126,2)
(890,1313,2)
(528,137,2)
(273,307,2)
(498,1705,2)
(12,1653,2)
(98,1653,2)
(1119,1216,2)
(1119,960,2)
(1415,548,2)
(260,788,2)
(175,889,2)
(732,940,2)
(949,73,2)
(1119,278,2)
(1409,1359,2)
(147,1140,2)
(529,899,2)
(1564,368,2)
(1704,1339,2)
(1425,940,2)
(133,1677,2)
(916,1804,2)
(727,368,2)
(310,951,2)
(594,1339,2)
(440,960,2)
(438,1705,2)
(1429,960,2)
(388,137,2)
(1129,796,2)
(1419,627,2)
(1660,1207,2)
(1436,1690,2)
(376,627,2)
(1091,339,2)
(890,819,2)
(509,307,2)
(893,1277,2)
(4,106,2)
(1535,940,2)
(392,1257,2)
(995,1763,2)
(260,137,2)
(583,247,2)
(445,1277,2)
(1429,548,2)
(727,819,2)
(1660,1455,2)
(1771,1455,2)
(1764,1192,2)
(13,940,2)
(1744,1763,2)
(256,1766,2)
(614,1631,2)
(1615,1216,2)
(307,1339,2)
(403,548,2)
(222,135,2)
(1272,278,2)
(1564,1759,2)
(1688,788,2)
(693,1763,2)
(959,73,2)
(644,1339,2)
(1429,1313,2)
(1277,960,2)
(1627,1677,2)
(838,1763,2)
(600,1257,2)
(1474,1011,2)
(509,1677,2)
(1759,987,2)
(1564,1056,2)
(1512,1363,2)
(1693,972,2)
(1476,1459,2)
(1756,1339,2)
(1280,529,2)
(1080,1524,2)
(2,725,2)
(1509,1653,2)
(314,1799,2)
(47,135,2)
(426,788,2)
(226,960,2)
(1615,492,2)
(1727,548,2)
(387,1763,2)
(810,1277,2)
(175,247,2)
(129,1257,2)
(1409,1206,2)
(728,307,2)
(760,1118,2)
(333,1459,2)
(890,548,2)
(1266,92,2)
(1488,1339,2)
(831,1056,2)
(117,1339,2)
(260,1455,2)
(1310,1226,2)
(711,1339,2)
(1511,1155,2)
(823,488,2)
(286,1172,2)
(959,368,2)
(386,940,2)
(1207,1653,2)
(244,137,2)
(361,1277,2)
(175,278,2)
(36,1492,2)
(931,774,2)
(1260,960,2)
(809,1763,2)
(1259,1766,2)
(76,158,2)
(1615,1521,2)
(1584,245,2)
(964,307,2)
(1415,889,2)
(992,137,2)
(1526,1169,2)
(1504,117,2)
(1441,870,2)
(805,1140,2)
(949,529,2)
(926,307,2)
(668,627,2)
(1564,889,2)
(1287,819,2)
(1574,18,2)
(715,1257,2)
(1564,1226,2)
(722,1677,2)
(1689,135,2)
(1409,940,2)
(1052,1257,2)
(1058,368,2)
(782,135,2)
(1558,73,2)
(1689,247,2)
(416,1677,2)
(461,1763,2)
(1615,135,2)
(1756,278,2)
(1788,1763,2)
(1771,367,2)
(1500,1206,2)
(687,1785,2)
(206,940,2)
(236,1732,2)
(96,417,2)
(1568,548,2)
(429,1257,2)
(14,529,2)
(713,1660,2)
(193,1339,2)
(111,998,2)
(523,1339,2)
(821,1257,2)
(1766,998,2)
(1555,1206,2)
(1597,1456,2)
(884,1206,2)
(953,278,2)
(71,307,2)
(556,307,2)
(1431,1677,2)
(1344,1524,2)
(1485,959,2)
(1693,1339,2)
(1535,247,2)
(1735,1763,2)
(1307,940,2)
(1631,1766,2)
(533,1521,2)
(640,1216,2)
(901,1715,2)
(1299,940,2)
(707,940,2)
(1434,1339,2)
(1500,417,2)
(1659,1677,2)
(792,940,2)
(1682,1705,2)
(1555,548,2)
(723,417,2)
(1660,1653,2)
(329,1763,2)
(1310,247,2)
(967,1214,2)
(479,6,2)
(926,1257,2)
(1013,278,2)
(1058,1677,2)
(1756,137,2)
(1535,1049,2)
(1770,1155,2)
(1763,36,2)
(271,1155,2)
(609,1763,2)
(775,1339,2)
(223,819,2)
(946,1257,2)
(1130,476,2)
(142,1257,2)
(1404,1257,2)
(1810,1339,2)
(1364,683,2)
(260,492,2)
(1753,368,2)
(216,705,2)
(1558,18,2)
(1181,1524,2)
(511,565,2)
(1109,1763,2)
(215,1056,2)
(59,1653,2)
(339,417,2)
(1081,1759,2)
(390,1677,2)
(953,1326,2)
(1756,1216,2)
(612,1653,2)
(25,268,2)
(635,1339,2)
(1634,1056,2)
(810,1192,2)
(1615,998,2)
(810,135,2)
(1250,1677,2)
(771,1313,2)
(354,1661,2)
(749,752,2)
(79,870,2)
(367,1339,2)
(1500,492,2)
(663,1653,2)
(1558,1257,2)
(274,1763,2)
(849,1677,2)
(675,1524,2)
(1166,730,2)
(675,1049,2)
(1633,1812,2)
(1310,1216,2)
(1747,1745,2)
(627,1766,2)
(1596,18,2)
(1600,1056,2)
(8,247,2)
(175,1359,2)
(1585,307,2)
(925,573,2)
(932,940,2)
(1653,705,2)
(433,18,2)
(1564,278,2)
(639,1677,2)
(1484,1763,2)
(1095,386,2)
(1272,788,2)
(883,1653,2)
(805,1420,2)
(162,998,2)
(1689,1192,2)
(478,1499,2)
(478,986,2)
(1415,1056,2)
(1672,135,2)
(416,1339,2)
(433,1216,2)
(1193,1677,2)
(1500,1766,2)
(1382,484,2)
(829,870,2)
(872,307,2)
(1535,339,2)
(675,1257,2)
(511,1395,2)
(433,548,2)
(1260,998,2)
(445,307,2)
(267,1513,2)
(591,1339,2)
(810,102,2)
(41,92,2)
(394,1206,2)
(1672,102,2)
(1689,1277,2)
(1703,1489,2)
(924,101,2)
(186,1056,2)
(887,940,2)
(537,492,2)
(1590,599,2)
(1182,1257,2)
(1327,135,2)
(129,1277,2)
(712,73,2)
(14,1056,2)
(495,1759,2)
(810,492,2)
(911,1677,2)
(260,135,2)
(740,225,2)
(975,339,2)
(1593,1644,2)
(1615,102,2)
(1553,1633,2)
(1009,137,2)
(1380,940,2)
(1672,1049,2)
(57,1305,2)
(1003,368,2)
(58,1653,2)
(480,1810,2)
(959,18,2)
(1753,1192,2)
(260,1759,2)
(394,1056,2)
(1812,1677,2)
(675,925,2)
(270,1192,2)
(1051,35,2)
(728,1677,2)
(810,1313,2)
(1272,960,2)
(953,960,2)
(1097,1763,2)
(953,940,2)
(1278,1653,2)
(222,1049,2)
(1136,417,2)
(445,1216,2)
(1221,1489,2)
(146,484,2)
(1242,529,2)
(1381,1257,2)
(222,1257,2)
(571,1705,2)
(403,1524,2)
(713,1771,2)
(1614,375,2)
(1429,1521,2)
(143,1766,2)
(890,529,2)
(1543,1257,2)
(771,889,2)
(548,716,2)
(931,276,2)
(727,18,2)
(737,1653,2)
(1443,1214,2)
(1092,1679,2)
(1660,1262,2)
(1633,774,2)
(1626,1214,2)
(1310,278,2)
(566,1653,2)
(352,137,2)
(89,1653,2)
(845,1763,2)
(865,73,2)
(1756,492,2)
(1457,1560,2)
(1564,1257,2)
(1672,1192,2)
(1522,529,2)
(1030,1763,2)
(1491,870,2)
(51,92,2)
(301,1049,2)
(1646,484,2)
(1169,528,2)
(533,819,2)
(949,137,2)
(1492,1653,2)
(1298,1653,2)
(521,1677,2)
(1615,18,2)
(1592,1524,2)
(1763,1398,2)
(675,368,2)
(510,529,2)
(1231,1350,2)
(767,85,2)
(1399,1172,2)
(771,960,2)
(1130,1799,2)
(798,870,2)
(1522,102,2)
(1689,960,2)
(1061,1206,2)
(398,1056,2)
(1642,1339,2)
(1481,1339,2)
(1555,137,2)
(172,1677,2)
(109,870,2)
(1689,368,2)
(1643,1677,2)
(1724,106,2)
(545,1489,2)
(1456,759,2)
(407,1763,2)
(727,1192,2)
(1745,874,2)
(73,529,2)
(1108,1677,2)
(1496,1677,2)
(86,701,2)
(1592,1763,2)
(1686,940,2)
(782,548,2)
(810,925,2)
(962,1653,2)
(583,960,2)
(1366,1763,2)
(694,1056,2)
(1409,925,2)
(309,137,2)
(331,1653,2)
(433,247,2)
(1344,247,2)
(1053,1459,2)
(394,548,2)
(674,1766,2)
(1535,529,2)
(1272,102,2)
(533,247,2)
(1499,1339,2)
(687,430,2)
(268,1216,2)
(1525,307,2)
(784,1653,2)
(1345,1459,2)
(999,1459,2)
(516,1339,2)
(1475,1653,2)
(113,870,2)
(404,137,2)
(1348,1155,2)
(1344,73,2)
(914,135,2)
(953,1766,2)
(47,819,2)
(1615,1759,2)
(1415,1524,2)
(1260,135,2)
(546,1653,2)
(911,1653,2)
(959,1524,2)
(1037,1653,2)
(1756,73,2)
(16,1459,2)
(184,307,2)
(1344,339,2)
(1340,1339,2)
(1558,135,2)
(771,1524,2)
(1243,1763,2)
(1310,960,2)
(1799,768,2)
(675,1206,2)
(803,1326,2)
(1555,1521,2)
(126,387,2)
(332,1677,2)
(1527,940,2)
(1672,368,2)
(1321,940,2)
(1351,1763,2)
(293,1705,2)
(1122,184,2)
(268,135,2)
(703,1226,2)
(1761,1318,2)
(953,1763,2)
(953,417,2)
(19,774,2)
(382,1677,2)
(1071,1766,2)
(1756,1524,2)
(222,788,2)
(667,1141,2)
(746,870,2)
(920,1653,2)
(230,1653,2)
(377,1792,2)
(1592,1216,2)
(1034,1277,2)
(654,1705,2)
(427,73,2)
(106,1110,2)
(402,870,2)
(98,990,2)
(1543,819,2)
(1535,1521,2)
(1409,1257,2)
(1263,1677,2)
(1133,1677,2)
(1535,73,2)
(445,1056,2)
(589,627,2)
(453,1653,2)
(222,18,2)
(1344,1277,2)
(519,529,2)
(1771,1804,2)
(1678,1151,2)
(669,484,2)
(808,870,2)
(1181,1056,2)
(1604,1339,2)
(1202,135,2)
(971,1257,2)
(268,102,2)
(268,247,2)
(1574,1753,2)
(454,1763,2)
(1194,1107,2)
(1307,870,2)
(1500,137,2)
(189,92,2)
(260,583,2)
(1272,1226,2)
(14,1206,2)
(222,1277,2)
(87,1257,2)
(533,1049,2)
(257,889,2)
(478,1501,2)
(1227,1759,2)
(222,73,2)
(1500,960,2)
(1630,1677,2)
(163,1359,2)
(851,1801,2)
(361,278,2)
(1267,1560,2)
(870,1766,2)
(1555,1313,2)
(768,1513,2)
(1756,417,2)
(580,73,2)
(1141,1257,2)
(1562,1541,2)
(1551,889,2)
(1448,1339,2)
(1218,1459,2)
(260,1314,2)
(890,135,2)
(1574,1206,2)
(583,1677,2)
(625,1172,2)
(1181,548,2)
(38,1459,2)
(560,1653,2)
(1158,1339,2)
(1213,1094,2)
(1272,819,2)
(1163,1763,2)
(445,1192,2)
(1078,1498,2)
(1613,1056,2)
(519,1216,2)
(508,456,2)
(1560,964,2)
(1672,137,2)
(1531,1763,2)
(810,368,2)
(1213,1218,2)
(1260,492,2)
(797,2,2)
(1310,1206,2)
(890,1524,2)
(727,381,2)
(750,1285,2)
(1339,1792,2)
(519,1766,2)
(949,1192,2)
(1069,1560,2)
(652,1489,2)
(1287,1763,2)
(1738,92,2)
(49,368,2)
(1328,102,2)
(1522,247,2)
(705,1677,2)
(361,1763,2)
(243,87,2)
(1615,1277,2)
(164,130,2)
(1375,1226,2)
(1670,1653,2)
(107,1056,2)
(1409,137,2)
(49,102,2)
(1754,1313,2)
(222,278,2)
(1592,1192,2)
(129,102,2)
(643,940,2)
(1487,1206,2)
(49,529,2)
(57,1437,2)
(771,529,2)
(949,1056,2)
(1260,1257,2)
(356,1206,2)
(89,1763,2)
(1592,1792,2)
(305,574,2)
(1363,1677,2)
(120,870,2)
(381,368,2)
(1310,492,2)
(64,774,2)
(1691,1763,2)
(494,1348,2)
(289,998,2)
(260,1804,2)
(268,1257,2)
(730,639,2)
(471,940,2)
(175,18,2)
(855,1677,2)
(1535,788,2)
(435,1560,2)
(1352,1766,2)
(1320,529,2)
(1212,1257,2)
(1303,1763,2)
(361,1766,2)
(743,164,2)
(1344,135,2)
(1123,1339,2)
(1771,1501,2)
(1681,1653,2)
(1130,933,2)
(854,92,2)
(1333,307,2)
(942,1524,2)
(1328,788,2)
(1042,1277,2)
(1357,87,2)
(1075,1313,2)
(1262,1763,2)
(1116,1653,2)
(1718,1339,2)
(1072,1257,2)
(1099,73,2)
(1328,1524,2)
(1083,307,2)
(810,1206,2)
(751,1705,2)
(1592,548,2)
(1310,1763,2)
(890,1192,2)
(218,1459,2)
(949,1049,2)
(519,1277,2)
(1405,276,2)
(423,1653,2)
(780,137,2)
(361,1216,2)
(1148,1056,2)
(1045,870,2)
(953,247,2)
(14,247,2)
(1487,1277,2)
(1765,870,2)
(1558,417,2)
(479,87,2)
(1592,1313,2)
(1771,689,2)
(1756,940,2)
(953,1339,2)
(1753,1216,2)
(439,1409,2)
(554,1653,2)
(1500,548,2)
(884,1263,2)
(990,1653,2)
(268,1277,2)
(66,1339,2)
(1748,1763,2)
(30,838,2)
(938,848,2)
(675,788,2)
(1550,1705,2)
(1564,548,2)
(1491,1677,2)
(382,1763,2)
(385,1313,2)
(1197,1339,2)
(1020,56,2)
(361,1313,2)
(924,1489,2)
(612,1763,2)
(629,1339,2)
(675,1192,2)
(1351,1653,2)
(1341,92,2)
(1290,1763,2)
(1605,1216,2)
(833,627,2)
(1409,1313,2)
(1242,134,2)
(1577,80,2)
(1055,1653,2)
(890,1521,2)
(1809,1653,2)
(472,1427,2)
(1644,307,2)
(1558,1049,2)
(1615,1326,2)
(1555,889,2)
(14,819,2)
(1399,1513,2)
(1672,339,2)
(1756,247,2)
(717,1653,2)
(870,1306,2)
(1273,1206,2)
(399,805,2)
(519,18,2)
(1763,391,2)
(220,1367,2)
(503,727,2)
(215,1521,2)
(1187,1732,2)
(814,1715,2)
(1415,247,2)
(1185,1313,2)
(433,135,2)
(1420,1140,2)
(1170,307,2)
(1261,92,2)
(20,1763,2)
(246,1192,2)
(949,548,2)
(419,339,2)
(141,1759,2)
(146,380,2)
(903,1192,2)
(412,870,2)
(1574,278,2)
(1574,247,2)
(33,627,2)
(71,1677,2)
(661,1107,2)
(562,1653,2)
(1672,1056,2)
(583,1359,2)
(1543,247,2)
(763,1677,2)
(260,1192,2)
(727,102,2)
(1107,1715,2)
(608,1513,2)
(102,135,2)
(541,998,2)
(97,1677,2)
(215,135,2)
(727,960,2)
(1319,310,2)
(381,1277,2)
(1794,1799,2)
(739,1766,2)
(531,1056,2)
(1487,1763,2)
(799,1653,2)
(1356,1025,2)
(1813,339,2)
(517,838,2)
(916,1455,2)
(949,925,2)
(525,1459,2)
(1590,628,2)
(264,1690,2)
(801,1653,2)
(1409,1192,2)
(476,1677,2)
(1756,1257,2)
(260,278,2)
(837,1653,2)
(1006,1107,2)
(329,1653,2)
(916,1501,2)
(1224,1339,2)
(982,102,2)
(488,373,2)
(1094,1459,2)
(445,135,2)
(657,278,2)
(1718,804,2)
(229,87,2)
(305,998,2)
(1596,81,2)
(1188,1763,2)
(949,1521,2)
(297,417,2)
(890,1257,2)
(1507,1339,2)
(1349,307,2)
(1198,1339,2)
(1686,870,2)
(533,1763,2)
(217,1169,2)
(184,870,2)
(1778,1653,2)
(762,1443,2)
(222,1524,2)
(390,484,2)
(343,940,2)
(260,529,2)
(1086,390,2)
(470,960,2)
(1119,1257,2)
(1076,1033,2)
(266,1715,2)
(704,1677,2)
(989,137,2)
(1543,548,2)
(1310,417,2)
(1558,368,2)
(785,1339,2)
(268,368,2)
(781,687,2)
(1753,1277,2)
(1519,302,2)
(1630,307,2)
(937,870,2)
(1794,1489,2)
(1409,417,2)
(1560,687,2)
(59,320,2)
(1533,1763,2)
(1409,1326,2)
(675,1359,2)
(1672,925,2)
(1344,102,2)
(1558,102,2)
(697,1705,2)
(1260,18,2)
(1328,247,2)
(391,1627,2)
(260,73,2)
(771,278,2)
(260,1666,2)
(1577,1339,2)
(835,1763,2)
(197,1653,2)
(403,102,2)
(800,1763,2)
(268,1192,2)
(1093,137,2)
(1429,278,2)
(1522,1521,2)
(14,1521,2)
(1692,1653,2)
(1505,1206,2)
(752,427,2)
(1287,1524,2)
(557,1524,2)
(1542,940,2)
(1119,1521,2)
(1689,137,2)
(378,889,2)
(1558,278,2)
(1564,925,2)
(946,1677,2)
(1034,1257,2)
(175,339,2)
(1409,788,2)
(1615,1763,2)
(1487,1524,2)
(247,869,2)
(949,307,2)
(394,1257,2)
(382,1653,2)
(1409,492,2)
(1409,18,2)
(727,1313,2)
(335,819,2)
(497,1359,2)
(172,870,2)
(92,81,2)
(1260,1049,2)
(519,998,2)
(1522,548,2)
(953,137,2)
(500,1459,2)
(1736,940,2)
(58,1763,2)
(968,375,2)
(1574,137,2)
(14,788,2)
(1437,1653,2)
(1409,247,2)
(810,529,2)
(1622,259,2)
(222,368,2)
(1574,368,2)
(260,1056,2)
(49,1313,2)
(1427,1677,2)
(152,1732,2)
(810,1226,2)
(1787,1521,2)
(1196,1763,2)
(177,1763,2)
(1771,976,2)
(1558,1056,2)
(210,278,2)
(1170,1763,2)
(1773,1226,2)
(475,1677,2)
(1409,1763,2)
(1741,1653,2)
(424,1653,2)
(820,889,2)
(279,998,2)
(1200,1653,2)
(445,889,2)
(260,367,2)
(361,247,2)
(186,478,2)
(1192,137,2)
(260,998,2)
(633,940,2)
(949,417,2)
(1771,31,2)
(338,1766,2)
(1117,417,2)
(890,940,2)
(95,1339,2)
(953,339,2)
(1181,1206,2)
(1749,1017,2)
(953,925,2)
(1361,805,2)
(1535,960,2)
(482,1653,2)
(1543,1524,2)
(1564,417,2)
(1615,278,2)
(1660,763,2)
(1279,617,2)
(1472,1763,2)
(627,1149,2)
(1220,805,2)
(1286,1056,2)
(1753,889,2)
(386,1630,2)
(1558,1277,2)
(1792,1226,2)
(222,1056,2)
(1272,1257,2)
(804,1339,2)
(1793,1339,2)
(129,1192,2)
(260,1587,2)
(866,1732,2)
(1491,307,2)
(476,1705,2)
(583,1216,2)
(1100,1763,2)
(1026,819,2)
(976,1176,2)
(1124,18,2)
(1479,1763,2)
(1035,1763,2)
(20,1653,2)
(190,1766,2)
(175,925,2)
(683,1569,2)
(1753,1524,2)
(1592,1206,2)
(1660,31,2)
(745,1459,2)
(153,1038,2)
(1269,18,2)
(1062,1339,2)
(138,1521,2)
(1363,1459,2)
(298,245,2)
(394,889,2)
(1231,1799,2)
(491,468,2)
(675,102,2)
(1328,819,2)
(949,1206,2)
(921,1732,2)
(1233,940,2)
(1506,1257,2)
(489,1257,2)
(1344,1359,2)
(1775,1339,2)
(411,513,2)
(922,1107,2)
(625,788,2)
(1487,247,2)
(1736,870,2)
(1333,1677,2)
(679,1459,2)
(1358,940,2)
(1558,247,2)
(1019,1677,2)
(798,1733,2)
(1555,788,2)
(334,368,2)
(1522,18,2)
(1437,1763,2)
(1260,278,2)
(1065,1216,2)
(677,1326,2)
(445,960,2)
(533,18,2)
(18,1257,2)
(260,925,2)
(737,1677,2)
(1272,18,2)
(1415,1359,2)
(47,102,2)
(1552,1763,2)
(420,278,2)
(214,974,2)
(1130,1350,2)
(1034,819,2)
(1146,225,2)
(1096,1339,2)
(394,102,2)
(1176,245,2)
(1130,1682,2)
(1056,1512,2)
(1291,137,2)
(190,1734,2)
(1377,870,2)
(1402,245,2)
(616,940,2)
(561,135,2)
(435,1457,2)
(293,1799,2)
(1619,135,2)
(268,788,2)
(1780,1459,2)
(692,809,2)
(899,1521,2)
(1260,1521,2)
(1745,1732,2)
(519,819,2)
(1602,1766,2)
(1558,940,2)
(664,492,2)
(1574,1257,2)
(49,819,2)
(1469,924,2)
(1495,492,2)
(283,492,2)
(241,388,2)
(999,1056,2)
(1429,1049,2)
(1776,126,2)
(773,1206,2)
(511,81,2)
(771,925,2)
(1639,339,2)
(971,1135,2)
(0,417,2)
(1592,1521,2)
(1622,1653,2)
(628,1100,2)
(897,1339,2)
(1459,271,2)
(408,1513,2)
(1366,1622,2)
(849,1056,2)
(361,889,2)
(101,1489,2)
(75,529,2)
(727,1521,2)
(1814,870,2)
(1431,725,2)
(1615,548,2)
(1330,1339,2)
(1344,368,2)
(604,870,2)
(533,102,2)
(771,73,2)
(675,1326,2)
(1711,1763,2)
(127,1155,2)
(649,1763,2)
(1751,1763,2)
(121,1633,2)
(1660,1314,2)
(1035,1677,2)
(471,808,2)
(1476,1002,2)
(1762,870,2)
(522,1763,2)
(462,1653,2)
(794,1653,2)
(772,809,2)
(1609,1326,2)
(588,870,2)
(430,389,2)
(433,1313,2)
(456,870,2)
(49,1216,2)
(1119,529,2)
(1095,870,2)
(1427,1214,2)
(409,940,2)
(864,1339,2)
(676,137,2)
(1473,870,2)
(1720,417,2)
(1366,1653,2)
(519,1257,2)
(260,1763,2)
(357,1277,2)
(1543,135,2)
(1659,1653,2)
(1233,870,2)
(231,375,2)
(1753,73,2)
(528,1281,2)
(680,307,2)
(519,492,2)
(299,1715,2)
(1532,375,2)
(722,1763,2)
(260,102,2)
(1625,960,2)
(410,1339,2)
(953,368,2)
(740,1350,2)
(151,788,2)
(445,1206,2)
(215,18,2)
(1117,307,2)
(774,258,2)
(276,1653,2)
(827,1521,2)
(67,1560,2)
(1564,960,2)
(365,1677,2)
(450,1112,2)
(1521,1513,2)
(1715,70,2)
(459,1140,2)
(1770,475,2)
(1660,146,2)
(884,1677,2)
(1424,805,2)
(1751,1509,2)
(49,1521,2)
(825,1524,2)
(1789,417,2)
(1535,1216,2)
(1689,1524,2)
(1309,838,2)
(445,1677,2)
(699,819,2)
(1184,1766,2)
(1432,1513,2)
(1496,1339,2)
(1380,870,2)
(69,1677,2)
(1260,940,2)
(809,1653,2)
(929,329,2)
(1421,1345,2)
(1508,940,2)
(1332,1766,2)
(375,1011,2)
(1515,960,2)
(600,1066,2)
(763,1560,2)
(1564,1326,2)
(312,329,2)
(1627,1653,2)
(222,137,2)
(259,1653,2)
(1284,484,2)
(1355,940,2)
(1272,1326,2)
(1080,548,2)
(786,137,2)
(1626,339,2)
(949,102,2)
(1809,1763,2)
(1328,1763,2)
(890,1049,2)
(953,1206,2)
(225,1763,2)
(1415,1313,2)
(1574,135,2)
(1429,1524,2)
(1558,529,2)
(578,1763,2)
(810,278,2)
(1344,278,2)
(433,368,2)
(445,1524,2)
(702,1766,2)
(1643,1056,2)
(604,940,2)
(1021,548,2)
(1115,1513,2)
(648,1216,2)
(446,1653,2)
(1176,1677,2)
(1558,1206,2)
(512,1339,2)
(129,889,2)
(1687,548,2)
(1138,1745,2)
(1272,1339,2)
(278,339,2)
(1756,339,2)
(985,1677,2)
(260,688,2)
(433,819,2)
(559,492,2)
(701,1677,2)
(1213,1459,2)
(771,1257,2)
(1762,940,2)
(166,940,2)
(371,940,2)
(159,1107,2)
(847,1155,2)
(478,1459,2)
(953,1056,2)
(1162,247,2)
(1504,1677,2)
(9,1766,2)
(49,18,2)
(1260,1763,2)
(1574,102,2)
(1395,1677,2)
(1241,815,2)
(1595,1339,2)
(1270,1763,2)
(684,940,2)
(953,135,2)
(259,1763,2)
(317,1677,2)
(1272,368,2)
(966,102,2)
(700,1339,2)
(403,1763,2)
(1436,411,2)
(1076,819,2)
(533,73,2)
(1300,1339,2)
(1596,102,2)
(1283,1759,2)
(1415,18,2)
(1492,307,2)
(49,1049,2)
(1660,760,2)
(1181,819,2)
(260,819,2)
(1380,120,2)
(1615,339,2)
(262,940,2)
(1310,940,2)
(583,1326,2)
(810,1359,2)
(1015,1763,2)
(1172,1350,2)
(1558,548,2)
(192,1168,2)
(967,1653,2)
(1564,73,2)
(320,1214,2)
(512,1677,2)
(890,788,2)
(235,971,2)
(1225,377,2)
(1487,1216,2)
(128,998,2)
(102,939,2)
(1007,1409,2)
(1574,1216,2)
(1421,1459,2)
(1672,1359,2)
(675,278,2)
(260,18,2)
(183,18,2)
(1179,1257,2)
(1119,788,2)
(1143,1705,2)
(1786,1257,2)
(1139,1766,2)
(748,627,2)
(377,1560,2)
(1344,1226,2)
(792,307,2)
(1672,1326,2)
(1427,1653,2)
(1785,430,2)
(583,548,2)
(169,1677,2)
(464,137,2)
(1632,1653,2)
(1272,247,2)
(451,368,2)
(1305,1437,2)
(1487,102,2)
(788,1459,2)
(1206,1049,2)
(953,788,2)
(268,1359,2)
(314,1705,2)
(1462,245,2)
(1716,1056,2)
(986,514,2)
(47,1524,2)
(1118,307,2)
(1018,1313,2)
(422,548,2)
(1522,135,2)
(777,484,2)
(268,278,2)
(1108,1339,2)
(574,1677,2)
(886,18,2)
(1119,1049,2)
(212,1715,2)
(583,940,2)
(1005,1524,2)
(1131,1763,2)
(129,1049,2)
(1265,1339,2)
(1657,102,2)
(1555,1049,2)
(959,819,2)
(343,870,2)
(1549,1339,2)
(1659,554,2)
(774,276,2)
(675,73,2)
(1661,1571,2)
(673,484,2)
(1260,1206,2)
(215,1524,2)
(1675,1049,2)
(290,1766,2)
(175,1049,2)
(478,1587,2)
(1119,368,2)
(1080,819,2)
(1086,484,2)
(1529,484,2)
(1309,1393,2)
(890,1056,2)
(1672,889,2)
(175,529,2)
(1260,339,2)
(1714,1763,2)
(1615,137,2)
(675,1521,2)
(1467,1677,2)
(618,137,2)
(380,1677,2)
(1379,889,2)
(1411,417,2)
(1160,1763,2)
(1299,870,2)
(682,492,2)
(1298,1763,2)
(215,1257,2)
(129,368,2)
(1110,1677,2)
(1085,1763,2)
(1328,529,2)
(1567,1705,2)
(1028,1560,2)
(1733,1677,2)
(524,484,2)
(681,1763,2)
(1153,1763,2)
(260,1326,2)
(1757,1339,2)
(314,1350,2)
(1535,1524,2)
(1263,1206,2)
(797,1715,2)
(1051,938,2)
(394,1277,2)
(940,511,2)
(1555,73,2)
(877,1763,2)
(175,788,2)
(425,488,2)
(610,1326,2)
(1013,944,2)
(1660,399,2)
(1409,339,2)
(803,677,2)
(62,1459,2)
(1084,1192,2)
(810,73,2)
(649,1653,2)
(908,1766,2)
(1756,1226,2)
(1433,92,2)
(94,1560,2)
(478,1666,2)
(445,925,2)
(1731,1459,2)
(1157,1653,2)
(1338,565,2)
(1142,92,2)
(560,1763,2)
(85,1763,2)
(1180,126,2)
(219,1677,2)
(65,1035,2)
(1394,1303,2)
(175,1257,2)
(1415,1049,2)
(519,1313,2)
(891,1653,2)
(1521,788,2)
(798,940,2)
(815,1339,2)
(1682,851,2)
(1429,137,2)
(1535,1766,2)
(350,1524,2)
(433,1192,2)
(1544,1766,2)
(947,1560,2)
(1310,1192,2)
(1359,1772,2)
(675,1056,2)
(22,1339,2)
(1578,1677,2)
(555,1056,2)
(993,1653,2)
(689,492,2)
(381,137,2)
(750,339,2)
(1455,92,2)
(1596,1056,2)
(771,1049,2)
(606,1677,2)
(691,960,2)
(1048,870,2)
(577,1129,2)
(394,278,2)
(1344,1313,2)
(704,1214,2)
(1492,1677,2)
(958,1653,2)
(1672,788,2)
(1272,1763,2)
(1732,1526,2)
(1377,940,2)
(707,870,2)
(260,913,2)
(1522,1524,2)
(576,1459,2)
(577,1633,2)
(76,940,2)
(430,940,2)
(838,931,2)
(1615,1206,2)
(959,529,2)
(1695,1313,2)
(1698,998,2)
(401,1513,2)
(1205,1677,2)
(1034,247,2)
(810,548,2)
(1272,1192,2)
(914,102,2)
(1409,1521,2)
(1090,1677,2)
(1409,998,2)
(129,1056,2)
(626,329,2)
(1214,750,2)
(381,1192,2)
(1543,18,2)
(1810,1452,2)
(950,137,2)
(1124,135,2)
(1528,1763,2)
(1777,998,2)
(1631,169,2)
(1689,1206,2)
(1689,278,2)
(807,106,2)
(1355,870,2)
(487,1339,2)
(868,960,2)
(381,529,2)
(1181,1257,2)
(361,73,2)
(421,1653,2)
(1622,1763,2)
(959,1521,2)
(844,940,2)
(184,1677,2)
(526,1192,2)
(602,1339,2)
(650,925,2)
(519,940,2)
(952,1715,2)
(771,417,2)
(268,529,2)
(277,627,2)
(794,1763,2)
(476,117,2)
(223,1763,2)
(1555,529,2)
(1310,1524,2)
(361,417,2)
(710,1745,2)
(1535,819,2)
(628,1763,2)
(1344,1766,2)
(175,1766,2)
(444,1653,2)
(1206,301,2)
(1234,870,2)
(1364,1653,2)
(1753,18,2)
(1689,819,2)
(934,1705,2)
(1160,1677,2)
(1672,73,2)
(1672,18,2)
(1195,1206,2)
(1415,1216,2)
(1756,889,2)
(394,73,2)
(1252,870,2)
(1016,1653,2)
(97,1214,2)
(264,1009,2)
(1746,278,2)
(368,889,2)
(1344,1326,2)
(771,368,2)
(1031,940,2)
(436,126,2)
(1034,368,2)
(1574,73,2)
(1137,417,2)
(583,1277,2)
(1055,1763,2)
(260,1524,2)
(1109,1653,2)
(1203,870,2)
(1559,1763,2)
(738,924,2)
(1310,788,2)
(1415,135,2)
(381,135,2)
(394,1313,2)
(1672,1206,2)
(759,1192,2)
(1753,1521,2)
(445,1326,2)
(646,1192,2)
(529,1521,2)
(129,137,2)
(1590,1653,2)
(1626,1677,2)
(321,1763,2)
(217,830,2)
(944,278,2)
(1641,1524,2)
(877,1653,2)
(1705,1521,2)
(145,375,2)
(1219,1763,2)
(482,1763,2)
(1465,993,2)
(255,959,2)
(675,339,2)
(465,307,2)
(1435,1359,2)
(1080,1763,2)
(1353,1313,2)
(244,1189,2)
(412,940,2)
(1,889,2)
(332,1735,2)
(533,1792,2)
(1288,725,2)
(890,73,2)
(1800,1339,2)
(1568,135,2)
(1512,1459,2)
(1521,1172,2)
(808,940,2)
(1763,1653,2)
(349,1560,2)
(381,960,2)
(817,278,2)
(1328,81,2)
(1535,278,2)
(54,1653,2)
(503,959,2)
(1535,1206,2)
(366,1226,2)
(1344,1521,2)
(1119,73,2)
(1167,1677,2)
(268,1206,2)
(395,809,2)
(1429,1326,2)
(156,1257,2)
(381,1521,2)
(959,788,2)
(1756,960,2)
(1447,1653,2)
(732,870,2)
(1272,417,2)
(628,1653,2)
(1328,1056,2)
(266,1253,2)
(1087,1339,2)
(1160,1653,2)
(583,339,2)
(1344,1257,2)
(175,1521,2)
(361,1192,2)
(222,102,2)
(1772,1560,2)
(1163,1653,2)
(1034,788,2)
(1407,870,2)
(1121,1257,2)
(1611,1513,2)
(1260,1226,2)
(65,1763,2)
(1463,1221,2)
(579,1205,2)
(1760,1257,2)
(49,1192,2)
(1314,339,2)
(1205,1339,2)
(675,940,2)
(35,87,2)
(369,1653,2)
(519,1206,2)
(810,940,2)
(1598,1339,2)
(542,940,2)
(472,1653,2)
(1615,1257,2)
(1150,1653,2)
(1446,1072,2)
(215,819,2)
(472,1763,2)
(1429,529,2)
(119,1677,2)
(730,1339,2)
(1274,1705,2)
(1517,1653,2)
(1328,548,2)
(1638,1326,2)
(478,913,2)
(1682,1312,2)
(1632,1763,2)
(1500,1524,2)
(1564,819,2)
(1043,998,2)
(1454,687,2)
(1538,1339,2)
(223,548,2)
(1555,102,2)
(260,1501,2)
(1555,135,2)
(19,577,2)
(259,1677,2)
(1811,137,2)
(74,1459,2)
(675,529,2)
(1728,870,2)
(35,1743,2)
(13,870,2)
(122,247,2)
(304,606,2)
(1272,1049,2)
(894,87,2)
(987,1677,2)
(260,976,2)
(1500,102,2)
(771,135,2)
(1615,1339,2)
(859,774,2)
(1574,339,2)
(454,1653,2)
(810,1759,2)
(394,137,2)
(1531,1653,2)
(248,1653,2)
(1287,548,2)
(471,870,2)
(228,1525,2)
(1524,102,2)
(160,704,2)
(1477,92,2)
(663,1763,2)
(1044,1339,2)
(1415,819,2)
(1756,1763,2)
(949,18,2)
(1423,960,2)
(1455,1677,2)
(776,672,2)
(361,1056,2)
(1669,137,2)
(572,1653,2)
(49,925,2)
(1310,998,2)
(480,1339,2)
(1574,819,2)
(93,92,2)
(914,247,2)
(1207,1763,2)
(1310,73,2)
(914,1763,2)
(339,1767,2)
(1689,1216,2)
(260,479,2)
(1494,940,2)
(177,1653,2)
(126,1763,2)
(808,1083,2)
(1677,1248,2)
(763,1359,2)
(373,1799,2)
(1350,1513,2)
(994,548,2)
(1401,924,2)
(625,1513,2)
(176,1705,2)
(473,1277,2)
(810,1326,2)
(1409,1524,2)
(810,339,2)
(890,368,2)
(1756,1766,2)
(1240,1653,2)
(895,1226,2)
(42,1677,2)
(1519,1257,2)
(11,492,2)
(1010,1489,2)
(1816,1339,2)
(1415,339,2)
(90,1653,2)
(1272,1524,2)
(956,870,2)
(1154,925,2)
(49,548,2)
(1750,375,2)
(578,1653,2)
(1513,1195,2)
(478,1314,2)
(1034,960,2)
(1124,247,2)
(1804,1677,2)
(49,1277,2)
(771,1521,2)
(394,368,2)
(1761,1560,2)
(1310,1257,2)
(1151,870,2)
(519,1192,2)
(1615,368,2)
(916,1414,2)
(1765,940,2)
(992,1291,2)
(3,959,2)
(698,805,2)
(1558,1326,2)
(1439,137,2)
(365,1766,2)
(742,137,2)
(394,529,2)
(381,1206,2)
(789,1489,2)
(36,1653,2)
(932,870,2)
(1344,1206,2)
(1257,749,2)
(779,960,2)
(1596,819,2)
(272,245,2)
(1548,87,2)
(812,126,2)
(99,1049,2)
(1679,329,2)
(1272,1206,2)
(1799,1513,2)
(1596,788,2)
(361,925,2)
(394,819,2)
(1471,1257,2)
(490,368,2)
(191,1653,2)
(1260,1216,2)
(1524,219,2)
(1376,1339,2)
(943,1155,2)
(819,18,2)
(1112,889,2)
(1429,1056,2)
(45,1513,2)
(937,940,2)
(268,1763,2)
(1429,1206,2)
(990,1763,2)
(1771,119,2)
(1592,137,2)
(50,809,2)
(1124,73,2)
(1409,548,2)
(569,1339,2)
(689,1677,2)
(481,870,2)
(310,126,2)
(928,1513,2)
(1270,1653,2)
(42,870,2)
(1598,1330,2)
(380,307,2)
(1465,1763,2)
(129,278,2)
(1660,985,2)
(1074,106,2)
(574,998,2)
(615,1313,2)
(91,1459,2)
(978,1653,2)
(307,220,2)
(1368,940,2)
(1500,1049,2)
(675,417,2)
(117,1792,2)
(175,102,2)
(478,976,2)
(759,1677,2)
(1364,522,2)
(829,940,2)
(49,1763,2)
(519,1359,2)
(581,375,2)
(1564,940,2)
(1725,1759,2)
(1558,1313,2)
(1592,1049,2)
(993,1763,2)
(433,727,2)
(158,870,2)
(428,96,2)
(838,276,2)
(1487,1257,2)
(1558,1192,2)
(361,1049,2)
(186,1459,2)
(1500,1277,2)
(1786,1677,2)
(47,548,2)
(801,1763,2)
(1248,92,2)
(515,1732,2)
(1522,788,2)
(1291,1690,2)
(445,548,2)
(165,1521,2)
(1558,960,2)
(1034,1056,2)
(696,339,2)
(675,1766,2)
(71,137,2)
(271,1503,2)
(1724,133,2)
(1415,1192,2)
(871,137,2)
(1119,339,2)
(1691,1653,2)
(395,1645,2)
(783,1112,2)
(294,1705,2)
(1635,1206,2)
(519,135,2)
(1578,1513,2)
(1641,1763,2)
(644,187,2)
(1666,152,2)
(260,1049,2)
(1522,1056,2)
(806,1339,2)
(583,788,2)
(881,1560,2)
(1260,73,2)
(1783,1049,2)
(1243,1653,2)
(19,1633,2)
(320,1653,2)
(760,627,2)
(1660,1804,2)
(1498,417,2)
(841,1169,2)
(1344,1216,2)
(1487,1056,2)
(1169,137,2)
(172,307,2)
(465,1677,2)
(1641,102,2)
(1707,1763,2)
(1409,889,2)
(175,417,2)
(214,1339,2)
(598,1550,2)
(1119,135,2)
(1012,484,2)
(321,247,2)
(1034,529,2)
(1272,1359,2)
(936,1763,2)
(945,1766,2)
(1303,737,2)
(740,1799,2)
(519,278,2)
(39,1653,2)
(1596,247,2)
(443,1049,2)
(1119,1056,2)
(1203,940,2)
(1749,940,2)
(1292,870,2)
(1050,307,2)
(186,999,2)
(1592,247,2)
(260,417,2)
(73,1242,2)
(1409,1049,2)
(1574,1521,2)
(1014,1653,2)
(765,1732,2)
(599,1653,2)
(1316,998,2)
(978,1763,2)
(721,529,2)
(1617,18,2)
(1740,339,2)
(554,1763,2)
(1596,1521,2)
(6,307,2)
(1555,278,2)
(844,870,2)
(1004,1763,2)
(1445,73,2)
(361,339,2)
(1732,137,2)
(1119,247,2)
(1119,102,2)
(1345,1056,2)
(522,1653,2)
(967,1677,2)
(258,307,2)
(1490,1339,2)
(1164,92,2)
(1753,960,2)
(1319,126,2)
(949,1216,2)
(140,1257,2)
(222,1192,2)
(1781,870,2)
(949,247,2)
(1369,1257,2)
(964,687,2)
(268,548,2)
(98,1763,2)
(1685,1513,2)
(1034,73,2)
(445,102,2)
(1771,986,2)
(1428,1677,2)
(224,1339,2)
(1161,1766,2)
(959,1257,2)
(1343,1763,2)
(1397,1759,2)
(1344,1049,2)
(159,1431,2)
(260,986,2)
(1310,1521,2)
(874,1732,2)
(1461,870,2)
(478,985,2)
(1753,247,2)
(1539,137,2)
(372,1669,2)
(988,1459,2)
(1784,135,2)
(1470,940,2)
(433,529,2)
(1339,1226,2)
(393,1653,2)
(1574,788,2)
(1500,1326,2)
(1546,1339,2)
(344,1437,2)
(771,1216,2)
(727,1257,2)
(1596,1763,2)
(972,416,2)
(889,270,2)
(1500,339,2)
(1429,368,2)
(1615,1524,2)
(478,536,2)
(797,266,2)
(1372,617,2)
(810,1216,2)
(361,529,2)
(181,870,2)
(701,1653,2)
(715,1786,2)
(1735,1677,2)
(1500,788,2)
(1241,1339,2)
(1035,1653,2)
(1620,870,2)
(583,1192,2)
(1039,1489,2)
(953,1359,2)
(758,870,2)
(393,1763,2)
(377,94,2)
(1564,1524,2)
(1323,1766,2)
(678,1763,2)
(361,1359,2)
(1141,1235,2)
(705,548,2)
(115,1459,2)
(1620,940,2)
(577,164,2)
(222,889,2)
(797,1288,2)
(442,1192,2)
(80,651,2)
(365,307,2)
(1564,998,2)
(1486,1339,2)
(832,92,2)
(1171,1766,2)
(876,1653,2)
(381,548,2)
(321,1524,2)
(478,760,2)
(1386,995,2)
(1753,1206,2)
(332,1763,2)
(981,1513,2)
(989,786,2)
(1051,87,2)
(369,1763,2)
(539,1792,2)
(953,1192,2)
(166,870,2)
(285,1101,2)
(563,18,2)
(1147,998,2)
(230,1763,2)
(837,1763,2)
(215,788,2)
(1564,788,2)
(1409,1339,2)
(1500,1759,2)
(842,1257,2)
(1409,278,2)
(361,819,2)
(1344,1192,2)
(822,889,2)
(1749,870,2)
(1756,135,2)
(599,1763,2)
(1644,1677,2)
(889,1192,2)
(959,1192,2)
(1574,1524,2)
(268,417,2)
(1295,484,2)
(642,819,2)
(49,788,2)
(1482,1339,2)
(890,339,2)
(394,788,2)
(1493,805,2)
(622,247,2)
(578,1152,2)
(1066,715,2)
(818,870,2)
(1771,760,2)
(1219,1653,2)
(284,87,2)
(1660,845,2)
(388,307,2)
(233,1459,2)
(1510,484,2)
(269,1409,2)
(1272,998,2)
(1045,940,2)
(1571,18,2)
(1100,1653,2)
(675,137,2)
(1017,940,2)
(1615,73,2)
(1297,940,2)
(433,102,2)
(49,1257,2)
(1034,1763,2)
(1151,307,2)
(1535,925,2)
(1716,1643,2)
(321,548,2)
(445,1359,2)
(771,788,2)
(461,1653,2)
(533,368,2)
(252,1459,2)
(1670,1763,2)
(324,137,2)
(949,135,2)
(394,1192,2)
(592,1155,2)
(1641,548,2)
(1310,819,2)
(1753,1763,2)
(1290,1015,2)
(727,137,2)
(44,705,2)
(76,870,2)
(616,1491,2)
(1020,1339,2)
(1644,1715,2)
(1535,137,2)
(959,1056,2)
(1193,1653,2)
(1580,805,2)
(749,73,2)
(1412,484,2)
(680,1677,2)
(1487,368,2)
(1409,1759,2)
(1487,529,2)
(533,788,2)
(1756,368,2)
(1487,1313,2)
(1415,1521,2)
(1100,273,2)
(1593,1715,2)
(241,137,2)
(713,260,2)
(103,870,2)
(1689,102,2)
(1676,1216,2)
(1080,102,2)
(488,18,2)
(867,940,2)
(606,1339,2)
(1579,92,2)
(1756,548,2)
(810,247,2)
(1592,889,2)
(1768,1257,2)
(195,1524,2)
(1002,1459,2)
(245,106,2)
(796,307,2)
(1503,494,2)
(1468,339,2)
(1552,1653,2)
(29,1653,2)
(583,137,2)
(1246,870,2)
(1781,1677,2)
(56,1677,2)
(27,87,2)
(276,1016,2)
(519,1763,2)
(1701,73,2)
(1500,247,2)
(377,435,2)
(532,548,2)
(320,1763,2)
(260,760,2)
(890,1766,2)
(270,1597,2)
(631,1056,2)
(843,1056,2)
(1186,164,2)
(959,1206,2)
(519,1056,2)
(441,940,2)
(1119,18,2)
(1743,87,2)
(213,1339,2)
(519,1339,2)
(583,1313,2)
(456,940,2)
(1483,18,2)
(96,1677,2)
(883,1763,2)
(1543,102,2)
(953,819,2)
(1558,1766,2)
(260,1359,2)
(1181,18,2)
(1250,307,2)
(1712,395,2)
(1535,1763,2)
(1728,940,2)
(583,1766,2)
(1349,1677,2)
(42,940,2)
(1772,1225,2)
(927,1759,2)
(583,925,2)
(341,1705,2)
(1459,1155,2)
(809,1467,2)
(215,102,2)
(260,1086,2)
(1771,492,2)
(1555,1192,2)
(1761,1792,2)
(1649,1226,2)
(1409,1277,2)
(114,92,2)
(771,18,2)
(737,1763,2)
(1812,774,2)
(805,1313,2)
(1264,428,2)
(1534,1359,2)
(519,73,2)
(993,1677,2)
(1016,1677,2)
(1660,913,2)
(187,1339,2)
(1456,1192,2)
(1226,92,2)
(1655,889,2)
(1409,73,2)
(260,763,2)
(638,805,2)
(727,135,2)
(1272,1313,2)
(1415,1277,2)
(1615,529,2)
(1406,137,2)
(845,1653,2)
(1733,940,2)
(1260,368,2)
(1117,1677,2)
(1310,548,2)
(1672,417,2)
(493,889,2)
(1555,1359,2)
(1522,73,2)
(130,1677,2)
(949,1277,2)
(1753,819,2)
(381,1056,2)
(478,1414,2)
(849,1459,2)
(1615,1226,2)
(441,508,2)
(1272,1216,2)
(1429,135,2)
(918,339,2)
(597,819,2)
(1485,503,2)
(896,1521,2)
(301,192,2)
(1190,1058,2)
(543,870,2)
(1487,135,2)
(1286,1459,2)
(384,87,2)
(1209,1766,2)
(1558,1524,2)
(441,870,2)
(432,1513,2)
(445,1763,2)
(1672,998,2)
(109,940,2)
(475,1155,2)
(430,870,2)
(519,788,2)
(933,1214,2)
(1672,1524,2)
(1790,276,2)
(949,339,2)
(1592,1277,2)
(1272,1521,2)
(590,1766,2)
(222,1216,2)
(1596,135,2)
(527,1049,2)
(520,1339,2)
(1062,1197,2)
(1030,1653,2)
(507,1359,2)
(264,137,2)
(59,1763,2)
(771,247,2)
(727,1216,2)
(222,529,2)
(1500,529,2)
(819,354,2)
(1053,1677,2)
(1124,1524,2)
(1119,1524,2)
(872,870,2)
(1443,1257,2)
(1565,1763,2)
(800,1270,2)
(876,1763,2)
(1807,1759,2)
(1203,588,2)
(1522,819,2)
(268,1313,2)
(1260,1359,2)
(281,368,2)
(215,247,2)
(1684,137,2)
(1555,1056,2)
(158,792,2)
(1310,135,2)
(1118,627,2)
(1029,1313,2)
(1677,92,2)
(705,307,2)
(1521,1799,2)
(1618,870,2)
(1038,1339,2)
(268,137,2)
(680,1653,2)
(1564,339,2)
(1664,1359,2)
(175,1313,2)
(1526,217,2)
(1636,1770,2)
(1574,1056,2)
(1592,278,2)
(1048,1781,2)
(237,365,2)
(381,1049,2)
(315,1056,2)
(1615,247,2)
(417,925,2)
(583,73,2)
(29,1763,2)
(433,1521,2)
(531,1459,2)
(939,135,2)
(1175,137,2)
(1615,960,2)
(1343,1653,2)
(1260,417,2)
(1683,838,2)
(346,73,2)
(544,788,2)
(1270,382,2)
(1303,1653,2)
(1135,1257,2)
(539,268,2)
(818,940,2)
(1260,529,2)
(508,870,2)
(727,1056,2)
(548,247,2)
(373,18,2)
(206,1728,2)
(1558,1216,2)
(493,1581,2)
(431,1766,2)
(1287,102,2)
(220,1339,2)
(421,1763,2)
(381,1257,2)
(1672,1759,2)
(1389,998,2)
(225,1653,2)
(1555,1524,2)
(273,1763,2)
(791,417,2)
(1083,1677,2)
(1014,1763,2)
(1447,1763,2)
(1272,925,2)
(1344,417,2)
(1153,1653,2)
(913,1677,2)
(514,1792,2)
(511,870,2)
(513,307,2)
(999,849,2)
(728,1339,2)
(920,1763,2)
(616,870,2)
(1245,1267,2)
(949,1359,2)
(386,870,2)
(1660,1499,2)
(1019,1339,2)
(175,1192,2)
(203,819,2)
(799,1763,2)
(1105,1677,2)
(1464,1763,2)
(935,1705,2)
(1797,1745,2)
(519,247,2)
(10,1521,2)
(1559,1653,2)
(912,137,2)
(49,960,2)
(1415,137,2)
(504,1766,2)
(890,1277,2)
(187,1020,2)
(1596,1524,2)
(953,1759,2)
(1346,1653,2)
(1344,925,2)
(667,1257,2)
(675,960,2)
(1763,86,2)
(322,1049,2)
(588,940,2)
(1272,889,2)
(933,1705,2)
(1753,788,2)
(90,1763,2)
(260,1521,2)
(1710,1339,2)
(222,1521,2)
(12,1763,2)
(14,1524,2)
(1500,1192,2)
(1347,1339,2)
(129,18,2)
(478,399,2)
(1415,1326,2)
(215,1763,2)
(1645,1677,2)
(1756,1056,2)
(788,1421,2)
(916,1167,2)
(1313,278,2)
(659,687,2)
(573,803,2)
(890,417,2)
(1260,1326,2)
(1050,870,2)
(1570,430,2)
(675,1216,2)
(1049,1726,2)
(502,102,2)
(598,1489,2)
(1647,1339,2)
(1063,92,2)
(768,1677,2)
(14,548,2)
(445,788,2)
(1535,102,2)
(433,1206,2)
(1729,73,2)
(885,102,2)
(839,870,2)
(175,1216,2)
(713,916,2)
(1771,1499,2)
(1723,126,2)
(519,1759,2)
(1672,1216,2)
(1083,870,2)
(1689,788,2)
(1596,529,2)
(519,339,2)
(872,1677,2)
(1653,548,2)
(1310,1313,2)
(80,1339,2)
(536,92,2)
(890,1326,2)
(1588,237,2)
(325,1521,2)
(514,1339,2)
(462,1763,2)
(583,1206,2)
(861,137,2)
(1449,1339,2)
(363,492,2)
(1129,164,2)
(953,18,2)
(675,1277,2)
(348,1326,2)
(1563,1206,2)
(411,1459,2)
(249,92,2)
(688,1476,2)
(757,529,2)
(519,889,2)
(953,1216,2)
(1333,126,2)
(260,1414,2)
(513,1677,2)
(134,75,2)
(1354,1763,2)
(1464,1653,2)
(1564,529,2)
(260,1766,2)
(1272,1056,2)
(768,1578,2)
(1753,1313,2)
(1416,855,2)
(1494,870,2)
(1165,1428,2)
(989,340,2)
(1555,925,2)
(175,1524,2)
(810,1524,2)
(1260,137,2)
(152,1105,2)
(1672,1226,2)
(394,1524,2)
(1568,1677,2)
(345,1048,2)
(55,617,2)
(1447,1465,2)
(1500,1521,2)
(1535,18,2)
(1310,1759,2)
(79,940,2)
(120,940,2)
(268,445,2)
(170,1513,2)
(175,368,2)
(383,1277,2)
(949,940,2)
(949,889,2)
(1272,135,2)
(1257,73,2)
(1083,940,2)
(1429,1257,2)
(916,1759,2)
(1641,247,2)
(215,73,2)
(683,1677,2)
(1728,1250,2)
(815,1677,2)
(372,137,2)
(444,1763,2)
(1310,529,2)
(1344,18,2)
(374,889,2)
(173,1339,2)
(1258,1595,2)
(725,1715,2)
(1407,940,2)
(519,1521,2)
(1615,1313,2)
(1310,1766,2)
(49,1056,2)
(727,1763,2)
(601,1339,2)
(1487,137,2)
(1282,1521,2)
(1328,1257,2)
(1670,1677,2)
(857,1705,2)
(198,1339,2)
(268,925,2)
(1409,102,2)
(593,1560,2)
(433,960,2)
(1672,1257,2)
(1149,674,2)
(599,1350,2)
(1315,1513,2)
(614,1766,2)
(674,307,2)
(1713,1759,2)
(268,889,2)
(175,73,2)
(959,1216,2)
(949,1326,2)
(875,960,2)
(852,1653,2)
(1654,705,2)
(583,1521,2)
(1217,1459,2)
(727,247,2)
(1059,1763,2)
(554,1214,2)
(260,1206,2)
(260,940,2)
(1416,1339,2)
(282,276,2)
(972,1339,2)
(1479,1653,2)
(1253,1715,2)
(253,1339,2)
(1344,81,2)
(1771,536,2)
(953,998,2)
(1629,484,2)
(1326,1359,2)
(727,1277,2)
(727,1524,2)
(220,214,2)
(1581,889,2)
(1744,1653,2)
(223,18,2)
(902,925,2)
(1258,1339,2)
(588,872,2)
(892,1560,2)
(519,548,2)
(1615,417,2)
(1636,1690,2)
(455,1653,2)
(260,368,2)
(508,940,2)
(1672,492,2)
(567,430,2)
(1475,1763,2)
(129,1521,2)
(519,1049,2)
(1344,940,2)
(319,940,2)
(324,309,2)
(1188,1653,2)
(1778,1763,2)
(23,1339,2)
(1028,1359,2)
(1170,1677,2)
(337,1459,2)
(1101,1496,2)
(941,1524,2)
(1660,1751,2)
(452,1437,2)
(1134,1339,2)
(786,264,2)
(1336,484,2)
(222,1206,2)
(1394,1653,2)
(268,1056,2)
(1616,339,2)
(1017,870,2)
(758,940,2)
(389,870,2)
(1190,368,2)
(61,1677,2)
(1756,788,2)
(1537,1705,2)
(260,1768,2)
(222,819,2)
(1429,1763,2)
(1409,819,2)
(1487,960,2)
(1429,18,2)
(1603,1763,2)
(670,1653,2)
(1498,1117,2)
(14,135,2)
(1344,1339,2)
(1672,1339,2)
(1689,1049,2)
(1487,1192,2)
(1166,1339,2)
(315,1459,2)
(1672,1313,2)
(1245,1560,2)
(1260,1313,2)
(675,247,2)
(465,940,2)
(1310,1326,2)
(1623,1216,2)
(1756,18,2)
(720,307,2)
(1753,339,2)
(1345,531,2)
(288,889,2)
(1500,1763,2)
(1429,788,2)
(1414,1677,2)
(1415,417,2)
(1002,1677,2)
(1272,548,2)
(890,278,2)
(1365,870,2)
(1101,1339,2)
(1124,1257,2)
(328,417,2)
(810,417,2)
(1697,1766,2)
(685,1049,2)
(35,1349,2)
(1470,870,2)
(161,959,2)
(1555,819,2)
(381,1524,2)
(1487,819,2)
(319,870,2)
(175,548,2)
(453,1763,2)
(1583,1155,2)
(1544,190,2)
(433,73,2)
(911,1763,2)
(313,1056,2)
(1321,870,2)
(890,925,2)
(164,1633,2)
(292,1766,2)
(1260,1524,2)
(566,1763,2)
(724,329,2)
(223,247,2)
(1244,1257,2)
(533,1056,2)
(1547,924,2)
(465,870,2)
(940,870,2)
(120,42,2)
(484,1446,2)
(466,940,2)
(1105,307,2)
(959,137,2)
(1181,73,2)
(207,870,2)
(1310,1056,2)
(800,1653,2)
(1802,245,2)
(1672,1277,2)
(1383,776,2)
(1651,492,2)
(195,1763,2)
(188,1489,2)
(727,73,2)
(1596,1206,2)
(199,1763,2)
(6,1677,2)
(1660,1763,2)
(361,102,2)
(898,1214,2)
(1409,1226,2)
(492,567,2)
(1178,1313,2)
(1354,1653,2)
(1328,1206,2)
(1458,788,2)
(381,1792,2)
(1734,1766,2)
(258,276,2)
(70,1732,2)
(1310,368,2)
(1698,541,2)
(49,339,2)
(1181,247,2)
(129,135,2)
(1450,870,2)
(899,1497,2)
(70,1677,2)
(361,1257,2)
(916,1499,2)
(381,889,2)
(254,1339,2)
(1574,1192,2)
(988,1056,2)
(129,960,2)
(949,819,2)
(1465,1653,2)
(1253,1593,2)
(1581,1551,2)
(1239,529,2)
(445,339,2)
(1660,976,2)
(235,1257,2)
(1152,1059,2)
(223,102,2)
(247,1524,2)
(1582,720,2)
(273,1677,2)
(1415,368,2)
(199,123,2)
(1451,1313,2)
(959,433,2)
(263,492,2)
(714,1257,2)
(1207,1677,2)
(1034,548,2)
(967,1763,2)
(675,18,2)
(434,1766,2)
(916,536,2)
(953,548,2)
(1092,329,2)
(568,1339,2)
(540,1759,2)
(133,106,2)
(1708,1416,2)
(397,1437,2)
(1472,1653,2)
(1509,1763,2)
(14,1763,2)
(1756,925,2)
(433,1257,2)
(1769,1489,2)
(583,1049,2)
(658,1339,2)
(1398,1653,2)
(938,87,2)
(759,117,2)
(1500,1313,2)
(1429,889,2)
(67,1359,2)
(278,1626,2)
(1800,1677,2)
(258,1677,2)
(139,1339,2)
(381,819,2)
(1276,1339,2)
(1034,1049,2)
(533,529,2)
(518,1339,2)
(1618,940,2)
(118,375,2)
(1281,244,2)
(533,1277,2)
(1714,1653,2)
(1429,1277,2)
(1672,247,2)
(1046,137,2)
(1325,492,2)
(381,102,2)
(260,1226,2)
(1555,960,2)
(1594,18,2)
(1155,317,2)
(428,603,2)
(167,126,2)
(398,843,2)
(1310,1339,2)
(1689,73,2)
(1399,788,2)
(1359,1560,2)
(1771,913,2)
(125,1206,2)
(998,728,2)
(983,889,2)
(1413,417,2)
(1656,870,2)
(1585,1677,2)
(1211,1206,2)
(123,1763,2)
(956,940,2)
(1759,687,2)
(169,1766,2)
(1104,1766,2)
(268,1521,2)
(1689,1257,2)
(567,1677,2)
(1564,1313,2)
(1672,940,2)
(1756,1206,2)
(1050,1677,2)
(1596,73,2)
(916,367,2)
(1795,488,2)
(1660,688,2)
(896,1792,2)
(475,307,2)
(191,1763,2)
(977,959,2)
(1564,492,2)
(607,102,2)
(601,579,2)
(519,925,2)
(302,946,2)
(1535,1056,2)
(862,1732,2)
(788,1056,2)
(1246,940,2)
(869,1677,2)
(586,998,2)
(1119,819,2)
(1689,1763,2)
(1041,1513,2)
(85,1677,2)
(838,1653,2)
(1009,71,2)
(1070,1459,2)
(1415,788,2)
(225,1632,2)
(509,805,2)
(675,889,2)
(846,1560,2)
(1272,492,2)
(771,548,2)
(1060,172,2)
(1370,1763,2)
(1715,1732,2)
(1642,491,2)
(361,1521,2)
(1260,1766,2)
(361,940,2)
(1344,819,2)
(617,1582,2)
(1260,1277,2)
(810,1339,2)
(175,1206,2)
(782,102,2)
(223,1524,2)
(273,1653,2)
(1429,925,2)
(447,1013,2)
(1272,1277,2)
(49,135,2)
(1149,1766,2)
(1201,1257,2)
(1500,819,2)
(406,1339,2)
(306,368,2)
(547,1763,2)
(1124,819,2)
(776,1339,2)
(1717,368,2)
(810,998,2)
(1812,307,2)
(206,870,2)
(494,1155,2)
(1753,135,2)
(86,1653,2)
(575,1326,2)
(891,1763,2)
(1291,241,2)
(583,278,2)
(175,1056,2)
(445,1257,2)
(1615,940,2)
(1756,1277,2)
(1245,1359,2)
(643,1060,2)
(1080,247,2)
(456,307,2)
(1429,247,2)
(633,870,2)
(1436,1459,2)
(1132,870,2)
(1660,986,2)
(1574,1763,2)
(1235,156,2)
(1360,1705,2)
(1334,1513,2)
(1551,1677,2)
(1427,1763,2)
(1748,1653,2)
(584,484,2)
(302,1257,2)
(605,417,2)
(583,417,2)
(175,940,2)
(620,1437,2)
(867,870,2)
(531,186,2)
(445,73,2)
(603,417,2)
(767,1653,2)
(1240,1763,2)
(381,278,2)
(123,883,2)
(222,247,2)
-----------------------------------
(0,1)
(1,cfg_ini)
(2,sizeof(default_address)
(3,"%s: Failed to close VOSS Scheduler")
(4,1)
(5,)
(6,pHddCtx->cfg_ini)
(7,enable_dfs_chan_scan)
(8,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: ptt_sock_activate_svc failed",__func__)
(9,pHddCtx)
(10,"%s: hdd_open_adapter failed")
(11,WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(12,VOS_STA_SAP_MODE)
(13,pHddCtx)
(14,wiphy)
(15,init_completion(&pHddCtx->scan_info.scan_req_completion_event)
(16,p2p_dev_addr)
(17,if (oem_activate_service(pHddCtx)
(18,!VOS_IS_STATUS_SUCCESS( status )
(19,pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump)
(20,hHal)
(21,if (vos_is_multicast_logging()
(22,pHddCtx)
(23,nEnableStrictRegulatoryForFCC)
(24,NULL)
(25,pVosContext)
(26,if (hdd_is_ssr_required()
(27,0)
(28,pHddCtx)
(29,hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(30,"Logging disabled in ini")
(31,pHddCtx->last_scan_reject_timestamp)
(32,pHddCtx->wiphy = wiphy)
(33,nthBeaconFilter)
(34,)
(35,pHddCtx->cfg_ini->isRoamOffloadScanEnabled)
(36,pHddCtx->cfg_ini->wlanPerPktStatsLogEnable)
(37,mac_addr)
(38,p2p_dev_addr)
(39,"qcom_rx_wakelock")
(40,)
(41,-EIO)
(42,pHddCtx->cfg_ini)
(43,pHddCtx)
(44,pHddCtx)
(45,WLAN_HDD_SOFTAP)
(46,pVosContext= NULL)
(47,pVosContext)
(48,if (CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)
(49,cfg_ini)
(50,hdd_tx_rx_pkt_cnt_stat_timer_handler)
(51,VOS_TRACE_LEVEL_ERROR)
(52,if(ret < 0)
(53,)
(54,pHddCtx)
(55,hHal)
(56,pHddCtx->scan_info)
(57,hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv4 notifier")
(58,ret)
(59,sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb)
(60,5000)
(61,pHddCtx->cfg_ini)
(62,pHddCtx->cfg_ini->intfMacAddr[0].bytes)
(63,VOS_MODULE_ID_PMC)
(64,cfg_ini)
(65,&pHddCtx->sap_wake_lock)
(66,wiphy_channel_update_event)
(67,status)
(68,if ( !VOS_IS_STATUS_SUCCESS( status )
(69,vos_mem_zero(pHddCtx, sizeof( hdd_context_t )
(70,hdd_update_config_from_nv(pHddCtx)
(71,pHddCtx->cfg_ini)
(72,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_ftm_open Failed",__func__)
(73,!VOS_IS_STATUS_SUCCESS(vStatus)
(74,p2pDeviceAddress)
(75,BSL_Init(pVosContext)
(76,hdd_wdi_trace_enable(eWLAN_MODULE_DAL_CTRL,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnableCTL)
(77,mcastBcastFilterSetting)
(78,pHddCtx)
(79,cfg_ini)
(80,&pHddCtx->req_bmps_comp_var)
(81,wiphy = wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)
(82,if ( !VOS_IS_STATUS_SUCCESS( status )
(83,if (VOS_FTM_MODE == hdd_get_conparam()
(84,)
(85,pHddCtx->hHal)
(86,pHddCtx->cfg_ini->wlanLoggingFEToConsole)
(87,!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE)
(88,err_vosclose:)
(89,ipv6_notifier)
(90,pHddCtx)
(91,pHddCtx)
(92,wiphy == NULL)
(93,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: cfg80211 init failed", __func__)
(94,sizeof(VosWatchdogContext)
(95,GFP_KERNEL)
(96,pHddCtx->parent_dev)
(97,pHddCtx->hHal)
(98,register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
(99,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__)
(100,fenableCHAvoidance)
(101,ret = wait_for_completion_interruptible_timeout(\n\\n                       &pAdapter->change_country_code,\n\\n                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
(102,btc_activate_service(pHddCtx)
(103,pHddCtx->cfg_ini->wdiTraceEnablePAL)
(104,pHddCtx->last_scan_reject_timestamp = 0)
(105,status)
(106,false == hdd_is_5g_supported(pHddCtx)
(107,pHddCtx)
(108,if ( NULL == pHddCtx->hHal )
(109,VOS_MODULE_ID_SAP)
(110,if (ret)
(111,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed kmalloc hdd_config_t",__func__)
(112,)
(113,pHddCtx)
(114,wiphy)
(115,0)
(116,goto err_vos_nv_close;)
(117,pHddCtx->pvosContext = pVosContext)
(118,"%s: module enable_11d set to %d")
(119,pHddCtx->pvosContext)
(120,pHddCtx->cfg_ini->vosTraceEnableVOSS)
(121,pHddCtx)
(122,VOS_TRACE_LEVEL_FATAL)
(123,&pHddCtx->ipv6_notifier)
(124,)
(125,parent_dev)
(126,!pHddCtx->cfg_ini->gEnableDebugLog)
(127,0)
(128,hdd_config_t)
(129,status)
(130,pHddCtx->cfg_ini)
(131,"00")
(132,)
(133,pHddCtx->cfg_ini)
(134,vStatus = BSL_Init(pVosContext)
(135,ret < 0)
(136,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n                           "%s: Failed to allocate mac_address for p2p_device",\n\\n                   __func__)
(137,FALSE == hdd_update_config_dat(pHddCtx)
(138,VOS_TRACE_LEVEL_ERROR)
(139,0xFF)
(140,cfg_ini)
(141,pHddCtx)
(142,status)
(143,cfg_ini)
(144,pHddCtx)
(145,Is11dSupportEnabled)
(146,pHddCtx->cfg_ini->UapsdMask)
(147,1)
(148,pHddCtx)
(149,pP2pAdapter)
(150,pHddCtx)
(151,goto err_close_adapter;)
(152,pHddCtx->cfg_ini->intfMacAddr)
(153,&pHddCtx->scan_info.scan_req_completion_event)
(154,init_completion(&pHddCtx->wiphy_channel_update_event)
(155,"p2p%d")
(156,pHddCtx->cfg_ini)
(157,INIT)
(158,pHddCtx->cfg_ini->wdiTraceEnableCTL)
(159,0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,\n\\n                                                            default_address)
(160,sme_AddChAvoidCallback(pHddCtx->hHal,\n\\n                              hdd_hostapd_ch_avoid_cb)
(161,VOS_TRACE_LEVEL_FATAL)
(162,"%s: Failed kmalloc hdd_config_t")
(163,"%s: vos_watchdog_open failed")
(164,pHddCtx->cfg_ini->enableContFWLogging)
(165,vStatus)
(166,pHddCtx)
(167,VOS_PKT_PROTO_TYPE_EAPOL)
(168,status)
(169,pHddCtx->cfg_ini)
(170,pHddCtx)
(171,if ( !VOS_IS_STATUS_SUCCESS( status )
(172,pHddCtx->cfg_ini)
(173,wmmLock)
(174,if (0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],\n\\n                   sizeof(default_address)
(175,pHddCtx)
(176,pAdapter)
(177,ipv4_notifier)
(178,)
(179,VOS_TRACE_LEVEL_INFO)
(180,pHddCtx)
(181,cfg_ini)
(182,)
(183,VOS_STATUS_SUCCESS)
(184,pHddCtx->cfg_ini)
(185,)
(186,pHddCtx->p2pDeviceAddress.bytes[0])
(187,&pHddCtx->scan_info.abortscan_event_var)
(188,"%s: SME Change Country code from module param fail ret=%d")
(189,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_LOAD_IN_PROGRESS)
(190,pHddCtx->cfg_ini->mcastBcastFilterSetting)
(191,(void *)
(192,status = wlan_hdd_init_channels_for_cc(pHddCtx, INIT)
(193,hdd_processSpoofMacAddrRequest)
(194,if(pVosContext == NULL)
(195,&hdd_netdev_notifier)
(196,)
(197,pHddCtx)
(198,pHddCtx)
(199,register_inet6addr_notifier(&pHddCtx->ipv6_notifier)
(200,if(IS_DYNAMIC_WMM_PS_ENABLED)
(201,cfg_ini)
(202,)
(203,VOS_TRACE_LEVEL_FATAL)
(204,hHal)
(205,NULL)
(206,hdd_wdi_trace_enable(eWLAN_MODULE_DAL_DATA,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnableDAT)
(207,VOS_MODULE_ID_WDI)
(208,VOS_TRACE_LEVEL_FATAL)
(209,status)
(210,pvosContext)
(211,cfg_ini)
(212,intfMacAddr)
(213,NULL)
(214,kmalloc(sizeof(hdd_config_t)
(215,hdd_close_all_adapters( pHddCtx )
(216,wlanLoggingEnable)
(217,vos_is_macaddr_zero(&mac_addr)
(218,NULL)
(219,oem_activate_service(pHddCtx)
(220,(hdd_config_t*)
(221,pHddCtx)
(222,status)
(223,WLANBAP_Stop(pVosContext)
(224,scan_req_completion_event)
(225,VOS_STA_SAP_MODE != hdd_get_conparam()
(226,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",\n\\n         __func__)
(227,bytes)
(228,pHddCtx->cfg_ini->wlanLoggingEnable)
(229,VOS_TRACE_LEVEL_DEBUG)
(230,pHddCtx)
(231,__func__)
(232,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_FATAL,\n\\n         "%s: Failed to close VOSS Scheduler", __func__)
(233,p2pDeviceAddress)
(234,abortscan_event_var)
(235,status = WLANBAP_SetConfig(&btAmpConfig)
(236,pHddCtx)
(237,pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(238,if(wlan_logging_sock_activate_svc(\n\\n                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,\n\\n                   pHddCtx->cfg_ini->wlanLoggingNumBuf,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf)
(239,CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT)
(240,pConfig)
(241,pHddCtx->cfg_ini->intfMacAddr)
(242,*pP2pAdapter = NULL)
(243,isRoamOffloadScanEnabled)
(244,(char*)
(245,1 != pHddCtx->cfg_ini->nBandCapability)
(246,status)
(247,ptt_sock_activate_svc(pHddCtx)
(248,cfg_ini)
(249,"wlan")
(250,p2p_dev_addr)
(251,VOS_MODULE_ID_VOSS)
(252,bytes)
(253,last_scan_reject_session_id)
(254,pHddCtx->last_scan_reject_session_id = 0)
(255,VOS_MODULE_ID_VOSS)
(256,cfg_ini)
(257,pHddCtx)
(258,pHddCtx->cfg_ini)
(259,pHddCtx->roc_lock)
(260,return -EIO;)
(261,pVosContext)
(262,VOS_MODULE_ID_WDA)
(263,__func__)
(264,pHddCtx->cfg_ini->intfMacAddr[0])
(265,if (!HAL_STATUS_SUCCESS( halStatus )
(266,&pHddCtx->cfg_ini->intfMacAddr[0])
(267,NULL)
(268,pHddCtx->cfg_ini->fIsLogpEnabled)
(269,msleep(5000)
(270,VOS_IS_STATUS_SUCCESS( status )
(271,!(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(272,cfg_ini)
(273,pHddCtx->cfg_ini)
(274,pHddCtx)
(275,if (false == hdd_is_5g_supported(pHddCtx)
(276,pHddCtx->cfg_ini->wlanLoggingEnable)
(277,1)
(278,NULL == pHddCtx->hHal)
(279,goto err_free_hdd_context;)
(280,if (pHddCtx->cfg_ini->wlanLoggingEnable &&\n\\n               (pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump )
(281,VOS_IS_STATUS_SUCCESS( status )
(282,cfg_ini)
(283,FALSE)
(284,cfg_ini)
(285,&pHddCtx->ext_scan_context.response_event)
(286,isP2pDeviceAddrAdministrated)
(287,"%s: FTM driver loaded success fully")
(288,status)
(289,cfg_ini)
(290,VOS_FTM_MODE)
(291,*pAdapter = NULL)
(292,__func__)
(293,hdd_checkandupdate_dfssetting(pAdapter, country_code)
(294,wlan_hdd_change_country_code_callback)
(295,pHddCtx)
(296,__func__)
(297,VOS_TRACE_LEVEL_FATAL)
(298,hddLog(VOS_TRACE_LEVEL_INFO,\n\\n                "%s: Setting pHddCtx->cfg_ini->nBandCapability = 1", __func__)
(299,cfg_ini)
(300,if (0 > wlan_hdd_cfg80211_register(wiphy)
(301,VOS_IS_STATUS_SUCCESS( status )
(302,&pHddCtx->scan_ctxt)
(303,pHddCtx)
(304,&pHddCtx->schedScan_lock)
(305,status = hdd_parse_config_ini( pHddCtx )
(306,VOS_TRACE_LEVEL_FATAL)
(307,pHddCtx->cfg_ini = (hdd_config_t*)
(308,ret)
(309,halStatus = cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n                             (v_U8_t *)
(310,VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |\n\\n           VOS_PKT_PROTO_TYPE_ARP)
(311,err_unregister_wiphy:)
(312,"Failed to register IPv6 notifier")
(313,p2pDeviceAddress)
(314,hdd_checkandupdate_phymode(pAdapter, country_code)
(315,pP2pAdapter)
(316,0)
(317,pHddCtx->cfg_ini)
(318,if(ptt_sock_activate_svc(pHddCtx)
(319,pHddCtx)
(320,pHddCtx->hHal)
(321,pHddCtx)
(322,VOS_TRACE_LEVEL_ERROR)
(323,if (0 == enable_11d || 1 == enable_11d)
(324,HAL_STATUS_SUCCESS( halStatus )
(325,__func__)
(326,err_config:)
(327,wiphy)
(328,pVosContext)
(329,ret)
(330,if (VOS_STA_SAP_MODE != hdd_get_conparam()
(331,pHddCtx)
(332,sme_OemDataRegisterCallback(pHddCtx->hHal,\n\\n            wlan_hdd_cfg80211_oemdata_callback,\n\\n                           pHddCtx)
(333,bytes)
(334,pHddCtx)
(335,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddDevTmRegisterNotifyCallback failed",__func__)
(336,mac_addr)
(337,pHddCtx)
(338,"%s: gEnableMemoryDebug=%d")
(339,!VOS_IS_STATUS_SUCCESS( status )
(340,v_U8_t *)
(341,country_code)
(342,if (pAdapter != NULL)
(343,eWLAN_MODULE_DAL_CTRL)
(344,"Failed to register IPv4 notifier")
(345,hdd_vos_trace_enable(VOS_MODULE_ID_HDD_SOFTAP,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableHDDSAP)
(346,pVosContext)
(347,pVosContext)
(348,hddLog( VOS_TRACE_LEVEL_FATAL,\n\\n                "%s: vos_nv_open failed", __func__)
(349,pVosContext)
(350,"%s: oem_activate_service failed")
(351,if (VOS_FTM_MODE != hdd_get_conparam()
(352,cfg_ini)
(353,pVosContext)
(354,VOS_IS_STATUS_SUCCESS( status )
(355,status)
(356,pHddCtx)
(357,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: wiphy register failed", __func__)
(358,VosWatchdogContext)
(359,)
(360,if(pHddCtx->cfg_ini->fIsLogpEnabled)
(361,cfg_ini)
(362,dot11Mode)
(363,"%s: wlan_hdd_ftm_open Failed")
(364,)
(365,pHddCtx->cfg_ini)
(366,vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
(367,pHddCtx->last_scan_reject_reason)
(368,!VOS_IS_STATUS_SUCCESS( status )
(369,pHddCtx)
(370,pP2pAdapter)
(371,pHddCtx)
(372,&mac_addr.bytes)
(373,hdd_debugfs_init(pAdapter)
(374,VOS_TRACE_LEVEL_FATAL)
(375,0 == enable_11d || 1 == enable_11d)
(376,cfg_ini)
(377,vos_watchdog_open(pVosContext,\n\\n         &((VosContextType*)
(378,goto err_vosclose;)
(379,)
(380,pHddCtx->cfg_ini)
(381,vos_sched_close( pVosContext )
(382,pHddCtx->cur_rx_level_lock)
(383,"%s: wiphy register failed")
(384,pHddCtx)
(385,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_preStart failed", __func__)
(386,pHddCtx->cfg_ini->vosTraceEnableWDA)
(387,pHddCtx->cfg_ini->gEnableDebugLog)
(388,pHddCtx->cfg_ini)
(389,hdd_get_conparam()
(390,pHddCtx->cfg_ini)
(391,pHddCtx->cfg_ini->wlanLoggingNumBuf)
(392,scan_work)
(393,wlan_hdd_ipv4_changed)
(394,pVosContext)
(395,&pHddCtx->tx_rx_trafficTmr)
(396,if (0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
(397,VOS_TRACE_LEVEL_INFO)
(398,vos_mem_copy(&pHddCtx->p2pDeviceAddress.bytes[0],\n\\n                             p2p_dev_addr, VOS_MAC_ADDR_SIZE)
(399,pHddCtx->cfg_ini->enableDFSChnlScan)
(400,0)
(401,pHddCtx)
(402,vosTraceEnableWDI)
(403,unregister_netdevice_notifier(&hdd_netdev_notifier)
(404,0)
(405,IsMemoryDebugSupportEnabled)
(406,pHddCtx)
(407,wlanLoggingEnable)
(408,"softap.%d")
(409,pHddCtx)
(410,pHDDContext)
(411,pHddCtx->cfg_ini->intfMacAddr)
(412,cfg_ini)
(413,if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
(414,__func__)
(415,if (0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)
(416,pHddCtx->tx_sus_event_var)
(417,nl_srv_init()
(418,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(419,hHal)
(420,status)
(421,sap_lock)
(422,cfg_ini)
(423,EXIT()
(424,WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(425,VOS_MODULE_ID_VOSS)
(426,__func__)
(427,WLANBAP_Start(pVosContext)
(428,vos_open( &pVosContext, pHddCtx->parent_dev)
(429,__func__)
(430,VOS_FTM_MODE == hdd_get_conparam()
(431,pHddCtx)
(432,WLAN_HDD_INFRA_STATION)
(433,VOS_IS_STATUS_SUCCESS(status)
(434,pHddCtx)
(435,&((VosContextType*)
(436,gEnableDebugLog)
(437,wiphy)
(438,hHal)
(439,subsystem_restart("wcnss")
(440,goto err_vosstop;)
(441,hdd_vos_trace_enable(VOS_MODULE_ID_BAP,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableBAP)
(442,halStatus)
(443,goto err_vosstop;)
(444,wlan_hdd_cfg80211_extscan_callback)
(445,pHddCtx->cfg_ini)
(446,notifier_call)
(447,VOS_IS_STATUS_SUCCESS( status )
(448,if (!VOS_IS_STATUS_SUCCESS(vStatus)
(449,VOS_MODULE_ID_VOSS)
(450,VOS_BUG(0)
(451,__func__)
(452,VOS_TRACE_LEVEL_ERROR)
(453,pHddCtx)
(454,delack_timer)
(455,ipv6_notifier)
(456,pHddCtx->cfg_ini)
(457,VOS_TRACE_LEVEL_FATAL)
(458,scan_info)
(459,enable_dfs_chan_scan)
(460,vosWatchdog)
(461,pHddCtx)
(462,"qcom_sap_wakelock")
(463,VOS_STATUS_SUCCESS)
(464,0)
(465,pHddCtx->cfg_ini)
(466,wdiTraceEnableDAL)
(467,full_pwr_comp_var)
(468,pHddCtx->spoof_mac_addr_work)
(469,)
(470,0)
(471,hdd_vos_trace_enable(VOS_MODULE_ID_TL,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableTL)
(472,sme_UpdateChannelList(pHddCtx->hHal)
(473,VOS_TRACE_LEVEL_ERROR)
(474,vStatus)
(475,pHddCtx->cfg_ini)
(476,pHddCtx->pvosContext)
(477,pHddCtx)
(478,pHddCtx->p2pDeviceAddress.bytes[0] |= 0x02)
(479,pHddCtx->cfg_ini->isRoamOffloadScanEnabled)
(480,mutex_init(&pHddCtx->tdls_lock)
(481,cfg_ini)
(482,notifier_call)
(483,status = hddRegisterPmOps(pHddCtx)
(484,IS_DYNAMIC_WMM_PS_ENABLED)
(485,pAdapter)
(486,ret)
(487,pHddCtx)
(488,VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter)
(489,pHddCtx)
(490,"%s: wlan_hdd_init_channels failed")
(491,&pHddCtx->spoof_mac_addr_work)
(492,VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx)
(493,VOS_IS_STATUS_SUCCESS( status )
(494,pHddCtx->cfg_ini->intfMacAddr[0].bytes[0])
(495,VOS_TRACE_LEVEL_FATAL)
(496,ret)
(497,FALSE)
(498,pHddCtx)
(499,__func__)
(500,pHddCtx)
(501,enable_11d)
(502,0)
(503,VOS_IS_STATUS_SUCCESS( status )
(504,pHddCtx)
(505,WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(506,err_reg_netdev:)
(507,__func__)
(508,pHddCtx->cfg_ini->vosTraceEnableBAP)
(509,pHddCtx->cfg_ini)
(510,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to open BAP",__func__)
(511,wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
(512,pHddCtx->wiphy_channel_update_event)
(513,pHddCtx->cfg_ini)
(514,(VosContextType*)
(515,pHddCtx)
(516,hdd_list_init( &pHddCtx->hddAdapters, MAX_NUMBER_OF_ADAPTERS )
(517,pHddCtx)
(518,ext_scan_context)
(519,hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(520,linux_reg_req)
(521,hdd_set_sme_config( pHddCtx )
(522,&pHddCtx->delack_timer)
(523,VOS_TRACE_LEVEL_FATAL)
(524,pHddCtx)
(525,cfg_ini)
(526,pvosContext)
(527,"%s: wiphy register failed")
(528,ret = wcnss_get_wlan_mac_address((char*)
(529,!VOS_IS_STATUS_SUCCESS(vStatus)
(530,)
(531,&pHddCtx->p2pDeviceAddress.bytes[0])
(532,goto err_reg_netdev;)
(533,vos_stop(pVosContext)
(534,)
(535,pHddCtx)
(536,pHddCtx->wiphy)
(537,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: FTM driver loaded success fully",__func__)
(538,if ( !VOS_IS_STATUS_SUCCESS( status )
(539,vos_watchdog_close(pVosContext)
(540,FALSE)
(541,pHddCtx->cfg_ini)
(542,vosTraceEnableWDA)
(543,cfg_ini)
(544,"%s: Failed to do hdd_open_adapter for P2P Device Interface")
(545,&pAdapter->change_country_code)
(546,pHddCtx)
(547,hddLog(VOS_TRACE_LEVEL_ERROR, "%s: wlan_logging_sock_activate_svc"\n\\n                   " failed", __func__)
(548,hdd_open_cesium_nl_sock()
(549,__func__)
(550,wiphy)
(551,hddLog( VOS_TRACE_LEVEL_FATAL,\n\\n               "%s: vos_init_wiphy failed", __func__)
(552,if ( VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx)
(553,VOS_TIMER_TYPE_SW)
(554,pHddCtx->hHal)
(555,0)
(556,pHddCtx->cfg_ini)
(557,__func__)
(558,)
(559,pHddCtx)
(560,wlan_hdd_ipv6_changed)
(561,pHddCtx)
(562,wlanLoggingNumBuf)
(563,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
(564,__func__)
(565,struct device *dev)
(566,hHal)
(567,wlan_hdd_ftm_open(pHddCtx)
(568,mutex_init(&pHddCtx->wmmLock)
(569,FALSE)
(570,btAmpConfig)
(571,INIT_COMPLETION(pAdapter->change_country_code)
(572,hdd_rssi_threshold_breached_cb)
(573,VOS_IS_STATUS_SUCCESS(status)
(574,hdd_parse_config_ini( pHddCtx )
(575,VOS_TRACE_LEVEL_FATAL)
(576,pHddCtx)
(577,pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump)
(578,mutex_init(&pHddCtx->sap_lock)
(579,&pHddCtx->linux_reg_req)
(580,vStatus)
(581,VOS_TRACE_LEVEL_INFO)
(582,VOS_IS_STATUS_SUCCESS(status)
(583,pHddCtx->cfg_ini)
(584,VOS_TRACE_LEVEL_DEBUG)
(585,if (pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(586,sizeof( hdd_config_t )
(587,)
(588,pHddCtx->cfg_ini->vosTraceEnableHDD)
(589,__func__)
(590,1)
(591,pHddCtx->last_scan_reject_reason = 0xFF)
(592,cfg_ini)
(593,status)
(594,pHddCtx)
(595,cfg_ini)
(596,if( VOS_MONITOR_MODE == hdd_get_conparam()
(597,__func__)
(598,VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n                   "%s: SME Change Country code from module param fail ret=%d",\n\\n                   __func__, ret)
(599,WLAN_HDD_GET_HAL_CTX(pAdapter)
(600,vos_init_delayed_work(&pHddCtx->scan_ctxt.scan_work,\n\\n                         wlan_hdd_schedule_defer_scan)
(601,init_completion(&pHddCtx->linux_reg_req)
(602,hdd_init_ll_stats_ctx(pHddCtx)
(603,&pVosContext)
(604,cfg_ini)
(605,cfg_ini)
(606,pHddCtx->schedScan_lock)
(607,goto err_reg_netdev;)
(608,pHddCtx)
(609,wiphy)
(610,"%s: vos_nv_open failed")
(611,)
(612,pHddCtx)
(613,if (!VOS_IS_STATUS_SUCCESS(status)
(614,pHddCtx->configuredMcastBcastFilter = pHddCtx->cfg_ini->mcastBcastFilterSetting)
(615,status)
(616,pHddCtx->cfg_ini->vosTraceEnableWDI)
(617,TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)
(618,hHal)
(619,if (1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)
(620,"Registered IPv4 notifier")
(621,if (!pHddCtx->cfg_ini->gEnableDebugLog)
(622,0)
(623,)
(624,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "\n\\n                "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus )
(625,pAdapter)
(626,hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to register IPv6 notifier")
(627,1 == pHddCtx->cfg_ini->fEnableSNRMonitoring)
(628,hdd_cfg_xlate_to_csr_phy_mode(pHddCtx->cfg_ini->dot11Mode)
(629,spoof_mac_addr_work)
(630,pHddCtx)
(631,VOS_TRACE_LEVEL_FATAL)
(632,err_close_adapter:)
(633,cfg_ini)
(634,wlan_hdd_cfg80211_wiphy_alloc(sizeof(hdd_context_t)
(635,pHddCtx)
(636,NULL)
(637,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n                 "%s: hdd_debugfs_init failed!", __func__)
(638,__func__)
(639,pHddCtx->ssr_comp_var)
(640,FALSE)
(641,p2p_dev_addr)
(642,ret = register_netdevice_notifier(&hdd_netdev_notifier)
(643,hdd_vos_trace_enable(VOS_MODULE_ID_PMC,\n\\n                         pHddCtx->cfg_ini->vosTraceEnablePMC)
(644,init_completion(&pHddCtx->scan_info.abortscan_event_var)
(645,)
(646,status)
(647,goto err_bap_close;)
(648,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: Failed hdd_set_sme_config", __func__)
(649,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(650,__func__)
(651,pHddCtx->req_bmps_comp_var)
(652,ret)
(653,)
(654,eSIR_TRUE)
(655,vosTraceEnableSYS)
(656,pHddCtx)
(657,VOS_TRACE_LEVEL_FATAL)
(658,hddAdapters)
(659,VOS_STATUS_SUCCESS)
(660,pHddCtx)
(661,0)
(662,pAdapter)
(663,pHddCtx->scan_info.scan_pending_option = WEXT_SCAN_PENDING_GIVEUP)
(664,VOS_TRACE_LEVEL_FATAL)
(665,"%s: error parsing %s")
(666,vosTraceEnablePMC)
(667,btAmpConfig.ucPreferredChannel = pConfig->preferredChannel)
(668,VOS_TRACE_LEVEL_WARN)
(669,hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Do not enable UAPSD",\n\\n                     __func__)
(670,cfg_ini)
(671,"%s: vos_preStart failed")
(672,v_VOID_t*)
(673,__func__)
(674,pHddCtx->cfg_ini)
(675,pHddCtx->cfg_ini= NULL)
(676,cfg_ini)
(677,vos_init_wiphy_from_nv_bin()
(678,hHal)
(679,bytes)
(680,pHddCtx->cfg_ini)
(681,VOS_MODULE_ID_VOSS)
(682,VOS_STATUS_SUCCESS)
(683,(void *)
(684,VOS_MODULE_ID_BAP)
(685,status)
(686,)
(687,VOS_MONITOR_MODE == hdd_get_conparam()
(688,pHddCtx->p2pDeviceAddress.bytes[0])
(689,pHddCtx->isLoadUnloadInProgress)
(690,)
(691,wiphy)
(692,pHddCtx)
(693,pHddCtx)
(694,bytes)
(695,"%s: ptt_sock_activate_svc failed")
(696,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: vos_open failed", __func__)
(697,change_country_code)
(698,hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_dfs_chan_scan set to %d",\n\\n             __func__, enable_dfs_chan_scan)
(699,ret)
(700,pvosContext)
(701,pHddCtx->cfg_ini)
(702,VOS_TRACE_LEVEL_FATAL)
(703,VOS_TRACE_LEVEL_FATAL)
(704,pHddCtx->hHal)
(705,pHddCtx->cfg_ini)
(706,__func__)
(707,eWLAN_MODULE_DAL_DATA)
(708,)
(709,if(nl_srv_init()
(710,VOS_TRACE_LEVEL_ERROR)
(711,scan_info)
(712,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to Init BSL",__func__)
(713,RET)
(714,scan_ctxt)
(715,pHddCtx->scan_ctxt.scan_work)
(716,hdd_open_cesium_nl_sock()
(717,rx_wake_lock)
(718,pHddCtx)
(719,)
(720,pHddCtx->cfg_ini)
(721,vStatus)
(722,wlan_hdd_restart_init(pHddCtx)
(723,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: nl_srv_init failed", __func__)
(724,"Registered IPv6 notifier")
(725,default_address =\n\\n         {{0x00, 0x0A, 0xF5, 0x89, 0x89, 0xFF}})
(726,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: btc_activate_service failed",__func__)
(727,status = vos_sched_close( pVosContext )
(728,pHddCtx->cfg_ini)
(729,pHddCtx)
(730,&pHddCtx->ssr_comp_var)
(731,pHddCtx)
(732,VOS_MODULE_ID_HDD)
(733,void *)
(734,if(!VOS_IS_STATUS_SUCCESS( status )
(735,if ( NULL == pP2pAdapter )
(736,)
(737,pHddCtx->rx_wake_lock)
(738,VOS_TRACE_LEVEL_ERROR)
(739,cfg_ini)
(740,wlan_hdd_cfg80211_register_frames(pAdapter)
(741,enable_11d)
(742,halStatus)
(743,cfg_ini)
(744,__func__)
(745,FALSE)
(746,pHddCtx)
(747,)
(748,pHddCtx->cfg_ini->nthBeaconFilter = 1)
(749,VOS_IS_STATUS_SUCCESS(vStatus)
(750,(tHalHandle)
(751,pAdapter)
(752,vStatus = WLANBAP_Start(pVosContext)
(753,init_completion(&pHddCtx->full_pwr_comp_var)
(754,cfg_ini)
(755,if (FALSE == hdd_update_config_dat(pHddCtx)
(756,if (!VOS_IS_STATUS_SUCCESS(status)
(757,goto err_close_adapter;)
(758,VOS_MODULE_ID_TL)
(759,pHddCtx->pvosContext)
(760,pHddCtx->cfg_ini->nthBeaconFilter)
(761,isLoadUnloadInProgress)
(762,sme_Register11dScanDoneCallback(pHddCtx->hHal, hdd_11d_scan_done)
(763,pHddCtx->isLogpInProgress)
(764,gEnableRoamDelayStats)
(765,mac_addr)
(766,status)
(767,sme_SetDefDot11Mode(pHddCtx->hHal)
(768,hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(769,btAmpConfig)
(770,response_event)
(771,vos_nv_close()
(772,tx_rx_trafficTmr)
(773,goto err_unregister_wiphy;)
(774,pHddCtx->cfg_ini->enableFWLogging)
(775,last_scan_reject_reason)
(776,(v_VOID_t*)
(777,__func__)
(778,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(779,VOS_TRACE_LEVEL_FATAL)
(780,pHddCtx)
(781,fIsLogpEnabled)
(782,hddDevTmUnregisterNotifyCallback(pHddCtx)
(783,0)
(784,cfg_ini)
(785,req_bmps_comp_var)
(786,&pHddCtx->cfg_ini->intfMacAddr[0])
(787,cfg_ini)
(788,NULL == pP2pAdapter)
(789,VOS_TRACE_LEVEL_ERROR)
(790,if (!VOS_IS_STATUS_SUCCESS(status)
(791,"%s: nl_srv_init failed")
(792,pHddCtx->cfg_ini)
(793,VosContextType*)
(794,vos_event_init(&pHddCtx->scan_info.scan_finished_event)
(795,WLAN_INI_FILE)
(796,pHddCtx->cfg_ini)
(797,memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],\n\\n                   sizeof(default_address)
(798,pHddCtx->cfg_ini->vosTraceEnableSAP)
(799,pHddCtx)
(800,mutex_init(&pHddCtx->cur_rx_level_lock)
(801,isLoadUnloadInProgress)
(802,status)
(803,status = vos_init_wiphy_from_nv_bin()
(804,pHddCtx->spoofMacAddr.macSpoofingLock)
(805,0 == enable_dfs_chan_scan || 1 == enable_dfs_chan_scan)
(806,hdd_config_t)
(807,pHddCtx)
(808,pHddCtx->cfg_ini->vosTraceEnableTL)
(809,pHddCtx->cfg_ini->dynSplitscan)
(810,hdd_set_ssr_required (VOS_FALSE)
(811,)
(812,VOS_PKT_PROTO_TYPE_DHCP)
(813,)
(814,0)
(815,pHddCtx->wmmLock)
(816,VOS_MODULE_ID_VOSS)
(817,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: HAL context is null", __func__)
(818,VOS_MODULE_ID_VOSS)
(819,!VOS_IS_STATUS_SUCCESS( status )
(820,TRUE)
(821,hdd_11d_scan_done)
(822,__func__)
(823,VOS_TRACE_LEVEL_ERROR)
(824,if(wiphy == NULL)
(825,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n              "%s: oem_activate_service failed", __func__)
(826,pHddCtx)
(827,goto err_close_adapter;)
(828,if (0 > wlan_hdd_cfg80211_register(wiphy)
(829,vosTraceEnableTL)
(830,&mac_addr)
(831,pHddCtx->p2pDeviceAddress.bytes[0])
(832,sizeof( hdd_context_t )
(833,pHddCtx)
(834,)
(835,__func__)
(836,pVosContext)
(837,scan_info)
(838,pHddCtx->cfg_ini->wlanLoggingEnable &&\n\\n               (pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump )
(839,pHddCtx)
(840,"%s: HAL context is null")
(841,mac_addr)
(842,hddRegisterPmOps(pHddCtx)
(843,&pHddCtx->p2pDeviceAddress.bytes[0])
(844,cfg_ini)
(845,pHddCtx->ipv6_notifier.notifier_call)
(846,pVosContext)
(847,0x02)
(848,tHalHandle)
(849,pHddCtx->p2pDeviceAddress)
(850,)
(851,(tSmeChangeCountryCallback)
(852,wlanPerPktStatsNumBuf)
(853,)
(854,__func__)
(855,pHddCtx->rx_sus_event_var)
(856,cfg_ini)
(857,pvosContext)
(858,)
(859,enableMgmtLogging)
(860,)
(861,WNI_CFG_STA_ID)
(862,cfg_ini)
(863,)
(864,schedScan_lock)
(865,__func__)
(866,1)
(867,pHddCtx)
(868,"%s: hdd_post_voss_start_config failed")
(869,ptt_sock_activate_svc(pHddCtx)
(870,VOS_FTM_MODE != hdd_get_conparam()
(871,pHddCtx)
(872,pHddCtx->cfg_ini)
(873,)
(874,hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
(875,wiphy)
(876,cur_rx_level_lock)
(877,wlan_hdd_cfg80211_nan_init(pHddCtx)
(878,if ( !VOS_IS_STATUS_SUCCESS( status )
(879,)
(880,tdls_lock)
(881,pHddCtx)
(882,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(883,pHddCtx->ipv6_notifier)
(884,wcnss_wlan_set_drvdata(pHddCtx->parent_dev, pHddCtx)
(885,"%s: btc_activate_service failed")
(886,status)
(887,vosTraceEnableSME)
(888,if( pAdapter == NULL )
(889,!VOS_IS_STATUS_SUCCESS( status )
(890,pHddCtx)
(891,ipv4_notifier)
(892,vos_set_logp_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(893,__func__)
(894,"%s: ROAM_SCAN_OFFLOAD Feature not supported")
(895,NULL)
(896,WLANBAP_Open(pVosContext)
(897,pHddCtx)
(898,pHddCtx->hHal)
(899,VOS_IS_STATUS_SUCCESS(vStatus)
(900,pHddCtx)
(901,pHddCtx)
(902,"%s: vos_init_wiphy failed")
(903,goto err_vosclose;)
(904,pHddCtx)
(905,if (0 >= ret)
(906,pHddCtx->scan_info)
(907,if ((0 == ret)
(908,fEnableSNRMonitoring)
(909,enable_11d)
(910,pConfig)
(911,pHddCtx->ipv6_notifier)
(912,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
(913,pHddCtx->parent_dev)
(914,pHddCtx)
(915,WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(916,return VOS_STATUS_SUCCESS;)
(917,cfg_ini)
(918,pHddCtx)
(919,NULL)
(920,dynSplitscan)
(921,0)
(922,pHddCtx)
(923,hddLog(VOS_TRACE_LEVEL_ERROR, "%s: hdd_open_adapter failed", __func__)
(924,0 >= ret)
(925,!VOS_IS_STATUS_SUCCESS(status)
(926,pHddCtx->cfg_ini)
(927,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Driver loaded in Monitor Mode",__func__)
(928,pAdapter)
(929,FL("Failed to register IPv6 notifier")
(930,VOS_TRACE_LEVEL_ERROR)
(931,pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging ||\n\\n                pHddCtx->cfg_ini->enableFwrMemDump)
(932,VOS_MODULE_ID_SME)
(933,pHddCtx->hHal)
(934,eSIR_TRUE)
(935,country_code)
(936,WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(937,hdd_wdi_trace_enable(eWLAN_MODULE_PAL,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnablePAL)
(938,(tHalHandle)
(939,btc_activate_service(pHddCtx)
(940,0 < wlan_hdd_cfg80211_init(dev, wiphy, pHddCtx->cfg_ini)
(941,goto err_reg_netdev;)
(942,0)
(943,pHddCtx)
(944,vos_preStart( pHddCtx->pvosContext )
(945,pHddCtx)
(946,pHddCtx->scan_ctxt)
(947,isLogpInProgress)
(948,pHddCtx)
(949,pHddCtx->cfg_ini)
(950,halStatus)
(951,VOS_PKT_PROTO_TYPE_DHCP |\n\\n           VOS_PKT_PROTO_TYPE_ARP)
(952,default_address)
(953,-EIO)
(954,if (hdd_open_cesium_nl_sock()
(955,if (TRUE == pHddCtx->cfg_ini->fenableCHAvoidance)
(956,vosTraceEnableBAP)
(957,0)
(958,vos_wake_lock_init(&pHddCtx->sap_wake_lock,\n\\n           "qcom_sap_wakelock")
(959,!VOS_IS_STATUS_SUCCESS(status)
(960,!VOS_IS_STATUS_SUCCESS( status )
(961,pHddCtx)
(962,hHal)
(963,err_unregister_pmops:)
(964,pHddCtx->cfg_ini)
(965,)
(966,pHddCtx)
(967,pHddCtx->hHal)
(968,cfg_ini)
(969,pHddCtx->nEnableStrictRegulatoryForFCC = FALSE)
(970,"%s: hdd_debugfs_init failed!")
(971,WLANBAP_SetConfig(&btAmpConfig)
(972,&pHddCtx->tx_sus_event_var)
(973,pHddCtx)
(974,sizeof(hdd_config_t)
(975,vos_get_context( VOS_MODULE_ID_SME, pVosContext )
(976,pHddCtx->cfg_ini->nBandCapability)
(977,__func__)
(978,wlan_hdd_change_tdls_mode)
(979,VOS_TRACE_LEVEL_FATAL)
(980,FALSE)
(981,FALSE)
(982,VOS_TRACE_LEVEL_FATAL)
(983,pHddCtx)
(984,default_address)
(985,pHddCtx->kd_nl_init)
(986,((VosContextType*)
(987,wlan_hdd_mon_open(pHddCtx)
(988,WLAN_HDD_P2P_DEVICE)
(989,(v_U8_t *)
(990,&pHddCtx->ipv4_notifier)
(991,pHddCtx)
(992,sizeof( pHddCtx->cfg_ini->intfMacAddr[0])
(993,pHddCtx->scan_info)
(994,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_open_cesium_nl_sock failed", __func__)
(995,vos_is_multicast_logging()
(996,if (p2p_dev_addr != NULL)
(997,err_bap_stop:)
(998,pHddCtx->cfg_ini == NULL)
(999,pHddCtx->p2pDeviceAddress.bytes)
(1000,)
(1001,)
(1002,pHddCtx->p2pDeviceAddress)
(1003,status)
(1004,hHal)
(1005,pHddCtx)
(1006,0)
(1007,"wcnss")
(1008,pHddCtx)
(1009,pHddCtx->cfg_ini->intfMacAddr)
(1010,WLAN_WAIT_TIME_COUNTRY)
(1011,0 == enable_11d)
(1012,"%s: Do not enable UAPSD")
(1013,status = vos_preStart( pHddCtx->pvosContext )
(1014,pHddCtx)
(1015,&pHddCtx->tdls_source_timer)
(1016,pHddCtx->cfg_ini)
(1017,pHddCtx->cfg_ini->vosTraceEnableSYS)
(1018,0)
(1019,pHddCtx->spoofMacAddr)
(1020,pHddCtx->scan_info.abortscan_event_var)
(1021,VOS_TRACE_LEVEL_FATAL)
(1022,"%s: cfg80211 init failed")
(1023,1)
(1024,0)
(1025,void *)
(1026,"%s: hddDevTmRegisterNotifyCallback failed")
(1027,0)
(1028,VOS_MODULE_ID_VOSS)
(1029,status = hdd_set_sme_config( pHddCtx )
(1030,pHddCtx->ipv4_notifier.notifier_call = wlan_hdd_ipv4_changed)
(1031,VOS_MODULE_ID_SYS)
(1032,scan_ctxt)
(1033,&hdd_netdev_notifier)
(1034,pVosContext)
(1035,pHddCtx->sap_wake_lock)
(1036,)
(1037,ret)
(1038,pHddCtx->scan_info.scan_req_completion_event)
(1039,VOS_MODULE_ID_VOSS)
(1040,goto err_wdclose;)
(1041,pAdapter)
(1042,0)
(1043,status)
(1044,macSpoofingLock)
(1045,VOS_FTM_MODE)
(1046,pHddCtx)
(1047,goto err_vosstop;)
(1048,pHddCtx->cfg_ini->vosTraceEnableHDDSAP)
(1049,0 > wlan_hdd_cfg80211_register(wiphy)
(1050,pHddCtx->cfg_ini)
(1051,sme_UpdateRoamScanOffloadEnabled((tHalHandle)
(1052,wlan_hdd_schedule_defer_scan)
(1053,pHddCtx->p2pDeviceAddress)
(1054,)
(1055,pHddCtx->ipv4_notifier)
(1056,p2p_dev_addr != NULL)
(1057,)
(1058,hdd_post_voss_start_config( pHddCtx )
(1059,pHddCtx->sap_lock)
(1060,pHddCtx->cfg_ini->vosTraceEnablePMC)
(1061,pHddCtx)
(1062,&pHddCtx->hddAdapters)
(1063,pHddCtx)
(1064,hdd_context_t)
(1065,"%s: Failed hdd_set_sme_config")
(1066,&pHddCtx->scan_ctxt.scan_work)
(1067,status)
(1068,cfg_ini)
(1069,status)
(1070,NULL)
(1071,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: error parsing %s",\n\\n             __func__, WLAN_INI_FILE)
(1072,pHddCtx->cfg_ini->UapsdMask)
(1073,)
(1074,nBandCapability)
(1075,VOS_STATUS_SUCCESS)
(1076,register_netdevice_notifier(&hdd_netdev_notifier)
(1077,)
(1078,vos_set_roam_delay_stats_enabled(pHddCtx->cfg_ini->gEnableRoamDelayStats)
(1079,wiphy)
(1080,hddDeregisterPmOps(pHddCtx)
(1081,"%s: wlan_hdd_mon_open Failed")
(1082,pConfig)
(1083,pHddCtx->cfg_ini)
(1084,halStatus)
(1085,pHddCtx)
(1086,pHddCtx->cfg_ini->UapsdMask)
(1087,0)
(1088,0)
(1089,goto err_reg_netdev;)
(1090,hdd_init_frame_logging(pHddCtx)
(1091,VOS_TRACE_LEVEL_FATAL)
(1092,hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv6 notifier")
(1093,intfMacAddr)
(1094,sizeof(tSirMacAddr)
(1095,hdd_vos_trace_enable(VOS_MODULE_ID_WDA,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableWDA)
(1096,parent_dev)
(1097,VOS_TRACE_LEVEL_ERROR)
(1098,if (country_code)
(1099,goto err_bap_close;)
(1100,pHddCtx->cfg_ini->dot11Mode)
(1101,pHddCtx->ext_scan_context.response_event)
(1102,VOS_TRACE_LEVEL_ERROR)
(1103,gEnableDebugLog)
(1104,VOS_TRACE_LEVEL_INFO)
(1105,pHddCtx->cfg_ini)
(1106,pHddCtx)
(1107,0 == memcmp(&default_address, &pHddCtx->cfg_ini->intfMacAddr[0],\n\\n                   sizeof(default_address)
(1108,pHddCtx->mc_sus_event_var)
(1109,ret = register_inet6addr_notifier(&pHddCtx->ipv6_notifier)
(1110,hdd_is_5g_supported(pHddCtx)
(1111,err_free_hdd_context:)
(1112,isSsrPanicOnFailure()
(1113,if ( VOS_STATUS_SUCCESS != wlan_hdd_ftm_open(pHddCtx)
(1114,)
(1115,wlan_hdd_get_intf_addr(pHddCtx)
(1116,pHddCtx)
(1117,pHddCtx->cfg_ini)
(1118,pHddCtx->cfg_ini)
(1119,pHddCtx)
(1120,success:)
(1121,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n               "%s: Failed to start TL",__func__)
(1122,pHddCtx->cfg_ini->wdiTraceEnableDAL)
(1123,cfg_ini)
(1124,pVosContext)
(1125,err_wdclose:)
(1126,)
(1127,)
(1128,pHddCtx)
(1129,pHddCtx->cfg_ini->enableFwrMemDump)
(1130,sme_ChangeCountryCode(pHddCtx->hHal,\n\\n                                  (void *)
(1131,WEXT_SCAN_PENDING_GIVEUP)
(1132,cfg_ini)
(1133,hdd_exchange_version_and_caps(pHddCtx)
(1134,goto err_free_hdd_context;)
(1135,&btAmpConfig)
(1136,pHddCtx)
(1137,parent_dev)
(1138,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                "%s: Failed to generate wlan interface mac addr "\n\\n                "using MAC from ini file ", __func__)
(1139,mcastBcastFilterSetting)
(1140,0 == enable_dfs_chan_scan)
(1141,pConfig->preferredChannel)
(1142,VOS_MODULE_ID_VOSS)
(1143,pAdapter)
(1144,status)
(1145,WLAN_HDD_LOAD_IN_PROGRESS)
(1146,pAdapter)
(1147,pHddCtx)
(1148,VOS_MAC_ADDR_SIZE)
(1149,pHddCtx->cfg_ini->fEnableSNRMonitoring)
(1150,pHddCtx)
(1151,pHddCtx->cfg_ini)
(1152,&pHddCtx->sap_lock)
(1153,goto success;)
(1154,VOS_TRACE_LEVEL_FATAL)
(1155,pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated)
(1156,if ( pHddCtx->cfg_ini->dynSplitscan)
(1157,cfg_ini)
(1158,pHddCtx)
(1159,if(pHddCtx->cfg_ini->fIsLogpEnabled)
(1160,hdd_dp_util_send_rps_ind(pHddCtx)
(1161,hddLog(VOS_TRACE_LEVEL_INFO, "%s: gEnableMemoryDebug=%d",\n\\n          __func__, pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(1162,__func__)
(1163,pHddCtx)
(1164,hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(1165,&pHddCtx->standby_comp_var)
(1166,init_completion(&pHddCtx->ssr_comp_var)
(1167,pHddCtx->isLoadUnloadInProgress)
(1168,wlan_hdd_init_channels_for_cc(pHddCtx, INIT)
(1169,0 == ret)
(1170,pHddCtx->cfg_ini)
(1171,pHddCtx->cfg_ini->IsMemoryDebugSupportEnabled)
(1172,pAdapter != NULL)
(1173,cfg_ini)
(1174,VOS_IS_STATUS_SUCCESS( status )
(1175,bytes)
(1176,pHddCtx->cfg_ini)
(1177,if(pHddCtx->cfg_ini == NULL)
(1178,goto err_vosclose;)
(1179,preferredChannel)
(1180,VOS_PKT_PROTO_TYPE_ARP)
(1181,wiphy)
(1182,pHddCtx)
(1183,if (wiphy)
(1184,pHddCtx)
(1185,pHddCtx)
(1186,pHddCtx)
(1187,pHddCtx)
(1188,scan_finished_event)
(1189,char*)
(1190,status = hdd_post_voss_start_config( pHddCtx )
(1191,"Setting configuredMcastBcastFilter: %d")
(1192,!HAL_STATUS_SUCCESS( halStatus )
(1193,pHddCtx->delack_timer)
(1194,default_address)
(1195,hdd_get_conparam()
(1196,"%s: wlan_logging_sock_activate_svc"\n\\n                   " failed")
(1197,pHddCtx->hddAdapters)
(1198,pHddCtx)
(1199,)
(1200,VOS_TIMER_TYPE_SW)
(1201,CFG_QOS_WMM_UAPSD_MASK_DEFAULT)
(1202,VOS_TRACE_LEVEL_ERROR)
(1203,hdd_vos_trace_enable(VOS_MODULE_ID_HDD,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableHDD)
(1204,)
(1205,pHddCtx->linux_reg_req)
(1206,!VOS_IS_STATUS_SUCCESS( status )
(1207,pHddCtx->isLoadUnloadInProgress)
(1208,if (isSsrPanicOnFailure()
(1209,IsMemoryDebugSupportEnabled)
(1210,default_address)
(1211,VOS_STA_SAP_MODE)
(1212,VOS_MODULE_ID_VOSS)
(1213,vos_mem_copy( pHddCtx->p2pDeviceAddress.bytes,\n\\n                       pHddCtx->cfg_ini->intfMacAddr[0].bytes,\n\\n                       sizeof(tSirMacAddr)
(1214,pHddCtx->hHal = (tHalHandle)
(1215,wlanLoggingFEToConsole)
(1216,VOS_STATUS_SUCCESS != status)
(1217,0x02)
(1218,pHddCtx->p2pDeviceAddress.bytes)
(1219,wlan_hdd_cfg80211_oemdata_callback)
(1220,cfg_ini)
(1221,msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
(1222,if (VOS_STATUS_SUCCESS != hdd_debugfs_init(pAdapter)
(1223,pHddCtx)
(1224,pVosContext)
(1225,status = vos_watchdog_open(pVosContext,\n\\n         &((VosContextType*)
(1226,req_riva_power_on_lock("wlan")
(1227,VOS_TRACE_LEVEL_FATAL)
(1228,)
(1229,if (req_riva_power_on_lock("wlan")
(1230,VOS_TRACE_LEVEL_FATAL)
(1231,pAdapter->change_country_code)
(1232,halStatus)
(1233,pHddCtx)
(1234,pHddCtx)
(1235,pConfig = pHddCtx->cfg_ini)
(1236,0)
(1237,0)
(1238,NULL)
(1239,__func__)
(1240,pHddCtx)
(1241,&pHddCtx->wmmLock)
(1242,VOS_IS_STATUS_SUCCESS(vStatus)
(1243,ret = register_inetaddr_notifier(&pHddCtx->ipv4_notifier)
(1244,UapsdMask)
(1245,status = vos_nv_open()
(1246,hdd_vos_trace_enable(VOS_MODULE_ID_SME,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableSME)
(1247,mac_addr)
(1248,wiphy_priv(wiphy)
(1249,"%s: Failed to open BAP")
(1250,pHddCtx->cfg_ini)
(1251,VOS_TRACE_LEVEL_ERROR)
(1252,pHddCtx)
(1253,pHddCtx->cfg_ini->intfMacAddr[0])
(1254,cfg_ini)
(1255,err_vos_nv_close:)
(1256,"%s: Failed to allocate mac_address for p2p_device")
(1257,!VOS_IS_STATUS_SUCCESS(vStatus)
(1258,&pHddCtx->full_pwr_comp_var)
(1259,goto err_config;)
(1260,VOS_FALSE)
(1261,wiphy)
(1262,pHddCtx->ipv4_notifier.notifier_call)
(1263,pHddCtx->parent_dev)
(1264,status = vos_open( &pVosContext, pHddCtx->parent_dev)
(1265,pHddCtx)
(1266,wiphy)
(1267,vos_nv_open()
(1268,VOS_TRACE_LEVEL_FATAL)
(1269,goto err_bap_stop;)
(1270,&pHddCtx->cur_rx_level_lock)
(1271,cfg_ini)
(1272,"wlan")
(1273,VOS_TRACE_LEVEL_FATAL)
(1274,pAdapter)
(1275,mc_sus_event_var)
(1276,rx_sus_event_var)
(1277,0 > wlan_hdd_cfg80211_register(wiphy)
(1278,roc_lock)
(1279,hdd_hostapd_ch_avoid_cb)
(1280,vStatus)
(1281,wcnss_get_wlan_mac_address((char*)
(1282,vStatus)
(1283,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wlan_hdd_mon_open Failed",__func__)
(1284,hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: Enable UAPSD for VI & VO",\n\\n                     __func__)
(1285,tHalHandle)
(1286,p2pDeviceAddress)
(1287,pHddCtx)
(1288,&default_address)
(1289,__func__)
(1290,vos_timer_init(&pHddCtx->tdls_source_timer, VOS_TIMER_TYPE_SW,\n\\n                  wlan_hdd_change_tdls_mode, (void *)
(1291,pHddCtx->cfg_ini->intfMacAddr[0])
(1292,dev)
(1293,status)
(1294,)
(1295,"%s: Enable UAPSD for VI & VO")
(1296,VOS_STATUS_SUCCESS)
(1297,vosTraceEnableHDD)
(1298,hdd_register_mcast_bcast_filter(pHddCtx)
(1299,hdd_wdi_trace_enable(eWLAN_MODULE_DAL,\n\\n                        pHddCtx->cfg_ini->wdiTraceEnableDAL)
(1300,pHddCtx)
(1301,pP2pAdapter)
(1302,)
(1303,&pHddCtx->rx_wake_lock)
(1304,pHddCtx)
(1305,FL("Failed to register IPv4 notifier")
(1306,hdd_get_conparam()
(1307,vosTraceEnableVOSS)
(1308,tSirMacAddr)
(1309,hddLog(VOS_TRACE_LEVEL_INFO, FL("Logging disabled in ini")
(1310,EIO)
(1311,)
(1312,void *)
(1313,!VOS_IS_STATUS_SUCCESS( status )
(1314,pHddCtx->hHal)
(1315,pHddCtx)
(1316,pHddCtx)
(1317,)
(1318,VosContextType*)
(1319,pHddCtx->cfg_ini->gEnableDebugLog =\n\\n           VOS_PKT_PROTO_TYPE_EAPOL | VOS_PKT_PROTO_TYPE_DHCP |\n\\n           VOS_PKT_PROTO_TYPE_ARP)
(1320,VOS_TRACE_LEVEL_ERROR)
(1321,pHddCtx)
(1322,VOS_TRACE_LEVEL_INFO)
(1323,cfg_ini)
(1324,cfgSetStr( pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n                             (v_U8_t *)
(1325,__func__)
(1326,!VOS_IS_STATUS_SUCCESS(status)
(1327,0)
(1328,wiphy_unregister(wiphy)
(1329,pAdapter)
(1330,&pHddCtx->mc_sus_event_var)
(1331,pHddCtx)
(1332,false)
(1333,pHddCtx->cfg_ini)
(1334,FALSE)
(1335,)
(1336,cfg_ini)
(1337,)
(1338,pHddCtx->parent_dev = dev)
(1339,pVosContext == NULL)
(1340,init_completion(&pHddCtx->standby_comp_var)
(1341,EIO)
(1342,0)
(1343,tdls_source_timer)
(1344,wiphy_free(wiphy)
(1345,hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",\n\\n                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
(1346,pHddCtx)
(1347,tx_sus_event_var)
(1348,pHddCtx->cfg_ini->intfMacAddr[0].bytes)
(1349,pHddCtx->cfg_ini)
(1350,pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(1351,pHddCtx)
(1352,pHddCtx)
(1353,__func__)
(1354,VOS_TIMER_TYPE_SW)
(1355,pHddCtx)
(1356,(void *)
(1357,__func__)
(1358,eWLAN_MODULE_DAL)
(1359,!VOS_IS_STATUS_SUCCESS( status )
(1360,ret)
(1361,"%s: module enable_dfs_chan_scan set to %d")
(1362,if (eHAL_STATUS_SUCCESS == ret)
(1363,wlan_hdd_get_intf_addr(pHddCtx)
(1364,vos_timer_init(&pHddCtx->delack_timer, VOS_TIMER_TYPE_SW,\n\\n                             hdd_tcp_delack_compute_function,(void *)
(1365,cfg_ini)
(1366,mutex_init(&pHddCtx->roc_lock)
(1367,hdd_config_t*)
(1368,wdiTraceEnablePAL)
(1369,ucPreferredChannel)
(1370,memdump_init()
(1371,*pHddCtx = NULL)
(1372,pHddCtx)
(1373,)
(1374,pHddCtx)
(1375,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",\n\\n                                     __func__)
(1376,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed vos_get_global_context",__func__)
(1377,VOS_MODULE_ID_HDD_SOFTAP)
(1378,NULL)
(1379,"%s: vos_start failed")
(1380,hdd_vos_trace_enable(VOS_MODULE_ID_VOSS,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableVOSS)
(1381,wlan_hdd_tdls_init(pHddCtx)
(1382,CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT)
(1383,((VosContextType*)
(1384,status)
(1385,if (VOS_STA_SAP_MODE == hdd_get_conparam()
(1386,wlan_logging_set_log_level()
(1387,vStatus)
(1388,)
(1389,__func__)
(1390,"%s: Failed vos_get_global_context")
(1391,)
(1392,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
(1393,FL("Logging disabled in ini")
(1394,vos_wake_lock_init(&pHddCtx->rx_wake_lock,\n\\n           "qcom_rx_wakelock")
(1395,pHddCtx->cfg_ini)
(1396,)
(1397,"%s: Driver loaded in Monitor Mode")
(1398,pHddCtx->cfg_ini->wlanPerPktStatsNumBuf)
(1399,NULL)
(1400,)
(1401,"%s: SME while setting country code timed out")
(1402,"%s: Setting pHddCtx->cfg_ini->nBandCapability = 1")
(1403,ret)
(1404,"%s: Failed to start TL")
(1405,enableFWLogging)
(1406,intfMacAddr)
(1407,pHddCtx->cfg_ini->vosTraceEnableSME)
(1408,err_nl_srv:)
(1409,hdd_is_ssr_required()
(1410,sizeof(hdd_context_t)
(1411,kd_nl_init)
(1412,UapsdMask)
(1413,pHddCtx->kd_nl_init = 1)
(1414,pHddCtx->last_scan_reject_session_id)
(1415,pHddCtx)
(1416,&pHddCtx->rx_sus_event_var)
(1417,if(!(IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE)
(1418,if ( !VOS_IS_STATUS_SUCCESS( status )
(1419,"%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1")
(1420,1 == enable_dfs_chan_scan)
(1421,pP2pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_P2P_DEVICE, "p2p%d",\n\\n                           &pHddCtx->p2pDeviceAddress.bytes[0], FALSE )
(1422,status)
(1423,__func__)
(1424,enableDFSChnlScan)
(1425,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n                 "%s: wlan_hdd_cfg80211_init return failure", __func__)
(1426,wiphy)
(1427,pHddCtx->hHal)
(1428,pHddCtx->standby_comp_var)
(1429,fIsLogpEnabled)
(1430,hddLog(VOS_TRACE_LEVEL_INFO, "%s: module enable_11d set to %d",\n\\n             __func__, enable_11d)
(1431,hdd_generate_iface_mac_addr_auto(pHddCtx, 0,\n\\n                                                            default_address)
(1432,hdd_open_adapter( pHddCtx, WLAN_HDD_INFRA_STATION, "wlan%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(1433,TRUE)
(1434,MAX_NUMBER_OF_ADAPTERS)
(1435,goto err_wdclose;)
(1436,pHddCtx->cfg_ini->intfMacAddr[0])
(1437,ret)
(1438,)
(1439,__func__)
(1440,hddLog(VOS_TRACE_LEVEL_WARN,\n\\n             "%s: Setting pHddCtx->cfg_ini->nthBeaconFilter = 1", __func__)
(1441,pHddCtx)
(1442,)
(1443,pHddCtx->hHal)
(1444,pHddCtx)
(1445,vStatus)
(1446,CFG_QOS_WMM_UAPSD_MASK_DEFAULT == pHddCtx->cfg_ini->UapsdMask)
(1447,&pHddCtx->scan_info.scan_finished_event)
(1448,pHddCtx)
(1449,dev)
(1450,eWLAN_MODULE_PAL)
(1451,VOS_TRACE_LEVEL_FATAL)
(1452,pHddCtx->tdls_lock)
(1453,__func__)
(1454,pHddCtx)
(1455,pHddCtx->isLoadUnloadInProgress)
(1456,vos_start( pHddCtx->pvosContext )
(1457,((VosContextType*)
(1458,VOS_TRACE_LEVEL_FATAL)
(1459,pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(1460,configuredMcastBcastFilter)
(1461,VOS_MODULE_ID_PE)
(1462,VOS_TRACE_LEVEL_INFO)
(1463,wait_for_completion_interruptible_timeout(\n\\n                       &pAdapter->change_country_code,\n\\n                       msecs_to_jiffies(WLAN_WAIT_TIME_COUNTRY)
(1464,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(1465,pHddCtx->scan_info.scan_finished_event)
(1466,0)
(1467,pHddCtx->cfg_ini)
(1468,pVosContext)
(1469,VOS_TRACE(VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n                      "%s: SME while setting country code timed out", __func__)
(1470,vosTraceEnablePE)
(1471,IS_ROAM_SCAN_OFFLOAD_FEATURE_ENABLE)
(1472,scan_info)
(1473,wiphy)
(1474,1 == enable_11d)
(1475,pHddCtx)
(1476,pHddCtx->p2pDeviceAddress.bytes)
(1477,hdd_context_t)
(1478,pHddCtx->cfg_ini->UapsdMask =\n\\n                   CFG_QOS_WMM_UAPSD_MASK_DYMANIC_WMM_PS_DEFAULT)
(1479,pHddCtx)
(1480,goto err_vosstop;)
(1481,last_scan_reject_timestamp)
(1482,ssr_comp_var)
(1483,"%s: hddRegisterPmOps failed")
(1484,sap_wake_lock)
(1485,VOS_ASSERT( VOS_IS_STATUS_SUCCESS( status )
(1486,0)
(1487,pVosContext)
(1488,pHddCtx)
(1489,eHAL_STATUS_SUCCESS == ret)
(1490,pHddCtx)
(1491,pHddCtx->cfg_ini)
(1492,pHddCtx->cfg_ini)
(1493,enable_dfs_chan_scan)
(1494,cfg_ini)
(1495,isLoadUnloadInProgress)
(1496,pHddCtx->ext_scan_context)
(1497,vStatus = WLANBAP_Open(pVosContext)
(1498,pHddCtx->cfg_ini->gEnableRoamDelayStats)
(1499,pHddCtx->nEnableStrictRegulatoryForFCC)
(1500,VOS_BUG(1)
(1501,pHddCtx->cfg_ini)
(1502,goto err_unregister_pmops;)
(1503,pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(1504,pHddCtx->pvosContext)
(1505,"%s: wlan_hdd_init_channels_for_cc failed")
(1506,hHal)
(1507,spoofMacAddr)
(1508,cfg_ini)
(1509,pHddCtx->scan_info)
(1510,UapsdMask)
(1511,bytes)
(1512,* p2p_dev_addr = wlan_hdd_get_intf_addr(pHddCtx)
(1513,VOS_STA_SAP_MODE == hdd_get_conparam()
(1514,pHddCtx)
(1515,wlan_hdd_cfg80211_update_reg_info( wiphy )
(1516,)
(1517,wlanPerPktStatsLogEnable)
(1518,ENTER()
(1519,wlan_hdd_init_deinit_defer_scan_context(&pHddCtx->scan_ctxt)
(1520,goto err_reg_netdev;)
(1521,pAdapter == NULL)
(1522,pHddCtx)
(1523,)
(1524,oem_activate_service(pHddCtx)
(1525,pHddCtx->cfg_ini)
(1526,!vos_is_macaddr_zero(&mac_addr)
(1527,wdiTraceEnableCTL)
(1528,pHddCtx)
(1529,pHddCtx->cfg_ini->UapsdMask =\n\\n                   CFG_QOS_WMM_UAPSD_MASK_LEGACY_WMM_PS_DEFAULT)
(1530,VOS_STATUS_SUCCESS)
(1531,pHddCtx)
(1532,enable_11d)
(1533,cfg_ini)
(1534,VOS_TRACE_LEVEL_FATAL)
(1535,kfree(pHddCtx->cfg_ini)
(1536,err_bap_close:)
(1537,country_code)
(1538,pHddCtx)
(1539,ret)
(1540,)
(1541,FL("Registered IPv4 notifier")
(1542,cfg_ini)
(1543,WLANBAP_Close(pVosContext)
(1544,hddLog(VOS_TRACE_LEVEL_INFO, "Setting configuredMcastBcastFilter: %d",\n\\n                   pHddCtx->cfg_ini->mcastBcastFilterSetting)
(1545,)
(1546,pHddCtx)
(1547,__func__)
(1548,hddLog(VOS_TRACE_LEVEL_DEBUG,"%s: ROAM_SCAN_OFFLOAD Feature not supported",__func__)
(1549,pHddCtx)
(1550,ret = sme_ChangeCountryCode(pHddCtx->hHal,\n\\n                                  (void *)
(1551,wlan_hdd_init_channels(pHddCtx)
(1552,pHddCtx)
(1553,enableContFWLogging)
(1554,__func__)
(1555,cfg_ini)
(1556,VOS_TRACE_LEVEL_INFO)
(1557,"%s: req riva power on lock failed")
(1558,NULL)
(1559,pHddCtx->ipv6_notifier.notifier_call = wlan_hdd_ipv6_changed)
(1560,pHddCtx->cfg_ini->fIsLogpEnabled)
(1561,mutex_init(&pHddCtx->spoofMacAddr.macSpoofingLock)
(1562,hddLog(VOS_TRACE_LEVEL_INFO, FL("Registered IPv4 notifier")
(1563,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",\n\\n             __func__)
(1564,wiphy)
(1565,pHddCtx)
(1566,if (0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 0,\n\\n                                                            default_address)
(1567,eHAL_STATUS_SUCCESS)
(1568,hdd_debugfs_exit(pHddCtx)
(1569,void *)
(1570,VOS_MONITOR_MODE)
(1571,hddDevTmRegisterNotifyCallback(pHddCtx)
(1572,__func__)
(1573,VOS_STATUS_SUCCESS)
(1574,nl_srv_exit(pHddCtx->ptt_pid)
(1575,NULL)
(1576,pAdapter)
(1577,init_completion(&pHddCtx->req_bmps_comp_var)
(1578,wlan_hdd_get_intf_addr(pHddCtx)
(1579,vos_set_load_unload_in_progress(VOS_MODULE_ID_VOSS, TRUE)
(1580,pHddCtx->cfg_ini->enableDFSChnlScan = enable_dfs_chan_scan)
(1581,status = wlan_hdd_init_channels(pHddCtx)
(1582,pHddCtx->cfg_ini->fenableCHAvoidance)
(1583,intfMacAddr)
(1584,nBandCapability)
(1585,pHddCtx->cfg_ini)
(1586,)
(1587,pHddCtx->cfg_ini->Is11dSupportEnabled)
(1588,vos_mem_init()
(1589,if (ret)
(1590,sme_SetPhyMode(WLAN_HDD_GET_HAL_CTX(pAdapter)
(1591,hHal)
(1592,vos_close(pVosContext )
(1593,pHddCtx->cfg_ini->intfMacAddr)
(1594,VOS_TRACE_LEVEL_FATAL)
(1595,pHddCtx->full_pwr_comp_var)
(1596,hdd_wlan_free_wiphy_channels(wiphy)
(1597,status = vos_start( pHddCtx->pvosContext )
(1598,init_completion(&pHddCtx->mc_sus_event_var)
(1599,ret)
(1600,goto err_close_adapter;)
(1601,)
(1602,cfg_ini)
(1603,pAdapter)
(1604,spin_lock_init(&pHddCtx->schedScan_lock)
(1605,__func__)
(1606,)
(1607,goto err_free_hdd_context;)
(1608,pHddCtx)
(1609,__func__)
(1610,pHddCtx->ipv4_notifier)
(1611,"wlan%d")
(1612,default_address)
(1613,pHddCtx)
(1614,pHddCtx->cfg_ini->Is11dSupportEnabled = enable_11d)
(1615,WIFI_POWER_EVENT_WAKELOCK_DRIVER_INIT)
(1616,"%s: vos_open failed")
(1617,pHddCtx)
(1618,vosTraceEnableSAP)
(1619,goto err_unregister_pmops;)
(1620,hdd_vos_trace_enable(VOS_MODULE_ID_PE,\n\\n                        pHddCtx->cfg_ini->vosTraceEnablePE)
(1621,enableFwrMemDump)
(1622,&pHddCtx->roc_lock)
(1623,goto err_vosclose;)
(1624,isRoamOffloadScanEnabled)
(1625,wlan_hdd_cfg80211_register(wiphy)
(1626,pHddCtx->hHal)
(1627,pHddCtx->cfg_ini)
(1628,intfMacAddr)
(1629,pHddCtx)
(1630,pHddCtx->cfg_ini)
(1631,pHddCtx->cfg_ini->mcastBcastFilterSetting)
(1632,hdd_get_conparam()
(1633,pHddCtx->cfg_ini->enableMgmtLogging)
(1634,__func__)
(1635,__func__)
(1636,pHddCtx->cfg_ini->intfMacAddr[0])
(1637,if(pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)
(1638,status)
(1639,pHddCtx)
(1640,pVosContext)
(1641,hdd_netdev_notifier)
(1642,vos_init_delayed_work(&pHddCtx->spoof_mac_addr_work,\n\\n                                hdd_processSpoofMacAddrRequest)
(1643,pHddCtx->p2pDeviceAddress)
(1644,pHddCtx->cfg_ini)
(1645,pHddCtx->tx_rx_trafficTmr)
(1646,VOS_TRACE_LEVEL_DEBUG)
(1647,&pHddCtx->wiphy_channel_update_event)
(1648,if ( VOS_STATUS_SUCCESS != status )
(1649,VOS_MODULE_ID_SYS)
(1650,err_vosstop:)
(1651,pHddCtx->isLoadUnloadInProgress = WLAN_HDD_NO_LOAD_UNLOAD_IN_PROGRESS)
(1652,pHddCtx)
(1653,pHddCtx->cfg_ini && pHddCtx->cfg_ini->wlanLoggingEnable)
(1654,cfg_ini)
(1655,pHddCtx)
(1656,hdd_vos_trace_enable(VOS_MODULE_ID_SAP,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableSAP)
(1657,__func__)
(1658,pHddCtx->isLogpInProgress = FALSE)
(1659,sme_EXTScanRegisterCallback(pHddCtx->hHal,\n\\n            wlan_hdd_cfg80211_extscan_callback,\n\\n                           pHddCtx)
(1660,return 0;)
(1661,status = hddDevTmRegisterNotifyCallback(pHddCtx)
(1662,)
(1663,status)
(1664,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_watchdog_open failed",__func__)
(1665,0)
(1666,pHddCtx->cfg_ini->intfMacAddr[0])
(1667,vStatus = VOS_STATUS_SUCCESS)
(1668,VOS_TRACE_LEVEL_FATAL)
(1669,mac_addr.bytes)
(1670,pHddCtx->tdls_source_timer)
(1671,hdd_netdev_notifier)
(1672,1)
(1673,if(!VOS_IS_STATUS_SUCCESS(vStatus)
(1674,goto err_vosclose;)
(1675,pHddCtx)
(1676,hdd_update_config_dat(pHddCtx)
(1677,pHddCtx = wiphy_priv(wiphy)
(1678,pHddCtx->cfg_ini->vosTraceEnablePE)
(1679,FL("Registered IPv6 notifier")
(1680,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: register_netdevice_notifier failed",__func__)
(1681,cfg_ini)
(1682,(void *)
(1683,VOS_TRACE_LEVEL_INFO)
(1684,"%s: config update failed")
(1685,pAdapter)
(1686,vosTraceEnableHDDSAP)
(1687,"%s: hdd_open_cesium_nl_sock failed")
(1688,hddLog(VOS_TRACE_LEVEL_FATAL,\n\\n                "%s: Failed to do hdd_open_adapter for P2P Device Interface",\n\\n                __func__)
(1689,ptt_pid)
(1690,pHddCtx->cfg_ini->intfMacAddr[0] = mac_addr)
(1691,hHal)
(1692,cfg_ini)
(1693,init_completion(&pHddCtx->tx_sus_event_var)
(1694,__func__)
(1695,enable_dfs_chan_scan)
(1696,VOS_STATUS_SUCCESS)
(1697,__func__)
(1698,vos_mem_zero(pHddCtx->cfg_ini, sizeof( hdd_config_t )
(1699,pHddCtx)
(1700,)
(1701,VOS_MODULE_ID_VOSS)
(1702,"%s: wlan_hdd_cfg80211_init return failure")
(1703,change_country_code)
(1704,pHddCtx)
(1705,country_code)
(1706,if ( !VOS_IS_STATUS_SUCCESS( status )
(1707,pHddCtx)
(1708,init_completion(&pHddCtx->rx_sus_event_var)
(1709,scan_pending_option)
(1710,pHddCtx)
(1711,FALSE)
(1712,vos_timer_init(&pHddCtx->tx_rx_trafficTmr,\n\\n                     VOS_TIMER_TYPE_SW,\n\\n                     hdd_tx_rx_pkt_cnt_stat_timer_handler,\n\\n                     (void *)
(1713,goto err_free_hdd_context;)
(1714,hdd_tcp_delack_compute_function)
(1715,VOS_STATUS_SUCCESS != hdd_update_config_from_nv(pHddCtx)
(1716,pHddCtx->p2pDeviceAddress.bytes)
(1717,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels failed",\n\\n             __func__)
(1718,&pHddCtx->spoofMacAddr.macSpoofingLock)
(1719,pHddCtx->cfg_ini->nBandCapability = 1)
(1720,pHddCtx)
(1721,if ( !VOS_IS_STATUS_SUCCESS( status )
(1722,status)
(1723,pHddCtx->cfg_ini->gEnableDebugLog)
(1724,pHddCtx->cfg_ini->nBandCapability)
(1725,isLoadUnloadInProgress)
(1726,wlan_hdd_cfg80211_register(wiphy)
(1727,__func__)
(1728,pHddCtx->cfg_ini->wdiTraceEnableDAT)
(1729,"%s: Failed to Init BSL")
(1730,)
(1731,0)
(1732,(0 == ret)
(1733,pHddCtx->cfg_ini)
(1734,pHddCtx->cfg_ini)
(1735,pHddCtx->hHal)
(1736,hdd_vos_trace_enable(VOS_MODULE_ID_WDI,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableWDI)
(1737,if(!VOS_IS_STATUS_SUCCESS(vStatus)
(1738,pHddCtx)
(1739,pHddCtx)
(1740,goto err_nl_srv;)
(1741,pHddCtx)
(1742,if (1 != pHddCtx->cfg_ini->nBandCapability)
(1743,pHddCtx->cfg_ini->isRoamOffloadScanEnabled = 0)
(1744,pHddCtx)
(1745,0 != hdd_generate_iface_mac_addr_auto(pHddCtx, 1, mac_addr)
(1746,goto err_vosclose;)
(1747,__func__)
(1748,pHddCtx)
(1749,hdd_vos_trace_enable(VOS_MODULE_ID_SYS,\n\\n                        pHddCtx->cfg_ini->vosTraceEnableSYS)
(1750,pHddCtx)
(1751,pHddCtx->scan_info.scan_pending_option)
(1752,pHddCtx)
(1753,pHddCtx->ptt_pid)
(1754,status)
(1755,pHddCtx)
(1756,free_riva_power_on_lock("wlan")
(1757,standby_comp_var)
(1758,cfg_ini)
(1759,VOS_STATUS_SUCCESS != wlan_hdd_mon_open(pHddCtx)
(1760,btAmpConfig)
(1761,(VosContextType*)
(1762,wdiTraceEnableDAT)
(1763,wlan_logging_sock_activate_svc(\n\\n                   pHddCtx->cfg_ini->wlanLoggingFEToConsole,\n\\n                   pHddCtx->cfg_ini->wlanLoggingNumBuf,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsLogEnable,\n\\n                   pHddCtx->cfg_ini->wlanPerPktStatsNumBuf)
(1764,"%s: Failed to set MAC Address. "\n\\n                "HALStatus is %08d [x%08x]")
(1765,cfg_ini)
(1766,VOS_STATUS_SUCCESS != status)
(1767,VOS_IS_STATUS_SUCCESS( status )
(1768,btAmpConfig.ucPreferredChannel)
(1769,ret)
(1770,pHddCtx->cfg_ini->intfMacAddr)
(1771,return VOS_STATUS_SUCCESS;)
(1772,VOS_IS_STATUS_SUCCESS( status )
(1773,goto err_free_hdd_context;)
(1774,)
(1775,init_completion(&pHddCtx->ext_scan_context.response_event)
(1776,pHddCtx)
(1777,status)
(1778,pHddCtx)
(1779,)
(1780,intfMacAddr)
(1781,pHddCtx->cfg_ini)
(1782,nl_srv_init()
(1783,__func__)
(1784,"%s: register_netdevice_notifier failed")
(1785,hdd_get_conparam()
(1786,pHddCtx->scan_ctxt)
(1787,pVosContext)
(1788,pHddCtx)
(1789,goto err_vos_nv_close;)
(1790,pHddCtx)
(1791,if (pHddCtx->cfg_ini->isP2pDeviceAddrAdministrated && !(pHddCtx->cfg_ini->intfMacAddr[0].bytes[0] & 0x02)
(1792,pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
(1793,pVosContext)
(1794,pAdapter->change_country_code)
(1795,__func__)
(1796,return -EIO;)
(1797,"%s: Failed to generate wlan interface mac addr "\n\\n                "using MAC from ini file ")
(1798,if ( VOS_STATUS_SUCCESS != status )
(1799,pAdapter = hdd_open_adapter( pHddCtx, WLAN_HDD_SOFTAP, "softap.%d",\n\\n         wlan_hdd_get_intf_addr(pHddCtx)
(1800,hdd_init_offloaded_packets_ctx(pHddCtx)
(1801,tSmeChangeCountryCallback)
(1802,1)
(1803,goto err_config;)
(1804,pHddCtx->configuredMcastBcastFilter)
(1805,)
(1806,regulatory_hint(wiphy, "00")
(1807,VOS_MODULE_ID_VOSS)
(1808,VOS_TRACE_LEVEL_ERROR)
(1809,sme_UpdateChannelConfig(pHddCtx->hHal)
(1810,&pHddCtx->tdls_lock)
(1811,ret)
(1812,pHddCtx->cfg_ini)
(1813,VOS_MODULE_ID_SME)
(1814,cfg_ini)
(1815,if(btc_activate_service(pHddCtx)
(1816,__func__)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^