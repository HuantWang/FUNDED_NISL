-----label-----
0
-----code-----
static void goodB2G()
{
    FILE * data;
    /* Initialize data */
    data = NULL;
    /* POTENTIAL FLAW: Open a file - need to make sure it is closed properly in the sink */
    data = freopen("BadSource_freopen.txt","w+",stdin);
    while(1)
    {
        if (data != NULL)
        {
            /* FIX: Close the file using fclose() */
            fclose(data);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
23,27
24,25
28,29
30,31
30,32
32,33
32,34
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,29,31,36,38,43,45,46
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
-----guardedBy-----
36,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    FILE * data;    /* Initialize data */    data = NULL;    /* POTENTIAL FLAW: Open a file - need to make sure it is closed properly in the sink */    data = freopen("BadSource_freopen.txt","w+",stdin);    while(1)    {        if (data != NULL)        {            /* FIX: Close the file using fclose() */            fclose(data);        }        break;    }}
static void
goodB2G()
goodB2G
{    FILE * data;    /* Initialize data */    data = NULL;    /* POTENTIAL FLAW: Open a file - need to make sure it is closed properly in the sink */    data = freopen("BadSource_freopen.txt","w+",stdin);    while(1)    {        if (data != NULL)        {            /* FIX: Close the file using fclose() */            fclose(data);        }        break;    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = freopen("BadSource_freopen.txt","w+",stdin);
data = freopen("BadSource_freopen.txt","w+",stdin)
data
data
freopen("BadSource_freopen.txt","w+",stdin)
freopen
freopen
"BadSource_freopen.txt"
"w+"
stdin
stdin
while(1)    {        if (data != NULL)        {            /* FIX: Close the file using fclose() */            fclose(data);        }        break;    }
1
{        if (data != NULL)        {            /* FIX: Close the file using fclose() */            fclose(data);        }        break;    }
if (data != NULL)        {            /* FIX: Close the file using fclose() */            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            /* FIX: Close the file using fclose() */            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
break;
-----joern-----
(15,3,0)
(16,8,0)
(6,5,0)
(22,3,0)
(3,22,0)
(10,22,0)
(19,0,0)
(7,22,0)
(11,22,0)
(19,3,0)
(2,15,0)
(12,15,0)
(13,3,0)
(4,21,0)
(21,5,0)
(17,19,0)
(18,5,0)
(3,5,0)
(14,8,0)
(9,21,0)
(16,15,1)
(21,9,1)
(2,12,1)
(16,19,1)
(15,3,1)
(19,17,1)
(9,4,1)
(10,13,1)
(1,3,1)
(13,21,1)
(11,10,1)
(20,16,1)
(3,22,1)
(19,3,1)
(15,2,1)
(22,7,1)
(17,15,1)
(12,1,1)
(20,1,1)
(7,11,1)
(16,1,2)
(2,1,2)
(12,1,2)
(15,3,2)
(15,1,2)
(19,3,2)
(3,22,2)
(19,15,2)
(17,15,2)
-----------------------------------
(0,)
(1,1)
(2,NULL)
(3,data = freopen("BadSource_freopen.txt","w+",stdin)
(4,data)
(5,)
(6,data)
(7,stdin)
(8,)
(9,NULL)
(10,"BadSource_freopen.txt")
(11,"w+")
(12,data)
(13,data)
(14,if (data != NULL)
(15,data != NULL)
(16,break;)
(17,data)
(18,while(1)
(19,fclose(data)
(20,RET)
(21,data = NULL)
(22,freopen("BadSource_freopen.txt","w+",stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^