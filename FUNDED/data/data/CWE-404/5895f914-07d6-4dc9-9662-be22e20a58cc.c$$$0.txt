-----label-----
0
-----code-----
static int srpt_parse_i_port_id(u8 i_port_id[16], const char *name)
{
	const char *p;
	unsigned len, count, leading_zero_bytes;
	int ret, rc;

	p = name;
	if (strncasecmp(p, "0x", 2) == 0)
		p += 2;
	ret = -EINVAL;
	len = strlen(p);
	if (len % 2)
		goto out;
	count = min(len / 2, 16U);
	leading_zero_bytes = 16 - count;
	memset(i_port_id, 0, leading_zero_bytes);
	rc = hex2bin(i_port_id + leading_zero_bytes, p, count);
	if (rc < 0)
		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", rc);
	ret = 0;
out:
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
10,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
18,19
19,20
19,21
21,22
21,23
24,25
25,26
25,27
25,28
25,29
27,28
29,30
31,32
33,34
34,35
34,36
34,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
48,51
48,52
49,50
51,52
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
89,90
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
102,103
104,105
105,106
105,107
105,108
105,109
106,107
108,109
111,112
113,114
114,115
114,116
115,116
117,118
117,119
117,120
117,121
118,119
120,121
120,122
121,122
123,124
125,126
127,128
129,130
129,131
130,131
130,132
131,132
134,135
135,136
135,137
135,138
136,137
139,140
141,142
142,143
142,144
143,144
146,147
146,148
148,149
149,150
-----nextToken-----
2,4,7,9,11,13,15,16,20,22,23,26,28,30,32,35,37,39,43,45,50,52,53,54,55,59,60,64,67,71,74,76,80,81,83,87,90,93,94,95,99,101,103,107,109,110,112,116,119,122,124,126,128,132,133,137,138,140,144,145,147,150
-----computeFrom-----
41,42
41,43
47,48
47,49
57,58
57,59
62,63
62,64
69,70
69,71
78,79
78,80
85,86
85,87
91,92
91,93
97,98
97,99
100,101
100,102
114,115
114,116
120,121
120,122
130,131
130,132
142,143
142,144
-----guardedBy-----
52,59
132,140
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int srpt_parse_i_port_id(u8 i_port_id[16], const char *name){	const char *p;	unsigned len, count, leading_zero_bytes;	int ret, rc;	p = name;	if (strncasecmp(p, "0x", 2) == 0)		p += 2;	ret = -EINVAL;	len = strlen(p);	if (len % 2)		goto out;	count = min(len / 2, 16U);	leading_zero_bytes = 16 - count;	memset(i_port_id, 0, leading_zero_bytes);	rc = hex2bin(i_port_id + leading_zero_bytes, p, count);	if (rc < 0)		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", rc);	ret = 0;out:	return ret;}
static int
srpt_parse_i_port_id(u8 i_port_id[16], const char *name)
srpt_parse_i_port_id
u8 i_port_id[16]
u8
u8
i_port_id[16]
i_port_id
[16]
16
const char *name
const char
*name
*
name
{	const char *p;	unsigned len, count, leading_zero_bytes;	int ret, rc;	p = name;	if (strncasecmp(p, "0x", 2) == 0)		p += 2;	ret = -EINVAL;	len = strlen(p);	if (len % 2)		goto out;	count = min(len / 2, 16U);	leading_zero_bytes = 16 - count;	memset(i_port_id, 0, leading_zero_bytes);	rc = hex2bin(i_port_id + leading_zero_bytes, p, count);	if (rc < 0)		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", rc);	ret = 0;out:	return ret;}
const char *p;
const char *p;
const char
*p
*
p
unsigned len, count, leading_zero_bytes;
unsigned len, count, leading_zero_bytes;
unsigned
len
len
count
count
leading_zero_bytes
leading_zero_bytes
int ret, rc;
int ret, rc;
int
ret
ret
rc
rc
p = name;
p = name
p
p
name
name
if (strncasecmp(p, "0x", 2) == 0)		p += 2;
strncasecmp(p, "0x", 2) == 0
strncasecmp(p, "0x", 2)
strncasecmp
strncasecmp
p
p
"0x"
2
0
p += 2;
p += 2
p
p
2
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
len = strlen(p);
len = strlen(p)
len
len
strlen(p)
strlen
strlen
p
p
if (len % 2)		goto out;
len % 2
len
len
2
goto out;
out
count = min(len / 2, 16U);
count = min(len / 2, 16U)
count
count
min(len / 2, 16U)
min
min
len / 2
len
len
2
16U
leading_zero_bytes = 16 - count;
leading_zero_bytes = 16 - count
leading_zero_bytes
leading_zero_bytes
16 - count
16
count
count
memset(i_port_id, 0, leading_zero_bytes);
memset(i_port_id, 0, leading_zero_bytes)
memset
memset
i_port_id
i_port_id
0
leading_zero_bytes
leading_zero_bytes
rc = hex2bin(i_port_id + leading_zero_bytes, p, count);
rc = hex2bin(i_port_id + leading_zero_bytes, p, count)
rc
rc
hex2bin(i_port_id + leading_zero_bytes, p, count)
hex2bin
hex2bin
i_port_id + leading_zero_bytes
i_port_id
i_port_id
leading_zero_bytes
leading_zero_bytes
p
p
count
count
if (rc < 0)		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", rc);
rc < 0
rc
rc
0
pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", rc);
pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", rc)
pr_debug
pr_debug
"hex2bin failed for srpt_parse_i_port_id: %d\n"
rc
rc
ret = 0;
ret = 0
ret
ret
0
out:	return ret;
out
return ret;
ret
ret
-----joern-----
(40,60,0)
(51,64,0)
(19,64,0)
(43,68,0)
(58,68,0)
(31,55,0)
(38,36,0)
(64,68,0)
(6,23,0)
(39,68,0)
(0,67,0)
(58,15,0)
(23,60,0)
(27,46,0)
(16,19,0)
(59,31,0)
(47,17,0)
(17,36,0)
(47,62,0)
(60,23,0)
(28,66,0)
(23,67,0)
(18,40,0)
(56,25,0)
(36,31,0)
(54,39,0)
(72,36,0)
(41,31,0)
(67,68,0)
(22,9,0)
(8,59,0)
(63,41,0)
(1,58,0)
(48,60,0)
(42,68,0)
(35,68,0)
(57,31,0)
(12,68,0)
(61,17,0)
(7,25,0)
(66,67,0)
(62,68,0)
(17,47,0)
(4,31,0)
(70,68,0)
(59,46,0)
(30,1,0)
(47,37,0)
(26,47,0)
(62,25,0)
(31,68,0)
(1,39,0)
(53,39,0)
(25,40,0)
(40,68,0)
(15,58,0)
(13,64,0)
(20,58,0)
(41,67,0)
(14,59,0)
(9,37,0)
(3,62,0)
(9,62,0)
(11,15,0)
(33,51,0)
(69,17,0)
(21,9,0)
(46,59,0)
(24,23,0)
(9,68,0)
(10,59,0)
(17,31,0)
(1,68,0)
(17,40,0)
(49,19,0)
(32,47,0)
(5,68,0)
(71,68,0)
(25,62,0)
(34,51,0)
(45,68,0)
(64,17,0)
(65,68,0)
(44,9,0)
(41,36,0)
(67,41,0)
(60,40,0)
(17,64,0)
(2,68,0)
(50,1,0)
(52,66,0)
(21,44,1)
(23,6,1)
(44,62,1)
(8,31,1)
(48,23,1)
(0,58,1)
(66,28,1)
(61,69,1)
(34,64,1)
(20,46,1)
(33,34,1)
(30,39,1)
(26,13,1)
(24,18,1)
(30,29,1)
(28,52,1)
(54,51,1)
(52,67,1)
(46,27,1)
(20,36,1)
(15,11,1)
(25,7,1)
(64,17,1)
(54,19,1)
(1,39,1)
(56,3,1)
(40,60,1)
(59,31,1)
(9,62,1)
(7,56,1)
(27,59,1)
(1,30,1)
(19,64,1)
(17,61,1)
(47,62,1)
(36,31,1)
(16,51,1)
(47,32,1)
(50,1,1)
(67,41,1)
(69,47,1)
(19,49,1)
(31,55,1)
(23,67,1)
(17,36,1)
(51,33,1)
(3,40,1)
(58,15,1)
(47,37,1)
(17,40,1)
(32,26,1)
(11,20,1)
(1,58,1)
(29,66,1)
(72,38,1)
(38,46,1)
(41,63,1)
(41,31,1)
(59,10,1)
(9,37,1)
(39,53,1)
(10,14,1)
(53,54,1)
(6,24,1)
(62,25,1)
(66,67,1)
(57,4,1)
(36,72,1)
(9,22,1)
(14,8,1)
(13,9,1)
(51,64,1)
(17,47,1)
(60,23,1)
(25,40,1)
(46,59,1)
(18,66,1)
(49,16,1)
(60,48,1)
(41,36,1)
(31,57,1)
(22,21,1)
(63,0,1)
(17,31,1)
(72,46,2)
(40,66,2)
(9,37,2)
(31,55,2)
(23,67,2)
(50,1,2)
(32,66,2)
(17,36,2)
(29,66,2)
(24,66,2)
(16,51,2)
(59,31,2)
(53,66,2)
(6,66,2)
(17,47,2)
(36,46,2)
(62,66,2)
(21,66,2)
(64,17,2)
(9,66,2)
(9,62,2)
(23,66,2)
(61,66,2)
(56,66,2)
(1,39,2)
(46,59,2)
(67,41,2)
(36,31,2)
(25,40,2)
(41,36,2)
(13,66,2)
(69,66,2)
(33,66,2)
(19,51,2)
(18,66,2)
(7,66,2)
(66,67,2)
(19,64,2)
(47,37,2)
(60,66,2)
(51,66,2)
(3,66,2)
(41,31,2)
(1,58,2)
(34,66,2)
(60,23,2)
(40,60,2)
(58,15,2)
(38,46,2)
(17,66,2)
(51,64,2)
(39,66,2)
(17,40,2)
(25,66,2)
(47,66,2)
(47,62,2)
(48,66,2)
(22,66,2)
(44,66,2)
(17,31,2)
(49,51,2)
(26,66,2)
(62,25,2)
(64,66,2)
(54,66,2)
-----------------------------------
(0,len)
(1,return ret;)
(2,len)
(3,leading_zero_bytes)
(4,p)
(5,if (strncasecmp(p, "0x", 2)
(6,2)
(7,count)
(8,p)
(9,memset(i_port_id, 0, leading_zero_bytes)
(10,2)
(11,EINVAL)
(12,out:)
(13,rc)
(14,"0x")
(15,-EINVAL)
(16,"hex2bin failed for srpt_parse_i_port_id: %d\\n")
(17,hex2bin(i_port_id + leading_zero_bytes, p, count)
(18,count)
(19,pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\\n", rc)
(20,ret)
(21,0)
(22,leading_zero_bytes)
(23,len / 2)
(24,len)
(25,16 - count)
(26,i_port_id)
(27,0)
(28,2)
(29,goto out;)
(30,ret)
(31,p = name)
(32,leading_zero_bytes)
(33,0)
(34,rc)
(35,count)
(36,p += 2)
(37,u8 i_port_id[16])
(38,p)
(39,ret = 0)
(40,count = min(len / 2, 16U)
(41,strlen(p)
(42,ret)
(43,leading_zero_bytes)
(44,i_port_id)
(45,p)
(46,strncasecmp(p, "0x", 2)
(47,i_port_id + leading_zero_bytes)
(48,16U)
(49,rc)
(50,RET)
(51,rc < 0)
(52,len)
(53,0)
(54,ret)
(55,const char *name)
(56,16)
(57,name)
(58,ret = -EINVAL)
(59,strncasecmp(p, "0x", 2)
(60,min(len / 2, 16U)
(61,count)
(62,leading_zero_bytes = 16 - count)
(63,p)
(64,rc = hex2bin(i_port_id + leading_zero_bytes, p, count)
(65,if (rc < 0)
(66,len % 2)
(67,len = strlen(p)
(68,)
(69,p)
(70,if (len % 2)
(71,rc)
(72,2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^