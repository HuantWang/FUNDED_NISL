-----label-----
0
-----code-----
static int as102_firmware_upload(struct as10x_bus_adapter_t *bus_adap,
				 unsigned char *cmd,
				 const struct firmware *firmware) {

	struct as10x_fw_pkt_t *fw_pkt;
	int total_read_bytes = 0, errno = 0;
	unsigned char addr_has_changed = 0;

	fw_pkt = kmalloc(sizeof(*fw_pkt), GFP_KERNEL);
	if (!fw_pkt)
		return -ENOMEM;


	for (total_read_bytes = 0; total_read_bytes < firmware->size; ) {
		int read_bytes = 0, data_len = 0;

		/* parse intel hex line */
		read_bytes = parse_hex_line(
				(u8 *) (firmware->data + total_read_bytes),
				fw_pkt->raw.address,
				fw_pkt->raw.data,
				&data_len,
				&addr_has_changed);

		if (read_bytes <= 0)
			goto error;

		/* detect the end of file */
		total_read_bytes += read_bytes;
		if (total_read_bytes == firmware->size) {
			fw_pkt->u.request[0] = 0x00;
			fw_pkt->u.request[1] = 0x03;

			/* send EOF command */
			errno = bus_adap->ops->upload_fw_pkt(bus_adap,
							     (uint8_t *)
							     fw_pkt, 2, 0);
			if (errno < 0)
				goto error;
		} else {
			if (!addr_has_changed) {
				/* prepare command to send */
				fw_pkt->u.request[0] = 0x00;
				fw_pkt->u.request[1] = 0x01;

				data_len += sizeof(fw_pkt->u.request);
				data_len += sizeof(fw_pkt->raw.address);

				/* send cmd to device */
				errno = bus_adap->ops->upload_fw_pkt(bus_adap,
								     (uint8_t *)
								     fw_pkt,
								     data_len,
								     0);
				if (errno < 0)
					goto error;
			}
		}
	}
error:
	kfree(fw_pkt);
	return (errno == 0) ? total_read_bytes : errno;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
31,34
33,34
33,35
35,36
37,38
37,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
56,57
57,58
58,59
60,61
62,63
62,64
63,64
64,65
66,67
67,68
68,69
70,71
70,72
70,73
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
79,81
80,81
83,84
83,85
83,86
83,87
83,88
84,85
85,86
85,87
85,88
87,88
87,89
89,90
91,92
91,93
93,94
95,96
96,97
96,98
97,98
99,100
99,101
99,102
99,103
99,104
99,105
100,101
102,103
102,104
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
116,118
117,118
117,119
118,119
122,123
122,124
123,124
123,125
124,125
128,129
129,130
131,132
132,133
134,135
134,136
135,136
135,137
136,137
139,140
141,142
142,143
142,144
143,144
145,146
147,148
147,149
147,150
148,149
148,150
149,150
151,152
151,153
152,153
155,156
155,157
155,158
155,159
156,157
157,158
157,159
158,159
158,160
159,160
159,161
160,161
160,162
161,162
167,168
168,169
168,170
169,170
169,171
170,171
170,172
171,172
171,173
172,173
178,179
179,180
179,181
180,181
182,183
182,184
182,185
182,186
182,187
183,184
183,185
184,185
184,186
185,186
189,190
191,192
191,193
192,193
192,194
193,194
195,196
197,198
201,202
201,203
202,203
202,204
203,204
206,207
208,209
209,210
209,211
210,211
211,212
213,214
213,215
213,216
213,217
213,218
213,219
214,215
215,216
215,217
216,217
216,218
217,218
217,219
218,219
218,220
219,220
225,226
226,227
226,228
227,228
227,229
228,229
228,230
229,230
229,231
230,231
236,237
237,238
237,239
238,239
240,241
241,242
242,243
242,244
243,244
243,245
244,245
248,249
249,250
249,251
250,251
252,253
253,254
254,255
254,256
255,256
255,257
256,257
260,261
261,262
261,263
262,263
264,265
264,266
264,267
264,268
264,269
265,266
265,267
266,267
266,268
267,268
271,272
273,274
273,275
274,275
274,276
275,276
277,278
279,280
281,282
284,285
284,286
285,286
285,287
286,287
289,290
291,292
291,293
293,294
294,295
294,296
295,296
297,298
299,300
300,301
300,302
300,303
301,302
302,303
302,304
303,304
306,307
308,309
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,21,26,28,29,32,34,36,38,40,43,45,47,51,54,59,61,65,69,74,75,78,81,82,86,88,90,92,94,98,101,105,107,112,113,115,119,120,121,125,126,127,130,133,137,138,140,144,146,150,153,154,162,163,164,165,166,173,174,175,176,177,181,186,187,188,190,194,196,198,199,200,204,205,207,212,220,221,222,223,224,231,232,233,234,235,239,245,246,247,251,257,258,259,263,268,269,270,272,276,278,280,282,283,287,288,290,292,296,298,304,305,307,309
-----computeFrom-----
49,50
49,51
72,73
72,74
76,77
76,78
96,97
96,98
109,110
109,111
135,136
135,137
142,143
142,144
148,149
148,150
157,158
157,159
168,169
168,170
179,180
179,181
202,203
202,204
215,216
215,217
226,227
226,228
237,238
237,239
249,250
249,251
261,262
261,263
285,286
285,287
302,303
302,304
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int as102_firmware_upload(struct as10x_bus_adapter_t *bus_adap,				 unsigned char *cmd,				 const struct firmware *firmware) {	struct as10x_fw_pkt_t *fw_pkt;	int total_read_bytes = 0, errno = 0;	unsigned char addr_has_changed = 0;	fw_pkt = kmalloc(sizeof(*fw_pkt), GFP_KERNEL);	if (!fw_pkt)		return -ENOMEM;	for (total_read_bytes = 0; total_read_bytes < firmware->size; ) {		int read_bytes = 0, data_len = 0;		/* parse intel hex line */		read_bytes = parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed);		if (read_bytes <= 0)			goto error;		/* detect the end of file */		total_read_bytes += read_bytes;		if (total_read_bytes == firmware->size) {			fw_pkt->u.request[0] = 0x00;			fw_pkt->u.request[1] = 0x03;			/* send EOF command */			errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);			if (errno < 0)				goto error;		} else {			if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}		}	}error:	kfree(fw_pkt);	return (errno == 0) ? total_read_bytes : errno;}
static int
as102_firmware_upload(struct as10x_bus_adapter_t *bus_adap,				 unsigned char *cmd,				 const struct firmware *firmware)
as102_firmware_upload
struct as10x_bus_adapter_t *bus_adap
struct as10x_bus_adapter_t
as10x_bus_adapter_t
*bus_adap
*
bus_adap
unsigned char *cmd
unsigned char
*cmd
*
cmd
const struct firmware *firmware
const struct firmware
firmware
*firmware
*
firmware
{	struct as10x_fw_pkt_t *fw_pkt;	int total_read_bytes = 0, errno = 0;	unsigned char addr_has_changed = 0;	fw_pkt = kmalloc(sizeof(*fw_pkt), GFP_KERNEL);	if (!fw_pkt)		return -ENOMEM;	for (total_read_bytes = 0; total_read_bytes < firmware->size; ) {		int read_bytes = 0, data_len = 0;		/* parse intel hex line */		read_bytes = parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed);		if (read_bytes <= 0)			goto error;		/* detect the end of file */		total_read_bytes += read_bytes;		if (total_read_bytes == firmware->size) {			fw_pkt->u.request[0] = 0x00;			fw_pkt->u.request[1] = 0x03;			/* send EOF command */			errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);			if (errno < 0)				goto error;		} else {			if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}		}	}error:	kfree(fw_pkt);	return (errno == 0) ? total_read_bytes : errno;}
struct as10x_fw_pkt_t *fw_pkt;
struct as10x_fw_pkt_t *fw_pkt;
struct as10x_fw_pkt_t
as10x_fw_pkt_t
*fw_pkt
*
fw_pkt
int total_read_bytes = 0, errno = 0;
int total_read_bytes = 0, errno = 0;
int
total_read_bytes = 0
total_read_bytes
= 0
0
errno = 0
errno
= 0
0
unsigned char addr_has_changed = 0;
unsigned char addr_has_changed = 0;
unsigned char
addr_has_changed = 0
addr_has_changed
= 0
0
fw_pkt = kmalloc(sizeof(*fw_pkt), GFP_KERNEL);
fw_pkt = kmalloc(sizeof(*fw_pkt), GFP_KERNEL)
fw_pkt
fw_pkt
kmalloc(sizeof(*fw_pkt), GFP_KERNEL)
kmalloc
kmalloc
sizeof(*fw_pkt)
(*fw_pkt)
*fw_pkt
fw_pkt
fw_pkt
GFP_KERNEL
GFP_KERNEL
if (!fw_pkt)		return -ENOMEM;
!fw_pkt
fw_pkt
fw_pkt
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
for (total_read_bytes = 0; total_read_bytes < firmware->size; ) {		int read_bytes = 0, data_len = 0;		/* parse intel hex line */		read_bytes = parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed);		if (read_bytes <= 0)			goto error;		/* detect the end of file */		total_read_bytes += read_bytes;		if (total_read_bytes == firmware->size) {			fw_pkt->u.request[0] = 0x00;			fw_pkt->u.request[1] = 0x03;			/* send EOF command */			errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);			if (errno < 0)				goto error;		} else {			if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}		}	}
total_read_bytes = 0;
total_read_bytes = 0
total_read_bytes
total_read_bytes
0
total_read_bytes < firmware->size
total_read_bytes
total_read_bytes
firmware->size
firmware
firmware
size
{		int read_bytes = 0, data_len = 0;		/* parse intel hex line */		read_bytes = parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed);		if (read_bytes <= 0)			goto error;		/* detect the end of file */		total_read_bytes += read_bytes;		if (total_read_bytes == firmware->size) {			fw_pkt->u.request[0] = 0x00;			fw_pkt->u.request[1] = 0x03;			/* send EOF command */			errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);			if (errno < 0)				goto error;		} else {			if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}		}	}
int read_bytes = 0, data_len = 0;
int read_bytes = 0, data_len = 0;
int
read_bytes = 0
read_bytes
= 0
0
data_len = 0
data_len
= 0
0
read_bytes = parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed);
read_bytes = parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed)
read_bytes
read_bytes
parse_hex_line(				(u8 *) (firmware->data + total_read_bytes),				fw_pkt->raw.address,				fw_pkt->raw.data,				&data_len,				&addr_has_changed)
parse_hex_line
parse_hex_line
(u8 *) (firmware->data + total_read_bytes)
u8 *
u8
u8
*
*
(firmware->data + total_read_bytes)
firmware->data + total_read_bytes
firmware->data
firmware
firmware
data
total_read_bytes
total_read_bytes
fw_pkt->raw.address
fw_pkt->raw
fw_pkt
fw_pkt
raw
address
fw_pkt->raw.data
fw_pkt->raw
fw_pkt
fw_pkt
raw
data
&data_len
data_len
data_len
&addr_has_changed
addr_has_changed
addr_has_changed
if (read_bytes <= 0)			goto error;
read_bytes <= 0
read_bytes
read_bytes
0
goto error;
error
total_read_bytes += read_bytes;
total_read_bytes += read_bytes
total_read_bytes
total_read_bytes
read_bytes
read_bytes
if (total_read_bytes == firmware->size) {			fw_pkt->u.request[0] = 0x00;			fw_pkt->u.request[1] = 0x03;			/* send EOF command */			errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);			if (errno < 0)				goto error;		} else {			if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}		}
total_read_bytes == firmware->size
total_read_bytes
total_read_bytes
firmware->size
firmware
firmware
size
{			fw_pkt->u.request[0] = 0x00;			fw_pkt->u.request[1] = 0x03;			/* send EOF command */			errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);			if (errno < 0)				goto error;		}
fw_pkt->u.request[0] = 0x00;
fw_pkt->u.request[0] = 0x00
fw_pkt->u.request[0]
fw_pkt->u.request
fw_pkt->u
fw_pkt
fw_pkt
u
request
0
0x00
fw_pkt->u.request[1] = 0x03;
fw_pkt->u.request[1] = 0x03
fw_pkt->u.request[1]
fw_pkt->u.request
fw_pkt->u
fw_pkt
fw_pkt
u
request
1
0x03
errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0);
errno = bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0)
errno
errno
bus_adap->ops->upload_fw_pkt(bus_adap,							     (uint8_t *)							     fw_pkt, 2, 0)
bus_adap->ops->upload_fw_pkt
bus_adap->ops
bus_adap
bus_adap
ops
upload_fw_pkt
bus_adap
bus_adap
(uint8_t *)							     fw_pkt
uint8_t *
uint8_t
uint8_t
*
*
fw_pkt
fw_pkt
2
0
if (errno < 0)				goto error;
errno < 0
errno
errno
0
goto error;
error
{			if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}		}
if (!addr_has_changed) {				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}
!addr_has_changed
addr_has_changed
addr_has_changed
{				/* prepare command to send */				fw_pkt->u.request[0] = 0x00;				fw_pkt->u.request[1] = 0x01;				data_len += sizeof(fw_pkt->u.request);				data_len += sizeof(fw_pkt->raw.address);				/* send cmd to device */				errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);				if (errno < 0)					goto error;			}
fw_pkt->u.request[0] = 0x00;
fw_pkt->u.request[0] = 0x00
fw_pkt->u.request[0]
fw_pkt->u.request
fw_pkt->u
fw_pkt
fw_pkt
u
request
0
0x00
fw_pkt->u.request[1] = 0x01;
fw_pkt->u.request[1] = 0x01
fw_pkt->u.request[1]
fw_pkt->u.request
fw_pkt->u
fw_pkt
fw_pkt
u
request
1
0x01
data_len += sizeof(fw_pkt->u.request);
data_len += sizeof(fw_pkt->u.request)
data_len
data_len
sizeof(fw_pkt->u.request)
(fw_pkt->u.request)
fw_pkt->u.request
fw_pkt->u
fw_pkt
fw_pkt
u
request
data_len += sizeof(fw_pkt->raw.address);
data_len += sizeof(fw_pkt->raw.address)
data_len
data_len
sizeof(fw_pkt->raw.address)
(fw_pkt->raw.address)
fw_pkt->raw.address
fw_pkt->raw
fw_pkt
fw_pkt
raw
address
errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0);
errno = bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0)
errno
errno
bus_adap->ops->upload_fw_pkt(bus_adap,								     (uint8_t *)								     fw_pkt,								     data_len,								     0)
bus_adap->ops->upload_fw_pkt
bus_adap->ops
bus_adap
bus_adap
ops
upload_fw_pkt
bus_adap
bus_adap
(uint8_t *)								     fw_pkt
uint8_t *
uint8_t
uint8_t
*
*
fw_pkt
fw_pkt
data_len
data_len
0
if (errno < 0)					goto error;
errno < 0
errno
errno
0
goto error;
error
error:	kfree(fw_pkt);
error
kfree(fw_pkt);
kfree(fw_pkt)
kfree
kfree
fw_pkt
fw_pkt
return (errno == 0) ? total_read_bytes : errno;
(errno == 0) ? total_read_bytes : errno
(errno == 0)
errno == 0
errno
errno
0
total_read_bytes
total_read_bytes
errno
errno
-----joern-----
(82,53,0)
(167,82,0)
(113,17,0)
(102,44,0)
(79,17,0)
(45,157,0)
(0,156,0)
(16,123,0)
(121,76,0)
(177,23,0)
(29,44,0)
(38,59,0)
(29,96,0)
(26,68,0)
(81,68,0)
(147,51,0)
(23,127,0)
(106,12,0)
(105,155,0)
(170,79,0)
(8,131,0)
(88,30,0)
(164,49,0)
(157,45,0)
(150,161,0)
(168,47,0)
(77,33,0)
(139,12,0)
(67,154,0)
(14,48,0)
(56,16,0)
(66,154,0)
(128,98,0)
(59,49,0)
(16,56,0)
(73,98,0)
(55,87,0)
(179,17,0)
(21,12,0)
(4,139,0)
(119,120,0)
(108,8,0)
(162,17,0)
(105,56,0)
(82,154,0)
(130,122,0)
(131,96,0)
(77,26,0)
(57,49,0)
(36,78,0)
(165,106,0)
(53,76,0)
(77,161,0)
(49,49,0)
(83,127,0)
(93,105,0)
(173,18,0)
(2,44,0)
(8,53,0)
(65,48,0)
(114,55,0)
(131,104,0)
(111,70,0)
(158,0,0)
(82,51,0)
(109,24,0)
(26,78,0)
(18,0,0)
(151,154,0)
(140,161,0)
(134,23,0)
(79,56,0)
(40,24,0)
(122,48,0)
(56,128,0)
(51,161,0)
(44,102,0)
(10,125,0)
(125,78,0)
(15,181,0)
(59,106,0)
(106,59,0)
(77,134,0)
(19,145,0)
(55,33,0)
(100,161,0)
(9,161,0)
(53,8,0)
(33,55,0)
(64,29,0)
(74,51,0)
(21,97,0)
(59,80,0)
(126,137,0)
(74,82,0)
(118,155,0)
(112,127,0)
(77,156,0)
(144,159,0)
(128,56,0)
(50,69,0)
(137,96,0)
(1,171,0)
(11,41,0)
(44,29,0)
(82,74,0)
(56,79,0)
(102,48,0)
(171,76,0)
(91,9,0)
(155,17,0)
(43,143,0)
(75,21,0)
(63,47,0)
(5,76,0)
(172,89,0)
(171,155,0)
(171,1,0)
(49,154,0)
(78,125,0)
(157,69,0)
(44,22,0)
(59,154,0)
(159,102,0)
(58,29,0)
(39,87,0)
(18,96,0)
(107,171,0)
(67,139,0)
(153,161,0)
(135,139,0)
(80,56,0)
(166,44,0)
(6,53,0)
(68,76,0)
(24,17,0)
(62,33,0)
(28,26,0)
(45,171,0)
(174,161,0)
(69,89,0)
(69,157,0)
(149,128,0)
(54,6,0)
(3,44,0)
(67,49,0)
(96,94,0)
(8,45,0)
(86,97,0)
(148,159,0)
(35,161,0)
(56,80,0)
(56,105,0)
(25,17,0)
(96,161,0)
(82,102,0)
(52,77,0)
(90,161,0)
(180,156,0)
(84,106,0)
(49,17,0)
(72,5,0)
(78,26,0)
(60,21,0)
(139,67,0)
(71,16,0)
(104,131,0)
(134,5,0)
(80,101,0)
(175,74,0)
(47,96,0)
(41,47,0)
(89,96,0)
(23,134,0)
(46,134,0)
(127,23,0)
(141,143,0)
(115,8,0)
(132,6,0)
(94,96,0)
(129,67,0)
(160,87,0)
(146,8,0)
(94,141,0)
(133,145,0)
(95,102,0)
(156,65,0)
(98,161,0)
(123,16,0)
(87,55,0)
(56,41,0)
(137,161,0)
(32,18,0)
(141,94,0)
(47,41,0)
(82,49,0)
(145,96,0)
(82,77,0)
(34,51,0)
(127,96,0)
(29,64,0)
(124,53,0)
(138,155,0)
(49,79,0)
(7,73,0)
(103,82,0)
(176,131,0)
(41,56,0)
(163,111,0)
(61,123,0)
(74,53,0)
(74,102,0)
(42,45,0)
(117,1,0)
(13,94,0)
(8,22,0)
(31,9,0)
(27,123,0)
(156,0,0)
(33,122,0)
(80,59,0)
(0,18,0)
(116,117,0)
(45,76,0)
(99,98,0)
(181,79,0)
(20,98,0)
(89,69,0)
(1,117,0)
(92,89,0)
(110,65,0)
(123,96,0)
(131,8,0)
(145,117,0)
(101,80,0)
(143,141,0)
(87,96,0)
(117,145,0)
(178,74,0)
(52,70,0)
(97,21,0)
(125,96,0)
(85,96,0)
(37,181,0)
(97,49,0)
(169,125,0)
(120,96,0)
(28,78,1)
(71,123,1)
(81,26,1)
(129,159,1)
(33,55,1)
(129,6,1)
(118,24,1)
(10,5,1)
(164,181,1)
(159,102,1)
(37,15,1)
(59,49,1)
(157,69,1)
(78,125,1)
(177,127,1)
(145,19,1)
(55,114,1)
(97,21,1)
(175,137,1)
(82,154,1)
(7,97,1)
(176,108,1)
(129,154,1)
(31,91,1)
(126,136,1)
(44,22,1)
(62,55,1)
(13,141,1)
(97,49,1)
(59,106,1)
(41,47,1)
(131,104,1)
(163,120,1)
(181,79,1)
(46,23,1)
(99,51,1)
(105,155,1)
(78,36,1)
(21,12,1)
(8,115,1)
(27,80,1)
(2,29,1)
(122,130,1)
(6,53,1)
(105,93,1)
(77,33,1)
(144,102,1)
(38,106,1)
(145,96,1)
(108,124,1)
(26,78,1)
(129,73,1)
(173,32,1)
(6,132,1)
(74,178,1)
(79,56,1)
(52,70,1)
(39,65,1)
(126,142,1)
(143,43,1)
(86,49,1)
(41,11,1)
(69,89,1)
(43,85,1)
(107,68,1)
(21,75,1)
(33,62,1)
(82,53,1)
(56,80,1)
(45,157,1)
(117,145,1)
(106,84,1)
(82,167,1)
(42,171,1)
(160,39,1)
(158,18,1)
(138,118,1)
(73,98,1)
(74,51,1)
(120,119,1)
(167,74,1)
(29,64,1)
(51,147,1)
(180,0,1)
(61,27,1)
(124,45,1)
(67,49,1)
(56,16,1)
(169,10,1)
(135,4,1)
(137,126,1)
(120,96,1)
(15,79,1)
(110,156,1)
(133,107,1)
(95,122,1)
(16,71,1)
(171,1,1)
(59,38,1)
(115,146,1)
(141,143,1)
(77,134,1)
(67,139,1)
(87,160,1)
(34,9,1)
(47,96,1)
(171,155,1)
(69,50,1)
(147,34,1)
(8,131,1)
(128,98,1)
(106,12,1)
(96,94,1)
(172,92,1)
(128,149,1)
(125,96,1)
(82,51,1)
(142,6,1)
(23,177,1)
(130,33,1)
(8,22,1)
(94,13,1)
(44,3,1)
(58,166,1)
(32,97,1)
(77,26,1)
(50,89,1)
(123,61,1)
(47,168,1)
(73,7,1)
(56,128,1)
(116,145,1)
(146,131,1)
(151,66,1)
(131,176,1)
(65,110,1)
(68,81,1)
(80,59,1)
(166,95,1)
(44,29,1)
(126,152,1)
(18,96,1)
(70,111,1)
(127,96,1)
(125,169,1)
(0,18,1)
(156,0,1)
(66,120,1)
(170,155,1)
(23,127,1)
(112,73,1)
(36,125,1)
(148,144,1)
(24,40,1)
(26,28,1)
(77,82,1)
(139,135,1)
(49,79,1)
(94,141,1)
(19,133,1)
(59,154,1)
(83,112,1)
(82,102,1)
(8,45,1)
(56,41,1)
(114,87,1)
(89,96,1)
(5,72,1)
(63,16,1)
(84,165,1)
(74,53,1)
(49,49,1)
(139,12,1)
(111,163,1)
(16,123,1)
(165,170,1)
(119,96,1)
(20,99,1)
(49,154,1)
(178,175,1)
(77,156,1)
(117,116,1)
(82,74,1)
(82,103,1)
(67,154,1)
(134,23,1)
(93,41,1)
(92,42,1)
(45,171,1)
(29,96,1)
(57,164,1)
(123,96,1)
(56,105,1)
(149,105,1)
(40,109,1)
(49,57,1)
(1,117,1)
(131,96,1)
(109,67,1)
(55,87,1)
(152,181,1)
(155,138,1)
(80,101,1)
(89,172,1)
(53,8,1)
(168,63,1)
(156,180,1)
(137,96,1)
(181,37,1)
(159,148,1)
(154,151,1)
(132,54,1)
(136,159,1)
(126,67,1)
(74,102,1)
(82,49,1)
(29,58,1)
(0,158,1)
(102,44,1)
(72,134,1)
(52,77,1)
(60,86,1)
(75,60,1)
(18,173,1)
(54,53,1)
(87,96,1)
(103,74,1)
(127,83,1)
(134,46,1)
(3,2,1)
(4,129,1)
(98,20,1)
(11,47,1)
(9,31,1)
(85,98,1)
(82,49,2)
(11,67,2)
(132,73,2)
(142,6,2)
(168,67,2)
(77,120,2)
(109,67,2)
(117,73,2)
(108,73,2)
(122,97,2)
(32,97,2)
(151,120,2)
(137,96,2)
(79,67,2)
(56,41,2)
(134,23,2)
(4,120,2)
(69,89,2)
(56,128,2)
(87,96,2)
(44,97,2)
(164,181,2)
(8,45,2)
(176,73,2)
(127,73,2)
(131,96,2)
(5,73,2)
(59,67,2)
(67,154,2)
(45,157,2)
(157,69,2)
(24,67,2)
(70,120,2)
(97,181,2)
(16,123,2)
(3,97,2)
(52,77,2)
(4,159,2)
(33,97,2)
(181,79,2)
(82,154,2)
(102,44,2)
(40,67,2)
(58,97,2)
(114,97,2)
(74,120,2)
(180,97,2)
(105,155,2)
(67,49,2)
(141,143,2)
(84,67,2)
(80,59,2)
(82,102,2)
(19,73,2)
(80,67,2)
(138,67,2)
(97,21,2)
(148,97,2)
(39,97,2)
(93,67,2)
(137,120,2)
(173,97,2)
(135,159,2)
(166,97,2)
(139,73,2)
(59,106,2)
(60,181,2)
(82,120,2)
(171,155,2)
(120,96,2)
(131,73,2)
(77,156,2)
(15,67,2)
(154,120,2)
(49,49,2)
(53,73,2)
(45,171,2)
(6,53,2)
(159,97,2)
(56,67,2)
(56,105,2)
(23,73,2)
(33,55,2)
(87,97,2)
(46,73,2)
(157,73,2)
(152,181,2)
(8,131,2)
(67,6,2)
(156,97,2)
(82,51,2)
(29,97,2)
(171,1,2)
(18,96,2)
(125,73,2)
(42,73,2)
(8,73,2)
(123,96,2)
(118,67,2)
(29,64,2)
(41,67,2)
(110,97,2)
(0,18,2)
(79,56,2)
(128,67,2)
(78,73,2)
(133,73,2)
(170,67,2)
(126,120,2)
(136,159,2)
(175,120,2)
(92,73,2)
(81,73,2)
(102,97,2)
(89,96,2)
(56,16,2)
(55,87,2)
(67,139,2)
(0,97,2)
(115,73,2)
(49,154,2)
(73,98,2)
(44,29,2)
(124,73,2)
(21,12,2)
(145,96,2)
(1,73,2)
(86,181,2)
(77,134,2)
(128,98,2)
(56,80,2)
(106,67,2)
(131,104,2)
(159,102,2)
(83,73,2)
(172,73,2)
(68,73,2)
(167,74,2)
(123,67,2)
(144,97,2)
(77,33,2)
(29,96,2)
(59,49,2)
(37,67,2)
(89,73,2)
(181,67,2)
(21,181,2)
(135,73,2)
(105,67,2)
(66,120,2)
(65,97,2)
(134,73,2)
(107,73,2)
(116,73,2)
(156,0,2)
(155,67,2)
(47,96,2)
(177,73,2)
(54,73,2)
(95,97,2)
(27,67,2)
(80,101,2)
(112,73,2)
(125,96,2)
(111,120,2)
(139,6,2)
(26,73,2)
(75,181,2)
(149,67,2)
(16,67,2)
(67,159,2)
(38,67,2)
(145,73,2)
(82,53,2)
(59,154,2)
(103,74,2)
(49,181,2)
(57,181,2)
(49,79,2)
(94,141,2)
(97,49,2)
(67,73,2)
(165,67,2)
(139,120,2)
(74,51,2)
(96,94,2)
(61,67,2)
(63,67,2)
(77,26,2)
(71,67,2)
(4,6,2)
(50,73,2)
(23,127,2)
(72,73,2)
(135,120,2)
(2,97,2)
(67,120,2)
(69,73,2)
(139,159,2)
(78,125,2)
(1,117,2)
(28,73,2)
(146,73,2)
(129,120,2)
(41,47,2)
(82,74,2)
(139,12,2)
(52,70,2)
(74,53,2)
(44,22,2)
(18,97,2)
(7,97,2)
(160,97,2)
(8,22,2)
(106,12,2)
(62,97,2)
(129,73,2)
(127,96,2)
(169,73,2)
(10,73,2)
(130,97,2)
(26,78,2)
(129,159,2)
(129,6,2)
(55,97,2)
(73,97,2)
(158,97,2)
(171,73,2)
(45,73,2)
(74,102,2)
(36,73,2)
(6,73,2)
(135,6,2)
(53,8,2)
(117,145,2)
(178,120,2)
(47,67,2)
(163,120,2)
(4,73,2)
-----------------------------------
(0,fw_pkt->u.request)
(1,sizeof(fw_pkt->u.request)
(2,2)
(3,0)
(4,firmware)
(5,fw_pkt->u.request[0] = 0x00)
(6,errno < 0)
(7,addr_has_changed)
(8,bus_adap->ops->upload_fw_pkt(bus_adap,\n\\n\\t\\t\\t\\t\\t\\t\\t\\t     (uint8_t *)
(9,total_read_bytes = 0)
(10,fw_pkt)
(11,data)
(12,const struct firmware *firmware)
(13,GFP_KERNEL)
(14,if (errno < 0)
(15,read_bytes)
(16,fw_pkt->raw.address)
(17,)
(18,fw_pkt->u)
(19,u)
(20,0)
(21,firmware->size)
(22,struct as10x_bus_adapter_t *bus_adap)
(23,fw_pkt->u.request)
(24,read_bytes = 0)
(25,if (total_read_bytes == firmware->size)
(26,fw_pkt->u.request[1])
(27,fw_pkt)
(28,1)
(29,(uint8_t *)
(30,)
(31,0)
(32,fw_pkt)
(33,fw_pkt->u.request[1])
(34,errno)
(35,for (total_read_bytes = 0; total_read_bytes < firmware->size; )
(36,request)
(37,0)
(38,total_read_bytes)
(39,fw_pkt)
(40,0)
(41,fw_pkt->raw.data)
(42,data_len)
(43,fw_pkt)
(44,bus_adap->ops->upload_fw_pkt(bus_adap,\n\\n\\t\\t\\t\\t\\t\\t\\t     (uint8_t *)
(45,data_len += sizeof(fw_pkt->raw.address)
(46,0)
(47,fw_pkt->raw)
(48,)
(49,total_read_bytes += read_bytes)
(50,address)
(51,errno = 0)
(52,RET)
(53,errno = bus_adap->ops->upload_fw_pkt(bus_adap,\n\\n\\t\\t\\t\\t\\t\\t\\t\\t     (uint8_t *)
(54,errno)
(55,fw_pkt->u.request)
(56,parse_hex_line(\n\\n\\t\\t\\t\\t(u8 *)
(57,read_bytes)
(58,fw_pkt)
(59,firmware->data + total_read_bytes)
(60,firmware)
(61,raw)
(62,1)
(63,fw_pkt)
(64,uint8_t *)
(65,fw_pkt->u.request[0] = 0x00)
(66,total_read_bytes)
(67,total_read_bytes < firmware->size)
(68,fw_pkt->u.request[1] = 0x01)
(69,fw_pkt->raw.address)
(70,return -ENOMEM;)
(71,address)
(72,0x00)
(73,!addr_has_changed)
(74,errno == 0)
(75,size)
(76,)
(77,return (errno == 0)
(78,fw_pkt->u.request)
(79,read_bytes = parse_hex_line(\n\\n\\t\\t\\t\\t(u8 *)
(80,(u8 *)
(81,0x01)
(82,(errno == 0)
(83,u)
(84,data)
(85,fw_pkt)
(86,total_read_bytes)
(87,fw_pkt->u)
(88,if (!addr_has_changed)
(89,fw_pkt->raw)
(90,addr_has_changed)
(91,total_read_bytes)
(92,fw_pkt)
(93,data_len)
(94,kmalloc(sizeof(*fw_pkt)
(95,errno)
(96,fw_pkt = kmalloc(sizeof(*fw_pkt)
(97,total_read_bytes == firmware->size)
(98,addr_has_changed = 0)
(99,addr_has_changed)
(100,error:)
(101,u8 *)
(102,errno = bus_adap->ops->upload_fw_pkt(bus_adap,\n\\n\\t\\t\\t\\t\\t\\t\\t     (uint8_t *)
(103,total_read_bytes)
(104,uint8_t *)
(105,&data_len)
(106,firmware->data)
(107,data_len)
(108,bus_adap)
(109,read_bytes)
(110,0x00)
(111,-ENOMEM)
(112,fw_pkt)
(113,read_bytes)
(114,request)
(115,0)
(116,request)
(117,fw_pkt->u.request)
(118,data_len)
(119,fw_pkt)
(120,!fw_pkt)
(121,if (errno < 0)
(122,fw_pkt->u.request[1] = 0x03)
(123,fw_pkt->raw)
(124,errno)
(125,fw_pkt->u)
(126,fw_pkt)
(127,fw_pkt->u)
(128,&addr_has_changed)
(129,total_read_bytes)
(130,0x03)
(131,(uint8_t *)
(132,0)
(133,fw_pkt)
(134,fw_pkt->u.request[0])
(135,size)
(136,goto error;)
(137,kfree(fw_pkt)
(138,0)
(139,firmware->size)
(140,if (!fw_pkt)
(141,sizeof(*fw_pkt)
(142,goto error;)
(143,*fw_pkt)
(144,errno)
(145,fw_pkt->u)
(146,data_len)
(147,0)
(148,0)
(149,addr_has_changed)
(150,total_read_bytes)
(151,0)
(152,goto error;)
(153,errno)
(154,total_read_bytes = 0)
(155,data_len = 0)
(156,fw_pkt->u.request[0])
(157,sizeof(fw_pkt->raw.address)
(158,request)
(159,errno < 0)
(160,u)
(161,)
(162,data_len)
(163,ENOMEM)
(164,total_read_bytes)
(165,firmware)
(166,bus_adap)
(167,errno)
(168,raw)
(169,u)
(170,read_bytes)
(171,data_len += sizeof(fw_pkt->u.request)
(172,raw)
(173,u)
(174,fw_pkt)
(175,errno)
(176,fw_pkt)
(177,request)
(178,0)
(179,if (read_bytes <= 0)
(180,0)
(181,read_bytes <= 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^