-----label-----
0
-----code-----
struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
{
	struct request_queue *q;

	q = kmem_cache_alloc_node(blk_requestq_cachep,
				gfp_mask | __GFP_ZERO, node_id);
	if (!q)
		return NULL;

	q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);
	if (q->id < 0)
		goto fail_q;

	q->bio_split = bioset_create(BIO_POOL_SIZE, 0);
	if (!q->bio_split)
		goto fail_id;

	q->backing_dev_info = bdi_alloc_node(gfp_mask, node_id);
	if (!q->backing_dev_info)
		goto fail_split;

	q->backing_dev_info->ra_pages =
			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;
	q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK;
	q->backing_dev_info->name = "block";
	q->node = node_id;

	setup_timer(&q->backing_dev_info->laptop_mode_wb_timer,
		    laptop_mode_timer_fn, (unsigned long) q);
	setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);
	INIT_WORK(&q->timeout_work, NULL);
	INIT_LIST_HEAD(&q->queue_head);
	INIT_LIST_HEAD(&q->timeout_list);
	INIT_LIST_HEAD(&q->icq_list);
#ifdef CONFIG_BLK_CGROUP
	INIT_LIST_HEAD(&q->blkg_list);
#endif
	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);

	kobject_init(&q->kobj, &blk_queue_ktype);

	mutex_init(&q->sysfs_lock);
	spin_lock_init(&q->__queue_lock);

	/*
	 * By default initialize queue_lock to internal lock and driver can
	 * override it later if need be.
	 */
	q->queue_lock = &q->__queue_lock;

	/*
	 * A queue starts its life with bypass turned on to avoid
	 * unnecessary bypass on/off overhead and nasty surprises during
	 * init.  The initial bypass will be finished when the queue is
	 * registered by blk_register_queue().
	 */
	q->bypass_depth = 1;
	__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);

	init_waitqueue_head(&q->mq_freeze_wq);

	/*
	 * Init percpu_ref in atomic mode so that it's faster to shutdown.
	 * See blk_register_queue() for details.
	 */
	if (percpu_ref_init(&q->q_usage_counter,
				blk_queue_usage_counter_release,
				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))
		goto fail_bdi;

	if (blkcg_init_queue(q))
		goto fail_ref;

	return q;

fail_ref:
	percpu_ref_exit(&q->q_usage_counter);
fail_bdi:
	bdi_put(q->backing_dev_info);
fail_split:
	bioset_free(q->bio_split);
fail_id:
	ida_simple_remove(&blk_queue_ida, q->id);
fail_q:
	kmem_cache_free(blk_requestq_cachep, q);
	return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
12,13
12,14
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
16,28
16,29
16,30
16,31
16,32
16,33
16,34
16,35
16,36
16,37
16,38
16,39
16,40
16,41
16,42
16,43
16,44
16,45
16,46
16,47
16,48
16,49
16,50
16,51
16,52
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
28,32
29,30
31,32
33,34
33,35
34,35
36,37
38,39
40,41
40,42
41,42
42,43
44,45
45,46
47,48
48,49
48,50
49,50
49,51
50,51
53,54
53,55
53,56
53,57
53,58
54,55
56,57
57,58
61,62
63,64
63,65
64,65
64,66
65,66
65,67
66,67
70,71
72,73
73,74
73,75
74,75
74,76
75,76
78,79
78,80
78,81
79,80
81,82
84,85
84,86
85,86
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
98,100
98,101
99,100
101,102
103,104
105,106
105,107
106,107
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
116,118
117,118
121,122
121,123
122,123
123,124
123,125
124,125
127,128
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
137,138
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
148,149
149,150
149,151
150,151
150,152
151,152
154,155
156,157
157,158
157,159
157,160
157,161
158,159
160,161
161,162
161,163
162,163
162,164
163,164
167,168
169,170
169,171
170,171
170,172
173,174
175,176
176,177
176,178
176,179
176,180
177,178
179,180
180,181
180,182
181,182
184,185
186,187
186,188
187,188
187,189
190,191
192,193
193,194
193,195
193,196
194,195
196,197
197,198
197,199
198,199
201,202
203,204
204,205
204,206
205,206
207,208
208,209
208,210
209,210
212,213
213,214
213,215
214,215
216,217
217,218
217,219
218,219
221,222
222,223
222,224
223,224
225,226
226,227
226,228
227,228
230,231
231,232
231,233
231,234
232,233
234,235
235,236
235,237
236,237
239,240
241,242
242,243
242,244
242,245
243,244
245,246
246,247
246,248
247,248
250,251
251,252
253,254
254,255
254,256
255,256
257,258
258,259
258,260
259,260
262,263
263,264
263,265
264,265
266,267
267,268
267,269
268,269
271,272
272,273
272,274
273,274
273,275
274,275
277,278
278,279
278,280
279,280
282,283
283,284
283,285
284,285
284,286
285,286
289,290
290,291
290,292
290,293
291,292
293,294
295,296
296,297
296,298
297,298
300,301
301,302
301,303
302,303
304,305
305,306
305,307
306,307
309,310
309,311
310,311
310,312
310,313
310,314
310,315
311,312
313,314
314,315
314,316
315,316
318,319
320,321
322,323
324,325
326,327
326,328
327,328
327,329
328,329
330,331
332,333
334,335
335,336
337,338
337,339
339,340
340,341
340,342
341,342
343,344
344,345
344,346
345,346
348,349
348,350
350,351
351,352
351,353
352,353
354,355
354,356
355,356
358,359
358,360
360,361
361,362
361,363
362,363
364,365
364,366
365,366
368,369
368,370
370,371
371,372
371,373
371,374
372,373
374,375
375,376
377,378
377,379
378,379
381,382
381,383
383,384
384,385
384,386
384,387
385,386
387,388
389,390
391,392
392,393
-----nextToken-----
3,5,6,9,11,13,15,20,22,23,27,30,32,35,37,39,43,46,51,52,55,58,59,60,62,67,68,69,71,76,77,80,82,83,88,89,91,96,97,100,102,104,109,110,112,118,119,120,125,126,128,134,135,136,138,144,145,146,147,152,153,155,159,164,165,166,168,171,172,174,178,182,183,185,188,189,191,195,199,200,202,206,210,211,215,219,220,224,228,229,233,237,238,240,244,248,249,252,256,260,261,265,269,270,275,276,280,281,286,287,288,292,294,298,299,303,307,308,312,316,317,319,321,323,325,329,331,333,336,338,342,346,347,349,353,356,357,359,363,366,367,369,373,376,379,380,382,386,388,390,393
-----computeFrom-----
25,26
25,27
33,34
33,35
48,49
48,50
64,65
64,66
73,74
73,75
93,94
93,95
114,115
114,116
121,122
121,123
123,124
123,125
130,131
130,132
140,141
140,142
149,150
149,151
272,273
272,274
283,284
283,285
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
struct request_queue *blk_alloc_queue_node(gfp_t gfp_mask, int node_id){	struct request_queue *q;	q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id);	if (!q)		return NULL;	q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);	if (q->id < 0)		goto fail_q;	q->bio_split = bioset_create(BIO_POOL_SIZE, 0);	if (!q->bio_split)		goto fail_id;	q->backing_dev_info = bdi_alloc_node(gfp_mask, node_id);	if (!q->backing_dev_info)		goto fail_split;	q->backing_dev_info->ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;	q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK;	q->backing_dev_info->name = "block";	q->node = node_id;	setup_timer(&q->backing_dev_info->laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q);	setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);	INIT_WORK(&q->timeout_work, NULL);	INIT_LIST_HEAD(&q->queue_head);	INIT_LIST_HEAD(&q->timeout_list);	INIT_LIST_HEAD(&q->icq_list);#ifdef CONFIG_BLK_CGROUP	INIT_LIST_HEAD(&q->blkg_list);#endif	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);	kobject_init(&q->kobj, &blk_queue_ktype);	mutex_init(&q->sysfs_lock);	spin_lock_init(&q->__queue_lock);	/*	 * By default initialize queue_lock to internal lock and driver can	 * override it later if need be.	 */	q->queue_lock = &q->__queue_lock;	/*	 * A queue starts its life with bypass turned on to avoid	 * unnecessary bypass on/off overhead and nasty surprises during	 * init.  The initial bypass will be finished when the queue is	 * registered by blk_register_queue().	 */	q->bypass_depth = 1;	__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);	init_waitqueue_head(&q->mq_freeze_wq);	/*	 * Init percpu_ref in atomic mode so that it's faster to shutdown.	 * See blk_register_queue() for details.	 */	if (percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))		goto fail_bdi;	if (blkcg_init_queue(q))		goto fail_ref;	return q;fail_ref:	percpu_ref_exit(&q->q_usage_counter);fail_bdi:	bdi_put(q->backing_dev_info);fail_split:	bioset_free(q->bio_split);fail_id:	ida_simple_remove(&blk_queue_ida, q->id);fail_q:	kmem_cache_free(blk_requestq_cachep, q);	return NULL;}
struct request_queue
request_queue
*blk_alloc_queue_node(gfp_t gfp_mask, int node_id)
*
blk_alloc_queue_node
gfp_t gfp_mask
gfp_t
gfp_t
gfp_mask
gfp_mask
int node_id
int
node_id
node_id
{	struct request_queue *q;	q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id);	if (!q)		return NULL;	q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);	if (q->id < 0)		goto fail_q;	q->bio_split = bioset_create(BIO_POOL_SIZE, 0);	if (!q->bio_split)		goto fail_id;	q->backing_dev_info = bdi_alloc_node(gfp_mask, node_id);	if (!q->backing_dev_info)		goto fail_split;	q->backing_dev_info->ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;	q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK;	q->backing_dev_info->name = "block";	q->node = node_id;	setup_timer(&q->backing_dev_info->laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q);	setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);	INIT_WORK(&q->timeout_work, NULL);	INIT_LIST_HEAD(&q->queue_head);	INIT_LIST_HEAD(&q->timeout_list);	INIT_LIST_HEAD(&q->icq_list);#ifdef CONFIG_BLK_CGROUP	INIT_LIST_HEAD(&q->blkg_list);#endif	INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);	kobject_init(&q->kobj, &blk_queue_ktype);	mutex_init(&q->sysfs_lock);	spin_lock_init(&q->__queue_lock);	/*	 * By default initialize queue_lock to internal lock and driver can	 * override it later if need be.	 */	q->queue_lock = &q->__queue_lock;	/*	 * A queue starts its life with bypass turned on to avoid	 * unnecessary bypass on/off overhead and nasty surprises during	 * init.  The initial bypass will be finished when the queue is	 * registered by blk_register_queue().	 */	q->bypass_depth = 1;	__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);	init_waitqueue_head(&q->mq_freeze_wq);	/*	 * Init percpu_ref in atomic mode so that it's faster to shutdown.	 * See blk_register_queue() for details.	 */	if (percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))		goto fail_bdi;	if (blkcg_init_queue(q))		goto fail_ref;	return q;fail_ref:	percpu_ref_exit(&q->q_usage_counter);fail_bdi:	bdi_put(q->backing_dev_info);fail_split:	bioset_free(q->bio_split);fail_id:	ida_simple_remove(&blk_queue_ida, q->id);fail_q:	kmem_cache_free(blk_requestq_cachep, q);	return NULL;}
struct request_queue *q;
struct request_queue *q;
struct request_queue
request_queue
*q
*
q
q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id);
q = kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id)
q
q
kmem_cache_alloc_node(blk_requestq_cachep,				gfp_mask | __GFP_ZERO, node_id)
kmem_cache_alloc_node
kmem_cache_alloc_node
blk_requestq_cachep
blk_requestq_cachep
gfp_mask | __GFP_ZERO
gfp_mask
gfp_mask
__GFP_ZERO
__GFP_ZERO
node_id
node_id
if (!q)		return NULL;
!q
q
q
return NULL;
NULL
NULL
q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask);
q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
q->id
q
q
id
ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
ida_simple_get
ida_simple_get
&blk_queue_ida
blk_queue_ida
blk_queue_ida
0
0
gfp_mask
gfp_mask
if (q->id < 0)		goto fail_q;
q->id < 0
q->id
q
q
id
0
goto fail_q;
fail_q
q->bio_split = bioset_create(BIO_POOL_SIZE, 0);
q->bio_split = bioset_create(BIO_POOL_SIZE, 0)
q->bio_split
q
q
bio_split
bioset_create(BIO_POOL_SIZE, 0)
bioset_create
bioset_create
BIO_POOL_SIZE
BIO_POOL_SIZE
0
if (!q->bio_split)		goto fail_id;
!q->bio_split
q->bio_split
q
q
bio_split
goto fail_id;
fail_id
q->backing_dev_info = bdi_alloc_node(gfp_mask, node_id);
q->backing_dev_info = bdi_alloc_node(gfp_mask, node_id)
q->backing_dev_info
q
q
backing_dev_info
bdi_alloc_node(gfp_mask, node_id)
bdi_alloc_node
bdi_alloc_node
gfp_mask
gfp_mask
node_id
node_id
if (!q->backing_dev_info)		goto fail_split;
!q->backing_dev_info
q->backing_dev_info
q
q
backing_dev_info
goto fail_split;
fail_split
q->backing_dev_info->ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE;
q->backing_dev_info->ra_pages =			(VM_MAX_READAHEAD * 1024) / PAGE_SIZE
q->backing_dev_info->ra_pages
q->backing_dev_info
q
q
backing_dev_info
ra_pages
(VM_MAX_READAHEAD * 1024) / PAGE_SIZE
(VM_MAX_READAHEAD * 1024)
VM_MAX_READAHEAD * 1024
VM_MAX_READAHEAD
VM_MAX_READAHEAD
1024
PAGE_SIZE
PAGE_SIZE
q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK;
q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK
q->backing_dev_info->capabilities
q->backing_dev_info
q
q
backing_dev_info
capabilities
BDI_CAP_CGROUP_WRITEBACK
BDI_CAP_CGROUP_WRITEBACK
q->backing_dev_info->name = "block";
q->backing_dev_info->name = "block"
q->backing_dev_info->name
q->backing_dev_info
q
q
backing_dev_info
name
"block"
q->node = node_id;
q->node = node_id
q->node
q
q
node
node_id
node_id
setup_timer(&q->backing_dev_info->laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q);
setup_timer(&q->backing_dev_info->laptop_mode_wb_timer,		    laptop_mode_timer_fn, (unsigned long) q)
setup_timer
setup_timer
&q->backing_dev_info->laptop_mode_wb_timer
q->backing_dev_info->laptop_mode_wb_timer
q->backing_dev_info
q
q
backing_dev_info
laptop_mode_wb_timer
laptop_mode_timer_fn
laptop_mode_timer_fn
(unsigned long) q
unsigned long
unsigned long

q
q
setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q);
setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long) q)
setup_timer
setup_timer
&q->timeout
q->timeout
q
q
timeout
blk_rq_timed_out_timer
blk_rq_timed_out_timer
(unsigned long) q
unsigned long
unsigned long

q
q
INIT_WORK(&q->timeout_work, NULL);
INIT_WORK(&q->timeout_work, NULL)
INIT_WORK
INIT_WORK
&q->timeout_work
q->timeout_work
q
q
timeout_work
NULL
NULL
INIT_LIST_HEAD(&q->queue_head);
INIT_LIST_HEAD(&q->queue_head)
INIT_LIST_HEAD
INIT_LIST_HEAD
&q->queue_head
q->queue_head
q
q
queue_head
INIT_LIST_HEAD(&q->timeout_list);
INIT_LIST_HEAD(&q->timeout_list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&q->timeout_list
q->timeout_list
q
q
timeout_list
INIT_LIST_HEAD(&q->icq_list);
INIT_LIST_HEAD(&q->icq_list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&q->icq_list
q->icq_list
q
q
icq_list
INIT_DELAYED_WORK(&q->delay_work, blk_delay_work);
INIT_DELAYED_WORK(&q->delay_work, blk_delay_work)
INIT_DELAYED_WORK
INIT_DELAYED_WORK
&q->delay_work
q->delay_work
q
q
delay_work
blk_delay_work
blk_delay_work
kobject_init(&q->kobj, &blk_queue_ktype);
kobject_init(&q->kobj, &blk_queue_ktype)
kobject_init
kobject_init
&q->kobj
q->kobj
q
q
kobj
&blk_queue_ktype
blk_queue_ktype
blk_queue_ktype
mutex_init(&q->sysfs_lock);
mutex_init(&q->sysfs_lock)
mutex_init
mutex_init
&q->sysfs_lock
q->sysfs_lock
q
q
sysfs_lock
spin_lock_init(&q->__queue_lock);
spin_lock_init(&q->__queue_lock)
spin_lock_init
spin_lock_init
&q->__queue_lock
q->__queue_lock
q
q
__queue_lock
q->queue_lock = &q->__queue_lock;
q->queue_lock = &q->__queue_lock
q->queue_lock
q
q
queue_lock
&q->__queue_lock
q->__queue_lock
q
q
__queue_lock
q->bypass_depth = 1;
q->bypass_depth = 1
q->bypass_depth
q
q
bypass_depth
1
__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags);
__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags)
__set_bit
__set_bit
QUEUE_FLAG_BYPASS
QUEUE_FLAG_BYPASS
&q->queue_flags
q->queue_flags
q
q
queue_flags
init_waitqueue_head(&q->mq_freeze_wq);
init_waitqueue_head(&q->mq_freeze_wq)
init_waitqueue_head
init_waitqueue_head
&q->mq_freeze_wq
q->mq_freeze_wq
q
q
mq_freeze_wq
if (percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL))		goto fail_bdi;
percpu_ref_init(&q->q_usage_counter,				blk_queue_usage_counter_release,				PERCPU_REF_INIT_ATOMIC, GFP_KERNEL)
percpu_ref_init
percpu_ref_init
&q->q_usage_counter
q->q_usage_counter
q
q
q_usage_counter
blk_queue_usage_counter_release
blk_queue_usage_counter_release
PERCPU_REF_INIT_ATOMIC
PERCPU_REF_INIT_ATOMIC
GFP_KERNEL
GFP_KERNEL
goto fail_bdi;
fail_bdi
if (blkcg_init_queue(q))		goto fail_ref;
blkcg_init_queue(q)
blkcg_init_queue
blkcg_init_queue
q
q
goto fail_ref;
fail_ref
return q;
q
q
fail_ref:	percpu_ref_exit(&q->q_usage_counter);
fail_ref
percpu_ref_exit(&q->q_usage_counter);
percpu_ref_exit(&q->q_usage_counter)
percpu_ref_exit
percpu_ref_exit
&q->q_usage_counter
q->q_usage_counter
q
q
q_usage_counter
fail_bdi:	bdi_put(q->backing_dev_info);
fail_bdi
bdi_put(q->backing_dev_info);
bdi_put(q->backing_dev_info)
bdi_put
bdi_put
q->backing_dev_info
q
q
backing_dev_info
fail_split:	bioset_free(q->bio_split);
fail_split
bioset_free(q->bio_split);
bioset_free(q->bio_split)
bioset_free
bioset_free
q->bio_split
q
q
bio_split
fail_id:	ida_simple_remove(&blk_queue_ida, q->id);
fail_id
ida_simple_remove(&blk_queue_ida, q->id);
ida_simple_remove(&blk_queue_ida, q->id)
ida_simple_remove
ida_simple_remove
&blk_queue_ida
blk_queue_ida
blk_queue_ida
q->id
q
q
id
fail_q:	kmem_cache_free(blk_requestq_cachep, q);
fail_q
kmem_cache_free(blk_requestq_cachep, q);
kmem_cache_free(blk_requestq_cachep, q)
kmem_cache_free
kmem_cache_free
blk_requestq_cachep
blk_requestq_cachep
q
q
return NULL;
NULL
NULL
-----joern-----
(177,155,0)
(206,63,0)
(107,190,0)
(37,86,0)
(10,155,0)
(40,8,0)
(224,190,0)
(177,116,0)
(126,190,0)
(105,84,0)
(41,99,0)
(168,2,0)
(22,47,0)
(150,228,0)
(218,220,0)
(43,170,0)
(186,190,0)
(138,106,0)
(5,29,0)
(103,65,0)
(205,63,0)
(190,138,0)
(1,155,0)
(219,166,0)
(34,47,0)
(115,175,0)
(181,49,0)
(102,181,0)
(54,227,0)
(89,224,0)
(172,139,0)
(188,170,0)
(134,57,0)
(216,58,0)
(44,65,0)
(158,7,0)
(200,58,0)
(170,190,0)
(169,170,0)
(41,155,0)
(160,99,0)
(26,177,0)
(154,106,0)
(108,93,0)
(135,216,0)
(127,167,0)
(223,228,0)
(94,57,0)
(59,195,0)
(138,163,0)
(150,155,0)
(36,173,0)
(147,166,0)
(145,166,0)
(113,155,0)
(213,153,0)
(17,222,0)
(70,217,0)
(148,155,0)
(202,116,0)
(208,99,0)
(75,140,0)
(38,155,0)
(87,78,0)
(4,36,0)
(167,173,0)
(108,190,0)
(37,190,0)
(96,8,0)
(93,108,0)
(95,17,0)
(150,186,0)
(187,190,0)
(181,190,0)
(32,8,0)
(86,37,0)
(190,155,0)
(210,131,0)
(8,190,0)
(172,92,0)
(178,155,0)
(150,26,0)
(121,108,0)
(46,37,0)
(195,59,0)
(17,95,0)
(47,190,0)
(114,10,0)
(114,14,0)
(81,130,0)
(150,24,0)
(150,174,0)
(124,15,0)
(112,36,0)
(209,140,0)
(216,190,0)
(63,206,0)
(23,155,0)
(225,131,0)
(197,155,0)
(53,216,0)
(36,112,0)
(125,63,0)
(56,107,0)
(29,5,0)
(21,142,0)
(174,190,0)
(173,154,0)
(62,49,0)
(145,2,0)
(164,155,0)
(194,155,0)
(92,190,0)
(115,107,0)
(140,61,0)
(171,192,0)
(226,155,0)
(37,46,0)
(171,65,0)
(130,24,0)
(93,155,0)
(90,109,0)
(80,131,0)
(97,86,0)
(64,155,0)
(214,57,0)
(159,155,0)
(31,167,0)
(142,190,0)
(61,155,0)
(45,190,0)
(207,224,0)
(132,130,0)
(96,84,0)
(85,92,0)
(144,29,0)
(51,60,0)
(214,203,0)
(104,14,0)
(142,15,0)
(10,190,0)
(99,41,0)
(163,138,0)
(28,99,0)
(166,145,0)
(29,190,0)
(176,154,0)
(95,190,0)
(60,35,0)
(117,43,0)
(50,150,0)
(19,220,0)
(150,136,0)
(197,9,0)
(101,126,0)
(13,155,0)
(163,151,0)
(38,89,0)
(146,2,0)
(43,117,0)
(89,38,0)
(114,150,0)
(39,136,0)
(55,167,0)
(111,26,0)
(189,155,0)
(220,190,0)
(198,182,0)
(179,138,0)
(174,173,0)
(57,214,0)
(119,69,0)
(192,171,0)
(59,190,0)
(35,60,0)
(141,155,0)
(79,90,0)
(196,190,0)
(162,95,0)
(25,126,0)
(217,190,0)
(52,163,0)
(86,109,0)
(206,1,0)
(9,197,0)
(204,186,0)
(49,181,0)
(221,217,0)
(118,95,0)
(1,206,0)
(228,41,0)
(36,190,0)
(42,59,0)
(154,151,0)
(136,137,0)
(83,138,0)
(76,209,0)
(184,217,0)
(73,142,0)
(108,173,0)
(130,173,0)
(61,140,0)
(69,194,0)
(197,59,0)
(77,224,0)
(122,209,0)
(136,190,0)
(7,190,0)
(48,182,0)
(178,106,0)
(123,186,0)
(182,190,0)
(30,92,0)
(227,155,0)
(140,209,0)
(175,115,0)
(149,174,0)
(137,155,0)
(49,62,0)
(100,116,0)
(131,190,0)
(47,177,0)
(120,155,0)
(11,178,0)
(25,153,0)
(63,190,0)
(203,155,0)
(228,190,0)
(198,194,0)
(138,190,0)
(139,172,0)
(116,177,0)
(222,155,0)
(27,155,0)
(82,10,0)
(224,89,0)
(99,151,0)
(156,175,0)
(72,7,0)
(217,70,0)
(35,45,0)
(15,142,0)
(137,5,0)
(65,171,0)
(199,24,0)
(193,196,0)
(16,190,0)
(182,198,0)
(66,166,0)
(91,181,0)
(150,55,0)
(2,190,0)
(2,145,0)
(74,90,0)
(194,198,0)
(92,172,0)
(153,25,0)
(58,227,0)
(24,130,0)
(8,41,0)
(90,190,0)
(142,173,0)
(86,155,0)
(152,174,0)
(185,136,0)
(84,96,0)
(88,107,0)
(8,96,0)
(165,26,0)
(150,7,0)
(107,115,0)
(12,163,0)
(133,154,0)
(109,86,0)
(67,155,0)
(167,55,0)
(18,226,0)
(65,190,0)
(150,58,0)
(222,17,0)
(7,226,0)
(9,15,0)
(126,25,0)
(192,155,0)
(24,61,0)
(59,197,0)
(96,155,0)
(212,155,0)
(129,197,0)
(153,155,0)
(216,173,0)
(99,78,0)
(3,108,0)
(47,6,0)
(183,45,0)
(215,37,0)
(173,155,0)
(220,155,0)
(98,182,0)
(58,216,0)
(33,228,0)
(62,155,0)
(57,190,0)
(109,90,0)
(78,99,0)
(55,27,0)
(128,55,0)
(186,178,0)
(45,35,0)
(117,155,0)
(217,41,0)
(15,9,0)
(60,155,0)
(154,173,0)
(203,214,0)
(110,126,0)
(211,70,0)
(131,177,0)
(194,69,0)
(131,210,0)
(130,190,0)
(139,155,0)
(26,190,0)
(170,43,0)
(71,187,0)
(0,27,0)
(201,36,0)
(175,155,0)
(167,190,0)
(6,155,0)
(143,45,0)
(180,29,0)
(5,137,0)
(6,47,0)
(77,60,1)
(65,44,1)
(218,161,1)
(22,34,1)
(36,190,1)
(3,121,1)
(42,129,1)
(70,217,1)
(191,210,1)
(130,173,1)
(224,207,1)
(197,9,1)
(160,78,1)
(24,199,1)
(29,190,1)
(177,116,1)
(90,190,1)
(105,191,1)
(112,36,1)
(210,131,1)
(1,206,1)
(96,84,1)
(181,190,1)
(166,66,1)
(149,210,1)
(37,215,1)
(180,144,1)
(97,109,1)
(185,203,1)
(35,45,1)
(175,156,1)
(134,192,1)
(128,167,1)
(199,130,1)
(173,154,1)
(108,3,1)
(165,111,1)
(114,14,1)
(24,130,1)
(4,201,1)
(118,162,1)
(132,81,1)
(121,157,1)
(167,173,1)
(92,190,1)
(216,190,1)
(2,190,1)
(150,50,1)
(211,217,1)
(80,225,1)
(154,151,1)
(162,153,1)
(127,227,1)
(221,41,1)
(201,173,1)
(204,27,1)
(63,205,1)
(37,46,1)
(178,11,1)
(206,63,1)
(45,190,1)
(135,53,1)
(192,171,1)
(178,106,1)
(8,41,1)
(59,195,1)
(26,165,1)
(156,115,1)
(184,221,1)
(170,190,1)
(224,190,1)
(10,190,1)
(18,7,1)
(200,216,1)
(62,49,1)
(220,19,1)
(40,32,1)
(108,173,1)
(99,28,1)
(179,163,1)
(60,51,1)
(105,6,1)
(198,182,1)
(187,71,1)
(214,57,1)
(223,33,1)
(168,222,1)
(36,173,1)
(220,190,1)
(101,110,1)
(136,39,1)
(108,190,1)
(107,56,1)
(21,73,1)
(74,79,1)
(228,223,1)
(182,48,1)
(183,143,1)
(167,31,1)
(121,62,1)
(130,132,1)
(176,174,1)
(17,95,1)
(203,214,1)
(146,168,1)
(43,170,1)
(138,106,1)
(186,190,1)
(54,58,1)
(48,98,1)
(56,88,1)
(188,169,1)
(28,208,1)
(60,35,1)
(12,52,1)
(150,136,1)
(59,42,1)
(150,228,1)
(145,2,1)
(55,128,1)
(103,194,1)
(227,54,1)
(150,174,1)
(225,177,1)
(53,61,1)
(147,219,1)
(7,158,1)
(182,190,1)
(59,190,1)
(117,43,1)
(163,151,1)
(107,190,1)
(170,188,1)
(217,190,1)
(174,190,1)
(166,145,1)
(50,220,1)
(142,173,1)
(154,106,1)
(196,190,1)
(205,125,1)
(216,173,1)
(209,76,1)
(217,184,1)
(5,29,1)
(194,69,1)
(47,190,1)
(25,126,1)
(8,40,1)
(126,190,1)
(26,190,1)
(88,1,1)
(36,4,1)
(41,99,1)
(174,152,1)
(150,58,1)
(115,107,1)
(15,142,1)
(19,218,1)
(139,172,1)
(114,150,1)
(86,109,1)
(131,177,1)
(49,181,1)
(150,186,1)
(142,190,1)
(91,102,1)
(29,180,1)
(32,84,1)
(71,190,1)
(79,197,1)
(92,30,1)
(95,190,1)
(73,178,1)
(70,211,1)
(190,138,1)
(133,176,1)
(61,140,1)
(215,97,1)
(33,187,1)
(31,127,1)
(84,105,1)
(104,187,1)
(8,190,1)
(86,37,1)
(52,83,1)
(89,224,1)
(158,72,1)
(63,190,1)
(193,166,1)
(110,213,1)
(143,86,1)
(124,142,1)
(213,226,1)
(226,18,1)
(45,183,1)
(109,90,1)
(10,82,1)
(81,112,1)
(6,47,1)
(76,122,1)
(126,101,1)
(218,96,1)
(187,190,1)
(150,7,1)
(196,193,1)
(153,25,1)
(157,166,1)
(167,190,1)
(142,21,1)
(98,175,1)
(175,115,1)
(208,160,1)
(95,118,1)
(37,190,1)
(0,55,1)
(66,147,1)
(94,134,1)
(44,103,1)
(228,190,1)
(72,137,1)
(14,104,1)
(58,216,1)
(20,196,1)
(39,185,1)
(34,93,1)
(150,55,1)
(136,190,1)
(116,100,1)
(129,9,1)
(197,59,1)
(55,167,1)
(100,202,1)
(111,70,1)
(34,68,1)
(7,190,1)
(102,20,1)
(138,179,1)
(87,228,1)
(186,123,1)
(83,16,1)
(140,75,1)
(163,12,1)
(181,91,1)
(47,22,1)
(15,124,1)
(65,190,1)
(99,78,1)
(161,70,1)
(152,149,1)
(78,87,1)
(202,26,1)
(57,190,1)
(27,0,1)
(75,209,1)
(119,198,1)
(82,196,1)
(154,133,1)
(11,186,1)
(9,15,1)
(90,74,1)
(30,85,1)
(85,38,1)
(169,139,1)
(47,177,1)
(69,119,1)
(171,65,1)
(216,135,1)
(207,77,1)
(57,94,1)
(194,198,1)
(122,24,1)
(131,80,1)
(99,151,1)
(96,8,1)
(150,26,1)
(125,117,1)
(140,209,1)
(93,108,1)
(2,146,1)
(144,136,1)
(138,163,1)
(130,190,1)
(38,89,1)
(172,92,1)
(219,145,1)
(137,5,1)
(217,41,1)
(68,112,1)
(58,200,1)
(222,17,1)
(131,190,1)
(114,10,1)
(51,35,1)
(123,204,1)
(150,24,1)
(96,166,2)
(24,130,2)
(127,112,2)
(177,116,2)
(178,112,2)
(25,112,2)
(22,166,2)
(176,210,2)
(62,49,2)
(97,112,2)
(8,166,2)
(214,57,2)
(28,187,2)
(150,210,2)
(118,112,2)
(87,187,2)
(8,196,2)
(150,70,2)
(218,196,2)
(171,112,2)
(34,196,2)
(227,112,2)
(115,107,2)
(213,112,2)
(130,112,2)
(84,210,2)
(96,112,2)
(134,112,2)
(117,43,2)
(228,190,2)
(150,7,2)
(35,112,2)
(57,112,2)
(96,210,2)
(3,166,2)
(115,112,2)
(190,138,2)
(40,166,2)
(129,112,2)
(24,112,2)
(44,112,2)
(19,196,2)
(150,55,2)
(191,210,2)
(5,29,2)
(220,196,2)
(133,210,2)
(224,190,2)
(19,70,2)
(92,112,2)
(167,173,2)
(116,70,2)
(206,112,2)
(65,190,2)
(1,206,2)
(216,112,2)
(26,70,2)
(218,210,2)
(139,172,2)
(105,196,2)
(112,36,2)
(142,190,2)
(218,112,2)
(150,228,2)
(114,10,2)
(17,95,2)
(86,112,2)
(34,166,2)
(50,70,2)
(36,210,2)
(82,196,2)
(41,99,2)
(217,190,2)
(223,187,2)
(40,196,2)
(40,210,2)
(93,196,2)
(56,112,2)
(128,112,2)
(216,173,2)
(70,217,2)
(32,166,2)
(137,112,2)
(59,190,2)
(84,166,2)
(42,112,2)
(174,190,2)
(89,112,2)
(172,92,2)
(22,196,2)
(50,166,2)
(135,112,2)
(131,190,2)
(19,166,2)
(150,136,2)
(4,210,2)
(10,190,2)
(95,112,2)
(168,112,2)
(150,58,2)
(130,190,2)
(215,112,2)
(183,112,2)
(119,112,2)
(137,5,2)
(150,112,2)
(131,177,2)
(217,187,2)
(90,190,2)
(226,112,2)
(194,198,2)
(160,187,2)
(108,173,2)
(98,112,2)
(150,196,2)
(36,173,2)
(94,112,2)
(41,187,2)
(40,112,2)
(15,142,2)
(185,112,2)
(68,112,2)
(29,112,2)
(89,224,2)
(43,112,2)
(55,167,2)
(2,190,2)
(202,70,2)
(220,210,2)
(105,166,2)
(78,187,2)
(37,46,2)
(222,112,2)
(196,166,2)
(47,166,2)
(61,140,2)
(50,112,2)
(47,112,2)
(200,112,2)
(6,166,2)
(136,112,2)
(57,190,2)
(79,112,2)
(31,112,2)
(205,112,2)
(32,210,2)
(218,70,2)
(9,112,2)
(198,112,2)
(121,166,2)
(37,112,2)
(84,112,2)
(58,216,2)
(50,196,2)
(122,112,2)
(99,78,2)
(107,190,2)
(73,112,2)
(55,112,2)
(75,112,2)
(33,187,2)
(186,190,2)
(65,112,2)
(217,41,2)
(154,106,2)
(158,112,2)
(8,41,2)
(108,190,2)
(2,112,2)
(96,8,2)
(108,166,2)
(8,210,2)
(123,112,2)
(74,112,2)
(216,190,2)
(76,112,2)
(53,112,2)
(43,170,2)
(26,190,2)
(59,112,2)
(90,112,2)
(6,196,2)
(35,45,2)
(180,112,2)
(114,150,2)
(77,112,2)
(150,186,2)
(197,59,2)
(100,70,2)
(7,190,2)
(218,166,2)
(147,112,2)
(207,112,2)
(149,210,2)
(11,112,2)
(171,65,2)
(58,112,2)
(203,112,2)
(169,112,2)
(93,166,2)
(197,9,2)
(201,210,2)
(166,112,2)
(170,190,2)
(14,187,2)
(126,190,2)
(102,196,2)
(95,190,2)
(92,190,2)
(192,171,2)
(17,112,2)
(47,196,2)
(60,112,2)
(36,190,2)
(63,112,2)
(145,2,2)
(104,187,2)
(38,89,2)
(187,190,2)
(163,151,2)
(0,112,2)
(172,112,2)
(222,17,2)
(178,106,2)
(49,181,2)
(211,187,2)
(22,112,2)
(167,190,2)
(125,112,2)
(150,26,2)
(86,109,2)
(105,210,2)
(85,112,2)
(69,112,2)
(19,210,2)
(177,70,2)
(29,190,2)
(93,108,2)
(161,70,2)
(72,112,2)
(45,190,2)
(112,210,2)
(193,166,2)
(88,112,2)
(130,173,2)
(170,112,2)
(175,112,2)
(210,131,2)
(220,166,2)
(84,196,2)
(224,112,2)
(175,115,2)
(18,112,2)
(174,210,2)
(39,112,2)
(150,166,2)
(81,112,2)
(50,210,2)
(142,173,2)
(140,112,2)
(32,196,2)
(203,214,2)
(173,154,2)
(194,69,2)
(157,166,2)
(154,151,2)
(105,112,2)
(7,112,2)
(96,84,2)
(188,112,2)
(99,151,2)
(99,187,2)
(60,35,2)
(8,112,2)
(19,112,2)
(142,112,2)
(156,112,2)
(114,14,2)
(131,70,2)
(27,112,2)
(86,37,2)
(208,187,2)
(206,63,2)
(150,174,2)
(153,112,2)
(15,112,2)
(59,195,2)
(210,70,2)
(51,112,2)
(194,112,2)
(70,187,2)
(182,190,2)
(101,112,2)
(107,112,2)
(221,187,2)
(34,112,2)
(6,112,2)
(143,112,2)
(192,112,2)
(166,145,2)
(136,190,2)
(154,210,2)
(204,112,2)
(196,190,2)
(146,112,2)
(66,112,2)
(219,112,2)
(198,182,2)
(121,196,2)
(167,112,2)
(30,112,2)
(109,112,2)
(126,112,2)
(220,112,2)
(139,112,2)
(138,106,2)
(110,112,2)
(197,112,2)
(49,196,2)
(80,70,2)
(124,112,2)
(9,15,2)
(8,190,2)
(132,112,2)
(20,196,2)
(5,112,2)
(103,112,2)
(162,112,2)
(96,196,2)
(3,196,2)
(38,112,2)
(91,196,2)
(37,190,2)
(165,70,2)
(62,196,2)
(63,190,2)
(214,112,2)
(1,112,2)
(108,196,2)
(199,112,2)
(32,112,2)
(220,70,2)
(61,112,2)
(138,163,2)
(220,190,2)
(186,112,2)
(111,70,2)
(228,187,2)
(10,196,2)
(209,112,2)
(144,112,2)
(145,112,2)
(173,210,2)
(117,112,2)
(48,112,2)
(47,190,2)
(25,126,2)
(182,112,2)
(181,196,2)
(47,177,2)
(140,209,2)
(152,210,2)
(150,24,2)
(21,112,2)
(54,112,2)
(181,190,2)
(45,112,2)
(6,47,2)
(184,187,2)
(153,25,2)
(109,90,2)
(225,70,2)
-----------------------------------
(0,"block")
(1,INIT_LIST_HEAD(&q->blkg_list)
(2,q->q_usage_counter)
(3,backing_dev_info)
(4,backing_dev_info)
(5,&q->__queue_lock)
(6,bioset_free(q->bio_split)
(7,q->bypass_depth)
(8,q->id)
(9,&q->backing_dev_info->laptop_mode_wb_timer)
(10,return q;)
(11,node_id)
(12,__GFP_ZERO)
(13,fail_id:)
(14,return NULL;)
(15,q->backing_dev_info->laptop_mode_wb_timer)
(16,q)
(17,&q->mq_freeze_wq)
(18,1)
(19,q)
(20,goto fail_ref;)
(21,backing_dev_info)
(22,bio_split)
(23,if (blkcg_init_queue(q)
(24,q->backing_dev_info->ra_pages)
(25,&q->queue_flags)
(26,q->bio_split)
(27,q->backing_dev_info->name = "block")
(28,gfp_mask)
(29,q->__queue_lock)
(30,timeout_list)
(31,backing_dev_info)
(32,q)
(33,q)
(34,q)
(35,&q->timeout_work)
(36,q->backing_dev_info)
(37,(unsigned long)
(38,INIT_LIST_HEAD(&q->queue_head)
(39,queue_lock)
(40,id)
(41,q->id = ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
(42,q)
(43,&q->icq_list)
(44,sysfs_lock)
(45,q->timeout_work)
(46,unsigned long)
(47,q->bio_split)
(48,kobj)
(49,&q->q_usage_counter)
(50,NULL)
(51,NULL)
(52,gfp_mask)
(53,q)
(54,BDI_CAP_CGROUP_WRITEBACK)
(55,q->backing_dev_info->name)
(56,delay_work)
(57,q->__queue_lock)
(58,q->backing_dev_info->capabilities)
(59,(unsigned long)
(60,INIT_WORK(&q->timeout_work, NULL)
(61,q->backing_dev_info->ra_pages =\n\\n\\t\\t\\t(VM_MAX_READAHEAD * 1024)
(62,percpu_ref_exit(&q->q_usage_counter)
(63,q->blkg_list)
(64,if (percpu_ref_init(&q->q_usage_counter,\n\\n\\t\\t\\t\\tblk_queue_usage_counter_release,\n\\n\\t\\t\\t\\tPERCPU_REF_INIT_ATOMIC, GFP_KERNEL)
(65,q->sysfs_lock)
(66,GFP_KERNEL)
(67,fail_split:)
(68,goto fail_split;)
(69,&blk_queue_ktype)
(70,q->id < 0)
(71,q)
(72,q)
(73,q)
(74,timeout)
(75,PAGE_SIZE)
(76,1024)
(77,q)
(78,&blk_queue_ida)
(79,q)
(80,bio_split)
(81,q)
(82,q)
(83,blk_requestq_cachep)
(84,&blk_queue_ida)
(85,q)
(86,setup_timer(&q->timeout, blk_rq_timed_out_timer, (unsigned long)
(87,blk_queue_ida)
(88,q)
(89,&q->queue_head)
(90,q->timeout)
(91,q_usage_counter)
(92,q->timeout_list)
(93,bdi_put(q->backing_dev_info)
(94,__queue_lock)
(95,q->mq_freeze_wq)
(96,ida_simple_remove(&blk_queue_ida, q->id)
(97,blk_rq_timed_out_timer)
(98,q)
(99,ida_simple_get(&blk_queue_ida, 0, 0, gfp_mask)
(100,0)
(101,queue_flags)
(102,q)
(103,q)
(104,NULL)
(105,blk_queue_ida)
(106,int node_id)
(107,q->delay_work)
(108,q->backing_dev_info)
(109,&q->timeout)
(110,q)
(111,q)
(112,!q->backing_dev_info)
(113,fail_q:)
(114,RET)
(115,&q->delay_work)
(116,bioset_create(BIO_POOL_SIZE, 0)
(117,INIT_LIST_HEAD(&q->icq_list)
(118,mq_freeze_wq)
(119,blk_queue_ktype)
(120,fail_bdi:)
(121,q)
(122,VM_MAX_READAHEAD)
(123,node)
(124,laptop_mode_wb_timer)
(125,q)
(126,q->queue_flags)
(127,q)
(128,name)
(129,laptop_mode_timer_fn)
(130,q->backing_dev_info)
(131,q->bio_split)
(132,backing_dev_info)
(133,node_id)
(134,q)
(135,backing_dev_info)
(136,q->queue_lock)
(137,q->queue_lock = &q->__queue_lock)
(138,kmem_cache_alloc_node(blk_requestq_cachep,\n\\n\\t\\t\\t\\tgfp_mask | __GFP_ZERO, node_id)
(139,INIT_LIST_HEAD(&q->timeout_list)
(140,(VM_MAX_READAHEAD * 1024)
(141,fail_ref:)
(142,q->backing_dev_info)
(143,q)
(144,q)
(145,&q->q_usage_counter)
(146,q_usage_counter)
(147,PERCPU_REF_INIT_ATOMIC)
(148,if (!q->backing_dev_info)
(149,q)
(150,return NULL;)
(151,gfp_t gfp_mask)
(152,backing_dev_info)
(153,__set_bit(QUEUE_FLAG_BYPASS, &q->queue_flags)
(154,bdi_alloc_node(gfp_mask, node_id)
(155,)
(156,blk_delay_work)
(157,goto fail_bdi;)
(158,bypass_depth)
(159,if (!q->bio_split)
(160,0)
(161,goto fail_q;)
(162,q)
(163,gfp_mask | __GFP_ZERO)
(164,if (q->id < 0)
(165,bio_split)
(166,percpu_ref_init(&q->q_usage_counter,\n\\n\\t\\t\\t\\tblk_queue_usage_counter_release,\n\\n\\t\\t\\t\\tPERCPU_REF_INIT_ATOMIC, GFP_KERNEL)
(167,q->backing_dev_info)
(168,q)
(169,q)
(170,q->icq_list)
(171,&q->sysfs_lock)
(172,&q->timeout_list)
(173,q->backing_dev_info = bdi_alloc_node(gfp_mask, node_id)
(174,q->backing_dev_info)
(175,INIT_DELAYED_WORK(&q->delay_work, blk_delay_work)
(176,gfp_mask)
(177,q->bio_split = bioset_create(BIO_POOL_SIZE, 0)
(178,q->node = node_id)
(179,node_id)
(180,__queue_lock)
(181,q->q_usage_counter)
(182,q->kobj)
(183,timeout_work)
(184,id)
(185,q)
(186,q->node)
(187,!q)
(188,icq_list)
(189,if (!q)
(190,q = kmem_cache_alloc_node(blk_requestq_cachep,\n\\n\\t\\t\\t\\tgfp_mask | __GFP_ZERO, node_id)
(191,goto fail_id;)
(192,mutex_init(&q->sysfs_lock)
(193,q)
(194,kobject_init(&q->kobj, &blk_queue_ktype)
(195,unsigned long)
(196,blkcg_init_queue(q)
(197,setup_timer(&q->backing_dev_info->laptop_mode_wb_timer,\n\\n\\t\\t    laptop_mode_timer_fn, (unsigned long)
(198,&q->kobj)
(199,ra_pages)
(200,capabilities)
(201,q)
(202,BIO_POOL_SIZE)
(203,spin_lock_init(&q->__queue_lock)
(204,q)
(205,blkg_list)
(206,&q->blkg_list)
(207,queue_head)
(208,0)
(209,VM_MAX_READAHEAD * 1024)
(210,!q->bio_split)
(211,0)
(212,q)
(213,QUEUE_FLAG_BYPASS)
(214,&q->__queue_lock)
(215,q)
(216,q->backing_dev_info)
(217,q->id)
(218,blk_requestq_cachep)
(219,blk_queue_usage_counter_release)
(220,kmem_cache_free(blk_requestq_cachep, q)
(221,q)
(222,init_waitqueue_head(&q->mq_freeze_wq)
(223,id)
(224,q->queue_head)
(225,q)
(226,q->bypass_depth = 1)
(227,q->backing_dev_info->capabilities = BDI_CAP_CGROUP_WRITEBACK)
(228,q->id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^