-----label-----
1
-----code-----
static int
suborder_not_supported(struct dasd_ccw_req *cqr)
{
	char *sense;
	char reason;
	char msg_format;
	char msg_no;

	/*
	 * intrc values ENODEV, ENOLINK and EPERM
	 * will be optained from sleep_on to indicate that no
	 * IO operation can be started
	 */
	if (cqr->intrc == -ENODEV)
		return 1;

	if (cqr->intrc == -ENOLINK)
		return 1;

	if (cqr->intrc == -EPERM)
		return 1;

	sense = dasd_get_sense(&cqr->irb);
	if (!sense)
		return 0;

	reason = sense[0];
	msg_format = (sense[7] & 0xF0);
	msg_no = (sense[7] & 0x0F);

	/* command reject, Format 0 MSG 4 - invalid parameter */
	if ((reason == 0x80) && (msg_format == 0x00) && (msg_no == 0x04))
		return 1;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
12,13
13,14
13,15
15,16
15,17
18,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
33,35
34,35
34,36
35,36
35,37
36,37
39,40
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
47,48
50,51
51,52
53,54
55,56
55,57
56,57
56,58
57,58
57,59
58,59
61,62
62,63
64,65
66,67
67,68
67,69
68,69
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
80,81
82,83
84,85
85,86
85,87
86,87
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
97,98
97,99
98,99
98,100
99,100
103,104
104,105
104,106
105,106
107,108
108,109
108,110
109,110
109,111
110,111
114,115
114,116
115,116
115,117
116,117
116,118
117,118
118,119
118,120
119,120
122,123
123,124
123,125
124,125
127,128
128,129
128,130
129,130
132,133
134,135
-----nextToken-----
2,4,7,9,10,14,16,17,20,22,25,27,30,32,37,38,41,43,48,49,52,54,59,60,63,65,69,72,76,77,81,83,87,90,91,95,100,101,102,106,111,112,113,120,121,125,126,130,131,133,135
-----computeFrom-----
34,35
34,36
45,46
45,47
56,57
56,58
67,68
67,69
85,86
85,87
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
115,116
115,117
116,117
116,118
118,119
118,120
123,124
123,125
128,129
128,130
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static intsuborder_not_supported(struct dasd_ccw_req *cqr){	char *sense;	char reason;	char msg_format;	char msg_no;	/*	 * intrc values ENODEV, ENOLINK and EPERM	 * will be optained from sleep_on to indicate that no	 * IO operation can be started	 */	if (cqr->intrc == -ENODEV)		return 1;	if (cqr->intrc == -ENOLINK)		return 1;	if (cqr->intrc == -EPERM)		return 1;	sense = dasd_get_sense(&cqr->irb);	if (!sense)		return 0;	reason = sense[0];	msg_format = (sense[7] & 0xF0);	msg_no = (sense[7] & 0x0F);	/* command reject, Format 0 MSG 4 - invalid parameter */	if ((reason == 0x80) && (msg_format == 0x00) && (msg_no == 0x04))		return 1;	return 0;}
static int
suborder_not_supported(struct dasd_ccw_req *cqr)
suborder_not_supported
struct dasd_ccw_req *cqr
struct dasd_ccw_req
dasd_ccw_req
*cqr
*
cqr
{	char *sense;	char reason;	char msg_format;	char msg_no;	/*	 * intrc values ENODEV, ENOLINK and EPERM	 * will be optained from sleep_on to indicate that no	 * IO operation can be started	 */	if (cqr->intrc == -ENODEV)		return 1;	if (cqr->intrc == -ENOLINK)		return 1;	if (cqr->intrc == -EPERM)		return 1;	sense = dasd_get_sense(&cqr->irb);	if (!sense)		return 0;	reason = sense[0];	msg_format = (sense[7] & 0xF0);	msg_no = (sense[7] & 0x0F);	/* command reject, Format 0 MSG 4 - invalid parameter */	if ((reason == 0x80) && (msg_format == 0x00) && (msg_no == 0x04))		return 1;	return 0;}
char *sense;
char *sense;
char
*sense
*
sense
char reason;
char reason;
char
reason
reason
char msg_format;
char msg_format;
char
msg_format
msg_format
char msg_no;
char msg_no;
char
msg_no
msg_no
if (cqr->intrc == -ENODEV)		return 1;
cqr->intrc == -ENODEV
cqr->intrc
cqr
cqr
intrc
-ENODEV
ENODEV
ENODEV
return 1;
1
if (cqr->intrc == -ENOLINK)		return 1;
cqr->intrc == -ENOLINK
cqr->intrc
cqr
cqr
intrc
-ENOLINK
ENOLINK
ENOLINK
return 1;
1
if (cqr->intrc == -EPERM)		return 1;
cqr->intrc == -EPERM
cqr->intrc
cqr
cqr
intrc
-EPERM
EPERM
EPERM
return 1;
1
sense = dasd_get_sense(&cqr->irb);
sense = dasd_get_sense(&cqr->irb)
sense
sense
dasd_get_sense(&cqr->irb)
dasd_get_sense
dasd_get_sense
&cqr->irb
cqr->irb
cqr
cqr
irb
if (!sense)		return 0;
!sense
sense
sense
return 0;
0
reason = sense[0];
reason = sense[0]
reason
reason
sense[0]
sense
sense
0
msg_format = (sense[7] & 0xF0);
msg_format = (sense[7] & 0xF0)
msg_format
msg_format
(sense[7] & 0xF0)
sense[7] & 0xF0
sense[7]
sense
sense
7
0xF0
msg_no = (sense[7] & 0x0F);
msg_no = (sense[7] & 0x0F)
msg_no
msg_no
(sense[7] & 0x0F)
sense[7] & 0x0F
sense[7]
sense
sense
7
0x0F
if ((reason == 0x80) && (msg_format == 0x00) && (msg_no == 0x04))		return 1;
(reason == 0x80) && (msg_format == 0x00) && (msg_no == 0x04)
(reason == 0x80) && (msg_format == 0x00)
(reason == 0x80)
reason == 0x80
reason
reason
0x80
(msg_format == 0x00)
msg_format == 0x00
msg_format
msg_format
0x00
(msg_no == 0x04)
msg_no == 0x04
msg_no
msg_no
0x04
return 1;
1
return 0;
0
-----joern-----
(58,47,0)
(15,24,0)
(49,18,0)
(25,44,0)
(37,45,0)
(71,49,0)
(10,49,0)
(62,57,0)
(41,36,0)
(65,12,0)
(21,10,0)
(50,7,0)
(68,39,0)
(74,52,0)
(9,12,0)
(9,11,0)
(35,47,0)
(61,11,0)
(76,13,0)
(64,74,0)
(49,10,0)
(8,69,0)
(7,44,0)
(51,19,0)
(42,18,0)
(74,80,0)
(76,43,0)
(26,24,0)
(32,16,0)
(27,44,0)
(16,12,0)
(23,7,0)
(30,50,0)
(13,44,0)
(14,40,0)
(18,49,0)
(45,37,0)
(16,39,0)
(76,57,0)
(73,50,0)
(47,35,0)
(5,9,0)
(39,16,0)
(1,44,0)
(18,7,0)
(11,61,0)
(77,44,0)
(20,40,0)
(45,52,0)
(63,0,0)
(17,44,0)
(34,61,0)
(53,61,0)
(70,47,0)
(15,56,0)
(48,44,0)
(80,19,0)
(12,44,0)
(55,44,0)
(76,79,0)
(10,44,0)
(76,36,0)
(66,45,0)
(69,7,0)
(4,14,0)
(78,18,0)
(46,44,0)
(56,15,0)
(7,23,0)
(11,29,0)
(12,16,0)
(47,52,0)
(37,23,0)
(54,14,0)
(29,14,0)
(38,45,0)
(3,43,0)
(60,39,0)
(24,15,0)
(80,74,0)
(6,56,0)
(76,67,0)
(61,10,0)
(29,11,0)
(33,44,0)
(40,50,0)
(72,67,0)
(19,80,0)
(39,7,0)
(35,0,0)
(0,35,0)
(28,9,0)
(11,9,0)
(31,79,0)
(14,29,0)
(50,40,0)
(59,13,0)
(23,37,0)
(24,52,0)
(40,44,0)
(22,24,0)
(2,74,0)
(75,7,0)
(6,24,1)
(59,29,1)
(76,67,1)
(9,12,1)
(16,32,1)
(23,37,1)
(0,63,1)
(15,56,1)
(67,72,1)
(71,18,1)
(7,23,1)
(29,11,1)
(60,68,1)
(4,54,1)
(61,10,1)
(47,58,1)
(20,69,1)
(8,7,1)
(74,64,1)
(36,41,1)
(14,4,1)
(39,7,1)
(15,24,1)
(9,5,1)
(11,9,1)
(45,38,1)
(11,61,1)
(40,50,1)
(50,7,1)
(32,39,1)
(76,13,1)
(62,29,1)
(64,2,1)
(80,19,1)
(79,31,1)
(76,36,1)
(28,61,1)
(51,74,1)
(30,20,1)
(3,15,1)
(69,7,1)
(66,75,1)
(80,74,1)
(75,80,1)
(76,57,1)
(31,80,1)
(74,52,1)
(76,79,1)
(78,21,1)
(65,10,1)
(18,42,1)
(24,22,1)
(73,30,1)
(19,51,1)
(41,35,1)
(35,0,1)
(37,45,1)
(76,43,1)
(58,70,1)
(53,34,1)
(72,69,1)
(18,7,1)
(5,28,1)
(61,53,1)
(21,40,1)
(45,52,1)
(63,47,1)
(38,66,1)
(42,78,1)
(69,8,1)
(22,26,1)
(2,35,1)
(47,52,1)
(16,39,1)
(13,59,1)
(10,49,1)
(50,73,1)
(70,15,1)
(68,65,1)
(57,62,1)
(35,47,1)
(14,40,1)
(12,16,1)
(34,14,1)
(29,14,1)
(43,3,1)
(49,18,1)
(39,60,1)
(56,6,1)
(54,12,1)
(49,71,1)
(24,52,1)
(7,80,2)
(43,15,2)
(15,24,2)
(31,80,2)
(76,13,2)
(73,69,2)
(60,69,2)
(8,80,2)
(65,69,2)
(70,15,2)
(3,15,2)
(34,14,2)
(66,80,2)
(39,69,2)
(10,49,2)
(18,69,2)
(14,69,2)
(45,80,2)
(14,40,2)
(47,15,2)
(28,61,2)
(76,67,2)
(58,15,2)
(74,52,2)
(11,9,2)
(79,80,2)
(36,35,2)
(64,35,2)
(41,35,2)
(9,61,2)
(69,7,2)
(80,74,2)
(71,69,2)
(9,12,2)
(7,23,2)
(57,29,2)
(63,15,2)
(11,14,2)
(11,61,2)
(23,37,2)
(19,35,2)
(53,14,2)
(59,29,2)
(20,69,2)
(0,15,2)
(23,80,2)
(29,14,2)
(49,18,2)
(72,69,2)
(35,15,2)
(69,80,2)
(15,56,2)
(16,39,2)
(16,69,2)
(80,19,2)
(40,50,2)
(45,52,2)
(80,35,2)
(61,14,2)
(75,80,2)
(2,35,2)
(21,69,2)
(50,7,2)
(78,69,2)
(61,10,2)
(37,80,2)
(42,69,2)
(51,35,2)
(39,7,2)
(29,11,2)
(49,69,2)
(76,36,2)
(67,69,2)
(29,69,2)
(40,69,2)
(12,16,2)
(37,45,2)
(38,80,2)
(24,52,2)
(50,69,2)
(30,69,2)
(5,61,2)
(54,69,2)
(47,52,2)
(12,69,2)
(35,47,2)
(10,69,2)
(18,7,2)
(13,29,2)
(76,79,2)
(62,29,2)
(76,57,2)
(68,69,2)
(76,43,2)
(35,0,2)
(32,69,2)
(74,35,2)
(4,69,2)
-----------------------------------
(0,-ENOLINK)
(1,if (cqr->intrc == -ENODEV)
(2,cqr)
(3,1)
(4,0x80)
(5,0x04)
(6,ENODEV)
(7,sense = dasd_get_sense(&cqr->irb)
(8,sense)
(9,msg_no == 0x04)
(10,msg_format = (sense[7] & 0xF0)
(11,(msg_format == 0x00)
(12,msg_no = (sense[7] & 0x0F)
(13,return 0;)
(14,reason == 0x80)
(15,cqr->intrc == -ENODEV)
(16,sense[7] & 0x0F)
(17,reason)
(18,sense[7])
(19,-EPERM)
(20,reason)
(21,msg_format)
(22,intrc)
(23,dasd_get_sense(&cqr->irb)
(24,cqr->intrc)
(25,sense)
(26,cqr)
(27,msg_no)
(28,msg_no)
(29,(reason == 0x80)
(30,sense)
(31,1)
(32,0x0F)
(33,if (cqr->intrc == -EPERM)
(34,msg_format)
(35,cqr->intrc == -ENOLINK)
(36,return 1;)
(37,&cqr->irb)
(38,irb)
(39,sense[7])
(40,reason = sense[0])
(41,1)
(42,7)
(43,return 1;)
(44,)
(45,cqr->irb)
(46,msg_format)
(47,cqr->intrc)
(48,if (!sense)
(49,sense[7] & 0xF0)
(50,sense[0])
(51,EPERM)
(52,struct dasd_ccw_req *cqr)
(53,0x00)
(54,reason)
(55,if (cqr->intrc == -ENOLINK)
(56,-ENODEV)
(57,return 1;)
(58,intrc)
(59,0)
(60,7)
(61,msg_format == 0x00)
(62,1)
(63,ENOLINK)
(64,intrc)
(65,msg_no)
(66,cqr)
(67,return 0;)
(68,sense)
(69,!sense)
(70,cqr)
(71,0xF0)
(72,0)
(73,0)
(74,cqr->intrc)
(75,sense)
(76,RET)
(77,if ((reason == 0x80)
(78,sense)
(79,return 1;)
(80,cqr->intrc == -EPERM)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^