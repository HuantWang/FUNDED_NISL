-----label-----
0
-----code-----
void
pmap_swapin_proc(struct proc *p)
{
#if 0
	int i,rv;
	vm_object_t upobj;
	vm_page_t m;

	crit_enter();
	upobj = p->p_upages_obj;
	for (i = 0; i < UPAGES; i++) {
		m = vm_page_grab(upobj, i, VM_ALLOC_NORMAL | VM_ALLOC_RETRY);

		pmap_kenter((vm_offset_t)p->p_addr + (i * PAGE_SIZE),
			VM_PAGE_TO_PHYS(m));

		if (m->valid != VM_PAGE_BITS_ALL) {
			rv = vm_pager_get_pages(upobj, &m, 1, 0);
			if (rv != VM_PAGER_OK)
				panic("pmap_swapin_proc: cannot get upages for proc: %d\n", p->p_pid);
			m = vm_page_lookup(upobj, i);
			m->valid = VM_PAGE_BITS_ALL;
		}
		vm_page_wire(m);
		vm_page_wakeup(m);
		vm_page_flag_set(m, PG_MAPPED | PG_WRITEABLE);
	}
	crit_exit();
#endif
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
-----nextToken-----
2,4,7,9,10,11
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;
-----ast_node-----
voidpmap_swapin_proc(struct proc *p){#if 0	int i,rv;	vm_object_t upobj;	vm_page_t m;	crit_enter();	upobj = p->p_upages_obj;	for (i = 0; i < UPAGES; i++) {		m = vm_page_grab(upobj, i, VM_ALLOC_NORMAL | VM_ALLOC_RETRY);		pmap_kenter((vm_offset_t)p->p_addr + (i * PAGE_SIZE),			VM_PAGE_TO_PHYS(m));		if (m->valid != VM_PAGE_BITS_ALL) {			rv = vm_pager_get_pages(upobj, &m, 1, 0);			if (rv != VM_PAGER_OK)				panic("pmap_swapin_proc: cannot get upages for proc: %d\n", p->p_pid);			m = vm_page_lookup(upobj, i);			m->valid = VM_PAGE_BITS_ALL;		}		vm_page_wire(m);		vm_page_wakeup(m);		vm_page_flag_set(m, PG_MAPPED | PG_WRITEABLE);	}	crit_exit();#endif}
void
pmap_swapin_proc(struct proc *p)
pmap_swapin_proc
struct proc *p
struct proc
proc
*p
*
p
{#if 0	int i,rv;	vm_object_t upobj;	vm_page_t m;	crit_enter();	upobj = p->p_upages_obj;	for (i = 0; i < UPAGES; i++) {		m = vm_page_grab(upobj, i, VM_ALLOC_NORMAL | VM_ALLOC_RETRY);		pmap_kenter((vm_offset_t)p->p_addr + (i * PAGE_SIZE),			VM_PAGE_TO_PHYS(m));		if (m->valid != VM_PAGE_BITS_ALL) {			rv = vm_pager_get_pages(upobj, &m, 1, 0);			if (rv != VM_PAGER_OK)				panic("pmap_swapin_proc: cannot get upages for proc: %d\n", p->p_pid);			m = vm_page_lookup(upobj, i);			m->valid = VM_PAGE_BITS_ALL;		}		vm_page_wire(m);		vm_page_wakeup(m);		vm_page_flag_set(m, PG_MAPPED | PG_WRITEABLE);	}	crit_exit();#endif}
-----joern-----
(2,7,1)
-----------------------------------
(0,vm_page_grab(upobj, i, VM_ALLOC_NORMAL | VM_ALLOC_RETRY)
(1,UPAGES)
(2,m)
(3,vm_page_wire(m)
(4,VM_ALLOC_NORMAL)
(5,0)
(6,p_upages_obj)
(7,vm_page_wakeup(m)
(8,valid)
(9,p)
(10,i)
(11,rv = vm_pager_get_pages(upobj, &m, 1, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^