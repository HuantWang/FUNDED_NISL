-----label-----
1
-----code-----
static ssize_t
pnp_set_current_resources(struct device * dmdev, const char * ubuf, size_t count)
{
	struct pnp_dev *dev = to_pnp_dev(dmdev);
	char	*buf = (void *)ubuf;
	int	retval = 0;

	if (dev->status & PNP_ATTACHED) {
		retval = -EBUSY;
		pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id);
		goto done;
	}

	while (isspace(*buf))
		++buf;
	if (!strnicmp(buf,"disable",7)) {
		retval = pnp_disable_dev(dev);
		goto done;
	}
	if (!strnicmp(buf,"activate",8)) {
		retval = pnp_activate_dev(dev);
		goto done;
	}
	if (!strnicmp(buf,"fill",4)) {
		if (dev->active)
			goto done;
		retval = pnp_auto_config_dev(dev);
		goto done;
	}
	if (!strnicmp(buf,"auto",4)) {
		if (dev->active)
			goto done;
		pnp_init_resource_table(&dev->res);
		retval = pnp_auto_config_dev(dev);
		goto done;
	}
	if (!strnicmp(buf,"clear",5)) {
		if (dev->active)
			goto done;
		pnp_init_resource_table(&dev->res);
		goto done;
	}
	if (!strnicmp(buf,"get",3)) {
		down(&pnp_res_mutex);
		if (pnp_can_read(dev))
			dev->protocol->get(dev, &dev->res);
		up(&pnp_res_mutex);
		goto done;
	}
	if (!strnicmp(buf,"set",3)) {
		int nport = 0, nmem = 0, nirq = 0, ndma = 0;
		if (dev->active)
			goto done;
		buf += 3;
		pnp_init_resource_table(&dev->res);
		down(&pnp_res_mutex);
		while (1) {
			while (isspace(*buf))
				++buf;
			if (!strnicmp(buf,"io",2)) {
				buf += 2;
				while (isspace(*buf))
					++buf;
				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);
				while (isspace(*buf))
					++buf;
				if(*buf == '-') {
					buf += 1;
					while (isspace(*buf))
						++buf;
					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);
				} else
					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;
				dev->res.port_resource[nport].flags = IORESOURCE_IO;
				nport++;
				if (nport >= PNP_MAX_PORT)
					break;
				continue;
			}
			if (!strnicmp(buf,"mem",3)) {
				buf += 3;
				while (isspace(*buf))
					++buf;
				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);
				while (isspace(*buf))
					++buf;
				if(*buf == '-') {
					buf += 1;
					while (isspace(*buf))
						++buf;
					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);
				} else
					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;
				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;
				nmem++;
				if (nmem >= PNP_MAX_MEM)
					break;
				continue;
			}
			if (!strnicmp(buf,"irq",3)) {
				buf += 3;
				while (isspace(*buf))
					++buf;
				dev->res.irq_resource[nirq].start =
				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);
				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;
				nirq++;
				if (nirq >= PNP_MAX_IRQ)
					break;
				continue;
			}
			if (!strnicmp(buf,"dma",3)) {
				buf += 3;
				while (isspace(*buf))
					++buf;
				dev->res.dma_resource[ndma].start =
				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);
				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;
				ndma++;
				if (ndma >= PNP_MAX_DMA)
					break;
				continue;
			}
			break;
		}
		up(&pnp_res_mutex);
		goto done;
	}
 done:
	if (retval)
		return retval;
	return count;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
43,45
44,45
44,46
46,47
48,49
50,51
51,52
51,53
53,54
53,55
55,56
57,58
57,59
58,59
58,60
59,60
59,61
60,61
63,64
65,66
65,67
65,68
66,67
67,68
67,69
68,69
70,71
71,72
73,74
74,75
74,76
74,77
75,76
78,79
78,80
79,80
79,81
80,81
84,85
86,87
86,88
87,88
87,89
88,89
90,91
91,92
93,94
94,95
95,96
97,98
97,99
98,99
99,100
99,101
99,102
99,103
100,101
102,103
106,107
106,108
107,108
108,109
108,110
109,110
111,112
111,113
112,113
114,115
116,117
118,119
118,120
119,120
120,121
120,122
120,123
120,124
121,122
123,124
127,128
127,129
128,129
129,130
129,131
130,131
132,133
132,134
133,134
135,136
137,138
139,140
139,141
140,141
141,142
141,143
141,144
141,145
142,143
144,145
148,149
148,150
148,151
149,150
149,151
150,151
150,152
151,152
154,155
156,157
157,158
157,159
158,159
160,161
160,162
161,162
163,164
165,166
167,168
167,169
168,169
169,170
169,171
169,172
169,173
170,171
172,173
176,177
176,178
176,179
176,180
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
188,189
189,190
189,191
190,191
193,194
194,195
194,196
195,196
197,198
197,199
198,199
200,201
202,203
204,205
204,206
205,206
206,207
206,208
206,209
206,210
207,208
209,210
213,214
213,215
213,216
214,215
214,216
215,216
215,217
216,217
219,220
221,222
222,223
222,224
223,224
225,226
226,227
226,228
227,228
230,231
232,233
232,234
233,234
234,235
234,236
234,237
234,238
235,236
237,238
241,242
241,243
241,244
241,245
242,243
243,244
243,245
244,245
246,247
247,248
247,249
250,251
250,252
251,252
251,253
252,253
254,255
256,257
257,258
257,259
257,260
258,259
258,260
259,260
259,261
260,261
264,265
266,267
267,268
267,269
268,269
271,272
272,273
272,274
273,274
275,276
276,277
278,279
280,281
280,282
281,282
282,283
282,284
282,285
282,286
283,284
285,286
289,290
289,291
289,292
289,293
289,294
289,295
289,296
289,297
290,291
291,292
291,293
291,294
291,295
291,296
293,294
293,295
295,296
297,298
297,299
299,300
301,302
301,303
303,304
305,306
305,307
307,308
309,310
309,311
310,311
310,312
311,312
314,315
316,317
317,318
317,319
318,319
321,322
322,323
322,324
323,324
325,326
326,327
326,328
327,328
330,331
331,332
331,333
332,333
334,335
335,336
335,337
338,339
338,340
340,341
340,342
340,343
340,344
340,345
340,346
341,342
341,343
342,343
342,344
343,344
345,346
346,347
348,349
349,350
350,351
352,353
352,354
353,354
354,355
354,356
354,357
354,358
355,356
357,358
361,362
361,363
361,364
361,365
361,366
361,367
361,368
361,369
361,370
362,363
363,364
363,365
364,365
367,368
367,369
368,369
368,370
369,370
371,372
372,373
374,375
375,376
376,377
378,379
379,380
379,381
380,381
380,382
381,382
381,383
382,383
382,384
383,384
383,385
384,385
388,389
391,392
391,393
391,394
391,395
392,393
394,395
396,397
397,398
400,401
400,402
401,402
401,403
402,403
404,405
405,406
407,408
408,409
409,410
411,412
411,413
411,414
412,413
412,414
413,414
414,415
417,418
417,419
417,420
418,419
419,420
419,421
420,421
423,424
423,425
424,425
424,426
425,426
427,428
428,429
430,431
431,432
432,433
434,435
435,436
435,437
436,437
436,438
437,438
437,439
438,439
438,440
439,440
439,441
440,441
444,445
447,448
447,449
447,450
447,451
448,449
450,451
452,453
453,454
456,457
457,458
457,459
458,459
458,460
459,460
459,461
460,461
460,462
461,462
461,463
462,463
466,467
469,470
469,471
470,471
470,472
471,472
471,473
472,473
472,474
473,474
477,478
480,481
481,482
481,483
482,483
482,484
483,484
483,485
484,485
484,486
485,486
485,487
486,487
490,491
493,494
495,496
496,497
497,498
499,500
499,501
500,501
500,502
501,502
503,504
507,508
507,509
508,509
509,510
509,511
509,512
509,513
510,511
512,513
516,517
516,518
516,519
516,520
516,521
516,522
516,523
516,524
516,525
517,518
518,519
518,520
519,520
522,523
522,524
523,524
523,525
524,525
526,527
527,528
529,530
530,531
531,532
533,534
534,535
534,536
535,536
535,537
536,537
536,538
537,538
537,539
538,539
538,540
539,540
543,544
546,547
546,548
546,549
546,550
547,548
549,550
551,552
552,553
555,556
555,557
556,557
556,558
557,558
559,560
560,561
562,563
563,564
564,565
566,567
566,568
566,569
567,568
567,569
568,569
569,570
572,573
572,574
572,575
573,574
574,575
574,576
575,576
578,579
578,580
579,580
579,581
580,581
582,583
583,584
585,586
586,587
587,588
589,590
590,591
590,592
591,592
591,593
592,593
592,594
593,594
593,595
594,595
594,596
595,596
599,600
602,603
602,604
602,605
602,606
603,604
605,606
607,608
608,609
611,612
612,613
612,614
613,614
613,615
614,615
614,616
615,616
615,617
616,617
616,618
617,618
621,622
624,625
624,626
625,626
625,627
626,627
626,628
627,628
627,629
628,629
632,633
635,636
636,637
636,638
637,638
637,639
638,639
638,640
639,640
639,641
640,641
640,642
641,642
645,646
648,649
650,651
651,652
652,653
654,655
654,656
655,656
655,657
656,657
658,659
662,663
662,664
663,664
664,665
664,666
664,667
664,668
665,666
667,668
671,672
671,673
671,674
671,675
671,676
671,677
671,678
672,673
673,674
673,675
674,675
677,678
677,679
678,679
678,680
679,680
681,682
682,683
684,685
685,686
686,687
688,689
689,690
689,691
690,691
690,692
691,692
691,693
692,693
692,694
693,694
693,695
694,695
698,699
701,702
701,703
702,703
702,704
703,704
703,705
704,705
704,706
705,706
705,707
706,707
710,711
713,714
713,715
713,716
713,717
714,715
716,717
718,719
719,720
722,723
723,724
723,725
724,725
724,726
725,726
725,727
726,727
726,728
727,728
727,729
728,729
732,733
735,736
737,738
738,739
739,740
741,742
741,743
742,743
742,744
743,744
745,746
749,750
749,751
750,751
751,752
751,753
751,754
751,755
752,753
754,755
758,759
758,760
758,761
758,762
758,763
758,764
758,765
759,760
760,761
760,762
761,762
764,765
764,766
765,766
765,767
766,767
768,769
769,770
771,772
772,773
773,774
775,776
776,777
776,778
777,778
777,779
778,779
778,780
779,780
779,781
780,781
780,782
781,782
785,786
788,789
788,790
789,790
789,791
790,791
790,792
791,792
791,793
792,793
792,794
793,794
797,798
800,801
800,802
800,803
800,804
801,802
803,804
805,806
806,807
809,810
810,811
810,812
811,812
811,813
812,813
812,814
813,814
813,815
814,815
814,816
815,816
819,820
822,823
824,825
825,826
826,827
828,829
828,830
829,830
829,831
830,831
832,833
837,838
838,839
838,840
839,840
841,842
842,843
844,845
846,847
846,848
848,849
848,850
849,850
851,852
852,853
854,855
855,856
-----nextToken-----

-----computeFrom-----
58,59
58,60
67,68
67,69
108,109
108,110
129,130
129,131
157,158
157,159
194,195
194,196
317,318
317,319
363,364
363,365
379,380
379,381
412,413
412,414
419,420
419,421
435,436
435,437
457,458
457,459
481,482
481,483
500,501
500,502
518,519
518,520
534,535
534,536
567,568
567,569
574,575
574,576
590,591
590,592
612,613
612,614
636,637
636,638
655,656
655,657
673,674
673,675
689,690
689,691
701,702
701,703
723,724
723,725
742,743
742,744
760,761
760,762
776,777
776,778
788,789
788,790
810,811
810,812
829,830
829,831
-----guardedBy-----
61,82
415,454
570,609
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;WhileStatement;LiteralExpression;CompoundStatement;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ContinueStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ContinueStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ContinueStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ContinueStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static ssize_tpnp_set_current_resources(struct device * dmdev, const char * ubuf, size_t count){	struct pnp_dev *dev = to_pnp_dev(dmdev);	char	*buf = (void *)ubuf;	int	retval = 0;	if (dev->status & PNP_ATTACHED) {		retval = -EBUSY;		pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id);		goto done;	}	while (isspace(*buf))		++buf;	if (!strnicmp(buf,"disable",7)) {		retval = pnp_disable_dev(dev);		goto done;	}	if (!strnicmp(buf,"activate",8)) {		retval = pnp_activate_dev(dev);		goto done;	}	if (!strnicmp(buf,"fill",4)) {		if (dev->active)			goto done;		retval = pnp_auto_config_dev(dev);		goto done;	}	if (!strnicmp(buf,"auto",4)) {		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		retval = pnp_auto_config_dev(dev);		goto done;	}	if (!strnicmp(buf,"clear",5)) {		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		goto done;	}	if (!strnicmp(buf,"get",3)) {		down(&pnp_res_mutex);		if (pnp_can_read(dev))			dev->protocol->get(dev, &dev->res);		up(&pnp_res_mutex);		goto done;	}	if (!strnicmp(buf,"set",3)) {		int nport = 0, nmem = 0, nirq = 0, ndma = 0;		if (dev->active)			goto done;		buf += 3;		pnp_init_resource_table(&dev->res);		down(&pnp_res_mutex);		while (1) {			while (isspace(*buf))				++buf;			if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}			if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}			if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}			if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}			break;		}		up(&pnp_res_mutex);		goto done;	} done:	if (retval)		return retval;	return count;}
static ssize_t
ssize_t
pnp_set_current_resources(struct device * dmdev, const char * ubuf, size_t count)
pnp_set_current_resources
struct device * dmdev
struct device
device
* dmdev
*
dmdev
const char * ubuf
const char
* ubuf
*
ubuf
size_t count
size_t
size_t
count
count
{	struct pnp_dev *dev = to_pnp_dev(dmdev);	char	*buf = (void *)ubuf;	int	retval = 0;	if (dev->status & PNP_ATTACHED) {		retval = -EBUSY;		pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id);		goto done;	}	while (isspace(*buf))		++buf;	if (!strnicmp(buf,"disable",7)) {		retval = pnp_disable_dev(dev);		goto done;	}	if (!strnicmp(buf,"activate",8)) {		retval = pnp_activate_dev(dev);		goto done;	}	if (!strnicmp(buf,"fill",4)) {		if (dev->active)			goto done;		retval = pnp_auto_config_dev(dev);		goto done;	}	if (!strnicmp(buf,"auto",4)) {		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		retval = pnp_auto_config_dev(dev);		goto done;	}	if (!strnicmp(buf,"clear",5)) {		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		goto done;	}	if (!strnicmp(buf,"get",3)) {		down(&pnp_res_mutex);		if (pnp_can_read(dev))			dev->protocol->get(dev, &dev->res);		up(&pnp_res_mutex);		goto done;	}	if (!strnicmp(buf,"set",3)) {		int nport = 0, nmem = 0, nirq = 0, ndma = 0;		if (dev->active)			goto done;		buf += 3;		pnp_init_resource_table(&dev->res);		down(&pnp_res_mutex);		while (1) {			while (isspace(*buf))				++buf;			if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}			if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}			if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}			if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}			break;		}		up(&pnp_res_mutex);		goto done;	} done:	if (retval)		return retval;	return count;}
struct pnp_dev *dev = to_pnp_dev(dmdev);
struct pnp_dev *dev = to_pnp_dev(dmdev);
struct pnp_dev
pnp_dev
*dev = to_pnp_dev(dmdev)
*
dev
= to_pnp_dev(dmdev)
to_pnp_dev(dmdev)
to_pnp_dev
to_pnp_dev
dmdev
dmdev
char	*buf = (void *)ubuf;
char	*buf = (void *)ubuf;
char
*buf = (void *)ubuf
*
buf
= (void *)ubuf
(void *)ubuf
void *
void
*
*
ubuf
ubuf
int	retval = 0;
int	retval = 0;
int
retval = 0
retval
= 0
0
if (dev->status & PNP_ATTACHED) {		retval = -EBUSY;		pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id);		goto done;	}
dev->status & PNP_ATTACHED
dev->status
dev
dev
status
PNP_ATTACHED
PNP_ATTACHED
{		retval = -EBUSY;		pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id);		goto done;	}
retval = -EBUSY;
retval = -EBUSY
retval
retval
-EBUSY
EBUSY
EBUSY
pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id);
pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id)
pnp_info
pnp_info
"Device %s cannot be configured because it is in use."
dev->dev.bus_id
dev->dev
dev
dev
dev
bus_id
goto done;
done
while (isspace(*buf))		++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
if (!strnicmp(buf,"disable",7)) {		retval = pnp_disable_dev(dev);		goto done;	}
!strnicmp(buf,"disable",7)
strnicmp(buf,"disable",7)
strnicmp
strnicmp
buf
buf
"disable"
7
{		retval = pnp_disable_dev(dev);		goto done;	}
retval = pnp_disable_dev(dev);
retval = pnp_disable_dev(dev)
retval
retval
pnp_disable_dev(dev)
pnp_disable_dev
pnp_disable_dev
dev
dev
goto done;
done
if (!strnicmp(buf,"activate",8)) {		retval = pnp_activate_dev(dev);		goto done;	}
!strnicmp(buf,"activate",8)
strnicmp(buf,"activate",8)
strnicmp
strnicmp
buf
buf
"activate"
8
{		retval = pnp_activate_dev(dev);		goto done;	}
retval = pnp_activate_dev(dev);
retval = pnp_activate_dev(dev)
retval
retval
pnp_activate_dev(dev)
pnp_activate_dev
pnp_activate_dev
dev
dev
goto done;
done
if (!strnicmp(buf,"fill",4)) {		if (dev->active)			goto done;		retval = pnp_auto_config_dev(dev);		goto done;	}
!strnicmp(buf,"fill",4)
strnicmp(buf,"fill",4)
strnicmp
strnicmp
buf
buf
"fill"
4
{		if (dev->active)			goto done;		retval = pnp_auto_config_dev(dev);		goto done;	}
if (dev->active)			goto done;
dev->active
dev
dev
active
goto done;
done
retval = pnp_auto_config_dev(dev);
retval = pnp_auto_config_dev(dev)
retval
retval
pnp_auto_config_dev(dev)
pnp_auto_config_dev
pnp_auto_config_dev
dev
dev
goto done;
done
if (!strnicmp(buf,"auto",4)) {		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		retval = pnp_auto_config_dev(dev);		goto done;	}
!strnicmp(buf,"auto",4)
strnicmp(buf,"auto",4)
strnicmp
strnicmp
buf
buf
"auto"
4
{		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		retval = pnp_auto_config_dev(dev);		goto done;	}
if (dev->active)			goto done;
dev->active
dev
dev
active
goto done;
done
pnp_init_resource_table(&dev->res);
pnp_init_resource_table(&dev->res)
pnp_init_resource_table
pnp_init_resource_table
&dev->res
dev->res
dev
dev
res
retval = pnp_auto_config_dev(dev);
retval = pnp_auto_config_dev(dev)
retval
retval
pnp_auto_config_dev(dev)
pnp_auto_config_dev
pnp_auto_config_dev
dev
dev
goto done;
done
if (!strnicmp(buf,"clear",5)) {		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		goto done;	}
!strnicmp(buf,"clear",5)
strnicmp(buf,"clear",5)
strnicmp
strnicmp
buf
buf
"clear"
5
{		if (dev->active)			goto done;		pnp_init_resource_table(&dev->res);		goto done;	}
if (dev->active)			goto done;
dev->active
dev
dev
active
goto done;
done
pnp_init_resource_table(&dev->res);
pnp_init_resource_table(&dev->res)
pnp_init_resource_table
pnp_init_resource_table
&dev->res
dev->res
dev
dev
res
goto done;
done
if (!strnicmp(buf,"get",3)) {		down(&pnp_res_mutex);		if (pnp_can_read(dev))			dev->protocol->get(dev, &dev->res);		up(&pnp_res_mutex);		goto done;	}
!strnicmp(buf,"get",3)
strnicmp(buf,"get",3)
strnicmp
strnicmp
buf
buf
"get"
3
{		down(&pnp_res_mutex);		if (pnp_can_read(dev))			dev->protocol->get(dev, &dev->res);		up(&pnp_res_mutex);		goto done;	}
down(&pnp_res_mutex);
down(&pnp_res_mutex);
down
down
(&pnp_res_mutex)
&pnp_res_mutex
&
pnp_res_mutex
if (pnp_can_read(dev))			dev->protocol->get(dev, &dev->res);
pnp_can_read(dev)
pnp_can_read
pnp_can_read
dev
dev
dev->protocol->get(dev, &dev->res);
dev->protocol->get(dev, &dev->res)
dev->protocol->get
dev->protocol
dev
dev
protocol
get
dev
dev
&dev->res
dev->res
dev
dev
res
up(&pnp_res_mutex);
up(&pnp_res_mutex)
up
up
&pnp_res_mutex
pnp_res_mutex
pnp_res_mutex
goto done;
done
if (!strnicmp(buf,"set",3)) {		int nport = 0, nmem = 0, nirq = 0, ndma = 0;		if (dev->active)			goto done;		buf += 3;		pnp_init_resource_table(&dev->res);		down(&pnp_res_mutex);		while (1) {			while (isspace(*buf))				++buf;			if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}			if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}			if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}			if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}			break;		}		up(&pnp_res_mutex);		goto done;	}
!strnicmp(buf,"set",3)
strnicmp(buf,"set",3)
strnicmp
strnicmp
buf
buf
"set"
3
{		int nport = 0, nmem = 0, nirq = 0, ndma = 0;		if (dev->active)			goto done;		buf += 3;		pnp_init_resource_table(&dev->res);		down(&pnp_res_mutex);		while (1) {			while (isspace(*buf))				++buf;			if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}			if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}			if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}			if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}			break;		}		up(&pnp_res_mutex);		goto done;	}
int nport = 0, nmem = 0, nirq = 0, ndma = 0;
int nport = 0, nmem = 0, nirq = 0, ndma = 0;
int
nport = 0
nport
= 0
0
nmem = 0
nmem
= 0
0
nirq = 0
nirq
= 0
0
ndma = 0
ndma
= 0
0
if (dev->active)			goto done;
dev->active
dev
dev
active
goto done;
done
buf += 3;
buf += 3
buf
buf
3
pnp_init_resource_table(&dev->res);
pnp_init_resource_table(&dev->res)
pnp_init_resource_table
pnp_init_resource_table
&dev->res
dev->res
dev
dev
res
down(&pnp_res_mutex);
down(&pnp_res_mutex);
down
down
(&pnp_res_mutex)
&pnp_res_mutex
&
pnp_res_mutex
while (1) {			while (isspace(*buf))				++buf;			if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}			if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}			if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}			if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}			break;		}
1
{			while (isspace(*buf))				++buf;			if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}			if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}			if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}			if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}			break;		}
while (isspace(*buf))				++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
if (!strnicmp(buf,"io",2)) {				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}
!strnicmp(buf,"io",2)
strnicmp(buf,"io",2)
strnicmp
strnicmp
buf
buf
"io"
2
{				buf += 2;				while (isspace(*buf))					++buf;				dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;				dev->res.port_resource[nport].flags = IORESOURCE_IO;				nport++;				if (nport >= PNP_MAX_PORT)					break;				continue;			}
buf += 2;
buf += 2
buf
buf
2
while (isspace(*buf))					++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0);
dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0)
dev->res.port_resource[nport].start
dev->res.port_resource[nport]
dev->res.port_resource
dev->res
dev
dev
res
port_resource
nport
nport
start
simple_strtoul(buf,&buf,0)
simple_strtoul
simple_strtoul
buf
buf
&buf
buf
buf
0
while (isspace(*buf))					++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				} else					dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;
*buf == '-'
*buf
buf
buf
'-'
{					buf += 1;					while (isspace(*buf))						++buf;					dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);				}
buf += 1;
buf += 1
buf
buf
1
while (isspace(*buf))						++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0);
dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0)
dev->res.port_resource[nport].end
dev->res.port_resource[nport]
dev->res.port_resource
dev->res
dev
dev
res
port_resource
nport
nport
end
simple_strtoul(buf,&buf,0)
simple_strtoul
simple_strtoul
buf
buf
&buf
buf
buf
0
dev->res.port_resource[nport].end = dev->res.port_resource[nport].start;
dev->res.port_resource[nport].end = dev->res.port_resource[nport].start
dev->res.port_resource[nport].end
dev->res.port_resource[nport]
dev->res.port_resource
dev->res
dev
dev
res
port_resource
nport
nport
end
dev->res.port_resource[nport].start
dev->res.port_resource[nport]
dev->res.port_resource
dev->res
dev
dev
res
port_resource
nport
nport
start
dev->res.port_resource[nport].flags = IORESOURCE_IO;
dev->res.port_resource[nport].flags = IORESOURCE_IO
dev->res.port_resource[nport].flags
dev->res.port_resource[nport]
dev->res.port_resource
dev->res
dev
dev
res
port_resource
nport
nport
flags
IORESOURCE_IO
IORESOURCE_IO
nport++;
nport++
nport
nport
if (nport >= PNP_MAX_PORT)					break;
nport >= PNP_MAX_PORT
nport
nport
PNP_MAX_PORT
PNP_MAX_PORT
break;
continue;
if (!strnicmp(buf,"mem",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}
!strnicmp(buf,"mem",3)
strnicmp(buf,"mem",3)
strnicmp
strnicmp
buf
buf
"mem"
3
{				buf += 3;				while (isspace(*buf))					++buf;				dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);				while (isspace(*buf))					++buf;				if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;				dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;				nmem++;				if (nmem >= PNP_MAX_MEM)					break;				continue;			}
buf += 3;
buf += 3
buf
buf
3
while (isspace(*buf))					++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0);
dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0)
dev->res.mem_resource[nmem].start
dev->res.mem_resource[nmem]
dev->res.mem_resource
dev->res
dev
dev
res
mem_resource
nmem
nmem
start
simple_strtoul(buf,&buf,0)
simple_strtoul
simple_strtoul
buf
buf
&buf
buf
buf
0
while (isspace(*buf))					++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
if(*buf == '-') {					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				} else					dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;
*buf == '-'
*buf
buf
buf
'-'
{					buf += 1;					while (isspace(*buf))						++buf;					dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);				}
buf += 1;
buf += 1
buf
buf
1
while (isspace(*buf))						++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0);
dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0)
dev->res.mem_resource[nmem].end
dev->res.mem_resource[nmem]
dev->res.mem_resource
dev->res
dev
dev
res
mem_resource
nmem
nmem
end
simple_strtoul(buf,&buf,0)
simple_strtoul
simple_strtoul
buf
buf
&buf
buf
buf
0
dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start;
dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start
dev->res.mem_resource[nmem].end
dev->res.mem_resource[nmem]
dev->res.mem_resource
dev->res
dev
dev
res
mem_resource
nmem
nmem
end
dev->res.mem_resource[nmem].start
dev->res.mem_resource[nmem]
dev->res.mem_resource
dev->res
dev
dev
res
mem_resource
nmem
nmem
start
dev->res.mem_resource[nmem].flags = IORESOURCE_MEM;
dev->res.mem_resource[nmem].flags = IORESOURCE_MEM
dev->res.mem_resource[nmem].flags
dev->res.mem_resource[nmem]
dev->res.mem_resource
dev->res
dev
dev
res
mem_resource
nmem
nmem
flags
IORESOURCE_MEM
IORESOURCE_MEM
nmem++;
nmem++
nmem
nmem
if (nmem >= PNP_MAX_MEM)					break;
nmem >= PNP_MAX_MEM
nmem
nmem
PNP_MAX_MEM
PNP_MAX_MEM
break;
continue;
if (!strnicmp(buf,"irq",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}
!strnicmp(buf,"irq",3)
strnicmp(buf,"irq",3)
strnicmp
strnicmp
buf
buf
"irq"
3
{				buf += 3;				while (isspace(*buf))					++buf;				dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);				dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;				nirq++;				if (nirq >= PNP_MAX_IRQ)					break;				continue;			}
buf += 3;
buf += 3
buf
buf
3
while (isspace(*buf))					++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0);
dev->res.irq_resource[nirq].start =				dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0)
dev->res.irq_resource[nirq].start
dev->res.irq_resource[nirq]
dev->res.irq_resource
dev->res
dev
dev
res
irq_resource
nirq
nirq
start
dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0)
dev->res.irq_resource[nirq].end
dev->res.irq_resource[nirq]
dev->res.irq_resource
dev->res
dev
dev
res
irq_resource
nirq
nirq
end
simple_strtoul(buf,&buf,0)
simple_strtoul
simple_strtoul
buf
buf
&buf
buf
buf
0
dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ;
dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ
dev->res.irq_resource[nirq].flags
dev->res.irq_resource[nirq]
dev->res.irq_resource
dev->res
dev
dev
res
irq_resource
nirq
nirq
flags
IORESOURCE_IRQ
IORESOURCE_IRQ
nirq++;
nirq++
nirq
nirq
if (nirq >= PNP_MAX_IRQ)					break;
nirq >= PNP_MAX_IRQ
nirq
nirq
PNP_MAX_IRQ
PNP_MAX_IRQ
break;
continue;
if (!strnicmp(buf,"dma",3)) {				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}
!strnicmp(buf,"dma",3)
strnicmp(buf,"dma",3)
strnicmp
strnicmp
buf
buf
"dma"
3
{				buf += 3;				while (isspace(*buf))					++buf;				dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);				dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;				ndma++;				if (ndma >= PNP_MAX_DMA)					break;				continue;			}
buf += 3;
buf += 3
buf
buf
3
while (isspace(*buf))					++buf;
isspace(*buf)
isspace
isspace
*buf
buf
buf
++buf;
++buf
buf
buf
dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0);
dev->res.dma_resource[ndma].start =				dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0)
dev->res.dma_resource[ndma].start
dev->res.dma_resource[ndma]
dev->res.dma_resource
dev->res
dev
dev
res
dma_resource
ndma
ndma
start
dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0)
dev->res.dma_resource[ndma].end
dev->res.dma_resource[ndma]
dev->res.dma_resource
dev->res
dev
dev
res
dma_resource
ndma
ndma
end
simple_strtoul(buf,&buf,0)
simple_strtoul
simple_strtoul
buf
buf
&buf
buf
buf
0
dev->res.dma_resource[ndma].flags = IORESOURCE_DMA;
dev->res.dma_resource[ndma].flags = IORESOURCE_DMA
dev->res.dma_resource[ndma].flags
dev->res.dma_resource[ndma]
dev->res.dma_resource
dev->res
dev
dev
res
dma_resource
ndma
ndma
flags
IORESOURCE_DMA
IORESOURCE_DMA
ndma++;
ndma++
ndma
ndma
if (ndma >= PNP_MAX_DMA)					break;
ndma >= PNP_MAX_DMA
ndma
ndma
PNP_MAX_DMA
PNP_MAX_DMA
break;
continue;
break;
up(&pnp_res_mutex);
up(&pnp_res_mutex)
up
up
&pnp_res_mutex
pnp_res_mutex
pnp_res_mutex
goto done;
done
done:	if (retval)		return retval;
done
if (retval)		return retval;
retval
retval
return retval;
retval
retval
return count;
count
count
-----joern-----
(238,7,0)
(45,322,0)
(529,473,0)
(272,292,0)
(444,493,0)
(128,279,0)
(50,81,0)
(298,81,0)
(93,360,0)
(212,50,0)
(13,78,0)
(166,429,0)
(454,402,0)
(4,151,0)
(456,397,0)
(44,164,0)
(197,338,0)
(293,298,0)
(467,152,0)
(285,164,0)
(50,50,0)
(289,50,0)
(395,111,0)
(336,51,0)
(453,14,0)
(159,274,0)
(58,318,0)
(117,419,0)
(6,298,0)
(394,529,0)
(227,519,0)
(247,167,0)
(50,493,0)
(210,258,0)
(126,147,0)
(285,28,0)
(266,44,0)
(433,22,0)
(368,6,0)
(321,77,0)
(340,186,0)
(339,167,0)
(221,251,0)
(108,279,0)
(69,314,0)
(86,321,0)
(420,32,0)
(19,154,0)
(326,392,0)
(67,473,0)
(274,292,0)
(420,39,0)
(219,194,0)
(268,400,0)
(223,128,0)
(3,401,0)
(139,50,0)
(538,216,0)
(350,69,0)
(489,182,0)
(298,164,0)
(204,43,0)
(216,473,0)
(32,420,0)
(370,368,0)
(268,505,0)
(6,164,0)
(383,312,0)
(10,473,0)
(327,418,0)
(333,493,0)
(248,67,0)
(265,529,0)
(154,354,0)
(28,285,0)
(186,318,0)
(408,77,0)
(122,65,0)
(488,133,0)
(493,493,0)
(40,327,0)
(468,0,0)
(368,493,0)
(494,7,0)
(246,515,0)
(311,115,0)
(14,453,0)
(304,229,0)
(237,528,0)
(512,126,0)
(90,128,0)
(0,468,0)
(528,237,0)
(334,121,0)
(129,58,0)
(431,109,0)
(392,360,0)
(431,241,0)
(61,322,0)
(277,298,0)
(75,139,0)
(237,6,0)
(25,293,0)
(365,473,0)
(261,69,0)
(453,527,0)
(174,17,0)
(352,31,0)
(440,31,0)
(449,468,0)
(105,492,0)
(50,298,0)
(294,398,0)
(264,445,0)
(99,292,0)
(217,378,0)
(72,147,0)
(244,416,0)
(189,43,0)
(143,374,0)
(287,43,0)
(483,310,0)
(234,487,0)
(292,274,0)
(225,42,0)
(243,39,0)
(27,104,0)
(148,474,0)
(254,413,0)
(424,73,0)
(206,473,0)
(462,13,0)
(132,428,0)
(228,473,0)
(246,493,0)
(380,58,0)
(91,401,0)
(505,268,0)
(525,273,0)
(153,473,0)
(478,500,0)
(126,95,0)
(73,38,0)
(141,441,0)
(437,354,0)
(461,473,0)
(57,183,0)
(83,164,0)
(50,519,0)
(509,54,0)
(306,8,0)
(137,519,0)
(193,7,0)
(442,353,0)
(146,48,0)
(13,462,0)
(520,74,0)
(38,151,0)
(31,24,0)
(328,493,0)
(267,374,0)
(130,519,0)
(147,126,0)
(448,258,0)
(325,347,0)
(398,353,0)
(103,429,0)
(410,255,0)
(192,91,0)
(53,11,0)
(402,147,0)
(80,114,0)
(246,81,0)
(517,505,0)
(81,190,0)
(285,6,0)
(112,275,0)
(474,473,0)
(107,17,0)
(291,14,0)
(493,354,0)
(26,441,0)
(363,277,0)
(296,190,0)
(89,206,0)
(188,74,0)
(396,225,0)
(246,318,0)
(412,216,0)
(497,21,0)
(164,493,0)
(526,17,0)
(41,32,0)
(191,282,0)
(125,530,0)
(185,229,0)
(69,164,0)
(298,441,0)
(285,50,0)
(335,392,0)
(425,26,0)
(285,81,0)
(115,317,0)
(527,190,0)
(411,120,0)
(109,431,0)
(500,81,0)
(374,473,0)
(203,99,0)
(343,318,0)
(535,109,0)
(104,493,0)
(378,218,0)
(220,373,0)
(243,538,0)
(139,164,0)
(474,148,0)
(507,6,0)
(500,50,0)
(65,185,0)
(150,360,0)
(218,6,0)
(404,185,0)
(337,81,0)
(374,23,0)
(406,121,0)
(274,148,0)
(255,0,0)
(418,391,0)
(173,204,0)
(96,117,0)
(296,35,0)
(283,402,0)
(280,82,0)
(229,304,0)
(127,419,0)
(246,50,0)
(381,246,0)
(167,473,0)
(67,471,0)
(138,145,0)
(276,10,0)
(438,7,0)
(47,500,0)
(429,166,0)
(169,400,0)
(490,98,0)
(355,7,0)
(110,114,0)
(489,473,0)
(15,8,0)
(179,400,0)
(118,201,0)
(278,401,0)
(114,419,0)
(42,400,0)
(379,354,0)
(349,473,0)
(332,354,0)
(508,383,0)
(311,120,0)
(469,500,0)
(353,398,0)
(0,255,0)
(242,513,0)
(278,268,0)
(230,402,0)
(22,201,0)
(161,520,0)
(464,152,0)
(133,206,0)
(523,289,0)
(34,21,0)
(109,98,0)
(285,318,0)
(510,529,0)
(117,96,0)
(515,246,0)
(33,519,0)
(348,190,0)
(58,380,0)
(320,505,0)
(493,318,0)
(265,497,0)
(500,298,0)
(358,77,0)
(251,502,0)
(413,26,0)
(255,54,0)
(314,69,0)
(35,296,0)
(145,168,0)
(57,153,0)
(382,377,0)
(368,318,0)
(39,190,0)
(493,164,0)
(126,512,0)
(56,168,0)
(327,473,0)
(54,437,0)
(484,391,0)
(198,60,0)
(368,81,0)
(491,35,0)
(235,24,0)
(46,476,0)
(157,7,0)
(322,6,0)
(446,43,0)
(274,279,0)
(77,321,0)
(434,207,0)
(242,493,0)
(77,408,0)
(76,246,0)
(226,474,0)
(384,273,0)
(185,65,0)
(347,325,0)
(185,201,0)
(420,414,0)
(208,325,0)
(255,39,0)
(389,441,0)
(298,50,0)
(362,24,0)
(100,462,0)
(77,39,0)
(312,383,0)
(260,48,0)
(172,81,0)
(240,245,0)
(6,6,0)
(101,115,0)
(365,408,0)
(250,468,0)
(413,118,0)
(398,473,0)
(279,190,0)
(98,318,0)
(492,324,0)
(198,190,0)
(3,519,0)
(310,483,0)
(293,425,0)
(211,78,0)
(368,164,0)
(533,140,0)
(225,137,0)
(353,128,0)
(139,298,0)
(534,109,0)
(216,538,0)
(500,493,0)
(194,50,0)
(463,293,0)
(482,216,0)
(393,228,0)
(372,148,0)
(386,275,0)
(245,473,0)
(472,403,0)
(42,339,0)
(301,7,0)
(289,81,0)
(20,273,0)
(499,395,0)
(325,400,0)
(530,125,0)
(300,481,0)
(320,473,0)
(414,314,0)
(435,513,0)
(311,445,0)
(346,418,0)
(206,133,0)
(416,244,0)
(492,393,0)
(205,7,0)
(119,7,0)
(31,352,0)
(505,320,0)
(465,116,0)
(139,6,0)
(403,182,0)
(52,241,0)
(136,203,0)
(32,41,0)
(521,327,0)
(148,274,0)
(232,500,0)
(307,324,0)
(480,206,0)
(71,264,0)
(428,473,0)
(493,50,0)
(371,366,0)
(457,190,0)
(493,298,0)
(8,377,0)
(321,437,0)
(466,352,0)
(311,152,0)
(2,474,0)
(402,283,0)
(422,118,0)
(393,492,0)
(289,318,0)
(437,242,0)
(227,400,0)
(51,354,0)
(391,418,0)
(251,147,0)
(511,22,0)
(165,330,0)
(120,461,0)
(432,165,0)
(450,141,0)
(152,467,0)
(373,220,0)
(313,524,0)
(483,147,0)
(60,198,0)
(439,237,0)
(50,318,0)
(269,298,0)
(6,43,0)
(298,493,0)
(513,242,0)
(486,434,0)
(459,483,0)
(290,223,0)
(271,17,0)
(223,204,0)
(184,96,0)
(195,473,0)
(436,245,0)
(270,137,0)
(64,354,0)
(292,99,0)
(220,147,0)
(401,3,0)
(524,39,0)
(418,327,0)
(84,43,0)
(246,6,0)
(470,0,0)
(329,400,0)
(297,318,0)
(228,393,0)
(286,7,0)
(37,487,0)
(344,220,0)
(12,43,0)
(231,134,0)
(288,243,0)
(335,141,0)
(81,147,0)
(298,298,0)
(309,38,0)
(331,32,0)
(504,293,0)
(6,50,0)
(273,147,0)
(445,264,0)
(463,298,0)
(419,117,0)
(74,520,0)
(160,61,0)
(305,16,0)
(342,483,0)
(499,311,0)
(106,42,0)
(285,493,0)
(500,318,0)
(6,493,0)
(36,60,0)
(49,93,0)
(430,82,0)
(139,493,0)
(388,126,0)
(11,50,0)
(70,398,0)
(330,165,0)
(181,328,0)
(303,368,0)
(162,220,0)
(451,325,0)
(407,244,0)
(239,228,0)
(298,6,0)
(61,6,0)
(458,218,0)
(421,524,0)
(30,201,0)
(434,147,0)
(88,190,0)
(218,378,0)
(461,120,0)
(243,288,0)
(187,298,0)
(295,335,0)
(531,288,0)
(133,118,0)
(368,298,0)
(115,48,0)
(200,165,0)
(529,265,0)
(392,201,0)
(419,114,0)
(118,413,0)
(385,165,0)
(118,133,0)
(149,190,0)
(18,403,0)
(128,223,0)
(338,147,0)
(538,243,0)
(134,298,0)
(264,473,0)
(414,420,0)
(29,282,0)
(403,473,0)
(135,117,0)
(207,434,0)
(63,7,0)
(59,365,0)
(171,321,0)
(222,368,0)
(224,10,0)
(168,145,0)
(123,538,0)
(65,425,0)
(82,473,0)
(140,164,0)
(209,41,0)
(275,473,0)
(315,489,0)
(500,478,0)
(11,53,0)
(314,116,0)
(121,334,0)
(392,335,0)
(522,41,0)
(177,228,0)
(42,225,0)
(401,91,0)
(417,354,0)
(368,50,0)
(96,431,0)
(176,354,0)
(443,246,0)
(359,14,0)
(38,73,0)
(426,322,0)
(178,320,0)
(468,473,0)
(281,519,0)
(334,78,0)
(391,203,0)
(203,391,0)
(319,273,0)
(341,414,0)
(253,349,0)
(298,318,0)
(383,164,0)
(399,242,0)
(73,473,0)
(54,255,0)
(493,6,0)
(183,48,0)
(16,201,0)
(500,164,0)
(91,481,0)
(131,229,0)
(91,50,0)
(98,109,0)
(201,190,0)
(311,38,0)
(322,61,0)
(339,42,0)
(527,453,0)
(51,39,0)
(196,208,0)
(168,154,0)
(299,268,0)
(397,6,0)
(425,293,0)
(322,376,0)
(391,279,0)
(481,50,0)
(473,67,0)
(153,57,0)
(317,115,0)
(452,93,0)
(213,78,0)
(362,473,0)
(288,171,0)
(124,285,0)
(536,402,0)
(199,6,0)
(14,473,0)
(477,279,0)
(55,167,0)
(183,57,0)
(139,318,0)
(167,339,0)
(502,251,0)
(128,353,0)
(445,476,0)
(252,39,0)
(62,285,0)
(289,493,0)
(318,6,0)
(289,164,0)
(202,50,0)
(170,441,0)
(376,43,0)
(93,473,0)
(455,311,0)
(485,317,0)
(16,441,0)
(268,278,0)
(6,318,0)
(233,483,0)
(516,434,0)
(246,164,0)
(367,349,0)
(377,145,0)
(537,420,0)
(24,362,0)
(514,43,0)
(258,7,0)
(395,7,0)
(530,6,0)
(155,17,0)
(246,298,0)
(244,493,0)
(142,320,0)
(285,298,0)
(481,91,0)
(97,39,0)
(147,7,0)
(69,44,0)
(145,377,0)
(82,208,0)
(356,190,0)
(139,81,0)
(360,93,0)
(447,190,0)
(282,29,0)
(475,429,0)
(68,362,0)
(134,231,0)
(479,368,0)
(317,473,0)
(113,463,0)
(376,322,0)
(427,21,0)
(242,437,0)
(366,279,0)
(208,82,0)
(408,365,0)
(347,3,0)
(214,339,0)
(497,265,0)
(74,493,0)
(284,285,0)
(79,366,0)
(506,304,0)
(318,241,0)
(114,473,0)
(429,147,0)
(409,190,0)
(94,179,0)
(325,208,0)
(117,279,0)
(87,347,0)
(321,171,0)
(262,243,0)
(50,164,0)
(400,190,0)
(156,278,0)
(292,376,0)
(163,445,0)
(256,201,0)
(236,179,0)
(387,408,0)
(357,91,0)
(164,116,0)
(145,39,0)
(377,8,0)
(229,185,0)
(273,319,0)
(493,81,0)
(102,164,0)
(351,242,0)
(23,374,0)
(139,75,0)
(368,303,0)
(8,473,0)
(308,441,0)
(44,69,0)
(302,362,0)
(215,153,0)
(175,11,0)
(360,392,0)
(282,493,0)
(26,425,0)
(158,23,0)
(180,153,0)
(390,429,0)
(109,318,0)
(518,304,0)
(287,279,0)
(24,31,0)
(304,473,0)
(144,7,0)
(513,493,0)
(92,227,0)
(120,487,0)
(311,258,0)
(293,463,0)
(460,17,0)
(496,530,0)
(361,134,0)
(5,393,0)
(375,503,0)
(500,6,0)
(289,298,0)
(257,7,0)
(323,7,0)
(6,81,0)
(495,461,0)
(152,324,0)
(50,6,0)
(473,7,0)
(289,6,0)
(165,147,0)
(182,489,0)
(532,434,0)
(352,376,0)
(85,467,0)
(503,6,0)
(41,473,0)
(259,395,0)
(498,139,0)
(182,403,0)
(1,365,0)
(423,220,0)
(66,287,0)
(31,279,0)
(338,197,1)
(44,164,1)
(297,378,1)
(285,6,1)
(135,419,1)
(463,113,1)
(54,509,1)
(251,221,1)
(503,6,1)
(166,429,1)
(96,184,1)
(109,98,1)
(371,287,1)
(320,178,1)
(263,296,1)
(375,125,1)
(408,365,1)
(26,425,1)
(225,396,1)
(127,114,1)
(6,507,1)
(38,73,1)
(67,471,1)
(489,473,1)
(315,428,1)
(50,298,1)
(153,180,1)
(250,29,1)
(185,229,1)
(368,6,1)
(408,387,1)
(80,380,1)
(96,117,1)
(227,400,1)
(228,473,1)
(31,279,1)
(358,408,1)
(25,65,1)
(316,245,1)
(420,39,1)
(255,410,1)
(168,56,1)
(306,15,1)
(387,365,1)
(335,392,1)
(139,493,1)
(506,413,1)
(9,234,1)
(303,368,1)
(197,502,1)
(290,128,1)
(483,147,1)
(420,537,1)
(15,314,1)
(163,310,1)
(439,376,1)
(294,431,1)
(112,386,1)
(536,454,1)
(16,201,1)
(275,112,1)
(206,473,1)
(302,68,1)
(99,292,1)
(171,321,1)
(404,229,1)
(504,463,1)
(0,468,1)
(338,147,1)
(126,95,1)
(500,298,1)
(292,274,1)
(392,360,1)
(486,532,1)
(129,318,1)
(378,217,1)
(216,412,1)
(24,235,1)
(364,10,1)
(340,380,1)
(256,400,1)
(132,334,1)
(165,147,1)
(185,201,1)
(222,479,1)
(218,6,1)
(121,406,1)
(289,523,1)
(505,320,1)
(288,531,1)
(234,120,1)
(405,275,1)
(139,298,1)
(31,24,1)
(153,473,1)
(4,38,1)
(16,305,1)
(162,423,1)
(244,493,1)
(322,6,1)
(369,22,1)
(298,269,1)
(148,474,1)
(325,208,1)
(298,6,1)
(11,50,1)
(165,200,1)
(464,23,1)
(368,318,1)
(285,81,1)
(274,279,1)
(82,430,1)
(407,437,1)
(505,517,1)
(93,473,1)
(520,74,1)
(474,2,1)
(246,493,1)
(305,141,1)
(67,248,1)
(528,237,1)
(430,280,1)
(508,140,1)
(264,473,1)
(326,360,1)
(36,369,1)
(237,6,1)
(263,379,1)
(139,50,1)
(352,466,1)
(230,536,1)
(194,50,1)
(9,364,1)
(394,245,1)
(248,195,1)
(392,201,1)
(246,50,1)
(172,349,1)
(508,164,1)
(114,473,1)
(454,502,1)
(242,493,1)
(9,46,1)
(246,81,1)
(349,253,1)
(89,231,1)
(429,475,1)
(411,275,1)
(283,402,1)
(468,473,1)
(50,493,1)
(428,473,1)
(366,79,1)
(142,347,1)
(6,81,1)
(396,42,1)
(311,152,1)
(122,185,1)
(137,270,1)
(329,279,1)
(403,18,1)
(92,137,1)
(450,335,1)
(377,382,1)
(246,381,1)
(263,389,1)
(515,246,1)
(521,378,1)
(246,164,1)
(421,51,1)
(413,118,1)
(139,164,1)
(453,14,1)
(391,279,1)
(74,493,1)
(349,473,1)
(496,503,1)
(442,398,1)
(500,50,1)
(154,19,1)
(398,473,1)
(502,251,1)
(279,477,1)
(314,69,1)
(139,498,1)
(366,279,1)
(8,473,1)
(312,383,1)
(414,420,1)
(525,20,1)
(391,418,1)
(207,434,1)
(223,290,1)
(437,242,1)
(254,118,1)
(156,268,1)
(503,375,1)
(50,6,1)
(5,228,1)
(73,424,1)
(245,240,1)
(191,493,1)
(311,258,1)
(344,162,1)
(264,71,1)
(278,156,1)
(483,459,1)
(203,391,1)
(361,298,1)
(55,247,1)
(415,349,1)
(335,295,1)
(391,484,1)
(133,488,1)
(187,515,1)
(531,243,1)
(185,404,1)
(280,53,1)
(46,445,1)
(268,299,1)
(493,50,1)
(65,185,1)
(9,307,1)
(113,25,1)
(72,473,1)
(179,400,1)
(499,395,1)
(377,8,1)
(461,473,1)
(298,164,1)
(500,81,1)
(6,298,1)
(220,344,1)
(311,120,1)
(6,50,1)
(478,500,1)
(237,439,1)
(459,233,1)
(520,161,1)
(282,493,1)
(41,473,1)
(350,44,1)
(255,39,1)
(272,274,1)
(228,177,1)
(129,186,1)
(498,289,1)
(313,421,1)
(139,81,1)
(360,150,1)
(239,105,1)
(499,311,1)
(347,87,1)
(191,328,1)
(473,67,1)
(188,416,1)
(493,318,1)
(175,50,1)
(296,35,1)
(419,114,1)
(412,482,1)
(333,303,1)
(309,283,1)
(104,27,1)
(466,31,1)
(54,255,1)
(243,538,1)
(104,493,1)
(240,436,1)
(292,376,1)
(58,129,1)
(472,315,1)
(101,183,1)
(9,4,1)
(362,473,1)
(196,82,1)
(217,218,1)
(370,75,1)
(516,330,1)
(77,39,1)
(6,164,1)
(97,252,1)
(451,208,1)
(418,327,1)
(143,267,1)
(500,6,1)
(42,106,1)
(6,6,1)
(434,486,1)
(23,158,1)
(527,453,1)
(266,261,1)
(493,298,1)
(291,81,1)
(365,59,1)
(35,491,1)
(9,213,1)
(87,325,1)
(416,244,1)
(244,407,1)
(36,263,1)
(100,489,1)
(327,40,1)
(30,256,1)
(252,207,1)
(383,508,1)
(538,123,1)
(538,216,1)
(226,203,1)
(317,473,1)
(218,458,1)
(221,338,1)
(242,513,1)
(125,530,1)
(440,24,1)
(9,207,1)
(49,26,1)
(81,337,1)
(117,419,1)
(227,92,1)
(274,159,1)
(392,326,1)
(91,50,1)
(202,212,1)
(382,8,1)
(339,167,1)
(368,81,1)
(118,201,1)
(168,145,1)
(61,6,1)
(139,318,1)
(167,473,1)
(210,147,1)
(31,440,1)
(8,306,1)
(221,23,1)
(117,279,1)
(298,50,1)
(167,55,1)
(406,330,1)
(140,533,1)
(289,50,1)
(285,298,1)
(402,230,1)
(328,181,1)
(235,362,1)
(524,313,1)
(36,501,1)
(164,83,1)
(103,390,1)
(490,534,1)
(307,492,1)
(94,227,1)
(339,214,1)
(70,294,1)
(348,198,1)
(76,28,1)
(321,86,1)
(255,0,1)
(126,388,1)
(481,300,1)
(214,167,1)
(321,77,1)
(158,374,1)
(288,243,1)
(378,218,1)
(518,506,1)
(133,206,1)
(69,164,1)
(427,497,1)
(14,473,1)
(363,231,1)
(186,318,1)
(461,495,1)
(128,90,1)
(98,490,1)
(164,493,1)
(50,81,1)
(352,31,1)
(413,254,1)
(318,6,1)
(182,403,1)
(189,366,1)
(177,239,1)
(402,147,1)
(289,6,1)
(537,32,1)
(517,320,1)
(209,522,1)
(498,263,1)
(145,377,1)
(287,66,1)
(419,127,1)
(56,145,1)
(13,462,1)
(105,152,1)
(298,298,1)
(32,331,1)
(489,182,1)
(353,442,1)
(100,428,1)
(523,75,1)
(263,189,1)
(134,298,1)
(220,147,1)
(433,16,1)
(269,187,1)
(77,358,1)
(310,483,1)
(493,6,1)
(444,333,1)
(65,122,1)
(393,228,1)
(423,319,1)
(285,62,1)
(0,470,1)
(467,85,1)
(399,513,1)
(22,201,1)
(42,339,1)
(336,154,1)
(204,173,1)
(69,44,1)
(293,298,1)
(229,304,1)
(60,36,1)
(500,47,1)
(271,515,1)
(19,168,1)
(372,474,1)
(493,444,1)
(141,450,1)
(61,160,1)
(161,74,1)
(213,13,1)
(295,392,1)
(289,298,1)
(436,166,1)
(400,169,1)
(388,72,1)
(57,153,1)
(368,493,1)
(130,179,1)
(265,529,1)
(6,318,1)
(160,426,1)
(24,362,1)
(44,266,1)
(496,6,1)
(368,164,1)
(493,164,1)
(321,437,1)
(397,456,1)
(510,394,1)
(79,371,1)
(357,481,1)
(311,115,1)
(395,259,1)
(59,1,1)
(62,124,1)
(203,136,1)
(346,327,1)
(322,45,1)
(114,110,1)
(109,318,1)
(9,146,1)
(385,166,1)
(452,49,1)
(285,493,1)
(395,111,1)
(208,82,1)
(334,121,1)
(200,432,1)
(117,135,1)
(292,272,1)
(27,416,1)
(147,126,1)
(90,353,1)
(445,264,1)
(426,352,1)
(533,312,1)
(429,147,1)
(374,473,1)
(146,115,1)
(294,99,1)
(249,366,1)
(128,353,1)
(477,108,1)
(2,226,1)
(289,81,1)
(298,493,1)
(418,346,1)
(1,288,1)
(458,528,1)
(393,5,1)
(278,268,1)
(289,318,1)
(268,400,1)
(215,10,1)
(353,398,1)
(243,39,1)
(277,298,1)
(140,164,1)
(351,54,1)
(389,22,1)
(184,117,1)
(233,342,1)
(482,520,1)
(299,505,1)
(492,393,1)
(373,220,1)
(175,194,1)
(173,223,1)
(73,473,1)
(93,452,1)
(386,319,1)
(479,370,1)
(431,109,1)
(287,279,1)
(42,400,1)
(331,41,1)
(491,527,1)
(77,408,1)
(410,0,1)
(9,415,1)
(285,318,1)
(376,322,1)
(82,473,1)
(15,171,1)
(199,478,1)
(91,357,1)
(50,164,1)
(50,318,1)
(242,399,1)
(245,473,1)
(468,449,1)
(341,420,1)
(397,6,1)
(300,192,1)
(449,250,1)
(36,345,1)
(231,134,1)
(138,377,1)
(522,312,1)
(325,400,1)
(74,188,1)
(485,101,1)
(434,147,1)
(253,367,1)
(32,41,1)
(181,29,1)
(6,493,1)
(267,258,1)
(68,125,1)
(192,278,1)
(246,298,1)
(327,473,1)
(500,318,1)
(425,293,1)
(383,164,1)
(86,77,1)
(183,57,1)
(285,50,1)
(285,164,1)
(261,414,1)
(500,493,1)
(381,443,1)
(384,310,1)
(263,130,1)
(495,411,1)
(293,504,1)
(276,373,1)
(259,9,1)
(23,374,1)
(474,473,1)
(282,191,1)
(40,521,1)
(3,401,1)
(343,297,1)
(361,277,1)
(159,148,1)
(319,273,1)
(379,524,1)
(51,336,1)
(293,463,1)
(66,204,1)
(178,142,1)
(367,201,1)
(212,28,1)
(134,361,1)
(325,451,1)
(246,6,1)
(223,128,1)
(53,11,1)
(10,473,1)
(180,215,1)
(535,98,1)
(169,329,1)
(251,147,1)
(462,100,1)
(298,318,1)
(500,164,1)
(186,340,1)
(365,473,1)
(179,236,1)
(304,473,1)
(98,318,1)
(481,50,1)
(14,359,1)
(91,481,1)
(304,518,1)
(29,282,1)
(243,262,1)
(22,511,1)
(194,219,1)
(424,309,1)
(347,325,1)
(534,96,1)
(9,316,1)
(374,143,1)
(368,298,1)
(311,38,1)
(401,91,1)
(131,304,1)
(428,132,1)
(71,163,1)
(509,255,1)
(83,102,1)
(362,302,1)
(298,81,1)
(432,385,1)
(469,303,1)
(232,469,1)
(359,291,1)
(58,318,1)
(488,206,1)
(123,216,1)
(330,165,1)
(28,285,1)
(11,175,1)
(118,422,1)
(380,58,1)
(236,94,1)
(36,271,1)
(273,525,1)
(152,467,1)
(368,222,1)
(69,350,1)
(198,60,1)
(150,93,1)
(45,61,1)
(360,93,1)
(128,279,1)
(109,535,1)
(9,405,1)
(9,427,1)
(455,9,1)
(20,384,1)
(529,473,1)
(513,435,1)
(50,50,1)
(439,397,1)
(501,524,1)
(18,472,1)
(225,42,1)
(124,284,1)
(530,6,1)
(258,448,1)
(50,202,1)
(145,138,1)
(219,53,1)
(201,30,1)
(475,103,1)
(289,164,1)
(208,196,1)
(51,39,1)
(398,70,1)
(435,351,1)
(36,249,1)
(139,6,1)
(115,317,1)
(320,473,1)
(47,232,1)
(529,510,1)
(345,179,1)
(289,493,1)
(262,538,1)
(463,298,1)
(530,496,1)
(456,528,1)
(145,39,1)
(484,418,1)
(532,516,1)
(342,283,1)
(390,373,1)
(513,493,1)
(229,131,1)
(414,341,1)
(422,133,1)
(81,147,1)
(110,80,1)
(102,520,1)
(311,445,1)
(41,209,1)
(10,224,1)
(126,512,1)
(511,433,1)
(470,468,1)
(275,473,1)
(9,348,1)
(39,97,1)
(284,478,1)
(246,318,1)
(120,461,1)
(247,3,1)
(448,210,1)
(407,104,1)
(268,505,1)
(322,61,1)
(118,133,1)
(277,363,1)
(368,50,1)
(328,493,1)
(216,473,1)
(507,199,1)
(497,265,1)
(480,89,1)
(524,39,1)
(420,32,1)
(317,485,1)
(493,81,1)
(337,172,1)
(108,39,1)
(106,339,1)
(274,148,1)
(273,147,1)
(311,455,1)
(136,391,1)
(270,225,1)
(206,480,1)
(148,372,1)
(75,139,1)
(224,276,1)
(493,493,1)
(403,473,1)
(85,464,1)
(443,76,1)
(318,343,1)
(442,478,2)
(207,330,2)
(227,400,2)
(528,478,2)
(24,478,2)
(528,528,2)
(362,478,2)
(2,378,2)
(219,53,2)
(528,237,2)
(6,81,2)
(350,520,2)
(162,319,2)
(231,515,2)
(348,349,2)
(513,303,2)
(97,207,2)
(274,279,2)
(419,114,2)
(50,50,2)
(453,14,2)
(364,10,2)
(36,349,2)
(22,515,2)
(321,77,2)
(223,128,2)
(224,373,2)
(202,28,2)
(22,201,2)
(11,53,2)
(251,147,2)
(201,207,2)
(368,81,2)
(325,400,2)
(101,10,2)
(0,468,2)
(29,282,2)
(461,275,2)
(207,434,2)
(516,330,2)
(139,298,2)
(520,74,2)
(368,493,2)
(439,478,2)
(243,520,2)
(505,320,2)
(535,378,2)
(497,265,2)
(239,23,2)
(382,303,2)
(108,207,2)
(50,28,2)
(252,207,2)
(183,57,2)
(5,23,2)
(515,246,2)
(381,28,2)
(31,24,2)
(365,473,2)
(128,279,2)
(246,493,2)
(236,28,2)
(129,380,2)
(274,148,2)
(374,473,2)
(298,164,2)
(434,330,2)
(146,10,2)
(50,164,2)
(75,75,2)
(463,515,2)
(188,303,2)
(363,231,2)
(310,283,2)
(167,28,2)
(156,28,2)
(373,220,2)
(208,28,2)
(243,538,2)
(529,473,2)
(358,520,2)
(60,349,2)
(435,303,2)
(208,82,2)
(268,400,2)
(367,207,2)
(123,520,2)
(244,303,2)
(335,392,2)
(418,327,2)
(273,147,2)
(133,515,2)
(300,28,2)
(537,520,2)
(192,28,2)
(304,473,2)
(326,515,2)
(379,524,2)
(114,378,2)
(8,473,2)
(327,378,2)
(433,515,2)
(117,279,2)
(109,98,2)
(500,298,2)
(139,318,2)
(282,493,2)
(27,416,2)
(493,303,2)
(134,515,2)
(338,502,2)
(444,303,2)
(14,349,2)
(492,393,2)
(449,303,2)
(216,473,2)
(317,473,2)
(177,23,2)
(391,418,2)
(96,117,2)
(181,29,2)
(459,283,2)
(222,263,2)
(15,303,2)
(285,81,2)
(306,303,2)
(26,425,2)
(288,520,2)
(59,520,2)
(229,515,2)
(100,330,2)
(502,23,2)
(478,500,2)
(373,319,2)
(398,473,2)
(69,520,2)
(66,478,2)
(495,275,2)
(246,81,2)
(283,23,2)
(138,303,2)
(221,23,2)
(533,312,2)
(154,303,2)
(148,378,2)
(255,303,2)
(39,207,2)
(490,378,2)
(453,349,2)
(445,310,2)
(530,6,2)
(263,366,2)
(311,152,2)
(372,378,2)
(357,28,2)
(49,515,2)
(186,318,2)
(14,473,2)
(351,303,2)
(42,28,2)
(311,120,2)
(422,515,2)
(349,207,2)
(77,520,2)
(407,303,2)
(142,28,2)
(493,298,2)
(365,520,2)
(466,478,2)
(16,201,2)
(473,67,2)
(349,473,2)
(500,318,2)
(334,121,2)
(220,319,2)
(418,378,2)
(500,164,2)
(227,28,2)
(61,478,2)
(57,10,2)
(298,81,2)
(427,245,2)
(89,515,2)
(140,164,2)
(221,502,2)
(285,478,2)
(118,515,2)
(488,515,2)
(283,402,2)
(46,310,2)
(285,50,2)
(298,50,2)
(209,520,2)
(65,515,2)
(264,310,2)
(255,0,2)
(172,349,2)
(532,330,2)
(98,378,2)
(292,376,2)
(458,478,2)
(180,10,2)
(330,165,2)
(185,515,2)
(420,520,2)
(416,244,2)
(450,515,2)
(298,6,2)
(398,478,2)
(406,330,2)
(289,75,2)
(530,125,2)
(321,520,2)
(58,318,2)
(315,428,2)
(455,9,2)
(85,23,2)
(529,245,2)
(414,520,2)
(289,81,2)
(161,303,2)
(237,478,2)
(134,298,2)
(53,28,2)
(368,318,2)
(513,493,2)
(335,515,2)
(139,6,2)
(57,153,2)
(500,303,2)
(523,75,2)
(268,28,2)
(319,310,2)
(139,164,2)
(352,478,2)
(437,303,2)
(153,473,2)
(118,133,2)
(486,330,2)
(6,493,2)
(246,28,2)
(91,481,2)
(233,283,2)
(325,208,2)
(139,493,2)
(61,6,2)
(322,478,2)
(204,478,2)
(432,166,2)
(502,502,2)
(254,515,2)
(74,493,2)
(53,53,2)
(320,28,2)
(305,515,2)
(314,69,2)
(56,303,2)
(425,293,2)
(166,373,2)
(213,330,2)
(515,28,2)
(41,520,2)
(229,304,2)
(69,164,2)
(3,28,2)
(343,378,2)
(75,139,2)
(99,378,2)
(103,373,2)
(424,283,2)
(16,515,2)
(426,478,2)
(359,349,2)
(518,515,2)
(32,520,2)
(320,473,2)
(499,395,2)
(11,50,2)
(297,378,2)
(30,207,2)
(509,303,2)
(232,303,2)
(118,201,2)
(498,263,2)
(91,28,2)
(87,28,2)
(73,473,2)
(347,325,2)
(75,263,2)
(330,166,2)
(26,515,2)
(310,483,2)
(226,378,2)
(109,378,2)
(333,303,2)
(50,81,2)
(416,303,2)
(237,6,2)
(505,28,2)
(404,515,2)
(44,520,2)
(217,478,2)
(79,478,2)
(131,515,2)
(58,380,2)
(337,349,2)
(428,330,2)
(23,374,2)
(483,147,2)
(311,445,2)
(384,310,2)
(383,312,2)
(452,515,2)
(198,60,2)
(421,303,2)
(259,9,2)
(431,109,2)
(82,473,2)
(296,35,2)
(231,134,2)
(520,303,2)
(228,23,2)
(386,319,2)
(130,179,2)
(200,166,2)
(397,528,2)
(420,32,2)
(148,474,2)
(391,378,2)
(276,373,2)
(175,28,2)
(182,403,2)
(312,312,2)
(318,6,2)
(331,520,2)
(94,28,2)
(90,478,2)
(293,298,2)
(167,473,2)
(394,245,2)
(368,50,2)
(19,303,2)
(481,50,2)
(250,303,2)
(206,473,2)
(225,42,2)
(534,378,2)
(282,303,2)
(524,39,2)
(115,10,2)
(253,207,2)
(464,23,2)
(317,10,2)
(269,515,2)
(137,28,2)
(96,378,2)
(139,50,2)
(431,378,2)
(480,515,2)
(199,478,2)
(242,493,2)
(298,298,2)
(411,275,2)
(145,39,2)
(164,520,2)
(50,318,2)
(399,303,2)
(492,23,2)
(178,28,2)
(245,166,2)
(413,118,2)
(194,50,2)
(166,429,2)
(285,493,2)
(152,467,2)
(475,373,2)
(139,263,2)
(469,303,2)
(500,81,2)
(408,365,2)
(292,378,2)
(285,6,2)
(362,473,2)
(235,478,2)
(164,493,2)
(521,378,2)
(246,6,2)
(263,349,2)
(45,478,2)
(246,318,2)
(416,416,2)
(288,243,2)
(468,473,2)
(262,520,2)
(527,453,2)
(187,515,2)
(497,245,2)
(353,478,2)
(121,330,2)
(115,317,2)
(392,201,2)
(420,39,2)
(393,23,2)
(11,28,2)
(325,28,2)
(145,377,2)
(117,419,2)
(244,416,2)
(50,298,2)
(77,408,2)
(179,400,2)
(285,298,2)
(24,362,2)
(126,512,2)
(251,502,2)
(400,207,2)
(159,378,2)
(303,263,2)
(321,437,2)
(272,378,2)
(256,207,2)
(249,366,2)
(29,29,2)
(10,473,2)
(391,279,2)
(76,28,2)
(35,349,2)
(251,23,2)
(289,50,2)
(81,349,2)
(44,164,2)
(436,166,2)
(493,493,2)
(242,303,2)
(339,28,2)
(279,207,2)
(231,231,2)
(6,298,2)
(304,515,2)
(527,349,2)
(165,166,2)
(369,22,2)
(489,473,2)
(478,303,2)
(38,73,2)
(125,478,2)
(293,515,2)
(292,274,2)
(31,478,2)
(117,378,2)
(120,275,2)
(3,401,2)
(280,28,2)
(440,478,2)
(134,231,2)
(334,330,2)
(311,115,2)
(434,147,2)
(368,263,2)
(419,378,2)
(338,147,2)
(139,81,2)
(390,373,2)
(237,528,2)
(20,310,2)
(189,366,2)
(73,283,2)
(242,513,2)
(508,312,2)
(525,310,2)
(389,22,2)
(268,505,2)
(196,28,2)
(147,126,2)
(397,6,2)
(263,22,2)
(318,378,2)
(40,378,2)
(212,28,2)
(500,493,2)
(361,231,2)
(124,478,2)
(395,111,2)
(309,283,2)
(135,378,2)
(375,125,2)
(203,391,2)
(496,478,2)
(428,473,2)
(263,179,2)
(402,147,2)
(68,478,2)
(383,164,2)
(246,298,2)
(153,10,2)
(80,378,2)
(467,23,2)
(128,353,2)
(228,473,2)
(247,28,2)
(29,303,2)
(507,478,2)
(329,207,2)
(215,10,2)
(1,520,2)
(169,207,2)
(383,520,2)
(83,520,2)
(368,164,2)
(287,478,2)
(127,378,2)
(246,164,2)
(340,380,2)
(303,368,2)
(294,478,2)
(377,303,2)
(366,478,2)
(55,28,2)
(50,6,2)
(298,318,2)
(163,310,2)
(493,50,2)
(353,398,2)
(538,520,2)
(285,318,2)
(289,298,2)
(408,520,2)
(150,515,2)
(298,515,2)
(218,6,2)
(266,520,2)
(168,303,2)
(104,493,2)
(493,164,2)
(395,9,2)
(370,263,2)
(58,378,2)
(500,50,2)
(128,478,2)
(493,81,2)
(129,378,2)
(380,58,2)
(54,255,2)
(42,339,2)
(112,319,2)
(255,39,2)
(368,298,2)
(171,321,2)
(405,275,2)
(234,275,2)
(347,28,2)
(126,95,2)
(502,251,2)
(489,428,2)
(501,524,2)
(313,303,2)
(311,9,2)
(429,373,2)
(346,378,2)
(368,6,2)
(41,473,2)
(298,493,2)
(230,23,2)
(261,520,2)
(263,524,2)
(132,330,2)
(463,298,2)
(223,478,2)
(191,29,2)
(206,515,2)
(316,245,2)
(410,303,2)
(114,473,2)
(437,242,2)
(289,493,2)
(51,303,2)
(439,528,2)
(225,28,2)
(536,23,2)
(265,529,2)
(311,38,2)
(360,515,2)
(106,28,2)
(6,318,2)
(273,310,2)
(483,283,2)
(91,50,2)
(141,515,2)
(413,515,2)
(498,75,2)
(183,10,2)
(291,349,2)
(70,478,2)
(538,216,2)
(296,349,2)
(472,428,2)
(50,493,2)
(6,50,2)
(412,520,2)
(402,23,2)
(387,520,2)
(25,515,2)
(244,493,2)
(13,462,2)
(462,330,2)
(275,319,2)
(493,318,2)
(508,520,2)
(168,145,2)
(152,23,2)
(415,349,2)
(240,166,2)
(481,28,2)
(380,378,2)
(506,515,2)
(403,473,2)
(342,283,2)
(18,428,2)
(6,6,2)
(120,461,2)
(113,515,2)
(125,530,2)
(285,164,2)
(454,23,2)
(277,231,2)
(92,28,2)
(429,147,2)
(290,478,2)
(496,125,2)
(474,473,2)
(500,6,2)
(214,28,2)
(194,53,2)
(81,147,2)
(139,75,2)
(531,520,2)
(401,28,2)
(341,520,2)
(278,28,2)
(8,303,2)
(289,6,2)
(28,285,2)
(165,147,2)
(243,39,2)
(4,283,2)
(503,6,2)
(524,303,2)
(377,8,2)
(271,515,2)
(327,473,2)
(403,428,2)
(54,303,2)
(105,23,2)
(295,515,2)
(445,264,2)
(366,279,2)
(110,378,2)
(6,478,2)
(414,420,2)
(504,515,2)
(191,303,2)
(336,303,2)
(461,473,2)
(173,478,2)
(122,515,2)
(42,400,2)
(284,478,2)
(314,520,2)
(289,318,2)
(510,245,2)
(71,310,2)
(392,360,2)
(171,520,2)
(385,166,2)
(302,478,2)
(407,416,2)
(378,218,2)
(86,520,2)
(0,303,2)
(479,263,2)
(322,61,2)
(311,258,2)
(423,319,2)
(503,125,2)
(133,206,2)
(98,318,2)
(82,28,2)
(216,520,2)
(396,28,2)
(289,164,2)
(197,502,2)
(322,6,2)
(31,279,2)
(274,378,2)
(185,201,2)
(179,28,2)
(104,416,2)
(275,473,2)
(136,378,2)
(517,28,2)
(77,39,2)
(376,478,2)
(360,93,2)
(32,41,2)
(38,283,2)
(376,322,2)
(491,349,2)
(425,515,2)
(380,380,2)
(282,29,2)
(499,311,2)
(125,125,2)
(451,28,2)
(51,39,2)
(287,279,2)
(203,378,2)
(344,319,2)
(371,478,2)
(53,11,2)
(102,520,2)
(328,493,2)
(218,478,2)
(530,478,2)
(485,10,2)
(264,473,2)
(69,44,2)
(160,478,2)
(10,373,2)
(265,245,2)
(246,50,2)
(312,520,2)
(482,520,2)
(99,292,2)
(74,303,2)
(312,383,2)
(182,428,2)
(484,378,2)
(474,378,2)
(140,312,2)
(468,303,2)
(6,164,2)
(186,380,2)
(477,207,2)
(430,28,2)
(65,185,2)
(352,31,2)
(511,515,2)
(293,463,2)
(220,147,2)
(339,167,2)
(28,478,2)
(278,268,2)
(67,471,2)
(93,515,2)
(392,515,2)
(62,478,2)
(319,273,2)
(47,303,2)
(378,478,2)
(443,28,2)
(175,53,2)
(270,28,2)
(109,318,2)
(93,473,2)
(245,473,2)
(13,330,2)
(470,303,2)
(393,228,2)
(299,28,2)
(307,23,2)
(522,520,2)
(145,303,2)
(328,29,2)
(198,349,2)
(345,179,2)
(456,528,2)
(489,182,2)
(277,298,2)
(184,378,2)
(361,515,2)
(401,91,2)
(493,6,2)
(185,229,2)
-----------------------------------
(0,dev->res.port_resource)
(1,dev)
(2,res)
(3,dev->res.irq_resource[nirq].start =\n\\n\\t\\t\\t\\tdev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0)
(4,goto done;)
(5,bus_id)
(6,buf += 3)
(7,)
(8,dev->res)
(9,retval)
(10,dev->active)
(11,*buf)
(12,if (nmem >= PNP_MAX_MEM)
(13,up(&pnp_res_mutex)
(14,dev->res)
(15,dev)
(16,ndma++)
(17,)
(18,res)
(19,IORESOURCE_IO)
(20,"fill")
(21,)
(22,ndma >= PNP_MAX_DMA)
(23,dev->status & PNP_ATTACHED)
(24,dev->res.mem_resource)
(25,buf)
(26,dev->res.dma_resource[ndma].start =\n\\n\\t\\t\\t\\tdev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0)
(27,buf)
(28,!strnicmp(buf,"irq",3)
(29,isspace(*buf)
(30,0)
(31,dev->res.mem_resource[nmem])
(32,dev->res.port_resource)
(33,while (isspace(*buf)
(34,if (dev->active)
(35,&pnp_res_mutex)
(36,pnp_res_mutex)
(37,if (dev->active)
(38,retval = pnp_disable_dev(dev)
(39,nport = 0)
(40,res)
(41,dev->res)
(42,dev->res.irq_resource[nirq])
(43,)
(44,&buf)
(45,0)
(46,goto done;)
(47,3)
(48,)
(49,dev)
(50,buf += 3)
(51,nport++)
(52,while (isspace(*buf)
(53,isspace(*buf)
(54,dev->res.port_resource[nport].start)
(55,res)
(56,flags)
(57,&dev->res)
(58,*buf)
(59,res)
(60,&pnp_res_mutex)
(61,&buf)
(62,3)
(63,if (!strnicmp(buf,"activate",8)
(64,while (isspace(*buf)
(65,dev->res.dma_resource[ndma].end)
(66,nmem)
(67,to_pnp_dev(dmdev)
(68,dev)
(69,simple_strtoul(buf,&buf,0)
(70,res)
(71,dev)
(72,buf)
(73,pnp_disable_dev(dev)
(74,*buf)
(75,isspace(*buf)
(76,buf)
(77,dev->res.port_resource[nport])
(78,)
(79,PNP_MAX_MEM)
(80,dev)
(81,buf += 3)
(82,dev->res)
(83,1)
(84,while (isspace(*buf)
(85,EBUSY)
(86,start)
(87,start)
(88,ndma)
(89,dev)
(90,nmem)
(91,simple_strtoul(buf,&buf,0)
(92,nirq)
(93,dev->res)
(94,nirq)
(95,const char * ubuf)
(96,dev->res.mem_resource[nmem].end)
(97,0)
(98,&buf)
(99,dev->res.mem_resource[nmem].end = dev->res.mem_resource[nmem].start)
(100,pnp_res_mutex)
(101,retval)
(102,buf)
(103,"clear")
(104,++buf)
(105,"Device %s cannot be configured because it is in use.")
(106,nirq)
(107,if (!strnicmp(buf,"mem",3)
(108,nmem)
(109,simple_strtoul(buf,&buf,0)
(110,res)
(111,size_t count)
(112,active)
(113,buf)
(114,dev->res)
(115,retval = pnp_auto_config_dev(dev)
(116,)
(117,dev->res.mem_resource[nmem])
(118,dev->res.dma_resource[ndma])
(119,while (isspace(*buf)
(120,retval = pnp_auto_config_dev(dev)
(121,&pnp_res_mutex)
(122,end)
(123,port_resource)
(124,"irq")
(125,isspace(*buf)
(126,(void *)
(127,mem_resource)
(128,dev->res.mem_resource[nmem])
(129,buf)
(130,continue;)
(131,dma_resource)
(132,dev)
(133,dev->res.dma_resource)
(134,*buf)
(135,nmem)
(136,end)
(137,dev->res.irq_resource[nirq].flags = IORESOURCE_IRQ)
(138,nport)
(139,*buf)
(140,++buf)
(141,dev->res.dma_resource[ndma].flags = IORESOURCE_DMA)
(142,dev)
(143,status)
(144,if (!strnicmp(buf,"clear",5)
(145,dev->res.port_resource[nport])
(146,goto done;)
(147,*buf = (void *)
(148,dev->res.mem_resource)
(149,nport)
(150,dma_resource)
(151,)
(152,retval = -EBUSY)
(153,dev->res)
(154,dev->res.port_resource[nport].flags = IORESOURCE_IO)
(155,if (!strnicmp(buf,"io",2)
(156,end)
(157,if (!strnicmp(buf,"auto",4)
(158,PNP_ATTACHED)
(159,nmem)
(160,buf)
(161,\'-\')
(162,"auto")
(163,retval)
(164,buf += 1)
(165,strnicmp(buf,"get",3)
(166,!strnicmp(buf,"clear",5)
(167,dev->res)
(168,dev->res.port_resource[nport].flags)
(169,0)
(170,while (isspace(*buf)
(171,dev->res.port_resource[nport].end = dev->res.port_resource[nport].start)
(172,buf)
(173,IORESOURCE_MEM)
(174,while (isspace(*buf)
(175,buf)
(176,while (isspace(*buf)
(177,dev)
(178,res)
(179,nirq >= PNP_MAX_IRQ)
(180,res)
(181,buf)
(182,&dev->res)
(183,pnp_init_resource_table(&dev->res)
(184,end)
(185,dev->res.dma_resource[ndma])
(186,++buf)
(187,buf)
(188,buf)
(189,continue;)
(190,)
(191,buf)
(192,buf)
(193,done:)
(194,++buf)
(195,dev)
(196,irq_resource)
(197,buf)
(198,up(&pnp_res_mutex)
(199,buf)
(200,3)
(201,ndma = 0)
(202,3)
(203,dev->res.mem_resource[nmem].end)
(204,dev->res.mem_resource[nmem].flags = IORESOURCE_MEM)
(205,if (!strnicmp(buf,"disable",7)
(206,dev->res)
(207,!strnicmp(buf,"set",3)
(208,dev->res.irq_resource)
(209,res)
(210,retval)
(211,if (pnp_can_read(dev)
(212,buf)
(213,goto done;)
(214,irq_resource)
(215,dev)
(216,dev->res)
(217,\'-\')
(218,*buf)
(219,buf)
(220,strnicmp(buf,"auto",4)
(221,buf)
(222,2)
(223,dev->res.mem_resource[nmem].flags)
(224,active)
(225,dev->res.irq_resource[nirq].flags)
(226,dev)
(227,nirq++)
(228,dev->dev)
(229,dev->res.dma_resource)
(230,7)
(231,isspace(*buf)
(232,"mem")
(233,"activate")
(234,goto done;)
(235,mem_resource)
(236,PNP_MAX_IRQ)
(237,*buf)
(238,if (!strnicmp(buf,"set",3)
(239,dev)
(240,active)
(241,)
(242,simple_strtoul(buf,&buf,0)
(243,dev->res.port_resource[nport])
(244,*buf)
(245,dev->active)
(246,strnicmp(buf,"dma",3)
(247,dev)
(248,dmdev)
(249,break;)
(250,dev)
(251,*buf)
(252,nport)
(253,active)
(254,start)
(255,dev->res.port_resource[nport])
(256,ndma)
(257,dev)
(258,retval = 0)
(259,count)
(260,if (dev->active)
(261,buf)
(262,nport)
(263,1)
(264,pnp_activate_dev(dev)
(265,&dev->res)
(266,buf)
(267,dev)
(268,dev->res.irq_resource[nirq])
(269,3)
(270,IORESOURCE_IRQ)
(271,break;)
(272,start)
(273,strnicmp(buf,"fill",4)
(274,dev->res.mem_resource[nmem])
(275,dev->active)
(276,dev)
(277,++buf)
(278,dev->res.irq_resource[nirq].end)
(279,nmem = 0)
(280,dev)
(281,if (nirq >= PNP_MAX_IRQ)
(282,*buf)
(283,!strnicmp(buf,"disable",7)
(284,buf)
(285,strnicmp(buf,"irq",3)
(286,retval)
(287,nmem++)
(288,dev->res.port_resource[nport].end)
(289,++buf)
(290,flags)
(291,dev)
(292,dev->res.mem_resource[nmem].start)
(293,simple_strtoul(buf,&buf,0)
(294,dev)
(295,flags)
(296,down(&pnp_res_mutex)
(297,buf)
(298,buf += 3)
(299,nirq)
(300,buf)
(301,if (dev->status & PNP_ATTACHED)
(302,res)
(303,!strnicmp(buf,"io",2)
(304,dev->res)
(305,ndma)
(306,res)
(307,goto done;)
(308,if (ndma >= PNP_MAX_DMA)
(309,retval)
(310,!strnicmp(buf,"activate",8)
(311,return retval;)
(312,isspace(*buf)
(313,PNP_MAX_PORT)
(314,dev->res.port_resource[nport].end = simple_strtoul(buf,&buf,0)
(315,dev)
(316,goto done;)
(317,pnp_auto_config_dev(dev)
(318,buf += 1)
(319,!strnicmp(buf,"fill",4)
(320,dev->res)
(321,dev->res.port_resource[nport].start)
(322,simple_strtoul(buf,&buf,0)
(323,if (!strnicmp(buf,"fill",4)
(324,)
(325,dev->res.irq_resource[nirq])
(326,ndma)
(327,dev->res)
(328,++buf)
(329,nirq)
(330,!strnicmp(buf,"get",3)
(331,port_resource)
(332,if(*buf == \'-\')
(333,buf)
(334,down(&pnp_res_mutex)
(335,dev->res.dma_resource[ndma].flags)
(336,nport)
(337,3)
(338,++buf)
(339,dev->res.irq_resource)
(340,buf)
(341,end)
(342,buf)
(343,1)
(344,4)
(345,break;)
(346,mem_resource)
(347,dev->res.irq_resource[nirq].start)
(348,goto done;)
(349,dev->active)
(350,0)
(351,buf)
(352,dev->res.mem_resource[nmem].start)
(353,dev->res.mem_resource)
(354,)
(355,if (!strnicmp(buf,"get",3)
(356,if (dev->active)
(357,0)
(358,nport)
(359,res)
(360,dev->res.dma_resource)
(361,buf)
(362,dev->res)
(363,buf)
(364,goto done;)
(365,dev->res)
(366,nmem >= PNP_MAX_MEM)
(367,dev)
(368,strnicmp(buf,"io",2)
(369,break;)
(370,buf)
(371,nmem)
(372,mem_resource)
(373,!strnicmp(buf,"auto",4)
(374,dev->status)
(375,buf)
(376,dev->res.mem_resource[nmem].start = simple_strtoul(buf,&buf,0)
(377,dev->res.port_resource)
(378,*buf == \'-\')
(379,continue;)
(380,isspace(*buf)
(381,3)
(382,port_resource)
(383,*buf)
(384,buf)
(385,buf)
(386,dev)
(387,port_resource)
(388,ubuf)
(389,continue;)
(390,buf)
(391,dev->res.mem_resource[nmem])
(392,dev->res.dma_resource[ndma])
(393,dev->dev.bus_id)
(394,dev)
(395,return count;)
(396,flags)
(397,++buf)
(398,dev->res)
(399,0)
(400,nirq = 0)
(401,dev->res.irq_resource[nirq].end = simple_strtoul(buf,&buf,0)
(402,strnicmp(buf,"disable",7)
(403,dev->res)
(404,ndma)
(405,goto done;)
(406,pnp_res_mutex)
(407,buf)
(408,dev->res.port_resource)
(409,nmem)
(410,nport)
(411,retval)
(412,res)
(413,dev->res.dma_resource[ndma].start)
(414,dev->res.port_resource[nport].end)
(415,goto done;)
(416,isspace(*buf)
(417,if (nport >= PNP_MAX_PORT)
(418,dev->res.mem_resource)
(419,dev->res.mem_resource)
(420,dev->res.port_resource[nport])
(421,nport)
(422,ndma)
(423,buf)
(424,dev)
(425,dev->res.dma_resource[ndma].end = simple_strtoul(buf,&buf,0)
(426,buf)
(427,goto done;)
(428,pnp_can_read(dev)
(429,strnicmp(buf,"clear",5)
(430,res)
(431,dev->res.mem_resource[nmem].end = simple_strtoul(buf,&buf,0)
(432,"get")
(433,ndma)
(434,strnicmp(buf,"set",3)
(435,buf)
(436,dev)
(437,dev->res.port_resource[nport].start = simple_strtoul(buf,&buf,0)
(438,if (retval)
(439,buf)
(440,nmem)
(441,)
(442,mem_resource)
(443,"dma")
(444,2)
(445,retval = pnp_activate_dev(dev)
(446,if(*buf == \'-\')
(447,nirq)
(448,0)
(449,res)
(450,IORESOURCE_DMA)
(451,nirq)
(452,res)
(453,&dev->res)
(454,buf)
(455,retval)
(456,buf)
(457,while (1)
(458,buf)
(459,8)
(460,if (!strnicmp(buf,"dma",3)
(461,pnp_auto_config_dev(dev)
(462,&pnp_res_mutex)
(463,&buf)
(464,retval)
(465,while (isspace(*buf)
(466,start)
(467,-EBUSY)
(468,dev->res)
(469,buf)
(470,port_resource)
(471,struct device * dmdev)
(472,dev)
(473,*dev = to_pnp_dev(dmdev)
(474,dev->res)
(475,5)
(476,)
(477,0)
(478,!strnicmp(buf,"mem",3)
(479,"io")
(480,res)
(481,&buf)
(482,dev)
(483,strnicmp(buf,"activate",8)
(484,nmem)
(485,dev)
(486,3)
(487,)
(488,dma_resource)
(489,dev->protocol->get(dev, &dev->res)
(490,buf)
(491,pnp_res_mutex)
(492,pnp_info("Device %s cannot be configured because it is in use.", dev->dev.bus_id)
(493,buf += 2)
(494,buf)
(495,dev)
(496,buf)
(497,pnp_init_resource_table(&dev->res)
(498,buf)
(499,RET)
(500,strnicmp(buf,"mem",3)
(501,break;)
(502,isspace(*buf)
(503,++buf)
(504,0)
(505,dev->res.irq_resource)
(506,dev)
(507,3)
(508,buf)
(509,start)
(510,res)
(511,PNP_MAX_DMA)
(512,void *)
(513,&buf)
(514,while (isspace(*buf)
(515,!strnicmp(buf,"dma",3)
(516,buf)
(517,irq_resource)
(518,res)
(519,)
(520,*buf == \'-\')
(521,dev)
(522,dev)
(523,buf)
(524,nport >= PNP_MAX_PORT)
(525,4)
(526,if (!strnicmp(buf,"irq",3)
(527,pnp_init_resource_table(&dev->res)
(528,isspace(*buf)
(529,dev->res)
(530,*buf)
(531,end)
(532,"set")
(533,buf)
(534,buf)
(535,0)
(536,"disable")
(537,nport)
(538,dev->res.port_resource)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^