-----label-----
0
-----code-----
int * CWE401_Memory_Leak__int_calloc_61b_goodB2GSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
57,58
58,59
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,46,47,48,52,55,56,59
-----computeFrom-----
13,14
13,15
30,31
30,32
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int * CWE401_Memory_Leak__int_calloc_61b_goodB2GSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
int
* CWE401_Memory_Leak__int_calloc_61b_goodB2GSource(int * data)
*
CWE401_Memory_Leak__int_calloc_61b_goodB2GSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(9,25,0)
(21,3,0)
(17,24,0)
(12,28,0)
(7,22,0)
(19,8,0)
(25,20,0)
(8,18,0)
(8,25,0)
(4,30,0)
(30,18,0)
(5,30,0)
(17,10,0)
(7,18,0)
(0,24,0)
(29,17,0)
(13,20,0)
(30,22,0)
(11,28,0)
(3,26,0)
(14,20,0)
(27,10,0)
(22,20,0)
(24,17,0)
(25,18,0)
(23,22,0)
(25,24,0)
(6,8,0)
(2,7,0)
(14,7,0)
(24,0,0)
(10,17,0)
(24,25,0)
(1,7,0)
(26,3,0)
(28,25,0)
(8,20,0)
(7,25,0)
(7,14,0)
(30,25,0)
(28,18,0)
(26,15,0)
(2,1,1)
(7,22,1)
(25,24,1)
(5,26,1)
(12,11,1)
(1,22,1)
(6,14,1)
(25,18,1)
(8,18,1)
(7,18,1)
(28,12,1)
(7,2,1)
(8,6,1)
(29,9,1)
(26,3,1)
(19,8,1)
(28,25,1)
(10,27,1)
(17,10,1)
(5,28,1)
(23,30,1)
(7,25,1)
(24,0,1)
(11,25,1)
(4,5,1)
(30,25,1)
(24,17,1)
(30,18,1)
(30,4,1)
(8,25,1)
(14,7,1)
(22,23,1)
(28,18,1)
(27,29,1)
(21,28,1)
(3,21,1)
(24,0,2)
(17,10,2)
(8,18,2)
(7,22,2)
(25,18,2)
(30,18,2)
(25,24,2)
(7,25,2)
(8,25,2)
(14,7,2)
(7,18,2)
(24,17,2)
(3,28,2)
(28,25,2)
(30,25,2)
(19,8,2)
(26,28,2)
(28,18,2)
(21,28,2)
(26,3,2)
-----------------------------------
(0,int *)
(1,data)
(2,0)
(3,-1)
(4,0)
(5,data)
(6,data)
(7,data[0])
(8,return data;)
(9,data)
(10,sizeof(int)
(11,data)
(12,NULL)
(13,if (data == NULL)
(14,printIntLine(data[0])
(15,)
(16, sizeof(int)
(17,calloc(100, sizeof(int)
(18,int * data)
(19,RET)
(20,)
(21,1)
(22,data[0] = 5)
(23,5)
(24,(int *)
(25,data = (int *)
(26,exit(-1)
(27,int)
(28,data == NULL)
(29,100)
(30,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^