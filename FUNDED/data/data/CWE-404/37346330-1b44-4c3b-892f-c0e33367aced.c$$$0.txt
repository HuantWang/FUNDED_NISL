-----label-----
1
-----code-----
static void cpufreq_interactive_timer(unsigned long data)
{
	u64 now;
	unsigned int delta_time;
	u64 cputime_speedadj;
	int cpu_load;
	struct cpufreq_interactive_policyinfo *ppol = per_cpu(polinfo, data);
	struct cpufreq_interactive_tunables *tunables =
		ppol->policy->governor_data;
	struct cpufreq_interactive_cpuinfo *pcpu;
	unsigned int new_freq;
	unsigned int loadadjfreq = 0, tmploadadjfreq;
	unsigned int index;
	unsigned long flags;
	unsigned long max_cpu;
	int i, fcpu;
	struct cpufreq_govinfo govinfo;
	unsigned int this_hispeed_freq;
	bool display_on = is_display_on();

	if (!down_read_trylock(&ppol->enable_sem))
		return;
	if (!ppol->governor_enabled)
		goto exit;

	fcpu = cpumask_first(ppol->policy->related_cpus);
	now = ktime_to_us(ktime_get());
	spin_lock_irqsave(&ppol->load_lock, flags);
	ppol->last_evaluated_jiffy = get_jiffies_64();

	if (display_on
		&& tunables->timer_rate != tunables->prev_timer_rate)
		tunables->timer_rate = tunables->prev_timer_rate;
	else if (!display_on
		&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE) {
		tunables->prev_timer_rate = tunables->timer_rate;
		tunables->timer_rate
			= max(tunables->timer_rate,
				SCREEN_OFF_TIMER_RATE);
	}

	if (tunables->use_sched_load)
		sched_get_cpus_busy(ppol->cpu_busy_times,
				    ppol->policy->related_cpus);
	max_cpu = cpumask_first(ppol->policy->cpus);
	for_each_cpu(i, ppol->policy->cpus) {
		pcpu = &per_cpu(cpuinfo, i);
		if (tunables->use_sched_load) {
			cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]
					* ppol->policy->cpuinfo.max_freq;
			do_div(cputime_speedadj, tunables->timer_rate);
		} else {
			now = update_load(i);
			delta_time = (unsigned int)
				(now - pcpu->cputime_speedadj_timestamp);
			if (WARN_ON_ONCE(!delta_time))
				continue;
			cputime_speedadj = pcpu->cputime_speedadj;
			do_div(cputime_speedadj, delta_time);
		}
		tmploadadjfreq = (unsigned int)cputime_speedadj * 100;
		pcpu->loadadjfreq = tmploadadjfreq;
		trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /
						  ppol->target_freq);

		if (tmploadadjfreq > loadadjfreq) {
			loadadjfreq = tmploadadjfreq;
			max_cpu = i;
		}
	}
	spin_unlock_irqrestore(&ppol->load_lock, flags);

	/*
	 * Send govinfo notification.
	 * Govinfo notification could potentially wake up another thread
	 * managed by its clients. Thread wakeups might trigger a load
	 * change callback that executes this function again. Therefore
	 * no spinlock could be held when sending the notification.
	 */
	for_each_cpu(i, ppol->policy->cpus) {
		pcpu = &per_cpu(cpuinfo, i);
		govinfo.cpu = i;
		govinfo.load = pcpu->loadadjfreq / ppol->policy->max;
		govinfo.sampling_rate_us = tunables->timer_rate;
		atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,
					   CPUFREQ_LOAD_CHANGE, &govinfo);
	}

	spin_lock_irqsave(&ppol->target_freq_lock, flags);
	cpu_load = loadadjfreq / ppol->target_freq;
	tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime;
	this_hispeed_freq = max(tunables->hispeed_freq, ppol->policy->min);

	if (cpu_load >= tunables->go_hispeed_load || tunables->boosted) {
		if (ppol->target_freq < this_hispeed_freq &&
		    cpu_load <= MAX_LOCAL_LOAD) {
			new_freq = this_hispeed_freq;
		} else {
			new_freq = choose_freq(ppol, loadadjfreq);

			if (new_freq < this_hispeed_freq)
				new_freq = this_hispeed_freq;
		}
	} else {
		new_freq = choose_freq(ppol, loadadjfreq);
	}

	if (cpu_load <= MAX_LOCAL_LOAD &&
	    ppol->target_freq >= this_hispeed_freq &&
	    new_freq > ppol->target_freq &&
	    now - ppol->hispeed_validate_time <
	    freq_to_above_hispeed_delay(tunables, ppol->target_freq)) {
		trace_cpufreq_interactive_notyet(
			max_cpu, cpu_load, ppol->target_freq,
			ppol->policy->cur, new_freq);
		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
		goto rearm;
	}

	ppol->hispeed_validate_time = now;

	if (cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,
					   new_freq, CPUFREQ_RELATION_L,
					   &index)) {
		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
		goto rearm;
	}

	new_freq = ppol->freq_table[index].frequency;

	if (new_freq < ppol->target_freq &&
	    now - ppol->max_freq_hyst_start_time <
	    tunables->max_freq_hysteresis) {
		trace_cpufreq_interactive_notyet(max_cpu, cpu_load,
			ppol->target_freq, ppol->policy->cur, new_freq);
		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
		goto rearm;
	}

	/*
	 * Do not scale below floor_freq unless we have been at or above the
	 * floor frequency for the minimum sample time since last validated.
	 */
	if (new_freq < ppol->floor_freq) {
		if (now - ppol->floor_validate_time <
				tunables->min_sample_time) {
			trace_cpufreq_interactive_notyet(
				max_cpu, cpu_load, ppol->target_freq,
				ppol->policy->cur, new_freq);
			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
			goto rearm;
		}
	}

	/*
	 * Update the timestamp for checking whether speed has been held at
	 * or above the selected frequency for a minimum of min_sample_time,
	 * if not boosted to this_hispeed_freq.  If boosted to this_hispeed_freq
	 * then we allow the speed to drop as soon as the boostpulse duration
	 * expires (or the indefinite boost is turned off).
	 */

	if (!tunables->boosted || new_freq > this_hispeed_freq) {
		ppol->floor_freq = new_freq;
		ppol->floor_validate_time = now;
	}

	if (new_freq == ppol->policy->max)
		ppol->max_freq_hyst_start_time = now;

	if (ppol->target_freq == new_freq) {
		trace_cpufreq_interactive_already(
			max_cpu, cpu_load, ppol->target_freq,
			ppol->policy->cur, new_freq);
		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
		goto rearm;
	}

	trace_cpufreq_interactive_target(max_cpu, cpu_load, ppol->target_freq,
					 ppol->policy->cur, new_freq);

	ppol->target_freq = new_freq;
	spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
	spin_lock_irqsave(&speedchange_cpumask_lock, flags);
	cpumask_set_cpu(max_cpu, &speedchange_cpumask);
	spin_unlock_irqrestore(&speedchange_cpumask_lock, flags);
	wake_up_process(speedchange_task);

rearm:
	if (!timer_pending(&ppol->policy_timer))
		cpufreq_interactive_timer_resched(data, false);

exit:
	up_read(&ppol->enable_sem);
	return;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
9,41
9,42
9,43
9,44
9,45
9,46
9,47
9,48
9,49
9,50
9,51
9,52
9,53
9,54
9,55
9,56
9,57
9,58
9,59
9,60
9,61
9,62
9,63
9,64
9,65
10,11
11,12
11,13
12,13
14,15
16,17
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
36,39
39,40
40,41
40,42
40,43
41,42
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
68,69
69,70
69,71
71,72
73,74
74,75
74,76
74,77
76,77
76,78
78,79
80,81
82,83
83,84
83,85
85,86
87,88
88,89
88,90
90,91
92,93
93,94
93,95
95,96
97,98
98,99
98,100
98,101
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
113,114
115,116
116,117
116,118
118,119
118,120
120,121
121,122
122,123
124,125
124,126
125,126
126,127
126,128
127,128
129,130
130,131
130,132
131,132
135,136
135,137
136,137
137,138
137,139
138,139
141,142
143,144
144,145
144,146
145,146
147,148
147,149
148,149
150,151
150,152
151,152
151,153
152,153
156,157
157,158
157,159
158,159
160,161
160,162
161,162
163,164
164,165
166,167
167,168
167,169
167,170
168,169
170,171
171,172
171,173
172,173
175,176
177,178
178,179
178,180
179,180
179,181
180,181
183,184
184,185
186,187
186,188
186,189
187,188
187,189
188,189
190,191
190,192
191,192
191,193
192,193
195,196
195,197
196,197
199,200
200,201
200,202
201,202
201,203
202,203
205,206
205,207
206,207
209,210
209,211
210,211
210,212
211,212
212,213
214,215
214,216
215,216
215,217
216,217
219,220
221,222
221,223
222,223
223,224
223,225
224,225
224,226
225,226
228,229
228,230
229,230
232,233
233,234
233,235
234,235
234,236
235,236
238,239
238,240
238,241
239,240
241,242
241,243
242,243
245,246
247,248
247,249
248,249
248,250
249,250
252,253
253,254
253,255
253,256
254,255
256,257
256,258
257,258
260,261
260,262
261,262
261,263
262,263
266,267
267,268
267,269
268,269
270,271
270,272
271,272
273,274
273,275
274,275
274,276
275,276
279,280
280,281
280,282
280,283
281,282
283,284
285,286
285,287
286,287
286,288
287,288
291,292
292,293
292,294
292,295
292,296
292,297
292,298
293,294
294,295
294,296
295,296
297,298
298,299
298,300
298,301
299,300
301,302
303,304
305,306
305,307
305,308
306,307
306,308
307,308
310,311
310,312
311,312
312,313
312,314
313,314
315,316
315,317
316,317
316,318
317,318
317,319
318,319
321,322
321,323
322,323
322,324
323,324
326,327
326,328
327,328
329,330
331,332
331,333
332,333
332,334
333,334
333,335
334,335
339,340
340,341
340,342
340,343
341,342
343,344
345,346
345,347
346,347
349,350
349,351
349,352
349,353
349,354
350,351
351,352
351,353
352,353
354,355
354,356
355,356
357,358
359,360
360,361
360,362
361,362
363,364
363,365
364,365
364,366
367,368
368,369
368,370
369,370
371,372
371,373
372,373
375,376
375,377
376,377
376,378
377,378
379,380
380,381
383,384
384,385
384,386
385,386
387,388
387,389
388,389
391,392
392,393
392,394
392,395
393,394
395,396
397,398
399,400
400,401
400,402
401,402
403,404
403,405
404,405
404,406
405,406
405,407
408,409
411,412
412,413
412,414
413,414
413,415
414,415
417,418
419,420
420,421
420,422
420,423
421,422
423,424
425,426
425,427
426,427
428,429
428,430
429,430
432,433
432,434
433,434
433,435
434,435
436,437
438,439
438,440
439,440
440,441
440,442
441,442
443,444
445,446
446,447
446,448
447,448
449,450
451,452
452,453
452,454
452,455
453,454
455,456
456,457
456,458
457,458
460,461
462,463
463,464
463,465
463,466
464,465
466,467
468,469
468,470
469,470
469,471
470,471
474,475
475,476
475,477
475,478
475,479
475,480
476,477
477,478
477,479
478,479
480,481
481,482
481,483
481,484
482,483
484,485
486,487
488,489
489,490
489,491
490,491
490,492
491,492
494,495
496,497
497,498
497,499
498,499
498,500
499,500
502,503
502,504
503,504
503,505
504,505
507,508
507,509
508,509
508,510
509,510
513,514
514,515
514,516
515,516
515,517
516,517
519,520
519,521
520,521
523,524
524,525
524,526
524,527
524,528
525,526
527,528
528,529
530,531
532,533
533,534
535,536
536,537
536,538
536,539
537,538
539,540
540,541
540,542
541,542
544,545
546,547
547,548
547,549
548,549
550,551
550,552
551,552
553,554
553,555
554,555
557,558
558,559
558,560
559,560
559,561
560,561
563,564
563,565
564,565
564,566
565,566
568,569
568,570
569,570
571,572
571,573
572,573
575,576
576,577
576,578
577,578
579,580
579,581
579,582
580,581
582,583
582,584
583,584
586,587
586,588
587,588
587,589
588,589
592,593
592,594
592,595
593,594
593,595
594,595
594,596
595,596
597,598
597,599
598,599
601,602
601,603
602,603
605,606
606,607
606,608
606,609
607,608
607,609
608,609
608,610
609,610
609,611
610,611
613,614
615,616
615,617
616,617
618,619
620,621
621,622
622,623
622,624
623,624
625,626
627,628
627,629
628,629
629,630
629,631
630,631
632,633
632,634
632,635
633,634
635,636
637,638
639,640
639,641
640,641
640,642
641,642
643,644
645,646
646,647
646,648
647,648
649,650
651,652
652,653
653,654
653,655
654,655
656,657
656,658
656,659
657,658
659,660
661,662
663,664
663,665
664,665
664,666
665,666
665,667
666,667
666,668
667,668
667,669
668,669
670,671
672,673
672,674
673,674
673,675
674,675
677,678
679,680
679,681
680,681
682,683
682,684
683,684
686,687
686,688
687,688
687,689
688,689
690,691
690,692
691,692
694,695
694,696
694,697
695,696
697,698
699,700
699,701
700,701
703,704
703,705
703,706
704,705
705,706
705,707
705,708
705,709
705,710
705,711
706,707
708,709
710,711
712,713
712,714
713,714
716,717
716,718
717,718
717,719
718,719
722,723
724,725
725,726
725,727
725,728
726,727
728,729
729,730
729,731
730,731
733,734
735,736
737,738
738,739
738,740
739,740
739,741
740,741
743,744
745,746
745,747
746,747
746,748
746,749
746,750
746,751
746,752
747,748
749,750
749,751
750,751
753,754
753,755
754,755
757,758
759,760
761,762
762,763
764,765
764,766
765,766
766,767
766,768
766,769
767,768
769,770
770,771
770,772
771,772
774,775
776,777
778,779
779,780
779,781
780,781
782,783
782,784
783,784
783,785
784,785
784,786
785,786
788,789
791,792
791,793
792,793
792,794
793,794
793,795
794,795
796,797
796,798
797,798
800,801
800,802
801,802
801,803
802,803
804,805
804,806
805,806
808,809
808,810
809,810
812,813
812,814
812,815
813,814
814,815
814,816
814,817
814,818
814,819
814,820
815,816
817,818
819,820
821,822
821,823
822,823
825,826
825,827
826,827
826,828
827,828
831,832
833,834
834,835
834,836
834,837
835,836
837,838
838,839
838,840
839,840
842,843
844,845
846,847
846,848
847,848
847,849
848,849
850,851
850,852
851,852
854,855
855,856
855,857
856,857
856,858
857,858
857,859
858,859
860,861
860,862
861,862
864,865
864,866
865,866
868,869
868,870
868,871
869,870
870,871
870,872
870,873
870,874
870,875
870,876
871,872
873,874
875,876
877,878
877,879
878,879
881,882
881,883
882,883
882,884
883,884
887,888
889,890
890,891
890,892
890,893
891,892
893,894
894,895
894,896
895,896
898,899
900,901
902,903
902,904
903,904
903,905
904,905
905,906
905,907
906,907
909,910
909,911
910,911
912,913
914,915
914,916
915,916
916,917
916,918
917,918
917,919
918,919
921,922
923,924
924,925
924,926
925,926
925,927
926,927
929,930
931,932
931,933
932,933
932,934
933,934
935,936
935,937
936,937
936,938
937,938
941,942
942,943
942,944
943,944
943,945
944,945
947,948
949,950
949,951
950,951
950,952
951,952
951,953
952,953
955,956
957,958
957,959
957,960
958,959
959,960
959,961
959,962
959,963
959,964
959,965
960,961
962,963
964,965
966,967
966,968
967,968
970,971
970,972
971,972
971,973
972,973
976,977
978,979
979,980
979,981
979,982
980,981
982,983
983,984
983,985
984,985
987,988
989,990
991,992
992,993
992,994
992,995
992,996
992,997
992,998
993,994
995,996
997,998
999,1000
999,1001
1000,1001
1003,1004
1003,1005
1004,1005
1004,1006
1005,1006
1009,1010
1011,1012
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1017,1018
1019,1020
1020,1021
1020,1022
1020,1023
1021,1022
1023,1024
1024,1025
1024,1026
1025,1026
1028,1029
1030,1031
1031,1032
1031,1033
1031,1034
1032,1033
1034,1035
1035,1036
1037,1038
1039,1040
1040,1041
1040,1042
1040,1043
1041,1042
1043,1044
1045,1046
1046,1047
1048,1049
1049,1050
1049,1051
1049,1052
1050,1051
1052,1053
1053,1054
1055,1056
1057,1058
1058,1059
1058,1060
1059,1060
1061,1062
1062,1063
1064,1065
1064,1066
1066,1067
1066,1068
1067,1068
1068,1069
1068,1070
1069,1070
1071,1072
1072,1073
1072,1074
1073,1074
1076,1077
1077,1078
1077,1079
1077,1080
1078,1079
1080,1081
1083,1084
1083,1085
1085,1086
1086,1087
1086,1088
1087,1088
1089,1090
1090,1091
1090,1092
1091,1092
-----nextToken-----
2,4,6,8,13,15,18,20,24,26,29,31,35,37,38,42,44,46,50,52,53,58,59,60,64,66,67,70,72,75,77,79,81,84,86,89,91,94,96,99,101,103,107,109,112,114,117,119,123,128,132,133,134,139,140,142,146,149,153,154,155,159,162,165,169,173,174,176,181,182,185,189,193,194,197,198,203,204,207,208,213,217,218,220,226,227,230,231,236,237,240,243,244,246,250,251,255,258,259,263,264,265,269,272,276,277,278,282,284,288,289,290,296,300,302,304,308,309,314,319,320,324,325,328,330,335,336,337,338,342,344,347,348,353,356,358,362,365,366,370,373,374,378,381,382,386,389,390,394,396,398,402,406,407,409,410,415,416,418,422,424,427,430,431,435,437,442,444,448,450,454,458,459,461,465,467,471,472,473,479,483,485,487,492,493,495,500,501,505,506,510,511,512,517,518,521,522,526,529,531,534,538,542,543,545,549,552,555,556,561,562,566,567,570,573,574,578,581,584,585,589,590,591,596,599,600,603,604,611,612,614,617,619,624,626,631,634,636,638,642,644,648,650,655,658,660,662,669,671,675,676,678,681,684,685,689,692,693,696,698,701,702,707,709,711,714,715,719,720,721,723,727,731,732,734,736,741,742,744,748,751,752,755,756,758,760,763,768,772,773,775,777,781,786,787,789,790,795,798,799,803,806,807,810,811,816,818,820,823,824,828,829,830,832,836,840,841,843,845,849,852,853,859,862,863,866,867,872,874,876,879,880,884,885,886,888,892,896,897,899,901,907,908,911,913,919,920,922,927,928,930,934,938,939,940,945,946,948,953,954,956,961,963,965,968,969,973,974,975,977,981,985,986,988,990,994,996,998,1001,1002,1006,1007,1008,1010,1015,1016,1018,1022,1026,1027,1029,1033,1036,1038,1042,1044,1047,1051,1054,1056,1060,1063,1065,1070,1074,1075,1079,1081,1082,1084,1088,1092,1093,1094
-----computeFrom-----
144,145
144,146
157,158
157,159
178,179
178,180
187,188
187,189
190,191
190,192
200,201
200,202
210,211
210,212
214,215
214,216
223,224
223,225
233,234
233,235
267,268
267,269
294,295
294,296
312,313
312,314
315,316
315,317
326,327
326,328
351,352
351,353
360,361
360,362
368,369
368,370
384,385
384,386
400,401
400,402
403,404
403,405
412,413
412,414
425,426
425,427
433,434
433,435
440,441
440,442
446,447
446,448
477,478
477,479
489,490
489,491
497,498
497,499
502,503
502,504
514,515
514,516
547,548
547,549
550,551
550,552
558,559
558,560
563,564
563,565
568,569
568,570
576,577
576,578
593,594
593,595
594,595
594,596
607,608
607,609
608,609
608,610
615,616
615,617
622,623
622,624
629,630
629,631
640,641
640,642
646,647
646,648
653,654
653,655
664,665
664,666
665,666
665,667
666,667
666,668
667,668
667,669
672,673
672,674
679,680
679,681
686,687
686,688
687,688
687,689
738,739
738,740
779,780
779,781
792,793
792,794
793,794
793,795
800,801
800,802
801,802
801,803
847,848
847,849
856,857
856,858
857,858
857,859
903,904
903,905
909,910
909,911
916,917
916,918
924,925
924,926
932,933
932,934
942,943
942,944
950,951
950,952
1012,1013
1012,1014
-----guardedBy-----
197,207
194,204
198,208
220,246
217,243
218,244
437,442
435,444
596,617
614,626
642,648
644,650
681,723
701,731
669,711
702,715
795,832
806,840
799,824
849,888
852,896
862,896
911,922
938,945
956,977
953,985
954,969
-----guardedByNegation-----
189,213
197,243
194,244
198,227
611,636
614,650
-----lastLexicalUse-----
197,243
194,244
198,227
614,650
-----jump-----
197,243
194,244
198,227
614,650
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;LabelStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;
-----ast_node-----
static void cpufreq_interactive_timer(unsigned long data){	u64 now;	unsigned int delta_time;	u64 cputime_speedadj;	int cpu_load;	struct cpufreq_interactive_policyinfo *ppol = per_cpu(polinfo, data);	struct cpufreq_interactive_tunables *tunables =		ppol->policy->governor_data;	struct cpufreq_interactive_cpuinfo *pcpu;	unsigned int new_freq;	unsigned int loadadjfreq = 0, tmploadadjfreq;	unsigned int index;	unsigned long flags;	unsigned long max_cpu;	int i, fcpu;	struct cpufreq_govinfo govinfo;	unsigned int this_hispeed_freq;	bool display_on = is_display_on();	if (!down_read_trylock(&ppol->enable_sem))		return;	if (!ppol->governor_enabled)		goto exit;	fcpu = cpumask_first(ppol->policy->related_cpus);	now = ktime_to_us(ktime_get());	spin_lock_irqsave(&ppol->load_lock, flags);	ppol->last_evaluated_jiffy = get_jiffies_64();	if (display_on		&& tunables->timer_rate != tunables->prev_timer_rate)		tunables->timer_rate = tunables->prev_timer_rate;	else if (!display_on		&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE) {		tunables->prev_timer_rate = tunables->timer_rate;		tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE);	}	if (tunables->use_sched_load)		sched_get_cpus_busy(ppol->cpu_busy_times,				    ppol->policy->related_cpus);	max_cpu = cpumask_first(ppol->policy->cpus);	for_each_cpu(i, ppol->policy->cpus) {		pcpu = &per_cpu(cpuinfo, i);		if (tunables->use_sched_load) {			cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq;			do_div(cputime_speedadj, tunables->timer_rate);		} else {			now = update_load(i);			delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp);			if (WARN_ON_ONCE(!delta_time))				continue;			cputime_speedadj = pcpu->cputime_speedadj;			do_div(cputime_speedadj, delta_time);		}		tmploadadjfreq = (unsigned int)cputime_speedadj * 100;		pcpu->loadadjfreq = tmploadadjfreq;		trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /						  ppol->target_freq);		if (tmploadadjfreq > loadadjfreq) {			loadadjfreq = tmploadadjfreq;			max_cpu = i;		}	}	spin_unlock_irqrestore(&ppol->load_lock, flags);	/*	 * Send govinfo notification.	 * Govinfo notification could potentially wake up another thread	 * managed by its clients. Thread wakeups might trigger a load	 * change callback that executes this function again. Therefore	 * no spinlock could be held when sending the notification.	 */	for_each_cpu(i, ppol->policy->cpus) {		pcpu = &per_cpu(cpuinfo, i);		govinfo.cpu = i;		govinfo.load = pcpu->loadadjfreq / ppol->policy->max;		govinfo.sampling_rate_us = tunables->timer_rate;		atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,					   CPUFREQ_LOAD_CHANGE, &govinfo);	}	spin_lock_irqsave(&ppol->target_freq_lock, flags);	cpu_load = loadadjfreq / ppol->target_freq;	tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime;	this_hispeed_freq = max(tunables->hispeed_freq, ppol->policy->min);	if (cpu_load >= tunables->go_hispeed_load || tunables->boosted) {		if (ppol->target_freq < this_hispeed_freq &&		    cpu_load <= MAX_LOCAL_LOAD) {			new_freq = this_hispeed_freq;		} else {			new_freq = choose_freq(ppol, loadadjfreq);			if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;		}	} else {		new_freq = choose_freq(ppol, loadadjfreq);	}	if (cpu_load <= MAX_LOCAL_LOAD &&	    ppol->target_freq >= this_hispeed_freq &&	    new_freq > ppol->target_freq &&	    now - ppol->hispeed_validate_time <	    freq_to_above_hispeed_delay(tunables, ppol->target_freq)) {		trace_cpufreq_interactive_notyet(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	ppol->hispeed_validate_time = now;	if (cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,					   new_freq, CPUFREQ_RELATION_L,					   &index)) {		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	new_freq = ppol->freq_table[index].frequency;	if (new_freq < ppol->target_freq &&	    now - ppol->max_freq_hyst_start_time <	    tunables->max_freq_hysteresis) {		trace_cpufreq_interactive_notyet(max_cpu, cpu_load,			ppol->target_freq, ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	/*	 * Do not scale below floor_freq unless we have been at or above the	 * floor frequency for the minimum sample time since last validated.	 */	if (new_freq < ppol->floor_freq) {		if (now - ppol->floor_validate_time <				tunables->min_sample_time) {			trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			goto rearm;		}	}	/*	 * Update the timestamp for checking whether speed has been held at	 * or above the selected frequency for a minimum of min_sample_time,	 * if not boosted to this_hispeed_freq.  If boosted to this_hispeed_freq	 * then we allow the speed to drop as soon as the boostpulse duration	 * expires (or the indefinite boost is turned off).	 */	if (!tunables->boosted || new_freq > this_hispeed_freq) {		ppol->floor_freq = new_freq;		ppol->floor_validate_time = now;	}	if (new_freq == ppol->policy->max)		ppol->max_freq_hyst_start_time = now;	if (ppol->target_freq == new_freq) {		trace_cpufreq_interactive_already(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	trace_cpufreq_interactive_target(max_cpu, cpu_load, ppol->target_freq,					 ppol->policy->cur, new_freq);	ppol->target_freq = new_freq;	spin_unlock_irqrestore(&ppol->target_freq_lock, flags);	spin_lock_irqsave(&speedchange_cpumask_lock, flags);	cpumask_set_cpu(max_cpu, &speedchange_cpumask);	spin_unlock_irqrestore(&speedchange_cpumask_lock, flags);	wake_up_process(speedchange_task);rearm:	if (!timer_pending(&ppol->policy_timer))		cpufreq_interactive_timer_resched(data, false);exit:	up_read(&ppol->enable_sem);	return;}
static void
cpufreq_interactive_timer(unsigned long data)
cpufreq_interactive_timer
unsigned long data
unsigned long
data
data
{	u64 now;	unsigned int delta_time;	u64 cputime_speedadj;	int cpu_load;	struct cpufreq_interactive_policyinfo *ppol = per_cpu(polinfo, data);	struct cpufreq_interactive_tunables *tunables =		ppol->policy->governor_data;	struct cpufreq_interactive_cpuinfo *pcpu;	unsigned int new_freq;	unsigned int loadadjfreq = 0, tmploadadjfreq;	unsigned int index;	unsigned long flags;	unsigned long max_cpu;	int i, fcpu;	struct cpufreq_govinfo govinfo;	unsigned int this_hispeed_freq;	bool display_on = is_display_on();	if (!down_read_trylock(&ppol->enable_sem))		return;	if (!ppol->governor_enabled)		goto exit;	fcpu = cpumask_first(ppol->policy->related_cpus);	now = ktime_to_us(ktime_get());	spin_lock_irqsave(&ppol->load_lock, flags);	ppol->last_evaluated_jiffy = get_jiffies_64();	if (display_on		&& tunables->timer_rate != tunables->prev_timer_rate)		tunables->timer_rate = tunables->prev_timer_rate;	else if (!display_on		&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE) {		tunables->prev_timer_rate = tunables->timer_rate;		tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE);	}	if (tunables->use_sched_load)		sched_get_cpus_busy(ppol->cpu_busy_times,				    ppol->policy->related_cpus);	max_cpu = cpumask_first(ppol->policy->cpus);	for_each_cpu(i, ppol->policy->cpus) {		pcpu = &per_cpu(cpuinfo, i);		if (tunables->use_sched_load) {			cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq;			do_div(cputime_speedadj, tunables->timer_rate);		} else {			now = update_load(i);			delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp);			if (WARN_ON_ONCE(!delta_time))				continue;			cputime_speedadj = pcpu->cputime_speedadj;			do_div(cputime_speedadj, delta_time);		}		tmploadadjfreq = (unsigned int)cputime_speedadj * 100;		pcpu->loadadjfreq = tmploadadjfreq;		trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /						  ppol->target_freq);		if (tmploadadjfreq > loadadjfreq) {			loadadjfreq = tmploadadjfreq;			max_cpu = i;		}	}	spin_unlock_irqrestore(&ppol->load_lock, flags);	/*	 * Send govinfo notification.	 * Govinfo notification could potentially wake up another thread	 * managed by its clients. Thread wakeups might trigger a load	 * change callback that executes this function again. Therefore	 * no spinlock could be held when sending the notification.	 */	for_each_cpu(i, ppol->policy->cpus) {		pcpu = &per_cpu(cpuinfo, i);		govinfo.cpu = i;		govinfo.load = pcpu->loadadjfreq / ppol->policy->max;		govinfo.sampling_rate_us = tunables->timer_rate;		atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,					   CPUFREQ_LOAD_CHANGE, &govinfo);	}	spin_lock_irqsave(&ppol->target_freq_lock, flags);	cpu_load = loadadjfreq / ppol->target_freq;	tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime;	this_hispeed_freq = max(tunables->hispeed_freq, ppol->policy->min);	if (cpu_load >= tunables->go_hispeed_load || tunables->boosted) {		if (ppol->target_freq < this_hispeed_freq &&		    cpu_load <= MAX_LOCAL_LOAD) {			new_freq = this_hispeed_freq;		} else {			new_freq = choose_freq(ppol, loadadjfreq);			if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;		}	} else {		new_freq = choose_freq(ppol, loadadjfreq);	}	if (cpu_load <= MAX_LOCAL_LOAD &&	    ppol->target_freq >= this_hispeed_freq &&	    new_freq > ppol->target_freq &&	    now - ppol->hispeed_validate_time <	    freq_to_above_hispeed_delay(tunables, ppol->target_freq)) {		trace_cpufreq_interactive_notyet(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	ppol->hispeed_validate_time = now;	if (cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,					   new_freq, CPUFREQ_RELATION_L,					   &index)) {		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	new_freq = ppol->freq_table[index].frequency;	if (new_freq < ppol->target_freq &&	    now - ppol->max_freq_hyst_start_time <	    tunables->max_freq_hysteresis) {		trace_cpufreq_interactive_notyet(max_cpu, cpu_load,			ppol->target_freq, ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	/*	 * Do not scale below floor_freq unless we have been at or above the	 * floor frequency for the minimum sample time since last validated.	 */	if (new_freq < ppol->floor_freq) {		if (now - ppol->floor_validate_time <				tunables->min_sample_time) {			trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			goto rearm;		}	}	/*	 * Update the timestamp for checking whether speed has been held at	 * or above the selected frequency for a minimum of min_sample_time,	 * if not boosted to this_hispeed_freq.  If boosted to this_hispeed_freq	 * then we allow the speed to drop as soon as the boostpulse duration	 * expires (or the indefinite boost is turned off).	 */	if (!tunables->boosted || new_freq > this_hispeed_freq) {		ppol->floor_freq = new_freq;		ppol->floor_validate_time = now;	}	if (new_freq == ppol->policy->max)		ppol->max_freq_hyst_start_time = now;	if (ppol->target_freq == new_freq) {		trace_cpufreq_interactive_already(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}	trace_cpufreq_interactive_target(max_cpu, cpu_load, ppol->target_freq,					 ppol->policy->cur, new_freq);	ppol->target_freq = new_freq;	spin_unlock_irqrestore(&ppol->target_freq_lock, flags);	spin_lock_irqsave(&speedchange_cpumask_lock, flags);	cpumask_set_cpu(max_cpu, &speedchange_cpumask);	spin_unlock_irqrestore(&speedchange_cpumask_lock, flags);	wake_up_process(speedchange_task);rearm:	if (!timer_pending(&ppol->policy_timer))		cpufreq_interactive_timer_resched(data, false);exit:	up_read(&ppol->enable_sem);	return;}
u64 now;
u64 now;
u64
u64
now
now
unsigned int delta_time;
unsigned int delta_time;
unsigned int
delta_time
delta_time
u64 cputime_speedadj;
u64 cputime_speedadj;
u64
u64
cputime_speedadj
cputime_speedadj
int cpu_load;
int cpu_load;
int
cpu_load
cpu_load
struct cpufreq_interactive_policyinfo *ppol = per_cpu(polinfo, data);
struct cpufreq_interactive_policyinfo *ppol = per_cpu(polinfo, data);
struct cpufreq_interactive_policyinfo
cpufreq_interactive_policyinfo
*ppol = per_cpu(polinfo, data)
*
ppol
= per_cpu(polinfo, data)
per_cpu(polinfo, data)
per_cpu
per_cpu
polinfo
polinfo
data
data
struct cpufreq_interactive_tunables *tunables =		ppol->policy->governor_data;
struct cpufreq_interactive_tunables *tunables =		ppol->policy->governor_data;
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*tunables =		ppol->policy->governor_data
*
tunables
=		ppol->policy->governor_data
ppol->policy->governor_data
ppol->policy
ppol
ppol
policy
governor_data
struct cpufreq_interactive_cpuinfo *pcpu;
struct cpufreq_interactive_cpuinfo *pcpu;
struct cpufreq_interactive_cpuinfo
cpufreq_interactive_cpuinfo
*pcpu
*
pcpu
unsigned int new_freq;
unsigned int new_freq;
unsigned int
new_freq
new_freq
unsigned int loadadjfreq = 0, tmploadadjfreq;
unsigned int loadadjfreq = 0, tmploadadjfreq;
unsigned int
loadadjfreq = 0
loadadjfreq
= 0
0
tmploadadjfreq
tmploadadjfreq
unsigned int index;
unsigned int index;
unsigned int
index
index
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
unsigned long max_cpu;
unsigned long max_cpu;
unsigned long
max_cpu
max_cpu
int i, fcpu;
int i, fcpu;
int
i
i
fcpu
fcpu
struct cpufreq_govinfo govinfo;
struct cpufreq_govinfo govinfo;
struct cpufreq_govinfo
cpufreq_govinfo
govinfo
govinfo
unsigned int this_hispeed_freq;
unsigned int this_hispeed_freq;
unsigned int
this_hispeed_freq
this_hispeed_freq
bool display_on = is_display_on();
bool display_on = is_display_on();
bool
display_on = is_display_on()
display_on
= is_display_on()
is_display_on()
is_display_on
is_display_on
if (!down_read_trylock(&ppol->enable_sem))		return;
!down_read_trylock(&ppol->enable_sem)
down_read_trylock(&ppol->enable_sem)
down_read_trylock
down_read_trylock
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
return;
if (!ppol->governor_enabled)		goto exit;
!ppol->governor_enabled
ppol->governor_enabled
ppol
ppol
governor_enabled
goto exit;
exit
fcpu = cpumask_first(ppol->policy->related_cpus);
fcpu = cpumask_first(ppol->policy->related_cpus)
fcpu
fcpu
cpumask_first(ppol->policy->related_cpus)
cpumask_first
cpumask_first
ppol->policy->related_cpus
ppol->policy
ppol
ppol
policy
related_cpus
now = ktime_to_us(ktime_get());
now = ktime_to_us(ktime_get())
now
now
ktime_to_us(ktime_get())
ktime_to_us
ktime_to_us
ktime_get()
ktime_get
ktime_get
spin_lock_irqsave(&ppol->load_lock, flags);
spin_lock_irqsave(&ppol->load_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&ppol->load_lock
ppol->load_lock
ppol
ppol
load_lock
flags
flags
ppol->last_evaluated_jiffy = get_jiffies_64();
ppol->last_evaluated_jiffy = get_jiffies_64()
ppol->last_evaluated_jiffy
ppol
ppol
last_evaluated_jiffy
get_jiffies_64()
get_jiffies_64
get_jiffies_64
if (display_on		&& tunables->timer_rate != tunables->prev_timer_rate)		tunables->timer_rate = tunables->prev_timer_rate;	else if (!display_on		&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE) {		tunables->prev_timer_rate = tunables->timer_rate;		tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE);	}
display_on		&& tunables->timer_rate != tunables->prev_timer_rate
display_on
display_on
tunables->timer_rate != tunables->prev_timer_rate
tunables->timer_rate
tunables
tunables
timer_rate
tunables->prev_timer_rate
tunables
tunables
prev_timer_rate
tunables->timer_rate = tunables->prev_timer_rate;
tunables->timer_rate = tunables->prev_timer_rate
tunables->timer_rate
tunables
tunables
timer_rate
tunables->prev_timer_rate
tunables
tunables
prev_timer_rate
if (!display_on		&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE) {		tunables->prev_timer_rate = tunables->timer_rate;		tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE);	}
!display_on		&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE
!display_on
display_on
display_on
tunables->timer_rate != SCREEN_OFF_TIMER_RATE
tunables->timer_rate
tunables
tunables
timer_rate
SCREEN_OFF_TIMER_RATE
SCREEN_OFF_TIMER_RATE
{		tunables->prev_timer_rate = tunables->timer_rate;		tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE);	}
tunables->prev_timer_rate = tunables->timer_rate;
tunables->prev_timer_rate = tunables->timer_rate
tunables->prev_timer_rate
tunables
tunables
prev_timer_rate
tunables->timer_rate
tunables
tunables
timer_rate
tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE);
tunables->timer_rate			= max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE)
tunables->timer_rate
tunables
tunables
timer_rate
max(tunables->timer_rate,				SCREEN_OFF_TIMER_RATE)
max
max
tunables->timer_rate
tunables
tunables
timer_rate
SCREEN_OFF_TIMER_RATE
SCREEN_OFF_TIMER_RATE
if (tunables->use_sched_load)		sched_get_cpus_busy(ppol->cpu_busy_times,				    ppol->policy->related_cpus);
tunables->use_sched_load
tunables
tunables
use_sched_load
sched_get_cpus_busy(ppol->cpu_busy_times,				    ppol->policy->related_cpus);
sched_get_cpus_busy(ppol->cpu_busy_times,				    ppol->policy->related_cpus)
sched_get_cpus_busy
sched_get_cpus_busy
ppol->cpu_busy_times
ppol
ppol
cpu_busy_times
ppol->policy->related_cpus
ppol->policy
ppol
ppol
policy
related_cpus
max_cpu = cpumask_first(ppol->policy->cpus);
max_cpu = cpumask_first(ppol->policy->cpus)
max_cpu
max_cpu
cpumask_first(ppol->policy->cpus)
cpumask_first
cpumask_first
ppol->policy->cpus
ppol->policy
ppol
ppol
policy
cpus
for_each_cpu(i, ppol->policy->cpus)
for_each_cpu(i, ppol->policy->cpus)
for_each_cpu
for_each_cpu
i
i
ppol->policy->cpus
ppol->policy
ppol
ppol
policy
cpus
)
{		pcpu = &per_cpu(cpuinfo, i);		if (tunables->use_sched_load) {			cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq;			do_div(cputime_speedadj, tunables->timer_rate);		} else {			now = update_load(i);			delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp);			if (WARN_ON_ONCE(!delta_time))				continue;			cputime_speedadj = pcpu->cputime_speedadj;			do_div(cputime_speedadj, delta_time);		}		tmploadadjfreq = (unsigned int)cputime_speedadj * 100;		pcpu->loadadjfreq = tmploadadjfreq;		trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /						  ppol->target_freq);		if (tmploadadjfreq > loadadjfreq) {			loadadjfreq = tmploadadjfreq;			max_cpu = i;		}	}
pcpu = &per_cpu(cpuinfo, i);
pcpu = &per_cpu(cpuinfo, i)
pcpu
pcpu
&per_cpu(cpuinfo, i)
per_cpu(cpuinfo, i)
per_cpu
per_cpu
cpuinfo
cpuinfo
i
i
if (tunables->use_sched_load) {			cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq;			do_div(cputime_speedadj, tunables->timer_rate);		} else {			now = update_load(i);			delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp);			if (WARN_ON_ONCE(!delta_time))				continue;			cputime_speedadj = pcpu->cputime_speedadj;			do_div(cputime_speedadj, delta_time);		}
tunables->use_sched_load
tunables
tunables
use_sched_load
{			cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq;			do_div(cputime_speedadj, tunables->timer_rate);		}
cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq;
cputime_speedadj = (u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq
cputime_speedadj
cputime_speedadj
(u64)ppol->cpu_busy_times[i - fcpu]					* ppol->policy->cpuinfo.max_freq
(u64)ppol->cpu_busy_times[i - fcpu]
u64
u64
u64

ppol->cpu_busy_times[i - fcpu]
ppol->cpu_busy_times
ppol
ppol
cpu_busy_times
i - fcpu
i
i
fcpu
fcpu
ppol->policy->cpuinfo.max_freq
ppol->policy->cpuinfo
ppol->policy
ppol
ppol
policy
cpuinfo
max_freq
do_div(cputime_speedadj, tunables->timer_rate);
do_div(cputime_speedadj, tunables->timer_rate)
do_div
do_div
cputime_speedadj
cputime_speedadj
tunables->timer_rate
tunables
tunables
timer_rate
{			now = update_load(i);			delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp);			if (WARN_ON_ONCE(!delta_time))				continue;			cputime_speedadj = pcpu->cputime_speedadj;			do_div(cputime_speedadj, delta_time);		}
now = update_load(i);
now = update_load(i)
now
now
update_load(i)
update_load
update_load
i
i
delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp);
delta_time = (unsigned int)				(now - pcpu->cputime_speedadj_timestamp)
delta_time
delta_time
(unsigned int)				(now - pcpu->cputime_speedadj_timestamp)
unsigned int
unsigned int

(now - pcpu->cputime_speedadj_timestamp)
now - pcpu->cputime_speedadj_timestamp
now
now
pcpu->cputime_speedadj_timestamp
pcpu
pcpu
cputime_speedadj_timestamp
if (WARN_ON_ONCE(!delta_time))				continue;
WARN_ON_ONCE(!delta_time)
WARN_ON_ONCE
WARN_ON_ONCE
!delta_time
delta_time
delta_time
continue;
cputime_speedadj = pcpu->cputime_speedadj;
cputime_speedadj = pcpu->cputime_speedadj
cputime_speedadj
cputime_speedadj
pcpu->cputime_speedadj
pcpu
pcpu
cputime_speedadj
do_div(cputime_speedadj, delta_time);
do_div(cputime_speedadj, delta_time)
do_div
do_div
cputime_speedadj
cputime_speedadj
delta_time
delta_time
tmploadadjfreq = (unsigned int)cputime_speedadj * 100;
tmploadadjfreq = (unsigned int)cputime_speedadj * 100
tmploadadjfreq
tmploadadjfreq
(unsigned int)cputime_speedadj * 100
(unsigned int)cputime_speedadj
unsigned int
unsigned int

cputime_speedadj
cputime_speedadj
100
pcpu->loadadjfreq = tmploadadjfreq;
pcpu->loadadjfreq = tmploadadjfreq
pcpu->loadadjfreq
pcpu
pcpu
loadadjfreq
tmploadadjfreq
tmploadadjfreq
trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /						  ppol->target_freq);
trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /						  ppol->target_freq)
trace_cpufreq_interactive_cpuload
trace_cpufreq_interactive_cpuload
i
i
tmploadadjfreq /						  ppol->target_freq
tmploadadjfreq
tmploadadjfreq
ppol->target_freq
ppol
ppol
target_freq
if (tmploadadjfreq > loadadjfreq) {			loadadjfreq = tmploadadjfreq;			max_cpu = i;		}
tmploadadjfreq > loadadjfreq
tmploadadjfreq
tmploadadjfreq
loadadjfreq
loadadjfreq
{			loadadjfreq = tmploadadjfreq;			max_cpu = i;		}
loadadjfreq = tmploadadjfreq;
loadadjfreq = tmploadadjfreq
loadadjfreq
loadadjfreq
tmploadadjfreq
tmploadadjfreq
max_cpu = i;
max_cpu = i
max_cpu
max_cpu
i
i
spin_unlock_irqrestore(&ppol->load_lock, flags);
spin_unlock_irqrestore(&ppol->load_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->load_lock
ppol->load_lock
ppol
ppol
load_lock
flags
flags
for_each_cpu(i, ppol->policy->cpus)
for_each_cpu(i, ppol->policy->cpus)
for_each_cpu
for_each_cpu
i
i
ppol->policy->cpus
ppol->policy
ppol
ppol
policy
cpus
)
{		pcpu = &per_cpu(cpuinfo, i);		govinfo.cpu = i;		govinfo.load = pcpu->loadadjfreq / ppol->policy->max;		govinfo.sampling_rate_us = tunables->timer_rate;		atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,					   CPUFREQ_LOAD_CHANGE, &govinfo);	}
pcpu = &per_cpu(cpuinfo, i);
pcpu = &per_cpu(cpuinfo, i)
pcpu
pcpu
&per_cpu(cpuinfo, i)
per_cpu(cpuinfo, i)
per_cpu
per_cpu
cpuinfo
cpuinfo
i
i
govinfo.cpu = i;
govinfo.cpu = i
govinfo.cpu
govinfo
govinfo
cpu
i
i
govinfo.load = pcpu->loadadjfreq / ppol->policy->max;
govinfo.load = pcpu->loadadjfreq / ppol->policy->max
govinfo.load
govinfo
govinfo
load
pcpu->loadadjfreq / ppol->policy->max
pcpu->loadadjfreq
pcpu
pcpu
loadadjfreq
ppol->policy->max
ppol->policy
ppol
ppol
policy
max
govinfo.sampling_rate_us = tunables->timer_rate;
govinfo.sampling_rate_us = tunables->timer_rate
govinfo.sampling_rate_us
govinfo
govinfo
sampling_rate_us
tunables->timer_rate
tunables
tunables
timer_rate
atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,					   CPUFREQ_LOAD_CHANGE, &govinfo);
atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,					   CPUFREQ_LOAD_CHANGE, &govinfo)
atomic_notifier_call_chain
atomic_notifier_call_chain
&cpufreq_govinfo_notifier_list
cpufreq_govinfo_notifier_list
cpufreq_govinfo_notifier_list
CPUFREQ_LOAD_CHANGE
CPUFREQ_LOAD_CHANGE
&govinfo
govinfo
govinfo
spin_lock_irqsave(&ppol->target_freq_lock, flags);
spin_lock_irqsave(&ppol->target_freq_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
cpu_load = loadadjfreq / ppol->target_freq;
cpu_load = loadadjfreq / ppol->target_freq
cpu_load
cpu_load
loadadjfreq / ppol->target_freq
loadadjfreq
loadadjfreq
ppol->target_freq
ppol
ppol
target_freq
tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime;
tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime
tunables->boosted
tunables
tunables
boosted
tunables->boost_val || now < tunables->boostpulse_endtime
tunables->boost_val
tunables
tunables
boost_val
now < tunables->boostpulse_endtime
now
now
tunables->boostpulse_endtime
tunables
tunables
boostpulse_endtime
this_hispeed_freq = max(tunables->hispeed_freq, ppol->policy->min);
this_hispeed_freq = max(tunables->hispeed_freq, ppol->policy->min)
this_hispeed_freq
this_hispeed_freq
max(tunables->hispeed_freq, ppol->policy->min)
max
max
tunables->hispeed_freq
tunables
tunables
hispeed_freq
ppol->policy->min
ppol->policy
ppol
ppol
policy
min
if (cpu_load >= tunables->go_hispeed_load || tunables->boosted) {		if (ppol->target_freq < this_hispeed_freq &&		    cpu_load <= MAX_LOCAL_LOAD) {			new_freq = this_hispeed_freq;		} else {			new_freq = choose_freq(ppol, loadadjfreq);			if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;		}	} else {		new_freq = choose_freq(ppol, loadadjfreq);	}
cpu_load >= tunables->go_hispeed_load || tunables->boosted
cpu_load >= tunables->go_hispeed_load
cpu_load
cpu_load
tunables->go_hispeed_load
tunables
tunables
go_hispeed_load
tunables->boosted
tunables
tunables
boosted
{		if (ppol->target_freq < this_hispeed_freq &&		    cpu_load <= MAX_LOCAL_LOAD) {			new_freq = this_hispeed_freq;		} else {			new_freq = choose_freq(ppol, loadadjfreq);			if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;		}	}
if (ppol->target_freq < this_hispeed_freq &&		    cpu_load <= MAX_LOCAL_LOAD) {			new_freq = this_hispeed_freq;		} else {			new_freq = choose_freq(ppol, loadadjfreq);			if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;		}
ppol->target_freq < this_hispeed_freq &&		    cpu_load <= MAX_LOCAL_LOAD
ppol->target_freq < this_hispeed_freq
ppol->target_freq
ppol
ppol
target_freq
this_hispeed_freq
this_hispeed_freq
cpu_load <= MAX_LOCAL_LOAD
cpu_load
cpu_load
MAX_LOCAL_LOAD
MAX_LOCAL_LOAD
{			new_freq = this_hispeed_freq;		}
new_freq = this_hispeed_freq;
new_freq = this_hispeed_freq
new_freq
new_freq
this_hispeed_freq
this_hispeed_freq
{			new_freq = choose_freq(ppol, loadadjfreq);			if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;		}
new_freq = choose_freq(ppol, loadadjfreq);
new_freq = choose_freq(ppol, loadadjfreq)
new_freq
new_freq
choose_freq(ppol, loadadjfreq)
choose_freq
choose_freq
ppol
ppol
loadadjfreq
loadadjfreq
if (new_freq < this_hispeed_freq)				new_freq = this_hispeed_freq;
new_freq < this_hispeed_freq
new_freq
new_freq
this_hispeed_freq
this_hispeed_freq
new_freq = this_hispeed_freq;
new_freq = this_hispeed_freq
new_freq
new_freq
this_hispeed_freq
this_hispeed_freq
{		new_freq = choose_freq(ppol, loadadjfreq);	}
new_freq = choose_freq(ppol, loadadjfreq);
new_freq = choose_freq(ppol, loadadjfreq)
new_freq
new_freq
choose_freq(ppol, loadadjfreq)
choose_freq
choose_freq
ppol
ppol
loadadjfreq
loadadjfreq
if (cpu_load <= MAX_LOCAL_LOAD &&	    ppol->target_freq >= this_hispeed_freq &&	    new_freq > ppol->target_freq &&	    now - ppol->hispeed_validate_time <	    freq_to_above_hispeed_delay(tunables, ppol->target_freq)) {		trace_cpufreq_interactive_notyet(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
cpu_load <= MAX_LOCAL_LOAD &&	    ppol->target_freq >= this_hispeed_freq &&	    new_freq > ppol->target_freq &&	    now - ppol->hispeed_validate_time <	    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
cpu_load <= MAX_LOCAL_LOAD &&	    ppol->target_freq >= this_hispeed_freq &&	    new_freq > ppol->target_freq
cpu_load <= MAX_LOCAL_LOAD &&	    ppol->target_freq >= this_hispeed_freq
cpu_load <= MAX_LOCAL_LOAD
cpu_load
cpu_load
MAX_LOCAL_LOAD
MAX_LOCAL_LOAD
ppol->target_freq >= this_hispeed_freq
ppol->target_freq
ppol
ppol
target_freq
this_hispeed_freq
this_hispeed_freq
new_freq > ppol->target_freq
new_freq
new_freq
ppol->target_freq
ppol
ppol
target_freq
now - ppol->hispeed_validate_time <	    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
now - ppol->hispeed_validate_time
now
now
ppol->hispeed_validate_time
ppol
ppol
hispeed_validate_time
freq_to_above_hispeed_delay(tunables, ppol->target_freq)
freq_to_above_hispeed_delay
freq_to_above_hispeed_delay
tunables
tunables
ppol->target_freq
ppol
ppol
target_freq
{		trace_cpufreq_interactive_notyet(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
trace_cpufreq_interactive_notyet(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);
trace_cpufreq_interactive_notyet(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq)
trace_cpufreq_interactive_notyet
trace_cpufreq_interactive_notyet
max_cpu
max_cpu
cpu_load
cpu_load
ppol->target_freq
ppol
ppol
target_freq
ppol->policy->cur
ppol->policy
ppol
ppol
policy
cur
new_freq
new_freq
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
goto rearm;
rearm
ppol->hispeed_validate_time = now;
ppol->hispeed_validate_time = now
ppol->hispeed_validate_time
ppol
ppol
hispeed_validate_time
now
now
if (cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,					   new_freq, CPUFREQ_RELATION_L,					   &index)) {		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,					   new_freq, CPUFREQ_RELATION_L,					   &index)
cpufreq_frequency_table_target
cpufreq_frequency_table_target
ppol->policy
ppol
ppol
policy
ppol->freq_table
ppol
ppol
freq_table
new_freq
new_freq
CPUFREQ_RELATION_L
CPUFREQ_RELATION_L
&index
index
index
{		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
goto rearm;
rearm
new_freq = ppol->freq_table[index].frequency;
new_freq = ppol->freq_table[index].frequency
new_freq
new_freq
ppol->freq_table[index].frequency
ppol->freq_table[index]
ppol->freq_table
ppol
ppol
freq_table
index
index
frequency
if (new_freq < ppol->target_freq &&	    now - ppol->max_freq_hyst_start_time <	    tunables->max_freq_hysteresis) {		trace_cpufreq_interactive_notyet(max_cpu, cpu_load,			ppol->target_freq, ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
new_freq < ppol->target_freq &&	    now - ppol->max_freq_hyst_start_time <	    tunables->max_freq_hysteresis
new_freq < ppol->target_freq
new_freq
new_freq
ppol->target_freq
ppol
ppol
target_freq
now - ppol->max_freq_hyst_start_time <	    tunables->max_freq_hysteresis
now - ppol->max_freq_hyst_start_time
now
now
ppol->max_freq_hyst_start_time
ppol
ppol
max_freq_hyst_start_time
tunables->max_freq_hysteresis
tunables
tunables
max_freq_hysteresis
{		trace_cpufreq_interactive_notyet(max_cpu, cpu_load,			ppol->target_freq, ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
trace_cpufreq_interactive_notyet(max_cpu, cpu_load,			ppol->target_freq, ppol->policy->cur, new_freq);
trace_cpufreq_interactive_notyet(max_cpu, cpu_load,			ppol->target_freq, ppol->policy->cur, new_freq)
trace_cpufreq_interactive_notyet
trace_cpufreq_interactive_notyet
max_cpu
max_cpu
cpu_load
cpu_load
ppol->target_freq
ppol
ppol
target_freq
ppol->policy->cur
ppol->policy
ppol
ppol
policy
cur
new_freq
new_freq
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
goto rearm;
rearm
if (new_freq < ppol->floor_freq) {		if (now - ppol->floor_validate_time <				tunables->min_sample_time) {			trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			goto rearm;		}	}
new_freq < ppol->floor_freq
new_freq
new_freq
ppol->floor_freq
ppol
ppol
floor_freq
{		if (now - ppol->floor_validate_time <				tunables->min_sample_time) {			trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			goto rearm;		}	}
if (now - ppol->floor_validate_time <				tunables->min_sample_time) {			trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			goto rearm;		}
now - ppol->floor_validate_time <				tunables->min_sample_time
now - ppol->floor_validate_time
now
now
ppol->floor_validate_time
ppol
ppol
floor_validate_time
tunables->min_sample_time
tunables
tunables
min_sample_time
{			trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			goto rearm;		}
trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq);
trace_cpufreq_interactive_notyet(				max_cpu, cpu_load, ppol->target_freq,				ppol->policy->cur, new_freq)
trace_cpufreq_interactive_notyet
trace_cpufreq_interactive_notyet
max_cpu
max_cpu
cpu_load
cpu_load
ppol->target_freq
ppol
ppol
target_freq
ppol->policy->cur
ppol->policy
ppol
ppol
policy
cur
new_freq
new_freq
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
goto rearm;
rearm
if (!tunables->boosted || new_freq > this_hispeed_freq) {		ppol->floor_freq = new_freq;		ppol->floor_validate_time = now;	}
!tunables->boosted || new_freq > this_hispeed_freq
!tunables->boosted
tunables->boosted
tunables
tunables
boosted
new_freq > this_hispeed_freq
new_freq
new_freq
this_hispeed_freq
this_hispeed_freq
{		ppol->floor_freq = new_freq;		ppol->floor_validate_time = now;	}
ppol->floor_freq = new_freq;
ppol->floor_freq = new_freq
ppol->floor_freq
ppol
ppol
floor_freq
new_freq
new_freq
ppol->floor_validate_time = now;
ppol->floor_validate_time = now
ppol->floor_validate_time
ppol
ppol
floor_validate_time
now
now
if (new_freq == ppol->policy->max)		ppol->max_freq_hyst_start_time = now;
new_freq == ppol->policy->max
new_freq
new_freq
ppol->policy->max
ppol->policy
ppol
ppol
policy
max
ppol->max_freq_hyst_start_time = now;
ppol->max_freq_hyst_start_time = now
ppol->max_freq_hyst_start_time
ppol
ppol
max_freq_hyst_start_time
now
now
if (ppol->target_freq == new_freq) {		trace_cpufreq_interactive_already(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
ppol->target_freq == new_freq
ppol->target_freq
ppol
ppol
target_freq
new_freq
new_freq
{		trace_cpufreq_interactive_already(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);		spin_unlock_irqrestore(&ppol->target_freq_lock, flags);		goto rearm;	}
trace_cpufreq_interactive_already(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq);
trace_cpufreq_interactive_already(			max_cpu, cpu_load, ppol->target_freq,			ppol->policy->cur, new_freq)
trace_cpufreq_interactive_already
trace_cpufreq_interactive_already
max_cpu
max_cpu
cpu_load
cpu_load
ppol->target_freq
ppol
ppol
target_freq
ppol->policy->cur
ppol->policy
ppol
ppol
policy
cur
new_freq
new_freq
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
goto rearm;
rearm
trace_cpufreq_interactive_target(max_cpu, cpu_load, ppol->target_freq,					 ppol->policy->cur, new_freq);
trace_cpufreq_interactive_target(max_cpu, cpu_load, ppol->target_freq,					 ppol->policy->cur, new_freq)
trace_cpufreq_interactive_target
trace_cpufreq_interactive_target
max_cpu
max_cpu
cpu_load
cpu_load
ppol->target_freq
ppol
ppol
target_freq
ppol->policy->cur
ppol->policy
ppol
ppol
policy
cur
new_freq
new_freq
ppol->target_freq = new_freq;
ppol->target_freq = new_freq
ppol->target_freq
ppol
ppol
target_freq
new_freq
new_freq
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
spin_lock_irqsave(&speedchange_cpumask_lock, flags);
spin_lock_irqsave(&speedchange_cpumask_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&speedchange_cpumask_lock
speedchange_cpumask_lock
speedchange_cpumask_lock
flags
flags
cpumask_set_cpu(max_cpu, &speedchange_cpumask);
cpumask_set_cpu(max_cpu, &speedchange_cpumask)
cpumask_set_cpu
cpumask_set_cpu
max_cpu
max_cpu
&speedchange_cpumask
speedchange_cpumask
speedchange_cpumask
spin_unlock_irqrestore(&speedchange_cpumask_lock, flags);
spin_unlock_irqrestore(&speedchange_cpumask_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&speedchange_cpumask_lock
speedchange_cpumask_lock
speedchange_cpumask_lock
flags
flags
wake_up_process(speedchange_task);
wake_up_process(speedchange_task);
wake_up_process
wake_up_process
(speedchange_task)
speedchange_task
speedchange_task
rearm:	if (!timer_pending(&ppol->policy_timer))		cpufreq_interactive_timer_resched(data, false);
rearm
if (!timer_pending(&ppol->policy_timer))		cpufreq_interactive_timer_resched(data, false);
!timer_pending(&ppol->policy_timer)
timer_pending(&ppol->policy_timer)
timer_pending
timer_pending
&ppol->policy_timer
ppol->policy_timer
ppol
ppol
policy_timer
cpufreq_interactive_timer_resched(data, false);
cpufreq_interactive_timer_resched(data, false)
cpufreq_interactive_timer_resched
cpufreq_interactive_timer_resched
data
data
false
exit:	up_read(&ppol->enable_sem);
exit
up_read(&ppol->enable_sem);
up_read(&ppol->enable_sem)
up_read
up_read
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
return;
-----joern-----
(31,451,0)
(617,478,0)
(476,261,0)
(516,426,0)
(370,29,0)
(580,288,0)
(445,439,0)
(564,165,0)
(583,113,0)
(86,291,0)
(553,243,0)
(368,165,0)
(81,482,0)
(187,243,0)
(440,284,0)
(604,490,0)
(469,244,0)
(596,68,0)
(28,78,0)
(15,289,0)
(162,354,0)
(520,225,0)
(261,296,0)
(330,467,0)
(527,11,0)
(390,249,0)
(576,243,0)
(603,270,0)
(451,243,0)
(73,155,0)
(42,497,0)
(228,264,0)
(48,270,0)
(74,454,0)
(339,506,0)
(386,560,0)
(231,314,0)
(77,227,0)
(170,192,0)
(295,507,0)
(309,368,0)
(559,604,0)
(607,243,0)
(334,436,0)
(118,178,0)
(440,571,0)
(145,617,0)
(308,207,0)
(363,607,0)
(29,370,0)
(78,136,0)
(397,129,0)
(625,444,0)
(132,196,0)
(426,607,0)
(530,413,0)
(504,232,0)
(379,439,0)
(537,184,0)
(309,266,0)
(82,291,0)
(489,278,0)
(91,592,0)
(550,75,0)
(122,324,0)
(614,138,0)
(165,399,0)
(274,176,0)
(250,288,0)
(443,607,0)
(599,378,0)
(115,187,0)
(49,270,0)
(555,243,0)
(116,618,0)
(598,85,0)
(279,504,0)
(378,607,0)
(276,607,0)
(142,7,0)
(77,625,0)
(396,277,0)
(192,270,0)
(356,605,0)
(415,584,0)
(565,486,0)
(267,399,0)
(271,339,0)
(380,485,0)
(26,505,0)
(468,346,0)
(306,402,0)
(210,243,0)
(70,243,0)
(359,140,0)
(618,116,0)
(601,502,0)
(197,615,0)
(49,578,0)
(176,167,0)
(11,270,0)
(108,402,0)
(610,196,0)
(590,607,0)
(209,602,0)
(466,436,0)
(1,567,0)
(408,513,0)
(9,185,0)
(55,598,0)
(244,103,0)
(95,405,0)
(223,505,0)
(610,175,0)
(211,309,0)
(67,345,0)
(431,460,0)
(563,192,0)
(394,614,0)
(163,289,0)
(87,222,0)
(77,368,0)
(68,596,0)
(311,497,0)
(128,287,0)
(285,181,0)
(565,544,0)
(181,270,0)
(332,413,0)
(57,109,0)
(592,91,0)
(558,19,0)
(622,439,0)
(41,450,0)
(514,460,0)
(387,228,0)
(169,402,0)
(63,18,0)
(395,428,0)
(440,324,0)
(389,225,0)
(159,246,0)
(609,435,0)
(351,45,0)
(490,604,0)
(313,100,0)
(603,38,0)
(275,502,0)
(319,399,0)
(111,444,0)
(475,512,0)
(591,243,0)
(308,270,0)
(257,533,0)
(407,308,0)
(557,355,0)
(577,622,0)
(222,236,0)
(597,187,0)
(287,607,0)
(285,166,0)
(506,339,0)
(317,607,0)
(395,31,0)
(177,604,0)
(478,617,0)
(331,495,0)
(273,454,0)
(454,165,0)
(602,209,0)
(20,270,0)
(428,270,0)
(156,270,0)
(523,565,0)
(585,213,0)
(134,394,0)
(609,207,0)
(110,618,0)
(264,228,0)
(244,177,0)
(143,224,0)
(291,82,0)
(290,385,0)
(249,234,0)
(416,571,0)
(95,607,0)
(176,91,0)
(251,492,0)
(208,132,0)
(439,243,0)
(570,270,0)
(67,116,0)
(413,485,0)
(6,85,0)
(13,150,0)
(116,67,0)
(362,227,0)
(474,604,0)
(357,270,0)
(506,189,0)
(249,167,0)
(98,91,0)
(41,583,0)
(377,590,0)
(230,433,0)
(568,548,0)
(178,436,0)
(482,475,0)
(469,597,0)
(470,131,0)
(525,243,0)
(306,485,0)
(290,607,0)
(615,368,0)
(144,570,0)
(143,399,0)
(85,6,0)
(185,270,0)
(327,312,0)
(200,332,0)
(290,113,0)
(579,309,0)
(12,342,0)
(175,243,0)
(153,474,0)
(433,270,0)
(444,625,0)
(556,49,0)
(422,297,0)
(565,392,0)
(214,347,0)
(562,597,0)
(246,270,0)
(47,130,0)
(360,434,0)
(522,269,0)
(400,66,0)
(505,223,0)
(59,532,0)
(344,243,0)
(573,274,0)
(72,187,0)
(315,77,0)
(314,231,0)
(296,261,0)
(347,607,0)
(269,68,0)
(325,577,0)
(158,243,0)
(89,334,0)
(571,440,0)
(544,565,0)
(129,323,0)
(160,495,0)
(80,243,0)
(99,548,0)
(272,269,0)
(474,13,0)
(75,270,0)
(97,282,0)
(223,513,0)
(216,347,0)
(53,48,0)
(336,344,0)
(478,485,0)
(512,450,0)
(612,366,0)
(283,306,0)
(91,176,0)
(35,130,0)
(10,435,0)
(378,216,0)
(565,234,0)
(549,544,0)
(51,8,0)
(385,287,0)
(362,243,0)
(480,243,0)
(370,243,0)
(307,243,0)
(259,264,0)
(494,24,0)
(46,185,0)
(215,622,0)
(121,571,0)
(263,45,0)
(41,512,0)
(186,249,0)
(129,227,0)
(581,270,0)
(5,227,0)
(515,264,0)
(279,607,0)
(503,265,0)
(84,284,0)
(286,607,0)
(274,436,0)
(559,363,0)
(383,181,0)
(442,436,0)
(350,319,0)
(461,617,0)
(583,607,0)
(519,605,0)
(430,357,0)
(120,565,0)
(220,593,0)
(380,486,0)
(366,370,0)
(365,622,0)
(32,490,0)
(428,395,0)
(147,227,0)
(155,187,0)
(544,270,0)
(180,381,0)
(575,290,0)
(577,610,0)
(434,77,0)
(374,131,0)
(131,605,0)
(282,270,0)
(403,243,0)
(189,506,0)
(69,504,0)
(513,270,0)
(2,395,0)
(491,392,0)
(539,583,0)
(552,225,0)
(340,162,0)
(27,11,0)
(615,587,0)
(242,79,0)
(112,592,0)
(284,440,0)
(207,308,0)
(274,604,0)
(609,368,0)
(577,251,0)
(152,139,0)
(255,113,0)
(548,270,0)
(6,243,0)
(195,92,0)
(268,226,0)
(342,458,0)
(537,436,0)
(598,270,0)
(224,143,0)
(284,296,0)
(251,458,0)
(183,191,0)
(590,385,0)
(483,532,0)
(69,607,0)
(304,115,0)
(546,16,0)
(623,368,0)
(154,355,0)
(48,73,0)
(456,143,0)
(131,270,0)
(187,82,0)
(367,255,0)
(437,189,0)
(548,568,0)
(225,520,0)
(162,270,0)
(83,428,0)
(141,362,0)
(246,399,0)
(475,482,0)
(542,570,0)
(324,440,0)
(246,486,0)
(425,528,0)
(355,507,0)
(90,380,0)
(392,485,0)
(525,318,0)
(511,308,0)
(284,84,0)
(333,581,0)
(105,175,0)
(20,427,0)
(321,417,0)
(178,104,0)
(207,609,0)
(609,224,0)
(201,590,0)
(605,187,0)
(421,399,0)
(8,270,0)
(349,512,0)
(596,243,0)
(387,191,0)
(540,312,0)
(447,533,0)
(298,562,0)
(235,548,0)
(438,567,0)
(502,526,0)
(173,581,0)
(174,243,0)
(384,341,0)
(192,219,0)
(388,246,0)
(56,458,0)
(249,390,0)
(609,234,0)
(448,8,0)
(497,386,0)
(237,413,0)
(102,434,0)
(375,103,0)
(567,270,0)
(532,222,0)
(234,39,0)
(382,387,0)
(204,243,0)
(115,368,0)
(492,439,0)
(588,445,0)
(460,531,0)
(326,210,0)
(369,444,0)
(499,63,0)
(323,243,0)
(534,615,0)
(17,392,0)
(517,598,0)
(559,232,0)
(589,318,0)
(458,342,0)
(310,261,0)
(323,18,0)
(503,203,0)
(301,625,0)
(19,187,0)
(262,426,0)
(609,227,0)
(505,114,0)
(347,216,0)
(291,449,0)
(277,270,0)
(423,255,0)
(7,604,0)
(568,465,0)
(462,114,0)
(182,20,0)
(417,607,0)
(504,243,0)
(184,537,0)
(533,270,0)
(249,486,0)
(177,244,0)
(521,485,0)
(212,136,0)
(198,306,0)
(77,187,0)
(485,243,0)
(475,295,0)
(38,603,0)
(165,454,0)
(63,277,0)
(578,478,0)
(100,270,0)
(294,243,0)
(578,49,0)
(124,310,0)
(19,567,0)
(526,502,0)
(138,167,0)
(52,178,0)
(45,157,0)
(209,243,0)
(62,587,0)
(335,609,0)
(117,129,0)
(218,295,0)
(270,139,0)
(453,13,0)
(453,507,0)
(560,386,0)
(115,371,0)
(279,200,0)
(265,243,0)
(486,246,0)
(570,79,0)
(529,562,0)
(115,533,0)
(77,323,0)
(194,221,0)
(129,368,0)
(471,185,0)
(240,115,0)
(565,120,0)
(452,243,0)
(288,310,0)
(363,559,0)
(8,231,0)
(312,379,0)
(399,243,0)
(361,6,0)
(233,577,0)
(562,270,0)
(135,603,0)
(290,379,0)
(125,77,0)
(427,344,0)
(188,390,0)
(219,192,0)
(362,140,0)
(93,109,0)
(324,270,0)
(532,607,0)
(398,604,0)
(216,378,0)
(82,187,0)
(584,417,0)
(255,607,0)
(66,243,0)
(244,469,0)
(344,427,0)
(463,343,0)
(9,78,0)
(614,485,0)
(524,317,0)
(101,342,0)
(198,289,0)
(221,317,0)
(615,197,0)
(167,176,0)
(167,249,0)
(115,323,0)
(251,577,0)
(581,418,0)
(318,525,0)
(248,405,0)
(341,226,0)
(420,69,0)
(278,216,0)
(296,512,0)
(249,392,0)
(372,243,0)
(481,287,0)
(21,175,0)
(376,77,0)
(609,486,0)
(410,157,0)
(455,279,0)
(405,300,0)
(449,270,0)
(305,597,0)
(33,41,0)
(100,7,0)
(328,279,0)
(139,50,0)
(172,322,0)
(531,93,0)
(379,290,0)
(264,270,0)
(565,357,0)
(412,544,0)
(129,79,0)
(322,445,0)
(426,569,0)
(393,449,0)
(391,87,0)
(604,507,0)
(296,284,0)
(231,243,0)
(587,607,0)
(79,129,0)
(287,385,0)
(276,504,0)
(229,24,0)
(73,48,0)
(222,87,0)
(343,531,0)
(129,24,0)
(228,387,0)
(132,496,0)
(179,243,0)
(146,132,0)
(605,368,0)
(586,243,0)
(429,139,0)
(226,341,0)
(346,232,0)
(277,63,0)
(252,196,0)
(567,19,0)
(254,583,0)
(493,234,0)
(355,453,0)
(432,69,0)
(492,251,0)
(317,221,0)
(166,457,0)
(446,20,0)
(341,270,0)
(501,357,0)
(602,75,0)
(500,129,0)
(138,614,0)
(245,347,0)
(442,604,0)
(354,162,0)
(617,607,0)
(69,197,0)
(78,9,0)
(247,100,0)
(467,442,0)
(129,424,0)
(535,243,0)
(210,326,0)
(572,282,0)
(0,243,0)
(113,236,0)
(605,227,0)
(91,607,0)
(165,368,0)
(479,243,0)
(394,270,0)
(3,346,0)
(533,115,0)
(510,486,0)
(619,319,0)
(177,436,0)
(449,291,0)
(609,136,0)
(266,309,0)
(306,198,0)
(38,520,0)
(566,453,0)
(352,320,0)
(22,404,0)
(130,50,0)
(559,436,0)
(419,187,0)
(551,243,0)
(418,187,0)
(227,496,0)
(43,433,0)
(583,41,0)
(36,378,0)
(526,115,0)
(427,20,0)
(594,513,0)
(197,69,0)
(232,346,0)
(278,370,0)
(464,525,0)
(569,7,0)
(536,115,0)
(143,132,0)
(451,31,0)
(531,175,0)
(310,288,0)
(148,445,0)
(289,198,0)
(435,609,0)
(495,419,0)
(260,587,0)
(96,143,0)
(454,270,0)
(435,270,0)
(300,405,0)
(560,424,0)
(149,609,0)
(11,334,0)
(520,38,0)
(161,177,0)
(58,109,0)
(411,320,0)
(441,16,0)
(93,531,0)
(113,584,0)
(621,341,0)
(226,605,0)
(606,75,0)
(196,175,0)
(200,279,0)
(295,460,0)
(348,435,0)
(288,270,0)
(565,224,0)
(202,52,0)
(60,418,0)
(605,243,0)
(484,82,0)
(497,270,0)
(444,270,0)
(66,354,0)
(107,243,0)
(587,615,0)
(475,54,0)
(258,593,0)
(165,132,0)
(87,607,0)
(373,87,0)
(346,607,0)
(253,380,0)
(605,226,0)
(164,243,0)
(206,48,0)
(88,243,0)
(609,392,0)
(502,270,0)
(358,339,0)
(543,243,0)
(362,323,0)
(457,166,0)
(569,426,0)
(171,507,0)
(319,196,0)
(4,207,0)
(554,442,0)
(538,428,0)
(274,282,0)
(316,370,0)
(390,270,0)
(155,73,0)
(40,417,0)
(584,113,0)
(119,286,0)
(199,276,0)
(54,475,0)
(413,187,0)
(94,605,0)
(16,492,0)
(605,323,0)
(413,332,0)
(498,243,0)
(190,326,0)
(79,570,0)
(76,451,0)
(25,363,0)
(151,603,0)
(486,92,0)
(343,474,0)
(458,251,0)
(459,120,0)
(18,323,0)
(508,224,0)
(402,306,0)
(75,602,0)
(509,243,0)
(472,565,0)
(609,323,0)
(196,482,0)
(261,310,0)
(133,243,0)
(77,191,0)
(299,424,0)
(302,592,0)
(406,221,0)
(300,366,0)
(239,73,0)
(129,187,0)
(518,155,0)
(269,270,0)
(337,528,0)
(545,578,0)
(103,244,0)
(465,175,0)
(157,439,0)
(445,322,0)
(365,381,0)
(608,610,0)
(366,300,0)
(13,453,0)
(234,485,0)
(613,609,0)
(434,270,0)
(7,569,0)
(126,363,0)
(418,104,0)
(477,49,0)
(478,578,0)
(605,131,0)
(289,368,0)
(614,394,0)
(34,465,0)
(419,243,0)
(193,162,0)
(64,209,0)
(106,419,0)
(404,607,0)
(401,526,0)
(329,103,0)
(18,63,0)
(137,559,0)
(178,604,0)
(482,196,0)
(281,95,0)
(433,177,0)
(241,234,0)
(7,436,0)
(37,258,0)
(541,531,0)
(607,317,0)
(513,223,0)
(61,614,0)
(238,568,0)
(320,453,0)
(24,129,0)
(488,290,0)
(442,243,0)
(417,584,0)
(258,187,0)
(71,95,0)
(249,224,0)
(185,9,0)
(357,565,0)
(334,604,0)
(109,93,0)
(386,497,0)
(414,276,0)
(166,285,0)
(624,243,0)
(353,371,0)
(445,588,0)
(221,270,0)
(620,467,0)
(625,77,0)
(528,531,0)
(622,365,0)
(574,210,0)
(292,52,0)
(474,343,0)
(332,200,0)
(571,451,0)
(593,270,0)
(246,132,0)
(487,286,0)
(405,95,0)
(270,243,0)
(77,434,0)
(355,295,0)
(597,469,0)
(364,561,0)
(85,598,0)
(14,618,0)
(150,13,0)
(297,243,0)
(65,560,0)
(342,270,0)
(600,324,0)
(339,270,0)
(139,270,0)
(216,278,0)
(68,269,0)
(256,243,0)
(103,607,0)
(547,343,0)
(473,243,0)
(280,390,0)
(436,243,0)
(138,266,0)
(381,365,0)
(13,474,0)
(123,404,0)
(24,270,0)
(224,582,0)
(616,381,0)
(293,323,0)
(368,243,0)
(402,270,0)
(512,296,0)
(467,270,0)
(232,559,0)
(465,568,0)
(176,274,0)
(181,285,0)
(167,138,0)
(303,449,0)
(31,395,0)
(52,270,0)
(583,385,0)
(115,227,0)
(460,295,0)
(320,411,0)
(30,243,0)
(618,270,0)
(595,475,0)
(597,562,0)
(592,270,0)
(232,504,0)
(485,478,0)
(127,277,0)
(282,274,0)
(528,610,0)
(205,394,0)
(189,371,0)
(7,100,0)
(23,588,0)
(345,67,0)
(140,362,0)
(611,243,0)
(143,270,0)
(266,138,0)
(593,258,0)
(44,38,0)
(115,526,0)
(217,181,0)
(354,66,0)
(495,270,0)
(225,270,0)
(436,537,0)
(177,433,0)
(409,593,0)
(568,196,0)
(521,504,1)
(130,50,1)
(206,518,1)
(196,482,1)
(434,270,1)
(101,12,1)
(74,564,1)
(455,258,1)
(417,40,1)
(466,451,1)
(275,533,1)
(46,471,1)
(48,53,1)
(221,406,1)
(352,453,1)
(394,134,1)
(303,393,1)
(609,323,1)
(263,351,1)
(559,436,1)
(393,72,1)
(400,354,1)
(423,222,1)
(264,270,1)
(241,493,1)
(115,526,1)
(366,612,1)
(267,607,1)
(190,362,1)
(601,275,1)
(278,489,1)
(617,607,1)
(165,399,1)
(494,229,1)
(85,598,1)
(95,607,1)
(292,202,1)
(341,384,1)
(223,513,1)
(56,342,1)
(64,602,1)
(77,187,1)
(252,41,1)
(477,556,1)
(103,607,1)
(432,420,1)
(167,176,1)
(381,616,1)
(618,110,1)
(550,606,1)
(399,421,1)
(354,162,1)
(291,449,1)
(597,187,1)
(177,436,1)
(460,531,1)
(48,270,1)
(320,453,1)
(67,116,1)
(317,221,1)
(282,572,1)
(571,451,1)
(414,199,1)
(469,244,1)
(95,281,1)
(41,583,1)
(209,602,1)
(533,257,1)
(249,390,1)
(581,173,1)
(379,290,1)
(557,295,1)
(115,368,1)
(378,599,1)
(232,346,1)
(173,333,1)
(419,187,1)
(544,270,1)
(249,224,1)
(276,414,1)
(8,270,1)
(4,308,1)
(614,61,1)
(209,64,1)
(492,251,1)
(524,221,1)
(358,271,1)
(285,181,1)
(526,401,1)
(334,436,1)
(258,593,1)
(610,608,1)
(66,354,1)
(90,486,1)
(201,278,1)
(149,266,1)
(224,143,1)
(210,574,1)
(491,380,1)
(131,470,1)
(474,343,1)
(505,26,1)
(456,96,1)
(559,363,1)
(338,411,1)
(438,155,1)
(237,200,1)
(458,56,1)
(291,86,1)
(405,248,1)
(221,270,1)
(49,477,1)
(116,618,1)
(45,263,1)
(580,284,1)
(203,345,1)
(482,475,1)
(172,148,1)
(605,323,1)
(572,97,1)
(225,552,1)
(483,300,1)
(442,604,1)
(143,456,1)
(546,441,1)
(328,455,1)
(290,607,1)
(451,31,1)
(309,579,1)
(444,270,1)
(115,533,1)
(248,95,1)
(402,169,1)
(443,270,1)
(286,487,1)
(428,538,1)
(78,9,1)
(615,587,1)
(261,476,1)
(474,604,1)
(449,270,1)
(249,486,1)
(405,95,1)
(503,265,1)
(169,108,1)
(383,299,1)
(60,581,1)
(284,84,1)
(182,436,1)
(570,270,1)
(565,234,1)
(413,187,1)
(29,316,1)
(584,417,1)
(481,128,1)
(565,392,1)
(290,113,1)
(91,592,1)
(185,46,1)
(406,194,1)
(322,172,1)
(410,45,1)
(495,270,1)
(366,370,1)
(27,527,1)
(605,368,1)
(2,428,1)
(82,484,1)
(79,570,1)
(159,388,1)
(160,605,1)
(168,219,1)
(262,7,1)
(227,5,1)
(415,417,1)
(129,117,1)
(577,325,1)
(69,504,1)
(115,187,1)
(430,442,1)
(270,139,1)
(421,267,1)
(272,457,1)
(569,7,1)
(216,347,1)
(607,317,1)
(288,250,1)
(347,245,1)
(140,359,1)
(593,270,1)
(540,327,1)
(445,588,1)
(290,385,1)
(385,287,1)
(604,490,1)
(239,48,1)
(394,270,1)
(13,474,1)
(376,625,1)
(482,81,1)
(457,166,1)
(411,320,1)
(187,82,1)
(331,160,1)
(343,547,1)
(347,607,1)
(605,94,1)
(547,463,1)
(115,536,1)
(487,119,1)
(603,270,1)
(396,127,1)
(230,161,1)
(129,24,1)
(260,62,1)
(244,103,1)
(71,366,1)
(177,433,1)
(446,182,1)
(143,132,1)
(52,270,1)
(108,197,1)
(135,151,1)
(534,485,1)
(577,622,1)
(516,262,1)
(386,497,1)
(375,329,1)
(404,607,1)
(548,270,1)
(357,501,1)
(141,525,1)
(118,52,1)
(137,346,1)
(57,58,1)
(129,79,1)
(359,141,1)
(269,270,1)
(44,603,1)
(503,203,1)
(103,375,1)
(225,270,1)
(609,368,1)
(106,495,1)
(437,506,1)
(304,19,1)
(69,432,1)
(198,289,1)
(339,270,1)
(343,531,1)
(387,382,1)
(326,190,1)
(589,209,1)
(583,113,1)
(341,270,1)
(254,539,1)
(9,185,1)
(197,69,1)
(602,75,1)
(38,603,1)
(383,212,1)
(530,237,1)
(465,568,1)
(565,486,1)
(41,512,1)
(194,443,1)
(609,435,1)
(398,286,1)
(412,357,1)
(609,224,1)
(416,121,1)
(68,269,1)
(310,124,1)
(271,115,1)
(284,440,1)
(625,444,1)
(598,55,1)
(163,306,1)
(246,132,1)
(344,427,1)
(470,374,1)
(538,83,1)
(434,102,1)
(207,4,1)
(22,300,1)
(609,227,1)
(216,378,1)
(362,323,1)
(202,418,1)
(246,399,1)
(246,159,1)
(177,604,1)
(484,291,1)
(468,276,1)
(25,137,1)
(499,277,1)
(226,268,1)
(528,531,1)
(605,131,1)
(274,282,1)
(259,515,1)
(240,304,1)
(22,385,1)
(19,558,1)
(495,331,1)
(142,258,1)
(55,517,1)
(564,623,1)
(605,227,1)
(189,437,1)
(77,376,1)
(3,468,1)
(373,532,1)
(319,399,1)
(514,431,1)
(565,224,1)
(301,444,1)
(532,59,1)
(596,68,1)
(43,230,1)
(528,425,1)
(569,426,1)
(6,85,1)
(594,565,1)
(109,57,1)
(7,604,1)
(308,270,1)
(355,154,1)
(197,615,1)
(277,396,1)
(357,270,1)
(38,44,1)
(620,266,1)
(583,607,1)
(560,386,1)
(378,607,1)
(512,296,1)
(266,138,1)
(96,508,1)
(449,303,1)
(380,486,1)
(581,270,1)
(600,122,1)
(467,270,1)
(556,617,1)
(615,368,1)
(94,226,1)
(76,219,1)
(520,38,1)
(200,279,1)
(475,54,1)
(75,550,1)
(8,51,1)
(249,392,1)
(390,270,1)
(77,625,1)
(515,77,1)
(296,284,1)
(165,454,1)
(485,478,1)
(100,270,1)
(447,240,1)
(489,231,1)
(478,617,1)
(351,622,1)
(298,529,1)
(264,259,1)
(26,223,1)
(486,246,1)
(428,270,1)
(404,123,1)
(220,409,1)
(319,350,1)
(593,220,1)
(166,285,1)
(587,260,1)
(131,270,1)
(565,544,1)
(504,232,1)
(522,272,1)
(198,306,1)
(565,357,1)
(340,193,1)
(442,554,1)
(549,412,1)
(18,63,1)
(435,270,1)
(539,33,1)
(165,132,1)
(192,270,1)
(518,332,1)
(143,270,1)
(448,344,1)
(475,295,1)
(313,247,1)
(342,270,1)
(325,233,1)
(11,27,1)
(289,15,1)
(35,457,1)
(143,399,1)
(382,228,1)
(87,607,1)
(532,607,1)
(229,500,1)
(36,347,1)
(356,19,1)
(320,352,1)
(113,584,1)
(610,196,1)
(348,10,1)
(81,475,1)
(318,589,1)
(587,607,1)
(15,163,1)
(554,467,1)
(232,559,1)
(300,405,1)
(162,270,1)
(247,142,1)
(181,217,1)
(342,101,1)
(98,274,1)
(324,270,1)
(502,601,1)
(120,459,1)
(407,511,1)
(402,270,1)
(606,419,1)
(579,211,1)
(49,270,1)
(265,596,1)
(93,109,1)
(249,234,1)
(469,597,1)
(144,24,1)
(280,188,1)
(138,614,1)
(286,607,1)
(58,541,1)
(500,397,1)
(525,318,1)
(390,280,1)
(251,458,1)
(217,383,1)
(5,147,1)
(53,206,1)
(444,111,1)
(302,98,1)
(153,566,1)
(339,358,1)
(266,309,1)
(463,153,1)
(472,544,1)
(367,423,1)
(208,146,1)
(360,125,1)
(612,278,1)
(250,580,1)
(598,270,1)
(192,170,1)
(235,238,1)
(335,207,1)
(24,270,1)
(127,293,1)
(300,366,1)
(77,368,1)
(273,74,1)
(590,377,1)
(145,521,1)
(278,370,1)
(89,11,1)
(609,207,1)
(129,187,1)
(277,270,1)
(82,291,1)
(349,286,1)
(299,560,1)
(329,177,1)
(128,590,1)
(75,270,1)
(155,187,1)
(279,607,1)
(565,120,1)
(20,446,1)
(599,36,1)
(453,13,1)
(176,91,1)
(609,335,1)
(148,588,1)
(308,407,1)
(548,99,1)
(578,545,1)
(205,309,1)
(211,224,1)
(531,93,1)
(278,216,1)
(537,184,1)
(623,6,1)
(6,361,1)
(73,239,1)
(40,321,1)
(316,399,1)
(125,315,1)
(544,549,1)
(176,274,1)
(37,469,1)
(102,360,1)
(272,130,1)
(72,565,1)
(311,129,1)
(438,334,1)
(161,597,1)
(274,436,1)
(397,569,1)
(440,571,1)
(178,604,1)
(199,368,1)
(517,445,1)
(100,313,1)
(445,322,1)
(560,65,1)
(122,349,1)
(123,22,1)
(552,389,1)
(309,368,1)
(19,187,1)
(251,577,1)
(493,198,1)
(207,308,1)
(283,402,1)
(185,270,1)
(272,168,1)
(52,292,1)
(295,460,1)
(458,342,1)
(332,413,1)
(568,548,1)
(395,428,1)
(355,295,1)
(344,336,1)
(595,252,1)
(418,187,1)
(212,78,1)
(609,392,1)
(520,225,1)
(129,323,1)
(583,385,1)
(440,324,1)
(112,302,1)
(584,415,1)
(387,228,1)
(502,270,1)
(442,436,1)
(23,379,1)
(527,155,1)
(152,156,1)
(592,270,1)
(559,604,1)
(433,43,1)
(252,355,1)
(345,67,1)
(269,522,1)
(383,462,1)
(24,494,1)
(306,402,1)
(139,429,1)
(63,499,1)
(61,394,1)
(287,607,1)
(526,502,1)
(383,297,1)
(350,619,1)
(129,368,1)
(363,126,1)
(590,607,1)
(542,144,1)
(188,186,1)
(186,614,1)
(281,71,1)
(418,60,1)
(121,324,1)
(353,189,1)
(31,395,1)
(12,577,1)
(124,288,1)
(501,430,1)
(91,607,1)
(605,226,1)
(261,310,1)
(7,436,1)
(73,48,1)
(383,353,1)
(130,47,1)
(523,472,1)
(332,200,1)
(324,600,1)
(505,223,1)
(433,270,1)
(568,196,1)
(334,89,1)
(297,422,1)
(337,196,1)
(545,49,1)
(234,485,1)
(234,241,1)
(62,534,1)
(211,234,1)
(20,270,1)
(242,570,1)
(436,537,1)
(257,447,1)
(513,408,1)
(435,348,1)
(614,485,1)
(510,198,1)
(226,341,1)
(570,542,1)
(7,100,1)
(577,610,1)
(246,270,1)
(355,453,1)
(119,531,1)
(78,28,1)
(330,620,1)
(138,167,1)
(87,391,1)
(365,381,1)
(368,165,1)
(222,87,1)
(115,323,1)
(228,264,1)
(180,215,1)
(422,210,1)
(420,615,1)
(287,481,1)
(429,152,1)
(293,520,1)
(59,483,1)
(427,20,1)
(409,37,1)
(533,270,1)
(115,227,1)
(497,270,1)
(419,106,1)
(369,434,1)
(233,16,1)
(327,492,1)
(211,380,1)
(508,197,1)
(258,187,1)
(525,464,1)
(488,575,1)
(189,506,1)
(178,118,1)
(401,502,1)
(218,411,1)
(618,270,1)
(86,449,1)
(19,567,1)
(426,607,1)
(536,526,1)
(497,42,1)
(69,607,1)
(363,607,1)
(513,270,1)
(181,270,1)
(276,607,1)
(622,365,1)
(245,214,1)
(314,8,1)
(374,519,1)
(211,392,1)
(117,79,1)
(392,17,1)
(279,328,1)
(11,270,1)
(408,594,1)
(157,410,1)
(336,427,1)
(63,277,1)
(146,319,1)
(162,340,1)
(467,330,1)
(97,573,1)
(129,227,1)
(575,312,1)
(621,131,1)
(476,310,1)
(609,234,1)
(253,90,1)
(490,32,1)
(132,196,1)
(319,196,1)
(616,180,1)
(558,567,1)
(461,145,1)
(425,337,1)
(613,149,1)
(571,416,1)
(321,255,1)
(306,485,1)
(16,546,1)
(562,298,1)
(10,613,1)
(317,524,1)
(126,25,1)
(464,318,1)
(541,323,1)
(110,14,1)
(519,356,1)
(255,607,1)
(619,465,1)
(77,323,1)
(413,530,1)
(603,135,1)
(455,569,1)
(346,607,1)
(184,466,1)
(588,23,1)
(511,435,1)
(83,76,1)
(459,523,1)
(608,528,1)
(290,488,1)
(215,66,1)
(268,341,1)
(333,332,1)
(111,369,1)
(139,50,1)
(34,610,1)
(65,386,1)
(14,370,1)
(306,283,1)
(475,512,1)
(33,512,1)
(384,621,1)
(32,398,1)
(134,205,1)
(312,540,1)
(99,235,1)
(478,578,1)
(22,113,1)
(380,253,1)
(609,486,1)
(592,112,1)
(362,227,1)
(506,339,1)
(288,270,1)
(625,301,1)
(214,489,1)
(566,604,1)
(155,73,1)
(42,311,1)
(219,192,1)
(147,132,1)
(178,436,1)
(454,270,1)
(417,607,1)
(413,485,1)
(296,261,1)
(282,270,1)
(154,557,1)
(238,34,1)
(518,178,1)
(183,387,1)
(454,273,1)
(567,1,1)
(323,18,1)
(77,434,1)
(167,249,1)
(426,516,1)
(210,326,1)
(383,183,1)
(578,49,1)
(231,314,1)
(151,225,1)
(310,288,1)
(346,3,1)
(574,326,1)
(462,505,1)
(28,9,1)
(475,595,1)
(279,504,1)
(361,85,1)
(614,394,1)
(218,338,1)
(255,367,1)
(289,368,1)
(431,218,1)
(389,404,1)
(597,562,1)
(370,29,1)
(293,404,1)
(193,227,1)
(392,485,1)
(380,485,1)
(529,305,1)
(1,438,1)
(563,345,1)
(77,227,1)
(170,563,1)
(79,242,1)
(305,187,1)
(605,187,1)
(66,400,1)
(395,2,1)
(51,448,1)
(362,140,1)
(562,270,1)
(334,604,1)
(13,150,1)
(193,319,1)
(17,491,1)
(377,201,1)
(617,461,1)
(388,510,1)
(47,35,1)
(567,270,1)
(460,514,1)
(315,469,1)
(244,177,1)
(573,249,1)
(391,373,1)
(132,208,1)
(471,609,1)
(583,254,1)
(441,157,1)
(274,604,1)
(340,219,2)
(499,219,2)
(407,266,2)
(558,569,2)
(612,278,2)
(181,270,2)
(261,286,2)
(587,219,2)
(167,614,2)
(115,19,2)
(486,246,2)
(234,198,2)
(420,615,2)
(449,270,2)
(468,219,2)
(431,286,2)
(622,219,2)
(540,219,2)
(526,19,2)
(216,347,2)
(485,478,2)
(324,270,2)
(196,219,2)
(139,50,2)
(117,569,2)
(319,399,2)
(475,512,2)
(282,249,2)
(58,219,2)
(41,583,2)
(610,196,2)
(159,198,2)
(11,155,2)
(132,319,2)
(449,565,2)
(83,219,2)
(329,597,2)
(355,295,2)
(367,300,2)
(167,249,2)
(438,569,2)
(397,569,2)
(579,219,2)
(413,187,2)
(170,345,2)
(251,577,2)
(249,392,2)
(413,200,2)
(615,219,2)
(619,219,2)
(463,286,2)
(124,286,2)
(389,404,2)
(512,286,2)
(208,319,2)
(522,345,2)
(381,219,2)
(263,219,2)
(578,49,2)
(476,286,2)
(575,219,2)
(432,615,2)
(143,399,2)
(128,278,2)
(434,270,2)
(178,436,2)
(562,565,2)
(365,381,2)
(605,323,2)
(520,38,2)
(368,165,2)
(531,93,2)
(188,614,2)
(513,565,2)
(187,82,2)
(361,219,2)
(176,91,2)
(483,300,2)
(6,219,2)
(284,440,2)
(536,19,2)
(504,219,2)
(615,587,2)
(288,270,2)
(419,187,2)
(462,565,2)
(176,249,2)
(143,270,2)
(569,426,2)
(593,469,2)
(604,286,2)
(410,219,2)
(129,187,2)
(246,270,2)
(19,258,2)
(165,399,2)
(1,258,2)
(289,368,2)
(392,485,2)
(200,569,2)
(404,607,2)
(246,132,2)
(18,63,2)
(210,19,2)
(32,286,2)
(261,310,2)
(567,270,2)
(245,489,2)
(383,219,2)
(569,7,2)
(277,219,2)
(375,597,2)
(260,219,2)
(547,286,2)
(284,286,2)
(493,198,2)
(565,120,2)
(63,219,2)
(342,270,2)
(369,469,2)
(86,565,2)
(625,444,2)
(211,219,2)
(24,270,2)
(583,113,2)
(434,469,2)
(578,219,2)
(155,73,2)
(565,486,2)
(23,219,2)
(454,219,2)
(440,286,2)
(562,270,2)
(185,270,2)
(360,469,2)
(2,219,2)
(354,219,2)
(271,19,2)
(141,19,2)
(101,219,2)
(614,394,2)
(336,219,2)
(363,346,2)
(504,232,2)
(224,143,2)
(132,196,2)
(528,219,2)
(73,48,2)
(293,219,2)
(442,436,2)
(258,187,2)
(8,219,2)
(565,224,2)
(77,469,2)
(435,266,2)
(119,219,2)
(537,219,2)
(241,198,2)
(324,286,2)
(557,286,2)
(343,286,2)
(232,346,2)
(525,318,2)
(290,113,2)
(354,162,2)
(511,266,2)
(76,219,2)
(126,346,2)
(24,569,2)
(583,286,2)
(411,320,2)
(6,85,2)
(503,203,2)
(220,469,2)
(182,219,2)
(556,219,2)
(8,270,2)
(495,19,2)
(207,308,2)
(328,569,2)
(571,286,2)
(79,570,2)
(617,607,2)
(558,258,2)
(526,502,2)
(55,219,2)
(77,227,2)
(295,286,2)
(446,219,2)
(362,140,2)
(238,219,2)
(149,266,2)
(417,300,2)
(106,19,2)
(583,607,2)
(67,116,2)
(129,24,2)
(167,176,2)
(469,597,2)
(341,19,2)
(64,19,2)
(144,569,2)
(534,219,2)
(176,274,2)
(458,342,2)
(161,597,2)
(138,167,2)
(408,565,2)
(559,604,2)
(418,187,2)
(224,197,2)
(222,87,2)
(75,270,2)
(465,219,2)
(283,197,2)
(68,269,2)
(593,270,2)
(597,565,2)
(206,569,2)
(319,219,2)
(471,266,2)
(131,270,2)
(286,607,2)
(218,286,2)
(233,219,2)
(445,219,2)
(609,227,2)
(390,614,2)
(516,258,2)
(560,386,2)
(302,249,2)
(441,219,2)
(320,453,2)
(502,270,2)
(475,295,2)
(567,258,2)
(157,219,2)
(347,607,2)
(291,449,2)
(444,270,2)
(610,219,2)
(109,219,2)
(594,565,2)
(63,277,2)
(353,19,2)
(178,332,2)
(279,569,2)
(338,411,2)
(13,150,2)
(73,258,2)
(569,258,2)
(91,592,2)
(274,249,2)
(514,286,2)
(25,346,2)
(577,219,2)
(442,266,2)
(216,489,2)
(41,286,2)
(7,258,2)
(292,332,2)
(284,84,2)
(438,258,2)
(552,404,2)
(564,219,2)
(533,19,2)
(341,270,2)
(335,266,2)
(228,264,2)
(537,184,2)
(266,309,2)
(38,603,2)
(334,604,2)
(580,286,2)
(310,286,2)
(567,569,2)
(189,19,2)
(308,266,2)
(246,399,2)
(419,19,2)
(488,219,2)
(115,533,2)
(490,286,2)
(320,286,2)
(454,270,2)
(278,370,2)
(288,286,2)
(352,286,2)
(368,219,2)
(602,75,2)
(503,265,2)
(609,234,2)
(451,219,2)
(57,219,2)
(609,266,2)
(244,597,2)
(269,345,2)
(68,345,2)
(192,345,2)
(418,332,2)
(279,258,2)
(160,19,2)
(51,219,2)
(27,155,2)
(85,219,2)
(609,224,2)
(577,610,2)
(264,469,2)
(155,258,2)
(598,270,2)
(248,366,2)
(168,219,2)
(486,198,2)
(137,346,2)
(285,181,2)
(120,266,2)
(481,278,2)
(618,270,2)
(621,19,2)
(346,219,2)
(219,345,2)
(232,559,2)
(41,512,2)
(180,219,2)
(445,322,2)
(393,565,2)
(130,457,2)
(614,485,2)
(82,565,2)
(326,19,2)
(291,565,2)
(215,219,2)
(270,139,2)
(475,54,2)
(222,300,2)
(200,279,2)
(622,365,2)
(321,300,2)
(331,19,2)
(533,270,2)
(601,19,2)
(319,196,2)
(18,219,2)
(290,385,2)
(394,309,2)
(520,404,2)
(600,286,2)
(427,219,2)
(306,197,2)
(409,469,2)
(521,219,2)
(153,286,2)
(440,324,2)
(544,270,2)
(268,19,2)
(99,219,2)
(359,19,2)
(127,219,2)
(281,366,2)
(544,266,2)
(447,19,2)
(239,258,2)
(264,270,2)
(125,469,2)
(254,286,2)
(440,571,2)
(111,469,2)
(289,306,2)
(603,270,2)
(273,219,2)
(296,261,2)
(266,138,2)
(334,155,2)
(225,404,2)
(605,19,2)
(143,132,2)
(78,266,2)
(478,219,2)
(345,67,2)
(349,286,2)
(592,270,2)
(100,258,2)
(227,319,2)
(7,436,2)
(9,185,2)
(223,513,2)
(455,569,2)
(525,19,2)
(258,469,2)
(505,223,2)
(305,565,2)
(280,614,2)
(428,219,2)
(295,460,2)
(91,607,2)
(477,219,2)
(232,219,2)
(464,19,2)
(98,249,2)
(48,258,2)
(75,19,2)
(478,578,2)
(249,486,2)
(163,306,2)
(162,219,2)
(330,266,2)
(529,565,2)
(251,219,2)
(93,109,2)
(401,19,2)
(491,380,2)
(219,192,2)
(225,270,2)
(332,200,2)
(445,588,2)
(530,200,2)
(489,219,2)
(28,266,2)
(379,290,2)
(269,270,2)
(508,197,2)
(412,266,2)
(308,270,2)
(323,219,2)
(459,266,2)
(185,266,2)
(276,607,2)
(298,565,2)
(469,244,2)
(597,562,2)
(472,266,2)
(602,19,2)
(609,392,2)
(474,604,2)
(606,19,2)
(597,187,2)
(314,219,2)
(235,219,2)
(436,219,2)
(36,489,2)
(596,345,2)
(384,19,2)
(19,567,2)
(16,219,2)
(129,323,2)
(59,300,2)
(199,219,2)
(415,300,2)
(342,219,2)
(53,569,2)
(465,568,2)
(290,219,2)
(165,219,2)
(237,200,2)
(402,270,2)
(26,565,2)
(605,131,2)
(620,266,2)
(299,569,2)
(458,219,2)
(231,314,2)
(373,300,2)
(571,451,2)
(385,287,2)
(334,436,2)
(155,187,2)
(362,323,2)
(616,219,2)
(216,378,2)
(470,19,2)
(162,270,2)
(244,103,2)
(129,368,2)
(378,607,2)
(165,454,2)
(495,270,2)
(433,270,2)
(100,270,2)
(79,569,2)
(231,219,2)
(595,219,2)
(518,258,2)
(435,270,2)
(366,278,2)
(155,569,2)
(394,270,2)
(186,614,2)
(116,618,2)
(365,219,2)
(466,219,2)
(356,19,2)
(568,548,2)
(515,469,2)
(255,607,2)
(19,569,2)
(517,219,2)
(596,68,2)
(392,380,2)
(581,270,2)
(78,9,2)
(20,219,2)
(197,69,2)
(599,489,2)
(460,531,2)
(598,219,2)
(379,219,2)
(385,278,2)
(559,363,2)
(311,569,2)
(416,286,2)
(166,285,2)
(478,617,2)
(346,607,2)
(325,219,2)
(328,258,2)
(500,569,2)
(492,251,2)
(344,427,2)
(115,323,2)
(327,219,2)
(400,219,2)
(565,357,2)
(581,332,2)
(112,249,2)
(506,19,2)
(177,433,2)
(87,300,2)
(138,309,2)
(343,531,2)
(73,569,2)
(43,597,2)
(527,155,2)
(197,615,2)
(198,197,2)
(31,395,2)
(344,219,2)
(565,392,2)
(339,270,2)
(278,216,2)
(95,607,2)
(169,197,2)
(42,569,2)
(71,366,2)
(306,485,2)
(193,219,2)
(129,79,2)
(497,270,2)
(560,569,2)
(501,266,2)
(437,19,2)
(347,489,2)
(492,219,2)
(605,368,2)
(234,485,2)
(22,219,2)
(13,286,2)
(85,598,2)
(115,187,2)
(548,270,2)
(568,196,2)
(386,569,2)
(348,266,2)
(44,404,2)
(172,219,2)
(613,266,2)
(143,197,2)
(265,345,2)
(455,258,2)
(217,219,2)
(475,219,2)
(122,286,2)
(545,219,2)
(387,228,2)
(247,258,2)
(565,266,2)
(494,569,2)
(226,341,2)
(587,607,2)
(300,366,2)
(240,19,2)
(609,368,2)
(426,607,2)
(87,607,2)
(226,19,2)
(207,266,2)
(542,569,2)
(203,345,2)
(366,370,2)
(570,270,2)
(94,19,2)
(301,469,2)
(12,219,2)
(539,286,2)
(427,20,2)
(48,270,2)
(617,219,2)
(583,385,2)
(1,569,2)
(510,198,2)
(118,332,2)
(376,469,2)
(97,249,2)
(590,607,2)
(249,614,2)
(272,345,2)
(614,309,2)
(257,19,2)
(250,286,2)
(467,266,2)
(603,404,2)
(47,457,2)
(541,219,2)
(209,602,2)
(351,219,2)
(309,219,2)
(93,219,2)
(121,286,2)
(108,197,2)
(177,604,2)
(411,286,2)
(398,286,2)
(251,458,2)
(377,278,2)
(258,593,2)
(72,565,2)
(609,435,2)
(115,227,2)
(290,607,2)
(523,266,2)
(363,607,2)
(519,19,2)
(382,469,2)
(200,258,2)
(467,270,2)
(604,490,2)
(131,19,2)
(482,219,2)
(154,286,2)
(487,219,2)
(350,219,2)
(134,309,2)
(358,19,2)
(82,291,2)
(451,31,2)
(165,132,2)
(198,306,2)
(332,569,2)
(277,270,2)
(559,346,2)
(518,569,2)
(566,286,2)
(48,569,2)
(177,597,2)
(312,219,2)
(538,219,2)
(607,317,2)
(469,565,2)
(244,177,2)
(568,219,2)
(565,544,2)
(313,258,2)
(20,270,2)
(53,258,2)
(198,289,2)
(103,597,2)
(178,604,2)
(574,19,2)
(570,569,2)
(573,249,2)
(13,474,2)
(387,469,2)
(129,569,2)
(448,219,2)
(390,270,2)
(60,332,2)
(201,278,2)
(274,436,2)
(69,615,2)
(362,19,2)
(276,219,2)
(417,607,2)
(309,368,2)
(37,469,2)
(135,404,2)
(129,227,2)
(484,565,2)
(589,19,2)
(187,565,2)
(355,453,2)
(181,219,2)
(91,249,2)
(113,300,2)
(370,29,2)
(33,286,2)
(210,326,2)
(549,266,2)
(7,100,2)
(259,469,2)
(315,469,2)
(287,607,2)
(608,219,2)
(90,198,2)
(512,296,2)
(286,219,2)
(461,219,2)
(532,607,2)
(456,197,2)
(296,286,2)
(148,219,2)
(425,219,2)
(77,323,2)
(380,198,2)
(457,166,2)
(433,597,2)
(103,607,2)
(550,19,2)
(588,219,2)
(279,504,2)
(66,219,2)
(206,258,2)
(303,565,2)
(405,366,2)
(310,288,2)
(77,187,2)
(444,469,2)
(249,390,2)
(306,402,2)
(380,485,2)
(395,428,2)
(506,339,2)
(35,457,2)
(115,368,2)
(253,198,2)
(19,187,2)
(502,19,2)
(275,19,2)
(565,234,2)
(460,286,2)
(396,219,2)
(11,270,2)
(615,368,2)
(274,604,2)
(282,270,2)
(249,234,2)
(34,219,2)
(96,197,2)
(15,306,2)
(322,219,2)
(77,368,2)
(287,278,2)
(255,300,2)
(229,569,2)
(17,380,2)
(89,155,2)
(10,266,2)
(374,19,2)
(426,258,2)
(62,219,2)
(317,221,2)
(482,475,2)
(563,345,2)
(513,270,2)
(266,219,2)
(423,300,2)
(190,19,2)
(262,258,2)
(147,319,2)
(77,434,2)
(474,286,2)
(520,225,2)
(214,489,2)
(413,485,2)
(278,219,2)
(239,569,2)
(605,227,2)
(166,219,2)
(202,332,2)
(457,219,2)
(4,266,2)
(584,417,2)
(197,219,2)
(74,219,2)
(559,436,2)
(142,258,2)
(61,309,2)
(532,300,2)
(249,224,2)
(56,219,2)
(3,219,2)
(304,19,2)
(66,354,2)
(333,332,2)
(609,207,2)
(548,219,2)
(209,19,2)
(605,226,2)
(404,219,2)
(49,270,2)
(279,607,2)
(577,622,2)
(332,413,2)
(274,282,2)
(318,19,2)
(184,219,2)
(297,19,2)
(505,565,2)
(572,249,2)
(9,266,2)
(300,405,2)
(65,569,2)
(77,625,2)
(623,219,2)
(223,565,2)
(138,614,2)
(378,489,2)
(388,198,2)
(428,270,2)
(46,266,2)
(430,266,2)
(554,266,2)
(357,266,2)
(205,309,2)
(300,278,2)
(95,366,2)
(31,219,2)
(337,219,2)
(123,219,2)
(151,404,2)
(453,286,2)
(196,482,2)
(402,197,2)
(69,607,2)
(609,486,2)
(102,469,2)
(362,227,2)
(546,219,2)
(252,219,2)
(605,187,2)
(173,332,2)
(625,469,2)
(221,270,2)
(590,278,2)
(192,270,2)
(422,19,2)
(45,219,2)
(230,597,2)
(242,569,2)
(380,486,2)
(69,504,2)
(49,219,2)
(474,343,2)
(609,323,2)
(146,319,2)
(485,219,2)
(113,584,2)
(395,219,2)
(414,219,2)
(405,95,2)
(52,270,2)
(497,569,2)
(386,497,2)
(183,469,2)
(40,300,2)
(355,286,2)
(228,469,2)
(339,19,2)
(584,300,2)
(115,526,2)
(285,219,2)
(453,13,2)
(357,270,2)
(436,537,2)
(528,531,2)
(140,19,2)
(145,219,2)
(212,266,2)
(189,506,2)
(442,604,2)
(130,50,2)
(531,219,2)
(81,219,2)
(177,436,2)
(38,404,2)
(7,604,2)
(332,258,2)
(323,18,2)
(5,319,2)
(391,300,2)
(246,198,2)
(592,249,2)
(296,284,2)
(52,332,2)
-----------------------------------
(0,if (cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,\n\\n\\t\\t\\t\\t\\t   new_freq, CPUFREQ_RELATION_L,\n\\n\\t\\t\\t\\t\\t   &index)
(1,target_freq)
(2,related_cpus)
(3,boost_val)
(4,cur)
(5,i)
(6,spin_lock_irqsave(&ppol->target_freq_lock, flags)
(7,now - ppol->floor_validate_time)
(8,ppol->last_evaluated_jiffy)
(9,&ppol->target_freq_lock)
(10,ppol)
(11,ppol->max_freq_hyst_start_time)
(12,ppol)
(13,(unsigned int)
(14,ppol)
(15,MAX_LOCAL_LOAD)
(16,govinfo.load)
(17,this_hispeed_freq)
(18,cpumask_first(ppol->policy->cpus)
(19,ppol->target_freq == new_freq)
(20,ppol->load_lock)
(21,if (tunables->use_sched_load)
(22,tunables)
(23,cpufreq_govinfo_notifier_list)
(24,ppol->target_freq)
(25,tunables)
(26,flags)
(27,max_freq_hyst_start_time)
(28,flags)
(29,is_display_on()
(30,ppol)
(31,cpumask_first(ppol->policy->related_cpus)
(32,i)
(33,cputime_speedadj)
(34,i)
(35,data)
(36,tunables)
(37,new_freq)
(38,ppol->policy->related_cpus)
(39,)
(40,timer_rate)
(41,do_div(cputime_speedadj, tunables->timer_rate)
(42,target_freq_lock)
(43,max_freq_hyst_start_time)
(44,related_cpus)
(45,govinfo.cpu)
(46,target_freq_lock)
(47,false)
(48,ppol->policy)
(49,ppol->policy)
(50,unsigned long data)
(51,last_evaluated_jiffy)
(52,ppol->floor_validate_time)
(53,policy)
(54,unsigned int)
(55,target_freq_lock)
(56,max)
(57,i)
(58,cpuinfo)
(59,prev_timer_rate)
(60,new_freq)
(61,this_hispeed_freq)
(62,tunables)
(63,ppol->policy->cpus)
(64,flags)
(65,flags)
(66,spin_unlock_irqrestore(&ppol->load_lock, flags)
(67,down_read_trylock(&ppol->enable_sem)
(68,&ppol->enable_sem)
(69,tunables->boosted)
(70,index)
(71,tunables)
(72,new_freq)
(73,ppol->policy->max)
(74,ppol)
(75,ppol->target_freq_lock)
(76,fcpu)
(77,trace_cpufreq_interactive_notyet(max_cpu, cpu_load,\n\\n\\t\\t\\tppol->target_freq, ppol->policy->cur, new_freq)
(78,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(79,ppol->policy->cur)
(80,if (cpu_load <= MAX_LOCAL_LOAD &&\n\\n\\t    ppol->target_freq >= this_hispeed_freq &&\n\\n\\t    new_freq > ppol->target_freq &&\n\\n\\t    now - ppol->hispeed_validate_time <\n\\n\\t    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
(81,100)
(82,ppol->freq_table[index].frequency)
(83,ppol)
(84,u64)
(85,&ppol->target_freq_lock)
(86,index)
(87,tunables->timer_rate)
(88,if (new_freq < ppol->floor_freq)
(89,now)
(90,new_freq)
(91,freq_to_above_hispeed_delay(tunables, ppol->target_freq)
(92,)
(93,&per_cpu(cpuinfo, i)
(94,new_freq)
(95,tunables->timer_rate)
(96,ppol)
(97,ppol)
(98,tunables)
(99,target_freq)
(100,ppol->floor_validate_time)
(101,policy)
(102,target_freq)
(103,tunables->max_freq_hysteresis)
(104,)
(105,if (tmploadadjfreq > loadadjfreq)
(106,new_freq)
(107,cpu_load)
(108,ppol)
(109,per_cpu(cpuinfo, i)
(110,enable_sem)
(111,policy)
(112,target_freq)
(113,tunables->timer_rate\n\\n\\t\\t\\t= max(tunables->timer_rate,\n\\n\\t\\t\\t\\tSCREEN_OFF_TIMER_RATE)
(114,)
(115,trace_cpufreq_interactive_already(\n\\n\\t\\t\\tmax_cpu, cpu_load, ppol->target_freq,\n\\n\\t\\t\\tppol->policy->cur, new_freq)
(116,&ppol->enable_sem)
(117,new_freq)
(118,now)
(119,tunables)
(120,&index)
(121,i)
(122,ppol)
(123,use_sched_load)
(124,cpuinfo)
(125,cpu_load)
(126,boostpulse_endtime)
(127,ppol)
(128,tunables)
(129,trace_cpufreq_interactive_notyet(\n\\n\\t\\t\\t\\tmax_cpu, cpu_load, ppol->target_freq,\n\\n\\t\\t\\t\\tppol->policy->cur, new_freq)
(130,cpufreq_interactive_timer_resched(data, false)
(131,ppol->target_freq)
(132,loadadjfreq = tmploadadjfreq)
(133,if (!tunables->boosted || new_freq > this_hispeed_freq)
(134,target_freq)
(135,policy)
(136,)
(137,now)
(138,ppol->target_freq >= this_hispeed_freq &&\n\\n\\t    new_freq > ppol->target_freq &&\n\\n\\t    now - ppol->hispeed_validate_time <\n\\n\\t    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
(139,per_cpu(polinfo, data)
(140,&speedchange_cpumask)
(141,max_cpu)
(142,now)
(143,choose_freq(ppol, loadadjfreq)
(144,ppol)
(145,tunables)
(146,loadadjfreq)
(147,max_cpu)
(148,CPUFREQ_LOAD_CHANGE)
(149,max_cpu)
(150,unsigned int)
(151,ppol)
(152,polinfo)
(153,now)
(154,delta_time)
(155,new_freq == ppol->policy->max)
(156,ppol)
(157,govinfo.cpu = i)
(158,if (!down_read_trylock(&ppol->enable_sem)
(159,loadadjfreq)
(160,ppol)
(161,now)
(162,ppol->load_lock)
(163,cpu_load)
(164,delta_time)
(165,loadadjfreq / ppol->target_freq)
(166,timer_pending(&ppol->policy_timer)
(167,new_freq > ppol->target_freq &&\n\\n\\t    now - ppol->hispeed_validate_time <\n\\n\\t    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
(168,goto exit;)
(169,target_freq)
(170,governor_enabled)
(171,if (WARN_ON_ONCE(!delta_time)
(172,govinfo)
(173,floor_freq)
(174,flags)
(175,)
(176,now - ppol->hispeed_validate_time <\n\\n\\t    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
(177,now - ppol->max_freq_hyst_start_time)
(178,ppol->floor_validate_time = now)
(179,i)
(180,cpuinfo)
(181,ppol->policy_timer)
(182,ppol)
(183,goto rearm;)
(184,ktime_get()
(185,ppol->target_freq_lock)
(186,new_freq)
(187,new_freq = ppol->freq_table[index].frequency)
(188,ppol)
(189,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(190,speedchange_cpumask_lock)
(191,)
(192,ppol->governor_enabled)
(193,ppol)
(194,ppol)
(195,if (new_freq < this_hispeed_freq)
(196,tmploadadjfreq = (unsigned int)
(197,cpu_load >= tunables->go_hispeed_load || tunables->boosted)
(198,ppol->target_freq < this_hispeed_freq &&\n\\n\\t\\t    cpu_load <= MAX_LOCAL_LOAD)
(199,tunables)
(200,!tunables->boosted)
(201,tunables)
(202,ppol)
(203,return;)
(204,this_hispeed_freq)
(205,ppol)
(206,ppol)
(207,ppol->policy->cur)
(208,tmploadadjfreq)
(209,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(210,spin_unlock_irqrestore(&speedchange_cpumask_lock, flags)
(211,cpu_load)
(212,goto rearm;)
(213,)
(214,tunables)
(215,pcpu)
(216,tunables->timer_rate != tunables->prev_timer_rate)
(217,policy_timer)
(218,cputime_speedadj)
(219,!ppol->governor_enabled)
(220,floor_freq)
(221,ppol->policy)
(222,tunables->prev_timer_rate = tunables->timer_rate)
(223,&ppol->target_freq_lock)
(224,new_freq = choose_freq(ppol, loadadjfreq)
(225,ppol->cpu_busy_times)
(226,ppol->policy->cur)
(227,max_cpu = i)
(228,&ppol->target_freq_lock)
(229,ppol)
(230,ppol)
(231,ppol->last_evaluated_jiffy = get_jiffies_64()
(232,tunables->boost_val || now < tunables->boostpulse_endtime)
(233,pcpu)
(234,new_freq = this_hispeed_freq)
(235,ppol)
(236,)
(237,new_freq)
(238,tmploadadjfreq)
(239,max)
(240,cpu_load)
(241,this_hispeed_freq)
(242,cur)
(243,)
(244,now - ppol->max_freq_hyst_start_time <\n\\n\\t    tunables->max_freq_hysteresis)
(245,timer_rate)
(246,choose_freq(ppol, loadadjfreq)
(247,ppol)
(248,SCREEN_OFF_TIMER_RATE)
(249,new_freq > ppol->target_freq)
(250,policy)
(251,pcpu->loadadjfreq / ppol->policy->max)
(252,tmploadadjfreq)
(253,this_hispeed_freq)
(254,timer_rate)
(255,tunables->timer_rate)
(256,cputime_speedadj)
(257,target_freq)
(258,new_freq < ppol->floor_freq)
(259,target_freq_lock)
(260,go_hispeed_load)
(261,ppol->policy->cpuinfo.max_freq)
(262,tunables)
(263,cpu)
(264,ppol->target_freq_lock)
(265,return;)
(266,cpu_load <= MAX_LOCAL_LOAD &&\n\\n\\t    ppol->target_freq >= this_hispeed_freq &&\n\\n\\t    new_freq > ppol->target_freq &&\n\\n\\t    now - ppol->hispeed_validate_time <\n\\n\\t    freq_to_above_hispeed_delay(tunables, ppol->target_freq)
(267,loadadjfreq)
(268,cur)
(269,ppol->enable_sem)
(270,*ppol = per_cpu(polinfo, data)
(271,ppol)
(272,ppol)
(273,target_freq)
(274,now - ppol->hispeed_validate_time)
(275,ppol)
(276,tunables->boosted)
(277,ppol->policy)
(278,display_on\n\\n\\t\\t&& tunables->timer_rate != tunables->prev_timer_rate)
(279,tunables->boosted)
(280,target_freq)
(281,timer_rate)
(282,ppol->hispeed_validate_time)
(283,this_hispeed_freq)
(284,(u64)
(285,&ppol->policy_timer)
(286,tunables->use_sched_load)
(287,tunables->prev_timer_rate)
(288,ppol->policy)
(289,cpu_load <= MAX_LOCAL_LOAD)
(290,tunables->timer_rate)
(291,ppol->freq_table[index])
(292,floor_validate_time)
(293,max_cpu)
(294,fcpu)
(295,cputime_speedadj = pcpu->cputime_speedadj)
(296,(u64)
(297,wake_up_process(speedchange_task)
(298,target_freq)
(299,goto rearm;)
(300,!display_on\n\\n\\t\\t&& tunables->timer_rate != SCREEN_OFF_TIMER_RATE)
(301,cur)
(302,ppol)
(303,freq_table)
(304,max_cpu)
(305,new_freq)
(306,ppol->target_freq < this_hispeed_freq)
(307,if (new_freq < ppol->target_freq &&\n\\n\\t    now - ppol->max_freq_hyst_start_time <\n\\n\\t    tunables->max_freq_hysteresis)
(308,ppol->policy)
(309,cpu_load <= MAX_LOCAL_LOAD)
(310,ppol->policy->cpuinfo)
(311,ppol)
(312,govinfo.sampling_rate_us)
(313,floor_validate_time)
(314,get_jiffies_64()
(315,max_cpu)
(316,display_on)
(317,ppol->policy->governor_data)
(318,&speedchange_cpumask_lock)
(319,tmploadadjfreq > loadadjfreq)
(320,!delta_time)
(321,tunables)
(322,&govinfo)
(323,max_cpu = cpumask_first(ppol->policy->cpus)
(324,ppol->cpu_busy_times)
(325,loadadjfreq)
(326,&speedchange_cpumask_lock)
(327,govinfo)
(328,boosted)
(329,tunables)
(330,hispeed_validate_time)
(331,target_freq)
(332,!tunables->boosted || new_freq > this_hispeed_freq)
(333,ppol)
(334,ppol->max_freq_hyst_start_time = now)
(335,new_freq)
(336,flags)
(337,pcpu)
(338,continue;)
(339,ppol->target_freq_lock)
(340,load_lock)
(341,ppol->policy)
(342,ppol->policy)
(343,pcpu->cputime_speedadj_timestamp)
(344,spin_lock_irqsave(&ppol->load_lock, flags)
(345,!down_read_trylock(&ppol->enable_sem)
(346,tunables->boost_val)
(347,tunables->timer_rate)
(348,target_freq)
(349,cputime_speedadj)
(350,loadadjfreq)
(351,govinfo)
(352,delta_time)
(353,goto rearm;)
(354,&ppol->load_lock)
(355,do_div(cputime_speedadj, delta_time)
(356,max_cpu)
(357,ppol->policy)
(358,target_freq_lock)
(359,speedchange_cpumask)
(360,ppol)
(361,flags)
(362,cpumask_set_cpu(max_cpu, &speedchange_cpumask)
(363,tunables->boostpulse_endtime)
(364,if (now - ppol->floor_validate_time <\n\\n\\t\\t\\t\\ttunables->min_sample_time)
(365,&per_cpu(cpuinfo, i)
(366,!display_on)
(367,timer_rate)
(368,cpu_load = loadadjfreq / ppol->target_freq)
(369,ppol)
(370,display_on = is_display_on()
(371,)
(372,pcpu)
(373,tunables)
(374,ppol)
(375,max_freq_hysteresis)
(376,new_freq)
(377,timer_rate)
(378,tunables->prev_timer_rate)
(379,govinfo.sampling_rate_us = tunables->timer_rate)
(380,new_freq < this_hispeed_freq)
(381,per_cpu(cpuinfo, i)
(382,flags)
(383,ppol)
(384,policy)
(385,tunables->timer_rate = tunables->prev_timer_rate)
(386,&ppol->target_freq_lock)
(387,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(388,ppol)
(389,ppol)
(390,ppol->target_freq)
(391,timer_rate)
(392,new_freq = this_hispeed_freq)
(393,ppol)
(394,ppol->target_freq)
(395,ppol->policy->related_cpus)
(396,policy)
(397,max_cpu)
(398,now)
(399,loadadjfreq = 0)
(400,flags)
(401,cur)
(402,ppol->target_freq)
(403,new_freq)
(404,tunables->use_sched_load)
(405,tunables->timer_rate != SCREEN_OFF_TIMER_RATE)
(406,policy)
(407,policy)
(408,target_freq_lock)
(409,ppol)
(410,i)
(411,WARN_ON_ONCE(!delta_time)
(412,ppol)
(413,new_freq > this_hispeed_freq)
(414,boosted)
(415,SCREEN_OFF_TIMER_RATE)
(416,fcpu)
(417,tunables->timer_rate)
(418,ppol->floor_freq = new_freq)
(419,ppol->target_freq = new_freq)
(420,tunables)
(421,0)
(422,speedchange_task)
(423,tunables)
(424,)
(425,loadadjfreq)
(426,tunables->min_sample_time)
(427,&ppol->load_lock)
(428,ppol->policy)
(429,data)
(430,ppol)
(431,pcpu)
(432,boosted)
(433,ppol->max_freq_hyst_start_time)
(434,ppol->target_freq)
(435,ppol->target_freq)
(436,now = ktime_to_us(ktime_get()
(437,flags)
(438,ppol)
(439,)
(440,ppol->cpu_busy_times[i - fcpu])
(441,govinfo)
(442,ppol->hispeed_validate_time = now)
(443,tunables)
(444,ppol->policy)
(445,atomic_notifier_call_chain(&cpufreq_govinfo_notifier_list,\n\\n\\t\\t\\t\\t\\t   CPUFREQ_LOAD_CHANGE, &govinfo)
(446,load_lock)
(447,ppol)
(448,ppol)
(449,ppol->freq_table)
(450,)
(451,fcpu = cpumask_first(ppol->policy->related_cpus)
(452,rearm:)
(453,delta_time = (unsigned int)
(454,ppol->target_freq)
(455,tunables)
(456,loadadjfreq)
(457,!timer_pending(&ppol->policy_timer)
(458,ppol->policy->max)
(459,index)
(460,pcpu->cputime_speedadj)
(461,hispeed_freq)
(462,goto rearm;)
(463,pcpu)
(464,flags)
(465,trace_cpufreq_interactive_cpuload(i, tmploadadjfreq /\n\\n\\t\\t\\t\\t\\t\\t  ppol->target_freq)
(466,now)
(467,ppol->hispeed_validate_time)
(468,tunables)
(469,new_freq < ppol->target_freq &&\n\\n\\t    now - ppol->max_freq_hyst_start_time <\n\\n\\t    tunables->max_freq_hysteresis)
(470,target_freq)
(471,ppol)
(472,new_freq)
(473,if (display_on\n\\n\\t\\t&& tunables->timer_rate != tunables->prev_timer_rate)
(474,now - pcpu->cputime_speedadj_timestamp)
(475,(unsigned int)
(476,max_freq)
(477,policy)
(478,max(tunables->hispeed_freq, ppol->policy->min)
(479,tunables)
(480,tmploadadjfreq)
(481,prev_timer_rate)
(482,(unsigned int)
(483,tunables)
(484,frequency)
(485,this_hispeed_freq = max(tunables->hispeed_freq, ppol->policy->min)
(486,new_freq = choose_freq(ppol, loadadjfreq)
(487,use_sched_load)
(488,timer_rate)
(489,display_on)
(490,update_load(i)
(491,new_freq)
(492,govinfo.load = pcpu->loadadjfreq / ppol->policy->max)
(493,new_freq)
(494,target_freq)
(495,ppol->target_freq)
(496,)
(497,ppol->target_freq_lock)
(498,display_on)
(499,cpus)
(500,cpu_load)
(501,policy)
(502,ppol->policy)
(503,RET)
(504,tunables->boosted = tunables->boost_val || now < tunables->boostpulse_endtime)
(505,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(506,&ppol->target_freq_lock)
(507,)
(508,new_freq)
(509,now)
(510,new_freq)
(511,ppol)
(512,cputime_speedadj = (u64)
(513,ppol->target_freq_lock)
(514,cputime_speedadj)
(515,ppol)
(516,min_sample_time)
(517,ppol)
(518,new_freq)
(519,cpu_load)
(520,sched_get_cpus_busy(ppol->cpu_busy_times,\n\\n\\t\\t\\t\\t    ppol->policy->related_cpus)
(521,this_hispeed_freq)
(522,enable_sem)
(523,CPUFREQ_RELATION_L)
(524,governor_data)
(525,spin_lock_irqsave(&speedchange_cpumask_lock, flags)
(526,ppol->policy->cur)
(527,ppol)
(528,pcpu->loadadjfreq)
(529,ppol)
(530,this_hispeed_freq)
(531,pcpu = &per_cpu(cpuinfo, i)
(532,tunables->prev_timer_rate)
(533,ppol->target_freq)
(534,cpu_load)
(535,loadadjfreq)
(536,new_freq)
(537,ktime_to_us(ktime_get()
(538,policy)
(539,tunables)
(540,sampling_rate_us)
(541,pcpu)
(542,policy)
(543,if (!ppol->governor_enabled)
(544,ppol->freq_table)
(545,min)
(546,load)
(547,cputime_speedadj_timestamp)
(548,ppol->target_freq)
(549,freq_table)
(550,target_freq_lock)
(551,if (cpu_load >= tunables->go_hispeed_load || tunables->boosted)
(552,cpu_busy_times)
(553,if (tunables->use_sched_load)
(554,now)
(555,if (ppol->target_freq == new_freq)
(556,ppol)
(557,cputime_speedadj)
(558,new_freq)
(559,now < tunables->boostpulse_endtime)
(560,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(561,)
(562,ppol->target_freq)
(563,ppol)
(564,loadadjfreq)
(565,cpufreq_frequency_table_target(ppol->policy, ppol->freq_table,\n\\n\\t\\t\\t\\t\\t   new_freq, CPUFREQ_RELATION_L,\n\\n\\t\\t\\t\\t\\t   &index)
(566,delta_time)
(567,ppol->target_freq)
(568,tmploadadjfreq /\n\\n\\t\\t\\t\\t\\t\\t  ppol->target_freq)
(569,now - ppol->floor_validate_time <\n\\n\\t\\t\\t\\ttunables->min_sample_time)
(570,ppol->policy)
(571,i - fcpu)
(572,hispeed_validate_time)
(573,now)
(574,flags)
(575,tunables)
(576,max_cpu)
(577,pcpu->loadadjfreq)
(578,ppol->policy->min)
(579,MAX_LOCAL_LOAD)
(580,ppol)
(581,ppol->floor_freq)
(582,)
(583,tunables->timer_rate)
(584,max(tunables->timer_rate,\n\\n\\t\\t\\t\\tSCREEN_OFF_TIMER_RATE)
(585,if (ppol->target_freq < this_hispeed_freq &&\n\\n\\t\\t    cpu_load <= MAX_LOCAL_LOAD)
(586,govinfo)
(587,tunables->go_hispeed_load)
(588,&cpufreq_govinfo_notifier_list)
(589,speedchange_cpumask_lock)
(590,tunables->timer_rate)
(591,exit:)
(592,ppol->target_freq)
(593,ppol->floor_freq)
(594,ppol)
(595,cputime_speedadj)
(596,up_read(&ppol->enable_sem)
(597,new_freq < ppol->target_freq)
(598,ppol->target_freq_lock)
(599,prev_timer_rate)
(600,cpu_busy_times)
(601,policy)
(602,&ppol->target_freq_lock)
(603,ppol->policy)
(604,now = update_load(i)
(605,trace_cpufreq_interactive_target(max_cpu, cpu_load, ppol->target_freq,\n\\n\\t\\t\\t\\t\\t ppol->policy->cur, new_freq)
(606,ppol)
(607,*tunables =\n\\n\\t\\tppol->policy->governor_data)
(608,tmploadadjfreq)
(609,trace_cpufreq_interactive_notyet(\n\\n\\t\\t\\tmax_cpu, cpu_load, ppol->target_freq,\n\\n\\t\\t\\tppol->policy->cur, new_freq)
(610,pcpu->loadadjfreq = tmploadadjfreq)
(611,if (new_freq == ppol->policy->max)
(612,display_on)
(613,cpu_load)
(614,ppol->target_freq >= this_hispeed_freq)
(615,cpu_load >= tunables->go_hispeed_load)
(616,i)
(617,tunables->hispeed_freq)
(618,ppol->enable_sem)
(619,tmploadadjfreq)
(620,ppol)
(621,ppol)
(622,pcpu = &per_cpu(cpuinfo, i)
(623,cpu_load)
(624,if (!timer_pending(&ppol->policy_timer)
(625,ppol->policy->cur)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^