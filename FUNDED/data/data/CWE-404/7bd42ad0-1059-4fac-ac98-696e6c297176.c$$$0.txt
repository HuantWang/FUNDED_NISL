-----label-----
1
-----code-----
void update_vsyscall(struct timekeeper *tk)
{
	u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");

	++vdso_data->tb_seq_count;
	smp_wmb();

	vdso_data->use_syscall			= use_syscall;
	vdso_data->xtime_coarse_sec		= tk->xtime_sec;
	vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>
							tk->tkr_mono.shift;
	vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;
	vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;

	if (!use_syscall) {
		/* tkr_mono.cycle_last == tkr_raw.cycle_last */
		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;
		vdso_data->raw_time_sec         = tk->raw_sec;
		vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec;
		vdso_data->xtime_clock_sec	= tk->xtime_sec;
		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;
		/* tkr_raw.xtime_nsec == 0 */
		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;
		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;
		/* tkr_mono.shift == tkr_raw.shift */
		vdso_data->cs_shift		= tk->tkr_mono.shift;
	}

	smp_wmb();
	++vdso_data->tb_seq_count;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
19,22
20,21
22,23
22,24
23,24
23,25
24,25
24,26
25,26
31,32
32,33
33,34
33,35
34,35
37,38
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
50,51
50,52
51,52
51,53
52,53
55,56
55,57
56,57
59,60
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
67,69
68,69
72,73
72,74
73,74
73,75
74,75
78,79
79,80
79,81
80,81
80,82
81,82
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
104,105
106,107
106,108
106,109
106,110
106,111
106,112
106,113
106,114
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
114,116
115,116
119,120
120,121
120,122
121,122
121,123
122,123
125,126
125,127
126,127
129,130
130,131
130,132
131,132
131,133
132,133
135,136
135,137
136,137
136,138
137,138
141,142
142,143
142,144
143,144
143,145
144,145
147,148
147,149
148,149
151,152
152,153
152,154
153,154
153,155
154,155
157,158
157,159
158,159
158,160
159,160
163,164
164,165
164,166
165,166
165,167
166,167
169,170
169,171
170,171
170,172
171,172
175,176
176,177
176,178
177,178
177,179
178,179
181,182
181,183
182,183
182,184
183,184
187,188
188,189
188,190
189,190
189,191
190,191
193,194
193,195
194,195
194,196
195,196
199,200
200,201
201,202
203,204
204,205
205,206
205,207
206,207
-----nextToken-----
2,4,7,9,10,15,17,21,26,27,28,29,30,35,36,40,45,46,48,53,54,57,58,63,64,69,70,71,75,76,77,82,83,87,88,89,94,95,99,100,101,105,111,112,116,117,118,123,124,127,128,133,134,138,139,140,145,146,149,150,155,156,160,161,162,167,168,172,173,174,179,180,184,185,186,191,192,196,197,198,202,207,208
-----computeFrom-----
42,43
42,44
50,51
50,52
60,61
60,62
65,66
65,67
79,80
79,81
91,92
91,93
108,109
108,110
120,121
120,122
130,131
130,132
142,143
142,144
152,153
152,154
164,165
164,166
176,177
176,178
188,189
188,190
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void update_vsyscall(struct timekeeper *tk){	u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");	++vdso_data->tb_seq_count;	smp_wmb();	vdso_data->use_syscall			= use_syscall;	vdso_data->xtime_coarse_sec		= tk->xtime_sec;	vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift;	vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;	vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;	if (!use_syscall) {		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec         = tk->raw_sec;		vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}	smp_wmb();	++vdso_data->tb_seq_count;}
void
update_vsyscall(struct timekeeper *tk)
update_vsyscall
struct timekeeper *tk
struct timekeeper
timekeeper
*tk
*
tk
{	u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");	++vdso_data->tb_seq_count;	smp_wmb();	vdso_data->use_syscall			= use_syscall;	vdso_data->xtime_coarse_sec		= tk->xtime_sec;	vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift;	vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;	vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;	if (!use_syscall) {		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec         = tk->raw_sec;		vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}	smp_wmb();	++vdso_data->tb_seq_count;}
u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");
u32 use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter");
u32
u32
use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
use_syscall
= strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
strcmp
strcmp
tk->tkr_mono.clock->name
tk->tkr_mono.clock
tk->tkr_mono
tk
tk
tkr_mono
clock
name
"arch_sys_counter"
++vdso_data->tb_seq_count;
++vdso_data->tb_seq_count
vdso_data->tb_seq_count
vdso_data
vdso_data
tb_seq_count
smp_wmb();
smp_wmb()
smp_wmb
smp_wmb
vdso_data->use_syscall			= use_syscall;
vdso_data->use_syscall			= use_syscall
vdso_data->use_syscall
vdso_data
vdso_data
use_syscall
use_syscall
use_syscall
vdso_data->xtime_coarse_sec		= tk->xtime_sec;
vdso_data->xtime_coarse_sec		= tk->xtime_sec
vdso_data->xtime_coarse_sec
vdso_data
vdso_data
xtime_coarse_sec
tk->xtime_sec
tk
tk
xtime_sec
vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift;
vdso_data->xtime_coarse_nsec		= tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift
vdso_data->xtime_coarse_nsec
vdso_data
vdso_data
xtime_coarse_nsec
tk->tkr_mono.xtime_nsec >>							tk->tkr_mono.shift
tk->tkr_mono.xtime_nsec
tk->tkr_mono
tk
tk
tkr_mono
xtime_nsec
tk->tkr_mono.shift
tk->tkr_mono
tk
tk
tkr_mono
shift
vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec;
vdso_data->wtm_clock_sec		= tk->wall_to_monotonic.tv_sec
vdso_data->wtm_clock_sec
vdso_data
vdso_data
wtm_clock_sec
tk->wall_to_monotonic.tv_sec
tk->wall_to_monotonic
tk
tk
wall_to_monotonic
tv_sec
vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec;
vdso_data->wtm_clock_nsec		= tk->wall_to_monotonic.tv_nsec
vdso_data->wtm_clock_nsec
vdso_data
vdso_data
wtm_clock_nsec
tk->wall_to_monotonic.tv_nsec
tk->wall_to_monotonic
tk
tk
wall_to_monotonic
tv_nsec
if (!use_syscall) {		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec         = tk->raw_sec;		vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}
!use_syscall
use_syscall
use_syscall
{		/* tkr_mono.cycle_last == tkr_raw.cycle_last */		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;		vdso_data->raw_time_sec         = tk->raw_sec;		vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec;		vdso_data->xtime_clock_sec	= tk->xtime_sec;		vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;		/* tkr_raw.xtime_nsec == 0 */		vdso_data->cs_mono_mult		= tk->tkr_mono.mult;		vdso_data->cs_raw_mult		= tk->tkr_raw.mult;		/* tkr_mono.shift == tkr_raw.shift */		vdso_data->cs_shift		= tk->tkr_mono.shift;	}
vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;
vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last
vdso_data->cs_cycle_last
vdso_data
vdso_data
cs_cycle_last
tk->tkr_mono.cycle_last
tk->tkr_mono
tk
tk
tkr_mono
cycle_last
vdso_data->raw_time_sec         = tk->raw_sec;
vdso_data->raw_time_sec         = tk->raw_sec
vdso_data->raw_time_sec
vdso_data
vdso_data
raw_time_sec
tk->raw_sec
tk
tk
raw_sec
vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec;
vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec
vdso_data->raw_time_nsec
vdso_data
vdso_data
raw_time_nsec
tk->tkr_raw.xtime_nsec
tk->tkr_raw
tk
tk
tkr_raw
xtime_nsec
vdso_data->xtime_clock_sec	= tk->xtime_sec;
vdso_data->xtime_clock_sec	= tk->xtime_sec
vdso_data->xtime_clock_sec
vdso_data
vdso_data
xtime_clock_sec
tk->xtime_sec
tk
tk
xtime_sec
vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec;
vdso_data->xtime_clock_nsec	= tk->tkr_mono.xtime_nsec
vdso_data->xtime_clock_nsec
vdso_data
vdso_data
xtime_clock_nsec
tk->tkr_mono.xtime_nsec
tk->tkr_mono
tk
tk
tkr_mono
xtime_nsec
vdso_data->cs_mono_mult		= tk->tkr_mono.mult;
vdso_data->cs_mono_mult		= tk->tkr_mono.mult
vdso_data->cs_mono_mult
vdso_data
vdso_data
cs_mono_mult
tk->tkr_mono.mult
tk->tkr_mono
tk
tk
tkr_mono
mult
vdso_data->cs_raw_mult		= tk->tkr_raw.mult;
vdso_data->cs_raw_mult		= tk->tkr_raw.mult
vdso_data->cs_raw_mult
vdso_data
vdso_data
cs_raw_mult
tk->tkr_raw.mult
tk->tkr_raw
tk
tk
tkr_raw
mult
vdso_data->cs_shift		= tk->tkr_mono.shift;
vdso_data->cs_shift		= tk->tkr_mono.shift
vdso_data->cs_shift
vdso_data
vdso_data
cs_shift
tk->tkr_mono.shift
tk->tkr_mono
tk
tk
tkr_mono
shift
smp_wmb();
smp_wmb()
smp_wmb
smp_wmb
++vdso_data->tb_seq_count;
++vdso_data->tb_seq_count
vdso_data->tb_seq_count
vdso_data
vdso_data
tb_seq_count
-----joern-----
(47,102,0)
(68,87,0)
(50,15,0)
(56,15,0)
(103,87,0)
(13,123,0)
(141,14,0)
(53,29,0)
(17,35,0)
(33,121,0)
(129,14,0)
(100,68,0)
(109,95,0)
(30,22,0)
(79,1,0)
(102,50,0)
(132,21,0)
(4,136,0)
(25,44,0)
(22,15,0)
(96,70,0)
(54,44,0)
(91,130,0)
(88,130,0)
(82,113,0)
(29,28,0)
(92,20,0)
(48,28,0)
(66,38,0)
(134,28,0)
(31,18,0)
(123,56,0)
(47,122,0)
(60,37,0)
(39,21,0)
(136,15,0)
(54,130,0)
(126,28,0)
(139,12,0)
(136,46,0)
(101,117,0)
(7,105,0)
(35,28,0)
(44,54,0)
(78,117,0)
(41,70,0)
(83,32,0)
(42,50,0)
(49,132,0)
(127,29,0)
(63,69,0)
(89,105,0)
(18,112,0)
(65,3,0)
(14,141,0)
(13,130,0)
(117,15,0)
(34,61,0)
(122,47,0)
(45,102,0)
(21,130,0)
(0,120,0)
(35,47,0)
(20,92,0)
(88,116,0)
(106,28,0)
(118,113,0)
(56,123,0)
(64,87,0)
(19,141,0)
(135,15,0)
(32,15,0)
(75,28,0)
(112,130,0)
(114,56,0)
(46,126,0)
(123,13,0)
(97,6,0)
(120,22,0)
(124,22,0)
(69,28,0)
(57,54,0)
(12,88,0)
(14,15,0)
(105,44,0)
(101,130,0)
(20,15,0)
(70,92,0)
(112,68,0)
(91,120,0)
(141,28,0)
(135,80,0)
(29,1,0)
(3,86,0)
(117,101,0)
(108,122,0)
(40,20,0)
(138,121,0)
(131,6,0)
(71,86,0)
(3,1,0)
(92,130,0)
(1,28,0)
(75,80,0)
(126,46,0)
(110,73,0)
(61,6,0)
(133,135,0)
(86,3,0)
(125,127,0)
(22,120,0)
(94,16,0)
(122,73,0)
(76,57,0)
(99,136,0)
(137,63,0)
(26,126,0)
(46,136,0)
(59,17,0)
(95,106,0)
(116,88,0)
(106,95,0)
(9,32,0)
(140,95,0)
(6,15,0)
(80,75,0)
(119,55,0)
(2,56,0)
(120,91,0)
(105,15,0)
(58,123,0)
(98,38,0)
(6,61,0)
(50,102,0)
(39,121,0)
(87,68,0)
(55,1,0)
(86,61,0)
(104,19,0)
(36,26,0)
(90,17,0)
(107,135,0)
(37,13,0)
(1,3,0)
(67,14,0)
(73,15,0)
(113,91,0)
(116,32,0)
(51,18,0)
(10,50,0)
(24,26,0)
(111,19,0)
(27,80,0)
(47,35,0)
(102,47,0)
(121,39,0)
(121,15,0)
(62,46,0)
(93,16,0)
(128,63,0)
(44,105,0)
(68,112,0)
(21,39,0)
(74,37,0)
(38,101,0)
(32,116,0)
(85,39,0)
(16,75,0)
(8,28,0)
(11,73,0)
(61,86,0)
(72,132,0)
(73,122,0)
(87,15,0)
(84,28,0)
(80,135,0)
(69,63,0)
(115,57,0)
(81,127,0)
(52,116,0)
(43,20,0)
(77,12,0)
(5,117,0)
(87,15,1)
(66,98,1)
(118,101,1)
(108,73,1)
(63,137,1)
(43,70,1)
(44,105,1)
(71,61,1)
(136,15,1)
(92,20,1)
(29,1,1)
(31,55,1)
(83,9,1)
(91,120,1)
(119,126,1)
(37,60,1)
(99,26,1)
(115,21,1)
(10,122,1)
(104,29,1)
(14,15,1)
(36,75,1)
(126,46,1)
(134,55,1)
(59,90,1)
(58,56,1)
(46,136,1)
(121,138,1)
(141,14,1)
(117,5,1)
(86,61,1)
(3,65,1)
(35,47,1)
(80,27,1)
(39,85,1)
(138,33,1)
(40,43,1)
(55,1,1)
(107,16,1)
(116,52,1)
(122,73,1)
(84,69,1)
(30,113,1)
(23,106,1)
(65,86,1)
(133,107,1)
(88,116,1)
(62,136,1)
(94,35,1)
(53,127,1)
(125,84,1)
(136,4,1)
(6,15,1)
(34,6,1)
(19,111,1)
(69,63,1)
(20,15,1)
(61,6,1)
(98,88,1)
(116,32,1)
(68,87,1)
(7,57,1)
(13,123,1)
(68,100,1)
(111,104,1)
(60,74,1)
(17,59,1)
(129,19,1)
(77,139,1)
(100,87,1)
(41,112,1)
(120,0,1)
(80,135,1)
(120,22,1)
(106,95,1)
(97,79,1)
(131,97,1)
(52,32,1)
(95,109,1)
(5,78,1)
(42,10,1)
(29,53,1)
(12,77,1)
(127,81,1)
(73,15,1)
(11,17,1)
(75,80,1)
(44,25,1)
(47,102,1)
(89,7,1)
(121,15,1)
(87,103,1)
(25,105,1)
(110,11,1)
(76,115,1)
(0,22,1)
(105,89,1)
(4,99,1)
(50,15,1)
(72,91,1)
(123,56,1)
(122,108,1)
(39,121,1)
(64,18,1)
(67,129,1)
(33,132,1)
(113,82,1)
(137,128,1)
(22,124,1)
(2,114,1)
(81,125,1)
(135,15,1)
(24,36,1)
(70,96,1)
(56,15,1)
(90,141,1)
(74,54,1)
(9,12,1)
(14,67,1)
(18,51,1)
(134,13,1)
(103,64,1)
(22,15,1)
(46,62,1)
(55,119,1)
(1,3,1)
(109,140,1)
(101,117,1)
(128,1,1)
(114,37,1)
(57,76,1)
(32,83,1)
(54,44,1)
(21,39,1)
(45,50,1)
(135,133,1)
(102,50,1)
(47,122,1)
(105,15,1)
(51,31,1)
(85,121,1)
(56,2,1)
(49,72,1)
(132,49,1)
(32,15,1)
(124,30,1)
(50,42,1)
(78,38,1)
(102,45,1)
(86,71,1)
(139,92,1)
(73,110,1)
(140,134,1)
(6,131,1)
(38,66,1)
(112,68,1)
(123,58,1)
(16,93,1)
(93,94,1)
(96,41,1)
(3,86,1)
(82,118,1)
(20,40,1)
(27,135,1)
(61,34,1)
(26,24,1)
(117,15,1)
(38,55,2)
(101,117,2)
(58,55,2)
(13,55,2)
(68,55,2)
(50,15,2)
(41,55,2)
(7,55,2)
(82,55,2)
(44,105,2)
(12,55,2)
(91,120,2)
(61,6,2)
(40,55,2)
(83,55,2)
(37,55,2)
(39,121,2)
(18,55,2)
(25,55,2)
(54,55,2)
(88,116,2)
(91,55,2)
(5,55,2)
(89,55,2)
(126,46,2)
(35,47,2)
(51,55,2)
(122,73,2)
(56,55,2)
(6,15,2)
(70,55,2)
(31,55,2)
(47,122,2)
(141,14,2)
(22,15,2)
(118,55,2)
(49,55,2)
(136,15,2)
(75,80,2)
(132,55,2)
(55,1,2)
(47,102,2)
(139,55,2)
(120,22,2)
(85,55,2)
(54,44,2)
(43,55,2)
(121,55,2)
(32,15,2)
(117,55,2)
(121,15,2)
(44,55,2)
(106,95,2)
(1,3,2)
(100,55,2)
(78,55,2)
(64,55,2)
(77,55,2)
(112,55,2)
(29,1,2)
(116,55,2)
(96,55,2)
(20,15,2)
(39,55,2)
(20,55,2)
(124,55,2)
(123,55,2)
(21,39,2)
(68,87,2)
(52,55,2)
(88,55,2)
(115,55,2)
(2,55,2)
(9,55,2)
(73,15,2)
(66,55,2)
(105,55,2)
(87,55,2)
(80,135,2)
(46,136,2)
(76,55,2)
(56,15,2)
(0,55,2)
(21,55,2)
(32,55,2)
(69,63,2)
(102,50,2)
(101,55,2)
(3,86,2)
(135,15,2)
(114,55,2)
(123,56,2)
(112,68,2)
(120,55,2)
(30,55,2)
(57,55,2)
(86,61,2)
(116,32,2)
(60,55,2)
(72,55,2)
(98,55,2)
(113,55,2)
(92,20,2)
(92,55,2)
(103,55,2)
(33,55,2)
(22,55,2)
(138,55,2)
(117,15,2)
(14,15,2)
(13,123,2)
(74,55,2)
(87,15,2)
(105,15,2)
-----------------------------------
(0,xtime_nsec)
(1,use_syscall = strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
(2,tkr_mono)
(3,strcmp(tk->tkr_mono.clock->name, "arch_sys_counter")
(4,wall_to_monotonic)
(5,xtime_sec)
(6,tk->tkr_mono)
(7,tk)
(8,if (!use_syscall)
(9,tk)
(10,tk)
(11,tk)
(12,vdso_data->raw_time_nsec)
(13,vdso_data->cs_shift\\t\\t= tk->tkr_mono.shift)
(14,tk->xtime_sec)
(15,struct timekeeper *tk)
(16,vdso_data->wtm_clock_sec)
(17,vdso_data->xtime_coarse_nsec)
(18,vdso_data->cs_cycle_last)
(19,vdso_data->xtime_coarse_sec)
(20,tk->raw_sec)
(21,vdso_data->cs_mono_mult\\t\\t= tk->tkr_mono.mult)
(22,tk->tkr_mono)
(23,RET)
(24,wtm_clock_nsec)
(25,mult)
(26,vdso_data->wtm_clock_nsec)
(27,tv_sec)
(28,)
(29,vdso_data->use_syscall\\t\\t\\t= use_syscall)
(30,tk)
(31,vdso_data)
(32,tk->tkr_raw)
(33,tk)
(34,clock)
(35,vdso_data->xtime_coarse_nsec\\t\\t= tk->tkr_mono.xtime_nsec >>\n\\n\\t\\t\\t\\t\\t\\t\\ttk->tkr_mono.shift)
(36,vdso_data)
(37,vdso_data->cs_shift)
(38,vdso_data->xtime_clock_sec)
(39,tk->tkr_mono.mult)
(40,raw_sec)
(41,vdso_data)
(42,tkr_mono)
(43,tk)
(44,tk->tkr_raw.mult)
(45,shift)
(46,tk->wall_to_monotonic.tv_nsec)
(47,tk->tkr_mono.xtime_nsec >>\n\\n\\t\\t\\t\\t\\t\\t\\ttk->tkr_mono.shift)
(48,use_syscall)
(49,cs_mono_mult)
(50,tk->tkr_mono)
(51,cs_cycle_last)
(52,xtime_nsec)
(53,use_syscall)
(54,vdso_data->cs_raw_mult\\t\\t= tk->tkr_raw.mult)
(55,!use_syscall)
(56,tk->tkr_mono)
(57,vdso_data->cs_raw_mult)
(58,shift)
(59,xtime_coarse_nsec)
(60,cs_shift)
(61,tk->tkr_mono.clock)
(62,tv_nsec)
(63,vdso_data->tb_seq_count)
(64,tk)
(65,"arch_sys_counter")
(66,xtime_clock_sec)
(67,xtime_sec)
(68,tk->tkr_mono.cycle_last)
(69,++vdso_data->tb_seq_count)
(70,vdso_data->raw_time_sec)
(71,name)
(72,vdso_data)
(73,tk->tkr_mono)
(74,vdso_data)
(75,vdso_data->wtm_clock_sec\\t\\t= tk->wall_to_monotonic.tv_sec)
(76,cs_raw_mult)
(77,raw_time_nsec)
(78,tk)
(79,use_syscall)
(80,tk->wall_to_monotonic.tv_sec)
(81,use_syscall)
(82,xtime_clock_nsec)
(83,tkr_raw)
(84,smp_wmb()
(85,mult)
(86,tk->tkr_mono.clock->name)
(87,tk->tkr_mono)
(88,vdso_data->raw_time_nsec        = tk->tkr_raw.xtime_nsec)
(89,tkr_raw)
(90,vdso_data)
(91,vdso_data->xtime_clock_nsec\\t= tk->tkr_mono.xtime_nsec)
(92,vdso_data->raw_time_sec         = tk->raw_sec)
(93,wtm_clock_sec)
(94,vdso_data)
(95,vdso_data->tb_seq_count)
(96,raw_time_sec)
(97,tk)
(98,vdso_data)
(99,tk)
(100,cycle_last)
(101,vdso_data->xtime_clock_sec\\t= tk->xtime_sec)
(102,tk->tkr_mono.shift)
(103,tkr_mono)
(104,vdso_data)
(105,tk->tkr_raw)
(106,++vdso_data->tb_seq_count)
(107,tk)
(108,xtime_nsec)
(109,tb_seq_count)
(110,tkr_mono)
(111,xtime_coarse_sec)
(112,vdso_data->cs_cycle_last\\t= tk->tkr_mono.cycle_last)
(113,vdso_data->xtime_clock_nsec)
(114,tk)
(115,vdso_data)
(116,tk->tkr_raw.xtime_nsec)
(117,tk->xtime_sec)
(118,vdso_data)
(119,use_syscall)
(120,tk->tkr_mono.xtime_nsec)
(121,tk->tkr_mono)
(122,tk->tkr_mono.xtime_nsec)
(123,tk->tkr_mono.shift)
(124,tkr_mono)
(125,vdso_data)
(126,vdso_data->wtm_clock_nsec\\t\\t= tk->wall_to_monotonic.tv_nsec)
(127,vdso_data->use_syscall)
(128,vdso_data)
(129,tk)
(130,)
(131,tkr_mono)
(132,vdso_data->cs_mono_mult)
(133,wall_to_monotonic)
(134,smp_wmb()
(135,tk->wall_to_monotonic)
(136,tk->wall_to_monotonic)
(137,tb_seq_count)
(138,tkr_mono)
(139,vdso_data)
(140,vdso_data)
(141,vdso_data->xtime_coarse_sec\\t\\t= tk->xtime_sec)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^