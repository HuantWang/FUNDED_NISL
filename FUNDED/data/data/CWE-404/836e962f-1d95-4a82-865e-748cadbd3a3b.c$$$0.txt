-----label-----
1
-----code-----
static FILE * badSource(FILE * data)
{
    /* POTENTIAL FLAW: Open a file - need to make sure it is closed properly in the sink */
    data = fopen("BadSource_fopen.txt", "w+");
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
15,16
15,17
16,17
18,19
18,20
18,21
19,20
23,24
24,25
-----nextToken-----
3,5,6,9,11,12,17,20,21,22,25
-----computeFrom-----
15,16
15,17
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static FILE * badSource(FILE * data){    /* POTENTIAL FLAW: Open a file - need to make sure it is closed properly in the sink */    data = fopen("BadSource_fopen.txt", "w+");    return data;}
static FILE
FILE
* badSource(FILE * data)
*
badSource
FILE * data
FILE
FILE
* data
*
data
{    /* POTENTIAL FLAW: Open a file - need to make sure it is closed properly in the sink */    data = fopen("BadSource_fopen.txt", "w+");    return data;}
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
return data;
data
data
-----joern-----
(7,2,0)
(1,7,0)
(0,3,0)
(5,9,0)
(9,3,0)
(7,3,0)
(7,6,0)
(3,6,0)
(4,9,0)
(8,7,0)
(3,2,0)
(3,9,0)
(9,4,1)
(8,3,1)
(7,3,1)
(4,5,1)
(3,9,1)
(1,7,1)
(7,2,1)
(3,2,1)
(5,0,1)
(7,8,1)
(1,7,2)
(3,9,2)
(7,3,2)
(7,2,2)
(3,2,2)
-----------------------------------
(0,data)
(1,RET)
(2,FILE * data)
(3,data = fopen("BadSource_fopen.txt", "w+")
(4,"w+")
(5,"BadSource_fopen.txt")
(6,)
(7,return data;)
(8,data)
(9,fopen("BadSource_fopen.txt", "w+")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^