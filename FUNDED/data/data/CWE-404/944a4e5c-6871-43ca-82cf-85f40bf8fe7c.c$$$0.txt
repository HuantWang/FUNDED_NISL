-----label-----
0
-----code-----
void
state(const KINFO *k, const struct varent *vent)
{
	struct proc *p;
	int flag;
	char *cp;
	char buf[16];

	p = KI_PROC(k);
	flag = p->p_flag;
	cp = buf;

	switch (p->p_stat) {

	case SSTOP:
		*cp = 'T';
		break;

	case SSLEEP:
		if (flag & P_SINTR)	/* interruptable (long) */
			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';
		else if (KI_THREAD(k)->td_flags & TDF_SINTR)
			*cp = 'S';
		else
			*cp = 'D';
		break;

	case SRUN:
	case SIDL:
		*cp = 'R';
		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {
		    ++cp;
		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);
		    while (cp[1])
			++cp;
		}
		break;

	case SZOMB:
		*cp = 'Z';
		break;

	default:
		*cp = '?';
	}
	cp++;
	if (flag & P_SWAPPEDOUT)
		*cp++ = 'W';
	if (p->p_nice < NZERO)
		*cp++ = '<';
	else if (p->p_nice > NZERO)
		*cp++ = 'N';
	if (flag & P_TRACED)
		*cp++ = 'X';
	if (flag & P_WEXIT && p->p_stat != SZOMB)
		*cp++ = 'E';
	if (flag & P_PPWAIT)
		*cp++ = 'V';
	if ((flag & P_SYSTEM) || p->p_lock > 0)
		*cp++ = 'L';
	if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)
		*cp++ = 'M';
	if (flag & P_JAILED)
		*cp++ = 'J';
	if (KI_EPROC(k)->e_flag & EPROC_SLEADER)
		*cp++ = 's';
	if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)
		*cp++ = '+';
	*cp = '\0';
	printf("%-*s", vent->width, buf);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
33,35
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
71,72
71,73
71,74
71,75
71,76
71,77
71,78
71,79
71,80
71,81
71,82
71,83
71,84
71,85
71,86
71,87
72,73
73,74
75,76
76,77
76,78
77,78
78,79
82,83
83,84
85,86
85,87
85,88
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
94,95
96,97
96,98
96,99
97,98
97,99
98,99
98,100
99,100
102,103
106,107
106,108
106,109
107,108
107,109
108,109
108,110
109,110
109,111
110,111
112,113
115,116
117,118
118,119
118,120
119,120
120,121
123,124
124,125
124,126
125,126
126,127
130,131
131,132
133,134
134,135
136,137
137,138
137,139
138,139
139,140
142,143
142,144
143,144
143,145
144,145
144,146
145,146
145,147
146,147
148,149
151,152
153,154
153,155
153,156
154,155
155,156
156,157
158,159
159,160
159,161
159,162
159,163
160,161
162,163
165,166
165,167
166,167
166,168
167,168
169,170
172,173
172,174
173,174
173,175
174,175
177,178
178,179
179,180
182,183
183,184
185,186
186,187
186,188
187,188
188,189
193,194
194,195
194,196
195,196
196,197
199,200
200,201
201,202
203,204
203,205
204,205
204,206
205,206
207,208
209,210
210,211
210,212
211,212
212,213
213,214
216,217
216,218
216,219
217,218
217,219
218,219
218,220
219,220
222,223
224,225
225,226
225,227
226,227
227,228
228,229
231,232
231,233
232,233
232,234
233,234
233,235
234,235
237,238
239,240
240,241
240,242
241,242
242,243
243,244
246,247
246,248
247,248
247,249
248,249
250,251
252,253
253,254
253,255
254,255
255,256
256,257
259,260
259,261
260,261
260,262
261,262
261,263
262,263
264,265
266,267
266,268
267,268
267,269
268,269
271,272
273,274
274,275
274,276
275,276
276,277
277,278
280,281
280,282
281,282
281,283
282,283
284,285
286,287
287,288
287,289
288,289
289,290
290,291
293,294
293,295
294,295
294,296
295,296
296,297
296,298
297,298
299,300
301,302
301,303
302,303
302,304
303,304
307,308
308,309
308,310
309,310
310,311
311,312
314,315
314,316
315,316
315,317
316,317
316,318
317,318
320,321
320,322
321,322
321,323
322,323
322,324
323,324
325,326
329,330
330,331
330,332
331,332
332,333
333,334
336,337
336,338
337,338
337,339
338,339
340,341
342,343
343,344
343,345
344,345
345,346
346,347
349,350
349,351
350,351
350,352
351,352
351,353
352,353
352,354
353,354
355,356
358,359
360,361
361,362
361,363
362,363
363,364
364,365
367,368
367,369
368,369
368,370
369,370
370,371
370,372
371,372
373,374
375,376
375,377
376,377
376,378
377,378
377,379
378,379
380,381
383,384
383,385
384,385
384,386
385,386
387,388
390,391
391,392
391,393
392,393
393,394
394,395
397,398
398,399
398,400
399,400
400,401
403,404
404,405
404,406
404,407
404,408
405,406
408,409
408,410
409,410
412,413
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,29,32,34,35,38,40,42,46,49,51,55,58,59,63,65,69,70,74,79,80,81,84,88,90,95,100,101,103,104,105,111,113,114,116,121,122,127,128,129,132,135,140,141,147,149,150,152,157,161,163,164,168,170,171,175,176,180,181,184,189,190,191,192,197,198,202,206,208,214,215,220,221,223,229,230,235,236,238,244,245,249,251,257,258,263,265,269,270,272,278,279,283,285,291,292,298,300,304,305,306,312,313,318,319,324,326,327,328,334,335,339,341,347,348,354,356,357,359,365,366,372,374,379,381,382,386,388,389,395,396,401,402,406,407,410,411,413
-----computeFrom-----
44,45
44,46
53,54
53,55
61,62
61,63
76,77
76,78
86,87
86,88
92,93
92,94
97,98
97,99
107,108
107,109
118,119
118,120
124,125
124,126
137,138
137,139
143,144
143,145
186,187
186,188
194,195
194,196
204,205
204,206
210,211
210,212
217,218
217,219
225,226
225,227
232,233
232,234
240,241
240,242
247,248
247,249
253,254
253,255
260,261
260,262
261,262
261,263
266,267
266,268
274,275
274,276
281,282
281,283
287,288
287,289
294,295
294,296
296,297
296,298
301,302
301,303
308,309
308,310
315,316
315,317
316,317
316,318
320,321
320,322
330,331
330,332
337,338
337,339
343,344
343,345
350,351
350,352
361,362
361,363
368,369
368,370
370,371
370,372
375,376
375,377
391,392
391,393
398,399
398,400
-----guardedBy-----
149,170
-----guardedByNegation-----
220,235
221,236
223,238
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;WhileStatement;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
voidstate(const KINFO *k, const struct varent *vent){	struct proc *p;	int flag;	char *cp;	char buf[16];	p = KI_PROC(k);	flag = p->p_flag;	cp = buf;	switch (p->p_stat) {	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}	cp++;	if (flag & P_SWAPPEDOUT)		*cp++ = 'W';	if (p->p_nice < NZERO)		*cp++ = '<';	else if (p->p_nice > NZERO)		*cp++ = 'N';	if (flag & P_TRACED)		*cp++ = 'X';	if (flag & P_WEXIT && p->p_stat != SZOMB)		*cp++ = 'E';	if (flag & P_PPWAIT)		*cp++ = 'V';	if ((flag & P_SYSTEM) || p->p_lock > 0)		*cp++ = 'L';	if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)		*cp++ = 'M';	if (flag & P_JAILED)		*cp++ = 'J';	if (KI_EPROC(k)->e_flag & EPROC_SLEADER)		*cp++ = 's';	if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)		*cp++ = '+';	*cp = '\0';	printf("%-*s", vent->width, buf);}
void
state(const KINFO *k, const struct varent *vent)
state
const KINFO *k
const KINFO
KINFO
*k
*
k
const struct varent *vent
const struct varent
varent
*vent
*
vent
{	struct proc *p;	int flag;	char *cp;	char buf[16];	p = KI_PROC(k);	flag = p->p_flag;	cp = buf;	switch (p->p_stat) {	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}	cp++;	if (flag & P_SWAPPEDOUT)		*cp++ = 'W';	if (p->p_nice < NZERO)		*cp++ = '<';	else if (p->p_nice > NZERO)		*cp++ = 'N';	if (flag & P_TRACED)		*cp++ = 'X';	if (flag & P_WEXIT && p->p_stat != SZOMB)		*cp++ = 'E';	if (flag & P_PPWAIT)		*cp++ = 'V';	if ((flag & P_SYSTEM) || p->p_lock > 0)		*cp++ = 'L';	if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)		*cp++ = 'M';	if (flag & P_JAILED)		*cp++ = 'J';	if (KI_EPROC(k)->e_flag & EPROC_SLEADER)		*cp++ = 's';	if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)		*cp++ = '+';	*cp = '\0';	printf("%-*s", vent->width, buf);}
struct proc *p;
struct proc *p;
struct proc
proc
*p
*
p
int flag;
int flag;
int
flag
flag
char *cp;
char *cp;
char
*cp
*
cp
char buf[16];
char buf[16];
char
buf[16]
buf
[16]
16
p = KI_PROC(k);
p = KI_PROC(k)
p
p
KI_PROC(k)
KI_PROC
KI_PROC
k
k
flag = p->p_flag;
flag = p->p_flag
flag
flag
p->p_flag
p
p
p_flag
cp = buf;
cp = buf
cp
cp
buf
buf
switch (p->p_stat) {	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}
p->p_stat
p
p
p_stat
{	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}
case SSTOP:
SSTOP
SSTOP
*cp = 'T';
*cp = 'T'
*cp
cp
cp
'T'
break;
case SSLEEP:
SSLEEP
SSLEEP
if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';
flag & P_SINTR
flag
flag
P_SINTR
P_SINTR
*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';
*cp = p->p_slptime >= MAXSLP ? 'I' : 'S'
*cp
cp
cp
p->p_slptime >= MAXSLP ? 'I' : 'S'
p->p_slptime >= MAXSLP
p->p_slptime
p
p
p_slptime
MAXSLP
MAXSLP
'I'
'S'
if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';
KI_THREAD(k)->td_flags & TDF_SINTR
KI_THREAD(k)->td_flags
KI_THREAD(k)
KI_THREAD
KI_THREAD
k
k
td_flags
TDF_SINTR
TDF_SINTR
*cp = 'S';
*cp = 'S'
*cp
cp
cp
'S'
*cp = 'D';
*cp = 'D'
*cp
cp
cp
'D'
break;
case SRUN:
SRUN
SRUN
case SIDL:
SIDL
SIDL
*cp = 'R';
*cp = 'R'
*cp
cp
cp
'R'
if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}
KI_THREAD(k)->td_flags & TDF_RUNNING
KI_THREAD(k)->td_flags
KI_THREAD(k)
KI_THREAD
KI_THREAD
k
k
td_flags
TDF_RUNNING
TDF_RUNNING
{		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}
++cp;
++cp
cp
cp
sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);
sprintf(cp, "%d", KI_EPROC(k)->e_cpuid)
sprintf
sprintf
cp
cp
"%d"
KI_EPROC(k)->e_cpuid
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_cpuid
while (cp[1])			++cp;
cp[1]
cp
cp
1
++cp;
++cp
cp
cp
break;
case SZOMB:
SZOMB
SZOMB
*cp = 'Z';
*cp = 'Z'
*cp
cp
cp
'Z'
break;
default:
*cp = '?';
*cp = '?'
*cp
cp
cp
'?'
cp++;
cp++
cp
cp
if (flag & P_SWAPPEDOUT)		*cp++ = 'W';
flag & P_SWAPPEDOUT
flag
flag
P_SWAPPEDOUT
P_SWAPPEDOUT
*cp++ = 'W';
*cp++ = 'W'
*cp++
cp++
cp
cp
'W'
if (p->p_nice < NZERO)		*cp++ = '<';	else if (p->p_nice > NZERO)		*cp++ = 'N';
p->p_nice < NZERO
p->p_nice
p
p
p_nice
NZERO
NZERO
*cp++ = '<';
*cp++ = '<'
*cp++
cp++
cp
cp
'<'
if (p->p_nice > NZERO)		*cp++ = 'N';
p->p_nice > NZERO
p->p_nice
p
p
p_nice
NZERO
NZERO
*cp++ = 'N';
*cp++ = 'N'
*cp++
cp++
cp
cp
'N'
if (flag & P_TRACED)		*cp++ = 'X';
flag & P_TRACED
flag
flag
P_TRACED
P_TRACED
*cp++ = 'X';
*cp++ = 'X'
*cp++
cp++
cp
cp
'X'
if (flag & P_WEXIT && p->p_stat != SZOMB)		*cp++ = 'E';
flag & P_WEXIT && p->p_stat != SZOMB
flag & P_WEXIT
flag
flag
P_WEXIT
P_WEXIT
p->p_stat != SZOMB
p->p_stat
p
p
p_stat
SZOMB
SZOMB
*cp++ = 'E';
*cp++ = 'E'
*cp++
cp++
cp
cp
'E'
if (flag & P_PPWAIT)		*cp++ = 'V';
flag & P_PPWAIT
flag
flag
P_PPWAIT
P_PPWAIT
*cp++ = 'V';
*cp++ = 'V'
*cp++
cp++
cp
cp
'V'
if ((flag & P_SYSTEM) || p->p_lock > 0)		*cp++ = 'L';
(flag & P_SYSTEM) || p->p_lock > 0
(flag & P_SYSTEM)
flag & P_SYSTEM
flag
flag
P_SYSTEM
P_SYSTEM
p->p_lock > 0
p->p_lock
p
p
p_lock
0
*cp++ = 'L';
*cp++ = 'L'
*cp++
cp++
cp
cp
'L'
if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)		*cp++ = 'M';
numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0
numcpus > 1
numcpus
numcpus
1
KI_THREAD(k)->td_mpcount_unused == 0
KI_THREAD(k)->td_mpcount_unused
KI_THREAD(k)
KI_THREAD
KI_THREAD
k
k
td_mpcount_unused
0
*cp++ = 'M';
*cp++ = 'M'
*cp++
cp++
cp
cp
'M'
if (flag & P_JAILED)		*cp++ = 'J';
flag & P_JAILED
flag
flag
P_JAILED
P_JAILED
*cp++ = 'J';
*cp++ = 'J'
*cp++
cp++
cp
cp
'J'
if (KI_EPROC(k)->e_flag & EPROC_SLEADER)		*cp++ = 's';
KI_EPROC(k)->e_flag & EPROC_SLEADER
KI_EPROC(k)->e_flag
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_flag
EPROC_SLEADER
EPROC_SLEADER
*cp++ = 's';
*cp++ = 's'
*cp++
cp++
cp
cp
's'
if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)		*cp++ = '+';
(flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid
(flag & P_CONTROLT)
flag & P_CONTROLT
flag
flag
P_CONTROLT
P_CONTROLT
KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid
KI_EPROC(k)->e_pgid
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_pgid
KI_EPROC(k)->e_tpgid
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_tpgid
*cp++ = '+';
*cp++ = '+'
*cp++
cp++
cp
cp
'+'
*cp = '\0';
*cp = '\0'
*cp
cp
cp
'\0'
printf("%-*s", vent->width, buf);
printf("%-*s", vent->width, buf)
printf
printf
"%-*s"
vent->width
vent
vent
width
buf
buf
-----joern-----
(137,204,0)
(155,172,0)
(54,100,0)
(7,70,0)
(141,204,0)
(169,199,0)
(147,100,0)
(172,100,0)
(6,25,0)
(140,145,0)
(69,133,0)
(25,139,0)
(207,49,0)
(13,206,0)
(102,139,0)
(65,20,0)
(36,100,0)
(225,53,0)
(159,16,0)
(2,216,0)
(195,245,0)
(107,89,0)
(162,57,0)
(103,57,0)
(62,116,0)
(70,139,0)
(127,234,0)
(131,96,0)
(122,189,0)
(154,8,0)
(75,35,0)
(180,26,0)
(36,225,0)
(14,185,0)
(161,198,0)
(149,227,0)
(82,100,0)
(118,222,0)
(207,116,0)
(206,202,0)
(211,92,0)
(185,219,0)
(3,92,0)
(214,173,0)
(54,209,0)
(181,57,0)
(77,191,0)
(16,202,0)
(204,139,0)
(116,62,0)
(175,75,0)
(86,1,0)
(242,57,0)
(176,179,0)
(141,178,0)
(5,100,0)
(105,245,0)
(176,177,0)
(146,64,0)
(77,139,0)
(150,230,0)
(52,202,0)
(96,83,0)
(94,30,0)
(239,219,0)
(74,136,0)
(3,48,0)
(100,57,0)
(144,36,0)
(27,245,0)
(66,234,0)
(9,1,0)
(28,8,0)
(128,188,0)
(138,9,0)
(209,245,0)
(178,133,0)
(115,226,0)
(143,173,0)
(91,65,0)
(47,60,0)
(190,202,0)
(80,100,0)
(164,26,0)
(192,223,0)
(173,202,0)
(12,66,0)
(202,25,0)
(72,193,0)
(58,23,0)
(92,3,0)
(174,183,0)
(148,82,0)
(4,174,0)
(153,216,0)
(59,185,0)
(64,121,0)
(207,183,0)
(183,174,0)
(49,173,0)
(231,80,0)
(203,81,0)
(23,245,0)
(121,123,0)
(84,245,0)
(45,9,0)
(39,220,0)
(142,128,0)
(225,36,0)
(191,77,0)
(217,169,0)
(206,13,0)
(92,100,0)
(221,151,0)
(49,207,0)
(37,232,0)
(198,55,0)
(235,52,0)
(220,139,0)
(185,100,0)
(236,122,0)
(50,190,0)
(99,151,0)
(160,5,0)
(134,77,0)
(11,89,0)
(35,185,0)
(56,57,0)
(83,145,0)
(223,247,0)
(41,15,0)
(222,55,0)
(244,57,0)
(62,20,0)
(68,62,0)
(33,183,0)
(165,57,0)
(24,202,0)
(114,60,0)
(97,189,0)
(177,100,0)
(98,245,0)
(133,202,0)
(185,35,0)
(21,102,0)
(243,179,0)
(83,96,0)
(10,172,0)
(70,20,0)
(241,141,0)
(197,81,0)
(126,15,0)
(15,216,0)
(229,47,0)
(139,57,0)
(158,47,0)
(128,20,0)
(109,100,0)
(71,16,0)
(30,230,0)
(247,157,0)
(170,124,0)
(106,245,0)
(246,123,0)
(109,90,0)
(248,73,0)
(222,20,0)
(116,207,0)
(187,203,0)
(221,112,0)
(220,226,0)
(233,147,0)
(237,204,0)
(22,53,0)
(15,57,0)
(213,191,0)
(138,20,0)
(205,245,0)
(93,48,0)
(43,73,0)
(200,245,0)
(87,232,0)
(178,141,0)
(163,57,0)
(82,219,0)
(202,57,0)
(30,139,0)
(204,141,0)
(88,124,0)
(121,64,0)
(89,65,0)
(173,49,0)
(174,20,0)
(111,245,0)
(120,57,0)
(216,15,0)
(189,122,0)
(55,198,0)
(44,52,0)
(26,100,0)
(212,157,0)
(19,206,0)
(0,57,0)
(139,70,0)
(101,57,0)
(186,109,0)
(9,138,0)
(223,100,0)
(47,139,0)
(147,23,0)
(113,245,0)
(218,117,0)
(88,227,0)
(79,107,0)
(196,116,0)
(182,87,0)
(216,95,0)
(1,9,0)
(34,206,0)
(124,88,0)
(51,209,0)
(167,57,0)
(85,102,0)
(226,13,0)
(29,163,0)
(203,100,0)
(104,17,0)
(124,100,0)
(247,223,0)
(89,107,0)
(215,57,0)
(35,75,0)
(135,12,0)
(25,202,0)
(151,221,0)
(210,133,0)
(40,245,0)
(156,57,0)
(151,100,0)
(18,30,0)
(5,76,0)
(32,43,0)
(110,57,0)
(117,105,0)
(73,245,0)
(75,20,0)
(13,226,0)
(65,89,0)
(78,245,0)
(194,54,0)
(228,35,0)
(8,202,0)
(201,55,0)
(119,139,0)
(60,47,0)
(152,245,0)
(234,230,0)
(171,130,0)
(61,122,0)
(224,190,0)
(234,66,0)
(87,100,0)
(97,188,0)
(125,100,0)
(163,100,0)
(38,57,0)
(12,100,0)
(55,222,0)
(226,220,0)
(169,100,0)
(117,100,0)
(81,57,0)
(67,188,0)
(133,178,0)
(90,109,0)
(189,97,0)
(193,202,0)
(230,234,0)
(168,25,0)
(208,100,0)
(96,100,0)
(230,30,0)
(132,105,0)
(240,138,0)
(129,97,0)
(183,207,0)
(46,193,0)
(108,77,0)
(188,97,0)
(166,76,0)
(177,176,0)
(43,100,0)
(238,220,0)
(199,169,0)
(199,136,0)
(90,17,0)
(10,130,0)
(63,177,0)
(188,128,0)
(184,112,0)
(42,234,0)
(64,100,0)
(172,10,0)
(184,221,1)
(141,241,1)
(203,187,1)
(188,128,1)
(29,200,1)
(80,231,1)
(77,134,1)
(175,59,1)
(117,218,1)
(118,123,1)
(177,100,1)
(158,191,1)
(72,178,1)
(234,127,1)
(49,173,1)
(82,148,1)
(195,76,1)
(71,189,1)
(25,168,1)
(34,112,1)
(187,49,1)
(70,7,1)
(73,248,1)
(109,186,1)
(127,230,1)
(241,204,1)
(75,20,1)
(18,94,1)
(9,45,1)
(16,159,1)
(159,71,1)
(155,178,1)
(54,100,1)
(79,89,1)
(61,236,1)
(58,147,1)
(183,174,1)
(173,143,1)
(55,201,1)
(59,14,1)
(233,102,1)
(47,139,1)
(134,108,1)
(35,75,1)
(192,60,1)
(135,190,1)
(214,136,1)
(191,213,1)
(15,41,1)
(81,197,1)
(147,100,1)
(200,107,1)
(71,48,1)
(89,11,1)
(124,100,1)
(163,29,1)
(87,182,1)
(174,4,1)
(198,161,1)
(102,21,1)
(47,229,1)
(248,43,1)
(166,5,1)
(60,47,1)
(12,100,1)
(86,9,1)
(177,63,1)
(112,184,1)
(54,194,1)
(226,220,1)
(176,177,1)
(108,227,1)
(157,212,1)
(17,104,1)
(2,126,1)
(106,209,1)
(153,2,1)
(55,222,1)
(116,196,1)
(12,135,1)
(222,118,1)
(72,130,1)
(117,100,1)
(8,154,1)
(147,233,1)
(161,55,1)
(199,169,1)
(105,132,1)
(78,23,1)
(235,163,1)
(128,142,1)
(164,185,1)
(3,92,1)
(102,139,1)
(94,12,1)
(138,20,1)
(34,193,1)
(143,214,1)
(1,9,1)
(139,70,1)
(31,15,1)
(203,100,1)
(35,228,1)
(125,202,1)
(43,32,1)
(96,131,1)
(26,100,1)
(64,100,1)
(96,100,1)
(163,100,1)
(74,199,1)
(30,18,1)
(49,207,1)
(189,122,1)
(200,26,1)
(208,125,1)
(170,52,1)
(44,235,1)
(182,1,1)
(28,60,1)
(225,36,1)
(65,20,1)
(230,30,1)
(222,20,1)
(114,47,1)
(22,225,1)
(29,78,1)
(217,198,1)
(99,193,1)
(234,42,1)
(13,206,1)
(151,100,1)
(193,46,1)
(221,151,1)
(87,100,1)
(204,237,1)
(213,77,1)
(183,33,1)
(196,62,1)
(23,58,1)
(77,139,1)
(107,89,1)
(128,20,1)
(30,139,1)
(216,153,1)
(14,82,1)
(247,223,1)
(210,8,1)
(123,246,1)
(148,107,1)
(173,202,1)
(197,203,1)
(194,102,1)
(174,20,1)
(210,145,1)
(172,155,1)
(201,222,1)
(97,129,1)
(236,13,1)
(188,67,1)
(223,100,1)
(10,172,1)
(179,243,1)
(92,100,1)
(15,216,1)
(100,208,1)
(160,1,1)
(220,238,1)
(4,116,1)
(39,206,1)
(185,100,1)
(116,62,1)
(108,52,1)
(191,77,1)
(198,55,1)
(227,149,1)
(226,115,1)
(228,75,1)
(132,117,1)
(53,22,1)
(185,35,1)
(26,180,1)
(209,51,1)
(88,124,1)
(29,195,1)
(211,189,1)
(216,95,1)
(62,20,1)
(89,65,1)
(193,202,1)
(190,202,1)
(202,25,1)
(145,140,1)
(109,100,1)
(107,79,1)
(223,192,1)
(37,87,1)
(154,28,1)
(9,138,1)
(189,97,1)
(218,102,1)
(28,179,1)
(178,133,1)
(7,119,1)
(32,102,1)
(65,91,1)
(11,65,1)
(168,6,1)
(149,88,1)
(76,166,1)
(169,217,1)
(129,188,1)
(67,128,1)
(124,170,1)
(236,17,1)
(195,232,1)
(52,44,1)
(151,99,1)
(195,66,1)
(43,100,1)
(243,176,1)
(204,139,1)
(92,211,1)
(29,73,1)
(68,173,1)
(62,68,1)
(82,100,1)
(229,158,1)
(97,188,1)
(36,144,1)
(144,49,1)
(75,175,1)
(207,183,1)
(91,105,1)
(51,54,1)
(19,34,1)
(130,171,1)
(142,122,1)
(206,19,1)
(234,230,1)
(231,26,1)
(63,191,1)
(45,138,1)
(133,202,1)
(190,224,1)
(146,16,1)
(64,146,1)
(172,100,1)
(36,100,1)
(238,39,1)
(28,157,1)
(131,8,1)
(33,174,1)
(246,121,1)
(21,85,1)
(214,198,1)
(85,100,1)
(5,160,1)
(187,53,1)
(206,202,1)
(25,139,1)
(240,190,1)
(5,100,1)
(133,69,1)
(48,93,1)
(29,106,1)
(60,114,1)
(70,20,1)
(1,86,1)
(178,141,1)
(224,50,1)
(80,100,1)
(16,202,1)
(180,164,1)
(121,64,1)
(237,137,1)
(83,96,1)
(46,72,1)
(6,24,1)
(122,61,1)
(41,216,1)
(150,30,1)
(232,37,1)
(230,150,1)
(136,74,1)
(24,139,1)
(169,100,1)
(118,16,1)
(115,220,1)
(171,10,1)
(50,102,1)
(220,139,1)
(8,202,1)
(66,234,1)
(141,204,1)
(164,80,1)
(186,13,1)
(137,133,1)
(52,202,1)
(90,109,1)
(13,226,1)
(207,116,1)
(126,81,1)
(138,240,1)
(93,3,1)
(140,83,1)
(212,247,1)
(104,90,1)
(42,230,1)
(69,210,1)
(76,1,2)
(87,1,2)
(13,206,2)
(191,77,2)
(144,49,2)
(164,26,2)
(188,122,2)
(149,52,2)
(237,133,2)
(45,190,2)
(33,173,2)
(178,141,2)
(114,191,2)
(190,202,2)
(36,100,2)
(127,230,2)
(185,100,2)
(241,133,2)
(177,100,2)
(14,107,2)
(231,26,2)
(64,100,2)
(96,100,2)
(175,107,2)
(247,223,2)
(211,189,2)
(68,173,2)
(172,100,2)
(225,36,2)
(82,100,2)
(233,102,2)
(97,188,2)
(1,190,2)
(109,13,2)
(145,8,2)
(180,107,2)
(42,230,2)
(189,97,2)
(30,190,2)
(54,102,2)
(158,191,2)
(35,107,2)
(62,20,2)
(132,102,2)
(50,102,2)
(203,100,2)
(47,139,2)
(104,13,2)
(178,133,2)
(88,124,2)
(169,198,2)
(51,102,2)
(209,102,2)
(202,25,2)
(146,16,2)
(59,107,2)
(1,9,2)
(48,189,2)
(234,190,2)
(221,151,2)
(52,202,2)
(47,191,2)
(3,189,2)
(99,193,2)
(171,178,2)
(117,102,2)
(49,173,2)
(184,193,2)
(83,8,2)
(142,122,2)
(174,20,2)
(74,198,2)
(26,100,2)
(240,190,2)
(66,234,2)
(49,207,2)
(234,230,2)
(176,177,2)
(58,102,2)
(130,178,2)
(90,109,2)
(230,30,2)
(77,139,2)
(155,178,2)
(218,102,2)
(216,95,2)
(228,107,2)
(4,173,2)
(12,190,2)
(80,100,2)
(128,122,2)
(185,107,2)
(193,202,2)
(66,190,2)
(172,178,2)
(174,173,2)
(212,60,2)
(190,102,2)
(198,55,2)
(83,96,2)
(204,133,2)
(5,1,2)
(232,1,2)
(147,102,2)
(80,26,2)
(243,191,2)
(141,204,2)
(26,107,2)
(141,133,2)
(88,52,2)
(157,60,2)
(225,49,2)
(107,102,2)
(92,189,2)
(136,198,2)
(177,191,2)
(194,102,2)
(23,102,2)
(8,202,2)
(116,173,2)
(199,169,2)
(124,100,2)
(43,100,2)
(75,20,2)
(121,16,2)
(53,49,2)
(18,190,2)
(182,1,2)
(16,202,2)
(43,102,2)
(62,173,2)
(139,70,2)
(223,60,2)
(183,173,2)
(185,35,2)
(96,8,2)
(163,100,2)
(238,206,2)
(102,139,2)
(70,20,2)
(25,139,2)
(32,102,2)
(226,206,2)
(26,26,2)
(60,47,2)
(105,102,2)
(10,172,2)
(222,20,2)
(64,16,2)
(36,49,2)
(186,13,2)
(35,75,2)
(207,173,2)
(220,206,2)
(170,52,2)
(150,190,2)
(223,100,2)
(87,100,2)
(92,100,2)
(229,191,2)
(189,122,2)
(78,102,2)
(206,202,2)
(55,222,2)
(124,52,2)
(93,189,2)
(116,62,2)
(200,102,2)
(10,178,2)
(128,20,2)
(37,1,2)
(82,107,2)
(117,100,2)
(123,16,2)
(13,226,2)
(3,92,2)
(183,174,2)
(94,190,2)
(227,52,2)
(226,220,2)
(79,102,2)
(30,139,2)
(164,107,2)
(131,8,2)
(151,193,2)
(73,102,2)
(147,100,2)
(112,193,2)
(107,89,2)
(148,107,2)
(63,191,2)
(9,138,2)
(91,102,2)
(106,102,2)
(54,100,2)
(221,193,2)
(65,102,2)
(160,1,2)
(138,20,2)
(173,202,2)
(109,100,2)
(169,100,2)
(67,122,2)
(151,100,2)
(97,122,2)
(195,102,2)
(15,216,2)
(75,107,2)
(115,206,2)
(207,116,2)
(121,64,2)
(247,60,2)
(207,183,2)
(89,102,2)
(9,190,2)
(176,191,2)
(246,16,2)
(11,102,2)
(17,13,2)
(5,100,2)
(140,8,2)
(188,128,2)
(133,202,2)
(230,190,2)
(220,139,2)
(135,190,2)
(199,198,2)
(138,190,2)
(179,191,2)
(12,100,2)
(89,65,2)
(86,190,2)
(65,20,2)
(204,139,2)
(90,13,2)
(22,49,2)
(129,122,2)
(196,173,2)
(60,191,2)
(39,206,2)
(248,102,2)
(192,60,2)
(224,102,2)
(137,133,2)
(166,1,2)
(217,198,2)
(180,26,2)
-----------------------------------
(0,if (flag & P_SWAPPEDOUT)
(1,KI_THREAD(k)
(2,vent)
(3,*cp++)
(4,k)
(5,*cp)
(6,p)
(7,k)
(8,flag & P_TRACED)
(9,KI_THREAD(k)
(10,*cp++)
(11,td_flags)
(12,*cp)
(13,(flag & P_SYSTEM)
(14,cp)
(15,printf("%-*s", vent->width, buf)
(16,flag & P_JAILED)
(17,*cp++ = \'L\')
(18,p_slptime)
(19,P_SYSTEM)
(20,const KINFO *k)
(21,p_stat)
(22,\'+\')
(23,*cp = \'Z\')
(24,flag)
(25,p->p_flag)
(26,cp[1])
(27,default:)
(28,flag)
(29,cp)
(30,p->p_slptime)
(31,RET)
(32,cp)
(33,e_tpgid)
(34,flag)
(35,KI_EPROC(k)
(36,cp++)
(37,\'S\')
(38,if (flag & P_WEXIT && p->p_stat != SZOMB)
(39,p)
(40,case SRUN:)
(41,buf)
(42,\'S\')
(43,*cp)
(44,P_SWAPPEDOUT)
(45,td_flags)
(46,P_PPWAIT)
(47,p->p_nice)
(48,*cp++ = \'M\')
(49,(flag & P_CONTROLT)
(50,flag)
(51,\'T\')
(52,flag & P_SWAPPEDOUT)
(53,*cp++ = \'+\')
(54,*cp)
(55,KI_EPROC(k)
(56,if (flag & P_PPWAIT)
(57,)
(58,\'Z\')
(59,"%d")
(60,p->p_nice > NZERO)
(61,1)
(62,KI_EPROC(k)
(63,cp)
(64,cp++)
(65,KI_THREAD(k)
(66,*cp = p->p_slptime >= MAXSLP ? \'I\' : \'S\')
(67,td_mpcount_unused)
(68,k)
(69,P_WEXIT)
(70,KI_PROC(k)
(71,flag)
(72,flag)
(73,*cp = \'?\')
(74,\'s\')
(75,KI_EPROC(k)
(76,*cp = \'D\')
(77,p->p_nice)
(78,break;)
(79,TDF_RUNNING)
(80,++cp)
(81,*cp = \'\\0\')
(82,++cp)
(83,*cp++)
(84,case SIDL:)
(85,p)
(86,TDF_SINTR)
(87,*cp)
(88,*cp++)
(89,KI_THREAD(k)
(90,*cp++)
(91,k)
(92,cp++)
(93,\'M\')
(94,p)
(95,const struct varent *vent)
(96,cp++)
(97,KI_THREAD(k)
(98,case SSTOP:)
(99,cp)
(100,cp = buf)
(101,buf)
(102,p->p_stat)
(103,cp)
(104,\'L\')
(105,*cp = \'R\')
(106,break;)
(107,KI_THREAD(k)
(108,p)
(109,cp++)
(110,switch (p->p_stat)
(111,if (KI_THREAD(k)
(112,*cp++ = \'V\')
(113,if (flag & P_SINTR)
(114,NZERO)
(115,0)
(116,KI_EPROC(k)
(117,*cp)
(118,k)
(119,p)
(120,if (p->p_nice < NZERO)
(121,*cp++)
(122,numcpus > 1)
(123,*cp++ = \'J\')
(124,cp++)
(125,cp)
(126,"%-*s")
(127,\'I\')
(128,KI_THREAD(k)
(129,0)
(130,*cp++ = \'E\')
(131,cp)
(132,\'R\')
(133,flag & P_WEXIT)
(134,p_nice)
(135,cp)
(136,*cp++ = \'s\')
(137,p)
(138,KI_THREAD(k)
(139,p = KI_PROC(k)
(140,\'X\')
(141,p->p_stat != SZOMB)
(142,k)
(143,P_CONTROLT)
(144,cp)
(145,*cp++ = \'X\')
(146,cp)
(147,*cp)
(148,cp)
(149,\'W\')
(150,MAXSLP)
(151,cp++)
(152,case SZOMB:)
(153,width)
(154,P_TRACED)
(155,cp)
(156,if ((flag & P_SYSTEM)
(157,*cp++ = \'N\')
(158,p)
(159,P_JAILED)
(160,cp)
(161,EPROC_SLEADER)
(162,p)
(163,cp++)
(164,cp)
(165,if (flag & P_TRACED)
(166,\'D\')
(167,if (flag & P_JAILED)
(168,p_flag)
(169,cp++)
(170,cp)
(171,\'E\')
(172,cp++)
(173,flag & P_CONTROLT)
(174,KI_EPROC(k)
(175,k)
(176,*cp++)
(177,cp++)
(178,flag & P_WEXIT && p->p_stat != SZOMB)
(179,*cp++ = \'<\')
(180,1)
(181,if ((flag & P_CONTROLT)
(182,cp)
(183,KI_EPROC(k)
(184,\'V\')
(185,sprintf(cp, "%d", KI_EPROC(k)
(186,cp)
(187,cp)
(188,KI_THREAD(k)
(189,numcpus > 1 && KI_THREAD(k)
(190,flag & P_SINTR)
(191,p->p_nice < NZERO)
(192,cp)
(193,flag & P_PPWAIT)
(194,cp)
(195,break;)
(196,e_pgid)
(197,\'\\0\')
(198,KI_EPROC(k)
(199,*cp++)
(200,break;)
(201,e_flag)
(202,flag = p->p_flag)
(203,*cp)
(204,p->p_stat)
(205,case SSLEEP:)
(206,flag & P_SYSTEM)
(207,KI_EPROC(k)
(208,buf)
(209,*cp = \'T\')
(210,flag)
(211,cp)
(212,\'N\')
(213,NZERO)
(214,flag)
(215,if (numcpus > 1 && KI_THREAD(k)
(216,vent->width)
(217,cp)
(218,cp)
(219,)
(220,p->p_lock)
(221,*cp++)
(222,KI_EPROC(k)
(223,cp++)
(224,P_SINTR)
(225,*cp++)
(226,p->p_lock > 0)
(227,*cp++ = \'W\')
(228,e_cpuid)
(229,p_nice)
(230,p->p_slptime >= MAXSLP)
(231,cp)
(232,*cp = \'S\')
(233,cp)
(234,p->p_slptime >= MAXSLP ? \'I\' : \'S\')
(235,flag)
(236,numcpus)
(237,p_stat)
(238,p_lock)
(239,while (cp[1])
(240,k)
(241,SZOMB)
(242,if (KI_EPROC(k)
(243,\'<\')
(244,flag)
(245,)
(246,\'J\')
(247,*cp++)
(248,\'?\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^