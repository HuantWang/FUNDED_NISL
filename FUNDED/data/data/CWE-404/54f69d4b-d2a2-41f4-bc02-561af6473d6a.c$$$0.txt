-----label-----
1
-----code-----
void CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType myStruct)
{
    char * data = myStruct.structFirst;
    printLine(data);
    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
-----nextToken-----
2,4,7,9,13,15,16,20,21,25,27,31,33
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType myStruct){    char * data = myStruct.structFirst;    printLine(data);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
void
CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType myStruct)
CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67b_badSink
CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType myStruct
CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType
CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType
myStruct
myStruct
{    char * data = myStruct.structFirst;    printLine(data);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
char * data = myStruct.structFirst;
char * data = myStruct.structFirst;
char
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(12,6,0)
(2,4,0)
(0,2,0)
(3,6,0)
(0,4,0)
(7,4,0)
(2,6,0)
(1,0,0)
(10,2,0)
(8,5,0)
(6,9,0)
(5,2,0)
(5,4,0)
(6,2,0)
(0,2,1)
(6,9,1)
(3,10,1)
(5,2,1)
(5,8,1)
(0,1,1)
(12,3,1)
(6,12,1)
(11,5,1)
(1,2,1)
(8,0,1)
(2,6,1)
(6,9,2)
(2,6,2)
(0,2,2)
(5,2,2)
-----------------------------------
(0,printLine(data)
(1,data)
(2,* data = myStruct.structFirst)
(3,myStruct)
(4,)
(5,free(data)
(6,myStruct.structFirst)
(7,data)
(8,data)
(9,CWE590_Free_Memory_Not_on_Heap__free_char_alloca_67_structType myStruct)
(10,data)
(11,RET)
(12,structFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^