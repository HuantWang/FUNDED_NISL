-----label-----
1
-----code-----
static int * badSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
45,47
46,47
50,51
51,52
51,53
52,53
54,55
54,56
55,56
58,59
59,60
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,47,48,49,53,56,57,60
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int * badSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
static int
* badSource(int * data)
*
badSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(1,8,0)
(24,26,0)
(23,10,0)
(2,1,0)
(27,20,0)
(28,10,0)
(26,24,0)
(23,6,0)
(11,6,0)
(1,23,0)
(13,23,0)
(0,5,0)
(29,15,0)
(17,29,0)
(20,8,0)
(25,9,0)
(24,6,0)
(26,23,0)
(15,29,0)
(10,28,0)
(19,26,0)
(23,8,0)
(4,0,0)
(17,10,0)
(9,23,0)
(26,8,0)
(20,6,0)
(9,18,0)
(16,4,0)
(10,17,0)
(14,26,0)
(30,15,0)
(26,18,0)
(9,8,0)
(12,9,0)
(0,4,0)
(7,29,0)
(21,1,0)
(20,23,0)
(3,20,0)
(10,23,0)
(22,18,0)
(18,6,0)
(29,17,0)
(25,0,1)
(9,12,1)
(9,23,1)
(14,18,1)
(25,1,1)
(19,14,1)
(26,8,1)
(16,1,1)
(9,8,1)
(26,18,1)
(1,2,1)
(10,17,1)
(7,13,1)
(10,28,1)
(30,7,1)
(12,25,1)
(24,26,1)
(1,8,1)
(20,8,1)
(4,16,1)
(1,23,1)
(26,23,1)
(17,29,1)
(20,3,1)
(0,4,1)
(2,21,1)
(22,9,1)
(20,23,1)
(3,24,1)
(18,22,1)
(21,23,1)
(23,8,1)
(26,19,1)
(23,10,1)
(15,30,1)
(27,20,1)
(29,15,1)
(23,10,2)
(26,18,2)
(0,4,2)
(10,28,2)
(1,8,2)
(23,8,2)
(26,8,2)
(4,1,2)
(20,8,2)
(20,23,2)
(17,29,2)
(10,17,2)
(0,1,2)
(9,8,2)
(1,23,2)
(29,15,2)
(9,23,2)
(26,23,2)
(24,26,2)
(27,20,2)
(16,1,2)
-----------------------------------
(0,exit(-1)
(1,data == NULL)
(2,NULL)
(3,data)
(4,-1)
(5,)
(6,)
(7,100)
(8,int * data)
(9,data[0])
(10,(int *)
(11,if (data == NULL)
(12,0)
(13,data)
(14,data)
(15,sizeof(int)
(16,1)
(17,malloc(100*sizeof(int)
(18,data[0] = 5)
(19,0)
(20,return data;)
(21,data)
(22,5)
(23,data = (int *)
(24,printIntLine(data[0])
(25,data)
(26,data[0])
(27,RET)
(28,int *)
(29,100*sizeof(int)
(30,int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^