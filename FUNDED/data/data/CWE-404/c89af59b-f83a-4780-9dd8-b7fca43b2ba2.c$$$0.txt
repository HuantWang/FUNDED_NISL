-----label-----
0
-----code-----
static void set_cx86_reorder(void)
{
	u8 ccr3;

	printk(KERN_INFO "Enable Memory access reorder on Cyrix/NSC processor.\n");
	ccr3 = getCx86(CX86_CCR3);
	setCx86(CX86_CCR3, (ccr3 & 0x0f) | 0x10); /* enable MAPEN */

	/* Load/Store Serialize to mem access disable (=reorder it) */
	setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80);
	/* set load/store serialize from 1GB to 4GB */
	ccr3 |= 0xe0;
	setCx86(CX86_CCR3, ccr3);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
12,13
14,15
16,17
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
27,28
27,29
27,30
28,29
30,31
32,33
32,34
33,34
34,35
34,36
35,36
39,40
40,41
40,42
40,43
41,42
43,44
45,46
45,47
46,47
46,48
47,48
49,50
51,52
53,54
54,55
54,56
55,56
58,59
59,60
59,61
59,62
60,61
62,63
64,65
-----nextToken-----
2,4,6,8,13,15,20,23,25,29,31,36,37,38,42,44,48,50,52,56,57,61,63,65
-----computeFrom-----
18,19
18,20
32,33
32,34
34,35
34,36
45,46
45,47
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void set_cx86_reorder(void){	u8 ccr3;	printk(KERN_INFO "Enable Memory access reorder on Cyrix/NSC processor.\n");	ccr3 = getCx86(CX86_CCR3);	setCx86(CX86_CCR3, (ccr3 & 0x0f) | 0x10); /* enable MAPEN */	/* Load/Store Serialize to mem access disable (=reorder it) */	setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80);	/* set load/store serialize from 1GB to 4GB */	ccr3 |= 0xe0;	setCx86(CX86_CCR3, ccr3);}
static void
set_cx86_reorder(void)
set_cx86_reorder
void
void


{	u8 ccr3;	printk(KERN_INFO "Enable Memory access reorder on Cyrix/NSC processor.\n");	ccr3 = getCx86(CX86_CCR3);	setCx86(CX86_CCR3, (ccr3 & 0x0f) | 0x10); /* enable MAPEN */	/* Load/Store Serialize to mem access disable (=reorder it) */	setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80);	/* set load/store serialize from 1GB to 4GB */	ccr3 |= 0xe0;	setCx86(CX86_CCR3, ccr3);}
u8 ccr3;
u8 ccr3;
u8
u8
ccr3
ccr3
printk(KERN_INFO "Enable Memory access reorder on Cyrix/NSC processor.\n");
ccr3 = getCx86(CX86_CCR3);
ccr3 = getCx86(CX86_CCR3)
ccr3
ccr3
getCx86(CX86_CCR3)
getCx86
getCx86
CX86_CCR3
CX86_CCR3
setCx86(CX86_CCR3, (ccr3 & 0x0f) | 0x10);
setCx86(CX86_CCR3, (ccr3 & 0x0f) | 0x10)
setCx86
setCx86
CX86_CCR3
CX86_CCR3
(ccr3 & 0x0f) | 0x10
(ccr3 & 0x0f)
ccr3 & 0x0f
ccr3
ccr3
0x0f
0x10
setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80);
setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0) & ~0x80)
setCx86_old
setCx86_old
CX86_PCR0
CX86_PCR0
getCx86_old(CX86_PCR0) & ~0x80
getCx86_old(CX86_PCR0)
getCx86_old
getCx86_old
CX86_PCR0
CX86_PCR0
~0x80
0x80
ccr3 |= 0xe0;
ccr3 |= 0xe0
ccr3
ccr3
0xe0
setCx86(CX86_CCR3, ccr3);
setCx86(CX86_CCR3, ccr3)
setCx86
setCx86
CX86_CCR3
CX86_CCR3
ccr3
ccr3
-----joern-----
(23,19,0)
(21,23,0)
(8,19,0)
(15,17,0)
(18,20,0)
(16,1,0)
(0,16,0)
(17,22,0)
(16,22,0)
(10,20,0)
(25,21,0)
(18,14,0)
(12,1,0)
(20,18,0)
(5,22,0)
(23,21,0)
(22,17,0)
(13,18,0)
(6,12,0)
(19,23,0)
(14,18,0)
(3,16,0)
(7,14,0)
(12,16,0)
(19,22,0)
(22,1,0)
(21,1,0)
(24,19,0)
(14,1,0)
(11,23,0)
(2,1,0)
(4,12,0)
(12,16,1)
(20,10,1)
(14,18,1)
(0,3,1)
(22,17,1)
(9,12,1)
(10,7,1)
(13,20,1)
(12,6,1)
(17,15,1)
(16,22,1)
(6,4,1)
(23,11,1)
(19,8,1)
(15,5,1)
(3,14,1)
(24,25,1)
(23,19,1)
(8,24,1)
(19,22,1)
(11,19,1)
(7,21,1)
(16,0,1)
(18,13,1)
(18,20,1)
(21,23,1)
(4,16,1)
(25,22,1)
(14,18,2)
(23,19,2)
(18,20,2)
(21,23,2)
(12,16,2)
(19,22,2)
(16,22,2)
(22,17,2)
-----------------------------------
(0,0xe0)
(1,)
(2,ccr3)
(3,ccr3)
(4,CX86_CCR3)
(5,ccr3)
(6,ccr3)
(7,CX86_PCR0)
(8,0x0f)
(9,RET)
(10,CX86_PCR0)
(11,0x10)
(12,setCx86(CX86_CCR3, ccr3)
(13,~0x80)
(14,setCx86_old(CX86_PCR0, getCx86_old(CX86_PCR0)
(15,CX86_CCR3)
(16,ccr3 |= 0xe0)
(17,getCx86(CX86_CCR3)
(18,getCx86_old(CX86_PCR0)
(19,ccr3 & 0x0f)
(20,getCx86_old(CX86_PCR0)
(21,setCx86(CX86_CCR3, (ccr3 & 0x0f)
(22,ccr3 = getCx86(CX86_CCR3)
(23,(ccr3 & 0x0f)
(24,ccr3)
(25,CX86_CCR3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^