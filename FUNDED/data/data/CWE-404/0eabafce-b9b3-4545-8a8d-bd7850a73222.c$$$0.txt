-----label-----
0
-----code-----
static void goodB2G()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goodB2GSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
56,58
57,58
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,52,53,54,58,61,62,66,68
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goodB2GSink(data);}
static void
goodB2G()
goodB2G
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goodB2GSink(data);}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goodB2GSink(data);
goodB2GSink(data)
goodB2GSink
goodB2GSink
data
data
-----joern-----
(16,22,0)
(6,8,0)
(27,7,0)
(22,16,0)
(5,1,0)
(5,7,0)
(24,27,0)
(0,10,0)
(18,7,0)
(11,30,0)
(4,9,0)
(15,1,0)
(13,11,0)
(16,17,0)
(10,30,0)
(20,9,0)
(23,22,0)
(11,7,0)
(29,7,0)
(28,33,0)
(1,5,0)
(26,8,0)
(25,30,0)
(9,33,0)
(19,10,0)
(1,27,0)
(33,9,0)
(10,27,0)
(33,28,0)
(32,31,0)
(8,30,0)
(31,7,0)
(1,30,0)
(33,30,0)
(21,31,0)
(3,1,0)
(30,7,0)
(2,4,0)
(9,4,0)
(30,33,0)
(15,3,1)
(30,33,1)
(23,8,1)
(10,30,1)
(11,30,1)
(32,21,1)
(3,27,1)
(6,26,1)
(26,30,1)
(10,0,1)
(24,10,1)
(0,19,1)
(12,11,1)
(31,32,1)
(11,13,1)
(1,27,1)
(19,16,1)
(19,8,1)
(1,15,1)
(9,4,1)
(13,5,1)
(8,6,1)
(5,1,1)
(16,22,1)
(33,9,1)
(8,30,1)
(20,25,1)
(4,2,1)
(2,20,1)
(27,24,1)
(22,23,1)
(1,30,1)
(25,31,1)
(33,28,1)
(10,30,2)
(33,9,2)
(5,1,2)
(1,27,2)
(16,8,2)
(16,22,2)
(22,8,2)
(33,28,2)
(23,8,2)
(8,30,2)
(1,30,2)
(11,30,2)
(9,4,2)
(30,33,2)
-----------------------------------
(0,0)
(1,data[0])
(2,int)
(3,data)
(4,sizeof(int)
(5,printIntLine(data[0])
(6,NULL)
(7,)
(8,data == NULL)
(9,calloc(100, sizeof(int)
(10,data[0])
(11,goodB2GSink(data)
(12,RET)
(13,data)
(14, sizeof(int)
(15,0)
(16,exit(-1)
(17,)
(18,data)
(19,data)
(20,100)
(21,data)
(22,-1)
(23,1)
(24,5)
(25,data)
(26,data)
(27,data[0] = 5)
(28,int *)
(29,if (data == NULL)
(30,data = (int *)
(31,data = NULL)
(32,NULL)
(33,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^