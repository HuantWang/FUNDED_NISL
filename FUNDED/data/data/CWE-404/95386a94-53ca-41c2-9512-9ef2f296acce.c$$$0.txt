-----label-----
0
-----code-----
static void drm_mm_insert_helper_range(struct drm_mm_node *hole_node,
				       struct drm_mm_node *node,
				       u64 size, unsigned alignment,
				       unsigned long color,
				       u64 start, u64 end,
				       enum drm_mm_allocator_flags flags)
{
	struct drm_mm *mm = hole_node->mm;
	u64 hole_start = drm_mm_hole_node_start(hole_node);
	u64 hole_end = drm_mm_hole_node_end(hole_node);
	u64 adj_start = hole_start;
	u64 adj_end = hole_end;

	BUG_ON(!hole_node->hole_follows || node->allocated);

	if (adj_start < start)
		adj_start = start;
	if (adj_end > end)
		adj_end = end;

	if (mm->color_adjust)
		mm->color_adjust(hole_node, color, &adj_start, &adj_end);

	if (flags & DRM_MM_CREATE_TOP)
		adj_start = adj_end - size;

	if (alignment) {
		u64 tmp = adj_start;
		unsigned rem;

		rem = do_div(tmp, alignment);
		if (rem) {
			if (flags & DRM_MM_CREATE_TOP)
				adj_start -= rem;
			else
				adj_start += alignment - rem;
		}
	}

	if (adj_start == hole_start) {
		hole_node->hole_follows = 0;
		list_del(&hole_node->hole_stack);
	}

	node->start = adj_start;
	node->size = size;
	node->mm = mm;
	node->color = color;
	node->allocated = 1;

	INIT_LIST_HEAD(&node->hole_stack);
	list_add(&node->node_list, &hole_node->node_list);

	BUG_ON(node->start < start);
	BUG_ON(node->start < adj_start);
	BUG_ON(node->start + node->size > adj_end);
	BUG_ON(node->start + node->size > end);

	node->hole_follows = 0;
	if (__drm_mm_hole_node_start(node) < hole_end) {
		list_add(&node->hole_stack, &mm->hole_stack);
		node->hole_follows = 1;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
24,25
26,27
26,28
28,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
45,51
45,52
45,53
45,54
45,55
45,56
45,57
45,58
45,59
45,60
45,61
45,62
45,63
45,64
45,65
45,66
45,67
45,68
45,69
45,70
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
86,88
88,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
97,98
98,99
100,101
101,102
101,103
102,103
104,105
104,106
105,106
106,107
106,108
107,108
110,111
110,112
111,112
114,115
114,116
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
138,139
138,140
139,140
139,141
140,141
143,144
144,145
144,146
144,147
144,148
144,149
145,146
145,147
146,147
149,150
151,152
153,154
154,155
156,157
157,158
159,160
159,161
160,161
160,162
161,162
163,164
165,166
166,167
166,168
167,168
169,170
169,171
170,171
172,173
174,175
174,176
175,176
177,178
177,179
177,180
177,181
178,179
179,180
179,181
180,181
182,183
182,184
184,185
185,186
187,188
188,189
188,190
190,191
192,193
193,194
193,195
194,195
196,197
196,198
196,199
197,198
199,200
201,202
203,204
203,205
204,205
206,207
207,208
207,209
207,210
208,209
208,210
209,210
211,212
213,214
214,215
214,216
215,216
217,218
219,220
220,221
220,222
221,222
223,224
223,225
224,225
226,227
228,229
228,230
229,230
229,231
230,231
232,233
234,235
234,236
235,236
236,237
236,238
237,238
237,239
238,239
242,243
243,244
243,245
244,245
246,247
247,248
247,249
248,249
251,252
252,253
252,254
253,254
253,255
254,255
257,258
259,260
260,261
260,262
261,262
261,263
262,263
265,266
267,268
268,269
268,270
269,270
269,271
270,271
273,274
275,276
276,277
276,278
277,278
277,279
278,279
281,282
283,284
284,285
284,286
285,286
285,287
286,287
290,291
291,292
291,293
292,293
294,295
295,296
295,297
296,297
299,300
300,301
300,302
300,303
301,302
303,304
304,305
304,306
305,306
308,309
309,310
309,311
310,311
313,314
314,315
314,316
315,316
317,318
317,319
318,319
318,320
319,320
322,323
324,325
325,326
325,327
326,327
328,329
328,330
329,330
329,331
330,331
333,334
335,336
336,337
336,338
337,338
339,340
339,341
340,341
340,342
341,342
341,343
342,343
345,346
345,347
346,347
349,350
351,352
352,353
352,354
353,354
355,356
355,357
356,357
356,358
357,358
357,359
358,359
361,362
361,363
362,363
365,366
367,368
368,369
368,370
369,370
369,371
370,371
374,375
374,376
375,376
375,377
376,377
376,378
377,378
379,380
381,382
383,384
383,385
384,385
385,386
385,387
385,388
386,387
388,389
389,390
389,391
390,391
393,394
394,395
394,396
395,396
398,399
399,400
399,401
400,401
400,402
401,402
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,23,25,27,29,32,34,37,39,42,44,49,51,52,56,57,61,63,67,69,73,75,79,81,85,87,90,94,96,99,103,108,109,112,113,117,119,123,125,129,131,135,137,141,142,147,148,150,152,155,158,162,164,168,171,173,176,181,183,186,189,191,195,198,200,202,205,210,212,216,218,222,225,227,231,233,239,240,241,245,249,250,255,256,258,263,264,266,271,272,274,279,280,282,287,288,289,293,297,298,302,306,307,311,312,316,320,321,323,327,331,332,334,338,343,344,347,348,350,354,359,360,363,364,366,371,372,373,378,380,382,387,391,392,396,397,402,403,404
-----computeFrom-----
104,105
104,106
115,116
115,117
121,122
121,123
127,128
127,129
133,134
133,135
160,161
160,162
166,167
166,168
169,170
169,171
193,194
193,195
208,209
208,210
214,215
214,216
220,221
220,222
223,224
223,225
229,230
229,231
236,237
236,238
252,253
252,254
260,261
260,262
268,269
268,270
276,277
276,278
284,285
284,286
317,318
317,319
328,329
328,330
339,340
339,341
340,341
340,342
355,356
355,357
356,357
356,358
368,369
368,370
375,376
375,377
399,400
399,401
-----guardedBy-----
117,123
119,125
129,135
131,137
380,402
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static void drm_mm_insert_helper_range(struct drm_mm_node *hole_node,				       struct drm_mm_node *node,				       u64 size, unsigned alignment,				       unsigned long color,				       u64 start, u64 end,				       enum drm_mm_allocator_flags flags){	struct drm_mm *mm = hole_node->mm;	u64 hole_start = drm_mm_hole_node_start(hole_node);	u64 hole_end = drm_mm_hole_node_end(hole_node);	u64 adj_start = hole_start;	u64 adj_end = hole_end;	BUG_ON(!hole_node->hole_follows || node->allocated);	if (adj_start < start)		adj_start = start;	if (adj_end > end)		adj_end = end;	if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);	if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;	if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}	if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}	node->start = adj_start;	node->size = size;	node->mm = mm;	node->color = color;	node->allocated = 1;	INIT_LIST_HEAD(&node->hole_stack);	list_add(&node->node_list, &hole_node->node_list);	BUG_ON(node->start < start);	BUG_ON(node->start < adj_start);	BUG_ON(node->start + node->size > adj_end);	BUG_ON(node->start + node->size > end);	node->hole_follows = 0;	if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}}
static void
drm_mm_insert_helper_range(struct drm_mm_node *hole_node,				       struct drm_mm_node *node,				       u64 size, unsigned alignment,				       unsigned long color,				       u64 start, u64 end,				       enum drm_mm_allocator_flags flags)
drm_mm_insert_helper_range
struct drm_mm_node *hole_node
struct drm_mm_node
drm_mm_node
*hole_node
*
hole_node
struct drm_mm_node *node
struct drm_mm_node
drm_mm_node
*node
*
node
u64 size
u64
u64
size
size
unsigned alignment
unsigned
alignment
alignment
unsigned long color
unsigned long
color
color
u64 start
u64
u64
start
start
u64 end
u64
u64
end
end
enum drm_mm_allocator_flags flags
enum drm_mm_allocator_flags
drm_mm_allocator_flags
flags
flags
{	struct drm_mm *mm = hole_node->mm;	u64 hole_start = drm_mm_hole_node_start(hole_node);	u64 hole_end = drm_mm_hole_node_end(hole_node);	u64 adj_start = hole_start;	u64 adj_end = hole_end;	BUG_ON(!hole_node->hole_follows || node->allocated);	if (adj_start < start)		adj_start = start;	if (adj_end > end)		adj_end = end;	if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);	if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;	if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}	if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}	node->start = adj_start;	node->size = size;	node->mm = mm;	node->color = color;	node->allocated = 1;	INIT_LIST_HEAD(&node->hole_stack);	list_add(&node->node_list, &hole_node->node_list);	BUG_ON(node->start < start);	BUG_ON(node->start < adj_start);	BUG_ON(node->start + node->size > adj_end);	BUG_ON(node->start + node->size > end);	node->hole_follows = 0;	if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}}
struct drm_mm *mm = hole_node->mm;
struct drm_mm *mm = hole_node->mm;
struct drm_mm
drm_mm
*mm = hole_node->mm
*
mm
= hole_node->mm
hole_node->mm
hole_node
hole_node
mm
u64 hole_start = drm_mm_hole_node_start(hole_node);
u64 hole_start = drm_mm_hole_node_start(hole_node);
u64
u64
hole_start = drm_mm_hole_node_start(hole_node)
hole_start
= drm_mm_hole_node_start(hole_node)
drm_mm_hole_node_start(hole_node)
drm_mm_hole_node_start
drm_mm_hole_node_start
hole_node
hole_node
u64 hole_end = drm_mm_hole_node_end(hole_node);
u64 hole_end = drm_mm_hole_node_end(hole_node);
u64
u64
hole_end = drm_mm_hole_node_end(hole_node)
hole_end
= drm_mm_hole_node_end(hole_node)
drm_mm_hole_node_end(hole_node)
drm_mm_hole_node_end
drm_mm_hole_node_end
hole_node
hole_node
u64 adj_start = hole_start;
u64 adj_start = hole_start;
u64
u64
adj_start = hole_start
adj_start
= hole_start
hole_start
hole_start
u64 adj_end = hole_end;
u64 adj_end = hole_end;
u64
u64
adj_end = hole_end
adj_end
= hole_end
hole_end
hole_end
BUG_ON(!hole_node->hole_follows || node->allocated);
BUG_ON(!hole_node->hole_follows || node->allocated)
BUG_ON
BUG_ON
!hole_node->hole_follows || node->allocated
!hole_node->hole_follows
hole_node->hole_follows
hole_node
hole_node
hole_follows
node->allocated
node
node
allocated
if (adj_start < start)		adj_start = start;
adj_start < start
adj_start
adj_start
start
start
adj_start = start;
adj_start = start
adj_start
adj_start
start
start
if (adj_end > end)		adj_end = end;
adj_end > end
adj_end
adj_end
end
end
adj_end = end;
adj_end = end
adj_end
adj_end
end
end
if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);
mm->color_adjust
mm
mm
color_adjust
mm->color_adjust(hole_node, color, &adj_start, &adj_end);
mm->color_adjust(hole_node, color, &adj_start, &adj_end)
mm->color_adjust
mm
mm
color_adjust
hole_node
hole_node
color
color
&adj_start
adj_start
adj_start
&adj_end
adj_end
adj_end
if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;
flags & DRM_MM_CREATE_TOP
flags
flags
DRM_MM_CREATE_TOP
DRM_MM_CREATE_TOP
adj_start = adj_end - size;
adj_start = adj_end - size
adj_start
adj_start
adj_end - size
adj_end
adj_end
size
size
if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}
alignment
alignment
{		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}
u64 tmp = adj_start;
u64 tmp = adj_start;
u64
u64
tmp = adj_start
tmp
= adj_start
adj_start
adj_start
unsigned rem;
unsigned rem;
unsigned
rem
rem
rem = do_div(tmp, alignment);
rem = do_div(tmp, alignment)
rem
rem
do_div(tmp, alignment)
do_div
do_div
tmp
tmp
alignment
alignment
if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}
rem
rem
{			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}
if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;
flags & DRM_MM_CREATE_TOP
flags
flags
DRM_MM_CREATE_TOP
DRM_MM_CREATE_TOP
adj_start -= rem;
adj_start -= rem
adj_start
adj_start
rem
rem
adj_start += alignment - rem;
adj_start += alignment - rem
adj_start
adj_start
alignment - rem
alignment
alignment
rem
rem
if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}
adj_start == hole_start
adj_start
adj_start
hole_start
hole_start
{		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);	}
hole_node->hole_follows = 0;
hole_node->hole_follows = 0
hole_node->hole_follows
hole_node
hole_node
hole_follows
0
list_del(&hole_node->hole_stack);
list_del(&hole_node->hole_stack)
list_del
list_del
&hole_node->hole_stack
hole_node->hole_stack
hole_node
hole_node
hole_stack
node->start = adj_start;
node->start = adj_start
node->start
node
node
start
adj_start
adj_start
node->size = size;
node->size = size
node->size
node
node
size
size
size
node->mm = mm;
node->mm = mm
node->mm
node
node
mm
mm
mm
node->color = color;
node->color = color
node->color
node
node
color
color
color
node->allocated = 1;
node->allocated = 1
node->allocated
node
node
allocated
1
INIT_LIST_HEAD(&node->hole_stack);
INIT_LIST_HEAD(&node->hole_stack)
INIT_LIST_HEAD
INIT_LIST_HEAD
&node->hole_stack
node->hole_stack
node
node
hole_stack
list_add(&node->node_list, &hole_node->node_list);
list_add(&node->node_list, &hole_node->node_list)
list_add
list_add
&node->node_list
node->node_list
node
node
node_list
&hole_node->node_list
hole_node->node_list
hole_node
hole_node
node_list
BUG_ON(node->start < start);
BUG_ON(node->start < start)
BUG_ON
BUG_ON
node->start < start
node->start
node
node
start
start
start
BUG_ON(node->start < adj_start);
BUG_ON(node->start < adj_start)
BUG_ON
BUG_ON
node->start < adj_start
node->start
node
node
start
adj_start
adj_start
BUG_ON(node->start + node->size > adj_end);
BUG_ON(node->start + node->size > adj_end)
BUG_ON
BUG_ON
node->start + node->size > adj_end
node->start + node->size
node->start
node
node
start
node->size
node
node
size
adj_end
adj_end
BUG_ON(node->start + node->size > end);
BUG_ON(node->start + node->size > end)
BUG_ON
BUG_ON
node->start + node->size > end
node->start + node->size
node->start
node
node
start
node->size
node
node
size
end
end
node->hole_follows = 0;
node->hole_follows = 0
node->hole_follows
node
node
hole_follows
0
if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}
__drm_mm_hole_node_start(node) < hole_end
__drm_mm_hole_node_start(node)
__drm_mm_hole_node_start
__drm_mm_hole_node_start
node
node
hole_end
hole_end
{		list_add(&node->hole_stack, &mm->hole_stack);		node->hole_follows = 1;	}
list_add(&node->hole_stack, &mm->hole_stack);
list_add(&node->hole_stack, &mm->hole_stack)
list_add
list_add
&node->hole_stack
node->hole_stack
node
node
hole_stack
&mm->hole_stack
mm->hole_stack
mm
mm
hole_stack
node->hole_follows = 1;
node->hole_follows = 1
node->hole_follows
node
node
hole_follows
1
-----joern-----
(51,4,0)
(170,207,0)
(206,119,0)
(81,206,0)
(52,65,0)
(163,170,0)
(63,107,0)
(43,54,0)
(35,91,0)
(153,162,0)
(209,23,0)
(29,23,0)
(93,41,0)
(79,188,0)
(96,10,0)
(203,37,0)
(170,162,0)
(52,80,0)
(90,23,0)
(122,178,0)
(87,1,0)
(137,127,0)
(180,162,0)
(131,136,0)
(31,65,0)
(6,153,0)
(19,128,0)
(107,178,0)
(119,53,0)
(128,53,0)
(114,131,0)
(25,161,0)
(95,146,0)
(124,23,0)
(93,23,0)
(175,146,0)
(43,137,0)
(76,25,0)
(62,86,0)
(42,137,0)
(78,108,0)
(2,149,0)
(147,24,0)
(105,152,0)
(13,177,0)
(48,178,0)
(41,93,0)
(187,44,0)
(154,167,0)
(115,182,0)
(64,127,0)
(97,53,0)
(86,23,0)
(182,143,0)
(92,44,0)
(191,80,0)
(83,61,0)
(197,43,0)
(156,23,0)
(109,23,0)
(154,135,0)
(168,105,0)
(158,169,0)
(135,23,0)
(72,27,0)
(149,152,0)
(153,23,0)
(27,113,0)
(101,61,0)
(26,137,0)
(194,62,0)
(198,201,0)
(170,149,0)
(44,102,0)
(68,63,0)
(207,197,0)
(69,185,0)
(82,92,0)
(112,144,0)
(44,92,0)
(47,53,0)
(3,188,0)
(125,184,0)
(92,153,0)
(32,144,0)
(21,52,0)
(17,154,0)
(177,53,0)
(206,83,0)
(149,28,0)
(144,32,0)
(153,28,0)
(71,47,0)
(197,207,0)
(69,23,0)
(170,152,0)
(28,169,0)
(16,177,0)
(91,35,0)
(91,107,0)
(20,152,0)
(12,179,0)
(129,68,0)
(128,108,0)
(188,32,0)
(47,69,0)
(45,161,0)
(160,27,0)
(49,54,0)
(41,201,0)
(116,157,0)
(10,6,0)
(143,23,0)
(178,167,0)
(150,53,0)
(182,12,0)
(143,113,0)
(189,96,0)
(207,28,0)
(207,152,0)
(57,45,0)
(86,62,0)
(94,92,0)
(106,120,0)
(63,23,0)
(24,153,0)
(179,12,0)
(194,167,0)
(32,188,0)
(213,25,0)
(195,97,0)
(96,53,0)
(1,23,0)
(148,24,0)
(207,162,0)
(45,57,0)
(4,157,0)
(85,33,0)
(38,6,0)
(201,53,0)
(88,116,0)
(80,52,0)
(192,65,0)
(7,1,0)
(117,194,0)
(5,184,0)
(199,197,0)
(67,23,0)
(188,53,0)
(97,196,0)
(177,143,0)
(22,197,0)
(182,53,0)
(172,23,0)
(105,80,0)
(77,69,0)
(184,167,0)
(118,108,0)
(27,162,0)
(215,45,0)
(162,27,0)
(190,152,0)
(44,149,0)
(197,214,0)
(144,112,0)
(210,33,0)
(35,174,0)
(24,53,0)
(174,136,0)
(201,41,0)
(170,28,0)
(50,131,0)
(10,45,0)
(127,54,0)
(193,80,0)
(202,97,0)
(181,43,0)
(56,109,0)
(145,23,0)
(164,95,0)
(184,5,0)
(32,126,0)
(114,53,0)
(61,167,0)
(120,107,0)
(75,95,0)
(152,23,0)
(205,54,0)
(30,184,0)
(15,28,0)
(140,107,0)
(44,152,0)
(89,23,0)
(12,56,0)
(5,111,0)
(137,214,0)
(56,12,0)
(142,112,0)
(149,162,0)
(66,28,0)
(36,135,0)
(138,112,0)
(126,32,0)
(149,43,0)
(105,28,0)
(153,152,0)
(73,210,0)
(7,53,0)
(39,179,0)
(119,206,0)
(127,162,0)
(183,201,0)
(152,135,0)
(155,179,0)
(80,105,0)
(196,174,0)
(9,158,0)
(196,97,0)
(8,116,0)
(171,7,0)
(6,10,0)
(61,83,0)
(52,89,0)
(179,53,0)
(166,56,0)
(25,89,0)
(56,65,0)
(12,182,0)
(132,83,0)
(103,7,0)
(174,35,0)
(11,6,0)
(123,150,0)
(127,28,0)
(99,194,0)
(68,53,0)
(135,154,0)
(58,114,0)
(174,196,0)
(153,149,0)
(173,143,0)
(98,210,0)
(80,167,0)
(60,119,0)
(178,107,0)
(121,182,0)
(107,23,0)
(34,170,0)
(165,23,0)
(14,153,0)
(74,23,0)
(86,123,0)
(62,194,0)
(80,185,0)
(111,176,0)
(200,114,0)
(44,28,0)
(96,143,0)
(44,162,0)
(211,54,0)
(44,207,0)
(83,23,0)
(212,158,0)
(10,96,0)
(126,23,0)
(78,23,0)
(127,152,0)
(108,78,0)
(112,167,0)
(204,23,0)
(146,176,0)
(109,56,0)
(110,63,0)
(134,128,0)
(153,207,0)
(186,23,0)
(104,96,0)
(133,47,0)
(89,83,0)
(179,153,0)
(100,91,0)
(18,150,0)
(137,43,0)
(108,128,0)
(27,89,0)
(56,89,0)
(158,152,0)
(139,207,0)
(108,169,0)
(6,53,0)
(40,91,0)
(84,68,0)
(159,127,0)
(111,5,0)
(141,150,0)
(208,4,0)
(150,123,0)
(123,86,0)
(0,149,0)
(27,65,0)
(92,53,0)
(45,10,0)
(128,153,0)
(46,120,0)
(102,44,0)
(130,89,0)
(57,23,0)
(33,23,0)
(95,167,0)
(59,89,0)
(102,23,0)
(65,161,0)
(210,53,0)
(170,135,0)
(153,14,1)
(117,99,1)
(25,76,1)
(180,116,1)
(146,175,1)
(152,135,1)
(206,83,1)
(114,58,1)
(25,89,1)
(15,158,1)
(116,8,1)
(170,152,1)
(0,2,1)
(27,113,1)
(32,144,1)
(80,105,1)
(40,100,1)
(24,53,1)
(106,25,1)
(163,149,1)
(149,43,1)
(184,30,1)
(97,202,1)
(170,135,1)
(92,53,1)
(76,213,1)
(143,173,1)
(123,150,1)
(207,162,1)
(152,190,1)
(64,70,1)
(170,149,1)
(9,212,1)
(95,164,1)
(13,16,1)
(48,122,1)
(149,28,1)
(52,21,1)
(155,102,1)
(73,57,1)
(27,65,1)
(127,159,1)
(175,95,1)
(50,114,1)
(46,106,1)
(51,208,1)
(56,65,1)
(69,77,1)
(63,107,1)
(194,117,1)
(88,120,1)
(160,180,1)
(91,107,1)
(197,214,1)
(128,153,1)
(6,153,1)
(66,15,1)
(57,45,1)
(8,88,1)
(69,185,1)
(191,120,1)
(153,207,1)
(30,125,1)
(92,153,1)
(179,153,1)
(91,40,1)
(173,177,1)
(187,92,1)
(20,83,1)
(190,20,1)
(22,139,1)
(177,53,1)
(87,7,1)
(153,28,1)
(210,98,1)
(100,196,1)
(131,50,1)
(84,143,1)
(4,157,1)
(120,107,1)
(27,72,1)
(4,51,1)
(60,33,1)
(198,183,1)
(43,137,1)
(201,198,1)
(139,4,1)
(143,113,1)
(106,65,1)
(44,187,1)
(41,201,1)
(174,196,1)
(182,121,1)
(118,128,1)
(122,140,1)
(202,195,1)
(112,142,1)
(11,38,1)
(163,70,1)
(208,55,1)
(163,207,1)
(77,47,1)
(5,184,1)
(44,207,1)
(97,53,1)
(199,22,1)
(192,25,1)
(148,147,1)
(63,110,1)
(126,32,1)
(89,83,1)
(35,91,1)
(150,18,1)
(36,107,1)
(147,111,1)
(92,94,1)
(56,166,1)
(178,167,1)
(132,135,1)
(119,53,1)
(183,1,1)
(6,11,1)
(213,28,1)
(179,39,1)
(102,44,1)
(128,134,1)
(129,84,1)
(45,215,1)
(137,214,1)
(71,133,1)
(81,119,1)
(7,103,1)
(135,154,1)
(79,3,1)
(197,199,1)
(188,53,1)
(82,78,1)
(109,56,1)
(94,82,1)
(110,68,1)
(158,152,1)
(142,138,1)
(174,35,1)
(104,6,1)
(150,53,1)
(141,93,1)
(55,43,1)
(99,123,1)
(125,146,1)
(130,152,1)
(98,73,1)
(31,192,1)
(149,152,1)
(42,181,1)
(138,89,1)
(207,28,1)
(70,162,1)
(107,178,1)
(128,53,1)
(201,53,1)
(215,10,1)
(12,182,1)
(70,116,1)
(2,4,1)
(93,41,1)
(207,152,1)
(147,170,1)
(39,155,1)
(47,53,1)
(26,42,1)
(44,28,1)
(65,31,1)
(59,130,1)
(96,143,1)
(44,92,1)
(149,162,1)
(181,127,1)
(18,141,1)
(28,66,1)
(62,194,1)
(101,132,1)
(65,161,1)
(103,171,1)
(114,53,1)
(112,167,1)
(61,101,1)
(200,174,1)
(212,126,1)
(56,12,1)
(137,26,1)
(52,89,1)
(45,161,1)
(19,86,1)
(96,53,1)
(56,89,1)
(78,108,1)
(105,28,1)
(206,119,1)
(197,43,1)
(10,6,1)
(85,210,1)
(151,206,1)
(52,65,1)
(25,161,1)
(96,189,1)
(119,60,1)
(105,168,1)
(127,28,1)
(10,96,1)
(151,131,1)
(108,128,1)
(32,188,1)
(154,167,1)
(28,169,1)
(3,144,1)
(133,63,1)
(24,148,1)
(108,118,1)
(88,80,1)
(196,97,1)
(1,87,1)
(86,62,1)
(213,158,1)
(27,89,1)
(80,167,1)
(45,10,1)
(194,167,1)
(105,152,1)
(158,9,1)
(159,64,1)
(170,28,1)
(58,200,1)
(210,53,1)
(127,162,1)
(75,170,1)
(80,185,1)
(44,152,1)
(206,81,1)
(127,152,1)
(80,52,1)
(121,115,1)
(111,5,1)
(137,127,1)
(188,79,1)
(170,207,1)
(168,193,1)
(164,75,1)
(149,0,1)
(16,153,1)
(12,179,1)
(153,149,1)
(134,19,1)
(83,61,1)
(61,167,1)
(34,163,1)
(7,53,1)
(170,34,1)
(38,109,1)
(44,162,1)
(14,24,1)
(162,27,1)
(120,46,1)
(177,13,1)
(68,53,1)
(68,129,1)
(86,123,1)
(163,55,1)
(144,112,1)
(179,53,1)
(184,167,1)
(108,169,1)
(178,48,1)
(6,53,1)
(115,179,1)
(158,169,1)
(182,143,1)
(95,167,1)
(193,191,1)
(21,105,1)
(166,12,1)
(89,59,1)
(153,162,1)
(154,17,1)
(207,197,1)
(153,152,1)
(170,162,1)
(33,85,1)
(171,69,1)
(182,53,1)
(47,71,1)
(72,160,1)
(116,157,1)
(195,206,1)
(17,36,1)
(44,149,1)
(189,104,1)
(208,55,2)
(177,53,2)
(206,83,2)
(137,70,2)
(15,158,2)
(61,167,2)
(179,53,2)
(137,214,2)
(43,70,2)
(179,153,2)
(131,206,2)
(44,149,2)
(128,153,2)
(158,169,2)
(47,53,2)
(45,161,2)
(63,107,2)
(72,116,2)
(199,4,2)
(207,162,2)
(143,113,2)
(27,65,2)
(153,149,2)
(44,92,2)
(127,28,2)
(44,152,2)
(149,4,2)
(162,27,2)
(206,119,2)
(69,185,2)
(96,143,2)
(159,70,2)
(65,161,2)
(174,206,2)
(153,28,2)
(149,152,2)
(40,206,2)
(168,120,2)
(150,53,2)
(127,162,2)
(114,206,2)
(64,70,2)
(153,152,2)
(158,152,2)
(135,154,2)
(144,112,2)
(95,170,2)
(80,105,2)
(174,196,2)
(56,65,2)
(12,179,2)
(80,167,2)
(65,25,2)
(97,206,2)
(91,206,2)
(193,120,2)
(96,53,2)
(188,144,2)
(80,52,2)
(41,201,2)
(100,206,2)
(75,170,2)
(35,206,2)
(191,120,2)
(170,28,2)
(55,70,2)
(56,89,2)
(152,135,2)
(4,55,2)
(160,116,2)
(45,10,2)
(125,170,2)
(79,144,2)
(207,197,2)
(89,83,2)
(149,28,2)
(3,144,2)
(24,53,2)
(80,185,2)
(153,162,2)
(27,116,2)
(184,167,2)
(25,89,2)
(192,25,2)
(109,56,2)
(201,53,2)
(80,120,2)
(170,152,2)
(56,12,2)
(184,170,2)
(31,25,2)
(78,108,2)
(2,4,2)
(200,206,2)
(93,41,2)
(32,144,2)
(175,170,2)
(128,53,2)
(197,214,2)
(139,4,2)
(207,152,2)
(126,32,2)
(207,4,2)
(62,194,2)
(91,107,2)
(105,28,2)
(197,43,2)
(66,158,2)
(154,167,2)
(207,28,2)
(95,167,2)
(22,4,2)
(178,167,2)
(111,170,2)
(28,169,2)
(170,207,2)
(35,91,2)
(114,53,2)
(149,162,2)
(32,188,2)
(127,152,2)
(182,53,2)
(10,96,2)
(170,149,2)
(127,70,2)
(170,135,2)
(188,53,2)
(108,169,2)
(4,157,2)
(5,184,2)
(43,137,2)
(5,170,2)
(42,70,2)
(52,120,2)
(120,107,2)
(44,162,2)
(52,89,2)
(7,53,2)
(44,207,2)
(105,120,2)
(108,128,2)
(57,45,2)
(112,167,2)
(92,153,2)
(170,162,2)
(194,167,2)
(107,178,2)
(195,206,2)
(12,182,2)
(51,55,2)
(210,53,2)
(153,207,2)
(182,143,2)
(123,150,2)
(146,170,2)
(68,53,2)
(137,127,2)
(27,113,2)
(30,170,2)
(162,116,2)
(21,120,2)
(6,153,2)
(52,65,2)
(111,5,2)
(26,70,2)
(86,62,2)
(25,161,2)
(197,4,2)
(0,4,2)
(174,35,2)
(119,53,2)
(58,206,2)
(92,53,2)
(6,53,2)
(102,44,2)
(97,53,2)
(10,6,2)
(116,157,2)
(196,97,2)
(202,206,2)
(28,158,2)
(180,116,2)
(86,123,2)
(196,206,2)
(105,152,2)
(83,61,2)
(44,28,2)
(27,89,2)
(50,206,2)
(164,170,2)
(181,70,2)
(149,43,2)
-----------------------------------
(0,rem)
(1,node->allocated = 1)
(2,adj_start)
(3,node)
(4,flags & DRM_MM_CREATE_TOP)
(5,&hole_node->hole_stack)
(6,node->start)
(7,node->allocated)
(8,DRM_MM_CREATE_TOP)
(9,start)
(10,node->start + node->size)
(11,start)
(12,node->start + node->size)
(13,size)
(14,adj_start)
(15,adj_start)
(16,node)
(17,hole_node)
(18,node_list)
(19,node)
(20,adj_start)
(21,adj_end)
(22,alignment)
(23,)
(24,node->start)
(25,adj_end > end)
(26,alignment)
(27,adj_end - size)
(28,adj_start = start)
(29,if (adj_start == hole_start)
(30,hole_stack)
(31,end)
(32,!hole_node->hole_follows || node->allocated)
(33,node->hole_follows = 0)
(34,hole_start)
(35,&mm->hole_stack)
(36,hole_start)
(37,)
(38,node)
(39,start)
(40,hole_stack)
(41,&node->hole_stack)
(42,tmp)
(43,rem = do_div(tmp, alignment)
(44,node->start < adj_start)
(45,node->start + node->size > end)
(46,color_adjust)
(47,node->color)
(48,mm)
(49,if (rem)
(50,1)
(51,DRM_MM_CREATE_TOP)
(52,&adj_end)
(53,struct drm_mm_node *node)
(54,)
(55,rem)
(56,node->start + node->size > adj_end)
(57,BUG_ON(node->start + node->size > end)
(58,hole_follows)
(59,hole_end)
(60,node)
(61,drm_mm_hole_node_end(hole_node)
(62,&hole_node->node_list)
(63,node->mm = mm)
(64,tmp)
(65,adj_end = end)
(66,start)
(67,hole_end)
(68,node->mm)
(69,node->color = color)
(70,alignment)
(71,color)
(72,size)
(73,node)
(74,if (alignment)
(75,hole_node)
(76,end)
(77,color)
(78,BUG_ON(node->start < start)
(79,allocated)
(80,mm->color_adjust(hole_node, color, &adj_start, &adj_end)
(81,hole_end)
(82,node)
(83,hole_end = drm_mm_hole_node_end(hole_node)
(84,node)
(85,0)
(86,list_add(&node->node_list, &hole_node->node_list)
(87,1)
(88,flags)
(89,adj_end = hole_end)
(90,adj_end)
(91,mm->hole_stack)
(92,node->start)
(93,INIT_LIST_HEAD(&node->hole_stack)
(94,start)
(95,hole_node->hole_follows)
(96,node->size)
(97,node->hole_stack)
(98,hole_follows)
(99,hole_node)
(100,mm)
(101,hole_node)
(102,BUG_ON(node->start < adj_start)
(103,allocated)
(104,node)
(105,&adj_start)
(106,mm)
(107,*mm = hole_node->mm)
(108,node->start < start)
(109,BUG_ON(node->start + node->size > adj_end)
(110,mm)
(111,list_del(&hole_node->hole_stack)
(112,hole_node->hole_follows)
(113,u64 size)
(114,node->hole_follows)
(115,node)
(116,flags & DRM_MM_CREATE_TOP)
(117,node_list)
(118,start)
(119,__drm_mm_hole_node_start(node)
(120,mm->color_adjust)
(121,size)
(122,hole_node)
(123,&node->node_list)
(124,hole_start)
(125,hole_node)
(126,BUG_ON(!hole_node->hole_follows || node->allocated)
(127,tmp = adj_start)
(128,node->start)
(129,mm)
(130,adj_end)
(131,node->hole_follows = 1)
(132,hole_end)
(133,node)
(134,start)
(135,hole_start = drm_mm_hole_node_start(hole_node)
(136,)
(137,do_div(tmp, alignment)
(138,hole_node)
(139,adj_start)
(140,mm)
(141,node)
(142,hole_follows)
(143,node->size = size)
(144,!hole_node->hole_follows)
(145,if (adj_start < start)
(146,hole_node->hole_follows = 0)
(147,node)
(148,start)
(149,adj_start -= rem)
(150,node->node_list)
(151,RET)
(152,adj_start = hole_start)
(153,node->start = adj_start)
(154,drm_mm_hole_node_start(hole_node)
(155,node)
(156,if (adj_end > end)
(157,enum drm_mm_allocator_flags flags)
(158,adj_start < start)
(159,adj_start)
(160,adj_end)
(161,u64 end)
(162,adj_start = adj_end - size)
(163,adj_start)
(164,hole_follows)
(165,if (__drm_mm_hole_node_start(node)
(166,adj_end)
(167,struct drm_mm_node *hole_node)
(168,adj_start)
(169,u64 start)
(170,adj_start == hole_start)
(171,node)
(172,if (mm->color_adjust)
(173,size)
(174,list_add(&node->hole_stack, &mm->hole_stack)
(175,0)
(176,)
(177,node->size)
(178,hole_node->mm)
(179,node->start)
(180,adj_start)
(181,rem)
(182,node->size)
(183,node)
(184,hole_node->hole_stack)
(185,unsigned long color)
(186,mm)
(187,adj_start)
(188,node->allocated)
(189,size)
(190,hole_start)
(191,hole_node)
(192,adj_end)
(193,color)
(194,hole_node->node_list)
(195,node)
(196,&node->hole_stack)
(197,alignment - rem)
(198,hole_stack)
(199,rem)
(200,node)
(201,node->hole_stack)
(202,hole_stack)
(203,if (flags & DRM_MM_CREATE_TOP)
(204,adj_start)
(205,tmp)
(206,__drm_mm_hole_node_start(node)
(207,adj_start += alignment - rem)
(208,flags)
(209,if (flags & DRM_MM_CREATE_TOP)
(210,node->hole_follows)
(211,rem)
(212,adj_start)
(213,adj_end)
(214,unsigned alignment)
(215,end)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^