-----label-----
0
-----code-----
void
state(const KINFO *k, const struct varent *vent)
{
	struct proc *p;
	int flag;
	char *cp;
	char buf[16];

	p = KI_PROC(k);
	flag = p->p_flag;
	cp = buf;

	switch (p->p_stat) {

	case SSTOP:
		*cp = 'T';
		break;

	case SSLEEP:
		if (flag & P_SINTR)	/* interruptable (long) */
			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';
		else if (KI_THREAD(k)->td_flags & TDF_SINTR)
			*cp = 'S';
		else
			*cp = 'D';
		break;

	case SRUN:
	case SIDL:
		*cp = 'R';
		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {
		    ++cp;
		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);
		    while (cp[1])
			++cp;
		}
		break;

	case SZOMB:
		*cp = 'Z';
		break;

	default:
		*cp = '?';
	}
	cp++;
	if (!(flag & P_INMEM))
		*cp++ = 'W';
	if (p->p_nice < NZERO)
		*cp++ = '<';
	else if (p->p_nice > NZERO)
		*cp++ = 'N';
	if (flag & P_TRACED)
		*cp++ = 'X';
	if (flag & P_WEXIT && p->p_stat != SZOMB)
		*cp++ = 'E';
	if (flag & P_PPWAIT)
		*cp++ = 'V';
	if ((flag & P_SYSTEM) || p->p_lock > 0)
		*cp++ = 'L';
	if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)
		*cp++ = 'M';
	if (flag & P_JAILED)
		*cp++ = 'J';
	if (KI_EPROC(k)->e_flag & EPROC_SLEADER)
		*cp++ = 's';
	if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)
		*cp++ = '+';
	*cp = '\0';
	printf("%-*s", vent->width, buf);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
33,35
36,37
37,38
37,39
39,40
39,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
71,72
71,73
71,74
71,75
71,76
71,77
71,78
71,79
71,80
71,81
71,82
71,83
71,84
71,85
71,86
71,87
72,73
73,74
75,76
76,77
76,78
77,78
78,79
82,83
83,84
85,86
85,87
85,88
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
94,95
96,97
96,98
96,99
97,98
97,99
98,99
98,100
99,100
102,103
106,107
106,108
106,109
107,108
107,109
108,109
108,110
109,110
109,111
110,111
112,113
115,116
117,118
118,119
118,120
119,120
120,121
123,124
124,125
124,126
125,126
126,127
130,131
131,132
133,134
134,135
136,137
137,138
137,139
138,139
139,140
142,143
142,144
143,144
143,145
144,145
144,146
145,146
145,147
146,147
148,149
151,152
153,154
153,155
153,156
154,155
155,156
156,157
158,159
159,160
159,161
159,162
159,163
160,161
162,163
165,166
165,167
166,167
166,168
167,168
169,170
172,173
172,174
173,174
173,175
174,175
177,178
178,179
179,180
182,183
183,184
185,186
186,187
186,188
187,188
188,189
193,194
194,195
194,196
195,196
196,197
199,200
200,201
201,202
203,204
203,205
204,205
205,206
206,207
206,208
207,208
209,210
211,212
212,213
212,214
213,214
214,215
215,216
218,219
218,220
218,221
219,220
219,221
220,221
220,222
221,222
224,225
226,227
227,228
227,229
228,229
229,230
230,231
233,234
233,235
234,235
234,236
235,236
235,237
236,237
239,240
241,242
242,243
242,244
243,244
244,245
245,246
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
255,257
256,257
257,258
258,259
261,262
261,263
262,263
262,264
263,264
263,265
264,265
266,267
268,269
268,270
269,270
269,271
270,271
273,274
275,276
276,277
276,278
277,278
278,279
279,280
282,283
282,284
283,284
283,285
284,285
286,287
288,289
289,290
289,291
290,291
291,292
292,293
295,296
295,297
296,297
296,298
297,298
298,299
298,300
299,300
301,302
303,304
303,305
304,305
304,306
305,306
309,310
310,311
310,312
311,312
312,313
313,314
316,317
316,318
317,318
317,319
318,319
318,320
319,320
322,323
322,324
323,324
323,325
324,325
324,326
325,326
327,328
331,332
332,333
332,334
333,334
334,335
335,336
338,339
338,340
339,340
339,341
340,341
342,343
344,345
345,346
345,347
346,347
347,348
348,349
351,352
351,353
352,353
352,354
353,354
353,355
354,355
354,356
355,356
357,358
360,361
362,363
363,364
363,365
364,365
365,366
366,367
369,370
369,371
370,371
370,372
371,372
372,373
372,374
373,374
375,376
377,378
377,379
378,379
378,380
379,380
379,381
380,381
382,383
385,386
385,387
386,387
386,388
387,388
389,390
392,393
393,394
393,395
394,395
395,396
396,397
399,400
400,401
400,402
401,402
402,403
405,406
406,407
406,408
406,409
406,410
407,408
410,411
410,412
411,412
414,415
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,29,32,34,35,38,40,42,46,49,51,55,58,59,63,65,69,70,74,79,80,81,84,88,90,95,100,101,103,104,105,111,113,114,116,121,122,127,128,129,132,135,140,141,147,149,150,152,157,161,163,164,168,170,171,175,176,180,181,184,189,190,191,192,197,198,202,208,210,216,217,222,223,225,231,232,237,238,240,246,247,251,253,259,260,265,267,271,272,274,280,281,285,287,293,294,300,302,306,307,308,314,315,320,321,326,328,329,330,336,337,341,343,349,350,356,358,359,361,367,368,374,376,381,383,384,388,390,391,397,398,403,404,408,409,412,413,415
-----computeFrom-----
44,45
44,46
53,54
53,55
61,62
61,63
76,77
76,78
86,87
86,88
92,93
92,94
97,98
97,99
107,108
107,109
118,119
118,120
124,125
124,126
137,138
137,139
143,144
143,145
186,187
186,188
194,195
194,196
206,207
206,208
212,213
212,214
219,220
219,221
227,228
227,229
234,235
234,236
242,243
242,244
249,250
249,251
255,256
255,257
262,263
262,264
263,264
263,265
268,269
268,270
276,277
276,278
283,284
283,285
289,290
289,291
296,297
296,298
298,299
298,300
303,304
303,305
310,311
310,312
317,318
317,319
318,319
318,320
322,323
322,324
332,333
332,334
339,340
339,341
345,346
345,347
352,353
352,354
363,364
363,365
370,371
370,372
372,373
372,374
377,378
377,379
393,394
393,395
400,401
400,402
-----guardedBy-----
149,170
-----guardedByNegation-----
222,237
223,238
225,240
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;WhileStatement;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
voidstate(const KINFO *k, const struct varent *vent){	struct proc *p;	int flag;	char *cp;	char buf[16];	p = KI_PROC(k);	flag = p->p_flag;	cp = buf;	switch (p->p_stat) {	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}	cp++;	if (!(flag & P_INMEM))		*cp++ = 'W';	if (p->p_nice < NZERO)		*cp++ = '<';	else if (p->p_nice > NZERO)		*cp++ = 'N';	if (flag & P_TRACED)		*cp++ = 'X';	if (flag & P_WEXIT && p->p_stat != SZOMB)		*cp++ = 'E';	if (flag & P_PPWAIT)		*cp++ = 'V';	if ((flag & P_SYSTEM) || p->p_lock > 0)		*cp++ = 'L';	if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)		*cp++ = 'M';	if (flag & P_JAILED)		*cp++ = 'J';	if (KI_EPROC(k)->e_flag & EPROC_SLEADER)		*cp++ = 's';	if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)		*cp++ = '+';	*cp = '\0';	printf("%-*s", vent->width, buf);}
void
state(const KINFO *k, const struct varent *vent)
state
const KINFO *k
const KINFO
KINFO
*k
*
k
const struct varent *vent
const struct varent
varent
*vent
*
vent
{	struct proc *p;	int flag;	char *cp;	char buf[16];	p = KI_PROC(k);	flag = p->p_flag;	cp = buf;	switch (p->p_stat) {	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}	cp++;	if (!(flag & P_INMEM))		*cp++ = 'W';	if (p->p_nice < NZERO)		*cp++ = '<';	else if (p->p_nice > NZERO)		*cp++ = 'N';	if (flag & P_TRACED)		*cp++ = 'X';	if (flag & P_WEXIT && p->p_stat != SZOMB)		*cp++ = 'E';	if (flag & P_PPWAIT)		*cp++ = 'V';	if ((flag & P_SYSTEM) || p->p_lock > 0)		*cp++ = 'L';	if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)		*cp++ = 'M';	if (flag & P_JAILED)		*cp++ = 'J';	if (KI_EPROC(k)->e_flag & EPROC_SLEADER)		*cp++ = 's';	if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)		*cp++ = '+';	*cp = '\0';	printf("%-*s", vent->width, buf);}
struct proc *p;
struct proc *p;
struct proc
proc
*p
*
p
int flag;
int flag;
int
flag
flag
char *cp;
char *cp;
char
*cp
*
cp
char buf[16];
char buf[16];
char
buf[16]
buf
[16]
16
p = KI_PROC(k);
p = KI_PROC(k)
p
p
KI_PROC(k)
KI_PROC
KI_PROC
k
k
flag = p->p_flag;
flag = p->p_flag
flag
flag
p->p_flag
p
p
p_flag
cp = buf;
cp = buf
cp
cp
buf
buf
switch (p->p_stat) {	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}
p->p_stat
p
p
p_stat
{	case SSTOP:		*cp = 'T';		break;	case SSLEEP:		if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';		break;	case SRUN:	case SIDL:		*cp = 'R';		if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}		break;	case SZOMB:		*cp = 'Z';		break;	default:		*cp = '?';	}
case SSTOP:
SSTOP
SSTOP
*cp = 'T';
*cp = 'T'
*cp
cp
cp
'T'
break;
case SSLEEP:
SSLEEP
SSLEEP
if (flag & P_SINTR)	/* interruptable (long) */			*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';		else if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';
flag & P_SINTR
flag
flag
P_SINTR
P_SINTR
*cp = p->p_slptime >= MAXSLP ? 'I' : 'S';
*cp = p->p_slptime >= MAXSLP ? 'I' : 'S'
*cp
cp
cp
p->p_slptime >= MAXSLP ? 'I' : 'S'
p->p_slptime >= MAXSLP
p->p_slptime
p
p
p_slptime
MAXSLP
MAXSLP
'I'
'S'
if (KI_THREAD(k)->td_flags & TDF_SINTR)			*cp = 'S';		else			*cp = 'D';
KI_THREAD(k)->td_flags & TDF_SINTR
KI_THREAD(k)->td_flags
KI_THREAD(k)
KI_THREAD
KI_THREAD
k
k
td_flags
TDF_SINTR
TDF_SINTR
*cp = 'S';
*cp = 'S'
*cp
cp
cp
'S'
*cp = 'D';
*cp = 'D'
*cp
cp
cp
'D'
break;
case SRUN:
SRUN
SRUN
case SIDL:
SIDL
SIDL
*cp = 'R';
*cp = 'R'
*cp
cp
cp
'R'
if (KI_THREAD(k)->td_flags & TDF_RUNNING) {		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}
KI_THREAD(k)->td_flags & TDF_RUNNING
KI_THREAD(k)->td_flags
KI_THREAD(k)
KI_THREAD
KI_THREAD
k
k
td_flags
TDF_RUNNING
TDF_RUNNING
{		    ++cp;		    sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);		    while (cp[1])			++cp;		}
++cp;
++cp
cp
cp
sprintf(cp, "%d", KI_EPROC(k)->e_cpuid);
sprintf(cp, "%d", KI_EPROC(k)->e_cpuid)
sprintf
sprintf
cp
cp
"%d"
KI_EPROC(k)->e_cpuid
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_cpuid
while (cp[1])			++cp;
cp[1]
cp
cp
1
++cp;
++cp
cp
cp
break;
case SZOMB:
SZOMB
SZOMB
*cp = 'Z';
*cp = 'Z'
*cp
cp
cp
'Z'
break;
default:
*cp = '?';
*cp = '?'
*cp
cp
cp
'?'
cp++;
cp++
cp
cp
if (!(flag & P_INMEM))		*cp++ = 'W';
!(flag & P_INMEM)
(flag & P_INMEM)
flag & P_INMEM
flag
flag
P_INMEM
P_INMEM
*cp++ = 'W';
*cp++ = 'W'
*cp++
cp++
cp
cp
'W'
if (p->p_nice < NZERO)		*cp++ = '<';	else if (p->p_nice > NZERO)		*cp++ = 'N';
p->p_nice < NZERO
p->p_nice
p
p
p_nice
NZERO
NZERO
*cp++ = '<';
*cp++ = '<'
*cp++
cp++
cp
cp
'<'
if (p->p_nice > NZERO)		*cp++ = 'N';
p->p_nice > NZERO
p->p_nice
p
p
p_nice
NZERO
NZERO
*cp++ = 'N';
*cp++ = 'N'
*cp++
cp++
cp
cp
'N'
if (flag & P_TRACED)		*cp++ = 'X';
flag & P_TRACED
flag
flag
P_TRACED
P_TRACED
*cp++ = 'X';
*cp++ = 'X'
*cp++
cp++
cp
cp
'X'
if (flag & P_WEXIT && p->p_stat != SZOMB)		*cp++ = 'E';
flag & P_WEXIT && p->p_stat != SZOMB
flag & P_WEXIT
flag
flag
P_WEXIT
P_WEXIT
p->p_stat != SZOMB
p->p_stat
p
p
p_stat
SZOMB
SZOMB
*cp++ = 'E';
*cp++ = 'E'
*cp++
cp++
cp
cp
'E'
if (flag & P_PPWAIT)		*cp++ = 'V';
flag & P_PPWAIT
flag
flag
P_PPWAIT
P_PPWAIT
*cp++ = 'V';
*cp++ = 'V'
*cp++
cp++
cp
cp
'V'
if ((flag & P_SYSTEM) || p->p_lock > 0)		*cp++ = 'L';
(flag & P_SYSTEM) || p->p_lock > 0
(flag & P_SYSTEM)
flag & P_SYSTEM
flag
flag
P_SYSTEM
P_SYSTEM
p->p_lock > 0
p->p_lock
p
p
p_lock
0
*cp++ = 'L';
*cp++ = 'L'
*cp++
cp++
cp
cp
'L'
if (numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0)		*cp++ = 'M';
numcpus > 1 && KI_THREAD(k)->td_mpcount_unused == 0
numcpus > 1
numcpus
numcpus
1
KI_THREAD(k)->td_mpcount_unused == 0
KI_THREAD(k)->td_mpcount_unused
KI_THREAD(k)
KI_THREAD
KI_THREAD
k
k
td_mpcount_unused
0
*cp++ = 'M';
*cp++ = 'M'
*cp++
cp++
cp
cp
'M'
if (flag & P_JAILED)		*cp++ = 'J';
flag & P_JAILED
flag
flag
P_JAILED
P_JAILED
*cp++ = 'J';
*cp++ = 'J'
*cp++
cp++
cp
cp
'J'
if (KI_EPROC(k)->e_flag & EPROC_SLEADER)		*cp++ = 's';
KI_EPROC(k)->e_flag & EPROC_SLEADER
KI_EPROC(k)->e_flag
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_flag
EPROC_SLEADER
EPROC_SLEADER
*cp++ = 's';
*cp++ = 's'
*cp++
cp++
cp
cp
's'
if ((flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid)		*cp++ = '+';
(flag & P_CONTROLT) && KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid
(flag & P_CONTROLT)
flag & P_CONTROLT
flag
flag
P_CONTROLT
P_CONTROLT
KI_EPROC(k)->e_pgid == KI_EPROC(k)->e_tpgid
KI_EPROC(k)->e_pgid
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_pgid
KI_EPROC(k)->e_tpgid
KI_EPROC(k)
KI_EPROC
KI_EPROC
k
k
e_tpgid
*cp++ = '+';
*cp++ = '+'
*cp++
cp++
cp
cp
'+'
*cp = '\0';
*cp = '\0'
*cp
cp
cp
'\0'
printf("%-*s", vent->width, buf);
printf("%-*s", vent->width, buf)
printf
printf
"%-*s"
vent->width
vent
vent
width
buf
buf
-----joern-----
(62,183,0)
(60,116,0)
(64,178,0)
(91,228,0)
(160,141,0)
(37,228,0)
(137,54,0)
(54,212,0)
(140,193,0)
(125,93,0)
(178,20,0)
(192,246,0)
(84,79,0)
(182,191,0)
(181,99,0)
(204,64,0)
(142,151,0)
(102,169,0)
(146,216,0)
(226,39,0)
(190,92,0)
(176,88,0)
(81,244,0)
(211,215,0)
(192,220,0)
(19,217,0)
(194,228,0)
(95,75,0)
(78,148,0)
(122,193,0)
(246,230,0)
(97,42,0)
(54,137,0)
(160,208,0)
(214,122,0)
(31,157,0)
(80,193,0)
(51,193,0)
(14,157,0)
(165,235,0)
(13,193,0)
(180,141,0)
(240,150,0)
(100,193,0)
(232,193,0)
(236,196,0)
(18,228,0)
(120,212,0)
(94,220,0)
(65,176,0)
(75,167,0)
(129,228,0)
(203,244,0)
(227,230,0)
(112,143,0)
(151,32,0)
(43,26,0)
(21,240,0)
(178,64,0)
(115,23,0)
(152,191,0)
(244,81,0)
(102,127,0)
(179,111,0)
(56,191,0)
(196,236,0)
(233,193,0)
(71,208,0)
(150,208,0)
(135,228,0)
(235,227,0)
(105,211,0)
(108,4,0)
(128,228,0)
(44,4,0)
(2,137,0)
(2,174,0)
(205,104,0)
(12,150,0)
(104,169,0)
(174,2,0)
(202,20,0)
(5,137,0)
(65,92,0)
(248,129,0)
(148,228,0)
(27,83,0)
(224,12,0)
(238,25,0)
(131,228,0)
(138,230,0)
(144,72,0)
(145,127,0)
(63,155,0)
(170,126,0)
(25,90,0)
(127,97,0)
(42,97,0)
(95,157,0)
(161,244,0)
(58,246,0)
(79,93,0)
(172,225,0)
(157,97,0)
(222,136,0)
(119,217,0)
(212,54,0)
(101,128,0)
(44,219,0)
(176,65,0)
(8,212,0)
(158,160,0)
(206,46,0)
(186,86,0)
(138,72,0)
(116,136,0)
(106,208,0)
(132,48,0)
(169,104,0)
(246,192,0)
(147,193,0)
(24,228,0)
(201,199,0)
(81,97,0)
(99,181,0)
(40,102,0)
(244,203,0)
(209,227,0)
(23,228,0)
(173,91,0)
(7,89,0)
(189,181,0)
(211,105,0)
(86,150,0)
(39,230,0)
(72,183,0)
(131,208,0)
(177,37,0)
(185,203,0)
(124,150,0)
(163,239,0)
(114,86,0)
(191,182,0)
(151,176,0)
(79,84,0)
(143,28,0)
(83,97,0)
(52,170,0)
(113,208,0)
(228,208,0)
(35,63,0)
(41,226,0)
(247,198,0)
(210,81,0)
(89,150,0)
(6,155,0)
(201,228,0)
(183,228,0)
(91,26,0)
(28,193,0)
(235,225,0)
(103,28,0)
(206,239,0)
(183,72,0)
(76,18,0)
(55,139,0)
(128,101,0)
(227,235,0)
(64,228,0)
(4,228,0)
(168,39,0)
(47,160,0)
(99,29,0)
(87,208,0)
(137,2,0)
(70,98,0)
(148,198,0)
(124,97,0)
(175,81,0)
(242,96,0)
(156,37,0)
(57,208,0)
(84,228,0)
(90,25,0)
(25,228,0)
(184,196,0)
(33,117,0)
(90,111,0)
(17,128,0)
(207,195,0)
(49,208,0)
(185,150,0)
(245,46,0)
(72,138,0)
(50,131,0)
(107,32,0)
(200,75,0)
(133,201,0)
(241,117,0)
(53,75,0)
(176,151,0)
(216,228,0)
(92,230,0)
(218,192,0)
(88,176,0)
(188,221,0)
(46,206,0)
(127,102,0)
(18,139,0)
(68,2,0)
(98,226,0)
(136,116,0)
(4,44,0)
(16,183,0)
(141,134,0)
(59,135,0)
(223,208,0)
(1,240,0)
(101,10,0)
(69,208,0)
(234,208,0)
(92,65,0)
(167,75,0)
(82,63,0)
(32,151,0)
(86,88,0)
(74,219,0)
(225,235,0)
(42,230,0)
(105,228,0)
(23,167,0)
(155,63,0)
(150,124,0)
(126,193,0)
(97,208,0)
(199,201,0)
(121,193,0)
(143,228,0)
(159,24,0)
(217,150,0)
(46,228,0)
(197,84,0)
(30,193,0)
(196,228,0)
(32,230,0)
(85,208,0)
(166,29,0)
(24,122,0)
(73,10,0)
(9,150,0)
(38,97,0)
(136,97,0)
(226,98,0)
(141,160,0)
(63,97,0)
(213,42,0)
(77,193,0)
(191,150,0)
(170,228,0)
(33,135,0)
(45,174,0)
(162,105,0)
(118,124,0)
(11,95,0)
(149,208,0)
(169,102,0)
(216,96,0)
(135,33,0)
(174,230,0)
(243,126,0)
(236,229,0)
(34,127,0)
(203,185,0)
(104,150,0)
(181,228,0)
(67,104,0)
(249,193,0)
(220,192,0)
(36,185,0)
(231,208,0)
(164,229,0)
(75,95,0)
(237,208,0)
(129,48,0)
(88,86,0)
(22,185,0)
(110,208,0)
(221,228,0)
(130,136,0)
(154,12,0)
(183,26,0)
(187,208,0)
(139,193,0)
(198,208,0)
(61,141,0)
(39,226,0)
(171,83,0)
(123,228,0)
(157,95,0)
(66,215,0)
(0,124,0)
(199,195,0)
(153,65,0)
(3,89,0)
(109,138,0)
(132,129,1)
(46,228,1)
(138,109,1)
(104,205,1)
(42,230,1)
(126,243,1)
(229,164,1)
(2,174,1)
(179,90,1)
(131,50,1)
(195,207,1)
(20,202,1)
(66,211,1)
(109,62,1)
(141,134,1)
(221,188,1)
(84,228,1)
(162,116,1)
(145,104,1)
(156,183,1)
(142,32,1)
(98,226,1)
(196,228,1)
(56,131,1)
(235,227,1)
(115,12,1)
(151,32,1)
(172,235,1)
(159,83,1)
(84,197,1)
(247,148,1)
(64,228,1)
(152,56,1)
(238,54,1)
(12,224,1)
(170,52,1)
(248,98,1)
(246,230,1)
(81,210,1)
(5,2,1)
(129,228,1)
(92,190,1)
(245,169,1)
(9,97,1)
(123,150,1)
(4,108,1)
(138,230,1)
(94,192,1)
(8,120,1)
(105,228,1)
(24,228,1)
(186,220,1)
(170,228,1)
(241,33,1)
(91,228,1)
(25,228,1)
(196,184,1)
(155,6,1)
(224,154,1)
(144,138,1)
(61,47,1)
(22,89,1)
(36,22,1)
(214,24,1)
(143,228,1)
(137,2,1)
(192,218,1)
(41,39,1)
(218,246,1)
(99,181,1)
(82,35,1)
(128,228,1)
(6,63,1)
(151,142,1)
(185,150,1)
(136,97,1)
(37,177,1)
(50,233,1)
(146,98,1)
(133,155,1)
(59,217,1)
(201,228,1)
(39,230,1)
(243,170,1)
(185,36,1)
(79,84,1)
(86,114,1)
(191,150,1)
(221,228,1)
(98,70,1)
(201,133,1)
(120,239,1)
(136,130,1)
(75,53,1)
(23,228,1)
(233,96,1)
(190,86,1)
(2,68,1)
(233,167,1)
(104,150,1)
(81,97,1)
(188,37,1)
(163,206,1)
(7,116,1)
(154,83,1)
(75,95,1)
(222,155,1)
(72,138,1)
(105,162,1)
(228,194,1)
(52,83,1)
(203,244,1)
(235,165,1)
(131,228,1)
(140,139,1)
(227,209,1)
(246,58,1)
(219,74,1)
(32,107,1)
(117,241,1)
(10,73,1)
(213,38,1)
(70,226,1)
(167,75,1)
(108,220,1)
(16,91,1)
(227,230,1)
(226,39,1)
(249,225,1)
(74,44,1)
(242,216,1)
(209,122,1)
(178,64,1)
(0,9,1)
(37,228,1)
(28,103,1)
(68,174,1)
(127,34,1)
(67,117,1)
(50,51,1)
(182,191,1)
(1,54,1)
(63,82,1)
(173,225,1)
(23,115,1)
(54,212,1)
(3,7,1)
(24,159,1)
(45,212,1)
(53,95,1)
(11,157,1)
(55,18,1)
(148,78,1)
(225,172,1)
(135,228,1)
(90,25,1)
(102,40,1)
(141,180,1)
(194,123,1)
(25,238,1)
(244,81,1)
(50,126,1)
(60,136,1)
(216,146,1)
(101,128,1)
(114,186,1)
(135,59,1)
(15,160,1)
(215,66,1)
(129,248,1)
(183,228,1)
(54,137,1)
(226,41,1)
(158,141,1)
(7,195,1)
(217,150,1)
(161,81,1)
(200,95,1)
(51,28,1)
(12,150,1)
(86,150,1)
(171,27,1)
(19,119,1)
(225,235,1)
(78,88,1)
(192,246,1)
(17,89,1)
(207,199,1)
(128,17,1)
(169,102,1)
(189,203,1)
(83,171,1)
(122,214,1)
(116,60,1)
(35,229,1)
(50,249,1)
(165,227,1)
(203,185,1)
(118,0,1)
(102,127,1)
(240,21,1)
(202,178,1)
(125,79,1)
(236,196,1)
(112,83,1)
(210,175,1)
(18,228,1)
(7,215,1)
(220,94,1)
(46,245,1)
(177,156,1)
(14,23,1)
(176,65,1)
(42,213,1)
(35,182,1)
(33,135,1)
(160,141,1)
(137,5,1)
(62,16,1)
(204,240,1)
(88,176,1)
(63,97,1)
(174,45,1)
(168,12,1)
(120,169,1)
(139,55,1)
(92,230,1)
(21,1,1)
(40,127,1)
(191,152,1)
(124,118,1)
(198,247,1)
(239,163,1)
(160,158,1)
(181,228,1)
(58,20,1)
(199,201,1)
(124,97,1)
(119,29,1)
(183,72,1)
(244,161,1)
(157,31,1)
(176,151,1)
(111,179,1)
(212,8,1)
(211,105,1)
(67,217,1)
(175,185,1)
(216,228,1)
(58,240,1)
(83,97,1)
(103,143,1)
(186,219,1)
(44,4,1)
(130,222,1)
(88,86,1)
(169,104,1)
(143,112,1)
(65,153,1)
(34,145,1)
(4,228,1)
(127,97,1)
(164,236,1)
(153,92,1)
(249,37,1)
(91,173,1)
(206,46,1)
(155,63,1)
(89,3,1)
(197,88,1)
(148,228,1)
(150,124,1)
(65,92,1)
(39,168,1)
(64,204,1)
(73,101,1)
(32,230,1)
(166,99,1)
(116,136,1)
(93,125,1)
(119,203,1)
(156,221,1)
(180,61,1)
(233,48,1)
(1,111,1)
(76,83,1)
(95,157,1)
(75,200,1)
(240,150,1)
(220,192,1)
(107,65,1)
(78,93,1)
(89,150,1)
(50,140,1)
(184,182,1)
(18,76,1)
(181,189,1)
(31,14,1)
(97,42,1)
(29,166,1)
(217,19,1)
(96,242,1)
(27,228,1)
(95,11,1)
(22,10,1)
(47,198,1)
(72,144,1)
(205,67,1)
(157,97,1)
(48,132,1)
(174,230,1)
(146,98,2)
(65,92,2)
(81,185,2)
(191,150,2)
(135,228,2)
(131,228,2)
(238,54,2)
(135,217,2)
(211,116,2)
(31,12,2)
(161,185,2)
(98,226,2)
(183,225,2)
(211,105,2)
(199,155,2)
(246,230,2)
(165,83,2)
(17,89,2)
(151,86,2)
(125,88,2)
(89,150,2)
(242,98,2)
(179,54,2)
(60,155,2)
(32,86,2)
(4,228,2)
(215,116,2)
(153,86,2)
(245,169,2)
(239,169,2)
(91,225,2)
(75,12,2)
(176,151,2)
(42,230,2)
(73,89,2)
(168,12,2)
(18,83,2)
(45,212,2)
(163,169,2)
(46,228,2)
(226,39,2)
(76,83,2)
(59,217,2)
(151,32,2)
(14,12,2)
(174,230,2)
(210,185,2)
(88,176,2)
(154,83,2)
(214,83,2)
(64,228,2)
(66,116,2)
(181,203,2)
(176,65,2)
(16,225,2)
(136,97,2)
(108,220,2)
(141,134,2)
(24,83,2)
(101,128,2)
(173,225,2)
(235,83,2)
(216,98,2)
(86,150,2)
(244,185,2)
(37,37,2)
(236,182,2)
(138,225,2)
(157,97,2)
(23,12,2)
(204,240,2)
(217,150,2)
(84,228,2)
(225,235,2)
(201,155,2)
(98,12,2)
(28,83,2)
(203,244,2)
(90,54,2)
(144,225,2)
(97,42,2)
(109,225,2)
(101,89,2)
(220,192,2)
(221,37,2)
(241,217,2)
(39,12,2)
(62,225,2)
(224,83,2)
(207,155,2)
(248,98,2)
(236,196,2)
(169,102,2)
(132,98,2)
(162,116,2)
(12,83,2)
(129,228,2)
(148,228,2)
(37,225,2)
(51,83,2)
(178,64,2)
(136,155,2)
(202,240,2)
(63,97,2)
(105,228,2)
(221,228,2)
(115,12,2)
(177,225,2)
(249,83,2)
(92,86,2)
(189,203,2)
(235,227,2)
(41,12,2)
(176,86,2)
(92,230,2)
(74,220,2)
(156,37,2)
(197,88,2)
(183,228,2)
(37,228,2)
(160,141,2)
(226,12,2)
(75,95,2)
(143,83,2)
(184,182,2)
(34,104,2)
(185,150,2)
(203,185,2)
(107,86,2)
(140,83,2)
(159,83,2)
(243,83,2)
(90,25,2)
(103,83,2)
(112,83,2)
(143,228,2)
(126,83,2)
(240,150,2)
(127,104,2)
(225,83,2)
(116,155,2)
(166,203,2)
(102,127,2)
(130,155,2)
(200,95,2)
(167,75,2)
(33,135,2)
(150,124,2)
(233,83,2)
(53,95,2)
(192,246,2)
(133,155,2)
(117,217,2)
(32,230,2)
(55,83,2)
(128,89,2)
(222,155,2)
(20,240,2)
(81,97,2)
(11,12,2)
(64,240,2)
(129,98,2)
(182,191,2)
(95,12,2)
(72,138,2)
(72,225,2)
(167,12,2)
(104,150,2)
(93,88,2)
(206,169,2)
(177,37,2)
(145,104,2)
(65,86,2)
(164,182,2)
(244,81,2)
(29,203,2)
(68,212,2)
(99,181,2)
(79,84,2)
(88,86,2)
(116,136,2)
(172,83,2)
(142,86,2)
(137,212,2)
(174,212,2)
(23,228,2)
(46,169,2)
(128,228,2)
(96,98,2)
(195,155,2)
(155,63,2)
(216,228,2)
(84,88,2)
(99,203,2)
(227,230,2)
(5,212,2)
(124,97,2)
(10,89,2)
(2,174,2)
(111,54,2)
(209,83,2)
(39,230,2)
(138,230,2)
(127,97,2)
(199,201,2)
(52,83,2)
(181,228,2)
(201,228,2)
(95,157,2)
(137,2,2)
(70,12,2)
(33,217,2)
(190,86,2)
(105,116,2)
(79,88,2)
(188,37,2)
(122,83,2)
(25,228,2)
(170,83,2)
(44,4,2)
(219,220,2)
(178,240,2)
(25,54,2)
(102,104,2)
(4,220,2)
(83,97,2)
(24,228,2)
(227,83,2)
(175,185,2)
(170,228,2)
(54,212,2)
(12,150,2)
(40,104,2)
(2,212,2)
(139,83,2)
(196,182,2)
(183,72,2)
(206,46,2)
(54,137,2)
(44,220,2)
(169,104,2)
(229,182,2)
(48,98,2)
(157,12,2)
(156,225,2)
(91,228,2)
(196,228,2)
(18,228,2)
-----------------------------------
(0,p)
(1,flag)
(2,KI_THREAD(k)
(3,P_TRACED)
(4,cp++)
(5,0)
(6,NZERO)
(7,flag)
(8,1)
(9,flag)
(10,*cp++ = \'X\')
(11,MAXSLP)
(12,flag & P_SINTR)
(13,default:)
(14,p)
(15,RET)
(16,cp)
(17,cp)
(18,*cp)
(19,P_PPWAIT)
(20,*cp++ = \'J\')
(21,P_JAILED)
(22,flag)
(23,*cp)
(24,*cp)
(25,cp++)
(26,)
(27,p)
(28,*cp = \'T\')
(29,*cp++ = \'E\')
(30,case SIDL:)
(31,p_slptime)
(32,KI_EPROC(k)
(33,*cp++)
(34,p_lock)
(35,p)
(36,P_WEXIT)
(37,cp[1])
(38,p)
(39,KI_THREAD(k)
(40,0)
(41,td_flags)
(42,KI_PROC(k)
(43,while (cp[1])
(44,*cp++)
(45,k)
(46,cp++)
(47,"%-*s")
(48,*cp = \'D\')
(49,flag)
(50,cp)
(51,break;)
(52,cp)
(53,\'I\')
(54,numcpus > 1 && KI_THREAD(k)
(55,\'Z\')
(56,flag)
(57,if ((flag & P_CONTROLT)
(58,k)
(59,cp)
(60,NZERO)
(61,vent)
(62,"%d")
(63,p->p_nice)
(64,cp++)
(65,KI_EPROC(k)
(66,\'N\')
(67,flag)
(68,td_mpcount_unused)
(69,buf)
(70,TDF_SINTR)
(71,if (numcpus > 1 && KI_THREAD(k)
(72,KI_EPROC(k)
(73,\'X\')
(74,\'s\')
(75,p->p_slptime >= MAXSLP ? \'I\' : \'S\')
(76,cp)
(77,case SZOMB:)
(78,cp)
(79,*cp++)
(80,case SSTOP:)
(81,p->p_stat)
(82,p_nice)
(83,p->p_stat)
(84,cp++)
(85,if (flag & P_JAILED)
(86,flag & P_CONTROLT)
(87,if (flag & P_WEXIT && p->p_stat != SZOMB)
(88,(flag & P_CONTROLT)
(89,flag & P_TRACED)
(90,*cp++)
(91,++cp)
(92,KI_EPROC(k)
(93,*cp++ = \'+\')
(94,EPROC_SLEADER)
(95,p->p_slptime >= MAXSLP)
(96,*cp = \'S\')
(97,p = KI_PROC(k)
(98,KI_THREAD(k)
(99,*cp++)
(100,if (KI_THREAD(k)
(101,*cp++)
(102,p->p_lock > 0)
(103,\'T\')
(104,flag & P_SYSTEM)
(105,cp++)
(106,if (KI_EPROC(k)
(107,k)
(108,cp)
(109,k)
(110,if (flag & P_TRACED)
(111,*cp++ = \'M\')
(112,cp)
(113,if (flag & P_PPWAIT)
(114,P_CONTROLT)
(115,cp)
(116,p->p_nice > NZERO)
(117,*cp++ = \'V\')
(118,p_flag)
(119,flag)
(120,numcpus)
(121,if (flag & P_SINTR)
(122,*cp = \'R\')
(123,cp)
(124,p->p_flag)
(125,\'+\')
(126,*cp = \'?\')
(127,p->p_lock)
(128,cp++)
(129,*cp)
(130,p_nice)
(131,cp++)
(132,\'D\')
(133,cp)
(134,const struct varent *vent)
(135,cp++)
(136,p->p_nice)
(137,KI_THREAD(k)
(138,KI_EPROC(k)
(139,*cp = \'Z\')
(140,break;)
(141,vent->width)
(142,e_tpgid)
(143,*cp)
(144,e_cpuid)
(145,p)
(146,cp)
(147,case SSLEEP:)
(148,*cp)
(149,if ((flag & P_SYSTEM)
(150,flag = p->p_flag)
(151,KI_EPROC(k)
(152,P_INMEM)
(153,e_pgid)
(154,flag)
(155,p->p_nice < NZERO)
(156,cp)
(157,p->p_slptime)
(158,buf)
(159,cp)
(160,printf("%-*s", vent->width, buf)
(161,SZOMB)
(162,cp)
(163,\'L\')
(164,\'W\')
(165,td_flags)
(166,\'E\')
(167,*cp = p->p_slptime >= MAXSLP ? \'I\' : \'S\')
(168,k)
(169,(flag & P_SYSTEM)
(170,*cp)
(171,p_stat)
(172,TDF_RUNNING)
(173,cp)
(174,KI_THREAD(k)
(175,p)
(176,KI_EPROC(k)
(177,1)
(178,*cp++)
(179,\'M\')
(180,width)
(181,cp++)
(182,!(flag & P_INMEM)
(183,sprintf(cp, "%d", KI_EPROC(k)
(184,cp)
(185,flag & P_WEXIT)
(186,flag)
(187,p)
(188,cp)
(189,cp)
(190,k)
(191,flag & P_INMEM)
(192,KI_EPROC(k)
(193,)
(194,buf)
(195,*cp++ = \'<\')
(196,cp++)
(197,cp)
(198,*cp = \'\\0\')
(199,*cp++)
(200,\'S\')
(201,cp++)
(202,\'J\')
(203,flag & P_WEXIT && p->p_stat != SZOMB)
(204,cp)
(205,P_SYSTEM)
(206,*cp++)
(207,\'<\')
(208,)
(209,k)
(210,p_stat)
(211,*cp++)
(212,numcpus > 1)
(213,k)
(214,\'R\')
(215,*cp++ = \'N\')
(216,*cp)
(217,flag & P_PPWAIT)
(218,e_flag)
(219,*cp++ = \'s\')
(220,KI_EPROC(k)
(221,++cp)
(222,p)
(223,cp)
(224,P_SINTR)
(225,KI_THREAD(k)
(226,KI_THREAD(k)
(227,KI_THREAD(k)
(228,cp = buf)
(229,*cp++ = \'W\')
(230,const KINFO *k)
(231,switch (p->p_stat)
(232,case SRUN:)
(233,break;)
(234,if (p->p_nice < NZERO)
(235,KI_THREAD(k)
(236,*cp++)
(237,if (!(flag & P_INMEM)
(238,cp)
(239,*cp++ = \'L\')
(240,flag & P_JAILED)
(241,\'V\')
(242,\'S\')
(243,\'?\')
(244,p->p_stat != SZOMB)
(245,cp)
(246,KI_EPROC(k)
(247,\'\\0\')
(248,cp)
(249,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^