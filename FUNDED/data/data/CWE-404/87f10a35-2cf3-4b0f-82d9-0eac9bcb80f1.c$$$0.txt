-----label-----
0
-----code-----
static struct cpufreq_interactive_tunables *alloc_tunable(
					struct cpufreq_policy *policy)
{
	struct cpufreq_interactive_tunables *tunables;

	tunables = kzalloc(sizeof(*tunables), GFP_KERNEL);
	if (!tunables)
		return ERR_PTR(-ENOMEM);

	tunables->above_hispeed_delay = default_above_hispeed_delay;
	tunables->nabove_hispeed_delay =
		ARRAY_SIZE(default_above_hispeed_delay);
	tunables->go_hispeed_load = DEFAULT_GO_HISPEED_LOAD;
	tunables->target_loads = default_target_loads;
	tunables->ntarget_loads = ARRAY_SIZE(default_target_loads);
	tunables->min_sample_time = DEFAULT_MIN_SAMPLE_TIME;
	tunables->timer_rate = DEFAULT_TIMER_RATE;
	tunables->prev_timer_rate = DEFAULT_TIMER_RATE;
	tunables->boostpulse_duration_val = DEFAULT_MIN_SAMPLE_TIME;
	tunables->timer_slack_val = DEFAULT_TIMER_SLACK;

	spin_lock_init(&tunables->target_loads_lock);
	spin_lock_init(&tunables->above_hispeed_delay_lock);

	return tunables;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
13,27
13,28
13,29
14,15
15,16
15,17
16,17
18,19
18,20
21,22
22,23
22,24
23,24
25,26
25,27
25,28
26,27
28,29
29,30
30,31
31,32
33,34
35,36
35,37
36,37
37,38
39,40
40,41
40,42
41,42
43,44
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
54,55
55,56
55,57
56,57
56,58
57,58
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
74,76
75,76
75,77
76,77
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
94,96
95,96
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
125,127
126,127
126,128
127,128
130,131
132,133
133,134
133,135
134,135
136,137
137,138
137,139
138,139
141,142
142,143
142,144
143,144
145,146
146,147
146,148
147,148
150,151
151,152
-----nextToken-----
3,5,6,9,11,12,17,19,20,24,27,32,34,38,42,45,50,51,53,58,59,62,64,69,70,72,77,78,80,85,86,89,91,96,97,99,104,105,107,112,113,115,120,121,123,128,129,131,135,139,140,144,148,149,152
-----computeFrom-----
22,23
22,24
47,48
47,49
55,56
55,57
66,67
66,68
74,75
74,76
82,83
82,84
93,94
93,95
101,102
101,103
109,110
109,111
117,118
117,119
125,126
125,127
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct cpufreq_interactive_tunables *alloc_tunable(					struct cpufreq_policy *policy){	struct cpufreq_interactive_tunables *tunables;	tunables = kzalloc(sizeof(*tunables), GFP_KERNEL);	if (!tunables)		return ERR_PTR(-ENOMEM);	tunables->above_hispeed_delay = default_above_hispeed_delay;	tunables->nabove_hispeed_delay =		ARRAY_SIZE(default_above_hispeed_delay);	tunables->go_hispeed_load = DEFAULT_GO_HISPEED_LOAD;	tunables->target_loads = default_target_loads;	tunables->ntarget_loads = ARRAY_SIZE(default_target_loads);	tunables->min_sample_time = DEFAULT_MIN_SAMPLE_TIME;	tunables->timer_rate = DEFAULT_TIMER_RATE;	tunables->prev_timer_rate = DEFAULT_TIMER_RATE;	tunables->boostpulse_duration_val = DEFAULT_MIN_SAMPLE_TIME;	tunables->timer_slack_val = DEFAULT_TIMER_SLACK;	spin_lock_init(&tunables->target_loads_lock);	spin_lock_init(&tunables->above_hispeed_delay_lock);	return tunables;}
static struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*alloc_tunable(					struct cpufreq_policy *policy)
*
alloc_tunable
struct cpufreq_policy *policy
struct cpufreq_policy
cpufreq_policy
*policy
*
policy
{	struct cpufreq_interactive_tunables *tunables;	tunables = kzalloc(sizeof(*tunables), GFP_KERNEL);	if (!tunables)		return ERR_PTR(-ENOMEM);	tunables->above_hispeed_delay = default_above_hispeed_delay;	tunables->nabove_hispeed_delay =		ARRAY_SIZE(default_above_hispeed_delay);	tunables->go_hispeed_load = DEFAULT_GO_HISPEED_LOAD;	tunables->target_loads = default_target_loads;	tunables->ntarget_loads = ARRAY_SIZE(default_target_loads);	tunables->min_sample_time = DEFAULT_MIN_SAMPLE_TIME;	tunables->timer_rate = DEFAULT_TIMER_RATE;	tunables->prev_timer_rate = DEFAULT_TIMER_RATE;	tunables->boostpulse_duration_val = DEFAULT_MIN_SAMPLE_TIME;	tunables->timer_slack_val = DEFAULT_TIMER_SLACK;	spin_lock_init(&tunables->target_loads_lock);	spin_lock_init(&tunables->above_hispeed_delay_lock);	return tunables;}
struct cpufreq_interactive_tunables *tunables;
struct cpufreq_interactive_tunables *tunables;
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*tunables
*
tunables
tunables = kzalloc(sizeof(*tunables), GFP_KERNEL);
tunables = kzalloc(sizeof(*tunables), GFP_KERNEL)
tunables
tunables
kzalloc(sizeof(*tunables), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*tunables)
(*tunables)
*tunables
tunables
tunables
GFP_KERNEL
GFP_KERNEL
if (!tunables)		return ERR_PTR(-ENOMEM);
!tunables
tunables
tunables
return ERR_PTR(-ENOMEM);
ERR_PTR(-ENOMEM)
ERR_PTR
ERR_PTR
-ENOMEM
ENOMEM
ENOMEM
tunables->above_hispeed_delay = default_above_hispeed_delay;
tunables->above_hispeed_delay = default_above_hispeed_delay
tunables->above_hispeed_delay
tunables
tunables
above_hispeed_delay
default_above_hispeed_delay
default_above_hispeed_delay
tunables->nabove_hispeed_delay =		ARRAY_SIZE(default_above_hispeed_delay);
tunables->nabove_hispeed_delay =		ARRAY_SIZE(default_above_hispeed_delay)
tunables->nabove_hispeed_delay
tunables
tunables
nabove_hispeed_delay
ARRAY_SIZE(default_above_hispeed_delay)
ARRAY_SIZE
ARRAY_SIZE
default_above_hispeed_delay
default_above_hispeed_delay
tunables->go_hispeed_load = DEFAULT_GO_HISPEED_LOAD;
tunables->go_hispeed_load = DEFAULT_GO_HISPEED_LOAD
tunables->go_hispeed_load
tunables
tunables
go_hispeed_load
DEFAULT_GO_HISPEED_LOAD
DEFAULT_GO_HISPEED_LOAD
tunables->target_loads = default_target_loads;
tunables->target_loads = default_target_loads
tunables->target_loads
tunables
tunables
target_loads
default_target_loads
default_target_loads
tunables->ntarget_loads = ARRAY_SIZE(default_target_loads);
tunables->ntarget_loads = ARRAY_SIZE(default_target_loads)
tunables->ntarget_loads
tunables
tunables
ntarget_loads
ARRAY_SIZE(default_target_loads)
ARRAY_SIZE
ARRAY_SIZE
default_target_loads
default_target_loads
tunables->min_sample_time = DEFAULT_MIN_SAMPLE_TIME;
tunables->min_sample_time = DEFAULT_MIN_SAMPLE_TIME
tunables->min_sample_time
tunables
tunables
min_sample_time
DEFAULT_MIN_SAMPLE_TIME
DEFAULT_MIN_SAMPLE_TIME
tunables->timer_rate = DEFAULT_TIMER_RATE;
tunables->timer_rate = DEFAULT_TIMER_RATE
tunables->timer_rate
tunables
tunables
timer_rate
DEFAULT_TIMER_RATE
DEFAULT_TIMER_RATE
tunables->prev_timer_rate = DEFAULT_TIMER_RATE;
tunables->prev_timer_rate = DEFAULT_TIMER_RATE
tunables->prev_timer_rate
tunables
tunables
prev_timer_rate
DEFAULT_TIMER_RATE
DEFAULT_TIMER_RATE
tunables->boostpulse_duration_val = DEFAULT_MIN_SAMPLE_TIME;
tunables->boostpulse_duration_val = DEFAULT_MIN_SAMPLE_TIME
tunables->boostpulse_duration_val
tunables
tunables
boostpulse_duration_val
DEFAULT_MIN_SAMPLE_TIME
DEFAULT_MIN_SAMPLE_TIME
tunables->timer_slack_val = DEFAULT_TIMER_SLACK;
tunables->timer_slack_val = DEFAULT_TIMER_SLACK
tunables->timer_slack_val
tunables
tunables
timer_slack_val
DEFAULT_TIMER_SLACK
DEFAULT_TIMER_SLACK
spin_lock_init(&tunables->target_loads_lock);
spin_lock_init(&tunables->target_loads_lock)
spin_lock_init
spin_lock_init
&tunables->target_loads_lock
tunables->target_loads_lock
tunables
tunables
target_loads_lock
spin_lock_init(&tunables->above_hispeed_delay_lock);
spin_lock_init(&tunables->above_hispeed_delay_lock)
spin_lock_init
spin_lock_init
&tunables->above_hispeed_delay_lock
tunables->above_hispeed_delay_lock
tunables
tunables
above_hispeed_delay_lock
return tunables;
tunables
tunables
-----joern-----
(36,31,0)
(8,18,0)
(71,66,0)
(11,35,0)
(58,4,0)
(67,65,0)
(4,58,0)
(35,18,0)
(59,69,0)
(64,35,0)
(60,25,0)
(39,30,0)
(30,18,0)
(78,15,0)
(14,35,0)
(5,35,0)
(47,23,0)
(14,31,0)
(11,80,0)
(34,50,0)
(68,5,0)
(5,8,0)
(50,19,0)
(23,33,0)
(72,69,0)
(56,52,0)
(46,21,0)
(2,4,0)
(62,53,0)
(76,19,0)
(38,2,0)
(29,64,0)
(32,41,0)
(48,11,0)
(42,18,0)
(69,49,0)
(65,67,0)
(15,35,0)
(19,18,0)
(17,11,0)
(7,75,0)
(53,33,0)
(74,8,0)
(19,76,0)
(26,28,0)
(31,18,0)
(52,66,0)
(28,42,0)
(21,32,0)
(69,35,0)
(1,35,0)
(43,70,0)
(33,18,0)
(32,21,0)
(35,70,0)
(40,35,0)
(50,35,0)
(28,35,0)
(70,27,0)
(77,5,0)
(73,41,0)
(51,40,0)
(0,14,0)
(75,45,0)
(63,40,0)
(40,30,0)
(52,35,0)
(45,18,0)
(3,18,0)
(64,18,0)
(70,35,0)
(24,45,0)
(73,64,0)
(20,80,0)
(9,35,0)
(6,76,0)
(33,53,0)
(22,50,0)
(49,18,0)
(57,23,0)
(23,35,0)
(37,42,0)
(61,75,0)
(55,1,0)
(27,70,0)
(75,35,0)
(66,18,0)
(1,67,0)
(80,18,0)
(13,2,0)
(54,14,0)
(65,18,0)
(79,49,0)
(4,2,0)
(12,52,0)
(67,1,0)
(58,18,0)
(16,18,0)
(25,27,0)
(2,35,0)
(27,25,0)
(44,1,0)
(10,28,0)
(49,79,1)
(34,22,1)
(45,24,1)
(14,0,1)
(26,10,1)
(7,49,1)
(36,14,1)
(52,56,1)
(0,54,1)
(66,71,1)
(70,43,1)
(4,2,1)
(17,48,1)
(2,35,1)
(29,58,1)
(23,47,1)
(2,38,1)
(6,50,1)
(52,35,1)
(61,7,1)
(21,46,1)
(28,35,1)
(48,8,1)
(1,35,1)
(13,65,1)
(75,61,1)
(44,30,1)
(50,34,1)
(33,53,1)
(5,77,1)
(24,75,1)
(46,15,1)
(68,42,1)
(12,33,1)
(79,69,1)
(38,13,1)
(56,12,1)
(40,35,1)
(42,37,1)
(50,35,1)
(8,74,1)
(77,68,1)
(15,35,1)
(51,63,1)
(41,32,1)
(64,35,1)
(40,51,1)
(70,27,1)
(64,29,1)
(54,15,1)
(35,70,1)
(19,76,1)
(65,67,1)
(14,35,1)
(32,21,1)
(22,31,1)
(30,39,1)
(69,59,1)
(28,26,1)
(31,36,1)
(27,25,1)
(76,6,1)
(71,52,1)
(57,45,1)
(63,80,1)
(78,35,1)
(47,57,1)
(20,11,1)
(53,62,1)
(11,35,1)
(11,17,1)
(1,55,1)
(74,5,1)
(62,23,1)
(5,35,1)
(60,9,1)
(10,66,1)
(75,35,1)
(15,78,1)
(69,35,1)
(55,44,1)
(37,28,1)
(80,20,1)
(43,27,1)
(25,60,1)
(73,41,1)
(39,40,1)
(58,4,1)
(72,19,1)
(59,72,1)
(73,64,1)
(67,1,1)
(23,35,1)
(11,15,2)
(19,15,2)
(65,67,2)
(68,15,2)
(61,15,2)
(64,15,2)
(53,15,2)
(5,15,2)
(20,15,2)
(39,15,2)
(73,41,2)
(72,15,2)
(46,15,2)
(37,15,2)
(2,35,2)
(65,15,2)
(27,25,2)
(47,15,2)
(52,35,2)
(38,15,2)
(70,27,2)
(75,35,2)
(50,35,2)
(8,15,2)
(42,15,2)
(62,15,2)
(52,15,2)
(66,15,2)
(28,15,2)
(36,15,2)
(1,15,2)
(51,15,2)
(64,35,2)
(48,15,2)
(24,15,2)
(57,15,2)
(67,15,2)
(54,15,2)
(5,35,2)
(14,35,2)
(6,15,2)
(12,15,2)
(77,15,2)
(58,15,2)
(69,35,2)
(33,15,2)
(15,35,2)
(14,15,2)
(40,35,2)
(22,15,2)
(45,15,2)
(69,15,2)
(76,15,2)
(41,15,2)
(80,15,2)
(23,15,2)
(49,15,2)
(40,15,2)
(34,15,2)
(71,15,2)
(13,15,2)
(73,64,2)
(32,15,2)
(56,15,2)
(10,15,2)
(30,15,2)
(33,53,2)
(17,15,2)
(2,15,2)
(79,15,2)
(23,35,2)
(63,15,2)
(26,15,2)
(7,15,2)
(0,15,2)
(75,15,2)
(19,76,2)
(4,2,2)
(4,15,2)
(11,35,2)
(29,15,2)
(67,1,2)
(74,15,2)
(28,35,2)
(1,35,2)
(44,15,2)
(50,15,2)
(35,70,2)
(32,21,2)
(31,15,2)
(58,4,2)
(59,15,2)
(21,15,2)
(55,15,2)
-----------------------------------
(0,above_hispeed_delay)
(1,tunables->target_loads_lock)
(2,tunables->above_hispeed_delay_lock)
(3,if (!tunables)
(4,&tunables->above_hispeed_delay_lock)
(5,tunables->prev_timer_rate)
(6,default_above_hispeed_delay)
(7,tunables)
(8,tunables->prev_timer_rate = DEFAULT_TIMER_RATE)
(9,tunables)
(10,tunables)
(11,tunables->boostpulse_duration_val)
(12,tunables)
(13,tunables)
(14,tunables->above_hispeed_delay)
(15,!tunables)
(16,tunables)
(17,boostpulse_duration_val)
(18,)
(19,tunables->nabove_hispeed_delay =\n\\n\\t\\tARRAY_SIZE(default_above_hispeed_delay)
(20,DEFAULT_MIN_SAMPLE_TIME)
(21,-ENOMEM)
(22,tunables)
(23,tunables->ntarget_loads)
(24,default_target_loads)
(25,*tunables)
(26,timer_rate)
(27,sizeof(*tunables)
(28,tunables->timer_rate)
(29,tunables)
(30,tunables->timer_slack_val = DEFAULT_TIMER_SLACK)
(31,tunables->above_hispeed_delay = default_above_hispeed_delay)
(32,ERR_PTR(-ENOMEM)
(33,tunables->ntarget_loads = ARRAY_SIZE(default_target_loads)
(34,nabove_hispeed_delay)
(35,tunables = kzalloc(sizeof(*tunables)
(36,default_above_hispeed_delay)
(37,DEFAULT_TIMER_RATE)
(38,above_hispeed_delay_lock)
(39,DEFAULT_TIMER_SLACK)
(40,tunables->timer_slack_val)
(41,return ERR_PTR(-ENOMEM)
(42,tunables->timer_rate = DEFAULT_TIMER_RATE)
(43,GFP_KERNEL)
(44,tunables)
(45,tunables->target_loads = default_target_loads)
(46,ENOMEM)
(47,ntarget_loads)
(48,tunables)
(49,tunables->go_hispeed_load = DEFAULT_GO_HISPEED_LOAD)
(50,tunables->nabove_hispeed_delay)
(51,timer_slack_val)
(52,tunables->min_sample_time)
(53,ARRAY_SIZE(default_target_loads)
(54,tunables)
(55,target_loads_lock)
(56,min_sample_time)
(57,tunables)
(58,spin_lock_init(&tunables->above_hispeed_delay_lock)
(59,go_hispeed_load)
(60,tunables)
(61,target_loads)
(62,default_target_loads)
(63,tunables)
(64,return tunables;)
(65,spin_lock_init(&tunables->target_loads_lock)
(66,tunables->min_sample_time = DEFAULT_MIN_SAMPLE_TIME)
(67,&tunables->target_loads_lock)
(68,tunables)
(69,tunables->go_hispeed_load)
(70,kzalloc(sizeof(*tunables)
(71,DEFAULT_MIN_SAMPLE_TIME)
(72,tunables)
(73,RET)
(74,DEFAULT_TIMER_RATE)
(75,tunables->target_loads)
(76,ARRAY_SIZE(default_above_hispeed_delay)
(77,prev_timer_rate)
(78,tunables)
(79,DEFAULT_GO_HISPEED_LOAD)
(80,tunables->boostpulse_duration_val = DEFAULT_MIN_SAMPLE_TIME)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^