-----label-----
0
-----code-----
static ssize_t store_timer_rate(struct cpufreq_interactive_tunables *tunables,
		const char *buf, size_t count)
{
	int ret;
	unsigned long val, val_round;
	struct cpufreq_interactive_tunables *t;
	int cpu;

	ret = strict_strtoul(buf, 0, &val);
	if (ret < 0)
		return ret;

	val_round = jiffies_to_usecs(usecs_to_jiffies(val));
	if (val != val_round)
		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",
			val_round);
	tunables->timer_rate = val_round;
	tunables->prev_timer_rate = val_round;

	if (!tunables->use_sched_load)
		return count;

	for_each_possible_cpu(cpu) {
		if (!per_cpu(polinfo, cpu))
			continue;
		t = per_cpu(polinfo, cpu)->cached_tunables;
		if (t && t->use_sched_load) {
			t->timer_rate = val_round;
			t->prev_timer_rate = val_round;
		}
	}
	set_window_helper(tunables);

	return count;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
23,24
24,25
24,26
26,27
28,29
29,30
29,31
29,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
57,58
58,59
60,61
60,62
61,62
61,63
62,63
65,66
66,67
68,69
69,70
69,71
70,71
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
109,111
110,111
111,112
111,113
112,113
115,116
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
125,128
126,127
126,128
127,128
128,129
128,130
128,131
129,130
131,132
133,134
136,137
137,138
137,139
138,139
140,141
140,142
141,142
141,143
141,144
142,143
144,145
146,147
149,150
149,151
150,151
150,152
151,152
153,154
153,155
154,155
157,158
157,159
158,159
159,160
159,161
160,161
160,162
161,162
164,165
166,167
167,168
167,169
168,169
168,170
169,170
172,173
174,175
175,176
175,177
176,177
178,179
180,181
181,182
-----nextToken-----
3,5,8,10,11,13,15,16,19,21,25,27,30,32,34,38,40,41,44,46,50,53,55,56,59,63,64,67,71,74,77,79,83,85,89,90,92,97,98,100,105,106,108,113,114,117,121,123,130,132,134,135,139,143,145,147,148,152,155,156,162,163,165,170,171,173,177,179,182
-----computeFrom-----
48,49
48,50
61,62
61,63
69,70
69,71
81,82
81,83
94,95
94,96
102,103
102,104
137,138
137,139
150,151
150,152
159,160
159,161
167,168
167,169
-----guardedBy-----
63,67
85,92
155,170
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static ssize_t store_timer_rate(struct cpufreq_interactive_tunables *tunables,		const char *buf, size_t count){	int ret;	unsigned long val, val_round;	struct cpufreq_interactive_tunables *t;	int cpu;	ret = strict_strtoul(buf, 0, &val);	if (ret < 0)		return ret;	val_round = jiffies_to_usecs(usecs_to_jiffies(val));	if (val != val_round)		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);	tunables->timer_rate = val_round;	tunables->prev_timer_rate = val_round;	if (!tunables->use_sched_load)		return count;	for_each_possible_cpu(cpu) {		if (!per_cpu(polinfo, cpu))			continue;		t = per_cpu(polinfo, cpu)->cached_tunables;		if (t && t->use_sched_load) {			t->timer_rate = val_round;			t->prev_timer_rate = val_round;		}	}	set_window_helper(tunables);	return count;}
static ssize_t
ssize_t
store_timer_rate(struct cpufreq_interactive_tunables *tunables,		const char *buf, size_t count)
store_timer_rate
struct cpufreq_interactive_tunables *tunables
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*tunables
*
tunables
const char *buf
const char
*buf
*
buf
size_t count
size_t
size_t
count
count
{	int ret;	unsigned long val, val_round;	struct cpufreq_interactive_tunables *t;	int cpu;	ret = strict_strtoul(buf, 0, &val);	if (ret < 0)		return ret;	val_round = jiffies_to_usecs(usecs_to_jiffies(val));	if (val != val_round)		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);	tunables->timer_rate = val_round;	tunables->prev_timer_rate = val_round;	if (!tunables->use_sched_load)		return count;	for_each_possible_cpu(cpu) {		if (!per_cpu(polinfo, cpu))			continue;		t = per_cpu(polinfo, cpu)->cached_tunables;		if (t && t->use_sched_load) {			t->timer_rate = val_round;			t->prev_timer_rate = val_round;		}	}	set_window_helper(tunables);	return count;}
int ret;
int ret;
int
ret
ret
unsigned long val, val_round;
unsigned long val, val_round;
unsigned long
val
val
val_round
val_round
struct cpufreq_interactive_tunables *t;
struct cpufreq_interactive_tunables *t;
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*t
*
t
int cpu;
int cpu;
int
cpu
cpu
ret = strict_strtoul(buf, 0, &val);
ret = strict_strtoul(buf, 0, &val)
ret
ret
strict_strtoul(buf, 0, &val)
strict_strtoul
strict_strtoul
buf
buf
0
&val
val
val
if (ret < 0)		return ret;
ret < 0
ret
ret
0
return ret;
ret
ret
val_round = jiffies_to_usecs(usecs_to_jiffies(val));
val_round = jiffies_to_usecs(usecs_to_jiffies(val))
val_round
val_round
jiffies_to_usecs(usecs_to_jiffies(val))
jiffies_to_usecs
jiffies_to_usecs
usecs_to_jiffies(val)
usecs_to_jiffies
usecs_to_jiffies
val
val
if (val != val_round)		pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);
val != val_round
val
val
val_round
val_round
pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round);
pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\n",			val_round)
pr_warn
pr_warn
"timer_rate not aligned to jiffy. Rounded up to %lu\n"
val_round
val_round
tunables->timer_rate = val_round;
tunables->timer_rate = val_round
tunables->timer_rate
tunables
tunables
timer_rate
val_round
val_round
tunables->prev_timer_rate = val_round;
tunables->prev_timer_rate = val_round
tunables->prev_timer_rate
tunables
tunables
prev_timer_rate
val_round
val_round
if (!tunables->use_sched_load)		return count;
!tunables->use_sched_load
tunables->use_sched_load
tunables
tunables
use_sched_load
return count;
count
count
for_each_possible_cpu(cpu)
for_each_possible_cpu(cpu)
for_each_possible_cpu
for_each_possible_cpu
cpu
cpu
)
{		if (!per_cpu(polinfo, cpu))			continue;		t = per_cpu(polinfo, cpu)->cached_tunables;		if (t && t->use_sched_load) {			t->timer_rate = val_round;			t->prev_timer_rate = val_round;		}	}
if (!per_cpu(polinfo, cpu))			continue;
!per_cpu(polinfo, cpu)
per_cpu(polinfo, cpu)
per_cpu
per_cpu
polinfo
polinfo
cpu
cpu
continue;
t = per_cpu(polinfo, cpu)->cached_tunables;
t = per_cpu(polinfo, cpu)->cached_tunables
t
t
per_cpu(polinfo, cpu)->cached_tunables
per_cpu(polinfo, cpu)
per_cpu
per_cpu
polinfo
polinfo
cpu
cpu
cached_tunables
if (t && t->use_sched_load) {			t->timer_rate = val_round;			t->prev_timer_rate = val_round;		}
t && t->use_sched_load
t
t
t->use_sched_load
t
t
use_sched_load
{			t->timer_rate = val_round;			t->prev_timer_rate = val_round;		}
t->timer_rate = val_round;
t->timer_rate = val_round
t->timer_rate
t
t
timer_rate
val_round
val_round
t->prev_timer_rate = val_round;
t->prev_timer_rate = val_round
t->prev_timer_rate
t
t
prev_timer_rate
val_round
val_round
set_window_helper(tunables);
set_window_helper(tunables)
set_window_helper
set_window_helper
tunables
tunables
return count;
count
count
-----joern-----
(78,2,0)
(43,22,0)
(14,67,0)
(31,8,0)
(2,30,0)
(25,2,0)
(79,67,0)
(15,22,0)
(52,8,0)
(70,32,0)
(16,56,0)
(8,37,0)
(82,47,0)
(17,34,0)
(51,74,0)
(48,39,0)
(4,63,0)
(23,16,0)
(17,19,0)
(57,73,0)
(0,86,0)
(45,22,0)
(40,22,0)
(32,36,0)
(24,74,0)
(30,2,0)
(34,21,0)
(21,22,0)
(10,22,0)
(53,22,0)
(12,37,0)
(74,71,0)
(18,22,0)
(84,33,0)
(61,44,0)
(19,47,0)
(10,56,0)
(33,44,0)
(12,69,0)
(47,36,0)
(35,34,0)
(86,3,0)
(73,47,0)
(4,61,0)
(43,47,0)
(72,12,0)
(11,22,0)
(76,64,0)
(35,76,0)
(80,22,0)
(68,16,0)
(16,43,0)
(46,39,0)
(42,73,0)
(3,86,0)
(71,22,0)
(65,67,0)
(75,86,0)
(83,82,0)
(12,72,0)
(13,35,0)
(37,22,0)
(39,56,0)
(58,17,0)
(38,30,0)
(55,76,0)
(50,63,0)
(60,21,0)
(49,12,0)
(19,64,0)
(4,33,0)
(26,22,0)
(27,34,0)
(33,22,0)
(41,17,0)
(66,3,0)
(62,72,0)
(28,37,0)
(47,22,0)
(29,21,0)
(34,3,0)
(74,56,0)
(71,47,0)
(36,32,0)
(20,39,0)
(9,61,0)
(1,47,0)
(5,35,0)
(85,71,0)
(76,47,0)
(37,12,0)
(2,34,0)
(6,10,0)
(54,43,0)
(3,34,0)
(39,46,0)
(63,37,0)
(59,19,0)
(77,82,0)
(30,34,0)
(36,47,0)
(67,14,0)
(7,12,0)
(85,74,1)
(48,20,1)
(20,71,1)
(27,81,1)
(77,83,1)
(19,47,1)
(47,36,1)
(65,46,1)
(12,72,1)
(17,34,1)
(83,73,1)
(66,86,1)
(10,6,1)
(78,25,1)
(35,34,1)
(43,54,1)
(74,56,1)
(36,32,1)
(71,47,1)
(0,27,1)
(71,85,1)
(34,3,1)
(67,79,1)
(16,56,1)
(7,28,1)
(10,56,1)
(49,7,1)
(46,39,1)
(6,76,1)
(57,42,1)
(4,33,1)
(42,47,1)
(61,44,1)
(73,47,1)
(52,31,1)
(23,73,1)
(35,5,1)
(1,8,1)
(30,34,1)
(17,58,1)
(12,69,1)
(84,10,1)
(76,47,1)
(27,14,1)
(24,43,1)
(79,65,1)
(39,56,1)
(73,57,1)
(70,1,1)
(13,19,1)
(30,38,1)
(37,12,1)
(31,37,1)
(62,49,1)
(2,78,1)
(63,37,1)
(4,63,1)
(14,67,1)
(6,30,1)
(43,47,1)
(8,37,1)
(82,77,1)
(74,51,1)
(5,13,1)
(16,68,1)
(30,2,1)
(81,14,1)
(59,17,1)
(23,82,1)
(41,30,1)
(8,52,1)
(50,8,1)
(63,50,1)
(68,23,1)
(72,62,1)
(86,75,1)
(61,9,1)
(4,61,1)
(39,48,1)
(19,59,1)
(25,38,1)
(75,0,1)
(51,24,1)
(3,66,1)
(32,70,1)
(54,16,1)
(55,35,1)
(58,41,1)
(33,84,1)
(38,34,1)
(82,47,1)
(2,34,1)
(33,44,1)
(9,46,1)
(76,55,1)
(3,86,1)
(3,86,2)
(25,38,2)
(4,61,2)
(65,46,2)
(9,46,2)
(12,69,2)
(1,8,2)
(6,46,2)
(14,67,2)
(37,12,2)
(2,38,2)
(71,47,2)
(5,30,2)
(8,37,2)
(73,8,2)
(27,46,2)
(67,46,2)
(36,32,2)
(85,8,2)
(74,56,2)
(43,8,2)
(63,8,2)
(82,47,2)
(39,8,2)
(12,72,2)
(47,36,2)
(32,8,2)
(33,46,2)
(34,46,2)
(66,46,2)
(79,46,2)
(17,34,2)
(2,34,2)
(73,47,2)
(24,8,2)
(83,73,2)
(81,14,2)
(57,8,2)
(16,8,2)
(20,8,2)
(51,8,2)
(55,30,2)
(77,73,2)
(86,46,2)
(38,46,2)
(30,2,2)
(76,47,2)
(19,30,2)
(35,30,2)
(63,37,2)
(19,47,2)
(13,30,2)
(17,30,2)
(58,30,2)
(0,46,2)
(61,46,2)
(3,46,2)
(4,33,2)
(47,8,2)
(75,46,2)
(16,56,2)
(14,46,2)
(4,63,2)
(30,46,2)
(68,8,2)
(74,8,2)
(59,30,2)
(10,46,2)
(84,46,2)
(36,8,2)
(82,73,2)
(70,8,2)
(39,56,2)
(23,8,2)
(46,39,2)
(42,8,2)
(41,30,2)
(61,44,2)
(54,8,2)
(71,8,2)
(46,8,2)
(33,44,2)
(48,8,2)
(34,3,2)
(35,34,2)
(30,34,2)
(10,56,2)
(78,38,2)
(50,8,2)
(76,30,2)
(43,47,2)
-----------------------------------
(0,polinfo)
(1,val_round)
(2,t->use_sched_load)
(3,per_cpu(polinfo, cpu)
(4,RET)
(5,prev_timer_rate)
(6,tunables)
(7,buf)
(8,ret < 0)
(9,count)
(10,set_window_helper(tunables)
(11,cpu)
(12,strict_strtoul(buf, 0, &val)
(13,t)
(14,!per_cpu(polinfo, cpu)
(15,if (val != val_round)
(16,tunables->timer_rate)
(17,t->timer_rate)
(18,ret)
(19,t->timer_rate = val_round)
(20,tunables)
(21,)
(22,)
(23,tunables)
(24,tunables)
(25,t)
(26,val)
(27,t)
(28,ret)
(29,if (!per_cpu(polinfo, cpu)
(30,t && t->use_sched_load)
(31,ret)
(32,usecs_to_jiffies(val)
(33,return count;)
(34,t = per_cpu(polinfo, cpu)
(35,t->prev_timer_rate)
(36,jiffies_to_usecs(usecs_to_jiffies(val)
(37,ret = strict_strtoul(buf, 0, &val)
(38,t)
(39,tunables->use_sched_load)
(40,if (!tunables->use_sched_load)
(41,t)
(42,val)
(43,tunables->timer_rate = val_round)
(44,size_t count)
(45,if (ret < 0)
(46,!tunables->use_sched_load)
(47,val_round = jiffies_to_usecs(usecs_to_jiffies(val)
(48,use_sched_load)
(49,0)
(50,ret)
(51,prev_timer_rate)
(52,0)
(53,t)
(54,val_round)
(55,val_round)
(56,struct cpufreq_interactive_tunables *tunables)
(57,val_round)
(58,timer_rate)
(59,val_round)
(60,if (t && t->use_sched_load)
(61,return count;)
(62,val)
(63,return ret;)
(64,)
(65,polinfo)
(66,cached_tunables)
(67,per_cpu(polinfo, cpu)
(68,timer_rate)
(69,const char *buf)
(70,val)
(71,tunables->prev_timer_rate = val_round)
(72,&val)
(73,val != val_round)
(74,tunables->prev_timer_rate)
(75,cpu)
(76,t->prev_timer_rate = val_round)
(77,val_round)
(78,use_sched_load)
(79,cpu)
(80,val_round)
(81,continue;)
(82,pr_warn("timer_rate not aligned to jiffy. Rounded up to %lu\\n",\n\\n\\t\\t\\tval_round)
(83,"timer_rate not aligned to jiffy. Rounded up to %lu\\n")
(84,count)
(85,val_round)
(86,per_cpu(polinfo, cpu)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^