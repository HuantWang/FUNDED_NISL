-----label-----
1
-----code-----
void blk_sync_queue(struct request_queue *q)
{
	del_timer_sync(&q->timeout);
	cancel_work_sync(&q->timeout_work);

	if (q->mq_ops) {
		struct blk_mq_hw_ctx *hctx;
		int i;

		queue_for_each_hw_ctx(q, hctx, i) {
			cancel_work_sync(&hctx->run_work);
			cancel_delayed_work_sync(&hctx->delay_work);
		}
	} else {
		cancel_delayed_work_sync(&q->delay_work);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
17,18
17,19
18,19
21,22
22,23
22,24
23,24
25,26
26,27
26,28
27,28
30,31
30,32
30,33
31,32
31,33
32,33
35,36
35,37
35,38
35,39
35,40
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
59,60
59,61
60,61
61,62
61,63
62,63
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
79,80
80,81
80,82
81,82
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,7,9,10,15,19,20,24,28,29,33,34,39,41,42,45,47,51,53,55,57,63,67,68,72,76,77,82,86,87
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
void blk_sync_queue(struct request_queue *q){	del_timer_sync(&q->timeout);	cancel_work_sync(&q->timeout_work);	if (q->mq_ops) {		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	} else {		cancel_delayed_work_sync(&q->delay_work);	}}
void
blk_sync_queue(struct request_queue *q)
blk_sync_queue
struct request_queue *q
struct request_queue
request_queue
*q
*
q
{	del_timer_sync(&q->timeout);	cancel_work_sync(&q->timeout_work);	if (q->mq_ops) {		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	} else {		cancel_delayed_work_sync(&q->delay_work);	}}
del_timer_sync(&q->timeout);
del_timer_sync(&q->timeout)
del_timer_sync
del_timer_sync
&q->timeout
q->timeout
q
q
timeout
cancel_work_sync(&q->timeout_work);
cancel_work_sync(&q->timeout_work)
cancel_work_sync
cancel_work_sync
&q->timeout_work
q->timeout_work
q
q
timeout_work
if (q->mq_ops) {		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	} else {		cancel_delayed_work_sync(&q->delay_work);	}
q->mq_ops
q
q
mq_ops
{		struct blk_mq_hw_ctx *hctx;		int i;		queue_for_each_hw_ctx(q, hctx, i) {			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}	}
struct blk_mq_hw_ctx *hctx;
struct blk_mq_hw_ctx *hctx;
struct blk_mq_hw_ctx
blk_mq_hw_ctx
*hctx
*
hctx
int i;
int i;
int
i
i
queue_for_each_hw_ctx(q, hctx, i)
queue_for_each_hw_ctx(q, hctx, i)
queue_for_each_hw_ctx
queue_for_each_hw_ctx
q
q
hctx
hctx
i
i
)
{			cancel_work_sync(&hctx->run_work);			cancel_delayed_work_sync(&hctx->delay_work);		}
cancel_work_sync(&hctx->run_work);
cancel_work_sync(&hctx->run_work)
cancel_work_sync
cancel_work_sync
&hctx->run_work
hctx->run_work
hctx
hctx
run_work
cancel_delayed_work_sync(&hctx->delay_work);
cancel_delayed_work_sync(&hctx->delay_work)
cancel_delayed_work_sync
cancel_delayed_work_sync
&hctx->delay_work
hctx->delay_work
hctx
hctx
delay_work
{		cancel_delayed_work_sync(&q->delay_work);	}
cancel_delayed_work_sync(&q->delay_work);
cancel_delayed_work_sync(&q->delay_work)
cancel_delayed_work_sync
cancel_delayed_work_sync
&q->delay_work
q->delay_work
q
q
delay_work
-----joern-----
(10,7,0)
(9,8,0)
(12,2,0)
(36,7,0)
(11,25,0)
(31,3,0)
(17,23,0)
(15,22,0)
(13,10,0)
(36,12,0)
(35,33,0)
(25,1,0)
(20,25,0)
(26,29,0)
(23,22,0)
(24,17,0)
(33,27,0)
(21,10,0)
(35,3,0)
(28,24,0)
(8,7,0)
(3,29,0)
(33,35,0)
(18,30,0)
(32,29,0)
(30,18,0)
(16,27,0)
(12,36,0)
(18,22,0)
(27,33,0)
(14,27,0)
(2,12,0)
(1,31,0)
(6,36,0)
(0,8,0)
(19,24,0)
(1,25,0)
(5,36,0)
(31,1,0)
(17,24,0)
(10,30,0)
(2,34,0)
(24,7,0)
(30,10,0)
(23,17,0)
(1,25,1)
(36,7,1)
(12,36,1)
(5,6,1)
(28,19,1)
(17,24,1)
(14,16,1)
(31,1,1)
(9,0,1)
(20,35,1)
(11,20,1)
(25,11,1)
(0,18,1)
(2,12,1)
(8,7,1)
(36,5,1)
(16,8,1)
(30,10,1)
(6,8,1)
(10,21,1)
(21,13,1)
(24,7,1)
(4,2,1)
(10,7,1)
(27,14,1)
(4,31,1)
(8,9,1)
(13,23,1)
(24,28,1)
(23,17,1)
(33,27,1)
(18,30,1)
(35,33,1)
(31,1,2)
(16,8,2)
(36,7,2)
(31,8,2)
(6,8,2)
(36,8,2)
(23,17,2)
(12,8,2)
(30,10,2)
(11,8,2)
(12,36,2)
(33,27,2)
(1,8,2)
(35,33,2)
(14,8,2)
(10,7,2)
(24,7,2)
(8,7,2)
(35,8,2)
(17,24,2)
(27,8,2)
(25,8,2)
(33,8,2)
(2,8,2)
(5,8,2)
(1,25,2)
(18,30,2)
(20,8,2)
(2,12,2)
-----------------------------------
(0,q)
(1,&hctx->delay_work)
(2,cancel_delayed_work_sync(&q->delay_work)
(3,)
(4,RET)
(5,delay_work)
(6,q)
(7,struct request_queue *q)
(8,q->mq_ops)
(9,mq_ops)
(10,q->timeout_work)
(11,delay_work)
(12,&q->delay_work)
(13,q)
(14,run_work)
(15,if (q->mq_ops)
(16,hctx)
(17,&q->timeout)
(18,cancel_work_sync(&q->timeout_work)
(19,q)
(20,hctx)
(21,timeout_work)
(22,)
(23,del_timer_sync(&q->timeout)
(24,q->timeout)
(25,hctx->delay_work)
(26,hctx)
(27,hctx->run_work)
(28,timeout)
(29,)
(30,&q->timeout_work)
(31,cancel_delayed_work_sync(&hctx->delay_work)
(32,i)
(33,&hctx->run_work)
(34,)
(35,cancel_work_sync(&hctx->run_work)
(36,q->delay_work)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^