-----label-----
1
-----code-----
static void badSink(char * data)
{
    /* FLAW: We are incrementing the pointer in the loop - this will cause us to free the
     * memory block not at the start of the buffer */
    for (; *data != '\0'; data++)
    {
        if (*data == SEARCH_CHAR)
        {
            printLine("We have a match!");
            break;
        }
    }
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
11,13
11,14
11,15
13,14
13,15
14,15
15,16
18,19
19,20
21,22
22,23
22,24
23,24
23,25
24,25
25,26
27,28
29,30
29,31
30,31
31,32
31,33
32,33
36,37
37,38
37,39
38,39
40,41
-----nextToken-----
2,4,6,8,9,12,16,17,20,26,28,33,34,35,39,41
-----computeFrom-----
13,14
13,15
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ForStatement;NullStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void badSink(char * data){    /* FLAW: We are incrementing the pointer in the loop - this will cause us to free the     * memory block not at the start of the buffer */    for (; *data != '\0'; data++)    {        if (*data == SEARCH_CHAR)        {            printLine("We have a match!");            break;        }    }    free(data);}
static void
badSink(char * data)
badSink
char * data
char
* data
*
data
{    /* FLAW: We are incrementing the pointer in the loop - this will cause us to free the     * memory block not at the start of the buffer */    for (; *data != '\0'; data++)    {        if (*data == SEARCH_CHAR)        {            printLine("We have a match!");            break;        }    }    free(data);}
for (; *data != '\0'; data++)    {        if (*data == SEARCH_CHAR)        {            printLine("We have a match!");            break;        }    }
;
*data != '\0'
*data
data
data
'\0'
data++
data
data
{        if (*data == SEARCH_CHAR)        {            printLine("We have a match!");            break;        }    }
if (*data == SEARCH_CHAR)        {            printLine("We have a match!");            break;        }
*data == SEARCH_CHAR
*data
data
data
SEARCH_CHAR
SEARCH_CHAR
{            printLine("We have a match!");            break;        }
printLine("We have a match!");
printLine("We have a match!")
printLine
printLine
"We have a match!"
break;
free(data);
free(data)
free
free
data
data
-----joern-----
(4,6,0)
(16,7,0)
(12,7,0)
(13,16,0)
(1,18,0)
(17,13,0)
(20,8,0)
(16,13,0)
(2,7,0)
(21,15,0)
(15,18,0)
(11,2,0)
(9,19,0)
(12,6,0)
(5,0,0)
(15,7,0)
(6,12,0)
(10,12,0)
(3,16,0)
(8,0,0)
(21,5,1)
(4,12,1)
(2,7,1)
(16,7,1)
(15,21,1)
(6,4,1)
(11,13,1)
(21,6,1)
(8,20,1)
(10,2,1)
(16,3,1)
(2,11,1)
(15,7,1)
(13,16,1)
(3,6,1)
(13,17,1)
(12,7,1)
(5,8,1)
(6,12,1)
(17,16,1)
(12,10,1)
(20,13,1)
(14,15,1)
(20,13,2)
(16,7,2)
(5,13,2)
(8,13,2)
(6,12,2)
(12,7,2)
(12,13,2)
(6,13,2)
(13,6,2)
(10,13,2)
(13,16,2)
(2,13,2)
(17,6,2)
(3,6,2)
(16,6,2)
(2,7,2)
(15,7,2)
(11,13,2)
(4,13,2)
-----------------------------------
(0,)
(1,for (; *data != \'\\0\'; data++)
(2,data++)
(3,data)
(4,\'\\0\')
(5,break;)
(6,*data != \'\\0\')
(7,char * data)
(8,printLine("We have a match!")
(9,if (*data == SEARCH_CHAR)
(10,data)
(11,data)
(12,*data)
(13,*data == SEARCH_CHAR)
(14,RET)
(15,free(data)
(16,*data)
(17,SEARCH_CHAR)
(18,)
(19,)
(20,"We have a match!")
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^