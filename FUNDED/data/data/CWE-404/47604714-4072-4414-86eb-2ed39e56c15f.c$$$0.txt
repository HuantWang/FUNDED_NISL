-----label-----
1
-----code-----
static enum odd_mech_type zpodd_get_mech_type(struct ata_device *dev)
{
	char buf[16];
	unsigned int ret;
	struct rm_feature_desc *desc = (void *)(buf + 8);
	struct ata_taskfile tf;
	static const char cdb[] = {  GPCMD_GET_CONFIGURATION,
			2,      /* only 1 feature descriptor requested */
			0, 3,   /* 3, removable medium feature */
			0, 0, 0,/* reserved */
			0, sizeof(buf),
			0, 0, 0,
	};

	ata_tf_init(dev, &tf);
	tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
	tf.command = ATA_CMD_PACKET;
	tf.protocol = ATAPI_PROT_PIO;
	tf.lbam = sizeof(buf);

	ret = ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,
				buf, sizeof(buf), 0);
	if (ret)
		return ODD_MECH_TYPE_UNSUPPORTED;

	if (be16_to_cpu(desc->feature_code) != 3)
		return ODD_MECH_TYPE_UNSUPPORTED;

	if (desc->mech_type == 0 && desc->load == 0 && desc->eject == 1)
		return ODD_MECH_TYPE_SLOT;
	else if (desc->mech_type == 1 && desc->load == 0 && desc->eject == 1)
		return ODD_MECH_TYPE_DRAWER;
	else
		return ODD_MECH_TYPE_UNSUPPORTED;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
9,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
12,25
12,26
13,14
14,15
14,16
16,17
16,18
18,19
20,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
52,53
52,54
52,55
55,56
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
56,65
56,66
56,67
56,68
57,58
66,67
67,68
68,69
73,74
74,75
74,76
74,77
75,76
77,78
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
111,113
112,113
115,116
116,117
117,118
119,120
120,121
120,122
121,122
123,124
123,125
123,126
123,127
123,128
123,129
123,130
123,131
124,125
126,127
128,129
129,130
131,132
133,134
135,136
137,138
138,139
139,140
142,143
142,144
143,144
145,146
146,147
148,149
148,150
149,150
149,151
150,151
150,152
151,152
153,154
153,155
154,155
158,159
159,160
161,162
161,163
161,164
162,163
162,164
163,164
163,165
164,165
164,166
165,166
165,167
166,167
170,171
170,172
171,172
171,173
172,173
176,177
176,178
177,178
177,179
178,179
182,183
183,184
185,186
185,187
185,188
186,187
186,188
187,188
187,189
188,189
188,190
189,190
189,191
190,191
194,195
194,196
195,196
195,197
196,197
200,201
200,202
201,202
201,203
202,203
206,207
207,208
209,210
210,211
-----nextToken-----
3,5,8,10,11,15,17,19,22,24,28,30,31,35,37,41,42,46,48,51,53,54,58,59,60,61,62,63,64,65,69,70,71,72,76,78,81,86,87,90,92,97,98,100,105,106,108,113,114,118,122,125,127,130,132,134,136,140,141,144,147,152,155,156,157,160,167,168,169,173,174,175,179,180,181,184,191,192,193,197,198,199,203,204,205,208,211
-----computeFrom-----
39,40
39,41
83,84
83,85
88,89
88,90
94,95
94,96
102,103
102,104
110,111
110,112
120,121
120,122
149,150
149,151
162,163
162,164
163,164
163,165
164,165
164,166
170,171
170,172
176,177
176,178
186,187
186,188
187,188
187,189
188,189
188,190
194,195
194,196
200,201
200,202
-----guardedBy-----
-----guardedByNegation-----
168,192
180,204
174,198
179,203
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static enum odd_mech_type zpodd_get_mech_type(struct ata_device *dev){	char buf[16];	unsigned int ret;	struct rm_feature_desc *desc = (void *)(buf + 8);	struct ata_taskfile tf;	static const char cdb[] = {  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	};	ata_tf_init(dev, &tf);	tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;	tf.command = ATA_CMD_PACKET;	tf.protocol = ATAPI_PROT_PIO;	tf.lbam = sizeof(buf);	ret = ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,				buf, sizeof(buf), 0);	if (ret)		return ODD_MECH_TYPE_UNSUPPORTED;	if (be16_to_cpu(desc->feature_code) != 3)		return ODD_MECH_TYPE_UNSUPPORTED;	if (desc->mech_type == 0 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_SLOT;	else if (desc->mech_type == 1 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_DRAWER;	else		return ODD_MECH_TYPE_UNSUPPORTED;}
static enum odd_mech_type
odd_mech_type
zpodd_get_mech_type(struct ata_device *dev)
zpodd_get_mech_type
struct ata_device *dev
struct ata_device
ata_device
*dev
*
dev
{	char buf[16];	unsigned int ret;	struct rm_feature_desc *desc = (void *)(buf + 8);	struct ata_taskfile tf;	static const char cdb[] = {  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	};	ata_tf_init(dev, &tf);	tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;	tf.command = ATA_CMD_PACKET;	tf.protocol = ATAPI_PROT_PIO;	tf.lbam = sizeof(buf);	ret = ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,				buf, sizeof(buf), 0);	if (ret)		return ODD_MECH_TYPE_UNSUPPORTED;	if (be16_to_cpu(desc->feature_code) != 3)		return ODD_MECH_TYPE_UNSUPPORTED;	if (desc->mech_type == 0 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_SLOT;	else if (desc->mech_type == 1 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_DRAWER;	else		return ODD_MECH_TYPE_UNSUPPORTED;}
char buf[16];
char buf[16];
char
buf[16]
buf
[16]
16
unsigned int ret;
unsigned int ret;
unsigned int
ret
ret
struct rm_feature_desc *desc = (void *)(buf + 8);
struct rm_feature_desc *desc = (void *)(buf + 8);
struct rm_feature_desc
rm_feature_desc
*desc = (void *)(buf + 8)
*
desc
= (void *)(buf + 8)
(void *)(buf + 8)
void *
void
*
*
(buf + 8)
buf + 8
buf
buf
8
struct ata_taskfile tf;
struct ata_taskfile tf;
struct ata_taskfile
ata_taskfile
tf
tf
static const char cdb[] = {  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	};
static const char cdb[] = {  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	};
static const char
cdb[] = {  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	}
cdb
[]
= {  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	}
{  GPCMD_GET_CONFIGURATION,			2,      /* only 1 feature descriptor requested */			0, 3,   /* 3, removable medium feature */			0, 0, 0,/* reserved */			0, sizeof(buf),			0, 0, 0,	}
GPCMD_GET_CONFIGURATION
GPCMD_GET_CONFIGURATION
2
0
3
0
0
0
0
sizeof(buf)
(buf)
buf
buf
0
0
0
ata_tf_init(dev, &tf);
ata_tf_init(dev, &tf)
ata_tf_init
ata_tf_init
dev
dev
&tf
tf
tf
tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE;
tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE
tf.flags
tf
tf
flags
ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE
ATA_TFLAG_ISADDR
ATA_TFLAG_ISADDR
ATA_TFLAG_DEVICE
ATA_TFLAG_DEVICE
tf.command = ATA_CMD_PACKET;
tf.command = ATA_CMD_PACKET
tf.command
tf
tf
command
ATA_CMD_PACKET
ATA_CMD_PACKET
tf.protocol = ATAPI_PROT_PIO;
tf.protocol = ATAPI_PROT_PIO
tf.protocol
tf
tf
protocol
ATAPI_PROT_PIO
ATAPI_PROT_PIO
tf.lbam = sizeof(buf);
tf.lbam = sizeof(buf)
tf.lbam
tf
tf
lbam
sizeof(buf)
(buf)
buf
buf
ret = ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,				buf, sizeof(buf), 0);
ret = ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,				buf, sizeof(buf), 0)
ret
ret
ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,				buf, sizeof(buf), 0)
ata_exec_internal
ata_exec_internal
dev
dev
&tf
tf
tf
cdb
cdb
DMA_FROM_DEVICE
DMA_FROM_DEVICE
buf
buf
sizeof(buf)
(buf)
buf
buf
0
if (ret)		return ODD_MECH_TYPE_UNSUPPORTED;
ret
ret
return ODD_MECH_TYPE_UNSUPPORTED;
ODD_MECH_TYPE_UNSUPPORTED
ODD_MECH_TYPE_UNSUPPORTED
if (be16_to_cpu(desc->feature_code) != 3)		return ODD_MECH_TYPE_UNSUPPORTED;
be16_to_cpu(desc->feature_code) != 3
be16_to_cpu(desc->feature_code)
be16_to_cpu
be16_to_cpu
desc->feature_code
desc
desc
feature_code
3
return ODD_MECH_TYPE_UNSUPPORTED;
ODD_MECH_TYPE_UNSUPPORTED
ODD_MECH_TYPE_UNSUPPORTED
if (desc->mech_type == 0 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_SLOT;	else if (desc->mech_type == 1 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_DRAWER;	else		return ODD_MECH_TYPE_UNSUPPORTED;
desc->mech_type == 0 && desc->load == 0 && desc->eject == 1
desc->mech_type == 0 && desc->load == 0
desc->mech_type == 0
desc->mech_type
desc
desc
mech_type
0
desc->load == 0
desc->load
desc
desc
load
0
desc->eject == 1
desc->eject
desc
desc
eject
1
return ODD_MECH_TYPE_SLOT;
ODD_MECH_TYPE_SLOT
ODD_MECH_TYPE_SLOT
if (desc->mech_type == 1 && desc->load == 0 && desc->eject == 1)		return ODD_MECH_TYPE_DRAWER;	else		return ODD_MECH_TYPE_UNSUPPORTED;
desc->mech_type == 1 && desc->load == 0 && desc->eject == 1
desc->mech_type == 1 && desc->load == 0
desc->mech_type == 1
desc->mech_type
desc
desc
mech_type
1
desc->load == 0
desc->load
desc
desc
load
0
desc->eject == 1
desc->eject
desc
desc
eject
1
return ODD_MECH_TYPE_DRAWER;
ODD_MECH_TYPE_DRAWER
ODD_MECH_TYPE_DRAWER
return ODD_MECH_TYPE_UNSUPPORTED;
ODD_MECH_TYPE_UNSUPPORTED
ODD_MECH_TYPE_UNSUPPORTED
-----joern-----
(40,97,0)
(18,19,0)
(85,64,0)
(67,36,0)
(81,24,0)
(19,90,0)
(4,24,0)
(56,50,0)
(33,103,0)
(13,103,0)
(60,16,0)
(7,16,0)
(42,62,0)
(33,47,0)
(96,33,0)
(2,47,0)
(73,6,0)
(96,88,0)
(107,97,0)
(52,31,0)
(91,84,0)
(70,31,0)
(24,60,0)
(24,81,0)
(22,42,0)
(8,47,0)
(42,90,0)
(102,97,0)
(72,16,0)
(103,101,0)
(80,11,0)
(86,60,0)
(67,81,0)
(75,35,0)
(31,70,0)
(88,0,0)
(81,67,0)
(49,3,0)
(56,1,0)
(78,18,0)
(92,62,0)
(48,97,0)
(100,62,0)
(21,103,0)
(8,0,0)
(16,56,0)
(9,64,0)
(10,97,0)
(70,28,0)
(3,14,0)
(102,28,0)
(99,70,0)
(29,39,0)
(53,12,0)
(69,35,0)
(47,40,0)
(18,78,0)
(32,40,0)
(72,94,0)
(50,56,0)
(36,95,0)
(41,82,0)
(21,0,0)
(78,16,0)
(46,50,0)
(63,0,0)
(90,19,0)
(96,8,0)
(90,42,0)
(62,16,0)
(2,103,0)
(70,11,0)
(56,16,0)
(88,103,0)
(39,102,0)
(77,60,0)
(98,97,0)
(25,2,0)
(0,84,0)
(54,72,0)
(95,36,0)
(104,72,0)
(14,90,0)
(66,70,0)
(67,9,0)
(58,97,0)
(101,97,0)
(74,70,0)
(59,97,0)
(33,12,0)
(64,9,0)
(3,16,0)
(94,51,0)
(89,64,0)
(93,47,0)
(40,32,0)
(79,18,0)
(16,97,0)
(55,12,0)
(9,67,0)
(71,3,0)
(19,18,0)
(76,21,0)
(61,95,0)
(21,12,0)
(105,78,0)
(17,95,0)
(83,97,0)
(96,2,0)
(6,97,0)
(68,70,0)
(43,78,0)
(95,16,0)
(15,14,0)
(96,21,0)
(88,47,0)
(2,0,0)
(94,72,0)
(35,101,0)
(1,56,0)
(5,32,0)
(102,39,0)
(84,97,0)
(21,47,0)
(27,9,0)
(90,14,0)
(11,70,0)
(44,47,0)
(101,35,0)
(33,0,0)
(87,97,0)
(70,6,0)
(2,12,0)
(60,24,0)
(34,50,0)
(64,16,0)
(6,70,0)
(8,12,0)
(62,42,0)
(37,103,0)
(8,103,0)
(20,36,0)
(82,97,0)
(14,3,0)
(36,67,0)
(23,51,0)
(12,82,0)
(88,12,0)
(51,94,0)
(38,70,0)
(45,0,0)
(106,8,0)
(30,33,0)
(57,102,0)
(26,88,0)
(21,103,1)
(0,45,1)
(19,90,1)
(67,9,1)
(45,63,1)
(41,12,1)
(61,9,1)
(52,68,1)
(2,12,1)
(102,39,1)
(77,19,1)
(33,30,1)
(12,53,1)
(86,77,1)
(72,16,1)
(70,28,1)
(57,16,1)
(9,27,1)
(29,57,1)
(36,20,1)
(78,16,1)
(62,92,1)
(90,42,1)
(17,61,1)
(70,11,1)
(80,74,1)
(105,51,1)
(33,103,1)
(36,95,1)
(2,0,1)
(75,103,1)
(51,23,1)
(88,103,1)
(38,31,1)
(88,26,1)
(60,86,1)
(96,2,1)
(18,79,1)
(14,15,1)
(47,44,1)
(103,37,1)
(21,0,1)
(31,52,1)
(93,82,1)
(96,8,1)
(78,43,1)
(2,103,1)
(8,47,1)
(18,78,1)
(35,69,1)
(79,78,1)
(56,50,1)
(81,24,1)
(53,55,1)
(9,64,1)
(96,33,1)
(95,16,1)
(106,65,1)
(34,46,1)
(99,11,1)
(102,28,1)
(101,35,1)
(67,36,1)
(23,94,1)
(33,47,1)
(68,66,1)
(72,104,1)
(43,105,1)
(8,106,1)
(62,16,1)
(21,12,1)
(88,0,1)
(4,60,1)
(32,5,1)
(91,0,1)
(22,62,1)
(6,70,1)
(92,100,1)
(95,17,1)
(56,1,1)
(33,0,1)
(74,73,1)
(96,21,1)
(3,16,1)
(66,99,1)
(51,94,1)
(55,84,1)
(84,91,1)
(96,88,1)
(73,40,1)
(24,60,1)
(81,67,1)
(24,4,1)
(50,34,1)
(88,47,1)
(21,76,1)
(8,12,1)
(11,80,1)
(69,75,1)
(13,102,1)
(25,81,1)
(49,71,1)
(8,103,1)
(88,12,1)
(70,38,1)
(94,72,1)
(82,41,1)
(2,25,1)
(40,32,1)
(15,3,1)
(26,51,1)
(20,95,1)
(60,16,1)
(37,13,1)
(71,42,1)
(89,85,1)
(76,81,1)
(42,62,1)
(70,31,1)
(2,47,1)
(21,47,1)
(64,89,1)
(104,54,1)
(30,19,1)
(100,18,1)
(5,47,1)
(39,29,1)
(8,0,1)
(85,24,1)
(46,7,1)
(90,14,1)
(65,6,1)
(3,49,1)
(54,65,1)
(44,93,1)
(19,18,1)
(63,101,1)
(16,56,1)
(33,12,1)
(14,3,1)
(64,16,1)
(42,22,1)
(27,64,1)
(51,65,2)
(96,88,2)
(95,16,2)
(2,81,2)
(16,56,2)
(18,51,2)
(100,18,2)
(96,21,2)
(60,19,2)
(40,32,2)
(96,2,2)
(64,16,2)
(67,24,2)
(9,24,2)
(17,9,2)
(9,64,2)
(33,19,2)
(42,62,2)
(33,0,2)
(70,28,2)
(8,65,2)
(14,42,2)
(22,18,2)
(36,9,2)
(105,51,2)
(21,47,2)
(79,51,2)
(102,28,2)
(15,42,2)
(20,9,2)
(8,103,2)
(19,51,2)
(62,18,2)
(62,16,2)
(8,12,2)
(33,12,2)
(96,33,2)
(3,16,2)
(78,51,2)
(64,24,2)
(42,18,2)
(70,31,2)
(88,12,2)
(24,60,2)
(21,0,2)
(21,12,2)
(67,9,2)
(90,42,2)
(51,94,2)
(88,0,2)
(71,42,2)
(33,103,2)
(77,19,2)
(26,51,2)
(76,81,2)
(2,0,2)
(95,9,2)
(21,81,2)
(43,51,2)
(2,47,2)
(86,19,2)
(25,81,2)
(106,65,2)
(14,3,2)
(8,47,2)
(19,90,2)
(89,24,2)
(101,35,2)
(102,39,2)
(49,42,2)
(88,103,2)
(27,24,2)
(81,24,2)
(30,19,2)
(90,18,2)
(18,78,2)
(8,0,2)
(81,19,2)
(19,18,2)
(88,51,2)
(61,9,2)
(60,16,2)
(33,47,2)
(56,1,2)
(72,65,2)
(104,65,2)
(3,42,2)
(94,65,2)
(21,103,2)
(54,65,2)
(88,47,2)
(67,36,2)
(56,50,2)
(70,11,2)
(6,70,2)
(4,19,2)
(2,103,2)
(94,72,2)
(85,24,2)
(78,16,2)
(90,14,2)
(36,95,2)
(2,12,2)
(72,16,2)
(81,67,2)
(24,19,2)
(92,18,2)
(23,65,2)
(96,8,2)
-----------------------------------
(0,tf.command)
(1,void *)
(2,return ODD_MECH_TYPE_DRAWER;)
(3,desc->eject)
(4,1)
(5,buf)
(6,ret = ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,\n\\n\\t\\t\\t\\tbuf, sizeof(buf)
(7,desc)
(8,return ODD_MECH_TYPE_UNSUPPORTED;)
(9,desc->load == 0)
(10,if (desc->mech_type == 0 && desc->load == 0 && desc->eject == 1)
(11,&tf)
(12,tf.protocol)
(13,tf)
(14,desc->eject == 1)
(15,1)
(16,*desc = (void *)
(17,eject)
(18,desc->mech_type == 0)
(19,desc->mech_type == 0 && desc->load == 0 && desc->eject == 1)
(20,1)
(21,return ODD_MECH_TYPE_UNSUPPORTED;)
(22,0)
(23,3)
(24,desc->mech_type == 1)
(25,ODD_MECH_TYPE_DRAWER)
(26,ODD_MECH_TYPE_UNSUPPORTED)
(27,0)
(28,struct ata_device *dev)
(29,tf)
(30,ODD_MECH_TYPE_SLOT)
(31,sizeof(buf)
(32,sizeof(buf)
(33,return ODD_MECH_TYPE_SLOT;)
(34,8)
(35,ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE)
(36,desc->eject == 1)
(37,flags)
(38,0)
(39,&tf)
(40,tf.lbam = sizeof(buf)
(41,ATAPI_PROT_PIO)
(42,desc->load == 0)
(43,mech_type)
(44,lbam)
(45,command)
(46,buf)
(47,tf.lbam)
(48,buf)
(49,eject)
(50,buf + 8)
(51,be16_to_cpu(desc->feature_code)
(52,buf)
(53,protocol)
(54,desc)
(55,tf)
(56,(void *)
(57,dev)
(58,if (be16_to_cpu(desc->feature_code)
(59,if (ret)
(60,desc->mech_type)
(61,desc)
(62,desc->load)
(63,tf)
(64,desc->load)
(65,ret)
(66,DMA_FROM_DEVICE)
(67,desc->load == 0 && desc->eject == 1)
(68,buf)
(69,ATA_TFLAG_DEVICE)
(70,ata_exec_internal(dev, &tf, cdb, DMA_FROM_DEVICE,\n\\n\\t\\t\\t\\tbuf, sizeof(buf)
(71,desc)
(72,desc->feature_code)
(73,ret)
(74,dev)
(75,ATA_TFLAG_ISADDR)
(76,ODD_MECH_TYPE_UNSUPPORTED)
(77,desc)
(78,desc->mech_type)
(79,0)
(80,tf)
(81,desc->mech_type == 1 && desc->load == 0 && desc->eject == 1)
(82,tf.protocol = ATAPI_PROT_PIO)
(83,ret)
(84,tf.command = ATA_CMD_PACKET)
(85,desc)
(86,mech_type)
(87,)
(88,return ODD_MECH_TYPE_UNSUPPORTED;)
(89,load)
(90,desc->load == 0 && desc->eject == 1)
(91,ATA_CMD_PACKET)
(92,load)
(93,tf)
(94,be16_to_cpu(desc->feature_code)
(95,desc->eject)
(96,RET)
(97,)
(98,desc)
(99,cdb)
(100,desc)
(101,tf.flags = ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE)
(102,ata_tf_init(dev, &tf)
(103,tf.flags)
(104,feature_code)
(105,desc)
(106,ODD_MECH_TYPE_UNSUPPORTED)
(107,tf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^