-----label-----
0
-----code-----
static int sha1_ce_finup(struct shash_desc *desc, const u8 *data,
			 unsigned int len, u8 *out)
{
	struct sha1_ce_state *sctx = shash_desc_ctx(desc);
	bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len;

	/*
	 * Allow the asm code to perform the finalization if there is no
	 * partial data and the input is a round multiple of the block size.
	 */
	sctx->finalize = finalize;

	kernel_neon_begin_partial(16);
	sha1_base_do_update(desc, data, len,
			    (sha1_block_fn *)sha1_ce_transform);
	if (!finalize)
		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);
	kernel_neon_end();
	return sha1_base_finish(desc, out);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
48,50
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
58,59
58,60
59,60
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
74,76
75,76
78,79
79,80
79,81
79,82
79,83
79,84
80,81
82,83
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
96,97
96,98
97,98
98,99
100,101
101,102
101,103
101,104
102,103
104,105
106,107
106,108
107,108
107,109
108,109
110,111
112,113
114,115
115,116
116,117
118,119
119,120
119,121
119,122
120,121
122,123
124,125
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,23,25,26,31,33,34,38,40,43,45,53,54,55,60,62,64,69,70,72,76,77,81,83,85,87,91,93,95,99,103,105,109,111,113,117,121,123,125
-----computeFrom-----
47,48
47,49
48,49
48,50
58,59
58,60
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int sha1_ce_finup(struct shash_desc *desc, const u8 *data,			 unsigned int len, u8 *out){	struct sha1_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len;	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(16);	sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform);	if (!finalize)		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);	kernel_neon_end();	return sha1_base_finish(desc, out);}
static int
sha1_ce_finup(struct shash_desc *desc, const u8 *data,			 unsigned int len, u8 *out)
sha1_ce_finup
struct shash_desc *desc
struct shash_desc
shash_desc
*desc
*
desc
const u8 *data
const u8
u8
*data
*
data
unsigned int len
unsigned int
len
len
u8 *out
u8
u8
*out
*
out
{	struct sha1_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len;	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(16);	sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform);	if (!finalize)		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);	kernel_neon_end();	return sha1_base_finish(desc, out);}
struct sha1_ce_state *sctx = shash_desc_ctx(desc);
struct sha1_ce_state *sctx = shash_desc_ctx(desc);
struct sha1_ce_state
sha1_ce_state
*sctx = shash_desc_ctx(desc)
*
sctx
= shash_desc_ctx(desc)
shash_desc_ctx(desc)
shash_desc_ctx
shash_desc_ctx
desc
desc
bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len;
bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len;
bool
finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len
finalize
= !sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len
!sctx->sst.count && !(len % SHA1_BLOCK_SIZE) && len
!sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
!sctx->sst.count
sctx->sst.count
sctx->sst
sctx
sctx
sst
count
!(len % SHA1_BLOCK_SIZE)
(len % SHA1_BLOCK_SIZE)
len % SHA1_BLOCK_SIZE
len
len
SHA1_BLOCK_SIZE
SHA1_BLOCK_SIZE
len
len
sctx->finalize = finalize;
sctx->finalize = finalize
sctx->finalize
sctx
sctx
finalize
finalize
finalize
kernel_neon_begin_partial(16);
kernel_neon_begin_partial(16)
kernel_neon_begin_partial
kernel_neon_begin_partial
16
sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform);
sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform)
sha1_base_do_update
sha1_base_do_update
desc
desc
data
data
len
len
(sha1_block_fn *)sha1_ce_transform
sha1_block_fn *
sha1_block_fn
sha1_block_fn
*
*
sha1_ce_transform
sha1_ce_transform
if (!finalize)		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);
!finalize
finalize
finalize
sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);
sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform)
sha1_base_do_finalize
sha1_base_do_finalize
desc
desc
(sha1_block_fn *)sha1_ce_transform
sha1_block_fn *
sha1_block_fn
sha1_block_fn
*
*
sha1_ce_transform
sha1_ce_transform
kernel_neon_end();
kernel_neon_end()
kernel_neon_end
kernel_neon_end
return sha1_base_finish(desc, out);
sha1_base_finish(desc, out)
sha1_base_finish
sha1_base_finish
desc
desc
out
out
-----joern-----
(34,1,0)
(47,15,0)
(25,41,0)
(38,15,0)
(27,38,0)
(30,50,0)
(20,22,0)
(10,43,0)
(42,37,0)
(11,47,0)
(6,31,0)
(31,15,0)
(48,18,0)
(41,25,0)
(12,16,0)
(19,16,0)
(42,15,0)
(33,1,0)
(42,16,0)
(0,30,0)
(45,22,0)
(21,10,0)
(29,15,0)
(44,27,0)
(1,0,0)
(20,48,0)
(48,20,0)
(32,27,0)
(8,22,0)
(31,6,0)
(24,50,0)
(33,6,0)
(30,15,0)
(51,42,0)
(27,40,0)
(23,36,0)
(35,30,0)
(52,10,0)
(10,30,0)
(6,48,0)
(7,42,0)
(36,31,0)
(26,48,0)
(46,40,0)
(2,15,0)
(38,10,0)
(3,15,0)
(9,42,0)
(48,6,0)
(16,42,0)
(22,20,0)
(42,40,0)
(25,46,0)
(50,30,0)
(53,0,0)
(17,38,0)
(14,43,0)
(39,25,0)
(0,1,0)
(5,31,0)
(1,33,0)
(27,49,0)
(13,0,0)
(43,15,0)
(50,40,0)
(28,15,0)
(46,25,0)
(22,18,0)
(4,46,0)
(6,33,0)
(43,31,0)
(42,18,0)
(16,12,0)
(50,40,1)
(22,45,1)
(4,36,1)
(47,11,1)
(6,48,1)
(0,30,1)
(42,37,1)
(42,16,1)
(36,31,1)
(36,23,1)
(38,27,1)
(46,40,1)
(28,36,1)
(34,0,1)
(9,7,1)
(51,9,1)
(6,33,1)
(21,31,1)
(25,39,1)
(52,21,1)
(0,13,1)
(16,12,1)
(25,41,1)
(45,8,1)
(11,43,1)
(10,52,1)
(42,18,1)
(8,33,1)
(1,0,1)
(33,1,1)
(23,42,1)
(30,50,1)
(48,20,1)
(24,35,1)
(50,24,1)
(48,18,1)
(31,6,1)
(28,46,1)
(27,49,1)
(44,28,1)
(32,44,1)
(14,10,1)
(1,34,1)
(27,32,1)
(13,53,1)
(48,26,1)
(10,30,1)
(43,31,1)
(38,10,1)
(16,19,1)
(43,14,1)
(22,18,1)
(19,51,1)
(46,25,1)
(53,5,1)
(17,38,1)
(7,47,1)
(27,40,1)
(5,30,1)
(20,22,1)
(39,4,1)
(42,40,1)
(26,20,1)
(26,20,2)
(22,18,2)
(45,33,2)
(1,0,2)
(8,33,2)
(27,40,2)
(38,10,2)
(48,18,2)
(6,48,2)
(20,22,2)
(4,36,2)
(20,33,2)
(48,33,2)
(46,36,2)
(22,33,2)
(17,38,2)
(42,37,2)
(42,18,2)
(25,41,2)
(25,36,2)
(6,33,2)
(39,36,2)
(16,12,2)
(36,31,2)
(46,40,2)
(42,40,2)
(43,31,2)
(0,30,2)
(48,20,2)
(42,16,2)
(31,6,2)
(33,1,2)
(46,25,2)
(27,49,2)
(50,40,2)
(30,50,2)
(10,30,2)
-----------------------------------
(0,sctx->sst)
(1,sctx->sst.count)
(2,if (!finalize)
(3,sctx)
(4,desc)
(5,finalize)
(6,!sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
(7,desc)
(8,len)
(9,data)
(10,sctx->finalize)
(11,16)
(12,sha1_block_fn *)
(13,sst)
(14,finalize)
(15,)
(16,(sha1_block_fn *)
(17,RET)
(18,unsigned int len)
(19,sha1_ce_transform)
(20,!(len % SHA1_BLOCK_SIZE)
(21,sctx)
(22,len % SHA1_BLOCK_SIZE)
(23,finalize)
(24,desc)
(25,(sha1_block_fn *)
(26,len)
(27,sha1_base_finish(desc, out)
(28,kernel_neon_end()
(29,finalize)
(30,*sctx = shash_desc_ctx(desc)
(31,finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
(32,out)
(33,!sctx->sst.count)
(34,count)
(35,sctx)
(36,!finalize)
(37,const u8 *data)
(38,return sha1_base_finish(desc, out)
(39,sha1_ce_transform)
(40,struct shash_desc *desc)
(41,sha1_block_fn *)
(42,sha1_base_do_update(desc, data, len,\n\\n\\t\\t\\t    (sha1_block_fn *)
(43,sctx->finalize = finalize)
(44,desc)
(45,SHA1_BLOCK_SIZE)
(46,sha1_base_do_finalize(desc, (sha1_block_fn *)
(47,kernel_neon_begin_partial(16)
(48,!(len % SHA1_BLOCK_SIZE)
(49,u8 *out)
(50,shash_desc_ctx(desc)
(51,len)
(52,finalize)
(53,sctx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^