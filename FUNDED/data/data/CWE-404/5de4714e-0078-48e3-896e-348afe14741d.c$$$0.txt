-----label-----
1
-----code-----
static void dump_instr(const char *lvl, struct pt_regs *regs)
{
	unsigned long addr = instruction_pointer(regs);
	const int thumb = thumb_mode(regs);
	const int width = thumb ? 4 : 8;
	mm_segment_t fs;
	char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;
	int i;

	/*
	 * We need to switch to kernel mode so that we can use __get_user
	 * to safely read from kernel space.  Note that we now dump the
	 * code first, just in case the backtrace kills us.
	 */
	fs = get_fs();
	set_fs(KERNEL_DS);

	for (i = -4; i < 1 + !!thumb; i++) {
		unsigned int val, bad;

		if (thumb)
			bad = __get_user(val, &((u16 *)addr)[i]);
		else
			bad = __get_user(val, &((u32 *)addr)[i]);

		if (!bad)
			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",
					width, val);
		else {
			p += sprintf(p, "bad PC value");
			break;
		}
	}
	printk("%sCode: %s\n", lvl, str);

	set_fs(fs);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
16,26
16,27
17,18
18,19
18,20
20,21
20,22
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
31,32
31,33
33,34
34,35
34,36
35,36
37,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
45,48
46,47
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
59,60
59,61
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
66,67
71,72
71,73
71,74
74,75
75,76
77,78
78,79
78,80
80,81
82,83
83,84
83,85
84,85
86,87
87,88
89,90
90,91
90,92
91,92
93,94
94,95
96,97
96,98
96,99
96,100
97,98
98,99
98,100
99,100
101,102
103,104
103,105
104,105
106,107
106,108
108,109
109,110
110,111
112,113
113,114
115,116
115,117
115,118
116,117
117,118
117,119
117,120
119,120
121,122
123,124
123,125
123,126
124,125
126,127
127,128
127,129
128,129
130,131
130,132
130,133
131,132
133,134
135,136
136,137
136,138
137,138
138,139
138,140
139,140
139,141
140,141
142,143
144,145
146,147
148,149
149,150
149,151
150,151
152,153
152,154
152,155
153,154
155,156
157,158
158,159
158,160
159,160
160,161
160,162
161,162
161,163
162,163
164,165
166,167
168,169
170,171
170,172
170,173
171,172
172,173
174,175
175,176
175,177
176,177
178,179
178,180
178,181
178,182
178,183
179,180
181,182
183,184
183,185
183,186
184,185
184,186
185,186
190,191
192,193
194,195
194,196
195,196
196,197
196,198
197,198
199,200
199,201
199,202
200,201
202,203
206,207
207,208
207,209
207,210
207,211
208,209
211,212
213,214
215,216
216,217
216,218
217,218
219,220
-----nextToken-----
2,4,6,8,9,12,14,15,19,21,25,27,30,32,36,38,41,43,47,48,49,53,55,58,60,67,68,69,70,72,73,76,79,81,85,88,92,95,100,102,105,107,111,114,118,120,122,125,129,132,134,141,143,145,147,151,154,156,163,165,167,169,173,177,180,182,186,187,188,189,191,193,198,201,203,204,205,209,210,212,214,218,220
-----computeFrom-----
62,63
62,64
63,64
63,65
64,65
64,66
83,84
83,85
98,99
98,100
103,104
103,105
106,107
106,108
127,128
127,129
149,150
149,151
175,176
175,177
184,185
184,186
196,197
196,198
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void dump_instr(const char *lvl, struct pt_regs *regs){	unsigned long addr = instruction_pointer(regs);	const int thumb = thumb_mode(regs);	const int width = thumb ? 4 : 8;	mm_segment_t fs;	char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;	int i;	/*	 * We need to switch to kernel mode so that we can use __get_user	 * to safely read from kernel space.  Note that we now dump the	 * code first, just in case the backtrace kills us.	 */	fs = get_fs();	set_fs(KERNEL_DS);	for (i = -4; i < 1 + !!thumb; i++) {		unsigned int val, bad;		if (thumb)			bad = __get_user(val, &((u16 *)addr)[i]);		else			bad = __get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}	printk("%sCode: %s\n", lvl, str);	set_fs(fs);}
static void
dump_instr(const char *lvl, struct pt_regs *regs)
dump_instr
const char *lvl
const char
*lvl
*
lvl
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
{	unsigned long addr = instruction_pointer(regs);	const int thumb = thumb_mode(regs);	const int width = thumb ? 4 : 8;	mm_segment_t fs;	char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;	int i;	/*	 * We need to switch to kernel mode so that we can use __get_user	 * to safely read from kernel space.  Note that we now dump the	 * code first, just in case the backtrace kills us.	 */	fs = get_fs();	set_fs(KERNEL_DS);	for (i = -4; i < 1 + !!thumb; i++) {		unsigned int val, bad;		if (thumb)			bad = __get_user(val, &((u16 *)addr)[i]);		else			bad = __get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}	printk("%sCode: %s\n", lvl, str);	set_fs(fs);}
unsigned long addr = instruction_pointer(regs);
unsigned long addr = instruction_pointer(regs);
unsigned long
addr = instruction_pointer(regs)
addr
= instruction_pointer(regs)
instruction_pointer(regs)
instruction_pointer
instruction_pointer
regs
regs
const int thumb = thumb_mode(regs);
const int thumb = thumb_mode(regs);
const int
thumb = thumb_mode(regs)
thumb
= thumb_mode(regs)
thumb_mode(regs)
thumb_mode
thumb_mode
regs
regs
const int width = thumb ? 4 : 8;
const int width = thumb ? 4 : 8;
const int
width = thumb ? 4 : 8
width
= thumb ? 4 : 8
thumb ? 4 : 8
thumb
thumb
4
8
mm_segment_t fs;
mm_segment_t fs;
mm_segment_t
mm_segment_t
fs
fs
char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;
char str[sizeof("00000000 ") * 5 + 2 + 1], *p = str;
char
str[sizeof("00000000 ") * 5 + 2 + 1]
str
[sizeof("00000000 ") * 5 + 2 + 1]
sizeof("00000000 ") * 5 + 2 + 1
sizeof("00000000 ") * 5 + 2
sizeof("00000000 ") * 5
sizeof("00000000 ")
("00000000 ")
"00000000 "
5
2
1
*p = str
*
p
= str
str
str
int i;
int i;
int
i
i
fs = get_fs();
fs = get_fs()
fs
fs
get_fs()
get_fs
get_fs
set_fs(KERNEL_DS);
set_fs(KERNEL_DS);
set_fs
set_fs
(KERNEL_DS)
KERNEL_DS
KERNEL_DS
for (i = -4; i < 1 + !!thumb; i++) {		unsigned int val, bad;		if (thumb)			bad = __get_user(val, &((u16 *)addr)[i]);		else			bad = __get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}
i = -4;
i = -4
i
i
-4
4
i < 1 + !!thumb
i
i
1 + !!thumb
1
!!thumb
!thumb
thumb
thumb
i++
i
i
{		unsigned int val, bad;		if (thumb)			bad = __get_user(val, &((u16 *)addr)[i]);		else			bad = __get_user(val, &((u32 *)addr)[i]);		if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}	}
unsigned int val, bad;
unsigned int val, bad;
unsigned int
val
val
bad
bad
if (thumb)			bad = __get_user(val, &((u16 *)addr)[i]);		else			bad = __get_user(val, &((u32 *)addr)[i]);
thumb
thumb
bad = __get_user(val, &((u16 *)addr)[i]);
bad = __get_user(val, &((u16 *)addr)[i])
bad
bad
__get_user(val, &((u16 *)addr)[i])
__get_user
__get_user
val
val
&((u16 *)addr)[i]
((u16 *)addr)[i]
((u16 *)addr)
(u16 *)addr
u16 *
u16
u16
*
*
addr
addr
i
i
bad = __get_user(val, &((u32 *)addr)[i]);
bad = __get_user(val, &((u32 *)addr)[i])
bad
bad
__get_user(val, &((u32 *)addr)[i])
__get_user
__get_user
val
val
&((u32 *)addr)[i]
((u32 *)addr)[i]
((u32 *)addr)
(u32 *)addr
u32 *
u32
u32
*
*
addr
addr
i
i
if (!bad)			p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);		else {			p += sprintf(p, "bad PC value");			break;		}
!bad
bad
bad
p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val);
p += sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val)
p
p
sprintf(p, i == 0 ? "(%0*x) " : "%0*x ",					width, val)
sprintf
sprintf
p
p
i == 0 ? "(%0*x) " : "%0*x "
i == 0
i
i
0
"(%0*x) "
"%0*x "
width
width
val
val
{			p += sprintf(p, "bad PC value");			break;		}
p += sprintf(p, "bad PC value");
p += sprintf(p, "bad PC value")
p
p
sprintf(p, "bad PC value")
sprintf
sprintf
p
p
"bad PC value"
break;
printk("%sCode: %s\n", lvl, str);
printk("%sCode: %s\n", lvl, str)
printk
printk
"%sCode: %s\n"
lvl
lvl
str
str
set_fs(fs);
set_fs(fs)
set_fs
set_fs
fs
fs
-----joern-----
(1,92,0)
(52,79,0)
(33,25,0)
(91,42,0)
(17,7,0)
(45,75,0)
(40,10,0)
(43,79,0)
(56,16,0)
(88,25,0)
(52,73,0)
(72,79,0)
(59,85,0)
(36,26,0)
(42,22,0)
(63,75,0)
(3,2,0)
(73,79,0)
(1,86,0)
(60,85,0)
(55,43,0)
(4,41,0)
(76,79,0)
(87,89,0)
(47,2,0)
(29,6,0)
(87,16,0)
(80,38,0)
(14,12,0)
(41,4,0)
(35,21,0)
(85,97,0)
(2,16,0)
(60,26,0)
(12,51,0)
(72,49,0)
(46,41,0)
(18,4,0)
(54,79,0)
(84,72,0)
(28,97,0)
(25,41,0)
(92,45,0)
(2,3,0)
(22,42,0)
(92,1,0)
(0,79,0)
(1,72,0)
(85,60,0)
(22,14,0)
(8,79,0)
(97,85,0)
(19,22,0)
(73,37,0)
(58,79,0)
(82,6,0)
(41,25,0)
(97,6,0)
(16,2,0)
(71,12,0)
(75,63,0)
(7,43,0)
(41,42,0)
(26,60,0)
(16,6,0)
(39,76,0)
(83,21,0)
(4,43,0)
(32,79,0)
(12,14,0)
(10,7,0)
(10,43,0)
(66,95,0)
(10,4,0)
(6,90,0)
(50,75,0)
(16,87,0)
(13,92,0)
(11,41,0)
(78,79,0)
(15,88,0)
(98,1,0)
(9,41,0)
(26,14,0)
(69,14,0)
(30,22,0)
(81,76,0)
(57,95,0)
(64,49,0)
(49,72,0)
(96,29,0)
(99,79,0)
(35,63,0)
(10,38,0)
(2,72,0)
(34,73,0)
(5,95,0)
(23,32,0)
(31,22,0)
(42,79,0)
(24,43,0)
(74,76,0)
(89,87,0)
(75,45,0)
(49,51,0)
(7,10,0)
(41,43,0)
(68,79,0)
(21,89,0)
(65,95,0)
(86,1,0)
(92,6,0)
(44,89,0)
(7,4,0)
(77,35,0)
(89,21,0)
(48,52,0)
(20,63,0)
(45,92,0)
(70,88,0)
(93,79,0)
(88,6,0)
(53,25,0)
(61,7,0)
(14,79,0)
(4,4,0)
(76,62,0)
(90,6,0)
(27,90,0)
(25,88,0)
(37,73,0)
(12,51,1)
(28,29,1)
(35,21,1)
(94,52,1)
(88,70,1)
(75,45,1)
(4,41,1)
(41,42,1)
(9,18,1)
(41,25,1)
(26,14,1)
(47,44,1)
(44,83,1)
(92,13,1)
(77,63,1)
(41,4,1)
(45,92,1)
(64,84,1)
(1,72,1)
(49,51,1)
(25,53,1)
(43,24,1)
(56,2,1)
(60,26,1)
(7,61,1)
(18,35,1)
(10,43,1)
(6,90,1)
(87,16,1)
(7,4,1)
(34,43,1)
(90,27,1)
(88,6,1)
(10,4,1)
(32,23,1)
(71,69,1)
(16,2,1)
(4,43,1)
(97,85,1)
(22,19,1)
(35,63,1)
(81,80,1)
(98,50,1)
(89,87,1)
(1,98,1)
(48,76,1)
(85,60,1)
(29,6,1)
(70,15,1)
(49,64,1)
(29,96,1)
(15,9,1)
(59,28,1)
(69,72,1)
(92,1,1)
(53,88,1)
(80,10,1)
(19,31,1)
(10,7,1)
(96,4,1)
(26,36,1)
(13,1,1)
(74,39,1)
(35,77,1)
(72,49,1)
(52,48,1)
(24,55,1)
(16,56,1)
(36,59,1)
(46,25,1)
(7,43,1)
(63,75,1)
(97,6,1)
(76,74,1)
(31,91,1)
(2,47,1)
(81,97,1)
(2,72,1)
(77,21,1)
(1,86,1)
(20,67,1)
(28,6,1)
(91,14,1)
(82,32,1)
(41,11,1)
(39,81,1)
(67,97,1)
(14,12,1)
(83,67,1)
(17,40,1)
(50,20,1)
(37,34,1)
(55,42,1)
(76,62,1)
(33,88,1)
(21,89,1)
(30,31,1)
(4,4,1)
(16,6,1)
(23,73,1)
(61,17,1)
(25,33,1)
(41,43,1)
(11,46,1)
(2,3,1)
(12,71,1)
(22,30,1)
(25,88,1)
(40,35,1)
(52,73,1)
(22,14,1)
(92,6,1)
(42,22,1)
(73,37,1)
(27,82,1)
(88,35,2)
(2,67,2)
(7,43,2)
(19,31,2)
(87,16,2)
(33,88,2)
(28,35,2)
(75,45,2)
(10,43,2)
(12,51,2)
(67,97,2)
(22,14,2)
(97,35,2)
(16,2,2)
(4,35,2)
(73,37,2)
(20,67,2)
(26,14,2)
(89,67,2)
(88,6,2)
(16,67,2)
(1,67,2)
(10,4,2)
(47,67,2)
(92,1,2)
(35,21,2)
(41,4,2)
(14,12,2)
(72,49,2)
(26,35,2)
(41,25,2)
(46,35,2)
(60,26,2)
(4,4,2)
(10,35,2)
(36,35,2)
(1,86,2)
(35,63,2)
(35,97,2)
(96,35,2)
(13,67,2)
(21,67,2)
(85,60,2)
(92,6,2)
(18,35,2)
(2,72,2)
(41,43,2)
(70,35,2)
(4,43,2)
(50,67,2)
(63,67,2)
(60,35,2)
(45,67,2)
(1,72,2)
(59,35,2)
(52,73,2)
(15,35,2)
(87,67,2)
(21,89,2)
(25,88,2)
(29,6,2)
(11,35,2)
(77,97,2)
(40,35,2)
(6,90,2)
(41,42,2)
(41,35,2)
(44,67,2)
(30,31,2)
(49,51,2)
(92,67,2)
(17,35,2)
(63,75,2)
(16,6,2)
(61,35,2)
(25,35,2)
(83,67,2)
(7,35,2)
(45,92,2)
(2,3,2)
(80,35,2)
(98,67,2)
(42,22,2)
(75,67,2)
(4,41,2)
(9,35,2)
(76,62,2)
(85,35,2)
(89,87,2)
(7,4,2)
(53,88,2)
(97,6,2)
(97,85,2)
(10,7,2)
(56,67,2)
(29,35,2)
-----------------------------------
(0,for (i = -4; i < 1 + !!thumb; i++)
(1,(u32 *)
(2,(u16 *)
(3,u16 *)
(4,p += sprintf(p, i == 0 ? "(%0*x)
(5,bad)
(6,i = -4)
(7,sprintf(p, "bad PC value")
(8,addr)
(9,p)
(10,p += sprintf(p, "bad PC value")
(11,val)
(12,thumb_mode(regs)
(13,i)
(14,thumb = thumb_mode(regs)
(15,i)
(16,((u16 *)
(17,p)
(18,p)
(19,4)
(20,bad)
(21,bad = __get_user(val, &((u16 *)
(22,thumb ? 4 : 8)
(23,KERNEL_DS)
(24,str)
(25,i == 0 ? "(%0*x)
(26,!thumb)
(27,4)
(28,i)
(29,i++)
(30,8)
(31,thumb)
(32,set_fs(KERNEL_DS)
(33,"(%0*x)
(34,fs)
(35,!bad)
(36,thumb)
(37,get_fs()
(38,)
(39,lvl)
(40,p)
(41,sprintf(p, i == 0 ? "(%0*x)
(42,width = thumb ? 4 : 8)
(43,*p = str)
(44,val)
(45,&((u32 *)
(46,width)
(47,addr)
(48,fs)
(49,instruction_pointer(regs)
(50,val)
(51,struct pt_regs *regs)
(52,set_fs(fs)
(53,"%0*x ")
(54,i)
(55,p)
(56,i)
(57,if (!bad)
(58,str)
(59,1)
(60,!!thumb)
(61,"bad PC value")
(62,const char *lvl)
(63,bad = __get_user(val, &((u32 *)
(64,regs)
(65,val)
(66,if (thumb)
(67,thumb)
(68,fs)
(69,thumb)
(70,0)
(71,regs)
(72,addr = instruction_pointer(regs)
(73,fs = get_fs()
(74,str)
(75,__get_user(val, &((u32 *)
(76,printk("%sCode: %s\\n", lvl, str)
(77,bad)
(78,p)
(79,)
(80,break;)
(81,"%sCode: %s\\n")
(82,i)
(83,bad)
(84,addr)
(85,1 + !!thumb)
(86,u32 *)
(87,&((u16 *)
(88,i == 0)
(89,__get_user(val, &((u16 *)
(90,-4)
(91,width)
(92,((u32 *)
(93,thumb)
(94,RET)
(95,)
(96,i)
(97,i < 1 + !!thumb)
(98,addr)
(99,width)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^