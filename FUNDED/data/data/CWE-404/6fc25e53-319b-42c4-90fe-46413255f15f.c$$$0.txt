-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_01_bad()
{
    char * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
55,56
56,57
56,58
57,58
59,60
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,38,40,45,47,51,53,54,58,60,61
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_01_bad(){    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__char_calloc_01_bad()
CWE401_Memory_Leak__char_calloc_01_bad
{    char * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
;
-----joern-----
(3,1,0)
(20,1,0)
(12,8,0)
(22,10,0)
(18,6,0)
(8,12,0)
(19,1,0)
(15,16,0)
(13,12,0)
(17,11,0)
(3,12,0)
(24,8,0)
(17,23,0)
(26,20,0)
(11,17,0)
(27,20,0)
(1,16,0)
(9,11,0)
(12,3,0)
(0,3,0)
(1,3,0)
(25,16,0)
(5,6,0)
(6,16,0)
(14,19,0)
(20,16,0)
(21,19,0)
(10,1,0)
(10,16,0)
(2,1,0)
(3,0,0)
(19,14,1)
(10,22,1)
(14,21,1)
(11,9,1)
(24,13,1)
(12,8,1)
(17,11,1)
(3,12,1)
(8,24,1)
(7,10,1)
(21,1,1)
(20,1,1)
(3,0,1)
(6,5,1)
(13,2,1)
(5,18,1)
(27,26,1)
(20,27,1)
(1,3,1)
(22,20,1)
(26,17,1)
(2,6,1)
(9,19,1)
(10,1,1)
(19,1,1)
(26,19,1)
(10,1,2)
(17,19,2)
(17,11,2)
(3,0,2)
(3,12,2)
(9,19,2)
(20,1,2)
(11,19,2)
(19,1,2)
(1,3,2)
(12,8,2)
-----------------------------------
(0,char *)
(1,data = (char *)
(2,data)
(3,(char *)
(4, sizeof(char)
(5,NULL)
(6,data = NULL)
(7,RET)
(8,sizeof(char)
(9,1)
(10,printLine(data)
(11,-1)
(12,calloc(100, sizeof(char)
(13,100)
(14,NULL)
(15,data)
(16,)
(17,exit(-1)
(18,data)
(19,data == NULL)
(20,strcpy(data, "A String")
(21,data)
(22,data)
(23,)
(24,char)
(25,if (data == NULL)
(26,data)
(27,"A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^