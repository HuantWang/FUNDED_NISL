-----label-----
0
-----code-----
struct unwind_table *unwind_table_add(unsigned long start, unsigned long size,
				      unsigned long text_addr,
				      unsigned long text_size)
{
	unsigned long flags;
	struct unwind_table *tab = kmalloc(sizeof(*tab), GFP_KERNEL);

	pr_debug("%s(%08lx, %08lx, %08lx, %08lx)\n", __func__, start, size,
		 text_addr, text_size);

	if (!tab)
		return tab;

	tab->start = (const struct unwind_idx *)start;
	tab->stop = (const struct unwind_idx *)(start + size);
	tab->origin = unwind_find_origin(tab->start, tab->stop);
	tab->begin_addr = text_addr;
	tab->end_addr = text_addr + text_size;

	raw_spin_lock_irqsave(&unwind_lock, flags);
	list_add_tail(&tab->list, &unwind_tables);
	raw_spin_unlock_irqrestore(&unwind_lock, flags);

	return tab;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
7,8
7,9
9,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
37,39
37,40
38,39
40,41
41,42
42,43
43,44
45,46
47,48
48,49
48,50
48,51
48,52
48,53
48,54
48,55
49,50
52,53
54,55
56,57
58,59
60,61
62,63
62,64
63,64
64,65
66,67
67,68
69,70
70,71
70,72
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
107,109
107,110
108,109
110,111
110,112
111,112
114,115
114,116
115,116
118,119
119,120
119,121
120,121
120,122
121,122
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
135,136
137,138
138,139
138,140
138,141
139,140
141,142
142,143
144,145
146,147
147,148
147,149
147,150
148,149
150,151
151,152
151,153
152,153
155,156
156,157
158,159
159,160
159,161
159,162
160,161
162,163
163,164
165,166
167,168
168,169
-----nextToken-----
3,5,6,8,10,12,14,16,18,20,22,26,28,32,34,35,39,44,46,50,51,53,55,57,59,61,65,68,73,74,78,80,82,87,88,92,94,98,100,105,106,109,112,113,116,117,122,123,125,130,131,134,136,140,143,145,149,153,154,157,161,164,166,169
-----computeFrom-----
70,71
70,72
84,85
84,86
96,97
96,98
102,103
102,104
119,120
119,121
127,128
127,129
132,133
132,134
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
struct unwind_table *unwind_table_add(unsigned long start, unsigned long size,				      unsigned long text_addr,				      unsigned long text_size){	unsigned long flags;	struct unwind_table *tab = kmalloc(sizeof(*tab), GFP_KERNEL);	pr_debug("%s(%08lx, %08lx, %08lx, %08lx)\n", __func__, start, size,		 text_addr, text_size);	if (!tab)		return tab;	tab->start = (const struct unwind_idx *)start;	tab->stop = (const struct unwind_idx *)(start + size);	tab->origin = unwind_find_origin(tab->start, tab->stop);	tab->begin_addr = text_addr;	tab->end_addr = text_addr + text_size;	raw_spin_lock_irqsave(&unwind_lock, flags);	list_add_tail(&tab->list, &unwind_tables);	raw_spin_unlock_irqrestore(&unwind_lock, flags);	return tab;}
struct unwind_table
unwind_table
*unwind_table_add(unsigned long start, unsigned long size,				      unsigned long text_addr,				      unsigned long text_size)
*
unwind_table_add
unsigned long start
unsigned long
start
start
unsigned long size
unsigned long
size
size
unsigned long text_addr
unsigned long
text_addr
text_addr
unsigned long text_size
unsigned long
text_size
text_size
{	unsigned long flags;	struct unwind_table *tab = kmalloc(sizeof(*tab), GFP_KERNEL);	pr_debug("%s(%08lx, %08lx, %08lx, %08lx)\n", __func__, start, size,		 text_addr, text_size);	if (!tab)		return tab;	tab->start = (const struct unwind_idx *)start;	tab->stop = (const struct unwind_idx *)(start + size);	tab->origin = unwind_find_origin(tab->start, tab->stop);	tab->begin_addr = text_addr;	tab->end_addr = text_addr + text_size;	raw_spin_lock_irqsave(&unwind_lock, flags);	list_add_tail(&tab->list, &unwind_tables);	raw_spin_unlock_irqrestore(&unwind_lock, flags);	return tab;}
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
struct unwind_table *tab = kmalloc(sizeof(*tab), GFP_KERNEL);
struct unwind_table *tab = kmalloc(sizeof(*tab), GFP_KERNEL);
struct unwind_table
unwind_table
*tab = kmalloc(sizeof(*tab), GFP_KERNEL)
*
tab
= kmalloc(sizeof(*tab), GFP_KERNEL)
kmalloc(sizeof(*tab), GFP_KERNEL)
kmalloc
kmalloc
sizeof(*tab)
(*tab)
*tab
tab
tab
GFP_KERNEL
GFP_KERNEL
pr_debug("%s(%08lx, %08lx, %08lx, %08lx)\n", __func__, start, size,		 text_addr, text_size);
pr_debug("%s(%08lx, %08lx, %08lx, %08lx)\n", __func__, start, size,		 text_addr, text_size)
pr_debug
pr_debug
"%s(%08lx, %08lx, %08lx, %08lx)\n"
__func__
__func__
start
start
size
size
text_addr
text_addr
text_size
text_size
if (!tab)		return tab;
!tab
tab
tab
return tab;
tab
tab
tab->start = (const struct unwind_idx *)start;
tab->start = (const struct unwind_idx *)start
tab->start
tab
tab
start
(const struct unwind_idx *)start
const struct unwind_idx *
const struct unwind_idx
unwind_idx
*
*
start
start
tab->stop = (const struct unwind_idx *)(start + size);
tab->stop = (const struct unwind_idx *)(start + size)
tab->stop
tab
tab
stop
(const struct unwind_idx *)(start + size)
const struct unwind_idx *
const struct unwind_idx
unwind_idx
*
*
(start + size)
start + size
start
start
size
size
tab->origin = unwind_find_origin(tab->start, tab->stop);
tab->origin = unwind_find_origin(tab->start, tab->stop)
tab->origin
tab
tab
origin
unwind_find_origin(tab->start, tab->stop)
unwind_find_origin
unwind_find_origin
tab->start
tab
tab
start
tab->stop
tab
tab
stop
tab->begin_addr = text_addr;
tab->begin_addr = text_addr
tab->begin_addr
tab
tab
begin_addr
text_addr
text_addr
tab->end_addr = text_addr + text_size;
tab->end_addr = text_addr + text_size
tab->end_addr
tab
tab
end_addr
text_addr + text_size
text_addr
text_addr
text_size
text_size
raw_spin_lock_irqsave(&unwind_lock, flags);
raw_spin_lock_irqsave(&unwind_lock, flags)
raw_spin_lock_irqsave
raw_spin_lock_irqsave
&unwind_lock
unwind_lock
unwind_lock
flags
flags
list_add_tail(&tab->list, &unwind_tables);
list_add_tail(&tab->list, &unwind_tables)
list_add_tail
list_add_tail
&tab->list
tab->list
tab
tab
list
&unwind_tables
unwind_tables
unwind_tables
raw_spin_unlock_irqrestore(&unwind_lock, flags);
raw_spin_unlock_irqrestore(&unwind_lock, flags)
raw_spin_unlock_irqrestore
raw_spin_unlock_irqrestore
&unwind_lock
unwind_lock
unwind_lock
flags
flags
return tab;
tab
tab
-----joern-----
(76,32,0)
(71,22,0)
(75,30,0)
(55,19,0)
(38,80,0)
(30,44,0)
(25,34,0)
(27,64,0)
(22,66,0)
(48,76,0)
(13,25,0)
(1,40,0)
(53,80,0)
(18,82,0)
(81,3,0)
(33,68,0)
(28,51,0)
(10,3,0)
(3,82,0)
(24,64,0)
(64,26,0)
(59,18,0)
(47,3,0)
(64,78,0)
(75,54,0)
(40,1,0)
(1,32,0)
(76,22,0)
(51,31,0)
(25,13,0)
(36,67,0)
(67,49,0)
(62,4,0)
(58,76,0)
(80,76,0)
(52,76,0)
(14,18,0)
(46,64,0)
(9,70,0)
(25,32,0)
(77,66,0)
(30,75,0)
(65,9,0)
(49,1,0)
(40,44,0)
(21,64,0)
(20,15,0)
(19,76,0)
(75,70,0)
(9,76,0)
(22,76,0)
(52,36,0)
(64,82,0)
(66,77,0)
(60,64,0)
(23,30,0)
(4,32,0)
(16,40,0)
(18,32,0)
(17,61,0)
(80,34,0)
(42,76,0)
(68,61,0)
(43,15,0)
(79,49,0)
(4,76,0)
(66,22,0)
(50,4,0)
(31,32,0)
(67,9,0)
(7,32,0)
(56,58,0)
(34,80,0)
(70,32,0)
(12,32,0)
(64,32,0)
(58,1,0)
(54,75,0)
(15,81,0)
(30,78,0)
(11,77,0)
(3,81,0)
(41,64,0)
(5,31,0)
(35,39,0)
(68,32,0)
(67,36,0)
(69,40,0)
(73,58,0)
(9,67,0)
(29,30,0)
(64,44,0)
(37,9,0)
(45,13,0)
(6,14,0)
(31,51,0)
(39,76,0)
(3,26,0)
(61,68,0)
(19,70,0)
(2,19,0)
(0,14,0)
(36,32,0)
(14,76,0)
(70,75,0)
(34,25,0)
(63,52,0)
(8,48,0)
(49,76,0)
(49,67,0)
(57,32,0)
(72,49,0)
(74,52,0)
(50,48,0)
(81,32,0)
(15,76,0)
(40,69,0)
(79,52,1)
(8,39,1)
(19,76,1)
(50,4,1)
(64,60,1)
(22,66,1)
(49,76,1)
(9,65,1)
(13,45,1)
(4,62,1)
(49,72,1)
(30,44,1)
(3,26,1)
(67,49,1)
(19,55,1)
(46,76,1)
(30,78,1)
(6,36,1)
(64,44,1)
(31,51,1)
(64,82,1)
(66,77,1)
(81,3,1)
(70,75,1)
(14,0,1)
(31,5,1)
(23,19,1)
(36,67,1)
(15,20,1)
(41,27,1)
(3,82,1)
(75,54,1)
(50,48,1)
(14,76,1)
(72,79,1)
(18,59,1)
(43,18,1)
(22,71,1)
(52,76,1)
(25,34,1)
(45,34,1)
(25,13,1)
(24,21,1)
(77,11,1)
(28,81,1)
(16,58,1)
(3,10,1)
(65,37,1)
(48,76,1)
(56,39,1)
(15,76,1)
(80,76,1)
(67,9,1)
(21,46,1)
(18,82,1)
(62,68,1)
(27,24,1)
(30,29,1)
(63,74,1)
(38,53,1)
(60,41,1)
(51,28,1)
(75,30,1)
(49,1,1)
(71,66,1)
(52,63,1)
(73,56,1)
(29,23,1)
(39,76,1)
(11,42,1)
(40,16,1)
(55,2,1)
(68,33,1)
(58,76,1)
(4,76,1)
(2,1,1)
(53,31,1)
(9,76,1)
(34,80,1)
(64,78,1)
(68,61,1)
(0,6,1)
(35,64,1)
(9,70,1)
(5,51,1)
(40,44,1)
(76,22,1)
(10,47,1)
(64,26,1)
(20,43,1)
(37,49,1)
(1,40,1)
(39,35,1)
(59,14,1)
(40,69,1)
(61,17,1)
(47,15,1)
(74,70,1)
(80,38,1)
(33,61,1)
(58,73,1)
(17,25,1)
(48,8,1)
(30,39,2)
(81,3,2)
(59,39,2)
(70,39,2)
(62,39,2)
(65,39,2)
(58,39,2)
(81,39,2)
(80,39,2)
(3,39,2)
(17,39,2)
(9,39,2)
(67,39,2)
(55,39,2)
(8,39,2)
(80,76,2)
(67,9,2)
(13,39,2)
(49,39,2)
(6,39,2)
(47,39,2)
(50,4,2)
(2,39,2)
(38,39,2)
(63,39,2)
(75,54,2)
(31,39,2)
(37,39,2)
(75,30,2)
(75,39,2)
(25,34,2)
(79,39,2)
(31,51,2)
(53,39,2)
(64,26,2)
(48,39,2)
(39,76,2)
(30,78,2)
(48,76,2)
(76,22,2)
(40,44,2)
(14,76,2)
(3,82,2)
(52,39,2)
(74,39,2)
(34,39,2)
(28,39,2)
(4,39,2)
(43,39,2)
(23,39,2)
(33,39,2)
(30,44,2)
(49,76,2)
(18,39,2)
(22,66,2)
(4,76,2)
(3,26,2)
(25,13,2)
(20,39,2)
(14,39,2)
(34,80,2)
(70,75,2)
(61,39,2)
(73,39,2)
(0,39,2)
(51,39,2)
(36,39,2)
(36,67,2)
(68,61,2)
(66,77,2)
(10,39,2)
(25,39,2)
(40,39,2)
(72,39,2)
(68,39,2)
(16,39,2)
(67,49,2)
(64,44,2)
(64,82,2)
(15,39,2)
(1,40,2)
(56,39,2)
(29,39,2)
(64,78,2)
(15,76,2)
(52,76,2)
(50,48,2)
(5,39,2)
(49,1,2)
(45,39,2)
(18,82,2)
(1,39,2)
(9,76,2)
(9,70,2)
(19,76,2)
(40,69,2)
(19,39,2)
(58,76,2)
-----------------------------------
(0,begin_addr)
(1,tab->start = (const struct unwind_idx *)
(2,tab)
(3,text_addr + text_size)
(4,return tab;)
(5,flags)
(6,tab)
(7,flags)
(8,tab)
(9,tab->stop)
(10,text_size)
(11,tab)
(12,tab)
(13,&unwind_tables)
(14,tab->begin_addr)
(15,tab->end_addr)
(16,start)
(17,unwind_lock)
(18,tab->begin_addr = text_addr)
(19,tab->stop)
(20,end_addr)
(21,__func__)
(22,kmalloc(sizeof(*tab)
(23,start)
(24,start)
(25,list_add_tail(&tab->list, &unwind_tables)
(26,unsigned long text_size)
(27,size)
(28,unwind_lock)
(29,size)
(30,start + size)
(31,raw_spin_lock_irqsave(&unwind_lock, flags)
(32,)
(33,flags)
(34,&tab->list)
(35,tab)
(36,tab->origin = unwind_find_origin(tab->start, tab->stop)
(37,tab)
(38,list)
(39,!tab)
(40,(const struct unwind_idx *)
(41,text_addr)
(42,tab)
(43,tab)
(44,unsigned long start)
(45,unwind_tables)
(46,"%s(%08lx, %08lx, %08lx, %08lx)
(47,text_addr)
(48,return tab;)
(49,tab->start)
(50,RET)
(51,&unwind_lock)
(52,tab->origin)
(53,tab)
(54,const struct unwind_idx *)
(55,stop)
(56,tab)
(57,if (!tab)
(58,tab->start)
(59,text_addr)
(60,text_size)
(61,&unwind_lock)
(62,tab)
(63,origin)
(64,pr_debug("%s(%08lx, %08lx, %08lx, %08lx)
(65,stop)
(66,sizeof(*tab)
(67,unwind_find_origin(tab->start, tab->stop)
(68,raw_spin_unlock_irqrestore(&unwind_lock, flags)
(69,const struct unwind_idx *)
(70,tab->stop = (const struct unwind_idx *)
(71,GFP_KERNEL)
(72,start)
(73,start)
(74,tab)
(75,(const struct unwind_idx *)
(76,*tab = kmalloc(sizeof(*tab)
(77,*tab)
(78,unsigned long size)
(79,tab)
(80,tab->list)
(81,tab->end_addr = text_addr + text_size)
(82,unsigned long text_addr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^