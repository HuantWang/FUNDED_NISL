-----label-----
1
-----code-----
VOS_STATUS
WLANBAP_XlateTxDataPkt
(
    ptBtampHandle     btampHandle,  /* Used by BAP to identify the actual session
                                      and therefore addresses */
    v_U8_t            phy_link_handle,  /* Used by BAP to indentify the WLAN assoc. (StaId) */
    WLANTL_ACEnumType    *pucAC,        /* Return the AC here */
    WLANTL_MetaInfoType  *tlMetaInfo, /* Return the MetaInfo here. An assist to WLANBAP_STAFetchPktCBType */
    vos_pkt_t        *vosDataBuff
)
{
    ptBtampContext           pBtampCtx = (ptBtampContext) btampHandle;
    tpBtampLogLinkCtx        pLogLinkContext;
    WLANBAP_8023HeaderType   w8023Header;
    WLANBAP_HCIACLHeaderType hciACLHeader;
    v_U8_t                   aucLLCHeader[WLANBAP_LLC_HEADER_LEN];
    VOS_STATUS               vosStatus;
    v_U8_t                   ucSTAId;  /* The StaId (used by TL, PE, and HAL) */
    v_PVOID_t                pHddHdl; /* Handle to return BSL context in */
    v_U16_t                  headerLength;  /* The 802.3 frame length*/
    v_U16_t                  protoType = WLANBAP_BT_AMP_TYPE_DATA;  /* The protocol type bytes*/
    uintptr_t                value = 0;
    /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/


    /*------------------------------------------------------------------------
        Sanity check params
      ------------------------------------------------------------------------*/
    if ( NULL == pBtampCtx)
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                     "Invalid BAP handle value in %s", __func__);
        return VOS_STATUS_E_FAULT;
    }

    // Here, I have to make the assumption that this is an
    // HCI ACL Data packet that I am being handed.
    vosStatus = vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN);

    if ( VOS_STATUS_SUCCESS != vosStatus )
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",
                  vosStatus);

        return vosStatus;
    }

    // JEZ081003: Remove this after debugging
    // Sanity check the phy_link_handle value

    if ( phy_link_handle != hciACLHeader.phyLinkHandle )
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",
                __func__, phy_link_handle, hciACLHeader.phyLinkHandle);
        return VOS_STATUS_E_INVAL;
    }


    /* Lookup the StaId using the phy_link_handle and the BAP context */

    vosStatus = WLANBAP_GetStaIdFromLinkCtx (
            btampHandle,  /* btampHandle value in  */
            phy_link_handle,  /* phy_link_handle value in */
            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */
            &pHddHdl); /* Handle to return BSL context */
    if ( VOS_STATUS_SUCCESS != vosStatus )
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,
                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__);
        return VOS_STATUS_E_FAULT;
    }

    // JEZ081003: Remove this after debugging
    // Sanity check the log_link_handle value
    if (!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle))
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",
                hciACLHeader.logLinkHandle,
                __func__);

        // JEZ090123: Insure that the logical link value is good
        hciACLHeader.logLinkHandle = 1;
        //return VOS_STATUS_E_INVAL;
    }

    /* Use the log_link_handle to retrieve the logical link context */
    /* JEZ081006: abstract this with a proc.  So you can change the impl later */
    pLogLinkContext = &(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ]);

    // JEZ081003: Remove this after debugging
    // Sanity check the log_link_handle value
    // JEZ081113: I changed this to fail on an UNOCCUPIED entry
    if ( pLogLinkContext->present != VOS_TRUE)
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                "WLAN BAP: Invalid logical link entry in %s",
                __func__);

        return VOS_STATUS_E_INVAL;
    }

    // Return the AC and MetaInfo

    // Now copy the AC values from the Logical Link context
    *pucAC = pLogLinkContext->btampAC;
    // Now copy the values from the Logical Link context to the MetaInfo
    tlMetaInfo->ucTID = pLogLinkContext->ucTID;
    tlMetaInfo->ucUP = pLogLinkContext->ucUP;
    tlMetaInfo->ucIsEapol = VOS_FALSE;
    tlMetaInfo->ucDisableFrmXtl = VOS_FALSE;
    tlMetaInfo->ucBcast = VOS_FALSE; /* hciACLHeader.BCFlag; */ /* Don't I want to use the BCFlag? */
    tlMetaInfo->ucMcast = VOS_FALSE;
    tlMetaInfo->ucType = 0x00;  /* What is this really ?? */
//    tlMetaInfo->usTimeStamp = 0x00;  /* Ravi, shouldn't you be setting this?  It's in the VOS packet.  */

    // Form the 802.3 header

    vos_mem_copy( w8023Header.vDA, pBtampCtx->peer_mac_addr, VOS_MAC_ADDR_SIZE);
    vos_mem_copy( w8023Header.vSA, pBtampCtx->self_mac_addr, VOS_MAC_ADDR_SIZE);

    /* Now this length passed down in HCI...is in little-endian */
    headerLength = vos_le16_to_cpu(hciACLHeader.dataLength);
    headerLength += WLANBAP_LLC_HEADER_LEN;
    /* Now the 802.3 length field is big-endian?! */
    w8023Header.usLenType = vos_cpu_to_be16(headerLength);

    /* Now adjust the protocol type bytes*/
    protoType = vos_cpu_to_be16( protoType);

    /* Now form the LLC header */
    vos_mem_copy(aucLLCHeader,
            WLANBAP_LLC_HEADER,
            sizeof(WLANBAP_LLC_HEADER));
    vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET],
            WLANBAP_BT_AMP_OUI,
            WLANBAP_LLC_OUI_SIZE);
    vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET],
            &protoType,  //WLANBAP_BT_AMP_TYPE_DATA
            WLANBAP_LLC_PROTO_TYPE_SIZE);

    /* Push on the LLC header */
    vos_pkt_push_head(vosDataBuff,
            aucLLCHeader,
            WLANBAP_LLC_HEADER_LEN);

    /* Push on the 802.3 header */
    vos_pkt_push_head(vosDataBuff, &w8023Header, sizeof(w8023Header));


    /*Set the logical link handle as user data so that we can retrieve it on
      Tx Complete */
    value = (uintptr_t)hciACLHeader.logLinkHandle;
    vos_pkt_set_user_data_ptr( vosDataBuff, VOS_PKT_USER_DATA_ID_BAP,
                               (v_VOID_t *)value);

    return VOS_STATUS_SUCCESS;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
29,30
31,32
31,33
34,35
34,36
34,37
34,38
34,39
34,40
34,41
34,42
34,43
34,44
34,45
34,46
34,47
34,48
34,49
34,50
34,51
34,52
34,53
34,54
34,55
34,56
34,57
34,58
34,59
34,60
34,61
34,62
34,63
34,64
34,65
34,66
34,67
34,68
34,69
34,70
34,71
34,72
34,73
34,74
34,75
34,76
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
69,70
71,72
71,73
73,74
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
104,106
106,107
107,108
109,110
110,111
110,112
111,112
113,114
113,115
115,116
117,118
117,119
118,119
118,120
119,120
121,122
123,124
123,125
124,125
125,126
125,127
125,128
125,129
125,130
126,127
128,129
130,131
133,134
135,136
136,137
138,139
139,140
139,141
140,141
142,143
142,144
142,145
142,146
143,144
145,146
147,148
148,149
150,151
152,153
152,154
153,154
153,155
154,155
156,157
158,159
158,160
159,160
160,161
160,162
160,163
160,164
160,165
161,162
163,164
165,166
168,169
170,171
171,172
173,174
173,175
174,175
174,176
175,176
177,178
177,179
178,179
181,182
181,183
182,183
183,184
183,185
183,186
183,187
183,188
183,189
183,190
184,185
186,187
188,189
191,192
193,194
195,196
195,197
196,197
199,200
200,201
202,203
203,204
203,205
204,205
206,207
206,208
206,209
206,210
206,211
207,208
209,210
211,212
213,214
214,215
216,217
217,218
219,220
219,221
220,221
220,222
221,222
223,224
225,226
225,227
226,227
227,228
227,229
227,230
227,231
227,232
228,229
230,231
232,233
235,236
237,238
238,239
240,241
240,242
241,242
242,243
242,244
243,244
245,246
245,247
246,247
249,250
249,251
250,251
251,252
251,253
251,254
251,255
251,256
251,257
252,253
254,255
256,257
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
267,269
268,269
272,273
273,274
273,275
274,275
276,277
277,278
278,279
278,280
279,280
279,281
280,281
283,284
283,285
284,285
287,288
287,289
288,289
288,290
289,290
289,291
290,291
293,294
295,296
295,297
296,297
297,298
297,299
297,300
297,301
297,302
298,299
300,301
302,303
305,306
307,308
308,309
310,311
311,312
311,313
312,313
313,314
315,316
315,317
316,317
319,320
320,321
320,322
321,322
321,323
322,323
325,326
325,327
326,327
329,330
330,331
330,332
331,332
331,333
332,333
335,336
335,337
336,337
339,340
340,341
340,342
341,342
341,343
342,343
345,346
347,348
348,349
348,350
349,350
349,351
350,351
353,354
355,356
356,357
356,358
357,358
357,359
358,359
361,362
363,364
364,365
364,366
365,366
365,367
366,367
369,370
371,372
372,373
372,374
373,374
373,375
374,375
378,379
379,380
379,381
379,382
379,383
380,381
382,383
382,384
383,384
386,387
386,388
387,388
390,391
392,393
393,394
393,395
393,396
393,397
394,395
396,397
396,398
397,398
400,401
400,402
401,402
404,405
406,407
407,408
407,409
408,409
410,411
410,412
411,412
413,414
413,415
414,415
417,418
418,419
418,420
419,420
421,422
423,424
424,425
424,426
425,426
425,427
426,427
429,430
429,431
430,431
432,433
434,435
435,436
435,437
436,437
438,439
438,440
439,440
441,442
443,444
444,445
444,446
444,447
444,448
445,446
447,448
449,450
451,452
452,453
452,454
453,454
456,457
457,458
457,459
457,460
457,461
458,459
460,461
461,462
461,463
462,463
464,465
466,467
468,469
470,471
471,472
471,473
471,474
471,475
472,473
474,475
475,476
475,477
476,477
478,479
480,481
481,482
483,484
485,486
486,487
486,488
486,489
486,490
487,488
489,490
491,492
493,494
495,496
496,497
496,498
496,499
496,500
497,498
499,500
501,502
502,503
504,505
505,506
506,507
508,509
509,510
509,511
510,511
512,513
512,514
513,514
513,515
514,515
517,518
517,519
518,519
521,522
522,523
522,524
522,525
522,526
523,524
525,526
527,528
529,530
529,531
530,531
530,532
531,532
533,534
535,536
537,538
538,539
-----nextToken-----
3,5,8,10,13,15,18,20,21,24,26,27,30,32,33,38,40,45,46,48,52,54,58,60,64,66,70,72,75,79,81,85,87,91,93,97,99,103,105,108,112,114,116,120,122,127,129,131,132,134,137,141,144,146,149,151,155,157,162,164,166,167,169,172,176,179,180,185,187,189,190,192,194,197,198,201,205,208,210,212,215,218,222,224,229,231,233,234,236,239,244,247,248,253,255,257,258,261,262,264,269,270,271,275,281,282,285,286,291,292,294,299,301,303,304,306,309,314,317,318,323,324,327,328,333,334,337,338,343,344,346,351,352,354,359,360,362,367,368,370,375,376,377,381,384,385,388,389,391,395,398,399,402,403,405,409,412,415,416,420,422,427,428,431,433,437,440,442,446,448,450,454,455,459,463,465,467,469,473,477,479,482,484,488,490,492,494,498,500,503,507,511,515,516,519,520,524,526,528,532,534,536,539
-----computeFrom-----
118,119
118,120
139,140
139,141
153,154
153,155
174,175
174,176
203,204
203,205
220,221
220,222
266,267
266,268
273,274
273,275
288,289
288,290
311,312
311,313
320,321
320,322
330,331
330,332
340,341
340,342
348,349
348,350
356,357
356,358
364,365
364,366
372,373
372,374
407,408
407,409
418,419
418,420
424,425
424,426
435,436
435,437
509,510
509,511
-----guardedBy-----
157,172
179,197
176,194
180,198
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
VOS_STATUSWLANBAP_XlateTxDataPkt(    ptBtampHandle     btampHandle,  /* Used by BAP to identify the actual session                                      and therefore addresses */    v_U8_t            phy_link_handle,  /* Used by BAP to indentify the WLAN assoc. (StaId) */    WLANTL_ACEnumType    *pucAC,        /* Return the AC here */    WLANTL_MetaInfoType  *tlMetaInfo, /* Return the MetaInfo here. An assist to WLANBAP_STAFetchPktCBType */    vos_pkt_t        *vosDataBuff){    ptBtampContext           pBtampCtx = (ptBtampContext) btampHandle;    tpBtampLogLinkCtx        pLogLinkContext;    WLANBAP_8023HeaderType   w8023Header;    WLANBAP_HCIACLHeaderType hciACLHeader;    v_U8_t                   aucLLCHeader[WLANBAP_LLC_HEADER_LEN];    VOS_STATUS               vosStatus;    v_U8_t                   ucSTAId;  /* The StaId (used by TL, PE, and HAL) */    v_PVOID_t                pHddHdl; /* Handle to return BSL context in */    v_U16_t                  headerLength;  /* The 802.3 frame length*/    v_U16_t                  protoType = WLANBAP_BT_AMP_TYPE_DATA;  /* The protocol type bytes*/    uintptr_t                value = 0;    /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/    /*------------------------------------------------------------------------        Sanity check params      ------------------------------------------------------------------------*/    if ( NULL == pBtampCtx)    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                     "Invalid BAP handle value in %s", __func__);        return VOS_STATUS_E_FAULT;    }    // Here, I have to make the assumption that this is an    // HCI ACL Data packet that I am being handed.    vosStatus = vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN);    if ( VOS_STATUS_SUCCESS != vosStatus )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",                  vosStatus);        return vosStatus;    }    // JEZ081003: Remove this after debugging    // Sanity check the phy_link_handle value    if ( phy_link_handle != hciACLHeader.phyLinkHandle )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",                __func__, phy_link_handle, hciACLHeader.phyLinkHandle);        return VOS_STATUS_E_INVAL;    }    /* Lookup the StaId using the phy_link_handle and the BAP context */    vosStatus = WLANBAP_GetStaIdFromLinkCtx (            btampHandle,  /* btampHandle value in  */            phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl); /* Handle to return BSL context */    if ( VOS_STATUS_SUCCESS != vosStatus )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__);        return VOS_STATUS_E_FAULT;    }    // JEZ081003: Remove this after debugging    // Sanity check the log_link_handle value    if (!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle))    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",                hciACLHeader.logLinkHandle,                __func__);        // JEZ090123: Insure that the logical link value is good        hciACLHeader.logLinkHandle = 1;        //return VOS_STATUS_E_INVAL;    }    /* Use the log_link_handle to retrieve the logical link context */    /* JEZ081006: abstract this with a proc.  So you can change the impl later */    pLogLinkContext = &(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ]);    // JEZ081003: Remove this after debugging    // Sanity check the log_link_handle value    // JEZ081113: I changed this to fail on an UNOCCUPIED entry    if ( pLogLinkContext->present != VOS_TRUE)    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link entry in %s",                __func__);        return VOS_STATUS_E_INVAL;    }    // Return the AC and MetaInfo    // Now copy the AC values from the Logical Link context    *pucAC = pLogLinkContext->btampAC;    // Now copy the values from the Logical Link context to the MetaInfo    tlMetaInfo->ucTID = pLogLinkContext->ucTID;    tlMetaInfo->ucUP = pLogLinkContext->ucUP;    tlMetaInfo->ucIsEapol = VOS_FALSE;    tlMetaInfo->ucDisableFrmXtl = VOS_FALSE;    tlMetaInfo->ucBcast = VOS_FALSE; /* hciACLHeader.BCFlag; */ /* Don't I want to use the BCFlag? */    tlMetaInfo->ucMcast = VOS_FALSE;    tlMetaInfo->ucType = 0x00;  /* What is this really ?? *///    tlMetaInfo->usTimeStamp = 0x00;  /* Ravi, shouldn't you be setting this?  It's in the VOS packet.  */    // Form the 802.3 header    vos_mem_copy( w8023Header.vDA, pBtampCtx->peer_mac_addr, VOS_MAC_ADDR_SIZE);    vos_mem_copy( w8023Header.vSA, pBtampCtx->self_mac_addr, VOS_MAC_ADDR_SIZE);    /* Now this length passed down in HCI...is in little-endian */    headerLength = vos_le16_to_cpu(hciACLHeader.dataLength);    headerLength += WLANBAP_LLC_HEADER_LEN;    /* Now the 802.3 length field is big-endian?! */    w8023Header.usLenType = vos_cpu_to_be16(headerLength);    /* Now adjust the protocol type bytes*/    protoType = vos_cpu_to_be16( protoType);    /* Now form the LLC header */    vos_mem_copy(aucLLCHeader,            WLANBAP_LLC_HEADER,            sizeof(WLANBAP_LLC_HEADER));    vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET],            WLANBAP_BT_AMP_OUI,            WLANBAP_LLC_OUI_SIZE);    vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET],            &protoType,  //WLANBAP_BT_AMP_TYPE_DATA            WLANBAP_LLC_PROTO_TYPE_SIZE);    /* Push on the LLC header */    vos_pkt_push_head(vosDataBuff,            aucLLCHeader,            WLANBAP_LLC_HEADER_LEN);    /* Push on the 802.3 header */    vos_pkt_push_head(vosDataBuff, &w8023Header, sizeof(w8023Header));    /*Set the logical link handle as user data so that we can retrieve it on      Tx Complete */    value = (uintptr_t)hciACLHeader.logLinkHandle;    vos_pkt_set_user_data_ptr( vosDataBuff, VOS_PKT_USER_DATA_ID_BAP,                               (v_VOID_t *)value);    return VOS_STATUS_SUCCESS;}
VOS_STATUS
VOS_STATUS
WLANBAP_XlateTxDataPkt(    ptBtampHandle     btampHandle,  /* Used by BAP to identify the actual session                                      and therefore addresses */    v_U8_t            phy_link_handle,  /* Used by BAP to indentify the WLAN assoc. (StaId) */    WLANTL_ACEnumType    *pucAC,        /* Return the AC here */    WLANTL_MetaInfoType  *tlMetaInfo, /* Return the MetaInfo here. An assist to WLANBAP_STAFetchPktCBType */    vos_pkt_t        *vosDataBuff)
WLANBAP_XlateTxDataPkt
ptBtampHandle     btampHandle
ptBtampHandle
ptBtampHandle
btampHandle
btampHandle
v_U8_t            phy_link_handle
v_U8_t
v_U8_t
phy_link_handle
phy_link_handle
WLANTL_ACEnumType    *pucAC
WLANTL_ACEnumType
WLANTL_ACEnumType
*pucAC
*
pucAC
WLANTL_MetaInfoType  *tlMetaInfo
WLANTL_MetaInfoType
WLANTL_MetaInfoType
*tlMetaInfo
*
tlMetaInfo
vos_pkt_t        *vosDataBuff
vos_pkt_t
vos_pkt_t
*vosDataBuff
*
vosDataBuff
{    ptBtampContext           pBtampCtx = (ptBtampContext) btampHandle;    tpBtampLogLinkCtx        pLogLinkContext;    WLANBAP_8023HeaderType   w8023Header;    WLANBAP_HCIACLHeaderType hciACLHeader;    v_U8_t                   aucLLCHeader[WLANBAP_LLC_HEADER_LEN];    VOS_STATUS               vosStatus;    v_U8_t                   ucSTAId;  /* The StaId (used by TL, PE, and HAL) */    v_PVOID_t                pHddHdl; /* Handle to return BSL context in */    v_U16_t                  headerLength;  /* The 802.3 frame length*/    v_U16_t                  protoType = WLANBAP_BT_AMP_TYPE_DATA;  /* The protocol type bytes*/    uintptr_t                value = 0;    /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/    /*------------------------------------------------------------------------        Sanity check params      ------------------------------------------------------------------------*/    if ( NULL == pBtampCtx)    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                     "Invalid BAP handle value in %s", __func__);        return VOS_STATUS_E_FAULT;    }    // Here, I have to make the assumption that this is an    // HCI ACL Data packet that I am being handed.    vosStatus = vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN);    if ( VOS_STATUS_SUCCESS != vosStatus )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",                  vosStatus);        return vosStatus;    }    // JEZ081003: Remove this after debugging    // Sanity check the phy_link_handle value    if ( phy_link_handle != hciACLHeader.phyLinkHandle )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",                __func__, phy_link_handle, hciACLHeader.phyLinkHandle);        return VOS_STATUS_E_INVAL;    }    /* Lookup the StaId using the phy_link_handle and the BAP context */    vosStatus = WLANBAP_GetStaIdFromLinkCtx (            btampHandle,  /* btampHandle value in  */            phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl); /* Handle to return BSL context */    if ( VOS_STATUS_SUCCESS != vosStatus )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__);        return VOS_STATUS_E_FAULT;    }    // JEZ081003: Remove this after debugging    // Sanity check the log_link_handle value    if (!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle))    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",                hciACLHeader.logLinkHandle,                __func__);        // JEZ090123: Insure that the logical link value is good        hciACLHeader.logLinkHandle = 1;        //return VOS_STATUS_E_INVAL;    }    /* Use the log_link_handle to retrieve the logical link context */    /* JEZ081006: abstract this with a proc.  So you can change the impl later */    pLogLinkContext = &(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ]);    // JEZ081003: Remove this after debugging    // Sanity check the log_link_handle value    // JEZ081113: I changed this to fail on an UNOCCUPIED entry    if ( pLogLinkContext->present != VOS_TRUE)    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link entry in %s",                __func__);        return VOS_STATUS_E_INVAL;    }    // Return the AC and MetaInfo    // Now copy the AC values from the Logical Link context    *pucAC = pLogLinkContext->btampAC;    // Now copy the values from the Logical Link context to the MetaInfo    tlMetaInfo->ucTID = pLogLinkContext->ucTID;    tlMetaInfo->ucUP = pLogLinkContext->ucUP;    tlMetaInfo->ucIsEapol = VOS_FALSE;    tlMetaInfo->ucDisableFrmXtl = VOS_FALSE;    tlMetaInfo->ucBcast = VOS_FALSE; /* hciACLHeader.BCFlag; */ /* Don't I want to use the BCFlag? */    tlMetaInfo->ucMcast = VOS_FALSE;    tlMetaInfo->ucType = 0x00;  /* What is this really ?? *///    tlMetaInfo->usTimeStamp = 0x00;  /* Ravi, shouldn't you be setting this?  It's in the VOS packet.  */    // Form the 802.3 header    vos_mem_copy( w8023Header.vDA, pBtampCtx->peer_mac_addr, VOS_MAC_ADDR_SIZE);    vos_mem_copy( w8023Header.vSA, pBtampCtx->self_mac_addr, VOS_MAC_ADDR_SIZE);    /* Now this length passed down in HCI...is in little-endian */    headerLength = vos_le16_to_cpu(hciACLHeader.dataLength);    headerLength += WLANBAP_LLC_HEADER_LEN;    /* Now the 802.3 length field is big-endian?! */    w8023Header.usLenType = vos_cpu_to_be16(headerLength);    /* Now adjust the protocol type bytes*/    protoType = vos_cpu_to_be16( protoType);    /* Now form the LLC header */    vos_mem_copy(aucLLCHeader,            WLANBAP_LLC_HEADER,            sizeof(WLANBAP_LLC_HEADER));    vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET],            WLANBAP_BT_AMP_OUI,            WLANBAP_LLC_OUI_SIZE);    vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET],            &protoType,  //WLANBAP_BT_AMP_TYPE_DATA            WLANBAP_LLC_PROTO_TYPE_SIZE);    /* Push on the LLC header */    vos_pkt_push_head(vosDataBuff,            aucLLCHeader,            WLANBAP_LLC_HEADER_LEN);    /* Push on the 802.3 header */    vos_pkt_push_head(vosDataBuff, &w8023Header, sizeof(w8023Header));    /*Set the logical link handle as user data so that we can retrieve it on      Tx Complete */    value = (uintptr_t)hciACLHeader.logLinkHandle;    vos_pkt_set_user_data_ptr( vosDataBuff, VOS_PKT_USER_DATA_ID_BAP,                               (v_VOID_t *)value);    return VOS_STATUS_SUCCESS;}
ptBtampContext           pBtampCtx = (ptBtampContext) btampHandle;
ptBtampContext           pBtampCtx = (ptBtampContext) btampHandle;
ptBtampContext
ptBtampContext
pBtampCtx = (ptBtampContext) btampHandle
pBtampCtx
= (ptBtampContext) btampHandle
(ptBtampContext) btampHandle
ptBtampContext
ptBtampContext
ptBtampContext

btampHandle
btampHandle
tpBtampLogLinkCtx        pLogLinkContext;
tpBtampLogLinkCtx        pLogLinkContext;
tpBtampLogLinkCtx
tpBtampLogLinkCtx
pLogLinkContext
pLogLinkContext
WLANBAP_8023HeaderType   w8023Header;
WLANBAP_8023HeaderType   w8023Header;
WLANBAP_8023HeaderType
WLANBAP_8023HeaderType
w8023Header
w8023Header
WLANBAP_HCIACLHeaderType hciACLHeader;
WLANBAP_HCIACLHeaderType hciACLHeader;
WLANBAP_HCIACLHeaderType
WLANBAP_HCIACLHeaderType
hciACLHeader
hciACLHeader
v_U8_t                   aucLLCHeader[WLANBAP_LLC_HEADER_LEN];
v_U8_t                   aucLLCHeader[WLANBAP_LLC_HEADER_LEN];
v_U8_t
v_U8_t
aucLLCHeader[WLANBAP_LLC_HEADER_LEN]
aucLLCHeader
[WLANBAP_LLC_HEADER_LEN]
WLANBAP_LLC_HEADER_LEN
WLANBAP_LLC_HEADER_LEN
VOS_STATUS               vosStatus;
VOS_STATUS               vosStatus;
VOS_STATUS
VOS_STATUS
vosStatus
vosStatus
v_U8_t                   ucSTAId;
v_U8_t                   ucSTAId;
v_U8_t
v_U8_t
ucSTAId
ucSTAId
v_PVOID_t                pHddHdl;
v_PVOID_t                pHddHdl;
v_PVOID_t
v_PVOID_t
pHddHdl
pHddHdl
v_U16_t                  headerLength;
v_U16_t                  headerLength;
v_U16_t
v_U16_t
headerLength
headerLength
v_U16_t                  protoType = WLANBAP_BT_AMP_TYPE_DATA;
v_U16_t                  protoType = WLANBAP_BT_AMP_TYPE_DATA;
v_U16_t
v_U16_t
protoType = WLANBAP_BT_AMP_TYPE_DATA
protoType
= WLANBAP_BT_AMP_TYPE_DATA
WLANBAP_BT_AMP_TYPE_DATA
WLANBAP_BT_AMP_TYPE_DATA
uintptr_t                value = 0;
uintptr_t                value = 0;
uintptr_t
uintptr_t
value = 0
value
= 0
0
if ( NULL == pBtampCtx)    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                     "Invalid BAP handle value in %s", __func__);        return VOS_STATUS_E_FAULT;    }
NULL == pBtampCtx
NULL
NULL
pBtampCtx
pBtampCtx
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                     "Invalid BAP handle value in %s", __func__);        return VOS_STATUS_E_FAULT;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                     "Invalid BAP handle value in %s", __func__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                     "Invalid BAP handle value in %s", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"Invalid BAP handle value in %s"
__func__
__func__
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
vosStatus = vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN);
vosStatus = vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN)
vosStatus
vosStatus
vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN)
vos_pkt_pop_head
vos_pkt_pop_head
vosDataBuff
vosDataBuff
&hciACLHeader
hciACLHeader
hciACLHeader
WLANBAP_HCI_ACL_HEADER_LEN
WLANBAP_HCI_ACL_HEADER_LEN
if ( VOS_STATUS_SUCCESS != vosStatus )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",                  vosStatus);        return vosStatus;    }
VOS_STATUS_SUCCESS != vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
vosStatus
vosStatus
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",                  vosStatus);        return vosStatus;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",                  vosStatus);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",                  vosStatus)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"WLAN BAP: Failed to pop HCI ACL header from packet %d"
vosStatus
vosStatus
return vosStatus;
vosStatus
vosStatus
if ( phy_link_handle != hciACLHeader.phyLinkHandle )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",                __func__, phy_link_handle, hciACLHeader.phyLinkHandle);        return VOS_STATUS_E_INVAL;    }
phy_link_handle != hciACLHeader.phyLinkHandle
phy_link_handle
phy_link_handle
hciACLHeader.phyLinkHandle
hciACLHeader
hciACLHeader
phyLinkHandle
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",                __func__, phy_link_handle, hciACLHeader.phyLinkHandle);        return VOS_STATUS_E_INVAL;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",                __func__, phy_link_handle, hciACLHeader.phyLinkHandle);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",                __func__, phy_link_handle, hciACLHeader.phyLinkHandle)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d"
__func__
__func__
phy_link_handle
phy_link_handle
hciACLHeader.phyLinkHandle
hciACLHeader
hciACLHeader
phyLinkHandle
return VOS_STATUS_E_INVAL;
VOS_STATUS_E_INVAL
VOS_STATUS_E_INVAL
vosStatus = WLANBAP_GetStaIdFromLinkCtx (            btampHandle,  /* btampHandle value in  */            phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl);
vosStatus = WLANBAP_GetStaIdFromLinkCtx (            btampHandle,  /* btampHandle value in  */            phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl)
vosStatus
vosStatus
WLANBAP_GetStaIdFromLinkCtx (            btampHandle,  /* btampHandle value in  */            phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl)
WLANBAP_GetStaIdFromLinkCtx
WLANBAP_GetStaIdFromLinkCtx
btampHandle
btampHandle
phy_link_handle
phy_link_handle
&ucSTAId
ucSTAId
ucSTAId
&pHddHdl
pHddHdl
pHddHdl
if ( VOS_STATUS_SUCCESS != vosStatus )    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__);        return VOS_STATUS_E_FAULT;    }
VOS_STATUS_SUCCESS != vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
vosStatus
vosStatus
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__);        return VOS_STATUS_E_FAULT;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"Unable to retrieve STA Id from BAP context and phy_link_handle in %s"
__func__
__func__
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
if (!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle))    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",                hciACLHeader.logLinkHandle,                __func__);        // JEZ090123: Insure that the logical link value is good        hciACLHeader.logLinkHandle = 1;        //return VOS_STATUS_E_INVAL;    }
!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle)
BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle)
BTAMP_VALID_LOG_LINK
BTAMP_VALID_LOG_LINK
hciACLHeader.logLinkHandle
hciACLHeader
hciACLHeader
logLinkHandle
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",                hciACLHeader.logLinkHandle,                __func__);        // JEZ090123: Insure that the logical link value is good        hciACLHeader.logLinkHandle = 1;        //return VOS_STATUS_E_INVAL;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",                hciACLHeader.logLinkHandle,                __func__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link handle (%d) in %s. Corrected.",                hciACLHeader.logLinkHandle,                __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"WLAN BAP: Invalid logical link handle (%d) in %s. Corrected."
hciACLHeader.logLinkHandle
hciACLHeader
hciACLHeader
logLinkHandle
__func__
__func__
hciACLHeader.logLinkHandle = 1;
hciACLHeader.logLinkHandle = 1
hciACLHeader.logLinkHandle
hciACLHeader
hciACLHeader
logLinkHandle
1
pLogLinkContext = &(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ]);
pLogLinkContext = &(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ])
pLogLinkContext
pLogLinkContext
&(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ])
(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ])
pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ]
pBtampCtx->btampLogLinkCtx
pBtampCtx
pBtampCtx
btampLogLinkCtx
hciACLHeader.logLinkHandle
hciACLHeader
hciACLHeader
logLinkHandle
if ( pLogLinkContext->present != VOS_TRUE)    {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link entry in %s",                __func__);        return VOS_STATUS_E_INVAL;    }
pLogLinkContext->present != VOS_TRUE
pLogLinkContext->present
pLogLinkContext
pLogLinkContext
present
VOS_TRUE
VOS_TRUE
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link entry in %s",                __func__);        return VOS_STATUS_E_INVAL;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link entry in %s",                __func__);
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "WLAN BAP: Invalid logical link entry in %s",                __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"WLAN BAP: Invalid logical link entry in %s"
__func__
__func__
return VOS_STATUS_E_INVAL;
VOS_STATUS_E_INVAL
VOS_STATUS_E_INVAL
*pucAC = pLogLinkContext->btampAC;
*pucAC = pLogLinkContext->btampAC
*pucAC
pucAC
pucAC
pLogLinkContext->btampAC
pLogLinkContext
pLogLinkContext
btampAC
tlMetaInfo->ucTID = pLogLinkContext->ucTID;
tlMetaInfo->ucTID = pLogLinkContext->ucTID
tlMetaInfo->ucTID
tlMetaInfo
tlMetaInfo
ucTID
pLogLinkContext->ucTID
pLogLinkContext
pLogLinkContext
ucTID
tlMetaInfo->ucUP = pLogLinkContext->ucUP;
tlMetaInfo->ucUP = pLogLinkContext->ucUP
tlMetaInfo->ucUP
tlMetaInfo
tlMetaInfo
ucUP
pLogLinkContext->ucUP
pLogLinkContext
pLogLinkContext
ucUP
tlMetaInfo->ucIsEapol = VOS_FALSE;
tlMetaInfo->ucIsEapol = VOS_FALSE
tlMetaInfo->ucIsEapol
tlMetaInfo
tlMetaInfo
ucIsEapol
VOS_FALSE
VOS_FALSE
tlMetaInfo->ucDisableFrmXtl = VOS_FALSE;
tlMetaInfo->ucDisableFrmXtl = VOS_FALSE
tlMetaInfo->ucDisableFrmXtl
tlMetaInfo
tlMetaInfo
ucDisableFrmXtl
VOS_FALSE
VOS_FALSE
tlMetaInfo->ucBcast = VOS_FALSE;
tlMetaInfo->ucBcast = VOS_FALSE
tlMetaInfo->ucBcast
tlMetaInfo
tlMetaInfo
ucBcast
VOS_FALSE
VOS_FALSE
tlMetaInfo->ucMcast = VOS_FALSE;
tlMetaInfo->ucMcast = VOS_FALSE
tlMetaInfo->ucMcast
tlMetaInfo
tlMetaInfo
ucMcast
VOS_FALSE
VOS_FALSE
tlMetaInfo->ucType = 0x00;
tlMetaInfo->ucType = 0x00
tlMetaInfo->ucType
tlMetaInfo
tlMetaInfo
ucType
0x00
vos_mem_copy( w8023Header.vDA, pBtampCtx->peer_mac_addr, VOS_MAC_ADDR_SIZE);
vos_mem_copy( w8023Header.vDA, pBtampCtx->peer_mac_addr, VOS_MAC_ADDR_SIZE)
vos_mem_copy
vos_mem_copy
w8023Header.vDA
w8023Header
w8023Header
vDA
pBtampCtx->peer_mac_addr
pBtampCtx
pBtampCtx
peer_mac_addr
VOS_MAC_ADDR_SIZE
VOS_MAC_ADDR_SIZE
vos_mem_copy( w8023Header.vSA, pBtampCtx->self_mac_addr, VOS_MAC_ADDR_SIZE);
vos_mem_copy( w8023Header.vSA, pBtampCtx->self_mac_addr, VOS_MAC_ADDR_SIZE)
vos_mem_copy
vos_mem_copy
w8023Header.vSA
w8023Header
w8023Header
vSA
pBtampCtx->self_mac_addr
pBtampCtx
pBtampCtx
self_mac_addr
VOS_MAC_ADDR_SIZE
VOS_MAC_ADDR_SIZE
headerLength = vos_le16_to_cpu(hciACLHeader.dataLength);
headerLength = vos_le16_to_cpu(hciACLHeader.dataLength)
headerLength
headerLength
vos_le16_to_cpu(hciACLHeader.dataLength)
vos_le16_to_cpu
vos_le16_to_cpu
hciACLHeader.dataLength
hciACLHeader
hciACLHeader
dataLength
headerLength += WLANBAP_LLC_HEADER_LEN;
headerLength += WLANBAP_LLC_HEADER_LEN
headerLength
headerLength
WLANBAP_LLC_HEADER_LEN
WLANBAP_LLC_HEADER_LEN
w8023Header.usLenType = vos_cpu_to_be16(headerLength);
w8023Header.usLenType = vos_cpu_to_be16(headerLength)
w8023Header.usLenType
w8023Header
w8023Header
usLenType
vos_cpu_to_be16(headerLength)
vos_cpu_to_be16
vos_cpu_to_be16
headerLength
headerLength
protoType = vos_cpu_to_be16( protoType);
protoType = vos_cpu_to_be16( protoType)
protoType
protoType
vos_cpu_to_be16( protoType)
vos_cpu_to_be16
vos_cpu_to_be16
protoType
protoType
vos_mem_copy(aucLLCHeader,            WLANBAP_LLC_HEADER,            sizeof(WLANBAP_LLC_HEADER));
vos_mem_copy(aucLLCHeader,            WLANBAP_LLC_HEADER,            sizeof(WLANBAP_LLC_HEADER))
vos_mem_copy
vos_mem_copy
aucLLCHeader
aucLLCHeader
WLANBAP_LLC_HEADER
WLANBAP_LLC_HEADER
sizeof(WLANBAP_LLC_HEADER)
WLANBAP_LLC_HEADER
WLANBAP_LLC_HEADER
WLANBAP_LLC_HEADER

vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET],            WLANBAP_BT_AMP_OUI,            WLANBAP_LLC_OUI_SIZE);
vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET],            WLANBAP_BT_AMP_OUI,            WLANBAP_LLC_OUI_SIZE)
vos_mem_copy
vos_mem_copy
&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET]
aucLLCHeader[WLANBAP_LLC_OUI_OFFSET]
aucLLCHeader
aucLLCHeader
WLANBAP_LLC_OUI_OFFSET
WLANBAP_LLC_OUI_OFFSET
WLANBAP_BT_AMP_OUI
WLANBAP_BT_AMP_OUI
WLANBAP_LLC_OUI_SIZE
WLANBAP_LLC_OUI_SIZE
vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET],            &protoType,  //WLANBAP_BT_AMP_TYPE_DATA            WLANBAP_LLC_PROTO_TYPE_SIZE);
vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET],            &protoType,  //WLANBAP_BT_AMP_TYPE_DATA            WLANBAP_LLC_PROTO_TYPE_SIZE)
vos_mem_copy
vos_mem_copy
&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET]
aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET]
aucLLCHeader
aucLLCHeader
WLANBAP_LLC_PROTO_TYPE_OFFSET
WLANBAP_LLC_PROTO_TYPE_OFFSET
&protoType
protoType
protoType
WLANBAP_LLC_PROTO_TYPE_SIZE
WLANBAP_LLC_PROTO_TYPE_SIZE
vos_pkt_push_head(vosDataBuff,            aucLLCHeader,            WLANBAP_LLC_HEADER_LEN);
vos_pkt_push_head(vosDataBuff,            aucLLCHeader,            WLANBAP_LLC_HEADER_LEN)
vos_pkt_push_head
vos_pkt_push_head
vosDataBuff
vosDataBuff
aucLLCHeader
aucLLCHeader
WLANBAP_LLC_HEADER_LEN
WLANBAP_LLC_HEADER_LEN
vos_pkt_push_head(vosDataBuff, &w8023Header, sizeof(w8023Header));
vos_pkt_push_head(vosDataBuff, &w8023Header, sizeof(w8023Header))
vos_pkt_push_head
vos_pkt_push_head
vosDataBuff
vosDataBuff
&w8023Header
w8023Header
w8023Header
sizeof(w8023Header)
(w8023Header)
w8023Header
w8023Header
value = (uintptr_t)hciACLHeader.logLinkHandle;
value = (uintptr_t)hciACLHeader.logLinkHandle
value
value
(uintptr_t)hciACLHeader.logLinkHandle
uintptr_t
uintptr_t
uintptr_t

hciACLHeader.logLinkHandle
hciACLHeader
hciACLHeader
logLinkHandle
vos_pkt_set_user_data_ptr( vosDataBuff, VOS_PKT_USER_DATA_ID_BAP,                               (v_VOID_t *)value);
vos_pkt_set_user_data_ptr( vosDataBuff, VOS_PKT_USER_DATA_ID_BAP,                               (v_VOID_t *)value)
vos_pkt_set_user_data_ptr
vos_pkt_set_user_data_ptr
vosDataBuff
vosDataBuff
VOS_PKT_USER_DATA_ID_BAP
VOS_PKT_USER_DATA_ID_BAP
(v_VOID_t *)value
v_VOID_t *
v_VOID_t
v_VOID_t
*
*
value
value
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
-----joern-----
(113,231,0)
(187,231,0)
(199,262,0)
(115,63,0)
(187,267,0)
(38,267,0)
(4,229,0)
(167,106,0)
(28,63,0)
(8,15,0)
(196,32,0)
(34,242,0)
(133,38,0)
(209,165,0)
(142,60,0)
(47,244,0)
(202,135,0)
(11,60,0)
(79,70,0)
(231,187,0)
(205,87,0)
(251,199,0)
(92,202,0)
(16,233,0)
(53,229,0)
(266,197,0)
(67,63,0)
(195,108,0)
(18,196,0)
(102,135,0)
(114,36,0)
(70,5,0)
(57,250,0)
(209,197,0)
(234,63,0)
(197,209,0)
(252,81,0)
(207,57,0)
(163,228,0)
(65,63,0)
(0,57,0)
(242,63,0)
(89,144,0)
(148,51,0)
(236,32,0)
(259,63,0)
(34,32,0)
(236,131,0)
(29,108,0)
(169,227,0)
(38,190,0)
(41,215,0)
(238,236,0)
(67,139,0)
(264,163,0)
(141,226,0)
(188,32,0)
(254,108,0)
(120,242,0)
(71,105,0)
(248,188,0)
(200,77,0)
(171,105,0)
(238,63,0)
(57,201,0)
(184,38,0)
(155,63,0)
(238,188,0)
(36,182,0)
(95,8,0)
(215,240,0)
(129,32,0)
(203,93,0)
(103,187,0)
(90,244,0)
(94,29,0)
(160,60,0)
(22,63,0)
(170,260,0)
(138,87,0)
(54,255,0)
(15,63,0)
(138,63,0)
(13,63,0)
(45,70,0)
(208,9,0)
(224,63,0)
(194,247,0)
(227,243,0)
(30,124,0)
(16,213,0)
(135,202,0)
(240,175,0)
(58,236,0)
(112,227,0)
(219,218,0)
(146,185,0)
(126,156,0)
(217,63,0)
(226,141,0)
(229,39,0)
(88,241,0)
(122,63,0)
(16,124,0)
(56,63,0)
(176,34,0)
(26,36,0)
(138,2,0)
(150,172,0)
(100,108,0)
(152,15,0)
(229,259,0)
(36,267,0)
(245,36,0)
(151,84,0)
(127,122,0)
(185,146,0)
(78,13,0)
(23,135,0)
(10,71,0)
(178,259,0)
(26,63,0)
(141,260,0)
(196,81,0)
(246,36,0)
(148,64,0)
(128,220,0)
(145,31,0)
(33,262,0)
(262,63,0)
(216,198,0)
(159,63,0)
(39,229,0)
(57,207,0)
(84,241,0)
(130,13,0)
(50,129,0)
(161,156,0)
(48,2,0)
(185,226,0)
(118,122,0)
(262,106,0)
(241,98,0)
(109,260,0)
(106,182,0)
(244,259,0)
(180,63,0)
(97,220,0)
(146,218,0)
(193,63,0)
(238,161,0)
(7,224,0)
(61,255,0)
(9,26,0)
(104,197,0)
(64,148,0)
(212,57,0)
(261,141,0)
(106,262,0)
(162,63,0)
(27,70,0)
(218,146,0)
(163,111,0)
(153,138,0)
(225,63,0)
(8,253,0)
(188,247,0)
(119,34,0)
(88,259,0)
(168,161,0)
(183,143,0)
(36,26,0)
(25,63,0)
(55,86,0)
(220,201,0)
(59,2,0)
(124,201,0)
(86,259,0)
(131,63,0)
(177,63,0)
(60,201,0)
(60,211,0)
(13,31,0)
(253,8,0)
(20,201,0)
(98,262,0)
(101,215,0)
(186,143,0)
(49,122,0)
(189,5,0)
(135,63,0)
(82,115,0)
(206,144,0)
(255,262,0)
(263,67,0)
(222,77,0)
(122,49,0)
(16,189,0)
(192,233,0)
(238,34,0)
(77,38,0)
(257,161,0)
(62,63,0)
(191,63,0)
(69,63,0)
(134,98,0)
(224,175,0)
(86,228,0)
(221,185,0)
(17,227,0)
(137,49,0)
(146,63,0)
(24,207,0)
(226,63,0)
(123,99,0)
(252,259,0)
(158,9,0)
(172,243,0)
(132,29,0)
(140,38,0)
(42,263,0)
(80,226,0)
(91,63,0)
(85,93,0)
(6,252,0)
(201,63,0)
(209,15,0)
(108,29,0)
(74,180,0)
(66,137,0)
(238,143,0)
(259,88,0)
(51,148,0)
(115,8,0)
(36,246,0)
(44,70,0)
(161,32,0)
(238,196,0)
(228,63,0)
(37,219,0)
(129,25,0)
(213,235,0)
(38,77,0)
(156,63,0)
(15,209,0)
(197,123,0)
(249,137,0)
(239,227,0)
(181,38,0)
(214,131,0)
(81,63,0)
(228,86,0)
(105,71,0)
(157,180,0)
(98,241,0)
(19,199,0)
(13,250,0)
(25,244,0)
(106,72,0)
(105,63,0)
(244,25,0)
(139,224,0)
(31,13,0)
(233,190,0)
(108,99,0)
(107,98,0)
(46,252,0)
(223,130,0)
(147,224,0)
(8,115,0)
(143,22,0)
(52,39,0)
(116,219,0)
(201,57,0)
(139,67,0)
(96,198,0)
(198,235,0)
(164,189,0)
(255,105,0)
(136,86,0)
(2,138,0)
(149,139,0)
(204,213,0)
(72,106,0)
(16,238,0)
(87,138,0)
(154,123,0)
(238,129,0)
(93,123,0)
(13,130,0)
(125,64,0)
(173,38,0)
(83,188,0)
(43,175,0)
(16,172,0)
(232,198,0)
(81,252,0)
(144,63,0)
(210,196,0)
(84,123,0)
(68,60,0)
(1,129,0)
(179,263,0)
(240,215,0)
(189,93,0)
(73,238,0)
(21,71,0)
(241,84,0)
(241,88,0)
(36,245,0)
(238,93,0)
(260,63,0)
(121,63,0)
(258,245,0)
(49,137,0)
(87,262,0)
(12,236,0)
(14,108,0)
(175,240,0)
(75,26,0)
(110,87,0)
(143,32,0)
(165,209,0)
(117,64,0)
(124,211,0)
(175,63,0)
(105,255,0)
(40,115,0)
(237,63,0)
(3,231,0)
(238,163,0)
(35,84,0)
(115,250,0)
(265,198,0)
(238,263,0)
(218,219,0)
(180,250,0)
(230,22,0)
(76,246,0)
(166,146,0)
(174,36,0)
(256,180,0)
(247,63,0)
(60,201,1)
(205,110,1)
(151,35,1)
(42,224,1)
(44,39,1)
(255,262,1)
(173,181,1)
(138,153,1)
(206,260,1)
(24,0,1)
(108,254,1)
(98,262,1)
(112,199,1)
(57,207,1)
(141,261,1)
(197,266,1)
(105,71,1)
(180,250,1)
(47,90,1)
(94,195,1)
(224,175,1)
(167,33,1)
(126,161,1)
(171,255,1)
(261,80,1)
(38,267,1)
(207,24,1)
(219,37,1)
(122,118,1)
(127,49,1)
(36,267,1)
(150,227,1)
(170,109,1)
(178,123,1)
(22,230,1)
(49,137,1)
(166,185,1)
(236,32,1)
(185,221,1)
(1,228,1)
(152,13,1)
(229,53,1)
(254,29,1)
(246,76,1)
(244,47,1)
(238,161,1)
(86,136,1)
(158,26,1)
(228,86,1)
(143,186,1)
(212,207,1)
(201,57,1)
(220,97,1)
(84,151,1)
(41,43,1)
(2,59,1)
(172,150,1)
(52,229,1)
(60,68,1)
(252,259,1)
(180,74,1)
(255,54,1)
(12,242,1)
(199,19,1)
(199,262,1)
(132,94,1)
(244,259,1)
(203,85,1)
(16,233,1)
(21,10,1)
(55,163,1)
(87,262,1)
(73,115,1)
(67,139,1)
(16,213,1)
(123,154,1)
(169,17,1)
(238,34,1)
(197,123,1)
(209,197,1)
(68,11,1)
(119,176,1)
(214,236,1)
(53,4,1)
(19,251,1)
(138,2,1)
(227,239,1)
(238,196,1)
(196,32,1)
(194,188,1)
(133,140,1)
(218,219,1)
(188,32,1)
(230,143,1)
(266,104,1)
(14,51,1)
(141,260,1)
(30,60,1)
(210,25,1)
(34,119,1)
(17,112,1)
(124,30,1)
(231,3,1)
(189,93,1)
(50,1,1)
(264,39,1)
(157,146,1)
(140,184,1)
(48,247,1)
(37,116,1)
(256,157,1)
(221,218,1)
(10,138,1)
(224,147,1)
(70,45,1)
(241,84,1)
(239,169,1)
(262,106,1)
(26,36,1)
(154,93,1)
(36,245,1)
(208,158,1)
(153,87,1)
(161,32,1)
(186,183,1)
(100,14,1)
(226,141,1)
(71,21,1)
(38,77,1)
(233,192,1)
(8,95,1)
(75,187,1)
(247,194,1)
(25,244,1)
(183,81,1)
(29,132,1)
(238,163,1)
(102,226,1)
(106,72,1)
(156,126,1)
(248,83,1)
(252,46,1)
(82,40,1)
(15,209,1)
(129,32,1)
(34,32,1)
(238,129,1)
(118,127,1)
(57,212,1)
(263,179,1)
(135,202,1)
(179,42,1)
(260,170,1)
(232,9,1)
(147,7,1)
(16,189,1)
(238,188,1)
(43,105,1)
(178,51,1)
(13,31,1)
(57,250,1)
(174,114,1)
(9,26,1)
(39,229,1)
(80,67,1)
(139,224,1)
(115,250,1)
(200,222,1)
(131,214,1)
(149,263,1)
(76,245,1)
(103,220,1)
(39,52,1)
(187,267,1)
(54,61,1)
(238,236,1)
(265,232,1)
(88,241,1)
(84,123,1)
(238,143,1)
(9,208,1)
(61,71,1)
(257,131,1)
(145,130,1)
(7,175,1)
(238,93,1)
(188,248,1)
(3,113,1)
(109,262,1)
(124,201,1)
(195,100,1)
(163,264,1)
(78,180,1)
(92,23,1)
(168,257,1)
(104,152,1)
(46,6,1)
(146,218,1)
(98,107,1)
(175,240,1)
(83,156,1)
(16,124,1)
(204,198,1)
(146,166,1)
(192,38,1)
(115,8,1)
(181,187,1)
(120,34,1)
(236,58,1)
(258,174,1)
(185,226,1)
(144,89,1)
(129,50,1)
(143,32,1)
(164,70,1)
(138,87,1)
(0,20,1)
(113,103,1)
(187,231,1)
(35,98,1)
(27,44,1)
(31,145,1)
(74,256,1)
(45,79,1)
(116,122,1)
(189,164,1)
(222,133,1)
(251,144,1)
(142,220,1)
(128,201,1)
(36,246,1)
(241,98,1)
(136,55,1)
(66,249,1)
(134,178,1)
(259,88,1)
(107,134,1)
(97,128,1)
(176,22,1)
(8,253,1)
(202,92,1)
(106,167,1)
(95,82,1)
(122,49,1)
(64,117,1)
(16,238,1)
(215,101,1)
(96,216,1)
(146,185,1)
(238,263,1)
(130,223,1)
(229,259,1)
(87,205,1)
(51,148,1)
(86,259,1)
(216,265,1)
(58,12,1)
(40,15,1)
(36,182,1)
(11,160,1)
(161,168,1)
(77,200,1)
(93,203,1)
(110,2,1)
(13,130,1)
(13,250,1)
(23,102,1)
(79,27,1)
(117,125,1)
(125,9,1)
(242,120,1)
(106,182,1)
(196,18,1)
(114,75,1)
(4,259,1)
(249,135,1)
(160,142,1)
(223,78,1)
(148,64,1)
(90,129,1)
(59,48,1)
(108,29,1)
(6,196,1)
(198,96,1)
(89,206,1)
(163,111,1)
(209,165,1)
(20,199,1)
(238,73,1)
(105,171,1)
(137,66,1)
(8,15,1)
(101,41,1)
(240,215,1)
(81,252,1)
(85,108,1)
(18,210,1)
(16,172,1)
(184,173,1)
(245,258,1)
(105,255,1)
(220,201,1)
(213,204,1)
(139,149,1)
(102,39,2)
(7,39,2)
(43,39,2)
(8,253,2)
(148,64,2)
(64,9,2)
(92,39,2)
(135,39,2)
(86,259,2)
(161,32,2)
(224,175,2)
(16,238,2)
(139,224,2)
(35,9,2)
(189,39,2)
(240,39,2)
(57,199,2)
(168,39,2)
(81,39,2)
(151,9,2)
(79,39,2)
(199,262,2)
(241,9,2)
(241,98,2)
(3,220,2)
(57,250,2)
(248,39,2)
(67,139,2)
(54,39,2)
(103,220,2)
(238,263,2)
(39,9,2)
(36,187,2)
(238,34,2)
(238,143,2)
(238,39,2)
(208,187,2)
(44,39,2)
(78,39,2)
(264,39,2)
(87,39,2)
(45,39,2)
(131,39,2)
(93,51,2)
(105,39,2)
(115,8,2)
(196,39,2)
(122,39,2)
(238,93,2)
(233,187,2)
(105,255,2)
(58,39,2)
(123,51,2)
(256,39,2)
(229,9,2)
(161,39,2)
(12,39,2)
(207,199,2)
(202,39,2)
(147,39,2)
(141,39,2)
(98,9,2)
(38,187,2)
(116,39,2)
(157,39,2)
(247,39,2)
(175,240,2)
(242,39,2)
(266,39,2)
(8,39,2)
(226,141,2)
(85,51,2)
(16,233,2)
(1,39,2)
(185,226,2)
(178,9,2)
(67,39,2)
(224,39,2)
(68,220,2)
(70,39,2)
(209,39,2)
(16,213,2)
(244,39,2)
(238,188,2)
(255,262,2)
(259,88,2)
(38,267,2)
(138,39,2)
(186,39,2)
(134,9,2)
(41,39,2)
(220,201,2)
(174,187,2)
(222,187,2)
(212,199,2)
(36,182,2)
(184,187,2)
(163,111,2)
(262,106,2)
(14,51,2)
(146,39,2)
(37,39,2)
(115,39,2)
(86,39,2)
(145,39,2)
(259,9,2)
(81,252,2)
(26,187,2)
(136,39,2)
(150,199,2)
(24,199,2)
(129,39,2)
(238,196,2)
(120,39,2)
(257,39,2)
(180,250,2)
(119,39,2)
(127,39,2)
(231,220,2)
(229,259,2)
(249,39,2)
(122,49,2)
(210,39,2)
(48,39,2)
(106,182,2)
(13,130,2)
(214,39,2)
(105,71,2)
(100,51,2)
(52,9,2)
(180,39,2)
(15,209,2)
(36,245,2)
(188,32,2)
(55,39,2)
(112,199,2)
(200,187,2)
(84,9,2)
(129,32,2)
(13,39,2)
(126,39,2)
(218,39,2)
(172,199,2)
(181,187,2)
(128,199,2)
(138,87,2)
(124,220,2)
(9,26,2)
(203,51,2)
(197,123,2)
(95,39,2)
(263,39,2)
(82,39,2)
(59,39,2)
(194,39,2)
(198,9,2)
(209,165,2)
(240,215,2)
(18,39,2)
(238,161,2)
(236,32,2)
(209,197,2)
(47,39,2)
(25,244,2)
(238,236,2)
(227,199,2)
(205,39,2)
(76,187,2)
(258,187,2)
(195,51,2)
(238,129,2)
(130,39,2)
(0,199,2)
(160,220,2)
(113,220,2)
(16,124,2)
(265,9,2)
(74,39,2)
(21,39,2)
(216,9,2)
(125,9,2)
(166,39,2)
(149,39,2)
(31,39,2)
(183,39,2)
(137,39,2)
(141,260,2)
(201,57,2)
(139,39,2)
(4,9,2)
(108,51,2)
(236,39,2)
(143,39,2)
(88,241,2)
(22,39,2)
(60,201,2)
(110,39,2)
(228,86,2)
(51,148,2)
(98,262,2)
(228,39,2)
(173,187,2)
(187,267,2)
(97,199,2)
(50,39,2)
(204,9,2)
(90,39,2)
(232,9,2)
(176,39,2)
(138,2,2)
(223,39,2)
(163,39,2)
(25,39,2)
(156,39,2)
(34,32,2)
(244,259,2)
(140,187,2)
(219,39,2)
(117,9,2)
(53,9,2)
(39,229,2)
(61,39,2)
(27,39,2)
(154,51,2)
(115,250,2)
(6,39,2)
(104,39,2)
(20,199,2)
(51,9,2)
(9,187,2)
(83,39,2)
(143,32,2)
(17,199,2)
(153,39,2)
(15,39,2)
(75,187,2)
(187,231,2)
(87,262,2)
(215,39,2)
(185,39,2)
(133,187,2)
(36,267,2)
(77,187,2)
(106,72,2)
(108,29,2)
(252,259,2)
(10,39,2)
(197,39,2)
(241,84,2)
(36,246,2)
(2,39,2)
(94,51,2)
(49,39,2)
(188,39,2)
(80,39,2)
(213,9,2)
(261,39,2)
(192,187,2)
(246,187,2)
(221,39,2)
(255,39,2)
(124,201,2)
(23,39,2)
(245,187,2)
(201,199,2)
(114,187,2)
(8,15,2)
(196,32,2)
(16,172,2)
(42,39,2)
(40,39,2)
(60,220,2)
(230,39,2)
(152,39,2)
(164,39,2)
(57,207,2)
(189,93,2)
(88,9,2)
(34,39,2)
(30,220,2)
(132,51,2)
(175,39,2)
(16,189,2)
(38,77,2)
(169,199,2)
(135,202,2)
(118,39,2)
(13,250,2)
(29,51,2)
(254,51,2)
(101,39,2)
(66,39,2)
(13,31,2)
(96,9,2)
(220,199,2)
(226,39,2)
(46,39,2)
(187,220,2)
(238,163,2)
(71,39,2)
(171,39,2)
(142,220,2)
(26,36,2)
(179,39,2)
(148,9,2)
(146,218,2)
(49,137,2)
(218,219,2)
(84,123,2)
(73,39,2)
(158,187,2)
(146,185,2)
(252,39,2)
(239,199,2)
(107,9,2)
(11,220,2)
-----------------------------------
(0,vosDataBuff)
(1,tlMetaInfo)
(2,w8023Header.vDA)
(3,phyLinkHandle)
(4,pLogLinkContext)
(5,)
(6,pLogLinkContext)
(7,headerLength)
(8,(v_VOID_t *)
(9,VOS_STATUS_SUCCESS != vosStatus)
(10,w8023Header)
(11,"WLAN BAP: Failed to pop HCI ACL header from packet %d")
(12,tlMetaInfo)
(13,vos_pkt_push_head(vosDataBuff, &w8023Header, sizeof(w8023Header)
(14,VOS_MODULE_ID_BAP)
(15,value = (uintptr_t)
(16,RET)
(17,VOS_TRACE_LEVEL_ERROR)
(18,ucUP)
(19,pBtampCtx)
(20,vosStatus)
(21,vSA)
(22,tlMetaInfo->ucIsEapol = VOS_FALSE)
(23,WLANBAP_LLC_HEADER)
(24,hciACLHeader)
(25,tlMetaInfo->ucTID = pLogLinkContext->ucTID)
(26,vosStatus = WLANBAP_GetStaIdFromLinkCtx (\n\\n            btampHandle,  /* btampHandle value in  */\n\\n            phy_link_handle,  /* phy_link_handle value in */\n\\n            &ucSTAId,  /* The StaId (used by TL, PE, and HAL)
(27,VOS_TRACE_LEVEL_ERROR)
(28,headerLength)
(29,hciACLHeader.logLinkHandle)
(30,vosStatus)
(31,sizeof(w8023Header)
(32,WLANTL_MetaInfoType  *tlMetaInfo)
(33,pBtampCtx)
(34,tlMetaInfo->ucDisableFrmXtl)
(35,hciACLHeader)
(36,WLANBAP_GetStaIdFromLinkCtx (\n\\n            btampHandle,  /* btampHandle value in  */\n\\n            phy_link_handle,  /* phy_link_handle value in */\n\\n            &ucSTAId,  /* The StaId (used by TL, PE, and HAL)
(37,WLANBAP_LLC_PROTO_TYPE_OFFSET)
(38,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                "WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d",\n\\n                __func__, phy_link_handle, hciACLHeader.phyLinkHandle)
(39,pLogLinkContext->present != VOS_TRUE)
(40,vosDataBuff)
(41,hciACLHeader)
(42,w8023Header)
(43,headerLength)
(44,VOS_MODULE_ID_BAP)
(45,__func__)
(46,ucUP)
(47,ucTID)
(48,w8023Header)
(49,&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET])
(50,ucTID)
(51,!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle)
(52,VOS_TRUE)
(53,present)
(54,self_mac_addr)
(55,pLogLinkContext)
(56,w8023Header)
(57,vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN)
(58,ucBcast)
(59,vDA)
(60,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                  "WLAN BAP: Failed to pop HCI ACL header from packet %d",\n\\n                  vosStatus)
(61,pBtampCtx)
(62,protoType)
(63,)
(64,hciACLHeader.logLinkHandle)
(65,pBtampCtx)
(66,WLANBAP_LLC_OUI_OFFSET)
(67,w8023Header.usLenType = vos_cpu_to_be16(headerLength)
(68,vosStatus)
(69,aucLLCHeader)
(70,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                "WLAN BAP: Invalid logical link entry in %s",\n\\n                __func__)
(71,w8023Header.vSA)
(72,ptBtampContext)
(73,VOS_STATUS_SUCCESS)
(74,WLANBAP_LLC_HEADER_LEN)
(75,vosStatus)
(76,pHddHdl)
(77,hciACLHeader.phyLinkHandle)
(78,vosDataBuff)
(79,"WLAN BAP: Invalid logical link entry in %s")
(80,protoType)
(81,tlMetaInfo->ucUP = pLogLinkContext->ucUP)
(82,VOS_PKT_USER_DATA_ID_BAP)
(83,tlMetaInfo)
(84,hciACLHeader.logLinkHandle)
(85,hciACLHeader)
(86,pLogLinkContext->btampAC)
(87,pBtampCtx->peer_mac_addr)
(88,&(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ])
(89,0)
(90,pLogLinkContext)
(91,if ( pLogLinkContext->present != VOS_TRUE)
(92,WLANBAP_LLC_HEADER)
(93,hciACLHeader.logLinkHandle)
(94,hciACLHeader)
(95,value)
(96,__func__)
(97,vosStatus)
(98,pBtampCtx->btampLogLinkCtx)
(99,)
(100,VOS_TRACE_LEVEL_ERROR)
(101,dataLength)
(102,aucLLCHeader)
(103,phy_link_handle)
(104,hciACLHeader)
(105,vos_mem_copy( w8023Header.vSA, pBtampCtx->self_mac_addr, VOS_MAC_ADDR_SIZE)
(106,(ptBtampContext)
(107,btampLogLinkCtx)
(108,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                "WLAN BAP: Invalid logical link handle (%d)
(109,protoType)
(110,pBtampCtx)
(111,WLANTL_ACEnumType    *pucAC)
(112,VOS_MODULE_ID_BAP)
(113,hciACLHeader)
(114,btampHandle)
(115,vos_pkt_set_user_data_ptr( vosDataBuff, VOS_PKT_USER_DATA_ID_BAP,\n\\n                               (v_VOID_t *)
(116,aucLLCHeader)
(117,logLinkHandle)
(118,WLANBAP_LLC_OUI_SIZE)
(119,ucDisableFrmXtl)
(120,VOS_FALSE)
(121,if ( NULL == pBtampCtx)
(122,vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_OUI_OFFSET],\n\\n            WLANBAP_BT_AMP_OUI,\n\\n            WLANBAP_LLC_OUI_SIZE)
(123,hciACLHeader.logLinkHandle = 1)
(124,return vosStatus;)
(125,hciACLHeader)
(126,VOS_FALSE)
(127,WLANBAP_BT_AMP_OUI)
(128,VOS_STATUS_SUCCESS)
(129,tlMetaInfo->ucTID)
(130,&w8023Header)
(131,tlMetaInfo->ucBcast = VOS_FALSE)
(132,logLinkHandle)
(133,phy_link_handle)
(134,pBtampCtx)
(135,vos_mem_copy(aucLLCHeader,\n\\n            WLANBAP_LLC_HEADER,\n\\n            sizeof(WLANBAP_LLC_HEADER)
(136,btampAC)
(137,aucLLCHeader[WLANBAP_LLC_OUI_OFFSET])
(138,vos_mem_copy( w8023Header.vDA, pBtampCtx->peer_mac_addr, VOS_MAC_ADDR_SIZE)
(139,vos_cpu_to_be16(headerLength)
(140,__func__)
(141,vos_cpu_to_be16( protoType)
(142,VOS_MODULE_ID_BAP)
(143,tlMetaInfo->ucIsEapol)
(144,value = 0)
(145,w8023Header)
(146,vos_mem_copy(&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET],\n\\n            &protoType,  //WLANBAP_BT_AMP_TYPE_DATA\n\\n            WLANBAP_LLC_PROTO_TYPE_SIZE)
(147,WLANBAP_LLC_HEADER_LEN)
(148,BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle)
(149,headerLength)
(150,VOS_STATUS_E_FAULT)
(151,logLinkHandle)
(152,value)
(153,VOS_MAC_ADDR_SIZE)
(154,1)
(155,value)
(156,tlMetaInfo->ucMcast = VOS_FALSE)
(157,vosDataBuff)
(158,VOS_STATUS_SUCCESS)
(159,pHddHdl)
(160,VOS_TRACE_LEVEL_ERROR)
(161,tlMetaInfo->ucMcast)
(162,ucSTAId)
(163,*pucAC)
(164,VOS_STATUS_E_INVAL)
(165,uintptr_t)
(166,WLANBAP_LLC_PROTO_TYPE_SIZE)
(167,btampHandle)
(168,ucMcast)
(169,"Invalid BAP handle value in %s")
(170,WLANBAP_BT_AMP_TYPE_DATA)
(171,VOS_MAC_ADDR_SIZE)
(172,return VOS_STATUS_E_FAULT;)
(173,VOS_TRACE_LEVEL_ERROR)
(174,phy_link_handle)
(175,headerLength = vos_le16_to_cpu(hciACLHeader.dataLength)
(176,tlMetaInfo)
(177,if ( VOS_STATUS_SUCCESS != vosStatus )
(178,pLogLinkContext)
(179,usLenType)
(180,vos_pkt_push_head(vosDataBuff,\n\\n            aucLLCHeader,\n\\n            WLANBAP_LLC_HEADER_LEN)
(181,VOS_MODULE_ID_BAP)
(182,ptBtampHandle     btampHandle)
(183,tlMetaInfo)
(184,"WLAN BAP: phy_link_handle mismatch in %s phy_link_handle=%d hciACLHeader.phyLinkHandle=%d")
(185,&protoType)
(186,ucIsEapol)
(187,phy_link_handle != hciACLHeader.phyLinkHandle)
(188,tlMetaInfo->ucType)
(189,return VOS_STATUS_E_INVAL;)
(190,)
(191,if (!BTAMP_VALID_LOG_LINK( hciACLHeader.logLinkHandle)
(192,VOS_STATUS_E_INVAL)
(193,if ( VOS_STATUS_SUCCESS != vosStatus )
(194,0x00)
(195,"WLAN BAP: Invalid logical link handle (%d)
(196,tlMetaInfo->ucUP)
(197,hciACLHeader.logLinkHandle)
(198,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,\n\\n                     "Unable to retrieve STA Id from BAP context and phy_link_handle in %s", __func__)
(199,NULL == pBtampCtx)
(200,phyLinkHandle)
(201,vosStatus = vos_pkt_pop_head( vosDataBuff, &hciACLHeader, WLANBAP_HCI_ACL_HEADER_LEN)
(202,sizeof(WLANBAP_LLC_HEADER)
(203,logLinkHandle)
(204,VOS_STATUS_E_FAULT)
(205,peer_mac_addr)
(206,value)
(207,&hciACLHeader)
(208,vosStatus)
(209,(uintptr_t)
(210,tlMetaInfo)
(211,)
(212,WLANBAP_HCI_ACL_HEADER_LEN)
(213,return VOS_STATUS_E_FAULT;)
(214,VOS_FALSE)
(215,hciACLHeader.dataLength)
(216,"Unable to retrieve STA Id from BAP context and phy_link_handle in %s")
(217,pLogLinkContext)
(218,&aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET])
(219,aucLLCHeader[WLANBAP_LLC_PROTO_TYPE_OFFSET])
(220,VOS_STATUS_SUCCESS != vosStatus)
(221,protoType)
(222,hciACLHeader)
(223,w8023Header)
(224,headerLength += WLANBAP_LLC_HEADER_LEN)
(225,if ( phy_link_handle != hciACLHeader.phyLinkHandle )
(226,protoType = vos_cpu_to_be16( protoType)
(227,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                     "Invalid BAP handle value in %s", __func__)
(228,*pucAC = pLogLinkContext->btampAC)
(229,pLogLinkContext->present)
(230,VOS_FALSE)
(231,hciACLHeader.phyLinkHandle)
(232,VOS_MODULE_ID_BAP)
(233,return VOS_STATUS_E_INVAL;)
(234,hciACLHeader)
(235,)
(236,tlMetaInfo->ucBcast)
(237,vosStatus)
(238,return VOS_STATUS_SUCCESS;)
(239,__func__)
(240,vos_le16_to_cpu(hciACLHeader.dataLength)
(241,pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ])
(242,tlMetaInfo->ucDisableFrmXtl = VOS_FALSE)
(243,)
(244,pLogLinkContext->ucTID)
(245,&ucSTAId)
(246,&pHddHdl)
(247,tlMetaInfo->ucType = 0x00)
(248,ucType)
(249,aucLLCHeader)
(250,vos_pkt_t        *vosDataBuff)
(251,NULL)
(252,pLogLinkContext->ucUP)
(253,v_VOID_t *)
(254,__func__)
(255,pBtampCtx->self_mac_addr)
(256,aucLLCHeader)
(257,tlMetaInfo)
(258,ucSTAId)
(259,pLogLinkContext = &(pBtampCtx->btampLogLinkCtx[ hciACLHeader.logLinkHandle ])
(260,protoType = WLANBAP_BT_AMP_TYPE_DATA)
(261,protoType)
(262,pBtampCtx = (ptBtampContext)
(263,w8023Header.usLenType)
(264,pucAC)
(265,VOS_TRACE_LEVEL_INFO)
(266,logLinkHandle)
(267,v_U8_t            phy_link_handle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^