-----label-----
0
-----code-----
static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
		unsigned int event)
{
	int rc;
	struct cpufreq_interactive_policyinfo *ppol;
	struct cpufreq_frequency_table *freq_table;
	struct cpufreq_interactive_tunables *tunables;
	unsigned long flags;

	if (have_governor_per_policy())
		tunables = policy->governor_data;
	else
		tunables = common_tunables;

	BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));

	switch (event) {
	case CPUFREQ_GOV_POLICY_INIT:
		ppol = get_policyinfo(policy);
		if (IS_ERR(ppol))
			return PTR_ERR(ppol);

		if (have_governor_per_policy()) {
			WARN_ON(tunables);
		} else if (tunables) {
			tunables->usage_count++;
			policy->governor_data = tunables;
			return 0;
		}

		tunables = get_tunables(ppol);
		if (!tunables) {
			tunables = alloc_tunable(policy);
			if (IS_ERR(tunables))
				return PTR_ERR(tunables);
		}

		tunables->usage_count = 1;
		policy->governor_data = tunables;
		if (!have_governor_per_policy()) {
			WARN_ON(cpufreq_get_global_kobject());
			common_tunables = tunables;
		}

		rc = sysfs_create_group(get_governor_parent_kobj(policy),
				get_sysfs_attr());
		if (rc) {
			kfree(tunables);
			policy->governor_data = NULL;
			if (!have_governor_per_policy()) {
				common_tunables = NULL;
				cpufreq_put_global_kobject();
			}
			return rc;
		}

		if (!policy->governor->initialized)
			cpufreq_register_notifier(&cpufreq_notifier_block,
					CPUFREQ_TRANSITION_NOTIFIER);

		if (tunables->use_sched_load)
			cpufreq_interactive_enable_sched_input(tunables);

		if (have_governor_per_policy())
			ppol->cached_tunables = tunables;
		else
			cached_common_tunables = tunables;

		break;

	case CPUFREQ_GOV_POLICY_EXIT:
		if (!--tunables->usage_count) {
			if (policy->governor->initialized == 1)
				cpufreq_unregister_notifier(&cpufreq_notifier_block,
						CPUFREQ_TRANSITION_NOTIFIER);

			sysfs_remove_group(get_governor_parent_kobj(policy),
					get_sysfs_attr());
			if (!have_governor_per_policy())
				cpufreq_put_global_kobject();
			common_tunables = NULL;
		}

		policy->governor_data = NULL;

		if (tunables->use_sched_load)
			cpufreq_interactive_disable_sched_input(tunables);

		break;

	case CPUFREQ_GOV_START:
		mutex_lock(&gov_lock);

		freq_table = cpufreq_frequency_get_table(policy->cpu);
		if (!tunables->hispeed_freq)
			tunables->hispeed_freq = policy->max;

		ppol = per_cpu(polinfo, policy->cpu);
		ppol->policy = policy;
		ppol->target_freq = policy->cur;
		ppol->freq_table = freq_table;
		ppol->floor_freq = ppol->target_freq;
		ppol->floor_validate_time = ktime_to_us(ktime_get());
		ppol->hispeed_validate_time = ppol->floor_validate_time;
		ppol->min_freq = policy->min;
		ppol->reject_notification = true;
		down_write(&ppol->enable_sem);
		del_timer_sync(&ppol->policy_timer);
		del_timer_sync(&ppol->policy_slack_timer);
		ppol->policy_timer.data = policy->cpu;
		ppol->last_evaluated_jiffy = get_jiffies_64();
		cpufreq_interactive_timer_start(tunables, policy->cpu);
		ppol->governor_enabled = 1;
		up_write(&ppol->enable_sem);
		ppol->reject_notification = false;

		mutex_unlock(&gov_lock);
		break;

	case CPUFREQ_GOV_STOP:
		mutex_lock(&gov_lock);

		ppol = per_cpu(polinfo, policy->cpu);
		ppol->reject_notification = true;
		down_write(&ppol->enable_sem);
		ppol->governor_enabled = 0;
		ppol->target_freq = 0;
		del_timer_sync(&ppol->policy_timer);
		del_timer_sync(&ppol->policy_slack_timer);
		up_write(&ppol->enable_sem);
		ppol->reject_notification = false;

		mutex_unlock(&gov_lock);
		break;

	case CPUFREQ_GOV_LIMITS:
		__cpufreq_driver_target(policy,
				policy->cur, CPUFREQ_RELATION_L);

		ppol = per_cpu(polinfo, policy->cpu);

		down_read(&ppol->enable_sem);
		if (ppol->governor_enabled) {
			spin_lock_irqsave(&ppol->target_freq_lock, flags);
			if (policy->max < ppol->target_freq)
				ppol->target_freq = policy->max;
			else if (policy->min > ppol->target_freq)
				ppol->target_freq = policy->min;
			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);

			if (policy->min < ppol->min_freq)
				cpufreq_interactive_timer_resched(policy->cpu,
								  true);
			ppol->min_freq = policy->min;
		}

		up_read(&ppol->enable_sem);

		break;
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
16,17
17,18
17,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
45,46
47,48
47,49
47,50
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
69,71
70,71
71,72
73,74
74,75
74,76
75,76
77,78
79,80
79,81
80,81
82,83
82,84
82,85
82,86
82,87
82,88
82,89
82,90
82,91
82,92
82,93
82,94
82,95
82,96
82,97
82,98
82,99
82,100
82,101
82,102
82,103
82,104
82,105
82,106
82,107
82,108
82,109
82,110
82,111
82,112
82,113
82,114
82,115
82,116
82,117
82,118
82,119
82,120
82,121
82,122
82,123
82,124
82,125
82,126
82,127
82,128
82,129
82,130
82,131
82,132
82,133
82,134
82,135
82,136
82,137
82,138
82,139
82,140
82,141
82,142
82,143
82,144
82,145
82,146
83,84
84,85
86,87
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
107,109
107,110
108,109
109,110
111,112
112,113
113,114
113,115
114,115
116,117
118,119
118,120
119,120
121,122
121,123
121,124
122,123
123,124
124,125
124,126
125,126
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
138,139
139,140
139,141
140,141
142,143
142,144
143,144
145,146
147,148
147,149
148,149
149,150
151,152
151,153
152,153
153,154
153,155
154,155
156,157
156,158
157,158
159,160
161,162
161,163
162,163
162,164
163,164
165,166
167,168
168,169
168,170
169,170
171,172
173,174
174,175
174,176
175,176
175,177
176,177
180,181
181,182
181,183
182,183
182,184
183,184
186,187
188,189
188,190
189,190
190,191
191,192
193,194
193,195
194,195
195,196
195,197
196,197
198,199
199,200
201,202
202,203
202,204
203,204
205,206
207,208
208,209
208,210
209,210
211,212
211,213
211,214
212,213
214,215
214,216
215,216
217,218
219,220
220,221
222,223
222,224
223,224
225,226
225,227
225,228
225,229
226,227
227,228
227,229
228,229
230,231
232,233
233,234
233,235
234,235
234,236
235,236
238,239
240,241
240,242
241,242
242,243
243,244
245,246
245,247
246,247
247,248
247,249
248,249
250,251
252,253
253,254
254,255
256,257
257,258
259,260
259,261
260,261
261,262
261,263
262,263
262,264
263,264
267,268
268,269
268,270
268,271
269,270
271,272
272,273
274,275
276,277
276,278
277,278
277,279
278,279
281,282
282,283
282,284
283,284
285,286
287,288
287,289
287,290
288,289
289,290
291,292
292,293
292,294
293,294
293,295
294,295
297,298
299,300
300,301
300,302
301,302
303,304
306,307
307,308
309,310
309,311
310,311
311,312
312,313
312,314
313,314
316,317
316,318
316,319
316,320
317,318
317,319
318,319
318,320
319,320
319,321
320,321
320,322
321,322
326,327
327,328
327,329
327,330
328,329
330,331
331,332
333,334
335,336
336,337
336,338
336,339
337,338
339,340
339,341
340,341
342,343
344,345
345,346
347,348
347,349
348,349
349,350
350,351
352,353
353,354
354,355
356,357
357,358
357,359
358,359
360,361
362,363
363,364
363,365
364,365
364,366
365,366
368,369
370,371
370,372
371,372
371,373
372,373
375,376
376,377
376,378
377,378
379,380
382,383
383,384
385,386
386,387
386,388
387,388
389,390
390,391
390,392
393,394
394,395
394,396
395,396
397,398
397,399
398,399
400,401
400,402
401,402
404,405
404,406
405,406
406,407
406,408
407,408
410,411
411,412
411,413
412,413
412,414
413,414
416,417
416,418
417,418
420,421
421,422
421,423
422,423
424,425
424,426
424,427
425,426
427,428
429,430
429,431
430,431
433,434
434,435
434,436
435,436
435,437
436,437
439,440
441,442
442,443
442,444
443,444
443,445
444,445
447,448
447,449
448,449
451,452
452,453
452,454
453,454
453,455
454,455
457,458
459,460
460,461
460,462
461,462
461,463
462,463
465,466
465,467
466,467
469,470
470,471
470,472
471,472
471,473
472,473
475,476
475,477
476,477
478,479
479,480
481,482
482,483
482,484
483,484
483,485
484,485
487,488
487,489
488,489
491,492
492,493
492,494
493,494
493,495
494,495
497,498
497,499
498,499
501,502
502,503
502,504
503,504
503,505
504,505
508,509
509,510
509,511
510,511
512,513
513,514
513,515
514,515
517,518
518,519
518,520
519,520
521,522
522,523
522,524
523,524
526,527
527,528
527,529
528,529
530,531
531,532
531,533
532,533
535,536
536,537
536,538
537,538
537,539
538,539
538,540
539,540
543,544
543,545
544,545
547,548
548,549
548,550
549,550
549,551
550,551
553,554
554,555
556,557
557,558
557,559
557,560
558,559
560,561
562,563
562,564
563,564
566,567
567,568
567,569
568,569
568,570
569,570
573,574
574,575
574,576
575,576
577,578
578,579
578,580
579,580
582,583
583,584
583,585
584,585
584,586
585,586
589,590
590,591
590,592
591,592
593,594
594,595
597,598
598,599
600,601
601,602
601,603
602,603
604,605
605,606
607,608
608,609
608,610
609,610
611,612
611,613
611,614
612,613
614,615
616,617
616,618
617,618
620,621
621,622
621,623
622,623
622,624
623,624
627,628
628,629
628,630
629,630
631,632
632,633
632,634
633,634
636,637
637,638
637,639
638,639
638,640
639,640
643,644
644,645
644,646
645,646
645,647
646,647
650,651
651,652
651,653
652,653
654,655
655,656
655,657
656,657
659,660
660,661
660,662
661,662
663,664
664,665
664,666
665,666
668,669
669,670
669,671
670,671
672,673
673,674
673,675
674,675
677,678
678,679
678,680
679,680
679,681
680,681
684,685
685,686
685,687
686,687
688,689
689,690
692,693
693,694
695,696
696,697
696,698
696,699
696,700
697,698
699,700
701,702
701,703
702,703
705,706
707,708
708,709
708,710
709,710
711,712
711,713
711,714
712,713
714,715
716,717
716,718
717,718
720,721
721,722
721,723
722,723
724,725
725,726
725,727
726,727
729,730
729,731
730,731
730,732
731,732
734,735
734,736
734,737
734,738
734,739
735,736
736,737
736,738
736,739
737,738
739,740
740,741
740,742
741,742
744,745
746,747
746,748
746,749
747,748
747,749
748,749
748,750
749,750
752,753
752,754
753,754
756,757
757,758
757,759
758,759
758,760
759,760
762,763
762,764
763,764
766,767
766,768
767,768
767,769
768,769
768,770
769,770
772,773
772,774
773,774
776,777
777,778
777,779
778,779
778,780
779,780
782,783
782,784
783,784
786,787
787,788
787,789
787,790
788,789
790,791
791,792
791,793
792,793
795,796
797,798
797,799
798,799
798,800
799,800
799,801
800,801
803,804
803,805
804,805
807,808
808,809
808,810
808,811
809,810
811,812
811,813
812,813
816,817
817,818
817,819
818,819
818,820
819,820
822,823
822,824
823,824
826,827
827,828
827,829
828,829
830,831
831,832
831,833
832,833
836,837
-----nextToken-----
2,4,7,9,10,12,14,18,20,24,26,27,31,33,34,38,40,41,44,46,50,54,57,58,62,64,68,72,76,78,81,85,89,92,94,98,100,104,106,110,115,117,120,126,127,132,133,135,137,141,144,146,150,155,158,160,164,166,170,172,177,178,179,184,185,187,192,197,200,204,206,210,213,216,218,221,224,229,231,236,237,239,244,249,251,255,258,264,265,266,270,273,275,279,280,284,286,290,295,296,298,302,304,305,308,314,315,322,323,324,325,329,332,334,338,341,343,346,351,355,359,361,366,367,369,373,374,378,380,381,384,388,391,392,396,399,402,403,408,409,414,415,418,419,423,426,428,431,432,437,438,440,445,446,449,450,455,456,458,463,464,467,468,473,474,477,480,485,486,489,490,495,496,499,500,505,506,507,511,515,516,520,524,525,529,533,534,540,541,542,545,546,551,552,555,559,561,564,565,570,571,572,576,580,581,586,587,588,592,595,596,599,603,606,610,613,615,618,619,624,625,626,630,634,635,640,641,642,647,648,649,653,657,658,662,666,667,671,675,676,681,682,683,687,690,691,694,698,700,703,704,706,710,713,715,718,719,723,727,728,732,733,738,742,743,745,750,751,754,755,760,761,764,765,770,771,774,775,780,781,784,785,789,793,794,796,801,802,805,806,810,813,814,815,820,821,824,825,829,833,834,835,837
-----computeFrom-----
52,53
52,54
60,61
60,62
69,70
69,71
74,75
74,76
87,88
87,89
129,130
129,131
139,140
139,141
153,154
153,155
174,175
174,176
181,182
181,183
202,203
202,204
208,209
208,210
233,234
233,235
247,248
247,249
292,293
292,294
300,301
300,302
318,319
318,320
357,358
357,359
363,364
363,365
394,395
394,396
411,412
411,413
421,422
421,423
434,435
434,436
442,443
442,444
452,453
452,454
460,461
460,462
470,471
470,472
482,483
482,484
492,493
492,494
502,503
502,504
536,537
536,538
548,549
548,550
567,568
567,569
583,584
583,585
608,609
608,610
621,622
621,623
637,638
637,639
644,645
644,646
678,679
678,680
708,709
708,710
747,748
747,749
757,758
757,759
767,768
767,769
777,778
777,779
798,799
798,800
817,818
817,819
-----guardedBy-----
751,765
754,760
750,764
755,761
771,785
774,780
770,784
775,781
801,813
-----guardedByNegation-----
754,780
750,784
755,781
-----lastLexicalUse-----
754,780
755,781
750,784
-----jump-----
754,780
755,781
750,784
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;FunctionDeclarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static int cpufreq_governor_interactive(struct cpufreq_policy *policy,		unsigned int event){	int rc;	struct cpufreq_interactive_policyinfo *ppol;	struct cpufreq_frequency_table *freq_table;	struct cpufreq_interactive_tunables *tunables;	unsigned long flags;	if (have_governor_per_policy())		tunables = policy->governor_data;	else		tunables = common_tunables;	BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));	switch (event) {	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		break;	}	return 0;}
static int
cpufreq_governor_interactive(struct cpufreq_policy *policy,		unsigned int event)
cpufreq_governor_interactive
struct cpufreq_policy *policy
struct cpufreq_policy
cpufreq_policy
*policy
*
policy
unsigned int event
unsigned int
event
event
{	int rc;	struct cpufreq_interactive_policyinfo *ppol;	struct cpufreq_frequency_table *freq_table;	struct cpufreq_interactive_tunables *tunables;	unsigned long flags;	if (have_governor_per_policy())		tunables = policy->governor_data;	else		tunables = common_tunables;	BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));	switch (event) {	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		break;	}	return 0;}
int rc;
int rc;
int
rc
rc
struct cpufreq_interactive_policyinfo *ppol;
struct cpufreq_interactive_policyinfo *ppol;
struct cpufreq_interactive_policyinfo
cpufreq_interactive_policyinfo
*ppol
*
ppol
struct cpufreq_frequency_table *freq_table;
struct cpufreq_frequency_table *freq_table;
struct cpufreq_frequency_table
cpufreq_frequency_table
*freq_table
*
freq_table
struct cpufreq_interactive_tunables *tunables;
struct cpufreq_interactive_tunables *tunables;
struct cpufreq_interactive_tunables
cpufreq_interactive_tunables
*tunables
*
tunables
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
if (have_governor_per_policy())		tunables = policy->governor_data;	else		tunables = common_tunables;
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
tunables = policy->governor_data;
tunables = policy->governor_data
tunables
tunables
policy->governor_data
policy
policy
governor_data
tunables = common_tunables;
tunables = common_tunables
tunables
tunables
common_tunables
common_tunables
BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT));
BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT))
BUG_ON
BUG_ON
!tunables && (event != CPUFREQ_GOV_POLICY_INIT)
!tunables
tunables
tunables
(event != CPUFREQ_GOV_POLICY_INIT)
event != CPUFREQ_GOV_POLICY_INIT
event
event
CPUFREQ_GOV_POLICY_INIT
CPUFREQ_GOV_POLICY_INIT
switch (event) {	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		break;	}
event
event
{	case CPUFREQ_GOV_POLICY_INIT:		ppol = get_policyinfo(policy);		if (IS_ERR(ppol))			return PTR_ERR(ppol);		if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}		tunables = get_tunables(ppol);		if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}		tunables->usage_count = 1;		policy->governor_data = tunables;		if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}		rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());		if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}		if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);		if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);		if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;		break;	case CPUFREQ_GOV_POLICY_EXIT:		if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}		policy->governor_data = NULL;		if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);		break;	case CPUFREQ_GOV_START:		mutex_lock(&gov_lock);		freq_table = cpufreq_frequency_get_table(policy->cpu);		if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;		ppol = per_cpu(polinfo, policy->cpu);		ppol->policy = policy;		ppol->target_freq = policy->cur;		ppol->freq_table = freq_table;		ppol->floor_freq = ppol->target_freq;		ppol->floor_validate_time = ktime_to_us(ktime_get());		ppol->hispeed_validate_time = ppol->floor_validate_time;		ppol->min_freq = policy->min;		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		ppol->policy_timer.data = policy->cpu;		ppol->last_evaluated_jiffy = get_jiffies_64();		cpufreq_interactive_timer_start(tunables, policy->cpu);		ppol->governor_enabled = 1;		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_STOP:		mutex_lock(&gov_lock);		ppol = per_cpu(polinfo, policy->cpu);		ppol->reject_notification = true;		down_write(&ppol->enable_sem);		ppol->governor_enabled = 0;		ppol->target_freq = 0;		del_timer_sync(&ppol->policy_timer);		del_timer_sync(&ppol->policy_slack_timer);		up_write(&ppol->enable_sem);		ppol->reject_notification = false;		mutex_unlock(&gov_lock);		break;	case CPUFREQ_GOV_LIMITS:		__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);		ppol = per_cpu(polinfo, policy->cpu);		down_read(&ppol->enable_sem);		if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}		up_read(&ppol->enable_sem);		break;	}
case CPUFREQ_GOV_POLICY_INIT:
CPUFREQ_GOV_POLICY_INIT
CPUFREQ_GOV_POLICY_INIT
ppol = get_policyinfo(policy);
ppol = get_policyinfo(policy)
ppol
ppol
get_policyinfo(policy)
get_policyinfo
get_policyinfo
policy
policy
if (IS_ERR(ppol))			return PTR_ERR(ppol);
IS_ERR(ppol)
IS_ERR
IS_ERR
ppol
ppol
return PTR_ERR(ppol);
PTR_ERR(ppol)
PTR_ERR
PTR_ERR
ppol
ppol
if (have_governor_per_policy()) {			WARN_ON(tunables);		} else if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
{			WARN_ON(tunables);		}
WARN_ON(tunables);
WARN_ON(tunables)
WARN_ON
WARN_ON
tunables
tunables
if (tunables) {			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}
tunables
tunables
{			tunables->usage_count++;			policy->governor_data = tunables;			return 0;		}
tunables->usage_count++;
tunables->usage_count++
tunables->usage_count
tunables
tunables
usage_count
policy->governor_data = tunables;
policy->governor_data = tunables
policy->governor_data
policy
policy
governor_data
tunables
tunables
return 0;
0
tunables = get_tunables(ppol);
tunables = get_tunables(ppol)
tunables
tunables
get_tunables(ppol)
get_tunables
get_tunables
ppol
ppol
if (!tunables) {			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}
!tunables
tunables
tunables
{			tunables = alloc_tunable(policy);			if (IS_ERR(tunables))				return PTR_ERR(tunables);		}
tunables = alloc_tunable(policy);
tunables = alloc_tunable(policy)
tunables
tunables
alloc_tunable(policy)
alloc_tunable
alloc_tunable
policy
policy
if (IS_ERR(tunables))				return PTR_ERR(tunables);
IS_ERR(tunables)
IS_ERR
IS_ERR
tunables
tunables
return PTR_ERR(tunables);
PTR_ERR(tunables)
PTR_ERR
PTR_ERR
tunables
tunables
tunables->usage_count = 1;
tunables->usage_count = 1
tunables->usage_count
tunables
tunables
usage_count
1
policy->governor_data = tunables;
policy->governor_data = tunables
policy->governor_data
policy
policy
governor_data
tunables
tunables
if (!have_governor_per_policy()) {			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}
!have_governor_per_policy()
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
{			WARN_ON(cpufreq_get_global_kobject());			common_tunables = tunables;		}
WARN_ON(cpufreq_get_global_kobject());
WARN_ON(cpufreq_get_global_kobject());
WARN_ON
WARN_ON
(cpufreq_get_global_kobject())
cpufreq_get_global_kobject()
cpufreq_get_global_kobject
common_tunables = tunables;
common_tunables = tunables
common_tunables
common_tunables
tunables
tunables
rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr());
rc = sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr())
rc
rc
sysfs_create_group(get_governor_parent_kobj(policy),				get_sysfs_attr())
sysfs_create_group
sysfs_create_group
get_governor_parent_kobj(policy)
get_governor_parent_kobj
get_governor_parent_kobj
policy
policy
get_sysfs_attr()
get_sysfs_attr
get_sysfs_attr
if (rc) {			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}
rc
rc
{			kfree(tunables);			policy->governor_data = NULL;			if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}			return rc;		}
kfree(tunables);
kfree(tunables)
kfree
kfree
tunables
tunables
policy->governor_data = NULL;
policy->governor_data = NULL
policy->governor_data
policy
policy
governor_data
NULL
NULL
if (!have_governor_per_policy()) {				common_tunables = NULL;				cpufreq_put_global_kobject();			}
!have_governor_per_policy()
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
{				common_tunables = NULL;				cpufreq_put_global_kobject();			}
common_tunables = NULL;
common_tunables = NULL
common_tunables
common_tunables
NULL
NULL
cpufreq_put_global_kobject();
cpufreq_put_global_kobject()
cpufreq_put_global_kobject
cpufreq_put_global_kobject
return rc;
rc
rc
if (!policy->governor->initialized)			cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);
!policy->governor->initialized
policy->governor->initialized
policy->governor
policy
policy
governor
initialized
cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER);
cpufreq_register_notifier(&cpufreq_notifier_block,					CPUFREQ_TRANSITION_NOTIFIER)
cpufreq_register_notifier
cpufreq_register_notifier
&cpufreq_notifier_block
cpufreq_notifier_block
cpufreq_notifier_block
CPUFREQ_TRANSITION_NOTIFIER
CPUFREQ_TRANSITION_NOTIFIER
if (tunables->use_sched_load)			cpufreq_interactive_enable_sched_input(tunables);
tunables->use_sched_load
tunables
tunables
use_sched_load
cpufreq_interactive_enable_sched_input(tunables);
cpufreq_interactive_enable_sched_input(tunables)
cpufreq_interactive_enable_sched_input
cpufreq_interactive_enable_sched_input
tunables
tunables
if (have_governor_per_policy())			ppol->cached_tunables = tunables;		else			cached_common_tunables = tunables;
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
ppol->cached_tunables = tunables;
ppol->cached_tunables = tunables
ppol->cached_tunables
ppol
ppol
cached_tunables
tunables
tunables
cached_common_tunables = tunables;
cached_common_tunables = tunables
cached_common_tunables
cached_common_tunables
tunables
tunables
break;
case CPUFREQ_GOV_POLICY_EXIT:
CPUFREQ_GOV_POLICY_EXIT
CPUFREQ_GOV_POLICY_EXIT
if (!--tunables->usage_count) {			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}
!--tunables->usage_count
--tunables->usage_count
tunables->usage_count
tunables
tunables
usage_count
{			if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);			sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());			if (!have_governor_per_policy())				cpufreq_put_global_kobject();			common_tunables = NULL;		}
if (policy->governor->initialized == 1)				cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);
policy->governor->initialized == 1
policy->governor->initialized
policy->governor
policy
policy
governor
initialized
1
cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER);
cpufreq_unregister_notifier(&cpufreq_notifier_block,						CPUFREQ_TRANSITION_NOTIFIER)
cpufreq_unregister_notifier
cpufreq_unregister_notifier
&cpufreq_notifier_block
cpufreq_notifier_block
cpufreq_notifier_block
CPUFREQ_TRANSITION_NOTIFIER
CPUFREQ_TRANSITION_NOTIFIER
sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr());
sysfs_remove_group(get_governor_parent_kobj(policy),					get_sysfs_attr())
sysfs_remove_group
sysfs_remove_group
get_governor_parent_kobj(policy)
get_governor_parent_kobj
get_governor_parent_kobj
policy
policy
get_sysfs_attr()
get_sysfs_attr
get_sysfs_attr
if (!have_governor_per_policy())				cpufreq_put_global_kobject();
!have_governor_per_policy()
have_governor_per_policy()
have_governor_per_policy
have_governor_per_policy
cpufreq_put_global_kobject();
cpufreq_put_global_kobject()
cpufreq_put_global_kobject
cpufreq_put_global_kobject
common_tunables = NULL;
common_tunables = NULL
common_tunables
common_tunables
NULL
NULL
policy->governor_data = NULL;
policy->governor_data = NULL
policy->governor_data
policy
policy
governor_data
NULL
NULL
if (tunables->use_sched_load)			cpufreq_interactive_disable_sched_input(tunables);
tunables->use_sched_load
tunables
tunables
use_sched_load
cpufreq_interactive_disable_sched_input(tunables);
cpufreq_interactive_disable_sched_input(tunables)
cpufreq_interactive_disable_sched_input
cpufreq_interactive_disable_sched_input
tunables
tunables
break;
case CPUFREQ_GOV_START:
CPUFREQ_GOV_START
CPUFREQ_GOV_START
mutex_lock(&gov_lock);
mutex_lock(&gov_lock);
mutex_lock
mutex_lock
(&gov_lock)
&gov_lock
&
gov_lock
freq_table = cpufreq_frequency_get_table(policy->cpu);
freq_table = cpufreq_frequency_get_table(policy->cpu)
freq_table
freq_table
cpufreq_frequency_get_table(policy->cpu)
cpufreq_frequency_get_table
cpufreq_frequency_get_table
policy->cpu
policy
policy
cpu
if (!tunables->hispeed_freq)			tunables->hispeed_freq = policy->max;
!tunables->hispeed_freq
tunables->hispeed_freq
tunables
tunables
hispeed_freq
tunables->hispeed_freq = policy->max;
tunables->hispeed_freq = policy->max
tunables->hispeed_freq
tunables
tunables
hispeed_freq
policy->max
policy
policy
max
ppol = per_cpu(polinfo, policy->cpu);
ppol = per_cpu(polinfo, policy->cpu)
ppol
ppol
per_cpu(polinfo, policy->cpu)
per_cpu
per_cpu
polinfo
polinfo
policy->cpu
policy
policy
cpu
ppol->policy = policy;
ppol->policy = policy
ppol->policy
ppol
ppol
policy
policy
policy
ppol->target_freq = policy->cur;
ppol->target_freq = policy->cur
ppol->target_freq
ppol
ppol
target_freq
policy->cur
policy
policy
cur
ppol->freq_table = freq_table;
ppol->freq_table = freq_table
ppol->freq_table
ppol
ppol
freq_table
freq_table
freq_table
ppol->floor_freq = ppol->target_freq;
ppol->floor_freq = ppol->target_freq
ppol->floor_freq
ppol
ppol
floor_freq
ppol->target_freq
ppol
ppol
target_freq
ppol->floor_validate_time = ktime_to_us(ktime_get());
ppol->floor_validate_time = ktime_to_us(ktime_get())
ppol->floor_validate_time
ppol
ppol
floor_validate_time
ktime_to_us(ktime_get())
ktime_to_us
ktime_to_us
ktime_get()
ktime_get
ktime_get
ppol->hispeed_validate_time = ppol->floor_validate_time;
ppol->hispeed_validate_time = ppol->floor_validate_time
ppol->hispeed_validate_time
ppol
ppol
hispeed_validate_time
ppol->floor_validate_time
ppol
ppol
floor_validate_time
ppol->min_freq = policy->min;
ppol->min_freq = policy->min
ppol->min_freq
ppol
ppol
min_freq
policy->min
policy
policy
min
ppol->reject_notification = true;
ppol->reject_notification = true
ppol->reject_notification
ppol
ppol
reject_notification
true
down_write(&ppol->enable_sem);
down_write(&ppol->enable_sem)
down_write
down_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
del_timer_sync(&ppol->policy_timer);
del_timer_sync(&ppol->policy_timer)
del_timer_sync
del_timer_sync
&ppol->policy_timer
ppol->policy_timer
ppol
ppol
policy_timer
del_timer_sync(&ppol->policy_slack_timer);
del_timer_sync(&ppol->policy_slack_timer)
del_timer_sync
del_timer_sync
&ppol->policy_slack_timer
ppol->policy_slack_timer
ppol
ppol
policy_slack_timer
ppol->policy_timer.data = policy->cpu;
ppol->policy_timer.data = policy->cpu
ppol->policy_timer.data
ppol->policy_timer
ppol
ppol
policy_timer
data
policy->cpu
policy
policy
cpu
ppol->last_evaluated_jiffy = get_jiffies_64();
ppol->last_evaluated_jiffy = get_jiffies_64()
ppol->last_evaluated_jiffy
ppol
ppol
last_evaluated_jiffy
get_jiffies_64()
get_jiffies_64
get_jiffies_64
cpufreq_interactive_timer_start(tunables, policy->cpu);
cpufreq_interactive_timer_start(tunables, policy->cpu)
cpufreq_interactive_timer_start
cpufreq_interactive_timer_start
tunables
tunables
policy->cpu
policy
policy
cpu
ppol->governor_enabled = 1;
ppol->governor_enabled = 1
ppol->governor_enabled
ppol
ppol
governor_enabled
1
up_write(&ppol->enable_sem);
up_write(&ppol->enable_sem)
up_write
up_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
ppol->reject_notification = false;
ppol->reject_notification = false
ppol->reject_notification
ppol
ppol
reject_notification
false
mutex_unlock(&gov_lock);
mutex_unlock(&gov_lock)
mutex_unlock
mutex_unlock
&gov_lock
gov_lock
gov_lock
break;
case CPUFREQ_GOV_STOP:
CPUFREQ_GOV_STOP
CPUFREQ_GOV_STOP
mutex_lock(&gov_lock);
mutex_lock(&gov_lock)
mutex_lock
mutex_lock
&gov_lock
gov_lock
gov_lock
ppol = per_cpu(polinfo, policy->cpu);
ppol = per_cpu(polinfo, policy->cpu)
ppol
ppol
per_cpu(polinfo, policy->cpu)
per_cpu
per_cpu
polinfo
polinfo
policy->cpu
policy
policy
cpu
ppol->reject_notification = true;
ppol->reject_notification = true
ppol->reject_notification
ppol
ppol
reject_notification
true
down_write(&ppol->enable_sem);
down_write(&ppol->enable_sem)
down_write
down_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
ppol->governor_enabled = 0;
ppol->governor_enabled = 0
ppol->governor_enabled
ppol
ppol
governor_enabled
0
ppol->target_freq = 0;
ppol->target_freq = 0
ppol->target_freq
ppol
ppol
target_freq
0
del_timer_sync(&ppol->policy_timer);
del_timer_sync(&ppol->policy_timer)
del_timer_sync
del_timer_sync
&ppol->policy_timer
ppol->policy_timer
ppol
ppol
policy_timer
del_timer_sync(&ppol->policy_slack_timer);
del_timer_sync(&ppol->policy_slack_timer)
del_timer_sync
del_timer_sync
&ppol->policy_slack_timer
ppol->policy_slack_timer
ppol
ppol
policy_slack_timer
up_write(&ppol->enable_sem);
up_write(&ppol->enable_sem)
up_write
up_write
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
ppol->reject_notification = false;
ppol->reject_notification = false
ppol->reject_notification
ppol
ppol
reject_notification
false
mutex_unlock(&gov_lock);
mutex_unlock(&gov_lock)
mutex_unlock
mutex_unlock
&gov_lock
gov_lock
gov_lock
break;
case CPUFREQ_GOV_LIMITS:
CPUFREQ_GOV_LIMITS
CPUFREQ_GOV_LIMITS
__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L);
__cpufreq_driver_target(policy,				policy->cur, CPUFREQ_RELATION_L)
__cpufreq_driver_target
__cpufreq_driver_target
policy
policy
policy->cur
policy
policy
cur
CPUFREQ_RELATION_L
CPUFREQ_RELATION_L
ppol = per_cpu(polinfo, policy->cpu);
ppol = per_cpu(polinfo, policy->cpu)
ppol
ppol
per_cpu(polinfo, policy->cpu)
per_cpu
per_cpu
polinfo
polinfo
policy->cpu
policy
policy
cpu
down_read(&ppol->enable_sem);
down_read(&ppol->enable_sem)
down_read
down_read
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
if (ppol->governor_enabled) {			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}
ppol->governor_enabled
ppol
ppol
governor_enabled
{			spin_lock_irqsave(&ppol->target_freq_lock, flags);			if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;			spin_unlock_irqrestore(&ppol->target_freq_lock, flags);			if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);			ppol->min_freq = policy->min;		}
spin_lock_irqsave(&ppol->target_freq_lock, flags);
spin_lock_irqsave(&ppol->target_freq_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
if (policy->max < ppol->target_freq)				ppol->target_freq = policy->max;			else if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;
policy->max < ppol->target_freq
policy->max
policy
policy
max
ppol->target_freq
ppol
ppol
target_freq
ppol->target_freq = policy->max;
ppol->target_freq = policy->max
ppol->target_freq
ppol
ppol
target_freq
policy->max
policy
policy
max
if (policy->min > ppol->target_freq)				ppol->target_freq = policy->min;
policy->min > ppol->target_freq
policy->min
policy
policy
min
ppol->target_freq
ppol
ppol
target_freq
ppol->target_freq = policy->min;
ppol->target_freq = policy->min
ppol->target_freq
ppol
ppol
target_freq
policy->min
policy
policy
min
spin_unlock_irqrestore(&ppol->target_freq_lock, flags);
spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&ppol->target_freq_lock
ppol->target_freq_lock
ppol
ppol
target_freq_lock
flags
flags
if (policy->min < ppol->min_freq)				cpufreq_interactive_timer_resched(policy->cpu,								  true);
policy->min < ppol->min_freq
policy->min
policy
policy
min
ppol->min_freq
ppol
ppol
min_freq
cpufreq_interactive_timer_resched(policy->cpu,								  true);
cpufreq_interactive_timer_resched(policy->cpu,								  true)
cpufreq_interactive_timer_resched
cpufreq_interactive_timer_resched
policy->cpu
policy
policy
cpu
true
ppol->min_freq = policy->min;
ppol->min_freq = policy->min
ppol->min_freq
ppol
ppol
min_freq
policy->min
policy
policy
min
up_read(&ppol->enable_sem);
up_read(&ppol->enable_sem)
up_read
up_read
&ppol->enable_sem
ppol->enable_sem
ppol
ppol
enable_sem
break;
return 0;
0
-----joern-----
(43,369,0)
(18,83,0)
(172,34,0)
(27,299,0)
(265,186,0)
(383,434,0)
(256,144,0)
(36,315,0)
(467,12,0)
(59,413,0)
(312,389,0)
(74,303,0)
(22,426,0)
(111,189,0)
(360,48,0)
(6,299,0)
(174,260,0)
(408,217,0)
(416,128,0)
(450,282,0)
(32,279,0)
(406,299,0)
(337,299,0)
(439,262,0)
(304,430,0)
(244,426,0)
(365,23,0)
(150,413,0)
(47,299,0)
(251,382,0)
(345,217,0)
(69,333,0)
(344,370,0)
(73,461,0)
(70,11,0)
(207,130,0)
(177,345,0)
(439,181,0)
(360,21,0)
(260,369,0)
(335,217,0)
(116,299,0)
(199,134,0)
(182,299,0)
(349,337,0)
(232,299,0)
(202,247,0)
(9,371,0)
(345,183,0)
(191,6,0)
(324,299,0)
(92,315,0)
(373,404,0)
(19,12,0)
(363,299,0)
(216,59,0)
(87,354,0)
(51,350,0)
(407,321,0)
(230,279,0)
(63,321,0)
(374,381,0)
(325,344,0)
(276,48,0)
(120,343,0)
(0,405,0)
(166,344,0)
(445,282,0)
(355,113,0)
(102,162,0)
(233,291,0)
(453,431,0)
(86,194,0)
(321,227,0)
(413,376,0)
(104,430,0)
(436,315,0)
(176,299,0)
(229,105,0)
(430,326,0)
(123,72,0)
(98,393,0)
(205,432,0)
(374,106,0)
(448,123,0)
(56,371,0)
(138,426,0)
(45,147,0)
(425,415,0)
(456,299,0)
(186,419,0)
(388,308,0)
(170,438,0)
(289,217,0)
(374,443,0)
(279,32,0)
(302,149,0)
(148,299,0)
(338,18,0)
(121,315,0)
(49,414,0)
(192,18,0)
(361,170,0)
(423,394,0)
(205,428,0)
(374,289,0)
(108,181,0)
(309,256,0)
(189,323,0)
(462,244,0)
(259,6,0)
(336,436,0)
(113,13,0)
(130,337,0)
(44,150,0)
(373,217,0)
(183,345,0)
(76,271,0)
(148,150,0)
(208,334,0)
(374,251,0)
(118,51,0)
(374,3,0)
(406,23,0)
(185,299,0)
(434,417,0)
(24,109,0)
(107,287,0)
(52,14,0)
(364,330,0)
(75,235,0)
(258,405,0)
(92,334,0)
(224,382,0)
(231,59,0)
(196,299,0)
(233,181,0)
(273,79,0)
(99,395,0)
(311,369,0)
(82,292,0)
(348,373,0)
(269,417,0)
(246,376,0)
(436,334,0)
(131,436,0)
(67,220,0)
(81,106,0)
(188,468,0)
(292,299,0)
(284,36,0)
(448,278,0)
(10,149,0)
(53,299,0)
(208,315,0)
(252,183,0)
(377,440,0)
(288,3,0)
(413,299,0)
(10,332,0)
(144,256,0)
(374,191,0)
(106,217,0)
(267,105,0)
(357,251,0)
(326,72,0)
(196,215,0)
(4,165,0)
(31,333,0)
(220,48,0)
(341,327,0)
(305,299,0)
(290,247,0)
(333,69,0)
(340,318,0)
(178,360,0)
(179,221,0)
(167,299,0)
(123,344,0)
(374,360,0)
(342,43,0)
(344,48,0)
(426,323,0)
(296,227,0)
(173,407,0)
(315,161,0)
(89,299,0)
(461,73,0)
(7,271,0)
(136,18,0)
(157,208,0)
(427,397,0)
(432,205,0)
(424,345,0)
(162,413,0)
(21,18,0)
(51,334,0)
(432,413,0)
(262,101,0)
(194,86,0)
(427,413,0)
(431,426,0)
(412,12,0)
(115,112,0)
(100,392,0)
(84,438,0)
(443,413,0)
(136,227,0)
(273,80,0)
(337,315,0)
(308,413,0)
(430,334,0)
(270,299,0)
(4,411,0)
(253,256,0)
(447,299,0)
(409,105,0)
(319,92,0)
(428,299,0)
(35,215,0)
(332,334,0)
(400,191,0)
(378,7,0)
(296,62,0)
(11,56,0)
(391,369,0)
(94,161,0)
(338,369,0)
(257,307,0)
(431,442,0)
(274,425,0)
(416,217,0)
(457,135,0)
(374,134,0)
(150,196,0)
(268,299,0)
(332,315,0)
(350,51,0)
(374,82,0)
(286,73,0)
(73,217,0)
(159,299,0)
(330,363,0)
(135,28,0)
(11,48,0)
(202,299,0)
(247,290,0)
(392,426,0)
(242,416,0)
(433,48,0)
(83,18,0)
(37,227,0)
(160,101,0)
(60,226,0)
(66,22,0)
(47,411,0)
(295,431,0)
(54,12,0)
(122,136,0)
(97,292,0)
(369,140,0)
(330,48,0)
(92,341,0)
(254,299,0)
(468,48,0)
(398,360,0)
(294,28,0)
(381,413,0)
(69,48,0)
(34,369,0)
(34,41,0)
(169,409,0)
(142,69,0)
(238,299,0)
(117,60,0)
(395,413,0)
(329,299,0)
(67,217,0)
(419,48,0)
(283,123,0)
(234,442,0)
(464,164,0)
(59,196,0)
(337,334,0)
(214,299,0)
(186,265,0)
(266,149,0)
(461,282,0)
(68,221,0)
(337,130,0)
(404,373,0)
(56,11,0)
(443,159,0)
(151,289,0)
(215,48,0)
(134,413,0)
(220,67,0)
(358,34,0)
(228,161,0)
(374,388,0)
(307,299,0)
(237,396,0)
(58,289,0)
(328,130,0)
(277,244,0)
(217,67,0)
(389,413,0)
(343,120,0)
(376,413,0)
(235,47,0)
(451,407,0)
(119,73,0)
(292,97,0)
(411,299,0)
(139,354,0)
(376,433,0)
(90,389,0)
(405,413,0)
(86,413,0)
(29,220,0)
(42,181,0)
(347,7,0)
(175,162,0)
(143,299,0)
(215,196,0)
(301,80,0)
(180,391,0)
(18,299,0)
(226,299,0)
(55,32,0)
(332,10,0)
(135,299,0)
(239,12,0)
(323,426,0)
(171,411,0)
(374,427,0)
(164,397,0)
(289,14,0)
(263,334,0)
(78,432,0)
(110,413,0)
(14,52,0)
(117,217,0)
(1,299,0)
(161,315,0)
(374,34,0)
(184,82,0)
(374,394,0)
(410,433,0)
(396,369,0)
(362,265,0)
(419,186,0)
(465,134,0)
(152,101,0)
(236,241,0)
(40,24,0)
(405,148,0)
(458,206,0)
(392,53,0)
(441,299,0)
(221,217,0)
(437,427,0)
(30,299,0)
(418,433,0)
(390,311,0)
(463,36,0)
(162,307,0)
(101,217,0)
(244,158,0)
(168,419,0)
(440,393,0)
(158,244,0)
(153,388,0)
(425,135,0)
(211,24,0)
(225,299,0)
(165,4,0)
(223,120,0)
(155,299,0)
(247,202,0)
(438,84,0)
(30,375,0)
(446,299,0)
(276,404,0)
(414,18,0)
(422,117,0)
(109,24,0)
(353,140,0)
(28,135,0)
(468,42,0)
(36,334,0)
(28,48,0)
(397,164,0)
(121,200,0)
(24,426,0)
(367,439,0)
(17,56,0)
(137,409,0)
(16,51,0)
(3,413,0)
(293,346,0)
(438,62,0)
(201,323,0)
(351,69,0)
(426,299,0)
(226,60,0)
(85,468,0)
(404,276,0)
(22,375,0)
(204,299,0)
(454,443,0)
(285,41,0)
(41,299,0)
(281,12,0)
(8,408,0)
(470,189,0)
(395,115,0)
(158,167,0)
(300,236,0)
(409,48,0)
(444,427,0)
(346,371,0)
(372,120,0)
(368,3,0)
(128,270,0)
(13,299,0)
(374,43,0)
(291,233,0)
(311,48,0)
(156,381,0)
(381,143,0)
(218,241,0)
(183,252,0)
(203,276,0)
(369,311,0)
(10,412,0)
(165,48,0)
(124,181,0)
(314,114,0)
(150,148,0)
(251,426,0)
(189,48,0)
(447,194,0)
(241,236,0)
(134,202,0)
(382,299,0)
(129,237,0)
(80,413,0)
(222,299,0)
(430,315,0)
(112,299,0)
(96,165,0)
(128,416,0)
(115,395,0)
(161,48,0)
(326,430,0)
(331,182,0)
(397,299,0)
(61,299,0)
(385,308,0)
(219,331,0)
(20,21,0)
(435,76,0)
(105,229,0)
(298,43,0)
(43,18,0)
(56,17,0)
(389,406,0)
(403,141,0)
(13,113,0)
(114,314,0)
(51,315,0)
(39,220,0)
(303,89,0)
(421,276,0)
(318,340,0)
(370,72,0)
(217,299,0)
(193,121,0)
(374,12,0)
(101,262,0)
(394,217,0)
(23,406,0)
(213,299,0)
(282,48,0)
(82,413,0)
(64,308,0)
(182,331,0)
(306,417,0)
(83,135,0)
(3,456,0)
(121,334,0)
(210,52,0)
(76,435,0)
(170,48,0)
(237,135,0)
(320,147,0)
(149,429,0)
(7,18,0)
(401,36,0)
(194,447,0)
(356,432,0)
(127,23,0)
(130,48,0)
(374,162,0)
(89,303,0)
(25,370,0)
(394,42,0)
(256,48,0)
(374,392,0)
(62,438,0)
(327,48,0)
(261,80,0)
(146,416,0)
(1,109,0)
(190,252,0)
(272,346,0)
(452,434,0)
(2,369,0)
(91,12,0)
(65,52,0)
(370,334,0)
(57,315,0)
(79,299,0)
(26,440,0)
(80,273,0)
(287,369,0)
(455,374,0)
(308,388,0)
(109,1,0)
(456,48,0)
(388,204,0)
(21,369,0)
(438,170,0)
(21,299,0)
(103,83,0)
(163,12,0)
(167,158,0)
(384,62,0)
(327,341,0)
(46,164,0)
(7,369,0)
(50,363,0)
(42,468,0)
(374,405,0)
(15,86,0)
(132,159,0)
(374,92,0)
(235,413,0)
(463,154,0)
(275,392,0)
(399,381,0)
(310,330,0)
(375,30,0)
(62,299,0)
(374,235,0)
(106,144,0)
(282,461,0)
(198,338,0)
(164,413,0)
(448,296,0)
(417,434,0)
(221,291,0)
(187,327,0)
(71,67,0)
(434,48,0)
(260,278,0)
(23,48,0)
(36,463,0)
(38,327,0)
(95,332,0)
(448,415,0)
(93,191,0)
(77,47,0)
(5,373,0)
(149,10,0)
(374,59,0)
(374,431,0)
(120,426,0)
(34,18,0)
(412,10,0)
(359,150,0)
(323,189,0)
(411,4,0)
(88,252,0)
(374,237,0)
(374,346,0)
(402,408,0)
(197,53,0)
(154,463,0)
(339,22,0)
(252,48,0)
(469,299,0)
(380,396,0)
(206,135,0)
(141,403,0)
(379,251,0)
(459,371,0)
(245,106,0)
(270,128,0)
(204,147,0)
(195,338,0)
(343,324,0)
(145,443,0)
(417,48,0)
(262,439,0)
(313,233,0)
(147,204,0)
(243,299,0)
(433,376,0)
(448,374,0)
(370,315,0)
(248,394,0)
(280,296,0)
(407,48,0)
(212,186,0)
(255,334,0)
(249,165,0)
(322,456,0)
(79,273,0)
(374,330,0)
(191,426,0)
(442,299,0)
(324,343,0)
(147,48,0)
(250,299,0)
(428,205,0)
(297,299,0)
(375,22,0)
(136,369,0)
(354,87,0)
(105,409,0)
(386,92,0)
(291,221,0)
(60,117,0)
(112,115,0)
(87,299,0)
(374,7,0)
(33,143,0)
(240,117,0)
(366,395,0)
(133,86,0)
(460,237,0)
(287,18,0)
(264,419,0)
(449,215,0)
(396,18,0)
(164,202,0)
(374,389,0)
(317,82,0)
(420,235,0)
(52,48,0)
(434,299,0)
(448,123,1)
(74,53,1)
(374,405,1)
(309,253,1)
(469,436,1)
(195,198,1)
(164,202,1)
(319,386,1)
(265,362,1)
(235,75,1)
(112,115,1)
(101,217,1)
(45,320,1)
(13,113,1)
(256,309,1)
(339,66,1)
(18,83,1)
(416,217,1)
(210,289,1)
(315,161,1)
(366,143,1)
(450,445,1)
(442,234,1)
(7,18,1)
(116,182,1)
(10,149,1)
(410,246,1)
(209,206,1)
(356,112,1)
(448,415,1)
(290,134,1)
(229,105,1)
(453,167,1)
(204,147,1)
(457,387,1)
(248,423,1)
(432,413,1)
(413,376,1)
(263,125,1)
(115,395,1)
(287,369,1)
(409,169,1)
(325,166,1)
(461,73,1)
(138,87,1)
(56,11,1)
(288,413,1)
(401,387,1)
(435,340,1)
(88,461,1)
(198,279,1)
(317,204,1)
(379,426,1)
(285,34,1)
(189,48,1)
(260,369,1)
(179,68,1)
(320,388,1)
(460,129,1)
(333,69,1)
(133,15,1)
(406,23,1)
(282,450,1)
(416,242,1)
(335,434,1)
(456,48,1)
(63,407,1)
(161,48,1)
(182,331,1)
(107,338,1)
(76,435,1)
(215,48,1)
(385,64,1)
(418,410,1)
(283,370,1)
(419,48,1)
(252,190,1)
(289,217,1)
(321,63,1)
(44,359,1)
(167,158,1)
(69,48,1)
(466,141,1)
(53,197,1)
(4,165,1)
(194,86,1)
(313,291,1)
(126,287,1)
(430,304,1)
(349,292,1)
(5,348,1)
(160,183,1)
(240,422,1)
(154,463,1)
(82,184,1)
(113,355,1)
(438,170,1)
(337,334,1)
(394,217,1)
(372,6,1)
(307,257,1)
(65,210,1)
(21,369,1)
(374,381,1)
(331,219,1)
(186,212,1)
(80,261,1)
(212,419,1)
(57,125,1)
(230,32,1)
(174,391,1)
(169,137,1)
(311,390,1)
(367,262,1)
(221,217,1)
(198,229,1)
(436,315,1)
(50,330,1)
(427,444,1)
(8,270,1)
(395,413,1)
(26,114,1)
(374,106,1)
(414,18,1)
(456,322,1)
(357,379,1)
(445,233,1)
(276,48,1)
(43,298,1)
(348,276,1)
(175,102,1)
(51,315,1)
(387,412,1)
(42,468,1)
(265,186,1)
(146,217,1)
(164,413,1)
(417,48,1)
(34,358,1)
(32,55,1)
(166,326,1)
(392,275,1)
(68,408,1)
(328,207,1)
(458,135,1)
(150,413,1)
(123,283,1)
(374,235,1)
(374,388,1)
(374,34,1)
(374,394,1)
(340,318,1)
(59,216,1)
(326,430,1)
(374,251,1)
(6,259,1)
(346,293,1)
(156,406,1)
(375,22,1)
(355,387,1)
(119,282,1)
(17,11,1)
(274,206,1)
(433,418,1)
(364,346,1)
(444,437,1)
(82,413,1)
(424,177,1)
(92,319,1)
(411,4,1)
(284,401,1)
(327,38,1)
(389,413,1)
(70,236,1)
(139,387,1)
(158,244,1)
(336,131,1)
(310,364,1)
(332,95,1)
(251,426,1)
(24,426,1)
(414,49,1)
(149,429,1)
(316,62,1)
(56,17,1)
(468,85,1)
(71,335,1)
(86,413,1)
(160,14,1)
(97,82,1)
(462,277,1)
(208,315,1)
(296,62,1)
(244,462,1)
(386,350,1)
(373,5,1)
(276,203,1)
(421,439,1)
(92,334,1)
(370,25,1)
(16,118,1)
(135,28,1)
(272,466,1)
(338,18,1)
(172,391,1)
(332,315,1)
(246,110,1)
(374,346,1)
(409,48,1)
(35,59,1)
(193,209,1)
(388,153,1)
(333,31,1)
(241,218,1)
(10,332,1)
(368,288,1)
(378,347,1)
(84,170,1)
(374,330,1)
(396,369,1)
(439,367,1)
(178,398,1)
(400,93,1)
(465,199,1)
(52,48,1)
(430,334,1)
(425,135,1)
(100,30,1)
(187,92,1)
(334,255,1)
(86,133,1)
(141,403,1)
(289,58,1)
(432,78,1)
(147,48,1)
(439,262,1)
(78,356,1)
(337,315,1)
(152,160,1)
(451,173,1)
(20,360,1)
(24,211,1)
(374,389,1)
(188,394,1)
(23,127,1)
(150,44,1)
(190,88,1)
(3,368,1)
(374,237,1)
(162,175,1)
(402,8,1)
(301,307,1)
(51,16,1)
(183,345,1)
(452,417,1)
(287,107,1)
(73,217,1)
(136,369,1)
(408,217,1)
(300,241,1)
(85,188,1)
(90,312,1)
(67,220,1)
(60,117,1)
(249,96,1)
(394,248,1)
(220,29,1)
(151,183,1)
(455,243,1)
(145,79,1)
(303,74,1)
(121,193,1)
(89,303,1)
(233,313,1)
(295,453,1)
(383,387,1)
(455,27,1)
(218,265,1)
(61,226,1)
(41,285,1)
(469,208,1)
(330,310,1)
(49,18,1)
(390,2,1)
(83,103,1)
(55,229,1)
(101,152,1)
(36,334,1)
(407,48,1)
(28,294,1)
(122,316,1)
(104,352,1)
(455,469,1)
(243,89,1)
(220,48,1)
(165,48,1)
(470,111,1)
(354,139,1)
(449,35,1)
(120,223,1)
(14,52,1)
(352,209,1)
(347,76,1)
(62,438,1)
(296,280,1)
(129,126,1)
(38,187,1)
(144,256,1)
(361,384,1)
(64,447,1)
(374,191,1)
(369,311,1)
(208,157,1)
(279,32,1)
(34,369,1)
(219,159,1)
(318,21,1)
(172,414,1)
(111,201,1)
(330,48,1)
(199,148,1)
(120,426,1)
(25,344,1)
(130,328,1)
(292,97,1)
(99,366,1)
(95,334,1)
(374,43,1)
(407,451,1)
(436,336,1)
(148,150,1)
(2,414,1)
(73,286,1)
(177,252,1)
(234,431,1)
(398,41,1)
(31,69,1)
(117,240,1)
(128,416,1)
(126,338,1)
(360,48,1)
(183,252,1)
(374,92,1)
(455,61,1)
(117,217,1)
(130,48,1)
(186,419,1)
(374,443,1)
(440,377,1)
(170,48,1)
(215,449,1)
(408,402,1)
(272,141,1)
(106,81,1)
(206,135,1)
(397,164,1)
(106,217,1)
(269,383,1)
(132,443,1)
(308,413,1)
(438,84,1)
(302,332,1)
(157,436,1)
(36,284,1)
(392,426,1)
(337,130,1)
(30,375,1)
(47,77,1)
(192,352,1)
(423,333,1)
(11,48,1)
(454,145,1)
(277,382,1)
(362,186,1)
(279,230,1)
(259,191,1)
(180,369,1)
(22,339,1)
(39,71,1)
(468,48,1)
(94,57,1)
(338,369,1)
(380,237,1)
(389,90,1)
(110,341,1)
(370,334,1)
(224,251,1)
(363,50,1)
(422,42,1)
(419,264,1)
(374,162,1)
(312,397,1)
(426,323,1)
(171,13,1)
(191,426,1)
(376,433,1)
(131,363,1)
(21,18,1)
(327,48,1)
(87,354,1)
(431,295,1)
(374,7,1)
(404,276,1)
(391,180,1)
(332,334,1)
(114,314,1)
(143,33,1)
(258,0,1)
(137,316,1)
(304,104,1)
(103,192,1)
(433,48,1)
(170,361,1)
(412,10,1)
(236,241,1)
(7,378,1)
(149,266,1)
(47,411,1)
(110,350,1)
(382,224,1)
(96,171,1)
(291,221,1)
(264,168,1)
(226,60,1)
(153,308,1)
(242,146,1)
(29,39,1)
(150,196,1)
(93,442,1)
(423,404,1)
(22,426,1)
(34,18,1)
(351,404,1)
(15,428,1)
(247,290,1)
(244,426,1)
(298,342,1)
(228,94,1)
(192,121,1)
(374,289,1)
(278,260,1)
(233,291,1)
(165,249,1)
(203,421,1)
(286,119,1)
(221,179,1)
(27,396,1)
(134,465,1)
(384,7,1)
(95,315,1)
(359,405,1)
(370,315,1)
(384,340,1)
(360,178,1)
(59,413,1)
(280,114,1)
(266,302,1)
(142,351,1)
(270,128,1)
(358,172,1)
(0,47,1)
(27,43,1)
(1,109,1)
(189,470,1)
(168,154,1)
(40,324,1)
(211,40,1)
(455,116,1)
(136,122,1)
(420,196,1)
(280,98,1)
(92,315,1)
(464,427,1)
(404,373,1)
(374,427,1)
(7,369,1)
(201,138,1)
(261,301,1)
(216,231,1)
(184,317,1)
(322,3,1)
(415,425,1)
(403,56,1)
(33,381,1)
(273,80,1)
(374,82,1)
(253,106,1)
(223,372,1)
(447,194,1)
(374,392,1)
(217,67,1)
(52,65,1)
(196,215,1)
(207,349,1)
(136,18,1)
(381,413,1)
(364,154,1)
(388,308,1)
(3,413,1)
(160,144,1)
(437,202,1)
(236,300,1)
(105,409,1)
(308,385,1)
(374,455,1)
(43,369,1)
(118,411,1)
(237,135,1)
(443,454,1)
(43,18,1)
(11,70,1)
(345,424,1)
(434,417,1)
(463,36,1)
(395,99,1)
(436,334,1)
(455,387,1)
(70,265,1)
(343,120,1)
(448,296,1)
(350,51,1)
(205,432,1)
(374,3,1)
(51,334,1)
(282,48,1)
(405,413,1)
(448,278,1)
(461,282,1)
(251,357,1)
(293,272,1)
(430,315,1)
(162,413,1)
(121,315,1)
(206,458,1)
(431,426,1)
(396,18,1)
(417,306,1)
(202,247,1)
(287,18,1)
(434,452,1)
(260,174,1)
(374,431,1)
(173,136,1)
(121,334,1)
(374,59,1)
(344,48,1)
(208,334,1)
(69,142,1)
(345,217,1)
(161,228,1)
(134,413,1)
(314,321,1)
(434,48,1)
(123,344,1)
(245,461,1)
(80,413,1)
(46,464,1)
(428,205,1)
(81,245,1)
(391,369,1)
(23,48,1)
(109,24,1)
(396,380,1)
(341,327,1)
(127,365,1)
(405,258,1)
(77,235,1)
(267,409,1)
(294,457,1)
(252,48,1)
(231,456,1)
(164,46,1)
(237,460,1)
(425,274,1)
(21,20,1)
(427,413,1)
(159,132,1)
(197,392,1)
(324,343,1)
(235,413,1)
(79,273,1)
(399,156,1)
(75,420,1)
(66,1,1)
(36,315,1)
(323,189,1)
(381,399,1)
(374,360,1)
(98,440,1)
(102,337,1)
(58,151,1)
(373,217,1)
(255,263,1)
(374,134,1)
(105,267,1)
(275,100,1)
(338,195,1)
(83,135,1)
(377,26,1)
(28,48,1)
(262,101,1)
(257,162,1)
(443,413,1)
(448,374,1)
(344,325,1)
(422,408,1)
(147,45,1)
(311,48,1)
(342,126,1)
(191,400,1)
(306,269,1)
(256,48,1)
(365,389,1)
(158,387,2)
(193,209,2)
(169,316,2)
(374,191,2)
(199,387,2)
(60,117,2)
(208,334,2)
(201,387,2)
(230,229,2)
(377,114,2)
(53,387,2)
(89,303,2)
(376,433,2)
(374,43,2)
(34,369,2)
(322,387,2)
(461,408,2)
(287,369,2)
(106,461,2)
(347,340,2)
(352,209,2)
(191,387,2)
(59,387,2)
(448,415,2)
(337,387,2)
(417,387,2)
(396,126,2)
(6,387,2)
(244,426,2)
(338,316,2)
(237,135,2)
(409,48,2)
(92,350,2)
(374,3,2)
(212,154,2)
(167,158,2)
(360,391,2)
(389,413,2)
(279,229,2)
(413,387,2)
(14,183,2)
(350,387,2)
(17,154,2)
(202,387,2)
(1,387,2)
(18,83,2)
(58,183,2)
(292,387,2)
(86,387,2)
(364,387,2)
(142,404,2)
(18,209,2)
(327,48,2)
(143,387,2)
(303,387,2)
(20,391,2)
(218,265,2)
(24,426,2)
(383,387,2)
(465,387,2)
(57,125,2)
(349,387,2)
(97,387,2)
(279,32,2)
(151,183,2)
(402,387,2)
(165,48,2)
(192,209,2)
(342,126,2)
(161,48,2)
(114,314,2)
(337,130,2)
(440,114,2)
(130,48,2)
(330,387,2)
(425,135,2)
(370,352,2)
(43,18,2)
(177,461,2)
(434,417,2)
(330,48,2)
(374,82,2)
(116,387,2)
(244,387,2)
(46,387,2)
(83,352,2)
(292,97,2)
(128,416,2)
(291,408,2)
(182,331,2)
(87,354,2)
(374,427,2)
(49,352,2)
(4,387,2)
(362,154,2)
(21,18,2)
(267,316,2)
(71,387,2)
(301,387,2)
(468,48,2)
(451,316,2)
(314,316,2)
(119,408,2)
(231,387,2)
(286,408,2)
(3,387,2)
(107,338,2)
(374,389,2)
(287,338,2)
(203,408,2)
(114,316,2)
(385,387,2)
(10,332,2)
(324,387,2)
(129,126,2)
(438,391,2)
(288,387,2)
(99,387,2)
(434,387,2)
(378,340,2)
(18,352,2)
(31,404,2)
(255,125,2)
(463,36,2)
(338,18,2)
(260,391,2)
(302,332,2)
(150,196,2)
(337,315,2)
(220,48,2)
(374,289,2)
(437,387,2)
(67,220,2)
(392,387,2)
(29,387,2)
(135,28,2)
(436,334,2)
(219,387,2)
(284,387,2)
(221,217,2)
(196,387,2)
(333,404,2)
(215,387,2)
(242,387,2)
(374,387,2)
(226,60,2)
(34,18,2)
(443,387,2)
(178,391,2)
(43,126,2)
(106,217,2)
(296,316,2)
(184,387,2)
(370,315,2)
(123,344,2)
(229,105,2)
(461,282,2)
(411,387,2)
(217,387,2)
(197,387,2)
(456,48,2)
(7,369,2)
(337,334,2)
(170,48,2)
(134,413,2)
(448,296,2)
(370,334,2)
(223,387,2)
(161,125,2)
(83,135,2)
(221,408,2)
(405,413,2)
(228,125,2)
(331,387,2)
(431,387,2)
(207,387,2)
(117,217,2)
(109,24,2)
(167,387,2)
(67,387,2)
(447,194,2)
(205,432,2)
(132,387,2)
(27,316,2)
(399,387,2)
(358,414,2)
(45,387,2)
(372,387,2)
(80,413,2)
(333,69,2)
(141,154,2)
(208,436,2)
(436,315,2)
(38,350,2)
(320,387,2)
(308,413,2)
(426,387,2)
(25,352,2)
(13,387,2)
(59,413,2)
(283,352,2)
(44,387,2)
(154,463,2)
(145,387,2)
(157,436,2)
(103,352,2)
(41,414,2)
(417,48,2)
(246,387,2)
(345,217,2)
(265,186,2)
(386,350,2)
(55,229,2)
(61,387,2)
(278,391,2)
(131,387,2)
(47,387,2)
(374,360,2)
(296,62,2)
(374,59,2)
(189,387,2)
(24,387,2)
(405,387,2)
(34,391,2)
(63,316,2)
(404,408,2)
(373,408,2)
(204,387,2)
(409,316,2)
(236,241,2)
(427,387,2)
(153,387,2)
(162,413,2)
(332,334,2)
(78,387,2)
(357,387,2)
(430,334,2)
(285,391,2)
(139,387,2)
(21,369,2)
(450,408,2)
(150,387,2)
(460,126,2)
(427,413,2)
(454,387,2)
(264,154,2)
(276,48,2)
(396,18,2)
(248,408,2)
(397,387,2)
(183,252,2)
(433,48,2)
(470,387,2)
(50,387,2)
(105,316,2)
(144,256,2)
(7,340,2)
(374,162,2)
(7,18,2)
(62,414,2)
(224,387,2)
(243,387,2)
(94,125,2)
(438,84,2)
(210,183,2)
(51,334,2)
(173,316,2)
(291,221,2)
(463,387,2)
(164,387,2)
(162,387,2)
(175,387,2)
(20,414,2)
(196,215,2)
(30,375,2)
(344,48,2)
(170,391,2)
(87,387,2)
(120,387,2)
(368,387,2)
(434,48,2)
(316,391,2)
(202,247,2)
(165,387,2)
(92,334,2)
(135,387,2)
(235,413,2)
(156,387,2)
(81,461,2)
(103,209,2)
(182,387,2)
(317,387,2)
(179,408,2)
(21,414,2)
(261,387,2)
(36,387,2)
(112,387,2)
(374,443,2)
(183,345,2)
(15,387,2)
(338,369,2)
(226,387,2)
(2,414,2)
(211,387,2)
(1,109,2)
(75,387,2)
(315,161,2)
(307,387,2)
(39,387,2)
(83,209,2)
(123,352,2)
(76,340,2)
(70,154,2)
(400,387,2)
(298,126,2)
(403,154,2)
(369,414,2)
(121,209,2)
(419,48,2)
(144,461,2)
(420,387,2)
(381,387,2)
(395,413,2)
(79,273,2)
(32,229,2)
(237,126,2)
(363,387,2)
(192,352,2)
(4,165,2)
(216,387,2)
(22,426,2)
(312,387,2)
(121,334,2)
(336,387,2)
(361,391,2)
(62,438,2)
(423,408,2)
(236,265,2)
(414,18,2)
(443,413,2)
(206,387,2)
(104,352,2)
(205,387,2)
(22,387,2)
(438,170,2)
(374,431,2)
(374,235,2)
(339,387,2)
(233,291,2)
(277,387,2)
(415,206,2)
(186,154,2)
(120,426,2)
(52,48,2)
(323,189,2)
(133,387,2)
(113,387,2)
(247,290,2)
(69,48,2)
(374,388,2)
(358,391,2)
(149,429,2)
(121,315,2)
(448,278,2)
(109,387,2)
(90,387,2)
(257,387,2)
(374,237,2)
(189,48,2)
(270,387,2)
(190,461,2)
(127,387,2)
(10,149,2)
(321,316,2)
(152,408,2)
(428,205,2)
(178,414,2)
(88,461,2)
(5,408,2)
(60,387,2)
(11,48,2)
(455,387,2)
(233,408,2)
(92,315,2)
(426,323,2)
(350,51,2)
(62,391,2)
(436,387,2)
(432,387,2)
(79,387,2)
(319,350,2)
(439,408,2)
(406,23,2)
(374,346,2)
(204,147,2)
(47,411,2)
(408,387,2)
(282,408,2)
(445,408,2)
(115,395,2)
(311,48,2)
(265,154,2)
(464,387,2)
(186,419,2)
(421,408,2)
(309,461,2)
(170,414,2)
(82,387,2)
(341,327,2)
(141,403,2)
(323,387,2)
(412,10,2)
(327,350,2)
(172,391,2)
(374,394,2)
(0,387,2)
(326,430,2)
(74,387,2)
(289,183,2)
(174,391,2)
(374,392,2)
(324,343,2)
(251,426,2)
(380,126,2)
(105,409,2)
(448,374,2)
(118,387,2)
(388,308,2)
(73,408,2)
(194,387,2)
(334,125,2)
(419,154,2)
(401,387,2)
(345,461,2)
(188,408,2)
(138,387,2)
(304,352,2)
(49,209,2)
(41,391,2)
(356,387,2)
(413,376,2)
(432,413,2)
(148,150,2)
(273,387,2)
(149,332,2)
(154,387,2)
(110,387,2)
(361,414,2)
(272,154,2)
(136,18,2)
(275,387,2)
(76,435,2)
(168,154,2)
(456,387,2)
(180,414,2)
(295,387,2)
(209,206,2)
(249,387,2)
(256,461,2)
(389,387,2)
(308,387,2)
(34,414,2)
(187,350,2)
(258,387,2)
(150,413,2)
(315,125,2)
(64,387,2)
(418,387,2)
(416,217,2)
(56,154,2)
(40,387,2)
(260,369,2)
(128,387,2)
(439,262,2)
(397,164,2)
(373,217,2)
(366,387,2)
(35,387,2)
(375,387,2)
(354,387,2)
(164,413,2)
(136,369,2)
(259,387,2)
(376,387,2)
(318,391,2)
(310,387,2)
(394,217,2)
(164,202,2)
(241,265,2)
(355,387,2)
(191,426,2)
(100,387,2)
(269,387,2)
(36,315,2)
(395,387,2)
(262,408,2)
(276,408,2)
(365,387,2)
(206,135,2)
(215,48,2)
(13,113,2)
(374,34,2)
(198,316,2)
(367,408,2)
(343,120,2)
(252,461,2)
(183,461,2)
(285,414,2)
(335,387,2)
(374,106,2)
(253,461,2)
(300,265,2)
(3,413,2)
(23,48,2)
(326,352,2)
(26,114,2)
(51,315,2)
(311,414,2)
(452,387,2)
(431,426,2)
(111,387,2)
(73,217,2)
(86,413,2)
(98,114,2)
(56,17,2)
(93,387,2)
(158,244,2)
(384,391,2)
(282,48,2)
(130,387,2)
(448,123,2)
(101,217,2)
(424,461,2)
(56,11,2)
(447,387,2)
(469,387,2)
(391,369,2)
(229,316,2)
(148,387,2)
(318,414,2)
(136,316,2)
(374,92,2)
(455,316,2)
(80,387,2)
(388,387,2)
(341,350,2)
(457,387,2)
(390,414,2)
(374,7,2)
(392,426,2)
(66,387,2)
(28,48,2)
(414,209,2)
(313,408,2)
(137,316,2)
(68,408,2)
(270,128,2)
(406,387,2)
(381,413,2)
(194,86,2)
(316,414,2)
(414,352,2)
(438,414,2)
(21,391,2)
(396,369,2)
(147,48,2)
(433,387,2)
(404,373,2)
(280,316,2)
(444,387,2)
(360,414,2)
(411,4,2)
(398,414,2)
(220,387,2)
(435,340,2)
(89,387,2)
(171,387,2)
(379,387,2)
(359,387,2)
(42,468,2)
(235,387,2)
(77,387,2)
(344,352,2)
(14,52,2)
(384,414,2)
(84,391,2)
(325,352,2)
(449,387,2)
(407,48,2)
(348,408,2)
(134,387,2)
(369,311,2)
(82,413,2)
(346,154,2)
(332,315,2)
(407,316,2)
(408,217,2)
(394,408,2)
(343,387,2)
(102,387,2)
(293,154,2)
(416,387,2)
(195,316,2)
(251,387,2)
(289,217,2)
(328,387,2)
(208,315,2)
(112,115,2)
(340,391,2)
(42,408,2)
(360,48,2)
(8,387,2)
(252,48,2)
(340,414,2)
(247,387,2)
(69,404,2)
(36,334,2)
(245,461,2)
(240,387,2)
(234,387,2)
(96,387,2)
(425,206,2)
(374,405,2)
(468,408,2)
(115,387,2)
(274,206,2)
(33,387,2)
(85,408,2)
(410,387,2)
(351,404,2)
(217,67,2)
(11,154,2)
(374,316,2)
(117,387,2)
(23,387,2)
(306,387,2)
(404,276,2)
(340,318,2)
(172,414,2)
(122,316,2)
(146,387,2)
(263,125,2)
(382,387,2)
(391,414,2)
(374,330,2)
(65,183,2)
(430,352,2)
(51,387,2)
(453,387,2)
(166,352,2)
(466,141,2)
(374,251,2)
(430,315,2)
(126,316,2)
(442,387,2)
(16,387,2)
(43,369,2)
(160,408,2)
(84,414,2)
(374,134,2)
(262,101,2)
(428,387,2)
(422,387,2)
(290,387,2)
(458,387,2)
(374,381,2)
(294,387,2)
(159,387,2)
(398,391,2)
(147,387,2)
(287,18,2)
(52,183,2)
(461,73,2)
(28,387,2)
(256,48,2)
(266,332,2)
(462,387,2)
(30,387,2)
(273,80,2)
(101,408,2)
(375,22,2)
-----------------------------------
(0,ppol)
(1,del_timer_sync(&ppol->policy_slack_timer)
(2,tunables)
(3,ppol->policy)
(4,cpufreq_frequency_get_table(policy->cpu)
(5,min_freq)
(6,ppol->target_freq = 0)
(7,common_tunables = tunables)
(8,ppol)
(9,if (policy->governor->initialized == 1)
(10,!tunables && (event != CPUFREQ_GOV_POLICY_INIT)
(11,get_governor_parent_kobj(policy)
(12,)
(13,mutex_lock(&gov_lock)
(14,ppol->target_freq = policy->min)
(15,ppol)
(16,hispeed_freq)
(17,get_sysfs_attr()
(18,tunables = get_tunables(ppol)
(19,flags)
(20,tunables)
(21,policy->governor_data = tunables)
(22,ppol->enable_sem)
(23,policy->min)
(24,ppol->policy_slack_timer)
(25,tunables)
(26,common_tunables)
(27,break;)
(28,get_policyinfo(policy)
(29,cpu)
(30,up_write(&ppol->enable_sem)
(31,true)
(32,&cpufreq_notifier_block)
(33,true)
(34,tunables->usage_count)
(35,policy)
(36,tunables->usage_count)
(37,if (!have_governor_per_policy()
(38,max)
(39,policy)
(40,ppol)
(41,tunables->usage_count = 1)
(42,ppol->min_freq = policy->min)
(43,cached_common_tunables = tunables)
(44,target_freq)
(45,cpu)
(46,floor_validate_time)
(47,ppol->freq_table = freq_table)
(48,struct cpufreq_policy *policy)
(49,tunables)
(50,NULL)
(51,tunables->hispeed_freq)
(52,policy->min)
(53,ppol->reject_notification = false)
(54,switch (event)
(55,cpufreq_notifier_block)
(56,sysfs_remove_group(get_governor_parent_kobj(policy)
(57,tunables)
(58,target_freq)
(59,ppol->target_freq)
(60,&ppol->enable_sem)
(61,break;)
(62,rc = sysfs_create_group(get_governor_parent_kobj(policy)
(63,NULL)
(64,ppol)
(65,min)
(66,ppol)
(67,per_cpu(polinfo, policy->cpu)
(68,ppol)
(69,policy->cpu)
(70,policy)
(71,polinfo)
(72,)
(73,ppol->target_freq)
(74,gov_lock)
(75,freq_table)
(76,WARN_ON(cpufreq_get_global_kobject()
(77,freq_table)
(78,policy_timer)
(79,up_write(&ppol->enable_sem)
(80,ppol->enable_sem)
(81,target_freq)
(82,ppol->last_evaluated_jiffy)
(83,get_tunables(ppol)
(84,get_sysfs_attr()
(85,min)
(86,ppol->policy_slack_timer)
(87,mutex_lock(&gov_lock)
(88,policy)
(89,mutex_unlock(&gov_lock)
(90,min_freq)
(91,ppol)
(92,tunables->hispeed_freq)
(93,ppol)
(94,policy)
(95,tunables)
(96,policy)
(97,get_jiffies_64()
(98,cpufreq_put_global_kobject()
(99,enable_sem)
(100,ppol)
(101,ppol->target_freq_lock)
(102,ppol)
(103,ppol)
(104,tunables)
(105,policy->governor->initialized)
(106,ppol->target_freq)
(107,tunables)
(108,if (policy->min < ppol->min_freq)
(109,&ppol->policy_slack_timer)
(110,ppol)
(111,policy)
(112,down_write(&ppol->enable_sem)
(113,&gov_lock)
(114,!have_governor_per_policy()
(115,&ppol->enable_sem)
(116,break;)
(117,ppol->enable_sem)
(118,tunables)
(119,ppol)
(120,ppol->policy_timer)
(121,WARN_ON(tunables)
(122,tunables)
(123,return 0;)
(124,if (policy->max < ppol->target_freq)
(125,have_governor_per_policy()
(126,have_governor_per_policy()
(127,min)
(128,&ppol->enable_sem)
(129,ppol)
(130,policy->cpu)
(131,tunables)
(132,false)
(133,policy_slack_timer)
(134,ppol->floor_validate_time)
(135,ppol = get_policyinfo(policy)
(136,kfree(tunables)
(137,policy)
(138,ppol)
(139,gov_lock)
(140,)
(141,!have_governor_per_policy()
(142,cpu)
(143,ppol->reject_notification = true)
(144,ppol->target_freq = policy->max)
(145,ppol)
(146,ppol)
(147,policy->cpu)
(148,ppol->floor_freq = ppol->target_freq)
(149,event != CPUFREQ_GOV_POLICY_INIT)
(150,ppol->target_freq)
(151,ppol)
(152,target_freq_lock)
(153,data)
(154,!--tunables->usage_count)
(155,if (!tunables)
(156,ppol)
(157,tunables)
(158,&ppol->enable_sem)
(159,ppol->reject_notification = false)
(160,ppol)
(161,policy->governor_data)
(162,ppol->governor_enabled)
(163,rc)
(164,ppol->floor_validate_time)
(165,policy->cpu)
(166,policy)
(167,down_write(&ppol->enable_sem)
(168,policy)
(169,governor)
(170,get_governor_parent_kobj(policy)
(171,freq_table)
(172,tunables)
(173,policy)
(174,tunables)
(175,governor_enabled)
(176,case CPUFREQ_GOV_LIMITS:)
(177,ppol)
(178,governor_data)
(179,target_freq_lock)
(180,tunables)
(181,)
(182,mutex_unlock(&gov_lock)
(183,policy->min > ppol->target_freq)
(184,last_evaluated_jiffy)
(185,if (!tunables->hispeed_freq)
(186,policy->governor->initialized)
(187,policy)
(188,policy)
(189,policy->cpu)
(190,min)
(191,ppol->target_freq)
(192,tunables)
(193,tunables)
(194,&ppol->policy_slack_timer)
(195,use_sched_load)
(196,ppol->target_freq = policy->cur)
(197,false)
(198,tunables)
(199,ppol)
(200,)
(201,polinfo)
(202,ppol->floor_validate_time = ktime_to_us(ktime_get()
(203,min)
(204,ppol->policy_timer.data = policy->cpu)
(205,&ppol->policy_timer)
(206,IS_ERR(ppol)
(207,policy)
(208,cpufreq_interactive_disable_sched_input(tunables)
(209,have_governor_per_policy()
(210,policy)
(211,policy_slack_timer)
(212,initialized)
(213,if (tunables->use_sched_load)
(214,case CPUFREQ_GOV_STOP:)
(215,policy->cur)
(216,target_freq)
(217,ppol = per_cpu(polinfo, policy->cpu)
(218,cpufreq_notifier_block)
(219,gov_lock)
(220,policy->cpu)
(221,ppol->target_freq_lock)
(222,case CPUFREQ_GOV_START:)
(223,policy_timer)
(224,true)
(225,if (rc)
(226,up_read(&ppol->enable_sem)
(227,)
(228,governor_data)
(229,!policy->governor->initialized)
(230,CPUFREQ_TRANSITION_NOTIFIER)
(231,ppol)
(232,if (have_governor_per_policy()
(233,spin_lock_irqsave(&ppol->target_freq_lock, flags)
(234,0)
(235,ppol->freq_table)
(236,cpufreq_unregister_notifier(&cpufreq_notifier_block,\n\\n\\t\\t\\t\\t\\t\\tCPUFREQ_TRANSITION_NOTIFIER)
(237,ppol->cached_tunables)
(238,if (have_governor_per_policy()
(239,tunables)
(240,enable_sem)
(241,&cpufreq_notifier_block)
(242,enable_sem)
(243,break;)
(244,ppol->enable_sem)
(245,ppol)
(246,polinfo)
(247,ktime_to_us(ktime_get()
(248,min_freq)
(249,cpu)
(250,if (!have_governor_per_policy()
(251,ppol->reject_notification)
(252,policy->min)
(253,policy)
(254,if (tunables->use_sched_load)
(255,common_tunables)
(256,policy->max)
(257,1)
(258,floor_freq)
(259,0)
(260,PTR_ERR(tunables)
(261,enable_sem)
(262,&ppol->target_freq_lock)
(263,tunables)
(264,governor)
(265,policy->governor->initialized == 1)
(266,CPUFREQ_GOV_POLICY_INIT)
(267,initialized)
(268,case CPUFREQ_GOV_POLICY_INIT:)
(269,policy)
(270,down_read(&ppol->enable_sem)
(271,)
(272,common_tunables)
(273,&ppol->enable_sem)
(274,ppol)
(275,reject_notification)
(276,policy->min)
(277,ppol)
(278,return PTR_ERR(tunables)
(279,cpufreq_register_notifier(&cpufreq_notifier_block,\n\\n\\t\\t\\t\\t\\tCPUFREQ_TRANSITION_NOTIFIER)
(280,rc)
(281,freq_table)
(282,policy->max)
(283,0)
(284,usage_count)
(285,1)
(286,target_freq)
(287,cpufreq_interactive_enable_sched_input(tunables)
(288,ppol)
(289,ppol->target_freq)
(290,ktime_get()
(291,&ppol->target_freq_lock)
(292,ppol->last_evaluated_jiffy = get_jiffies_64()
(293,NULL)
(294,policy)
(295,governor_enabled)
(296,return rc;)
(297,if (IS_ERR(ppol)
(298,tunables)
(299,)
(300,CPUFREQ_TRANSITION_NOTIFIER)
(301,ppol)
(302,event)
(303,&gov_lock)
(304,usage_count)
(305,if (!policy->governor->initialized)
(306,cur)
(307,ppol->governor_enabled = 1)
(308,ppol->policy_timer)
(309,max)
(310,governor_data)
(311,alloc_tunable(policy)
(312,ppol)
(313,flags)
(314,have_governor_per_policy()
(315,tunables = policy->governor_data)
(316,rc)
(317,ppol)
(318,have_governor_per_policy()
(319,hispeed_freq)
(320,policy)
(321,policy->governor_data = NULL)
(322,policy)
(323,per_cpu(polinfo, policy->cpu)
(324,del_timer_sync(&ppol->policy_timer)
(325,governor_data)
(326,tunables->usage_count++)
(327,policy->max)
(328,cpu)
(329,if (!--tunables->usage_count)
(330,policy->governor_data)
(331,&gov_lock)
(332,!tunables)
(333,cpufreq_interactive_timer_resched(policy->cpu,\n\\n\\t\\t\\t\\t\\t\\t\\t\\t  true)
(334,tunables = common_tunables)
(335,ppol)
(336,use_sched_load)
(337,cpufreq_interactive_timer_start(tunables, policy->cpu)
(338,tunables->use_sched_load)
(339,enable_sem)
(340,!have_governor_per_policy()
(341,tunables->hispeed_freq = policy->max)
(342,cached_common_tunables)
(343,&ppol->policy_timer)
(344,policy->governor_data)
(345,ppol->target_freq)
(346,common_tunables = NULL)
(347,common_tunables)
(348,ppol)
(349,tunables)
(350,!tunables->hispeed_freq)
(351,policy)
(352,tunables)
(353,if (IS_ERR(tunables)
(354,&gov_lock)
(355,gov_lock)
(356,ppol)
(357,reject_notification)
(358,usage_count)
(359,ppol)
(360,policy->governor_data)
(361,policy)
(362,1)
(363,policy->governor_data = NULL)
(364,policy)
(365,policy)
(366,ppol)
(367,flags)
(368,policy)
(369,tunables = alloc_tunable(policy)
(370,policy->governor_data = tunables)
(371,)
(372,ppol)
(373,ppol->min_freq)
(374,return 0;)
(375,&ppol->enable_sem)
(376,per_cpu(polinfo, policy->cpu)
(377,NULL)
(378,tunables)
(379,ppol)
(380,tunables)
(381,ppol->reject_notification)
(382,ppol->reject_notification = true)
(383,policy)
(384,rc)
(385,policy_timer)
(386,tunables)
(387,event)
(388,ppol->policy_timer.data)
(389,ppol->min_freq)
(390,policy)
(391,IS_ERR(tunables)
(392,ppol->reject_notification)
(393,)
(394,ppol->min_freq)
(395,ppol->enable_sem)
(396,ppol->cached_tunables = tunables)
(397,ppol->hispeed_validate_time = ppol->floor_validate_time)
(398,policy)
(399,reject_notification)
(400,target_freq)
(401,tunables)
(402,governor_enabled)
(403,have_governor_per_policy()
(404,policy->min < ppol->min_freq)
(405,ppol->floor_freq)
(406,ppol->min_freq = policy->min)
(407,policy->governor_data)
(408,ppol->governor_enabled)
(409,policy->governor)
(410,policy)
(411,freq_table = cpufreq_frequency_get_table(policy->cpu)
(412,BUG_ON(!tunables && (event != CPUFREQ_GOV_POLICY_INIT)
(413,ppol = per_cpu(polinfo, policy->cpu)
(414,!tunables)
(415,return PTR_ERR(ppol)
(416,ppol->enable_sem)
(417,policy->cur)
(418,cpu)
(419,policy->governor)
(420,ppol)
(421,policy)
(422,ppol)
(423,ppol)
(424,target_freq)
(425,PTR_ERR(ppol)
(426,ppol = per_cpu(polinfo, policy->cpu)
(427,ppol->hispeed_validate_time)
(428,del_timer_sync(&ppol->policy_timer)
(429,unsigned int event)
(430,tunables->usage_count)
(431,ppol->governor_enabled)
(432,ppol->policy_timer)
(433,policy->cpu)
(434,__cpufreq_driver_target(policy,\n\\n\\t\\t\\t\\tpolicy->cur, CPUFREQ_RELATION_L)
(435,cpufreq_get_global_kobject()
(436,tunables->use_sched_load)
(437,ppol)
(438,sysfs_create_group(get_governor_parent_kobj(policy)
(439,spin_unlock_irqrestore(&ppol->target_freq_lock, flags)
(440,common_tunables = NULL)
(441,case CPUFREQ_GOV_POLICY_EXIT:)
(442,ppol->governor_enabled = 0)
(443,ppol->reject_notification)
(444,hispeed_validate_time)
(445,policy)
(446,if (ppol->governor_enabled)
(447,del_timer_sync(&ppol->policy_slack_timer)
(448,RET)
(449,cur)
(450,max)
(451,governor_data)
(452,CPUFREQ_RELATION_L)
(453,ppol)
(454,reject_notification)
(455,0)
(456,ppol->policy = policy)
(457,ppol)
(458,ppol)
(459,if (!have_governor_per_policy()
(460,cached_tunables)
(461,policy->max < ppol->target_freq)
(462,enable_sem)
(463,--tunables->usage_count)
(464,ppol)
(465,floor_validate_time)
(466,cpufreq_put_global_kobject()
(467,if (have_governor_per_policy()
(468,policy->min)
(469,break;)
(470,cpu)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^