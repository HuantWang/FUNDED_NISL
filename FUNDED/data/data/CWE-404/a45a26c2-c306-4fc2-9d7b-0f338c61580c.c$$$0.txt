-----label-----
1
-----code-----
static int stage2_set_pte(struct kvm *kvm, struct kvm_mmu_memory_cache *cache,
			  phys_addr_t addr, const pte_t *new_pte, bool iomap)
{
	pmd_t *pmd;
	pte_t *pte, old_pte;

	/* Create stage-2 page table mapping - Levels 0 and 1 */
	pmd = stage2_get_pmd(kvm, cache, addr);
	if (!pmd) {
		/*
		 * Ignore calls from kvm_set_spte_hva for unallocated
		 * address ranges.
		 */
		return 0;
	}

	/* Create stage-2 page mappings - Level 2 */
	if (pmd_none(*pmd)) {
		if (!cache)
			return 0; /* ignore calls from kvm_set_spte_hva */
		pte = mmu_memory_cache_alloc(cache);
		kvm_clean_pte(pte);
		pmd_populate_kernel(NULL, pmd, pte);
		get_page(virt_to_page(pmd));
	}

	pte = pte_offset_kernel(pmd, addr);

	if (iomap && pte_present(*pte))
		return -EFAULT;

	/* Create 2nd stage page table mapping - Level 3 */
	old_pte = *pte;
	if (pte_present(old_pte)) {
		/* Skip page table update if there is no change */
		if (pte_val(old_pte) == pte_val(*new_pte))
			return 0;

		kvm_set_pte(pte, __pte(0));
		kvm_tlb_flush_vmid_ipa(kvm, addr);
	} else {
		get_page(virt_to_page(pte));
	}

	kvm_set_pte(pte, *new_pte);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
30,31
32,33
32,34
32,35
32,36
32,37
32,38
32,39
32,40
32,41
32,42
32,43
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
44,46
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
53,57
54,55
56,57
58,59
60,61
62,63
62,64
63,64
64,65
66,67
67,68
69,70
69,71
70,71
70,72
71,72
73,74
74,75
76,77
76,78
76,79
76,80
76,81
77,78
77,79
78,79
79,80
81,82
83,84
84,85
84,86
85,86
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
99,102
99,103
100,101
102,103
104,105
106,107
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
121,123
121,124
122,123
124,125
126,127
128,129
128,130
129,130
129,131
130,131
132,133
132,134
133,134
135,136
136,137
138,139
139,140
140,141
142,143
143,144
143,145
144,145
146,147
147,148
149,150
149,151
149,152
150,151
150,152
151,152
153,154
155,156
155,157
155,158
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
166,167
167,168
169,170
171,172
172,173
172,174
172,175
173,174
175,176
177,178
177,179
178,179
181,182
182,183
182,184
182,185
183,184
185,186
187,188
189,190
190,191
191,192
191,193
192,193
194,195
194,196
195,196
197,198
199,200
200,201
200,202
200,203
201,202
203,204
205,206
206,207
208,209
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,27,29,31,36,38,39,43,45,46,48,52,55,57,59,61,65,68,72,75,80,82,86,89,91,95,97,101,103,105,107,111,114,116,120,123,125,127,131,134,137,141,145,148,152,154,160,162,165,168,170,174,176,179,180,184,186,188,193,196,198,202,204,207,209
-----computeFrom-----
50,51
50,52
84,85
84,86
118,119
118,120
129,130
129,131
143,144
143,145
157,158
157,159
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int stage2_set_pte(struct kvm *kvm, struct kvm_mmu_memory_cache *cache,			  phys_addr_t addr, const pte_t *new_pte, bool iomap){	pmd_t *pmd;	pte_t *pte, old_pte;	/* Create stage-2 page table mapping - Levels 0 and 1 */	pmd = stage2_get_pmd(kvm, cache, addr);	if (!pmd) {		/*		 * Ignore calls from kvm_set_spte_hva for unallocated		 * address ranges.		 */		return 0;	}	/* Create stage-2 page mappings - Level 2 */	if (pmd_none(*pmd)) {		if (!cache)			return 0; /* ignore calls from kvm_set_spte_hva */		pte = mmu_memory_cache_alloc(cache);		kvm_clean_pte(pte);		pmd_populate_kernel(NULL, pmd, pte);		get_page(virt_to_page(pmd));	}	pte = pte_offset_kernel(pmd, addr);	if (iomap && pte_present(*pte))		return -EFAULT;	/* Create 2nd stage page table mapping - Level 3 */	old_pte = *pte;	if (pte_present(old_pte)) {		/* Skip page table update if there is no change */		if (pte_val(old_pte) == pte_val(*new_pte))			return 0;		kvm_set_pte(pte, __pte(0));		kvm_tlb_flush_vmid_ipa(kvm, addr);	} else {		get_page(virt_to_page(pte));	}	kvm_set_pte(pte, *new_pte);	return 0;}
static int
stage2_set_pte(struct kvm *kvm, struct kvm_mmu_memory_cache *cache,			  phys_addr_t addr, const pte_t *new_pte, bool iomap)
stage2_set_pte
struct kvm *kvm
struct kvm
kvm
*kvm
*
kvm
struct kvm_mmu_memory_cache *cache
struct kvm_mmu_memory_cache
kvm_mmu_memory_cache
*cache
*
cache
phys_addr_t addr
phys_addr_t
phys_addr_t
addr
addr
const pte_t *new_pte
const pte_t
pte_t
*new_pte
*
new_pte
bool iomap
bool
iomap
iomap
{	pmd_t *pmd;	pte_t *pte, old_pte;	/* Create stage-2 page table mapping - Levels 0 and 1 */	pmd = stage2_get_pmd(kvm, cache, addr);	if (!pmd) {		/*		 * Ignore calls from kvm_set_spte_hva for unallocated		 * address ranges.		 */		return 0;	}	/* Create stage-2 page mappings - Level 2 */	if (pmd_none(*pmd)) {		if (!cache)			return 0; /* ignore calls from kvm_set_spte_hva */		pte = mmu_memory_cache_alloc(cache);		kvm_clean_pte(pte);		pmd_populate_kernel(NULL, pmd, pte);		get_page(virt_to_page(pmd));	}	pte = pte_offset_kernel(pmd, addr);	if (iomap && pte_present(*pte))		return -EFAULT;	/* Create 2nd stage page table mapping - Level 3 */	old_pte = *pte;	if (pte_present(old_pte)) {		/* Skip page table update if there is no change */		if (pte_val(old_pte) == pte_val(*new_pte))			return 0;		kvm_set_pte(pte, __pte(0));		kvm_tlb_flush_vmid_ipa(kvm, addr);	} else {		get_page(virt_to_page(pte));	}	kvm_set_pte(pte, *new_pte);	return 0;}
pmd_t *pmd;
pmd_t *pmd;
pmd_t
pmd_t
*pmd
*
pmd
pte_t *pte, old_pte;
pte_t *pte, old_pte;
pte_t
pte_t
*pte
*
pte
old_pte
old_pte
pmd = stage2_get_pmd(kvm, cache, addr);
pmd = stage2_get_pmd(kvm, cache, addr)
pmd
pmd
stage2_get_pmd(kvm, cache, addr)
stage2_get_pmd
stage2_get_pmd
kvm
kvm
cache
cache
addr
addr
if (!pmd) {		/*		 * Ignore calls from kvm_set_spte_hva for unallocated		 * address ranges.		 */		return 0;	}
!pmd
pmd
pmd
{		/*		 * Ignore calls from kvm_set_spte_hva for unallocated		 * address ranges.		 */		return 0;	}
return 0;
0
if (pmd_none(*pmd)) {		if (!cache)			return 0; /* ignore calls from kvm_set_spte_hva */		pte = mmu_memory_cache_alloc(cache);		kvm_clean_pte(pte);		pmd_populate_kernel(NULL, pmd, pte);		get_page(virt_to_page(pmd));	}
pmd_none(*pmd)
pmd_none
pmd_none
*pmd
pmd
pmd
{		if (!cache)			return 0; /* ignore calls from kvm_set_spte_hva */		pte = mmu_memory_cache_alloc(cache);		kvm_clean_pte(pte);		pmd_populate_kernel(NULL, pmd, pte);		get_page(virt_to_page(pmd));	}
if (!cache)			return 0;
!cache
cache
cache
return 0;
0
pte = mmu_memory_cache_alloc(cache);
pte = mmu_memory_cache_alloc(cache)
pte
pte
mmu_memory_cache_alloc(cache)
mmu_memory_cache_alloc
mmu_memory_cache_alloc
cache
cache
kvm_clean_pte(pte);
kvm_clean_pte(pte)
kvm_clean_pte
kvm_clean_pte
pte
pte
pmd_populate_kernel(NULL, pmd, pte);
pmd_populate_kernel(NULL, pmd, pte)
pmd_populate_kernel
pmd_populate_kernel
NULL
NULL
pmd
pmd
pte
pte
get_page(virt_to_page(pmd));
get_page(virt_to_page(pmd))
get_page
get_page
virt_to_page(pmd)
virt_to_page
virt_to_page
pmd
pmd
pte = pte_offset_kernel(pmd, addr);
pte = pte_offset_kernel(pmd, addr)
pte
pte
pte_offset_kernel(pmd, addr)
pte_offset_kernel
pte_offset_kernel
pmd
pmd
addr
addr
if (iomap && pte_present(*pte))		return -EFAULT;
iomap && pte_present(*pte)
iomap
iomap
pte_present(*pte)
pte_present
pte_present
*pte
pte
pte
return -EFAULT;
-EFAULT
EFAULT
EFAULT
old_pte = *pte;
old_pte = *pte
old_pte
old_pte
*pte
pte
pte
if (pte_present(old_pte)) {		/* Skip page table update if there is no change */		if (pte_val(old_pte) == pte_val(*new_pte))			return 0;		kvm_set_pte(pte, __pte(0));		kvm_tlb_flush_vmid_ipa(kvm, addr);	} else {		get_page(virt_to_page(pte));	}
pte_present(old_pte)
pte_present
pte_present
old_pte
old_pte
{		/* Skip page table update if there is no change */		if (pte_val(old_pte) == pte_val(*new_pte))			return 0;		kvm_set_pte(pte, __pte(0));		kvm_tlb_flush_vmid_ipa(kvm, addr);	}
if (pte_val(old_pte) == pte_val(*new_pte))			return 0;
pte_val(old_pte) == pte_val(*new_pte)
pte_val(old_pte)
pte_val
pte_val
old_pte
old_pte
pte_val(*new_pte)
pte_val
pte_val
*new_pte
new_pte
new_pte
return 0;
0
kvm_set_pte(pte, __pte(0));
kvm_set_pte(pte, __pte(0))
kvm_set_pte
kvm_set_pte
pte
pte
__pte(0)
__pte
__pte
0
kvm_tlb_flush_vmid_ipa(kvm, addr);
kvm_tlb_flush_vmid_ipa(kvm, addr)
kvm_tlb_flush_vmid_ipa
kvm_tlb_flush_vmid_ipa
kvm
kvm
addr
addr
{		get_page(virt_to_page(pte));	}
get_page(virt_to_page(pte));
get_page(virt_to_page(pte))
get_page
get_page
virt_to_page(pte)
virt_to_page
virt_to_page
pte
pte
kvm_set_pte(pte, *new_pte);
kvm_set_pte(pte, *new_pte)
kvm_set_pte
kvm_set_pte
pte
pte
*new_pte
new_pte
new_pte
return 0;
0
-----joern-----
(65,63,0)
(6,5,0)
(49,56,0)
(77,44,0)
(19,92,0)
(23,54,0)
(61,78,0)
(24,12,0)
(47,69,0)
(39,67,0)
(49,78,0)
(16,9,0)
(8,2,0)
(83,29,0)
(12,24,0)
(59,29,0)
(39,8,0)
(85,67,0)
(46,8,0)
(42,39,0)
(88,21,0)
(7,91,0)
(15,32,0)
(23,78,0)
(72,31,0)
(29,54,0)
(21,17,0)
(89,14,0)
(89,4,0)
(36,67,0)
(62,68,0)
(58,91,0)
(35,34,0)
(34,80,0)
(68,77,0)
(79,10,0)
(86,78,0)
(92,2,0)
(33,79,0)
(52,26,0)
(60,54,0)
(20,87,0)
(57,65,0)
(61,71,0)
(0,65,0)
(78,67,0)
(25,24,0)
(4,67,0)
(8,39,0)
(48,67,0)
(89,9,0)
(54,67,0)
(10,78,0)
(73,67,0)
(76,49,0)
(51,65,0)
(30,3,0)
(91,55,0)
(44,77,0)
(56,49,0)
(10,79,0)
(44,17,0)
(27,61,0)
(31,66,0)
(22,14,0)
(69,47,0)
(24,55,0)
(20,71,0)
(38,92,0)
(13,84,0)
(78,81,0)
(64,4,0)
(55,67,0)
(77,5,0)
(83,19,0)
(81,78,0)
(29,83,0)
(12,5,0)
(82,23,0)
(3,54,0)
(34,26,0)
(37,44,0)
(50,67,0)
(69,55,0)
(68,5,0)
(89,1,0)
(71,20,0)
(43,55,0)
(65,17,0)
(11,81,0)
(70,69,0)
(10,26,0)
(75,77,0)
(81,55,0)
(91,77,0)
(56,18,0)
(74,67,0)
(53,91,0)
(40,10,0)
(84,55,0)
(71,61,0)
(90,20,0)
(32,1,0)
(81,63,0)
(55,65,0)
(54,23,0)
(39,78,0)
(65,55,0)
(28,81,0)
(41,34,0)
(19,83,0)
(89,31,0)
(45,67,0)
(34,63,0)
(92,19,0)
(65,80,0)
(91,5,0)
(84,55,1)
(33,40,1)
(34,80,1)
(64,39,1)
(39,8,1)
(13,55,1)
(62,77,1)
(29,54,1)
(71,61,1)
(27,90,1)
(19,92,1)
(0,57,1)
(57,51,1)
(12,24,1)
(77,44,1)
(65,17,1)
(70,84,1)
(86,12,1)
(30,54,1)
(49,76,1)
(54,23,1)
(53,58,1)
(34,63,1)
(20,87,1)
(25,91,1)
(40,83,1)
(8,2,1)
(31,72,1)
(81,11,1)
(47,69,1)
(1,32,1)
(10,79,1)
(83,19,1)
(92,38,1)
(16,83,1)
(37,75,1)
(20,71,1)
(89,31,1)
(7,53,1)
(65,63,1)
(60,20,1)
(68,62,1)
(10,78,1)
(79,33,1)
(46,42,1)
(23,82,1)
(20,90,1)
(89,1,1)
(84,13,1)
(88,47,1)
(42,34,1)
(22,21,1)
(76,3,1)
(65,80,1)
(86,47,1)
(24,55,1)
(69,70,1)
(15,20,1)
(61,27,1)
(59,3,1)
(3,54,1)
(39,78,1)
(24,25,1)
(89,4,1)
(34,41,1)
(35,10,1)
(83,29,1)
(21,17,1)
(49,78,1)
(14,22,1)
(89,14,1)
(72,84,1)
(89,9,1)
(4,64,1)
(8,46,1)
(82,60,1)
(65,0,1)
(90,78,1)
(32,15,1)
(91,77,1)
(23,78,1)
(11,28,1)
(61,78,1)
(69,55,1)
(92,2,1)
(91,7,1)
(81,63,1)
(44,17,1)
(42,56,1)
(68,77,1)
(58,68,1)
(78,81,1)
(75,21,1)
(91,55,1)
(29,59,1)
(3,30,1)
(51,43,1)
(9,16,1)
(41,35,1)
(56,49,1)
(44,37,1)
(28,86,1)
(21,88,1)
(81,55,1)
(38,29,1)
(55,65,1)
(59,3,2)
(39,8,2)
(37,21,2)
(81,63,2)
(81,47,2)
(79,83,2)
(10,78,2)
(31,84,2)
(65,17,2)
(47,69,2)
(15,20,2)
(78,21,2)
(28,47,2)
(49,3,2)
(8,3,2)
(42,83,2)
(12,21,2)
(46,3,2)
(29,3,2)
(53,21,2)
(11,47,2)
(90,21,2)
(32,20,2)
(35,83,2)
(89,4,2)
(44,17,2)
(16,83,2)
(4,3,2)
(49,78,2)
(68,21,2)
(65,80,2)
(92,2,2)
(24,55,2)
(78,81,2)
(69,55,2)
(83,29,2)
(23,20,2)
(24,21,2)
(92,3,2)
(22,21,2)
(83,19,2)
(83,3,2)
(19,3,2)
(7,21,2)
(71,90,2)
(89,31,2)
(8,83,2)
(76,3,2)
(39,3,2)
(56,49,2)
(40,83,2)
(90,47,2)
(8,2,2)
(77,44,2)
(89,9,2)
(68,77,2)
(27,90,2)
(84,55,2)
(69,84,2)
(75,21,2)
(81,21,2)
(91,21,2)
(34,83,2)
(81,55,2)
(44,21,2)
(10,83,2)
(82,20,2)
(20,87,2)
(21,47,2)
(29,54,2)
(70,84,2)
(3,54,2)
(89,1,2)
(88,47,2)
(12,24,2)
(23,78,2)
(72,84,2)
(89,14,2)
(19,92,2)
(25,21,2)
(62,21,2)
(34,80,2)
(20,21,2)
(61,78,2)
(39,78,2)
(61,90,2)
(91,77,2)
(1,20,2)
(10,79,2)
(4,83,2)
(86,47,2)
(34,63,2)
(41,83,2)
(9,83,2)
(46,83,2)
(39,83,2)
(91,55,2)
(20,47,2)
(11,21,2)
(42,3,2)
(38,3,2)
(77,21,2)
(3,20,2)
(20,71,2)
(30,20,2)
(86,21,2)
(71,61,2)
(33,83,2)
(54,20,2)
(47,84,2)
(14,21,2)
(56,3,2)
(21,17,2)
(64,83,2)
(78,47,2)
(55,65,2)
(60,20,2)
(58,21,2)
(28,21,2)
(64,3,2)
(65,63,2)
(54,23,2)
-----------------------------------
(0,addr)
(1,return -EFAULT;)
(2,const pte_t *new_pte)
(3,pte_present(old_pte)
(4,return 0;)
(5,)
(6,if (!cache)
(7,pte)
(8,*new_pte)
(9,return 0;)
(10,kvm_set_pte(pte, __pte(0)
(11,addr)
(12,get_page(virt_to_page(pmd)
(13,pmd)
(14,return 0;)
(15,EFAULT)
(16,0)
(17,struct kvm_mmu_memory_cache *cache)
(18,)
(19,pte_val(*new_pte)
(20,iomap && pte_present(*pte)
(21,!cache)
(22,0)
(23,*pte)
(24,virt_to_page(pmd)
(25,pmd)
(26,)
(27,pte)
(28,pmd)
(29,pte_val(old_pte)
(30,old_pte)
(31,return 0;)
(32,-EFAULT)
(33,0)
(34,kvm_tlb_flush_vmid_ipa(kvm, addr)
(35,kvm)
(36,if (iomap && pte_present(*pte)
(37,cache)
(38,new_pte)
(39,kvm_set_pte(pte, *new_pte)
(40,pte)
(41,addr)
(42,pte)
(43,pmd)
(44,mmu_memory_cache_alloc(cache)
(45,if (pmd_none(*pmd)
(46,new_pte)
(47,pmd_none(*pmd)
(48,if (!pmd)
(49,virt_to_page(pte)
(50,pte)
(51,kvm)
(52,if (pte_val(old_pte)
(53,pmd)
(54,old_pte = *pte)
(55,pmd = stage2_get_pmd(kvm, cache, addr)
(56,get_page(virt_to_page(pte)
(57,cache)
(58,NULL)
(59,old_pte)
(60,old_pte)
(61,*pte)
(62,pte)
(63,phys_addr_t addr)
(64,0)
(65,stage2_get_pmd(kvm, cache, addr)
(66,)
(67,)
(68,kvm_clean_pte(pte)
(69,*pmd)
(70,pmd)
(71,pte_present(*pte)
(72,0)
(73,old_pte)
(74,pmd)
(75,pte)
(76,pte)
(77,pte = mmu_memory_cache_alloc(cache)
(78,pte = pte_offset_kernel(pmd, addr)
(79,__pte(0)
(80,struct kvm *kvm)
(81,pte_offset_kernel(pmd, addr)
(82,pte)
(83,pte_val(old_pte)
(84,!pmd)
(85,if (pte_present(old_pte)
(86,pte)
(87,bool iomap)
(88,cache)
(89,RET)
(90,iomap)
(91,pmd_populate_kernel(NULL, pmd, pte)
(92,*new_pte)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^