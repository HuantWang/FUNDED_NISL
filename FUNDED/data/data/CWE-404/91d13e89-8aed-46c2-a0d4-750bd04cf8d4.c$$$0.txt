-----label-----
1
-----code-----
int * CWE401_Memory_Leak__int_calloc_61b_badSource(int * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
57,58
58,59
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,46,47,48,52,55,56,59
-----computeFrom-----
13,14
13,15
30,31
30,32
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
int * CWE401_Memory_Leak__int_calloc_61b_badSource(int * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
int
* CWE401_Memory_Leak__int_calloc_61b_badSource(int * data)
*
CWE401_Memory_Leak__int_calloc_61b_badSource
int * data
int
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    return data;}
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(17,22,0)
(23,20,0)
(15,19,0)
(21,18,0)
(30,14,0)
(7,13,0)
(26,19,0)
(26,30,0)
(18,27,0)
(24,16,0)
(9,20,0)
(12,22,0)
(10,26,0)
(13,27,0)
(28,27,0)
(19,26,0)
(30,26,0)
(8,13,0)
(30,23,0)
(13,23,0)
(29,20,0)
(3,23,0)
(1,28,0)
(5,28,0)
(16,24,0)
(22,29,0)
(14,30,0)
(24,6,0)
(22,27,0)
(25,29,0)
(22,23,0)
(18,23,0)
(11,18,0)
(4,18,0)
(23,30,0)
(28,23,0)
(18,29,0)
(18,4,0)
(23,27,0)
(0,16,0)
(4,20,0)
(13,20,0)
(25,22,1)
(19,15,1)
(22,23,1)
(18,29,1)
(28,27,1)
(24,16,1)
(17,28,1)
(1,5,1)
(23,30,1)
(28,23,1)
(29,25,1)
(18,27,1)
(13,27,1)
(26,19,1)
(0,28,1)
(4,18,1)
(12,17,1)
(8,4,1)
(23,27,1)
(30,14,1)
(21,29,1)
(22,12,1)
(11,21,1)
(30,26,1)
(22,27,1)
(17,24,1)
(28,1,1)
(18,11,1)
(10,3,1)
(16,0,1)
(13,8,1)
(13,23,1)
(18,23,1)
(5,23,1)
(15,10,1)
(7,13,1)
(7,13,2)
(13,23,2)
(24,28,2)
(18,29,2)
(30,14,2)
(23,27,2)
(26,19,2)
(18,27,2)
(28,23,2)
(24,16,2)
(30,26,2)
(23,30,2)
(16,28,2)
(0,28,2)
(28,27,2)
(22,23,2)
(4,18,2)
(13,27,2)
(18,23,2)
(22,27,2)
-----------------------------------
(0,1)
(1,NULL)
(2, sizeof(int)
(3,data)
(4,printIntLine(data[0])
(5,data)
(6,)
(7,RET)
(8,data)
(9,if (data == NULL)
(10,100)
(11,0)
(12,0)
(13,return data;)
(14,int *)
(15,int)
(16,-1)
(17,data)
(18,data[0])
(19,sizeof(int)
(20,)
(21,data)
(22,data[0])
(23,data = (int *)
(24,exit(-1)
(25,5)
(26,calloc(100, sizeof(int)
(27,int * data)
(28,data == NULL)
(29,data[0] = 5)
(30,(int *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^