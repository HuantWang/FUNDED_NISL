-----label-----
0
-----code-----
static int svm_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr)
{
	struct vcpu_svm *svm = to_svm(vcpu);

	u32 ecx = msr->index;
	u64 data = msr->data;
	switch (ecx) {
	case MSR_IA32_CR_PAT:
		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))
			return 1;
		vcpu->arch.pat = data;
		svm->vmcb->save.g_pat = data;
		mark_dirty(svm->vmcb, VMCB_NPT);
		break;
	case MSR_IA32_TSC:
		kvm_write_tsc(vcpu, msr);
		break;
	case MSR_STAR:
		svm->vmcb->save.star = data;
		break;
#ifdef CONFIG_X86_64
	case MSR_LSTAR:
		svm->vmcb->save.lstar = data;
		break;
	case MSR_CSTAR:
		svm->vmcb->save.cstar = data;
		break;
	case MSR_KERNEL_GS_BASE:
		svm->vmcb->save.kernel_gs_base = data;
		break;
	case MSR_SYSCALL_MASK:
		svm->vmcb->save.sfmask = data;
		break;
#endif
	case MSR_IA32_SYSENTER_CS:
		svm->vmcb->save.sysenter_cs = data;
		break;
	case MSR_IA32_SYSENTER_EIP:
		svm->sysenter_eip = data;
		svm->vmcb->save.sysenter_eip = data;
		break;
	case MSR_IA32_SYSENTER_ESP:
		svm->sysenter_esp = data;
		svm->vmcb->save.sysenter_esp = data;
		break;
	case MSR_IA32_DEBUGCTLMSR:
		if (!boot_cpu_has(X86_FEATURE_LBRV)) {
			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",
				    __func__, data);
			break;
		}
		if (data & DEBUGCTL_RESERVED_BITS)
			return 1;

		svm->vmcb->save.dbgctl = data;
		mark_dirty(svm->vmcb, VMCB_LBR);
		if (data & (1ULL<<0))
			svm_enable_lbrv(svm);
		else
			svm_disable_lbrv(svm);
		break;
	case MSR_VM_HSAVE_PA:
		svm->nested.hsave_msr = data;
		break;
	case MSR_VM_CR:
		return svm_set_vm_cr(vcpu, data);
	case MSR_VM_IGNNE:
		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);
		break;
	default:
		return kvm_set_msr_common(vcpu, msr);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
46,48
48,49
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
56,59
56,60
56,61
56,62
56,63
56,64
56,65
56,66
56,67
56,68
56,69
56,70
56,71
56,72
56,73
56,74
56,75
56,76
56,77
56,78
56,79
56,80
56,81
56,82
56,83
56,84
56,85
56,86
56,87
56,88
56,89
56,90
56,91
56,92
56,93
56,94
56,95
56,96
57,58
58,59
60,61
60,62
61,62
62,63
62,64
62,65
62,66
63,64
65,66
67,68
69,70
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
81,82
83,84
84,85
84,86
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
95,96
96,97
96,98
96,99
97,98
99,100
99,101
100,101
103,104
106,107
107,108
109,110
110,111
110,112
110,113
111,112
113,114
115,116
118,119
119,120
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
125,127
126,127
131,132
134,135
135,136
137,138
138,139
138,140
139,140
139,141
140,141
140,142
141,142
141,143
142,143
147,148
150,151
151,152
153,154
154,155
154,156
155,156
155,157
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
164,166
165,166
165,167
166,167
171,172
174,175
175,176
177,178
178,179
178,180
179,180
179,181
180,181
183,184
185,186
186,187
186,188
187,188
187,189
188,189
188,190
189,190
189,191
190,191
195,196
198,199
199,200
201,202
201,203
202,203
203,204
203,205
204,205
206,207
208,209
208,210
209,210
210,211
210,212
210,213
210,214
210,215
211,212
213,214
216,217
218,219
221,222
221,223
222,223
222,224
223,224
225,226
227,228
229,230
230,231
230,232
231,232
231,233
232,233
232,234
233,234
233,235
234,235
239,240
241,242
242,243
242,244
242,245
243,244
245,246
245,247
246,247
249,250
251,252
251,253
251,254
252,253
252,254
253,254
255,256
256,257
256,258
259,260
260,261
260,262
261,262
263,264
265,266
266,267
266,268
267,268
269,270
272,273
273,274
275,276
276,277
276,278
277,278
277,279
278,279
278,280
279,280
283,284
286,287
287,288
289,290
290,291
290,292
290,293
291,292
293,294
295,296
297,298
298,299
300,301
301,302
301,303
301,304
301,305
301,306
302,303
304,305
307,308
309,310
313,314
314,315
314,316
314,317
315,316
317,318
319,320
321,322
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,34,36,40,41,45,47,51,52,55,59,64,66,68,70,72,78,79,80,82,89,90,91,92,94,98,101,102,104,105,108,112,114,116,117,120,127,128,129,130,132,133,136,143,144,145,146,148,149,152,157,158,160,167,168,169,170,172,173,176,181,182,184,191,192,193,194,196,197,200,205,207,212,214,215,217,219,220,224,226,228,235,236,237,238,240,244,247,248,250,254,257,258,262,264,268,270,271,274,280,281,282,284,285,288,292,294,296,299,303,305,306,308,310,311,312,316,318,320,322
-----computeFrom-----
74,75
74,76
84,85
84,86
122,123
122,124
138,139
138,140
154,155
154,156
162,163
162,164
178,179
178,180
186,187
186,188
222,223
222,224
230,231
230,232
252,253
252,254
256,257
256,258
276,277
276,278
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int svm_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr){	struct vcpu_svm *svm = to_svm(vcpu);	u32 ecx = msr->index;	u64 data = msr->data;	switch (ecx) {	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	default:		return kvm_set_msr_common(vcpu, msr);	}	return 0;}
static int
svm_set_msr(struct kvm_vcpu *vcpu, struct msr_data *msr)
svm_set_msr
struct kvm_vcpu *vcpu
struct kvm_vcpu
kvm_vcpu
*vcpu
*
vcpu
struct msr_data *msr
struct msr_data
msr_data
*msr
*
msr
{	struct vcpu_svm *svm = to_svm(vcpu);	u32 ecx = msr->index;	u64 data = msr->data;	switch (ecx) {	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	default:		return kvm_set_msr_common(vcpu, msr);	}	return 0;}
struct vcpu_svm *svm = to_svm(vcpu);
struct vcpu_svm *svm = to_svm(vcpu);
struct vcpu_svm
vcpu_svm
*svm = to_svm(vcpu)
*
svm
= to_svm(vcpu)
to_svm(vcpu)
to_svm
to_svm
vcpu
vcpu
u32 ecx = msr->index;
u32 ecx = msr->index;
u32
u32
ecx = msr->index
ecx
= msr->index
msr->index
msr
msr
index
u64 data = msr->data;
u64 data = msr->data;
u64
u64
data = msr->data
data
= msr->data
msr->data
msr
msr
data
switch (ecx) {	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	default:		return kvm_set_msr_common(vcpu, msr);	}
ecx
ecx
{	case MSR_IA32_CR_PAT:		if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;		vcpu->arch.pat = data;		svm->vmcb->save.g_pat = data;		mark_dirty(svm->vmcb, VMCB_NPT);		break;	case MSR_IA32_TSC:		kvm_write_tsc(vcpu, msr);		break;	case MSR_STAR:		svm->vmcb->save.star = data;		break;#ifdef CONFIG_X86_64	case MSR_LSTAR:		svm->vmcb->save.lstar = data;		break;	case MSR_CSTAR:		svm->vmcb->save.cstar = data;		break;	case MSR_KERNEL_GS_BASE:		svm->vmcb->save.kernel_gs_base = data;		break;	case MSR_SYSCALL_MASK:		svm->vmcb->save.sfmask = data;		break;#endif	case MSR_IA32_SYSENTER_CS:		svm->vmcb->save.sysenter_cs = data;		break;	case MSR_IA32_SYSENTER_EIP:		svm->sysenter_eip = data;		svm->vmcb->save.sysenter_eip = data;		break;	case MSR_IA32_SYSENTER_ESP:		svm->sysenter_esp = data;		svm->vmcb->save.sysenter_esp = data;		break;	case MSR_IA32_DEBUGCTLMSR:		if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}		if (data & DEBUGCTL_RESERVED_BITS)			return 1;		svm->vmcb->save.dbgctl = data;		mark_dirty(svm->vmcb, VMCB_LBR);		if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);		break;	case MSR_VM_HSAVE_PA:		svm->nested.hsave_msr = data;		break;	case MSR_VM_CR:		return svm_set_vm_cr(vcpu, data);	case MSR_VM_IGNNE:		vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);		break;	default:		return kvm_set_msr_common(vcpu, msr);	}
case MSR_IA32_CR_PAT:
MSR_IA32_CR_PAT
MSR_IA32_CR_PAT
if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data))			return 1;
!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
kvm_mtrr_valid
kvm_mtrr_valid
vcpu
vcpu
MSR_IA32_CR_PAT
MSR_IA32_CR_PAT
data
data
return 1;
1
vcpu->arch.pat = data;
vcpu->arch.pat = data
vcpu->arch.pat
vcpu->arch
vcpu
vcpu
arch
pat
data
data
svm->vmcb->save.g_pat = data;
svm->vmcb->save.g_pat = data
svm->vmcb->save.g_pat
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
g_pat
data
data
mark_dirty(svm->vmcb, VMCB_NPT);
mark_dirty(svm->vmcb, VMCB_NPT)
mark_dirty
mark_dirty
svm->vmcb
svm
svm
vmcb
VMCB_NPT
VMCB_NPT
break;
case MSR_IA32_TSC:
MSR_IA32_TSC
MSR_IA32_TSC
kvm_write_tsc(vcpu, msr);
kvm_write_tsc(vcpu, msr)
kvm_write_tsc
kvm_write_tsc
vcpu
vcpu
msr
msr
break;
case MSR_STAR:
MSR_STAR
MSR_STAR
svm->vmcb->save.star = data;
svm->vmcb->save.star = data
svm->vmcb->save.star
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
star
data
data
break;
case MSR_IA32_SYSENTER_CS:
MSR_IA32_SYSENTER_CS
MSR_IA32_SYSENTER_CS
svm->vmcb->save.sysenter_cs = data;
svm->vmcb->save.sysenter_cs = data
svm->vmcb->save.sysenter_cs
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
sysenter_cs
data
data
break;
case MSR_IA32_SYSENTER_EIP:
MSR_IA32_SYSENTER_EIP
MSR_IA32_SYSENTER_EIP
svm->sysenter_eip = data;
svm->sysenter_eip = data
svm->sysenter_eip
svm
svm
sysenter_eip
data
data
svm->vmcb->save.sysenter_eip = data;
svm->vmcb->save.sysenter_eip = data
svm->vmcb->save.sysenter_eip
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
sysenter_eip
data
data
break;
case MSR_IA32_SYSENTER_ESP:
MSR_IA32_SYSENTER_ESP
MSR_IA32_SYSENTER_ESP
svm->sysenter_esp = data;
svm->sysenter_esp = data
svm->sysenter_esp
svm
svm
sysenter_esp
data
data
svm->vmcb->save.sysenter_esp = data;
svm->vmcb->save.sysenter_esp = data
svm->vmcb->save.sysenter_esp
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
sysenter_esp
data
data
break;
case MSR_IA32_DEBUGCTLMSR:
MSR_IA32_DEBUGCTLMSR
MSR_IA32_DEBUGCTLMSR
if (!boot_cpu_has(X86_FEATURE_LBRV)) {			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}
!boot_cpu_has(X86_FEATURE_LBRV)
boot_cpu_has(X86_FEATURE_LBRV)
boot_cpu_has
boot_cpu_has
X86_FEATURE_LBRV
X86_FEATURE_LBRV
{			vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);			break;		}
vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data);
vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n",				    __func__, data)
vcpu_unimpl
vcpu_unimpl
vcpu
vcpu
"%s: MSR_IA32_DEBUGCTL 0x%llx, nop\n"
__func__
__func__
data
data
break;
if (data & DEBUGCTL_RESERVED_BITS)			return 1;
data & DEBUGCTL_RESERVED_BITS
data
data
DEBUGCTL_RESERVED_BITS
DEBUGCTL_RESERVED_BITS
return 1;
1
svm->vmcb->save.dbgctl = data;
svm->vmcb->save.dbgctl = data
svm->vmcb->save.dbgctl
svm->vmcb->save
svm->vmcb
svm
svm
vmcb
save
dbgctl
data
data
mark_dirty(svm->vmcb, VMCB_LBR);
mark_dirty(svm->vmcb, VMCB_LBR)
mark_dirty
mark_dirty
svm->vmcb
svm
svm
vmcb
VMCB_LBR
VMCB_LBR
if (data & (1ULL<<0))			svm_enable_lbrv(svm);		else			svm_disable_lbrv(svm);
data & (1ULL<<0)
data
data
(1ULL<<0)
1ULL<<0
1ULL
0
svm_enable_lbrv(svm);
svm_enable_lbrv(svm)
svm_enable_lbrv
svm_enable_lbrv
svm
svm
svm_disable_lbrv(svm);
svm_disable_lbrv(svm)
svm_disable_lbrv
svm_disable_lbrv
svm
svm
break;
case MSR_VM_HSAVE_PA:
MSR_VM_HSAVE_PA
MSR_VM_HSAVE_PA
svm->nested.hsave_msr = data;
svm->nested.hsave_msr = data
svm->nested.hsave_msr
svm->nested
svm
svm
nested
hsave_msr
data
data
break;
case MSR_VM_CR:
MSR_VM_CR
MSR_VM_CR
return svm_set_vm_cr(vcpu, data);
svm_set_vm_cr(vcpu, data)
svm_set_vm_cr
svm_set_vm_cr
vcpu
vcpu
data
data
case MSR_VM_IGNNE:
MSR_VM_IGNNE
MSR_VM_IGNNE
vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data);
vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\n", ecx, data)
vcpu_unimpl
vcpu_unimpl
vcpu
vcpu
"unimplemented wrmsr: 0x%x data 0x%llx\n"
ecx
ecx
data
data
break;
default:
return kvm_set_msr_common(vcpu, msr);
kvm_set_msr_common(vcpu, msr)
kvm_set_msr_common
kvm_set_msr_common
vcpu
vcpu
msr
msr
return 0;
0
-----joern-----
(28,42,0)
(199,185,0)
(201,185,0)
(205,69,0)
(81,121,0)
(27,121,0)
(170,186,0)
(30,189,0)
(101,188,0)
(187,137,0)
(128,42,0)
(116,97,0)
(30,220,0)
(138,43,0)
(16,185,0)
(68,216,0)
(130,128,0)
(134,97,0)
(155,12,0)
(30,146,0)
(93,119,0)
(214,215,0)
(73,179,0)
(44,106,0)
(30,97,0)
(206,185,0)
(197,148,0)
(161,116,0)
(135,146,0)
(30,153,0)
(119,93,0)
(95,185,0)
(208,185,0)
(79,85,0)
(126,185,0)
(31,121,0)
(12,155,0)
(30,12,0)
(9,116,0)
(67,119,0)
(131,1,0)
(142,185,0)
(43,1,0)
(158,93,0)
(220,116,0)
(171,81,0)
(118,82,0)
(6,53,0)
(47,116,0)
(101,189,0)
(197,160,0)
(162,97,0)
(65,185,0)
(184,53,0)
(128,179,0)
(58,81,0)
(3,185,0)
(177,30,0)
(154,199,0)
(94,185,0)
(106,147,0)
(221,116,0)
(195,129,0)
(99,185,0)
(131,121,0)
(76,161,0)
(200,116,0)
(157,220,0)
(15,121,0)
(156,47,0)
(109,0,0)
(190,80,0)
(81,42,0)
(106,116,0)
(148,121,0)
(169,185,0)
(131,185,0)
(87,200,0)
(144,220,0)
(49,28,0)
(169,121,0)
(142,121,0)
(104,31,0)
(68,217,0)
(18,188,0)
(90,187,0)
(112,83,0)
(147,106,0)
(217,169,0)
(66,103,0)
(153,100,0)
(30,187,0)
(47,119,0)
(52,11,0)
(207,9,0)
(170,116,0)
(220,77,0)
(13,179,0)
(96,7,0)
(150,13,0)
(21,185,0)
(108,42,0)
(114,73,0)
(168,131,0)
(212,12,0)
(41,103,0)
(93,211,0)
(115,47,0)
(186,170,0)
(35,188,0)
(72,13,0)
(181,153,0)
(193,129,0)
(103,209,0)
(38,185,0)
(110,131,0)
(26,197,0)
(30,71,0)
(12,180,0)
(213,185,0)
(155,161,0)
(216,68,0)
(146,209,0)
(77,121,0)
(82,121,0)
(164,81,0)
(33,15,0)
(120,1,0)
(141,137,0)
(154,116,0)
(11,175,0)
(57,170,0)
(25,84,0)
(102,185,0)
(50,45,0)
(183,97,0)
(190,85,0)
(81,86,0)
(175,69,0)
(140,137,0)
(137,116,0)
(71,207,0)
(100,121,0)
(30,217,0)
(89,8,0)
(148,185,0)
(77,185,0)
(7,121,0)
(69,121,0)
(56,77,0)
(152,185,0)
(91,108,0)
(189,101,0)
(146,27,0)
(59,211,0)
(5,180,0)
(34,186,0)
(173,185,0)
(53,184,0)
(30,93,0)
(88,71,0)
(105,170,0)
(194,131,0)
(40,106,0)
(209,146,0)
(172,125,0)
(11,52,0)
(149,196,0)
(175,11,0)
(98,2,0)
(30,215,0)
(222,154,0)
(153,108,0)
(202,52,0)
(151,185,0)
(204,209,0)
(137,187,0)
(198,185,0)
(84,185,0)
(30,175,0)
(54,147,0)
(13,42,0)
(9,207,0)
(62,82,0)
(61,89,0)
(188,101,0)
(51,185,0)
(0,116,0)
(210,216,0)
(60,97,0)
(180,121,0)
(13,145,0)
(117,161,0)
(161,155,0)
(0,160,0)
(64,15,0)
(39,185,0)
(211,121,0)
(121,97,0)
(43,179,0)
(192,73,0)
(160,197,0)
(83,121,0)
(24,108,0)
(36,43,0)
(200,185,0)
(215,186,0)
(127,128,0)
(48,185,0)
(196,42,0)
(189,142,0)
(166,27,0)
(188,116,0)
(14,185,0)
(203,52,0)
(190,30,0)
(46,216,0)
(147,62,0)
(160,0,0)
(128,185,0)
(22,185,0)
(136,185,0)
(199,121,0)
(174,196,0)
(82,185,0)
(71,83,0)
(124,11,0)
(7,42,0)
(182,169,0)
(178,101,0)
(209,103,0)
(129,84,0)
(165,155,0)
(190,145,0)
(123,199,0)
(216,116,0)
(23,121,0)
(218,62,0)
(32,80,0)
(10,9,0)
(163,89,0)
(86,81,0)
(92,154,0)
(143,185,0)
(180,185,0)
(8,89,0)
(63,185,0)
(129,116,0)
(176,160,0)
(196,121,0)
(108,153,0)
(191,68,0)
(100,185,0)
(111,196,0)
(74,148,0)
(83,185,0)
(2,121,0)
(211,185,0)
(27,185,0)
(133,175,0)
(2,185,0)
(207,71,0)
(121,73,0)
(7,38,0)
(73,121,0)
(116,28,0)
(84,129,0)
(78,207,0)
(1,43,0)
(122,185,0)
(196,45,0)
(159,142,0)
(190,38,0)
(69,185,0)
(1,97,0)
(75,9,0)
(30,154,0)
(29,131,0)
(187,31,0)
(70,185,0)
(30,197,0)
(28,116,0)
(37,100,0)
(219,185,0)
(55,196,0)
(103,116,0)
(8,185,0)
(125,116,0)
(215,2,0)
(31,185,0)
(62,147,0)
(131,42,0)
(113,8,0)
(107,0,0)
(20,189,0)
(145,185,0)
(89,116,0)
(30,62,0)
(17,217,0)
(217,68,0)
(139,7,0)
(19,185,0)
(4,185,0)
(186,215,0)
(119,47,0)
(52,116,0)
(132,185,0)
(6,167,1)
(30,62,1)
(174,184,1)
(177,21,1)
(154,116,1)
(203,202,1)
(28,49,1)
(30,154,1)
(20,101,1)
(199,123,1)
(161,116,1)
(140,167,1)
(64,184,1)
(116,28,1)
(77,56,1)
(177,151,1)
(9,10,1)
(177,48,1)
(89,163,1)
(159,189,1)
(30,177,1)
(196,121,1)
(146,209,1)
(151,83,1)
(30,215,1)
(161,76,1)
(0,109,1)
(7,139,1)
(34,170,1)
(177,152,1)
(82,121,1)
(48,200,1)
(9,116,1)
(113,89,1)
(169,121,1)
(87,84,1)
(204,103,1)
(25,129,1)
(101,188,1)
(101,178,1)
(109,107,1)
(147,54,1)
(188,18,1)
(142,121,1)
(211,59,1)
(40,100,1)
(38,7,1)
(106,116,1)
(49,221,1)
(81,121,1)
(50,196,1)
(31,104,1)
(94,128,1)
(128,127,1)
(177,95,1)
(210,46,1)
(68,191,1)
(82,118,1)
(181,108,1)
(30,71,1)
(85,79,1)
(164,171,1)
(197,26,1)
(215,214,1)
(193,2,1)
(139,96,1)
(189,20,1)
(106,44,1)
(28,42,1)
(107,167,1)
(12,155,1)
(59,93,1)
(180,5,1)
(57,105,1)
(192,23,1)
(120,116,1)
(0,116,1)
(22,211,1)
(128,179,1)
(27,121,1)
(75,167,1)
(189,101,1)
(209,103,1)
(73,179,1)
(104,187,1)
(111,55,1)
(47,156,1)
(99,8,1)
(81,164,1)
(160,0,1)
(66,41,1)
(13,179,1)
(21,148,1)
(168,110,1)
(138,36,1)
(13,42,1)
(131,42,1)
(81,42,1)
(43,179,1)
(186,34,1)
(154,92,1)
(137,141,1)
(30,175,1)
(71,88,1)
(30,187,1)
(155,165,1)
(91,86,1)
(160,176,1)
(127,130,1)
(155,161,1)
(7,42,1)
(202,167,1)
(52,116,1)
(177,198,1)
(95,131,1)
(148,74,1)
(129,116,1)
(131,168,1)
(86,81,1)
(188,116,1)
(141,140,1)
(1,43,1)
(197,160,1)
(69,121,1)
(207,78,1)
(133,11,1)
(67,47,1)
(61,82,1)
(47,116,1)
(11,52,1)
(96,167,1)
(119,47,1)
(18,35,1)
(119,67,1)
(23,1,1)
(199,121,1)
(2,121,1)
(117,77,1)
(177,3,1)
(144,157,1)
(3,31,1)
(211,121,1)
(217,17,1)
(17,68,1)
(194,29,1)
(148,121,1)
(76,117,1)
(44,40,1)
(80,32,1)
(11,124,1)
(30,197,1)
(157,167,1)
(165,161,1)
(30,146,1)
(187,90,1)
(190,38,1)
(98,215,1)
(2,98,1)
(103,66,1)
(36,120,1)
(79,15,1)
(177,132,1)
(8,89,1)
(71,207,1)
(171,58,1)
(112,71,1)
(110,194,1)
(27,166,1)
(30,220,1)
(62,147,1)
(32,86,1)
(177,4,1)
(62,218,1)
(145,13,1)
(84,129,1)
(54,106,1)
(46,167,1)
(123,154,1)
(220,144,1)
(24,91,1)
(93,158,1)
(153,108,1)
(131,121,1)
(84,25,1)
(150,72,1)
(198,142,1)
(10,75,1)
(41,199,1)
(30,93,1)
(135,209,1)
(73,114,1)
(190,30,1)
(190,85,1)
(92,222,1)
(108,42,1)
(205,175,1)
(184,53,1)
(215,186,1)
(176,0,1)
(128,42,1)
(130,167,1)
(93,119,1)
(177,99,1)
(78,9,1)
(217,68,1)
(108,24,1)
(131,1,1)
(214,186,1)
(7,121,1)
(180,121,1)
(218,147,1)
(53,6,1)
(212,155,1)
(190,145,1)
(13,150,1)
(124,52,1)
(58,167,1)
(12,212,1)
(52,203,1)
(30,189,1)
(33,64,1)
(172,15,1)
(147,106,1)
(105,125,1)
(30,153,1)
(216,210,1)
(187,137,1)
(222,167,1)
(182,217,1)
(100,37,1)
(209,204,1)
(158,119,1)
(55,149,1)
(190,80,1)
(100,121,1)
(129,195,1)
(125,172,1)
(196,42,1)
(153,181,1)
(115,167,1)
(175,133,1)
(137,116,1)
(30,217,1)
(149,174,1)
(89,116,1)
(136,27,1)
(83,121,1)
(152,69,1)
(216,116,1)
(83,112,1)
(169,182,1)
(178,188,1)
(125,116,1)
(72,167,1)
(170,116,1)
(177,50,1)
(177,136,1)
(90,137,1)
(29,167,1)
(77,121,1)
(146,135,1)
(26,160,1)
(170,57,1)
(35,167,1)
(4,169,1)
(103,116,1)
(68,216,1)
(43,138,1)
(200,87,1)
(74,197,1)
(30,12,1)
(207,9,1)
(5,12,1)
(31,121,1)
(177,94,1)
(195,193,1)
(37,153,1)
(69,205,1)
(200,116,1)
(167,121,1)
(56,220,1)
(15,33,1)
(186,170,1)
(177,22,1)
(118,62,1)
(8,113,1)
(142,159,1)
(220,116,1)
(196,111,1)
(163,61,1)
(175,11,1)
(156,115,1)
(191,216,1)
(166,146,1)
(114,192,1)
(121,73,1)
(15,121,1)
(88,207,1)
(132,180,1)
(31,167,2)
(81,121,2)
(78,167,2)
(131,1,2)
(17,167,2)
(30,71,2)
(131,42,2)
(96,167,2)
(207,9,2)
(30,220,2)
(190,30,2)
(8,89,2)
(186,15,2)
(190,38,2)
(218,86,2)
(37,86,2)
(204,167,2)
(2,121,2)
(81,42,2)
(211,167,2)
(131,121,2)
(8,86,2)
(140,167,2)
(13,42,2)
(180,121,2)
(77,167,2)
(187,167,2)
(202,167,2)
(172,15,2)
(217,68,2)
(198,167,2)
(200,116,2)
(137,116,2)
(209,103,2)
(94,167,2)
(12,155,2)
(144,167,2)
(119,47,2)
(30,175,2)
(151,167,2)
(40,86,2)
(142,121,2)
(178,167,2)
(30,93,2)
(148,121,2)
(212,167,2)
(107,167,2)
(150,167,2)
(147,106,2)
(79,15,2)
(41,167,2)
(7,42,2)
(195,15,2)
(68,167,2)
(194,167,2)
(73,179,2)
(161,167,2)
(177,184,2)
(191,167,2)
(196,121,2)
(145,167,2)
(27,121,2)
(109,167,2)
(127,167,2)
(137,167,2)
(189,101,2)
(187,137,2)
(7,167,2)
(209,167,2)
(111,184,2)
(69,121,2)
(170,116,2)
(15,184,2)
(110,167,2)
(199,121,2)
(166,167,2)
(160,167,2)
(0,167,2)
(205,167,2)
(153,86,2)
(7,121,2)
(72,167,2)
(38,167,2)
(216,167,2)
(56,167,2)
(4,167,2)
(34,15,2)
(75,167,2)
(99,86,2)
(1,43,2)
(13,167,2)
(189,167,2)
(222,167,2)
(177,167,2)
(58,167,2)
(171,167,2)
(100,86,2)
(177,15,2)
(30,167,2)
(186,170,2)
(146,167,2)
(170,15,2)
(30,12,2)
(196,42,2)
(117,167,2)
(30,86,2)
(135,167,2)
(24,86,2)
(15,121,2)
(104,167,2)
(32,86,2)
(220,167,2)
(84,129,2)
(0,116,2)
(175,167,2)
(62,86,2)
(76,167,2)
(30,15,2)
(125,116,2)
(53,167,2)
(216,116,2)
(101,188,2)
(130,167,2)
(30,153,2)
(113,86,2)
(20,167,2)
(116,28,2)
(27,167,2)
(182,167,2)
(30,184,2)
(44,86,2)
(33,184,2)
(106,116,2)
(123,167,2)
(98,15,2)
(57,15,2)
(5,167,2)
(190,80,2)
(161,116,2)
(21,167,2)
(169,167,2)
(29,167,2)
(141,167,2)
(184,53,2)
(115,167,2)
(169,121,2)
(90,167,2)
(148,167,2)
(220,116,2)
(157,167,2)
(86,167,2)
(30,187,2)
(3,167,2)
(25,15,2)
(31,121,2)
(211,121,2)
(85,15,2)
(87,15,2)
(64,184,2)
(59,167,2)
(188,116,2)
(30,217,2)
(95,167,2)
(26,167,2)
(61,86,2)
(139,167,2)
(199,167,2)
(86,81,2)
(200,15,2)
(177,86,2)
(210,167,2)
(190,145,2)
(184,167,2)
(156,167,2)
(152,167,2)
(10,167,2)
(66,167,2)
(30,62,2)
(47,116,2)
(129,116,2)
(128,42,2)
(188,167,2)
(174,184,2)
(30,215,2)
(103,116,2)
(160,0,2)
(112,167,2)
(91,86,2)
(128,179,2)
(193,15,2)
(108,42,2)
(81,167,2)
(168,167,2)
(69,167,2)
(181,86,2)
(9,116,2)
(215,15,2)
(11,52,2)
(13,179,2)
(12,167,2)
(18,167,2)
(52,167,2)
(84,15,2)
(68,216,2)
(52,116,2)
(146,209,2)
(50,184,2)
(30,146,2)
(190,85,2)
(176,167,2)
(93,119,2)
(149,184,2)
(71,167,2)
(106,86,2)
(43,179,2)
(124,167,2)
(30,154,2)
(80,86,2)
(22,167,2)
(197,160,2)
(154,116,2)
(142,167,2)
(88,167,2)
(54,86,2)
(203,167,2)
(164,167,2)
(125,15,2)
(30,189,2)
(71,207,2)
(175,11,2)
(48,15,2)
(128,167,2)
(30,197,2)
(46,167,2)
(215,186,2)
(74,167,2)
(153,108,2)
(136,167,2)
(35,167,2)
(105,15,2)
(119,167,2)
(83,167,2)
(93,167,2)
(103,167,2)
(155,161,2)
(77,121,2)
(154,167,2)
(83,121,2)
(118,86,2)
(207,167,2)
(132,167,2)
(6,167,2)
(92,167,2)
(28,42,2)
(47,167,2)
(11,167,2)
(100,121,2)
(67,167,2)
(89,116,2)
(129,15,2)
(82,121,2)
(147,86,2)
(214,15,2)
(159,167,2)
(121,73,2)
(196,184,2)
(108,86,2)
(55,184,2)
(180,167,2)
(165,167,2)
(82,86,2)
(197,167,2)
(155,167,2)
(133,167,2)
(163,86,2)
(2,15,2)
(158,167,2)
(101,167,2)
(9,167,2)
(131,167,2)
(62,147,2)
(89,86,2)
(217,167,2)
-----------------------------------
(0,svm->vmcb)
(1,ecx = msr->index)
(2,svm->vmcb->save.dbgctl = data)
(3,break;)
(4,break;)
(5,data)
(6,X86_FEATURE_LBRV)
(7,svm_set_vm_cr(vcpu, data)
(8,mark_dirty(svm->vmcb, VMCB_NPT)
(9,svm->vmcb)
(10,vmcb)
(11,svm->vmcb->save)
(12,svm->vmcb->save.sysenter_esp)
(13,kvm_set_msr_common(vcpu, msr)
(14,case MSR_SYSCALL_MASK:)
(15,data & DEBUGCTL_RESERVED_BITS)
(16,if (data & DEBUGCTL_RESERVED_BITS)
(17,kernel_gs_base)
(18,vmcb)
(19,case MSR_IA32_TSC:)
(20,cstar)
(21,break;)
(22,break;)
(23,data)
(24,arch)
(25,VMCB_LBR)
(26,lstar)
(27,svm->vmcb->save.sysenter_eip = data)
(28,to_svm(vcpu)
(29,vcpu)
(30,return 0;)
(31,svm->nested.hsave_msr = data)
(32,1)
(33,DEBUGCTL_RESERVED_BITS)
(34,save)
(35,svm)
(36,msr)
(37,data)
(38,return svm_set_vm_cr(vcpu, data)
(39,case MSR_LSTAR:)
(40,svm)
(41,svm)
(42,struct kvm_vcpu *vcpu)
(43,msr->index)
(44,vmcb)
(45,)
(46,svm)
(47,svm->vmcb)
(48,break;)
(49,vcpu)
(50,break;)
(51,case MSR_CSTAR:)
(52,svm->vmcb)
(53,boot_cpu_has(X86_FEATURE_LBRV)
(54,save)
(55,__func__)
(56,data)
(57,vmcb)
(58,vcpu)
(59,data)
(60,svm)
(61,svm)
(62,svm->vmcb->save.g_pat)
(63,case MSR_IA32_DEBUGCTLMSR:)
(64,data)
(65,if (!boot_cpu_has(X86_FEATURE_LBRV)
(66,vmcb)
(67,save)
(68,svm->vmcb->save)
(69,svm->vmcb->save.sfmask = data)
(70,case MSR_VM_HSAVE_PA:)
(71,svm->vmcb->save.sysenter_cs)
(72,vcpu)
(73,msr->data)
(74,data)
(75,svm)
(76,vmcb)
(77,svm->sysenter_esp = data)
(78,save)
(79,1)
(80,return 1;)
(81,kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
(82,svm->vmcb->save.g_pat = data)
(83,svm->vmcb->save.sysenter_cs = data)
(84,mark_dirty(svm->vmcb, VMCB_LBR)
(85,return 1;)
(86,!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
(87,svm)
(88,sysenter_cs)
(89,svm->vmcb)
(90,hsave_msr)
(91,vcpu)
(92,sysenter_eip)
(93,svm->vmcb->save.star)
(94,break;)
(95,break;)
(96,vcpu)
(97,)
(98,data)
(99,break;)
(100,vcpu->arch.pat = data)
(101,svm->vmcb->save)
(102,case MSR_KERNEL_GS_BASE:)
(103,svm->vmcb)
(104,data)
(105,svm)
(106,svm->vmcb)
(107,svm)
(108,vcpu->arch)
(109,vmcb)
(110,ecx)
(111,data)
(112,data)
(113,VMCB_NPT)
(114,data)
(115,svm)
(116,*svm = to_svm(vcpu)
(117,svm)
(118,data)
(119,svm->vmcb->save)
(120,ecx)
(121,data = msr->data)
(122,default:)
(123,data)
(124,save)
(125,svm_disable_lbrv(svm)
(126,if (!kvm_mtrr_valid(vcpu, MSR_IA32_CR_PAT, data)
(127,msr)
(128,kvm_write_tsc(vcpu, msr)
(129,svm->vmcb)
(130,vcpu)
(131,vcpu_unimpl(vcpu, "unimplemented wrmsr: 0x%x data 0x%llx\\n", ecx, data)
(132,break;)
(133,sfmask)
(134,ecx)
(135,sysenter_eip)
(136,break;)
(137,svm->nested)
(138,index)
(139,data)
(140,svm)
(141,nested)
(142,svm->vmcb->save.cstar = data)
(143,case MSR_VM_IGNNE:)
(144,sysenter_esp)
(145,return kvm_set_msr_common(vcpu, msr)
(146,svm->vmcb->save.sysenter_eip)
(147,svm->vmcb->save)
(148,svm->vmcb->save.lstar = data)
(149,"%s: MSR_IA32_DEBUGCTL 0x%llx, nop\\n")
(150,msr)
(151,break;)
(152,break;)
(153,vcpu->arch.pat)
(154,svm->sysenter_eip)
(155,svm->vmcb->save)
(156,vmcb)
(157,svm)
(158,star)
(159,data)
(160,svm->vmcb->save)
(161,svm->vmcb)
(162,switch (ecx)
(163,vmcb)
(164,data)
(165,save)
(166,data)
(167,ecx)
(168,data)
(169,svm->vmcb->save.kernel_gs_base = data)
(170,svm->vmcb)
(171,MSR_IA32_CR_PAT)
(172,svm)
(173,case MSR_IA32_SYSENTER_ESP:)
(174,vcpu)
(175,svm->vmcb->save.sfmask)
(176,save)
(177,0)
(178,save)
(179,struct msr_data *msr)
(180,svm->vmcb->save.sysenter_esp = data)
(181,pat)
(182,data)
(183,data)
(184,!boot_cpu_has(X86_FEATURE_LBRV)
(185,)
(186,svm->vmcb->save)
(187,svm->nested.hsave_msr)
(188,svm->vmcb)
(189,svm->vmcb->save.cstar)
(190,RET)
(191,save)
(192,msr)
(193,svm)
(194,"unimplemented wrmsr: 0x%x data 0x%llx\\n")
(195,vmcb)
(196,vcpu_unimpl(vcpu, "%s: MSR_IA32_DEBUGCTL 0x%llx, nop\\n",\n\\n\\t\\t\\t\\t    __func__, data)
(197,svm->vmcb->save.lstar)
(198,break;)
(199,svm->sysenter_eip = data)
(200,svm_enable_lbrv(svm)
(201,case MSR_IA32_CR_PAT:)
(202,svm)
(203,vmcb)
(204,save)
(205,data)
(206,case MSR_IA32_SYSENTER_CS:)
(207,svm->vmcb->save)
(208,case MSR_IA32_SYSENTER_EIP:)
(209,svm->vmcb->save)
(210,vmcb)
(211,svm->vmcb->save.star = data)
(212,sysenter_esp)
(213,case MSR_STAR:)
(214,dbgctl)
(215,svm->vmcb->save.dbgctl)
(216,svm->vmcb)
(217,svm->vmcb->save.kernel_gs_base)
(218,g_pat)
(219,case MSR_VM_CR:)
(220,svm->sysenter_esp)
(221,svm)
(222,svm)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^