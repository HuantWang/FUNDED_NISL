-----label-----
0
-----code-----
static void fill_event(struct v4l2_event *ev, struct v4l2_ctrl *ctrl, u32 changes)
{
	memset(ev->reserved, 0, sizeof(ev->reserved));
	ev->type = V4L2_EVENT_CTRL;
	ev->id = ctrl->id;
	ev->u.ctrl.changes = changes;
	ev->u.ctrl.type = ctrl->type;
	ev->u.ctrl.flags = ctrl->flags;
	if (ctrl->is_ptr)
		ev->u.ctrl.value64 = 0;
	else
		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;
	ev->u.ctrl.minimum = ctrl->minimum;
	ev->u.ctrl.maximum = ctrl->maximum;
	if (ctrl->type == V4L2_CTRL_TYPE_MENU
	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
		ev->u.ctrl.step = 1;
	else
		ev->u.ctrl.step = ctrl->step;
	ev->u.ctrl.default_value = ctrl->default_value;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
23,24
24,25
24,26
24,27
24,28
25,26
27,28
27,29
28,29
32,33
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
72,74
73,74
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
86,88
87,88
92,93
92,94
93,94
96,97
96,98
96,99
97,98
97,99
98,99
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
105,107
106,107
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
116,118
117,118
122,123
123,124
123,125
124,125
124,126
125,126
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
133,135
134,135
139,140
139,141
140,141
143,144
144,145
144,146
145,146
145,147
146,147
146,148
147,148
147,149
148,149
153,154
153,155
154,155
157,158
157,159
157,160
158,159
158,160
159,160
159,161
160,161
160,162
161,162
164,165
166,167
166,168
167,168
167,169
168,169
171,172
173,174
174,175
174,176
175,176
175,177
176,177
176,178
177,178
177,179
178,179
184,185
185,186
185,187
186,187
186,188
187,188
187,189
188,189
188,190
189,190
194,195
194,196
195,196
198,199
199,200
199,201
200,201
200,202
201,202
201,203
202,203
202,204
203,204
208,209
208,210
209,210
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,26,29,30,31,36,37,42,43,45,50,51,54,55,62,63,64,65,67,74,75,76,77,80,81,88,89,90,91,94,95,99,100,107,108,109,110,111,118,119,120,121,126,127,128,135,136,137,138,141,142,149,150,151,152,155,156,162,163,165,169,170,172,179,180,181,182,183,190,191,192,193,196,197,204,205,206,207,210,211
-----computeFrom-----
39,40
39,41
47,48
47,49
57,58
57,59
69,70
69,71
83,84
83,85
102,103
102,104
113,114
113,115
130,131
130,132
144,145
144,146
158,159
158,160
159,160
159,161
166,167
166,168
174,175
174,176
185,186
185,187
199,200
199,201
-----guardedBy-----
169,181
-----guardedByNegation-----
169,196
-----lastLexicalUse-----
169,196
-----jump-----
169,196
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static void fill_event(struct v4l2_event *ev, struct v4l2_ctrl *ctrl, u32 changes){	memset(ev->reserved, 0, sizeof(ev->reserved));	ev->type = V4L2_EVENT_CTRL;	ev->id = ctrl->id;	ev->u.ctrl.changes = changes;	ev->u.ctrl.type = ctrl->type;	ev->u.ctrl.flags = ctrl->flags;	if (ctrl->is_ptr)		ev->u.ctrl.value64 = 0;	else		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;	ev->u.ctrl.minimum = ctrl->minimum;	ev->u.ctrl.maximum = ctrl->maximum;	if (ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)		ev->u.ctrl.step = 1;	else		ev->u.ctrl.step = ctrl->step;	ev->u.ctrl.default_value = ctrl->default_value;}
static void
fill_event(struct v4l2_event *ev, struct v4l2_ctrl *ctrl, u32 changes)
fill_event
struct v4l2_event *ev
struct v4l2_event
v4l2_event
*ev
*
ev
struct v4l2_ctrl *ctrl
struct v4l2_ctrl
v4l2_ctrl
*ctrl
*
ctrl
u32 changes
u32
u32
changes
changes
{	memset(ev->reserved, 0, sizeof(ev->reserved));	ev->type = V4L2_EVENT_CTRL;	ev->id = ctrl->id;	ev->u.ctrl.changes = changes;	ev->u.ctrl.type = ctrl->type;	ev->u.ctrl.flags = ctrl->flags;	if (ctrl->is_ptr)		ev->u.ctrl.value64 = 0;	else		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;	ev->u.ctrl.minimum = ctrl->minimum;	ev->u.ctrl.maximum = ctrl->maximum;	if (ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)		ev->u.ctrl.step = 1;	else		ev->u.ctrl.step = ctrl->step;	ev->u.ctrl.default_value = ctrl->default_value;}
memset(ev->reserved, 0, sizeof(ev->reserved));
memset(ev->reserved, 0, sizeof(ev->reserved))
memset
memset
ev->reserved
ev
ev
reserved
0
sizeof(ev->reserved)
(ev->reserved)
ev->reserved
ev
ev
reserved
ev->type = V4L2_EVENT_CTRL;
ev->type = V4L2_EVENT_CTRL
ev->type
ev
ev
type
V4L2_EVENT_CTRL
V4L2_EVENT_CTRL
ev->id = ctrl->id;
ev->id = ctrl->id
ev->id
ev
ev
id
ctrl->id
ctrl
ctrl
id
ev->u.ctrl.changes = changes;
ev->u.ctrl.changes = changes
ev->u.ctrl.changes
ev->u.ctrl
ev->u
ev
ev
u
ctrl
changes
changes
changes
ev->u.ctrl.type = ctrl->type;
ev->u.ctrl.type = ctrl->type
ev->u.ctrl.type
ev->u.ctrl
ev->u
ev
ev
u
ctrl
type
ctrl->type
ctrl
ctrl
type
ev->u.ctrl.flags = ctrl->flags;
ev->u.ctrl.flags = ctrl->flags
ev->u.ctrl.flags
ev->u.ctrl
ev->u
ev
ev
u
ctrl
flags
ctrl->flags
ctrl
ctrl
flags
if (ctrl->is_ptr)		ev->u.ctrl.value64 = 0;	else		ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;
ctrl->is_ptr
ctrl
ctrl
is_ptr
ev->u.ctrl.value64 = 0;
ev->u.ctrl.value64 = 0
ev->u.ctrl.value64
ev->u.ctrl
ev->u
ev
ev
u
ctrl
value64
0
ev->u.ctrl.value64 = *ctrl->p_cur.p_s64;
ev->u.ctrl.value64 = *ctrl->p_cur.p_s64
ev->u.ctrl.value64
ev->u.ctrl
ev->u
ev
ev
u
ctrl
value64
*ctrl->p_cur.p_s64
ctrl->p_cur.p_s64
ctrl->p_cur
ctrl
ctrl
p_cur
p_s64
ev->u.ctrl.minimum = ctrl->minimum;
ev->u.ctrl.minimum = ctrl->minimum
ev->u.ctrl.minimum
ev->u.ctrl
ev->u
ev
ev
u
ctrl
minimum
ctrl->minimum
ctrl
ctrl
minimum
ev->u.ctrl.maximum = ctrl->maximum;
ev->u.ctrl.maximum = ctrl->maximum
ev->u.ctrl.maximum
ev->u.ctrl
ev->u
ev
ev
u
ctrl
maximum
ctrl->maximum
ctrl
ctrl
maximum
if (ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)		ev->u.ctrl.step = 1;	else		ev->u.ctrl.step = ctrl->step;
ctrl->type == V4L2_CTRL_TYPE_MENU	    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU
ctrl->type == V4L2_CTRL_TYPE_MENU
ctrl->type
ctrl
ctrl
type
V4L2_CTRL_TYPE_MENU
V4L2_CTRL_TYPE_MENU
ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU
ctrl->type
ctrl
ctrl
type
V4L2_CTRL_TYPE_INTEGER_MENU
V4L2_CTRL_TYPE_INTEGER_MENU
ev->u.ctrl.step = 1;
ev->u.ctrl.step = 1
ev->u.ctrl.step
ev->u.ctrl
ev->u
ev
ev
u
ctrl
step
1
ev->u.ctrl.step = ctrl->step;
ev->u.ctrl.step = ctrl->step
ev->u.ctrl.step
ev->u.ctrl
ev->u
ev
ev
u
ctrl
step
ctrl->step
ctrl
ctrl
step
ev->u.ctrl.default_value = ctrl->default_value;
ev->u.ctrl.default_value = ctrl->default_value
ev->u.ctrl.default_value
ev->u.ctrl
ev->u
ev
ev
u
ctrl
default_value
ctrl->default_value
ctrl
ctrl
default_value
-----joern-----
(138,5,0)
(81,82,0)
(23,109,0)
(94,92,0)
(98,53,0)
(40,21,0)
(115,20,0)
(119,25,0)
(90,140,0)
(1,54,0)
(12,104,0)
(58,91,0)
(39,115,0)
(84,140,0)
(33,47,0)
(79,125,0)
(138,62,0)
(72,28,0)
(99,82,0)
(143,29,0)
(96,92,0)
(124,59,0)
(59,15,0)
(66,114,0)
(145,45,0)
(50,52,0)
(125,88,0)
(37,100,0)
(123,15,0)
(77,114,0)
(101,13,0)
(114,121,0)
(141,116,0)
(129,10,0)
(96,109,0)
(38,121,0)
(147,98,0)
(26,140,0)
(148,93,0)
(97,103,0)
(71,88,0)
(53,98,0)
(34,58,0)
(98,121,0)
(67,21,0)
(28,140,0)
(65,69,0)
(8,134,0)
(3,124,0)
(53,5,0)
(120,117,0)
(90,91,0)
(36,93,0)
(54,1,0)
(17,18,0)
(68,62,0)
(50,75,0)
(75,84,0)
(13,121,0)
(91,90,0)
(110,47,0)
(40,121,0)
(42,25,0)
(93,29,0)
(111,125,0)
(142,26,0)
(20,5,0)
(2,38,0)
(45,137,0)
(132,45,0)
(86,5,0)
(21,17,0)
(48,137,0)
(103,140,0)
(44,12,0)
(45,140,0)
(70,44,0)
(11,124,0)
(95,103,0)
(122,37,0)
(46,54,0)
(2,5,0)
(107,59,0)
(75,50,0)
(38,2,0)
(100,37,0)
(10,140,0)
(116,141,0)
(25,27,0)
(73,28,0)
(83,46,0)
(104,12,0)
(12,5,0)
(125,79,0)
(109,96,0)
(62,138,0)
(57,5,0)
(47,10,0)
(46,138,0)
(27,5,0)
(108,140,0)
(35,122,0)
(115,140,0)
(12,44,0)
(78,100,0)
(43,80,0)
(22,84,0)
(61,108,0)
(126,108,0)
(112,100,0)
(78,121,0)
(25,121,0)
(41,75,0)
(128,115,0)
(56,148,0)
(63,79,0)
(148,69,0)
(89,141,0)
(17,21,0)
(9,10,0)
(55,44,0)
(47,33,0)
(124,140,0)
(59,124,0)
(10,47,0)
(91,58,0)
(7,62,0)
(64,98,0)
(51,134,0)
(82,99,0)
(4,91,0)
(106,90,0)
(146,26,0)
(93,148,0)
(19,109,0)
(15,59,0)
(33,2,0)
(104,103,0)
(15,53,0)
(84,75,0)
(136,43,0)
(54,46,0)
(130,1,0)
(137,5,0)
(127,113,0)
(14,54,0)
(52,113,0)
(20,117,0)
(69,148,0)
(135,38,0)
(43,5,0)
(141,43,0)
(105,69,0)
(92,27,0)
(26,99,0)
(6,90,0)
(44,140,0)
(100,78,0)
(76,113,0)
(13,122,0)
(32,1,0)
(62,121,0)
(139,40,0)
(37,122,0)
(134,49,0)
(58,18,0)
(79,108,0)
(133,84,0)
(87,33,0)
(24,50,0)
(113,121,0)
(99,26,0)
(102,116,0)
(85,12,0)
(21,40,0)
(134,121,0)
(109,140,0)
(16,96,0)
(92,96,0)
(122,13,0)
(27,25,0)
(52,5,0)
(49,134,0)
(0,117,0)
(118,78,0)
(18,17,0)
(103,104,0)
(117,20,0)
(74,99,0)
(131,78,0)
(116,28,0)
(69,140,0)
(108,79,0)
(113,52,0)
(60,13,0)
(30,38,0)
(28,116,0)
(117,121,0)
(31,40,0)
(82,49,0)
(1,140,0)
(7,68,1)
(100,112,1)
(8,51,1)
(108,140,1)
(74,26,1)
(111,79,1)
(93,36,1)
(117,121,1)
(131,118,1)
(92,94,1)
(123,59,1)
(45,140,1)
(36,148,1)
(53,98,1)
(40,121,1)
(44,140,1)
(13,121,1)
(47,10,1)
(25,121,1)
(136,141,1)
(141,89,1)
(12,44,1)
(107,124,1)
(2,38,1)
(4,90,1)
(0,115,1)
(126,61,1)
(59,107,1)
(12,104,1)
(92,96,1)
(98,147,1)
(56,69,1)
(27,25,1)
(129,9,1)
(43,136,1)
(106,114,1)
(9,29,1)
(49,134,1)
(78,131,1)
(125,79,1)
(109,23,1)
(1,130,1)
(134,8,1)
(28,140,1)
(44,55,1)
(113,127,1)
(79,63,1)
(50,24,1)
(14,1,1)
(139,31,1)
(6,106,1)
(42,119,1)
(62,7,1)
(15,59,1)
(112,78,1)
(78,121,1)
(124,11,1)
(93,148,1)
(41,84,1)
(30,135,1)
(104,103,1)
(69,140,1)
(141,116,1)
(34,91,1)
(3,43,1)
(125,111,1)
(89,116,1)
(13,60,1)
(1,140,1)
(28,73,1)
(10,140,1)
(127,76,1)
(77,66,1)
(96,16,1)
(118,52,1)
(133,22,1)
(29,143,1)
(19,53,1)
(11,3,1)
(50,75,1)
(130,32,1)
(55,70,1)
(146,37,1)
(110,10,1)
(103,140,1)
(147,64,1)
(83,54,1)
(45,132,1)
(82,99,1)
(99,74,1)
(75,41,1)
(40,139,1)
(108,126,1)
(65,114,1)
(16,109,1)
(87,47,1)
(102,28,1)
(95,85,1)
(120,0,1)
(21,67,1)
(99,26,1)
(137,48,1)
(48,45,1)
(143,93,1)
(119,92,1)
(122,13,1)
(39,137,1)
(88,71,1)
(46,54,1)
(73,72,1)
(68,46,1)
(24,75,1)
(145,12,1)
(98,121,1)
(32,88,1)
(82,81,1)
(32,49,1)
(25,42,1)
(9,18,1)
(52,113,1)
(47,110,1)
(128,39,1)
(62,121,1)
(97,95,1)
(21,40,1)
(64,15,1)
(138,62,1)
(22,2,1)
(43,80,1)
(84,140,1)
(66,27,1)
(116,102,1)
(79,108,1)
(132,145,1)
(124,140,1)
(33,47,1)
(100,78,1)
(91,4,1)
(96,109,1)
(67,40,1)
(90,140,1)
(18,17,1)
(81,99,1)
(31,58,1)
(46,83,1)
(60,101,1)
(113,121,1)
(54,1,1)
(148,56,1)
(135,33,1)
(75,84,1)
(122,35,1)
(109,140,1)
(61,37,1)
(85,44,1)
(72,20,1)
(84,133,1)
(71,125,1)
(69,105,1)
(33,87,1)
(26,140,1)
(20,117,1)
(59,124,1)
(51,82,1)
(115,128,1)
(144,138,1)
(94,96,1)
(58,91,1)
(63,108,1)
(17,21,1)
(10,129,1)
(90,6,1)
(15,123,1)
(37,100,1)
(38,30,1)
(114,121,1)
(35,13,1)
(116,28,1)
(23,19,1)
(114,77,1)
(134,121,1)
(26,142,1)
(37,122,1)
(105,65,1)
(148,69,1)
(91,90,1)
(58,34,1)
(103,97,1)
(117,120,1)
(76,50,1)
(38,121,1)
(115,140,1)
(54,14,1)
(142,146,1)
(101,100,1)
(67,114,2)
(148,114,2)
(116,28,2)
(43,80,2)
(134,37,2)
(134,121,2)
(35,100,2)
(58,114,2)
(29,114,2)
(114,121,2)
(6,114,2)
(53,98,2)
(75,84,2)
(15,59,2)
(91,114,2)
(18,114,2)
(52,113,2)
(98,121,2)
(90,140,2)
(12,104,2)
(146,37,2)
(79,37,2)
(37,122,2)
(21,40,2)
(90,114,2)
(12,44,2)
(47,10,2)
(28,140,2)
(99,26,2)
(65,114,2)
(40,114,2)
(18,17,2)
(49,37,2)
(36,114,2)
(45,140,2)
(139,114,2)
(148,69,2)
(1,140,2)
(125,79,2)
(82,37,2)
(37,100,2)
(20,117,2)
(33,47,2)
(31,114,2)
(13,121,2)
(71,37,2)
(81,37,2)
(50,75,2)
(100,78,2)
(138,62,2)
(40,121,2)
(38,121,2)
(46,54,2)
(59,124,2)
(111,37,2)
(122,100,2)
(93,148,2)
(117,121,2)
(60,100,2)
(113,121,2)
(125,37,2)
(26,140,2)
(26,37,2)
(17,114,2)
(27,25,2)
(88,37,2)
(4,114,2)
(13,100,2)
(69,140,2)
(62,121,2)
(105,114,2)
(115,140,2)
(126,37,2)
(78,121,2)
(99,37,2)
(61,37,2)
(49,134,2)
(96,109,2)
(141,116,2)
(10,140,2)
(25,121,2)
(91,90,2)
(142,37,2)
(92,96,2)
(56,114,2)
(104,103,2)
(124,140,2)
(103,140,2)
(51,37,2)
(101,100,2)
(69,114,2)
(8,37,2)
(17,21,2)
(93,114,2)
(82,99,2)
(74,37,2)
(44,140,2)
(79,108,2)
(109,140,2)
(21,114,2)
(143,114,2)
(63,37,2)
(34,114,2)
(54,1,2)
(122,13,2)
(106,114,2)
(2,38,2)
(84,140,2)
(58,91,2)
(108,37,2)
(108,140,2)
-----------------------------------
(0,ctrl)
(1,ev->u)
(2,ev->u.ctrl.minimum = ctrl->minimum)
(3,ev)
(4,ctrl)
(5,)
(6,u)
(7,default_value)
(8,step)
(9,ev)
(10,ev->u)
(11,u)
(12,memset(ev->reserved, 0, sizeof(ev->reserved)
(13,ctrl->type)
(14,ctrl)
(15,ev->u.ctrl.type)
(16,ctrl)
(17,*ctrl->p_cur.p_s64)
(18,ev->u.ctrl.value64 = *ctrl->p_cur.p_s64)
(19,ev)
(20,ev->id = ctrl->id)
(21,ctrl->p_cur.p_s64)
(22,ev)
(23,u)
(24,maximum)
(25,ctrl->flags)
(26,ev->u)
(27,ev->u.ctrl.flags = ctrl->flags)
(28,ev->u)
(29,ev->u.ctrl.value64 = 0)
(30,minimum)
(31,ctrl)
(32,ev)
(33,ev->u.ctrl.minimum)
(34,value64)
(35,V4L2_CTRL_TYPE_INTEGER_MENU)
(36,value64)
(37,ctrl->type == V4L2_CTRL_TYPE_MENU\n\\n\\t    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
(38,ctrl->minimum)
(39,ev)
(40,ctrl->p_cur)
(41,ctrl)
(42,flags)
(43,ev->u.ctrl.changes = changes)
(44,ev->reserved)
(45,ev->type)
(46,ev->u.ctrl.default_value)
(47,ev->u.ctrl)
(48,V4L2_EVENT_CTRL)
(49,ev->u.ctrl.step = ctrl->step)
(50,ev->u.ctrl.maximum)
(51,ctrl)
(52,ev->u.ctrl.maximum = ctrl->maximum)
(53,ev->u.ctrl.type = ctrl->type)
(54,ev->u.ctrl)
(55,reserved)
(56,ctrl)
(57,if (ctrl->type == V4L2_CTRL_TYPE_MENU\n\\n\\t    || ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
(58,ev->u.ctrl.value64)
(59,ev->u.ctrl)
(60,type)
(61,ev)
(62,ctrl->default_value)
(63,ctrl)
(64,ctrl)
(65,ev)
(66,ctrl)
(67,p_s64)
(68,ctrl)
(69,ev->u)
(70,ev)
(71,1)
(72,ev)
(73,u)
(74,ctrl)
(75,ev->u.ctrl)
(76,ctrl)
(77,is_ptr)
(78,ctrl->type)
(79,ev->u.ctrl)
(80,u32 changes)
(81,step)
(82,ev->u.ctrl.step)
(83,default_value)
(84,ev->u)
(85,0)
(86,if (ctrl->is_ptr)
(87,minimum)
(88,ev->u.ctrl.step = 1)
(89,changes)
(90,ev->u)
(91,ev->u.ctrl)
(92,ev->u.ctrl.flags)
(93,ev->u.ctrl.value64)
(94,flags)
(95,ev)
(96,ev->u.ctrl)
(97,reserved)
(98,ctrl->type)
(99,ev->u.ctrl)
(100,ctrl->type == V4L2_CTRL_TYPE_MENU)
(101,ctrl)
(102,ctrl)
(103,ev->reserved)
(104,sizeof(ev->reserved)
(105,u)
(106,ev)
(107,ctrl)
(108,ev->u)
(109,ev->u)
(110,ctrl)
(111,step)
(112,V4L2_CTRL_TYPE_MENU)
(113,ctrl->maximum)
(114,ctrl->is_ptr)
(115,ev->id)
(116,ev->u.ctrl)
(117,ctrl->id)
(118,ctrl)
(119,ctrl)
(120,id)
(121,struct v4l2_ctrl *ctrl)
(122,ctrl->type == V4L2_CTRL_TYPE_INTEGER_MENU)
(123,type)
(124,ev->u)
(125,ev->u.ctrl.step)
(126,u)
(127,maximum)
(128,id)
(129,u)
(130,u)
(131,type)
(132,type)
(133,u)
(134,ctrl->step)
(135,ctrl)
(136,changes)
(137,ev->type = V4L2_EVENT_CTRL)
(138,ev->u.ctrl.default_value = ctrl->default_value)
(139,p_cur)
(140,struct v4l2_event *ev)
(141,ev->u.ctrl.changes)
(142,u)
(143,0)
(144,RET)
(145,ev)
(146,ev)
(147,type)
(148,ev->u.ctrl)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^