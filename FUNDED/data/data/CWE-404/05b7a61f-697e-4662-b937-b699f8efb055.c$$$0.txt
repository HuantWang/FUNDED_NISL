-----label-----
0
-----code-----
static int64_t * goodB2GSource(int64_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)malloc(100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
49,51
50,51
54,55
55,56
55,57
56,57
58,59
58,60
59,60
62,63
63,64
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,32,33,37,39,44,46,51,52,53,57,60,61,64
-----computeFrom-----
15,16
15,17
27,28
27,29
35,36
35,37
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t * goodB2GSource(int64_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
static int64_t
int64_t
* goodB2GSource(int64_t * data)
*
goodB2GSource
int64_t * data
int64_t
int64_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    return data;}
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
return data;
data
data
-----joern-----
(24,9,0)
(12,2,0)
(13,2,0)
(11,4,0)
(23,13,0)
(10,9,0)
(3,15,0)
(9,21,0)
(21,2,0)
(21,6,0)
(20,6,0)
(26,11,0)
(21,3,0)
(9,6,0)
(8,5,0)
(13,6,0)
(17,20,0)
(22,9,0)
(3,21,0)
(9,10,0)
(11,26,0)
(1,8,0)
(20,21,0)
(7,20,0)
(0,13,0)
(4,11,0)
(5,19,0)
(25,21,0)
(10,2,0)
(15,3,0)
(14,26,0)
(18,2,0)
(5,8,0)
(3,4,0)
(16,11,0)
(4,3,0)
(13,21,0)
(9,21,1)
(20,7,1)
(12,5,1)
(8,1,1)
(26,14,1)
(3,15,1)
(7,17,1)
(9,6,1)
(0,10,1)
(13,0,1)
(14,16,1)
(10,9,1)
(11,26,1)
(17,21,1)
(9,24,1)
(22,12,1)
(16,25,1)
(5,8,1)
(3,4,1)
(13,21,1)
(1,20,1)
(21,6,1)
(13,6,1)
(20,6,1)
(24,22,1)
(12,20,1)
(20,21,1)
(21,3,1)
(4,11,1)
(23,13,1)
(4,11,2)
(5,20,2)
(5,8,2)
(1,20,2)
(9,6,2)
(20,6,2)
(21,6,2)
(21,3,2)
(13,6,2)
(20,21,2)
(8,20,2)
(11,26,2)
(23,13,2)
(3,4,2)
(13,21,2)
(9,21,2)
(10,9,2)
(3,15,2)
-----------------------------------
(0,data)
(1,1)
(2,)
(3,(int64_t *)
(4,malloc(100*sizeof(int64_t)
(5,exit(-1)
(6,int64_t * data)
(7,NULL)
(8,-1)
(9,data[0])
(10,printLongLongLine(data[0])
(11,100*sizeof(int64_t)
(12,L)
(13,return data;)
(14,int64_t)
(15,int64_t *)
(16,100)
(17,data)
(18,if (data == NULL)
(19,)
(20,data == NULL)
(21,data = (int64_t *)
(22,data)
(23,RET)
(24,0)
(25,data)
(26,sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^