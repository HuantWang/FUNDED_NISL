-----label-----
0
-----code-----
static struct zfcp_erp_action *zfcp_erp_setup_act(int need, u32 act_status,
						  struct zfcp_adapter *adapter,
						  struct zfcp_port *port,
						  struct scsi_device *sdev)
{
	struct zfcp_erp_action *erp_action;
	struct zfcp_scsi_dev *zfcp_sdev;

	if (WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&
			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&
			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&
			 need != ZFCP_ERP_ACTION_REOPEN_ADAPTER))
		return NULL;

	switch (need) {
	case ZFCP_ERP_ACTION_REOPEN_LUN:
		zfcp_sdev = sdev_to_zfcp(sdev);
		if (!(act_status & ZFCP_STATUS_ERP_NO_REF))
			if (scsi_device_get(sdev))
				return NULL;
		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,
				&zfcp_sdev->status);
		erp_action = &zfcp_sdev->erp_action;
		WARN_ON_ONCE(erp_action->port != port);
		WARN_ON_ONCE(erp_action->sdev != sdev);
		if (!(atomic_read(&zfcp_sdev->status) &
		      ZFCP_STATUS_COMMON_RUNNING))
			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
		break;

	case ZFCP_ERP_ACTION_REOPEN_PORT:
	case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:
		if (!get_device(&port->dev))
			return NULL;
		zfcp_erp_action_dismiss_port(port);
		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status);
		erp_action = &port->erp_action;
		WARN_ON_ONCE(erp_action->port != port);
		WARN_ON_ONCE(erp_action->sdev != NULL);
		if (!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING))
			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
		break;

	case ZFCP_ERP_ACTION_REOPEN_ADAPTER:
		kref_get(&adapter->ref);
		zfcp_erp_action_dismiss_adapter(adapter);
		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status);
		erp_action = &adapter->erp_action;
		WARN_ON_ONCE(erp_action->port != NULL);
		WARN_ON_ONCE(erp_action->sdev != NULL);
		if (!(atomic_read(&adapter->status) &
		      ZFCP_STATUS_COMMON_RUNNING))
			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
		break;

	default:
		return NULL;
	}

	WARN_ON_ONCE(erp_action->adapter != adapter);
	memset(&erp_action->list, 0, sizeof(erp_action->list));
	memset(&erp_action->timer, 0, sizeof(erp_action->timer));
	erp_action->step = ZFCP_ERP_STEP_UNINITIALIZED;
	erp_action->fsf_req_id = 0;
	erp_action->action = need;
	erp_action->status = act_status;

	return erp_action;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
7,8
7,9
9,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
29,30
31,32
31,33
34,35
34,36
34,37
34,38
34,39
34,40
34,41
34,42
34,43
34,44
34,45
34,46
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
49,50
49,51
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
71,72
71,73
72,73
74,75
76,77
77,78
79,80
79,81
80,81
82,83
82,84
82,85
82,86
82,87
82,88
82,89
82,90
82,91
82,92
82,93
82,94
82,95
82,96
82,97
82,98
82,99
82,100
82,101
82,102
82,103
82,104
82,105
82,106
82,107
82,108
82,109
82,110
82,111
82,112
83,84
84,85
86,87
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
95,97
96,97
97,98
98,99
98,100
99,100
101,102
103,104
103,105
104,105
104,106
105,106
107,108
109,110
110,111
112,113
113,114
113,115
113,116
114,115
116,117
118,119
119,120
119,121
120,121
123,124
124,125
124,126
125,126
127,128
128,129
128,130
129,130
132,133
133,134
133,135
134,135
136,137
136,138
137,138
137,139
138,139
141,142
143,144
144,145
144,146
145,146
147,148
147,149
148,149
148,150
149,150
152,153
154,155
154,156
155,156
156,157
157,158
157,159
158,159
158,160
159,160
161,162
162,163
162,164
163,164
166,167
168,169
169,170
169,171
170,171
172,173
175,176
176,177
178,179
179,180
181,182
181,183
182,183
183,184
183,185
184,185
186,187
187,188
187,189
188,189
191,192
192,193
194,195
195,196
195,197
196,197
198,199
200,201
201,202
201,203
201,204
202,203
204,205
206,207
207,208
207,209
208,209
211,212
212,213
212,214
213,214
215,216
216,217
216,218
217,218
220,221
221,222
221,223
222,223
224,225
224,226
225,226
225,227
226,227
229,230
231,232
232,233
232,234
233,234
235,236
235,237
236,237
236,238
237,238
240,241
242,243
242,244
243,244
244,245
245,246
245,247
246,247
246,248
247,248
249,250
250,251
250,252
251,252
254,255
256,257
257,258
257,259
258,259
260,261
263,264
264,265
266,267
267,268
267,269
268,269
270,271
271,272
271,273
272,273
275,276
276,277
276,278
277,278
279,280
281,282
282,283
282,284
282,285
283,284
285,286
287,288
288,289
288,290
289,290
292,293
293,294
293,295
294,295
296,297
297,298
297,299
298,299
301,302
302,303
302,304
303,304
305,306
305,307
306,307
306,308
307,308
310,311
312,313
313,314
313,315
314,315
316,317
316,318
317,318
317,319
318,319
321,322
323,324
323,325
324,325
325,326
326,327
326,328
327,328
327,329
328,329
330,331
331,332
331,333
332,333
335,336
337,338
338,339
338,340
339,340
341,342
345,346
346,347
348,349
349,350
349,351
350,351
352,353
352,354
353,354
353,355
354,355
357,358
359,360
360,361
360,362
360,363
360,364
361,362
363,364
364,365
364,366
365,366
369,370
370,371
371,372
371,373
372,373
375,376
376,377
376,378
376,379
376,380
377,378
379,380
380,381
380,382
381,382
385,386
386,387
387,388
387,389
388,389
391,392
392,393
392,394
393,394
393,395
394,395
397,398
399,400
400,401
400,402
401,402
401,403
402,403
406,407
407,408
407,409
408,409
408,410
409,410
412,413
414,415
415,416
415,417
416,417
416,418
417,418
420,421
422,423
423,424
-----nextToken-----
3,5,6,8,10,13,15,18,20,21,24,26,27,30,32,33,38,40,41,45,47,48,52,58,60,63,65,68,70,73,75,78,81,85,89,92,94,100,102,106,108,111,115,117,121,122,126,130,131,135,139,140,142,146,150,151,153,160,164,165,167,171,173,174,177,180,185,189,190,193,197,199,203,205,209,210,214,218,219,223,227,228,230,234,238,239,241,248,252,253,255,259,261,262,265,269,273,274,278,280,284,286,290,291,295,299,300,304,308,309,311,315,319,320,322,329,333,334,336,340,342,343,344,347,351,355,356,358,362,366,367,368,373,374,378,382,383,384,389,390,395,396,398,403,404,405,410,411,413,418,419,421,424
-----computeFrom-----
53,54
53,55
54,55
54,56
55,56
55,57
56,57
56,58
61,62
61,63
66,67
66,68
71,72
71,73
87,88
87,89
98,99
98,100
124,125
124,126
136,137
136,138
147,148
147,149
157,158
157,159
169,170
169,171
212,213
212,214
224,225
224,226
235,236
235,237
245,246
245,247
257,258
257,259
293,294
293,295
305,306
305,307
316,317
316,318
326,327
326,328
338,339
338,340
352,353
352,354
392,393
392,394
400,401
400,402
407,408
407,409
415,416
415,417
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct zfcp_erp_action *zfcp_erp_setup_act(int need, u32 act_status,						  struct zfcp_adapter *adapter,						  struct zfcp_port *port,						  struct scsi_device *sdev){	struct zfcp_erp_action *erp_action;	struct zfcp_scsi_dev *zfcp_sdev;	if (WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&			 need != ZFCP_ERP_ACTION_REOPEN_ADAPTER))		return NULL;	switch (need) {	case ZFCP_ERP_ACTION_REOPEN_LUN:		zfcp_sdev = sdev_to_zfcp(sdev);		if (!(act_status & ZFCP_STATUS_ERP_NO_REF))			if (scsi_device_get(sdev))				return NULL;		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,				&zfcp_sdev->status);		erp_action = &zfcp_sdev->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != sdev);		if (!(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_PORT:	case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:		if (!get_device(&port->dev))			return NULL;		zfcp_erp_action_dismiss_port(port);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status);		erp_action = &port->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_ADAPTER:		kref_get(&adapter->ref);		zfcp_erp_action_dismiss_adapter(adapter);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status);		erp_action = &adapter->erp_action;		WARN_ON_ONCE(erp_action->port != NULL);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	default:		return NULL;	}	WARN_ON_ONCE(erp_action->adapter != adapter);	memset(&erp_action->list, 0, sizeof(erp_action->list));	memset(&erp_action->timer, 0, sizeof(erp_action->timer));	erp_action->step = ZFCP_ERP_STEP_UNINITIALIZED;	erp_action->fsf_req_id = 0;	erp_action->action = need;	erp_action->status = act_status;	return erp_action;}
static struct zfcp_erp_action
zfcp_erp_action
*zfcp_erp_setup_act(int need, u32 act_status,						  struct zfcp_adapter *adapter,						  struct zfcp_port *port,						  struct scsi_device *sdev)
*
zfcp_erp_setup_act
int need
int
need
need
u32 act_status
u32
u32
act_status
act_status
struct zfcp_adapter *adapter
struct zfcp_adapter
zfcp_adapter
*adapter
*
adapter
struct zfcp_port *port
struct zfcp_port
zfcp_port
*port
*
port
struct scsi_device *sdev
struct scsi_device
scsi_device
*sdev
*
sdev
{	struct zfcp_erp_action *erp_action;	struct zfcp_scsi_dev *zfcp_sdev;	if (WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&			 need != ZFCP_ERP_ACTION_REOPEN_ADAPTER))		return NULL;	switch (need) {	case ZFCP_ERP_ACTION_REOPEN_LUN:		zfcp_sdev = sdev_to_zfcp(sdev);		if (!(act_status & ZFCP_STATUS_ERP_NO_REF))			if (scsi_device_get(sdev))				return NULL;		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,				&zfcp_sdev->status);		erp_action = &zfcp_sdev->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != sdev);		if (!(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_PORT:	case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:		if (!get_device(&port->dev))			return NULL;		zfcp_erp_action_dismiss_port(port);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status);		erp_action = &port->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_ADAPTER:		kref_get(&adapter->ref);		zfcp_erp_action_dismiss_adapter(adapter);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status);		erp_action = &adapter->erp_action;		WARN_ON_ONCE(erp_action->port != NULL);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	default:		return NULL;	}	WARN_ON_ONCE(erp_action->adapter != adapter);	memset(&erp_action->list, 0, sizeof(erp_action->list));	memset(&erp_action->timer, 0, sizeof(erp_action->timer));	erp_action->step = ZFCP_ERP_STEP_UNINITIALIZED;	erp_action->fsf_req_id = 0;	erp_action->action = need;	erp_action->status = act_status;	return erp_action;}
struct zfcp_erp_action *erp_action;
struct zfcp_erp_action *erp_action;
struct zfcp_erp_action
zfcp_erp_action
*erp_action
*
erp_action
struct zfcp_scsi_dev *zfcp_sdev;
struct zfcp_scsi_dev *zfcp_sdev;
struct zfcp_scsi_dev
zfcp_scsi_dev
*zfcp_sdev
*
zfcp_sdev
if (WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&			 need != ZFCP_ERP_ACTION_REOPEN_ADAPTER))		return NULL;
WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&			 need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
WARN_ON_ONCE
WARN_ON_ONCE
need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&			 need != ZFCP_ERP_ACTION_REOPEN_ADAPTER
need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED
need != ZFCP_ERP_ACTION_REOPEN_LUN &&			 need != ZFCP_ERP_ACTION_REOPEN_PORT
need != ZFCP_ERP_ACTION_REOPEN_LUN
need
need
ZFCP_ERP_ACTION_REOPEN_LUN
ZFCP_ERP_ACTION_REOPEN_LUN
need != ZFCP_ERP_ACTION_REOPEN_PORT
need
need
ZFCP_ERP_ACTION_REOPEN_PORT
ZFCP_ERP_ACTION_REOPEN_PORT
need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED
need
need
ZFCP_ERP_ACTION_REOPEN_PORT_FORCED
ZFCP_ERP_ACTION_REOPEN_PORT_FORCED
need != ZFCP_ERP_ACTION_REOPEN_ADAPTER
need
need
ZFCP_ERP_ACTION_REOPEN_ADAPTER
ZFCP_ERP_ACTION_REOPEN_ADAPTER
return NULL;
NULL
NULL
switch (need) {	case ZFCP_ERP_ACTION_REOPEN_LUN:		zfcp_sdev = sdev_to_zfcp(sdev);		if (!(act_status & ZFCP_STATUS_ERP_NO_REF))			if (scsi_device_get(sdev))				return NULL;		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,				&zfcp_sdev->status);		erp_action = &zfcp_sdev->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != sdev);		if (!(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_PORT:	case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:		if (!get_device(&port->dev))			return NULL;		zfcp_erp_action_dismiss_port(port);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status);		erp_action = &port->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_ADAPTER:		kref_get(&adapter->ref);		zfcp_erp_action_dismiss_adapter(adapter);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status);		erp_action = &adapter->erp_action;		WARN_ON_ONCE(erp_action->port != NULL);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	default:		return NULL;	}
need
need
{	case ZFCP_ERP_ACTION_REOPEN_LUN:		zfcp_sdev = sdev_to_zfcp(sdev);		if (!(act_status & ZFCP_STATUS_ERP_NO_REF))			if (scsi_device_get(sdev))				return NULL;		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,				&zfcp_sdev->status);		erp_action = &zfcp_sdev->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != sdev);		if (!(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_PORT:	case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:		if (!get_device(&port->dev))			return NULL;		zfcp_erp_action_dismiss_port(port);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status);		erp_action = &port->erp_action;		WARN_ON_ONCE(erp_action->port != port);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	case ZFCP_ERP_ACTION_REOPEN_ADAPTER:		kref_get(&adapter->ref);		zfcp_erp_action_dismiss_adapter(adapter);		atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status);		erp_action = &adapter->erp_action;		WARN_ON_ONCE(erp_action->port != NULL);		WARN_ON_ONCE(erp_action->sdev != NULL);		if (!(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;		break;	default:		return NULL;	}
case ZFCP_ERP_ACTION_REOPEN_LUN:
ZFCP_ERP_ACTION_REOPEN_LUN
ZFCP_ERP_ACTION_REOPEN_LUN
zfcp_sdev = sdev_to_zfcp(sdev);
zfcp_sdev = sdev_to_zfcp(sdev)
zfcp_sdev
zfcp_sdev
sdev_to_zfcp(sdev)
sdev_to_zfcp
sdev_to_zfcp
sdev
sdev
if (!(act_status & ZFCP_STATUS_ERP_NO_REF))			if (scsi_device_get(sdev))				return NULL;
!(act_status & ZFCP_STATUS_ERP_NO_REF)
(act_status & ZFCP_STATUS_ERP_NO_REF)
act_status & ZFCP_STATUS_ERP_NO_REF
act_status
act_status
ZFCP_STATUS_ERP_NO_REF
ZFCP_STATUS_ERP_NO_REF
if (scsi_device_get(sdev))				return NULL;
scsi_device_get(sdev)
scsi_device_get
scsi_device_get
sdev
sdev
return NULL;
NULL
NULL
atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,				&zfcp_sdev->status);
atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,				&zfcp_sdev->status)
atomic_or
atomic_or
ZFCP_STATUS_COMMON_ERP_INUSE
ZFCP_STATUS_COMMON_ERP_INUSE
&zfcp_sdev->status
zfcp_sdev->status
zfcp_sdev
zfcp_sdev
status
erp_action = &zfcp_sdev->erp_action;
erp_action = &zfcp_sdev->erp_action
erp_action
erp_action
&zfcp_sdev->erp_action
zfcp_sdev->erp_action
zfcp_sdev
zfcp_sdev
erp_action
WARN_ON_ONCE(erp_action->port != port);
WARN_ON_ONCE(erp_action->port != port)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->port != port
erp_action->port
erp_action
erp_action
port
port
port
WARN_ON_ONCE(erp_action->sdev != sdev);
WARN_ON_ONCE(erp_action->sdev != sdev)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->sdev != sdev
erp_action->sdev
erp_action
erp_action
sdev
sdev
sdev
if (!(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
!(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING)
(atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING)
atomic_read(&zfcp_sdev->status) &		      ZFCP_STATUS_COMMON_RUNNING
atomic_read(&zfcp_sdev->status)
atomic_read
atomic_read
&zfcp_sdev->status
zfcp_sdev->status
zfcp_sdev
zfcp_sdev
status
ZFCP_STATUS_COMMON_RUNNING
ZFCP_STATUS_COMMON_RUNNING
act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY
act_status
act_status
ZFCP_STATUS_ERP_CLOSE_ONLY
ZFCP_STATUS_ERP_CLOSE_ONLY
break;
case ZFCP_ERP_ACTION_REOPEN_PORT:
ZFCP_ERP_ACTION_REOPEN_PORT
ZFCP_ERP_ACTION_REOPEN_PORT
case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:
ZFCP_ERP_ACTION_REOPEN_PORT_FORCED
ZFCP_ERP_ACTION_REOPEN_PORT_FORCED
if (!get_device(&port->dev))			return NULL;
!get_device(&port->dev)
get_device(&port->dev)
get_device
get_device
&port->dev
port->dev
port
port
dev
return NULL;
NULL
NULL
zfcp_erp_action_dismiss_port(port);
zfcp_erp_action_dismiss_port(port)
zfcp_erp_action_dismiss_port
zfcp_erp_action_dismiss_port
port
port
atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status);
atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status)
atomic_or
atomic_or
ZFCP_STATUS_COMMON_ERP_INUSE
ZFCP_STATUS_COMMON_ERP_INUSE
&port->status
port->status
port
port
status
erp_action = &port->erp_action;
erp_action = &port->erp_action
erp_action
erp_action
&port->erp_action
port->erp_action
port
port
erp_action
WARN_ON_ONCE(erp_action->port != port);
WARN_ON_ONCE(erp_action->port != port)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->port != port
erp_action->port
erp_action
erp_action
port
port
port
WARN_ON_ONCE(erp_action->sdev != NULL);
WARN_ON_ONCE(erp_action->sdev != NULL)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->sdev != NULL
erp_action->sdev
erp_action
erp_action
sdev
NULL
NULL
if (!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
!(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING)
(atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING)
atomic_read(&port->status) & ZFCP_STATUS_COMMON_RUNNING
atomic_read(&port->status)
atomic_read
atomic_read
&port->status
port->status
port
port
status
ZFCP_STATUS_COMMON_RUNNING
ZFCP_STATUS_COMMON_RUNNING
act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY
act_status
act_status
ZFCP_STATUS_ERP_CLOSE_ONLY
ZFCP_STATUS_ERP_CLOSE_ONLY
break;
case ZFCP_ERP_ACTION_REOPEN_ADAPTER:
ZFCP_ERP_ACTION_REOPEN_ADAPTER
ZFCP_ERP_ACTION_REOPEN_ADAPTER
kref_get(&adapter->ref);
kref_get(&adapter->ref)
kref_get
kref_get
&adapter->ref
adapter->ref
adapter
adapter
ref
zfcp_erp_action_dismiss_adapter(adapter);
zfcp_erp_action_dismiss_adapter(adapter)
zfcp_erp_action_dismiss_adapter
zfcp_erp_action_dismiss_adapter
adapter
adapter
atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status);
atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status)
atomic_or
atomic_or
ZFCP_STATUS_COMMON_ERP_INUSE
ZFCP_STATUS_COMMON_ERP_INUSE
&adapter->status
adapter->status
adapter
adapter
status
erp_action = &adapter->erp_action;
erp_action = &adapter->erp_action
erp_action
erp_action
&adapter->erp_action
adapter->erp_action
adapter
adapter
erp_action
WARN_ON_ONCE(erp_action->port != NULL);
WARN_ON_ONCE(erp_action->port != NULL)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->port != NULL
erp_action->port
erp_action
erp_action
port
NULL
NULL
WARN_ON_ONCE(erp_action->sdev != NULL);
WARN_ON_ONCE(erp_action->sdev != NULL)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->sdev != NULL
erp_action->sdev
erp_action
erp_action
sdev
NULL
NULL
if (!(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING))			act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
!(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING)
(atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING)
atomic_read(&adapter->status) &		      ZFCP_STATUS_COMMON_RUNNING
atomic_read(&adapter->status)
atomic_read
atomic_read
&adapter->status
adapter->status
adapter
adapter
status
ZFCP_STATUS_COMMON_RUNNING
ZFCP_STATUS_COMMON_RUNNING
act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY;
act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY
act_status
act_status
ZFCP_STATUS_ERP_CLOSE_ONLY
ZFCP_STATUS_ERP_CLOSE_ONLY
break;
default:
return NULL;
NULL
NULL
WARN_ON_ONCE(erp_action->adapter != adapter);
WARN_ON_ONCE(erp_action->adapter != adapter)
WARN_ON_ONCE
WARN_ON_ONCE
erp_action->adapter != adapter
erp_action->adapter
erp_action
erp_action
adapter
adapter
adapter
memset(&erp_action->list, 0, sizeof(erp_action->list));
memset(&erp_action->list, 0, sizeof(erp_action->list))
memset
memset
&erp_action->list
erp_action->list
erp_action
erp_action
list
0
sizeof(erp_action->list)
(erp_action->list)
erp_action->list
erp_action
erp_action
list
memset(&erp_action->timer, 0, sizeof(erp_action->timer));
memset(&erp_action->timer, 0, sizeof(erp_action->timer))
memset
memset
&erp_action->timer
erp_action->timer
erp_action
erp_action
timer
0
sizeof(erp_action->timer)
(erp_action->timer)
erp_action->timer
erp_action
erp_action
timer
erp_action->step = ZFCP_ERP_STEP_UNINITIALIZED;
erp_action->step = ZFCP_ERP_STEP_UNINITIALIZED
erp_action->step
erp_action
erp_action
step
ZFCP_ERP_STEP_UNINITIALIZED
ZFCP_ERP_STEP_UNINITIALIZED
erp_action->fsf_req_id = 0;
erp_action->fsf_req_id = 0
erp_action->fsf_req_id
erp_action
erp_action
fsf_req_id
0
erp_action->action = need;
erp_action->action = need
erp_action->action
erp_action
erp_action
action
need
need
erp_action->status = act_status;
erp_action->status = act_status
erp_action->status
erp_action
erp_action
status
act_status
act_status
return erp_action;
erp_action
erp_action
-----joern-----
(162,211,0)
(7,103,0)
(67,140,0)
(93,206,0)
(121,136,0)
(153,99,0)
(60,133,0)
(45,144,0)
(180,38,0)
(104,116,0)
(6,136,0)
(30,78,0)
(50,194,0)
(58,188,0)
(66,206,0)
(75,218,0)
(136,121,0)
(25,129,0)
(150,163,0)
(56,210,0)
(182,86,0)
(210,183,0)
(157,206,0)
(95,144,0)
(31,193,0)
(77,194,0)
(53,111,0)
(161,163,0)
(137,54,0)
(96,104,0)
(38,199,0)
(148,132,0)
(226,12,0)
(146,206,0)
(145,134,0)
(5,206,0)
(110,206,0)
(98,195,0)
(169,63,0)
(37,192,0)
(78,157,0)
(62,72,0)
(227,197,0)
(158,49,0)
(94,222,0)
(49,191,0)
(212,5,0)
(17,197,0)
(43,121,0)
(140,206,0)
(193,206,0)
(192,37,0)
(35,11,0)
(99,206,0)
(213,29,0)
(151,20,0)
(54,144,0)
(210,191,0)
(142,163,0)
(160,111,0)
(87,133,0)
(106,195,0)
(207,91,0)
(11,17,0)
(100,34,0)
(0,197,0)
(124,206,0)
(172,96,0)
(139,197,0)
(54,81,0)
(118,194,0)
(160,55,0)
(107,21,0)
(125,197,0)
(33,98,0)
(26,206,0)
(116,206,0)
(12,191,0)
(64,157,0)
(133,191,0)
(78,194,0)
(109,51,0)
(83,206,0)
(217,91,0)
(110,87,0)
(159,227,0)
(2,81,0)
(62,227,0)
(138,3,0)
(219,139,0)
(169,3,0)
(151,114,0)
(11,217,0)
(214,5,0)
(126,6,0)
(194,185,0)
(40,43,0)
(227,194,0)
(42,195,0)
(162,157,0)
(190,214,0)
(26,54,0)
(70,151,0)
(178,129,0)
(77,197,0)
(220,11,0)
(119,162,0)
(20,151,0)
(51,109,0)
(27,96,0)
(132,63,0)
(143,37,0)
(72,86,0)
(37,217,0)
(215,3,0)
(57,98,0)
(201,206,0)
(130,134,0)
(10,142,0)
(122,19,0)
(125,169,0)
(154,221,0)
(204,128,0)
(91,111,0)
(163,150,0)
(132,150,0)
(144,197,0)
(218,194,0)
(139,157,0)
(19,108,0)
(78,197,0)
(125,194,0)
(192,99,0)
(46,109,0)
(184,43,0)
(55,206,0)
(222,94,0)
(190,81,0)
(134,130,0)
(72,3,0)
(128,160,0)
(105,57,0)
(151,3,0)
(218,20,0)
(34,221,0)
(127,57,0)
(123,77,0)
(74,139,0)
(142,63,0)
(179,3,0)
(39,191,0)
(198,38,0)
(90,157,0)
(2,213,0)
(16,161,0)
(120,218,0)
(176,130,0)
(213,2,0)
(32,221,0)
(114,151,0)
(203,82,0)
(221,34,0)
(85,67,0)
(178,76,0)
(48,206,0)
(141,206,0)
(34,141,0)
(65,162,0)
(177,130,0)
(178,50,0)
(41,29,0)
(113,182,0)
(51,14,0)
(80,174,0)
(77,157,0)
(87,110,0)
(50,157,0)
(36,19,0)
(150,132,0)
(103,39,0)
(50,197,0)
(152,142,0)
(17,11,0)
(59,39,0)
(225,174,0)
(182,157,0)
(47,3,0)
(89,206,0)
(197,17,0)
(187,169,0)
(147,9,0)
(121,43,0)
(216,3,0)
(222,81,0)
(103,7,0)
(72,62,0)
(175,132,0)
(196,74,0)
(181,6,0)
(57,197,0)
(171,157,0)
(98,9,0)
(202,19,0)
(116,104,0)
(161,63,0)
(131,78,0)
(225,183,0)
(135,77,0)
(52,161,0)
(205,104,0)
(168,128,0)
(94,199,0)
(99,192,0)
(96,194,0)
(218,157,0)
(6,126,0)
(157,171,0)
(139,194,0)
(178,188,0)
(98,108,0)
(171,82,0)
(82,81,0)
(20,218,0)
(21,81,0)
(200,22,0)
(13,160,0)
(88,134,0)
(114,78,0)
(98,22,0)
(73,190,0)
(12,206,0)
(176,206,0)
(57,194,0)
(23,222,0)
(82,171,0)
(174,80,0)
(28,109,0)
(74,44,0)
(174,225,0)
(182,197,0)
(139,74,0)
(109,63,0)
(140,67,0)
(8,72,0)
(74,191,0)
(221,194,0)
(38,198,0)
(182,194,0)
(50,3,0)
(128,197,0)
(160,128,0)
(4,22,0)
(112,90,0)
(101,53,0)
(199,38,0)
(195,108,0)
(51,150,0)
(18,222,0)
(185,194,0)
(15,7,0)
(165,125,0)
(49,185,0)
(162,197,0)
(78,114,0)
(29,213,0)
(163,142,0)
(102,210,0)
(7,206,0)
(104,96,0)
(211,3,0)
(84,211,0)
(209,50,0)
(86,72,0)
(183,210,0)
(54,26,0)
(185,49,0)
(22,108,0)
(173,206,0)
(1,138,0)
(125,157,0)
(130,176,0)
(178,193,0)
(155,190,0)
(67,90,0)
(117,2,0)
(141,34,0)
(91,217,0)
(86,182,0)
(170,82,0)
(14,51,0)
(77,138,0)
(98,3,0)
(97,206,0)
(189,206,0)
(197,206,0)
(194,206,0)
(55,160,0)
(199,94,0)
(90,67,0)
(79,139,0)
(166,125,0)
(57,157,0)
(224,37,0)
(61,9,0)
(92,39,0)
(227,157,0)
(164,49,0)
(217,206,0)
(208,90,0)
(43,217,0)
(156,206,0)
(227,62,0)
(29,41,0)
(144,54,0)
(71,174,0)
(183,225,0)
(130,81,0)
(115,133,0)
(134,157,0)
(44,3,0)
(218,197,0)
(9,108,0)
(162,194,0)
(214,190,0)
(136,6,0)
(5,214,0)
(39,103,0)
(68,76,0)
(150,51,0)
(186,227,0)
(44,74,0)
(69,182,0)
(21,206,0)
(163,161,0)
(133,87,0)
(19,36,0)
(24,2,0)
(167,217,0)
(223,206,0)
(154,194,1)
(54,81,1)
(178,129,1)
(4,80,1)
(137,144,1)
(128,204,1)
(190,81,1)
(227,197,1)
(34,221,1)
(194,185,1)
(49,158,1)
(15,12,1)
(158,164,1)
(147,198,1)
(171,82,1)
(33,57,1)
(208,176,1)
(113,151,1)
(136,121,1)
(76,68,1)
(37,224,1)
(195,108,1)
(141,34,1)
(84,162,1)
(122,202,1)
(205,96,1)
(22,108,1)
(27,141,1)
(199,94,1)
(2,24,1)
(17,11,1)
(227,159,1)
(82,203,1)
(157,171,1)
(16,132,1)
(180,199,1)
(53,111,1)
(14,51,1)
(184,40,1)
(87,133,1)
(107,41,1)
(77,157,1)
(12,191,1)
(167,149,1)
(145,88,1)
(89,9,1)
(7,103,1)
(58,53,1)
(96,194,1)
(127,169,1)
(138,1,1)
(163,161,1)
(60,149,1)
(139,194,1)
(207,167,1)
(74,139,1)
(38,180,1)
(150,132,1)
(168,26,1)
(210,56,1)
(135,72,1)
(31,149,1)
(142,63,1)
(181,136,1)
(155,212,1)
(50,209,1)
(134,157,1)
(98,108,1)
(129,25,1)
(67,85,1)
(19,108,1)
(94,222,1)
(79,173,1)
(149,14,1)
(69,113,1)
(78,194,1)
(143,153,1)
(150,163,1)
(11,217,1)
(159,186,1)
(40,55,1)
(101,36,1)
(134,145,1)
(95,197,1)
(32,154,1)
(153,53,1)
(174,71,1)
(175,109,1)
(177,134,1)
(90,157,1)
(25,41,1)
(133,191,1)
(85,90,1)
(96,172,1)
(26,54,1)
(130,177,1)
(109,46,1)
(152,161,1)
(23,18,1)
(99,192,1)
(190,73,1)
(82,81,1)
(225,183,1)
(39,59,1)
(139,197,1)
(162,157,1)
(5,214,1)
(151,114,1)
(195,42,1)
(182,194,1)
(45,95,1)
(54,144,1)
(98,195,1)
(192,37,1)
(46,28,1)
(142,10,1)
(8,86,1)
(61,147,1)
(203,170,1)
(219,79,1)
(77,197,1)
(182,69,1)
(156,126,1)
(198,38,1)
(202,217,1)
(125,157,1)
(51,150,1)
(125,165,1)
(6,136,1)
(57,197,1)
(217,91,1)
(121,43,1)
(74,196,1)
(182,157,1)
(164,118,1)
(53,101,1)
(44,74,1)
(54,137,1)
(98,9,1)
(226,110,1)
(169,63,1)
(57,157,1)
(151,20,1)
(182,197,1)
(43,184,1)
(193,31,1)
(78,131,1)
(183,210,1)
(132,148,1)
(178,76,1)
(165,166,1)
(50,157,1)
(162,65,1)
(220,0,1)
(222,23,1)
(56,102,1)
(139,157,1)
(162,197,1)
(86,182,1)
(120,75,1)
(132,63,1)
(144,45,1)
(42,106,1)
(227,157,1)
(100,221,1)
(10,152,1)
(12,226,1)
(104,96,1)
(77,194,1)
(80,174,1)
(19,122,1)
(50,194,1)
(51,109,1)
(78,197,1)
(125,194,1)
(102,116,1)
(35,220,1)
(55,160,1)
(13,128,1)
(98,33,1)
(218,157,1)
(73,155,1)
(106,126,1)
(59,92,1)
(30,70,1)
(39,191,1)
(116,104,1)
(79,89,1)
(178,50,1)
(178,188,1)
(41,29,1)
(67,90,1)
(0,99,1)
(187,125,1)
(224,143,1)
(90,112,1)
(173,80,1)
(71,225,1)
(115,60,1)
(64,5,1)
(89,198,1)
(211,84,1)
(91,111,1)
(209,98,1)
(173,22,1)
(79,156,1)
(21,107,1)
(221,194,1)
(70,20,1)
(34,100,1)
(74,191,1)
(148,175,1)
(50,197,1)
(62,227,1)
(140,67,1)
(196,139,1)
(153,36,1)
(118,7,1)
(22,200,1)
(162,194,1)
(68,14,1)
(18,140,1)
(156,195,1)
(98,22,1)
(197,17,1)
(43,217,1)
(38,199,1)
(2,81,1)
(174,225,1)
(161,63,1)
(104,205,1)
(21,81,1)
(112,208,1)
(218,120,1)
(72,86,1)
(20,218,1)
(37,217,1)
(91,207,1)
(88,157,1)
(52,16,1)
(169,187,1)
(133,115,1)
(185,49,1)
(178,193,1)
(57,105,1)
(65,119,1)
(105,127,1)
(163,142,1)
(9,61,1)
(221,32,1)
(114,78,1)
(1,77,1)
(172,27,1)
(166,211,1)
(186,8,1)
(103,39,1)
(117,149,1)
(130,81,1)
(125,197,1)
(218,194,1)
(160,13,1)
(109,63,1)
(227,194,1)
(110,87,1)
(75,44,1)
(57,194,1)
(222,81,1)
(218,197,1)
(161,52,1)
(128,197,1)
(9,108,1)
(29,213,1)
(131,30,1)
(11,35,1)
(210,191,1)
(204,168,1)
(139,219,1)
(200,4,1)
(170,64,1)
(123,135,1)
(119,138,1)
(36,19,1)
(176,130,1)
(130,134,1)
(160,128,1)
(144,197,1)
(92,15,1)
(24,117,1)
(78,157,1)
(6,181,1)
(77,123,1)
(72,62,1)
(188,58,1)
(49,191,1)
(160,111,1)
(214,190,1)
(213,2,1)
(212,21,1)
(126,6,1)
(44,53,2)
(67,41,2)
(218,41,2)
(96,149,2)
(26,53,2)
(120,41,2)
(94,41,2)
(182,41,2)
(136,53,2)
(184,53,2)
(187,53,2)
(195,108,2)
(218,149,2)
(6,136,2)
(118,149,2)
(41,149,2)
(98,149,2)
(158,149,2)
(75,53,2)
(162,36,2)
(176,41,2)
(87,133,2)
(210,191,2)
(210,149,2)
(98,22,2)
(126,6,2)
(57,157,2)
(219,53,2)
(98,41,2)
(103,39,2)
(75,41,2)
(130,81,2)
(209,41,2)
(17,11,2)
(198,41,2)
(105,36,2)
(35,36,2)
(34,149,2)
(150,163,2)
(106,126,2)
(77,197,2)
(8,41,2)
(211,149,2)
(211,36,2)
(190,81,2)
(55,160,2)
(64,41,2)
(186,41,2)
(185,49,2)
(184,36,2)
(62,41,2)
(84,53,2)
(162,149,2)
(8,53,2)
(0,53,2)
(225,183,2)
(87,149,2)
(10,161,2)
(20,36,2)
(17,53,2)
(50,149,2)
(80,149,2)
(197,53,2)
(74,36,2)
(114,149,2)
(32,149,2)
(94,222,2)
(4,80,2)
(0,36,2)
(18,41,2)
(194,149,2)
(77,53,2)
(126,36,2)
(139,149,2)
(17,36,2)
(95,53,2)
(54,144,2)
(139,157,2)
(36,149,2)
(78,157,2)
(50,197,2)
(209,53,2)
(70,149,2)
(114,78,2)
(160,128,2)
(6,36,2)
(44,36,2)
(11,53,2)
(1,41,2)
(120,149,2)
(178,193,2)
(182,36,2)
(82,41,2)
(39,149,2)
(187,149,2)
(112,41,2)
(41,29,2)
(44,149,2)
(55,53,2)
(219,149,2)
(37,36,2)
(96,194,2)
(49,149,2)
(211,41,2)
(165,36,2)
(92,149,2)
(178,129,2)
(178,50,2)
(165,41,2)
(6,53,2)
(137,36,2)
(132,109,2)
(117,149,2)
(122,149,2)
(186,36,2)
(98,53,2)
(132,63,2)
(218,197,2)
(16,132,2)
(86,36,2)
(120,36,2)
(193,149,2)
(86,41,2)
(15,149,2)
(169,63,2)
(52,132,2)
(74,149,2)
(37,217,2)
(78,53,2)
(152,161,2)
(23,41,2)
(211,53,2)
(12,191,2)
(8,36,2)
(207,149,2)
(51,150,2)
(166,53,2)
(1,149,2)
(185,149,2)
(128,197,2)
(218,36,2)
(199,94,2)
(218,53,2)
(192,37,2)
(162,157,2)
(182,149,2)
(57,194,2)
(20,41,2)
(227,149,2)
(125,157,2)
(40,36,2)
(30,36,2)
(123,53,2)
(138,149,2)
(174,225,2)
(203,41,2)
(26,36,2)
(59,149,2)
(25,41,2)
(150,132,2)
(178,188,2)
(139,53,2)
(178,76,2)
(125,36,2)
(135,36,2)
(95,36,2)
(151,114,2)
(121,53,2)
(102,149,2)
(39,191,2)
(225,149,2)
(43,53,2)
(196,36,2)
(70,41,2)
(181,36,2)
(156,53,2)
(99,36,2)
(162,194,2)
(34,221,2)
(53,111,2)
(44,74,2)
(143,36,2)
(209,36,2)
(227,36,2)
(44,41,2)
(43,36,2)
(162,197,2)
(88,41,2)
(91,149,2)
(11,36,2)
(13,53,2)
(148,109,2)
(151,20,2)
(208,41,2)
(139,41,2)
(204,36,2)
(134,157,2)
(45,36,2)
(2,81,2)
(227,41,2)
(131,41,2)
(79,149,2)
(175,109,2)
(65,36,2)
(50,41,2)
(127,41,2)
(30,149,2)
(227,157,2)
(62,53,2)
(107,41,2)
(90,157,2)
(167,149,2)
(139,36,2)
(186,149,2)
(8,149,2)
(123,41,2)
(114,36,2)
(169,53,2)
(110,149,2)
(222,41,2)
(213,2,2)
(84,149,2)
(114,41,2)
(62,149,2)
(19,149,2)
(110,87,2)
(144,197,2)
(181,53,2)
(49,191,2)
(149,14,2)
(77,41,2)
(74,139,2)
(165,149,2)
(227,197,2)
(217,91,2)
(222,81,2)
(139,194,2)
(220,53,2)
(65,53,2)
(33,36,2)
(217,149,2)
(80,174,2)
(119,149,2)
(51,109,2)
(126,53,2)
(69,149,2)
(84,36,2)
(57,41,2)
(57,197,2)
(37,53,2)
(12,149,2)
(169,36,2)
(24,149,2)
(104,96,2)
(109,63,2)
(77,157,2)
(77,149,2)
(82,81,2)
(165,53,2)
(204,53,2)
(7,149,2)
(119,36,2)
(162,53,2)
(219,36,2)
(192,36,2)
(2,149,2)
(214,190,2)
(160,53,2)
(33,149,2)
(75,36,2)
(121,36,2)
(224,36,2)
(197,17,2)
(125,197,2)
(138,53,2)
(21,41,2)
(13,36,2)
(227,194,2)
(162,41,2)
(200,80,2)
(84,41,2)
(38,41,2)
(125,53,2)
(123,149,2)
(105,53,2)
(57,36,2)
(91,111,2)
(68,14,2)
(163,132,2)
(182,197,2)
(104,149,2)
(11,217,2)
(188,53,2)
(196,53,2)
(35,53,2)
(115,149,2)
(30,53,2)
(74,41,2)
(119,41,2)
(85,41,2)
(213,149,2)
(58,53,2)
(169,149,2)
(29,213,2)
(101,36,2)
(134,41,2)
(180,41,2)
(161,132,2)
(72,62,2)
(98,36,2)
(140,41,2)
(50,157,2)
(195,126,2)
(168,36,2)
(151,53,2)
(14,51,2)
(90,41,2)
(79,53,2)
(131,149,2)
(187,41,2)
(76,14,2)
(99,53,2)
(55,36,2)
(144,53,2)
(98,9,2)
(202,149,2)
(77,36,2)
(135,41,2)
(127,149,2)
(172,149,2)
(139,197,2)
(157,171,2)
(136,36,2)
(20,53,2)
(173,149,2)
(21,81,2)
(26,54,2)
(220,36,2)
(42,126,2)
(62,227,2)
(136,121,2)
(150,109,2)
(43,217,2)
(138,41,2)
(209,149,2)
(33,41,2)
(86,149,2)
(56,149,2)
(61,198,2)
(113,149,2)
(127,53,2)
(69,53,2)
(226,149,2)
(113,41,2)
(164,149,2)
(197,36,2)
(142,63,2)
(1,53,2)
(67,90,2)
(196,149,2)
(169,41,2)
(133,149,2)
(20,218,2)
(86,182,2)
(53,36,2)
(198,38,2)
(140,67,2)
(144,36,2)
(114,53,2)
(145,41,2)
(137,53,2)
(171,82,2)
(192,53,2)
(50,53,2)
(159,41,2)
(182,53,2)
(160,36,2)
(171,41,2)
(142,161,2)
(79,41,2)
(113,36,2)
(176,130,2)
(159,149,2)
(54,81,2)
(86,53,2)
(218,157,2)
(40,53,2)
(113,53,2)
(105,149,2)
(183,149,2)
(71,149,2)
(154,149,2)
(89,41,2)
(9,108,2)
(9,198,2)
(156,36,2)
(78,149,2)
(65,149,2)
(159,36,2)
(57,53,2)
(33,53,2)
(159,53,2)
(135,53,2)
(120,53,2)
(77,194,2)
(31,149,2)
(168,53,2)
(74,53,2)
(22,80,2)
(65,41,2)
(99,192,2)
(128,53,2)
(199,41,2)
(60,149,2)
(57,149,2)
(153,36,2)
(72,41,2)
(186,53,2)
(119,53,2)
(196,41,2)
(73,41,2)
(147,198,2)
(182,157,2)
(141,149,2)
(30,41,2)
(130,134,2)
(70,36,2)
(36,19,2)
(166,36,2)
(174,149,2)
(116,149,2)
(123,36,2)
(227,53,2)
(183,210,2)
(19,108,2)
(160,111,2)
(72,149,2)
(212,41,2)
(129,41,2)
(20,149,2)
(138,36,2)
(79,36,2)
(105,41,2)
(100,149,2)
(78,197,2)
(205,149,2)
(224,53,2)
(69,41,2)
(98,108,2)
(1,36,2)
(22,108,2)
(163,142,2)
(131,53,2)
(141,34,2)
(161,63,2)
(121,43,2)
(187,36,2)
(190,41,2)
(72,86,2)
(5,214,2)
(78,36,2)
(50,36,2)
(131,36,2)
(163,161,2)
(27,149,2)
(116,104,2)
(166,41,2)
(127,36,2)
(62,36,2)
(143,53,2)
(70,53,2)
(194,185,2)
(69,36,2)
(177,41,2)
(5,41,2)
(72,53,2)
(125,41,2)
(54,36,2)
(219,41,2)
(38,199,2)
(74,191,2)
(45,53,2)
(166,149,2)
(72,36,2)
(170,41,2)
(54,53,2)
(125,149,2)
(155,41,2)
(153,53,2)
(98,195,2)
(182,194,2)
(218,194,2)
(50,194,2)
(103,149,2)
(7,103,2)
(78,41,2)
(221,194,2)
(29,149,2)
(135,149,2)
(151,36,2)
(214,41,2)
(133,191,2)
(151,41,2)
(221,149,2)
(130,41,2)
(151,149,2)
(75,149,2)
(157,41,2)
(78,194,2)
(128,36,2)
(125,194,2)
-----------------------------------
(0,erp_action)
(1,ZFCP_ERP_STEP_UNINITIALIZED)
(2,port->dev)
(3,)
(4,act_status)
(5,atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &port->status)
(6,atomic_read(&zfcp_sdev->status)
(7,atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE, &adapter->status)
(8,0)
(9,act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY)
(10,ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(11,zfcp_sdev->erp_action)
(12,zfcp_erp_action_dismiss_adapter(adapter)
(13,sdev)
(14,WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(15,ZFCP_STATUS_COMMON_ERP_INUSE)
(16,need)
(17,&zfcp_sdev->erp_action)
(18,port)
(19,act_status & ZFCP_STATUS_ERP_NO_REF)
(20,&erp_action->list)
(21,zfcp_erp_action_dismiss_port(port)
(22,act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY)
(23,status)
(24,dev)
(25,NULL)
(26,WARN_ON_ONCE(erp_action->port != port)
(27,erp_action)
(28,need)
(29,get_device(&port->dev)
(30,erp_action)
(31,NULL)
(32,port)
(33,act_status)
(34,erp_action->port != NULL)
(35,erp_action)
(36,!(act_status & ZFCP_STATUS_ERP_NO_REF)
(37,zfcp_sdev->status)
(38,atomic_read(&port->status)
(39,adapter->status)
(40,zfcp_sdev)
(41,!get_device(&port->dev)
(42,ZFCP_STATUS_ERP_CLOSE_ONLY)
(43,zfcp_sdev->status)
(44,WARN_ON_ONCE(erp_action->adapter != adapter)
(45,port)
(46,ZFCP_ERP_ACTION_REOPEN_LUN)
(47,if (WARN_ON_ONCE(need != ZFCP_ERP_ACTION_REOPEN_LUN &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(48,case ZFCP_ERP_ACTION_REOPEN_LUN:)
(49,adapter->erp_action)
(50,return erp_action;)
(51,need != ZFCP_ERP_ACTION_REOPEN_LUN &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(52,ZFCP_ERP_ACTION_REOPEN_PORT_FORCED)
(53,scsi_device_get(sdev)
(54,erp_action->port != port)
(55,WARN_ON_ONCE(erp_action->sdev != sdev)
(56,status)
(57,erp_action->status)
(58,NULL)
(59,status)
(60,adapter)
(61,ZFCP_STATUS_ERP_CLOSE_ONLY)
(62,sizeof(erp_action->timer)
(63,int need)
(64,erp_action)
(65,fsf_req_id)
(66,if (!(atomic_read(&adapter->status)
(67,erp_action->sdev != NULL)
(68,NULL)
(69,timer)
(70,0)
(71,ZFCP_STATUS_COMMON_RUNNING)
(72,memset(&erp_action->timer, 0, sizeof(erp_action->timer)
(73,status)
(74,erp_action->adapter != adapter)
(75,erp_action)
(76,return NULL;)
(77,erp_action->step)
(78,erp_action->list)
(79,erp_action)
(80,!(atomic_read(&adapter->status)
(81,struct zfcp_port *port)
(82,port->erp_action)
(83,if (!(act_status & ZFCP_STATUS_ERP_NO_REF)
(84,0)
(85,NULL)
(86,&erp_action->timer)
(87,&adapter->ref)
(88,erp_action)
(89,break;)
(90,erp_action->sdev)
(91,sdev_to_zfcp(sdev)
(92,adapter)
(93,case ZFCP_ERP_ACTION_REOPEN_PORT_FORCED:)
(94,&port->status)
(95,erp_action)
(96,erp_action->sdev)
(97,if (!get_device(&port->dev)
(98,erp_action->status = act_status)
(99,atomic_or(ZFCP_STATUS_COMMON_ERP_INUSE,\n\\n\\t\\t\\t\\t&zfcp_sdev->status)
(100,NULL)
(101,sdev)
(102,adapter)
(103,&adapter->status)
(104,erp_action->sdev != NULL)
(105,status)
(106,act_status)
(107,port)
(108,u32 act_status)
(109,need != ZFCP_ERP_ACTION_REOPEN_LUN)
(110,kref_get(&adapter->ref)
(111,struct scsi_device *sdev)
(112,sdev)
(113,erp_action)
(114,sizeof(erp_action->list)
(115,ref)
(116,WARN_ON_ONCE(erp_action->sdev != NULL)
(117,port)
(118,erp_action)
(119,erp_action)
(120,list)
(121,&zfcp_sdev->status)
(122,ZFCP_STATUS_ERP_NO_REF)
(123,step)
(124,if (!(atomic_read(&zfcp_sdev->status)
(125,erp_action->action)
(126,!(atomic_read(&zfcp_sdev->status)
(127,erp_action)
(128,erp_action->sdev)
(129,return NULL;)
(130,erp_action->port != port)
(131,list)
(132,need != ZFCP_ERP_ACTION_REOPEN_PORT)
(133,adapter->ref)
(134,erp_action->port)
(135,erp_action)
(136,atomic_read(&zfcp_sdev->status)
(137,port)
(138,erp_action->step = ZFCP_ERP_STEP_UNINITIALIZED)
(139,erp_action->adapter)
(140,WARN_ON_ONCE(erp_action->sdev != NULL)
(141,WARN_ON_ONCE(erp_action->port != NULL)
(142,need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(143,zfcp_sdev)
(144,erp_action->port)
(145,port)
(146,default:)
(147,act_status)
(148,ZFCP_ERP_ACTION_REOPEN_PORT)
(149,need)
(150,need != ZFCP_ERP_ACTION_REOPEN_PORT &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(151,memset(&erp_action->list, 0, sizeof(erp_action->list)
(152,need)
(153,ZFCP_STATUS_COMMON_ERP_INUSE)
(154,erp_action)
(155,port)
(156,break;)
(157,erp_action = &port->erp_action)
(158,erp_action)
(159,timer)
(160,erp_action->sdev != sdev)
(161,need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED)
(162,erp_action->fsf_req_id)
(163,need != ZFCP_ERP_ACTION_REOPEN_PORT_FORCED &&\n\\n\\t\\t\\t need != ZFCP_ERP_ACTION_REOPEN_ADAPTER)
(164,adapter)
(165,action)
(166,erp_action)
(167,zfcp_sdev)
(168,erp_action)
(169,erp_action->action = need)
(170,port)
(171,&port->erp_action)
(172,sdev)
(173,break;)
(174,atomic_read(&adapter->status)
(175,need)
(176,WARN_ON_ONCE(erp_action->port != port)
(177,port)
(178,RET)
(179,erp_action)
(180,ZFCP_STATUS_COMMON_RUNNING)
(181,ZFCP_STATUS_COMMON_RUNNING)
(182,erp_action->timer)
(183,&adapter->status)
(184,status)
(185,&adapter->erp_action)
(186,erp_action)
(187,need)
(188,return NULL;)
(189,case ZFCP_ERP_ACTION_REOPEN_PORT:)
(190,port->status)
(191,struct zfcp_adapter *adapter)
(192,&zfcp_sdev->status)
(193,return NULL;)
(194,erp_action = &adapter->erp_action)
(195,act_status |= ZFCP_STATUS_ERP_CLOSE_ONLY)
(196,adapter)
(197,erp_action = &zfcp_sdev->erp_action)
(198,!(atomic_read(&port->status)
(199,atomic_read(&port->status)
(200,ZFCP_STATUS_ERP_CLOSE_ONLY)
(201,if (!(atomic_read(&port->status)
(202,act_status)
(203,erp_action)
(204,sdev)
(205,NULL)
(206,)
(207,sdev)
(208,erp_action)
(209,erp_action)
(210,adapter->status)
(211,erp_action->fsf_req_id = 0)
(212,ZFCP_STATUS_COMMON_ERP_INUSE)
(213,&port->dev)
(214,&port->status)
(215,switch (need)
(216,zfcp_sdev)
(217,zfcp_sdev = sdev_to_zfcp(sdev)
(218,erp_action->list)
(219,adapter)
(220,zfcp_sdev)
(221,erp_action->port)
(222,port->status)
(223,case ZFCP_ERP_ACTION_REOPEN_ADAPTER:)
(224,status)
(225,atomic_read(&adapter->status)
(226,adapter)
(227,erp_action->timer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^