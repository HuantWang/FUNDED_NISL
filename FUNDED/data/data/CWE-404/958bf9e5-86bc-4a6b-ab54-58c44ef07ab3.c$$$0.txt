-----label-----
0
-----code-----
static void drm_mm_insert_helper_range(struct drm_mm_node *hole_node,
				       struct drm_mm_node *node,
				       u64 size, unsigned alignment,
				       unsigned long color,
				       u64 start, u64 end,
				       enum drm_mm_allocator_flags flags)
{
	struct drm_mm *mm = hole_node->mm;
	u64 hole_start = drm_mm_hole_node_start(hole_node);
	u64 hole_end = drm_mm_hole_node_end(hole_node);
	u64 adj_start = hole_start;
	u64 adj_end = hole_end;

	BUG_ON(!hole_node->hole_follows || node->allocated);

	if (mm->color_adjust)
		mm->color_adjust(hole_node, color, &adj_start, &adj_end);

	adj_start = max(adj_start, start);
	adj_end = min(adj_end, end);

	if (flags & DRM_MM_CREATE_TOP)
		adj_start = adj_end - size;

	if (alignment) {
		u64 tmp = adj_start;
		unsigned rem;

		rem = do_div(tmp, alignment);
		if (rem) {
			if (flags & DRM_MM_CREATE_TOP)
				adj_start -= rem;
			else
				adj_start += alignment - rem;
		}
	}

	if (adj_start == hole_start) {
		hole_node->hole_follows = 0;
		list_del(&hole_node->hole_stack);
		rb_erase_hole_node(hole_node, mm);
	}

	node->start = adj_start;
	node->size = size;
	node->mm = mm;
	node->color = color;
	node->allocated = 1;

	list_add(&node->node_list, &hole_node->node_list);

	drm_mm_interval_tree_add_node(hole_node, node);

	BUG_ON(node->start < start);
	BUG_ON(node->start < adj_start);
	BUG_ON(node->start + node->size > adj_end);
	BUG_ON(node->start + node->size > end);

	node->hole_follows = 0;
	if (__drm_mm_hole_node_start(node) < hole_end) {
		list_add(&node->hole_stack, &mm->hole_stack);
		rb_insert_hole_node(node, mm);
		node->hole_follows = 1;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
24,25
26,27
26,28
28,29
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
45,51
45,52
45,53
45,54
45,55
45,56
45,57
45,58
45,59
45,60
45,61
45,62
45,63
45,64
45,65
45,66
45,67
45,68
45,69
45,70
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
86,87
86,88
88,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
97,98
98,99
100,101
101,102
101,103
102,103
104,105
104,106
105,106
106,107
106,108
107,108
110,111
110,112
111,112
114,115
114,116
115,116
115,117
116,117
119,120
120,121
120,122
120,123
120,124
120,125
121,122
121,123
122,123
125,126
127,128
129,130
130,131
132,133
133,134
135,136
136,137
136,138
137,138
139,140
139,141
139,142
140,141
142,143
144,145
146,147
147,148
147,149
148,149
150,151
150,152
150,153
151,152
153,154
155,156
157,158
157,159
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
168,169
170,171
172,173
172,174
173,174
175,176
175,177
175,178
175,179
176,177
177,178
177,179
178,179
180,181
180,182
182,183
183,184
185,186
186,187
186,188
188,189
190,191
191,192
191,193
192,193
194,195
194,196
194,197
195,196
197,198
199,200
201,202
201,203
202,203
204,205
205,206
205,207
205,208
206,207
206,208
207,208
209,210
211,212
212,213
212,214
213,214
215,216
217,218
218,219
218,220
219,220
221,222
221,223
222,223
224,225
226,227
226,228
227,228
227,229
228,229
230,231
232,233
232,234
232,235
233,234
234,235
234,236
235,236
235,237
236,237
240,241
241,242
241,243
242,243
244,245
245,246
245,247
246,247
249,250
250,251
250,252
250,253
251,252
253,254
255,256
257,258
258,259
258,260
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
267,269
268,269
271,272
273,274
274,275
274,276
275,276
275,277
276,277
279,280
281,282
282,283
282,284
283,284
283,285
284,285
287,288
289,290
290,291
290,292
291,292
291,293
292,293
296,297
297,298
297,299
297,300
298,299
300,301
301,302
301,303
302,303
305,306
306,307
306,308
307,308
310,311
311,312
311,313
311,314
312,313
314,315
316,317
318,319
319,320
319,321
320,321
322,323
322,324
323,324
323,325
324,325
327,328
329,330
330,331
330,332
331,332
333,334
333,335
334,335
334,336
335,336
338,339
340,341
341,342
341,343
342,343
344,345
344,346
345,346
345,347
346,347
346,348
347,348
350,351
350,352
351,352
354,355
356,357
357,358
357,359
358,359
360,361
360,362
361,362
361,363
362,363
362,364
363,364
366,367
366,368
367,368
370,371
372,373
373,374
373,375
374,375
374,376
375,376
379,380
379,381
380,381
380,382
381,382
381,383
382,383
384,385
386,387
388,389
388,390
388,391
389,390
390,391
390,392
390,393
391,392
393,394
394,395
394,396
395,396
398,399
399,400
399,401
400,401
403,404
404,405
404,406
404,407
405,406
407,408
409,410
411,412
412,413
412,414
413,414
413,415
414,415
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,23,25,27,29,32,34,37,39,42,44,49,51,52,56,57,61,63,67,69,73,75,79,81,85,87,90,94,96,99,103,108,109,112,113,117,118,123,124,126,128,131,134,138,141,143,145,149,152,154,156,160,162,166,169,171,174,179,181,184,187,189,193,196,198,200,203,208,210,214,216,220,223,225,229,231,237,238,239,243,247,248,252,254,256,261,262,264,269,270,272,277,278,280,285,286,288,293,294,295,299,303,304,308,309,313,315,317,321,325,326,328,332,336,337,339,343,348,349,352,353,355,359,364,365,368,369,371,376,377,378,383,385,387,392,396,397,401,402,406,408,410,415,416,417
-----computeFrom-----
104,105
104,106
136,137
136,138
147,148
147,149
158,159
158,160
164,165
164,166
167,168
167,169
191,192
191,193
206,207
206,208
212,213
212,214
218,219
218,220
221,222
221,223
227,228
227,229
234,235
234,236
258,259
258,260
266,267
266,268
274,275
274,276
282,283
282,284
290,291
290,292
322,323
322,324
333,334
333,335
344,345
344,346
345,346
345,347
360,361
360,362
361,362
361,363
373,374
373,375
380,381
380,382
412,413
412,414
-----guardedBy-----
385,415
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static void drm_mm_insert_helper_range(struct drm_mm_node *hole_node,				       struct drm_mm_node *node,				       u64 size, unsigned alignment,				       unsigned long color,				       u64 start, u64 end,				       enum drm_mm_allocator_flags flags){	struct drm_mm *mm = hole_node->mm;	u64 hole_start = drm_mm_hole_node_start(hole_node);	u64 hole_end = drm_mm_hole_node_end(hole_node);	u64 adj_start = hole_start;	u64 adj_end = hole_end;	BUG_ON(!hole_node->hole_follows || node->allocated);	if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);	adj_start = max(adj_start, start);	adj_end = min(adj_end, end);	if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;	if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}	if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);		rb_erase_hole_node(hole_node, mm);	}	node->start = adj_start;	node->size = size;	node->mm = mm;	node->color = color;	node->allocated = 1;	list_add(&node->node_list, &hole_node->node_list);	drm_mm_interval_tree_add_node(hole_node, node);	BUG_ON(node->start < start);	BUG_ON(node->start < adj_start);	BUG_ON(node->start + node->size > adj_end);	BUG_ON(node->start + node->size > end);	node->hole_follows = 0;	if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		rb_insert_hole_node(node, mm);		node->hole_follows = 1;	}}
static void
drm_mm_insert_helper_range(struct drm_mm_node *hole_node,				       struct drm_mm_node *node,				       u64 size, unsigned alignment,				       unsigned long color,				       u64 start, u64 end,				       enum drm_mm_allocator_flags flags)
drm_mm_insert_helper_range
struct drm_mm_node *hole_node
struct drm_mm_node
drm_mm_node
*hole_node
*
hole_node
struct drm_mm_node *node
struct drm_mm_node
drm_mm_node
*node
*
node
u64 size
u64
u64
size
size
unsigned alignment
unsigned
alignment
alignment
unsigned long color
unsigned long
color
color
u64 start
u64
u64
start
start
u64 end
u64
u64
end
end
enum drm_mm_allocator_flags flags
enum drm_mm_allocator_flags
drm_mm_allocator_flags
flags
flags
{	struct drm_mm *mm = hole_node->mm;	u64 hole_start = drm_mm_hole_node_start(hole_node);	u64 hole_end = drm_mm_hole_node_end(hole_node);	u64 adj_start = hole_start;	u64 adj_end = hole_end;	BUG_ON(!hole_node->hole_follows || node->allocated);	if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);	adj_start = max(adj_start, start);	adj_end = min(adj_end, end);	if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;	if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}	if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);		rb_erase_hole_node(hole_node, mm);	}	node->start = adj_start;	node->size = size;	node->mm = mm;	node->color = color;	node->allocated = 1;	list_add(&node->node_list, &hole_node->node_list);	drm_mm_interval_tree_add_node(hole_node, node);	BUG_ON(node->start < start);	BUG_ON(node->start < adj_start);	BUG_ON(node->start + node->size > adj_end);	BUG_ON(node->start + node->size > end);	node->hole_follows = 0;	if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		rb_insert_hole_node(node, mm);		node->hole_follows = 1;	}}
struct drm_mm *mm = hole_node->mm;
struct drm_mm *mm = hole_node->mm;
struct drm_mm
drm_mm
*mm = hole_node->mm
*
mm
= hole_node->mm
hole_node->mm
hole_node
hole_node
mm
u64 hole_start = drm_mm_hole_node_start(hole_node);
u64 hole_start = drm_mm_hole_node_start(hole_node);
u64
u64
hole_start = drm_mm_hole_node_start(hole_node)
hole_start
= drm_mm_hole_node_start(hole_node)
drm_mm_hole_node_start(hole_node)
drm_mm_hole_node_start
drm_mm_hole_node_start
hole_node
hole_node
u64 hole_end = drm_mm_hole_node_end(hole_node);
u64 hole_end = drm_mm_hole_node_end(hole_node);
u64
u64
hole_end = drm_mm_hole_node_end(hole_node)
hole_end
= drm_mm_hole_node_end(hole_node)
drm_mm_hole_node_end(hole_node)
drm_mm_hole_node_end
drm_mm_hole_node_end
hole_node
hole_node
u64 adj_start = hole_start;
u64 adj_start = hole_start;
u64
u64
adj_start = hole_start
adj_start
= hole_start
hole_start
hole_start
u64 adj_end = hole_end;
u64 adj_end = hole_end;
u64
u64
adj_end = hole_end
adj_end
= hole_end
hole_end
hole_end
BUG_ON(!hole_node->hole_follows || node->allocated);
BUG_ON(!hole_node->hole_follows || node->allocated)
BUG_ON
BUG_ON
!hole_node->hole_follows || node->allocated
!hole_node->hole_follows
hole_node->hole_follows
hole_node
hole_node
hole_follows
node->allocated
node
node
allocated
if (mm->color_adjust)		mm->color_adjust(hole_node, color, &adj_start, &adj_end);
mm->color_adjust
mm
mm
color_adjust
mm->color_adjust(hole_node, color, &adj_start, &adj_end);
mm->color_adjust(hole_node, color, &adj_start, &adj_end)
mm->color_adjust
mm
mm
color_adjust
hole_node
hole_node
color
color
&adj_start
adj_start
adj_start
&adj_end
adj_end
adj_end
adj_start = max(adj_start, start);
adj_start = max(adj_start, start)
adj_start
adj_start
max(adj_start, start)
max
max
adj_start
adj_start
start
start
adj_end = min(adj_end, end);
adj_end = min(adj_end, end)
adj_end
adj_end
min(adj_end, end)
min
min
adj_end
adj_end
end
end
if (flags & DRM_MM_CREATE_TOP)		adj_start = adj_end - size;
flags & DRM_MM_CREATE_TOP
flags
flags
DRM_MM_CREATE_TOP
DRM_MM_CREATE_TOP
adj_start = adj_end - size;
adj_start = adj_end - size
adj_start
adj_start
adj_end - size
adj_end
adj_end
size
size
if (alignment) {		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}
alignment
alignment
{		u64 tmp = adj_start;		unsigned rem;		rem = do_div(tmp, alignment);		if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}	}
u64 tmp = adj_start;
u64 tmp = adj_start;
u64
u64
tmp = adj_start
tmp
= adj_start
adj_start
adj_start
unsigned rem;
unsigned rem;
unsigned
rem
rem
rem = do_div(tmp, alignment);
rem = do_div(tmp, alignment)
rem
rem
do_div(tmp, alignment)
do_div
do_div
tmp
tmp
alignment
alignment
if (rem) {			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}
rem
rem
{			if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;		}
if (flags & DRM_MM_CREATE_TOP)				adj_start -= rem;			else				adj_start += alignment - rem;
flags & DRM_MM_CREATE_TOP
flags
flags
DRM_MM_CREATE_TOP
DRM_MM_CREATE_TOP
adj_start -= rem;
adj_start -= rem
adj_start
adj_start
rem
rem
adj_start += alignment - rem;
adj_start += alignment - rem
adj_start
adj_start
alignment - rem
alignment
alignment
rem
rem
if (adj_start == hole_start) {		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);		rb_erase_hole_node(hole_node, mm);	}
adj_start == hole_start
adj_start
adj_start
hole_start
hole_start
{		hole_node->hole_follows = 0;		list_del(&hole_node->hole_stack);		rb_erase_hole_node(hole_node, mm);	}
hole_node->hole_follows = 0;
hole_node->hole_follows = 0
hole_node->hole_follows
hole_node
hole_node
hole_follows
0
list_del(&hole_node->hole_stack);
list_del(&hole_node->hole_stack)
list_del
list_del
&hole_node->hole_stack
hole_node->hole_stack
hole_node
hole_node
hole_stack
rb_erase_hole_node(hole_node, mm);
rb_erase_hole_node(hole_node, mm)
rb_erase_hole_node
rb_erase_hole_node
hole_node
hole_node
mm
mm
node->start = adj_start;
node->start = adj_start
node->start
node
node
start
adj_start
adj_start
node->size = size;
node->size = size
node->size
node
node
size
size
size
node->mm = mm;
node->mm = mm
node->mm
node
node
mm
mm
mm
node->color = color;
node->color = color
node->color
node
node
color
color
color
node->allocated = 1;
node->allocated = 1
node->allocated
node
node
allocated
1
list_add(&node->node_list, &hole_node->node_list);
list_add(&node->node_list, &hole_node->node_list)
list_add
list_add
&node->node_list
node->node_list
node
node
node_list
&hole_node->node_list
hole_node->node_list
hole_node
hole_node
node_list
drm_mm_interval_tree_add_node(hole_node, node);
drm_mm_interval_tree_add_node(hole_node, node)
drm_mm_interval_tree_add_node
drm_mm_interval_tree_add_node
hole_node
hole_node
node
node
BUG_ON(node->start < start);
BUG_ON(node->start < start)
BUG_ON
BUG_ON
node->start < start
node->start
node
node
start
start
start
BUG_ON(node->start < adj_start);
BUG_ON(node->start < adj_start)
BUG_ON
BUG_ON
node->start < adj_start
node->start
node
node
start
adj_start
adj_start
BUG_ON(node->start + node->size > adj_end);
BUG_ON(node->start + node->size > adj_end)
BUG_ON
BUG_ON
node->start + node->size > adj_end
node->start + node->size
node->start
node
node
start
node->size
node
node
size
adj_end
adj_end
BUG_ON(node->start + node->size > end);
BUG_ON(node->start + node->size > end)
BUG_ON
BUG_ON
node->start + node->size > end
node->start + node->size
node->start
node
node
start
node->size
node
node
size
end
end
node->hole_follows = 0;
node->hole_follows = 0
node->hole_follows
node
node
hole_follows
0
if (__drm_mm_hole_node_start(node) < hole_end) {		list_add(&node->hole_stack, &mm->hole_stack);		rb_insert_hole_node(node, mm);		node->hole_follows = 1;	}
__drm_mm_hole_node_start(node) < hole_end
__drm_mm_hole_node_start(node)
__drm_mm_hole_node_start
__drm_mm_hole_node_start
node
node
hole_end
hole_end
{		list_add(&node->hole_stack, &mm->hole_stack);		rb_insert_hole_node(node, mm);		node->hole_follows = 1;	}
list_add(&node->hole_stack, &mm->hole_stack);
list_add(&node->hole_stack, &mm->hole_stack)
list_add
list_add
&node->hole_stack
node->hole_stack
node
node
hole_stack
&mm->hole_stack
mm->hole_stack
mm
mm
hole_stack
rb_insert_hole_node(node, mm);
rb_insert_hole_node(node, mm)
rb_insert_hole_node
rb_insert_hole_node
node
node
mm
mm
node->hole_follows = 1;
node->hole_follows = 1
node->hole_follows
node
node
hole_follows
1
-----joern-----
(215,93,0)
(88,153,0)
(204,66,0)
(40,5,0)
(173,178,0)
(23,127,0)
(175,205,0)
(144,127,0)
(134,127,0)
(156,5,0)
(7,100,0)
(163,207,0)
(20,64,0)
(171,5,0)
(151,110,0)
(126,5,0)
(167,82,0)
(114,146,0)
(185,5,0)
(201,144,0)
(143,195,0)
(197,66,0)
(185,214,0)
(55,154,0)
(214,201,0)
(44,127,0)
(89,118,0)
(64,130,0)
(149,146,0)
(14,39,0)
(177,99,0)
(118,83,0)
(40,107,0)
(56,74,0)
(82,129,0)
(70,127,0)
(53,178,0)
(9,109,0)
(107,60,0)
(8,23,0)
(214,185,0)
(213,112,0)
(177,20,0)
(205,175,0)
(10,40,0)
(62,166,0)
(99,86,0)
(66,208,0)
(177,110,0)
(189,59,0)
(154,23,0)
(95,129,0)
(68,183,0)
(46,54,0)
(207,180,0)
(46,5,0)
(26,145,0)
(158,191,0)
(31,54,0)
(39,14,0)
(161,54,0)
(111,79,0)
(81,177,0)
(130,167,0)
(50,147,0)
(117,5,0)
(6,54,0)
(73,60,0)
(118,110,0)
(140,53,0)
(177,83,0)
(124,109,0)
(54,20,0)
(145,52,0)
(181,5,0)
(2,127,0)
(105,127,0)
(30,70,0)
(115,127,0)
(206,126,0)
(166,5,0)
(166,214,0)
(203,185,0)
(137,146,0)
(14,127,0)
(212,121,0)
(68,5,0)
(54,127,0)
(45,33,0)
(2,32,0)
(112,32,0)
(187,48,0)
(208,66,0)
(184,65,0)
(66,183,0)
(167,72,0)
(108,183,0)
(192,102,0)
(6,180,0)
(54,83,0)
(25,208,0)
(181,54,0)
(78,175,0)
(102,65,0)
(80,39,0)
(138,189,0)
(195,52,0)
(105,136,0)
(147,127,0)
(154,5,0)
(125,128,0)
(100,147,0)
(180,171,0)
(15,166,0)
(54,110,0)
(31,5,0)
(159,185,0)
(170,83,0)
(97,147,0)
(191,5,0)
(94,61,0)
(148,21,0)
(61,53,0)
(67,112,0)
(90,189,0)
(39,142,0)
(96,3,0)
(214,166,0)
(86,165,0)
(79,129,0)
(199,107,0)
(98,127,0)
(166,54,0)
(73,100,0)
(169,68,0)
(61,165,0)
(26,183,0)
(207,163,0)
(123,26,0)
(176,82,0)
(46,118,0)
(131,127,0)
(29,76,0)
(35,117,0)
(49,46,0)
(22,127,0)
(58,127,0)
(132,20,0)
(121,5,0)
(194,195,0)
(78,134,0)
(31,39,0)
(48,183,0)
(64,20,0)
(156,79,0)
(190,99,0)
(126,65,0)
(68,127,0)
(37,64,0)
(172,177,0)
(65,101,0)
(182,201,0)
(51,205,0)
(74,5,0)
(30,5,0)
(191,158,0)
(101,183,0)
(121,78,0)
(93,65,0)
(179,48,0)
(148,202,0)
(119,6,0)
(150,108,0)
(174,74,0)
(180,6,0)
(92,156,0)
(11,121,0)
(73,183,0)
(12,46,0)
(101,65,0)
(91,154,0)
(201,130,0)
(27,153,0)
(210,31,0)
(146,65,0)
(107,127,0)
(118,89,0)
(180,207,0)
(117,93,0)
(77,127,0)
(34,145,0)
(86,99,0)
(113,171,0)
(208,25,0)
(83,127,0)
(128,59,0)
(82,127,0)
(32,2,0)
(201,214,0)
(141,73,0)
(47,191,0)
(130,127,0)
(175,78,0)
(108,129,0)
(185,105,0)
(155,82,0)
(69,68,0)
(6,5,0)
(148,149,0)
(84,181,0)
(18,178,0)
(100,73,0)
(103,61,0)
(38,105,0)
(202,148,0)
(41,26,0)
(153,83,0)
(83,153,0)
(33,5,0)
(134,78,0)
(106,167,0)
(65,127,0)
(171,180,0)
(209,118,0)
(133,101,0)
(116,70,0)
(78,121,0)
(112,183,0)
(187,127,0)
(53,83,0)
(0,30,0)
(13,33,0)
(160,181,0)
(53,20,0)
(2,158,0)
(87,127,0)
(28,17,0)
(193,73,0)
(86,17,0)
(188,6,0)
(79,156,0)
(118,20,0)
(85,127,0)
(135,178,0)
(195,65,0)
(118,46,0)
(109,105,0)
(39,31,0)
(54,99,0)
(110,20,0)
(171,105,0)
(99,20,0)
(19,102,0)
(25,52,0)
(129,127,0)
(168,64,0)
(186,53,0)
(147,187,0)
(157,128,0)
(167,130,0)
(74,202,0)
(122,207,0)
(57,86,0)
(153,142,0)
(207,72,0)
(36,130,0)
(110,83,0)
(149,148,0)
(43,82,0)
(164,171,0)
(211,110,0)
(3,21,0)
(75,167,0)
(163,127,0)
(152,187,0)
(99,83,0)
(17,178,0)
(17,61,0)
(71,30,0)
(93,127,0)
(158,2,0)
(73,43,0)
(195,183,0)
(139,40,0)
(200,191,0)
(104,101,0)
(64,136,0)
(109,5,0)
(202,74,0)
(126,21,0)
(1,86,0)
(32,112,0)
(33,3,0)
(48,187,0)
(118,99,0)
(153,147,0)
(144,201,0)
(120,43,0)
(196,126,0)
(61,17,0)
(43,73,0)
(89,127,0)
(162,117,0)
(110,17,0)
(129,108,0)
(16,127,0)
(198,205,0)
(146,149,0)
(42,31,0)
(177,187,0)
(205,183,0)
(156,92,1)
(197,204,1)
(78,121,1)
(118,20,1)
(111,156,1)
(151,128,1)
(62,89,1)
(198,82,1)
(118,46,1)
(208,66,1)
(104,184,1)
(181,5,1)
(90,138,1)
(17,61,1)
(108,183,1)
(45,13,1)
(24,189,1)
(150,95,1)
(1,190,1)
(61,53,1)
(201,182,1)
(82,155,1)
(78,175,1)
(74,5,1)
(149,146,1)
(66,197,1)
(143,194,1)
(101,183,1)
(215,117,1)
(201,214,1)
(15,62,1)
(121,212,1)
(160,177,1)
(133,104,1)
(68,183,1)
(46,54,1)
(56,79,1)
(200,47,1)
(53,186,1)
(134,78,1)
(189,59,1)
(172,24,1)
(27,170,1)
(33,45,1)
(205,183,1)
(152,65,1)
(75,106,1)
(148,149,1)
(137,202,1)
(40,5,1)
(140,24,1)
(92,23,1)
(132,189,1)
(209,46,1)
(172,4,1)
(117,35,1)
(100,7,1)
(211,151,1)
(110,211,1)
(191,200,1)
(50,129,1)
(157,4,1)
(64,136,1)
(126,65,1)
(128,125,1)
(25,208,1)
(117,5,1)
(101,133,1)
(11,175,1)
(122,180,1)
(177,187,1)
(2,32,1)
(47,70,1)
(164,113,1)
(3,96,1)
(41,177,1)
(89,118,1)
(109,5,1)
(88,27,1)
(40,10,1)
(121,5,1)
(180,171,1)
(74,174,1)
(71,0,1)
(31,5,1)
(186,140,1)
(206,196,1)
(148,202,1)
(54,161,1)
(159,166,1)
(195,183,1)
(99,86,1)
(13,126,1)
(177,99,1)
(6,5,1)
(24,20,1)
(154,55,1)
(112,213,1)
(162,105,1)
(49,12,1)
(48,179,1)
(177,20,1)
(46,49,1)
(214,185,1)
(0,107,1)
(79,111,1)
(43,82,1)
(31,42,1)
(109,124,1)
(68,169,1)
(106,36,1)
(199,40,1)
(54,83,1)
(182,214,1)
(166,54,1)
(37,168,1)
(93,215,1)
(61,165,1)
(81,172,1)
(113,6,1)
(39,31,1)
(126,5,1)
(141,102,1)
(34,26,1)
(30,71,1)
(176,147,1)
(129,108,1)
(63,3,1)
(42,210,1)
(105,136,1)
(94,103,1)
(175,205,1)
(147,187,1)
(30,5,1)
(65,101,1)
(158,191,1)
(51,198,1)
(54,20,1)
(53,20,1)
(204,145,1)
(53,83,1)
(7,193,1)
(155,176,1)
(163,207,1)
(146,65,1)
(19,192,1)
(35,162,1)
(168,132,1)
(67,158,1)
(57,1,1)
(68,5,1)
(167,72,1)
(170,102,1)
(139,93,1)
(55,91,1)
(107,60,1)
(103,28,1)
(39,142,1)
(203,159,1)
(114,137,1)
(144,201,1)
(118,99,1)
(196,148,1)
(195,65,1)
(130,167,1)
(167,75,1)
(185,5,1)
(172,110,1)
(190,128,1)
(185,203,1)
(166,5,1)
(8,154,1)
(95,187,1)
(64,130,1)
(91,163,1)
(39,80,1)
(80,31,1)
(36,83,1)
(177,81,1)
(83,153,1)
(64,37,1)
(156,5,1)
(23,8,1)
(195,143,1)
(177,83,1)
(154,5,1)
(174,56,1)
(79,129,1)
(188,144,1)
(126,206,1)
(2,158,1)
(43,120,1)
(120,100,1)
(207,72,1)
(6,54,1)
(207,122,1)
(84,160,1)
(93,65,1)
(138,130,1)
(166,15,1)
(118,110,1)
(189,90,1)
(86,17,1)
(79,156,1)
(187,48,1)
(118,83,1)
(171,164,1)
(14,39,1)
(73,100,1)
(86,57,1)
(207,180,1)
(70,116,1)
(193,141,1)
(185,105,1)
(161,181,1)
(99,20,1)
(170,73,1)
(48,183,1)
(201,130,1)
(32,112,1)
(99,83,1)
(116,30,1)
(73,183,1)
(73,43,1)
(107,199,1)
(12,14,1)
(4,17,1)
(153,147,1)
(212,11,1)
(192,134,1)
(105,38,1)
(82,129,1)
(54,110,1)
(10,139,1)
(54,99,1)
(179,152,1)
(181,84,1)
(177,110,1)
(194,25,1)
(102,65,1)
(128,59,1)
(123,41,1)
(69,2,1)
(61,94,1)
(6,119,1)
(63,79,1)
(66,183,1)
(147,97,1)
(38,109,1)
(125,157,1)
(26,123,1)
(97,50,1)
(9,54,1)
(124,9,1)
(86,165,1)
(146,114,1)
(153,142,1)
(28,53,1)
(171,5,1)
(172,99,1)
(110,20,1)
(153,88,1)
(119,188,1)
(214,166,1)
(33,5,1)
(118,209,1)
(31,54,1)
(210,68,1)
(20,64,1)
(102,19,1)
(96,33,1)
(46,5,1)
(191,5,1)
(73,60,1)
(171,105,1)
(110,83,1)
(112,183,1)
(26,183,1)
(100,147,1)
(205,51,1)
(167,82,1)
(110,17,1)
(169,69,1)
(145,34,1)
(213,67,1)
(108,150,1)
(180,6,1)
(202,74,1)
(160,195,1)
(153,142,2)
(143,177,2)
(39,31,2)
(73,60,2)
(204,177,2)
(100,147,2)
(118,83,2)
(118,20,2)
(31,5,2)
(181,5,2)
(141,102,2)
(4,24,2)
(166,54,2)
(180,171,2)
(54,110,2)
(167,72,2)
(53,83,2)
(190,128,2)
(110,20,2)
(171,105,2)
(73,43,2)
(33,79,2)
(43,102,2)
(177,20,2)
(177,187,2)
(43,82,2)
(121,175,2)
(74,79,2)
(137,79,2)
(148,202,2)
(130,167,2)
(144,201,2)
(93,65,2)
(146,79,2)
(195,177,2)
(148,149,2)
(73,100,2)
(25,177,2)
(126,79,2)
(185,5,2)
(99,83,2)
(175,205,2)
(64,189,2)
(54,20,2)
(68,183,2)
(34,177,2)
(112,183,2)
(191,5,2)
(166,5,2)
(149,79,2)
(171,5,2)
(194,177,2)
(177,99,2)
(13,79,2)
(202,79,2)
(208,177,2)
(46,54,2)
(110,83,2)
(61,165,2)
(96,79,2)
(6,54,2)
(121,5,2)
(214,166,2)
(7,102,2)
(28,24,2)
(45,79,2)
(129,108,2)
(201,214,2)
(214,185,2)
(180,6,2)
(101,183,2)
(79,156,2)
(118,46,2)
(2,158,2)
(177,83,2)
(31,54,2)
(195,65,2)
(78,175,2)
(168,189,2)
(83,153,2)
(128,4,2)
(145,177,2)
(154,5,2)
(114,79,2)
(212,175,2)
(86,17,2)
(39,142,2)
(3,79,2)
(132,189,2)
(134,78,2)
(66,177,2)
(201,130,2)
(140,24,2)
(110,17,2)
(103,24,2)
(193,102,2)
(1,128,2)
(208,66,2)
(26,177,2)
(196,79,2)
(73,102,2)
(17,61,2)
(14,39,2)
(163,207,2)
(186,24,2)
(126,65,2)
(86,165,2)
(146,65,2)
(117,5,2)
(109,5,2)
(53,20,2)
(56,79,2)
(61,53,2)
(82,129,2)
(100,102,2)
(20,64,2)
(207,180,2)
(185,105,2)
(2,32,2)
(73,183,2)
(126,5,2)
(66,183,2)
(153,147,2)
(79,129,2)
(167,82,2)
(48,183,2)
(118,99,2)
(20,189,2)
(128,59,2)
(205,183,2)
(64,130,2)
(40,5,2)
(123,177,2)
(57,128,2)
(157,4,2)
(32,112,2)
(187,48,2)
(195,183,2)
(202,74,2)
(118,110,2)
(211,128,2)
(189,59,2)
(46,5,2)
(174,79,2)
(53,24,2)
(54,99,2)
(149,146,2)
(120,102,2)
(64,136,2)
(33,5,2)
(177,110,2)
(54,83,2)
(86,128,2)
(37,189,2)
(156,5,2)
(105,136,2)
(17,24,2)
(99,86,2)
(197,177,2)
(78,121,2)
(125,4,2)
(30,5,2)
(110,128,2)
(107,60,2)
(158,191,2)
(151,128,2)
(41,177,2)
(89,118,2)
(102,65,2)
(61,24,2)
(108,183,2)
(94,24,2)
(11,175,2)
(6,5,2)
(65,101,2)
(207,72,2)
(25,208,2)
(99,128,2)
(99,20,2)
(147,187,2)
(148,79,2)
(26,183,2)
(206,79,2)
(74,5,2)
(68,5,2)
-----------------------------------
(0,node)
(1,alignment)
(2,list_add(&node->node_list, &hole_node->node_list)
(3,node->hole_follows = 1)
(4,rem)
(5,struct drm_mm_node *node)
(6,node->start)
(7,adj_start)
(8,0)
(9,node)
(10,color)
(11,node)
(12,node)
(13,node)
(14,BUG_ON(node->start < start)
(15,start)
(16,if (adj_start == hole_start)
(17,rem = do_div(tmp, alignment)
(18,if (rem)
(19,color_adjust)
(20,adj_start = adj_end - size)
(21,)
(22,hole_start)
(23,node->hole_follows = 0)
(24,alignment)
(25,list_del(&hole_node->hole_stack)
(26,hole_node->hole_follows)
(27,adj_start)
(28,rem)
(29,if (flags & DRM_MM_CREATE_TOP)
(30,node->allocated)
(31,node->start)
(32,&hole_node->node_list)
(33,node->hole_follows)
(34,0)
(35,mm)
(36,adj_end)
(37,size)
(38,size)
(39,node->start < start)
(40,node->color)
(41,hole_node)
(42,start)
(43,&adj_end)
(44,adj_start)
(45,hole_follows)
(46,node->start)
(47,node)
(48,drm_mm_hole_node_start(hole_node)
(49,start)
(50,adj_start)
(51,hole_follows)
(52,)
(53,tmp = adj_start)
(54,node->start = adj_start)
(55,hole_follows)
(56,node)
(57,rem)
(58,if (alignment)
(59,enum drm_mm_allocator_flags flags)
(60,unsigned long color)
(61,do_div(tmp, alignment)
(62,node)
(63,RET)
(64,adj_end - size)
(65,*mm = hole_node->mm)
(66,hole_node->hole_stack)
(67,hole_node)
(68,drm_mm_interval_tree_add_node(hole_node, node)
(69,hole_node)
(70,node->allocated = 1)
(71,allocated)
(72,u64 end)
(73,mm->color_adjust(hole_node, color, &adj_start, &adj_end)
(74,node->hole_stack)
(75,end)
(76,)
(77,if (__drm_mm_hole_node_start(node)
(78,!hole_node->hole_follows || node->allocated)
(79,__drm_mm_hole_node_start(node)
(80,start)
(81,hole_start)
(82,adj_end = hole_end)
(83,adj_start = max(adj_start, start)
(84,start)
(85,if (flags & DRM_MM_CREATE_TOP)
(86,alignment - rem)
(87,mm)
(88,start)
(89,BUG_ON(node->start < adj_start)
(90,DRM_MM_CREATE_TOP)
(91,node)
(92,node)
(93,node->mm = mm)
(94,alignment)
(95,hole_end)
(96,1)
(97,hole_start)
(98,if (mm->color_adjust)
(99,adj_start += alignment - rem)
(100,&adj_start)
(101,hole_node->mm)
(102,mm->color_adjust)
(103,tmp)
(104,hole_node)
(105,node->size = size)
(106,adj_end)
(107,node->color = color)
(108,drm_mm_hole_node_end(hole_node)
(109,node->size)
(110,adj_start -= rem)
(111,hole_end)
(112,hole_node->node_list)
(113,node)
(114,hole_stack)
(115,adj_end)
(116,1)
(117,node->mm)
(118,node->start < adj_start)
(119,start)
(120,adj_end)
(121,node->allocated)
(122,end)
(123,hole_follows)
(124,size)
(125,DRM_MM_CREATE_TOP)
(126,rb_insert_hole_node(node, mm)
(127,)
(128,flags & DRM_MM_CREATE_TOP)
(129,hole_end = drm_mm_hole_node_end(hole_node)
(130,adj_end = min(adj_end, end)
(131,hole_end)
(132,adj_start)
(133,mm)
(134,BUG_ON(!hole_node->hole_follows || node->allocated)
(135,tmp)
(136,u64 size)
(137,mm)
(138,flags)
(139,node)
(140,tmp)
(141,hole_node)
(142,u64 start)
(143,mm)
(144,BUG_ON(node->start + node->size > adj_end)
(145,hole_node->hole_follows = 0)
(146,mm->hole_stack)
(147,adj_start = hole_start)
(148,list_add(&node->hole_stack, &mm->hole_stack)
(149,&mm->hole_stack)
(150,hole_node)
(151,adj_start)
(152,hole_start)
(153,max(adj_start, start)
(154,node->hole_follows)
(155,hole_end)
(156,__drm_mm_hole_node_start(node)
(157,flags)
(158,&node->node_list)
(159,node)
(160,node)
(161,adj_start)
(162,node)
(163,BUG_ON(node->start + node->size > end)
(164,size)
(165,unsigned alignment)
(166,node->start)
(167,min(adj_end, end)
(168,adj_end)
(169,node)
(170,adj_start)
(171,node->size)
(172,adj_start)
(173,rem)
(174,hole_stack)
(175,!hole_node->hole_follows)
(176,adj_end)
(177,adj_start == hole_start)
(178,)
(179,hole_node)
(180,node->start + node->size)
(181,node->start)
(182,adj_end)
(183,struct drm_mm_node *hole_node)
(184,mm)
(185,node->size)
(186,adj_start)
(187,hole_start = drm_mm_hole_node_start(hole_node)
(188,node)
(189,flags & DRM_MM_CREATE_TOP)
(190,adj_start)
(191,node->node_list)
(192,mm)
(193,color)
(194,hole_node)
(195,rb_erase_hole_node(hole_node, mm)
(196,node)
(197,hole_stack)
(198,hole_node)
(199,color)
(200,node_list)
(201,node->start + node->size > adj_end)
(202,&node->hole_stack)
(203,size)
(204,hole_node)
(205,hole_node->hole_follows)
(206,mm)
(207,node->start + node->size > end)
(208,&hole_node->hole_stack)
(209,adj_start)
(210,node)
(211,rem)
(212,allocated)
(213,node_list)
(214,node->start + node->size)
(215,mm)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^