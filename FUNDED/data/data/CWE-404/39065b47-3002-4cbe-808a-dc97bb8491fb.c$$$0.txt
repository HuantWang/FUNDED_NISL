-----label-----
0
-----code-----
static void goodB2G()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Open a file without closing it */
    data = fopen("BadSource_fopen.txt", "w+");
    while(1)
    {
        /* FIX: If the file is still opened, close it */
        if (data != NULL)
        {
            fclose(data);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
30,31
30,32
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,29,34,36,41,43,44
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
-----guardedBy-----
34,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Open a file without closing it */    data = fopen("BadSource_fopen.txt", "w+");    while(1)    {        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }        break;    }}
static void
goodB2G()
goodB2G
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Open a file without closing it */    data = fopen("BadSource_fopen.txt", "w+");    while(1)    {        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }        break;    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
while(1)    {        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }        break;    }
1
{        /* FIX: If the file is still opened, close it */        if (data != NULL)        {            fclose(data);        }        break;    }
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
break;
-----joern-----
(1,9,0)
(2,3,0)
(8,11,0)
(19,6,0)
(7,9,0)
(5,7,0)
(16,6,0)
(15,11,0)
(14,21,0)
(4,7,0)
(10,3,0)
(12,14,0)
(3,1,0)
(14,1,0)
(18,1,0)
(6,1,0)
(1,6,0)
(0,9,0)
(20,9,0)
(1,6,1)
(8,3,1)
(18,7,1)
(7,4,1)
(17,8,1)
(17,13,1)
(14,12,1)
(4,5,1)
(13,1,1)
(2,10,1)
(10,13,1)
(3,2,1)
(14,1,1)
(16,19,1)
(19,18,1)
(3,1,1)
(6,16,1)
(12,3,1)
(8,14,1)
(2,13,2)
(14,1,2)
(14,3,2)
(12,3,2)
(8,13,2)
(10,13,2)
(3,13,2)
(3,1,2)
(1,6,2)
-----------------------------------
(0,while(1)
(1,data = fopen("BadSource_fopen.txt", "w+")
(2,NULL)
(3,data != NULL)
(4,NULL)
(5,data)
(6,fopen("BadSource_fopen.txt", "w+")
(7,data = NULL)
(8,break;)
(9,)
(10,data)
(11,)
(12,data)
(13,1)
(14,fclose(data)
(15,if (data != NULL)
(16,"w+")
(17,RET)
(18,data)
(19,"BadSource_fopen.txt")
(20,data)
(21,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^