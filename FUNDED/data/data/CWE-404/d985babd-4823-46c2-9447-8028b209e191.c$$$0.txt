-----label-----
0
-----code-----
static int sha1_ce_finup(struct shash_desc *desc, const u8 *data,
			 unsigned int len, u8 *out)
{
	struct sha1_ce_state *sctx = shash_desc_ctx(desc);
	bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE);

	/*
	 * Allow the asm code to perform the finalization if there is no
	 * partial data and the input is a round multiple of the block size.
	 */
	sctx->finalize = finalize;

	kernel_neon_begin_partial(16);
	sha1_base_do_update(desc, data, len,
			    (sha1_block_fn *)sha1_ce_transform);
	if (!finalize)
		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);
	kernel_neon_end();
	return sha1_base_finish(desc, out);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
49,50
49,51
50,51
50,52
51,52
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
71,73
72,73
75,76
76,77
76,78
76,79
76,80
76,81
77,78
79,80
81,82
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
93,94
93,95
94,95
95,96
97,98
98,99
98,100
98,101
99,100
101,102
103,104
103,105
104,105
104,106
105,106
107,108
109,110
111,112
112,113
113,114
115,116
116,117
116,118
116,119
117,118
119,120
121,122
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,23,25,26,31,33,34,38,40,43,45,52,53,54,59,61,66,67,69,73,74,78,80,82,84,88,90,92,96,100,102,106,108,110,114,118,120,122
-----computeFrom-----
47,48
47,49
57,58
57,59
63,64
63,65
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int sha1_ce_finup(struct shash_desc *desc, const u8 *data,			 unsigned int len, u8 *out){	struct sha1_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE);	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(16);	sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform);	if (!finalize)		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);	kernel_neon_end();	return sha1_base_finish(desc, out);}
static int
sha1_ce_finup(struct shash_desc *desc, const u8 *data,			 unsigned int len, u8 *out)
sha1_ce_finup
struct shash_desc *desc
struct shash_desc
shash_desc
*desc
*
desc
const u8 *data
const u8
u8
*data
*
data
unsigned int len
unsigned int
len
len
u8 *out
u8
u8
*out
*
out
{	struct sha1_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE);	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(16);	sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform);	if (!finalize)		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);	kernel_neon_end();	return sha1_base_finish(desc, out);}
struct sha1_ce_state *sctx = shash_desc_ctx(desc);
struct sha1_ce_state *sctx = shash_desc_ctx(desc);
struct sha1_ce_state
sha1_ce_state
*sctx = shash_desc_ctx(desc)
*
sctx
= shash_desc_ctx(desc)
shash_desc_ctx(desc)
shash_desc_ctx
shash_desc_ctx
desc
desc
bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE);
bool finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE);
bool
finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
finalize
= !sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
!sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
!sctx->sst.count
sctx->sst.count
sctx->sst
sctx
sctx
sst
count
!(len % SHA1_BLOCK_SIZE)
(len % SHA1_BLOCK_SIZE)
len % SHA1_BLOCK_SIZE
len
len
SHA1_BLOCK_SIZE
SHA1_BLOCK_SIZE
sctx->finalize = finalize;
sctx->finalize = finalize
sctx->finalize
sctx
sctx
finalize
finalize
finalize
kernel_neon_begin_partial(16);
kernel_neon_begin_partial(16)
kernel_neon_begin_partial
kernel_neon_begin_partial
16
sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform);
sha1_base_do_update(desc, data, len,			    (sha1_block_fn *)sha1_ce_transform)
sha1_base_do_update
sha1_base_do_update
desc
desc
data
data
len
len
(sha1_block_fn *)sha1_ce_transform
sha1_block_fn *
sha1_block_fn
sha1_block_fn
*
*
sha1_ce_transform
sha1_ce_transform
if (!finalize)		sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);
!finalize
finalize
finalize
sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform);
sha1_base_do_finalize(desc, (sha1_block_fn *)sha1_ce_transform)
sha1_base_do_finalize
sha1_base_do_finalize
desc
desc
(sha1_block_fn *)sha1_ce_transform
sha1_block_fn *
sha1_block_fn
sha1_block_fn
*
*
sha1_ce_transform
sha1_ce_transform
kernel_neon_end();
kernel_neon_end()
kernel_neon_end
kernel_neon_end
return sha1_base_finish(desc, out);
sha1_base_finish(desc, out)
sha1_base_finish
sha1_base_finish
desc
desc
out
out
-----joern-----
(5,49,0)
(16,31,0)
(31,51,0)
(11,10,0)
(47,22,0)
(21,16,0)
(14,22,0)
(27,22,0)
(50,27,0)
(19,13,0)
(41,3,0)
(41,22,0)
(29,39,0)
(39,41,0)
(4,41,0)
(49,24,0)
(18,40,0)
(45,16,0)
(40,0,0)
(13,22,0)
(38,3,0)
(32,40,0)
(17,43,0)
(10,11,0)
(46,31,0)
(40,27,0)
(31,26,0)
(35,31,0)
(11,51,0)
(23,22,0)
(31,16,0)
(16,21,0)
(9,22,0)
(8,27,0)
(7,39,0)
(48,11,0)
(5,33,0)
(12,0,0)
(42,31,0)
(36,0,0)
(28,38,0)
(3,22,0)
(6,22,0)
(34,10,0)
(30,49,0)
(39,27,0)
(9,39,0)
(12,33,0)
(43,51,0)
(33,3,0)
(33,5,0)
(3,33,0)
(0,12,0)
(44,3,0)
(37,9,0)
(43,25,0)
(31,22,0)
(0,40,0)
(33,12,0)
(20,43,0)
(2,50,0)
(10,34,0)
(50,51,0)
(31,24,0)
(1,10,0)
(27,50,0)
(43,9,0)
(15,49,0)
(49,5,0)
(12,0,1)
(44,27,1)
(43,25,1)
(37,9,1)
(11,10,1)
(45,42,1)
(43,51,1)
(20,17,1)
(10,34,1)
(10,1,1)
(0,40,1)
(16,45,1)
(50,2,1)
(39,27,1)
(7,29,1)
(5,49,1)
(33,5,1)
(49,30,1)
(11,51,1)
(17,47,1)
(29,3,1)
(47,11,1)
(40,27,1)
(48,38,1)
(13,19,1)
(43,20,1)
(1,48,1)
(31,26,1)
(2,8,1)
(40,18,1)
(46,13,1)
(31,51,1)
(35,46,1)
(30,15,1)
(31,16,1)
(28,31,1)
(18,32,1)
(16,21,1)
(38,3,1)
(38,28,1)
(41,3,1)
(15,12,1)
(41,4,1)
(27,50,1)
(0,36,1)
(31,24,1)
(42,35,1)
(33,12,1)
(32,44,1)
(19,41,1)
(50,51,1)
(3,33,1)
(39,7,1)
(9,43,1)
(9,39,1)
(49,24,1)
(47,38,1)
(36,40,1)
(4,39,1)
(49,24,2)
(43,51,2)
(11,51,2)
(9,39,2)
(33,5,2)
(50,51,2)
(31,24,2)
(31,26,2)
(3,33,2)
(16,21,2)
(43,25,2)
(27,50,2)
(12,0,2)
(10,38,2)
(41,3,2)
(48,38,2)
(5,49,2)
(39,27,2)
(10,34,2)
(15,12,2)
(11,10,2)
(38,3,2)
(11,38,2)
(49,12,2)
(40,27,2)
(5,12,2)
(31,51,2)
(31,16,2)
(33,12,2)
(0,40,2)
(30,12,2)
(1,38,2)
(37,9,2)
-----------------------------------
(0,sctx->sst.count)
(1,sha1_ce_transform)
(2,desc)
(3,finalize = !sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
(4,finalize)
(5,!(len % SHA1_BLOCK_SIZE)
(6,finalize)
(7,finalize)
(8,sctx)
(9,return sha1_base_finish(desc, out)
(10,(sha1_block_fn *)
(11,sha1_base_do_finalize(desc, (sha1_block_fn *)
(12,!sctx->sst.count)
(13,kernel_neon_begin_partial(16)
(14,sctx)
(15,len)
(16,(sha1_block_fn *)
(17,desc)
(18,sst)
(19,16)
(20,out)
(21,sha1_block_fn *)
(22,)
(23,if (!finalize)
(24,unsigned int len)
(25,u8 *out)
(26,const u8 *data)
(27,*sctx = shash_desc_ctx(desc)
(28,finalize)
(29,sctx)
(30,SHA1_BLOCK_SIZE)
(31,sha1_base_do_update(desc, data, len,\n\\n\\t\\t\\t    (sha1_block_fn *)
(32,sctx)
(33,!sctx->sst.count && !(len % SHA1_BLOCK_SIZE)
(34,sha1_block_fn *)
(35,data)
(36,count)
(37,RET)
(38,!finalize)
(39,sctx->finalize)
(40,sctx->sst)
(41,sctx->finalize = finalize)
(42,len)
(43,sha1_base_finish(desc, out)
(44,finalize)
(45,sha1_ce_transform)
(46,desc)
(47,kernel_neon_end()
(48,desc)
(49,len % SHA1_BLOCK_SIZE)
(50,shash_desc_ctx(desc)
(51,struct shash_desc *desc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^