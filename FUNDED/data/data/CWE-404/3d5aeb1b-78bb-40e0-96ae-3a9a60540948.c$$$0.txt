-----label-----
1
-----code-----
int be_update_queues(struct be_adapter *adapter)
{
	struct net_device *netdev = adapter->netdev;
	int status;

	if (netif_running(netdev)) {
		/* device cannot transmit now, avoid dev_watchdog timeouts */
		netif_carrier_off(netdev);

		be_close(netdev);
	}

	be_cancel_worker(adapter);

	/* If any vectors have been shared with RoCE we cannot re-program
	 * the MSIx table.
	 */
	if (!adapter->num_msix_roce_vec)
		be_msix_disable(adapter);

	be_clear_queues(adapter);
	status = be_cmd_if_destroy(adapter, adapter->if_handle,  0);
	if (status)
		return status;

	if (!msix_enabled(adapter)) {
		status = be_msix_enable(adapter);
		if (status)
			return status;
	}

	status = be_if_create(adapter);
	if (status)
		return status;

	status = be_setup_queues(adapter);
	if (status)
		return status;

	be_schedule_worker(adapter);

	/*
	 * The IF was destroyed and re-created. We need to clear
	 * all promiscuous flags valid for the destroyed IF.
	 * Without this promisc mode is not restored during
	 * be_open() because the driver thinks that it is
	 * already enabled in HW.
	 */
	adapter->if_flags &= ~BE_IF_FLAGS_ALL_PROMISCUOUS;

	if (netif_running(netdev))
		status = be_open(netdev);

	return status;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
76,78
76,79
76,80
77,78
79,80
81,82
81,83
82,83
86,87
86,88
87,88
89,90
90,91
92,93
92,94
93,94
94,95
94,96
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
104,106
105,106
107,108
109,110
109,111
110,111
112,113
113,114
115,116
116,117
116,118
117,118
119,120
119,121
120,121
122,123
124,125
124,126
125,126
127,128
128,129
130,131
131,132
131,133
132,133
134,135
134,136
135,136
137,138
139,140
139,141
140,141
142,143
143,144
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
153,154
153,155
154,155
157,158
158,159
160,161
160,162
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
170,171
170,172
171,172
173,174
175,176
176,177
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,26,28,32,34,39,41,45,47,51,53,58,59,63,65,69,71,75,78,80,83,84,85,88,91,96,98,103,106,108,111,114,118,121,123,126,129,133,136,138,141,144,148,150,155,156,159,163,165,169,172,174,177
-----computeFrom-----
73,74
73,75
101,102
101,103
116,117
116,118
131,132
131,133
152,153
152,154
167,168
167,169
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int be_update_queues(struct be_adapter *adapter){	struct net_device *netdev = adapter->netdev;	int status;	if (netif_running(netdev)) {		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}	be_cancel_worker(adapter);	/* If any vectors have been shared with RoCE we cannot re-program	 * the MSIx table.	 */	if (!adapter->num_msix_roce_vec)		be_msix_disable(adapter);	be_clear_queues(adapter);	status = be_cmd_if_destroy(adapter, adapter->if_handle,  0);	if (status)		return status;	if (!msix_enabled(adapter)) {		status = be_msix_enable(adapter);		if (status)			return status;	}	status = be_if_create(adapter);	if (status)		return status;	status = be_setup_queues(adapter);	if (status)		return status;	be_schedule_worker(adapter);	/*	 * The IF was destroyed and re-created. We need to clear	 * all promiscuous flags valid for the destroyed IF.	 * Without this promisc mode is not restored during	 * be_open() because the driver thinks that it is	 * already enabled in HW.	 */	adapter->if_flags &= ~BE_IF_FLAGS_ALL_PROMISCUOUS;	if (netif_running(netdev))		status = be_open(netdev);	return status;}
int
be_update_queues(struct be_adapter *adapter)
be_update_queues
struct be_adapter *adapter
struct be_adapter
be_adapter
*adapter
*
adapter
{	struct net_device *netdev = adapter->netdev;	int status;	if (netif_running(netdev)) {		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}	be_cancel_worker(adapter);	/* If any vectors have been shared with RoCE we cannot re-program	 * the MSIx table.	 */	if (!adapter->num_msix_roce_vec)		be_msix_disable(adapter);	be_clear_queues(adapter);	status = be_cmd_if_destroy(adapter, adapter->if_handle,  0);	if (status)		return status;	if (!msix_enabled(adapter)) {		status = be_msix_enable(adapter);		if (status)			return status;	}	status = be_if_create(adapter);	if (status)		return status;	status = be_setup_queues(adapter);	if (status)		return status;	be_schedule_worker(adapter);	/*	 * The IF was destroyed and re-created. We need to clear	 * all promiscuous flags valid for the destroyed IF.	 * Without this promisc mode is not restored during	 * be_open() because the driver thinks that it is	 * already enabled in HW.	 */	adapter->if_flags &= ~BE_IF_FLAGS_ALL_PROMISCUOUS;	if (netif_running(netdev))		status = be_open(netdev);	return status;}
struct net_device *netdev = adapter->netdev;
struct net_device *netdev = adapter->netdev;
struct net_device
net_device
*netdev = adapter->netdev
*
netdev
= adapter->netdev
adapter->netdev
adapter
adapter
netdev
int status;
int status;
int
status
status
if (netif_running(netdev)) {		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}
netif_running(netdev)
netif_running
netif_running
netdev
netdev
{		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}
netif_carrier_off(netdev);
netif_carrier_off(netdev)
netif_carrier_off
netif_carrier_off
netdev
netdev
be_close(netdev);
be_close(netdev)
be_close
be_close
netdev
netdev
be_cancel_worker(adapter);
be_cancel_worker(adapter)
be_cancel_worker
be_cancel_worker
adapter
adapter
if (!adapter->num_msix_roce_vec)		be_msix_disable(adapter);
!adapter->num_msix_roce_vec
adapter->num_msix_roce_vec
adapter
adapter
num_msix_roce_vec
be_msix_disable(adapter);
be_msix_disable(adapter)
be_msix_disable
be_msix_disable
adapter
adapter
be_clear_queues(adapter);
be_clear_queues(adapter)
be_clear_queues
be_clear_queues
adapter
adapter
status = be_cmd_if_destroy(adapter, adapter->if_handle,  0);
status = be_cmd_if_destroy(adapter, adapter->if_handle,  0)
status
status
be_cmd_if_destroy(adapter, adapter->if_handle,  0)
be_cmd_if_destroy
be_cmd_if_destroy
adapter
adapter
adapter->if_handle
adapter
adapter
if_handle
0
if (status)		return status;
status
status
return status;
status
status
if (!msix_enabled(adapter)) {		status = be_msix_enable(adapter);		if (status)			return status;	}
!msix_enabled(adapter)
msix_enabled(adapter)
msix_enabled
msix_enabled
adapter
adapter
{		status = be_msix_enable(adapter);		if (status)			return status;	}
status = be_msix_enable(adapter);
status = be_msix_enable(adapter)
status
status
be_msix_enable(adapter)
be_msix_enable
be_msix_enable
adapter
adapter
if (status)			return status;
status
status
return status;
status
status
status = be_if_create(adapter);
status = be_if_create(adapter)
status
status
be_if_create(adapter)
be_if_create
be_if_create
adapter
adapter
if (status)		return status;
status
status
return status;
status
status
status = be_setup_queues(adapter);
status = be_setup_queues(adapter)
status
status
be_setup_queues(adapter)
be_setup_queues
be_setup_queues
adapter
adapter
if (status)		return status;
status
status
return status;
status
status
be_schedule_worker(adapter);
be_schedule_worker(adapter)
be_schedule_worker
be_schedule_worker
adapter
adapter
adapter->if_flags &= ~BE_IF_FLAGS_ALL_PROMISCUOUS;
adapter->if_flags &= ~BE_IF_FLAGS_ALL_PROMISCUOUS
adapter->if_flags
adapter
adapter
if_flags
~BE_IF_FLAGS_ALL_PROMISCUOUS
BE_IF_FLAGS_ALL_PROMISCUOUS
BE_IF_FLAGS_ALL_PROMISCUOUS
if (netif_running(netdev))		status = be_open(netdev);
netif_running(netdev)
netif_running
netif_running
netdev
netdev
status = be_open(netdev);
status = be_open(netdev)
status
status
be_open(netdev)
be_open
be_open
netdev
netdev
return status;
status
status
-----joern-----
(55,36,0)
(48,45,0)
(52,46,0)
(7,81,0)
(56,47,0)
(82,31,0)
(5,59,0)
(76,59,0)
(46,52,0)
(10,52,0)
(29,8,0)
(66,67,0)
(45,43,0)
(21,39,0)
(71,84,0)
(62,19,0)
(26,39,0)
(19,8,0)
(79,29,0)
(68,83,0)
(60,8,0)
(46,8,0)
(62,59,0)
(53,63,0)
(13,8,0)
(55,69,0)
(56,67,0)
(85,46,0)
(33,36,0)
(57,31,0)
(69,39,0)
(2,62,0)
(39,17,0)
(40,59,0)
(4,17,0)
(81,7,0)
(32,11,0)
(13,59,0)
(11,8,0)
(55,48,0)
(11,50,0)
(55,83,0)
(6,59,0)
(31,47,0)
(34,52,0)
(51,14,0)
(18,19,0)
(52,84,0)
(73,37,0)
(15,49,0)
(48,59,0)
(27,56,0)
(21,8,0)
(61,59,0)
(14,60,0)
(7,8,0)
(14,59,0)
(9,8,0)
(38,8,0)
(38,59,0)
(30,47,0)
(77,21,0)
(22,19,0)
(70,38,0)
(78,69,0)
(37,47,0)
(84,52,0)
(28,81,0)
(81,59,0)
(54,3,0)
(19,62,0)
(35,43,0)
(43,45,0)
(49,8,0)
(63,14,0)
(66,47,0)
(47,31,0)
(44,13,0)
(43,47,0)
(31,8,0)
(58,9,0)
(55,63,0)
(75,59,0)
(64,46,0)
(60,14,0)
(20,59,0)
(36,84,0)
(80,59,0)
(16,60,0)
(72,11,0)
(47,59,0)
(1,7,0)
(9,58,0)
(48,81,0)
(41,45,0)
(52,8,0)
(12,48,0)
(39,21,0)
(49,59,0)
(3,47,0)
(84,59,0)
(0,66,0)
(24,9,0)
(83,81,0)
(50,11,0)
(42,59,0)
(11,32,1)
(7,1,1)
(69,78,1)
(51,58,1)
(15,29,1)
(84,52,1)
(7,8,1)
(72,38,1)
(43,35,1)
(81,7,1)
(48,12,1)
(79,50,1)
(44,23,1)
(62,2,1)
(78,65,1)
(51,65,1)
(56,27,1)
(83,68,1)
(25,84,1)
(35,41,1)
(63,53,1)
(54,47,1)
(66,0,1)
(24,25,1)
(18,22,1)
(49,8,1)
(63,14,1)
(74,14,1)
(39,21,1)
(2,19,1)
(37,47,1)
(26,58,1)
(73,62,1)
(62,19,1)
(38,70,1)
(22,13,1)
(36,33,1)
(85,34,1)
(65,39,1)
(3,47,1)
(50,11,1)
(70,3,1)
(37,73,1)
(43,47,1)
(47,31,1)
(69,39,1)
(12,37,1)
(14,60,1)
(48,45,1)
(55,69,1)
(32,72,1)
(55,48,1)
(1,28,1)
(19,18,1)
(52,8,1)
(71,49,1)
(55,63,1)
(68,23,1)
(21,77,1)
(9,24,1)
(27,66,1)
(33,25,1)
(70,56,1)
(36,84,1)
(52,46,1)
(82,30,1)
(49,15,1)
(53,74,1)
(41,37,1)
(60,16,1)
(12,45,1)
(55,83,1)
(23,81,1)
(31,57,1)
(28,74,1)
(56,47,1)
(29,79,1)
(10,46,1)
(46,8,1)
(66,47,1)
(77,26,1)
(52,10,1)
(29,8,1)
(19,8,1)
(13,8,1)
(34,71,1)
(9,8,1)
(48,81,1)
(13,44,1)
(31,8,1)
(16,51,1)
(0,3,1)
(64,85,1)
(3,54,1)
(60,8,1)
(46,64,1)
(21,8,1)
(83,81,1)
(57,82,1)
(55,36,1)
(15,50,1)
(45,43,1)
(38,8,1)
(58,9,1)
(11,8,1)
(78,65,2)
(36,25,2)
(48,81,2)
(60,8,2)
(68,23,2)
(46,8,2)
(83,23,2)
(43,47,2)
(43,37,2)
(50,11,2)
(55,36,2)
(49,8,2)
(39,58,2)
(19,23,2)
(19,8,2)
(51,58,2)
(58,9,2)
(45,43,2)
(83,81,2)
(62,19,2)
(45,37,2)
(47,31,2)
(2,23,2)
(55,63,2)
(11,8,2)
(21,8,2)
(44,23,2)
(79,50,2)
(66,3,2)
(24,25,2)
(14,58,2)
(55,83,2)
(21,58,2)
(66,47,2)
(62,23,2)
(22,23,2)
(14,65,2)
(7,8,2)
(65,58,2)
(74,58,2)
(48,45,2)
(37,23,2)
(81,7,2)
(63,74,2)
(36,84,2)
(58,25,2)
(13,8,2)
(74,65,2)
(73,23,2)
(38,8,2)
(56,47,2)
(63,14,2)
(33,25,2)
(55,48,2)
(55,69,2)
(41,37,2)
(0,3,2)
(12,23,2)
(3,47,2)
(13,23,2)
(35,37,2)
(56,3,2)
(1,74,2)
(39,21,2)
(48,23,2)
(51,65,2)
(84,52,2)
(52,8,2)
(16,58,2)
(14,60,2)
(9,8,2)
(28,74,2)
(9,25,2)
(26,58,2)
(52,46,2)
(69,39,2)
(27,3,2)
(18,23,2)
(29,50,2)
(16,65,2)
(29,8,2)
(23,74,2)
(69,65,2)
(60,65,2)
(77,58,2)
(7,74,2)
(53,74,2)
(37,47,2)
(31,8,2)
(81,74,2)
(60,58,2)
-----------------------------------
(0,netdev)
(1,adapter)
(2,~BE_IF_FLAGS_ALL_PROMISCUOUS)
(3,netif_running(netdev)
(4,if (status)
(5,status)
(6,if (status)
(7,be_setup_queues(adapter)
(8,struct be_adapter *adapter)
(9,msix_enabled(adapter)
(10,0)
(11,adapter->num_msix_roce_vec)
(12,status)
(13,be_schedule_worker(adapter)
(14,status = be_if_create(adapter)
(15,adapter)
(16,adapter)
(17,)
(18,if_flags)
(19,adapter->if_flags)
(20,if (!msix_enabled(adapter)
(21,be_msix_enable(adapter)
(22,adapter)
(23,status)
(24,adapter)
(25,status)
(26,status)
(27,netdev)
(28,status)
(29,be_msix_disable(adapter)
(30,netdev)
(31,adapter->netdev)
(32,num_msix_roce_vec)
(33,status)
(34,adapter)
(35,netdev)
(36,return status;)
(37,netif_running(netdev)
(38,be_cancel_worker(adapter)
(39,status = be_msix_enable(adapter)
(40,if (status)
(41,status)
(42,if (netif_running(netdev)
(43,be_open(netdev)
(44,adapter)
(45,status = be_open(netdev)
(46,adapter->if_handle)
(47,*netdev = adapter->netdev)
(48,return status;)
(49,be_clear_queues(adapter)
(50,!adapter->num_msix_roce_vec)
(51,status)
(52,be_cmd_if_destroy(adapter, adapter->if_handle,  0)
(53,status)
(54,netdev)
(55,RET)
(56,be_close(netdev)
(57,netdev)
(58,!msix_enabled(adapter)
(59,)
(60,be_if_create(adapter)
(61,netdev)
(62,adapter->if_flags &= ~BE_IF_FLAGS_ALL_PROMISCUOUS)
(63,return status;)
(64,if_handle)
(65,status)
(66,netif_carrier_off(netdev)
(67,)
(68,status)
(69,return status;)
(70,adapter)
(71,status)
(72,adapter)
(73,netdev)
(74,status)
(75,if (!adapter->num_msix_roce_vec)
(76,if (status)
(77,adapter)
(78,status)
(79,adapter)
(80,if (netif_running(netdev)
(81,status = be_setup_queues(adapter)
(82,adapter)
(83,return status;)
(84,status = be_cmd_if_destroy(adapter, adapter->if_handle,  0)
(85,adapter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^