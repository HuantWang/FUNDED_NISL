-----label-----
0
-----code-----
static int insert_device(struct pnp_dev *dev, struct pnp_bios_node * node)
{
	struct list_head * pos;
	unsigned char * p;
	struct pnp_dev * pnp_dev;
	struct pnp_id *dev_id;
	char id[8];

	/* check if the device is already added */
	dev->number = node->handle;
	list_for_each (pos, &pnpbios_protocol.devices){
		pnp_dev = list_entry(pos, struct pnp_dev, protocol_list);
		if (dev->number == pnp_dev->number)
			return -1;
	}

	/* set the initial values for the PnP device */
	dev_id = pnpbios_kmalloc(sizeof(struct pnp_id), GFP_KERNEL);
	if (!dev_id)
		return -1;
	pnpid32_to_pnpid(node->eisa_id,id);
	memcpy(dev_id->id,id,7);
	pnp_add_id(dev_id, dev);
	p = pnp_parse_current_resources((char *)node->data,
		(char *)node->data + node->size,&dev->res);
	p = pnp_parse_possible_resources((char *)p,
		(char *)node->data + node->size,dev);
	node_id_data_to_dev(p,node,dev);
	dev->active = pnp_is_active(dev);
	dev->flags = node->flags;
	if (!(dev->flags & PNPBIOS_NO_CONFIG))
		dev->capabilities |= PNP_CONFIGURABLE;
	if (!(dev->flags & PNPBIOS_NO_DISABLE))
		dev->capabilities |= PNP_DISABLE;
	dev->capabilities |= PNP_READ;
	if (pnpbios_is_dynamic(dev))
		dev->capabilities |= PNP_WRITE;
	if (dev->flags & PNPBIOS_REMOVABLE)
		dev->capabilities |= PNP_REMOVABLE;
	dev->protocol = &pnpbios_protocol;

	/* clear out the damaged flags */
	if (!dev->active)
		pnp_init_resources(&dev->res);

	pnp_add_device(dev);
	pnpbios_interface_attach_device(node);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
28,29
28,30
31,32
32,33
32,34
33,34
35,36
35,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
54,56
55,56
58,59
58,60
59,60
62,63
63,64
63,65
63,66
64,65
66,67
68,69
69,70
69,71
70,71
73,74
74,75
74,76
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
82,83
82,84
83,84
86,87
87,88
89,90
90,91
90,92
91,92
93,94
93,95
93,96
94,95
96,97
97,98
97,99
98,99
101,102
103,104
103,105
104,105
105,106
107,108
108,109
110,111
111,112
111,113
111,114
112,113
114,115
114,116
115,116
118,119
120,121
121,122
121,123
121,124
121,125
122,123
124,125
124,126
125,126
128,129
131,132
132,133
132,134
132,135
133,134
135,136
137,138
139,140
140,141
140,142
141,142
143,144
143,145
143,146
143,147
144,145
146,147
146,148
147,148
147,149
149,150
151,152
151,153
152,153
155,156
155,157
156,157
156,158
157,158
157,159
159,160
161,162
161,163
162,163
165,166
165,167
166,167
169,170
170,171
170,172
171,172
174,175
175,176
175,177
176,177
178,179
178,180
178,181
178,182
179,180
181,182
181,183
182,183
182,184
184,185
186,187
188,189
188,190
189,190
189,191
190,191
190,192
192,193
194,195
194,196
195,196
198,199
198,200
199,200
202,203
204,205
205,206
205,207
205,208
205,209
206,207
208,209
210,211
212,213
214,215
215,216
215,217
216,217
216,218
217,218
220,221
220,222
221,222
223,224
225,226
226,227
226,228
227,228
227,229
228,229
231,232
231,233
232,233
235,236
235,237
236,237
237,238
238,239
238,240
239,240
239,241
240,241
243,244
245,246
246,247
246,248
247,248
247,249
248,249
251,252
253,254
253,255
254,255
255,256
256,257
256,258
257,258
257,259
258,259
261,262
263,264
264,265
264,266
265,266
265,267
266,267
269,270
271,272
272,273
272,274
273,274
273,275
274,275
277,278
279,280
279,281
280,281
280,282
281,282
283,284
285,286
286,287
286,288
287,288
287,289
288,289
291,292
293,294
293,295
294,295
294,296
295,296
295,297
296,297
299,300
301,302
302,303
302,304
303,304
303,305
304,305
307,308
309,310
310,311
310,312
311,312
311,313
312,313
315,316
316,317
318,319
318,320
319,320
320,321
320,322
321,322
324,325
325,326
325,327
326,327
328,329
329,330
329,331
330,331
333,334
334,335
334,336
335,336
337,338
339,340
340,341
340,342
341,342
343,344
345,346
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,29,30,34,36,37,41,43,44,47,49,51,56,57,60,61,65,67,71,72,80,81,84,85,88,92,95,99,100,102,106,109,113,116,117,119,123,126,127,129,130,134,136,138,142,145,148,150,153,154,158,160,163,164,167,168,172,173,177,180,183,185,187,191,193,196,197,200,201,203,207,209,211,213,218,219,222,224,229,230,233,234,241,242,244,249,250,252,259,260,262,267,268,270,275,276,278,282,284,289,290,292,297,298,300,305,306,308,313,314,317,322,323,327,331,332,336,338,342,344,346
-----computeFrom-----
53,54
53,55
77,78
77,79
90,91
90,92
140,141
140,142
155,156
155,157
175,176
175,177
188,189
188,190
215,216
215,217
226,227
226,228
238,239
238,240
246,247
246,248
256,257
256,258
264,265
264,266
272,273
272,274
286,287
286,288
294,295
294,296
302,303
302,304
310,311
310,312
-----guardedBy-----
297,305
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;CompoundStatement;ProblemStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int insert_device(struct pnp_dev *dev, struct pnp_bios_node * node){	struct list_head * pos;	unsigned char * p;	struct pnp_dev * pnp_dev;	struct pnp_id *dev_id;	char id[8];	/* check if the device is already added */	dev->number = node->handle;	list_for_each (pos, &pnpbios_protocol.devices){		pnp_dev = list_entry(pos, struct pnp_dev, protocol_list);		if (dev->number == pnp_dev->number)			return -1;	}	/* set the initial values for the PnP device */	dev_id = pnpbios_kmalloc(sizeof(struct pnp_id), GFP_KERNEL);	if (!dev_id)		return -1;	pnpid32_to_pnpid(node->eisa_id,id);	memcpy(dev_id->id,id,7);	pnp_add_id(dev_id, dev);	p = pnp_parse_current_resources((char *)node->data,		(char *)node->data + node->size,&dev->res);	p = pnp_parse_possible_resources((char *)p,		(char *)node->data + node->size,dev);	node_id_data_to_dev(p,node,dev);	dev->active = pnp_is_active(dev);	dev->flags = node->flags;	if (!(dev->flags & PNPBIOS_NO_CONFIG))		dev->capabilities |= PNP_CONFIGURABLE;	if (!(dev->flags & PNPBIOS_NO_DISABLE))		dev->capabilities |= PNP_DISABLE;	dev->capabilities |= PNP_READ;	if (pnpbios_is_dynamic(dev))		dev->capabilities |= PNP_WRITE;	if (dev->flags & PNPBIOS_REMOVABLE)		dev->capabilities |= PNP_REMOVABLE;	dev->protocol = &pnpbios_protocol;	/* clear out the damaged flags */	if (!dev->active)		pnp_init_resources(&dev->res);	pnp_add_device(dev);	pnpbios_interface_attach_device(node);	return 0;}
static int
insert_device(struct pnp_dev *dev, struct pnp_bios_node * node)
insert_device
struct pnp_dev *dev
struct pnp_dev
pnp_dev
*dev
*
dev
struct pnp_bios_node * node
struct pnp_bios_node
pnp_bios_node
* node
*
node
{	struct list_head * pos;	unsigned char * p;	struct pnp_dev * pnp_dev;	struct pnp_id *dev_id;	char id[8];	/* check if the device is already added */	dev->number = node->handle;	list_for_each (pos, &pnpbios_protocol.devices){		pnp_dev = list_entry(pos, struct pnp_dev, protocol_list);		if (dev->number == pnp_dev->number)			return -1;	}	/* set the initial values for the PnP device */	dev_id = pnpbios_kmalloc(sizeof(struct pnp_id), GFP_KERNEL);	if (!dev_id)		return -1;	pnpid32_to_pnpid(node->eisa_id,id);	memcpy(dev_id->id,id,7);	pnp_add_id(dev_id, dev);	p = pnp_parse_current_resources((char *)node->data,		(char *)node->data + node->size,&dev->res);	p = pnp_parse_possible_resources((char *)p,		(char *)node->data + node->size,dev);	node_id_data_to_dev(p,node,dev);	dev->active = pnp_is_active(dev);	dev->flags = node->flags;	if (!(dev->flags & PNPBIOS_NO_CONFIG))		dev->capabilities |= PNP_CONFIGURABLE;	if (!(dev->flags & PNPBIOS_NO_DISABLE))		dev->capabilities |= PNP_DISABLE;	dev->capabilities |= PNP_READ;	if (pnpbios_is_dynamic(dev))		dev->capabilities |= PNP_WRITE;	if (dev->flags & PNPBIOS_REMOVABLE)		dev->capabilities |= PNP_REMOVABLE;	dev->protocol = &pnpbios_protocol;	/* clear out the damaged flags */	if (!dev->active)		pnp_init_resources(&dev->res);	pnp_add_device(dev);	pnpbios_interface_attach_device(node);	return 0;}
struct list_head * pos;
struct list_head * pos;
struct list_head
list_head
* pos
*
pos
unsigned char * p;
unsigned char * p;
unsigned char
* p
*
p
struct pnp_dev * pnp_dev;
struct pnp_dev * pnp_dev;
struct pnp_dev
pnp_dev
* pnp_dev
*
pnp_dev
struct pnp_id *dev_id;
struct pnp_id *dev_id;
struct pnp_id
pnp_id
*dev_id
*
dev_id
char id[8];
char id[8];
char
id[8]
id
[8]
8
dev->number = node->handle;
dev->number = node->handle
dev->number
dev
dev
number
node->handle
node
node
handle
list_for_each (pos, &pnpbios_protocol.devices)
list_for_each (pos, &pnpbios_protocol.devices)
list_for_each
list_for_each
pos
pos
&pnpbios_protocol.devices
pnpbios_protocol.devices
pnpbios_protocol
pnpbios_protocol
devices
)
{		pnp_dev = list_entry(pos, struct pnp_dev, protocol_list);		if (dev->number == pnp_dev->number)			return -1;	}
pnp_dev = list_entry(pos, struct pnp_dev, protocol_list);
if (dev->number == pnp_dev->number)			return -1;
dev->number == pnp_dev->number
dev->number
dev
dev
number
pnp_dev->number
pnp_dev
pnp_dev
number
return -1;
-1
1
dev_id = pnpbios_kmalloc(sizeof(struct pnp_id), GFP_KERNEL);
dev_id = pnpbios_kmalloc(sizeof(struct pnp_id), GFP_KERNEL)
dev_id
dev_id
pnpbios_kmalloc(sizeof(struct pnp_id), GFP_KERNEL)
pnpbios_kmalloc
pnpbios_kmalloc
sizeof(struct pnp_id)
struct pnp_id
struct pnp_id
pnp_id

GFP_KERNEL
GFP_KERNEL
if (!dev_id)		return -1;
!dev_id
dev_id
dev_id
return -1;
-1
1
pnpid32_to_pnpid(node->eisa_id,id);
pnpid32_to_pnpid(node->eisa_id,id)
pnpid32_to_pnpid
pnpid32_to_pnpid
node->eisa_id
node
node
eisa_id
id
id
memcpy(dev_id->id,id,7);
memcpy(dev_id->id,id,7)
memcpy
memcpy
dev_id->id
dev_id
dev_id
id
id
id
7
pnp_add_id(dev_id, dev);
pnp_add_id(dev_id, dev)
pnp_add_id
pnp_add_id
dev_id
dev_id
dev
dev
p = pnp_parse_current_resources((char *)node->data,		(char *)node->data + node->size,&dev->res);
p = pnp_parse_current_resources((char *)node->data,		(char *)node->data + node->size,&dev->res)
p
p
pnp_parse_current_resources((char *)node->data,		(char *)node->data + node->size,&dev->res)
pnp_parse_current_resources
pnp_parse_current_resources
(char *)node->data
char *
char
*
*
node->data
node
node
data
(char *)node->data + node->size
(char *)node->data
char *
char
*
*
node->data
node
node
data
node->size
node
node
size
&dev->res
dev->res
dev
dev
res
p = pnp_parse_possible_resources((char *)p,		(char *)node->data + node->size,dev);
p = pnp_parse_possible_resources((char *)p,		(char *)node->data + node->size,dev)
p
p
pnp_parse_possible_resources((char *)p,		(char *)node->data + node->size,dev)
pnp_parse_possible_resources
pnp_parse_possible_resources
(char *)p
char *
char
*
*
p
p
(char *)node->data + node->size
(char *)node->data
char *
char
*
*
node->data
node
node
data
node->size
node
node
size
dev
dev
node_id_data_to_dev(p,node,dev);
node_id_data_to_dev(p,node,dev)
node_id_data_to_dev
node_id_data_to_dev
p
p
node
node
dev
dev
dev->active = pnp_is_active(dev);
dev->active = pnp_is_active(dev)
dev->active
dev
dev
active
pnp_is_active(dev)
pnp_is_active
pnp_is_active
dev
dev
dev->flags = node->flags;
dev->flags = node->flags
dev->flags
dev
dev
flags
node->flags
node
node
flags
if (!(dev->flags & PNPBIOS_NO_CONFIG))		dev->capabilities |= PNP_CONFIGURABLE;
!(dev->flags & PNPBIOS_NO_CONFIG)
(dev->flags & PNPBIOS_NO_CONFIG)
dev->flags & PNPBIOS_NO_CONFIG
dev->flags
dev
dev
flags
PNPBIOS_NO_CONFIG
PNPBIOS_NO_CONFIG
dev->capabilities |= PNP_CONFIGURABLE;
dev->capabilities |= PNP_CONFIGURABLE
dev->capabilities
dev
dev
capabilities
PNP_CONFIGURABLE
PNP_CONFIGURABLE
if (!(dev->flags & PNPBIOS_NO_DISABLE))		dev->capabilities |= PNP_DISABLE;
!(dev->flags & PNPBIOS_NO_DISABLE)
(dev->flags & PNPBIOS_NO_DISABLE)
dev->flags & PNPBIOS_NO_DISABLE
dev->flags
dev
dev
flags
PNPBIOS_NO_DISABLE
PNPBIOS_NO_DISABLE
dev->capabilities |= PNP_DISABLE;
dev->capabilities |= PNP_DISABLE
dev->capabilities
dev
dev
capabilities
PNP_DISABLE
PNP_DISABLE
dev->capabilities |= PNP_READ;
dev->capabilities |= PNP_READ
dev->capabilities
dev
dev
capabilities
PNP_READ
PNP_READ
if (pnpbios_is_dynamic(dev))		dev->capabilities |= PNP_WRITE;
pnpbios_is_dynamic(dev)
pnpbios_is_dynamic
pnpbios_is_dynamic
dev
dev
dev->capabilities |= PNP_WRITE;
dev->capabilities |= PNP_WRITE
dev->capabilities
dev
dev
capabilities
PNP_WRITE
PNP_WRITE
if (dev->flags & PNPBIOS_REMOVABLE)		dev->capabilities |= PNP_REMOVABLE;
dev->flags & PNPBIOS_REMOVABLE
dev->flags
dev
dev
flags
PNPBIOS_REMOVABLE
PNPBIOS_REMOVABLE
dev->capabilities |= PNP_REMOVABLE;
dev->capabilities |= PNP_REMOVABLE
dev->capabilities
dev
dev
capabilities
PNP_REMOVABLE
PNP_REMOVABLE
dev->protocol = &pnpbios_protocol;
dev->protocol = &pnpbios_protocol
dev->protocol
dev
dev
protocol
&pnpbios_protocol
pnpbios_protocol
pnpbios_protocol
if (!dev->active)		pnp_init_resources(&dev->res);
!dev->active
dev->active
dev
dev
active
pnp_init_resources(&dev->res);
pnp_init_resources(&dev->res)
pnp_init_resources
pnp_init_resources
&dev->res
dev->res
dev
dev
res
pnp_add_device(dev);
pnp_add_device(dev)
pnp_add_device
pnp_add_device
dev
dev
pnpbios_interface_attach_device(node);
pnpbios_interface_attach_device(node)
pnpbios_interface_attach_device
pnpbios_interface_attach_device
node
node
return 0;
0
-----joern-----
(166,124,0)
(108,96,0)
(136,61,0)
(31,79,0)
(112,156,0)
(95,58,0)
(128,87,0)
(37,75,0)
(125,18,0)
(100,155,0)
(148,82,0)
(61,40,0)
(108,104,0)
(128,22,0)
(44,82,0)
(109,126,0)
(38,82,0)
(110,19,0)
(168,61,0)
(56,58,0)
(98,47,0)
(28,60,0)
(135,19,0)
(64,130,0)
(9,51,0)
(112,120,0)
(142,136,0)
(63,58,0)
(13,58,0)
(4,13,0)
(17,104,0)
(164,115,0)
(4,58,0)
(100,130,0)
(12,10,0)
(143,51,0)
(19,58,0)
(165,23,0)
(146,46,0)
(114,56,0)
(146,38,0)
(104,112,0)
(153,135,0)
(8,29,0)
(116,121,0)
(134,168,0)
(173,82,0)
(26,144,0)
(146,122,0)
(63,89,0)
(115,164,0)
(79,31,0)
(173,133,0)
(23,165,0)
(131,121,0)
(51,18,0)
(94,173,0)
(152,31,0)
(154,148,0)
(46,3,0)
(3,5,0)
(101,104,0)
(46,146,0)
(53,143,0)
(148,32,0)
(130,59,0)
(19,110,0)
(65,4,0)
(112,58,0)
(10,133,0)
(20,55,0)
(29,58,0)
(112,75,0)
(106,141,0)
(133,58,0)
(112,55,0)
(164,82,0)
(105,75,0)
(43,169,0)
(84,75,0)
(127,125,0)
(108,156,0)
(85,18,0)
(111,58,0)
(41,46,0)
(60,18,0)
(36,55,0)
(86,99,0)
(70,51,0)
(76,4,0)
(73,58,0)
(54,96,0)
(83,79,0)
(24,89,0)
(10,47,0)
(37,156,0)
(169,29,0)
(132,85,0)
(37,96,0)
(92,38,0)
(53,103,0)
(126,109,0)
(88,4,0)
(32,58,0)
(79,133,0)
(115,58,0)
(33,156,0)
(160,38,0)
(5,58,0)
(29,22,0)
(108,120,0)
(142,82,0)
(162,37,0)
(130,104,0)
(130,96,0)
(155,75,0)
(56,29,0)
(77,125,0)
(103,53,0)
(157,3,0)
(90,118,0)
(21,5,0)
(112,96,0)
(99,18,0)
(7,62,0)
(130,120,0)
(175,58,0)
(177,85,0)
(75,32,0)
(129,105,0)
(96,33,0)
(149,108,0)
(103,44,0)
(97,141,0)
(80,95,0)
(39,112,0)
(69,59,0)
(49,44,0)
(130,75,0)
(37,104,0)
(59,108,0)
(113,103,0)
(144,58,0)
(122,121,0)
(46,18,0)
(34,120,0)
(140,79,0)
(33,120,0)
(108,60,0)
(37,55,0)
(81,84,0)
(139,3,0)
(22,29,0)
(119,58,0)
(130,60,0)
(130,135,0)
(120,18,0)
(174,142,0)
(99,124,0)
(52,135,0)
(30,29,0)
(133,173,0)
(38,146,0)
(25,13,0)
(130,58,0)
(45,115,0)
(130,156,0)
(125,165,0)
(167,58,0)
(55,63,0)
(135,18,0)
(99,32,0)
(37,120,0)
(72,75,0)
(66,122,0)
(53,136,0)
(122,146,0)
(5,53,0)
(11,85,0)
(93,126,0)
(46,13,0)
(4,82,0)
(57,120,0)
(117,164,0)
(165,125,0)
(163,30,0)
(156,84,0)
(158,58,0)
(103,113,0)
(44,103,0)
(74,148,0)
(151,44,0)
(62,155,0)
(141,58,0)
(156,18,0)
(59,18,0)
(138,31,0)
(96,18,0)
(0,22,0)
(87,128,0)
(159,58,0)
(107,96,0)
(56,18,0)
(47,10,0)
(33,55,0)
(6,58,0)
(61,136,0)
(100,105,0)
(10,18,0)
(35,10,0)
(53,5,0)
(22,128,0)
(42,58,0)
(14,30,0)
(4,18,0)
(104,18,0)
(170,156,0)
(144,18,0)
(123,58,0)
(50,173,0)
(143,53,0)
(60,37,0)
(95,82,0)
(51,143,0)
(168,82,0)
(55,18,0)
(79,18,0)
(108,75,0)
(121,82,0)
(108,55,0)
(2,142,0)
(91,156,0)
(118,18,0)
(137,33,0)
(27,60,0)
(120,133,0)
(48,168,0)
(32,148,0)
(161,56,0)
(136,142,0)
(126,15,0)
(145,129,0)
(30,141,0)
(109,18,0)
(136,53,0)
(124,166,0)
(141,30,0)
(61,168,0)
(124,99,0)
(33,75,0)
(176,109,0)
(85,63,0)
(31,138,0)
(130,55,0)
(89,18,0)
(102,75,0)
(67,58,0)
(1,59,0)
(3,139,0)
(71,164,0)
(89,63,0)
(84,120,0)
(13,46,0)
(75,18,0)
(15,126,0)
(68,110,0)
(78,166,0)
(121,122,0)
(171,109,0)
(109,133,0)
(172,166,0)
(84,55,0)
(3,46,0)
(16,67,0)
(122,66,0)
(150,58,0)
(40,61,0)
(85,177,0)
(147,99,0)
(122,66,1)
(130,64,1)
(12,118,1)
(37,75,1)
(22,128,1)
(33,120,1)
(89,24,1)
(133,173,1)
(128,87,1)
(96,54,1)
(130,59,1)
(122,121,1)
(37,162,1)
(23,165,1)
(146,122,1)
(172,99,1)
(108,120,1)
(30,14,1)
(61,40,1)
(86,32,1)
(28,118,1)
(115,164,1)
(51,18,1)
(41,146,1)
(21,56,1)
(134,48,1)
(141,30,1)
(96,18,1)
(29,22,1)
(71,117,1)
(173,82,1)
(130,156,1)
(3,157,1)
(37,120,1)
(56,29,1)
(110,68,1)
(10,35,1)
(24,55,1)
(60,18,1)
(146,38,1)
(84,55,1)
(95,82,1)
(31,152,1)
(15,126,1)
(94,120,1)
(135,18,1)
(100,155,1)
(121,131,1)
(101,15,1)
(46,18,1)
(32,148,1)
(51,70,1)
(126,109,1)
(108,75,1)
(3,5,1)
(10,18,1)
(120,18,1)
(92,160,1)
(7,124,1)
(74,75,1)
(95,80,1)
(118,90,1)
(108,96,1)
(99,32,1)
(44,82,1)
(11,19,1)
(81,156,1)
(130,104,1)
(147,86,1)
(37,104,1)
(152,79,1)
(125,18,1)
(112,75,1)
(145,169,1)
(128,8,1)
(4,18,1)
(101,33,1)
(157,25,1)
(121,82,1)
(61,168,1)
(162,60,1)
(52,153,1)
(135,52,1)
(46,146,1)
(84,75,1)
(112,156,1)
(36,4,1)
(77,177,1)
(59,18,1)
(144,26,1)
(141,106,1)
(53,136,1)
(76,13,1)
(106,97,1)
(78,172,1)
(26,23,1)
(174,2,1)
(22,0,1)
(85,132,1)
(79,133,1)
(91,170,1)
(69,47,1)
(105,75,1)
(171,84,1)
(153,47,1)
(171,138,1)
(131,116,1)
(136,142,1)
(93,109,1)
(48,103,1)
(112,96,1)
(33,55,1)
(63,89,1)
(47,10,1)
(79,18,1)
(105,129,1)
(20,36,1)
(125,127,1)
(49,151,1)
(176,171,1)
(154,74,1)
(99,147,1)
(84,81,1)
(130,75,1)
(99,18,1)
(55,20,1)
(4,65,1)
(26,177,1)
(3,139,1)
(90,112,1)
(68,135,1)
(59,1,1)
(37,156,1)
(38,82,1)
(1,69,1)
(46,41,1)
(56,18,1)
(5,53,1)
(4,13,1)
(39,104,1)
(124,166,1)
(64,95,1)
(108,55,1)
(138,31,1)
(170,138,1)
(143,51,1)
(102,72,1)
(127,77,1)
(55,18,1)
(168,82,1)
(149,59,1)
(124,99,1)
(156,91,1)
(12,37,1)
(156,18,1)
(177,85,1)
(62,7,1)
(57,63,1)
(100,105,1)
(164,82,1)
(70,9,1)
(120,34,1)
(17,101,1)
(109,133,1)
(148,154,1)
(117,169,1)
(75,18,1)
(108,156,1)
(144,18,1)
(38,92,1)
(53,103,1)
(155,62,1)
(85,63,1)
(4,82,1)
(75,102,1)
(161,114,1)
(148,82,1)
(34,57,1)
(166,78,1)
(173,50,1)
(14,163,1)
(126,93,1)
(19,110,1)
(8,124,1)
(112,39,1)
(103,44,1)
(43,29,1)
(45,164,1)
(46,3,1)
(85,18,1)
(129,145,1)
(104,17,1)
(31,79,1)
(164,71,1)
(118,18,1)
(155,75,1)
(53,143,1)
(112,120,1)
(30,29,1)
(153,108,1)
(54,107,1)
(13,46,1)
(109,18,1)
(103,113,1)
(112,55,1)
(132,11,1)
(163,115,1)
(80,144,1)
(165,125,1)
(60,27,1)
(33,156,1)
(0,128,1)
(130,120,1)
(50,94,1)
(37,55,1)
(89,18,1)
(130,96,1)
(108,104,1)
(108,149,1)
(130,60,1)
(108,60,1)
(35,12,1)
(116,3,1)
(56,161,1)
(27,28,1)
(65,88,1)
(142,174,1)
(107,15,1)
(37,96,1)
(168,134,1)
(114,141,1)
(33,75,1)
(25,5,1)
(169,29,1)
(83,133,1)
(136,61,1)
(33,137,1)
(97,30,1)
(169,43,1)
(10,133,1)
(98,10,1)
(115,45,1)
(142,82,1)
(44,49,1)
(84,120,1)
(88,76,1)
(2,61,1)
(109,176,1)
(137,96,1)
(140,83,1)
(151,21,1)
(9,136,1)
(47,98,1)
(130,55,1)
(100,130,1)
(104,18,1)
(79,140,1)
(160,122,1)
(130,135,1)
(115,169,2)
(92,169,2)
(101,169,2)
(2,169,2)
(70,169,2)
(15,126,2)
(53,103,2)
(142,82,2)
(149,47,2)
(44,169,2)
(156,18,2)
(140,169,2)
(88,169,2)
(95,169,2)
(138,169,2)
(112,75,2)
(24,169,2)
(8,124,2)
(104,18,2)
(124,99,2)
(36,169,2)
(3,139,2)
(37,75,2)
(0,124,2)
(53,169,2)
(135,169,2)
(169,124,2)
(135,18,2)
(80,169,2)
(108,60,2)
(130,135,2)
(77,177,2)
(10,133,2)
(79,133,2)
(5,169,2)
(33,75,2)
(1,47,2)
(34,169,2)
(98,169,2)
(100,155,2)
(130,75,2)
(68,169,2)
(136,61,2)
(152,169,2)
(110,169,2)
(37,55,2)
(37,96,2)
(112,156,2)
(138,31,2)
(56,169,2)
(56,29,2)
(160,169,2)
(7,124,2)
(48,169,2)
(96,18,2)
(108,96,2)
(129,169,2)
(130,156,2)
(108,104,2)
(130,169,2)
(22,128,2)
(61,169,2)
(63,89,2)
(31,169,2)
(143,51,2)
(11,169,2)
(4,82,2)
(15,169,2)
(165,125,2)
(50,169,2)
(108,47,2)
(141,30,2)
(44,82,2)
(136,169,2)
(124,166,2)
(156,138,2)
(100,105,2)
(142,169,2)
(33,156,2)
(38,169,2)
(53,143,2)
(23,177,2)
(112,96,2)
(130,59,2)
(103,44,2)
(46,18,2)
(163,169,2)
(4,18,2)
(130,60,2)
(148,82,2)
(65,169,2)
(17,169,2)
(59,47,2)
(107,15,2)
(57,169,2)
(37,104,2)
(89,18,2)
(23,165,2)
(85,169,2)
(103,169,2)
(109,18,2)
(49,169,2)
(169,29,2)
(126,109,2)
(30,29,2)
(105,75,2)
(62,124,2)
(137,15,2)
(103,113,2)
(47,169,2)
(104,169,2)
(170,138,2)
(122,121,2)
(99,32,2)
(109,133,2)
(76,169,2)
(79,18,2)
(117,169,2)
(79,169,2)
(52,169,2)
(128,87,2)
(46,3,2)
(20,169,2)
(27,118,2)
(153,169,2)
(145,169,2)
(21,169,2)
(157,169,2)
(161,169,2)
(29,124,2)
(33,55,2)
(130,96,2)
(69,47,2)
(37,156,2)
(81,138,2)
(99,18,2)
(61,40,2)
(46,169,2)
(39,169,2)
(97,169,2)
(37,120,2)
(9,169,2)
(164,169,2)
(151,169,2)
(51,169,2)
(125,18,2)
(109,169,2)
(38,82,2)
(63,169,2)
(155,75,2)
(4,169,2)
(143,169,2)
(4,13,2)
(174,169,2)
(55,18,2)
(122,66,2)
(146,169,2)
(32,148,2)
(176,169,2)
(115,164,2)
(89,169,2)
(46,146,2)
(126,169,2)
(121,82,2)
(59,18,2)
(173,82,2)
(95,82,2)
(71,169,2)
(35,169,2)
(108,120,2)
(130,120,2)
(141,169,2)
(51,18,2)
(56,18,2)
(60,118,2)
(118,18,2)
(5,53,2)
(108,156,2)
(45,169,2)
(53,136,2)
(3,5,2)
(12,169,2)
(43,124,2)
(30,169,2)
(84,55,2)
(26,169,2)
(134,169,2)
(84,75,2)
(22,124,2)
(47,10,2)
(120,169,2)
(168,169,2)
(144,18,2)
(116,169,2)
(14,169,2)
(112,169,2)
(84,120,2)
(130,104,2)
(106,169,2)
(29,22,2)
(122,169,2)
(144,169,2)
(33,15,2)
(114,169,2)
(96,15,2)
(128,124,2)
(131,169,2)
(177,169,2)
(54,15,2)
(118,169,2)
(146,122,2)
(132,169,2)
(146,38,2)
(171,169,2)
(41,169,2)
(85,18,2)
(108,75,2)
(3,169,2)
(33,120,2)
(55,169,2)
(93,169,2)
(60,18,2)
(127,177,2)
(162,118,2)
(112,55,2)
(168,82,2)
(133,173,2)
(165,177,2)
(91,138,2)
(130,55,2)
(10,169,2)
(37,118,2)
(83,169,2)
(133,169,2)
(177,85,2)
(164,82,2)
(173,169,2)
(13,169,2)
(100,130,2)
(85,63,2)
(112,120,2)
(105,169,2)
(31,79,2)
(10,18,2)
(125,177,2)
(120,18,2)
(19,169,2)
(75,18,2)
(108,55,2)
(61,168,2)
(155,124,2)
(94,169,2)
(90,169,2)
(64,169,2)
(121,169,2)
(84,138,2)
(25,169,2)
(136,142,2)
(13,46,2)
(28,118,2)
(19,110,2)
-----------------------------------
(0,GFP_KERNEL)
(1,capabilities)
(2,node)
(3,(char *)
(4,node_id_data_to_dev(p,node,dev)
(5,p = pnp_parse_current_resources((char *)
(6,if (dev->flags & PNPBIOS_REMOVABLE)
(7,1)
(8,dev_id)
(9,dev)
(10,dev->flags)
(11,dev)
(12,dev)
(13,p = pnp_parse_possible_resources((char *)
(14,id)
(15,!(dev->flags & PNPBIOS_NO_DISABLE)
(16,if (dev->number == pnp_dev->number)
(17,capabilities)
(18,struct pnp_dev *dev)
(19,dev->protocol = &pnpbios_protocol)
(20,active)
(21,p)
(22,pnpbios_kmalloc(sizeof(struct pnp_id)
(23,pnp_init_resources(&dev->res)
(24,dev)
(25,p)
(26,dev)
(27,capabilities)
(28,dev)
(29,dev_id = pnpbios_kmalloc(sizeof(struct pnp_id)
(30,dev_id->id)
(31,dev->flags & PNPBIOS_NO_CONFIG)
(32,dev->number = node->handle)
(33,dev->capabilities |= PNP_DISABLE)
(34,flags)
(35,flags)
(36,dev)
(37,dev->capabilities |= PNP_WRITE)
(38,node->size)
(39,PNP_READ)
(40,char *)
(41,dev)
(42,if (!(dev->flags & PNPBIOS_NO_CONFIG)
(43,dev_id)
(44,node->data)
(45,id)
(46,pnp_parse_possible_resources((char *)
(47,dev->flags & PNPBIOS_REMOVABLE)
(48,node)
(49,data)
(50,flags)
(51,dev->res)
(52,protocol)
(53,pnp_parse_current_resources((char *)
(54,capabilities)
(55,dev->active)
(56,pnp_add_id(dev_id, dev)
(57,dev)
(58,)
(59,dev->capabilities)
(60,dev->capabilities)
(61,(char *)
(62,-1)
(63,dev->active = pnp_is_active(dev)
(64,0)
(65,dev)
(66,char *)
(67,)
(68,pnpbios_protocol)
(69,dev)
(70,res)
(71,eisa_id)
(72,dev)
(73,if (!dev->active)
(74,node)
(75,dev->number)
(76,p)
(77,dev)
(78,number)
(79,dev->flags)
(80,node)
(81,PNP_CONFIGURABLE)
(82,struct pnp_bios_node * node)
(83,dev)
(84,dev->capabilities |= PNP_CONFIGURABLE)
(85,dev->active)
(86,dev)
(87,struct pnp_id)
(88,node)
(89,pnp_is_active(dev)
(90,dev)
(91,capabilities)
(92,size)
(93,PNPBIOS_NO_DISABLE)
(94,node)
(95,pnpbios_interface_attach_device(node)
(96,dev->capabilities)
(97,id)
(98,PNPBIOS_REMOVABLE)
(99,dev->number)
(100,RET)
(101,dev)
(102,number)
(103,(char *)
(104,dev->capabilities)
(105,return -1;)
(106,7)
(107,dev)
(108,dev->capabilities |= PNP_REMOVABLE)
(109,dev->flags)
(110,&pnpbios_protocol)
(111,if (!(dev->flags & PNPBIOS_NO_DISABLE)
(112,dev->capabilities |= PNP_READ)
(113,char *)
(114,dev_id)
(115,pnpid32_to_pnpid(node->eisa_id,id)
(116,node)
(117,node)
(118,pnpbios_is_dynamic(dev)
(119,pnp_dev)
(120,dev->flags)
(121,node->data)
(122,(char *)
(123,pos)
(124,dev->number == pnp_dev->number)
(125,dev->res)
(126,dev->flags & PNPBIOS_NO_DISABLE)
(127,res)
(128,sizeof(struct pnp_id)
(129,-1)
(130,return 0;)
(131,data)
(132,active)
(133,dev->flags = node->flags)
(134,data)
(135,dev->protocol)
(136,(char *)
(137,PNP_DISABLE)
(138,!(dev->flags & PNPBIOS_NO_CONFIG)
(139,char *)
(140,flags)
(141,memcpy(dev_id->id,id,7)
(142,node->size)
(143,&dev->res)
(144,pnp_add_device(dev)
(145,1)
(146,(char *)
(147,number)
(148,node->handle)
(149,PNP_REMOVABLE)
(150,p)
(151,node)
(152,PNPBIOS_NO_CONFIG)
(153,dev)
(154,handle)
(155,return -1;)
(156,dev->capabilities)
(157,p)
(158,if (pnpbios_is_dynamic(dev)
(159,if (!dev_id)
(160,node)
(161,dev)
(162,PNP_WRITE)
(163,dev_id)
(164,node->eisa_id)
(165,&dev->res)
(166,pnp_dev->number)
(167,dev_id)
(168,node->data)
(169,!dev_id)
(170,dev)
(171,dev)
(172,pnp_dev)
(173,node->flags)
(174,size)
(175,id)
(176,flags)
(177,!dev->active)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^