-----label-----
0
-----code-----
int
build_gs_TrueType_font(i_ctx_t *i_ctx_p, os_ptr op, gs_font_type42 **ppfont,
		       font_type ftype, gs_memory_type_ptr_t pstype,
		       const char *bcstr, const char *bgstr,
		       build_font_options_t options)
{
    build_proc_refs build;
    ref sfnts, GlyphDirectory;
    gs_font_type42 *pfont;
    font_data *pdata;
    int code;

    code = build_proc_name_refs(imemory, &build, bcstr, bgstr);
    if (code < 0)
	return code;
    check_type(*op, t_dictionary);
    /*
     * Since build_gs_primitive_font may resize the dictionary and cause
     * pointers to become invalid, we save sfnts and GlyphDirectory.
     */
    if ((code = font_string_array_param(imemory, op, "sfnts", &sfnts)) < 0 ||
	(code = font_GlyphDirectory_param(op, &GlyphDirectory)) < 0
	)
	return code;
    code = build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)ppfont,
				   ftype, pstype, &build, options);
    if (code != 0)
	return code;
    pfont = *ppfont;
    pdata = pfont_data(pfont);
    ref_assign(&pdata->u.type42.sfnts, &sfnts);
    pdata->u.type42.mru_sfnts_index = 0;
    pdata->u.type42.mru_sfnts_pos = 0;
    make_null_new(&pdata->u.type42.CIDMap);
    ref_assign(&pdata->u.type42.GlyphDirectory, &GlyphDirectory);
    pfont->data.string_proc = z42_string_proc;
    pfont->data.proc_data = (char *)pdata;
    pfont->is_resource = (options & bf_has_font_file ? true : false);
    code = gs_type42_font_init(pfont, 0);
    if (code < 0)
	return code;
    pfont->procs.font_info = z42_font_info;
    /*
     * If the font has a GlyphDictionary, this replaces loca and glyf for
     * accessing character outlines.  In this case, we use alternate
     * get_outline and enumerate_glyph procedures.
     */
    if (!r_has_type(&GlyphDirectory, t_null)) {
	pfont->data.get_outline = z42_gdir_get_outline;
	pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph;
    } else
	pfont->procs.enumerate_glyph = z42_enumerate_glyph;
    /*
     * The procedures that access glyph information must accept either
     * glyph names or glyph indexes.
     */
    pfont->data.get_glyph_index = z42_get_glyph_index;
    pfont->data.substitute_glyph_index_vertical = gs_type42_substitute_glyph_index_vertical;
    pfont->procs.encode_char = z42_encode_char;
    pfont->procs.glyph_info = z42_glyph_info;
    pfont->procs.glyph_outline = z42_glyph_outline;
    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
19,22
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
33,34
33,35
35,36
35,37
38,39
38,40
40,41
40,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
48,54
48,55
48,56
48,57
48,58
48,59
48,60
48,61
48,62
48,63
48,64
48,65
48,66
48,67
48,68
48,69
48,70
48,71
48,72
48,73
48,74
48,75
48,76
48,77
48,78
48,79
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
61,62
63,64
64,65
64,66
65,66
67,68
67,69
70,71
71,72
71,73
72,73
74,75
74,76
77,78
78,79
78,80
80,81
82,83
83,84
83,85
84,85
86,87
86,88
86,89
86,90
86,91
87,88
89,90
91,92
92,93
94,95
96,97
98,99
98,100
99,100
99,101
100,101
103,104
104,105
106,107
107,108
107,109
107,110
108,109
110,111
111,112
113,114
115,116
115,117
116,117
116,118
117,118
117,119
118,119
119,120
119,121
120,121
122,123
122,124
122,125
122,126
122,127
123,124
125,126
127,128
130,131
131,132
134,135
134,136
135,136
136,137
136,138
137,138
139,140
139,141
139,142
140,141
142,143
144,145
145,146
148,149
149,150
151,152
152,153
152,154
153,154
155,156
155,157
155,158
155,159
155,160
155,161
155,162
155,163
156,157
158,159
160,161
162,163
162,164
163,164
163,165
164,165
166,167
166,168
169,170
171,172
173,174
175,176
176,177
178,179
180,181
180,182
181,182
181,183
182,183
185,186
186,187
188,189
189,190
189,191
190,191
192,193
193,194
195,196
196,197
196,198
197,198
199,200
199,201
200,201
202,203
204,205
205,206
205,207
205,208
206,207
208,209
209,210
209,211
210,211
210,212
211,212
211,213
212,213
217,218
218,219
220,221
221,222
221,223
222,223
222,224
223,224
223,225
224,225
224,226
225,226
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
235,237
236,237
242,243
243,244
243,245
244,245
246,247
247,248
247,249
248,249
248,250
249,250
249,251
250,251
255,256
256,257
256,258
256,259
257,258
259,260
260,261
260,262
261,262
261,263
262,263
262,264
263,264
268,269
269,270
271,272
272,273
272,274
273,274
273,275
274,275
274,276
275,276
279,280
281,282
282,283
282,284
283,284
283,285
284,285
284,286
285,286
289,290
289,291
290,291
290,292
292,293
294,295
296,297
297,298
297,299
298,299
298,300
299,300
302,303
303,304
303,305
303,306
304,305
304,306
305,306
307,308
311,312
312,313
312,314
313,314
315,316
315,317
315,318
316,317
318,319
321,322
321,323
322,323
322,324
323,324
326,327
327,328
329,330
330,331
330,332
331,332
331,333
332,333
332,334
333,334
337,338
339,340
339,341
339,342
340,341
341,342
341,343
341,344
342,343
344,345
345,346
347,348
349,350
349,351
350,351
351,352
351,353
352,353
352,354
353,354
353,355
354,355
358,359
360,361
361,362
361,363
362,363
362,364
363,364
363,365
364,365
368,369
370,371
371,372
371,373
372,373
372,374
373,374
373,375
374,375
378,379
380,381
381,382
381,383
382,383
382,384
383,384
383,385
384,385
388,389
390,391
391,392
391,393
392,393
392,394
393,394
393,395
394,395
398,399
400,401
401,402
401,403
402,403
402,404
403,404
403,405
404,405
408,409
410,411
411,412
411,413
412,413
412,414
413,414
413,415
414,415
418,419
420,421
421,422
421,423
422,423
422,424
423,424
423,425
424,425
428,429
430,431
-----nextToken-----
2,4,7,9,10,13,15,18,20,21,22,25,27,30,32,34,36,37,39,41,42,45,47,52,54,58,60,62,66,68,69,73,75,76,79,81,85,88,90,93,95,97,101,102,105,109,112,114,121,124,126,128,129,132,133,138,141,143,146,147,150,154,157,159,161,165,167,168,170,172,174,177,179,183,184,187,191,194,198,201,203,207,213,214,215,216,219,226,227,228,229,230,237,238,239,240,241,245,251,252,253,254,258,264,265,266,267,270,276,277,278,280,286,287,288,291,293,295,300,301,306,308,309,310,314,317,319,320,324,325,328,334,335,336,338,343,346,348,355,356,357,359,365,366,367,369,375,376,377,379,385,386,387,389,395,396,397,399,405,406,407,409,415,416,417,419,425,426,427,429,431
-----computeFrom-----
83,84
83,85
99,100
99,101
116,117
116,118
117,118
117,119
119,120
119,121
134,135
134,136
136,137
136,138
152,153
152,154
181,182
181,183
189,190
189,191
196,197
196,198
221,222
221,223
232,233
232,234
272,273
272,274
282,283
282,284
297,298
297,299
304,305
304,306
312,313
312,314
322,323
322,324
330,331
330,332
351,352
351,353
361,362
361,363
371,372
371,373
381,382
381,383
391,392
391,393
401,402
401,403
411,412
411,413
421,422
421,423
-----guardedBy-----
101,105
138,150
183,187
324,328
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ConditionalExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
intbuild_gs_TrueType_font(i_ctx_t *i_ctx_p, os_ptr op, gs_font_type42 **ppfont,		       font_type ftype, gs_memory_type_ptr_t pstype,		       const char *bcstr, const char *bgstr,		       build_font_options_t options){    build_proc_refs build;    ref sfnts, GlyphDirectory;    gs_font_type42 *pfont;    font_data *pdata;    int code;    code = build_proc_name_refs(imemory, &build, bcstr, bgstr);    if (code < 0)	return code;    check_type(*op, t_dictionary);    /*     * Since build_gs_primitive_font may resize the dictionary and cause     * pointers to become invalid, we save sfnts and GlyphDirectory.     */    if ((code = font_string_array_param(imemory, op, "sfnts", &sfnts)) < 0 ||	(code = font_GlyphDirectory_param(op, &GlyphDirectory)) < 0	)	return code;    code = build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)ppfont,				   ftype, pstype, &build, options);    if (code != 0)	return code;    pfont = *ppfont;    pdata = pfont_data(pfont);    ref_assign(&pdata->u.type42.sfnts, &sfnts);    pdata->u.type42.mru_sfnts_index = 0;    pdata->u.type42.mru_sfnts_pos = 0;    make_null_new(&pdata->u.type42.CIDMap);    ref_assign(&pdata->u.type42.GlyphDirectory, &GlyphDirectory);    pfont->data.string_proc = z42_string_proc;    pfont->data.proc_data = (char *)pdata;    pfont->is_resource = (options & bf_has_font_file ? true : false);    code = gs_type42_font_init(pfont, 0);    if (code < 0)	return code;    pfont->procs.font_info = z42_font_info;    /*     * If the font has a GlyphDictionary, this replaces loca and glyf for     * accessing character outlines.  In this case, we use alternate     * get_outline and enumerate_glyph procedures.     */    if (!r_has_type(&GlyphDirectory, t_null)) {	pfont->data.get_outline = z42_gdir_get_outline;	pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph;    } else	pfont->procs.enumerate_glyph = z42_enumerate_glyph;    /*     * The procedures that access glyph information must accept either     * glyph names or glyph indexes.     */    pfont->data.get_glyph_index = z42_get_glyph_index;    pfont->data.substitute_glyph_index_vertical = gs_type42_substitute_glyph_index_vertical;    pfont->procs.encode_char = z42_encode_char;    pfont->procs.glyph_info = z42_glyph_info;    pfont->procs.glyph_outline = z42_glyph_outline;    return 0;}
int
build_gs_TrueType_font(i_ctx_t *i_ctx_p, os_ptr op, gs_font_type42 **ppfont,		       font_type ftype, gs_memory_type_ptr_t pstype,		       const char *bcstr, const char *bgstr,		       build_font_options_t options)
build_gs_TrueType_font
i_ctx_t *i_ctx_p
i_ctx_t
i_ctx_t
*i_ctx_p
*
i_ctx_p
os_ptr op
os_ptr
os_ptr
op
op
gs_font_type42 **ppfont
gs_font_type42
gs_font_type42
**ppfont
*
*
ppfont
font_type ftype
font_type
font_type
ftype
ftype
gs_memory_type_ptr_t pstype
gs_memory_type_ptr_t
gs_memory_type_ptr_t
pstype
pstype
const char *bcstr
const char
*bcstr
*
bcstr
const char *bgstr
const char
*bgstr
*
bgstr
build_font_options_t options
build_font_options_t
build_font_options_t
options
options
{    build_proc_refs build;    ref sfnts, GlyphDirectory;    gs_font_type42 *pfont;    font_data *pdata;    int code;    code = build_proc_name_refs(imemory, &build, bcstr, bgstr);    if (code < 0)	return code;    check_type(*op, t_dictionary);    /*     * Since build_gs_primitive_font may resize the dictionary and cause     * pointers to become invalid, we save sfnts and GlyphDirectory.     */    if ((code = font_string_array_param(imemory, op, "sfnts", &sfnts)) < 0 ||	(code = font_GlyphDirectory_param(op, &GlyphDirectory)) < 0	)	return code;    code = build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)ppfont,				   ftype, pstype, &build, options);    if (code != 0)	return code;    pfont = *ppfont;    pdata = pfont_data(pfont);    ref_assign(&pdata->u.type42.sfnts, &sfnts);    pdata->u.type42.mru_sfnts_index = 0;    pdata->u.type42.mru_sfnts_pos = 0;    make_null_new(&pdata->u.type42.CIDMap);    ref_assign(&pdata->u.type42.GlyphDirectory, &GlyphDirectory);    pfont->data.string_proc = z42_string_proc;    pfont->data.proc_data = (char *)pdata;    pfont->is_resource = (options & bf_has_font_file ? true : false);    code = gs_type42_font_init(pfont, 0);    if (code < 0)	return code;    pfont->procs.font_info = z42_font_info;    /*     * If the font has a GlyphDictionary, this replaces loca and glyf for     * accessing character outlines.  In this case, we use alternate     * get_outline and enumerate_glyph procedures.     */    if (!r_has_type(&GlyphDirectory, t_null)) {	pfont->data.get_outline = z42_gdir_get_outline;	pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph;    } else	pfont->procs.enumerate_glyph = z42_enumerate_glyph;    /*     * The procedures that access glyph information must accept either     * glyph names or glyph indexes.     */    pfont->data.get_glyph_index = z42_get_glyph_index;    pfont->data.substitute_glyph_index_vertical = gs_type42_substitute_glyph_index_vertical;    pfont->procs.encode_char = z42_encode_char;    pfont->procs.glyph_info = z42_glyph_info;    pfont->procs.glyph_outline = z42_glyph_outline;    return 0;}
build_proc_refs build;
build_proc_refs build;
build_proc_refs
build_proc_refs
build
build
ref sfnts, GlyphDirectory;
ref sfnts, GlyphDirectory;
ref
ref
sfnts
sfnts
GlyphDirectory
GlyphDirectory
gs_font_type42 *pfont;
gs_font_type42 *pfont;
gs_font_type42
gs_font_type42
*pfont
*
pfont
font_data *pdata;
font_data *pdata;
font_data
font_data
*pdata
*
pdata
int code;
int code;
int
code
code
code = build_proc_name_refs(imemory, &build, bcstr, bgstr);
code = build_proc_name_refs(imemory, &build, bcstr, bgstr)
code
code
build_proc_name_refs(imemory, &build, bcstr, bgstr)
build_proc_name_refs
build_proc_name_refs
imemory
imemory
&build
build
build
bcstr
bcstr
bgstr
bgstr
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
check_type(*op, t_dictionary);
check_type(*op, t_dictionary)
check_type
check_type
*op
op
op
t_dictionary
t_dictionary
if ((code = font_string_array_param(imemory, op, "sfnts", &sfnts)) < 0 ||	(code = font_GlyphDirectory_param(op, &GlyphDirectory)) < 0	)	return code;
(code = font_string_array_param(imemory, op, "sfnts", &sfnts)) < 0 ||	(code = font_GlyphDirectory_param(op, &GlyphDirectory)) < 0
(code = font_string_array_param(imemory, op, "sfnts", &sfnts)) < 0
(code = font_string_array_param(imemory, op, "sfnts", &sfnts))
code = font_string_array_param(imemory, op, "sfnts", &sfnts)
code
code
font_string_array_param(imemory, op, "sfnts", &sfnts)
font_string_array_param
font_string_array_param
imemory
imemory
op
op
"sfnts"
&sfnts
sfnts
sfnts
0
(code = font_GlyphDirectory_param(op, &GlyphDirectory)) < 0
(code = font_GlyphDirectory_param(op, &GlyphDirectory))
code = font_GlyphDirectory_param(op, &GlyphDirectory)
code
code
font_GlyphDirectory_param(op, &GlyphDirectory)
font_GlyphDirectory_param
font_GlyphDirectory_param
op
op
&GlyphDirectory
GlyphDirectory
GlyphDirectory
0
return code;
code
code
code = build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)ppfont,				   ftype, pstype, &build, options);
code = build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)ppfont,				   ftype, pstype, &build, options)
code
code
build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)ppfont,				   ftype, pstype, &build, options)
build_gs_primitive_font
build_gs_primitive_font
i_ctx_p
i_ctx_p
op
op
(gs_font_base **)ppfont
gs_font_base **
gs_font_base
gs_font_base
**
*
*
ppfont
ppfont
ftype
ftype
pstype
pstype
&build
build
build
options
options
if (code != 0)	return code;
code != 0
code
code
0
return code;
code
code
pfont = *ppfont;
pfont = *ppfont
pfont
pfont
*ppfont
ppfont
ppfont
pdata = pfont_data(pfont);
pdata = pfont_data(pfont)
pdata
pdata
pfont_data(pfont)
pfont_data
pfont_data
pfont
pfont
ref_assign(&pdata->u.type42.sfnts, &sfnts);
ref_assign(&pdata->u.type42.sfnts, &sfnts)
ref_assign
ref_assign
&pdata->u.type42.sfnts
pdata->u.type42.sfnts
pdata->u.type42
pdata->u
pdata
pdata
u
type42
sfnts
&sfnts
sfnts
sfnts
pdata->u.type42.mru_sfnts_index = 0;
pdata->u.type42.mru_sfnts_index = 0
pdata->u.type42.mru_sfnts_index
pdata->u.type42
pdata->u
pdata
pdata
u
type42
mru_sfnts_index
0
pdata->u.type42.mru_sfnts_pos = 0;
pdata->u.type42.mru_sfnts_pos = 0
pdata->u.type42.mru_sfnts_pos
pdata->u.type42
pdata->u
pdata
pdata
u
type42
mru_sfnts_pos
0
make_null_new(&pdata->u.type42.CIDMap);
make_null_new(&pdata->u.type42.CIDMap)
make_null_new
make_null_new
&pdata->u.type42.CIDMap
pdata->u.type42.CIDMap
pdata->u.type42
pdata->u
pdata
pdata
u
type42
CIDMap
ref_assign(&pdata->u.type42.GlyphDirectory, &GlyphDirectory);
ref_assign(&pdata->u.type42.GlyphDirectory, &GlyphDirectory)
ref_assign
ref_assign
&pdata->u.type42.GlyphDirectory
pdata->u.type42.GlyphDirectory
pdata->u.type42
pdata->u
pdata
pdata
u
type42
GlyphDirectory
&GlyphDirectory
GlyphDirectory
GlyphDirectory
pfont->data.string_proc = z42_string_proc;
pfont->data.string_proc = z42_string_proc
pfont->data.string_proc
pfont->data
pfont
pfont
data
string_proc
z42_string_proc
z42_string_proc
pfont->data.proc_data = (char *)pdata;
pfont->data.proc_data = (char *)pdata
pfont->data.proc_data
pfont->data
pfont
pfont
data
proc_data
(char *)pdata
char *
char
*
*
pdata
pdata
pfont->is_resource = (options & bf_has_font_file ? true : false);
pfont->is_resource = (options & bf_has_font_file ? true : false)
pfont->is_resource
pfont
pfont
is_resource
(options & bf_has_font_file ? true : false)
options & bf_has_font_file ? true : false
options & bf_has_font_file
options
options
bf_has_font_file
bf_has_font_file
true
false
code = gs_type42_font_init(pfont, 0);
code = gs_type42_font_init(pfont, 0)
code
code
gs_type42_font_init(pfont, 0)
gs_type42_font_init
gs_type42_font_init
pfont
pfont
0
if (code < 0)	return code;
code < 0
code
code
0
return code;
code
code
pfont->procs.font_info = z42_font_info;
pfont->procs.font_info = z42_font_info
pfont->procs.font_info
pfont->procs
pfont
pfont
procs
font_info
z42_font_info
z42_font_info
if (!r_has_type(&GlyphDirectory, t_null)) {	pfont->data.get_outline = z42_gdir_get_outline;	pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph;    } else	pfont->procs.enumerate_glyph = z42_enumerate_glyph;
!r_has_type(&GlyphDirectory, t_null)
r_has_type(&GlyphDirectory, t_null)
r_has_type
r_has_type
&GlyphDirectory
GlyphDirectory
GlyphDirectory
t_null
t_null
{	pfont->data.get_outline = z42_gdir_get_outline;	pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph;    }
pfont->data.get_outline = z42_gdir_get_outline;
pfont->data.get_outline = z42_gdir_get_outline
pfont->data.get_outline
pfont->data
pfont
pfont
data
get_outline
z42_gdir_get_outline
z42_gdir_get_outline
pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph;
pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph
pfont->procs.enumerate_glyph
pfont->procs
pfont
pfont
procs
enumerate_glyph
z42_gdir_enumerate_glyph
z42_gdir_enumerate_glyph
pfont->procs.enumerate_glyph = z42_enumerate_glyph;
pfont->procs.enumerate_glyph = z42_enumerate_glyph
pfont->procs.enumerate_glyph
pfont->procs
pfont
pfont
procs
enumerate_glyph
z42_enumerate_glyph
z42_enumerate_glyph
pfont->data.get_glyph_index = z42_get_glyph_index;
pfont->data.get_glyph_index = z42_get_glyph_index
pfont->data.get_glyph_index
pfont->data
pfont
pfont
data
get_glyph_index
z42_get_glyph_index
z42_get_glyph_index
pfont->data.substitute_glyph_index_vertical = gs_type42_substitute_glyph_index_vertical;
pfont->data.substitute_glyph_index_vertical = gs_type42_substitute_glyph_index_vertical
pfont->data.substitute_glyph_index_vertical
pfont->data
pfont
pfont
data
substitute_glyph_index_vertical
gs_type42_substitute_glyph_index_vertical
gs_type42_substitute_glyph_index_vertical
pfont->procs.encode_char = z42_encode_char;
pfont->procs.encode_char = z42_encode_char
pfont->procs.encode_char
pfont->procs
pfont
pfont
procs
encode_char
z42_encode_char
z42_encode_char
pfont->procs.glyph_info = z42_glyph_info;
pfont->procs.glyph_info = z42_glyph_info
pfont->procs.glyph_info
pfont->procs
pfont
pfont
procs
glyph_info
z42_glyph_info
z42_glyph_info
pfont->procs.glyph_outline = z42_glyph_outline;
pfont->procs.glyph_outline = z42_glyph_outline
pfont->procs.glyph_outline
pfont->procs
pfont
pfont
procs
glyph_outline
z42_glyph_outline
z42_glyph_outline
return 0;
0
-----joern-----
(127,104,0)
(214,165,0)
(12,72,0)
(66,158,0)
(144,49,0)
(142,66,0)
(201,15,0)
(24,214,0)
(189,74,0)
(65,45,0)
(50,60,0)
(204,15,0)
(165,141,0)
(205,13,0)
(83,185,0)
(205,140,0)
(106,155,0)
(157,60,0)
(214,24,0)
(108,136,0)
(218,75,0)
(70,207,0)
(186,60,0)
(4,58,0)
(110,73,0)
(197,60,0)
(41,224,0)
(149,194,0)
(150,21,0)
(37,219,0)
(145,10,0)
(4,108,0)
(66,106,0)
(14,131,0)
(109,95,0)
(62,114,0)
(42,165,0)
(82,160,0)
(46,49,0)
(32,146,0)
(207,24,0)
(38,123,0)
(40,103,0)
(130,131,0)
(220,195,0)
(231,54,0)
(176,166,0)
(56,24,0)
(74,189,0)
(156,185,0)
(148,106,0)
(172,74,0)
(154,205,0)
(172,198,0)
(233,94,0)
(228,91,0)
(190,189,0)
(21,150,0)
(139,197,0)
(114,81,0)
(172,9,0)
(66,142,0)
(59,191,0)
(72,12,0)
(108,4,0)
(212,199,0)
(166,60,0)
(133,36,0)
(123,80,0)
(193,41,0)
(101,12,0)
(23,168,0)
(31,196,0)
(122,145,0)
(95,219,0)
(93,150,0)
(208,42,0)
(173,141,0)
(147,53,0)
(63,60,0)
(45,136,0)
(45,29,0)
(115,95,0)
(223,157,0)
(52,182,0)
(213,168,0)
(203,52,0)
(211,17,0)
(169,165,0)
(211,126,0)
(195,129,0)
(0,194,0)
(172,217,0)
(179,155,0)
(125,153,0)
(49,93,0)
(140,169,0)
(145,180,0)
(239,152,0)
(174,206,0)
(119,135,0)
(58,60,0)
(73,229,0)
(172,94,0)
(168,76,0)
(182,52,0)
(53,165,0)
(224,41,0)
(103,165,0)
(1,142,0)
(93,49,0)
(211,172,0)
(150,60,0)
(98,46,0)
(120,230,0)
(10,145,0)
(114,184,0)
(172,4,0)
(191,59,0)
(185,230,0)
(100,95,0)
(20,95,0)
(191,36,0)
(161,171,0)
(172,29,0)
(18,135,0)
(226,60,0)
(46,53,0)
(186,145,0)
(92,53,0)
(170,9,0)
(84,66,0)
(104,136,0)
(71,103,0)
(94,153,0)
(30,95,0)
(167,182,0)
(88,184,0)
(15,201,0)
(115,229,0)
(39,222,0)
(159,195,0)
(184,114,0)
(155,149,0)
(222,136,0)
(128,21,0)
(85,189,0)
(55,220,0)
(111,81,0)
(102,60,0)
(13,60,0)
(232,66,0)
(131,130,0)
(44,115,0)
(99,66,0)
(152,157,0)
(95,76,0)
(162,95,0)
(236,106,0)
(91,9,0)
(152,239,0)
(237,60,0)
(95,64,0)
(49,46,0)
(215,109,0)
(235,36,0)
(148,184,0)
(199,60,0)
(198,104,0)
(129,136,0)
(34,165,0)
(188,136,0)
(138,169,0)
(9,197,0)
(153,94,0)
(136,60,0)
(18,222,0)
(181,214,0)
(68,131,0)
(230,185,0)
(41,60,0)
(72,221,0)
(106,66,0)
(187,91,0)
(131,165,0)
(25,153,0)
(24,207,0)
(141,165,0)
(211,148,0)
(95,158,0)
(184,194,0)
(59,60,0)
(28,214,0)
(36,191,0)
(91,136,0)
(27,115,0)
(124,104,0)
(164,16,0)
(219,95,0)
(155,106,0)
(67,186,0)
(94,75,0)
(113,13,0)
(172,201,0)
(210,129,0)
(143,235,0)
(48,4,0)
(43,60,0)
(169,140,0)
(185,136,0)
(15,103,0)
(192,146,0)
(29,6,0)
(134,169,0)
(79,239,0)
(222,18,0)
(132,176,0)
(171,60,0)
(209,60,0)
(225,58,0)
(54,231,0)
(116,60,0)
(89,6,0)
(136,73,0)
(96,222,0)
(3,198,0)
(115,44,0)
(194,149,0)
(195,60,0)
(182,136,0)
(36,235,0)
(78,108,0)
(81,114,0)
(47,148,0)
(234,10,0)
(33,12,0)
(240,145,0)
(16,54,0)
(238,74,0)
(73,136,0)
(146,186,0)
(216,152,0)
(52,123,0)
(149,155,0)
(2,117,0)
(29,45,0)
(137,217,0)
(53,46,0)
(202,45,0)
(95,112,0)
(26,176,0)
(42,235,0)
(95,109,0)
(183,17,0)
(140,205,0)
(172,18,0)
(172,72,0)
(175,95,0)
(103,15,0)
(105,126,0)
(77,60,0)
(172,52,0)
(198,68,0)
(239,136,0)
(194,184,0)
(107,239,0)
(7,220,0)
(172,152,0)
(163,201,0)
(114,158,0)
(61,145,0)
(135,80,0)
(51,60,0)
(8,18,0)
(221,60,0)
(12,136,0)
(230,117,0)
(172,205,0)
(141,136,0)
(160,219,0)
(17,219,0)
(199,196,0)
(172,230,0)
(104,198,0)
(145,5,0)
(54,16,0)
(129,195,0)
(11,129,0)
(150,93,0)
(153,136,0)
(217,166,0)
(87,186,0)
(95,115,0)
(19,182,0)
(217,136,0)
(6,60,0)
(200,160,0)
(219,60,0)
(97,42,0)
(90,221,0)
(69,54,0)
(227,108,0)
(126,195,0)
(74,206,0)
(95,178,0)
(176,168,0)
(22,140,0)
(151,172,0)
(207,212,0)
(118,67,0)
(57,72,0)
(68,60,0)
(189,136,0)
(199,212,0)
(224,158,0)
(165,60,0)
(35,224,0)
(211,67,0)
(131,68,0)
(168,176,0)
(75,60,0)
(177,60,0)
(196,199,0)
(86,29,0)
(172,60,0)
(121,217,0)
(9,91,0)
(201,171,0)
(166,176,0)
(235,42,0)
(145,186,0)
(212,207,0)
(206,60,0)
(75,218,1)
(117,2,1)
(70,24,1)
(211,126,1)
(73,229,1)
(135,119,1)
(239,107,1)
(222,39,1)
(149,155,1)
(197,139,1)
(83,231,1)
(110,188,1)
(151,197,1)
(91,187,1)
(128,93,1)
(65,202,1)
(172,151,1)
(193,224,1)
(72,57,1)
(200,82,1)
(12,136,1)
(58,225,1)
(20,37,1)
(228,58,1)
(159,166,1)
(191,36,1)
(217,137,1)
(67,186,1)
(182,136,1)
(204,103,1)
(145,5,1)
(107,79,1)
(166,176,1)
(98,53,1)
(206,174,1)
(160,219,1)
(22,169,1)
(141,173,1)
(8,222,1)
(173,34,1)
(196,31,1)
(198,3,1)
(25,135,1)
(134,138,1)
(185,156,1)
(235,42,1)
(136,73,1)
(149,194,1)
(236,41,1)
(105,220,1)
(17,183,1)
(163,15,1)
(99,232,1)
(36,235,1)
(49,46,1)
(53,147,1)
(26,168,1)
(213,217,1)
(74,238,1)
(222,136,1)
(190,85,1)
(214,181,1)
(111,62,1)
(95,178,1)
(95,76,1)
(164,6,1)
(59,191,1)
(145,180,1)
(150,21,1)
(108,136,1)
(155,106,1)
(2,230,1)
(208,97,1)
(157,223,1)
(139,9,1)
(42,165,1)
(143,42,1)
(39,96,1)
(92,59,1)
(46,98,1)
(227,78,1)
(137,121,1)
(207,24,1)
(194,184,1)
(176,168,1)
(49,144,1)
(95,112,1)
(225,4,1)
(52,203,1)
(202,220,1)
(12,33,1)
(215,175,1)
(73,110,1)
(38,52,1)
(184,114,1)
(9,91,1)
(223,152,1)
(201,163,1)
(238,189,1)
(6,89,1)
(198,104,1)
(113,205,1)
(172,74,1)
(183,160,1)
(150,93,1)
(48,108,1)
(41,193,1)
(127,157,1)
(97,171,1)
(182,167,1)
(129,136,1)
(162,115,1)
(17,219,1)
(168,23,1)
(211,67,1)
(172,52,1)
(45,65,1)
(34,136,1)
(94,153,1)
(210,11,1)
(119,18,1)
(181,28,1)
(91,136,1)
(71,13,1)
(172,198,1)
(148,106,1)
(37,149,1)
(28,165,1)
(115,27,1)
(32,192,1)
(41,224,1)
(19,231,1)
(55,7,1)
(172,230,1)
(185,136,1)
(216,239,1)
(72,12,1)
(79,150,1)
(176,26,1)
(95,64,1)
(53,165,1)
(172,18,1)
(108,227,1)
(95,30,1)
(232,236,1)
(145,240,1)
(233,153,1)
(33,101,1)
(89,29,1)
(61,87,1)
(18,222,1)
(35,146,1)
(172,205,1)
(129,210,1)
(240,122,1)
(66,142,1)
(106,66,1)
(114,81,1)
(169,134,1)
(234,61,1)
(219,95,1)
(187,228,1)
(23,213,1)
(140,22,1)
(121,68,1)
(74,189,1)
(172,9,1)
(78,221,1)
(172,94,1)
(109,215,1)
(148,184,1)
(192,186,1)
(52,182,1)
(144,46,1)
(69,16,1)
(195,129,1)
(171,161,1)
(133,235,1)
(95,115,1)
(138,199,1)
(94,233,1)
(86,45,1)
(161,201,1)
(24,56,1)
(100,20,1)
(54,16,1)
(126,195,1)
(14,198,1)
(132,168,1)
(189,190,1)
(148,47,1)
(103,165,1)
(141,136,1)
(217,136,1)
(152,216,1)
(154,140,1)
(146,186,1)
(155,179,1)
(123,38,1)
(221,90,1)
(160,200,1)
(172,72,1)
(115,229,1)
(85,75,1)
(211,172,1)
(179,106,1)
(11,159,1)
(169,165,1)
(214,165,1)
(189,136,1)
(218,94,1)
(220,55,1)
(15,204,1)
(212,207,1)
(88,155,1)
(101,206,1)
(25,117,1)
(29,45,1)
(199,212,1)
(172,217,1)
(104,124,1)
(224,158,1)
(36,133,1)
(131,14,1)
(239,136,1)
(1,84,1)
(126,105,1)
(18,8,1)
(172,29,1)
(152,239,1)
(145,10,1)
(0,184,1)
(131,165,1)
(131,130,1)
(4,48,1)
(140,169,1)
(67,118,1)
(82,219,1)
(147,92,1)
(230,120,1)
(27,100,1)
(54,69,1)
(66,158,1)
(68,131,1)
(153,125,1)
(120,185,1)
(211,148,1)
(15,103,1)
(62,88,1)
(81,111,1)
(31,212,1)
(118,146,1)
(207,70,1)
(194,0,1)
(156,83,1)
(205,140,1)
(30,109,1)
(203,182,1)
(172,201,1)
(40,71,1)
(84,99,1)
(230,185,1)
(170,91,1)
(199,196,1)
(47,149,1)
(205,154,1)
(211,17,1)
(16,164,1)
(176,132,1)
(57,12,1)
(95,158,1)
(172,4,1)
(125,25,1)
(56,214,1)
(7,195,1)
(220,195,1)
(175,162,1)
(188,160,1)
(153,136,1)
(90,72,1)
(146,32,1)
(46,53,1)
(93,49,1)
(114,158,1)
(42,208,1)
(224,35,1)
(165,141,1)
(235,143,1)
(231,54,1)
(95,109,1)
(4,108,1)
(201,15,1)
(186,145,1)
(142,1,1)
(96,123,1)
(9,170,1)
(13,113,1)
(45,136,1)
(103,40,1)
(10,234,1)
(167,19,1)
(24,214,1)
(168,76,1)
(104,136,1)
(3,104,1)
(21,128,1)
(172,152,1)
(29,86,1)
(124,127,1)
(122,10,1)
(174,74,1)
(115,44,1)
(96,231,2)
(184,155,2)
(199,160,2)
(3,160,2)
(141,160,2)
(152,160,2)
(28,160,2)
(185,136,2)
(217,160,2)
(194,184,2)
(119,231,2)
(73,160,2)
(191,160,2)
(36,235,2)
(203,231,2)
(140,169,2)
(95,64,2)
(128,160,2)
(46,53,2)
(109,149,2)
(195,160,2)
(172,94,2)
(188,160,2)
(172,205,2)
(124,160,2)
(196,160,2)
(16,220,2)
(114,158,2)
(227,220,2)
(18,231,2)
(175,149,2)
(104,136,2)
(31,160,2)
(179,146,2)
(4,220,2)
(211,172,2)
(161,160,2)
(194,155,2)
(219,95,2)
(1,146,2)
(211,126,2)
(153,220,2)
(95,178,2)
(199,196,2)
(95,76,2)
(95,158,2)
(222,231,2)
(106,66,2)
(72,12,2)
(214,160,2)
(205,140,2)
(118,146,2)
(172,201,2)
(114,155,2)
(140,160,2)
(137,160,2)
(172,74,2)
(93,49,2)
(97,160,2)
(113,160,2)
(146,186,2)
(54,16,2)
(11,160,2)
(6,220,2)
(17,219,2)
(74,189,2)
(212,160,2)
(7,160,2)
(225,220,2)
(171,160,2)
(187,220,2)
(155,106,2)
(197,220,2)
(148,149,2)
(65,220,2)
(4,108,2)
(36,160,2)
(224,146,2)
(95,149,2)
(166,176,2)
(210,160,2)
(14,160,2)
(216,160,2)
(129,160,2)
(92,160,2)
(101,220,2)
(193,146,2)
(20,149,2)
(78,220,2)
(30,149,2)
(199,212,2)
(84,146,2)
(131,165,2)
(120,231,2)
(230,185,2)
(75,220,2)
(223,160,2)
(189,136,2)
(172,4,2)
(231,220,2)
(148,184,2)
(167,231,2)
(66,158,2)
(115,229,2)
(168,76,2)
(136,73,2)
(54,220,2)
(53,160,2)
(17,160,2)
(29,220,2)
(148,106,2)
(24,160,2)
(82,149,2)
(220,160,2)
(115,44,2)
(73,229,2)
(21,160,2)
(218,220,2)
(67,146,2)
(168,160,2)
(95,109,2)
(59,160,2)
(22,160,2)
(129,136,2)
(162,149,2)
(103,160,2)
(160,219,2)
(150,93,2)
(33,220,2)
(8,231,2)
(56,160,2)
(23,160,2)
(15,103,2)
(222,136,2)
(106,146,2)
(42,160,2)
(172,152,2)
(41,224,2)
(89,220,2)
(71,160,2)
(57,220,2)
(40,160,2)
(27,149,2)
(144,160,2)
(215,149,2)
(12,136,2)
(232,146,2)
(12,220,2)
(145,180,2)
(69,220,2)
(172,52,2)
(46,160,2)
(145,10,2)
(228,220,2)
(100,149,2)
(150,21,2)
(83,231,2)
(220,195,2)
(123,231,2)
(131,160,2)
(114,81,2)
(45,220,2)
(172,217,2)
(94,153,2)
(25,220,2)
(37,149,2)
(172,18,2)
(85,220,2)
(47,149,2)
(133,160,2)
(182,231,2)
(235,160,2)
(134,160,2)
(202,220,2)
(213,160,2)
(155,146,2)
(0,155,2)
(219,149,2)
(72,220,2)
(198,104,2)
(135,231,2)
(233,220,2)
(104,160,2)
(62,155,2)
(191,36,2)
(172,198,2)
(176,160,2)
(183,160,2)
(172,230,2)
(26,168,2)
(9,91,2)
(49,46,2)
(208,160,2)
(105,220,2)
(172,29,2)
(231,54,2)
(103,165,2)
(141,136,2)
(98,160,2)
(58,220,2)
(207,160,2)
(121,160,2)
(38,231,2)
(55,160,2)
(95,112,2)
(182,136,2)
(238,220,2)
(189,220,2)
(34,160,2)
(224,158,2)
(173,160,2)
(115,149,2)
(88,155,2)
(149,146,2)
(93,160,2)
(169,160,2)
(139,220,2)
(145,5,2)
(13,160,2)
(95,115,2)
(53,165,2)
(45,136,2)
(117,231,2)
(9,220,2)
(99,146,2)
(165,160,2)
(211,17,2)
(230,231,2)
(166,160,2)
(19,231,2)
(211,148,2)
(126,195,2)
(108,136,2)
(142,146,2)
(160,149,2)
(186,145,2)
(127,160,2)
(185,231,2)
(81,155,2)
(67,186,2)
(204,160,2)
(221,220,2)
(131,130,2)
(165,141,2)
(52,182,2)
(149,155,2)
(239,136,2)
(91,220,2)
(91,136,2)
(174,220,2)
(157,160,2)
(149,194,2)
(236,146,2)
(181,160,2)
(176,168,2)
(151,220,2)
(212,207,2)
(59,191,2)
(172,220,2)
(143,160,2)
(156,231,2)
(111,155,2)
(70,160,2)
(184,114,2)
(138,160,2)
(68,131,2)
(163,160,2)
(198,160,2)
(201,15,2)
(159,160,2)
(66,146,2)
(110,160,2)
(79,160,2)
(35,146,2)
(207,24,2)
(164,220,2)
(86,220,2)
(169,165,2)
(190,220,2)
(153,136,2)
(172,9,2)
(201,160,2)
(132,168,2)
(18,222,2)
(147,160,2)
(126,220,2)
(235,42,2)
(152,239,2)
(42,165,2)
(172,72,2)
(108,220,2)
(66,142,2)
(2,231,2)
(214,165,2)
(150,160,2)
(217,136,2)
(68,160,2)
(90,220,2)
(200,149,2)
(239,160,2)
(211,67,2)
(94,220,2)
(24,214,2)
(48,220,2)
(107,160,2)
(29,45,2)
(136,160,2)
(49,160,2)
(39,231,2)
(74,220,2)
(15,160,2)
(154,160,2)
(125,220,2)
(52,231,2)
(195,129,2)
(206,220,2)
(170,220,2)
(41,146,2)
(205,160,2)
-----------------------------------
(0,0)
(1,sfnts)
(2,z42_enumerate_glyph)
(3,proc_data)
(4,pfont->procs.glyph_info)
(5,const char *bgstr)
(6,pfont->procs.font_info = z42_font_info)
(7,code)
(8,enumerate_glyph)
(9,pfont->procs.glyph_outline)
(10,&build)
(11,pfont)
(12,pfont->procs)
(13,pdata->u.type42.mru_sfnts_index = 0)
(14,pdata)
(15,pdata->u.type42)
(16,&GlyphDirectory)
(17,return code;)
(18,pfont->procs.enumerate_glyph)
(19,pfont)
(20,i_ctx_p)
(21,&GlyphDirectory)
(22,type42)
(23,bf_has_font_file)
(24,pdata->u.type42)
(25,pfont)
(26,true)
(27,ppfont)
(28,pdata)
(29,pfont->procs.font_info)
(30,options)
(31,sfnts)
(32,0)
(33,procs)
(34,pdata)
(35,op)
(36,pdata->u.type42.CIDMap)
(37,code)
(38,z42_gdir_get_outline)
(39,procs)
(40,u)
(41,check_type(*op, t_dictionary)
(42,pdata->u)
(43,build)
(44,gs_font_base **)
(45,pfont->procs)
(46,pdata->u.type42)
(47,code)
(48,glyph_info)
(49,pdata->u.type42.GlyphDirectory)
(50,pdata)
(51,GlyphDirectory)
(52,pfont->data.get_outline)
(53,pdata->u)
(54,r_has_type(&GlyphDirectory, t_null)
(55,0)
(56,type42)
(57,encode_char)
(58,pfont->procs.glyph_info = z42_glyph_info)
(59,make_null_new(&pdata->u.type42.CIDMap)
(60,)
(61,imemory)
(62,op)
(63,code)
(64,i_ctx_t *i_ctx_p)
(65,procs)
(66,font_string_array_param(imemory, op, "sfnts", &sfnts)
(67,return code;)
(68,pfont->data.proc_data = (char *)
(69,t_null)
(70,sfnts)
(71,pdata)
(72,pfont->procs.encode_char)
(73,*ppfont)
(74,pfont->data.substitute_glyph_index_vertical)
(75,pfont->data.get_glyph_index = z42_get_glyph_index)
(76,build_font_options_t options)
(77,if ((code = font_string_array_param(imemory, op, "sfnts", &sfnts)
(78,pfont)
(79,pfont)
(80,)
(81,&GlyphDirectory)
(82,code)
(83,pfont)
(84,"sfnts")
(85,pfont)
(86,font_info)
(87,code)
(88,code)
(89,z42_font_info)
(90,z42_encode_char)
(91,pfont->procs)
(92,pdata)
(93,&pdata->u.type42.GlyphDirectory)
(94,pfont->data.get_glyph_index)
(95,build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)
(96,pfont)
(97,pdata)
(98,type42)
(99,op)
(100,op)
(101,pfont)
(102,sfnts)
(103,pdata->u)
(104,pfont->data)
(105,code)
(106,code = font_string_array_param(imemory, op, "sfnts", &sfnts)
(107,data)
(108,pfont->procs)
(109,&build)
(110,ppfont)
(111,GlyphDirectory)
(112,gs_memory_type_ptr_t pstype)
(113,0)
(114,font_GlyphDirectory_param(op, &GlyphDirectory)
(115,(gs_font_base **)
(116,if (!r_has_type(&GlyphDirectory, t_null)
(117,pfont->procs.enumerate_glyph = z42_enumerate_glyph)
(118,code)
(119,z42_gdir_enumerate_glyph)
(120,enumerate_glyph)
(121,pfont)
(122,bcstr)
(123,pfont->data.get_outline = z42_gdir_get_outline)
(124,data)
(125,data)
(126,return code;)
(127,pfont)
(128,GlyphDirectory)
(129,gs_type42_font_init(pfont, 0)
(130,char *)
(131,(char *)
(132,false)
(133,CIDMap)
(134,u)
(135,pfont->procs.enumerate_glyph = z42_gdir_enumerate_glyph)
(136,pfont = *ppfont)
(137,is_resource)
(138,pdata)
(139,z42_glyph_outline)
(140,pdata->u.type42)
(141,pfont_data(pfont)
(142,&sfnts)
(143,type42)
(144,GlyphDirectory)
(145,build_proc_name_refs(imemory, &build, bcstr, bgstr)
(146,code < 0)
(147,u)
(148,return code;)
(149,(code = font_string_array_param(imemory, op, "sfnts", &sfnts)
(150,ref_assign(&pdata->u.type42.GlyphDirectory, &GlyphDirectory)
(151,0)
(152,pfont->data.string_proc)
(153,pfont->data)
(154,mru_sfnts_index)
(155,(code = font_string_array_param(imemory, op, "sfnts", &sfnts)
(156,procs)
(157,pfont->data.string_proc = z42_string_proc)
(158,os_ptr op)
(159,code)
(160,code != 0)
(161,0)
(162,ftype)
(163,mru_sfnts_pos)
(164,GlyphDirectory)
(165,pdata = pfont_data(pfont)
(166,pfont->is_resource = (options & bf_has_font_file ? true : false)
(167,data)
(168,options & bf_has_font_file)
(169,pdata->u)
(170,glyph_outline)
(171,pdata->u.type42.mru_sfnts_pos = 0)
(172,return 0;)
(173,pfont)
(174,gs_type42_substitute_glyph_index_vertical)
(175,pstype)
(176,options & bf_has_font_file ? true : false)
(177,pfont)
(178,font_type ftype)
(179,0)
(180,const char *bcstr)
(181,u)
(182,pfont->data)
(183,code)
(184,code = font_GlyphDirectory_param(op, &GlyphDirectory)
(185,pfont->procs)
(186,code = build_proc_name_refs(imemory, &build, bcstr, bgstr)
(187,procs)
(188,pfont)
(189,pfont->data)
(190,data)
(191,&pdata->u.type42.CIDMap)
(192,code)
(193,t_dictionary)
(194,(code = font_GlyphDirectory_param(op, &GlyphDirectory)
(195,code = gs_type42_font_init(pfont, 0)
(196,&sfnts)
(197,pfont->procs.glyph_outline = z42_glyph_outline)
(198,pfont->data.proc_data)
(199,ref_assign(&pdata->u.type42.sfnts, &sfnts)
(200,0)
(201,pdata->u.type42.mru_sfnts_pos)
(202,pfont)
(203,get_outline)
(204,type42)
(205,pdata->u.type42.mru_sfnts_index)
(206,pfont->data.substitute_glyph_index_vertical = gs_type42_substitute_glyph_index_vertical)
(207,pdata->u.type42.sfnts)
(208,u)
(209,if (code != 0)
(210,0)
(211,RET)
(212,&pdata->u.type42.sfnts)
(213,options)
(214,pdata->u)
(215,build)
(216,string_proc)
(217,pfont->is_resource)
(218,z42_get_glyph_index)
(219,code = build_gs_primitive_font(i_ctx_p, op, (gs_font_base **)
(220,code < 0)
(221,pfont->procs.encode_char = z42_encode_char)
(222,pfont->procs)
(223,z42_string_proc)
(224,*op)
(225,z42_glyph_info)
(226,if (code < 0)
(227,procs)
(228,pfont)
(229,gs_font_type42 **ppfont)
(230,pfont->procs.enumerate_glyph)
(231,!r_has_type(&GlyphDirectory, t_null)
(232,imemory)
(233,get_glyph_index)
(234,build)
(235,pdata->u.type42)
(236,code)
(237,if (code < 0)
(238,substitute_glyph_index_vertical)
(239,pfont->data)
(240,bgstr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^