-----label-----
1
-----code-----
int copy_thread(unsigned long clone_flags, unsigned long new_stackp,
		unsigned long arg, struct task_struct *p)
{
	struct thread_info *ti;
	struct fake_frame
	{
		struct stack_frame sf;
		struct pt_regs childregs;
	} *frame;

	frame = container_of(task_pt_regs(p), struct fake_frame, childregs);
	p->thread.ksp = (unsigned long) frame;
	/* Save access registers to new thread structure. */
	save_access_regs(&p->thread.acrs[0]);
	/* start new process with ar4 pointing to the correct address space */
	p->thread.mm_segment = get_fs();
	/* Don't copy debug registers */
	memset(&p->thread.per_user, 0, sizeof(p->thread.per_user));
	memset(&p->thread.per_event, 0, sizeof(p->thread.per_event));
	clear_tsk_thread_flag(p, TIF_SINGLE_STEP);
	p->thread.per_flags = 0;
	/* Initialize per thread user and system timer values */
	ti = task_thread_info(p);
	ti->user_timer = 0;
	ti->system_timer = 0;

	frame->sf.back_chain = 0;
	/* new return point is ret_from_fork */
	frame->sf.gprs[8] = (unsigned long) ret_from_fork;
	/* fake return stack for resume(), don't go back to schedule */
	frame->sf.gprs[9] = (unsigned long) frame;

	/* Store access registers to kernel stack of new process. */
	if (unlikely(p->flags & PF_KTHREAD)) {
		/* kernel thread */
		memset(&frame->childregs, 0, sizeof(struct pt_regs));
		frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |
				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;
		frame->childregs.psw.addr = PSW_ADDR_AMODE |
				(unsigned long) kernel_thread_starter;
		frame->childregs.gprs[9] = new_stackp; /* function */
		frame->childregs.gprs[10] = arg;
		frame->childregs.gprs[11] = (unsigned long) do_exit;
		frame->childregs.orig_gpr2 = -1;

		return 0;
	}
	frame->childregs = *current_pt_regs();
	frame->childregs.gprs[2] = 0;	/* child returns 0 on fork. */
	frame->childregs.flags = 0;
	if (new_stackp)
		frame->childregs.gprs[15] = new_stackp;

	/* Don't copy runtime instrumentation info */
	p->thread.ri_cb = NULL;
	frame->childregs.psw.mask &= ~PSW_MASK_RI;

	/* Set a new TLS ?  */
	if (clone_flags & CLONE_SETTLS) {
		unsigned long tls = frame->childregs.gprs[6];
		if (is_compat_task()) {
			p->thread.acrs[0] = (unsigned int)tls;
		} else {
			p->thread.acrs[0] = (unsigned int)(tls >> 32);
			p->thread.acrs[1] = (unsigned int)tls;
		}
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
9,10
9,11
11,12
13,14
13,15
15,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
23,42
23,43
23,44
23,45
23,46
23,47
23,48
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
33,35
33,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
45,46
45,47
48,49
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
57,58
57,59
58,59
58,60
61,62
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
78,80
79,80
79,81
80,81
84,85
85,86
87,88
88,89
88,90
88,91
88,92
89,90
91,92
92,93
92,94
93,94
93,95
94,95
99,100
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
108,111
108,112
109,110
111,112
112,113
112,114
113,114
113,115
114,115
119,120
120,121
121,122
121,123
122,123
122,124
123,124
127,128
128,129
128,130
128,131
129,130
131,132
133,134
135,136
136,137
136,138
137,138
137,139
138,139
138,140
139,140
144,145
145,146
145,147
146,147
148,149
148,150
149,150
151,152
153,154
154,155
154,156
155,156
155,157
156,157
160,161
161,162
161,163
162,163
162,164
163,164
167,168
168,169
168,170
169,170
169,171
170,171
170,172
171,172
176,177
177,178
177,179
178,179
178,180
179,180
179,181
180,181
180,182
181,182
186,187
186,188
187,188
187,189
190,191
192,193
193,194
193,195
194,195
194,196
195,196
195,197
196,197
196,198
197,198
202,203
202,204
203,204
203,205
206,207
208,209
208,210
209,210
209,211
210,211
212,213
212,214
213,214
213,215
214,215
217,218
219,220
219,221
219,222
219,223
219,224
219,225
219,226
219,227
220,221
221,222
221,223
221,224
221,225
222,223
224,225
225,226
225,227
226,227
230,231
231,232
231,233
232,233
235,236
236,237
236,238
237,238
237,239
238,239
238,240
239,240
239,241
240,241
245,246
245,247
246,247
246,248
247,248
247,249
248,249
248,250
249,250
251,252
253,254
255,256
257,258
259,260
260,261
260,262
261,262
261,263
262,263
262,264
263,264
263,265
264,265
269,270
269,271
270,271
272,273
272,274
273,274
273,275
276,277
278,279
279,280
279,281
280,281
280,282
281,282
281,283
282,283
282,284
283,284
288,289
290,291
291,292
291,293
292,293
292,294
293,294
293,295
294,295
294,296
295,296
300,301
302,303
303,304
303,305
304,305
304,306
305,306
305,307
306,307
306,308
307,308
312,313
312,314
313,314
313,315
316,317
318,319
319,320
319,321
320,321
320,322
321,322
321,323
322,323
326,327
328,329
330,331
331,332
331,333
332,333
332,334
333,334
336,337
337,338
338,339
340,341
341,342
341,343
342,343
342,344
343,344
343,345
344,345
344,346
345,346
351,352
352,353
352,354
353,354
353,355
354,355
354,356
355,356
360,361
360,362
361,362
363,364
364,365
364,366
365,366
365,367
366,367
366,368
367,368
367,369
368,369
373,374
375,376
376,377
376,378
377,378
377,379
378,379
378,380
379,380
383,384
385,386
386,387
386,388
387,388
387,389
388,389
388,390
389,390
389,391
390,391
395,396
396,397
398,399
398,400
399,400
399,401
400,401
402,403
404,405
404,406
405,406
406,407
406,408
408,409
408,410
410,411
411,412
411,413
412,413
412,414
413,414
413,415
414,415
419,420
419,421
419,422
420,421
421,422
423,424
424,425
425,426
425,427
426,427
426,428
427,428
427,429
428,429
428,430
429,430
434,435
434,436
435,436
435,437
438,439
440,441
440,442
441,442
442,443
442,444
443,444
443,445
444,445
444,446
445,446
445,447
446,447
451,452
451,453
452,453
452,454
455,456
456,457
456,458
457,458
460,461
461,462
461,463
462,463
462,464
463,464
463,465
464,465
464,466
465,466
470,471
470,472
471,472
471,473
474,475
476,477
-----nextToken-----
2,4,6,8,10,12,14,16,19,21,22,27,29,30,34,37,39,42,44,46,47,54,55,56,59,60,62,66,72,73,74,75,81,82,83,86,90,95,96,97,98,104,105,106,110,115,116,117,118,124,125,126,130,132,134,140,141,142,143,147,150,152,157,158,159,164,165,166,172,173,174,175,182,183,184,185,188,189,191,198,199,200,201,204,205,207,211,215,216,218,223,227,228,229,233,234,241,242,243,244,250,252,254,256,258,265,266,267,268,271,274,275,277,284,285,286,287,289,296,297,298,299,301,308,309,310,311,314,315,317,323,324,325,327,329,334,335,339,346,347,348,349,350,356,357,358,359,362,369,370,371,372,374,380,381,382,384,391,392,393,394,397,401,403,407,409,415,416,417,418,422,430,431,432,433,436,437,439,447,448,449,450,453,454,458,459,466,467,468,469,472,473,475,477
-----computeFrom-----
50,51
50,52
77,78
77,79
136,137
136,138
145,146
145,147
154,155
154,156
161,162
161,163
168,169
168,170
177,178
177,179
193,194
193,195
212,213
212,214
236,237
236,238
245,246
245,247
246,247
246,248
247,248
247,249
248,249
248,250
260,261
260,262
269,270
269,271
279,280
279,281
291,292
291,293
303,304
303,305
319,320
319,321
331,332
331,333
341,342
341,343
352,353
352,354
364,365
364,366
376,377
376,378
386,387
386,388
399,400
399,401
425,426
425,427
442,443
442,444
456,457
456,458
461,462
461,463
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;CompositeTypeSpecifier;Name;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Pointer;Name;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int copy_thread(unsigned long clone_flags, unsigned long new_stackp,		unsigned long arg, struct task_struct *p){	struct thread_info *ti;	struct fake_frame	{		struct stack_frame sf;		struct pt_regs childregs;	} *frame;	frame = container_of(task_pt_regs(p), struct fake_frame, childregs);	p->thread.ksp = (unsigned long) frame;	/* Save access registers to new thread structure. */	save_access_regs(&p->thread.acrs[0]);	/* start new process with ar4 pointing to the correct address space */	p->thread.mm_segment = get_fs();	/* Don't copy debug registers */	memset(&p->thread.per_user, 0, sizeof(p->thread.per_user));	memset(&p->thread.per_event, 0, sizeof(p->thread.per_event));	clear_tsk_thread_flag(p, TIF_SINGLE_STEP);	p->thread.per_flags = 0;	/* Initialize per thread user and system timer values */	ti = task_thread_info(p);	ti->user_timer = 0;	ti->system_timer = 0;	frame->sf.back_chain = 0;	/* new return point is ret_from_fork */	frame->sf.gprs[8] = (unsigned long) ret_from_fork;	/* fake return stack for resume(), don't go back to schedule */	frame->sf.gprs[9] = (unsigned long) frame;	/* Store access registers to kernel stack of new process. */	if (unlikely(p->flags & PF_KTHREAD)) {		/* kernel thread */		memset(&frame->childregs, 0, sizeof(struct pt_regs));		frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;		frame->childregs.psw.addr = PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter;		frame->childregs.gprs[9] = new_stackp; /* function */		frame->childregs.gprs[10] = arg;		frame->childregs.gprs[11] = (unsigned long) do_exit;		frame->childregs.orig_gpr2 = -1;		return 0;	}	frame->childregs = *current_pt_regs();	frame->childregs.gprs[2] = 0;	/* child returns 0 on fork. */	frame->childregs.flags = 0;	if (new_stackp)		frame->childregs.gprs[15] = new_stackp;	/* Don't copy runtime instrumentation info */	p->thread.ri_cb = NULL;	frame->childregs.psw.mask &= ~PSW_MASK_RI;	/* Set a new TLS ?  */	if (clone_flags & CLONE_SETTLS) {		unsigned long tls = frame->childregs.gprs[6];		if (is_compat_task()) {			p->thread.acrs[0] = (unsigned int)tls;		} else {			p->thread.acrs[0] = (unsigned int)(tls >> 32);			p->thread.acrs[1] = (unsigned int)tls;		}	}	return 0;}
int
copy_thread(unsigned long clone_flags, unsigned long new_stackp,		unsigned long arg, struct task_struct *p)
copy_thread
unsigned long clone_flags
unsigned long
clone_flags
clone_flags
unsigned long new_stackp
unsigned long
new_stackp
new_stackp
unsigned long arg
unsigned long
arg
arg
struct task_struct *p
struct task_struct
task_struct
*p
*
p
{	struct thread_info *ti;	struct fake_frame	{		struct stack_frame sf;		struct pt_regs childregs;	} *frame;	frame = container_of(task_pt_regs(p), struct fake_frame, childregs);	p->thread.ksp = (unsigned long) frame;	/* Save access registers to new thread structure. */	save_access_regs(&p->thread.acrs[0]);	/* start new process with ar4 pointing to the correct address space */	p->thread.mm_segment = get_fs();	/* Don't copy debug registers */	memset(&p->thread.per_user, 0, sizeof(p->thread.per_user));	memset(&p->thread.per_event, 0, sizeof(p->thread.per_event));	clear_tsk_thread_flag(p, TIF_SINGLE_STEP);	p->thread.per_flags = 0;	/* Initialize per thread user and system timer values */	ti = task_thread_info(p);	ti->user_timer = 0;	ti->system_timer = 0;	frame->sf.back_chain = 0;	/* new return point is ret_from_fork */	frame->sf.gprs[8] = (unsigned long) ret_from_fork;	/* fake return stack for resume(), don't go back to schedule */	frame->sf.gprs[9] = (unsigned long) frame;	/* Store access registers to kernel stack of new process. */	if (unlikely(p->flags & PF_KTHREAD)) {		/* kernel thread */		memset(&frame->childregs, 0, sizeof(struct pt_regs));		frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;		frame->childregs.psw.addr = PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter;		frame->childregs.gprs[9] = new_stackp; /* function */		frame->childregs.gprs[10] = arg;		frame->childregs.gprs[11] = (unsigned long) do_exit;		frame->childregs.orig_gpr2 = -1;		return 0;	}	frame->childregs = *current_pt_regs();	frame->childregs.gprs[2] = 0;	/* child returns 0 on fork. */	frame->childregs.flags = 0;	if (new_stackp)		frame->childregs.gprs[15] = new_stackp;	/* Don't copy runtime instrumentation info */	p->thread.ri_cb = NULL;	frame->childregs.psw.mask &= ~PSW_MASK_RI;	/* Set a new TLS ?  */	if (clone_flags & CLONE_SETTLS) {		unsigned long tls = frame->childregs.gprs[6];		if (is_compat_task()) {			p->thread.acrs[0] = (unsigned int)tls;		} else {			p->thread.acrs[0] = (unsigned int)(tls >> 32);			p->thread.acrs[1] = (unsigned int)tls;		}	}	return 0;}
struct thread_info *ti;
struct thread_info *ti;
struct thread_info
thread_info
*ti
*
ti
struct fake_frame	{		struct stack_frame sf;		struct pt_regs childregs;	} *frame;
struct fake_frame	{		struct stack_frame sf;		struct pt_regs childregs;	} *frame;
struct fake_frame	{		struct stack_frame sf;		struct pt_regs childregs;	}
fake_frame
struct stack_frame sf;
struct stack_frame
stack_frame
sf
sf
struct pt_regs childregs;
struct pt_regs
pt_regs
childregs
childregs
*frame
*
frame
frame = container_of(task_pt_regs(p), struct fake_frame, childregs);
p->thread.ksp = (unsigned long) frame;
p->thread.ksp = (unsigned long) frame
p->thread.ksp
p->thread
p
p
thread
ksp
(unsigned long) frame
unsigned long
unsigned long

frame
frame
save_access_regs(&p->thread.acrs[0]);
save_access_regs(&p->thread.acrs[0])
save_access_regs
save_access_regs
&p->thread.acrs[0]
p->thread.acrs[0]
p->thread.acrs
p->thread
p
p
thread
acrs
0
p->thread.mm_segment = get_fs();
p->thread.mm_segment = get_fs()
p->thread.mm_segment
p->thread
p
p
thread
mm_segment
get_fs()
get_fs
get_fs
memset(&p->thread.per_user, 0, sizeof(p->thread.per_user));
memset(&p->thread.per_user, 0, sizeof(p->thread.per_user))
memset
memset
&p->thread.per_user
p->thread.per_user
p->thread
p
p
thread
per_user
0
sizeof(p->thread.per_user)
(p->thread.per_user)
p->thread.per_user
p->thread
p
p
thread
per_user
memset(&p->thread.per_event, 0, sizeof(p->thread.per_event));
memset(&p->thread.per_event, 0, sizeof(p->thread.per_event))
memset
memset
&p->thread.per_event
p->thread.per_event
p->thread
p
p
thread
per_event
0
sizeof(p->thread.per_event)
(p->thread.per_event)
p->thread.per_event
p->thread
p
p
thread
per_event
clear_tsk_thread_flag(p, TIF_SINGLE_STEP);
clear_tsk_thread_flag(p, TIF_SINGLE_STEP)
clear_tsk_thread_flag
clear_tsk_thread_flag
p
p
TIF_SINGLE_STEP
TIF_SINGLE_STEP
p->thread.per_flags = 0;
p->thread.per_flags = 0
p->thread.per_flags
p->thread
p
p
thread
per_flags
0
ti = task_thread_info(p);
ti = task_thread_info(p)
ti
ti
task_thread_info(p)
task_thread_info
task_thread_info
p
p
ti->user_timer = 0;
ti->user_timer = 0
ti->user_timer
ti
ti
user_timer
0
ti->system_timer = 0;
ti->system_timer = 0
ti->system_timer
ti
ti
system_timer
0
frame->sf.back_chain = 0;
frame->sf.back_chain = 0
frame->sf.back_chain
frame->sf
frame
frame
sf
back_chain
0
frame->sf.gprs[8] = (unsigned long) ret_from_fork;
frame->sf.gprs[8] = (unsigned long) ret_from_fork
frame->sf.gprs[8]
frame->sf.gprs
frame->sf
frame
frame
sf
gprs
8
(unsigned long) ret_from_fork
unsigned long
unsigned long

ret_from_fork
ret_from_fork
frame->sf.gprs[9] = (unsigned long) frame;
frame->sf.gprs[9] = (unsigned long) frame
frame->sf.gprs[9]
frame->sf.gprs
frame->sf
frame
frame
sf
gprs
9
(unsigned long) frame
unsigned long
unsigned long

frame
frame
if (unlikely(p->flags & PF_KTHREAD)) {		/* kernel thread */		memset(&frame->childregs, 0, sizeof(struct pt_regs));		frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;		frame->childregs.psw.addr = PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter;		frame->childregs.gprs[9] = new_stackp; /* function */		frame->childregs.gprs[10] = arg;		frame->childregs.gprs[11] = (unsigned long) do_exit;		frame->childregs.orig_gpr2 = -1;		return 0;	}
unlikely(p->flags & PF_KTHREAD)
unlikely
unlikely
p->flags & PF_KTHREAD
p->flags
p
p
flags
PF_KTHREAD
PF_KTHREAD
{		/* kernel thread */		memset(&frame->childregs, 0, sizeof(struct pt_regs));		frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;		frame->childregs.psw.addr = PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter;		frame->childregs.gprs[9] = new_stackp; /* function */		frame->childregs.gprs[10] = arg;		frame->childregs.gprs[11] = (unsigned long) do_exit;		frame->childregs.orig_gpr2 = -1;		return 0;	}
memset(&frame->childregs, 0, sizeof(struct pt_regs));
memset(&frame->childregs, 0, sizeof(struct pt_regs))
memset
memset
&frame->childregs
frame->childregs
frame
frame
childregs
0
sizeof(struct pt_regs)
struct pt_regs
struct pt_regs
pt_regs

frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK;
frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK
frame->childregs.psw.mask
frame->childregs.psw
frame->childregs
frame
frame
childregs
psw
mask
PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK
PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO | PSW_MASK_EXT
PSW_KERNEL_BITS | PSW_MASK_DAT |				PSW_MASK_IO
PSW_KERNEL_BITS | PSW_MASK_DAT
PSW_KERNEL_BITS
PSW_KERNEL_BITS
PSW_MASK_DAT
PSW_MASK_DAT
PSW_MASK_IO
PSW_MASK_IO
PSW_MASK_EXT
PSW_MASK_EXT
PSW_MASK_MCHECK
PSW_MASK_MCHECK
frame->childregs.psw.addr = PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter;
frame->childregs.psw.addr = PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter
frame->childregs.psw.addr
frame->childregs.psw
frame->childregs
frame
frame
childregs
psw
addr
PSW_ADDR_AMODE |				(unsigned long) kernel_thread_starter
PSW_ADDR_AMODE
PSW_ADDR_AMODE
(unsigned long) kernel_thread_starter
unsigned long
unsigned long

kernel_thread_starter
kernel_thread_starter
frame->childregs.gprs[9] = new_stackp;
frame->childregs.gprs[9] = new_stackp
frame->childregs.gprs[9]
frame->childregs.gprs
frame->childregs
frame
frame
childregs
gprs
9
new_stackp
new_stackp
frame->childregs.gprs[10] = arg;
frame->childregs.gprs[10] = arg
frame->childregs.gprs[10]
frame->childregs.gprs
frame->childregs
frame
frame
childregs
gprs
10
arg
arg
frame->childregs.gprs[11] = (unsigned long) do_exit;
frame->childregs.gprs[11] = (unsigned long) do_exit
frame->childregs.gprs[11]
frame->childregs.gprs
frame->childregs
frame
frame
childregs
gprs
11
(unsigned long) do_exit
unsigned long
unsigned long

do_exit
do_exit
frame->childregs.orig_gpr2 = -1;
frame->childregs.orig_gpr2 = -1
frame->childregs.orig_gpr2
frame->childregs
frame
frame
childregs
orig_gpr2
-1
1
return 0;
0
frame->childregs = *current_pt_regs();
frame->childregs = *current_pt_regs()
frame->childregs
frame
frame
childregs
*current_pt_regs()
current_pt_regs()
current_pt_regs
current_pt_regs
frame->childregs.gprs[2] = 0;
frame->childregs.gprs[2] = 0
frame->childregs.gprs[2]
frame->childregs.gprs
frame->childregs
frame
frame
childregs
gprs
2
0
frame->childregs.flags = 0;
frame->childregs.flags = 0
frame->childregs.flags
frame->childregs
frame
frame
childregs
flags
0
if (new_stackp)		frame->childregs.gprs[15] = new_stackp;
new_stackp
new_stackp
frame->childregs.gprs[15] = new_stackp;
frame->childregs.gprs[15] = new_stackp
frame->childregs.gprs[15]
frame->childregs.gprs
frame->childregs
frame
frame
childregs
gprs
15
new_stackp
new_stackp
p->thread.ri_cb = NULL;
p->thread.ri_cb = NULL
p->thread.ri_cb
p->thread
p
p
thread
ri_cb
NULL
NULL
frame->childregs.psw.mask &= ~PSW_MASK_RI;
frame->childregs.psw.mask &= ~PSW_MASK_RI
frame->childregs.psw.mask
frame->childregs.psw
frame->childregs
frame
frame
childregs
psw
mask
~PSW_MASK_RI
PSW_MASK_RI
PSW_MASK_RI
if (clone_flags & CLONE_SETTLS) {		unsigned long tls = frame->childregs.gprs[6];		if (is_compat_task()) {			p->thread.acrs[0] = (unsigned int)tls;		} else {			p->thread.acrs[0] = (unsigned int)(tls >> 32);			p->thread.acrs[1] = (unsigned int)tls;		}	}
clone_flags & CLONE_SETTLS
clone_flags
clone_flags
CLONE_SETTLS
CLONE_SETTLS
{		unsigned long tls = frame->childregs.gprs[6];		if (is_compat_task()) {			p->thread.acrs[0] = (unsigned int)tls;		} else {			p->thread.acrs[0] = (unsigned int)(tls >> 32);			p->thread.acrs[1] = (unsigned int)tls;		}	}
unsigned long tls = frame->childregs.gprs[6];
unsigned long tls = frame->childregs.gprs[6];
unsigned long
tls = frame->childregs.gprs[6]
tls
= frame->childregs.gprs[6]
frame->childregs.gprs[6]
frame->childregs.gprs
frame->childregs
frame
frame
childregs
gprs
6
if (is_compat_task()) {			p->thread.acrs[0] = (unsigned int)tls;		} else {			p->thread.acrs[0] = (unsigned int)(tls >> 32);			p->thread.acrs[1] = (unsigned int)tls;		}
is_compat_task()
is_compat_task
is_compat_task
{			p->thread.acrs[0] = (unsigned int)tls;		}
p->thread.acrs[0] = (unsigned int)tls;
p->thread.acrs[0] = (unsigned int)tls
p->thread.acrs[0]
p->thread.acrs
p->thread
p
p
thread
acrs
0
(unsigned int)tls
unsigned int
unsigned int

tls
tls
{			p->thread.acrs[0] = (unsigned int)(tls >> 32);			p->thread.acrs[1] = (unsigned int)tls;		}
p->thread.acrs[0] = (unsigned int)(tls >> 32);
p->thread.acrs[0] = (unsigned int)(tls >> 32)
p->thread.acrs[0]
p->thread.acrs
p->thread
p
p
thread
acrs
0
(unsigned int)(tls >> 32)
unsigned int
unsigned int

(tls >> 32)
tls >> 32
tls
tls
32
p->thread.acrs[1] = (unsigned int)tls;
p->thread.acrs[1] = (unsigned int)tls
p->thread.acrs[1]
p->thread.acrs
p->thread
p
p
thread
acrs
1
(unsigned int)tls
unsigned int
unsigned int

tls
tls
return 0;
0
-----joern-----
(87,189,0)
(111,2,0)
(235,98,0)
(288,195,0)
(296,39,0)
(208,14,0)
(236,279,0)
(185,74,0)
(146,212,0)
(263,112,0)
(228,141,0)
(17,251,0)
(180,219,0)
(70,83,0)
(290,141,0)
(283,161,0)
(259,7,0)
(285,269,0)
(263,32,0)
(65,141,0)
(287,97,0)
(171,83,0)
(296,156,0)
(14,229,0)
(195,141,0)
(168,40,0)
(223,142,0)
(48,276,0)
(16,141,0)
(88,273,0)
(4,268,0)
(55,24,0)
(6,254,0)
(295,258,0)
(251,298,0)
(238,11,0)
(54,141,0)
(34,148,0)
(78,185,0)
(90,86,0)
(55,237,0)
(245,159,0)
(248,97,0)
(39,273,0)
(217,276,0)
(275,89,0)
(160,148,0)
(171,187,0)
(292,136,0)
(5,165,0)
(74,99,0)
(84,90,0)
(205,71,0)
(175,8,0)
(302,133,0)
(129,58,0)
(177,198,0)
(72,160,0)
(40,231,0)
(164,110,0)
(95,148,0)
(40,168,0)
(160,170,0)
(89,275,0)
(253,145,0)
(124,9,0)
(171,163,0)
(214,148,0)
(74,185,0)
(233,20,0)
(20,200,0)
(171,254,0)
(67,252,0)
(171,148,0)
(219,99,0)
(26,174,0)
(171,226,0)
(171,296,0)
(129,116,0)
(257,148,0)
(6,116,0)
(95,145,0)
(220,47,0)
(155,6,0)
(195,209,0)
(262,71,0)
(68,54,0)
(6,218,0)
(21,270,0)
(134,146,0)
(256,194,0)
(171,82,0)
(222,65,0)
(199,180,0)
(159,267,0)
(281,196,0)
(169,133,0)
(252,294,0)
(291,215,0)
(18,54,0)
(266,164,0)
(283,148,0)
(269,38,0)
(229,148,0)
(136,100,0)
(112,175,0)
(80,226,0)
(244,18,0)
(35,178,0)
(299,8,0)
(161,283,0)
(82,3,0)
(276,259,0)
(53,16,0)
(211,116,0)
(125,53,0)
(112,263,0)
(182,16,0)
(171,205,0)
(127,219,0)
(31,159,0)
(264,16,0)
(279,8,0)
(128,149,0)
(287,178,0)
(64,212,0)
(28,256,0)
(45,124,0)
(244,283,0)
(133,141,0)
(150,85,0)
(192,83,0)
(79,256,0)
(274,200,0)
(243,82,0)
(249,212,0)
(280,209,0)
(20,100,0)
(132,254,0)
(239,98,0)
(62,271,0)
(192,141,0)
(189,8,0)
(106,151,0)
(165,148,0)
(131,210,0)
(273,39,0)
(73,286,0)
(107,290,0)
(215,148,0)
(99,219,0)
(39,284,0)
(171,263,0)
(258,133,0)
(286,234,0)
(216,210,0)
(226,0,0)
(6,53,0)
(201,64,0)
(100,136,0)
(210,185,0)
(0,226,0)
(130,18,0)
(171,72,0)
(246,82,0)
(61,290,0)
(51,205,0)
(171,198,0)
(198,215,0)
(214,103,0)
(250,62,0)
(89,294,0)
(213,252,0)
(6,74,0)
(115,148,0)
(268,4,0)
(56,145,0)
(170,301,0)
(29,97,0)
(243,290,0)
(93,129,0)
(102,32,0)
(176,254,0)
(103,214,0)
(6,83,0)
(124,76,0)
(114,283,0)
(174,148,0)
(303,221,0)
(247,208,0)
(297,196,0)
(57,148,0)
(221,197,0)
(225,259,0)
(172,156,0)
(173,103,0)
(10,58,0)
(14,208,0)
(184,47,0)
(101,148,0)
(6,221,0)
(231,40,0)
(277,174,0)
(144,65,0)
(121,286,0)
(299,231,0)
(18,244,0)
(207,277,0)
(33,14,0)
(179,282,0)
(27,275,0)
(7,259,0)
(194,161,0)
(154,175,0)
(163,209,0)
(2,81,0)
(178,287,0)
(204,269,0)
(1,103,0)
(170,160,0)
(190,171,0)
(156,296,0)
(209,163,0)
(55,3,0)
(196,270,0)
(96,231,0)
(293,0,0)
(215,85,0)
(37,6,0)
(271,62,0)
(149,148,0)
(271,97,0)
(171,14,0)
(94,238,0)
(30,197,0)
(277,215,0)
(36,299,0)
(83,192,0)
(16,53,0)
(142,148,0)
(24,55,0)
(65,156,0)
(187,8,0)
(38,214,0)
(171,277,0)
(255,200,0)
(151,106,0)
(237,55,0)
(3,284,0)
(116,129,0)
(156,65,0)
(226,165,0)
(278,4,0)
(176,141,0)
(6,226,0)
(270,196,0)
(98,197,0)
(59,299,0)
(282,141,0)
(166,54,0)
(19,228,0)
(191,74,0)
(92,84,0)
(153,285,0)
(168,120,0)
(269,285,0)
(152,218,0)
(294,252,0)
(52,38,0)
(181,279,0)
(133,258,0)
(44,187,0)
(171,121,0)
(123,175,0)
(248,143,0)
(89,97,0)
(259,276,0)
(228,238,0)
(23,71,0)
(126,29,0)
(135,24,0)
(164,97,0)
(272,15,0)
(151,148,0)
(54,18,0)
(265,192,0)
(147,60,0)
(124,168,0)
(167,168,0)
(142,141,0)
(29,234,0)
(171,38,0)
(224,187,0)
(290,243,0)
(202,148,0)
(300,15,0)
(104,146,0)
(254,95,0)
(69,143,0)
(116,29,0)
(230,208,0)
(58,129,0)
(273,168,0)
(8,148,0)
(6,72,0)
(294,89,0)
(47,220,0)
(238,228,0)
(64,164,0)
(205,188,0)
(186,112,0)
(60,251,0)
(183,89,0)
(158,120,0)
(81,2,0)
(171,53,0)
(86,202,0)
(193,121,0)
(254,176,0)
(198,149,0)
(121,119,0)
(2,148,0)
(240,40,0)
(8,189,0)
(298,251,0)
(298,287,0)
(9,124,0)
(145,253,0)
(99,97,0)
(86,90,0)
(71,8,0)
(200,20,0)
(4,62,0)
(162,0,0)
(202,86,0)
(218,248,0)
(117,296,0)
(157,228,0)
(15,218,0)
(100,20,0)
(62,4,0)
(6,38,0)
(3,55,0)
(81,258,0)
(136,148,0)
(71,205,0)
(220,180,0)
(251,60,0)
(212,146,0)
(7,2,0)
(63,176,0)
(279,119,0)
(6,97,0)
(6,298,0)
(218,15,0)
(143,248,0)
(219,180,0)
(118,60,0)
(203,192,0)
(206,72,0)
(282,84,0)
(22,273,0)
(180,220,0)
(197,98,0)
(232,12,0)
(138,47,0)
(258,81,0)
(231,299,0)
(197,221,0)
(256,141,0)
(208,141,0)
(12,148,0)
(155,171,0)
(6,277,0)
(46,90,0)
(108,195,0)
(38,269,0)
(119,279,0)
(105,176,0)
(72,270,0)
(85,215,0)
(109,298,0)
(194,256,0)
(301,170,0)
(227,170,0)
(212,64,0)
(163,76,0)
(270,72,0)
(189,87,0)
(283,244,0)
(137,229,0)
(24,168,0)
(82,243,0)
(76,124,0)
(2,7,0)
(85,141,0)
(209,195,0)
(77,142,0)
(113,198,0)
(6,198,0)
(49,100,0)
(66,282,0)
(11,238,0)
(242,24,0)
(119,121,0)
(261,188,0)
(276,141,0)
(161,194,0)
(84,282,0)
(90,84,0)
(13,120,0)
(185,210,0)
(91,58,0)
(139,194,0)
(273,88,0)
(50,119,0)
(32,148,0)
(178,42,0)
(145,95,0)
(103,1,0)
(42,178,0)
(188,148,0)
(122,243,0)
(41,263,0)
(53,12,0)
(221,271,0)
(6,64,0)
(76,241,0)
(140,277,0)
(275,27,0)
(75,220,0)
(25,285,0)
(200,8,0)
(83,151,0)
(43,163,0)
(175,112,0)
(275,183,1)
(36,59,1)
(173,38,1)
(246,243,1)
(289,188,1)
(251,60,1)
(211,129,1)
(54,166,1)
(254,176,1)
(6,218,1)
(23,32,1)
(291,12,1)
(171,190,1)
(228,141,1)
(280,195,1)
(242,135,1)
(269,204,1)
(171,254,1)
(6,116,1)
(6,37,1)
(286,73,1)
(271,62,1)
(6,298,1)
(188,261,1)
(134,29,1)
(185,78,1)
(123,8,1)
(6,83,1)
(19,157,1)
(112,175,1)
(10,91,1)
(93,58,1)
(166,68,1)
(54,141,1)
(177,113,1)
(124,168,1)
(132,176,1)
(259,276,1)
(162,293,1)
(171,83,1)
(82,243,1)
(191,185,1)
(221,303,1)
(171,277,1)
(170,227,1)
(14,208,1)
(277,215,1)
(294,252,1)
(190,39,1)
(84,282,1)
(213,67,1)
(200,8,1)
(247,286,1)
(89,294,1)
(247,289,1)
(24,242,1)
(243,122,1)
(102,263,1)
(111,81,1)
(135,82,1)
(5,226,1)
(251,17,1)
(198,177,1)
(270,196,1)
(273,22,1)
(171,53,1)
(43,209,1)
(175,8,1)
(35,298,1)
(64,212,1)
(72,270,1)
(256,28,1)
(209,195,1)
(282,179,1)
(66,95,1)
(274,255,1)
(276,48,1)
(171,187,1)
(283,161,1)
(51,71,1)
(145,56,1)
(38,269,1)
(17,60,1)
(100,20,1)
(220,47,1)
(293,149,1)
(6,254,1)
(28,79,1)
(210,131,1)
(171,82,1)
(81,258,1)
(214,103,1)
(195,141,1)
(39,273,1)
(270,21,1)
(6,221,1)
(0,162,1)
(22,296,1)
(169,302,1)
(48,217,1)
(174,26,1)
(90,84,1)
(265,203,1)
(292,100,1)
(4,268,1)
(14,33,1)
(103,173,1)
(90,46,1)
(37,248,1)
(171,263,1)
(6,277,1)
(73,121,1)
(60,147,1)
(263,112,1)
(75,199,1)
(124,9,1)
(171,296,1)
(129,93,1)
(200,274,1)
(11,238,1)
(144,3,1)
(91,271,1)
(212,146,1)
(182,142,1)
(119,50,1)
(167,159,1)
(113,174,1)
(142,141,1)
(288,108,1)
(41,112,1)
(194,256,1)
(299,36,1)
(238,228,1)
(273,88,1)
(190,76,1)
(258,133,1)
(68,151,1)
(252,213,1)
(205,51,1)
(208,141,1)
(300,287,1)
(69,218,1)
(250,221,1)
(117,156,1)
(192,265,1)
(208,230,1)
(212,249,1)
(197,98,1)
(190,159,1)
(171,14,1)
(131,216,1)
(40,240,1)
(151,106,1)
(176,141,1)
(262,23,1)
(171,205,1)
(272,300,1)
(3,55,1)
(6,74,1)
(218,152,1)
(202,86,1)
(171,72,1)
(74,185,1)
(16,141,1)
(137,14,1)
(140,207,1)
(232,53,1)
(70,192,1)
(127,74,1)
(121,193,1)
(55,24,1)
(264,182,1)
(53,16,1)
(180,220,1)
(44,11,1)
(219,180,1)
(259,225,1)
(85,150,1)
(152,15,1)
(193,119,1)
(79,114,1)
(133,169,1)
(106,83,1)
(248,143,1)
(92,282,1)
(72,206,1)
(196,281,1)
(295,133,1)
(20,200,1)
(6,198,1)
(275,27,1)
(184,75,1)
(303,197,1)
(171,121,1)
(7,259,1)
(38,52,1)
(192,141,1)
(46,84,1)
(168,40,1)
(157,160,1)
(65,222,1)
(206,270,1)
(83,70,1)
(143,69,1)
(176,63,1)
(78,210,1)
(95,145,1)
(231,299,1)
(231,96,1)
(145,253,1)
(138,184,1)
(240,231,1)
(203,202,1)
(122,290,1)
(201,212,1)
(204,285,1)
(125,16,1)
(40,231,1)
(205,71,1)
(136,292,1)
(30,98,1)
(15,272,1)
(6,64,1)
(273,168,1)
(269,285,1)
(290,107,1)
(119,279,1)
(65,141,1)
(104,134,1)
(254,132,1)
(18,130,1)
(84,92,1)
(50,279,1)
(171,163,1)
(160,170,1)
(163,209,1)
(238,94,1)
(249,146,1)
(71,262,1)
(276,141,1)
(239,99,1)
(6,53,1)
(171,226,1)
(126,116,1)
(217,111,1)
(133,141,1)
(61,260,1)
(198,215,1)
(287,178,1)
(52,269,1)
(244,18,1)
(6,38,1)
(286,234,1)
(299,8,1)
(164,110,1)
(164,266,1)
(146,104,1)
(74,191,1)
(207,215,1)
(187,224,1)
(147,118,1)
(98,235,1)
(45,163,1)
(279,181,1)
(218,15,1)
(215,85,1)
(171,198,1)
(55,237,1)
(186,175,1)
(4,278,1)
(142,77,1)
(114,244,1)
(170,301,1)
(89,275,1)
(109,251,1)
(116,129,1)
(6,226,1)
(226,80,1)
(129,58,1)
(124,45,1)
(225,276,1)
(32,102,1)
(112,186,1)
(233,200,1)
(96,299,1)
(195,288,1)
(290,141,1)
(67,11,1)
(63,105,1)
(223,2,1)
(236,289,1)
(26,277,1)
(53,125,1)
(59,167,1)
(62,4,1)
(156,172,1)
(183,294,1)
(77,223,1)
(130,54,1)
(159,267,1)
(221,197,1)
(86,90,1)
(297,214,1)
(263,41,1)
(80,0,1)
(161,194,1)
(178,42,1)
(255,229,1)
(260,168,1)
(298,109,1)
(121,119,1)
(29,126,1)
(296,117,1)
(29,234,1)
(108,260,1)
(283,244,1)
(181,236,1)
(100,49,1)
(2,81,1)
(71,8,1)
(185,210,1)
(189,87,1)
(47,138,1)
(128,198,1)
(156,65,1)
(230,247,1)
(155,6,1)
(235,239,1)
(229,137,1)
(87,187,1)
(159,31,1)
(24,168,1)
(256,141,1)
(64,201,1)
(116,211,1)
(21,196,1)
(226,0,1)
(224,44,1)
(278,250,1)
(2,7,1)
(136,100,1)
(261,205,1)
(8,189,1)
(82,246,1)
(222,144,1)
(194,139,1)
(16,264,1)
(6,72,1)
(31,245,1)
(165,5,1)
(197,30,1)
(179,66,1)
(85,141,1)
(227,72,1)
(20,233,1)
(266,64,1)
(285,25,1)
(296,156,1)
(155,171,1)
(154,123,1)
(99,219,1)
(216,89,1)
(139,256,1)
(163,43,1)
(56,254,1)
(175,154,1)
(209,280,1)
(302,283,1)
(118,164,1)
(258,295,1)
(94,228,1)
(171,38,1)
(153,165,1)
(245,136,1)
(33,208,1)
(150,291,1)
(149,128,1)
(49,20,1)
(282,141,1)
(228,19,1)
(178,35,1)
(107,61,1)
(25,153,1)
(243,290,1)
(58,10,1)
(18,54,1)
(277,140,1)
(199,127,1)
(103,1,1)
(279,8,1)
(172,65,1)
(76,124,1)
(298,251,1)
(12,232,1)
(83,192,1)
(281,297,1)
(163,260,2)
(187,11,2)
(29,11,2)
(134,11,2)
(4,11,2)
(41,11,2)
(6,254,2)
(109,11,2)
(171,83,2)
(215,85,2)
(275,27,2)
(171,226,2)
(6,72,2)
(163,209,2)
(31,11,2)
(3,55,2)
(288,260,2)
(142,141,2)
(53,16,2)
(11,238,2)
(59,159,2)
(6,277,2)
(231,159,2)
(72,270,2)
(220,47,2)
(263,112,2)
(40,231,2)
(229,11,2)
(180,11,2)
(2,81,2)
(14,11,2)
(167,159,2)
(103,1,2)
(67,11,2)
(38,269,2)
(58,11,2)
(290,260,2)
(69,11,2)
(214,103,2)
(233,11,2)
(36,159,2)
(10,11,2)
(198,215,2)
(274,11,2)
(208,141,2)
(287,178,2)
(250,11,2)
(286,234,2)
(175,11,2)
(280,260,2)
(43,260,2)
(137,11,2)
(99,219,2)
(195,260,2)
(276,141,2)
(168,40,2)
(14,208,2)
(254,176,2)
(33,11,2)
(247,11,2)
(252,11,2)
(29,234,2)
(231,299,2)
(100,11,2)
(296,156,2)
(287,11,2)
(89,294,2)
(171,205,2)
(123,11,2)
(270,196,2)
(194,256,2)
(170,301,2)
(171,187,2)
(131,11,2)
(245,11,2)
(146,11,2)
(275,11,2)
(299,159,2)
(258,133,2)
(6,83,2)
(136,11,2)
(74,11,2)
(172,260,2)
(213,11,2)
(228,141,2)
(224,11,2)
(249,11,2)
(74,185,2)
(35,11,2)
(89,275,2)
(71,8,2)
(186,11,2)
(260,159,2)
(143,11,2)
(171,121,2)
(272,11,2)
(6,74,2)
(16,141,2)
(6,221,2)
(197,11,2)
(218,11,2)
(208,11,2)
(154,11,2)
(181,289,2)
(6,11,2)
(95,145,2)
(222,260,2)
(209,260,2)
(7,259,2)
(205,11,2)
(171,11,2)
(30,11,2)
(104,11,2)
(171,198,2)
(62,4,2)
(262,11,2)
(65,260,2)
(289,11,2)
(171,82,2)
(171,72,2)
(55,260,2)
(39,260,2)
(4,268,2)
(248,11,2)
(292,11,2)
(180,220,2)
(124,168,2)
(73,289,2)
(164,110,2)
(22,260,2)
(112,11,2)
(189,87,2)
(202,86,2)
(65,141,2)
(155,6,2)
(176,141,2)
(23,11,2)
(184,11,2)
(299,8,2)
(220,11,2)
(188,11,2)
(239,11,2)
(93,11,2)
(124,9,2)
(185,11,2)
(283,161,2)
(159,267,2)
(6,53,2)
(226,0,2)
(300,11,2)
(283,244,2)
(212,146,2)
(6,298,2)
(20,11,2)
(246,260,2)
(136,100,2)
(82,243,2)
(116,11,2)
(192,141,2)
(273,168,2)
(221,197,2)
(294,252,2)
(248,143,2)
(47,11,2)
(87,11,2)
(89,11,2)
(197,98,2)
(99,11,2)
(145,253,2)
(156,260,2)
(164,11,2)
(238,228,2)
(62,11,2)
(168,159,2)
(39,273,2)
(117,260,2)
(8,189,2)
(212,11,2)
(244,18,2)
(108,260,2)
(75,11,2)
(15,11,2)
(91,11,2)
(156,65,2)
(8,11,2)
(17,11,2)
(64,11,2)
(290,141,2)
(195,141,2)
(126,11,2)
(269,285,2)
(138,11,2)
(50,289,2)
(303,11,2)
(81,258,2)
(116,129,2)
(266,11,2)
(129,58,2)
(37,11,2)
(171,14,2)
(85,141,2)
(90,84,2)
(54,141,2)
(242,260,2)
(98,11,2)
(221,11,2)
(279,8,2)
(298,11,2)
(243,260,2)
(133,141,2)
(171,53,2)
(243,290,2)
(171,263,2)
(171,38,2)
(259,276,2)
(279,289,2)
(102,11,2)
(255,11,2)
(219,11,2)
(200,8,2)
(78,11,2)
(20,200,2)
(256,141,2)
(51,11,2)
(135,260,2)
(2,7,2)
(76,260,2)
(152,11,2)
(263,11,2)
(171,296,2)
(121,289,2)
(294,11,2)
(190,11,2)
(112,175,2)
(235,11,2)
(273,260,2)
(84,282,2)
(240,159,2)
(296,260,2)
(55,24,2)
(24,260,2)
(3,260,2)
(6,38,2)
(189,11,2)
(83,192,2)
(86,90,2)
(236,289,2)
(147,11,2)
(298,251,2)
(18,54,2)
(216,11,2)
(144,260,2)
(218,15,2)
(277,215,2)
(45,260,2)
(100,20,2)
(199,11,2)
(107,260,2)
(219,180,2)
(6,218,2)
(286,289,2)
(6,64,2)
(40,159,2)
(82,260,2)
(55,237,2)
(161,194,2)
(124,260,2)
(175,8,2)
(122,260,2)
(178,42,2)
(32,11,2)
(76,124,2)
(60,11,2)
(271,62,2)
(178,11,2)
(261,11,2)
(118,11,2)
(209,195,2)
(282,141,2)
(6,116,2)
(278,11,2)
(119,289,2)
(201,11,2)
(185,210,2)
(171,254,2)
(44,11,2)
(129,11,2)
(171,277,2)
(171,163,2)
(127,11,2)
(71,11,2)
(205,71,2)
(210,11,2)
(211,11,2)
(61,260,2)
(6,198,2)
(251,60,2)
(193,289,2)
(191,11,2)
(6,226,2)
(24,168,2)
(96,159,2)
(271,11,2)
(49,11,2)
(251,11,2)
(200,11,2)
(159,11,2)
(183,11,2)
(121,119,2)
(119,279,2)
(273,88,2)
(151,106,2)
(230,11,2)
(155,171,2)
(64,212,2)
(160,170,2)
-----------------------------------
(0,frame->sf)
(1,unsigned long)
(2,memset(&p->thread.per_event, 0, sizeof(p->thread.per_event)
(3,p->thread.acrs[0] = (unsigned int)
(4,(unsigned long)
(5,0)
(6,return 0;)
(7,sizeof(p->thread.per_event)
(8,frame->childregs = *current_pt_regs()
(9,unsigned int)
(10,childregs)
(11,unlikely(p->flags & PF_KTHREAD)
(12,p->thread.per_flags = 0)
(13,if (is_compat_task()
(14,p->thread.ri_cb)
(15,frame->childregs)
(16,p->thread)
(17,gprs)
(18,p->thread.per_user)
(19,flags)
(20,frame->childregs.psw)
(21,gprs)
(22,tls)
(23,frame)
(24,tls >> 32)
(25,sf)
(26,0)
(27,struct pt_regs)
(28,thread)
(29,frame->childregs.gprs[9] = new_stackp)
(30,psw)
(31,CLONE_SETTLS)
(32,frame->childregs.gprs[2] = 0)
(33,ri_cb)
(34,)
(35,do_exit)
(36,childregs)
(37,0)
(38,frame->sf.gprs[8])
(39,p->thread.acrs[1] = (unsigned int)
(40,frame->childregs.gprs[6])
(41,2)
(42,unsigned long)
(43,0)
(44,frame)
(45,tls)
(46,0)
(47,PSW_MASK_EXT | PSW_MASK_MCHECK)
(48,thread)
(49,mask)
(50,gprs)
(51,flags)
(52,8)
(53,p->thread.per_flags)
(54,p->thread)
(55,(unsigned int)
(56,frame)
(57,ti)
(58,frame->childregs)
(59,frame)
(60,frame->childregs)
(61,p)
(62,PSW_ADDR_AMODE |\n\\n\\t\\t\\t\\t(unsigned long)
(63,thread)
(64,frame->childregs.gprs[10])
(65,p->thread)
(66,p)
(67,frame)
(68,p)
(69,1)
(70,mm_segment)
(71,frame->childregs)
(72,frame->sf.gprs[9])
(73,new_stackp)
(74,frame->childregs.psw.mask)
(75,PSW_MASK_IO)
(76,p->thread.acrs[0] = (unsigned int)
(77,TIF_SINGLE_STEP)
(78,psw)
(79,p)
(80,back_chain)
(81,&p->thread.per_event)
(82,p->thread.acrs[0])
(83,p->thread.mm_segment)
(84,p->thread.acrs)
(85,task_thread_info(p)
(86,&p->thread.acrs[0])
(87,current_pt_regs()
(88,unsigned int)
(89,memset(&frame->childregs, 0, sizeof(struct pt_regs)
(90,p->thread.acrs[0])
(91,frame)
(92,acrs)
(93,gprs)
(94,PF_KTHREAD)
(95,p->thread.ksp = (unsigned long)
(96,gprs)
(97,)
(98,frame->childregs)
(99,frame->childregs.psw.mask = PSW_KERNEL_BITS | PSW_MASK_DAT |\n\\n\\t\\t\\t\\tPSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK)
(100,frame->childregs.psw.mask)
(101,if (new_stackp)
(102,0)
(103,(unsigned long)
(104,childregs)
(105,p)
(106,get_fs()
(107,thread)
(108,p)
(109,11)
(110,unsigned long arg)
(111,0)
(112,frame->childregs.gprs)
(113,ti)
(114,0)
(115,if (unlikely(p->flags & PF_KTHREAD)
(116,frame->childregs.gprs[9])
(117,1)
(118,frame)
(119,frame->childregs.gprs)
(120,)
(121,frame->childregs.gprs[15])
(122,acrs)
(123,frame)
(124,(unsigned int)
(125,per_flags)
(126,new_stackp)
(127,PSW_KERNEL_BITS)
(128,0)
(129,frame->childregs.gprs)
(130,per_user)
(131,childregs)
(132,ksp)
(133,p->thread)
(134,frame)
(135,tls)
(136,frame->childregs.psw.mask &= ~PSW_MASK_RI)
(137,NULL)
(138,PSW_MASK_MCHECK)
(139,per_user)
(140,user_timer)
(141,struct task_struct *p)
(142,clear_tsk_thread_flag(p, TIF_SINGLE_STEP)
(143,-1)
(144,p)
(145,(unsigned long)
(146,frame->childregs)
(147,childregs)
(148,)
(149,ti->system_timer = 0)
(150,p)
(151,p->thread.mm_segment = get_fs()
(152,orig_gpr2)
(153,frame)
(154,childregs)
(155,RET)
(156,p->thread.acrs)
(157,p)
(158,tls)
(159,clone_flags & CLONE_SETTLS)
(160,frame->sf.gprs[9] = (unsigned long)
(161,sizeof(p->thread.per_user)
(162,sf)
(163,p->thread.acrs[0])
(164,frame->childregs.gprs[10] = arg)
(165,frame->sf.back_chain = 0)
(166,thread)
(167,tls)
(168,tls = frame->childregs.gprs[6])
(169,thread)
(170,(unsigned long)
(171,return 0;)
(172,acrs)
(173,ret_from_fork)
(174,ti->user_timer = 0)
(175,frame->childregs)
(176,p->thread)
(177,system_timer)
(178,(unsigned long)
(179,thread)
(180,PSW_MASK_DAT |\n\\n\\t\\t\\t\\tPSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK)
(181,childregs)
(182,p)
(183,0)
(184,PSW_MASK_EXT)
(185,frame->childregs.psw)
(186,gprs)
(187,frame->childregs)
(188,frame->childregs.flags = 0)
(189,*current_pt_regs()
(190,0)
(191,mask)
(192,p->thread)
(193,15)
(194,p->thread.per_user)
(195,p->thread)
(196,frame->sf)
(197,frame->childregs.psw)
(198,ti->system_timer)
(199,PSW_MASK_DAT)
(200,frame->childregs)
(201,10)
(202,save_access_regs(&p->thread.acrs[0])
(203,p)
(204,gprs)
(205,frame->childregs.flags)
(206,9)
(207,ti)
(208,p->thread)
(209,p->thread.acrs)
(210,frame->childregs)
(211,9)
(212,frame->childregs.gprs)
(213,childregs)
(214,frame->sf.gprs[8] = (unsigned long)
(215,ti = task_thread_info(p)
(216,frame)
(217,p)
(218,frame->childregs.orig_gpr2)
(219,PSW_KERNEL_BITS | PSW_MASK_DAT |\n\\n\\t\\t\\t\\tPSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK)
(220,PSW_MASK_IO | PSW_MASK_EXT | PSW_MASK_MCHECK)
(221,frame->childregs.psw.addr)
(222,thread)
(223,p)
(224,childregs)
(225,per_event)
(226,frame->sf.back_chain)
(227,frame)
(228,p->flags)
(229,p->thread.ri_cb = NULL)
(230,thread)
(231,frame->childregs.gprs)
(232,0)
(233,psw)
(234,unsigned long new_stackp)
(235,childregs)
(236,frame)
(237,unsigned int)
(238,p->flags & PF_KTHREAD)
(239,frame)
(240,6)
(241,)
(242,32)
(243,p->thread.acrs)
(244,&p->thread.per_user)
(245,clone_flags)
(246,0)
(247,p)
(248,frame->childregs.orig_gpr2 = -1)
(249,gprs)
(250,PSW_ADDR_AMODE)
(251,frame->childregs.gprs)
(252,frame->childregs)
(253,unsigned long)
(254,p->thread.ksp)
(255,frame)
(256,p->thread)
(257,if (clone_flags & CLONE_SETTLS)
(258,p->thread.per_event)
(259,p->thread.per_event)
(260,is_compat_task()
(261,0)
(262,childregs)
(263,frame->childregs.gprs[2])
(264,thread)
(265,thread)
(266,arg)
(267,unsigned long clone_flags)
(268,unsigned long)
(269,frame->sf.gprs)
(270,frame->sf.gprs)
(271,frame->childregs.psw.addr = PSW_ADDR_AMODE |\n\\n\\t\\t\\t\\t(unsigned long)
(272,childregs)
(273,(unsigned int)
(274,childregs)
(275,sizeof(struct pt_regs)
(276,p->thread)
(277,ti->user_timer)
(278,kernel_thread_starter)
(279,frame->childregs)
(280,acrs)
(281,sf)
(282,p->thread)
(283,memset(&p->thread.per_user, 0, sizeof(p->thread.per_user)
(284,)
(285,frame->sf)
(286,frame->childregs.gprs[15] = new_stackp)
(287,frame->childregs.gprs[11] = (unsigned long)
(288,thread)
(289,new_stackp)
(290,p->thread)
(291,ti)
(292,~PSW_MASK_RI)
(293,frame)
(294,&frame->childregs)
(295,per_event)
(296,p->thread.acrs[1])
(297,frame)
(298,frame->childregs.gprs[11])
(299,frame->childregs)
(300,frame)
(301,unsigned long)
(302,p)
(303,addr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^