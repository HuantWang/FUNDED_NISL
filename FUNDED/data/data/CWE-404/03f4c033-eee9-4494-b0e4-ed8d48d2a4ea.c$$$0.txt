-----label-----
1
-----code-----
int be_update_queues(struct be_adapter *adapter)
{
	struct net_device *netdev = adapter->netdev;
	int status;

	if (netif_running(netdev)) {
		/* device cannot transmit now, avoid dev_watchdog timeouts */
		netif_carrier_off(netdev);

		be_close(netdev);
	}

	be_cancel_worker(adapter);

	/* If any vectors have been shared with RoCE we cannot re-program
	 * the MSIx table.
	 */
	if (!adapter->num_msix_roce_vec)
		be_msix_disable(adapter);

	be_clear_queues(adapter);

	if (!msix_enabled(adapter)) {
		status = be_msix_enable(adapter);
		if (status)
			return status;
	}

	status = be_setup_queues(adapter);
	if (status)
		return status;

	be_schedule_worker(adapter);

	if (netif_running(netdev))
		status = be_open(netdev);

	return status;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
79,80
79,81
80,81
81,82
81,83
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
92,93
93,94
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
104,105
104,106
105,106
107,108
108,109
110,111
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
126,128
127,128
129,130
131,132
132,133
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,26,28,32,34,39,41,45,47,51,53,58,59,63,65,69,71,76,78,83,86,88,91,94,98,101,103,106,109,113,115,119,121,125,128,130,133
-----computeFrom-----
81,82
81,83
96,97
96,98
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int be_update_queues(struct be_adapter *adapter){	struct net_device *netdev = adapter->netdev;	int status;	if (netif_running(netdev)) {		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}	be_cancel_worker(adapter);	/* If any vectors have been shared with RoCE we cannot re-program	 * the MSIx table.	 */	if (!adapter->num_msix_roce_vec)		be_msix_disable(adapter);	be_clear_queues(adapter);	if (!msix_enabled(adapter)) {		status = be_msix_enable(adapter);		if (status)			return status;	}	status = be_setup_queues(adapter);	if (status)		return status;	be_schedule_worker(adapter);	if (netif_running(netdev))		status = be_open(netdev);	return status;}
int
be_update_queues(struct be_adapter *adapter)
be_update_queues
struct be_adapter *adapter
struct be_adapter
be_adapter
*adapter
*
adapter
{	struct net_device *netdev = adapter->netdev;	int status;	if (netif_running(netdev)) {		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}	be_cancel_worker(adapter);	/* If any vectors have been shared with RoCE we cannot re-program	 * the MSIx table.	 */	if (!adapter->num_msix_roce_vec)		be_msix_disable(adapter);	be_clear_queues(adapter);	if (!msix_enabled(adapter)) {		status = be_msix_enable(adapter);		if (status)			return status;	}	status = be_setup_queues(adapter);	if (status)		return status;	be_schedule_worker(adapter);	if (netif_running(netdev))		status = be_open(netdev);	return status;}
struct net_device *netdev = adapter->netdev;
struct net_device *netdev = adapter->netdev;
struct net_device
net_device
*netdev = adapter->netdev
*
netdev
= adapter->netdev
adapter->netdev
adapter
adapter
netdev
int status;
int status;
int
status
status
if (netif_running(netdev)) {		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}
netif_running(netdev)
netif_running
netif_running
netdev
netdev
{		/* device cannot transmit now, avoid dev_watchdog timeouts */		netif_carrier_off(netdev);		be_close(netdev);	}
netif_carrier_off(netdev);
netif_carrier_off(netdev)
netif_carrier_off
netif_carrier_off
netdev
netdev
be_close(netdev);
be_close(netdev)
be_close
be_close
netdev
netdev
be_cancel_worker(adapter);
be_cancel_worker(adapter)
be_cancel_worker
be_cancel_worker
adapter
adapter
if (!adapter->num_msix_roce_vec)		be_msix_disable(adapter);
!adapter->num_msix_roce_vec
adapter->num_msix_roce_vec
adapter
adapter
num_msix_roce_vec
be_msix_disable(adapter);
be_msix_disable(adapter)
be_msix_disable
be_msix_disable
adapter
adapter
be_clear_queues(adapter);
be_clear_queues(adapter)
be_clear_queues
be_clear_queues
adapter
adapter
if (!msix_enabled(adapter)) {		status = be_msix_enable(adapter);		if (status)			return status;	}
!msix_enabled(adapter)
msix_enabled(adapter)
msix_enabled
msix_enabled
adapter
adapter
{		status = be_msix_enable(adapter);		if (status)			return status;	}
status = be_msix_enable(adapter);
status = be_msix_enable(adapter)
status
status
be_msix_enable(adapter)
be_msix_enable
be_msix_enable
adapter
adapter
if (status)			return status;
status
status
return status;
status
status
status = be_setup_queues(adapter);
status = be_setup_queues(adapter)
status
status
be_setup_queues(adapter)
be_setup_queues
be_setup_queues
adapter
adapter
if (status)		return status;
status
status
return status;
status
status
be_schedule_worker(adapter);
be_schedule_worker(adapter)
be_schedule_worker
be_schedule_worker
adapter
adapter
if (netif_running(netdev))		status = be_open(netdev);
netif_running(netdev)
netif_running
netif_running
netdev
netdev
status = be_open(netdev);
status = be_open(netdev)
status
status
be_open(netdev)
be_open
be_open
netdev
netdev
return status;
status
status
-----joern-----
(49,31,0)
(59,31,0)
(25,35,0)
(13,25,0)
(5,21,0)
(39,27,0)
(58,38,0)
(41,4,0)
(50,31,0)
(1,35,0)
(7,8,0)
(4,19,0)
(11,5,0)
(57,39,0)
(22,31,0)
(42,21,0)
(18,9,0)
(18,38,0)
(54,19,0)
(33,21,0)
(15,20,0)
(5,31,0)
(43,31,0)
(2,16,0)
(38,21,0)
(54,16,0)
(34,31,0)
(53,36,0)
(56,10,0)
(20,31,0)
(60,4,0)
(53,20,0)
(45,32,0)
(44,27,0)
(20,16,0)
(37,32,0)
(8,19,0)
(26,36,0)
(47,40,0)
(30,10,0)
(39,31,0)
(32,37,0)
(40,19,0)
(28,42,0)
(3,57,0)
(12,1,0)
(27,21,0)
(24,9,0)
(27,39,0)
(20,39,0)
(29,18,0)
(19,31,0)
(10,21,0)
(23,34,0)
(34,21,0)
(16,54,0)
(46,39,0)
(1,19,0)
(48,31,0)
(33,31,0)
(36,18,0)
(53,57,0)
(14,54,0)
(4,21,0)
(19,4,0)
(25,19,0)
(32,21,0)
(17,33,0)
(51,19,0)
(10,6,0)
(0,31,0)
(38,18,0)
(6,10,0)
(54,19,1)
(54,14,1)
(18,38,1)
(28,6,1)
(57,39,1)
(60,51,1)
(11,42,1)
(17,8,1)
(20,15,1)
(4,21,1)
(1,12,1)
(33,21,1)
(58,29,1)
(40,19,1)
(12,8,1)
(11,6,1)
(40,47,1)
(44,46,1)
(32,45,1)
(8,19,1)
(2,40,1)
(53,20,1)
(46,37,1)
(15,40,1)
(26,55,1)
(6,10,1)
(55,18,1)
(29,37,1)
(41,60,1)
(30,56,1)
(1,19,1)
(4,41,1)
(20,16,1)
(10,30,1)
(23,52,1)
(25,13,1)
(46,55,1)
(8,7,1)
(25,19,1)
(42,21,1)
(27,21,1)
(17,25,1)
(36,26,1)
(19,4,1)
(53,36,1)
(34,23,1)
(10,21,1)
(38,21,1)
(5,21,1)
(34,21,1)
(33,17,1)
(37,32,1)
(7,19,1)
(52,39,1)
(53,57,1)
(38,58,1)
(20,39,1)
(3,52,1)
(32,21,1)
(56,33,1)
(15,16,1)
(27,44,1)
(13,1,1)
(16,54,1)
(36,18,1)
(45,5,1)
(39,27,1)
(14,2,1)
(57,3,1)
(47,34,1)
(42,28,1)
(5,11,1)
(25,8,2)
(29,37,2)
(27,37,2)
(47,52,2)
(10,21,2)
(54,40,2)
(20,52,2)
(5,21,2)
(19,4,2)
(4,21,2)
(16,54,2)
(53,20,2)
(26,55,2)
(14,40,2)
(57,52,2)
(44,55,2)
(38,37,2)
(40,52,2)
(34,52,2)
(42,6,2)
(8,19,2)
(39,27,2)
(44,37,2)
(39,55,2)
(18,37,2)
(46,55,2)
(6,10,2)
(23,52,2)
(27,55,2)
(1,8,2)
(27,21,2)
(20,39,2)
(38,21,2)
(16,40,2)
(36,18,2)
(53,36,2)
(46,37,2)
(33,21,2)
(18,38,2)
(39,37,2)
(53,57,2)
(13,8,2)
(32,21,2)
(52,37,2)
(34,21,2)
(20,16,2)
(15,52,2)
(3,52,2)
(25,19,2)
(57,39,2)
(2,40,2)
(12,8,2)
(36,55,2)
(42,21,2)
(1,19,2)
(28,6,2)
(55,37,2)
(58,37,2)
(52,55,2)
(54,19,2)
(40,19,2)
(37,32,2)
-----------------------------------
(0,if (status)
(1,netif_carrier_off(netdev)
(2,status)
(3,status)
(4,adapter->netdev)
(5,be_clear_queues(adapter)
(6,!adapter->num_msix_roce_vec)
(7,netdev)
(8,netif_running(netdev)
(9,)
(10,adapter->num_msix_roce_vec)
(11,adapter)
(12,netdev)
(13,netdev)
(14,netdev)
(15,status)
(16,status = be_open(netdev)
(17,adapter)
(18,status = be_msix_enable(adapter)
(19,*netdev = adapter->netdev)
(20,return status;)
(21,struct be_adapter *adapter)
(22,netdev)
(23,adapter)
(24,if (status)
(25,be_close(netdev)
(26,status)
(27,be_setup_queues(adapter)
(28,adapter)
(29,status)
(30,num_msix_roce_vec)
(31,)
(32,msix_enabled(adapter)
(33,be_cancel_worker(adapter)
(34,be_schedule_worker(adapter)
(35,)
(36,return status;)
(37,!msix_enabled(adapter)
(38,be_msix_enable(adapter)
(39,status = be_setup_queues(adapter)
(40,netif_running(netdev)
(41,netdev)
(42,be_msix_disable(adapter)
(43,status)
(44,adapter)
(45,adapter)
(46,status)
(47,netdev)
(48,if (netif_running(netdev)
(49,if (netif_running(netdev)
(50,if (!msix_enabled(adapter)
(51,netdev)
(52,status)
(53,RET)
(54,be_open(netdev)
(55,status)
(56,adapter)
(57,return status;)
(58,adapter)
(59,if (!adapter->num_msix_roce_vec)
(60,adapter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^