-----label-----
0
-----code-----
static int srpt_parse_i_port_id(u8 i_port_id[16], const char *name)
{
	const char *p;
	unsigned len, count, leading_zero_bytes;
	int ret;

	p = name;
	if (strncasecmp(p, "0x", 2) == 0)
		p += 2;
	ret = -EINVAL;
	len = strlen(p);
	if (len % 2)
		goto out;
	count = min(len / 2, 16U);
	leading_zero_bytes = 16 - count;
	memset(i_port_id, 0, leading_zero_bytes);
	ret = hex2bin(i_port_id + leading_zero_bytes, p, count);
	if (ret < 0)
		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", ret);
out:
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
10,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
18,19
19,20
19,21
21,22
21,23
24,25
25,26
25,27
25,28
25,29
27,28
29,30
31,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
46,48
46,49
46,50
47,48
49,50
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
80,81
82,83
83,84
83,85
84,85
86,87
86,88
86,89
87,88
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
100,101
102,103
103,104
103,105
103,106
103,107
104,105
106,107
109,110
111,112
112,113
112,114
113,114
115,116
115,117
115,118
115,119
116,117
118,119
118,120
119,120
121,122
123,124
125,126
127,128
127,129
128,129
128,130
129,130
132,133
133,134
133,135
133,136
134,135
137,138
139,140
139,141
141,142
142,143
-----nextToken-----
2,4,7,9,11,13,15,16,20,22,23,26,28,30,32,35,37,41,43,48,50,51,52,53,57,58,62,65,69,72,74,78,79,81,85,88,91,92,93,97,99,101,105,107,108,110,114,117,120,122,124,126,130,131,135,136,138,140,143
-----computeFrom-----
39,40
39,41
45,46
45,47
55,56
55,57
60,61
60,62
67,68
67,69
76,77
76,78
83,84
83,85
89,90
89,91
95,96
95,97
98,99
98,100
112,113
112,114
118,119
118,120
128,129
128,130
-----guardedBy-----
50,57
130,138
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int srpt_parse_i_port_id(u8 i_port_id[16], const char *name){	const char *p;	unsigned len, count, leading_zero_bytes;	int ret;	p = name;	if (strncasecmp(p, "0x", 2) == 0)		p += 2;	ret = -EINVAL;	len = strlen(p);	if (len % 2)		goto out;	count = min(len / 2, 16U);	leading_zero_bytes = 16 - count;	memset(i_port_id, 0, leading_zero_bytes);	ret = hex2bin(i_port_id + leading_zero_bytes, p, count);	if (ret < 0)		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", ret);out:	return ret;}
static int
srpt_parse_i_port_id(u8 i_port_id[16], const char *name)
srpt_parse_i_port_id
u8 i_port_id[16]
u8
u8
i_port_id[16]
i_port_id
[16]
16
const char *name
const char
*name
*
name
{	const char *p;	unsigned len, count, leading_zero_bytes;	int ret;	p = name;	if (strncasecmp(p, "0x", 2) == 0)		p += 2;	ret = -EINVAL;	len = strlen(p);	if (len % 2)		goto out;	count = min(len / 2, 16U);	leading_zero_bytes = 16 - count;	memset(i_port_id, 0, leading_zero_bytes);	ret = hex2bin(i_port_id + leading_zero_bytes, p, count);	if (ret < 0)		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", ret);out:	return ret;}
const char *p;
const char *p;
const char
*p
*
p
unsigned len, count, leading_zero_bytes;
unsigned len, count, leading_zero_bytes;
unsigned
len
len
count
count
leading_zero_bytes
leading_zero_bytes
int ret;
int ret;
int
ret
ret
p = name;
p = name
p
p
name
name
if (strncasecmp(p, "0x", 2) == 0)		p += 2;
strncasecmp(p, "0x", 2) == 0
strncasecmp(p, "0x", 2)
strncasecmp
strncasecmp
p
p
"0x"
2
0
p += 2;
p += 2
p
p
2
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
len = strlen(p);
len = strlen(p)
len
len
strlen(p)
strlen
strlen
p
p
if (len % 2)		goto out;
len % 2
len
len
2
goto out;
out
count = min(len / 2, 16U);
count = min(len / 2, 16U)
count
count
min(len / 2, 16U)
min
min
len / 2
len
len
2
16U
leading_zero_bytes = 16 - count;
leading_zero_bytes = 16 - count
leading_zero_bytes
leading_zero_bytes
16 - count
16
count
count
memset(i_port_id, 0, leading_zero_bytes);
memset(i_port_id, 0, leading_zero_bytes)
memset
memset
i_port_id
i_port_id
0
leading_zero_bytes
leading_zero_bytes
ret = hex2bin(i_port_id + leading_zero_bytes, p, count);
ret = hex2bin(i_port_id + leading_zero_bytes, p, count)
ret
ret
hex2bin(i_port_id + leading_zero_bytes, p, count)
hex2bin
hex2bin
i_port_id + leading_zero_bytes
i_port_id
i_port_id
leading_zero_bytes
leading_zero_bytes
p
p
count
count
if (ret < 0)		pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", ret);
ret < 0
ret
ret
0
pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", ret);
pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\n", ret)
pr_debug
pr_debug
"hex2bin failed for srpt_parse_i_port_id: %d\n"
ret
ret
out:	return ret;
out
return ret;
ret
ret
-----joern-----
(8,44,0)
(32,44,0)
(9,8,0)
(57,54,0)
(26,44,0)
(49,40,0)
(24,32,0)
(53,23,0)
(58,53,0)
(55,8,0)
(43,54,0)
(22,11,0)
(52,44,0)
(40,11,0)
(60,46,0)
(41,45,0)
(14,8,0)
(68,40,0)
(6,17,0)
(63,6,0)
(16,9,0)
(12,53,0)
(32,38,0)
(36,50,0)
(18,46,0)
(5,64,0)
(56,45,0)
(46,60,0)
(38,44,0)
(4,23,0)
(11,60,0)
(45,23,0)
(40,53,0)
(17,40,0)
(30,44,0)
(27,17,0)
(33,46,0)
(48,53,0)
(3,44,0)
(10,67,0)
(46,3,0)
(29,60,0)
(62,45,0)
(50,38,0)
(23,39,0)
(17,44,0)
(47,44,0)
(32,17,0)
(64,8,0)
(9,40,0)
(1,58,0)
(0,44,0)
(7,55,0)
(38,50,0)
(59,3,0)
(40,17,0)
(20,44,0)
(28,32,0)
(34,9,0)
(66,64,0)
(61,64,0)
(65,45,0)
(42,38,0)
(58,3,0)
(37,44,0)
(8,55,0)
(58,23,0)
(67,3,0)
(40,9,0)
(54,17,0)
(64,44,0)
(40,23,0)
(9,19,0)
(25,23,0)
(23,44,0)
(64,19,0)
(60,11,0)
(45,65,0)
(2,44,0)
(35,67,0)
(55,11,0)
(15,65,0)
(21,55,0)
(13,44,0)
(3,58,0)
(11,44,0)
(51,6,0)
(54,17,1)
(7,21,1)
(66,8,1)
(24,54,1)
(63,17,1)
(32,17,1)
(42,65,1)
(65,15,1)
(15,45,1)
(49,68,1)
(12,65,1)
(42,53,1)
(61,66,1)
(28,32,1)
(36,42,1)
(67,35,1)
(53,48,1)
(65,45,1)
(31,67,1)
(46,3,1)
(58,23,1)
(5,61,1)
(58,1,1)
(32,38,1)
(17,40,1)
(64,5,1)
(55,7,1)
(41,56,1)
(62,23,1)
(23,25,1)
(1,59,1)
(3,58,1)
(40,11,1)
(54,43,1)
(58,53,1)
(29,46,1)
(68,9,1)
(53,23,1)
(8,55,1)
(45,23,1)
(40,53,1)
(45,41,1)
(16,27,1)
(40,49,1)
(34,16,1)
(11,60,1)
(32,24,1)
(23,39,1)
(51,63,1)
(9,34,1)
(24,6,1)
(18,33,1)
(6,51,1)
(33,22,1)
(43,57,1)
(40,23,1)
(22,67,1)
(10,3,1)
(60,46,1)
(64,19,1)
(35,10,1)
(21,14,1)
(64,8,1)
(48,12,1)
(46,18,1)
(27,64,1)
(55,11,1)
(59,38,1)
(67,3,1)
(56,62,1)
(24,31,1)
(9,8,1)
(14,11,1)
(57,6,1)
(25,4,1)
(6,17,1)
(40,9,1)
(60,29,1)
(38,50,1)
(9,19,1)
(50,36,1)
(40,23,2)
(40,53,2)
(64,19,2)
(5,67,2)
(40,67,2)
(55,67,2)
(68,67,2)
(53,65,2)
(48,65,2)
(6,67,2)
(57,6,2)
(40,9,2)
(65,45,2)
(8,55,2)
(54,17,2)
(14,67,2)
(32,17,2)
(9,8,2)
(29,67,2)
(58,23,2)
(64,8,2)
(23,39,2)
(40,11,2)
(63,67,2)
(61,67,2)
(9,67,2)
(55,11,2)
(67,3,2)
(45,23,2)
(49,67,2)
(12,65,2)
(28,32,2)
(38,50,2)
(22,67,2)
(60,46,2)
(8,67,2)
(18,67,2)
(54,6,2)
(21,67,2)
(53,23,2)
(33,67,2)
(46,3,2)
(58,53,2)
(46,67,2)
(3,58,2)
(32,38,2)
(6,17,2)
(60,67,2)
(9,19,2)
(43,6,2)
(66,67,2)
(27,67,2)
(34,67,2)
(16,67,2)
(31,67,2)
(17,67,2)
(51,67,2)
(64,67,2)
(17,40,2)
(7,67,2)
(11,60,2)
(11,67,2)
-----------------------------------
(0,count)
(1,p)
(2,if (len % 2)
(3,len = strlen(p)
(4,p)
(5,leading_zero_bytes)
(6,ret < 0)
(7,count)
(8,leading_zero_bytes = 16 - count)
(9,i_port_id + leading_zero_bytes)
(10,len)
(11,count = min(len / 2, 16U)
(12,p)
(13,out:)
(14,leading_zero_bytes)
(15,0)
(16,i_port_id)
(17,ret = hex2bin(i_port_id + leading_zero_bytes, p, count)
(18,2)
(19,u8 i_port_id[16])
(20,if (strncasecmp(p, "0x", 2)
(21,16)
(22,count)
(23,p = name)
(24,ret)
(25,name)
(26,ret)
(27,ret)
(28,RET)
(29,16U)
(30,leading_zero_bytes)
(31,goto out;)
(32,return ret;)
(33,len)
(34,leading_zero_bytes)
(35,2)
(36,EINVAL)
(37,len)
(38,ret = -EINVAL)
(39,const char *name)
(40,hex2bin(i_port_id + leading_zero_bytes, p, count)
(41,2)
(42,ret)
(43,ret)
(44,)
(45,strncasecmp(p, "0x", 2)
(46,len / 2)
(47,if (ret < 0)
(48,2)
(49,count)
(50,-EINVAL)
(51,0)
(52,p)
(53,p += 2)
(54,pr_debug("hex2bin failed for srpt_parse_i_port_id: %d\\n", ret)
(55,16 - count)
(56,"0x")
(57,"hex2bin failed for srpt_parse_i_port_id: %d\\n")
(58,strlen(p)
(59,len)
(60,min(len / 2, 16U)
(61,0)
(62,p)
(63,ret)
(64,memset(i_port_id, 0, leading_zero_bytes)
(65,strncasecmp(p, "0x", 2)
(66,i_port_id)
(67,len % 2)
(68,p)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^