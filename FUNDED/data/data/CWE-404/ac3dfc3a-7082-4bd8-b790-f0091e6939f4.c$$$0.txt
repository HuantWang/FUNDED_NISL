-----label-----
1
-----code-----
int pnp_assign_resources(struct pnp_dev *dev, int depnum)
{
	struct pnp_port *port;
	struct pnp_mem *mem;
	struct pnp_irq *irq;
	struct pnp_dma *dma;
	int nport = 0, nmem = 0, nirq = 0, ndma = 0;

	if (!pnp_can_configure(dev))
		return -ENODEV;

	down(&pnp_res_mutex);
	pnp_clean_resources(&dev->res); /* start with a fresh slate */
	if (dev->independent) {
		port = dev->independent->port;
		mem = dev->independent->mem;
		irq = dev->independent->irq;
		dma = dev->independent->dma;
		while (port) {
			if (!pnp_assign_port(dev, port, nport))
				goto fail;
			nport++;
			port = port->next;
		}
		while (mem) {
			if (!pnp_assign_mem(dev, mem, nmem))
				goto fail;
			nmem++;
			mem = mem->next;
		}
		while (irq) {
			if (!pnp_assign_irq(dev, irq, nirq))
				goto fail;
			nirq++;
			irq = irq->next;
		}
		while (dma) {
			if (!pnp_assign_dma(dev, dma, ndma))
				goto fail;
			ndma++;
			dma = dma->next;
		}
	}

	if (depnum) {
		struct pnp_option *dep;
		int i;
		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
			if(!dep)
				goto fail;
		port =dep->port;
		mem = dep->mem;
		irq = dep->irq;
		dma = dep->dma;
		while (port) {
			if (!pnp_assign_port(dev, port, nport))
				goto fail;
			nport++;
			port = port->next;
		}
		while (mem) {
			if (!pnp_assign_mem(dev, mem, nmem))
				goto fail;
			nmem++;
			mem = mem->next;
		}
		while (irq) {
			if (!pnp_assign_irq(dev, irq, nirq))
				goto fail;
			nirq++;
			irq = irq->next;
		}
		while (dma) {
			if (!pnp_assign_dma(dev, dma, ndma))
				goto fail;
			ndma++;
			dma = dma->next;
		}
	} else if (dev->dependent)
		goto fail;

	up(&pnp_res_mutex);
	return 1;

fail:
	pnp_clean_resources(&dev->res);
	up(&pnp_res_mutex);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
16,17
17,18
17,19
18,19
20,21
20,22
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
45,48
45,49
45,50
47,48
47,49
49,50
51,52
51,53
53,54
55,56
55,57
57,58
59,60
59,61
61,62
63,64
63,65
64,65
65,66
65,67
66,67
68,69
70,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
79,80
79,81
82,83
83,84
83,85
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
96,98
96,99
96,100
96,101
96,102
96,103
96,104
97,98
98,99
98,100
99,100
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
111,112
111,113
112,113
112,114
113,114
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
123,124
127,128
128,129
128,130
129,130
131,132
131,133
132,133
132,134
133,134
137,138
137,139
138,139
140,141
140,142
140,143
141,142
141,143
142,143
143,144
143,145
143,146
143,147
144,145
146,147
148,149
150,151
152,153
154,155
155,156
156,157
158,159
159,160
159,161
160,161
162,163
162,164
163,164
166,167
166,168
167,168
169,170
169,171
169,172
170,171
170,172
171,172
172,173
172,174
172,175
172,176
173,174
175,176
177,178
179,180
181,182
183,184
184,185
185,186
187,188
188,189
188,190
189,190
191,192
191,193
192,193
195,196
195,197
196,197
198,199
198,200
198,201
199,200
199,201
200,201
201,202
201,203
201,204
201,205
202,203
204,205
206,207
208,209
210,211
212,213
213,214
214,215
216,217
217,218
217,219
218,219
220,221
220,222
221,222
224,225
224,226
225,226
227,228
227,229
227,230
228,229
228,230
229,230
230,231
230,232
230,233
230,234
231,232
233,234
235,236
237,238
239,240
241,242
242,243
243,244
245,246
246,247
246,248
247,248
249,250
249,251
250,251
253,254
253,255
253,256
254,255
256,257
256,258
256,259
256,260
256,261
256,262
256,263
256,264
256,265
256,266
256,267
257,258
258,259
258,260
259,260
261,262
261,263
264,265
265,266
265,267
267,268
269,270
269,271
269,272
269,273
270,271
271,272
271,273
272,273
272,274
273,274
276,277
276,278
277,278
279,280
279,281
280,281
283,284
283,285
284,285
286,287
288,289
288,290
289,290
290,291
292,293
292,294
293,294
295,296
295,297
296,297
299,300
299,301
300,301
301,302
303,304
305,306
306,307
306,308
307,308
309,310
309,311
310,311
313,314
314,315
314,316
315,316
317,318
317,319
318,319
321,322
322,323
322,324
323,324
325,326
325,327
326,327
329,330
330,331
330,332
331,332
333,334
333,335
334,335
337,338
337,339
338,339
340,341
340,342
340,343
341,342
341,343
342,343
343,344
343,345
343,346
343,347
344,345
346,347
348,349
350,351
352,353
354,355
355,356
356,357
358,359
359,360
359,361
360,361
362,363
362,364
363,364
366,367
366,368
367,368
369,370
369,371
369,372
370,371
370,372
371,372
372,373
372,374
372,375
372,376
373,374
375,376
377,378
379,380
381,382
383,384
384,385
385,386
387,388
388,389
388,390
389,390
391,392
391,393
392,393
395,396
395,397
396,397
398,399
398,400
398,401
399,400
399,401
400,401
401,402
401,403
401,404
401,405
402,403
404,405
406,407
408,409
410,411
412,413
413,414
414,415
416,417
417,418
417,419
418,419
420,421
420,422
421,422
424,425
424,426
425,426
427,428
427,429
427,430
428,429
428,430
429,430
430,431
430,432
430,433
430,434
431,432
433,434
435,436
437,438
439,440
441,442
442,443
443,444
445,446
446,447
446,448
447,448
449,450
449,451
450,451
453,454
453,455
454,455
454,456
455,456
458,459
460,461
461,462
461,463
462,463
464,465
465,466
467,468
469,470
469,471
471,472
472,473
472,474
473,474
475,476
476,477
476,478
477,478
480,481
481,482
481,483
482,483
484,485
485,486
487,488
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,29,33,35,36,40,42,43,46,48,50,52,54,56,58,60,62,67,69,73,77,80,81,85,89,90,94,95,100,104,105,106,110,114,115,116,120,124,125,126,130,134,135,136,139,145,147,149,151,153,157,161,164,165,168,174,176,178,180,182,186,190,193,194,197,203,205,207,209,211,215,219,222,223,226,232,234,236,238,240,244,248,251,252,255,260,262,263,266,268,274,275,278,281,282,285,287,291,294,297,298,302,304,308,311,312,316,319,320,324,327,328,332,335,336,339,345,347,349,351,353,357,361,364,365,368,374,376,378,380,382,386,390,393,394,397,403,405,407,409,411,415,419,422,423,426,432,434,436,438,440,444,448,451,452,456,457,459,463,466,468,470,474,478,479,483,486,488
-----computeFrom-----
98,99
98,100
108,109
108,110
118,119
118,120
128,129
128,130
159,160
159,161
188,189
188,190
217,218
217,219
246,247
246,248
272,273
272,274
276,277
276,278
283,284
283,285
292,293
292,294
306,307
306,308
314,315
314,316
322,323
322,324
330,331
330,332
359,360
359,361
388,389
388,390
417,418
417,419
446,447
446,448
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;ExpressionList;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionList;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int pnp_assign_resources(struct pnp_dev *dev, int depnum){	struct pnp_port *port;	struct pnp_mem *mem;	struct pnp_irq *irq;	struct pnp_dma *dma;	int nport = 0, nmem = 0, nirq = 0, ndma = 0;	if (!pnp_can_configure(dev))		return -ENODEV;	down(&pnp_res_mutex);	pnp_clean_resources(&dev->res); /* start with a fresh slate */	if (dev->independent) {		port = dev->independent->port;		mem = dev->independent->mem;		irq = dev->independent->irq;		dma = dev->independent->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	}	if (depnum) {		struct pnp_option *dep;		int i;		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)			if(!dep)				goto fail;		port =dep->port;		mem = dep->mem;		irq = dep->irq;		dma = dep->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	} else if (dev->dependent)		goto fail;	up(&pnp_res_mutex);	return 1;fail:	pnp_clean_resources(&dev->res);	up(&pnp_res_mutex);	return 0;}
int
pnp_assign_resources(struct pnp_dev *dev, int depnum)
pnp_assign_resources
struct pnp_dev *dev
struct pnp_dev
pnp_dev
*dev
*
dev
int depnum
int
depnum
depnum
{	struct pnp_port *port;	struct pnp_mem *mem;	struct pnp_irq *irq;	struct pnp_dma *dma;	int nport = 0, nmem = 0, nirq = 0, ndma = 0;	if (!pnp_can_configure(dev))		return -ENODEV;	down(&pnp_res_mutex);	pnp_clean_resources(&dev->res); /* start with a fresh slate */	if (dev->independent) {		port = dev->independent->port;		mem = dev->independent->mem;		irq = dev->independent->irq;		dma = dev->independent->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	}	if (depnum) {		struct pnp_option *dep;		int i;		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)			if(!dep)				goto fail;		port =dep->port;		mem = dep->mem;		irq = dep->irq;		dma = dep->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	} else if (dev->dependent)		goto fail;	up(&pnp_res_mutex);	return 1;fail:	pnp_clean_resources(&dev->res);	up(&pnp_res_mutex);	return 0;}
struct pnp_port *port;
struct pnp_port *port;
struct pnp_port
pnp_port
*port
*
port
struct pnp_mem *mem;
struct pnp_mem *mem;
struct pnp_mem
pnp_mem
*mem
*
mem
struct pnp_irq *irq;
struct pnp_irq *irq;
struct pnp_irq
pnp_irq
*irq
*
irq
struct pnp_dma *dma;
struct pnp_dma *dma;
struct pnp_dma
pnp_dma
*dma
*
dma
int nport = 0, nmem = 0, nirq = 0, ndma = 0;
int nport = 0, nmem = 0, nirq = 0, ndma = 0;
int
nport = 0
nport
= 0
0
nmem = 0
nmem
= 0
0
nirq = 0
nirq
= 0
0
ndma = 0
ndma
= 0
0
if (!pnp_can_configure(dev))		return -ENODEV;
!pnp_can_configure(dev)
pnp_can_configure(dev)
pnp_can_configure
pnp_can_configure
dev
dev
return -ENODEV;
-ENODEV
ENODEV
ENODEV
down(&pnp_res_mutex);
down(&pnp_res_mutex);
down
down
(&pnp_res_mutex)
&pnp_res_mutex
&
pnp_res_mutex
pnp_clean_resources(&dev->res);
pnp_clean_resources(&dev->res)
pnp_clean_resources
pnp_clean_resources
&dev->res
dev->res
dev
dev
res
if (dev->independent) {		port = dev->independent->port;		mem = dev->independent->mem;		irq = dev->independent->irq;		dma = dev->independent->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	}
dev->independent
dev
dev
independent
{		port = dev->independent->port;		mem = dev->independent->mem;		irq = dev->independent->irq;		dma = dev->independent->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	}
port = dev->independent->port;
port = dev->independent->port
port
port
dev->independent->port
dev->independent
dev
dev
independent
port
mem = dev->independent->mem;
mem = dev->independent->mem
mem
mem
dev->independent->mem
dev->independent
dev
dev
independent
mem
irq = dev->independent->irq;
irq = dev->independent->irq
irq
irq
dev->independent->irq
dev->independent
dev
dev
independent
irq
dma = dev->independent->dma;
dma = dev->independent->dma
dma
dma
dev->independent->dma
dev->independent
dev
dev
independent
dma
while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}
port
port
{			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}
if (!pnp_assign_port(dev, port, nport))				goto fail;
!pnp_assign_port(dev, port, nport)
pnp_assign_port(dev, port, nport)
pnp_assign_port
pnp_assign_port
dev
dev
port
port
nport
nport
goto fail;
fail
nport++;
nport++
nport
nport
port = port->next;
port = port->next
port
port
port->next
port
port
next
while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}
mem
mem
{			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}
if (!pnp_assign_mem(dev, mem, nmem))				goto fail;
!pnp_assign_mem(dev, mem, nmem)
pnp_assign_mem(dev, mem, nmem)
pnp_assign_mem
pnp_assign_mem
dev
dev
mem
mem
nmem
nmem
goto fail;
fail
nmem++;
nmem++
nmem
nmem
mem = mem->next;
mem = mem->next
mem
mem
mem->next
mem
mem
next
while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}
irq
irq
{			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}
if (!pnp_assign_irq(dev, irq, nirq))				goto fail;
!pnp_assign_irq(dev, irq, nirq)
pnp_assign_irq(dev, irq, nirq)
pnp_assign_irq
pnp_assign_irq
dev
dev
irq
irq
nirq
nirq
goto fail;
fail
nirq++;
nirq++
nirq
nirq
irq = irq->next;
irq = irq->next
irq
irq
irq->next
irq
irq
next
while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}
dma
dma
{			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}
if (!pnp_assign_dma(dev, dma, ndma))				goto fail;
!pnp_assign_dma(dev, dma, ndma)
pnp_assign_dma(dev, dma, ndma)
pnp_assign_dma
pnp_assign_dma
dev
dev
dma
dma
ndma
ndma
goto fail;
fail
ndma++;
ndma++
ndma
ndma
dma = dma->next;
dma = dma->next
dma
dma
dma->next
dma
dma
next
if (depnum) {		struct pnp_option *dep;		int i;		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)			if(!dep)				goto fail;		port =dep->port;		mem = dep->mem;		irq = dep->irq;		dma = dep->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	} else if (dev->dependent)		goto fail;
depnum
depnum
{		struct pnp_option *dep;		int i;		for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)			if(!dep)				goto fail;		port =dep->port;		mem = dep->mem;		irq = dep->irq;		dma = dep->dma;		while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}		while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}		while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}		while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}	}
struct pnp_option *dep;
struct pnp_option *dep;
struct pnp_option
pnp_option
*dep
*
dep
int i;
int i;
int
i
i
for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)			if(!dep)				goto fail;
i=1,dep=dev->dependent;
i=1,dep=dev->dependent
i=1
i
i
1
dep=dev->dependent
dep
dep
dev->dependent
dev
dev
dependent
i<depnum
i
i
depnum
depnum
i++, dep=dep->next
i++
i
i
dep=dep->next
dep
dep
dep->next
dep
dep
next
if(!dep)				goto fail;
!dep
dep
dep
goto fail;
fail
port =dep->port;
port =dep->port
port
port
dep->port
dep
dep
port
mem = dep->mem;
mem = dep->mem
mem
mem
dep->mem
dep
dep
mem
irq = dep->irq;
irq = dep->irq
irq
irq
dep->irq
dep
dep
irq
dma = dep->dma;
dma = dep->dma
dma
dma
dep->dma
dep
dep
dma
while (port) {			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}
port
port
{			if (!pnp_assign_port(dev, port, nport))				goto fail;			nport++;			port = port->next;		}
if (!pnp_assign_port(dev, port, nport))				goto fail;
!pnp_assign_port(dev, port, nport)
pnp_assign_port(dev, port, nport)
pnp_assign_port
pnp_assign_port
dev
dev
port
port
nport
nport
goto fail;
fail
nport++;
nport++
nport
nport
port = port->next;
port = port->next
port
port
port->next
port
port
next
while (mem) {			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}
mem
mem
{			if (!pnp_assign_mem(dev, mem, nmem))				goto fail;			nmem++;			mem = mem->next;		}
if (!pnp_assign_mem(dev, mem, nmem))				goto fail;
!pnp_assign_mem(dev, mem, nmem)
pnp_assign_mem(dev, mem, nmem)
pnp_assign_mem
pnp_assign_mem
dev
dev
mem
mem
nmem
nmem
goto fail;
fail
nmem++;
nmem++
nmem
nmem
mem = mem->next;
mem = mem->next
mem
mem
mem->next
mem
mem
next
while (irq) {			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}
irq
irq
{			if (!pnp_assign_irq(dev, irq, nirq))				goto fail;			nirq++;			irq = irq->next;		}
if (!pnp_assign_irq(dev, irq, nirq))				goto fail;
!pnp_assign_irq(dev, irq, nirq)
pnp_assign_irq(dev, irq, nirq)
pnp_assign_irq
pnp_assign_irq
dev
dev
irq
irq
nirq
nirq
goto fail;
fail
nirq++;
nirq++
nirq
nirq
irq = irq->next;
irq = irq->next
irq
irq
irq->next
irq
irq
next
while (dma) {			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}
dma
dma
{			if (!pnp_assign_dma(dev, dma, ndma))				goto fail;			ndma++;			dma = dma->next;		}
if (!pnp_assign_dma(dev, dma, ndma))				goto fail;
!pnp_assign_dma(dev, dma, ndma)
pnp_assign_dma(dev, dma, ndma)
pnp_assign_dma
pnp_assign_dma
dev
dev
dma
dma
ndma
ndma
goto fail;
fail
ndma++;
ndma++
ndma
ndma
dma = dma->next;
dma = dma->next
dma
dma
dma->next
dma
dma
next
if (dev->dependent)		goto fail;
dev->dependent
dev
dev
dependent
goto fail;
fail
up(&pnp_res_mutex);
up(&pnp_res_mutex)
up
up
&pnp_res_mutex
pnp_res_mutex
pnp_res_mutex
return 1;
1
fail:	pnp_clean_resources(&dev->res);
fail
pnp_clean_resources(&dev->res);
pnp_clean_resources(&dev->res)
pnp_clean_resources
pnp_clean_resources
&dev->res
dev->res
dev
dev
res
up(&pnp_res_mutex);
up(&pnp_res_mutex)
up
up
&pnp_res_mutex
pnp_res_mutex
pnp_res_mutex
return 0;
0
-----joern-----
(232,212,0)
(46,137,0)
(88,71,0)
(23,142,0)
(207,68,0)
(202,60,0)
(38,276,0)
(198,163,0)
(135,169,0)
(168,272,0)
(266,219,0)
(199,4,0)
(43,175,0)
(221,9,0)
(53,190,0)
(114,241,0)
(262,11,0)
(4,23,0)
(267,92,0)
(43,259,0)
(158,175,0)
(66,24,0)
(102,106,0)
(232,94,0)
(130,69,0)
(167,230,0)
(192,272,0)
(161,94,0)
(164,252,0)
(89,191,0)
(79,221,0)
(230,127,0)
(109,221,0)
(10,233,0)
(10,225,0)
(84,94,0)
(151,29,0)
(25,242,0)
(87,272,0)
(254,253,0)
(259,43,0)
(54,247,0)
(123,88,0)
(176,142,0)
(233,272,0)
(49,71,0)
(111,199,0)
(259,154,0)
(139,60,0)
(106,244,0)
(269,55,0)
(32,272,0)
(190,53,0)
(273,143,0)
(68,69,0)
(154,182,0)
(95,225,0)
(244,106,0)
(53,213,0)
(113,76,0)
(257,183,0)
(204,82,0)
(148,233,0)
(72,175,0)
(128,126,0)
(111,211,0)
(138,224,0)
(247,227,0)
(206,207,0)
(268,121,0)
(210,124,0)
(252,250,0)
(194,253,0)
(20,46,0)
(41,272,0)
(18,142,0)
(133,74,0)
(2,72,0)
(180,228,0)
(24,212,0)
(100,10,0)
(10,175,0)
(47,9,0)
(129,183,0)
(224,138,0)
(235,276,0)
(217,4,0)
(251,272,0)
(171,150,0)
(274,109,0)
(90,272,0)
(111,23,0)
(235,221,0)
(258,235,0)
(140,53,0)
(213,58,0)
(49,124,0)
(83,53,0)
(237,272,0)
(7,241,0)
(80,175,0)
(125,267,0)
(260,124,0)
(9,221,0)
(231,182,0)
(110,158,0)
(265,121,0)
(65,222,0)
(86,205,0)
(243,23,0)
(238,45,0)
(247,175,0)
(104,129,0)
(253,272,0)
(62,163,0)
(10,232,0)
(26,158,0)
(91,81,0)
(56,10,0)
(39,229,0)
(40,58,0)
(93,272,0)
(149,171,0)
(228,180,0)
(126,138,0)
(68,207,0)
(178,175,0)
(97,230,0)
(5,166,0)
(14,205,0)
(96,141,0)
(208,10,0)
(191,89,0)
(33,247,0)
(27,228,0)
(11,143,0)
(249,141,0)
(36,158,0)
(203,43,0)
(244,150,0)
(155,182,0)
(106,224,0)
(158,143,0)
(109,274,0)
(211,111,0)
(219,213,0)
(69,68,0)
(134,182,0)
(49,175,0)
(158,110,0)
(220,35,0)
(92,267,0)
(45,35,0)
(239,213,0)
(8,10,0)
(121,272,0)
(201,49,0)
(248,228,0)
(10,56,0)
(19,242,0)
(88,154,0)
(191,272,0)
(15,58,0)
(13,272,0)
(86,272,0)
(195,224,0)
(181,119,0)
(186,160,0)
(53,229,0)
(197,4,0)
(94,232,0)
(120,269,0)
(53,233,0)
(58,276,0)
(174,272,0)
(146,7,0)
(69,175,0)
(227,247,0)
(80,89,0)
(70,111,0)
(0,221,0)
(81,241,0)
(184,172,0)
(22,241,0)
(199,242,0)
(21,235,0)
(21,60,0)
(16,109,0)
(76,221,0)
(74,169,0)
(158,253,0)
(229,250,0)
(94,225,0)
(142,23,0)
(119,272,0)
(240,60,0)
(214,272,0)
(228,175,0)
(117,138,0)
(141,121,0)
(185,172,0)
(228,21,0)
(225,182,0)
(49,154,0)
(11,207,0)
(37,109,0)
(256,178,0)
(119,181,0)
(225,160,0)
(221,153,0)
(193,154,0)
(235,21,0)
(276,105,0)
(209,35,0)
(3,76,0)
(63,80,0)
(137,272,0)
(25,121,0)
(138,126,0)
(247,45,0)
(219,229,0)
(255,178,0)
(9,175,0)
(34,141,0)
(53,175,0)
(252,233,0)
(67,166,0)
(226,106,0)
(99,199,0)
(49,201,0)
(136,141,0)
(166,175,0)
(57,272,0)
(35,45,0)
(247,274,0)
(177,11,0)
(116,80,0)
(246,253,0)
(81,105,0)
(160,163,0)
(79,276,0)
(143,172,0)
(141,175,0)
(245,150,0)
(112,232,0)
(92,272,0)
(274,60,0)
(142,276,0)
(205,86,0)
(230,21,0)
(257,82,0)
(103,60,0)
(181,178,0)
(224,182,0)
(264,215,0)
(77,71,0)
(141,224,0)
(165,49,0)
(247,124,0)
(137,46,0)
(76,276,0)
(152,60,0)
(7,98,0)
(207,182,0)
(58,213,0)
(157,49,0)
(229,219,0)
(216,212,0)
(126,175,0)
(127,215,0)
(58,221,0)
(269,175,0)
(23,60,0)
(257,41,0)
(241,153,0)
(160,225,0)
(107,126,0)
(145,53,0)
(12,41,0)
(200,235,0)
(127,230,0)
(213,60,0)
(6,244,0)
(59,25,0)
(35,274,0)
(71,169,0)
(154,259,0)
(109,276,0)
(246,215,0)
(52,72,0)
(73,274,0)
(158,207,0)
(111,175,0)
(75,60,0)
(89,80,0)
(111,121,0)
(45,222,0)
(24,233,0)
(163,160,0)
(261,60,0)
(71,88,0)
(141,244,0)
(170,182,0)
(144,185,0)
(236,246,0)
(163,175,0)
(171,121,0)
(228,253,0)
(74,124,0)
(147,233,0)
(124,272,0)
(115,111,0)
(141,249,0)
(30,88,0)
(228,127,0)
(55,269,0)
(29,222,0)
(82,272,0)
(44,247,0)
(142,221,0)
(64,250,0)
(143,11,0)
(159,69,0)
(218,219,0)
(276,76,0)
(178,181,0)
(223,21,0)
(61,228,0)
(50,111,0)
(4,199,0)
(122,79,0)
(189,43,0)
(29,124,0)
(234,259,0)
(185,253,0)
(28,49,0)
(271,68,0)
(263,7,0)
(17,158,0)
(162,9,0)
(188,127,0)
(205,14,1)
(143,11,1)
(45,35,1)
(43,175,1)
(9,162,1)
(158,253,1)
(112,24,1)
(116,1,1)
(84,112,1)
(35,274,1)
(27,248,1)
(33,44,1)
(161,84,1)
(196,201,1)
(49,154,1)
(111,23,1)
(49,175,1)
(188,246,1)
(269,175,1)
(48,101,1)
(142,276,1)
(239,23,1)
(141,136,1)
(228,253,1)
(104,55,1)
(20,191,1)
(100,8,1)
(179,232,1)
(148,121,1)
(228,175,1)
(142,221,1)
(248,61,1)
(82,204,1)
(263,146,1)
(200,258,1)
(10,233,1)
(11,262,1)
(58,40,1)
(228,127,1)
(76,276,1)
(86,205,1)
(25,59,1)
(276,76,1)
(71,88,1)
(29,151,1)
(141,224,1)
(268,253,1)
(247,274,1)
(113,3,1)
(167,97,1)
(258,223,1)
(165,28,1)
(154,259,1)
(149,249,1)
(101,199,1)
(51,179,1)
(221,9,1)
(164,190,1)
(4,199,1)
(114,78,1)
(56,10,1)
(88,154,1)
(110,158,1)
(8,208,1)
(72,52,1)
(125,55,1)
(67,119,1)
(26,17,1)
(53,213,1)
(73,213,1)
(39,252,1)
(126,128,1)
(62,95,1)
(107,195,1)
(131,244,1)
(18,243,1)
(265,268,1)
(43,189,1)
(179,131,1)
(233,147,1)
(4,197,1)
(147,148,1)
(53,229,1)
(247,54,1)
(249,141,1)
(3,38,1)
(121,265,1)
(273,185,1)
(234,43,1)
(48,229,1)
(255,256,1)
(230,167,1)
(14,85,1)
(219,229,1)
(12,86,1)
(59,211,1)
(146,221,1)
(208,179,1)
(180,228,1)
(58,276,1)
(116,156,1)
(76,113,1)
(235,200,1)
(118,79,1)
(6,171,1)
(146,276,1)
(236,180,1)
(207,68,1)
(50,115,1)
(109,221,1)
(193,225,1)
(219,266,1)
(266,218,1)
(241,22,1)
(10,100,1)
(117,126,1)
(199,4,1)
(79,122,1)
(260,233,1)
(69,175,1)
(123,30,1)
(122,7,1)
(144,110,1)
(35,220,1)
(72,175,1)
(25,121,1)
(257,82,1)
(252,233,1)
(230,127,1)
(140,145,1)
(132,211,1)
(106,102,1)
(16,37,1)
(142,176,1)
(130,159,1)
(70,50,1)
(158,26,1)
(14,72,1)
(191,89,1)
(35,45,1)
(49,165,1)
(80,175,1)
(95,224,1)
(162,47,1)
(257,41,1)
(116,132,1)
(160,186,1)
(275,56,1)
(28,157,1)
(218,39,1)
(259,234,1)
(269,120,1)
(7,263,1)
(243,21,1)
(46,20,1)
(230,21,1)
(88,71,1)
(74,133,1)
(187,190,1)
(15,239,1)
(138,126,1)
(53,175,1)
(246,236,1)
(116,270,1)
(136,34,1)
(116,118,1)
(74,124,1)
(78,166,1)
(49,124,1)
(203,193,1)
(78,51,1)
(115,101,1)
(106,244,1)
(262,177,1)
(247,175,1)
(111,175,1)
(17,36,1)
(156,227,1)
(40,15,1)
(173,154,1)
(257,183,1)
(92,267,1)
(79,221,1)
(5,67,1)
(77,74,1)
(186,163,1)
(116,275,1)
(44,85,1)
(219,213,1)
(189,203,1)
(183,129,1)
(244,106,1)
(158,175,1)
(51,71,1)
(23,142,1)
(124,210,1)
(247,124,1)
(166,175,1)
(252,164,1)
(209,238,1)
(166,5,1)
(109,276,1)
(238,29,1)
(137,46,1)
(41,12,1)
(133,201,1)
(49,71,1)
(91,79,1)
(158,207,1)
(270,72,1)
(201,49,1)
(111,121,1)
(88,123,1)
(52,2,1)
(108,274,1)
(63,116,1)
(24,66,1)
(159,206,1)
(10,225,1)
(178,255,1)
(47,0,1)
(99,25,1)
(111,70,1)
(4,23,1)
(55,269,1)
(126,175,1)
(141,121,1)
(53,233,1)
(58,221,1)
(228,21,1)
(94,232,1)
(131,173,1)
(227,247,1)
(53,83,1)
(195,207,1)
(66,56,1)
(210,260,1)
(102,226,1)
(38,81,1)
(246,253,1)
(0,241,1)
(181,178,1)
(206,166,1)
(79,276,1)
(11,207,1)
(116,187,1)
(42,249,1)
(10,175,1)
(178,175,1)
(7,241,1)
(97,188,1)
(160,163,1)
(267,125,1)
(128,107,1)
(80,63,1)
(235,221,1)
(229,219,1)
(138,117,1)
(89,80,1)
(68,271,1)
(185,144,1)
(157,51,1)
(129,104,1)
(116,31,1)
(213,58,1)
(94,225,1)
(151,227,1)
(220,209,1)
(177,273,1)
(163,175,1)
(116,196,1)
(256,92,1)
(173,143,1)
(120,124,1)
(271,69,1)
(253,254,1)
(54,33,1)
(81,241,1)
(119,181,1)
(247,45,1)
(111,199,1)
(127,230,1)
(34,96,1)
(204,137,1)
(96,131,1)
(190,53,1)
(24,233,1)
(198,62,1)
(81,91,1)
(259,43,1)
(217,99,1)
(224,138,1)
(37,73,1)
(225,160,1)
(223,7,1)
(116,42,1)
(31,180,1)
(7,98,1)
(211,111,1)
(85,48,1)
(141,175,1)
(22,114,1)
(274,109,1)
(1,110,1)
(228,27,1)
(30,77,1)
(83,140,1)
(145,48,1)
(36,173,1)
(235,276,1)
(171,121,1)
(232,94,1)
(21,235,1)
(69,130,1)
(185,253,1)
(163,198,1)
(109,16,1)
(94,161,1)
(29,124,1)
(197,217,1)
(2,78,1)
(171,149,1)
(85,45,1)
(9,175,1)
(10,232,1)
(68,69,1)
(141,244,1)
(158,143,1)
(11,143,1)
(106,224,1)
(226,6,1)
(176,18,1)
(254,194,1)
(61,108,1)
(76,221,1)
(101,108,1)
(108,127,1)
(1,110,2)
(191,201,2)
(131,249,2)
(220,227,2)
(95,166,2)
(137,110,2)
(74,124,2)
(221,78,2)
(116,180,2)
(219,213,2)
(143,11,2)
(76,221,2)
(166,55,2)
(82,211,2)
(136,131,2)
(63,249,2)
(217,211,2)
(116,79,2)
(20,211,2)
(35,227,2)
(86,205,2)
(137,227,2)
(200,7,2)
(159,166,2)
(191,89,2)
(128,166,2)
(262,110,2)
(241,78,2)
(232,94,2)
(63,110,2)
(27,108,2)
(73,7,2)
(158,143,2)
(154,166,2)
(80,227,2)
(247,124,2)
(123,201,2)
(59,211,2)
(141,131,2)
(178,55,2)
(116,56,2)
(80,190,2)
(77,201,2)
(89,72,2)
(30,201,2)
(107,166,2)
(71,201,2)
(53,213,2)
(81,79,2)
(63,79,2)
(191,211,2)
(171,249,2)
(10,225,2)
(116,190,2)
(111,23,2)
(49,124,2)
(224,166,2)
(191,180,2)
(137,180,2)
(45,35,2)
(4,23,2)
(191,110,2)
(8,179,2)
(218,190,2)
(71,88,2)
(180,228,2)
(166,175,2)
(0,78,2)
(235,7,2)
(207,166,2)
(146,78,2)
(41,72,2)
(137,56,2)
(84,56,2)
(248,108,2)
(89,249,2)
(47,78,2)
(271,166,2)
(80,249,2)
(51,201,2)
(185,110,2)
(269,175,2)
(158,207,2)
(89,56,2)
(49,51,2)
(177,110,2)
(232,56,2)
(89,211,2)
(3,79,2)
(165,51,2)
(106,244,2)
(110,173,2)
(181,178,2)
(141,244,2)
(141,175,2)
(46,72,2)
(61,108,2)
(185,253,2)
(72,175,2)
(94,232,2)
(249,141,2)
(43,166,2)
(12,72,2)
(9,175,2)
(94,225,2)
(116,211,2)
(26,173,2)
(22,78,2)
(228,127,2)
(143,110,2)
(34,131,2)
(85,227,2)
(21,7,2)
(10,233,2)
(91,79,2)
(92,55,2)
(204,72,2)
(63,180,2)
(4,211,2)
(109,7,2)
(223,7,2)
(243,7,2)
(145,48,2)
(199,4,2)
(228,175,2)
(35,274,2)
(167,180,2)
(51,179,2)
(63,201,2)
(20,110,2)
(230,127,2)
(219,190,2)
(24,233,2)
(25,121,2)
(80,79,2)
(46,227,2)
(163,166,2)
(53,175,2)
(130,166,2)
(82,180,2)
(37,7,2)
(70,101,2)
(188,180,2)
(46,79,2)
(68,166,2)
(249,131,2)
(205,72,2)
(160,166,2)
(116,201,2)
(211,111,2)
(106,249,2)
(178,175,2)
(66,56,2)
(252,190,2)
(50,101,2)
(21,235,2)
(72,78,2)
(151,227,2)
(43,175,2)
(126,166,2)
(146,79,2)
(196,201,2)
(161,56,2)
(24,56,2)
(208,179,2)
(114,78,2)
(80,72,2)
(129,55,2)
(111,199,2)
(138,126,2)
(270,72,2)
(10,232,2)
(191,249,2)
(108,180,2)
(127,180,2)
(198,166,2)
(138,166,2)
(276,79,2)
(256,55,2)
(141,121,2)
(158,253,2)
(20,72,2)
(137,190,2)
(58,276,2)
(48,190,2)
(141,224,2)
(207,68,2)
(238,227,2)
(221,9,2)
(127,230,2)
(89,180,2)
(101,108,2)
(204,190,2)
(158,175,2)
(63,227,2)
(99,211,2)
(53,229,2)
(15,7,2)
(81,241,2)
(234,166,2)
(204,227,2)
(42,249,2)
(110,158,2)
(163,175,2)
(156,227,2)
(157,51,2)
(46,110,2)
(39,190,2)
(225,160,2)
(67,55,2)
(181,55,2)
(56,179,2)
(149,249,2)
(41,85,2)
(63,211,2)
(17,173,2)
(48,101,2)
(82,110,2)
(35,45,2)
(40,7,2)
(44,85,2)
(257,41,2)
(226,249,2)
(239,7,2)
(79,7,2)
(191,79,2)
(79,276,2)
(88,154,2)
(92,267,2)
(173,110,2)
(171,121,2)
(31,180,2)
(244,249,2)
(58,221,2)
(16,7,2)
(7,241,2)
(276,76,2)
(88,71,2)
(228,108,2)
(68,69,2)
(25,211,2)
(80,110,2)
(104,55,2)
(18,7,2)
(78,166,2)
(117,166,2)
(7,79,2)
(97,180,2)
(101,211,2)
(179,56,2)
(83,48,2)
(49,175,2)
(82,190,2)
(62,166,2)
(20,79,2)
(142,276,2)
(20,249,2)
(11,207,2)
(203,166,2)
(236,180,2)
(213,58,2)
(46,201,2)
(111,175,2)
(63,72,2)
(82,72,2)
(111,101,2)
(140,48,2)
(108,7,2)
(100,179,2)
(89,80,2)
(7,98,2)
(10,179,2)
(158,173,2)
(76,79,2)
(11,110,2)
(258,7,2)
(109,276,2)
(229,190,2)
(56,10,2)
(137,79,2)
(76,276,2)
(209,227,2)
(89,190,2)
(142,221,2)
(63,190,2)
(228,21,2)
(119,55,2)
(179,131,2)
(116,110,2)
(113,79,2)
(131,173,2)
(89,79,2)
(274,7,2)
(85,48,2)
(82,79,2)
(204,180,2)
(132,211,2)
(137,46,2)
(255,55,2)
(53,48,2)
(244,106,2)
(86,72,2)
(257,82,2)
(190,53,2)
(228,253,2)
(230,180,2)
(7,78,2)
(74,201,2)
(14,72,2)
(197,211,2)
(20,227,2)
(227,247,2)
(206,166,2)
(109,221,2)
(80,180,2)
(116,72,2)
(190,48,2)
(224,138,2)
(176,7,2)
(247,45,2)
(227,85,2)
(246,253,2)
(201,49,2)
(229,219,2)
(274,109,2)
(160,163,2)
(213,7,2)
(116,249,2)
(33,85,2)
(36,173,2)
(78,51,2)
(259,166,2)
(89,227,2)
(191,190,2)
(102,249,2)
(20,201,2)
(29,124,2)
(46,211,2)
(164,190,2)
(82,249,2)
(219,229,2)
(173,166,2)
(125,55,2)
(2,78,2)
(235,276,2)
(80,175,2)
(252,233,2)
(63,56,2)
(80,201,2)
(82,201,2)
(79,221,2)
(247,85,2)
(46,190,2)
(204,79,2)
(118,79,2)
(133,201,2)
(137,211,2)
(94,56,2)
(137,201,2)
(106,224,2)
(11,143,2)
(162,78,2)
(23,142,2)
(46,180,2)
(53,233,2)
(154,259,2)
(49,71,2)
(46,56,2)
(12,85,2)
(80,211,2)
(204,110,2)
(89,110,2)
(266,190,2)
(89,201,2)
(263,78,2)
(82,56,2)
(247,175,2)
(186,166,2)
(111,121,2)
(204,56,2)
(259,43,2)
(257,183,2)
(82,227,2)
(204,249,2)
(183,55,2)
(246,180,2)
(58,7,2)
(96,131,2)
(119,181,2)
(144,110,2)
(191,227,2)
(225,166,2)
(10,175,2)
(191,56,2)
(201,51,2)
(191,72,2)
(54,85,2)
(211,101,2)
(88,201,2)
(80,56,2)
(49,154,2)
(267,55,2)
(230,21,2)
(204,201,2)
(189,166,2)
(5,55,2)
(6,249,2)
(204,211,2)
(199,211,2)
(45,227,2)
(38,79,2)
(195,166,2)
(23,7,2)
(137,249,2)
(20,56,2)
(180,108,2)
(69,166,2)
(20,190,2)
(116,227,2)
(86,85,2)
(112,56,2)
(247,274,2)
(122,7,2)
(205,85,2)
(187,190,2)
(137,72,2)
(20,180,2)
(275,56,2)
(4,199,2)
(142,7,2)
(9,78,2)
(28,51,2)
(52,78,2)
(193,166,2)
(14,85,2)
(55,269,2)
(69,175,2)
(46,249,2)
(115,101,2)
(29,227,2)
(263,79,2)
(126,175,2)
(235,221,2)
(273,110,2)
-----------------------------------
(0,dep)
(1,goto fail;)
(2,dev)
(3,dep)
(4,mem->next)
(5,independent)
(6,mem)
(7,i<depnum)
(8,irq)
(9,dev->dependent)
(10,pnp_assign_irq(dev, irq, nirq)
(11,port->next)
(12,1)
(13,if (depnum)
(14,pnp_res_mutex)
(15,dep)
(16,dma)
(17,port)
(18,dep)
(19,if (!pnp_assign_mem(dev, mem, nmem)
(20,pnp_res_mutex)
(21,port =dep->port)
(22,1)
(23,mem = dep->mem)
(24,nirq++)
(25,nmem++)
(26,nport)
(27,nport)
(28,dma)
(29,ndma++)
(30,dma)
(31,goto fail;)
(32,if (dev->independent)
(33,dma)
(34,mem)
(35,dma->next)
(36,dev)
(37,dep)
(38,dep)
(39,irq)
(40,irq)
(41,return 1;)
(42,goto fail;)
(43,dev->independent)
(44,dev)
(45,dma = dma->next)
(46,&pnp_res_mutex)
(47,dev)
(48,irq)
(49,pnp_assign_dma(dev, dma, ndma)
(50,mem)
(51,dma)
(52,dependent)
(53,pnp_assign_irq(dev, irq, nirq)
(54,ndma)
(55,!pnp_can_configure(dev)
(56,!pnp_assign_irq(dev, irq, nirq)
(57,ndma)
(58,dep->irq)
(59,nmem)
(60,)
(61,dev)
(62,dev)
(63,res)
(64,if (!pnp_assign_irq(dev, irq, nirq)
(65,if (!pnp_assign_dma(dev, dma, ndma)
(66,nirq)
(67,dev)
(68,dev->independent->port)
(69,dev->independent)
(70,nmem)
(71,dma = dma->next)
(72,dev->dependent)
(73,dma)
(74,ndma++)
(75,while (port)
(76,dep->next)
(77,dma)
(78,depnum)
(79,!dep)
(80,dev->res)
(81,i++)
(82,return 0;)
(83,nirq)
(84,irq)
(85,dma)
(86,up(&pnp_res_mutex)
(87,if (!pnp_can_configure(dev)
(88,dma->next)
(89,&dev->res)
(90,nirq)
(91,i)
(92,down(&pnp_res_mutex)
(93,dma)
(94,irq->next)
(95,irq)
(96,dev)
(97,port)
(98,int depnum)
(99,mem)
(100,nirq)
(101,mem)
(102,next)
(103,while (dma)
(104,ENODEV)
(105,)
(106,mem->next)
(107,dev)
(108,port)
(109,dep->dma)
(110,!pnp_assign_port(dev, port, nport)
(111,pnp_assign_mem(dev, mem, nmem)
(112,irq)
(113,next)
(114,i)
(115,dev)
(116,dev)
(117,mem)
(118,goto fail;)
(119,pnp_clean_resources(&dev->res)
(120,dev)
(121,nmem = 0)
(122,dep)
(123,next)
(124,ndma = 0)
(125,pnp_res_mutex)
(126,dev->independent)
(127,port = port->next)
(128,independent)
(129,-ENODEV)
(130,independent)
(131,mem)
(132,goto fail;)
(133,ndma)
(134,while (mem)
(135,if (!pnp_assign_dma(dev, dma, ndma)
(136,nmem)
(137,up(&pnp_res_mutex)
(138,dev->independent->mem)
(139,for (i=1,dep=dev->dependent; i<depnum; i++, dep=dep->next)
(140,irq)
(141,pnp_assign_mem(dev, mem, nmem)
(142,dep->mem)
(143,port = port->next)
(144,nport)
(145,dev)
(146,i)
(147,0)
(148,nirq)
(149,nmem)
(150,)
(151,ndma)
(152,dep)
(153,)
(154,dma = dev->independent->dma)
(155,while (dma)
(156,goto fail;)
(157,dev)
(158,pnp_assign_port(dev, port, nport)
(159,dev)
(160,dev->independent->irq)
(161,next)
(162,dependent)
(163,dev->independent)
(164,nirq)
(165,ndma)
(166,dev->independent)
(167,next)
(168,nmem)
(169,)
(170,while (port)
(171,nmem++)
(172,)
(173,port)
(174,fail:)
(175,struct pnp_dev *dev)
(176,mem)
(177,port)
(178,dev->res)
(179,irq)
(180,!pnp_assign_port(dev, port, nport)
(181,&dev->res)
(182,)
(183,return -ENODEV;)
(184,if (!pnp_assign_port(dev, port, nport)
(185,nport++)
(186,irq)
(187,goto fail;)
(188,port)
(189,independent)
(190,!pnp_assign_irq(dev, irq, nirq)
(191,pnp_clean_resources(&dev->res)
(192,port)
(193,dma)
(194,nport)
(195,mem)
(196,goto fail;)
(197,next)
(198,independent)
(199,mem = mem->next)
(200,port)
(201,!pnp_assign_dma(dev, dma, ndma)
(202,while (mem)
(203,dev)
(204,0)
(205,&pnp_res_mutex)
(206,port)
(207,port = dev->independent->port)
(208,dev)
(209,dma)
(210,0)
(211,!pnp_assign_mem(dev, mem, nmem)
(212,)
(213,irq = dep->irq)
(214,mem)
(215,)
(216,if (!pnp_assign_irq(dev, irq, nirq)
(217,mem)
(218,irq)
(219,irq->next)
(220,next)
(221,dep=dev->dependent)
(222,)
(223,port)
(224,mem = dev->independent->mem)
(225,irq = dev->independent->irq)
(226,mem)
(227,!pnp_assign_dma(dev, dma, ndma)
(228,pnp_assign_port(dev, port, nport)
(229,irq = irq->next)
(230,port->next)
(231,while (irq)
(232,irq = irq->next)
(233,nirq = 0)
(234,dma)
(235,dep->port)
(236,nport)
(237,irq)
(238,dma)
(239,irq)
(240,i)
(241,i=1)
(242,)
(243,mem)
(244,mem = mem->next)
(245,if (!pnp_assign_mem(dev, mem, nmem)
(246,nport++)
(247,pnp_assign_dma(dev, dma, ndma)
(248,port)
(249,!pnp_assign_mem(dev, mem, nmem)
(250,)
(251,nport)
(252,nirq++)
(253,nport = 0)
(254,0)
(255,res)
(256,dev)
(257,RET)
(258,dep)
(259,dev->independent->dma)
(260,ndma)
(261,while (irq)
(262,next)
(263,depnum)
(264,if (!pnp_assign_port(dev, port, nport)
(265,0)
(266,next)
(267,&pnp_res_mutex)
(268,nmem)
(269,pnp_can_configure(dev)
(270,goto fail;)
(271,port)
(272,)
(273,port)
(274,dma = dep->dma)
(275,goto fail;)
(276,dep=dep->next)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^