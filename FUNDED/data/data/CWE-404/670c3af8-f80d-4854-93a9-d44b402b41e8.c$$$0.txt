-----label-----
0
-----code-----
static char * goodB2GSource(char * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)calloc(100, sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
21,24
22,23
25,26
26,27
26,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,24,27,28,32,34,39,41,45,47,48,52,54,57
-----computeFrom-----
13,14
13,15
30,31
30,32
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * goodB2GSource(char * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
static char
* goodB2GSource(char * data)
*
goodB2GSource
char * data
char
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)calloc(100, sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    return data;}
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
return data;
data
data
-----joern-----
(21,22,0)
(22,10,0)
(5,6,0)
(20,13,0)
(9,4,0)
(25,11,0)
(15,11,0)
(2,4,0)
(7,11,0)
(1,24,0)
(17,24,0)
(3,5,0)
(19,7,0)
(24,17,0)
(25,6,0)
(13,21,0)
(15,22,0)
(5,15,0)
(22,15,0)
(4,6,0)
(25,15,0)
(23,11,0)
(18,25,0)
(5,11,0)
(22,21,0)
(8,7,0)
(4,15,0)
(16,25,0)
(7,15,0)
(7,6,0)
(21,13,0)
(15,6,0)
(0,15,0)
(17,12,0)
(14,21,0)
(10,22,0)
(4,6,1)
(21,13,1)
(4,15,1)
(17,24,1)
(14,0,1)
(15,6,1)
(24,1,1)
(8,19,1)
(15,22,1)
(5,3,1)
(7,6,1)
(22,21,1)
(19,4,1)
(20,14,1)
(2,9,1)
(9,15,1)
(22,10,1)
(19,17,1)
(13,20,1)
(25,15,1)
(3,7,1)
(16,25,1)
(25,18,1)
(18,5,1)
(5,15,1)
(7,8,1)
(1,4,1)
(25,6,1)
(4,2,1)
(5,6,1)
(7,15,1)
(24,4,2)
(15,22,2)
(25,6,2)
(22,10,2)
(15,6,2)
(7,15,2)
(5,6,2)
(4,6,2)
(25,15,2)
(16,25,2)
(17,24,2)
(7,6,2)
(21,13,2)
(1,4,2)
(5,15,2)
(4,15,2)
(22,21,2)
(17,4,2)
-----------------------------------
(0,data)
(1,1)
(2,NULL)
(3,data)
(4,data == NULL)
(5,printLine(data)
(6,char * data)
(7,strcpy(data, "A String")
(8,"A String")
(9,data)
(10,char *)
(11,)
(12,)
(13,sizeof(char)
(14,100)
(15,data = (char *)
(16,RET)
(17,exit(-1)
(18,data)
(19,data)
(20,char)
(21,calloc(100, sizeof(char)
(22,(char *)
(23,if (data == NULL)
(24,-1)
(25,return data;)
(26, sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^