-----label-----
1
-----code-----
static void dump_instr(const char *lvl, struct pt_regs *regs)
{
	mm_segment_t fs;

	if (!user_mode(regs)) {
		fs = get_fs();
		set_fs(KERNEL_DS);
		__dump_instr(lvl, regs);
		set_fs(fs);
	} else {
		__dump_instr(lvl, regs);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
36,37
38,39
39,40
39,41
40,41
42,43
43,44
45,46
46,47
46,48
46,49
47,48
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
61,64
62,63
64,65
66,67
-----nextToken-----
2,4,6,8,9,12,14,15,20,22,27,29,34,37,41,44,48,50,52,56,58,63,65,67
-----computeFrom-----
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void dump_instr(const char *lvl, struct pt_regs *regs){	mm_segment_t fs;	if (!user_mode(regs)) {		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	} else {		__dump_instr(lvl, regs);	}}
static void
dump_instr(const char *lvl, struct pt_regs *regs)
dump_instr
const char *lvl
const char
*lvl
*
lvl
struct pt_regs *regs
struct pt_regs
pt_regs
*regs
*
regs
{	mm_segment_t fs;	if (!user_mode(regs)) {		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	} else {		__dump_instr(lvl, regs);	}}
mm_segment_t fs;
mm_segment_t fs;
mm_segment_t
mm_segment_t
fs
fs
if (!user_mode(regs)) {		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	} else {		__dump_instr(lvl, regs);	}
!user_mode(regs)
user_mode(regs)
user_mode
user_mode
regs
regs
{		fs = get_fs();		set_fs(KERNEL_DS);		__dump_instr(lvl, regs);		set_fs(fs);	}
fs = get_fs();
fs = get_fs()
fs
fs
get_fs()
get_fs
get_fs
set_fs(KERNEL_DS);
set_fs(KERNEL_DS);
set_fs
set_fs
(KERNEL_DS)
KERNEL_DS
KERNEL_DS
__dump_instr(lvl, regs);
__dump_instr(lvl, regs)
__dump_instr
__dump_instr
lvl
lvl
regs
regs
set_fs(fs);
set_fs(fs)
set_fs
set_fs
fs
fs
{		__dump_instr(lvl, regs);	}
__dump_instr(lvl, regs);
__dump_instr(lvl, regs)
__dump_instr
__dump_instr
lvl
lvl
regs
regs
-----joern-----
(6,9,0)
(7,4,0)
(9,17,0)
(14,8,0)
(7,17,0)
(11,16,0)
(14,17,0)
(16,21,0)
(2,14,0)
(7,5,0)
(18,7,0)
(22,19,0)
(12,19,0)
(21,8,0)
(0,8,0)
(20,14,0)
(3,21,0)
(14,5,0)
(13,7,0)
(9,6,0)
(21,3,0)
(15,21,0)
(1,0,0)
(10,9,0)
(16,8,0)
(7,5,1)
(23,7,1)
(7,17,1)
(21,3,1)
(16,21,1)
(13,6,1)
(9,17,1)
(0,1,1)
(18,13,1)
(9,10,1)
(23,16,1)
(14,5,1)
(11,14,1)
(7,18,1)
(1,21,1)
(16,11,1)
(14,17,1)
(2,0,1)
(15,6,1)
(20,2,1)
(6,9,1)
(14,20,1)
(3,15,1)
(9,17,2)
(0,6,2)
(16,21,2)
(14,6,2)
(18,6,2)
(7,5,2)
(3,6,2)
(13,6,2)
(7,6,2)
(1,6,2)
(2,6,2)
(7,17,2)
(21,6,2)
(16,6,2)
(20,6,2)
(14,5,2)
(6,9,2)
(14,17,2)
(15,6,2)
(21,3,2)
(11,6,2)
-----------------------------------
(0,set_fs(KERNEL_DS)
(1,KERNEL_DS)
(2,lvl)
(3,get_fs()
(4,)
(5,const char *lvl)
(6,!user_mode(regs)
(7,__dump_instr(lvl, regs)
(8,)
(9,user_mode(regs)
(10,regs)
(11,fs)
(12,if (!user_mode(regs)
(13,lvl)
(14,__dump_instr(lvl, regs)
(15,fs)
(16,set_fs(fs)
(17,struct pt_regs *regs)
(18,regs)
(19,)
(20,regs)
(21,fs = get_fs()
(22,fs)
(23,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^