-----label-----
1
-----code-----
static wchar_t * badSource(wchar_t * data)
{
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
44,47
45,46
47,48
50,51
51,52
51,53
52,53
54,55
56,57
57,58
-----nextToken-----
2,4,5,7,9,10,15,18,20,23,25,28,29,33,35,40,42,46,48,49,53,55,58
-----computeFrom-----
13,14
13,15
24,25
24,26
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wchar_t * badSource(wchar_t * data){    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
static wchar_t
* badSource(wchar_t * data)
*
badSource
wchar_t * data
wchar_t
* data
*
data
{    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    return data;}
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
return data;
data
data
-----joern-----
(2,19,0)
(1,0,0)
(19,3,0)
(20,3,0)
(3,19,0)
(8,3,0)
(20,9,0)
(4,7,0)
(3,7,0)
(10,2,0)
(18,14,0)
(0,9,0)
(0,3,0)
(19,5,0)
(23,14,0)
(11,4,0)
(4,3,0)
(16,10,0)
(13,4,0)
(14,23,0)
(0,7,0)
(10,16,0)
(23,17,0)
(12,20,0)
(15,7,0)
(5,19,0)
(3,9,0)
(4,9,0)
(2,10,0)
(6,10,0)
(21,20,0)
(22,16,0)
(19,2,0)
(23,14,1)
(20,3,1)
(1,23,1)
(0,3,1)
(4,13,1)
(19,5,1)
(0,9,1)
(1,20,1)
(0,1,1)
(22,6,1)
(11,4,1)
(3,9,1)
(18,20,1)
(2,10,1)
(16,22,1)
(13,0,1)
(20,21,1)
(10,16,1)
(12,3,1)
(14,18,1)
(19,2,1)
(6,8,1)
(4,9,1)
(20,9,1)
(3,19,1)
(21,12,1)
(4,3,1)
(4,9,2)
(14,20,2)
(19,2,2)
(23,14,2)
(20,3,2)
(19,5,2)
(3,19,2)
(2,10,2)
(23,20,2)
(18,20,2)
(10,16,2)
(20,9,2)
(0,3,2)
(4,3,2)
(3,9,2)
(11,4,2)
(0,9,2)
-----------------------------------
(0,printWLine(data)
(1,data)
(2,malloc(100*sizeof(wchar_t)
(3,data = (wchar_t *)
(4,return data;)
(5,wchar_t *)
(6,100)
(7,)
(8,data)
(9,wchar_t * data)
(10,100*sizeof(wchar_t)
(11,RET)
(12,data)
(13,data)
(14,-1)
(15,if (data == NULL)
(16,sizeof(wchar_t)
(17,)
(18,1)
(19,(wchar_t *)
(20,data == NULL)
(21,NULL)
(22,wchar_t)
(23,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^