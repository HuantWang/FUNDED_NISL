-----label-----
1
-----code-----
static void ata_eh_link_autopsy(struct ata_link *link)
{
	struct ata_port *ap = link->ap;
	struct ata_eh_context *ehc = &link->eh_context;
	struct ata_device *dev;
	unsigned int all_err_mask = 0, eflags = 0;
	int tag;
	u32 serror;
	int rc;

	DPRINTK("ENTER\n");

	if (ehc->i.flags & ATA_EHI_NO_AUTOPSY)
		return;

	/* obtain and analyze SError */
	rc = sata_scr_read(link, SCR_ERROR, &serror);
	if (rc == 0) {
		ehc->i.serror |= serror;
		ata_eh_analyze_serror(link);
	} else if (rc != -EOPNOTSUPP) {
		/* SError read failed, force reset and probing */
		ehc->i.probe_mask |= ATA_ALL_DEVICES;
		ehc->i.action |= ATA_EH_RESET;
		ehc->i.err_mask |= AC_ERR_OTHER;
	}

	/* analyze NCQ failure */
	ata_eh_analyze_ncq_error(link);

	/* any real error trumps AC_ERR_OTHER */
	if (ehc->i.err_mask & ~AC_ERR_OTHER)
		ehc->i.err_mask &= ~AC_ERR_OTHER;

	all_err_mask |= ehc->i.err_mask;

	for (tag = 0; tag < ATA_MAX_QUEUE; tag++) {
		struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);

		if (!(qc->flags & ATA_QCFLAG_FAILED) ||
		    ata_dev_phys_link(qc->dev) != link)
			continue;

		/* inherit upper level err_mask */
		qc->err_mask |= ehc->i.err_mask;

		/* analyze TF */
		ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf);

		/* DEV errors are probably spurious in case of ATA_BUS error */
		if (qc->err_mask & AC_ERR_ATA_BUS)
			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |
					  AC_ERR_INVALID);

		/* any real error trumps unknown error */
		if (qc->err_mask & ~AC_ERR_OTHER)
			qc->err_mask &= ~AC_ERR_OTHER;

		/* SENSE_VALID trumps dev/unknown error and revalidation */
		if (qc->flags & ATA_QCFLAG_SENSE_VALID)
			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);

		/* determine whether the command is worth retrying */
		if (ata_eh_worth_retry(qc))
			qc->flags |= ATA_QCFLAG_RETRY;

		/* accumulate error info */
		ehc->i.dev = qc->dev;
		all_err_mask |= qc->err_mask;
		if (qc->flags & ATA_QCFLAG_IO)
			eflags |= ATA_EFLAG_IS_IO;
		trace_ata_eh_link_autopsy_qc(qc);
	}

	/* enforce default EH actions */
	if (ap->pflags & ATA_PFLAG_FROZEN ||
	    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT))
		ehc->i.action |= ATA_EH_RESET;
	else if (((eflags & ATA_EFLAG_IS_IO) && all_err_mask) ||
		 (!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV)))
		ehc->i.action |= ATA_EH_REVALIDATE;

	/* If we have offending qcs and the associated failed device,
	 * perform per-dev EH action only on the offending device.
	 */
	if (ehc->i.dev) {
		ehc->i.dev_action[ehc->i.dev->devno] |=
			ehc->i.action & ATA_EH_PERDEV_MASK;
		ehc->i.action &= ~ATA_EH_PERDEV_MASK;
	}

	/* propagate timeout to host link */
	if ((all_err_mask & AC_ERR_TIMEOUT) && !ata_is_host_link(link))
		ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT;

	/* record error and consider speeding down */
	dev = ehc->i.dev;
	if (!dev && ((ata_link_max_devices(link) == 1 &&
		      ata_dev_enabled(link->device))))
	    dev = link->device;

	if (dev) {
		if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)
			eflags |= ATA_EFLAG_DUBIOUS_XFER;
		ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask);
		trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask);
	}
	DPRINTK("EXIT\n");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
26,27
28,29
28,30
28,31
31,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
45,48
47,48
47,49
49,50
51,52
51,53
53,54
55,56
56,57
56,58
58,59
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
80,81
84,85
87,88
88,89
88,90
89,90
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
99,100
101,102
101,103
101,104
102,103
102,104
103,104
106,107
106,108
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
115,116
117,118
118,119
118,120
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
128,129
130,131
130,132
130,133
131,132
132,133
132,134
133,134
133,135
134,135
134,136
135,136
139,140
141,142
142,143
142,144
143,144
143,145
144,145
144,146
145,146
149,150
151,152
152,153
152,154
153,154
153,155
154,155
154,156
155,156
159,160
161,162
162,163
162,164
163,164
165,166
167,168
167,169
168,169
168,170
169,170
169,171
170,171
170,172
171,172
175,176
176,177
178,179
179,180
179,181
180,181
180,182
181,182
181,183
182,183
186,187
187,188
189,190
190,191
190,192
191,192
193,194
193,195
194,195
194,196
195,196
199,200
199,201
199,202
199,203
200,201
201,202
201,203
202,203
205,206
205,207
206,207
208,209
210,211
211,212
213,214
213,215
213,216
213,217
213,218
213,219
213,220
213,221
213,222
213,223
213,224
213,225
214,215
215,216
215,217
216,217
218,219
218,220
218,221
221,222
222,223
222,224
222,225
223,224
225,226
227,228
229,230
229,231
230,231
230,232
231,232
232,233
233,234
233,235
234,235
234,236
235,236
238,239
240,241
240,242
241,242
241,243
242,243
244,245
244,246
245,246
248,249
251,252
252,253
252,254
253,254
253,255
254,255
257,258
257,259
258,259
258,260
259,260
263,264
264,265
264,266
265,266
265,267
266,267
266,268
267,268
271,272
271,273
271,274
272,273
274,275
276,277
277,278
277,279
278,279
281,282
281,283
282,283
282,284
283,284
283,285
284,285
287,288
289,290
290,291
290,292
291,292
291,293
292,293
295,296
296,297
297,298
297,299
298,299
298,300
299,300
301,302
303,304
305,306
305,307
306,307
306,308
307,308
307,309
308,309
311,312
312,313
314,315
315,316
315,317
316,317
316,318
317,318
320,321
321,322
323,324
323,325
324,325
324,326
325,326
325,327
326,327
329,330
331,332
332,333
332,334
333,334
333,335
334,335
337,338
338,339
339,340
339,341
340,341
342,343
344,345
344,346
345,346
345,347
346,347
348,349
350,351
351,352
351,353
352,353
352,354
353,354
356,357
358,359
359,360
359,361
360,361
360,362
361,362
361,363
362,363
366,367
366,368
367,368
370,371
371,372
371,373
372,373
374,375
374,376
375,376
378,379
378,380
379,380
379,381
380,381
380,382
381,382
384,385
386,387
387,388
387,389
388,389
390,391
392,393
393,394
393,395
394,395
396,397
398,399
398,400
398,401
399,400
399,401
400,401
400,402
401,402
401,403
402,403
405,406
407,408
407,409
408,409
410,411
411,412
411,413
412,413
414,415
416,417
417,418
417,419
418,419
418,420
419,420
419,421
420,421
424,425
426,427
426,428
427,428
427,429
428,429
429,430
429,431
430,431
431,432
431,433
432,433
434,435
436,437
438,439
439,440
439,441
440,441
441,442
442,443
442,444
443,444
445,446
447,448
448,449
448,450
449,450
451,452
452,453
454,455
455,456
455,457
456,457
456,458
457,458
457,459
458,459
462,463
464,465
464,466
465,466
465,467
466,467
466,468
467,468
471,472
471,473
472,473
473,474
473,475
474,475
474,476
475,476
475,477
476,477
476,478
477,478
481,482
481,483
482,483
482,484
483,484
483,485
484,485
489,490
489,491
490,491
490,492
491,492
491,493
492,493
496,497
498,499
499,500
499,501
500,501
500,502
501,502
501,503
502,503
506,507
507,508
509,510
509,511
510,511
510,512
511,512
512,513
512,514
513,514
515,516
517,518
518,519
518,520
519,520
521,522
523,524
524,525
524,526
525,526
525,527
526,527
526,528
527,528
527,529
528,529
528,530
529,530
535,536
537,538
538,539
538,540
539,540
541,542
541,543
542,543
542,544
543,544
547,548
547,549
548,549
548,550
549,550
550,551
552,553
553,554
554,555
554,556
555,556
555,557
556,557
556,558
557,558
559,560
562,563
562,564
563,564
565,566
565,567
566,567
569,570
570,571
570,572
571,572
573,574
573,575
574,575
577,578
577,579
578,579
580,581
580,582
580,583
581,582
581,583
582,583
582,584
583,584
583,585
584,585
587,588
589,590
590,591
590,592
591,592
593,594
595,596
596,597
596,598
597,598
597,599
598,599
598,600
599,600
603,604
603,605
603,606
603,607
604,605
606,607
608,609
610,611
612,613
613,614
613,615
613,616
613,617
614,615
616,617
618,619
618,620
619,620
619,621
620,621
624,625
626,627
627,628
627,629
628,629
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,27,29,30,35,36,40,42,43,46,48,50,52,54,57,59,63,65,68,70,74,75,81,82,83,85,86,90,93,95,97,100,104,105,112,113,114,116,120,122,126,129,136,137,138,140,146,147,148,150,156,157,158,160,164,166,172,173,174,177,183,184,185,188,192,196,197,198,203,204,207,209,212,217,219,220,224,226,228,236,237,239,243,246,247,249,250,255,256,260,261,262,268,269,270,273,275,279,280,285,286,288,293,294,300,302,304,309,310,313,318,319,322,327,328,330,335,336,341,343,347,349,354,355,357,363,364,365,368,369,373,376,377,382,383,385,389,391,395,397,403,404,406,409,413,415,421,422,423,425,433,435,437,444,446,450,453,459,460,461,463,468,469,470,478,479,480,485,486,487,488,493,494,495,497,503,504,505,508,514,516,520,522,530,531,532,533,534,536,540,544,545,546,551,558,560,561,564,567,568,572,575,576,579,585,586,588,592,594,600,601,602,605,607,609,611,615,617,621,622,623,625,629,630
-----computeFrom-----
77,78
77,79
88,89
88,90
102,103
102,104
108,109
108,110
124,125
124,126
132,133
132,134
142,143
142,144
152,153
152,154
168,169
168,170
179,180
179,181
190,191
190,192
201,202
201,203
205,206
205,207
230,231
230,232
233,234
233,235
240,241
240,242
252,253
252,254
264,265
264,266
282,283
282,284
290,291
290,292
297,298
297,299
298,299
298,300
306,307
306,308
315,316
315,317
324,325
324,326
332,333
332,334
339,340
339,341
351,352
351,353
359,360
359,361
371,372
371,373
379,380
379,381
387,388
387,389
399,400
399,401
400,401
400,402
407,408
407,409
411,412
411,413
417,418
417,419
427,428
427,429
429,430
429,431
431,432
431,433
439,440
439,441
442,443
442,444
448,449
448,450
455,456
455,457
473,474
473,475
489,490
489,491
499,500
499,501
510,511
510,512
512,513
512,514
524,525
524,526
538,539
538,540
548,549
548,550
554,555
554,556
555,556
555,557
570,571
570,572
582,583
582,584
590,591
590,592
596,597
596,598
-----guardedBy-----
172,183
174,185
173,184
177,188
285,293
286,294
309,318
310,319
313,322
327,335
522,531
516,536
551,572
567,575
568,576
-----guardedByNegation-----
104,126
409,450
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void ata_eh_link_autopsy(struct ata_link *link){	struct ata_port *ap = link->ap;	struct ata_eh_context *ehc = &link->eh_context;	struct ata_device *dev;	unsigned int all_err_mask = 0, eflags = 0;	int tag;	u32 serror;	int rc;	DPRINTK("ENTER\n");	if (ehc->i.flags & ATA_EHI_NO_AUTOPSY)		return;	/* obtain and analyze SError */	rc = sata_scr_read(link, SCR_ERROR, &serror);	if (rc == 0) {		ehc->i.serror |= serror;		ata_eh_analyze_serror(link);	} else if (rc != -EOPNOTSUPP) {		/* SError read failed, force reset and probing */		ehc->i.probe_mask |= ATA_ALL_DEVICES;		ehc->i.action |= ATA_EH_RESET;		ehc->i.err_mask |= AC_ERR_OTHER;	}	/* analyze NCQ failure */	ata_eh_analyze_ncq_error(link);	/* any real error trumps AC_ERR_OTHER */	if (ehc->i.err_mask & ~AC_ERR_OTHER)		ehc->i.err_mask &= ~AC_ERR_OTHER;	all_err_mask |= ehc->i.err_mask;	for (tag = 0; tag < ATA_MAX_QUEUE; tag++) {		struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);		if (!(qc->flags & ATA_QCFLAG_FAILED) ||		    ata_dev_phys_link(qc->dev) != link)			continue;		/* inherit upper level err_mask */		qc->err_mask |= ehc->i.err_mask;		/* analyze TF */		ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf);		/* DEV errors are probably spurious in case of ATA_BUS error */		if (qc->err_mask & AC_ERR_ATA_BUS)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID);		/* any real error trumps unknown error */		if (qc->err_mask & ~AC_ERR_OTHER)			qc->err_mask &= ~AC_ERR_OTHER;		/* SENSE_VALID trumps dev/unknown error and revalidation */		if (qc->flags & ATA_QCFLAG_SENSE_VALID)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);		/* determine whether the command is worth retrying */		if (ata_eh_worth_retry(qc))			qc->flags |= ATA_QCFLAG_RETRY;		/* accumulate error info */		ehc->i.dev = qc->dev;		all_err_mask |= qc->err_mask;		if (qc->flags & ATA_QCFLAG_IO)			eflags |= ATA_EFLAG_IS_IO;		trace_ata_eh_link_autopsy_qc(qc);	}	/* enforce default EH actions */	if (ap->pflags & ATA_PFLAG_FROZEN ||	    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT))		ehc->i.action |= ATA_EH_RESET;	else if (((eflags & ATA_EFLAG_IS_IO) && all_err_mask) ||		 (!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV)))		ehc->i.action |= ATA_EH_REVALIDATE;	/* If we have offending qcs and the associated failed device,	 * perform per-dev EH action only on the offending device.	 */	if (ehc->i.dev) {		ehc->i.dev_action[ehc->i.dev->devno] |=			ehc->i.action & ATA_EH_PERDEV_MASK;		ehc->i.action &= ~ATA_EH_PERDEV_MASK;	}	/* propagate timeout to host link */	if ((all_err_mask & AC_ERR_TIMEOUT) && !ata_is_host_link(link))		ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT;	/* record error and consider speeding down */	dev = ehc->i.dev;	if (!dev && ((ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device))))	    dev = link->device;	if (dev) {		if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)			eflags |= ATA_EFLAG_DUBIOUS_XFER;		ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask);		trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask);	}	DPRINTK("EXIT\n");}
static void
ata_eh_link_autopsy(struct ata_link *link)
ata_eh_link_autopsy
struct ata_link *link
struct ata_link
ata_link
*link
*
link
{	struct ata_port *ap = link->ap;	struct ata_eh_context *ehc = &link->eh_context;	struct ata_device *dev;	unsigned int all_err_mask = 0, eflags = 0;	int tag;	u32 serror;	int rc;	DPRINTK("ENTER\n");	if (ehc->i.flags & ATA_EHI_NO_AUTOPSY)		return;	/* obtain and analyze SError */	rc = sata_scr_read(link, SCR_ERROR, &serror);	if (rc == 0) {		ehc->i.serror |= serror;		ata_eh_analyze_serror(link);	} else if (rc != -EOPNOTSUPP) {		/* SError read failed, force reset and probing */		ehc->i.probe_mask |= ATA_ALL_DEVICES;		ehc->i.action |= ATA_EH_RESET;		ehc->i.err_mask |= AC_ERR_OTHER;	}	/* analyze NCQ failure */	ata_eh_analyze_ncq_error(link);	/* any real error trumps AC_ERR_OTHER */	if (ehc->i.err_mask & ~AC_ERR_OTHER)		ehc->i.err_mask &= ~AC_ERR_OTHER;	all_err_mask |= ehc->i.err_mask;	for (tag = 0; tag < ATA_MAX_QUEUE; tag++) {		struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);		if (!(qc->flags & ATA_QCFLAG_FAILED) ||		    ata_dev_phys_link(qc->dev) != link)			continue;		/* inherit upper level err_mask */		qc->err_mask |= ehc->i.err_mask;		/* analyze TF */		ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf);		/* DEV errors are probably spurious in case of ATA_BUS error */		if (qc->err_mask & AC_ERR_ATA_BUS)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID);		/* any real error trumps unknown error */		if (qc->err_mask & ~AC_ERR_OTHER)			qc->err_mask &= ~AC_ERR_OTHER;		/* SENSE_VALID trumps dev/unknown error and revalidation */		if (qc->flags & ATA_QCFLAG_SENSE_VALID)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);		/* determine whether the command is worth retrying */		if (ata_eh_worth_retry(qc))			qc->flags |= ATA_QCFLAG_RETRY;		/* accumulate error info */		ehc->i.dev = qc->dev;		all_err_mask |= qc->err_mask;		if (qc->flags & ATA_QCFLAG_IO)			eflags |= ATA_EFLAG_IS_IO;		trace_ata_eh_link_autopsy_qc(qc);	}	/* enforce default EH actions */	if (ap->pflags & ATA_PFLAG_FROZEN ||	    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT))		ehc->i.action |= ATA_EH_RESET;	else if (((eflags & ATA_EFLAG_IS_IO) && all_err_mask) ||		 (!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV)))		ehc->i.action |= ATA_EH_REVALIDATE;	/* If we have offending qcs and the associated failed device,	 * perform per-dev EH action only on the offending device.	 */	if (ehc->i.dev) {		ehc->i.dev_action[ehc->i.dev->devno] |=			ehc->i.action & ATA_EH_PERDEV_MASK;		ehc->i.action &= ~ATA_EH_PERDEV_MASK;	}	/* propagate timeout to host link */	if ((all_err_mask & AC_ERR_TIMEOUT) && !ata_is_host_link(link))		ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT;	/* record error and consider speeding down */	dev = ehc->i.dev;	if (!dev && ((ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device))))	    dev = link->device;	if (dev) {		if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)			eflags |= ATA_EFLAG_DUBIOUS_XFER;		ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask);		trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask);	}	DPRINTK("EXIT\n");}
struct ata_port *ap = link->ap;
struct ata_port *ap = link->ap;
struct ata_port
ata_port
*ap = link->ap
*
ap
= link->ap
link->ap
link
link
ap
struct ata_eh_context *ehc = &link->eh_context;
struct ata_eh_context *ehc = &link->eh_context;
struct ata_eh_context
ata_eh_context
*ehc = &link->eh_context
*
ehc
= &link->eh_context
&link->eh_context
link->eh_context
link
link
eh_context
struct ata_device *dev;
struct ata_device *dev;
struct ata_device
ata_device
*dev
*
dev
unsigned int all_err_mask = 0, eflags = 0;
unsigned int all_err_mask = 0, eflags = 0;
unsigned int
all_err_mask = 0
all_err_mask
= 0
0
eflags = 0
eflags
= 0
0
int tag;
int tag;
int
tag
tag
u32 serror;
u32 serror;
u32
u32
serror
serror
int rc;
int rc;
int
rc
rc
DPRINTK("ENTER\n");
DPRINTK("ENTER\n")
DPRINTK
DPRINTK
"ENTER\n"
if (ehc->i.flags & ATA_EHI_NO_AUTOPSY)		return;
ehc->i.flags & ATA_EHI_NO_AUTOPSY
ehc->i.flags
ehc->i
ehc
ehc
i
flags
ATA_EHI_NO_AUTOPSY
ATA_EHI_NO_AUTOPSY
return;
rc = sata_scr_read(link, SCR_ERROR, &serror);
rc = sata_scr_read(link, SCR_ERROR, &serror)
rc
rc
sata_scr_read(link, SCR_ERROR, &serror)
sata_scr_read
sata_scr_read
link
link
SCR_ERROR
SCR_ERROR
&serror
serror
serror
if (rc == 0) {		ehc->i.serror |= serror;		ata_eh_analyze_serror(link);	} else if (rc != -EOPNOTSUPP) {		/* SError read failed, force reset and probing */		ehc->i.probe_mask |= ATA_ALL_DEVICES;		ehc->i.action |= ATA_EH_RESET;		ehc->i.err_mask |= AC_ERR_OTHER;	}
rc == 0
rc
rc
0
{		ehc->i.serror |= serror;		ata_eh_analyze_serror(link);	}
ehc->i.serror |= serror;
ehc->i.serror |= serror
ehc->i.serror
ehc->i
ehc
ehc
i
serror
serror
serror
ata_eh_analyze_serror(link);
ata_eh_analyze_serror(link)
ata_eh_analyze_serror
ata_eh_analyze_serror
link
link
if (rc != -EOPNOTSUPP) {		/* SError read failed, force reset and probing */		ehc->i.probe_mask |= ATA_ALL_DEVICES;		ehc->i.action |= ATA_EH_RESET;		ehc->i.err_mask |= AC_ERR_OTHER;	}
rc != -EOPNOTSUPP
rc
rc
-EOPNOTSUPP
EOPNOTSUPP
EOPNOTSUPP
{		/* SError read failed, force reset and probing */		ehc->i.probe_mask |= ATA_ALL_DEVICES;		ehc->i.action |= ATA_EH_RESET;		ehc->i.err_mask |= AC_ERR_OTHER;	}
ehc->i.probe_mask |= ATA_ALL_DEVICES;
ehc->i.probe_mask |= ATA_ALL_DEVICES
ehc->i.probe_mask
ehc->i
ehc
ehc
i
probe_mask
ATA_ALL_DEVICES
ATA_ALL_DEVICES
ehc->i.action |= ATA_EH_RESET;
ehc->i.action |= ATA_EH_RESET
ehc->i.action
ehc->i
ehc
ehc
i
action
ATA_EH_RESET
ATA_EH_RESET
ehc->i.err_mask |= AC_ERR_OTHER;
ehc->i.err_mask |= AC_ERR_OTHER
ehc->i.err_mask
ehc->i
ehc
ehc
i
err_mask
AC_ERR_OTHER
AC_ERR_OTHER
ata_eh_analyze_ncq_error(link);
ata_eh_analyze_ncq_error(link)
ata_eh_analyze_ncq_error
ata_eh_analyze_ncq_error
link
link
if (ehc->i.err_mask & ~AC_ERR_OTHER)		ehc->i.err_mask &= ~AC_ERR_OTHER;
ehc->i.err_mask & ~AC_ERR_OTHER
ehc->i.err_mask
ehc->i
ehc
ehc
i
err_mask
~AC_ERR_OTHER
AC_ERR_OTHER
AC_ERR_OTHER
ehc->i.err_mask &= ~AC_ERR_OTHER;
ehc->i.err_mask &= ~AC_ERR_OTHER
ehc->i.err_mask
ehc->i
ehc
ehc
i
err_mask
~AC_ERR_OTHER
AC_ERR_OTHER
AC_ERR_OTHER
all_err_mask |= ehc->i.err_mask;
all_err_mask |= ehc->i.err_mask
all_err_mask
all_err_mask
ehc->i.err_mask
ehc->i
ehc
ehc
i
err_mask
for (tag = 0; tag < ATA_MAX_QUEUE; tag++) {		struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);		if (!(qc->flags & ATA_QCFLAG_FAILED) ||		    ata_dev_phys_link(qc->dev) != link)			continue;		/* inherit upper level err_mask */		qc->err_mask |= ehc->i.err_mask;		/* analyze TF */		ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf);		/* DEV errors are probably spurious in case of ATA_BUS error */		if (qc->err_mask & AC_ERR_ATA_BUS)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID);		/* any real error trumps unknown error */		if (qc->err_mask & ~AC_ERR_OTHER)			qc->err_mask &= ~AC_ERR_OTHER;		/* SENSE_VALID trumps dev/unknown error and revalidation */		if (qc->flags & ATA_QCFLAG_SENSE_VALID)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);		/* determine whether the command is worth retrying */		if (ata_eh_worth_retry(qc))			qc->flags |= ATA_QCFLAG_RETRY;		/* accumulate error info */		ehc->i.dev = qc->dev;		all_err_mask |= qc->err_mask;		if (qc->flags & ATA_QCFLAG_IO)			eflags |= ATA_EFLAG_IS_IO;		trace_ata_eh_link_autopsy_qc(qc);	}
tag = 0;
tag = 0
tag
tag
0
tag < ATA_MAX_QUEUE
tag
tag
ATA_MAX_QUEUE
ATA_MAX_QUEUE
tag++
tag
tag
{		struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);		if (!(qc->flags & ATA_QCFLAG_FAILED) ||		    ata_dev_phys_link(qc->dev) != link)			continue;		/* inherit upper level err_mask */		qc->err_mask |= ehc->i.err_mask;		/* analyze TF */		ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf);		/* DEV errors are probably spurious in case of ATA_BUS error */		if (qc->err_mask & AC_ERR_ATA_BUS)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID);		/* any real error trumps unknown error */		if (qc->err_mask & ~AC_ERR_OTHER)			qc->err_mask &= ~AC_ERR_OTHER;		/* SENSE_VALID trumps dev/unknown error and revalidation */		if (qc->flags & ATA_QCFLAG_SENSE_VALID)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);		/* determine whether the command is worth retrying */		if (ata_eh_worth_retry(qc))			qc->flags |= ATA_QCFLAG_RETRY;		/* accumulate error info */		ehc->i.dev = qc->dev;		all_err_mask |= qc->err_mask;		if (qc->flags & ATA_QCFLAG_IO)			eflags |= ATA_EFLAG_IS_IO;		trace_ata_eh_link_autopsy_qc(qc);	}
struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);
struct ata_queued_cmd *qc = __ata_qc_from_tag(ap, tag);
struct ata_queued_cmd
ata_queued_cmd
*qc = __ata_qc_from_tag(ap, tag)
*
qc
= __ata_qc_from_tag(ap, tag)
__ata_qc_from_tag(ap, tag)
__ata_qc_from_tag
__ata_qc_from_tag
ap
ap
tag
tag
if (!(qc->flags & ATA_QCFLAG_FAILED) ||		    ata_dev_phys_link(qc->dev) != link)			continue;
!(qc->flags & ATA_QCFLAG_FAILED) ||		    ata_dev_phys_link(qc->dev) != link
!(qc->flags & ATA_QCFLAG_FAILED)
(qc->flags & ATA_QCFLAG_FAILED)
qc->flags & ATA_QCFLAG_FAILED
qc->flags
qc
qc
flags
ATA_QCFLAG_FAILED
ATA_QCFLAG_FAILED
ata_dev_phys_link(qc->dev) != link
ata_dev_phys_link(qc->dev)
ata_dev_phys_link
ata_dev_phys_link
qc->dev
qc
qc
dev
link
link
continue;
qc->err_mask |= ehc->i.err_mask;
qc->err_mask |= ehc->i.err_mask
qc->err_mask
qc
qc
err_mask
ehc->i.err_mask
ehc->i
ehc
ehc
i
err_mask
ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf);
ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf)
ehc->i.action
ehc->i
ehc
ehc
i
action
ata_eh_analyze_tf(qc, &qc->result_tf)
ata_eh_analyze_tf
ata_eh_analyze_tf
qc
qc
&qc->result_tf
qc->result_tf
qc
qc
result_tf
if (qc->err_mask & AC_ERR_ATA_BUS)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID);
qc->err_mask & AC_ERR_ATA_BUS
qc->err_mask
qc
qc
err_mask
AC_ERR_ATA_BUS
AC_ERR_ATA_BUS
qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID);
qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID)
qc->err_mask
qc
qc
err_mask
~(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID)
(AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID)
AC_ERR_DEV | AC_ERR_MEDIA |					  AC_ERR_INVALID
AC_ERR_DEV | AC_ERR_MEDIA
AC_ERR_DEV
AC_ERR_DEV
AC_ERR_MEDIA
AC_ERR_MEDIA
AC_ERR_INVALID
AC_ERR_INVALID
if (qc->err_mask & ~AC_ERR_OTHER)			qc->err_mask &= ~AC_ERR_OTHER;
qc->err_mask & ~AC_ERR_OTHER
qc->err_mask
qc
qc
err_mask
~AC_ERR_OTHER
AC_ERR_OTHER
AC_ERR_OTHER
qc->err_mask &= ~AC_ERR_OTHER;
qc->err_mask &= ~AC_ERR_OTHER
qc->err_mask
qc
qc
err_mask
~AC_ERR_OTHER
AC_ERR_OTHER
AC_ERR_OTHER
if (qc->flags & ATA_QCFLAG_SENSE_VALID)			qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);
qc->flags & ATA_QCFLAG_SENSE_VALID
qc->flags
qc
qc
flags
ATA_QCFLAG_SENSE_VALID
ATA_QCFLAG_SENSE_VALID
qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER);
qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER)
qc->err_mask
qc
qc
err_mask
~(AC_ERR_DEV | AC_ERR_OTHER)
(AC_ERR_DEV | AC_ERR_OTHER)
AC_ERR_DEV | AC_ERR_OTHER
AC_ERR_DEV
AC_ERR_DEV
AC_ERR_OTHER
AC_ERR_OTHER
if (ata_eh_worth_retry(qc))			qc->flags |= ATA_QCFLAG_RETRY;
ata_eh_worth_retry(qc)
ata_eh_worth_retry
ata_eh_worth_retry
qc
qc
qc->flags |= ATA_QCFLAG_RETRY;
qc->flags |= ATA_QCFLAG_RETRY
qc->flags
qc
qc
flags
ATA_QCFLAG_RETRY
ATA_QCFLAG_RETRY
ehc->i.dev = qc->dev;
ehc->i.dev = qc->dev
ehc->i.dev
ehc->i
ehc
ehc
i
dev
qc->dev
qc
qc
dev
all_err_mask |= qc->err_mask;
all_err_mask |= qc->err_mask
all_err_mask
all_err_mask
qc->err_mask
qc
qc
err_mask
if (qc->flags & ATA_QCFLAG_IO)			eflags |= ATA_EFLAG_IS_IO;
qc->flags & ATA_QCFLAG_IO
qc->flags
qc
qc
flags
ATA_QCFLAG_IO
ATA_QCFLAG_IO
eflags |= ATA_EFLAG_IS_IO;
eflags |= ATA_EFLAG_IS_IO
eflags
eflags
ATA_EFLAG_IS_IO
ATA_EFLAG_IS_IO
trace_ata_eh_link_autopsy_qc(qc);
trace_ata_eh_link_autopsy_qc(qc)
trace_ata_eh_link_autopsy_qc
trace_ata_eh_link_autopsy_qc
qc
qc
if (ap->pflags & ATA_PFLAG_FROZEN ||	    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT))		ehc->i.action |= ATA_EH_RESET;	else if (((eflags & ATA_EFLAG_IS_IO) && all_err_mask) ||		 (!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV)))		ehc->i.action |= ATA_EH_REVALIDATE;
ap->pflags & ATA_PFLAG_FROZEN ||	    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT)
ap->pflags & ATA_PFLAG_FROZEN
ap->pflags
ap
ap
pflags
ATA_PFLAG_FROZEN
ATA_PFLAG_FROZEN
all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT)
all_err_mask
all_err_mask
(AC_ERR_HSM | AC_ERR_TIMEOUT)
AC_ERR_HSM | AC_ERR_TIMEOUT
AC_ERR_HSM
AC_ERR_HSM
AC_ERR_TIMEOUT
AC_ERR_TIMEOUT
ehc->i.action |= ATA_EH_RESET;
ehc->i.action |= ATA_EH_RESET
ehc->i.action
ehc->i
ehc
ehc
i
action
ATA_EH_RESET
ATA_EH_RESET
if (((eflags & ATA_EFLAG_IS_IO) && all_err_mask) ||		 (!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV)))		ehc->i.action |= ATA_EH_REVALIDATE;
((eflags & ATA_EFLAG_IS_IO) && all_err_mask) ||		 (!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV))
((eflags & ATA_EFLAG_IS_IO) && all_err_mask)
(eflags & ATA_EFLAG_IS_IO) && all_err_mask
(eflags & ATA_EFLAG_IS_IO)
eflags & ATA_EFLAG_IS_IO
eflags
eflags
ATA_EFLAG_IS_IO
ATA_EFLAG_IS_IO
all_err_mask
all_err_mask
(!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV))
!(eflags & ATA_EFLAG_IS_IO) && (all_err_mask & ~AC_ERR_DEV)
!(eflags & ATA_EFLAG_IS_IO)
(eflags & ATA_EFLAG_IS_IO)
eflags & ATA_EFLAG_IS_IO
eflags
eflags
ATA_EFLAG_IS_IO
ATA_EFLAG_IS_IO
(all_err_mask & ~AC_ERR_DEV)
all_err_mask & ~AC_ERR_DEV
all_err_mask
all_err_mask
~AC_ERR_DEV
AC_ERR_DEV
AC_ERR_DEV
ehc->i.action |= ATA_EH_REVALIDATE;
ehc->i.action |= ATA_EH_REVALIDATE
ehc->i.action
ehc->i
ehc
ehc
i
action
ATA_EH_REVALIDATE
ATA_EH_REVALIDATE
if (ehc->i.dev) {		ehc->i.dev_action[ehc->i.dev->devno] |=			ehc->i.action & ATA_EH_PERDEV_MASK;		ehc->i.action &= ~ATA_EH_PERDEV_MASK;	}
ehc->i.dev
ehc->i
ehc
ehc
i
dev
{		ehc->i.dev_action[ehc->i.dev->devno] |=			ehc->i.action & ATA_EH_PERDEV_MASK;		ehc->i.action &= ~ATA_EH_PERDEV_MASK;	}
ehc->i.dev_action[ehc->i.dev->devno] |=			ehc->i.action & ATA_EH_PERDEV_MASK;
ehc->i.dev_action[ehc->i.dev->devno] |=			ehc->i.action & ATA_EH_PERDEV_MASK
ehc->i.dev_action[ehc->i.dev->devno]
ehc->i.dev_action
ehc->i
ehc
ehc
i
dev_action
ehc->i.dev->devno
ehc->i.dev
ehc->i
ehc
ehc
i
dev
devno
ehc->i.action & ATA_EH_PERDEV_MASK
ehc->i.action
ehc->i
ehc
ehc
i
action
ATA_EH_PERDEV_MASK
ATA_EH_PERDEV_MASK
ehc->i.action &= ~ATA_EH_PERDEV_MASK;
ehc->i.action &= ~ATA_EH_PERDEV_MASK
ehc->i.action
ehc->i
ehc
ehc
i
action
~ATA_EH_PERDEV_MASK
ATA_EH_PERDEV_MASK
ATA_EH_PERDEV_MASK
if ((all_err_mask & AC_ERR_TIMEOUT) && !ata_is_host_link(link))		ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT;
(all_err_mask & AC_ERR_TIMEOUT) && !ata_is_host_link(link)
(all_err_mask & AC_ERR_TIMEOUT)
all_err_mask & AC_ERR_TIMEOUT
all_err_mask
all_err_mask
AC_ERR_TIMEOUT
AC_ERR_TIMEOUT
!ata_is_host_link(link)
ata_is_host_link(link)
ata_is_host_link
ata_is_host_link
link
link
ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT;
ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT
ap->link.eh_context.i.err_mask
ap->link.eh_context.i
ap->link.eh_context
ap->link
ap
ap
link
eh_context
i
err_mask
AC_ERR_TIMEOUT
AC_ERR_TIMEOUT
dev = ehc->i.dev;
dev = ehc->i.dev
dev
dev
ehc->i.dev
ehc->i
ehc
ehc
i
dev
if (!dev && ((ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device))))	    dev = link->device;
!dev && ((ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device)))
!dev
dev
dev
((ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device)))
(ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device))
ata_link_max_devices(link) == 1 &&		      ata_dev_enabled(link->device)
ata_link_max_devices(link) == 1
ata_link_max_devices(link)
ata_link_max_devices
ata_link_max_devices
link
link
1
ata_dev_enabled(link->device)
ata_dev_enabled
ata_dev_enabled
link->device
link
link
device
dev = link->device;
dev = link->device
dev
dev
link->device
link
link
device
if (dev) {		if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)			eflags |= ATA_EFLAG_DUBIOUS_XFER;		ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask);		trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask);	}
dev
dev
{		if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)			eflags |= ATA_EFLAG_DUBIOUS_XFER;		ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask);		trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask);	}
if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)			eflags |= ATA_EFLAG_DUBIOUS_XFER;
dev->flags & ATA_DFLAG_DUBIOUS_XFER
dev->flags
dev
dev
flags
ATA_DFLAG_DUBIOUS_XFER
ATA_DFLAG_DUBIOUS_XFER
eflags |= ATA_EFLAG_DUBIOUS_XFER;
eflags |= ATA_EFLAG_DUBIOUS_XFER
eflags
eflags
ATA_EFLAG_DUBIOUS_XFER
ATA_EFLAG_DUBIOUS_XFER
ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask);
ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask)
ehc->i.action
ehc->i
ehc
ehc
i
action
ata_eh_speed_down(dev, eflags, all_err_mask)
ata_eh_speed_down
ata_eh_speed_down
dev
dev
eflags
eflags
all_err_mask
all_err_mask
trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask);
trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask)
trace_ata_eh_link_autopsy
trace_ata_eh_link_autopsy
dev
dev
ehc->i.action
ehc->i
ehc
ehc
i
action
all_err_mask
all_err_mask
DPRINTK("EXIT\n");
DPRINTK("EXIT\n")
DPRINTK
DPRINTK
"EXIT\n"
-----joern-----
(188,45,0)
(98,187,0)
(70,369,0)
(167,8,0)
(63,324,0)
(278,108,0)
(319,171,0)
(331,377,0)
(369,83,0)
(224,251,0)
(249,383,0)
(355,273,0)
(184,207,0)
(228,59,0)
(295,69,0)
(376,188,0)
(225,244,0)
(149,377,0)
(198,324,0)
(11,108,0)
(69,383,0)
(64,305,0)
(221,225,0)
(83,172,0)
(40,324,0)
(371,324,0)
(311,52,0)
(46,313,0)
(206,3,0)
(368,124,0)
(300,142,0)
(259,308,0)
(149,343,0)
(374,361,0)
(181,265,0)
(134,196,0)
(143,92,0)
(313,268,0)
(319,383,0)
(214,38,0)
(354,63,0)
(334,106,0)
(124,52,0)
(288,119,0)
(331,306,0)
(308,8,0)
(124,188,0)
(342,28,0)
(270,376,0)
(61,38,0)
(189,377,0)
(115,25,0)
(100,206,0)
(94,274,0)
(105,1,0)
(293,15,0)
(331,38,0)
(1,105,0)
(106,180,0)
(65,172,0)
(247,324,0)
(205,284,0)
(149,306,0)
(49,345,0)
(61,343,0)
(319,306,0)
(235,226,0)
(339,180,0)
(149,217,0)
(162,193,0)
(118,254,0)
(384,339,0)
(2,243,0)
(68,172,0)
(149,172,0)
(372,89,0)
(331,383,0)
(87,324,0)
(248,383,0)
(309,370,0)
(268,189,0)
(215,345,0)
(189,306,0)
(15,293,0)
(71,171,0)
(226,185,0)
(18,215,0)
(331,343,0)
(225,38,0)
(318,63,0)
(369,52,0)
(239,312,0)
(371,208,0)
(193,341,0)
(41,212,0)
(283,187,0)
(346,120,0)
(115,291,0)
(164,243,0)
(52,369,0)
(309,180,0)
(61,217,0)
(101,144,0)
(123,290,0)
(305,338,0)
(189,209,0)
(87,369,0)
(32,324,0)
(183,362,0)
(93,161,0)
(189,383,0)
(206,180,0)
(306,303,0)
(248,306,0)
(190,243,0)
(252,194,0)
(12,32,0)
(268,135,0)
(312,324,0)
(69,321,0)
(330,75,0)
(16,225,0)
(348,180,0)
(303,343,0)
(48,196,0)
(253,196,0)
(221,375,0)
(25,187,0)
(103,8,0)
(180,206,0)
(244,189,0)
(208,319,0)
(92,194,0)
(242,287,0)
(273,217,0)
(108,324,0)
(32,62,0)
(223,371,0)
(41,331,0)
(293,303,0)
(169,289,0)
(225,209,0)
(163,247,0)
(338,324,0)
(119,324,0)
(41,149,0)
(291,115,0)
(212,41,0)
(160,373,0)
(274,324,0)
(319,228,0)
(6,41,0)
(33,142,0)
(338,305,0)
(144,101,0)
(335,363,0)
(112,39,0)
(276,101,0)
(220,25,0)
(97,318,0)
(117,43,0)
(331,209,0)
(215,18,0)
(289,69,0)
(25,219,0)
(210,267,0)
(191,43,0)
(47,312,0)
(120,324,0)
(296,119,0)
(183,180,0)
(285,283,0)
(225,306,0)
(189,217,0)
(234,348,0)
(380,86,0)
(106,172,0)
(109,171,0)
(155,262,0)
(303,306,0)
(60,234,0)
(337,326,0)
(268,331,0)
(111,133,0)
(152,237,0)
(19,243,0)
(45,188,0)
(385,52,0)
(232,303,0)
(219,25,0)
(304,38,0)
(232,314,0)
(165,289,0)
(293,180,0)
(213,338,0)
(358,232,0)
(227,195,0)
(246,75,0)
(80,6,0)
(183,61,0)
(43,191,0)
(230,86,0)
(58,243,0)
(26,268,0)
(41,189,0)
(219,260,0)
(59,228,0)
(51,199,0)
(171,52,0)
(50,185,0)
(37,114,0)
(17,306,0)
(226,189,0)
(67,221,0)
(8,243,0)
(327,86,0)
(179,287,0)
(284,344,0)
(92,187,0)
(248,209,0)
(146,120,0)
(129,187,0)
(152,61,0)
(286,32,0)
(377,180,0)
(343,247,0)
(86,243,0)
(186,314,0)
(122,172,0)
(30,309,0)
(121,135,0)
(326,3,0)
(202,134,0)
(248,377,0)
(264,161,0)
(247,343,0)
(248,298,0)
(379,82,0)
(52,243,0)
(292,380,0)
(222,98,0)
(324,243,0)
(303,377,0)
(271,167,0)
(225,217,0)
(108,244,0)
(209,66,0)
(375,161,0)
(6,324,0)
(378,62,0)
(226,135,0)
(344,284,0)
(217,83,0)
(189,38,0)
(363,324,0)
(332,245,0)
(287,242,0)
(287,179,0)
(311,265,0)
(369,87,0)
(226,149,0)
(281,172,0)
(104,362,0)
(75,324,0)
(166,3,0)
(20,212,0)
(345,215,0)
(25,115,0)
(352,180,0)
(114,83,0)
(254,289,0)
(57,359,0)
(31,167,0)
(339,205,0)
(171,194,0)
(309,303,0)
(138,243,0)
(150,165,0)
(139,304,0)
(178,348,0)
(136,173,0)
(362,183,0)
(131,209,0)
(79,165,0)
(373,160,0)
(256,66,0)
(319,343,0)
(28,295,0)
(99,245,0)
(142,300,0)
(262,287,0)
(134,105,0)
(155,52,0)
(133,344,0)
(290,187,0)
(248,318,0)
(107,243,0)
(218,331,0)
(124,194,0)
(173,376,0)
(248,313,0)
(55,359,0)
(29,243,0)
(303,209,0)
(306,180,0)
(61,383,0)
(360,155,0)
(240,3,0)
(151,58,0)
(381,308,0)
(262,155,0)
(336,18,0)
(193,187,0)
(128,93,0)
(209,312,0)
(45,180,0)
(38,149,0)
(15,191,0)
(331,174,0)
(82,98,0)
(157,207,0)
(189,343,0)
(61,306,0)
(168,8,0)
(44,74,0)
(176,180,0)
(237,152,0)
(176,57,0)
(91,377,0)
(382,243,0)
(102,43,0)
(24,124,0)
(41,135,0)
(85,176,0)
(225,377,0)
(136,308,0)
(375,221,0)
(295,274,0)
(201,339,0)
(273,324,0)
(132,283,0)
(159,293,0)
(361,243,0)
(319,217,0)
(72,243,0)
(77,167,0)
(267,69,0)
(301,324,0)
(290,179,0)
(351,31,0)
(348,234,0)
(174,135,0)
(56,61,0)
(113,217,0)
(319,244,0)
(300,303,0)
(325,206,0)
(95,232,0)
(135,383,0)
(88,258,0)
(344,133,0)
(267,258,0)
(275,306,0)
(189,174,0)
(147,311,0)
(83,114,0)
(175,377,0)
(177,375,0)
(324,198,0)
(248,38,0)
(349,174,0)
(255,167,0)
(254,243,0)
(185,226,0)
(53,243,0)
(279,49,0)
(317,183,0)
(357,273,0)
(303,172,0)
(383,301,0)
(1,327,0)
(101,75,0)
(359,57,0)
(232,180,0)
(254,74,0)
(185,324,0)
(171,188,0)
(250,87,0)
(126,152,0)
(263,243,0)
(367,170,0)
(127,371,0)
(39,324,0)
(363,267,0)
(153,327,0)
(366,144,0)
(319,221,0)
(13,363,0)
(76,129,0)
(245,324,0)
(258,267,0)
(203,180,0)
(233,293,0)
(54,3,0)
(9,172,0)
(308,167,0)
(171,167,0)
(228,248,0)
(173,373,0)
(359,180,0)
(241,376,0)
(73,63,0)
(377,61,0)
(303,34,0)
(62,32,0)
(34,69,0)
(333,166,0)
(319,209,0)
(229,49,0)
(305,83,0)
(69,174,0)
(171,8,0)
(38,304,0)
(171,31,0)
(170,228,0)
(373,173,0)
(225,174,0)
(356,45,0)
(180,172,0)
(77,160,0)
(204,274,0)
(149,38,0)
(225,228,0)
(319,38,0)
(45,303,0)
(289,165,0)
(257,300,0)
(307,93,0)
(27,243,0)
(58,98,0)
(154,301,0)
(182,338,0)
(49,254,0)
(188,254,0)
(21,315,0)
(174,120,0)
(265,311,0)
(49,188,0)
(105,134,0)
(291,234,0)
(322,92,0)
(251,58,0)
(248,343,0)
(90,244,0)
(380,187,0)
(231,348,0)
(303,383,0)
(248,244,0)
(5,1,0)
(208,371,0)
(267,363,0)
(353,359,0)
(323,125,0)
(74,243,0)
(199,243,0)
(245,59,0)
(376,254,0)
(149,174,0)
(329,260,0)
(61,209,0)
(152,180,0)
(22,129,0)
(248,217,0)
(319,174,0)
(311,194,0)
(272,327,0)
(327,1,0)
(66,341,0)
(269,243,0)
(236,185,0)
(197,77,0)
(300,180,0)
(124,254,0)
(319,318,0)
(61,174,0)
(130,344,0)
(297,309,0)
(340,183,0)
(234,291,0)
(328,152,0)
(225,318,0)
(61,377,0)
(39,34,0)
(78,243,0)
(149,209,0)
(200,6,0)
(35,179,0)
(171,254,0)
(386,74,0)
(34,303,0)
(14,301,0)
(31,8,0)
(161,375,0)
(10,380,0)
(260,219,0)
(198,283,0)
(331,217,0)
(171,319,0)
(145,237,0)
(347,300,0)
(192,370,0)
(149,383,0)
(295,28,0)
(191,15,0)
(301,383,0)
(207,58,0)
(364,326,0)
(376,173,0)
(86,380,0)
(226,331,0)
(211,172,0)
(319,377,0)
(161,93,0)
(119,268,0)
(134,188,0)
(116,260,0)
(160,188,0)
(312,209,0)
(173,136,0)
(176,149,0)
(196,134,0)
(280,98,0)
(226,124,0)
(228,170,0)
(134,254,0)
(125,251,0)
(318,331,0)
(137,59,0)
(365,77,0)
(339,303,0)
(343,69,0)
(156,203,0)
(188,188,0)
(179,290,0)
(248,174,0)
(302,304,0)
(303,38,0)
(242,129,0)
(225,383,0)
(206,86,0)
(84,208,0)
(98,58,0)
(81,87,0)
(308,136,0)
(320,172,0)
(283,198,0)
(287,262,0)
(370,309,0)
(313,248,0)
(212,298,0)
(383,315,0)
(167,167,0)
(41,6,0)
(114,180,0)
(268,119,0)
(34,39,0)
(129,242,0)
(268,149,0)
(135,321,0)
(124,226,0)
(59,245,0)
(75,101,0)
(294,45,0)
(238,243,0)
(284,205,0)
(140,311,0)
(216,29,0)
(310,171,0)
(345,49,0)
(348,61,0)
(36,343,0)
(188,172,0)
(277,188,0)
(303,174,0)
(282,41,0)
(160,254,0)
(149,176,0)
(251,125,0)
(7,160,0)
(165,324,0)
(274,295,0)
(98,82,0)
(124,195,0)
(303,217,0)
(244,108,0)
(319,195,0)
(226,319,0)
(158,114,0)
(268,313,0)
(315,321,0)
(194,92,0)
(120,174,0)
(266,69,0)
(289,254,0)
(350,295,0)
(77,8,0)
(141,189,0)
(148,243,0)
(63,318,0)
(96,243,0)
(4,243,0)
(42,247,0)
(314,232,0)
(160,77,0)
(18,187,0)
(93,86,0)
(261,34,0)
(0,133,0)
(305,170,0)
(170,305,0)
(225,343,0)
(205,339,0)
(23,31,0)
(217,273,0)
(57,176,0)
(361,187,0)
(316,39,0)
(304,324,0)
(260,180,0)
(63,354,1)
(169,165,1)
(206,3,1)
(152,126,1)
(312,324,1)
(170,305,1)
(25,219,1)
(61,306,1)
(303,209,1)
(231,178,1)
(245,332,1)
(249,301,1)
(207,184,1)
(16,221,1)
(139,303,1)
(136,308,1)
(171,194,1)
(265,311,1)
(248,377,1)
(329,291,1)
(331,217,1)
(274,204,1)
(132,40,1)
(129,187,1)
(250,385,1)
(34,261,1)
(316,306,1)
(108,324,1)
(135,121,1)
(378,32,1)
(115,291,1)
(280,222,1)
(359,180,1)
(305,64,1)
(137,245,1)
(101,276,1)
(114,180,1)
(20,41,1)
(131,312,1)
(312,47,1)
(121,174,1)
(70,87,1)
(225,228,1)
(14,154,1)
(347,205,1)
(111,0,1)
(89,144,1)
(12,331,1)
(348,180,1)
(118,258,1)
(221,375,1)
(257,347,1)
(260,116,1)
(118,28,1)
(233,159,1)
(179,35,1)
(313,268,1)
(218,318,1)
(225,174,1)
(64,338,1)
(286,12,1)
(254,289,1)
(358,149,1)
(149,209,1)
(176,57,1)
(149,174,1)
(215,18,1)
(71,310,1)
(383,301,1)
(60,348,1)
(77,167,1)
(377,180,1)
(160,188,1)
(287,179,1)
(41,331,1)
(146,346,1)
(319,306,1)
(160,254,1)
(362,104,1)
(104,183,1)
(371,127,1)
(248,313,1)
(295,69,1)
(120,324,1)
(171,8,1)
(49,229,1)
(8,168,1)
(319,38,1)
(30,142,1)
(174,120,1)
(248,174,1)
(251,125,1)
(212,41,1)
(142,33,1)
(184,157,1)
(282,6,1)
(54,254,1)
(221,67,1)
(79,150,1)
(124,188,1)
(11,373,1)
(220,219,1)
(234,348,1)
(279,62,1)
(189,209,1)
(340,142,1)
(318,63,1)
(352,326,1)
(337,166,1)
(351,23,1)
(157,58,1)
(379,280,1)
(98,187,1)
(149,383,1)
(225,217,1)
(6,324,1)
(258,267,1)
(61,56,1)
(15,191,1)
(339,303,1)
(295,274,1)
(166,333,1)
(256,209,1)
(237,152,1)
(248,244,1)
(226,185,1)
(226,189,1)
(28,295,1)
(331,306,1)
(385,225,1)
(183,180,1)
(303,217,1)
(149,343,1)
(51,110,1)
(188,254,1)
(216,8,1)
(253,202,1)
(228,170,1)
(198,283,1)
(338,324,1)
(297,30,1)
(61,174,1)
(275,17,1)
(283,187,1)
(338,182,1)
(117,293,1)
(225,16,1)
(299,115,1)
(307,128,1)
(128,345,1)
(180,206,1)
(84,371,1)
(167,8,1)
(149,38,1)
(289,165,1)
(75,246,1)
(383,249,1)
(177,161,1)
(179,290,1)
(189,174,1)
(374,251,1)
(290,187,1)
(171,52,1)
(61,217,1)
(41,6,1)
(268,135,1)
(373,160,1)
(384,314,1)
(319,343,1)
(109,71,1)
(32,286,1)
(232,95,1)
(267,210,1)
(201,384,1)
(232,303,1)
(55,85,1)
(346,315,1)
(28,342,1)
(115,25,1)
(1,5,1)
(325,100,1)
(224,207,1)
(12,373,1)
(268,331,1)
(208,84,1)
(322,143,1)
(41,282,1)
(1,327,1)
(105,134,1)
(223,31,1)
(87,324,1)
(336,49,1)
(45,303,1)
(199,51,1)
(212,20,1)
(345,215,1)
(236,368,1)
(45,356,1)
(273,355,1)
(311,140,1)
(42,135,1)
(237,145,1)
(38,304,1)
(331,377,1)
(59,245,1)
(232,180,1)
(62,32,1)
(33,300,1)
(91,203,1)
(248,38,1)
(207,58,1)
(159,362,1)
(173,376,1)
(161,93,1)
(248,343,1)
(25,187,1)
(175,91,1)
(94,361,1)
(69,266,1)
(244,108,1)
(326,364,1)
(380,187,1)
(62,378,1)
(149,176,1)
(300,303,1)
(223,265,1)
(126,328,1)
(213,59,1)
(124,194,1)
(319,209,1)
(124,254,1)
(151,144,1)
(185,50,1)
(18,336,1)
(24,226,1)
(50,236,1)
(39,324,1)
(357,61,1)
(186,232,1)
(171,109,1)
(143,252,1)
(174,349,1)
(239,207,1)
(306,180,1)
(99,62,1)
(69,383,1)
(154,251,1)
(150,118,1)
(354,73,1)
(291,234,1)
(386,44,1)
(319,171,1)
(376,188,1)
(303,343,1)
(183,61,1)
(29,216,1)
(200,248,1)
(124,24,1)
(331,38,1)
(149,306,1)
(153,326,1)
(189,383,1)
(77,365,1)
(204,94,1)
(303,383,1)
(106,334,1)
(303,174,1)
(229,279,1)
(97,63,1)
(217,113,1)
(51,124,1)
(209,312,1)
(334,237,1)
(370,192,1)
(7,77,1)
(41,149,1)
(295,350,1)
(348,231,1)
(248,306,1)
(83,114,1)
(268,119,1)
(260,180,1)
(296,288,1)
(41,189,1)
(73,105,1)
(270,241,1)
(276,75,1)
(149,217,1)
(363,13,1)
(274,324,1)
(103,74,1)
(185,324,1)
(225,343,1)
(262,155,1)
(21,383,1)
(189,38,1)
(258,88,1)
(125,323,1)
(333,106,1)
(134,196,1)
(147,110,1)
(145,152,1)
(311,194,1)
(171,254,1)
(331,174,1)
(353,55,1)
(335,28,1)
(189,217,1)
(58,98,1)
(12,189,1)
(119,324,1)
(193,187,1)
(310,208,1)
(248,217,1)
(289,169,1)
(362,183,1)
(189,141,1)
(127,223,1)
(248,383,1)
(205,284,1)
(255,237,1)
(66,256,1)
(43,102,1)
(309,297,1)
(327,272,1)
(259,160,1)
(225,383,1)
(331,209,1)
(235,185,1)
(241,136,1)
(124,226,1)
(171,31,1)
(375,177,1)
(264,93,1)
(272,153,1)
(381,259,1)
(319,244,1)
(334,167,1)
(225,377,1)
(133,111,1)
(163,42,1)
(161,264,1)
(13,335,1)
(279,212,1)
(61,343,1)
(152,180,1)
(252,262,1)
(324,198,1)
(327,86,1)
(203,180,1)
(367,305,1)
(140,147,1)
(52,369,1)
(268,189,1)
(339,201,1)
(82,379,1)
(339,180,1)
(189,306,1)
(304,324,1)
(209,131,1)
(57,359,1)
(303,377,1)
(225,209,1)
(303,306,1)
(108,278,1)
(301,14,1)
(61,383,1)
(226,149,1)
(315,21,1)
(267,363,1)
(369,83,1)
(248,209,1)
(356,294,1)
(326,3,1)
(357,203,1)
(225,306,1)
(142,300,1)
(226,135,1)
(294,277,1)
(376,254,1)
(225,244,1)
(317,340,1)
(355,357,1)
(189,343,1)
(170,367,1)
(368,319,1)
(189,377,1)
(46,268,1)
(251,58,1)
(31,351,1)
(188,45,1)
(314,186,1)
(219,260,1)
(124,52,1)
(152,61,1)
(284,344,1)
(34,69,1)
(167,271,1)
(100,352,1)
(77,8,1)
(171,167,1)
(228,59,1)
(47,239,1)
(18,187,1)
(319,318,1)
(248,318,1)
(173,136,1)
(176,180,1)
(130,339,1)
(285,132,1)
(337,3,1)
(283,285,1)
(385,345,1)
(85,38,1)
(95,358,1)
(319,217,1)
(17,115,1)
(110,262,1)
(158,37,1)
(361,374,1)
(244,90,1)
(192,309,1)
(205,339,1)
(246,330,1)
(210,363,1)
(208,371,1)
(135,383,1)
(365,197,1)
(319,377,1)
(41,135,1)
(304,302,1)
(373,173,1)
(178,180,1)
(289,69,1)
(92,187,1)
(193,162,1)
(80,200,1)
(81,250,1)
(194,92,1)
(61,377,1)
(141,244,1)
(300,180,1)
(340,370,1)
(288,228,1)
(268,26,1)
(156,362,1)
(93,86,1)
(134,254,1)
(171,188,1)
(371,324,1)
(196,48,1)
(160,77,1)
(93,307,1)
(245,324,1)
(331,343,1)
(181,311,1)
(247,163,1)
(37,217,1)
(32,324,1)
(273,324,1)
(86,380,1)
(345,49,1)
(287,242,1)
(87,81,1)
(226,319,1)
(302,139,1)
(301,324,1)
(162,66,1)
(69,174,1)
(303,38,1)
(155,52,1)
(59,137,1)
(6,80,1)
(49,254,1)
(39,112,1)
(319,228,1)
(56,377,1)
(188,188,1)
(342,295,1)
(113,273,1)
(311,52,1)
(240,54,1)
(90,108,1)
(309,303,1)
(234,60,1)
(165,79,1)
(63,324,1)
(76,22,1)
(268,149,1)
(349,120,1)
(217,273,1)
(293,303,1)
(144,366,1)
(226,331,1)
(61,209,1)
(222,151,1)
(308,167,1)
(350,274,1)
(49,188,1)
(114,158,1)
(144,101,1)
(3,240,1)
(306,275,1)
(331,218,1)
(374,193,1)
(156,15,1)
(372,199,1)
(369,87,1)
(313,46,1)
(363,324,1)
(31,8,1)
(330,29,1)
(293,180,1)
(61,38,1)
(343,36,1)
(225,38,1)
(262,287,1)
(247,324,1)
(267,69,1)
(183,317,1)
(182,213,1)
(318,97,1)
(35,290,1)
(292,10,1)
(67,375,1)
(25,220,1)
(166,3,1)
(202,1,1)
(48,253,1)
(332,99,1)
(119,296,1)
(254,74,1)
(364,337,1)
(369,70,1)
(31,167,1)
(123,155,1)
(361,187,1)
(377,175,1)
(34,39,1)
(343,247,1)
(370,309,1)
(98,82,1)
(214,304,1)
(309,180,1)
(242,129,1)
(319,174,1)
(23,265,1)
(155,360,1)
(75,324,1)
(160,7,1)
(226,235,1)
(277,83,1)
(328,188,1)
(112,316,1)
(376,270,1)
(110,194,1)
(308,8,1)
(10,230,1)
(102,117,1)
(314,232,1)
(300,257,1)
(168,103,1)
(45,180,1)
(333,299,1)
(359,353,1)
(305,338,1)
(167,167,1)
(149,377,1)
(308,381,1)
(261,39,1)
(36,247,1)
(290,123,1)
(134,188,1)
(191,43,1)
(366,101,1)
(129,76,1)
(271,255,1)
(380,292,1)
(265,181,1)
(206,325,1)
(331,383,1)
(266,343,1)
(44,324,1)
(15,293,1)
(88,267,1)
(344,133,1)
(206,86,1)
(203,156,1)
(197,105,1)
(74,386,1)
(116,329,1)
(348,61,1)
(319,383,1)
(0,130,1)
(305,83,1)
(92,322,1)
(106,180,1)
(26,119,1)
(165,324,1)
(278,11,1)
(101,75,1)
(372,89,1)
(5,327,1)
(347,314,1)
(22,179,1)
(303,34,1)
(374,69,1)
(323,224,1)
(360,52,1)
(225,318,1)
(293,233,1)
(40,86,1)
(105,1,1)
(375,161,1)
(38,214,1)
(319,221,1)
(120,146,1)
(105,1,2)
(299,115,2)
(297,142,2)
(331,105,2)
(367,62,2)
(43,362,2)
(213,62,2)
(349,251,2)
(231,326,2)
(260,291,2)
(49,254,2)
(13,28,2)
(87,144,2)
(272,144,2)
(339,314,2)
(289,165,2)
(345,215,2)
(203,115,2)
(303,217,2)
(49,144,2)
(226,135,2)
(290,187,2)
(32,324,2)
(303,383,2)
(188,45,2)
(301,324,2)
(258,267,2)
(222,144,2)
(336,49,2)
(278,373,2)
(152,61,2)
(147,110,2)
(57,115,2)
(273,324,2)
(251,207,2)
(106,115,2)
(180,206,2)
(358,115,2)
(311,194,2)
(333,326,2)
(208,371,2)
(225,306,2)
(354,105,2)
(15,191,2)
(189,377,2)
(121,251,2)
(318,63,2)
(149,174,2)
(85,115,2)
(136,160,2)
(242,129,2)
(306,180,2)
(217,115,2)
(104,115,2)
(360,144,2)
(245,62,2)
(225,228,2)
(308,167,2)
(81,144,2)
(135,383,2)
(173,136,2)
(344,314,2)
(302,115,2)
(31,167,2)
(124,254,2)
(98,82,2)
(149,209,2)
(383,251,2)
(180,326,2)
(18,49,2)
(248,62,2)
(303,377,2)
(339,303,2)
(254,289,2)
(303,174,2)
(165,144,2)
(373,105,2)
(161,93,2)
(189,343,2)
(308,8,2)
(307,345,2)
(343,247,2)
(286,144,2)
(171,8,2)
(319,244,2)
(232,303,2)
(189,383,2)
(134,188,2)
(141,373,2)
(236,110,2)
(160,105,2)
(331,217,2)
(225,174,2)
(369,83,2)
(268,331,2)
(295,69,2)
(150,144,2)
(90,373,2)
(335,28,2)
(223,110,2)
(93,345,2)
(221,375,2)
(331,377,2)
(373,173,2)
(155,52,2)
(23,265,2)
(368,110,2)
(207,144,2)
(67,345,2)
(124,52,2)
(265,311,2)
(287,242,2)
(252,262,2)
(338,324,2)
(248,318,2)
(303,343,2)
(260,180,2)
(105,134,2)
(362,115,2)
(329,291,2)
(287,179,2)
(61,343,2)
(319,318,2)
(129,179,2)
(91,203,2)
(215,18,2)
(206,86,2)
(274,324,2)
(59,245,2)
(268,119,2)
(284,314,2)
(110,144,2)
(171,254,2)
(151,144,2)
(248,313,2)
(303,34,2)
(239,207,2)
(259,160,2)
(116,291,2)
(117,362,2)
(3,144,2)
(189,174,2)
(309,180,2)
(271,237,2)
(319,221,2)
(135,251,2)
(325,326,2)
(245,324,2)
(45,303,2)
(348,180,2)
(106,180,2)
(50,110,2)
(14,251,2)
(225,209,2)
(166,326,2)
(25,187,2)
(363,324,2)
(248,377,2)
(315,251,2)
(373,160,2)
(206,3,2)
(125,207,2)
(258,28,2)
(189,217,2)
(306,115,2)
(162,207,2)
(109,110,2)
(209,207,2)
(248,306,2)
(171,110,2)
(77,167,2)
(317,115,2)
(120,324,2)
(309,142,2)
(55,115,2)
(39,115,2)
(36,251,2)
(359,115,2)
(383,301,2)
(311,110,2)
(319,228,2)
(171,52,2)
(56,203,2)
(331,306,2)
(41,189,2)
(34,115,2)
(34,39,2)
(327,144,2)
(342,144,2)
(212,41,2)
(58,98,2)
(31,8,2)
(61,174,2)
(115,25,2)
(200,62,2)
(16,345,2)
(11,373,2)
(41,62,2)
(167,167,2)
(234,326,2)
(139,115,2)
(1,144,2)
(232,180,2)
(93,86,2)
(163,251,2)
(345,49,2)
(331,38,2)
(12,144,2)
(171,188,2)
(312,207,2)
(89,144,2)
(233,362,2)
(225,244,2)
(39,324,2)
(371,324,2)
(207,58,2)
(226,189,2)
(127,110,2)
(98,144,2)
(303,209,2)
(229,144,2)
(345,144,2)
(108,324,2)
(41,135,2)
(295,144,2)
(83,115,2)
(234,348,2)
(267,69,2)
(194,92,2)
(84,110,2)
(362,183,2)
(293,180,2)
(165,324,2)
(198,283,2)
(192,142,2)
(61,38,2)
(177,345,2)
(256,207,2)
(153,144,2)
(149,38,2)
(359,180,2)
(45,180,2)
(61,203,2)
(185,324,2)
(86,380,2)
(114,115,2)
(37,115,2)
(319,383,2)
(79,144,2)
(137,62,2)
(98,187,2)
(118,144,2)
(25,291,2)
(316,115,2)
(61,377,2)
(374,144,2)
(183,115,2)
(225,343,2)
(300,180,2)
(355,115,2)
(25,219,2)
(191,43,2)
(15,293,2)
(124,226,2)
(248,383,2)
(348,61,2)
(273,115,2)
(384,314,2)
(28,144,2)
(184,144,2)
(170,305,2)
(305,338,2)
(155,144,2)
(343,251,2)
(71,110,2)
(249,251,2)
(226,331,2)
(379,144,2)
(312,324,2)
(115,326,2)
(331,209,2)
(225,345,2)
(293,362,2)
(100,326,2)
(217,273,2)
(370,142,2)
(134,254,2)
(209,312,2)
(32,144,2)
(205,314,2)
(304,324,2)
(378,144,2)
(380,187,2)
(262,155,2)
(52,144,2)
(31,265,2)
(208,110,2)
(101,75,2)
(21,251,2)
(189,209,2)
(377,180,2)
(301,251,2)
(80,62,2)
(64,62,2)
(33,115,2)
(225,318,2)
(203,180,2)
(303,115,2)
(6,324,2)
(183,61,2)
(274,144,2)
(376,254,2)
(347,115,2)
(322,262,2)
(309,303,2)
(289,144,2)
(15,362,2)
(201,314,2)
(140,110,2)
(42,251,2)
(176,180,2)
(124,188,2)
(293,303,2)
(149,383,2)
(134,196,2)
(250,144,2)
(5,144,2)
(340,115,2)
(167,8,2)
(280,144,2)
(304,115,2)
(372,89,2)
(113,115,2)
(176,57,2)
(174,120,2)
(108,373,2)
(63,105,2)
(295,274,2)
(188,115,2)
(361,144,2)
(115,291,2)
(337,326,2)
(160,188,2)
(248,217,2)
(339,180,2)
(87,324,2)
(0,314,2)
(82,144,2)
(338,62,2)
(161,345,2)
(225,217,2)
(262,144,2)
(268,149,2)
(255,237,2)
(385,144,2)
(152,180,2)
(63,324,2)
(219,260,2)
(248,38,2)
(346,251,2)
(38,115,2)
(323,207,2)
(371,110,2)
(62,144,2)
(365,105,2)
(226,149,2)
(22,179,2)
(363,28,2)
(305,83,2)
(20,62,2)
(205,339,2)
(149,377,2)
(377,203,2)
(206,326,2)
(357,115,2)
(331,174,2)
(300,303,2)
(128,345,2)
(381,160,2)
(46,62,2)
(268,135,2)
(188,254,2)
(34,69,2)
(186,115,2)
(189,38,2)
(149,306,2)
(247,324,2)
(214,115,2)
(257,115,2)
(283,187,2)
(41,331,2)
(62,32,2)
(237,152,2)
(181,110,2)
(225,38,2)
(319,217,2)
(261,115,2)
(175,203,2)
(167,237,2)
(326,144,2)
(331,383,2)
(228,59,2)
(237,115,2)
(173,160,2)
(149,217,2)
(212,62,2)
(240,144,2)
(158,115,2)
(244,373,2)
(351,265,2)
(291,234,2)
(156,115,2)
(210,28,2)
(129,187,2)
(267,363,2)
(248,343,2)
(92,262,2)
(61,306,2)
(171,31,2)
(61,383,2)
(196,1,2)
(225,383,2)
(291,326,2)
(94,144,2)
(370,309,2)
(52,369,2)
(221,345,2)
(171,167,2)
(199,144,2)
(142,115,2)
(160,77,2)
(6,62,2)
(314,115,2)
(134,1,2)
(176,115,2)
(183,180,2)
(142,300,2)
(130,314,2)
(332,62,2)
(242,179,2)
(193,187,2)
(319,306,2)
(77,8,2)
(284,344,2)
(248,209,2)
(226,319,2)
(232,115,2)
(17,115,2)
(324,198,2)
(170,62,2)
(279,144,2)
(369,144,2)
(75,324,2)
(375,161,2)
(149,176,2)
(73,105,2)
(119,62,2)
(124,110,2)
(305,62,2)
(287,155,2)
(28,295,2)
(348,326,2)
(166,3,2)
(225,377,2)
(178,326,2)
(45,115,2)
(143,262,2)
(99,62,2)
(364,144,2)
(282,62,2)
(171,194,2)
(114,180,2)
(248,174,2)
(24,110,2)
(157,144,2)
(205,284,2)
(38,304,2)
(326,3,2)
(220,291,2)
(319,110,2)
(310,110,2)
(334,115,2)
(319,343,2)
(112,115,2)
(111,314,2)
(327,86,2)
(69,251,2)
(61,217,2)
(290,155,2)
(144,101,2)
(319,209,2)
(262,287,2)
(241,136,2)
(194,262,2)
(313,268,2)
(160,254,2)
(95,115,2)
(41,6,2)
(376,188,2)
(300,115,2)
(126,115,2)
(226,185,2)
(154,251,2)
(356,115,2)
(179,155,2)
(228,170,2)
(364,326,2)
(226,110,2)
(76,179,2)
(105,144,2)
(319,171,2)
(102,362,2)
(218,105,2)
(70,144,2)
(277,115,2)
(268,62,2)
(267,28,2)
(375,345,2)
(350,144,2)
(131,207,2)
(188,188,2)
(319,174,2)
(77,105,2)
(235,110,2)
(268,189,2)
(361,187,2)
(352,326,2)
(57,359,2)
(247,251,2)
(328,115,2)
(311,52,2)
(376,136,2)
(294,115,2)
(185,110,2)
(66,207,2)
(308,160,2)
(179,290,2)
(331,343,2)
(254,74,2)
(69,174,2)
(313,62,2)
(149,115,2)
(303,306,2)
(265,110,2)
(288,62,2)
(136,308,2)
(60,326,2)
(219,291,2)
(191,362,2)
(59,62,2)
(224,207,2)
(251,58,2)
(97,105,2)
(204,144,2)
(146,251,2)
(319,377,2)
(173,376,2)
(149,343,2)
(119,324,2)
(303,38,2)
(145,115,2)
(69,383,2)
(88,28,2)
(18,187,2)
(253,1,2)
(215,49,2)
(124,194,2)
(353,115,2)
(202,1,2)
(174,251,2)
(54,144,2)
(120,251,2)
(49,188,2)
(337,144,2)
(228,62,2)
(326,326,2)
(251,125,2)
(159,362,2)
(58,144,2)
(61,209,2)
(30,142,2)
(319,38,2)
(314,232,2)
(318,105,2)
(369,87,2)
(51,144,2)
(296,62,2)
(344,133,2)
(48,1,2)
(169,144,2)
(270,136,2)
(197,105,2)
(244,108,2)
(254,144,2)
(264,345,2)
(47,207,2)
(289,69,2)
(189,306,2)
(133,314,2)
(152,115,2)
(92,187,2)
(189,373,2)
(26,62,2)
(1,327,2)
(182,62,2)
(275,115,2)
(7,77,2)
(266,251,2)
(83,114,2)
(193,207,2)
(248,244,2)
(35,155,2)
(123,155,2)
(41,149,2)
-----------------------------------
(0,AC_ERR_MEDIA)
(1,ap->pflags & ATA_PFLAG_FROZEN)
(2,if (rc == 0)
(3,tag = 0)
(4,if (!dev && ((ata_link_max_devices(link)
(5,ATA_PFLAG_FROZEN)
(6,ehc->i)
(7,all_err_mask)
(8,eflags = 0)
(9,if (!(qc->flags & ATA_QCFLAG_FAILED)
(10,link)
(11,ehc)
(12,ehc)
(13,i)
(14,i)
(15,qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_OTHER)
(16,AC_ERR_TIMEOUT)
(17,qc)
(18,ata_is_host_link(link)
(19,all_err_mask)
(20,~ATA_EH_PERDEV_MASK)
(21,ATA_ALL_DEVICES)
(22,link)
(23,eflags)
(24,all_err_mask)
(25,ata_dev_phys_link(qc->dev)
(26,action)
(27,if (ap->pflags & ATA_PFLAG_FROZEN ||\n\\n\\t    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT)
(28,ehc->i.err_mask & ~AC_ERR_OTHER)
(29,DPRINTK("ENTER\\n")
(30,qc)
(31,eflags |= ATA_EFLAG_DUBIOUS_XFER)
(32,ehc->i)
(33,~AC_ERR_OTHER)
(34,ehc->i.err_mask)
(35,1)
(36,err_mask)
(37,qc)
(38,ehc->i.action)
(39,ehc->i)
(40,ehc)
(41,ehc->i.action)
(42,ehc)
(43,AC_ERR_DEV | AC_ERR_OTHER)
(44,all_err_mask)
(45,qc->err_mask)
(46,ATA_EH_PERDEV_MASK)
(47,i)
(48,AC_ERR_TIMEOUT)
(49,all_err_mask & AC_ERR_TIMEOUT)
(50,i)
(51,"EXIT\\n")
(52,dev = ehc->i.dev)
(53,rc)
(54,tag)
(55,qc)
(56,ATA_QCFLAG_RETRY)
(57,&qc->result_tf)
(58,rc = sata_scr_read(link, SCR_ERROR, &serror)
(59,ehc->i.dev_action)
(60,ATA_QCFLAG_FAILED)
(61,qc->flags |= ATA_QCFLAG_RETRY)
(62,ehc->i.dev)
(63,ehc->i)
(64,dev)
(65,if (qc->flags & ATA_QCFLAG_IO)
(66,ehc->i.serror |= serror)
(67,err_mask)
(68,if (ata_eh_worth_retry(qc)
(69,ehc->i.err_mask |= AC_ERR_OTHER)
(70,dev)
(71,eflags)
(72,if (ehc->i.flags & ATA_EHI_NO_AUTOPSY)
(73,ehc)
(74,all_err_mask = 0)
(75,ehc->i)
(76,device)
(77,eflags & ATA_EFLAG_IS_IO)
(78,tag)
(79,i)
(80,i)
(81,i)
(82,&serror)
(83,ehc->i.dev = qc->dev)
(84,action)
(85,qc)
(86,*ap = link->ap)
(87,ehc->i)
(88,~AC_ERR_OTHER)
(89,return;)
(90,action)
(91,qc)
(92,link->device)
(93,ap->link)
(94,ehc)
(95,err_mask)
(96,if (ehc->i.err_mask & ~AC_ERR_OTHER)
(97,action)
(98,sata_scr_read(link, SCR_ERROR, &serror)
(99,ehc)
(100,ap)
(101,ehc->i.flags)
(102,AC_ERR_OTHER)
(103,eflags)
(104,ATA_QCFLAG_SENSE_VALID)
(105,ap->pflags & ATA_PFLAG_FROZEN ||\n\\n\\t    all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT)
(106,trace_ata_eh_link_autopsy_qc(qc)
(107,if ((all_err_mask & AC_ERR_TIMEOUT)
(108,ehc->i)
(109,all_err_mask)
(110,dev)
(111,AC_ERR_INVALID)
(112,i)
(113,dev)
(114,qc->dev)
(115,!(qc->flags & ATA_QCFLAG_FAILED)
(116,dev)
(117,AC_ERR_DEV)
(118,all_err_mask)
(119,ehc->i)
(120,ehc->i)
(121,ATA_EH_RESET)
(122,qc)
(123,link)
(124,trace_ata_eh_link_autopsy(dev, ehc->i.action, all_err_mask)
(125,-EOPNOTSUPP)
(126,flags)
(127,i)
(128,ap)
(129,link->device)
(130,AC_ERR_DEV)
(131,serror)
(132,link)
(133,AC_ERR_MEDIA |\n\\n\\t\\t\\t\\t\\t  AC_ERR_INVALID)
(134,all_err_mask & (AC_ERR_HSM | AC_ERR_TIMEOUT)
(135,ehc->i.action |= ATA_EH_RESET)
(136,!(eflags & ATA_EFLAG_IS_IO)
(137,dev_action)
(138,for (tag = 0; tag < ATA_MAX_QUEUE; tag++)
(139,ehc)
(140,flags)
(141,ATA_EH_REVALIDATE)
(142,qc->err_mask & ~AC_ERR_OTHER)
(143,link)
(144,ehc->i.flags & ATA_EHI_NO_AUTOPSY)
(145,ATA_QCFLAG_IO)
(146,i)
(147,dev)
(148,if (dev)
(149,ehc->i.action |= ata_eh_analyze_tf(qc, &qc->result_tf)
(150,ehc)
(151,rc)
(152,qc->flags)
(153,ap)
(154,ehc)
(155,!dev)
(156,qc)
(157,rc)
(158,dev)
(159,qc)
(160,(eflags & ATA_EFLAG_IS_IO)
(161,ap->link.eh_context)
(162,link)
(163,i)
(164,dev)
(165,ehc->i)
(166,tag++)
(167,eflags |= ATA_EFLAG_IS_IO)
(168,0)
(169,err_mask)
(170,ehc->i.dev->devno)
(171,ata_eh_speed_down(dev, eflags, all_err_mask)
(172,)
(173,!(eflags & ATA_EFLAG_IS_IO)
(174,ehc->i.action)
(175,flags)
(176,ata_eh_analyze_tf(qc, &qc->result_tf)
(177,i)
(178,qc)
(179,ata_link_max_devices(link)
(180,*qc = __ata_qc_from_tag(ap, tag)
(181,ATA_DFLAG_DUBIOUS_XFER)
(182,i)
(183,qc->flags)
(184,0)
(185,ehc->i)
(186,AC_ERR_ATA_BUS)
(187,struct ata_link *link)
(188,all_err_mask |= qc->err_mask)
(189,ehc->i.action |= ATA_EH_REVALIDATE)
(190,ehc)
(191,~(AC_ERR_DEV | AC_ERR_OTHER)
(192,~AC_ERR_OTHER)
(193,ata_eh_analyze_serror(link)
(194,dev = link->device)
(195,)
(196,AC_ERR_HSM | AC_ERR_TIMEOUT)
(197,eflags)
(198,&link->eh_context)
(199,DPRINTK("EXIT\\n")
(200,ehc)
(201,err_mask)
(202,all_err_mask)
(203,ata_eh_worth_retry(qc)
(204,i)
(205,qc->err_mask &= ~(AC_ERR_DEV | AC_ERR_MEDIA |\n\\n\\t\\t\\t\\t\\t  AC_ERR_INVALID)
(206,__ata_qc_from_tag(ap, tag)
(207,rc == 0)
(208,ehc->i.action)
(209,ehc->i.serror)
(210,err_mask)
(211,if (qc->err_mask & ~AC_ERR_OTHER)
(212,ehc->i.action &= ~ATA_EH_PERDEV_MASK)
(213,ehc)
(214,action)
(215,!ata_is_host_link(link)
(216,"ENTER\\n")
(217,ehc->i.dev)
(218,ATA_EH_RESET)
(219,ata_dev_phys_link(qc->dev)
(220,link)
(221,ap->link.eh_context.i.err_mask)
(222,link)
(223,ehc)
(224,rc)
(225,ap->link.eh_context.i.err_mask |= AC_ERR_TIMEOUT)
(226,ehc->i.action)
(227,if (dev->flags & ATA_DFLAG_DUBIOUS_XFER)
(228,ehc->i.dev_action[ehc->i.dev->devno])
(229,AC_ERR_TIMEOUT)
(230,ap)
(231,flags)
(232,qc->err_mask)
(233,err_mask)
(234,qc->flags & ATA_QCFLAG_FAILED)
(235,action)
(236,ehc)
(237,qc->flags & ATA_QCFLAG_IO)
(238,eflags)
(239,ehc)
(240,0)
(241,all_err_mask)
(242,ata_dev_enabled(link->device)
(243,)
(244,ehc->i.action)
(245,ehc->i)
(246,i)
(247,ehc->i)
(248,ehc->i.dev_action[ehc->i.dev->devno] |=\n\\n\\t\\t\\tehc->i.action & ATA_EH_PERDEV_MASK)
(249,probe_mask)
(250,ehc)
(251,rc != -EOPNOTSUPP)
(252,dev)
(253,AC_ERR_HSM)
(254,all_err_mask |= ehc->i.err_mask)
(255,eflags)
(256,serror)
(257,err_mask)
(258,ehc->i.err_mask &= ~AC_ERR_OTHER)
(259,eflags)
(260,qc->dev)
(261,err_mask)
(262,!dev && ((ata_link_max_devices(link)
(263,ap)
(264,eh_context)
(265,dev->flags & ATA_DFLAG_DUBIOUS_XFER)
(266,AC_ERR_OTHER)
(267,ehc->i.err_mask)
(268,ehc->i.action)
(269,if (ehc->i.dev)
(270,~AC_ERR_DEV)
(271,ATA_EFLAG_IS_IO)
(272,pflags)
(273,ehc->i)
(274,ehc->i)
(275,err_mask)
(276,flags)
(277,all_err_mask)
(278,i)
(279,all_err_mask)
(280,SCR_ERROR)
(281,if (qc->err_mask & AC_ERR_ATA_BUS)
(282,action)
(283,link->eh_context)
(284,~(AC_ERR_DEV | AC_ERR_MEDIA |\n\\n\\t\\t\\t\\t\\t  AC_ERR_INVALID)
(285,eh_context)
(286,i)
(287,ata_link_max_devices(link)
(288,ehc)
(289,ehc->i.err_mask)
(290,ata_link_max_devices(link)
(291,!(qc->flags & ATA_QCFLAG_FAILED)
(292,ap)
(293,qc->err_mask)
(294,qc)
(295,ehc->i.err_mask)
(296,i)
(297,err_mask)
(298,)
(299,continue;)
(300,qc->err_mask)
(301,ehc->i)
(302,i)
(303,qc->err_mask |= ehc->i.err_mask)
(304,ehc->i)
(305,ehc->i.dev)
(306,qc->err_mask)
(307,link)
(308,eflags & ATA_EFLAG_IS_IO)
(309,qc->err_mask)
(310,dev)
(311,dev->flags)
(312,ehc->i)
(313,ehc->i.action & ATA_EH_PERDEV_MASK)
(314,qc->err_mask & AC_ERR_ATA_BUS)
(315,ehc->i.probe_mask |= ATA_ALL_DEVICES)
(316,ehc)
(317,flags)
(318,ehc->i.action)
(319,ehc->i.action |= ata_eh_speed_down(dev, eflags, all_err_mask)
(320,if (qc->flags & ATA_QCFLAG_SENSE_VALID)
(321,)
(322,device)
(323,EOPNOTSUPP)
(324,*ehc = &link->eh_context)
(325,tag)
(326,tag < ATA_MAX_QUEUE)
(327,ap->pflags)
(328,qc)
(329,qc)
(330,ehc)
(331,ehc->i.action |= ATA_EH_RESET)
(332,i)
(333,tag)
(334,qc)
(335,ehc)
(336,link)
(337,tag)
(338,ehc->i)
(339,qc->err_mask)
(340,qc)
(341,)
(342,~AC_ERR_OTHER)
(343,ehc->i.err_mask)
(344,AC_ERR_DEV | AC_ERR_MEDIA |\n\\n\\t\\t\\t\\t\\t  AC_ERR_INVALID)
(345,(all_err_mask & AC_ERR_TIMEOUT)
(346,ehc)
(347,qc)
(348,qc->flags)
(349,action)
(350,err_mask)
(351,ATA_EFLAG_DUBIOUS_XFER)
(352,qc)
(353,result_tf)
(354,i)
(355,i)
(356,err_mask)
(357,ehc)
(358,qc)
(359,qc->result_tf)
(360,dev)
(361,ata_eh_analyze_ncq_error(link)
(362,qc->flags & ATA_QCFLAG_SENSE_VALID)
(363,ehc->i)
(364,ATA_MAX_QUEUE)
(365,ATA_EFLAG_IS_IO)
(366,ATA_EHI_NO_AUTOPSY)
(367,devno)
(368,dev)
(369,ehc->i.dev)
(370,qc->err_mask &= ~AC_ERR_OTHER)
(371,ehc->i)
(372,RET)
(373,((eflags & ATA_EFLAG_IS_IO)
(374,link)
(375,ap->link.eh_context.i)
(376,all_err_mask & ~AC_ERR_DEV)
(377,qc->flags)
(378,dev)
(379,serror)
(380,link->ap)
(381,ATA_EFLAG_IS_IO)
(382,serror)
(383,ehc->i.probe_mask)
(384,qc)
(385,dev)
(386,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^