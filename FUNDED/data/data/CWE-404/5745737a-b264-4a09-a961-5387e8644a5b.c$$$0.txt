-----label-----
1
-----code-----
int
copy_thread(unsigned long clone_flags, unsigned long usp,
	    unsigned long arg,
	    struct task_struct *p)
{
	extern void ret_from_fork(void);
	extern void ret_from_kernel_thread(void);

	struct thread_info *childti = task_thread_info(p);
	struct pt_regs *childregs = task_pt_regs(p);
	struct pt_regs *regs = current_pt_regs();
	struct switch_stack *childstack, *stack;

	childstack = ((struct switch_stack *) childregs) - 1;
	childti->pcb.ksp = (unsigned long) childstack;
	childti->pcb.flags = 1;	/* set FEN, clear everything else */

	if (unlikely(p->flags & PF_KTHREAD)) {
		/* kernel thread */
		memset(childstack, 0,
			sizeof(struct switch_stack) + sizeof(struct pt_regs));
		childstack->r26 = (unsigned long) ret_from_kernel_thread;
		childstack->r9 = usp;	/* function */
		childstack->r10 = arg;
		childregs->hae = alpha_mv.hae_cache,
		childti->pcb.usp = 0;
		return 0;
	}
	/* Note: if CLONE_SETTLS is not set, then we must inherit the
	   value from the parent, which will have been set by the block
	   copy in dup_task_struct.  This is non-intuitive, but is
	   required for proper operation in the case of a threaded
	   application calling fork.  */
	if (clone_flags & CLONE_SETTLS)
		childti->pcb.unique = regs->r20;
	else
		regs->r20 = 0;	/* OSF/1 has some strange fork() semantics.  */
	childti->pcb.usp = usp ?: rdusp();
	*childregs = *regs;
	childregs->r0 = 0;
	childregs->r19 = 0;
	childregs->r20 = 1;	/* OSF/1 has some strange fork() semantics.  */
	stack = ((struct switch_stack *) regs) - 1;
	*childstack = *stack;
	childstack->r26 = (unsigned long) ret_from_fork;
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
7,8
9,10
9,11
11,12
13,14
13,15
15,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
23,42
23,43
24,25
25,26
25,27
27,28
27,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
38,40
40,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
59,62
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
75,76
76,77
77,78
79,80
80,81
80,82
80,83
81,82
83,84
83,85
86,87
86,88
89,90
90,91
90,92
91,92
93,94
93,95
94,95
95,96
95,97
96,97
96,98
97,98
99,100
101,102
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
112,114
113,114
113,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
121,123
122,123
127,128
127,129
128,129
128,130
129,130
131,132
131,133
132,133
132,134
133,134
136,137
138,139
138,140
138,141
138,142
138,143
138,144
139,140
140,141
140,142
140,143
140,144
141,142
143,144
146,147
146,148
147,148
148,149
148,150
149,150
152,153
153,154
153,155
154,155
157,158
158,159
158,160
159,160
159,161
160,161
163,164
163,165
164,165
164,166
167,168
169,170
170,171
170,172
171,172
171,173
172,173
175,176
177,178
178,179
178,180
179,180
179,181
180,181
183,184
185,186
186,187
186,188
187,188
187,189
188,189
188,190
189,190
192,193
192,194
193,194
196,197
196,198
197,198
197,199
198,199
198,200
199,200
204,205
206,207
206,208
206,209
207,208
207,209
208,209
210,211
212,213
213,214
213,215
214,215
214,216
215,216
215,217
216,217
220,221
220,222
221,222
224,225
225,226
225,227
226,227
226,228
227,228
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
239,240
239,241
240,241
242,243
243,244
245,246
246,247
246,248
247,248
248,249
250,251
251,252
253,254
254,255
254,256
255,256
255,257
256,257
260,261
261,262
261,263
262,263
262,264
263,264
267,268
268,269
268,270
269,270
269,271
270,271
274,275
275,276
275,277
276,277
278,279
278,280
279,280
280,281
280,282
281,282
281,283
282,283
284,285
286,287
289,290
290,291
290,292
291,292
292,293
294,295
295,296
297,298
298,299
298,300
299,300
299,301
300,301
303,304
303,305
304,305
304,306
307,308
309,310
-----nextToken-----
2,4,6,8,10,12,14,16,19,21,22,26,28,30,32,35,37,39,41,45,47,48,52,54,58,60,61,65,67,71,73,74,78,82,84,85,87,88,92,98,100,102,103,109,110,111,114,115,117,123,124,125,126,130,134,135,137,142,144,145,150,151,155,156,161,162,165,166,168,173,174,176,181,182,184,190,191,194,195,200,201,202,203,205,209,211,217,218,219,222,223,228,229,230,236,237,238,241,244,249,252,257,258,259,264,265,266,271,272,273,277,283,285,287,288,293,296,301,302,305,306,308,310
-----computeFrom-----
90,91
90,92
93,94
93,95
105,106
105,107
119,120
119,121
131,132
131,133
146,147
146,148
158,159
158,160
170,171
170,172
178,179
178,180
187,188
187,189
196,197
196,198
207,208
207,209
213,214
213,215
225,226
225,227
232,233
232,234
246,247
246,248
254,255
254,256
261,262
261,263
268,269
268,270
275,276
275,277
278,279
278,280
290,291
290,292
298,299
298,300
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;ExpressionList;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
intcopy_thread(unsigned long clone_flags, unsigned long usp,	    unsigned long arg,	    struct task_struct *p){	extern void ret_from_fork(void);	extern void ret_from_kernel_thread(void);	struct thread_info *childti = task_thread_info(p);	struct pt_regs *childregs = task_pt_regs(p);	struct pt_regs *regs = current_pt_regs();	struct switch_stack *childstack, *stack;	childstack = ((struct switch_stack *) childregs) - 1;	childti->pcb.ksp = (unsigned long) childstack;	childti->pcb.flags = 1;	/* set FEN, clear everything else */	if (unlikely(p->flags & PF_KTHREAD)) {		/* kernel thread */		memset(childstack, 0,			sizeof(struct switch_stack) + sizeof(struct pt_regs));		childstack->r26 = (unsigned long) ret_from_kernel_thread;		childstack->r9 = usp;	/* function */		childstack->r10 = arg;		childregs->hae = alpha_mv.hae_cache,		childti->pcb.usp = 0;		return 0;	}	/* Note: if CLONE_SETTLS is not set, then we must inherit the	   value from the parent, which will have been set by the block	   copy in dup_task_struct.  This is non-intuitive, but is	   required for proper operation in the case of a threaded	   application calling fork.  */	if (clone_flags & CLONE_SETTLS)		childti->pcb.unique = regs->r20;	else		regs->r20 = 0;	/* OSF/1 has some strange fork() semantics.  */	childti->pcb.usp = usp ?: rdusp();	*childregs = *regs;	childregs->r0 = 0;	childregs->r19 = 0;	childregs->r20 = 1;	/* OSF/1 has some strange fork() semantics.  */	stack = ((struct switch_stack *) regs) - 1;	*childstack = *stack;	childstack->r26 = (unsigned long) ret_from_fork;	return 0;}
int
copy_thread(unsigned long clone_flags, unsigned long usp,	    unsigned long arg,	    struct task_struct *p)
copy_thread
unsigned long clone_flags
unsigned long
clone_flags
clone_flags
unsigned long usp
unsigned long
usp
usp
unsigned long arg
unsigned long
arg
arg
struct task_struct *p
struct task_struct
task_struct
*p
*
p
{	extern void ret_from_fork(void);	extern void ret_from_kernel_thread(void);	struct thread_info *childti = task_thread_info(p);	struct pt_regs *childregs = task_pt_regs(p);	struct pt_regs *regs = current_pt_regs();	struct switch_stack *childstack, *stack;	childstack = ((struct switch_stack *) childregs) - 1;	childti->pcb.ksp = (unsigned long) childstack;	childti->pcb.flags = 1;	/* set FEN, clear everything else */	if (unlikely(p->flags & PF_KTHREAD)) {		/* kernel thread */		memset(childstack, 0,			sizeof(struct switch_stack) + sizeof(struct pt_regs));		childstack->r26 = (unsigned long) ret_from_kernel_thread;		childstack->r9 = usp;	/* function */		childstack->r10 = arg;		childregs->hae = alpha_mv.hae_cache,		childti->pcb.usp = 0;		return 0;	}	/* Note: if CLONE_SETTLS is not set, then we must inherit the	   value from the parent, which will have been set by the block	   copy in dup_task_struct.  This is non-intuitive, but is	   required for proper operation in the case of a threaded	   application calling fork.  */	if (clone_flags & CLONE_SETTLS)		childti->pcb.unique = regs->r20;	else		regs->r20 = 0;	/* OSF/1 has some strange fork() semantics.  */	childti->pcb.usp = usp ?: rdusp();	*childregs = *regs;	childregs->r0 = 0;	childregs->r19 = 0;	childregs->r20 = 1;	/* OSF/1 has some strange fork() semantics.  */	stack = ((struct switch_stack *) regs) - 1;	*childstack = *stack;	childstack->r26 = (unsigned long) ret_from_fork;	return 0;}
extern void ret_from_fork(void);
extern void ret_from_fork(void);
extern void
ret_from_fork(void)
ret_from_fork
void
void


extern void ret_from_kernel_thread(void);
extern void ret_from_kernel_thread(void);
extern void
ret_from_kernel_thread(void)
ret_from_kernel_thread
void
void


struct thread_info *childti = task_thread_info(p);
struct thread_info *childti = task_thread_info(p);
struct thread_info
thread_info
*childti = task_thread_info(p)
*
childti
= task_thread_info(p)
task_thread_info(p)
task_thread_info
task_thread_info
p
p
struct pt_regs *childregs = task_pt_regs(p);
struct pt_regs *childregs = task_pt_regs(p);
struct pt_regs
pt_regs
*childregs = task_pt_regs(p)
*
childregs
= task_pt_regs(p)
task_pt_regs(p)
task_pt_regs
task_pt_regs
p
p
struct pt_regs *regs = current_pt_regs();
struct pt_regs *regs = current_pt_regs();
struct pt_regs
pt_regs
*regs = current_pt_regs()
*
regs
= current_pt_regs()
current_pt_regs()
current_pt_regs
current_pt_regs
struct switch_stack *childstack, *stack;
struct switch_stack *childstack, *stack;
struct switch_stack
switch_stack
*childstack
*
childstack
*stack
*
stack
childstack = ((struct switch_stack *) childregs) - 1;
childstack = ((struct switch_stack *) childregs) - 1
childstack
childstack
((struct switch_stack *) childregs) - 1
((struct switch_stack *) childregs)
(struct switch_stack *) childregs
struct switch_stack *
struct switch_stack
switch_stack
*
*
childregs
childregs
1
childti->pcb.ksp = (unsigned long) childstack;
childti->pcb.ksp = (unsigned long) childstack
childti->pcb.ksp
childti->pcb
childti
childti
pcb
ksp
(unsigned long) childstack
unsigned long
unsigned long

childstack
childstack
childti->pcb.flags = 1;
childti->pcb.flags = 1
childti->pcb.flags
childti->pcb
childti
childti
pcb
flags
1
if (unlikely(p->flags & PF_KTHREAD)) {		/* kernel thread */		memset(childstack, 0,			sizeof(struct switch_stack) + sizeof(struct pt_regs));		childstack->r26 = (unsigned long) ret_from_kernel_thread;		childstack->r9 = usp;	/* function */		childstack->r10 = arg;		childregs->hae = alpha_mv.hae_cache,		childti->pcb.usp = 0;		return 0;	}
unlikely(p->flags & PF_KTHREAD)
unlikely
unlikely
p->flags & PF_KTHREAD
p->flags
p
p
flags
PF_KTHREAD
PF_KTHREAD
{		/* kernel thread */		memset(childstack, 0,			sizeof(struct switch_stack) + sizeof(struct pt_regs));		childstack->r26 = (unsigned long) ret_from_kernel_thread;		childstack->r9 = usp;	/* function */		childstack->r10 = arg;		childregs->hae = alpha_mv.hae_cache,		childti->pcb.usp = 0;		return 0;	}
memset(childstack, 0,			sizeof(struct switch_stack) + sizeof(struct pt_regs));
memset(childstack, 0,			sizeof(struct switch_stack) + sizeof(struct pt_regs))
memset
memset
childstack
childstack
0
sizeof(struct switch_stack) + sizeof(struct pt_regs)
sizeof(struct switch_stack)
struct switch_stack
struct switch_stack
switch_stack

sizeof(struct pt_regs)
struct pt_regs
struct pt_regs
pt_regs

childstack->r26 = (unsigned long) ret_from_kernel_thread;
childstack->r26 = (unsigned long) ret_from_kernel_thread
childstack->r26
childstack
childstack
r26
(unsigned long) ret_from_kernel_thread
unsigned long
unsigned long

ret_from_kernel_thread
ret_from_kernel_thread
childstack->r9 = usp;
childstack->r9 = usp
childstack->r9
childstack
childstack
r9
usp
usp
childstack->r10 = arg;
childstack->r10 = arg
childstack->r10
childstack
childstack
r10
arg
arg
childregs->hae = alpha_mv.hae_cache,		childti->pcb.usp = 0;
childregs->hae = alpha_mv.hae_cache,		childti->pcb.usp = 0
childregs->hae = alpha_mv.hae_cache
childregs->hae
childregs
childregs
hae
alpha_mv.hae_cache
alpha_mv
alpha_mv
hae_cache
childti->pcb.usp = 0
childti->pcb.usp
childti->pcb
childti
childti
pcb
usp
0
return 0;
0
if (clone_flags & CLONE_SETTLS)		childti->pcb.unique = regs->r20;	else		regs->r20 = 0;
clone_flags & CLONE_SETTLS
clone_flags
clone_flags
CLONE_SETTLS
CLONE_SETTLS
childti->pcb.unique = regs->r20;
childti->pcb.unique = regs->r20
childti->pcb.unique
childti->pcb
childti
childti
pcb
unique
regs->r20
regs
regs
r20
regs->r20 = 0;
regs->r20 = 0
regs->r20
regs
regs
r20
0
childti->pcb.usp = usp ?: rdusp();
childti->pcb.usp = usp ?: rdusp()
childti->pcb.usp
childti->pcb
childti
childti
pcb
usp
usp ?: rdusp()
usp
usp
rdusp()
rdusp
rdusp
*childregs = *regs;
*childregs = *regs
*childregs
childregs
childregs
*regs
regs
regs
childregs->r0 = 0;
childregs->r0 = 0
childregs->r0
childregs
childregs
r0
0
childregs->r19 = 0;
childregs->r19 = 0
childregs->r19
childregs
childregs
r19
0
childregs->r20 = 1;
childregs->r20 = 1
childregs->r20
childregs
childregs
r20
1
stack = ((struct switch_stack *) regs) - 1;
stack = ((struct switch_stack *) regs) - 1
stack
stack
((struct switch_stack *) regs) - 1
((struct switch_stack *) regs)
(struct switch_stack *) regs
struct switch_stack *
struct switch_stack
switch_stack
*
*
regs
regs
1
*childstack = *stack;
*childstack = *stack
*childstack
childstack
childstack
*stack
stack
stack
childstack->r26 = (unsigned long) ret_from_fork;
childstack->r26 = (unsigned long) ret_from_fork
childstack->r26
childstack
childstack
r26
(unsigned long) ret_from_fork
unsigned long
unsigned long

ret_from_fork
ret_from_fork
return 0;
0
-----joern-----
(30,69,0)
(114,46,0)
(156,139,0)
(5,52,0)
(75,38,0)
(91,153,0)
(112,18,0)
(121,20,0)
(56,84,0)
(42,70,0)
(57,94,0)
(117,38,0)
(106,38,0)
(2,147,0)
(139,84,0)
(35,104,0)
(145,62,0)
(75,27,0)
(27,75,0)
(24,111,0)
(49,130,0)
(59,111,0)
(147,38,0)
(58,17,0)
(87,147,0)
(123,69,0)
(8,38,0)
(111,82,0)
(110,38,0)
(82,28,0)
(58,104,0)
(70,38,0)
(69,23,0)
(77,59,0)
(125,23,0)
(37,66,0)
(19,77,0)
(46,148,0)
(76,58,0)
(58,2,0)
(10,58,0)
(128,139,0)
(20,121,0)
(5,14,0)
(61,36,0)
(86,77,0)
(81,125,0)
(41,143,0)
(118,147,0)
(43,98,0)
(51,93,0)
(46,114,0)
(140,46,0)
(17,23,0)
(27,93,0)
(69,123,0)
(135,23,0)
(90,126,0)
(142,27,0)
(74,71,0)
(148,28,0)
(108,111,0)
(86,84,0)
(125,68,0)
(62,145,0)
(104,23,0)
(146,111,0)
(131,38,0)
(120,2,0)
(26,38,0)
(136,41,0)
(29,143,0)
(52,5,0)
(29,16,0)
(12,84,0)
(63,89,0)
(98,119,0)
(151,23,0)
(145,48,0)
(18,62,0)
(152,128,0)
(73,15,0)
(128,147,0)
(145,147,0)
(139,132,0)
(58,38,0)
(59,77,0)
(33,125,0)
(101,42,0)
(58,15,0)
(127,1,0)
(94,147,0)
(107,94,0)
(4,136,0)
(54,121,0)
(141,90,0)
(124,121,0)
(61,115,0)
(150,38,0)
(100,12,0)
(93,32,0)
(89,63,0)
(148,46,0)
(66,52,0)
(15,24,0)
(95,24,0)
(16,38,0)
(20,38,0)
(1,56,0)
(83,1,0)
(111,38,0)
(23,135,0)
(143,38,0)
(66,84,0)
(58,118,0)
(99,146,0)
(50,153,0)
(129,59,0)
(134,119,0)
(79,38,0)
(105,128,0)
(122,151,0)
(36,38,0)
(90,84,0)
(86,94,0)
(2,20,0)
(113,98,0)
(13,104,0)
(88,148,0)
(18,146,0)
(155,115,0)
(135,28,0)
(7,115,0)
(16,29,0)
(80,68,0)
(147,123,0)
(77,100,0)
(45,153,0)
(67,38,0)
(0,24,0)
(52,130,0)
(9,89,0)
(121,124,0)
(15,50,0)
(86,151,0)
(69,65,0)
(78,71,0)
(32,93,0)
(137,86,0)
(25,66,0)
(1,147,0)
(92,106,0)
(62,38,0)
(41,136,0)
(86,61,0)
(3,71,0)
(153,93,0)
(56,89,0)
(154,135,0)
(31,41,0)
(17,75,0)
(149,146,0)
(24,15,0)
(11,145,0)
(39,38,0)
(115,61,0)
(86,18,0)
(23,38,0)
(55,136,0)
(60,17,0)
(72,143,0)
(97,59,0)
(133,144,0)
(103,70,0)
(138,151,0)
(47,29,0)
(85,42,0)
(143,41,0)
(96,148,0)
(14,5,0)
(6,2,0)
(89,56,0)
(58,61,0)
(104,106,0)
(58,42,0)
(82,111,0)
(53,82,0)
(144,102,0)
(86,128,0)
(151,74,0)
(68,38,0)
(93,38,0)
(116,36,0)
(65,69,0)
(71,74,0)
(115,111,0)
(123,147,0)
(146,18,0)
(130,52,0)
(40,123,0)
(10,86,0)
(58,98,0)
(48,145,0)
(58,18,0)
(34,144,0)
(109,23,0)
(58,125,0)
(86,1,0)
(44,38,0)
(66,147,0)
(94,90,0)
(136,55,0)
(21,118,0)
(98,93,0)
(42,23,0)
(74,12,0)
(136,93,0)
(64,61,0)
(130,49,0)
(118,16,0)
(22,100,0)
(153,50,0)
(52,66,0)
(58,42,1)
(61,64,1)
(59,129,1)
(94,107,1)
(76,20,1)
(101,75,1)
(74,71,1)
(60,67,1)
(145,147,1)
(134,98,1)
(82,53,1)
(58,17,1)
(58,18,1)
(58,15,1)
(17,23,1)
(58,118,1)
(56,89,1)
(72,106,1)
(143,41,1)
(75,27,1)
(58,76,1)
(151,122,1)
(146,99,1)
(98,113,1)
(67,119,1)
(93,32,1)
(90,141,1)
(47,118,1)
(43,144,1)
(86,94,1)
(89,9,1)
(122,138,1)
(154,109,1)
(62,145,1)
(71,3,1)
(92,104,1)
(153,93,1)
(86,77,1)
(114,46,1)
(148,28,1)
(106,92,1)
(7,155,1)
(87,93,1)
(58,61,1)
(41,136,1)
(32,51,1)
(31,136,1)
(127,66,1)
(17,60,1)
(18,146,1)
(77,19,1)
(58,104,1)
(57,56,1)
(140,148,1)
(128,147,1)
(96,88,1)
(61,115,1)
(145,48,1)
(30,87,1)
(70,103,1)
(146,111,1)
(18,112,1)
(145,11,1)
(64,115,1)
(95,0,1)
(58,2,1)
(155,62,1)
(91,45,1)
(86,18,1)
(88,36,1)
(42,23,1)
(41,31,1)
(151,23,1)
(125,33,1)
(27,142,1)
(24,95,1)
(58,125,1)
(120,6,1)
(69,23,1)
(123,40,1)
(27,93,1)
(21,143,1)
(10,58,1)
(125,23,1)
(129,97,1)
(113,43,1)
(37,25,1)
(94,147,1)
(111,82,1)
(52,130,1)
(136,4,1)
(15,73,1)
(9,1,1)
(156,128,1)
(123,69,1)
(138,139,1)
(121,124,1)
(144,34,1)
(116,61,1)
(144,102,1)
(141,94,1)
(135,28,1)
(54,2,1)
(13,35,1)
(97,74,1)
(149,147,1)
(115,111,1)
(90,126,1)
(23,135,1)
(34,133,1)
(136,93,1)
(86,151,1)
(104,23,1)
(85,101,1)
(53,108,1)
(89,63,1)
(29,143,1)
(130,37,1)
(86,61,1)
(2,147,1)
(86,128,1)
(5,130,1)
(142,17,1)
(58,98,1)
(86,137,1)
(22,77,1)
(24,111,1)
(104,13,1)
(15,24,1)
(51,23,1)
(109,111,1)
(86,1,1)
(98,93,1)
(121,54,1)
(42,85,1)
(36,116,1)
(69,30,1)
(147,123,1)
(66,147,1)
(105,152,1)
(52,5,1)
(119,134,1)
(80,125,1)
(153,91,1)
(10,86,1)
(77,59,1)
(148,96,1)
(112,146,1)
(5,14,1)
(46,148,1)
(73,24,1)
(19,59,1)
(35,68,1)
(128,105,1)
(16,29,1)
(40,69,1)
(25,114,1)
(46,140,1)
(1,147,1)
(66,52,1)
(2,120,1)
(115,7,1)
(99,149,1)
(136,55,1)
(133,114,1)
(137,100,1)
(118,147,1)
(107,57,1)
(82,28,1)
(3,78,1)
(152,90,1)
(1,83,1)
(139,156,1)
(69,65,1)
(20,121,1)
(33,81,1)
(29,47,1)
(68,80,1)
(139,132,1)
(103,42,1)
(4,72,1)
(59,111,1)
(118,21,1)
(83,127,1)
(45,15,1)
(0,144,1)
(11,18,1)
(78,151,1)
(130,49,1)
(50,153,1)
(6,16,1)
(81,70,1)
(135,154,1)
(67,50,1)
(100,22,1)
(22,114,2)
(21,114,2)
(81,114,2)
(15,144,2)
(145,48,2)
(17,114,2)
(42,23,2)
(153,144,2)
(107,114,2)
(86,94,2)
(58,98,2)
(41,136,2)
(136,93,2)
(1,114,2)
(74,71,2)
(80,114,2)
(0,144,2)
(13,114,2)
(93,32,2)
(10,58,2)
(95,144,2)
(27,93,2)
(15,24,2)
(59,114,2)
(123,69,2)
(156,114,2)
(71,114,2)
(9,114,2)
(25,114,2)
(58,17,2)
(58,18,2)
(113,144,2)
(18,146,2)
(58,15,2)
(50,144,2)
(94,147,2)
(127,114,2)
(89,114,2)
(58,118,2)
(59,111,2)
(56,89,2)
(4,114,2)
(135,28,2)
(58,2,2)
(100,114,2)
(37,114,2)
(98,144,2)
(144,102,2)
(78,114,2)
(31,114,2)
(94,114,2)
(35,114,2)
(75,114,2)
(145,147,2)
(75,27,2)
(151,114,2)
(86,77,2)
(70,114,2)
(47,114,2)
(45,144,2)
(72,114,2)
(85,114,2)
(3,114,2)
(62,145,2)
(76,114,2)
(97,114,2)
(69,65,2)
(118,114,2)
(86,128,2)
(111,82,2)
(129,114,2)
(136,55,2)
(69,23,2)
(58,104,2)
(24,144,2)
(46,148,2)
(29,143,2)
(56,114,2)
(139,132,2)
(105,114,2)
(5,14,2)
(57,114,2)
(17,23,2)
(143,114,2)
(66,147,2)
(89,63,2)
(6,114,2)
(90,114,2)
(82,28,2)
(146,111,2)
(152,114,2)
(52,5,2)
(74,114,2)
(52,130,2)
(151,23,2)
(20,121,2)
(130,49,2)
(54,114,2)
(2,114,2)
(52,114,2)
(128,114,2)
(19,114,2)
(128,147,2)
(141,114,2)
(5,114,2)
(137,114,2)
(50,153,2)
(24,111,2)
(41,114,2)
(86,1,2)
(101,114,2)
(125,114,2)
(10,86,2)
(103,114,2)
(27,114,2)
(98,93,2)
(73,144,2)
(90,126,2)
(153,93,2)
(144,114,2)
(121,114,2)
(42,114,2)
(86,114,2)
(118,147,2)
(60,114,2)
(148,28,2)
(133,114,2)
(104,23,2)
(61,115,2)
(58,61,2)
(86,151,2)
(122,114,2)
(136,114,2)
(86,18,2)
(16,29,2)
(142,114,2)
(58,42,2)
(1,147,2)
(33,114,2)
(121,124,2)
(86,61,2)
(58,125,2)
(2,147,2)
(106,114,2)
(125,23,2)
(92,114,2)
(138,114,2)
(29,114,2)
(114,46,2)
(77,59,2)
(104,114,2)
(119,144,2)
(139,114,2)
(120,114,2)
(68,114,2)
(143,41,2)
(91,144,2)
(115,111,2)
(66,52,2)
(130,114,2)
(43,144,2)
(134,144,2)
(20,114,2)
(83,114,2)
(147,123,2)
(77,114,2)
(34,114,2)
(16,114,2)
(23,135,2)
(67,114,2)
(58,114,2)
(66,114,2)
-----------------------------------
(0,childti)
(1,childstack->r26)
(2,childstack->r26)
(3,hae_cache)
(4,regs)
(5,sizeof(struct pt_regs)
(6,childstack)
(7,pcb)
(8,ret_from_fork)
(9,ret_from_kernel_thread)
(10,RET)
(11,childstack)
(12,)
(13,r20)
(14,struct pt_regs)
(15,childti->pcb.unique)
(16,*childstack = *stack)
(17,*childregs)
(18,childti->pcb.ksp)
(19,usp)
(20,childstack->r26 = (unsigned long)
(21,childstack)
(22,0)
(23,*childregs = task_pt_regs(p)
(24,childti->pcb)
(25,childstack)
(26,childstack)
(27,*regs)
(28,struct task_struct *p)
(29,*stack)
(30,childregs)
(31,1)
(32,current_pt_regs()
(33,r19)
(34,CLONE_SETTLS)
(35,childregs)
(36,childti->pcb.flags = 1)
(37,0)
(38,)
(39,childti)
(40,1)
(41,((struct switch_stack *)
(42,childregs->r0)
(43,regs)
(44,stack)
(45,regs)
(46,p->flags & PF_KTHREAD)
(47,stack)
(48,unsigned long)
(49,struct switch_stack)
(50,childti->pcb.unique = regs->r20)
(51,regs)
(52,sizeof(struct switch_stack)
(53,p)
(54,ret_from_fork)
(55,struct switch_stack *)
(56,childstack->r26 = (unsigned long)
(57,childstack)
(58,return 0;)
(59,childti->pcb)
(60,childregs)
(61,childti->pcb.flags)
(62,childti->pcb.ksp = (unsigned long)
(63,unsigned long)
(64,flags)
(65,struct switch_stack *)
(66,memset(childstack, 0,\n\\n\\t\\t\\tsizeof(struct switch_stack)
(67,rdusp()
(68,childregs->r19 = 0)
(69,(struct switch_stack *)
(70,childregs->r0 = 0)
(71,alpha_mv.hae_cache)
(72,stack)
(73,unique)
(74,childregs->hae = alpha_mv.hae_cache)
(75,*childregs = *regs)
(76,0)
(77,childti->pcb.usp)
(78,alpha_mv)
(79,ret_from_kernel_thread)
(80,0)
(81,childregs)
(82,task_thread_info(p)
(83,r26)
(84,)
(85,r0)
(86,return 0;)
(87,childstack)
(88,p)
(89,(unsigned long)
(90,childstack->r9 = usp)
(91,r20)
(92,1)
(93,*regs = current_pt_regs()
(94,childstack->r9)
(95,pcb)
(96,flags)
(97,childti)
(98,regs->r20)
(99,pcb)
(100,childti->pcb.usp = 0)
(101,childregs)
(102,unsigned long clone_flags)
(103,0)
(104,childregs->r20)
(105,r10)
(106,childregs->r20 = 1)
(107,r9)
(108,childti)
(109,childregs)
(110,if (unlikely(p->flags & PF_KTHREAD)
(111,*childti = task_thread_info(p)
(112,ksp)
(113,r20)
(114,unlikely(p->flags & PF_KTHREAD)
(115,childti->pcb)
(116,1)
(117,childregs)
(118,*childstack)
(119,regs->r20 = 0)
(120,r26)
(121,(unsigned long)
(122,hae)
(123,((struct switch_stack *)
(124,unsigned long)
(125,childregs->r19)
(126,unsigned long usp)
(127,childstack)
(128,childstack->r10)
(129,pcb)
(130,sizeof(struct switch_stack)
(131,regs)
(132,unsigned long arg)
(133,clone_flags)
(134,0)
(135,task_pt_regs(p)
(136,(struct switch_stack *)
(137,0)
(138,childregs)
(139,childstack->r10 = arg)
(140,PF_KTHREAD)
(141,usp)
(142,regs)
(143,stack = ((struct switch_stack *)
(144,clone_flags & CLONE_SETTLS)
(145,(unsigned long)
(146,childti->pcb)
(147,childstack = ((struct switch_stack *)
(148,p->flags)
(149,childti)
(150,if (clone_flags & CLONE_SETTLS)
(151,childregs->hae)
(152,childstack)
(153,regs->r20)
(154,p)
(155,childti)
(156,arg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^