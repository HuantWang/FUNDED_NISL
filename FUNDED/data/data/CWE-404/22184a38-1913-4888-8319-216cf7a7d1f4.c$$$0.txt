-----label-----
0
-----code-----
static const struct unwind_idx *unwind_find_idx(unsigned long addr)
{
	const struct unwind_idx *idx = NULL;
	unsigned long flags;

	pr_debug("%s(%08lx)\n", __func__, addr);

	if (core_kernel_text(addr)) {
		if (unlikely(!__origin_unwind_idx))
			__origin_unwind_idx =
				unwind_find_origin(__start_unwind_idx,
						__stop_unwind_idx);

		/* main unwind table */
		idx = search_index(addr, __start_unwind_idx,
				   __origin_unwind_idx,
				   __stop_unwind_idx);
	} else {
		/* module unwind tables */
		struct unwind_table *table;

		spin_lock_irqsave(&unwind_lock, flags);
		list_for_each_entry(table, &unwind_tables, list) {
			if (addr >= table->begin_addr &&
			    addr < table->end_addr) {
				idx = search_index(addr, table->start,
						   table->origin,
						   table->stop);
				/* Move-to-front to exploit common traces */
				list_move(&table->list, &unwind_tables);
				break;
			}
		}
		spin_unlock_irqrestore(&unwind_lock, flags);
	}

	pr_debug("%s: idx = %p\n", __func__, idx);
	return idx;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
28,31
28,32
29,30
32,33
34,35
36,37
36,38
36,39
37,38
37,39
38,39
40,41
42,43
42,44
43,44
43,45
44,45
44,46
45,46
47,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
55,56
57,58
59,60
61,62
62,63
62,64
63,64
65,66
65,67
65,68
65,69
65,70
66,67
68,69
70,71
72,73
74,75
76,77
76,78
76,79
76,80
76,81
76,82
77,78
78,79
78,80
79,80
81,82
81,83
84,85
85,86
85,87
85,88
86,87
88,89
89,90
91,92
93,94
94,95
94,96
94,97
94,98
95,96
97,98
99,100
100,101
102,103
104,105
105,106
106,107
106,108
107,108
107,109
108,109
108,110
109,110
111,112
111,113
112,113
115,116
115,117
116,117
118,119
118,120
119,120
122,123
122,124
122,125
123,124
124,125
124,126
125,126
127,128
127,129
127,130
127,131
127,132
128,129
130,131
132,133
132,134
133,134
136,137
136,138
137,138
140,141
140,142
141,142
144,145
145,146
145,147
145,148
146,147
148,149
149,150
149,151
150,151
153,154
154,155
157,158
158,159
158,160
158,161
159,160
161,162
162,163
164,165
166,167
167,168
167,169
167,170
167,171
168,169
171,172
173,174
175,176
176,177
-----nextToken-----
3,5,6,8,10,15,17,18,21,24,26,30,31,33,35,39,41,46,49,53,56,58,60,64,67,69,71,73,75,80,82,83,87,90,92,96,98,101,103,110,113,114,117,120,121,126,129,131,134,135,138,139,142,143,147,151,152,155,156,160,163,165,169,170,172,174,177
-----computeFrom-----
51,52
51,53
62,63
62,64
107,108
107,109
108,109
108,110
115,116
115,117
124,125
124,126
-----guardedBy-----
117,131
120,151
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static const struct unwind_idx *unwind_find_idx(unsigned long addr){	const struct unwind_idx *idx = NULL;	unsigned long flags;	pr_debug("%s(%08lx)\n", __func__, addr);	if (core_kernel_text(addr)) {		if (unlikely(!__origin_unwind_idx))			__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx);		/* main unwind table */		idx = search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx);	} else {		/* module unwind tables */		struct unwind_table *table;		spin_lock_irqsave(&unwind_lock, flags);		list_for_each_entry(table, &unwind_tables, list) {			if (addr >= table->begin_addr &&			    addr < table->end_addr) {				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}		}		spin_unlock_irqrestore(&unwind_lock, flags);	}	pr_debug("%s: idx = %p\n", __func__, idx);	return idx;}
static const struct unwind_idx
unwind_idx
*unwind_find_idx(unsigned long addr)
*
unwind_find_idx
unsigned long addr
unsigned long
addr
addr
{	const struct unwind_idx *idx = NULL;	unsigned long flags;	pr_debug("%s(%08lx)\n", __func__, addr);	if (core_kernel_text(addr)) {		if (unlikely(!__origin_unwind_idx))			__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx);		/* main unwind table */		idx = search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx);	} else {		/* module unwind tables */		struct unwind_table *table;		spin_lock_irqsave(&unwind_lock, flags);		list_for_each_entry(table, &unwind_tables, list) {			if (addr >= table->begin_addr &&			    addr < table->end_addr) {				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}		}		spin_unlock_irqrestore(&unwind_lock, flags);	}	pr_debug("%s: idx = %p\n", __func__, idx);	return idx;}
const struct unwind_idx *idx = NULL;
const struct unwind_idx *idx = NULL;
const struct unwind_idx
unwind_idx
*idx = NULL
*
idx
= NULL
NULL
NULL
unsigned long flags;
unsigned long flags;
unsigned long
flags
flags
pr_debug("%s(%08lx)\n", __func__, addr);
pr_debug("%s(%08lx)\n", __func__, addr)
pr_debug
pr_debug
"%s(%08lx)\n"
__func__
__func__
addr
addr
if (core_kernel_text(addr)) {		if (unlikely(!__origin_unwind_idx))			__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx);		/* main unwind table */		idx = search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx);	} else {		/* module unwind tables */		struct unwind_table *table;		spin_lock_irqsave(&unwind_lock, flags);		list_for_each_entry(table, &unwind_tables, list) {			if (addr >= table->begin_addr &&			    addr < table->end_addr) {				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}		}		spin_unlock_irqrestore(&unwind_lock, flags);	}
core_kernel_text(addr)
core_kernel_text
core_kernel_text
addr
addr
{		if (unlikely(!__origin_unwind_idx))			__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx);		/* main unwind table */		idx = search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx);	}
if (unlikely(!__origin_unwind_idx))			__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx);
unlikely(!__origin_unwind_idx)
unlikely
unlikely
!__origin_unwind_idx
__origin_unwind_idx
__origin_unwind_idx
__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx);
__origin_unwind_idx =				unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx)
__origin_unwind_idx
__origin_unwind_idx
unwind_find_origin(__start_unwind_idx,						__stop_unwind_idx)
unwind_find_origin
unwind_find_origin
__start_unwind_idx
__start_unwind_idx
__stop_unwind_idx
__stop_unwind_idx
idx = search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx);
idx = search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx)
idx
idx
search_index(addr, __start_unwind_idx,				   __origin_unwind_idx,				   __stop_unwind_idx)
search_index
search_index
addr
addr
__start_unwind_idx
__start_unwind_idx
__origin_unwind_idx
__origin_unwind_idx
__stop_unwind_idx
__stop_unwind_idx
{		/* module unwind tables */		struct unwind_table *table;		spin_lock_irqsave(&unwind_lock, flags);		list_for_each_entry(table, &unwind_tables, list) {			if (addr >= table->begin_addr &&			    addr < table->end_addr) {				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}		}		spin_unlock_irqrestore(&unwind_lock, flags);	}
struct unwind_table *table;
struct unwind_table *table;
struct unwind_table
unwind_table
*table
*
table
spin_lock_irqsave(&unwind_lock, flags);
spin_lock_irqsave(&unwind_lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&unwind_lock
unwind_lock
unwind_lock
flags
flags
list_for_each_entry(table, &unwind_tables, list)
list_for_each_entry(table, &unwind_tables, list)
list_for_each_entry
list_for_each_entry
table
table
&unwind_tables
unwind_tables
unwind_tables
list
list
)
{			if (addr >= table->begin_addr &&			    addr < table->end_addr) {				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}		}
if (addr >= table->begin_addr &&			    addr < table->end_addr) {				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}
addr >= table->begin_addr &&			    addr < table->end_addr
addr >= table->begin_addr
addr
addr
table->begin_addr
table
table
begin_addr
addr < table->end_addr
addr
addr
table->end_addr
table
table
end_addr
{				idx = search_index(addr, table->start,						   table->origin,						   table->stop);				/* Move-to-front to exploit common traces */				list_move(&table->list, &unwind_tables);				break;			}
idx = search_index(addr, table->start,						   table->origin,						   table->stop);
idx = search_index(addr, table->start,						   table->origin,						   table->stop)
idx
idx
search_index(addr, table->start,						   table->origin,						   table->stop)
search_index
search_index
addr
addr
table->start
table
table
start
table->origin
table
table
origin
table->stop
table
table
stop
list_move(&table->list, &unwind_tables);
list_move(&table->list, &unwind_tables)
list_move
list_move
&table->list
table->list
table
table
list
&unwind_tables
unwind_tables
unwind_tables
break;
spin_unlock_irqrestore(&unwind_lock, flags);
spin_unlock_irqrestore(&unwind_lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&unwind_lock
unwind_lock
unwind_lock
flags
flags
pr_debug("%s: idx = %p\n", __func__, idx);
pr_debug("%s: idx = %p\n", __func__, idx)
pr_debug
pr_debug
"%s: idx = %p\n"
__func__
__func__
idx
idx
return idx;
idx
idx
-----joern-----
(62,16,0)
(67,75,0)
(60,31,0)
(34,73,0)
(27,81,0)
(11,56,0)
(65,70,0)
(82,45,0)
(80,67,0)
(5,34,0)
(41,39,0)
(79,37,0)
(14,50,0)
(40,41,0)
(32,26,0)
(37,43,0)
(77,79,0)
(68,41,0)
(81,50,0)
(67,63,0)
(76,70,0)
(17,51,0)
(22,68,0)
(41,0,0)
(81,46,0)
(52,14,0)
(46,51,0)
(8,33,0)
(71,77,0)
(67,45,0)
(42,63,0)
(22,39,0)
(28,51,0)
(9,37,0)
(7,33,0)
(81,75,0)
(66,73,0)
(26,50,0)
(75,43,0)
(44,47,0)
(30,81,0)
(49,73,0)
(14,46,0)
(23,51,0)
(56,31,0)
(67,80,0)
(59,16,0)
(24,0,0)
(19,50,0)
(36,62,0)
(31,56,0)
(4,63,0)
(61,50,0)
(3,49,0)
(48,0,0)
(55,81,0)
(41,68,0)
(79,77,0)
(29,43,0)
(14,33,0)
(22,70,0)
(69,51,0)
(12,57,0)
(68,22,0)
(47,34,0)
(75,67,0)
(0,41,0)
(10,67,0)
(20,45,0)
(70,22,0)
(21,26,0)
(1,9,0)
(25,22,0)
(81,33,0)
(78,72,0)
(33,50,0)
(37,9,0)
(37,79,0)
(45,67,0)
(57,64,0)
(6,77,0)
(51,39,0)
(38,46,0)
(64,57,0)
(74,80,0)
(53,26,0)
(46,72,0)
(67,39,0)
(58,62,0)
(34,47,0)
(35,18,0)
(15,14,0)
(13,80,0)
(54,75,0)
(26,39,0)
(2,50,0)
(16,62,0)
(51,46,0)
(18,39,0)
(63,67,0)
(14,75,0)
(56,73,0)
(52,14,1)
(5,47,1)
(37,79,1)
(26,21,1)
(80,74,1)
(69,28,1)
(67,45,1)
(17,69,1)
(75,67,1)
(65,25,1)
(67,39,1)
(34,47,1)
(60,68,1)
(67,63,1)
(14,15,1)
(54,68,1)
(76,65,1)
(31,60,1)
(16,62,1)
(9,1,1)
(56,31,1)
(18,35,1)
(10,54,1)
(34,5,1)
(15,81,1)
(27,30,1)
(82,63,1)
(22,70,1)
(26,39,1)
(18,39,1)
(58,59,1)
(57,12,1)
(44,18,1)
(53,33,1)
(59,64,1)
(21,32,1)
(81,75,1)
(11,31,1)
(81,33,1)
(1,79,1)
(14,75,1)
(29,37,1)
(4,42,1)
(41,0,1)
(12,18,1)
(68,22,1)
(41,39,1)
(63,4,1)
(45,20,1)
(51,23,1)
(7,8,1)
(70,76,1)
(74,13,1)
(40,22,1)
(23,17,1)
(28,38,1)
(25,34,1)
(35,26,1)
(81,55,1)
(32,53,1)
(14,46,1)
(13,45,1)
(77,71,1)
(81,46,1)
(30,56,1)
(46,51,1)
(62,36,1)
(24,40,1)
(37,9,1)
(68,41,1)
(36,58,1)
(30,46,1)
(79,77,1)
(55,27,1)
(6,75,1)
(64,57,1)
(60,29,1)
(33,7,1)
(42,10,1)
(48,24,1)
(38,16,1)
(51,39,1)
(22,39,1)
(71,6,1)
(67,80,1)
(14,33,1)
(56,11,1)
(47,44,1)
(20,82,1)
(0,48,1)
(38,64,1)
(48,22,2)
(67,80,2)
(16,62,2)
(4,68,2)
(0,22,2)
(9,68,2)
(16,64,2)
(76,18,2)
(75,67,2)
(71,68,2)
(41,22,2)
(67,45,2)
(23,18,2)
(46,18,2)
(17,18,2)
(68,41,2)
(82,68,2)
(77,68,2)
(22,18,2)
(44,18,2)
(59,64,2)
(18,39,2)
(36,64,2)
(10,68,2)
(70,18,2)
(38,18,2)
(68,22,2)
(34,18,2)
(67,68,2)
(64,57,2)
(22,39,2)
(81,46,2)
(54,68,2)
(65,18,2)
(60,18,2)
(69,18,2)
(42,68,2)
(24,22,2)
(79,77,2)
(14,46,2)
(14,75,2)
(67,39,2)
(56,31,2)
(34,47,2)
(6,68,2)
(41,39,2)
(37,79,2)
(20,68,2)
(46,51,2)
(57,18,2)
(13,68,2)
(52,14,2)
(51,39,2)
(81,33,2)
(64,18,2)
(62,64,2)
(31,18,2)
(1,68,2)
(12,18,2)
(79,68,2)
(58,64,2)
(41,0,2)
(22,70,2)
(37,68,2)
(67,63,2)
(26,39,2)
(11,18,2)
(51,18,2)
(63,68,2)
(68,18,2)
(25,18,2)
(56,18,2)
(29,68,2)
(75,68,2)
(74,68,2)
(47,18,2)
(28,18,2)
(45,68,2)
(5,18,2)
(81,75,2)
(14,33,2)
(40,22,2)
(37,9,2)
(80,68,2)
-----------------------------------
(0,table->end_addr)
(1,unwind_tables)
(2,idx)
(3,if (addr >= table->begin_addr &&\n\\n\\t\\t\\t    addr < table->end_addr)
(4,start)
(5,flags)
(6,table)
(7,NULL)
(8,idx)
(9,&unwind_tables)
(10,addr)
(11,flags)
(12,__origin_unwind_idx)
(13,table)
(14,return idx;)
(15,idx)
(16,__origin_unwind_idx =\n\\n\\t\\t\\t\\tunwind_find_origin(__start_unwind_idx,\n\\n\\t\\t\\t\\t\\t\\t__stop_unwind_idx)
(17,__origin_unwind_idx)
(18,core_kernel_text(addr)
(19,if (core_kernel_text(addr)
(20,origin)
(21,addr)
(22,addr >= table->begin_addr)
(23,__stop_unwind_idx)
(24,table)
(25,addr)
(26,pr_debug("%s(%08lx)
(27,__func__)
(28,addr)
(29,break;)
(30,"%s: idx = %p\\n")
(31,&unwind_lock)
(32,__func__)
(33,*idx = NULL)
(34,spin_lock_irqsave(&unwind_lock, flags)
(35,addr)
(36,__stop_unwind_idx)
(37,list_move(&table->list, &unwind_tables)
(38,idx)
(39,unsigned long addr)
(40,addr)
(41,addr < table->end_addr)
(42,table)
(43,)
(44,unwind_lock)
(45,table->origin)
(46,idx = search_index(addr, __start_unwind_idx,\n\\n\\t\\t\\t\\t   __origin_unwind_idx,\n\\n\\t\\t\\t\\t   __stop_unwind_idx)
(47,&unwind_lock)
(48,end_addr)
(49,)
(50,)
(51,search_index(addr, __start_unwind_idx,\n\\n\\t\\t\\t\\t   __origin_unwind_idx,\n\\n\\t\\t\\t\\t   __stop_unwind_idx)
(52,RET)
(53,"%s(%08lx)
(54,idx)
(55,idx)
(56,spin_unlock_irqrestore(&unwind_lock, flags)
(57,!__origin_unwind_idx)
(58,__start_unwind_idx)
(59,__origin_unwind_idx)
(60,unwind_lock)
(61,flags)
(62,unwind_find_origin(__start_unwind_idx,\n\\n\\t\\t\\t\\t\\t\\t__stop_unwind_idx)
(63,table->start)
(64,unlikely(!__origin_unwind_idx)
(65,table)
(66,table)
(67,search_index(addr, table->start,\n\\n\\t\\t\\t\\t\\t\\t   table->origin,\n\\n\\t\\t\\t\\t\\t\\t   table->stop)
(68,addr >= table->begin_addr &&\n\\n\\t\\t\\t    addr < table->end_addr)
(69,__start_unwind_idx)
(70,table->begin_addr)
(71,list)
(72,)
(73,)
(74,stop)
(75,idx = search_index(addr, table->start,\n\\n\\t\\t\\t\\t\\t\\t   table->origin,\n\\n\\t\\t\\t\\t\\t\\t   table->stop)
(76,begin_addr)
(77,table->list)
(78,if (unlikely(!__origin_unwind_idx)
(79,&table->list)
(80,table->stop)
(81,pr_debug("%s: idx = %p\\n", __func__, idx)
(82,table)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^