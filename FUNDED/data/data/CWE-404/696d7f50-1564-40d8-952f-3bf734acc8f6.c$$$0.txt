-----label-----
1
-----code-----
int kvmppc_rm_h_eoi(struct kvm_vcpu *vcpu, unsigned long xirr)
{
	struct kvmppc_xics *xics = vcpu->kvm->arch.xics;
	struct kvmppc_icp *icp = vcpu->arch.icp;
	struct kvmppc_ics *ics;
	struct ics_irq_state *state;
	u32 irq = xirr & 0x00ffffff;
	u16 src;

	if (!xics || !xics->real_mode)
		return H_TOO_HARD;

	/*
	 * ICP State: EOI
	 *
	 * Note: If EOI is incorrectly used by SW to lower the CPPR
	 * value (ie more favored), we do not check for rejection of
	 * a pending interrupt, this is a SW error and PAPR sepcifies
	 * that we don't have to deal with it.
	 *
	 * The sending of an EOI to the ICS is handled after the
	 * CPPR update
	 *
	 * ICP State: Down_CPPR which we handle
	 * in a separate function as it's shared with H_CPPR.
	 */
	icp_rm_down_cppr(xics, icp, xirr >> 24);

	/* IPIs have no EOI */
	if (irq == XICS_IPI)
		goto bail;
	/*
	 * EOI handling: If the interrupt is still asserted, we need to
	 * resend it. We can take a lockless "peek" at the ICS state here.
	 *
	 * "Message" interrupts will never have "asserted" set
	 */
	ics = kvmppc_xics_find_ics(xics, irq, &src);
	if (!ics)
		goto bail;
	state = &ics->irq_state[src];

	/* Still asserted, resend it */
	if (state->asserted)
		icp_rm_deliver_irq(xics, icp, irq);

	if (!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)) {
		icp->rm_action |= XICS_RM_NOTIFY_EOI;
		icp->rm_eoied_irq = irq;
	}

	if (state->host_irq) {
		++vcpu->stat.pthru_all;
		if (state->intr_cpu != -1) {
			int pcpu = raw_smp_processor_id();

			pcpu = cpu_first_thread_sibling(pcpu);
			++vcpu->stat.pthru_host;
			if (state->intr_cpu != pcpu) {
				++vcpu->stat.pthru_bad_aff;
				xics_opal_rm_set_server(state->host_irq, pcpu);
			}
			state->intr_cpu = -1;
		}
	}
 bail:
	return check_too_hard(xics, icp);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
25,27
26,27
26,28
27,28
32,33
33,34
33,35
34,35
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
42,43
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
60,61
61,62
61,63
62,63
64,65
64,66
66,67
67,68
67,69
68,69
71,72
72,73
72,74
73,74
75,76
77,78
77,79
78,79
78,80
79,80
80,81
82,83
83,84
83,85
84,85
87,88
88,89
90,91
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
98,100
99,100
102,103
102,104
103,104
103,105
104,105
106,107
108,109
110,111
111,112
111,113
112,113
114,115
114,116
114,117
114,118
115,116
117,118
119,120
121,122
122,123
124,125
124,126
125,126
126,127
128,129
130,131
131,132
131,133
132,133
134,135
135,136
135,137
136,137
136,138
137,138
140,141
142,143
142,144
143,144
143,145
144,145
147,148
148,149
148,150
148,151
148,152
149,150
151,152
153,154
155,156
157,158
157,159
158,159
159,160
159,161
160,161
162,163
163,164
163,165
164,165
164,166
165,166
169,170
169,171
170,171
171,172
171,173
172,173
172,174
173,174
176,177
178,179
179,180
179,181
180,181
180,182
181,182
184,185
186,187
186,188
187,188
187,189
188,189
191,192
191,193
192,193
193,194
194,195
194,196
195,196
195,197
196,197
200,201
200,202
201,202
201,203
202,203
202,204
203,204
206,207
208,209
208,210
208,211
208,212
208,213
209,210
210,211
210,212
212,213
212,214
214,215
215,216
216,217
218,219
219,220
219,221
220,221
222,223
222,224
223,224
225,226
227,228
228,229
229,230
229,231
230,231
230,232
231,232
235,236
235,237
236,237
236,238
237,238
237,239
238,239
241,242
243,244
243,245
244,245
245,246
246,247
246,248
247,248
247,249
248,249
252,253
253,254
253,255
253,256
254,255
256,257
256,258
257,258
260,261
262,263
263,264
263,265
264,265
264,266
265,266
268,269
270,271
270,272
272,273
273,274
273,275
273,276
274,275
276,277
278,279
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,28,29,30,31,35,37,38,43,44,45,49,51,52,56,58,59,63,65,69,70,74,76,81,85,86,89,93,95,97,100,101,105,107,109,113,116,118,120,123,127,129,133,138,139,141,145,146,150,152,154,156,161,166,167,168,174,175,177,182,183,185,189,190,197,198,199,204,205,207,211,213,217,221,224,226,232,233,234,239,240,242,249,250,251,255,258,259,261,266,267,269,271,275,277,279
-----computeFrom-----
67,68
67,69
78,79
78,80
98,99
98,100
103,104
103,105
111,112
111,113
131,132
131,133
171,172
171,173
179,180
179,181
201,202
201,203
219,220
219,221
236,237
236,238
263,264
263,265
-----guardedBy-----
205,267
204,266
239,258
242,261
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;LabelStatement;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int kvmppc_rm_h_eoi(struct kvm_vcpu *vcpu, unsigned long xirr){	struct kvmppc_xics *xics = vcpu->kvm->arch.xics;	struct kvmppc_icp *icp = vcpu->arch.icp;	struct kvmppc_ics *ics;	struct ics_irq_state *state;	u32 irq = xirr & 0x00ffffff;	u16 src;	if (!xics || !xics->real_mode)		return H_TOO_HARD;	/*	 * ICP State: EOI	 *	 * Note: If EOI is incorrectly used by SW to lower the CPPR	 * value (ie more favored), we do not check for rejection of	 * a pending interrupt, this is a SW error and PAPR sepcifies	 * that we don't have to deal with it.	 *	 * The sending of an EOI to the ICS is handled after the	 * CPPR update	 *	 * ICP State: Down_CPPR which we handle	 * in a separate function as it's shared with H_CPPR.	 */	icp_rm_down_cppr(xics, icp, xirr >> 24);	/* IPIs have no EOI */	if (irq == XICS_IPI)		goto bail;	/*	 * EOI handling: If the interrupt is still asserted, we need to	 * resend it. We can take a lockless "peek" at the ICS state here.	 *	 * "Message" interrupts will never have "asserted" set	 */	ics = kvmppc_xics_find_ics(xics, irq, &src);	if (!ics)		goto bail;	state = &ics->irq_state[src];	/* Still asserted, resend it */	if (state->asserted)		icp_rm_deliver_irq(xics, icp, irq);	if (!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)) {		icp->rm_action |= XICS_RM_NOTIFY_EOI;		icp->rm_eoied_irq = irq;	}	if (state->host_irq) {		++vcpu->stat.pthru_all;		if (state->intr_cpu != -1) {			int pcpu = raw_smp_processor_id();			pcpu = cpu_first_thread_sibling(pcpu);			++vcpu->stat.pthru_host;			if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}			state->intr_cpu = -1;		}	} bail:	return check_too_hard(xics, icp);}
int
kvmppc_rm_h_eoi(struct kvm_vcpu *vcpu, unsigned long xirr)
kvmppc_rm_h_eoi
struct kvm_vcpu *vcpu
struct kvm_vcpu
kvm_vcpu
*vcpu
*
vcpu
unsigned long xirr
unsigned long
xirr
xirr
{	struct kvmppc_xics *xics = vcpu->kvm->arch.xics;	struct kvmppc_icp *icp = vcpu->arch.icp;	struct kvmppc_ics *ics;	struct ics_irq_state *state;	u32 irq = xirr & 0x00ffffff;	u16 src;	if (!xics || !xics->real_mode)		return H_TOO_HARD;	/*	 * ICP State: EOI	 *	 * Note: If EOI is incorrectly used by SW to lower the CPPR	 * value (ie more favored), we do not check for rejection of	 * a pending interrupt, this is a SW error and PAPR sepcifies	 * that we don't have to deal with it.	 *	 * The sending of an EOI to the ICS is handled after the	 * CPPR update	 *	 * ICP State: Down_CPPR which we handle	 * in a separate function as it's shared with H_CPPR.	 */	icp_rm_down_cppr(xics, icp, xirr >> 24);	/* IPIs have no EOI */	if (irq == XICS_IPI)		goto bail;	/*	 * EOI handling: If the interrupt is still asserted, we need to	 * resend it. We can take a lockless "peek" at the ICS state here.	 *	 * "Message" interrupts will never have "asserted" set	 */	ics = kvmppc_xics_find_ics(xics, irq, &src);	if (!ics)		goto bail;	state = &ics->irq_state[src];	/* Still asserted, resend it */	if (state->asserted)		icp_rm_deliver_irq(xics, icp, irq);	if (!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)) {		icp->rm_action |= XICS_RM_NOTIFY_EOI;		icp->rm_eoied_irq = irq;	}	if (state->host_irq) {		++vcpu->stat.pthru_all;		if (state->intr_cpu != -1) {			int pcpu = raw_smp_processor_id();			pcpu = cpu_first_thread_sibling(pcpu);			++vcpu->stat.pthru_host;			if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}			state->intr_cpu = -1;		}	} bail:	return check_too_hard(xics, icp);}
struct kvmppc_xics *xics = vcpu->kvm->arch.xics;
struct kvmppc_xics *xics = vcpu->kvm->arch.xics;
struct kvmppc_xics
kvmppc_xics
*xics = vcpu->kvm->arch.xics
*
xics
= vcpu->kvm->arch.xics
vcpu->kvm->arch.xics
vcpu->kvm->arch
vcpu->kvm
vcpu
vcpu
kvm
arch
xics
struct kvmppc_icp *icp = vcpu->arch.icp;
struct kvmppc_icp *icp = vcpu->arch.icp;
struct kvmppc_icp
kvmppc_icp
*icp = vcpu->arch.icp
*
icp
= vcpu->arch.icp
vcpu->arch.icp
vcpu->arch
vcpu
vcpu
arch
icp
struct kvmppc_ics *ics;
struct kvmppc_ics *ics;
struct kvmppc_ics
kvmppc_ics
*ics
*
ics
struct ics_irq_state *state;
struct ics_irq_state *state;
struct ics_irq_state
ics_irq_state
*state
*
state
u32 irq = xirr & 0x00ffffff;
u32 irq = xirr & 0x00ffffff;
u32
u32
irq = xirr & 0x00ffffff
irq
= xirr & 0x00ffffff
xirr & 0x00ffffff
xirr
xirr
0x00ffffff
u16 src;
u16 src;
u16
u16
src
src
if (!xics || !xics->real_mode)		return H_TOO_HARD;
!xics || !xics->real_mode
!xics
xics
xics
!xics->real_mode
xics->real_mode
xics
xics
real_mode
return H_TOO_HARD;
H_TOO_HARD
H_TOO_HARD
icp_rm_down_cppr(xics, icp, xirr >> 24);
icp_rm_down_cppr(xics, icp, xirr >> 24)
icp_rm_down_cppr
icp_rm_down_cppr
xics
xics
icp
icp
xirr >> 24
xirr
xirr
24
if (irq == XICS_IPI)		goto bail;
irq == XICS_IPI
irq
irq
XICS_IPI
XICS_IPI
goto bail;
bail
ics = kvmppc_xics_find_ics(xics, irq, &src);
ics = kvmppc_xics_find_ics(xics, irq, &src)
ics
ics
kvmppc_xics_find_ics(xics, irq, &src)
kvmppc_xics_find_ics
kvmppc_xics_find_ics
xics
xics
irq
irq
&src
src
src
if (!ics)		goto bail;
!ics
ics
ics
goto bail;
bail
state = &ics->irq_state[src];
state = &ics->irq_state[src]
state
state
&ics->irq_state[src]
ics->irq_state[src]
ics->irq_state
ics
ics
irq_state
src
src
if (state->asserted)		icp_rm_deliver_irq(xics, icp, irq);
state->asserted
state
state
asserted
icp_rm_deliver_irq(xics, icp, irq);
icp_rm_deliver_irq(xics, icp, irq)
icp_rm_deliver_irq
icp_rm_deliver_irq
xics
xics
icp
icp
irq
irq
if (!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)) {		icp->rm_action |= XICS_RM_NOTIFY_EOI;		icp->rm_eoied_irq = irq;	}
!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)
hlist_empty(&vcpu->kvm->irq_ack_notifier_list)
hlist_empty
hlist_empty
&vcpu->kvm->irq_ack_notifier_list
vcpu->kvm->irq_ack_notifier_list
vcpu->kvm
vcpu
vcpu
kvm
irq_ack_notifier_list
{		icp->rm_action |= XICS_RM_NOTIFY_EOI;		icp->rm_eoied_irq = irq;	}
icp->rm_action |= XICS_RM_NOTIFY_EOI;
icp->rm_action |= XICS_RM_NOTIFY_EOI
icp->rm_action
icp
icp
rm_action
XICS_RM_NOTIFY_EOI
XICS_RM_NOTIFY_EOI
icp->rm_eoied_irq = irq;
icp->rm_eoied_irq = irq
icp->rm_eoied_irq
icp
icp
rm_eoied_irq
irq
irq
if (state->host_irq) {		++vcpu->stat.pthru_all;		if (state->intr_cpu != -1) {			int pcpu = raw_smp_processor_id();			pcpu = cpu_first_thread_sibling(pcpu);			++vcpu->stat.pthru_host;			if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}			state->intr_cpu = -1;		}	}
state->host_irq
state
state
host_irq
{		++vcpu->stat.pthru_all;		if (state->intr_cpu != -1) {			int pcpu = raw_smp_processor_id();			pcpu = cpu_first_thread_sibling(pcpu);			++vcpu->stat.pthru_host;			if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}			state->intr_cpu = -1;		}	}
++vcpu->stat.pthru_all;
++vcpu->stat.pthru_all
vcpu->stat.pthru_all
vcpu->stat
vcpu
vcpu
stat
pthru_all
if (state->intr_cpu != -1) {			int pcpu = raw_smp_processor_id();			pcpu = cpu_first_thread_sibling(pcpu);			++vcpu->stat.pthru_host;			if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}			state->intr_cpu = -1;		}
state->intr_cpu != -1
state->intr_cpu
state
state
intr_cpu
-1
1
{			int pcpu = raw_smp_processor_id();			pcpu = cpu_first_thread_sibling(pcpu);			++vcpu->stat.pthru_host;			if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}			state->intr_cpu = -1;		}
int pcpu = raw_smp_processor_id();
int pcpu = raw_smp_processor_id();
int
pcpu = raw_smp_processor_id()
pcpu
= raw_smp_processor_id()
raw_smp_processor_id()
raw_smp_processor_id
raw_smp_processor_id
pcpu = cpu_first_thread_sibling(pcpu);
pcpu = cpu_first_thread_sibling(pcpu)
pcpu
pcpu
cpu_first_thread_sibling(pcpu)
cpu_first_thread_sibling
cpu_first_thread_sibling
pcpu
pcpu
++vcpu->stat.pthru_host;
++vcpu->stat.pthru_host
vcpu->stat.pthru_host
vcpu->stat
vcpu
vcpu
stat
pthru_host
if (state->intr_cpu != pcpu) {				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}
state->intr_cpu != pcpu
state->intr_cpu
state
state
intr_cpu
pcpu
pcpu
{				++vcpu->stat.pthru_bad_aff;				xics_opal_rm_set_server(state->host_irq, pcpu);			}
++vcpu->stat.pthru_bad_aff;
++vcpu->stat.pthru_bad_aff
vcpu->stat.pthru_bad_aff
vcpu->stat
vcpu
vcpu
stat
pthru_bad_aff
xics_opal_rm_set_server(state->host_irq, pcpu);
xics_opal_rm_set_server(state->host_irq, pcpu)
xics_opal_rm_set_server
xics_opal_rm_set_server
state->host_irq
state
state
host_irq
pcpu
pcpu
state->intr_cpu = -1;
state->intr_cpu = -1
state->intr_cpu
state
state
intr_cpu
-1
1
bail:	return check_too_hard(xics, icp);
bail
return check_too_hard(xics, icp);
check_too_hard(xics, icp)
check_too_hard
check_too_hard
xics
xics
icp
icp
-----joern-----
(9,84,0)
(41,66,0)
(87,4,0)
(108,150,0)
(107,8,0)
(70,73,0)
(17,28,0)
(56,13,0)
(112,148,0)
(4,26,0)
(126,145,0)
(135,73,0)
(146,20,0)
(134,84,0)
(132,58,0)
(29,59,0)
(106,4,0)
(4,141,0)
(10,58,0)
(84,48,0)
(104,13,0)
(63,41,0)
(86,141,0)
(111,120,0)
(151,35,0)
(20,141,0)
(37,48,0)
(94,71,0)
(52,141,0)
(130,92,0)
(45,13,0)
(18,10,0)
(54,93,0)
(6,28,0)
(119,51,0)
(6,145,0)
(53,87,0)
(35,124,0)
(26,15,0)
(48,84,0)
(56,20,0)
(21,141,0)
(90,15,0)
(50,51,0)
(122,56,0)
(101,103,0)
(103,148,0)
(15,26,0)
(69,65,0)
(152,119,0)
(119,152,0)
(132,59,0)
(48,58,0)
(143,81,0)
(96,101,0)
(75,137,0)
(127,95,0)
(60,124,0)
(77,41,0)
(88,85,0)
(89,20,0)
(41,43,0)
(85,80,0)
(145,4,0)
(93,54,0)
(118,8,0)
(69,80,0)
(31,132,0)
(95,66,0)
(99,141,0)
(13,56,0)
(113,47,0)
(75,102,0)
(61,39,0)
(124,59,0)
(16,59,0)
(15,45,0)
(62,87,0)
(85,66,0)
(124,141,0)
(124,35,0)
(25,146,0)
(109,43,0)
(71,72,0)
(144,45,0)
(140,42,0)
(10,47,0)
(92,87,0)
(22,74,0)
(35,3,0)
(54,137,0)
(124,58,0)
(105,115,0)
(7,32,0)
(115,105,0)
(56,100,0)
(59,16,0)
(8,58,0)
(79,45,0)
(67,16,0)
(132,92,0)
(136,155,0)
(73,135,0)
(131,105,0)
(155,136,0)
(128,44,0)
(150,148,0)
(14,100,0)
(80,69,0)
(39,4,0)
(129,150,0)
(156,145,0)
(157,44,0)
(158,66,0)
(102,4,0)
(105,103,0)
(11,56,0)
(47,72,0)
(158,73,0)
(103,101,0)
(110,124,0)
(98,93,0)
(26,4,0)
(147,141,0)
(57,136,0)
(42,152,0)
(93,95,0)
(116,148,0)
(92,141,0)
(23,58,0)
(59,141,0)
(130,121,0)
(83,141,0)
(81,143,0)
(68,136,0)
(43,16,0)
(81,148,0)
(91,80,0)
(42,59,0)
(92,8,0)
(46,121,0)
(123,75,0)
(44,58,0)
(142,141,0)
(44,59,0)
(120,135,0)
(74,13,0)
(75,103,0)
(43,41,0)
(51,119,0)
(49,139,0)
(149,35,0)
(125,102,0)
(138,155,0)
(73,158,0)
(87,81,0)
(33,115,0)
(135,120,0)
(97,148,0)
(80,85,0)
(102,75,0)
(100,56,0)
(133,139,0)
(32,20,0)
(12,141,0)
(55,141,0)
(84,66,0)
(58,141,0)
(27,141,0)
(40,102,0)
(45,15,0)
(152,42,0)
(159,143,0)
(76,158,0)
(153,146,0)
(20,146,0)
(155,112,0)
(0,44,0)
(8,71,0)
(160,141,0)
(58,48,0)
(146,3,0)
(64,158,0)
(5,39,0)
(136,66,0)
(139,4,0)
(56,59,0)
(78,95,0)
(150,129,0)
(28,6,0)
(51,59,0)
(24,115,0)
(112,155,0)
(2,132,0)
(36,141,0)
(120,111,0)
(38,103,0)
(16,43,0)
(154,85,0)
(95,93,0)
(114,141,0)
(82,10,0)
(1,51,0)
(117,32,0)
(145,6,0)
(92,10,0)
(34,65,0)
(101,150,0)
(71,20,0)
(115,4,0)
(13,141,0)
(44,20,0)
(152,42,1)
(47,113,1)
(71,94,1)
(56,100,1)
(7,117,1)
(85,88,1)
(17,145,1)
(155,138,1)
(57,68,1)
(85,66,1)
(73,70,1)
(60,110,1)
(87,53,1)
(38,150,1)
(1,42,1)
(123,102,1)
(102,4,1)
(106,74,1)
(39,61,1)
(82,111,1)
(158,66,1)
(20,146,1)
(22,13,1)
(109,41,1)
(125,54,1)
(2,6,1)
(23,59,1)
(139,4,1)
(132,31,1)
(124,59,1)
(157,128,1)
(145,4,1)
(2,19,1)
(122,104,1)
(32,20,1)
(40,125,1)
(128,139,1)
(30,32,1)
(2,30,1)
(100,14,1)
(126,156,1)
(76,44,1)
(61,5,1)
(111,120,1)
(121,46,1)
(16,43,1)
(145,126,1)
(149,151,1)
(124,35,1)
(95,78,1)
(101,150,1)
(9,134,1)
(159,87,1)
(89,58,1)
(24,33,1)
(45,13,1)
(8,58,1)
(75,123,1)
(136,66,1)
(144,106,1)
(118,47,1)
(80,91,1)
(92,10,1)
(98,95,1)
(44,0,1)
(138,136,1)
(19,74,1)
(155,136,1)
(53,62,1)
(42,140,1)
(14,11,1)
(32,7,1)
(105,115,1)
(33,112,1)
(48,84,1)
(140,20,1)
(28,17,1)
(42,59,1)
(69,80,1)
(43,41,1)
(81,143,1)
(156,69,1)
(92,87,1)
(146,25,1)
(84,66,1)
(68,103,1)
(10,18,1)
(56,20,1)
(104,32,1)
(77,63,1)
(129,108,1)
(75,102,1)
(95,66,1)
(113,10,1)
(25,153,1)
(93,98,1)
(74,13,1)
(35,149,1)
(154,39,1)
(79,144,1)
(130,121,1)
(151,60,1)
(133,4,1)
(8,107,1)
(120,135,1)
(112,155,1)
(5,111,1)
(93,95,1)
(92,8,1)
(37,84,1)
(158,64,1)
(134,23,1)
(10,58,1)
(115,24,1)
(39,4,1)
(153,89,1)
(102,40,1)
(16,67,1)
(150,129,1)
(139,49,1)
(108,6,1)
(70,158,1)
(0,157,1)
(4,26,1)
(78,127,1)
(41,66,1)
(58,48,1)
(26,15,1)
(31,2,1)
(74,22,1)
(56,59,1)
(124,58,1)
(84,9,1)
(115,4,1)
(88,154,1)
(46,152,1)
(75,103,1)
(143,159,1)
(96,38,1)
(130,92,1)
(90,45,1)
(94,8,1)
(44,20,1)
(59,16,1)
(119,51,1)
(135,73,1)
(87,4,1)
(136,57,1)
(127,105,1)
(105,131,1)
(71,20,1)
(44,59,1)
(101,96,1)
(49,133,1)
(45,79,1)
(5,71,1)
(92,132,1)
(103,101,1)
(63,29,1)
(76,139,1)
(110,152,1)
(62,75,1)
(146,3,1)
(6,28,1)
(35,3,1)
(15,90,1)
(131,115,1)
(80,85,1)
(54,93,1)
(43,109,1)
(105,103,1)
(48,37,1)
(152,119,1)
(2,39,1)
(62,105,1)
(15,45,1)
(117,124,1)
(51,59,1)
(18,82,1)
(13,56,1)
(91,85,1)
(64,76,1)
(51,50,1)
(67,43,1)
(6,145,1)
(132,58,1)
(73,158,1)
(11,122,1)
(132,59,1)
(41,77,1)
(44,58,1)
(107,118,1)
(2,81,1)
(50,1,1)
(26,15,2)
(57,6,2)
(91,39,2)
(81,6,2)
(129,6,2)
(157,139,2)
(75,103,2)
(44,59,2)
(13,56,2)
(158,66,2)
(128,139,2)
(44,58,2)
(155,6,2)
(120,74,2)
(46,152,2)
(44,139,2)
(19,74,2)
(73,158,2)
(4,26,2)
(156,39,2)
(125,105,2)
(150,129,2)
(117,152,2)
(59,16,2)
(130,121,2)
(107,111,2)
(41,66,2)
(56,32,2)
(48,84,2)
(149,152,2)
(70,74,2)
(8,111,2)
(17,39,2)
(60,152,2)
(62,6,2)
(69,80,2)
(45,13,2)
(56,59,2)
(38,6,2)
(35,3,2)
(79,74,2)
(74,13,2)
(105,115,2)
(39,4,2)
(11,32,2)
(132,58,2)
(124,152,2)
(42,59,2)
(143,6,2)
(120,135,2)
(100,32,2)
(8,58,2)
(13,32,2)
(88,39,2)
(101,150,2)
(1,42,2)
(138,6,2)
(68,6,2)
(7,152,2)
(2,152,2)
(30,32,2)
(98,105,2)
(139,74,2)
(73,74,2)
(71,111,2)
(145,4,2)
(56,20,2)
(105,6,2)
(54,93,2)
(145,39,2)
(124,59,2)
(47,111,2)
(14,32,2)
(85,39,2)
(92,152,2)
(123,105,2)
(139,4,2)
(10,58,2)
(40,105,2)
(110,152,2)
(53,6,2)
(39,74,2)
(90,74,2)
(118,111,2)
(103,101,2)
(24,6,2)
(15,45,2)
(132,59,2)
(133,74,2)
(115,6,2)
(92,87,2)
(105,103,2)
(54,105,2)
(87,6,2)
(32,152,2)
(93,105,2)
(71,20,2)
(45,74,2)
(151,152,2)
(152,119,2)
(33,6,2)
(102,4,2)
(158,74,2)
(82,111,2)
(5,74,2)
(58,48,2)
(64,74,2)
(132,152,2)
(102,105,2)
(6,39,2)
(103,6,2)
(119,51,2)
(26,74,2)
(124,58,2)
(35,152,2)
(74,32,2)
(31,152,2)
(112,6,2)
(85,66,2)
(75,105,2)
(127,105,2)
(94,111,2)
(96,6,2)
(76,74,2)
(20,146,2)
(75,102,2)
(106,74,2)
(135,74,2)
(111,74,2)
(61,74,2)
(121,152,2)
(44,20,2)
(43,41,2)
(111,120,2)
(18,111,2)
(4,74,2)
(56,100,2)
(84,66,2)
(135,73,2)
(122,32,2)
(95,66,2)
(152,42,2)
(92,8,2)
(69,39,2)
(32,20,2)
(136,6,2)
(10,111,2)
(51,59,2)
(104,32,2)
(150,6,2)
(154,39,2)
(78,105,2)
(130,92,2)
(22,32,2)
(124,35,2)
(144,74,2)
(80,85,2)
(80,39,2)
(87,4,2)
(119,42,2)
(28,39,2)
(113,111,2)
(101,6,2)
(6,28,2)
(51,42,2)
(16,43,2)
(136,66,2)
(146,3,2)
(50,42,2)
(0,139,2)
(92,10,2)
(115,4,2)
(95,105,2)
(112,155,2)
(49,74,2)
(159,6,2)
(6,145,2)
(81,143,2)
(126,39,2)
(155,136,2)
(93,95,2)
(15,74,2)
(108,6,2)
(131,6,2)
-----------------------------------
(0,irq)
(1,xics)
(2,xics)
(3,unsigned long xirr)
(4,state = &ics->irq_state[src])
(5,state)
(6,state->intr_cpu != -1)
(7,XICS_IPI)
(8,icp->rm_eoied_irq)
(9,arch)
(10,icp->rm_action)
(11,irq)
(12,state)
(13,ics = kvmppc_xics_find_ics(xics, irq, &src)
(14,src)
(15,ics->irq_state[src])
(16,vcpu->kvm->arch.xics)
(17,1)
(18,rm_action)
(19,goto bail;)
(20,irq = xirr & 0x00ffffff)
(21,src)
(22,ics)
(23,icp)
(24,intr_cpu)
(25,0x00ffffff)
(26,&ics->irq_state[src])
(27,if (state->host_irq)
(28,-1)
(29,xics)
(30,goto bail;)
(31,icp)
(32,irq == XICS_IPI)
(33,state)
(34,if (state->intr_cpu != -1)
(35,xirr >> 24)
(36,xics)
(37,icp)
(38,pcpu)
(39,state->host_irq)
(40,host_irq)
(41,vcpu->kvm)
(42,!xics)
(43,vcpu->kvm->arch)
(44,icp_rm_deliver_irq(xics, icp, irq)
(45,ics->irq_state)
(46,H_TOO_HARD)
(47,icp->rm_action |= XICS_RM_NOTIFY_EOI)
(48,vcpu->arch.icp)
(49,asserted)
(50,real_mode)
(51,xics->real_mode)
(52,if (irq == XICS_IPI)
(53,intr_cpu)
(54,++vcpu->stat.pthru_bad_aff)
(55,ics)
(56,kvmppc_xics_find_ics(xics, irq, &src)
(57,stat)
(58,*icp = vcpu->arch.icp)
(59,*xics = vcpu->kvm->arch.xics)
(60,icp)
(61,host_irq)
(62,state)
(63,vcpu)
(64,kvm)
(65,)
(66,struct kvm_vcpu *vcpu)
(67,xics)
(68,vcpu)
(69,++vcpu->stat.pthru_all)
(70,irq_ack_notifier_list)
(71,icp->rm_eoied_irq = irq)
(72,)
(73,vcpu->kvm->irq_ack_notifier_list)
(74,!ics)
(75,xics_opal_rm_set_server(state->host_irq, pcpu)
(76,vcpu)
(77,kvm)
(78,stat)
(79,irq_state)
(80,vcpu->stat.pthru_all)
(81,state->intr_cpu = -1)
(82,icp)
(83,if (!xics || !xics->real_mode)
(84,vcpu->arch)
(85,vcpu->stat)
(86,bail:)
(87,state->intr_cpu)
(88,stat)
(89,irq)
(90,src)
(91,pthru_all)
(92,return check_too_hard(xics, icp)
(93,vcpu->stat.pthru_bad_aff)
(94,irq)
(95,vcpu->stat)
(96,pcpu)
(97,if (state->intr_cpu != pcpu)
(98,pthru_bad_aff)
(99,if (!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)
(100,&src)
(101,cpu_first_thread_sibling(pcpu)
(102,state->host_irq)
(103,pcpu = cpu_first_thread_sibling(pcpu)
(104,ics)
(105,state->intr_cpu != pcpu)
(106,state)
(107,rm_eoied_irq)
(108,pcpu)
(109,arch)
(110,xics)
(111,!hlist_empty(&vcpu->kvm->irq_ack_notifier_list)
(112,++vcpu->stat.pthru_host)
(113,XICS_RM_NOTIFY_EOI)
(114,irq)
(115,state->intr_cpu)
(116,pcpu)
(117,irq)
(118,icp)
(119,!xics->real_mode)
(120,hlist_empty(&vcpu->kvm->irq_ack_notifier_list)
(121,return H_TOO_HARD;)
(122,xics)
(123,pcpu)
(124,icp_rm_down_cppr(xics, icp, xirr >> 24)
(125,state)
(126,intr_cpu)
(127,vcpu)
(128,xics)
(129,raw_smp_processor_id()
(130,RET)
(131,pcpu)
(132,check_too_hard(xics, icp)
(133,state)
(134,vcpu)
(135,&vcpu->kvm->irq_ack_notifier_list)
(136,vcpu->stat)
(137,)
(138,pthru_host)
(139,state->asserted)
(140,xics)
(141,)
(142,if (state->asserted)
(143,-1)
(144,ics)
(145,state->intr_cpu)
(146,xirr & 0x00ffffff)
(147,icp)
(148,)
(149,24)
(150,pcpu = raw_smp_processor_id()
(151,xirr)
(152,!xics || !xics->real_mode)
(153,xirr)
(154,vcpu)
(155,vcpu->stat.pthru_host)
(156,state)
(157,icp)
(158,vcpu->kvm)
(159,1)
(160,if (!ics)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^