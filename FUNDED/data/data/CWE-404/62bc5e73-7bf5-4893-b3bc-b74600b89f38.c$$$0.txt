-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_21_bad()
{
    wchar_t * data;
    data = NULL;
    {
        wchar_t myString[] = L"myString";
        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
        data = wcsdup(myString);
        /* Use data */
        printWLine(data);
    }
    badStatic = 1; /* true */
    badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
20,22
22,23
22,24
22,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,8,10,11,15,17,21,23,24,26,30,33,35,39,41,45,46,50,52
-----computeFrom-----
13,14
13,15
28,29
28,30
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_21_bad(){    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    badStatic = 1; /* true */    badSink(data);}
void
CWE401_Memory_Leak__strdup_wchar_t_21_bad()
CWE401_Memory_Leak__strdup_wchar_t_21_bad
{    wchar_t * data;    data = NULL;    {        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }    badStatic = 1; /* true */    badSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t myString[] = L"myString";        /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */        data = wcsdup(myString);        /* Use data */        printWLine(data);    }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
badSink(data);
badSink(data)
badSink
badSink
data
data
-----joern-----
(8,4,0)
(4,8,0)
(2,17,0)
(15,18,0)
(6,4,0)
(13,9,0)
(7,17,0)
(18,2,0)
(18,4,0)
(16,1,0)
(9,17,0)
(12,6,0)
(14,4,0)
(6,17,0)
(5,8,0)
(1,17,0)
(11,1,0)
(3,9,0)
(4,2,0)
(0,2,0)
(13,3,1)
(16,11,1)
(1,16,1)
(0,9,1)
(18,4,1)
(4,8,1)
(15,4,1)
(9,13,1)
(10,6,1)
(6,4,1)
(5,14,1)
(12,1,1)
(14,0,1)
(6,12,1)
(8,5,1)
(18,15,1)
(11,18,1)
(6,4,2)
(18,4,2)
(4,8,2)
-----------------------------------
(0,"myString")
(1,badStatic = 1)
(2,)
(3,data)
(4,data = wcsdup(myString)
(5,myString)
(6,badSink(data)
(7,data)
(8,wcsdup(myString)
(9,data = NULL)
(10,RET)
(11,badStatic)
(12,data)
(13,NULL)
(14,data)
(15,data)
(16,1)
(17,)
(18,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^