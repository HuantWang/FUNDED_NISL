-----label-----
1
-----code-----
VOS_STATUS hdd_wlan_re_init(void)
{
   VOS_STATUS       vosStatus;
   v_CONTEXT_t      pVosContext = NULL;
   hdd_context_t    *pHddCtx = NULL;
   eHalStatus       halStatus;
#ifdef HAVE_WCNSS_CAL_DOWNLOAD
   int              max_retries = 0;
#endif
#ifdef HAVE_CBC_DONE
   int              max_cbc_retries = 0;
#endif
#ifdef WLAN_BTAMP_FEATURE
   hdd_config_t     *pConfig = NULL;
   WLANBAP_ConfigType btAmpConfig;
#endif

   struct device *dev = NULL;
   hdd_ssr_timer_del();
   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);

#ifdef HAVE_WCNSS_CAL_DOWNLOAD
   /* wait until WCNSS driver downloads NV */
   while (!wcnss_device_ready() && 10 >= ++max_retries) {
       msleep(1000);
   }
   if (max_retries >= 10) {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__);
      goto err_re_init;
   }
#endif

#ifdef HAVE_CBC_DONE
   while (!wcnss_cbc_complete() && 20 >= ++max_cbc_retries) {
       msleep(1000);
   }
   if (max_cbc_retries >= 20) {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s:CBC not completed", __func__);
   }
#endif

   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, TRUE);

   /* The driver should always be initialized in STA mode after SSR */
   hdd_set_conparam(0);

   dev = wcnss_wlan_get_device();
   if (NULL == dev)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__);
      goto err_re_init;
   }

   /* Re-open VOSS, it is a re-open b'se control transport was never closed. */
   vosStatus = vos_open(&pVosContext, dev);
   if (!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);
      goto err_re_init;
   }

   /* Get the HDD context. */
   pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);
   if(!pHddCtx)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);
      goto err_vosclose;
   }

   /* Save the hal context in Adapter */
   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );
   if ( NULL == pHddCtx->hHal )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);
      goto err_vosclose;
   }

   /* Set the SME configuration parameters. */
   vosStatus = hdd_set_sme_config(pHddCtx);
   if ( VOS_STATUS_SUCCESS != vosStatus )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);
      goto err_vosclose;
   }

   vosStatus = vos_preStart( pHddCtx->pvosContext );
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);
      goto err_vosclose;
   }

   /* In the integrated architecture we update the configuration from
      the INI file and from NV before vOSS has been started so that
      the final contents are available to send down to the cCPU   */
   /* Apply the cfg.ini to cfg.dat */
   if (FALSE == hdd_update_config_dat(pHddCtx))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
      goto err_vosclose;
   }

   /* Set the MAC Address, currently this is used by HAL to add self sta.
    * Remove this once self sta is added as part of session open. */
   halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,
         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],
           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));
   if (!HAL_STATUS_SUCCESS(halStatus))
   {
      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "
            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);
      goto err_vosclose;
   }

   /* Start VOSS which starts up the SME/MAC/HAL modules and everything else
      Note: Firmware image will be read and downloaded inside vos_start API */
   vosStatus = vos_start( pVosContext );
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
      if (isSsrPanicOnFailure())
          VOS_BUG(0);
      goto err_vosclose;
   }

   /* Exchange capability info between Host and FW and also get versioning info from FW */
   hdd_exchange_version_and_caps(pHddCtx);

   vosStatus = hdd_post_voss_start_config( pHddCtx );
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",
         __func__);
      goto err_vosstop;
   }

#ifdef CONFIG_ENABLE_LINUX_REG
   vosStatus = wlan_hdd_init_channels_for_cc(pHddCtx, REINIT);
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",
             __func__);
      goto err_vosstop;
   }
#endif

#ifdef WLAN_BTAMP_FEATURE
   vosStatus = WLANBAP_Open(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to open BAP",__func__);
      goto err_vosstop;
   }
   vosStatus = BSL_Init(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to Init BSL",__func__);
     goto err_bap_close;
   }
   vosStatus = WLANBAP_Start(pVosContext);
   if (!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
               "%s: Failed to start TL",__func__);
       goto err_bap_close;
   }
   pConfig = pHddCtx->cfg_ini;
   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;
   vosStatus = WLANBAP_SetConfig(&btAmpConfig);
#endif //WLAN_BTAMP_FEATURE

    /* Restart all adapters */
   hdd_start_all_adapters(pHddCtx);
   pHddCtx->last_scan_reject_session_id = 0;
   pHddCtx->last_scan_reject_reason = 0xFF;
   pHddCtx->last_scan_reject_timestamp = 0;
   pHddCtx->hdd_mcastbcast_filter_set = FALSE;
   pHddCtx->btCoexModeSet = FALSE;
   hdd_register_mcast_bcast_filter(pHddCtx);
   wlan_hdd_tdls_init(pHddCtx);
   /* Register with platform driver as client for Suspend/Resume */
   vosStatus = hddRegisterPmOps(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
      goto err_bap_stop;
   }

#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE
   if (pHddCtx->cfg_ini->wlanLoggingEnable &&
               (pHddCtx->cfg_ini->enableFWLogging ||
                pHddCtx->cfg_ini->enableMgmtLogging ||
                pHddCtx->cfg_ini->enableContFWLogging))
   {
       hdd_init_frame_logging(pHddCtx);
   }
#endif

   /* Allow the phone to go to sleep */
   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
   /* register for riva power on lock */
   if (req_riva_power_on_lock("wlan"))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",
                                        __func__);
      goto err_unregister_pmops;
   }
   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);
   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);

   sme_register_mgmt_frame_ind_callback(pHddCtx->hHal,hdd_indicate_mgmt_frame);

#ifdef WLAN_FEATURE_EXTSCAN
    sme_EXTScanRegisterCallback(pHddCtx->hHal,
            wlan_hdd_cfg80211_extscan_callback,
                           pHddCtx);
#endif /* WLAN_FEATURE_EXTSCAN */

#ifdef FEATURE_OEM_DATA_SUPPORT
    sme_OemDataRegisterCallback(pHddCtx->hHal,
             wlan_hdd_cfg80211_oemdata_callback,
                          pHddCtx);
#endif /* FEATURE_OEM_DATA_SUPPORT */

   goto success;

err_unregister_pmops:
   hddDeregisterPmOps(pHddCtx);

err_bap_stop:
#ifdef CONFIG_HAS_EARLYSUSPEND
   hdd_unregister_mcast_bcast_filter(pHddCtx);
#endif
   hdd_close_all_adapters(pHddCtx);
#ifdef WLAN_BTAMP_FEATURE
   WLANBAP_Stop(pVosContext);
#endif

#ifdef WLAN_BTAMP_FEATURE
err_bap_close:
   WLANBAP_Close(pVosContext);
#endif

err_vosstop:
   vos_stop(pVosContext);

err_vosclose:
   if(!isSsrPanicOnFailure())
   {
       /* If we hit this, it means wlan driver is in bad state and needs
       * driver unload and load.
       */
       vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);
       return VOS_STATUS_E_FAILURE;
   }

   vos_close(pVosContext);
   vos_sched_close(pVosContext);
   if (pHddCtx)
   {
       /* Unregister the Net Device Notifier */
       unregister_netdevice_notifier(&hdd_netdev_notifier);
       /* Clean up HDD Nlink Service */
       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
#ifdef WLAN_KD_READY_NOTIFIER
       nl_srv_exit(pHddCtx->ptt_pid);
#else
       nl_srv_exit();
#endif /* WLAN_KD_READY_NOTIFIER */
       /* Free up dynamically allocated members inside HDD Adapter */
       kfree(pHddCtx->cfg_ini);
       pHddCtx->cfg_ini= NULL;

       wiphy_unregister(pHddCtx->wiphy);
       hdd_wlan_free_wiphy_channels(pHddCtx->wiphy);
       wiphy_free(pHddCtx->wiphy);
   }
   vos_preClose(&pVosContext);

#ifdef MEMORY_DEBUG
   vos_mem_exit();
#endif

err_re_init:
   /* Allow the phone to go to sleep */
   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);
   VOS_BUG(0);
   return -EPERM;

success:
   /* Trigger replay of BTC events */
   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
   return VOS_STATUS_SUCCESS;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
10,28
10,29
10,30
10,31
10,32
10,33
10,34
10,35
10,36
10,37
10,38
10,39
10,40
10,41
10,42
10,43
10,44
10,45
10,46
10,47
10,48
10,49
10,50
10,51
10,52
10,53
10,54
10,55
10,56
10,57
10,58
10,59
10,60
10,61
10,62
10,63
10,64
10,65
10,66
10,67
10,68
10,69
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
26,27
27,28
27,29
28,29
30,31
30,32
30,33
33,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
52,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
61,62
63,64
64,65
64,66
64,67
65,66
67,68
69,70
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
90,91
91,92
91,93
91,94
91,95
92,93
94,95
97,98
99,100
101,102
102,103
102,104
103,104
105,106
105,107
105,108
106,107
108,109
109,110
111,112
113,114
113,115
114,115
115,116
115,117
116,117
118,119
120,121
120,122
121,122
122,123
122,124
122,125
122,126
123,124
125,126
128,129
130,131
132,133
133,134
133,135
134,135
136,137
136,138
137,138
137,139
138,139
140,141
142,143
142,144
142,145
143,144
145,146
147,148
149,150
149,151
150,151
151,152
153,154
153,155
154,155
155,156
155,157
155,158
155,159
156,157
158,159
161,162
163,164
165,166
166,167
166,168
167,168
167,169
168,169
171,172
171,173
172,173
172,174
173,174
176,177
176,178
176,179
177,178
179,180
181,182
183,184
183,185
184,185
184,186
185,186
187,188
187,189
188,189
191,192
191,193
192,193
193,194
193,195
193,196
193,197
194,195
196,197
199,200
201,202
203,204
204,205
204,206
205,206
207,208
207,209
208,209
210,211
212,213
212,214
213,214
213,215
214,215
216,217
218,219
218,220
219,220
220,221
220,222
220,223
220,224
221,222
223,224
226,227
228,229
230,231
231,232
231,233
232,233
234,235
234,236
235,236
237,238
237,239
238,239
241,242
241,243
242,243
243,244
243,245
244,245
246,247
248,249
248,250
249,250
250,251
250,252
250,253
250,254
251,252
253,254
256,257
258,259
260,261
260,262
261,262
261,263
262,263
264,265
264,266
265,266
267,268
269,270
269,271
270,271
271,272
271,273
271,274
271,275
272,273
274,275
277,278
279,280
281,282
282,283
282,284
283,284
285,286
285,287
285,288
285,289
285,290
286,287
288,289
288,290
289,290
292,293
294,295
294,296
295,296
295,297
296,297
298,299
300,301
301,302
301,303
302,303
302,304
303,304
303,305
304,305
309,310
310,311
311,312
311,313
312,313
312,314
313,314
313,315
314,315
319,320
319,321
320,321
321,322
321,323
322,323
324,325
326,327
326,328
327,328
328,329
328,330
328,331
328,332
328,333
328,334
329,330
331,332
334,335
336,337
338,339
340,341
342,343
343,344
343,345
344,345
346,347
346,348
347,348
349,350
351,352
351,353
352,353
353,354
353,355
354,355
356,357
358,359
358,360
358,361
359,360
360,361
360,362
360,363
360,364
361,362
363,364
366,367
368,369
368,370
369,370
370,371
372,373
373,374
373,375
374,375
377,378
379,380
380,381
380,382
381,382
383,384
385,386
386,387
386,388
387,388
389,390
389,391
390,391
392,393
394,395
394,396
395,396
396,397
396,398
397,398
399,400
401,402
401,403
402,403
403,404
403,405
403,406
403,407
404,405
406,407
409,410
411,412
413,414
414,415
414,416
415,416
417,418
419,420
420,421
420,422
421,422
421,423
422,423
426,427
427,428
427,429
428,429
428,430
429,430
433,434
434,435
434,436
435,436
435,437
436,437
440,441
441,442
441,443
442,443
442,444
443,444
446,447
448,449
449,450
449,451
450,451
450,452
451,452
454,455
456,457
457,458
457,459
458,459
460,461
462,463
463,464
463,465
464,465
466,467
468,469
469,470
469,471
470,471
472,473
472,474
473,474
475,476
477,478
477,479
478,479
479,480
479,481
480,481
482,483
484,485
484,486
485,486
486,487
486,488
486,489
486,490
487,488
489,490
492,493
494,495
496,497
497,498
497,499
498,499
500,501
502,503
502,504
503,504
503,505
504,505
507,508
507,509
508,509
509,510
509,511
509,512
509,513
510,511
512,513
515,516
517,518
519,520
520,521
520,522
520,523
521,522
523,524
523,525
524,525
527,528
529,530
530,531
530,532
530,533
531,532
533,534
535,536
537,538
538,539
538,540
538,541
539,540
541,542
541,543
542,543
545,546
547,548
549,550
549,551
551,552
552,553
552,554
553,554
555,556
557,558
557,559
559,560
560,561
560,562
561,562
563,564
565,566
565,567
567,568
568,569
568,570
569,570
571,572
573,574
573,575
575,576
575,577
576,577
577,578
578,579
580,581
580,582
581,582
582,583
582,584
582,585
583,584
585,586
587,588
589,590
590,591
592,593
593,594
593,595
594,595
596,597
598,599
599,600
599,601
600,601
602,603
604,605
604,606
605,606
607,608
607,609
607,610
607,611
607,612
607,613
607,614
607,615
608,609
609,610
609,611
610,611
612,613
613,614
613,615
616,617
617,618
617,619
617,620
618,619
620,621
623,624
624,625
625,626
627,628
628,629
628,630
629,630
631,632
631,633
632,633
635,636
636,637
636,638
637,638
637,639
638,639
641,642
643,644
644,645
644,646
645,646
647,648
647,649
648,649
651,652
652,653
652,654
653,654
655,656
655,657
656,657
659,660
660,661
660,662
661,662
663,664
663,665
664,665
667,668
668,669
668,670
669,670
671,672
672,673
674,675
674,676
676,677
677,678
677,679
678,679
680,681
682,683
683,684
683,685
683,686
684,685
686,687
688,689
690,691
691,692
691,693
692,693
695,696
696,697
697,698
699,700
699,701
701,702
702,703
702,704
702,705
703,704
705,706
708,709
709,710
-----nextToken-----
3,5,7,9,14,16,20,22,25,29,31,32,35,39,41,45,47,48,51,55,59,62,66,68,70,74,75,79,82,86,88,93,95,96,98,100,104,107,110,112,117,119,124,126,127,129,131,135,139,141,144,146,148,152,157,159,160,162,164,169,170,174,175,178,180,182,186,189,190,195,197,198,200,202,206,209,211,215,217,222,224,225,227,229,233,236,239,240,245,247,252,254,255,257,259,263,266,268,273,275,276,278,280,284,287,290,291,293,297,299,305,306,307,308,315,316,317,318,323,325,330,332,333,335,337,339,341,345,348,350,355,357,362,364,365,367,371,375,376,378,382,384,388,391,393,398,400,405,407,408,410,412,416,418,423,424,425,430,431,432,437,438,439,444,445,447,452,453,455,459,461,465,467,471,474,476,481,483,488,490,491,493,495,499,501,505,506,511,513,514,516,518,522,525,526,528,532,534,536,540,543,544,546,548,550,554,556,558,562,564,566,570,572,574,579,584,586,588,591,595,597,601,603,606,611,614,615,619,621,622,626,630,633,634,639,640,642,646,649,650,654,657,658,662,665,666,670,673,675,679,681,685,687,689,693,694,698,700,704,706,707,710
-----computeFrom-----
77,78
77,79
84,85
84,86
102,103
102,104
133,134
133,135
166,167
166,168
184,185
184,186
204,205
204,206
213,214
213,215
231,232
231,233
261,262
261,263
282,283
282,284
343,344
343,345
386,387
386,388
420,421
420,422
427,428
427,429
434,435
434,436
441,442
441,443
449,450
449,451
469,470
469,471
636,637
636,638
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
VOS_STATUS hdd_wlan_re_init(void){   VOS_STATUS       vosStatus;   v_CONTEXT_t      pVosContext = NULL;   hdd_context_t    *pHddCtx = NULL;   eHalStatus       halStatus;#ifdef HAVE_WCNSS_CAL_DOWNLOAD   int              max_retries = 0;#endif#ifdef HAVE_CBC_DONE   int              max_cbc_retries = 0;#endif#ifdef WLAN_BTAMP_FEATURE   hdd_config_t     *pConfig = NULL;   WLANBAP_ConfigType btAmpConfig;#endif   struct device *dev = NULL;   hdd_ssr_timer_del();   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);#ifdef HAVE_WCNSS_CAL_DOWNLOAD   /* wait until WCNSS driver downloads NV */   while (!wcnss_device_ready() && 10 >= ++max_retries) {       msleep(1000);   }   if (max_retries >= 10) {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__);      goto err_re_init;   }#endif#ifdef HAVE_CBC_DONE   while (!wcnss_cbc_complete() && 20 >= ++max_cbc_retries) {       msleep(1000);   }   if (max_cbc_retries >= 20) {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s:CBC not completed", __func__);   }#endif   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, TRUE);   /* The driver should always be initialized in STA mode after SSR */   hdd_set_conparam(0);   dev = wcnss_wlan_get_device();   if (NULL == dev)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__);      goto err_re_init;   }   /* Re-open VOSS, it is a re-open b'se control transport was never closed. */   vosStatus = vos_open(&pVosContext, dev);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }   /* Get the HDD context. */   pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);   if(!pHddCtx)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }   /* Save the hal context in Adapter */   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }   /* Set the SME configuration parameters. */   vosStatus = hdd_set_sme_config(pHddCtx);   if ( VOS_STATUS_SUCCESS != vosStatus )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }   vosStatus = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   /* Apply the cfg.ini to cfg.dat */   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   /* Set the MAC Address, currently this is used by HAL to add self sta.    * Remove this once self sta is added as part of session open. */   halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));   if (!HAL_STATUS_SUCCESS(halStatus))   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }   /* Start VOSS which starts up the SME/MAC/HAL modules and everything else      Note: Firmware image will be read and downloaded inside vos_start API */   vosStatus = vos_start( pVosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);   vosStatus = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifdef CONFIG_ENABLE_LINUX_REG   vosStatus = wlan_hdd_init_channels_for_cc(pHddCtx, REINIT);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",             __func__);      goto err_vosstop;   }#endif#ifdef WLAN_BTAMP_FEATURE   vosStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_vosstop;   }   vosStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vosStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   vosStatus = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE    /* Restart all adapters */   hdd_start_all_adapters(pHddCtx);   pHddCtx->last_scan_reject_session_id = 0;   pHddCtx->last_scan_reject_reason = 0xFF;   pHddCtx->last_scan_reject_timestamp = 0;   pHddCtx->hdd_mcastbcast_filter_set = FALSE;   pHddCtx->btCoexModeSet = FALSE;   hdd_register_mcast_bcast_filter(pHddCtx);   wlan_hdd_tdls_init(pHddCtx);   /* Register with platform driver as client for Suspend/Resume */   vosStatus = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE   if (pHddCtx->cfg_ini->wlanLoggingEnable &&               (pHddCtx->cfg_ini->enableFWLogging ||                pHddCtx->cfg_ini->enableMgmtLogging ||                pHddCtx->cfg_ini->enableContFWLogging))   {       hdd_init_frame_logging(pHddCtx);   }#endif   /* Allow the phone to go to sleep */   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);   /* register for riva power on lock */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);   sme_register_mgmt_frame_ind_callback(pHddCtx->hHal,hdd_indicate_mgmt_frame);#ifdef WLAN_FEATURE_EXTSCAN    sme_EXTScanRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_extscan_callback,                           pHddCtx);#endif /* WLAN_FEATURE_EXTSCAN */#ifdef FEATURE_OEM_DATA_SUPPORT    sme_OemDataRegisterCallback(pHddCtx->hHal,             wlan_hdd_cfg80211_oemdata_callback,                          pHddCtx);#endif /* FEATURE_OEM_DATA_SUPPORT */   goto success;err_unregister_pmops:   hddDeregisterPmOps(pHddCtx);err_bap_stop:#ifdef CONFIG_HAS_EARLYSUSPEND   hdd_unregister_mcast_bcast_filter(pHddCtx);#endif   hdd_close_all_adapters(pHddCtx);#ifdef WLAN_BTAMP_FEATURE   WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_vosstop:   vos_stop(pVosContext);err_vosclose:   if(!isSsrPanicOnFailure())   {       /* If we hit this, it means wlan driver is in bad state and needs       * driver unload and load.       */       vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_E_FAILURE;   }   vos_close(pVosContext);   vos_sched_close(pVosContext);   if (pHddCtx)   {       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);#ifdef WLAN_KD_READY_NOTIFIER       nl_srv_exit(pHddCtx->ptt_pid);#else       nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       hdd_wlan_free_wiphy_channels(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }   vos_preClose(&pVosContext);#ifdef MEMORY_DEBUG   vos_mem_exit();#endiferr_re_init:   /* Allow the phone to go to sleep */   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);   VOS_BUG(0);   return -EPERM;success:   /* Trigger replay of BTC events */   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);   return VOS_STATUS_SUCCESS;}
VOS_STATUS
VOS_STATUS
hdd_wlan_re_init(void)
hdd_wlan_re_init
void
void


{   VOS_STATUS       vosStatus;   v_CONTEXT_t      pVosContext = NULL;   hdd_context_t    *pHddCtx = NULL;   eHalStatus       halStatus;#ifdef HAVE_WCNSS_CAL_DOWNLOAD   int              max_retries = 0;#endif#ifdef HAVE_CBC_DONE   int              max_cbc_retries = 0;#endif#ifdef WLAN_BTAMP_FEATURE   hdd_config_t     *pConfig = NULL;   WLANBAP_ConfigType btAmpConfig;#endif   struct device *dev = NULL;   hdd_ssr_timer_del();   hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);#ifdef HAVE_WCNSS_CAL_DOWNLOAD   /* wait until WCNSS driver downloads NV */   while (!wcnss_device_ready() && 10 >= ++max_retries) {       msleep(1000);   }   if (max_retries >= 10) {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__);      goto err_re_init;   }#endif#ifdef HAVE_CBC_DONE   while (!wcnss_cbc_complete() && 20 >= ++max_cbc_retries) {       msleep(1000);   }   if (max_cbc_retries >= 20) {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s:CBC not completed", __func__);   }#endif   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, TRUE);   /* The driver should always be initialized in STA mode after SSR */   hdd_set_conparam(0);   dev = wcnss_wlan_get_device();   if (NULL == dev)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__);      goto err_re_init;   }   /* Re-open VOSS, it is a re-open b'se control transport was never closed. */   vosStatus = vos_open(&pVosContext, dev);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }   /* Get the HDD context. */   pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);   if(!pHddCtx)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }   /* Save the hal context in Adapter */   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }   /* Set the SME configuration parameters. */   vosStatus = hdd_set_sme_config(pHddCtx);   if ( VOS_STATUS_SUCCESS != vosStatus )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }   vosStatus = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   /* Apply the cfg.ini to cfg.dat */   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   /* Set the MAC Address, currently this is used by HAL to add self sta.    * Remove this once self sta is added as part of session open. */   halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));   if (!HAL_STATUS_SUCCESS(halStatus))   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }   /* Start VOSS which starts up the SME/MAC/HAL modules and everything else      Note: Firmware image will be read and downloaded inside vos_start API */   vosStatus = vos_start( pVosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);   vosStatus = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifdef CONFIG_ENABLE_LINUX_REG   vosStatus = wlan_hdd_init_channels_for_cc(pHddCtx, REINIT);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",             __func__);      goto err_vosstop;   }#endif#ifdef WLAN_BTAMP_FEATURE   vosStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_vosstop;   }   vosStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vosStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   vosStatus = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE    /* Restart all adapters */   hdd_start_all_adapters(pHddCtx);   pHddCtx->last_scan_reject_session_id = 0;   pHddCtx->last_scan_reject_reason = 0xFF;   pHddCtx->last_scan_reject_timestamp = 0;   pHddCtx->hdd_mcastbcast_filter_set = FALSE;   pHddCtx->btCoexModeSet = FALSE;   hdd_register_mcast_bcast_filter(pHddCtx);   wlan_hdd_tdls_init(pHddCtx);   /* Register with platform driver as client for Suspend/Resume */   vosStatus = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }#ifdef WLAN_LOGGING_SOCK_SVC_ENABLE   if (pHddCtx->cfg_ini->wlanLoggingEnable &&               (pHddCtx->cfg_ini->enableFWLogging ||                pHddCtx->cfg_ini->enableMgmtLogging ||                pHddCtx->cfg_ini->enableContFWLogging))   {       hdd_init_frame_logging(pHddCtx);   }#endif   /* Allow the phone to go to sleep */   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);   /* register for riva power on lock */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }   sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);   sme_register_mgmt_frame_ind_callback(pHddCtx->hHal,hdd_indicate_mgmt_frame);#ifdef WLAN_FEATURE_EXTSCAN    sme_EXTScanRegisterCallback(pHddCtx->hHal,            wlan_hdd_cfg80211_extscan_callback,                           pHddCtx);#endif /* WLAN_FEATURE_EXTSCAN */#ifdef FEATURE_OEM_DATA_SUPPORT    sme_OemDataRegisterCallback(pHddCtx->hHal,             wlan_hdd_cfg80211_oemdata_callback,                          pHddCtx);#endif /* FEATURE_OEM_DATA_SUPPORT */   goto success;err_unregister_pmops:   hddDeregisterPmOps(pHddCtx);err_bap_stop:#ifdef CONFIG_HAS_EARLYSUSPEND   hdd_unregister_mcast_bcast_filter(pHddCtx);#endif   hdd_close_all_adapters(pHddCtx);#ifdef WLAN_BTAMP_FEATURE   WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_vosstop:   vos_stop(pVosContext);err_vosclose:   if(!isSsrPanicOnFailure())   {       /* If we hit this, it means wlan driver is in bad state and needs       * driver unload and load.       */       vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_E_FAILURE;   }   vos_close(pVosContext);   vos_sched_close(pVosContext);   if (pHddCtx)   {       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);#ifdef WLAN_KD_READY_NOTIFIER       nl_srv_exit(pHddCtx->ptt_pid);#else       nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       hdd_wlan_free_wiphy_channels(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }   vos_preClose(&pVosContext);#ifdef MEMORY_DEBUG   vos_mem_exit();#endiferr_re_init:   /* Allow the phone to go to sleep */   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);   vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);   VOS_BUG(0);   return -EPERM;success:   /* Trigger replay of BTC events */   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);   return VOS_STATUS_SUCCESS;}
VOS_STATUS       vosStatus;
VOS_STATUS       vosStatus;
VOS_STATUS
VOS_STATUS
vosStatus
vosStatus
v_CONTEXT_t      pVosContext = NULL;
v_CONTEXT_t      pVosContext = NULL;
v_CONTEXT_t
v_CONTEXT_t
pVosContext = NULL
pVosContext
= NULL
NULL
NULL
hdd_context_t    *pHddCtx = NULL;
hdd_context_t    *pHddCtx = NULL;
hdd_context_t
hdd_context_t
*pHddCtx = NULL
*
pHddCtx
= NULL
NULL
NULL
eHalStatus       halStatus;
eHalStatus       halStatus;
eHalStatus
eHalStatus
halStatus
halStatus
struct device *dev = NULL;
struct device *dev = NULL;
struct device
device
*dev = NULL
*
dev
= NULL
NULL
NULL
hdd_ssr_timer_del();
hdd_ssr_timer_del()
hdd_ssr_timer_del
hdd_ssr_timer_del
hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
hdd_prevent_suspend
hdd_prevent_suspend
(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, TRUE);
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, TRUE)
vos_set_reinit_in_progress
vos_set_reinit_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
TRUE
TRUE
hdd_set_conparam(0);
hdd_set_conparam(0)
hdd_set_conparam
hdd_set_conparam
0
dev = wcnss_wlan_get_device();
dev = wcnss_wlan_get_device()
dev
dev
wcnss_wlan_get_device()
wcnss_wlan_get_device
wcnss_wlan_get_device
if (NULL == dev)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__);      goto err_re_init;   }
NULL == dev
NULL
NULL
dev
dev
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__);      goto err_re_init;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: wcnss dev is NULL"
__func__
__func__
goto err_re_init;
err_re_init
vosStatus = vos_open(&pVosContext, dev);
vosStatus = vos_open(&pVosContext, dev)
vosStatus
vosStatus
vos_open(&pVosContext, dev)
vos_open
vos_open
&pVosContext
pVosContext
pVosContext
dev
dev
if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }
!VOS_IS_STATUS_SUCCESS(vosStatus)
VOS_IS_STATUS_SUCCESS(vosStatus)
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_open failed"
__func__
__func__
goto err_re_init;
err_re_init
pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);
pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
pHddCtx
pHddCtx
(hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
hdd_context_t *
hdd_context_t
hdd_context_t
*
*
vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
vos_get_context
vos_get_context
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
pVosContext
pVosContext
if(!pHddCtx)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }
!pHddCtx
pHddCtx
pHddCtx
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: HDD context is Null"
__func__
__func__
goto err_vosclose;
err_vosclose
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
(tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
tHalHandle
tHalHandle
tHalHandle

vos_get_context( VOS_MODULE_ID_SME, pVosContext )
vos_get_context
vos_get_context
VOS_MODULE_ID_SME
VOS_MODULE_ID_SME
pVosContext
pVosContext
if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }
NULL == pHddCtx->hHal
NULL
NULL
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: HAL context is null"
__func__
__func__
goto err_vosclose;
err_vosclose
vosStatus = hdd_set_sme_config(pHddCtx);
vosStatus = hdd_set_sme_config(pHddCtx)
vosStatus
vosStatus
hdd_set_sme_config(pHddCtx)
hdd_set_sme_config
hdd_set_sme_config
pHddCtx
pHddCtx
if ( VOS_STATUS_SUCCESS != vosStatus )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }
VOS_STATUS_SUCCESS != vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed hdd_set_sme_config"
__func__
__func__
goto err_vosclose;
err_vosclose
vosStatus = vos_preStart( pHddCtx->pvosContext );
vosStatus = vos_preStart( pHddCtx->pvosContext )
vosStatus
vosStatus
vos_preStart( pHddCtx->pvosContext )
vos_preStart
vos_preStart
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_preStart failed"
__func__
__func__
goto err_vosclose;
err_vosclose
if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
FALSE == hdd_update_config_dat(pHddCtx)
FALSE
FALSE
hdd_update_config_dat(pHddCtx)
hdd_update_config_dat
hdd_update_config_dat
pHddCtx
pHddCtx
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: config update failed"
__func__
__func__
goto err_vosclose;
err_vosclose
halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));
halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]))
halStatus
halStatus
cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]))
cfgSetStr
cfgSetStr
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
WNI_CFG_STA_ID
WNI_CFG_STA_ID
(v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0]
v_U8_t *
v_U8_t
v_U8_t
*
*
&pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
sizeof(pHddCtx->cfg_ini->intfMacAddr[0])
(pHddCtx->cfg_ini->intfMacAddr[0])
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
if (!HAL_STATUS_SUCCESS(halStatus))   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }
!HAL_STATUS_SUCCESS(halStatus)
HAL_STATUS_SUCCESS(halStatus)
HAL_STATUS_SUCCESS
HAL_STATUS_SUCCESS
halStatus
halStatus
{      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]"
__func__
__func__
halStatus
halStatus
halStatus
halStatus
goto err_vosclose;
err_vosclose
vosStatus = vos_start( pVosContext );
vosStatus = vos_start( pVosContext )
vosStatus
vosStatus
vos_start( pVosContext )
vos_start
vos_start
pVosContext
pVosContext
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      if (isSsrPanicOnFailure())          VOS_BUG(0);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_start failed"
__func__
__func__
if (isSsrPanicOnFailure())          VOS_BUG(0);
isSsrPanicOnFailure()
isSsrPanicOnFailure
isSsrPanicOnFailure
VOS_BUG(0);
VOS_BUG(0)
VOS_BUG
VOS_BUG
0
goto err_vosclose;
err_vosclose
hdd_exchange_version_and_caps(pHddCtx);
hdd_exchange_version_and_caps(pHddCtx)
hdd_exchange_version_and_caps
hdd_exchange_version_and_caps
pHddCtx
pHddCtx
vosStatus = hdd_post_voss_start_config( pHddCtx );
vosStatus = hdd_post_voss_start_config( pHddCtx )
vosStatus
vosStatus
hdd_post_voss_start_config( pHddCtx )
hdd_post_voss_start_config
hdd_post_voss_start_config
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hdd_post_voss_start_config failed"
__func__
__func__
goto err_vosstop;
err_vosstop
hdd_start_all_adapters(pHddCtx);
hdd_start_all_adapters(pHddCtx)
hdd_start_all_adapters
hdd_start_all_adapters
pHddCtx
pHddCtx
pHddCtx->last_scan_reject_session_id = 0;
pHddCtx->last_scan_reject_session_id = 0
pHddCtx->last_scan_reject_session_id
pHddCtx
pHddCtx
last_scan_reject_session_id
0
pHddCtx->last_scan_reject_reason = 0xFF;
pHddCtx->last_scan_reject_reason = 0xFF
pHddCtx->last_scan_reject_reason
pHddCtx
pHddCtx
last_scan_reject_reason
0xFF
pHddCtx->last_scan_reject_timestamp = 0;
pHddCtx->last_scan_reject_timestamp = 0
pHddCtx->last_scan_reject_timestamp
pHddCtx
pHddCtx
last_scan_reject_timestamp
0
pHddCtx->hdd_mcastbcast_filter_set = FALSE;
pHddCtx->hdd_mcastbcast_filter_set = FALSE
pHddCtx->hdd_mcastbcast_filter_set
pHddCtx
pHddCtx
hdd_mcastbcast_filter_set
FALSE
FALSE
pHddCtx->btCoexModeSet = FALSE;
pHddCtx->btCoexModeSet = FALSE
pHddCtx->btCoexModeSet
pHddCtx
pHddCtx
btCoexModeSet
FALSE
FALSE
hdd_register_mcast_bcast_filter(pHddCtx);
hdd_register_mcast_bcast_filter(pHddCtx)
hdd_register_mcast_bcast_filter
hdd_register_mcast_bcast_filter
pHddCtx
pHddCtx
wlan_hdd_tdls_init(pHddCtx);
wlan_hdd_tdls_init(pHddCtx)
wlan_hdd_tdls_init
wlan_hdd_tdls_init
pHddCtx
pHddCtx
vosStatus = hddRegisterPmOps(pHddCtx);
vosStatus = hddRegisterPmOps(pHddCtx)
vosStatus
vosStatus
hddRegisterPmOps(pHddCtx)
hddRegisterPmOps
hddRegisterPmOps
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hddRegisterPmOps failed"
__func__
__func__
goto err_bap_stop;
err_bap_stop
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
hdd_allow_suspend
hdd_allow_suspend
WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT
if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }
req_riva_power_on_lock("wlan")
req_riva_power_on_lock
req_riva_power_on_lock
"wlan"
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: req riva power on lock failed"
__func__
__func__
goto err_unregister_pmops;
err_unregister_pmops
sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb);
sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb)
sme_set_rssi_threshold_breached_cb
sme_set_rssi_threshold_breached_cb
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
hdd_rssi_threshold_breached_cb
hdd_rssi_threshold_breached_cb
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_reinit_in_progress
vos_set_reinit_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
sme_register_mgmt_frame_ind_callback(pHddCtx->hHal,hdd_indicate_mgmt_frame);
sme_register_mgmt_frame_ind_callback(pHddCtx->hHal,hdd_indicate_mgmt_frame)
sme_register_mgmt_frame_ind_callback
sme_register_mgmt_frame_ind_callback
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
hdd_indicate_mgmt_frame
hdd_indicate_mgmt_frame
goto success;
success
err_unregister_pmops:   hddDeregisterPmOps(pHddCtx);
err_unregister_pmops
hddDeregisterPmOps(pHddCtx);
hddDeregisterPmOps(pHddCtx)
hddDeregisterPmOps
hddDeregisterPmOps
pHddCtx
pHddCtx
err_bap_stop:#ifdef CONFIG_HAS_EARLYSUSPEND   hdd_unregister_mcast_bcast_filter(pHddCtx);#endif   hdd_close_all_adapters(pHddCtx);
err_bap_stop
hdd_close_all_adapters(pHddCtx);
hdd_close_all_adapters(pHddCtx)
hdd_close_all_adapters
hdd_close_all_adapters
pHddCtx
pHddCtx
err_vosstop:   vos_stop(pVosContext);
err_vosstop
vos_stop(pVosContext);
vos_stop(pVosContext)
vos_stop
vos_stop
pVosContext
pVosContext
err_vosclose:   if(!isSsrPanicOnFailure())   {       /* If we hit this, it means wlan driver is in bad state and needs       * driver unload and load.       */       vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_E_FAILURE;   }
err_vosclose
if(!isSsrPanicOnFailure())   {       /* If we hit this, it means wlan driver is in bad state and needs       * driver unload and load.       */       vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_E_FAILURE;   }
!isSsrPanicOnFailure()
isSsrPanicOnFailure()
isSsrPanicOnFailure
isSsrPanicOnFailure
{       /* If we hit this, it means wlan driver is in bad state and needs       * driver unload and load.       */       vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);       return VOS_STATUS_E_FAILURE;   }
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_reinit_in_progress
vos_set_reinit_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
return VOS_STATUS_E_FAILURE;
VOS_STATUS_E_FAILURE
VOS_STATUS_E_FAILURE
vos_close(pVosContext);
vos_close(pVosContext)
vos_close
vos_close
pVosContext
pVosContext
vos_sched_close(pVosContext);
vos_sched_close(pVosContext)
vos_sched_close
vos_sched_close
pVosContext
pVosContext
if (pHddCtx)   {       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);#ifdef WLAN_KD_READY_NOTIFIER       nl_srv_exit(pHddCtx->ptt_pid);#else       nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       hdd_wlan_free_wiphy_channels(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }
pHddCtx
pHddCtx
{       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);#ifdef WLAN_KD_READY_NOTIFIER       nl_srv_exit(pHddCtx->ptt_pid);#else       nl_srv_exit();#endif /* WLAN_KD_READY_NOTIFIER */       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       hdd_wlan_free_wiphy_channels(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier
unregister_netdevice_notifier
(&hdd_netdev_notifier)
&hdd_netdev_notifier
&
hdd_netdev_notifier
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
send_btc_nlink_msg
send_btc_nlink_msg
WLAN_MODULE_DOWN_IND
WLAN_MODULE_DOWN_IND
0
nl_srv_exit();
nl_srv_exit()
nl_srv_exit
nl_srv_exit
kfree(pHddCtx->cfg_ini);
kfree(pHddCtx->cfg_ini)
kfree
kfree
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
pHddCtx->cfg_ini= NULL;
pHddCtx->cfg_ini= NULL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
NULL
NULL
wiphy_unregister(pHddCtx->wiphy);
wiphy_unregister(pHddCtx->wiphy)
wiphy_unregister
wiphy_unregister
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
hdd_wlan_free_wiphy_channels(pHddCtx->wiphy);
hdd_wlan_free_wiphy_channels(pHddCtx->wiphy)
hdd_wlan_free_wiphy_channels
hdd_wlan_free_wiphy_channels
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
wiphy_free(pHddCtx->wiphy);
wiphy_free(pHddCtx->wiphy)
wiphy_free
wiphy_free
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
vos_preClose(&pVosContext);
vos_preClose(&pVosContext)
vos_preClose
vos_preClose
&pVosContext
pVosContext
pVosContext
err_re_init:   /* Allow the phone to go to sleep */   hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
err_re_init
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT);
hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
hdd_allow_suspend
hdd_allow_suspend
WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT
WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE);
vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE)
vos_set_reinit_in_progress
vos_set_reinit_in_progress
VOS_MODULE_ID_VOSS
VOS_MODULE_ID_VOSS
FALSE
FALSE
VOS_BUG(0);
VOS_BUG(0)
VOS_BUG
VOS_BUG
0
return -EPERM;
-EPERM
EPERM
EPERM
success:   /* Trigger replay of BTC events */   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
success
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
send_btc_nlink_msg
send_btc_nlink_msg
WLAN_MODULE_DOWN_IND
WLAN_MODULE_DOWN_IND
0
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
-----joern-----
(502,279,0)
(160,476,0)
(490,6,0)
(191,487,0)
(103,508,0)
(21,227,0)
(354,18,0)
(216,227,0)
(388,227,0)
(442,483,0)
(236,145,0)
(244,160,0)
(217,175,0)
(95,47,0)
(331,227,0)
(501,293,0)
(194,227,0)
(120,160,0)
(291,389,0)
(112,149,0)
(153,227,0)
(46,253,0)
(460,32,0)
(99,220,0)
(115,87,0)
(254,357,0)
(387,290,0)
(266,227,0)
(272,234,0)
(427,221,0)
(2,227,0)
(180,489,0)
(267,231,0)
(302,227,0)
(268,274,0)
(412,489,0)
(434,314,0)
(371,152,0)
(142,341,0)
(431,466,0)
(156,227,0)
(13,408,0)
(279,263,0)
(422,239,0)
(479,227,0)
(185,80,0)
(512,263,0)
(137,291,0)
(209,51,0)
(252,227,0)
(385,433,0)
(421,90,0)
(173,81,0)
(223,24,0)
(222,211,0)
(463,227,0)
(281,227,0)
(462,365,0)
(75,227,0)
(379,420,0)
(9,227,0)
(510,227,0)
(420,160,0)
(233,160,0)
(346,279,0)
(343,116,0)
(524,288,0)
(64,396,0)
(405,221,0)
(195,336,0)
(54,508,0)
(506,211,0)
(237,273,0)
(413,204,0)
(384,38,0)
(492,199,0)
(348,314,0)
(123,78,0)
(256,227,0)
(324,244,0)
(328,227,0)
(386,56,0)
(71,81,0)
(40,26,0)
(429,154,0)
(425,174,0)
(502,0,0)
(79,485,0)
(468,450,0)
(207,44,0)
(86,526,0)
(498,371,0)
(502,274,0)
(312,123,0)
(113,137,0)
(294,422,0)
(91,12,0)
(470,117,0)
(10,227,0)
(291,137,0)
(138,79,0)
(14,523,0)
(472,227,0)
(480,78,0)
(283,470,0)
(31,459,0)
(253,46,0)
(396,227,0)
(433,385,0)
(466,431,0)
(107,163,0)
(106,290,0)
(476,160,0)
(211,35,0)
(181,261,0)
(225,171,0)
(137,113,0)
(463,175,0)
(250,183,0)
(44,84,0)
(72,227,0)
(361,44,0)
(488,424,0)
(374,166,0)
(409,0,0)
(477,12,0)
(61,160,0)
(10,489,0)
(59,227,0)
(414,153,0)
(509,104,0)
(433,123,0)
(389,291,0)
(504,97,0)
(83,417,0)
(64,160,0)
(122,26,0)
(341,359,0)
(204,413,0)
(89,60,0)
(511,6,0)
(43,147,0)
(2,274,0)
(337,227,0)
(309,160,0)
(476,350,0)
(492,200,0)
(382,4,0)
(96,307,0)
(344,522,0)
(235,81,0)
(305,315,0)
(192,124,0)
(371,200,0)
(346,40,0)
(477,160,0)
(251,218,0)
(97,227,0)
(230,465,0)
(51,303,0)
(199,492,0)
(280,56,0)
(130,204,0)
(300,70,0)
(314,11,0)
(489,200,0)
(15,274,0)
(470,227,0)
(280,172,0)
(461,400,0)
(396,160,0)
(437,169,0)
(38,455,0)
(430,240,0)
(188,33,0)
(3,408,0)
(292,227,0)
(315,166,0)
(330,160,0)
(350,476,0)
(119,104,0)
(42,120,0)
(232,391,0)
(111,227,0)
(444,84,0)
(447,467,0)
(87,171,0)
(62,68,0)
(346,274,0)
(473,276,0)
(24,124,0)
(307,221,0)
(362,349,0)
(91,73,0)
(287,227,0)
(481,40,0)
(239,422,0)
(392,27,0)
(85,104,0)
(290,287,0)
(505,175,0)
(22,350,0)
(417,121,0)
(519,279,0)
(309,227,0)
(80,160,0)
(183,343,0)
(134,227,0)
(269,434,0)
(377,256,0)
(179,459,0)
(360,139,0)
(14,175,0)
(16,526,0)
(139,492,0)
(233,116,0)
(474,227,0)
(182,227,0)
(220,160,0)
(422,385,0)
(158,391,0)
(273,272,0)
(149,75,0)
(336,195,0)
(50,103,0)
(523,227,0)
(484,113,0)
(310,411,0)
(82,160,0)
(346,6,0)
(20,218,0)
(467,227,0)
(397,227,0)
(426,239,0)
(520,227,0)
(32,160,0)
(63,57,0)
(186,154,0)
(128,153,0)
(200,227,0)
(494,13,0)
(525,227,0)
(327,333,0)
(293,344,0)
(282,120,0)
(299,469,0)
(248,174,0)
(503,224,0)
(206,142,0)
(189,279,0)
(53,424,0)
(32,200,0)
(391,5,0)
(497,261,0)
(443,47,0)
(428,227,0)
(241,32,0)
(272,227,0)
(440,375,0)
(28,252,0)
(204,130,0)
(288,70,0)
(363,171,0)
(418,227,0)
(355,227,0)
(265,166,0)
(389,495,0)
(336,227,0)
(82,61,0)
(56,280,0)
(176,409,0)
(499,301,0)
(493,479,0)
(258,183,0)
(40,160,0)
(45,7,0)
(8,257,0)
(159,23,0)
(515,181,0)
(364,79,0)
(402,231,0)
(181,515,0)
(516,417,0)
(357,227,0)
(297,35,0)
(304,227,0)
(104,119,0)
(241,227,0)
(229,227,0)
(166,374,0)
(400,55,0)
(526,27,0)
(332,383,0)
(346,417,0)
(6,331,0)
(358,194,0)
(153,414,0)
(502,417,0)
(279,160,0)
(232,486,0)
(92,2,0)
(55,400,0)
(326,167,0)
(165,227,0)
(436,135,0)
(172,276,0)
(415,502,0)
(224,365,0)
(12,477,0)
(393,167,0)
(214,227,0)
(4,153,0)
(439,152,0)
(11,314,0)
(492,139,0)
(400,336,0)
(413,459,0)
(438,343,0)
(276,172,0)
(366,477,0)
(2,273,0)
(152,371,0)
(329,487,0)
(321,322,0)
(42,227,0)
(404,32,0)
(81,349,0)
(453,131,0)
(521,7,0)
(69,467,0)
(464,5,0)
(295,411,0)
(277,374,0)
(80,145,0)
(459,413,0)
(342,63,0)
(340,121,0)
(97,175,0)
(66,473,0)
(246,107,0)
(119,359,0)
(200,492,0)
(322,252,0)
(24,411,0)
(12,227,0)
(345,227,0)
(486,232,0)
(284,137,0)
(522,344,0)
(5,391,0)
(147,227,0)
(343,227,0)
(495,389,0)
(172,280,0)
(502,273,0)
(346,227,0)
(25,234,0)
(502,40,0)
(102,227,0)
(205,182,0)
(228,322,0)
(203,124,0)
(352,38,0)
(399,75,0)
(30,217,0)
(260,450,0)
(132,457,0)
(136,315,0)
(105,252,0)
(240,227,0)
(160,227,0)
(170,485,0)
(152,473,0)
(82,227,0)
(121,227,0)
(231,160,0)
(39,224,0)
(88,63,0)
(434,65,0)
(92,346,0)
(52,409,0)
(308,450,0)
(376,160,0)
(218,359,0)
(152,140,0)
(353,11,0)
(98,99,0)
(371,160,0)
(198,14,0)
(259,87,0)
(319,227,0)
(201,255,0)
(482,227,0)
(125,283,0)
(134,175,0)
(239,160,0)
(391,227,0)
(256,68,0)
(449,64,0)
(11,160,0)
(263,227,0)
(338,160,0)
(346,231,0)
(208,507,0)
(187,227,0)
(429,359,0)
(369,2,0)
(150,350,0)
(317,61,0)
(178,174,0)
(311,10,0)
(249,234,0)
(435,103,0)
(306,331,0)
(335,8,0)
(394,31,0)
(2,417,0)
(285,13,0)
(117,470,0)
(74,376,0)
(368,8,0)
(104,160,0)
(298,476,0)
(213,423,0)
(124,24,0)
(416,149,0)
(373,90,0)
(301,227,0)
(33,19,0)
(196,194,0)
(168,293,0)
(148,280,0)
(127,57,0)
(177,13,0)
(64,200,0)
(310,152,0)
(154,160,0)
(367,396,0)
(212,424,0)
(118,154,0)
(459,31,0)
(61,200,0)
(77,227,0)
(169,359,0)
(523,14,0)
(378,87,0)
(278,107,0)
(78,160,0)
(23,175,0)
(133,256,0)
(143,227,0)
(116,233,0)
(175,227,0)
(385,422,0)
(454,227,0)
(219,227,0)
(154,429,0)
(451,91,0)
(2,279,0)
(26,227,0)
(65,434,0)
(29,13,0)
(94,414,0)
(475,287,0)
(135,227,0)
(78,123,0)
(393,359,0)
(90,373,0)
(129,12,0)
(318,487,0)
(398,211,0)
(184,227,0)
(401,195,0)
(164,227,0)
(117,175,0)
(41,131,0)
(403,227,0)
(522,217,0)
(116,343,0)
(407,227,0)
(193,56,0)
(489,10,0)
(6,160,0)
(275,241,0)
(2,40,0)
(109,463,0)
(286,227,0)
(140,227,0)
(339,134,0)
(476,298,0)
(58,117,0)
(370,233,0)
(31,221,0)
(166,227,0)
(61,82,0)
(262,233,0)
(293,501,0)
(234,272,0)
(315,305,0)
(162,38,0)
(2,290,0)
(381,79,0)
(458,181,0)
(247,470,0)
(487,255,0)
(264,61,0)
(174,465,0)
(32,241,0)
(489,160,0)
(135,160,0)
(276,473,0)
(457,469,0)
(151,227,0)
(411,24,0)
(37,110,0)
(195,160,0)
(411,310,0)
(496,4,0)
(46,140,0)
(390,330,0)
(432,81,0)
(385,27,0)
(8,160,0)
(155,288,0)
(145,80,0)
(261,181,0)
(502,290,0)
(48,261,0)
(500,220,0)
(351,63,0)
(231,169,0)
(1,232,0)
(473,152,0)
(131,375,0)
(515,433,0)
(197,80,0)
(344,227,0)
(313,227,0)
(274,200,0)
(220,99,0)
(303,359,0)
(238,227,0)
(522,252,0)
(68,256,0)
(77,160,0)
(243,288,0)
(124,160,0)
(301,160,0)
(350,175,0)
(257,359,0)
(372,140,0)
(147,373,0)
(406,457,0)
(296,72,0)
(120,42,0)
(303,51,0)
(395,396,0)
(356,79,0)
(5,175,0)
(347,377,0)
(36,163,0)
(283,125,0)
(478,309,0)
(380,40,0)
(502,6,0)
(456,107,0)
(410,195,0)
(47,227,0)
(183,258,0)
(491,175,0)
(167,393,0)
(396,64,0)
(252,105,0)
(320,457,0)
(417,160,0)
(80,200,0)
(513,37,0)
(414,175,0)
(144,522,0)
(18,227,0)
(67,383,0)
(314,227,0)
(92,502,0)
(215,89,0)
(433,515,0)
(471,336,0)
(217,522,0)
(17,239,0)
(152,310,0)
(271,143,0)
(423,346,0)
(126,82,0)
(2,6,0)
(23,227,0)
(514,108,0)
(161,42,0)
(330,227,0)
(123,433,0)
(420,227,0)
(445,131,0)
(383,227,0)
(526,160,0)
(274,160,0)
(142,160,0)
(51,160,0)
(226,377,0)
(100,82,0)
(323,371,0)
(27,385,0)
(374,175,0)
(419,44,0)
(450,507,0)
(93,227,0)
(441,227,0)
(517,72,0)
(448,46,0)
(101,78,0)
(270,120,0)
(143,175,0)
(346,290,0)
(68,160,0)
(518,103,0)
(141,344,0)
(341,142,0)
(257,8,0)
(113,75,0)
(79,140,0)
(346,273,0)
(424,483,0)
(56,160,0)
(157,51,0)
(76,64,0)
(261,160,0)
(316,77,0)
(473,66,0)
(27,526,0)
(114,79,0)
(140,152,0)
(221,227,0)
(4,382,0)
(290,160,0)
(376,227,0)
(190,142,0)
(210,281,0)
(446,172,0)
(34,139,0)
(7,227,0)
(73,91,0)
(234,42,0)
(37,160,0)
(139,175,0)
(242,307,0)
(245,273,0)
(202,487,0)
(146,224,0)
(452,283,0)
(325,357,0)
(373,147,0)
(289,75,0)
(315,136,1)
(232,391,1)
(145,80,1)
(25,249,1)
(139,175,1)
(422,294,1)
(207,377,1)
(336,195,1)
(153,414,1)
(471,65,1)
(34,360,1)
(149,112,1)
(174,178,1)
(274,160,1)
(346,417,1)
(80,160,1)
(154,186,1)
(97,504,1)
(22,150,1)
(198,49,1)
(75,289,1)
(431,463,1)
(522,217,1)
(125,283,1)
(51,209,1)
(18,354,1)
(502,279,1)
(23,159,1)
(36,107,1)
(133,145,1)
(372,99,1)
(430,47,1)
(379,330,1)
(325,254,1)
(493,9,1)
(395,367,1)
(322,252,1)
(385,422,1)
(92,346,1)
(377,256,1)
(291,389,1)
(346,290,1)
(279,189,1)
(63,342,1)
(64,76,1)
(38,384,1)
(41,453,1)
(134,339,1)
(48,497,1)
(280,148,1)
(334,87,1)
(105,28,1)
(46,140,1)
(78,160,1)
(343,116,1)
(488,212,1)
(221,405,1)
(103,518,1)
(522,144,1)
(301,160,1)
(108,514,1)
(32,460,1)
(431,208,1)
(226,256,1)
(524,155,1)
(197,236,1)
(400,336,1)
(97,175,1)
(431,299,1)
(209,157,1)
(1,391,1)
(46,448,1)
(330,390,1)
(511,490,1)
(230,174,1)
(217,30,1)
(72,296,1)
(444,44,1)
(248,322,1)
(346,279,1)
(381,253,1)
(519,26,1)
(514,281,1)
(124,192,1)
(521,241,1)
(183,250,1)
(389,495,1)
(497,73,1)
(420,379,1)
(195,160,1)
(117,175,1)
(249,273,1)
(123,312,1)
(68,62,1)
(500,98,1)
(61,160,1)
(502,417,1)
(127,63,1)
(215,413,1)
(498,323,1)
(417,83,1)
(74,147,1)
(380,287,1)
(307,221,1)
(79,140,1)
(11,160,1)
(10,489,1)
(506,398,1)
(489,160,1)
(468,260,1)
(126,61,1)
(114,138,1)
(267,429,1)
(247,382,1)
(502,6,1)
(473,66,1)
(442,424,1)
(357,325,1)
(233,160,1)
(431,444,1)
(458,261,1)
(268,15,1)
(85,509,1)
(502,40,1)
(118,341,1)
(294,239,1)
(53,149,1)
(223,124,1)
(499,36,1)
(152,473,1)
(131,41,1)
(252,105,1)
(2,40,1)
(423,213,1)
(346,231,1)
(107,456,1)
(371,160,1)
(296,517,1)
(96,242,1)
(269,314,1)
(236,200,1)
(99,220,1)
(61,264,1)
(27,392,1)
(58,247,1)
(140,152,1)
(431,363,1)
(493,442,1)
(369,357,1)
(212,53,1)
(176,52,1)
(512,279,1)
(473,276,1)
(231,402,1)
(515,433,1)
(394,179,1)
(4,496,1)
(141,322,1)
(5,464,1)
(149,75,1)
(392,526,1)
(351,501,1)
(284,389,1)
(476,298,1)
(371,200,1)
(210,515,1)
(27,526,1)
(32,160,1)
(44,419,1)
(434,269,1)
(446,280,1)
(311,489,1)
(112,416,1)
(2,6,1)
(367,64,1)
(120,270,1)
(329,305,1)
(431,54,1)
(386,193,1)
(147,373,1)
(32,200,1)
(211,506,1)
(402,267,1)
(310,411,1)
(502,415,1)
(484,284,1)
(495,33,1)
(56,160,1)
(348,135,1)
(2,274,1)
(432,71,1)
(449,10,1)
(122,40,1)
(344,522,1)
(54,103,1)
(277,265,1)
(459,31,1)
(246,108,1)
(339,466,1)
(40,160,1)
(352,162,1)
(82,160,1)
(61,200,1)
(130,149,1)
(288,243,1)
(109,440,1)
(88,351,1)
(51,160,1)
(513,515,1)
(387,106,1)
(321,252,1)
(154,160,1)
(347,226,1)
(385,27,1)
(172,280,1)
(192,203,1)
(178,425,1)
(434,314,1)
(104,160,1)
(314,11,1)
(467,447,1)
(89,215,1)
(502,274,1)
(502,273,1)
(293,168,1)
(129,420,1)
(20,251,1)
(399,194,1)
(254,328,1)
(278,246,1)
(6,511,1)
(206,190,1)
(489,200,1)
(182,205,1)
(162,307,1)
(64,160,1)
(68,160,1)
(318,202,1)
(406,132,1)
(453,445,1)
(353,348,1)
(479,493,1)
(415,409,1)
(293,344,1)
(243,524,1)
(8,160,1)
(204,130,1)
(328,82,1)
(289,399,1)
(188,291,1)
(183,343,1)
(303,51,1)
(493,127,1)
(383,67,1)
(358,175,1)
(273,245,1)
(33,188,1)
(274,268,1)
(419,361,1)
(414,94,1)
(373,90,1)
(86,16,1)
(234,42,1)
(2,369,1)
(280,56,1)
(374,277,1)
(493,230,1)
(290,387,1)
(437,231,1)
(242,413,1)
(477,366,1)
(235,173,1)
(79,364,1)
(49,97,1)
(491,505,1)
(477,160,1)
(342,88,1)
(363,333,1)
(480,181,1)
(16,123,1)
(71,235,1)
(259,486,1)
(424,488,1)
(17,27,1)
(5,175,1)
(144,217,1)
(222,73,1)
(481,380,1)
(457,406,1)
(404,108,1)
(411,24,1)
(244,160,1)
(396,160,1)
(134,175,1)
(123,78,1)
(30,141,1)
(350,22,1)
(106,331,1)
(398,222,1)
(50,435,1)
(417,160,1)
(323,372,1)
(201,487,1)
(186,118,1)
(241,275,1)
(429,154,1)
(462,224,1)
(420,160,1)
(10,311,1)
(390,263,1)
(42,120,1)
(234,25,1)
(138,356,1)
(466,431,1)
(37,513,1)
(431,300,1)
(168,344,1)
(489,412,1)
(160,476,1)
(80,185,1)
(400,461,1)
(426,17,1)
(100,126,1)
(346,274,1)
(496,153,1)
(382,4,1)
(263,512,1)
(297,211,1)
(24,223,1)
(504,134,1)
(272,234,1)
(179,204,1)
(2,290,1)
(464,158,1)
(283,452,1)
(332,221,1)
(312,78,1)
(305,315,1)
(412,180,1)
(346,6,1)
(78,101,1)
(81,432,1)
(202,329,1)
(401,410,1)
(109,462,1)
(200,492,1)
(121,340,1)
(285,494,1)
(451,12,1)
(354,467,1)
(460,404,1)
(135,160,1)
(87,115,1)
(501,293,1)
(502,290,1)
(146,55,1)
(364,114,1)
(461,336,1)
(271,362,1)
(148,56,1)
(516,376,1)
(55,400,1)
(189,519,1)
(4,153,1)
(487,191,1)
(233,262,1)
(8,368,1)
(330,160,1)
(324,160,1)
(143,175,1)
(80,200,1)
(135,436,1)
(515,181,1)
(218,20,1)
(257,8,1)
(377,347,1)
(136,166,1)
(492,199,1)
(173,382,1)
(371,498,1)
(23,175,1)
(92,2,1)
(152,310,1)
(91,451,1)
(503,146,1)
(309,478,1)
(335,119,1)
(220,160,1)
(452,470,1)
(224,39,1)
(413,459,1)
(439,371,1)
(316,301,1)
(260,308,1)
(463,175,1)
(363,334,1)
(393,167,1)
(470,117,1)
(456,278,1)
(411,295,1)
(271,3,1)
(2,417,1)
(431,170,1)
(435,244,1)
(52,466,1)
(77,316,1)
(37,160,1)
(142,160,1)
(158,253,1)
(155,258,1)
(258,183,1)
(475,290,1)
(13,29,1)
(326,49,1)
(413,204,1)
(433,123,1)
(113,75,1)
(346,40,1)
(152,371,1)
(7,45,1)
(490,121,1)
(306,6,1)
(167,326,1)
(361,207,1)
(523,14,1)
(366,129,1)
(82,61,1)
(409,176,1)
(414,175,1)
(239,426,1)
(2,279,1)
(90,421,1)
(261,48,1)
(478,77,1)
(232,1,1)
(181,458,1)
(195,401,1)
(338,501,1)
(290,160,1)
(271,23,1)
(476,350,1)
(205,428,1)
(139,34,1)
(128,305,1)
(31,394,1)
(180,7,1)
(98,258,1)
(217,175,1)
(256,68,1)
(463,109,1)
(124,160,1)
(104,85,1)
(113,484,1)
(495,182,1)
(447,69,1)
(396,64,1)
(132,320,1)
(276,172,1)
(64,200,1)
(172,446,1)
(421,43,1)
(24,124,1)
(2,273,1)
(341,142,1)
(376,160,1)
(175,491,1)
(11,353,1)
(368,335,1)
(69,479,1)
(9,523,1)
(115,378,1)
(445,65,1)
(287,475,1)
(208,450,1)
(245,237,1)
(416,291,1)
(161,125,1)
(191,318,1)
(14,198,1)
(65,434,1)
(244,324,1)
(26,122,1)
(331,306,1)
(376,74,1)
(350,175,1)
(346,273,1)
(77,160,1)
(109,201,1)
(526,86,1)
(170,79,1)
(295,24,1)
(101,480,1)
(198,257,1)
(492,139,1)
(40,481,1)
(262,370,1)
(283,470,1)
(346,423,1)
(39,503,1)
(448,140,1)
(116,233,1)
(203,473,1)
(213,18,1)
(76,449,1)
(307,96,1)
(281,210,1)
(3,13,1)
(518,50,1)
(405,427,1)
(270,282,1)
(275,32,1)
(340,417,1)
(282,161,1)
(169,437,1)
(237,42,1)
(438,377,1)
(12,477,1)
(443,38,1)
(56,386,1)
(45,521,1)
(308,145,1)
(15,244,1)
(251,393,1)
(333,327,1)
(210,37,1)
(62,133,1)
(137,113,1)
(526,160,1)
(109,143,1)
(422,239,1)
(190,218,1)
(384,352,1)
(240,430,1)
(433,385,1)
(119,104,1)
(28,240,1)
(220,500,1)
(427,75,1)
(291,137,1)
(92,502,1)
(279,160,1)
(317,396,1)
(181,261,1)
(228,321,1)
(299,457,1)
(509,303,1)
(250,343,1)
(360,274,1)
(117,58,1)
(159,309,1)
(95,443,1)
(177,285,1)
(239,160,1)
(374,175,1)
(47,95,1)
(264,317,1)
(166,374,1)
(29,177,1)
(31,221,1)
(83,516,1)
(436,486,1)
(486,232,1)
(396,395,1)
(150,338,1)
(193,439,1)
(443,307,1)
(43,272,1)
(194,196,1)
(185,197,1)
(425,248,1)
(14,175,1)
(309,160,1)
(320,99,1)
(196,358,1)
(450,468,1)
(494,125,1)
(73,91,1)
(143,271,1)
(428,72,1)
(522,252,1)
(440,131,1)
(265,55,1)
(327,334,1)
(391,5,1)
(517,383,1)
(410,471,1)
(253,46,1)
(142,206,1)
(82,100,1)
(231,160,1)
(91,12,1)
(316,297,1)
(261,160,1)
(94,128,1)
(241,32,1)
(67,332,1)
(362,81,1)
(356,381,1)
(315,166,1)
(130,89,1)
(120,160,1)
(322,228,1)
(301,499,1)
(157,169,1)
(370,438,1)
(6,160,1)
(378,259,1)
(300,288,1)
(148,99,2)
(139,244,2)
(389,495,2)
(502,40,2)
(134,466,2)
(334,486,2)
(278,108,2)
(305,55,2)
(92,346,2)
(371,200,2)
(82,61,2)
(140,99,2)
(350,175,2)
(466,244,2)
(446,99,2)
(129,125,2)
(185,244,2)
(280,99,2)
(492,199,2)
(180,108,2)
(447,322,2)
(211,73,2)
(235,382,2)
(464,253,2)
(143,125,2)
(372,99,2)
(331,125,2)
(100,108,2)
(269,486,2)
(86,123,2)
(299,99,2)
(346,290,2)
(356,253,2)
(157,49,2)
(2,6,2)
(344,322,2)
(31,221,2)
(104,49,2)
(526,123,2)
(243,258,2)
(479,501,2)
(77,108,2)
(109,73,2)
(346,231,2)
(8,49,2)
(431,73,2)
(24,124,2)
(344,522,2)
(309,73,2)
(37,515,2)
(317,108,2)
(346,322,2)
(371,160,2)
(69,149,2)
(502,417,2)
(18,322,2)
(272,234,2)
(308,145,2)
(9,466,2)
(479,322,2)
(463,125,2)
(195,160,2)
(395,108,2)
(382,4,2)
(515,73,2)
(11,486,2)
(377,256,2)
(477,160,2)
(282,125,2)
(493,466,2)
(352,307,2)
(160,476,2)
(130,413,2)
(103,244,2)
(480,181,2)
(55,400,2)
(271,108,2)
(431,258,2)
(45,108,2)
(240,149,2)
(136,55,2)
(2,40,2)
(493,149,2)
(80,244,2)
(61,160,2)
(433,123,2)
(49,466,2)
(10,489,2)
(10,108,2)
(26,125,2)
(396,160,2)
(466,108,2)
(346,501,2)
(79,140,2)
(7,108,2)
(145,244,2)
(79,253,2)
(342,501,2)
(316,108,2)
(431,55,2)
(14,466,2)
(502,273,2)
(473,66,2)
(502,466,2)
(440,65,2)
(343,116,2)
(267,49,2)
(509,49,2)
(277,55,2)
(208,145,2)
(252,105,2)
(431,244,2)
(293,322,2)
(113,75,2)
(244,501,2)
(232,391,2)
(287,125,2)
(152,99,2)
(262,377,2)
(466,125,2)
(423,322,2)
(291,291,2)
(301,108,2)
(322,252,2)
(501,322,2)
(466,382,2)
(109,55,2)
(142,49,2)
(374,55,2)
(247,382,2)
(409,466,2)
(233,377,2)
(473,99,2)
(415,466,2)
(176,466,2)
(217,322,2)
(486,253,2)
(109,108,2)
(273,125,2)
(353,486,2)
(305,315,2)
(40,160,2)
(18,501,2)
(261,160,2)
(476,350,2)
(291,137,2)
(515,433,2)
(431,145,2)
(447,466,2)
(106,125,2)
(476,298,2)
(309,160,2)
(241,108,2)
(39,55,2)
(186,49,2)
(6,125,2)
(379,125,2)
(456,108,2)
(466,145,2)
(64,108,2)
(147,373,2)
(297,73,2)
(6,160,2)
(437,49,2)
(213,466,2)
(438,377,2)
(354,322,2)
(152,473,2)
(142,160,2)
(338,501,2)
(411,99,2)
(310,99,2)
(279,160,2)
(50,244,2)
(239,27,2)
(392,123,2)
(64,200,2)
(124,99,2)
(159,108,2)
(500,258,2)
(252,149,2)
(43,125,2)
(458,73,2)
(333,334,2)
(404,108,2)
(481,125,2)
(406,99,2)
(489,108,2)
(432,382,2)
(18,466,2)
(422,27,2)
(42,125,2)
(17,27,2)
(203,99,2)
(385,27,2)
(234,125,2)
(390,125,2)
(77,160,2)
(200,244,2)
(323,99,2)
(459,204,2)
(32,200,2)
(16,123,2)
(20,49,2)
(248,322,2)
(114,253,2)
(166,374,2)
(463,108,2)
(351,501,2)
(387,125,2)
(276,172,2)
(188,291,2)
(478,108,2)
(97,175,2)
(46,140,2)
(3,125,2)
(116,377,2)
(364,253,2)
(117,175,2)
(87,486,2)
(502,274,2)
(413,149,2)
(61,200,2)
(376,125,2)
(396,64,2)
(368,49,2)
(293,344,2)
(2,273,2)
(377,145,2)
(360,244,2)
(324,501,2)
(283,382,2)
(354,501,2)
(2,274,2)
(250,377,2)
(168,322,2)
(393,167,2)
(514,73,2)
(434,314,2)
(490,125,2)
(519,125,2)
(473,276,2)
(448,99,2)
(389,291,2)
(46,99,2)
(246,108,2)
(320,99,2)
(90,125,2)
(463,55,2)
(294,27,2)
(222,73,2)
(94,305,2)
(316,73,2)
(526,160,2)
(431,377,2)
(109,305,2)
(61,108,2)
(431,486,2)
(413,459,2)
(99,258,2)
(431,65,2)
(431,108,2)
(312,181,2)
(284,389,2)
(2,108,2)
(475,125,2)
(470,117,2)
(329,305,2)
(65,434,2)
(493,501,2)
(433,181,2)
(328,108,2)
(288,258,2)
(463,175,2)
(376,160,2)
(170,253,2)
(391,5,2)
(466,486,2)
(232,253,2)
(309,108,2)
(119,49,2)
(213,149,2)
(336,195,2)
(127,501,2)
(315,166,2)
(285,125,2)
(291,389,2)
(307,221,2)
(478,73,2)
(431,125,2)
(121,125,2)
(152,371,2)
(346,273,2)
(143,175,2)
(411,24,2)
(357,108,2)
(275,108,2)
(290,160,2)
(279,125,2)
(48,73,2)
(471,65,2)
(260,145,2)
(477,125,2)
(82,160,2)
(444,377,2)
(74,125,2)
(95,149,2)
(423,501,2)
(145,80,2)
(82,108,2)
(239,160,2)
(85,49,2)
(295,99,2)
(118,49,2)
(92,2,2)
(346,274,2)
(410,65,2)
(215,413,2)
(433,385,2)
(166,55,2)
(134,175,2)
(37,160,2)
(502,279,2)
(125,382,2)
(449,108,2)
(195,65,2)
(141,322,2)
(138,253,2)
(315,55,2)
(426,27,2)
(443,149,2)
(218,49,2)
(192,99,2)
(4,153,2)
(484,389,2)
(105,149,2)
(116,233,2)
(435,244,2)
(263,125,2)
(1,253,2)
(58,382,2)
(479,149,2)
(91,12,2)
(466,258,2)
(493,322,2)
(420,125,2)
(524,258,2)
(83,125,2)
(128,305,2)
(398,73,2)
(80,200,2)
(204,149,2)
(108,73,2)
(68,160,2)
(15,244,2)
(394,204,2)
(226,145,2)
(69,322,2)
(25,125,2)
(80,160,2)
(265,55,2)
(280,56,2)
(228,149,2)
(425,322,2)
(181,73,2)
(369,108,2)
(494,125,2)
(2,417,2)
(139,175,2)
(143,382,2)
(137,389,2)
(431,253,2)
(253,46,2)
(154,49,2)
(88,501,2)
(132,99,2)
(153,414,2)
(498,99,2)
(193,99,2)
(146,55,2)
(303,51,2)
(109,65,2)
(370,377,2)
(513,515,2)
(18,149,2)
(330,160,2)
(13,125,2)
(244,160,2)
(23,108,2)
(56,99,2)
(44,377,2)
(396,108,2)
(40,125,2)
(76,108,2)
(290,125,2)
(89,413,2)
(489,160,2)
(384,307,2)
(237,125,2)
(5,253,2)
(453,65,2)
(466,65,2)
(81,382,2)
(177,125,2)
(459,31,2)
(162,307,2)
(24,99,2)
(257,49,2)
(251,49,2)
(470,382,2)
(492,139,2)
(423,466,2)
(231,160,2)
(479,466,2)
(27,526,2)
(335,49,2)
(431,99,2)
(467,322,2)
(5,175,2)
(487,305,2)
(4,305,2)
(135,486,2)
(212,149,2)
(123,78,2)
(400,65,2)
(488,149,2)
(98,258,2)
(65,486,2)
(78,160,2)
(201,305,2)
(311,108,2)
(523,14,2)
(307,149,2)
(204,130,2)
(271,73,2)
(361,377,2)
(511,125,2)
(2,290,2)
(310,411,2)
(23,73,2)
(274,160,2)
(423,149,2)
(147,125,2)
(130,149,2)
(183,343,2)
(318,305,2)
(143,108,2)
(341,142,2)
(350,501,2)
(137,113,2)
(436,486,2)
(300,258,2)
(178,322,2)
(463,65,2)
(391,253,2)
(36,108,2)
(414,305,2)
(71,382,2)
(363,486,2)
(181,261,2)
(460,108,2)
(467,149,2)
(99,220,2)
(143,73,2)
(73,91,2)
(340,125,2)
(512,125,2)
(462,55,2)
(516,125,2)
(362,382,2)
(346,6,2)
(101,181,2)
(253,99,2)
(68,145,2)
(301,160,2)
(209,49,2)
(523,466,2)
(442,149,2)
(417,125,2)
(386,99,2)
(457,99,2)
(2,279,2)
(23,175,2)
(158,253,2)
(91,125,2)
(169,49,2)
(52,466,2)
(153,305,2)
(109,125,2)
(31,204,2)
(55,65,2)
(413,204,2)
(179,204,2)
(400,336,2)
(213,322,2)
(420,160,2)
(64,160,2)
(367,108,2)
(96,149,2)
(259,486,2)
(347,145,2)
(385,123,2)
(14,175,2)
(34,244,2)
(346,466,2)
(56,160,2)
(463,73,2)
(402,49,2)
(424,149,2)
(413,413,2)
(120,125,2)
(160,501,2)
(191,305,2)
(417,160,2)
(115,486,2)
(257,8,2)
(461,65,2)
(346,279,2)
(314,486,2)
(463,382,2)
(220,258,2)
(189,125,2)
(161,125,2)
(172,99,2)
(54,244,2)
(336,65,2)
(126,108,2)
(495,291,2)
(518,244,2)
(173,382,2)
(197,244,2)
(466,55,2)
(489,200,2)
(204,413,2)
(271,382,2)
(133,145,2)
(322,149,2)
(107,108,2)
(233,160,2)
(348,486,2)
(346,417,2)
(354,466,2)
(339,466,2)
(327,334,2)
(258,183,2)
(330,125,2)
(231,49,2)
(200,492,2)
(496,305,2)
(366,125,2)
(499,108,2)
(346,149,2)
(502,6,2)
(167,49,2)
(63,501,2)
(431,305,2)
(434,486,2)
(190,49,2)
(249,125,2)
(32,108,2)
(159,73,2)
(29,125,2)
(468,145,2)
(213,501,2)
(272,125,2)
(152,310,2)
(466,431,2)
(124,160,2)
(466,73,2)
(223,99,2)
(281,73,2)
(30,322,2)
(11,160,2)
(236,244,2)
(466,253,2)
(62,145,2)
(385,422,2)
(12,477,2)
(210,73,2)
(321,149,2)
(450,145,2)
(354,149,2)
(109,382,2)
(371,99,2)
(53,149,2)
(119,104,2)
(521,108,2)
(69,501,2)
(503,55,2)
(154,160,2)
(467,466,2)
(207,377,2)
(224,55,2)
(264,108,2)
(326,49,2)
(268,244,2)
(234,42,2)
(150,501,2)
(501,293,2)
(522,252,2)
(466,305,2)
(314,11,2)
(506,73,2)
(92,502,2)
(51,160,2)
(274,244,2)
(346,40,2)
(217,175,2)
(341,49,2)
(381,253,2)
(183,377,2)
(429,154,2)
(430,149,2)
(172,280,2)
(97,466,2)
(69,466,2)
(104,160,2)
(198,466,2)
(451,125,2)
(463,305,2)
(245,125,2)
(270,125,2)
(522,217,2)
(421,125,2)
(414,175,2)
(325,108,2)
(382,305,2)
(28,149,2)
(492,244,2)
(122,125,2)
(401,65,2)
(447,501,2)
(125,283,2)
(135,160,2)
(393,49,2)
(380,125,2)
(41,65,2)
(445,65,2)
(206,49,2)
(343,377,2)
(497,73,2)
(8,160,2)
(22,501,2)
(256,145,2)
(73,125,2)
(466,377,2)
(276,99,2)
(42,120,2)
(51,49,2)
(378,486,2)
(271,125,2)
(429,49,2)
(254,108,2)
(77,73,2)
(140,152,2)
(33,291,2)
(452,382,2)
(467,501,2)
(373,125,2)
(306,125,2)
(261,73,2)
(504,466,2)
(502,290,2)
(466,99,2)
(419,377,2)
(373,90,2)
(117,382,2)
(27,123,2)
(431,382,2)
(486,232,2)
(476,501,2)
(258,377,2)
(155,258,2)
(123,181,2)
(241,32,2)
(303,49,2)
(38,307,2)
(47,149,2)
(230,322,2)
(412,108,2)
(220,160,2)
(174,322,2)
(242,149,2)
(120,160,2)
(283,470,2)
(439,99,2)
(422,239,2)
(515,181,2)
(12,125,2)
(32,160,2)
(144,322,2)
(522,322,2)
(149,75,2)
(113,389,2)
(78,181,2)
(202,305,2)
(447,149,2)
(131,65,2)
(374,175,2)
(256,68,2)
-----------------------------------
(0,)
(1,vosStatus)
(2,return VOS_STATUS_SUCCESS;)
(3,goto err_bap_close;)
(4,VOS_IS_STATUS_SUCCESS(vosStatus)
(5,vos_start( pVosContext )
(6,pHddCtx->last_scan_reject_reason)
(7,vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(8,pHddCtx->wiphy)
(9,vos_mem_exit()
(10,sme_register_mgmt_frame_ind_callback(pHddCtx->hHal,hdd_indicate_mgmt_frame)
(11,hdd_post_voss_start_config( pHddCtx )
(12,vosStatus = hddRegisterPmOps(pHddCtx)
(13,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n               "%s: Failed to start TL",__func__)
(14,&pVosContext)
(15,pHddCtx)
(16,pHddCtx)
(17,pHddCtx)
(18,VOS_BUG(0)
(19,)
(20,0)
(21,dev)
(22,pVosContext)
(23,WLANBAP_Stop(pVosContext)
(24,pHddCtx->cfg_ini->intfMacAddr)
(25,preferredChannel)
(26,pHddCtx->hdd_mcastbcast_filter_set = FALSE)
(27,pHddCtx->cfg_ini->enableMgmtLogging)
(28,dev)
(29,__func__)
(30,pVosContext)
(31,++max_cbc_retries)
(32,pHddCtx->hHal)
(33,msleep(1000)
(34,pVosContext)
(35,)
(36,goto err_unregister_pmops;)
(37,hdd_init_frame_logging(pHddCtx)
(38,hddLog(VOS_TRACE_LEVEL_FATAL, "%s:CBC not completed", __func__)
(39,__func__)
(40,pHddCtx->hdd_mcastbcast_filter_set)
(41,__func__)
(42,pConfig = pHddCtx->cfg_ini)
(43,vosStatus)
(44,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__)
(45,FALSE)
(46,HAL_STATUS_SUCCESS(halStatus)
(47,vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, TRUE)
(48,cfg_ini)
(49,pHddCtx)
(50,"%s: HDD context is Null")
(51,pHddCtx->wiphy)
(52,VOS_MODULE_ID_VOSS)
(53,VOS_TRACE_LEVEL_FATAL)
(54,goto err_vosclose;)
(55,!VOS_IS_STATUS_SUCCESS( vosStatus )
(56,pHddCtx->cfg_ini)
(57,)
(58,pVosContext)
(59,if (!VOS_IS_STATUS_SUCCESS(vosStatus)
(60,)
(61,pHddCtx->hHal)
(62,pHddCtx)
(63,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__)
(64,pHddCtx->hHal)
(65,!VOS_IS_STATUS_SUCCESS( vosStatus )
(66,v_U8_t *)
(67,NULL)
(68,hdd_set_sme_config(pHddCtx)
(69,VOS_MODULE_ID_VOSS)
(70,)
(71,"%s: Failed to Init BSL")
(72,*dev = NULL)
(73,!VOS_IS_STATUS_SUCCESS( vosStatus )
(74,pHddCtx)
(75,max_retries = 0)
(76,hHal)
(77,hdd_unregister_mcast_bcast_filter(pHddCtx)
(78,pHddCtx->cfg_ini)
(79,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "\n\\n            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus)
(80,pHddCtx->hHal)
(81,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to Init BSL",__func__)
(82,sme_OemDataRegisterCallback(pHddCtx->hHal,\n\\n             wlan_hdd_cfg80211_oemdata_callback,\n\\n                          pHddCtx)
(83,last_scan_reject_session_id)
(84,)
(85,wiphy)
(86,cfg_ini)
(87,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
(88,"%s: vos_open failed")
(89,msleep(1000)
(90,&btAmpConfig)
(91,VOS_IS_STATUS_SUCCESS( vosStatus )
(92,RET)
(93,if (!VOS_IS_STATUS_SUCCESS(vosStatus)
(94,pVosContext)
(95,TRUE)
(96,20)
(97,vos_sched_close(pVosContext)
(98,FALSE)
(99,FALSE == hdd_update_config_dat(pHddCtx)
(100,pHddCtx)
(101,cfg_ini)
(102,err_bap_stop:)
(103,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__)
(104,pHddCtx->wiphy)
(105,wcnss_wlan_get_device()
(106,pHddCtx)
(107,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",\n\\n                                        __func__)
(108,req_riva_power_on_lock("wlan")
(109,pVosContext)
(110,)
(111,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(112,10)
(113,++max_retries)
(114,halStatus)
(115,__func__)
(116,vos_preStart( pHddCtx->pvosContext )
(117,WLANBAP_Start(pVosContext)
(118,pHddCtx)
(119,hdd_wlan_free_wiphy_channels(pHddCtx->wiphy)
(120,pHddCtx->cfg_ini)
(121,pHddCtx->last_scan_reject_session_id = 0)
(122,FALSE)
(123,pHddCtx->cfg_ini->enableFWLogging)
(124,pHddCtx->cfg_ini)
(125,!VOS_IS_STATUS_SUCCESS(vosStatus)
(126,wlan_hdd_cfg80211_oemdata_callback)
(127,goto err_re_init;)
(128,vosStatus)
(129,vosStatus)
(130,wcnss_cbc_complete()
(131,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",\n\\n         __func__)
(132,"%s: config update failed")
(133,vosStatus)
(134,vos_close(pVosContext)
(135,hdd_exchange_version_and_caps(pHddCtx)
(136,vosStatus)
(137,10 >= ++max_retries)
(138,__func__)
(139,vos_get_context( VOS_MODULE_ID_SME, pVosContext )
(140,halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n         (v_U8_t *)
(141,vosStatus)
(142,pHddCtx->ptt_pid)
(143,WLANBAP_Close(pVosContext)
(144,dev)
(145,NULL == pHddCtx->hHal)
(146,VOS_TRACE_LEVEL_FATAL)
(147,vosStatus = WLANBAP_SetConfig(&btAmpConfig)
(148,intfMacAddr)
(149,max_retries >= 10)
(150,VOS_MODULE_ID_HDD)
(151,if(!isSsrPanicOnFailure()
(152,cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n         (v_U8_t *)
(153,vosStatus = BSL_Init(pVosContext)
(154,pHddCtx->cfg_ini)
(155,VOS_TRACE_LEVEL_FATAL)
(156,halStatus)
(157,pHddCtx)
(158,vosStatus)
(159,pVosContext)
(160,pHddCtx = (hdd_context_t *)
(161,pConfig)
(162,VOS_TRACE_LEVEL_FATAL)
(163,)
(164,success:)
(165,if (max_retries >= 10)
(166,vosStatus = WLANBAP_Open(pVosContext)
(167,&hdd_netdev_notifier)
(168,vosStatus)
(169,pHddCtx->cfg_ini= NULL)
(170,goto err_vosclose;)
(171,)
(172,pHddCtx->cfg_ini->intfMacAddr[0])
(173,VOS_MODULE_ID_VOSS)
(174,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: wcnss dev is NULL",__func__)
(175,pVosContext = NULL)
(176,FALSE)
(177,"%s: Failed to start TL")
(178,__func__)
(179,20)
(180,pHddCtx)
(181,pHddCtx->cfg_ini->wlanLoggingEnable)
(182,hdd_prevent_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
(183,VOS_IS_STATUS_SUCCESS( vosStatus )
(184,btAmpConfig)
(185,hHal)
(186,cfg_ini)
(187,if (pHddCtx)
(188,1000)
(189,btCoexModeSet)
(190,pHddCtx)
(191,__func__)
(192,cfg_ini)
(193,pHddCtx)
(194,*pHddCtx = NULL)
(195,wlan_hdd_init_channels_for_cc(pHddCtx, REINIT)
(196,NULL)
(197,pHddCtx)
(198,pVosContext)
(199,tHalHandle)
(200,pHddCtx->hHal = (tHalHandle)
(201,goto err_vosstop;)
(202,VOS_TRACE_LEVEL_ERROR)
(203,pHddCtx)
(204,!wcnss_cbc_complete()
(205,WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
(206,ptt_pid)
(207,VOS_TRACE_LEVEL_FATAL)
(208,goto err_vosclose;)
(209,wiphy)
(210,WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
(211,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
(212,"%s: WCNSS driver not ready")
(213,EPERM)
(214,pHddCtx)
(215,1000)
(216,max_cbc_retries)
(217,&pVosContext)
(218,send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
(219,while (!wcnss_cbc_complete()
(220,hdd_update_config_dat(pHddCtx)
(221,max_cbc_retries = 0)
(222,VOS_TRACE_LEVEL_FATAL)
(223,intfMacAddr)
(224,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: wlan_hdd_init_channels_for_cc failed",\n\\n             __func__)
(225,if (isSsrPanicOnFailure()
(226,VOS_STATUS_SUCCESS)
(227,)
(228,dev)
(229,err_vosstop:)
(230,goto err_re_init;)
(231,pHddCtx->cfg_ini)
(232,VOS_IS_STATUS_SUCCESS( vosStatus )
(233,pHddCtx->pvosContext)
(234,pConfig->preferredChannel)
(235,VOS_TRACE_LEVEL_ERROR)
(236,NULL)
(237,btAmpConfig)
(238,if (FALSE == hdd_update_config_dat(pHddCtx)
(239,pHddCtx->cfg_ini)
(240,hdd_set_conparam(0)
(241,sme_set_rssi_threshold_breached_cb(pHddCtx->hHal, hdd_rssi_threshold_breached_cb)
(242,max_cbc_retries)
(243,__func__)
(244,!pHddCtx)
(245,ucPreferredChannel)
(246,VOS_TRACE_LEVEL_FATAL)
(247,vosStatus)
(248,VOS_TRACE_LEVEL_FATAL)
(249,pConfig)
(250,vosStatus)
(251,WLAN_MODULE_DOWN_IND)
(252,dev = wcnss_wlan_get_device()
(253,!HAL_STATUS_SUCCESS(halStatus)
(254,WLAN_MODULE_DOWN_IND)
(255,)
(256,vosStatus = hdd_set_sme_config(pHddCtx)
(257,wiphy_free(pHddCtx->wiphy)
(258,!VOS_IS_STATUS_SUCCESS( vosStatus )
(259,VOS_TRACE_LEVEL_FATAL)
(260,"%s: HAL context is null")
(261,pHddCtx->cfg_ini)
(262,pvosContext)
(263,pHddCtx->btCoexModeSet = FALSE)
(264,hHal)
(265,vosStatus)
(266,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(267,pHddCtx)
(268,hHal)
(269,vosStatus)
(270,cfg_ini)
(271,pVosContext)
(272,btAmpConfig.ucPreferredChannel = pConfig->preferredChannel)
(273,btAmpConfig.ucPreferredChannel)
(274,pHddCtx->hHal)
(275,hdd_rssi_threshold_breached_cb)
(276,&pHddCtx->cfg_ini->intfMacAddr[0])
(277,pVosContext)
(278,"%s: req riva power on lock failed")
(279,pHddCtx->btCoexModeSet)
(280,pHddCtx->cfg_ini->intfMacAddr)
(281,hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
(282,pHddCtx)
(283,VOS_IS_STATUS_SUCCESS(vosStatus)
(284,10)
(285,VOS_TRACE_LEVEL_ERROR)
(286,if (req_riva_power_on_lock("wlan")
(287,pHddCtx->last_scan_reject_timestamp = 0)
(288,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__)
(289,0)
(290,pHddCtx->last_scan_reject_timestamp)
(291,!wcnss_device_ready()
(292,err_re_init:)
(293,VOS_IS_STATUS_SUCCESS(vosStatus)
(294,enableContFWLogging)
(295,0)
(296,NULL)
(297,goto err_bap_stop;)
(298,hdd_context_t *)
(299,goto err_vosclose;)
(300,goto err_vosclose;)
(301,hddDeregisterPmOps(pHddCtx)
(302,if ( VOS_STATUS_SUCCESS != vosStatus )
(303,wiphy_unregister(pHddCtx->wiphy)
(304,if(!VOS_IS_STATUS_SUCCESS(vosStatus)
(305,!VOS_IS_STATUS_SUCCESS(vosStatus)
(306,0xFF)
(307,max_cbc_retries >= 20)
(308,VOS_TRACE_LEVEL_FATAL)
(309,hdd_close_all_adapters(pHddCtx)
(310,sizeof(pHddCtx->cfg_ini->intfMacAddr[0])
(311,hdd_indicate_mgmt_frame)
(312,enableFWLogging)
(313,err_unregister_pmops:)
(314,vosStatus = hdd_post_voss_start_config( pHddCtx )
(315,VOS_IS_STATUS_SUCCESS(vosStatus)
(316,pHddCtx)
(317,pHddCtx)
(318,"%s: Failed to open BAP")
(319,pVosContext)
(320,VOS_TRACE_LEVEL_FATAL)
(321,NULL)
(322,NULL == dev)
(323,pHddCtx)
(324,pHddCtx)
(325,0)
(326,hdd_netdev_notifier)
(327,0)
(328,goto success;)
(329,VOS_MODULE_ID_VOSS)
(330,hdd_register_mcast_bcast_filter(pHddCtx)
(331,pHddCtx->last_scan_reject_reason = 0xFF)
(332,pConfig)
(333,VOS_BUG(0)
(334,isSsrPanicOnFailure()
(335,pHddCtx)
(336,vosStatus = wlan_hdd_init_channels_for_cc(pHddCtx, REINIT)
(337,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(338,pHddCtx)
(339,pVosContext)
(340,0)
(341,nl_srv_exit(pHddCtx->ptt_pid)
(342,__func__)
(343,vosStatus = vos_preStart( pHddCtx->pvosContext )
(344,vosStatus = vos_open(&pVosContext, dev)
(345,if (NULL == dev)
(346,return -EPERM;)
(347,vosStatus)
(348,vosStatus)
(349,)
(350,vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
(351,VOS_TRACE_LEVEL_FATAL)
(352,"%s:CBC not completed")
(353,pHddCtx)
(354,0)
(355,if ( NULL == pHddCtx->hHal )
(356,"%s: Failed to set MAC Address. "\n\\n            "HALStatus is %08d [x%08x]")
(357,send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
(358,pHddCtx)
(359,)
(360,VOS_MODULE_ID_SME)
(361,"%s: Failed hdd_set_sme_config")
(362,goto err_bap_close;)
(363,goto err_vosclose;)
(364,halStatus)
(365,)
(366,pHddCtx)
(367,wlan_hdd_cfg80211_extscan_callback)
(368,wiphy)
(369,VOS_STATUS_SUCCESS)
(370,pHddCtx)
(371,pHddCtx->hHal)
(372,halStatus)
(373,WLANBAP_SetConfig(&btAmpConfig)
(374,WLANBAP_Open(pVosContext)
(375,)
(376,hdd_start_all_adapters(pHddCtx)
(377,VOS_STATUS_SUCCESS != vosStatus)
(378,"%s: vos_start failed")
(379,pHddCtx)
(380,pHddCtx)
(381,VOS_TRACE_LEVEL_ERROR)
(382,!VOS_IS_STATUS_SUCCESS(vosStatus)
(383,*pConfig = NULL)
(384,__func__)
(385,pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging)
(386,cfg_ini)
(387,last_scan_reject_timestamp)
(388,if (max_cbc_retries >= 20)
(389,!wcnss_device_ready()
(390,pHddCtx)
(391,vosStatus = vos_start( pVosContext )
(392,enableMgmtLogging)
(393,unregister_netdevice_notifier(&hdd_netdev_notifier)
(394,max_cbc_retries)
(395,pHddCtx)
(396,sme_EXTScanRegisterCallback(pHddCtx->hHal,\n\\n            wlan_hdd_cfg80211_extscan_callback,\n\\n                           pHddCtx)
(397,pConfig)
(398,"%s: hddRegisterPmOps failed")
(399,max_retries)
(400,VOS_IS_STATUS_SUCCESS( vosStatus )
(401,REINIT)
(402,cfg_ini)
(403,if(!pHddCtx)
(404,pHddCtx)
(405,0)
(406,__func__)
(407,err_vosclose:)
(408,)
(409,vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(410,pHddCtx)
(411,pHddCtx->cfg_ini->intfMacAddr[0])
(412,hHal)
(413,!wcnss_cbc_complete()
(414,BSL_Init(pVosContext)
(415,VOS_STATUS_E_FAILURE)
(416,max_retries)
(417,pHddCtx->last_scan_reject_session_id)
(418,if (pHddCtx->cfg_ini->wlanLoggingEnable &&\n\\n               (pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging)
(419,__func__)
(420,wlan_hdd_tdls_init(pHddCtx)
(421,btAmpConfig)
(422,pHddCtx->cfg_ini->enableContFWLogging)
(423,-EPERM)
(424,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__)
(425,"%s: wcnss dev is NULL")
(426,cfg_ini)
(427,max_cbc_retries)
(428,hdd_ssr_timer_del()
(429,kfree(pHddCtx->cfg_ini)
(430,0)
(431,isSsrPanicOnFailure()
(432,__func__)
(433,pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging)
(434,VOS_IS_STATUS_SUCCESS( vosStatus )
(435,VOS_TRACE_LEVEL_FATAL)
(436,pHddCtx)
(437,NULL)
(438,vosStatus)
(439,WNI_CFG_STA_ID)
(440,goto err_vosstop;)
(441,if(!VOS_IS_STATUS_SUCCESS(vosStatus)
(442,goto err_re_init;)
(443,VOS_MODULE_ID_VOSS)
(444,goto err_vosclose;)
(445,VOS_TRACE_LEVEL_FATAL)
(446,0)
(447,FALSE)
(448,halStatus)
(449,pHddCtx)
(450,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__)
(451,vosStatus)
(452,vosStatus)
(453,"%s: hdd_post_voss_start_config failed")
(454,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(455,)
(456,__func__)
(457,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
(458,wlanLoggingEnable)
(459,20 >= ++max_cbc_retries)
(460,hHal)
(461,vosStatus)
(462,goto err_vosstop;)
(463,vos_stop(pVosContext)
(464,pVosContext)
(465,)
(466,!isSsrPanicOnFailure()
(467,vos_set_reinit_in_progress(VOS_MODULE_ID_VOSS, FALSE)
(468,__func__)
(469,)
(470,vosStatus = WLANBAP_Start(pVosContext)
(471,vosStatus)
(472,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(473,(v_U8_t *)
(474,err_bap_close:)
(475,0)
(476,(hdd_context_t *)
(477,hddRegisterPmOps(pHddCtx)
(478,pHddCtx)
(479,hdd_allow_suspend(WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
(480,pHddCtx)
(481,hdd_mcastbcast_filter_set)
(482,max_retries)
(483,)
(484,max_retries)
(485,)
(486,!VOS_IS_STATUS_SUCCESS( vosStatus )
(487,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to open BAP",__func__)
(488,__func__)
(489,pHddCtx->hHal)
(490,pHddCtx)
(491,NULL)
(492,(tHalHandle)
(493,WIFI_POWER_EVENT_WAKELOCK_DRIVER_REINIT)
(494,VOS_MODULE_ID_VOSS)
(495,wcnss_device_ready()
(496,vosStatus)
(497,pHddCtx)
(498,hHal)
(499,pHddCtx)
(500,pHddCtx)
(501,!VOS_IS_STATUS_SUCCESS(vosStatus)
(502,return VOS_STATUS_E_FAILURE;)
(503,"%s: wlan_hdd_init_channels_for_cc failed")
(504,pVosContext)
(505,pVosContext)
(506,__func__)
(507,)
(508,)
(509,pHddCtx)
(510,if (!HAL_STATUS_SUCCESS(halStatus)
(511,last_scan_reject_reason)
(512,FALSE)
(513,pHddCtx)
(514,"wlan")
(515,pHddCtx->cfg_ini->wlanLoggingEnable &&\n\\n               (pHddCtx->cfg_ini->enableFWLogging ||\n\\n                pHddCtx->cfg_ini->enableMgmtLogging ||\n\\n                pHddCtx->cfg_ini->enableContFWLogging)
(516,pHddCtx)
(517,dev)
(518,__func__)
(519,pHddCtx)
(520,vosStatus)
(521,VOS_MODULE_ID_VOSS)
(522,vos_open(&pVosContext, dev)
(523,vos_preClose(&pVosContext)
(524,"%s: vos_preStart failed")
(525,while (!wcnss_device_ready()
(526,pHddCtx->cfg_ini)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^