-----label-----
1
-----code-----
static int __wlan_hdd_cfg80211_connect( struct wiphy *wiphy,
                                      struct net_device *ndev,
                                      struct cfg80211_connect_params *req
                                      )
{
    int status;
    u16 channel;
#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 15, 0)) || \
             defined(CFG80211_BSSID_HINT_BACKPORT)
    const u8 *bssid_hint = req->bssid_hint;
#else
    const u8 *bssid_hint = NULL;
#endif
    hdd_adapter_t *pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev );
    VOS_STATUS exitbmpsStatus = VOS_STATUS_E_INVAL;
    hdd_context_t *pHddCtx = NULL;

    ENTER();

    MTRACE(vos_trace(VOS_MODULE_ID_HDD,
                     TRACE_CODE_HDD_CFG80211_CONNECT,
                      pAdapter->sessionId, pAdapter->device_mode));
    hddLog(VOS_TRACE_LEVEL_INFO,
           "%s: device_mode = %s (%d)", __func__,
           hdd_device_modetoString(pAdapter->device_mode),
                                   pAdapter->device_mode);

    pHddCtx = WLAN_HDD_GET_CTX(pAdapter);
    if (!pHddCtx)
    {
        VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,
                  "%s: HDD context is null", __func__);
        return -EINVAL;
    }

    status = wlan_hdd_validate_context(pHddCtx);
    if (0 != status)
    {
        return status;
    }

    status = wlan_hdd_reassoc_bssid_hint(pAdapter, req);
    if (0 == status)
        return status;


#ifdef WLAN_BTAMP_FEATURE
    //Infra connect not supported when AMP traffic is on.
    if( VOS_TRUE == WLANBAP_AmpSessionOn() )
    {
        hddLog(VOS_TRACE_LEVEL_ERROR,
                "%s: No connection when AMP is on", __func__);
        return -ECONNREFUSED;
    }
#endif

    //If Device Mode is Station Concurrent Sessions Exit BMps
    //P2P Mode will be taken care in Open/close adapter
    if((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&
        (vos_concurrent_open_sessions_running())) {
        exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,
                                               WLAN_HDD_INFRA_STATION);
    }

    /*Try disconnecting if already in connected state*/
    status = wlan_hdd_try_disconnect(pAdapter);
    if ( 0 > status)
    {
        hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"
                " connection"));
        return -EALREADY;
    }
    /* Check for max concurrent connections after doing disconnect if any*/
    if (vos_max_concurrent_connections_reached()) {
        hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"));
        return -ECONNREFUSED;
    }

    /*initialise security parameters*/
    status = wlan_hdd_cfg80211_set_privacy(pAdapter, req);

    if ( 0 > status)
    {
        hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",
                __func__);
        return status;
    }

    if (pHddCtx->spoofMacAddr.isEnabled)
    {
        hddLog(VOS_TRACE_LEVEL_INFO,
                        "%s: MAC Spoofing enabled ", __func__);
        /* Updating SelfSta Mac Addr in TL which will be used to get staidx
         * to fill TxBds for probe request during SSID scan which may happen
         * as part of connect command
         */
        status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,
            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent);
        if (status != VOS_STATUS_SUCCESS)
            return -ECONNREFUSED;
    }

    if (req->channel)
        channel = req->channel->hw_value;
    else
        channel = 0;

    /* Abort if any scan is going on */
    status = wlan_hdd_scan_abort(pAdapter);
    if (0 != status)
        hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed"));

    status = wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,
                                             req->ssid_len, req->bssid,
                                             bssid_hint, channel);

    if (0 != status)
    {
        //ReEnable BMPS if disabled
        if((VOS_STATUS_SUCCESS == exitbmpsStatus) &&
            (NULL != pHddCtx))
        {
            if (pHddCtx->hdd_wlan_suspended)
            {
                hdd_set_pwrparams(pHddCtx);
            }
           //ReEnable Bmps and Imps back
           hdd_enable_bmps_imps(pHddCtx);
        }
        hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"));
        return status;
    }
    pHddCtx->isAmpAllowed = VOS_FALSE;
    EXIT();
    return status;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
23,39
23,40
23,41
23,42
23,43
23,44
23,45
23,46
23,47
23,48
23,49
23,50
23,51
23,52
23,53
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
64,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
71,74
74,75
75,76
77,78
78,79
79,80
81,82
82,83
82,84
83,84
85,86
85,87
85,88
85,89
85,90
86,87
88,89
90,91
92,93
92,94
93,94
96,97
96,98
97,98
100,101
101,102
101,103
101,104
101,105
101,106
101,107
102,103
104,105
107,108
109,110
109,111
110,111
112,113
112,114
113,114
116,117
116,118
117,118
120,121
121,122
121,123
122,123
124,125
124,126
125,126
127,128
129,130
129,131
130,131
131,132
133,134
133,135
134,135
135,136
135,137
135,138
135,139
135,140
136,137
138,139
140,141
143,144
145,146
146,147
147,148
149,150
150,151
150,152
151,152
153,154
153,155
154,155
156,157
158,159
158,160
159,160
159,161
161,162
163,164
164,165
165,166
167,168
168,169
168,170
169,170
171,172
171,173
171,174
172,173
174,175
176,177
178,179
178,180
179,180
179,181
181,182
183,184
184,185
186,187
186,188
187,188
187,189
188,189
189,190
189,191
190,191
192,193
192,194
193,194
196,197
197,198
198,199
200,201
201,202
202,203
202,204
203,204
205,206
205,207
205,208
206,207
208,209
210,211
212,213
213,214
213,215
214,215
216,217
216,218
217,218
219,220
221,222
221,223
222,223
222,224
224,225
226,227
226,228
227,228
228,229
228,230
228,231
229,230
231,232
233,234
233,235
234,235
237,238
238,239
239,240
241,242
241,243
242,243
243,244
245,246
245,247
246,247
247,248
247,249
247,250
248,249
250,251
252,253
252,254
253,254
256,257
257,258
258,259
260,261
261,262
261,263
262,263
264,265
264,266
264,267
265,266
267,268
269,270
271,272
271,273
272,273
272,274
274,275
276,277
276,278
277,278
278,279
278,280
278,281
278,282
279,280
281,282
284,285
286,287
287,288
289,290
289,291
290,291
290,292
291,292
291,293
292,293
296,297
296,298
296,299
297,298
298,299
298,300
298,301
298,302
299,300
301,302
304,305
306,307
307,308
307,309
308,309
310,311
310,312
310,313
310,314
311,312
313,314
313,315
314,315
317,318
318,319
318,320
319,320
319,321
320,321
324,325
325,326
325,327
326,327
329,330
329,331
330,331
330,332
331,332
333,334
335,336
336,337
337,338
339,340
339,341
339,342
340,341
340,342
341,342
344,345
345,346
345,347
346,347
348,349
348,350
349,350
349,351
350,351
354,355
355,356
355,357
356,357
359,360
360,361
360,362
361,362
363,364
363,365
364,365
366,367
368,369
368,370
369,370
369,371
371,372
373,374
374,375
374,376
374,377
375,376
377,378
379,380
379,381
380,381
383,384
384,385
384,386
385,386
387,388
387,389
387,390
387,391
387,392
387,393
387,394
388,389
390,391
392,393
392,394
393,394
396,397
396,398
397,398
400,401
400,402
401,402
404,405
406,407
408,409
408,410
409,410
409,411
411,412
413,414
413,415
413,416
414,415
414,416
415,416
415,417
416,417
417,418
417,419
418,419
420,421
422,423
423,424
423,425
424,425
426,427
428,429
428,430
429,430
429,431
430,431
430,432
431,432
434,435
435,436
436,437
436,438
437,438
439,440
441,442
442,443
442,444
443,444
445,446
447,448
448,449
448,450
448,451
449,450
451,452
453,454
453,455
454,455
457,458
458,459
460,461
461,462
461,463
462,463
462,464
463,464
466,467
468,469
469,470
470,471
472,473
473,474
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,26,28,32,34,38,40,41,44,48,50,51,55,57,61,63,66,70,72,73,76,80,84,87,89,91,94,95,98,99,103,105,106,108,111,114,115,118,119,123,126,128,132,137,139,141,142,144,148,152,155,157,160,162,166,170,173,175,177,180,182,185,191,194,195,199,204,207,209,211,215,218,220,223,225,230,232,235,236,240,244,249,251,254,255,259,263,266,268,270,273,275,280,282,283,285,288,293,294,295,300,302,303,305,309,312,315,316,321,322,323,327,328,332,334,338,342,343,347,351,352,353,357,358,362,365,367,370,372,376,378,381,382,386,389,391,394,395,398,399,402,403,405,407,410,412,419,421,425,427,432,433,438,440,444,446,450,452,455,456,459,464,465,467,471,474
-----computeFrom-----
121,122
121,123
150,151
150,152
159,160
159,161
168,169
168,170
179,180
179,181
187,188
187,189
189,190
189,191
202,203
202,204
213,214
213,215
222,223
222,224
261,262
261,263
272,273
272,274
307,308
307,309
330,331
330,332
345,346
345,347
355,356
355,357
360,361
360,362
369,370
369,371
384,385
384,386
409,410
409,411
415,416
415,417
417,418
417,419
423,424
423,425
461,462
461,463
-----guardedBy-----
162,166
182,185
191,211
275,288
412,459
427,446
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int __wlan_hdd_cfg80211_connect( struct wiphy *wiphy,                                      struct net_device *ndev,                                      struct cfg80211_connect_params *req                                      ){    int status;    u16 channel;#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 15, 0)) || \             defined(CFG80211_BSSID_HINT_BACKPORT)    const u8 *bssid_hint = req->bssid_hint;#else    const u8 *bssid_hint = NULL;#endif    hdd_adapter_t *pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev );    VOS_STATUS exitbmpsStatus = VOS_STATUS_E_INVAL;    hdd_context_t *pHddCtx = NULL;    ENTER();    MTRACE(vos_trace(VOS_MODULE_ID_HDD,                     TRACE_CODE_HDD_CFG80211_CONNECT,                      pAdapter->sessionId, pAdapter->device_mode));    hddLog(VOS_TRACE_LEVEL_INFO,           "%s: device_mode = %s (%d)", __func__,           hdd_device_modetoString(pAdapter->device_mode),                                   pAdapter->device_mode);    pHddCtx = WLAN_HDD_GET_CTX(pAdapter);    if (!pHddCtx)    {        VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                  "%s: HDD context is null", __func__);        return -EINVAL;    }    status = wlan_hdd_validate_context(pHddCtx);    if (0 != status)    {        return status;    }    status = wlan_hdd_reassoc_bssid_hint(pAdapter, req);    if (0 == status)        return status;#ifdef WLAN_BTAMP_FEATURE    //Infra connect not supported when AMP traffic is on.    if( VOS_TRUE == WLANBAP_AmpSessionOn() )    {        hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: No connection when AMP is on", __func__);        return -ECONNREFUSED;    }#endif    //If Device Mode is Station Concurrent Sessions Exit BMps    //P2P Mode will be taken care in Open/close adapter    if((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&        (vos_concurrent_open_sessions_running())) {        exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION);    }    /*Try disconnecting if already in connected state*/    status = wlan_hdd_try_disconnect(pAdapter);    if ( 0 > status)    {        hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"                " connection"));        return -EALREADY;    }    /* Check for max concurrent connections after doing disconnect if any*/    if (vos_max_concurrent_connections_reached()) {        hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"));        return -ECONNREFUSED;    }    /*initialise security parameters*/    status = wlan_hdd_cfg80211_set_privacy(pAdapter, req);    if ( 0 > status)    {        hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",                __func__);        return status;    }    if (pHddCtx->spoofMacAddr.isEnabled)    {        hddLog(VOS_TRACE_LEVEL_INFO,                        "%s: MAC Spoofing enabled ", __func__);        /* Updating SelfSta Mac Addr in TL which will be used to get staidx         * to fill TxBds for probe request during SSID scan which may happen         * as part of connect command         */        status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent);        if (status != VOS_STATUS_SUCCESS)            return -ECONNREFUSED;    }    if (req->channel)        channel = req->channel->hw_value;    else        channel = 0;    /* Abort if any scan is going on */    status = wlan_hdd_scan_abort(pAdapter);    if (0 != status)        hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed"));    status = wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,                                             req->ssid_len, req->bssid,                                             bssid_hint, channel);    if (0 != status)    {        //ReEnable BMPS if disabled        if((VOS_STATUS_SUCCESS == exitbmpsStatus) &&            (NULL != pHddCtx))        {            if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }           //ReEnable Bmps and Imps back           hdd_enable_bmps_imps(pHddCtx);        }        hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"));        return status;    }    pHddCtx->isAmpAllowed = VOS_FALSE;    EXIT();    return status;}
static int
__wlan_hdd_cfg80211_connect( struct wiphy *wiphy,                                      struct net_device *ndev,                                      struct cfg80211_connect_params *req                                      )
__wlan_hdd_cfg80211_connect
struct wiphy *wiphy
struct wiphy
wiphy
*wiphy
*
wiphy
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
struct cfg80211_connect_params *req
struct cfg80211_connect_params
cfg80211_connect_params
*req
*
req
{    int status;    u16 channel;#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 15, 0)) || \             defined(CFG80211_BSSID_HINT_BACKPORT)    const u8 *bssid_hint = req->bssid_hint;#else    const u8 *bssid_hint = NULL;#endif    hdd_adapter_t *pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev );    VOS_STATUS exitbmpsStatus = VOS_STATUS_E_INVAL;    hdd_context_t *pHddCtx = NULL;    ENTER();    MTRACE(vos_trace(VOS_MODULE_ID_HDD,                     TRACE_CODE_HDD_CFG80211_CONNECT,                      pAdapter->sessionId, pAdapter->device_mode));    hddLog(VOS_TRACE_LEVEL_INFO,           "%s: device_mode = %s (%d)", __func__,           hdd_device_modetoString(pAdapter->device_mode),                                   pAdapter->device_mode);    pHddCtx = WLAN_HDD_GET_CTX(pAdapter);    if (!pHddCtx)    {        VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                  "%s: HDD context is null", __func__);        return -EINVAL;    }    status = wlan_hdd_validate_context(pHddCtx);    if (0 != status)    {        return status;    }    status = wlan_hdd_reassoc_bssid_hint(pAdapter, req);    if (0 == status)        return status;#ifdef WLAN_BTAMP_FEATURE    //Infra connect not supported when AMP traffic is on.    if( VOS_TRUE == WLANBAP_AmpSessionOn() )    {        hddLog(VOS_TRACE_LEVEL_ERROR,                "%s: No connection when AMP is on", __func__);        return -ECONNREFUSED;    }#endif    //If Device Mode is Station Concurrent Sessions Exit BMps    //P2P Mode will be taken care in Open/close adapter    if((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&        (vos_concurrent_open_sessions_running())) {        exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION);    }    /*Try disconnecting if already in connected state*/    status = wlan_hdd_try_disconnect(pAdapter);    if ( 0 > status)    {        hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"                " connection"));        return -EALREADY;    }    /* Check for max concurrent connections after doing disconnect if any*/    if (vos_max_concurrent_connections_reached()) {        hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"));        return -ECONNREFUSED;    }    /*initialise security parameters*/    status = wlan_hdd_cfg80211_set_privacy(pAdapter, req);    if ( 0 > status)    {        hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",                __func__);        return status;    }    if (pHddCtx->spoofMacAddr.isEnabled)    {        hddLog(VOS_TRACE_LEVEL_INFO,                        "%s: MAC Spoofing enabled ", __func__);        /* Updating SelfSta Mac Addr in TL which will be used to get staidx         * to fill TxBds for probe request during SSID scan which may happen         * as part of connect command         */        status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent);        if (status != VOS_STATUS_SUCCESS)            return -ECONNREFUSED;    }    if (req->channel)        channel = req->channel->hw_value;    else        channel = 0;    /* Abort if any scan is going on */    status = wlan_hdd_scan_abort(pAdapter);    if (0 != status)        hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed"));    status = wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,                                             req->ssid_len, req->bssid,                                             bssid_hint, channel);    if (0 != status)    {        //ReEnable BMPS if disabled        if((VOS_STATUS_SUCCESS == exitbmpsStatus) &&            (NULL != pHddCtx))        {            if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }           //ReEnable Bmps and Imps back           hdd_enable_bmps_imps(pHddCtx);        }        hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"));        return status;    }    pHddCtx->isAmpAllowed = VOS_FALSE;    EXIT();    return status;}
int status;
int status;
int
status
status
u16 channel;
u16 channel;
u16
u16
channel
channel
const u8 *bssid_hint = NULL;
const u8 *bssid_hint = NULL;
const u8
u8
*bssid_hint = NULL
*
bssid_hint
= NULL
NULL
NULL
hdd_adapter_t *pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev );
hdd_adapter_t *pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev );
hdd_adapter_t
hdd_adapter_t
*pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev )
*
pAdapter
= WLAN_HDD_GET_PRIV_PTR( ndev )
WLAN_HDD_GET_PRIV_PTR( ndev )
WLAN_HDD_GET_PRIV_PTR
WLAN_HDD_GET_PRIV_PTR
ndev
ndev
VOS_STATUS exitbmpsStatus = VOS_STATUS_E_INVAL;
VOS_STATUS exitbmpsStatus = VOS_STATUS_E_INVAL;
VOS_STATUS
VOS_STATUS
exitbmpsStatus = VOS_STATUS_E_INVAL
exitbmpsStatus
= VOS_STATUS_E_INVAL
VOS_STATUS_E_INVAL
VOS_STATUS_E_INVAL
hdd_context_t *pHddCtx = NULL;
hdd_context_t *pHddCtx = NULL;
hdd_context_t
hdd_context_t
*pHddCtx = NULL
*
pHddCtx
= NULL
NULL
NULL
ENTER();
ENTER()
ENTER
ENTER
MTRACE(vos_trace(VOS_MODULE_ID_HDD,                     TRACE_CODE_HDD_CFG80211_CONNECT,                      pAdapter->sessionId, pAdapter->device_mode));
MTRACE(vos_trace(VOS_MODULE_ID_HDD,                     TRACE_CODE_HDD_CFG80211_CONNECT,                      pAdapter->sessionId, pAdapter->device_mode))
MTRACE
MTRACE
vos_trace(VOS_MODULE_ID_HDD,                     TRACE_CODE_HDD_CFG80211_CONNECT,                      pAdapter->sessionId, pAdapter->device_mode)
vos_trace
vos_trace
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
TRACE_CODE_HDD_CFG80211_CONNECT
TRACE_CODE_HDD_CFG80211_CONNECT
pAdapter->sessionId
pAdapter
pAdapter
sessionId
pAdapter->device_mode
pAdapter
pAdapter
device_mode
hddLog(VOS_TRACE_LEVEL_INFO,           "%s: device_mode = %s (%d)", __func__,           hdd_device_modetoString(pAdapter->device_mode),                                   pAdapter->device_mode);
hddLog(VOS_TRACE_LEVEL_INFO,           "%s: device_mode = %s (%d)", __func__,           hdd_device_modetoString(pAdapter->device_mode),                                   pAdapter->device_mode)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: device_mode = %s (%d)"
__func__
__func__
hdd_device_modetoString(pAdapter->device_mode)
hdd_device_modetoString
hdd_device_modetoString
pAdapter->device_mode
pAdapter
pAdapter
device_mode
pAdapter->device_mode
pAdapter
pAdapter
device_mode
pHddCtx = WLAN_HDD_GET_CTX(pAdapter);
pHddCtx = WLAN_HDD_GET_CTX(pAdapter)
pHddCtx
pHddCtx
WLAN_HDD_GET_CTX(pAdapter)
WLAN_HDD_GET_CTX
WLAN_HDD_GET_CTX
pAdapter
pAdapter
if (!pHddCtx)    {        VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                  "%s: HDD context is null", __func__);        return -EINVAL;    }
!pHddCtx
pHddCtx
pHddCtx
{        VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                  "%s: HDD context is null", __func__);        return -EINVAL;    }
VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                  "%s: HDD context is null", __func__);
VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,                  "%s: HDD context is null", __func__)
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: HDD context is null"
__func__
__func__
return -EINVAL;
-EINVAL
EINVAL
EINVAL
status = wlan_hdd_validate_context(pHddCtx);
status = wlan_hdd_validate_context(pHddCtx)
status
status
wlan_hdd_validate_context(pHddCtx)
wlan_hdd_validate_context
wlan_hdd_validate_context
pHddCtx
pHddCtx
if (0 != status)    {        return status;    }
0 != status
0
status
status
{        return status;    }
return status;
status
status
status = wlan_hdd_reassoc_bssid_hint(pAdapter, req);
status = wlan_hdd_reassoc_bssid_hint(pAdapter, req)
status
status
wlan_hdd_reassoc_bssid_hint(pAdapter, req)
wlan_hdd_reassoc_bssid_hint
wlan_hdd_reassoc_bssid_hint
pAdapter
pAdapter
req
req
if (0 == status)        return status;
0 == status
0
status
status
return status;
status
status
if((WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&        (vos_concurrent_open_sessions_running())) {        exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION);    }
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode) &&        (vos_concurrent_open_sessions_running())
(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
WLAN_HDD_INFRA_STATION == pAdapter->device_mode
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
pAdapter->device_mode
pAdapter
pAdapter
device_mode
(vos_concurrent_open_sessions_running())
vos_concurrent_open_sessions_running()
vos_concurrent_open_sessions_running
vos_concurrent_open_sessions_running
{        exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION);    }
exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION);
exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION)
exitbmpsStatus
exitbmpsStatus
hdd_disable_bmps_imps(pHddCtx,                                               WLAN_HDD_INFRA_STATION)
hdd_disable_bmps_imps
hdd_disable_bmps_imps
pHddCtx
pHddCtx
WLAN_HDD_INFRA_STATION
WLAN_HDD_INFRA_STATION
status = wlan_hdd_try_disconnect(pAdapter);
status = wlan_hdd_try_disconnect(pAdapter)
status
status
wlan_hdd_try_disconnect(pAdapter)
wlan_hdd_try_disconnect
wlan_hdd_try_disconnect
pAdapter
pAdapter
if ( 0 > status)    {        hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"                " connection"));        return -EALREADY;    }
0 > status
0
status
status
{        hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"                " connection"));        return -EALREADY;    }
hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"                " connection"));
hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"                " connection"))
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
FL("Failed to disconnect the existing"                " connection")
FL
FL
"Failed to disconnect the existing"                " connection"
return -EALREADY;
-EALREADY
EALREADY
EALREADY
if (vos_max_concurrent_connections_reached()) {        hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"));        return -ECONNREFUSED;    }
vos_max_concurrent_connections_reached()
vos_max_concurrent_connections_reached
vos_max_concurrent_connections_reached
{        hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"));        return -ECONNREFUSED;    }
hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"));
hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections"))
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
FL("Reached max concurrent connections")
FL
FL
"Reached max concurrent connections"
return -ECONNREFUSED;
-ECONNREFUSED
ECONNREFUSED
ECONNREFUSED
status = wlan_hdd_cfg80211_set_privacy(pAdapter, req);
status = wlan_hdd_cfg80211_set_privacy(pAdapter, req)
status
status
wlan_hdd_cfg80211_set_privacy(pAdapter, req)
wlan_hdd_cfg80211_set_privacy
wlan_hdd_cfg80211_set_privacy
pAdapter
pAdapter
req
req
if ( 0 > status)    {        hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",                __func__);        return status;    }
0 > status
0
status
status
{        hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",                __func__);        return status;    }
hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",                __func__);
hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",                __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: failed to set security params"
__func__
__func__
return status;
status
status
if (pHddCtx->spoofMacAddr.isEnabled)    {        hddLog(VOS_TRACE_LEVEL_INFO,                        "%s: MAC Spoofing enabled ", __func__);        /* Updating SelfSta Mac Addr in TL which will be used to get staidx         * to fill TxBds for probe request during SSID scan which may happen         * as part of connect command         */        status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent);        if (status != VOS_STATUS_SUCCESS)            return -ECONNREFUSED;    }
pHddCtx->spoofMacAddr.isEnabled
pHddCtx->spoofMacAddr
pHddCtx
pHddCtx
spoofMacAddr
isEnabled
{        hddLog(VOS_TRACE_LEVEL_INFO,                        "%s: MAC Spoofing enabled ", __func__);        /* Updating SelfSta Mac Addr in TL which will be used to get staidx         * to fill TxBds for probe request during SSID scan which may happen         * as part of connect command         */        status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent);        if (status != VOS_STATUS_SUCCESS)            return -ECONNREFUSED;    }
hddLog(VOS_TRACE_LEVEL_INFO,                        "%s: MAC Spoofing enabled ", __func__);
hddLog(VOS_TRACE_LEVEL_INFO,                        "%s: MAC Spoofing enabled ", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"%s: MAC Spoofing enabled "
__func__
__func__
status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent);
status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent)
status
status
WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent)
WLANTL_updateSpoofMacAddr
WLANTL_updateSpoofMacAddr
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
&pHddCtx->spoofMacAddr.randomMacAddr
pHddCtx->spoofMacAddr.randomMacAddr
pHddCtx->spoofMacAddr
pHddCtx
pHddCtx
spoofMacAddr
randomMacAddr
&pAdapter->macAddressCurrent
pAdapter->macAddressCurrent
pAdapter
pAdapter
macAddressCurrent
if (status != VOS_STATUS_SUCCESS)            return -ECONNREFUSED;
status != VOS_STATUS_SUCCESS
status
status
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
return -ECONNREFUSED;
-ECONNREFUSED
ECONNREFUSED
ECONNREFUSED
if (req->channel)        channel = req->channel->hw_value;    else        channel = 0;
req->channel
req
req
channel
channel = req->channel->hw_value;
channel = req->channel->hw_value
channel
channel
req->channel->hw_value
req->channel
req
req
channel
hw_value
channel = 0;
channel = 0
channel
channel
0
status = wlan_hdd_scan_abort(pAdapter);
status = wlan_hdd_scan_abort(pAdapter)
status
status
wlan_hdd_scan_abort(pAdapter)
wlan_hdd_scan_abort
wlan_hdd_scan_abort
pAdapter
pAdapter
if (0 != status)        hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed"));
0 != status
0
status
status
hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed"));
hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed"))
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
FL("scan abort failed")
FL
FL
"scan abort failed"
status = wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,                                             req->ssid_len, req->bssid,                                             bssid_hint, channel);
status = wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,                                             req->ssid_len, req->bssid,                                             bssid_hint, channel)
status
status
wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,                                             req->ssid_len, req->bssid,                                             bssid_hint, channel)
wlan_hdd_cfg80211_connect_start
wlan_hdd_cfg80211_connect_start
pAdapter
pAdapter
req->ssid
req
req
ssid
req->ssid_len
req
req
ssid_len
req->bssid
req
req
bssid
bssid_hint
bssid_hint
channel
channel
if (0 != status)    {        //ReEnable BMPS if disabled        if((VOS_STATUS_SUCCESS == exitbmpsStatus) &&            (NULL != pHddCtx))        {            if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }           //ReEnable Bmps and Imps back           hdd_enable_bmps_imps(pHddCtx);        }        hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"));        return status;    }
0 != status
0
status
status
{        //ReEnable BMPS if disabled        if((VOS_STATUS_SUCCESS == exitbmpsStatus) &&            (NULL != pHddCtx))        {            if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }           //ReEnable Bmps and Imps back           hdd_enable_bmps_imps(pHddCtx);        }        hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"));        return status;    }
if((VOS_STATUS_SUCCESS == exitbmpsStatus) &&            (NULL != pHddCtx))        {            if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }           //ReEnable Bmps and Imps back           hdd_enable_bmps_imps(pHddCtx);        }
(VOS_STATUS_SUCCESS == exitbmpsStatus) &&            (NULL != pHddCtx)
(VOS_STATUS_SUCCESS == exitbmpsStatus)
VOS_STATUS_SUCCESS == exitbmpsStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
exitbmpsStatus
exitbmpsStatus
(NULL != pHddCtx)
NULL != pHddCtx
NULL
NULL
pHddCtx
pHddCtx
{            if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }           //ReEnable Bmps and Imps back           hdd_enable_bmps_imps(pHddCtx);        }
if (pHddCtx->hdd_wlan_suspended)            {                hdd_set_pwrparams(pHddCtx);            }
pHddCtx->hdd_wlan_suspended
pHddCtx
pHddCtx
hdd_wlan_suspended
{                hdd_set_pwrparams(pHddCtx);            }
hdd_set_pwrparams(pHddCtx);
hdd_set_pwrparams(pHddCtx)
hdd_set_pwrparams
hdd_set_pwrparams
pHddCtx
pHddCtx
hdd_enable_bmps_imps(pHddCtx);
hdd_enable_bmps_imps(pHddCtx)
hdd_enable_bmps_imps
hdd_enable_bmps_imps
pHddCtx
pHddCtx
hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"));
hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed"))
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
FL("connect failed")
FL
FL
"connect failed"
return status;
status
status
pHddCtx->isAmpAllowed = VOS_FALSE;
pHddCtx->isAmpAllowed = VOS_FALSE
pHddCtx->isAmpAllowed
pHddCtx
pHddCtx
isAmpAllowed
VOS_FALSE
VOS_FALSE
EXIT();
EXIT()
EXIT
EXIT
return status;
status
status
-----joern-----
(114,240,0)
(44,206,0)
(40,5,0)
(178,127,0)
(24,31,0)
(261,206,0)
(122,87,0)
(184,153,0)
(91,90,0)
(229,263,0)
(150,5,0)
(60,167,0)
(92,158,0)
(207,260,0)
(168,185,0)
(115,28,0)
(53,177,0)
(242,171,0)
(195,249,0)
(71,69,0)
(259,127,0)
(13,20,0)
(133,263,0)
(20,82,0)
(199,149,0)
(9,44,0)
(162,254,0)
(18,178,0)
(155,259,0)
(142,81,0)
(31,24,0)
(216,5,0)
(79,91,0)
(49,263,0)
(230,87,0)
(211,208,0)
(158,92,0)
(194,153,0)
(144,170,0)
(34,119,0)
(116,100,0)
(8,74,0)
(73,171,0)
(182,254,0)
(113,36,0)
(32,114,0)
(207,28,0)
(109,242,0)
(217,25,0)
(208,203,0)
(83,5,0)
(88,5,0)
(263,206,0)
(3,28,0)
(90,91,0)
(107,176,0)
(48,5,0)
(145,144,0)
(131,160,0)
(63,203,0)
(1,186,0)
(257,5,0)
(151,162,0)
(254,162,0)
(26,202,0)
(220,117,0)
(17,5,0)
(37,1,0)
(179,203,0)
(73,263,0)
(81,254,0)
(137,28,0)
(196,97,0)
(129,49,0)
(210,259,0)
(161,57,0)
(50,227,0)
(248,5,0)
(122,28,0)
(34,49,0)
(41,97,0)
(100,96,0)
(24,99,0)
(92,248,0)
(92,169,0)
(246,207,0)
(250,203,0)
(188,87,0)
(74,8,0)
(30,102,0)
(40,260,0)
(141,172,0)
(224,250,0)
(130,208,0)
(23,92,0)
(191,206,0)
(137,96,0)
(228,203,0)
(206,148,0)
(185,161,0)
(255,50,0)
(206,44,0)
(72,36,0)
(110,228,0)
(169,59,0)
(221,60,0)
(260,207,0)
(206,263,0)
(177,96,0)
(28,5,0)
(0,20,0)
(181,187,0)
(12,259,0)
(260,40,0)
(170,28,0)
(256,102,0)
(154,28,0)
(104,124,0)
(20,5,0)
(106,5,0)
(93,96,0)
(36,227,0)
(6,96,0)
(96,137,0)
(80,6,0)
(74,186,0)
(167,60,0)
(63,148,0)
(34,178,0)
(114,32,0)
(236,100,0)
(241,223,0)
(65,20,0)
(134,124,0)
(190,248,0)
(169,100,0)
(54,240,0)
(91,28,0)
(126,149,0)
(146,92,0)
(228,28,0)
(34,188,0)
(51,93,0)
(125,171,0)
(206,250,0)
(64,177,0)
(75,66,0)
(35,160,0)
(213,32,0)
(260,249,0)
(108,243,0)
(96,5,0)
(253,243,0)
(149,96,0)
(180,228,0)
(93,51,0)
(6,66,0)
(148,5,0)
(117,96,0)
(179,206,0)
(193,73,0)
(97,96,0)
(85,217,0)
(205,229,0)
(74,90,0)
(98,175,0)
(69,243,0)
(84,215,0)
(249,28,0)
(16,262,0)
(162,28,0)
(68,112,0)
(252,5,0)
(149,199,0)
(173,63,0)
(51,8,0)
(234,124,0)
(135,31,0)
(76,99,0)
(22,202,0)
(39,63,0)
(132,176,0)
(249,260,0)
(112,68,0)
(99,24,0)
(14,207,0)
(228,180,0)
(44,203,0)
(258,187,0)
(153,74,0)
(124,231,0)
(187,258,0)
(82,20,0)
(243,69,0)
(90,74,0)
(214,199,0)
(10,84,0)
(148,63,0)
(128,5,0)
(199,5,0)
(95,255,0)
(58,85,0)
(138,5,0)
(254,5,0)
(52,36,0)
(240,114,0)
(84,199,0)
(202,22,0)
(70,229,0)
(67,180,0)
(32,213,0)
(226,260,0)
(235,81,0)
(43,231,0)
(34,84,0)
(176,5,0)
(172,144,0)
(198,96,0)
(19,206,0)
(251,172,0)
(34,161,0)
(245,219,0)
(197,219,0)
(157,189,0)
(11,46,0)
(78,99,0)
(38,237,0)
(82,28,0)
(154,65,0)
(3,166,0)
(21,240,0)
(212,122,0)
(206,31,0)
(263,5,0)
(101,5,0)
(61,22,0)
(262,180,0)
(42,46,0)
(158,177,0)
(163,24,0)
(120,154,0)
(87,5,0)
(49,5,0)
(121,258,0)
(89,157,0)
(45,186,0)
(33,250,0)
(160,25,0)
(86,5,0)
(247,154,0)
(186,231,0)
(178,180,0)
(223,119,0)
(27,248,0)
(46,199,0)
(225,109,0)
(174,1,0)
(123,242,0)
(99,203,0)
(175,96,0)
(222,51,0)
(156,3,0)
(20,65,0)
(180,5,0)
(122,203,0)
(47,122,0)
(28,3,0)
(140,245,0)
(153,96,0)
(65,154,0)
(152,5,0)
(244,89,0)
(206,28,0)
(143,260,0)
(243,96,0)
(237,87,0)
(250,206,0)
(22,189,0)
(218,82,0)
(192,36,0)
(201,160,0)
(77,93,0)
(165,5,0)
(103,237,0)
(62,114,0)
(186,74,0)
(206,179,0)
(74,153,0)
(105,5,0)
(183,262,0)
(55,137,0)
(238,169,0)
(239,5,0)
(29,179,0)
(7,20,0)
(34,73,0)
(245,96,0)
(206,102,0)
(100,169,0)
(144,5,0)
(68,57,0)
(87,122,0)
(4,170,0)
(66,5,0)
(200,6,0)
(2,68,0)
(232,82,0)
(242,109,0)
(139,93,0)
(15,148,0)
(34,50,0)
(159,91,0)
(177,158,0)
(147,179,0)
(118,188,0)
(56,112,0)
(264,228,0)
(94,249,0)
(240,28,0)
(117,164,0)
(209,5,0)
(136,44,0)
(233,5,0)
(8,51,0)
(170,144,0)
(111,5,0)
(34,157,0)
(34,217,0)
(34,157,1)
(93,77,1)
(184,45,1)
(144,170,1)
(81,142,1)
(214,175,1)
(159,79,1)
(67,204,1)
(98,96,1)
(97,96,1)
(217,85,1)
(258,187,1)
(45,124,1)
(180,228,1)
(182,169,1)
(223,241,1)
(208,211,1)
(72,175,1)
(119,223,1)
(129,152,1)
(240,54,1)
(245,96,1)
(133,258,1)
(179,147,1)
(63,173,1)
(84,199,1)
(228,110,1)
(51,222,1)
(175,98,1)
(13,7,1)
(190,27,1)
(130,1,1)
(20,82,1)
(178,180,1)
(172,141,1)
(61,81,1)
(69,243,1)
(36,52,1)
(110,264,1)
(146,229,1)
(151,182,1)
(242,109,1)
(154,28,1)
(225,123,1)
(262,180,1)
(74,90,1)
(53,64,1)
(131,35,1)
(1,174,1)
(188,87,1)
(158,177,1)
(207,28,1)
(87,122,1)
(68,112,1)
(137,55,1)
(145,102,1)
(177,53,1)
(34,178,1)
(60,167,1)
(123,245,1)
(69,71,1)
(104,69,1)
(54,21,1)
(96,137,1)
(65,154,1)
(75,6,1)
(246,14,1)
(228,28,1)
(237,103,1)
(243,96,1)
(84,10,1)
(135,208,1)
(95,36,1)
(207,246,1)
(168,68,1)
(264,67,1)
(102,256,1)
(92,169,1)
(210,12,1)
(34,84,1)
(165,176,1)
(115,148,1)
(249,28,1)
(100,116,1)
(91,28,1)
(156,115,1)
(250,224,1)
(130,69,1)
(2,204,1)
(116,236,1)
(183,180,1)
(76,135,1)
(85,58,1)
(229,263,1)
(152,66,1)
(178,18,1)
(74,8,1)
(251,144,1)
(147,29,1)
(177,96,1)
(52,192,1)
(238,32,1)
(93,96,1)
(132,248,1)
(70,205,1)
(160,201,1)
(100,96,1)
(39,15,1)
(74,153,1)
(49,129,1)
(191,133,1)
(82,28,1)
(226,165,1)
(136,9,1)
(12,155,1)
(34,217,1)
(181,121,1)
(249,195,1)
(240,28,1)
(206,148,1)
(3,166,1)
(186,74,1)
(26,61,1)
(228,203,1)
(120,247,1)
(56,2,1)
(89,244,1)
(1,186,1)
(20,65,1)
(247,0,1)
(63,203,1)
(35,60,1)
(153,194,1)
(29,191,1)
(21,62,1)
(245,140,1)
(170,28,1)
(204,81,1)
(263,206,1)
(31,24,1)
(7,40,1)
(78,76,1)
(220,97,1)
(140,97,1)
(142,235,1)
(10,46,1)
(176,107,1)
(212,47,1)
(174,37,1)
(206,250,1)
(64,92,1)
(49,263,1)
(222,93,1)
(161,185,1)
(6,96,1)
(114,240,1)
(14,143,1)
(195,94,1)
(24,99,1)
(11,42,1)
(229,70,1)
(194,184,1)
(28,3,1)
(46,199,1)
(55,198,1)
(90,91,1)
(261,44,1)
(172,144,1)
(58,160,1)
(255,95,1)
(73,193,1)
(40,260,1)
(117,220,1)
(206,19,1)
(241,1,1)
(206,44,1)
(92,248,1)
(66,75,1)
(179,203,1)
(4,145,1)
(232,65,1)
(137,28,1)
(248,190,1)
(113,72,1)
(117,96,1)
(94,207,1)
(126,214,1)
(193,242,1)
(169,100,1)
(173,39,1)
(19,261,1)
(141,251,1)
(92,23,1)
(80,200,1)
(32,114,1)
(206,179,1)
(244,22,1)
(149,126,1)
(158,92,1)
(175,96,1)
(71,243,1)
(237,87,1)
(200,229,1)
(79,8,1)
(243,108,1)
(155,262,1)
(44,136,1)
(34,50,1)
(34,73,1)
(112,56,1)
(34,188,1)
(163,99,1)
(30,208,1)
(0,13,1)
(133,172,1)
(122,203,1)
(9,250,1)
(148,63,1)
(154,120,1)
(260,249,1)
(187,181,1)
(42,199,1)
(221,237,1)
(82,218,1)
(51,93,1)
(99,203,1)
(202,26,1)
(109,225,1)
(38,87,1)
(24,163,1)
(6,80,1)
(206,31,1)
(47,230,1)
(145,31,1)
(44,203,1)
(262,16,1)
(134,234,1)
(124,134,1)
(27,28,1)
(162,28,1)
(121,172,1)
(32,213,1)
(139,153,1)
(107,132,1)
(206,28,1)
(253,262,1)
(236,238,1)
(201,131,1)
(157,89,1)
(224,33,1)
(99,78,1)
(254,162,1)
(143,226,1)
(23,146,1)
(77,139,1)
(34,161,1)
(213,114,1)
(8,51,1)
(140,117,1)
(185,168,1)
(108,253,1)
(256,30,1)
(103,38,1)
(250,203,1)
(123,158,1)
(34,49,1)
(170,4,1)
(234,104,1)
(18,259,1)
(182,32,1)
(260,207,1)
(118,237,1)
(199,149,1)
(162,151,1)
(259,210,1)
(192,113,1)
(37,186,1)
(208,203,1)
(41,158,1)
(153,96,1)
(188,118,1)
(149,96,1)
(235,254,1)
(97,196,1)
(230,46,1)
(196,41,1)
(218,232,1)
(22,202,1)
(81,254,1)
(211,130,1)
(62,60,1)
(50,255,1)
(91,159,1)
(16,183,1)
(167,221,1)
(206,102,1)
(198,20,1)
(34,119,1)
(205,263,1)
(46,11,1)
(33,179,1)
(122,212,1)
(73,263,1)
(3,156,1)
(122,28,1)
(56,204,2)
(32,114,2)
(211,1,2)
(196,158,2)
(169,32,2)
(145,1,2)
(29,69,2)
(250,203,2)
(44,69,2)
(130,69,2)
(122,203,2)
(258,187,2)
(206,148,2)
(172,69,2)
(251,1,2)
(46,199,2)
(90,69,2)
(97,158,2)
(135,208,2)
(81,60,2)
(229,1,2)
(60,237,2)
(74,8,2)
(108,262,2)
(76,208,2)
(12,262,2)
(33,69,2)
(62,60,2)
(11,175,2)
(250,1,2)
(223,1,2)
(90,91,2)
(243,262,2)
(206,1,2)
(236,32,2)
(206,250,2)
(116,32,2)
(202,81,2)
(242,109,2)
(30,208,2)
(225,229,2)
(191,1,2)
(169,100,2)
(6,229,2)
(181,172,2)
(84,199,2)
(73,229,2)
(259,262,2)
(68,112,2)
(29,1,2)
(188,87,2)
(28,3,2)
(20,82,2)
(124,69,2)
(96,137,2)
(133,69,2)
(149,175,2)
(168,204,2)
(206,179,2)
(179,203,2)
(210,262,2)
(102,208,2)
(230,46,2)
(97,96,2)
(126,175,2)
(229,69,2)
(139,69,2)
(148,63,2)
(54,60,2)
(184,69,2)
(179,1,2)
(205,69,2)
(142,60,2)
(20,65,2)
(147,69,2)
(24,99,2)
(31,208,2)
(191,69,2)
(211,69,2)
(206,69,2)
(261,1,2)
(177,96,2)
(33,1,2)
(74,153,2)
(206,28,2)
(74,69,2)
(206,44,2)
(192,175,2)
(121,172,2)
(109,229,2)
(99,203,2)
(19,1,2)
(254,162,2)
(235,60,2)
(3,166,2)
(92,248,2)
(141,69,2)
(45,69,2)
(91,69,2)
(87,122,2)
(63,203,2)
(70,1,2)
(40,260,2)
(74,90,2)
(114,240,2)
(99,208,2)
(103,46,2)
(234,69,2)
(221,237,2)
(133,1,2)
(194,69,2)
(136,1,2)
(41,158,2)
(38,46,2)
(240,28,2)
(67,204,2)
(140,158,2)
(16,204,2)
(95,175,2)
(18,262,2)
(2,204,2)
(118,237,2)
(158,92,2)
(157,81,2)
(73,263,2)
(170,1,2)
(34,161,2)
(213,114,2)
(134,69,2)
(263,69,2)
(208,203,2)
(263,1,2)
(93,69,2)
(175,96,2)
(75,229,2)
(229,263,2)
(167,237,2)
(34,73,2)
(1,69,2)
(180,228,2)
(162,28,2)
(220,97,2)
(9,1,2)
(37,69,2)
(262,180,2)
(22,202,2)
(228,204,2)
(185,204,2)
(71,262,2)
(122,28,2)
(130,1,2)
(10,46,2)
(34,50,2)
(158,177,2)
(92,229,2)
(137,28,2)
(8,69,2)
(159,69,2)
(141,1,2)
(61,81,2)
(180,204,2)
(100,96,2)
(42,175,2)
(144,170,2)
(241,1,2)
(224,69,2)
(240,60,2)
(242,229,2)
(144,69,2)
(31,24,2)
(178,262,2)
(49,229,2)
(183,204,2)
(77,69,2)
(119,1,2)
(92,169,2)
(4,1,2)
(249,28,2)
(263,206,2)
(260,207,2)
(22,81,2)
(214,175,2)
(199,175,2)
(123,229,2)
(161,204,2)
(117,96,2)
(262,204,2)
(65,154,2)
(51,93,2)
(174,69,2)
(70,69,2)
(23,229,2)
(79,69,2)
(100,32,2)
(179,69,2)
(186,69,2)
(104,69,2)
(34,178,2)
(170,69,2)
(256,208,2)
(69,262,2)
(47,46,2)
(35,60,2)
(260,249,2)
(206,31,2)
(206,102,2)
(21,60,2)
(228,28,2)
(24,208,2)
(44,203,2)
(58,60,2)
(207,28,2)
(222,69,2)
(19,69,2)
(177,92,2)
(187,172,2)
(251,69,2)
(208,1,2)
(72,175,2)
(172,1,2)
(188,237,2)
(212,46,2)
(151,60,2)
(26,81,2)
(87,46,2)
(160,60,2)
(91,28,2)
(68,204,2)
(110,204,2)
(113,175,2)
(34,188,2)
(131,60,2)
(6,96,2)
(34,157,2)
(81,254,2)
(50,175,2)
(149,96,2)
(245,96,2)
(89,81,2)
(34,217,2)
(147,1,2)
(199,149,2)
(82,28,2)
(136,69,2)
(258,172,2)
(261,69,2)
(245,158,2)
(34,119,2)
(69,243,2)
(4,69,2)
(53,92,2)
(1,186,2)
(254,60,2)
(244,81,2)
(32,60,2)
(208,69,2)
(117,97,2)
(172,144,2)
(163,208,2)
(78,208,2)
(44,1,2)
(66,229,2)
(200,229,2)
(162,60,2)
(112,204,2)
(144,1,2)
(228,203,2)
(49,263,2)
(205,1,2)
(85,60,2)
(224,1,2)
(64,92,2)
(9,69,2)
(80,229,2)
(153,69,2)
(264,204,2)
(178,180,2)
(122,46,2)
(154,28,2)
(237,46,2)
(250,69,2)
(60,167,2)
(152,229,2)
(114,60,2)
(34,84,2)
(170,28,2)
(129,229,2)
(52,175,2)
(158,229,2)
(217,60,2)
(204,81,2)
(51,69,2)
(93,96,2)
(36,175,2)
(243,96,2)
(8,51,2)
(145,69,2)
(255,175,2)
(238,32,2)
(32,213,2)
(84,46,2)
(253,262,2)
(155,262,2)
(182,60,2)
(34,49,2)
(201,60,2)
(153,96,2)
(193,229,2)
(46,175,2)
(237,87,2)
(186,74,2)
(146,229,2)
-----------------------------------
(0,__func__)
(1,status != VOS_STATUS_SUCCESS)
(2,VOS_TRACE_LEVEL_INFO)
(3,WLAN_HDD_GET_PRIV_PTR( ndev )
(4,pAdapter)
(5,)
(6,pHddCtx->isAmpAllowed)
(7,VOS_TRACE_LEVEL_INFO)
(8,&pHddCtx->spoofMacAddr.randomMacAddr)
(9,req)
(10,status)
(11,status)
(12,"%s: failed to set security params")
(13,"%s: device_mode = %s (%d)
(14,pAdapter)
(15,bssid_hint)
(16,status)
(17,if (0 == status)
(18,status)
(19,channel)
(20,hddLog(VOS_TRACE_LEVEL_INFO,\n\\n           "%s: device_mode = %s (%d)
(21,pAdapter)
(22,hddLog(VOS_TRACE_LEVEL_ERROR, FL("Failed to disconnect the existing"\n\\n                " connection")
(23,exitbmpsStatus)
(24,req->channel->hw_value)
(25,)
(26,"Failed to disconnect the existing"\n\\n                " connection")
(27,exitbmpsStatus)
(28,*pAdapter = WLAN_HDD_GET_PRIV_PTR( ndev )
(29,req)
(30,channel)
(31,channel = req->channel->hw_value)
(32,(WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(33,req)
(34,RET)
(35,VOS_TRACE_LEVEL_ERROR)
(36,VOS_TRACE(VOS_MODULE_ID_HDD, VOS_TRACE_LEVEL_ERROR,\n\\n                  "%s: HDD context is null", __func__)
(37,status)
(38,0)
(39,req)
(40,MTRACE(vos_trace(VOS_MODULE_ID_HDD,\n\\n                     TRACE_CODE_HDD_CFG80211_CONNECT,\n\\n                      pAdapter->sessionId, pAdapter->device_mode)
(41,pHddCtx)
(42,0)
(43,if (status != VOS_STATUS_SUCCESS)
(44,req->bssid)
(45,status)
(46,0 != status)
(47,pAdapter)
(48,pHddCtx)
(49,return status;)
(50,return -EINVAL;)
(51,pHddCtx->spoofMacAddr.randomMacAddr)
(52,__func__)
(53,pHddCtx)
(54,device_mode)
(55,pAdapter)
(56,"Reached max concurrent connections")
(57,)
(58,ECONNREFUSED)
(59,)
(60,VOS_TRUE == WLANBAP_AmpSessionOn()
(61,VOS_TRACE_LEVEL_ERROR)
(62,WLAN_HDD_INFRA_STATION)
(63,req->bssid_hint)
(64,NULL)
(65,hdd_device_modetoString(pAdapter->device_mode)
(66,pHddCtx->isAmpAllowed = VOS_FALSE)
(67,status)
(68,hddLog(VOS_TRACE_LEVEL_INFO, FL("Reached max concurrent connections")
(69,pHddCtx->spoofMacAddr.isEnabled)
(70,status)
(71,isEnabled)
(72,VOS_MODULE_ID_HDD)
(73,return status;)
(74,WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,\n\\n            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent)
(75,VOS_FALSE)
(76,req)
(77,spoofMacAddr)
(78,channel)
(79,pAdapter)
(80,isAmpAllowed)
(81,0 > status)
(82,pAdapter->device_mode)
(83,bssid_hint)
(84,return status;)
(85,-ECONNREFUSED)
(86,if (req->channel)
(87,status = wlan_hdd_reassoc_bssid_hint(pAdapter, req)
(88,if ( 0 > status)
(89,-EALREADY)
(90,&pAdapter->macAddressCurrent)
(91,pAdapter->macAddressCurrent)
(92,VOS_STATUS_SUCCESS == exitbmpsStatus)
(93,pHddCtx->spoofMacAddr)
(94,pAdapter)
(95,EINVAL)
(96,pHddCtx = WLAN_HDD_GET_CTX(pAdapter)
(97,pHddCtx->hdd_wlan_suspended)
(98,pHddCtx)
(99,req->channel)
(100,hdd_disable_bmps_imps(pHddCtx,\n\\n                                               WLAN_HDD_INFRA_STATION)
(101,if (vos_max_concurrent_connections_reached()
(102,channel = 0)
(103,status)
(104,VOS_TRACE_LEVEL_INFO)
(105,pAdapter)
(106,if (0 != status)
(107,NULL)
(108,spoofMacAddr)
(109,FL("connect failed")
(110,req)
(111,if (0 != status)
(112,FL("Reached max concurrent connections")
(113,VOS_TRACE_LEVEL_ERROR)
(114,WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(115,pAdapter)
(116,WLAN_HDD_INFRA_STATION)
(117,hdd_set_pwrparams(pHddCtx)
(118,status)
(119,return -ECONNREFUSED;)
(120,device_mode)
(121,VOS_TRACE_LEVEL_ERROR)
(122,wlan_hdd_reassoc_bssid_hint(pAdapter, req)
(123,VOS_TRACE_LEVEL_ERROR)
(124,hddLog(VOS_TRACE_LEVEL_INFO,\n\\n                        "%s: MAC Spoofing enabled ", __func__)
(125,if((VOS_STATUS_SUCCESS == exitbmpsStatus)
(126,pHddCtx)
(127,)
(128,if (0 != status)
(129,status)
(130,req)
(131,"%s: No connection when AMP is on")
(132,pHddCtx)
(133,status)
(134,__func__)
(135,channel)
(136,bssid)
(137,WLAN_HDD_GET_CTX(pAdapter)
(138,channel)
(139,pHddCtx)
(140,pHddCtx)
(141,status)
(142,status)
(143,TRACE_CODE_HDD_CFG80211_CONNECT)
(144,status = wlan_hdd_scan_abort(pAdapter)
(145,status)
(146,VOS_STATUS_SUCCESS)
(147,ssid)
(148,*bssid_hint = req->bssid_hint)
(149,wlan_hdd_validate_context(pHddCtx)
(150,if (!pHddCtx)
(151,pAdapter)
(152,EXIT()
(153,pHddCtx->pvosContext)
(154,pAdapter->device_mode)
(155,VOS_TRACE_LEVEL_ERROR)
(156,ndev)
(157,return -EALREADY;)
(158,(VOS_STATUS_SUCCESS == exitbmpsStatus)
(159,macAddressCurrent)
(160,hddLog(VOS_TRACE_LEVEL_ERROR,\n\\n                "%s: No connection when AMP is on", __func__)
(161,return -ECONNREFUSED;)
(162,wlan_hdd_try_disconnect(pAdapter)
(163,hw_value)
(164,)
(165,ENTER()
(166,struct net_device *ndev)
(167,WLANBAP_AmpSessionOn()
(168,ECONNREFUSED)
(169,exitbmpsStatus = hdd_disable_bmps_imps(pHddCtx,\n\\n                                               WLAN_HDD_INFRA_STATION)
(170,wlan_hdd_scan_abort(pAdapter)
(171,)
(172,0 != status)
(173,bssid_hint)
(174,VOS_STATUS_SUCCESS)
(175,!pHddCtx)
(176,*pHddCtx = NULL)
(177,NULL != pHddCtx)
(178,return status;)
(179,req->ssid)
(180,status = wlan_hdd_cfg80211_set_privacy(pAdapter, req)
(181,"scan abort failed")
(182,status)
(183,0)
(184,pHddCtx)
(185,-ECONNREFUSED)
(186,status = WLANTL_updateSpoofMacAddr(pHddCtx->pvosContext,\n\\n            &pHddCtx->spoofMacAddr.randomMacAddr, &pAdapter->macAddressCurrent)
(187,FL("scan abort failed")
(188,return status;)
(189,)
(190,VOS_STATUS_E_INVAL)
(191,pAdapter)
(192,"%s: HDD context is null")
(193,status)
(194,pvosContext)
(195,device_mode)
(196,hdd_wlan_suspended)
(197,if (pHddCtx->hdd_wlan_suspended)
(198,pHddCtx)
(199,status = wlan_hdd_validate_context(pHddCtx)
(200,pHddCtx)
(201,__func__)
(202,FL("Failed to disconnect the existing"\n\\n                " connection")
(203,struct cfg80211_connect_params *req)
(204,vos_max_concurrent_connections_reached()
(205,0)
(206,wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,\n\\n                                             req->ssid_len, req->bssid,\n\\n                                             bssid_hint, channel)
(207,pAdapter->sessionId)
(208,req->channel)
(209,status)
(210,__func__)
(211,channel)
(212,req)
(213,vos_concurrent_open_sessions_running()
(214,status)
(215,)
(216,exitbmpsStatus)
(217,return -ECONNREFUSED;)
(218,device_mode)
(219,)
(220,pHddCtx)
(221,VOS_TRUE)
(222,randomMacAddr)
(223,-ECONNREFUSED)
(224,ssid_len)
(225,"connect failed")
(226,VOS_MODULE_ID_HDD)
(227,)
(228,wlan_hdd_cfg80211_set_privacy(pAdapter, req)
(229,0 != status)
(230,status)
(231,)
(232,pAdapter)
(233,if( VOS_TRUE == WLANBAP_AmpSessionOn()
(234,"%s: MAC Spoofing enabled ")
(235,0)
(236,pHddCtx)
(237,0 == status)
(238,exitbmpsStatus)
(239,if((WLAN_HDD_INFRA_STATION == pAdapter->device_mode)
(240,pAdapter->device_mode)
(241,ECONNREFUSED)
(242,hddLog(VOS_TRACE_LEVEL_ERROR, FL("connect failed")
(243,pHddCtx->spoofMacAddr)
(244,EALREADY)
(245,hdd_enable_bmps_imps(pHddCtx)
(246,sessionId)
(247,pAdapter)
(248,exitbmpsStatus = VOS_STATUS_E_INVAL)
(249,pAdapter->device_mode)
(250,req->ssid_len)
(251,0)
(252,if (pHddCtx->spoofMacAddr.isEnabled)
(253,pHddCtx)
(254,status = wlan_hdd_try_disconnect(pAdapter)
(255,-EINVAL)
(256,0)
(257,if ( 0 > status)
(258,hddLog(VOS_TRACE_LEVEL_ERROR, FL("scan abort failed")
(259,hddLog(VOS_TRACE_LEVEL_ERROR, "%s: failed to set security params",\n\\n                __func__)
(260,vos_trace(VOS_MODULE_ID_HDD,\n\\n                     TRACE_CODE_HDD_CFG80211_CONNECT,\n\\n                      pAdapter->sessionId, pAdapter->device_mode)
(261,bssid_hint)
(262,0 > status)
(263,status = wlan_hdd_cfg80211_connect_start(pAdapter, req->ssid,\n\\n                                             req->ssid_len, req->bssid,\n\\n                                             bssid_hint, channel)
(264,pAdapter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^