-----label-----
0
-----code-----
int
command_line_get_partition (const char* prompt, PedDisk* disk,
                            PedPartition** value)
{
        PedPartition*    part;

        /* Flawed logic, doesn't seem to work?!
        check = ped_disk_next_partition (disk, part);
        part  = ped_disk_next_partition (disk, check);

        if (part == NULL) {

        *value = check;
        printf (_("The (only) primary partition has "
                  "been automatically selected\n"));
        return 1;

        } else {
        */
        int num = (*value) ? (*value)->num : 0;

        if (!command_line_get_integer (prompt, &num)) {
                ped_exception_throw (PED_EXCEPTION_ERROR,
                                     PED_EXCEPTION_CANCEL,
                                     _("Expecting a partition number."));
                return 0;
        }

        part = ped_disk_get_partition (disk, num);

        if (!part) {
                ped_exception_throw (PED_EXCEPTION_ERROR,
                                     PED_EXCEPTION_CANCEL,
                                     _("Partition doesn't exist."));
            return 0;
        }

        *value = part;
        return 1;
        //}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
19,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
34,36
36,37
37,38
37,39
37,40
38,39
39,40
40,41
42,43
42,44
43,44
44,45
45,46
49,50
49,51
50,51
51,52
51,53
51,54
52,53
54,55
56,57
57,58
59,60
59,61
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
68,69
68,70
69,70
72,73
74,75
75,76
75,77
76,77
78,79
78,80
78,81
79,80
81,82
83,84
85,86
85,87
86,87
87,88
89,90
89,91
90,91
91,92
91,93
91,94
91,95
92,93
94,95
96,97
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
107,108
109,110
111,112
-----nextToken-----
2,4,6,8,9,12,14,15,18,20,21,22,27,29,30,33,35,41,46,47,48,53,55,58,63,65,67,70,71,73,77,80,82,84,88,93,95,97,100,101,103,108,110,112
-----computeFrom-----
75,76
75,77
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ConditionalExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;UnaryExpression;UnaryExpression;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
intcommand_line_get_partition (const char* prompt, PedDisk* disk,                            PedPartition** value){        PedPartition*    part;        /* Flawed logic, doesn't seem to work?!        check = ped_disk_next_partition (disk, part);        part  = ped_disk_next_partition (disk, check);        if (part == NULL) {        *value = check;        printf (_("The (only) primary partition has "                  "been automatically selected\n"));        return 1;        } else {        */        int num = (*value) ? (*value)->num : 0;        if (!command_line_get_integer (prompt, &num)) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }        part = ped_disk_get_partition (disk, num);        if (!part) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }        *value = part;        return 1;        //}}
int
command_line_get_partition (const char* prompt, PedDisk* disk,                            PedPartition** value)
command_line_get_partition
const char* prompt
const char
* prompt
*
prompt
PedDisk* disk
PedDisk
PedDisk
* disk
*
disk
PedPartition** value
PedPartition
PedPartition
** value
*
*
value
{        PedPartition*    part;        /* Flawed logic, doesn't seem to work?!        check = ped_disk_next_partition (disk, part);        part  = ped_disk_next_partition (disk, check);        if (part == NULL) {        *value = check;        printf (_("The (only) primary partition has "                  "been automatically selected\n"));        return 1;        } else {        */        int num = (*value) ? (*value)->num : 0;        if (!command_line_get_integer (prompt, &num)) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }        part = ped_disk_get_partition (disk, num);        if (!part) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }        *value = part;        return 1;        //}}
PedPartition*    part;
PedPartition*    part;
PedPartition
PedPartition
*    part
*
part
int num = (*value) ? (*value)->num : 0;
int num = (*value) ? (*value)->num : 0;
int
num = (*value) ? (*value)->num : 0
num
= (*value) ? (*value)->num : 0
(*value) ? (*value)->num : 0
(*value)
*value
value
value
(*value)->num
(*value)
*value
value
value
num
0
if (!command_line_get_integer (prompt, &num)) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }
!command_line_get_integer (prompt, &num)
command_line_get_integer (prompt, &num)
command_line_get_integer
command_line_get_integer
prompt
prompt
&num
num
num
{                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));                return 0;        }
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."));
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Expecting a partition number."))
ped_exception_throw
ped_exception_throw
PED_EXCEPTION_ERROR
PED_EXCEPTION_ERROR
PED_EXCEPTION_CANCEL
PED_EXCEPTION_CANCEL
_("Expecting a partition number.")
_
_
"Expecting a partition number."
return 0;
0
part = ped_disk_get_partition (disk, num);
part = ped_disk_get_partition (disk, num)
part
part
ped_disk_get_partition (disk, num)
ped_disk_get_partition
ped_disk_get_partition
disk
disk
num
num
if (!part) {                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }
!part
part
part
{                ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));            return 0;        }
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."));
ped_exception_throw (PED_EXCEPTION_ERROR,                                     PED_EXCEPTION_CANCEL,                                     _("Partition doesn't exist."))
ped_exception_throw
ped_exception_throw
PED_EXCEPTION_ERROR
PED_EXCEPTION_ERROR
PED_EXCEPTION_CANCEL
PED_EXCEPTION_CANCEL
_("Partition doesn't exist.")
_
_
"Partition doesn't exist."
return 0;
0
*value = part;
*value = part
*value
value
value
part
part
return 1;
1
-----joern-----
(16,52,0)
(7,13,0)
(6,10,0)
(25,1,0)
(41,47,0)
(1,25,0)
(11,12,0)
(6,13,0)
(24,27,0)
(37,30,0)
(10,11,0)
(1,52,0)
(13,38,0)
(39,18,0)
(24,9,0)
(25,34,0)
(0,47,0)
(32,34,0)
(14,15,0)
(27,31,0)
(51,0,0)
(29,34,0)
(35,34,0)
(19,42,0)
(33,35,0)
(14,38,0)
(23,24,0)
(5,42,0)
(43,34,0)
(47,0,0)
(40,1,0)
(9,12,0)
(0,26,0)
(28,34,0)
(17,10,0)
(42,30,0)
(0,51,0)
(46,11,0)
(47,52,0)
(2,31,0)
(22,14,0)
(1,44,0)
(36,37,0)
(11,35,0)
(31,12,0)
(18,42,0)
(21,14,0)
(35,25,0)
(52,24,0)
(45,27,0)
(20,0,0)
(6,37,0)
(52,34,0)
(9,24,0)
(10,34,0)
(42,18,0)
(27,24,0)
(15,14,0)
(50,25,0)
(4,9,0)
(3,50,0)
(31,27,0)
(24,52,0)
(8,25,0)
(49,15,0)
(48,1,0)
(4,16,1)
(49,21,1)
(31,2,1)
(27,31,1)
(33,11,1)
(19,5,1)
(9,12,1)
(6,10,1)
(5,50,1)
(39,19,1)
(0,47,1)
(20,52,1)
(11,46,1)
(47,52,1)
(21,22,1)
(45,31,1)
(2,9,1)
(9,4,1)
(22,51,1)
(37,36,1)
(42,18,1)
(24,9,1)
(31,12,1)
(25,1,1)
(10,17,1)
(36,42,1)
(18,39,1)
(27,45,1)
(24,23,1)
(50,25,1)
(48,40,1)
(1,52,1)
(6,37,1)
(52,24,1)
(11,12,1)
(15,49,1)
(13,7,1)
(46,50,1)
(41,20,1)
(8,51,1)
(10,11,1)
(14,15,1)
(0,26,1)
(35,33,1)
(1,48,1)
(23,9,1)
(7,14,1)
(47,41,1)
(40,8,1)
(24,27,1)
(3,25,1)
(17,35,1)
(35,25,1)
(50,3,1)
(51,0,1)
(6,13,1)
(1,44,1)
(1,52,2)
(35,25,2)
(8,51,2)
(45,9,2)
(1,44,2)
(5,50,2)
(10,50,2)
(27,9,2)
(3,51,2)
(7,51,2)
(39,50,2)
(10,11,2)
(51,0,2)
(14,51,2)
(52,24,2)
(19,50,2)
(6,10,2)
(49,51,2)
(50,51,2)
(6,37,2)
(31,9,2)
(0,47,2)
(31,12,2)
(17,50,2)
(35,50,2)
(24,9,2)
(6,13,2)
(50,25,2)
(46,50,2)
(14,15,2)
(2,9,2)
(42,50,2)
(11,12,2)
(40,51,2)
(9,12,2)
(37,50,2)
(11,50,2)
(23,9,2)
(22,51,2)
(33,50,2)
(48,51,2)
(47,52,2)
(42,18,2)
(18,50,2)
(25,1,2)
(24,27,2)
(25,51,2)
(36,50,2)
(0,26,2)
(1,51,2)
(21,51,2)
(15,51,2)
(27,31,2)
(13,51,2)
-----------------------------------
(0,command_line_get_integer (prompt, &num)
(1,ped_disk_get_partition (disk, num)
(2,value)
(3,part)
(4,value)
(5,PED_EXCEPTION_ERROR)
(6,RET)
(7,0)
(8,part)
(9,*value)
(10,return 1;)
(11,*value)
(12,PedPartition** value)
(13,return 0;)
(14,ped_exception_throw (PED_EXCEPTION_ERROR,\n\\n                                     PED_EXCEPTION_CANCEL,\n\\n                                     _("Expecting a partition number.")
(15,_("Expecting a partition number.")
(16,num)
(17,1)
(18,_("Partition doesn\'t exist.")
(19,PED_EXCEPTION_CANCEL)
(20,prompt)
(21,PED_EXCEPTION_CANCEL)
(22,PED_EXCEPTION_ERROR)
(23,0)
(24,(*value)
(25,part = ped_disk_get_partition (disk, num)
(26,const char* prompt)
(27,(*value)
(28,part)
(29,num)
(30,)
(31,*value)
(32,if (!command_line_get_integer (prompt, &num)
(33,part)
(34,)
(35,*value = part)
(36,0)
(37,return 0;)
(38,)
(39,"Partition doesn\'t exist.")
(40,disk)
(41,num)
(42,ped_exception_throw (PED_EXCEPTION_ERROR,\n\\n                                     PED_EXCEPTION_CANCEL,\n\\n                                     _("Partition doesn\'t exist.")
(43,if (!part)
(44,PedDisk* disk)
(45,num)
(46,value)
(47,&num)
(48,num)
(49,"Expecting a partition number.")
(50,!part)
(51,!command_line_get_integer (prompt, &num)
(52,num = (*value)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^