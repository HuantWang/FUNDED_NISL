-----label-----
1
-----code-----
static int adfs_fill_super(struct super_block *sb, void *data, int silent)
{
	struct adfs_discrecord *dr;
	struct buffer_head *bh;
	struct object_info root_obj;
	unsigned char *b_data;
	unsigned int blocksize;
	struct adfs_sb_info *asb;
	struct inode *root;
	int ret = -EINVAL;

	sb->s_flags |= MS_NODIRATIME;

	asb = kzalloc(sizeof(*asb), GFP_KERNEL);
	if (!asb)
		return -ENOMEM;
	sb->s_fs_info = asb;

	/* set default options */
	asb->s_uid = GLOBAL_ROOT_UID;
	asb->s_gid = GLOBAL_ROOT_GID;
	asb->s_owner_mask = ADFS_DEFAULT_OWNER_MASK;
	asb->s_other_mask = ADFS_DEFAULT_OTHER_MASK;
	asb->s_ftsuffix = 0;

	if (parse_options(sb, data))
		goto error;

	sb_set_blocksize(sb, BLOCK_SIZE);
	if (!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE))) {
		adfs_error(sb, "unable to read superblock");
		ret = -EIO;
		goto error;
	}

	b_data = bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE);

	if (adfs_checkbblk(b_data)) {
		if (!silent)
			printk("VFS: Can't find an adfs filesystem on dev "
				"%s.\n", sb->s_id);
		ret = -EINVAL;
		goto error_free_bh;
	}

	dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);

	/*
	 * Do some sanity checks on the ADFS disc record
	 */
	if (adfs_checkdiscrecord(dr)) {
		if (!silent)
			printk("VPS: Can't find an adfs filesystem on dev "
				"%s.\n", sb->s_id);
		ret = -EINVAL;
		goto error_free_bh;
	}

	blocksize = 1 << dr->log2secsize;
	brelse(bh);

	if (sb_set_blocksize(sb, blocksize)) {
		bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize);
		if (!bh) {
			adfs_error(sb, "couldn't read superblock on "
				"2nd try.");
			ret = -EIO;
			goto error;
		}
		b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize);
		if (adfs_checkbblk(b_data)) {
			adfs_error(sb, "disc record mismatch, very weird!");
			ret = -EINVAL;
			goto error_free_bh;
		}
		dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);
	} else {
		if (!silent)
			printk(KERN_ERR "VFS: Unsupported blocksize on dev "
				"%s.\n", sb->s_id);
		ret = -EINVAL;
		goto error;
	}

	/*
	 * blocksize on this device should now be set to the ADFS log2secsize
	 */

	sb->s_magic		= ADFS_SUPER_MAGIC;
	asb->s_idlen		= dr->idlen;
	asb->s_map_size		= dr->nzones | (dr->nzones_high << 8);
	asb->s_map2blk		= dr->log2bpmb - dr->log2secsize;
	asb->s_size    		= adfs_discsize(dr, sb->s_blocksize_bits);
	asb->s_version 		= dr->format_version;
	asb->s_log2sharesize	= dr->log2sharesize;

	asb->s_map = adfs_read_map(sb, dr);
	if (IS_ERR(asb->s_map)) {
		ret =  PTR_ERR(asb->s_map);
		goto error_free_bh;
	}

	brelse(bh);

	/*
	 * set up enough so that we can read an inode
	 */
	sb->s_op = &adfs_sops;

	dr = (struct adfs_discrecord *)(asb->s_map[0].dm_bh->b_data + 4);

	root_obj.parent_id = root_obj.file_id = le32_to_cpu(dr->root);
	root_obj.name_len  = 0;
	/* Set root object date as 01 Jan 1987 00:00:00 */
	root_obj.loadaddr  = 0xfff0003f;
	root_obj.execaddr  = 0xec22c000;
	root_obj.size	   = ADFS_NEWDIR_SIZE;
	root_obj.attr	   = ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |
			     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ;
	root_obj.filetype  = -1;

	/*
	 * If this is a F+ disk with variable length directories,
	 * get the root_size from the disc record.
	 */
	if (asb->s_version) {
		root_obj.size = le32_to_cpu(dr->root_size);
		asb->s_dir     = &adfs_fplus_dir_ops;
		asb->s_namelen = ADFS_FPLUS_NAME_LEN;
	} else {
		asb->s_dir     = &adfs_f_dir_ops;
		asb->s_namelen = ADFS_F_NAME_LEN;
	}
	/*
	 * ,xyz hex filetype suffix may be added by driver
	 * to files that have valid RISC OS filetype
	 */
	if (asb->s_ftsuffix)
		asb->s_namelen += 4;

	sb->s_d_op = &adfs_dentry_operations;
	root = adfs_iget(sb, &root_obj);
	sb->s_root = d_make_root(root);
	if (!sb->s_root) {
		int i;
		for (i = 0; i < asb->s_map_size; i++)
			brelse(asb->s_map[i].dm_bh);
		kfree(asb->s_map);
		adfs_error(sb, "get root inode failed\n");
		ret = -EIO;
		goto error;
	}
	return 0;

error_free_bh:
	brelse(bh);
error:
	sb->s_fs_info = NULL;
	kfree(asb);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
20,38
20,39
20,40
20,41
20,42
20,43
20,44
20,45
20,46
20,47
20,48
20,49
20,50
20,51
20,52
20,53
20,54
20,55
20,56
20,57
20,58
20,59
20,60
20,61
20,62
20,63
20,64
20,65
20,66
20,67
20,68
20,69
20,70
20,71
20,72
20,73
20,74
20,75
20,76
20,77
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
61,62
63,64
63,65
66,67
67,68
67,69
69,70
69,71
71,72
72,73
73,74
75,76
76,77
76,78
77,78
77,79
78,79
81,82
83,84
84,85
84,86
85,86
87,88
87,89
87,90
88,89
90,91
91,92
92,93
93,94
95,96
97,98
97,99
98,99
99,100
101,102
102,103
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
123,125
124,125
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
152,153
152,154
153,154
153,155
153,156
154,155
156,157
158,159
160,161
162,163
163,164
163,165
163,166
164,165
166,167
168,169
170,171
170,172
171,172
172,173
173,174
173,175
174,175
176,177
176,178
176,179
177,178
179,180
181,182
181,183
182,183
184,185
186,187
186,188
186,189
187,188
188,189
188,190
188,191
189,190
191,192
194,195
195,196
195,197
196,197
198,199
199,200
201,202
203,204
204,205
204,206
205,206
207,208
207,209
208,209
208,210
209,210
212,213
213,214
213,215
214,215
216,217
218,219
218,220
219,220
219,221
220,221
222,223
224,225
224,226
224,227
225,226
225,227
226,227
227,228
229,230
230,231
230,232
230,233
231,232
234,235
234,236
235,236
238,239
239,240
239,241
240,241
242,243
243,244
245,246
247,248
248,249
248,250
249,250
251,252
251,253
252,253
252,254
253,254
255,256
257,258
258,259
258,260
259,260
261,262
263,264
263,265
264,265
264,266
265,266
267,268
269,270
269,271
269,272
270,271
270,272
271,272
272,273
274,275
275,276
275,277
275,278
276,277
279,280
279,281
280,281
283,284
284,285
284,286
285,286
287,288
288,289
290,291
292,293
293,294
293,295
294,295
296,297
296,298
298,299
298,300
299,300
302,303
303,304
303,305
304,305
306,307
308,309
308,310
308,311
309,310
309,311
309,312
310,311
312,313
314,315
316,317
316,318
316,319
316,320
316,321
317,318
318,319
318,320
319,320
321,322
321,323
321,324
322,323
324,325
326,327
326,328
327,328
329,330
329,331
330,331
333,334
333,335
334,335
335,336
337,338
337,339
337,340
338,339
339,340
339,341
339,342
340,341
342,343
345,346
346,347
346,348
347,348
349,350
350,351
352,353
354,355
355,356
355,357
356,357
358,359
358,360
359,360
359,361
360,361
363,364
364,365
364,366
365,366
367,368
367,369
368,369
371,372
371,373
372,373
372,374
373,374
375,376
377,378
377,379
377,380
378,379
379,380
379,381
379,382
380,381
382,383
385,386
386,387
386,388
387,388
389,390
390,391
392,393
394,395
395,396
395,397
396,397
398,399
398,400
399,400
399,401
400,401
402,403
404,405
405,406
405,407
406,407
408,409
410,411
410,412
410,413
411,412
412,413
413,414
413,415
414,415
416,417
417,418
419,420
421,422
422,423
422,424
423,424
423,425
424,425
427,428
429,430
430,431
430,432
431,432
431,433
432,433
435,436
435,437
436,437
439,440
440,441
440,442
441,442
441,443
442,443
445,446
445,447
446,447
446,448
447,448
450,451
451,452
451,453
452,453
452,454
453,454
457,458
458,459
458,460
459,460
459,461
460,461
463,464
463,465
464,465
464,466
465,466
468,469
468,470
469,470
472,473
473,474
473,475
474,475
474,476
475,476
478,479
478,480
478,481
479,480
481,482
483,484
483,485
484,485
487,488
488,489
488,490
489,490
489,491
490,491
493,494
493,495
494,495
497,498
498,499
498,500
499,500
499,501
500,501
503,504
503,505
504,505
507,508
508,509
508,510
509,510
509,511
510,511
513,514
513,515
513,516
514,515
516,517
518,519
520,521
520,522
521,522
521,523
522,523
524,525
524,526
525,526
528,529
528,530
529,530
530,531
530,532
531,532
533,534
533,535
534,535
536,537
536,538
537,538
540,541
542,543
543,544
543,545
544,545
546,547
548,549
549,550
549,551
550,551
550,552
551,552
554,555
555,556
557,558
558,559
558,560
559,560
561,562
561,563
562,563
562,564
563,564
565,566
567,568
568,569
568,570
569,570
569,571
570,571
570,572
571,572
571,573
572,573
572,574
573,574
580,581
581,582
581,583
582,583
582,584
583,584
586,587
586,588
587,588
587,589
588,589
591,592
591,593
592,593
594,595
594,596
595,596
598,599
599,600
599,601
600,601
600,602
601,602
605,606
606,607
606,608
607,608
607,609
608,609
612,613
613,614
613,615
614,615
614,616
615,616
619,620
620,621
620,622
621,622
621,623
622,623
625,626
627,628
628,629
628,630
629,630
629,631
630,631
633,634
633,635
634,635
634,636
635,636
635,637
636,637
638,639
640,641
642,643
644,645
645,646
645,647
646,647
646,648
647,648
650,651
652,653
652,654
652,655
653,654
653,655
654,655
657,658
657,659
657,660
658,659
659,660
659,661
660,661
660,662
661,662
664,665
664,666
665,666
667,668
667,669
668,669
671,672
672,673
672,674
673,674
673,675
674,675
677,678
678,679
680,681
681,682
681,683
682,683
682,684
683,684
686,687
688,689
688,690
689,690
690,691
690,692
691,692
691,693
692,693
695,696
696,697
698,699
699,700
699,701
700,701
700,702
701,702
704,705
706,707
706,708
707,708
707,709
708,709
711,712
712,713
712,714
713,714
713,715
714,715
718,719
719,720
719,721
720,721
720,722
721,722
724,725
725,726
727,728
728,729
728,730
729,730
731,732
731,733
731,734
732,733
734,735
736,737
737,738
739,740
740,741
740,742
741,742
741,743
742,743
745,746
745,747
746,747
748,749
750,751
750,752
751,752
752,753
752,754
753,754
756,757
756,758
756,759
756,760
756,761
756,762
757,758
758,759
758,760
760,761
762,763
762,764
762,765
762,766
763,764
764,765
764,766
765,766
768,769
768,770
769,770
771,772
771,773
772,773
775,776
776,777
778,779
779,780
779,781
780,781
782,783
782,784
783,784
783,785
784,785
784,786
785,786
788,789
791,792
792,793
792,794
793,794
795,796
795,797
796,797
799,800
800,801
800,802
800,803
801,802
803,804
806,807
807,808
807,809
808,809
810,811
811,812
813,814
815,816
817,818
817,819
819,820
820,821
820,822
821,822
823,824
825,826
825,827
827,828
828,829
828,830
829,830
829,831
830,831
833,834
835,836
836,837
836,838
837,838
839,840
841,842
842,843
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,24,26,27,31,33,34,38,40,43,45,46,49,51,55,57,58,62,64,65,68,70,74,79,80,82,86,89,94,96,100,104,109,110,112,117,118,120,125,126,128,133,134,136,141,142,144,149,150,151,155,157,159,161,165,167,169,175,178,180,183,185,190,192,193,197,200,202,206,210,211,215,217,221,223,228,232,233,236,237,241,244,246,250,254,256,260,262,266,268,273,277,278,281,282,286,289,291,295,297,300,301,305,307,311,313,315,320,323,325,328,331,332,336,341,343,344,348,351,353,357,361,362,366,369,370,374,376,381,383,384,388,391,393,397,401,403,407,409,415,418,420,425,426,428,433,434,437,438,443,444,448,449,454,455,456,461,462,466,467,470,471,476,477,480,482,485,486,491,492,495,496,501,502,505,506,511,512,515,517,519,523,526,527,532,535,538,539,541,545,547,552,553,556,560,564,566,574,575,576,577,578,579,584,585,589,590,593,596,597,602,603,604,609,610,611,616,617,618,623,624,626,631,632,637,639,641,643,648,649,651,655,656,662,663,666,669,670,675,676,679,684,685,687,693,694,697,702,703,705,709,710,715,716,717,722,723,726,730,733,735,738,743,744,747,749,754,755,759,761,766,767,770,773,774,777,781,786,787,789,790,794,797,798,802,804,805,809,812,814,816,818,822,824,826,831,832,834,838,840,843
-----computeFrom-----
76,77
76,78
84,85
84,86
106,107
106,108
114,115
114,116
122,123
122,124
130,131
130,132
138,139
138,140
146,147
146,148
173,174
173,175
181,182
181,183
195,196
195,197
204,205
204,206
207,208
207,209
213,214
213,215
239,240
239,241
248,249
248,250
258,259
258,260
284,285
284,286
293,294
293,295
296,297
296,298
318,319
318,320
326,327
326,328
346,347
346,348
355,356
355,357
358,359
358,360
364,365
364,366
386,387
386,388
395,396
395,397
405,406
405,407
413,414
413,415
422,423
422,424
430,431
430,432
440,441
440,442
445,446
445,447
451,452
451,453
458,459
458,460
463,464
463,465
473,474
473,475
488,489
488,490
498,499
498,500
508,509
508,510
530,531
530,532
549,550
549,551
558,559
558,560
568,569
568,570
581,582
581,583
586,587
586,588
599,600
599,601
606,607
606,608
613,614
613,615
620,621
620,622
628,629
628,630
633,634
633,635
634,635
634,636
635,636
635,637
645,646
645,647
659,660
659,661
672,673
672,674
681,682
681,683
690,691
690,692
699,700
699,701
712,713
712,714
719,720
719,721
728,729
728,730
740,741
740,742
764,765
764,766
768,769
768,770
807,808
807,809
828,829
828,830
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int adfs_fill_super(struct super_block *sb, void *data, int silent){	struct adfs_discrecord *dr;	struct buffer_head *bh;	struct object_info root_obj;	unsigned char *b_data;	unsigned int blocksize;	struct adfs_sb_info *asb;	struct inode *root;	int ret = -EINVAL;	sb->s_flags |= MS_NODIRATIME;	asb = kzalloc(sizeof(*asb), GFP_KERNEL);	if (!asb)		return -ENOMEM;	sb->s_fs_info = asb;	/* set default options */	asb->s_uid = GLOBAL_ROOT_UID;	asb->s_gid = GLOBAL_ROOT_GID;	asb->s_owner_mask = ADFS_DEFAULT_OWNER_MASK;	asb->s_other_mask = ADFS_DEFAULT_OTHER_MASK;	asb->s_ftsuffix = 0;	if (parse_options(sb, data))		goto error;	sb_set_blocksize(sb, BLOCK_SIZE);	if (!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE))) {		adfs_error(sb, "unable to read superblock");		ret = -EIO;		goto error;	}	b_data = bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE);	if (adfs_checkbblk(b_data)) {		if (!silent)			printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}	dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);	/*	 * Do some sanity checks on the ADFS disc record	 */	if (adfs_checkdiscrecord(dr)) {		if (!silent)			printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}	blocksize = 1 << dr->log2secsize;	brelse(bh);	if (sb_set_blocksize(sb, blocksize)) {		bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize);		if (!bh) {			adfs_error(sb, "couldn't read superblock on "				"2nd try.");			ret = -EIO;			goto error;		}		b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize);		if (adfs_checkbblk(b_data)) {			adfs_error(sb, "disc record mismatch, very weird!");			ret = -EINVAL;			goto error_free_bh;		}		dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);	} else {		if (!silent)			printk(KERN_ERR "VFS: Unsupported blocksize on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error;	}	/*	 * blocksize on this device should now be set to the ADFS log2secsize	 */	sb->s_magic		= ADFS_SUPER_MAGIC;	asb->s_idlen		= dr->idlen;	asb->s_map_size		= dr->nzones | (dr->nzones_high << 8);	asb->s_map2blk		= dr->log2bpmb - dr->log2secsize;	asb->s_size    		= adfs_discsize(dr, sb->s_blocksize_bits);	asb->s_version 		= dr->format_version;	asb->s_log2sharesize	= dr->log2sharesize;	asb->s_map = adfs_read_map(sb, dr);	if (IS_ERR(asb->s_map)) {		ret =  PTR_ERR(asb->s_map);		goto error_free_bh;	}	brelse(bh);	/*	 * set up enough so that we can read an inode	 */	sb->s_op = &adfs_sops;	dr = (struct adfs_discrecord *)(asb->s_map[0].dm_bh->b_data + 4);	root_obj.parent_id = root_obj.file_id = le32_to_cpu(dr->root);	root_obj.name_len  = 0;	/* Set root object date as 01 Jan 1987 00:00:00 */	root_obj.loadaddr  = 0xfff0003f;	root_obj.execaddr  = 0xec22c000;	root_obj.size	   = ADFS_NEWDIR_SIZE;	root_obj.attr	   = ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |			     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ;	root_obj.filetype  = -1;	/*	 * If this is a F+ disk with variable length directories,	 * get the root_size from the disc record.	 */	if (asb->s_version) {		root_obj.size = le32_to_cpu(dr->root_size);		asb->s_dir     = &adfs_fplus_dir_ops;		asb->s_namelen = ADFS_FPLUS_NAME_LEN;	} else {		asb->s_dir     = &adfs_f_dir_ops;		asb->s_namelen = ADFS_F_NAME_LEN;	}	/*	 * ,xyz hex filetype suffix may be added by driver	 * to files that have valid RISC OS filetype	 */	if (asb->s_ftsuffix)		asb->s_namelen += 4;	sb->s_d_op = &adfs_dentry_operations;	root = adfs_iget(sb, &root_obj);	sb->s_root = d_make_root(root);	if (!sb->s_root) {		int i;		for (i = 0; i < asb->s_map_size; i++)			brelse(asb->s_map[i].dm_bh);		kfree(asb->s_map);		adfs_error(sb, "get root inode failed\n");		ret = -EIO;		goto error;	}	return 0;error_free_bh:	brelse(bh);error:	sb->s_fs_info = NULL;	kfree(asb);	return ret;}
static int
adfs_fill_super(struct super_block *sb, void *data, int silent)
adfs_fill_super
struct super_block *sb
struct super_block
super_block
*sb
*
sb
void *data
void
*data
*
data
int silent
int
silent
silent
{	struct adfs_discrecord *dr;	struct buffer_head *bh;	struct object_info root_obj;	unsigned char *b_data;	unsigned int blocksize;	struct adfs_sb_info *asb;	struct inode *root;	int ret = -EINVAL;	sb->s_flags |= MS_NODIRATIME;	asb = kzalloc(sizeof(*asb), GFP_KERNEL);	if (!asb)		return -ENOMEM;	sb->s_fs_info = asb;	/* set default options */	asb->s_uid = GLOBAL_ROOT_UID;	asb->s_gid = GLOBAL_ROOT_GID;	asb->s_owner_mask = ADFS_DEFAULT_OWNER_MASK;	asb->s_other_mask = ADFS_DEFAULT_OTHER_MASK;	asb->s_ftsuffix = 0;	if (parse_options(sb, data))		goto error;	sb_set_blocksize(sb, BLOCK_SIZE);	if (!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE))) {		adfs_error(sb, "unable to read superblock");		ret = -EIO;		goto error;	}	b_data = bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE);	if (adfs_checkbblk(b_data)) {		if (!silent)			printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}	dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);	/*	 * Do some sanity checks on the ADFS disc record	 */	if (adfs_checkdiscrecord(dr)) {		if (!silent)			printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}	blocksize = 1 << dr->log2secsize;	brelse(bh);	if (sb_set_blocksize(sb, blocksize)) {		bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize);		if (!bh) {			adfs_error(sb, "couldn't read superblock on "				"2nd try.");			ret = -EIO;			goto error;		}		b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize);		if (adfs_checkbblk(b_data)) {			adfs_error(sb, "disc record mismatch, very weird!");			ret = -EINVAL;			goto error_free_bh;		}		dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);	} else {		if (!silent)			printk(KERN_ERR "VFS: Unsupported blocksize on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error;	}	/*	 * blocksize on this device should now be set to the ADFS log2secsize	 */	sb->s_magic		= ADFS_SUPER_MAGIC;	asb->s_idlen		= dr->idlen;	asb->s_map_size		= dr->nzones | (dr->nzones_high << 8);	asb->s_map2blk		= dr->log2bpmb - dr->log2secsize;	asb->s_size    		= adfs_discsize(dr, sb->s_blocksize_bits);	asb->s_version 		= dr->format_version;	asb->s_log2sharesize	= dr->log2sharesize;	asb->s_map = adfs_read_map(sb, dr);	if (IS_ERR(asb->s_map)) {		ret =  PTR_ERR(asb->s_map);		goto error_free_bh;	}	brelse(bh);	/*	 * set up enough so that we can read an inode	 */	sb->s_op = &adfs_sops;	dr = (struct adfs_discrecord *)(asb->s_map[0].dm_bh->b_data + 4);	root_obj.parent_id = root_obj.file_id = le32_to_cpu(dr->root);	root_obj.name_len  = 0;	/* Set root object date as 01 Jan 1987 00:00:00 */	root_obj.loadaddr  = 0xfff0003f;	root_obj.execaddr  = 0xec22c000;	root_obj.size	   = ADFS_NEWDIR_SIZE;	root_obj.attr	   = ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |			     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ;	root_obj.filetype  = -1;	/*	 * If this is a F+ disk with variable length directories,	 * get the root_size from the disc record.	 */	if (asb->s_version) {		root_obj.size = le32_to_cpu(dr->root_size);		asb->s_dir     = &adfs_fplus_dir_ops;		asb->s_namelen = ADFS_FPLUS_NAME_LEN;	} else {		asb->s_dir     = &adfs_f_dir_ops;		asb->s_namelen = ADFS_F_NAME_LEN;	}	/*	 * ,xyz hex filetype suffix may be added by driver	 * to files that have valid RISC OS filetype	 */	if (asb->s_ftsuffix)		asb->s_namelen += 4;	sb->s_d_op = &adfs_dentry_operations;	root = adfs_iget(sb, &root_obj);	sb->s_root = d_make_root(root);	if (!sb->s_root) {		int i;		for (i = 0; i < asb->s_map_size; i++)			brelse(asb->s_map[i].dm_bh);		kfree(asb->s_map);		adfs_error(sb, "get root inode failed\n");		ret = -EIO;		goto error;	}	return 0;error_free_bh:	brelse(bh);error:	sb->s_fs_info = NULL;	kfree(asb);	return ret;}
struct adfs_discrecord *dr;
struct adfs_discrecord *dr;
struct adfs_discrecord
adfs_discrecord
*dr
*
dr
struct buffer_head *bh;
struct buffer_head *bh;
struct buffer_head
buffer_head
*bh
*
bh
struct object_info root_obj;
struct object_info root_obj;
struct object_info
object_info
root_obj
root_obj
unsigned char *b_data;
unsigned char *b_data;
unsigned char
*b_data
*
b_data
unsigned int blocksize;
unsigned int blocksize;
unsigned int
blocksize
blocksize
struct adfs_sb_info *asb;
struct adfs_sb_info *asb;
struct adfs_sb_info
adfs_sb_info
*asb
*
asb
struct inode *root;
struct inode *root;
struct inode
inode
*root
*
root
int ret = -EINVAL;
int ret = -EINVAL;
int
ret = -EINVAL
ret
= -EINVAL
-EINVAL
EINVAL
EINVAL
sb->s_flags |= MS_NODIRATIME;
sb->s_flags |= MS_NODIRATIME
sb->s_flags
sb
sb
s_flags
MS_NODIRATIME
MS_NODIRATIME
asb = kzalloc(sizeof(*asb), GFP_KERNEL);
asb = kzalloc(sizeof(*asb), GFP_KERNEL)
asb
asb
kzalloc(sizeof(*asb), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*asb)
(*asb)
*asb
asb
asb
GFP_KERNEL
GFP_KERNEL
if (!asb)		return -ENOMEM;
!asb
asb
asb
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
sb->s_fs_info = asb;
sb->s_fs_info = asb
sb->s_fs_info
sb
sb
s_fs_info
asb
asb
asb->s_uid = GLOBAL_ROOT_UID;
asb->s_uid = GLOBAL_ROOT_UID
asb->s_uid
asb
asb
s_uid
GLOBAL_ROOT_UID
GLOBAL_ROOT_UID
asb->s_gid = GLOBAL_ROOT_GID;
asb->s_gid = GLOBAL_ROOT_GID
asb->s_gid
asb
asb
s_gid
GLOBAL_ROOT_GID
GLOBAL_ROOT_GID
asb->s_owner_mask = ADFS_DEFAULT_OWNER_MASK;
asb->s_owner_mask = ADFS_DEFAULT_OWNER_MASK
asb->s_owner_mask
asb
asb
s_owner_mask
ADFS_DEFAULT_OWNER_MASK
ADFS_DEFAULT_OWNER_MASK
asb->s_other_mask = ADFS_DEFAULT_OTHER_MASK;
asb->s_other_mask = ADFS_DEFAULT_OTHER_MASK
asb->s_other_mask
asb
asb
s_other_mask
ADFS_DEFAULT_OTHER_MASK
ADFS_DEFAULT_OTHER_MASK
asb->s_ftsuffix = 0;
asb->s_ftsuffix = 0
asb->s_ftsuffix
asb
asb
s_ftsuffix
0
if (parse_options(sb, data))		goto error;
parse_options(sb, data)
parse_options
parse_options
sb
sb
data
data
goto error;
error
sb_set_blocksize(sb, BLOCK_SIZE);
sb_set_blocksize(sb, BLOCK_SIZE)
sb_set_blocksize
sb_set_blocksize
sb
sb
BLOCK_SIZE
BLOCK_SIZE
if (!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE))) {		adfs_error(sb, "unable to read superblock");		ret = -EIO;		goto error;	}
!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE))
(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE))
bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE)
bh
bh
sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE)
sb_bread
sb_bread
sb
sb
ADFS_DISCRECORD / BLOCK_SIZE
ADFS_DISCRECORD
ADFS_DISCRECORD
BLOCK_SIZE
BLOCK_SIZE
{		adfs_error(sb, "unable to read superblock");		ret = -EIO;		goto error;	}
adfs_error(sb, "unable to read superblock");
adfs_error(sb, "unable to read superblock")
adfs_error
adfs_error
sb
sb
"unable to read superblock"
ret = -EIO;
ret = -EIO
ret
ret
-EIO
EIO
EIO
goto error;
error
b_data = bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE);
b_data = bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE)
b_data
b_data
bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE)
bh->b_data
bh
bh
b_data
(ADFS_DISCRECORD % BLOCK_SIZE)
ADFS_DISCRECORD % BLOCK_SIZE
ADFS_DISCRECORD
ADFS_DISCRECORD
BLOCK_SIZE
BLOCK_SIZE
if (adfs_checkbblk(b_data)) {		if (!silent)			printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}
adfs_checkbblk(b_data)
adfs_checkbblk
adfs_checkbblk
b_data
b_data
{		if (!silent)			printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}
if (!silent)			printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);
!silent
silent
silent
printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);
printk("VFS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id)
printk
printk
"VFS: Can't find an adfs filesystem on dev "				"%s.\n"
sb->s_id
sb
sb
s_id
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto error_free_bh;
error_free_bh
dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);
dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET)
dr
dr
(struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET)
struct adfs_discrecord *
struct adfs_discrecord
adfs_discrecord
*
*
(b_data + ADFS_DR_OFFSET)
b_data + ADFS_DR_OFFSET
b_data
b_data
ADFS_DR_OFFSET
ADFS_DR_OFFSET
if (adfs_checkdiscrecord(dr)) {		if (!silent)			printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}
adfs_checkdiscrecord(dr)
adfs_checkdiscrecord
adfs_checkdiscrecord
dr
dr
{		if (!silent)			printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error_free_bh;	}
if (!silent)			printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);
!silent
silent
silent
printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id);
printk("VPS: Can't find an adfs filesystem on dev "				"%s.\n", sb->s_id)
printk
printk
"VPS: Can't find an adfs filesystem on dev "				"%s.\n"
sb->s_id
sb
sb
s_id
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto error_free_bh;
error_free_bh
blocksize = 1 << dr->log2secsize;
blocksize = 1 << dr->log2secsize
blocksize
blocksize
1 << dr->log2secsize
1
dr->log2secsize
dr
dr
log2secsize
brelse(bh);
brelse(bh)
brelse
brelse
bh
bh
if (sb_set_blocksize(sb, blocksize)) {		bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize);		if (!bh) {			adfs_error(sb, "couldn't read superblock on "				"2nd try.");			ret = -EIO;			goto error;		}		b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize);		if (adfs_checkbblk(b_data)) {			adfs_error(sb, "disc record mismatch, very weird!");			ret = -EINVAL;			goto error_free_bh;		}		dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);	} else {		if (!silent)			printk(KERN_ERR "VFS: Unsupported blocksize on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error;	}
sb_set_blocksize(sb, blocksize)
sb_set_blocksize
sb_set_blocksize
sb
sb
blocksize
blocksize
{		bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize);		if (!bh) {			adfs_error(sb, "couldn't read superblock on "				"2nd try.");			ret = -EIO;			goto error;		}		b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize);		if (adfs_checkbblk(b_data)) {			adfs_error(sb, "disc record mismatch, very weird!");			ret = -EINVAL;			goto error_free_bh;		}		dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);	}
bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize);
bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize)
bh
bh
sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize)
sb_bread
sb_bread
sb
sb
ADFS_DISCRECORD / sb->s_blocksize
ADFS_DISCRECORD
ADFS_DISCRECORD
sb->s_blocksize
sb
sb
s_blocksize
if (!bh) {			adfs_error(sb, "couldn't read superblock on "				"2nd try.");			ret = -EIO;			goto error;		}
!bh
bh
bh
{			adfs_error(sb, "couldn't read superblock on "				"2nd try.");			ret = -EIO;			goto error;		}
adfs_error(sb, "couldn't read superblock on "				"2nd try.");
adfs_error(sb, "couldn't read superblock on "				"2nd try.")
adfs_error
adfs_error
sb
sb
"couldn't read superblock on "				"2nd try."
ret = -EIO;
ret = -EIO
ret
ret
-EIO
EIO
EIO
goto error;
error
b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize);
b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize)
b_data
b_data
bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize)
bh->b_data
bh
bh
b_data
(ADFS_DISCRECORD % sb->s_blocksize)
ADFS_DISCRECORD % sb->s_blocksize
ADFS_DISCRECORD
ADFS_DISCRECORD
sb->s_blocksize
sb
sb
s_blocksize
if (adfs_checkbblk(b_data)) {			adfs_error(sb, "disc record mismatch, very weird!");			ret = -EINVAL;			goto error_free_bh;		}
adfs_checkbblk(b_data)
adfs_checkbblk
adfs_checkbblk
b_data
b_data
{			adfs_error(sb, "disc record mismatch, very weird!");			ret = -EINVAL;			goto error_free_bh;		}
adfs_error(sb, "disc record mismatch, very weird!");
adfs_error(sb, "disc record mismatch, very weird!")
adfs_error
adfs_error
sb
sb
"disc record mismatch, very weird!"
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto error_free_bh;
error_free_bh
dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET);
dr = (struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET)
dr
dr
(struct adfs_discrecord *)(b_data + ADFS_DR_OFFSET)
struct adfs_discrecord *
struct adfs_discrecord
adfs_discrecord
*
*
(b_data + ADFS_DR_OFFSET)
b_data + ADFS_DR_OFFSET
b_data
b_data
ADFS_DR_OFFSET
ADFS_DR_OFFSET
{		if (!silent)			printk(KERN_ERR "VFS: Unsupported blocksize on dev "				"%s.\n", sb->s_id);		ret = -EINVAL;		goto error;	}
if (!silent)			printk(KERN_ERR "VFS: Unsupported blocksize on dev "				"%s.\n", sb->s_id);
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto error;
error
sb->s_magic		= ADFS_SUPER_MAGIC;
sb->s_magic		= ADFS_SUPER_MAGIC
sb->s_magic
sb
sb
s_magic
ADFS_SUPER_MAGIC
ADFS_SUPER_MAGIC
asb->s_idlen		= dr->idlen;
asb->s_idlen		= dr->idlen
asb->s_idlen
asb
asb
s_idlen
dr->idlen
dr
dr
idlen
asb->s_map_size		= dr->nzones | (dr->nzones_high << 8);
asb->s_map_size		= dr->nzones | (dr->nzones_high << 8)
asb->s_map_size
asb
asb
s_map_size
dr->nzones | (dr->nzones_high << 8)
dr->nzones
dr
dr
nzones
(dr->nzones_high << 8)
dr->nzones_high << 8
dr->nzones_high
dr
dr
nzones_high
8
asb->s_map2blk		= dr->log2bpmb - dr->log2secsize;
asb->s_map2blk		= dr->log2bpmb - dr->log2secsize
asb->s_map2blk
asb
asb
s_map2blk
dr->log2bpmb - dr->log2secsize
dr->log2bpmb
dr
dr
log2bpmb
dr->log2secsize
dr
dr
log2secsize
asb->s_size    		= adfs_discsize(dr, sb->s_blocksize_bits);
asb->s_size    		= adfs_discsize(dr, sb->s_blocksize_bits)
asb->s_size
asb
asb
s_size
adfs_discsize(dr, sb->s_blocksize_bits)
adfs_discsize
adfs_discsize
dr
dr
sb->s_blocksize_bits
sb
sb
s_blocksize_bits
asb->s_version 		= dr->format_version;
asb->s_version 		= dr->format_version
asb->s_version
asb
asb
s_version
dr->format_version
dr
dr
format_version
asb->s_log2sharesize	= dr->log2sharesize;
asb->s_log2sharesize	= dr->log2sharesize
asb->s_log2sharesize
asb
asb
s_log2sharesize
dr->log2sharesize
dr
dr
log2sharesize
asb->s_map = adfs_read_map(sb, dr);
asb->s_map = adfs_read_map(sb, dr)
asb->s_map
asb
asb
s_map
adfs_read_map(sb, dr)
adfs_read_map
adfs_read_map
sb
sb
dr
dr
if (IS_ERR(asb->s_map)) {		ret =  PTR_ERR(asb->s_map);		goto error_free_bh;	}
IS_ERR(asb->s_map)
IS_ERR
IS_ERR
asb->s_map
asb
asb
s_map
{		ret =  PTR_ERR(asb->s_map);		goto error_free_bh;	}
ret =  PTR_ERR(asb->s_map);
ret =  PTR_ERR(asb->s_map)
ret
ret
PTR_ERR(asb->s_map)
PTR_ERR
PTR_ERR
asb->s_map
asb
asb
s_map
goto error_free_bh;
error_free_bh
brelse(bh);
brelse(bh)
brelse
brelse
bh
bh
sb->s_op = &adfs_sops;
sb->s_op = &adfs_sops
sb->s_op
sb
sb
s_op
&adfs_sops
adfs_sops
adfs_sops
dr = (struct adfs_discrecord *)(asb->s_map[0].dm_bh->b_data + 4);
dr = (struct adfs_discrecord *)(asb->s_map[0].dm_bh->b_data + 4)
dr
dr
(struct adfs_discrecord *)(asb->s_map[0].dm_bh->b_data + 4)
struct adfs_discrecord *
struct adfs_discrecord
adfs_discrecord
*
*
(asb->s_map[0].dm_bh->b_data + 4)
asb->s_map[0].dm_bh->b_data + 4
asb->s_map[0].dm_bh->b_data
asb->s_map[0].dm_bh
asb->s_map[0]
asb->s_map
asb
asb
s_map
0
dm_bh
b_data
4
root_obj.parent_id = root_obj.file_id = le32_to_cpu(dr->root);
root_obj.parent_id = root_obj.file_id = le32_to_cpu(dr->root)
root_obj.parent_id
root_obj
root_obj
parent_id
root_obj.file_id = le32_to_cpu(dr->root)
root_obj.file_id
root_obj
root_obj
file_id
le32_to_cpu(dr->root)
le32_to_cpu
le32_to_cpu
dr->root
dr
dr
root
root_obj.name_len  = 0;
root_obj.name_len  = 0
root_obj.name_len
root_obj
root_obj
name_len
0
root_obj.loadaddr  = 0xfff0003f;
root_obj.loadaddr  = 0xfff0003f
root_obj.loadaddr
root_obj
root_obj
loadaddr
0xfff0003f
root_obj.execaddr  = 0xec22c000;
root_obj.execaddr  = 0xec22c000
root_obj.execaddr
root_obj
root_obj
execaddr
0xec22c000
root_obj.size	   = ADFS_NEWDIR_SIZE;
root_obj.size	   = ADFS_NEWDIR_SIZE
root_obj.size
root_obj
root_obj
size
ADFS_NEWDIR_SIZE
ADFS_NEWDIR_SIZE
root_obj.attr	   = ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |			     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ;
root_obj.attr	   = ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |			     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ
root_obj.attr
root_obj
root_obj
attr
ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |			     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ
ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |			     ADFS_NDA_OWNER_WRITE
ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ
ADFS_NDA_DIRECTORY
ADFS_NDA_DIRECTORY
ADFS_NDA_OWNER_READ
ADFS_NDA_OWNER_READ
ADFS_NDA_OWNER_WRITE
ADFS_NDA_OWNER_WRITE
ADFS_NDA_PUBLIC_READ
ADFS_NDA_PUBLIC_READ
root_obj.filetype  = -1;
root_obj.filetype  = -1
root_obj.filetype
root_obj
root_obj
filetype
-1
1
if (asb->s_version) {		root_obj.size = le32_to_cpu(dr->root_size);		asb->s_dir     = &adfs_fplus_dir_ops;		asb->s_namelen = ADFS_FPLUS_NAME_LEN;	} else {		asb->s_dir     = &adfs_f_dir_ops;		asb->s_namelen = ADFS_F_NAME_LEN;	}
asb->s_version
asb
asb
s_version
{		root_obj.size = le32_to_cpu(dr->root_size);		asb->s_dir     = &adfs_fplus_dir_ops;		asb->s_namelen = ADFS_FPLUS_NAME_LEN;	}
root_obj.size = le32_to_cpu(dr->root_size);
root_obj.size = le32_to_cpu(dr->root_size)
root_obj.size
root_obj
root_obj
size
le32_to_cpu(dr->root_size)
le32_to_cpu
le32_to_cpu
dr->root_size
dr
dr
root_size
asb->s_dir     = &adfs_fplus_dir_ops;
asb->s_dir     = &adfs_fplus_dir_ops
asb->s_dir
asb
asb
s_dir
&adfs_fplus_dir_ops
adfs_fplus_dir_ops
adfs_fplus_dir_ops
asb->s_namelen = ADFS_FPLUS_NAME_LEN;
asb->s_namelen = ADFS_FPLUS_NAME_LEN
asb->s_namelen
asb
asb
s_namelen
ADFS_FPLUS_NAME_LEN
ADFS_FPLUS_NAME_LEN
{		asb->s_dir     = &adfs_f_dir_ops;		asb->s_namelen = ADFS_F_NAME_LEN;	}
asb->s_dir     = &adfs_f_dir_ops;
asb->s_dir     = &adfs_f_dir_ops
asb->s_dir
asb
asb
s_dir
&adfs_f_dir_ops
adfs_f_dir_ops
adfs_f_dir_ops
asb->s_namelen = ADFS_F_NAME_LEN;
asb->s_namelen = ADFS_F_NAME_LEN
asb->s_namelen
asb
asb
s_namelen
ADFS_F_NAME_LEN
ADFS_F_NAME_LEN
if (asb->s_ftsuffix)		asb->s_namelen += 4;
asb->s_ftsuffix
asb
asb
s_ftsuffix
asb->s_namelen += 4;
asb->s_namelen += 4
asb->s_namelen
asb
asb
s_namelen
4
sb->s_d_op = &adfs_dentry_operations;
sb->s_d_op = &adfs_dentry_operations
sb->s_d_op
sb
sb
s_d_op
&adfs_dentry_operations
adfs_dentry_operations
adfs_dentry_operations
root = adfs_iget(sb, &root_obj);
root = adfs_iget(sb, &root_obj)
root
root
adfs_iget(sb, &root_obj)
adfs_iget
adfs_iget
sb
sb
&root_obj
root_obj
root_obj
sb->s_root = d_make_root(root);
sb->s_root = d_make_root(root)
sb->s_root
sb
sb
s_root
d_make_root(root)
d_make_root
d_make_root
root
root
if (!sb->s_root) {		int i;		for (i = 0; i < asb->s_map_size; i++)			brelse(asb->s_map[i].dm_bh);		kfree(asb->s_map);		adfs_error(sb, "get root inode failed\n");		ret = -EIO;		goto error;	}
!sb->s_root
sb->s_root
sb
sb
s_root
{		int i;		for (i = 0; i < asb->s_map_size; i++)			brelse(asb->s_map[i].dm_bh);		kfree(asb->s_map);		adfs_error(sb, "get root inode failed\n");		ret = -EIO;		goto error;	}
int i;
int i;
int
i
i
for (i = 0; i < asb->s_map_size; i++)			brelse(asb->s_map[i].dm_bh);
i = 0;
i = 0
i
i
0
i < asb->s_map_size
i
i
asb->s_map_size
asb
asb
s_map_size
i++
i
i
brelse(asb->s_map[i].dm_bh);
brelse(asb->s_map[i].dm_bh)
brelse
brelse
asb->s_map[i].dm_bh
asb->s_map[i]
asb->s_map
asb
asb
s_map
i
i
dm_bh
kfree(asb->s_map);
kfree(asb->s_map)
kfree
kfree
asb->s_map
asb
asb
s_map
adfs_error(sb, "get root inode failed\n");
adfs_error(sb, "get root inode failed\n")
adfs_error
adfs_error
sb
sb
"get root inode failed\n"
ret = -EIO;
ret = -EIO
ret
ret
-EIO
EIO
EIO
goto error;
error
return 0;
0
error_free_bh:	brelse(bh);
error_free_bh
brelse(bh);
brelse(bh)
brelse
brelse
bh
bh
error:	sb->s_fs_info = NULL;
error
sb->s_fs_info = NULL;
sb->s_fs_info = NULL
sb->s_fs_info
sb
sb
s_fs_info
NULL
NULL
kfree(asb);
kfree(asb)
kfree
kfree
asb
asb
return ret;
ret
ret
-----joern-----
(36,41,0)
(389,129,0)
(349,84,0)
(390,57,0)
(340,80,0)
(427,313,0)
(445,49,0)
(184,288,0)
(139,80,0)
(373,53,0)
(454,414,0)
(245,232,0)
(25,234,0)
(199,120,0)
(165,162,0)
(73,267,0)
(333,397,0)
(51,232,0)
(46,17,0)
(220,237,0)
(159,110,0)
(222,17,0)
(24,68,0)
(356,156,0)
(110,294,0)
(360,17,0)
(359,86,0)
(379,156,0)
(251,344,0)
(86,361,0)
(269,22,0)
(76,123,0)
(479,61,0)
(159,221,0)
(450,17,0)
(462,406,0)
(425,328,0)
(360,180,0)
(143,129,0)
(64,463,0)
(157,126,0)
(480,129,0)
(72,259,0)
(449,270,0)
(72,118,0)
(234,419,0)
(4,327,0)
(77,53,0)
(375,394,0)
(337,323,0)
(26,80,0)
(189,102,0)
(397,354,0)
(173,299,0)
(315,129,0)
(219,80,0)
(171,480,0)
(181,429,0)
(99,17,0)
(198,480,0)
(158,76,0)
(356,163,0)
(79,295,0)
(199,64,0)
(32,167,0)
(209,129,0)
(246,147,0)
(47,238,0)
(179,72,0)
(428,73,0)
(399,296,0)
(473,125,0)
(72,261,0)
(154,416,0)
(430,78,0)
(219,173,0)
(202,450,0)
(417,406,0)
(415,49,0)
(460,429,0)
(464,86,0)
(338,126,0)
(152,225,0)
(472,17,0)
(217,166,0)
(323,279,0)
(130,392,0)
(372,22,0)
(266,156,0)
(140,443,0)
(368,459,0)
(392,17,0)
(480,294,0)
(443,140,0)
(306,273,0)
(148,441,0)
(111,479,0)
(336,298,0)
(185,17,0)
(195,252,0)
(64,199,0)
(59,51,0)
(320,52,0)
(343,17,0)
(350,117,0)
(196,17,0)
(234,25,0)
(244,311,0)
(351,456,0)
(212,340,0)
(329,216,0)
(15,344,0)
(75,58,0)
(435,305,0)
(348,129,0)
(383,17,0)
(294,266,0)
(462,94,0)
(390,218,0)
(191,290,0)
(331,68,0)
(51,59,0)
(242,7,0)
(323,353,0)
(128,267,0)
(287,63,0)
(189,17,0)
(326,342,0)
(293,156,0)
(180,360,0)
(91,7,0)
(357,310,0)
(118,129,0)
(252,17,0)
(96,119,0)
(371,39,0)
(50,475,0)
(225,170,0)
(289,73,0)
(313,216,0)
(480,198,0)
(90,17,0)
(415,67,0)
(218,237,0)
(215,348,0)
(240,462,0)
(137,279,0)
(113,412,0)
(149,305,0)
(319,190,0)
(462,295,0)
(403,348,0)
(479,80,0)
(396,78,0)
(423,166,0)
(352,94,0)
(186,292,0)
(72,469,0)
(212,203,0)
(55,46,0)
(409,273,0)
(102,150,0)
(265,200,0)
(227,17,0)
(175,468,0)
(469,129,0)
(443,456,0)
(23,17,0)
(72,209,0)
(10,375,0)
(347,369,0)
(22,80,0)
(129,456,0)
(448,213,0)
(266,294,0)
(164,17,0)
(378,109,0)
(21,418,0)
(406,28,0)
(72,190,0)
(304,43,0)
(462,247,0)
(193,139,0)
(325,338,0)
(33,379,0)
(7,89,0)
(167,273,0)
(72,112,0)
(284,118,0)
(273,409,0)
(465,146,0)
(418,432,0)
(154,366,0)
(195,267,0)
(296,17,0)
(299,173,0)
(53,373,0)
(259,129,0)
(5,354,0)
(462,469,0)
(339,131,0)
(123,275,0)
(5,225,0)
(467,208,0)
(249,117,0)
(469,99,0)
(86,30,0)
(416,154,0)
(322,30,0)
(131,432,0)
(150,208,0)
(314,133,0)
(300,143,0)
(420,143,0)
(44,315,0)
(30,178,0)
(453,340,0)
(315,294,0)
(117,227,0)
(461,142,0)
(279,323,0)
(0,190,0)
(462,458,0)
(72,454,0)
(463,419,0)
(456,129,0)
(409,129,0)
(270,170,0)
(409,294,0)
(381,185,0)
(3,317,0)
(102,189,0)
(292,414,0)
(59,275,0)
(107,293,0)
(142,73,0)
(9,110,0)
(457,327,0)
(312,479,0)
(394,375,0)
(95,291,0)
(450,419,0)
(160,68,0)
(204,180,0)
(176,39,0)
(252,11,0)
(424,444,0)
(129,17,0)
(282,389,0)
(119,64,0)
(190,156,0)
(85,295,0)
(274,74,0)
(66,28,0)
(72,247,0)
(167,445,0)
(225,338,0)
(261,392,0)
(225,60,0)
(72,230,0)
(13,17,0)
(117,156,0)
(178,30,0)
(451,207,0)
(119,256,0)
(216,313,0)
(72,406,0)
(459,129,0)
(131,380,0)
(361,86,0)
(276,17,0)
(372,17,0)
(97,408,0)
(58,189,0)
(201,441,0)
(127,230,0)
(2,481,0)
(235,356,0)
(100,178,0)
(268,126,0)
(273,167,0)
(143,372,0)
(386,193,0)
(462,143,0)
(462,166,0)
(247,290,0)
(142,180,0)
(222,415,0)
(462,454,0)
(429,181,0)
(87,17,0)
(193,156,0)
(280,93,0)
(231,60,0)
(328,17,0)
(72,295,0)
(29,221,0)
(462,98,0)
(272,195,0)
(118,187,0)
(436,122,0)
(218,390,0)
(288,275,0)
(439,259,0)
(407,409,0)
(141,123,0)
(238,156,0)
(172,120,0)
(150,102,0)
(400,454,0)
(414,17,0)
(30,86,0)
(228,429,0)
(387,356,0)
(16,22,0)
(187,398,0)
(52,17,0)
(458,129,0)
(173,219,0)
(112,59,0)
(248,212,0)
(187,317,0)
(49,415,0)
(57,390,0)
(477,173,0)
(88,14,0)
(72,7,0)
(105,260,0)
(462,261,0)
(307,17,0)
(98,475,0)
(311,156,0)
(145,338,0)
(78,221,0)
(72,125,0)
(256,119,0)
(379,14,0)
(48,139,0)
(34,266,0)
(462,118,0)
(211,247,0)
(11,291,0)
(197,112,0)
(214,261,0)
(188,140,0)
(125,129,0)
(405,437,0)
(174,261,0)
(65,324,0)
(342,74,0)
(456,443,0)
(432,418,0)
(61,17,0)
(60,109,0)
(434,394,0)
(441,156,0)
(304,80,0)
(72,98,0)
(277,369,0)
(257,181,0)
(177,129,0)
(250,99,0)
(161,366,0)
(20,98,0)
(39,129,0)
(72,117,0)
(311,13,0)
(298,185,0)
(153,93,0)
(155,418,0)
(94,343,0)
(418,294,0)
(422,17,0)
(210,248,0)
(411,163,0)
(62,370,0)
(54,252,0)
(283,441,0)
(298,324,0)
(144,17,0)
(286,459,0)
(11,147,0)
(373,17,0)
(106,315,0)
(458,288,0)
(316,17,0)
(335,116,0)
(67,415,0)
(49,445,0)
(459,203,0)
(116,129,0)
(462,112,0)
(267,128,0)
(309,347,0)
(385,247,0)
(298,156,0)
(295,280,0)
(30,156,0)
(410,164,0)
(474,216,0)
(321,147,0)
(291,11,0)
(377,104,0)
(93,280,0)
(76,129,0)
(11,252,0)
(447,232,0)
(208,150,0)
(124,27,0)
(226,331,0)
(418,129,0)
(72,311,0)
(71,118,0)
(72,63,0)
(344,129,0)
(115,291,0)
(72,315,0)
(72,408,0)
(151,160,0)
(440,327,0)
(462,58,0)
(104,199,0)
(293,46,0)
(218,353,0)
(170,270,0)
(376,416,0)
(110,129,0)
(441,373,0)
(60,444,0)
(304,468,0)
(208,222,0)
(279,129,0)
(363,343,0)
(166,213,0)
(139,89,0)
(299,481,0)
(462,230,0)
(462,41,0)
(192,234,0)
(262,178,0)
(238,25,0)
(462,347,0)
(263,259,0)
(72,347,0)
(207,194,0)
(41,129,0)
(267,73,0)
(401,129,0)
(5,72,0)
(45,133,0)
(133,360,0)
(362,353,0)
(341,112,0)
(14,379,0)
(260,122,0)
(466,58,0)
(223,230,0)
(94,129,0)
(103,458,0)
(80,304,0)
(56,379,0)
(72,76,0)
(345,311,0)
(182,84,0)
(206,17,0)
(40,208,0)
(462,76,0)
(61,479,0)
(27,200,0)
(13,129,0)
(468,199,0)
(481,299,0)
(243,49,0)
(22,372,0)
(89,139,0)
(463,64,0)
(450,86,0)
(69,238,0)
(123,141,0)
(28,17,0)
(19,219,0)
(462,459,0)
(125,52,0)
(183,141,0)
(419,120,0)
(72,58,0)
(455,17,0)
(82,25,0)
(225,375,0)
(84,330,0)
(4,17,0)
(35,17,0)
(136,17,0)
(452,41,0)
(72,166,0)
(462,293,0)
(432,131,0)
(445,167,0)
(212,248,0)
(365,17,0)
(109,60,0)
(481,80,0)
(305,156,0)
(72,344,0)
(236,116,0)
(147,11,0)
(462,7,0)
(135,125,0)
(254,17,0)
(18,17,0)
(170,163,0)
(271,17,0)
(233,219,0)
(169,279,0)
(225,131,0)
(180,142,0)
(63,164,0)
(280,17,0)
(216,156,0)
(310,156,0)
(227,162,0)
(72,458,0)
(375,370,0)
(181,93,0)
(72,459,0)
(310,17,0)
(278,209,0)
(225,154,0)
(324,298,0)
(72,293,0)
(374,390,0)
(470,98,0)
(80,120,0)
(31,380,0)
(248,80,0)
(46,55,0)
(92,445,0)
(234,156,0)
(232,51,0)
(166,129,0)
(89,17,0)
(205,428,0)
(364,248,0)
(122,260,0)
(78,156,0)
(462,348,0)
(267,195,0)
(72,143,0)
(291,86,0)
(258,199,0)
(168,266,0)
(342,221,0)
(308,419,0)
(64,119,0)
(408,102,0)
(438,256,0)
(206,299,0)
(260,17,0)
(200,27,0)
(415,222,0)
(42,469,0)
(446,142,0)
(437,353,0)
(290,17,0)
(225,17,0)
(281,463,0)
(475,17,0)
(25,238,0)
(43,304,0)
(261,156,0)
(369,17,0)
(70,454,0)
(53,185,0)
(303,409,0)
(225,260,0)
(279,206,0)
(421,17,0)
(133,156,0)
(431,222,0)
(426,458,0)
(237,129,0)
(402,221,0)
(302,110,0)
(8,221,0)
(413,154,0)
(358,444,0)
(194,17,0)
(110,159,0)
(84,156,0)
(225,342,0)
(462,311,0)
(406,129,0)
(7,129,0)
(139,193,0)
(255,293,0)
(146,366,0)
(318,94,0)
(138,406,0)
(1,256,0)
(441,148,0)
(468,304,0)
(237,218,0)
(305,81,0)
(213,398,0)
(207,156,0)
(384,408,0)
(462,63,0)
(462,259,0)
(462,408,0)
(478,120,0)
(239,76,0)
(419,234,0)
(203,212,0)
(395,347,0)
(41,4,0)
(476,55,0)
(72,17,0)
(266,80,0)
(462,344,0)
(299,206,0)
(224,207,0)
(462,125,0)
(134,469,0)
(412,252,0)
(367,340,0)
(297,146,0)
(121,481,0)
(12,463,0)
(241,360,0)
(98,156,0)
(327,4,0)
(327,80,0)
(264,370,0)
(230,383,0)
(146,156,0)
(340,212,0)
(185,298,0)
(442,81,0)
(203,17,0)
(388,195,0)
(93,181,0)
(72,94,0)
(162,227,0)
(73,17,0)
(232,222,0)
(338,325,0)
(334,24,0)
(83,310,0)
(328,419,0)
(354,261,0)
(190,373,0)
(294,17,0)
(256,156,0)
(6,218,0)
(38,468,0)
(393,353,0)
(332,308,0)
(229,209,0)
(359,17,0)
(404,237,0)
(74,342,0)
(225,200,0)
(72,348,0)
(355,480,0)
(317,187,0)
(344,296,0)
(391,383,0)
(389,17,0)
(237,294,0)
(433,17,0)
(462,315,0)
(471,63,0)
(414,292,0)
(200,81,0)
(72,41,0)
(348,206,0)
(285,13,0)
(132,177,0)
(346,325,0)
(382,193,0)
(253,359,0)
(259,61,0)
(101,170,0)
(37,194,0)
(108,419,0)
(209,462,0)
(301,17,0)
(385,211,1)
(293,255,1)
(204,241,1)
(191,247,1)
(429,228,1)
(291,95,1)
(139,193,1)
(409,294,1)
(32,273,1)
(22,80,1)
(28,66,1)
(178,262,1)
(159,110,1)
(379,156,1)
(224,451,1)
(20,470,1)
(304,468,1)
(211,369,1)
(462,125,1)
(115,54,1)
(89,139,1)
(452,36,1)
(470,80,1)
(462,112,1)
(443,140,1)
(341,197,1)
(418,294,1)
(72,7,1)
(462,94,1)
(40,467,1)
(72,347,1)
(173,477,1)
(303,431,1)
(98,20,1)
(79,383,1)
(51,232,1)
(273,306,1)
(177,129,1)
(294,266,1)
(269,143,1)
(282,194,1)
(442,200,1)
(220,323,1)
(63,471,1)
(146,465,1)
(383,391,1)
(461,204,1)
(125,473,1)
(458,103,1)
(434,10,1)
(100,322,1)
(327,440,1)
(371,176,1)
(173,219,1)
(83,357,1)
(386,382,1)
(339,198,1)
(64,463,1)
(336,381,1)
(84,156,1)
(279,169,1)
(72,117,1)
(162,165,1)
(11,291,1)
(351,443,1)
(335,236,1)
(462,348,1)
(462,458,1)
(229,116,1)
(131,432,1)
(299,173,1)
(197,39,1)
(454,70,1)
(308,332,1)
(397,333,1)
(405,57,1)
(213,448,1)
(16,269,1)
(52,320,1)
(30,156,1)
(216,329,1)
(298,324,1)
(367,453,1)
(460,257,1)
(10,14,1)
(226,428,1)
(462,469,1)
(212,340,1)
(8,342,1)
(451,8,1)
(182,343,1)
(137,337,1)
(283,373,1)
(70,400,1)
(237,404,1)
(375,394,1)
(240,209,1)
(296,399,1)
(88,331,1)
(350,462,1)
(225,131,1)
(263,439,1)
(463,12,1)
(72,406,1)
(328,425,1)
(25,238,1)
(259,129,1)
(288,184,1)
(409,129,1)
(209,278,1)
(72,259,1)
(93,181,1)
(425,198,1)
(408,97,1)
(409,407,1)
(202,31,1)
(393,148,1)
(306,409,1)
(411,170,1)
(232,245,1)
(300,89,1)
(72,293,1)
(143,129,1)
(133,156,1)
(426,123,1)
(314,359,1)
(297,361,1)
(154,416,1)
(280,93,1)
(66,406,1)
(141,183,1)
(290,191,1)
(72,98,1)
(134,296,1)
(53,185,1)
(410,63,1)
(10,331,1)
(164,410,1)
(84,349,1)
(167,273,1)
(256,438,1)
(78,430,1)
(155,21,1)
(225,60,1)
(167,32,1)
(238,156,1)
(31,131,1)
(267,195,1)
(252,11,1)
(216,156,1)
(91,242,1)
(468,38,1)
(481,80,1)
(72,41,1)
(110,129,1)
(264,375,1)
(97,384,1)
(236,288,1)
(418,155,1)
(0,319,1)
(451,114,1)
(445,167,1)
(166,129,1)
(225,152,1)
(360,180,1)
(345,244,1)
(338,325,1)
(474,427,1)
(369,277,1)
(319,185,1)
(415,67,1)
(72,125,1)
(317,3,1)
(227,162,1)
(437,405,1)
(462,63,1)
(189,102,1)
(13,129,1)
(195,388,1)
(248,80,1)
(462,344,1)
(118,284,1)
(188,401,1)
(41,129,1)
(363,94,1)
(193,386,1)
(233,19,1)
(258,308,1)
(413,146,1)
(44,106,1)
(166,217,1)
(72,344,1)
(462,406,1)
(430,396,1)
(238,47,1)
(138,417,1)
(145,24,1)
(462,41,1)
(312,259,1)
(441,156,1)
(480,129,1)
(185,298,1)
(72,63,1)
(333,177,1)
(462,347,1)
(190,156,1)
(305,435,1)
(202,411,1)
(80,304,1)
(315,129,1)
(123,141,1)
(356,235,1)
(38,175,1)
(243,445,1)
(342,74,1)
(183,76,1)
(201,283,1)
(423,187,1)
(289,412,1)
(117,156,1)
(222,415,1)
(441,201,1)
(479,111,1)
(215,61,1)
(139,80,1)
(98,156,1)
(447,112,1)
(64,119,1)
(418,129,1)
(225,154,1)
(122,436,1)
(11,147,1)
(142,446,1)
(36,372,1)
(170,270,1)
(179,148,1)
(334,133,1)
(432,418,1)
(125,129,1)
(124,265,1)
(378,231,1)
(37,207,1)
(2,348,1)
(72,118,1)
(328,419,1)
(321,246,1)
(177,132,1)
(72,458,1)
(462,459,1)
(236,213,1)
(12,281,1)
(72,112,1)
(72,454,1)
(27,124,1)
(287,290,1)
(165,117,1)
(414,292,1)
(464,310,1)
(24,68,1)
(158,59,1)
(111,312,1)
(3,118,1)
(309,395,1)
(46,55,1)
(174,214,1)
(344,129,1)
(361,86,1)
(53,77,1)
(7,91,1)
(84,330,1)
(99,250,1)
(72,166,1)
(218,237,1)
(113,252,1)
(364,210,1)
(149,308,1)
(349,182,1)
(277,347,1)
(133,45,1)
(205,73,1)
(377,199,1)
(71,39,1)
(61,479,1)
(462,247,1)
(436,105,1)
(193,156,1)
(242,203,1)
(24,334,1)
(228,460,1)
(305,156,1)
(176,414,1)
(451,442,1)
(94,352,1)
(427,160,1)
(355,294,1)
(356,156,1)
(200,27,1)
(102,150,1)
(450,202,1)
(471,287,1)
(223,164,1)
(350,116,1)
(352,318,1)
(477,219,1)
(346,145,1)
(462,98,1)
(1,96,1)
(476,293,1)
(337,437,1)
(391,230,1)
(114,84,1)
(462,58,1)
(462,76,1)
(331,68,1)
(192,108,1)
(445,92,1)
(465,297,1)
(462,261,1)
(225,375,1)
(313,216,1)
(437,353,1)
(186,454,1)
(373,53,1)
(419,234,1)
(175,26,1)
(231,160,1)
(116,335,1)
(129,456,1)
(152,389,1)
(72,230,1)
(322,464,1)
(255,107,1)
(362,393,1)
(293,156,1)
(49,445,1)
(412,252,1)
(151,412,1)
(135,99,1)
(396,159,1)
(337,353,1)
(387,104,1)
(394,434,1)
(5,354,1)
(14,379,1)
(104,377,1)
(72,76,1)
(384,58,1)
(281,258,1)
(225,200,1)
(106,4,1)
(376,413,1)
(160,68,1)
(76,129,1)
(72,94,1)
(72,295,1)
(462,240,1)
(181,429,1)
(72,58,1)
(231,313,1)
(72,190,1)
(353,362,1)
(381,227,1)
(388,272,1)
(451,161,1)
(244,177,1)
(169,137,1)
(459,286,1)
(72,143,1)
(354,261,1)
(332,419,1)
(72,311,1)
(304,43,1)
(416,376,1)
(202,358,1)
(60,109,1)
(190,0,1)
(450,86,1)
(311,156,1)
(270,449,1)
(195,252,1)
(481,121,1)
(348,129,1)
(372,22,1)
(9,302,1)
(5,72,1)
(202,264,1)
(292,186,1)
(291,86,1)
(74,274,1)
(469,129,1)
(326,78,1)
(72,247,1)
(85,79,1)
(171,355,1)
(395,189,1)
(400,280,1)
(469,42,1)
(295,85,1)
(320,125,1)
(390,218,1)
(146,156,1)
(480,171,1)
(462,408,1)
(161,154,1)
(266,168,1)
(480,294,1)
(406,129,1)
(209,129,1)
(72,261,1)
(368,206,1)
(272,289,1)
(147,321,1)
(250,469,1)
(462,293,1)
(462,454,1)
(95,115,1)
(232,222,1)
(401,392,1)
(72,469,1)
(218,353,1)
(327,80,1)
(19,481,1)
(458,129,1)
(121,2,1)
(225,260,1)
(439,475,1)
(256,156,1)
(109,378,1)
(219,233,1)
(310,156,1)
(285,311,1)
(340,80,1)
(168,34,1)
(187,317,1)
(359,253,1)
(453,459,1)
(47,69,1)
(42,134,1)
(245,447,1)
(302,323,1)
(324,65,1)
(108,133,1)
(130,261,1)
(248,364,1)
(72,179,1)
(21,339,1)
(180,142,1)
(72,348,1)
(34,315,1)
(75,222,1)
(407,303,1)
(273,409,1)
(219,80,1)
(348,403,1)
(357,84,1)
(69,82,1)
(198,480,1)
(438,1,1)
(382,48,1)
(274,326,1)
(354,397,1)
(140,188,1)
(389,282,1)
(210,340,1)
(374,218,1)
(73,267,1)
(57,390,1)
(72,315,1)
(78,156,1)
(403,215,1)
(212,248,1)
(13,285,1)
(72,459,1)
(30,178,1)
(259,263,1)
(148,441,1)
(279,206,1)
(456,443,1)
(399,344,1)
(456,351,1)
(249,350,1)
(218,6,1)
(225,338,1)
(265,305,1)
(76,239,1)
(266,80,1)
(462,166,1)
(347,309,1)
(247,385,1)
(446,461,1)
(239,158,1)
(26,104,1)
(207,224,1)
(315,44,1)
(379,56,1)
(462,7,1)
(462,311,1)
(462,230,1)
(450,419,1)
(86,30,1)
(331,226,1)
(207,156,1)
(230,127,1)
(4,327,1)
(82,192,1)
(257,153,1)
(417,13,1)
(39,129,1)
(110,294,1)
(214,260,1)
(253,360,1)
(6,237,1)
(96,463,1)
(184,458,1)
(206,299,1)
(33,88,1)
(15,28,1)
(260,122,1)
(284,71,1)
(420,300,1)
(39,371,1)
(49,243,1)
(440,457,1)
(7,129,1)
(119,256,1)
(329,474,1)
(431,46,1)
(448,166,1)
(451,450,1)
(208,222,1)
(48,7,1)
(299,481,1)
(406,138,1)
(107,328,1)
(55,476,1)
(344,251,1)
(246,291,1)
(261,156,1)
(142,73,1)
(286,368,1)
(451,268,1)
(117,249,1)
(132,129,1)
(103,426,1)
(468,199,1)
(143,420,1)
(279,129,1)
(479,80,1)
(261,174,1)
(251,15,1)
(112,341,1)
(462,315,1)
(116,129,1)
(318,52,1)
(323,279,1)
(225,170,1)
(462,143,1)
(435,149,1)
(77,190,1)
(449,101,1)
(241,428,1)
(404,220,1)
(462,118,1)
(160,151,1)
(311,345,1)
(208,40,1)
(153,295,1)
(308,419,1)
(343,363,1)
(428,205,1)
(278,229,1)
(234,156,1)
(466,75,1)
(473,135,1)
(127,223,1)
(22,16,1)
(92,167,1)
(234,25,1)
(5,225,1)
(217,423,1)
(59,51,1)
(237,294,1)
(45,314,1)
(118,129,1)
(54,361,1)
(392,130,1)
(359,86,1)
(94,129,1)
(389,129,1)
(325,346,1)
(58,466,1)
(467,408,1)
(50,98,1)
(358,60,1)
(65,336,1)
(428,73,1)
(41,452,1)
(475,50,1)
(441,373,1)
(415,49,1)
(462,295,1)
(310,83,1)
(110,9,1)
(412,113,1)
(268,338,1)
(266,156,1)
(199,64,1)
(203,212,1)
(459,129,1)
(235,387,1)
(104,199,1)
(101,356,1)
(457,41,1)
(225,342,1)
(72,209,1)
(262,100,1)
(133,360,1)
(267,128,1)
(298,156,1)
(462,259,1)
(56,33,1)
(323,353,1)
(150,208,1)
(72,408,1)
(340,367,1)
(463,419,1)
(237,129,1)
(194,37,1)
(390,374,1)
(194,428,2)
(224,133,2)
(104,308,2)
(423,39,2)
(71,39,2)
(259,129,2)
(443,140,2)
(9,148,2)
(5,354,2)
(79,198,2)
(223,198,2)
(234,25,2)
(224,198,2)
(138,177,2)
(231,412,2)
(72,295,2)
(227,198,2)
(294,104,2)
(438,308,2)
(112,39,2)
(267,195,2)
(170,104,2)
(3,39,2)
(264,428,2)
(234,156,2)
(37,412,2)
(55,198,2)
(127,198,2)
(474,160,2)
(305,156,2)
(282,84,2)
(243,198,2)
(160,68,2)
(183,39,2)
(299,104,2)
(5,225,2)
(355,104,2)
(447,39,2)
(194,133,2)
(179,148,2)
(389,104,2)
(282,412,2)
(72,143,2)
(21,198,2)
(454,198,2)
(356,104,2)
(69,133,2)
(20,104,2)
(378,412,2)
(39,129,2)
(218,353,2)
(225,60,2)
(30,156,2)
(451,198,2)
(194,308,2)
(166,129,2)
(270,104,2)
(389,148,2)
(282,198,2)
(201,198,2)
(7,129,2)
(202,104,2)
(80,104,2)
(160,412,2)
(165,198,2)
(415,67,2)
(468,104,2)
(405,323,2)
(114,84,2)
(72,406,2)
(72,344,2)
(437,353,2)
(37,133,2)
(286,104,2)
(274,148,2)
(185,198,2)
(207,104,2)
(207,133,2)
(466,198,2)
(76,129,2)
(268,133,2)
(462,247,2)
(72,117,2)
(63,198,2)
(225,342,2)
(343,177,2)
(434,428,2)
(302,148,2)
(206,104,2)
(266,156,2)
(180,428,2)
(152,104,2)
(113,361,2)
(169,148,2)
(147,361,2)
(161,361,2)
(298,156,2)
(293,156,2)
(187,39,2)
(146,156,2)
(173,219,2)
(75,198,2)
(418,129,2)
(56,331,2)
(11,361,2)
(451,104,2)
(6,323,2)
(367,104,2)
(359,428,2)
(462,347,2)
(449,104,2)
(356,156,2)
(318,177,2)
(251,177,2)
(202,198,2)
(409,198,2)
(448,39,2)
(237,323,2)
(26,104,2)
(89,104,2)
(186,198,2)
(480,104,2)
(462,143,2)
(192,133,2)
(22,80,2)
(45,428,2)
(412,252,2)
(28,177,2)
(279,206,2)
(234,133,2)
(481,104,2)
(72,94,2)
(368,104,2)
(137,148,2)
(153,198,2)
(225,133,2)
(167,198,2)
(200,308,2)
(432,198,2)
(342,74,2)
(450,428,2)
(218,237,2)
(168,104,2)
(229,116,2)
(390,323,2)
(336,198,2)
(290,198,2)
(100,84,2)
(98,156,2)
(11,147,2)
(462,408,2)
(189,102,2)
(72,293,2)
(104,199,2)
(404,323,2)
(190,156,2)
(299,173,2)
(199,64,2)
(462,166,2)
(212,340,2)
(310,84,2)
(74,148,2)
(139,80,2)
(469,177,2)
(463,419,2)
(210,104,2)
(118,39,2)
(109,412,2)
(94,177,2)
(198,104,2)
(374,323,2)
(462,118,2)
(10,428,2)
(451,133,2)
(207,308,2)
(427,160,2)
(25,133,2)
(464,84,2)
(181,198,2)
(218,323,2)
(143,129,2)
(269,104,2)
(230,198,2)
(102,150,2)
(314,428,2)
(377,308,2)
(346,133,2)
(337,323,2)
(134,177,2)
(431,198,2)
(451,308,2)
(224,148,2)
(216,160,2)
(152,84,2)
(408,198,2)
(8,148,2)
(299,481,2)
(282,148,2)
(462,348,2)
(323,323,2)
(84,156,2)
(450,198,2)
(304,104,2)
(12,308,2)
(32,198,2)
(386,104,2)
(103,39,2)
(131,198,2)
(36,104,2)
(293,198,2)
(259,104,2)
(227,162,2)
(170,270,2)
(215,104,2)
(453,104,2)
(403,104,2)
(37,84,2)
(475,104,2)
(194,104,2)
(123,39,2)
(224,84,2)
(224,308,2)
(42,177,2)
(76,39,2)
(189,198,2)
(244,177,2)
(27,308,2)
(445,167,2)
(457,104,2)
(428,412,2)
(53,185,2)
(133,156,2)
(232,222,2)
(207,198,2)
(303,198,2)
(334,133,2)
(412,361,2)
(194,84,2)
(283,198,2)
(467,198,2)
(470,104,2)
(480,294,2)
(390,218,2)
(389,84,2)
(72,261,2)
(477,104,2)
(61,479,2)
(53,198,2)
(37,428,2)
(207,156,2)
(413,361,2)
(241,428,2)
(462,311,2)
(328,419,2)
(282,308,2)
(381,198,2)
(219,80,2)
(194,361,2)
(226,428,2)
(240,116,2)
(267,412,2)
(207,148,2)
(47,133,2)
(219,104,2)
(148,441,2)
(195,252,2)
(289,412,2)
(462,261,2)
(107,198,2)
(207,428,2)
(84,330,2)
(0,198,2)
(158,39,2)
(197,39,2)
(461,428,2)
(97,198,2)
(458,129,2)
(152,133,2)
(389,412,2)
(225,308,2)
(394,428,2)
(416,361,2)
(72,454,2)
(51,232,2)
(462,315,2)
(151,412,2)
(389,129,2)
(64,463,2)
(323,148,2)
(193,156,2)
(152,148,2)
(175,104,2)
(361,86,2)
(320,177,2)
(312,104,2)
(363,177,2)
(89,139,2)
(311,177,2)
(72,458,2)
(117,198,2)
(14,379,2)
(462,76,2)
(54,361,2)
(389,428,2)
(277,198,2)
(237,129,2)
(64,308,2)
(441,198,2)
(182,177,2)
(451,412,2)
(111,104,2)
(294,266,2)
(30,84,2)
(72,7,2)
(92,198,2)
(72,118,2)
(262,84,2)
(397,177,2)
(415,49,2)
(242,104,2)
(213,39,2)
(159,148,2)
(361,84,2)
(220,323,2)
(154,361,2)
(49,445,2)
(308,419,2)
(451,84,2)
(72,259,2)
(389,198,2)
(396,148,2)
(473,177,2)
(72,230,2)
(82,133,2)
(131,432,2)
(209,116,2)
(72,58,2)
(187,317,2)
(260,122,2)
(385,198,2)
(296,177,2)
(288,39,2)
(354,177,2)
(350,198,2)
(450,419,2)
(34,104,2)
(133,360,2)
(14,331,2)
(265,308,2)
(77,198,2)
(200,27,2)
(117,156,2)
(99,177,2)
(37,104,2)
(70,198,2)
(326,148,2)
(462,41,2)
(298,198,2)
(376,361,2)
(115,361,2)
(442,308,2)
(93,198,2)
(209,129,2)
(462,7,2)
(180,142,2)
(194,148,2)
(348,129,2)
(291,361,2)
(207,84,2)
(313,160,2)
(279,148,2)
(458,39,2)
(204,428,2)
(177,129,2)
(285,177,2)
(324,198,2)
(72,459,2)
(409,294,2)
(359,86,2)
(72,311,2)
(106,104,2)
(73,412,2)
(273,409,2)
(225,200,2)
(125,177,2)
(471,198,2)
(462,94,2)
(41,104,2)
(208,198,2)
(119,256,2)
(410,198,2)
(341,39,2)
(393,148,2)
(481,80,2)
(224,412,2)
(37,308,2)
(110,294,2)
(133,428,2)
(191,198,2)
(278,116,2)
(1,308,2)
(362,148,2)
(110,129,2)
(384,198,2)
(72,76,2)
(142,73,2)
(263,104,2)
(211,198,2)
(101,104,2)
(143,104,2)
(462,293,2)
(225,412,2)
(232,39,2)
(135,177,2)
(24,68,2)
(46,55,2)
(305,308,2)
(121,104,2)
(60,412,2)
(333,177,2)
(72,125,2)
(181,429,2)
(266,104,2)
(72,148,2)
(119,308,2)
(399,177,2)
(225,148,2)
(13,177,2)
(72,190,2)
(108,133,2)
(280,93,2)
(123,141,2)
(342,148,2)
(148,198,2)
(414,292,2)
(266,80,2)
(185,298,2)
(246,361,2)
(162,198,2)
(375,394,2)
(340,104,2)
(245,39,2)
(344,129,2)
(375,428,2)
(194,412,2)
(280,198,2)
(419,234,2)
(282,133,2)
(469,129,2)
(150,208,2)
(325,133,2)
(430,148,2)
(331,428,2)
(337,148,2)
(224,428,2)
(462,112,2)
(237,294,2)
(38,104,2)
(217,39,2)
(238,156,2)
(441,156,2)
(207,412,2)
(146,361,2)
(199,308,2)
(452,104,2)
(298,324,2)
(203,104,2)
(382,104,2)
(323,279,2)
(451,361,2)
(203,212,2)
(167,273,2)
(141,39,2)
(462,295,2)
(462,458,2)
(306,198,2)
(93,181,2)
(25,238,2)
(30,178,2)
(419,133,2)
(40,198,2)
(50,104,2)
(72,469,2)
(414,198,2)
(11,291,2)
(225,170,2)
(91,104,2)
(407,198,2)
(297,361,2)
(13,129,2)
(323,353,2)
(371,198,2)
(41,129,2)
(224,361,2)
(116,129,2)
(441,373,2)
(24,133,2)
(411,104,2)
(193,104,2)
(291,86,2)
(252,11,2)
(95,361,2)
(44,104,2)
(4,104,2)
(279,129,2)
(317,39,2)
(94,129,2)
(281,308,2)
(46,198,2)
(248,104,2)
(72,98,2)
(250,177,2)
(420,104,2)
(216,156,2)
(225,84,2)
(468,199,2)
(425,198,2)
(345,177,2)
(258,308,2)
(300,104,2)
(212,248,2)
(248,80,2)
(462,63,2)
(379,156,2)
(418,294,2)
(389,361,2)
(445,198,2)
(479,80,2)
(462,125,2)
(57,323,2)
(282,428,2)
(460,198,2)
(459,104,2)
(315,129,2)
(80,304,2)
(451,148,2)
(72,166,2)
(166,39,2)
(439,104,2)
(372,22,2)
(222,198,2)
(205,412,2)
(102,198,2)
(150,198,2)
(72,41,2)
(257,198,2)
(435,308,2)
(400,198,2)
(86,84,2)
(463,308,2)
(432,418,2)
(125,129,2)
(348,104,2)
(149,308,2)
(391,198,2)
(176,198,2)
(310,156,2)
(19,104,2)
(224,104,2)
(387,104,2)
(152,361,2)
(137,323,2)
(178,84,2)
(171,104,2)
(353,148,2)
(202,428,2)
(450,86,2)
(282,361,2)
(152,308,2)
(194,198,2)
(49,198,2)
(338,133,2)
(184,39,2)
(451,428,2)
(256,156,2)
(88,331,2)
(267,128,2)
(86,30,2)
(462,98,2)
(295,198,2)
(72,112,2)
(84,177,2)
(228,198,2)
(33,331,2)
(426,39,2)
(340,80,2)
(124,308,2)
(139,193,2)
(308,133,2)
(327,104,2)
(437,323,2)
(83,84,2)
(406,177,2)
(4,327,2)
(31,198,2)
(39,198,2)
(338,325,2)
(110,148,2)
(198,480,2)
(207,361,2)
(58,198,2)
(354,261,2)
(72,63,2)
(249,198,2)
(373,53,2)
(236,198,2)
(347,198,2)
(72,348,2)
(85,198,2)
(155,198,2)
(379,331,2)
(446,428,2)
(462,116,2)
(462,459,2)
(395,198,2)
(352,177,2)
(51,39,2)
(462,469,2)
(309,198,2)
(415,198,2)
(383,198,2)
(72,247,2)
(459,129,2)
(225,104,2)
(322,84,2)
(282,104,2)
(52,177,2)
(96,308,2)
(72,408,2)
(37,148,2)
(233,104,2)
(313,216,2)
(329,160,2)
(15,177,2)
(2,104,2)
(225,131,2)
(59,51,2)
(118,129,2)
(332,133,2)
(222,415,2)
(292,198,2)
(195,412,2)
(225,361,2)
(409,129,2)
(389,133,2)
(476,198,2)
(255,198,2)
(59,39,2)
(252,361,2)
(304,43,2)
(16,104,2)
(5,72,2)
(152,412,2)
(417,177,2)
(72,315,2)
(60,109,2)
(388,412,2)
(450,412,2)
(372,104,2)
(357,84,2)
(406,129,2)
(279,323,2)
(261,156,2)
(450,104,2)
(64,119,2)
(253,428,2)
(462,58,2)
(358,412,2)
(465,361,2)
(129,456,2)
(73,267,2)
(173,104,2)
(456,443,2)
(22,104,2)
(335,198,2)
(418,198,2)
(61,104,2)
(344,177,2)
(65,198,2)
(287,198,2)
(37,361,2)
(327,80,2)
(98,104,2)
(72,209,2)
(235,104,2)
(202,412,2)
(225,154,2)
(78,156,2)
(304,468,2)
(142,428,2)
(190,198,2)
(225,338,2)
(247,198,2)
(152,198,2)
(360,180,2)
(225,198,2)
(116,198,2)
(364,104,2)
(152,428,2)
(321,361,2)
(349,177,2)
(225,428,2)
(428,73,2)
(440,104,2)
(462,230,2)
(462,406,2)
(164,198,2)
(159,110,2)
(311,156,2)
(429,198,2)
(57,390,2)
(369,198,2)
(225,260,2)
(66,177,2)
(238,133,2)
(339,198,2)
(315,104,2)
(462,344,2)
(272,412,2)
(225,375,2)
(256,308,2)
(78,148,2)
(360,428,2)
(139,104,2)
(37,198,2)
(208,222,2)
(462,259,2)
(212,104,2)
(328,198,2)
(145,133,2)
(479,104,2)
(284,39,2)
(154,416,2)
(331,68,2)
(273,198,2)
(7,104,2)
(72,347,2)
(462,454,2)
(239,39,2)
(480,129,2)
(48,104,2)
(373,198,2)
(169,323,2)
(389,308,2)
(206,299,2)
(319,198,2)
-----------------------------------
(0,s_root)
(1,sb)
(2,dr)
(3,adfs_f_dir_ops)
(4,asb->s_log2sharesize\\t= dr->log2sharesize)
(5,RET)
(6,i)
(7,asb->s_size)
(8,goto error;)
(9,s_map)
(10,ret)
(11,bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE)
(12,b_data)
(13,sb->s_fs_info = asb)
(14,printk("VPS: Can\'t find an adfs filesystem on dev "\n\\n\\t\\t\\t\\t"%s.\\n", sb->s_id)
(15,asb)
(16,format_version)
(17,)
(18,bh)
(19,dr)
(20,s_magic)
(21,asb)
(22,dr->format_version)
(23,blocksize)
(24,!silent)
(25,ADFS_DISCRECORD / sb->s_blocksize)
(26,dr)
(27,-EIO)
(28,asb->s_uid = GLOBAL_ROOT_UID)
(29,for (i = 0; i < asb->s_map_size; i++)
(30,sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE)
(31,goto error_free_bh;)
(32,dm_bh)
(33,sb)
(34,sb)
(35,if (asb->s_ftsuffix)
(36,asb)
(37,NULL)
(38,ADFS_DR_OFFSET)
(39,asb->s_version)
(40,root)
(41,asb->s_log2sharesize)
(42,s_owner_mask)
(43,struct adfs_discrecord *)
(44,s_map)
(45,blocksize)
(46,sb->s_op = &adfs_sops)
(47,s_blocksize)
(48,dr)
(49,asb->s_map[0].dm_bh->b_data + 4)
(50,ADFS_SUPER_MAGIC)
(51,le32_to_cpu(dr->root_size)
(52,asb->s_other_mask = ADFS_DEFAULT_OTHER_MASK)
(53,d_make_root(root)
(54,b_data)
(55,&adfs_sops)
(56,s_id)
(57,brelse(asb->s_map[i].dm_bh)
(58,root_obj.parent_id)
(59,root_obj.size = le32_to_cpu(dr->root_size)
(60,ret = -EINVAL)
(61,asb->s_idlen\\t\\t= dr->idlen)
(62,if (!silent)
(63,root_obj.execaddr)
(64,bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize)
(65,root_obj)
(66,GLOBAL_ROOT_UID)
(67,struct adfs_discrecord *)
(68,int silent)
(69,sb)
(70,filetype)
(71,asb)
(72,return 0;)
(73,dr = (struct adfs_discrecord *)
(74,-EIO)
(75,root_obj)
(76,asb->s_dir)
(77,root)
(78,adfs_error(sb, "get root inode failed\\n")
(79,root_obj)
(80,dr = (struct adfs_discrecord *)
(81,)
(82,ADFS_DISCRECORD)
(83,BLOCK_SIZE)
(84,parse_options(sb, data)
(85,attr)
(86,bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE)
(87,dr)
(88,"VPS: Can\'t find an adfs filesystem on dev "\n\\n\\t\\t\\t\\t"%s.\\n")
(89,asb->s_size    \\t\\t= adfs_discsize(dr, sb->s_blocksize_bits)
(90,if (adfs_checkbblk(b_data)
(91,s_size)
(92,b_data)
(93,ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |\n\\n\\t\\t\\t     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ)
(94,asb->s_ftsuffix)
(95,b_data)
(96,ADFS_DISCRECORD)
(97,file_id)
(98,sb->s_magic)
(99,asb->s_owner_mask = ADFS_DEFAULT_OWNER_MASK)
(100,ADFS_DISCRECORD)
(101,ret)
(102,root_obj.file_id = le32_to_cpu(dr->root)
(103,s_namelen)
(104,adfs_checkbblk(b_data)
(105,ret)
(106,asb)
(107,sb)
(108,bh)
(109,-EINVAL)
(110,asb->s_map)
(111,idlen)
(112,root_obj.size)
(113,b_data)
(114,goto error;)
(115,bh)
(116,asb->s_ftsuffix)
(117,sb->s_d_op)
(118,asb->s_dir)
(119,ADFS_DISCRECORD % sb->s_blocksize)
(120,)
(121,nzones)
(122,-EINVAL)
(123,asb->s_dir     = &adfs_fplus_dir_ops)
(124,EIO)
(125,asb->s_other_mask)
(126,)
(127,size)
(128,struct adfs_discrecord *)
(129,asb = kzalloc(sizeof(*asb)
(130,MS_NODIRATIME)
(131,ret =  PTR_ERR(asb->s_map)
(132,asb)
(133,sb_set_blocksize(sb, blocksize)
(134,asb)
(135,asb)
(136,if (sb_set_blocksize(sb, blocksize)
(137,asb)
(138,s_uid)
(139,adfs_discsize(dr, sb->s_blocksize_bits)
(140,*asb)
(141,&adfs_fplus_dir_ops)
(142,dr->log2secsize)
(143,asb->s_version)
(144,ret)
(145,ret)
(146,adfs_error(sb, "unable to read superblock")
(147,ADFS_DISCRECORD % BLOCK_SIZE)
(148,!sb->s_root)
(149,sb)
(150,le32_to_cpu(dr->root)
(151,silent)
(152,ret)
(153,ADFS_NDA_DIRECTORY)
(154,ret = -EIO)
(155,s_map)
(156,struct super_block *sb)
(157,if (!silent)
(158,asb)
(159,kfree(asb->s_map)
(160,!silent)
(161,goto error;)
(162,&adfs_dentry_operations)
(163,)
(164,root_obj.execaddr  = 0xec22c000)
(165,adfs_dentry_operations)
(166,asb->s_namelen)
(167,asb->s_map[0].dm_bh)
(168,dr)
(169,s_map_size)
(170,ret = -EINVAL)
(171,s_map)
(172,if (adfs_checkbblk(b_data)
(173,dr->nzones_high << 8)
(174,s_flags)
(175,b_data)
(176,asb)
(177,!asb)
(178,ADFS_DISCRECORD / BLOCK_SIZE)
(179,0)
(180,1 << dr->log2secsize)
(181,ADFS_NDA_OWNER_READ |\n\\n\\t\\t\\t     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ)
(182,sb)
(183,adfs_fplus_dir_ops)
(184,ADFS_FPLUS_NAME_LEN)
(185,root = adfs_iget(sb, &root_obj)
(186,1)
(187,asb->s_dir     = &adfs_f_dir_ops)
(188,asb)
(189,root_obj.parent_id = root_obj.file_id = le32_to_cpu(dr->root)
(190,sb->s_root)
(191,0xfff0003f)
(192,sb)
(193,sb->s_blocksize_bits)
(194,sb->s_fs_info = NULL)
(195,b_data + ADFS_DR_OFFSET)
(196,if (IS_ERR(asb->s_map)
(197,root_obj)
(198,IS_ERR(asb->s_map)
(199,b_data = bh->b_data + (ADFS_DISCRECORD % sb->s_blocksize)
(200,ret = -EIO)
(201,s_root)
(202,bh)
(203,asb->s_map2blk\\t\\t= dr->log2bpmb - dr->log2secsize)
(204,1)
(205,dr)
(206,asb->s_map_size\\t\\t= dr->nzones | (dr->nzones_high << 8)
(207,sb->s_fs_info)
(208,dr->root)
(209,asb->s_namelen)
(210,dr)
(211,root_obj)
(212,dr->log2bpmb - dr->log2secsize)
(213,asb->s_namelen = ADFS_F_NAME_LEN)
(214,sb)
(215,asb)
(216,sb->s_id)
(217,s_namelen)
(218,asb->s_map[i])
(219,dr->nzones_high)
(220,asb)
(221,)
(222,dr = (struct adfs_discrecord *)
(223,root_obj)
(224,s_fs_info)
(225,return ret;)
(226,silent)
(227,sb->s_d_op = &adfs_dentry_operations)
(228,ADFS_NDA_PUBLIC_READ)
(229,asb)
(230,root_obj.size)
(231,ret)
(232,dr->root_size)
(233,nzones_high)
(234,sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize)
(235,"disc record mismatch, very weird!")
(236,asb)
(237,asb->s_map)
(238,sb->s_blocksize)
(239,s_dir)
(240,4)
(241,blocksize)
(242,asb)
(243,4)
(244,sb)
(245,root_size)
(246,ADFS_DISCRECORD)
(247,root_obj.loadaddr)
(248,dr->log2secsize)
(249,s_d_op)
(250,ADFS_DEFAULT_OWNER_MASK)
(251,s_gid)
(252,b_data = bh->b_data + (ADFS_DISCRECORD % BLOCK_SIZE)
(253,bh)
(254,b_data)
(255,s_op)
(256,sb->s_blocksize)
(257,ADFS_NDA_OWNER_READ)
(258,b_data)
(259,asb->s_idlen)
(260,ret = -EINVAL)
(261,sb->s_flags)
(262,BLOCK_SIZE)
(263,s_idlen)
(264,goto error_free_bh;)
(265,ret)
(266,adfs_read_map(sb, dr)
(267,(struct adfs_discrecord *)
(268,goto error;)
(269,dr)
(270,-EINVAL)
(271,if (asb->s_version)
(272,b_data)
(273,asb->s_map[0])
(274,EIO)
(275,)
(276,if (!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE)
(277,0)
(278,s_namelen)
(279,asb->s_map_size)
(280,root_obj.attr\\t   = ADFS_NDA_DIRECTORY   | ADFS_NDA_OWNER_READ |\n\\n\\t\\t\\t     ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ)
(281,bh)
(282,asb)
(283,sb)
(284,s_dir)
(285,asb)
(286,s_map2blk)
(287,root_obj)
(288,asb->s_namelen = ADFS_FPLUS_NAME_LEN)
(289,dr)
(290,root_obj.loadaddr  = 0xfff0003f)
(291,bh->b_data)
(292,-1)
(293,sb->s_op)
(294,asb->s_map = adfs_read_map(sb, dr)
(295,root_obj.attr)
(296,asb->s_gid = GLOBAL_ROOT_GID)
(297,sb)
(298,adfs_iget(sb, &root_obj)
(299,dr->nzones | (dr->nzones_high << 8)
(300,asb)
(301,if (parse_options(sb, data)
(302,asb)
(303,asb)
(304,(struct adfs_discrecord *)
(305,adfs_error(sb, "couldn\'t read superblock on "\n\\n\\t\\t\\t\\t"2nd try.")
(306,0)
(307,error:)
(308,!bh)
(309,name_len)
(310,sb_set_blocksize(sb, BLOCK_SIZE)
(311,sb->s_fs_info)
(312,dr)
(313,printk("VFS: Can\'t find an adfs filesystem on dev "\n\\n\\t\\t\\t\\t"%s.\\n", sb->s_id)
(314,sb)
(315,asb->s_map)
(316,root)
(317,&adfs_f_dir_ops)
(318,asb)
(319,sb)
(320,ADFS_DEFAULT_OTHER_MASK)
(321,BLOCK_SIZE)
(322,sb)
(323,i < asb->s_map_size)
(324,&root_obj)
(325,-EINVAL)
(326,ret)
(327,dr->log2sharesize)
(328,brelse(bh)
(329,s_id)
(330,void *data)
(331,!silent)
(332,bh)
(333,ENOMEM)
(334,silent)
(335,s_ftsuffix)
(336,sb)
(337,i)
(338,ret = -EINVAL)
(339,ret)
(340,dr->log2bpmb)
(341,size)
(342,ret = -EIO)
(343,asb->s_ftsuffix = 0)
(344,asb->s_gid)
(345,s_fs_info)
(346,EINVAL)
(347,root_obj.name_len)
(348,asb->s_map_size)
(349,data)
(350,sb)
(351,GFP_KERNEL)
(352,s_ftsuffix)
(353,i = 0)
(354,return -ENOMEM;)
(355,asb)
(356,adfs_error(sb, "disc record mismatch, very weird!")
(357,sb)
(358,goto error_free_bh;)
(359,brelse(bh)
(360,blocksize = 1 << dr->log2secsize)
(361,!(bh = sb_bread(sb, ADFS_DISCRECORD / BLOCK_SIZE)
(362,0)
(363,0)
(364,log2secsize)
(365,if (!sb->s_root)
(366,)
(367,log2bpmb)
(368,asb)
(369,root_obj.name_len  = 0)
(370,)
(371,s_version)
(372,asb->s_version \\t\\t= dr->format_version)
(373,sb->s_root = d_make_root(root)
(374,dm_bh)
(375,ret = -EINVAL)
(376,EIO)
(377,b_data)
(378,EINVAL)
(379,sb->s_id)
(380,)
(381,root)
(382,sb)
(383,root_obj.size\\t   = ADFS_NEWDIR_SIZE)
(384,root_obj)
(385,loadaddr)
(386,s_blocksize_bits)
(387,sb)
(388,ADFS_DR_OFFSET)
(389,kfree(asb)
(390,asb->s_map[i].dm_bh)
(391,ADFS_NEWDIR_SIZE)
(392,sb->s_flags |= MS_NODIRATIME)
(393,i)
(394,-EINVAL)
(395,root_obj)
(396,sb)
(397,-ENOMEM)
(398,)
(399,GLOBAL_ROOT_GID)
(400,root_obj)
(401,asb)
(402,i)
(403,s_map_size)
(404,s_map)
(405,i)
(406,asb->s_uid)
(407,s_map)
(408,root_obj.file_id)
(409,asb->s_map)
(410,0xec22c000)
(411,goto error_free_bh;)
(412,adfs_checkbblk(b_data)
(413,ret)
(414,root_obj.filetype  = -1)
(415,(struct adfs_discrecord *)
(416,-EIO)
(417,asb)
(418,asb->s_map)
(419,bh = sb_bread(sb, ADFS_DISCRECORD / sb->s_blocksize)
(420,s_version)
(421,asb)
(422,error_free_bh:)
(423,asb)
(424,if (!silent)
(425,bh)
(426,asb)
(427,"VFS: Can\'t find an adfs filesystem on dev "\n\\n\\t\\t\\t\\t"%s.\\n")
(428,adfs_checkdiscrecord(dr)
(429,ADFS_NDA_OWNER_WRITE | ADFS_NDA_PUBLIC_READ)
(430,"get root inode failed\\n")
(431,dr)
(432,PTR_ERR(asb->s_map)
(433,root_obj)
(434,EINVAL)
(435,"couldn\'t read superblock on "\n\\n\\t\\t\\t\\t"2nd try.")
(436,EINVAL)
(437,i++)
(438,s_blocksize)
(439,asb)
(440,log2sharesize)
(441,sb->s_root)
(442,goto error;)
(443,sizeof(*asb)
(444,)
(445,asb->s_map[0].dm_bh->b_data)
(446,log2secsize)
(447,dr)
(448,ADFS_F_NAME_LEN)
(449,EINVAL)
(450,brelse(bh)
(451,sb)
(452,s_log2sharesize)
(453,dr)
(454,root_obj.filetype)
(455,if (adfs_checkdiscrecord(dr)
(456,kzalloc(sizeof(*asb)
(457,dr)
(458,asb->s_namelen)
(459,asb->s_map2blk)
(460,ADFS_NDA_OWNER_WRITE)
(461,dr)
(462,asb->s_namelen += 4)
(463,bh->b_data)
(464,bh)
(465,"unable to read superblock")
(466,parent_id)
(467,dr)
(468,b_data + ADFS_DR_OFFSET)
(469,asb->s_owner_mask)
(470,sb)
(471,execaddr)
(472,if (!asb)
(473,s_other_mask)
(474,sb)
(475,sb->s_magic\\t\\t= ADFS_SUPER_MAGIC)
(476,adfs_sops)
(477,8)
(478,if (!bh)
(479,dr->idlen)
(480,asb->s_map)
(481,dr->nzones)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^