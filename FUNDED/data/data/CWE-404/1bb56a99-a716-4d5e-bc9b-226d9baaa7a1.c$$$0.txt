-----label-----
1
-----code-----
static int cm3232_reg_init(struct cm3232_chip *chip)
{
	struct i2c_client *client = chip->client;
	s32 ret;

	chip->als_info = &cm3232_als_info_default;

	/* Identify device */
	ret = i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID);
	if (ret < 0) {
		dev_err(&chip->client->dev, "Error reading addr_id\n");
		return ret;
	}

	if ((ret & 0xFF) != chip->als_info->hw_id)
		return -ENODEV;

	/* Disable and reset device */
	chip->regs_cmd = CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET;
	ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,
					chip->regs_cmd);
	if (ret < 0) {
		dev_err(&chip->client->dev, "Error writing reg_cmd\n");
		return ret;
	}

	/* Register default value */
	chip->regs_cmd = chip->als_info->regs_cmd_default;

	/* Configure register */
	ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,
					chip->regs_cmd);
	if (ret < 0)
		dev_err(&chip->client->dev, "Error writing reg_cmd\n");

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
43,46
44,45
46,47
48,49
50,51
50,52
51,52
51,53
52,53
55,56
55,57
56,57
57,58
57,59
57,60
58,59
60,61
61,62
61,63
62,63
62,64
63,64
68,69
69,70
71,72
71,73
72,73
72,74
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
84,85
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
103,106
103,107
104,105
106,107
108,109
110,111
110,112
111,112
114,115
114,116
115,116
115,117
116,117
119,120
119,121
120,121
121,122
121,123
121,124
122,123
124,125
125,126
125,127
126,127
126,128
127,128
132,133
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
141,143
142,143
142,144
143,144
147,148
148,149
148,150
149,150
151,152
151,153
151,154
151,155
152,153
154,155
156,157
158,159
158,160
159,160
162,163
162,164
163,164
163,165
164,165
167,168
168,169
168,170
168,171
169,170
171,172
172,173
172,174
173,174
173,175
174,175
179,180
180,181
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,27,29,34,35,38,42,45,47,49,53,54,59,64,65,66,67,70,76,77,81,82,83,87,92,93,96,98,102,105,107,109,112,113,117,118,123,128,129,130,131,134,139,140,144,145,146,150,153,155,157,160,161,165,166,170,175,176,177,178,181
-----computeFrom-----
31,32
31,33
40,41
40,42
51,52
51,53
72,73
72,74
74,75
74,76
89,90
89,91
94,95
94,96
100,101
100,102
115,116
115,117
136,137
136,138
148,149
148,150
163,164
163,165
-----guardedBy-----
53,70
117,134
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int cm3232_reg_init(struct cm3232_chip *chip){	struct i2c_client *client = chip->client;	s32 ret;	chip->als_info = &cm3232_als_info_default;	/* Identify device */	ret = i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID);	if (ret < 0) {		dev_err(&chip->client->dev, "Error reading addr_id\n");		return ret;	}	if ((ret & 0xFF) != chip->als_info->hw_id)		return -ENODEV;	/* Disable and reset device */	chip->regs_cmd = CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET;	ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd);	if (ret < 0) {		dev_err(&chip->client->dev, "Error writing reg_cmd\n");		return ret;	}	/* Register default value */	chip->regs_cmd = chip->als_info->regs_cmd_default;	/* Configure register */	ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd);	if (ret < 0)		dev_err(&chip->client->dev, "Error writing reg_cmd\n");	return ret;}
static int
cm3232_reg_init(struct cm3232_chip *chip)
cm3232_reg_init
struct cm3232_chip *chip
struct cm3232_chip
cm3232_chip
*chip
*
chip
{	struct i2c_client *client = chip->client;	s32 ret;	chip->als_info = &cm3232_als_info_default;	/* Identify device */	ret = i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID);	if (ret < 0) {		dev_err(&chip->client->dev, "Error reading addr_id\n");		return ret;	}	if ((ret & 0xFF) != chip->als_info->hw_id)		return -ENODEV;	/* Disable and reset device */	chip->regs_cmd = CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET;	ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd);	if (ret < 0) {		dev_err(&chip->client->dev, "Error writing reg_cmd\n");		return ret;	}	/* Register default value */	chip->regs_cmd = chip->als_info->regs_cmd_default;	/* Configure register */	ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd);	if (ret < 0)		dev_err(&chip->client->dev, "Error writing reg_cmd\n");	return ret;}
struct i2c_client *client = chip->client;
struct i2c_client *client = chip->client;
struct i2c_client
i2c_client
*client = chip->client
*
client
= chip->client
chip->client
chip
chip
client
s32 ret;
s32 ret;
s32
s32
ret
ret
chip->als_info = &cm3232_als_info_default;
chip->als_info = &cm3232_als_info_default
chip->als_info
chip
chip
als_info
&cm3232_als_info_default
cm3232_als_info_default
cm3232_als_info_default
ret = i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID);
ret = i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID)
ret
ret
i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID)
i2c_smbus_read_word_data
i2c_smbus_read_word_data
client
client
CM3232_REG_ADDR_ID
CM3232_REG_ADDR_ID
if (ret < 0) {		dev_err(&chip->client->dev, "Error reading addr_id\n");		return ret;	}
ret < 0
ret
ret
0
{		dev_err(&chip->client->dev, "Error reading addr_id\n");		return ret;	}
dev_err(&chip->client->dev, "Error reading addr_id\n");
dev_err(&chip->client->dev, "Error reading addr_id\n")
dev_err
dev_err
&chip->client->dev
chip->client->dev
chip->client
chip
chip
client
dev
"Error reading addr_id\n"
return ret;
ret
ret
if ((ret & 0xFF) != chip->als_info->hw_id)		return -ENODEV;
(ret & 0xFF) != chip->als_info->hw_id
(ret & 0xFF)
ret & 0xFF
ret
ret
0xFF
chip->als_info->hw_id
chip->als_info
chip
chip
als_info
hw_id
return -ENODEV;
-ENODEV
ENODEV
ENODEV
chip->regs_cmd = CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET;
chip->regs_cmd = CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET
chip->regs_cmd
chip
chip
regs_cmd
CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET
CM3232_CMD_ALS_DISABLE
CM3232_CMD_ALS_DISABLE
CM3232_CMD_ALS_RESET
CM3232_CMD_ALS_RESET
ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd);
ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd)
ret
ret
i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd)
i2c_smbus_write_byte_data
i2c_smbus_write_byte_data
client
client
CM3232_REG_ADDR_CMD
CM3232_REG_ADDR_CMD
chip->regs_cmd
chip
chip
regs_cmd
if (ret < 0) {		dev_err(&chip->client->dev, "Error writing reg_cmd\n");		return ret;	}
ret < 0
ret
ret
0
{		dev_err(&chip->client->dev, "Error writing reg_cmd\n");		return ret;	}
dev_err(&chip->client->dev, "Error writing reg_cmd\n");
dev_err(&chip->client->dev, "Error writing reg_cmd\n")
dev_err
dev_err
&chip->client->dev
chip->client->dev
chip->client
chip
chip
client
dev
"Error writing reg_cmd\n"
return ret;
ret
ret
chip->regs_cmd = chip->als_info->regs_cmd_default;
chip->regs_cmd = chip->als_info->regs_cmd_default
chip->regs_cmd
chip
chip
regs_cmd
chip->als_info->regs_cmd_default
chip->als_info
chip
chip
als_info
regs_cmd_default
ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd);
ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd)
ret
ret
i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,					chip->regs_cmd)
i2c_smbus_write_byte_data
i2c_smbus_write_byte_data
client
client
CM3232_REG_ADDR_CMD
CM3232_REG_ADDR_CMD
chip->regs_cmd
chip
chip
regs_cmd
if (ret < 0)		dev_err(&chip->client->dev, "Error writing reg_cmd\n");
ret < 0
ret
ret
0
dev_err(&chip->client->dev, "Error writing reg_cmd\n");
dev_err(&chip->client->dev, "Error writing reg_cmd\n")
dev_err
dev_err
&chip->client->dev
chip->client->dev
chip->client
chip
chip
client
dev
"Error writing reg_cmd\n"
return ret;
ret
ret
-----joern-----
(70,101,0)
(22,40,0)
(18,104,0)
(17,57,0)
(3,97,0)
(22,90,0)
(5,32,0)
(107,89,0)
(56,41,0)
(89,99,0)
(49,2,0)
(106,17,0)
(85,99,0)
(62,20,0)
(81,102,0)
(27,76,0)
(32,76,0)
(108,76,0)
(38,17,0)
(86,76,0)
(57,102,0)
(92,101,0)
(67,98,0)
(44,0,0)
(65,50,0)
(47,39,0)
(35,77,0)
(33,90,0)
(75,9,0)
(41,56,0)
(6,41,0)
(47,77,0)
(24,56,0)
(14,97,0)
(32,39,0)
(58,91,0)
(2,76,0)
(48,98,0)
(51,93,0)
(93,98,0)
(87,20,0)
(104,98,0)
(108,28,0)
(7,108,0)
(6,98,0)
(28,108,0)
(72,34,0)
(11,50,0)
(80,15,0)
(30,2,0)
(39,47,0)
(19,34,0)
(99,44,0)
(69,18,0)
(103,42,0)
(10,98,0)
(17,38,0)
(73,41,0)
(63,66,0)
(100,48,0)
(44,99,0)
(41,6,0)
(39,32,0)
(56,87,0)
(41,42,0)
(4,75,0)
(64,41,0)
(0,74,0)
(15,87,0)
(108,3,0)
(20,87,0)
(77,47,0)
(99,89,0)
(68,28,0)
(102,42,0)
(54,43,0)
(97,3,0)
(12,6,0)
(63,91,0)
(52,98,0)
(8,27,0)
(57,98,0)
(109,25,0)
(86,90,0)
(34,48,0)
(84,40,0)
(25,48,0)
(37,86,0)
(104,70,0)
(50,25,0)
(36,12,0)
(50,76,0)
(55,39,0)
(56,76,0)
(95,58,0)
(66,6,0)
(90,22,0)
(94,6,0)
(75,57,0)
(90,86,0)
(60,43,0)
(89,76,0)
(45,0,0)
(31,101,0)
(43,57,0)
(83,56,0)
(2,42,0)
(15,76,0)
(101,76,0)
(1,18,0)
(101,70,0)
(63,75,0)
(50,104,0)
(70,104,0)
(48,25,0)
(27,3,0)
(105,98,0)
(78,57,0)
(101,3,0)
(71,25,0)
(25,42,0)
(16,20,0)
(66,74,0)
(63,93,0)
(26,89,0)
(38,28,0)
(59,15,0)
(88,17,0)
(82,12,0)
(0,44,0)
(40,22,0)
(3,98,0)
(53,108,0)
(79,66,0)
(96,27,0)
(40,9,0)
(18,76,0)
(91,27,0)
(21,102,0)
(29,98,0)
(42,98,0)
(28,38,0)
(93,48,0)
(61,86,0)
(42,2,0)
(50,87,0)
(87,98,0)
(25,50,0)
(23,98,0)
(13,70,0)
(46,32,0)
(102,57,0)
(56,24,1)
(11,109,1)
(26,107,1)
(45,44,1)
(90,33,1)
(78,3,1)
(86,76,1)
(88,43,1)
(50,87,1)
(44,99,1)
(27,76,1)
(97,14,1)
(75,57,1)
(55,32,1)
(84,22,1)
(90,86,1)
(94,87,1)
(36,6,1)
(56,87,1)
(7,17,1)
(77,35,1)
(13,101,1)
(89,26,1)
(72,48,1)
(63,75,1)
(101,31,1)
(15,59,1)
(22,90,1)
(63,93,1)
(54,60,1)
(68,108,1)
(12,82,1)
(60,57,1)
(37,43,1)
(93,51,1)
(77,47,1)
(81,21,1)
(2,76,1)
(75,4,1)
(39,32,1)
(64,73,1)
(82,36,1)
(104,70,1)
(80,38,1)
(38,28,1)
(93,48,1)
(16,15,1)
(21,78,1)
(57,102,1)
(102,42,1)
(35,47,1)
(92,18,1)
(108,76,1)
(3,97,1)
(14,27,1)
(41,42,1)
(38,17,1)
(79,0,1)
(51,34,1)
(15,76,1)
(99,89,1)
(42,2,1)
(91,27,1)
(50,65,1)
(108,3,1)
(100,104,1)
(56,76,1)
(32,46,1)
(51,77,1)
(66,6,1)
(0,45,1)
(48,25,1)
(34,19,1)
(17,57,1)
(63,91,1)
(87,20,1)
(102,81,1)
(101,76,1)
(95,38,1)
(5,34,1)
(24,83,1)
(71,100,1)
(66,79,1)
(12,6,1)
(59,80,1)
(33,86,1)
(69,12,1)
(109,71,1)
(34,48,1)
(19,72,1)
(17,106,1)
(41,56,1)
(1,69,1)
(0,44,1)
(25,42,1)
(96,42,1)
(73,94,1)
(101,3,1)
(32,76,1)
(18,1,1)
(65,11,1)
(53,7,1)
(28,108,1)
(28,68,1)
(39,55,1)
(8,96,1)
(85,89,1)
(108,53,1)
(40,84,1)
(91,58,1)
(4,40,1)
(50,76,1)
(43,57,1)
(46,5,1)
(20,62,1)
(31,92,1)
(40,22,1)
(99,85,1)
(18,76,1)
(27,8,1)
(106,88,1)
(58,95,1)
(50,104,1)
(62,16,1)
(2,30,1)
(86,61,1)
(63,66,1)
(107,12,1)
(70,13,1)
(6,41,1)
(49,103,1)
(83,64,1)
(70,101,1)
(89,76,1)
(43,54,1)
(25,50,1)
(61,37,1)
(47,39,1)
(30,49,1)
(93,12,2)
(17,57,2)
(50,87,2)
(22,90,2)
(94,38,2)
(70,12,2)
(44,99,2)
(47,34,2)
(47,39,2)
(33,43,2)
(72,12,2)
(50,104,2)
(108,3,2)
(75,57,2)
(108,43,2)
(63,93,2)
(6,41,2)
(56,87,2)
(26,12,2)
(80,38,2)
(48,25,2)
(41,42,2)
(56,38,2)
(99,12,2)
(69,12,2)
(25,12,2)
(40,43,2)
(41,56,2)
(85,12,2)
(56,76,2)
(89,12,2)
(45,12,2)
(20,38,2)
(101,76,2)
(93,48,2)
(102,42,2)
(86,43,2)
(71,12,2)
(28,108,2)
(100,12,2)
(64,38,2)
(32,34,2)
(18,12,2)
(61,43,2)
(91,38,2)
(73,38,2)
(88,43,2)
(75,43,2)
(63,75,2)
(90,86,2)
(65,12,2)
(106,43,2)
(5,34,2)
(59,38,2)
(62,38,2)
(95,38,2)
(50,12,2)
(41,38,2)
(51,12,2)
(12,6,2)
(50,76,2)
(87,20,2)
(17,43,2)
(44,12,2)
(92,12,2)
(108,76,2)
(28,43,2)
(6,38,2)
(107,12,2)
(77,47,2)
(42,2,2)
(34,12,2)
(7,43,2)
(91,27,2)
(36,38,2)
(79,12,2)
(39,32,2)
(19,12,2)
(3,97,2)
(77,34,2)
(53,43,2)
(24,38,2)
(37,43,2)
(38,17,2)
(43,57,2)
(83,38,2)
(104,12,2)
(84,43,2)
(63,66,2)
(27,76,2)
(35,34,2)
(66,6,2)
(48,12,2)
(46,34,2)
(58,38,2)
(1,12,2)
(109,12,2)
(101,3,2)
(18,76,2)
(38,43,2)
(25,42,2)
(89,76,2)
(0,44,2)
(70,101,2)
(4,43,2)
(55,34,2)
(38,28,2)
(0,12,2)
(22,43,2)
(12,38,2)
(104,70,2)
(57,102,2)
(11,12,2)
(34,48,2)
(32,76,2)
(40,22,2)
(15,76,2)
(13,12,2)
(39,34,2)
(2,76,2)
(90,43,2)
(16,38,2)
(63,91,2)
(15,38,2)
(68,43,2)
(31,12,2)
(66,12,2)
(86,76,2)
(99,89,2)
(82,38,2)
(87,38,2)
(101,12,2)
(25,50,2)
-----------------------------------
(0,dev_err(&chip->client->dev, "Error writing reg_cmd\\n")
(1,regs_cmd)
(2,chip->client)
(3,chip->als_info = &cm3232_als_info_default)
(4,ret)
(5,chip)
(6,ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,\n\\n\\t\\t\\t\\t\\tchip->regs_cmd)
(7,chip)
(8,als_info)
(9,)
(10,if (ret < 0)
(11,chip)
(12,ret < 0)
(13,regs_cmd_default)
(14,cm3232_als_info_default)
(15,chip->regs_cmd)
(16,CM3232_CMD_ALS_DISABLE)
(17,ret & 0xFF)
(18,chip->regs_cmd)
(19,0)
(20,CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET)
(21,client)
(22,&chip->client->dev)
(23,ret)
(24,regs_cmd)
(25,i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,\n\\n\\t\\t\\t\\t\\tchip->regs_cmd)
(26,client)
(27,chip->als_info)
(28,chip->als_info->hw_id)
(29,client)
(30,client)
(31,als_info)
(32,chip->client)
(33,dev)
(34,ret < 0)
(35,"Error writing reg_cmd\\n")
(36,ret)
(37,chip)
(38,(ret & 0xFF)
(39,chip->client->dev)
(40,dev_err(&chip->client->dev, "Error reading addr_id\\n")
(41,i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,\n\\n\\t\\t\\t\\t\\tchip->regs_cmd)
(42,*client = chip->client)
(43,ret < 0)
(44,&chip->client->dev)
(45,"Error writing reg_cmd\\n")
(46,client)
(47,&chip->client->dev)
(48,ret = i2c_smbus_write_byte_data(client, CM3232_REG_ADDR_CMD,\n\\n\\t\\t\\t\\t\\tchip->regs_cmd)
(49,chip)
(50,chip->regs_cmd)
(51,ret)
(52,if ((ret & 0xFF)
(53,als_info)
(54,0)
(55,dev)
(56,chip->regs_cmd)
(57,ret = i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID)
(58,-ENODEV)
(59,regs_cmd)
(60,ret)
(61,client)
(62,CM3232_CMD_ALS_RESET)
(63,RET)
(64,CM3232_REG_ADDR_CMD)
(65,regs_cmd)
(66,return ret;)
(67,if (ret < 0)
(68,hw_id)
(69,chip)
(70,chip->als_info->regs_cmd_default)
(71,client)
(72,ret)
(73,client)
(74,)
(75,return ret;)
(76,struct cm3232_chip *chip)
(77,dev_err(&chip->client->dev, "Error writing reg_cmd\\n")
(78,ret)
(79,ret)
(80,chip)
(81,CM3232_REG_ADDR_ID)
(82,0)
(83,chip)
(84,"Error reading addr_id\\n")
(85,dev)
(86,chip->client)
(87,chip->regs_cmd = CM3232_CMD_ALS_DISABLE | CM3232_CMD_ALS_RESET)
(88,ret)
(89,chip->client)
(90,chip->client->dev)
(91,return -ENODEV;)
(92,chip)
(93,return ret;)
(94,ret)
(95,ENODEV)
(96,chip)
(97,&cm3232_als_info_default)
(98,)
(99,chip->client->dev)
(100,ret)
(101,chip->als_info)
(102,i2c_smbus_read_word_data(client, CM3232_REG_ADDR_ID)
(103,client)
(104,chip->regs_cmd = chip->als_info->regs_cmd_default)
(105,if (ret < 0)
(106,0xFF)
(107,chip)
(108,chip->als_info)
(109,CM3232_REG_ADDR_CMD)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^