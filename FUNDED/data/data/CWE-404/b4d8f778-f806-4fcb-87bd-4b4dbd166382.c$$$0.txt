-----label-----
0
-----code-----
static int complete_sq_drain_wr(struct c4iw_qp *qhp, struct ib_send_wr *wr)
{
	struct t4_cqe cqe = {};
	struct c4iw_cq *schp;
	unsigned long flag;
	struct t4_cq *cq;
	int opcode;

	schp = to_c4iw_cq(qhp->ibqp.send_cq);
	cq = &schp->cq;

	opcode = ib_to_fw_opcode(wr->opcode);
	if (opcode < 0)
		return opcode;

	cqe.u.drain_cookie = wr->wr_id;
	cqe.header = cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH) |
				 CQE_OPCODE_V(opcode) |
				 CQE_TYPE_V(1) |
				 CQE_SWCQE_V(1) |
				 CQE_DRAIN_V(1) |
				 CQE_QPID_V(qhp->wq.sq.qid));

	spin_lock_irqsave(&schp->lock, flag);
	cqe.bits_type_ts = cpu_to_be64(CQE_GENBIT_V((u64)cq->gen));
	cq->sw_queue[cq->sw_pidx] = cqe;
	t4_swcq_produce(cq);
	spin_unlock_irqrestore(&schp->lock, flag);

	if (t4_clear_cq_armed(&schp->cq)) {
		spin_lock_irqsave(&schp->comp_handler_lock, flag);
		(*schp->ibcq.comp_handler)(&schp->ibcq,
					   schp->ibcq.cq_context);
		spin_unlock_irqrestore(&schp->comp_handler_lock, flag);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
18,19
19,20
19,21
20,21
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
48,49
50,51
51,52
51,53
52,53
54,55
54,56
55,56
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
79,81
80,81
83,84
83,85
84,85
84,86
85,86
88,89
89,90
91,92
92,93
92,94
93,94
93,95
94,95
94,96
95,96
99,100
99,101
100,101
103,104
104,105
104,106
105,106
105,107
106,107
109,110
109,111
110,111
112,113
112,114
113,114
113,115
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
120,121
122,123
122,124
123,124
125,126
127,128
127,129
128,129
131,132
131,133
132,133
135,136
135,137
136,137
139,140
139,141
140,141
142,143
142,144
143,144
143,145
144,145
144,146
145,146
150,151
151,152
151,153
151,154
152,153
154,155
155,156
155,157
156,157
159,160
161,162
162,163
162,164
163,164
163,165
164,165
167,168
167,169
168,169
170,171
170,172
171,172
173,174
173,175
174,175
174,176
175,176
178,179
178,180
179,180
182,183
183,184
183,185
184,185
184,186
185,186
185,187
186,187
189,190
189,191
190,191
193,194
195,196
196,197
196,198
197,198
199,200
201,202
202,203
202,204
202,205
203,204
205,206
206,207
206,208
207,208
210,211
212,213
212,214
213,214
213,215
214,215
216,217
217,218
217,219
218,219
221,222
221,223
221,224
222,223
223,224
223,225
223,226
224,225
226,227
227,228
227,229
228,229
231,232
233,234
234,235
234,236
234,237
235,236
236,237
237,238
237,239
238,239
238,240
239,240
243,244
244,245
244,246
245,246
248,249
248,250
249,250
249,251
250,251
254,255
255,256
255,257
255,258
256,257
258,259
259,260
259,261
260,261
263,264
265,266
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,25,29,31,32,35,37,41,43,44,47,49,53,56,60,61,62,66,70,71,75,78,81,82,86,87,90,96,97,98,101,102,107,108,111,119,121,124,126,129,130,133,134,137,138,141,146,147,148,149,153,157,158,160,165,166,169,172,176,177,180,181,187,188,191,192,194,198,200,204,208,209,211,215,219,220,225,229,230,232,240,241,242,246,247,251,252,253,257,261,262,264,266
-----computeFrom-----
51,52
51,53
64,65
64,66
73,74
73,75
84,85
84,86
92,93
92,94
104,105
104,106
112,113
112,114
113,114
113,115
114,115
114,116
115,116
115,117
116,117
116,118
162,163
162,164
183,184
183,185
-----guardedBy-----
86,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int complete_sq_drain_wr(struct c4iw_qp *qhp, struct ib_send_wr *wr){	struct t4_cqe cqe = {};	struct c4iw_cq *schp;	unsigned long flag;	struct t4_cq *cq;	int opcode;	schp = to_c4iw_cq(qhp->ibqp.send_cq);	cq = &schp->cq;	opcode = ib_to_fw_opcode(wr->opcode);	if (opcode < 0)		return opcode;	cqe.u.drain_cookie = wr->wr_id;	cqe.header = cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1) |				 CQE_QPID_V(qhp->wq.sq.qid));	spin_lock_irqsave(&schp->lock, flag);	cqe.bits_type_ts = cpu_to_be64(CQE_GENBIT_V((u64)cq->gen));	cq->sw_queue[cq->sw_pidx] = cqe;	t4_swcq_produce(cq);	spin_unlock_irqrestore(&schp->lock, flag);	if (t4_clear_cq_armed(&schp->cq)) {		spin_lock_irqsave(&schp->comp_handler_lock, flag);		(*schp->ibcq.comp_handler)(&schp->ibcq,					   schp->ibcq.cq_context);		spin_unlock_irqrestore(&schp->comp_handler_lock, flag);	}	return 0;}
static int
complete_sq_drain_wr(struct c4iw_qp *qhp, struct ib_send_wr *wr)
complete_sq_drain_wr
struct c4iw_qp *qhp
struct c4iw_qp
c4iw_qp
*qhp
*
qhp
struct ib_send_wr *wr
struct ib_send_wr
ib_send_wr
*wr
*
wr
{	struct t4_cqe cqe = {};	struct c4iw_cq *schp;	unsigned long flag;	struct t4_cq *cq;	int opcode;	schp = to_c4iw_cq(qhp->ibqp.send_cq);	cq = &schp->cq;	opcode = ib_to_fw_opcode(wr->opcode);	if (opcode < 0)		return opcode;	cqe.u.drain_cookie = wr->wr_id;	cqe.header = cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1) |				 CQE_QPID_V(qhp->wq.sq.qid));	spin_lock_irqsave(&schp->lock, flag);	cqe.bits_type_ts = cpu_to_be64(CQE_GENBIT_V((u64)cq->gen));	cq->sw_queue[cq->sw_pidx] = cqe;	t4_swcq_produce(cq);	spin_unlock_irqrestore(&schp->lock, flag);	if (t4_clear_cq_armed(&schp->cq)) {		spin_lock_irqsave(&schp->comp_handler_lock, flag);		(*schp->ibcq.comp_handler)(&schp->ibcq,					   schp->ibcq.cq_context);		spin_unlock_irqrestore(&schp->comp_handler_lock, flag);	}	return 0;}
struct t4_cqe cqe = {};
struct t4_cqe cqe = {};
struct t4_cqe
t4_cqe
cqe = {}
cqe
= {}
{}
struct c4iw_cq *schp;
struct c4iw_cq *schp;
struct c4iw_cq
c4iw_cq
*schp
*
schp
unsigned long flag;
unsigned long flag;
unsigned long
flag
flag
struct t4_cq *cq;
struct t4_cq *cq;
struct t4_cq
t4_cq
*cq
*
cq
int opcode;
int opcode;
int
opcode
opcode
schp = to_c4iw_cq(qhp->ibqp.send_cq);
schp = to_c4iw_cq(qhp->ibqp.send_cq)
schp
schp
to_c4iw_cq(qhp->ibqp.send_cq)
to_c4iw_cq
to_c4iw_cq
qhp->ibqp.send_cq
qhp->ibqp
qhp
qhp
ibqp
send_cq
cq = &schp->cq;
cq = &schp->cq
cq
cq
&schp->cq
schp->cq
schp
schp
cq
opcode = ib_to_fw_opcode(wr->opcode);
opcode = ib_to_fw_opcode(wr->opcode)
opcode
opcode
ib_to_fw_opcode(wr->opcode)
ib_to_fw_opcode
ib_to_fw_opcode
wr->opcode
wr
wr
opcode
if (opcode < 0)		return opcode;
opcode < 0
opcode
opcode
0
return opcode;
opcode
opcode
cqe.u.drain_cookie = wr->wr_id;
cqe.u.drain_cookie = wr->wr_id
cqe.u.drain_cookie
cqe.u
cqe
cqe
u
drain_cookie
wr->wr_id
wr
wr
wr_id
cqe.header = cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1) |				 CQE_QPID_V(qhp->wq.sq.qid));
cqe.header = cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1) |				 CQE_QPID_V(qhp->wq.sq.qid))
cqe.header
cqe
cqe
header
cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1) |				 CQE_QPID_V(qhp->wq.sq.qid))
cpu_to_be32
cpu_to_be32
CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1) |				 CQE_QPID_V(qhp->wq.sq.qid)
CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1) |				 CQE_DRAIN_V(1)
CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1) |				 CQE_SWCQE_V(1)
CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode) |				 CQE_TYPE_V(1)
CQE_STATUS_V(T4_ERR_SWFLUSH) |				 CQE_OPCODE_V(opcode)
CQE_STATUS_V(T4_ERR_SWFLUSH)
CQE_STATUS_V
CQE_STATUS_V
T4_ERR_SWFLUSH
T4_ERR_SWFLUSH
CQE_OPCODE_V(opcode)
CQE_OPCODE_V
CQE_OPCODE_V
opcode
opcode
CQE_TYPE_V(1)
CQE_TYPE_V
CQE_TYPE_V
1
CQE_SWCQE_V(1)
CQE_SWCQE_V
CQE_SWCQE_V
1
CQE_DRAIN_V(1)
CQE_DRAIN_V
CQE_DRAIN_V
1
CQE_QPID_V(qhp->wq.sq.qid)
CQE_QPID_V
CQE_QPID_V
qhp->wq.sq.qid
qhp->wq.sq
qhp->wq
qhp
qhp
wq
sq
qid
spin_lock_irqsave(&schp->lock, flag);
spin_lock_irqsave(&schp->lock, flag)
spin_lock_irqsave
spin_lock_irqsave
&schp->lock
schp->lock
schp
schp
lock
flag
flag
cqe.bits_type_ts = cpu_to_be64(CQE_GENBIT_V((u64)cq->gen));
cqe.bits_type_ts = cpu_to_be64(CQE_GENBIT_V((u64)cq->gen))
cqe.bits_type_ts
cqe
cqe
bits_type_ts
cpu_to_be64(CQE_GENBIT_V((u64)cq->gen))
cpu_to_be64
cpu_to_be64
CQE_GENBIT_V((u64)cq->gen)
CQE_GENBIT_V
CQE_GENBIT_V
(u64)cq->gen
u64
u64
u64

cq->gen
cq
cq
gen
cq->sw_queue[cq->sw_pidx] = cqe;
cq->sw_queue[cq->sw_pidx] = cqe
cq->sw_queue[cq->sw_pidx]
cq->sw_queue
cq
cq
sw_queue
cq->sw_pidx
cq
cq
sw_pidx
cqe
cqe
t4_swcq_produce(cq);
t4_swcq_produce(cq)
t4_swcq_produce
t4_swcq_produce
cq
cq
spin_unlock_irqrestore(&schp->lock, flag);
spin_unlock_irqrestore(&schp->lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&schp->lock
schp->lock
schp
schp
lock
flag
flag
if (t4_clear_cq_armed(&schp->cq)) {		spin_lock_irqsave(&schp->comp_handler_lock, flag);		(*schp->ibcq.comp_handler)(&schp->ibcq,					   schp->ibcq.cq_context);		spin_unlock_irqrestore(&schp->comp_handler_lock, flag);	}
t4_clear_cq_armed(&schp->cq)
t4_clear_cq_armed
t4_clear_cq_armed
&schp->cq
schp->cq
schp
schp
cq
{		spin_lock_irqsave(&schp->comp_handler_lock, flag);		(*schp->ibcq.comp_handler)(&schp->ibcq,					   schp->ibcq.cq_context);		spin_unlock_irqrestore(&schp->comp_handler_lock, flag);	}
spin_lock_irqsave(&schp->comp_handler_lock, flag);
spin_lock_irqsave(&schp->comp_handler_lock, flag)
spin_lock_irqsave
spin_lock_irqsave
&schp->comp_handler_lock
schp->comp_handler_lock
schp
schp
comp_handler_lock
flag
flag
(*schp->ibcq.comp_handler)(&schp->ibcq,					   schp->ibcq.cq_context);
(*schp->ibcq.comp_handler)(&schp->ibcq,					   schp->ibcq.cq_context)
(*schp->ibcq.comp_handler)
*schp->ibcq.comp_handler
schp->ibcq.comp_handler
schp->ibcq
schp
schp
ibcq
comp_handler
&schp->ibcq
schp->ibcq
schp
schp
ibcq
schp->ibcq.cq_context
schp->ibcq
schp
schp
ibcq
cq_context
spin_unlock_irqrestore(&schp->comp_handler_lock, flag);
spin_unlock_irqrestore(&schp->comp_handler_lock, flag)
spin_unlock_irqrestore
spin_unlock_irqrestore
&schp->comp_handler_lock
schp->comp_handler_lock
schp
schp
comp_handler_lock
flag
flag
return 0;
0
-----joern-----
(32,102,0)
(84,94,0)
(64,34,0)
(25,44,0)
(61,53,0)
(133,39,0)
(21,30,0)
(26,41,0)
(76,134,0)
(87,115,0)
(89,115,0)
(43,84,0)
(94,60,0)
(104,34,0)
(59,62,0)
(27,61,0)
(66,117,0)
(106,109,0)
(40,120,0)
(108,91,0)
(90,13,0)
(98,85,0)
(9,100,0)
(129,91,0)
(126,117,0)
(2,133,0)
(66,6,0)
(12,69,0)
(87,53,0)
(82,13,0)
(114,25,0)
(72,40,0)
(53,61,0)
(127,90,0)
(79,100,0)
(65,69,0)
(72,99,0)
(7,13,0)
(46,89,0)
(132,62,0)
(2,1,0)
(38,0,0)
(125,96,0)
(17,9,0)
(102,108,0)
(30,111,0)
(37,133,0)
(135,22,0)
(39,50,0)
(40,34,0)
(65,10,0)
(69,39,0)
(3,25,0)
(14,104,0)
(80,3,0)
(58,35,0)
(40,22,0)
(75,22,0)
(86,128,0)
(0,130,0)
(22,90,0)
(81,50,0)
(4,133,0)
(69,65,0)
(101,31,0)
(1,2,0)
(61,32,0)
(51,100,0)
(116,74,0)
(60,94,0)
(109,128,0)
(53,38,0)
(133,2,0)
(54,87,0)
(76,24,0)
(23,19,0)
(99,32,0)
(100,9,0)
(24,100,0)
(30,39,0)
(131,41,0)
(44,59,0)
(123,17,0)
(120,124,0)
(95,84,0)
(20,48,0)
(24,76,0)
(41,100,0)
(76,110,0)
(51,120,0)
(38,136,0)
(11,31,0)
(74,130,0)
(71,35,0)
(93,3,0)
(60,13,0)
(16,129,0)
(31,32,0)
(115,6,0)
(18,109,0)
(113,124,0)
(73,13,0)
(108,102,0)
(124,13,0)
(68,5,0)
(3,39,0)
(109,39,0)
(134,127,0)
(44,25,0)
(40,74,0)
(0,38,0)
(85,47,0)
(81,35,0)
(115,89,0)
(49,40,0)
(117,66,0)
(112,69,0)
(28,32,0)
(117,48,0)
(34,82,0)
(41,120,0)
(120,41,0)
(97,10,0)
(136,38,0)
(33,136,0)
(17,39,0)
(119,1,0)
(94,84,0)
(128,86,0)
(9,17,0)
(59,44,0)
(85,48,0)
(57,85,0)
(32,13,0)
(88,13,0)
(56,30,0)
(6,96,0)
(67,54,0)
(130,13,0)
(100,13,0)
(45,13,0)
(48,85,0)
(48,117,0)
(62,59,0)
(63,104,0)
(134,76,0)
(121,13,0)
(83,60,0)
(102,32,0)
(78,13,0)
(40,13,0)
(52,51,0)
(62,39,0)
(115,87,0)
(35,81,0)
(15,13,0)
(53,87,0)
(92,108,0)
(36,24,0)
(77,81,0)
(25,3,0)
(68,111,0)
(50,81,0)
(1,5,0)
(130,0,0)
(105,99,0)
(6,66,0)
(103,62,0)
(96,6,0)
(122,68,0)
(82,129,0)
(35,47,0)
(107,51,0)
(70,24,0)
(50,39,0)
(84,39,0)
(87,54,0)
(44,5,0)
(10,65,0)
(120,51,0)
(42,108,0)
(38,53,0)
(127,134,0)
(111,68,0)
(10,13,0)
(90,127,0)
(55,74,0)
(34,104,0)
(39,13,0)
(19,13,0)
(8,39,0)
(29,129,0)
(111,30,0)
(118,17,0)
(128,109,0)
(110,76,0)
(6,115,0)
(19,100,0)
(129,82,0)
(114,3,1)
(115,89,1)
(41,100,1)
(41,26,1)
(40,22,1)
(72,99,1)
(10,65,1)
(115,6,1)
(127,134,1)
(112,130,1)
(129,29,1)
(34,104,1)
(42,28,1)
(1,2,1)
(6,96,1)
(97,65,1)
(50,81,1)
(136,33,1)
(39,50,1)
(51,107,1)
(40,34,1)
(61,32,1)
(93,80,1)
(135,10,1)
(49,1,1)
(58,71,1)
(66,117,1)
(94,84,1)
(85,98,1)
(117,48,1)
(23,124,1)
(31,32,1)
(53,87,1)
(96,125,1)
(119,2,1)
(18,106,1)
(55,82,1)
(9,17,1)
(69,12,1)
(103,132,1)
(25,3,1)
(116,55,1)
(76,24,1)
(120,41,1)
(49,86,1)
(133,39,1)
(44,59,1)
(108,91,1)
(132,68,1)
(87,54,1)
(108,92,1)
(89,46,1)
(65,69,1)
(120,51,1)
(100,9,1)
(19,100,1)
(3,93,1)
(59,62,1)
(99,32,1)
(109,39,1)
(48,85,1)
(81,35,1)
(92,42,1)
(22,75,1)
(129,91,1)
(117,126,1)
(24,100,1)
(28,100,1)
(30,39,1)
(29,16,1)
(74,116,1)
(0,38,1)
(133,4,1)
(19,23,1)
(83,94,1)
(68,122,1)
(24,70,1)
(113,120,1)
(54,67,1)
(75,135,1)
(63,31,1)
(40,49,1)
(99,105,1)
(35,58,1)
(16,34,1)
(105,31,1)
(107,52,1)
(44,25,1)
(14,63,1)
(95,43,1)
(21,56,1)
(125,89,1)
(80,59,1)
(35,47,1)
(82,129,1)
(1,119,1)
(56,86,1)
(53,61,1)
(71,8,1)
(72,40,1)
(32,102,1)
(3,39,1)
(2,133,1)
(57,96,1)
(84,95,1)
(33,74,1)
(30,21,1)
(26,131,1)
(126,48,1)
(87,115,1)
(123,118,1)
(70,36,1)
(20,85,1)
(10,97,1)
(106,60,1)
(48,20,1)
(17,123,1)
(11,101,1)
(25,114,1)
(98,57,1)
(67,61,1)
(27,136,1)
(34,64,1)
(130,0,1)
(61,27,1)
(134,76,1)
(17,39,1)
(4,37,1)
(128,109,1)
(81,77,1)
(101,32,1)
(40,120,1)
(84,39,1)
(68,111,1)
(37,44,1)
(69,39,1)
(124,113,1)
(51,100,1)
(86,128,1)
(122,111,1)
(109,18,1)
(12,112,1)
(79,39,1)
(43,19,1)
(36,22,1)
(40,74,1)
(111,30,1)
(77,35,1)
(46,54,1)
(118,79,1)
(102,108,1)
(52,90,1)
(62,103,1)
(31,11,1)
(38,53,1)
(131,51,1)
(104,14,1)
(62,39,1)
(76,110,1)
(60,94,1)
(38,136,1)
(85,47,1)
(90,127,1)
(64,104,1)
(6,66,1)
(60,83,1)
(96,31,2)
(72,99,2)
(98,31,2)
(61,32,2)
(23,31,2)
(10,65,2)
(59,86,2)
(90,127,2)
(102,108,2)
(86,31,2)
(117,48,2)
(133,86,2)
(3,86,2)
(52,31,2)
(34,31,2)
(60,31,2)
(35,47,2)
(56,86,2)
(115,89,2)
(119,86,2)
(85,31,2)
(128,109,2)
(20,31,2)
(128,31,2)
(59,62,2)
(126,31,2)
(108,91,2)
(32,102,2)
(105,31,2)
(44,86,2)
(66,31,2)
(24,31,2)
(66,117,2)
(40,34,2)
(17,39,2)
(68,111,2)
(55,31,2)
(69,39,2)
(65,69,2)
(22,31,2)
(116,31,2)
(34,104,2)
(62,39,2)
(115,31,2)
(83,31,2)
(127,134,2)
(76,110,2)
(85,47,2)
(61,31,2)
(67,31,2)
(36,31,2)
(50,81,2)
(48,31,2)
(104,31,2)
(135,31,2)
(113,31,2)
(4,86,2)
(21,86,2)
(80,86,2)
(51,100,2)
(27,31,2)
(63,31,2)
(39,50,2)
(134,76,2)
(124,31,2)
(31,32,2)
(89,31,2)
(75,31,2)
(14,31,2)
(94,31,2)
(41,100,2)
(1,2,2)
(87,31,2)
(54,31,2)
(103,86,2)
(81,35,2)
(131,31,2)
(48,85,2)
(19,31,2)
(106,31,2)
(115,6,2)
(82,129,2)
(90,31,2)
(44,25,2)
(3,39,2)
(122,86,2)
(130,0,2)
(46,31,2)
(24,100,2)
(29,31,2)
(6,31,2)
(51,31,2)
(25,3,2)
(43,31,2)
(6,66,2)
(97,31,2)
(41,31,2)
(72,40,2)
(9,17,2)
(127,31,2)
(120,51,2)
(30,39,2)
(1,86,2)
(40,22,2)
(74,31,2)
(87,54,2)
(99,32,2)
(40,120,2)
(86,128,2)
(0,31,2)
(37,86,2)
(134,31,2)
(84,39,2)
(111,86,2)
(93,86,2)
(112,31,2)
(38,136,2)
(129,91,2)
(38,53,2)
(2,133,2)
(12,31,2)
(53,87,2)
(65,31,2)
(53,61,2)
(120,31,2)
(57,31,2)
(125,31,2)
(117,31,2)
(114,86,2)
(30,86,2)
(133,39,2)
(18,31,2)
(136,31,2)
(132,86,2)
(68,86,2)
(69,31,2)
(60,94,2)
(64,31,2)
(99,31,2)
(26,31,2)
(16,31,2)
(111,30,2)
(33,31,2)
(82,31,2)
(84,31,2)
(40,74,2)
(38,31,2)
(120,41,2)
(107,31,2)
(10,31,2)
(100,9,2)
(44,59,2)
(70,31,2)
(129,31,2)
(87,115,2)
(76,24,2)
(109,39,2)
(19,100,2)
(94,84,2)
(25,86,2)
(76,31,2)
(40,31,2)
(49,31,2)
(109,31,2)
(53,31,2)
(95,31,2)
(0,38,2)
(2,86,2)
(62,86,2)
(6,96,2)
(130,31,2)
-----------------------------------
(0,cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH)
(1,spin_unlock_irqrestore(&schp->comp_handler_lock, flag)
(2,&schp->comp_handler_lock)
(3,schp->ibcq)
(4,comp_handler_lock)
(5,)
(6,CQE_DRAIN_V(1)
(7,cq)
(8,schp)
(9,&schp->cq)
(10,spin_lock_irqsave(&schp->lock, flag)
(11,0)
(12,lock)
(13,)
(14,u)
(15,)
(16,wr)
(17,schp->cq)
(18,cq)
(19,t4_swcq_produce(cq)
(20,sq)
(21,comp_handler_lock)
(22,cqe.bits_type_ts)
(23,cq)
(24,cq->gen)
(25,schp->ibcq.cq_context)
(26,sw_pidx)
(27,opcode)
(28,opcode)
(29,wr_id)
(30,schp->comp_handler_lock)
(31,opcode < 0)
(32,opcode = ib_to_fw_opcode(wr->opcode)
(33,T4_ERR_SWFLUSH)
(34,cqe.u.drain_cookie)
(35,qhp->ibqp)
(36,cq)
(37,schp)
(38,CQE_STATUS_V(T4_ERR_SWFLUSH)
(39,schp = to_c4iw_cq(qhp->ibqp.send_cq)
(40,return 0;)
(41,cq->sw_pidx)
(42,wr)
(43,schp)
(44,(*schp->ibcq.comp_handler)
(45,schp)
(46,1)
(47,struct c4iw_qp *qhp)
(48,qhp->wq.sq)
(49,0)
(50,to_c4iw_cq(qhp->ibqp.send_cq)
(51,cq->sw_queue)
(52,cq)
(53,CQE_OPCODE_V(opcode)
(54,CQE_TYPE_V(1)
(55,cqe)
(56,schp)
(57,qhp)
(58,ibqp)
(59,&schp->ibcq)
(60,spin_unlock_irqrestore(&schp->lock, flag)
(61,CQE_OPCODE_V(opcode)
(62,schp->ibcq)
(63,cqe)
(64,drain_cookie)
(65,&schp->lock)
(66,CQE_QPID_V(qhp->wq.sq.qid)
(67,1)
(68,spin_lock_irqsave(&schp->comp_handler_lock, flag)
(69,schp->lock)
(70,gen)
(71,qhp)
(72,RET)
(73,opcode)
(74,cqe.header)
(75,bits_type_ts)
(76,(u64)
(77,send_cq)
(78,flag)
(79,cq)
(80,schp)
(81,qhp->ibqp.send_cq)
(82,cqe.u.drain_cookie = wr->wr_id)
(83,flag)
(84,schp->lock)
(85,qhp->wq)
(86,t4_clear_cq_armed(&schp->cq)
(87,CQE_TYPE_V(1)
(88,if (opcode < 0)
(89,CQE_SWCQE_V(1)
(90,cqe.bits_type_ts = cpu_to_be64(CQE_GENBIT_V((u64)
(91,struct ib_send_wr *wr)
(92,opcode)
(93,ibcq)
(94,&schp->lock)
(95,lock)
(96,CQE_DRAIN_V(1)
(97,flag)
(98,wq)
(99,return opcode;)
(100,cq = &schp->cq)
(101,opcode)
(102,ib_to_fw_opcode(wr->opcode)
(103,ibcq)
(104,cqe.u)
(105,opcode)
(106,schp)
(107,sw_queue)
(108,wr->opcode)
(109,schp->cq)
(110,u64)
(111,&schp->comp_handler_lock)
(112,schp)
(113,cqe)
(114,cq_context)
(115,CQE_SWCQE_V(1)
(116,header)
(117,qhp->wq.sq.qid)
(118,schp)
(119,flag)
(120,cq->sw_queue[cq->sw_pidx])
(121,if (t4_clear_cq_armed(&schp->cq)
(122,flag)
(123,cq)
(124,cq->sw_queue[cq->sw_pidx] = cqe)
(125,1)
(126,qid)
(127,cpu_to_be64(CQE_GENBIT_V((u64)
(128,&schp->cq)
(129,wr->wr_id)
(130,cqe.header = cpu_to_be32(CQE_STATUS_V(T4_ERR_SWFLUSH)
(131,cq)
(132,schp)
(133,schp->comp_handler_lock)
(134,CQE_GENBIT_V((u64)
(135,cqe)
(136,CQE_STATUS_V(T4_ERR_SWFLUSH)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^