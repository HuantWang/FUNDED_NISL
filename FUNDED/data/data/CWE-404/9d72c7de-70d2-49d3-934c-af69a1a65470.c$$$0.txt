-----label-----
1
-----code-----
void CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType myStruct)
{
    twoIntsStruct * data = myStruct.structFirst;
    printStructLine(&data[0]);
    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
23,24
24,25
24,26
25,26
27,28
28,29
28,30
29,30
32,33
33,34
33,35
34,35
36,37
-----nextToken-----
2,4,7,9,14,16,17,21,22,26,30,31,35,37
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType myStruct){    twoIntsStruct * data = myStruct.structFirst;    printStructLine(&data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
void
CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67b_badSink(CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType myStruct)
CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67b_badSink
CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType myStruct
CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType
CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType
myStruct
myStruct
{    twoIntsStruct * data = myStruct.structFirst;    printStructLine(&data[0]);    /* POTENTIAL FLAW: Possibly deallocating memory allocated on the stack */    free(data);}
twoIntsStruct * data = myStruct.structFirst;
twoIntsStruct * data = myStruct.structFirst;
twoIntsStruct
twoIntsStruct
* data = myStruct.structFirst
*
data
= myStruct.structFirst
myStruct.structFirst
myStruct
myStruct
structFirst
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(9,11,0)
(15,9,0)
(3,4,0)
(3,9,0)
(0,11,0)
(14,10,0)
(6,13,0)
(4,3,0)
(14,11,0)
(11,13,0)
(12,14,0)
(4,13,0)
(9,3,0)
(11,14,0)
(5,9,0)
(2,14,0)
(1,8,0)
(8,11,0)
(8,13,0)
(14,2,1)
(8,1,1)
(15,5,1)
(4,3,1)
(7,8,1)
(12,0,1)
(3,9,1)
(14,10,1)
(9,11,1)
(1,4,1)
(9,15,1)
(8,11,1)
(2,12,1)
(5,11,1)
(11,14,1)
(3,9,2)
(8,11,2)
(4,3,2)
(14,10,2)
(9,11,2)
(11,14,2)
-----------------------------------
(0,data)
(1,data)
(2,structFirst)
(3,&data[0])
(4,printStructLine(&data[0])
(5,data)
(6,data)
(7,RET)
(8,free(data)
(9,data[0])
(10,CWE590_Free_Memory_Not_on_Heap__free_struct_alloca_67_structType myStruct)
(11,* data = myStruct.structFirst)
(12,myStruct)
(13,)
(14,myStruct.structFirst)
(15,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^