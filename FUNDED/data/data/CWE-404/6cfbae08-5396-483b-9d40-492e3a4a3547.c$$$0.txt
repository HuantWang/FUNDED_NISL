-----label-----
0
-----code-----
static int sha256_ce_finup(struct shash_desc *desc, const u8 *data,
			   unsigned int len, u8 *out)
{
	struct sha256_ce_state *sctx = shash_desc_ctx(desc);
	bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len;

	/*
	 * Allow the asm code to perform the finalization if there is no
	 * partial data and the input is a round multiple of the block size.
	 */
	sctx->finalize = finalize;

	kernel_neon_begin_partial(28);
	sha256_base_do_update(desc, data, len,
			      (sha256_block_fn *)sha2_ce_transform);
	if (!finalize)
		sha256_base_do_finalize(desc,
					(sha256_block_fn *)sha2_ce_transform);
	kernel_neon_end();
	return sha256_base_finish(desc, out);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
48,50
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
58,59
58,60
59,60
61,62
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
73,74
74,75
74,76
75,76
78,79
79,80
79,81
79,82
79,83
79,84
80,81
82,83
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
96,97
96,98
97,98
98,99
100,101
101,102
101,103
101,104
102,103
104,105
106,107
106,108
107,108
107,109
108,109
110,111
112,113
114,115
115,116
116,117
118,119
119,120
119,121
119,122
120,121
122,123
124,125
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,23,25,26,31,33,34,38,40,43,45,53,54,55,60,62,64,69,70,72,76,77,81,83,85,87,91,93,95,99,103,105,109,111,113,117,121,123,125
-----computeFrom-----
47,48
47,49
48,49
48,50
58,59
58,60
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int sha256_ce_finup(struct shash_desc *desc, const u8 *data,			   unsigned int len, u8 *out){	struct sha256_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len;	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(28);	sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform);	if (!finalize)		sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);	kernel_neon_end();	return sha256_base_finish(desc, out);}
static int
sha256_ce_finup(struct shash_desc *desc, const u8 *data,			   unsigned int len, u8 *out)
sha256_ce_finup
struct shash_desc *desc
struct shash_desc
shash_desc
*desc
*
desc
const u8 *data
const u8
u8
*data
*
data
unsigned int len
unsigned int
len
len
u8 *out
u8
u8
*out
*
out
{	struct sha256_ce_state *sctx = shash_desc_ctx(desc);	bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len;	/*	 * Allow the asm code to perform the finalization if there is no	 * partial data and the input is a round multiple of the block size.	 */	sctx->finalize = finalize;	kernel_neon_begin_partial(28);	sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform);	if (!finalize)		sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);	kernel_neon_end();	return sha256_base_finish(desc, out);}
struct sha256_ce_state *sctx = shash_desc_ctx(desc);
struct sha256_ce_state *sctx = shash_desc_ctx(desc);
struct sha256_ce_state
sha256_ce_state
*sctx = shash_desc_ctx(desc)
*
sctx
= shash_desc_ctx(desc)
shash_desc_ctx(desc)
shash_desc_ctx
shash_desc_ctx
desc
desc
bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len;
bool finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len;
bool
finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len
finalize
= !sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len
!sctx->sst.count && !(len % SHA256_BLOCK_SIZE) && len
!sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
!sctx->sst.count
sctx->sst.count
sctx->sst
sctx
sctx
sst
count
!(len % SHA256_BLOCK_SIZE)
(len % SHA256_BLOCK_SIZE)
len % SHA256_BLOCK_SIZE
len
len
SHA256_BLOCK_SIZE
SHA256_BLOCK_SIZE
len
len
sctx->finalize = finalize;
sctx->finalize = finalize
sctx->finalize
sctx
sctx
finalize
finalize
finalize
kernel_neon_begin_partial(28);
kernel_neon_begin_partial(28)
kernel_neon_begin_partial
kernel_neon_begin_partial
28
sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform);
sha256_base_do_update(desc, data, len,			      (sha256_block_fn *)sha2_ce_transform)
sha256_base_do_update
sha256_base_do_update
desc
desc
data
data
len
len
(sha256_block_fn *)sha2_ce_transform
sha256_block_fn *
sha256_block_fn
sha256_block_fn
*
*
sha2_ce_transform
sha2_ce_transform
if (!finalize)		sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);
!finalize
finalize
finalize
sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform);
sha256_base_do_finalize(desc,					(sha256_block_fn *)sha2_ce_transform)
sha256_base_do_finalize
sha256_base_do_finalize
desc
desc
(sha256_block_fn *)sha2_ce_transform
sha256_block_fn *
sha256_block_fn
sha256_block_fn
*
*
sha2_ce_transform
sha2_ce_transform
kernel_neon_end();
kernel_neon_end()
kernel_neon_end
kernel_neon_end
return sha256_base_finish(desc, out);
sha256_base_finish(desc, out)
sha256_base_finish
sha256_base_finish
desc
desc
out
out
-----joern-----
(25,28,0)
(53,29,0)
(53,0,0)
(50,24,0)
(28,25,0)
(22,29,0)
(45,10,0)
(42,29,0)
(47,10,0)
(15,6,0)
(3,23,0)
(37,9,0)
(4,29,0)
(16,23,0)
(38,9,0)
(29,10,0)
(30,39,0)
(19,30,0)
(41,6,0)
(23,51,0)
(28,46,0)
(26,19,0)
(51,23,0)
(18,36,0)
(32,19,0)
(11,13,0)
(2,23,0)
(40,53,0)
(25,9,0)
(51,36,0)
(19,3,0)
(49,19,0)
(5,18,0)
(33,2,0)
(51,28,0)
(28,51,0)
(24,18,0)
(29,31,0)
(8,3,0)
(13,10,0)
(6,41,0)
(44,10,0)
(24,30,0)
(43,14,0)
(35,30,0)
(27,32,0)
(29,46,0)
(20,39,0)
(30,10,0)
(12,6,0)
(1,28,0)
(23,10,0)
(32,10,0)
(18,24,0)
(6,12,0)
(34,12,0)
(29,53,0)
(36,18,0)
(39,30,0)
(39,31,0)
(9,46,0)
(36,51,0)
(14,17,0)
(3,10,0)
(9,25,0)
(52,10,0)
(0,53,0)
(48,14,0)
(14,31,0)
(29,7,0)
(21,24,0)
(12,31,0)
(14,32,0)
(6,15,1)
(51,36,1)
(53,40,1)
(32,14,1)
(50,16,1)
(22,42,1)
(45,2,1)
(29,7,1)
(25,9,1)
(29,46,1)
(14,31,1)
(1,25,1)
(19,30,1)
(20,35,1)
(3,23,1)
(29,31,1)
(16,30,1)
(53,0,1)
(2,33,1)
(38,37,1)
(14,48,1)
(26,23,1)
(43,45,1)
(28,1,1)
(13,11,1)
(9,38,1)
(45,12,1)
(18,24,1)
(36,18,1)
(28,25,1)
(6,41,1)
(24,30,1)
(2,23,1)
(8,19,1)
(3,8,1)
(9,46,1)
(49,26,1)
(51,28,1)
(33,29,1)
(19,49,1)
(48,43,1)
(37,36,1)
(18,5,1)
(12,6,1)
(39,31,1)
(5,24,1)
(34,2,1)
(11,3,1)
(14,17,1)
(27,32,1)
(28,46,1)
(30,39,1)
(29,53,1)
(24,21,1)
(40,4,1)
(42,13,1)
(4,22,1)
(21,50,1)
(15,34,1)
(39,20,1)
(23,51,1)
(32,19,1)
(12,31,1)
(2,23,2)
(25,9,2)
(19,30,2)
(29,46,2)
(15,2,2)
(12,6,2)
(51,36,2)
(51,28,2)
(29,31,2)
(53,0,2)
(25,36,2)
(30,39,2)
(9,36,2)
(6,41,2)
(3,23,2)
(14,31,2)
(27,32,2)
(29,53,2)
(23,51,2)
(1,25,2)
(24,30,2)
(12,31,2)
(6,2,2)
(28,36,2)
(18,24,2)
(34,2,2)
(12,2,2)
(38,36,2)
(29,7,2)
(28,25,2)
(37,36,2)
(28,46,2)
(14,17,2)
(9,46,2)
(39,31,2)
(32,19,2)
(36,18,2)
-----------------------------------
(0,sha256_block_fn *)
(1,len)
(2,!finalize)
(3,sctx->finalize = finalize)
(4,len)
(5,count)
(6,(sha256_block_fn *)
(7,const u8 *data)
(8,finalize)
(9,len % SHA256_BLOCK_SIZE)
(10,)
(11,28)
(12,sha256_base_do_finalize(desc,\n\\n\\t\\t\\t\\t\\t(sha256_block_fn *)
(13,kernel_neon_begin_partial(28)
(14,sha256_base_finish(desc, out)
(15,sha2_ce_transform)
(16,finalize)
(17,u8 *out)
(18,sctx->sst.count)
(19,sctx->finalize)
(20,desc)
(21,sst)
(22,data)
(23,finalize = !sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
(24,sctx->sst)
(25,!(len % SHA256_BLOCK_SIZE)
(26,sctx)
(27,RET)
(28,!(len % SHA256_BLOCK_SIZE)
(29,sha256_base_do_update(desc, data, len,\n\\n\\t\\t\\t      (sha256_block_fn *)
(30,*sctx = shash_desc_ctx(desc)
(31,struct shash_desc *desc)
(32,return sha256_base_finish(desc, out)
(33,finalize)
(34,desc)
(35,sctx)
(36,!sctx->sst.count)
(37,len)
(38,SHA256_BLOCK_SIZE)
(39,shash_desc_ctx(desc)
(40,sha2_ce_transform)
(41,sha256_block_fn *)
(42,desc)
(43,desc)
(44,sctx)
(45,kernel_neon_end()
(46,unsigned int len)
(47,finalize)
(48,out)
(49,finalize)
(50,sctx)
(51,!sctx->sst.count && !(len % SHA256_BLOCK_SIZE)
(52,if (!finalize)
(53,(sha256_block_fn *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^