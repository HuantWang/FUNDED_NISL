-----label-----
0
-----code-----
static void do_signal(struct task_struct *tsk)
{
	sigset_t *oldset = sigmask_to_save();
	struct ksignal ksig;
	int ret;
	int is32 = is_32bit_task();

	BUG_ON(tsk != current);

	get_signal(&ksig);

	/* Is there any syscall restart business here ? */
	check_syscall_restart(tsk->thread.regs, &ksig.ka, ksig.sig > 0);

	if (ksig.sig <= 0) {
		/* No signal to deliver -- put the saved sigmask back */
		restore_saved_sigmask();
		tsk->thread.regs->trap = 0;
		return;               /* no signals delivered */
	}

#ifndef CONFIG_PPC_ADV_DEBUG_REGS
        /*
	 * Reenable the DABR before delivering the signal to
	 * user space. The DABR will have been cleared if it
	 * triggered inside the kernel.
	 */
	if (tsk->thread.hw_brk.address && tsk->thread.hw_brk.type)
		__set_breakpoint(&tsk->thread.hw_brk);
#endif
	/* Re-enable the breakpoints for the signal stack */
	thread_change_pc(tsk, tsk->thread.regs);

	if (is32) {
        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)
			ret = handle_rt_signal32(&ksig, oldset, tsk);
		else
			ret = handle_signal32(&ksig, oldset, tsk);
	} else {
		ret = handle_rt_signal64(&ksig, oldset, tsk);
	}

	tsk->thread.regs->trap = 0;
	signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
40,41
41,42
43,44
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
63,65
64,65
64,66
65,66
69,70
70,71
70,72
71,72
74,75
74,76
75,76
75,77
76,77
80,81
80,82
81,82
81,83
82,83
82,84
83,84
87,88
87,89
87,90
88,89
89,90
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
96,98
97,98
104,105
104,106
105,106
105,107
106,107
106,108
107,108
107,109
108,109
108,110
109,110
114,115
114,116
115,116
115,117
116,117
116,118
117,118
122,123
123,124
123,125
124,125
126,127
127,128
127,129
128,129
128,130
129,130
133,134
134,135
134,136
134,137
135,136
137,138
139,140
139,141
140,141
140,142
141,142
145,146
145,147
145,148
146,147
148,149
149,150
149,151
149,152
150,151
150,152
151,152
151,153
152,153
152,154
153,154
153,155
154,155
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
166,167
168,169
169,170
171,172
173,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
179,183
180,181
182,183
183,184
185,186
187,188
189,190
190,191
191,192
191,193
192,193
194,195
194,196
194,197
194,198
195,196
197,198
198,199
200,201
202,203
204,205
205,206
205,207
206,207
206,208
207,208
207,209
208,209
208,210
209,210
215,216
216,217
216,218
216,219
216,220
217,218
219,220
221,222
222,223
224,225
224,226
225,226
227,228
-----nextToken-----
2,4,7,9,10,15,17,18,22,26,28,31,33,36,38,42,46,49,51,55,58,62,66,67,68,72,73,77,78,79,84,85,86,91,98,99,100,101,102,103,110,111,112,113,118,119,120,121,125,130,131,132,136,138,142,143,144,147,155,156,157,158,160,164,167,170,172,174,178,181,184,186,188,193,196,199,201,203,210,211,212,213,214,218,220,223,226,228
-----computeFrom-----
47,48
47,49
74,75
74,76
81,82
81,83
93,94
93,95
105,106
105,107
150,151
150,152
162,163
162,164
176,177
176,178
191,192
191,193
205,206
205,207
-----guardedBy-----
120,132
119,131
118,130
155,170
-----guardedByNegation-----
155,184
-----lastLexicalUse-----
155,184
-----jump-----
155,184
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void do_signal(struct task_struct *tsk){	sigset_t *oldset = sigmask_to_save();	struct ksignal ksig;	int ret;	int is32 = is_32bit_task();	BUG_ON(tsk != current);	get_signal(&ksig);	/* Is there any syscall restart business here ? */	check_syscall_restart(tsk->thread.regs, &ksig.ka, ksig.sig > 0);	if (ksig.sig <= 0) {		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		tsk->thread.regs->trap = 0;		return;               /* no signals delivered */	}#ifndef CONFIG_PPC_ADV_DEBUG_REGS        /*	 * Reenable the DABR before delivering the signal to	 * user space. The DABR will have been cleared if it	 * triggered inside the kernel.	 */	if (tsk->thread.hw_brk.address && tsk->thread.hw_brk.type)		__set_breakpoint(&tsk->thread.hw_brk);#endif	/* Re-enable the breakpoints for the signal stack */	thread_change_pc(tsk, tsk->thread.regs);	if (is32) {        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, tsk);		else			ret = handle_signal32(&ksig, oldset, tsk);	} else {		ret = handle_rt_signal64(&ksig, oldset, tsk);	}	tsk->thread.regs->trap = 0;	signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));}
static void
do_signal(struct task_struct *tsk)
do_signal
struct task_struct *tsk
struct task_struct
task_struct
*tsk
*
tsk
{	sigset_t *oldset = sigmask_to_save();	struct ksignal ksig;	int ret;	int is32 = is_32bit_task();	BUG_ON(tsk != current);	get_signal(&ksig);	/* Is there any syscall restart business here ? */	check_syscall_restart(tsk->thread.regs, &ksig.ka, ksig.sig > 0);	if (ksig.sig <= 0) {		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		tsk->thread.regs->trap = 0;		return;               /* no signals delivered */	}#ifndef CONFIG_PPC_ADV_DEBUG_REGS        /*	 * Reenable the DABR before delivering the signal to	 * user space. The DABR will have been cleared if it	 * triggered inside the kernel.	 */	if (tsk->thread.hw_brk.address && tsk->thread.hw_brk.type)		__set_breakpoint(&tsk->thread.hw_brk);#endif	/* Re-enable the breakpoints for the signal stack */	thread_change_pc(tsk, tsk->thread.regs);	if (is32) {        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, tsk);		else			ret = handle_signal32(&ksig, oldset, tsk);	} else {		ret = handle_rt_signal64(&ksig, oldset, tsk);	}	tsk->thread.regs->trap = 0;	signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));}
sigset_t *oldset = sigmask_to_save();
sigset_t *oldset = sigmask_to_save();
sigset_t
sigset_t
*oldset = sigmask_to_save()
*
oldset
= sigmask_to_save()
sigmask_to_save()
sigmask_to_save
sigmask_to_save
struct ksignal ksig;
struct ksignal ksig;
struct ksignal
ksignal
ksig
ksig
int ret;
int ret;
int
ret
ret
int is32 = is_32bit_task();
int is32 = is_32bit_task();
int
is32 = is_32bit_task()
is32
= is_32bit_task()
is_32bit_task()
is_32bit_task
is_32bit_task
BUG_ON(tsk != current);
BUG_ON(tsk != current)
BUG_ON
BUG_ON
tsk != current
tsk
tsk
current
current
get_signal(&ksig);
get_signal(&ksig)
get_signal
get_signal
&ksig
ksig
ksig
check_syscall_restart(tsk->thread.regs, &ksig.ka, ksig.sig > 0);
check_syscall_restart(tsk->thread.regs, &ksig.ka, ksig.sig > 0)
check_syscall_restart
check_syscall_restart
tsk->thread.regs
tsk->thread
tsk
tsk
thread
regs
&ksig.ka
ksig.ka
ksig
ksig
ka
ksig.sig > 0
ksig.sig
ksig
ksig
sig
0
if (ksig.sig <= 0) {		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		tsk->thread.regs->trap = 0;		return;               /* no signals delivered */	}
ksig.sig <= 0
ksig.sig
ksig
ksig
sig
0
{		/* No signal to deliver -- put the saved sigmask back */		restore_saved_sigmask();		tsk->thread.regs->trap = 0;		return;               /* no signals delivered */	}
restore_saved_sigmask();
restore_saved_sigmask()
restore_saved_sigmask
restore_saved_sigmask
tsk->thread.regs->trap = 0;
tsk->thread.regs->trap = 0
tsk->thread.regs->trap
tsk->thread.regs
tsk->thread
tsk
tsk
thread
regs
trap
0
return;
if (tsk->thread.hw_brk.address && tsk->thread.hw_brk.type)		__set_breakpoint(&tsk->thread.hw_brk);
tsk->thread.hw_brk.address && tsk->thread.hw_brk.type
tsk->thread.hw_brk.address
tsk->thread.hw_brk
tsk->thread
tsk
tsk
thread
hw_brk
address
tsk->thread.hw_brk.type
tsk->thread.hw_brk
tsk->thread
tsk
tsk
thread
hw_brk
type
__set_breakpoint(&tsk->thread.hw_brk);
__set_breakpoint(&tsk->thread.hw_brk)
__set_breakpoint
__set_breakpoint
&tsk->thread.hw_brk
tsk->thread.hw_brk
tsk->thread
tsk
tsk
thread
hw_brk
thread_change_pc(tsk, tsk->thread.regs);
thread_change_pc(tsk, tsk->thread.regs)
thread_change_pc
thread_change_pc
tsk
tsk
tsk->thread.regs
tsk->thread
tsk
tsk
thread
regs
if (is32) {        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, tsk);		else			ret = handle_signal32(&ksig, oldset, tsk);	} else {		ret = handle_rt_signal64(&ksig, oldset, tsk);	}
is32
is32
{        	if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, tsk);		else			ret = handle_signal32(&ksig, oldset, tsk);	}
if (ksig.ka.sa.sa_flags & SA_SIGINFO)			ret = handle_rt_signal32(&ksig, oldset, tsk);		else			ret = handle_signal32(&ksig, oldset, tsk);
ksig.ka.sa.sa_flags & SA_SIGINFO
ksig.ka.sa.sa_flags
ksig.ka.sa
ksig.ka
ksig
ksig
ka
sa
sa_flags
SA_SIGINFO
SA_SIGINFO
ret = handle_rt_signal32(&ksig, oldset, tsk);
ret = handle_rt_signal32(&ksig, oldset, tsk)
ret
ret
handle_rt_signal32(&ksig, oldset, tsk)
handle_rt_signal32
handle_rt_signal32
&ksig
ksig
ksig
oldset
oldset
tsk
tsk
ret = handle_signal32(&ksig, oldset, tsk);
ret = handle_signal32(&ksig, oldset, tsk)
ret
ret
handle_signal32(&ksig, oldset, tsk)
handle_signal32
handle_signal32
&ksig
ksig
ksig
oldset
oldset
tsk
tsk
{		ret = handle_rt_signal64(&ksig, oldset, tsk);	}
ret = handle_rt_signal64(&ksig, oldset, tsk);
ret = handle_rt_signal64(&ksig, oldset, tsk)
ret
ret
handle_rt_signal64(&ksig, oldset, tsk)
handle_rt_signal64
handle_rt_signal64
&ksig
ksig
ksig
oldset
oldset
tsk
tsk
tsk->thread.regs->trap = 0;
tsk->thread.regs->trap = 0
tsk->thread.regs->trap
tsk->thread.regs
tsk->thread
tsk
tsk
thread
regs
trap
0
signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP));
signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP))
signal_setup_done
signal_setup_done
ret
ret
&ksig
ksig
ksig
test_thread_flag(TIF_SINGLESTEP)
test_thread_flag
test_thread_flag
TIF_SINGLESTEP
TIF_SINGLESTEP
-----joern-----
(75,35,0)
(35,95,0)
(62,91,0)
(109,95,0)
(19,115,0)
(79,54,0)
(89,35,0)
(110,95,0)
(108,95,0)
(35,66,0)
(42,14,0)
(16,49,0)
(90,105,0)
(94,55,0)
(19,69,0)
(43,15,0)
(54,79,0)
(82,69,0)
(56,8,0)
(43,115,0)
(4,46,0)
(76,19,0)
(20,80,0)
(96,114,0)
(19,95,0)
(3,83,0)
(88,111,0)
(117,94,0)
(33,104,0)
(79,84,0)
(49,34,0)
(112,66,0)
(115,43,0)
(43,66,0)
(129,14,0)
(98,88,0)
(19,99,0)
(118,72,0)
(18,66,0)
(35,75,0)
(30,81,0)
(80,20,0)
(22,85,0)
(45,95,0)
(54,14,0)
(111,88,0)
(91,66,0)
(37,64,0)
(83,103,0)
(34,95,0)
(65,112,0)
(122,43,0)
(21,74,0)
(5,12,0)
(128,64,0)
(105,66,0)
(70,105,0)
(39,112,0)
(85,111,0)
(107,111,0)
(114,66,0)
(78,55,0)
(81,74,0)
(39,127,0)
(81,94,0)
(63,11,0)
(124,127,0)
(19,62,0)
(84,79,0)
(92,100,0)
(4,66,0)
(10,67,0)
(19,27,0)
(34,49,0)
(131,98,0)
(104,31,0)
(1,55,0)
(48,114,0)
(57,46,0)
(15,43,0)
(94,81,0)
(64,70,0)
(6,103,0)
(26,75,0)
(75,18,0)
(46,57,0)
(132,46,0)
(0,27,0)
(113,11,0)
(96,79,0)
(60,66,0)
(29,91,0)
(91,62,0)
(47,3,0)
(4,12,0)
(79,95,0)
(2,4,0)
(105,70,0)
(103,83,0)
(59,114,0)
(79,96,0)
(119,100,0)
(102,95,0)
(20,60,0)
(55,94,0)
(91,46,0)
(52,31,0)
(53,61,0)
(91,61,0)
(25,8,0)
(77,95,0)
(103,6,0)
(32,80,0)
(3,66,0)
(62,116,0)
(18,75,0)
(86,92,0)
(70,64,0)
(40,4,0)
(83,3,0)
(4,99,0)
(58,60,0)
(8,95,0)
(41,88,0)
(130,62,0)
(11,63,0)
(51,83,0)
(14,54,0)
(111,85,0)
(28,70,0)
(93,20,0)
(123,60,0)
(36,39,0)
(27,19,0)
(64,37,0)
(125,112,0)
(74,100,0)
(99,4,0)
(114,96,0)
(127,109,0)
(31,104,0)
(49,66,0)
(71,54,0)
(44,105,0)
(50,31,0)
(101,49,0)
(112,39,0)
(88,98,0)
(46,95,0)
(87,91,0)
(84,67,0)
(60,20,0)
(13,115,0)
(67,84,0)
(24,18,0)
(63,95,0)
(126,18,0)
(38,3,0)
(97,43,0)
(106,99,0)
(23,95,0)
(61,91,0)
(37,80,0)
(120,95,0)
(8,56,0)
(7,109,0)
(68,15,0)
(43,46,0)
(69,19,0)
(80,37,0)
(55,66,0)
(121,96,0)
(73,67,0)
(12,4,0)
(17,85,0)
(127,39,0)
(81,30,1)
(70,28,1)
(104,31,1)
(103,83,1)
(60,58,1)
(19,99,1)
(11,113,1)
(94,117,1)
(1,78,1)
(91,29,1)
(6,103,1)
(79,54,1)
(52,50,1)
(19,115,1)
(9,35,1)
(46,57,1)
(79,84,1)
(35,66,1)
(25,46,1)
(12,5,1)
(98,88,1)
(83,3,1)
(127,39,1)
(115,43,1)
(128,70,1)
(92,74,1)
(13,98,1)
(114,59,1)
(86,92,1)
(39,112,1)
(31,52,1)
(84,67,1)
(75,18,1)
(89,6,1)
(19,27,1)
(16,101,1)
(39,36,1)
(0,76,1)
(29,87,1)
(99,4,1)
(114,66,1)
(50,79,1)
(44,104,1)
(34,49,1)
(7,127,1)
(94,55,1)
(98,131,1)
(62,91,1)
(20,93,1)
(119,104,1)
(91,66,1)
(105,66,1)
(122,15,1)
(130,9,1)
(111,85,1)
(4,12,1)
(3,47,1)
(125,65,1)
(24,126,1)
(53,130,1)
(14,129,1)
(20,60,1)
(127,124,1)
(71,14,1)
(73,96,1)
(61,53,1)
(18,24,1)
(38,37,1)
(41,111,1)
(121,114,1)
(80,32,1)
(8,56,1)
(85,17,1)
(43,97,1)
(51,3,1)
(47,38,1)
(117,55,1)
(36,112,1)
(69,82,1)
(88,111,1)
(93,60,1)
(43,46,1)
(32,20,1)
(43,66,1)
(107,85,1)
(111,107,1)
(112,66,1)
(27,0,1)
(67,10,1)
(131,88,1)
(80,20,1)
(54,71,1)
(113,34,1)
(55,1,1)
(33,31,1)
(4,40,1)
(90,44,1)
(49,66,1)
(79,96,1)
(15,68,1)
(35,75,1)
(86,19,1)
(22,9,1)
(97,122,1)
(64,128,1)
(70,105,1)
(17,22,1)
(5,106,1)
(4,66,1)
(21,81,1)
(96,114,1)
(126,89,1)
(129,42,1)
(3,66,1)
(65,115,1)
(87,61,1)
(96,121,1)
(37,64,1)
(19,69,1)
(59,48,1)
(18,66,1)
(91,46,1)
(30,94,1)
(106,98,1)
(56,25,1)
(65,99,1)
(83,51,1)
(123,64,1)
(54,14,1)
(124,39,1)
(78,119,1)
(101,8,1)
(57,132,1)
(58,123,1)
(105,90,1)
(40,2,1)
(112,125,1)
(68,13,1)
(109,7,1)
(64,70,1)
(60,66,1)
(2,12,1)
(75,26,1)
(63,11,1)
(74,21,1)
(81,94,1)
(76,109,1)
(65,62,1)
(4,46,1)
(28,105,1)
(55,66,1)
(88,41,1)
(104,33,1)
(48,63,1)
(43,15,1)
(89,37,1)
(26,18,1)
(19,62,1)
(82,27,1)
(49,16,1)
(91,61,1)
(37,80,1)
(10,73,1)
(42,84,1)
(30,104,2)
(1,104,2)
(40,98,2)
(81,104,2)
(105,66,2)
(81,94,2)
(3,37,2)
(79,54,2)
(107,9,2)
(86,92,2)
(127,104,2)
(75,104,2)
(43,98,2)
(117,104,2)
(88,111,2)
(84,67,2)
(18,104,2)
(64,70,2)
(47,37,2)
(29,9,2)
(15,98,2)
(26,104,2)
(63,11,2)
(98,88,2)
(87,9,2)
(69,104,2)
(74,104,2)
(5,98,2)
(6,103,2)
(64,104,2)
(76,104,2)
(60,66,2)
(115,43,2)
(35,104,2)
(97,98,2)
(111,9,2)
(35,75,2)
(20,64,2)
(35,66,2)
(2,98,2)
(7,104,2)
(112,66,2)
(99,4,2)
(80,20,2)
(70,105,2)
(91,61,2)
(39,104,2)
(124,104,2)
(3,66,2)
(28,104,2)
(83,37,2)
(92,104,2)
(109,104,2)
(43,46,2)
(79,84,2)
(17,9,2)
(65,104,2)
(37,64,2)
(4,46,2)
(126,104,2)
(61,9,2)
(83,3,2)
(75,18,2)
(46,57,2)
(39,112,2)
(105,104,2)
(62,91,2)
(94,55,2)
(114,66,2)
(19,69,2)
(41,9,2)
(4,66,2)
(99,98,2)
(27,104,2)
(19,99,2)
(128,104,2)
(19,62,2)
(123,64,2)
(119,104,2)
(12,98,2)
(19,104,2)
(103,37,2)
(82,104,2)
(36,104,2)
(62,9,2)
(53,9,2)
(122,98,2)
(115,98,2)
(130,9,2)
(19,27,2)
(55,66,2)
(22,9,2)
(4,12,2)
(37,80,2)
(37,104,2)
(43,66,2)
(51,37,2)
(78,104,2)
(6,37,2)
(103,83,2)
(32,64,2)
(127,39,2)
(85,9,2)
(13,98,2)
(8,56,2)
(38,37,2)
(98,9,2)
(91,66,2)
(21,104,2)
(131,9,2)
(60,64,2)
(88,9,2)
(44,104,2)
(9,104,2)
(106,98,2)
(112,104,2)
(91,46,2)
(70,104,2)
(125,104,2)
(89,104,2)
(58,64,2)
(43,15,2)
(79,96,2)
(49,66,2)
(68,98,2)
(4,98,2)
(0,104,2)
(91,9,2)
(90,104,2)
(54,14,2)
(19,115,2)
(55,104,2)
(93,64,2)
(111,85,2)
(34,49,2)
(94,104,2)
(96,114,2)
(18,66,2)
(20,60,2)
(104,31,2)
(24,104,2)
(80,64,2)
-----------------------------------
(0,ksig)
(1,thread)
(2,oldset)
(3,tsk->thread)
(4,handle_signal32(&ksig, oldset, tsk)
(5,ksig)
(6,__set_breakpoint(&tsk->thread.hw_brk)
(7,0)
(8,is32 = is_32bit_task()
(9,is32)
(10,ka)
(11,&ksig)
(12,&ksig)
(13,ret)
(14,ksig.sig)
(15,&ksig)
(16,current)
(17,ka)
(18,tsk->thread)
(19,signal_setup_done(ret, &ksig, test_thread_flag(TIF_SINGLESTEP)
(20,tsk->thread.hw_brk)
(21,0)
(22,ksig)
(23,if (tsk->thread.hw_brk.address && tsk->thread.hw_brk.type)
(24,thread)
(25,is32)
(26,regs)
(27,&ksig)
(28,hw_brk)
(29,tsk)
(30,trap)
(31,ksig.sig)
(32,type)
(33,0)
(34,BUG_ON(tsk != current)
(35,thread_change_pc(tsk, tsk->thread.regs)
(36,regs)
(37,tsk->thread.hw_brk.address && tsk->thread.hw_brk.type)
(38,tsk)
(39,tsk->thread.regs)
(40,tsk)
(41,sa_flags)
(42,ksig)
(43,handle_rt_signal32(&ksig, oldset, tsk)
(44,tsk)
(45,ksig)
(46,*oldset = sigmask_to_save()
(47,thread)
(48,tsk)
(49,tsk != current)
(50,ksig)
(51,hw_brk)
(52,sig)
(53,ksig)
(54,ksig.sig > 0)
(55,tsk->thread)
(56,is_32bit_task()
(57,sigmask_to_save()
(58,thread)
(59,thread)
(60,tsk->thread)
(61,&ksig)
(62,ret = handle_rt_signal64(&ksig, oldset, tsk)
(63,get_signal(&ksig)
(64,tsk->thread.hw_brk.address)
(65,tsk)
(66,struct task_struct *tsk)
(67,ksig.ka)
(68,ksig)
(69,test_thread_flag(TIF_SINGLESTEP)
(70,tsk->thread.hw_brk)
(71,0)
(72,)
(73,ksig)
(74,tsk->thread.regs->trap = 0)
(75,tsk->thread.regs)
(76,ret)
(77,ret)
(78,tsk)
(79,check_syscall_restart(tsk->thread.regs, &ksig.ka, ksig.sig > 0)
(80,tsk->thread.hw_brk.type)
(81,tsk->thread.regs->trap)
(82,TIF_SINGLESTEP)
(83,tsk->thread.hw_brk)
(84,&ksig.ka)
(85,ksig.ka)
(86,RET)
(87,oldset)
(88,ksig.ka.sa.sa_flags)
(89,tsk)
(90,thread)
(91,handle_rt_signal64(&ksig, oldset, tsk)
(92,return;)
(93,hw_brk)
(94,tsk->thread.regs)
(95,)
(96,tsk->thread.regs)
(97,tsk)
(98,ksig.ka.sa.sa_flags & SA_SIGINFO)
(99,ret = handle_signal32(&ksig, oldset, tsk)
(100,)
(101,tsk)
(102,oldset)
(103,&tsk->thread.hw_brk)
(104,ksig.sig <= 0)
(105,tsk->thread)
(106,ret)
(107,sa)
(108,is32)
(109,tsk->thread.regs->trap = 0)
(110,if (ksig.sig <= 0)
(111,ksig.ka.sa)
(112,tsk->thread)
(113,ksig)
(114,tsk->thread)
(115,ret = handle_rt_signal32(&ksig, oldset, tsk)
(116,)
(117,regs)
(118,if (ksig.ka.sa.sa_flags & SA_SIGINFO)
(119,restore_saved_sigmask()
(120,if (is32)
(121,regs)
(122,oldset)
(123,tsk)
(124,trap)
(125,thread)
(126,tsk)
(127,tsk->thread.regs->trap)
(128,address)
(129,sig)
(130,ret)
(131,SA_SIGINFO)
(132,oldset)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^