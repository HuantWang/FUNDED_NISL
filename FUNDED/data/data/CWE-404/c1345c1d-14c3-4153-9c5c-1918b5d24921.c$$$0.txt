-----label-----
0
-----code-----
static int ib_to_fw_opcode(int ib_opcode)
{
	int opcode;

	switch (ib_opcode) {
	case IB_WR_SEND_WITH_INV:
		opcode = FW_RI_SEND_WITH_INV;
		break;
	case IB_WR_SEND:
		opcode = FW_RI_SEND;
		break;
	case IB_WR_RDMA_WRITE:
		opcode = FW_RI_RDMA_WRITE;
		break;
	case IB_WR_RDMA_READ:
	case IB_WR_RDMA_READ_WITH_INV:
		opcode = FW_RI_READ_REQ;
		break;
	case IB_WR_REG_MR:
		opcode = FW_RI_FAST_REGISTER;
		break;
	case IB_WR_LOCAL_INV:
		opcode = FW_RI_LOCAL_INV;
		break;
	default:
		opcode = -EINVAL;
	}
	return opcode;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
10,11
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
19,20
20,21
22,23
23,24
23,25
24,25
26,27
29,30
30,31
32,33
33,34
33,35
34,35
36,37
39,40
40,41
42,43
43,44
43,45
44,45
46,47
49,50
50,51
52,53
53,54
55,56
56,57
56,58
57,58
59,60
62,63
63,64
65,66
66,67
66,68
67,68
69,70
72,73
73,74
75,76
76,77
76,78
77,78
79,80
83,84
84,85
84,86
85,86
87,88
88,89
90,91
91,92
-----nextToken-----
2,4,6,8,12,14,17,21,25,27,28,31,35,37,38,41,45,47,48,51,54,58,60,61,64,68,70,71,74,78,80,81,82,86,89,92
-----computeFrom-----
23,24
23,25
33,34
33,35
43,44
43,45
56,57
56,58
66,67
66,68
76,77
76,78
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int ib_to_fw_opcode(int ib_opcode){	int opcode;	switch (ib_opcode) {	case IB_WR_SEND_WITH_INV:		opcode = FW_RI_SEND_WITH_INV;		break;	case IB_WR_SEND:		opcode = FW_RI_SEND;		break;	case IB_WR_RDMA_WRITE:		opcode = FW_RI_RDMA_WRITE;		break;	case IB_WR_RDMA_READ:	case IB_WR_RDMA_READ_WITH_INV:		opcode = FW_RI_READ_REQ;		break;	case IB_WR_REG_MR:		opcode = FW_RI_FAST_REGISTER;		break;	case IB_WR_LOCAL_INV:		opcode = FW_RI_LOCAL_INV;		break;	default:		opcode = -EINVAL;	}	return opcode;}
static int
ib_to_fw_opcode(int ib_opcode)
ib_to_fw_opcode
int ib_opcode
int
ib_opcode
ib_opcode
{	int opcode;	switch (ib_opcode) {	case IB_WR_SEND_WITH_INV:		opcode = FW_RI_SEND_WITH_INV;		break;	case IB_WR_SEND:		opcode = FW_RI_SEND;		break;	case IB_WR_RDMA_WRITE:		opcode = FW_RI_RDMA_WRITE;		break;	case IB_WR_RDMA_READ:	case IB_WR_RDMA_READ_WITH_INV:		opcode = FW_RI_READ_REQ;		break;	case IB_WR_REG_MR:		opcode = FW_RI_FAST_REGISTER;		break;	case IB_WR_LOCAL_INV:		opcode = FW_RI_LOCAL_INV;		break;	default:		opcode = -EINVAL;	}	return opcode;}
int opcode;
int opcode;
int
opcode
opcode
switch (ib_opcode) {	case IB_WR_SEND_WITH_INV:		opcode = FW_RI_SEND_WITH_INV;		break;	case IB_WR_SEND:		opcode = FW_RI_SEND;		break;	case IB_WR_RDMA_WRITE:		opcode = FW_RI_RDMA_WRITE;		break;	case IB_WR_RDMA_READ:	case IB_WR_RDMA_READ_WITH_INV:		opcode = FW_RI_READ_REQ;		break;	case IB_WR_REG_MR:		opcode = FW_RI_FAST_REGISTER;		break;	case IB_WR_LOCAL_INV:		opcode = FW_RI_LOCAL_INV;		break;	default:		opcode = -EINVAL;	}
ib_opcode
ib_opcode
{	case IB_WR_SEND_WITH_INV:		opcode = FW_RI_SEND_WITH_INV;		break;	case IB_WR_SEND:		opcode = FW_RI_SEND;		break;	case IB_WR_RDMA_WRITE:		opcode = FW_RI_RDMA_WRITE;		break;	case IB_WR_RDMA_READ:	case IB_WR_RDMA_READ_WITH_INV:		opcode = FW_RI_READ_REQ;		break;	case IB_WR_REG_MR:		opcode = FW_RI_FAST_REGISTER;		break;	case IB_WR_LOCAL_INV:		opcode = FW_RI_LOCAL_INV;		break;	default:		opcode = -EINVAL;	}
case IB_WR_SEND_WITH_INV:
IB_WR_SEND_WITH_INV
IB_WR_SEND_WITH_INV
opcode = FW_RI_SEND_WITH_INV;
opcode = FW_RI_SEND_WITH_INV
opcode
opcode
FW_RI_SEND_WITH_INV
FW_RI_SEND_WITH_INV
break;
case IB_WR_SEND:
IB_WR_SEND
IB_WR_SEND
opcode = FW_RI_SEND;
opcode = FW_RI_SEND
opcode
opcode
FW_RI_SEND
FW_RI_SEND
break;
case IB_WR_RDMA_WRITE:
IB_WR_RDMA_WRITE
IB_WR_RDMA_WRITE
opcode = FW_RI_RDMA_WRITE;
opcode = FW_RI_RDMA_WRITE
opcode
opcode
FW_RI_RDMA_WRITE
FW_RI_RDMA_WRITE
break;
case IB_WR_RDMA_READ:
IB_WR_RDMA_READ
IB_WR_RDMA_READ
case IB_WR_RDMA_READ_WITH_INV:
IB_WR_RDMA_READ_WITH_INV
IB_WR_RDMA_READ_WITH_INV
opcode = FW_RI_READ_REQ;
opcode = FW_RI_READ_REQ
opcode
opcode
FW_RI_READ_REQ
FW_RI_READ_REQ
break;
case IB_WR_REG_MR:
IB_WR_REG_MR
IB_WR_REG_MR
opcode = FW_RI_FAST_REGISTER;
opcode = FW_RI_FAST_REGISTER
opcode
opcode
FW_RI_FAST_REGISTER
FW_RI_FAST_REGISTER
break;
case IB_WR_LOCAL_INV:
IB_WR_LOCAL_INV
IB_WR_LOCAL_INV
opcode = FW_RI_LOCAL_INV;
opcode = FW_RI_LOCAL_INV
opcode
opcode
FW_RI_LOCAL_INV
FW_RI_LOCAL_INV
break;
default:
opcode = -EINVAL;
opcode = -EINVAL
opcode
opcode
-EINVAL
EINVAL
EINVAL
return opcode;
opcode
opcode
-----joern-----
(43,15,0)
(18,27,0)
(15,27,0)
(28,27,0)
(2,17,0)
(14,27,0)
(30,15,0)
(38,27,0)
(40,29,0)
(43,20,0)
(31,27,0)
(21,43,0)
(9,43,0)
(23,2,0)
(43,2,0)
(35,28,0)
(17,2,0)
(19,27,0)
(22,20,0)
(12,38,0)
(4,19,0)
(34,27,0)
(2,27,0)
(25,38,0)
(5,27,0)
(43,38,0)
(43,19,0)
(41,28,0)
(42,15,0)
(33,27,0)
(13,27,0)
(10,27,0)
(11,27,0)
(43,28,0)
(3,20,0)
(26,27,0)
(7,19,0)
(43,29,0)
(20,27,0)
(36,27,0)
(8,29,0)
(0,17,0)
(39,27,0)
(37,27,0)
(24,6,0)
(1,27,0)
(43,6,0)
(6,27,0)
(16,6,0)
(6,24,1)
(9,43,1)
(43,6,1)
(17,0,1)
(43,28,1)
(7,4,1)
(21,33,1)
(21,2,1)
(43,2,1)
(16,32,1)
(21,39,1)
(0,23,1)
(43,19,1)
(42,30,1)
(15,42,1)
(21,37,1)
(43,38,1)
(43,20,1)
(19,7,1)
(31,6,1)
(2,17,1)
(21,31,1)
(30,32,1)
(22,32,1)
(4,32,1)
(43,15,1)
(35,41,1)
(25,12,1)
(21,14,1)
(38,25,1)
(3,22,1)
(43,21,1)
(20,3,1)
(23,32,1)
(37,28,1)
(12,32,1)
(33,19,1)
(14,20,1)
(41,32,1)
(39,15,1)
(21,5,1)
(24,16,1)
(5,38,1)
(28,35,1)
(22,32,2)
(7,32,2)
(25,32,2)
(43,2,2)
(23,32,2)
(16,32,2)
(24,32,2)
(43,38,2)
(35,32,2)
(31,32,2)
(4,32,2)
(42,32,2)
(33,32,2)
(43,6,2)
(19,32,2)
(12,32,2)
(43,15,2)
(28,32,2)
(41,32,2)
(5,32,2)
(9,43,2)
(3,32,2)
(20,32,2)
(6,32,2)
(2,17,2)
(2,32,2)
(38,32,2)
(39,32,2)
(17,32,2)
(43,28,2)
(37,32,2)
(30,32,2)
(14,32,2)
(0,32,2)
(43,19,2)
(43,20,2)
(15,32,2)
-----------------------------------
(0,EINVAL)
(1,case IB_WR_SEND:)
(2,opcode = -EINVAL)
(3,FW_RI_SEND_WITH_INV)
(4,opcode)
(5,break;)
(6,opcode = FW_RI_FAST_REGISTER)
(7,FW_RI_LOCAL_INV)
(8,switch (ib_opcode)
(9,RET)
(10,case IB_WR_SEND_WITH_INV:)
(11,case IB_WR_RDMA_READ:)
(12,opcode)
(13,case IB_WR_RDMA_WRITE:)
(14,break;)
(15,opcode = FW_RI_READ_REQ)
(16,opcode)
(17,-EINVAL)
(18,case IB_WR_RDMA_READ_WITH_INV:)
(19,opcode = FW_RI_LOCAL_INV)
(20,opcode = FW_RI_SEND_WITH_INV)
(21,opcode)
(22,opcode)
(23,opcode)
(24,FW_RI_FAST_REGISTER)
(25,FW_RI_SEND)
(26,default:)
(27,)
(28,opcode = FW_RI_RDMA_WRITE)
(29,)
(30,opcode)
(31,break;)
(32,ib_opcode)
(33,break;)
(34,case IB_WR_REG_MR:)
(35,FW_RI_RDMA_WRITE)
(36,case IB_WR_LOCAL_INV:)
(37,break;)
(38,opcode = FW_RI_SEND)
(39,break;)
(40,opcode)
(41,opcode)
(42,FW_RI_READ_REQ)
(43,return opcode;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^