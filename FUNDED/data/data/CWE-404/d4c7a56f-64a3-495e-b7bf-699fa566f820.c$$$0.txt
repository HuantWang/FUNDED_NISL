-----label-----
0
-----code-----
static void do_ext_call_interrupt(__u16 code)
{
	unsigned long bits;

	/*
	 * handle bit signal external calls
	 *
	 * For the ec_schedule signal we have to do nothing. All the work
	 * is done automatically when we return from the interrupt.
	 */
	bits = xchg(&S390_lowcore.ext_call_fast, 0);

	if (test_bit(ec_schedule, &bits))
		scheduler_ipi();

	if (test_bit(ec_call_function, &bits))
		generic_smp_call_function_interrupt();

	if (test_bit(ec_call_function_single, &bits))
		generic_smp_call_function_single_interrupt();
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
11,12
12,13
12,14
14,15
16,17
17,18
17,19
18,19
20,21
20,22
20,23
21,22
23,24
24,25
24,26
25,26
29,30
29,31
30,31
30,32
30,33
31,32
33,34
35,36
36,37
38,39
39,40
40,41
42,43
42,44
43,44
43,45
43,46
44,45
46,47
48,49
49,50
51,52
52,53
53,54
55,56
55,57
56,57
56,58
56,59
57,58
59,60
61,62
62,63
64,65
65,66
66,67
-----nextToken-----
2,4,7,9,13,15,19,22,26,27,28,32,34,37,41,45,47,50,54,58,60,63,67
-----computeFrom-----
17,18
17,19
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
static void do_ext_call_interrupt(__u16 code){	unsigned long bits;	/*	 * handle bit signal external calls	 *	 * For the ec_schedule signal we have to do nothing. All the work	 * is done automatically when we return from the interrupt.	 */	bits = xchg(&S390_lowcore.ext_call_fast, 0);	if (test_bit(ec_schedule, &bits))		scheduler_ipi();	if (test_bit(ec_call_function, &bits))		generic_smp_call_function_interrupt();	if (test_bit(ec_call_function_single, &bits))		generic_smp_call_function_single_interrupt();}
static void
do_ext_call_interrupt(__u16 code)
do_ext_call_interrupt
__u16 code
__u16
__u16
code
code
{	unsigned long bits;	/*	 * handle bit signal external calls	 *	 * For the ec_schedule signal we have to do nothing. All the work	 * is done automatically when we return from the interrupt.	 */	bits = xchg(&S390_lowcore.ext_call_fast, 0);	if (test_bit(ec_schedule, &bits))		scheduler_ipi();	if (test_bit(ec_call_function, &bits))		generic_smp_call_function_interrupt();	if (test_bit(ec_call_function_single, &bits))		generic_smp_call_function_single_interrupt();}
unsigned long bits;
unsigned long bits;
unsigned long
bits
bits
bits = xchg(&S390_lowcore.ext_call_fast, 0);
bits = xchg(&S390_lowcore.ext_call_fast, 0)
bits
bits
xchg(&S390_lowcore.ext_call_fast, 0)
xchg
xchg
&S390_lowcore.ext_call_fast
S390_lowcore.ext_call_fast
S390_lowcore
S390_lowcore
ext_call_fast
0
if (test_bit(ec_schedule, &bits))		scheduler_ipi();
test_bit(ec_schedule, &bits)
test_bit
test_bit
ec_schedule
ec_schedule
&bits
bits
bits
scheduler_ipi();
scheduler_ipi()
scheduler_ipi
scheduler_ipi
if (test_bit(ec_call_function, &bits))		generic_smp_call_function_interrupt();
test_bit(ec_call_function, &bits)
test_bit
test_bit
ec_call_function
ec_call_function
&bits
bits
bits
generic_smp_call_function_interrupt();
generic_smp_call_function_interrupt()
generic_smp_call_function_interrupt
generic_smp_call_function_interrupt
if (test_bit(ec_call_function_single, &bits))		generic_smp_call_function_single_interrupt();
test_bit(ec_call_function_single, &bits)
test_bit
test_bit
ec_call_function_single
ec_call_function_single
&bits
bits
bits
generic_smp_call_function_single_interrupt();
generic_smp_call_function_single_interrupt()
generic_smp_call_function_single_interrupt
generic_smp_call_function_single_interrupt
-----joern-----
(26,19,0)
(11,28,0)
(25,10,0)
(24,19,0)
(0,13,0)
(15,5,0)
(5,20,0)
(27,13,0)
(13,27,0)
(10,25,0)
(4,21,0)
(20,5,0)
(7,19,0)
(10,27,0)
(20,27,0)
(0,28,0)
(28,0,0)
(27,19,0)
(18,10,0)
(17,13,0)
(21,27,0)
(16,20,0)
(9,25,0)
(12,19,0)
(22,27,0)
(6,21,0)
(13,0,0)
(2,28,0)
(8,6,0)
(21,6,0)
(17,0,1)
(27,13,1)
(18,9,1)
(6,21,1)
(20,16,1)
(20,27,1)
(3,5,1)
(23,6,1)
(1,5,1)
(13,17,1)
(15,14,1)
(10,18,1)
(2,11,1)
(9,6,1)
(25,10,1)
(15,25,1)
(16,15,1)
(13,0,1)
(9,23,1)
(0,28,1)
(5,20,1)
(21,4,1)
(11,22,1)
(28,2,1)
(10,27,1)
(21,27,1)
(4,8,1)
(1,3,1)
(14,25,1)
(8,27,1)
(25,10,2)
(23,6,2)
(6,21,2)
(10,27,2)
(21,27,2)
(5,20,2)
(13,0,2)
(27,13,2)
(20,27,2)
(3,5,2)
(0,28,2)
(14,25,2)
-----------------------------------
(0,&S390_lowcore.ext_call_fast)
(1,RET)
(2,ext_call_fast)
(3,generic_smp_call_function_single_interrupt()
(4,bits)
(5,test_bit(ec_call_function_single, &bits)
(6,test_bit(ec_schedule, &bits)
(7,bits)
(8,ec_schedule)
(9,ec_call_function)
(10,&bits)
(11,S390_lowcore)
(12,if (test_bit(ec_schedule, &bits)
(13,xchg(&S390_lowcore.ext_call_fast, 0)
(14,generic_smp_call_function_interrupt()
(15,ec_call_function_single)
(16,bits)
(17,0)
(18,bits)
(19,)
(20,&bits)
(21,&bits)
(22,bits)
(23,scheduler_ipi()
(24,if (test_bit(ec_call_function_single, &bits)
(25,test_bit(ec_call_function, &bits)
(26,if (test_bit(ec_call_function, &bits)
(27,bits = xchg(&S390_lowcore.ext_call_fast, 0)
(28,S390_lowcore.ext_call_fast)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^