-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
32,35
33,34
33,35
36,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
45,46
45,47
46,47
48,49
48,50
50,51
52,53
52,54
53,54
53,55
54,55
54,56
55,56
58,59
58,60
59,60
62,63
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
82,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,14,16,19,20,25,27,28,31,34,35,40,41,47,49,51,56,57,60,61,67,68,71,75,76,78,81,86,87
-----computeFrom-----
12,13
12,14
18,19
18,20
33,34
33,35
53,54
53,55
54,55
54,56
58,59
58,60
65,66
65,67
69,70
69,71
-----guardedBy-----
60,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(5==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(0,13,0)
(18,13,0)
(10,11,0)
(7,22,0)
(40,33,0)
(12,41,0)
(41,12,0)
(24,23,0)
(29,46,0)
(47,6,0)
(1,41,0)
(22,42,0)
(44,11,0)
(8,33,0)
(34,45,0)
(40,37,0)
(11,48,0)
(3,13,0)
(36,13,0)
(48,32,0)
(48,6,0)
(15,19,0)
(17,32,0)
(2,12,0)
(41,48,0)
(33,48,0)
(11,18,0)
(43,51,0)
(33,40,0)
(11,44,0)
(31,12,0)
(14,33,0)
(16,48,0)
(37,48,0)
(12,26,0)
(45,35,0)
(38,51,0)
(6,48,0)
(30,45,0)
(27,32,0)
(28,9,0)
(20,37,0)
(5,23,0)
(37,40,0)
(52,18,0)
(4,32,0)
(25,19,0)
(39,28,0)
(49,37,0)
(51,45,0)
(18,11,0)
(50,36,0)
(28,39,1)
(22,7,1)
(36,50,1)
(6,47,1)
(21,40,1)
(18,11,1)
(14,37,1)
(33,48,1)
(38,43,1)
(11,44,1)
(5,48,1)
(13,0,1)
(49,20,1)
(10,52,1)
(21,18,1)
(18,13,1)
(24,5,1)
(36,13,1)
(0,3,1)
(41,1,1)
(52,13,1)
(2,23,1)
(33,8,1)
(11,48,1)
(40,33,1)
(20,51,1)
(39,19,1)
(7,18,1)
(50,22,1)
(40,37,1)
(15,25,1)
(51,38,1)
(12,41,1)
(8,14,1)
(25,23,1)
(47,16,1)
(23,24,1)
(3,40,1)
(1,31,1)
(31,2,1)
(25,12,1)
(11,10,1)
(21,28,1)
(37,49,1)
(48,6,1)
(19,15,1)
(37,48,1)
(41,48,1)
(43,19,1)
(52,36,1)
(18,11,2)
(10,18,2)
(12,23,2)
(37,48,2)
(40,19,2)
(36,18,2)
(20,19,2)
(8,37,2)
(18,18,2)
(13,40,2)
(38,19,2)
(33,37,2)
(11,40,2)
(3,40,2)
(37,19,2)
(22,18,2)
(49,19,2)
(39,19,2)
(11,18,2)
(33,48,2)
(11,44,2)
(10,40,2)
(36,13,2)
(31,23,2)
(2,23,2)
(41,23,2)
(41,48,2)
(48,6,2)
(52,40,2)
(40,37,2)
(11,48,2)
(50,18,2)
(28,19,2)
(52,18,2)
(7,18,2)
(18,13,2)
(43,19,2)
(51,19,2)
(0,40,2)
(40,33,2)
(1,23,2)
(14,37,2)
(12,41,2)
(18,40,2)
-----------------------------------
(0,0)
(1,count)
(2,stdin)
(3,i)
(4,if(5==5)
(5,5)
(6,-1)
(7,"Hello")
(8,20)
(9,)
(10,count)
(11,(size_t)
(12,fscanf(stdin, "%d", &count)
(13,i = 0)
(14,count)
(15,5)
(16,count)
(17,count)
(18,i < (size_t)
(19,5!=5)
(20,count)
(21,RET)
(22,printLine("Hello")
(23,5==5)
(24,5)
(25,5)
(26,)
(27,if(5!=5)
(28,printLine("Benign, fixed string")
(29,for (i = 0; i < (size_t)
(30,i)
(31,"%d")
(32,)
(33,count <= 20)
(34,if (count > 0 && count <= 20)
(35,)
(36,i++)
(37,count > 0)
(38,0)
(39,"Benign, fixed string")
(40,count > 0 && count <= 20)
(41,&count)
(42,)
(43,i)
(44,size_t)
(45,)
(46,)
(47,1)
(48,count = -1)
(49,0)
(50,i)
(51,i = 0)
(52,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^