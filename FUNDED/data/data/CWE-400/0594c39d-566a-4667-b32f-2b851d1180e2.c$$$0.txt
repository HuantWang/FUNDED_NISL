-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
26,27
26,28
28,29
28,30
29,30
29,31
30,31
31,32
31,33
33,34
33,35
36,37
36,38
36,39
37,38
37,39
38,39
40,41
40,42
41,42
43,44
45,46
45,47
45,48
45,49
45,50
46,47
47,48
47,49
48,49
50,51
50,52
51,52
51,53
53,54
55,56
55,57
56,57
58,59
58,60
59,60
61,62
62,63
62,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
79,82
80,81
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
94,95
96,97
98,99
99,100
100,101
100,102
101,102
-----nextToken-----
2,4,9,11,15,16,18,23,24,25,27,32,34,35,39,42,44,49,52,54,57,60,63,64,68,70,75,77,81,83,85,89,91,95,97,102,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
37,38
37,39
47,48
47,49
58,59
58,60
66,67
66,68
-----guardedBy-----
44,85
39,60
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
1
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
data = 20;
data = 20
data
data
20
break;
while(1)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
1
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }        break;    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
-----joern-----
(18,43,0)
(3,21,0)
(28,20,0)
(51,34,0)
(13,26,0)
(13,38,0)
(7,2,0)
(29,46,0)
(12,5,0)
(15,38,0)
(47,13,0)
(34,37,0)
(26,19,0)
(2,24,0)
(38,13,0)
(1,46,0)
(10,34,0)
(43,24,0)
(13,27,0)
(30,16,0)
(14,34,0)
(17,19,0)
(44,25,0)
(49,26,0)
(0,44,0)
(46,0,0)
(44,27,0)
(4,21,0)
(8,50,0)
(32,0,0)
(33,37,0)
(43,0,0)
(13,34,0)
(11,31,0)
(23,26,0)
(25,44,0)
(20,51,0)
(45,24,0)
(39,40,0)
(8,31,0)
(27,44,0)
(41,30,0)
(21,0,0)
(0,24,0)
(51,26,0)
(21,24,0)
(5,40,0)
(27,13,0)
(6,51,0)
(2,0,0)
(31,8,0)
(44,0,0)
(22,37,0)
(9,37,0)
(42,5,0)
(51,20,0)
(4,46,1)
(2,7,1)
(34,10,1)
(29,0,1)
(18,2,1)
(39,30,1)
(38,15,1)
(4,8,1)
(7,21,1)
(36,39,1)
(48,17,1)
(8,31,1)
(15,47,1)
(2,0,1)
(36,48,1)
(51,20,1)
(35,34,1)
(6,48,1)
(11,46,1)
(41,51,1)
(49,23,1)
(39,43,1)
(46,1,1)
(51,26,1)
(47,32,1)
(10,14,1)
(3,4,1)
(21,0,1)
(30,41,1)
(44,27,1)
(43,0,1)
(32,51,1)
(13,38,1)
(13,26,1)
(26,49,1)
(23,35,1)
(21,3,1)
(43,18,1)
(31,11,1)
(20,28,1)
(28,6,1)
(51,34,1)
(1,29,1)
(27,13,1)
(13,34,1)
(48,35,1)
(46,0,1)
(0,44,1)
(44,25,1)
(17,26,1)
(8,46,2)
(26,35,2)
(32,51,2)
(51,26,2)
(21,51,2)
(11,46,2)
(1,51,2)
(28,48,2)
(51,20,2)
(29,51,2)
(49,35,2)
(20,48,2)
(30,51,2)
(13,51,2)
(43,51,2)
(21,0,2)
(17,35,2)
(4,51,2)
(41,51,2)
(23,35,2)
(13,38,2)
(18,51,2)
(46,0,2)
(2,51,2)
(13,26,2)
(51,34,2)
(31,46,2)
(3,51,2)
(46,51,2)
(0,44,2)
(38,51,2)
(0,51,2)
(44,25,2)
(27,13,2)
(39,48,2)
(47,51,2)
(43,0,2)
(13,34,2)
(6,48,2)
(51,48,2)
(7,51,2)
(44,27,2)
(44,51,2)
(27,51,2)
(15,51,2)
(2,0,2)
(8,31,2)
-----------------------------------
(0,myString = (wchar_t *)
(1,NULL)
(2,printWLine(myString)
(3,HELLO_STRING)
(4,myString)
(5,)
(6,data)
(7,myString)
(8,exit(-1)
(9,while(1)
(10,0)
(11,1)
(12,myString)
(13,data*sizeof(wchar_t)
(14,data)
(15,wchar_t)
(16,)
(17,break;)
(18,myString)
(19,)
(20,wcslen(HELLO_STRING)
(21,wcscpy(myString, HELLO_STRING)
(22,data)
(23,data)
(24,)
(25,wchar_t *)
(26,data = 20)
(27,malloc(data*sizeof(wchar_t)
(28,HELLO_STRING)
(29,myString)
(30,printLine("Input is less than the length of the source string")
(31,-1)
(32,myString)
(33,while(1)
(34,data = 0)
(35,1)
(36,RET)
(37,)
(38,sizeof(wchar_t)
(39,break;)
(40,)
(41,"Input is less than the length of the source string")
(42,if (data > wcslen(HELLO_STRING)
(43,free(myString)
(44,(wchar_t *)
(45,if (myString == NULL)
(46,myString == NULL)
(47,data)
(48,1)
(49,20)
(50,)
(51,data > wcslen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^