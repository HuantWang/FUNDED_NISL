-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_17_bad()
{
    int i,j;
    int count;
    /* Initialize count */
    count = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
42,45
44,45
45,46
47,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
56,57
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
92,93
92,94
93,94
94,95
94,96
95,96
97,98
97,99
99,100
101,102
101,103
101,104
101,105
102,103
103,104
103,105
104,105
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
115,116
117,118
118,119
120,121
121,122
122,123
122,124
123,124
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,43,46,48,53,55,57,59,61,66,69,71,76,77,82,83,86,87,90,96,98,100,105,106,109,113,114,116,119,124,125
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
50,51
50,52
64,65
64,66
80,81
80,82
84,85
84,86
103,104
103,105
107,108
107,109
-----guardedBy-----
55,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_17_bad(){    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_17_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_17_bad
{    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(28,53,0)
(64,59,0)
(24,59,0)
(5,62,0)
(62,48,0)
(45,11,0)
(67,24,0)
(43,45,0)
(66,36,0)
(5,7,0)
(33,23,0)
(23,58,0)
(12,11,0)
(49,41,0)
(6,7,0)
(10,4,0)
(19,55,0)
(37,26,0)
(11,53,0)
(35,34,0)
(3,66,0)
(58,55,0)
(21,55,0)
(42,34,0)
(26,18,0)
(52,17,0)
(62,17,0)
(20,25,0)
(16,57,0)
(50,24,0)
(63,52,0)
(47,7,0)
(44,7,0)
(11,45,0)
(34,25,0)
(41,59,0)
(48,62,0)
(65,17,0)
(52,53,0)
(29,66,0)
(46,25,0)
(1,25,0)
(32,11,0)
(62,58,0)
(62,5,0)
(4,9,0)
(61,55,0)
(13,6,0)
(2,1,0)
(57,66,0)
(17,51,0)
(38,57,0)
(60,59,0)
(17,52,0)
(15,55,0)
(39,62,0)
(56,4,0)
(53,4,0)
(22,54,0)
(27,58,0)
(31,22,0)
(40,55,0)
(8,11,0)
(14,53,0)
(58,23,0)
(30,5,0)
(39,30,1)
(24,59,1)
(14,28,1)
(53,14,1)
(65,45,1)
(37,5,1)
(5,7,1)
(32,12,1)
(7,47,1)
(30,6,1)
(24,50,1)
(11,53,1)
(26,37,1)
(38,24,1)
(8,53,1)
(34,25,1)
(2,17,1)
(58,23,1)
(45,43,1)
(67,59,1)
(35,1,1)
(64,60,1)
(62,58,1)
(35,25,1)
(57,16,1)
(1,2,1)
(22,31,1)
(1,25,1)
(52,53,1)
(23,33,1)
(11,32,1)
(60,34,1)
(62,39,1)
(33,27,1)
(62,48,1)
(30,7,1)
(62,17,1)
(42,35,1)
(5,62,1)
(34,42,1)
(45,11,1)
(31,45,1)
(63,65,1)
(41,49,1)
(46,58,1)
(67,41,1)
(6,13,1)
(2,22,1)
(47,44,1)
(17,52,1)
(43,11,1)
(6,7,1)
(49,5,1)
(44,57,1)
(59,64,1)
(20,46,1)
(52,63,1)
(41,59,1)
(28,34,1)
(25,20,1)
(50,67,1)
(12,8,1)
(13,26,1)
(0,24,1)
(16,38,1)
(62,17,2)
(62,24,2)
(52,45,2)
(8,34,2)
(37,5,2)
(35,34,2)
(13,5,2)
(47,24,2)
(11,34,2)
(58,23,2)
(45,11,2)
(53,34,2)
(26,5,2)
(31,45,2)
(5,62,2)
(24,24,2)
(41,24,2)
(11,53,2)
(45,34,2)
(6,7,2)
(62,5,2)
(43,34,2)
(12,34,2)
(49,24,2)
(17,45,2)
(32,34,2)
(5,5,2)
(5,7,2)
(28,34,2)
(50,24,2)
(17,52,2)
(2,34,2)
(30,5,2)
(39,5,2)
(57,24,2)
(24,59,2)
(14,34,2)
(34,25,2)
(62,58,2)
(1,34,2)
(34,34,2)
(62,48,2)
(1,25,2)
(65,45,2)
(44,24,2)
(16,24,2)
(42,34,2)
(52,53,2)
(30,24,2)
(6,5,2)
(63,45,2)
(41,59,2)
(22,45,2)
(67,24,2)
(38,24,2)
(39,24,2)
(5,24,2)
(7,24,2)
-----------------------------------
(0,RET)
(1,i++)
(2,i)
(3,i)
(4,)
(5,i < (size_t)
(6,i++)
(7,i = 0)
(8,inputBuffer)
(9,)
(10,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(12,CHAR_ARRAY_SIZE)
(13,i)
(14,"")
(15,for(i = 0; i < 1; i++)
(16,0)
(17,count = atoi(inputBuffer)
(18,)
(19,j)
(20,0)
(21,i)
(22,printLine("fgets()
(23,-1)
(24,j < 1)
(25,i = 0)
(26,printLine("Hello")
(27,count)
(28,inputBuffer)
(29,for (i = 0; i < (size_t)
(30,i)
(31,"fgets()
(32,stdin)
(33,1)
(34,i < 1)
(35,i)
(36,)
(37,"Hello")
(38,i)
(39,count)
(40,count)
(41,j++)
(42,1)
(43,NULL)
(44,i)
(45,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(46,i)
(47,0)
(48,size_t)
(49,j)
(50,1)
(51,)
(52,atoi(inputBuffer)
(53,inputBuffer[CHAR_ARRAY_SIZE] = "")
(54,)
(55,)
(56,inputBuffer)
(57,i = 0)
(58,count = -1)
(59,j = 0)
(60,j)
(61,for(j = 0; j < 1; j++)
(62,(size_t)
(63,inputBuffer)
(64,0)
(65,count)
(66,)
(67,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^