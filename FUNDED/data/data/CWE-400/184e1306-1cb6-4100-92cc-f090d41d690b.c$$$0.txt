-----label-----
1
-----code-----
void *thread_main(void *data)
{
	struct threaddata *td = data;
	int mb = td->tid;
	while(true) {
		int client = atomic_load(&mailbox[mb]);
		if(client != 0) {
#if PROFILE
			struct timespec start, stop;
			clock_gettime(CLOCK_MONOTONIC, &start);
#endif
			thread_client(client);
#if PROFILE
			clock_gettime(CLOCK_MONOTONIC, &stop);

			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);
#endif

			atomic_store(&mailbox[mb], 0);
			atomic_store(&last_mailbox, mb);
		} else {
			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
22,23
23,24
23,25
25,26
25,27
27,28
28,29
28,30
29,30
32,33
32,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
40,41
41,42
41,43
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
51,53
52,53
55,56
55,57
55,58
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
63,66
64,65
66,67
67,68
67,69
68,69
70,71
73,74
74,75
74,76
74,77
75,76
77,78
78,79
80,81
82,83
83,84
84,85
84,86
84,87
84,88
84,89
84,90
84,91
85,86
87,88
87,89
88,89
88,90
90,91
92,93
93,94
93,95
94,95
96,97
98,99
101,102
103,104
-----nextToken-----
2,4,5,7,9,10,15,17,18,21,24,26,30,31,33,37,39,43,47,49,53,54,59,61,65,69,71,72,76,79,81,86,89,91,95,97,99,100,102,104,105
-----computeFrom-----
51,52
51,53
-----guardedBy-----
53,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;WhileStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
void *thread_main(void *data){	struct threaddata *td = data;	int mb = td->tid;	while(true) {		int client = atomic_load(&mailbox[mb]);		if(client != 0) {#if PROFILE			struct timespec start, stop;			clock_gettime(CLOCK_MONOTONIC, &start);#endif			thread_client(client);#if PROFILE			clock_gettime(CLOCK_MONOTONIC, &stop);			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);#endif			atomic_store(&mailbox[mb], 0);			atomic_store(&last_mailbox, mb);		} else {			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);		}	}}
void
*thread_main(void *data)
*
thread_main
void *data
void
*data
*
data
{	struct threaddata *td = data;	int mb = td->tid;	while(true) {		int client = atomic_load(&mailbox[mb]);		if(client != 0) {#if PROFILE			struct timespec start, stop;			clock_gettime(CLOCK_MONOTONIC, &start);#endif			thread_client(client);#if PROFILE			clock_gettime(CLOCK_MONOTONIC, &stop);			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);#endif			atomic_store(&mailbox[mb], 0);			atomic_store(&last_mailbox, mb);		} else {			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);		}	}}
struct threaddata *td = data;
struct threaddata *td = data;
struct threaddata
threaddata
*td = data
*
td
= data
data
data
int mb = td->tid;
int mb = td->tid;
int
mb = td->tid
mb
= td->tid
td->tid
td
td
tid
while(true) {		int client = atomic_load(&mailbox[mb]);		if(client != 0) {#if PROFILE			struct timespec start, stop;			clock_gettime(CLOCK_MONOTONIC, &start);#endif			thread_client(client);#if PROFILE			clock_gettime(CLOCK_MONOTONIC, &stop);			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);#endif			atomic_store(&mailbox[mb], 0);			atomic_store(&last_mailbox, mb);		} else {			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);		}	}
true
{		int client = atomic_load(&mailbox[mb]);		if(client != 0) {#if PROFILE			struct timespec start, stop;			clock_gettime(CLOCK_MONOTONIC, &start);#endif			thread_client(client);#if PROFILE			clock_gettime(CLOCK_MONOTONIC, &stop);			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);#endif			atomic_store(&mailbox[mb], 0);			atomic_store(&last_mailbox, mb);		} else {			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);		}	}
int client = atomic_load(&mailbox[mb]);
int client = atomic_load(&mailbox[mb]);
int
client = atomic_load(&mailbox[mb])
client
= atomic_load(&mailbox[mb])
atomic_load(&mailbox[mb])
atomic_load
atomic_load
&mailbox[mb]
mailbox[mb]
mailbox
mailbox
mb
mb
if(client != 0) {#if PROFILE			struct timespec start, stop;			clock_gettime(CLOCK_MONOTONIC, &start);#endif			thread_client(client);#if PROFILE			clock_gettime(CLOCK_MONOTONIC, &stop);			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);#endif			atomic_store(&mailbox[mb], 0);			atomic_store(&last_mailbox, mb);		} else {			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);		}
client != 0
client
client
0
{#if PROFILE			struct timespec start, stop;			clock_gettime(CLOCK_MONOTONIC, &start);#endif			thread_client(client);#if PROFILE			clock_gettime(CLOCK_MONOTONIC, &stop);			printf("%ld %ld\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec);#endif			atomic_store(&mailbox[mb], 0);			atomic_store(&last_mailbox, mb);		}
thread_client(client);
thread_client(client)
thread_client
thread_client
client
client
atomic_store(&mailbox[mb], 0);
atomic_store(&mailbox[mb], 0)
atomic_store
atomic_store
&mailbox[mb]
mailbox[mb]
mailbox
mailbox
mb
mb
0
atomic_store(&last_mailbox, mb);
atomic_store(&last_mailbox, mb)
atomic_store
atomic_store
&last_mailbox
last_mailbox
last_mailbox
mb
mb
{			futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);		}
futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0);
futex((int *)&mailbox[mb], FUTEX_WAIT, 0, NULL, NULL, 0)
futex
futex
(int *)&mailbox[mb]
int *
int
*
*
&mailbox[mb]
mailbox[mb]
mailbox
mailbox
mb
mb
FUTEX_WAIT
FUTEX_WAIT
0
NULL
NULL
NULL
NULL
0
-----joern-----
(68,55,0)
(70,12,0)
(63,66,0)
(77,7,0)
(45,28,0)
(45,39,0)
(11,3,0)
(44,60,0)
(15,73,0)
(25,33,0)
(12,79,0)
(73,18,0)
(23,78,0)
(15,44,0)
(8,55,0)
(61,11,0)
(69,64,0)
(73,33,0)
(44,36,0)
(75,11,0)
(6,64,0)
(56,41,0)
(55,68,0)
(67,30,0)
(14,18,0)
(68,0,0)
(39,10,0)
(64,69,0)
(49,29,0)
(35,36,0)
(9,33,0)
(66,78,0)
(13,21,0)
(63,29,0)
(5,20,0)
(42,29,0)
(60,44,0)
(58,38,0)
(54,60,0)
(10,39,0)
(78,79,0)
(30,7,0)
(79,12,0)
(5,79,0)
(31,69,0)
(5,29,0)
(18,73,0)
(11,39,0)
(26,21,0)
(50,20,0)
(41,21,0)
(41,1,0)
(78,66,0)
(0,34,0)
(51,34,0)
(28,79,0)
(59,5,0)
(36,44,0)
(0,68,0)
(53,43,0)
(66,63,0)
(39,11,0)
(57,78,0)
(79,21,0)
(48,55,0)
(52,34,0)
(64,29,0)
(28,45,0)
(15,29,0)
(17,21,0)
(51,29,0)
(38,34,0)
(44,15,0)
(33,73,0)
(39,45,0)
(7,29,0)
(76,51,0)
(24,60,0)
(74,15,0)
(34,0,0)
(46,11,0)
(2,12,0)
(19,28,0)
(7,30,0)
(40,28,0)
(62,63,0)
(65,38,0)
(55,79,0)
(12,41,0)
(16,36,0)
(4,18,0)
(37,43,0)
(27,41,0)
(72,11,0)
(32,11,0)
(47,79,0)
(73,15,0)
(20,5,0)
(34,43,0)
(46,39,1)
(36,16,1)
(51,34,1)
(18,14,1)
(28,79,1)
(12,70,1)
(39,45,1)
(50,63,1)
(44,36,1)
(73,18,1)
(39,10,1)
(52,22,1)
(31,6,1)
(55,79,1)
(63,66,1)
(14,4,1)
(34,0,1)
(41,1,1)
(38,65,1)
(47,41,1)
(57,23,1)
(67,77,1)
(74,7,1)
(11,32,1)
(51,76,1)
(72,46,1)
(11,39,1)
(44,60,1)
(22,11,1)
(45,28,1)
(62,66,1)
(5,79,1)
(54,24,1)
(2,47,1)
(65,58,1)
(40,38,1)
(61,75,1)
(60,54,1)
(15,44,1)
(19,40,1)
(76,64,1)
(41,56,1)
(33,25,1)
(71,22,1)
(59,20,1)
(78,57,1)
(9,74,1)
(30,67,1)
(24,36,1)
(35,73,1)
(5,20,1)
(15,73,1)
(28,19,1)
(5,59,1)
(7,30,1)
(79,12,1)
(70,2,1)
(6,38,1)
(25,9,1)
(32,61,1)
(55,8,1)
(66,78,1)
(73,33,1)
(38,34,1)
(58,34,1)
(69,31,1)
(16,35,1)
(20,50,1)
(0,68,1)
(22,5,1)
(63,62,1)
(12,41,1)
(56,27,1)
(48,52,1)
(8,48,1)
(75,72,1)
(64,69,1)
(22,79,1)
(4,33,1)
(77,51,1)
(23,15,1)
(68,55,1)
(78,79,1)
(63,66,2)
(15,38,2)
(5,20,2)
(28,79,2)
(57,38,2)
(66,78,2)
(58,22,2)
(45,28,2)
(11,39,2)
(44,38,2)
(30,38,2)
(65,22,2)
(5,38,2)
(73,33,2)
(52,22,2)
(51,34,2)
(44,60,2)
(23,38,2)
(16,38,2)
(48,22,2)
(45,38,2)
(0,68,2)
(15,73,2)
(8,22,2)
(61,38,2)
(34,22,2)
(60,38,2)
(39,45,2)
(39,38,2)
(67,38,2)
(55,79,2)
(74,38,2)
(18,38,2)
(4,38,2)
(72,38,2)
(28,38,2)
(32,38,2)
(76,38,2)
(62,38,2)
(63,38,2)
(36,38,2)
(66,38,2)
(12,41,2)
(33,38,2)
(19,38,2)
(59,38,2)
(78,38,2)
(22,22,2)
(51,38,2)
(25,38,2)
(24,38,2)
(68,55,2)
(50,38,2)
(73,18,2)
(78,79,2)
(7,30,2)
(5,79,2)
(20,38,2)
(0,22,2)
(77,38,2)
(39,10,2)
(35,38,2)
(64,38,2)
(64,69,2)
(44,36,2)
(79,12,2)
(54,38,2)
(31,38,2)
(7,38,2)
(46,38,2)
(38,34,2)
(40,38,2)
(75,38,2)
(6,38,2)
(15,44,2)
(69,38,2)
(9,38,2)
(55,22,2)
(41,1,2)
(11,38,2)
(38,22,2)
(34,0,2)
(73,38,2)
(14,38,2)
(68,22,2)
-----------------------------------
(0,atomic_load(&mailbox[mb])
(1,void *data)
(2,td)
(3,)
(4,start)
(5,atomic_store(&last_mailbox, mb)
(6,CLOCK_MONOTONIC)
(7,clock_gettime(CLOCK_MONOTONIC, &stop)
(8,mb)
(9,stop)
(10,int *)
(11,futex((int *)
(12,td->tid)
(13,td)
(14,tv_sec)
(15,printf("%ld %ld\\n", stop.tv_sec - start.tv_sec, stop.tv_nsec - start.tv_nsec)
(16,tv_nsec)
(17,while(true)
(18,start.tv_sec)
(19,mb)
(20,&last_mailbox)
(21,)
(22,true)
(23,mailbox)
(24,start)
(25,tv_sec)
(26,mb)
(27,td)
(28,mailbox[mb])
(29,)
(30,&stop)
(31,start)
(32,0)
(33,stop.tv_sec)
(34,client = atomic_load(&mailbox[mb])
(35,stop)
(36,stop.tv_nsec)
(37,client)
(38,client != 0)
(39,(int *)
(40,mailbox)
(41,*td = data)
(42,start)
(43,)
(44,stop.tv_nsec - start.tv_nsec)
(45,&mailbox[mb])
(46,FUTEX_WAIT)
(47,mb)
(48,mailbox)
(49,stop)
(50,last_mailbox)
(51,thread_client(client)
(52,client)
(53,if(client != 0)
(54,tv_nsec)
(55,mailbox[mb])
(56,data)
(57,mb)
(58,client)
(59,mb)
(60,start.tv_nsec)
(61,NULL)
(62,0)
(63,atomic_store(&mailbox[mb], 0)
(64,clock_gettime(CLOCK_MONOTONIC, &start)
(65,0)
(66,&mailbox[mb])
(67,stop)
(68,&mailbox[mb])
(69,&start)
(70,tid)
(71,RET)
(72,0)
(73,stop.tv_sec - start.tv_sec)
(74,"%ld %ld\\n")
(75,NULL)
(76,client)
(77,CLOCK_MONOTONIC)
(78,mailbox[mb])
(79,mb = td->tid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^