-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,69,70,74,75,76,78,81,82,83,84,88,89,90
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__wchar_t_realloc_15_bad()
CWE401_Memory_Leak__wchar_t_realloc_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(4,0,0)
(27,12,0)
(35,11,0)
(23,18,0)
(17,21,0)
(25,33,0)
(12,27,0)
(36,21,0)
(39,16,0)
(13,5,0)
(11,21,0)
(18,21,0)
(18,23,0)
(0,12,0)
(23,28,0)
(37,25,0)
(24,21,0)
(28,23,0)
(31,16,0)
(8,2,0)
(19,32,0)
(29,32,0)
(6,27,0)
(7,2,0)
(42,12,0)
(33,41,0)
(40,3,0)
(26,21,0)
(43,18,0)
(1,16,0)
(9,2,0)
(20,2,0)
(30,21,0)
(34,3,0)
(0,3,0)
(3,16,0)
(33,25,0)
(0,23,0)
(23,0,0)
(10,17,0)
(32,18,0)
(5,2,0)
(12,0,0)
(17,18,0)
(14,21,0)
(40,34,1)
(19,18,1)
(10,33,1)
(0,12,1)
(3,40,1)
(5,13,1)
(42,4,1)
(30,17,1)
(9,38,1)
(33,25,1)
(25,37,1)
(23,28,1)
(24,11,1)
(17,18,1)
(38,30,1)
(32,29,1)
(22,9,1)
(23,0,1)
(7,5,1)
(4,43,1)
(32,18,1)
(17,10,1)
(6,42,1)
(35,15,1)
(13,38,1)
(29,19,1)
(18,23,1)
(38,24,1)
(22,7,1)
(43,15,1)
(27,6,1)
(15,3,1)
(11,35,1)
(0,3,1)
(37,32,1)
(10,32,1)
(12,27,1)
(12,27,2)
(32,15,2)
(17,15,2)
(10,15,2)
(33,25,2)
(33,32,2)
(29,15,2)
(13,38,2)
(11,15,2)
(25,32,2)
(37,32,2)
(23,0,2)
(9,38,2)
(4,15,2)
(19,15,2)
(18,23,2)
(17,18,2)
(43,15,2)
(32,18,2)
(7,38,2)
(0,3,2)
(30,15,2)
(0,15,2)
(24,15,2)
(42,15,2)
(27,15,2)
(0,12,2)
(23,28,2)
(35,15,2)
(18,15,2)
(12,15,2)
(5,38,2)
(6,15,2)
(23,15,2)
-----------------------------------
(0,realloc(data, 100*sizeof(wchar_t)
(1,switch(6)
(2,)
(3,data = NULL)
(4,data)
(5,printLine("Benign, fixed string")
(6,wchar_t)
(7,break;)
(8,default:)
(9,break;)
(10,data)
(11,printLine("Benign, fixed string")
(12,100*sizeof(wchar_t)
(13,"Benign, fixed string")
(14,if (data == NULL)
(15,6)
(16,)
(17,printWLine(data)
(18,data = (wchar_t *)
(19,data)
(20,case 7:)
(21,)
(22,RET)
(23,(wchar_t *)
(24,break;)
(25,-1)
(26,default:)
(27,sizeof(wchar_t)
(28,wchar_t *)
(29,NULL)
(30,break;)
(31,data)
(32,data == NULL)
(33,exit(-1)
(34,data)
(35,"Benign, fixed string")
(36,case 6:)
(37,1)
(38,7)
(39,switch(7)
(40,NULL)
(41,)
(42,100)
(43,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^