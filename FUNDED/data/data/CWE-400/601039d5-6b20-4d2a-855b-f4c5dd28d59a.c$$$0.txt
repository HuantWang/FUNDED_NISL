-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
87,88
87,89
89,90
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,81,85,86,88,90
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_02_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,11,0)
(27,19,0)
(19,3,0)
(47,26,0)
(36,25,0)
(3,22,0)
(15,27,0)
(7,11,0)
(10,16,0)
(18,48,0)
(33,26,0)
(22,3,0)
(19,27,0)
(48,1,0)
(14,46,0)
(16,27,0)
(27,16,0)
(26,16,0)
(38,19,0)
(2,14,0)
(23,12,0)
(9,31,0)
(12,23,0)
(16,1,0)
(31,34,0)
(35,34,0)
(26,18,0)
(29,34,0)
(45,31,0)
(25,36,0)
(18,26,0)
(30,36,0)
(32,1,0)
(42,18,0)
(3,19,0)
(5,34,0)
(36,30,0)
(37,12,0)
(23,6,0)
(39,16,0)
(46,14,0)
(36,7,0)
(14,44,0)
(11,7,0)
(41,46,0)
(20,10,0)
(13,44,0)
(27,15,0)
(7,36,0)
(17,48,0)
(0,46,0)
(25,1,0)
(28,10,0)
(11,16,0)
(24,11,0)
(46,16,0)
(44,1,0)
(12,37,1)
(3,38,1)
(8,24,1)
(16,27,1)
(27,15,1)
(46,16,1)
(24,48,1)
(23,12,1)
(11,16,1)
(41,10,1)
(18,26,1)
(27,19,1)
(46,0,1)
(17,18,1)
(43,25,1)
(19,3,1)
(26,33,1)
(33,47,1)
(31,45,1)
(45,9,1)
(36,7,1)
(44,13,1)
(28,16,1)
(26,16,1)
(47,44,1)
(48,17,1)
(39,4,1)
(0,41,1)
(42,26,1)
(14,2,1)
(13,14,1)
(20,28,1)
(21,43,1)
(41,23,1)
(36,30,1)
(10,20,1)
(14,46,1)
(4,31,1)
(10,16,1)
(3,22,1)
(38,39,1)
(11,8,1)
(2,46,1)
(7,11,1)
(25,36,1)
(37,10,1)
(18,42,1)
(43,4,1)
(25,36,2)
(10,16,2)
(24,4,2)
(36,7,2)
(3,22,2)
(27,19,2)
(17,4,2)
(7,4,2)
(47,4,2)
(11,16,2)
(20,4,2)
(14,4,2)
(25,4,2)
(18,26,2)
(46,4,2)
(28,4,2)
(7,11,2)
(18,4,2)
(11,4,2)
(38,4,2)
(36,30,2)
(27,4,2)
(36,4,2)
(39,4,2)
(37,10,2)
(3,4,2)
(23,12,2)
(14,46,2)
(16,4,2)
(10,4,2)
(0,4,2)
(26,16,2)
(46,16,2)
(19,3,2)
(44,4,2)
(2,4,2)
(13,4,2)
(27,15,2)
(41,4,2)
(8,4,2)
(23,10,2)
(48,4,2)
(33,4,2)
(16,27,2)
(19,4,2)
(42,4,2)
(26,4,2)
(12,10,2)
-----------------------------------
(0,0)
(1,)
(2,intOne)
(3,sizeof(struct _twoIntsStruct)
(4,1)
(5,if(1)
(6,)
(7,&data[0])
(8,0)
(9,data)
(10,data == NULL)
(11,data[0])
(12,-1)
(13,0)
(14,data[0].intOne)
(15,struct _twoIntsStruct *)
(16,data = (struct _twoIntsStruct *)
(17,0)
(18,data[0].intTwo)
(19,calloc(100, sizeof(struct _twoIntsStruct)
(20,NULL)
(21,RET)
(22,struct _twoIntsStruct)
(23,exit(-1)
(24,data)
(25,printStructLine((twoIntsStruct *)
(26,data[0])
(27,(struct _twoIntsStruct *)
(28,data)
(29,data)
(30,twoIntsStruct *)
(31,data = NULL)
(32,if (data == NULL)
(33,0)
(34,)
(35,if(1)
(36,(twoIntsStruct *)
(37,1)
(38,100)
(39,data)
(40, sizeof(struct _twoIntsStruct)
(41,data)
(42,intTwo)
(43,1)
(44,data[0].intOne = 0)
(45,NULL)
(46,data[0])
(47,data)
(48,data[0].intTwo = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^