-----label-----
0
-----code-----
static struct group *af_getgrent(void) {
  struct group *grp = NULL, *res = NULL;

  if (!af_group_file ||
      !af_group_file->af_file) {
    errno = EINVAL;
    return NULL;
  }

  while (TRUE) {
#ifdef HAVE_FGETGRENT
    pr_signals_handle();
    grp = fgetgrent(af_group_file->af_file);
#else
    char *cp = NULL, *buf = NULL;
    int buflen = BUFSIZ;

    pr_signals_handle();

    buf = malloc(BUFSIZ);
    if (buf == NULL) {
      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");
      _exit(1);
    }
    grp = NULL;

    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,
        &(af_group_file->af_lineno)) != NULL) {

      /* Ignore comment and empty lines */
      if (buf[0] == '\0' ||
          buf[0] == '#') {
        continue;
      }

      cp = strchr(buf, '\n');
      if (cp != NULL) {
        *cp = '\0';
      }

      grp = af_getgrp(buf, af_group_file->af_lineno);
      free(buf);

      break;
    }
#endif /* !HAVE_FGETGRENT */

    /* If grp is NULL now, the file is empty - nothing more to be read. */
    if (grp == NULL) {
      break;
    }

    if (af_allow_grent(grp) < 0) {
      continue;
    }

    res = grp;
    break;
  }

  return res;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
13,16
14,15
16,17
16,18
16,19
19,20
20,21
22,23
22,24
22,25
25,26
26,27
28,29
28,30
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
38,39
38,40
39,40
40,41
40,42
41,42
43,44
45,46
46,47
48,49
48,50
49,50
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
52,53
53,54
53,55
53,56
55,56
55,57
55,58
58,59
59,60
61,62
61,63
61,64
64,65
65,66
67,68
68,69
68,70
70,71
70,72
72,73
73,74
75,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
96,97
96,98
96,99
96,100
97,98
99,100
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
112,113
114,115
114,116
115,116
115,117
116,117
116,118
116,119
116,120
116,121
117,118
119,120
120,121
122,123
123,124
125,126
125,127
126,127
129,130
130,131
131,132
131,133
132,133
135,136
137,138
137,139
137,140
137,141
137,142
137,143
138,139
138,140
139,140
139,141
140,141
140,142
141,142
141,143
142,143
146,147
146,148
147,148
147,149
148,149
152,153
154,155
155,156
155,157
156,157
158,159
158,160
158,161
159,160
161,162
164,165
164,166
165,166
165,167
166,167
168,169
170,171
171,172
172,173
172,174
173,174
174,175
177,178
178,179
178,180
179,180
181,182
181,183
181,184
182,183
184,185
186,187
186,188
187,188
190,191
191,192
191,193
192,193
194,195
197,198
197,199
198,199
198,200
199,200
201,202
203,204
205,206
205,207
206,207
206,208
207,208
207,209
208,209
210,211
213,214
215,216
216,217
216,218
217,218
219,220
222,223
223,224
-----nextToken-----
3,5,6,8,10,15,17,18,21,23,24,27,32,36,37,42,44,47,50,54,56,57,60,62,63,66,69,71,74,78,82,85,87,91,93,98,100,101,102,106,107,111,113,118,121,124,127,128,133,134,136,143,144,145,149,150,151,153,157,160,162,163,167,169,175,176,180,183,185,188,189,193,195,196,200,202,204,209,211,212,214,218,220,221,224
-----computeFrom-----
29,30
29,31
40,41
40,42
80,81
80,82
89,90
89,91
109,110
109,111
115,116
115,117
139,140
139,141
140,141
140,142
146,147
146,148
155,156
155,157
165,166
165,167
172,173
172,174
178,179
178,180
198,199
198,200
206,207
206,208
216,217
216,218
-----guardedBy-----
167,175
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;WhileStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct group *af_getgrent(void) {  struct group *grp = NULL, *res = NULL;  if (!af_group_file ||      !af_group_file->af_file) {    errno = EINVAL;    return NULL;  }  while (TRUE) {#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }  return res;}
static struct group
group
*af_getgrent(void)
*
af_getgrent
void
void


{  struct group *grp = NULL, *res = NULL;  if (!af_group_file ||      !af_group_file->af_file) {    errno = EINVAL;    return NULL;  }  while (TRUE) {#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }  return res;}
struct group *grp = NULL, *res = NULL;
struct group *grp = NULL, *res = NULL;
struct group
group
*grp = NULL
*
grp
= NULL
NULL
NULL
*res = NULL
*
res
= NULL
NULL
NULL
if (!af_group_file ||      !af_group_file->af_file) {    errno = EINVAL;    return NULL;  }
!af_group_file ||      !af_group_file->af_file
!af_group_file
af_group_file
af_group_file
!af_group_file->af_file
af_group_file->af_file
af_group_file
af_group_file
af_file
{    errno = EINVAL;    return NULL;  }
errno = EINVAL;
errno = EINVAL
errno
errno
EINVAL
EINVAL
return NULL;
NULL
NULL
while (TRUE) {#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }
TRUE
TRUE
{#ifdef HAVE_FGETGRENT    pr_signals_handle();    grp = fgetgrent(af_group_file->af_file);#else    char *cp = NULL, *buf = NULL;    int buflen = BUFSIZ;    pr_signals_handle();    buf = malloc(BUFSIZ);    if (buf == NULL) {      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");      _exit(1);    }    grp = NULL;    while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }#endif /* !HAVE_FGETGRENT */    /* If grp is NULL now, the file is empty - nothing more to be read. */    if (grp == NULL) {      break;    }    if (af_allow_grent(grp) < 0) {      continue;    }    res = grp;    break;  }
char *cp = NULL, *buf = NULL;
char *cp = NULL, *buf = NULL;
char
*cp = NULL
*
cp
= NULL
NULL
NULL
*buf = NULL
*
buf
= NULL
NULL
NULL
int buflen = BUFSIZ;
int buflen = BUFSIZ;
int
buflen = BUFSIZ
buflen
= BUFSIZ
BUFSIZ
BUFSIZ
pr_signals_handle();
pr_signals_handle()
pr_signals_handle
pr_signals_handle
buf = malloc(BUFSIZ);
buf = malloc(BUFSIZ)
buf
buf
malloc(BUFSIZ)
malloc
malloc
BUFSIZ
BUFSIZ
if (buf == NULL) {      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");      _exit(1);    }
buf == NULL
buf
buf
NULL
NULL
{      pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");      _exit(1);    }
pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!");
pr_log_pri(PR_LOG_ALERT, "%s", "Out of memory!")
pr_log_pri
pr_log_pri
PR_LOG_ALERT
PR_LOG_ALERT
"%s"
"Out of memory!"
_exit(1);
_exit(1)
_exit
_exit
1
grp = NULL;
grp = NULL
grp
grp
NULL
NULL
while (af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL) {      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }
af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno)) != NULL
af_getgrentline(&buf, &buflen, af_group_file->af_file,        &(af_group_file->af_lineno))
af_getgrentline
af_getgrentline
&buf
buf
buf
&buflen
buflen
buflen
af_group_file->af_file
af_group_file
af_group_file
af_file
&(af_group_file->af_lineno)
(af_group_file->af_lineno)
af_group_file->af_lineno
af_group_file
af_group_file
af_lineno
NULL
NULL
{      /* Ignore comment and empty lines */      if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }      cp = strchr(buf, '\n');      if (cp != NULL) {        *cp = '\0';      }      grp = af_getgrp(buf, af_group_file->af_lineno);      free(buf);      break;    }
if (buf[0] == '\0' ||          buf[0] == '#') {        continue;      }
buf[0] == '\0' ||          buf[0] == '#'
buf[0] == '\0'
buf[0]
buf
buf
0
'\0'
buf[0] == '#'
buf[0]
buf
buf
0
'#'
{        continue;      }
continue;
cp = strchr(buf, '\n');
cp = strchr(buf, '\n')
cp
cp
strchr(buf, '\n')
strchr
strchr
buf
buf
'\n'
if (cp != NULL) {        *cp = '\0';      }
cp != NULL
cp
cp
NULL
NULL
{        *cp = '\0';      }
*cp = '\0';
*cp = '\0'
*cp
cp
cp
'\0'
grp = af_getgrp(buf, af_group_file->af_lineno);
grp = af_getgrp(buf, af_group_file->af_lineno)
grp
grp
af_getgrp(buf, af_group_file->af_lineno)
af_getgrp
af_getgrp
buf
buf
af_group_file->af_lineno
af_group_file
af_group_file
af_lineno
free(buf);
free(buf)
free
free
buf
buf
break;
if (grp == NULL) {      break;    }
grp == NULL
grp
grp
NULL
NULL
{      break;    }
break;
if (af_allow_grent(grp) < 0) {      continue;    }
af_allow_grent(grp) < 0
af_allow_grent(grp)
af_allow_grent
af_allow_grent
grp
grp
0
{      continue;    }
continue;
res = grp;
res = grp
res
res
grp
grp
break;
return res;
res
res
-----joern-----
(11,5,0)
(34,23,0)
(7,48,0)
(1,22,0)
(9,50,0)
(45,34,0)
(8,47,0)
(0,23,0)
(35,18,0)
(10,6,0)
(29,21,0)
(50,23,0)
(35,41,0)
(2,25,0)
(4,37,0)
(46,23,0)
(42,22,0)
(47,50,0)
(48,33,0)
(17,25,0)
(47,31,0)
(51,25,0)
(21,5,0)
(22,1,0)
(24,48,0)
(38,41,0)
(41,35,0)
(12,31,0)
(40,5,0)
(15,6,0)
(48,6,0)
(28,18,0)
(50,34,0)
(16,23,0)
(36,5,0)
(27,1,0)
(13,38,0)
(18,35,0)
(25,17,0)
(49,43,0)
(14,19,0)
(20,18,0)
(47,5,0)
(22,34,0)
(44,50,0)
(26,23,0)
(43,34,0)
(32,5,0)
(31,5,0)
(52,43,0)
(30,21,0)
(34,17,0)
(17,34,0)
(6,33,0)
(39,31,0)
(41,38,0)
(24,47,0)
(26,3,1)
(51,45,1)
(50,9,1)
(1,22,1)
(14,43,1)
(34,17,1)
(47,31,1)
(29,30,1)
(1,27,1)
(38,13,1)
(9,44,1)
(8,14,1)
(8,3,1)
(20,28,1)
(4,1,1)
(43,34,1)
(22,34,1)
(25,2,1)
(48,6,1)
(49,52,1)
(7,6,1)
(10,41,1)
(42,43,1)
(52,34,1)
(45,26,1)
(8,46,1)
(24,47,1)
(12,39,1)
(13,31,1)
(44,1,1)
(46,50,1)
(3,4,1)
(27,22,1)
(50,34,1)
(18,20,1)
(3,41,1)
(28,38,1)
(6,15,1)
(22,42,1)
(41,38,1)
(31,12,1)
(17,25,1)
(2,51,1)
(47,8,1)
(24,48,1)
(47,50,1)
(15,10,1)
(48,7,1)
(39,21,1)
(21,29,1)
(41,35,1)
(43,49,1)
(35,18,1)
(18,38,2)
(45,3,2)
(20,38,2)
(52,3,2)
(4,1,2)
(41,38,2)
(50,34,2)
(48,6,2)
(27,43,2)
(17,3,2)
(7,41,2)
(25,3,2)
(43,3,2)
(35,18,2)
(24,48,2)
(34,3,2)
(10,41,2)
(34,17,2)
(1,22,2)
(51,3,2)
(2,3,2)
(41,35,2)
(49,3,2)
(22,43,2)
(1,43,2)
(3,41,2)
(28,38,2)
(35,38,2)
(15,41,2)
(3,1,2)
(9,1,2)
(50,1,2)
(43,34,2)
(42,43,2)
(6,41,2)
(44,1,2)
(24,47,2)
(46,1,2)
(22,34,2)
(14,43,2)
(47,41,2)
(48,41,2)
(47,50,2)
(47,31,2)
(17,25,2)
(26,3,2)
(8,41,2)
-----------------------------------
(0,if (grp == NULL)
(1,af_allow_grent(grp)
(2,af_file)
(3,TRUE)
(4,continue;)
(5,)
(6,errno = EINVAL)
(7,NULL)
(8,res)
(9,grp)
(10,errno)
(11,res)
(12,NULL)
(13,af_group_file)
(14,break;)
(15,EINVAL)
(16,if (af_allow_grent(grp)
(17,fgetgrent(af_group_file->af_file)
(18,af_group_file->af_file)
(19,)
(20,af_file)
(21,*grp = NULL)
(22,af_allow_grent(grp)
(23,)
(24,RET)
(25,af_group_file->af_file)
(26,pr_signals_handle()
(27,0)
(28,af_group_file)
(29,NULL)
(30,grp)
(31,*res = NULL)
(32,if (!af_group_file ||\n\\n      !af_group_file->af_file)
(33,)
(34,grp = fgetgrent(af_group_file->af_file)
(35,!af_group_file->af_file)
(36,while (TRUE)
(37,)
(38,!af_group_file)
(39,res)
(40,grp)
(41,!af_group_file ||\n\\n      !af_group_file->af_file)
(42,grp)
(43,grp == NULL)
(44,res)
(45,grp)
(46,break;)
(47,return res;)
(48,return NULL;)
(49,NULL)
(50,res = grp)
(51,af_group_file)
(52,grp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^