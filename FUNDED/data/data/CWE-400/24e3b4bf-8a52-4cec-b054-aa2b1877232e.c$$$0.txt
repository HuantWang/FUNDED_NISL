-----label-----
0
-----code-----
static void goodG2B()
{
    struct _twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
76,77
76,78
78,79
78,80
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,47,48,49,50,56,57,58,59,63,67,69,73,74,75,77,79,80
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
static void goodG2B(){    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
static void
goodG2B()
goodG2B
{    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(27,25,0)
(12,31,0)
(10,43,0)
(36,0,0)
(30,12,0)
(32,28,0)
(27,38,0)
(15,1,0)
(38,19,0)
(22,11,0)
(34,39,0)
(40,28,0)
(7,36,0)
(12,21,0)
(5,19,0)
(41,37,0)
(26,1,0)
(35,38,0)
(20,43,0)
(16,29,0)
(9,38,0)
(19,22,0)
(31,12,0)
(6,37,0)
(39,36,0)
(2,24,0)
(17,0,0)
(28,43,0)
(36,39,0)
(37,19,0)
(1,29,0)
(22,19,0)
(19,3,0)
(29,1,0)
(33,25,0)
(29,16,0)
(38,27,0)
(37,30,0)
(26,22,0)
(23,27,0)
(30,37,0)
(39,19,0)
(42,39,0)
(25,3,0)
(21,3,0)
(11,22,0)
(13,3,0)
(14,43,0)
(1,26,0)
(22,26,0)
(21,12,0)
(12,30,0)
(0,3,0)
(12,30,1)
(4,13,1)
(15,5,1)
(34,42,1)
(8,28,1)
(38,9,1)
(28,32,1)
(39,34,1)
(29,16,1)
(36,7,1)
(4,8,1)
(33,27,1)
(17,36,1)
(25,33,1)
(18,2,1)
(35,19,1)
(27,23,1)
(29,15,1)
(0,17,1)
(21,12,1)
(42,25,1)
(22,26,1)
(37,41,1)
(19,22,1)
(39,19,1)
(7,39,1)
(32,40,1)
(36,39,1)
(2,4,1)
(22,11,1)
(30,37,1)
(37,19,1)
(41,6,1)
(27,38,1)
(1,29,1)
(26,1,1)
(18,4,1)
(13,21,1)
(12,31,1)
(9,35,1)
(38,19,1)
(5,8,1)
(23,38,1)
(6,0,1)
(21,8,2)
(30,37,2)
(6,8,2)
(1,29,2)
(22,8,2)
(22,11,2)
(27,38,2)
(27,8,2)
(39,8,2)
(12,8,2)
(5,8,2)
(34,8,2)
(19,22,2)
(17,8,2)
(13,8,2)
(12,30,2)
(7,8,2)
(1,8,2)
(12,31,2)
(29,8,2)
(21,12,2)
(38,8,2)
(26,1,2)
(19,8,2)
(0,8,2)
(37,8,2)
(30,8,2)
(29,16,2)
(2,4,2)
(25,8,2)
(38,19,2)
(37,19,2)
(36,8,2)
(39,19,2)
(23,8,2)
(42,8,2)
(15,8,2)
(35,8,2)
(26,8,2)
(22,26,2)
(33,8,2)
(9,8,2)
(41,8,2)
(36,39,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,100*sizeof(struct _twoIntsStruct)
(2,break;)
(3,)
(4,1)
(5,data)
(6,data)
(7,intTwo)
(8,1)
(9,0)
(10,while(1)
(11,struct _twoIntsStruct *)
(12,(twoIntsStruct *)
(13,break;)
(14,data)
(15,100)
(16,struct _twoIntsStruct)
(17,0)
(18,RET)
(19,data = (struct _twoIntsStruct *)
(20,while(1)
(21,printStructLine((twoIntsStruct *)
(22,(struct _twoIntsStruct *)
(23,intOne)
(24,)
(25,data[0].intOne = 0)
(26,ALLOCA(100*sizeof(struct _twoIntsStruct)
(27,data[0].intOne)
(28,data = NULL)
(29,sizeof(struct _twoIntsStruct)
(30,&data[0])
(31,twoIntsStruct *)
(32,NULL)
(33,0)
(34,0)
(35,data)
(36,data[0].intTwo)
(37,data[0])
(38,data[0])
(39,data[0])
(40,data)
(41,0)
(42,data)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^