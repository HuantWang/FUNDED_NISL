-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_16_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
21,22
21,23
22,23
24,25
25,26
28,29
28,30
30,31
30,32
31,32
31,33
31,34
31,35
31,36
31,37
31,38
32,33
33,34
33,35
34,35
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
44,46
44,47
47,48
48,49
50,51
51,52
51,53
53,54
53,55
53,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
62,65
63,64
65,66
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
99,100
100,101
100,102
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
107,110
107,111
107,112
108,109
110,111
112,113
113,114
113,115
116,117
116,118
117,118
119,120
121,122
123,124
124,125
125,126
125,127
126,127
129,130
129,131
130,131
132,133
133,134
134,135
134,136
135,136
137,138
-----nextToken-----
2,4,8,10,14,16,18,23,26,27,29,35,37,39,43,45,46,49,52,54,55,57,61,64,66,67,71,73,78,79,84,85,88,92,93,95,98,104,106,109,111,114,115,118,120,122,127,128,131,136,138,139
-----computeFrom-----
12,13
12,14
21,22
21,23
59,60
59,61
69,70
69,71
82,83
82,84
86,87
86,88
101,102
101,103
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_16_bad(){    int count;    /* Initialize count */    count = -1;    while(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_16_bad()
CWE400_Resource_Exhaustion__rand_fwrite_16_bad
{    int count;    /* Initialize count */    count = -1;    while(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }
1
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
-----joern-----
(66,1,0)
(37,10,0)
(64,57,0)
(39,52,0)
(37,28,0)
(61,20,0)
(31,38,0)
(12,52,0)
(50,32,0)
(63,50,0)
(13,7,0)
(9,25,0)
(19,7,0)
(28,30,0)
(20,38,0)
(33,30,0)
(59,52,0)
(4,50,0)
(11,73,0)
(18,50,0)
(58,15,0)
(69,13,0)
(20,67,0)
(17,16,0)
(3,38,0)
(37,17,0)
(73,65,0)
(6,32,0)
(7,56,0)
(67,20,0)
(45,56,0)
(66,21,0)
(56,7,0)
(24,57,0)
(34,38,0)
(25,50,0)
(70,63,0)
(68,67,0)
(71,25,0)
(22,12,0)
(5,7,0)
(28,37,0)
(27,62,0)
(2,50,0)
(12,1,0)
(16,17,0)
(60,30,0)
(14,1,0)
(72,37,0)
(57,64,0)
(26,30,0)
(7,64,0)
(8,48,0)
(44,15,0)
(37,20,0)
(35,46,0)
(55,50,0)
(51,28,0)
(7,1,0)
(1,12,0)
(7,13,0)
(15,1,0)
(52,50,0)
(54,63,0)
(23,12,0)
(41,17,0)
(17,46,0)
(1,50,0)
(62,40,0)
(47,66,0)
(0,50,0)
(36,50,0)
(10,37,0)
(29,26,0)
(64,7,0)
(43,35,1)
(60,62,1)
(17,16,1)
(28,30,1)
(7,1,1)
(70,25,1)
(23,14,1)
(57,24,1)
(45,13,1)
(66,1,1)
(37,72,1)
(62,27,1)
(7,56,1)
(25,9,1)
(35,17,1)
(26,29,1)
(29,73,1)
(26,30,1)
(1,12,1)
(12,52,1)
(6,66,1)
(14,52,1)
(59,39,1)
(63,54,1)
(68,61,1)
(30,33,1)
(37,20,1)
(15,1,1)
(16,41,1)
(7,13,1)
(29,64,1)
(49,28,1)
(41,42,1)
(37,17,1)
(53,6,1)
(19,57,1)
(33,60,1)
(71,43,1)
(54,70,1)
(72,51,1)
(42,20,1)
(69,19,1)
(58,44,1)
(44,1,1)
(43,42,1)
(6,49,1)
(27,15,1)
(11,64,1)
(9,71,1)
(67,68,1)
(24,28,1)
(52,59,1)
(47,49,1)
(12,22,1)
(56,45,1)
(22,23,1)
(7,5,1)
(51,30,1)
(60,15,1)
(53,43,1)
(39,63,1)
(64,7,1)
(20,67,1)
(37,10,1)
(13,69,1)
(73,11,1)
(15,58,1)
(66,47,1)
(51,26,1)
(5,56,1)
(28,37,1)
(64,57,1)
(51,28,2)
(45,28,2)
(7,56,2)
(63,43,2)
(72,43,2)
(70,43,2)
(6,43,2)
(37,20,2)
(17,42,2)
(25,43,2)
(1,12,2)
(33,43,2)
(52,43,2)
(22,43,2)
(58,43,2)
(66,49,2)
(15,1,2)
(56,28,2)
(37,43,2)
(26,30,2)
(44,43,2)
(64,7,2)
(30,43,2)
(47,49,2)
(27,15,2)
(28,37,2)
(28,30,2)
(29,28,2)
(71,43,2)
(1,43,2)
(24,28,2)
(14,43,2)
(11,64,2)
(37,17,2)
(57,28,2)
(72,28,2)
(59,43,2)
(23,43,2)
(5,28,2)
(64,57,2)
(51,43,2)
(37,28,2)
(37,10,2)
(7,13,2)
(15,43,2)
(17,16,2)
(7,1,2)
(73,64,2)
(39,43,2)
(12,43,2)
(49,43,2)
(28,43,2)
(69,28,2)
(35,42,2)
(41,42,2)
(54,43,2)
(64,28,2)
(16,42,2)
(19,28,2)
(28,28,2)
(20,67,2)
(12,52,2)
(7,28,2)
(26,28,2)
(60,43,2)
(62,15,2)
(66,1,2)
(9,43,2)
(13,28,2)
-----------------------------------
(0,if (pFile)
(1,pFile = fopen(filename, "w+")
(2,for (i = 0; i < (size_t)
(3,while(1)
(4,i)
(5,pFile)
(6,break;)
(7,fwrite(SENTENCE, sizeof(char)
(8,if (strlen(SENTENCE)
(9,0)
(10,size_t)
(11,1)
(12,fopen(filename, "w+")
(13,sizeof(char)
(14,pFile)
(15,pFile == NULL)
(16,RAND32()
(17,count = RAND32()
(18,if (pFile == NULL)
(19,SENTENCE)
(20,count = -1)
(21,)
(22,"w+")
(23,filename)
(24,SENTENCE)
(25,i = 0)
(26,i++)
(27,1)
(28,i < (size_t)
(29,i)
(30,i = 0)
(31,while(1)
(32,)
(33,0)
(34,count)
(35,break;)
(36,filename)
(37,(size_t)
(38,)
(39,filename)
(40,)
(41,count)
(42,1)
(43,1)
(44,pFile)
(45,SENTENCE)
(46,)
(47,pFile)
(48,)
(49,pFile)
(50,)
(51,i)
(52,*filename = "output_bad.txt")
(53,RET)
(54,NULL)
(55,pFile)
(56,strlen(SENTENCE)
(57,strlen(SENTENCE)
(58,NULL)
(59,"output_bad.txt")
(60,i)
(61,count)
(62,exit(1)
(63,*pFile = NULL)
(64,strlen(SENTENCE)
(65,)
(66,fclose(pFile)
(67,-1)
(68,1)
(69,char)
(70,pFile)
(71,i)
(72,count)
(73,exit(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^