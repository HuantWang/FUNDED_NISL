-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad()
{
    twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
82,83
82,84
84,85
84,86
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,80,81,83,85,86
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad(){    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_16_bad
{    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(40,7,0)
(46,15,0)
(7,36,0)
(26,11,0)
(47,48,0)
(37,40,0)
(3,29,0)
(29,19,0)
(37,48,0)
(12,40,0)
(49,21,0)
(14,31,0)
(0,11,0)
(1,36,0)
(23,34,0)
(28,19,0)
(25,37,0)
(38,7,0)
(31,42,0)
(23,6,0)
(2,19,0)
(0,25,0)
(43,25,0)
(34,37,0)
(39,34,0)
(40,12,0)
(24,21,0)
(6,48,0)
(31,14,0)
(11,48,0)
(17,37,0)
(16,48,0)
(14,37,0)
(40,37,0)
(27,0,0)
(22,25,0)
(5,31,0)
(34,23,0)
(42,48,0)
(9,20,0)
(21,24,0)
(25,0,0)
(44,34,0)
(7,40,0)
(36,7,0)
(33,19,0)
(24,35,0)
(15,37,0)
(18,14,0)
(4,15,0)
(32,14,0)
(30,29,0)
(10,42,0)
(6,23,0)
(38,17,1)
(41,9,1)
(14,32,1)
(18,11,1)
(31,5,1)
(37,40,1)
(11,26,1)
(13,16,1)
(24,21,1)
(9,13,1)
(27,25,1)
(15,37,1)
(39,42,1)
(31,14,1)
(1,38,1)
(40,12,1)
(14,37,1)
(21,49,1)
(22,15,1)
(49,15,1)
(44,39,1)
(7,36,1)
(36,1,1)
(43,22,1)
(4,37,1)
(16,6,1)
(34,37,1)
(23,34,1)
(40,7,1)
(42,10,1)
(25,37,1)
(34,44,1)
(0,25,1)
(26,0,1)
(45,29,1)
(6,23,1)
(22,24,1)
(29,30,1)
(25,43,1)
(17,45,1)
(10,31,1)
(13,45,1)
(46,4,1)
(41,13,1)
(5,14,1)
(32,18,1)
(30,3,1)
(15,46,1)
(0,27,1)
(38,45,2)
(42,45,2)
(15,45,2)
(44,45,2)
(1,45,2)
(14,37,2)
(32,45,2)
(31,45,2)
(17,45,2)
(36,45,2)
(24,15,2)
(11,45,2)
(5,45,2)
(37,40,2)
(34,37,2)
(15,37,2)
(6,23,2)
(21,15,2)
(40,7,2)
(25,37,2)
(49,15,2)
(6,45,2)
(7,45,2)
(31,14,2)
(34,45,2)
(14,45,2)
(40,12,2)
(18,45,2)
(16,45,2)
(9,13,2)
(23,34,2)
(0,25,2)
(23,45,2)
(26,45,2)
(37,45,2)
(39,45,2)
(46,45,2)
(25,45,2)
(10,45,2)
(43,45,2)
(40,45,2)
(24,21,2)
(7,36,2)
(0,45,2)
(22,45,2)
(4,45,2)
(27,45,2)
-----------------------------------
(0,data[0].intOne)
(1,twoIntsStruct)
(2,while(1)
(3,data)
(4,data)
(5,intTwo)
(6,printStructLine(&data[0])
(7,calloc(100, sizeof(twoIntsStruct)
(8, sizeof(twoIntsStruct)
(9,break;)
(10,0)
(11,data[0].intOne = 0)
(12,twoIntsStruct *)
(13,1)
(14,data[0])
(15,data == NULL)
(16,break;)
(17,data)
(18,data)
(19,)
(20,)
(21,-1)
(22,data)
(23,&data[0])
(24,exit(-1)
(25,data[0])
(26,0)
(27,intOne)
(28,while(1)
(29,data = NULL)
(30,NULL)
(31,data[0].intTwo)
(32,0)
(33,data)
(34,data[0])
(35,)
(36,sizeof(twoIntsStruct)
(37,data = (twoIntsStruct *)
(38,100)
(39,data)
(40,(twoIntsStruct *)
(41,RET)
(42,data[0].intTwo = 0)
(43,0)
(44,0)
(45,1)
(46,NULL)
(47,if (data == NULL)
(48,)
(49,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^