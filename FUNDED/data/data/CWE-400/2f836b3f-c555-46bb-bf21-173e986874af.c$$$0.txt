-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFive==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
74,75
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,78,80
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFive==5)    {        /* FIX: Deallocate memory */        free(data);    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(13,0,0)
(9,10,0)
(0,21,0)
(16,18,0)
(1,39,0)
(33,9,0)
(25,28,0)
(19,18,0)
(3,22,0)
(11,6,0)
(6,11,0)
(6,22,0)
(6,10,0)
(22,3,0)
(37,5,0)
(31,0,0)
(35,12,0)
(10,6,0)
(26,21,0)
(5,12,0)
(32,5,0)
(4,30,0)
(38,22,0)
(14,1,0)
(23,42,0)
(10,12,0)
(22,6,0)
(9,35,0)
(36,21,0)
(40,12,0)
(2,37,0)
(35,9,0)
(1,14,0)
(9,5,0)
(20,14,0)
(8,23,0)
(41,9,0)
(37,10,0)
(24,3,0)
(15,28,0)
(7,21,0)
(30,10,0)
(23,10,0)
(17,10,0)
(34,30,0)
(43,37,0)
(23,0,0)
(30,34,1)
(23,8,1)
(19,16,1)
(6,11,1)
(35,9,1)
(14,20,1)
(5,32,1)
(6,22,1)
(24,38,1)
(31,13,1)
(25,0,1)
(9,10,1)
(28,15,1)
(23,10,1)
(22,3,1)
(30,10,1)
(38,17,1)
(9,5,1)
(20,30,1)
(2,1,1)
(23,0,1)
(1,14,1)
(16,35,1)
(3,24,1)
(17,28,1)
(41,33,1)
(37,43,1)
(27,18,1)
(8,18,1)
(16,28,1)
(43,2,1)
(18,19,1)
(10,6,1)
(33,5,1)
(4,10,1)
(9,41,1)
(0,31,1)
(37,10,1)
(32,37,1)
(15,25,1)
(34,4,1)
(27,23,1)
(2,30,1)
(32,28,2)
(8,18,2)
(9,5,2)
(23,10,2)
(6,22,2)
(41,28,2)
(10,28,2)
(24,28,2)
(4,28,2)
(6,11,2)
(20,30,2)
(5,28,2)
(23,0,2)
(35,28,2)
(6,28,2)
(3,28,2)
(37,28,2)
(34,28,2)
(38,28,2)
(9,28,2)
(14,30,2)
(30,28,2)
(30,10,2)
(35,9,2)
(10,6,2)
(1,30,2)
(22,28,2)
(37,10,2)
(2,28,2)
(23,18,2)
(9,10,2)
(22,3,2)
(1,14,2)
(17,28,2)
(33,28,2)
(43,28,2)
-----------------------------------
(0,data = NULL)
(1,exit(-1)
(2,data)
(3,sizeof(int)
(4,data)
(5,data[0] = 5)
(6,(int *)
(7,if(globalFive==5)
(8,data)
(9,data[0])
(10,data = (int *)
(11,int *)
(12,)
(13,data)
(14,-1)
(15,5)
(16,globalFive)
(17,data)
(18,globalFive==5)
(19,5)
(20,1)
(21,)
(22,calloc(100, sizeof(int)
(23,free(data)
(24,int)
(25,globalFive)
(26,if(globalFive==5)
(27,RET)
(28,globalFive==5)
(29, sizeof(int)
(30,data == NULL)
(31,NULL)
(32,5)
(33,data)
(34,NULL)
(35,printIntLine(data[0])
(36,data)
(37,data[0])
(38,100)
(39,)
(40,if (data == NULL)
(41,0)
(42,)
(43,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^