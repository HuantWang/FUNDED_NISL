-----label-----
0
-----code-----
static struct rack_sendmap *
rack_alloc(struct tcp_rack *rack)
{
	struct rack_sendmap *rsm;

	counter_u64_add(rack_to_alloc, 1);
	rack->r_ctl.rc_num_maps_alloced++;
	rsm = uma_zalloc(rack_zone, M_NOWAIT);
	if (rsm) {
		return (rsm);
	}
	if (rack->rc_free_cnt) {
		counter_u64_add(rack_to_alloc_emerg, 1);
		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);
		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);
		rack->rc_free_cnt--;
		return (rsm);
	}
	return (NULL);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
14,15
15,16
15,17
16,17
18,19
18,20
21,22
22,23
22,24
22,25
23,24
25,26
28,29
29,30
30,31
30,32
31,32
31,33
32,33
36,37
37,38
37,39
38,39
40,41
40,42
40,43
41,42
43,44
45,46
47,48
47,49
48,49
50,51
51,52
52,53
53,54
55,56
55,57
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
77,78
77,79
78,79
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
87,89
88,89
88,90
89,90
93,94
95,96
97,98
98,99
99,100
99,101
100,101
103,104
104,105
105,106
107,108
108,109
109,110
-----nextToken-----
3,5,6,9,11,12,17,19,20,24,26,27,33,34,35,39,42,44,46,49,54,58,59,64,66,67,71,74,79,80,81,85,90,91,92,94,96,101,102,106,110
-----computeFrom-----
37,38
37,39
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static struct rack_sendmap *rack_alloc(struct tcp_rack *rack){	struct rack_sendmap *rsm;	counter_u64_add(rack_to_alloc, 1);	rack->r_ctl.rc_num_maps_alloced++;	rsm = uma_zalloc(rack_zone, M_NOWAIT);	if (rsm) {		return (rsm);	}	if (rack->rc_free_cnt) {		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		return (rsm);	}	return (NULL);}
static struct rack_sendmap
rack_sendmap
*rack_alloc(struct tcp_rack *rack)
*
rack_alloc
struct tcp_rack *rack
struct tcp_rack
tcp_rack
*rack
*
rack
{	struct rack_sendmap *rsm;	counter_u64_add(rack_to_alloc, 1);	rack->r_ctl.rc_num_maps_alloced++;	rsm = uma_zalloc(rack_zone, M_NOWAIT);	if (rsm) {		return (rsm);	}	if (rack->rc_free_cnt) {		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		return (rsm);	}	return (NULL);}
struct rack_sendmap *rsm;
struct rack_sendmap *rsm;
struct rack_sendmap
rack_sendmap
*rsm
*
rsm
counter_u64_add(rack_to_alloc, 1);
counter_u64_add(rack_to_alloc, 1)
counter_u64_add
counter_u64_add
rack_to_alloc
rack_to_alloc
1
rack->r_ctl.rc_num_maps_alloced++;
rack->r_ctl.rc_num_maps_alloced++
rack->r_ctl.rc_num_maps_alloced
rack->r_ctl
rack
rack
r_ctl
rc_num_maps_alloced
rsm = uma_zalloc(rack_zone, M_NOWAIT);
rsm = uma_zalloc(rack_zone, M_NOWAIT)
rsm
rsm
uma_zalloc(rack_zone, M_NOWAIT)
uma_zalloc
uma_zalloc
rack_zone
rack_zone
M_NOWAIT
M_NOWAIT
if (rsm) {		return (rsm);	}
rsm
rsm
{		return (rsm);	}
return (rsm);
(rsm)
rsm
rsm
if (rack->rc_free_cnt) {		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		return (rsm);	}
rack->rc_free_cnt
rack
rack
rc_free_cnt
{		counter_u64_add(rack_to_alloc_emerg, 1);		rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);		TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);		rack->rc_free_cnt--;		return (rsm);	}
counter_u64_add(rack_to_alloc_emerg, 1);
counter_u64_add(rack_to_alloc_emerg, 1)
counter_u64_add
counter_u64_add
rack_to_alloc_emerg
rack_to_alloc_emerg
1
rsm = TAILQ_FIRST(&rack->r_ctl.rc_free);
rsm = TAILQ_FIRST(&rack->r_ctl.rc_free)
rsm
rsm
TAILQ_FIRST(&rack->r_ctl.rc_free)
TAILQ_FIRST
TAILQ_FIRST
&rack->r_ctl.rc_free
rack->r_ctl.rc_free
rack->r_ctl
rack
rack
r_ctl
rc_free
TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next);
TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next)
TAILQ_REMOVE
TAILQ_REMOVE
&rack->r_ctl.rc_free
rack->r_ctl.rc_free
rack->r_ctl
rack
rack
r_ctl
rc_free
rsm
rsm
r_next
r_next
rack->rc_free_cnt--;
rack->rc_free_cnt--
rack->rc_free_cnt
rack
rack
rc_free_cnt
return (rsm);
(rsm)
rsm
rsm
return (NULL);
(NULL)
NULL
NULL
-----joern-----
(11,36,0)
(22,16,0)
(20,54,0)
(8,27,0)
(12,44,0)
(8,0,0)
(56,40,0)
(40,27,0)
(5,46,0)
(55,46,0)
(2,54,0)
(48,34,0)
(56,48,0)
(27,8,0)
(53,49,0)
(6,53,0)
(43,1,0)
(4,24,0)
(26,17,0)
(0,8,0)
(3,14,0)
(31,24,0)
(44,34,0)
(23,49,0)
(46,5,0)
(25,31,0)
(17,39,0)
(36,39,0)
(30,34,0)
(37,36,0)
(24,31,0)
(18,16,0)
(54,16,0)
(21,5,0)
(50,46,0)
(51,34,0)
(38,43,0)
(7,18,0)
(13,27,0)
(28,29,0)
(10,31,0)
(42,44,0)
(47,49,0)
(22,36,0)
(52,28,0)
(50,34,0)
(0,53,0)
(18,29,0)
(9,5,0)
(40,16,0)
(41,18,0)
(24,34,0)
(28,17,0)
(45,14,0)
(18,27,0)
(29,18,0)
(33,48,0)
(46,50,0)
(49,53,0)
(56,43,0)
(49,39,0)
(5,39,0)
(36,22,0)
(27,16,0)
(19,34,0)
(53,0,0)
(35,17,0)
(43,24,0)
(17,28,0)
(29,28,0)
(14,39,0)
(32,40,0)
(31,25,1)
(44,42,1)
(53,49,1)
(5,21,1)
(42,12,1)
(24,31,1)
(22,36,1)
(40,27,1)
(13,54,1)
(37,11,1)
(32,22,1)
(40,32,1)
(28,52,1)
(18,7,1)
(35,27,1)
(15,24,1)
(38,15,1)
(33,14,1)
(17,26,1)
(0,53,1)
(53,6,1)
(41,29,1)
(28,17,1)
(46,55,1)
(49,39,1)
(9,44,1)
(23,13,1)
(18,27,1)
(8,0,1)
(17,39,1)
(46,5,1)
(7,41,1)
(56,48,1)
(29,28,1)
(20,2,1)
(27,8,1)
(56,40,1)
(50,46,1)
(36,37,1)
(26,35,1)
(6,49,1)
(43,24,1)
(25,10,1)
(4,50,1)
(14,39,1)
(52,17,1)
(43,38,1)
(47,23,1)
(5,39,1)
(45,3,1)
(11,18,1)
(48,33,1)
(10,4,1)
(36,39,1)
(21,9,1)
(54,20,1)
(3,15,1)
(55,5,1)
(14,45,1)
(2,14,1)
(18,29,1)
(49,47,1)
(56,43,1)
(47,14,2)
(43,24,2)
(0,14,2)
(17,14,2)
(29,28,2)
(11,14,2)
(8,0,2)
(56,43,2)
(36,39,2)
(17,39,2)
(27,14,2)
(24,31,2)
(28,14,2)
(33,14,2)
(52,14,2)
(38,15,2)
(14,15,2)
(54,14,2)
(6,14,2)
(48,14,2)
(53,49,2)
(0,53,2)
(3,15,2)
(40,27,2)
(45,15,2)
(37,14,2)
(28,17,2)
(50,46,2)
(56,48,2)
(8,14,2)
(18,27,2)
(26,14,2)
(23,14,2)
(35,14,2)
(29,14,2)
(36,14,2)
(43,15,2)
(20,14,2)
(41,14,2)
(53,14,2)
(22,36,2)
(18,14,2)
(40,14,2)
(49,39,2)
(27,8,2)
(13,14,2)
(56,40,2)
(7,14,2)
(14,39,2)
(2,14,2)
(18,29,2)
(32,14,2)
(22,14,2)
(49,14,2)
(46,5,2)
(5,39,2)
-----------------------------------
(0,&rack->r_ctl.rc_free)
(1,)
(2,rack_to_alloc_emerg)
(3,rack)
(4,rsm)
(5,rack->r_ctl)
(6,rc_free)
(7,r_next)
(8,TAILQ_FIRST(&rack->r_ctl.rc_free)
(9,rack)
(10,rack_zone)
(11,rack)
(12,rack_to_alloc)
(13,rsm)
(14,rack->rc_free_cnt)
(15,rsm)
(16,)
(17,rack->r_ctl)
(18,TAILQ_REMOVE(&rack->r_ctl.rc_free, rsm, r_next)
(19,if (rack->rc_free_cnt)
(20,1)
(21,r_ctl)
(22,rack->rc_free_cnt--)
(23,rack)
(24,rsm = uma_zalloc(rack_zone, M_NOWAIT)
(25,M_NOWAIT)
(26,r_ctl)
(27,rsm = TAILQ_FIRST(&rack->r_ctl.rc_free)
(28,rack->r_ctl.rc_free)
(29,&rack->r_ctl.rc_free)
(30,rsm)
(31,uma_zalloc(rack_zone, M_NOWAIT)
(32,rsm)
(33,NULL)
(34,)
(35,rack)
(36,rack->rc_free_cnt)
(37,rc_free_cnt)
(38,rsm)
(39,struct tcp_rack *rack)
(40,return (rsm)
(41,rsm)
(42,1)
(43,return (rsm)
(44,counter_u64_add(rack_to_alloc, 1)
(45,rc_free_cnt)
(46,rack->r_ctl.rc_num_maps_alloced)
(47,r_ctl)
(48,return (NULL)
(49,rack->r_ctl)
(50,rack->r_ctl.rc_num_maps_alloced++)
(51,if (rsm)
(52,rc_free)
(53,rack->r_ctl.rc_free)
(54,counter_u64_add(rack_to_alloc_emerg, 1)
(55,rc_num_maps_alloced)
(56,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^