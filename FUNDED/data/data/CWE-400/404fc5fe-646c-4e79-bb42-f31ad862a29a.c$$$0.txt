-----label-----
0
-----code-----
static void goodG2B1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
29,33
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
85,86
87,88
-----nextToken-----
2,4,9,11,12,16,18,22,27,28,33,37,39,42,44,48,49,55,56,57,58,64,65,66,67,71,75,77,81,82,86,88
-----computeFrom-----
14,15
14,16
31,32
31,33
43,44
43,45
51,52
51,53
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(33,21,0)
(39,27,0)
(21,12,0)
(29,34,0)
(42,30,0)
(37,33,0)
(27,23,0)
(31,17,0)
(12,1,0)
(2,27,0)
(19,30,0)
(4,36,0)
(35,1,0)
(16,15,0)
(14,8,0)
(30,37,0)
(39,34,0)
(12,21,0)
(33,43,0)
(3,17,0)
(24,37,0)
(32,17,0)
(30,11,0)
(15,37,0)
(27,39,0)
(37,34,0)
(15,23,0)
(31,18,0)
(1,35,0)
(23,15,0)
(36,8,0)
(6,11,0)
(5,25,0)
(33,37,0)
(20,31,0)
(11,29,0)
(1,12,0)
(7,36,0)
(21,33,0)
(11,30,0)
(17,31,0)
(27,2,0)
(22,8,0)
(10,18,0)
(17,37,0)
(43,33,0)
(0,8,0)
(41,5,0)
(38,29,0)
(28,15,0)
(9,12,0)
(23,27,0)
(18,34,0)
(40,36,1)
(42,18,1)
(12,1,1)
(16,29,1)
(31,20,1)
(27,23,1)
(5,41,1)
(6,30,1)
(11,6,1)
(3,32,1)
(28,16,1)
(15,37,1)
(19,42,1)
(33,43,1)
(1,9,1)
(29,38,1)
(31,17,1)
(1,35,1)
(17,37,1)
(39,27,1)
(30,19,1)
(38,11,1)
(33,21,1)
(41,40,1)
(26,13,1)
(15,28,1)
(10,31,1)
(37,33,1)
(24,40,1)
(13,5,1)
(18,10,1)
(30,37,1)
(36,7,1)
(9,24,1)
(23,15,1)
(32,37,1)
(27,2,1)
(13,39,1)
(21,12,1)
(11,30,1)
(7,4,1)
(20,17,1)
(17,3,1)
(12,1,2)
(23,15,2)
(39,27,2)
(31,17,2)
(27,23,2)
(12,40,2)
(41,40,2)
(19,40,2)
(17,40,2)
(38,40,2)
(11,40,2)
(37,40,2)
(9,40,2)
(27,2,2)
(37,33,2)
(18,40,2)
(23,40,2)
(21,12,2)
(24,40,2)
(11,30,2)
(30,37,2)
(15,37,2)
(1,35,2)
(33,40,2)
(33,43,2)
(16,40,2)
(29,40,2)
(30,40,2)
(5,40,2)
(28,40,2)
(31,40,2)
(3,40,2)
(32,40,2)
(10,40,2)
(1,40,2)
(6,40,2)
(33,21,2)
(42,40,2)
(21,40,2)
(20,40,2)
(17,37,2)
(39,40,2)
(27,40,2)
(15,40,2)
-----------------------------------
(0,data)
(1,sizeof(struct _twoIntsStruct)
(2,twoIntsStruct *)
(3,0)
(4,data)
(5,printLine("Benign, fixed string")
(6,intTwo)
(7,NULL)
(8,)
(9,100)
(10,0)
(11,data[0].intTwo)
(12,100*sizeof(struct _twoIntsStruct)
(13,globalReturnsTrue()
(14,if(globalReturnsFalse()
(15,data[0])
(16,data)
(17,data[0])
(18,data[0].intOne = 0)
(19,0)
(20,intOne)
(21,ALLOCA(100*sizeof(struct _twoIntsStruct)
(22,if(globalReturnsTrue()
(23,&data[0])
(24,data)
(25,)
(26,RET)
(27,(twoIntsStruct *)
(28,0)
(29,data[0].intTwo = 0)
(30,data[0])
(31,data[0].intOne)
(32,data)
(33,(struct _twoIntsStruct *)
(34,)
(35,struct _twoIntsStruct)
(36,data = NULL)
(37,data = (struct _twoIntsStruct *)
(38,0)
(39,printStructLine((twoIntsStruct *)
(40,globalReturnsFalse()
(41,"Benign, fixed string")
(42,data)
(43,struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^