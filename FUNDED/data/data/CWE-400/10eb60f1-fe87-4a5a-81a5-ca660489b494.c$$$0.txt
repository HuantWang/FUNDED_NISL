-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
67,70
68,69
70,71
71,72
72,73
72,74
73,74
76,77
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,69,74,75,80,82
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,33,0)
(9,18,0)
(31,26,0)
(23,17,0)
(5,39,0)
(36,27,0)
(30,37,0)
(23,19,0)
(14,39,0)
(12,42,0)
(22,2,0)
(4,29,0)
(35,5,0)
(33,25,0)
(29,33,0)
(0,17,0)
(11,29,0)
(26,5,0)
(10,37,0)
(13,30,0)
(34,29,0)
(42,1,0)
(3,17,0)
(39,14,0)
(23,5,0)
(38,18,0)
(21,23,0)
(39,30,0)
(28,18,0)
(41,26,0)
(24,2,0)
(40,27,0)
(29,4,0)
(22,15,0)
(5,25,0)
(4,25,0)
(27,5,0)
(6,25,0)
(29,5,0)
(30,39,0)
(37,30,0)
(17,18,0)
(39,5,0)
(26,33,0)
(2,22,0)
(12,16,1)
(36,5,1)
(17,3,1)
(21,16,1)
(34,33,1)
(2,24,1)
(4,29,1)
(23,17,1)
(7,26,1)
(37,10,1)
(26,31,1)
(22,2,1)
(41,27,1)
(41,22,1)
(10,13,1)
(11,34,1)
(27,5,1)
(23,21,1)
(40,36,1)
(13,35,1)
(24,27,1)
(33,7,1)
(20,42,1)
(8,17,1)
(42,12,1)
(29,5,1)
(39,14,1)
(35,8,1)
(20,23,1)
(5,39,1)
(39,30,1)
(16,8,1)
(26,5,1)
(23,5,1)
(30,37,1)
(31,41,1)
(3,0,1)
(29,33,1)
(29,11,1)
(16,4,1)
(27,40,1)
(26,5,2)
(21,16,2)
(41,8,2)
(39,30,2)
(35,8,2)
(13,8,2)
(27,8,2)
(29,33,2)
(2,27,2)
(10,8,2)
(30,8,2)
(22,2,2)
(27,5,2)
(4,8,2)
(7,8,2)
(24,27,2)
(33,8,2)
(37,8,2)
(39,14,2)
(26,8,2)
(23,16,2)
(34,8,2)
(5,39,2)
(29,5,2)
(4,29,2)
(12,16,2)
(5,8,2)
(42,16,2)
(29,8,2)
(30,37,2)
(39,8,2)
(36,8,2)
(22,27,2)
(11,8,2)
(23,5,2)
(40,8,2)
(23,17,2)
(31,8,2)
-----------------------------------
(0,data)
(1,)
(2,-1)
(3,NULL)
(4,printIntLine(data[0])
(5,data = (int *)
(6,if (data == NULL)
(7,5)
(8,globalTrue)
(9,data)
(10,int)
(11,0)
(12,"Benign, fixed string")
(13,100)
(14,int *)
(15,)
(16,globalFalse)
(17,data = NULL)
(18,)
(19,)
(20,RET)
(21,data)
(22,exit(-1)
(23,free(data)
(24,1)
(25,)
(26,data[0])
(27,data == NULL)
(28,if(globalFalse)
(29,data[0])
(30,calloc(100, sizeof(int)
(31,0)
(32, sizeof(int)
(33,data[0] = 5)
(34,data)
(35,data)
(36,data)
(37,sizeof(int)
(38,if(globalTrue)
(39,(int *)
(40,NULL)
(41,data)
(42,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^