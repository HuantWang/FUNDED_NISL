-----label-----
1
-----code-----
static int
at_context_queue_packet(struct context *ctx, struct fw_packet *packet)
{
	struct fw_ohci *ohci = ctx->ohci;
	dma_addr_t d_bus, uninitialized_var(payload_bus);
	struct driver_data *driver_data;
	struct descriptor *d, *last;
	__le32 *header;
	int z, tcode;
	u32 reg;

	d = context_get_descriptors(ctx, 4, &d_bus);
	if (d == NULL) {
		packet->ack = RCODE_SEND_ERROR;
		return -1;
	}

	d[0].control   = cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE);
	d[0].res_count = cpu_to_le16(packet->timestamp);

	/*
	 * The DMA format for asyncronous link packets is different
	 * from the IEEE1394 layout, so shift the fields around
	 * accordingly.  If header_length is 8, it's a PHY packet, to
	 * which we need to prepend an extra quadlet.
	 */

	header = (__le32 *) &d[1];
	if (packet->header_length > 8) {
		header[0] = cpu_to_le32((packet->header[0] & 0xffff) |
					(packet->speed << 16));
		header[1] = cpu_to_le32((packet->header[1] & 0xffff) |
					(packet->header[0] & 0xffff0000));
		header[2] = cpu_to_le32(packet->header[2]);

		tcode = (packet->header[0] >> 4) & 0x0f;
		if (TCODE_IS_BLOCK_PACKET(tcode))
			header[3] = cpu_to_le32(packet->header[3]);
		else
			header[3] = (__force __le32) packet->header[3];

		d[0].req_count = cpu_to_le16(packet->header_length);
	} else {
		header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |
					(packet->speed << 16));
		header[1] = cpu_to_le32(packet->header[0]);
		header[2] = cpu_to_le32(packet->header[1]);
		d[0].req_count = cpu_to_le16(12);
	}

	driver_data = (struct driver_data *) &d[3];
	driver_data->packet = packet;
	packet->driver_data = driver_data;

	if (packet->payload_length > 0) {
		payload_bus =
			dma_map_single(ohci->card.device, packet->payload,
				       packet->payload_length, DMA_TO_DEVICE);
		if (dma_mapping_error(ohci->card.device, payload_bus)) {
			packet->ack = RCODE_SEND_ERROR;
			return -1;
		}
		packet->payload_bus = payload_bus;

		d[2].req_count    = cpu_to_le16(packet->payload_length);
		d[2].data_address = cpu_to_le32(payload_bus);
		last = &d[2];
		z = 3;
	} else {
		last = &d[0];
		z = 2;
	}

	last->control |= cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |
				     DESCRIPTOR_IRQ_ALWAYS |
				     DESCRIPTOR_BRANCH_ALWAYS);

	/*
	 * If the controller and packet generations don't match, we need to
	 * bail out and try again.  If IntEvent.busReset is set, the AT context
	 * is halted, so appending to the context and trying to run it is
	 * futile.  Most controllers do the right thing and just flush the AT
	 * queue (per section 7.2.3.2 of the OHCI 1.1 specification), but
	 * some controllers (like a JMicron JMB381 PCI-e) misbehave and wind
	 * up stalling out.  So we just bail out in software and try again
	 * later, and everyone is happy.
	 * FIXME: Document how the locking works.
	 */
	if (ohci->generation != packet->generation ||
	    reg_read(ohci, OHCI1394_IntEventSet) & OHCI1394_busReset) {
		if (packet->payload_length > 0)
			dma_unmap_single(ohci->card.device, payload_bus,
					 packet->payload_length, DMA_TO_DEVICE);
		packet->ack = RCODE_GENERATION;
		return -1;
	}

	context_append(ctx, d, z, 4 - z);

	/* If the context isn't already running, start it up. */
	reg = reg_read(ctx->ohci, CONTROL_SET(ctx->regs));
	if ((reg & CONTEXT_RUN) == 0)
		context_run(ctx, 0);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
49,52
50,51
52,53
52,54
55,56
55,57
58,59
59,60
59,61
60,61
62,63
62,64
65,66
66,67
66,68
66,69
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
82,84
82,85
82,86
83,84
85,86
88,89
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
98,99
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
109,110
110,111
110,112
111,112
111,113
112,113
112,114
113,114
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
130,131
130,132
131,132
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
141,143
142,143
142,144
143,144
145,146
147,148
148,149
148,150
149,150
152,153
152,154
152,155
153,154
153,155
154,155
154,156
155,156
159,160
159,161
159,162
159,163
159,164
159,165
160,161
161,162
161,163
162,163
162,164
163,164
166,167
166,168
167,168
169,170
169,171
170,171
171,172
171,173
172,173
172,174
173,174
173,175
174,175
179,180
180,181
180,182
181,182
181,183
182,183
186,187
187,188
187,189
188,189
188,190
189,190
192,193
192,194
193,194
195,196
195,197
196,197
197,198
197,199
198,199
198,200
199,200
199,201
200,201
205,206
206,207
206,208
207,208
207,209
208,209
208,210
209,210
214,215
215,216
215,217
216,217
216,218
217,218
220,221
220,222
221,222
223,224
223,225
224,225
224,226
225,226
229,230
230,231
230,232
231,232
233,234
233,235
234,235
235,236
235,237
236,237
236,238
237,238
237,239
238,239
244,245
245,246
246,247
246,248
247,248
247,249
248,249
248,250
249,250
253,254
253,255
254,255
256,257
256,258
257,258
260,261
260,262
260,263
260,264
261,262
262,263
262,264
263,264
263,265
264,265
267,268
267,269
268,269
270,271
270,272
271,272
272,273
272,274
273,274
276,277
277,278
277,279
278,279
278,280
279,280
283,284
284,285
284,286
285,286
285,287
286,287
289,290
289,291
290,291
292,293
292,294
293,294
293,295
294,295
298,299
299,300
299,301
300,301
300,302
301,302
304,305
304,306
305,306
307,308
307,309
308,309
308,310
309,310
313,314
314,315
314,316
315,316
315,317
316,317
316,318
317,318
321,322
321,323
322,323
325,326
326,327
326,328
327,328
329,330
329,331
330,331
330,332
331,332
333,334
335,336
336,337
336,338
337,338
340,341
341,342
341,343
342,343
342,344
343,344
346,347
348,349
349,350
349,351
350,351
350,352
351,352
354,355
356,357
356,358
356,359
357,358
357,359
358,359
358,360
359,360
363,364
363,365
363,366
363,367
363,368
363,369
363,370
364,365
365,366
365,367
366,367
368,369
368,370
368,371
368,372
368,373
369,370
371,372
371,373
372,373
372,374
373,374
377,378
377,379
378,379
381,382
381,383
382,383
385,386
387,388
387,389
388,389
388,390
388,391
389,390
391,392
391,393
392,393
392,394
393,394
397,398
399,400
399,401
400,401
401,402
401,403
402,403
402,404
403,404
406,407
408,409
409,410
411,412
412,413
412,414
413,414
413,415
414,415
417,418
419,420
420,421
420,422
421,422
421,423
422,423
422,424
423,424
427,428
427,429
428,429
430,431
430,432
431,432
434,435
435,436
435,437
436,437
436,438
437,438
437,439
438,439
442,443
442,444
443,444
445,446
447,448
448,449
448,450
449,450
451,452
452,453
452,454
453,454
456,457
457,458
457,459
458,459
461,462
461,463
462,463
463,464
463,465
464,465
466,467
467,468
467,469
468,469
471,472
472,473
472,474
473,474
476,477
477,478
477,479
478,479
478,480
479,480
482,483
482,484
483,484
485,486
485,487
486,487
486,488
487,488
489,490
491,492
493,494
493,495
494,495
494,496
495,496
495,497
496,497
496,498
497,498
500,501
500,502
501,502
504,505
504,506
505,506
505,507
505,508
506,507
508,509
510,511
512,513
514,515
514,516
514,517
515,516
515,517
516,517
516,518
517,518
517,519
518,519
522,523
523,524
523,525
523,526
523,527
523,528
524,525
526,527
526,528
527,528
527,529
528,529
532,533
534,535
534,536
535,536
538,539
540,541
541,542
541,543
542,543
542,544
543,544
546,547
548,549
549,550
551,552
552,553
552,554
552,555
552,556
552,557
553,554
555,556
557,558
559,560
561,562
561,563
563,564
565,566
566,567
566,568
567,568
569,570
569,571
569,572
570,571
572,573
572,574
573,574
576,577
576,578
577,578
579,580
579,581
580,581
583,584
583,585
584,585
584,586
585,586
586,587
586,588
587,588
589,590
592,593
593,594
593,595
593,596
594,595
596,597
599,600
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,29,33,35,37,40,44,46,47,51,53,54,56,57,61,63,64,67,69,71,75,77,81,84,86,87,90,94,96,102,103,105,108,114,115,116,119,121,127,128,129,132,135,136,140,144,146,150,151,156,157,158,164,165,168,175,176,177,178,183,184,185,190,191,194,201,202,203,204,210,211,212,213,218,219,222,226,227,228,232,239,240,241,242,243,250,251,252,255,258,259,265,266,269,274,275,280,281,282,287,288,291,295,296,297,302,303,306,310,311,312,318,319,320,323,324,328,332,334,338,339,344,345,347,352,353,355,360,361,362,367,370,374,375,376,379,380,383,384,386,390,394,395,396,398,404,405,407,410,415,416,418,424,425,426,429,432,433,439,440,441,444,446,450,454,455,459,460,465,469,470,474,475,480,481,484,488,490,492,498,499,502,503,507,509,511,513,519,520,521,525,529,530,531,533,536,537,539,544,545,547,550,554,556,558,560,562,564,568,571,574,575,578,581,582,588,590,591,595,597,598,600
-----computeFrom-----
79,80
79,81
92,93
92,94
99,100
99,101
110,111
110,112
123,124
123,125
138,139
138,140
153,154
153,155
161,162
161,163
169,170
169,171
171,172
171,173
180,181
180,182
187,188
187,189
195,196
195,197
197,198
197,199
206,207
206,208
215,216
215,217
230,231
230,232
233,234
233,235
235,236
235,237
246,247
246,248
262,263
262,264
270,271
270,272
272,273
272,274
277,278
277,279
284,285
284,286
299,300
299,301
314,315
314,316
326,327
326,328
341,342
341,343
349,350
349,351
357,358
357,359
365,366
365,367
401,402
401,403
412,413
412,414
420,421
420,422
435,436
435,437
448,449
448,450
457,458
457,459
463,464
463,465
472,473
472,474
477,478
477,479
485,486
485,487
486,487
486,488
494,495
494,496
495,496
495,497
504,505
504,506
516,517
516,518
541,542
541,543
561,562
561,563
566,567
566,568
584,585
584,586
586,587
586,588
-----guardedBy-----
157,259
156,258
360,432
361,433
509,529
502,544
519,536
520,537
-----guardedByNegation-----
156,310
-----lastLexicalUse-----
156,310
-----jump-----
156,310
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ConstructorInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static intat_context_queue_packet(struct context *ctx, struct fw_packet *packet){	struct fw_ohci *ohci = ctx->ohci;	dma_addr_t d_bus, uninitialized_var(payload_bus);	struct driver_data *driver_data;	struct descriptor *d, *last;	__le32 *header;	int z, tcode;	u32 reg;	d = context_get_descriptors(ctx, 4, &d_bus);	if (d == NULL) {		packet->ack = RCODE_SEND_ERROR;		return -1;	}	d[0].control   = cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE);	d[0].res_count = cpu_to_le16(packet->timestamp);	/*	 * The DMA format for asyncronous link packets is different	 * from the IEEE1394 layout, so shift the fields around	 * accordingly.  If header_length is 8, it's a PHY packet, to	 * which we need to prepend an extra quadlet.	 */	header = (__le32 *) &d[1];	if (packet->header_length > 8) {		header[0] = cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16));		header[1] = cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000));		header[2] = cpu_to_le32(packet->header[2]);		tcode = (packet->header[0] >> 4) & 0x0f;		if (TCODE_IS_BLOCK_PACKET(tcode))			header[3] = cpu_to_le32(packet->header[3]);		else			header[3] = (__force __le32) packet->header[3];		d[0].req_count = cpu_to_le16(packet->header_length);	} else {		header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16));		header[1] = cpu_to_le32(packet->header[0]);		header[2] = cpu_to_le32(packet->header[1]);		d[0].req_count = cpu_to_le16(12);	}	driver_data = (struct driver_data *) &d[3];	driver_data->packet = packet;	packet->driver_data = driver_data;	if (packet->payload_length > 0) {		payload_bus =			dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE);		if (dma_mapping_error(ohci->card.device, payload_bus)) {			packet->ack = RCODE_SEND_ERROR;			return -1;		}		packet->payload_bus = payload_bus;		d[2].req_count    = cpu_to_le16(packet->payload_length);		d[2].data_address = cpu_to_le32(payload_bus);		last = &d[2];		z = 3;	} else {		last = &d[0];		z = 2;	}	last->control |= cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS |				     DESCRIPTOR_BRANCH_ALWAYS);	/*	 * If the controller and packet generations don't match, we need to	 * bail out and try again.  If IntEvent.busReset is set, the AT context	 * is halted, so appending to the context and trying to run it is	 * futile.  Most controllers do the right thing and just flush the AT	 * queue (per section 7.2.3.2 of the OHCI 1.1 specification), but	 * some controllers (like a JMicron JMB381 PCI-e) misbehave and wind	 * up stalling out.  So we just bail out in software and try again	 * later, and everyone is happy.	 * FIXME: Document how the locking works.	 */	if (ohci->generation != packet->generation ||	    reg_read(ohci, OHCI1394_IntEventSet) & OHCI1394_busReset) {		if (packet->payload_length > 0)			dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE);		packet->ack = RCODE_GENERATION;		return -1;	}	context_append(ctx, d, z, 4 - z);	/* If the context isn't already running, start it up. */	reg = reg_read(ctx->ohci, CONTROL_SET(ctx->regs));	if ((reg & CONTEXT_RUN) == 0)		context_run(ctx, 0);	return 0;}
static int
at_context_queue_packet(struct context *ctx, struct fw_packet *packet)
at_context_queue_packet
struct context *ctx
struct context
context
*ctx
*
ctx
struct fw_packet *packet
struct fw_packet
fw_packet
*packet
*
packet
{	struct fw_ohci *ohci = ctx->ohci;	dma_addr_t d_bus, uninitialized_var(payload_bus);	struct driver_data *driver_data;	struct descriptor *d, *last;	__le32 *header;	int z, tcode;	u32 reg;	d = context_get_descriptors(ctx, 4, &d_bus);	if (d == NULL) {		packet->ack = RCODE_SEND_ERROR;		return -1;	}	d[0].control   = cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE);	d[0].res_count = cpu_to_le16(packet->timestamp);	/*	 * The DMA format for asyncronous link packets is different	 * from the IEEE1394 layout, so shift the fields around	 * accordingly.  If header_length is 8, it's a PHY packet, to	 * which we need to prepend an extra quadlet.	 */	header = (__le32 *) &d[1];	if (packet->header_length > 8) {		header[0] = cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16));		header[1] = cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000));		header[2] = cpu_to_le32(packet->header[2]);		tcode = (packet->header[0] >> 4) & 0x0f;		if (TCODE_IS_BLOCK_PACKET(tcode))			header[3] = cpu_to_le32(packet->header[3]);		else			header[3] = (__force __le32) packet->header[3];		d[0].req_count = cpu_to_le16(packet->header_length);	} else {		header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16));		header[1] = cpu_to_le32(packet->header[0]);		header[2] = cpu_to_le32(packet->header[1]);		d[0].req_count = cpu_to_le16(12);	}	driver_data = (struct driver_data *) &d[3];	driver_data->packet = packet;	packet->driver_data = driver_data;	if (packet->payload_length > 0) {		payload_bus =			dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE);		if (dma_mapping_error(ohci->card.device, payload_bus)) {			packet->ack = RCODE_SEND_ERROR;			return -1;		}		packet->payload_bus = payload_bus;		d[2].req_count    = cpu_to_le16(packet->payload_length);		d[2].data_address = cpu_to_le32(payload_bus);		last = &d[2];		z = 3;	} else {		last = &d[0];		z = 2;	}	last->control |= cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS |				     DESCRIPTOR_BRANCH_ALWAYS);	/*	 * If the controller and packet generations don't match, we need to	 * bail out and try again.  If IntEvent.busReset is set, the AT context	 * is halted, so appending to the context and trying to run it is	 * futile.  Most controllers do the right thing and just flush the AT	 * queue (per section 7.2.3.2 of the OHCI 1.1 specification), but	 * some controllers (like a JMicron JMB381 PCI-e) misbehave and wind	 * up stalling out.  So we just bail out in software and try again	 * later, and everyone is happy.	 * FIXME: Document how the locking works.	 */	if (ohci->generation != packet->generation ||	    reg_read(ohci, OHCI1394_IntEventSet) & OHCI1394_busReset) {		if (packet->payload_length > 0)			dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE);		packet->ack = RCODE_GENERATION;		return -1;	}	context_append(ctx, d, z, 4 - z);	/* If the context isn't already running, start it up. */	reg = reg_read(ctx->ohci, CONTROL_SET(ctx->regs));	if ((reg & CONTEXT_RUN) == 0)		context_run(ctx, 0);	return 0;}
struct fw_ohci *ohci = ctx->ohci;
struct fw_ohci *ohci = ctx->ohci;
struct fw_ohci
fw_ohci
*ohci = ctx->ohci
*
ohci
= ctx->ohci
ctx->ohci
ctx
ctx
ohci
dma_addr_t d_bus, uninitialized_var(payload_bus);
dma_addr_t d_bus, uninitialized_var(payload_bus);
dma_addr_t
dma_addr_t
d_bus
d_bus
uninitialized_var(payload_bus)
uninitialized_var
(payload_bus)
payload_bus
payload_bus
struct driver_data *driver_data;
struct driver_data *driver_data;
struct driver_data
driver_data
*driver_data
*
driver_data
struct descriptor *d, *last;
struct descriptor *d, *last;
struct descriptor
descriptor
*d
*
d
*last
*
last
__le32 *header;
__le32 *header;
__le32
__le32
*header
*
header
int z, tcode;
int z, tcode;
int
z
z
tcode
tcode
u32 reg;
u32 reg;
u32
u32
reg
reg
d = context_get_descriptors(ctx, 4, &d_bus);
d = context_get_descriptors(ctx, 4, &d_bus)
d
d
context_get_descriptors(ctx, 4, &d_bus)
context_get_descriptors
context_get_descriptors
ctx
ctx
4
&d_bus
d_bus
d_bus
if (d == NULL) {		packet->ack = RCODE_SEND_ERROR;		return -1;	}
d == NULL
d
d
NULL
NULL
{		packet->ack = RCODE_SEND_ERROR;		return -1;	}
packet->ack = RCODE_SEND_ERROR;
packet->ack = RCODE_SEND_ERROR
packet->ack
packet
packet
ack
RCODE_SEND_ERROR
RCODE_SEND_ERROR
return -1;
-1
1
d[0].control   = cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE);
d[0].control   = cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE)
d[0].control
d[0]
d
d
0
control
cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE)
cpu_to_le16
cpu_to_le16
DESCRIPTOR_KEY_IMMEDIATE
DESCRIPTOR_KEY_IMMEDIATE
d[0].res_count = cpu_to_le16(packet->timestamp);
d[0].res_count = cpu_to_le16(packet->timestamp)
d[0].res_count
d[0]
d
d
0
res_count
cpu_to_le16(packet->timestamp)
cpu_to_le16
cpu_to_le16
packet->timestamp
packet
packet
timestamp
header = (__le32 *) &d[1];
header = (__le32 *) &d[1]
header
header
(__le32 *) &d[1]
__le32 *
__le32
__le32
*
*
&d[1]
d[1]
d
d
1
if (packet->header_length > 8) {		header[0] = cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16));		header[1] = cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000));		header[2] = cpu_to_le32(packet->header[2]);		tcode = (packet->header[0] >> 4) & 0x0f;		if (TCODE_IS_BLOCK_PACKET(tcode))			header[3] = cpu_to_le32(packet->header[3]);		else			header[3] = (__force __le32) packet->header[3];		d[0].req_count = cpu_to_le16(packet->header_length);	} else {		header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16));		header[1] = cpu_to_le32(packet->header[0]);		header[2] = cpu_to_le32(packet->header[1]);		d[0].req_count = cpu_to_le16(12);	}
packet->header_length > 8
packet->header_length
packet
packet
header_length
8
{		header[0] = cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16));		header[1] = cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000));		header[2] = cpu_to_le32(packet->header[2]);		tcode = (packet->header[0] >> 4) & 0x0f;		if (TCODE_IS_BLOCK_PACKET(tcode))			header[3] = cpu_to_le32(packet->header[3]);		else			header[3] = (__force __le32) packet->header[3];		d[0].req_count = cpu_to_le16(packet->header_length);	}
header[0] = cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16));
header[0] = cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16))
header[0]
header
header
0
cpu_to_le32((packet->header[0] & 0xffff) |					(packet->speed << 16))
cpu_to_le32
cpu_to_le32
(packet->header[0] & 0xffff) |					(packet->speed << 16)
(packet->header[0] & 0xffff)
packet->header[0] & 0xffff
packet->header[0]
packet->header
packet
packet
header
0
0xffff
(packet->speed << 16)
packet->speed << 16
packet->speed
packet
packet
speed
16
header[1] = cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000));
header[1] = cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000))
header[1]
header
header
1
cpu_to_le32((packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000))
cpu_to_le32
cpu_to_le32
(packet->header[1] & 0xffff) |					(packet->header[0] & 0xffff0000)
(packet->header[1] & 0xffff)
packet->header[1] & 0xffff
packet->header[1]
packet->header
packet
packet
header
1
0xffff
(packet->header[0] & 0xffff0000)
packet->header[0] & 0xffff0000
packet->header[0]
packet->header
packet
packet
header
0
0xffff0000
header[2] = cpu_to_le32(packet->header[2]);
header[2] = cpu_to_le32(packet->header[2])
header[2]
header
header
2
cpu_to_le32(packet->header[2])
cpu_to_le32
cpu_to_le32
packet->header[2]
packet->header
packet
packet
header
2
tcode = (packet->header[0] >> 4) & 0x0f;
tcode = (packet->header[0] >> 4) & 0x0f
tcode
tcode
(packet->header[0] >> 4) & 0x0f
(packet->header[0] >> 4)
packet->header[0] >> 4
packet->header[0]
packet->header
packet
packet
header
0
4
0x0f
if (TCODE_IS_BLOCK_PACKET(tcode))			header[3] = cpu_to_le32(packet->header[3]);		else			header[3] = (__force __le32) packet->header[3];
d[0].req_count = cpu_to_le16(packet->header_length);
d[0].req_count = cpu_to_le16(packet->header_length)
d[0].req_count
d[0]
d
d
0
req_count
cpu_to_le16(packet->header_length)
cpu_to_le16
cpu_to_le16
packet->header_length
packet
packet
header_length
{		header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16));		header[1] = cpu_to_le32(packet->header[0]);		header[2] = cpu_to_le32(packet->header[1]);		d[0].req_count = cpu_to_le16(12);	}
header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16));
header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16))
header[0]
header
header
0
cpu_to_le32((OHCI1394_phy_tcode << 4) |					(packet->speed << 16))
cpu_to_le32
cpu_to_le32
(OHCI1394_phy_tcode << 4) |					(packet->speed << 16)
(OHCI1394_phy_tcode << 4)
OHCI1394_phy_tcode << 4
OHCI1394_phy_tcode
OHCI1394_phy_tcode
4
(packet->speed << 16)
packet->speed << 16
packet->speed
packet
packet
speed
16
header[1] = cpu_to_le32(packet->header[0]);
header[1] = cpu_to_le32(packet->header[0])
header[1]
header
header
1
cpu_to_le32(packet->header[0])
cpu_to_le32
cpu_to_le32
packet->header[0]
packet->header
packet
packet
header
0
header[2] = cpu_to_le32(packet->header[1]);
header[2] = cpu_to_le32(packet->header[1])
header[2]
header
header
2
cpu_to_le32(packet->header[1])
cpu_to_le32
cpu_to_le32
packet->header[1]
packet->header
packet
packet
header
1
d[0].req_count = cpu_to_le16(12);
d[0].req_count = cpu_to_le16(12)
d[0].req_count
d[0]
d
d
0
req_count
cpu_to_le16(12)
cpu_to_le16
cpu_to_le16
12
driver_data = (struct driver_data *) &d[3];
driver_data = (struct driver_data *) &d[3]
driver_data
driver_data
(struct driver_data *) &d[3]
struct driver_data *
struct driver_data
driver_data
*
*
&d[3]
d[3]
d
d
3
driver_data->packet = packet;
driver_data->packet = packet
driver_data->packet
driver_data
driver_data
packet
packet
packet
packet->driver_data = driver_data;
packet->driver_data = driver_data
packet->driver_data
packet
packet
driver_data
driver_data
driver_data
if (packet->payload_length > 0) {		payload_bus =			dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE);		if (dma_mapping_error(ohci->card.device, payload_bus)) {			packet->ack = RCODE_SEND_ERROR;			return -1;		}		packet->payload_bus = payload_bus;		d[2].req_count    = cpu_to_le16(packet->payload_length);		d[2].data_address = cpu_to_le32(payload_bus);		last = &d[2];		z = 3;	} else {		last = &d[0];		z = 2;	}
packet->payload_length > 0
packet->payload_length
packet
packet
payload_length
0
{		payload_bus =			dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE);		if (dma_mapping_error(ohci->card.device, payload_bus)) {			packet->ack = RCODE_SEND_ERROR;			return -1;		}		packet->payload_bus = payload_bus;		d[2].req_count    = cpu_to_le16(packet->payload_length);		d[2].data_address = cpu_to_le32(payload_bus);		last = &d[2];		z = 3;	}
payload_bus =			dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE);
payload_bus =			dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE)
payload_bus
payload_bus
dma_map_single(ohci->card.device, packet->payload,				       packet->payload_length, DMA_TO_DEVICE)
dma_map_single
dma_map_single
ohci->card.device
ohci->card
ohci
ohci
card
device
packet->payload
packet
packet
payload
packet->payload_length
packet
packet
payload_length
DMA_TO_DEVICE
DMA_TO_DEVICE
if (dma_mapping_error(ohci->card.device, payload_bus)) {			packet->ack = RCODE_SEND_ERROR;			return -1;		}
dma_mapping_error(ohci->card.device, payload_bus)
dma_mapping_error
dma_mapping_error
ohci->card.device
ohci->card
ohci
ohci
card
device
payload_bus
payload_bus
{			packet->ack = RCODE_SEND_ERROR;			return -1;		}
packet->ack = RCODE_SEND_ERROR;
packet->ack = RCODE_SEND_ERROR
packet->ack
packet
packet
ack
RCODE_SEND_ERROR
RCODE_SEND_ERROR
return -1;
-1
1
packet->payload_bus = payload_bus;
packet->payload_bus = payload_bus
packet->payload_bus
packet
packet
payload_bus
payload_bus
payload_bus
d[2].req_count    = cpu_to_le16(packet->payload_length);
d[2].req_count    = cpu_to_le16(packet->payload_length)
d[2].req_count
d[2]
d
d
2
req_count
cpu_to_le16(packet->payload_length)
cpu_to_le16
cpu_to_le16
packet->payload_length
packet
packet
payload_length
d[2].data_address = cpu_to_le32(payload_bus);
d[2].data_address = cpu_to_le32(payload_bus)
d[2].data_address
d[2]
d
d
2
data_address
cpu_to_le32(payload_bus)
cpu_to_le32
cpu_to_le32
payload_bus
payload_bus
last = &d[2];
last = &d[2]
last
last
&d[2]
d[2]
d
d
2
z = 3;
z = 3
z
z
3
{		last = &d[0];		z = 2;	}
last = &d[0];
last = &d[0]
last
last
&d[0]
d[0]
d
d
0
z = 2;
z = 2
z
z
2
last->control |= cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS |				     DESCRIPTOR_BRANCH_ALWAYS);
last->control |= cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS |				     DESCRIPTOR_BRANCH_ALWAYS)
last->control
last
last
control
cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS |				     DESCRIPTOR_BRANCH_ALWAYS)
cpu_to_le16
cpu_to_le16
DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS |				     DESCRIPTOR_BRANCH_ALWAYS
DESCRIPTOR_OUTPUT_LAST |				     DESCRIPTOR_IRQ_ALWAYS
DESCRIPTOR_OUTPUT_LAST
DESCRIPTOR_OUTPUT_LAST
DESCRIPTOR_IRQ_ALWAYS
DESCRIPTOR_IRQ_ALWAYS
DESCRIPTOR_BRANCH_ALWAYS
DESCRIPTOR_BRANCH_ALWAYS
if (ohci->generation != packet->generation ||	    reg_read(ohci, OHCI1394_IntEventSet) & OHCI1394_busReset) {		if (packet->payload_length > 0)			dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE);		packet->ack = RCODE_GENERATION;		return -1;	}
ohci->generation != packet->generation ||	    reg_read(ohci, OHCI1394_IntEventSet) & OHCI1394_busReset
ohci->generation != packet->generation
ohci->generation
ohci
ohci
generation
packet->generation
packet
packet
generation
reg_read(ohci, OHCI1394_IntEventSet) & OHCI1394_busReset
reg_read(ohci, OHCI1394_IntEventSet)
reg_read
reg_read
ohci
ohci
OHCI1394_IntEventSet
OHCI1394_IntEventSet
OHCI1394_busReset
OHCI1394_busReset
{		if (packet->payload_length > 0)			dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE);		packet->ack = RCODE_GENERATION;		return -1;	}
if (packet->payload_length > 0)			dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE);
packet->payload_length > 0
packet->payload_length
packet
packet
payload_length
0
dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE);
dma_unmap_single(ohci->card.device, payload_bus,					 packet->payload_length, DMA_TO_DEVICE)
dma_unmap_single
dma_unmap_single
ohci->card.device
ohci->card
ohci
ohci
card
device
payload_bus
payload_bus
packet->payload_length
packet
packet
payload_length
DMA_TO_DEVICE
DMA_TO_DEVICE
packet->ack = RCODE_GENERATION;
packet->ack = RCODE_GENERATION
packet->ack
packet
packet
ack
RCODE_GENERATION
RCODE_GENERATION
return -1;
-1
1
context_append(ctx, d, z, 4 - z);
context_append(ctx, d, z, 4 - z)
context_append
context_append
ctx
ctx
d
d
z
z
4 - z
4
z
z
reg = reg_read(ctx->ohci, CONTROL_SET(ctx->regs));
reg = reg_read(ctx->ohci, CONTROL_SET(ctx->regs))
reg
reg
reg_read(ctx->ohci, CONTROL_SET(ctx->regs))
reg_read
reg_read
ctx->ohci
ctx
ctx
ohci
CONTROL_SET(ctx->regs)
CONTROL_SET
CONTROL_SET
ctx->regs
ctx
ctx
regs
if ((reg & CONTEXT_RUN) == 0)		context_run(ctx, 0);
(reg & CONTEXT_RUN) == 0
(reg & CONTEXT_RUN)
reg & CONTEXT_RUN
reg
reg
CONTEXT_RUN
CONTEXT_RUN
0
context_run(ctx, 0);
context_run(ctx, 0)
context_run
context_run
ctx
ctx
0
return 0;
0
-----joern-----
(328,165,0)
(302,151,0)
(289,8,0)
(179,65,0)
(1,178,0)
(57,172,0)
(23,262,0)
(357,162,0)
(6,320,0)
(336,215,0)
(320,263,0)
(172,53,0)
(231,149,0)
(105,313,0)
(117,138,0)
(107,244,0)
(36,358,0)
(186,27,0)
(360,281,0)
(250,290,0)
(171,1,0)
(15,113,0)
(254,1,0)
(288,147,0)
(47,211,0)
(169,290,0)
(77,354,0)
(232,222,0)
(316,178,0)
(384,66,0)
(208,218,0)
(64,258,0)
(318,55,0)
(193,17,0)
(144,151,0)
(336,162,0)
(253,365,0)
(297,25,0)
(3,287,0)
(104,313,0)
(331,119,0)
(369,69,0)
(297,215,0)
(330,337,0)
(191,320,0)
(117,281,0)
(367,15,0)
(204,384,0)
(336,202,0)
(291,384,0)
(163,204,0)
(55,58,0)
(297,120,0)
(384,313,0)
(332,313,0)
(163,119,0)
(111,117,0)
(311,85,0)
(56,321,0)
(71,34,0)
(297,383,0)
(115,379,0)
(69,73,0)
(97,20,0)
(377,284,0)
(144,178,0)
(189,253,0)
(54,183,0)
(264,348,0)
(71,215,0)
(146,280,0)
(335,263,0)
(48,0,0)
(163,162,0)
(163,3,0)
(24,156,0)
(282,35,0)
(323,58,0)
(155,109,0)
(364,185,0)
(128,365,0)
(151,200,0)
(357,120,0)
(224,140,0)
(374,44,0)
(338,61,0)
(260,313,0)
(200,151,0)
(340,149,0)
(83,306,0)
(321,372,0)
(37,145,0)
(188,209,0)
(22,321,0)
(173,236,0)
(200,217,0)
(360,0,0)
(267,237,0)
(359,343,0)
(163,283,0)
(349,306,0)
(358,170,0)
(38,140,0)
(84,370,0)
(336,204,0)
(134,67,0)
(163,315,0)
(30,27,0)
(70,202,0)
(266,93,0)
(357,25,0)
(154,165,0)
(220,221,0)
(81,83,0)
(217,87,0)
(297,315,0)
(8,289,0)
(340,313,0)
(253,189,0)
(168,317,0)
(99,241,0)
(163,202,0)
(275,71,0)
(102,354,0)
(262,375,0)
(330,178,0)
(357,284,0)
(121,38,0)
(365,178,0)
(247,149,0)
(222,156,0)
(76,7,0)
(49,222,0)
(210,318,0)
(66,153,0)
(35,282,0)
(195,236,0)
(119,178,0)
(45,35,0)
(297,224,0)
(86,215,0)
(138,135,0)
(158,34,0)
(165,213,0)
(25,60,0)
(375,273,0)
(363,42,0)
(356,189,0)
(320,0,0)
(283,147,0)
(357,291,0)
(132,229,0)
(75,313,0)
(145,37,0)
(244,289,0)
(73,33,0)
(162,113,0)
(94,359,0)
(17,150,0)
(307,19,0)
(377,289,0)
(269,360,0)
(230,236,0)
(198,174,0)
(336,283,0)
(309,33,0)
(293,384,0)
(34,71,0)
(304,12,0)
(153,66,0)
(93,54,0)
(163,383,0)
(257,178,0)
(44,374,0)
(163,238,0)
(283,7,0)
(174,182,0)
(176,204,0)
(329,109,0)
(336,10,0)
(334,44,0)
(267,373,0)
(2,213,0)
(215,71,0)
(151,144,0)
(163,150,0)
(297,293,0)
(163,284,0)
(336,25,0)
(65,106,0)
(297,204,0)
(29,12,0)
(14,372,0)
(282,11,0)
(271,223,0)
(270,315,0)
(71,19,0)
(297,330,0)
(135,138,0)
(379,90,0)
(54,236,0)
(161,365,0)
(319,199,0)
(271,241,0)
(14,140,0)
(229,251,0)
(336,293,0)
(163,224,0)
(159,170,0)
(63,257,0)
(275,354,0)
(19,71,0)
(90,234,0)
(79,90,0)
(130,262,0)
(372,321,0)
(205,120,0)
(163,318,0)
(209,251,0)
(279,140,0)
(289,313,0)
(248,166,0)
(297,238,0)
(297,291,0)
(60,289,0)
(252,337,0)
(120,178,0)
(258,83,0)
(113,15,0)
(213,165,0)
(180,120,0)
(376,162,0)
(288,185,0)
(209,188,0)
(251,209,0)
(290,250,0)
(69,0,0)
(375,262,0)
(223,271,0)
(342,14,0)
(192,24,0)
(336,159,0)
(276,355,0)
(106,65,0)
(265,71,0)
(199,213,0)
(137,238,0)
(218,159,0)
(380,61,0)
(341,8,0)
(298,131,0)
(225,7,0)
(66,384,0)
(251,229,0)
(336,238,0)
(145,15,0)
(246,221,0)
(357,159,0)
(297,3,0)
(0,360,0)
(177,218,0)
(20,287,0)
(15,145,0)
(303,237,0)
(147,58,0)
(51,179,0)
(60,25,0)
(53,172,0)
(149,58,0)
(306,313,0)
(203,244,0)
(357,3,0)
(25,168,0)
(194,211,0)
(114,48,0)
(85,73,0)
(221,281,0)
(336,383,0)
(229,178,0)
(62,373,0)
(136,162,0)
(127,363,0)
(185,178,0)
(163,93,0)
(61,289,0)
(202,267,0)
(211,47,0)
(370,178,0)
(375,300,0)
(13,178,0)
(40,377,0)
(46,297,0)
(297,284,0)
(222,27,0)
(297,10,0)
(343,211,0)
(11,282,0)
(68,340,0)
(340,355,0)
(357,293,0)
(12,304,0)
(357,10,0)
(43,224,0)
(166,178,0)
(15,367,0)
(125,251,0)
(98,313,0)
(273,375,0)
(336,3,0)
(353,383,0)
(87,173,0)
(245,263,0)
(213,199,0)
(381,129,0)
(278,245,0)
(237,267,0)
(138,306,0)
(361,33,0)
(371,174,0)
(163,215,0)
(10,384,0)
(357,238,0)
(140,14,0)
(142,360,0)
(315,173,0)
(292,42,0)
(336,284,0)
(165,178,0)
(34,178,0)
(139,383,0)
(48,311,0)
(175,303,0)
(312,313,0)
(239,293,0)
(348,289,0)
(346,163,0)
(357,223,0)
(87,217,0)
(39,119,0)
(357,215,0)
(59,178,0)
(148,150,0)
(49,336,0)
(65,179,0)
(286,28,0)
(181,92,0)
(28,286,0)
(368,10,0)
(237,303,0)
(195,167,0)
(287,313,0)
(327,336,0)
(223,357,0)
(291,188,0)
(201,44,0)
(47,92,0)
(88,172,0)
(157,34,0)
(59,317,0)
(336,120,0)
(365,253,0)
(167,131,0)
(141,384,0)
(4,224,0)
(206,311,0)
(280,281,0)
(336,313,0)
(356,236,0)
(124,308,0)
(174,289,0)
(164,315,0)
(294,379,0)
(159,218,0)
(92,370,0)
(325,62,0)
(347,145,0)
(202,286,0)
(31,330,0)
(340,281,0)
(173,87,0)
(183,166,0)
(109,245,0)
(355,62,0)
(317,59,0)
(310,303,0)
(259,60,0)
(101,267,0)
(26,42,0)
(355,340,0)
(16,47,0)
(103,8,0)
(66,182,0)
(357,283,0)
(61,3,0)
(256,313,0)
(250,308,0)
(337,243,0)
(106,308,0)
(123,166,0)
(383,384,0)
(21,355,0)
(219,282,0)
(110,19,0)
(333,185,0)
(33,73,0)
(300,375,0)
(372,14,0)
(296,59,0)
(322,253,0)
(241,271,0)
(122,308,0)
(314,229,0)
(124,234,0)
(183,54,0)
(52,313,0)
(73,69,0)
(1,298,0)
(119,17,0)
(129,8,0)
(224,257,0)
(357,315,0)
(218,289,0)
(305,340,0)
(163,293,0)
(8,129,0)
(348,28,0)
(234,124,0)
(324,304,0)
(284,250,0)
(13,179,0)
(357,313,0)
(135,280,0)
(27,178,0)
(118,238,0)
(316,300,0)
(44,178,0)
(182,66,0)
(277,377,0)
(163,291,0)
(33,178,0)
(286,58,0)
(207,300,0)
(357,224,0)
(263,245,0)
(74,318,0)
(299,144,0)
(344,13,0)
(49,163,0)
(284,377,0)
(100,348,0)
(345,202,0)
(317,168,0)
(143,48,0)
(298,1,0)
(67,217,0)
(340,62,0)
(228,330,0)
(301,291,0)
(304,178,0)
(42,178,0)
(78,53,0)
(352,10,0)
(71,275,0)
(339,316,0)
(235,304,0)
(189,356,0)
(182,174,0)
(170,358,0)
(196,11,0)
(263,320,0)
(3,61,0)
(234,90,0)
(91,346,0)
(73,85,0)
(240,286,0)
(343,236,0)
(233,55,0)
(274,35,0)
(138,117,0)
(318,178,0)
(131,199,0)
(280,135,0)
(350,378,0)
(272,313,0)
(321,289,0)
(19,178,0)
(357,204,0)
(167,195,0)
(297,93,0)
(255,25,0)
(42,363,0)
(168,313,0)
(268,343,0)
(315,384,0)
(238,384,0)
(90,379,0)
(170,58,0)
(204,124,0)
(357,383,0)
(227,117,0)
(197,159,0)
(163,10,0)
(285,340,0)
(163,120,0)
(212,313,0)
(9,241,0)
(379,178,0)
(7,283,0)
(297,162,0)
(366,275,0)
(10,122,0)
(383,106,0)
(27,24,0)
(378,289,0)
(326,291,0)
(187,37,0)
(293,195,0)
(287,20,0)
(8,281,0)
(37,178,0)
(89,13,0)
(336,315,0)
(140,313,0)
(147,288,0)
(184,232,0)
(215,58,0)
(160,378,0)
(12,67,0)
(257,313,0)
(202,357,0)
(122,273,0)
(261,59,0)
(32,144,0)
(67,12,0)
(295,69,0)
(303,289,0)
(354,275,0)
(112,293,0)
(116,200,0)
(92,47,0)
(226,289,0)
(93,378,0)
(217,67,0)
(14,342,0)
(336,93,0)
(163,159,0)
(300,316,0)
(357,93,0)
(162,384,0)
(80,83,0)
(214,46,0)
(179,13,0)
(96,283,0)
(340,289,0)
(120,38,0)
(273,122,0)
(41,37,0)
(126,204,0)
(336,224,0)
(0,313,0)
(378,93,0)
(172,178,0)
(108,313,0)
(249,271,0)
(72,313,0)
(238,356,0)
(185,288,0)
(336,318,0)
(131,167,0)
(382,3,0)
(311,48,0)
(50,245,0)
(297,243,0)
(245,109,0)
(152,370,0)
(370,92,0)
(166,183,0)
(131,298,0)
(306,138,0)
(351,313,0)
(5,374,0)
(242,280,0)
(18,298,0)
(216,0,0)
(133,62,0)
(38,313,0)
(95,284,0)
(211,343,0)
(357,318,0)
(82,316,0)
(83,258,0)
(355,149,0)
(109,178,0)
(85,311,0)
(163,25,0)
(362,313,0)
(217,200,0)
(190,60,0)
(28,348,0)
(354,0,0)
(7,289,0)
(199,131,0)
(49,297,0)
(336,291,0)
(35,0,0)
(336,238,1)
(291,301,1)
(43,140,1)
(119,178,1)
(304,235,1)
(25,255,1)
(33,361,1)
(208,147,1)
(131,298,1)
(120,205,1)
(357,204,1)
(49,336,1)
(345,149,1)
(377,289,1)
(375,300,1)
(258,83,1)
(206,48,1)
(163,238,1)
(354,0,1)
(306,138,1)
(151,302,1)
(284,95,1)
(10,384,1)
(7,225,1)
(130,10,1)
(229,314,1)
(307,110,1)
(224,140,1)
(299,32,1)
(262,23,1)
(165,154,1)
(297,3,1)
(369,357,1)
(330,178,1)
(40,124,1)
(244,107,1)
(32,67,1)
(39,245,1)
(163,346,1)
(293,384,1)
(46,214,1)
(22,56,1)
(263,320,1)
(38,140,1)
(204,176,1)
(300,207,1)
(309,69,1)
(25,60,1)
(279,250,1)
(41,187,1)
(71,34,1)
(36,159,1)
(225,76,1)
(162,376,1)
(3,382,1)
(8,129,1)
(166,123,1)
(297,315,1)
(297,46,1)
(245,263,1)
(320,0,1)
(285,85,1)
(15,367,1)
(106,65,1)
(357,224,1)
(68,285,1)
(355,276,1)
(86,363,1)
(278,109,1)
(103,226,1)
(163,159,1)
(166,178,1)
(12,304,1)
(336,162,1)
(101,363,1)
(163,93,1)
(336,3,1)
(257,63,1)
(123,248,1)
(187,162,1)
(355,149,1)
(53,172,1)
(229,178,1)
(207,316,1)
(163,284,1)
(126,106,1)
(360,281,1)
(80,306,1)
(270,195,1)
(325,267,1)
(211,47,1)
(347,37,1)
(0,360,1)
(326,359,1)
(378,289,1)
(336,315,1)
(315,164,1)
(340,281,1)
(357,291,1)
(305,68,1)
(159,197,1)
(381,341,1)
(311,206,1)
(196,282,1)
(93,378,1)
(132,291,1)
(336,224,1)
(378,160,1)
(59,261,1)
(297,293,1)
(203,289,1)
(297,284,1)
(364,333,1)
(194,47,1)
(249,202,1)
(167,131,1)
(35,0,1)
(163,119,1)
(71,275,1)
(336,283,1)
(251,229,1)
(358,36,1)
(65,179,1)
(191,374,1)
(238,384,1)
(336,318,1)
(357,284,1)
(293,239,1)
(237,303,1)
(233,318,1)
(333,283,1)
(357,162,1)
(224,4,1)
(1,171,1)
(109,329,1)
(162,384,1)
(184,24,1)
(276,21,1)
(357,293,1)
(139,353,1)
(366,354,1)
(27,30,1)
(284,377,1)
(259,190,1)
(254,199,1)
(384,66,1)
(202,70,1)
(1,178,1)
(273,375,1)
(174,371,1)
(7,289,1)
(47,16,1)
(357,159,1)
(170,358,1)
(117,281,1)
(179,51,1)
(50,263,1)
(340,355,1)
(336,159,1)
(383,384,1)
(264,100,1)
(336,93,1)
(319,213,1)
(348,264,1)
(185,364,1)
(330,31,1)
(14,342,1)
(163,162,1)
(85,73,1)
(336,120,1)
(76,55,1)
(190,287,1)
(145,347,1)
(199,319,1)
(253,365,1)
(90,379,1)
(53,78,1)
(297,10,1)
(303,289,1)
(297,25,1)
(90,79,1)
(128,161,1)
(296,25,1)
(26,38,1)
(83,81,1)
(349,340,1)
(380,338,1)
(267,237,1)
(218,289,1)
(374,44,1)
(357,383,1)
(213,165,1)
(315,384,1)
(303,175,1)
(298,1,1)
(84,268,1)
(316,178,1)
(161,238,1)
(172,178,1)
(200,116,1)
(66,153,1)
(158,157,1)
(165,178,1)
(16,92,1)
(35,45,1)
(382,61,1)
(134,12,1)
(59,178,1)
(336,291,1)
(304,178,1)
(110,275,1)
(51,13,1)
(129,381,1)
(318,74,1)
(147,288,1)
(85,311,1)
(292,26,1)
(336,202,1)
(57,384,1)
(340,62,1)
(163,204,1)
(151,144,1)
(320,6,1)
(321,22,1)
(13,178,1)
(198,141,1)
(73,69,1)
(78,172,1)
(357,93,1)
(34,178,1)
(131,199,1)
(13,89,1)
(359,343,1)
(297,162,1)
(183,166,1)
(202,286,1)
(297,330,1)
(374,5,1)
(214,337,1)
(275,354,1)
(109,178,1)
(263,335,1)
(42,178,1)
(88,57,1)
(61,289,1)
(201,334,1)
(209,251,1)
(163,215,1)
(202,267,1)
(215,71,1)
(37,41,1)
(111,349,1)
(62,133,1)
(73,33,1)
(154,328,1)
(60,259,1)
(8,281,1)
(375,262,1)
(24,192,1)
(289,8,1)
(163,224,1)
(238,118,1)
(182,174,1)
(222,232,1)
(49,222,1)
(328,293,1)
(163,383,1)
(74,210,1)
(336,284,1)
(316,82,1)
(144,178,1)
(297,93,1)
(336,383,1)
(218,177,1)
(244,289,1)
(336,327,1)
(242,117,1)
(27,178,1)
(300,316,1)
(92,181,1)
(357,3,1)
(23,130,1)
(353,122,1)
(311,48,1)
(17,193,1)
(163,318,1)
(221,220,1)
(44,201,1)
(336,25,1)
(9,249,1)
(144,299,1)
(294,204,1)
(318,178,1)
(140,14,1)
(239,112,1)
(337,252,1)
(217,200,1)
(81,80,1)
(298,18,1)
(246,258,1)
(15,145,1)
(282,219,1)
(95,377,1)
(248,93,1)
(42,292,1)
(155,50,1)
(179,13,1)
(357,10,1)
(14,372,1)
(19,307,1)
(217,67,1)
(163,293,1)
(371,198,1)
(54,183,1)
(34,158,1)
(359,94,1)
(157,19,1)
(145,37,1)
(96,7,1)
(220,246,1)
(169,284,1)
(331,39,1)
(66,182,1)
(20,97,1)
(368,352,1)
(189,253,1)
(365,128,1)
(146,242,1)
(114,73,1)
(168,317,1)
(163,315,1)
(49,297,1)
(37,178,1)
(164,270,1)
(240,170,1)
(295,369,1)
(21,305,1)
(268,356,1)
(344,383,1)
(360,142,1)
(163,202,1)
(357,283,1)
(277,40,1)
(297,224,1)
(310,101,1)
(210,11,1)
(232,184,1)
(67,12,1)
(138,117,1)
(160,350,1)
(69,295,1)
(193,119,1)
(211,194,1)
(142,269,1)
(177,208,1)
(357,223,1)
(100,240,1)
(195,167,1)
(11,282,1)
(12,29,1)
(30,186,1)
(70,345,1)
(350,113,1)
(252,330,1)
(60,289,1)
(6,191,1)
(251,125,1)
(269,216,1)
(94,343,1)
(280,146,1)
(181,370,1)
(302,144,1)
(327,258,1)
(56,279,1)
(5,44,1)
(279,54,1)
(163,283,1)
(357,238,1)
(335,320,1)
(383,139,1)
(188,209,1)
(379,115,1)
(361,309,1)
(118,137,1)
(18,1,1)
(336,293,1)
(340,289,1)
(175,310,1)
(163,25,1)
(28,348,1)
(136,359,1)
(357,120,1)
(163,10,1)
(253,322,1)
(55,233,1)
(44,178,1)
(245,278,1)
(287,20,1)
(255,60,1)
(343,211,1)
(163,3,1)
(370,152,1)
(186,244,1)
(63,224,1)
(324,315,1)
(338,244,1)
(120,178,1)
(379,178,1)
(301,326,1)
(348,289,1)
(48,0,1)
(192,27,1)
(334,85,1)
(48,143,1)
(33,178,1)
(297,120,1)
(235,324,1)
(117,227,1)
(314,132,1)
(176,126,1)
(297,204,1)
(286,28,1)
(357,318,1)
(377,277,1)
(11,196,1)
(185,178,1)
(357,315,1)
(38,121,1)
(222,27,1)
(124,234,1)
(163,120,1)
(89,344,1)
(97,3,1)
(135,280,1)
(69,0,1)
(200,151,1)
(10,368,1)
(376,136,1)
(372,321,1)
(138,135,1)
(45,274,1)
(31,228,1)
(275,366,1)
(173,87,1)
(370,178,1)
(49,163,1)
(137,173,1)
(227,111,1)
(119,331,1)
(283,96,1)
(356,189,1)
(4,43,1)
(143,114,1)
(113,15,1)
(71,19,1)
(3,61,1)
(116,151,1)
(283,7,1)
(77,86,1)
(213,2,1)
(317,59,1)
(221,281,1)
(363,42,1)
(247,286,1)
(365,178,1)
(350,188,1)
(297,238,1)
(231,247,1)
(199,213,1)
(341,103,1)
(265,34,1)
(345,62,1)
(258,64,1)
(2,165,1)
(171,254,1)
(261,296,1)
(357,215,1)
(67,134,1)
(172,88,1)
(226,0,1)
(336,10,1)
(336,215,1)
(339,262,1)
(122,273,1)
(159,218,1)
(115,294,1)
(297,291,1)
(61,380,1)
(125,229,1)
(245,109,1)
(223,271,1)
(257,178,1)
(336,204,1)
(99,9,1)
(346,91,1)
(266,378,1)
(141,168,1)
(87,217,1)
(127,42,1)
(228,11,1)
(47,92,1)
(357,25,1)
(121,120,1)
(363,127,1)
(355,62,1)
(329,155,1)
(297,215,1)
(92,370,1)
(288,185,1)
(149,231,1)
(297,383,1)
(133,325,1)
(327,221,1)
(91,17,1)
(282,35,1)
(219,35,1)
(83,306,1)
(102,77,1)
(64,83,1)
(205,180,1)
(29,304,1)
(291,384,1)
(107,203,1)
(322,365,1)
(280,281,1)
(204,384,1)
(352,53,1)
(271,241,1)
(290,169,1)
(112,53,1)
(274,215,1)
(180,257,1)
(234,90,1)
(197,218,1)
(163,291,1)
(79,379,1)
(82,339,1)
(19,178,1)
(250,290,1)
(39,374,1)
(321,289,1)
(152,84,1)
(93,266,1)
(241,99,1)
(174,289,1)
(71,265,1)
(354,102,1)
(340,149,1)
(291,384,2)
(336,284,2)
(76,11,2)
(144,53,2)
(228,11,2)
(163,159,2)
(54,183,2)
(285,85,2)
(106,53,2)
(93,53,2)
(259,244,2)
(297,93,2)
(340,149,2)
(145,359,2)
(263,374,2)
(160,53,2)
(21,85,2)
(5,85,2)
(295,11,2)
(77,363,2)
(299,53,2)
(163,283,2)
(334,85,2)
(287,20,2)
(311,48,2)
(207,53,2)
(321,244,2)
(234,90,2)
(297,224,2)
(6,374,2)
(359,343,2)
(51,53,2)
(355,85,2)
(50,374,2)
(56,244,2)
(94,53,2)
(7,11,2)
(306,138,2)
(295,363,2)
(297,25,2)
(377,289,2)
(44,178,2)
(315,384,2)
(219,363,2)
(165,178,2)
(167,131,2)
(366,363,2)
(140,244,2)
(316,178,2)
(361,363,2)
(200,151,2)
(353,53,2)
(14,342,2)
(375,53,2)
(273,53,2)
(331,85,2)
(370,178,2)
(96,11,2)
(290,53,2)
(42,178,2)
(71,363,2)
(314,359,2)
(123,53,2)
(222,27,2)
(182,174,2)
(335,374,2)
(244,289,2)
(297,383,2)
(61,289,2)
(371,244,2)
(154,53,2)
(348,289,2)
(24,244,2)
(16,53,2)
(87,53,2)
(357,159,2)
(372,244,2)
(368,53,2)
(151,53,2)
(73,363,2)
(87,217,2)
(336,318,2)
(357,120,2)
(209,251,2)
(69,11,2)
(92,370,2)
(138,135,2)
(187,359,2)
(82,53,2)
(176,53,2)
(319,53,2)
(245,109,2)
(174,289,2)
(214,11,2)
(383,53,2)
(119,178,2)
(181,53,2)
(31,11,2)
(85,363,2)
(379,53,2)
(38,244,2)
(210,11,2)
(88,244,2)
(30,244,2)
(217,53,2)
(70,363,2)
(252,11,2)
(86,363,2)
(29,53,2)
(357,204,2)
(350,53,2)
(218,11,2)
(249,363,2)
(336,159,2)
(186,244,2)
(346,85,2)
(374,44,2)
(262,53,2)
(124,234,2)
(162,359,2)
(310,363,2)
(109,178,2)
(149,11,2)
(357,383,2)
(15,359,2)
(141,244,2)
(19,363,2)
(363,244,2)
(55,11,2)
(378,53,2)
(48,0,2)
(33,11,2)
(44,85,2)
(38,140,2)
(278,374,2)
(237,363,2)
(73,69,2)
(132,359,2)
(131,199,2)
(128,53,2)
(322,53,2)
(115,53,2)
(340,289,2)
(163,318,2)
(251,229,2)
(65,53,2)
(309,11,2)
(23,53,2)
(298,1,2)
(25,244,2)
(223,11,2)
(89,53,2)
(320,0,2)
(106,65,2)
(316,53,2)
(205,244,2)
(163,284,2)
(85,73,2)
(100,11,2)
(340,281,2)
(0,360,2)
(220,258,2)
(188,359,2)
(240,11,2)
(305,85,2)
(175,363,2)
(184,244,2)
(245,263,2)
(163,10,2)
(357,315,2)
(304,178,2)
(297,162,2)
(173,53,2)
(336,85,2)
(120,244,2)
(53,172,2)
(248,53,2)
(192,244,2)
(300,53,2)
(250,290,2)
(159,218,2)
(336,238,2)
(35,0,2)
(257,244,2)
(48,73,2)
(208,11,2)
(247,11,2)
(36,11,2)
(196,363,2)
(336,383,2)
(46,11,2)
(95,53,2)
(163,93,2)
(4,244,2)
(279,244,2)
(15,145,2)
(163,202,2)
(54,53,2)
(258,85,2)
(163,224,2)
(286,11,2)
(277,53,2)
(357,224,2)
(163,315,2)
(163,293,2)
(62,363,2)
(338,244,2)
(189,53,2)
(326,359,2)
(333,11,2)
(375,262,2)
(1,53,2)
(297,315,2)
(336,162,2)
(71,19,2)
(67,12,2)
(379,178,2)
(258,83,2)
(377,53,2)
(340,62,2)
(330,178,2)
(315,53,2)
(185,178,2)
(202,11,2)
(359,53,2)
(235,53,2)
(15,367,2)
(297,11,2)
(376,359,2)
(242,85,2)
(251,359,2)
(157,363,2)
(318,11,2)
(57,244,2)
(365,178,2)
(267,363,2)
(375,300,2)
(215,363,2)
(355,62,2)
(61,244,2)
(166,178,2)
(194,53,2)
(336,315,2)
(146,85,2)
(211,47,2)
(163,120,2)
(133,363,2)
(360,281,2)
(73,11,2)
(138,117,2)
(152,53,2)
(276,85,2)
(169,53,2)
(303,363,2)
(163,215,2)
(78,244,2)
(163,3,2)
(155,374,2)
(330,11,2)
(183,53,2)
(119,85,2)
(241,11,2)
(357,223,2)
(84,53,2)
(60,244,2)
(357,93,2)
(59,244,2)
(204,384,2)
(99,11,2)
(69,363,2)
(343,53,2)
(261,244,2)
(340,85,2)
(356,53,2)
(19,178,2)
(311,73,2)
(239,53,2)
(354,0,2)
(324,53,2)
(238,53,2)
(117,85,2)
(90,379,2)
(206,73,2)
(32,53,2)
(173,87,2)
(109,374,2)
(92,53,2)
(8,281,2)
(336,10,2)
(97,244,2)
(280,281,2)
(224,140,2)
(183,166,2)
(215,71,2)
(11,363,2)
(85,11,2)
(171,53,2)
(66,244,2)
(163,85,2)
(245,374,2)
(369,363,2)
(297,238,2)
(11,282,2)
(33,178,2)
(22,244,2)
(85,311,2)
(136,359,2)
(213,53,2)
(357,283,2)
(293,384,2)
(343,211,2)
(303,289,2)
(135,85,2)
(231,11,2)
(325,363,2)
(39,85,2)
(221,258,2)
(79,53,2)
(358,11,2)
(357,25,2)
(42,244,2)
(204,53,2)
(357,11,2)
(229,359,2)
(47,53,2)
(8,129,2)
(63,244,2)
(317,244,2)
(222,244,2)
(12,304,2)
(151,144,2)
(163,291,2)
(193,85,2)
(159,11,2)
(110,363,2)
(170,358,2)
(118,53,2)
(301,359,2)
(37,359,2)
(137,53,2)
(190,244,2)
(297,3,2)
(43,244,2)
(113,15,2)
(20,244,2)
(297,204,2)
(327,85,2)
(241,363,2)
(71,275,2)
(296,244,2)
(68,85,2)
(189,253,2)
(363,42,2)
(254,53,2)
(166,53,2)
(135,280,2)
(90,53,2)
(188,209,2)
(161,53,2)
(357,3,2)
(139,53,2)
(28,348,2)
(202,363,2)
(14,244,2)
(218,289,2)
(179,53,2)
(67,53,2)
(336,293,2)
(140,14,2)
(265,363,2)
(297,330,2)
(37,178,2)
(163,162,2)
(41,359,2)
(177,11,2)
(163,238,2)
(284,377,2)
(34,363,2)
(257,178,2)
(101,363,2)
(321,289,2)
(131,298,2)
(271,241,2)
(12,53,2)
(49,336,2)
(225,11,2)
(47,92,2)
(302,53,2)
(382,244,2)
(372,321,2)
(253,53,2)
(249,11,2)
(213,165,2)
(336,3,2)
(268,53,2)
(357,291,2)
(25,60,2)
(336,224,2)
(297,284,2)
(14,372,2)
(356,189,2)
(307,363,2)
(71,34,2)
(121,244,2)
(291,359,2)
(27,178,2)
(318,178,2)
(232,244,2)
(288,11,2)
(336,120,2)
(27,244,2)
(165,53,2)
(297,120,2)
(195,53,2)
(66,182,2)
(336,215,2)
(263,320,2)
(354,363,2)
(223,271,2)
(370,53,2)
(172,178,2)
(70,11,2)
(59,178,2)
(172,244,2)
(120,178,2)
(237,303,2)
(297,293,2)
(49,163,2)
(320,374,2)
(13,178,2)
(112,53,2)
(199,213,2)
(33,363,2)
(17,85,2)
(306,85,2)
(384,66,2)
(179,13,2)
(355,149,2)
(273,375,2)
(304,53,2)
(384,244,2)
(130,53,2)
(267,237,2)
(134,53,2)
(34,178,2)
(9,11,2)
(60,289,2)
(197,11,2)
(250,53,2)
(336,202,2)
(158,363,2)
(337,11,2)
(126,53,2)
(113,359,2)
(143,73,2)
(91,85,2)
(357,293,2)
(180,244,2)
(13,53,2)
(162,384,2)
(74,11,2)
(357,363,2)
(200,53,2)
(18,53,2)
(93,378,2)
(40,53,2)
(286,28,2)
(102,363,2)
(336,204,2)
(369,11,2)
(274,363,2)
(365,53,2)
(336,25,2)
(340,355,2)
(174,244,2)
(217,200,2)
(69,0,2)
(297,291,2)
(202,267,2)
(66,153,2)
(80,85,2)
(122,53,2)
(238,384,2)
(364,11,2)
(221,281,2)
(292,244,2)
(3,244,2)
(380,244,2)
(280,85,2)
(182,244,2)
(45,363,2)
(116,53,2)
(65,179,2)
(199,53,2)
(99,363,2)
(297,10,2)
(147,288,2)
(336,291,2)
(357,284,2)
(275,354,2)
(378,289,2)
(357,238,2)
(352,53,2)
(255,244,2)
(73,33,2)
(349,85,2)
(347,359,2)
(383,384,2)
(1,178,2)
(191,374,2)
(253,365,2)
(167,53,2)
(164,53,2)
(3,61,2)
(328,53,2)
(223,363,2)
(28,11,2)
(293,53,2)
(111,85,2)
(224,244,2)
(288,185,2)
(168,317,2)
(114,73,2)
(49,222,2)
(138,85,2)
(266,53,2)
(348,11,2)
(147,11,2)
(357,162,2)
(144,178,2)
(127,244,2)
(271,363,2)
(282,363,2)
(233,11,2)
(339,53,2)
(145,37,2)
(163,204,2)
(283,7,2)
(198,244,2)
(185,11,2)
(357,215,2)
(163,25,2)
(284,53,2)
(309,363,2)
(201,85,2)
(217,67,2)
(270,53,2)
(163,119,2)
(345,363,2)
(271,11,2)
(9,363,2)
(163,383,2)
(83,306,2)
(10,384,2)
(170,11,2)
(294,53,2)
(282,35,2)
(357,318,2)
(49,297,2)
(2,53,2)
(344,53,2)
(283,11,2)
(35,363,2)
(7,289,2)
(287,244,2)
(336,93,2)
(317,59,2)
(117,281,2)
(229,178,2)
(297,215,2)
(234,53,2)
(64,85,2)
(300,316,2)
(336,283,2)
(246,258,2)
(298,53,2)
(289,8,2)
(53,244,2)
(275,363,2)
(81,85,2)
(345,11,2)
(202,286,2)
(329,374,2)
(374,85,2)
(195,167,2)
(125,359,2)
(122,273,2)
(209,359,2)
(10,53,2)
(83,85,2)
(361,11,2)
(264,11,2)
(227,85,2)
(131,53,2)
(211,53,2)
(124,53,2)
(168,244,2)
(26,244,2)
(357,10,2)
-----------------------------------
(0,*ohci = ctx->ohci)
(1,packet->speed)
(2,0)
(3,d[0].control)
(4,packet)
(5,0)
(6,card)
(7,d[2])
(8,context_get_descriptors(ctx, 4, &d_bus)
(9,DESCRIPTOR_IRQ_ALWAYS)
(10,header[0])
(11,dma_mapping_error(ohci->card.device, payload_bus)
(12,packet->header[1])
(13,packet->header)
(14,(struct driver_data *)
(15,(__force __le32)
(16,4)
(17,packet->ack = RCODE_GENERATION)
(18,16)
(19,packet->payload)
(20,cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE)
(21,4)
(22,3)
(23,4)
(24,packet->ack = RCODE_SEND_ERROR)
(25,d[0].res_count)
(26,packet)
(27,packet->ack)
(28,&d[2])
(29,1)
(30,ack)
(31,ack)
(32,packet)
(33,packet->generation)
(34,packet->payload_length)
(35,ohci->card)
(36,payload_bus)
(37,packet->header)
(38,packet->driver_data = driver_data)
(39,packet)
(40,d)
(41,header)
(42,packet->payload_length)
(43,driver_data)
(44,packet->payload_length)
(45,card)
(46,-1)
(47,packet->header[0] >> 4)
(48,reg_read(ohci, OHCI1394_IntEventSet)
(49,RET)
(50,payload_bus)
(51,0)
(52,if (ohci->generation != packet->generation ||\n\\n\\t    reg_read(ohci, OHCI1394_IntEventSet)
(53,packet->header_length > 8)
(54,d[0].req_count = cpu_to_le16(packet->header_length)
(55,packet->payload_bus = payload_bus)
(56,d)
(57,packet)
(58,)
(59,packet->timestamp)
(60,d[0])
(61,d[0])
(62,z = 2)
(63,packet)
(64,0)
(65,cpu_to_le32(packet->header[0])
(66,(__le32 *)
(67,packet->header[1] & 0xffff)
(68,d)
(69,ohci->generation)
(70,control)
(71,dma_map_single(ohci->card.device, packet->payload,\n\\n\\t\\t\\t\\t       packet->payload_length, DMA_TO_DEVICE)
(72,if (d == NULL)
(73,ohci->generation != packet->generation)
(74,payload_bus)
(75,ohci)
(76,d)
(77,ohci)
(78,8)
(79,1)
(80,reg)
(81,CONTEXT_RUN)
(82,speed)
(83,reg & CONTEXT_RUN)
(84,packet)
(85,ohci->generation != packet->generation ||\n\\n\\t    reg_read(ohci, OHCI1394_IntEventSet)
(86,payload_bus)
(87,cpu_to_le32((packet->header[1] & 0xffff)
(88,header_length)
(89,header)
(90,packet->header[1])
(91,1)
(92,packet->header[0])
(93,d[0].req_count)
(94,tcode)
(95,req_count)
(96,req_count)
(97,DESCRIPTOR_KEY_IMMEDIATE)
(98,if (packet->payload_length > 0)
(99,DESCRIPTOR_BRANCH_ALWAYS)
(100,d)
(101,last)
(102,card)
(103,ctx)
(104,if (packet->header_length > 8)
(105,d_bus)
(106,header[1] = cpu_to_le32(packet->header[0])
(107,NULL)
(108,reg)
(109,packet->payload_length)
(110,packet)
(111,ctx)
(112,header)
(113,header[3] = (__force __le32)
(114,ohci)
(115,header)
(116,0xffff0000)
(117,ctx->ohci)
(118,2)
(119,packet->ack)
(120,packet->driver_data)
(121,driver_data)
(122,header[0] = cpu_to_le32((OHCI1394_phy_tcode << 4)
(123,header_length)
(124,header[2] = cpu_to_le32(packet->header[1])
(125,3)
(126,header)
(127,0)
(128,header)
(129,&d_bus)
(130,OHCI1394_phy_tcode)
(131,(packet->header[0] & 0xffff)
(132,packet)
(133,2)
(134,0xffff)
(135,CONTROL_SET(ctx->regs)
(136,header)
(137,header)
(138,reg_read(ctx->ohci, CONTROL_SET(ctx->regs)
(139,1)
(140,driver_data = (struct driver_data *)
(141,header)
(142,ohci)
(143,OHCI1394_IntEventSet)
(144,packet->header)
(145,packet->header[3])
(146,regs)
(147,d[2].req_count    = cpu_to_le16(packet->payload_length)
(148,if (packet->payload_length > 0)
(149,z = 3)
(150,)
(151,packet->header[0])
(152,header)
(153,__le32 *)
(154,header)
(155,packet)
(156,)
(157,packet)
(158,payload_length)
(159,d[2].data_address)
(160,0)
(161,packet)
(162,header[3])
(163,return -1;)
(164,1)
(165,packet->header)
(166,packet->header_length)
(167,cpu_to_le32((packet->header[0] & 0xffff)
(168,d[0].res_count = cpu_to_le16(packet->timestamp)
(169,12)
(170,d[2].data_address = cpu_to_le32(payload_bus)
(171,speed)
(172,packet->header_length)
(173,header[1] = cpu_to_le32((packet->header[1] & 0xffff)
(174,d[1])
(175,0)
(176,2)
(177,2)
(178,struct fw_packet *packet)
(179,packet->header[0])
(180,packet)
(181,0)
(182,&d[1])
(183,cpu_to_le16(packet->header_length)
(184,1)
(185,packet->payload_length)
(186,packet)
(187,packet)
(188,header[3] = cpu_to_le32(packet->header[3])
(189,cpu_to_le32(packet->header[2])
(190,d)
(191,ohci)
(192,RCODE_SEND_ERROR)
(193,RCODE_GENERATION)
(194,0x0f)
(195,header[0] = cpu_to_le32((packet->header[0] & 0xffff)
(196,payload_bus)
(197,data_address)
(198,d)
(199,packet->header[0] & 0xffff)
(200,packet->header[0] & 0xffff0000)
(201,payload_length)
(202,last->control)
(203,d)
(204,header[2])
(205,driver_data)
(206,OHCI1394_busReset)
(207,16)
(208,d)
(209,cpu_to_le32(packet->header[3])
(210,packet)
(211,(packet->header[0] >> 4)
(212,driver_data)
(213,packet->header[0])
(214,1)
(215,payload_bus =\n\\n\\t\\t\\tdma_map_single(ohci->card.device, packet->payload,\n\\n\\t\\t\\t\\t       packet->payload_length, DMA_TO_DEVICE)
(216,ohci)
(217,(packet->header[1] & 0xffff)
(218,d[2])
(219,device)
(220,0)
(221,context_run(ctx, 0)
(222,return -1;)
(223,cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |\n\\n\\t\\t\\t\\t     DESCRIPTOR_IRQ_ALWAYS |\n\\n\\t\\t\\t\\t     DESCRIPTOR_BRANCH_ALWAYS)
(224,driver_data->packet)
(225,2)
(226,d)
(227,ohci)
(228,packet)
(229,packet->header)
(230,if (TCODE_IS_BLOCK_PACKET(tcode)
(231,3)
(232,-1)
(233,payload_bus)
(234,cpu_to_le32(packet->header[1])
(235,header)
(236,)
(237,&d[0])
(238,header[2])
(239,0)
(240,last)
(241,DESCRIPTOR_IRQ_ALWAYS |\n\\n\\t\\t\\t\\t     DESCRIPTOR_BRANCH_ALWAYS)
(242,ctx)
(243,)
(244,d == NULL)
(245,dma_unmap_single(ohci->card.device, payload_bus,\n\\n\\t\\t\\t\\t\\t packet->payload_length, DMA_TO_DEVICE)
(246,ctx)
(247,z)
(248,packet)
(249,DESCRIPTOR_OUTPUT_LAST)
(250,d[0].req_count = cpu_to_le16(12)
(251,packet->header[3])
(252,RCODE_SEND_ERROR)
(253,packet->header[2])
(254,packet)
(255,res_count)
(256,tcode)
(257,driver_data->packet = packet)
(258,(reg & CONTEXT_RUN)
(259,0)
(260,if ((reg & CONTEXT_RUN)
(261,timestamp)
(262,OHCI1394_phy_tcode << 4)
(263,ohci->card.device)
(264,2)
(265,DMA_TO_DEVICE)
(266,req_count)
(267,last = &d[0])
(268,tcode)
(269,ctx)
(270,header)
(271,DESCRIPTOR_OUTPUT_LAST |\n\\n\\t\\t\\t\\t     DESCRIPTOR_IRQ_ALWAYS |\n\\n\\t\\t\\t\\t     DESCRIPTOR_BRANCH_ALWAYS)
(272,d)
(273,cpu_to_le32((OHCI1394_phy_tcode << 4)
(274,ohci)
(275,ohci->card.device)
(276,z)
(277,0)
(278,DMA_TO_DEVICE)
(279,driver_data)
(280,ctx->regs)
(281,struct context *ctx)
(282,ohci->card.device)
(283,d[2].req_count)
(284,d[0].req_count)
(285,ctx)
(286,last = &d[2])
(287,d[0].control   = cpu_to_le16(DESCRIPTOR_KEY_IMMEDIATE)
(288,cpu_to_le16(packet->payload_length)
(289,d = context_get_descriptors(ctx, 4, &d_bus)
(290,cpu_to_le16(12)
(291,header[3])
(292,payload_length)
(293,header[0])
(294,packet)
(295,generation)
(296,packet)
(297,return -1;)
(298,packet->speed << 16)
(299,header)
(300,packet->speed << 16)
(301,3)
(302,0)
(303,d[0])
(304,packet->header)
(305,z)
(306,reg = reg_read(ctx->ohci, CONTROL_SET(ctx->regs)
(307,payload)
(308,)
(309,packet)
(310,d)
(311,reg_read(ohci, OHCI1394_IntEventSet)
(312,uninitialized_var)
(313,)
(314,header)
(315,header[1])
(316,packet->speed)
(317,cpu_to_le16(packet->timestamp)
(318,packet->payload_bus)
(319,0xffff)
(320,ohci->card)
(321,d[3])
(322,2)
(323,if (dma_mapping_error(ohci->card.device, payload_bus)
(324,packet)
(325,z)
(326,header)
(327,0)
(328,packet)
(329,payload_length)
(330,packet->ack)
(331,ack)
(332,last)
(333,packet)
(334,packet)
(335,device)
(336,return 0;)
(337,packet->ack = RCODE_SEND_ERROR)
(338,d)
(339,packet)
(340,context_append(ctx, d, z, 4 - z)
(341,4)
(342,struct driver_data *)
(343,tcode = (packet->header[0] >> 4)
(344,packet)
(345,last)
(346,-1)
(347,3)
(348,d[2])
(349,reg)
(350,d)
(351,header)
(352,header)
(353,header)
(354,ohci->card)
(355,4 - z)
(356,header[2] = cpu_to_le32(packet->header[2])
(357,last->control |= cpu_to_le16(DESCRIPTOR_OUTPUT_LAST |\n\\n\\t\\t\\t\\t     DESCRIPTOR_IRQ_ALWAYS |\n\\n\\t\\t\\t\\t     DESCRIPTOR_BRANCH_ALWAYS)
(358,cpu_to_le32(payload_bus)
(359,TCODE_IS_BLOCK_PACKET(tcode)
(360,ctx->ohci)
(361,generation)
(362,z)
(363,packet->payload_length > 0)
(364,payload_length)
(365,packet->header)
(366,device)
(367,__force __le32)
(368,0)
(369,ohci)
(370,packet->header)
(371,1)
(372,&d[3])
(373,)
(374,packet->payload_length > 0)
(375,(OHCI1394_phy_tcode << 4)
(376,3)
(377,d[0])
(378,d[0])
(379,packet->header)
(380,0)
(381,d_bus)
(382,control)
(383,header[1])
(384,header = (__le32 *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^