-----label-----
0
-----code-----
static void goodB2GSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData;
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
36,38
36,39
36,40
36,41
37,38
38,39
38,40
39,40
41,42
41,43
42,43
42,44
44,45
46,47
46,48
47,48
49,50
49,51
50,51
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
-----nextToken-----
2,4,9,11,14,18,20,21,26,29,31,34,35,40,43,45,48,51,54,55,59,61,66,68,72,74,76,80,82,86,88,93,94
-----computeFrom-----
23,24
23,25
24,25
24,26
32,33
32,34
38,39
38,40
49,50
49,51
57,58
57,59
-----guardedBy-----
31,76
34,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2GSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
static void
goodB2GSink()
goodB2GSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData;    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(26,38,0)
(2,19,0)
(4,42,0)
(40,24,0)
(37,24,0)
(1,40,0)
(24,37,0)
(12,39,0)
(40,29,0)
(31,21,0)
(10,2,0)
(13,5,0)
(19,42,0)
(7,12,0)
(43,7,0)
(32,12,0)
(24,40,0)
(20,39,0)
(12,4,0)
(25,13,0)
(29,18,0)
(5,11,0)
(7,39,0)
(42,4,0)
(14,18,0)
(5,13,0)
(3,4,0)
(33,7,0)
(28,38,0)
(27,12,0)
(6,29,0)
(17,39,0)
(17,12,0)
(35,40,0)
(22,32,0)
(41,27,0)
(4,12,0)
(44,37,0)
(0,29,0)
(19,29,0)
(9,15,0)
(21,37,0)
(4,3,0)
(23,12,0)
(34,32,0)
(27,39,0)
(8,9,0)
(30,19,0)
(38,18,0)
(16,17,0)
(37,21,0)
(37,29,0)
(19,2,0)
(42,19,0)
(19,2,1)
(36,17,1)
(22,12,1)
(6,0,1)
(1,37,1)
(12,4,1)
(42,19,1)
(5,13,1)
(30,23,1)
(36,9,1)
(40,29,1)
(43,32,1)
(29,6,1)
(41,7,1)
(4,3,1)
(34,22,1)
(27,12,1)
(4,42,1)
(24,40,1)
(21,31,1)
(7,33,1)
(2,10,1)
(23,24,1)
(27,41,1)
(44,29,1)
(32,12,1)
(19,29,1)
(32,34,1)
(16,27,1)
(31,44,1)
(7,12,1)
(17,12,1)
(37,29,1)
(17,16,1)
(35,1,1)
(13,25,1)
(9,8,1)
(24,37,1)
(10,30,1)
(40,35,1)
(43,5,1)
(33,43,1)
(37,21,1)
(8,24,1)
(25,32,1)
(32,24,2)
(9,24,2)
(37,29,2)
(10,24,2)
(8,24,2)
(13,32,2)
(37,21,2)
(25,32,2)
(24,37,2)
(27,12,2)
(4,24,2)
(5,13,2)
(42,24,2)
(24,40,2)
(33,24,2)
(19,29,2)
(5,32,2)
(40,29,2)
(12,24,2)
(30,24,2)
(32,12,2)
(17,24,2)
(17,12,2)
(12,4,2)
(42,19,2)
(27,24,2)
(35,37,2)
(22,24,2)
(34,24,2)
(4,3,2)
(19,24,2)
(19,2,2)
(41,24,2)
(7,24,2)
(2,24,2)
(7,12,2)
(1,37,2)
(16,24,2)
(43,24,2)
(40,37,2)
(23,24,2)
(4,42,2)
-----------------------------------
(0,data)
(1,data)
(2,sizeof(wchar_t)
(3,wchar_t *)
(4,(wchar_t *)
(5,exit(-1)
(6,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData)
(7,wcscpy(myString, HELLO_STRING)
(8,"Input is less than the length of the source string or too large")
(9,printLine("Input is less than the length of the source string or too large")
(10,wchar_t)
(11,)
(12,myString = (wchar_t *)
(13,-1)
(14,data)
(15,)
(16,myString)
(17,free(myString)
(18,)
(19,data*sizeof(wchar_t)
(20,if (myString == NULL)
(21,wcslen(HELLO_STRING)
(22,myString)
(23,myString)
(24,data > wcslen(HELLO_STRING)
(25,1)
(26,myString)
(27,printWLine(myString)
(28,if (data > wcslen(HELLO_STRING)
(29,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_45_goodB2GData)
(30,data)
(31,HELLO_STRING)
(32,myString == NULL)
(33,HELLO_STRING)
(34,NULL)
(35,100)
(36,RET)
(37,data > wcslen(HELLO_STRING)
(38,)
(39,)
(40,data < 100)
(41,myString)
(42,malloc(data*sizeof(wchar_t)
(43,myString)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^