-----label-----
1
-----code-----
static int badSource(int count)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return count;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
10,12
11,12
12,13
12,14
14,15
14,16
14,17
16,17
17,18
19,20
21,22
21,23
21,24
22,23
22,24
23,24
23,25
23,26
23,27
24,25
26,27
28,29
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
50,51
51,52
-----nextToken-----
2,4,6,8,13,15,18,20,25,27,29,31,33,38,41,43,48,49,52
-----computeFrom-----
22,23
22,24
36,37
36,38
-----guardedBy-----
27,43
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int badSource(int count){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return count;}
static int
badSource(int count)
badSource
int count
int
count
count
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    return count;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return count;
count
count
-----joern-----
(1,2,0)
(19,21,0)
(6,15,0)
(0,4,0)
(1,3,0)
(21,17,0)
(6,1,0)
(8,0,0)
(20,4,0)
(1,18,0)
(7,0,0)
(12,15,0)
(13,0,0)
(6,18,0)
(3,4,0)
(9,6,0)
(14,0,0)
(23,4,0)
(22,6,0)
(10,3,0)
(11,12,0)
(5,12,0)
(0,7,0)
(24,7,0)
(3,1,0)
(16,1,0)
(4,12,0)
(9,6,1)
(22,1,1)
(4,23,1)
(0,8,1)
(10,16,1)
(1,18,1)
(6,18,1)
(16,7,1)
(7,0,1)
(24,0,1)
(1,3,1)
(21,19,1)
(8,13,1)
(7,24,1)
(6,1,1)
(0,4,1)
(6,22,1)
(22,21,1)
(19,7,1)
(13,14,1)
(14,4,1)
(3,10,1)
(3,4,1)
(23,20,1)
(21,7,2)
(19,7,2)
(16,7,2)
(6,18,2)
(10,7,2)
(3,4,2)
(1,7,2)
(3,7,2)
(0,4,2)
(1,18,2)
(6,1,2)
(7,0,2)
(1,3,2)
(9,6,2)
-----------------------------------
(0,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(1,count = atoi(inputBuffer)
(2,)
(3,atoi(inputBuffer)
(4,inputBuffer[CHAR_ARRAY_SIZE] = "")
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,return count;)
(7,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(8,stdin)
(9,RET)
(10,inputBuffer)
(11,inputBuffer)
(12,)
(13,CHAR_ARRAY_SIZE)
(14,inputBuffer)
(15,)
(16,count)
(17,)
(18,int count)
(19,"fgets()
(20,inputBuffer)
(21,printLine("fgets()
(22,count)
(23,"")
(24,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^