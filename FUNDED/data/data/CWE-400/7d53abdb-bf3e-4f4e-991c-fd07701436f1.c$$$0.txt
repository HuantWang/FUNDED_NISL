-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_wchar_t_17_bad()
{
    int i,j;
    wchar_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
39,40
39,41
39,42
40,41
41,42
41,43
43,44
43,45
43,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
73,74
74,75
76,77
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,44,45,47,51,54,56,60,62,67,68,71,72,75,77
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
49,50
49,51
65,66
65,67
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_wchar_t_17_bad(){    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_wchar_t_17_bad()
CWE401_Memory_Leak__strdup_wchar_t_17_bad
{    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(31,17,0)
(23,28,0)
(32,10,0)
(18,10,0)
(26,17,0)
(5,7,0)
(2,26,0)
(22,17,0)
(29,6,0)
(7,29,0)
(1,20,0)
(9,26,0)
(27,7,0)
(0,17,0)
(21,27,0)
(8,15,0)
(28,29,0)
(12,29,0)
(7,27,0)
(15,20,0)
(33,17,0)
(3,17,0)
(4,30,0)
(25,10,0)
(14,20,0)
(19,32,0)
(13,30,0)
(30,10,0)
(28,7,0)
(34,15,0)
(11,1,0)
(16,20,0)
(1,11,1)
(21,5,1)
(20,14,1)
(15,20,1)
(30,10,1)
(4,13,1)
(2,9,1)
(14,16,1)
(12,30,1)
(7,27,1)
(28,7,1)
(23,7,1)
(34,20,1)
(28,23,1)
(18,25,1)
(30,4,1)
(32,19,1)
(5,12,1)
(16,30,1)
(15,8,1)
(34,1,1)
(1,20,1)
(32,10,1)
(13,10,1)
(10,18,1)
(8,34,1)
(19,28,1)
(13,32,1)
(27,21,1)
(26,2,1)
(24,15,1)
(11,15,1)
(25,26,1)
(27,30,2)
(30,30,2)
(30,10,2)
(34,15,2)
(19,30,2)
(21,30,2)
(32,10,2)
(7,27,2)
(8,15,2)
(4,30,2)
(11,15,2)
(23,30,2)
(32,30,2)
(15,20,2)
(15,15,2)
(1,20,2)
(5,30,2)
(12,30,2)
(13,30,2)
(28,30,2)
(1,15,2)
(7,30,2)
(28,7,2)
-----------------------------------
(0,j)
(1,j++)
(2,NULL)
(3,for(i = 0; i < 1; i++)
(4,1)
(5,data)
(6,)
(7,data = wcsdup(myString)
(8,1)
(9,data)
(10,i = 0)
(11,j)
(12,"myString")
(13,i)
(14,0)
(15,j < 1)
(16,j)
(17,)
(18,0)
(19,i)
(20,j = 0)
(21,myString)
(22,data)
(23,data)
(24,RET)
(25,i)
(26,data = NULL)
(27,wcsdup(myString)
(28,printWLine(data)
(29,)
(30,i < 1)
(31,for(j = 0; j < 1; j++)
(32,i++)
(33,i)
(34,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^