-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
29,33
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
53,55
54,55
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
78,80
81,82
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,28,33,37,39,42,44,48,49,55,56,57,58,64,65,66,67,71,75,76,79,80,82
-----computeFrom-----
14,15
14,16
20,21
20,22
31,32
31,33
43,44
43,45
51,52
51,53
60,61
60,62
78,79
78,80
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,2,0)
(34,38,0)
(15,36,0)
(8,6,0)
(2,42,0)
(39,20,0)
(33,0,0)
(16,6,0)
(27,20,0)
(1,45,0)
(20,15,0)
(31,20,0)
(6,15,0)
(23,44,0)
(22,43,0)
(38,0,0)
(8,32,0)
(35,14,0)
(6,8,0)
(37,38,0)
(21,13,0)
(28,10,0)
(5,11,0)
(0,38,0)
(15,2,0)
(41,1,0)
(26,43,0)
(11,30,0)
(0,13,0)
(20,39,0)
(42,11,0)
(44,36,0)
(24,3,0)
(32,36,0)
(17,30,0)
(11,42,0)
(3,43,0)
(25,15,0)
(42,2,0)
(40,43,0)
(9,6,0)
(38,15,0)
(12,10,0)
(39,44,0)
(13,36,0)
(2,4,0)
(19,14,0)
(2,15,0)
(32,8,0)
(30,11,0)
(29,39,0)
(7,3,0)
(38,34,1)
(15,2,1)
(41,14,1)
(6,9,1)
(3,24,1)
(30,17,1)
(20,15,1)
(23,39,1)
(18,10,1)
(39,20,1)
(12,28,1)
(27,13,1)
(25,14,1)
(34,37,1)
(35,3,1)
(14,19,1)
(20,31,1)
(39,29,1)
(1,41,1)
(37,15,1)
(28,32,1)
(11,30,1)
(8,6,1)
(33,38,1)
(28,1,1)
(32,8,1)
(0,38,1)
(21,0,1)
(19,35,1)
(9,16,1)
(2,4,1)
(38,15,1)
(17,5,1)
(2,42,1)
(29,20,1)
(24,7,1)
(42,11,1)
(6,15,1)
(0,33,1)
(44,23,1)
(13,21,1)
(5,25,1)
(10,12,1)
(16,44,1)
(31,27,1)
(20,15,2)
(30,14,2)
(6,14,2)
(42,14,2)
(8,6,2)
(31,14,2)
(16,14,2)
(38,14,2)
(1,14,2)
(39,14,2)
(23,14,2)
(15,14,2)
(34,14,2)
(29,14,2)
(17,14,2)
(41,14,2)
(2,14,2)
(13,14,2)
(9,14,2)
(5,14,2)
(32,8,2)
(0,38,2)
(15,2,2)
(2,4,2)
(42,11,2)
(11,30,2)
(0,14,2)
(2,42,2)
(44,14,2)
(38,15,2)
(33,14,2)
(39,20,2)
(20,14,2)
(27,14,2)
(25,14,2)
(6,15,2)
(21,14,2)
(11,14,2)
(32,14,2)
(37,14,2)
(8,14,2)
-----------------------------------
(0,data[0].intOne)
(1,printLine("Benign, fixed string")
(2,(twoIntsStruct *)
(3,data = NULL)
(4,twoIntsStruct *)
(5,100)
(6,data[0])
(7,data)
(8,&data[0])
(9,0)
(10,5==5)
(11,100*sizeof(twoIntsStruct)
(12,5)
(13,data[0].intOne = 0)
(14,5!=5)
(15,data = (twoIntsStruct *)
(16,data)
(17,twoIntsStruct)
(18,RET)
(19,5)
(20,data[0])
(21,0)
(22,if(5!=5)
(23,0)
(24,NULL)
(25,data)
(26,data)
(27,data)
(28,5)
(29,intTwo)
(30,sizeof(twoIntsStruct)
(31,0)
(32,printStructLine(&data[0])
(33,intOne)
(34,0)
(35,5)
(36,)
(37,data)
(38,data[0])
(39,data[0].intTwo)
(40,if(5==5)
(41,"Benign, fixed string")
(42,ALLOCA(100*sizeof(twoIntsStruct)
(43,)
(44,data[0].intTwo = 0)
(45,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^