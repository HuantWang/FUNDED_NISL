-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FIVE==5)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,31,32,37,39,43,44
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FIVE==5)    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(0,20,0)
(0,14,0)
(19,10,0)
(9,7,0)
(8,10,0)
(14,10,0)
(22,18,0)
(14,18,0)
(3,20,0)
(5,23,0)
(11,7,0)
(0,13,0)
(18,14,0)
(15,13,0)
(17,13,0)
(13,1,0)
(16,23,0)
(12,3,0)
(21,10,0)
(2,0,0)
(4,14,0)
(13,17,1)
(0,13,1)
(9,14,1)
(23,5,1)
(3,12,1)
(16,7,1)
(15,7,1)
(6,3,1)
(2,23,1)
(0,2,1)
(14,18,1)
(5,16,1)
(22,4,1)
(7,11,1)
(6,23,1)
(18,22,1)
(0,14,1)
(11,9,1)
(17,15,1)
(16,13,1)
(12,0,1)
(0,23,2)
(14,18,2)
(15,7,2)
(2,23,2)
(13,7,2)
(3,23,2)
(12,23,2)
(0,14,2)
(17,7,2)
(0,13,2)
-----------------------------------
(0,SLEEP(count)
(1,)
(2,count)
(3,printLine("Sleep time possibly too long")
(4,count)
(5,5)
(6,RET)
(7,STATIC_CONST_FIVE==5)
(8,if(STATIC_CONST_FIVE==5)
(9,STATIC_CONST_FIVE)
(10,)
(11,5)
(12,"Sleep time possibly too long")
(13,count = 20)
(14,count = -1)
(15,count)
(16,STATIC_CONST_FIVE)
(17,20)
(18,-1)
(19,count)
(20,)
(21,if(STATIC_CONST_FIVE==5)
(22,1)
(23,STATIC_CONST_FIVE==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^