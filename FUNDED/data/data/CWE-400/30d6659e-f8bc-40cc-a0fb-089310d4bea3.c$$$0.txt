-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_01_bad()
{
    {
        char * data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (char *)realloc(data, (130000)*sizeof(char));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            strcpy(data, "New String");
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
6,10
6,11
6,12
7,8
8,9
8,10
10,11
10,12
10,13
13,14
14,15
14,16
15,16
15,17
17,18
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
63,66
64,65
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
81,84
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,9,11,12,16,18,21,23,26,27,31,33,38,40,44,46,47,51,53,57,60,62,65,67,70,73,74,78,80,85,87,88,92,94,98,100
-----computeFrom-----
22,23
22,24
29,30
29,31
55,56
55,57
68,69
68,70
76,77
76,78
-----guardedBy-----
78,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_01_bad(){    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_01_bad()
CWE401_Memory_Leak__malloc_realloc_char_01_bad
{    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }}
{        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(26,43,0)
(6,23,0)
(44,0,0)
(19,2,0)
(22,2,0)
(10,11,0)
(24,36,0)
(0,44,0)
(15,7,0)
(45,17,0)
(0,24,0)
(21,44,0)
(46,0,0)
(1,43,0)
(26,24,0)
(4,16,0)
(41,25,0)
(43,24,0)
(18,24,0)
(31,39,0)
(40,37,0)
(27,1,0)
(39,31,0)
(42,25,0)
(2,43,0)
(47,8,0)
(8,17,0)
(44,21,0)
(31,43,0)
(33,24,0)
(40,23,0)
(20,24,0)
(29,16,0)
(3,4,0)
(1,44,0)
(2,24,0)
(34,43,0)
(5,31,0)
(25,41,0)
(9,12,0)
(44,1,0)
(32,8,0)
(12,43,0)
(16,1,0)
(13,45,0)
(43,31,0)
(28,26,0)
(7,17,0)
(39,25,0)
(11,0,0)
(1,16,0)
(23,40,0)
(8,0,0)
(38,12,0)
(30,41,0)
(14,11,0)
(16,4,0)
(31,5,0)
(45,0,0)
(7,0,0)
(25,39,0)
(19,22,1)
(26,28,1)
(43,31,1)
(6,12,1)
(42,34,1)
(38,9,1)
(10,0,1)
(47,11,1)
(30,42,1)
(25,41,1)
(1,16,1)
(22,40,1)
(11,0,1)
(9,43,1)
(11,14,1)
(29,27,1)
(46,26,1)
(2,19,1)
(7,15,1)
(35,11,1)
(45,13,1)
(15,45,1)
(16,4,1)
(28,2,1)
(31,5,1)
(45,0,1)
(13,8,1)
(32,47,1)
(44,21,1)
(41,30,1)
(26,43,1)
(39,25,1)
(14,10,1)
(23,6,1)
(1,43,1)
(8,0,1)
(27,46,1)
(4,3,1)
(40,23,1)
(12,38,1)
(2,43,1)
(7,0,1)
(8,32,1)
(3,29,1)
(12,43,1)
(31,39,1)
(0,44,1)
(22,12,1)
(35,7,1)
(44,1,1)
(1,43,2)
(44,21,2)
(13,11,2)
(7,0,2)
(45,0,2)
(6,12,2)
(1,16,2)
(16,4,2)
(25,41,2)
(45,11,2)
(15,11,2)
(40,12,2)
(47,11,2)
(43,31,2)
(8,0,2)
(32,11,2)
(12,43,2)
(11,0,2)
(7,11,2)
(40,23,2)
(23,12,2)
(2,43,2)
(44,1,2)
(39,25,2)
(31,39,2)
(31,5,2)
(0,44,2)
(26,43,2)
(8,11,2)
-----------------------------------
(0,data = (char *)
(1,realloc(data, (130000)
(2,strcpy(data, "A String")
(3,char)
(4,sizeof(char)
(5,char *)
(6,1)
(7,free(data)
(8,strcpy(data, "New String")
(9,data)
(10,data)
(11,data != NULL)
(12,data == NULL)
(13,data)
(14,NULL)
(15,data)
(16,(130000)
(17,)
(18,if (data == NULL)
(19,"A String")
(20,if (data != NULL)
(21,char *)
(22,data)
(23,-1)
(24,)
(25,100*sizeof(char)
(26,printLine(data)
(27,data)
(28,data)
(29,130000)
(30,char)
(31,(char *)
(32,"New String")
(33,data)
(34,data)
(35,RET)
(36,)
(37,)
(38,NULL)
(39,malloc(100*sizeof(char)
(40,exit(-1)
(41,sizeof(char)
(42,100)
(43,* data = (char *)
(44,(char *)
(45,printLine(data)
(46,data)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^