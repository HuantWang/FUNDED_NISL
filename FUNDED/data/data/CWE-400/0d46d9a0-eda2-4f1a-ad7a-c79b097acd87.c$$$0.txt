-----label-----
0
-----code-----
static void ravb_ring_free(struct net_device *ndev, int q)
{
	struct ravb_private *priv = netdev_priv(ndev);
	int num_tx_desc = priv->num_tx_desc;
	int ring_size;
	int i;

	if (priv->rx_ring[q]) {
		for (i = 0; i < priv->num_rx_ring[q]; i++) {
			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];

			if (!dma_mapping_error(ndev->dev.parent,
					       le32_to_cpu(desc->dptr)))
				dma_unmap_single(ndev->dev.parent,
						 le32_to_cpu(desc->dptr),
						 priv->rx_buf_sz,
						 DMA_FROM_DEVICE);
		}
		ring_size = sizeof(struct ravb_ex_rx_desc) *
			    (priv->num_rx_ring[q] + 1);
		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],
				  priv->rx_desc_dma[q]);
		priv->rx_ring[q] = NULL;
	}

	if (priv->tx_ring[q]) {
		ravb_tx_free(ndev, q, false);

		ring_size = sizeof(struct ravb_tx_desc) *
			    (priv->num_tx_ring[q] * num_tx_desc + 1);
		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],
				  priv->tx_desc_dma[q]);
		priv->tx_ring[q] = NULL;
	}

	/* Free RX skb ringbuffer */
	if (priv->rx_skb[q]) {
		for (i = 0; i < priv->num_rx_ring[q]; i++)
			dev_kfree_skb(priv->rx_skb[q][i]);
	}
	kfree(priv->rx_skb[q]);
	priv->rx_skb[q] = NULL;

	/* Free aligned TX buffers */
	kfree(priv->tx_align[q]);
	priv->tx_align[q] = NULL;

	/* Free TX skb ringbuffer.
	 * SKBs are freed by ravb_tx_free() call above.
	 */
	kfree(priv->tx_skb[q]);
	priv->tx_skb[q] = NULL;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
42,43
44,45
45,46
45,47
47,48
49,50
49,51
50,51
50,52
51,52
51,53
52,53
55,56
57,58
57,59
57,60
57,61
58,59
58,60
58,61
58,62
59,60
60,61
60,62
61,62
64,65
64,66
65,66
67,68
67,69
68,69
68,70
69,70
72,73
74,75
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
82,85
85,86
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
95,96
97,98
97,99
98,99
99,100
99,101
99,102
100,101
102,103
102,104
103,104
103,105
104,105
108,109
108,110
109,110
111,112
111,113
112,113
115,116
116,117
116,118
116,119
116,120
116,121
117,118
119,120
119,121
120,121
120,122
121,122
125,126
125,127
126,127
128,129
128,130
129,130
132,133
132,134
133,134
136,137
138,139
139,140
139,141
140,141
142,143
142,144
143,144
144,145
144,146
145,146
148,149
149,150
149,151
150,151
150,152
151,152
151,153
152,153
155,156
158,159
159,160
159,161
159,162
159,163
159,164
160,161
162,163
162,164
163,164
163,165
164,165
168,169
170,171
170,172
171,172
171,173
172,173
175,176
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
186,188
187,188
187,189
188,189
191,192
193,194
195,196
195,197
196,197
196,198
197,198
197,199
198,199
201,202
203,204
203,205
203,206
203,207
204,205
205,206
205,207
205,208
205,209
206,207
208,209
210,211
213,214
214,215
214,216
215,216
217,218
217,219
218,219
219,220
219,221
220,221
223,224
224,225
224,226
225,226
225,227
226,227
226,228
227,228
227,229
228,229
231,232
233,234
236,237
237,238
237,239
237,240
237,241
237,242
238,239
240,241
240,242
241,242
241,243
242,243
246,247
248,249
248,250
249,250
249,251
250,251
253,254
255,256
255,257
256,257
256,258
257,258
260,261
262,263
263,264
263,265
264,265
264,266
265,266
265,267
266,267
269,270
271,272
273,274
273,275
274,275
274,276
275,276
275,277
276,277
279,280
281,282
282,283
282,284
282,285
282,286
283,284
284,285
284,286
285,286
288,289
288,290
289,290
291,292
291,293
292,293
292,294
293,294
296,297
298,299
299,300
301,302
302,303
302,304
303,304
305,306
305,307
306,307
306,308
307,308
307,309
308,309
311,312
313,314
315,316
316,317
316,318
317,318
319,320
319,321
320,321
320,322
321,322
324,325
326,327
327,328
327,329
328,329
328,330
329,330
329,331
330,331
333,334
335,336
337,338
338,339
338,340
339,340
341,342
341,343
342,343
342,344
343,344
346,347
348,349
349,350
349,351
350,351
350,352
351,352
351,353
352,353
355,356
357,358
359,360
360,361
360,362
361,362
363,364
363,365
364,365
364,366
365,366
368,369
370,371
371,372
371,373
372,373
372,374
373,374
373,375
374,375
377,378
379,380
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,31,33,37,38,41,43,46,48,53,54,56,62,63,66,70,71,73,76,81,83,84,91,92,94,96,101,105,106,107,110,113,114,118,122,123,124,127,130,131,134,135,137,141,146,147,153,154,156,157,161,165,166,167,169,173,174,176,180,181,183,189,190,192,194,199,200,202,207,209,211,212,216,221,222,229,230,232,234,235,239,243,244,245,247,251,252,254,258,259,261,267,268,270,272,277,278,280,286,287,290,294,295,297,300,304,309,310,312,314,318,322,323,325,331,332,334,336,340,344,345,347,353,354,356,358,362,366,367,369,375,376,378,380
-----computeFrom-----
60,61
60,62
64,65
64,66
139,140
139,141
142,143
142,144
149,150
149,151
185,186
185,187
214,215
214,216
217,218
217,219
224,225
224,226
225,226
225,227
263,264
263,265
284,285
284,286
288,289
288,290
327,328
327,329
349,350
349,351
371,372
371,373
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void ravb_ring_free(struct net_device *ndev, int q){	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	int ring_size;	int i;	if (priv->rx_ring[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}	if (priv->tx_ring[q]) {		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}	/* Free RX skb ringbuffer */	if (priv->rx_skb[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}	kfree(priv->rx_skb[q]);	priv->rx_skb[q] = NULL;	/* Free aligned TX buffers */	kfree(priv->tx_align[q]);	priv->tx_align[q] = NULL;	/* Free TX skb ringbuffer.	 * SKBs are freed by ravb_tx_free() call above.	 */	kfree(priv->tx_skb[q]);	priv->tx_skb[q] = NULL;}
static void
ravb_ring_free(struct net_device *ndev, int q)
ravb_ring_free
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
int q
int
q
q
{	struct ravb_private *priv = netdev_priv(ndev);	int num_tx_desc = priv->num_tx_desc;	int ring_size;	int i;	if (priv->rx_ring[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}	if (priv->tx_ring[q]) {		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}	/* Free RX skb ringbuffer */	if (priv->rx_skb[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}	kfree(priv->rx_skb[q]);	priv->rx_skb[q] = NULL;	/* Free aligned TX buffers */	kfree(priv->tx_align[q]);	priv->tx_align[q] = NULL;	/* Free TX skb ringbuffer.	 * SKBs are freed by ravb_tx_free() call above.	 */	kfree(priv->tx_skb[q]);	priv->tx_skb[q] = NULL;}
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private *priv = netdev_priv(ndev);
struct ravb_private
ravb_private
*priv = netdev_priv(ndev)
*
priv
= netdev_priv(ndev)
netdev_priv(ndev)
netdev_priv
netdev_priv
ndev
ndev
int num_tx_desc = priv->num_tx_desc;
int num_tx_desc = priv->num_tx_desc;
int
num_tx_desc = priv->num_tx_desc
num_tx_desc
= priv->num_tx_desc
priv->num_tx_desc
priv
priv
num_tx_desc
int ring_size;
int ring_size;
int
ring_size
ring_size
int i;
int i;
int
i
i
if (priv->rx_ring[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
{		for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);		}		ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);		priv->rx_ring[q] = NULL;	}
for (i = 0; i < priv->num_rx_ring[q]; i++) {			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);		}
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
{			struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];			if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);		}
struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];
struct ravb_ex_rx_desc *desc = &priv->rx_ring[q][i];
struct ravb_ex_rx_desc
ravb_ex_rx_desc
*desc = &priv->rx_ring[q][i]
*
desc
= &priv->rx_ring[q][i]
&priv->rx_ring[q][i]
priv->rx_ring[q][i]
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
i
i
if (!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr)))				dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);
!dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr))
dma_mapping_error(ndev->dev.parent,					       le32_to_cpu(desc->dptr))
dma_mapping_error
dma_mapping_error
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
le32_to_cpu(desc->dptr)
le32_to_cpu
le32_to_cpu
desc->dptr
desc
desc
dptr
dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE);
dma_unmap_single(ndev->dev.parent,						 le32_to_cpu(desc->dptr),						 priv->rx_buf_sz,						 DMA_FROM_DEVICE)
dma_unmap_single
dma_unmap_single
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
le32_to_cpu(desc->dptr)
le32_to_cpu
le32_to_cpu
desc->dptr
desc
desc
dptr
priv->rx_buf_sz
priv
priv
rx_buf_sz
DMA_FROM_DEVICE
DMA_FROM_DEVICE
ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1);
ring_size = sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1)
ring_size
ring_size
sizeof(struct ravb_ex_rx_desc) *			    (priv->num_rx_ring[q] + 1)
sizeof(struct ravb_ex_rx_desc)
struct ravb_ex_rx_desc
struct ravb_ex_rx_desc
ravb_ex_rx_desc

(priv->num_rx_ring[q] + 1)
priv->num_rx_ring[q] + 1
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
1
dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q]);
dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],				  priv->rx_desc_dma[q])
dma_free_coherent
dma_free_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
priv->rx_desc_dma[q]
priv->rx_desc_dma
priv
priv
rx_desc_dma
q
q
priv->rx_ring[q] = NULL;
priv->rx_ring[q] = NULL
priv->rx_ring[q]
priv->rx_ring
priv
priv
rx_ring
q
q
NULL
NULL
if (priv->tx_ring[q]) {		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
{		ravb_tx_free(ndev, q, false);		ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);		dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);		priv->tx_ring[q] = NULL;	}
ravb_tx_free(ndev, q, false);
ravb_tx_free(ndev, q, false)
ravb_tx_free
ravb_tx_free
ndev
ndev
q
q
false
ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1);
ring_size = sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1)
ring_size
ring_size
sizeof(struct ravb_tx_desc) *			    (priv->num_tx_ring[q] * num_tx_desc + 1)
sizeof(struct ravb_tx_desc)
struct ravb_tx_desc
struct ravb_tx_desc
ravb_tx_desc

(priv->num_tx_ring[q] * num_tx_desc + 1)
priv->num_tx_ring[q] * num_tx_desc + 1
priv->num_tx_ring[q] * num_tx_desc
priv->num_tx_ring[q]
priv->num_tx_ring
priv
priv
num_tx_ring
q
q
num_tx_desc
num_tx_desc
1
dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q]);
dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],				  priv->tx_desc_dma[q])
dma_free_coherent
dma_free_coherent
ndev->dev.parent
ndev->dev
ndev
ndev
dev
parent
ring_size
ring_size
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
priv->tx_desc_dma[q]
priv->tx_desc_dma
priv
priv
tx_desc_dma
q
q
priv->tx_ring[q] = NULL;
priv->tx_ring[q] = NULL
priv->tx_ring[q]
priv->tx_ring
priv
priv
tx_ring
q
q
NULL
NULL
if (priv->rx_skb[q]) {		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
{		for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);	}
for (i = 0; i < priv->num_rx_ring[q]; i++)			dev_kfree_skb(priv->rx_skb[q][i]);
i = 0;
i = 0
i
i
0
i < priv->num_rx_ring[q]
i
i
priv->num_rx_ring[q]
priv->num_rx_ring
priv
priv
num_rx_ring
q
q
i++
i
i
dev_kfree_skb(priv->rx_skb[q][i]);
dev_kfree_skb(priv->rx_skb[q][i])
dev_kfree_skb
dev_kfree_skb
priv->rx_skb[q][i]
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
i
i
kfree(priv->rx_skb[q]);
kfree(priv->rx_skb[q])
kfree
kfree
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
priv->rx_skb[q] = NULL;
priv->rx_skb[q] = NULL
priv->rx_skb[q]
priv->rx_skb
priv
priv
rx_skb
q
q
NULL
NULL
kfree(priv->tx_align[q]);
kfree(priv->tx_align[q])
kfree
kfree
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
priv->tx_align[q] = NULL;
priv->tx_align[q] = NULL
priv->tx_align[q]
priv->tx_align
priv
priv
tx_align
q
q
NULL
NULL
kfree(priv->tx_skb[q]);
kfree(priv->tx_skb[q])
kfree
kfree
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
priv->tx_skb[q] = NULL;
priv->tx_skb[q] = NULL
priv->tx_skb[q]
priv->tx_skb
priv
priv
tx_skb
q
q
NULL
NULL
-----joern-----
(128,136,0)
(108,175,0)
(54,16,0)
(145,87,0)
(214,49,0)
(97,181,0)
(209,10,0)
(190,15,0)
(23,189,0)
(99,200,0)
(166,145,0)
(85,20,0)
(165,183,0)
(96,92,0)
(136,220,0)
(14,31,0)
(13,2,0)
(69,56,0)
(154,112,0)
(83,146,0)
(107,149,0)
(3,40,0)
(83,103,0)
(213,20,0)
(91,2,0)
(195,226,0)
(205,177,0)
(8,129,0)
(75,158,0)
(159,221,0)
(87,35,0)
(11,89,0)
(49,35,0)
(16,89,0)
(198,114,0)
(6,35,0)
(114,198,0)
(226,195,0)
(115,211,0)
(212,180,0)
(211,115,0)
(40,3,0)
(87,145,0)
(117,91,0)
(106,87,0)
(74,48,0)
(178,122,0)
(59,220,0)
(200,2,0)
(3,199,0)
(179,55,0)
(197,11,0)
(181,189,0)
(28,16,0)
(187,91,0)
(188,12,0)
(1,65,0)
(146,183,0)
(107,16,0)
(123,171,0)
(92,35,0)
(127,221,0)
(140,221,0)
(177,116,0)
(119,125,0)
(80,188,0)
(57,76,0)
(139,42,0)
(90,125,0)
(20,58,0)
(48,58,0)
(225,5,0)
(30,125,0)
(4,199,0)
(81,71,0)
(101,35,0)
(110,195,0)
(220,59,0)
(176,84,0)
(31,2,0)
(17,13,0)
(109,211,0)
(189,43,0)
(219,188,0)
(133,216,0)
(33,46,0)
(98,200,0)
(168,1,0)
(42,12,0)
(15,36,0)
(138,111,0)
(12,42,0)
(201,112,0)
(158,6,0)
(180,92,0)
(58,18,0)
(100,183,0)
(147,175,0)
(145,65,0)
(181,2,0)
(224,85,0)
(37,107,0)
(129,64,0)
(19,226,0)
(103,185,0)
(47,189,0)
(177,2,0)
(95,122,0)
(193,125,0)
(52,135,0)
(206,223,0)
(148,18,0)
(191,200,0)
(198,175,0)
(174,112,0)
(63,171,0)
(176,35,0)
(48,35,0)
(112,201,0)
(56,89,0)
(142,164,0)
(148,2,0)
(155,89,0)
(222,70,0)
(146,83,0)
(51,2,0)
(82,6,0)
(137,125,0)
(195,35,0)
(26,5,0)
(164,2,0)
(118,226,0)
(39,58,0)
(15,43,0)
(129,36,0)
(176,100,0)
(42,65,0)
(86,164,0)
(41,59,0)
(21,84,0)
(43,15,0)
(101,164,0)
(5,225,0)
(171,63,0)
(32,225,0)
(73,65,0)
(149,107,0)
(194,23,0)
(157,65,0)
(141,181,0)
(206,35,0)
(124,116,0)
(198,35,0)
(18,148,0)
(192,84,0)
(40,36,0)
(143,31,0)
(207,76,0)
(120,148,0)
(126,125,0)
(173,115,0)
(114,125,0)
(171,35,0)
(116,35,0)
(167,42,0)
(12,35,0)
(112,2,0)
(76,83,0)
(163,225,0)
(155,23,0)
(31,48,0)
(201,102,0)
(2,125,0)
(58,20,0)
(172,12,0)
(211,159,0)
(3,52,0)
(135,2,0)
(149,64,0)
(77,100,0)
(88,159,0)
(160,136,0)
(218,146,0)
(136,89,0)
(106,2,0)
(161,199,0)
(158,2,0)
(12,188,0)
(156,161,0)
(185,103,0)
(27,56,0)
(23,155,0)
(135,52,0)
(201,35,0)
(93,94,0)
(138,35,0)
(215,18,0)
(5,211,0)
(9,102,0)
(151,63,0)
(49,46,0)
(91,206,0)
(34,106,0)
(6,158,0)
(45,201,0)
(116,177,0)
(116,59,0)
(67,198,0)
(87,106,0)
(138,94,0)
(225,2,0)
(103,83,0)
(122,115,0)
(94,125,0)
(221,89,0)
(72,71,0)
(64,129,0)
(58,48,0)
(84,176,0)
(223,206,0)
(83,76,0)
(111,138,0)
(224,216,0)
(53,111,0)
(162,129,0)
(188,2,0)
(220,136,0)
(169,50,0)
(115,122,0)
(55,207,0)
(175,198,0)
(115,35,0)
(76,207,0)
(210,133,0)
(25,13,0)
(5,35,0)
(99,35,0)
(46,2,0)
(61,138,0)
(104,199,0)
(130,63,0)
(22,177,0)
(170,56,0)
(59,216,0)
(159,211,0)
(193,92,0)
(132,38,0)
(211,5,0)
(38,125,0)
(16,107,0)
(42,139,0)
(36,71,0)
(52,3,0)
(204,207,0)
(217,155,0)
(122,2,0)
(92,193,0)
(79,68,0)
(85,224,0)
(78,111,0)
(189,181,0)
(113,135,0)
(102,125,0)
(59,116,0)
(101,59,0)
(60,99,0)
(68,195,0)
(208,149,0)
(223,125,0)
(59,224,0)
(134,101,0)
(184,158,0)
(36,40,0)
(189,23,0)
(164,101,0)
(70,85,0)
(29,125,0)
(24,224,0)
(10,13,0)
(56,35,0)
(207,35,0)
(56,216,0)
(2,11,0)
(20,85,0)
(211,183,0)
(13,10,0)
(186,176,0)
(6,38,0)
(152,135,0)
(182,3,0)
(121,55,0)
(175,2,0)
(111,2,0)
(150,46,0)
(64,149,0)
(18,125,0)
(66,155,0)
(195,68,0)
(92,180,0)
(196,148,0)
(131,206,0)
(11,2,0)
(105,87,0)
(55,2,0)
(221,159,0)
(52,35,0)
(44,106,0)
(180,2,0)
(144,125,0)
(153,52,0)
(10,35,0)
(62,220,0)
(46,49,0)
(0,180,0)
(59,101,0)
(84,2,0)
(99,133,0)
(43,189,0)
(48,31,0)
(70,222,0)
(207,55,0)
(7,36,0)
(85,70,0)
(200,99,0)
(206,91,0)
(149,208,0)
(68,199,0)
(226,2,0)
(63,2,0)
(202,15,0)
(211,146,0)
(87,35,1)
(211,146,1)
(76,207,1)
(62,136,1)
(98,191,1)
(103,218,1)
(209,13,1)
(26,225,1)
(220,62,1)
(94,93,1)
(215,2,1)
(138,61,1)
(203,38,1)
(32,115,1)
(40,3,1)
(0,212,1)
(161,156,1)
(146,83,1)
(176,35,1)
(103,185,1)
(212,49,1)
(46,2,1)
(129,36,1)
(42,12,1)
(208,149,1)
(74,31,1)
(67,175,1)
(191,59,1)
(199,4,1)
(59,101,1)
(188,219,1)
(182,52,1)
(193,92,1)
(106,34,1)
(23,194,1)
(156,208,1)
(99,35,1)
(127,146,1)
(12,35,1)
(213,58,1)
(111,2,1)
(150,171,1)
(140,127,1)
(177,205,1)
(57,207,1)
(150,133,1)
(121,179,1)
(16,89,1)
(148,2,1)
(112,174,1)
(6,82,1)
(84,2,1)
(201,112,1)
(207,35,1)
(13,25,1)
(207,55,1)
(7,68,1)
(66,217,1)
(135,113,1)
(148,196,1)
(36,40,1)
(166,65,1)
(223,206,1)
(99,60,1)
(218,68,1)
(25,17,1)
(22,41,1)
(189,181,1)
(18,148,1)
(152,7,1)
(56,35,1)
(12,188,1)
(138,35,1)
(5,35,1)
(206,131,1)
(38,132,1)
(197,51,1)
(134,164,1)
(3,182,1)
(178,109,1)
(44,166,1)
(195,226,1)
(187,117,1)
(166,1,1)
(47,181,1)
(153,135,1)
(205,22,1)
(77,176,1)
(200,2,1)
(110,226,1)
(162,107,1)
(131,91,1)
(214,46,1)
(176,84,1)
(202,23,1)
(2,11,1)
(59,116,1)
(139,42,1)
(48,74,1)
(85,20,1)
(207,204,1)
(63,130,1)
(59,224,1)
(147,94,1)
(52,153,1)
(160,128,1)
(85,70,1)
(13,2,1)
(34,44,1)
(116,124,1)
(56,27,1)
(42,65,1)
(168,139,1)
(145,65,1)
(102,9,1)
(130,151,1)
(221,89,1)
(10,209,1)
(135,2,1)
(60,200,1)
(11,197,1)
(226,2,1)
(174,154,1)
(156,189,1)
(210,99,1)
(92,35,1)
(78,53,1)
(138,111,1)
(58,39,1)
(28,36,1)
(122,2,1)
(101,134,1)
(211,115,1)
(184,75,1)
(82,158,1)
(31,2,1)
(192,211,1)
(65,73,1)
(69,171,1)
(190,202,1)
(171,35,1)
(3,52,1)
(106,2,1)
(186,84,1)
(105,106,1)
(154,114,1)
(3,199,1)
(75,223,1)
(52,135,1)
(116,177,1)
(167,12,1)
(107,37,1)
(87,105,1)
(56,89,1)
(115,173,1)
(46,33,1)
(12,172,1)
(124,177,1)
(49,214,1)
(48,31,1)
(93,138,1)
(39,48,1)
(95,178,1)
(70,222,1)
(115,35,1)
(176,186,1)
(113,152,1)
(91,187,1)
(177,2,1)
(151,100,1)
(170,69,1)
(159,88,1)
(200,98,1)
(24,56,1)
(23,155,1)
(198,175,1)
(55,121,1)
(11,89,1)
(73,157,1)
(20,58,1)
(61,111,1)
(181,141,1)
(145,87,1)
(55,2,1)
(9,201,1)
(84,21,1)
(217,208,1)
(206,35,1)
(171,123,1)
(49,35,1)
(100,77,1)
(1,168,1)
(225,2,1)
(20,213,1)
(70,24,1)
(43,15,1)
(64,129,1)
(63,2,1)
(10,35,1)
(37,16,1)
(226,19,1)
(196,120,1)
(107,16,1)
(225,163,1)
(211,5,1)
(15,36,1)
(31,14,1)
(143,70,1)
(96,180,1)
(173,122,1)
(189,47,1)
(108,147,1)
(15,190,1)
(175,108,1)
(53,193,1)
(195,35,1)
(87,106,1)
(27,170,1)
(128,224,1)
(158,2,1)
(188,2,1)
(224,85,1)
(220,136,1)
(149,64,1)
(45,112,1)
(151,10,1)
(4,104,1)
(17,18,1)
(136,160,1)
(172,188,1)
(132,6,1)
(49,46,1)
(112,2,1)
(163,32,1)
(48,35,1)
(116,35,1)
(195,110,1)
(52,35,1)
(149,107,1)
(204,55,1)
(58,18,1)
(171,63,1)
(155,89,1)
(179,103,1)
(189,43,1)
(1,65,1)
(189,23,1)
(198,35,1)
(212,145,1)
(86,116,1)
(88,221,1)
(83,76,1)
(104,10,1)
(114,198,1)
(19,118,1)
(21,192,1)
(118,79,1)
(164,142,1)
(142,86,1)
(79,199,1)
(80,145,1)
(111,78,1)
(161,199,1)
(76,57,1)
(101,164,1)
(54,28,1)
(91,2,1)
(68,199,1)
(122,95,1)
(8,162,1)
(136,89,1)
(180,2,1)
(16,54,1)
(109,159,1)
(141,97,1)
(180,0,1)
(211,159,1)
(101,35,1)
(198,67,1)
(158,184,1)
(159,221,1)
(58,48,1)
(92,180,1)
(120,215,1)
(115,122,1)
(83,103,1)
(201,35,1)
(14,143,1)
(164,2,1)
(6,158,1)
(219,80,1)
(201,45,1)
(33,150,1)
(41,220,1)
(92,96,1)
(6,35,1)
(194,155,1)
(129,8,1)
(97,43,1)
(221,140,1)
(133,210,1)
(42,167,1)
(5,225,1)
(206,91,1)
(157,49,1)
(79,161,1)
(181,2,1)
(155,66,1)
(68,195,1)
(5,26,1)
(175,2,1)
(10,13,1)
(117,102,1)
(99,200,1)
(59,220,1)
(123,63,1)
(44,145,2)
(99,35,2)
(129,68,2)
(208,149,2)
(62,171,2)
(192,10,2)
(48,35,2)
(193,92,2)
(164,2,2)
(100,10,2)
(40,3,2)
(20,58,2)
(153,68,2)
(173,10,2)
(48,171,2)
(139,42,2)
(225,2,2)
(107,16,2)
(106,49,2)
(55,2,2)
(19,68,2)
(84,10,2)
(59,116,2)
(162,68,2)
(211,115,2)
(55,10,2)
(176,84,2)
(15,208,2)
(36,40,2)
(146,83,2)
(1,65,2)
(99,171,2)
(103,185,2)
(97,208,2)
(21,10,2)
(221,89,2)
(91,2,2)
(76,207,2)
(68,199,2)
(142,171,2)
(26,10,2)
(116,171,2)
(68,10,2)
(49,35,2)
(92,180,2)
(3,199,2)
(27,171,2)
(217,208,2)
(127,10,2)
(118,10,2)
(114,198,2)
(161,199,2)
(106,2,2)
(198,35,2)
(23,155,2)
(104,10,2)
(218,10,2)
(115,35,2)
(105,145,2)
(79,68,2)
(13,2,2)
(60,171,2)
(68,195,2)
(110,68,2)
(77,10,2)
(6,35,2)
(207,35,2)
(98,171,2)
(28,68,2)
(118,68,2)
(42,65,2)
(1,145,2)
(133,171,2)
(181,2,2)
(10,35,2)
(79,10,2)
(7,68,2)
(101,171,2)
(112,2,2)
(200,2,2)
(121,10,2)
(85,171,2)
(201,112,2)
(5,225,2)
(12,188,2)
(152,68,2)
(58,171,2)
(99,200,2)
(226,68,2)
(106,145,2)
(210,171,2)
(186,10,2)
(16,89,2)
(138,35,2)
(122,10,2)
(200,171,2)
(59,224,2)
(180,2,2)
(171,63,2)
(37,68,2)
(86,171,2)
(189,181,2)
(58,18,2)
(194,208,2)
(32,10,2)
(226,2,2)
(23,208,2)
(70,171,2)
(40,68,2)
(221,10,2)
(138,111,2)
(92,35,2)
(16,68,2)
(109,10,2)
(181,208,2)
(171,35,2)
(170,171,2)
(146,10,2)
(105,49,2)
(145,49,2)
(11,89,2)
(73,49,2)
(211,5,2)
(83,76,2)
(166,49,2)
(14,171,2)
(63,2,2)
(168,145,2)
(220,171,2)
(56,89,2)
(211,146,2)
(4,10,2)
(128,171,2)
(202,208,2)
(134,171,2)
(48,31,2)
(159,10,2)
(10,13,2)
(52,35,2)
(84,2,2)
(201,35,2)
(141,208,2)
(176,10,2)
(139,145,2)
(191,171,2)
(158,2,2)
(176,35,2)
(211,10,2)
(85,20,2)
(59,220,2)
(65,49,2)
(145,87,2)
(87,49,2)
(178,10,2)
(88,10,2)
(224,85,2)
(219,145,2)
(206,35,2)
(136,89,2)
(76,10,2)
(116,35,2)
(157,49,2)
(110,10,2)
(103,10,2)
(124,171,2)
(56,171,2)
(175,2,2)
(39,171,2)
(115,122,2)
(54,68,2)
(59,171,2)
(58,48,2)
(52,135,2)
(101,164,2)
(20,171,2)
(122,2,2)
(161,68,2)
(34,145,2)
(70,222,2)
(87,106,2)
(149,107,2)
(3,68,2)
(155,89,2)
(6,158,2)
(49,46,2)
(135,2,2)
(198,175,2)
(224,171,2)
(223,206,2)
(116,177,2)
(205,171,2)
(172,145,2)
(208,68,2)
(95,10,2)
(188,2,2)
(5,10,2)
(44,49,2)
(140,10,2)
(199,10,2)
(12,35,2)
(24,171,2)
(129,36,2)
(36,68,2)
(56,35,2)
(204,10,2)
(163,10,2)
(107,68,2)
(207,10,2)
(8,68,2)
(211,159,2)
(18,148,2)
(64,68,2)
(189,208,2)
(225,10,2)
(83,103,2)
(42,145,2)
(85,70,2)
(31,171,2)
(47,208,2)
(177,2,2)
(145,145,2)
(46,2,2)
(57,10,2)
(101,35,2)
(149,64,2)
(59,101,2)
(135,68,2)
(12,145,2)
(43,208,2)
(145,65,2)
(156,68,2)
(182,68,2)
(69,171,2)
(177,171,2)
(66,208,2)
(83,10,2)
(226,10,2)
(195,226,2)
(22,171,2)
(188,145,2)
(15,36,2)
(34,49,2)
(166,145,2)
(43,15,2)
(207,55,2)
(5,35,2)
(115,10,2)
(148,2,2)
(195,10,2)
(159,221,2)
(52,68,2)
(179,10,2)
(80,145,2)
(213,171,2)
(87,145,2)
(189,23,2)
(190,208,2)
(42,12,2)
(68,68,2)
(149,68,2)
(87,35,2)
(195,35,2)
(155,208,2)
(206,91,2)
(189,43,2)
(220,136,2)
(143,171,2)
(64,129,2)
(111,2,2)
(3,52,2)
(113,68,2)
(2,11,2)
(74,171,2)
(164,171,2)
(167,145,2)
(19,10,2)
(41,171,2)
(31,2,2)
(160,171,2)
(195,68,2)
(136,171,2)
-----------------------------------
(0,rx_skb)
(1,i++)
(2,*priv = netdev_priv(ndev)
(3,priv->rx_ring[q][i])
(4,0)
(5,priv->rx_desc_dma[q])
(6,priv->tx_skb[q])
(7,desc)
(8,dptr)
(9,NULL)
(10,priv->rx_ring[q])
(11,netdev_priv(ndev)
(12,priv->rx_skb[q])
(13,priv->rx_ring)
(14,num_tx_ring)
(15,desc->dptr)
(16,ndev->dev)
(17,priv)
(18,num_tx_desc = priv->num_tx_desc)
(19,num_rx_ring)
(20,priv->num_tx_ring[q] * num_tx_desc + 1)
(21,rx_ring)
(22,priv)
(23,ndev->dev.parent)
(24,ring_size)
(25,rx_ring)
(26,q)
(27,false)
(28,ndev)
(29,priv)
(30,if (priv->rx_skb[q])
(31,priv->num_tx_ring)
(32,priv)
(33,rx_skb)
(34,num_rx_ring)
(35,int q)
(36,*desc = &priv->rx_ring[q][i])
(37,parent)
(38,priv->tx_skb[q] = NULL)
(39,num_tx_desc)
(40,&priv->rx_ring[q][i])
(41,ring_size)
(42,priv->rx_skb[q][i])
(43,le32_to_cpu(desc->dptr)
(44,priv)
(45,q)
(46,priv->rx_skb)
(47,DMA_FROM_DEVICE)
(48,priv->num_tx_ring[q])
(49,priv->rx_skb[q])
(50,)
(51,priv)
(52,priv->rx_ring[q])
(53,priv)
(54,dev)
(55,priv->num_rx_ring)
(56,ravb_tx_free(ndev, q, false)
(57,1)
(58,priv->num_tx_ring[q] * num_tx_desc)
(59,dma_free_coherent(ndev->dev.parent, ring_size, priv->tx_ring[q],\n\\n\\t\\t\\t\\t  priv->tx_desc_dma[q])
(60,q)
(61,q)
(62,parent)
(63,priv->tx_ring)
(64,le32_to_cpu(desc->dptr)
(65,i = 0)
(66,dev)
(67,q)
(68,i < priv->num_rx_ring[q])
(69,ndev)
(70,sizeof(struct ravb_tx_desc)
(71,)
(72,desc)
(73,0)
(74,q)
(75,priv)
(76,priv->num_rx_ring[q] + 1)
(77,NULL)
(78,rx_skb)
(79,i)
(80,priv)
(81,if (!dma_mapping_error(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t       le32_to_cpu(desc->dptr)
(82,q)
(83,sizeof(struct ravb_ex_rx_desc)
(84,priv->rx_ring)
(85,sizeof(struct ravb_tx_desc)
(86,priv)
(87,priv->num_rx_ring[q])
(88,parent)
(89,struct net_device *ndev)
(90,i)
(91,priv->tx_skb)
(92,priv->rx_skb[q])
(93,NULL)
(94,priv->rx_skb[q] = NULL)
(95,rx_ring)
(96,q)
(97,priv)
(98,tx_ring)
(99,priv->tx_ring[q])
(100,priv->rx_ring[q] = NULL)
(101,priv->tx_desc_dma[q])
(102,priv->tx_align[q] = NULL)
(103,sizeof(struct ravb_ex_rx_desc)
(104,i)
(105,q)
(106,priv->num_rx_ring)
(107,ndev->dev.parent)
(108,tx_align)
(109,ring_size)
(110,q)
(111,priv->rx_skb)
(112,priv->tx_align)
(113,rx_ring)
(114,kfree(priv->tx_align[q])
(115,priv->rx_ring[q])
(116,priv->tx_ring[q])
(117,priv)
(118,priv)
(119,num_tx_desc)
(120,priv)
(121,num_rx_ring)
(122,priv->rx_ring)
(123,q)
(124,q)
(125,)
(126,ring_size)
(127,ndev)
(128,ndev)
(129,desc->dptr)
(130,tx_ring)
(131,q)
(132,NULL)
(133,priv->tx_ring[q] = NULL)
(134,q)
(135,priv->rx_ring)
(136,ndev->dev)
(137,if (priv->tx_ring[q])
(138,priv->rx_skb[q])
(139,dev_kfree_skb(priv->rx_skb[q][i])
(140,dev)
(141,rx_buf_sz)
(142,tx_desc_dma)
(143,priv)
(144,if (priv->rx_ring[q])
(145,i < priv->num_rx_ring[q])
(146,ring_size = sizeof(struct ravb_ex_rx_desc)
(147,priv)
(148,priv->num_tx_desc)
(149,dma_mapping_error(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t       le32_to_cpu(desc->dptr)
(150,priv)
(151,priv)
(152,priv)
(153,q)
(154,priv)
(155,ndev->dev)
(156,i)
(157,i)
(158,priv->tx_skb)
(159,ndev->dev.parent)
(160,dev)
(161,i++)
(162,desc)
(163,rx_desc_dma)
(164,priv->tx_desc_dma)
(165,for (i = 0; i < priv->num_rx_ring[q]; i++)
(166,i)
(167,i)
(168,i)
(169,for (i = 0; i < priv->num_rx_ring[q]; i++)
(170,q)
(171,priv->tx_ring[q])
(172,q)
(173,q)
(174,tx_align)
(175,priv->tx_align)
(176,priv->rx_ring[q])
(177,priv->tx_ring)
(178,priv)
(179,priv)
(180,priv->rx_skb)
(181,priv->rx_buf_sz)
(182,i)
(183,)
(184,tx_skb)
(185,struct ravb_ex_rx_desc)
(186,q)
(187,tx_skb)
(188,priv->rx_skb)
(189,dma_unmap_single(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t\\t le32_to_cpu(desc->dptr)
(190,dptr)
(191,priv)
(192,priv)
(193,kfree(priv->rx_skb[q])
(194,parent)
(195,priv->num_rx_ring[q])
(196,num_tx_desc)
(197,ndev)
(198,priv->tx_align[q])
(199,i = 0)
(200,priv->tx_ring)
(201,priv->tx_align[q])
(202,desc)
(203,RET)
(204,q)
(205,tx_ring)
(206,priv->tx_skb[q])
(207,priv->num_rx_ring[q])
(208,!dma_mapping_error(ndev->dev.parent,\n\\n\\t\\t\\t\\t\\t       le32_to_cpu(desc->dptr)
(209,q)
(210,NULL)
(211,dma_free_coherent(ndev->dev.parent, ring_size, priv->rx_ring[q],\n\\n\\t\\t\\t\\t  priv->rx_desc_dma[q])
(212,priv)
(213,1)
(214,q)
(215,num_tx_desc)
(216,)
(217,ndev)
(218,ring_size)
(219,rx_skb)
(220,ndev->dev.parent)
(221,ndev->dev)
(222,struct ravb_tx_desc)
(223,kfree(priv->tx_skb[q])
(224,ring_size = sizeof(struct ravb_tx_desc)
(225,priv->rx_desc_dma)
(226,priv->num_rx_ring)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^