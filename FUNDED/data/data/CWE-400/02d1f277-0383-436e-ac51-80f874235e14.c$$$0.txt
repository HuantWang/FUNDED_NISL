-----label-----
0
-----code-----
static void goodG2B()
{
    struct _twoIntsStruct * data;
    struct _twoIntsStruct * *dataPtr1 = &data;
    struct _twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        struct _twoIntsStruct * data = *dataPtr1;
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        *dataPtr1 = data;
    }
    {
        struct _twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
93,94
94,95
94,96
95,96
97,98
97,99
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
111,112
113,114
115,116
115,117
116,117
117,118
117,119
118,119
120,121
120,122
120,123
123,124
124,125
125,126
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,80,81,82,83,89,90,91,92,96,100,102,106,107,112,114,119,121,122,126,127
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
85,86
85,87
109,110
109,111
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    struct _twoIntsStruct * data;    struct _twoIntsStruct * *dataPtr1 = &data;    struct _twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        struct _twoIntsStruct * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }    {        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct * *dataPtr1 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct * *dataPtr2 = &data;
struct _twoIntsStruct
_twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        struct _twoIntsStruct * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        *dataPtr1 = data;    }
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct * data = *dataPtr1;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        struct _twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct * data = *dataPtr2;
struct _twoIntsStruct
_twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(24,29,0)
(53,55,0)
(9,27,0)
(24,33,0)
(43,1,0)
(2,54,0)
(47,33,0)
(54,11,0)
(43,59,0)
(40,58,0)
(8,32,0)
(30,47,0)
(34,55,0)
(21,61,0)
(17,54,0)
(41,11,0)
(48,14,0)
(50,35,0)
(24,51,0)
(19,31,0)
(32,29,0)
(46,3,0)
(7,58,0)
(16,27,0)
(31,32,0)
(52,13,0)
(32,31,0)
(44,47,0)
(58,33,0)
(43,45,0)
(26,27,0)
(25,27,0)
(1,47,0)
(5,46,0)
(33,24,0)
(3,27,0)
(14,55,0)
(45,11,0)
(11,27,0)
(23,58,0)
(29,24,0)
(0,11,0)
(22,3,0)
(1,43,0)
(18,53,0)
(58,23,0)
(39,61,0)
(57,3,0)
(23,0,0)
(49,35,0)
(4,18,0)
(45,43,0)
(38,16,0)
(12,57,0)
(53,18,0)
(56,23,0)
(3,46,0)
(61,27,0)
(17,13,0)
(10,33,0)
(55,27,0)
(6,33,0)
(28,53,0)
(35,50,0)
(35,11,0)
(33,11,0)
(6,11,0)
(13,17,0)
(55,14,0)
(51,24,0)
(57,6,0)
(59,43,0)
(60,17,0)
(42,13,0)
(31,19,0)
(15,0,0)
(50,3,0)
(13,33,0)
(37,50,0)
(29,32,0)
(18,16,0)
(36,6,0)
(47,1,0)
(35,50,1)
(12,45,1)
(23,58,1)
(43,59,1)
(45,43,1)
(24,51,1)
(40,7,1)
(37,49,1)
(5,22,1)
(8,10,1)
(30,0,1)
(56,58,1)
(43,1,1)
(44,30,1)
(50,37,1)
(46,5,1)
(58,40,1)
(28,4,1)
(49,61,1)
(53,55,1)
(3,46,1)
(24,29,1)
(58,33,1)
(42,33,1)
(31,8,1)
(21,55,1)
(47,33,1)
(15,23,1)
(18,53,1)
(0,15,1)
(33,24,1)
(20,18,1)
(31,19,1)
(48,34,1)
(14,48,1)
(4,6,1)
(17,60,1)
(36,57,1)
(7,54,1)
(23,56,1)
(1,47,1)
(13,52,1)
(39,21,1)
(53,28,1)
(29,32,1)
(50,3,1)
(6,36,1)
(32,31,1)
(57,3,1)
(10,35,1)
(17,13,1)
(61,39,1)
(55,14,1)
(47,44,1)
(13,33,1)
(57,12,1)
(34,3,1)
(6,33,1)
(52,42,1)
(2,17,1)
(60,13,1)
(54,2,1)
(29,32,2)
(31,19,2)
(43,1,2)
(45,43,2)
(50,3,2)
(1,47,2)
(24,29,2)
(32,31,2)
(57,3,2)
(17,13,2)
(23,58,2)
(35,50,2)
(13,33,2)
(24,51,2)
(58,33,2)
(55,14,2)
(33,24,2)
(43,59,2)
(53,55,2)
(47,33,2)
(6,33,2)
(3,46,2)
(18,53,2)
-----------------------------------
(0,data[0].intTwo = 0)
(1,&data[0])
(2,0)
(3,* *dataPtr1 = &data)
(4,data)
(5,data)
(6,*dataPtr1 = data)
(7,data)
(8,100)
(9,dataPtr1)
(10,data)
(11,)
(12,dataPtr1)
(13,data[0])
(14,&data)
(15,0)
(16,)
(17,data[0].intOne)
(18,* data = *dataPtr2)
(19,struct _twoIntsStruct)
(20,RET)
(21,data)
(22,dataPtr1)
(23,data[0].intTwo)
(24,(struct _twoIntsStruct *)
(25,data)
(26,dataPtr2)
(27,)
(28,dataPtr2)
(29,ALLOCA(100*sizeof(struct _twoIntsStruct)
(30,data)
(31,sizeof(struct _twoIntsStruct)
(32,100*sizeof(struct _twoIntsStruct)
(33,data = (struct _twoIntsStruct *)
(34,dataPtr2)
(35,* data = *dataPtr1)
(36,data)
(37,dataPtr1)
(38,data)
(39,NULL)
(40,0)
(41,data)
(42,data)
(43,(twoIntsStruct *)
(44,0)
(45,printStructLine((twoIntsStruct *)
(46,&data)
(47,data[0])
(48,data)
(49,data)
(50,*dataPtr1)
(51,struct _twoIntsStruct *)
(52,0)
(53,*dataPtr2)
(54,data[0].intOne = 0)
(55,* *dataPtr2 = &data)
(56,intTwo)
(57,*dataPtr1)
(58,data[0])
(59,twoIntsStruct *)
(60,intOne)
(61,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^