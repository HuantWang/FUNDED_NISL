-----label-----
0
-----code-----
static int tcp_event_accept(tcp_context_t *tcp, unsigned i)
{
	/* Accept client. */
	int fd = tcp->set.pfd[i].fd;
	int client = tcp_accept(fd);
	if (client > 0) {
		/* Assign to fdset. */
		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);
		if (next_id < 0) {
			close(client);
			return next_id; /* Contains errno. */
		}

		/* Update watchdog timer. */
		rcu_read_lock();
		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);
		rcu_read_unlock();

		return KNOT_EOK;
	}

	return client;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
16,17
17,18
17,19
19,20
19,21
21,22
22,23
22,24
23,24
23,25
24,25
24,26
25,26
25,27
26,27
30,31
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
49,52
49,53
49,54
49,55
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
56,59
56,60
56,61
57,58
59,60
60,61
60,62
61,62
64,65
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
75,77
76,77
77,78
77,79
78,79
80,81
82,83
83,84
85,86
86,87
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
94,95
94,96
95,96
98,99
100,101
100,102
101,102
102,103
105,106
106,107
107,108
109,110
110,111
112,113
113,114
-----nextToken-----
2,4,7,9,10,12,14,18,20,27,28,29,31,32,35,37,41,43,47,48,52,54,58,62,63,65,67,69,73,74,79,81,84,88,92,96,97,99,103,104,108,111,114
-----computeFrom-----
45,46
45,47
71,72
71,73
-----guardedBy-----
47,81
73,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tcp_event_accept(tcp_context_t *tcp, unsigned i){	/* Accept client. */	int fd = tcp->set.pfd[i].fd;	int client = tcp_accept(fd);	if (client > 0) {		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();		return KNOT_EOK;	}	return client;}
static int
tcp_event_accept(tcp_context_t *tcp, unsigned i)
tcp_event_accept
tcp_context_t *tcp
tcp_context_t
tcp_context_t
*tcp
*
tcp
unsigned i
unsigned
i
i
{	/* Accept client. */	int fd = tcp->set.pfd[i].fd;	int client = tcp_accept(fd);	if (client > 0) {		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();		return KNOT_EOK;	}	return client;}
int fd = tcp->set.pfd[i].fd;
int fd = tcp->set.pfd[i].fd;
int
fd = tcp->set.pfd[i].fd
fd
= tcp->set.pfd[i].fd
tcp->set.pfd[i].fd
tcp->set.pfd[i]
tcp->set.pfd
tcp->set
tcp
tcp
set
pfd
i
i
fd
int client = tcp_accept(fd);
int client = tcp_accept(fd);
int
client = tcp_accept(fd)
client
= tcp_accept(fd)
tcp_accept(fd)
tcp_accept
tcp_accept
fd
fd
if (client > 0) {		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();		return KNOT_EOK;	}
client > 0
client
client
0
{		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();		return KNOT_EOK;	}
int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);
int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);
int
next_id = fdset_add(&tcp->set, client, POLLIN, NULL)
next_id
= fdset_add(&tcp->set, client, POLLIN, NULL)
fdset_add(&tcp->set, client, POLLIN, NULL)
fdset_add
fdset_add
&tcp->set
tcp->set
tcp
tcp
set
client
client
POLLIN
POLLIN
NULL
NULL
if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}
next_id < 0
next_id
next_id
0
{			close(client);			return next_id; /* Contains errno. */		}
close(client);
close(client)
close
close
client
client
return next_id;
next_id
next_id
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);
fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs)
fdset_set_watchdog
fdset_set_watchdog
&tcp->set
tcp->set
tcp
tcp
set
next_id
next_id
conf()->max_conn_hs
conf()
conf
conf
max_conn_hs
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
return KNOT_EOK;
KNOT_EOK
KNOT_EOK
return client;
client
client
-----joern-----
(25,30,0)
(58,18,0)
(50,15,0)
(26,33,0)
(54,1,0)
(33,29,0)
(52,43,0)
(26,36,0)
(33,22,0)
(20,40,0)
(33,26,0)
(1,54,0)
(59,30,0)
(51,43,0)
(34,15,0)
(16,43,0)
(51,35,0)
(5,15,0)
(31,52,0)
(35,36,0)
(49,26,0)
(44,56,0)
(12,39,0)
(22,20,0)
(27,12,0)
(5,1,0)
(54,40,0)
(18,58,0)
(56,18,0)
(46,51,0)
(15,5,0)
(21,22,0)
(23,10,0)
(15,50,0)
(14,54,0)
(8,44,0)
(22,33,0)
(28,56,0)
(41,42,0)
(10,51,0)
(10,39,0)
(0,5,0)
(18,56,0)
(32,43,0)
(48,46,0)
(52,51,0)
(37,43,0)
(57,30,0)
(60,36,0)
(58,42,0)
(42,40,0)
(45,20,0)
(17,12,0)
(56,30,0)
(17,59,0)
(3,20,0)
(36,43,0)
(47,18,0)
(35,51,0)
(4,35,0)
(42,58,0)
(38,46,0)
(17,52,0)
(19,51,0)
(5,56,0)
(1,5,0)
(7,44,0)
(6,42,0)
(13,33,0)
(36,26,0)
(24,30,0)
(11,18,0)
(55,54,0)
(53,30,0)
(9,18,0)
(12,56,0)
(5,30,0)
(20,22,0)
(2,59,0)
(18,51,0)
(47,11,1)
(42,6,1)
(46,48,1)
(38,51,1)
(27,10,1)
(51,35,1)
(33,29,1)
(22,21,1)
(0,1,1)
(19,36,1)
(5,1,1)
(58,42,1)
(24,5,1)
(49,33,1)
(46,51,1)
(33,13,1)
(35,36,1)
(20,3,1)
(18,58,1)
(10,23,1)
(17,12,1)
(25,44,1)
(13,22,1)
(12,27,1)
(22,20,1)
(35,4,1)
(23,44,1)
(12,56,1)
(4,19,1)
(15,34,1)
(15,50,1)
(56,18,1)
(2,24,1)
(36,26,1)
(18,9,1)
(21,20,1)
(33,22,1)
(17,59,1)
(48,38,1)
(52,51,1)
(10,51,1)
(18,51,1)
(3,45,1)
(34,50,1)
(31,46,1)
(11,58,1)
(50,0,1)
(55,25,1)
(7,8,1)
(44,7,1)
(26,49,1)
(9,47,1)
(26,33,1)
(59,2,1)
(8,56,1)
(42,40,1)
(44,56,1)
(1,54,1)
(5,56,1)
(41,28,1)
(5,15,1)
(6,41,1)
(20,40,1)
(52,31,1)
(17,52,1)
(54,14,1)
(14,55,1)
(28,46,1)
(54,40,1)
(45,60,1)
(12,44,2)
(31,46,2)
(50,44,2)
(36,26,2)
(55,44,2)
(44,46,2)
(15,50,2)
(18,58,2)
(14,44,2)
(28,46,2)
(34,44,2)
(35,36,2)
(18,51,2)
(47,46,2)
(1,44,2)
(11,46,2)
(52,51,2)
(46,51,2)
(42,40,2)
(25,44,2)
(15,44,2)
(6,46,2)
(18,46,2)
(42,46,2)
(17,52,2)
(2,44,2)
(52,46,2)
(5,15,2)
(12,56,2)
(27,44,2)
(41,46,2)
(0,44,2)
(8,46,2)
(33,22,2)
(33,29,2)
(51,35,2)
(1,54,2)
(17,59,2)
(58,42,2)
(10,44,2)
(24,44,2)
(56,46,2)
(10,51,2)
(9,46,2)
(17,12,2)
(58,46,2)
(23,44,2)
(56,18,2)
(5,44,2)
(54,44,2)
(7,46,2)
(22,20,2)
(5,56,2)
(20,40,2)
(59,44,2)
(54,40,2)
(5,1,2)
(26,33,2)
(44,56,2)
-----------------------------------
(0,next_id)
(1,&tcp->set)
(2,KNOT_EOK)
(3,set)
(4,fd)
(5,fdset_set_watchdog(&tcp->set, next_id, conf()
(6,set)
(7,0)
(8,next_id)
(9,NULL)
(10,close(client)
(11,client)
(12,return next_id;)
(13,i)
(14,set)
(15,conf()
(16,if (client > 0)
(17,RET)
(18,fdset_add(&tcp->set, client, POLLIN, NULL)
(19,client)
(20,tcp->set)
(21,pfd)
(22,tcp->set.pfd)
(23,client)
(24,rcu_read_unlock()
(25,rcu_read_lock()
(26,tcp->set.pfd[i].fd)
(27,next_id)
(28,next_id)
(29,unsigned i)
(30,)
(31,client)
(32,fd)
(33,tcp->set.pfd[i])
(34,max_conn_hs)
(35,tcp_accept(fd)
(36,fd = tcp->set.pfd[i].fd)
(37,client)
(38,client)
(39,)
(40,tcp_context_t *tcp)
(41,tcp)
(42,tcp->set)
(43,)
(44,next_id < 0)
(45,tcp)
(46,client > 0)
(47,POLLIN)
(48,0)
(49,fd)
(50,conf()
(51,client = tcp_accept(fd)
(52,return client;)
(53,if (next_id < 0)
(54,tcp->set)
(55,tcp)
(56,next_id = fdset_add(&tcp->set, client, POLLIN, NULL)
(57,next_id)
(58,&tcp->set)
(59,return KNOT_EOK;)
(60,fd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^