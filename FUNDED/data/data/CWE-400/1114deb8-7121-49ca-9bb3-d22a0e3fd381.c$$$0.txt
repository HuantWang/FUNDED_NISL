-----label-----
0
-----code-----
static void goodB2G()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    else
    {
        {
            wchar_t myString[] = L"myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = wcsdup(myString);
            /* Use data */
            printWLine(data);
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
50,51
50,52
52,53
52,54
52,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
67,68
67,69
68,69
70,71
72,73
72,74
72,75
73,74
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
88,89
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,51,53,54,56,60,63,65,69,71,75,80,82,87,89
-----computeFrom-----
13,14
13,15
33,34
33,35
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
static void
goodB2G()
goodB2G
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }    else    {        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        {            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }    }
{            wchar_t myString[] = L"myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = wcsdup(myString);            /* Use data */            printWLine(data);        }
wchar_t myString[] = L"myString";
wchar_t myString[] = L"myString";
wchar_t
myString[] = L"myString"
myString
[]
= L"myString"
L"myString"
data = wcsdup(myString);
data = wcsdup(myString)
data
data
wcsdup(myString)
wcsdup
wcsdup
myString
myString
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(13,0,0)
(24,19,0)
(31,15,0)
(14,12,0)
(14,11,0)
(25,18,0)
(0,3,0)
(18,8,0)
(4,14,0)
(22,18,0)
(15,11,0)
(11,24,0)
(11,2,0)
(27,2,0)
(23,0,0)
(22,20,0)
(7,11,0)
(9,22,0)
(28,3,0)
(10,3,0)
(14,22,0)
(21,22,0)
(5,24,0)
(30,9,0)
(15,16,0)
(26,7,0)
(9,18,0)
(15,22,0)
(20,22,0)
(7,24,0)
(2,11,0)
(33,3,0)
(6,20,0)
(29,11,0)
(30,22,1)
(11,2,1)
(15,22,1)
(0,13,1)
(26,11,1)
(32,0,1)
(15,31,1)
(14,4,1)
(27,29,1)
(15,11,1)
(5,32,1)
(17,7,1)
(1,14,1)
(21,25,1)
(14,11,1)
(29,5,1)
(7,26,1)
(22,20,1)
(17,9,1)
(14,22,1)
(13,23,1)
(2,27,1)
(4,17,1)
(9,22,1)
(20,6,1)
(25,32,1)
(31,17,1)
(1,15,1)
(7,11,1)
(9,30,1)
(6,21,1)
(22,32,2)
(6,32,2)
(14,11,2)
(4,17,2)
(21,32,2)
(11,2,2)
(22,20,2)
(9,32,2)
(9,22,2)
(25,32,2)
(31,17,2)
(27,32,2)
(20,32,2)
(7,32,2)
(30,32,2)
(15,11,2)
(2,32,2)
(5,32,2)
(14,17,2)
(7,11,2)
(29,32,2)
(26,32,2)
(15,17,2)
(11,32,2)
(14,22,2)
(15,22,2)
-----------------------------------
(0,data = NULL)
(1,RET)
(2,wcsdup(myString)
(3,)
(4,data)
(5,"myString")
(6,myString)
(7,printWLine(data)
(8,)
(9,printWLine(data)
(10,if(globalReturnsTrueOrFalse()
(11,data = wcsdup(myString)
(12,)
(13,NULL)
(14,free(data)
(15,free(data)
(16,)
(17,globalReturnsTrueOrFalse()
(18,)
(19,)
(20,wcsdup(myString)
(21,data)
(22,data = wcsdup(myString)
(23,data)
(24,)
(25,"myString")
(26,data)
(27,myString)
(28,if(globalReturnsTrueOrFalse()
(29,data)
(30,data)
(31,data)
(32,globalReturnsTrueOrFalse()
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^