-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(GLOBAL_CONST_TRUE)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(2,17,0)
(25,35,0)
(10,44,0)
(38,17,0)
(1,18,0)
(34,27,0)
(6,39,0)
(40,42,0)
(42,0,0)
(9,42,0)
(4,27,0)
(30,32,0)
(44,7,0)
(11,28,0)
(14,44,0)
(3,42,0)
(2,40,0)
(22,40,0)
(7,30,0)
(31,20,0)
(5,35,0)
(16,2,0)
(35,5,0)
(32,30,0)
(30,40,0)
(35,2,0)
(12,20,0)
(19,12,0)
(12,29,0)
(20,42,0)
(37,41,0)
(15,18,0)
(30,7,0)
(27,20,0)
(17,20,0)
(28,40,0)
(31,29,0)
(1,24,0)
(17,38,0)
(13,42,0)
(23,20,0)
(28,42,0)
(17,2,0)
(7,44,0)
(8,10,0)
(44,10,0)
(21,31,0)
(20,17,0)
(18,1,0)
(40,30,0)
(41,40,0)
(2,35,0)
(36,41,0)
(43,5,0)
(8,14,1)
(28,40,1)
(44,10,1)
(17,38,1)
(4,20,1)
(31,20,1)
(22,26,1)
(31,21,1)
(2,35,1)
(12,19,1)
(43,25,1)
(12,20,1)
(33,26,1)
(11,41,1)
(28,11,1)
(41,36,1)
(23,28,1)
(16,23,1)
(36,37,1)
(14,22,1)
(20,17,1)
(17,2,1)
(35,5,1)
(19,31,1)
(5,43,1)
(25,16,1)
(37,40,1)
(27,20,1)
(27,34,1)
(11,1,1)
(41,40,1)
(10,8,1)
(34,4,1)
(33,27,1)
(30,7,1)
(33,12,1)
(2,40,1)
(30,32,1)
(15,41,1)
(1,18,1)
(21,27,1)
(40,30,1)
(7,44,1)
(18,15,1)
(20,26,2)
(17,38,2)
(27,20,2)
(40,26,2)
(1,18,2)
(30,7,2)
(36,26,2)
(28,26,2)
(1,41,2)
(20,17,2)
(34,26,2)
(8,26,2)
(2,35,2)
(35,26,2)
(27,26,2)
(7,44,2)
(14,26,2)
(22,26,2)
(40,30,2)
(10,26,2)
(23,26,2)
(28,40,2)
(12,27,2)
(12,20,2)
(41,40,2)
(15,41,2)
(43,26,2)
(25,26,2)
(41,26,2)
(31,27,2)
(31,20,2)
(30,32,2)
(37,26,2)
(16,26,2)
(7,26,2)
(17,2,2)
(19,27,2)
(2,40,2)
(35,5,2)
(30,26,2)
(21,27,2)
(44,10,2)
(5,26,2)
(18,41,2)
(11,26,2)
(4,26,2)
(17,26,2)
(44,26,2)
(2,26,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,realloc(data, (130000)
(3,data)
(4,data)
(5,sizeof(wchar_t)
(6,if(GLOBAL_CONST_TRUE)
(7,malloc(100*sizeof(wchar_t)
(8,wchar_t)
(9,if (data != NULL)
(10,sizeof(wchar_t)
(11,data)
(12,free(data)
(13,if (data == NULL)
(14,100)
(15,1)
(16,data)
(17,(wchar_t *)
(18,-1)
(19,data)
(20,data = (wchar_t *)
(21,data)
(22,data)
(23,data)
(24,)
(25,130000)
(26,GLOBAL_CONST_TRUE)
(27,data != NULL)
(28,printWLine(data)
(29,)
(30,(wchar_t *)
(31,printWLine(data)
(32,wchar_t *)
(33,RET)
(34,NULL)
(35,(130000)
(36,NULL)
(37,data)
(38,wchar_t *)
(39,)
(40,* data = (wchar_t *)
(41,data == NULL)
(42,)
(43,wchar_t)
(44,100*sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^