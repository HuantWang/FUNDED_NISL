-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_13_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
74,75
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,75
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_13_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_13_bad()
CWE401_Memory_Leak__int_calloc_13_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,32,0)
(16,36,0)
(34,40,0)
(22,30,0)
(38,25,0)
(39,10,0)
(31,24,0)
(21,0,0)
(19,2,0)
(33,40,0)
(23,0,0)
(29,30,0)
(17,24,0)
(1,38,0)
(34,8,0)
(2,25,0)
(5,25,0)
(2,34,0)
(4,36,0)
(28,2,0)
(38,34,0)
(12,14,0)
(32,34,0)
(25,40,0)
(8,18,0)
(31,7,0)
(8,39,0)
(18,8,0)
(26,39,0)
(0,30,0)
(35,2,0)
(19,40,0)
(3,38,0)
(20,30,0)
(27,14,0)
(2,19,0)
(24,31,0)
(13,10,0)
(37,32,0)
(11,34,0)
(10,39,0)
(39,8,0)
(8,34,0)
(12,36,1)
(4,0,1)
(3,1,1)
(1,31,1)
(17,32,1)
(38,34,1)
(26,11,1)
(31,24,1)
(13,26,1)
(34,8,1)
(2,25,1)
(2,34,1)
(37,34,1)
(11,36,1)
(38,3,1)
(14,27,1)
(8,39,1)
(12,19,1)
(27,12,1)
(21,23,1)
(36,16,1)
(32,15,1)
(24,17,1)
(8,18,1)
(2,35,1)
(39,10,1)
(16,4,1)
(15,37,1)
(1,32,1)
(0,21,1)
(35,28,1)
(19,2,1)
(10,13,1)
(25,5,1)
(32,34,1)
(6,14,1)
(5,38,1)
(28,25,1)
(31,24,2)
(17,32,2)
(10,36,2)
(13,36,2)
(11,36,2)
(19,36,2)
(24,32,2)
(38,34,2)
(37,36,2)
(32,34,2)
(35,36,2)
(8,36,2)
(3,36,2)
(8,39,2)
(28,36,2)
(1,36,2)
(39,10,2)
(2,25,2)
(31,32,2)
(2,36,2)
(8,18,2)
(5,36,2)
(15,36,2)
(34,8,2)
(26,36,2)
(2,34,2)
(39,36,2)
(32,36,2)
(38,36,2)
(34,36,2)
(25,36,2)
(19,2,2)
-----------------------------------
(0,data = NULL)
(1,data)
(2,data[0])
(3,0)
(4,GLOBAL_CONST_FIVE)
(5,5)
(6,RET)
(7,)
(8,(int *)
(9, sizeof(int)
(10,sizeof(int)
(11,data)
(12,GLOBAL_CONST_FIVE)
(13,int)
(14,GLOBAL_CONST_FIVE==5)
(15,NULL)
(16,5)
(17,1)
(18,int *)
(19,printIntLine(data[0])
(20,if(GLOBAL_CONST_FIVE==5)
(21,NULL)
(22,data)
(23,data)
(24,-1)
(25,data[0] = 5)
(26,100)
(27,5)
(28,data)
(29,if(GLOBAL_CONST_FIVE==5)
(30,)
(31,exit(-1)
(32,data == NULL)
(33,if (data == NULL)
(34,data = (int *)
(35,0)
(36,GLOBAL_CONST_FIVE==5)
(37,data)
(38,data[0])
(39,calloc(100, sizeof(int)
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^