-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
    break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
43,44
45,46
46,47
46,48
47,48
52,53
52,54
53,54
54,55
54,56
56,57
56,58
59,60
59,61
59,62
60,61
60,62
61,62
61,63
62,63
64,65
64,66
65,66
67,68
69,70
69,71
70,71
73,74
73,75
73,76
73,77
73,78
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
86,88
87,88
89,90
90,91
90,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
107,110
108,109
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
126,127
127,128
128,129
128,130
129,130
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,28,31,32,33,37,38,39,41,44,48,49,50,51,55,57,58,63,66,68,71,72,77,80,82,85,88,91,92,96,98,103,105,109,111,113,117,119,123,125,130,131,132
-----computeFrom-----
13,14
13,15
60,61
60,62
61,62
61,63
69,70
69,71
75,76
75,77
86,87
86,88
94,95
94,96
-----guardedBy-----
68,113
71,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
-----joern-----
(25,41,0)
(6,8,0)
(28,26,0)
(8,6,0)
(32,1,0)
(48,38,0)
(8,52,0)
(37,39,0)
(47,22,0)
(22,1,0)
(6,23,0)
(36,55,0)
(54,58,0)
(42,35,0)
(11,23,0)
(26,39,0)
(23,38,0)
(62,12,0)
(57,22,0)
(9,18,0)
(10,22,0)
(38,39,0)
(64,63,0)
(14,39,0)
(29,60,0)
(63,58,0)
(12,39,0)
(46,41,0)
(34,8,0)
(36,53,0)
(3,31,0)
(17,9,0)
(24,35,0)
(43,35,0)
(16,22,0)
(38,23,0)
(31,3,0)
(59,26,0)
(55,36,0)
(53,36,0)
(23,6,0)
(4,57,0)
(53,10,0)
(51,57,0)
(13,52,0)
(52,8,0)
(4,58,0)
(57,4,0)
(12,38,0)
(56,1,0)
(31,40,0)
(14,38,0)
(67,38,0)
(10,53,0)
(15,1,0)
(8,22,0)
(60,35,0)
(7,55,0)
(49,58,0)
(44,10,0)
(45,48,0)
(21,35,0)
(26,38,0)
(30,14,0)
(19,58,0)
(2,3,0)
(23,11,0)
(41,35,0)
(5,48,0)
(36,22,0)
(27,4,0)
(20,36,0)
(66,58,0)
(33,10,0)
(61,4,0)
(23,11,1)
(64,0,1)
(42,60,1)
(28,48,1)
(51,27,1)
(65,24,1)
(49,4,1)
(60,29,1)
(2,48,1)
(22,16,1)
(52,13,1)
(44,36,1)
(62,26,1)
(36,22,1)
(50,49,1)
(53,10,1)
(36,55,1)
(0,22,1)
(53,36,1)
(28,31,1)
(50,66,1)
(29,50,1)
(17,53,1)
(31,3,1)
(30,12,1)
(55,7,1)
(4,57,1)
(12,38,1)
(12,62,1)
(67,53,1)
(13,34,1)
(34,67,1)
(57,22,1)
(9,17,1)
(10,22,1)
(3,2,1)
(20,50,1)
(23,6,1)
(57,51,1)
(10,33,1)
(38,23,1)
(7,20,1)
(14,38,1)
(26,38,1)
(61,0,1)
(16,47,1)
(48,38,1)
(8,22,1)
(26,59,1)
(65,42,1)
(48,45,1)
(24,14,1)
(8,52,1)
(14,30,1)
(33,44,1)
(66,63,1)
(45,5,1)
(6,8,1)
(59,28,1)
(5,38,1)
(24,9,1)
(63,64,1)
(27,61,1)
(48,53,2)
(66,0,2)
(12,53,2)
(23,53,2)
(36,22,2)
(28,53,2)
(5,53,2)
(60,50,2)
(55,50,2)
(52,53,2)
(10,22,2)
(49,0,2)
(61,0,2)
(38,23,2)
(26,53,2)
(14,53,2)
(31,48,2)
(13,53,2)
(9,53,2)
(20,50,2)
(6,53,2)
(2,48,2)
(23,6,2)
(36,55,2)
(14,38,2)
(29,50,2)
(48,38,2)
(6,8,2)
(7,50,2)
(44,36,2)
(17,53,2)
(4,0,2)
(42,50,2)
(62,53,2)
(4,57,2)
(23,11,2)
(36,50,2)
(12,38,2)
(53,10,2)
(10,36,2)
(8,53,2)
(24,50,2)
(53,50,2)
(57,0,2)
(34,53,2)
(51,0,2)
(67,53,2)
(26,38,2)
(38,53,2)
(33,36,2)
(59,53,2)
(3,48,2)
(57,22,2)
(8,22,2)
(63,0,2)
(45,53,2)
(64,0,2)
(27,0,2)
(53,36,2)
(8,52,2)
(30,53,2)
(31,3,2)
-----------------------------------
(0,6)
(1,)
(2,1)
(3,-1)
(4,fscanf(stdin, "%zu", &data)
(5,myString)
(6,malloc(data*sizeof(wchar_t)
(7,HELLO_STRING)
(8,data*sizeof(wchar_t)
(9,printLine("Input is less than the length of the source string or too large")
(10,data < 100)
(11,wchar_t *)
(12,printWLine(myString)
(13,wchar_t)
(14,free(myString)
(15,switch(6)
(16,0)
(17,"Input is less than the length of the source string or too large")
(18,)
(19,default:)
(20,data)
(21,default:)
(22,data = 0)
(23,(wchar_t *)
(24,break;)
(25,if (data > wcslen(HELLO_STRING)
(26,wcscpy(myString, HELLO_STRING)
(27,"%zu")
(28,myString)
(29,"Benign, fixed string")
(30,myString)
(31,exit(-1)
(32,data)
(33,100)
(34,data)
(35,)
(36,data > wcslen(HELLO_STRING)
(37,if (myString == NULL)
(38,myString = (wchar_t *)
(39,)
(40,)
(41,)
(42,break;)
(43,case 7:)
(44,data)
(45,NULL)
(46,myString)
(47,data)
(48,myString == NULL)
(49,break;)
(50,8)
(51,data)
(52,sizeof(wchar_t)
(53,data > wcslen(HELLO_STRING)
(54,case 6:)
(55,wcslen(HELLO_STRING)
(56,switch(8)
(57,&data)
(58,)
(59,HELLO_STRING)
(60,printLine("Benign, fixed string")
(61,stdin)
(62,myString)
(63,printLine("Benign, fixed string")
(64,"Benign, fixed string")
(65,RET)
(66,break;)
(67,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^