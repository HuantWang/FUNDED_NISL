-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,68,73,74,79,81
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(8,20,0)
(22,17,0)
(7,19,0)
(37,3,0)
(17,20,0)
(9,12,0)
(39,4,0)
(38,18,0)
(14,12,0)
(16,9,0)
(21,13,0)
(11,1,0)
(29,1,0)
(25,10,0)
(14,3,0)
(12,18,0)
(13,30,0)
(32,12,0)
(27,18,0)
(20,3,0)
(0,35,0)
(31,19,0)
(3,1,0)
(24,3,0)
(20,0,0)
(0,12,0)
(36,17,0)
(12,0,0)
(19,12,0)
(14,2,0)
(20,17,0)
(10,39,0)
(27,12,0)
(39,10,0)
(28,9,0)
(17,36,0)
(33,14,0)
(34,1,0)
(5,27,0)
(15,36,0)
(9,18,0)
(35,0,0)
(0,20,0)
(14,3,1)
(21,23,1)
(19,12,1)
(17,36,1)
(12,0,1)
(39,10,1)
(7,31,1)
(20,3,1)
(23,27,1)
(19,7,1)
(28,39,1)
(31,12,1)
(6,3,1)
(28,19,1)
(27,5,1)
(25,19,1)
(10,25,1)
(26,13,1)
(14,12,1)
(5,9,1)
(23,6,1)
(36,15,1)
(20,17,1)
(9,16,1)
(3,24,1)
(24,37,1)
(16,28,1)
(27,12,1)
(8,32,1)
(15,22,1)
(33,23,1)
(0,35,1)
(32,6,1)
(14,33,1)
(13,21,1)
(22,8,1)
(26,14,1)
(9,12,1)
(0,20,1)
(5,6,2)
(25,19,2)
(20,6,2)
(19,6,2)
(20,17,2)
(16,6,2)
(31,6,2)
(15,6,2)
(9,6,2)
(27,12,2)
(14,23,2)
(36,6,2)
(39,19,2)
(0,20,2)
(19,12,2)
(10,19,2)
(12,6,2)
(7,6,2)
(0,6,2)
(28,6,2)
(33,23,2)
(17,36,2)
(14,12,2)
(32,6,2)
(22,6,2)
(20,3,2)
(39,10,2)
(14,3,2)
(9,12,2)
(27,6,2)
(8,6,2)
(0,35,2)
(12,0,2)
(21,23,2)
(13,23,2)
(17,6,2)
-----------------------------------
(0,(char *)
(1,)
(2,)
(3,data = NULL)
(4,)
(5,data)
(6,1)
(7,NULL)
(8,data)
(9,strcpy(data, "A String")
(10,-1)
(11,if(0)
(12,data = (char *)
(13,printLine("Benign, fixed string")
(14,free(data)
(15,char)
(16,"A String")
(17,100*sizeof(char)
(18,)
(19,data == NULL)
(20,realloc(data, 100*sizeof(char)
(21,"Benign, fixed string")
(22,100)
(23,0)
(24,NULL)
(25,1)
(26,RET)
(27,printLine(data)
(28,data)
(29,data)
(30,)
(31,data)
(32,data)
(33,data)
(34,if(1)
(35,char *)
(36,sizeof(char)
(37,data)
(38,if (data == NULL)
(39,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^