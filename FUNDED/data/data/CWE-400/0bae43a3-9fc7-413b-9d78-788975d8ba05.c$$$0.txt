-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_42_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    count = badSource(count);
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
27,28
28,29
28,30
29,30
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
81,82
81,83
82,83
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
102,107
103,104
105,106
107,108
108,109
108,110
111,112
111,113
112,113
114,115
116,117
118,119
119,120
120,121
120,122
121,122
124,125
124,126
125,126
127,128
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,14,16,20,23,25,30,32,34,38,40,41,44,47,49,50,52,56,59,61,62,66,68,73,74,79,80,83,87,88,90,93,99,101,104,106,109,110,113,115,117,122,123,126,131,133
-----computeFrom-----
12,13
12,14
18,19
18,20
54,55
54,56
64,65
64,66
77,78
77,79
81,82
81,83
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_42_bad(){    int count;    /* Initialize count */    count = -1;    count = badSource(count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_42_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_42_bad
{    int count;    /* Initialize count */    count = -1;    count = badSource(count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = badSource(count);
count = badSource(count)
count
count
badSource(count)
badSource
badSource
count
count
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(64,2,0)
(19,63,0)
(16,25,0)
(18,46,0)
(15,46,0)
(45,36,0)
(22,18,0)
(8,65,0)
(43,54,0)
(1,29,0)
(25,40,0)
(29,46,0)
(17,0,0)
(28,21,0)
(23,64,0)
(11,5,0)
(11,27,0)
(4,54,0)
(55,40,0)
(6,40,0)
(58,43,0)
(24,64,0)
(41,64,0)
(27,0,0)
(39,46,0)
(30,58,0)
(14,21,0)
(33,46,0)
(13,23,0)
(64,23,0)
(56,59,0)
(66,18,0)
(61,6,0)
(48,46,0)
(57,25,0)
(59,21,0)
(26,2,0)
(2,64,0)
(54,43,0)
(53,34,0)
(37,11,0)
(49,46,0)
(27,58,0)
(31,36,0)
(42,19,0)
(64,40,0)
(14,11,0)
(46,0,0)
(25,18,0)
(11,14,0)
(35,14,0)
(43,0,0)
(3,13,0)
(50,21,0)
(40,25,0)
(64,60,0)
(36,46,0)
(60,64,0)
(32,6,0)
(58,27,0)
(7,60,0)
(38,52,0)
(62,27,0)
(5,11,0)
(20,29,0)
(47,46,0)
(12,43,0)
(23,13,0)
(51,38,0)
(44,53,0)
(40,46,0)
(38,40,0)
(25,57,1)
(19,42,1)
(20,27,1)
(31,29,1)
(11,5,1)
(6,40,1)
(59,21,1)
(24,13,1)
(30,62,1)
(23,13,1)
(38,51,1)
(55,18,1)
(29,1,1)
(62,43,1)
(64,60,1)
(10,9,1)
(35,59,1)
(41,2,1)
(28,6,1)
(2,26,1)
(37,35,1)
(27,58,1)
(38,40,1)
(64,40,1)
(14,21,1)
(56,23,1)
(11,27,1)
(23,64,1)
(22,36,1)
(42,23,1)
(56,19,1)
(58,30,1)
(45,31,1)
(4,12,1)
(64,41,1)
(10,38,1)
(50,28,1)
(1,20,1)
(40,25,1)
(43,54,1)
(18,66,1)
(6,61,1)
(53,44,1)
(11,37,1)
(3,14,1)
(21,50,1)
(61,32,1)
(25,18,1)
(35,21,1)
(7,24,1)
(28,53,1)
(66,22,1)
(13,3,1)
(54,4,1)
(60,7,1)
(59,56,1)
(58,43,1)
(51,9,1)
(44,6,1)
(9,14,1)
(16,55,1)
(26,60,1)
(36,45,1)
(32,40,1)
(57,16,1)
(64,2,1)
(14,11,1)
(27,58,2)
(14,14,2)
(23,13,2)
(56,14,2)
(37,14,2)
(53,6,2)
(2,14,2)
(64,14,2)
(43,54,2)
(11,27,2)
(64,40,2)
(14,21,2)
(7,14,2)
(59,14,2)
(42,23,2)
(23,14,2)
(60,14,2)
(64,2,2)
(6,40,2)
(14,11,2)
(40,25,2)
(19,23,2)
(41,14,2)
(11,5,2)
(24,14,2)
(13,14,2)
(59,21,2)
(64,60,2)
(38,40,2)
(35,14,2)
(38,9,2)
(25,18,2)
(44,6,2)
(58,43,2)
(3,14,2)
(51,9,2)
(11,14,2)
(26,14,2)
(23,64,2)
-----------------------------------
(0,)
(1,0)
(2,strlen(SENTENCE)
(3,SENTENCE)
(4,1)
(5,size_t)
(6,pFile == NULL)
(7,char)
(8,if (strlen(SENTENCE)
(9,pFile)
(10,RET)
(11,(size_t)
(12,count)
(13,strlen(SENTENCE)
(14,i < (size_t)
(15,pFile)
(16,filename)
(17,count)
(18,*filename = "output_bad.txt")
(19,exit(1)
(20,i)
(21,i = 0)
(22,filename)
(23,strlen(SENTENCE)
(24,SENTENCE)
(25,fopen(filename, "w+")
(26,SENTENCE)
(27,count = badSource(count)
(28,i)
(29,i = 0)
(30,count)
(31,pFile)
(32,pFile)
(33,if (pFile == NULL)
(34,)
(35,i)
(36,*pFile = NULL)
(37,count)
(38,fclose(pFile)
(39,i)
(40,pFile = fopen(filename, "w+")
(41,pFile)
(42,1)
(43,count = -1)
(44,1)
(45,NULL)
(46,)
(47,for (i = 0; i < (size_t)
(48,filename)
(49,if (pFile)
(50,0)
(51,pFile)
(52,)
(53,exit(1)
(54,-1)
(55,pFile)
(56,i)
(57,"w+")
(58,badSource(count)
(59,i++)
(60,sizeof(char)
(61,NULL)
(62,count)
(63,)
(64,fwrite(SENTENCE, sizeof(char)
(65,)
(66,"output_bad.txt")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^