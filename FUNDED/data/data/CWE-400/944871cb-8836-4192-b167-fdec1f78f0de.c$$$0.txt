-----label-----
0
-----code-----
static void reg_source_db(struct iax2_peer *p)
{
	char data[80];
	char *expiry;

	if (ast_test_flag64(p, IAX_TEMPONLY) || ast_db_get("IAX/Registry", p->name, data, sizeof(data))) {
		return;
	}

	expiry = strrchr(data, ':');
	if (!expiry) {
		ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data);
		return;
	}
	*expiry++ = '\0';

	if (!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)) {
		ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data);
		return;
	}

	p->expiry = atoi(expiry);

	ast_verb(3, "Seeding '%s' at %s for %d\n", p->name,
		ast_sockaddr_stringify(&p->addr), p->expiry);

	iax2_poke_peer(p, 0);
	if (p->expire > -1) {
		if (!AST_SCHED_DEL(sched, p->expire)) {
			p->expire = -1;
			peer_unref(p);
		}
	}

	ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "IAX2/%s", p->name); /* Activate notification */

	p->expire = iax2_sched_add(sched, (p->expiry + 10) * 1000, expire_registry, peer_ref(p));
	if (p->expire == -1) {
		peer_unref(p);
	}

	if (iax2_regfunk) {
		iax2_regfunk(p->name, 1);
	}

	register_peer_exten(p, 1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
12,13
13,14
13,15
15,16
15,17
17,18
19,20
20,21
20,22
22,23
22,24
25,26
25,27
26,27
26,28
27,28
27,29
27,30
28,29
30,31
32,33
34,35
34,36
34,37
34,38
34,39
35,36
38,39
38,40
39,40
42,43
44,45
45,46
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
55,56
57,58
60,61
60,62
61,62
62,63
64,65
64,66
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
75,76
76,77
76,78
77,78
78,79
79,80
82,83
82,84
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
88,90
89,90
92,93
94,95
96,97
96,98
97,98
98,99
98,100
98,101
98,102
99,100
101,102
104,105
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
119,120
119,121
119,122
119,123
119,124
119,125
120,121
124,125
124,126
125,126
128,129
128,130
129,130
131,132
132,133
132,134
133,134
136,137
136,138
137,138
140,141
141,142
141,143
141,144
142,143
144,145
147,148
147,149
148,149
148,150
149,150
149,151
150,151
153,154
155,156
156,157
156,158
157,158
158,159
158,160
158,161
159,160
161,162
163,164
163,165
164,165
167,168
167,169
168,169
169,170
169,171
170,171
170,172
171,172
174,175
176,177
177,178
177,179
178,179
180,181
182,183
183,184
183,185
183,186
183,187
183,188
184,185
186,187
188,189
191,192
191,193
192,193
195,196
196,197
196,198
197,198
197,199
198,199
201,202
201,203
201,204
201,205
201,206
202,203
204,205
206,207
206,208
207,208
208,209
208,210
209,210
209,211
210,211
215,216
217,218
217,219
218,219
220,221
222,223
222,224
223,224
223,225
224,225
224,226
225,226
228,229
230,231
231,232
232,233
232,234
233,234
235,236
237,238
237,239
238,239
240,241
241,242
242,243
242,244
242,245
243,244
245,246
245,247
246,247
250,251
251,252
251,253
251,254
252,253
254,255
-----nextToken-----
2,4,7,9,10,14,16,18,21,23,24,29,31,33,36,37,40,41,43,47,49,53,56,58,59,63,68,70,71,73,74,80,81,86,90,91,93,95,100,102,103,105,106,111,112,115,117,121,122,123,126,127,130,134,135,138,139,143,145,146,151,152,154,160,162,165,166,172,173,175,179,181,185,187,189,190,193,194,199,200,203,205,211,212,213,214,216,219,221,226,227,229,234,236,239,244,247,248,249,253,255,256
-----computeFrom-----
26,27
26,28
51,52
51,53
76,77
76,78
108,109
108,110
148,149
148,150
169,170
169,171
196,197
196,198
206,207
206,208
208,209
208,210
223,224
223,225
-----guardedBy-----
151,181
152,173
226,236
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void reg_source_db(struct iax2_peer *p){	char data[80];	char *expiry;	if (ast_test_flag64(p, IAX_TEMPONLY) || ast_db_get("IAX/Registry", p->name, data, sizeof(data))) {		return;	}	expiry = strrchr(data, ':');	if (!expiry) {		ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data);		return;	}	*expiry++ = '\0';	if (!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)) {		ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data);		return;	}	p->expiry = atoi(expiry);	ast_verb(3, "Seeding '%s' at %s for %d\n", p->name,		ast_sockaddr_stringify(&p->addr), p->expiry);	iax2_poke_peer(p, 0);	if (p->expire > -1) {		if (!AST_SCHED_DEL(sched, p->expire)) {			p->expire = -1;			peer_unref(p);		}	}	ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "IAX2/%s", p->name); /* Activate notification */	p->expire = iax2_sched_add(sched, (p->expiry + 10) * 1000, expire_registry, peer_ref(p));	if (p->expire == -1) {		peer_unref(p);	}	if (iax2_regfunk) {		iax2_regfunk(p->name, 1);	}	register_peer_exten(p, 1);}
static void
reg_source_db(struct iax2_peer *p)
reg_source_db
struct iax2_peer *p
struct iax2_peer
iax2_peer
*p
*
p
{	char data[80];	char *expiry;	if (ast_test_flag64(p, IAX_TEMPONLY) || ast_db_get("IAX/Registry", p->name, data, sizeof(data))) {		return;	}	expiry = strrchr(data, ':');	if (!expiry) {		ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data);		return;	}	*expiry++ = '\0';	if (!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)) {		ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data);		return;	}	p->expiry = atoi(expiry);	ast_verb(3, "Seeding '%s' at %s for %d\n", p->name,		ast_sockaddr_stringify(&p->addr), p->expiry);	iax2_poke_peer(p, 0);	if (p->expire > -1) {		if (!AST_SCHED_DEL(sched, p->expire)) {			p->expire = -1;			peer_unref(p);		}	}	ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "IAX2/%s", p->name); /* Activate notification */	p->expire = iax2_sched_add(sched, (p->expiry + 10) * 1000, expire_registry, peer_ref(p));	if (p->expire == -1) {		peer_unref(p);	}	if (iax2_regfunk) {		iax2_regfunk(p->name, 1);	}	register_peer_exten(p, 1);}
char data[80];
char data[80];
char
data[80]
data
[80]
80
char *expiry;
char *expiry;
char
*expiry
*
expiry
if (ast_test_flag64(p, IAX_TEMPONLY) || ast_db_get("IAX/Registry", p->name, data, sizeof(data))) {		return;	}
ast_test_flag64(p, IAX_TEMPONLY) || ast_db_get("IAX/Registry", p->name, data, sizeof(data))
ast_test_flag64(p, IAX_TEMPONLY)
ast_test_flag64
ast_test_flag64
p
p
IAX_TEMPONLY
IAX_TEMPONLY
ast_db_get("IAX/Registry", p->name, data, sizeof(data))
ast_db_get
ast_db_get
"IAX/Registry"
p->name
p
p
name
data
data
sizeof(data)
(data)
data
data
{		return;	}
return;
expiry = strrchr(data, ':');
expiry = strrchr(data, ':')
expiry
expiry
strrchr(data, ':')
strrchr
strrchr
data
data
':'
if (!expiry) {		ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data);		return;	}
!expiry
expiry
expiry
{		ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data);		return;	}
ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data);
ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: '%s'\n", data)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"IAX/Registry astdb entry missing expiry: '%s'\n"
data
data
return;
*expiry++ = '\0';
*expiry++ = '\0'
*expiry++
expiry++
expiry
expiry
'\0'
if (!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)) {		ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data);		return;	}
!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)
ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)
ast_sockaddr_parse
ast_sockaddr_parse
&p->addr
p->addr
p
p
addr
data
data
PARSE_PORT_REQUIRE
PARSE_PORT_REQUIRE
{		ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data);		return;	}
ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data);
ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - '%s'\n", data)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"IAX/Registry astdb host:port invalid - '%s'\n"
data
data
return;
p->expiry = atoi(expiry);
p->expiry = atoi(expiry)
p->expiry
p
p
expiry
atoi(expiry)
atoi
atoi
expiry
expiry
ast_verb(3, "Seeding '%s' at %s for %d\n", p->name,		ast_sockaddr_stringify(&p->addr), p->expiry);
ast_verb(3, "Seeding '%s' at %s for %d\n", p->name,		ast_sockaddr_stringify(&p->addr), p->expiry)
ast_verb
ast_verb
3
"Seeding '%s' at %s for %d\n"
p->name
p
p
name
ast_sockaddr_stringify(&p->addr)
ast_sockaddr_stringify
ast_sockaddr_stringify
&p->addr
p->addr
p
p
addr
p->expiry
p
p
expiry
iax2_poke_peer(p, 0);
iax2_poke_peer(p, 0)
iax2_poke_peer
iax2_poke_peer
p
p
0
if (p->expire > -1) {		if (!AST_SCHED_DEL(sched, p->expire)) {			p->expire = -1;			peer_unref(p);		}	}
p->expire > -1
p->expire
p
p
expire
-1
1
{		if (!AST_SCHED_DEL(sched, p->expire)) {			p->expire = -1;			peer_unref(p);		}	}
if (!AST_SCHED_DEL(sched, p->expire)) {			p->expire = -1;			peer_unref(p);		}
!AST_SCHED_DEL(sched, p->expire)
AST_SCHED_DEL(sched, p->expire)
AST_SCHED_DEL
AST_SCHED_DEL
sched
sched
p->expire
p
p
expire
{			p->expire = -1;			peer_unref(p);		}
p->expire = -1;
p->expire = -1
p->expire
p
p
expire
-1
1
peer_unref(p);
peer_unref(p)
peer_unref
peer_unref
p
p
ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "IAX2/%s", p->name);
ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "IAX2/%s", p->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"IAX2/%s"
p->name
p
p
name
p->expire = iax2_sched_add(sched, (p->expiry + 10) * 1000, expire_registry, peer_ref(p));
p->expire = iax2_sched_add(sched, (p->expiry + 10) * 1000, expire_registry, peer_ref(p))
p->expire
p
p
expire
iax2_sched_add(sched, (p->expiry + 10) * 1000, expire_registry, peer_ref(p))
iax2_sched_add
iax2_sched_add
sched
sched
(p->expiry + 10) * 1000
(p->expiry + 10)
p->expiry + 10
p->expiry
p
p
expiry
10
1000
expire_registry
expire_registry
peer_ref(p)
peer_ref
peer_ref
p
p
if (p->expire == -1) {		peer_unref(p);	}
p->expire == -1
p->expire
p
p
expire
-1
1
{		peer_unref(p);	}
peer_unref(p);
peer_unref(p)
peer_unref
peer_unref
p
p
if (iax2_regfunk) {		iax2_regfunk(p->name, 1);	}
iax2_regfunk
iax2_regfunk
{		iax2_regfunk(p->name, 1);	}
iax2_regfunk(p->name, 1);
iax2_regfunk(p->name, 1)
iax2_regfunk
iax2_regfunk
p->name
p
p
name
1
register_peer_exten(p, 1);
register_peer_exten(p, 1)
register_peer_exten
register_peer_exten
p
p
1
-----joern-----
(54,117,0)
(39,25,0)
(115,108,0)
(53,128,0)
(142,17,0)
(3,42,0)
(64,108,0)
(0,87,0)
(11,87,0)
(66,93,0)
(23,114,0)
(129,77,0)
(27,117,0)
(106,58,0)
(81,114,0)
(49,17,0)
(77,59,0)
(93,69,0)
(131,93,0)
(61,127,0)
(71,114,0)
(3,59,0)
(24,123,0)
(122,16,0)
(18,59,0)
(29,59,0)
(128,57,0)
(91,77,0)
(90,35,0)
(92,81,0)
(28,29,0)
(85,81,0)
(48,19,0)
(53,59,0)
(8,136,0)
(75,42,0)
(82,138,0)
(50,59,0)
(141,58,0)
(109,78,0)
(102,121,0)
(72,78,0)
(1,108,0)
(17,8,0)
(29,104,0)
(25,114,0)
(36,45,0)
(130,100,0)
(32,34,0)
(34,43,0)
(135,83,0)
(121,51,0)
(6,69,0)
(143,123,0)
(108,104,0)
(138,59,0)
(50,12,0)
(56,42,0)
(52,2,0)
(136,8,0)
(120,114,0)
(108,64,0)
(2,59,0)
(17,59,0)
(120,42,0)
(46,2,0)
(19,72,0)
(127,72,0)
(68,90,0)
(84,30,0)
(70,134,0)
(83,59,0)
(45,18,0)
(129,76,0)
(30,25,0)
(77,129,0)
(144,114,0)
(20,50,0)
(35,90,0)
(128,53,0)
(73,33,0)
(99,25,0)
(74,119,0)
(112,18,0)
(8,113,0)
(121,99,0)
(107,136,0)
(36,123,0)
(42,51,0)
(9,59,0)
(16,113,0)
(100,123,0)
(42,120,0)
(87,114,0)
(22,134,0)
(65,31,0)
(60,100,0)
(88,59,0)
(99,121,0)
(34,117,0)
(123,2,0)
(94,29,0)
(97,59,0)
(14,114,0)
(12,34,0)
(67,43,0)
(100,59,0)
(123,100,0)
(83,120,0)
(101,30,0)
(139,133,0)
(123,114,0)
(30,59,0)
(125,18,0)
(62,9,0)
(80,129,0)
(103,73,0)
(132,34,0)
(74,116,0)
(104,108,0)
(39,72,0)
(16,59,0)
(40,78,0)
(15,97,0)
(5,114,0)
(41,83,0)
(83,35,0)
(12,50,0)
(79,128,0)
(117,59,0)
(85,127,0)
(13,9,0)
(86,133,0)
(134,59,0)
(127,85,0)
(4,114,0)
(2,25,0)
(42,3,0)
(35,83,0)
(110,39,0)
(47,99,0)
(87,9,0)
(134,106,0)
(123,36,0)
(2,123,0)
(111,99,0)
(83,8,0)
(89,73,0)
(133,120,0)
(138,114,0)
(140,53,0)
(126,93,0)
(26,73,0)
(117,34,0)
(9,87,0)
(7,87,0)
(57,128,0)
(88,137,0)
(21,138,0)
(95,53,0)
(44,88,0)
(72,114,0)
(63,50,0)
(74,6,0)
(78,72,0)
(98,51,0)
(45,36,0)
(18,45,0)
(104,29,0)
(51,42,0)
(124,77,0)
(106,134,0)
(116,55,0)
(25,39,0)
(51,121,0)
(119,33,0)
(58,106,0)
(38,114,0)
(37,97,0)
(99,59,0)
(97,114,0)
(43,34,0)
(10,114,0)
(133,59,0)
(105,72,0)
(34,12,0)
(96,3,0)
(106,134,1)
(48,72,1)
(74,119,1)
(121,102,1)
(66,64,1)
(44,35,1)
(88,44,1)
(133,139,1)
(79,106,1)
(123,36,1)
(42,3,1)
(96,56,1)
(106,58,1)
(124,118,1)
(83,41,1)
(99,59,1)
(116,12,1)
(98,121,1)
(99,47,1)
(35,90,1)
(60,130,1)
(103,19,1)
(30,59,1)
(134,59,1)
(18,59,1)
(46,36,1)
(107,17,1)
(9,62,1)
(142,57,1)
(135,120,1)
(67,32,1)
(30,84,1)
(134,70,1)
(132,50,1)
(81,92,1)
(57,128,1)
(138,59,1)
(2,59,1)
(27,54,1)
(91,124,1)
(17,49,1)
(74,116,1)
(50,59,1)
(136,107,1)
(73,26,1)
(49,142,1)
(7,0,1)
(100,60,1)
(111,75,1)
(115,104,1)
(112,125,1)
(29,28,1)
(2,52,1)
(9,59,1)
(1,115,1)
(34,43,1)
(117,27,1)
(53,140,1)
(64,108,1)
(11,16,1)
(74,6,1)
(74,97,1)
(8,136,1)
(141,134,1)
(100,59,1)
(120,42,1)
(97,59,1)
(99,25,1)
(0,11,1)
(35,83,1)
(101,64,1)
(110,30,1)
(51,98,1)
(58,141,1)
(97,15,1)
(15,37,1)
(22,138,1)
(24,143,1)
(68,83,1)
(109,105,1)
(13,7,1)
(105,12,1)
(32,117,1)
(108,104,1)
(26,89,1)
(83,8,1)
(90,68,1)
(140,95,1)
(139,86,1)
(130,24,1)
(126,66,1)
(51,121,1)
(143,25,1)
(118,35,1)
(118,88,1)
(11,57,1)
(40,109,1)
(125,100,1)
(17,59,1)
(61,19,1)
(127,61,1)
(12,34,1)
(28,94,1)
(56,51,1)
(133,59,1)
(12,50,1)
(54,132,1)
(119,73,1)
(41,135,1)
(21,123,1)
(104,29,1)
(36,45,1)
(94,81,1)
(16,59,1)
(39,110,1)
(77,91,1)
(42,51,1)
(6,93,1)
(83,120,1)
(117,59,1)
(129,77,1)
(85,127,1)
(43,67,1)
(129,80,1)
(121,99,1)
(87,9,1)
(34,117,1)
(39,72,1)
(19,48,1)
(25,39,1)
(131,126,1)
(3,96,1)
(92,85,1)
(89,103,1)
(77,59,1)
(123,100,1)
(70,22,1)
(16,122,1)
(75,133,1)
(29,59,1)
(86,87,1)
(63,20,1)
(93,131,1)
(62,13,1)
(80,77,1)
(102,99,1)
(53,59,1)
(128,53,1)
(123,2,1)
(138,82,1)
(47,111,1)
(11,106,1)
(50,63,1)
(37,129,1)
(95,79,1)
(82,21,1)
(18,112,1)
(78,40,1)
(3,59,1)
(52,46,1)
(72,78,1)
(122,8,1)
(19,72,1)
(84,101,1)
(83,59,1)
(88,59,1)
(37,118,1)
(127,72,1)
(108,1,1)
(2,25,1)
(45,18,1)
(126,64,2)
(6,64,2)
(121,99,2)
(3,64,2)
(107,57,2)
(117,59,2)
(60,64,2)
(50,59,2)
(122,57,2)
(96,64,2)
(103,19,2)
(0,64,2)
(83,8,2)
(64,108,2)
(99,64,2)
(29,19,2)
(132,50,2)
(111,64,2)
(61,19,2)
(110,64,2)
(108,104,2)
(26,19,2)
(15,64,2)
(88,35,2)
(106,134,2)
(45,18,2)
(88,59,2)
(21,64,2)
(105,12,2)
(64,19,2)
(117,50,2)
(133,59,2)
(108,19,2)
(134,64,2)
(25,64,2)
(16,57,2)
(123,64,2)
(62,64,2)
(51,121,2)
(102,64,2)
(2,25,2)
(67,50,2)
(1,19,2)
(92,19,2)
(90,64,2)
(128,53,2)
(100,64,2)
(141,64,2)
(36,64,2)
(83,120,2)
(3,59,2)
(74,119,2)
(81,19,2)
(104,19,2)
(87,64,2)
(28,19,2)
(46,64,2)
(53,106,2)
(35,90,2)
(34,50,2)
(89,19,2)
(80,118,2)
(8,57,2)
(128,106,2)
(12,50,2)
(56,64,2)
(17,59,2)
(12,34,2)
(18,59,2)
(74,116,2)
(129,77,2)
(72,78,2)
(83,64,2)
(42,3,2)
(25,39,2)
(32,50,2)
(115,19,2)
(22,64,2)
(112,64,2)
(43,50,2)
(79,106,2)
(124,118,2)
(135,64,2)
(101,64,2)
(17,57,2)
(120,42,2)
(70,64,2)
(74,6,2)
(2,64,2)
(100,59,2)
(87,9,2)
(72,12,2)
(8,136,2)
(58,64,2)
(42,64,2)
(27,50,2)
(57,106,2)
(125,64,2)
(9,64,2)
(75,64,2)
(7,64,2)
(2,59,2)
(86,64,2)
(98,64,2)
(73,19,2)
(54,50,2)
(120,64,2)
(53,59,2)
(97,64,2)
(97,59,2)
(138,64,2)
(44,35,2)
(133,64,2)
(84,64,2)
(127,72,2)
(41,64,2)
(85,127,2)
(78,12,2)
(51,64,2)
(134,59,2)
(99,59,2)
(66,64,2)
(11,64,2)
(123,2,2)
(123,36,2)
(136,57,2)
(106,64,2)
(19,12,2)
(123,100,2)
(129,118,2)
(94,19,2)
(13,64,2)
(82,64,2)
(9,59,2)
(37,64,2)
(118,64,2)
(68,64,2)
(95,106,2)
(77,118,2)
(106,58,2)
(42,51,2)
(47,64,2)
(39,64,2)
(45,64,2)
(49,57,2)
(116,12,2)
(30,64,2)
(19,72,2)
(16,59,2)
(30,59,2)
(131,64,2)
(121,64,2)
(35,83,2)
(48,12,2)
(104,29,2)
(140,106,2)
(139,64,2)
(24,64,2)
(127,19,2)
(57,128,2)
(138,59,2)
(40,12,2)
(36,45,2)
(109,12,2)
(39,72,2)
(34,43,2)
(93,64,2)
(18,64,2)
(119,19,2)
(52,64,2)
(83,59,2)
(29,59,2)
(143,64,2)
(77,59,2)
(142,57,2)
(99,25,2)
(34,117,2)
(130,64,2)
(35,64,2)
(85,19,2)
(91,118,2)
-----------------------------------
(0,AST_DEVSTATE_CACHABLE)
(1,PARSE_PORT_REQUIRE)
(2,p->expiry)
(3,peer_ref(p)
(4,if (p->expire > -1)
(5,expiry)
(6,return;)
(7,"IAX2/%s")
(8,p->expire = -1)
(9,p->name)
(10,if (!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)
(11,AST_DEVICE_UNKNOWN)
(12,ast_test_flag64(p, IAX_TEMPONLY)
(13,p)
(14,if (p->expire == -1)
(15,1)
(16,peer_unref(p)
(17,p->expire)
(18,p->addr)
(19,!expiry)
(20,p)
(21,p)
(22,p)
(23,if (!expiry)
(24,"Seeding \'%s\' at %s for %d\\n")
(25,p->expiry = atoi(expiry)
(26,data)
(27,name)
(28,addr)
(29,p->addr)
(30,p->expiry)
(31,)
(32,data)
(33,)
(34,ast_db_get("IAX/Registry", p->name, data, sizeof(data)
(35,p->expire == -1)
(36,ast_sockaddr_stringify(&p->addr)
(37,p)
(38,if (ast_test_flag64(p, IAX_TEMPONLY)
(39,atoi(expiry)
(40,\':\')
(41,expire)
(42,iax2_sched_add(sched, (p->expiry + 10)
(43,sizeof(data)
(44,p)
(45,&p->addr)
(46,p)
(47,expiry)
(48,expiry)
(49,expire)
(50,ast_test_flag64(p, IAX_TEMPONLY)
(51,(p->expiry + 10)
(52,expiry)
(53,p->expire)
(54,p)
(55,)
(56,expire_registry)
(57,!AST_SCHED_DEL(sched, p->expire)
(58,-1)
(59,struct iax2_peer *p)
(60,name)
(61,expiry)
(62,name)
(63,IAX_TEMPONLY)
(64,!ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)
(65,if (!AST_SCHED_DEL(sched, p->expire)
(66,LOG_NOTICE)
(67,data)
(68,1)
(69,)
(70,expire)
(71,if (iax2_regfunk)
(72,expiry = strrchr(data, \':\')
(73,ast_log(LOG_NOTICE, "IAX/Registry astdb entry missing expiry: \'%s\'\\n", data)
(74,RET)
(75,sched)
(76,)
(77,p->name)
(78,strrchr(data, \':\')
(79,sched)
(80,1)
(81,*expiry++ = \'\\0\')
(82,0)
(83,p->expire)
(84,expiry)
(85,*expiry++)
(86,p)
(87,ast_devstate_changed(AST_DEVICE_UNKNOWN, AST_DEVSTATE_CACHABLE, "IAX2/%s", p->name)
(88,peer_unref(p)
(89,"IAX/Registry astdb entry missing expiry: \'%s\'\\n")
(90,-1)
(91,name)
(92,\'\\0\')
(93,ast_log(LOG_NOTICE, "IAX/Registry astdb host:port invalid - \'%s\'\\n", data)
(94,p)
(95,p)
(96,p)
(97,register_peer_exten(p, 1)
(98,1000)
(99,p->expiry)
(100,p->name)
(101,p)
(102,10)
(103,LOG_NOTICE)
(104,&p->addr)
(105,expiry)
(106,p->expire > -1)
(107,1)
(108,ast_sockaddr_parse(&p->addr, data, PARSE_PORT_REQUIRE)
(109,data)
(110,expiry)
(111,p)
(112,addr)
(113,)
(114,)
(115,data)
(116,return;)
(117,p->name)
(118,iax2_regfunk)
(119,return;)
(120,p->expire = iax2_sched_add(sched, (p->expiry + 10)
(121,p->expiry + 10)
(122,p)
(123,ast_verb(3, "Seeding \'%s\' at %s for %d\\n", p->name,\n\\n\\t\\tast_sockaddr_stringify(&p->addr)
(124,p)
(125,p)
(126,"IAX/Registry astdb host:port invalid - \'%s\'\\n")
(127,expiry++)
(128,AST_SCHED_DEL(sched, p->expire)
(129,iax2_regfunk(p->name, 1)
(130,p)
(131,data)
(132,"IAX/Registry")
(133,p->expire)
(134,p->expire)
(135,p)
(136,-1)
(137,)
(138,iax2_poke_peer(p, 0)
(139,expire)
(140,expire)
(141,1)
(142,p)
(143,3)
(144,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^