-----label-----
0
-----code-----
static int __shrink_hole(struct drm_i915_private *i915,
			 struct i915_address_space *vm,
			 u64 hole_start, u64 hole_end,
			 unsigned long end_time)
{
	struct drm_i915_gem_object *obj;
	unsigned long flags = PIN_OFFSET_FIXED | PIN_USER;
	unsigned int order = 12;
	LIST_HEAD(objects);
	int err = 0;
	u64 addr;

	/* Keep creating larger objects until one cannot fit into the hole */
	for (addr = hole_start; addr < hole_end; ) {
		struct i915_vma *vma;
		u64 size = BIT_ULL(order++);

		size = min(size, hole_end - addr);
		obj = fake_dma_object(i915, size);
		if (IS_ERR(obj)) {
			err = PTR_ERR(obj);
			break;
		}

		list_add(&obj->st_link, &objects);

		vma = i915_vma_instance(obj, vm, NULL);
		if (IS_ERR(vma)) {
			err = PTR_ERR(vma);
			break;
		}

		GEM_BUG_ON(vma->size != size);

		err = i915_vma_pin(vma, 0, 0, addr | flags);
		if (err) {
			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",
			       __func__, addr, size, hole_start, hole_end, err);
			break;
		}

		if (!drm_mm_node_allocated(&vma->node) ||
		    i915_vma_misplaced(vma, 0, 0, addr | flags)) {
			pr_err("%s incorrect at %llx + %llx\n",
			       __func__, addr, size);
			i915_vma_unpin(vma);
			err = i915_vma_unbind(vma);
			err = -EINVAL;
			break;
		}

		i915_vma_unpin(vma);
		addr += size;

		if (igt_timeout(end_time,
				"%s timed out at ofset %llx [%llx - %llx]\n",
				__func__, addr, hole_start, hole_end)) {
			err = -EINTR;
			break;
		}
	}

	close_object_list(&objects, vm);
	cleanup_freed_objects(i915);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
31,41
32,33
33,34
33,35
34,35
36,37
36,38
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
53,54
53,55
55,56
57,58
58,59
58,60
59,60
61,62
62,63
64,65
65,66
65,67
67,68
67,69
69,70
71,72
72,73
72,74
73,74
75,76
77,78
77,79
77,80
78,79
79,80
79,81
80,81
82,83
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
89,94
89,95
89,96
89,97
89,98
89,99
89,100
89,101
89,102
89,103
89,104
90,91
91,92
91,93
92,93
94,95
94,96
97,98
98,99
98,100
99,100
101,102
101,103
103,104
104,105
104,106
105,106
107,108
108,109
110,111
111,112
111,113
112,113
114,115
114,116
114,117
115,116
117,118
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
128,129
128,130
128,131
129,130
131,132
133,134
135,136
135,137
136,137
136,138
137,138
139,140
141,142
141,143
142,143
143,144
143,145
144,145
146,147
146,148
147,148
149,150
152,153
153,154
153,155
153,156
154,155
156,157
157,158
157,159
158,159
161,162
162,163
164,165
165,166
165,167
166,167
168,169
168,170
168,171
168,172
169,170
171,172
173,174
175,176
177,178
177,179
178,179
178,180
179,180
181,182
183,184
183,185
184,185
185,186
185,187
186,187
188,189
188,190
189,190
191,192
194,195
195,196
195,197
196,197
198,199
198,200
199,200
199,201
200,201
203,204
205,206
206,207
206,208
207,208
209,210
209,211
209,212
209,213
209,214
210,211
212,213
216,217
216,218
217,218
219,220
221,222
221,223
222,223
224,225
224,226
225,226
226,227
226,228
226,229
226,230
226,231
226,232
226,233
226,234
227,228
230,231
232,233
234,235
236,237
238,239
240,241
243,244
243,245
244,245
244,246
245,246
246,247
246,248
247,248
249,250
250,251
250,252
251,252
254,255
254,256
254,257
254,258
254,259
255,256
257,258
261,262
261,263
262,263
264,265
266,267
266,268
266,269
266,270
266,271
267,268
268,269
268,270
268,271
268,272
268,273
269,270
272,273
274,275
276,277
278,279
279,280
279,281
280,281
282,283
284,285
285,286
285,287
286,287
288,289
288,290
289,290
291,292
293,294
294,295
294,296
295,296
297,298
298,299
301,302
302,303
302,304
303,304
305,306
307,308
308,309
308,310
309,310
311,312
313,314
313,315
314,315
314,316
314,317
314,318
314,319
314,320
314,321
315,316
317,318
320,321
322,323
324,325
326,327
328,329
328,330
329,330
330,331
330,332
331,332
333,334
334,335
337,338
338,339
338,340
338,341
339,340
341,342
342,343
344,345
346,347
347,348
347,349
348,349
350,351
352,353
353,354
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,28,30,35,37,38,41,43,47,49,52,54,56,60,63,66,68,70,74,76,81,83,86,88,93,95,96,100,102,106,109,113,116,118,121,123,127,130,132,134,138,140,145,148,150,151,155,159,160,163,167,170,172,174,176,180,182,187,190,192,193,197,201,202,204,208,211,213,214,215,218,220,223,228,229,231,233,235,237,239,241,242,248,252,253,256,258,259,260,263,265,270,271,273,275,277,281,283,287,290,292,296,299,300,304,306,310,312,316,318,319,321,323,325,327,332,335,336,340,343,345,349,351,354
-----computeFrom-----
45,46
45,47
79,80
79,81
84,85
84,86
111,112
111,113
119,120
119,121
125,126
125,127
143,144
143,145
165,166
165,167
185,186
185,187
198,199
198,200
206,207
206,208
216,217
216,218
244,245
244,246
261,262
261,263
285,286
285,287
294,295
294,296
308,309
308,310
330,331
330,332
-----guardedBy-----
258,292
263,275
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int __shrink_hole(struct drm_i915_private *i915,			 struct i915_address_space *vm,			 u64 hole_start, u64 hole_end,			 unsigned long end_time){	struct drm_i915_gem_object *obj;	unsigned long flags = PIN_OFFSET_FIXED | PIN_USER;	unsigned int order = 12;	LIST_HEAD(objects);	int err = 0;	u64 addr;	/* Keep creating larger objects until one cannot fit into the hole */	for (addr = hole_start; addr < hole_end; ) {		struct i915_vma *vma;		u64 size = BIT_ULL(order++);		size = min(size, hole_end - addr);		obj = fake_dma_object(i915, size);		if (IS_ERR(obj)) {			err = PTR_ERR(obj);			break;		}		list_add(&obj->st_link, &objects);		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			break;		}		GEM_BUG_ON(vma->size != size);		err = i915_vma_pin(vma, 0, 0, addr | flags);		if (err) {			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);			break;		}		if (!drm_mm_node_allocated(&vma->node) ||		    i915_vma_misplaced(vma, 0, 0, addr | flags)) {			pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);			i915_vma_unpin(vma);			err = i915_vma_unbind(vma);			err = -EINVAL;			break;		}		i915_vma_unpin(vma);		addr += size;		if (igt_timeout(end_time,				"%s timed out at ofset %llx [%llx - %llx]\n",				__func__, addr, hole_start, hole_end)) {			err = -EINTR;			break;		}	}	close_object_list(&objects, vm);	cleanup_freed_objects(i915);	return err;}
static int
__shrink_hole(struct drm_i915_private *i915,			 struct i915_address_space *vm,			 u64 hole_start, u64 hole_end,			 unsigned long end_time)
__shrink_hole
struct drm_i915_private *i915
struct drm_i915_private
drm_i915_private
*i915
*
i915
struct i915_address_space *vm
struct i915_address_space
i915_address_space
*vm
*
vm
u64 hole_start
u64
u64
hole_start
hole_start
u64 hole_end
u64
u64
hole_end
hole_end
unsigned long end_time
unsigned long
end_time
end_time
{	struct drm_i915_gem_object *obj;	unsigned long flags = PIN_OFFSET_FIXED | PIN_USER;	unsigned int order = 12;	LIST_HEAD(objects);	int err = 0;	u64 addr;	/* Keep creating larger objects until one cannot fit into the hole */	for (addr = hole_start; addr < hole_end; ) {		struct i915_vma *vma;		u64 size = BIT_ULL(order++);		size = min(size, hole_end - addr);		obj = fake_dma_object(i915, size);		if (IS_ERR(obj)) {			err = PTR_ERR(obj);			break;		}		list_add(&obj->st_link, &objects);		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			break;		}		GEM_BUG_ON(vma->size != size);		err = i915_vma_pin(vma, 0, 0, addr | flags);		if (err) {			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);			break;		}		if (!drm_mm_node_allocated(&vma->node) ||		    i915_vma_misplaced(vma, 0, 0, addr | flags)) {			pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);			i915_vma_unpin(vma);			err = i915_vma_unbind(vma);			err = -EINVAL;			break;		}		i915_vma_unpin(vma);		addr += size;		if (igt_timeout(end_time,				"%s timed out at ofset %llx [%llx - %llx]\n",				__func__, addr, hole_start, hole_end)) {			err = -EINTR;			break;		}	}	close_object_list(&objects, vm);	cleanup_freed_objects(i915);	return err;}
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object
drm_i915_gem_object
*obj
*
obj
unsigned long flags = PIN_OFFSET_FIXED | PIN_USER;
unsigned long flags = PIN_OFFSET_FIXED | PIN_USER;
unsigned long
flags = PIN_OFFSET_FIXED | PIN_USER
flags
= PIN_OFFSET_FIXED | PIN_USER
PIN_OFFSET_FIXED | PIN_USER
PIN_OFFSET_FIXED
PIN_OFFSET_FIXED
PIN_USER
PIN_USER
unsigned int order = 12;
unsigned int order = 12;
unsigned int
order = 12
order
= 12
12
LIST_HEAD(objects);
LIST_HEAD(objects);
LIST_HEAD
LIST_HEAD
(objects)
objects
objects
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
u64 addr;
u64 addr;
u64
u64
addr
addr
for (addr = hole_start; addr < hole_end; ) {		struct i915_vma *vma;		u64 size = BIT_ULL(order++);		size = min(size, hole_end - addr);		obj = fake_dma_object(i915, size);		if (IS_ERR(obj)) {			err = PTR_ERR(obj);			break;		}		list_add(&obj->st_link, &objects);		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			break;		}		GEM_BUG_ON(vma->size != size);		err = i915_vma_pin(vma, 0, 0, addr | flags);		if (err) {			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);			break;		}		if (!drm_mm_node_allocated(&vma->node) ||		    i915_vma_misplaced(vma, 0, 0, addr | flags)) {			pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);			i915_vma_unpin(vma);			err = i915_vma_unbind(vma);			err = -EINVAL;			break;		}		i915_vma_unpin(vma);		addr += size;		if (igt_timeout(end_time,				"%s timed out at ofset %llx [%llx - %llx]\n",				__func__, addr, hole_start, hole_end)) {			err = -EINTR;			break;		}	}
addr = hole_start;
addr = hole_start
addr
addr
hole_start
hole_start
addr < hole_end
addr
addr
hole_end
hole_end
{		struct i915_vma *vma;		u64 size = BIT_ULL(order++);		size = min(size, hole_end - addr);		obj = fake_dma_object(i915, size);		if (IS_ERR(obj)) {			err = PTR_ERR(obj);			break;		}		list_add(&obj->st_link, &objects);		vma = i915_vma_instance(obj, vm, NULL);		if (IS_ERR(vma)) {			err = PTR_ERR(vma);			break;		}		GEM_BUG_ON(vma->size != size);		err = i915_vma_pin(vma, 0, 0, addr | flags);		if (err) {			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);			break;		}		if (!drm_mm_node_allocated(&vma->node) ||		    i915_vma_misplaced(vma, 0, 0, addr | flags)) {			pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);			i915_vma_unpin(vma);			err = i915_vma_unbind(vma);			err = -EINVAL;			break;		}		i915_vma_unpin(vma);		addr += size;		if (igt_timeout(end_time,				"%s timed out at ofset %llx [%llx - %llx]\n",				__func__, addr, hole_start, hole_end)) {			err = -EINTR;			break;		}	}
struct i915_vma *vma;
struct i915_vma *vma;
struct i915_vma
i915_vma
*vma
*
vma
u64 size = BIT_ULL(order++);
u64 size = BIT_ULL(order++);
u64
u64
size = BIT_ULL(order++)
size
= BIT_ULL(order++)
BIT_ULL(order++)
BIT_ULL
BIT_ULL
order++
order
order
size = min(size, hole_end - addr);
size = min(size, hole_end - addr)
size
size
min(size, hole_end - addr)
min
min
size
size
hole_end - addr
hole_end
hole_end
addr
addr
obj = fake_dma_object(i915, size);
obj = fake_dma_object(i915, size)
obj
obj
fake_dma_object(i915, size)
fake_dma_object
fake_dma_object
i915
i915
size
size
if (IS_ERR(obj)) {			err = PTR_ERR(obj);			break;		}
IS_ERR(obj)
IS_ERR
IS_ERR
obj
obj
{			err = PTR_ERR(obj);			break;		}
err = PTR_ERR(obj);
err = PTR_ERR(obj)
err
err
PTR_ERR(obj)
PTR_ERR
PTR_ERR
obj
obj
break;
list_add(&obj->st_link, &objects);
list_add(&obj->st_link, &objects)
list_add
list_add
&obj->st_link
obj->st_link
obj
obj
st_link
&objects
objects
objects
vma = i915_vma_instance(obj, vm, NULL);
vma = i915_vma_instance(obj, vm, NULL)
vma
vma
i915_vma_instance(obj, vm, NULL)
i915_vma_instance
i915_vma_instance
obj
obj
vm
vm
NULL
NULL
if (IS_ERR(vma)) {			err = PTR_ERR(vma);			break;		}
IS_ERR(vma)
IS_ERR
IS_ERR
vma
vma
{			err = PTR_ERR(vma);			break;		}
err = PTR_ERR(vma);
err = PTR_ERR(vma)
err
err
PTR_ERR(vma)
PTR_ERR
PTR_ERR
vma
vma
break;
GEM_BUG_ON(vma->size != size);
GEM_BUG_ON(vma->size != size)
GEM_BUG_ON
GEM_BUG_ON
vma->size != size
vma->size
vma
vma
size
size
size
err = i915_vma_pin(vma, 0, 0, addr | flags);
err = i915_vma_pin(vma, 0, 0, addr | flags)
err
err
i915_vma_pin(vma, 0, 0, addr | flags)
i915_vma_pin
i915_vma_pin
vma
vma
0
0
addr | flags
addr
addr
flags
flags
if (err) {			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);			break;		}
err
err
{			pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);			break;		}
pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err);
pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n",			       __func__, addr, size, hole_start, hole_end, err)
pr_err
pr_err
"%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\n"
__func__
__func__
addr
addr
size
size
hole_start
hole_start
hole_end
hole_end
err
err
break;
if (!drm_mm_node_allocated(&vma->node) ||		    i915_vma_misplaced(vma, 0, 0, addr | flags)) {			pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);			i915_vma_unpin(vma);			err = i915_vma_unbind(vma);			err = -EINVAL;			break;		}
!drm_mm_node_allocated(&vma->node) ||		    i915_vma_misplaced(vma, 0, 0, addr | flags)
!drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated(&vma->node)
drm_mm_node_allocated
drm_mm_node_allocated
&vma->node
vma->node
vma
vma
node
i915_vma_misplaced(vma, 0, 0, addr | flags)
i915_vma_misplaced
i915_vma_misplaced
vma
vma
0
0
addr | flags
addr
addr
flags
flags
{			pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);			i915_vma_unpin(vma);			err = i915_vma_unbind(vma);			err = -EINVAL;			break;		}
pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size);
pr_err("%s incorrect at %llx + %llx\n",			       __func__, addr, size)
pr_err
pr_err
"%s incorrect at %llx + %llx\n"
__func__
__func__
addr
addr
size
size
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
err = i915_vma_unbind(vma);
err = i915_vma_unbind(vma)
err
err
i915_vma_unbind(vma)
i915_vma_unbind
i915_vma_unbind
vma
vma
err = -EINVAL;
err = -EINVAL
err
err
-EINVAL
EINVAL
EINVAL
break;
i915_vma_unpin(vma);
i915_vma_unpin(vma)
i915_vma_unpin
i915_vma_unpin
vma
vma
addr += size;
addr += size
addr
addr
size
size
if (igt_timeout(end_time,				"%s timed out at ofset %llx [%llx - %llx]\n",				__func__, addr, hole_start, hole_end)) {			err = -EINTR;			break;		}
igt_timeout(end_time,				"%s timed out at ofset %llx [%llx - %llx]\n",				__func__, addr, hole_start, hole_end)
igt_timeout
igt_timeout
end_time
end_time
"%s timed out at ofset %llx [%llx - %llx]\n"
__func__
__func__
addr
addr
hole_start
hole_start
hole_end
hole_end
{			err = -EINTR;			break;		}
err = -EINTR;
err = -EINTR
err
err
-EINTR
EINTR
EINTR
break;
close_object_list(&objects, vm);
close_object_list(&objects, vm)
close_object_list
close_object_list
&objects
objects
objects
vm
vm
cleanup_freed_objects(i915);
cleanup_freed_objects(i915)
cleanup_freed_objects
cleanup_freed_objects
i915
i915
return err;
err
err
-----joern-----
(7,101,0)
(157,107,0)
(109,34,0)
(65,148,0)
(3,148,0)
(129,10,0)
(5,110,0)
(142,156,0)
(68,148,0)
(90,108,0)
(4,38,0)
(95,38,0)
(60,129,0)
(41,118,0)
(102,87,0)
(24,27,0)
(78,148,0)
(129,4,0)
(98,121,0)
(16,0,0)
(93,163,0)
(134,21,0)
(54,145,0)
(76,96,0)
(9,100,0)
(139,48,0)
(87,29,0)
(103,21,0)
(129,160,0)
(102,107,0)
(166,108,0)
(115,107,0)
(104,163,0)
(27,107,0)
(66,27,0)
(159,76,0)
(152,31,0)
(13,107,0)
(116,93,0)
(131,148,0)
(161,78,0)
(77,38,0)
(45,87,0)
(151,110,0)
(164,132,0)
(97,126,0)
(46,91,0)
(145,56,0)
(58,148,0)
(89,58,0)
(147,21,0)
(19,156,0)
(135,70,0)
(96,76,0)
(27,168,0)
(38,4,0)
(129,84,0)
(27,59,0)
(22,50,0)
(0,16,0)
(108,166,0)
(147,140,0)
(34,109,0)
(136,102,0)
(3,121,0)
(13,59,0)
(150,34,0)
(82,111,0)
(110,107,0)
(27,160,0)
(1,8,0)
(93,156,0)
(58,80,0)
(65,104,0)
(42,156,0)
(100,59,0)
(132,23,0)
(121,3,0)
(118,150,0)
(96,84,0)
(107,107,0)
(161,7,0)
(15,104,0)
(75,156,0)
(50,156,0)
(109,29,0)
(29,87,0)
(124,113,0)
(56,91,0)
(118,78,0)
(20,13,0)
(16,156,0)
(106,85,0)
(117,4,0)
(94,43,0)
(36,22,0)
(70,135,0)
(48,65,0)
(149,38,0)
(112,27,0)
(64,147,0)
(167,94,0)
(94,78,0)
(83,78,0)
(96,158,0)
(34,150,0)
(88,9,0)
(9,58,0)
(18,83,0)
(132,65,0)
(100,107,0)
(38,110,0)
(29,109,0)
(147,107,0)
(69,148,0)
(83,21,0)
(38,78,0)
(86,96,0)
(129,59,0)
(125,148,0)
(39,135,0)
(144,42,0)
(137,104,0)
(71,156,0)
(138,7,0)
(103,126,0)
(26,148,0)
(158,148,0)
(100,140,0)
(108,21,0)
(107,84,0)
(129,107,0)
(22,7,0)
(17,147,0)
(123,166,0)
(140,160,0)
(87,78,0)
(13,140,0)
(129,140,0)
(153,131,0)
(28,129,0)
(22,56,0)
(16,43,0)
(84,148,0)
(22,70,0)
(92,22,0)
(107,148,0)
(119,56,0)
(113,42,0)
(57,148,0)
(44,70,0)
(35,129,0)
(67,50,0)
(70,73,0)
(25,129,0)
(49,76,0)
(62,156,0)
(53,10,0)
(150,118,0)
(141,129,0)
(81,94,0)
(22,156,0)
(110,42,0)
(110,140,0)
(32,27,0)
(84,9,0)
(63,111,0)
(130,0,0)
(4,148,0)
(12,161,0)
(72,100,0)
(102,140,0)
(114,87,0)
(37,27,0)
(99,65,0)
(3,23,0)
(105,16,0)
(131,78,0)
(143,132,0)
(122,78,0)
(76,78,0)
(42,113,0)
(22,4,0)
(126,103,0)
(147,84,0)
(9,84,0)
(155,156,0)
(56,145,0)
(80,8,0)
(120,140,0)
(126,78,0)
(51,94,0)
(23,132,0)
(128,13,0)
(80,58,0)
(127,73,0)
(52,129,0)
(47,113,0)
(7,161,0)
(102,42,0)
(133,103,0)
(11,140,0)
(135,65,0)
(146,147,0)
(87,102,0)
(22,108,0)
(111,156,0)
(8,111,0)
(8,80,0)
(100,9,0)
(6,148,0)
(158,96,0)
(78,94,0)
(79,100,0)
(30,118,0)
(104,65,0)
(23,3,0)
(85,156,0)
(162,148,0)
(165,102,0)
(107,140,0)
(104,84,0)
(2,87,0)
(61,129,0)
(14,50,0)
(31,78,0)
(55,101,0)
(94,65,0)
(154,84,0)
(40,147,0)
(110,38,0)
(74,27,0)
(95,77,1)
(149,117,1)
(22,50,1)
(143,48,1)
(135,39,1)
(129,4,1)
(147,84,1)
(84,9,1)
(118,78,1)
(132,65,1)
(93,163,1)
(110,140,1)
(108,166,1)
(93,116,1)
(100,59,1)
(76,78,1)
(158,96,1)
(3,121,1)
(87,102,1)
(110,42,1)
(94,43,1)
(105,0,1)
(96,76,1)
(27,59,1)
(130,46,1)
(23,132,1)
(147,17,1)
(8,1,1)
(106,111,1)
(116,16,1)
(2,109,1)
(60,33,1)
(150,118,1)
(90,103,1)
(22,36,1)
(161,78,1)
(130,127,1)
(27,107,1)
(52,28,1)
(24,74,1)
(18,147,1)
(104,15,1)
(11,120,1)
(127,70,1)
(80,8,1)
(34,150,1)
(129,140,1)
(67,85,1)
(99,84,1)
(130,13,1)
(129,59,1)
(117,158,1)
(85,106,1)
(87,78,1)
(29,109,1)
(14,67,1)
(110,5,1)
(12,138,1)
(79,88,1)
(107,157,1)
(46,56,1)
(28,25,1)
(161,12,1)
(13,140,1)
(130,55,1)
(100,140,1)
(27,160,1)
(121,98,1)
(82,63,1)
(48,65,1)
(147,140,1)
(37,24,1)
(83,18,1)
(166,123,1)
(22,4,1)
(159,31,1)
(109,34,1)
(20,128,1)
(153,29,1)
(102,107,1)
(118,41,1)
(83,78,1)
(92,22,1)
(110,107,1)
(17,64,1)
(50,14,1)
(27,168,1)
(13,59,1)
(47,144,1)
(98,23,1)
(141,35,1)
(138,31,1)
(132,164,1)
(22,56,1)
(7,161,1)
(58,80,1)
(102,140,1)
(129,141,1)
(119,27,1)
(97,133,1)
(31,78,1)
(126,97,1)
(35,61,1)
(89,13,1)
(128,27,1)
(70,135,1)
(56,145,1)
(49,159,1)
(54,119,1)
(145,54,1)
(74,112,1)
(53,129,1)
(104,163,1)
(9,100,1)
(13,107,1)
(102,136,1)
(44,48,1)
(88,154,1)
(5,151,1)
(72,79,1)
(136,165,1)
(27,32,1)
(165,114,1)
(107,84,1)
(120,50,1)
(25,60,1)
(137,99,1)
(48,139,1)
(96,86,1)
(42,113,1)
(16,43,1)
(140,11,1)
(36,93,1)
(146,29,1)
(38,110,1)
(124,47,1)
(65,104,1)
(40,146,1)
(30,33,1)
(140,160,1)
(134,108,1)
(113,124,1)
(29,87,1)
(111,82,1)
(32,37,1)
(61,52,1)
(114,45,1)
(123,90,1)
(16,0,1)
(55,7,1)
(152,78,1)
(157,115,1)
(77,149,1)
(86,76,1)
(104,84,1)
(94,81,1)
(128,140,1)
(107,107,1)
(139,65,1)
(0,130,1)
(164,143,1)
(81,167,1)
(129,160,1)
(22,108,1)
(13,20,1)
(135,65,1)
(76,49,1)
(107,140,1)
(122,3,1)
(45,2,1)
(130,53,1)
(38,78,1)
(131,153,1)
(103,126,1)
(8,111,1)
(22,70,1)
(94,65,1)
(100,72,1)
(151,95,1)
(147,107,1)
(22,7,1)
(31,152,1)
(64,40,1)
(154,58,1)
(66,107,1)
(131,78,1)
(33,4,1)
(51,122,1)
(129,107,1)
(129,84,1)
(41,30,1)
(39,44,1)
(9,58,1)
(3,23,1)
(16,105,1)
(78,94,1)
(115,131,1)
(112,66,1)
(102,42,1)
(4,38,1)
(15,137,1)
(130,134,1)
(167,51,1)
(126,78,1)
(1,89,1)
(96,84,1)
(63,42,1)
(133,83,1)
(100,107,1)
(92,22,2)
(119,27,2)
(9,13,2)
(40,29,2)
(147,29,2)
(27,168,2)
(31,78,2)
(147,84,2)
(93,163,2)
(13,27,2)
(15,13,2)
(147,140,2)
(84,13,2)
(3,48,2)
(100,59,2)
(145,27,2)
(8,111,2)
(17,29,2)
(28,33,2)
(35,33,2)
(23,132,2)
(84,9,2)
(110,107,2)
(126,78,2)
(80,13,2)
(132,65,2)
(143,48,2)
(4,38,2)
(58,13,2)
(129,33,2)
(78,94,2)
(18,29,2)
(107,140,2)
(38,78,2)
(3,23,2)
(8,13,2)
(77,31,2)
(165,109,2)
(107,84,2)
(96,31,2)
(80,8,2)
(29,109,2)
(127,48,2)
(164,48,2)
(27,59,2)
(89,13,2)
(83,78,2)
(135,65,2)
(102,107,2)
(100,140,2)
(45,109,2)
(128,27,2)
(49,31,2)
(118,33,2)
(167,48,2)
(150,33,2)
(58,80,2)
(46,27,2)
(13,107,2)
(76,78,2)
(100,107,2)
(103,29,2)
(56,145,2)
(48,65,2)
(137,13,2)
(60,33,2)
(158,96,2)
(29,87,2)
(5,31,2)
(13,140,2)
(126,29,2)
(2,109,2)
(112,29,2)
(138,31,2)
(100,13,2)
(151,31,2)
(61,33,2)
(121,48,2)
(133,29,2)
(166,29,2)
(118,78,2)
(87,109,2)
(38,31,2)
(107,107,2)
(87,102,2)
(146,29,2)
(66,29,2)
(74,29,2)
(150,118,2)
(24,29,2)
(109,34,2)
(81,48,2)
(129,84,2)
(22,7,2)
(27,107,2)
(107,29,2)
(110,42,2)
(22,70,2)
(30,33,2)
(159,31,2)
(108,166,2)
(1,13,2)
(129,107,2)
(161,78,2)
(64,29,2)
(56,27,2)
(86,31,2)
(83,29,2)
(54,27,2)
(131,29,2)
(22,56,2)
(76,31,2)
(4,31,2)
(152,48,2)
(51,48,2)
(31,48,2)
(20,27,2)
(16,43,2)
(94,48,2)
(104,84,2)
(136,109,2)
(22,50,2)
(87,78,2)
(157,29,2)
(78,48,2)
(27,160,2)
(16,0,2)
(65,13,2)
(129,4,2)
(99,13,2)
(88,13,2)
(32,29,2)
(104,13,2)
(115,29,2)
(94,43,2)
(98,48,2)
(34,150,2)
(139,13,2)
(22,108,2)
(53,33,2)
(129,59,2)
(123,29,2)
(104,163,2)
(9,100,2)
(44,48,2)
(132,48,2)
(131,78,2)
(65,104,2)
(97,29,2)
(122,48,2)
(149,31,2)
(37,29,2)
(129,160,2)
(102,140,2)
(103,126,2)
(38,110,2)
(55,31,2)
(33,31,2)
(109,33,2)
(13,59,2)
(22,4,2)
(42,113,2)
(70,48,2)
(48,13,2)
(108,29,2)
(102,109,2)
(117,31,2)
(7,161,2)
(3,121,2)
(27,29,2)
(129,140,2)
(52,33,2)
(161,31,2)
(34,33,2)
(110,31,2)
(147,107,2)
(135,48,2)
(90,29,2)
(95,31,2)
(110,140,2)
(12,31,2)
(96,84,2)
(23,48,2)
(102,42,2)
(158,31,2)
(153,29,2)
(25,33,2)
(70,135,2)
(39,48,2)
(79,13,2)
(9,58,2)
(154,13,2)
(140,160,2)
(7,31,2)
(29,33,2)
(134,29,2)
(141,33,2)
(41,33,2)
(72,13,2)
(94,65,2)
(96,76,2)
(114,109,2)
-----------------------------------
(0,&objects)
(1,order)
(2,vma)
(3,list_add(&obj->st_link, &objects)
(4,err = i915_vma_pin(vma, 0, 0, addr | flags)
(5,flags)
(6,if (IS_ERR(obj)
(7,err = PTR_ERR(vma)
(8,order++)
(9,min(size, hole_end - addr)
(10,)
(11,hole_start)
(12,vma)
(13,addr < hole_end)
(14,0)
(15,size)
(16,close_object_list(&objects, vm)
(17,size)
(18,vma)
(19,flags)
(20,hole_end)
(21,)
(22,return err;)
(23,&obj->st_link)
(24,addr)
(25,__func__)
(26,if (!drm_mm_node_allocated(&vma->node)
(27,igt_timeout(end_time,\n\\n\\t\\t\\t\\t"%s timed out at ofset %llx [%llx - %llx]\\n",\n\\n\\t\\t\\t\\t__func__, addr, hole_start, hole_end)
(28,addr)
(29,!drm_mm_node_allocated(&vma->node)
(30,vma)
(31,IS_ERR(vma)
(32,hole_end)
(33,err)
(34,drm_mm_node_allocated(&vma->node)
(35,hole_end)
(36,err)
(37,hole_start)
(38,i915_vma_pin(vma, 0, 0, addr | flags)
(39,obj)
(40,__func__)
(41,node)
(42,flags = PIN_OFFSET_FIXED | PIN_USER)
(43,struct i915_address_space *vm)
(44,err)
(45,0)
(46,break;)
(47,PIN_OFFSET_FIXED)
(48,IS_ERR(obj)
(49,size)
(50,err = 0)
(51,obj)
(52,size)
(53,break;)
(54,EINTR)
(55,break;)
(56,err = -EINTR)
(57,if (err)
(58,size = BIT_ULL(order++)
(59,u64 hole_end)
(60,"%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\\n")
(61,hole_start)
(62,addr)
(63,order)
(64,addr)
(65,obj = fake_dma_object(i915, size)
(66,end_time)
(67,err)
(68,if (IS_ERR(vma)
(69,size)
(70,err = PTR_ERR(obj)
(71,for (addr = hole_start; addr < hole_end; )
(72,addr)
(73,)
(74,__func__)
(75,obj)
(76,vma->size)
(77,0)
(78,vma = i915_vma_instance(obj, vm, NULL)
(79,hole_end)
(80,BIT_ULL(order++)
(81,NULL)
(82,12)
(83,i915_vma_unpin(vma)
(84,size = min(size, hole_end - addr)
(85,LIST_HEAD(objects)
(86,size)
(87,i915_vma_misplaced(vma, 0, 0, addr | flags)
(88,size)
(89,size)
(90,err)
(91,)
(92,RET)
(93,cleanup_freed_objects(i915)
(94,i915_vma_instance(obj, vm, NULL)
(95,0)
(96,vma->size != size)
(97,vma)
(98,objects)
(99,obj)
(100,hole_end - addr)
(101,)
(102,addr | flags)
(103,err = i915_vma_unbind(vma)
(104,fake_dma_object(i915, size)
(105,vm)
(106,objects)
(107,addr += size)
(108,err = -EINVAL)
(109,!drm_mm_node_allocated(&vma->node)
(110,addr | flags)
(111,order = 12)
(112,"%s timed out at ofset %llx [%llx - %llx]\\n")
(113,PIN_OFFSET_FIXED | PIN_USER)
(114,0)
(115,addr)
(116,i915)
(117,err)
(118,vma->node)
(119,err)
(120,addr)
(121,&objects)
(122,vma)
(123,EINVAL)
(124,PIN_USER)
(125,vma)
(126,i915_vma_unbind(vma)
(127,break;)
(128,addr)
(129,pr_err("%s failed to pin object at %llx + %llx in hole [%llx - %llx], with err=%d\\n",\n\\n\\t\\t\\t       __func__, addr, size, hole_start, hole_end, err)
(130,objects)
(131,i915_vma_unpin(vma)
(132,obj->st_link)
(133,err)
(134,break;)
(135,PTR_ERR(obj)
(136,flags)
(137,i915)
(138,err)
(139,obj)
(140,addr = hole_start)
(141,err)
(142,order)
(143,obj)
(144,flags)
(145,-EINTR)
(146,"%s incorrect at %llx + %llx\\n")
(147,pr_err("%s incorrect at %llx + %llx\\n",\n\\n\\t\\t\\t       __func__, addr, size)
(148,)
(149,vma)
(150,&vma->node)
(151,addr)
(152,vma)
(153,vma)
(154,size)
(155,err)
(156,)
(157,size)
(158,GEM_BUG_ON(vma->size != size)
(159,vma)
(160,u64 hole_start)
(161,PTR_ERR(vma)
(162,if (igt_timeout(end_time,\n\\n\\t\\t\\t\\t"%s timed out at ofset %llx [%llx - %llx]\\n",\n\\n\\t\\t\\t\\t__func__, addr, hole_start, hole_end)
(163,struct drm_i915_private *i915)
(164,st_link)
(165,addr)
(166,-EINVAL)
(167,vm)
(168,unsigned long end_time)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^