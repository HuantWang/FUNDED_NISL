-----label-----
0
-----code-----
static void goodB2G()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    }
    while(1)
    {
        /* FIX: Deallocate memory */
        free(data);
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
70,71
70,72
72,73
72,74
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,58,59,60,64,67,68,69,71,76,78,79
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void goodB2G(){    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
static void
goodB2G()
goodB2G
{    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
while(1)    {        /* FIX: Deallocate memory */        free(data);        break;    }
1
{        /* FIX: Deallocate memory */        free(data);        break;    }
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(22,15,0)
(12,15,0)
(20,1,0)
(29,5,0)
(42,12,0)
(36,12,0)
(16,34,0)
(33,34,0)
(24,37,0)
(12,42,0)
(2,15,0)
(15,2,0)
(28,39,0)
(5,15,0)
(11,5,0)
(0,28,0)
(9,21,0)
(21,3,0)
(4,39,0)
(6,12,0)
(38,15,0)
(22,40,0)
(39,28,0)
(27,3,0)
(41,20,0)
(15,1,0)
(7,37,0)
(13,37,0)
(21,2,0)
(18,3,0)
(31,38,0)
(14,1,0)
(2,8,0)
(42,1,0)
(38,20,0)
(2,21,0)
(39,21,0)
(33,17,0)
(12,20,0)
(25,15,0)
(22,3,0)
(23,40,0)
(34,33,0)
(8,2,0)
(21,39,0)
(3,37,0)
(19,22,0)
(10,1,0)
(32,38,0)
(41,38,1)
(22,3,1)
(12,15,1)
(31,33,1)
(3,27,1)
(5,11,1)
(16,5,1)
(32,31,1)
(38,32,1)
(30,35,1)
(38,15,1)
(42,12,1)
(39,28,1)
(31,5,1)
(20,41,1)
(33,34,1)
(19,35,1)
(15,2,1)
(14,42,1)
(35,14,1)
(22,19,1)
(21,3,1)
(12,6,1)
(12,20,1)
(27,18,1)
(30,23,1)
(21,39,1)
(29,15,1)
(22,15,1)
(4,9,1)
(35,26,1)
(5,15,1)
(26,3,1)
(6,36,1)
(0,4,1)
(2,8,1)
(36,20,1)
(2,21,1)
(23,22,1)
(25,26,1)
(28,0,1)
(34,16,1)
(11,29,1)
(9,25,1)
(0,26,2)
(31,26,2)
(5,26,2)
(12,20,2)
(28,26,2)
(29,26,2)
(9,26,2)
(2,26,2)
(23,35,2)
(34,5,2)
(6,26,2)
(19,35,2)
(12,15,2)
(25,26,2)
(42,26,2)
(22,35,2)
(2,8,2)
(33,34,2)
(39,28,2)
(4,26,2)
(21,26,2)
(36,26,2)
(39,26,2)
(38,26,2)
(12,26,2)
(15,2,2)
(16,5,2)
(42,12,2)
(33,5,2)
(22,3,2)
(2,21,2)
(11,26,2)
(32,26,2)
(22,15,2)
(21,39,2)
(20,26,2)
(5,15,2)
(38,15,2)
(14,26,2)
(15,26,2)
(21,3,2)
(41,26,2)
-----------------------------------
(0,int)
(1,)
(2,(int *)
(3,data = NULL)
(4,100)
(5,data == NULL)
(6,0)
(7,while(1)
(8,int *)
(9,data)
(10,if (data == NULL)
(11,NULL)
(12,data[0])
(13,while(1)
(14,break;)
(15,data = (int *)
(16,1)
(17,)
(18,data)
(19,data)
(20,data[0] = 5)
(21,realloc(data, 100*sizeof(int)
(22,free(data)
(23,break;)
(24,data)
(25,data)
(26,1)
(27,NULL)
(28,sizeof(int)
(29,data)
(30,RET)
(31,data)
(32,0)
(33,exit(-1)
(34,-1)
(35,1)
(36,data)
(37,)
(38,data[0])
(39,100*sizeof(int)
(40,)
(41,5)
(42,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^