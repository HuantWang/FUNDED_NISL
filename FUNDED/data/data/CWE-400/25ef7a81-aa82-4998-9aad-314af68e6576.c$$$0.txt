-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,89,91
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(12,7,0)
(37,23,0)
(49,7,0)
(19,22,0)
(22,40,0)
(1,46,0)
(26,21,0)
(23,37,0)
(9,49,0)
(21,12,0)
(34,23,0)
(13,17,0)
(24,30,0)
(48,11,0)
(30,13,0)
(17,7,0)
(0,13,0)
(15,40,0)
(5,42,0)
(10,22,0)
(36,17,0)
(14,13,0)
(39,12,0)
(3,23,0)
(8,26,0)
(26,17,0)
(41,4,0)
(42,17,0)
(25,35,0)
(30,24,0)
(41,17,0)
(38,1,0)
(43,25,0)
(29,26,0)
(1,38,0)
(4,41,0)
(2,38,0)
(17,41,0)
(33,40,0)
(45,40,0)
(41,47,0)
(25,17,0)
(44,47,0)
(47,11,0)
(20,37,0)
(32,21,0)
(13,30,0)
(16,7,0)
(23,17,0)
(27,42,0)
(24,7,0)
(21,26,0)
(11,47,0)
(47,41,0)
(25,22,0)
(37,49,0)
(32,26,1)
(37,20,1)
(39,21,1)
(42,5,1)
(8,29,1)
(30,13,1)
(48,44,1)
(29,49,1)
(17,41,1)
(11,48,1)
(13,17,1)
(34,3,1)
(31,18,1)
(27,17,1)
(36,18,1)
(9,37,1)
(14,0,1)
(21,26,1)
(26,8,1)
(12,39,1)
(22,10,1)
(13,14,1)
(2,42,1)
(38,2,1)
(23,17,1)
(21,32,1)
(20,23,1)
(25,22,1)
(28,25,1)
(18,22,1)
(23,34,1)
(37,23,1)
(25,43,1)
(26,17,1)
(44,36,1)
(1,38,1)
(43,31,1)
(3,42,1)
(31,24,1)
(25,17,1)
(47,11,1)
(41,47,1)
(42,17,1)
(0,12,1)
(28,31,1)
(5,27,1)
(10,19,1)
(41,4,1)
(24,30,1)
(49,9,1)
(3,1,1)
(44,18,2)
(42,18,2)
(0,18,2)
(1,42,2)
(1,38,2)
(47,18,2)
(43,31,2)
(37,23,2)
(21,26,2)
(41,4,2)
(25,31,2)
(34,18,2)
(24,18,2)
(24,30,2)
(30,13,2)
(11,18,2)
(39,18,2)
(13,18,2)
(9,18,2)
(20,18,2)
(23,17,2)
(38,42,2)
(23,18,2)
(42,17,2)
(41,18,2)
(25,22,2)
(30,18,2)
(17,18,2)
(49,18,2)
(41,47,2)
(3,18,2)
(8,18,2)
(25,17,2)
(14,18,2)
(13,17,2)
(26,17,2)
(26,18,2)
(27,18,2)
(21,18,2)
(2,42,2)
(37,18,2)
(29,18,2)
(48,18,2)
(17,41,2)
(12,18,2)
(47,11,2)
(36,18,2)
(5,18,2)
(32,18,2)
-----------------------------------
(0,data)
(1,exit(-1)
(2,1)
(3,data)
(4,twoIntsStruct *)
(5,NULL)
(6, sizeof(twoIntsStruct)
(7,)
(8,0)
(9,0)
(10,NULL)
(11,sizeof(twoIntsStruct)
(12,data[0].intTwo = 0)
(13,data[0])
(14,0)
(15,if(STATIC_CONST_TRUE)
(16,if (data == NULL)
(17,data = (twoIntsStruct *)
(18,STATIC_CONST_TRUE)
(19,data)
(20,intOne)
(21,data[0].intTwo)
(22,data = NULL)
(23,data[0])
(24,printStructLine(&data[0])
(25,free(data)
(26,data[0])
(27,data)
(28,RET)
(29,data)
(30,&data[0])
(31,STATIC_CONST_TRUE)
(32,intTwo)
(33,data)
(34,0)
(35,)
(36,data)
(37,data[0].intOne)
(38,-1)
(39,0)
(40,)
(41,(twoIntsStruct *)
(42,data == NULL)
(43,data)
(44,100)
(45,if(STATIC_CONST_TRUE)
(46,)
(47,calloc(100, sizeof(twoIntsStruct)
(48,twoIntsStruct)
(49,data[0].intOne = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^