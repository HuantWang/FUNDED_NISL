-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,71,75,76,78
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(29,2,0)
(0,35,0)
(18,5,0)
(4,33,0)
(13,10,0)
(34,31,0)
(16,0,0)
(0,15,0)
(39,2,0)
(23,22,0)
(24,39,0)
(15,18,0)
(28,39,0)
(35,29,0)
(30,0,0)
(12,10,0)
(37,17,0)
(38,17,0)
(9,7,0)
(25,35,0)
(20,41,0)
(36,14,0)
(11,13,0)
(35,5,0)
(29,32,0)
(10,5,0)
(40,33,0)
(2,29,0)
(26,31,0)
(13,7,0)
(21,14,0)
(15,0,0)
(1,4,0)
(2,39,0)
(31,4,0)
(7,35,0)
(22,41,0)
(32,29,0)
(6,22,0)
(33,5,0)
(18,15,0)
(27,24,0)
(3,7,0)
(29,35,0)
(39,24,0)
(4,31,0)
(7,13,0)
(31,35,0)
(42,41,0)
(19,41,0)
(0,35,1)
(14,36,1)
(27,28,1)
(25,17,1)
(26,34,1)
(37,38,1)
(15,0,1)
(31,35,1)
(2,39,1)
(4,31,1)
(22,23,1)
(23,6,1)
(30,10,1)
(34,35,1)
(36,21,1)
(7,35,1)
(28,25,1)
(21,17,1)
(10,12,1)
(29,32,1)
(40,4,1)
(31,26,1)
(24,27,1)
(7,3,1)
(13,11,1)
(35,29,1)
(4,1,1)
(3,9,1)
(39,24,1)
(8,14,1)
(0,16,1)
(17,37,1)
(38,22,1)
(11,7,1)
(13,7,1)
(12,13,1)
(29,2,1)
(1,31,1)
(21,18,1)
(9,33,1)
(16,30,1)
(33,40,1)
(18,15,1)
(31,17,2)
(9,17,2)
(30,17,2)
(18,17,2)
(18,15,2)
(15,17,2)
(11,17,2)
(2,17,2)
(39,17,2)
(4,17,2)
(29,2,2)
(26,17,2)
(33,17,2)
(39,24,2)
(13,7,2)
(24,17,2)
(2,39,2)
(10,17,2)
(0,17,2)
(40,17,2)
(4,31,2)
(25,17,2)
(35,17,2)
(16,17,2)
(31,35,2)
(28,17,2)
(1,17,2)
(0,35,2)
(13,17,2)
(15,0,2)
(7,17,2)
(34,17,2)
(7,35,2)
(3,17,2)
(12,17,2)
(29,17,2)
(29,32,2)
(27,17,2)
(35,29,2)
-----------------------------------
(0,data[0])
(1,intOne)
(2,ALLOCA(100*sizeof(twoIntsStruct)
(3,0)
(4,data[0].intOne)
(5,)
(6,data)
(7,data[0])
(8,RET)
(9,data)
(10,data[0].intTwo = 0)
(11,intTwo)
(12,0)
(13,data[0].intTwo)
(14,staticFive==5)
(15,&data[0])
(16,0)
(17,staticFive==5)
(18,printStructLine(&data[0])
(19,data)
(20,if(staticFive==5)
(21,staticFive)
(22,data = NULL)
(23,NULL)
(24,sizeof(twoIntsStruct)
(25,data)
(26,0)
(27,twoIntsStruct)
(28,100)
(29,(twoIntsStruct *)
(30,data)
(31,data[0])
(32,twoIntsStruct *)
(33,data[0].intOne = 0)
(34,data)
(35,data = (twoIntsStruct *)
(36,5)
(37,5)
(38,staticFive)
(39,100*sizeof(twoIntsStruct)
(40,0)
(41,)
(42,if(staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^