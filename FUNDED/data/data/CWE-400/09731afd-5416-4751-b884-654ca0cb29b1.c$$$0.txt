-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(globalFive==5)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
39,40
40,41
40,42
40,43
40,44
40,45
40,46
40,47
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
56,57
57,58
59,60
60,61
60,62
62,63
62,64
62,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
71,74
72,73
74,75
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
85,86
85,87
86,87
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
95,96
95,97
96,97
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
108,109
109,110
109,111
110,111
110,112
111,112
111,113
112,113
114,115
116,117
116,118
116,119
116,120
116,121
117,118
119,120
121,122
122,123
122,124
125,126
125,127
126,127
128,129
130,131
132,133
133,134
134,135
134,136
135,136
138,139
138,140
139,140
141,142
142,143
143,144
143,145
144,145
146,147
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,32,33,37,38,44,46,48,52,54,55,58,61,63,64,66,70,73,75,76,80,82,87,88,93,94,97,101,102,104,107,113,115,118,120,123,124,127,129,131,136,137,140,145,147
-----computeFrom-----
12,13
12,14
18,19
18,20
30,31
30,32
35,36
35,37
68,69
68,70
78,79
78,80
91,92
91,93
95,96
95,97
110,111
110,112
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(globalFive==5)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(70,3,0)
(78,13,0)
(69,65,0)
(2,34,0)
(35,31,0)
(43,34,0)
(29,62,0)
(26,48,0)
(1,30,0)
(30,38,0)
(27,69,0)
(74,38,0)
(24,56,0)
(6,48,0)
(27,33,0)
(3,34,0)
(4,42,0)
(49,77,0)
(0,2,0)
(34,2,0)
(38,67,0)
(39,2,0)
(21,31,0)
(65,69,0)
(7,17,0)
(59,46,0)
(11,78,0)
(17,38,0)
(20,34,0)
(78,42,0)
(78,19,0)
(69,34,0)
(66,38,0)
(60,31,0)
(28,69,0)
(72,58,0)
(75,69,0)
(61,17,0)
(33,27,0)
(19,58,0)
(69,57,0)
(36,19,0)
(42,44,0)
(64,43,0)
(5,38,0)
(23,13,0)
(63,3,0)
(51,42,0)
(73,30,0)
(15,58,0)
(56,19,0)
(22,38,0)
(77,16,0)
(50,33,0)
(78,37,0)
(10,40,0)
(47,65,0)
(13,78,0)
(13,31,0)
(55,38,0)
(12,38,0)
(43,53,0)
(9,32,0)
(52,12,0)
(76,40,0)
(68,57,0)
(69,27,0)
(19,56,0)
(45,38,0)
(34,38,0)
(2,30,0)
(8,29,0)
(46,25,0)
(14,58,0)
(54,35,0)
(37,78,0)
(41,12,0)
(57,69,0)
(69,34,1)
(51,40,1)
(1,12,1)
(18,71,1)
(27,69,1)
(13,31,1)
(33,50,1)
(29,8,1)
(23,35,1)
(61,7,1)
(24,36,1)
(19,56,1)
(39,20,1)
(6,42,1)
(2,0,1)
(49,3,1)
(73,1,1)
(35,31,1)
(43,34,1)
(71,13,1)
(11,23,1)
(56,24,1)
(2,30,1)
(52,41,1)
(34,2,1)
(21,60,1)
(18,43,1)
(43,64,1)
(48,26,1)
(68,28,1)
(75,65,1)
(60,77,1)
(78,37,1)
(3,70,1)
(3,34,1)
(78,42,1)
(78,19,1)
(46,59,1)
(59,27,1)
(60,3,1)
(69,57,1)
(6,29,1)
(40,76,1)
(30,73,1)
(20,30,1)
(35,54,1)
(8,40,1)
(23,31,1)
(63,34,1)
(64,71,1)
(65,47,1)
(54,46,1)
(77,49,1)
(41,17,1)
(0,39,1)
(27,33,1)
(28,33,1)
(12,52,1)
(10,19,1)
(31,21,1)
(76,10,1)
(26,6,1)
(54,27,1)
(18,48,1)
(42,4,1)
(47,57,1)
(70,63,1)
(7,48,1)
(69,75,1)
(78,11,1)
(57,68,1)
(17,61,1)
(50,13,1)
(13,78,1)
(69,65,1)
(4,51,1)
(50,13,2)
(39,48,2)
(34,2,2)
(2,48,2)
(13,48,2)
(69,13,2)
(21,48,2)
(54,13,2)
(78,19,2)
(12,48,2)
(43,71,2)
(47,13,2)
(71,48,2)
(65,13,2)
(30,48,2)
(23,48,2)
(64,71,2)
(78,48,2)
(60,48,2)
(77,3,2)
(23,13,2)
(20,48,2)
(41,48,2)
(35,31,2)
(27,69,2)
(17,48,2)
(43,34,2)
(11,13,2)
(27,33,2)
(35,13,2)
(68,13,2)
(78,42,2)
(8,40,2)
(61,48,2)
(28,13,2)
(13,31,2)
(3,34,2)
(27,13,2)
(63,48,2)
(69,65,2)
(59,27,2)
(31,48,2)
(4,40,2)
(0,48,2)
(78,13,2)
(7,48,2)
(69,34,2)
(49,3,2)
(11,48,2)
(3,48,2)
(13,13,2)
(13,78,2)
(34,48,2)
(2,30,2)
(51,40,2)
(57,13,2)
(46,27,2)
(69,57,2)
(33,13,2)
(19,56,2)
(52,48,2)
(75,13,2)
(1,48,2)
(78,37,2)
(70,48,2)
(29,40,2)
(73,48,2)
(42,40,2)
-----------------------------------
(0,"w+")
(1,filename)
(2,fopen(filename, "w+")
(3,pFile == NULL)
(4,20)
(5,if (pFile == NULL)
(6,globalFive)
(7,i)
(8,"Benign, fixed string")
(9,if (strlen(SENTENCE)
(10,globalFive)
(11,count)
(12,*pFile = NULL)
(13,i < (size_t)
(14,count)
(15,if(globalFive==5)
(16,)
(17,i = 0)
(18,RET)
(19,count = -1)
(20,pFile)
(21,0)
(22,pFile)
(23,i)
(24,1)
(25,)
(26,5)
(27,strlen(SENTENCE)
(28,SENTENCE)
(29,printLine("Benign, fixed string")
(30,*filename = "output_bad.txt")
(31,i = 0)
(32,)
(33,strlen(SENTENCE)
(34,pFile = fopen(filename, "w+")
(35,i++)
(36,count)
(37,size_t)
(38,)
(39,filename)
(40,globalFive!=5)
(41,pFile)
(42,count = 20)
(43,fclose(pFile)
(44,)
(45,i)
(46,exit(1)
(47,SENTENCE)
(48,globalFive==5)
(49,1)
(50,SENTENCE)
(51,count)
(52,NULL)
(53,)
(54,i)
(55,for (i = 0; i < (size_t)
(56,-1)
(57,sizeof(char)
(58,)
(59,1)
(60,i)
(61,0)
(62,)
(63,pFile)
(64,pFile)
(65,strlen(SENTENCE)
(66,filename)
(67,)
(68,char)
(69,fwrite(SENTENCE, sizeof(char)
(70,NULL)
(71,pFile)
(72,if(globalFive!=5)
(73,"output_bad.txt")
(74,if (pFile)
(75,pFile)
(76,5)
(77,exit(1)
(78,(size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^