-----label-----
0
-----code-----
static int tcp_event_accept(tcp_context_t *tcp, unsigned i)
{
	/* Accept client. */
	int fd = tcp->set.pfd[i].fd;
	int client = tcp_accept(fd);
	if (client >= 0) {
		/* Assign to fdset. */
		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);
		if (next_id < 0) {
			close(client);
			return next_id; /* Contains errno. */
		}

		/* Update watchdog timer. */
		rcu_read_lock();
		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);
		rcu_read_unlock();
	}

	return KNOT_EOK;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
16,17
17,18
17,19
19,20
19,21
21,22
22,23
22,24
23,24
23,25
24,25
24,26
25,26
25,27
26,27
30,31
33,34
34,35
34,36
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
44,46
45,46
45,47
46,47
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
53,54
53,55
55,56
56,57
56,58
56,59
56,60
56,61
57,58
59,60
60,61
60,62
61,62
64,65
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
75,77
76,77
77,78
77,79
78,79
80,81
82,83
83,84
85,86
86,87
87,88
89,90
90,91
90,92
90,93
90,94
91,92
93,94
94,95
94,96
95,96
98,99
100,101
100,102
101,102
102,103
105,106
106,107
107,108
109,110
110,111
-----nextToken-----
2,4,7,9,10,12,14,18,20,27,28,29,31,32,35,37,41,43,47,48,52,54,58,62,63,65,67,69,73,74,79,81,84,88,92,96,97,99,103,104,108,111
-----computeFrom-----
45,46
45,47
71,72
71,73
-----guardedBy-----
47,81
73,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tcp_event_accept(tcp_context_t *tcp, unsigned i){	/* Accept client. */	int fd = tcp->set.pfd[i].fd;	int client = tcp_accept(fd);	if (client >= 0) {		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();	}	return KNOT_EOK;}
static int
tcp_event_accept(tcp_context_t *tcp, unsigned i)
tcp_event_accept
tcp_context_t *tcp
tcp_context_t
tcp_context_t
*tcp
*
tcp
unsigned i
unsigned
i
i
{	/* Accept client. */	int fd = tcp->set.pfd[i].fd;	int client = tcp_accept(fd);	if (client >= 0) {		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();	}	return KNOT_EOK;}
int fd = tcp->set.pfd[i].fd;
int fd = tcp->set.pfd[i].fd;
int
fd = tcp->set.pfd[i].fd
fd
= tcp->set.pfd[i].fd
tcp->set.pfd[i].fd
tcp->set.pfd[i]
tcp->set.pfd
tcp->set
tcp
tcp
set
pfd
i
i
fd
int client = tcp_accept(fd);
int client = tcp_accept(fd);
int
client = tcp_accept(fd)
client
= tcp_accept(fd)
tcp_accept(fd)
tcp_accept
tcp_accept
fd
fd
if (client >= 0) {		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();	}
client >= 0
client
client
0
{		/* Assign to fdset. */		int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);		if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}		/* Update watchdog timer. */		rcu_read_lock();		fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);		rcu_read_unlock();	}
int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);
int next_id = fdset_add(&tcp->set, client, POLLIN, NULL);
int
next_id = fdset_add(&tcp->set, client, POLLIN, NULL)
next_id
= fdset_add(&tcp->set, client, POLLIN, NULL)
fdset_add(&tcp->set, client, POLLIN, NULL)
fdset_add
fdset_add
&tcp->set
tcp->set
tcp
tcp
set
client
client
POLLIN
POLLIN
NULL
NULL
if (next_id < 0) {			close(client);			return next_id; /* Contains errno. */		}
next_id < 0
next_id
next_id
0
{			close(client);			return next_id; /* Contains errno. */		}
close(client);
close(client)
close
close
client
client
return next_id;
next_id
next_id
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs);
fdset_set_watchdog(&tcp->set, next_id, conf()->max_conn_hs)
fdset_set_watchdog
fdset_set_watchdog
&tcp->set
tcp->set
tcp
tcp
set
next_id
next_id
conf()->max_conn_hs
conf()
conf
conf
max_conn_hs
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
return KNOT_EOK;
KNOT_EOK
KNOT_EOK
-----joern-----
(39,3,0)
(57,8,0)
(49,18,0)
(39,28,0)
(10,45,0)
(53,3,0)
(14,47,0)
(40,58,0)
(5,58,0)
(13,58,0)
(38,55,0)
(32,45,0)
(27,25,0)
(19,27,0)
(58,3,0)
(29,15,0)
(16,15,0)
(47,14,0)
(31,35,0)
(42,49,0)
(21,28,0)
(58,49,0)
(23,54,0)
(6,47,0)
(49,45,0)
(17,18,0)
(39,12,0)
(28,21,0)
(18,35,0)
(55,25,0)
(41,47,0)
(7,6,0)
(9,28,0)
(35,45,0)
(12,54,0)
(5,55,0)
(33,55,0)
(1,24,0)
(34,15,0)
(51,15,0)
(6,35,0)
(46,53,0)
(27,14,0)
(55,5,0)
(43,45,0)
(58,5,0)
(47,6,0)
(1,49,0)
(14,27,0)
(20,39,0)
(36,4,0)
(2,8,0)
(54,12,0)
(26,49,0)
(11,14,0)
(18,49,0)
(56,58,0)
(47,37,0)
(8,24,0)
(22,42,0)
(35,6,0)
(2,4,0)
(50,27,0)
(28,39,0)
(0,42,0)
(3,15,0)
(39,15,0)
(54,25,0)
(52,54,0)
(4,45,0)
(3,58,0)
(12,39,0)
(30,53,0)
(8,3,0)
(44,3,0)
(48,1,0)
(38,33,1)
(14,27,1)
(44,42,1)
(23,51,1)
(36,42,1)
(2,8,1)
(17,26,1)
(57,1,1)
(35,6,1)
(1,48,1)
(55,38,1)
(58,5,1)
(48,53,1)
(18,17,1)
(8,3,1)
(36,29,1)
(49,18,1)
(39,12,1)
(50,31,1)
(41,14,1)
(58,40,1)
(4,36,1)
(53,46,1)
(20,12,1)
(28,21,1)
(47,37,1)
(5,55,1)
(54,52,1)
(30,3,1)
(53,3,1)
(51,53,1)
(14,11,1)
(56,13,1)
(22,49,1)
(6,47,1)
(52,23,1)
(13,5,1)
(58,49,1)
(8,57,1)
(1,49,1)
(11,27,1)
(42,0,1)
(3,58,1)
(54,25,1)
(12,54,1)
(27,19,1)
(40,56,1)
(46,30,1)
(29,39,1)
(47,14,1)
(47,41,1)
(9,21,1)
(0,22,1)
(7,47,1)
(28,9,1)
(19,50,1)
(6,7,1)
(2,4,1)
(55,25,1)
(33,44,1)
(21,20,1)
(39,28,1)
(42,49,1)
(18,35,1)
(26,35,1)
(39,3,1)
(27,25,1)
(5,55,2)
(21,53,2)
(33,42,2)
(12,54,2)
(2,8,2)
(13,42,2)
(55,25,2)
(3,42,2)
(40,42,2)
(54,25,2)
(12,53,2)
(44,42,2)
(58,49,2)
(58,42,2)
(28,21,2)
(36,42,2)
(9,53,2)
(14,27,2)
(49,18,2)
(8,3,2)
(8,53,2)
(57,53,2)
(48,53,2)
(47,37,2)
(27,25,2)
(38,42,2)
(1,53,2)
(54,53,2)
(20,53,2)
(2,4,2)
(53,42,2)
(47,14,2)
(52,53,2)
(4,42,2)
(5,42,2)
(4,53,2)
(35,6,2)
(6,47,2)
(42,49,2)
(39,12,2)
(46,42,2)
(56,42,2)
(39,28,2)
(55,42,2)
(30,42,2)
(36,53,2)
(39,53,2)
(28,53,2)
(1,49,2)
(18,35,2)
(39,3,2)
(51,53,2)
(23,53,2)
(58,5,2)
(53,3,2)
(3,58,2)
(29,53,2)
-----------------------------------
(0,0)
(1,close(client)
(2,RET)
(3,next_id = fdset_add(&tcp->set, client, POLLIN, NULL)
(4,return KNOT_EOK;)
(5,&tcp->set)
(6,tcp->set.pfd[i].fd)
(7,fd)
(8,return next_id;)
(9,max_conn_hs)
(10,client)
(11,pfd)
(12,&tcp->set)
(13,client)
(14,tcp->set.pfd)
(15,)
(16,next_id)
(17,fd)
(18,tcp_accept(fd)
(19,set)
(20,next_id)
(21,conf()
(22,client)
(23,tcp)
(24,)
(25,tcp_context_t *tcp)
(26,client)
(27,tcp->set)
(28,conf()
(29,rcu_read_unlock()
(30,next_id)
(31,fd)
(32,if (client >= 0)
(33,tcp)
(34,if (next_id < 0)
(35,fd = tcp->set.pfd[i].fd)
(36,KNOT_EOK)
(37,unsigned i)
(38,set)
(39,fdset_set_watchdog(&tcp->set, next_id, conf()
(40,NULL)
(41,i)
(42,client >= 0)
(43,fd)
(44,next_id)
(45,)
(46,0)
(47,tcp->set.pfd[i])
(48,client)
(49,client = tcp_accept(fd)
(50,tcp)
(51,rcu_read_lock()
(52,set)
(53,next_id < 0)
(54,tcp->set)
(55,tcp->set)
(56,POLLIN)
(57,next_id)
(58,fdset_add(&tcp->set, client, POLLIN, NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^