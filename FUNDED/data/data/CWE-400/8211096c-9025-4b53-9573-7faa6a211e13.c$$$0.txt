-----label-----
0
-----code-----
static int driver_method_update_activation_environment(Peer *peer, CDVar *in_v, uint32_t serial, CDVar *out_v) {
        static const CDVarType type[] = {
                C_DVAR_T_INIT(
                        DRIVER_T_MESSAGE(
                                C_DVAR_T_TUPLE1(
                                        C_DVAR_T_ARRAY(
                                                C_DVAR_T_PAIR(
                                                        C_DVAR_T_s,
                                                        C_DVAR_T_s
                                                )
                                        )
                                )
                        )
                )
        };
        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;
        _c_cleanup_(message_unrefp) Message *message = NULL;
        const char *key, *value;
        void *data;
        size_t n_data;
        int r;

        c_dvar_begin_write(&var, type, 1);
        c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)(y<g>)])([",
                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,
                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, "/org/bus1/DBus/Broker",
                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Broker",
                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "SetActivationEnvironment",
                     DBUS_MESSAGE_FIELD_SIGNATURE, c_dvar_type_g, "a{ss}");

        c_dvar_read(in_v, "([");
        while (c_dvar_more(in_v)) {
                c_dvar_read(in_v, "{ss}", &key, &value);
                c_dvar_write(&var, "{ss}", key, value);
        }
        c_dvar_read(in_v, "])");
        c_dvar_write(&var, "]))");

        r = driver_end_read(in_v);
        if (r)
                return error_trace(r);

        r = c_dvar_end_write(&var, &data, &n_data);
        if (r)
                return error_origin(r);

        /* XXX: perform access checks */

        r = message_new_outgoing(&message, data, n_data);
        if (r)
                return error_fold(r);

        /* XXX: accounting */
        /* this is excluded from monitoring as it is on our private connection */
        r = connection_queue(peer->bus->controller, NULL, 0, message);
        if (r)
                return error_fold(r);

        c_dvar_write(out_v, "()");

        r = driver_send_reply(peer, out_v, NULL);
        if (r)
                return error_trace(r);

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
28,36
28,37
28,38
28,39
28,40
28,41
28,42
28,43
28,44
28,45
28,46
28,47
28,48
28,49
28,50
28,51
28,52
28,53
28,54
28,55
28,56
28,57
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
47,49
48,49
50,51
50,52
50,53
51,52
53,54
55,56
57,58
58,59
58,60
59,60
61,62
62,63
64,65
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
79,80
81,82
82,83
83,84
83,85
84,85
86,87
86,88
86,89
89,90
90,91
92,93
93,94
93,95
93,96
95,96
95,97
98,99
98,100
101,102
102,103
102,104
104,105
104,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
116,117
118,119
119,120
119,121
119,122
119,123
120,121
122,123
123,124
125,126
128,129
129,130
129,131
129,132
129,133
129,134
129,135
129,136
129,137
129,138
129,139
129,140
129,141
129,142
129,143
129,144
129,145
129,146
129,147
129,148
129,149
129,150
130,131
132,133
133,134
136,137
136,138
136,139
137,138
137,139
138,139
140,141
141,142
145,146
147,148
151,152
151,153
152,153
153,154
156,157
158,159
161,162
163,164
166,167
168,169
171,172
173,174
176,177
177,178
177,179
177,180
178,179
180,181
183,184
183,185
184,185
184,186
185,186
187,188
189,190
189,191
190,191
191,192
191,193
191,194
191,195
191,196
192,193
194,195
197,198
198,199
200,201
201,202
203,204
204,205
204,206
204,207
204,208
204,209
205,206
207,208
208,209
211,212
213,214
215,216
216,217
216,218
216,219
217,218
219,220
222,223
223,224
223,225
223,226
224,225
226,227
227,228
230,231
231,232
231,233
232,233
234,235
234,236
235,236
237,238
239,240
239,241
240,241
242,243
243,244
243,245
244,245
246,247
248,249
249,250
249,251
250,251
252,253
252,254
252,255
252,256
253,254
255,256
256,257
258,259
259,260
261,262
262,263
264,265
264,266
265,266
267,268
268,269
268,270
269,270
271,272
273,274
274,275
274,276
275,276
277,278
277,279
277,280
277,281
278,279
280,281
281,282
283,284
285,286
287,288
287,289
288,289
290,291
291,292
291,293
292,293
294,295
296,297
297,298
297,299
298,299
300,301
300,302
300,303
300,304
300,305
301,302
303,304
303,305
304,305
304,306
305,306
309,310
312,313
314,315
314,316
315,316
317,318
318,319
318,320
319,320
321,322
323,324
324,325
324,326
324,327
325,326
327,328
330,331
331,332
331,333
332,333
334,335
334,336
334,337
334,338
335,336
337,338
339,340
341,342
343,344
343,345
344,345
346,347
347,348
347,349
348,349
350,351
352,353
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,27,32,34,35,40,43,46,49,52,54,56,60,63,68,70,73,77,80,85,87,88,91,94,96,97,99,100,103,105,106,110,112,115,117,121,124,126,127,131,134,135,139,142,143,144,146,148,149,150,154,155,157,159,160,162,164,165,167,169,170,172,174,175,179,181,182,186,188,193,195,196,199,202,206,209,210,212,214,218,220,221,225,228,229,233,236,238,241,245,247,251,254,257,260,263,266,270,272,276,279,282,284,286,289,293,295,299,302,306,307,308,310,311,313,316,320,322,326,328,329,333,336,338,340,342,345,349,351,353
-----computeFrom-----
151,152
151,153
231,232
231,233
249,250
249,251
274,275
274,276
297,298
297,299
331,332
331,333
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;InitializerList;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_method_update_activation_environment(Peer *peer, CDVar *in_v, uint32_t serial, CDVar *out_v) {        static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        };        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        const char *key, *value;        void *data;        size_t n_data;        int r;        c_dvar_begin_write(&var, type, 1);        c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)(y<g>)])([",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, "/org/bus1/DBus/Broker",                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Broker",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "SetActivationEnvironment",                     DBUS_MESSAGE_FIELD_SIGNATURE, c_dvar_type_g, "a{ss}");        c_dvar_read(in_v, "([");        while (c_dvar_more(in_v)) {                c_dvar_read(in_v, "{ss}", &key, &value);                c_dvar_write(&var, "{ss}", key, value);        }        c_dvar_read(in_v, "])");        c_dvar_write(&var, "]))");        r = driver_end_read(in_v);        if (r)                return error_trace(r);        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        /* XXX: perform access checks */        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        /* XXX: accounting */        /* this is excluded from monitoring as it is on our private connection */        r = connection_queue(peer->bus->controller, NULL, 0, message);        if (r)                return error_fold(r);        c_dvar_write(out_v, "()");        r = driver_send_reply(peer, out_v, NULL);        if (r)                return error_trace(r);        return 0;}
static int
driver_method_update_activation_environment(Peer *peer, CDVar *in_v, uint32_t serial, CDVar *out_v)
driver_method_update_activation_environment
Peer *peer
Peer
Peer
*peer
*
peer
CDVar *in_v
CDVar
CDVar
*in_v
*
in_v
uint32_t serial
uint32_t
uint32_t
serial
serial
CDVar *out_v
CDVar
CDVar
*out_v
*
out_v
{        static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        };        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        const char *key, *value;        void *data;        size_t n_data;        int r;        c_dvar_begin_write(&var, type, 1);        c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)(y<g>)])([",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, "/org/bus1/DBus/Broker",                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Broker",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "SetActivationEnvironment",                     DBUS_MESSAGE_FIELD_SIGNATURE, c_dvar_type_g, "a{ss}");        c_dvar_read(in_v, "([");        while (c_dvar_more(in_v)) {                c_dvar_read(in_v, "{ss}", &key, &value);                c_dvar_write(&var, "{ss}", key, value);        }        c_dvar_read(in_v, "])");        c_dvar_write(&var, "]))");        r = driver_end_read(in_v);        if (r)                return error_trace(r);        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        /* XXX: perform access checks */        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        /* XXX: accounting */        /* this is excluded from monitoring as it is on our private connection */        r = connection_queue(peer->bus->controller, NULL, 0, message);        if (r)                return error_fold(r);        c_dvar_write(out_v, "()");        r = driver_send_reply(peer, out_v, NULL);        if (r)                return error_trace(r);        return 0;}
static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        };
static const CDVarType type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        };
static const CDVarType
CDVarType
type[] = {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        }
type
[]
= {                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        }
{                C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )        }
C_DVAR_T_INIT(                        DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )                )
C_DVAR_T_INIT
C_DVAR_T_INIT
DRIVER_T_MESSAGE(                                C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )                        )
DRIVER_T_MESSAGE
DRIVER_T_MESSAGE
C_DVAR_T_TUPLE1(                                        C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )                                )
C_DVAR_T_TUPLE1
C_DVAR_T_TUPLE1
C_DVAR_T_ARRAY(                                                C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )                                        )
C_DVAR_T_ARRAY
C_DVAR_T_ARRAY
C_DVAR_T_PAIR(                                                        C_DVAR_T_s,                                                        C_DVAR_T_s                                                )
C_DVAR_T_PAIR
C_DVAR_T_PAIR
C_DVAR_T_s
C_DVAR_T_s
C_DVAR_T_s
C_DVAR_T_s
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_
_c_cleanup_
(c_dvar_deinitp)
c_dvar_deinitp
c_dvar_deinitp
)
CDVar var = C_DVAR_INIT;
CDVar var = C_DVAR_INIT;
CDVar
CDVar
var = C_DVAR_INIT
var
= C_DVAR_INIT
C_DVAR_INIT
C_DVAR_INIT
_c_cleanup_(message_unrefp)
_c_cleanup_(message_unrefp)
_c_cleanup_
_c_cleanup_
(message_unrefp)
message_unrefp
message_unrefp
)
Message *message = NULL;
Message *message = NULL;
Message
Message
*message = NULL
*
message
= NULL
NULL
NULL
const char *key, *value;
const char *key, *value;
const char
*key
*
key
*value
*
value
void *data;
void *data;
void
*data
*
data
size_t n_data;
size_t n_data;
size_t
size_t
n_data
n_data
int r;
int r;
int
r
r
c_dvar_begin_write(&var, type, 1);
c_dvar_begin_write(&var, type, 1)
c_dvar_begin_write
c_dvar_begin_write
&var
var
var
type
type
1
c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)(y<g>)])([",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, "/org/bus1/DBus/Broker",                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Broker",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "SetActivationEnvironment",                     DBUS_MESSAGE_FIELD_SIGNATURE, c_dvar_type_g, "a{ss}");
c_dvar_write(&var, "((yyyyuu[(y<o>)(y<s>)(y<s>)(y<g>)])([",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_SIGNAL, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_PATH, c_dvar_type_o, "/org/bus1/DBus/Broker",                     DBUS_MESSAGE_FIELD_INTERFACE, c_dvar_type_s, "org.bus1.DBus.Broker",                     DBUS_MESSAGE_FIELD_MEMBER, c_dvar_type_s, "SetActivationEnvironment",                     DBUS_MESSAGE_FIELD_SIGNATURE, c_dvar_type_g, "a{ss}")
c_dvar_write
c_dvar_write
&var
var
var
"((yyyyuu[(y<o>)(y<s>)(y<s>)(y<g>)])(["
c_dvar_is_big_endian(&var) ? 'B' : 'l'
c_dvar_is_big_endian(&var)
c_dvar_is_big_endian
c_dvar_is_big_endian
&var
var
var
'B'
'l'
DBUS_MESSAGE_TYPE_SIGNAL
DBUS_MESSAGE_TYPE_SIGNAL
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
1
0
(uint32_t)-1
(uint32_t)
uint32_t
uint32_t
1
DBUS_MESSAGE_FIELD_PATH
DBUS_MESSAGE_FIELD_PATH
c_dvar_type_o
c_dvar_type_o
"/org/bus1/DBus/Broker"
DBUS_MESSAGE_FIELD_INTERFACE
DBUS_MESSAGE_FIELD_INTERFACE
c_dvar_type_s
c_dvar_type_s
"org.bus1.DBus.Broker"
DBUS_MESSAGE_FIELD_MEMBER
DBUS_MESSAGE_FIELD_MEMBER
c_dvar_type_s
c_dvar_type_s
"SetActivationEnvironment"
DBUS_MESSAGE_FIELD_SIGNATURE
DBUS_MESSAGE_FIELD_SIGNATURE
c_dvar_type_g
c_dvar_type_g
"a{ss}"
c_dvar_read(in_v, "([");
c_dvar_read(in_v, "([")
c_dvar_read
c_dvar_read
in_v
in_v
"(["
while (c_dvar_more(in_v)) {                c_dvar_read(in_v, "{ss}", &key, &value);                c_dvar_write(&var, "{ss}", key, value);        }
c_dvar_more(in_v)
c_dvar_more
c_dvar_more
in_v
in_v
{                c_dvar_read(in_v, "{ss}", &key, &value);                c_dvar_write(&var, "{ss}", key, value);        }
c_dvar_read(in_v, "{ss}", &key, &value);
c_dvar_read(in_v, "{ss}", &key, &value)
c_dvar_read
c_dvar_read
in_v
in_v
"{ss}"
&key
key
key
&value
value
value
c_dvar_write(&var, "{ss}", key, value);
c_dvar_write(&var, "{ss}", key, value)
c_dvar_write
c_dvar_write
&var
var
var
"{ss}"
key
key
value
value
c_dvar_read(in_v, "])");
c_dvar_read(in_v, "])")
c_dvar_read
c_dvar_read
in_v
in_v
"])"
c_dvar_write(&var, "]))");
c_dvar_write(&var, "]))")
c_dvar_write
c_dvar_write
&var
var
var
"]))"
r = driver_end_read(in_v);
r = driver_end_read(in_v)
r
r
driver_end_read(in_v)
driver_end_read
driver_end_read
in_v
in_v
if (r)                return error_trace(r);
r
r
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
r = c_dvar_end_write(&var, &data, &n_data);
r = c_dvar_end_write(&var, &data, &n_data)
r
r
c_dvar_end_write(&var, &data, &n_data)
c_dvar_end_write
c_dvar_end_write
&var
var
var
&data
data
data
&n_data
n_data
n_data
if (r)                return error_origin(r);
r
r
return error_origin(r);
error_origin(r)
error_origin
error_origin
r
r
r = message_new_outgoing(&message, data, n_data);
r = message_new_outgoing(&message, data, n_data)
r
r
message_new_outgoing(&message, data, n_data)
message_new_outgoing
message_new_outgoing
&message
message
message
data
data
n_data
n_data
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
r = connection_queue(peer->bus->controller, NULL, 0, message);
r = connection_queue(peer->bus->controller, NULL, 0, message)
r
r
connection_queue(peer->bus->controller, NULL, 0, message)
connection_queue
connection_queue
peer->bus->controller
peer->bus
peer
peer
bus
controller
NULL
NULL
0
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
c_dvar_write(out_v, "()");
c_dvar_write(out_v, "()")
c_dvar_write
c_dvar_write
out_v
out_v
"()"
r = driver_send_reply(peer, out_v, NULL);
r = driver_send_reply(peer, out_v, NULL)
r
r
driver_send_reply(peer, out_v, NULL)
driver_send_reply
driver_send_reply
peer
peer
out_v
out_v
NULL
NULL
if (r)                return error_trace(r);
r
r
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
return 0;
0
-----joern-----
(140,147,0)
(108,65,0)
(5,130,0)
(55,23,0)
(79,69,0)
(1,72,0)
(60,129,0)
(104,125,0)
(132,147,0)
(35,112,0)
(13,65,0)
(95,96,0)
(105,58,0)
(15,9,0)
(97,96,0)
(127,1,0)
(147,27,0)
(19,114,0)
(137,113,0)
(138,65,0)
(96,131,0)
(129,49,0)
(21,147,0)
(125,93,0)
(50,98,0)
(24,96,0)
(98,145,0)
(83,23,0)
(113,98,0)
(64,61,0)
(133,27,0)
(74,21,0)
(100,31,0)
(84,113,0)
(135,55,0)
(144,102,0)
(70,96,0)
(77,65,0)
(86,16,0)
(35,16,0)
(72,147,0)
(45,87,0)
(78,55,0)
(117,65,0)
(118,78,0)
(92,45,0)
(134,112,0)
(41,30,0)
(88,45,0)
(16,61,0)
(73,36,0)
(152,45,0)
(32,96,0)
(56,38,0)
(53,65,0)
(101,31,0)
(69,147,0)
(44,65,0)
(113,65,0)
(4,112,0)
(31,100,0)
(19,146,0)
(8,96,0)
(98,82,0)
(145,98,0)
(107,82,0)
(58,23,0)
(139,50,0)
(142,64,0)
(38,30,0)
(130,26,0)
(57,87,0)
(114,19,0)
(41,116,0)
(48,65,0)
(27,65,0)
(81,96,0)
(105,65,0)
(41,21,0)
(100,23,0)
(78,65,0)
(51,3,0)
(23,65,0)
(57,120,0)
(96,19,0)
(64,37,0)
(54,74,0)
(121,151,0)
(3,65,0)
(89,147,0)
(76,131,0)
(0,65,0)
(112,90,0)
(68,65,0)
(116,147,0)
(37,64,0)
(130,93,0)
(25,36,0)
(75,96,0)
(59,102,0)
(131,96,0)
(88,23,0)
(148,96,0)
(74,90,0)
(62,23,0)
(98,50,0)
(110,105,0)
(96,65,0)
(99,96,0)
(115,137,0)
(2,35,0)
(41,140,0)
(90,65,0)
(7,77,0)
(102,3,0)
(147,69,0)
(55,78,0)
(47,65,0)
(39,26,0)
(80,96,0)
(30,147,0)
(42,45,0)
(102,144,0)
(19,96,0)
(82,23,0)
(36,65,0)
(69,150,0)
(122,129,0)
(136,145,0)
(128,37,0)
(57,93,0)
(10,146,0)
(64,49,0)
(36,93,0)
(26,130,0)
(101,96,0)
(14,64,0)
(109,90,0)
(123,132,0)
(16,35,0)
(9,140,0)
(124,65,0)
(96,101,0)
(82,98,0)
(22,65,0)
(71,112,0)
(1,3,0)
(37,65,0)
(29,96,0)
(150,69,0)
(31,101,0)
(106,57,0)
(38,26,0)
(131,23,0)
(41,132,0)
(119,65,0)
(58,105,0)
(120,57,0)
(9,37,0)
(149,100,0)
(141,16,0)
(57,151,0)
(6,93,0)
(12,96,0)
(18,64,0)
(132,65,0)
(45,88,0)
(103,58,0)
(43,102,0)
(3,102,0)
(46,6,0)
(111,78,0)
(41,72,0)
(33,101,0)
(40,96,0)
(126,57,0)
(91,6,0)
(146,19,0)
(78,77,0)
(129,65,0)
(20,101,0)
(6,65,0)
(17,96,0)
(90,112,0)
(98,113,0)
(112,35,0)
(28,88,0)
(66,96,0)
(94,120,0)
(63,144,0)
(26,65,0)
(52,96,0)
(151,57,0)
(137,116,0)
(129,60,1)
(74,54,1)
(147,69,1)
(17,81,1)
(139,82,1)
(103,6,1)
(58,23,1)
(83,62,1)
(89,69,1)
(30,38,1)
(46,125,1)
(58,103,1)
(57,93,1)
(5,39,1)
(126,125,1)
(101,31,1)
(143,113,1)
(41,72,1)
(84,85,1)
(24,99,1)
(41,116,1)
(19,146,1)
(118,111,1)
(142,128,1)
(116,137,1)
(51,143,1)
(98,145,1)
(6,93,1)
(64,61,1)
(27,133,1)
(147,89,1)
(23,83,1)
(131,76,1)
(28,57,1)
(36,93,1)
(45,88,1)
(19,114,1)
(144,63,1)
(137,113,1)
(98,50,1)
(4,35,1)
(90,112,1)
(95,66,1)
(130,5,1)
(91,46,1)
(106,126,1)
(137,115,1)
(1,3,1)
(67,90,1)
(105,58,1)
(12,19,1)
(82,107,1)
(9,37,1)
(21,74,1)
(123,11,1)
(112,71,1)
(40,29,1)
(85,26,1)
(101,20,1)
(41,21,1)
(56,85,1)
(148,97,1)
(99,70,1)
(104,45,1)
(63,51,1)
(121,106,1)
(45,42,1)
(78,77,1)
(39,105,1)
(33,31,1)
(74,90,1)
(125,93,1)
(96,131,1)
(133,147,1)
(34,3,1)
(72,147,1)
(146,10,1)
(131,23,1)
(41,140,1)
(96,101,1)
(72,1,1)
(107,84,1)
(127,34,1)
(111,55,1)
(79,23,1)
(130,93,1)
(77,7,1)
(102,59,1)
(14,142,1)
(105,110,1)
(86,141,1)
(66,32,1)
(38,26,1)
(73,96,1)
(57,151,1)
(152,88,1)
(132,123,1)
(81,95,1)
(151,121,1)
(36,25,1)
(6,91,1)
(100,149,1)
(94,151,1)
(136,50,1)
(125,104,1)
(101,33,1)
(135,27,1)
(75,40,1)
(16,61,1)
(102,144,1)
(110,58,1)
(8,101,1)
(78,55,1)
(149,52,1)
(41,132,1)
(100,23,1)
(37,64,1)
(15,11,1)
(71,134,1)
(3,102,1)
(30,147,1)
(60,122,1)
(132,147,1)
(115,143,1)
(50,139,1)
(55,23,1)
(129,49,1)
(145,136,1)
(35,2,1)
(82,23,1)
(25,73,1)
(42,92,1)
(9,15,1)
(16,86,1)
(32,12,1)
(120,94,1)
(20,31,1)
(76,78,1)
(38,56,1)
(104,36,1)
(64,49,1)
(43,144,1)
(70,148,1)
(59,43,1)
(1,127,1)
(2,16,1)
(29,8,1)
(35,16,1)
(26,130,1)
(92,152,1)
(141,109,1)
(140,147,1)
(112,35,1)
(78,118,1)
(96,19,1)
(21,147,1)
(64,18,1)
(55,135,1)
(134,4,1)
(80,24,1)
(31,100,1)
(122,67,1)
(98,82,1)
(11,37,1)
(10,75,1)
(97,17,1)
(113,98,1)
(69,79,1)
(54,67,1)
(41,30,1)
(69,150,1)
(88,23,1)
(128,129,1)
(109,34,1)
(88,28,1)
(116,147,1)
(140,9,1)
(62,77,1)
(96,80,1)
(57,120,1)
(52,131,1)
(18,14,1)
(20,31,2)
(19,146,2)
(21,67,2)
(37,67,2)
(137,113,2)
(31,100,2)
(15,11,2)
(129,67,2)
(145,85,2)
(144,143,2)
(56,85,2)
(38,26,2)
(34,143,2)
(96,131,2)
(9,37,2)
(64,49,2)
(132,11,2)
(120,125,2)
(11,67,2)
(139,85,2)
(21,147,2)
(116,147,2)
(96,19,2)
(127,34,2)
(125,93,2)
(30,85,2)
(3,143,2)
(51,143,2)
(4,34,2)
(74,90,2)
(129,49,2)
(105,58,2)
(2,34,2)
(88,125,2)
(140,11,2)
(26,130,2)
(72,147,2)
(67,34,2)
(33,31,2)
(136,85,2)
(35,34,2)
(42,125,2)
(102,143,2)
(134,34,2)
(88,23,2)
(41,116,2)
(30,147,2)
(102,144,2)
(98,85,2)
(64,67,2)
(58,23,2)
(94,125,2)
(16,61,2)
(35,16,2)
(84,85,2)
(14,67,2)
(90,34,2)
(45,88,2)
(71,34,2)
(152,125,2)
(1,3,2)
(60,67,2)
(109,34,2)
(101,31,2)
(82,85,2)
(122,67,2)
(55,23,2)
(112,35,2)
(1,34,2)
(96,101,2)
(82,23,2)
(43,143,2)
(57,151,2)
(72,34,2)
(116,143,2)
(140,147,2)
(37,64,2)
(147,69,2)
(126,125,2)
(130,93,2)
(3,102,2)
(74,67,2)
(57,125,2)
(98,50,2)
(78,55,2)
(63,143,2)
(125,125,2)
(123,11,2)
(57,120,2)
(41,140,2)
(9,11,2)
(57,93,2)
(36,93,2)
(106,125,2)
(41,30,2)
(41,21,2)
(78,77,2)
(142,67,2)
(100,23,2)
(86,34,2)
(41,132,2)
(59,143,2)
(19,114,2)
(98,82,2)
(132,147,2)
(112,34,2)
(41,72,2)
(18,67,2)
(121,125,2)
(128,67,2)
(45,125,2)
(104,125,2)
(64,61,2)
(141,34,2)
(115,143,2)
(113,85,2)
(6,93,2)
(16,34,2)
(143,85,2)
(98,145,2)
(151,125,2)
(131,23,2)
(113,98,2)
(50,85,2)
(92,125,2)
(38,85,2)
(90,112,2)
(137,143,2)
(107,85,2)
(69,150,2)
(28,125,2)
(54,67,2)
-----------------------------------
(0,data)
(1,error_fold(r)
(2,controller)
(3,r = message_new_outgoing(&message, data, n_data)
(4,NULL)
(5,in_v)
(6,c_dvar_read(in_v, "])
(7,type)
(8,DBUS_MESSAGE_TYPE_SIGNAL)
(9,error_trace(r)
(10,1)
(11,r)
(12,DBUS_MESSAGE_FIELD_PATH)
(13,if (r)
(14,out_v)
(15,r)
(16,peer->bus)
(17,"org.bus1.DBus.Broker")
(18,NULL)
(19,(uint32_t)
(20,\'B\')
(21,return error_fold(r)
(22,key)
(23,var = C_DVAR_INIT)
(24,c_dvar_type_g)
(25,"([")
(26,r = driver_end_read(in_v)
(27,(message_unrefp)
(28,var)
(29,DBUS_HEADER_FLAG_NO_REPLY_EXPECTED)
(30,return error_trace(r)
(31,c_dvar_is_big_endian(&var)
(32,c_dvar_type_o)
(33,\'l\')
(34,r)
(35,peer->bus->controller)
(36,c_dvar_read(in_v, "([")
(37,r = driver_send_reply(peer, out_v, NULL)
(38,error_trace(r)
(39,r)
(40,1)
(41,RET)
(42,value)
(43,data)
(44,type)
(45,c_dvar_write(&var, "{ss}", key, value)
(46,in_v)
(47,if (r)
(48,var)
(49,CDVar *out_v)
(50,&data)
(51,r)
(52,"((yyyyuu[(y<o>)
(53,value)
(54,r)
(55,&var)
(56,r)
(57,c_dvar_read(in_v, "{ss}", &key, &value)
(58,&var)
(59,n_data)
(60,"()
(61,Peer *peer)
(62,var)
(63,message)
(64,driver_send_reply(peer, out_v, NULL)
(65,)
(66,"/org/bus1/DBus/Broker")
(67,r)
(68,if (r)
(69,(message_unrefp)
(70,"SetActivationEnvironment")
(71,message)
(72,return error_fold(r)
(73,in_v)
(74,error_fold(r)
(75,0)
(76,var)
(77,type[] = {\n\\n                C_DVAR_T_INIT(\n\\n                        DRIVER_T_MESSAGE(\n\\n                                C_DVAR_T_TUPLE1(\n\\n                                        C_DVAR_T_ARRAY(\n\\n                                                C_DVAR_T_PAIR(\n\\n                                                        C_DVAR_T_s,\n\\n                                                        C_DVAR_T_s\n\\n                                                )
(78,c_dvar_begin_write(&var, type, 1)
(79,Message)
(80,"a{ss}")
(81,c_dvar_type_s)
(82,&var)
(83,C_DVAR_INIT)
(84,r)
(85,r)
(86,bus)
(87,)
(88,&var)
(89,message)
(90,r = connection_queue(peer->bus->controller, NULL, 0, message)
(91,"])
(92,key)
(93,CDVar *in_v)
(94,value)
(95,DBUS_MESSAGE_FIELD_INTERFACE)
(96,c_dvar_write(&var, "((yyyyuu[(y<o>)
(97,DBUS_MESSAGE_FIELD_MEMBER)
(98,c_dvar_end_write(&var, &data, &n_data)
(99,DBUS_MESSAGE_FIELD_SIGNATURE)
(100,&var)
(101,c_dvar_is_big_endian(&var)
(102,message_new_outgoing(&message, data, n_data)
(103,var)
(104,in_v)
(105,c_dvar_write(&var, "])
(106,"{ss}")
(107,var)
(108,while (c_dvar_more(in_v)
(109,r)
(110,"])
(111,type)
(112,connection_queue(peer->bus->controller, NULL, 0, message)
(113,r = c_dvar_end_write(&var, &data, &n_data)
(114,uint32_t)
(115,r)
(116,return error_origin(r)
(117,if (r)
(118,1)
(119,if (r)
(120,&value)
(121,key)
(122,out_v)
(123,0)
(124,n_data)
(125,c_dvar_more(in_v)
(126,in_v)
(127,r)
(128,r)
(129,c_dvar_write(out_v, "()
(130,driver_end_read(in_v)
(131,&var)
(132,return 0;)
(133,NULL)
(134,0)
(135,var)
(136,n_data)
(137,error_origin(r)
(138,r)
(139,data)
(140,return error_trace(r)
(141,peer)
(142,peer)
(143,r)
(144,&message)
(145,&n_data)
(146,-1)
(147,(message_unrefp)
(148,c_dvar_type_s)
(149,var)
(150,message_unrefp)
(151,&key)
(152,"{ss}")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^