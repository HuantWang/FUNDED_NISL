-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    int count;
    /* Initialize count */
    count = -1;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
72,73
72,74
73,74
75,76
75,77
76,77
76,78
77,78
80,81
82,83
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,42,47,48,51,52,55,61,63,65,70,71,74,78,79,81,84,89,90
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
39,40
39,41
45,46
45,47
49,50
49,51
68,69
68,70
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B()
goodG2B
{    int h,j;    int count;    /* Initialize count */    count = -1;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int h,j;
int h,j;
int
h
h
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number */        count = 20;    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(4,7,0)
(28,39,0)
(50,16,0)
(25,29,0)
(3,23,0)
(43,45,0)
(39,32,0)
(47,12,0)
(26,9,0)
(29,13,0)
(31,26,0)
(2,26,0)
(30,34,0)
(23,3,0)
(20,16,0)
(48,32,0)
(15,27,0)
(21,16,0)
(22,19,0)
(44,34,0)
(8,1,0)
(17,45,0)
(36,19,0)
(45,26,0)
(3,39,0)
(37,16,0)
(49,16,0)
(42,19,0)
(22,3,0)
(7,5,0)
(24,29,0)
(41,22,0)
(1,19,0)
(12,34,0)
(10,27,0)
(40,10,0)
(3,22,0)
(38,10,0)
(32,39,0)
(33,44,0)
(3,29,0)
(35,3,0)
(39,16,0)
(14,27,0)
(6,14,0)
(46,27,0)
(11,44,0)
(18,34,0)
(41,19,1)
(35,41,1)
(19,42,1)
(30,18,1)
(15,46,1)
(4,22,1)
(39,32,1)
(32,48,1)
(43,10,1)
(33,12,1)
(3,35,1)
(10,40,1)
(47,29,1)
(38,27,1)
(38,14,1)
(22,3,1)
(46,44,1)
(27,15,1)
(36,45,1)
(29,25,1)
(33,34,1)
(14,6,1)
(8,7,1)
(24,44,1)
(1,19,1)
(25,24,1)
(3,29,1)
(41,1,1)
(10,27,1)
(6,22,1)
(44,34,1)
(17,43,1)
(11,33,1)
(45,17,1)
(12,34,1)
(44,11,1)
(7,4,1)
(3,39,1)
(3,23,1)
(14,27,1)
(18,39,1)
(12,47,1)
(22,19,1)
(0,10,1)
(48,28,1)
(40,38,1)
(34,30,1)
(1,8,1)
(42,36,1)
(40,10,2)
(41,10,2)
(4,22,2)
(17,10,2)
(33,44,2)
(12,34,2)
(44,34,2)
(45,10,2)
(10,27,2)
(44,44,2)
(47,44,2)
(3,39,2)
(25,44,2)
(3,10,2)
(41,22,2)
(36,10,2)
(14,10,2)
(1,22,2)
(6,10,2)
(24,44,2)
(22,3,2)
(3,29,2)
(10,10,2)
(19,10,2)
(22,10,2)
(11,44,2)
(43,10,2)
(35,10,2)
(42,10,2)
(3,23,2)
(22,22,2)
(22,19,2)
(7,22,2)
(12,44,2)
(1,19,2)
(3,22,2)
(38,10,2)
(35,22,2)
(39,32,2)
(8,22,2)
(14,27,2)
(29,44,2)
-----------------------------------
(0,RET)
(1,i++)
(2,i)
(3,(size_t)
(4,"Hello")
(5,)
(6,j)
(7,printLine("Hello")
(8,i)
(9,)
(10,j < 1)
(11,1)
(12,h++)
(13,)
(14,j++)
(15,0)
(16,)
(17,0)
(18,h)
(19,i = 0)
(20,j)
(21,for(h = 0; h < 1; h++)
(22,i < (size_t)
(23,size_t)
(24,count)
(25,20)
(26,)
(27,j = 0)
(28,count)
(29,count = 20)
(30,0)
(31,for (i = 0; i < (size_t)
(32,-1)
(33,h)
(34,h = 0)
(35,count)
(36,i)
(37,h)
(38,j)
(39,count = -1)
(40,1)
(41,i)
(42,0)
(43,i)
(44,h < 1)
(45,i = 0)
(46,j)
(47,h)
(48,1)
(49,for(j = 0; j < 1; j++)
(50,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^