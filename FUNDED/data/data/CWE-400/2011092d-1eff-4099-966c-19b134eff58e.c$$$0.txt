-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink(size_t dataArray[])
{
    /* copy data out of dataArray */
    size_t data = dataArray[2];
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink(size_t dataArray[]){    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_badSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(31,19,0)
(34,16,0)
(15,19,0)
(13,33,0)
(33,13,0)
(27,13,0)
(39,35,0)
(40,33,0)
(24,31,0)
(20,27,0)
(13,8,0)
(36,18,0)
(10,19,0)
(5,32,0)
(23,33,0)
(27,20,0)
(12,16,0)
(32,5,0)
(17,16,0)
(16,34,0)
(15,10,0)
(31,10,0)
(6,19,0)
(38,30,0)
(43,7,0)
(29,27,0)
(37,6,0)
(33,0,0)
(17,5,0)
(5,10,0)
(21,10,0)
(1,18,0)
(14,19,0)
(26,20,0)
(25,6,0)
(22,7,0)
(2,13,0)
(5,17,0)
(16,17,0)
(3,15,0)
(1,42,0)
(4,34,0)
(6,10,0)
(11,35,0)
(10,5,0)
(18,1,0)
(35,10,0)
(41,8,0)
(30,28,0)
(7,8,0)
(16,13,0)
(20,26,1)
(33,40,1)
(4,12,1)
(10,5,1)
(31,24,1)
(3,6,1)
(1,18,1)
(6,37,1)
(6,10,1)
(5,17,1)
(29,13,1)
(26,29,1)
(24,15,1)
(5,32,1)
(27,13,1)
(16,13,1)
(40,23,1)
(30,38,1)
(9,30,1)
(23,2,1)
(16,34,1)
(25,35,1)
(17,16,1)
(11,39,1)
(39,10,1)
(15,10,1)
(15,3,1)
(35,10,1)
(35,11,1)
(31,10,1)
(13,33,1)
(34,4,1)
(27,20,1)
(25,1,1)
(36,35,1)
(38,27,1)
(37,25,1)
(33,0,1)
(18,36,1)
(9,31,1)
(21,27,1)
(12,21,1)
(37,27,2)
(15,27,2)
(30,27,2)
(18,35,2)
(31,27,2)
(12,27,2)
(16,13,2)
(36,35,2)
(5,32,2)
(16,34,2)
(15,10,2)
(33,0,2)
(27,20,2)
(21,27,2)
(38,27,2)
(10,27,2)
(6,10,2)
(35,27,2)
(25,27,2)
(1,18,2)
(35,10,2)
(16,27,2)
(5,27,2)
(4,27,2)
(24,27,2)
(34,27,2)
(11,27,2)
(31,10,2)
(27,13,2)
(17,27,2)
(17,16,2)
(3,27,2)
(10,5,2)
(6,27,2)
(39,27,2)
(1,35,2)
(13,33,2)
(5,17,2)
-----------------------------------
(0,size_t dataArray[])
(1,exit(-1)
(2,data)
(3,myString)
(4,char)
(5,(char *)
(6,strcpy(myString, HELLO_STRING)
(7,)
(8,)
(9,RET)
(10,myString = (char *)
(11,NULL)
(12,data)
(13,data = dataArray[2])
(14,if (myString == NULL)
(15,printLine(myString)
(16,data*sizeof(char)
(17,malloc(data*sizeof(char)
(18,-1)
(19,)
(20,strlen(HELLO_STRING)
(21,myString)
(22,myString)
(23,dataArray)
(24,myString)
(25,myString)
(26,HELLO_STRING)
(27,data > strlen(HELLO_STRING)
(28,)
(29,data)
(30,printLine("Input is less than the length of the source string")
(31,free(myString)
(32,char *)
(33,dataArray[2])
(34,sizeof(char)
(35,myString == NULL)
(36,1)
(37,HELLO_STRING)
(38,"Input is less than the length of the source string")
(39,myString)
(40,2)
(41,data)
(42,)
(43,if (data > strlen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^