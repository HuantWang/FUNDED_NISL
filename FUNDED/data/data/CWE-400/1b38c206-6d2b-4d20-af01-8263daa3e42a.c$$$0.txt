-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
69,71
72,73
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,70,71,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* FIX: Deallocate memory */        free(data);    }
5==5
5
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(2,22,0)
(18,30,0)
(17,8,0)
(1,13,0)
(4,39,0)
(14,22,0)
(37,15,0)
(21,12,0)
(21,2,0)
(36,26,0)
(3,22,0)
(32,25,0)
(35,2,0)
(36,13,0)
(19,5,0)
(29,15,0)
(16,24,0)
(16,23,0)
(34,30,0)
(24,16,0)
(39,13,0)
(26,36,0)
(11,2,0)
(8,13,0)
(41,24,0)
(18,33,0)
(9,8,0)
(8,25,0)
(20,6,0)
(33,13,0)
(28,6,0)
(10,33,0)
(40,33,0)
(21,13,0)
(0,22,0)
(38,20,0)
(25,30,0)
(42,5,0)
(27,21,0)
(20,36,0)
(43,39,0)
(33,18,0)
(6,20,0)
(13,36,0)
(33,25,0)
(13,30,0)
(36,20,0)
(37,2,1)
(21,2,1)
(11,35,1)
(7,21,1)
(41,39,1)
(33,25,1)
(42,19,1)
(43,4,1)
(33,40,1)
(20,6,1)
(40,10,1)
(28,38,1)
(1,15,1)
(7,5,1)
(8,17,1)
(13,36,1)
(36,26,1)
(39,13,1)
(2,11,1)
(29,37,1)
(19,18,1)
(21,27,1)
(15,29,1)
(9,16,1)
(17,9,1)
(8,13,1)
(24,41,1)
(16,24,1)
(36,20,1)
(39,43,1)
(25,32,1)
(6,28,1)
(9,39,1)
(18,33,1)
(27,5,1)
(19,15,1)
(38,1,1)
(33,13,1)
(5,42,1)
(21,13,1)
(10,25,1)
(32,8,1)
(4,13,1)
(36,20,2)
(17,15,2)
(1,15,2)
(18,33,2)
(20,6,2)
(8,15,2)
(21,5,2)
(13,36,2)
(4,15,2)
(38,15,2)
(8,13,2)
(33,25,2)
(39,13,2)
(33,15,2)
(27,5,2)
(40,15,2)
(21,13,2)
(36,15,2)
(21,2,2)
(9,15,2)
(25,15,2)
(33,13,2)
(20,15,2)
(39,15,2)
(18,15,2)
(32,15,2)
(36,26,2)
(24,39,2)
(28,15,2)
(41,39,2)
(16,24,2)
(43,15,2)
(13,15,2)
(6,15,2)
(16,39,2)
(10,15,2)
-----------------------------------
(0,data)
(1,data)
(2,data = NULL)
(3,if(5==5)
(4,data)
(5,5==5)
(6,sizeof(int)
(7,RET)
(8,data[0])
(9,data)
(10,data)
(11,NULL)
(12,)
(13,data = (int *)
(14,if(5==5)
(15,5==5)
(16,exit(-1)
(17,0)
(18,printIntLine(data[0])
(19,5)
(20,calloc(100, sizeof(int)
(21,free(data)
(22,)
(23,)
(24,-1)
(25,data[0] = 5)
(26,int *)
(27,data)
(28,int)
(29,5)
(30,)
(31, sizeof(int)
(32,5)
(33,data[0])
(34,if (data == NULL)
(35,data)
(36,(int *)
(37,5)
(38,100)
(39,data == NULL)
(40,0)
(41,1)
(42,5)
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^