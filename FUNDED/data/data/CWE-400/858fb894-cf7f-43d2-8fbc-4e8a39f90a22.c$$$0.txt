-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_17_bad()
{
    int i,j;
    int count;
    /* Initialize count */
    count = -1;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
42,45
44,45
45,46
47,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
56,57
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
88,89
89,90
91,92
92,93
92,94
92,95
92,96
92,97
92,98
92,99
93,94
94,95
94,96
95,96
97,98
97,99
99,100
101,102
102,103
102,104
103,104
105,106
105,107
105,108
108,109
109,110
111,112
112,113
112,114
114,115
114,116
114,117
117,118
119,120
120,121
120,122
121,122
123,124
123,125
123,126
124,125
126,127
129,130
129,131
130,131
130,132
131,132
133,134
135,136
136,137
137,138
137,139
138,139
141,142
141,143
141,144
141,145
142,143
143,144
143,145
144,145
147,148
147,149
148,149
150,151
150,152
151,152
151,153
152,153
155,156
157,158
158,159
160,161
161,162
161,163
162,163
162,164
163,164
163,165
164,165
166,167
168,169
168,170
168,171
168,172
168,173
169,170
171,172
173,174
174,175
174,176
177,178
177,179
178,179
180,181
182,183
184,185
185,186
186,187
186,188
187,188
190,191
190,192
191,192
193,194
194,195
195,196
195,197
196,197
198,199
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,43,46,48,53,55,57,59,61,66,69,71,76,77,82,83,86,87,90,96,98,100,104,106,107,110,113,115,116,118,122,125,127,128,132,134,139,140,145,146,149,153,154,156,159,165,167,170,172,175,176,179,181,183,188,189,192,197,199
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
50,51
50,52
64,65
64,66
80,81
80,82
84,85
84,86
120,121
120,122
130,131
130,132
143,144
143,145
147,148
147,149
162,163
162,164
-----guardedBy-----
55,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_17_bad(){    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_17_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_17_bad
{    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(30,97,0)
(102,8,0)
(85,1,0)
(78,93,0)
(79,2,0)
(10,2,0)
(3,15,0)
(43,15,0)
(87,93,0)
(96,68,0)
(104,57,0)
(98,6,0)
(24,70,0)
(92,87,0)
(89,1,0)
(5,43,0)
(11,33,0)
(47,51,0)
(16,20,0)
(93,48,0)
(46,2,0)
(35,69,0)
(1,43,0)
(86,19,0)
(54,19,0)
(9,58,0)
(49,27,0)
(18,57,0)
(43,1,0)
(60,85,0)
(100,58,0)
(97,39,0)
(67,43,0)
(9,26,0)
(48,40,0)
(26,9,0)
(74,41,0)
(72,74,0)
(94,71,0)
(13,50,0)
(70,56,0)
(41,93,0)
(50,2,0)
(85,20,0)
(85,60,0)
(28,31,0)
(81,58,0)
(101,65,0)
(88,2,0)
(61,52,0)
(65,69,0)
(66,19,0)
(87,42,0)
(53,69,0)
(99,2,0)
(52,60,0)
(26,96,0)
(64,2,0)
(103,85,0)
(33,76,0)
(83,57,0)
(2,4,0)
(55,77,0)
(37,68,0)
(38,42,0)
(36,8,0)
(44,26,0)
(26,74,0)
(63,50,0)
(20,85,0)
(41,74,0)
(59,48,0)
(77,85,0)
(91,35,0)
(32,85,0)
(74,82,0)
(27,90,0)
(71,58,0)
(0,9,0)
(51,1,0)
(6,57,0)
(75,6,0)
(29,69,0)
(33,1,0)
(8,2,0)
(22,93,0)
(95,104,0)
(84,19,0)
(26,25,0)
(45,87,0)
(12,19,0)
(14,15,0)
(23,96,0)
(1,2,0)
(42,87,0)
(60,52,0)
(68,96,0)
(17,87,0)
(96,19,0)
(73,35,0)
(7,41,0)
(34,48,0)
(15,2,0)
(85,77,0)
(80,51,0)
(25,26,0)
(33,1,1)
(104,95,1)
(42,38,1)
(15,3,1)
(26,74,1)
(9,58,1)
(101,33,1)
(44,0,1)
(30,42,1)
(27,49,1)
(37,23,1)
(50,63,1)
(60,85,1)
(73,65,1)
(68,37,1)
(65,69,1)
(96,68,1)
(53,29,1)
(80,1,1)
(6,98,1)
(47,80,1)
(5,89,1)
(85,20,1)
(77,55,1)
(81,51,1)
(78,22,1)
(35,91,1)
(43,67,1)
(42,87,1)
(22,6,1)
(35,69,1)
(41,93,1)
(100,81,1)
(93,78,1)
(74,41,1)
(51,1,1)
(8,102,1)
(9,26,1)
(91,73,1)
(0,58,1)
(24,60,1)
(13,8,1)
(65,101,1)
(55,20,1)
(85,103,1)
(33,11,1)
(85,77,1)
(87,93,1)
(98,75,1)
(26,44,1)
(43,15,1)
(20,16,1)
(71,58,1)
(75,104,1)
(21,35,1)
(72,42,1)
(95,97,1)
(63,13,1)
(32,52,1)
(103,77,1)
(60,52,1)
(89,15,1)
(94,60,1)
(57,18,1)
(0,71,1)
(61,9,1)
(71,94,1)
(26,96,1)
(62,9,1)
(29,6,1)
(36,35,1)
(41,7,1)
(81,27,1)
(97,30,1)
(85,1,1)
(1,43,1)
(102,36,1)
(104,57,1)
(73,69,1)
(6,57,1)
(87,45,1)
(52,61,1)
(101,62,1)
(94,70,1)
(3,14,1)
(95,74,1)
(75,57,1)
(14,50,1)
(49,51,1)
(58,100,1)
(69,53,1)
(26,25,1)
(67,5,1)
(83,96,1)
(16,32,1)
(70,24,1)
(18,83,1)
(17,92,1)
(11,62,1)
(92,93,1)
(45,17,1)
(38,87,1)
(51,47,1)
(7,72,1)
(71,9,2)
(6,6,2)
(60,9,2)
(91,35,2)
(71,58,2)
(60,85,2)
(43,15,2)
(5,35,2)
(102,35,2)
(65,35,2)
(89,35,2)
(47,35,2)
(22,6,2)
(32,9,2)
(26,74,2)
(85,77,2)
(33,1,2)
(42,87,2)
(62,35,2)
(50,35,2)
(98,6,2)
(55,9,2)
(94,9,2)
(16,9,2)
(44,9,2)
(103,9,2)
(81,35,2)
(35,35,2)
(73,35,2)
(96,68,2)
(15,35,2)
(104,57,2)
(95,6,2)
(7,42,2)
(93,6,2)
(85,1,2)
(49,51,2)
(61,9,2)
(0,35,2)
(78,6,2)
(87,93,2)
(87,6,2)
(35,69,2)
(58,35,2)
(100,35,2)
(41,93,2)
(26,25,2)
(14,35,2)
(45,6,2)
(74,42,2)
(20,9,2)
(30,42,2)
(92,6,2)
(38,6,2)
(80,35,2)
(11,62,2)
(52,9,2)
(8,35,2)
(6,57,2)
(51,1,2)
(36,35,2)
(72,42,2)
(9,26,2)
(26,9,2)
(33,62,2)
(9,9,2)
(43,35,2)
(60,52,2)
(70,60,2)
(13,35,2)
(9,58,2)
(85,20,2)
(85,9,2)
(3,35,2)
(26,96,2)
(97,42,2)
(51,35,2)
(0,9,2)
(65,69,2)
(42,6,2)
(44,35,2)
(9,35,2)
(27,51,2)
(75,6,2)
(63,35,2)
(41,42,2)
(104,6,2)
(26,35,2)
(74,41,2)
(17,6,2)
(1,43,2)
(77,9,2)
(67,35,2)
(101,35,2)
(24,60,2)
(1,35,2)
-----------------------------------
(0,i)
(1,pFile = fopen(filename, "w+")
(2,)
(3,"output_bad.txt")
(4,)
(5,filename)
(6,i < 1)
(7,inputBuffer)
(8,i = 0)
(9,i < (size_t)
(10,pFile)
(11,pFile)
(12,count)
(13,pFile)
(14,filename)
(15,*filename = "output_bad.txt")
(16,char)
(17,CHAR_ARRAY_SIZE)
(18,0)
(19,)
(20,sizeof(char)
(21,RET)
(22,inputBuffer)
(23,count)
(24,1)
(25,size_t)
(26,(size_t)
(27,exit(1)
(28,if (strlen(SENTENCE)
(29,j)
(30,"fgets()
(31,)
(32,SENTENCE)
(33,fclose(pFile)
(34,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,j < 1)
(36,i)
(37,1)
(38,NULL)
(39,)
(40,)
(41,atoi(inputBuffer)
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,fopen(filename, "w+")
(44,count)
(45,stdin)
(46,if (pFile == NULL)
(47,NULL)
(48,)
(49,1)
(50,*pFile = NULL)
(51,pFile == NULL)
(52,strlen(SENTENCE)
(53,0)
(54,for(j = 0; j < 1; j++)
(55,SENTENCE)
(56,)
(57,i = 0)
(58,i = 0)
(59,inputBuffer)
(60,strlen(SENTENCE)
(61,SENTENCE)
(62,pFile)
(63,NULL)
(64,if (pFile)
(65,j++)
(66,for(i = 0; i < 1; i++)
(67,"w+")
(68,-1)
(69,j = 0)
(70,exit(1)
(71,i++)
(72,count)
(73,j)
(74,count = atoi(inputBuffer)
(75,i)
(76,)
(77,strlen(SENTENCE)
(78,"")
(79,for (i = 0; i < (size_t)
(80,pFile)
(81,i)
(82,)
(83,i)
(84,j)
(85,fwrite(SENTENCE, sizeof(char)
(86,i)
(87,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(88,i)
(89,pFile)
(90,)
(91,1)
(92,inputBuffer)
(93,inputBuffer[CHAR_ARRAY_SIZE] = "")
(94,i)
(95,i)
(96,count = -1)
(97,printLine("fgets()
(98,1)
(99,filename)
(100,0)
(101,j)
(102,0)
(103,pFile)
(104,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^