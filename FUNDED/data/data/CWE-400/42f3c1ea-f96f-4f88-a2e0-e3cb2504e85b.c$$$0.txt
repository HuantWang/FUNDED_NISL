-----label-----
1
-----code-----
static char *tls_get_page(size_t sz, void **ptr) {
  void *d;
  long pagesz = tls_get_pagesz(), p;

  d = calloc(1, sz + (pagesz-1));
  if (d == NULL) {
    pr_log_pri(PR_LOG_ALERT, MOD_TLS_VERSION ": Out of memory!");
    pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
  }

  *ptr = d;

  p = ((long) d + (pagesz-1)) &~ (pagesz-1);

  return ((char *) p);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
6,7
6,8
7,8
9,10
11,12
11,13
13,14
13,15
13,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
18,19
19,20
19,21
21,22
21,23
24,25
25,26
25,27
25,28
27,28
27,29
29,30
30,31
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
40,41
43,44
43,45
44,45
46,47
47,48
47,49
48,49
51,52
51,53
52,53
52,54
53,54
55,56
57,58
57,59
58,59
59,60
60,61
60,62
60,63
60,64
61,62
63,64
64,65
66,67
68,69
70,71
71,72
71,73
72,73
73,74
75,76
77,78
78,79
78,80
79,80
81,82
81,83
82,83
83,84
83,85
84,85
84,86
85,86
85,87
88,89
90,91
91,92
91,93
92,93
95,96
96,97
97,98
97,99
98,99
101,102
102,103
103,104
103,105
104,105
104,106
106,107
108,109
-----nextToken-----
2,4,5,8,10,12,14,15,16,20,22,23,26,28,32,34,38,41,42,45,49,50,54,56,62,65,67,69,74,76,80,86,87,89,93,94,99,100,105,107,109
-----computeFrom-----
36,37
36,38
43,44
43,45
47,48
47,49
52,53
52,54
71,72
71,73
78,79
78,80
81,82
81,83
83,84
83,85
91,92
91,93
97,98
97,99
-----guardedBy-----
56,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;
-----ast_node-----
static char *tls_get_page(size_t sz, void **ptr) {  void *d;  long pagesz = tls_get_pagesz(), p;  d = calloc(1, sz + (pagesz-1));  if (d == NULL) {    pr_log_pri(PR_LOG_ALERT, MOD_TLS_VERSION ": Out of memory!");    pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }  *ptr = d;  p = ((long) d + (pagesz-1)) &~ (pagesz-1);  return ((char *) p);}
static char
*tls_get_page(size_t sz, void **ptr)
*
tls_get_page
size_t sz
size_t
size_t
sz
sz
void **ptr
void
**ptr
*
*
ptr
{  void *d;  long pagesz = tls_get_pagesz(), p;  d = calloc(1, sz + (pagesz-1));  if (d == NULL) {    pr_log_pri(PR_LOG_ALERT, MOD_TLS_VERSION ": Out of memory!");    pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }  *ptr = d;  p = ((long) d + (pagesz-1)) &~ (pagesz-1);  return ((char *) p);}
void *d;
void *d;
void
*d
*
d
long pagesz = tls_get_pagesz(), p;
long pagesz = tls_get_pagesz(), p;
long
pagesz = tls_get_pagesz()
pagesz
= tls_get_pagesz()
tls_get_pagesz()
tls_get_pagesz
tls_get_pagesz
p
p
d = calloc(1, sz + (pagesz-1));
d = calloc(1, sz + (pagesz-1))
d
d
calloc(1, sz + (pagesz-1))
calloc
calloc
1
sz + (pagesz-1)
sz
sz
(pagesz-1)
pagesz-1
pagesz
pagesz
1
if (d == NULL) {    pr_log_pri(PR_LOG_ALERT, MOD_TLS_VERSION ": Out of memory!");    pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }
d == NULL
d
d
NULL
NULL
{    pr_log_pri(PR_LOG_ALERT, MOD_TLS_VERSION ": Out of memory!");    pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);  }
pr_log_pri(PR_LOG_ALERT, MOD_TLS_VERSION ": Out of memory!");
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL);
pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
pr_session_disconnect
pr_session_disconnect
&tls_module
tls_module
tls_module
PR_SESS_DISCONNECT_NOMEM
PR_SESS_DISCONNECT_NOMEM
NULL
NULL
*ptr = d;
*ptr = d
*ptr
ptr
ptr
d
d
p = ((long) d + (pagesz-1)) &~ (pagesz-1);
p = ((long) d + (pagesz-1)) &~ (pagesz-1)
p
p
((long) d + (pagesz-1)) &~ (pagesz-1)
((long) d + (pagesz-1))
(long) d + (pagesz-1)
(long) d
long
long

d
d
(pagesz-1)
pagesz-1
pagesz
pagesz
1
~ (pagesz-1)
(pagesz-1)
pagesz-1
pagesz
pagesz
1
return ((char *) p);
((char *) p)
(char *) p
char *
char
*
*
p
p
-----joern-----
(49,37,0)
(29,1,0)
(18,22,0)
(18,37,0)
(22,35,0)
(5,9,0)
(37,18,0)
(35,42,0)
(25,2,0)
(17,42,0)
(39,12,0)
(3,0,0)
(24,27,0)
(2,38,0)
(0,1,0)
(48,36,0)
(1,29,0)
(10,41,0)
(15,28,0)
(9,22,0)
(36,27,0)
(8,27,0)
(33,4,0)
(37,1,0)
(16,45,0)
(0,12,0)
(33,32,0)
(42,35,0)
(41,35,0)
(50,19,0)
(42,17,0)
(28,36,0)
(5,47,0)
(14,27,0)
(47,27,0)
(31,45,0)
(28,12,0)
(30,5,0)
(19,36,0)
(1,27,0)
(35,41,0)
(36,28,0)
(41,1,0)
(20,0,0)
(23,37,0)
(4,33,0)
(34,1,0)
(5,7,0)
(12,0,0)
(46,41,0)
(9,27,0)
(44,47,0)
(22,9,0)
(13,33,0)
(45,36,0)
(43,9,0)
(19,27,0)
(12,11,0)
(7,5,0)
(42,36,0)
(21,42,0)
(6,27,0)
(2,19,0)
(22,18,0)
(26,33,0)
(40,4,0)
(47,2,0)
(35,22,0)
(12,28,0)
(33,4,1)
(25,33,1)
(10,46,1)
(13,26,1)
(23,35,1)
(19,36,1)
(22,35,1)
(20,3,1)
(35,41,1)
(18,37,1)
(0,20,1)
(2,25,1)
(40,45,1)
(26,4,1)
(28,12,1)
(43,19,1)
(37,49,1)
(4,40,1)
(3,39,1)
(2,38,1)
(45,36,1)
(5,7,1)
(15,48,1)
(29,34,1)
(42,21,1)
(47,5,1)
(36,28,1)
(31,36,1)
(5,9,1)
(35,42,1)
(19,50,1)
(25,45,1)
(21,43,1)
(41,10,1)
(1,29,1)
(9,22,1)
(0,1,1)
(39,15,1)
(45,16,1)
(46,42,1)
(47,2,1)
(41,1,1)
(44,47,1)
(49,23,1)
(30,9,1)
(12,11,1)
(33,13,1)
(48,1,1)
(16,31,1)
(50,2,1)
(5,30,1)
(22,18,1)
(42,36,1)
(42,17,1)
(37,1,1)
(12,0,1)
(5,7,2)
(22,35,2)
(45,36,2)
(12,0,2)
(5,9,2)
(4,45,2)
(26,45,2)
(47,2,2)
(28,12,2)
(18,37,2)
(42,36,2)
(2,38,2)
(33,45,2)
(13,45,2)
(35,41,2)
(12,11,2)
(42,17,2)
(44,47,2)
(35,42,2)
(0,1,2)
(37,1,2)
(22,18,2)
(33,4,2)
(40,45,2)
(19,36,2)
(1,29,2)
(36,28,2)
(9,22,2)
(41,1,2)
-----------------------------------
(0,pagesz-1)
(1,pagesz = tls_get_pagesz()
(2,*ptr)
(3,pagesz)
(4,&tls_module)
(5,(char *)
(6,if (d == NULL)
(7,char *)
(8,pagesz)
(9,p = ((long)
(10,1)
(11,size_t sz)
(12,sz + (pagesz-1)
(13,NULL)
(14,p)
(15,1)
(16,NULL)
(17,long)
(18,~ (pagesz-1)
(19,*ptr = d)
(20,1)
(21,d)
(22,((long)
(23,pagesz)
(24,d)
(25,ptr)
(26,PR_SESS_DISCONNECT_NOMEM)
(27,)
(28,calloc(1, sz + (pagesz-1)
(29,tls_get_pagesz()
(30,p)
(31,d)
(32,)
(33,pr_session_disconnect(&tls_module, PR_SESS_DISCONNECT_NOMEM, NULL)
(34,pagesz)
(35,(long)
(36,d = calloc(1, sz + (pagesz-1)
(37,pagesz-1)
(38,void **ptr)
(39,sz)
(40,tls_module)
(41,pagesz-1)
(42,(long)
(43,p)
(44,RET)
(45,d == NULL)
(46,pagesz)
(47,return ((char *)
(48,d)
(49,1)
(50,d)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^