-----label-----
0
-----code-----
static int bus_broadcast_to_matches(MatchRegistry *matches, MatchFilter *filter, uint64_t transaction_id, Message *message) {
        MatchRule *rule;
        int r;

        for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {
                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);

                /* exclude the destination from broadcasts */
                if (filter->destination == peer->id)
                        continue;

                r = connection_queue(&peer->connection, NULL, transaction_id, message);
                if (r) {
                        if (r == CONNECTION_E_QUOTA)
                                connection_close(&peer->connection);
                        else
                                return error_fold(r);
                }
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
25,27
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
53,54
55,56
57,58
57,59
58,59
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
74,75
74,76
74,77
77,78
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
85,86
87,88
89,90
89,91
90,91
90,92
91,92
91,93
92,93
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
104,106
104,107
104,108
104,109
105,106
107,108
108,109
108,110
109,110
112,113
114,115
116,117
118,119
118,120
119,120
121,122
122,123
122,124
122,125
123,124
123,125
124,125
126,127
128,129
129,130
129,131
130,131
132,133
133,134
133,135
134,135
137,138
138,139
138,140
139,140
141,142
143,144
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,27,32,34,35,38,40,45,48,50,52,54,56,59,62,64,66,68,73,75,76,80,83,84,86,88,93,94,97,98,99,103,106,110,111,113,115,117,120,125,127,131,135,136,140,142,144
-----computeFrom-----
43,44
43,45
57,58
57,59
90,91
90,92
101,102
101,103
123,124
123,125
-----guardedBy-----
-----guardedByNegation-----
125,142
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int bus_broadcast_to_matches(MatchRegistry *matches, MatchFilter *filter, uint64_t transaction_id, Message *message) {        MatchRule *rule;        int r;        for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, NULL, transaction_id, message);                if (r) {                        if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);                }        }        return 0;}
static int
bus_broadcast_to_matches(MatchRegistry *matches, MatchFilter *filter, uint64_t transaction_id, Message *message)
bus_broadcast_to_matches
MatchRegistry *matches
MatchRegistry
MatchRegistry
*matches
*
matches
MatchFilter *filter
MatchFilter
MatchFilter
*filter
*
filter
uint64_t transaction_id
uint64_t
uint64_t
transaction_id
transaction_id
Message *message
Message
Message
*message
*
message
{        MatchRule *rule;        int r;        for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, NULL, transaction_id, message);                if (r) {                        if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);                }        }        return 0;}
MatchRule *rule;
MatchRule *rule;
MatchRule
MatchRule
*rule
*
rule
int r;
int r;
int
r
r
for (rule = match_rule_next_match(matches, NULL, filter); rule; rule = match_rule_next_match(matches, rule, filter)) {                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, NULL, transaction_id, message);                if (r) {                        if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);                }        }
rule = match_rule_next_match(matches, NULL, filter);
rule = match_rule_next_match(matches, NULL, filter)
rule
rule
match_rule_next_match(matches, NULL, filter)
match_rule_next_match
match_rule_next_match
matches
matches
NULL
NULL
filter
filter
rule
rule
rule = match_rule_next_match(matches, rule, filter)
rule
rule
match_rule_next_match(matches, rule, filter)
match_rule_next_match
match_rule_next_match
matches
matches
rule
rule
filter
filter
{                Peer *peer = c_container_of(rule->owner, Peer, owned_matches);                /* exclude the destination from broadcasts */                if (filter->destination == peer->id)                        continue;                r = connection_queue(&peer->connection, NULL, transaction_id, message);                if (r) {                        if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);                }        }
Peer *peer = c_container_of(rule->owner, Peer, owned_matches);
Peer *peer = c_container_of(rule->owner, Peer, owned_matches);
Peer
Peer
*peer = c_container_of(rule->owner, Peer, owned_matches)
*
peer
= c_container_of(rule->owner, Peer, owned_matches)
c_container_of(rule->owner, Peer, owned_matches)
c_container_of
c_container_of
rule->owner
rule
rule
owner
Peer
Peer
owned_matches
owned_matches
if (filter->destination == peer->id)                        continue;
filter->destination == peer->id
filter->destination
filter
filter
destination
peer->id
peer
peer
id
continue;
r = connection_queue(&peer->connection, NULL, transaction_id, message);
r = connection_queue(&peer->connection, NULL, transaction_id, message)
r
r
connection_queue(&peer->connection, NULL, transaction_id, message)
connection_queue
connection_queue
&peer->connection
peer->connection
peer
peer
connection
NULL
NULL
transaction_id
transaction_id
message
message
if (r) {                        if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);                }
r
r
{                        if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);                }
if (r == CONNECTION_E_QUOTA)                                connection_close(&peer->connection);                        else                                return error_fold(r);
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
connection_close(&peer->connection);
connection_close(&peer->connection)
connection_close
connection_close
&peer->connection
peer->connection
peer
peer
connection
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(40,37,0)
(18,24,0)
(50,3,0)
(4,26,0)
(62,15,0)
(55,17,0)
(31,53,0)
(12,52,0)
(1,38,0)
(49,53,0)
(46,55,0)
(26,10,0)
(43,12,0)
(16,50,0)
(58,24,0)
(50,32,0)
(2,31,0)
(61,19,0)
(41,53,0)
(13,37,0)
(5,17,0)
(50,7,0)
(17,24,0)
(59,15,0)
(66,19,0)
(37,20,0)
(46,12,0)
(12,46,0)
(55,46,0)
(20,19,0)
(23,26,0)
(34,26,0)
(26,36,0)
(35,62,0)
(2,45,0)
(19,10,0)
(7,0,0)
(65,55,0)
(54,19,0)
(26,52,0)
(50,56,0)
(28,8,0)
(39,56,0)
(8,37,0)
(38,45,0)
(44,56,0)
(33,0,0)
(56,24,0)
(17,8,0)
(22,8,0)
(25,53,0)
(62,35,0)
(37,8,0)
(15,17,0)
(56,50,0)
(37,36,0)
(7,50,0)
(0,17,0)
(64,55,0)
(57,50,0)
(47,44,0)
(14,31,0)
(0,7,0)
(6,15,0)
(38,56,0)
(60,12,0)
(42,44,0)
(19,52,0)
(8,17,0)
(19,20,0)
(36,26,0)
(19,36,0)
(30,50,0)
(15,62,0)
(67,51,0)
(9,20,0)
(48,36,0)
(11,24,0)
(63,0,0)
(31,14,1)
(45,38,1)
(65,12,1)
(50,7,1)
(35,62,1)
(12,52,1)
(26,23,1)
(7,0,1)
(34,48,1)
(55,17,1)
(39,46,1)
(50,32,1)
(21,56,1)
(1,44,1)
(4,34,1)
(54,66,1)
(13,5,1)
(23,4,1)
(38,56,1)
(33,63,1)
(8,22,1)
(22,28,1)
(15,17,1)
(55,64,1)
(6,59,1)
(56,50,1)
(16,7,1)
(44,56,1)
(40,13,1)
(46,12,1)
(15,6,1)
(37,36,1)
(26,10,1)
(14,27,1)
(9,35,1)
(36,26,1)
(17,8,1)
(37,20,1)
(12,60,1)
(42,21,1)
(2,31,1)
(0,17,1)
(63,39,1)
(50,30,1)
(2,45,1)
(30,57,1)
(27,20,1)
(20,19,1)
(57,16,1)
(62,15,1)
(66,9,1)
(47,42,1)
(64,65,1)
(26,52,1)
(19,52,1)
(19,36,1)
(28,37,1)
(5,27,1)
(19,10,1)
(38,1,1)
(43,17,1)
(19,61,1)
(37,40,1)
(19,20,1)
(46,55,1)
(60,43,1)
(61,54,1)
(0,33,1)
(9,21,1)
(59,44,1)
(50,3,1)
(29,46,1)
(9,29,1)
(27,36,1)
(44,47,1)
(8,37,1)
(7,0,2)
(66,46,2)
(1,44,2)
(2,31,2)
(46,12,2)
(13,27,2)
(59,44,2)
(17,8,2)
(2,45,2)
(46,55,2)
(30,46,2)
(27,21,2)
(55,17,2)
(57,46,2)
(66,44,2)
(19,52,2)
(5,27,2)
(46,27,2)
(54,46,2)
(56,50,2)
(29,46,2)
(22,27,2)
(27,44,2)
(19,21,2)
(8,37,2)
(61,44,2)
(35,62,2)
(19,46,2)
(9,46,2)
(65,27,2)
(37,20,2)
(15,44,2)
(20,44,2)
(62,44,2)
(20,21,2)
(6,44,2)
(31,27,2)
(60,27,2)
(61,46,2)
(42,21,2)
(64,27,2)
(8,27,2)
(9,21,2)
(36,26,2)
(37,36,2)
(15,17,2)
(16,46,2)
(0,46,2)
(12,27,2)
(26,52,2)
(38,44,2)
(19,36,2)
(19,20,2)
(38,56,2)
(50,3,2)
(35,44,2)
(45,44,2)
(27,46,2)
(19,44,2)
(56,46,2)
(12,52,2)
(55,27,2)
(17,27,2)
(50,32,2)
(7,46,2)
(26,10,2)
(39,46,2)
(54,44,2)
(43,27,2)
(54,21,2)
(20,46,2)
(9,44,2)
(19,10,2)
(21,46,2)
(28,27,2)
(40,27,2)
(44,56,2)
(0,17,2)
(66,21,2)
(37,27,2)
(50,7,2)
(62,15,2)
(47,21,2)
(33,46,2)
(14,27,2)
(44,21,2)
(63,46,2)
(50,46,2)
(20,19,2)
(61,21,2)
-----------------------------------
(0,peer->connection)
(1,r)
(2,RET)
(3,uint64_t transaction_id)
(4,NULL)
(5,peer)
(6,connection)
(7,&peer->connection)
(8,c_container_of(rule->owner, Peer, owned_matches)
(9,rule)
(10,MatchRegistry *matches)
(11,if (r)
(12,filter->destination)
(13,rule)
(14,0)
(15,peer->connection)
(16,NULL)
(17,*peer = c_container_of(rule->owner, Peer, owned_matches)
(18,peer)
(19,match_rule_next_match(matches, rule, filter)
(20,rule = match_rule_next_match(matches, rule, filter)
(21,r)
(22,owned_matches)
(23,filter)
(24,)
(25,for (rule = match_rule_next_match(matches, NULL, filter)
(26,match_rule_next_match(matches, NULL, filter)
(27,rule)
(28,Peer)
(29,continue;)
(30,message)
(31,return 0;)
(32,Message *message)
(33,connection)
(34,matches)
(35,connection_close(&peer->connection)
(36,rule = match_rule_next_match(matches, NULL, filter)
(37,rule->owner)
(38,error_fold(r)
(39,r)
(40,owner)
(41,rule)
(42,r)
(43,filter)
(44,r == CONNECTION_E_QUOTA)
(45,return error_fold(r)
(46,filter->destination == peer->id)
(47,CONNECTION_E_QUOTA)
(48,rule)
(49,r)
(50,connection_queue(&peer->connection, NULL, transaction_id, message)
(51,)
(52,MatchFilter *filter)
(53,)
(54,rule)
(55,peer->id)
(56,r = connection_queue(&peer->connection, NULL, transaction_id, message)
(57,transaction_id)
(58,if (filter->destination == peer->id)
(59,peer)
(60,destination)
(61,filter)
(62,&peer->connection)
(63,peer)
(64,id)
(65,peer)
(66,matches)
(67,if (r == CONNECTION_E_QUOTA)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^