-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(GLOBAL_CONST_TRUE)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(12,40,0)
(31,27,0)
(28,48,0)
(3,23,0)
(46,37,0)
(29,37,0)
(21,37,0)
(14,38,0)
(45,23,0)
(38,30,0)
(7,37,0)
(18,3,0)
(43,8,0)
(48,36,0)
(31,33,0)
(15,1,0)
(46,7,0)
(35,33,0)
(48,28,0)
(49,46,0)
(2,37,0)
(0,7,0)
(32,15,0)
(23,3,0)
(40,27,0)
(4,43,0)
(40,7,0)
(25,28,0)
(3,43,0)
(44,5,0)
(5,7,0)
(26,22,0)
(29,7,0)
(42,20,0)
(7,40,0)
(47,31,0)
(19,43,0)
(13,2,0)
(6,5,0)
(11,46,0)
(40,12,0)
(17,38,0)
(27,40,0)
(10,22,0)
(31,20,0)
(2,7,0)
(16,33,0)
(33,22,0)
(31,43,0)
(27,31,0)
(34,29,0)
(3,33,0)
(20,31,0)
(39,22,0)
(9,15,1)
(9,2,1)
(4,24,1)
(2,13,1)
(35,16,1)
(31,20,1)
(46,7,1)
(20,42,1)
(45,18,1)
(47,0,1)
(27,31,1)
(3,43,1)
(25,5,1)
(32,3,1)
(7,40,1)
(28,25,1)
(29,7,1)
(3,23,1)
(5,7,1)
(19,4,1)
(41,24,1)
(13,29,1)
(6,44,1)
(48,28,1)
(42,47,1)
(40,27,1)
(29,34,1)
(2,7,1)
(31,33,1)
(0,3,1)
(11,49,1)
(44,7,1)
(49,48,1)
(49,5,1)
(23,45,1)
(5,6,1)
(41,43,1)
(18,41,1)
(3,33,1)
(9,41,1)
(33,35,1)
(46,11,1)
(31,43,1)
(43,19,1)
(15,32,1)
(40,12,1)
(24,33,1)
(34,46,1)
(40,3,2)
(46,7,2)
(3,43,2)
(11,3,2)
(40,27,2)
(6,3,2)
(25,5,2)
(32,3,2)
(2,7,2)
(31,3,2)
(46,3,2)
(34,3,2)
(23,41,2)
(27,3,2)
(20,3,2)
(7,3,2)
(42,3,2)
(47,3,2)
(28,5,2)
(48,5,2)
(31,43,2)
(3,23,2)
(5,7,2)
(48,28,2)
(5,3,2)
(2,3,2)
(29,7,2)
(18,41,2)
(7,40,2)
(3,41,2)
(31,20,2)
(44,3,2)
(19,24,2)
(0,3,2)
(4,24,2)
(43,24,2)
(40,12,2)
(13,3,2)
(49,3,2)
(31,33,2)
(3,33,2)
(27,31,2)
(29,3,2)
(45,41,2)
(15,3,2)
-----------------------------------
(0,myString)
(1,)
(2,free(myString)
(3,data > wcslen(HELLO_STRING)
(4,data)
(5,myString == NULL)
(6,NULL)
(7,myString = (wchar_t *)
(8,)
(9,RET)
(10,data)
(11,HELLO_STRING)
(12,wchar_t *)
(13,myString)
(14,if (data > wcslen(HELLO_STRING)
(15,printLine("Input is less than the length of the source string")
(16,data)
(17,myString)
(18,data)
(19,20)
(20,sizeof(wchar_t)
(21,if (myString == NULL)
(22,)
(23,wcslen(HELLO_STRING)
(24,GLOBAL_CONST_TRUE)
(25,1)
(26,if(GLOBAL_CONST_TRUE)
(27,malloc(data*sizeof(wchar_t)
(28,-1)
(29,printWLine(myString)
(30,)
(31,data*sizeof(wchar_t)
(32,"Input is less than the length of the source string")
(33,data = 0)
(34,myString)
(35,0)
(36,)
(37,)
(38,)
(39,if(GLOBAL_CONST_TRUE)
(40,(wchar_t *)
(41,GLOBAL_CONST_TRUE)
(42,wchar_t)
(43,data = 20)
(44,myString)
(45,HELLO_STRING)
(46,wcscpy(myString, HELLO_STRING)
(47,data)
(48,exit(-1)
(49,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^