-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
81,82
81,83
82,83
84,85
84,86
84,87
87,88
88,89
90,91
91,92
91,93
93,94
93,95
93,96
96,97
98,99
98,100
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
108,109
108,110
108,111
108,112
109,110
110,111
110,112
111,112
113,114
113,115
113,116
114,115
116,117
119,120
119,121
120,121
120,122
121,122
123,124
125,126
126,127
127,128
127,129
128,129
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
137,138
137,139
138,139
140,141
140,142
141,142
141,143
142,143
145,146
147,148
148,149
150,151
151,152
151,153
152,153
152,154
153,154
153,155
154,155
156,157
158,159
158,160
158,161
158,162
158,163
159,160
161,162
163,164
164,165
164,166
167,168
167,169
168,169
170,171
172,173
174,175
175,176
175,177
176,177
179,180
179,181
180,181
182,183
183,184
184,185
184,186
185,186
187,188
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,69,75,77,79,83,85,86,89,92,94,95,97,102,103,106,107,112,115,117,118,122,124,129,130,135,136,139,143,144,146,149,155,157,160,162,165,166,169,171,173,177,178,181,186,188
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
99,100
99,101
100,101
100,102
104,105
104,106
110,111
110,112
120,121
120,122
133,134
133,135
137,138
137,139
152,153
152,154
-----guardedBy-----
38,54
106,146
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(40,32,0)
(45,40,0)
(83,4,0)
(84,23,0)
(63,0,0)
(65,34,0)
(54,6,0)
(69,39,0)
(67,92,0)
(97,15,0)
(90,95,0)
(91,90,0)
(80,42,0)
(11,42,0)
(59,90,0)
(46,23,0)
(16,29,0)
(54,3,0)
(14,12,0)
(6,39,0)
(31,78,0)
(66,12,0)
(31,76,0)
(72,78,0)
(95,90,0)
(90,6,0)
(62,52,0)
(93,87,0)
(6,82,0)
(56,0,0)
(89,40,0)
(3,24,0)
(22,24,0)
(77,39,0)
(43,88,0)
(85,82,0)
(44,79,0)
(19,1,0)
(71,54,0)
(3,21,0)
(64,46,0)
(55,42,0)
(30,40,0)
(5,38,0)
(54,95,0)
(51,97,0)
(86,31,0)
(34,0,0)
(1,23,0)
(28,74,0)
(98,27,0)
(7,80,0)
(2,7,0)
(76,97,0)
(13,62,0)
(20,0,0)
(50,3,0)
(9,23,0)
(24,3,0)
(33,76,0)
(17,88,0)
(47,54,0)
(96,80,0)
(12,34,0)
(90,3,0)
(8,4,0)
(7,57,0)
(80,7,0)
(23,1,0)
(74,40,0)
(34,12,0)
(75,34,0)
(81,31,0)
(36,31,0)
(41,65,0)
(48,97,0)
(18,29,0)
(12,89,0)
(87,42,0)
(61,89,0)
(29,40,0)
(82,6,0)
(23,43,0)
(94,40,0)
(65,58,0)
(53,6,0)
(78,31,0)
(7,6,0)
(43,23,0)
(4,34,0)
(26,5,0)
(70,89,0)
(95,54,0)
(99,74,0)
(23,34,0)
(57,7,0)
(24,76,0)
(10,40,0)
(7,3,0)
(60,76,0)
(23,46,0)
(79,35,0)
(88,43,0)
(68,39,0)
(93,43,1)
(25,80,1)
(66,14,1)
(86,36,1)
(14,75,1)
(23,46,1)
(29,16,1)
(91,89,1)
(7,6,1)
(70,74,1)
(37,65,1)
(54,71,1)
(82,85,1)
(87,42,1)
(50,78,1)
(80,42,1)
(60,33,1)
(71,47,1)
(92,67,1)
(1,19,1)
(23,9,1)
(95,90,1)
(42,55,1)
(43,88,1)
(16,18,1)
(88,17,1)
(34,12,1)
(11,4,1)
(26,73,1)
(12,66,1)
(37,5,1)
(75,95,1)
(24,76,1)
(7,3,1)
(36,81,1)
(12,89,1)
(11,62,1)
(84,88,1)
(59,91,1)
(37,95,1)
(72,31,1)
(4,83,1)
(65,41,1)
(73,3,1)
(43,23,1)
(23,34,1)
(90,3,1)
(8,34,1)
(23,1,1)
(64,84,1)
(3,24,1)
(90,59,1)
(81,76,1)
(24,22,1)
(41,25,1)
(65,34,1)
(31,86,1)
(95,54,1)
(7,2,1)
(2,96,1)
(46,64,1)
(31,76,1)
(83,8,1)
(5,26,1)
(90,6,1)
(44,78,1)
(47,90,1)
(33,49,1)
(54,6,1)
(13,4,1)
(7,57,1)
(9,1,1)
(4,34,1)
(79,44,1)
(37,25,1)
(49,6,1)
(73,79,1)
(73,49,1)
(87,93,1)
(96,42,1)
(19,46,1)
(61,70,1)
(78,72,1)
(17,80,1)
(62,13,1)
(22,50,1)
(55,11,1)
(85,53,1)
(89,61,1)
(93,92,1)
(28,29,1)
(67,43,1)
(96,87,1)
(76,60,1)
(18,73,1)
(99,28,1)
(54,3,1)
(6,82,1)
(74,99,1)
(80,7,1)
(78,31,1)
(95,73,2)
(81,49,2)
(7,80,2)
(22,78,2)
(2,80,2)
(95,54,2)
(80,95,2)
(71,90,2)
(88,80,2)
(43,88,2)
(25,95,2)
(26,73,2)
(34,12,2)
(61,73,2)
(12,89,2)
(3,24,2)
(96,80,2)
(23,34,2)
(24,76,2)
(93,80,2)
(54,3,2)
(70,73,2)
(5,73,2)
(44,78,2)
(76,49,2)
(80,7,2)
(79,78,2)
(24,78,2)
(74,73,2)
(23,1,2)
(3,78,2)
(28,73,2)
(7,95,2)
(6,82,2)
(17,80,2)
(34,95,2)
(91,73,2)
(4,34,2)
(12,95,2)
(64,80,2)
(9,80,2)
(96,95,2)
(36,49,2)
(86,49,2)
(50,78,2)
(16,73,2)
(19,80,2)
(31,76,2)
(90,6,2)
(87,80,2)
(18,73,2)
(46,80,2)
(65,25,2)
(33,49,2)
(83,95,2)
(43,80,2)
(23,46,2)
(90,3,2)
(1,80,2)
(92,43,2)
(80,42,2)
(54,6,2)
(47,90,2)
(31,49,2)
(11,95,2)
(95,90,2)
(65,34,2)
(29,73,2)
(23,80,2)
(80,80,2)
(7,57,2)
(41,25,2)
(66,95,2)
(2,95,2)
(13,4,2)
(78,31,2)
(75,95,2)
(14,95,2)
(55,95,2)
(54,90,2)
(7,6,2)
(42,95,2)
(4,95,2)
(90,73,2)
(72,49,2)
(43,23,2)
(99,73,2)
(60,49,2)
(87,42,2)
(89,73,2)
(67,43,2)
(62,4,2)
(8,95,2)
(84,80,2)
(78,49,2)
(59,73,2)
(7,3,2)
-----------------------------------
(0,)
(1,strlen(SENTENCE)
(2,count)
(3,count = atoi(inputBuffer)
(4,pFile == NULL)
(5,printLine("Benign, fixed string")
(6,count = -1)
(7,(size_t)
(8,pFile)
(9,pFile)
(10,filename)
(11,i)
(12,fopen(filename, "w+")
(13,1)
(14,filename)
(15,)
(16,0)
(17,SENTENCE)
(18,i)
(19,SENTENCE)
(20,if (pFile)
(21,)
(22,inputBuffer)
(23,fwrite(SENTENCE, sizeof(char)
(24,atoi(inputBuffer)
(25,pFile)
(26,"Benign, fixed string")
(27,)
(28,pFile)
(29,i = 0)
(30,if (count > 0 && count <= 20)
(31,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(32,)
(33,inputBuffer)
(34,pFile = fopen(filename, "w+")
(35,)
(36,CHAR_ARRAY_SIZE)
(37,RET)
(38,)
(39,)
(40,)
(41,pFile)
(42,i = 0)
(43,strlen(SENTENCE)
(44,"fgets()
(45,pFile)
(46,sizeof(char)
(47,count)
(48,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,GLOBAL_CONST_TRUE)
(50,count)
(51,inputBuffer)
(52,)
(53,count)
(54,count <= 20)
(55,0)
(56,for (i = 0; i < (size_t)
(57,size_t)
(58,)
(59,0)
(60,"")
(61,"output_good.txt")
(62,exit(1)
(63,if (pFile == NULL)
(64,char)
(65,fclose(pFile)
(66,"w+")
(67,1)
(68,if(GLOBAL_CONST_TRUE)
(69,count)
(70,filename)
(71,20)
(72,NULL)
(73,GLOBAL_CONST_FALSE)
(74,*pFile = NULL)
(75,pFile)
(76,inputBuffer[CHAR_ARRAY_SIZE] = "")
(77,if(GLOBAL_CONST_FALSE)
(78,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(79,printLine("fgets()
(80,i < (size_t)
(81,inputBuffer)
(82,-1)
(83,NULL)
(84,SENTENCE)
(85,1)
(86,stdin)
(87,i++)
(88,strlen(SENTENCE)
(89,*filename = "output_good.txt")
(90,count > 0)
(91,count)
(92,exit(1)
(93,i)
(94,i)
(95,count > 0 && count <= 20)
(96,i)
(97,)
(98,if (strlen(SENTENCE)
(99,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^