-----label-----
1
-----code-----
int __res_msend(int nqueries, const unsigned char *const *queries,
	const int *qlens, unsigned char *const *answers, int *alens, int asize)
{
	int fd;
	FILE *f, _f;
	unsigned char _buf[256];
	char line[64], *s, *z;
	int timeout = 5000, attempts = 2, retry_interval, servfail_retry;
	union {
		struct sockaddr_in sin;
		struct sockaddr_in6 sin6;
	} sa = {0}, ns[3] = {{0}};
	socklen_t sl = sizeof sa.sin;
	int nns = 0;
	int family = AF_INET;
	int rlen;
	int next;
	int i, j;
	int cs;
	struct pollfd pfd;
	unsigned long t0, t1, t2;
	struct address iplit;

	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);

	/* Get nameservers from resolv.conf, fallback to localhost */
	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);
	if (f) for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {
		if (!strncmp(line, "options", 7) && isspace(line[7])) {
			unsigned long x;
			char *p, *z;
			p = strstr(line, "timeout:");
			if (p && isdigit(p[8])) {
				p += 8;
				x = strtoul(p, &z, 10);
				if (z != p) timeout = x < 30 ? x*1000 : 30000;
			}
			p = strstr(line, "attempts:");
			if (p && isdigit(p[9])) {
				p += 9;
				x = strtoul(p, &z, 10);
				if (z != p) attempts = x < 10 ? x : 10;
				if (!attempts) attempts = 1;
			}
		}
		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))
			continue;
		for (s=line+11; isspace(*s); s++);
		for (z=s; *z && !isspace(*z); z++);
		*z=0;

		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {
			if (iplit.family == AF_INET) {
				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);
				ns[nns].sin.sin_port = htons(53);
				ns[nns++].sin.sin_family = AF_INET;
			} else {
				sl = sizeof sa.sin6;
				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);
				ns[nns].sin6.sin6_port = htons(53);
				ns[nns].sin6.sin6_scope_id = iplit.scopeid;
				ns[nns++].sin6.sin6_family = family = AF_INET6;
			}
		}
	}
	if (f) __fclose_ca(f);
	if (!nns) {
		ns[0].sin.sin_family = AF_INET;
		ns[0].sin.sin_port = htons(53);
		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);
		nns=1;
	}

	/* Get local address and open/bind a socket */
	sa.sin.sin_family = family;
	fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);

	/* Handle case where system lacks IPv6 support */
	if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {
		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
		family = AF_INET;
	}
	if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;

	/* Past this point, there are no errors. Each individual query will
	 * yield either no reply (indicated by zero length) or an answer
	 * packet which is up to the caller to interpret. */

	pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);
	pthread_setcancelstate(cs, 0);

	/* Convert any IPv4 addresses in a mixed environment to v4-mapped */
	if (family == AF_INET6) {
		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);
		for (i=0; i<nns; i++) {
			if (ns[i].sin.sin_family != AF_INET) continue;
			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,
				&ns[i].sin.sin_addr, 4);
			memcpy(ns[i].sin6.sin6_addr.s6_addr,
				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);
			ns[i].sin6.sin6_family = AF_INET6;
			ns[i].sin6.sin6_flowinfo = 0;
			ns[i].sin6.sin6_scope_id = 0;
		}
	}

	memset(alens, 0, sizeof *alens * nqueries);

	pfd.fd = fd;
	pfd.events = POLLIN;
	retry_interval = timeout / attempts;
	next = 0;
	t0 = t2 = mtime();
	t1 = t2 - retry_interval;

	for (; t2-t0 < timeout; t2=mtime()) {
		if (t2-t1 >= retry_interval) {
			/* Query all configured namservers in parallel */
			for (i=0; i<nqueries; i++)
				if (!alens[i])
					for (j=0; j<nns; j++)
						sendto(fd, queries[i],
							qlens[i], MSG_NOSIGNAL,
							(void *)&ns[j], sl);
			t1 = t2;
			servfail_retry = 2 * nqueries;
		}

		/* Wait for a response, or until time to retry */
		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;

		while ((rlen = recvfrom(fd, answers[next], asize, 0,
		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {

			/* Ignore non-identifiable packets */
			if (rlen < 4) continue;

			/* Ignore replies from addresses we didn't send to */
			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);
			if (j==nns) continue;

			/* Find which query this answer goes with, if any */
			for (i=next; i<nqueries && (
				answers[next][0] != queries[i][0] ||
				answers[next][1] != queries[i][1] ); i++);
			if (i==nqueries) continue;
			if (alens[i]) continue;

			/* Only accept positive or negative responses;
			 * retry immediately on server failure, and ignore
			 * all other codes such as refusal. */
			switch (answers[next][3] & 15) {
			case 0:
			case 3:
				break;
			case 2:
				if (servfail_retry && servfail_retry--)
					sendto(fd, queries[i],
						qlens[i], MSG_NOSIGNAL,
						(void *)&ns[j], sl);
			default:
				continue;
			}

			/* Store answer in the right slot, or update next
			 * available temp slot if it's already in place. */
			alens[i] = rlen;
			if (i == next)
				for (; next<nqueries && alens[next]; next++);
			else
				memcpy(answers[i], answers[next], rlen);

			if (next == nqueries) goto out;
		}
	}
out:
	pthread_cleanup_pop(1);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
17,18
17,19
20,21
20,22
22,23
22,24
22,25
26,27
26,28
28,29
28,30
31,32
31,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
35,46
35,47
35,48
35,49
35,50
35,51
35,52
35,53
35,54
35,55
35,56
35,57
35,58
35,59
35,60
35,61
35,62
35,63
35,64
35,65
35,66
35,67
35,68
35,69
35,70
35,71
35,72
35,73
36,37
37,38
37,39
39,40
41,42
42,43
42,44
42,45
43,44
45,46
45,47
48,49
50,51
51,52
51,53
53,54
53,55
55,56
57,58
58,59
58,60
58,61
58,62
60,61
60,62
62,63
64,65
64,66
67,68
67,69
70,71
71,72
71,73
71,74
71,75
71,76
73,74
73,75
75,76
77,78
77,79
79,80
81,82
83,84
85,86
86,87
86,88
86,89
87,88
87,89
87,90
89,90
89,91
90,91
92,93
94,95
94,96
95,96
97,98
99,100
99,101
101,102
102,103
104,105
104,106
104,107
106,107
108,109
109,110
110,111
112,113
113,114
113,115
114,115
116,117
116,118
118,119
119,120
120,121
120,122
121,122
124,125
125,126
125,127
127,128
127,129
129,130
131,132
132,133
132,134
134,135
134,136
136,137
137,138
139,140
140,141
140,142
142,143
144,145
145,146
145,147
147,148
149,150
150,151
150,152
150,153
152,153
154,155
156,157
157,158
157,159
159,160
161,162
162,163
162,164
163,164
165,166
167,168
168,169
168,170
168,171
168,172
170,171
172,173
174,175
176,177
177,178
177,179
178,179
180,181
182,183
183,184
183,185
183,186
184,185
186,187
188,189
189,190
191,192
192,193
192,194
193,194
195,196
195,197
195,198
195,199
195,200
196,197
199,200
200,201
202,203
204,205
205,206
207,208
207,209
208,209
210,211
210,212
210,213
211,212
212,213
212,214
213,214
216,217
216,218
217,218
217,219
218,219
221,222
221,223
221,224
221,225
222,223
224,225
226,227
227,228
229,230
231,232
231,233
231,234
231,235
231,236
231,237
232,233
232,234
233,234
233,235
234,235
235,236
235,237
235,238
235,239
236,237
238,239
242,243
242,244
243,244
245,246
245,247
246,247
249,250
249,251
249,252
249,253
249,254
249,255
250,251
251,252
251,253
253,254
255,256
256,257
256,258
256,259
258,259
258,260
261,262
261,263
264,265
265,266
265,267
266,267
268,269
268,270
268,271
269,270
271,272
274,275
274,276
275,276
275,277
276,277
278,279
278,280
279,280
281,282
281,283
282,283
285,286
285,287
285,288
286,287
287,288
287,289
288,289
291,292
292,293
292,294
293,294
295,296
295,297
295,298
295,299
296,297
298,299
300,301
301,302
304,305
304,306
305,306
305,307
306,307
308,309
310,311
311,312
311,313
312,313
314,315
314,316
314,317
315,316
315,317
316,317
319,320
319,321
320,321
324,325
325,326
325,327
326,327
328,329
328,330
328,331
329,330
331,332
334,335
334,336
335,336
335,337
336,337
338,339
338,340
339,340
341,342
341,343
342,343
345,346
345,347
345,348
345,349
346,347
347,348
347,349
348,349
351,352
352,353
352,354
353,354
355,356
355,357
355,358
355,359
356,357
358,359
360,361
361,362
364,365
364,366
365,366
365,367
366,367
368,369
370,371
371,372
371,373
372,373
374,375
374,376
374,377
375,376
375,377
376,377
379,380
382,383
382,384
383,384
384,385
386,387
387,388
387,389
388,389
391,392
391,393
392,393
392,394
393,394
393,395
393,396
393,397
394,395
396,397
400,401
401,402
401,403
402,403
404,405
404,406
405,406
409,410
409,411
409,412
409,413
410,411
411,412
411,413
412,413
414,415
414,416
415,416
418,419
418,420
419,420
421,422
422,423
424,425
425,426
428,429
428,430
428,431
428,432
429,430
430,431
430,432
431,432
433,434
435,436
435,437
436,437
437,438
439,440
440,441
440,442
441,442
443,444
444,445
446,447
447,448
450,451
451,452
451,453
452,453
453,454
456,457
456,458
457,458
457,459
458,459
458,460
458,461
458,462
459,460
461,462
462,463
464,465
466,467
469,470
470,471
470,472
470,473
471,472
471,473
472,473
472,474
473,474
476,477
478,479
478,480
478,481
479,480
480,481
480,482
480,483
480,484
481,482
483,484
484,485
484,486
485,486
485,487
486,487
486,488
487,488
489,490
493,494
493,495
494,495
498,499
499,500
499,501
500,501
500,502
501,502
501,503
502,503
502,504
503,504
505,506
509,510
509,511
510,511
513,514
514,515
514,516
515,516
515,517
516,517
516,518
517,518
517,519
518,519
520,521
521,522
525,526
527,528
527,529
527,530
527,531
527,532
528,529
529,530
529,531
530,531
532,533
533,534
533,535
534,535
537,538
538,539
538,540
538,541
538,542
539,540
541,542
542,543
542,544
543,544
543,545
544,545
544,546
545,546
547,548
551,552
551,553
552,553
556,557
557,558
557,559
558,559
558,560
559,560
559,561
560,561
560,562
561,562
563,564
567,568
567,569
568,569
571,572
572,573
572,574
573,574
573,575
574,575
574,576
575,576
575,577
576,577
578,579
582,583
582,584
583,584
586,587
587,588
587,589
588,589
588,590
589,590
589,591
590,591
590,592
591,592
593,594
594,595
598,599
598,600
599,600
601,602
603,604
603,605
604,605
606,607
607,608
607,609
608,609
610,611
612,613
612,614
613,614
614,615
616,617
616,618
616,619
616,620
617,618
618,619
618,620
619,620
619,621
620,621
620,622
621,622
621,623
622,623
627,628
629,630
630,631
630,632
631,632
631,633
632,633
632,634
633,634
633,635
634,635
639,640
639,641
640,641
643,644
644,645
644,646
645,646
645,647
646,647
646,648
647,648
647,649
648,649
648,650
649,650
655,656
655,657
656,657
659,660
660,661
660,662
661,662
664,665
665,666
665,667
666,667
666,668
667,668
667,669
668,669
672,673
674,675
675,676
675,677
676,677
678,679
678,680
678,681
678,682
679,680
681,682
683,684
683,685
684,685
684,686
685,686
687,688
689,690
692,693
692,694
693,694
693,695
694,695
694,696
695,696
695,697
696,697
699,700
699,701
700,701
702,703
704,705
704,706
705,706
707,708
709,710
709,711
710,711
711,712
711,713
712,713
714,715
714,716
714,717
714,718
715,716
717,718
719,720
719,721
720,721
720,722
721,722
723,724
725,726
728,729
729,730
729,731
730,731
732,733
734,735
734,736
735,736
735,737
736,737
736,738
737,738
740,741
740,742
741,742
741,743
741,744
741,745
742,743
744,745
746,747
746,748
747,748
747,749
749,750
751,752
752,753
754,755
757,758
758,759
760,761
761,762
761,763
761,764
762,763
764,765
766,767
766,768
767,768
767,769
769,770
771,772
771,773
772,773
772,774
773,774
776,777
778,779
779,780
779,781
779,782
780,781
782,783
785,786
785,787
786,787
786,788
787,788
789,790
791,792
791,793
792,793
793,794
793,795
793,796
793,797
793,798
793,799
794,795
796,797
798,799
800,801
802,803
803,804
803,805
804,805
804,806
807,808
809,810
811,812
811,813
811,814
811,815
812,813
813,814
813,815
814,815
817,818
817,819
818,819
820,821
822,823
823,824
825,826
825,827
825,828
825,829
825,830
825,831
826,827
826,828
827,828
827,829
828,829
828,830
829,830
829,831
830,831
830,832
831,832
833,834
837,838
840,841
841,842
841,843
841,844
841,845
842,843
844,845
844,846
845,846
845,847
846,847
846,848
847,848
847,849
848,849
848,850
849,850
851,852
857,858
858,859
858,860
859,860
859,861
860,861
860,862
861,862
863,864
868,869
869,870
869,871
869,872
869,873
870,871
872,873
872,874
873,874
873,875
874,875
874,876
875,876
875,877
876,877
878,879
885,886
886,887
886,888
887,888
887,889
888,889
888,890
889,890
889,891
890,891
892,893
896,897
898,899
899,900
899,901
900,901
900,902
901,902
901,903
902,903
902,904
903,904
905,906
910,911
911,912
911,913
912,913
912,914
913,914
913,915
914,915
914,916
915,916
917,918
922,923
923,924
923,925
923,926
923,927
924,925
926,927
929,930
929,931
930,931
931,932
932,933
934,935
936,937
937,938
937,939
938,939
938,940
939,940
942,943
944,945
945,946
945,947
946,947
946,948
947,948
950,951
952,953
953,954
953,955
954,955
956,957
956,958
957,958
959,960
961,962
962,963
962,964
963,964
966,967
967,968
967,969
968,969
970,971
970,972
971,972
973,974
974,975
976,977
977,978
977,979
978,979
980,981
980,982
981,982
983,984
985,986
985,987
985,988
985,989
987,988
987,989
988,989
988,990
989,990
991,992
993,994
995,996
995,997
996,997
998,999
999,1000
1001,1002
1001,1003
1001,1004
1002,1003
1002,1004
1003,1004
1003,1005
1004,1005
1004,1006
1005,1006
1007,1008
1009,1010
1011,1012
1011,1013
1011,1014
1012,1013
1012,1014
1012,1015
1012,1016
1013,1014
1014,1015
1014,1016
1015,1016
1018,1019
1018,1020
1019,1020
1021,1022
1023,1024
1024,1025
1026,1027
1026,1028
1027,1028
1028,1029
1028,1030
1029,1030
1031,1032
1033,1034
1033,1035
1033,1036
1033,1037
1034,1035
1035,1036
1035,1037
1036,1037
1039,1040
1039,1041
1040,1041
1042,1043
1044,1045
1045,1046
1047,1048
1048,1049
1048,1050
1048,1051
1048,1052
1048,1053
1048,1054
1048,1055
1049,1050
1051,1052
1053,1054
1053,1055
1054,1055
1056,1057
1058,1059
1058,1060
1059,1060
1061,1062
1063,1064
1065,1066
1065,1067
1066,1067
1066,1068
1068,1069
1070,1071
1071,1072
1071,1073
1072,1073
1074,1075
1076,1077
1078,1079
1079,1080
1079,1081
1080,1081
1082,1083
1084,1085
1085,1086
1085,1087
1086,1087
1088,1089
1088,1090
1090,1091
1092,1093
1092,1094
1093,1094
1093,1095
1094,1095
1094,1096
1094,1097
1094,1098
1095,1096
1097,1098
1098,1099
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1105,1106
1107,1108
1111,1112
1111,1113
1112,1113
1112,1114
1113,1114
1114,1115
1114,1116
1115,1116
1117,1118
1117,1119
1117,1120
1117,1121
1117,1122
1117,1123
1117,1124
1118,1119
1120,1121
1122,1123
1122,1124
1123,1124
1125,1126
1127,1128
1130,1131
1130,1132
1131,1132
1131,1133
1133,1134
1135,1136
1136,1137
1138,1139
1138,1140
1139,1140
1139,1141
1140,1141
1142,1143
1143,1144
1145,1146
1146,1147
1149,1150
1149,1151
1149,1152
1149,1153
1149,1154
1149,1155
1149,1156
1149,1157
1149,1158
1149,1159
1150,1151
1150,1152
1151,1152
1151,1153
1152,1153
1156,1157
1156,1158
1156,1159
1156,1160
1157,1158
1158,1159
1158,1160
1159,1160
1162,1163
1162,1164
1163,1164
1163,1165
1164,1165
1166,1167
1168,1169
1168,1170
1168,1171
1168,1172
1169,1170
1171,1172
1171,1173
1172,1173
1174,1175
1176,1177
1177,1178
1179,1180
1181,1182
1182,1183
1185,1186
1185,1187
1186,1187
1186,1188
1187,1188
1189,1190
1192,1193
1192,1194
1192,1195
1192,1196
1193,1194
1194,1195
1194,1196
1195,1196
1197,1198
1199,1200
1199,1201
1200,1201
1200,1202
1201,1202
1203,1204
1205,1206
1206,1207
1206,1208
1207,1208
1207,1209
1208,1209
1208,1210
1209,1210
1209,1211
1210,1211
1212,1213
1215,1216
1215,1217
1216,1217
1216,1218
1217,1218
1219,1220
1222,1223
1222,1224
1223,1224
1223,1225
1224,1225
1224,1226
1225,1226
1227,1228
1230,1231
1230,1232
1231,1232
1231,1233
1232,1233
1234,1235
1237,1238
1238,1239
1241,1242
1241,1243
1242,1243
1242,1244
1243,1244
1245,1246
1248,1249
1248,1250
1249,1250
1249,1251
1250,1251
1252,1253
1255,1256
1255,1257
1256,1257
1256,1258
1257,1258
1257,1259
1258,1259
1258,1260
1259,1260
1261,1262
1265,1266
1265,1267
1265,1268
1265,1269
1265,1270
1265,1271
1265,1272
1266,1267
1268,1269
1271,1272
1273,1274
1273,1275
1274,1275
1274,1276
1275,1276
1277,1278
1278,1279
1280,1281
1281,1282
1281,1283
1281,1284
1281,1285
1281,1286
1281,1287
1281,1288
1282,1283
1284,1285
1286,1287
1286,1288
1287,1288
1289,1290
1291,1292
1291,1293
1292,1293
1294,1295
1296,1297
1298,1299
1298,1300
1299,1300
1299,1301
1301,1302
1303,1304
1304,1305
1304,1306
1305,1306
1307,1308
1309,1310
1313,1314
1314,1315
1314,1316
1315,1316
1315,1317
1316,1317
1318,1319
1320,1321
1322,1323
1322,1324
1322,1325
1323,1324
1323,1325
1324,1325
1326,1327
1328,1329
1328,1330
1328,1331
1328,1332
1330,1331
1330,1332
1331,1332
1331,1333
1332,1333
1334,1335
1336,1337
1336,1338
1337,1338
1339,1340
1341,1342
1342,1343
1345,1346
1346,1347
1346,1348
1346,1349
1346,1350
1347,1348
1349,1350
1349,1351
1350,1351
1352,1353
1354,1355
1354,1356
1355,1356
1357,1358
1359,1360
1361,1362
1361,1363
1362,1363
1362,1364
1363,1364
1365,1366
1367,1368
1369,1370
1369,1371
1371,1372
1372,1373
1372,1374
1373,1374
1376,1377
-----nextToken-----
2,4,6,8,10,12,13,14,16,18,19,21,23,24,25,27,29,30,32,34,38,40,44,46,47,49,52,54,56,59,61,63,65,66,68,69,72,74,76,78,80,82,84,88,91,93,96,98,100,103,105,107,111,115,117,122,123,126,128,130,133,135,138,141,143,146,148,151,153,155,158,160,164,166,169,171,173,175,179,181,185,187,190,194,197,198,201,203,206,209,214,215,219,220,223,225,228,230,237,239,240,241,244,247,248,252,254,257,259,260,262,263,267,270,272,273,277,280,283,284,289,290,294,297,299,302,303,307,309,313,317,318,321,322,323,327,330,332,333,337,340,343,344,349,350,354,357,359,362,363,367,369,373,377,378,380,381,385,389,390,395,397,398,399,403,406,407,408,413,416,417,420,423,426,427,432,434,438,442,445,448,449,454,455,460,463,465,467,468,474,475,477,482,488,490,491,492,495,496,497,504,506,507,508,511,512,519,522,523,524,526,531,535,536,540,546,548,549,550,553,554,555,562,564,565,566,569,570,577,579,580,581,584,585,592,595,596,597,600,602,605,609,611,615,623,624,625,626,628,635,636,637,638,641,642,650,651,652,653,654,657,658,662,663,669,670,671,673,677,680,682,686,688,690,691,697,698,701,703,706,708,713,716,718,722,724,726,727,731,733,738,739,743,745,748,750,753,755,756,759,763,765,768,770,774,775,777,781,783,784,788,790,795,797,799,801,805,806,808,810,815,816,819,821,824,832,834,835,836,838,839,843,850,852,853,854,855,856,862,864,865,866,867,871,877,879,880,881,882,883,884,891,893,894,895,897,904,906,907,908,909,916,918,919,920,921,925,927,928,933,935,940,941,943,948,949,951,955,958,960,964,965,969,972,975,979,982,984,986,990,992,994,997,1000,1006,1008,1010,1016,1017,1020,1022,1025,1030,1032,1037,1038,1041,1043,1046,1050,1052,1055,1057,1060,1062,1064,1067,1069,1073,1075,1077,1081,1083,1087,1089,1091,1096,1099,1100,1104,1106,1108,1109,1110,1116,1119,1121,1124,1126,1128,1129,1132,1134,1137,1141,1144,1147,1148,1153,1154,1155,1160,1161,1165,1167,1170,1173,1175,1178,1180,1183,1184,1188,1190,1191,1196,1198,1202,1204,1211,1213,1214,1218,1220,1221,1226,1228,1229,1233,1235,1236,1239,1240,1244,1246,1247,1251,1253,1254,1260,1262,1263,1264,1267,1269,1270,1272,1276,1279,1283,1285,1288,1290,1293,1295,1297,1300,1302,1306,1308,1310,1311,1312,1317,1319,1321,1325,1327,1329,1333,1335,1338,1340,1343,1344,1348,1351,1353,1356,1358,1360,1364,1366,1368,1370,1374,1375,1377
-----computeFrom-----
192,193
192,194
212,213
212,214
216,217
216,218
217,218
217,219
233,234
233,235
265,266
265,267
275,276
275,277
287,288
287,289
292,293
292,294
305,306
305,307
311,312
311,313
315,316
315,317
319,320
319,321
325,326
325,327
335,336
335,337
347,348
347,349
352,353
352,354
365,366
365,367
371,372
371,373
375,376
375,377
387,388
387,389
392,393
392,394
411,412
411,413
414,415
414,416
430,431
430,432
435,436
435,437
451,452
451,453
457,458
457,459
471,472
471,473
499,500
499,501
514,515
514,516
529,530
529,531
557,558
557,559
572,573
572,574
587,588
587,589
598,599
598,600
618,619
618,620
630,631
630,632
644,645
644,646
660,661
660,662
665,666
665,667
675,676
675,677
683,684
683,685
684,685
684,686
693,694
693,695
694,695
694,696
695,696
695,697
699,700
699,701
704,705
704,706
711,712
711,713
719,720
719,721
720,721
720,722
729,730
729,731
735,736
735,737
736,737
736,738
740,741
740,742
786,787
786,788
813,814
813,815
817,818
817,819
827,828
827,829
844,845
844,846
886,887
886,888
899,900
899,901
911,912
911,913
929,930
929,931
937,938
937,939
945,946
945,947
953,954
953,955
956,957
956,958
962,963
962,964
967,968
967,969
970,971
970,972
977,978
977,979
980,981
980,982
987,988
987,989
988,989
988,990
995,996
995,997
1003,1004
1003,1005
1004,1005
1004,1006
1014,1015
1014,1016
1018,1019
1018,1020
1035,1036
1035,1037
1039,1040
1039,1041
1079,1080
1079,1081
1085,1086
1085,1087
1088,1089
1088,1090
1093,1094
1093,1095
1101,1102
1101,1103
1102,1103
1102,1104
1112,1113
1112,1114
1114,1115
1114,1116
1151,1152
1151,1153
1158,1159
1158,1160
1162,1163
1162,1164
1163,1164
1163,1165
1171,1172
1171,1173
1186,1187
1186,1188
1194,1195
1194,1196
1199,1200
1199,1201
1200,1201
1200,1202
1206,1207
1206,1208
1207,1208
1207,1209
1222,1223
1222,1224
1242,1243
1242,1244
1256,1257
1256,1258
1274,1275
1274,1276
1314,1315
1314,1316
1323,1324
1323,1325
1330,1331
1330,1332
1331,1332
1331,1333
1362,1363
1362,1364
-----guardedBy-----
247,332
283,309
343,369
463,584
477,526
474,495
701,731
697,713
790,897
1008,1081
1006,1083
1327,1343
-----guardedByNegation-----
474,584
475,600
1327,1358
1325,1353
-----lastLexicalUse-----
474,584
1327,1358
-----jump-----
474,584
1327,1358
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;CompositeTypeSpecifier;Name;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;InitializerList;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;TypeIdInitializerExpression;TypeId;SimpleDeclSpecifier;Declarator;InitializerList;LiteralExpression;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ContinueStatement;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;TypeIdInitializerExpression;TypeId;NamedTypeSpecifier;Name;ArrayDeclarator;ArrayModifier;LiteralExpression;InitializerList;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;NullStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;IfStatement;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;SwitchStatement;BinaryExpression;ArraySubscriptExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DefaultStatement;ContinueStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int __res_msend(int nqueries, const unsigned char *const *queries,	const int *qlens, unsigned char *const *answers, int *alens, int asize){	int fd;	FILE *f, _f;	unsigned char _buf[256];	char line[64], *s, *z;	int timeout = 5000, attempts = 2, retry_interval, servfail_retry;	union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};	socklen_t sl = sizeof sa.sin;	int nns = 0;	int family = AF_INET;	int rlen;	int next;	int i, j;	int cs;	struct pollfd pfd;	unsigned long t0, t1, t2;	struct address iplit;	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);	/* Get nameservers from resolv.conf, fallback to localhost */	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);	if (f) for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}	if (f) __fclose_ca(f);	if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}	/* Get local address and open/bind a socket */	sa.sin.sin_family = family;	fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);	/* Handle case where system lacks IPv6 support */	if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}	if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;	/* Past this point, there are no errors. Each individual query will	 * yield either no reply (indicated by zero length) or an answer	 * packet which is up to the caller to interpret. */	pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);	pthread_setcancelstate(cs, 0);	/* Convert any IPv4 addresses in a mixed environment to v4-mapped */	if (family == AF_INET6) {		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}	memset(alens, 0, sizeof *alens * nqueries);	pfd.fd = fd;	pfd.events = POLLIN;	retry_interval = timeout / attempts;	next = 0;	t0 = t2 = mtime();	t1 = t2 - retry_interval;	for (; t2-t0 < timeout; t2=mtime()) {		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}out:	pthread_cleanup_pop(1);	return 0;}
int
__res_msend(int nqueries, const unsigned char *const *queries,	const int *qlens, unsigned char *const *answers, int *alens, int asize)
__res_msend
int nqueries
int
nqueries
nqueries
const unsigned char *const *queries
const unsigned char
*const *queries
*const
*
queries
const int *qlens
const int
*qlens
*
qlens
unsigned char *const *answers
unsigned char
*const *answers
*const
*
answers
int *alens
int
*alens
*
alens
int asize
int
asize
asize
{	int fd;	FILE *f, _f;	unsigned char _buf[256];	char line[64], *s, *z;	int timeout = 5000, attempts = 2, retry_interval, servfail_retry;	union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};	socklen_t sl = sizeof sa.sin;	int nns = 0;	int family = AF_INET;	int rlen;	int next;	int i, j;	int cs;	struct pollfd pfd;	unsigned long t0, t1, t2;	struct address iplit;	pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);	/* Get nameservers from resolv.conf, fallback to localhost */	f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);	if (f) for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}	if (f) __fclose_ca(f);	if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}	/* Get local address and open/bind a socket */	sa.sin.sin_family = family;	fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);	/* Handle case where system lacks IPv6 support */	if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}	if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;	/* Past this point, there are no errors. Each individual query will	 * yield either no reply (indicated by zero length) or an answer	 * packet which is up to the caller to interpret. */	pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);	pthread_setcancelstate(cs, 0);	/* Convert any IPv4 addresses in a mixed environment to v4-mapped */	if (family == AF_INET6) {		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}	memset(alens, 0, sizeof *alens * nqueries);	pfd.fd = fd;	pfd.events = POLLIN;	retry_interval = timeout / attempts;	next = 0;	t0 = t2 = mtime();	t1 = t2 - retry_interval;	for (; t2-t0 < timeout; t2=mtime()) {		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}out:	pthread_cleanup_pop(1);	return 0;}
int fd;
int fd;
int
fd
fd
FILE *f, _f;
FILE *f, _f;
FILE
FILE
*f
*
f
_f
_f
unsigned char _buf[256];
unsigned char _buf[256];
unsigned char
_buf[256]
_buf
[256]
256
char line[64], *s, *z;
char line[64], *s, *z;
char
line[64]
line
[64]
64
*s
*
s
*z
*
z
int timeout = 5000, attempts = 2, retry_interval, servfail_retry;
int timeout = 5000, attempts = 2, retry_interval, servfail_retry;
int
timeout = 5000
timeout
= 5000
5000
attempts = 2
attempts
= 2
2
retry_interval
retry_interval
servfail_retry
servfail_retry
union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};
union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	} sa = {0}, ns[3] = {{0}};
union {		struct sockaddr_in sin;		struct sockaddr_in6 sin6;	}

struct sockaddr_in sin;
struct sockaddr_in
sockaddr_in
sin
sin
struct sockaddr_in6 sin6;
struct sockaddr_in6
sockaddr_in6
sin6
sin6
sa = {0}
sa
= {0}
{0}
0
ns[3] = {{0}}
ns
[3]
3
= {{0}}
{{0}}
{0}
0
socklen_t sl = sizeof sa.sin;
socklen_t sl = sizeof sa.sin;
socklen_t
socklen_t
sl = sizeof sa.sin
sl
= sizeof sa.sin
sizeof sa.sin
sa.sin
sa
sa
sin
int nns = 0;
int nns = 0;
int
nns = 0
nns
= 0
0
int family = AF_INET;
int family = AF_INET;
int
family = AF_INET
family
= AF_INET
AF_INET
AF_INET
int rlen;
int rlen;
int
rlen
rlen
int next;
int next;
int
next
next
int i, j;
int i, j;
int
i
i
j
j
int cs;
int cs;
int
cs
cs
struct pollfd pfd;
struct pollfd pfd;
struct pollfd
pollfd
pfd
pfd
unsigned long t0, t1, t2;
unsigned long t0, t1, t2;
unsigned long
t0
t0
t1
t1
t2
t2
struct address iplit;
struct address iplit;
struct address
address
iplit
iplit
pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs);
pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs)
pthread_setcancelstate
pthread_setcancelstate
PTHREAD_CANCEL_DISABLE
PTHREAD_CANCEL_DISABLE
&cs
cs
cs
f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf);
f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
f
f
__fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
__fopen_rb_ca
__fopen_rb_ca
"/etc/resolv.conf"
&_f
_f
_f
_buf
_buf
sizeof _buf
_buf
_buf
if (f) for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}
f
f
for (nns=0; nns<3 && fgets(line, sizeof line, f); ) {		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}
nns=0;
nns=0
nns
nns
0
nns<3 && fgets(line, sizeof line, f)
nns<3
nns
nns
3
fgets(line, sizeof line, f)
fgets
fgets
line
line
sizeof line
line
line
f
f
{		if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}		if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;		for (s=line+11; isspace(*s); s++);		for (z=s; *z && !isspace(*z); z++);		*z=0;		if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}	}
if (!strncmp(line, "options", 7) && isspace(line[7])) {			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}
!strncmp(line, "options", 7) && isspace(line[7])
!strncmp(line, "options", 7)
strncmp(line, "options", 7)
strncmp
strncmp
line
line
"options"
7
isspace(line[7])
isspace
isspace
line[7]
line
line
7
{			unsigned long x;			char *p, *z;			p = strstr(line, "timeout:");			if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}			p = strstr(line, "attempts:");			if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}		}
unsigned long x;
unsigned long x;
unsigned long
x
x
char *p, *z;
char *p, *z;
char
*p
*
p
*z
*
z
p = strstr(line, "timeout:");
p = strstr(line, "timeout:")
p
p
strstr(line, "timeout:")
strstr
strstr
line
line
"timeout:"
if (p && isdigit(p[8])) {				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}
p && isdigit(p[8])
p
p
isdigit(p[8])
isdigit
isdigit
p[8]
p
p
8
{				p += 8;				x = strtoul(p, &z, 10);				if (z != p) timeout = x < 30 ? x*1000 : 30000;			}
p += 8;
p += 8
p
p
8
x = strtoul(p, &z, 10);
x = strtoul(p, &z, 10)
x
x
strtoul(p, &z, 10)
strtoul
strtoul
p
p
&z
z
z
10
if (z != p) timeout = x < 30 ? x*1000 : 30000;
z != p
z
z
p
p
timeout = x < 30 ? x*1000 : 30000;
timeout = x < 30 ? x*1000 : 30000
timeout
timeout
x < 30 ? x*1000 : 30000
x < 30
x
x
30
x*1000
x
x
1000
30000
p = strstr(line, "attempts:");
p = strstr(line, "attempts:")
p
p
strstr(line, "attempts:")
strstr
strstr
line
line
"attempts:"
if (p && isdigit(p[9])) {				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}
p && isdigit(p[9])
p
p
isdigit(p[9])
isdigit
isdigit
p[9]
p
p
9
{				p += 9;				x = strtoul(p, &z, 10);				if (z != p) attempts = x < 10 ? x : 10;				if (!attempts) attempts = 1;			}
p += 9;
p += 9
p
p
9
x = strtoul(p, &z, 10);
x = strtoul(p, &z, 10)
x
x
strtoul(p, &z, 10)
strtoul
strtoul
p
p
&z
z
z
10
if (z != p) attempts = x < 10 ? x : 10;
z != p
z
z
p
p
attempts = x < 10 ? x : 10;
attempts = x < 10 ? x : 10
attempts
attempts
x < 10 ? x : 10
x < 10
x
x
10
x
x
10
if (!attempts) attempts = 1;
!attempts
attempts
attempts
attempts = 1;
attempts = 1
attempts
attempts
1
if (strncmp(line, "nameserver", 10) || !isspace(line[10]))			continue;
strncmp(line, "nameserver", 10) || !isspace(line[10])
strncmp(line, "nameserver", 10)
strncmp
strncmp
line
line
"nameserver"
10
!isspace(line[10])
isspace(line[10])
isspace
isspace
line[10]
line
line
10
continue;
for (s=line+11; isspace(*s); s++);
s=line+11;
s=line+11
s
s
line+11
line
line
11
isspace(*s)
isspace
isspace
*s
s
s
s++
s
s
;
for (z=s; *z && !isspace(*z); z++);
z=s;
z=s
z
z
s
s
*z && !isspace(*z)
*z
z
z
!isspace(*z)
isspace(*z)
isspace
isspace
*z
z
z
z++
z
z
;
*z=0;
*z=0
*z
z
z
0
if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0) {			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}
__lookup_ipliteral(&iplit, s, AF_UNSPEC)>0
__lookup_ipliteral(&iplit, s, AF_UNSPEC)
__lookup_ipliteral
__lookup_ipliteral
&iplit
iplit
iplit
s
s
AF_UNSPEC
AF_UNSPEC
0
{			if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}		}
if (iplit.family == AF_INET) {				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			} else {				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}
iplit.family == AF_INET
iplit.family
iplit
iplit
family
AF_INET
AF_INET
{				memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);				ns[nns].sin.sin_port = htons(53);				ns[nns++].sin.sin_family = AF_INET;			}
memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4);
memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4)
memcpy
memcpy
&ns[nns].sin.sin_addr
ns[nns].sin.sin_addr
ns[nns].sin
ns[nns]
ns
ns
nns
nns
sin
sin_addr
iplit.addr
iplit
iplit
addr
4
ns[nns].sin.sin_port = htons(53);
ns[nns].sin.sin_port = htons(53)
ns[nns].sin.sin_port
ns[nns].sin
ns[nns]
ns
ns
nns
nns
sin
sin_port
htons(53)
htons
htons
53
ns[nns++].sin.sin_family = AF_INET;
ns[nns++].sin.sin_family = AF_INET
ns[nns++].sin.sin_family
ns[nns++].sin
ns[nns++]
ns
ns
nns++
nns
nns
sin
sin_family
AF_INET
AF_INET
{				sl = sizeof sa.sin6;				memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);				ns[nns].sin6.sin6_port = htons(53);				ns[nns].sin6.sin6_scope_id = iplit.scopeid;				ns[nns++].sin6.sin6_family = family = AF_INET6;			}
sl = sizeof sa.sin6;
sl = sizeof sa.sin6
sl
sl
sizeof sa.sin6
sa.sin6
sa
sa
sin6
memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16);
memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16)
memcpy
memcpy
&ns[nns].sin6.sin6_addr
ns[nns].sin6.sin6_addr
ns[nns].sin6
ns[nns]
ns
ns
nns
nns
sin6
sin6_addr
iplit.addr
iplit
iplit
addr
16
ns[nns].sin6.sin6_port = htons(53);
ns[nns].sin6.sin6_port = htons(53)
ns[nns].sin6.sin6_port
ns[nns].sin6
ns[nns]
ns
ns
nns
nns
sin6
sin6_port
htons(53)
htons
htons
53
ns[nns].sin6.sin6_scope_id = iplit.scopeid;
ns[nns].sin6.sin6_scope_id = iplit.scopeid
ns[nns].sin6.sin6_scope_id
ns[nns].sin6
ns[nns]
ns
ns
nns
nns
sin6
sin6_scope_id
iplit.scopeid
iplit
iplit
scopeid
ns[nns++].sin6.sin6_family = family = AF_INET6;
ns[nns++].sin6.sin6_family = family = AF_INET6
ns[nns++].sin6.sin6_family
ns[nns++].sin6
ns[nns++]
ns
ns
nns++
nns
nns
sin6
sin6_family
family = AF_INET6
family
family
AF_INET6
AF_INET6
if (f) __fclose_ca(f);
f
f
__fclose_ca(f);
__fclose_ca(f)
__fclose_ca
__fclose_ca
f
f
if (!nns) {		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}
!nns
nns
nns
{		ns[0].sin.sin_family = AF_INET;		ns[0].sin.sin_port = htons(53);		ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);		nns=1;	}
ns[0].sin.sin_family = AF_INET;
ns[0].sin.sin_family = AF_INET
ns[0].sin.sin_family
ns[0].sin
ns[0]
ns
ns
0
sin
sin_family
AF_INET
AF_INET
ns[0].sin.sin_port = htons(53);
ns[0].sin.sin_port = htons(53)
ns[0].sin.sin_port
ns[0].sin
ns[0]
ns
ns
0
sin
sin_port
htons(53)
htons
htons
53
ns[0].sin.sin_addr.s_addr = htonl(0x7f000001);
ns[0].sin.sin_addr.s_addr = htonl(0x7f000001)
ns[0].sin.sin_addr.s_addr
ns[0].sin.sin_addr
ns[0].sin
ns[0]
ns
ns
0
sin
sin_addr
s_addr
htonl(0x7f000001)
htonl
htonl
0x7f000001
nns=1;
nns=1
nns
nns
1
sa.sin.sin_family = family;
sa.sin.sin_family = family
sa.sin.sin_family
sa.sin
sa
sa
sin
sin_family
family
family
fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
fd
fd
socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
socket
socket
family
family
SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK
SOCK_DGRAM|SOCK_CLOEXEC
SOCK_DGRAM
SOCK_DGRAM
SOCK_CLOEXEC
SOCK_CLOEXEC
SOCK_NONBLOCK
SOCK_NONBLOCK
0
if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT) {		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}
fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT
fd < 0 && family == AF_INET6
fd < 0
fd
fd
0
family == AF_INET6
family
family
AF_INET6
AF_INET6
errno == EAFNOSUPPORT
errno
errno
EAFNOSUPPORT
EAFNOSUPPORT
{		fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);		family = AF_INET;	}
fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0);
fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
fd
fd
socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
socket
socket
AF_INET
AF_INET
SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK
SOCK_DGRAM|SOCK_CLOEXEC
SOCK_DGRAM
SOCK_DGRAM
SOCK_CLOEXEC
SOCK_CLOEXEC
SOCK_NONBLOCK
SOCK_NONBLOCK
0
family = AF_INET;
family = AF_INET
family
family
AF_INET
AF_INET
if (fd < 0 || bind(fd, (void *)&sa, sl) < 0) return -1;
fd < 0 || bind(fd, (void *)&sa, sl) < 0
fd < 0
fd
fd
0
bind(fd, (void *)&sa, sl) < 0
bind(fd, (void *)&sa, sl)
bind
bind
fd
fd
(void *)&sa
void *
void
*
*
&sa
sa
sa
sl
sl
0
return -1;
-1
1
pthread_cleanup_push(cleanup, (void *)(intptr_t)fd);
pthread_cleanup_push(cleanup, (void *)(intptr_t)fd)
pthread_cleanup_push
pthread_cleanup_push
cleanup
cleanup
(void *)(intptr_t)fd
void *
void
*
*
(intptr_t)fd
intptr_t
intptr_t
intptr_t

fd
fd
pthread_setcancelstate(cs, 0);
pthread_setcancelstate(cs, 0)
pthread_setcancelstate
pthread_setcancelstate
cs
cs
0
if (family == AF_INET6) {		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}
family == AF_INET6
family
family
AF_INET6
AF_INET6
{		setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);		for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}	}
setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0);
setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &(int){0}, sizeof 0)
setsockopt
setsockopt
fd
fd
IPPROTO_IPV6
IPPROTO_IPV6
IPV6_V6ONLY
IPV6_V6ONLY
&(int){0}
(int){0}
int
int

{0}
0
sizeof 0
0
for (i=0; i<nns; i++) {			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}
i=0;
i=0
i
i
0
i<nns
i
i
nns
nns
i++
i
i
{			if (ns[i].sin.sin_family != AF_INET) continue;			memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);			memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);			ns[i].sin6.sin6_family = AF_INET6;			ns[i].sin6.sin6_flowinfo = 0;			ns[i].sin6.sin6_scope_id = 0;		}
if (ns[i].sin.sin_family != AF_INET) continue;
ns[i].sin.sin_family != AF_INET
ns[i].sin.sin_family
ns[i].sin
ns[i]
ns
ns
i
i
sin
sin_family
AF_INET
AF_INET
continue;
memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4);
memcpy(ns[i].sin6.sin6_addr.s6_addr+12,				&ns[i].sin.sin_addr, 4)
memcpy
memcpy
ns[i].sin6.sin6_addr.s6_addr+12
ns[i].sin6.sin6_addr.s6_addr
ns[i].sin6.sin6_addr
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_addr
s6_addr
12
&ns[i].sin.sin_addr
ns[i].sin.sin_addr
ns[i].sin
ns[i]
ns
ns
i
i
sin
sin_addr
4
memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12);
memcpy(ns[i].sin6.sin6_addr.s6_addr,				"\0\0\0\0\0\0\0\0\0\0\xff\xff", 12)
memcpy
memcpy
ns[i].sin6.sin6_addr.s6_addr
ns[i].sin6.sin6_addr
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_addr
s6_addr
"\0\0\0\0\0\0\0\0\0\0\xff\xff"
12
ns[i].sin6.sin6_family = AF_INET6;
ns[i].sin6.sin6_family = AF_INET6
ns[i].sin6.sin6_family
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_family
AF_INET6
AF_INET6
ns[i].sin6.sin6_flowinfo = 0;
ns[i].sin6.sin6_flowinfo = 0
ns[i].sin6.sin6_flowinfo
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_flowinfo
0
ns[i].sin6.sin6_scope_id = 0;
ns[i].sin6.sin6_scope_id = 0
ns[i].sin6.sin6_scope_id
ns[i].sin6
ns[i]
ns
ns
i
i
sin6
sin6_scope_id
0
memset(alens, 0, sizeof *alens * nqueries);
memset(alens, 0, sizeof *alens * nqueries)
memset
memset
alens
alens
0
sizeof *alens * nqueries
sizeof *alens
*alens
alens
alens
nqueries
nqueries
pfd.fd = fd;
pfd.fd = fd
pfd.fd
pfd
pfd
fd
fd
fd
pfd.events = POLLIN;
pfd.events = POLLIN
pfd.events
pfd
pfd
events
POLLIN
POLLIN
retry_interval = timeout / attempts;
retry_interval = timeout / attempts
retry_interval
retry_interval
timeout / attempts
timeout
timeout
attempts
attempts
next = 0;
next = 0
next
next
0
t0 = t2 = mtime();
t0 = t2 = mtime()
t0
t0
t2 = mtime()
t2
t2
mtime()
mtime
mtime
t1 = t2 - retry_interval;
t1 = t2 - retry_interval
t1
t1
t2 - retry_interval
t2
t2
retry_interval
retry_interval
for (; t2-t0 < timeout; t2=mtime()) {		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}
;
t2-t0 < timeout
t2-t0
t2
t2
t0
t0
timeout
timeout
t2=mtime()
t2
t2
mtime()
mtime
mtime
{		if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}		/* Wait for a response, or until time to retry */		if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;		while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}	}
if (t2-t1 >= retry_interval) {			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}
t2-t1 >= retry_interval
t2-t1
t2
t2
t1
t1
retry_interval
retry_interval
{			/* Query all configured namservers in parallel */			for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);			t1 = t2;			servfail_retry = 2 * nqueries;		}
for (i=0; i<nqueries; i++)				if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
i=0;
i=0
i
i
0
i<nqueries
i
i
nqueries
nqueries
i++
i
i
if (!alens[i])					for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
!alens[i]
alens[i]
alens
alens
i
i
for (j=0; j<nns; j++)						sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
j=0;
j=0
j
j
0
j<nns
j
j
nns
nns
j++
j
j
sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl);
sendto(fd, queries[i],							qlens[i], MSG_NOSIGNAL,							(void *)&ns[j], sl)
sendto
sendto
fd
fd
queries[i]
queries
queries
i
i
qlens[i]
qlens
qlens
i
i
MSG_NOSIGNAL
MSG_NOSIGNAL
(void *)&ns[j]
void *
void
*
*
&ns[j]
ns[j]
ns
ns
j
j
sl
sl
t1 = t2;
t1 = t2
t1
t1
t2
t2
servfail_retry = 2 * nqueries;
servfail_retry = 2 * nqueries
servfail_retry
servfail_retry
2 * nqueries
2
nqueries
nqueries
if (poll(&pfd, 1, t1+retry_interval-t2) <= 0) continue;
poll(&pfd, 1, t1+retry_interval-t2) <= 0
poll(&pfd, 1, t1+retry_interval-t2)
poll
poll
&pfd
pfd
pfd
1
t1+retry_interval-t2
t1+retry_interval
t1
t1
retry_interval
retry_interval
t2
t2
0
continue;
while ((rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0) {			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}
(rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})) >= 0
(rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl}))
rlen = recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})
rlen
rlen
recvfrom(fd, answers[next], asize, 0,		  (void *)&sa, (socklen_t[1]){sl})
recvfrom
recvfrom
fd
fd
answers[next]
answers
answers
next
next
asize
asize
0
(void *)&sa
void *
void
*
*
&sa
sa
sa
(socklen_t[1]){sl}
socklen_t[1]
socklen_t
socklen_t
[1]
[1]
1
{sl}
sl
sl
0
{			/* Ignore non-identifiable packets */			if (rlen < 4) continue;			/* Ignore replies from addresses we didn't send to */			for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);			if (j==nns) continue;			/* Find which query this answer goes with, if any */			for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);			if (i==nqueries) continue;			if (alens[i]) continue;			/* Only accept positive or negative responses;			 * retry immediately on server failure, and ignore			 * all other codes such as refusal. */			switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}			/* Store answer in the right slot, or update next			 * available temp slot if it's already in place. */			alens[i] = rlen;			if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);			if (next == nqueries) goto out;		}
if (rlen < 4) continue;
rlen < 4
rlen
rlen
4
continue;
for (j=0; j<nns && memcmp(ns+j, &sa, sl); j++);
j=0;
j=0
j
j
0
j<nns && memcmp(ns+j, &sa, sl)
j<nns
j
j
nns
nns
memcmp(ns+j, &sa, sl)
memcmp
memcmp
ns+j
ns
ns
j
j
&sa
sa
sa
sl
sl
j++
j
j
;
if (j==nns) continue;
j==nns
j
j
nns
nns
continue;
for (i=next; i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] ); i++);
i=next;
i=next
i
i
next
next
i<nqueries && (				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] )
i<nqueries
i
i
nqueries
nqueries
(				answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1] )
answers[next][0] != queries[i][0] ||				answers[next][1] != queries[i][1]
answers[next][0] != queries[i][0]
answers[next][0]
answers[next]
answers
answers
next
next
0
queries[i][0]
queries[i]
queries
queries
i
i
0
answers[next][1] != queries[i][1]
answers[next][1]
answers[next]
answers
answers
next
next
1
queries[i][1]
queries[i]
queries
queries
i
i
1
i++
i
i
;
if (i==nqueries) continue;
i==nqueries
i
i
nqueries
nqueries
continue;
if (alens[i]) continue;
alens[i]
alens
alens
i
i
continue;
switch (answers[next][3] & 15) {			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}
answers[next][3] & 15
answers[next][3]
answers[next]
answers
answers
next
next
3
15
{			case 0:			case 3:				break;			case 2:				if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);			default:				continue;			}
case 0:
0
case 3:
3
break;
case 2:
2
if (servfail_retry && servfail_retry--)					sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);
servfail_retry && servfail_retry--
servfail_retry
servfail_retry
servfail_retry--
servfail_retry
servfail_retry
sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl);
sendto(fd, queries[i],						qlens[i], MSG_NOSIGNAL,						(void *)&ns[j], sl)
sendto
sendto
fd
fd
queries[i]
queries
queries
i
i
qlens[i]
qlens
qlens
i
i
MSG_NOSIGNAL
MSG_NOSIGNAL
(void *)&ns[j]
void *
void
*
*
&ns[j]
ns[j]
ns
ns
j
j
sl
sl
default:
continue;
alens[i] = rlen;
alens[i] = rlen
alens[i]
alens
alens
i
i
rlen
rlen
if (i == next)				for (; next<nqueries && alens[next]; next++);			else				memcpy(answers[i], answers[next], rlen);
i == next
i
i
next
next
for (; next<nqueries && alens[next]; next++);
;
next<nqueries && alens[next]
next<nqueries
next
next
nqueries
nqueries
alens[next]
alens
alens
next
next
next++
next
next
;
memcpy(answers[i], answers[next], rlen);
memcpy(answers[i], answers[next], rlen)
memcpy
memcpy
answers[i]
answers
answers
i
i
answers[next]
answers
answers
next
next
rlen
rlen
if (next == nqueries) goto out;
next == nqueries
next
next
nqueries
nqueries
goto out;
out
out:	pthread_cleanup_pop(1);
out
pthread_cleanup_pop(1);
pthread_cleanup_pop(1)
pthread_cleanup_pop
pthread_cleanup_pop
1
return 0;
0
-----joern-----
(68,734,0)
(157,741,0)
(642,637,0)
(199,560,0)
(119,532,0)
(290,631,0)
(756,573,0)
(262,151,0)
(70,85,0)
(108,612,0)
(263,341,0)
(414,142,0)
(234,381,0)
(711,322,0)
(410,525,0)
(306,372,0)
(120,373,0)
(747,106,0)
(58,154,0)
(4,757,0)
(590,623,0)
(394,262,0)
(34,288,0)
(421,563,0)
(531,287,0)
(519,318,0)
(86,667,0)
(189,519,0)
(386,79,0)
(519,106,0)
(261,682,0)
(294,745,0)
(112,694,0)
(12,85,0)
(291,322,0)
(426,171,0)
(727,83,0)
(356,15,0)
(11,526,0)
(592,7,0)
(308,489,0)
(19,348,0)
(582,505,0)
(80,38,0)
(432,145,0)
(198,682,0)
(243,359,0)
(363,33,0)
(197,760,0)
(437,372,0)
(433,456,0)
(139,693,0)
(517,702,0)
(29,184,0)
(344,497,0)
(531,74,0)
(472,554,0)
(94,448,0)
(353,449,0)
(552,179,0)
(720,68,0)
(518,526,0)
(299,669,0)
(295,181,0)
(272,520,0)
(296,588,0)
(473,318,0)
(763,224,0)
(10,85,0)
(619,304,0)
(120,372,0)
(354,143,0)
(755,628,0)
(470,85,0)
(339,397,0)
(329,627,0)
(127,120,0)
(317,745,0)
(435,36,0)
(217,38,0)
(299,337,0)
(114,154,0)
(279,309,0)
(590,119,0)
(652,85,0)
(307,328,0)
(632,68,0)
(604,550,0)
(288,106,0)
(506,679,0)
(121,244,0)
(214,254,0)
(162,38,0)
(728,181,0)
(735,377,0)
(621,85,0)
(53,524,0)
(388,588,0)
(362,202,0)
(711,191,0)
(533,32,0)
(688,468,0)
(493,766,0)
(383,186,0)
(420,186,0)
(160,85,0)
(627,454,0)
(765,317,0)
(529,41,0)
(580,85,0)
(11,665,0)
(183,596,0)
(563,600,0)
(380,374,0)
(128,642,0)
(511,637,0)
(643,565,0)
(662,18,0)
(5,450,0)
(674,256,0)
(549,255,0)
(708,407,0)
(51,624,0)
(391,620,0)
(233,307,0)
(324,709,0)
(25,85,0)
(69,334,0)
(476,20,0)
(502,734,0)
(572,345,0)
(133,372,0)
(60,542,0)
(327,51,0)
(210,228,0)
(419,85,0)
(49,85,0)
(562,755,0)
(250,377,0)
(361,139,0)
(78,372,0)
(569,224,0)
(409,403,0)
(20,85,0)
(646,85,0)
(525,469,0)
(46,317,0)
(289,737,0)
(246,68,0)
(564,450,0)
(535,444,0)
(273,564,0)
(241,68,0)
(764,219,0)
(666,655,0)
(348,2,0)
(514,686,0)
(365,623,0)
(398,219,0)
(346,445,0)
(674,644,0)
(628,563,0)
(494,697,0)
(736,587,0)
(191,711,0)
(345,759,0)
(368,403,0)
(505,106,0)
(576,210,0)
(340,608,0)
(277,151,0)
(681,171,0)
(292,670,0)
(330,85,0)
(219,20,0)
(50,474,0)
(219,83,0)
(365,119,0)
(700,726,0)
(697,494,0)
(391,135,0)
(651,210,0)
(111,696,0)
(115,556,0)
(593,131,0)
(615,742,0)
(424,85,0)
(395,184,0)
(516,426,0)
(569,551,0)
(635,679,0)
(561,372,0)
(570,107,0)
(663,525,0)
(38,162,0)
(554,24,0)
(196,19,0)
(378,397,0)
(626,528,0)
(300,604,0)
(684,306,0)
(609,723,0)
(676,4,0)
(401,147,0)
(381,708,0)
(543,583,0)
(21,255,0)
(40,734,0)
(397,642,0)
(628,573,0)
(4,554,0)
(127,14,0)
(403,154,0)
(17,111,0)
(89,491,0)
(297,304,0)
(407,489,0)
(92,348,0)
(4,206,0)
(377,474,0)
(624,162,0)
(560,577,0)
(404,85,0)
(618,486,0)
(156,7,0)
(35,571,0)
(766,154,0)
(611,449,0)
(164,542,0)
(519,550,0)
(208,111,0)
(667,520,0)
(682,198,0)
(24,554,0)
(104,752,0)
(488,270,0)
(507,15,0)
(593,696,0)
(284,86,0)
(744,372,0)
(504,483,0)
(201,295,0)
(449,244,0)
(7,156,0)
(4,43,0)
(171,106,0)
(4,494,0)
(190,528,0)
(693,85,0)
(750,85,0)
(149,624,0)
(66,20,0)
(660,501,0)
(408,263,0)
(654,190,0)
(513,137,0)
(716,137,0)
(483,418,0)
(510,654,0)
(138,762,0)
(658,393,0)
(366,68,0)
(381,234,0)
(222,573,0)
(754,765,0)
(477,426,0)
(697,596,0)
(47,3,0)
(220,608,0)
(766,131,0)
(673,113,0)
(168,759,0)
(151,262,0)
(100,156,0)
(175,94,0)
(745,181,0)
(438,106,0)
(213,511,0)
(74,154,0)
(252,114,0)
(4,748,0)
(278,145,0)
(145,432,0)
(704,14,0)
(498,404,0)
(683,85,0)
(587,736,0)
(472,238,0)
(137,673,0)
(481,448,0)
(27,382,0)
(558,642,0)
(726,564,0)
(558,88,0)
(195,138,0)
(526,518,0)
(98,162,0)
(606,147,0)
(325,284,0)
(313,424,0)
(634,85,0)
(231,198,0)
(41,186,0)
(452,106,0)
(579,449,0)
(186,302,0)
(610,636,0)
(482,346,0)
(604,300,0)
(759,454,0)
(404,693,0)
(212,505,0)
(45,564,0)
(293,120,0)
(712,208,0)
(736,235,0)
(338,284,0)
(456,433,0)
(556,3,0)
(567,235,0)
(73,171,0)
(379,501,0)
(4,436,0)
(349,551,0)
(434,712,0)
(334,69,0)
(655,469,0)
(274,709,0)
(202,454,0)
(118,184,0)
(107,135,0)
(316,114,0)
(744,104,0)
(75,580,0)
(532,713,0)
(444,693,0)
(393,99,0)
(238,762,0)
(655,154,0)
(500,262,0)
(577,336,0)
(713,726,0)
(409,238,0)
(501,660,0)
(348,92,0)
(113,464,0)
(440,76,0)
(422,262,0)
(585,306,0)
(102,106,0)
(174,59,0)
(568,92,0)
(480,184,0)
(489,407,0)
(530,106,0)
(266,85,0)
(247,591,0)
(265,85,0)
(123,403,0)
(323,394,0)
(306,373,0)
(484,616,0)
(733,85,0)
(104,744,0)
(235,341,0)
(82,68,0)
(298,194,0)
(114,316,0)
(37,131,0)
(607,494,0)
(597,85,0)
(314,263,0)
(336,577,0)
(110,192,0)
(86,284,0)
(665,11,0)
(670,616,0)
(631,290,0)
(74,531,0)
(516,170,0)
(165,234,0)
(762,2,0)
(4,85,0)
(102,390,0)
(647,635,0)
(223,69,0)
(537,397,0)
(693,444,0)
(461,565,0)
(703,592,0)
(465,599,0)
(96,593,0)
(708,381,0)
(173,748,0)
(629,270,0)
(31,316,0)
(267,184,0)
(641,649,0)
(242,677,0)
(739,85,0)
(55,501,0)
(126,78,0)
(702,85,0)
(743,609,0)
(352,85,0)
(590,669,0)
(588,244,0)
(224,569,0)
(4,19,0)
(527,299,0)
(509,424,0)
(166,287,0)
(397,693,0)
(4,201,0)
(211,736,0)
(737,12,0)
(667,86,0)
(605,238,0)
(345,359,0)
(218,451,0)
(303,759,0)
(444,682,0)
(221,524,0)
(442,92,0)
(524,631,0)
(541,76,0)
(358,491,0)
(62,702,0)
(617,628,0)
(490,215,0)
(87,658,0)
(737,289,0)
(661,270,0)
(525,131,0)
(264,411,0)
(397,609,0)
(218,696,0)
(158,92,0)
(525,154,0)
(370,85,0)
(227,644,0)
(732,208,0)
(670,143,0)
(620,391,0)
(740,68,0)
(658,2,0)
(78,373,0)
(3,556,0)
(397,11,0)
(565,758,0)
(596,183,0)
(322,670,0)
(642,649,0)
(263,181,0)
(566,757,0)
(367,451,0)
(3,337,0)
(397,209,0)
(389,133,0)
(731,339,0)
(719,43,0)
(556,669,0)
(233,0,0)
(351,359,0)
(16,569,0)
(486,696,0)
(307,209,0)
(491,469,0)
(29,465,0)
(178,113,0)
(207,0,0)
(153,143,0)
(147,757,0)
(698,295,0)
(145,424,0)
(343,433,0)
(148,221,0)
(612,282,0)
(4,238,0)
(263,314,0)
(614,36,0)
(345,131,0)
(613,59,0)
(431,504,0)
(155,302,0)
(555,504,0)
(88,558,0)
(277,154,0)
(228,210,0)
(307,693,0)
(284,106,0)
(301,516,0)
(29,644,0)
(653,452,0)
(4,760,0)
(712,434,0)
(221,209,0)
(504,174,0)
(91,432,0)
(22,76,0)
(746,450,0)
(534,107,0)
(4,62,0)
(655,666,0)
(583,116,0)
(94,116,0)
(451,201,0)
(371,248,0)
(245,83,0)
(573,483,0)
(679,635,0)
(300,121,0)
(157,328,0)
(307,233,0)
(14,520,0)
(382,154,0)
(393,658,0)
(472,43,0)
(483,616,0)
(307,642,0)
(347,371,0)
(121,300,0)
(680,696,0)
(116,583,0)
(151,277,0)
(93,85,0)
(640,85,0)
(636,610,0)
(544,387,0)
(170,516,0)
(547,282,0)
(16,563,0)
(620,542,0)
(516,301,0)
(472,113,0)
(69,580,0)
(204,111,0)
(238,409,0)
(520,667,0)
(8,434,0)
(433,372,0)
(192,248,0)
(333,590,0)
(232,713,0)
(434,314,0)
(432,580,0)
(687,718,0)
(83,245,0)
(532,608,0)
(57,122,0)
(4,317,0)
(18,690,0)
(568,511,0)
(400,273,0)
(287,531,0)
(487,596,0)
(142,469,0)
(423,86,0)
(392,102,0)
(560,179,0)
(3,577,0)
(741,693,0)
(598,243,0)
(762,138,0)
(4,113,0)
(187,426,0)
(298,154,0)
(447,623,0)
(472,480,0)
(725,131,0)
(317,765,0)
(335,298,0)
(579,179,0)
(38,696,0)
(406,16,0)
(1,198,0)
(523,616,0)
(574,480,0)
(727,139,0)
(384,85,0)
(588,372,0)
(602,365,0)
(316,32,0)
(332,223,0)
(125,448,0)
(225,604,0)
(36,435,0)
(625,693,0)
(548,224,0)
(707,85,0)
(721,337,0)
(311,234,0)
(256,599,0)
(749,469,0)
(565,550,0)
(654,560,0)
(177,655,0)
(375,744,0)
(19,287,0)
(760,404,0)
(84,573,0)
(194,298,0)
(660,690,0)
(715,248,0)
(591,20,0)
(565,571,0)
(286,81,0)
(209,85,0)
(382,141,0)
(163,435,0)
(587,696,0)
(427,309,0)
(184,387,0)
(592,703,0)
(466,413,0)
(404,642,0)
(167,571,0)
(564,670,0)
(201,451,0)
(209,427,0)
(23,433,0)
(223,577,0)
(299,69,0)
(216,760,0)
(655,131,0)
(341,235,0)
(64,623,0)
(275,125,0)
(42,560,0)
(288,372,0)
(451,218,0)
(539,586,0)
(536,372,0)
(426,693,0)
(655,759,0)
(456,588,0)
(494,202,0)
(659,741,0)
(326,119,0)
(260,7,0)
(159,387,0)
(737,558,0)
(415,102,0)
(397,339,0)
(474,377,0)
(337,299,0)
(455,24,0)
(757,453,0)
(171,426,0)
(256,674,0)
(221,666,0)
(726,713,0)
(254,464,0)
(631,524,0)
(672,125,0)
(223,669,0)
(136,489,0)
(426,524,0)
(369,84,0)
(765,486,0)
(67,322,0)
(538,76,0)
(753,273,0)
(144,36,0)
(219,92,0)
(520,14,0)
(328,157,0)
(78,374,0)
(321,531,0)
(575,718,0)
(445,346,0)
(39,660,0)
(664,587,0)
(674,184,0)
(464,454,0)
(365,718,0)
(495,85,0)
(449,579,0)
(342,74,0)
(282,612,0)
(235,736,0)
(668,397,0)
(599,256,0)
(714,288,0)
(478,436,0)
(660,703,0)
(109,609,0)
(553,739,0)
(56,649,0)
(285,194,0)
(748,627,0)
(226,359,0)
(686,472,0)
(751,29,0)
(633,616,0)
(319,569,0)
(193,277,0)
(171,723,0)
(591,85,0)
(542,620,0)
(4,480,0)
(658,122,0)
(145,551,0)
(315,85,0)
(147,606,0)
(565,318,0)
(739,550,0)
(609,571,0)
(726,215,0)
(229,486,0)
(269,68,0)
(426,642,0)
(61,270,0)
(120,127,0)
(21,579,0)
(337,85,0)
(186,79,0)
(636,387,0)
(376,69,0)
(15,244,0)
(322,711,0)
(6,121,0)
(141,382,0)
(54,704,0)
(102,426,0)
(703,660,0)
(429,141,0)
(224,563,0)
(7,592,0)
(448,125,0)
(752,106,0)
(221,148,0)
(3,560,0)
(253,106,0)
(446,148,0)
(162,624,0)
(133,244,0)
(560,69,0)
(691,697,0)
(13,655,0)
(339,571,0)
(606,696,0)
(230,84,0)
(215,726,0)
(287,19,0)
(512,85,0)
(705,85,0)
(452,704,0)
(9,21,0)
(485,747,0)
(251,183,0)
(374,78,0)
(364,270,0)
(590,718,0)
(761,483,0)
(248,192,0)
(622,76,0)
(399,206,0)
(433,550,0)
(302,186,0)
(312,530,0)
(185,12,0)
(695,606,0)
(418,483,0)
(426,102,0)
(748,679,0)
(694,696,0)
(525,759,0)
(649,435,0)
(135,107,0)
(131,85,0)
(436,18,0)
(540,127,0)
(679,748,0)
(90,154,0)
(307,524,0)
(405,85,0)
(346,306,0)
(150,669,0)
(480,644,0)
(558,737,0)
(739,121,0)
(471,696,0)
(172,24,0)
(249,568,0)
(257,568,0)
(729,590,0)
(135,391,0)
(515,218,0)
(638,730,0)
(551,569,0)
(689,245,0)
(385,673,0)
(95,245,0)
(612,85,0)
(699,156,0)
(355,33,0)
(472,494,0)
(320,636,0)
(48,85,0)
(152,712,0)
(609,397,0)
(639,635,0)
(758,565,0)
(14,704,0)
(528,190,0)
(328,307,0)
(188,307,0)
(430,290,0)
(268,452,0)
(569,16,0)
(589,122,0)
(432,69,0)
(738,606,0)
(122,658,0)
(397,524,0)
(272,15,0)
(452,723,0)
(106,372,0)
(701,290,0)
(465,29,0)
(557,62,0)
(377,154,0)
(15,106,0)
(236,518,0)
(239,671,0)
(186,41,0)
(169,674,0)
(71,499,0)
(568,20,0)
(590,424,0)
(146,120,0)
(669,85,0)
(202,362,0)
(650,536,0)
(65,592,0)
(83,219,0)
(744,373,0)
(583,181,0)
(306,346,0)
(503,752,0)
(339,390,0)
(403,409,0)
(12,737,0)
(223,654,0)
(407,708,0)
(240,409,0)
(59,483,0)
(667,374,0)
(374,667,0)
(190,654,0)
(41,85,0)
(675,133,0)
(425,532,0)
(656,298,0)
(262,41,0)
(462,362,0)
(191,670,0)
(591,92,0)
(413,244,0)
(486,765,0)
(280,734,0)
(97,453,0)
(113,673,0)
(432,577,0)
(558,693,0)
(314,434,0)
(677,190,0)
(532,119,0)
(15,272,0)
(472,206,0)
(593,759,0)
(331,299,0)
(77,564,0)
(32,316,0)
(59,174,0)
(345,154,0)
(468,41,0)
(669,590,0)
(757,147,0)
(176,739,0)
(563,628,0)
(467,190,0)
(508,558,0)
(237,78,0)
(141,206,0)
(559,209,0)
(205,587,0)
(233,479,0)
(350,76,0)
(706,544,0)
(584,418,0)
(180,107,0)
(305,81,0)
(594,432,0)
(444,92,0)
(161,472,0)
(83,727,0)
(116,94,0)
(453,181,0)
(318,68,0)
(417,628,0)
(79,186,0)
(657,139,0)
(426,516,0)
(363,690,0)
(479,233,0)
(496,116,0)
(673,137,0)
(472,748,0)
(248,387,0)
(221,304,0)
(492,267,0)
(578,3,0)
(554,591,0)
(522,583,0)
(208,712,0)
(121,739,0)
(439,469,0)
(360,345,0)
(281,382,0)
(284,723,0)
(259,741,0)
(747,550,0)
(99,474,0)
(593,154,0)
(0,233,0)
(444,20,0)
(206,228,0)
(520,272,0)
(258,85,0)
(608,713,0)
(411,742,0)
(460,544,0)
(518,359,0)
(43,363,0)
(203,616,0)
(718,85,0)
(448,94,0)
(139,727,0)
(671,571,0)
(130,616,0)
(124,191,0)
(416,248,0)
(309,427,0)
(33,363,0)
(413,571,0)
(170,491,0)
(741,157,0)
(692,532,0)
(654,223,0)
(103,519,0)
(129,218,0)
(194,43,0)
(174,504,0)
(573,600,0)
(105,744,0)
(458,16,0)
(132,600,0)
(4,519,0)
(586,85,0)
(741,642,0)
(255,579,0)
(228,2,0)
(666,221,0)
(262,394,0)
(206,141,0)
(546,554,0)
(101,444,0)
(752,104,0)
(464,254,0)
(628,755,0)
(341,263,0)
(435,649,0)
(709,85,0)
(443,68,0)
(603,339,0)
(372,85,0)
(724,518,0)
(99,393,0)
(599,465,0)
(472,19,0)
(682,444,0)
(596,697,0)
(387,544,0)
(474,99,0)
(43,194,0)
(505,244,0)
(654,337,0)
(426,209,0)
(26,201,0)
(472,436,0)
(580,69,0)
(72,99,0)
(304,221,0)
(624,51,0)
(357,418,0)
(436,32,0)
(475,413,0)
(630,85,0)
(125,696,0)
(704,452,0)
(52,445,0)
(581,221,0)
(713,450,0)
(161,4,0)
(28,277,0)
(190,677,0)
(156,154,0)
(428,76,0)
(524,2,0)
(44,85,0)
(608,532,0)
(752,373,0)
(644,270,0)
(143,670,0)
(134,183,0)
(457,577,0)
(248,371,0)
(491,170,0)
(521,104,0)
(645,752,0)
(32,436,0)
(14,127,0)
(648,411,0)
(111,208,0)
(742,411,0)
(11,397,0)
(283,511,0)
(200,730,0)
(649,642,0)
(463,62,0)
(310,234,0)
(402,314,0)
(526,11,0)
(685,426,0)
(717,328,0)
(255,21,0)
(678,309,0)
(441,593,0)
(595,223,0)
(590,551,0)
(710,579,0)
(499,387,0)
(459,307,0)
(722,726,0)
(3,69,0)
(304,469,0)
(588,456,0)
(396,747,0)
(427,209,0)
(436,32,1)
(452,106,1)
(593,759,1)
(474,50,1)
(36,614,1)
(94,448,1)
(654,337,1)
(28,348,1)
(753,713,1)
(371,248,1)
(578,145,1)
(667,374,1)
(59,613,1)
(618,229,1)
(161,4,1)
(716,627,1)
(711,322,1)
(415,392,1)
(708,407,1)
(501,379,1)
(477,516,1)
(368,123,1)
(516,170,1)
(16,563,1)
(152,208,1)
(103,189,1)
(593,154,1)
(263,408,1)
(304,297,1)
(345,154,1)
(22,21,1)
(614,144,1)
(381,708,1)
(41,186,1)
(525,154,1)
(472,686,1)
(28,154,1)
(95,219,1)
(223,669,1)
(259,727,1)
(7,260,1)
(293,146,1)
(247,554,1)
(255,579,1)
(19,287,1)
(22,426,1)
(166,531,1)
(748,679,1)
(426,516,1)
(134,464,1)
(372,561,1)
(235,567,1)
(251,134,1)
(388,536,1)
(516,301,1)
(345,359,1)
(426,171,1)
(182,528,1)
(423,284,1)
(205,664,1)
(766,493,1)
(532,713,1)
(163,641,1)
(433,550,1)
(284,325,1)
(354,292,1)
(757,566,1)
(4,494,1)
(703,592,1)
(700,232,1)
(232,564,1)
(371,347,1)
(145,278,1)
(585,684,1)
(307,209,1)
(84,369,1)
(215,490,1)
(39,501,1)
(458,406,1)
(546,24,1)
(628,755,1)
(319,224,1)
(248,192,1)
(409,240,1)
(43,719,1)
(156,154,1)
(609,109,1)
(59,174,1)
(529,612,1)
(14,127,1)
(3,337,1)
(4,519,1)
(714,34,1)
(62,463,1)
(320,387,1)
(599,256,1)
(54,452,1)
(192,110,1)
(254,214,1)
(522,116,1)
(698,201,1)
(752,373,1)
(524,631,1)
(654,223,1)
(74,342,1)
(274,12,1)
(133,372,1)
(658,87,1)
(457,182,1)
(112,30,1)
(261,101,1)
(69,334,1)
(287,166,1)
(446,304,1)
(724,378,1)
(334,376,1)
(583,543,1)
(83,245,1)
(322,291,1)
(146,667,1)
(147,401,1)
(177,469,1)
(673,385,1)
(596,183,1)
(505,244,1)
(210,576,1)
(122,589,1)
(540,120,1)
(4,480,1)
(558,508,1)
(199,413,1)
(655,154,1)
(712,208,1)
(164,60,1)
(3,69,1)
(560,42,1)
(467,677,1)
(141,382,1)
(739,121,1)
(397,642,1)
(639,766,1)
(43,194,1)
(737,289,1)
(3,577,1)
(619,655,1)
(591,20,1)
(329,748,1)
(610,636,1)
(84,573,1)
(219,20,1)
(725,37,1)
(162,38,1)
(142,469,1)
(195,238,1)
(194,298,1)
(307,188,1)
(211,587,1)
(655,13,1)
(220,340,1)
(357,761,1)
(133,675,1)
(671,239,1)
(674,169,1)
(444,682,1)
(279,559,1)
(139,693,1)
(369,230,1)
(4,676,1)
(80,217,1)
(482,306,1)
(226,351,1)
(249,709,1)
(760,197,1)
(588,244,1)
(96,694,1)
(288,372,1)
(494,697,1)
(394,323,1)
(741,642,1)
(694,696,1)
(472,436,1)
(583,116,1)
(656,660,1)
(754,486,1)
(294,317,1)
(397,11,1)
(525,759,1)
(756,222,1)
(726,564,1)
(612,282,1)
(498,760,1)
(544,460,1)
(418,584,1)
(531,74,1)
(79,386,1)
(114,252,1)
(749,439,1)
(549,9,1)
(248,715,1)
(387,544,1)
(356,106,1)
(727,139,1)
(177,142,1)
(657,361,1)
(171,681,1)
(391,135,1)
(308,234,1)
(464,254,1)
(695,583,1)
(539,145,1)
(15,507,1)
(542,164,1)
(624,162,1)
(693,444,1)
(298,154,1)
(277,193,1)
(4,436,1)
(276,525,1)
(765,754,1)
(617,755,1)
(710,560,1)
(631,290,1)
(766,154,1)
(434,712,1)
(129,745,1)
(722,215,1)
(505,106,1)
(702,517,1)
(385,137,1)
(284,106,1)
(763,349,1)
(4,19,1)
(457,63,1)
(401,606,1)
(336,457,1)
(99,72,1)
(311,310,1)
(74,154,1)
(555,613,1)
(267,492,1)
(412,730,1)
(759,168,1)
(218,696,1)
(335,656,1)
(682,198,1)
(126,237,1)
(755,562,1)
(644,227,1)
(55,703,1)
(345,759,1)
(4,760,1)
(271,133,1)
(229,453,1)
(104,744,1)
(406,224,1)
(31,363,1)
(547,108,1)
(628,617,1)
(472,748,1)
(473,519,1)
(377,250,1)
(593,441,1)
(481,125,1)
(403,154,1)
(374,380,1)
(645,503,1)
(507,356,1)
(398,764,1)
(402,434,1)
(218,515,1)
(606,738,1)
(468,688,1)
(604,550,1)
(608,220,1)
(519,106,1)
(7,156,1)
(704,452,1)
(167,35,1)
(299,669,1)
(191,670,1)
(726,215,1)
(715,416,1)
(349,84,1)
(100,742,1)
(584,357,1)
(397,693,1)
(233,479,1)
(114,154,1)
(171,106,1)
(12,737,1)
(404,498,1)
(532,692,1)
(608,713,1)
(92,158,1)
(304,469,1)
(676,586,1)
(151,277,1)
(658,393,1)
(408,341,1)
(636,387,1)
(161,472,1)
(309,678,1)
(14,704,1)
(435,36,1)
(494,607,1)
(735,524,1)
(413,244,1)
(4,748,1)
(429,382,1)
(158,442,1)
(530,106,1)
(413,466,1)
(757,147,1)
(721,580,1)
(137,513,1)
(431,555,1)
(324,274,1)
(272,520,1)
(106,372,1)
(29,751,1)
(327,624,1)
(568,257,1)
(391,620,1)
(751,267,1)
(277,154,1)
(545,151,1)
(323,422,1)
(176,593,1)
(672,275,1)
(519,550,1)
(15,106,1)
(111,696,1)
(342,321,1)
(499,71,1)
(26,451,1)
(486,696,1)
(571,167,1)
(442,19,1)
(706,159,1)
(697,596,1)
(314,434,1)
(579,449,1)
(292,84,1)
(299,69,1)
(521,744,1)
(535,682,1)
(180,151,1)
(476,131,1)
(397,609,1)
(302,155,1)
(196,287,1)
(9,445,1)
(727,83,1)
(175,448,1)
(568,92,1)
(449,244,1)
(460,706,1)
(230,563,1)
(679,506,1)
(365,602,1)
(670,143,1)
(554,24,1)
(739,550,1)
(35,556,1)
(766,131,1)
(83,219,1)
(439,730,1)
(397,339,1)
(604,225,1)
(178,673,1)
(565,571,1)
(227,480,1)
(292,59,1)
(268,653,1)
(389,104,1)
(50,377,1)
(339,390,1)
(299,527,1)
(252,31,1)
(4,43,1)
(569,224,1)
(285,298,1)
(345,131,1)
(575,424,1)
(45,191,1)
(351,758,1)
(432,69,1)
(201,451,1)
(580,69,1)
(638,528,1)
(422,277,1)
(288,714,1)
(425,608,1)
(515,129,1)
(365,718,1)
(742,411,1)
(20,66,1)
(343,588,1)
(298,335,1)
(558,642,1)
(224,563,1)
(316,114,1)
(99,474,1)
(107,570,1)
(666,221,1)
(730,200,1)
(212,272,1)
(748,173,1)
(565,643,1)
(19,196,1)
(64,365,1)
(194,285,1)
(165,365,1)
(397,524,1)
(704,54,1)
(307,233,1)
(221,581,1)
(393,99,1)
(67,124,1)
(413,571,1)
(448,125,1)
(472,494,1)
(262,500,1)
(649,56,1)
(206,399,1)
(457,412,1)
(262,41,1)
(139,657,1)
(765,486,1)
(65,7,1)
(697,691,1)
(686,514,1)
(97,757,1)
(741,659,1)
(504,483,1)
(557,404,1)
(118,610,1)
(17,204,1)
(449,611,1)
(533,316,1)
(396,505,1)
(569,319,1)
(593,696,1)
(331,721,1)
(643,461,1)
(554,546,1)
(104,521,1)
(407,489,1)
(586,539,1)
(472,238,1)
(455,172,1)
(397,209,1)
(208,111,1)
(183,251,1)
(127,120,1)
(16,458,1)
(694,112,1)
(281,762,1)
(591,247,1)
(275,263,1)
(18,662,1)
(233,0,1)
(209,427,1)
(317,46,1)
(688,545,1)
(34,318,1)
(713,726,1)
(365,623,1)
(317,765,1)
(4,62,1)
(145,432,1)
(333,150,1)
(224,548,1)
(290,430,1)
(186,302,1)
(434,8,1)
(0,207,1)
(141,429,1)
(444,535,1)
(102,415,1)
(438,525,1)
(650,456,1)
(536,372,1)
(457,22,1)
(609,723,1)
(596,487,1)
(528,190,1)
(282,547,1)
(145,424,1)
(758,565,1)
(190,654,1)
(86,284,1)
(388,288,1)
(743,537,1)
(127,540,1)
(110,644,1)
(117,381,1)
(339,603,1)
(712,152,1)
(499,387,1)
(565,550,1)
(560,69,1)
(112,295,1)
(63,747,1)
(184,395,1)
(459,741,1)
(98,38,1)
(340,326,1)
(29,184,1)
(116,94,1)
(4,757,1)
(601,505,1)
(741,693,1)
(216,739,1)
(3,560,1)
(655,759,1)
(37,209,1)
(222,59,1)
(187,102,1)
(472,206,1)
(664,314,1)
(51,624,1)
(131,725,1)
(208,732,1)
(487,183,1)
(736,211,1)
(468,41,1)
(752,106,1)
(679,635,1)
(283,213,1)
(356,530,1)
(242,579,1)
(32,533,1)
(157,328,1)
(38,80,1)
(569,16,1)
(568,20,1)
(253,438,1)
(125,672,1)
(613,483,1)
(389,456,1)
(593,131,1)
(701,53,1)
(426,102,1)
(556,3,1)
(527,331,1)
(472,19,1)
(590,551,1)
(669,590,1)
(295,698,1)
(548,763,1)
(432,577,1)
(379,55,1)
(587,696,1)
(505,582,1)
(430,701,1)
(452,723,1)
(699,100,1)
(447,64,1)
(659,259,1)
(320,499,1)
(367,218,1)
(213,642,1)
(72,474,1)
(744,372,1)
(444,20,1)
(145,551,1)
(170,491,1)
(362,462,1)
(4,554,1)
(565,318,1)
(417,421,1)
(506,635,1)
(291,67,1)
(590,729,1)
(115,3,1)
(8,712,1)
(474,377,1)
(480,574,1)
(696,471,1)
(520,14,1)
(15,244,1)
(382,154,1)
(592,65,1)
(377,154,1)
(374,78,1)
(395,118,1)
(300,604,1)
(375,105,1)
(568,511,1)
(426,477,1)
(381,234,1)
(559,718,1)
(451,367,1)
(588,372,1)
(30,51,1)
(509,313,1)
(149,162,1)
(392,171,1)
(156,699,1)
(29,644,1)
(709,324,1)
(121,244,1)
(751,184,1)
(475,571,1)
(151,262,1)
(296,388,1)
(154,90,1)
(32,316,1)
(662,436,1)
(562,417,1)
(176,568,1)
(561,437,1)
(556,669,1)
(125,696,1)
(566,147,1)
(52,346,1)
(198,1,1)
(461,413,1)
(674,644,1)
(611,353,1)
(221,524,1)
(655,131,1)
(532,425,1)
(256,674,1)
(655,469,1)
(558,693,1)
(764,139,1)
(347,248,1)
(692,608,1)
(243,359,1)
(361,693,1)
(591,92,1)
(451,218,1)
(78,372,1)
(726,722,1)
(91,577,1)
(747,550,1)
(202,362,1)
(572,360,1)
(486,618,1)
(33,355,1)
(463,557,1)
(441,96,1)
(747,485,1)
(307,524,1)
(466,475,1)
(663,410,1)
(306,372,1)
(556,115,1)
(606,696,1)
(326,273,1)
(136,308,1)
(102,390,1)
(414,666,1)
(518,236,1)
(518,359,1)
(444,92,1)
(239,345,1)
(539,271,1)
(420,529,1)
(504,431,1)
(238,605,1)
(365,119,1)
(42,199,1)
(399,141,1)
(238,409,1)
(57,393,1)
(235,736,1)
(590,424,1)
(314,402,1)
(38,696,1)
(573,483,1)
(262,394,1)
(729,333,1)
(264,371,1)
(157,741,1)
(77,45,1)
(360,243,1)
(89,187,1)
(341,235,1)
(382,27,1)
(143,153,1)
(66,476,1)
(681,73,1)
(27,281,1)
(469,749,1)
(595,510,1)
(525,469,1)
(346,482,1)
(532,608,1)
(673,137,1)
(424,509,1)
(223,69,1)
(328,717,1)
(191,124,1)
(397,668,1)
(383,79,1)
(378,339,1)
(4,113,1)
(78,373,1)
(242,556,1)
(503,288,1)
(457,276,1)
(259,511,1)
(51,327,1)
(472,113,1)
(60,135,1)
(23,343,1)
(380,78,1)
(605,409,1)
(647,639,1)
(421,573,1)
(272,15,1)
(732,111,1)
(563,628,1)
(432,594,1)
(691,596,1)
(288,106,1)
(101,625,1)
(426,524,1)
(133,244,1)
(345,572,1)
(411,648,1)
(189,440,1)
(745,294,1)
(457,601,1)
(121,6,1)
(172,759,1)
(491,358,1)
(403,368,1)
(489,136,1)
(671,571,1)
(165,191,1)
(517,62,1)
(590,623,1)
(225,553,1)
(718,687,1)
(560,577,1)
(615,411,1)
(744,375,1)
(684,747,1)
(433,372,1)
(465,29,1)
(577,336,1)
(742,615,1)
(514,157,1)
(636,320,1)
(537,345,1)
(731,609,1)
(56,435,1)
(28,371,1)
(4,206,1)
(602,119,1)
(551,569,1)
(678,279,1)
(492,465,1)
(4,317,1)
(452,268,1)
(165,623,1)
(762,138,1)
(752,645,1)
(153,354,1)
(223,577,1)
(525,131,1)
(188,233,1)
(260,156,1)
(589,57,1)
(338,374,1)
(456,588,1)
(576,651,1)
(590,718,1)
(658,122,1)
(536,650,1)
(174,504,1)
(168,303,1)
(346,306,1)
(491,469,1)
(273,564,1)
(219,92,1)
(248,387,1)
(206,141,1)
(530,312,1)
(21,255,1)
(592,7,1)
(185,157,1)
(660,501,1)
(582,212,1)
(496,94,1)
(480,184,1)
(1,231,1)
(204,51,1)
(169,29,1)
(28,18,1)
(534,180,1)
(660,39,1)
(21,579,1)
(642,649,1)
(297,619,1)
(318,473,1)
(590,119,1)
(567,736,1)
(200,638,1)
(508,185,1)
(221,304,1)
(747,106,1)
(75,372,1)
(525,663,1)
(653,127,1)
(426,642,1)
(475,671,1)
(689,95,1)
(90,58,1)
(186,79,1)
(240,403,1)
(358,89,1)
(416,192,1)
(58,140,1)
(13,177,1)
(519,103,1)
(339,571,1)
(87,122,1)
(284,723,1)
(106,253,1)
(440,445,1)
(121,300,1)
(321,228,1)
(674,184,1)
(623,447,1)
(28,117,1)
(386,420,1)
(426,693,1)
(500,394,1)
(22,445,1)
(4,238,1)
(135,107,1)
(306,373,1)
(190,677,1)
(553,176,1)
(448,481,1)
(234,311,1)
(648,264,1)
(21,9,1)
(719,194,1)
(337,299,1)
(255,549,1)
(267,184,1)
(148,446,1)
(620,542,1)
(47,578,1)
(493,468,1)
(456,433,1)
(355,43,1)
(511,283,1)
(250,735,1)
(325,338,1)
(603,731,1)
(73,685,1)
(147,606,1)
(312,272,1)
(239,758,1)
(278,432,1)
(159,381,1)
(328,307,1)
(404,693,1)
(453,97,1)
(172,766,1)
(109,743,1)
(666,655,1)
(667,86,1)
(123,658,1)
(214,113,1)
(71,610,1)
(602,273,1)
(472,43,1)
(736,587,1)
(108,20,1)
(91,337,1)
(624,149,1)
(120,293,1)
(520,667,1)
(237,15,1)
(263,314,1)
(410,666,1)
(231,261,1)
(3,47,1)
(6,300,1)
(144,163,1)
(427,309,1)
(426,209,1)
(116,496,1)
(4,201,1)
(627,329,1)
(609,571,1)
(201,26,1)
(581,148,1)
(140,41,1)
(685,21,1)
(128,727,1)
(472,554,1)
(625,591,1)
(245,689,1)
(287,531,1)
(292,551,1)
(641,128,1)
(78,126,1)
(363,33,1)
(207,459,1)
(124,670,1)
(102,106,1)
(142,414,1)
(651,206,1)
(462,494,1)
(53,742,1)
(303,202,1)
(737,558,1)
(219,398,1)
(104,752,1)
(173,679,1)
(243,598,1)
(635,647,1)
(598,397,1)
(587,205,1)
(162,98,1)
(360,359,1)
(564,670,1)
(105,752,1)
(564,77,1)
(594,91,1)
(588,296,1)
(353,710,1)
(558,88,1)
(761,391,1)
(485,396,1)
(404,642,1)
(332,595,1)
(59,483,1)
(11,526,1)
(465,599,1)
(436,478,1)
(400,753,1)
(228,210,1)
(573,756,1)
(94,175,1)
(155,383,1)
(120,373,1)
(526,518,1)
(654,560,1)
(193,28,1)
(668,11,1)
(744,373,1)
(490,700,1)
(628,573,1)
(574,465,1)
(626,190,1)
(217,593,1)
(680,568,1)
(528,626,1)
(191,711,1)
(445,346,1)
(437,669,1)
(138,195,1)
(649,435,1)
(113,673,1)
(223,332,1)
(46,765,1)
(111,17,1)
(376,75,1)
(171,723,1)
(165,391,1)
(545,140,1)
(221,148,1)
(24,455,1)
(738,695,1)
(717,307,1)
(432,580,1)
(96,696,1)
(184,387,1)
(510,467,1)
(472,480,1)
(221,209,1)
(687,575,1)
(306,585,1)
(273,400,1)
(307,693,1)
(433,23,1)
(543,522,1)
(471,680,1)
(322,670,1)
(478,32,1)
(257,249,1)
(493,545,1)
(86,423,1)
(119,532,1)
(677,242,1)
(113,178,1)
(457,133,1)
(607,697,1)
(348,92,1)
(675,389,1)
(513,716,1)
(120,372,1)
(150,702,1)
(307,642,1)
(263,341,1)
(197,216,1)
(359,226,1)
(236,724,1)
(11,665,1)
(660,703,1)
(570,534,1)
(310,165,1)
(483,418,1)
(409,403,1)
(445,52,1)
(184,381,2)
(228,742,2)
(618,51,2)
(513,766,2)
(699,742,2)
(372,157,2)
(143,391,2)
(689,219,2)
(268,667,2)
(91,528,2)
(345,345,2)
(543,51,2)
(168,766,2)
(472,238,2)
(602,191,2)
(395,381,2)
(248,381,2)
(560,577,2)
(506,766,2)
(620,135,2)
(336,445,2)
(360,758,2)
(230,59,2)
(180,151,2)
(201,451,2)
(191,670,2)
(475,413,2)
(29,184,2)
(135,107,2)
(393,99,2)
(278,525,2)
(693,444,2)
(444,20,2)
(136,234,2)
(474,377,2)
(233,0,2)
(178,766,2)
(565,571,2)
(700,191,2)
(278,157,2)
(465,599,2)
(524,742,2)
(669,157,2)
(339,571,2)
(102,106,2)
(326,273,2)
(223,669,2)
(457,747,2)
(147,606,2)
(688,545,2)
(676,157,2)
(104,288,2)
(202,766,2)
(505,525,2)
(598,345,2)
(285,742,2)
(3,560,2)
(156,154,2)
(50,742,2)
(332,145,2)
(542,135,2)
(215,191,2)
(655,666,2)
(631,742,2)
(403,154,2)
(426,693,2)
(670,391,2)
(91,157,2)
(557,157,2)
(444,92,2)
(577,747,2)
(94,448,2)
(127,120,2)
(608,713,2)
(544,381,2)
(681,21,2)
(599,29,2)
(562,59,2)
(510,145,2)
(354,391,2)
(35,556,2)
(432,157,2)
(593,593,2)
(477,21,2)
(272,272,2)
(745,51,2)
(457,445,2)
(251,766,2)
(572,345,2)
(433,550,2)
(171,723,2)
(765,51,2)
(466,413,2)
(336,525,2)
(15,106,2)
(594,445,2)
(580,157,2)
(296,456,2)
(532,713,2)
(274,157,2)
(249,157,2)
(463,157,2)
(75,157,2)
(556,669,2)
(456,433,2)
(551,569,2)
(727,83,2)
(666,221,2)
(764,139,2)
(341,235,2)
(388,456,2)
(218,696,2)
(245,219,2)
(345,154,2)
(151,151,2)
(74,154,2)
(142,666,2)
(573,483,2)
(748,679,2)
(42,556,2)
(672,51,2)
(162,593,2)
(577,336,2)
(319,224,2)
(109,345,2)
(673,766,2)
(430,742,2)
(91,505,2)
(574,381,2)
(593,696,2)
(116,51,2)
(520,667,2)
(654,560,2)
(281,742,2)
(114,742,2)
(391,135,2)
(193,151,2)
(475,556,2)
(567,51,2)
(516,301,2)
(177,730,2)
(120,373,2)
(278,747,2)
(564,191,2)
(609,571,2)
(95,219,2)
(647,766,2)
(207,741,2)
(522,51,2)
(250,742,2)
(29,644,2)
(316,742,2)
(755,59,2)
(55,742,2)
(208,111,2)
(339,390,2)
(78,15,2)
(345,131,2)
(712,51,2)
(111,696,2)
(417,59,2)
(761,391,2)
(184,387,2)
(359,758,2)
(649,435,2)
(159,381,2)
(426,642,2)
(133,372,2)
(719,742,2)
(4,238,2)
(517,157,2)
(654,223,2)
(371,381,2)
(407,489,2)
(660,501,2)
(558,157,2)
(558,642,2)
(524,631,2)
(345,758,2)
(307,642,2)
(224,563,2)
(499,387,2)
(51,624,2)
(536,372,2)
(572,758,2)
(29,381,2)
(594,730,2)
(287,742,2)
(113,766,2)
(13,730,2)
(219,20,2)
(54,667,2)
(206,742,2)
(222,59,2)
(278,133,2)
(277,151,2)
(381,708,2)
(581,655,2)
(441,593,2)
(121,244,2)
(4,748,2)
(744,288,2)
(377,742,2)
(102,21,2)
(520,14,2)
(71,610,2)
(347,381,2)
(604,550,2)
(337,299,2)
(145,133,2)
(129,51,2)
(607,766,2)
(593,154,2)
(221,524,2)
(145,525,2)
(137,766,2)
(558,88,2)
(483,418,2)
(442,742,2)
(3,69,2)
(401,51,2)
(337,157,2)
(339,345,2)
(655,154,2)
(322,670,2)
(402,51,2)
(38,593,2)
(468,545,2)
(186,302,2)
(698,51,2)
(145,505,2)
(569,84,2)
(416,381,2)
(620,542,2)
(106,372,2)
(398,139,2)
(288,445,2)
(200,528,2)
(532,608,2)
(397,524,2)
(94,51,2)
(593,131,2)
(65,742,2)
(120,667,2)
(21,579,2)
(591,20,2)
(669,590,2)
(4,43,2)
(349,84,2)
(527,157,2)
(277,154,2)
(358,21,2)
(232,191,2)
(19,742,2)
(438,525,2)
(595,145,2)
(743,345,2)
(561,157,2)
(457,528,2)
(433,588,2)
(666,666,2)
(191,391,2)
(451,51,2)
(220,273,2)
(229,51,2)
(756,59,2)
(489,234,2)
(58,140,2)
(590,551,2)
(92,742,2)
(219,139,2)
(307,693,2)
(601,505,2)
(11,345,2)
(456,288,2)
(457,730,2)
(706,381,2)
(577,730,2)
(151,140,2)
(170,21,2)
(459,741,2)
(560,69,2)
(472,554,2)
(519,106,2)
(145,747,2)
(253,525,2)
(587,696,2)
(307,233,2)
(503,288,2)
(389,445,2)
(413,413,2)
(472,157,2)
(480,184,2)
(667,86,2)
(530,272,2)
(193,140,2)
(171,106,2)
(406,224,2)
(306,747,2)
(387,544,2)
(465,465,2)
(696,568,2)
(125,51,2)
(328,307,2)
(737,289,2)
(498,157,2)
(300,157,2)
(174,613,2)
(163,727,2)
(519,445,2)
(585,747,2)
(118,381,2)
(14,667,2)
(329,766,2)
(214,766,2)
(752,373,2)
(499,610,2)
(666,655,2)
(713,191,2)
(432,445,2)
(472,480,2)
(239,413,2)
(141,742,2)
(472,43,2)
(412,730,2)
(673,137,2)
(722,191,2)
(238,409,2)
(566,51,2)
(452,106,2)
(766,131,2)
(64,365,2)
(516,21,2)
(568,157,2)
(47,145,2)
(729,157,2)
(592,7,2)
(445,346,2)
(464,766,2)
(284,15,2)
(432,525,2)
(422,277,2)
(96,593,2)
(588,244,2)
(594,133,2)
(314,434,2)
(190,654,2)
(291,124,2)
(624,593,2)
(275,51,2)
(468,41,2)
(560,556,2)
(436,32,2)
(410,730,2)
(593,568,2)
(703,742,2)
(334,157,2)
(127,667,2)
(106,525,2)
(77,191,2)
(153,391,2)
(533,742,2)
(145,424,2)
(739,121,2)
(491,21,2)
(391,151,2)
(262,41,2)
(14,127,2)
(238,742,2)
(452,667,2)
(365,623,2)
(434,712,2)
(643,413,2)
(694,696,2)
(568,20,2)
(4,113,2)
(762,742,2)
(263,314,2)
(747,550,2)
(98,593,2)
(583,51,2)
(119,273,2)
(414,666,2)
(56,727,2)
(133,244,2)
(727,139,2)
(256,29,2)
(431,613,2)
(26,51,2)
(235,51,2)
(448,125,2)
(343,588,2)
(648,371,2)
(288,106,2)
(32,742,2)
(102,390,2)
(624,162,2)
(208,51,2)
(169,29,2)
(4,157,2)
(496,51,2)
(99,742,2)
(426,171,2)
(322,124,2)
(671,413,2)
(610,636,2)
(325,15,2)
(164,135,2)
(97,51,2)
(307,524,2)
(385,766,2)
(439,730,2)
(411,371,2)
(766,154,2)
(353,556,2)
(104,752,2)
(23,588,2)
(571,556,2)
(121,300,2)
(528,145,2)
(248,387,2)
(651,742,2)
(73,21,2)
(196,742,2)
(485,505,2)
(747,505,2)
(283,727,2)
(549,9,2)
(642,649,2)
(69,157,2)
(391,620,2)
(536,456,2)
(294,51,2)
(221,209,2)
(53,742,2)
(263,341,2)
(526,345,2)
(765,486,2)
(248,192,2)
(333,157,2)
(112,593,2)
(323,277,2)
(456,456,2)
(568,511,2)
(336,730,2)
(331,157,2)
(748,766,2)
(154,140,2)
(491,469,2)
(534,151,2)
(532,273,2)
(577,505,2)
(86,15,2)
(316,114,2)
(4,317,2)
(432,730,2)
(569,224,2)
(612,282,2)
(504,483,2)
(278,528,2)
(426,516,2)
(87,742,2)
(0,741,2)
(758,565,2)
(635,766,2)
(641,727,2)
(432,580,2)
(590,157,2)
(614,727,2)
(4,519,2)
(456,588,2)
(397,609,2)
(714,445,2)
(404,693,2)
(190,145,2)
(531,74,2)
(11,526,2)
(60,135,2)
(14,704,2)
(563,628,2)
(599,256,2)
(653,667,2)
(666,730,2)
(744,373,2)
(86,284,2)
(209,427,2)
(437,157,2)
(427,309,2)
(741,642,2)
(751,465,2)
(341,51,2)
(377,154,2)
(262,277,2)
(365,119,2)
(133,445,2)
(494,697,2)
(379,742,2)
(145,730,2)
(426,209,2)
(365,191,2)
(304,655,2)
(594,528,2)
(45,191,2)
(138,742,2)
(28,151,2)
(472,494,2)
(287,531,2)
(435,727,2)
(631,290,2)
(530,106,2)
(156,742,2)
(606,51,2)
(760,157,2)
(166,742,2)
(565,550,2)
(4,436,2)
(555,613,2)
(213,727,2)
(615,371,2)
(435,36,2)
(757,147,2)
(674,184,2)
(457,133,2)
(518,359,2)
(423,15,2)
(636,381,2)
(628,59,2)
(457,525,2)
(721,157,2)
(603,345,2)
(645,288,2)
(516,170,2)
(378,345,2)
(145,432,2)
(262,394,2)
(146,667,2)
(703,592,2)
(16,563,2)
(606,696,2)
(148,655,2)
(483,391,2)
(174,504,2)
(397,345,2)
(299,69,2)
(338,15,2)
(400,191,2)
(397,11,2)
(336,133,2)
(189,445,2)
(271,133,2)
(679,766,2)
(697,766,2)
(183,766,2)
(656,742,2)
(708,407,2)
(577,445,2)
(224,84,2)
(233,741,2)
(328,741,2)
(263,51,2)
(4,480,2)
(205,51,2)
(194,298,2)
(374,15,2)
(84,59,2)
(531,742,2)
(577,133,2)
(254,766,2)
(4,62,2)
(448,51,2)
(480,381,2)
(115,145,2)
(363,742,2)
(13,666,2)
(103,445,2)
(356,272,2)
(43,742,2)
(134,766,2)
(51,593,2)
(749,730,2)
(590,424,2)
(12,157,2)
(6,157,2)
(548,84,2)
(627,766,2)
(191,711,2)
(467,145,2)
(726,215,2)
(320,381,2)
(737,558,2)
(451,218,2)
(150,157,2)
(240,742,2)
(604,157,2)
(360,345,2)
(397,209,2)
(303,766,2)
(432,133,2)
(583,116,2)
(520,15,2)
(460,381,2)
(381,151,2)
(394,277,2)
(278,505,2)
(539,157,2)
(141,382,2)
(556,145,2)
(122,742,2)
(569,16,2)
(426,524,2)
(593,759,2)
(188,741,2)
(72,742,2)
(617,59,2)
(293,667,2)
(623,365,2)
(658,742,2)
(299,669,2)
(487,766,2)
(223,577,2)
(397,642,2)
(662,742,2)
(165,151,2)
(481,51,2)
(711,322,2)
(299,157,2)
(371,248,2)
(120,372,2)
(472,113,2)
(99,474,2)
(590,623,2)
(375,288,2)
(664,51,2)
(609,723,2)
(171,21,2)
(4,206,2)
(511,727,2)
(413,244,2)
(355,742,2)
(57,742,2)
(611,556,2)
(735,742,2)
(636,610,2)
(393,742,2)
(335,742,2)
(242,145,2)
(741,693,2)
(554,24,2)
(32,316,2)
(636,387,2)
(273,564,2)
(16,224,2)
(403,742,2)
(173,766,2)
(7,742,2)
(717,741,2)
(650,456,2)
(74,742,2)
(674,644,2)
(540,667,2)
(525,730,2)
(590,119,2)
(553,157,2)
(78,372,2)
(310,151,2)
(15,272,2)
(446,655,2)
(413,556,2)
(588,372,2)
(658,122,2)
(376,157,2)
(589,742,2)
(472,748,2)
(346,306,2)
(407,234,2)
(440,445,2)
(685,21,2)
(357,391,2)
(306,373,2)
(709,157,2)
(753,191,2)
(336,528,2)
(234,151,2)
(297,655,2)
(304,469,2)
(692,608,2)
(162,38,2)
(507,525,2)
(472,436,2)
(461,413,2)
(397,339,2)
(62,157,2)
(526,518,2)
(78,373,2)
(267,465,2)
(747,106,2)
(3,337,2)
(514,157,2)
(157,328,2)
(563,59,2)
(739,157,2)
(609,345,2)
(613,391,2)
(404,642,2)
(356,525,2)
(221,148,2)
(267,184,2)
(17,51,2)
(41,186,2)
(144,727,2)
(462,766,2)
(125,696,2)
(472,19,2)
(469,730,2)
(22,445,2)
(444,682,2)
(308,234,2)
(105,288,2)
(175,51,2)
(336,747,2)
(447,365,2)
(682,198,2)
(176,157,2)
(667,15,2)
(8,51,2)
(59,174,2)
(235,736,2)
(185,157,2)
(409,742,2)
(396,505,2)
(658,393,2)
(12,737,2)
(210,742,2)
(195,742,2)
(587,51,2)
(716,766,2)
(579,449,2)
(432,505,2)
(704,667,2)
(186,79,2)
(525,469,2)
(584,391,2)
(408,51,2)
(465,29,2)
(59,391,2)
(655,730,2)
(21,255,2)
(752,106,2)
(243,345,2)
(139,693,2)
(486,51,2)
(418,391,2)
(605,742,2)
(445,747,2)
(91,525,2)
(187,21,2)
(96,568,2)
(121,157,2)
(63,747,2)
(292,391,2)
(272,525,2)
(588,456,2)
(89,21,2)
(649,727,2)
(382,742,2)
(340,273,2)
(110,381,2)
(758,413,2)
(670,143,2)
(639,766,2)
(759,766,2)
(3,577,2)
(663,730,2)
(675,445,2)
(594,525,2)
(426,21,2)
(464,254,2)
(83,139,2)
(336,505,2)
(365,718,2)
(457,505,2)
(27,742,2)
(466,556,2)
(345,359,2)
(225,157,2)
(505,244,2)
(28,140,2)
(362,766,2)
(441,568,2)
(490,191,2)
(284,723,2)
(712,208,2)
(368,742,2)
(52,747,2)
(145,551,2)
(111,51,2)
(551,84,2)
(107,151,2)
(582,525,2)
(4,554,2)
(91,730,2)
(592,742,2)
(449,244,2)
(565,318,2)
(558,693,2)
(7,156,2)
(211,51,2)
(482,747,2)
(46,51,2)
(19,287,2)
(679,635,2)
(392,21,2)
(415,21,2)
(170,491,2)
(83,245,2)
(317,765,2)
(486,696,2)
(298,742,2)
(596,183,2)
(255,579,2)
(219,92,2)
(3,145,2)
(34,445,2)
(452,723,2)
(100,742,2)
(142,469,2)
(474,742,2)
(237,15,2)
(736,51,2)
(515,51,2)
(226,758,2)
(284,106,2)
(738,51,2)
(594,157,2)
(190,677,2)
(126,15,2)
(521,288,2)
(11,665,2)
(199,556,2)
(594,505,2)
(525,131,2)
(591,92,2)
(608,273,2)
(369,59,2)
(307,209,2)
(425,608,2)
(744,372,2)
(145,445,2)
(117,381,2)
(432,69,2)
(91,747,2)
(91,445,2)
(197,157,2)
(15,244,2)
(697,596,2)
(80,593,2)
(296,288,2)
(221,304,2)
(453,51,2)
(518,345,2)
(686,157,2)
(21,445,2)
(30,51,2)
(731,345,2)
(628,755,2)
(763,84,2)
(9,445,2)
(577,525,2)
(128,727,2)
(387,381,2)
(157,741,2)
(90,140,2)
(660,742,2)
(298,154,2)
(596,766,2)
(380,15,2)
(695,51,2)
(739,550,2)
(145,157,2)
(135,151,2)
(762,138,2)
(227,381,2)
(39,742,2)
(324,157,2)
(346,747,2)
(288,372,2)
(201,51,2)
(594,747,2)
(367,51,2)
(409,403,2)
(233,479,2)
(397,693,2)
(684,747,2)
(691,766,2)
(345,759,2)
(694,593,2)
(243,359,2)
(314,51,2)
(751,381,2)
(752,288,2)
(124,391,2)
(152,51,2)
(4,757,2)
(113,673,2)
(655,131,2)
(556,3,2)
(626,145,2)
(671,571,2)
(321,742,2)
(465,381,2)
(311,151,2)
(434,51,2)
(192,381,2)
(713,726,2)
(33,742,2)
(754,51,2)
(708,234,2)
(564,670,2)
(4,201,2)
(449,556,2)
(295,51,2)
(158,742,2)
(399,742,2)
(59,483,2)
(272,520,2)
(654,337,2)
(492,465,2)
(363,33,2)
(256,674,2)
(660,703,2)
(177,666,2)
(668,345,2)
(202,362,2)
(273,191,2)
(278,445,2)
(161,472,2)
(104,744,2)
(4,19,2)
(218,51,2)
(116,94,2)
(736,587,2)
(494,766,2)
(161,4,2)
(114,154,2)
(404,157,2)
(710,556,2)
(471,568,2)
(342,742,2)
(351,758,2)
(644,381,2)
(421,59,2)
(432,577,2)
(278,730,2)
(182,528,2)
(436,742,2)
(318,445,2)
(272,15,2)
(568,92,2)
(724,345,2)
(147,51,2)
(123,742,2)
(677,145,2)
(757,51,2)
(91,133,2)
(654,145,2)
(588,288,2)
(167,556,2)
(327,593,2)
(525,759,2)
(432,528,2)
(704,452,2)
(36,727,2)
(628,573,2)
(382,154,2)
(426,102,2)
(151,277,2)
(276,525,2)
(221,655,2)
(236,345,2)
(674,29,2)
(277,140,2)
(433,372,2)
(228,210,2)
(715,381,2)
(320,610,2)
(610,381,2)
(573,59,2)
(67,124,2)
(528,190,2)
(31,742,2)
(508,157,2)
(69,334,2)
(223,69,2)
(730,528,2)
(312,272,2)
(580,69,2)
(348,742,2)
(119,532,2)
(501,742,2)
(381,234,2)
(577,528,2)
(306,372,2)
(307,741,2)
(680,568,2)
(38,696,2)
(260,742,2)
(732,51,2)
(576,742,2)
(264,371,2)
(590,718,2)
(742,371,2)
(29,465,2)
(206,141,2)
(212,525,2)
(505,106,2)
(18,742,2)
(388,288,2)
(151,262,2)
(737,157,2)
(638,528,2)
(610,610,2)
(565,413,2)
(348,92,2)
(579,556,2)
(149,593,2)
(204,51,2)
(570,151,2)
(458,224,2)
(507,272,2)
(300,604,2)
(252,742,2)
(726,564,2)
(83,219,2)
(702,157,2)
(4,760,2)
(84,573,2)
(655,469,2)
(726,191,2)
(43,194,2)
(578,145,2)
(537,345,2)
(257,157,2)
(500,277,2)
(667,374,2)
(519,550,2)
(145,528,2)
(504,613,2)
(619,655,2)
(223,145,2)
(194,742,2)
(472,206,2)
(473,445,2)
(711,124,2)
(525,154,2)
(216,157,2)
(217,593,2)
(742,411,2)
(586,157,2)
(4,494,2)
(374,78,2)
(701,742,2)
(15,525,2)
(255,9,2)
(478,742,2)
(432,747,2)
(290,742,2)
(413,571,2)
(429,742,2)
(655,759,2)
(642,727,2)
(317,51,2)
-----------------------------------
(0,&sa)
(1,SOCK_NONBLOCK)
(2,)
(3,t2-t1)
(4,return 0;)
(5,if (!attempts)
(6,nqueries)
(7,ns[nns].sin)
(8,s6_addr)
(9,servfail_retry)
(10,fd)
(11,(void *)
(12,pthread_cleanup_push(cleanup, (void *)
(13,nns)
(14,answers[next][1] != queries[i][1])
(15,i<nqueries)
(16,x*1000)
(17,i)
(18,ns[nns++].sin.sin_family = AF_INET)
(19,ns[nns++].sin6.sin6_family)
(20,family = AF_INET)
(21,servfail_retry && servfail_retry--)
(22,continue;)
(23,next)
(24,sa.sin)
(25,timeout)
(26,sin6_scope_id)
(27,nns)
(28,nns)
(29,*z)
(30,continue;)
(31,ns)
(32,ns[nns++].sin)
(33,htons(53)
(34,i)
(35,i)
(36,SOCK_CLOEXEC|SOCK_NONBLOCK)
(37,nns)
(38,ns[i])
(39,4)
(40,if (poll(&pfd, 1, t1+retry_interval-t2)
(41,f = __fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
(42,t2)
(43,ns[nns].sin.sin_port)
(44,cs)
(45,p)
(46,sin6_flowinfo)
(47,t1)
(48,z)
(49,if (f)
(50,sin6)
(51,ns[i].sin.sin_family != AF_INET)
(52,15)
(53,sl)
(54,1)
(55,iplit)
(56,0)
(57,iplit)
(58,nns)
(59,p && isdigit(p[8])
(60,line)
(61,if (strncmp(line, "nameserver", 10)
(62,pfd.events)
(63,continue;)
(64,attempts)
(65,sin_addr)
(66,AF_INET)
(67,p)
(68,)
(69,t2 = mtime()
(70,rlen)
(71,s)
(72,sin6_addr)
(73,queries)
(74,nns++)
(75,t0)
(76,)
(77,9)
(78,answers[next])
(79,&_f)
(80,i)
(81,)
(82,for (i=next; i<nqueries && (\n\\n\\t\\t\\t\\tanswers[next][0] != queries[i][0] ||\n\\n\\t\\t\\t\\tanswers[next][1] != queries[i][1] )
(83,family == AF_INET6 && errno == EAFNOSUPPORT)
(84,z != p)
(85,)
(86,queries[i][0])
(87,16)
(88,intptr_t)
(89,ns)
(90,0)
(91,t2)
(92,family = AF_INET6)
(93,retry_interval)
(94,ns[i].sin6.sin6_addr)
(95,errno)
(96,i)
(97,AF_INET6)
(98,sin)
(99,ns[nns].sin6.sin6_addr)
(100,ns)
(101,family)
(102,qlens[i])
(103,i)
(104,memcpy(answers[i], answers[next], rlen)
(105,answers)
(106,i=next)
(107,strncmp(line, "options", 7)
(108,PTHREAD_CANCEL_DISABLE)
(109,i)
(110,iplit)
(111,ns[i])
(112,i)
(113,ns[0].sin.sin_port)
(114,nns++)
(115,retry_interval)
(116,ns[i].sin6.sin6_addr.s6_addr)
(117,continue;)
(118,z)
(119,attempts = x < 10 ? x : 10)
(120,answers[next])
(121,sizeof *alens * nqueries)
(122,iplit.addr)
(123,ns)
(124,p)
(125,ns[i])
(126,next)
(127,answers[next][1])
(128,fd)
(129,ns)
(130,z)
(131,nns = 0)
(132,if (z != p)
(133,next == nqueries)
(134,ns)
(135,!strncmp(line, "options", 7)
(136,10)
(137,ns[0])
(138,htons(53)
(139,fd < 0)
(140,f)
(141,ns[nns].sin6)
(142,j++)
(143,strstr(line, "attempts:")
(144,SOCK_CLOEXEC)
(145,t2-t0 < timeout)
(146,answers)
(147,ns[i].sin6)
(148,&sa)
(149,sin_family)
(150,retry_interval)
(151,nns<3 && fgets(line, sizeof line, f)
(152,sin6_addr)
(153,"attempts:")
(154,nns=0)
(155,_buf)
(156,ns[nns])
(157,fd < 0 || bind(fd, (void *)
(158,AF_INET6)
(159,s)
(160,_buf)
(161,RET)
(162,ns[i].sin)
(163,SOCK_DGRAM)
(164,7)
(165,line)
(166,sin6)
(167,0)
(168,1)
(169,z)
(170,&ns[j])
(171,queries[i])
(172,sa)
(173,sin_family)
(174,isdigit(p[8])
(175,sin6_addr)
(176,alens)
(177,j)
(178,sin_port)
(179,)
(180,line)
(181,)
(182,continue;)
(183,ns[0])
(184,z=s)
(185,cleanup)
(186,__fopen_rb_ca("/etc/resolv.conf", &_f, _buf, sizeof _buf)
(187,MSG_NOSIGNAL)
(188,sl)
(189,alens)
(190,poll(&pfd, 1, t1+retry_interval-t2)
(191,p && isdigit(p[9])
(192,&iplit)
(193,3)
(194,ns[nns].sin)
(195,53)
(196,sin6_family)
(197,fd)
(198,SOCK_CLOEXEC|SOCK_NONBLOCK)
(199,t1)
(200,4)
(201,ns[i].sin6.sin6_scope_id)
(202,ns[0].sin.sin_addr.s_addr = htonl(0x7f000001)
(203,x)
(204,ns)
(205,i)
(206,ns[nns].sin6.sin6_scope_id)
(207,sa)
(208,ns[i].sin6)
(209,sl = sizeof sa.sin)
(210,iplit.scopeid)
(211,sin)
(212,i)
(213,family)
(214,53)
(215,&z)
(216,pfd)
(217,ns)
(218,ns[i])
(219,family == AF_INET6)
(220,10)
(221,memcmp(ns+j, &sa, sl)
(222,p)
(223,retry_interval-t2)
(224,x < 30)
(225,alens)
(226,0)
(227,0)
(228,ns[nns].sin6.sin6_scope_id = iplit.scopeid)
(229,ns)
(230,z)
(231,SOCK_CLOEXEC)
(232,x)
(233,(void *)
(234,strncmp(line, "nameserver", 10)
(235,ns[i].sin.sin_addr)
(236,j)
(237,answers)
(238,ns[nns].sin6.sin6_port)
(239,i)
(240,sin6)
(241,if (j==nns)
(242,pfd)
(243,j++)
(244,int nqueries)
(245,errno == EAFNOSUPPORT)
(246,if (i == next)
(247,family)
(248,__lookup_ipliteral(&iplit, s, AF_UNSPEC)
(249,family)
(250,nns)
(251,0)
(252,nns)
(253,next)
(254,htons(53)
(255,servfail_retry--)
(256,isspace(*z)
(257,AF_INET6)
(258,servfail_retry)
(259,fd)
(260,sin)
(261,SOCK_DGRAM)
(262,fgets(line, sizeof line, f)
(263,memcpy(ns[i].sin6.sin6_addr.s6_addr+12,\n\\n\\t\\t\\t\\t&ns[i].sin.sin_addr, 4)
(264,iplit)
(265,)
(266,line)
(267,z++)
(268,i)
(269,if (i==nqueries)
(270,)
(271,goto out;)
(272,i<nqueries && (\n\\n\\t\\t\\t\\tanswers[next][0] != queries[i][0] ||\n\\n\\t\\t\\t\\tanswers[next][1] != queries[i][1] )
(273,z != p)
(274,cs)
(275,ns)
(276,continue;)
(277,nns<3)
(278,timeout)
(279,sa)
(280,if (t2-t1 >= retry_interval)
(281,ns)
(282,&cs)
(283,AF_INET)
(284,queries[i])
(285,sin)
(286,for (i=0; i<nns; i++)
(287,ns[nns++].sin6)
(288,i == next)
(289,void *)
(290,sa.sin6)
(291,9)
(292,p)
(293,next)
(294,0)
(295,ns[i].sin6.sin6_scope_id = 0)
(296,nqueries)
(297,j)
(298,ns[nns])
(299,t2 - retry_interval)
(300,sizeof *alens)
(301,void *)
(302,sizeof _buf)
(303,nns)
(304,ns+j)
(305,)
(306,answers[next])
(307,bind(fd, (void *)
(308,line)
(309,sa.sin)
(310,"nameserver")
(311,10)
(312,i)
(313,timeout)
(314,ns[i].sin6.sin6_addr.s6_addr+12)
(315,t0)
(316,ns[nns++])
(317,ns[i].sin6.sin6_flowinfo)
(318,alens[i] = rlen)
(319,30000)
(320,s)
(321,ns)
(322,p[9])
(323,line)
(324,0)
(325,i)
(326,attempts)
(327,AF_INET)
(328,bind(fd, (void *)
(329,AF_INET)
(330,f)
(331,t2)
(332,t2)
(333,timeout)
(334,mtime()
(335,nns)
(336,mtime()
(337,t1 = t2 - retry_interval)
(338,queries)
(339,qlens[i])
(340,x)
(341,&ns[i].sin.sin_addr)
(342,nns)
(343,alens)
(344,if (iplit.family == AF_INET)
(345,j<nns)
(346,answers[next][3])
(347,0)
(348,ns[nns++].sin6.sin6_family = family = AF_INET6)
(349,timeout)
(350,case 3:)
(351,j)
(352,family)
(353,2)
(354,line)
(355,53)
(356,i)
(357,line)
(358,j)
(359,j=0)
(360,j)
(361,fd)
(362,htonl(0x7f000001)
(363,ns[nns].sin.sin_port = htons(53)
(364,if (__lookup_ipliteral(&iplit, s, AF_UNSPEC)
(365,!attempts)
(366,switch (answers[next][3] & 15)
(367,sin6)
(368,nns)
(369,p)
(370,j)
(371,__lookup_ipliteral(&iplit, s, AF_UNSPEC)
(372,next = 0)
(373,unsigned char *const *answers)
(374,answers[next][0])
(375,next)
(376,t2)
(377,ns[nns])
(378,MSG_NOSIGNAL)
(379,addr)
(380,0)
(381,strncmp(line, "nameserver", 10)
(382,ns[nns])
(383,_buf)
(384,_f)
(385,sin)
(386,_f)
(387,s=line+11)
(388,next)
(389,next)
(390,const int *qlens)
(391,!strncmp(line, "options", 7)
(392,qlens)
(393,&ns[nns].sin6.sin6_addr)
(394,sizeof line)
(395,s)
(396,alens)
(397,sendto(fd, queries[i],\n\\n\\t\\t\\t\\t\\t\\t\\tqlens[i], MSG_NOSIGNAL,\n\\n\\t\\t\\t\\t\\t\\t\\t(void *)
(398,AF_INET6)
(399,sin6_scope_id)
(400,p)
(401,sin6)
(402,12)
(403,ns[nns])
(404,pfd.fd = fd)
(405,next)
(406,x)
(407,isspace(line[10])
(408,4)
(409,ns[nns].sin6)
(410,j)
(411,iplit.family)
(412,continue;)
(413,i<nqueries)
(414,j)
(415,i)
(416,s)
(417,p)
(418,strstr(line, "timeout:")
(419,attempts)
(420,"/etc/resolv.conf")
(421,x)
(422,line)
(423,0)
(424,timeout = 5000)
(425,10)
(426,sendto(fd, queries[i],\n\\n\\t\\t\\t\\t\\t\\tqlens[i], MSG_NOSIGNAL,\n\\n\\t\\t\\t\\t\\t\\t(void *)
(427,sizeof sa.sin)
(428,case 0:)
(429,sin6)
(430,sin6)
(431,8)
(432,t2-t0)
(433,alens[next])
(434,ns[i].sin6.sin6_addr.s6_addr)
(435,SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK)
(436,ns[nns++].sin.sin_family)
(437,next)
(438,i)
(439,j)
(440,break;)
(441,nns)
(442,family)
(443,for (j=0; j<nns && memcmp(ns+j, &sa, sl)
(444,socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(445,answers[next][3] & 15)
(446,sa)
(447,1)
(448,ns[i].sin6)
(449,2 * nqueries)
(450,)
(451,ns[i].sin6)
(452,queries[i])
(453,ns[i].sin6.sin6_family = AF_INET6)
(454,)
(455,sin)
(456,next<nqueries && alens[next])
(457,t2)
(458,1000)
(459,fd)
(460,11)
(461,alens)
(462,0x7f000001)
(463,events)
(464,ns[0].sin.sin_port = htons(53)
(465,*z && !isspace(*z)
(466,nqueries)
(467,1)
(468,__fclose_ca(f)
(469,j=0)
(470,nns)
(471,0)
(472,return -1;)
(473,rlen)
(474,ns[nns].sin6)
(475,i)
(476,family)
(477,sl)
(478,sin_family)
(479,void *)
(480,*z)
(481,sin6)
(482,3)
(483,p = strstr(line, "timeout:")
(484,if (p && isdigit(p[9])
(485,i)
(486,ns[i])
(487,sin)
(488,for (s=line+11; isspace(*s)
(489,line[10])
(490,z)
(491,ns[j])
(492,z)
(493,nns)
(494,ns[0].sin.sin_addr.s_addr)
(495,i)
(496,s6_addr)
(497,)
(498,fd)
(499,s++)
(500,f)
(501,iplit.addr)
(502,)
(503,answers)
(504,p[8])
(505,i==nqueries)
(506,sin)
(507,nqueries)
(508,fd)
(509,5000)
(510,t1)
(511,family = AF_INET)
(512,if (fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT)
(513,0)
(514,1)
(515,i)
(516,(void *)
(517,POLLIN)
(518,ns[j])
(519,alens[i])
(520,answers[next][0] != queries[i][0] ||\n\\n\\t\\t\\t\\tanswers[next][1] != queries[i][1])
(521,rlen)
(522,"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\xff\\xff")
(523,p)
(524,sl = sizeof sa.sin6)
(525,j==nns)
(526,&ns[j])
(527,retry_interval)
(528,poll(&pfd, 1, t1+retry_interval-t2)
(529,f)
(530,i++)
(531,ns[nns++])
(532,x < 10 ? x : 10)
(533,sin)
(534,"options")
(535,0)
(536,next++)
(537,fd)
(538,default:)
(539,1)
(540,1)
(541,if (servfail_retry && servfail_retry--)
(542,line[7])
(543,12)
(544,line+11)
(545,f)
(546,sin_family)
(547,cs)
(548,30)
(549,servfail_retry)
(550,int *alens)
(551,timeout = x < 30 ? x*1000 : 30000)
(552,for (i=0; i<nqueries; i++)
(553,0)
(554,sa.sin.sin_family)
(555,p)
(556,t2-t1 >= retry_interval)
(557,pfd)
(558,(intptr_t)
(559,sl)
(560,t1 = t2)
(561,0)
(562,z)
(563,x = strtoul(p, &z, 10)
(564,p += 9)
(565,alens[i])
(566,sin6_family)
(567,sin_addr)
(568,family == AF_INET6)
(569,x < 30 ? x*1000 : 30000)
(570,7)
(571,i=0)
(572,nns)
(573,p += 8)
(574,z)
(575,attempts)
(576,scopeid)
(577,t2=mtime()
(578,t2)
(579,servfail_retry = 2 * nqueries)
(580,t0 = t2 = mtime()
(581,sl)
(582,nqueries)
(583,memcpy(ns[i].sin6.sin6_addr.s6_addr,\n\\n\\t\\t\\t\\t"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\xff\\xff", 12)
(584,"timeout:")
(585,next)
(586,pthread_cleanup_pop(1)
(587,ns[i])
(588,next<nqueries)
(589,addr)
(590,timeout / attempts)
(591,sa.sin.sin_family = family)
(592,ns[nns].sin.sin_addr)
(593,i<nns)
(594,t0)
(595,retry_interval)
(596,ns[0].sin)
(597,if (family == AF_INET6)
(598,j)
(599,!isspace(*z)
(600,)
(601,continue;)
(602,attempts)
(603,i)
(604,*alens)
(605,sin6_port)
(606,ns[i])
(607,s_addr)
(608,x < 10)
(609,queries[i])
(610,isspace(*s)
(611,nqueries)
(612,pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &cs)
(613,p)
(614,SOCK_NONBLOCK)
(615,AF_INET)
(616,)
(617,10)
(618,i)
(619,ns)
(620,isspace(line[7])
(621,pfd)
(622,case 2:)
(623,attempts = 1)
(624,ns[i].sin.sin_family)
(625,fd)
(626,0)
(627,ns[0].sin.sin_family = AF_INET)
(628,strtoul(p, &z, 10)
(629,if (!strncmp(line, "options", 7)
(630,iplit)
(631,sizeof sa.sin6)
(632,if (rlen < 4)
(633,if (p && isdigit(p[8])
(634,if (f)
(635,ns[0])
(636,*s)
(637,)
(638,rlen)
(639,ns)
(640,s)
(641,AF_INET)
(642,fd = socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(643,i)
(644,*z=0)
(645,i)
(646,t1)
(647,0)
(648,family)
(649,socket(AF_INET, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(650,next)
(651,iplit)
(652,if (!nns)
(653,queries)
(654,t1+retry_interval-t2)
(655,j<nns)
(656,ns)
(657,0)
(658,memcpy(&ns[nns].sin6.sin6_addr, iplit.addr, 16)
(659,0)
(660,memcpy(&ns[nns].sin.sin_addr, iplit.addr, 4)
(661,for (z=s; *z && !isspace(*z)
(662,AF_INET)
(663,nns)
(664,ns)
(665,void *)
(666,j<nns && memcmp(ns+j, &sa, sl)
(667,answers[next][0] != queries[i][0])
(668,sl)
(669,retry_interval = timeout / attempts)
(670,p = strstr(line, "attempts:")
(671,i++)
(672,i)
(673,ns[0].sin)
(674,*z)
(675,nqueries)
(676,0)
(677,&pfd)
(678,sin)
(679,ns[0].sin)
(680,i)
(681,i)
(682,SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK)
(683,sl)
(684,answers)
(685,fd)
(686,-1)
(687,2)
(688,f)
(689,EAFNOSUPPORT)
(690,)
(691,sin_addr)
(692,x)
(693,fd = socket(family, SOCK_DGRAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0)
(694,i++)
(695,ns)
(696,i=0)
(697,ns[0].sin.sin_addr)
(698,0)
(699,nns)
(700,p)
(701,sa)
(702,pfd.events = POLLIN)
(703,&ns[nns].sin.sin_addr)
(704,queries[i][1])
(705,for (; t2-t0 < timeout; t2=mtime()
(706,line)
(707,out:)
(708,!isspace(line[10])
(709,pthread_setcancelstate(cs, 0)
(710,servfail_retry)
(711,isdigit(p[9])
(712,ns[i].sin6.sin6_addr)
(713,x = strtoul(p, &z, 10)
(714,next)
(715,AF_UNSPEC)
(716,ns)
(717,0)
(718,attempts = 2)
(719,sin_port)
(720,if (next == nqueries)
(721,t1)
(722,10)
(723,const unsigned char *const *queries)
(724,ns)
(725,0)
(726,strtoul(p, &z, 10)
(727,fd < 0 && family == AF_INET6 && errno == EAFNOSUPPORT)
(728,if (ns[i].sin.sin_family != AF_INET)
(729,attempts)
(730,rlen < 4)
(731,qlens)
(732,sin6)
(733,t2)
(734,)
(735,ns)
(736,ns[i].sin)
(737,(void *)
(738,i)
(739,memset(alens, 0, sizeof *alens * nqueries)
(740,if (alens[i])
(741,fd < 0)
(742,iplit.family == AF_INET)
(743,queries)
(744,answers[next])
(745,ns[i].sin6.sin6_flowinfo = 0)
(746,if (z != p)
(747,alens[i])
(748,ns[0].sin.sin_family)
(749,0)
(750,if (fd < 0 || bind(fd, (void *)
(751,z)
(752,answers[i])
(753,z)
(754,sin6)
(755,&z)
(756,8)
(757,ns[i].sin6.sin6_family)
(758,!alens[i])
(759,nns=1)
(760,pfd.fd)
(761,p)
(762,ns[nns].sin6.sin6_port = htons(53)
(763,x)
(764,family)
(765,ns[i].sin6)
(766,!nns)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^