-----label-----
0
-----code-----
void
pmap_init(void)
{
	struct pmap_preinit_mapping *ppim;
	vm_page_t mpte;
	vm_size_t s;
	int error, i, pv_npg, ret, skz63;

	/* L1TF, reserve page @0 unconditionally */
	vm_page_blacklist_add(0, bootverbose);

	/* Detect bare-metal Skylake Server and Skylake-X. */
	if (vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&
	    CPUID_TO_FAMILY(cpu_id) == 0x6 && CPUID_TO_MODEL(cpu_id) == 0x55) {
		/*
		 * Skylake-X errata SKZ63. Processor May Hang When
		 * Executing Code In an HLE Transaction Region between
		 * 40000000H and 403FFFFFH.
		 *
		 * Mark the pages in the range as preallocated.  It
		 * seems to be impossible to distinguish between
		 * Skylake Server and Skylake X.
		 */
		skz63 = 1;
		TUNABLE_INT_FETCH("hw.skz63_enable", &skz63);
		if (skz63 != 0) {
			if (bootverbose)
				printf("SKZ63: skipping 4M RAM starting "
				    "at physical 1G\n");
			for (i = 0; i < atop(0x400000); i++) {
				ret = vm_page_blacklist_add(0x40000000 +
				    ptoa(i), FALSE);
				if (!ret && bootverbose)
					printf("page at %#lx already used\n",
					    0x40000000 + ptoa(i));
			}
		}
	}

	/*
	 * Initialize the vm page array entries for the kernel pmap's
	 * page table pages.
	 */ 
	for (i = 0; i < nkpt; i++) {
		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));
		KASSERT(mpte >= vm_page_array &&
		    mpte < &vm_page_array[vm_page_array_size],
		    ("pmap_init: page table page is out of range"));
		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;
		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);
		mpte->wire_count = 1;
	}
	atomic_add_int(&vm_cnt.v_wire_count, nkpt);

	/*
	 * If the kernel is running on a virtual machine, then it must assume
	 * that MCA is enabled by the hypervisor.  Moreover, the kernel must
	 * be prepared for the hypervisor changing the vendor and family that
	 * are reported by CPUID.  Consequently, the workaround for AMD Family
	 * 10h Erratum 383 is enabled if the processor's feature set does not
	 * include at least one feature that is only supported by older Intel
	 * or newer AMD processors.
	 */
	if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&
	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |
	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |
	    AMDID2_FMA4)) == 0)
		workaround_erratum383 = 1;

	/*
	 * Are large page mappings enabled?
	 */
	TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);
	if (pg_ps_enabled) {
		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,
		    ("pmap_init: can't assign to pagesizes[1]"));
		pagesizes[1] = NBPDR;
	}

	/*
	 * Initialize the pv chunk list mutex.
	 */
	mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);

	/*
	 * Initialize the pool of pv list locks.
	 */
	for (i = 0; i < NPV_LIST_LOCKS; i++)
		rw_init(&pv_list_locks[i], "pmap pv list");

	/*
	 * Calculate the size of the pv head table for superpages.
	 */
	pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);

	/*
	 * Allocate memory for the pv head table for superpages.
	 */
	s = (vm_size_t)(pv_npg * sizeof(struct md_page));
	s = round_page(s);
	pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,
	    M_WAITOK | M_ZERO);
	for (i = 0; i < pv_npg; i++)
		TAILQ_INIT(&pv_table[i].pv_list);
	TAILQ_INIT(&pv_dummy.pv_list);

	pmap_initialized = 1;
	for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {
		ppim = pmap_preinit_mapping + i;
		if (ppim->va == 0)
			continue;
		/* Make the direct map consistent */
		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {
			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),
			    ppim->sz, ppim->mode);
		}
		if (!bootverbose)
			continue;
		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,
		    ppim->pa, ppim->va, ppim->sz, ppim->mode);
	}

	mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);
	error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,
	    (vmem_addr_t *)&qframe);
	if (error != 0)
		panic("qframe allocation failed");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
10,11
11,12
11,13
12,13
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
30,33
30,34
30,35
30,36
32,33
34,35
36,37
38,39
40,41
42,43
43,44
43,45
43,46
44,45
47,48
49,50
49,51
50,51
50,52
51,52
51,53
52,53
52,54
53,54
53,55
54,55
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
64,66
65,66
67,68
70,71
70,72
71,72
71,73
72,73
74,75
77,78
77,79
77,80
78,79
79,80
79,81
80,81
83,84
84,85
84,86
84,87
85,86
88,89
89,90
91,92
91,93
92,93
92,94
93,94
96,97
96,98
97,98
97,99
98,99
100,101
101,102
101,103
102,103
105,106
105,107
105,108
105,109
106,107
107,108
107,109
108,109
111,112
111,113
112,113
114,115
114,116
115,116
118,119
119,120
121,122
121,123
122,123
123,124
123,125
124,125
126,127
126,128
126,129
127,128
129,130
129,131
131,132
131,133
132,133
134,135
136,137
138,139
138,140
139,140
139,141
140,141
141,142
143,144
145,146
146,147
146,148
146,149
147,148
150,151
150,152
152,153
152,154
153,154
155,156
157,158
157,159
157,160
157,161
158,159
159,160
159,161
160,161
163,164
163,165
164,165
166,167
168,169
169,170
171,172
171,173
171,174
171,175
171,176
172,173
173,174
173,175
174,175
176,177
176,178
177,178
179,180
179,181
180,181
182,183
183,184
183,185
184,185
186,187
188,189
189,190
189,191
189,192
190,191
192,193
192,194
193,194
193,195
194,195
196,197
198,199
198,200
199,200
201,202
202,203
202,204
203,204
205,206
207,208
209,210
210,211
210,212
211,212
211,213
212,213
215,216
215,217
216,217
216,218
217,218
219,220
221,222
223,224
224,225
224,226
225,226
225,227
226,227
229,230
229,231
230,231
232,233
233,234
233,235
234,235
236,237
238,239
239,240
239,241
240,241
240,242
241,242
245,246
246,247
246,248
246,249
247,248
249,250
250,251
250,252
251,252
254,255
256,257
256,258
257,258
257,259
258,259
258,260
259,260
259,261
260,261
260,262
261,262
263,264
265,266
265,267
266,267
267,268
267,269
268,269
270,271
273,274
273,275
274,275
275,276
275,277
276,277
278,279
279,280
279,281
280,281
280,282
281,282
281,283
282,283
282,284
283,284
285,286
287,288
289,290
291,292
294,295
294,296
295,296
296,297
296,298
297,298
299,300
300,301
300,302
301,302
303,304
306,307
307,308
307,309
308,309
311,312
312,313
312,314
312,315
313,314
316,317
317,318
319,320
319,321
320,321
322,323
322,324
323,324
324,325
324,326
324,327
325,326
327,328
327,329
328,329
328,330
329,330
332,333
332,334
333,334
333,335
334,335
338,339
340,341
341,342
341,343
342,343
342,344
343,344
346,347
348,349
349,350
349,351
349,352
349,353
349,354
350,351
352,353
353,354
356,357
358,359
360,361
360,362
360,363
360,364
361,362
362,363
362,364
363,364
366,367
366,368
367,368
369,370
371,372
372,373
374,375
375,376
375,377
375,378
376,377
378,379
379,380
379,381
380,381
382,383
385,386
386,387
386,388
387,388
389,390
389,391
389,392
390,391
392,393
392,394
393,394
393,395
394,395
396,397
396,398
397,398
401,402
403,404
404,405
404,406
405,406
407,408
407,409
408,409
409,410
411,412
411,413
412,413
414,415
415,416
415,417
416,417
419,420
420,421
420,422
421,422
423,424
423,425
424,425
426,427
428,429
429,430
429,431
430,431
432,433
432,434
433,434
433,435
434,435
436,437
438,439
438,440
438,441
438,442
439,440
441,442
443,444
445,446
445,447
446,447
448,449
450,451
450,452
450,453
450,454
451,452
452,453
452,454
453,454
456,457
456,458
457,458
459,460
461,462
462,463
464,465
465,466
465,467
466,467
468,469
469,470
469,471
470,471
470,472
471,472
473,474
476,477
477,478
477,479
478,479
480,481
481,482
481,483
482,483
485,486
486,487
486,488
487,488
490,491
490,492
490,493
490,494
491,492
492,493
492,494
493,494
496,497
496,498
497,498
499,500
501,502
502,503
504,505
504,506
504,507
504,508
504,509
505,506
506,507
506,508
507,508
509,510
509,511
510,511
512,513
514,515
514,516
515,516
515,517
516,517
516,518
517,518
522,523
522,524
523,524
523,525
524,525
524,526
525,526
525,527
526,527
529,530
531,532
531,533
532,533
532,534
533,534
533,535
534,535
537,538
537,539
538,539
541,542
543,544
544,545
545,546
545,547
546,547
546,548
549,550
549,551
549,552
549,553
550,551
552,553
552,554
553,554
555,556
555,557
556,557
559,560
559,561
560,561
563,564
563,565
564,565
567,568
567,569
568,569
569,570
572,573
573,574
573,575
573,576
573,577
573,578
573,579
573,580
574,575
577,578
579,580
579,581
580,581
583,584
583,585
584,585
587,588
587,589
588,589
591,592
591,593
592,593
595,596
596,597
596,598
596,599
596,600
596,601
597,598
599,600
600,601
603,604
605,606
607,608
608,609
608,610
609,610
611,612
611,613
611,614
611,615
611,616
612,613
614,615
616,617
618,619
618,620
619,620
621,622
623,624
623,625
624,625
624,626
625,626
627,628
629,630
630,631
632,633
632,634
633,634
633,635
634,635
637,638
638,639
638,640
639,640
-----nextToken-----
2,4,6,8,13,15,16,20,22,26,28,31,33,35,37,39,41,45,46,48,55,57,60,62,66,68,69,73,75,76,81,82,86,87,90,94,95,99,103,104,109,110,113,116,117,120,125,128,130,133,135,137,142,144,148,149,151,154,156,161,162,165,167,170,175,178,181,185,187,191,195,197,200,204,206,208,213,214,218,220,222,227,228,231,235,237,242,243,244,248,252,253,255,262,264,269,271,272,277,284,286,288,290,292,293,298,302,304,305,309,310,314,315,318,321,326,330,331,335,336,337,339,344,345,347,351,354,355,357,359,364,365,368,370,373,377,381,383,384,388,391,395,398,399,400,402,406,410,413,417,418,422,425,427,431,435,437,440,442,444,447,449,454,455,458,460,463,467,472,474,475,479,483,484,488,489,494,495,498,500,503,508,511,513,518,519,520,521,527,528,530,535,536,539,540,542,547,548,551,554,557,558,561,562,565,566,570,571,575,576,578,581,582,585,586,589,590,593,594,598,601,602,604,606,610,613,615,617,620,622,626,628,631,635,636,640,641
-----computeFrom-----
50,51
50,52
51,52
51,53
52,53
52,54
53,54
53,55
58,59
58,60
63,64
63,65
70,71
70,72
79,80
79,81
92,93
92,94
107,108
107,109
111,112
111,113
123,124
123,125
129,130
129,131
139,140
139,141
150,151
150,152
159,160
159,161
163,164
163,165
173,174
173,175
179,180
179,181
183,184
183,185
192,193
192,194
193,194
193,195
198,199
198,200
210,211
210,212
215,216
215,217
224,225
224,226
229,230
229,231
233,234
233,235
239,240
239,241
257,258
257,259
258,259
258,260
259,260
259,261
260,261
260,262
265,266
265,267
267,268
267,269
273,274
273,275
275,276
275,277
279,280
279,281
280,281
280,282
281,282
281,283
282,283
282,284
294,295
294,296
296,297
296,298
300,301
300,302
307,308
307,309
327,328
327,329
328,329
328,330
332,333
332,334
341,342
341,343
362,363
362,364
366,367
366,368
386,387
386,388
396,397
396,398
404,405
404,406
411,412
411,413
420,421
420,422
429,430
429,431
445,446
445,447
452,453
452,454
456,457
456,458
486,487
486,488
492,493
492,494
496,497
496,498
506,507
506,508
509,510
509,511
515,516
515,517
523,524
523,525
524,525
524,526
531,532
531,533
532,533
532,534
608,609
608,610
618,619
618,620
633,634
633,635
-----guardedBy-----
539,565
536,558
540,562
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
voidpmap_init(void){	struct pmap_preinit_mapping *ppim;	vm_page_t mpte;	vm_size_t s;	int error, i, pv_npg, ret, skz63;	/* L1TF, reserve page @0 unconditionally */	vm_page_blacklist_add(0, bootverbose);	/* Detect bare-metal Skylake Server and Skylake-X. */	if (vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&	    CPUID_TO_FAMILY(cpu_id) == 0x6 && CPUID_TO_MODEL(cpu_id) == 0x55) {		/*		 * Skylake-X errata SKZ63. Processor May Hang When		 * Executing Code In an HLE Transaction Region between		 * 40000000H and 403FFFFFH.		 *		 * Mark the pages in the range as preallocated.  It		 * seems to be impossible to distinguish between		 * Skylake Server and Skylake X.		 */		skz63 = 1;		TUNABLE_INT_FETCH("hw.skz63_enable", &skz63);		if (skz63 != 0) {			if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");			for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}		}	}	/*	 * Initialize the vm page array entries for the kernel pmap's	 * page table pages.	 */ 	for (i = 0; i < nkpt; i++) {		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);		mpte->wire_count = 1;	}	atomic_add_int(&vm_cnt.v_wire_count, nkpt);	/*	 * If the kernel is running on a virtual machine, then it must assume	 * that MCA is enabled by the hypervisor.  Moreover, the kernel must	 * be prepared for the hypervisor changing the vendor and family that	 * are reported by CPUID.  Consequently, the workaround for AMD Family	 * 10h Erratum 383 is enabled if the processor's feature set does not	 * include at least one feature that is only supported by older Intel	 * or newer AMD processors.	 */	if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0)		workaround_erratum383 = 1;	/*	 * Are large page mappings enabled?	 */	TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);	if (pg_ps_enabled) {		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}	/*	 * Initialize the pv chunk list mutex.	 */	mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);	/*	 * Initialize the pool of pv list locks.	 */	for (i = 0; i < NPV_LIST_LOCKS; i++)		rw_init(&pv_list_locks[i], "pmap pv list");	/*	 * Calculate the size of the pv head table for superpages.	 */	pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);	/*	 * Allocate memory for the pv head table for superpages.	 */	s = (vm_size_t)(pv_npg * sizeof(struct md_page));	s = round_page(s);	pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO);	for (i = 0; i < pv_npg; i++)		TAILQ_INIT(&pv_table[i].pv_list);	TAILQ_INIT(&pv_dummy.pv_list);	pmap_initialized = 1;	for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}	mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);	error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe);	if (error != 0)		panic("qframe allocation failed");}
void
pmap_init(void)
pmap_init
void
void


{	struct pmap_preinit_mapping *ppim;	vm_page_t mpte;	vm_size_t s;	int error, i, pv_npg, ret, skz63;	/* L1TF, reserve page @0 unconditionally */	vm_page_blacklist_add(0, bootverbose);	/* Detect bare-metal Skylake Server and Skylake-X. */	if (vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&	    CPUID_TO_FAMILY(cpu_id) == 0x6 && CPUID_TO_MODEL(cpu_id) == 0x55) {		/*		 * Skylake-X errata SKZ63. Processor May Hang When		 * Executing Code In an HLE Transaction Region between		 * 40000000H and 403FFFFFH.		 *		 * Mark the pages in the range as preallocated.  It		 * seems to be impossible to distinguish between		 * Skylake Server and Skylake X.		 */		skz63 = 1;		TUNABLE_INT_FETCH("hw.skz63_enable", &skz63);		if (skz63 != 0) {			if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");			for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}		}	}	/*	 * Initialize the vm page array entries for the kernel pmap's	 * page table pages.	 */ 	for (i = 0; i < nkpt; i++) {		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);		mpte->wire_count = 1;	}	atomic_add_int(&vm_cnt.v_wire_count, nkpt);	/*	 * If the kernel is running on a virtual machine, then it must assume	 * that MCA is enabled by the hypervisor.  Moreover, the kernel must	 * be prepared for the hypervisor changing the vendor and family that	 * are reported by CPUID.  Consequently, the workaround for AMD Family	 * 10h Erratum 383 is enabled if the processor's feature set does not	 * include at least one feature that is only supported by older Intel	 * or newer AMD processors.	 */	if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0)		workaround_erratum383 = 1;	/*	 * Are large page mappings enabled?	 */	TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);	if (pg_ps_enabled) {		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}	/*	 * Initialize the pv chunk list mutex.	 */	mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);	/*	 * Initialize the pool of pv list locks.	 */	for (i = 0; i < NPV_LIST_LOCKS; i++)		rw_init(&pv_list_locks[i], "pmap pv list");	/*	 * Calculate the size of the pv head table for superpages.	 */	pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);	/*	 * Allocate memory for the pv head table for superpages.	 */	s = (vm_size_t)(pv_npg * sizeof(struct md_page));	s = round_page(s);	pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO);	for (i = 0; i < pv_npg; i++)		TAILQ_INIT(&pv_table[i].pv_list);	TAILQ_INIT(&pv_dummy.pv_list);	pmap_initialized = 1;	for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}	mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);	error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe);	if (error != 0)		panic("qframe allocation failed");}
struct pmap_preinit_mapping *ppim;
struct pmap_preinit_mapping *ppim;
struct pmap_preinit_mapping
pmap_preinit_mapping
*ppim
*
ppim
vm_page_t mpte;
vm_page_t mpte;
vm_page_t
vm_page_t
mpte
mpte
vm_size_t s;
vm_size_t s;
vm_size_t
vm_size_t
s
s
int error, i, pv_npg, ret, skz63;
int error, i, pv_npg, ret, skz63;
int
error
error
i
i
pv_npg
pv_npg
ret
ret
skz63
skz63
vm_page_blacklist_add(0, bootverbose);
vm_page_blacklist_add(0, bootverbose)
vm_page_blacklist_add
vm_page_blacklist_add
0
bootverbose
bootverbose
if (vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&	    CPUID_TO_FAMILY(cpu_id) == 0x6 && CPUID_TO_MODEL(cpu_id) == 0x55) {		/*		 * Skylake-X errata SKZ63. Processor May Hang When		 * Executing Code In an HLE Transaction Region between		 * 40000000H and 403FFFFFH.		 *		 * Mark the pages in the range as preallocated.  It		 * seems to be impossible to distinguish between		 * Skylake Server and Skylake X.		 */		skz63 = 1;		TUNABLE_INT_FETCH("hw.skz63_enable", &skz63);		if (skz63 != 0) {			if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");			for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}		}	}
vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&	    CPUID_TO_FAMILY(cpu_id) == 0x6 && CPUID_TO_MODEL(cpu_id) == 0x55
vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&	    CPUID_TO_FAMILY(cpu_id) == 0x6
vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL
vm_guest == VM_GUEST_NO
vm_guest
vm_guest
VM_GUEST_NO
VM_GUEST_NO
cpu_vendor_id == CPU_VENDOR_INTEL
cpu_vendor_id
cpu_vendor_id
CPU_VENDOR_INTEL
CPU_VENDOR_INTEL
CPUID_TO_FAMILY(cpu_id) == 0x6
CPUID_TO_FAMILY(cpu_id)
CPUID_TO_FAMILY
CPUID_TO_FAMILY
cpu_id
cpu_id
0x6
CPUID_TO_MODEL(cpu_id) == 0x55
CPUID_TO_MODEL(cpu_id)
CPUID_TO_MODEL
CPUID_TO_MODEL
cpu_id
cpu_id
0x55
{		/*		 * Skylake-X errata SKZ63. Processor May Hang When		 * Executing Code In an HLE Transaction Region between		 * 40000000H and 403FFFFFH.		 *		 * Mark the pages in the range as preallocated.  It		 * seems to be impossible to distinguish between		 * Skylake Server and Skylake X.		 */		skz63 = 1;		TUNABLE_INT_FETCH("hw.skz63_enable", &skz63);		if (skz63 != 0) {			if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");			for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}		}	}
skz63 = 1;
skz63 = 1
skz63
skz63
1
TUNABLE_INT_FETCH("hw.skz63_enable", &skz63);
TUNABLE_INT_FETCH("hw.skz63_enable", &skz63)
TUNABLE_INT_FETCH
TUNABLE_INT_FETCH
"hw.skz63_enable"
&skz63
skz63
skz63
if (skz63 != 0) {			if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");			for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}		}
skz63 != 0
skz63
skz63
0
{			if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");			for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}		}
if (bootverbose)				printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");
bootverbose
bootverbose
printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n");
printf("SKZ63: skipping 4M RAM starting "				    "at physical 1G\n")
printf
printf
"SKZ63: skipping 4M RAM starting "				    "at physical 1G\n"
for (i = 0; i < atop(0x400000); i++) {				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}
i = 0;
i = 0
i
i
0
i < atop(0x400000)
i
i
atop(0x400000)
atop
atop
0x400000
i++
i
i
{				ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);				if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));			}
ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE);
ret = vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE)
ret
ret
vm_page_blacklist_add(0x40000000 +				    ptoa(i), FALSE)
vm_page_blacklist_add
vm_page_blacklist_add
0x40000000 +				    ptoa(i)
0x40000000
ptoa(i)
ptoa
ptoa
i
i
FALSE
FALSE
if (!ret && bootverbose)					printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));
!ret && bootverbose
!ret
ret
ret
bootverbose
bootverbose
printf("page at %#lx already used\n",					    0x40000000 + ptoa(i));
printf("page at %#lx already used\n",					    0x40000000 + ptoa(i))
printf
printf
"page at %#lx already used\n"
0x40000000 + ptoa(i)
0x40000000
ptoa(i)
ptoa
ptoa
i
i
for (i = 0; i < nkpt; i++) {		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);		mpte->wire_count = 1;	}
i = 0;
i = 0
i
i
0
i < nkpt
i
i
nkpt
nkpt
i++
i
i
{		mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));		KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));		mpte->pindex = pmap_pde_pindex(KERNBASE) + i;		mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);		mpte->wire_count = 1;	}
mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT));
mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT))
mpte
mpte
PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT))
PHYS_TO_VM_PAGE
PHYS_TO_VM_PAGE
KPTphys + (i << PAGE_SHIFT)
KPTphys
KPTphys
(i << PAGE_SHIFT)
i << PAGE_SHIFT
i
i
PAGE_SHIFT
PAGE_SHIFT
KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"));
KASSERT(mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size],		    ("pmap_init: page table page is out of range"))
KASSERT
KASSERT
mpte >= vm_page_array &&		    mpte < &vm_page_array[vm_page_array_size]
mpte >= vm_page_array
mpte
mpte
vm_page_array
vm_page_array
mpte < &vm_page_array[vm_page_array_size]
mpte
mpte
&vm_page_array[vm_page_array_size]
vm_page_array[vm_page_array_size]
vm_page_array
vm_page_array
vm_page_array_size
vm_page_array_size
("pmap_init: page table page is out of range")
"pmap_init: page table page is out of range"
mpte->pindex = pmap_pde_pindex(KERNBASE) + i;
mpte->pindex = pmap_pde_pindex(KERNBASE) + i
mpte->pindex
mpte
mpte
pindex
pmap_pde_pindex(KERNBASE) + i
pmap_pde_pindex(KERNBASE)
pmap_pde_pindex
pmap_pde_pindex
KERNBASE
KERNBASE
i
i
mpte->phys_addr = KPTphys + (i << PAGE_SHIFT);
mpte->phys_addr = KPTphys + (i << PAGE_SHIFT)
mpte->phys_addr
mpte
mpte
phys_addr
KPTphys + (i << PAGE_SHIFT)
KPTphys
KPTphys
(i << PAGE_SHIFT)
i << PAGE_SHIFT
i
i
PAGE_SHIFT
PAGE_SHIFT
mpte->wire_count = 1;
mpte->wire_count = 1
mpte->wire_count
mpte
mpte
wire_count
1
atomic_add_int(&vm_cnt.v_wire_count, nkpt);
atomic_add_int(&vm_cnt.v_wire_count, nkpt)
atomic_add_int
atomic_add_int
&vm_cnt.v_wire_count
vm_cnt.v_wire_count
vm_cnt
vm_cnt
v_wire_count
nkpt
nkpt
if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0)		workaround_erratum383 = 1;
vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0 && (amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0
vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0 &&	    (cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0
vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS) == 0
vm_guest != VM_GUEST_NO
vm_guest
vm_guest
VM_GUEST_NO
VM_GUEST_NO
(cpu_feature & CPUID_SS) == 0
(cpu_feature & CPUID_SS)
cpu_feature & CPUID_SS
cpu_feature
cpu_feature
CPUID_SS
CPUID_SS
0
(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)) == 0
(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE))
cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)
cpu_feature2
cpu_feature2
(CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE)
CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX | CPUID2_XSAVE
CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |	    CPUID2_AVX
CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI
CPUID2_SSSE3 | CPUID2_SSE41
CPUID2_SSSE3
CPUID2_SSSE3
CPUID2_SSE41
CPUID2_SSE41
CPUID2_AESNI
CPUID2_AESNI
CPUID2_AVX
CPUID2_AVX
CPUID2_XSAVE
CPUID2_XSAVE
0
(amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)) == 0
(amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4))
amd_feature2 & (AMDID2_XOP |	    AMDID2_FMA4)
amd_feature2
amd_feature2
(AMDID2_XOP |	    AMDID2_FMA4)
AMDID2_XOP |	    AMDID2_FMA4
AMDID2_XOP
AMDID2_XOP
AMDID2_FMA4
AMDID2_FMA4
0
workaround_erratum383 = 1;
workaround_erratum383 = 1
workaround_erratum383
workaround_erratum383
1
TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled);
TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled)
TUNABLE_INT_FETCH
TUNABLE_INT_FETCH
"vm.pmap.pg_ps_enabled"
&pg_ps_enabled
pg_ps_enabled
pg_ps_enabled
if (pg_ps_enabled) {		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}
pg_ps_enabled
pg_ps_enabled
{		KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));		pagesizes[1] = NBPDR;	}
KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"));
KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,		    ("pmap_init: can't assign to pagesizes[1]"))
KASSERT
KASSERT
MAXPAGESIZES > 1 && pagesizes[1] == 0
MAXPAGESIZES > 1
MAXPAGESIZES
MAXPAGESIZES
1
pagesizes[1] == 0
pagesizes[1]
pagesizes
pagesizes
1
0
("pmap_init: can't assign to pagesizes[1]")
"pmap_init: can't assign to pagesizes[1]"
pagesizes[1] = NBPDR;
pagesizes[1] = NBPDR
pagesizes[1]
pagesizes
pagesizes
1
NBPDR
NBPDR
mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF);
mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF)
mtx_init
mtx_init
&pv_chunks_mutex
pv_chunks_mutex
pv_chunks_mutex
"pmap pv chunk list"
NULL
NULL
MTX_DEF
MTX_DEF
for (i = 0; i < NPV_LIST_LOCKS; i++)		rw_init(&pv_list_locks[i], "pmap pv list");
i = 0;
i = 0
i
i
0
i < NPV_LIST_LOCKS
i
i
NPV_LIST_LOCKS
NPV_LIST_LOCKS
i++
i
i
rw_init(&pv_list_locks[i], "pmap pv list");
rw_init(&pv_list_locks[i], "pmap pv list")
rw_init
rw_init
&pv_list_locks[i]
pv_list_locks[i]
pv_list_locks
pv_list_locks
i
i
"pmap pv list"
pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR);
pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
pv_npg
pv_npg
howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
howmany
howmany
vm_phys_segs[vm_phys_nsegs - 1].end
vm_phys_segs[vm_phys_nsegs - 1]
vm_phys_segs
vm_phys_segs
vm_phys_nsegs - 1
vm_phys_nsegs
vm_phys_nsegs
1
end
NBPDR
NBPDR
s = (vm_size_t)(pv_npg * sizeof(struct md_page));
s = (vm_size_t)(pv_npg * sizeof(struct md_page))
s
s
(vm_size_t)(pv_npg * sizeof(struct md_page))
(vm_size_t)
vm_size_t
vm_size_t
pv_npg * sizeof(struct md_page)
pv_npg
pv_npg
sizeof(struct md_page)
struct md_page
struct md_page
md_page

s = round_page(s);
s = round_page(s)
s
s
round_page(s)
round_page
round_page
s
s
pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO);
pv_table = (struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO)
pv_table
pv_table
(struct md_page *)kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO)
struct md_page *
struct md_page
md_page
*
*
kmem_malloc(kernel_arena, s,	    M_WAITOK | M_ZERO)
kmem_malloc
kmem_malloc
kernel_arena
kernel_arena
s
s
M_WAITOK | M_ZERO
M_WAITOK
M_WAITOK
M_ZERO
M_ZERO
for (i = 0; i < pv_npg; i++)		TAILQ_INIT(&pv_table[i].pv_list);
i = 0;
i = 0
i
i
0
i < pv_npg
i
i
pv_npg
pv_npg
i++
i
i
TAILQ_INIT(&pv_table[i].pv_list);
TAILQ_INIT(&pv_table[i].pv_list)
TAILQ_INIT
TAILQ_INIT
&pv_table[i].pv_list
pv_table[i].pv_list
pv_table[i]
pv_table
pv_table
i
i
pv_list
TAILQ_INIT(&pv_dummy.pv_list);
TAILQ_INIT(&pv_dummy.pv_list)
TAILQ_INIT
TAILQ_INIT
&pv_dummy.pv_list
pv_dummy.pv_list
pv_dummy
pv_dummy
pv_list
pmap_initialized = 1;
pmap_initialized = 1
pmap_initialized
pmap_initialized
1
for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++) {		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}
i = 0;
i = 0
i
i
0
i < PMAP_PREINIT_MAPPING_COUNT
i
i
PMAP_PREINIT_MAPPING_COUNT
PMAP_PREINIT_MAPPING_COUNT
i++
i
i
{		ppim = pmap_preinit_mapping + i;		if (ppim->va == 0)			continue;		/* Make the direct map consistent */		if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}		if (!bootverbose)			continue;		printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);	}
ppim = pmap_preinit_mapping + i;
ppim = pmap_preinit_mapping + i
ppim
ppim
pmap_preinit_mapping + i
pmap_preinit_mapping
pmap_preinit_mapping
i
i
if (ppim->va == 0)			continue;
ppim->va == 0
ppim->va
ppim
ppim
va
0
continue;
if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit) {			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}
ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit
ppim->pa < dmaplimit
ppim->pa
ppim
ppim
pa
dmaplimit
dmaplimit
ppim->pa + ppim->sz < dmaplimit
ppim->pa + ppim->sz
ppim->pa
ppim
ppim
pa
ppim->sz
ppim
ppim
sz
dmaplimit
dmaplimit
{			(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);		}
(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode);
(void)pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode)
void
void

pmap_change_attr(PHYS_TO_DMAP(ppim->pa),			    ppim->sz, ppim->mode)
pmap_change_attr
pmap_change_attr
PHYS_TO_DMAP(ppim->pa)
PHYS_TO_DMAP
PHYS_TO_DMAP
ppim->pa
ppim
ppim
pa
ppim->sz
ppim
ppim
sz
ppim->mode
ppim
ppim
mode
if (!bootverbose)			continue;
!bootverbose
bootverbose
bootverbose
continue;
printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode);
printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n", i,		    ppim->pa, ppim->va, ppim->sz, ppim->mode)
printf
printf
"PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\n"
i
i
ppim->pa
ppim
ppim
pa
ppim->va
ppim
ppim
va
ppim->sz
ppim
ppim
sz
ppim->mode
ppim
ppim
mode
mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN);
mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN)
mtx_init
mtx_init
&qframe_mtx
qframe_mtx
qframe_mtx
"qfrmlk"
NULL
NULL
MTX_SPIN
MTX_SPIN
error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe);
error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe)
error
error
vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,	    (vmem_addr_t *)&qframe)
vmem_alloc
vmem_alloc
kernel_arena
kernel_arena
PAGE_SIZE
PAGE_SIZE
M_BESTFIT | M_WAITOK
M_BESTFIT
M_BESTFIT
M_WAITOK
M_WAITOK
(vmem_addr_t *)&qframe
vmem_addr_t *
vmem_addr_t
vmem_addr_t
*
*
&qframe
qframe
qframe
if (error != 0)		panic("qframe allocation failed");
error != 0
error
error
0
panic("qframe allocation failed");
panic("qframe allocation failed")
panic
panic
"qframe allocation failed"
-----joern-----
(7,230,0)
(330,365,0)
(163,230,0)
(197,323,0)
(178,102,0)
(150,207,0)
(0,191,0)
(194,21,0)
(278,222,0)
(208,321,0)
(203,281,0)
(34,337,0)
(129,29,0)
(198,54,0)
(363,97,0)
(15,182,0)
(110,307,0)
(126,285,0)
(312,157,0)
(18,175,0)
(212,247,0)
(266,47,0)
(31,334,0)
(102,178,0)
(292,191,0)
(246,20,0)
(170,60,0)
(62,265,0)
(322,42,0)
(88,156,0)
(315,338,0)
(296,355,0)
(240,112,0)
(327,154,0)
(286,66,0)
(343,324,0)
(344,134,0)
(104,135,0)
(278,347,0)
(205,49,0)
(58,332,0)
(168,78,0)
(251,242,0)
(19,57,0)
(303,92,0)
(316,327,0)
(364,219,0)
(298,41,0)
(144,337,0)
(252,60,0)
(175,252,0)
(62,351,0)
(157,111,0)
(97,351,0)
(356,163,0)
(310,308,0)
(263,255,0)
(132,189,0)
(92,311,0)
(318,231,0)
(176,235,0)
(167,231,0)
(115,291,0)
(288,9,0)
(138,72,0)
(201,178,0)
(249,308,0)
(277,41,0)
(291,115,0)
(151,302,0)
(200,184,0)
(289,92,0)
(162,178,0)
(143,300,0)
(178,145,0)
(182,317,0)
(87,332,0)
(175,327,0)
(319,62,0)
(272,235,0)
(194,324,0)
(261,362,0)
(245,189,0)
(39,301,0)
(328,306,0)
(125,220,0)
(83,3,0)
(283,300,0)
(253,362,0)
(131,225,0)
(92,303,0)
(71,45,0)
(192,158,0)
(274,321,0)
(222,93,0)
(89,140,0)
(93,222,0)
(12,44,0)
(21,218,0)
(196,25,0)
(91,306,0)
(265,306,0)
(37,251,0)
(318,102,0)
(360,184,0)
(181,252,0)
(139,175,0)
(190,306,0)
(111,126,0)
(133,354,0)
(161,351,0)
(224,169,0)
(299,97,0)
(221,306,0)
(51,341,0)
(122,302,0)
(49,96,0)
(140,89,0)
(121,127,0)
(350,164,0)
(248,92,0)
(49,252,0)
(250,6,0)
(122,12,0)
(16,317,0)
(180,285,0)
(188,72,0)
(150,191,0)
(13,306,0)
(124,45,0)
(234,303,0)
(147,193,0)
(169,218,0)
(100,232,0)
(208,47,0)
(155,306,0)
(326,311,0)
(26,220,0)
(188,155,0)
(256,44,0)
(47,266,0)
(1,207,0)
(37,306,0)
(362,85,0)
(285,126,0)
(271,93,0)
(275,306,0)
(329,152,0)
(21,74,0)
(348,291,0)
(220,26,0)
(225,96,0)
(258,210,0)
(338,140,0)
(244,2,0)
(253,318,0)
(30,200,0)
(46,255,0)
(238,216,0)
(69,187,0)
(114,193,0)
(164,265,0)
(219,247,0)
(305,291,0)
(96,320,0)
(191,150,0)
(193,147,0)
(128,355,0)
(279,301,0)
(14,51,0)
(252,54,0)
(269,242,0)
(126,240,0)
(309,115,0)
(357,145,0)
(55,146,0)
(135,104,0)
(282,249,0)
(9,342,0)
(176,254,0)
(41,152,0)
(358,187,0)
(323,16,0)
(113,311,0)
(28,45,0)
(167,150,0)
(20,327,0)
(341,35,0)
(12,78,0)
(44,256,0)
(107,54,0)
(105,62,0)
(152,41,0)
(63,145,0)
(257,169,0)
(59,188,0)
(146,55,0)
(218,169,0)
(119,351,0)
(254,130,0)
(210,45,0)
(20,252,0)
(241,145,0)
(333,211,0)
(291,6,0)
(80,347,0)
(227,146,0)
(21,194,0)
(314,147,0)
(211,321,0)
(202,187,0)
(6,306,0)
(35,341,0)
(174,216,0)
(97,51,0)
(214,60,0)
(313,360,0)
(317,182,0)
(294,48,0)
(336,104,0)
(270,306,0)
(61,74,0)
(155,188,0)
(43,180,0)
(297,225,0)
(213,157,0)
(146,227,0)
(342,9,0)
(116,4,0)
(235,176,0)
(360,164,0)
(72,265,0)
(362,231,0)
(53,26,0)
(27,306,0)
(191,362,0)
(209,130,0)
(24,306,0)
(334,50,0)
(265,164,0)
(177,343,0)
(85,135,0)
(117,28,0)
(16,323,0)
(195,306,0)
(89,145,0)
(36,84,0)
(293,306,0)
(158,89,0)
(153,253,0)
(353,176,0)
(108,154,0)
(300,252,0)
(321,211,0)
(50,207,0)
(256,365,0)
(215,358,0)
(10,135,0)
(57,134,0)
(106,102,0)
(189,132,0)
(218,21,0)
(267,312,0)
(51,97,0)
(354,145,0)
(281,278,0)
(207,362,0)
(302,122,0)
(359,232,0)
(327,29,0)
(199,136,0)
(41,306,0)
(120,182,0)
(303,306,0)
(9,252,0)
(210,132,0)
(268,306,0)
(96,49,0)
(237,29,0)
(280,343,0)
(165,218,0)
(345,219,0)
(16,208,0)
(103,306,0)
(338,362,0)
(223,306,0)
(337,144,0)
(366,312,0)
(2,244,0)
(98,66,0)
(217,334,0)
(60,252,0)
(111,157,0)
(44,12,0)
(300,301,0)
(2,278,0)
(6,156,0)
(22,262,0)
(55,307,0)
(4,307,0)
(187,358,0)
(90,55,0)
(141,254,0)
(5,181,0)
(308,249,0)
(279,320,0)
(132,210,0)
(93,252,0)
(172,132,0)
(157,312,0)
(8,29,0)
(240,126,0)
(171,281,0)
(17,111,0)
(150,167,0)
(229,134,0)
(239,155,0)
(285,180,0)
(52,338,0)
(183,256,0)
(96,225,0)
(40,55,0)
(332,29,0)
(23,9,0)
(295,194,0)
(193,114,0)
(365,256,0)
(159,104,0)
(281,252,0)
(184,200,0)
(207,50,0)
(179,351,0)
(173,262,0)
(207,150,0)
(72,322,0)
(156,155,0)
(222,278,0)
(60,29,0)
(185,252,0)
(232,308,0)
(38,241,0)
(66,112,0)
(358,215,0)
(85,362,0)
(199,92,0)
(365,45,0)
(287,181,0)
(339,37,0)
(186,115,0)
(75,303,0)
(180,359,0)
(361,8,0)
(322,72,0)
(77,49,0)
(311,92,0)
(134,57,0)
(327,54,0)
(72,188,0)
(352,323,0)
(2,273,0)
(163,240,0)
(325,284,0)
(320,279,0)
(232,359,0)
(301,300,0)
(264,122,0)
(225,252,0)
(230,163,0)
(118,54,0)
(74,21,0)
(76,327,0)
(86,200,0)
(92,199,0)
(99,307,0)
(260,254,0)
(181,327,0)
(47,208,0)
(144,45,0)
(331,20,0)
(347,278,0)
(321,208,0)
(327,181,0)
(184,360,0)
(32,134,0)
(278,281,0)
(204,41,0)
(109,12,0)
(94,342,0)
(137,249,0)
(67,184,0)
(235,130,0)
(206,144,0)
(291,193,0)
(79,230,0)
(320,96,0)
(112,66,0)
(233,359,0)
(95,44,0)
(102,318,0)
(240,163,0)
(255,307,0)
(70,265,0)
(68,89,0)
(11,284,0)
(278,2,0)
(134,306,0)
(346,241,0)
(242,251,0)
(73,242,0)
(208,16,0)
(140,231,0)
(349,47,0)
(290,177,0)
(104,145,0)
(341,51,0)
(301,279,0)
(304,154,0)
(164,360,0)
(148,266,0)
(136,199,0)
(135,85,0)
(215,306,0)
(48,306,0)
(327,20,0)
(262,306,0)
(166,48,0)
(355,254,0)
(56,177,0)
(89,158,0)
(251,37,0)
(243,234,0)
(149,347,0)
(156,6,0)
(26,306,0)
(126,111,0)
(101,320,0)
(50,334,0)
(147,306,0)
(359,180,0)
(327,175,0)
(228,306,0)
(188,59,0)
(112,240,0)
(160,179,0)
(219,362,0)
(82,253,0)
(42,322,0)
(154,327,0)
(236,93,0)
(308,232,0)
(3,199,0)
(340,227,0)
(33,74,0)
(142,306,0)
(81,285,0)
(317,16,0)
(347,252,0)
(154,252,0)
(123,167,0)
(65,234,0)
(247,231,0)
(193,291,0)
(199,3,0)
(177,290,1)
(313,184,1)
(240,126,1)
(355,254,1)
(283,342,1)
(342,94,1)
(44,95,1)
(303,92,1)
(143,283,1)
(173,215,1)
(53,112,1)
(210,45,1)
(269,73,1)
(249,282,1)
(180,359,1)
(93,236,1)
(179,160,1)
(203,222,1)
(104,159,1)
(318,102,1)
(21,218,1)
(261,241,1)
(62,319,1)
(141,317,1)
(340,146,1)
(347,80,1)
(305,348,1)
(300,143,1)
(4,116,1)
(237,129,1)
(321,274,1)
(144,337,1)
(19,226,1)
(76,316,1)
(291,6,1)
(278,281,1)
(291,115,1)
(169,257,1)
(117,189,1)
(63,357,1)
(18,139,1)
(145,63,1)
(90,40,1)
(47,266,1)
(346,38,1)
(144,45,1)
(243,65,1)
(135,104,1)
(362,85,1)
(222,93,1)
(126,285,1)
(20,331,1)
(300,252,1)
(322,138,1)
(193,291,1)
(225,131,1)
(70,255,1)
(360,184,1)
(235,176,1)
(109,144,1)
(0,362,1)
(5,287,1)
(220,125,1)
(301,39,1)
(192,338,1)
(3,83,1)
(60,29,1)
(246,175,1)
(105,351,1)
(64,84,1)
(241,145,1)
(72,265,1)
(48,166,1)
(119,161,1)
(36,2,1)
(359,232,1)
(164,350,1)
(163,230,1)
(191,362,1)
(331,246,1)
(92,311,1)
(132,210,1)
(32,57,1)
(20,252,1)
(47,349,1)
(210,258,1)
(160,35,1)
(271,279,1)
(61,33,1)
(264,12,1)
(115,186,1)
(259,355,1)
(208,321,1)
(97,363,1)
(162,106,1)
(200,30,1)
(137,310,1)
(282,137,1)
(68,158,1)
(106,253,1)
(262,22,1)
(323,197,1)
(167,123,1)
(50,334,1)
(23,252,1)
(71,25,1)
(194,295,1)
(104,145,1)
(347,252,1)
(354,133,1)
(1,191,1)
(299,62,1)
(217,1,1)
(245,302,1)
(46,263,1)
(232,308,1)
(342,9,1)
(2,244,1)
(290,56,1)
(138,239,1)
(19,343,1)
(11,112,1)
(225,252,1)
(83,311,1)
(256,365,1)
(22,173,1)
(161,147,1)
(280,177,1)
(86,67,1)
(254,260,1)
(77,301,1)
(364,318,1)
(93,252,1)
(188,72,1)
(165,169,1)
(317,182,1)
(226,26,1)
(316,84,1)
(279,301,1)
(327,20,1)
(74,61,1)
(44,256,1)
(242,269,1)
(357,317,1)
(39,300,1)
(213,285,1)
(98,37,1)
(239,265,1)
(183,109,1)
(126,111,1)
(167,150,1)
(194,21,1)
(16,208,1)
(187,69,1)
(214,185,1)
(75,41,1)
(51,97,1)
(182,120,1)
(152,329,1)
(258,172,1)
(60,170,1)
(333,47,1)
(172,245,1)
(302,122,1)
(253,82,1)
(279,320,1)
(6,156,1)
(82,153,1)
(34,206,1)
(202,62,1)
(31,217,1)
(312,366,1)
(38,145,1)
(125,53,1)
(339,251,1)
(146,55,1)
(111,17,1)
(327,154,1)
(309,305,1)
(120,15,1)
(122,264,1)
(150,207,1)
(21,74,1)
(178,145,1)
(175,18,1)
(164,360,1)
(38,354,1)
(240,163,1)
(356,230,1)
(189,132,1)
(122,12,1)
(140,89,1)
(121,234,1)
(58,29,1)
(257,224,1)
(317,16,1)
(224,74,1)
(157,312,1)
(8,29,1)
(341,51,1)
(365,45,1)
(30,86,1)
(67,70,1)
(49,205,1)
(219,362,1)
(147,193,1)
(191,292,1)
(28,117,1)
(263,307,1)
(307,99,1)
(4,307,1)
(352,182,1)
(227,340,1)
(29,237,1)
(88,250,1)
(97,351,1)
(69,202,1)
(43,163,1)
(335,127,1)
(315,167,1)
(206,45,1)
(229,344,1)
(153,140,1)
(159,336,1)
(37,339,1)
(85,135,1)
(277,204,1)
(320,96,1)
(337,34,1)
(289,75,1)
(148,323,1)
(58,8,1)
(252,60,1)
(360,313,1)
(101,96,1)
(297,49,1)
(65,303,1)
(349,266,1)
(175,252,1)
(112,66,1)
(255,307,1)
(52,315,1)
(71,259,1)
(304,108,1)
(319,105,1)
(35,341,1)
(265,164,1)
(9,288,1)
(133,247,1)
(207,50,1)
(66,286,1)
(292,0,1)
(247,212,1)
(250,155,1)
(241,346,1)
(366,267,1)
(14,97,1)
(358,187,1)
(36,279,1)
(204,152,1)
(123,150,1)
(338,52,1)
(127,121,1)
(336,10,1)
(41,152,1)
(219,345,1)
(248,289,1)
(37,251,1)
(197,352,1)
(363,299,1)
(255,46,1)
(343,280,1)
(327,181,1)
(266,148,1)
(218,169,1)
(178,201,1)
(302,151,1)
(263,4,1)
(310,100,1)
(9,252,1)
(327,29,1)
(33,226,1)
(267,213,1)
(7,66,1)
(233,43,1)
(45,124,1)
(288,23,1)
(53,284,1)
(211,333,1)
(260,141,1)
(149,281,1)
(332,87,1)
(89,158,1)
(186,309,1)
(207,362,1)
(156,88,1)
(72,322,1)
(355,296,1)
(361,327,1)
(134,57,1)
(218,165,1)
(334,31,1)
(188,59,1)
(365,330,1)
(206,28,1)
(311,326,1)
(55,307,1)
(40,255,1)
(151,122,1)
(338,362,1)
(215,358,1)
(110,134,1)
(12,44,1)
(112,240,1)
(234,303,1)
(154,252,1)
(105,179,1)
(350,360,1)
(89,68,1)
(128,235,1)
(116,227,1)
(321,211,1)
(253,362,1)
(201,162,1)
(124,71,1)
(51,14,1)
(15,48,1)
(314,6,1)
(26,220,1)
(361,276,1)
(272,254,1)
(84,36,1)
(285,81,1)
(332,29,1)
(108,20,1)
(96,49,1)
(134,229,1)
(113,248,1)
(79,7,1)
(345,364,1)
(56,194,1)
(17,157,1)
(361,64,1)
(322,42,1)
(276,342,1)
(62,265,1)
(89,145,1)
(199,136,1)
(156,155,1)
(281,171,1)
(179,351,1)
(49,252,1)
(170,214,1)
(73,241,1)
(354,145,1)
(100,233,1)
(335,234,1)
(227,146,1)
(41,298,1)
(278,222,1)
(285,180,1)
(295,21,1)
(92,199,1)
(196,259,1)
(117,302,1)
(176,353,1)
(181,5,1)
(80,149,1)
(234,243,1)
(96,225,1)
(154,304,1)
(286,98,1)
(193,114,1)
(62,351,1)
(236,271,1)
(325,11,1)
(185,332,1)
(95,256,1)
(308,249,1)
(111,157,1)
(212,219,1)
(99,110,1)
(10,261,1)
(155,188,1)
(158,192,1)
(129,262,1)
(87,58,1)
(166,294,1)
(150,191,1)
(28,45,1)
(357,144,1)
(284,325,1)
(320,101,1)
(348,314,1)
(326,113,1)
(139,181,1)
(208,47,1)
(278,347,1)
(296,128,1)
(55,90,1)
(344,32,1)
(327,175,1)
(181,252,1)
(2,278,1)
(94,9,1)
(171,203,1)
(102,178,1)
(163,356,1)
(199,3,1)
(205,77,1)
(230,79,1)
(16,323,1)
(8,361,1)
(298,277,1)
(351,119,1)
(184,200,1)
(353,272,1)
(131,297,1)
(176,254,1)
(57,19,1)
(301,300,1)
(357,355,1)
(274,211,1)
(251,242,1)
(281,252,1)
(25,196,1)
(330,183,1)
(287,76,1)
(81,180,1)
(329,332,1)
(264,144,2)
(315,241,2)
(245,302,2)
(139,84,2)
(235,176,2)
(255,307,2)
(169,74,2)
(93,252,2)
(341,51,2)
(2,279,2)
(163,230,2)
(196,259,2)
(308,163,2)
(47,266,2)
(342,9,2)
(179,351,2)
(133,241,2)
(207,362,2)
(287,84,2)
(23,332,2)
(8,332,2)
(56,226,2)
(189,132,2)
(49,252,2)
(299,62,2)
(175,252,2)
(197,182,2)
(206,355,2)
(72,265,2)
(44,256,2)
(193,291,2)
(362,85,2)
(96,225,2)
(207,191,2)
(62,351,2)
(93,279,2)
(278,281,2)
(155,188,2)
(143,342,2)
(9,332,2)
(257,74,2)
(290,226,2)
(266,323,2)
(296,317,2)
(121,234,2)
(0,241,2)
(338,241,2)
(144,337,2)
(321,47,2)
(77,301,2)
(126,285,2)
(185,332,2)
(1,191,2)
(258,302,2)
(356,66,2)
(85,135,2)
(332,29,2)
(213,285,2)
(51,62,2)
(36,342,2)
(100,163,2)
(334,191,2)
(354,241,2)
(346,241,2)
(163,66,2)
(327,84,2)
(97,62,2)
(176,254,2)
(89,158,2)
(297,301,2)
(208,323,2)
(208,47,2)
(361,332,2)
(162,241,2)
(338,362,2)
(355,317,2)
(111,157,2)
(170,332,2)
(323,182,2)
(126,163,2)
(327,175,2)
(92,311,2)
(147,193,2)
(58,332,2)
(330,144,2)
(188,59,2)
(265,164,2)
(225,301,2)
(17,285,2)
(225,252,2)
(301,300,2)
(341,62,2)
(92,199,2)
(64,84,2)
(154,252,2)
(300,252,2)
(217,191,2)
(33,226,2)
(337,355,2)
(21,226,2)
(254,317,2)
(304,84,2)
(347,279,2)
(189,302,2)
(11,112,2)
(279,320,2)
(116,255,2)
(104,241,2)
(95,144,2)
(159,241,2)
(160,62,2)
(104,145,2)
(76,84,2)
(43,163,2)
(222,279,2)
(212,241,2)
(256,144,2)
(2,278,2)
(25,259,2)
(241,241,2)
(89,145,2)
(364,241,2)
(60,332,2)
(21,74,2)
(96,49,2)
(206,144,2)
(16,182,2)
(12,44,2)
(12,144,2)
(327,154,2)
(252,332,2)
(345,241,2)
(267,285,2)
(132,302,2)
(285,180,2)
(340,255,2)
(303,92,2)
(327,29,2)
(327,181,2)
(80,279,2)
(194,21,2)
(332,332,2)
(214,332,2)
(354,145,2)
(7,66,2)
(5,84,2)
(240,126,2)
(194,226,2)
(218,74,2)
(181,252,2)
(219,362,2)
(321,211,2)
(41,152,2)
(317,182,2)
(140,241,2)
(157,285,2)
(180,359,2)
(285,163,2)
(55,307,2)
(87,332,2)
(102,178,2)
(85,241,2)
(199,3,2)
(18,84,2)
(301,342,2)
(167,241,2)
(34,355,2)
(144,144,2)
(281,252,2)
(232,308,2)
(35,62,2)
(117,144,2)
(144,45,2)
(359,232,2)
(234,303,2)
(127,234,2)
(256,365,2)
(201,241,2)
(224,74,2)
(291,115,2)
(347,252,2)
(172,302,2)
(50,191,2)
(246,84,2)
(40,255,2)
(302,144,2)
(278,222,2)
(20,84,2)
(222,93,2)
(68,241,2)
(111,285,2)
(193,114,2)
(359,163,2)
(81,163,2)
(28,144,2)
(55,255,2)
(34,144,2)
(35,341,2)
(210,302,2)
(259,355,2)
(148,323,2)
(8,29,2)
(47,323,2)
(263,255,2)
(62,265,2)
(44,144,2)
(260,317,2)
(135,241,2)
(318,241,2)
(349,323,2)
(230,66,2)
(316,84,2)
(365,45,2)
(331,84,2)
(122,12,2)
(102,241,2)
(52,241,2)
(320,96,2)
(158,241,2)
(82,241,2)
(192,241,2)
(20,252,2)
(97,351,2)
(205,301,2)
(363,62,2)
(183,144,2)
(188,72,2)
(337,144,2)
(26,220,2)
(61,226,2)
(178,145,2)
(215,358,2)
(134,57,2)
(140,89,2)
(112,240,2)
(122,144,2)
(106,241,2)
(72,322,2)
(94,332,2)
(343,226,2)
(150,191,2)
(156,155,2)
(50,334,2)
(360,184,2)
(144,355,2)
(236,279,2)
(84,342,2)
(171,279,2)
(249,163,2)
(180,163,2)
(241,145,2)
(247,241,2)
(178,241,2)
(51,97,2)
(177,226,2)
(281,279,2)
(327,20,2)
(151,122,2)
(71,355,2)
(6,156,2)
(38,241,2)
(240,66,2)
(150,207,2)
(274,47,2)
(317,16,2)
(146,55,2)
(310,163,2)
(318,102,2)
(320,301,2)
(278,347,2)
(79,66,2)
(291,6,2)
(150,241,2)
(9,252,2)
(128,317,2)
(255,255,2)
(207,50,2)
(295,226,2)
(302,122,2)
(272,317,2)
(280,226,2)
(240,163,2)
(46,255,2)
(366,285,2)
(175,84,2)
(123,241,2)
(292,241,2)
(101,301,2)
(219,241,2)
(154,84,2)
(184,200,2)
(74,226,2)
(288,332,2)
(112,66,2)
(49,301,2)
(108,84,2)
(233,163,2)
(164,360,2)
(322,42,2)
(181,84,2)
(325,112,2)
(312,285,2)
(126,111,2)
(96,301,2)
(157,312,2)
(282,163,2)
(342,332,2)
(300,342,2)
(191,241,2)
(352,182,2)
(146,255,2)
(353,317,2)
(62,62,2)
(203,279,2)
(218,169,2)
(227,146,2)
(132,210,2)
(276,342,2)
(261,241,2)
(179,62,2)
(232,163,2)
(124,355,2)
(251,242,2)
(105,62,2)
(271,279,2)
(89,241,2)
(191,362,2)
(235,317,2)
(283,342,2)
(16,323,2)
(167,150,2)
(253,241,2)
(45,355,2)
(2,244,2)
(109,144,2)
(253,362,2)
(333,47,2)
(31,191,2)
(208,321,2)
(278,279,2)
(39,342,2)
(176,317,2)
(252,60,2)
(14,62,2)
(37,251,2)
(149,279,2)
(211,47,2)
(336,241,2)
(365,144,2)
(137,163,2)
(4,307,2)
(131,301,2)
(227,255,2)
(210,45,2)
(90,255,2)
(141,317,2)
(284,112,2)
(135,104,2)
(279,301,2)
(60,29,2)
(362,241,2)
(10,241,2)
(358,187,2)
(16,208,2)
(21,218,2)
(355,254,2)
(28,45,2)
(319,62,2)
(165,74,2)
(4,255,2)
(199,136,2)
(279,342,2)
(153,241,2)
(308,249,2)
-----------------------------------
(0,mpte)
(1,mpte)
(2,(void)
(3,&qframe)
(4,i++)
(5,pa)
(6,s = round_page(s)
(7,cpu_feature)
(8,i++)
(9,ppim->va)
(10,KPTphys)
(11,workaround_erratum383)
(12,ret = vm_page_blacklist_add(0x40000000 +\n\\n\\t\\t\\t\\t    ptoa(i)
(13,pv_npg)
(14,pv_list)
(15,vm_guest)
(16,cpu_vendor_id == CPU_VENDOR_INTEL &&\n\\n\\t    CPUID_TO_FAMILY(cpu_id)
(17,0)
(18,va)
(19,pv_chunks_mutex)
(20,ppim->sz)
(21,MAXPAGESIZES > 1 && pagesizes[1] == 0)
(22,1)
(23,ppim)
(24,ret)
(25,printf("SKZ63: skipping 4M RAM starting "\n\\n\\t\\t\\t\\t    "at physical 1G\\n")
(26,TUNABLE_INT_FETCH("vm.pmap.pg_ps_enabled", &pg_ps_enabled)
(27,for (i = 0; i < nkpt; i++)
(28,i++)
(29,i = 0)
(30,1)
(31,vm_page_array_size)
(32,"pmap pv chunk list")
(33,MAXPAGESIZES)
(34,0x400000)
(35,TAILQ_INIT(&pv_table[i].pv_list)
(36,bootverbose)
(37,atomic_add_int(&vm_cnt.v_wire_count, nkpt)
(38,i)
(39,dmaplimit)
(40,pv_list_locks)
(41,mtx_init(&qframe_mtx, "qfrmlk", NULL, MTX_SPIN)
(42,struct md_page)
(43,cpu_feature2)
(44,vm_page_blacklist_add(0x40000000 +\n\\n\\t\\t\\t\\t    ptoa(i)
(45,i = 0)
(46,NPV_LIST_LOCKS)
(47,CPUID_TO_FAMILY(cpu_id)
(48,vm_page_blacklist_add(0, bootverbose)
(49,ppim->pa)
(50,&vm_page_array[vm_page_array_size])
(51,pv_table[i].pv_list)
(52,pindex)
(53,"vm.pmap.pg_ps_enabled")
(54,)
(55,pv_list_locks[i])
(56,pagesizes)
(57,&pv_chunks_mutex)
(58,i)
(59,vm_size_t)
(60,pmap_preinit_mapping + i)
(61,1)
(62,i < pv_npg)
(63,0)
(64,continue;)
(65,error)
(66,vm_guest != VM_GUEST_NO)
(67,vm_phys_segs)
(68,i)
(69,pv_list)
(70,pv_npg)
(71,i)
(72,pv_npg * sizeof(struct md_page)
(73,vm_cnt)
(74,MAXPAGESIZES > 1)
(75,error)
(76,i)
(77,ppim)
(78,)
(79,CPUID_SS)
(80,mode)
(81,0)
(82,phys_addr)
(83,qframe)
(84,!bootverbose)
(85,PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT)
(86,vm_phys_nsegs)
(87,PMAP_PREINIT_MAPPING_COUNT)
(88,s)
(89,pmap_pde_pindex(KERNBASE)
(90,i)
(91,error)
(92,vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,\n\\n\\t    (vmem_addr_t *)
(93,ppim->pa)
(94,0)
(95,FALSE)
(96,ppim->pa + ppim->sz)
(97,pv_table[i])
(98,vm_guest)
(99,0)
(100,CPUID2_SSE41)
(101,dmaplimit)
(102,KPTphys + (i << PAGE_SHIFT)
(103,skz63)
(104,i << PAGE_SHIFT)
(105,i)
(106,KPTphys)
(107,if (ppim->va == 0)
(108,ppim)
(109,ret)
(110,i)
(111,(amd_feature2 & (AMDID2_XOP |\n\\n\\t    AMDID2_FMA4)
(112,vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS)
(113,M_BESTFIT)
(114,struct md_page *)
(115,M_WAITOK | M_ZERO)
(116,i)
(117,i)
(118,if (ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit)
(119,0)
(120,VM_GUEST_NO)
(121,"qframe allocation failed")
(122,!ret)
(123,"pmap_init: page table page is out of range")
(124,0)
(125,pg_ps_enabled)
(126,(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(127,panic("qframe allocation failed")
(128,skz63)
(129,i)
(130,)
(131,sz)
(132,0x40000000 + ptoa(i)
(133,i)
(134,mtx_init(&pv_chunks_mutex, "pmap pv chunk list", NULL, MTX_DEF)
(135,KPTphys + (i << PAGE_SHIFT)
(136,vmem_addr_t *)
(137,CPUID2_AVX)
(138,pv_npg)
(139,ppim)
(140,mpte->pindex = pmap_pde_pindex(KERNBASE)
(141,skz63)
(142,i)
(143,pa)
(144,i < atop(0x400000)
(145,i = 0)
(146,&pv_list_locks[i])
(147,pv_table = (struct md_page *)
(148,cpu_id)
(149,ppim)
(150,mpte >= vm_page_array &&\n\\n\\t\\t    mpte < &vm_page_array[vm_page_array_size])
(151,bootverbose)
(152,&qframe_mtx)
(153,mpte)
(154,ppim->mode)
(155,s = (vm_size_t)
(156,round_page(s)
(157,amd_feature2 & (AMDID2_XOP |\n\\n\\t    AMDID2_FMA4)
(158,pmap_pde_pindex(KERNBASE)
(159,PAGE_SHIFT)
(160,i)
(161,i)
(162,i)
(163,(cpu_feature & CPUID_SS)
(164,howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
(165,0)
(166,bootverbose)
(167,KASSERT(mpte >= vm_page_array &&\n\\n\\t\\t    mpte < &vm_page_array[vm_page_array_size],\n\\n\\t\\t    ("pmap_init: page table page is out of range")
(168,if (!ret && bootverbose)
(169,pagesizes[1])
(170,i)
(171,sz)
(172,0x40000000)
(173,pmap_initialized)
(174,for (i = 0; i < atop(0x400000)
(175,ppim->va)
(176,&skz63)
(177,pagesizes[1])
(178,i << PAGE_SHIFT)
(179,i++)
(180,cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(181,ppim->pa)
(182,vm_guest == VM_GUEST_NO)
(183,0x40000000)
(184,vm_phys_segs[vm_phys_nsegs - 1])
(185,ppim)
(186,M_ZERO)
(187,pv_dummy.pv_list)
(188,(vm_size_t)
(189,printf("page at %#lx already used\\n",\n\\n\\t\\t\\t\\t\\t    0x40000000 + ptoa(i)
(190,for (i = 0; i < PMAP_PREINIT_MAPPING_COUNT; i++)
(191,mpte >= vm_page_array)
(192,KERNBASE)
(193,(struct md_page *)
(194,KASSERT(MAXPAGESIZES > 1 && pagesizes[1] == 0,\n\\n\\t\\t    ("pmap_init: can\'t assign to pagesizes[1]")
(195,for (i = 0; i < pv_npg; i++)
(196,"SKZ63: skipping 4M RAM starting "\n\\n\\t\\t\\t\\t    "at physical 1G\\n")
(197,CPU_VENDOR_INTEL)
(198,if (!bootverbose)
(199,(vmem_addr_t *)
(200,vm_phys_nsegs - 1)
(201,PAGE_SHIFT)
(202,pv_dummy)
(203,ppim)
(204,"qfrmlk")
(205,pa)
(206,i)
(207,mpte < &vm_page_array[vm_page_array_size])
(208,CPUID_TO_FAMILY(cpu_id)
(209,if (skz63 != 0)
(210,ptoa(i)
(211,CPUID_TO_MODEL(cpu_id)
(212,1)
(213,amd_feature2)
(214,pmap_preinit_mapping)
(215,TAILQ_INIT(&pv_dummy.pv_list)
(216,)
(217,vm_page_array)
(218,pagesizes[1] == 0)
(219,mpte->wire_count)
(220,&pg_ps_enabled)
(221,if (vm_guest != VM_GUEST_NO && (cpu_feature & CPUID_SS)
(222,PHYS_TO_DMAP(ppim->pa)
(223,ppim)
(224,pagesizes)
(225,ppim->sz)
(226,pg_ps_enabled)
(227,rw_init(&pv_list_locks[i], "pmap pv list")
(228,for (i = 0; i < NPV_LIST_LOCKS; i++)
(229,MTX_DEF)
(230,cpu_feature & CPUID_SS)
(231,)
(232,CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(233,CPUID2_SSSE3)
(234,error != 0)
(235,TUNABLE_INT_FETCH("hw.skz63_enable", &skz63)
(236,pa)
(237,0)
(238,if (bootverbose)
(239,s)
(240,(cpu_feature & CPUID_SS)
(241,i < nkpt)
(242,vm_cnt.v_wire_count)
(243,0)
(244,void)
(245,"page at %#lx already used\\n")
(246,ppim)
(247,mpte->wire_count = 1)
(248,PAGE_SIZE)
(249,CPUID2_AVX | CPUID2_XSAVE)
(250,s)
(251,&vm_cnt.v_wire_count)
(252,ppim = pmap_preinit_mapping + i)
(253,mpte->phys_addr)
(254,skz63 = 1)
(255,i < NPV_LIST_LOCKS)
(256,0x40000000 +\n\\n\\t\\t\\t\\t    ptoa(i)
(257,1)
(258,i)
(259,bootverbose)
(260,1)
(261,mpte)
(262,pmap_initialized = 1)
(263,i)
(264,ret)
(265,pv_npg = howmany(vm_phys_segs[vm_phys_nsegs - 1].end, NBPDR)
(266,CPUID_TO_FAMILY(cpu_id)
(267,AMDID2_XOP)
(268,if (pg_ps_enabled)
(269,v_wire_count)
(270,s)
(271,ppim)
(272,"hw.skz63_enable")
(273,)
(274,0x55)
(275,if (error != 0)
(276,continue;)
(277,NULL)
(278,pmap_change_attr(PHYS_TO_DMAP(ppim->pa)
(279,ppim->pa < dmaplimit && ppim->pa + ppim->sz < dmaplimit)
(280,NBPDR)
(281,ppim->sz)
(282,CPUID2_XSAVE)
(283,ppim)
(284,workaround_erratum383 = 1)
(285,(cpu_feature2 & (CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(286,VM_GUEST_NO)
(287,ppim)
(288,va)
(289,kernel_arena)
(290,1)
(291,kmem_malloc(kernel_arena, s,\n\\n\\t    M_WAITOK | M_ZERO)
(292,vm_page_array)
(293,mpte)
(294,0)
(295,"pmap_init: can\'t assign to pagesizes[1]")
(296,0)
(297,ppim)
(298,MTX_SPIN)
(299,pv_table)
(300,ppim->pa)
(301,ppim->pa < dmaplimit)
(302,!ret && bootverbose)
(303,error = vmem_alloc(kernel_arena, PAGE_SIZE, M_BESTFIT | M_WAITOK,\n\\n\\t    (vmem_addr_t *)
(304,mode)
(305,s)
(306,)
(307,i = 0)
(308,CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(309,M_WAITOK)
(310,CPUID2_AESNI)
(311,M_BESTFIT | M_WAITOK)
(312,AMDID2_XOP |\n\\n\\t    AMDID2_FMA4)
(313,end)
(314,pv_table)
(315,mpte)
(316,"PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\\n")
(317,vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&\n\\n\\t    CPUID_TO_FAMILY(cpu_id)
(318,mpte->phys_addr = KPTphys + (i << PAGE_SHIFT)
(319,pv_npg)
(320,ppim->pa + ppim->sz < dmaplimit)
(321,CPUID_TO_MODEL(cpu_id)
(322,sizeof(struct md_page)
(323,cpu_vendor_id == CPU_VENDOR_INTEL)
(324,)
(325,1)
(326,M_WAITOK)
(327,printf("PPIM %u: PA=%#lx, VA=%#lx, size=%#lx, mode=%#x\\n", i,\n\\n\\t\\t    ppim->pa, ppim->va, ppim->sz, ppim->mode)
(328,if (vm_guest == VM_GUEST_NO && cpu_vendor_id == CPU_VENDOR_INTEL &&\n\\n\\t    CPUID_TO_FAMILY(cpu_id)
(329,qframe_mtx)
(330,i)
(331,sz)
(332,i < PMAP_PREINIT_MAPPING_COUNT)
(333,cpu_id)
(334,vm_page_array[vm_page_array_size])
(335,RET)
(336,i)
(337,atop(0x400000)
(338,mpte->pindex)
(339,nkpt)
(340,"pmap pv list")
(341,&pv_table[i].pv_list)
(342,ppim->va == 0)
(343,pagesizes[1] = NBPDR)
(344,NULL)
(345,wire_count)
(346,nkpt)
(347,ppim->mode)
(348,kernel_arena)
(349,0x6)
(350,NBPDR)
(351,i = 0)
(352,cpu_vendor_id)
(353,skz63)
(354,i++)
(355,skz63 != 0)
(356,0)
(357,i)
(358,&pv_dummy.pv_list)
(359,CPUID2_SSSE3 | CPUID2_SSE41 | CPUID2_AESNI |\n\\n\\t    CPUID2_AVX | CPUID2_XSAVE)
(360,vm_phys_segs[vm_phys_nsegs - 1].end)
(361,i)
(362,mpte = PHYS_TO_VM_PAGE(KPTphys + (i << PAGE_SHIFT)
(363,i)
(364,mpte)
(365,ptoa(i)
(366,AMDID2_FMA4)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^