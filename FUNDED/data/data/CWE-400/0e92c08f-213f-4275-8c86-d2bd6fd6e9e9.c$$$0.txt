-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,48,49,50,51,57,58,59,60,64,68,70,74,75,78,80
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticTrue
staticTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(30,21,0)
(25,29,0)
(5,29,0)
(21,9,0)
(1,19,0)
(4,15,0)
(36,15,0)
(7,4,0)
(26,8,0)
(35,2,0)
(9,6,0)
(16,4,0)
(36,17,0)
(2,35,0)
(38,9,0)
(28,0,0)
(0,1,0)
(4,7,0)
(7,20,0)
(1,0,0)
(15,4,0)
(39,2,0)
(8,34,0)
(22,8,0)
(27,22,0)
(22,9,0)
(0,9,0)
(23,34,0)
(11,25,0)
(31,1,0)
(36,9,0)
(17,36,0)
(20,7,0)
(2,12,0)
(15,36,0)
(14,29,0)
(24,29,0)
(9,36,0)
(8,22,0)
(34,6,0)
(35,21,0)
(21,35,0)
(39,6,0)
(19,6,0)
(40,0,0)
(37,22,0)
(2,39,0)
(12,2,0)
(18,25,0)
(13,21,0)
(32,19,0)
(38,10,1)
(21,30,1)
(13,19,1)
(31,0,1)
(35,21,1)
(32,1,1)
(26,22,1)
(8,26,1)
(4,7,1)
(33,3,1)
(23,8,1)
(11,18,1)
(0,40,1)
(25,11,1)
(36,15,1)
(7,20,1)
(15,4,1)
(1,0,1)
(22,37,1)
(30,13,1)
(2,35,1)
(10,25,1)
(28,34,1)
(16,38,1)
(3,10,1)
(36,17,1)
(2,12,1)
(7,16,1)
(40,28,1)
(22,9,1)
(1,31,1)
(0,9,1)
(3,39,1)
(8,22,1)
(19,32,1)
(37,27,1)
(34,23,1)
(27,9,1)
(39,2,1)
(21,9,1)
(9,36,1)
(39,2,2)
(7,20,2)
(36,17,2)
(15,10,2)
(39,10,2)
(34,10,2)
(8,10,2)
(30,10,2)
(21,10,2)
(4,10,2)
(1,10,2)
(26,10,2)
(36,15,2)
(23,10,2)
(9,36,2)
(27,10,2)
(21,9,2)
(9,10,2)
(40,10,2)
(0,9,2)
(15,4,2)
(2,35,2)
(8,22,2)
(31,10,2)
(28,10,2)
(16,10,2)
(22,9,2)
(35,21,2)
(32,10,2)
(2,12,2)
(1,0,2)
(22,10,2)
(13,10,2)
(35,10,2)
(19,10,2)
(4,7,2)
(7,10,2)
(2,10,2)
(37,10,2)
(38,10,2)
(36,10,2)
(0,10,2)
-----------------------------------
(0,data[0])
(1,data[0].intTwo)
(2,(twoIntsStruct *)
(3,staticTrue)
(4,100*sizeof(struct _twoIntsStruct)
(5,if(staticTrue)
(6,)
(7,sizeof(struct _twoIntsStruct)
(8,data[0].intOne)
(9,data = (struct _twoIntsStruct *)
(10,staticTrue)
(11,NULL)
(12,twoIntsStruct *)
(13,data)
(14,if(staticTrue)
(15,ALLOCA(100*sizeof(struct _twoIntsStruct)
(16,100)
(17,struct _twoIntsStruct *)
(18,data)
(19,data[0].intTwo = 0)
(20,struct _twoIntsStruct)
(21,data[0])
(22,data[0])
(23,0)
(24,data)
(25,data = NULL)
(26,intOne)
(27,data)
(28,data)
(29,)
(30,0)
(31,intTwo)
(32,0)
(33,RET)
(34,data[0].intOne = 0)
(35,&data[0])
(36,(struct _twoIntsStruct *)
(37,0)
(38,data)
(39,printStructLine((twoIntsStruct *)
(40,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^