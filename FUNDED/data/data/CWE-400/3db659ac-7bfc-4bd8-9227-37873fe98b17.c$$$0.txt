-----label-----
0
-----code-----
static void good1()
{
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
74,76
75,76
75,77
76,77
81,82
82,83
82,84
83,84
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
103,104
105,106
105,107
106,107
108,109
109,110
109,111
110,111
113,114
113,115
114,115
114,116
115,116
117,118
119,120
119,121
119,122
119,123
120,121
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
128,130
129,130
129,131
130,131
135,136
136,137
136,138
137,138
137,139
138,139
138,140
139,140
144,145
145,146
145,147
146,147
148,149
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,9,10,15,16,22,24,25,30,32,35,37,41,42,46,48,53,55,59,61,62,68,69,70,71,77,78,79,80,84,88,89,93,97,99,102,104,107,111,112,116,118,123,125,131,132,133,134,140,141,142,143,147,151,152,156,158
-----computeFrom-----
7,8
7,9
36,37
36,38
44,45
44,46
64,65
64,66
73,74
73,75
91,92
91,93
105,106
105,107
114,115
114,116
121,122
121,123
127,128
127,129
136,137
136,138
-----guardedBy-----
116,125
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
twoIntsStruct * tmpData;
twoIntsStruct * tmpData;
twoIntsStruct
twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
tmpData
tmpData
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(13,26,0)
(79,76,0)
(14,9,0)
(1,45,0)
(71,74,0)
(23,79,0)
(52,9,0)
(0,29,0)
(22,76,0)
(26,13,0)
(55,5,0)
(31,22,0)
(36,30,0)
(63,76,0)
(78,28,0)
(22,56,0)
(73,86,0)
(81,16,0)
(2,59,0)
(60,62,0)
(59,36,0)
(58,40,0)
(70,86,0)
(38,28,0)
(40,58,0)
(54,22,0)
(39,68,0)
(78,5,0)
(5,55,0)
(9,5,0)
(68,83,0)
(25,62,0)
(46,34,0)
(3,68,0)
(77,68,0)
(29,3,0)
(0,9,0)
(64,75,0)
(12,79,0)
(4,1,0)
(3,29,0)
(66,68,0)
(35,13,0)
(33,70,0)
(86,49,0)
(13,70,0)
(61,79,0)
(7,84,0)
(15,56,0)
(87,18,0)
(42,0,0)
(47,40,0)
(37,69,0)
(28,78,0)
(69,76,0)
(40,48,0)
(53,58,0)
(18,10,0)
(82,87,0)
(30,36,0)
(85,27,0)
(20,52,0)
(57,48,0)
(5,9,0)
(76,45,0)
(62,34,0)
(29,0,0)
(6,0,0)
(62,60,0)
(9,68,0)
(69,68,0)
(5,78,0)
(8,60,0)
(28,27,0)
(61,1,0)
(75,73,0)
(48,68,0)
(27,28,0)
(56,22,0)
(32,68,0)
(36,59,0)
(16,45,0)
(86,70,0)
(51,52,0)
(69,9,0)
(74,80,0)
(44,60,0)
(49,86,0)
(18,87,0)
(24,58,0)
(50,61,0)
(56,16,0)
(70,9,0)
(79,61,0)
(34,68,0)
(11,26,0)
(70,13,0)
(86,73,0)
(59,76,0)
(73,68,0)
(43,59,0)
(72,84,0)
(30,45,0)
(60,9,0)
(67,17,0)
(58,9,0)
(65,76,0)
(21,75,0)
(41,73,0)
(76,73,0)
(58,9,1)
(22,76,1)
(59,2,1)
(52,20,1)
(86,49,1)
(63,75,1)
(69,9,1)
(19,69,1)
(81,56,1)
(85,38,1)
(42,6,1)
(1,4,1)
(70,13,1)
(13,26,1)
(76,65,1)
(9,5,1)
(74,71,1)
(36,59,1)
(62,25,1)
(37,75,1)
(6,34,1)
(11,35,1)
(22,54,1)
(40,58,1)
(4,61,1)
(53,24,1)
(76,73,1)
(78,28,1)
(60,44,1)
(69,76,1)
(52,9,1)
(28,27,1)
(75,73,1)
(46,62,1)
(31,1,1)
(75,21,1)
(15,22,1)
(43,16,1)
(44,8,1)
(5,55,1)
(54,31,1)
(61,79,1)
(2,43,1)
(23,12,1)
(59,76,1)
(58,53,1)
(24,52,1)
(19,74,1)
(57,40,1)
(48,57,1)
(8,48,1)
(56,15,1)
(87,82,1)
(79,76,1)
(61,50,1)
(16,81,1)
(40,47,1)
(62,60,1)
(51,9,1)
(60,9,1)
(27,85,1)
(18,87,1)
(25,60,1)
(38,14,1)
(70,9,1)
(73,86,1)
(35,33,1)
(7,72,1)
(30,36,1)
(79,23,1)
(14,84,1)
(12,76,1)
(56,22,1)
(21,64,1)
(86,70,1)
(0,9,1)
(47,58,1)
(29,0,1)
(5,78,1)
(37,30,1)
(64,73,1)
(24,18,1)
(34,46,1)
(71,84,1)
(65,63,1)
(41,3,1)
(33,41,1)
(3,29,1)
(84,7,1)
(0,42,1)
(26,11,1)
(82,52,1)
(50,79,1)
(69,37,1)
(20,51,1)
(70,13,2)
(41,84,2)
(73,86,2)
(23,75,2)
(76,73,2)
(60,84,2)
(16,75,2)
(62,84,2)
(46,84,2)
(48,84,2)
(61,75,2)
(57,84,2)
(9,5,2)
(36,75,2)
(28,27,2)
(13,84,2)
(0,84,2)
(37,84,2)
(5,84,2)
(18,87,2)
(61,79,2)
(58,84,2)
(4,75,2)
(50,75,2)
(22,75,2)
(9,84,2)
(76,75,2)
(36,59,2)
(29,0,2)
(78,84,2)
(65,75,2)
(44,84,2)
(74,84,2)
(3,84,2)
(69,76,2)
(5,78,2)
(12,75,2)
(81,75,2)
(69,9,2)
(31,75,2)
(15,75,2)
(14,84,2)
(40,58,2)
(40,84,2)
(30,75,2)
(53,84,2)
(20,84,2)
(75,73,2)
(47,84,2)
(22,76,2)
(60,9,2)
(30,36,2)
(70,9,2)
(2,75,2)
(35,84,2)
(59,76,2)
(1,75,2)
(56,22,2)
(79,75,2)
(26,84,2)
(86,70,2)
(27,84,2)
(34,84,2)
(75,84,2)
(78,28,2)
(71,84,2)
(13,26,2)
(33,84,2)
(8,84,2)
(52,84,2)
(28,84,2)
(25,84,2)
(6,84,2)
(38,84,2)
(85,84,2)
(29,84,2)
(86,84,2)
(87,52,2)
(51,84,2)
(62,60,2)
(11,84,2)
(3,29,2)
(56,75,2)
(58,9,2)
(54,75,2)
(24,84,2)
(59,75,2)
(52,9,2)
(5,55,2)
(18,52,2)
(86,49,2)
(63,75,2)
(64,84,2)
(79,76,2)
(73,84,2)
(70,84,2)
(21,84,2)
(42,84,2)
(43,75,2)
(0,9,2)
(69,84,2)
(82,52,2)
-----------------------------------
(0,data[0])
(1,data[0].intOne = 1)
(2,0)
(3,printStructLine(&data[0])
(4,1)
(5,(twoIntsStruct *)
(6,data)
(7,5)
(8,data)
(9,* data = (twoIntsStruct *)
(10,)
(11,twoIntsStruct)
(12,data)
(13,(130000)
(14,data)
(15,intTwo)
(16,data[0].intTwo = 1)
(17,)
(18,exit(-1)
(19,RET)
(20,NULL)
(21,NULL)
(22,data[0])
(23,0)
(24,data)
(25,intTwo)
(26,sizeof(twoIntsStruct)
(27,sizeof(twoIntsStruct)
(28,100*sizeof(twoIntsStruct)
(29,&data[0])
(30,printStructLine(&data[0])
(31,data)
(32,if (data == NULL)
(33,data)
(34,data[0].intTwo = 0)
(35,130000)
(36,&data[0])
(37,data)
(38,100)
(39,if (tmpData != NULL)
(40,data[0].intOne)
(41,tmpData)
(42,0)
(43,data)
(44,0)
(45,)
(46,0)
(47,intOne)
(48,data[0].intOne = 0)
(49,twoIntsStruct *)
(50,intOne)
(51,data)
(52,data == NULL)
(53,0)
(54,0)
(55,twoIntsStruct *)
(56,data[0].intTwo)
(57,0)
(58,data[0])
(59,data[0])
(60,data[0])
(61,data[0].intOne)
(62,data[0].intTwo)
(63,data)
(64,tmpData)
(65,tmpData)
(66,tmpData)
(67,if(globalFive!=5)
(68,)
(69,free(data)
(70,realloc(data, (130000)
(71,"Benign, fixed string")
(72,globalFive)
(73,tmpData = (twoIntsStruct *)
(74,printLine("Benign, fixed string")
(75,tmpData != NULL)
(76,data = tmpData)
(77,data)
(78,malloc(100*sizeof(twoIntsStruct)
(79,data[0])
(80,)
(81,1)
(82,1)
(83,)
(84,globalFive!=5)
(85,twoIntsStruct)
(86,(twoIntsStruct *)
(87,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^