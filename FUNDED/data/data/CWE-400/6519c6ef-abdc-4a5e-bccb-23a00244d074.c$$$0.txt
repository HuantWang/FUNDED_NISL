-----label-----
1
-----code-----
void free_client_data(struct client_data* cli_data) {
	int i;
	// Release locks backwards because that feels better.
	for ( i = cli_data->next_lock - 1; i >= 0 ; i-- ) {
		finish_lock( cli_data->client_locks + i );
	}

	assert( all_unlocked( cli_data ) );
	free( cli_data );
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
15,16
17,18
17,19
17,20
17,21
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
24,25
28,29
28,30
29,30
32,33
33,34
35,36
36,37
37,38
37,39
38,39
40,41
40,42
41,42
41,43
42,43
45,46
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
-----nextToken-----
2,4,7,9,10,14,16,21,25,26,27,30,31,34,39,43,44,46,50,53,55,59,61
-----computeFrom-----
19,20
19,21
22,23
22,24
28,29
28,30
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void free_client_data(struct client_data* cli_data) {	int i;	// Release locks backwards because that feels better.	for ( i = cli_data->next_lock - 1; i >= 0 ; i-- ) {		finish_lock( cli_data->client_locks + i );	}	assert( all_unlocked( cli_data ) );	free( cli_data );}
void
free_client_data(struct client_data* cli_data)
free_client_data
struct client_data* cli_data
struct client_data
client_data
* cli_data
*
cli_data
{	int i;	// Release locks backwards because that feels better.	for ( i = cli_data->next_lock - 1; i >= 0 ; i-- ) {		finish_lock( cli_data->client_locks + i );	}	assert( all_unlocked( cli_data ) );	free( cli_data );}
int i;
int i;
int
i
i
for ( i = cli_data->next_lock - 1; i >= 0 ; i-- ) {		finish_lock( cli_data->client_locks + i );	}
i = cli_data->next_lock - 1;
i = cli_data->next_lock - 1
i
i
cli_data->next_lock - 1
cli_data->next_lock
cli_data
cli_data
next_lock
1
i >= 0
i
i
0
i--
i
i
{		finish_lock( cli_data->client_locks + i );	}
finish_lock( cli_data->client_locks + i );
finish_lock( cli_data->client_locks + i )
finish_lock
finish_lock
cli_data->client_locks + i
cli_data->client_locks
cli_data
cli_data
client_locks
i
i
assert( all_unlocked( cli_data ) );
assert( all_unlocked( cli_data ) )
assert
assert
all_unlocked( cli_data )
all_unlocked
all_unlocked
cli_data
cli_data
free( cli_data );
free( cli_data )
free
free
cli_data
cli_data
-----joern-----
(0,26,0)
(3,13,0)
(0,10,0)
(15,12,0)
(24,9,0)
(13,10,0)
(12,15,0)
(12,26,0)
(24,26,0)
(5,11,0)
(8,15,0)
(15,14,0)
(19,0,0)
(3,26,0)
(25,3,0)
(9,14,0)
(20,9,0)
(6,14,0)
(27,11,0)
(4,10,0)
(9,24,0)
(22,14,0)
(1,6,0)
(15,8,0)
(23,12,0)
(2,24,0)
(17,24,0)
(28,15,0)
(14,9,0)
(13,3,0)
(8,7,0)
(11,14,0)
(16,10,0)
(18,12,0)
(23,11,1)
(15,12,1)
(12,26,1)
(2,17,1)
(24,2,1)
(18,23,1)
(28,12,1)
(27,14,1)
(21,0,1)
(0,19,1)
(3,26,1)
(11,14,1)
(0,26,1)
(11,5,1)
(13,3,1)
(25,11,1)
(17,22,1)
(8,15,1)
(5,27,1)
(24,26,1)
(6,14,1)
(14,9,1)
(20,24,1)
(9,24,1)
(3,25,1)
(27,6,1)
(12,18,1)
(1,8,1)
(6,1,1)
(19,13,1)
(9,20,1)
(15,14,1)
(15,28,1)
(11,14,2)
(9,24,2)
(6,11,2)
(23,11,2)
(24,26,2)
(8,11,2)
(5,11,2)
(0,26,2)
(14,9,2)
(27,11,2)
(11,11,2)
(15,11,2)
(3,26,2)
(15,14,2)
(6,14,2)
(28,11,2)
(13,3,2)
(1,11,2)
(18,11,2)
(8,15,2)
(12,11,2)
(15,12,2)
(12,26,2)
-----------------------------------
(0,free( cli_data )
(1,i)
(2,next_lock)
(3,all_unlocked( cli_data )
(4,for ( i = cli_data->next_lock - 1; i >= 0 ; i-- )
(5,0)
(6,i--)
(7,)
(8,finish_lock( cli_data->client_locks + i )
(9,cli_data->next_lock - 1)
(10,)
(11,i >= 0)
(12,cli_data->client_locks)
(13,assert( all_unlocked( cli_data )
(14,i = cli_data->next_lock - 1)
(15,cli_data->client_locks + i)
(16,i)
(17,cli_data)
(18,client_locks)
(19,cli_data)
(20,1)
(21,RET)
(22,i)
(23,cli_data)
(24,cli_data->next_lock)
(25,cli_data)
(26,struct client_data* cli_data)
(27,i)
(28,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^