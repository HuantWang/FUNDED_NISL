-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_32_bad()
{
    twoIntsStruct * data;
    twoIntsStruct * *dataPtr1 = &data;
    twoIntsStruct * *dataPtr2 = &data;
    data = NULL;
    {
        twoIntsStruct * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        *dataPtr1 = data;
    }
    {
        twoIntsStruct * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
17,19
17,20
17,21
21,22
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
29,33
33,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
68,70
70,71
71,72
71,73
72,73
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
97,98
98,99
98,100
99,100
99,101
100,101
100,102
101,102
106,107
107,108
107,109
108,109
110,111
111,112
111,113
112,113
115,116
116,117
116,118
117,118
118,119
120,121
122,123
122,124
123,124
124,125
124,126
125,126
127,128
127,129
127,130
130,131
131,132
132,133
-----nextToken-----
2,4,9,11,12,16,18,19,20,24,28,30,31,32,36,40,42,47,49,50,54,58,62,64,67,69,73,74,78,80,85,87,93,94,95,96,102,103,104,105,109,113,114,119,121,126,128,129,133,134
-----computeFrom-----
38,39
38,40
56,57
56,58
68,69
68,70
76,77
76,78
89,90
89,91
98,99
98,100
116,117
116,118
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_malloc_32_bad(){    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_malloc_32_bad()
CWE401_Memory_Leak__twoIntsStruct_malloc_32_bad
{    twoIntsStruct * data;    twoIntsStruct * *dataPtr1 = &data;    twoIntsStruct * *dataPtr2 = &data;    data = NULL;    {        twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }    {        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct * *dataPtr1 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct * *dataPtr2 = &data;
twoIntsStruct
twoIntsStruct
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        twoIntsStruct * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        *dataPtr1 = data;    }
twoIntsStruct * data = *dataPtr1;
twoIntsStruct * data = *dataPtr1;
twoIntsStruct
twoIntsStruct
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        twoIntsStruct * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
twoIntsStruct * data = *dataPtr2;
twoIntsStruct * data = *dataPtr2;
twoIntsStruct
twoIntsStruct
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(67,45,0)
(47,52,0)
(5,34,0)
(48,28,0)
(31,7,0)
(52,22,0)
(7,39,0)
(28,24,0)
(45,11,0)
(11,29,0)
(20,13,0)
(26,5,0)
(50,37,0)
(0,28,0)
(2,14,0)
(10,22,0)
(15,31,0)
(38,55,0)
(6,54,0)
(12,55,0)
(14,22,0)
(46,24,0)
(43,5,0)
(24,46,0)
(42,39,0)
(31,66,0)
(9,36,0)
(25,39,0)
(29,50,0)
(19,66,0)
(51,50,0)
(30,13,0)
(3,11,0)
(27,22,0)
(58,26,0)
(52,63,0)
(24,28,0)
(54,39,0)
(5,26,0)
(41,4,0)
(66,31,0)
(56,23,0)
(55,22,0)
(37,56,0)
(30,39,0)
(14,2,0)
(66,29,0)
(1,30,0)
(29,39,0)
(46,39,0)
(53,23,0)
(32,29,0)
(13,30,0)
(16,63,0)
(11,45,0)
(61,11,0)
(26,52,0)
(49,32,0)
(41,8,0)
(36,39,0)
(64,7,0)
(18,4,0)
(39,22,0)
(23,56,0)
(37,50,0)
(50,51,0)
(50,29,0)
(44,34,0)
(21,2,0)
(63,52,0)
(57,29,0)
(9,14,0)
(65,32,0)
(40,22,0)
(17,36,0)
(35,9,0)
(13,14,0)
(59,66,0)
(33,56,0)
(4,41,0)
(45,54,0)
(56,37,0)
(28,29,0)
(34,22,0)
(36,29,0)
(62,14,0)
(20,1,1)
(28,29,1)
(50,37,1)
(46,24,1)
(60,5,1)
(15,66,1)
(58,43,1)
(13,20,1)
(61,3,1)
(1,55,1)
(12,38,1)
(31,66,1)
(19,41,1)
(36,17,1)
(33,57,1)
(4,18,1)
(45,67,1)
(26,58,1)
(36,29,1)
(24,28,1)
(0,54,1)
(35,46,1)
(9,35,1)
(5,26,1)
(37,56,1)
(11,61,1)
(67,11,1)
(18,32,1)
(6,45,1)
(23,53,1)
(41,4,1)
(14,2,1)
(50,51,1)
(55,12,1)
(43,36,1)
(9,14,1)
(19,32,1)
(52,63,1)
(13,14,1)
(59,19,1)
(16,47,1)
(54,6,1)
(32,29,1)
(2,21,1)
(66,59,1)
(31,15,1)
(21,62,1)
(65,29,1)
(26,52,1)
(53,33,1)
(56,23,1)
(64,31,1)
(28,48,1)
(49,65,1)
(29,50,1)
(48,0,1)
(57,30,1)
(45,11,1)
(30,13,1)
(32,49,1)
(66,29,1)
(17,9,1)
(63,16,1)
(47,14,1)
(38,52,1)
(11,29,1)
(7,64,1)
(3,7,1)
(31,66,2)
(56,23,2)
(52,63,2)
(66,29,2)
(30,13,2)
(28,29,2)
(4,32,2)
(50,37,2)
(26,52,2)
(41,32,2)
(46,24,2)
(41,4,2)
(37,56,2)
(5,26,2)
(24,28,2)
(11,29,2)
(29,50,2)
(50,51,2)
(45,11,2)
(18,32,2)
(36,29,2)
(32,29,2)
(13,14,2)
(14,2,2)
(9,14,2)
-----------------------------------
(0,data)
(1,data)
(2,&data)
(3,data)
(4,-1)
(5,* data = *dataPtr2)
(6,0)
(7,data[0].intOne = 0)
(8,)
(9,*dataPtr1)
(10,data)
(11,data[0])
(12,NULL)
(13,*dataPtr1)
(14,* *dataPtr1 = &data)
(15,intOne)
(16,data)
(17,data)
(18,1)
(19,data)
(20,dataPtr1)
(21,data)
(22,)
(23,sizeof(twoIntsStruct)
(24,&data[0])
(25,if (data == NULL)
(26,*dataPtr2)
(27,dataPtr1)
(28,data[0])
(29,data = (twoIntsStruct *)
(30,* data = *dataPtr1)
(31,data[0].intOne)
(32,data == NULL)
(33,100)
(34,)
(35,dataPtr1)
(36,*dataPtr1 = data)
(37,malloc(100*sizeof(twoIntsStruct)
(38,data)
(39,)
(40,dataPtr2)
(41,exit(-1)
(42,data)
(43,data)
(44,data)
(45,data[0].intTwo)
(46,printStructLine(&data[0])
(47,dataPtr2)
(48,0)
(49,NULL)
(50,(twoIntsStruct *)
(51,twoIntsStruct *)
(52,* *dataPtr2 = &data)
(53,twoIntsStruct)
(54,data[0].intTwo = 0)
(55,data = NULL)
(56,100*sizeof(twoIntsStruct)
(57,data)
(58,dataPtr2)
(59,0)
(60,RET)
(61,0)
(62,dataPtr1)
(63,&data)
(64,0)
(65,data)
(66,data[0])
(67,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^