-----label-----
0
-----code-----
static void goodG2B1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
27,31
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
50,52
51,52
51,53
52,53
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
77,79
78,79
81,82
81,83
83,84
-----nextToken-----
2,4,9,11,12,16,18,20,25,26,31,35,37,40,42,46,47,53,54,55,56,62,63,64,65,69,73,75,79,80,82,84
-----computeFrom-----
14,15
14,16
29,30
29,31
41,42
41,43
49,50
49,51
58,59
58,60
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    struct _twoIntsStruct * data;    data = NULL;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    struct _twoIntsStruct * data;    data = NULL;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,22,0)
(6,43,0)
(23,11,0)
(41,36,0)
(20,42,0)
(3,24,0)
(16,30,0)
(40,42,0)
(2,17,0)
(21,35,0)
(21,1,0)
(17,0,0)
(26,17,0)
(27,5,0)
(35,21,0)
(40,0,0)
(36,17,0)
(0,40,0)
(24,1,0)
(8,5,0)
(13,6,0)
(42,20,0)
(4,2,0)
(39,36,0)
(17,1,0)
(20,34,0)
(29,6,0)
(32,2,0)
(9,16,0)
(25,43,0)
(14,0,0)
(35,7,0)
(22,35,0)
(5,11,0)
(12,42,0)
(36,19,0)
(43,6,0)
(34,20,0)
(6,17,0)
(19,36,0)
(0,17,0)
(19,33,0)
(42,40,0)
(0,14,0)
(31,33,0)
(38,11,0)
(33,1,0)
(7,35,0)
(37,11,0)
(43,24,0)
(35,22,0)
(15,19,0)
(22,2,0)
(12,26,1)
(36,17,1)
(43,6,1)
(0,14,1)
(33,31,1)
(42,20,1)
(2,32,1)
(22,2,1)
(26,18,1)
(20,34,1)
(9,18,1)
(32,4,1)
(17,0,1)
(40,42,1)
(41,39,1)
(6,13,1)
(39,17,1)
(19,36,1)
(29,33,1)
(2,17,1)
(21,35,1)
(36,41,1)
(10,28,1)
(43,25,1)
(18,5,1)
(4,24,1)
(15,36,1)
(16,9,1)
(28,16,1)
(25,6,1)
(0,40,1)
(20,12,1)
(19,15,1)
(27,8,1)
(6,17,1)
(5,27,1)
(3,43,1)
(35,7,1)
(28,21,1)
(13,29,1)
(24,3,1)
(31,19,1)
(35,22,1)
(20,34,2)
(19,18,2)
(0,14,2)
(40,42,2)
(22,2,2)
(32,18,2)
(3,18,2)
(2,17,2)
(35,7,2)
(35,18,2)
(35,22,2)
(43,18,2)
(19,36,2)
(24,18,2)
(2,18,2)
(17,18,2)
(39,18,2)
(0,18,2)
(20,18,2)
(42,18,2)
(26,18,2)
(15,18,2)
(9,18,2)
(43,6,2)
(12,18,2)
(21,18,2)
(25,18,2)
(40,18,2)
(22,18,2)
(4,18,2)
(21,35,2)
(16,18,2)
(36,18,2)
(0,40,2)
(6,17,2)
(42,20,2)
(36,17,2)
(6,18,2)
(31,18,2)
(17,0,2)
(41,18,2)
(29,18,2)
(33,18,2)
(13,18,2)
-----------------------------------
(0,(struct _twoIntsStruct *)
(1,)
(2,data[0])
(3,0)
(4,data)
(5,data = NULL)
(6,data[0])
(7,twoIntsStruct *)
(8,data)
(9,"Benign, fixed string")
(10,RET)
(11,)
(12,100)
(13,0)
(14,struct _twoIntsStruct *)
(15,intOne)
(16,printLine("Benign, fixed string")
(17,data = (struct _twoIntsStruct *)
(18,0)
(19,data[0].intOne)
(20,sizeof(struct _twoIntsStruct)
(21,printStructLine((twoIntsStruct *)
(22,&data[0])
(23,if(1)
(24,data[0].intTwo = 0)
(25,intTwo)
(26,data)
(27,NULL)
(28,1)
(29,data)
(30,)
(31,0)
(32,0)
(33,data[0].intOne = 0)
(34,struct _twoIntsStruct)
(35,(twoIntsStruct *)
(36,data[0])
(37,if(0)
(38,data)
(39,data)
(40,ALLOCA(100*sizeof(struct _twoIntsStruct)
(41,0)
(42,100*sizeof(struct _twoIntsStruct)
(43,data[0].intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^