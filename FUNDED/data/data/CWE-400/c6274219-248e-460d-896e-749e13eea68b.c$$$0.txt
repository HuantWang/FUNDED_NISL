-----label-----
0
-----code-----
tANI_U8
limDeleteOpenAuthPreAuthNode(tpAniSirGlobal pMac)
{
    struct tLimPreAuthNode    *pPrevNode, *pTempNode, *pFoundNode;
    tANI_U8 authNodeFreed = false;

    pTempNode = pPrevNode = pMac->lim.pLimPreAuthList;

    if (pTempNode == NULL)
        return authNodeFreed;

    while (pTempNode != NULL)
    {
        if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&
            pTempNode->authType == eSIR_OPEN_SYSTEM &&
            (vos_timer_get_system_ticks() >
                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||
             vos_timer_get_system_ticks() < pTempNode->timestamp))
        {
            // Found node to be deleted
            authNodeFreed = true;
            pFoundNode = pTempNode;
            if (pMac->lim.pLimPreAuthList == pTempNode)
            {
                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =
                                 pFoundNode->next;
            }
            else
            {
                pPrevNode->next = pTempNode->next;
                pTempNode = pPrevNode->next;
            }

            limReleasePreAuthNode(pMac, pFoundNode);
        }
        else
        {
            pPrevNode = pTempNode;
            pTempNode = pPrevNode->next;
        }
    }

    return authNodeFreed;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
13,16
13,17
14,15
16,17
16,18
19,20
19,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
40,42
41,42
41,43
42,43
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
62,64
62,65
63,64
63,65
64,65
64,66
65,66
65,67
66,67
66,68
67,68
70,71
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
80,82
81,82
81,83
82,83
83,84
85,86
86,87
86,88
87,88
89,90
89,91
90,91
93,94
93,95
94,95
95,96
97,98
97,99
98,99
101,102
101,103
101,104
101,105
102,103
103,104
103,105
104,105
107,108
108,109
108,110
109,110
111,112
113,114
113,115
113,116
114,115
114,116
115,116
115,117
116,117
116,118
117,118
121,122
123,124
124,125
125,126
125,127
126,127
128,129
128,130
129,130
129,131
130,131
130,132
131,132
135,136
135,137
136,137
138,139
138,140
139,140
142,143
142,144
143,144
144,145
144,146
145,146
145,147
146,147
149,150
149,151
150,151
153,154
154,155
154,156
155,156
157,158
157,159
158,159
161,162
162,163
162,164
162,165
163,164
165,166
167,168
169,170
169,171
170,171
171,172
171,173
172,173
174,175
176,177
177,178
177,179
178,179
180,181
180,182
181,182
184,185
185,186
-----nextToken-----
3,5,8,10,15,17,18,20,21,23,24,28,30,32,36,39,43,44,45,49,51,54,58,60,68,69,71,75,76,78,84,88,91,92,96,99,100,105,106,110,112,118,119,120,122,127,132,133,134,137,140,141,147,148,151,152,156,159,160,164,166,168,173,175,179,182,183,186
-----computeFrom-----
34,35
34,36
37,38
37,39
47,48
47,49
56,57
56,58
63,64
63,65
64,65
64,66
65,66
65,67
72,73
72,74
80,81
80,82
81,82
81,83
86,87
86,88
93,94
93,95
103,104
103,105
108,109
108,110
114,115
114,116
125,126
125,127
128,129
128,130
135,136
135,137
144,145
144,146
154,155
154,156
171,172
171,173
177,178
177,179
-----guardedBy-----
99,156
119,133
120,134
118,132
122,137
-----guardedByNegation-----
99,179
122,156
-----lastLexicalUse-----
99,179
122,156
-----jump-----
99,179
122,156
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
tANI_U8limDeleteOpenAuthPreAuthNode(tpAniSirGlobal pMac){    struct tLimPreAuthNode    *pPrevNode, *pTempNode, *pFoundNode;    tANI_U8 authNodeFreed = false;    pTempNode = pPrevNode = pMac->lim.pLimPreAuthList;    if (pTempNode == NULL)        return authNodeFreed;    while (pTempNode != NULL)    {        if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM &&            (vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp))        {            // Found node to be deleted            authNodeFreed = true;            pFoundNode = pTempNode;            if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }            limReleasePreAuthNode(pMac, pFoundNode);        }        else        {            pPrevNode = pTempNode;            pTempNode = pPrevNode->next;        }    }    return authNodeFreed;}
tANI_U8
tANI_U8
limDeleteOpenAuthPreAuthNode(tpAniSirGlobal pMac)
limDeleteOpenAuthPreAuthNode
tpAniSirGlobal pMac
tpAniSirGlobal
tpAniSirGlobal
pMac
pMac
{    struct tLimPreAuthNode    *pPrevNode, *pTempNode, *pFoundNode;    tANI_U8 authNodeFreed = false;    pTempNode = pPrevNode = pMac->lim.pLimPreAuthList;    if (pTempNode == NULL)        return authNodeFreed;    while (pTempNode != NULL)    {        if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM &&            (vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp))        {            // Found node to be deleted            authNodeFreed = true;            pFoundNode = pTempNode;            if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }            limReleasePreAuthNode(pMac, pFoundNode);        }        else        {            pPrevNode = pTempNode;            pTempNode = pPrevNode->next;        }    }    return authNodeFreed;}
struct tLimPreAuthNode    *pPrevNode, *pTempNode, *pFoundNode;
struct tLimPreAuthNode    *pPrevNode, *pTempNode, *pFoundNode;
struct tLimPreAuthNode
tLimPreAuthNode
*pPrevNode
*
pPrevNode
*pTempNode
*
pTempNode
*pFoundNode
*
pFoundNode
tANI_U8 authNodeFreed = false;
tANI_U8 authNodeFreed = false;
tANI_U8
tANI_U8
authNodeFreed = false
authNodeFreed
= false
false
pTempNode = pPrevNode = pMac->lim.pLimPreAuthList;
pTempNode = pPrevNode = pMac->lim.pLimPreAuthList
pTempNode
pTempNode
pPrevNode = pMac->lim.pLimPreAuthList
pPrevNode
pPrevNode
pMac->lim.pLimPreAuthList
pMac->lim
pMac
pMac
lim
pLimPreAuthList
if (pTempNode == NULL)        return authNodeFreed;
pTempNode == NULL
pTempNode
pTempNode
NULL
NULL
return authNodeFreed;
authNodeFreed
authNodeFreed
while (pTempNode != NULL)    {        if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM &&            (vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp))        {            // Found node to be deleted            authNodeFreed = true;            pFoundNode = pTempNode;            if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }            limReleasePreAuthNode(pMac, pFoundNode);        }        else        {            pPrevNode = pTempNode;            pTempNode = pPrevNode->next;        }    }
pTempNode != NULL
pTempNode
pTempNode
NULL
NULL
{        if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM &&            (vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp))        {            // Found node to be deleted            authNodeFreed = true;            pFoundNode = pTempNode;            if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }            limReleasePreAuthNode(pMac, pFoundNode);        }        else        {            pPrevNode = pTempNode;            pTempNode = pPrevNode->next;        }    }
if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM &&            (vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp))        {            // Found node to be deleted            authNodeFreed = true;            pFoundNode = pTempNode;            if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }            limReleasePreAuthNode(pMac, pFoundNode);        }        else        {            pPrevNode = pTempNode;            pTempNode = pPrevNode->next;        }
pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM &&            (vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp)
pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&            pTempNode->authType == eSIR_OPEN_SYSTEM
pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE
pTempNode->mlmState
pTempNode
pTempNode
mlmState
eLIM_MLM_AUTHENTICATED_STATE
eLIM_MLM_AUTHENTICATED_STATE
pTempNode->authType == eSIR_OPEN_SYSTEM
pTempNode->authType
pTempNode
pTempNode
authType
eSIR_OPEN_SYSTEM
eSIR_OPEN_SYSTEM
(vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp)
vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp) ||             vos_timer_get_system_ticks() < pTempNode->timestamp
vos_timer_get_system_ticks() >                   (LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp)
vos_timer_get_system_ticks()
vos_timer_get_system_ticks
vos_timer_get_system_ticks
(LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp)
LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp
LIM_OPENAUTH_TIMEOUT
LIM_OPENAUTH_TIMEOUT
pTempNode->timestamp
pTempNode
pTempNode
timestamp
vos_timer_get_system_ticks() < pTempNode->timestamp
vos_timer_get_system_ticks()
vos_timer_get_system_ticks
vos_timer_get_system_ticks
pTempNode->timestamp
pTempNode
pTempNode
timestamp
{            // Found node to be deleted            authNodeFreed = true;            pFoundNode = pTempNode;            if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }            limReleasePreAuthNode(pMac, pFoundNode);        }
authNodeFreed = true;
authNodeFreed = true
authNodeFreed
authNodeFreed
true
pFoundNode = pTempNode;
pFoundNode = pTempNode
pFoundNode
pFoundNode
pTempNode
pTempNode
if (pMac->lim.pLimPreAuthList == pTempNode)            {                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }            else            {                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }
pMac->lim.pLimPreAuthList == pTempNode
pMac->lim.pLimPreAuthList
pMac->lim
pMac
pMac
lim
pLimPreAuthList
pTempNode
pTempNode
{                pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;            }
pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next;
pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next
pPrevNode
pPrevNode
pMac->lim.pLimPreAuthList = pTempNode =                                 pFoundNode->next
pMac->lim.pLimPreAuthList
pMac->lim
pMac
pMac
lim
pLimPreAuthList
pTempNode =                                 pFoundNode->next
pTempNode
pTempNode
pFoundNode->next
pFoundNode
pFoundNode
next
{                pPrevNode->next = pTempNode->next;                pTempNode = pPrevNode->next;            }
pPrevNode->next = pTempNode->next;
pPrevNode->next = pTempNode->next
pPrevNode->next
pPrevNode
pPrevNode
next
pTempNode->next
pTempNode
pTempNode
next
pTempNode = pPrevNode->next;
pTempNode = pPrevNode->next
pTempNode
pTempNode
pPrevNode->next
pPrevNode
pPrevNode
next
limReleasePreAuthNode(pMac, pFoundNode);
limReleasePreAuthNode(pMac, pFoundNode)
limReleasePreAuthNode
limReleasePreAuthNode
pMac
pMac
pFoundNode
pFoundNode
{            pPrevNode = pTempNode;            pTempNode = pPrevNode->next;        }
pPrevNode = pTempNode;
pPrevNode = pTempNode
pPrevNode
pPrevNode
pTempNode
pTempNode
pTempNode = pPrevNode->next;
pTempNode = pPrevNode->next
pTempNode
pTempNode
pPrevNode->next
pPrevNode
pPrevNode
next
return authNodeFreed;
authNodeFreed
authNodeFreed
-----joern-----
(13,69,0)
(21,67,0)
(4,71,0)
(30,46,0)
(62,57,0)
(57,46,0)
(72,77,0)
(47,24,0)
(18,5,0)
(44,89,0)
(59,77,0)
(77,11,0)
(69,17,0)
(71,1,0)
(39,77,0)
(3,89,0)
(77,1,0)
(58,103,0)
(103,66,0)
(2,11,0)
(63,91,0)
(77,71,0)
(95,47,0)
(2,71,0)
(85,2,0)
(103,24,0)
(25,66,0)
(88,53,0)
(2,46,0)
(47,66,0)
(24,85,0)
(95,54,0)
(50,72,0)
(101,92,0)
(10,4,0)
(61,44,0)
(44,61,0)
(89,3,0)
(48,95,0)
(61,71,0)
(66,17,0)
(20,62,0)
(5,24,0)
(88,89,0)
(100,24,0)
(99,106,0)
(72,91,0)
(81,44,0)
(67,24,0)
(48,37,0)
(45,93,0)
(11,72,0)
(110,108,0)
(111,2,0)
(94,106,0)
(90,11,0)
(53,5,0)
(53,88,0)
(62,17,0)
(95,48,0)
(49,2,0)
(45,97,0)
(103,71,0)
(83,27,0)
(61,11,0)
(5,66,0)
(4,11,0)
(68,101,0)
(91,63,0)
(97,4,0)
(64,4,0)
(59,92,0)
(6,95,0)
(92,66,0)
(106,71,0)
(101,87,0)
(27,83,0)
(56,87,0)
(106,77,0)
(0,17,0)
(77,24,0)
(3,45,0)
(76,2,0)
(98,57,0)
(3,108,0)
(67,71,0)
(4,97,0)
(96,17,0)
(63,71,0)
(9,61,0)
(80,85,0)
(15,72,0)
(24,54,0)
(4,66,0)
(52,48,0)
(49,46,0)
(2,24,0)
(63,24,0)
(4,24,0)
(86,17,0)
(32,17,0)
(38,97,0)
(51,17,0)
(70,92,0)
(28,53,0)
(67,11,0)
(11,12,0)
(47,71,0)
(43,62,0)
(78,8,0)
(29,47,0)
(63,66,0)
(72,11,0)
(84,49,0)
(14,71,0)
(16,83,0)
(89,44,0)
(61,24,0)
(35,5,0)
(83,54,0)
(63,11,0)
(62,69,0)
(55,69,0)
(97,45,0)
(54,24,0)
(77,66,0)
(54,74,0)
(47,95,0)
(79,69,0)
(31,104,0)
(108,103,0)
(26,63,0)
(67,66,0)
(2,66,0)
(59,91,0)
(23,63,0)
(109,49,0)
(22,59,0)
(108,110,0)
(61,66,0)
(41,17,0)
(8,66,0)
(47,11,0)
(106,91,0)
(89,88,0)
(75,59,0)
(82,8,0)
(102,87,0)
(93,45,0)
(36,103,0)
(103,108,0)
(107,57,0)
(59,74,0)
(73,48,0)
(19,74,0)
(5,53,0)
(103,11,0)
(5,71,0)
(27,37,0)
(108,3,0)
(5,11,0)
(72,74,0)
(34,85,0)
(87,101,0)
(72,92,0)
(66,92,0)
(105,27,0)
(71,106,0)
(20,13,0)
(91,12,0)
(87,37,0)
(65,61,0)
(60,13,0)
(74,54,0)
(92,101,0)
(74,40,0)
(85,24,0)
(42,77,0)
(33,27,0)
(45,3,0)
(7,67,0)
(49,37,0)
(4,11,1)
(61,11,1)
(95,54,1)
(103,24,1)
(5,11,1)
(16,27,1)
(92,101,1)
(5,35,1)
(101,68,1)
(47,11,1)
(23,59,1)
(103,71,1)
(7,8,1)
(62,57,1)
(50,90,1)
(71,106,1)
(89,3,1)
(27,37,1)
(89,44,1)
(54,24,1)
(49,2,1)
(80,34,1)
(106,77,1)
(63,11,1)
(87,37,1)
(4,10,1)
(2,71,1)
(36,58,1)
(35,18,1)
(61,66,1)
(22,47,1)
(94,99,1)
(63,66,1)
(67,21,1)
(102,56,1)
(7,71,1)
(74,54,1)
(60,8,1)
(63,26,1)
(95,48,1)
(111,76,1)
(73,52,1)
(44,61,1)
(72,77,1)
(65,9,1)
(44,81,1)
(62,69,1)
(59,75,1)
(8,82,1)
(83,27,1)
(45,97,1)
(56,70,1)
(93,44,1)
(100,83,1)
(103,36,1)
(61,24,1)
(72,91,1)
(64,38,1)
(8,66,1)
(18,67,1)
(109,84,1)
(98,88,1)
(4,71,1)
(77,66,1)
(9,53,1)
(3,108,1)
(67,11,1)
(91,63,1)
(62,43,1)
(103,11,1)
(83,16,1)
(2,24,1)
(24,85,1)
(20,13,1)
(110,45,1)
(67,71,1)
(45,93,1)
(72,74,1)
(59,77,1)
(97,4,1)
(48,73,1)
(77,11,1)
(72,92,1)
(99,14,1)
(49,37,1)
(25,69,1)
(38,93,1)
(52,2,1)
(107,98,1)
(13,60,1)
(70,25,1)
(13,69,1)
(47,95,1)
(5,24,1)
(48,37,1)
(90,91,1)
(61,71,1)
(7,49,1)
(88,89,1)
(77,39,1)
(21,7,1)
(72,15,1)
(2,11,1)
(5,71,1)
(66,92,1)
(47,24,1)
(69,79,1)
(85,80,1)
(43,67,1)
(28,5,1)
(3,45,1)
(77,71,1)
(11,72,1)
(47,29,1)
(5,66,1)
(106,91,1)
(77,24,1)
(47,71,1)
(88,53,1)
(10,64,1)
(85,2,1)
(53,5,1)
(105,19,1)
(79,55,1)
(34,100,1)
(27,33,1)
(84,74,1)
(59,74,1)
(75,22,1)
(63,24,1)
(2,66,1)
(42,88,1)
(108,110,1)
(106,94,1)
(108,103,1)
(33,105,1)
(49,109,1)
(4,66,1)
(101,87,1)
(63,71,1)
(68,87,1)
(59,92,1)
(57,107,1)
(26,23,1)
(53,28,1)
(87,102,1)
(67,24,1)
(15,50,1)
(78,66,1)
(4,24,1)
(20,62,1)
(39,42,1)
(95,6,1)
(29,95,1)
(47,66,1)
(2,111,1)
(103,66,1)
(81,61,1)
(6,48,1)
(84,11,1)
(76,57,1)
(82,78,1)
(19,47,1)
(14,77,1)
(67,66,1)
(58,110,1)
(61,65,1)
(36,45,2)
(61,66,2)
(33,47,2)
(83,27,2)
(67,67,2)
(97,4,2)
(67,24,2)
(61,53,2)
(50,47,2)
(21,67,2)
(77,88,2)
(3,108,2)
(61,11,2)
(101,87,2)
(4,71,2)
(2,11,2)
(13,69,2)
(18,67,2)
(49,37,2)
(97,44,2)
(52,88,2)
(54,24,2)
(108,103,2)
(63,66,2)
(108,45,2)
(57,88,2)
(49,88,2)
(6,88,2)
(63,47,2)
(95,48,2)
(89,53,2)
(90,47,2)
(67,11,2)
(77,66,2)
(71,106,2)
(107,88,2)
(62,57,2)
(77,24,2)
(62,69,2)
(5,66,2)
(77,71,2)
(4,44,2)
(89,3,2)
(13,8,2)
(67,8,2)
(67,66,2)
(95,54,2)
(77,11,2)
(11,47,2)
(23,47,2)
(2,66,2)
(111,88,2)
(47,95,2)
(63,71,2)
(88,67,2)
(72,74,2)
(81,53,2)
(47,88,2)
(94,88,2)
(71,88,2)
(7,67,2)
(99,88,2)
(48,88,2)
(73,88,2)
(47,66,2)
(24,47,2)
(95,88,2)
(5,24,2)
(2,24,2)
(3,44,2)
(4,66,2)
(21,8,2)
(11,72,2)
(7,8,2)
(3,45,2)
(9,53,2)
(103,24,2)
(58,45,2)
(105,47,2)
(28,67,2)
(22,47,2)
(45,44,2)
(103,71,2)
(59,77,2)
(26,47,2)
(54,47,2)
(5,67,2)
(59,92,2)
(19,47,2)
(48,37,2)
(85,47,2)
(88,53,2)
(2,88,2)
(80,47,2)
(65,53,2)
(100,47,2)
(109,88,2)
(74,54,2)
(35,67,2)
(72,92,2)
(75,47,2)
(91,63,2)
(5,11,2)
(62,8,2)
(44,61,2)
(2,71,2)
(24,85,2)
(44,53,2)
(91,47,2)
(103,11,2)
(60,8,2)
(45,97,2)
(45,93,2)
(4,24,2)
(89,44,2)
(47,24,2)
(103,66,2)
(63,11,2)
(106,77,2)
(92,101,2)
(8,66,2)
(47,11,2)
(72,47,2)
(108,110,2)
(49,2,2)
(61,71,2)
(67,71,2)
(59,47,2)
(61,24,2)
(16,47,2)
(43,8,2)
(66,92,2)
(34,47,2)
(42,88,2)
(87,37,2)
(14,88,2)
(63,24,2)
(110,45,2)
(27,47,2)
(93,44,2)
(72,91,2)
(84,88,2)
(10,44,2)
(29,88,2)
(76,88,2)
(4,11,2)
(88,89,2)
(27,37,2)
(20,13,2)
(5,71,2)
(20,62,2)
(72,77,2)
(38,44,2)
(106,91,2)
(47,71,2)
(53,67,2)
(98,88,2)
(15,47,2)
(64,44,2)
(106,88,2)
(53,5,2)
(83,47,2)
(85,2,2)
(74,47,2)
(59,74,2)
(103,45,2)
(39,88,2)
-----------------------------------
(0,pPrevNode)
(1,)
(2,pFoundNode = pTempNode)
(3,vos_timer_get_system_ticks()
(4,pTempNode->timestamp)
(5,pTempNode->mlmState)
(6,pLimPreAuthList)
(7,pTempNode)
(8,pTempNode == NULL)
(9,pTempNode)
(10,timestamp)
(11,pTempNode = pPrevNode->next)
(12,)
(13,return authNodeFreed;)
(14,pTempNode)
(15,next)
(16,pLimPreAuthList)
(17,)
(18,pTempNode)
(19,pPrevNode)
(20,RET)
(21,NULL)
(22,pPrevNode)
(23,pTempNode)
(24,pTempNode =\n\\n                                 pFoundNode->next)
(25,pTempNode)
(26,next)
(27,pMac->lim)
(28,eLIM_MLM_AUTHENTICATED_STATE)
(29,pTempNode)
(30,if (pMac->lim.pLimPreAuthList == pTempNode)
(31,if (pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&\n\\n            pTempNode->authType == eSIR_OPEN_SYSTEM &&\n\\n            (vos_timer_get_system_ticks()
(32,pTempNode)
(33,lim)
(34,pFoundNode)
(35,mlmState)
(36,timestamp)
(37,tpAniSirGlobal pMac)
(38,LIM_OPENAUTH_TIMEOUT)
(39,pTempNode)
(40,)
(41,while (pTempNode != NULL)
(42,pPrevNode)
(43,authNodeFreed)
(44,pTempNode->authType == eSIR_OPEN_SYSTEM)
(45,vos_timer_get_system_ticks()
(46,)
(47,pMac->lim.pLimPreAuthList == pTempNode)
(48,pMac->lim)
(49,limReleasePreAuthNode(pMac, pFoundNode)
(50,pPrevNode)
(51,pFoundNode)
(52,pMac)
(53,pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE)
(54,pMac->lim.pLimPreAuthList = pTempNode =\n\\n                                 pFoundNode->next)
(55,authNodeFreed)
(56,pMac)
(57,authNodeFreed = true)
(58,pTempNode)
(59,pPrevNode->next)
(60,authNodeFreed)
(61,pTempNode->authType)
(62,return authNodeFreed;)
(63,pTempNode->next)
(64,pTempNode)
(65,authType)
(66,pTempNode = pPrevNode = pMac->lim.pLimPreAuthList)
(67,pTempNode != NULL)
(68,pLimPreAuthList)
(69,authNodeFreed = false)
(70,pPrevNode)
(71,pTempNode = pPrevNode->next)
(72,pPrevNode->next)
(73,lim)
(74,pPrevNode = pMac->lim.pLimPreAuthList = pTempNode =\n\\n                                 pFoundNode->next)
(75,next)
(76,pFoundNode)
(77,pPrevNode = pTempNode)
(78,pTempNode)
(79,false)
(80,next)
(81,eSIR_OPEN_SYSTEM)
(82,NULL)
(83,pMac->lim.pLimPreAuthList)
(84,pMac)
(85,pFoundNode->next)
(86,authNodeFreed)
(87,pMac->lim)
(88,pTempNode->mlmState == eLIM_MLM_AUTHENTICATED_STATE &&\n\\n            pTempNode->authType == eSIR_OPEN_SYSTEM &&\n\\n            (vos_timer_get_system_ticks()
(89,pTempNode->authType == eSIR_OPEN_SYSTEM &&\n\\n            (vos_timer_get_system_ticks()
(90,pTempNode)
(91,pPrevNode->next = pTempNode->next)
(92,pPrevNode = pMac->lim.pLimPreAuthList)
(93,vos_timer_get_system_ticks()
(94,next)
(95,pMac->lim.pLimPreAuthList)
(96,if (pTempNode == NULL)
(97,LIM_OPENAUTH_TIMEOUT + pTempNode->timestamp)
(98,authNodeFreed)
(99,pPrevNode)
(100,pTempNode)
(101,pMac->lim.pLimPreAuthList)
(102,lim)
(103,pTempNode->timestamp)
(104,)
(105,pMac)
(106,pPrevNode->next)
(107,true)
(108,vos_timer_get_system_ticks()
(109,pFoundNode)
(110,vos_timer_get_system_ticks()
(111,pTempNode)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^