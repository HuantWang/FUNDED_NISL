-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
47,49
48,49
49,50
49,51
51,52
51,53
51,54
53,54
54,55
56,57
58,59
58,60
58,61
59,60
59,61
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
69,70
71,72
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
90,91
92,93
94,95
94,96
94,97
95,96
96,97
96,98
98,99
98,100
100,101
101,102
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,52,55,57,62,64,66,68,70,75,78,80,85,86,91,93,97,99,103,107,109,113,114
-----computeFrom-----
32,33
32,34
59,60
59,61
73,74
73,75
88,89
88,90
-----guardedBy-----
64,80
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_32_bad()
CWE400_Resource_Exhaustion__fgets_sleep_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(16,43,0)
(7,8,0)
(22,38,0)
(49,37,0)
(20,51,0)
(51,55,0)
(46,55,0)
(21,9,0)
(8,43,0)
(12,44,0)
(53,41,0)
(11,2,0)
(55,51,0)
(39,12,0)
(31,9,0)
(4,47,0)
(36,41,0)
(9,8,0)
(24,23,0)
(43,53,0)
(3,8,0)
(29,41,0)
(55,38,0)
(6,51,0)
(44,41,0)
(12,13,0)
(6,47,0)
(38,41,0)
(35,15,0)
(34,15,0)
(37,44,0)
(26,17,0)
(14,24,0)
(17,54,0)
(54,53,0)
(0,36,0)
(38,22,0)
(52,54,0)
(13,12,0)
(45,27,0)
(30,41,0)
(25,9,0)
(15,8,0)
(54,13,0)
(33,44,0)
(32,22,0)
(27,47,0)
(15,34,0)
(1,10,0)
(17,44,0)
(28,6,0)
(34,40,0)
(18,41,0)
(10,9,0)
(44,37,0)
(50,53,0)
(36,2,0)
(19,38,0)
(47,41,0)
(9,10,0)
(42,43,0)
(13,53,0)
(54,34,0)
(48,34,0)
(2,36,0)
(5,13,0)
(51,47,0)
(6,28,1)
(32,19,1)
(54,34,1)
(2,11,1)
(37,49,1)
(6,51,1)
(11,0,1)
(12,39,1)
(34,15,1)
(26,34,1)
(21,8,1)
(14,10,1)
(25,31,1)
(8,3,1)
(54,13,1)
(45,6,1)
(24,14,1)
(10,1,1)
(28,51,1)
(12,44,1)
(27,45,1)
(5,36,1)
(1,9,1)
(13,12,1)
(17,44,1)
(39,5,1)
(56,27,1)
(55,46,1)
(51,55,1)
(44,37,1)
(9,8,1)
(19,44,1)
(17,26,1)
(48,10,1)
(26,24,1)
(20,54,1)
(0,38,1)
(52,17,1)
(46,20,1)
(15,35,1)
(31,21,1)
(49,33,1)
(15,8,1)
(36,2,1)
(3,7,1)
(10,9,1)
(7,13,1)
(38,22,1)
(54,52,1)
(22,32,1)
(9,25,1)
(55,38,1)
(35,48,1)
(54,34,2)
(54,13,2)
(10,9,2)
(44,37,2)
(14,10,2)
(34,15,2)
(15,8,2)
(6,51,2)
(38,22,2)
(12,44,2)
(51,55,2)
(9,8,2)
(55,38,2)
(48,10,2)
(36,2,2)
(13,12,2)
(24,10,2)
(34,10,2)
(17,44,2)
(15,10,2)
(35,10,2)
-----------------------------------
(0,count)
(1,NULL)
(2,-1)
(3,"")
(4,count)
(5,count)
(6,SLEEP(count)
(7,inputBuffer)
(8,inputBuffer[CHAR_ARRAY_SIZE] = "")
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(11,1)
(12,*countPtr1)
(13,count = *countPtr1)
(14,"fgets()
(15,atoi(inputBuffer)
(16,inputBuffer)
(17,*countPtr1)
(18,countPtr1)
(19,countPtr2)
(20,count)
(21,inputBuffer)
(22,&count)
(23,)
(24,printLine("fgets()
(25,stdin)
(26,countPtr1)
(27,printLine("Sleep time possibly too long")
(28,count)
(29,countPtr2)
(30,count)
(31,CHAR_ARRAY_SIZE)
(32,count)
(33,countPtr1)
(34,count = atoi(inputBuffer)
(35,inputBuffer)
(36,count = -1)
(37,&count)
(38,*countPtr2 = &count)
(39,countPtr1)
(40,)
(41,)
(42,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,)
(44,*countPtr1 = &count)
(45,"Sleep time possibly too long")
(46,countPtr2)
(47,)
(48,count)
(49,count)
(50,count)
(51,count = *countPtr2)
(52,count)
(53,)
(54,*countPtr1 = count)
(55,*countPtr2)
(56,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^