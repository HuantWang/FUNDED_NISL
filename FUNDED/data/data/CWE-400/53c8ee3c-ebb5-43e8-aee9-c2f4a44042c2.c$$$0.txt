-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_34_bad()
{
    wchar_t * data;
    CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
77,78
78,79
78,80
80,81
80,82
80,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,72,73,75,79,81,82,86,87,88
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_34_bad(){    wchar_t * data;    CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_malloc_34_bad()
CWE401_Memory_Leak__wchar_t_malloc_34_bad
{    wchar_t * data;    CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_malloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_malloc_34_unionType
CWE401_Memory_Leak__wchar_t_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(25,22,0)
(25,34,0)
(23,21,0)
(11,21,0)
(3,0,0)
(13,0,0)
(9,10,0)
(16,36,0)
(1,36,0)
(27,23,0)
(36,34,0)
(24,16,0)
(4,3,0)
(2,0,0)
(34,20,0)
(26,36,0)
(16,21,0)
(15,14,0)
(22,25,0)
(8,11,0)
(22,17,0)
(31,1,0)
(36,21,0)
(30,14,0)
(10,9,0)
(35,21,0)
(18,10,0)
(34,25,0)
(3,23,0)
(14,21,0)
(19,37,0)
(34,36,0)
(12,37,0)
(33,21,0)
(20,34,0)
(6,22,0)
(11,36,0)
(0,3,0)
(17,22,0)
(29,17,0)
(9,5,0)
(7,1,0)
(28,21,0)
(37,16,0)
(15,30,1)
(11,8,1)
(25,22,1)
(16,24,1)
(37,19,1)
(12,11,1)
(1,36,1)
(31,7,1)
(22,17,1)
(6,26,1)
(8,1,1)
(34,25,1)
(14,15,1)
(34,20,1)
(32,3,1)
(8,9,1)
(4,16,1)
(16,36,1)
(11,36,1)
(17,29,1)
(9,10,1)
(29,6,1)
(24,37,1)
(18,1,1)
(7,36,1)
(3,0,1)
(36,34,1)
(2,4,1)
(0,13,1)
(1,31,1)
(19,12,1)
(13,2,1)
(26,14,1)
(10,18,1)
(34,20,2)
(16,36,2)
(3,0,2)
(25,22,2)
(11,36,2)
(9,10,2)
(9,1,2)
(10,1,2)
(34,25,2)
(18,1,2)
(36,34,2)
(1,36,2)
(22,17,2)
-----------------------------------
(0,myUnion.unionSecond)
(1,data == NULL)
(2,myUnion)
(3,* data = myUnion.unionSecond)
(4,data)
(5,)
(6,100)
(7,data)
(8,data)
(9,exit(-1)
(10,-1)
(11,printWLine(data)
(12,myUnion)
(13,unionSecond)
(14,data = NULL)
(15,NULL)
(16,myUnion.unionFirst = data)
(17,sizeof(wchar_t)
(18,1)
(19,unionFirst)
(20,wchar_t *)
(21,)
(22,100*sizeof(wchar_t)
(23,)
(24,data)
(25,malloc(100*sizeof(wchar_t)
(26,data)
(27,data)
(28,data)
(29,wchar_t)
(30,data)
(31,NULL)
(32,RET)
(33,if (data == NULL)
(34,(wchar_t *)
(35,myUnion)
(36,data = (wchar_t *)
(37,myUnion.unionFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^