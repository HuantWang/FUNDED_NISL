-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_32_bad()
{
    int * data;
    int * *dataPtr1 = &data;
    int * *dataPtr2 = &data;
    data = NULL;
    {
        int * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        *dataPtr1 = data;
    }
    {
        int * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
83,85
84,85
88,89
89,90
89,91
90,91
92,93
92,94
93,94
96,97
97,98
97,99
98,99
99,100
101,102
103,104
103,105
104,105
105,106
105,107
107,108
107,109
107,110
110,111
111,112
112,113
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,63,66,67,71,73,78,80,85,86,87,91,94,95,100,102,106,108,109,113,114
-----computeFrom-----
35,36
35,37
52,53
52,54
69,70
69,71
82,83
82,84
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_32_bad(){    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_32_bad()
CWE401_Memory_Leak__int_calloc_32_bad
{    int * data;    int * *dataPtr1 = &data;    int * *dataPtr2 = &data;    data = NULL;    {        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }    {        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
int * *dataPtr1 = &data;
int * *dataPtr1 = &data;
int
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
int * *dataPtr2 = &data;
int * *dataPtr2 = &data;
int
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        int * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        *dataPtr1 = data;    }
int * data = *dataPtr1;
int * data = *dataPtr1;
int
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        int * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = *dataPtr2;
int * data = *dataPtr2;
int
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(15,16,0)
(19,34,0)
(37,23,0)
(42,53,0)
(26,57,0)
(21,49,0)
(38,19,0)
(57,33,0)
(15,33,0)
(18,49,0)
(3,41,0)
(39,38,0)
(16,49,0)
(55,34,0)
(45,15,0)
(4,0,0)
(53,43,0)
(6,25,0)
(14,27,0)
(43,5,0)
(31,16,0)
(24,28,0)
(44,52,0)
(53,33,0)
(30,27,0)
(36,34,0)
(17,33,0)
(2,30,0)
(56,43,0)
(19,23,0)
(27,34,0)
(41,33,0)
(24,27,0)
(48,24,0)
(28,25,0)
(9,41,0)
(29,52,0)
(32,57,0)
(52,29,0)
(25,34,0)
(13,34,0)
(28,24,0)
(8,13,0)
(49,34,0)
(0,19,0)
(35,15,0)
(40,49,0)
(54,13,0)
(33,53,0)
(22,18,0)
(0,17,0)
(18,38,0)
(50,33,0)
(12,19,0)
(53,42,0)
(35,49,0)
(46,5,0)
(33,49,0)
(38,18,0)
(29,10,0)
(57,16,0)
(47,28,0)
(15,35,0)
(43,53,0)
(20,34,0)
(17,49,0)
(23,19,0)
(11,15,0)
(27,30,0)
(5,43,0)
(1,17,0)
(31,57,1)
(15,33,1)
(15,16,1)
(4,35,1)
(56,50,1)
(27,30,1)
(18,38,1)
(26,32,1)
(38,39,1)
(47,17,1)
(37,12,1)
(16,31,1)
(29,52,1)
(13,8,1)
(53,42,1)
(43,5,1)
(33,53,1)
(28,24,1)
(57,26,1)
(48,47,1)
(8,54,1)
(53,43,1)
(23,37,1)
(14,19,1)
(5,46,1)
(17,1,1)
(41,9,1)
(11,16,1)
(3,33,1)
(1,0,1)
(46,56,1)
(0,19,1)
(22,13,1)
(54,27,1)
(39,22,1)
(2,14,1)
(41,33,1)
(9,3,1)
(50,18,1)
(19,23,1)
(24,27,1)
(24,48,1)
(17,33,1)
(38,19,1)
(0,4,1)
(35,15,1)
(51,28,1)
(44,41,1)
(15,45,1)
(45,11,1)
(57,33,1)
(32,29,1)
(52,44,1)
(32,41,1)
(30,2,1)
(15,33,2)
(0,19,2)
(43,5,2)
(24,27,2)
(33,53,2)
(53,42,2)
(17,33,2)
(44,41,2)
(41,33,2)
(19,23,2)
(29,41,2)
(15,16,2)
(28,24,2)
(27,30,2)
(52,41,2)
(53,43,2)
(29,52,2)
(35,15,2)
(57,33,2)
(38,19,2)
(18,38,2)
-----------------------------------
(0,*dataPtr1)
(1,data)
(2,data)
(3,data)
(4,dataPtr1)
(5,sizeof(int)
(6,data)
(7, sizeof(int)
(8,NULL)
(9,NULL)
(10,)
(11,data)
(12,dataPtr1)
(13,data = NULL)
(14,dataPtr2)
(15,data[0])
(16,data[0] = 5)
(17,*dataPtr1 = data)
(18,* data = *dataPtr1)
(19,* *dataPtr1 = &data)
(20,data)
(21,data)
(22,data)
(23,&data)
(24,*dataPtr2)
(25,)
(26,0)
(27,* *dataPtr2 = &data)
(28,* data = *dataPtr2)
(29,exit(-1)
(30,&data)
(31,5)
(32,data)
(33,data = (int *)
(34,)
(35,printIntLine(data[0])
(36,dataPtr1)
(37,data)
(38,*dataPtr1)
(39,dataPtr1)
(40,if (data == NULL)
(41,data == NULL)
(42,int *)
(43,calloc(100, sizeof(int)
(44,1)
(45,0)
(46,int)
(47,data)
(48,dataPtr2)
(49,)
(50,data)
(51,RET)
(52,-1)
(53,(int *)
(54,data)
(55,dataPtr2)
(56,100)
(57,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^