-----label-----
0
-----code-----
static struct ast_channel *ast_iax2_new(int callno, int state, iax2_format capability, const char *linkedid, unsigned int cachable)
{
	struct ast_channel *tmp;
	struct chan_iax2_pvt *i;
	struct ast_variable *v = NULL;
	struct ast_format tmpfmt;
	struct ast_callid *callid;

	if (!(i = iaxs[callno])) {
		ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno);
		return NULL;
	}

	/* Don't hold call lock */
	ast_mutex_unlock(&iaxsl[callno]);
	tmp = ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno);
	ast_mutex_lock(&iaxsl[callno]);
	if (i != iaxs[callno]) {
		if (tmp) {
			/* unlock and relock iaxsl[callno] to preserve locking order */
			ast_mutex_unlock(&iaxsl[callno]);
			tmp = ast_channel_release(tmp);
			ast_mutex_lock(&iaxsl[callno]);
		}
		return NULL;
	}
	iax2_ami_channelupdate(i);
	if (!tmp) {
		return NULL;
	}

	if ((callid = iaxs[callno]->callid)) {
		ast_channel_callid_set(tmp, callid);
	}

	ast_channel_tech_set(tmp, &iax2_tech);
	/* We can support any format by default, until we get restricted */
	ast_format_cap_from_old_bitfield(ast_channel_nativeformats(tmp), capability);
	ast_best_codec(ast_channel_nativeformats(tmp), &tmpfmt);

	ast_format_copy(ast_channel_readformat(tmp), &tmpfmt);
	ast_format_copy(ast_channel_rawreadformat(tmp), &tmpfmt);
	ast_format_copy(ast_channel_writeformat(tmp), &tmpfmt);
	ast_format_copy(ast_channel_rawwriteformat(tmp), &tmpfmt);

	ast_channel_tech_pvt_set(tmp, CALLNO_TO_PTR(i->callno));

	if (!ast_strlen_zero(i->parkinglot))
		ast_channel_parkinglot_set(tmp, i->parkinglot);
	/* Don't use ast_set_callerid() here because it will
	 * generate a NewCallerID event before the NewChannel event */
	if (!ast_strlen_zero(i->ani)) {
		ast_channel_caller(tmp)->ani.number.valid = 1;
		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani);
	} else if (!ast_strlen_zero(i->cid_num)) {
		ast_channel_caller(tmp)->ani.number.valid = 1;
		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);
	}
	ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);
	if (!ast_strlen_zero(i->rdnis)) {
		ast_channel_redirecting(tmp)->from.number.valid = 1;
		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);
	}
	ast_channel_caller(tmp)->id.name.presentation = i->calling_pres;
	ast_channel_caller(tmp)->id.number.presentation = i->calling_pres;
	ast_channel_caller(tmp)->id.number.plan = i->calling_ton;
	ast_channel_dialed(tmp)->transit_network_select = i->calling_tns;
	if (!ast_strlen_zero(i->language))
		ast_channel_language_set(tmp, i->language);
	if (!ast_strlen_zero(i->accountcode))
		ast_channel_accountcode_set(tmp, i->accountcode);
	if (i->amaflags)
		ast_channel_amaflags_set(tmp, i->amaflags);
	ast_channel_context_set(tmp, i->context);
	ast_channel_exten_set(tmp, i->exten);
	if (i->adsi)
		ast_channel_adsicpe_set(tmp, i->peeradsicpe);
	else
		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);
	i->owner = tmp;
	i->capability = capability;

	if (!cachable) {
		ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);
	}

	/* Set inherited variables */
	if (i->vars) {
		for (v = i->vars ; v ; v = v->next)
			pbx_builtin_setvar_helper(tmp, v->name, v->value);
	}
	if (i->iaxvars) {
		struct ast_datastore *variablestore;
		struct ast_variable *var, *prev = NULL;
		AST_LIST_HEAD(, ast_var_t) *varlist;
		ast_debug(1, "Loading up the channel with IAXVARs\n");
		varlist = ast_calloc(1, sizeof(*varlist));
		variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
		if (variablestore && varlist) {
			variablestore->data = varlist;
			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
			AST_LIST_HEAD_INIT(varlist);
			for (var = i->iaxvars; var; var = var->next) {
				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
				if (prev)
					ast_free(prev);
				prev = var;
				if (!newvar) {
					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */
					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
				} else {
					AST_LIST_INSERT_TAIL(varlist, newvar, entries);
				}
			}
			if (prev)
				ast_free(prev);
			i->iaxvars = NULL;
			ast_channel_datastore_add(i->owner, variablestore);
		} else {
			if (variablestore) {
				ast_datastore_free(variablestore);
			}
			if (varlist) {
				ast_free(varlist);
			}
		}
	}

	if (state != AST_STATE_DOWN) {
		if (ast_pbx_start(tmp)) {
			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));
			ast_hangup(tmp);
			i->owner = NULL;
			return NULL;
		}
	}

	ast_module_ref(ast_module_info->self);
	return tmp;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
7,8
7,9
9,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
20,21
20,22
22,23
22,24
25,26
25,27
27,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
29,38
29,39
29,40
29,41
29,42
29,43
29,44
29,45
29,46
29,47
29,48
29,49
29,50
29,51
29,52
29,53
29,54
29,55
29,56
29,57
29,58
29,59
29,60
29,61
29,62
29,63
29,64
29,65
29,66
29,67
29,68
29,69
29,70
29,71
29,72
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
67,68
67,69
68,69
69,70
70,71
70,72
71,72
73,74
73,75
74,75
76,77
78,79
78,80
79,80
80,81
80,82
80,83
80,84
81,82
83,84
86,87
88,89
89,90
91,92
92,93
92,94
93,94
95,96
96,97
96,98
96,99
99,100
100,101
102,103
103,104
103,105
104,105
106,107
106,108
106,109
106,110
106,111
106,112
106,113
106,114
106,115
106,116
106,117
106,118
106,119
107,108
110,111
112,113
112,114
113,114
116,117
116,118
117,118
120,121
120,122
121,122
124,125
124,126
125,126
128,129
128,130
129,130
132,133
134,135
134,136
135,136
139,140
139,141
140,141
143,144
143,145
144,145
147,148
148,149
148,150
149,150
151,152
152,153
152,154
153,154
155,156
157,158
157,159
158,159
158,160
159,160
161,162
161,163
162,163
164,165
166,167
166,168
167,168
167,169
168,169
170,171
170,172
170,173
171,172
172,173
172,174
173,174
175,176
176,177
176,178
177,178
179,180
181,182
182,183
182,184
183,184
185,186
185,187
186,187
188,189
190,191
191,192
191,193
192,193
194,195
195,196
195,197
196,197
198,199
200,201
201,202
203,204
204,205
204,206
205,206
207,208
209,210
209,211
210,211
211,212
213,214
214,215
215,216
217,218
217,219
218,219
219,220
219,221
220,221
222,223
222,224
223,224
223,225
224,225
226,227
229,230
230,231
231,232
231,233
231,234
232,233
234,235
236,237
238,239
239,240
239,241
239,242
240,241
242,243
244,245
245,246
247,248
248,249
248,250
248,251
249,250
251,252
251,253
252,253
254,255
256,257
258,259
259,260
259,261
259,262
260,261
262,263
262,264
263,264
265,266
267,268
268,269
270,271
271,272
271,273
271,274
272,273
274,275
274,276
275,276
277,278
279,280
280,281
282,283
283,284
283,285
283,286
284,285
286,287
286,288
287,288
289,290
291,292
292,293
294,295
295,296
295,297
295,298
296,297
298,299
298,300
299,300
301,302
303,304
304,305
306,307
307,308
307,309
307,310
308,309
310,311
310,312
311,312
313,314
315,316
316,317
318,319
319,320
319,321
319,322
320,321
322,323
324,325
324,326
325,326
327,328
327,329
328,329
331,332
331,333
332,333
333,334
333,335
334,335
336,337
336,338
337,338
340,341
341,342
341,343
341,344
342,343
344,345
346,347
346,348
347,348
350,351
350,352
350,353
351,352
352,353
352,354
353,354
355,356
355,357
356,357
359,360
359,361
360,361
361,362
361,363
362,363
362,364
363,364
363,365
364,365
364,366
365,366
365,367
366,367
368,369
374,375
375,376
375,377
376,377
376,378
377,378
377,379
378,379
378,380
379,380
379,381
380,381
382,383
387,388
387,389
388,389
390,391
390,392
391,392
394,395
394,396
395,396
396,397
396,398
397,398
399,400
399,401
400,401
403,404
403,405
404,405
405,406
405,407
406,407
406,408
407,408
407,409
408,409
408,410
409,410
409,411
410,411
412,413
418,419
419,420
419,421
420,421
420,422
421,422
421,423
422,423
422,424
423,424
423,425
424,425
426,427
431,432
431,433
432,433
434,435
434,436
435,436
438,439
439,440
439,441
440,441
440,442
441,442
441,443
442,443
442,444
443,444
445,446
449,450
449,451
450,451
452,453
452,454
453,454
456,457
456,458
457,458
458,459
458,460
459,460
461,462
461,463
462,463
465,466
465,467
466,467
467,468
467,469
468,469
468,470
469,470
469,471
470,471
470,472
471,472
471,473
472,473
474,475
480,481
481,482
481,483
482,483
482,484
483,484
483,485
484,485
484,486
485,486
485,487
486,487
488,489
493,494
493,495
494,495
496,497
496,498
497,498
500,501
501,502
501,503
502,503
502,504
503,504
503,505
504,505
504,506
505,506
505,507
506,507
508,509
513,514
513,515
514,515
517,518
518,519
518,520
519,520
519,521
520,521
520,522
521,522
521,523
522,523
522,524
523,524
525,526
530,531
530,532
531,532
534,535
535,536
535,537
536,537
536,538
537,538
537,539
538,539
538,540
539,540
539,541
540,541
542,543
547,548
547,549
548,549
551,552
552,553
552,554
553,554
553,555
554,555
554,556
555,556
557,558
560,561
560,562
561,562
564,565
564,566
565,566
566,567
566,568
567,568
569,570
569,571
570,571
573,574
574,575
574,576
574,577
575,576
577,578
579,580
579,581
580,581
583,584
583,585
584,585
585,586
585,587
586,587
588,589
588,590
589,590
592,593
593,594
593,595
593,596
594,595
596,597
598,599
598,600
599,600
602,603
602,604
603,604
603,605
604,605
607,608
608,609
608,610
608,611
609,610
611,612
613,614
613,615
614,615
617,618
618,619
618,620
618,621
619,620
621,622
623,624
623,625
624,625
627,628
628,629
628,630
628,631
629,630
631,632
633,634
633,635
634,635
637,638
637,639
637,640
638,639
638,640
639,640
642,643
643,644
643,645
643,646
644,645
646,647
648,649
648,650
649,650
652,653
653,654
653,655
653,656
654,655
656,657
658,659
660,661
661,662
661,663
662,663
662,664
663,664
666,667
668,669
669,670
669,671
670,671
670,672
671,672
674,675
676,677
676,678
677,678
678,679
680,681
681,682
682,683
682,684
682,685
683,684
685,686
685,687
686,687
688,689
690,691
692,693
692,694
693,694
693,695
694,695
697,698
698,699
698,700
698,701
698,702
699,700
700,701
700,702
701,702
703,704
703,705
704,705
707,708
709,710
709,711
710,711
712,713
712,714
713,714
716,717
717,718
717,719
717,720
717,721
718,719
720,721
722,723
722,724
723,724
726,727
726,728
727,728
730,731
730,732
731,732
731,733
732,733
735,736
735,737
735,738
735,739
735,740
735,741
735,742
736,737
737,738
737,739
738,739
740,741
740,742
743,744
744,745
744,746
744,747
745,746
747,748
747,749
750,751
750,752
750,753
753,754
754,755
756,757
757,758
758,759
758,760
758,761
759,760
763,764
764,765
764,766
765,766
767,768
767,769
767,770
768,769
771,772
772,773
773,774
774,775
776,777
777,778
777,779
778,779
780,781
780,782
780,783
781,782
783,784
784,785
786,787
788,789
788,790
788,791
789,790
789,791
790,791
792,793
794,795
794,796
794,797
794,798
794,799
794,800
794,801
795,796
796,797
796,798
797,798
797,799
798,799
801,802
803,804
804,805
804,806
805,806
805,807
806,807
809,810
811,812
812,813
812,814
813,814
815,816
816,817
818,819
818,820
818,821
818,822
819,820
820,821
820,822
821,822
823,824
823,825
824,825
827,828
829,830
829,831
830,831
832,833
832,834
833,834
836,837
836,838
836,839
836,840
837,838
838,839
838,840
839,840
841,842
841,843
841,844
844,845
845,846
845,847
845,848
846,847
848,849
848,850
849,850
852,853
852,854
853,854
856,857
856,858
857,858
859,860
860,861
860,862
861,862
863,864
865,866
866,867
866,868
867,868
869,870
871,872
871,873
871,874
872,873
873,874
875,876
876,877
877,878
877,879
877,880
878,879
880,881
883,884
884,885
885,886
885,887
885,888
885,889
886,887
888,889
890,891
892,893
894,895
894,896
895,896
897,898
898,899
898,900
899,900
901,902
903,904
904,905
904,906
905,906
905,907
906,907
909,910
911,912
912,913
912,914
912,915
913,914
915,916
915,917
916,917
919,920
921,922
921,923
922,923
922,924
923,924
925,926
926,927
927,928
927,929
928,929
930,931
932,933
932,934
933,934
935,936
936,937
937,938
937,939
938,939
940,941
941,942
943,944
943,945
944,945
944,946
945,946
947,948
949,950
950,951
950,952
951,952
951,953
952,953
954,955
956,957
956,958
956,959
956,960
957,958
958,959
958,960
958,961
958,962
959,960
961,962
964,965
964,966
965,966
967,968
969,970
970,971
970,972
971,972
973,974
975,976
976,977
976,978
977,978
977,979
978,979
981,982
983,984
984,985
986,987
987,988
987,989
988,989
990,991
990,992
991,992
994,995
995,996
-----nextToken-----
3,5,6,8,10,12,14,17,19,21,23,24,26,28,33,35,36,40,42,43,47,49,50,53,57,59,63,65,66,72,75,77,82,84,85,87,90,94,97,98,101,105,108,109,111,114,115,118,119,122,123,126,127,130,131,133,136,137,138,141,142,145,146,150,154,156,160,163,165,169,174,178,180,184,187,189,193,197,199,202,206,208,212,216,221,225,227,228,233,235,237,241,243,246,250,253,255,257,261,264,266,269,273,276,278,281,285,288,290,293,297,300,302,305,309,312,314,317,321,323,326,329,330,335,338,339,343,345,348,349,354,357,358,367,369,370,371,372,373,381,383,384,385,386,389,392,393,398,401,402,411,413,414,415,416,417,425,427,428,429,430,433,436,437,444,446,447,448,451,454,455,460,463,464,473,475,476,477,478,479,487,489,490,491,492,495,498,499,507,509,510,511,512,515,516,524,526,527,528,529,532,533,541,543,544,545,546,549,550,556,558,559,562,563,568,571,572,576,578,581,582,587,590,591,595,597,600,601,605,606,610,612,615,616,620,622,625,626,630,632,635,636,640,641,645,647,650,651,655,657,659,664,665,667,672,673,675,679,684,687,689,691,695,696,702,705,706,708,711,714,715,719,721,724,725,728,729,733,734,739,741,742,746,748,749,751,752,755,760,761,762,766,769,770,775,779,782,785,787,791,793,799,800,802,807,808,810,814,817,822,825,826,828,831,834,835,840,842,843,847,850,851,854,855,858,862,864,868,870,874,879,881,882,887,889,891,893,896,900,902,907,908,910,914,917,918,920,924,929,931,934,939,942,946,948,953,955,960,962,963,966,968,972,974,979,980,982,985,989,992,993,996
-----computeFrom-----
70,71
70,72
103,104
103,105
158,159
158,160
182,183
182,184
219,220
219,221
361,362
361,363
375,376
375,377
405,406
405,407
419,420
419,421
439,440
439,441
467,468
467,469
481,482
481,483
501,502
501,503
518,519
518,520
535,536
535,537
552,553
552,554
661,662
661,663
669,670
669,671
700,701
700,702
709,710
709,711
764,765
764,766
777,778
777,779
789,790
789,791
796,797
796,798
804,805
804,806
820,821
820,822
829,830
829,831
866,867
866,868
904,905
904,906
944,945
944,946
976,977
976,978
-----guardedBy-----
165,199
791,920
793,889
-----guardedByNegation-----
791,931
793,942
-----lastLexicalUse-----
791,931
793,942
-----jump-----
791,931
793,942
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct ast_channel *ast_iax2_new(int callno, int state, iax2_format capability, const char *linkedid, unsigned int cachable){	struct ast_channel *tmp;	struct chan_iax2_pvt *i;	struct ast_variable *v = NULL;	struct ast_format tmpfmt;	struct ast_callid *callid;	if (!(i = iaxs[callno])) {		ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno);		return NULL;	}	/* Don't hold call lock */	ast_mutex_unlock(&iaxsl[callno]);	tmp = ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno);	ast_mutex_lock(&iaxsl[callno]);	if (i != iaxs[callno]) {		if (tmp) {			/* unlock and relock iaxsl[callno] to preserve locking order */			ast_mutex_unlock(&iaxsl[callno]);			tmp = ast_channel_release(tmp);			ast_mutex_lock(&iaxsl[callno]);		}		return NULL;	}	iax2_ami_channelupdate(i);	if (!tmp) {		return NULL;	}	if ((callid = iaxs[callno]->callid)) {		ast_channel_callid_set(tmp, callid);	}	ast_channel_tech_set(tmp, &iax2_tech);	/* We can support any format by default, until we get restricted */	ast_format_cap_from_old_bitfield(ast_channel_nativeformats(tmp), capability);	ast_best_codec(ast_channel_nativeformats(tmp), &tmpfmt);	ast_format_copy(ast_channel_readformat(tmp), &tmpfmt);	ast_format_copy(ast_channel_rawreadformat(tmp), &tmpfmt);	ast_format_copy(ast_channel_writeformat(tmp), &tmpfmt);	ast_format_copy(ast_channel_rawwriteformat(tmp), &tmpfmt);	ast_channel_tech_pvt_set(tmp, CALLNO_TO_PTR(i->callno));	if (!ast_strlen_zero(i->parkinglot))		ast_channel_parkinglot_set(tmp, i->parkinglot);	/* Don't use ast_set_callerid() here because it will	 * generate a NewCallerID event before the NewChannel event */	if (!ast_strlen_zero(i->ani)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani);	} else if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}	ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);	if (!ast_strlen_zero(i->rdnis)) {		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}	ast_channel_caller(tmp)->id.name.presentation = i->calling_pres;	ast_channel_caller(tmp)->id.number.presentation = i->calling_pres;	ast_channel_caller(tmp)->id.number.plan = i->calling_ton;	ast_channel_dialed(tmp)->transit_network_select = i->calling_tns;	if (!ast_strlen_zero(i->language))		ast_channel_language_set(tmp, i->language);	if (!ast_strlen_zero(i->accountcode))		ast_channel_accountcode_set(tmp, i->accountcode);	if (i->amaflags)		ast_channel_amaflags_set(tmp, i->amaflags);	ast_channel_context_set(tmp, i->context);	ast_channel_exten_set(tmp, i->exten);	if (i->adsi)		ast_channel_adsicpe_set(tmp, i->peeradsicpe);	else		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);	i->owner = tmp;	i->capability = capability;	if (!cachable) {		ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);	}	/* Set inherited variables */	if (i->vars) {		for (v = i->vars ; v ; v = v->next)			pbx_builtin_setvar_helper(tmp, v->name, v->value);	}	if (i->iaxvars) {		struct ast_datastore *variablestore;		struct ast_variable *var, *prev = NULL;		AST_LIST_HEAD(, ast_var_t) *varlist;		ast_debug(1, "Loading up the channel with IAXVARs\n");		varlist = ast_calloc(1, sizeof(*varlist));		variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);		if (variablestore && varlist) {			variablestore->data = varlist;			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;			AST_LIST_HEAD_INIT(varlist);			for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}			if (prev)				ast_free(prev);			i->iaxvars = NULL;			ast_channel_datastore_add(i->owner, variablestore);		} else {			if (variablestore) {				ast_datastore_free(variablestore);			}			if (varlist) {				ast_free(varlist);			}		}	}	if (state != AST_STATE_DOWN) {		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			i->owner = NULL;			return NULL;		}	}	ast_module_ref(ast_module_info->self);	return tmp;}
static struct ast_channel
ast_channel
*ast_iax2_new(int callno, int state, iax2_format capability, const char *linkedid, unsigned int cachable)
*
ast_iax2_new
int callno
int
callno
callno
int state
int
state
state
iax2_format capability
iax2_format
iax2_format
capability
capability
const char *linkedid
const char
*linkedid
*
linkedid
unsigned int cachable
unsigned int
cachable
cachable
{	struct ast_channel *tmp;	struct chan_iax2_pvt *i;	struct ast_variable *v = NULL;	struct ast_format tmpfmt;	struct ast_callid *callid;	if (!(i = iaxs[callno])) {		ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno);		return NULL;	}	/* Don't hold call lock */	ast_mutex_unlock(&iaxsl[callno]);	tmp = ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno);	ast_mutex_lock(&iaxsl[callno]);	if (i != iaxs[callno]) {		if (tmp) {			/* unlock and relock iaxsl[callno] to preserve locking order */			ast_mutex_unlock(&iaxsl[callno]);			tmp = ast_channel_release(tmp);			ast_mutex_lock(&iaxsl[callno]);		}		return NULL;	}	iax2_ami_channelupdate(i);	if (!tmp) {		return NULL;	}	if ((callid = iaxs[callno]->callid)) {		ast_channel_callid_set(tmp, callid);	}	ast_channel_tech_set(tmp, &iax2_tech);	/* We can support any format by default, until we get restricted */	ast_format_cap_from_old_bitfield(ast_channel_nativeformats(tmp), capability);	ast_best_codec(ast_channel_nativeformats(tmp), &tmpfmt);	ast_format_copy(ast_channel_readformat(tmp), &tmpfmt);	ast_format_copy(ast_channel_rawreadformat(tmp), &tmpfmt);	ast_format_copy(ast_channel_writeformat(tmp), &tmpfmt);	ast_format_copy(ast_channel_rawwriteformat(tmp), &tmpfmt);	ast_channel_tech_pvt_set(tmp, CALLNO_TO_PTR(i->callno));	if (!ast_strlen_zero(i->parkinglot))		ast_channel_parkinglot_set(tmp, i->parkinglot);	/* Don't use ast_set_callerid() here because it will	 * generate a NewCallerID event before the NewChannel event */	if (!ast_strlen_zero(i->ani)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani);	} else if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}	ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);	if (!ast_strlen_zero(i->rdnis)) {		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}	ast_channel_caller(tmp)->id.name.presentation = i->calling_pres;	ast_channel_caller(tmp)->id.number.presentation = i->calling_pres;	ast_channel_caller(tmp)->id.number.plan = i->calling_ton;	ast_channel_dialed(tmp)->transit_network_select = i->calling_tns;	if (!ast_strlen_zero(i->language))		ast_channel_language_set(tmp, i->language);	if (!ast_strlen_zero(i->accountcode))		ast_channel_accountcode_set(tmp, i->accountcode);	if (i->amaflags)		ast_channel_amaflags_set(tmp, i->amaflags);	ast_channel_context_set(tmp, i->context);	ast_channel_exten_set(tmp, i->exten);	if (i->adsi)		ast_channel_adsicpe_set(tmp, i->peeradsicpe);	else		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);	i->owner = tmp;	i->capability = capability;	if (!cachable) {		ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);	}	/* Set inherited variables */	if (i->vars) {		for (v = i->vars ; v ; v = v->next)			pbx_builtin_setvar_helper(tmp, v->name, v->value);	}	if (i->iaxvars) {		struct ast_datastore *variablestore;		struct ast_variable *var, *prev = NULL;		AST_LIST_HEAD(, ast_var_t) *varlist;		ast_debug(1, "Loading up the channel with IAXVARs\n");		varlist = ast_calloc(1, sizeof(*varlist));		variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);		if (variablestore && varlist) {			variablestore->data = varlist;			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;			AST_LIST_HEAD_INIT(varlist);			for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}			if (prev)				ast_free(prev);			i->iaxvars = NULL;			ast_channel_datastore_add(i->owner, variablestore);		} else {			if (variablestore) {				ast_datastore_free(variablestore);			}			if (varlist) {				ast_free(varlist);			}		}	}	if (state != AST_STATE_DOWN) {		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			i->owner = NULL;			return NULL;		}	}	ast_module_ref(ast_module_info->self);	return tmp;}
struct ast_channel *tmp;
struct ast_channel *tmp;
struct ast_channel
ast_channel
*tmp
*
tmp
struct chan_iax2_pvt *i;
struct chan_iax2_pvt *i;
struct chan_iax2_pvt
chan_iax2_pvt
*i
*
i
struct ast_variable *v = NULL;
struct ast_variable *v = NULL;
struct ast_variable
ast_variable
*v = NULL
*
v
= NULL
NULL
NULL
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
struct ast_callid *callid;
struct ast_callid *callid;
struct ast_callid
ast_callid
*callid
*
callid
if (!(i = iaxs[callno])) {		ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno);		return NULL;	}
!(i = iaxs[callno])
(i = iaxs[callno])
i = iaxs[callno]
i
i
iaxs[callno]
iaxs
iaxs
callno
callno
{		ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno);		return NULL;	}
ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno);
ast_log(LOG_WARNING, "No IAX2 pvt found for callno '%d' !\n", callno)
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"No IAX2 pvt found for callno '%d' !\n"
callno
callno
return NULL;
NULL
NULL
ast_mutex_unlock(&iaxsl[callno]);
ast_mutex_unlock(&iaxsl[callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[callno])
&iaxsl[callno]
&
iaxsl
[callno]
callno
callno
tmp = ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno);
tmp = ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno)
tmp
tmp
ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno)
ast_channel_alloc
ast_channel_alloc
1
state
state
i->cid_num
i
i
cid_num
i->cid_name
i
i
cid_name
i->accountcode
i
i
accountcode
i->exten
i
i
exten
i->context
i
i
context
linkedid
linkedid
i->amaflags
i
i
amaflags
"IAX2/%s-%d"
i->host
i
i
host
i->callno
i
i
callno
ast_mutex_lock(&iaxsl[callno]);
ast_mutex_lock(&iaxsl[callno])
ast_mutex_lock
ast_mutex_lock
&iaxsl[callno]
iaxsl[callno]
iaxsl
iaxsl
callno
callno
if (i != iaxs[callno]) {		if (tmp) {			/* unlock and relock iaxsl[callno] to preserve locking order */			ast_mutex_unlock(&iaxsl[callno]);			tmp = ast_channel_release(tmp);			ast_mutex_lock(&iaxsl[callno]);		}		return NULL;	}
i != iaxs[callno]
i
i
iaxs[callno]
iaxs
iaxs
callno
callno
{		if (tmp) {			/* unlock and relock iaxsl[callno] to preserve locking order */			ast_mutex_unlock(&iaxsl[callno]);			tmp = ast_channel_release(tmp);			ast_mutex_lock(&iaxsl[callno]);		}		return NULL;	}
if (tmp) {			/* unlock and relock iaxsl[callno] to preserve locking order */			ast_mutex_unlock(&iaxsl[callno]);			tmp = ast_channel_release(tmp);			ast_mutex_lock(&iaxsl[callno]);		}
tmp
tmp
{			/* unlock and relock iaxsl[callno] to preserve locking order */			ast_mutex_unlock(&iaxsl[callno]);			tmp = ast_channel_release(tmp);			ast_mutex_lock(&iaxsl[callno]);		}
ast_mutex_unlock(&iaxsl[callno]);
ast_mutex_unlock(&iaxsl[callno])
ast_mutex_unlock
ast_mutex_unlock
&iaxsl[callno]
iaxsl[callno]
iaxsl
iaxsl
callno
callno
tmp = ast_channel_release(tmp);
tmp = ast_channel_release(tmp)
tmp
tmp
ast_channel_release(tmp)
ast_channel_release
ast_channel_release
tmp
tmp
ast_mutex_lock(&iaxsl[callno]);
ast_mutex_lock(&iaxsl[callno])
ast_mutex_lock
ast_mutex_lock
&iaxsl[callno]
iaxsl[callno]
iaxsl
iaxsl
callno
callno
return NULL;
NULL
NULL
iax2_ami_channelupdate(i);
iax2_ami_channelupdate(i)
iax2_ami_channelupdate
iax2_ami_channelupdate
i
i
if (!tmp) {		return NULL;	}
!tmp
tmp
tmp
{		return NULL;	}
return NULL;
NULL
NULL
if ((callid = iaxs[callno]->callid)) {		ast_channel_callid_set(tmp, callid);	}
(callid = iaxs[callno]->callid)
callid = iaxs[callno]->callid
callid
callid
iaxs[callno]->callid
iaxs[callno]
iaxs
iaxs
callno
callno
callid
{		ast_channel_callid_set(tmp, callid);	}
ast_channel_callid_set(tmp, callid);
ast_channel_callid_set(tmp, callid)
ast_channel_callid_set
ast_channel_callid_set
tmp
tmp
callid
callid
ast_channel_tech_set(tmp, &iax2_tech);
ast_channel_tech_set(tmp, &iax2_tech)
ast_channel_tech_set
ast_channel_tech_set
tmp
tmp
&iax2_tech
iax2_tech
iax2_tech
ast_format_cap_from_old_bitfield(ast_channel_nativeformats(tmp), capability);
ast_format_cap_from_old_bitfield(ast_channel_nativeformats(tmp), capability)
ast_format_cap_from_old_bitfield
ast_format_cap_from_old_bitfield
ast_channel_nativeformats(tmp)
ast_channel_nativeformats
ast_channel_nativeformats
tmp
tmp
capability
capability
ast_best_codec(ast_channel_nativeformats(tmp), &tmpfmt);
ast_best_codec(ast_channel_nativeformats(tmp), &tmpfmt)
ast_best_codec
ast_best_codec
ast_channel_nativeformats(tmp)
ast_channel_nativeformats
ast_channel_nativeformats
tmp
tmp
&tmpfmt
tmpfmt
tmpfmt
ast_format_copy(ast_channel_readformat(tmp), &tmpfmt);
ast_format_copy(ast_channel_readformat(tmp), &tmpfmt)
ast_format_copy
ast_format_copy
ast_channel_readformat(tmp)
ast_channel_readformat
ast_channel_readformat
tmp
tmp
&tmpfmt
tmpfmt
tmpfmt
ast_format_copy(ast_channel_rawreadformat(tmp), &tmpfmt);
ast_format_copy(ast_channel_rawreadformat(tmp), &tmpfmt)
ast_format_copy
ast_format_copy
ast_channel_rawreadformat(tmp)
ast_channel_rawreadformat
ast_channel_rawreadformat
tmp
tmp
&tmpfmt
tmpfmt
tmpfmt
ast_format_copy(ast_channel_writeformat(tmp), &tmpfmt);
ast_format_copy(ast_channel_writeformat(tmp), &tmpfmt)
ast_format_copy
ast_format_copy
ast_channel_writeformat(tmp)
ast_channel_writeformat
ast_channel_writeformat
tmp
tmp
&tmpfmt
tmpfmt
tmpfmt
ast_format_copy(ast_channel_rawwriteformat(tmp), &tmpfmt);
ast_format_copy(ast_channel_rawwriteformat(tmp), &tmpfmt)
ast_format_copy
ast_format_copy
ast_channel_rawwriteformat(tmp)
ast_channel_rawwriteformat
ast_channel_rawwriteformat
tmp
tmp
&tmpfmt
tmpfmt
tmpfmt
ast_channel_tech_pvt_set(tmp, CALLNO_TO_PTR(i->callno));
ast_channel_tech_pvt_set(tmp, CALLNO_TO_PTR(i->callno))
ast_channel_tech_pvt_set
ast_channel_tech_pvt_set
tmp
tmp
CALLNO_TO_PTR(i->callno)
CALLNO_TO_PTR
CALLNO_TO_PTR
i->callno
i
i
callno
if (!ast_strlen_zero(i->parkinglot))		ast_channel_parkinglot_set(tmp, i->parkinglot);
!ast_strlen_zero(i->parkinglot)
ast_strlen_zero(i->parkinglot)
ast_strlen_zero
ast_strlen_zero
i->parkinglot
i
i
parkinglot
ast_channel_parkinglot_set(tmp, i->parkinglot);
ast_channel_parkinglot_set(tmp, i->parkinglot)
ast_channel_parkinglot_set
ast_channel_parkinglot_set
tmp
tmp
i->parkinglot
i
i
parkinglot
if (!ast_strlen_zero(i->ani)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani);	} else if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}
!ast_strlen_zero(i->ani)
ast_strlen_zero(i->ani)
ast_strlen_zero
ast_strlen_zero
i->ani
i
i
ani
{		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani);	}
ast_channel_caller(tmp)->ani.number.valid = 1;
ast_channel_caller(tmp)->ani.number.valid = 1
ast_channel_caller(tmp)->ani.number.valid
ast_channel_caller(tmp)->ani.number
ast_channel_caller(tmp)->ani
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani
number
valid
1
ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani);
ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->ani)
ast_channel_caller(tmp)->ani.number.str
ast_channel_caller(tmp)->ani.number
ast_channel_caller(tmp)->ani
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani
number
str
ast_strdup(i->ani)
ast_strdup
ast_strdup
i->ani
i
i
ani
if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}
!ast_strlen_zero(i->cid_num)
ast_strlen_zero(i->cid_num)
ast_strlen_zero
ast_strlen_zero
i->cid_num
i
i
cid_num
{		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}
ast_channel_caller(tmp)->ani.number.valid = 1;
ast_channel_caller(tmp)->ani.number.valid = 1
ast_channel_caller(tmp)->ani.number.valid
ast_channel_caller(tmp)->ani.number
ast_channel_caller(tmp)->ani
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani
number
valid
1
ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);
ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num)
ast_channel_caller(tmp)->ani.number.str
ast_channel_caller(tmp)->ani.number
ast_channel_caller(tmp)->ani
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani
number
str
ast_strdup(i->cid_num)
ast_strdup
ast_strdup
i->cid_num
i
i
cid_num
ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);
ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid)
ast_channel_dialed(tmp)->number.str
ast_channel_dialed(tmp)->number
ast_channel_dialed(tmp)
ast_channel_dialed
ast_channel_dialed
tmp
tmp
number
str
ast_strdup(i->dnid)
ast_strdup
ast_strdup
i->dnid
i
i
dnid
if (!ast_strlen_zero(i->rdnis)) {		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}
!ast_strlen_zero(i->rdnis)
ast_strlen_zero(i->rdnis)
ast_strlen_zero
ast_strlen_zero
i->rdnis
i
i
rdnis
{		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}
ast_channel_redirecting(tmp)->from.number.valid = 1;
ast_channel_redirecting(tmp)->from.number.valid = 1
ast_channel_redirecting(tmp)->from.number.valid
ast_channel_redirecting(tmp)->from.number
ast_channel_redirecting(tmp)->from
ast_channel_redirecting(tmp)
ast_channel_redirecting
ast_channel_redirecting
tmp
tmp
from
number
valid
1
ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);
ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis)
ast_channel_redirecting(tmp)->from.number.str
ast_channel_redirecting(tmp)->from.number
ast_channel_redirecting(tmp)->from
ast_channel_redirecting(tmp)
ast_channel_redirecting
ast_channel_redirecting
tmp
tmp
from
number
str
ast_strdup(i->rdnis)
ast_strdup
ast_strdup
i->rdnis
i
i
rdnis
ast_channel_caller(tmp)->id.name.presentation = i->calling_pres;
ast_channel_caller(tmp)->id.name.presentation = i->calling_pres
ast_channel_caller(tmp)->id.name.presentation
ast_channel_caller(tmp)->id.name
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
name
presentation
i->calling_pres
i
i
calling_pres
ast_channel_caller(tmp)->id.number.presentation = i->calling_pres;
ast_channel_caller(tmp)->id.number.presentation = i->calling_pres
ast_channel_caller(tmp)->id.number.presentation
ast_channel_caller(tmp)->id.number
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
number
presentation
i->calling_pres
i
i
calling_pres
ast_channel_caller(tmp)->id.number.plan = i->calling_ton;
ast_channel_caller(tmp)->id.number.plan = i->calling_ton
ast_channel_caller(tmp)->id.number.plan
ast_channel_caller(tmp)->id.number
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
number
plan
i->calling_ton
i
i
calling_ton
ast_channel_dialed(tmp)->transit_network_select = i->calling_tns;
ast_channel_dialed(tmp)->transit_network_select = i->calling_tns
ast_channel_dialed(tmp)->transit_network_select
ast_channel_dialed(tmp)
ast_channel_dialed
ast_channel_dialed
tmp
tmp
transit_network_select
i->calling_tns
i
i
calling_tns
if (!ast_strlen_zero(i->language))		ast_channel_language_set(tmp, i->language);
!ast_strlen_zero(i->language)
ast_strlen_zero(i->language)
ast_strlen_zero
ast_strlen_zero
i->language
i
i
language
ast_channel_language_set(tmp, i->language);
ast_channel_language_set(tmp, i->language)
ast_channel_language_set
ast_channel_language_set
tmp
tmp
i->language
i
i
language
if (!ast_strlen_zero(i->accountcode))		ast_channel_accountcode_set(tmp, i->accountcode);
!ast_strlen_zero(i->accountcode)
ast_strlen_zero(i->accountcode)
ast_strlen_zero
ast_strlen_zero
i->accountcode
i
i
accountcode
ast_channel_accountcode_set(tmp, i->accountcode);
ast_channel_accountcode_set(tmp, i->accountcode)
ast_channel_accountcode_set
ast_channel_accountcode_set
tmp
tmp
i->accountcode
i
i
accountcode
if (i->amaflags)		ast_channel_amaflags_set(tmp, i->amaflags);
i->amaflags
i
i
amaflags
ast_channel_amaflags_set(tmp, i->amaflags);
ast_channel_amaflags_set(tmp, i->amaflags)
ast_channel_amaflags_set
ast_channel_amaflags_set
tmp
tmp
i->amaflags
i
i
amaflags
ast_channel_context_set(tmp, i->context);
ast_channel_context_set(tmp, i->context)
ast_channel_context_set
ast_channel_context_set
tmp
tmp
i->context
i
i
context
ast_channel_exten_set(tmp, i->exten);
ast_channel_exten_set(tmp, i->exten)
ast_channel_exten_set
ast_channel_exten_set
tmp
tmp
i->exten
i
i
exten
if (i->adsi)		ast_channel_adsicpe_set(tmp, i->peeradsicpe);	else		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);
i->adsi
i
i
adsi
ast_channel_adsicpe_set(tmp, i->peeradsicpe);
ast_channel_adsicpe_set(tmp, i->peeradsicpe)
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp
tmp
i->peeradsicpe
i
i
peeradsicpe
ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);
ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE)
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp
tmp
AST_ADSI_UNAVAILABLE
AST_ADSI_UNAVAILABLE
i->owner = tmp;
i->owner = tmp
i->owner
i
i
owner
tmp
tmp
i->capability = capability;
i->capability = capability
i->capability
i
i
capability
capability
capability
if (!cachable) {		ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);	}
!cachable
cachable
cachable
{		ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);	}
ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE);
ast_set_flag(ast_channel_flags(tmp), AST_FLAG_DISABLE_DEVSTATE_CACHE)
ast_set_flag
ast_set_flag
ast_channel_flags(tmp)
ast_channel_flags
ast_channel_flags
tmp
tmp
AST_FLAG_DISABLE_DEVSTATE_CACHE
AST_FLAG_DISABLE_DEVSTATE_CACHE
if (i->vars) {		for (v = i->vars ; v ; v = v->next)			pbx_builtin_setvar_helper(tmp, v->name, v->value);	}
i->vars
i
i
vars
{		for (v = i->vars ; v ; v = v->next)			pbx_builtin_setvar_helper(tmp, v->name, v->value);	}
for (v = i->vars ; v ; v = v->next)			pbx_builtin_setvar_helper(tmp, v->name, v->value);
v = i->vars ;
v = i->vars
v
v
i->vars
i
i
vars
v
v
v = v->next
v
v
v->next
v
v
next
pbx_builtin_setvar_helper(tmp, v->name, v->value);
pbx_builtin_setvar_helper(tmp, v->name, v->value)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
tmp
tmp
v->name
v
v
name
v->value
v
v
value
if (i->iaxvars) {		struct ast_datastore *variablestore;		struct ast_variable *var, *prev = NULL;		AST_LIST_HEAD(, ast_var_t) *varlist;		ast_debug(1, "Loading up the channel with IAXVARs\n");		varlist = ast_calloc(1, sizeof(*varlist));		variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);		if (variablestore && varlist) {			variablestore->data = varlist;			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;			AST_LIST_HEAD_INIT(varlist);			for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}			if (prev)				ast_free(prev);			i->iaxvars = NULL;			ast_channel_datastore_add(i->owner, variablestore);		} else {			if (variablestore) {				ast_datastore_free(variablestore);			}			if (varlist) {				ast_free(varlist);			}		}	}
i->iaxvars
i
i
iaxvars
{		struct ast_datastore *variablestore;		struct ast_variable *var, *prev = NULL;		AST_LIST_HEAD(, ast_var_t) *varlist;		ast_debug(1, "Loading up the channel with IAXVARs\n");		varlist = ast_calloc(1, sizeof(*varlist));		variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);		if (variablestore && varlist) {			variablestore->data = varlist;			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;			AST_LIST_HEAD_INIT(varlist);			for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}			if (prev)				ast_free(prev);			i->iaxvars = NULL;			ast_channel_datastore_add(i->owner, variablestore);		} else {			if (variablestore) {				ast_datastore_free(variablestore);			}			if (varlist) {				ast_free(varlist);			}		}	}
struct ast_datastore *variablestore;
struct ast_datastore *variablestore;
struct ast_datastore
ast_datastore
*variablestore
*
variablestore
struct ast_variable *var, *prev = NULL;
struct ast_variable *var, *prev = NULL;
struct ast_variable
ast_variable
*var
*
var
*prev = NULL
*
prev
= NULL
NULL
NULL
AST_LIST_HEAD(, ast_var_t) *varlist;
ast_debug(1, "Loading up the channel with IAXVARs\n");
ast_debug(1, "Loading up the channel with IAXVARs\n")
ast_debug
ast_debug
1
"Loading up the channel with IAXVARs\n"
varlist = ast_calloc(1, sizeof(*varlist));
varlist = ast_calloc(1, sizeof(*varlist))
varlist
varlist
ast_calloc(1, sizeof(*varlist))
ast_calloc
ast_calloc
1
sizeof(*varlist)
(*varlist)
*varlist
varlist
varlist
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
variablestore
variablestore
ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
ast_datastore_alloc
ast_datastore_alloc
&iax2_variable_datastore_info
iax2_variable_datastore_info
iax2_variable_datastore_info
NULL
NULL
if (variablestore && varlist) {			variablestore->data = varlist;			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;			AST_LIST_HEAD_INIT(varlist);			for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}			if (prev)				ast_free(prev);			i->iaxvars = NULL;			ast_channel_datastore_add(i->owner, variablestore);		} else {			if (variablestore) {				ast_datastore_free(variablestore);			}			if (varlist) {				ast_free(varlist);			}		}
variablestore && varlist
variablestore
variablestore
varlist
varlist
{			variablestore->data = varlist;			variablestore->inheritance = DATASTORE_INHERIT_FOREVER;			AST_LIST_HEAD_INIT(varlist);			for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}			if (prev)				ast_free(prev);			i->iaxvars = NULL;			ast_channel_datastore_add(i->owner, variablestore);		}
variablestore->data = varlist;
variablestore->data = varlist
variablestore->data
variablestore
variablestore
data
varlist
varlist
variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
variablestore->inheritance = DATASTORE_INHERIT_FOREVER
variablestore->inheritance
variablestore
variablestore
inheritance
DATASTORE_INHERIT_FOREVER
DATASTORE_INHERIT_FOREVER
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT
AST_LIST_HEAD_INIT
(varlist)
varlist
varlist
for (var = i->iaxvars; var; var = var->next) {				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}
var = i->iaxvars;
var = i->iaxvars
var
var
i->iaxvars
i
i
iaxvars
var
var
var = var->next
var
var
var->next
var
var
next
{				struct ast_var_t *newvar = ast_var_assign(var->name, var->value);				if (prev)					ast_free(prev);				prev = var;				if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}			}
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t
ast_var_t
*newvar = ast_var_assign(var->name, var->value)
*
newvar
= ast_var_assign(var->name, var->value)
ast_var_assign(var->name, var->value)
ast_var_assign
ast_var_assign
var->name
var
var
name
var->value
var
var
value
if (prev)					ast_free(prev);
prev
prev
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
prev = var;
prev = var
prev
prev
var
var
if (!newvar) {					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				} else {					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}
!newvar
newvar
newvar
{					/* Don't abort list traversal, as this would leave i->iaxvars in an inconsistent state. */					ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");				}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
{					AST_LIST_INSERT_TAIL(varlist, newvar, entries);				}
AST_LIST_INSERT_TAIL(varlist, newvar, entries);
AST_LIST_INSERT_TAIL(varlist, newvar, entries)
AST_LIST_INSERT_TAIL
AST_LIST_INSERT_TAIL
varlist
varlist
newvar
newvar
entries
entries
if (prev)				ast_free(prev);
prev
prev
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
i->iaxvars = NULL;
i->iaxvars = NULL
i->iaxvars
i
i
iaxvars
NULL
NULL
ast_channel_datastore_add(i->owner, variablestore);
ast_channel_datastore_add(i->owner, variablestore)
ast_channel_datastore_add
ast_channel_datastore_add
i->owner
i
i
owner
variablestore
variablestore
{			if (variablestore) {				ast_datastore_free(variablestore);			}			if (varlist) {				ast_free(varlist);			}		}
if (variablestore) {				ast_datastore_free(variablestore);			}
variablestore
variablestore
{				ast_datastore_free(variablestore);			}
ast_datastore_free(variablestore);
ast_datastore_free(variablestore)
ast_datastore_free
ast_datastore_free
variablestore
variablestore
if (varlist) {				ast_free(varlist);			}
varlist
varlist
{				ast_free(varlist);			}
ast_free(varlist);
ast_free(varlist);
ast_free
ast_free
(varlist)
varlist
varlist
if (state != AST_STATE_DOWN) {		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			i->owner = NULL;			return NULL;		}	}
state != AST_STATE_DOWN
state
state
AST_STATE_DOWN
AST_STATE_DOWN
{		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			i->owner = NULL;			return NULL;		}	}
if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			i->owner = NULL;			return NULL;		}
ast_pbx_start(tmp)
ast_pbx_start
ast_pbx_start
tmp
tmp
{			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			i->owner = NULL;			return NULL;		}
ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));
ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to start PBX on %s\n"
ast_channel_name(tmp)
ast_channel_name
ast_channel_name
tmp
tmp
ast_hangup(tmp);
ast_hangup(tmp)
ast_hangup
ast_hangup
tmp
tmp
i->owner = NULL;
i->owner = NULL
i->owner
i
i
owner
NULL
NULL
return NULL;
NULL
NULL
ast_module_ref(ast_module_info->self);
ast_module_ref(ast_module_info->self)
ast_module_ref
ast_module_ref
ast_module_info->self
ast_module_info
ast_module_info
self
return tmp;
tmp
tmp
-----joern-----
(320,250,0)
(37,4,0)
(196,228,0)
(297,183,0)
(417,300,0)
(326,131,0)
(304,492,0)
(527,66,0)
(508,131,0)
(383,240,0)
(55,329,0)
(312,543,0)
(144,183,0)
(507,138,0)
(181,191,0)
(100,56,0)
(491,527,0)
(294,120,0)
(170,326,0)
(431,384,0)
(248,411,0)
(78,321,0)
(421,283,0)
(214,211,0)
(121,505,0)
(539,468,0)
(345,131,0)
(405,222,0)
(119,64,0)
(346,326,0)
(5,183,0)
(202,433,0)
(361,357,0)
(498,287,0)
(140,311,0)
(153,449,0)
(166,116,0)
(407,260,0)
(229,44,0)
(393,278,0)
(83,116,0)
(420,339,0)
(332,287,0)
(453,488,0)
(523,427,0)
(479,120,0)
(202,151,0)
(485,323,0)
(103,523,0)
(211,413,0)
(189,339,0)
(340,349,0)
(128,131,0)
(448,131,0)
(433,509,0)
(246,131,0)
(34,422,0)
(238,357,0)
(441,498,0)
(336,66,0)
(470,258,0)
(34,131,0)
(403,544,0)
(215,66,0)
(250,300,0)
(222,527,0)
(489,377,0)
(53,66,0)
(99,406,0)
(220,118,0)
(380,49,0)
(40,525,0)
(289,392,0)
(143,66,0)
(159,462,0)
(199,392,0)
(321,270,0)
(513,527,0)
(72,287,0)
(102,215,0)
(145,166,0)
(71,521,0)
(68,122,0)
(61,84,0)
(154,505,0)
(56,508,0)
(218,480,0)
(343,277,0)
(241,355,0)
(56,85,0)
(494,375,0)
(390,66,0)
(190,131,0)
(187,527,0)
(153,332,0)
(432,155,0)
(540,28,0)
(355,56,0)
(358,131,0)
(288,300,0)
(478,381,0)
(459,427,0)
(482,55,0)
(1,369,0)
(22,383,0)
(388,302,0)
(525,257,0)
(315,406,0)
(232,208,0)
(362,367,0)
(514,345,0)
(37,131,0)
(468,539,0)
(263,277,0)
(455,30,0)
(177,299,0)
(336,131,0)
(504,232,0)
(72,253,0)
(125,30,0)
(321,193,0)
(471,386,0)
(233,162,0)
(382,394,0)
(454,300,0)
(216,171,0)
(269,244,0)
(172,392,0)
(465,131,0)
(510,541,0)
(267,131,0)
(104,32,0)
(175,5,0)
(316,462,0)
(85,56,0)
(77,287,0)
(6,80,0)
(314,521,0)
(281,77,0)
(88,411,0)
(357,131,0)
(240,492,0)
(257,525,0)
(298,502,0)
(285,156,0)
(334,343,0)
(235,342,0)
(24,144,0)
(254,507,0)
(297,15,0)
(80,19,0)
(279,546,0)
(236,178,0)
(464,66,0)
(258,470,0)
(307,282,0)
(176,248,0)
(150,282,0)
(200,273,0)
(391,13,0)
(414,359,0)
(510,527,0)
(321,396,0)
(201,527,0)
(475,131,0)
(302,122,0)
(69,539,0)
(345,223,0)
(194,310,0)
(521,71,0)
(193,284,0)
(305,363,0)
(116,152,0)
(119,469,0)
(240,383,0)
(310,270,0)
(225,155,0)
(541,510,0)
(59,194,0)
(26,190,0)
(321,294,0)
(276,527,0)
(283,421,0)
(65,56,0)
(412,531,0)
(93,285,0)
(231,493,0)
(44,131,0)
(110,265,0)
(255,276,0)
(56,198,0)
(521,330,0)
(131,358,0)
(56,527,0)
(460,244,0)
(356,199,0)
(275,165,0)
(49,265,0)
(472,17,0)
(118,384,0)
(473,385,0)
(90,131,0)
(539,183,0)
(120,505,0)
(253,72,0)
(547,200,0)
(135,418,0)
(15,245,0)
(15,297,0)
(222,383,0)
(437,201,0)
(524,465,0)
(436,507,0)
(60,451,0)
(321,40,0)
(468,272,0)
(169,5,0)
(410,488,0)
(422,34,0)
(538,454,0)
(545,198,0)
(331,220,0)
(18,434,0)
(233,368,0)
(282,527,0)
(268,505,0)
(246,53,0)
(438,312,0)
(190,56,0)
(114,66,0)
(440,177,0)
(67,56,0)
(501,66,0)
(522,300,0)
(216,224,0)
(427,505,0)
(445,410,0)
(161,465,0)
(75,294,0)
(192,198,0)
(348,526,0)
(410,527,0)
(177,131,0)
(424,413,0)
(272,468,0)
(252,254,0)
(511,493,0)
(159,527,0)
(98,378,0)
(350,228,0)
(517,448,0)
(46,310,0)
(146,418,0)
(115,455,0)
(252,394,0)
(56,426,0)
(45,527,0)
(303,128,0)
(201,476,0)
(412,64,0)
(174,85,0)
(513,104,0)
(70,523,0)
(377,434,0)
(227,411,0)
(17,131,0)
(187,483,0)
(511,131,0)
(425,162,0)
(512,278,0)
(379,300,0)
(19,306,0)
(351,527,0)
(423,243,0)
(396,131,0)
(358,183,0)
(197,41,0)
(457,90,0)
(508,56,0)
(319,448,0)
(458,300,0)
(113,228,0)
(344,43,0)
(515,138,0)
(5,423,0)
(502,298,0)
(134,66,0)
(306,527,0)
(171,40,0)
(292,7,0)
(228,394,0)
(302,388,0)
(20,151,0)
(212,190,0)
(481,311,0)
(148,159,0)
(544,342,0)
(126,191,0)
(203,326,0)
(60,527,0)
(10,7,0)
(263,527,0)
(41,7,0)
(178,36,0)
(531,527,0)
(49,131,0)
(30,125,0)
(535,87,0)
(321,480,0)
(507,254,0)
(197,16,0)
(270,424,0)
(58,357,0)
(384,118,0)
(365,381,0)
(339,125,0)
(17,56,0)
(531,412,0)
(223,345,0)
(218,526,0)
(110,491,0)
(396,449,0)
(259,366,0)
(469,43,0)
(89,283,0)
(228,138,0)
(171,216,0)
(378,354,0)
(237,122,0)
(423,5,0)
(321,250,0)
(178,66,0)
(287,300,0)
(200,250,0)
(184,313,0)
(12,44,0)
(273,107,0)
(264,483,0)
(207,131,0)
(232,504,0)
(381,257,0)
(321,110,0)
(421,66,0)
(265,49,0)
(351,66,0)
(474,66,0)
(36,406,0)
(155,131,0)
(487,84,0)
(389,287,0)
(509,433,0)
(339,0,0)
(8,343,0)
(476,66,0)
(333,13,0)
(94,66,0)
(321,197,0)
(533,66,0)
(377,489,0)
(546,56,0)
(56,387,0)
(450,539,0)
(33,321,0)
(470,208,0)
(526,217,0)
(374,396,0)
(534,240,0)
(56,546,0)
(488,131,0)
(527,56,0)
(209,218,0)
(341,236,0)
(233,66,0)
(370,263,0)
(242,305,0)
(160,66,0)
(368,233,0)
(202,299,0)
(79,125,0)
(321,431,0)
(519,438,0)
(503,131,0)
(318,121,0)
(367,300,0)
(52,64,0)
(239,4,0)
(347,202,0)
(228,544,0)
(449,66,0)
(23,66,0)
(287,72,0)
(107,273,0)
(101,424,0)
(9,513,0)
(484,66,0)
(418,473,0)
(270,310,0)
(130,253,0)
(438,131,0)
(496,334,0)
(276,66,0)
(243,66,0)
(117,151,0)
(448,101,0)
(385,473,0)
(194,59,0)
(383,222,0)
(321,523,0)
(397,138,0)
(476,62,0)
(147,508,0)
(29,359,0)
(106,544,0)
(332,505,0)
(252,544,0)
(248,176,0)
(123,343,0)
(395,270,0)
(428,297,0)
(78,378,0)
(224,527,0)
(415,480,0)
(203,344,0)
(271,509,0)
(149,223,0)
(357,238,0)
(463,498,0)
(327,351,0)
(162,233,0)
(76,246,0)
(198,131,0)
(207,311,0)
(273,200,0)
(191,276,0)
(497,531,0)
(230,60,0)
(439,144,0)
(7,10,0)
(2,107,0)
(245,15,0)
(401,454,0)
(476,201,0)
(111,215,0)
(536,285,0)
(290,349,0)
(64,119,0)
(118,220,0)
(410,66,0)
(48,268,0)
(179,368,0)
(16,66,0)
(480,211,0)
(434,377,0)
(158,511,0)
(296,71,0)
(398,177,0)
(188,117,0)
(193,330,0)
(101,448,0)
(411,131,0)
(153,131,0)
(217,527,0)
(286,455,0)
(251,431,0)
(328,102,0)
(144,127,0)
(151,117,0)
(486,138,0)
(41,197,0)
(451,131,0)
(38,153,0)
(394,465,0)
(306,19,0)
(85,131,0)
(530,228,0)
(219,396,0)
(392,199,0)
(56,190,0)
(343,334,0)
(167,194,0)
(205,436,0)
(234,503,0)
(525,400,0)
(523,131,0)
(456,403,0)
(157,66,0)
(82,207,0)
(137,118,0)
(238,39,0)
(206,502,0)
(11,171,0)
(321,119,0)
(217,526,0)
(518,345,0)
(399,56,0)
(111,527,0)
(462,500,0)
(226,449,0)
(53,152,0)
(433,202,0)
(7,41,0)
(239,32,0)
(4,37,0)
(249,508,0)
(254,403,0)
(404,85,0)
(422,464,0)
(32,239,0)
(13,131,0)
(298,236,0)
(54,412,0)
(55,287,0)
(311,183,0)
(326,203,0)
(266,144,0)
(338,367,0)
(213,375,0)
(182,306,0)
(31,470,0)
(199,527,0)
(324,49,0)
(443,216,0)
(136,359,0)
(312,438,0)
(40,171,0)
(309,460,0)
(73,17,0)
(141,298,0)
(260,421,0)
(165,261,0)
(86,104,0)
(409,32,0)
(132,541,0)
(284,66,0)
(509,299,0)
(446,503,0)
(117,299,0)
(435,66,0)
(42,355,0)
(180,252,0)
(480,218,0)
(317,197,0)
(166,527,0)
(116,166,0)
(295,110,0)
(418,131,0)
(339,527,0)
(293,66,0)
(129,153,0)
(3,66,0)
(416,66,0)
(27,128,0)
(28,131,0)
(342,544,0)
(109,366,0)
(330,521,0)
(301,239,0)
(90,284,0)
(133,246,0)
(19,80,0)
(509,151,0)
(131,267,0)
(14,111,0)
(265,66,0)
(342,394,0)
(186,37,0)
(250,200,0)
(274,434,0)
(185,53,0)
(215,111,0)
(21,45,0)
(483,187,0)
(473,418,0)
(310,194,0)
(142,252,0)
(198,56,0)
(366,87,0)
(311,207,0)
(57,491,0)
(335,30,0)
(334,527,0)
(529,195,0)
(25,299,0)
(39,238,0)
(64,412,0)
(32,104,0)
(56,13,0)
(406,36,0)
(78,351,0)
(411,248,0)
(196,367,0)
(492,240,0)
(321,239,0)
(13,56,0)
(355,131,0)
(10,527,0)
(247,505,0)
(299,177,0)
(372,330,0)
(406,131,0)
(173,530,0)
(163,117,0)
(95,28,0)
(381,131,0)
(330,193,0)
(59,527,0)
(530,367,0)
(51,364,0)
(236,298,0)
(294,287,0)
(492,344,0)
(455,183,0)
(359,29,0)
(424,101,0)
(224,216,0)
(433,527,0)
(491,110,0)
(210,527,0)
(403,254,0)
(220,527,0)
(243,423,0)
(337,509,0)
(4,66,0)
(276,191,0)
(465,394,0)
(532,438,0)
(262,77,0)
(155,16,0)
(510,66,0)
(449,527,0)
(323,527,0)
(384,431,0)
(278,507,0)
(56,17,0)
(332,153,0)
(62,476,0)
(19,66,0)
(308,511,0)
(483,131,0)
(162,527,0)
(429,66,0)
(462,159,0)
(375,504,0)
(29,66,0)
(35,469,0)
(488,410,0)
(537,66,0)
(403,394,0)
(47,336,0)
(30,455,0)
(36,178,0)
(322,196,0)
(78,195,0)
(245,208,0)
(104,513,0)
(430,258,0)
(195,127,0)
(50,483,0)
(375,183,0)
(434,131,0)
(464,527,0)
(344,203,0)
(71,527,0)
(542,297,0)
(257,381,0)
(392,131,0)
(284,90,0)
(164,59,0)
(360,510,0)
(280,358,0)
(84,66,0)
(352,451,0)
(493,277,0)
(321,236,0)
(461,90,0)
(87,366,0)
(526,218,0)
(373,522,0)
(447,332,0)
(369,400,0)
(272,66,0)
(283,527,0)
(96,451,0)
(353,507,0)
(321,246,0)
(364,426,0)
(376,464,0)
(321,511,0)
(92,488,0)
(81,278,0)
(402,66,0)
(122,302,0)
(321,498,0)
(419,10,0)
(204,546,0)
(506,37,0)
(366,131,0)
(256,294,0)
(105,40,0)
(321,492,0)
(97,403,0)
(502,527,0)
(291,217,0)
(321,277,0)
(504,375,0)
(139,41,0)
(325,193,0)
(78,460,0)
(191,131,0)
(16,155,0)
(499,34,0)
(421,260,0)
(371,202,0)
(215,102,0)
(122,131,0)
(74,342,0)
(498,268,0)
(464,422,0)
(223,527,0)
(466,187,0)
(116,66,0)
(87,527,0)
(63,62,0)
(543,312,0)
(444,66,0)
(451,60,0)
(467,358,0)
(254,252,0)
(546,131,0)
(528,72,0)
(258,527,0)
(477,433,0)
(56,355,0)
(278,442,0)
(408,384,0)
(490,119,0)
(112,224,0)
(495,364,0)
(431,369,0)
(91,34,0)
(22,222,1)
(238,357,1)
(236,341,1)
(365,478,1)
(49,324,1)
(56,355,1)
(147,249,1)
(51,452,1)
(360,125,1)
(239,301,1)
(382,121,1)
(321,33,1)
(223,527,1)
(70,168,1)
(44,229,1)
(336,131,1)
(115,79,1)
(90,457,1)
(128,131,1)
(150,44,1)
(325,330,1)
(330,372,1)
(47,207,1)
(321,492,1)
(457,461,1)
(403,394,1)
(465,131,1)
(359,136,1)
(196,367,1)
(547,320,1)
(216,224,1)
(450,69,1)
(443,224,1)
(60,527,1)
(517,319,1)
(59,164,1)
(358,467,1)
(191,131,1)
(31,245,1)
(384,408,1)
(111,14,1)
(396,131,1)
(281,262,1)
(60,451,1)
(326,346,1)
(116,83,1)
(70,530,1)
(394,465,1)
(81,512,1)
(534,383,1)
(489,377,1)
(42,241,1)
(496,8,1)
(10,527,1)
(232,504,1)
(530,228,1)
(428,542,1)
(34,91,1)
(321,498,1)
(63,201,1)
(299,177,1)
(45,527,1)
(421,283,1)
(364,495,1)
(148,305,1)
(101,448,1)
(301,32,1)
(406,315,1)
(213,470,1)
(433,509,1)
(351,327,1)
(274,18,1)
(348,217,1)
(9,424,1)
(321,270,1)
(173,168,1)
(373,367,1)
(477,124,1)
(367,338,1)
(59,527,1)
(509,337,1)
(2,547,1)
(476,201,1)
(56,426,1)
(321,480,1)
(171,216,1)
(106,278,1)
(14,421,1)
(273,107,1)
(437,215,1)
(521,71,1)
(497,176,1)
(342,544,1)
(377,434,1)
(91,499,1)
(6,306,1)
(38,129,1)
(242,53,1)
(103,70,1)
(375,183,1)
(434,131,1)
(488,92,1)
(252,394,1)
(198,192,1)
(221,507,1)
(202,347,1)
(19,80,1)
(163,20,1)
(124,151,1)
(117,299,1)
(321,119,1)
(207,311,1)
(546,131,1)
(452,55,1)
(46,194,1)
(475,84,1)
(133,449,1)
(523,103,1)
(84,487,1)
(145,510,1)
(104,513,1)
(270,310,1)
(498,463,1)
(541,132,1)
(526,348,1)
(264,50,1)
(257,381,1)
(297,183,1)
(491,57,1)
(87,366,1)
(104,86,1)
(206,525,1)
(438,532,1)
(375,494,1)
(403,544,1)
(308,158,1)
(297,428,1)
(119,64,1)
(118,137,1)
(263,370,1)
(159,527,1)
(98,45,1)
(13,333,1)
(62,63,1)
(470,258,1)
(169,175,1)
(161,382,1)
(360,339,1)
(372,521,1)
(182,233,1)
(296,16,1)
(449,527,1)
(188,163,1)
(69,267,1)
(64,412,1)
(358,183,1)
(212,26,1)
(73,65,1)
(303,27,1)
(418,146,1)
(253,130,1)
(364,426,1)
(332,447,1)
(78,378,1)
(87,527,1)
(54,531,1)
(463,441,1)
(326,131,1)
(16,155,1)
(194,59,1)
(187,483,1)
(495,51,1)
(412,54,1)
(321,431,1)
(357,58,1)
(21,336,1)
(110,491,1)
(78,351,1)
(20,433,1)
(193,330,1)
(34,131,1)
(27,124,1)
(545,546,1)
(55,287,1)
(380,110,1)
(276,191,1)
(177,440,1)
(433,202,1)
(249,17,1)
(179,162,1)
(190,131,1)
(504,375,1)
(546,279,1)
(56,198,1)
(158,263,1)
(205,228,1)
(318,268,1)
(32,104,1)
(206,344,1)
(258,527,1)
(524,161,1)
(381,365,1)
(462,159,1)
(26,85,1)
(199,392,1)
(455,183,1)
(44,131,1)
(291,489,1)
(381,131,1)
(177,131,1)
(543,312,1)
(113,196,1)
(503,131,1)
(256,75,1)
(311,481,1)
(40,105,1)
(33,493,1)
(483,131,1)
(418,131,1)
(258,430,1)
(480,415,1)
(1,431,1)
(15,297,1)
(321,523,1)
(514,518,1)
(250,200,1)
(25,28,1)
(97,353,1)
(482,520,1)
(389,250,1)
(178,36,1)
(113,221,1)
(116,166,1)
(181,126,1)
(206,543,1)
(334,496,1)
(324,380,1)
(233,368,1)
(352,96,1)
(310,194,1)
(120,479,1)
(345,514,1)
(270,395,1)
(479,294,1)
(453,445,1)
(174,404,1)
(88,60,1)
(248,411,1)
(356,503,1)
(102,328,1)
(56,546,1)
(298,502,1)
(332,153,1)
(333,391,1)
(344,203,1)
(219,282,1)
(282,527,1)
(398,25,1)
(439,267,1)
(210,272,1)
(492,304,1)
(465,524,1)
(144,266,1)
(498,287,1)
(128,303,1)
(415,218,1)
(224,112,1)
(129,427,1)
(392,131,1)
(19,306,1)
(149,44,1)
(233,162,1)
(53,152,1)
(75,77,1)
(540,95,1)
(218,209,1)
(530,367,1)
(67,100,1)
(483,264,1)
(432,225,1)
(283,89,1)
(146,135,1)
(126,255,1)
(311,183,1)
(464,422,1)
(176,248,1)
(202,299,1)
(196,322,1)
(366,131,1)
(28,131,1)
(137,220,1)
(37,186,1)
(276,527,1)
(48,498,1)
(423,5,1)
(307,150,1)
(93,436,1)
(436,205,1)
(223,345,1)
(499,376,1)
(331,543,1)
(130,389,1)
(421,260,1)
(41,7,1)
(254,403,1)
(321,250,1)
(217,527,1)
(52,412,1)
(227,88,1)
(40,171,1)
(57,284,1)
(13,131,1)
(168,108,1)
(255,199,1)
(412,531,1)
(317,41,1)
(5,169,1)
(528,253,1)
(525,257,1)
(366,109,1)
(491,527,1)
(542,516,1)
(306,182,1)
(414,364,1)
(422,34,1)
(229,12,1)
(11,216,1)
(383,22,1)
(207,131,1)
(32,409,1)
(246,131,1)
(203,326,1)
(135,87,1)
(78,460,1)
(502,206,1)
(462,316,1)
(321,246,1)
(464,527,1)
(140,82,1)
(144,183,1)
(449,226,1)
(239,32,1)
(407,283,1)
(92,453,1)
(166,145,1)
(72,253,1)
(338,362,1)
(332,287,1)
(459,523,1)
(321,236,1)
(196,228,1)
(153,38,1)
(228,544,1)
(218,526,1)
(362,128,1)
(80,6,1)
(286,115,1)
(246,76,1)
(305,242,1)
(82,243,1)
(306,527,1)
(376,19,1)
(88,388,1)
(399,355,1)
(511,308,1)
(230,388,1)
(312,438,1)
(511,131,1)
(72,528,1)
(162,425,1)
(411,131,1)
(235,106,1)
(202,151,1)
(371,509,1)
(508,131,1)
(436,507,1)
(95,462,1)
(476,62,1)
(198,131,1)
(35,119,1)
(282,307,1)
(410,488,1)
(294,256,1)
(385,473,1)
(55,482,1)
(119,490,1)
(447,153,1)
(431,384,1)
(350,113,1)
(64,52,1)
(509,299,1)
(86,513,1)
(252,180,1)
(468,539,1)
(487,61,1)
(403,456,1)
(513,9,1)
(255,503,1)
(530,173,1)
(117,188,1)
(112,369,1)
(343,334,1)
(76,133,1)
(106,285,1)
(193,325,1)
(271,477,1)
(153,131,1)
(195,529,1)
(214,480,1)
(237,464,1)
(99,236,1)
(321,294,1)
(71,527,1)
(351,527,1)
(414,323,1)
(123,323,1)
(374,219,1)
(427,459,1)
(518,149,1)
(395,310,1)
(199,527,1)
(378,98,1)
(79,45,1)
(240,383,1)
(197,41,1)
(278,393,1)
(49,131,1)
(155,131,1)
(448,131,1)
(355,42,1)
(50,466,1)
(510,527,1)
(321,110,1)
(142,403,1)
(56,387,1)
(231,511,1)
(209,526,1)
(65,13,1)
(56,17,1)
(30,455,1)
(58,361,1)
(346,170,1)
(110,295,1)
(17,472,1)
(228,350,1)
(405,469,1)
(236,298,1)
(538,401,1)
(108,394,1)
(155,432,1)
(305,363,1)
(320,454,1)
(111,527,1)
(347,371,1)
(153,449,1)
(56,508,1)
(74,235,1)
(521,314,1)
(434,274,1)
(339,189,1)
(222,405,1)
(424,101,1)
(433,527,1)
(384,118,1)
(408,118,1)
(278,507,1)
(4,37,1)
(166,527,1)
(485,364,1)
(516,207,1)
(165,275,1)
(53,185,1)
(56,13,1)
(27,28,1)
(226,396,1)
(194,167,1)
(535,39,1)
(342,74,1)
(5,183,1)
(263,527,1)
(393,81,1)
(294,287,1)
(337,271,1)
(339,125,1)
(473,418,1)
(522,373,1)
(220,331,1)
(77,281,1)
(185,246,1)
(117,151,1)
(469,35,1)
(321,239,1)
(509,151,1)
(18,178,1)
(151,117,1)
(201,527,1)
(124,299,1)
(419,4,1)
(204,67,1)
(327,29,1)
(492,240,1)
(122,68,1)
(401,522,1)
(254,252,1)
(478,40,1)
(272,468,1)
(267,131,1)
(96,230,1)
(323,485,1)
(83,166,1)
(85,131,1)
(285,536,1)
(335,455,1)
(454,538,1)
(217,291,1)
(167,59,1)
(30,335,1)
(109,259,1)
(506,239,1)
(268,48,1)
(448,517,1)
(410,527,1)
(243,423,1)
(339,527,1)
(105,171,1)
(71,296,1)
(467,280,1)
(85,174,1)
(162,527,1)
(197,317,1)
(488,131,1)
(77,262,1)
(190,212,1)
(234,385,1)
(302,122,1)
(409,104,1)
(472,73,1)
(392,172,1)
(292,10,1)
(51,332,1)
(298,141,1)
(90,131,1)
(275,452,1)
(321,511,1)
(316,159,1)
(259,535,1)
(122,131,1)
(136,414,1)
(456,97,1)
(361,265,1)
(507,254,1)
(245,15,1)
(510,541,1)
(508,147,1)
(391,399,1)
(211,214,1)
(368,179,1)
(78,321,1)
(95,305,1)
(441,120,1)
(404,198,1)
(180,142,1)
(125,30,1)
(215,102,1)
(406,131,1)
(315,99,1)
(51,128,1)
(304,240,1)
(78,195,1)
(170,492,1)
(187,527,1)
(309,516,1)
(355,131,1)
(224,527,1)
(430,31,1)
(262,287,1)
(8,123,1)
(251,384,1)
(451,131,1)
(175,527,1)
(36,406,1)
(252,544,1)
(520,77,1)
(171,11,1)
(440,398,1)
(100,210,1)
(334,527,1)
(455,286,1)
(425,476,1)
(284,90,1)
(445,276,1)
(353,108,1)
(512,436,1)
(539,450,1)
(141,502,1)
(420,125,1)
(280,475,1)
(295,491,1)
(201,437,1)
(216,443,1)
(531,527,1)
(51,165,1)
(513,527,1)
(460,309,1)
(319,270,1)
(45,21,1)
(219,223,1)
(260,407,1)
(531,497,1)
(41,139,1)
(369,1,1)
(121,318,1)
(191,181,1)
(56,190,1)
(56,85,1)
(135,39,1)
(89,116,1)
(234,187,1)
(7,292,1)
(9,489,1)
(341,298,1)
(451,352,1)
(411,227,1)
(107,2,1)
(215,111,1)
(321,396,1)
(172,289,1)
(28,540,1)
(186,506,1)
(29,359,1)
(330,521,1)
(481,140,1)
(7,10,1)
(225,197,1)
(17,131,1)
(228,394,1)
(132,360,1)
(388,302,1)
(494,213,1)
(519,176,1)
(116,152,1)
(544,342,1)
(68,237,1)
(266,24,1)
(265,49,1)
(283,527,1)
(342,394,1)
(523,131,1)
(192,545,1)
(336,47,1)
(383,222,1)
(536,93,1)
(10,419,1)
(139,7,1)
(39,238,1)
(321,40,1)
(323,527,1)
(309,232,1)
(527,56,1)
(322,221,1)
(321,193,1)
(502,527,1)
(503,446,1)
(539,183,1)
(222,527,1)
(446,234,1)
(37,131,1)
(396,374,1)
(493,231,1)
(287,72,1)
(466,385,1)
(12,410,1)
(526,217,1)
(328,111,1)
(370,343,1)
(431,251,1)
(220,527,1)
(159,148,1)
(314,71,1)
(345,131,1)
(108,544,1)
(240,534,1)
(461,193,1)
(490,64,1)
(357,131,1)
(200,273,1)
(532,519,1)
(189,420,1)
(321,197,1)
(452,520,1)
(480,218,1)
(118,220,1)
(279,204,1)
(310,46,1)
(529,144,1)
(164,211,1)
(77,287,1)
(131,358,1)
(438,131,1)
(289,356,1)
(241,190,1)
(24,439,1)
(485,364,2)
(465,131,2)
(118,220,2)
(162,45,2)
(285,436,2)
(87,527,2)
(410,527,2)
(447,77,2)
(323,364,2)
(332,153,2)
(203,176,2)
(310,194,2)
(68,45,2)
(31,516,2)
(361,45,2)
(89,45,2)
(304,176,2)
(155,45,2)
(420,125,2)
(75,77,2)
(307,44,2)
(422,34,2)
(446,45,2)
(523,77,2)
(338,128,2)
(234,45,2)
(357,45,2)
(111,45,2)
(238,45,2)
(321,40,2)
(376,45,2)
(169,267,2)
(117,299,2)
(330,45,2)
(496,323,2)
(65,267,2)
(510,45,2)
(90,45,2)
(203,326,2)
(295,45,2)
(128,45,2)
(388,45,2)
(480,489,2)
(115,45,2)
(136,323,2)
(256,77,2)
(507,254,2)
(71,527,2)
(140,267,2)
(250,200,2)
(131,358,2)
(221,108,2)
(302,45,2)
(546,267,2)
(321,250,2)
(383,176,2)
(409,45,2)
(411,45,2)
(13,267,2)
(527,267,2)
(396,131,2)
(321,236,2)
(301,45,2)
(201,527,2)
(196,221,2)
(182,45,2)
(468,539,2)
(64,412,2)
(148,305,2)
(144,267,2)
(220,543,2)
(321,239,2)
(434,131,2)
(211,489,2)
(32,104,2)
(445,45,2)
(45,527,2)
(77,287,2)
(232,516,2)
(213,516,2)
(76,45,2)
(332,287,2)
(491,45,2)
(342,544,2)
(78,378,2)
(411,131,2)
(414,323,2)
(258,527,2)
(105,543,2)
(415,489,2)
(229,45,2)
(495,45,2)
(29,323,2)
(511,131,2)
(18,45,2)
(302,122,2)
(273,128,2)
(433,527,2)
(321,119,2)
(233,45,2)
(388,302,2)
(215,111,2)
(473,45,2)
(541,45,2)
(257,543,2)
(375,516,2)
(436,507,2)
(503,131,2)
(287,128,2)
(494,516,2)
(369,543,2)
(448,489,2)
(265,49,2)
(316,305,2)
(7,45,2)
(248,411,2)
(339,527,2)
(119,64,2)
(368,45,2)
(321,523,2)
(56,267,2)
(504,516,2)
(53,152,2)
(489,377,2)
(71,45,2)
(321,492,2)
(35,176,2)
(377,45,2)
(437,45,2)
(319,489,2)
(498,287,2)
(109,39,2)
(431,543,2)
(146,45,2)
(286,45,2)
(343,334,2)
(438,131,2)
(39,238,2)
(16,45,2)
(218,489,2)
(120,77,2)
(433,509,2)
(531,176,2)
(49,45,2)
(251,543,2)
(479,77,2)
(166,527,2)
(199,527,2)
(2,128,2)
(56,190,2)
(19,306,2)
(171,543,2)
(481,267,2)
(296,45,2)
(15,297,2)
(254,108,2)
(326,131,2)
(385,473,2)
(497,176,2)
(314,45,2)
(303,45,2)
(37,131,2)
(431,384,2)
(462,159,2)
(56,387,2)
(41,7,2)
(392,503,2)
(488,131,2)
(430,516,2)
(116,45,2)
(470,258,2)
(323,527,2)
(526,489,2)
(351,364,2)
(399,267,2)
(70,77,2)
(19,45,2)
(275,452,2)
(357,131,2)
(121,77,2)
(101,489,2)
(364,426,2)
(540,45,2)
(38,77,2)
(270,310,2)
(117,151,2)
(173,168,2)
(126,45,2)
(56,426,2)
(188,124,2)
(530,228,2)
(457,45,2)
(204,267,2)
(273,107,2)
(321,197,2)
(63,45,2)
(240,383,2)
(9,45,2)
(235,108,2)
(294,287,2)
(455,183,2)
(128,131,2)
(130,128,2)
(473,418,2)
(242,45,2)
(278,507,2)
(72,128,2)
(297,516,2)
(199,503,2)
(231,323,2)
(263,323,2)
(466,385,2)
(122,45,2)
(74,108,2)
(36,45,2)
(309,207,2)
(499,45,2)
(81,436,2)
(310,489,2)
(424,101,2)
(508,131,2)
(345,44,2)
(232,504,2)
(539,183,2)
(375,183,2)
(116,166,2)
(178,36,2)
(55,287,2)
(477,124,2)
(155,131,2)
(525,543,2)
(432,45,2)
(177,131,2)
(483,131,2)
(305,45,2)
(165,452,2)
(517,489,2)
(56,355,2)
(239,45,2)
(178,45,2)
(374,45,2)
(177,28,2)
(197,41,2)
(44,45,2)
(276,45,2)
(328,45,2)
(151,124,2)
(543,312,2)
(509,299,2)
(337,124,2)
(454,128,2)
(476,45,2)
(248,45,2)
(56,508,2)
(271,124,2)
(389,128,2)
(21,207,2)
(414,364,2)
(164,489,2)
(26,267,2)
(107,128,2)
(202,151,2)
(79,45,2)
(96,388,2)
(202,124,2)
(456,108,2)
(321,110,2)
(170,176,2)
(19,80,2)
(321,498,2)
(205,108,2)
(262,128,2)
(163,124,2)
(98,45,2)
(544,342,2)
(220,527,2)
(4,37,2)
(279,267,2)
(406,131,2)
(543,176,2)
(103,77,2)
(78,460,2)
(7,10,2)
(347,124,2)
(253,128,2)
(93,436,2)
(355,131,2)
(32,45,2)
(245,516,2)
(371,124,2)
(150,44,2)
(174,267,2)
(520,77,2)
(227,45,2)
(401,128,2)
(480,218,2)
(452,77,2)
(202,299,2)
(5,267,2)
(151,117,2)
(478,543,2)
(135,45,2)
(24,267,2)
(476,62,2)
(306,527,2)
(266,267,2)
(153,77,2)
(167,489,2)
(82,267,2)
(433,202,2)
(342,108,2)
(492,240,2)
(291,489,2)
(187,527,2)
(42,267,2)
(102,45,2)
(41,45,2)
(210,267,2)
(196,228,2)
(54,176,2)
(216,224,2)
(153,131,2)
(72,253,2)
(544,108,2)
(513,527,2)
(233,368,2)
(513,45,2)
(265,45,2)
(87,39,2)
(284,45,2)
(129,77,2)
(255,45,2)
(8,323,2)
(59,527,2)
(451,131,2)
(521,71,2)
(464,527,2)
(283,45,2)
(535,39,2)
(492,176,2)
(336,131,2)
(132,45,2)
(55,520,2)
(83,45,2)
(327,323,2)
(428,516,2)
(334,527,2)
(483,385,2)
(509,151,2)
(260,45,2)
(384,543,2)
(498,77,2)
(509,124,2)
(56,546,2)
(258,516,2)
(27,45,2)
(192,267,2)
(209,489,2)
(108,77,2)
(482,520,2)
(396,45,2)
(33,323,2)
(133,45,2)
(511,323,2)
(119,176,2)
(538,128,2)
(223,345,2)
(362,128,2)
(393,436,2)
(52,176,2)
(206,45,2)
(161,77,2)
(356,503,2)
(144,183,2)
(532,176,2)
(345,131,2)
(312,176,2)
(451,388,2)
(46,489,2)
(449,45,2)
(322,221,2)
(14,45,2)
(489,45,2)
(56,13,2)
(1,543,2)
(358,183,2)
(284,90,2)
(321,431,2)
(470,516,2)
(236,45,2)
(324,45,2)
(13,131,2)
(92,45,2)
(392,131,2)
(51,45,2)
(490,176,2)
(40,543,2)
(139,45,2)
(207,131,2)
(20,124,2)
(198,131,2)
(222,176,2)
(233,162,2)
(418,131,2)
(172,503,2)
(298,502,2)
(547,128,2)
(450,267,2)
(100,267,2)
(237,45,2)
(472,267,2)
(519,176,2)
(381,131,2)
(73,267,2)
(77,128,2)
(99,45,2)
(125,30,2)
(333,267,2)
(439,267,2)
(207,311,2)
(524,77,2)
(434,45,2)
(198,267,2)
(405,176,2)
(228,108,2)
(331,543,2)
(508,267,2)
(364,45,2)
(276,527,2)
(53,45,2)
(510,541,2)
(217,489,2)
(243,267,2)
(29,364,2)
(465,77,2)
(212,267,2)
(252,394,2)
(58,45,2)
(191,45,2)
(421,283,2)
(299,28,2)
(321,396,2)
(196,367,2)
(267,131,2)
(335,45,2)
(346,176,2)
(425,45,2)
(171,216,2)
(60,451,2)
(424,489,2)
(197,45,2)
(246,131,2)
(512,436,2)
(282,44,2)
(418,45,2)
(239,32,2)
(12,45,2)
(111,527,2)
(176,248,2)
(91,45,2)
(410,488,2)
(243,423,2)
(441,77,2)
(190,267,2)
(384,118,2)
(440,28,2)
(252,544,2)
(191,131,2)
(136,364,2)
(85,267,2)
(30,455,2)
(462,305,2)
(332,77,2)
(110,45,2)
(223,527,2)
(395,489,2)
(377,434,2)
(112,543,2)
(438,176,2)
(252,108,2)
(153,449,2)
(274,45,2)
(11,543,2)
(101,448,2)
(34,131,2)
(403,544,2)
(122,131,2)
(355,267,2)
(427,77,2)
(344,176,2)
(404,267,2)
(87,366,2)
(523,131,2)
(461,45,2)
(199,392,2)
(50,385,2)
(30,45,2)
(321,246,2)
(88,45,2)
(85,131,2)
(373,128,2)
(217,527,2)
(230,388,2)
(110,491,2)
(305,363,2)
(317,45,2)
(503,45,2)
(78,195,2)
(514,44,2)
(536,436,2)
(321,480,2)
(142,108,2)
(464,45,2)
(108,108,2)
(299,177,2)
(78,351,2)
(306,45,2)
(179,45,2)
(321,511,2)
(254,403,2)
(123,323,2)
(518,44,2)
(264,385,2)
(149,44,2)
(254,252,2)
(359,364,2)
(272,468,2)
(245,15,2)
(90,131,2)
(28,131,2)
(263,527,2)
(187,483,2)
(412,176,2)
(283,527,2)
(366,39,2)
(257,381,2)
(469,176,2)
(360,45,2)
(443,543,2)
(175,267,2)
(225,45,2)
(194,59,2)
(294,77,2)
(292,45,2)
(5,183,2)
(222,527,2)
(372,45,2)
(10,45,2)
(95,45,2)
(236,298,2)
(36,406,2)
(320,128,2)
(29,359,2)
(382,77,2)
(297,183,2)
(159,305,2)
(10,527,2)
(522,128,2)
(436,108,2)
(289,503,2)
(321,323,2)
(433,124,2)
(318,77,2)
(298,45,2)
(137,543,2)
(344,203,2)
(367,128,2)
(326,176,2)
(348,489,2)
(385,45,2)
(168,77,2)
(325,45,2)
(534,176,2)
(383,222,2)
(459,77,2)
(455,45,2)
(403,394,2)
(117,124,2)
(421,45,2)
(215,45,2)
(16,155,2)
(502,45,2)
(28,45,2)
(113,108,2)
(56,17,2)
(449,527,2)
(403,108,2)
(56,85,2)
(47,207,2)
(504,375,2)
(219,45,2)
(308,323,2)
(193,330,2)
(249,267,2)
(406,45,2)
(311,183,2)
(25,28,2)
(350,108,2)
(238,357,2)
(502,527,2)
(407,45,2)
(141,45,2)
(281,262,2)
(6,45,2)
(539,267,2)
(187,385,2)
(78,321,2)
(40,171,2)
(86,45,2)
(224,543,2)
(226,45,2)
(394,77,2)
(22,176,2)
(207,267,2)
(530,168,2)
(193,45,2)
(118,543,2)
(228,544,2)
(17,131,2)
(181,45,2)
(410,45,2)
(423,5,2)
(423,267,2)
(507,108,2)
(17,267,2)
(327,364,2)
(491,527,2)
(412,531,2)
(398,28,2)
(166,45,2)
(268,77,2)
(272,267,2)
(463,77,2)
(215,102,2)
(64,176,2)
(200,128,2)
(341,45,2)
(201,45,2)
(546,131,2)
(321,294,2)
(45,207,2)
(246,45,2)
(521,45,2)
(394,465,2)
(216,543,2)
(528,128,2)
(194,489,2)
(56,198,2)
(59,489,2)
(525,257,2)
(250,128,2)
(189,125,2)
(542,516,2)
(531,527,2)
(276,191,2)
(506,45,2)
(315,45,2)
(408,543,2)
(334,323,2)
(62,45,2)
(180,108,2)
(419,45,2)
(351,323,2)
(343,323,2)
(422,45,2)
(381,543,2)
(4,45,2)
(493,323,2)
(147,267,2)
(214,489,2)
(97,108,2)
(240,176,2)
(330,521,2)
(145,45,2)
(378,45,2)
(352,388,2)
(460,207,2)
(287,72,2)
(476,201,2)
(224,527,2)
(468,267,2)
(37,45,2)
(104,45,2)
(57,45,2)
(312,438,2)
(453,45,2)
(106,108,2)
(342,394,2)
(311,267,2)
(195,267,2)
(339,125,2)
(116,152,2)
(545,267,2)
(223,44,2)
(176,45,2)
(516,207,2)
(190,131,2)
(60,527,2)
(185,45,2)
(104,513,2)
(49,131,2)
(39,45,2)
(15,516,2)
(44,131,2)
(159,527,2)
(527,56,2)
(270,489,2)
(391,267,2)
(67,267,2)
(282,527,2)
(359,323,2)
(34,45,2)
(124,28,2)
(186,45,2)
(124,124,2)
(380,45,2)
(370,323,2)
(366,131,2)
(158,323,2)
(278,436,2)
(241,267,2)
(200,273,2)
(336,207,2)
(125,45,2)
(69,267,2)
(162,527,2)
(80,45,2)
(60,388,2)
(421,260,2)
(321,270,2)
(530,367,2)
(510,527,2)
(218,526,2)
(526,217,2)
(353,108,2)
(228,394,2)
(351,527,2)
(448,131,2)
(488,45,2)
(259,39,2)
(365,543,2)
(464,422,2)
(529,267,2)
(48,77,2)
(321,193,2)
-----------------------------------
(0,)
(1,1)
(2,varlist)
(3,if (!tmp)
(4,ast_channel_caller(tmp)
(5,iaxsl[callno])
(6,tmpfmt)
(7,ast_channel_caller(tmp)
(8,"Unable to start PBX on %s\\n")
(9,tmp)
(10,ast_channel_caller(tmp)
(11,number)
(12,i)
(13,i->amaflags)
(14,tmp)
(15,&iaxsl[callno])
(16,ast_channel_caller(tmp)
(17,i->host)
(18,i)
(19,ast_format_copy(ast_channel_rawwriteformat(tmp)
(20,v)
(21,tmp)
(22,ani)
(23,if (i->vars)
(24,"No IAX2 pvt found for callno \'%d\' !\\n")
(25,v)
(26,i)
(27,i)
(28,i->vars)
(29,ast_module_ref(ast_module_info->self)
(30,iaxs[callno]->callid)
(31,tmp)
(32,ast_channel_caller(tmp)
(33,NULL)
(34,i->callno)
(35,1)
(36,ast_strdup(i->dnid)
(37,i->calling_pres)
(38,owner)
(39,!ast_strlen_zero(i->language)
(40,ast_channel_caller(tmp)
(41,ast_channel_caller(tmp)
(42,context)
(43,)
(44,i->adsi)
(45,!tmp)
(46,number)
(47,i)
(48,DATASTORE_INHERIT_FOREVER)
(49,i->calling_tns)
(50,i)
(51,state)
(52,number)
(53,i->capability = capability)
(54,ani)
(55,ast_datastore_free(variablestore)
(56,ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno)
(57,tmp)
(58,language)
(59,ast_channel_redirecting(tmp)
(60,ast_channel_parkinglot_set(tmp, i->parkinglot)
(61,v)
(62,&tmpfmt)
(63,tmpfmt)
(64,ast_channel_caller(tmp)
(65,"IAX2/%s-%d")
(66,)
(67,state)
(68,parkinglot)
(69,iaxsl)
(70,i)
(71,ast_channel_caller(tmp)
(72,ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(73,i)
(74,next)
(75,variablestore)
(76,capability)
(77,variablestore && varlist)
(78,RET)
(79,callid)
(80,&tmpfmt)
(81,newvar)
(82,i)
(83,capability)
(84,*v = NULL)
(85,i->accountcode)
(86,id)
(87,ast_channel_language_set(tmp, i->language)
(88,i)
(89,tmp)
(90,i->calling_ton)
(91,callno)
(92,exten)
(93,LOG_ERROR)
(94,if (!(i = iaxs[callno])
(95,i)
(96,i)
(97,var)
(98,NULL)
(99,i)
(100,1)
(101,ast_strdup(i->rdnis)
(102,&tmpfmt)
(103,iaxvars)
(104,ast_channel_caller(tmp)
(105,str)
(106,var)
(107,*varlist)
(108,var)
(109,language)
(110,ast_channel_dialed(tmp)
(111,ast_channel_readformat(tmp)
(112,tmp)
(113,prev)
(114,if (state != AST_STATE_DOWN)
(115,iaxs)
(116,ast_format_cap_from_old_bitfield(ast_channel_nativeformats(tmp)
(117,v->next)
(118,ast_channel_caller(tmp)
(119,ast_channel_caller(tmp)
(120,variablestore->data = varlist)
(121,AST_LIST_HEAD_INIT(varlist)
(122,i->parkinglot)
(123,LOG_WARNING)
(124,v)
(125,callid = iaxs[callno]->callid)
(126,i)
(127,)
(128,i->iaxvars)
(129,i)
(130,iax2_variable_datastore_info)
(131,i = iaxs[callno])
(132,iax2_tech)
(133,i)
(134,v)
(135,i)
(136,self)
(137,ani)
(138,)
(139,number)
(140,iaxs)
(141,number)
(142,var)
(143,if (i->amaflags)
(144,ast_log(LOG_WARNING, "No IAX2 pvt found for callno \'%d\' !\\n", callno)
(145,tmp)
(146,accountcode)
(147,callno)
(148,tmp)
(149,tmp)
(150,tmp)
(151,v = v->next)
(152,iax2_format capability)
(153,i->owner)
(154,for (var = i->iaxvars; var; var = var->next)
(155,i->calling_pres)
(156,)
(157,if (!ast_strlen_zero(i->rdnis)
(158,i)
(159,ast_channel_flags(tmp)
(160,if (!cachable)
(161,i)
(162,ast_channel_writeformat(tmp)
(163,v)
(164,tmp)
(165,ast_free(varlist)
(166,ast_channel_nativeformats(tmp)
(167,from)
(168,prev)
(169,callno)
(170,i)
(171,ast_channel_caller(tmp)
(172,amaflags)
(173,prev)
(174,accountcode)
(175,iaxsl)
(176,!ast_strlen_zero(i->ani)
(177,i->vars)
(178,ast_channel_dialed(tmp)
(179,tmpfmt)
(180,value)
(181,context)
(182,tmp)
(183,int callno)
(184,for (v = i->vars ; v ; v = v->next)
(185,capability)
(186,calling_pres)
(187,ast_channel_accountcode_set(tmp, i->accountcode)
(188,next)
(189,callid)
(190,i->exten)
(191,i->context)
(192,cid_name)
(193,ast_channel_caller(tmp)
(194,ast_channel_redirecting(tmp)
(195,return NULL;)
(196,ast_free(prev)
(197,ast_channel_caller(tmp)
(198,i->cid_name)
(199,ast_channel_amaflags_set(tmp, i->amaflags)
(200,ast_calloc(1, sizeof(*varlist)
(201,ast_channel_rawreadformat(tmp)
(202,v->value)
(203,ast_strdup(i->ani)
(204,i)
(205,newvar)
(206,tmp)
(207,i != iaxs[callno])
(208,)
(209,number)
(210,tmp)
(211,ast_channel_redirecting(tmp)
(212,exten)
(213,iaxsl)
(214,1)
(215,ast_format_copy(ast_channel_readformat(tmp)
(216,ast_channel_caller(tmp)
(217,ast_channel_redirecting(tmp)
(218,ast_channel_redirecting(tmp)
(219,i)
(220,ast_channel_caller(tmp)
(221,prev)
(222,ast_channel_caller(tmp)
(223,ast_channel_adsicpe_set(tmp, i->peeradsicpe)
(224,ast_channel_caller(tmp)
(225,i)
(226,tmp)
(227,ani)
(228,prev = var)
(229,adsi)
(230,tmp)
(231,NULL)
(232,ast_mutex_lock(&iaxsl[callno])
(233,ast_format_copy(ast_channel_writeformat(tmp)
(234,i)
(235,var)
(236,ast_channel_dialed(tmp)
(237,i)
(238,ast_strlen_zero(i->language)
(239,ast_channel_caller(tmp)
(240,ast_channel_caller(tmp)
(241,i)
(242,cachable)
(243,ast_mutex_lock(&iaxsl[callno])
(244,)
(245,ast_mutex_unlock(&iaxsl[callno])
(246,i->capability)
(247,if (prev)
(248,ast_strlen_zero(i->ani)
(249,i)
(250,varlist = ast_calloc(1, sizeof(*varlist)
(251,valid)
(252,var->value)
(253,&iax2_variable_datastore_info)
(254,ast_var_assign(var->name, var->value)
(255,tmp)
(256,data)
(257,ast_strdup(i->cid_num)
(258,ast_channel_release(tmp)
(259,i)
(260,&tmpfmt)
(261,)
(262,variablestore)
(263,ast_hangup(tmp)
(264,accountcode)
(265,ast_channel_dialed(tmp)
(266,callno)
(267,!(i = iaxs[callno])
(268,variablestore->inheritance = DATASTORE_INHERIT_FOREVER)
(269,if (tmp)
(270,ast_channel_redirecting(tmp)
(271,v)
(272,ast_mutex_unlock(&iaxsl[callno])
(273,sizeof(*varlist)
(274,rdnis)
(275,varlist)
(276,ast_channel_context_set(tmp, i->context)
(277,)
(278,AST_LIST_INSERT_TAIL(varlist, newvar, entries)
(279,cid_num)
(280,iaxs)
(281,varlist)
(282,ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE)
(283,ast_channel_nativeformats(tmp)
(284,ast_channel_caller(tmp)
(285,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(286,callno)
(287,variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(288,var)
(289,i)
(290,if (variablestore)
(291,tmp)
(292,id)
(293,if (!ast_strlen_zero(i->language)
(294,variablestore->data)
(295,transit_network_select)
(296,tmp)
(297,iaxsl[callno])
(298,ast_channel_dialed(tmp)
(299,v = i->vars)
(300,)
(301,presentation)
(302,ast_strlen_zero(i->parkinglot)
(303,iaxvars)
(304,str)
(305,!cachable)
(306,ast_channel_rawwriteformat(tmp)
(307,AST_ADSI_UNAVAILABLE)
(308,owner)
(309,NULL)
(310,ast_channel_redirecting(tmp)
(311,iaxs[callno])
(312,ast_strlen_zero(i->cid_num)
(313,)
(314,id)
(315,dnid)
(316,AST_FLAG_DISABLE_DEVSTATE_CACHE)
(317,presentation)
(318,varlist)
(319,i)
(320,varlist)
(321,return NULL;)
(322,prev)
(323,ast_pbx_start(tmp)
(324,calling_tns)
(325,plan)
(326,i->ani)
(327,tmp)
(328,tmpfmt)
(329,)
(330,ast_channel_caller(tmp)
(331,tmp)
(332,ast_channel_datastore_add(i->owner, variablestore)
(333,amaflags)
(334,ast_channel_name(tmp)
(335,callid)
(336,iax2_ami_channelupdate(i)
(337,name)
(338,NULL)
(339,ast_channel_callid_set(tmp, callid)
(340,if (varlist)
(341,str)
(342,var->next)
(343,ast_log(LOG_WARNING, "Unable to start PBX on %s\\n", ast_channel_name(tmp)
(344,ast_channel_caller(tmp)
(345,i->peeradsicpe)
(346,ani)
(347,value)
(348,from)
(349,)
(350,var)
(351,return tmp;)
(352,parkinglot)
(353,newvar)
(354,)
(355,i->context)
(356,tmp)
(357,i->language)
(358,iaxs[callno])
(359,ast_module_info->self)
(360,tmp)
(361,i)
(362,prev)
(363,unsigned int cachable)
(364,state != AST_STATE_DOWN)
(365,cid_num)
(366,i->language)
(367,*prev = NULL)
(368,&tmpfmt)
(369,ast_channel_caller(tmp)
(370,tmp)
(371,v)
(372,number)
(373,varlist)
(374,owner)
(375,iaxsl[callno])
(376,tmp)
(377,ast_strlen_zero(i->rdnis)
(378,return NULL;)
(379,prev)
(380,i)
(381,i->cid_num)
(382,var)
(383,ast_channel_caller(tmp)
(384,ast_channel_caller(tmp)
(385,!ast_strlen_zero(i->accountcode)
(386,)
(387,const char *linkedid)
(388,!ast_strlen_zero(i->parkinglot)
(389,variablestore)
(390,tmpfmt)
(391,i)
(392,i->amaflags)
(393,entries)
(394,var = i->iaxvars)
(395,str)
(396,i->owner)
(397,if (prev)
(398,i)
(399,linkedid)
(400,)
(401,1)
(402,if (!ast_strlen_zero(i->parkinglot)
(403,var->name)
(404,i)
(405,tmp)
(406,i->dnid)
(407,tmpfmt)
(408,number)
(409,name)
(410,ast_channel_exten_set(tmp, i->exten)
(411,i->ani)
(412,ast_channel_caller(tmp)
(413,)
(414,ast_module_info)
(415,valid)
(416,if (i->iaxvars)
(417,if (variablestore && varlist)
(418,i->accountcode)
(419,tmp)
(420,tmp)
(421,ast_best_codec(ast_channel_nativeformats(tmp)
(422,CALLNO_TO_PTR(i->callno)
(423,&iaxsl[callno])
(424,ast_channel_redirecting(tmp)
(425,tmp)
(426,int state)
(427,i->iaxvars = NULL)
(428,callno)
(429,callid)
(430,tmp)
(431,ast_channel_caller(tmp)
(432,calling_pres)
(433,pbx_builtin_setvar_helper(tmp, v->name, v->value)
(434,i->rdnis)
(435,if (i != iaxs[callno])
(436,!newvar)
(437,tmp)
(438,i->cid_num)
(439,LOG_WARNING)
(440,vars)
(441,variablestore)
(442,)
(443,ani)
(444,if (!ast_strlen_zero(i->ani)
(445,tmp)
(446,amaflags)
(447,variablestore)
(448,i->rdnis)
(449,i->owner = tmp)
(450,callno)
(451,i->parkinglot)
(452,varlist)
(453,i)
(454,ast_debug(1, "Loading up the channel with IAXVARs\\n")
(455,iaxs[callno])
(456,name)
(457,calling_ton)
(458,variablestore)
(459,NULL)
(460,return NULL;)
(461,i)
(462,ast_set_flag(ast_channel_flags(tmp)
(463,inheritance)
(464,ast_channel_tech_pvt_set(tmp, CALLNO_TO_PTR(i->callno)
(465,i->iaxvars)
(466,tmp)
(467,callno)
(468,&iaxsl[callno])
(469,ast_channel_caller(tmp)
(470,tmp = ast_channel_release(tmp)
(471,if (ast_pbx_start(tmp)
(472,host)
(473,ast_strlen_zero(i->accountcode)
(474,tmp)
(475,i)
(476,ast_format_copy(ast_channel_rawreadformat(tmp)
(477,tmp)
(478,i)
(479,varlist)
(480,ast_channel_redirecting(tmp)
(481,callno)
(482,variablestore)
(483,i->accountcode)
(484,if ((callid = iaxs[callno]->callid)
(485,tmp)
(486,if (!newvar)
(487,NULL)
(488,i->exten)
(489,!ast_strlen_zero(i->rdnis)
(490,valid)
(491,ast_channel_dialed(tmp)
(492,ast_channel_caller(tmp)
(493,i->owner = NULL)
(494,callno)
(495,AST_STATE_DOWN)
(496,tmp)
(497,tmp)
(498,variablestore->inheritance)
(499,i)
(500,)
(501,i)
(502,ast_channel_dialed(tmp)
(503,i->amaflags)
(504,&iaxsl[callno])
(505,)
(506,i)
(507,*newvar = ast_var_assign(var->name, var->value)
(508,i->callno)
(509,v->name)
(510,ast_channel_tech_set(tmp, &iax2_tech)
(511,i->owner)
(512,varlist)
(513,ast_channel_caller(tmp)
(514,peeradsicpe)
(515,newvar)
(516,tmp)
(517,rdnis)
(518,i)
(519,i)
(520,variablestore)
(521,ast_channel_caller(tmp)
(522,*varlist)
(523,i->iaxvars)
(524,iaxvars)
(525,ast_channel_caller(tmp)
(526,ast_channel_redirecting(tmp)
(527,tmp = ast_channel_alloc(1, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "IAX2/%s-%d", i->host, i->callno)
(528,NULL)
(529,NULL)
(530,ast_free(prev)
(531,ast_channel_caller(tmp)
(532,cid_num)
(533,if (!ast_strlen_zero(i->accountcode)
(534,number)
(535,tmp)
(536,"Memory allocation error while processing IAX2 variables\\n")
(537,if (i->adsi)
(538,"Loading up the channel with IAXVARs\\n")
(539,iaxsl[callno])
(540,vars)
(541,&iax2_tech)
(542,iaxsl)
(543,!ast_strlen_zero(i->cid_num)
(544,var = var->next)
(545,i)
(546,i->cid_num)
(547,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^