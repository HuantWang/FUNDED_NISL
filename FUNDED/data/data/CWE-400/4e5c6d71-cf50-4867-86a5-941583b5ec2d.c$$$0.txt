-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    goodB2G1Static = 0; /* false */
    goodB2G1Sink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,63,64,68,70
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
61,62
61,63
-----guardedBy-----
34,50
40,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    goodB2G1Static = 0; /* false */    goodB2G1Sink(data);}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    goodB2G1Static = 0; /* false */    goodB2G1Sink(data);}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
goodB2G1Static = 0;
goodB2G1Static = 0
goodB2G1Static
goodB2G1Static
0
goodB2G1Sink(data);
goodB2G1Sink(data)
goodB2G1Sink
goodB2G1Sink
data
data
-----joern-----
(31,2,0)
(26,18,0)
(13,21,0)
(14,27,0)
(0,18,0)
(25,24,0)
(12,26,0)
(10,29,0)
(32,26,0)
(6,30,0)
(19,4,0)
(18,24,0)
(8,27,0)
(11,29,0)
(3,18,0)
(8,18,0)
(20,31,0)
(24,2,0)
(4,23,0)
(22,21,0)
(5,8,0)
(17,8,0)
(31,4,0)
(4,26,0)
(28,2,0)
(27,8,0)
(21,2,0)
(16,24,0)
(26,4,0)
(31,21,0)
(7,8,0)
(9,26,0)
(29,2,0)
(30,1,0)
(4,26,1)
(30,6,1)
(11,10,1)
(20,29,1)
(31,4,1)
(10,4,1)
(0,21,1)
(3,0,1)
(7,17,1)
(8,5,1)
(9,32,1)
(18,3,1)
(19,27,1)
(31,20,1)
(31,21,1)
(29,11,1)
(15,31,1)
(8,18,1)
(5,7,1)
(27,14,1)
(6,27,1)
(27,8,1)
(22,13,1)
(17,18,1)
(12,9,1)
(26,12,1)
(32,19,1)
(26,18,1)
(14,8,1)
(21,22,1)
(10,30,1)
(31,21,2)
(4,27,2)
(4,26,2)
(8,18,2)
(19,27,2)
(27,8,2)
(9,27,2)
(26,27,2)
(31,4,2)
(26,18,2)
(12,27,2)
(32,27,2)
(30,27,2)
(6,27,2)
-----------------------------------
(0,inputBuffer)
(1,)
(2,)
(3,"")
(4,data = strtoul(inputBuffer, NULL, 0)
(5,stdin)
(6,"fgets()
(7,CHAR_ARRAY_SIZE)
(8,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(9,NULL)
(10,goodB2G1Static)
(11,0)
(12,0)
(13,data)
(14,NULL)
(15,RET)
(16,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(17,inputBuffer)
(18,inputBuffer[CHAR_ARRAY_SIZE] = "")
(19,data)
(20,data)
(21,data = 0)
(22,0)
(23,)
(24,)
(25,inputBuffer)
(26,strtoul(inputBuffer, NULL, 0)
(27,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(28,data)
(29,goodB2G1Static = 0)
(30,printLine("fgets()
(31,goodB2G1Sink(data)
(32,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^