-----label-----
0
-----code-----
static void goodG2B()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
77,78
77,79
77,80
77,81
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
89,90
91,92
91,93
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
116,117
117,118
117,119
118,119
120,121
120,122
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
131,132
131,133
131,134
132,133
133,134
135,136
137,138
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,49,50,51,52,58,59,60,61,65,69,71,75,76,81,85,87,90,92,96,97,103,104,105,106,112,113,114,115,119,123,125,129,130,134,136,138
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
54,55
54,56
79,80
79,81
91,92
91,93
99,100
99,101
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(9,4,0)
(55,31,0)
(3,54,0)
(13,10,0)
(56,57,0)
(23,35,0)
(14,21,0)
(68,60,0)
(31,55,0)
(30,11,0)
(59,58,0)
(26,20,0)
(25,53,0)
(71,18,0)
(67,1,0)
(50,16,0)
(43,21,0)
(54,53,0)
(36,56,0)
(49,16,0)
(4,34,0)
(64,49,0)
(49,7,0)
(22,8,0)
(16,49,0)
(35,70,0)
(51,52,0)
(38,18,0)
(20,8,0)
(34,21,0)
(52,34,0)
(7,49,0)
(11,30,0)
(22,66,0)
(8,20,0)
(12,2,0)
(48,50,0)
(4,9,0)
(16,50,0)
(15,0,0)
(62,52,0)
(30,10,0)
(58,59,0)
(58,60,0)
(1,54,0)
(54,1,0)
(21,34,0)
(18,71,0)
(61,70,0)
(41,70,0)
(24,4,0)
(27,71,0)
(20,34,0)
(29,70,0)
(65,58,0)
(7,57,0)
(31,60,0)
(52,2,0)
(63,19,0)
(28,4,0)
(60,31,0)
(59,56,0)
(1,60,0)
(71,43,0)
(69,34,0)
(15,22,0)
(21,43,0)
(2,19,0)
(21,14,0)
(46,44,0)
(10,30,0)
(53,57,0)
(2,52,0)
(66,22,0)
(55,10,0)
(45,20,0)
(34,0,0)
(49,64,0)
(43,71,0)
(22,15,0)
(33,58,0)
(39,1,0)
(6,50,0)
(9,44,0)
(42,9,0)
(40,59,0)
(60,57,0)
(18,38,0)
(31,5,0)
(44,0,0)
(19,0,0)
(10,55,0)
(37,35,0)
(8,22,0)
(50,60,0)
(5,31,0)
(22,8,1)
(31,55,1)
(18,27,1)
(27,69,1)
(46,9,1)
(49,16,1)
(7,49,1)
(10,30,1)
(69,32,1)
(56,36,1)
(32,35,1)
(71,18,1)
(34,21,1)
(19,63,1)
(54,3,1)
(65,33,1)
(6,48,1)
(1,39,1)
(44,46,1)
(68,32,1)
(24,28,1)
(50,60,1)
(20,34,1)
(25,54,1)
(31,5,1)
(30,11,1)
(67,60,1)
(36,59,1)
(43,71,1)
(55,10,1)
(17,7,1)
(8,20,1)
(3,1,1)
(37,23,1)
(47,17,1)
(58,60,1)
(9,42,1)
(52,62,1)
(21,14,1)
(62,51,1)
(48,56,1)
(39,67,1)
(17,15,1)
(15,22,1)
(53,25,1)
(59,58,1)
(9,4,1)
(2,52,1)
(28,34,1)
(50,6,1)
(30,13,1)
(26,45,1)
(52,34,1)
(1,60,1)
(63,2,1)
(4,34,1)
(21,43,1)
(12,52,1)
(40,58,1)
(49,64,1)
(59,40,1)
(58,65,1)
(45,19,1)
(13,68,1)
(22,66,1)
(16,50,1)
(60,31,1)
(4,24,1)
(51,44,1)
(42,4,1)
(54,1,1)
(35,37,1)
(20,26,1)
(33,53,1)
(18,38,1)
(2,12,1)
(10,32,2)
(34,32,2)
(67,32,2)
(22,32,2)
(1,32,2)
(9,4,2)
(68,32,2)
(21,43,2)
(34,21,2)
(49,64,2)
(65,32,2)
(60,31,2)
(49,32,2)
(6,32,2)
(2,52,2)
(63,32,2)
(33,32,2)
(20,32,2)
(18,32,2)
(24,32,2)
(13,32,2)
(15,32,2)
(4,32,2)
(69,32,2)
(44,32,2)
(40,32,2)
(43,71,2)
(4,34,2)
(71,32,2)
(55,32,2)
(10,30,2)
(7,49,2)
(59,58,2)
(31,55,2)
(9,32,2)
(31,5,2)
(3,32,2)
(62,32,2)
(18,38,2)
(50,32,2)
(1,60,2)
(58,32,2)
(45,32,2)
(20,34,2)
(25,32,2)
(54,1,2)
(50,60,2)
(60,32,2)
(22,66,2)
(46,32,2)
(53,32,2)
(54,32,2)
(28,32,2)
(42,32,2)
(30,32,2)
(26,32,2)
(36,32,2)
(21,32,2)
(8,32,2)
(22,8,2)
(15,22,2)
(56,32,2)
(52,32,2)
(58,60,2)
(55,10,2)
(27,32,2)
(48,32,2)
(71,18,2)
(43,32,2)
(31,32,2)
(19,32,2)
(30,11,2)
(12,32,2)
(21,14,2)
(51,32,2)
(39,32,2)
(7,32,2)
(8,20,2)
(16,50,2)
(2,32,2)
(49,16,2)
(59,32,2)
(52,34,2)
(16,32,2)
-----------------------------------
(0,)
(1,data[0])
(2,data[0].intTwo)
(3,intOne)
(4,data[0])
(5,struct _twoIntsStruct *)
(6,0)
(7,printStructLine((twoIntsStruct *)
(8,&data[0])
(9,data[0].intOne)
(10,100*sizeof(struct _twoIntsStruct)
(11,struct _twoIntsStruct)
(12,intTwo)
(13,100)
(14,struct _twoIntsStruct *)
(15,printStructLine((twoIntsStruct *)
(16,&data[0])
(17,globalReturnsTrueOrFalse()
(18,sizeof(struct _twoIntsStruct)
(19,data[0].intTwo = 0)
(20,data[0])
(21,(struct _twoIntsStruct *)
(22,(twoIntsStruct *)
(23,data)
(24,0)
(25,0)
(26,0)
(27,100)
(28,data)
(29,if(globalReturnsTrueOrFalse()
(30,sizeof(struct _twoIntsStruct)
(31,(struct _twoIntsStruct *)
(32,globalReturnsTrueOrFalse()
(33,data)
(34,data = (struct _twoIntsStruct *)
(35,data = NULL)
(36,0)
(37,NULL)
(38,struct _twoIntsStruct)
(39,0)
(40,intTwo)
(41,data)
(42,intOne)
(43,ALLOCA(100*sizeof(struct _twoIntsStruct)
(44,data[0].intOne = 0)
(45,data)
(46,0)
(47,RET)
(48,data)
(49,(twoIntsStruct *)
(50,data[0])
(51,data)
(52,data[0])
(53,data[0].intOne = 0)
(54,data[0].intOne)
(55,ALLOCA(100*sizeof(struct _twoIntsStruct)
(56,data[0].intTwo = 0)
(57,)
(58,data[0])
(59,data[0].intTwo)
(60,data = (struct _twoIntsStruct *)
(61,if(globalReturnsTrueOrFalse()
(62,0)
(63,0)
(64,twoIntsStruct *)
(65,0)
(66,twoIntsStruct *)
(67,data)
(68,data)
(69,data)
(70,)
(71,100*sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^