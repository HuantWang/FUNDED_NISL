-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad()
{
    twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
85,86
85,87
87,88
87,89
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,84,86,88,89
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad(){    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_16_bad
{    twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(16,29,0)
(23,35,0)
(42,46,0)
(26,36,0)
(28,9,0)
(27,2,0)
(36,50,0)
(50,21,0)
(8,21,0)
(18,23,0)
(43,50,0)
(39,40,0)
(9,25,0)
(24,9,0)
(1,36,0)
(43,9,0)
(29,25,0)
(49,46,0)
(23,18,0)
(6,24,0)
(38,10,0)
(4,43,0)
(21,2,0)
(5,18,0)
(22,18,0)
(12,14,0)
(17,1,0)
(7,24,0)
(9,43,0)
(34,46,0)
(48,11,0)
(24,10,0)
(10,37,0)
(32,50,0)
(35,25,0)
(13,2,0)
(50,36,0)
(12,40,0)
(11,9,0)
(31,49,0)
(46,49,0)
(43,4,0)
(33,11,0)
(50,43,0)
(47,37,0)
(10,24,0)
(49,29,0)
(36,1,0)
(15,21,0)
(30,25,0)
(35,23,0)
(0,25,0)
(45,2,0)
(18,9,0)
(37,25,0)
(40,12,0)
(46,9,0)
(20,19,0)
(26,32,1)
(3,44,1)
(23,18,1)
(10,38,1)
(39,11,1)
(42,12,1)
(44,30,1)
(11,9,1)
(29,16,1)
(46,34,1)
(50,21,1)
(18,5,1)
(28,41,1)
(21,8,1)
(11,48,1)
(5,22,1)
(24,7,1)
(49,46,1)
(43,50,1)
(46,9,1)
(8,15,1)
(33,9,1)
(48,33,1)
(34,42,1)
(43,4,1)
(44,41,1)
(24,9,1)
(18,9,1)
(20,44,1)
(1,17,1)
(17,26,1)
(35,23,1)
(41,21,1)
(30,35,1)
(49,31,1)
(7,6,1)
(32,28,1)
(10,24,1)
(42,11,1)
(22,37,1)
(38,24,1)
(31,46,1)
(50,36,1)
(16,49,1)
(36,1,1)
(6,29,1)
(12,40,1)
(37,47,1)
(40,39,1)
(3,20,1)
(47,10,1)
(9,43,1)
(30,41,2)
(42,41,2)
(40,11,2)
(46,41,2)
(50,36,2)
(23,18,2)
(16,41,2)
(32,41,2)
(10,24,2)
(35,23,2)
(28,41,2)
(50,41,2)
(35,41,2)
(36,1,2)
(5,41,2)
(49,41,2)
(43,41,2)
(43,50,2)
(24,9,2)
(29,41,2)
(12,11,2)
(18,9,2)
(22,41,2)
(17,41,2)
(20,44,2)
(49,46,2)
(36,41,2)
(37,41,2)
(39,11,2)
(6,41,2)
(43,4,2)
(26,41,2)
(10,41,2)
(23,41,2)
(50,21,2)
(11,9,2)
(38,41,2)
(33,41,2)
(34,41,2)
(47,41,2)
(9,41,2)
(24,41,2)
(9,43,2)
(11,41,2)
(48,41,2)
(1,41,2)
(7,41,2)
(31,41,2)
(12,40,2)
(18,41,2)
(46,9,2)
-----------------------------------
(0,if (data == NULL)
(1,sizeof(twoIntsStruct)
(2,)
(3,RET)
(4,twoIntsStruct *)
(5,0)
(6,data)
(7,0)
(8,NULL)
(9,data = (twoIntsStruct *)
(10,data[0].intTwo)
(11,data == NULL)
(12,exit(-1)
(13,while(1)
(14,)
(15,data)
(16,0)
(17,twoIntsStruct)
(18,data[0])
(19,)
(20,break;)
(21,data = NULL)
(22,data)
(23,&data[0])
(24,data[0])
(25,)
(26,100)
(27,while(1)
(28,data)
(29,data[0].intOne = 0)
(30,break;)
(31,intOne)
(32,data)
(33,data)
(34,0)
(35,printStructLine(&data[0])
(36,100*sizeof(twoIntsStruct)
(37,data[0].intTwo = 0)
(38,intTwo)
(39,1)
(40,-1)
(41,1)
(42,data)
(43,(twoIntsStruct *)
(44,1)
(45,data)
(46,data[0])
(47,0)
(48,NULL)
(49,data[0].intOne)
(50,realloc(data, 100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^