-----label-----
0
-----code-----
static void goodB2G()
{
    twoIntsStruct * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    {
        twoIntsStruct * dataCopy = data;
        twoIntsStruct * data = dataCopy;
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
24,26
25,26
27,28
29,30
29,31
29,32
30,31
32,33
34,35
34,36
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
81,83
81,84
82,83
83,84
83,85
84,85
86,87
86,88
86,89
89,90
90,91
92,93
93,94
93,95
94,95
96,97
96,98
96,99
99,100
100,101
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,9,11,12,16,18,22,26,28,31,33,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,80,85,87,88,91,95,97,98,101,105,107
-----computeFrom-----
14,15
14,16
20,21
20,22
34,35
34,36
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    twoIntsStruct * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    {        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
{        twoIntsStruct * dataCopy = data;        twoIntsStruct * data = dataCopy;        /* FIX: Deallocate memory */        free(data);    }
twoIntsStruct * dataCopy = data;
twoIntsStruct * dataCopy = data;
twoIntsStruct
twoIntsStruct
* dataCopy = data
*
dataCopy
= data
data
data
twoIntsStruct * data = dataCopy;
twoIntsStruct * data = dataCopy;
twoIntsStruct
twoIntsStruct
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
free(data);
free(data)
free
free
data
data
-----joern-----
(22,46,0)
(43,14,0)
(4,20,0)
(34,21,0)
(41,33,0)
(29,51,0)
(53,22,0)
(6,38,0)
(39,38,0)
(10,12,0)
(6,48,0)
(5,12,0)
(31,38,0)
(42,48,0)
(49,13,0)
(37,50,0)
(25,20,0)
(11,39,0)
(17,14,0)
(21,8,0)
(52,53,0)
(45,3,0)
(51,8,0)
(12,33,0)
(0,38,0)
(18,22,0)
(36,7,0)
(53,50,0)
(48,6,0)
(14,21,0)
(17,39,0)
(42,8,0)
(21,39,0)
(44,14,0)
(12,8,0)
(20,25,0)
(50,38,0)
(7,36,0)
(13,8,0)
(14,39,0)
(40,38,0)
(32,7,0)
(48,42,0)
(27,50,0)
(47,42,0)
(33,12,0)
(36,9,0)
(15,20,0)
(13,49,0)
(26,25,0)
(33,40,0)
(22,53,0)
(25,3,0)
(28,17,0)
(23,42,0)
(24,46,0)
(19,39,0)
(8,38,0)
(8,13,0)
(53,13,0)
(20,8,0)
(2,51,0)
(3,38,0)
(30,8,0)
(1,21,0)
(35,40,0)
(13,53,0)
(46,22,0)
(20,8,1)
(7,32,1)
(13,49,1)
(50,27,1)
(29,2,1)
(20,15,1)
(36,7,1)
(46,24,1)
(51,8,1)
(14,21,1)
(28,14,1)
(45,25,1)
(22,46,1)
(43,21,1)
(30,50,1)
(41,12,1)
(25,20,1)
(42,8,1)
(52,30,1)
(13,53,1)
(10,51,1)
(34,6,1)
(21,8,1)
(40,35,1)
(15,4,1)
(26,20,1)
(47,3,1)
(53,50,1)
(44,43,1)
(32,51,1)
(42,23,1)
(48,42,1)
(33,12,1)
(18,52,1)
(21,1,1)
(8,13,1)
(4,40,1)
(10,36,1)
(23,47,1)
(14,44,1)
(17,14,1)
(6,48,1)
(1,34,1)
(33,41,1)
(25,26,1)
(2,8,1)
(53,22,1)
(16,17,1)
(12,5,1)
(3,45,1)
(5,10,1)
(51,29,1)
(24,18,1)
(27,37,1)
(12,8,1)
(17,28,1)
(35,33,1)
(36,7,2)
(12,8,2)
(36,51,2)
(51,8,2)
(32,51,2)
(8,13,2)
(22,46,2)
(25,20,2)
(7,51,2)
(48,42,2)
(13,53,2)
(21,8,2)
(33,12,2)
(17,14,2)
(53,22,2)
(13,49,2)
(42,8,2)
(6,48,2)
(14,21,2)
(20,8,2)
(53,50,2)
-----------------------------------
(0,if (data == NULL)
(1,data)
(2,data)
(3,data[0].intTwo = 0)
(4,data)
(5,0)
(6,printStructLine(&data[0])
(7,-1)
(8,data = (twoIntsStruct *)
(9,)
(10,data)
(11,dataCopy)
(12,data[0])
(13,(twoIntsStruct *)
(14,* data = dataCopy)
(15,0)
(16,RET)
(17,free(data)
(18,100)
(19,data)
(20,data[0])
(21,* dataCopy = data)
(22,100*sizeof(twoIntsStruct)
(23,0)
(24,twoIntsStruct)
(25,data[0].intTwo)
(26,intTwo)
(27,NULL)
(28,data)
(29,NULL)
(30,data)
(31,data)
(32,1)
(33,data[0].intOne)
(34,dataCopy)
(35,0)
(36,exit(-1)
(37,data)
(38,)
(39,)
(40,data[0].intOne = 0)
(41,intOne)
(42,data[0])
(43,data)
(44,dataCopy)
(45,0)
(46,sizeof(twoIntsStruct)
(47,data)
(48,&data[0])
(49,twoIntsStruct *)
(50,data = NULL)
(51,data == NULL)
(52,data)
(53,realloc(data, 100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^