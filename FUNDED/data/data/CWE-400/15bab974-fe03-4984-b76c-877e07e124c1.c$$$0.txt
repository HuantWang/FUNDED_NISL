-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
21,22
24,25
25,26
26,27
26,28
27,28
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,29,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,77,81,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,0,0)
(0,24,0)
(41,44,0)
(36,44,0)
(38,25,0)
(37,3,0)
(26,12,0)
(28,39,0)
(27,21,0)
(12,26,0)
(5,28,0)
(18,2,0)
(28,24,0)
(21,3,0)
(1,16,0)
(40,15,0)
(24,28,0)
(20,10,0)
(42,24,0)
(16,32,0)
(25,24,0)
(6,29,0)
(3,21,0)
(23,10,0)
(8,30,0)
(32,16,0)
(32,24,0)
(39,3,0)
(45,25,0)
(43,10,0)
(7,15,0)
(3,39,0)
(9,32,0)
(19,0,0)
(11,32,0)
(0,26,0)
(16,35,0)
(28,5,0)
(24,2,0)
(26,0,0)
(39,28,0)
(12,2,0)
(44,10,0)
(38,18,0)
(35,2,0)
(33,25,0)
(4,30,0)
(17,38,0)
(29,14,0)
(22,35,0)
(25,38,0)
(13,18,0)
(0,24,1)
(31,15,1)
(28,39,1)
(38,17,1)
(12,26,1)
(22,16,1)
(39,3,1)
(0,19,1)
(25,33,1)
(30,4,1)
(3,21,1)
(40,12,1)
(36,41,1)
(24,28,1)
(13,38,1)
(32,11,1)
(25,24,1)
(9,24,1)
(28,5,1)
(32,24,1)
(33,45,1)
(26,0,1)
(27,37,1)
(29,6,1)
(19,34,1)
(45,35,1)
(17,25,1)
(18,13,1)
(16,32,1)
(44,36,1)
(37,42,1)
(38,25,1)
(8,44,1)
(40,29,1)
(7,40,1)
(16,1,1)
(35,22,1)
(42,30,1)
(6,30,1)
(15,7,1)
(21,27,1)
(11,9,1)
(34,18,1)
(4,8,1)
(1,32,1)
(13,30,2)
(3,30,2)
(38,25,2)
(42,30,2)
(34,30,2)
(0,30,2)
(12,30,2)
(17,30,2)
(35,30,2)
(0,24,2)
(1,30,2)
(25,24,2)
(26,0,2)
(37,30,2)
(38,30,2)
(28,5,2)
(27,30,2)
(22,30,2)
(24,30,2)
(39,3,2)
(19,30,2)
(45,30,2)
(6,30,2)
(33,30,2)
(28,30,2)
(11,30,2)
(18,30,2)
(29,30,2)
(32,24,2)
(3,21,2)
(16,32,2)
(25,30,2)
(26,30,2)
(32,30,2)
(24,28,2)
(28,39,2)
(21,30,2)
(9,30,2)
(12,26,2)
(39,30,2)
(16,30,2)
-----------------------------------
(0,data[0])
(1,intOne)
(2,)
(3,100*sizeof(twoIntsStruct)
(4,5)
(5,twoIntsStruct *)
(6,"Benign, fixed string")
(7,5)
(8,globalFive)
(9,data)
(10,)
(11,0)
(12,printStructLine(&data[0])
(13,0)
(14,)
(15,globalFive==5)
(16,data[0].intOne)
(17,intTwo)
(18,data[0].intTwo = 0)
(19,0)
(20,if(globalFive!=5)
(21,sizeof(twoIntsStruct)
(22,0)
(23,data)
(24,data = (twoIntsStruct *)
(25,data[0])
(26,&data[0])
(27,twoIntsStruct)
(28,(twoIntsStruct *)
(29,printLine("Benign, fixed string")
(30,globalFive!=5)
(31,RET)
(32,data[0])
(33,0)
(34,data)
(35,data[0].intOne = 0)
(36,NULL)
(37,100)
(38,data[0].intTwo)
(39,ALLOCA(100*sizeof(twoIntsStruct)
(40,globalFive)
(41,data)
(42,data)
(43,if(globalFive==5)
(44,data = NULL)
(45,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^