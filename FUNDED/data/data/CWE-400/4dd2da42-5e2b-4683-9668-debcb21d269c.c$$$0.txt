-----label-----
0
-----code-----
static void goodB2G1()
{
    int64_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)realloc(data, 100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
66,67
67,68
67,69
68,69
70,71
70,72
71,72
74,75
74,76
74,77
75,76
76,77
78,79
79,80
80,81
80,82
81,82
84,85
85,86
86,87
86,88
87,88
89,90
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,63,64,65,69,72,73,77,82,83,88,90
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)realloc(data, 100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)realloc(data, 100*sizeof(int64_t));
data = (int64_t *)realloc(data, 100*sizeof(int64_t))
data
data
(int64_t *)realloc(data, 100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, 100*sizeof(int64_t))
realloc
realloc
data
data
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(22,29,0)
(23,18,0)
(18,13,0)
(9,13,0)
(26,29,0)
(7,21,0)
(13,24,0)
(18,34,0)
(20,10,0)
(19,36,0)
(27,30,0)
(14,4,0)
(27,23,0)
(29,13,0)
(20,13,0)
(3,36,0)
(18,23,0)
(35,39,0)
(1,24,0)
(33,11,0)
(2,19,0)
(25,20,0)
(30,27,0)
(39,0,0)
(31,29,0)
(16,23,0)
(17,24,0)
(12,36,0)
(13,18,0)
(5,36,0)
(15,19,0)
(23,27,0)
(8,30,0)
(20,19,0)
(21,13,0)
(22,24,0)
(23,19,0)
(37,21,0)
(29,22,0)
(11,14,0)
(14,11,0)
(6,27,0)
(34,18,0)
(18,23,1)
(32,38,1)
(37,7,1)
(21,37,1)
(18,34,1)
(23,19,1)
(19,2,1)
(7,13,1)
(26,31,1)
(16,9,1)
(1,21,1)
(29,13,1)
(29,26,1)
(27,30,1)
(39,35,1)
(21,13,1)
(30,8,1)
(1,14,1)
(28,39,1)
(23,27,1)
(20,13,1)
(25,32,1)
(31,1,1)
(9,38,1)
(6,16,1)
(14,11,1)
(35,32,1)
(33,21,1)
(2,15,1)
(22,29,1)
(32,22,1)
(13,18,1)
(11,33,1)
(20,19,1)
(20,25,1)
(28,20,1)
(38,19,1)
(8,6,1)
(30,38,2)
(20,13,2)
(27,38,2)
(27,30,2)
(11,21,2)
(23,27,2)
(13,18,2)
(16,38,2)
(29,38,2)
(25,32,2)
(20,19,2)
(22,38,2)
(29,13,2)
(37,38,2)
(14,21,2)
(13,38,2)
(23,19,2)
(8,38,2)
(7,38,2)
(31,38,2)
(21,38,2)
(9,38,2)
(23,38,2)
(39,32,2)
(6,38,2)
(33,21,2)
(18,34,2)
(35,32,2)
(26,38,2)
(1,38,2)
(14,11,2)
(18,38,2)
(20,32,2)
(22,29,2)
(18,23,2)
(21,13,2)
-----------------------------------
(0,)
(1,L)
(2,NULL)
(3,data)
(4,)
(5,if(staticReturnsFalse()
(6,100)
(7,data)
(8,int64_t)
(9,data)
(10,)
(11,-1)
(12,if(staticReturnsTrue()
(13,data = (int64_t *)
(14,exit(-1)
(15,data)
(16,data)
(17,if (data == NULL)
(18,(int64_t *)
(19,data = NULL)
(20,free(data)
(21,data == NULL)
(22,printLongLongLine(data[0])
(23,realloc(data, 100*sizeof(int64_t)
(24,)
(25,data)
(26,0)
(27,100*sizeof(int64_t)
(28,RET)
(29,data[0])
(30,sizeof(int64_t)
(31,data)
(32,staticReturnsFalse()
(33,1)
(34,int64_t *)
(35,"Benign, fixed string")
(36,)
(37,NULL)
(38,staticReturnsTrue()
(39,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^