-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_09_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
92,93
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,93
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_09_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_09_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_09_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(15,43,0)
(44,45,0)
(16,5,0)
(3,22,0)
(20,26,0)
(14,29,0)
(33,46,0)
(8,11,0)
(20,27,0)
(23,43,0)
(45,29,0)
(15,13,0)
(32,12,0)
(5,22,0)
(47,39,0)
(32,48,0)
(42,9,0)
(18,9,0)
(29,45,0)
(41,47,0)
(9,33,0)
(37,29,0)
(17,0,0)
(34,23,0)
(12,22,0)
(35,22,0)
(10,12,0)
(13,15,0)
(45,5,0)
(38,26,0)
(1,47,0)
(15,35,0)
(7,24,0)
(33,9,0)
(29,12,0)
(32,38,0)
(43,23,0)
(31,39,0)
(40,23,0)
(36,39,0)
(23,12,0)
(26,38,0)
(35,15,0)
(12,32,0)
(0,7,0)
(21,26,0)
(11,12,0)
(19,11,0)
(38,32,0)
(28,33,0)
(43,15,0)
(26,20,0)
(7,0,0)
(46,22,0)
(48,32,0)
(27,20,0)
(2,46,0)
(4,39,0)
(9,12,0)
(32,38,1)
(29,12,1)
(45,44,1)
(9,12,1)
(37,46,1)
(23,40,1)
(29,14,1)
(33,28,1)
(46,2,1)
(32,48,1)
(33,9,1)
(11,19,1)
(25,6,1)
(21,10,1)
(42,11,1)
(10,30,1)
(2,33,1)
(45,29,1)
(12,32,1)
(40,34,1)
(6,30,1)
(26,20,1)
(17,11,1)
(42,7,1)
(0,17,1)
(38,26,1)
(20,21,1)
(18,42,1)
(41,1,1)
(7,0,1)
(28,9,1)
(5,16,1)
(35,15,1)
(44,29,1)
(11,12,1)
(30,47,1)
(34,5,1)
(9,18,1)
(16,45,1)
(20,27,1)
(43,23,1)
(15,13,1)
(8,12,1)
(6,35,1)
(15,43,1)
(47,41,1)
(19,8,1)
(14,37,1)
(23,12,1)
(45,30,2)
(26,20,2)
(0,11,2)
(2,30,2)
(23,30,2)
(35,15,2)
(8,30,2)
(15,13,2)
(18,30,2)
(35,30,2)
(12,32,2)
(32,38,2)
(15,30,2)
(26,30,2)
(32,30,2)
(14,30,2)
(21,30,2)
(29,30,2)
(42,30,2)
(34,30,2)
(28,30,2)
(45,29,2)
(12,30,2)
(44,30,2)
(38,30,2)
(29,12,2)
(40,30,2)
(7,0,2)
(16,30,2)
(7,11,2)
(5,30,2)
(9,12,2)
(20,30,2)
(9,30,2)
(10,30,2)
(23,12,2)
(17,11,2)
(20,27,2)
(15,43,2)
(11,30,2)
(46,30,2)
(11,12,2)
(43,30,2)
(37,30,2)
(38,26,2)
(33,9,2)
(19,30,2)
(32,48,2)
(33,30,2)
(43,23,2)
-----------------------------------
(0,-1)
(1,data)
(2,0)
(3,if (data == NULL)
(4,if(GLOBAL_CONST_TRUE)
(5,data[0].intTwo = 0)
(6,GLOBAL_CONST_TRUE)
(7,exit(-1)
(8,data)
(9,data[0])
(10,data)
(11,data == NULL)
(12,data = (struct _twoIntsStruct *)
(13,twoIntsStruct *)
(14,0)
(15,(twoIntsStruct *)
(16,0)
(17,1)
(18,0)
(19,NULL)
(20,sizeof(struct _twoIntsStruct)
(21,100)
(22,)
(23,data[0])
(24,)
(25,RET)
(26,100*sizeof(struct _twoIntsStruct)
(27,struct _twoIntsStruct)
(28,intOne)
(29,data[0])
(30,GLOBAL_CONST_TRUE)
(31,if(GLOBAL_CONST_TRUE)
(32,(struct _twoIntsStruct *)
(33,data[0].intOne)
(34,data)
(35,printStructLine((twoIntsStruct *)
(36,data)
(37,data)
(38,malloc(100*sizeof(struct _twoIntsStruct)
(39,)
(40,0)
(41,NULL)
(42,data)
(43,&data[0])
(44,intTwo)
(45,data[0].intTwo)
(46,data[0].intOne = 0)
(47,data = NULL)
(48,struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^