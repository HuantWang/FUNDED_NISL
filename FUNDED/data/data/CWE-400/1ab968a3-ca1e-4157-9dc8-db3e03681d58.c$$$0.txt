-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = goodB2GSource(data);
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
61,62
63,64
64,65
64,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
81,84
82,83
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
102,103
102,104
103,104
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,37,40,42,45,46,51,54,56,59,62,65,66,70,72,77,79,83,85,87,91,93,97,99,104,105
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
35,36
35,37
43,44
43,45
49,50
49,51
60,61
60,62
68,69
68,70
-----guardedBy-----
42,87
45,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    data = goodB2GSource(data);    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    data = goodB2GSource(data);    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = goodB2GSource(data);
data = goodB2GSource(data)
data
data
goodB2GSource(data)
goodB2GSource
goodB2GSource
data
data
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(38,11,0)
(44,14,0)
(29,28,0)
(26,41,0)
(13,6,0)
(33,36,0)
(47,19,0)
(35,30,0)
(47,29,0)
(18,1,0)
(25,22,0)
(15,28,0)
(27,14,0)
(28,29,0)
(11,5,0)
(12,22,0)
(37,33,0)
(17,31,0)
(6,13,0)
(23,5,0)
(30,14,0)
(16,19,0)
(40,33,0)
(19,16,0)
(39,30,0)
(31,36,0)
(45,13,0)
(6,10,0)
(10,6,0)
(32,29,0)
(22,36,0)
(1,18,0)
(43,10,0)
(14,5,0)
(10,43,0)
(42,44,0)
(0,37,0)
(18,46,0)
(48,36,0)
(4,31,0)
(33,37,0)
(19,14,0)
(23,14,0)
(13,33,0)
(21,5,0)
(30,5,0)
(2,13,0)
(19,47,0)
(10,33,0)
(29,47,0)
(24,1,0)
(11,14,0)
(29,33,0)
(9,26,0)
(14,19,0)
(3,43,0)
(8,44,0)
(7,23,0)
(20,10,0)
(37,31,0)
(11,38,1)
(27,6,1)
(23,7,1)
(37,0,1)
(14,19,1)
(30,14,1)
(29,28,1)
(10,43,1)
(45,10,1)
(38,23,1)
(34,26,1)
(47,29,1)
(28,15,1)
(30,39,1)
(9,6,1)
(35,44,1)
(13,33,1)
(32,27,1)
(29,33,1)
(10,33,1)
(39,35,1)
(33,37,1)
(0,40,1)
(1,24,1)
(43,3,1)
(23,14,1)
(42,14,1)
(6,13,1)
(20,33,1)
(26,9,1)
(6,10,1)
(2,45,1)
(34,11,1)
(7,30,1)
(13,2,1)
(35,18,1)
(19,16,1)
(44,8,1)
(19,47,1)
(8,42,1)
(18,1,1)
(15,32,1)
(31,17,1)
(40,31,1)
(11,14,1)
(24,44,1)
(44,14,1)
(3,20,1)
(37,31,1)
(17,4,1)
(8,6,2)
(19,6,2)
(42,6,2)
(26,6,2)
(33,37,2)
(44,6,2)
(14,6,2)
(18,1,2)
(9,6,2)
(19,16,2)
(13,10,2)
(47,6,2)
(18,44,2)
(6,10,2)
(29,28,2)
(29,33,2)
(32,6,2)
(24,44,2)
(27,6,2)
(39,6,2)
(37,31,2)
(19,47,2)
(13,33,2)
(11,6,2)
(7,6,2)
(23,14,2)
(1,44,2)
(2,10,2)
(38,6,2)
(28,6,2)
(35,6,2)
(23,6,2)
(44,14,2)
(30,14,2)
(30,6,2)
(6,13,2)
(10,33,2)
(11,14,2)
(47,29,2)
(14,19,2)
(45,10,2)
(15,6,2)
(10,43,2)
(29,6,2)
-----------------------------------
(0,data)
(1,-1)
(2,100)
(3,HELLO_STRING)
(4,data)
(5,)
(6,data > wcslen(HELLO_STRING)
(7,myString)
(8,NULL)
(9,"Input is less than the length of the source string or too large")
(10,data > wcslen(HELLO_STRING)
(11,free(myString)
(12,if (data > wcslen(HELLO_STRING)
(13,data < 100)
(14,myString = (wchar_t *)
(15,wchar_t)
(16,wchar_t *)
(17,0)
(18,exit(-1)
(19,(wchar_t *)
(20,data)
(21,if (myString == NULL)
(22,)
(23,printWLine(myString)
(24,1)
(25,myString)
(26,printLine("Input is less than the length of the source string or too large")
(27,myString)
(28,sizeof(wchar_t)
(29,data*sizeof(wchar_t)
(30,wcscpy(myString, HELLO_STRING)
(31,data = 0)
(32,data)
(33,data = goodB2GSource(data)
(34,RET)
(35,myString)
(36,)
(37,goodB2GSource(data)
(38,myString)
(39,HELLO_STRING)
(40,data)
(41,)
(42,myString)
(43,wcslen(HELLO_STRING)
(44,myString == NULL)
(45,data)
(46,)
(47,malloc(data*sizeof(wchar_t)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^