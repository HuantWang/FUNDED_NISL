-----label-----
0
-----code-----
static void goodB2G2()
{
    char * data;
    data = NULL;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticFive==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,77,79
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    char * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    char * data;    data = NULL;    if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticFive==5)    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticFive==5)    {        /* FIX: Deallocate memory */        free(data);    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,25,0)
(4,31,0)
(39,15,0)
(24,22,0)
(33,24,0)
(24,6,0)
(8,12,0)
(2,8,0)
(23,27,0)
(38,28,0)
(21,22,0)
(37,15,0)
(6,12,0)
(10,25,0)
(22,24,0)
(7,8,0)
(19,2,0)
(14,28,0)
(27,23,0)
(34,25,0)
(13,12,0)
(32,30,0)
(11,8,0)
(6,24,0)
(36,30,0)
(8,25,0)
(15,28,0)
(3,27,0)
(2,15,0)
(12,6,0)
(10,8,0)
(9,31,0)
(35,7,0)
(2,16,0)
(12,8,0)
(1,8,0)
(29,1,0)
(23,17,0)
(26,10,0)
(12,13,0)
(5,1,0)
(20,7,0)
(0,28,0)
(10,26,1)
(3,1,1)
(31,4,1)
(2,19,1)
(33,11,1)
(12,13,1)
(10,8,1)
(9,30,1)
(8,12,1)
(35,23,1)
(19,31,1)
(21,33,1)
(36,15,1)
(2,15,1)
(6,24,1)
(12,6,1)
(9,10,1)
(15,37,1)
(4,9,1)
(18,2,1)
(11,30,1)
(24,22,1)
(23,27,1)
(32,36,1)
(27,3,1)
(29,8,1)
(37,39,1)
(18,31,1)
(5,29,1)
(35,1,1)
(7,20,1)
(20,35,1)
(26,7,1)
(1,8,1)
(7,8,1)
(2,8,1)
(22,21,1)
(1,5,1)
(30,32,1)
(27,1,2)
(12,30,2)
(2,15,2)
(29,30,2)
(10,30,2)
(1,30,2)
(24,30,2)
(24,22,2)
(6,24,2)
(5,30,2)
(8,12,2)
(12,6,2)
(12,13,2)
(1,8,2)
(21,30,2)
(23,27,2)
(6,30,2)
(7,30,2)
(20,30,2)
(23,1,2)
(11,30,2)
(8,30,2)
(35,30,2)
(26,30,2)
(19,31,2)
(22,30,2)
(10,8,2)
(3,1,2)
(33,30,2)
(2,31,2)
(7,8,2)
(2,8,2)
-----------------------------------
(0,if(staticFive==5)
(1,data == NULL)
(2,free(data)
(3,1)
(4,5)
(5,NULL)
(6,malloc(100*sizeof(char)
(7,strcpy(data, "A String")
(8,data = (char *)
(9,staticFive)
(10,printLine(data)
(11,data)
(12,(char *)
(13,char *)
(14,if(staticFive==5)
(15,data = NULL)
(16,)
(17,)
(18,RET)
(19,data)
(20,"A String")
(21,char)
(22,sizeof(char)
(23,exit(-1)
(24,100*sizeof(char)
(25,)
(26,data)
(27,-1)
(28,)
(29,data)
(30,staticFive==5)
(31,staticFive==5)
(32,5)
(33,100)
(34,if (data == NULL)
(35,data)
(36,staticFive)
(37,NULL)
(38,data)
(39,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^