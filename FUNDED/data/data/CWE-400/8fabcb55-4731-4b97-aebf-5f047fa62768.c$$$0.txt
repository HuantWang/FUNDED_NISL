-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_15_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
92,93
93,94
93,95
94,95
98,99
98,100
100,101
100,102
100,103
100,104
100,105
100,106
101,102
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,90,91,95,96,97,99,102,103,104,105,109,110,111
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_15_bad(){    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_15_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_15_bad
{    struct _twoIntsStruct * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(54,57,0)
(15,3,0)
(0,29,0)
(53,58,0)
(9,42,0)
(25,29,0)
(28,11,0)
(41,42,0)
(37,5,0)
(2,42,0)
(15,31,0)
(54,18,0)
(24,11,0)
(3,58,0)
(7,58,0)
(52,20,0)
(1,3,0)
(36,1,0)
(52,3,0)
(61,42,0)
(6,28,0)
(60,47,0)
(44,11,0)
(43,15,0)
(50,58,0)
(34,54,0)
(21,3,0)
(11,24,0)
(33,52,0)
(8,4,0)
(32,52,0)
(48,58,0)
(12,58,0)
(59,58,0)
(4,35,0)
(31,15,0)
(26,20,0)
(10,61,0)
(54,34,0)
(29,17,0)
(19,31,0)
(46,21,0)
(21,46,0)
(5,3,0)
(3,21,0)
(13,53,0)
(18,58,0)
(28,6,0)
(30,5,0)
(20,52,0)
(20,48,0)
(34,5,0)
(27,48,0)
(47,58,0)
(49,15,0)
(18,54,0)
(56,17,0)
(24,21,0)
(21,24,0)
(22,17,0)
(5,34,0)
(38,1,0)
(23,3,0)
(11,28,0)
(51,17,0)
(35,4,0)
(31,53,0)
(39,58,0)
(57,54,0)
(55,42,0)
(35,40,0)
(8,1,1)
(54,57,1)
(55,45,1)
(4,8,1)
(53,13,1)
(52,32,1)
(54,34,1)
(44,23,1)
(1,36,1)
(32,33,1)
(11,28,1)
(10,45,1)
(47,60,1)
(34,5,1)
(28,6,1)
(16,2,1)
(26,52,1)
(45,50,1)
(60,14,1)
(20,52,1)
(1,3,1)
(13,31,1)
(31,19,1)
(43,35,1)
(33,53,1)
(18,54,1)
(50,47,1)
(14,29,1)
(30,37,1)
(37,48,1)
(45,59,1)
(28,44,1)
(16,55,1)
(52,3,1)
(2,61,1)
(19,15,1)
(38,3,1)
(5,3,1)
(29,0,1)
(49,43,1)
(15,49,1)
(15,3,1)
(61,10,1)
(27,20,1)
(3,21,1)
(23,14,1)
(59,18,1)
(21,24,1)
(0,25,1)
(5,30,1)
(31,15,1)
(36,38,1)
(20,26,1)
(35,4,1)
(43,1,1)
(24,11,1)
(48,27,1)
(21,46,1)
(23,14,2)
(11,14,2)
(13,14,2)
(52,3,2)
(60,14,2)
(26,14,2)
(1,3,2)
(8,1,2)
(35,4,2)
(15,14,2)
(21,24,2)
(34,14,2)
(21,46,2)
(3,21,2)
(50,14,2)
(4,1,2)
(10,45,2)
(31,15,2)
(54,34,2)
(32,14,2)
(52,14,2)
(33,14,2)
(24,11,2)
(27,14,2)
(34,5,2)
(49,14,2)
(59,14,2)
(36,14,2)
(5,14,2)
(54,14,2)
(2,45,2)
(28,6,2)
(28,14,2)
(38,14,2)
(5,3,2)
(15,3,2)
(3,14,2)
(24,14,2)
(54,57,2)
(37,14,2)
(1,14,2)
(20,52,2)
(44,14,2)
(20,14,2)
(53,14,2)
(43,14,2)
(11,28,2)
(48,14,2)
(21,14,2)
(18,54,2)
(55,45,2)
(47,14,2)
(30,14,2)
(18,14,2)
(19,14,2)
(31,14,2)
(61,45,2)
(35,1,2)
-----------------------------------
(0,NULL)
(1,data == NULL)
(2,break;)
(3,data = (struct _twoIntsStruct *)
(4,-1)
(5,data[0])
(6,struct _twoIntsStruct)
(7,default:)
(8,1)
(9,case 7:)
(10,"Benign, fixed string")
(11,100*sizeof(struct _twoIntsStruct)
(12,case 6:)
(13,0)
(14,6)
(15,data[0])
(16,RET)
(17,)
(18,printStructLine((twoIntsStruct *)
(19,intOne)
(20,data[0].intTwo)
(21,(struct _twoIntsStruct *)
(22,data)
(23,data)
(24,malloc(100*sizeof(struct _twoIntsStruct)
(25,data)
(26,intTwo)
(27,0)
(28,sizeof(struct _twoIntsStruct)
(29,data = NULL)
(30,0)
(31,data[0].intOne)
(32,0)
(33,data)
(34,&data[0])
(35,exit(-1)
(36,NULL)
(37,data)
(38,data)
(39,if (data == NULL)
(40,)
(41,default:)
(42,)
(43,data)
(44,100)
(45,7)
(46,struct _twoIntsStruct *)
(47,printLine("Benign, fixed string")
(48,data[0].intTwo = 0)
(49,0)
(50,break;)
(51,switch(7)
(52,data[0])
(53,data[0].intOne = 0)
(54,(twoIntsStruct *)
(55,break;)
(56,switch(6)
(57,twoIntsStruct *)
(58,)
(59,break;)
(60,"Benign, fixed string")
(61,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^