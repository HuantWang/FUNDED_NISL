-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_03_bad()
{
    if(5==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
-----nextToken-----
2,4,8,9,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109
-----computeFrom-----
7,8
7,9
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
-----guardedBy-----
85,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_03_bad(){    if(5==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_03_bad()
CWE401_Memory_Leak__malloc_realloc_int_03_bad
{    if(5==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(5==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
5==5
5
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(43,52,0)
(53,59,0)
(6,55,0)
(32,17,0)
(13,16,0)
(30,60,0)
(3,28,0)
(1,55,0)
(20,41,0)
(7,13,0)
(34,28,0)
(35,10,0)
(44,28,0)
(15,40,0)
(46,3,0)
(58,47,0)
(60,53,0)
(49,33,0)
(44,14,0)
(38,10,0)
(42,34,0)
(26,41,0)
(16,23,0)
(28,15,0)
(60,17,0)
(26,15,0)
(35,20,0)
(20,28,0)
(50,59,0)
(4,15,0)
(5,15,0)
(8,60,0)
(31,26,0)
(3,9,0)
(60,26,0)
(55,50,0)
(55,26,0)
(48,36,0)
(16,13,0)
(9,3,0)
(45,26,0)
(2,20,0)
(9,15,0)
(0,45,0)
(21,28,0)
(22,17,0)
(33,59,0)
(20,35,0)
(28,44,0)
(41,29,0)
(12,52,0)
(3,17,0)
(41,20,0)
(23,44,0)
(17,15,0)
(23,16,0)
(27,35,0)
(19,34,0)
(48,24,0)
(37,24,0)
(56,50,0)
(24,48,0)
(39,22,0)
(41,26,0)
(10,35,0)
(22,28,0)
(60,50,0)
(33,26,0)
(53,60,0)
(18,3,0)
(51,45,0)
(54,15,0)
(29,41,0)
(25,16,0)
(57,22,0)
(44,23,0)
(14,44,0)
(48,24,1)
(60,26,1)
(60,8,1)
(56,55,1)
(49,53,1)
(11,33,1)
(17,32,1)
(51,0,1)
(13,7,1)
(34,42,1)
(11,52,1)
(8,30,1)
(33,26,1)
(22,28,1)
(3,28,1)
(33,49,1)
(0,26,1)
(31,9,1)
(45,51,1)
(16,13,1)
(37,34,1)
(6,45,1)
(30,50,1)
(22,57,1)
(46,18,1)
(44,14,1)
(20,28,1)
(21,52,1)
(39,34,1)
(1,6,1)
(27,2,1)
(26,41,1)
(23,16,1)
(41,20,1)
(7,25,1)
(32,22,1)
(10,38,1)
(39,48,1)
(24,37,1)
(57,39,1)
(50,56,1)
(60,17,1)
(52,43,1)
(28,44,1)
(55,1,1)
(19,28,1)
(34,28,1)
(44,23,1)
(55,26,1)
(60,50,1)
(2,31,1)
(38,27,1)
(45,26,1)
(11,45,1)
(9,3,1)
(42,19,1)
(3,17,1)
(53,60,1)
(20,35,1)
(18,17,1)
(3,46,1)
(43,12,1)
(41,29,1)
(25,21,1)
(35,10,1)
(56,45,2)
(57,52,2)
(35,52,2)
(44,52,2)
(42,52,2)
(0,52,2)
(60,50,2)
(9,52,2)
(16,13,2)
(44,14,2)
(27,52,2)
(45,26,2)
(24,34,2)
(46,52,2)
(60,45,2)
(23,52,2)
(10,52,2)
(20,28,2)
(28,44,2)
(9,3,2)
(41,29,2)
(38,52,2)
(16,52,2)
(26,41,2)
(17,52,2)
(7,52,2)
(51,52,2)
(34,28,2)
(26,52,2)
(20,52,2)
(8,45,2)
(25,52,2)
(19,52,2)
(34,52,2)
(45,52,2)
(3,17,2)
(55,26,2)
(3,52,2)
(28,52,2)
(44,23,2)
(35,10,2)
(41,20,2)
(20,35,2)
(37,34,2)
(22,28,2)
(32,52,2)
(22,52,2)
(6,45,2)
(49,45,2)
(60,17,2)
(13,52,2)
(53,60,2)
(21,52,2)
(50,45,2)
(2,52,2)
(3,28,2)
(60,26,2)
(53,45,2)
(55,45,2)
(48,24,2)
(41,52,2)
(33,45,2)
(48,34,2)
(31,52,2)
(30,45,2)
(23,16,2)
(1,45,2)
(39,52,2)
(18,52,2)
(33,26,2)
-----------------------------------
(0,data)
(1,0)
(2,data)
(3,data[0])
(4,if (data != NULL)
(5,if (data == NULL)
(6,data)
(7,int)
(8,0)
(9,printIntLine(data[0])
(10,sizeof(int)
(11,RET)
(12,5)
(13,sizeof(int)
(14,int *)
(15,)
(16,100*sizeof(int)
(17,data[0] = 5)
(18,data)
(19,data)
(20,realloc(data, (130000)
(21,data)
(22,data[0])
(23,malloc(100*sizeof(int)
(24,-1)
(25,100)
(26,data = (int *)
(27,130000)
(28,* data = (int *)
(29,int *)
(30,data)
(31,data)
(32,5)
(33,free(data)
(34,data == NULL)
(35,(130000)
(36,)
(37,1)
(38,int)
(39,data)
(40,)
(41,(int *)
(42,NULL)
(43,5)
(44,(int *)
(45,data != NULL)
(46,0)
(47,)
(48,exit(-1)
(49,data)
(50,data[0] = 10)
(51,NULL)
(52,5==5)
(53,printIntLine(data[0])
(54,data)
(55,data[0])
(56,10)
(57,0)
(58,if(5==5)
(59,)
(60,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^