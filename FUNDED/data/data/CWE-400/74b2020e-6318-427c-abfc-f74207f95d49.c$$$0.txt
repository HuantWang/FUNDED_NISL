-----label-----
1
-----code-----
static int
smbfs_smb_trans2find2(struct smbfs_fctx *ctx)
{
	struct smb_t2rq *t2p;
	struct smb_vc *vcp = SSTOVC(ctx->f_ssp);
	struct mbchain *mbp;
	struct mdchain *mdp;
	u_int16_t tw, flags;
	int error;

	if (ctx->f_t2) {
		smb_t2_done(ctx->f_t2);
		ctx->f_t2 = NULL;
	}
	ctx->f_flags &= ~SMBFS_RDD_GOTRNAME;
	flags = 8 | 2;			/* <resume> | <close if EOS> */
	if (ctx->f_flags & SMBFS_RDD_FINDSINGLE) {
		flags |= 1;		/* close search after this request */
		ctx->f_flags |= SMBFS_RDD_NOCLOSE;
	}
	if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {
		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,
		    ctx->f_scred, &t2p);
		if (error)
			return error;
		ctx->f_t2 = t2p;
		mbp = &t2p->t2_tparam;
		mb_init(mbp);
		mb_put_uint16le(mbp, ctx->f_attrmask);
		mb_put_uint16le(mbp, ctx->f_limit);
		mb_put_uint16le(mbp, flags);
		mb_put_uint16le(mbp, ctx->f_infolevel);
		mb_put_uint32le(mbp, 0);
		error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen);
		if (error)
			return error;
	} else	{
		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,
		    ctx->f_scred, &t2p);
		if (error)
			return error;
		ctx->f_t2 = t2p;
		mbp = &t2p->t2_tparam;
		mb_init(mbp);
		mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM);
		mb_put_uint16le(mbp, ctx->f_limit);
		mb_put_uint16le(mbp, ctx->f_infolevel);
		mb_put_uint32le(mbp, 0);		/* resume key */
		mb_put_uint16le(mbp, flags);
		if (ctx->f_rname)
			mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);
		else
			mb_put_uint8(mbp, 0);	/* resume file name */
#if 0
	struct timeval tv;
	tv.tv_sec = 0;
	tv.tv_usec = 200 * 1000;	/* 200ms */
		if (vcp->vc_flags & SMBC_WIN95) {
			/*
			 * some implementations suggests to sleep here
			 * for 200ms, due to the bug in the Win95.
			 * I've didn't notice any problem, but put code
			 * for it.
			 */
			 tsleep(&flags, PVFS, "fix95", tvtohz(&tv));
		}
#endif
	}
	t2p->t2_maxpcount = 5 * 2;
	t2p->t2_maxdcount = vcp->vc_txmax;
	error = smb_t2_request(t2p);
	if (error)
		return error;
	mdp = &t2p->t2_rparam;
	if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {
		if ((error = md_get_uint16(mdp, &ctx->f_Sid)) != 0)
			return error;
		ctx->f_flags &= ~SMBFS_RDD_FINDFIRST;
	}
	if ((error = md_get_uint16le(mdp, &tw)) != 0)
		return error;
	ctx->f_ecnt = tw;
	if ((error = md_get_uint16le(mdp, &tw)) != 0)
		return error;
	if (tw)
		ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE;
	if ((error = md_get_uint16le(mdp, &tw)) != 0)
		return error;
	if ((error = md_get_uint16le(mdp, &tw)) != 0)
		return error;
	if (ctx->f_ecnt == 0)
		return ENOENT;
	ctx->f_rnameofs = tw;
	mdp = &t2p->t2_rdata;

	KASSERT(mdp->md_top != NULL);
	KASSERT(mdp->md_top->m_len != 0);

	ctx->f_eofs = 0;
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
30,31
30,32
31,32
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
49,52
50,51
52,53
54,55
56,57
57,58
57,59
59,60
61,62
61,63
62,63
62,64
63,64
66,67
66,68
67,68
68,69
68,70
69,70
71,72
71,73
72,73
75,76
76,77
76,78
77,78
77,79
78,79
81,82
83,84
84,85
84,86
85,86
85,87
86,87
89,90
90,91
92,93
93,94
93,95
94,95
96,97
96,98
99,100
99,101
100,101
100,102
101,102
101,103
102,103
105,106
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
121,123
121,124
122,123
122,124
123,124
123,125
124,125
127,128
129,130
129,131
129,132
129,133
129,134
129,135
129,136
129,137
129,138
129,139
129,140
129,141
130,131
131,132
131,133
132,133
134,135
134,136
134,137
134,138
134,139
135,136
137,138
137,139
138,139
140,141
140,142
141,142
144,145
146,147
146,148
147,148
150,151
151,152
153,154
153,155
154,155
156,157
157,158
159,160
160,161
160,162
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
171,172
172,173
172,174
173,174
176,177
177,178
177,179
178,179
180,181
182,183
183,184
183,185
183,186
184,185
186,187
188,189
188,190
189,190
192,193
193,194
193,195
193,196
194,195
196,197
198,199
198,200
199,200
202,203
203,204
203,205
203,206
204,205
206,207
208,209
210,211
211,212
211,213
211,214
212,213
214,215
216,217
216,218
217,218
220,221
221,222
221,223
221,224
222,223
224,225
227,228
228,229
228,230
229,230
231,232
231,233
231,234
231,235
231,236
231,237
232,233
234,235
236,237
238,239
238,240
239,240
242,243
242,244
243,244
246,247
246,248
247,248
250,251
250,252
251,252
253,254
254,255
256,257
256,258
256,259
256,260
256,261
256,262
256,263
256,264
256,265
256,266
256,267
257,258
258,259
258,260
259,260
261,262
261,263
261,264
261,265
261,266
262,263
264,265
264,266
265,266
267,268
267,269
268,269
271,272
273,274
273,275
274,275
277,278
278,279
280,281
280,282
281,282
283,284
284,285
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
295,296
295,297
296,297
298,299
299,300
299,301
300,301
303,304
304,305
304,306
305,306
307,308
309,310
310,311
310,312
310,313
310,314
310,315
311,312
313,314
315,316
315,317
316,317
317,318
319,320
319,321
320,321
324,325
326,327
327,328
327,329
327,330
328,329
330,331
332,333
332,334
333,334
336,337
337,338
337,339
337,340
338,339
340,341
342,343
342,344
343,344
346,347
347,348
347,349
347,350
348,349
350,351
353,354
354,355
354,356
354,357
355,356
357,358
359,360
361,362
361,363
361,364
362,363
362,364
363,364
366,367
367,368
367,369
367,370
367,371
367,372
368,369
370,371
372,373
372,374
373,374
376,377
376,378
377,378
377,379
378,379
380,381
380,382
381,382
385,386
387,388
388,389
388,390
388,391
389,390
391,392
394,395
395,396
395,397
396,397
396,398
397,398
400,401
400,402
403,404
404,405
404,406
405,406
405,407
406,407
409,410
409,411
410,411
413,414
414,415
414,416
415,416
417,418
417,419
418,419
420,421
422,423
422,424
423,424
425,426
426,427
428,429
429,430
429,431
430,431
432,433
433,434
433,435
434,435
437,438
437,439
438,439
438,440
439,440
439,441
440,441
443,444
445,446
445,447
446,447
446,448
447,448
447,449
448,449
449,450
449,451
450,451
452,453
452,454
452,455
453,454
455,456
457,458
458,459
458,460
459,460
463,464
464,465
466,467
467,468
467,469
468,469
468,470
469,470
472,473
473,474
475,476
475,477
476,477
476,478
477,478
478,479
478,480
479,480
481,482
481,483
481,484
482,483
484,485
486,487
487,488
490,491
491,492
493,494
494,495
494,496
495,496
495,497
496,497
499,500
501,502
501,503
502,503
502,504
503,504
504,505
504,506
505,506
507,508
507,509
507,510
508,509
510,511
512,513
513,514
516,517
517,518
519,520
519,521
520,521
522,523
523,524
523,525
524,525
524,526
525,526
528,529
528,530
529,530
531,532
533,534
533,535
534,535
534,536
535,536
536,537
536,538
537,538
539,540
539,541
539,542
540,541
542,543
544,545
545,546
548,549
549,550
551,552
551,553
552,553
552,554
553,554
554,555
554,556
555,556
557,558
557,559
557,560
558,559
560,561
562,563
563,564
566,567
567,568
569,570
569,571
570,571
570,572
571,572
571,573
572,573
576,577
577,578
579,580
580,581
580,582
581,582
581,583
582,583
585,586
587,588
588,589
588,590
589,590
591,592
592,593
592,594
593,594
596,597
597,598
597,599
598,599
600,601
600,602
601,602
601,603
602,603
605,606
607,608
608,609
608,610
609,610
611,612
611,613
612,613
612,614
613,614
613,615
614,615
619,620
620,621
620,622
621,622
621,623
622,623
626,627
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,29,32,33,37,39,40,44,46,47,51,53,55,58,60,64,65,70,73,74,79,80,82,87,88,91,95,97,98,103,104,106,111,112,117,118,120,125,126,128,133,136,139,142,143,145,148,149,152,155,158,163,164,166,170,174,175,179,181,185,187,190,191,195,197,200,201,205,207,209,213,215,218,219,223,225,226,230,233,235,237,240,241,244,245,248,249,252,255,260,263,266,269,270,272,275,276,279,282,285,290,291,293,297,301,302,306,308,312,314,318,321,322,323,325,329,331,334,335,339,341,344,345,349,351,352,356,358,360,364,365,369,371,374,375,379,382,383,384,386,390,392,393,398,399,401,402,407,408,411,412,416,419,421,424,427,431,435,436,441,442,444,451,454,456,460,461,462,465,470,471,474,480,483,485,488,489,492,497,498,500,506,509,511,514,515,518,521,526,527,530,532,538,541,543,546,547,550,556,559,561,564,565,568,573,574,575,578,583,584,586,590,594,595,599,603,604,606,610,615,616,617,618,623,624,625,627
-----computeFrom-----
76,77
76,78
84,85
84,86
93,94
93,95
96,97
96,98
100,101
100,102
109,110
109,111
114,115
114,116
122,123
122,124
131,132
131,133
160,161
160,162
168,169
168,170
228,229
228,230
258,259
258,260
287,288
287,289
295,296
295,297
315,316
315,317
376,377
376,378
395,396
395,397
400,401
400,402
404,405
404,406
414,415
414,416
429,430
429,431
438,439
438,440
447,448
447,449
449,450
449,451
467,468
467,469
476,477
476,478
478,479
478,480
494,495
494,496
502,503
502,504
504,505
504,506
523,524
523,525
528,529
528,530
534,535
534,536
536,537
536,538
552,553
552,554
554,555
554,556
570,571
570,572
580,581
580,582
588,589
588,590
600,601
600,602
611,612
611,613
620,621
620,622
-----guardedBy-----
103,117
104,118
125,248
441,470
442,471
444,474
451,465
480,492
506,518
538,550
556,568
-----guardedByNegation-----
125,382
-----lastLexicalUse-----
125,382
-----jump-----
125,382
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static intsmbfs_smb_trans2find2(struct smbfs_fctx *ctx){	struct smb_t2rq *t2p;	struct smb_vc *vcp = SSTOVC(ctx->f_ssp);	struct mbchain *mbp;	struct mdchain *mdp;	u_int16_t tw, flags;	int error;	if (ctx->f_t2) {		smb_t2_done(ctx->f_t2);		ctx->f_t2 = NULL;	}	ctx->f_flags &= ~SMBFS_RDD_GOTRNAME;	flags = 8 | 2;			/* <resume> | <close if EOS> */	if (ctx->f_flags & SMBFS_RDD_FINDSINGLE) {		flags |= 1;		/* close search after this request */		ctx->f_flags |= SMBFS_RDD_NOCLOSE;	}	if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_uint16le(mbp, ctx->f_attrmask);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, flags);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen);		if (error)			return error;	} else	{		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		/* resume key */		mb_put_uint16le(mbp, flags);		if (ctx->f_rname)			mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);		else			mb_put_uint8(mbp, 0);	/* resume file name */#if 0	struct timeval tv;	tv.tv_sec = 0;	tv.tv_usec = 200 * 1000;	/* 200ms */		if (vcp->vc_flags & SMBC_WIN95) {			/*			 * some implementations suggests to sleep here			 * for 200ms, due to the bug in the Win95.			 * I've didn't notice any problem, but put code			 * for it.			 */			 tsleep(&flags, PVFS, "fix95", tvtohz(&tv));		}#endif	}	t2p->t2_maxpcount = 5 * 2;	t2p->t2_maxdcount = vcp->vc_txmax;	error = smb_t2_request(t2p);	if (error)		return error;	mdp = &t2p->t2_rparam;	if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {		if ((error = md_get_uint16(mdp, &ctx->f_Sid)) != 0)			return error;		ctx->f_flags &= ~SMBFS_RDD_FINDFIRST;	}	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	ctx->f_ecnt = tw;	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	if (tw)		ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE;	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	if (ctx->f_ecnt == 0)		return ENOENT;	ctx->f_rnameofs = tw;	mdp = &t2p->t2_rdata;	KASSERT(mdp->md_top != NULL);	KASSERT(mdp->md_top->m_len != 0);	ctx->f_eofs = 0;	return 0;}
static int
smbfs_smb_trans2find2(struct smbfs_fctx *ctx)
smbfs_smb_trans2find2
struct smbfs_fctx *ctx
struct smbfs_fctx
smbfs_fctx
*ctx
*
ctx
{	struct smb_t2rq *t2p;	struct smb_vc *vcp = SSTOVC(ctx->f_ssp);	struct mbchain *mbp;	struct mdchain *mdp;	u_int16_t tw, flags;	int error;	if (ctx->f_t2) {		smb_t2_done(ctx->f_t2);		ctx->f_t2 = NULL;	}	ctx->f_flags &= ~SMBFS_RDD_GOTRNAME;	flags = 8 | 2;			/* <resume> | <close if EOS> */	if (ctx->f_flags & SMBFS_RDD_FINDSINGLE) {		flags |= 1;		/* close search after this request */		ctx->f_flags |= SMBFS_RDD_NOCLOSE;	}	if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_uint16le(mbp, ctx->f_attrmask);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, flags);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen);		if (error)			return error;	} else	{		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		/* resume key */		mb_put_uint16le(mbp, flags);		if (ctx->f_rname)			mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);		else			mb_put_uint8(mbp, 0);	/* resume file name */#if 0	struct timeval tv;	tv.tv_sec = 0;	tv.tv_usec = 200 * 1000;	/* 200ms */		if (vcp->vc_flags & SMBC_WIN95) {			/*			 * some implementations suggests to sleep here			 * for 200ms, due to the bug in the Win95.			 * I've didn't notice any problem, but put code			 * for it.			 */			 tsleep(&flags, PVFS, "fix95", tvtohz(&tv));		}#endif	}	t2p->t2_maxpcount = 5 * 2;	t2p->t2_maxdcount = vcp->vc_txmax;	error = smb_t2_request(t2p);	if (error)		return error;	mdp = &t2p->t2_rparam;	if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {		if ((error = md_get_uint16(mdp, &ctx->f_Sid)) != 0)			return error;		ctx->f_flags &= ~SMBFS_RDD_FINDFIRST;	}	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	ctx->f_ecnt = tw;	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	if (tw)		ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE;	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;	if (ctx->f_ecnt == 0)		return ENOENT;	ctx->f_rnameofs = tw;	mdp = &t2p->t2_rdata;	KASSERT(mdp->md_top != NULL);	KASSERT(mdp->md_top->m_len != 0);	ctx->f_eofs = 0;	return 0;}
struct smb_t2rq *t2p;
struct smb_t2rq *t2p;
struct smb_t2rq
smb_t2rq
*t2p
*
t2p
struct smb_vc *vcp = SSTOVC(ctx->f_ssp);
struct smb_vc *vcp = SSTOVC(ctx->f_ssp);
struct smb_vc
smb_vc
*vcp = SSTOVC(ctx->f_ssp)
*
vcp
= SSTOVC(ctx->f_ssp)
SSTOVC(ctx->f_ssp)
SSTOVC
SSTOVC
ctx->f_ssp
ctx
ctx
f_ssp
struct mbchain *mbp;
struct mbchain *mbp;
struct mbchain
mbchain
*mbp
*
mbp
struct mdchain *mdp;
struct mdchain *mdp;
struct mdchain
mdchain
*mdp
*
mdp
u_int16_t tw, flags;
u_int16_t tw, flags;
u_int16_t
u_int16_t
tw
tw
flags
flags
int error;
int error;
int
error
error
if (ctx->f_t2) {		smb_t2_done(ctx->f_t2);		ctx->f_t2 = NULL;	}
ctx->f_t2
ctx
ctx
f_t2
{		smb_t2_done(ctx->f_t2);		ctx->f_t2 = NULL;	}
smb_t2_done(ctx->f_t2);
smb_t2_done(ctx->f_t2)
smb_t2_done
smb_t2_done
ctx->f_t2
ctx
ctx
f_t2
ctx->f_t2 = NULL;
ctx->f_t2 = NULL
ctx->f_t2
ctx
ctx
f_t2
NULL
NULL
ctx->f_flags &= ~SMBFS_RDD_GOTRNAME;
ctx->f_flags &= ~SMBFS_RDD_GOTRNAME
ctx->f_flags
ctx
ctx
f_flags
~SMBFS_RDD_GOTRNAME
SMBFS_RDD_GOTRNAME
SMBFS_RDD_GOTRNAME
flags = 8 | 2;
flags = 8 | 2
flags
flags
8 | 2
8
2
if (ctx->f_flags & SMBFS_RDD_FINDSINGLE) {		flags |= 1;		/* close search after this request */		ctx->f_flags |= SMBFS_RDD_NOCLOSE;	}
ctx->f_flags & SMBFS_RDD_FINDSINGLE
ctx->f_flags
ctx
ctx
f_flags
SMBFS_RDD_FINDSINGLE
SMBFS_RDD_FINDSINGLE
{		flags |= 1;		/* close search after this request */		ctx->f_flags |= SMBFS_RDD_NOCLOSE;	}
flags |= 1;
flags |= 1
flags
flags
1
ctx->f_flags |= SMBFS_RDD_NOCLOSE;
ctx->f_flags |= SMBFS_RDD_NOCLOSE
ctx->f_flags
ctx
ctx
f_flags
SMBFS_RDD_NOCLOSE
SMBFS_RDD_NOCLOSE
if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_uint16le(mbp, ctx->f_attrmask);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, flags);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen);		if (error)			return error;	} else	{		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		/* resume key */		mb_put_uint16le(mbp, flags);		if (ctx->f_rname)			mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);		else			mb_put_uint8(mbp, 0);	/* resume file name */#if 0	struct timeval tv;	tv.tv_sec = 0;	tv.tv_usec = 200 * 1000;	/* 200ms */		if (vcp->vc_flags & SMBC_WIN95) {			/*			 * some implementations suggests to sleep here			 * for 200ms, due to the bug in the Win95.			 * I've didn't notice any problem, but put code			 * for it.			 */			 tsleep(&flags, PVFS, "fix95", tvtohz(&tv));		}#endif	}
ctx->f_flags & SMBFS_RDD_FINDFIRST
ctx->f_flags
ctx
ctx
f_flags
SMBFS_RDD_FINDFIRST
SMBFS_RDD_FINDFIRST
{		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_uint16le(mbp, ctx->f_attrmask);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, flags);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen);		if (error)			return error;	}
error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p);
error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p)
error
error
smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_FIRST2,		    ctx->f_scred, &t2p)
smb_t2_alloc
smb_t2_alloc
SSTOCP(ctx->f_ssp)
SSTOCP
SSTOCP
ctx->f_ssp
ctx
ctx
f_ssp
SMB_TRANS2_FIND_FIRST2
SMB_TRANS2_FIND_FIRST2
ctx->f_scred
ctx
ctx
f_scred
&t2p
t2p
t2p
if (error)			return error;
error
error
return error;
error
error
ctx->f_t2 = t2p;
ctx->f_t2 = t2p
ctx->f_t2
ctx
ctx
f_t2
t2p
t2p
mbp = &t2p->t2_tparam;
mbp = &t2p->t2_tparam
mbp
mbp
&t2p->t2_tparam
t2p->t2_tparam
t2p
t2p
t2_tparam
mb_init(mbp);
mb_init(mbp)
mb_init
mb_init
mbp
mbp
mb_put_uint16le(mbp, ctx->f_attrmask);
mb_put_uint16le(mbp, ctx->f_attrmask)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
ctx->f_attrmask
ctx
ctx
f_attrmask
mb_put_uint16le(mbp, ctx->f_limit);
mb_put_uint16le(mbp, ctx->f_limit)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
ctx->f_limit
ctx
ctx
f_limit
mb_put_uint16le(mbp, flags);
mb_put_uint16le(mbp, flags)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
flags
flags
mb_put_uint16le(mbp, ctx->f_infolevel);
mb_put_uint16le(mbp, ctx->f_infolevel)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
ctx->f_infolevel
ctx
ctx
f_infolevel
mb_put_uint32le(mbp, 0);
mb_put_uint32le(mbp, 0)
mb_put_uint32le
mb_put_uint32le
mbp
mbp
0
error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen);
error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen)
error
error
smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen)
smbfs_fullpath
smbfs_fullpath
mbp
mbp
vcp
vcp
ctx->f_dnp
ctx
ctx
f_dnp
ctx->f_wildcard
ctx
ctx
f_wildcard
ctx->f_wclen
ctx
ctx
f_wclen
if (error)			return error;
error
error
return error;
error
error
{		error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p);		if (error)			return error;		ctx->f_t2 = t2p;		mbp = &t2p->t2_tparam;		mb_init(mbp);		mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM);		mb_put_uint16le(mbp, ctx->f_limit);		mb_put_uint16le(mbp, ctx->f_infolevel);		mb_put_uint32le(mbp, 0);		/* resume key */		mb_put_uint16le(mbp, flags);		if (ctx->f_rname)			mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);		else			mb_put_uint8(mbp, 0);	/* resume file name */#if 0	struct timeval tv;	tv.tv_sec = 0;	tv.tv_usec = 200 * 1000;	/* 200ms */		if (vcp->vc_flags & SMBC_WIN95) {			/*			 * some implementations suggests to sleep here			 * for 200ms, due to the bug in the Win95.			 * I've didn't notice any problem, but put code			 * for it.			 */			 tsleep(&flags, PVFS, "fix95", tvtohz(&tv));		}#endif	}
error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p);
error = smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p)
error
error
smb_t2_alloc(SSTOCP(ctx->f_ssp), SMB_TRANS2_FIND_NEXT2,		    ctx->f_scred, &t2p)
smb_t2_alloc
smb_t2_alloc
SSTOCP(ctx->f_ssp)
SSTOCP
SSTOCP
ctx->f_ssp
ctx
ctx
f_ssp
SMB_TRANS2_FIND_NEXT2
SMB_TRANS2_FIND_NEXT2
ctx->f_scred
ctx
ctx
f_scred
&t2p
t2p
t2p
if (error)			return error;
error
error
return error;
error
error
ctx->f_t2 = t2p;
ctx->f_t2 = t2p
ctx->f_t2
ctx
ctx
f_t2
t2p
t2p
mbp = &t2p->t2_tparam;
mbp = &t2p->t2_tparam
mbp
mbp
&t2p->t2_tparam
t2p->t2_tparam
t2p
t2p
t2_tparam
mb_init(mbp);
mb_init(mbp)
mb_init
mb_init
mbp
mbp
mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM);
mb_put_mem(mbp, (caddr_t)&ctx->f_Sid, 2, MB_MSYSTEM)
mb_put_mem
mb_put_mem
mbp
mbp
(caddr_t)&ctx->f_Sid
(caddr_t)
caddr_t
caddr_t
ctx->f_Sid
ctx
ctx
f_Sid
2
MB_MSYSTEM
MB_MSYSTEM
mb_put_uint16le(mbp, ctx->f_limit);
mb_put_uint16le(mbp, ctx->f_limit)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
ctx->f_limit
ctx
ctx
f_limit
mb_put_uint16le(mbp, ctx->f_infolevel);
mb_put_uint16le(mbp, ctx->f_infolevel)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
ctx->f_infolevel
ctx
ctx
f_infolevel
mb_put_uint32le(mbp, 0);
mb_put_uint32le(mbp, 0)
mb_put_uint32le
mb_put_uint32le
mbp
mbp
0
mb_put_uint16le(mbp, flags);
mb_put_uint16le(mbp, flags)
mb_put_uint16le
mb_put_uint16le
mbp
mbp
flags
flags
if (ctx->f_rname)			mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);		else			mb_put_uint8(mbp, 0);
ctx->f_rname
ctx
ctx
f_rname
mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM);
mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname) + 1, MB_MSYSTEM)
mb_put_mem
mb_put_mem
mbp
mbp
ctx->f_rname
ctx
ctx
f_rname
strlen(ctx->f_rname) + 1
strlen(ctx->f_rname)
strlen
strlen
ctx->f_rname
ctx
ctx
f_rname
1
MB_MSYSTEM
MB_MSYSTEM
mb_put_uint8(mbp, 0);
mb_put_uint8(mbp, 0)
mb_put_uint8
mb_put_uint8
mbp
mbp
0
t2p->t2_maxpcount = 5 * 2;
t2p->t2_maxpcount = 5 * 2
t2p->t2_maxpcount
t2p
t2p
t2_maxpcount
5 * 2
5
2
t2p->t2_maxdcount = vcp->vc_txmax;
t2p->t2_maxdcount = vcp->vc_txmax
t2p->t2_maxdcount
t2p
t2p
t2_maxdcount
vcp->vc_txmax
vcp
vcp
vc_txmax
error = smb_t2_request(t2p);
error = smb_t2_request(t2p)
error
error
smb_t2_request(t2p)
smb_t2_request
smb_t2_request
t2p
t2p
if (error)		return error;
error
error
return error;
error
error
mdp = &t2p->t2_rparam;
mdp = &t2p->t2_rparam
mdp
mdp
&t2p->t2_rparam
t2p->t2_rparam
t2p
t2p
t2_rparam
if (ctx->f_flags & SMBFS_RDD_FINDFIRST) {		if ((error = md_get_uint16(mdp, &ctx->f_Sid)) != 0)			return error;		ctx->f_flags &= ~SMBFS_RDD_FINDFIRST;	}
ctx->f_flags & SMBFS_RDD_FINDFIRST
ctx->f_flags
ctx
ctx
f_flags
SMBFS_RDD_FINDFIRST
SMBFS_RDD_FINDFIRST
{		if ((error = md_get_uint16(mdp, &ctx->f_Sid)) != 0)			return error;		ctx->f_flags &= ~SMBFS_RDD_FINDFIRST;	}
if ((error = md_get_uint16(mdp, &ctx->f_Sid)) != 0)			return error;
(error = md_get_uint16(mdp, &ctx->f_Sid)) != 0
(error = md_get_uint16(mdp, &ctx->f_Sid))
error = md_get_uint16(mdp, &ctx->f_Sid)
error
error
md_get_uint16(mdp, &ctx->f_Sid)
md_get_uint16
md_get_uint16
mdp
mdp
&ctx->f_Sid
ctx->f_Sid
ctx
ctx
f_Sid
0
return error;
error
error
ctx->f_flags &= ~SMBFS_RDD_FINDFIRST;
ctx->f_flags &= ~SMBFS_RDD_FINDFIRST
ctx->f_flags
ctx
ctx
f_flags
~SMBFS_RDD_FINDFIRST
SMBFS_RDD_FINDFIRST
SMBFS_RDD_FINDFIRST
if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;
(error = md_get_uint16le(mdp, &tw)) != 0
(error = md_get_uint16le(mdp, &tw))
error = md_get_uint16le(mdp, &tw)
error
error
md_get_uint16le(mdp, &tw)
md_get_uint16le
md_get_uint16le
mdp
mdp
&tw
tw
tw
0
return error;
error
error
ctx->f_ecnt = tw;
ctx->f_ecnt = tw
ctx->f_ecnt
ctx
ctx
f_ecnt
tw
tw
if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;
(error = md_get_uint16le(mdp, &tw)) != 0
(error = md_get_uint16le(mdp, &tw))
error = md_get_uint16le(mdp, &tw)
error
error
md_get_uint16le(mdp, &tw)
md_get_uint16le
md_get_uint16le
mdp
mdp
&tw
tw
tw
0
return error;
error
error
if (tw)		ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE;
tw
tw
ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE;
ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE
ctx->f_flags
ctx
ctx
f_flags
SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE
SMBFS_RDD_EOF
SMBFS_RDD_EOF
SMBFS_RDD_NOCLOSE
SMBFS_RDD_NOCLOSE
if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;
(error = md_get_uint16le(mdp, &tw)) != 0
(error = md_get_uint16le(mdp, &tw))
error = md_get_uint16le(mdp, &tw)
error
error
md_get_uint16le(mdp, &tw)
md_get_uint16le
md_get_uint16le
mdp
mdp
&tw
tw
tw
0
return error;
error
error
if ((error = md_get_uint16le(mdp, &tw)) != 0)		return error;
(error = md_get_uint16le(mdp, &tw)) != 0
(error = md_get_uint16le(mdp, &tw))
error = md_get_uint16le(mdp, &tw)
error
error
md_get_uint16le(mdp, &tw)
md_get_uint16le
md_get_uint16le
mdp
mdp
&tw
tw
tw
0
return error;
error
error
if (ctx->f_ecnt == 0)		return ENOENT;
ctx->f_ecnt == 0
ctx->f_ecnt
ctx
ctx
f_ecnt
0
return ENOENT;
ENOENT
ENOENT
ctx->f_rnameofs = tw;
ctx->f_rnameofs = tw
ctx->f_rnameofs
ctx
ctx
f_rnameofs
tw
tw
mdp = &t2p->t2_rdata;
mdp = &t2p->t2_rdata
mdp
mdp
&t2p->t2_rdata
t2p->t2_rdata
t2p
t2p
t2_rdata
KASSERT(mdp->md_top != NULL);
KASSERT(mdp->md_top != NULL)
KASSERT
KASSERT
mdp->md_top != NULL
mdp->md_top
mdp
mdp
md_top
NULL
NULL
KASSERT(mdp->md_top->m_len != 0);
KASSERT(mdp->md_top->m_len != 0)
KASSERT
KASSERT
mdp->md_top->m_len != 0
mdp->md_top->m_len
mdp->md_top
mdp
mdp
md_top
m_len
0
ctx->f_eofs = 0;
ctx->f_eofs = 0
ctx->f_eofs
ctx
ctx
f_eofs
0
return 0;
0
-----joern-----
(48,310,0)
(299,296,0)
(109,296,0)
(281,184,0)
(225,28,0)
(133,39,0)
(302,296,0)
(73,110,0)
(229,354,0)
(333,223,0)
(61,202,0)
(258,69,0)
(236,168,0)
(169,349,0)
(294,15,0)
(78,39,0)
(241,380,0)
(161,15,0)
(122,236,0)
(173,260,0)
(198,346,0)
(273,91,0)
(342,80,0)
(92,330,0)
(308,380,0)
(285,154,0)
(348,270,0)
(1,380,0)
(353,144,0)
(159,380,0)
(292,221,0)
(363,16,0)
(281,101,0)
(238,1,0)
(173,223,0)
(242,341,0)
(277,184,0)
(134,307,0)
(7,378,0)
(161,118,0)
(377,205,0)
(61,380,0)
(153,39,0)
(63,111,0)
(327,214,0)
(230,286,0)
(281,56,0)
(141,42,0)
(28,287,0)
(86,200,0)
(125,221,0)
(239,225,0)
(158,159,0)
(270,203,0)
(15,380,0)
(80,342,0)
(362,39,0)
(351,376,0)
(194,1,0)
(290,380,0)
(157,307,0)
(315,39,0)
(296,243,0)
(71,277,0)
(251,323,0)
(253,38,0)
(323,101,0)
(252,267,0)
(249,277,0)
(75,344,0)
(345,119,0)
(364,39,0)
(150,281,0)
(50,223,0)
(65,11,0)
(56,170,0)
(139,278,0)
(257,11,0)
(6,371,0)
(148,205,0)
(104,110,0)
(203,101,0)
(222,223,0)
(169,152,0)
(297,368,0)
(165,377,0)
(317,281,0)
(112,39,0)
(148,38,0)
(106,236,0)
(13,130,0)
(42,278,0)
(62,260,0)
(116,351,0)
(135,382,0)
(281,321,0)
(25,350,0)
(295,136,0)
(355,120,0)
(18,39,0)
(14,106,0)
(169,90,0)
(308,17,0)
(67,255,0)
(132,39,0)
(305,290,0)
(128,102,0)
(173,353,0)
(204,124,0)
(131,188,0)
(291,308,0)
(167,370,0)
(258,354,0)
(123,39,0)
(225,260,0)
(321,39,0)
(81,376,0)
(275,101,0)
(160,350,0)
(54,380,0)
(313,380,0)
(259,255,0)
(15,161,0)
(104,341,0)
(181,313,0)
(333,308,0)
(269,324,0)
(176,251,0)
(262,269,0)
(339,69,0)
(324,56,0)
(87,56,0)
(351,110,0)
(43,44,0)
(304,376,0)
(264,319,0)
(91,341,0)
(126,354,0)
(372,102,0)
(21,184,0)
(300,361,0)
(341,104,0)
(333,11,0)
(38,366,0)
(118,103,0)
(140,175,0)
(277,101,0)
(116,241,0)
(205,148,0)
(338,39,0)
(32,380,0)
(296,109,0)
(84,335,0)
(284,313,0)
(268,63,0)
(217,201,0)
(383,341,0)
(272,366,0)
(164,240,0)
(44,110,0)
(334,350,0)
(106,350,0)
(293,104,0)
(237,32,0)
(228,299,0)
(20,344,0)
(8,20,0)
(124,240,0)
(180,152,0)
(310,77,0)
(318,233,0)
(269,234,0)
(2,111,0)
(309,357,0)
(168,154,0)
(329,241,0)
(4,251,0)
(231,90,0)
(243,296,0)
(275,255,0)
(226,202,0)
(41,39,0)
(79,163,0)
(374,63,0)
(155,149,0)
(288,39,0)
(333,353,0)
(29,41,0)
(225,126,0)
(102,350,0)
(173,61,0)
(312,112,0)
(160,236,0)
(149,309,0)
(0,157,0)
(33,296,0)
(325,157,0)
(98,1,0)
(169,45,0)
(246,127,0)
(286,230,0)
(103,118,0)
(371,16,0)
(109,380,0)
(163,342,0)
(278,42,0)
(235,350,0)
(346,198,0)
(169,201,0)
(264,110,0)
(225,11,0)
(72,296,0)
(299,184,0)
(225,223,0)
(173,39,0)
(247,367,0)
(258,380,0)
(263,160,0)
(367,380,0)
(201,179,0)
(183,148,0)
(224,310,0)
(110,39,0)
(385,200,0)
(270,380,0)
(174,267,0)
(3,86,0)
(172,39,0)
(357,39,0)
(333,28,0)
(88,353,0)
(36,39,0)
(232,109,0)
(197,333,0)
(346,55,0)
(114,61,0)
(324,321,0)
(22,367,0)
(173,11,0)
(323,251,0)
(32,237,0)
(171,366,0)
(248,258,0)
(111,39,0)
(264,327,0)
(203,184,0)
(301,283,0)
(107,309,0)
(296,299,0)
(186,81,0)
(182,54,0)
(278,284,0)
(108,55,0)
(333,2,0)
(218,214,0)
(321,368,0)
(38,148,0)
(255,275,0)
(58,79,0)
(131,112,0)
(351,116,0)
(45,299,0)
(349,327,0)
(34,270,0)
(205,377,0)
(74,342,0)
(89,371,0)
(86,44,0)
(173,239,0)
(238,236,0)
(100,376,0)
(178,39,0)
(173,54,0)
(5,102,0)
(105,239,0)
(220,39,0)
(33,380,0)
(261,108,0)
(384,243,0)
(352,361,0)
(130,157,0)
(330,83,0)
(191,198,0)
(342,163,0)
(113,3,0)
(51,264,0)
(57,28,0)
(210,240,0)
(193,28,0)
(115,307,0)
(376,304,0)
(163,175,0)
(344,20,0)
(274,286,0)
(126,380,0)
(287,283,0)
(169,91,0)
(26,61,0)
(292,149,0)
(122,350,0)
(307,157,0)
(333,126,0)
(378,362,0)
(99,2,0)
(333,61,0)
(342,110,0)
(240,124,0)
(173,126,0)
(168,236,0)
(177,258,0)
(162,104,0)
(35,39,0)
(1,238,0)
(336,39,0)
(341,383,0)
(102,236,0)
(136,303,0)
(179,157,0)
(381,101,0)
(244,120,0)
(208,313,0)
(106,56,0)
(296,33,0)
(118,161,0)
(310,380,0)
(70,106,0)
(352,202,0)
(311,383,0)
(169,3,0)
(20,380,0)
(119,278,0)
(16,178,0)
(365,33,0)
(154,168,0)
(225,2,0)
(30,126,0)
(254,327,0)
(16,371,0)
(344,184,0)
(227,33,0)
(37,269,0)
(166,267,0)
(306,126,0)
(296,112,0)
(117,159,0)
(56,321,0)
(143,283,0)
(149,292,0)
(323,184,0)
(283,287,0)
(129,334,0)
(221,39,0)
(104,162,0)
(245,15,0)
(243,380,0)
(366,380,0)
(196,39,0)
(97,350,0)
(200,86,0)
(376,351,0)
(279,77,0)
(367,127,0)
(157,325,0)
(233,225,0)
(358,120,0)
(41,9,0)
(157,179,0)
(94,122,0)
(280,109,0)
(178,16,0)
(230,269,0)
(175,163,0)
(356,39,0)
(239,380,0)
(238,350,0)
(42,184,0)
(369,39,0)
(319,264,0)
(373,173,0)
(112,83,0)
(173,378,0)
(314,355,0)
(206,237,0)
(375,304,0)
(241,116,0)
(187,162,0)
(260,380,0)
(214,327,0)
(59,184,0)
(240,112,0)
(44,138,0)
(147,39,0)
(24,144,0)
(64,138,0)
(212,238,0)
(96,154,0)
(93,377,0)
(31,17,0)
(276,23,0)
(179,350,0)
(202,39,0)
(192,9,0)
(359,32,0)
(173,2,0)
(278,159,0)
(188,131,0)
(355,350,0)
(266,378,0)
(101,184,0)
(251,380,0)
(49,38,0)
(303,221,0)
(331,330,0)
(185,80,0)
(287,350,0)
(313,284,0)
(328,39,0)
(157,130,0)
(269,230,0)
(367,354,0)
(357,309,0)
(17,184,0)
(260,108,0)
(101,275,0)
(330,380,0)
(289,122,0)
(190,335,0)
(352,380,0)
(54,35,0)
(378,380,0)
(333,239,0)
(127,367,0)
(38,236,0)
(370,325,0)
(332,362,0)
(83,330,0)
(316,308,0)
(120,355,0)
(169,173,0)
(146,56,0)
(278,119,0)
(195,292,0)
(68,368,0)
(333,260,0)
(138,44,0)
(199,18,0)
(296,101,0)
(169,333,0)
(173,28,0)
(225,233,0)
(324,269,0)
(213,349,0)
(366,38,0)
(355,236,0)
(361,352,0)
(19,370,0)
(18,360,0)
(152,18,0)
(137,54,0)
(32,354,0)
(11,188,0)
(188,39,0)
(343,233,0)
(85,131,0)
(189,243,0)
(198,380,0)
(340,236,0)
(151,45,0)
(66,20,0)
(298,290,0)
(110,166,0)
(52,131,0)
(166,110,0)
(207,101,0)
(309,149,0)
(145,239,0)
(347,350,0)
(344,101,0)
(221,303,0)
(250,260,0)
(203,270,0)
(307,380,0)
(144,350,0)
(377,380,0)
(10,352,0)
(69,258,0)
(159,278,0)
(322,198,0)
(368,321,0)
(225,308,0)
(326,35,0)
(215,321,0)
(216,351,0)
(118,102,0)
(370,380,0)
(83,112,0)
(219,360,0)
(211,381,0)
(120,380,0)
(82,352,0)
(40,323,0)
(60,324,0)
(327,264,0)
(360,18,0)
(173,308,0)
(282,32,0)
(335,380,0)
(69,23,0)
(325,370,0)
(111,63,0)
(169,79,0)
(223,334,0)
(382,236,0)
(265,136,0)
(77,310,0)
(354,170,0)
(90,42,0)
(225,61,0)
(156,163,0)
(284,278,0)
(381,184,0)
(354,260,0)
(46,353,0)
(267,166,0)
(47,292,0)
(225,353,0)
(303,136,0)
(12,203,0)
(320,9,0)
(102,118,0)
(95,319,0)
(271,241,0)
(106,321,0)
(9,41,0)
(236,350,0)
(371,221,0)
(121,2,0)
(169,81,0)
(353,380,0)
(9,380,0)
(44,86,0)
(76,382,0)
(379,179,0)
(209,86,0)
(56,87,1)
(268,374,1)
(40,203,1)
(60,124,1)
(249,344,1)
(306,30,1)
(90,231,1)
(49,148,1)
(366,380,1)
(124,204,1)
(207,17,1)
(161,15,1)
(368,297,1)
(237,32,1)
(270,34,1)
(352,380,1)
(144,24,1)
(269,324,1)
(89,221,1)
(250,62,1)
(323,251,1)
(307,115,1)
(335,190,1)
(74,156,1)
(200,86,1)
(281,150,1)
(282,354,1)
(351,110,1)
(378,266,1)
(50,38,1)
(323,101,1)
(90,42,1)
(159,158,1)
(15,380,1)
(148,183,1)
(209,127,1)
(270,380,1)
(282,77,1)
(205,377,1)
(13,307,1)
(54,380,1)
(296,33,1)
(9,380,1)
(88,46,1)
(224,321,1)
(17,31,1)
(271,216,1)
(309,107,1)
(218,327,1)
(225,308,1)
(2,121,1)
(241,329,1)
(264,319,1)
(126,380,1)
(324,60,1)
(345,159,1)
(348,12,1)
(310,380,1)
(169,201,1)
(341,104,1)
(146,77,1)
(225,11,1)
(193,334,1)
(24,353,1)
(340,144,1)
(318,343,1)
(358,314,1)
(160,263,1)
(118,103,1)
(382,135,1)
(91,273,1)
(377,380,1)
(174,73,1)
(148,205,1)
(154,96,1)
(149,155,1)
(175,163,1)
(11,257,1)
(223,222,1)
(58,175,1)
(149,292,1)
(244,358,1)
(333,223,1)
(1,380,1)
(225,260,1)
(251,380,1)
(381,101,1)
(37,262,1)
(258,354,1)
(68,215,1)
(253,290,1)
(259,67,1)
(122,236,1)
(98,194,1)
(225,223,1)
(142,179,1)
(376,351,1)
(252,174,1)
(173,239,1)
(245,128,1)
(283,301,1)
(225,61,1)
(99,337,1)
(63,268,1)
(354,260,1)
(169,90,1)
(163,342,1)
(355,120,1)
(56,321,1)
(79,58,1)
(281,56,1)
(158,117,1)
(120,380,1)
(269,230,1)
(383,341,1)
(151,337,1)
(373,362,1)
(212,102,1)
(162,187,1)
(173,353,1)
(206,32,1)
(349,327,1)
(254,383,1)
(140,163,1)
(221,303,1)
(168,154,1)
(260,380,1)
(107,149,1)
(66,8,1)
(334,129,1)
(53,175,1)
(263,236,1)
(366,272,1)
(297,68,1)
(314,238,1)
(258,177,1)
(34,348,1)
(308,380,1)
(69,258,1)
(173,378,1)
(77,310,1)
(215,41,1)
(127,246,1)
(157,325,1)
(189,384,1)
(100,127,1)
(119,345,1)
(6,89,1)
(229,126,1)
(355,236,1)
(87,146,1)
(51,254,1)
(121,99,1)
(194,212,1)
(173,373,1)
(296,101,1)
(278,284,1)
(110,166,1)
(77,279,1)
(291,316,1)
(69,339,1)
(141,237,1)
(114,200,1)
(3,86,1)
(5,118,1)
(293,242,1)
(302,72,1)
(44,110,1)
(171,253,1)
(367,247,1)
(169,349,1)
(38,49,1)
(208,181,1)
(96,285,1)
(267,252,1)
(102,118,1)
(130,13,1)
(326,54,1)
(333,239,1)
(214,327,1)
(177,248,1)
(92,312,1)
(277,101,1)
(381,211,1)
(333,61,1)
(240,112,1)
(285,340,1)
(190,84,1)
(113,200,1)
(182,361,1)
(79,163,1)
(128,160,1)
(329,271,1)
(286,274,1)
(94,289,1)
(7,357,1)
(29,9,1)
(225,28,1)
(236,168,1)
(295,265,1)
(377,93,1)
(180,256,1)
(303,136,1)
(281,101,1)
(284,313,1)
(325,370,1)
(4,176,1)
(209,69,1)
(290,305,1)
(176,40,1)
(225,2,1)
(246,367,1)
(112,83,1)
(102,372,1)
(45,151,1)
(203,270,1)
(375,376,1)
(311,341,1)
(261,260,1)
(361,352,1)
(181,141,1)
(353,88,1)
(248,304,1)
(299,296,1)
(28,57,1)
(192,335,1)
(104,162,1)
(125,35,1)
(231,27,1)
(272,171,1)
(65,111,1)
(213,214,1)
(322,335,1)
(332,378,1)
(280,302,1)
(120,244,1)
(296,243,1)
(20,380,1)
(351,116,1)
(256,18,1)
(217,142,1)
(385,86,1)
(122,94,1)
(370,380,1)
(304,376,1)
(20,66,1)
(33,365,1)
(357,309,1)
(32,354,1)
(38,366,1)
(102,236,1)
(317,323,1)
(230,286,1)
(131,112,1)
(201,217,1)
(260,250,1)
(157,130,1)
(42,278,1)
(138,64,1)
(371,6,1)
(313,208,1)
(300,352,1)
(64,43,1)
(281,321,1)
(160,236,1)
(222,50,1)
(38,236,1)
(139,284,1)
(186,304,1)
(124,240,1)
(337,299,1)
(41,29,1)
(173,54,1)
(243,380,1)
(3,113,1)
(294,245,1)
(292,47,1)
(202,226,1)
(211,101,1)
(309,149,1)
(111,63,1)
(232,280,1)
(81,186,1)
(129,223,1)
(327,264,1)
(316,27,1)
(274,37,1)
(169,3,1)
(321,368,1)
(157,307,1)
(169,81,1)
(106,321,1)
(359,282,1)
(238,236,1)
(343,239,1)
(333,2,1)
(371,221,1)
(150,317,1)
(106,236,1)
(243,189,1)
(0,325,1)
(275,255,1)
(331,92,1)
(167,379,1)
(82,214,1)
(382,236,1)
(278,159,1)
(304,375,1)
(81,376,1)
(198,191,1)
(106,56,1)
(292,221,1)
(22,110,1)
(378,380,1)
(173,126,1)
(95,51,1)
(333,28,1)
(117,139,1)
(12,381,1)
(62,346,1)
(179,157,1)
(192,108,1)
(339,258,1)
(352,10,1)
(73,256,1)
(199,188,1)
(233,318,1)
(342,110,1)
(188,131,1)
(363,371,1)
(26,114,1)
(169,333,1)
(307,380,1)
(57,193,1)
(352,202,1)
(134,0,1)
(210,287,1)
(101,275,1)
(115,134,1)
(240,164,1)
(310,48,1)
(166,267,1)
(195,178,1)
(362,332,1)
(80,185,1)
(367,380,1)
(346,198,1)
(360,219,1)
(239,380,1)
(84,112,1)
(257,65,1)
(354,229,1)
(308,291,1)
(137,182,1)
(298,106,1)
(47,195,1)
(54,137,1)
(333,11,1)
(16,371,1)
(214,218,1)
(238,1,1)
(135,76,1)
(225,126,1)
(324,321,1)
(342,80,1)
(279,310,1)
(8,75,1)
(109,232,1)
(72,228,1)
(91,341,1)
(50,382,1)
(305,298,1)
(18,360,1)
(313,380,1)
(203,101,1)
(46,142,1)
(241,380,1)
(216,100,1)
(183,205,1)
(333,126,1)
(278,119,1)
(155,292,1)
(61,26,1)
(173,11,1)
(32,380,1)
(319,95,1)
(242,225,1)
(1,98,1)
(251,4,1)
(225,353,1)
(85,11,1)
(45,299,1)
(266,7,1)
(239,145,1)
(165,366,1)
(173,2,1)
(44,138,1)
(324,56,1)
(15,294,1)
(273,383,1)
(255,259,1)
(335,380,1)
(169,45,1)
(197,361,1)
(105,53,1)
(173,223,1)
(200,385,1)
(108,261,1)
(173,260,1)
(228,277,1)
(242,53,1)
(52,85,1)
(31,308,1)
(43,209,1)
(173,28,1)
(61,380,1)
(187,293,1)
(333,353,1)
(333,260,1)
(143,28,1)
(361,300,1)
(16,363,1)
(227,109,1)
(118,161,1)
(204,240,1)
(201,179,1)
(99,124,1)
(383,311,1)
(296,112,1)
(185,74,1)
(237,206,1)
(262,324,1)
(277,71,1)
(10,82,1)
(76,290,1)
(131,52,1)
(333,197,1)
(71,249,1)
(296,109,1)
(169,91,1)
(219,199,1)
(116,241,1)
(287,283,1)
(86,44,1)
(333,308,1)
(384,33,1)
(104,110,1)
(126,306,1)
(164,210,1)
(35,326,1)
(19,167,1)
(32,359,1)
(173,308,1)
(353,380,1)
(265,125,1)
(38,148,1)
(75,281,1)
(379,237,1)
(41,9,1)
(67,207,1)
(70,122,1)
(145,105,1)
(152,180,1)
(14,70,1)
(344,101,1)
(93,165,1)
(99,269,1)
(83,330,1)
(136,295,1)
(258,380,1)
(301,143,1)
(330,380,1)
(30,56,1)
(264,110,1)
(106,14,1)
(48,224,1)
(370,19,1)
(169,173,1)
(169,152,1)
(290,380,1)
(156,202,1)
(178,16,1)
(225,233,1)
(226,61,1)
(173,61,1)
(330,331,1)
(320,192,1)
(349,213,1)
(247,22,1)
(169,79,1)
(9,320,1)
(159,380,1)
(372,5,1)
(289,355,1)
(175,140,1)
(374,2,1)
(109,380,1)
(33,380,1)
(198,380,1)
(127,367,1)
(367,354,1)
(365,227,1)
(344,20,1)
(27,42,1)
(191,322,1)
(152,18,1)
(366,380,2)
(247,256,2)
(358,142,2)
(158,237,2)
(169,173,2)
(6,361,2)
(354,77,2)
(385,304,2)
(163,342,2)
(173,11,2)
(367,380,2)
(168,154,2)
(70,142,2)
(333,239,2)
(159,380,2)
(45,299,2)
(201,142,2)
(110,166,2)
(340,142,2)
(44,127,2)
(352,214,2)
(144,142,2)
(228,27,2)
(96,142,2)
(131,142,2)
(377,290,2)
(64,127,2)
(183,290,2)
(143,142,2)
(295,361,2)
(169,91,2)
(109,27,2)
(148,205,2)
(50,142,2)
(299,27,2)
(56,321,2)
(383,341,2)
(266,361,2)
(278,119,2)
(131,337,2)
(77,310,2)
(32,380,2)
(324,124,2)
(212,142,2)
(124,240,2)
(122,142,2)
(173,308,2)
(179,237,2)
(198,335,2)
(173,260,2)
(233,53,2)
(203,101,2)
(262,124,2)
(256,337,2)
(316,27,2)
(329,127,2)
(167,237,2)
(3,86,2)
(106,142,2)
(37,124,2)
(175,200,2)
(0,237,2)
(223,142,2)
(325,370,2)
(308,27,2)
(344,27,2)
(9,380,2)
(86,304,2)
(89,361,2)
(243,27,2)
(199,142,2)
(304,376,2)
(5,142,2)
(225,260,2)
(376,127,2)
(166,267,2)
(149,292,2)
(259,27,2)
(376,351,2)
(105,53,2)
(56,77,2)
(98,142,2)
(117,237,2)
(127,256,2)
(51,383,2)
(128,142,2)
(278,237,2)
(114,200,2)
(239,380,2)
(260,335,2)
(135,290,2)
(20,27,2)
(360,337,2)
(352,202,2)
(264,110,2)
(18,142,2)
(355,142,2)
(22,256,2)
(42,278,2)
(8,27,2)
(177,304,2)
(343,53,2)
(65,142,2)
(383,175,2)
(296,27,2)
(169,45,2)
(164,142,2)
(353,142,2)
(173,353,2)
(225,28,2)
(323,251,2)
(333,28,2)
(344,20,2)
(351,110,2)
(290,142,2)
(203,27,2)
(382,290,2)
(270,27,2)
(116,241,2)
(249,27,2)
(221,303,2)
(173,361,2)
(178,16,2)
(161,15,2)
(130,237,2)
(99,142,2)
(367,256,2)
(73,256,2)
(292,221,2)
(93,290,2)
(14,142,2)
(82,214,2)
(106,236,2)
(38,148,2)
(151,337,2)
(175,163,2)
(252,256,2)
(314,142,2)
(67,27,2)
(18,337,2)
(327,383,2)
(20,380,2)
(371,361,2)
(203,270,2)
(226,200,2)
(263,142,2)
(16,371,2)
(115,237,2)
(326,361,2)
(371,221,2)
(194,142,2)
(109,380,2)
(189,27,2)
(370,237,2)
(49,290,2)
(379,237,2)
(280,27,2)
(157,130,2)
(296,33,2)
(60,124,2)
(157,325,2)
(238,1,2)
(300,214,2)
(111,337,2)
(32,354,2)
(221,361,2)
(319,383,2)
(102,142,2)
(268,142,2)
(381,101,2)
(7,361,2)
(64,304,2)
(278,159,2)
(271,127,2)
(118,161,2)
(229,77,2)
(148,290,2)
(157,237,2)
(62,335,2)
(324,56,2)
(342,80,2)
(185,200,2)
(47,361,2)
(382,236,2)
(197,361,2)
(318,53,2)
(52,337,2)
(44,304,2)
(111,142,2)
(313,380,2)
(4,27,2)
(330,380,2)
(110,256,2)
(85,337,2)
(76,290,2)
(169,333,2)
(222,142,2)
(169,349,2)
(195,361,2)
(341,175,2)
(191,335,2)
(61,200,2)
(205,290,2)
(244,142,2)
(95,383,2)
(258,304,2)
(352,380,2)
(86,44,2)
(355,120,2)
(214,327,2)
(353,380,2)
(65,337,2)
(277,27,2)
(33,27,2)
(159,237,2)
(287,283,2)
(1,380,2)
(90,42,2)
(145,53,2)
(293,175,2)
(24,142,2)
(232,27,2)
(136,361,2)
(238,236,2)
(40,27,2)
(291,27,2)
(119,237,2)
(35,361,2)
(324,321,2)
(169,3,2)
(146,77,2)
(225,11,2)
(15,380,2)
(2,337,2)
(370,380,2)
(281,56,2)
(287,142,2)
(239,53,2)
(126,77,2)
(138,127,2)
(296,112,2)
(348,27,2)
(349,214,2)
(307,237,2)
(169,90,2)
(317,27,2)
(75,27,2)
(378,361,2)
(58,175,2)
(237,32,2)
(107,361,2)
(200,127,2)
(241,127,2)
(52,142,2)
(129,142,2)
(113,200,2)
(304,127,2)
(66,27,2)
(138,304,2)
(225,353,2)
(81,304,2)
(102,118,2)
(122,236,2)
(174,256,2)
(160,142,2)
(208,237,2)
(33,380,2)
(333,126,2)
(225,53,2)
(245,142,2)
(381,27,2)
(173,126,2)
(260,380,2)
(137,361,2)
(150,27,2)
(277,101,2)
(355,236,2)
(219,142,2)
(258,380,2)
(270,380,2)
(168,142,2)
(169,152,2)
(238,142,2)
(216,127,2)
(18,360,2)
(219,337,2)
(188,131,2)
(74,200,2)
(265,361,2)
(121,337,2)
(155,361,2)
(258,354,2)
(302,27,2)
(26,200,2)
(161,142,2)
(269,124,2)
(43,127,2)
(307,380,2)
(209,304,2)
(214,383,2)
(365,27,2)
(38,236,2)
(248,304,2)
(306,77,2)
(94,142,2)
(179,157,2)
(169,81,2)
(333,2,2)
(2,142,2)
(333,223,2)
(273,383,2)
(225,2,2)
(254,383,2)
(335,380,2)
(176,27,2)
(230,124,2)
(357,309,2)
(298,142,2)
(28,142,2)
(140,200,2)
(61,380,2)
(87,77,2)
(323,101,2)
(308,380,2)
(333,361,2)
(230,286,2)
(120,142,2)
(88,142,2)
(173,61,2)
(160,236,2)
(125,361,2)
(182,361,2)
(334,142,2)
(162,175,2)
(120,380,2)
(63,142,2)
(344,101,2)
(11,142,2)
(63,337,2)
(149,361,2)
(281,101,2)
(116,127,2)
(181,237,2)
(354,260,2)
(310,380,2)
(200,86,2)
(360,142,2)
(339,304,2)
(351,116,2)
(54,361,2)
(251,380,2)
(342,110,2)
(10,214,2)
(34,27,2)
(284,313,2)
(127,367,2)
(11,337,2)
(91,341,2)
(100,127,2)
(333,308,2)
(217,142,2)
(121,142,2)
(118,103,2)
(83,330,2)
(385,127,2)
(198,380,2)
(236,168,2)
(284,237,2)
(241,380,2)
(290,380,2)
(173,239,2)
(201,179,2)
(305,142,2)
(274,124,2)
(38,366,2)
(289,142,2)
(91,383,2)
(193,142,2)
(269,324,2)
(373,361,2)
(187,175,2)
(345,237,2)
(240,112,2)
(378,380,2)
(188,142,2)
(253,290,2)
(296,109,2)
(374,337,2)
(19,237,2)
(285,142,2)
(46,142,2)
(225,223,2)
(69,258,2)
(156,200,2)
(272,290,2)
(231,27,2)
(246,256,2)
(173,2,2)
(85,142,2)
(267,256,2)
(44,138,2)
(126,380,2)
(255,27,2)
(111,63,2)
(327,264,2)
(333,11,2)
(309,149,2)
(363,361,2)
(346,198,2)
(12,27,2)
(261,335,2)
(225,233,2)
(275,27,2)
(173,28,2)
(227,27,2)
(268,337,2)
(134,237,2)
(173,378,2)
(286,124,2)
(200,304,2)
(79,175,2)
(86,127,2)
(118,142,2)
(169,79,2)
(362,361,2)
(313,237,2)
(367,354,2)
(311,175,2)
(256,142,2)
(101,275,2)
(243,380,2)
(202,200,2)
(361,214,2)
(240,142,2)
(283,142,2)
(101,27,2)
(374,142,2)
(69,304,2)
(384,27,2)
(106,321,2)
(278,284,2)
(42,237,2)
(357,361,2)
(321,368,2)
(141,237,2)
(173,223,2)
(210,142,2)
(257,337,2)
(303,136,2)
(337,27,2)
(166,256,2)
(351,127,2)
(250,335,2)
(54,380,2)
(72,27,2)
(294,142,2)
(3,200,2)
(142,237,2)
(108,335,2)
(275,255,2)
(346,335,2)
(342,200,2)
(163,200,2)
(102,236,2)
(99,337,2)
(333,353,2)
(152,256,2)
(225,126,2)
(296,243,2)
(236,142,2)
(366,290,2)
(104,162,2)
(225,308,2)
(209,127,2)
(16,361,2)
(17,27,2)
(361,352,2)
(325,237,2)
(106,56,2)
(309,361,2)
(45,337,2)
(377,380,2)
(264,383,2)
(165,290,2)
(205,377,2)
(269,230,2)
(292,361,2)
(43,304,2)
(375,127,2)
(80,200,2)
(154,142,2)
(188,337,2)
(71,27,2)
(169,201,2)
(57,142,2)
(131,112,2)
(281,27,2)
(81,376,2)
(27,237,2)
(15,142,2)
(296,101,2)
(152,18,2)
(213,214,2)
(207,27,2)
(124,142,2)
(341,104,2)
(204,142,2)
(104,175,2)
(218,383,2)
(211,27,2)
(299,296,2)
(104,110,2)
(242,175,2)
(30,77,2)
(38,290,2)
(323,27,2)
(332,361,2)
(1,142,2)
(180,256,2)
(90,27,2)
(79,163,2)
(251,27,2)
(41,9,2)
(157,307,2)
(372,142,2)
(333,260,2)
(301,142,2)
(225,61,2)
(199,337,2)
(303,361,2)
(139,237,2)
(13,237,2)
(257,142,2)
(322,335,2)
(173,54,2)
(333,61,2)
(171,290,2)
(53,175,2)
(281,321,2)
(264,319,2)
(186,304,2)
(349,327,2)
(112,83,2)
(44,110,2)
(31,27,2)
(178,361,2)
-----------------------------------
(0,SMB_TRANS2_FIND_NEXT2)
(1,ctx->f_limit)
(2,t2p->t2_maxpcount)
(3,return error;)
(4,f_limit)
(5,2)
(6,md_top)
(7,ctx)
(8,ctx)
(9,ctx->f_flags)
(10,f_ecnt)
(11,t2p->t2_maxdcount)
(12,mbp)
(13,t2p)
(14,flags)
(15,ctx->f_Sid)
(16,mdp->md_top != NULL)
(17,ctx->f_t2 = t2p)
(18,error = smb_t2_request(t2p)
(19,f_ssp)
(20,ctx->f_infolevel)
(21,if (error)
(22,ctx)
(23,)
(24,t2p)
(25,tv)
(26,f_ecnt)
(27,error)
(28,tv.tv_usec)
(29,~SMBFS_RDD_GOTRNAME)
(30,ctx)
(31,t2p)
(32,ctx->f_flags)
(33,ctx->f_wildcard)
(34,f_attrmask)
(35,ctx->f_rnameofs = tw)
(36,if (ctx->f_t2)
(37,"fix95")
(38,mb_put_mem(mbp, ctx->f_rname, strlen(ctx->f_rname)
(39,)
(40,mbp)
(41,ctx->f_flags &= ~SMBFS_RDD_GOTRNAME)
(42,error = smb_t2_alloc(SSTOCP(ctx->f_ssp)
(43,mdp)
(44,md_get_uint16le(mdp, &tw)
(45,return error;)
(46,ctx)
(47,md_top)
(48,f_flags)
(49,MB_MSYSTEM)
(50,tv)
(51,mdp)
(52,vc_txmax)
(53,tw)
(54,ctx->f_rnameofs)
(55,)
(56,flags |= 1)
(57,tv_usec)
(58,error)
(59,if (error)
(60,flags)
(61,ctx->f_ecnt)
(62,ctx)
(63,5 * 2)
(64,tw)
(65,t2p)
(66,f_infolevel)
(67,t2p)
(68,8)
(69,ctx->f_flags &= ~SMBFS_RDD_FINDFIRST)
(70,mbp)
(71,0)
(72,mbp)
(73,mdp)
(74,mdp)
(75,mbp)
(76,mbp)
(77,ctx->f_flags & SMBFS_RDD_FINDSINGLE)
(78,if ((error = md_get_uint16le(mdp, &tw)
(79,return error;)
(80,&tw)
(81,return error;)
(82,ctx)
(83,SSTOVC(ctx->f_ssp)
(84,ctx)
(85,vcp)
(86,error = md_get_uint16le(mdp, &tw)
(87,1)
(88,f_t2)
(89,mdp)
(90,return error;)
(91,return error;)
(92,ctx)
(93,f_rname)
(94,0)
(95,tw)
(96,t2_tparam)
(97,if (error)
(98,f_limit)
(99,t2p)
(100,error)
(101,mbp = &t2p->t2_tparam)
(102,mb_put_mem(mbp, (caddr_t)
(103,caddr_t)
(104,md_get_uint16le(mdp, &tw)
(105,ctx)
(106,mb_put_uint16le(mbp, flags)
(107,0)
(108,ctx->f_t2 = NULL)
(109,ctx->f_dnp)
(110,mdp = &t2p->t2_rparam)
(111,t2p->t2_maxpcount = 5 * 2)
(112,*vcp = SSTOVC(ctx->f_ssp)
(113,error)
(114,ctx)
(115,f_scred)
(116,&ctx->f_Sid)
(117,ctx)
(118,(caddr_t)
(119,&t2p)
(120,ctx->f_infolevel)
(121,t2_maxpcount)
(122,mb_put_uint32le(mbp, 0)
(123,vcp)
(124,vcp->vc_flags & SMBC_WIN95)
(125,mdp)
(126,ctx->f_flags)
(127,ctx->f_flags & SMBFS_RDD_FINDFIRST)
(128,mbp)
(129,0)
(130,&t2p)
(131,vcp->vc_txmax)
(132,mbp)
(133,tw)
(134,ctx)
(135,0)
(136,t2p->t2_rdata)
(137,f_rnameofs)
(138,&tw)
(139,SMB_TRANS2_FIND_FIRST2)
(140,0)
(141,error)
(142,error)
(143,200)
(144,ctx->f_t2 = t2p)
(145,f_flags)
(146,flags)
(147,if ((error = md_get_uint16le(mdp, &tw)
(148,strlen(ctx->f_rname)
(149,mdp->md_top->m_len)
(150,flags)
(151,error)
(152,return error;)
(153,if (ctx->f_flags & SMBFS_RDD_FINDFIRST)
(154,t2p->t2_tparam)
(155,m_len)
(156,error)
(157,smb_t2_alloc(SSTOCP(ctx->f_ssp)
(158,f_scred)
(159,ctx->f_scred)
(160,mb_init(mbp)
(161,&ctx->f_Sid)
(162,&tw)
(163,error = md_get_uint16le(mdp, &tw)
(164,vc_flags)
(165,ctx)
(166,&t2p->t2_rparam)
(167,ctx)
(168,&t2p->t2_tparam)
(169,RET)
(170,)
(171,ctx)
(172,if (tw)
(173,return 0;)
(174,t2p)
(175,(error = md_get_uint16le(mdp, &tw)
(176,ctx)
(177,f_flags)
(178,KASSERT(mdp->md_top != NULL)
(179,error = smb_t2_alloc(SSTOCP(ctx->f_ssp)
(180,error)
(181,ctx)
(182,ctx)
(183,1)
(184,)
(185,tw)
(186,error)
(187,tw)
(188,t2p->t2_maxdcount = vcp->vc_txmax)
(189,f_wclen)
(190,f_t2)
(191,f_t2)
(192,ctx)
(193,tv)
(194,ctx)
(195,mdp)
(196,t2p)
(197,ENOENT)
(198,ctx->f_t2)
(199,error)
(200,(error = md_get_uint16le(mdp, &tw)
(201,return error;)
(202,ctx->f_ecnt = tw)
(203,mb_put_uint16le(mbp, ctx->f_attrmask)
(204,SMBC_WIN95)
(205,strlen(ctx->f_rname)
(206,SMBFS_RDD_FINDFIRST)
(207,mbp)
(208,f_ssp)
(209,error)
(210,vcp)
(211,mbp)
(212,mbp)
(213,error)
(214,(error = md_get_uint16le(mdp, &tw)
(215,flags)
(216,mdp)
(217,error)
(218,0)
(219,t2p)
(220,if (error)
(221,mdp = &t2p->t2_rdata)
(222,tv_sec)
(223,tv.tv_sec)
(224,ctx)
(225,ctx->f_flags |= SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE)
(226,tw)
(227,ctx)
(228,error)
(229,SMBFS_RDD_NOCLOSE)
(230,tvtohz(&tv)
(231,error)
(232,f_dnp)
(233,SMBFS_RDD_EOF | SMBFS_RDD_NOCLOSE)
(234,)
(235,if (ctx->f_rname)
(236,mbp = &t2p->t2_tparam)
(237,ctx->f_flags & SMBFS_RDD_FINDFIRST)
(238,mb_put_uint16le(mbp, ctx->f_limit)
(239,ctx->f_flags)
(240,vcp->vc_flags)
(241,ctx->f_Sid)
(242,error)
(243,ctx->f_wclen)
(244,f_infolevel)
(245,ctx)
(246,SMBFS_RDD_FINDFIRST)
(247,f_flags)
(248,ctx)
(249,mbp)
(250,f_t2)
(251,ctx->f_limit)
(252,t2_rparam)
(253,mbp)
(254,error)
(255,t2p->t2_tparam)
(256,error)
(257,t2_maxdcount)
(258,ctx->f_flags)
(259,t2_tparam)
(260,ctx->f_t2)
(261,NULL)
(262,PVFS)
(263,mbp)
(264,md_get_uint16le(mdp, &tw)
(265,t2p)
(266,f_eofs)
(267,t2p->t2_rparam)
(268,2)
(269,tsleep(&flags, PVFS, "fix95", tvtohz(&tv)
(270,ctx->f_attrmask)
(271,ctx)
(272,f_rname)
(273,error)
(274,tv)
(275,&t2p->t2_tparam)
(276,if ((error = md_get_uint16(mdp, &ctx->f_Sid)
(277,mb_put_uint32le(mbp, 0)
(278,smb_t2_alloc(SSTOCP(ctx->f_ssp)
(279,SMBFS_RDD_FINDSINGLE)
(280,ctx)
(281,mb_put_uint16le(mbp, flags)
(282,ctx)
(283,200 * 1000)
(284,SSTOCP(ctx->f_ssp)
(285,t2p)
(286,&tv)
(287,tv.tv_usec = 200 * 1000)
(288,flags)
(289,mbp)
(290,ctx->f_rname)
(291,f_t2)
(292,mdp->md_top)
(293,mdp)
(294,f_Sid)
(295,t2_rdata)
(296,smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen)
(297,2)
(298,ctx)
(299,error = smbfs_fullpath(mbp, vcp, ctx->f_dnp, ctx->f_wildcard, ctx->f_wclen)
(300,0)
(301,1000)
(302,vcp)
(303,&t2p->t2_rdata)
(304,(error = md_get_uint16(mdp, &ctx->f_Sid)
(305,f_rname)
(306,f_flags)
(307,ctx->f_scred)
(308,ctx->f_t2)
(309,mdp->md_top->m_len != 0)
(310,ctx->f_flags)
(311,0)
(312,vcp)
(313,ctx->f_ssp)
(314,mbp)
(315,error)
(316,ctx)
(317,mbp)
(318,SMBFS_RDD_NOCLOSE)
(319,&tw)
(320,f_flags)
(321,flags = 8 | 2)
(322,ctx)
(323,mb_put_uint16le(mbp, ctx->f_limit)
(324,&flags)
(325,SSTOCP(ctx->f_ssp)
(326,tw)
(327,error = md_get_uint16le(mdp, &tw)
(328,mdp)
(329,f_Sid)
(330,ctx->f_ssp)
(331,f_ssp)
(332,0)
(333,return ENOENT;)
(334,tv.tv_sec = 0)
(335,ctx->f_t2)
(336,if ((error = md_get_uint16le(mdp, &tw)
(337,error)
(338,if (ctx->f_flags & SMBFS_RDD_FINDSINGLE)
(339,~SMBFS_RDD_FINDFIRST)
(340,mbp)
(341,error = md_get_uint16le(mdp, &tw)
(342,md_get_uint16le(mdp, &tw)
(343,SMBFS_RDD_EOF)
(344,mb_put_uint16le(mbp, ctx->f_infolevel)
(345,t2p)
(346,smb_t2_done(ctx->f_t2)
(347,if (vcp->vc_flags & SMBC_WIN95)
(348,ctx)
(349,return error;)
(350,)
(351,md_get_uint16(mdp, &ctx->f_Sid)
(352,ctx->f_ecnt)
(353,ctx->f_t2)
(354,ctx->f_flags |= SMBFS_RDD_NOCLOSE)
(355,mb_put_uint16le(mbp, ctx->f_infolevel)
(356,if (ctx->f_flags & SMBFS_RDD_FINDFIRST)
(357,KASSERT(mdp->md_top->m_len != 0)
(358,ctx)
(359,f_flags)
(360,smb_t2_request(t2p)
(361,ctx->f_ecnt == 0)
(362,ctx->f_eofs = 0)
(363,NULL)
(364,if ((error = md_get_uint16le(mdp, &tw)
(365,f_wildcard)
(366,ctx->f_rname)
(367,ctx->f_flags)
(368,8 | 2)
(369,if (ctx->f_ecnt == 0)
(370,ctx->f_ssp)
(371,mdp->md_top)
(372,MB_MSYSTEM)
(373,0)
(374,5)
(375,0)
(376,error = md_get_uint16(mdp, &ctx->f_Sid)
(377,ctx->f_rname)
(378,ctx->f_eofs)
(379,error)
(380,struct smbfs_fctx *ctx)
(381,mb_init(mbp)
(382,mb_put_uint8(mbp, 0)
(383,(error = md_get_uint16le(mdp, &tw)
(384,ctx)
(385,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^