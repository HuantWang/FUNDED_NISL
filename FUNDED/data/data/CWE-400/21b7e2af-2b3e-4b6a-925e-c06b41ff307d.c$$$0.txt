-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_34_bad()
{
    char * data;
    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)realloc(data, 100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
72,73
72,74
73,74
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
82,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,74,75,77,81,83,84,88,89,90
-----computeFrom-----
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_34_bad(){    char * data;    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_34_bad()
CWE401_Memory_Leak__char_realloc_34_bad
{    char * data;    CWE401_Memory_Leak__char_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)realloc(data, 100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
CWE401_Memory_Leak__char_realloc_34_unionType myUnion;
CWE401_Memory_Leak__char_realloc_34_unionType
CWE401_Memory_Leak__char_realloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(4,6,0)
(13,36,0)
(38,4,0)
(3,5,0)
(20,21,0)
(37,35,0)
(39,31,0)
(11,12,0)
(12,11,0)
(28,31,0)
(0,11,0)
(25,14,0)
(21,36,0)
(15,4,0)
(31,32,0)
(33,21,0)
(26,22,0)
(17,16,0)
(31,39,0)
(41,9,0)
(23,19,0)
(8,19,0)
(6,19,0)
(22,19,0)
(36,5,0)
(9,32,0)
(32,31,0)
(1,6,0)
(7,39,0)
(31,28,0)
(10,22,0)
(16,19,0)
(6,32,0)
(40,12,0)
(5,19,0)
(9,19,0)
(25,35,0)
(11,39,0)
(32,19,0)
(16,32,0)
(39,22,0)
(34,27,0)
(36,21,0)
(2,32,0)
(39,11,0)
(27,32,0)
(24,19,0)
(35,25,0)
(30,16,0)
(29,27,0)
(4,38,1)
(15,9,1)
(34,32,1)
(10,26,1)
(36,21,1)
(27,32,1)
(25,35,1)
(7,2,1)
(31,39,1)
(30,27,1)
(0,7,1)
(32,31,1)
(22,10,1)
(31,28,1)
(18,36,1)
(39,22,1)
(2,22,1)
(12,40,1)
(38,15,1)
(37,27,1)
(6,32,1)
(9,41,1)
(39,11,1)
(1,4,1)
(6,1,1)
(16,17,1)
(21,20,1)
(11,12,1)
(13,6,1)
(33,13,1)
(35,37,1)
(41,16,1)
(27,29,1)
(16,32,1)
(9,32,1)
(20,33,1)
(30,25,1)
(29,34,1)
(17,30,1)
(40,0,1)
(31,28,2)
(36,21,2)
(35,27,2)
(37,27,2)
(25,27,2)
(27,32,2)
(39,22,2)
(9,32,2)
(39,11,2)
(25,35,2)
(32,31,2)
(16,32,2)
(6,32,2)
(31,39,2)
(11,12,2)
-----------------------------------
(0,100)
(1,data)
(2,data)
(3,data)
(4,myUnion.unionFirst)
(5,)
(6,myUnion.unionFirst = data)
(7,data)
(8,myUnion)
(9,printLine(data)
(10,NULL)
(11,100*sizeof(char)
(12,sizeof(char)
(13,data)
(14,)
(15,myUnion)
(16,strcpy(data, "A String")
(17,"A String")
(18,RET)
(19,)
(20,unionSecond)
(21,myUnion.unionSecond)
(22,data = NULL)
(23,data)
(24,if (data == NULL)
(25,exit(-1)
(26,data)
(27,data == NULL)
(28,char *)
(29,NULL)
(30,data)
(31,(char *)
(32,data = (char *)
(33,myUnion)
(34,data)
(35,-1)
(36,* data = myUnion.unionSecond)
(37,1)
(38,unionFirst)
(39,realloc(data, 100*sizeof(char)
(40,char)
(41,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^