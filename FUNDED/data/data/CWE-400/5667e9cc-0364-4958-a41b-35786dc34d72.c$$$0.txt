-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
42,45
43,44
45,46
47,48
47,49
49,50
50,51
50,52
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
66,67
67,68
67,69
67,70
68,69
70,71
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,48,51,52,56,58,63,65,69,71,72,76,78,82,84
-----computeFrom-----
28,29
28,30
34,35
34,36
47,48
47,49
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__wchar_t_realloc_44_bad()
CWE401_Memory_Leak__wchar_t_realloc_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(14,6,0)
(2,6,0)
(29,2,0)
(11,31,0)
(13,8,0)
(11,19,0)
(23,29,0)
(22,28,0)
(29,8,0)
(1,10,0)
(8,19,0)
(10,31,0)
(12,19,0)
(25,19,0)
(18,8,0)
(27,31,0)
(24,19,0)
(20,9,0)
(29,28,0)
(5,26,0)
(31,19,0)
(28,31,0)
(21,2,0)
(28,29,0)
(0,31,0)
(2,29,0)
(17,0,0)
(28,22,0)
(9,30,0)
(30,15,0)
(0,19,0)
(4,11,0)
(26,19,0)
(6,2,0)
(3,10,0)
(30,9,0)
(31,28,0)
(7,26,0)
(4,0,1)
(26,5,1)
(23,27,1)
(11,4,1)
(2,6,1)
(11,31,1)
(27,8,1)
(10,1,1)
(29,2,1)
(0,31,1)
(17,10,1)
(3,31,1)
(28,29,1)
(16,11,1)
(31,28,1)
(6,14,1)
(8,13,1)
(30,9,1)
(13,18,1)
(5,7,1)
(9,20,1)
(20,10,1)
(0,17,1)
(14,21,1)
(1,3,1)
(29,8,1)
(10,31,1)
(28,22,1)
(18,26,1)
(21,23,1)
(17,30,1)
(30,9,2)
(0,31,2)
(20,10,2)
(9,10,2)
(28,29,2)
(2,6,2)
(29,8,2)
(30,10,2)
(28,22,2)
(29,2,2)
(11,31,2)
(31,28,2)
(10,31,2)
-----------------------------------
(0,printWLine(data)
(1,NULL)
(2,100*sizeof(wchar_t)
(3,data)
(4,data)
(5,badSink)
(6,sizeof(wchar_t)
(7,funcPtr)
(8,data = NULL)
(9,-1)
(10,data == NULL)
(11,funcPtr(data)
(12,if (data == NULL)
(13,NULL)
(14,wchar_t)
(15,)
(16,RET)
(17,data)
(18,data)
(19,)
(20,1)
(21,100)
(22,wchar_t *)
(23,data)
(24,funcPtr)
(25,data)
(26,(*funcPtr)
(27,data)
(28,(wchar_t *)
(29,realloc(data, 100*sizeof(wchar_t)
(30,exit(-1)
(31,data = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^