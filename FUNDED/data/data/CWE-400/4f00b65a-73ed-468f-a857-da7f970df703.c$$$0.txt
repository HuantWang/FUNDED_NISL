-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    size_t data;
    /* Initialize data */
    data = 0;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    for(j = 0; j < 1; j++)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
43,44
43,45
43,46
43,47
44,45
45,46
45,47
46,47
49,50
49,51
50,51
53,54
54,55
56,57
57,58
57,59
58,59
59,60
59,61
61,62
61,63
64,65
64,66
64,67
65,66
65,67
66,67
68,69
68,70
69,70
71,72
73,74
73,75
73,76
73,77
73,78
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
81,82
83,84
83,85
84,85
86,87
86,88
87,88
89,90
90,91
90,92
93,94
93,95
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
107,110
108,109
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
126,127
127,128
128,129
128,130
129,130
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,42,47,48,51,52,55,60,62,63,67,70,72,77,80,82,85,88,91,92,96,98,103,105,109,111,113,117,119,123,125,130,131
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
45,46
45,47
49,50
49,51
65,66
65,67
75,76
75,77
86,87
86,88
94,95
94,96
-----guardedBy-----
72,113
67,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int h,j;    size_t data;    /* Initialize data */    data = 0;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B()
goodG2B
{    int h,j;    size_t data;    /* Initialize data */    data = 0;    for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
int h,j;
int h,j;
int
h
h
j
j
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(h = 0; h < 1; h++)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(62,37,0)
(4,8,0)
(65,6,0)
(18,41,0)
(62,11,0)
(53,41,0)
(42,34,0)
(49,22,0)
(31,26,0)
(44,28,0)
(19,12,0)
(43,27,0)
(50,65,0)
(2,23,0)
(40,4,0)
(30,34,0)
(38,7,0)
(55,62,0)
(56,53,0)
(54,13,0)
(8,4,0)
(23,9,0)
(60,11,0)
(48,37,0)
(59,62,0)
(35,34,0)
(36,8,0)
(26,28,0)
(4,40,0)
(13,62,0)
(48,11,0)
(24,49,0)
(46,28,0)
(25,28,0)
(59,4,0)
(5,34,0)
(21,64,0)
(1,37,0)
(10,11,0)
(63,9,0)
(15,53,0)
(8,41,0)
(39,9,0)
(62,13,0)
(0,58,0)
(27,43,0)
(64,8,0)
(48,17,0)
(61,17,0)
(16,64,0)
(32,44,0)
(52,65,0)
(12,41,0)
(11,14,0)
(4,59,0)
(47,48,0)
(20,27,0)
(58,9,0)
(51,23,0)
(29,26,0)
(3,34,0)
(17,48,0)
(37,34,0)
(53,8,0)
(43,33,0)
(62,59,0)
(57,37,0)
(7,41,0)
(12,8,0)
(7,8,0)
(15,64,1)
(64,16,1)
(24,48,1)
(25,46,1)
(48,37,1)
(16,21,1)
(10,26,1)
(57,1,1)
(58,9,1)
(44,28,1)
(12,8,1)
(61,47,1)
(56,15,1)
(29,28,1)
(64,8,1)
(12,19,1)
(59,62,1)
(11,60,1)
(0,49,1)
(54,55,1)
(26,31,1)
(20,64,1)
(9,63,1)
(38,53,1)
(26,28,1)
(15,43,1)
(32,11,1)
(37,57,1)
(39,26,1)
(28,25,1)
(58,0,1)
(62,11,1)
(43,27,1)
(63,39,1)
(47,23,1)
(8,4,1)
(27,20,1)
(46,37,1)
(29,44,1)
(55,36,1)
(7,38,1)
(53,8,1)
(44,32,1)
(60,10,1)
(53,56,1)
(23,51,1)
(62,37,1)
(31,29,1)
(21,8,1)
(4,59,1)
(0,12,1)
(23,9,1)
(17,61,1)
(45,23,1)
(51,2,1)
(62,13,1)
(2,9,1)
(2,58,1)
(7,8,1)
(36,48,1)
(48,11,1)
(19,7,1)
(48,17,1)
(13,54,1)
(49,24,1)
(4,40,1)
(11,26,2)
(29,26,2)
(62,11,2)
(62,48,2)
(64,8,2)
(7,8,2)
(62,13,2)
(53,8,2)
(13,48,2)
(26,28,2)
(19,48,2)
(53,48,2)
(7,48,2)
(0,23,2)
(4,59,2)
(26,26,2)
(38,48,2)
(55,48,2)
(51,23,2)
(4,40,2)
(12,8,2)
(48,11,2)
(43,27,2)
(56,48,2)
(24,48,2)
(59,48,2)
(49,48,2)
(16,48,2)
(48,17,2)
(10,26,2)
(59,62,2)
(27,64,2)
(8,4,2)
(21,48,2)
(62,37,2)
(2,23,2)
(20,64,2)
(54,48,2)
(60,26,2)
(12,48,2)
(48,37,2)
(15,48,2)
(58,9,2)
(61,23,2)
(23,9,2)
(43,64,2)
(23,23,2)
(32,26,2)
(44,26,2)
(44,28,2)
(64,48,2)
(58,23,2)
(17,23,2)
(8,48,2)
(4,48,2)
(47,23,2)
(48,23,2)
(31,26,2)
(36,48,2)
-----------------------------------
(0,j)
(1,data)
(2,j)
(3,data)
(4,(char *)
(5,for(j = 0; j < 1; j++)
(6,)
(7,printLine(myString)
(8,myString = (char *)
(9,j = 0)
(10,data)
(11,data = 20)
(12,free(myString)
(13,sizeof(char)
(14,)
(15,myString)
(16,NULL)
(17,strlen(HELLO_STRING)
(18,if (myString == NULL)
(19,myString)
(20,1)
(21,myString)
(22,)
(23,j < 1)
(24,"Input is less than the length of the source string")
(25,0)
(26,h < 1)
(27,-1)
(28,h = 0)
(29,h)
(30,h)
(31,1)
(32,h)
(33,)
(34,)
(35,for(h = 0; h < 1; h++)
(36,myString)
(37,data = 0)
(38,myString)
(39,j)
(40,char *)
(41,)
(42,j)
(43,exit(-1)
(44,h++)
(45,RET)
(46,h)
(47,data)
(48,data > strlen(HELLO_STRING)
(49,printLine("Input is less than the length of the source string")
(50,myString)
(51,1)
(52,if (data > strlen(HELLO_STRING)
(53,strcpy(myString, HELLO_STRING)
(54,char)
(55,data)
(56,HELLO_STRING)
(57,0)
(58,j++)
(59,malloc(data*sizeof(char)
(60,20)
(61,HELLO_STRING)
(62,data*sizeof(char)
(63,0)
(64,myString == NULL)
(65,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^