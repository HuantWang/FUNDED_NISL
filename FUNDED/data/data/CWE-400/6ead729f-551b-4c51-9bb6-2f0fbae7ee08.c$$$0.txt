-----label-----
1
-----code-----
static void badSink()
{
    int count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData;
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
9,11
11,12
12,13
14,15
14,16
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
29,30
29,31
30,31
32,33
32,34
33,34
33,35
34,35
37,38
39,40
40,41
42,43
43,44
44,45
44,46
45,46
-----nextToken-----
2,4,8,10,13,18,20,22,27,28,31,35,36,38,41,46,47
-----computeFrom-----
25,26
25,27
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    int count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
static void
badSink()
badSink
{    int count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData;
int count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData;
int
count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData
count
= CWE400_Resource_Exhaustion__rand_for_loop_45_badData
CWE400_Resource_Exhaustion__rand_for_loop_45_badData
CWE400_Resource_Exhaustion__rand_for_loop_45_badData
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(13,5,0)
(0,2,0)
(17,10,0)
(14,2,0)
(22,1,0)
(10,8,0)
(18,1,0)
(23,19,0)
(5,8,0)
(24,19,0)
(5,1,0)
(16,8,0)
(3,11,0)
(2,4,0)
(1,22,0)
(1,23,0)
(15,4,0)
(20,23,0)
(7,4,0)
(11,6,0)
(4,19,0)
(9,8,0)
(12,23,0)
(1,5,0)
(1,23,1)
(17,11,1)
(1,22,1)
(16,2,1)
(10,8,1)
(1,18,1)
(0,14,1)
(18,13,1)
(9,16,1)
(8,9,1)
(3,5,1)
(10,17,1)
(21,5,1)
(2,0,1)
(5,1,1)
(12,20,1)
(14,23,1)
(5,8,1)
(13,10,1)
(13,8,1)
(11,3,1)
(23,12,1)
(1,22,2)
(5,5,2)
(18,5,2)
(1,5,2)
(11,5,2)
(10,5,2)
(1,23,2)
(17,5,2)
(5,8,2)
(13,5,2)
(5,1,2)
(10,8,2)
(3,5,2)
-----------------------------------
(0,0)
(1,(size_t)
(2,i = 0)
(3,"Hello")
(4,)
(5,i < (size_t)
(6,)
(7,for (i = 0; i < (size_t)
(8,i = 0)
(9,0)
(10,i++)
(11,printLine("Hello")
(12,CWE400_Resource_Exhaustion__rand_for_loop_45_badData)
(13,i)
(14,i)
(15,i)
(16,i)
(17,i)
(18,count)
(19,)
(20,count)
(21,RET)
(22,size_t)
(23,count = CWE400_Resource_Exhaustion__rand_for_loop_45_badData)
(24,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^