-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_11_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,71
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_11_bad(){    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_11_bad()
CWE401_Memory_Leak__char_calloc_11_bad
{    char * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(1,6,0)
(2,25,0)
(32,2,0)
(22,17,0)
(24,2,0)
(2,4,0)
(24,25,0)
(7,19,0)
(14,8,0)
(19,7,0)
(31,4,0)
(19,30,0)
(20,15,0)
(5,15,0)
(4,31,0)
(4,2,0)
(26,32,0)
(12,25,0)
(9,31,0)
(23,7,0)
(27,24,0)
(10,17,0)
(32,25,0)
(6,2,0)
(4,28,0)
(13,32,0)
(3,6,0)
(28,4,0)
(8,31,0)
(15,17,0)
(0,17,0)
(21,2,0)
(31,8,0)
(6,3,1)
(8,14,1)
(18,24,1)
(13,6,1)
(18,11,1)
(4,28,1)
(11,15,1)
(2,4,1)
(4,31,1)
(13,19,1)
(23,6,1)
(20,5,1)
(9,21,1)
(21,11,1)
(15,20,1)
(29,18,1)
(24,27,1)
(3,1,1)
(7,23,1)
(24,2,1)
(19,7,1)
(32,26,1)
(1,2,1)
(6,2,1)
(31,8,1)
(14,9,1)
(26,13,1)
(32,2,1)
(27,32,1)
(4,28,2)
(27,11,2)
(19,6,2)
(24,2,2)
(4,11,2)
(32,11,2)
(26,11,2)
(21,11,2)
(19,7,2)
(3,11,2)
(31,8,2)
(2,11,2)
(32,2,2)
(6,11,2)
(8,11,2)
(31,11,2)
(1,11,2)
(23,6,2)
(9,11,2)
(7,6,2)
(24,11,2)
(2,4,2)
(4,31,2)
(13,11,2)
(6,2,2)
(14,11,2)
-----------------------------------
(0,if(globalReturnsTrue()
(1,data)
(2,data = (char *)
(3,NULL)
(4,(char *)
(5,data)
(6,data == NULL)
(7,-1)
(8,sizeof(char)
(9,100)
(10,if(globalReturnsTrue()
(11,globalReturnsTrue()
(12,if (data == NULL)
(13,data)
(14,char)
(15,data = NULL)
(16, sizeof(char)
(17,)
(18,globalReturnsTrue()
(19,exit(-1)
(20,NULL)
(21,data)
(22,data)
(23,1)
(24,printLine(data)
(25,)
(26,"A String")
(27,data)
(28,char *)
(29,RET)
(30,)
(31,calloc(100, sizeof(char)
(32,strcpy(data, "A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^