-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;
    data = NULL;
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
61,62
63,64
63,65
64,65
65,66
65,67
67,68
67,69
67,70
70,71
71,72
71,73
72,73
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,48,52,54,59,60,62,66,68,69,73,74,75
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;    data = NULL;    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_calloc_34_unionType myUnion;
CWE401_Memory_Leak__wchar_t_calloc_34_unionType
CWE401_Memory_Leak__wchar_t_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(28,24,0)
(14,21,0)
(20,25,0)
(25,10,0)
(0,16,0)
(7,16,0)
(20,16,0)
(8,1,0)
(16,20,0)
(29,21,0)
(29,4,0)
(9,10,0)
(13,25,0)
(9,21,0)
(24,1,0)
(17,10,0)
(21,29,0)
(12,2,0)
(27,5,0)
(11,5,0)
(15,12,0)
(1,4,0)
(5,10,0)
(4,1,0)
(4,29,0)
(19,20,0)
(23,9,0)
(22,10,0)
(29,3,0)
(21,10,0)
(6,2,0)
(18,12,0)
(3,29,0)
(1,24,0)
(2,21,0)
(2,10,0)
(29,3,1)
(4,1,1)
(7,19,1)
(9,21,1)
(29,4,1)
(15,18,1)
(12,15,1)
(19,2,1)
(8,14,1)
(6,12,1)
(24,28,1)
(20,16,1)
(16,0,1)
(0,7,1)
(14,5,1)
(2,21,1)
(26,20,1)
(23,21,1)
(1,24,1)
(5,11,1)
(9,23,1)
(21,29,1)
(28,8,1)
(11,27,1)
(2,6,1)
(18,9,1)
(29,3,2)
(9,21,2)
(21,29,2)
(20,16,2)
(29,4,2)
(4,1,2)
(2,21,2)
(1,24,2)
-----------------------------------
(0,unionSecond)
(1,100*sizeof(wchar_t)
(2,myUnion.unionFirst = data)
(3,wchar_t *)
(4,ALLOCA(100*sizeof(wchar_t)
(5,data = NULL)
(6,data)
(7,myUnion)
(8,100)
(9,printWLine(data)
(10,)
(11,NULL)
(12,myUnion.unionFirst)
(13,data)
(14,data)
(15,unionFirst)
(16,myUnion.unionSecond)
(17,data)
(18,myUnion)
(19,data)
(20,* data = myUnion.unionSecond)
(21,data = (wchar_t *)
(22,myUnion)
(23,data)
(24,sizeof(wchar_t)
(25,)
(26,RET)
(27,data)
(28,wchar_t)
(29,(wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^