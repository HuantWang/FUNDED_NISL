-----label-----
0
-----code-----
static void goodB2G()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    {
        FILE * dataCopy = data;
        FILE * data = dataCopy;
        /* FIX: Close the file from the source before pointing data to a new file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        data = fopen("GoodSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
28,31
28,32
28,33
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
49,50
49,51
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,32,34,35,38,42,44,45,48,52,54,59,61,65,68,69,70,74,76,81,83
-----computeFrom-----
14,15
14,16
20,21
20,22
50,51
50,52
63,64
63,65
72,73
72,74
-----guardedBy-----
52,61
74,83
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    {        FILE * dataCopy = data;        FILE * data = dataCopy;        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
static void
goodB2G()
goodB2G
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    {        FILE * dataCopy = data;        FILE * data = dataCopy;        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
{        FILE * dataCopy = data;        FILE * data = dataCopy;        /* FIX: Close the file from the source before pointing data to a new file handle */        if (data != NULL)        {            fclose(data);        }        data = fopen("GoodSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
FILE * dataCopy = data;
FILE * dataCopy = data;
FILE
FILE
* dataCopy = data
*
dataCopy
= data
data
data
FILE * data = dataCopy;
FILE * data = dataCopy;
FILE
FILE
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
data = fopen("GoodSink_fopen.txt", "w+");
data = fopen("GoodSink_fopen.txt", "w+")
data
data
fopen("GoodSink_fopen.txt", "w+")
fopen
fopen
"GoodSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(22,28,0)
(9,19,0)
(30,26,0)
(38,6,0)
(19,22,0)
(11,19,0)
(9,22,0)
(6,15,0)
(31,22,0)
(36,25,0)
(12,1,0)
(2,38,0)
(25,9,0)
(18,15,0)
(29,22,0)
(34,25,0)
(16,21,0)
(13,26,0)
(19,12,0)
(37,6,0)
(1,12,0)
(32,19,0)
(17,14,0)
(8,9,0)
(15,6,0)
(3,16,0)
(24,22,0)
(10,9,0)
(23,15,0)
(35,28,0)
(5,14,0)
(12,28,0)
(0,22,0)
(6,22,0)
(16,9,0)
(38,20,0)
(7,12,0)
(27,1,0)
(33,1,0)
(14,6,0)
(26,28,0)
(18,23,1)
(17,5,1)
(16,9,1)
(12,1,1)
(25,9,1)
(14,6,1)
(37,16,1)
(19,11,1)
(5,6,1)
(27,7,1)
(32,12,1)
(19,12,1)
(11,32,1)
(30,13,1)
(16,3,1)
(36,34,1)
(34,9,1)
(26,30,1)
(2,14,1)
(4,38,1)
(15,18,1)
(9,8,1)
(8,10,1)
(6,15,1)
(25,36,1)
(14,17,1)
(3,25,1)
(9,19,1)
(38,2,1)
(4,14,1)
(37,25,1)
(7,26,1)
(33,27,1)
(1,33,1)
(38,6,1)
(23,37,1)
(10,19,1)
(19,12,2)
(38,14,2)
(38,6,2)
(14,6,2)
(12,1,2)
(16,9,2)
(25,9,2)
(9,19,2)
(2,14,2)
(3,25,2)
(16,25,2)
(6,15,2)
-----------------------------------
(0,if (data != NULL)
(1,fopen("BadSource_fopen.txt", "w+")
(2,data)
(3,data)
(4,RET)
(5,data)
(6,data = fopen("GoodSink_fopen.txt", "w+")
(7,data)
(8,dataCopy)
(9,* data = dataCopy)
(10,data)
(11,data)
(12,data = fopen("BadSource_fopen.txt", "w+")
(13,data)
(14,data != NULL)
(15,fopen("GoodSink_fopen.txt", "w+")
(16,fclose(data)
(17,NULL)
(18,"w+")
(19,* dataCopy = data)
(20,)
(21,)
(22,)
(23,"GoodSink_fopen.txt")
(24,dataCopy)
(25,data != NULL)
(26,data = NULL)
(27,"BadSource_fopen.txt")
(28,)
(29,data)
(30,NULL)
(31,if (data != NULL)
(32,dataCopy)
(33,"w+")
(34,data)
(35,data)
(36,NULL)
(37,data)
(38,fclose(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^