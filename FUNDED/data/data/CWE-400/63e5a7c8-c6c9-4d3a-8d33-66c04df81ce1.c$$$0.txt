-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_31_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    {
        FILE * dataCopy = data;
        FILE * data = dataCopy;
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,32,34,35,38,42,44,45,48,52,55,56,57,61,63,68,70
-----computeFrom-----
14,15
14,16
20,21
20,22
50,51
50,52
59,60
59,61
-----guardedBy-----
61,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_31_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    {        FILE * dataCopy = data;        FILE * data = dataCopy;        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_31_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_31_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    {        FILE * dataCopy = data;        FILE * data = dataCopy;        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
{        FILE * dataCopy = data;        FILE * data = dataCopy;        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
FILE * dataCopy = data;
FILE * dataCopy = data;
FILE
FILE
* dataCopy = data
*
dataCopy
= data
data
data
FILE * data = dataCopy;
FILE * data = dataCopy;
FILE
FILE
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(20,16,0)
(15,13,0)
(31,15,0)
(26,13,0)
(24,3,0)
(29,13,0)
(9,13,0)
(19,14,0)
(13,5,0)
(25,17,0)
(23,8,0)
(30,15,0)
(10,26,0)
(28,13,0)
(6,26,0)
(4,17,0)
(26,27,0)
(2,30,0)
(16,15,0)
(15,8,0)
(12,8,0)
(7,3,0)
(16,22,0)
(8,15,0)
(3,27,0)
(17,5,0)
(1,14,0)
(14,26,0)
(27,5,0)
(27,3,0)
(0,30,0)
(14,13,0)
(11,5,0)
(21,27,0)
(26,27,1)
(20,30,1)
(16,15,1)
(3,7,1)
(24,21,1)
(26,6,1)
(23,12,1)
(15,8,1)
(14,1,1)
(4,25,1)
(31,14,1)
(18,16,1)
(30,15,1)
(19,26,1)
(17,4,1)
(1,19,1)
(10,27,1)
(7,24,1)
(8,23,1)
(16,20,1)
(0,2,1)
(30,0,1)
(12,31,1)
(14,26,1)
(2,15,1)
(21,17,1)
(27,3,1)
(6,10,1)
(18,30,1)
(16,30,2)
(20,30,2)
(15,8,2)
(26,27,2)
(16,15,2)
(14,26,2)
(27,3,2)
(30,15,2)
-----------------------------------
(0,NULL)
(1,dataCopy)
(2,data)
(3,fopen("BadSource_fopen.txt", "w+")
(4,NULL)
(5,)
(6,data)
(7,"w+")
(8,fopen("BadSink_fopen.txt", "w+")
(9,if (data != NULL)
(10,dataCopy)
(11,data)
(12,"BadSink_fopen.txt")
(13,)
(14,* data = dataCopy)
(15,data = fopen("BadSink_fopen.txt", "w+")
(16,fclose(data)
(17,data = NULL)
(18,RET)
(19,data)
(20,data)
(21,data)
(22,)
(23,"w+")
(24,"BadSource_fopen.txt")
(25,data)
(26,* dataCopy = data)
(27,data = fopen("BadSource_fopen.txt", "w+")
(28,dataCopy)
(29,data)
(30,data != NULL)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^