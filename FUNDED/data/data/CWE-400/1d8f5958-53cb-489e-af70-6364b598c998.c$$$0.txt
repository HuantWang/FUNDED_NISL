-----label-----
0
-----code-----
static void good1()
{
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
9,10
10,11
11,12
11,13
12,13
15,16
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
17,18
18,19
18,20
19,20
21,22
21,23
21,24
24,25
25,26
25,27
26,27
26,28
27,28
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
58,60
61,62
62,63
62,64
63,64
63,65
64,65
64,66
65,66
70,71
71,72
71,73
72,73
72,74
73,74
73,75
74,75
79,80
80,81
80,82
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
94,95
95,96
95,97
96,97
98,99
98,100
99,100
99,101
100,101
102,103
104,105
104,106
104,107
105,106
107,108
109,110
109,111
110,111
112,113
113,114
113,115
114,115
117,118
117,119
118,119
118,120
119,120
121,122
123,124
123,125
123,126
123,127
124,125
125,126
125,127
126,127
128,129
130,131
131,132
131,133
132,133
132,134
133,134
133,135
134,135
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
148,149
149,150
149,151
150,151
152,153
152,154
153,154
153,155
154,155
156,157
158,159
159,160
159,161
160,161
163,164
164,165
164,166
165,166
167,168
-----nextToken-----
2,4,8,13,14,20,22,23,28,30,33,35,39,40,44,46,51,53,57,59,60,66,67,68,69,75,76,77,78,82,86,88,92,93,97,101,103,106,108,111,115,116,120,122,127,129,135,136,137,138,144,145,146,147,151,155,157,161,162,166,168
-----computeFrom-----
34,35
34,36
42,43
42,44
62,63
62,64
71,72
71,73
95,96
95,97
109,110
109,111
118,119
118,120
125,126
125,127
131,132
131,133
140,141
140,142
-----guardedBy-----
120,129
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(85,11,0)
(51,24,0)
(19,27,0)
(83,48,0)
(83,65,0)
(19,57,0)
(57,19,0)
(65,83,0)
(73,8,0)
(27,19,0)
(77,8,0)
(66,3,0)
(60,8,0)
(12,88,0)
(18,71,0)
(49,18,0)
(74,17,0)
(7,14,0)
(69,70,0)
(53,25,0)
(41,56,0)
(35,8,0)
(32,14,0)
(13,20,0)
(14,9,0)
(42,46,0)
(52,8,0)
(18,34,0)
(49,8,0)
(27,8,0)
(48,83,0)
(50,3,0)
(43,36,0)
(82,83,0)
(61,56,0)
(79,77,0)
(4,8,0)
(22,51,0)
(17,74,0)
(88,56,0)
(43,87,0)
(1,72,0)
(0,34,0)
(77,72,0)
(70,0,0)
(72,36,0)
(75,48,0)
(37,36,0)
(71,18,0)
(30,49,0)
(31,4,0)
(63,24,0)
(36,43,0)
(43,29,0)
(87,43,0)
(44,13,0)
(29,43,0)
(67,75,0)
(40,23,0)
(88,68,0)
(47,49,0)
(58,0,0)
(78,85,0)
(17,23,0)
(39,66,0)
(8,16,0)
(89,72,0)
(24,51,0)
(56,88,0)
(32,89,0)
(51,73,0)
(21,36,0)
(83,82,0)
(75,72,0)
(34,0,0)
(33,37,0)
(15,73,0)
(6,32,0)
(55,8,0)
(28,24,0)
(34,18,0)
(29,49,0)
(77,49,0)
(82,9,0)
(85,78,0)
(29,23,0)
(47,64,0)
(26,78,0)
(70,69,0)
(2,47,0)
(0,70,0)
(36,8,0)
(3,4,0)
(76,47,0)
(66,49,0)
(38,66,0)
(10,37,0)
(68,9,0)
(3,66,0)
(59,29,0)
(23,29,0)
(19,64,0)
(89,32,0)
(56,72,0)
(48,75,0)
(23,17,0)
(86,89,0)
(64,47,0)
(72,9,0)
(24,49,0)
(46,49,0)
(80,89,0)
(18,49,0)
(62,72,0)
(54,68,0)
(45,46,0)
(81,75,0)
(64,19,0)
(85,78,1)
(14,7,1)
(83,48,1)
(75,81,1)
(39,38,1)
(72,36,1)
(47,76,1)
(40,59,1)
(46,49,1)
(59,21,1)
(56,72,1)
(80,68,1)
(43,87,1)
(68,54,1)
(44,5,1)
(24,49,1)
(28,63,1)
(72,1,1)
(37,33,1)
(0,70,1)
(22,24,1)
(88,56,1)
(58,30,1)
(54,88,1)
(7,32,1)
(79,82,1)
(81,67,1)
(32,89,1)
(30,5,1)
(3,66,1)
(56,61,1)
(89,86,1)
(67,14,1)
(24,28,1)
(63,46,1)
(27,19,1)
(84,13,1)
(70,69,1)
(51,22,1)
(18,71,1)
(84,77,1)
(4,31,1)
(48,75,1)
(66,39,1)
(89,72,1)
(86,80,1)
(31,3,1)
(77,49,1)
(29,23,1)
(17,40,1)
(42,45,1)
(63,85,1)
(10,36,1)
(12,56,1)
(45,49,1)
(38,73,1)
(62,37,1)
(46,42,1)
(47,49,1)
(88,12,1)
(82,83,1)
(19,57,1)
(15,51,1)
(37,36,1)
(75,72,1)
(26,46,1)
(51,24,1)
(43,29,1)
(79,37,1)
(32,6,1)
(23,17,1)
(21,27,1)
(78,26,1)
(34,0,1)
(3,50,1)
(19,64,1)
(18,34,1)
(13,44,1)
(73,15,1)
(66,49,1)
(36,43,1)
(2,4,1)
(77,72,1)
(1,62,1)
(6,89,1)
(76,2,1)
(61,41,1)
(70,58,1)
(49,18,1)
(64,47,1)
(29,49,1)
(77,79,1)
(41,72,1)
(83,65,1)
(33,10,1)
(50,66,1)
(17,74,1)
(38,5,2)
(39,5,2)
(31,5,2)
(64,5,2)
(41,37,2)
(19,57,2)
(34,0,2)
(0,70,2)
(82,37,2)
(85,46,2)
(4,5,2)
(78,46,2)
(88,37,2)
(44,5,2)
(83,37,2)
(66,49,2)
(27,5,2)
(37,36,2)
(56,37,2)
(21,5,2)
(36,5,2)
(18,34,2)
(86,37,2)
(26,46,2)
(47,49,2)
(51,24,2)
(12,37,2)
(22,5,2)
(67,37,2)
(89,37,2)
(24,5,2)
(23,17,2)
(72,36,2)
(17,74,2)
(72,37,2)
(36,43,2)
(66,5,2)
(73,5,2)
(46,49,2)
(13,5,2)
(77,49,2)
(19,5,2)
(2,5,2)
(3,66,2)
(64,47,2)
(88,56,2)
(18,5,2)
(18,71,2)
(43,87,2)
(43,5,2)
(48,37,2)
(10,5,2)
(7,37,2)
(70,69,2)
(14,37,2)
(83,65,2)
(24,49,2)
(29,49,2)
(56,72,2)
(34,5,2)
(85,78,2)
(63,5,2)
(48,75,2)
(1,37,2)
(89,72,2)
(32,89,2)
(49,5,2)
(50,5,2)
(58,5,2)
(29,23,2)
(77,5,2)
(37,5,2)
(81,37,2)
(28,5,2)
(15,5,2)
(32,37,2)
(83,48,2)
(54,37,2)
(76,5,2)
(59,5,2)
(79,5,2)
(42,5,2)
(6,37,2)
(23,5,2)
(68,37,2)
(3,5,2)
(82,83,2)
(75,72,2)
(19,64,2)
(17,5,2)
(0,5,2)
(27,19,2)
(46,5,2)
(43,29,2)
(40,5,2)
(77,72,2)
(49,18,2)
(29,5,2)
(51,5,2)
(45,5,2)
(75,37,2)
(33,5,2)
(80,37,2)
(30,5,2)
(62,37,2)
(47,5,2)
(61,37,2)
(70,5,2)
-----------------------------------
(0,100*sizeof(struct _twoIntsStruct)
(1,tmpData)
(2,data)
(3,data[0].intTwo)
(4,data[0].intTwo = 0)
(5,staticFalse)
(6,intTwo)
(7,1)
(8,)
(9,)
(10,tmpData)
(11,)
(12,intOne)
(13,printLine("Benign, fixed string")
(14,data[0].intTwo = 1)
(15,0)
(16,)
(17,sizeof(struct _twoIntsStruct)
(18,(struct _twoIntsStruct *)
(19,(twoIntsStruct *)
(20,)
(21,tmpData)
(22,intOne)
(23,(130000)
(24,data[0])
(25,)
(26,1)
(27,printStructLine((twoIntsStruct *)
(28,0)
(29,realloc(data, (130000)
(30,data)
(31,0)
(32,data[0].intTwo)
(33,NULL)
(34,malloc(100*sizeof(struct _twoIntsStruct)
(35,if (data == NULL)
(36,tmpData = (struct _twoIntsStruct *)
(37,tmpData != NULL)
(38,data)
(39,0)
(40,130000)
(41,data)
(42,NULL)
(43,(struct _twoIntsStruct *)
(44,"Benign, fixed string")
(45,data)
(46,data == NULL)
(47,data[0])
(48,&data[0])
(49,* data = (struct _twoIntsStruct *)
(50,intTwo)
(51,data[0].intOne)
(52,if (tmpData != NULL)
(53,if(staticFalse)
(54,1)
(55,data)
(56,data[0])
(57,twoIntsStruct *)
(58,100)
(59,data)
(60,tmpData)
(61,0)
(62,data)
(63,data)
(64,&data[0])
(65,twoIntsStruct *)
(66,data[0])
(67,data)
(68,data[0].intOne = 1)
(69,struct _twoIntsStruct)
(70,sizeof(struct _twoIntsStruct)
(71,struct _twoIntsStruct *)
(72,data = tmpData)
(73,data[0].intOne = 0)
(74,struct _twoIntsStruct)
(75,data[0])
(76,0)
(77,free(data)
(78,-1)
(79,data)
(80,data)
(81,0)
(82,printStructLine((twoIntsStruct *)
(83,(twoIntsStruct *)
(84,RET)
(85,exit(-1)
(86,0)
(87,struct _twoIntsStruct *)
(88,data[0].intOne)
(89,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^