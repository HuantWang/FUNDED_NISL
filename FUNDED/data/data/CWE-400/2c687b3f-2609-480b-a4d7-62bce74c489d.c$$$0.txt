-----label-----
0
-----code-----
static void goodG2B1()
{
    int64_t * data;
    data = NULL;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
20,22
23,24
24,25
25,26
25,27
26,27
29,30
29,31
29,32
30,31
31,32
31,33
32,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
40,42
41,42
43,44
43,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
57,58
58,59
58,60
59,60
61,62
61,63
62,63
65,66
65,67
66,67
66,68
69,70
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,28,33,37,39,42,44,48,49,54,55,56,60,63,64,67,68,70
-----computeFrom-----
14,15
14,16
20,21
20,22
31,32
31,33
43,44
43,45
51,52
51,53
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int64_t * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int64_t * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,9,0)
(12,16,0)
(23,3,0)
(0,27,0)
(10,3,0)
(28,10,0)
(10,28,0)
(11,3,0)
(22,4,0)
(14,0,0)
(16,10,0)
(0,14,0)
(11,16,0)
(28,14,0)
(15,4,0)
(14,28,0)
(27,0,0)
(30,5,0)
(25,13,0)
(24,13,0)
(17,20,0)
(5,8,0)
(19,10,0)
(20,13,0)
(26,13,0)
(7,27,0)
(31,18,0)
(6,18,0)
(1,0,0)
(29,20,0)
(9,28,0)
(2,16,0)
(16,11,0)
(5,30,1)
(0,27,1)
(28,14,1)
(19,18,1)
(14,0,1)
(4,22,1)
(16,10,1)
(18,6,1)
(21,4,1)
(16,12,1)
(30,18,1)
(1,19,1)
(15,11,1)
(22,15,1)
(27,7,1)
(2,23,1)
(29,17,1)
(12,2,1)
(31,20,1)
(7,1,1)
(15,5,1)
(23,10,1)
(10,28,1)
(11,16,1)
(28,9,1)
(20,29,1)
(6,31,1)
(30,18,2)
(5,18,2)
(10,18,2)
(7,18,2)
(0,27,2)
(14,0,2)
(12,18,2)
(28,18,2)
(11,16,2)
(2,18,2)
(10,28,2)
(11,18,2)
(1,18,2)
(28,9,2)
(0,18,2)
(28,14,2)
(27,18,2)
(16,10,2)
(16,18,2)
(14,18,2)
(23,18,2)
(19,18,2)
-----------------------------------
(0,100*sizeof(int64_t)
(1,100)
(2,data)
(3,)
(4,5==5)
(5,printLine("Benign, fixed string")
(6,5)
(7,int64_t)
(8,)
(9,int64_t *)
(10,data = (int64_t *)
(11,printLongLongLine(data[0])
(12,0)
(13,)
(14,ALLOCA(100*sizeof(int64_t)
(15,5)
(16,data[0])
(17,data)
(18,5!=5)
(19,data)
(20,data = NULL)
(21,RET)
(22,5)
(23,L)
(24,data)
(25,if(5==5)
(26,if(5!=5)
(27,sizeof(int64_t)
(28,(int64_t *)
(29,NULL)
(30,"Benign, fixed string")
(31,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^