-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(1)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
60,61
60,62
62,63
62,64
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,61,66,68,72,73
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_02_bad()
CWE400_Resource_Exhaustion__fgets_sleep_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(1)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
1
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(12,26,0)
(33,32,0)
(19,2,0)
(35,33,0)
(32,5,0)
(30,22,0)
(31,32,0)
(1,27,0)
(1,15,0)
(9,15,0)
(17,26,0)
(13,3,0)
(22,32,0)
(3,29,0)
(16,2,0)
(32,33,0)
(33,27,0)
(20,27,0)
(6,28,0)
(24,2,0)
(36,1,0)
(14,18,0)
(22,0,0)
(15,1,0)
(23,1,0)
(21,1,0)
(7,24,0)
(22,24,0)
(24,18,0)
(26,10,0)
(18,24,0)
(4,2,0)
(8,27,0)
(28,0,0)
(27,26,0)
(35,31,1)
(15,1,1)
(22,30,1)
(1,27,1)
(15,9,1)
(25,3,1)
(36,23,1)
(25,32,1)
(20,8,1)
(22,24,1)
(33,35,1)
(14,7,1)
(28,6,1)
(1,21,1)
(6,22,1)
(13,15,1)
(21,36,1)
(11,28,1)
(30,25,1)
(11,25,1)
(31,15,1)
(34,24,1)
(22,32,1)
(25,34,1)
(27,20,1)
(8,34,1)
(23,27,1)
(3,13,1)
(32,33,1)
(9,1,1)
(24,18,1)
(33,27,1)
(18,14,1)
(13,15,2)
(35,15,2)
(33,15,2)
(33,27,2)
(15,34,2)
(24,18,2)
(21,34,2)
(28,25,2)
(23,34,2)
(22,32,2)
(6,25,2)
(36,34,2)
(9,34,2)
(20,34,2)
(22,25,2)
(22,24,2)
(31,15,2)
(30,25,2)
(8,34,2)
(15,1,2)
(1,27,2)
(1,34,2)
(32,15,2)
(32,33,2)
(3,15,2)
(27,34,2)
-----------------------------------
(0,)
(1,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,)
(3,printLine("fgets()
(4,if(1)
(5,)
(6,"Sleep time possibly too long")
(7,count)
(8,inputBuffer)
(9,NULL)
(10,)
(11,RET)
(12,inputBuffer)
(13,"fgets()
(14,1)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,if(1)
(17,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,-1)
(19,count)
(20,"")
(21,stdin)
(22,SLEEP(count)
(23,inputBuffer)
(24,count = -1)
(25,1)
(26,)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,printLine("Sleep time possibly too long")
(29,)
(30,count)
(31,count)
(32,count = atoi(inputBuffer)
(33,atoi(inputBuffer)
(34,1)
(35,inputBuffer)
(36,CHAR_ARRAY_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^