-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_21_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    badStatic = 1; /* true */
    badSink(count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
66,67
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,61,65,67
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
58,59
58,60
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_21_bad(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    badStatic = 1; /* true */    badSink(count);}
void
CWE400_Resource_Exhaustion__fgets_sleep_21_bad()
CWE400_Resource_Exhaustion__fgets_sleep_21_bad
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    badStatic = 1; /* true */    badSink(count);}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
badStatic = 1;
badStatic = 1
badStatic
badStatic
1
badSink(count);
badSink(count)
badSink
badSink
count
count
-----joern-----
(7,31,0)
(28,14,0)
(14,7,0)
(30,31,0)
(13,17,0)
(14,17,0)
(8,6,0)
(23,19,0)
(12,7,0)
(4,16,0)
(5,31,0)
(17,14,0)
(10,26,0)
(9,7,0)
(4,21,0)
(6,3,0)
(25,11,0)
(31,19,0)
(21,7,0)
(26,19,0)
(23,4,0)
(0,26,0)
(27,14,0)
(2,3,0)
(1,21,0)
(24,25,0)
(3,19,0)
(29,14,0)
(3,6,0)
(18,19,0)
(23,3,0)
(21,4,0)
(15,23,0)
(22,4,0)
(23,15,1)
(17,14,1)
(4,21,1)
(23,4,1)
(23,3,1)
(20,23,1)
(7,9,1)
(14,27,1)
(3,6,1)
(13,14,1)
(22,17,1)
(0,4,1)
(29,7,1)
(6,8,1)
(8,2,1)
(28,29,1)
(9,12,1)
(14,7,1)
(12,3,1)
(25,24,1)
(1,22,1)
(10,0,1)
(21,7,1)
(17,13,1)
(15,26,1)
(27,28,1)
(0,25,1)
(24,17,1)
(26,10,1)
(21,1,1)
(23,4,2)
(1,17,2)
(17,14,2)
(24,17,2)
(14,7,2)
(22,17,2)
(23,3,2)
(21,17,2)
(25,17,2)
(3,6,2)
(21,7,2)
(4,17,2)
(4,21,2)
-----------------------------------
(0,badStatic)
(1,inputBuffer)
(2,count)
(3,count = -1)
(4,count = atoi(inputBuffer)
(5,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,-1)
(7,inputBuffer[CHAR_ARRAY_SIZE] = "")
(8,1)
(9,"")
(10,1)
(11,)
(12,inputBuffer)
(13,NULL)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,count)
(16,)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,count)
(19,)
(20,RET)
(21,atoi(inputBuffer)
(22,count)
(23,badSink(count)
(24,"fgets()
(25,printLine("fgets()
(26,badStatic = 1)
(27,stdin)
(28,CHAR_ARRAY_SIZE)
(29,inputBuffer)
(30,inputBuffer)
(31,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^