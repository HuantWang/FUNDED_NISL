-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
86,87
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,85,87
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,17,0)
(35,17,0)
(18,6,0)
(5,7,0)
(31,34,0)
(27,16,0)
(26,42,0)
(16,47,0)
(19,22,0)
(15,9,0)
(8,7,0)
(18,16,0)
(22,46,0)
(31,18,0)
(28,0,0)
(17,34,0)
(8,16,0)
(44,34,0)
(41,3,0)
(23,24,0)
(20,46,0)
(1,0,0)
(45,9,0)
(33,47,0)
(37,8,0)
(3,41,0)
(43,22,0)
(34,31,0)
(4,47,0)
(29,47,0)
(25,31,0)
(12,24,0)
(21,47,0)
(33,3,0)
(26,39,0)
(38,42,0)
(18,31,0)
(22,16,0)
(0,24,0)
(30,21,0)
(16,18,0)
(3,33,0)
(41,16,0)
(7,21,0)
(14,41,0)
(9,16,0)
(40,41,0)
(7,8,0)
(13,24,0)
(2,29,0)
(32,8,0)
(31,0,0)
(6,18,0)
(42,26,0)
(46,22,0)
(46,29,0)
(30,7,1)
(9,45,1)
(2,46,1)
(34,17,1)
(29,2,1)
(31,34,1)
(3,41,1)
(40,29,1)
(21,30,1)
(17,35,1)
(32,37,1)
(33,3,1)
(5,8,1)
(9,16,1)
(15,16,1)
(31,0,1)
(10,36,1)
(8,32,1)
(7,8,1)
(38,9,1)
(28,1,1)
(0,28,1)
(16,18,1)
(18,31,1)
(20,22,1)
(14,40,1)
(45,15,1)
(22,19,1)
(7,5,1)
(46,20,1)
(43,21,1)
(25,27,1)
(8,16,1)
(41,14,1)
(18,6,1)
(36,33,1)
(11,0,1)
(41,16,1)
(22,16,1)
(46,22,1)
(44,25,1)
(27,11,1)
(26,42,1)
(19,43,1)
(42,38,1)
(37,9,1)
(36,11,1)
(35,44,1)
(37,26,1)
(22,16,2)
(41,16,2)
(30,11,2)
(16,11,2)
(42,9,2)
(9,16,2)
(45,11,2)
(25,11,2)
(33,3,2)
(35,11,2)
(21,11,2)
(8,11,2)
(29,11,2)
(16,18,2)
(19,11,2)
(38,9,2)
(37,11,2)
(34,11,2)
(31,34,2)
(31,0,2)
(32,11,2)
(20,11,2)
(43,11,2)
(46,22,2)
(22,11,2)
(7,8,2)
(26,9,2)
(8,16,2)
(18,31,2)
(5,11,2)
(40,11,2)
(2,11,2)
(41,11,2)
(14,11,2)
(18,6,2)
(15,11,2)
(18,11,2)
(26,42,2)
(9,11,2)
(34,17,2)
(7,11,2)
(3,11,2)
(31,11,2)
(17,11,2)
(46,11,2)
(44,11,2)
(3,41,2)
(33,11,2)
(27,11,2)
-----------------------------------
(0,data = NULL)
(1,data)
(2,0)
(3,&data[0])
(4,if (data == NULL)
(5,intOne)
(6,twoIntsStruct *)
(7,data[0].intOne)
(8,data[0])
(9,data == NULL)
(10,RET)
(11,1)
(12,if(1)
(13,if(1)
(14,0)
(15,data)
(16,data = (twoIntsStruct *)
(17,sizeof(twoIntsStruct)
(18,(twoIntsStruct *)
(19,0)
(20,intTwo)
(21,data[0].intOne = 0)
(22,data[0])
(23,data)
(24,)
(25,data)
(26,exit(-1)
(27,data)
(28,NULL)
(29,data[0].intTwo = 0)
(30,0)
(31,realloc(data, 100*sizeof(twoIntsStruct)
(32,0)
(33,printStructLine(&data[0])
(34,100*sizeof(twoIntsStruct)
(35,twoIntsStruct)
(36,1)
(37,data)
(38,1)
(39,)
(40,data)
(41,data[0])
(42,-1)
(43,data)
(44,100)
(45,NULL)
(46,data[0].intTwo)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^