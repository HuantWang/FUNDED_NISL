-----label-----
0
-----code-----
static int controller_send_error(Connection *connection, uint32_t serial, const char *error) {
        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;
        _c_cleanup_(message_unrefp) Message *message = NULL;
        _c_cleanup_(c_freep) void *data = NULL;
        size_t n_data;
        int r;

        if (!serial)
                return 0;

        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), controller_type_out_unit, 1);
        c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",
                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,
                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,
                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);

        r = c_dvar_end_write(&var, &data, &n_data);
        if (r)
                return error_origin(r);

        r = message_new_outgoing(&message, data, n_data);
        if (r)
                return error_fold(r);
        data = NULL;

        r = connection_queue(connection, NULL, message);
        if (r) {
                if (r == CONNECTION_E_QUOTA)
                        connection_close(connection);
                else
                        return error_fold(r);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
34,36
36,37
37,38
39,40
40,41
40,42
41,42
43,44
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
51,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
62,63
64,65
65,66
66,67
66,68
68,69
68,70
68,71
71,72
72,73
74,75
75,76
75,77
76,77
78,79
80,81
81,82
81,83
83,84
85,86
85,87
86,87
87,88
89,90
91,92
92,93
92,94
92,95
92,96
92,97
93,94
95,96
96,97
98,99
99,100
99,101
100,101
102,103
104,105
107,108
108,109
108,110
108,111
108,112
108,113
108,114
108,115
108,116
108,117
108,118
108,119
108,120
108,121
108,122
108,123
109,110
111,112
112,113
115,116
115,117
115,118
116,117
116,118
117,118
119,120
120,121
124,125
126,127
130,131
130,132
131,132
132,133
135,136
137,138
139,140
141,142
143,144
145,146
147,148
148,149
148,150
149,150
151,152
151,153
151,154
151,155
152,153
154,155
155,156
157,158
158,159
160,161
161,162
163,164
163,165
164,165
166,167
167,168
167,169
168,169
170,171
172,173
173,174
173,175
174,175
176,177
176,178
176,179
176,180
177,178
179,180
180,181
182,183
184,185
186,187
186,188
187,188
189,190
190,191
190,192
191,192
193,194
195,196
196,197
196,198
197,198
199,200
201,202
202,203
202,204
203,204
205,206
205,207
205,208
205,209
206,207
208,209
210,211
212,213
214,215
214,216
215,216
217,218
218,219
218,220
218,221
219,220
219,221
220,221
222,223
224,225
225,226
225,227
226,227
228,229
230,231
231,232
231,233
232,233
234,235
236,237
-----nextToken-----
2,4,7,9,10,13,15,17,19,20,25,28,33,35,38,42,45,50,52,53,56,60,63,67,69,70,73,77,79,82,84,88,90,94,97,101,103,105,106,110,113,114,118,121,122,123,125,127,128,129,133,134,136,138,140,142,144,146,150,153,156,159,162,165,169,171,175,178,181,183,185,188,192,194,198,200,204,207,209,211,213,216,221,223,227,229,233,235,237
-----computeFrom-----
99,100
99,101
130,131
130,132
148,149
148,150
173,174
173,175
196,197
196,198
202,203
202,204
219,220
219,221
-----guardedBy-----
-----guardedByNegation-----
221,235
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int controller_send_error(Connection *connection, uint32_t serial, const char *error) {        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        _c_cleanup_(c_freep) void *data = NULL;        size_t n_data;        int r;        if (!serial)                return 0;        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), controller_type_out_unit, 1);        c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        data = NULL;        r = connection_queue(connection, NULL, message);        if (r) {                if (r == CONNECTION_E_QUOTA)                        connection_close(connection);                else                        return error_fold(r);        }        return 0;}
static int
controller_send_error(Connection *connection, uint32_t serial, const char *error)
controller_send_error
Connection *connection
Connection
Connection
*connection
*
connection
uint32_t serial
uint32_t
uint32_t
serial
serial
const char *error
const char
*error
*
error
{        _c_cleanup_(c_dvar_deinit) CDVar var = C_DVAR_INIT;        _c_cleanup_(message_unrefp) Message *message = NULL;        _c_cleanup_(c_freep) void *data = NULL;        size_t n_data;        int r;        if (!serial)                return 0;        c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), controller_type_out_unit, 1);        c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);        r = c_dvar_end_write(&var, &data, &n_data);        if (r)                return error_origin(r);        r = message_new_outgoing(&message, data, n_data);        if (r)                return error_fold(r);        data = NULL;        r = connection_queue(connection, NULL, message);        if (r) {                if (r == CONNECTION_E_QUOTA)                        connection_close(connection);                else                        return error_fold(r);        }        return 0;}
_c_cleanup_(c_dvar_deinit)
_c_cleanup_(c_dvar_deinit)
_c_cleanup_
_c_cleanup_
(c_dvar_deinit)
c_dvar_deinit
c_dvar_deinit
)
CDVar var = C_DVAR_INIT;
CDVar var = C_DVAR_INIT;
CDVar
CDVar
var = C_DVAR_INIT
var
= C_DVAR_INIT
C_DVAR_INIT
C_DVAR_INIT
_c_cleanup_(message_unrefp)
_c_cleanup_(message_unrefp)
_c_cleanup_
_c_cleanup_
(message_unrefp)
message_unrefp
message_unrefp
)
Message *message = NULL;
Message *message = NULL;
Message
Message
*message = NULL
*
message
= NULL
NULL
NULL
_c_cleanup_(c_freep)
_c_cleanup_(c_freep)
_c_cleanup_
_c_cleanup_
(c_freep)
c_freep
c_freep
)
void *data = NULL;
void *data = NULL;
void
*data = NULL
*
data
= NULL
NULL
NULL
size_t n_data;
size_t n_data;
size_t
size_t
n_data
n_data
int r;
int r;
int
r
r
if (!serial)                return 0;
!serial
serial
serial
return 0;
0
c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), controller_type_out_unit, 1);
c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN), controller_type_out_unit, 1)
c_dvar_begin_write
c_dvar_begin_write
&var
var
var
(__BYTE_ORDER == __BIG_ENDIAN)
__BYTE_ORDER == __BIG_ENDIAN
__BYTE_ORDER
__BYTE_ORDER
__BIG_ENDIAN
__BIG_ENDIAN
controller_type_out_unit
controller_type_out_unit
1
c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error);
c_dvar_write(&var, "((yyyyuu[(y<u>)(y<s>)])())",                     c_dvar_is_big_endian(&var) ? 'B' : 'l', DBUS_MESSAGE_TYPE_ERROR, DBUS_HEADER_FLAG_NO_REPLY_EXPECTED, 1, 0, (uint32_t)-1,                     DBUS_MESSAGE_FIELD_REPLY_SERIAL, c_dvar_type_u, serial,                     DBUS_MESSAGE_FIELD_ERROR_NAME, c_dvar_type_s, error)
c_dvar_write
c_dvar_write
&var
var
var
"((yyyyuu[(y<u>)(y<s>)])())"
c_dvar_is_big_endian(&var) ? 'B' : 'l'
c_dvar_is_big_endian(&var)
c_dvar_is_big_endian
c_dvar_is_big_endian
&var
var
var
'B'
'l'
DBUS_MESSAGE_TYPE_ERROR
DBUS_MESSAGE_TYPE_ERROR
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
DBUS_HEADER_FLAG_NO_REPLY_EXPECTED
1
0
(uint32_t)-1
(uint32_t)
uint32_t
uint32_t
1
DBUS_MESSAGE_FIELD_REPLY_SERIAL
DBUS_MESSAGE_FIELD_REPLY_SERIAL
c_dvar_type_u
c_dvar_type_u
serial
serial
DBUS_MESSAGE_FIELD_ERROR_NAME
DBUS_MESSAGE_FIELD_ERROR_NAME
c_dvar_type_s
c_dvar_type_s
error
error
r = c_dvar_end_write(&var, &data, &n_data);
r = c_dvar_end_write(&var, &data, &n_data)
r
r
c_dvar_end_write(&var, &data, &n_data)
c_dvar_end_write
c_dvar_end_write
&var
var
var
&data
data
data
&n_data
n_data
n_data
if (r)                return error_origin(r);
r
r
return error_origin(r);
error_origin(r)
error_origin
error_origin
r
r
r = message_new_outgoing(&message, data, n_data);
r = message_new_outgoing(&message, data, n_data)
r
r
message_new_outgoing(&message, data, n_data)
message_new_outgoing
message_new_outgoing
&message
message
message
data
data
n_data
n_data
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
data = NULL;
data = NULL
data
data
NULL
NULL
r = connection_queue(connection, NULL, message);
r = connection_queue(connection, NULL, message)
r
r
connection_queue(connection, NULL, message)
connection_queue
connection_queue
connection
connection
NULL
NULL
message
message
if (r) {                if (r == CONNECTION_E_QUOTA)                        connection_close(connection);                else                        return error_fold(r);        }
r
r
{                if (r == CONNECTION_E_QUOTA)                        connection_close(connection);                else                        return error_fold(r);        }
if (r == CONNECTION_E_QUOTA)                        connection_close(connection);                else                        return error_fold(r);
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
connection_close(connection);
connection_close(connection)
connection_close
connection_close
connection
connection
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(77,10,0)
(97,11,0)
(101,47,0)
(27,37,0)
(95,75,0)
(87,23,0)
(10,42,0)
(10,93,0)
(96,32,0)
(0,58,0)
(86,47,0)
(107,90,0)
(81,40,0)
(52,32,0)
(48,10,0)
(75,23,0)
(16,62,0)
(37,104,0)
(29,100,0)
(10,103,0)
(17,10,0)
(32,47,0)
(3,90,0)
(88,74,0)
(103,10,0)
(61,37,0)
(19,57,0)
(106,98,0)
(0,32,0)
(85,32,0)
(46,52,0)
(94,58,0)
(99,0,0)
(87,85,0)
(23,87,0)
(44,47,0)
(79,94,0)
(55,84,0)
(40,72,0)
(37,53,0)
(19,107,0)
(57,90,0)
(18,82,0)
(11,68,0)
(30,60,0)
(39,103,0)
(78,100,0)
(87,49,0)
(19,1,0)
(4,85,0)
(41,32,0)
(83,47,0)
(35,37,0)
(103,32,0)
(10,11,0)
(38,10,0)
(66,47,0)
(1,90,0)
(34,60,0)
(91,46,0)
(56,90,0)
(36,53,0)
(86,100,0)
(100,86,0)
(19,3,0)
(51,69,0)
(53,37,0)
(19,56,0)
(89,94,0)
(105,46,0)
(58,0,0)
(46,84,0)
(10,94,0)
(28,8,0)
(59,90,0)
(74,104,0)
(49,87,0)
(7,49,0)
(22,86,0)
(80,33,0)
(107,47,0)
(67,10,0)
(43,10,0)
(11,97,0)
(69,86,0)
(98,61,0)
(52,46,0)
(46,47,0)
(73,10,0)
(10,47,0)
(15,61,0)
(90,40,0)
(23,47,0)
(50,10,0)
(37,61,0)
(94,10,0)
(72,40,0)
(13,52,0)
(8,86,0)
(2,68,0)
(100,82,0)
(84,46,0)
(64,18,0)
(65,47,0)
(26,10,0)
(20,84,0)
(85,87,0)
(76,100,0)
(5,104,0)
(45,47,0)
(63,69,0)
(75,1,0)
(68,11,0)
(87,74,0)
(40,90,0)
(60,47,0)
(54,23,0)
(58,94,0)
(14,47,0)
(71,10,0)
(62,42,0)
(92,47,0)
(24,107,0)
(31,92,0)
(104,47,0)
(8,57,0)
(74,87,0)
(25,104,0)
(61,47,0)
(70,47,0)
(98,3,0)
(11,10,0)
(90,92,0)
(21,10,0)
(6,56,0)
(23,87,1)
(24,18,1)
(59,40,1)
(10,38,1)
(30,34,1)
(94,79,1)
(8,86,1)
(46,52,1)
(62,16,1)
(40,81,1)
(81,32,1)
(48,21,1)
(11,68,1)
(91,84,1)
(10,93,1)
(64,69,1)
(54,10,1)
(36,15,1)
(90,59,1)
(26,103,1)
(88,85,1)
(20,52,1)
(15,102,1)
(103,39,1)
(79,58,1)
(94,89,1)
(71,48,1)
(102,23,1)
(1,75,1)
(75,95,1)
(89,58,1)
(21,77,1)
(74,88,1)
(99,26,1)
(73,17,1)
(46,105,1)
(28,69,1)
(75,23,1)
(1,90,1)
(16,104,1)
(24,12,1)
(56,6,1)
(55,20,1)
(7,74,1)
(18,82,1)
(13,62,1)
(104,25,1)
(87,49,1)
(107,90,1)
(92,31,1)
(95,102,1)
(8,28,1)
(0,32,1)
(19,107,1)
(12,86,1)
(87,74,1)
(46,84,1)
(40,72,1)
(86,100,1)
(34,9,1)
(38,50,1)
(90,40,1)
(94,58,1)
(67,94,1)
(85,32,1)
(41,96,1)
(69,86,1)
(57,90,1)
(62,42,1)
(4,54,1)
(9,61,1)
(103,32,1)
(37,53,1)
(85,4,1)
(37,104,1)
(18,64,1)
(76,22,1)
(50,71,1)
(31,90,1)
(63,12,1)
(57,8,1)
(77,11,1)
(32,41,1)
(78,29,1)
(74,104,1)
(29,76,1)
(49,7,1)
(17,67,1)
(37,35,1)
(10,11,1)
(6,62,1)
(27,53,1)
(98,61,1)
(58,0,1)
(100,78,1)
(52,13,1)
(11,97,1)
(43,73,1)
(0,99,1)
(107,24,1)
(19,57,1)
(84,55,1)
(10,94,1)
(52,32,1)
(10,103,1)
(68,2,1)
(53,36,1)
(10,42,1)
(5,92,1)
(3,90,1)
(106,9,1)
(19,3,1)
(25,5,1)
(105,91,1)
(3,98,1)
(98,106,1)
(22,60,1)
(60,30,1)
(19,1,1)
(56,90,1)
(87,85,1)
(39,46,1)
(35,27,1)
(51,63,1)
(2,43,1)
(61,37,1)
(19,56,1)
(69,51,1)
(100,82,1)
(7,62,2)
(29,9,2)
(54,62,2)
(12,9,2)
(76,9,2)
(87,85,2)
(87,62,2)
(9,102,2)
(58,62,2)
(98,9,2)
(103,32,2)
(24,69,2)
(105,62,2)
(94,62,2)
(87,49,2)
(98,61,2)
(19,3,2)
(51,12,2)
(8,69,2)
(15,102,2)
(24,12,2)
(94,58,2)
(61,37,2)
(18,69,2)
(63,12,2)
(100,82,2)
(103,62,2)
(85,62,2)
(22,9,2)
(21,62,2)
(102,62,2)
(107,69,2)
(68,62,2)
(64,69,2)
(10,93,2)
(1,90,2)
(37,104,2)
(57,69,2)
(73,62,2)
(95,102,2)
(56,90,2)
(38,62,2)
(28,69,2)
(89,58,2)
(23,87,2)
(1,102,2)
(27,102,2)
(60,9,2)
(88,62,2)
(107,90,2)
(0,32,2)
(100,9,2)
(0,62,2)
(37,102,2)
(71,62,2)
(106,9,2)
(52,62,2)
(26,62,2)
(86,100,2)
(10,103,2)
(6,62,2)
(19,57,2)
(67,62,2)
(3,9,2)
(85,32,2)
(46,52,2)
(99,62,2)
(2,62,2)
(10,42,2)
(4,62,2)
(10,62,2)
(19,107,2)
(91,62,2)
(10,94,2)
(74,104,2)
(69,86,2)
(56,62,2)
(43,62,2)
(18,82,2)
(50,62,2)
(30,9,2)
(61,102,2)
(40,72,2)
(77,62,2)
(74,62,2)
(13,62,2)
(52,32,2)
(55,62,2)
(75,23,2)
(62,42,2)
(79,58,2)
(34,9,2)
(48,62,2)
(35,102,2)
(84,62,2)
(49,62,2)
(53,102,2)
(37,53,2)
(11,62,2)
(57,90,2)
(17,62,2)
(46,62,2)
(87,74,2)
(19,56,2)
(69,12,2)
(86,9,2)
(39,62,2)
(107,12,2)
(11,68,2)
(11,97,2)
(8,86,2)
(46,84,2)
(20,62,2)
(78,9,2)
(10,11,2)
(3,90,2)
(75,102,2)
(36,102,2)
(90,40,2)
(19,1,2)
(23,62,2)
(58,0,2)
-----------------------------------
(0,&var)
(1,return error_origin(r)
(2,1)
(3,return error_fold(r)
(4,var)
(5,data)
(6,0)
(7,n_data)
(8,error_fold(r)
(9,r)
(10,c_dvar_write(&var, "((yyyyuu[(y<u>)
(11,(uint32_t)
(12,r)
(13,var)
(14,if (!serial)
(15,r)
(16,serial)
(17,DBUS_HEADER_FLAG_NO_REPLY_EXPECTED)
(18,connection_close(connection)
(19,RET)
(20,__BYTE_ORDER)
(21,c_dvar_type_u)
(22,r)
(23,r = c_dvar_end_write(&var, &data, &n_data)
(24,0)
(25,NULL)
(26,"((yyyyuu[(y<u>)
(27,data)
(28,r)
(29,NULL)
(30,NULL)
(31,NULL)
(32,var = C_DVAR_INIT)
(33,)
(34,data)
(35,n_data)
(36,message)
(37,message_new_outgoing(&message, data, n_data)
(38,error)
(39,var)
(40,(message_unrefp)
(41,C_DVAR_INIT)
(42,uint32_t serial)
(43,0)
(44,var)
(45,if (r)
(46,c_dvar_begin_write(&var, (__BYTE_ORDER == __BIG_ENDIAN)
(47,)
(48,serial)
(49,&n_data)
(50,c_dvar_type_s)
(51,CONNECTION_E_QUOTA)
(52,&var)
(53,&message)
(54,r)
(55,__BIG_ENDIAN)
(56,return 0;)
(57,return error_fold(r)
(58,c_dvar_is_big_endian(&var)
(59,message)
(60,data = NULL)
(61,r = message_new_outgoing(&message, data, n_data)
(62,!serial)
(63,r)
(64,connection)
(65,if (r)
(66,r)
(67,DBUS_MESSAGE_TYPE_ERROR)
(68,-1)
(69,r == CONNECTION_E_QUOTA)
(70,data)
(71,DBUS_MESSAGE_FIELD_ERROR_NAME)
(72,message_unrefp)
(73,1)
(74,&data)
(75,error_origin(r)
(76,connection)
(77,DBUS_MESSAGE_FIELD_REPLY_SERIAL)
(78,message)
(79,\'B\')
(80,if (r == CONNECTION_E_QUOTA)
(81,Message)
(82,Connection *connection)
(83,if (r)
(84,__BYTE_ORDER == __BIG_ENDIAN)
(85,&var)
(86,r = connection_queue(connection, NULL, message)
(87,c_dvar_end_write(&var, &data, &n_data)
(88,data)
(89,\'l\')
(90,(message_unrefp)
(91,controller_type_out_unit)
(92,(message_unrefp)
(93,const char *error)
(94,c_dvar_is_big_endian(&var)
(95,r)
(96,var)
(97,uint32_t)
(98,error_fold(r)
(99,var)
(100,connection_queue(connection, NULL, message)
(101,n_data)
(102,r)
(103,&var)
(104,*data = NULL)
(105,1)
(106,r)
(107,return 0;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^