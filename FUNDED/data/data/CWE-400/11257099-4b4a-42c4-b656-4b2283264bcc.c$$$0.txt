-----label-----
0
-----code-----
static void goodB2G1()
{
    int64_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)calloc(100, sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
75,76
76,77
77,78
77,79
78,79
81,82
82,83
83,84
83,85
84,85
86,87
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,60,61,62,66,69,70,74,79,80,85,87
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)calloc(100, sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)calloc(100, sizeof(int64_t));
data = (int64_t *)calloc(100, sizeof(int64_t))
data
data
(int64_t *)calloc(100, sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
calloc(100, sizeof(int64_t))
calloc
calloc
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(14,36,0)
(18,22,0)
(12,7,0)
(23,30,0)
(17,24,0)
(10,29,0)
(22,15,0)
(36,22,0)
(24,17,0)
(37,15,0)
(26,22,0)
(27,11,0)
(38,6,0)
(9,26,0)
(13,38,0)
(5,12,0)
(36,14,0)
(8,10,0)
(6,38,0)
(26,3,0)
(35,29,0)
(28,29,0)
(11,22,0)
(19,24,0)
(3,26,0)
(22,36,0)
(12,22,0)
(1,15,0)
(20,11,0)
(31,26,0)
(25,23,0)
(12,10,0)
(0,6,0)
(16,29,0)
(17,32,0)
(3,15,0)
(4,10,0)
(36,38,0)
(38,36,0)
(11,22,1)
(26,31,1)
(22,36,1)
(6,0,1)
(20,22,1)
(10,8,1)
(38,6,1)
(12,22,1)
(1,17,1)
(34,12,1)
(18,33,1)
(1,11,1)
(36,38,1)
(19,11,1)
(2,3,1)
(9,1,1)
(26,22,1)
(33,10,1)
(23,25,1)
(31,9,1)
(8,4,1)
(34,23,1)
(2,33,1)
(0,13,1)
(11,27,1)
(12,5,1)
(12,10,1)
(24,19,1)
(13,18,1)
(25,2,1)
(3,26,1)
(36,14,1)
(27,20,1)
(5,2,1)
(17,24,1)
(0,33,2)
(13,33,2)
(11,33,2)
(24,11,2)
(18,33,2)
(9,33,2)
(20,33,2)
(17,11,2)
(12,22,2)
(12,10,2)
(5,2,2)
(3,26,2)
(27,33,2)
(38,33,2)
(36,14,2)
(11,22,2)
(12,2,2)
(22,36,2)
(25,2,2)
(19,11,2)
(31,33,2)
(36,38,2)
(6,33,2)
(36,33,2)
(26,33,2)
(1,33,2)
(22,33,2)
(38,6,2)
(23,2,2)
(3,33,2)
(17,24,2)
(26,22,2)
-----------------------------------
(0,int64_t)
(1,L)
(2,staticReturnsFalse()
(3,printLongLongLine(data[0])
(4,data)
(5,data)
(6,sizeof(int64_t)
(7,)
(8,NULL)
(9,data)
(10,data = NULL)
(11,data == NULL)
(12,free(data)
(13,100)
(14,int64_t *)
(15,)
(16,if(staticReturnsFalse()
(17,exit(-1)
(18,data)
(19,1)
(20,data)
(21, sizeof(int64_t)
(22,data = (int64_t *)
(23,printLine("Benign, fixed string")
(24,-1)
(25,"Benign, fixed string")
(26,data[0])
(27,NULL)
(28,if(staticReturnsTrue()
(29,)
(30,)
(31,0)
(32,)
(33,staticReturnsTrue()
(34,RET)
(35,data)
(36,(int64_t *)
(37,if (data == NULL)
(38,calloc(100, sizeof(int64_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^