-----label-----
0
-----code-----
static int send_queued(void)
{
    int mpi_errno = MPI_SUCCESS;
    MPID_nem_ptl_sendbuf_t *sb;
    int ret;
    MPIDI_STATE_DECL(MPID_STATE_SEND_QUEUED);

    MPIDI_FUNC_ENTER(MPID_STATE_SEND_QUEUED);

    while (!MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {
        int complete = TRUE;
        MPIDI_msg_sz_t send_len = 0;
        int i;
        MPID_Request *sreq;
        int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);

        sreq = MPIDI_CH3I_Sendq_head(send_queue); /* don't dequeue until we're finished sending this request */
        FREE_POP(&sb);
        
        /* copy the iov */
        MPIU_Assert(sreq->dev.iov_count <= 2);
        for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i) {
            MPIDI_msg_sz_t len;
            len = sreq->dev.iov[i].iov_len;
            if (len > BUFLEN)
                len = BUFLEN;
            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);
            send_len += len;
            if (len < sreq->dev.iov[i].iov_len) {
                /* ran out of space in buffer */
                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;
                sreq->dev.iov[i].iov_len -= len;
                sreq->dev.iov_offset = i;
                complete = FALSE;
                break;
            }
        }

        /* copy any noncontig data if there's room left in the send buffer */
        if (send_len < BUFLEN && REQ_PTL(sreq)->noncontig) {
            MPIDI_msg_sz_t last;
            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */
            last = sreq->dev.segment_size;
            if (last > sreq->dev.segment_first+BUFLEN) {
                last = sreq->dev.segment_first+BUFLEN;
                complete = FALSE;
            }
            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);
            send_len += last - sreq->dev.segment_first;
            sreq->dev.segment_first = last;
        }
        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,
                     MPIDI_Process.my_pg_rank);
        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));

        if (!complete)
            continue;
        
        /* sent all of the data */
        reqFn = sreq->dev.OnDataAvail;
        if (!reqFn) {
            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);
            MPIDI_CH3U_Request_complete(sreq);
        } else {
            complete = 0;
            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);
            if (mpi_errno) MPIU_ERR_POP(mpi_errno);

            if (!complete)
                continue;
        }
        
        /* completed the request */
        --(VC_PTL(sreq->ch.vc)->num_queued_sends);
        MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq);
        MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete");

        if (VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED) {
            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */
            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);
            if (mpi_errno) MPIU_ERR_POP(mpi_errno);
        }
        
    }
    
 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
11,12
11,13
13,14
13,15
15,16
16,17
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
45,46
46,47
46,48
47,48
49,50
51,52
52,53
53,54
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
55,64
55,65
55,66
55,67
55,68
55,69
55,70
55,71
55,72
55,73
55,74
56,57
57,58
57,59
59,60
59,61
61,62
62,63
64,65
65,66
65,67
66,67
68,69
68,70
70,71
72,73
73,74
73,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
84,85
85,86
85,87
87,88
87,89
87,90
87,91
88,89
88,90
91,92
91,93
92,93
94,95
94,96
97,98
97,99
98,99
100,101
100,102
103,104
103,105
105,106
105,107
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
122,123
124,125
125,126
125,127
126,127
128,129
128,130
129,130
129,131
130,131
130,132
131,132
136,137
136,138
136,139
136,140
137,138
138,139
138,140
139,140
141,142
141,143
142,143
142,144
143,144
147,148
147,149
148,149
150,151
150,152
151,152
151,153
152,153
152,154
153,154
157,158
157,159
158,159
158,160
159,160
163,164
164,165
166,167
166,168
166,169
166,170
166,171
166,172
167,168
168,169
168,170
169,170
171,172
173,174
174,175
174,176
175,176
177,178
177,179
178,179
178,180
179,180
179,181
180,181
180,182
181,182
185,186
188,189
188,190
189,190
189,191
190,191
192,193
194,195
195,196
195,197
196,197
198,199
200,201
201,202
201,203
201,204
201,205
202,203
204,205
204,206
205,206
205,207
206,207
210,211
210,212
211,212
211,213
212,213
212,214
213,214
213,215
214,215
218,219
221,222
223,224
224,225
224,226
225,226
227,228
229,230
229,231
230,231
230,232
231,232
233,234
233,235
234,235
234,236
235,236
235,237
236,237
236,238
237,238
241,242
244,245
244,246
244,247
244,248
244,249
245,246
246,247
246,248
247,248
247,249
248,249
248,250
249,250
249,251
250,251
250,252
251,252
255,256
258,259
258,260
259,260
259,261
260,261
260,262
262,263
264,265
264,266
265,266
265,267
266,267
266,268
267,268
267,269
268,269
272,273
275,276
277,278
278,279
278,280
279,280
279,281
280,281
280,282
281,282
281,283
282,283
282,284
283,284
287,288
290,291
292,293
293,294
293,295
294,295
294,296
295,296
295,297
296,297
300,301
302,303
303,304
303,305
304,305
306,307
309,310
309,311
310,311
310,312
311,312
311,313
312,313
314,315
316,317
316,318
317,318
317,319
318,319
320,321
323,324
323,325
323,326
323,327
323,328
323,329
323,330
324,325
325,326
325,327
326,327
328,329
330,331
331,332
331,333
332,333
334,335
336,337
337,338
337,339
338,339
340,341
340,342
341,342
341,343
342,343
346,347
346,348
347,348
347,349
348,349
350,351
350,352
351,352
351,353
352,353
352,354
353,354
357,358
359,360
359,361
360,361
361,362
361,363
362,363
364,365
364,366
365,366
365,367
366,367
366,368
367,368
371,372
373,374
374,375
374,376
375,376
377,378
379,380
380,381
380,382
380,383
380,384
380,385
380,386
381,382
383,384
383,385
384,385
384,386
385,386
389,390
389,391
390,391
390,392
391,392
395,396
397,398
397,399
398,399
398,400
399,400
403,404
404,405
404,406
405,406
405,407
406,407
406,408
407,408
409,410
413,414
414,415
414,416
415,416
417,418
417,419
418,419
420,421
420,422
421,422
421,423
422,423
426,427
427,428
427,429
428,429
428,430
429,430
429,431
430,431
434,435
436,437
437,438
437,439
438,439
440,441
440,442
440,443
440,444
440,445
440,446
440,447
440,448
440,449
440,450
440,451
441,442
443,444
445,446
445,447
446,447
446,448
447,448
450,451
450,452
451,452
451,453
452,453
456,457
458,459
460,461
460,462
461,462
461,463
462,463
464,465
464,466
465,466
465,467
466,467
471,472
471,473
472,473
472,474
473,474
475,476
475,477
476,477
476,478
477,478
484,485
486,487
486,488
487,488
490,491
491,492
491,493
491,494
491,495
491,496
491,497
491,498
492,493
494,495
496,497
498,499
502,503
502,504
503,504
505,506
507,508
507,509
508,509
509,510
512,513
513,514
513,515
514,515
516,517
516,518
517,518
517,519
518,519
522,523
522,524
522,525
523,524
524,525
526,527
526,528
527,528
528,529
528,530
529,530
531,532
531,533
532,533
532,534
533,534
535,536
537,538
539,540
540,541
540,542
541,542
543,544
545,546
545,547
545,548
545,549
546,547
547,548
547,549
548,549
551,552
552,553
552,554
553,554
555,556
555,557
555,558
555,559
556,557
558,559
558,560
559,560
559,561
560,561
564,565
566,567
567,568
569,570
569,571
570,571
572,573
573,574
573,575
574,575
576,577
578,579
578,580
579,580
580,581
583,584
584,585
585,586
586,587
586,588
587,588
587,589
588,589
590,591
590,592
591,592
591,593
592,593
597,598
598,599
598,600
598,601
599,600
601,602
602,603
604,605
605,606
607,608
608,609
608,610
608,611
608,612
609,610
611,612
613,614
616,617
616,618
617,618
617,619
618,619
618,620
619,620
619,621
620,621
620,622
621,622
623,624
623,625
624,625
624,626
625,626
631,632
631,633
632,633
632,634
633,634
633,635
634,635
634,636
635,636
640,641
642,643
642,644
643,644
644,645
644,646
645,646
647,648
647,649
648,649
650,651
650,652
651,652
651,653
652,653
656,657
656,658
657,658
659,660
660,661
660,662
661,662
663,664
665,666
665,667
667,668
668,669
668,670
669,670
671,672
673,674
674,675
676,677
676,678
678,679
-----nextToken-----
2,4,6,8,12,14,17,21,23,24,27,29,33,36,40,42,48,50,54,58,60,63,67,69,71,74,76,80,82,83,86,89,90,93,95,96,99,101,102,104,106,107,111,114,116,120,123,127,132,133,134,135,140,144,145,146,149,154,155,156,160,161,162,165,170,172,176,182,183,184,186,187,191,193,197,199,203,207,208,209,215,216,217,219,220,222,226,228,232,238,239,240,242,243,252,253,254,256,257,261,263,269,270,271,273,274,276,284,285,286,288,289,291,297,298,299,301,305,307,308,313,315,319,321,322,327,329,333,335,339,343,344,345,349,354,355,356,358,363,368,369,370,372,376,378,382,386,387,388,392,393,394,396,400,401,402,408,410,411,412,416,419,423,424,425,431,432,433,435,439,442,444,448,449,453,454,455,457,459,463,467,468,469,470,474,478,479,480,481,482,483,485,488,489,493,495,497,499,500,501,504,506,510,511,515,519,520,521,525,530,534,536,538,542,544,549,550,554,557,561,562,563,565,568,571,575,577,581,582,589,593,594,595,596,600,603,606,610,612,614,615,622,626,627,628,629,630,636,637,638,639,641,646,649,653,654,655,658,662,664,666,670,672,675,677,679
-----computeFrom-----
44,45
44,46
109,110
109,111
128,129
128,130
138,139
138,140
147,148
147,149
150,151
150,152
174,175
174,176
189,190
189,191
195,196
195,197
224,225
224,226
230,231
230,232
246,247
246,248
258,259
258,260
278,279
278,280
293,294
293,295
303,304
303,305
310,311
310,312
311,312
311,313
337,338
337,339
347,348
347,349
350,351
350,352
361,362
361,363
364,365
364,366
374,375
374,376
414,415
414,416
417,418
417,419
427,428
427,429
437,438
437,439
513,514
513,515
531,532
531,533
547,548
547,549
552,553
552,554
617,618
617,619
618,619
618,620
631,632
631,633
644,645
644,646
-----guardedBy-----
191,197
193,199
240,286
232,291
239,298
243,289
242,301
238,297
313,416
319,408
315,372
321,431
349,363
355,369
358,372
354,368
356,370
637,654
638,655
636,653
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;UnaryExpression;UnaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int send_queued(void){    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_sendbuf_t *sb;    int ret;    MPIDI_STATE_DECL(MPID_STATE_SEND_QUEUED);    MPIDI_FUNC_ENTER(MPID_STATE_SEND_QUEUED);    while (!MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        int complete = TRUE;        MPIDI_msg_sz_t send_len = 0;        int i;        MPID_Request *sreq;        int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);        sreq = MPIDI_CH3I_Sendq_head(send_queue); /* don't dequeue until we're finished sending this request */        FREE_POP(&sb);                /* copy the iov */        MPIU_Assert(sreq->dev.iov_count <= 2);        for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i) {            MPIDI_msg_sz_t len;            len = sreq->dev.iov[i].iov_len;            if (len > BUFLEN)                len = BUFLEN;            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);            send_len += len;            if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }        }        /* copy any noncontig data if there's room left in the send buffer */        if (send_len < BUFLEN && REQ_PTL(sreq)->noncontig) {            MPIDI_msg_sz_t last;            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */            last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            send_len += last - sreq->dev.segment_first;            sreq->dev.segment_first = last;        }        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        if (!complete)            continue;                /* sent all of the data */        reqFn = sreq->dev.OnDataAvail;        if (!reqFn) {            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);            MPIDI_CH3U_Request_complete(sreq);        } else {            complete = 0;            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);            if (!complete)                continue;        }                /* completed the request */        --(VC_PTL(sreq->ch.vc)->num_queued_sends);        MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq);        MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete");        if (VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED) {            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);        }            }     fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
send_queued(void)
send_queued
void
void


{    int mpi_errno = MPI_SUCCESS;    MPID_nem_ptl_sendbuf_t *sb;    int ret;    MPIDI_STATE_DECL(MPID_STATE_SEND_QUEUED);    MPIDI_FUNC_ENTER(MPID_STATE_SEND_QUEUED);    while (!MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        int complete = TRUE;        MPIDI_msg_sz_t send_len = 0;        int i;        MPID_Request *sreq;        int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);        sreq = MPIDI_CH3I_Sendq_head(send_queue); /* don't dequeue until we're finished sending this request */        FREE_POP(&sb);                /* copy the iov */        MPIU_Assert(sreq->dev.iov_count <= 2);        for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i) {            MPIDI_msg_sz_t len;            len = sreq->dev.iov[i].iov_len;            if (len > BUFLEN)                len = BUFLEN;            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);            send_len += len;            if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }        }        /* copy any noncontig data if there's room left in the send buffer */        if (send_len < BUFLEN && REQ_PTL(sreq)->noncontig) {            MPIDI_msg_sz_t last;            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */            last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            send_len += last - sreq->dev.segment_first;            sreq->dev.segment_first = last;        }        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        if (!complete)            continue;                /* sent all of the data */        reqFn = sreq->dev.OnDataAvail;        if (!reqFn) {            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);            MPIDI_CH3U_Request_complete(sreq);        } else {            complete = 0;            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);            if (!complete)                continue;        }                /* completed the request */        --(VC_PTL(sreq->ch.vc)->num_queued_sends);        MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq);        MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete");        if (VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED) {            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);        }            }     fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
MPID_nem_ptl_sendbuf_t *sb;
MPID_nem_ptl_sendbuf_t *sb;
MPID_nem_ptl_sendbuf_t
MPID_nem_ptl_sendbuf_t
*sb
*
sb
int ret;
int ret;
int
ret
ret
MPIDI_STATE_DECL(MPID_STATE_SEND_QUEUED);
MPIDI_STATE_DECL(MPID_STATE_SEND_QUEUED);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_SEND_QUEUED)
MPID_STATE_SEND_QUEUED
MPID_STATE_SEND_QUEUED
MPIDI_FUNC_ENTER(MPID_STATE_SEND_QUEUED);
MPIDI_FUNC_ENTER(MPID_STATE_SEND_QUEUED)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_SEND_QUEUED
MPID_STATE_SEND_QUEUED
while (!MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()) {        int complete = TRUE;        MPIDI_msg_sz_t send_len = 0;        int i;        MPID_Request *sreq;        int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);        sreq = MPIDI_CH3I_Sendq_head(send_queue); /* don't dequeue until we're finished sending this request */        FREE_POP(&sb);                /* copy the iov */        MPIU_Assert(sreq->dev.iov_count <= 2);        for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i) {            MPIDI_msg_sz_t len;            len = sreq->dev.iov[i].iov_len;            if (len > BUFLEN)                len = BUFLEN;            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);            send_len += len;            if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }        }        /* copy any noncontig data if there's room left in the send buffer */        if (send_len < BUFLEN && REQ_PTL(sreq)->noncontig) {            MPIDI_msg_sz_t last;            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */            last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            send_len += last - sreq->dev.segment_first;            sreq->dev.segment_first = last;        }        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        if (!complete)            continue;                /* sent all of the data */        reqFn = sreq->dev.OnDataAvail;        if (!reqFn) {            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);            MPIDI_CH3U_Request_complete(sreq);        } else {            complete = 0;            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);            if (!complete)                continue;        }                /* completed the request */        --(VC_PTL(sreq->ch.vc)->num_queued_sends);        MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq);        MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete");        if (VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED) {            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);        }            }
!MPIDI_CH3I_Sendq_empty(send_queue) && !FREE_EMPTY()
!MPIDI_CH3I_Sendq_empty(send_queue)
MPIDI_CH3I_Sendq_empty(send_queue)
MPIDI_CH3I_Sendq_empty
MPIDI_CH3I_Sendq_empty
send_queue
send_queue
!FREE_EMPTY()
FREE_EMPTY()
FREE_EMPTY
FREE_EMPTY
{        int complete = TRUE;        MPIDI_msg_sz_t send_len = 0;        int i;        MPID_Request *sreq;        int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);        sreq = MPIDI_CH3I_Sendq_head(send_queue); /* don't dequeue until we're finished sending this request */        FREE_POP(&sb);                /* copy the iov */        MPIU_Assert(sreq->dev.iov_count <= 2);        for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i) {            MPIDI_msg_sz_t len;            len = sreq->dev.iov[i].iov_len;            if (len > BUFLEN)                len = BUFLEN;            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);            send_len += len;            if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }        }        /* copy any noncontig data if there's room left in the send buffer */        if (send_len < BUFLEN && REQ_PTL(sreq)->noncontig) {            MPIDI_msg_sz_t last;            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */            last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            send_len += last - sreq->dev.segment_first;            sreq->dev.segment_first = last;        }        ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);        MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));        if (!complete)            continue;                /* sent all of the data */        reqFn = sreq->dev.OnDataAvail;        if (!reqFn) {            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);            MPIDI_CH3U_Request_complete(sreq);        } else {            complete = 0;            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);            if (!complete)                continue;        }                /* completed the request */        --(VC_PTL(sreq->ch.vc)->num_queued_sends);        MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq);        MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete");        if (VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED) {            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);        }            }
int complete = TRUE;
int complete = TRUE;
int
complete = TRUE
complete
= TRUE
TRUE
TRUE
MPIDI_msg_sz_t send_len = 0;
MPIDI_msg_sz_t send_len = 0;
MPIDI_msg_sz_t
MPIDI_msg_sz_t
send_len = 0
send_len
= 0
0
int i;
int i;
int
i
i
MPID_Request *sreq;
MPID_Request *sreq;
MPID_Request
MPID_Request
*sreq
*
sreq
int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);
int (*reqFn)(MPIDI_VC_t *, MPID_Request *, int *);
int
(*reqFn)(MPIDI_VC_t *, MPID_Request *, int *)
*reqFn
*
reqFn
MPIDI_VC_t *
MPIDI_VC_t
MPIDI_VC_t
*
*

MPID_Request *
MPID_Request
MPID_Request
*
*

int *
int
*
*

sreq = MPIDI_CH3I_Sendq_head(send_queue);
sreq = MPIDI_CH3I_Sendq_head(send_queue)
sreq
sreq
MPIDI_CH3I_Sendq_head(send_queue)
MPIDI_CH3I_Sendq_head
MPIDI_CH3I_Sendq_head
send_queue
send_queue
FREE_POP(&sb);
FREE_POP(&sb)
FREE_POP
FREE_POP
&sb
sb
sb
MPIU_Assert(sreq->dev.iov_count <= 2);
MPIU_Assert(sreq->dev.iov_count <= 2)
MPIU_Assert
MPIU_Assert
sreq->dev.iov_count <= 2
sreq->dev.iov_count
sreq->dev
sreq
sreq
dev
iov_count
2
for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i) {            MPIDI_msg_sz_t len;            len = sreq->dev.iov[i].iov_len;            if (len > BUFLEN)                len = BUFLEN;            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);            send_len += len;            if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }        }
i = sreq->dev.iov_offset;
i = sreq->dev.iov_offset
i
i
sreq->dev.iov_offset
sreq->dev
sreq
sreq
dev
iov_offset
i < sreq->dev.iov_count + sreq->dev.iov_offset
i
i
sreq->dev.iov_count + sreq->dev.iov_offset
sreq->dev.iov_count
sreq->dev
sreq
sreq
dev
iov_count
sreq->dev.iov_offset
sreq->dev
sreq
sreq
dev
iov_offset
++i
i
i
{            MPIDI_msg_sz_t len;            len = sreq->dev.iov[i].iov_len;            if (len > BUFLEN)                len = BUFLEN;            MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);            send_len += len;            if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }        }
MPIDI_msg_sz_t len;
MPIDI_msg_sz_t len;
MPIDI_msg_sz_t
MPIDI_msg_sz_t
len
len
len = sreq->dev.iov[i].iov_len;
len = sreq->dev.iov[i].iov_len
len
len
sreq->dev.iov[i].iov_len
sreq->dev.iov[i]
sreq->dev.iov
sreq->dev
sreq
sreq
dev
iov
i
i
iov_len
if (len > BUFLEN)                len = BUFLEN;
len > BUFLEN
len
len
BUFLEN
BUFLEN
len = BUFLEN;
len = BUFLEN
len
len
BUFLEN
BUFLEN
MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len);
MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len)
MPIU_Memcpy
MPIU_Memcpy
sb->buf.p
sb->buf
sb
sb
buf
p
sreq->dev.iov[i].iov_base
sreq->dev.iov[i]
sreq->dev.iov
sreq->dev
sreq
sreq
dev
iov
i
i
iov_base
len
len
send_len += len;
send_len += len
send_len
send_len
len
len
if (len < sreq->dev.iov[i].iov_len) {                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }
len < sreq->dev.iov[i].iov_len
len
len
sreq->dev.iov[i].iov_len
sreq->dev.iov[i]
sreq->dev.iov
sreq->dev
sreq
sreq
dev
iov
i
i
iov_len
{                /* ran out of space in buffer */                sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;                sreq->dev.iov[i].iov_len -= len;                sreq->dev.iov_offset = i;                complete = FALSE;                break;            }
sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len;
sreq->dev.iov[i].iov_base = (char *)sreq->dev.iov[i].iov_base + len
sreq->dev.iov[i].iov_base
sreq->dev.iov[i]
sreq->dev.iov
sreq->dev
sreq
sreq
dev
iov
i
i
iov_base
(char *)sreq->dev.iov[i].iov_base + len
(char *)sreq->dev.iov[i].iov_base
char *
char
*
*
sreq->dev.iov[i].iov_base
sreq->dev.iov[i]
sreq->dev.iov
sreq->dev
sreq
sreq
dev
iov
i
i
iov_base
len
len
sreq->dev.iov[i].iov_len -= len;
sreq->dev.iov[i].iov_len -= len
sreq->dev.iov[i].iov_len
sreq->dev.iov[i]
sreq->dev.iov
sreq->dev
sreq
sreq
dev
iov
i
i
iov_len
len
len
sreq->dev.iov_offset = i;
sreq->dev.iov_offset = i
sreq->dev.iov_offset
sreq->dev
sreq
sreq
dev
iov_offset
i
i
complete = FALSE;
complete = FALSE
complete
complete
FALSE
FALSE
break;
if (send_len < BUFLEN && REQ_PTL(sreq)->noncontig) {            MPIDI_msg_sz_t last;            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */            last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            send_len += last - sreq->dev.segment_first;            sreq->dev.segment_first = last;        }
send_len < BUFLEN && REQ_PTL(sreq)->noncontig
send_len < BUFLEN
send_len
send_len
BUFLEN
BUFLEN
REQ_PTL(sreq)->noncontig
REQ_PTL(sreq)
REQ_PTL
REQ_PTL
sreq
sreq
noncontig
{            MPIDI_msg_sz_t last;            MPIU_Assert(complete); /* if complete has been set to false, there can't be any space left in the send buffer */            last = sreq->dev.segment_size;            if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }            MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);            send_len += last - sreq->dev.segment_first;            sreq->dev.segment_first = last;        }
MPIDI_msg_sz_t last;
MPIDI_msg_sz_t last;
MPIDI_msg_sz_t
MPIDI_msg_sz_t
last
last
MPIU_Assert(complete);
MPIU_Assert(complete)
MPIU_Assert
MPIU_Assert
complete
complete
last = sreq->dev.segment_size;
last = sreq->dev.segment_size
last
last
sreq->dev.segment_size
sreq->dev
sreq
sreq
dev
segment_size
if (last > sreq->dev.segment_first+BUFLEN) {                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }
last > sreq->dev.segment_first+BUFLEN
last
last
sreq->dev.segment_first+BUFLEN
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
BUFLEN
BUFLEN
{                last = sreq->dev.segment_first+BUFLEN;                complete = FALSE;            }
last = sreq->dev.segment_first+BUFLEN;
last = sreq->dev.segment_first+BUFLEN
last
last
sreq->dev.segment_first+BUFLEN
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
BUFLEN
BUFLEN
complete = FALSE;
complete = FALSE
complete
complete
FALSE
FALSE
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0]);
MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)->overflow[0])
MPI_nem_ptl_pack_byte
MPI_nem_ptl_pack_byte
sreq->dev.segment_ptr
sreq->dev
sreq
sreq
dev
segment_ptr
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
sb->buf.p
sb->buf
sb
sb
buf
p
&REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow[0]
REQ_PTL(sreq)->overflow
REQ_PTL(sreq)
REQ_PTL
REQ_PTL
sreq
sreq
overflow
0
send_len += last - sreq->dev.segment_first;
send_len += last - sreq->dev.segment_first
send_len
send_len
last - sreq->dev.segment_first
last
last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
sreq->dev.segment_first = last;
sreq->dev.segment_first = last
sreq->dev.segment_first
sreq->dev
sreq
sreq
dev
segment_first
last
last
ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank);
ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank)
ret
ret
PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)sb->buf.p, send_len, PTL_NO_ACK_REQ, VC_PTL(sreq->ch.vc)->id, VC_PTL(sreq->ch.vc)->ptc, 0, 0, sb,                     MPIDI_Process.my_pg_rank)
PtlPut
PtlPut
MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
(ptl_size_t)sb->buf.p
ptl_size_t
ptl_size_t
ptl_size_t

sb->buf.p
sb->buf
sb
sb
buf
p
send_len
send_len
PTL_NO_ACK_REQ
PTL_NO_ACK_REQ
VC_PTL(sreq->ch.vc)->id
VC_PTL(sreq->ch.vc)
VC_PTL
VC_PTL
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
id
VC_PTL(sreq->ch.vc)->ptc
VC_PTL(sreq->ch.vc)
VC_PTL
VC_PTL
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
ptc
0
0
sb
sb
MPIDI_Process.my_pg_rank
MPIDI_Process
MPIDI_Process
my_pg_rank
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlput"
"**ptlput %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
if (!complete)            continue;
!complete
complete
complete
continue;
reqFn = sreq->dev.OnDataAvail;
reqFn = sreq->dev.OnDataAvail
reqFn
reqFn
sreq->dev.OnDataAvail
sreq->dev
sreq
sreq
dev
OnDataAvail
if (!reqFn) {            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);            MPIDI_CH3U_Request_complete(sreq);        } else {            complete = 0;            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);            if (!complete)                continue;        }
!reqFn
reqFn
reqFn
{            MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);            MPIDI_CH3U_Request_complete(sreq);        }
MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP);
MPIU_Assert(MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP)
MPIU_Assert
MPIU_Assert
MPIDI_Request_get_type(sreq) != MPIDI_REQUEST_TYPE_GET_RESP
MPIDI_Request_get_type(sreq)
MPIDI_Request_get_type
MPIDI_Request_get_type
sreq
sreq
MPIDI_REQUEST_TYPE_GET_RESP
MPIDI_REQUEST_TYPE_GET_RESP
MPIDI_CH3U_Request_complete(sreq);
MPIDI_CH3U_Request_complete(sreq)
MPIDI_CH3U_Request_complete
MPIDI_CH3U_Request_complete
sreq
sreq
{            complete = 0;            mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);            if (!complete)                continue;        }
complete = 0;
complete = 0
complete
complete
0
mpi_errno = reqFn(sreq->ch.vc, sreq, &complete);
mpi_errno = reqFn(sreq->ch.vc, sreq, &complete)
mpi_errno
mpi_errno
reqFn(sreq->ch.vc, sreq, &complete)
reqFn
reqFn
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
sreq
sreq
&complete
complete
complete
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
if (!complete)                continue;
!complete
complete
complete
continue;
--(VC_PTL(sreq->ch.vc)->num_queued_sends);
--(VC_PTL(sreq->ch.vc)->num_queued_sends)
(VC_PTL(sreq->ch.vc)->num_queued_sends)
VC_PTL(sreq->ch.vc)->num_queued_sends
VC_PTL(sreq->ch.vc)
VC_PTL
VC_PTL
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
num_queued_sends
MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq);
MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq)
MPIDI_CH3I_Sendq_dequeue
MPIDI_CH3I_Sendq_dequeue
&send_queue
send_queue
send_queue
&sreq
sreq
sreq
MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete");
MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete")
MPIU_DBG_MSG
MPIU_DBG_MSG
CH3_CHANNEL
CH3_CHANNEL
VERBOSE
VERBOSE
".... complete"
if (VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED) {            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);        }
VC_PTL(sreq->ch.vc)->num_queued_sends == 0 && sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED
VC_PTL(sreq->ch.vc)->num_queued_sends == 0
VC_PTL(sreq->ch.vc)->num_queued_sends
VC_PTL(sreq->ch.vc)
VC_PTL
VC_PTL
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
num_queued_sends
0
sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED
sreq->ch.vc->state
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
state
MPIDI_VC_STATE_CLOSED
MPIDI_VC_STATE_CLOSED
{            /* this VC is closing, if this was the last req queued for that vc, call vc_terminated() */            mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);            if (mpi_errno) MPIU_ERR_POP(mpi_errno);        }
mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc);
mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc)
mpi_errno
mpi_errno
MPID_nem_ptl_vc_terminated(sreq->ch.vc)
MPID_nem_ptl_vc_terminated
MPID_nem_ptl_vc_terminated
sreq->ch.vc
sreq->ch
sreq
sreq
ch
vc
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED);
MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_SEND_QUEUED
MPID_STATE_SEND_QUEUED
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(266,248,0)
(169,348,0)
(172,14,0)
(247,378,0)
(140,304,0)
(312,212,0)
(23,139,0)
(24,193,0)
(383,114,0)
(260,358,0)
(114,394,0)
(234,299,0)
(382,80,0)
(48,136,0)
(9,255,0)
(294,40,0)
(15,277,0)
(134,326,0)
(255,212,0)
(284,82,0)
(49,121,0)
(343,23,0)
(88,154,0)
(249,279,0)
(33,123,0)
(61,176,0)
(188,110,0)
(129,6,0)
(127,123,0)
(394,114,0)
(338,95,0)
(48,36,0)
(159,348,0)
(154,376,0)
(55,201,0)
(121,6,0)
(324,167,0)
(327,186,0)
(312,342,0)
(354,372,0)
(119,28,0)
(360,274,0)
(362,123,0)
(357,209,0)
(86,148,0)
(359,37,0)
(96,369,0)
(273,279,0)
(104,40,0)
(210,187,0)
(159,224,0)
(52,348,0)
(6,121,0)
(221,205,0)
(205,100,0)
(196,14,0)
(151,274,0)
(93,191,0)
(327,364,0)
(318,20,0)
(240,297,0)
(164,212,0)
(285,309,0)
(147,263,0)
(281,139,0)
(7,177,0)
(315,60,0)
(385,212,0)
(147,308,0)
(179,298,0)
(375,40,0)
(182,123,0)
(78,15,0)
(194,15,0)
(305,328,0)
(280,198,0)
(124,224,0)
(323,297,0)
(356,212,0)
(361,67,0)
(141,352,0)
(226,99,0)
(245,141,0)
(135,285,0)
(191,158,0)
(221,208,0)
(377,302,0)
(352,11,0)
(232,80,0)
(243,212,0)
(366,40,0)
(186,83,0)
(79,40,0)
(280,15,0)
(56,255,0)
(46,372,0)
(121,301,0)
(301,121,0)
(211,132,0)
(141,245,0)
(100,277,0)
(165,324,0)
(178,212,0)
(11,75,0)
(134,352,0)
(371,152,0)
(368,33,0)
(101,348,0)
(90,169,0)
(70,212,0)
(34,301,0)
(191,354,0)
(198,280,0)
(307,388,0)
(191,367,0)
(78,258,0)
(203,117,0)
(204,79,0)
(53,354,0)
(237,385,0)
(366,117,0)
(346,123,0)
(376,363,0)
(90,193,0)
(44,169,0)
(310,210,0)
(144,315,0)
(262,342,0)
(363,376,0)
(239,55,0)
(64,82,0)
(218,62,0)
(87,159,0)
(60,315,0)
(308,174,0)
(18,123,0)
(59,217,0)
(250,367,0)
(260,252,0)
(219,217,0)
(379,115,0)
(37,26,0)
(202,33,0)
(309,198,0)
(19,117,0)
(295,254,0)
(146,62,0)
(372,298,0)
(210,212,0)
(38,302,0)
(208,221,0)
(308,326,0)
(270,40,0)
(358,385,0)
(303,87,0)
(330,369,0)
(352,174,0)
(245,159,0)
(289,39,0)
(94,59,0)
(20,99,0)
(161,212,0)
(248,352,0)
(117,277,0)
(251,249,0)
(81,271,0)
(15,229,0)
(25,369,0)
(137,240,0)
(263,212,0)
(249,251,0)
(216,356,0)
(187,210,0)
(236,191,0)
(41,263,0)
(71,223,0)
(100,205,0)
(328,305,0)
(114,100,0)
(255,9,0)
(115,379,0)
(198,40,0)
(274,212,0)
(372,95,0)
(378,148,0)
(261,207,0)
(390,356,0)
(95,372,0)
(35,376,0)
(186,327,0)
(305,167,0)
(297,240,0)
(379,76,0)
(6,212,0)
(212,123,0)
(215,181,0)
(130,172,0)
(252,260,0)
(309,285,0)
(176,227,0)
(82,212,0)
(379,158,0)
(192,394,0)
(251,132,0)
(254,212,0)
(217,212,0)
(299,353,0)
(189,274,0)
(87,110,0)
(155,285,0)
(217,59,0)
(224,286,0)
(127,220,0)
(265,173,0)
(271,65,0)
(258,9,0)
(164,366,0)
(80,95,0)
(139,23,0)
(363,248,0)
(113,216,0)
(36,48,0)
(272,312,0)
(185,83,0)
(20,65,0)
(224,78,0)
(259,263,0)
(246,78,0)
(236,354,0)
(148,378,0)
(256,255,0)
(160,123,0)
(308,147,0)
(208,294,0)
(95,338,0)
(333,243,0)
(300,174,0)
(2,59,0)
(278,286,0)
(138,152,0)
(44,100,0)
(15,114,0)
(31,15,0)
(245,110,0)
(372,116,0)
(385,358,0)
(317,44,0)
(67,361,0)
(23,141,0)
(394,40,0)
(373,48,0)
(223,40,0)
(347,363,0)
(27,11,0)
(271,99,0)
(391,353,0)
(354,123,0)
(133,103,0)
(163,377,0)
(197,207,0)
(344,372,0)
(15,280,0)
(39,212,0)
(80,382,0)
(314,277,0)
(229,134,0)
(131,362,0)
(264,280,0)
(181,158,0)
(171,178,0)
(132,251,0)
(311,124,0)
(209,367,0)
(238,161,0)
(148,86,0)
(207,220,0)
(355,124,0)
(257,9,0)
(116,372,0)
(16,139,0)
(267,146,0)
(159,110,0)
(235,75,0)
(337,159,0)
(57,70,0)
(72,352,0)
(79,194,0)
(329,286,0)
(28,212,0)
(23,134,0)
(67,367,0)
(76,379,0)
(308,216,0)
(392,330,0)
(253,110,0)
(158,353,0)
(43,217,0)
(191,123,0)
(304,342,0)
(169,90,0)
(358,260,0)
(294,187,0)
(126,36,0)
(350,98,0)
(195,33,0)
(389,127,0)
(395,302,0)
(118,87,0)
(282,227,0)
(342,304,0)
(131,38,0)
(108,187,0)
(7,82,0)
(143,112,0)
(115,299,0)
(331,327,0)
(74,229,0)
(176,212,0)
(162,369,0)
(44,104,0)
(54,369,0)
(136,172,0)
(248,363,0)
(128,115,0)
(209,158,0)
(168,369,0)
(154,212,0)
(136,48,0)
(11,352,0)
(166,62,0)
(82,7,0)
(206,117,0)
(324,165,0)
(201,55,0)
(95,80,0)
(302,38,0)
(104,171,0)
(150,37,0)
(297,17,0)
(112,367,0)
(194,101,0)
(326,304,0)
(156,205,0)
(104,44,0)
(149,212,0)
(191,388,0)
(379,212,0)
(86,212,0)
(28,229,0)
(171,104,0)
(269,243,0)
(51,258,0)
(3,245,0)
(152,76,0)
(39,265,0)
(258,78,0)
(206,177,0)
(98,127,0)
(241,169,0)
(68,210,0)
(148,123,0)
(141,326,0)
(214,176,0)
(180,178,0)
(120,194,0)
(362,131,0)
(172,136,0)
(209,369,0)
(87,173,0)
(85,379,0)
(298,94,0)
(242,123,0)
(381,270,0)
(258,40,0)
(101,224,0)
(273,212,0)
(316,308,0)
(141,23,0)
(107,86,0)
(184,294,0)
(349,252,0)
(291,65,0)
(62,212,0)
(366,164,0)
(159,159,0)
(58,385,0)
(361,254,0)
(326,26,0)
(263,147,0)
(15,224,0)
(212,70,0)
(84,201,0)
(83,212,0)
(245,174,0)
(345,377,0)
(365,193,0)
(21,123,0)
(294,208,0)
(351,220,0)
(83,186,0)
(322,159,0)
(306,191,0)
(221,296,0)
(175,372,0)
(38,131,0)
(274,189,0)
(60,123,0)
(187,294,0)
(206,161,0)
(199,358,0)
(319,174,0)
(377,212,0)
(158,379,0)
(265,39,0)
(169,224,0)
(244,141,0)
(190,164,0)
(14,172,0)
(189,240,0)
(63,116,0)
(103,369,0)
(77,366,0)
(47,7,0)
(73,254,0)
(75,11,0)
(276,90,0)
(59,94,0)
(183,123,0)
(30,75,0)
(240,189,0)
(177,206,0)
(173,87,0)
(293,386,0)
(205,221,0)
(302,377,0)
(15,348,0)
(65,123,0)
(194,79,0)
(364,327,0)
(79,146,0)
(117,40,0)
(42,165,0)
(203,243,0)
(76,152,0)
(308,55,0)
(157,198,0)
(304,326,0)
(208,100,0)
(5,164,0)
(216,308,0)
(356,216,0)
(243,203,0)
(146,79,0)
(193,90,0)
(233,251,0)
(152,212,0)
(139,212,0)
(159,286,0)
(376,154,0)
(341,326,0)
(332,208,0)
(340,312,0)
(316,301,0)
(125,234,0)
(78,224,0)
(161,206,0)
(227,176,0)
(17,14,0)
(308,352,0)
(122,356,0)
(321,372,0)
(287,273,0)
(62,146,0)
(372,110,0)
(325,265,0)
(36,212,0)
(336,116,0)
(367,386,0)
(229,28,0)
(106,189,0)
(374,203,0)
(169,44,0)
(209,388,0)
(55,308,0)
(142,83,0)
(132,212,0)
(10,123,0)
(8,206,0)
(45,299,0)
(1,161,0)
(271,174,0)
(167,305,0)
(296,221,0)
(252,372,0)
(292,36,0)
(17,297,0)
(111,388,0)
(69,299,0)
(29,348,0)
(313,209,0)
(308,316,0)
(75,212,0)
(372,245,0)
(167,324,0)
(283,186,0)
(384,382,0)
(134,174,0)
(99,277,0)
(364,123,0)
(173,265,0)
(153,361,0)
(320,369,0)
(102,191,0)
(275,372,0)
(0,308,0)
(231,191,0)
(97,104,0)
(178,171,0)
(15,203,0)
(177,7,0)
(169,286,0)
(198,309,0)
(4,224,0)
(22,65,0)
(372,354,0)
(334,76,0)
(268,353,0)
(393,147,0)
(388,369,0)
(339,101,0)
(222,372,0)
(109,191,0)
(170,171,0)
(370,309,0)
(228,154,0)
(270,177,0)
(9,258,0)
(145,178,0)
(372,252,0)
(335,99,0)
(227,394,0)
(191,236,0)
(225,131,0)
(216,134,0)
(290,123,0)
(376,134,0)
(207,212,0)
(213,92,0)
(254,361,0)
(220,127,0)
(205,348,0)
(380,369,0)
(177,270,0)
(40,366,0)
(110,123,0)
(372,159,0)
(205,224,0)
(101,194,0)
(387,123,0)
(394,227,0)
(342,134,0)
(298,372,0)
(66,236,0)
(105,286,0)
(288,28,0)
(220,207,0)
(92,369,0)
(230,134,0)
(50,382,0)
(301,316,0)
(342,312,0)
(32,158,0)
(367,67,0)
(285,212,0)
(14,17,0)
(20,37,0)
(91,201,0)
(94,298,0)
(258,9,1)
(247,362,1)
(308,352,1)
(322,169,1)
(323,240,1)
(208,332,1)
(351,207,1)
(173,265,1)
(122,390,1)
(167,305,1)
(43,46,1)
(147,393,1)
(361,153,1)
(392,167,1)
(334,152,1)
(156,221,1)
(394,40,1)
(205,156,1)
(127,220,1)
(234,299,1)
(114,383,1)
(27,75,1)
(81,173,1)
(190,375,1)
(113,356,1)
(132,211,1)
(383,394,1)
(274,212,1)
(126,33,1)
(139,212,1)
(365,24,1)
(83,212,1)
(390,147,1)
(152,371,1)
(252,349,1)
(231,102,1)
(221,296,1)
(95,80,1)
(341,248,1)
(56,256,1)
(189,106,1)
(340,272,1)
(381,40,1)
(3,308,1)
(45,98,1)
(114,394,1)
(88,228,1)
(332,294,1)
(223,40,1)
(42,89,1)
(310,68,1)
(40,366,1)
(131,38,1)
(295,73,1)
(194,15,1)
(194,120,1)
(313,330,1)
(104,171,1)
(20,99,1)
(337,322,1)
(15,229,1)
(164,5,1)
(224,78,1)
(222,95,1)
(149,110,1)
(171,178,1)
(134,230,1)
(244,3,1)
(276,193,1)
(384,50,1)
(90,193,1)
(241,44,1)
(38,302,1)
(135,100,1)
(248,363,1)
(272,341,1)
(15,280,1)
(139,281,1)
(85,76,1)
(118,270,1)
(98,350,1)
(376,154,1)
(394,192,1)
(227,282,1)
(358,385,1)
(217,212,1)
(42,17,1)
(121,49,1)
(32,299,1)
(158,379,1)
(220,351,1)
(169,241,1)
(95,338,1)
(236,354,1)
(178,212,1)
(354,372,1)
(205,348,1)
(23,139,1)
(36,292,1)
(186,283,1)
(29,52,1)
(255,56,1)
(356,122,1)
(372,252,1)
(103,133,1)
(6,129,1)
(46,222,1)
(302,377,1)
(159,224,1)
(195,148,1)
(216,134,1)
(192,227,1)
(178,180,1)
(84,0,1)
(106,274,1)
(251,132,1)
(246,258,1)
(381,223,1)
(328,324,1)
(292,126,1)
(209,158,1)
(171,170,1)
(198,157,1)
(5,190,1)
(267,62,1)
(201,91,1)
(83,142,1)
(47,82,1)
(254,295,1)
(214,101,1)
(70,57,1)
(76,152,1)
(146,62,1)
(79,146,1)
(275,53,1)
(75,212,1)
(100,205,1)
(112,143,1)
(142,185,1)
(154,88,1)
(228,266,1)
(378,247,1)
(169,90,1)
(251,233,1)
(15,203,1)
(297,240,1)
(249,251,1)
(9,255,1)
(373,36,1)
(301,121,1)
(109,93,1)
(28,119,1)
(205,224,1)
(62,212,1)
(78,246,1)
(284,381,1)
(136,48,1)
(125,200,1)
(19,203,1)
(148,86,1)
(24,124,1)
(311,355,1)
(80,382,1)
(184,187,1)
(37,359,1)
(120,79,1)
(344,175,1)
(372,95,1)
(191,354,1)
(76,334,1)
(78,15,1)
(294,40,1)
(134,352,1)
(234,125,1)
(342,312,1)
(254,212,1)
(72,271,1)
(389,20,1)
(116,63,1)
(243,269,1)
(98,127,1)
(199,385,1)
(66,231,1)
(239,201,1)
(7,82,1)
(14,172,1)
(352,11,1)
(52,124,1)
(197,389,1)
(209,388,1)
(8,161,1)
(118,314,1)
(189,274,1)
(13,367,1)
(237,58,1)
(42,112,1)
(259,248,1)
(71,101,1)
(377,345,1)
(145,90,1)
(67,361,1)
(265,325,1)
(130,136,1)
(306,354,1)
(258,51,1)
(177,206,1)
(298,94,1)
(17,297,1)
(317,104,1)
(73,250,1)
(172,130,1)
(159,337,1)
(151,360,1)
(215,200,1)
(44,317,1)
(262,312,1)
(217,219,1)
(101,348,1)
(104,97,1)
(62,166,1)
(379,76,1)
(345,163,1)
(385,237,1)
(57,149,1)
(263,41,1)
(159,348,1)
(294,184,1)
(265,39,1)
(75,235,1)
(82,64,1)
(266,352,1)
(282,176,1)
(307,111,1)
(294,187,1)
(208,100,1)
(104,40,1)
(140,342,1)
(232,382,1)
(318,191,1)
(226,335,1)
(191,367,1)
(44,100,1)
(372,110,1)
(308,326,1)
(216,113,1)
(74,28,1)
(287,249,1)
(243,212,1)
(20,318,1)
(240,137,1)
(16,244,1)
(108,210,1)
(374,243,1)
(49,6,1)
(124,224,1)
(23,134,1)
(210,310,1)
(11,75,1)
(270,177,1)
(51,9,1)
(61,214,1)
(304,342,1)
(379,212,1)
(59,217,1)
(372,298,1)
(280,264,1)
(348,29,1)
(59,2,1)
(263,212,1)
(298,179,1)
(283,83,1)
(342,262,1)
(0,216,1)
(15,224,1)
(356,212,1)
(274,151,1)
(167,324,1)
(255,212,1)
(87,110,1)
(141,352,1)
(363,347,1)
(191,388,1)
(203,374,1)
(382,384,1)
(186,83,1)
(39,212,1)
(206,117,1)
(12,20,1)
(11,27,1)
(271,99,1)
(209,367,1)
(377,212,1)
(157,309,1)
(350,127,1)
(208,294,1)
(77,164,1)
(245,141,1)
(44,104,1)
(221,208,1)
(65,291,1)
(335,117,1)
(392,96,1)
(79,40,1)
(153,254,1)
(180,145,1)
(198,309,1)
(48,373,1)
(230,229,1)
(4,270,1)
(308,147,1)
(258,40,1)
(361,254,1)
(148,378,1)
(188,65,1)
(55,239,1)
(358,199,1)
(128,85,1)
(321,344,1)
(207,261,1)
(388,307,1)
(6,212,1)
(327,186,1)
(235,30,1)
(150,326,1)
(187,108,1)
(31,280,1)
(193,365,1)
(64,284,1)
(155,135,1)
(124,311,1)
(101,194,1)
(355,224,1)
(14,196,1)
(173,87,1)
(48,36,1)
(80,232,1)
(86,212,1)
(159,110,1)
(257,255,1)
(121,6,1)
(302,395,1)
(273,287,1)
(327,331,1)
(68,114,1)
(143,13,1)
(17,14,1)
(169,348,1)
(82,212,1)
(207,212,1)
(326,304,1)
(343,139,1)
(185,60,1)
(312,340,1)
(372,159,1)
(110,253,1)
(347,376,1)
(69,45,1)
(333,15,1)
(372,245,1)
(181,215,1)
(33,368,1)
(363,376,1)
(227,176,1)
(154,212,1)
(393,263,1)
(316,301,1)
(90,276,1)
(376,134,1)
(305,328,1)
(165,42,1)
(87,303,1)
(339,159,1)
(359,150,1)
(233,132,1)
(15,348,1)
(304,140,1)
(53,173,1)
(169,44,1)
(169,224,1)
(394,227,1)
(42,13,1)
(209,313,1)
(212,70,1)
(240,189,1)
(36,212,1)
(366,117,1)
(137,189,1)
(107,378,1)
(312,212,1)
(42,12,1)
(218,339,1)
(78,258,1)
(115,299,1)
(94,59,1)
(187,210,1)
(115,128,1)
(176,61,1)
(236,66,1)
(223,71,1)
(2,217,1)
(134,326,1)
(270,40,1)
(79,204,1)
(191,158,1)
(308,216,1)
(198,40,1)
(87,159,1)
(364,327,1)
(229,74,1)
(176,212,1)
(131,225,1)
(41,259,1)
(117,40,1)
(291,22,1)
(92,213,1)
(281,16,1)
(299,69,1)
(181,158,1)
(164,212,1)
(206,161,1)
(325,39,1)
(309,370,1)
(42,103,1)
(210,212,1)
(144,212,1)
(285,155,1)
(375,364,1)
(261,197,1)
(23,343,1)
(166,218,1)
(315,144,1)
(252,260,1)
(119,288,1)
(7,47,1)
(372,116,1)
(58,298,1)
(1,238,1)
(308,55,1)
(133,92,1)
(280,198,1)
(211,98,1)
(200,158,1)
(271,81,1)
(141,326,1)
(53,134,1)
(308,316,1)
(102,109,1)
(132,212,1)
(91,84,1)
(28,212,1)
(146,267,1)
(101,224,1)
(289,87,1)
(117,19,1)
(161,212,1)
(170,178,1)
(159,159,1)
(129,55,1)
(366,77,1)
(202,195,1)
(24,348,1)
(203,243,1)
(264,198,1)
(93,306,1)
(15,31,1)
(367,67,1)
(288,245,1)
(89,234,1)
(141,23,1)
(297,323,1)
(30,72,1)
(259,37,1)
(163,234,1)
(112,367,1)
(366,164,1)
(55,201,1)
(205,221,1)
(175,252,1)
(376,35,1)
(253,188,1)
(357,209,1)
(194,79,1)
(245,110,1)
(97,171,1)
(177,7,1)
(216,356,1)
(301,34,1)
(191,236,1)
(20,37,1)
(362,131,1)
(220,207,1)
(238,7,1)
(179,94,1)
(271,65,1)
(50,275,1)
(225,38,1)
(219,43,1)
(22,167,1)
(125,181,1)
(60,315,1)
(250,17,1)
(309,285,1)
(256,4,1)
(349,260,1)
(360,14,1)
(86,107,1)
(285,212,1)
(172,136,1)
(385,212,1)
(269,333,1)
(35,154,1)
(370,285,1)
(196,172,1)
(206,8,1)
(331,186,1)
(63,336,1)
(368,202,1)
(324,165,1)
(303,118,1)
(245,159,1)
(371,138,1)
(39,289,1)
(342,134,1)
(138,32,1)
(20,65,1)
(273,212,1)
(260,358,1)
(229,28,1)
(161,1,1)
(99,226,1)
(34,121,1)
(336,321,1)
(163,273,1)
(213,388,1)
(9,257,1)
(330,392,1)
(248,352,1)
(152,212,1)
(395,377,1)
(314,99,1)
(15,114,1)
(204,146,1)
(379,115,1)
(147,263,1)
(255,270,2)
(33,234,2)
(49,173,2)
(15,229,2)
(352,11,2)
(13,17,2)
(180,270,2)
(308,216,2)
(208,100,2)
(82,167,2)
(30,173,2)
(225,234,2)
(148,86,2)
(121,6,2)
(99,101,2)
(4,270,2)
(187,210,2)
(7,167,2)
(17,234,2)
(284,167,2)
(255,212,2)
(36,98,2)
(40,167,2)
(95,80,2)
(327,186,2)
(327,167,2)
(38,98,2)
(198,101,2)
(281,173,2)
(14,234,2)
(235,173,2)
(355,270,2)
(121,173,2)
(325,87,2)
(256,270,2)
(196,234,2)
(148,378,2)
(15,203,2)
(34,173,2)
(210,212,2)
(236,167,2)
(171,178,2)
(375,167,2)
(308,316,2)
(80,167,2)
(226,101,2)
(285,212,2)
(356,212,2)
(9,270,2)
(202,98,2)
(260,358,2)
(67,361,2)
(394,101,2)
(202,234,2)
(78,258,2)
(7,82,2)
(316,173,2)
(8,167,2)
(120,270,2)
(193,270,2)
(117,101,2)
(136,98,2)
(155,101,2)
(291,167,2)
(372,252,2)
(129,173,2)
(284,101,2)
(37,248,2)
(80,382,2)
(209,158,2)
(159,270,2)
(79,40,2)
(294,187,2)
(14,98,2)
(342,248,2)
(260,167,2)
(303,167,2)
(124,224,2)
(131,234,2)
(109,167,2)
(203,243,2)
(331,167,2)
(324,165,2)
(243,212,2)
(384,167,2)
(389,20,2)
(358,385,2)
(245,141,2)
(62,270,2)
(60,315,2)
(276,270,2)
(212,167,2)
(38,234,2)
(372,245,2)
(90,193,2)
(146,270,2)
(27,173,2)
(212,70,2)
(90,270,2)
(326,304,2)
(107,234,2)
(340,248,2)
(383,101,2)
(378,234,2)
(244,173,2)
(351,20,2)
(79,146,2)
(132,98,2)
(223,40,2)
(363,376,2)
(36,212,2)
(308,326,2)
(308,55,2)
(108,101,2)
(221,296,2)
(147,173,2)
(197,20,2)
(252,167,2)
(241,270,2)
(204,270,2)
(131,98,2)
(248,352,2)
(161,101,2)
(55,173,2)
(102,167,2)
(100,205,2)
(167,324,2)
(206,117,2)
(169,44,2)
(265,39,2)
(128,98,2)
(69,98,2)
(343,173,2)
(67,17,2)
(147,263,2)
(372,110,2)
(356,173,2)
(229,173,2)
(223,101,2)
(144,167,2)
(350,20,2)
(311,270,2)
(29,124,2)
(16,173,2)
(20,167,2)
(206,167,2)
(68,101,2)
(342,134,2)
(178,212,2)
(345,234,2)
(72,173,2)
(158,98,2)
(14,172,2)
(104,171,2)
(138,98,2)
(292,98,2)
(201,173,2)
(205,101,2)
(254,212,2)
(294,101,2)
(134,352,2)
(333,101,2)
(62,212,2)
(382,167,2)
(130,98,2)
(97,270,2)
(156,101,2)
(135,101,2)
(196,98,2)
(93,167,2)
(163,234,2)
(390,173,2)
(308,173,2)
(94,167,2)
(71,101,2)
(20,65,2)
(88,173,2)
(358,167,2)
(318,167,2)
(321,167,2)
(76,98,2)
(377,234,2)
(59,217,2)
(173,87,2)
(169,348,2)
(394,227,2)
(288,173,2)
(98,127,2)
(209,388,2)
(274,14,2)
(134,326,2)
(205,348,2)
(271,65,2)
(81,173,2)
(20,37,2)
(112,13,2)
(28,212,2)
(98,20,2)
(151,14,2)
(195,98,2)
(252,260,2)
(247,98,2)
(169,90,2)
(324,167,2)
(161,212,2)
(360,14,2)
(188,167,2)
(153,17,2)
(363,173,2)
(17,98,2)
(173,167,2)
(240,189,2)
(40,366,2)
(323,14,2)
(104,40,2)
(302,98,2)
(294,40,2)
(270,177,2)
(376,173,2)
(107,98,2)
(344,167,2)
(176,212,2)
(35,173,2)
(12,20,2)
(297,14,2)
(379,115,2)
(372,95,2)
(357,209,2)
(309,285,2)
(126,98,2)
(366,164,2)
(2,167,2)
(159,110,2)
(222,167,2)
(106,14,2)
(186,167,2)
(335,101,2)
(150,248,2)
(289,87,2)
(134,173,2)
(199,167,2)
(86,234,2)
(301,173,2)
(366,167,2)
(312,212,2)
(377,98,2)
(171,270,2)
(76,152,2)
(394,40,2)
(117,40,2)
(348,124,2)
(354,372,2)
(379,76,2)
(220,207,2)
(146,62,2)
(367,17,2)
(373,98,2)
(114,101,2)
(172,234,2)
(6,212,2)
(20,99,2)
(170,270,2)
(85,98,2)
(48,234,2)
(377,212,2)
(23,173,2)
(378,98,2)
(354,167,2)
(364,327,2)
(84,173,2)
(236,354,2)
(141,23,2)
(148,234,2)
(154,212,2)
(207,212,2)
(78,15,2)
(17,14,2)
(73,17,2)
(210,101,2)
(301,121,2)
(209,367,2)
(141,173,2)
(87,159,2)
(280,198,2)
(113,173,2)
(266,173,2)
(190,167,2)
(60,167,2)
(379,98,2)
(1,101,2)
(127,20,2)
(159,159,2)
(31,101,2)
(337,270,2)
(198,309,2)
(91,173,2)
(339,270,2)
(58,167,2)
(86,212,2)
(78,270,2)
(172,136,2)
(118,167,2)
(64,101,2)
(326,248,2)
(158,379,2)
(94,59,2)
(310,101,2)
(22,167,2)
(33,98,2)
(5,167,2)
(295,17,2)
(381,167,2)
(366,117,2)
(110,167,2)
(368,234,2)
(299,98,2)
(32,98,2)
(173,265,2)
(157,101,2)
(267,270,2)
(179,167,2)
(191,354,2)
(44,270,2)
(371,98,2)
(345,98,2)
(163,98,2)
(249,251,2)
(169,270,2)
(23,134,2)
(361,254,2)
(191,167,2)
(19,101,2)
(15,114,2)
(141,352,2)
(364,167,2)
(101,194,2)
(15,224,2)
(217,212,2)
(264,101,2)
(48,36,2)
(87,110,2)
(126,234,2)
(322,270,2)
(217,167,2)
(372,167,2)
(317,270,2)
(6,173,2)
(112,367,2)
(139,212,2)
(251,132,2)
(373,234,2)
(271,99,2)
(86,98,2)
(203,101,2)
(342,312,2)
(165,167,2)
(24,270,2)
(381,101,2)
(219,167,2)
(258,9,2)
(240,14,2)
(8,101,2)
(259,173,2)
(132,212,2)
(45,98,2)
(347,173,2)
(9,255,2)
(214,101,2)
(282,101,2)
(116,167,2)
(136,234,2)
(245,159,2)
(159,348,2)
(184,101,2)
(177,206,2)
(221,101,2)
(237,167,2)
(275,167,2)
(28,173,2)
(186,83,2)
(372,116,2)
(63,167,2)
(280,101,2)
(302,234,2)
(177,167,2)
(205,224,2)
(172,98,2)
(100,101,2)
(372,298,2)
(127,220,2)
(83,212,2)
(130,234,2)
(152,212,2)
(395,98,2)
(55,201,2)
(239,173,2)
(191,236,2)
(365,270,2)
(308,147,2)
(312,248,2)
(238,167,2)
(221,208,2)
(101,270,2)
(265,87,2)
(0,173,2)
(61,101,2)
(306,167,2)
(304,248,2)
(198,40,2)
(229,28,2)
(101,348,2)
(314,101,2)
(232,167,2)
(334,98,2)
(152,98,2)
(59,167,2)
(269,101,2)
(305,324,2)
(316,301,2)
(308,352,2)
(1,167,2)
(376,134,2)
(194,79,2)
(245,173,2)
(332,101,2)
(220,20,2)
(47,167,2)
(273,212,2)
(43,167,2)
(7,101,2)
(51,270,2)
(154,173,2)
(216,173,2)
(79,270,2)
(194,15,2)
(167,305,2)
(253,167,2)
(122,173,2)
(142,167,2)
(140,248,2)
(395,234,2)
(230,173,2)
(164,212,2)
(131,38,2)
(137,14,2)
(38,302,2)
(39,87,2)
(285,101,2)
(208,294,2)
(145,270,2)
(385,212,2)
(48,98,2)
(228,173,2)
(189,14,2)
(262,248,2)
(167,167,2)
(224,270,2)
(359,248,2)
(50,167,2)
(315,167,2)
(44,104,2)
(57,167,2)
(216,356,2)
(249,98,2)
(238,101,2)
(211,98,2)
(15,348,2)
(115,299,2)
(166,270,2)
(11,173,2)
(224,78,2)
(362,131,2)
(194,270,2)
(15,101,2)
(309,101,2)
(206,101,2)
(52,124,2)
(234,98,2)
(169,224,2)
(83,167,2)
(101,224,2)
(234,299,2)
(304,342,2)
(74,173,2)
(247,234,2)
(139,173,2)
(270,40,2)
(368,98,2)
(114,394,2)
(257,270,2)
(393,173,2)
(161,167,2)
(208,101,2)
(367,67,2)
(287,98,2)
(372,159,2)
(181,158,2)
(44,100,2)
(42,167,2)
(87,167,2)
(246,270,2)
(95,338,2)
(349,167,2)
(270,101,2)
(64,167,2)
(119,173,2)
(216,134,2)
(205,221,2)
(298,167,2)
(258,40,2)
(95,167,2)
(53,167,2)
(191,388,2)
(149,167,2)
(187,101,2)
(297,240,2)
(66,167,2)
(200,98,2)
(47,101,2)
(175,167,2)
(176,101,2)
(302,377,2)
(261,20,2)
(70,167,2)
(298,94,2)
(143,13,2)
(305,328,2)
(191,367,2)
(46,167,2)
(336,167,2)
(248,173,2)
(136,48,2)
(352,173,2)
(292,234,2)
(89,234,2)
(185,167,2)
(227,176,2)
(374,101,2)
(376,154,2)
(23,139,2)
(379,212,2)
(36,234,2)
(272,248,2)
(177,101,2)
(248,363,2)
(177,7,2)
(274,212,2)
(77,167,2)
(56,270,2)
(361,17,2)
(250,17,2)
(341,248,2)
(75,173,2)
(206,161,2)
(192,101,2)
(75,212,2)
(164,167,2)
(362,98,2)
(39,212,2)
(263,173,2)
(115,98,2)
(227,101,2)
(218,270,2)
(243,101,2)
(189,274,2)
(245,110,2)
(370,101,2)
(225,98,2)
(251,98,2)
(385,167,2)
(17,297,2)
(11,75,2)
(328,324,2)
(207,20,2)
(195,234,2)
(270,167,2)
(82,101,2)
(362,234,2)
(41,173,2)
(258,270,2)
(124,270,2)
(178,270,2)
(181,200,2)
(271,173,2)
(231,167,2)
(65,167,2)
(159,224,2)
(254,17,2)
(141,326,2)
(148,98,2)
(104,270,2)
(191,158,2)
(125,98,2)
(233,98,2)
(3,173,2)
(15,280,2)
(82,212,2)
(283,167,2)
(263,212,2)
(215,200,2)
(273,98,2)
-----------------------------------
(0,last)
(1,dev)
(2,vc)
(3,send_len)
(4,len)
(5,dev)
(6,REQ_PTL(sreq)
(7,sreq->dev.iov_count)
(8,iov_offset)
(9,sreq->dev.iov)
(10,if (!reqFn)
(11,sreq->dev.segment_size)
(12,continue;)
(13,mpi_errno)
(14,VC_PTL(sreq->ch.vc)
(15,sreq->dev.iov[i].iov_len -= len)
(16,sreq)
(17,VC_PTL(sreq->ch.vc)
(18,for (i = sreq->dev.iov_offset; i < sreq->dev.iov_count + sreq->dev.iov_offset; ++i)
(19,i)
(20,!complete)
(21,i)
(22,complete)
(23,sreq->dev.segment_first)
(24,sb)
(25,fn_exit:)
(26,)
(27,segment_size)
(28,sreq->dev)
(29,BUFLEN)
(30,sreq)
(31,len)
(32,mpi_errno)
(33,MPIU_DBG_MSG(CH3_CHANNEL, VERBOSE, ".... complete")
(34,0)
(35,segment_first)
(36,sreq->ch)
(37,complete = FALSE)
(38,VC_PTL(sreq->ch.vc)
(39,REQ_PTL(sreq)
(40,i = sreq->dev.iov_offset)
(41,dev)
(42,send_queue)
(43,sreq)
(44,sreq->dev.iov[i].iov_base)
(45,complete)
(46,PTL_NO_ACK_REQ)
(47,iov_count)
(48,sreq->ch.vc)
(49,overflow)
(50,sb)
(51,i)
(52,len)
(53,ret)
(54,ret)
(55,sb->buf.p)
(56,dev)
(57,send_queue)
(58,sreq)
(59,sreq->ch.vc)
(60,FREE_POP(&sb)
(61,dev)
(62,sreq->dev)
(63,my_pg_rank)
(64,dev)
(65,complete = TRUE)
(66,ret)
(67,MPID_nem_ptl_vc_terminated(sreq->ch.vc)
(68,sreq)
(69,0)
(70,MPIDI_CH3I_Sendq_head(send_queue)
(71,i)
(72,last)
(73,sreq)
(74,segment_first)
(75,sreq->dev)
(76,sreq->ch.vc)
(77,iov_offset)
(78,sreq->dev.iov[i].iov_len)
(79,sreq->dev.iov[i])
(80,sb->buf.p)
(81,complete)
(82,sreq->dev)
(83,sreq->dev)
(84,sb)
(85,sreq)
(86,&sreq)
(87,send_len < BUFLEN)
(88,dev)
(89,continue;)
(90,sb->buf.p)
(91,buf)
(92,MPIDI_STATE_DECL(MPID_STATE_SEND_QUEUED)
(93,mpi_errno)
(94,VC_PTL(sreq->ch.vc)
(95,(ptl_size_t)
(96,goto fn_exit;)
(97,i)
(98,!reqFn)
(99,complete = FALSE)
(100,sreq->dev.iov[i].iov_base = (char *)
(101,len < sreq->dev.iov[i].iov_len)
(102,"**ptlput")
(103,MPIDI_FUNC_ENTER(MPID_STATE_SEND_QUEUED)
(104,sreq->dev.iov[i])
(105,if (len < sreq->dev.iov[i].iov_len)
(106,vc)
(107,sreq)
(108,iov)
(109,MPI_ERR_OTHER)
(110,send_len = 0)
(111,mpi_errno)
(112,MPIU_ERR_POP(mpi_errno)
(113,segment_first)
(114,sreq->dev.iov[i].iov_base)
(115,&complete)
(116,MPIDI_Process.my_pg_rank)
(117,sreq->dev.iov_offset = i)
(118,send_len)
(119,dev)
(120,iov_len)
(121,REQ_PTL(sreq)
(122,dev)
(123,)
(124,len > BUFLEN)
(125,complete)
(126,sreq)
(127,reqFn = sreq->dev.OnDataAvail)
(128,complete)
(129,sreq)
(130,num_queued_sends)
(131,VC_PTL(sreq->ch.vc)
(132,MPIDI_Request_get_type(sreq)
(133,MPID_STATE_SEND_QUEUED)
(134,sreq->dev.segment_first = last)
(135,sreq)
(136,VC_PTL(sreq->ch.vc)
(137,state)
(138,sreq)
(139,sreq->dev)
(140,BUFLEN)
(141,last - sreq->dev.segment_first)
(142,dev)
(143,mpi_errno)
(144,sb)
(145,sreq)
(146,sreq->dev.iov)
(147,sreq->dev.segment_ptr)
(148,MPIDI_CH3I_Sendq_dequeue(&send_queue, &sreq)
(149,sreq)
(150,complete)
(151,ch)
(152,sreq->ch)
(153,vc)
(154,sreq->dev)
(155,dev)
(156,len)
(157,i)
(158,mpi_errno = reqFn(sreq->ch.vc, sreq, &complete)
(159,send_len += len)
(160,send_len)
(161,sreq->dev)
(162,fn_fail:)
(163,sreq)
(164,sreq->dev)
(165,MPIDI_CH3I_Sendq_empty(send_queue)
(166,dev)
(167,!MPIDI_CH3I_Sendq_empty(send_queue)
(168,mpi_errno)
(169,MPIU_Memcpy(sb->buf.p, sreq->dev.iov[i].iov_base, len)
(170,iov)
(171,sreq->dev.iov)
(172,VC_PTL(sreq->ch.vc)
(173,send_len < BUFLEN && REQ_PTL(sreq)
(174,)
(175,0)
(176,sreq->dev)
(177,sreq->dev.iov_count + sreq->dev.iov_offset)
(178,sreq->dev)
(179,id)
(180,dev)
(181,MPIU_ERR_POP(mpi_errno)
(182,complete)
(183,if (send_len < BUFLEN && REQ_PTL(sreq)
(184,i)
(185,sreq)
(186,sreq->dev.iov_count)
(187,sreq->dev.iov)
(188,send_len)
(189,sreq->ch.vc)
(190,sreq)
(191,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlput", "**ptlput %s", MPID_nem_ptl_strerror(ret)
(192,i)
(193,sb->buf)
(194,sreq->dev.iov[i].iov_len)
(195,CH3_CHANNEL)
(196,0)
(197,sreq)
(198,sreq->dev.iov[i])
(199,vc)
(200,mpi_errno)
(201,sb->buf)
(202,VERBOSE)
(203,sreq->dev.iov_offset)
(204,i)
(205,(char *)
(206,sreq->dev.iov_offset)
(207,sreq->dev)
(208,sreq->dev.iov[i].iov_base)
(209,return mpi_errno;)
(210,sreq->dev)
(211,sreq)
(212,sreq = MPIDI_CH3I_Sendq_head(send_queue)
(213,MPID_STATE_SEND_QUEUED)
(214,sreq)
(215,mpi_errno)
(216,sreq->dev.segment_first)
(217,sreq->ch)
(218,sreq)
(219,ch)
(220,sreq->dev.OnDataAvail)
(221,(char *)
(222,send_len)
(223,++i)
(224,len = sreq->dev.iov[i].iov_len)
(225,num_queued_sends)
(226,FALSE)
(227,sreq->dev.iov)
(228,sreq)
(229,sreq->dev.segment_first)
(230,last)
(231,"**ptlput %s")
(232,p)
(233,MPIDI_REQUEST_TYPE_GET_RESP)
(234,!complete)
(235,dev)
(236,MPID_nem_ptl_strerror(ret)
(237,ch)
(238,sreq)
(239,p)
(240,sreq->ch.vc->state)
(241,len)
(242,if (VC_PTL(sreq->ch.vc)
(243,sreq->dev)
(244,last)
(245,send_len += last - sreq->dev.segment_first)
(246,iov_len)
(247,send_queue)
(248,last > sreq->dev.segment_first+BUFLEN)
(249,MPIU_Assert(MPIDI_Request_get_type(sreq)
(250,mpi_errno)
(251,MPIDI_Request_get_type(sreq)
(252,VC_PTL(sreq->ch.vc)
(253,0)
(254,sreq->ch)
(255,sreq->dev)
(256,sreq)
(257,iov)
(258,sreq->dev.iov[i])
(259,sreq)
(260,VC_PTL(sreq->ch.vc)
(261,dev)
(262,segment_first)
(263,sreq->dev)
(264,iov_len)
(265,REQ_PTL(sreq)
(266,last)
(267,iov)
(268,if (!complete)
(269,dev)
(270,i < sreq->dev.iov_count + sreq->dev.iov_offset)
(271,MPIU_Assert(complete)
(272,sreq)
(273,MPIDI_CH3U_Request_complete(sreq)
(274,sreq->ch)
(275,MPIDI_nem_ptl_global_md)
(276,p)
(277,)
(278,len)
(279,)
(280,sreq->dev.iov[i].iov_len)
(281,dev)
(282,iov)
(283,iov_count)
(284,sreq)
(285,sreq->dev)
(286,)
(287,sreq)
(288,sreq)
(289,sreq)
(290,reqFn)
(291,TRUE)
(292,ch)
(293,if (mpi_errno)
(294,sreq->dev.iov[i])
(295,ch)
(296,char *)
(297,sreq->ch.vc->state == MPIDI_VC_STATE_CLOSED)
(298,VC_PTL(sreq->ch.vc)
(299,complete = 0)
(300,if (last > sreq->dev.segment_first+BUFLEN)
(301,REQ_PTL(sreq)
(302,sreq->ch.vc)
(303,BUFLEN)
(304,sreq->dev.segment_first+BUFLEN)
(305,!FREE_EMPTY()
(306,ret)
(307,MPI_SUCCESS)
(308,MPI_nem_ptl_pack_byte(sreq->dev.segment_ptr, sreq->dev.segment_first, last, sb->buf.p, &REQ_PTL(sreq)
(309,sreq->dev.iov)
(310,dev)
(311,BUFLEN)
(312,sreq->dev)
(313,mpi_errno)
(314,break;)
(315,&sb)
(316,&REQ_PTL(sreq)
(317,iov_base)
(318,complete)
(319,last)
(320,sb)
(321,sb)
(322,send_len)
(323,MPIDI_VC_STATE_CLOSED)
(324,!MPIDI_CH3I_Sendq_empty(send_queue)
(325,noncontig)
(326,last = sreq->dev.segment_first+BUFLEN)
(327,sreq->dev.iov_count <= 2)
(328,FREE_EMPTY()
(329,if (len > BUFLEN)
(330,MPIDI_FUNC_EXIT(MPID_STATE_SEND_QUEUED)
(331,2)
(332,iov_base)
(333,sreq)
(334,vc)
(335,complete)
(336,MPIDI_Process)
(337,len)
(338,ptl_size_t)
(339,len)
(340,dev)
(341,last)
(342,sreq->dev.segment_first)
(343,segment_first)
(344,0)
(345,ch)
(346,sreq)
(347,BUFLEN)
(348,len = BUFLEN)
(349,ptc)
(350,reqFn)
(351,OnDataAvail)
(352,last = sreq->dev.segment_size)
(353,)
(354,ret = PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)
(355,len)
(356,sreq->dev)
(357,RET)
(358,sreq->ch.vc)
(359,FALSE)
(360,sreq)
(361,sreq->ch.vc)
(362,--(VC_PTL(sreq->ch.vc)
(363,sreq->dev.segment_first+BUFLEN)
(364,MPIU_Assert(sreq->dev.iov_count <= 2)
(365,buf)
(366,sreq->dev.iov_offset)
(367,mpi_errno = MPID_nem_ptl_vc_terminated(sreq->ch.vc)
(368,".... complete")
(369,)
(370,iov)
(371,ch)
(372,PtlPut(MPIDI_nem_ptl_global_md, (ptl_size_t)
(373,vc)
(374,iov_offset)
(375,i)
(376,sreq->dev.segment_first)
(377,sreq->ch)
(378,&send_queue)
(379,reqFn(sreq->ch.vc, sreq, &complete)
(380,while (!MPIDI_CH3I_Sendq_empty(send_queue)
(381,i)
(382,sb->buf)
(383,iov_base)
(384,buf)
(385,sreq->ch)
(386,)
(387,if (!complete)
(388,mpi_errno = MPI_SUCCESS)
(389,reqFn)
(390,sreq)
(391,if (mpi_errno)
(392,MPID_STATE_SEND_QUEUED)
(393,segment_ptr)
(394,sreq->dev.iov[i])
(395,vc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^