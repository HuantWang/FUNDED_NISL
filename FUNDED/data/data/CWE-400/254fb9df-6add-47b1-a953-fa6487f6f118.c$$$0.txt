-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
21,22
21,23
21,24
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
45,46
45,47
47,48
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,29,33,36,38,42,44,46,48
-----computeFrom-----
13,14
13,15
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_02_bad(){    char * data;    data = NULL;    if(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__strdup_char_02_bad()
CWE401_Memory_Leak__strdup_char_02_bad
{    char * data;    data = NULL;    if(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    if(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
1
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,8,0)
(2,11,0)
(21,15,0)
(11,12,0)
(0,15,0)
(15,11,0)
(10,15,0)
(6,4,0)
(4,11,0)
(3,11,0)
(16,13,0)
(8,13,0)
(9,8,0)
(1,13,0)
(20,13,0)
(3,4,0)
(18,3,0)
(4,10,0)
(19,10,0)
(10,4,0)
(14,3,1)
(8,9,1)
(15,0,1)
(5,14,1)
(21,7,1)
(6,15,1)
(19,6,1)
(7,8,1)
(0,21,1)
(3,18,1)
(14,7,1)
(10,15,1)
(9,17,1)
(4,10,1)
(18,4,1)
(3,4,1)
(10,19,1)
(3,4,2)
(6,7,2)
(19,7,2)
(21,7,2)
(10,7,2)
(10,15,2)
(0,7,2)
(15,7,2)
(3,7,2)
(4,7,2)
(4,10,2)
(18,7,2)
-----------------------------------
(0,"myString")
(1,if(1)
(2,myString)
(3,printLine(data)
(4,data = strdup(myString)
(5,RET)
(6,data)
(7,1)
(8,data = NULL)
(9,NULL)
(10,strdup(myString)
(11,)
(12,)
(13,)
(14,1)
(15,myString[] = "myString")
(16,data)
(17,data)
(18,data)
(19,myString)
(20,if(1)
(21,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^