-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    data = NULL;
    {
        wchar_t * data = *dataPtr1;
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
65,66
66,67
66,68
69,70
70,71
70,72
70,73
71,72
73,74
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
85,86
87,88
89,90
89,91
90,91
91,92
91,93
93,94
93,95
93,96
96,97
97,98
98,99
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,67,68,72,74,75,79,81,86,88,92,94,95,99,100
-----computeFrom-----
35,36
35,37
52,53
52,54
63,64
63,65
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    data = NULL;    {        wchar_t * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        wchar_t * data = *dataPtr1;        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(41,13,0)
(0,22,0)
(26,21,0)
(39,11,0)
(36,35,0)
(5,0,0)
(10,36,0)
(38,7,0)
(29,17,0)
(11,39,0)
(37,7,0)
(28,17,0)
(16,38,0)
(12,7,0)
(31,21,0)
(12,38,0)
(23,27,0)
(14,30,0)
(4,21,0)
(40,30,0)
(33,39,0)
(9,12,0)
(2,16,0)
(42,11,0)
(26,41,0)
(20,28,0)
(17,11,0)
(32,30,0)
(28,32,0)
(7,30,0)
(3,35,0)
(35,30,0)
(17,28,0)
(15,3,0)
(11,30,0)
(6,4,0)
(25,35,0)
(22,7,0)
(41,26,0)
(22,0,0)
(36,16,0)
(0,35,0)
(1,27,0)
(21,4,0)
(16,7,0)
(27,30,0)
(13,41,0)
(38,41,0)
(35,3,0)
(34,38,0)
(21,26,0)
(19,30,0)
(24,32,0)
(41,38,0)
(8,22,0)
(33,42,1)
(35,3,1)
(29,20,1)
(26,21,1)
(17,29,1)
(2,36,1)
(20,16,1)
(23,11,1)
(0,35,1)
(8,27,1)
(41,26,1)
(4,6,1)
(3,15,1)
(16,38,1)
(15,25,1)
(21,4,1)
(22,0,1)
(36,10,1)
(1,23,1)
(12,9,1)
(18,28,1)
(5,8,1)
(12,38,1)
(16,2,1)
(42,35,1)
(41,13,1)
(11,39,1)
(34,22,1)
(38,41,1)
(36,35,1)
(28,17,1)
(17,11,1)
(27,1,1)
(0,5,1)
(39,33,1)
(10,12,1)
(6,31,1)
(9,38,1)
(31,34,1)
(11,39,2)
(12,38,2)
(0,35,2)
(41,26,2)
(22,0,2)
(36,35,2)
(35,3,2)
(21,4,2)
(16,38,2)
(38,41,2)
(41,13,2)
(26,21,2)
(17,11,2)
(28,17,2)
-----------------------------------
(0,*dataPtr1)
(1,NULL)
(2,data)
(3,&data)
(4,sizeof(wchar_t)
(5,dataPtr1)
(6,wchar_t)
(7,)
(8,data)
(9,data)
(10,dataPtr1)
(11,* *dataPtr2 = &data)
(12,printWLine(data)
(13,wchar_t *)
(14,data)
(15,data)
(16,*dataPtr1 = data)
(17,*dataPtr2)
(18,RET)
(19,dataPtr2)
(20,data)
(21,100*sizeof(wchar_t)
(22,* data = *dataPtr1)
(23,data)
(24,data)
(25,dataPtr1)
(26,ALLOCA(100*sizeof(wchar_t)
(27,data = NULL)
(28,* data = *dataPtr2)
(29,dataPtr2)
(30,)
(31,100)
(32,)
(33,data)
(34,data)
(35,* *dataPtr1 = &data)
(36,*dataPtr1)
(37,data)
(38,data = (wchar_t *)
(39,&data)
(40,dataPtr1)
(41,(wchar_t *)
(42,dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^