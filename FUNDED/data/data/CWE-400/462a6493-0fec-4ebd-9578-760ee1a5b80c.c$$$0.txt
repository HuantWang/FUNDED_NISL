-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    data = NULL;
    if(staticTrue)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize then use data */
        strcpy(data, "a string");
        printLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,46,50,52,55,57
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    char * data;    data = NULL;    if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    char * data;    data = NULL;    if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
staticTrue
staticTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "a string");
strcpy(data, "a string")
strcpy
strcpy
data
data
"a string"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,9,0)
(5,23,0)
(19,21,0)
(5,11,0)
(6,19,0)
(20,13,0)
(9,0,0)
(9,2,0)
(16,19,0)
(3,5,0)
(18,0,0)
(9,23,0)
(14,0,0)
(8,11,0)
(23,9,0)
(23,5,0)
(22,18,0)
(1,13,0)
(18,21,0)
(2,9,0)
(11,5,0)
(12,1,0)
(0,21,0)
(10,13,0)
(7,1,0)
(19,0,0)
(15,13,0)
(5,11,1)
(18,0,1)
(23,5,1)
(16,0,1)
(24,17,1)
(18,22,1)
(22,19,1)
(7,12,1)
(0,9,1)
(11,8,1)
(6,16,1)
(19,6,1)
(14,4,1)
(4,1,1)
(8,3,1)
(17,4,1)
(17,18,1)
(19,0,1)
(9,2,1)
(9,23,1)
(3,14,1)
(1,7,1)
(9,2,2)
(18,4,2)
(16,4,2)
(5,4,2)
(0,9,2)
(19,4,2)
(18,0,2)
(23,4,2)
(19,0,2)
(5,11,2)
(0,4,2)
(9,4,2)
(8,4,2)
(6,4,2)
(9,23,2)
(11,4,2)
(14,4,2)
(22,4,2)
(3,4,2)
(23,5,2)
-----------------------------------
(0,data = (char *)
(1,data = NULL)
(2,char *)
(3,100)
(4,staticTrue)
(5,100*sizeof(char)
(6,"a string")
(7,NULL)
(8,char)
(9,(char *)
(10,data)
(11,sizeof(char)
(12,data)
(13,)
(14,data)
(15,if(staticTrue)
(16,data)
(17,staticTrue)
(18,printLine(data)
(19,strcpy(data, "a string")
(20,if(staticTrue)
(21,)
(22,data)
(23,ALLOCA(100*sizeof(char)
(24,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^