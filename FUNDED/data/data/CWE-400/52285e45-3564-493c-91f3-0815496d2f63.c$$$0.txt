-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink(void * countVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * countPtr = (int *)countVoidPtr;
    /* dereference countPtr into count */
    int count = (*countPtr);
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
58,59
60,61
61,62
63,64
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,39,41,43,48,49,52,56,57,59,62,67,68
-----computeFrom-----
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink(void * countVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * countPtr = (int *)countVoidPtr;    /* dereference countPtr into count */    int count = (*countPtr);    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink(void * countVoidPtr)
CWE400_Resource_Exhaustion__rand_for_loop_64b_badSink
void * countVoidPtr
void
* countVoidPtr
*
countVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * countPtr = (int *)countVoidPtr;    /* dereference countPtr into count */    int count = (*countPtr);    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int * countPtr = (int *)countVoidPtr;
int * countPtr = (int *)countVoidPtr;
int
* countPtr = (int *)countVoidPtr
*
countPtr
= (int *)countVoidPtr
(int *)countVoidPtr
int *
int
*
*
countVoidPtr
countVoidPtr
int count = (*countPtr);
int count = (*countPtr);
int
count = (*countPtr)
count
= (*countPtr)
(*countPtr)
*countPtr
countPtr
countPtr
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,12,0)
(31,15,0)
(8,15,0)
(2,23,0)
(1,22,0)
(24,6,0)
(23,6,0)
(4,8,0)
(13,0,0)
(8,0,0)
(26,6,0)
(10,3,0)
(11,13,0)
(5,12,0)
(12,26,0)
(23,2,0)
(18,0,0)
(22,19,0)
(29,2,0)
(7,2,0)
(2,16,0)
(3,10,0)
(2,7,0)
(17,0,0)
(10,23,0)
(27,26,0)
(21,6,0)
(30,3,0)
(9,26,0)
(3,6,0)
(25,10,0)
(20,15,0)
(15,8,0)
(15,3,0)
(15,20,0)
(28,23,0)
(4,0,1)
(10,23,1)
(29,28,1)
(4,13,1)
(17,18,1)
(8,15,1)
(1,8,1)
(13,0,1)
(15,20,1)
(12,14,1)
(2,29,1)
(31,4,1)
(8,0,1)
(14,5,1)
(22,1,1)
(32,8,1)
(10,25,1)
(15,3,1)
(0,17,1)
(15,31,1)
(5,3,1)
(11,22,1)
(25,30,1)
(23,2,1)
(3,10,1)
(30,23,1)
(18,12,1)
(2,16,1)
(13,11,1)
(2,7,1)
(15,8,2)
(31,8,2)
(15,3,2)
(22,8,2)
(23,2,2)
(11,8,2)
(3,10,2)
(4,8,2)
(8,15,2)
(8,8,2)
(13,8,2)
(8,0,2)
(15,20,2)
(13,0,2)
(1,8,2)
(2,16,2)
(10,23,2)
(2,7,2)
-----------------------------------
(0,i = 0)
(1,"Hello")
(2,(int *)
(3,count = (*countPtr)
(4,i)
(5,i)
(6,)
(7,int *)
(8,i < (size_t)
(9,for (i = 0; i < (size_t)
(10,*countPtr)
(11,i)
(12,i = 0)
(13,i++)
(14,0)
(15,(size_t)
(16,void * countVoidPtr)
(17,0)
(18,i)
(19,)
(20,size_t)
(21,count)
(22,printLine("Hello")
(23,* countPtr = (int *)
(24,countPtr)
(25,countPtr)
(26,)
(27,i)
(28,countPtr)
(29,countVoidPtr)
(30,count)
(31,count)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^