-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_17_bad()
{
    int i,j;
    int count;
    /* Initialize count */
    count = -1;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
39,42
39,43
40,41
42,43
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
58,59
59,60
61,62
62,63
62,64
62,65
62,66
62,67
62,68
62,69
63,64
64,65
64,66
65,66
67,68
67,69
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
78,79
79,80
81,82
82,83
82,84
84,85
84,86
84,87
87,88
89,90
90,91
90,92
91,92
93,94
93,95
93,96
94,95
96,97
99,100
99,101
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
111,112
111,113
111,114
111,115
112,113
113,114
113,115
114,115
117,118
117,119
118,119
120,121
120,122
121,122
121,123
122,123
125,126
127,128
128,129
130,131
131,132
131,133
132,133
132,134
133,134
133,135
134,135
136,137
138,139
138,140
138,141
138,142
138,143
139,140
141,142
143,144
144,145
144,146
147,148
147,149
148,149
150,151
152,153
154,155
155,156
156,157
156,158
157,158
160,161
160,162
161,162
163,164
164,165
165,166
165,167
166,167
168,169
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,43,44,47,52,53,56,57,60,66,68,70,74,76,77,80,83,85,86,88,92,95,97,98,102,104,109,110,115,116,119,123,124,126,129,135,137,140,142,145,146,149,151,153,158,159,162,167,169
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
50,51
50,52
54,55
54,56
90,91
90,92
100,101
100,102
113,114
113,115
117,118
117,119
132,133
132,134
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_17_bad(){    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_17_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_17_bad
{    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(46,71,0)
(5,60,0)
(25,78,0)
(23,63,0)
(85,5,0)
(6,74,0)
(82,19,0)
(1,32,0)
(11,69,0)
(61,71,0)
(63,71,0)
(81,36,0)
(62,43,0)
(21,28,0)
(33,71,0)
(54,51,0)
(30,45,0)
(9,77,0)
(51,60,0)
(34,44,0)
(74,63,0)
(68,55,0)
(63,74,0)
(76,45,0)
(29,40,0)
(41,52,0)
(40,18,0)
(88,74,0)
(60,40,0)
(84,62,0)
(35,40,0)
(77,40,0)
(47,43,0)
(74,88,0)
(70,78,0)
(37,89,0)
(44,55,0)
(12,78,0)
(5,73,0)
(10,55,0)
(22,3,0)
(3,45,0)
(22,52,0)
(0,45,0)
(26,83,0)
(62,72,0)
(50,68,0)
(67,40,0)
(14,28,0)
(52,22,0)
(19,60,0)
(52,27,0)
(49,37,0)
(39,51,0)
(72,62,0)
(53,52,0)
(57,55,0)
(73,40,0)
(17,73,0)
(7,5,0)
(62,89,0)
(28,40,0)
(38,77,0)
(15,45,0)
(43,62,0)
(79,40,0)
(74,3,0)
(19,66,0)
(80,72,0)
(13,25,0)
(89,62,0)
(62,60,0)
(60,5,0)
(87,46,0)
(86,73,0)
(75,8,0)
(31,22,0)
(69,3,0)
(89,37,0)
(64,3,0)
(24,40,0)
(48,45,0)
(59,36,0)
(58,44,0)
(65,60,0)
(3,69,0)
(2,40,0)
(32,56,0)
(36,78,0)
(8,16,0)
(20,62,0)
(81,25,1)
(44,55,1)
(62,43,1)
(58,34,1)
(39,60,1)
(51,60,1)
(74,88,1)
(5,85,1)
(19,60,1)
(34,68,1)
(3,69,1)
(10,57,1)
(62,72,1)
(13,19,1)
(89,37,1)
(68,55,1)
(19,82,1)
(77,38,1)
(74,6,1)
(38,9,1)
(32,1,1)
(86,28,1)
(71,61,1)
(5,73,1)
(54,39,1)
(13,4,1)
(59,81,1)
(84,37,1)
(52,22,1)
(87,89,1)
(23,71,1)
(31,41,1)
(46,71,1)
(89,62,1)
(25,13,1)
(25,78,1)
(33,8,1)
(85,7,1)
(72,80,1)
(23,46,1)
(1,89,1)
(33,51,1)
(47,72,1)
(9,36,1)
(6,23,1)
(11,64,1)
(70,12,1)
(62,20,1)
(53,44,1)
(17,86,1)
(50,52,1)
(69,11,1)
(63,71,1)
(22,3,1)
(75,51,1)
(49,63,1)
(78,70,1)
(80,84,1)
(42,36,1)
(62,60,1)
(51,54,1)
(8,75,1)
(44,58,1)
(36,59,1)
(61,33,1)
(46,87,1)
(57,3,1)
(73,17,1)
(68,50,1)
(65,73,1)
(87,32,1)
(55,10,1)
(63,74,1)
(37,49,1)
(81,78,1)
(14,77,1)
(74,3,1)
(20,43,1)
(4,63,1)
(12,44,1)
(22,31,1)
(82,4,1)
(36,78,1)
(43,47,1)
(21,14,1)
(60,5,1)
(28,21,1)
(7,65,1)
(34,55,1)
(41,53,1)
(19,4,2)
(49,63,2)
(54,36,2)
(60,5,2)
(28,36,2)
(80,63,2)
(89,62,2)
(20,63,2)
(63,36,2)
(13,36,2)
(89,63,2)
(1,89,2)
(31,44,2)
(36,78,2)
(44,55,2)
(87,63,2)
(85,36,2)
(36,36,2)
(22,3,2)
(86,36,2)
(89,37,2)
(6,36,2)
(51,36,2)
(62,63,2)
(62,60,2)
(62,72,2)
(33,36,2)
(37,63,2)
(4,36,2)
(46,63,2)
(5,36,2)
(46,71,2)
(5,73,2)
(82,4,2)
(47,63,2)
(23,63,2)
(38,36,2)
(8,51,2)
(68,44,2)
(51,60,2)
(72,63,2)
(17,36,2)
(52,22,2)
(53,44,2)
(22,44,2)
(25,36,2)
(63,63,2)
(74,3,2)
(25,78,2)
(39,36,2)
(19,60,2)
(3,69,2)
(7,36,2)
(63,74,2)
(68,55,2)
(14,36,2)
(71,36,2)
(21,36,2)
(65,36,2)
(81,36,2)
(41,44,2)
(84,63,2)
(62,43,2)
(58,44,2)
(73,36,2)
(6,63,2)
(52,44,2)
(75,51,2)
(9,36,2)
(74,88,2)
(74,36,2)
(59,36,2)
(77,36,2)
(32,89,2)
(34,44,2)
(61,36,2)
(50,44,2)
(44,44,2)
(60,36,2)
(43,63,2)
(23,36,2)
(63,71,2)
(74,63,2)
-----------------------------------
(0,for(i = 0; i < 1; i++)
(1,1)
(2,if (pFile == NULL)
(3,count = -1)
(4,pFile)
(5,fopen(filename, "w+")
(6,count)
(7,filename)
(8,exit(1)
(9,i)
(10,0)
(11,1)
(12,j)
(13,j)
(14,pFile)
(15,i)
(16,)
(17,"output_bad.txt")
(18,)
(19,fclose(pFile)
(20,pFile)
(21,NULL)
(22,&count)
(23,i)
(24,i)
(25,j++)
(26,if (strlen(SENTENCE)
(27,)
(28,*pFile = NULL)
(29,for (i = 0; i < (size_t)
(30,for(j = 0; j < 1; j++)
(31,count)
(32,exit(1)
(33,i)
(34,i)
(35,pFile)
(36,j < 1)
(37,strlen(SENTENCE)
(38,0)
(39,pFile)
(40,)
(41,"%d")
(42,RET)
(43,strlen(SENTENCE)
(44,i < 1)
(45,)
(46,i++)
(47,SENTENCE)
(48,j)
(49,SENTENCE)
(50,i)
(51,pFile == NULL)
(52,fscanf(stdin, "%d", &count)
(53,stdin)
(54,NULL)
(55,i = 0)
(56,)
(57,i)
(58,1)
(59,1)
(60,pFile = fopen(filename, "w+")
(61,0)
(62,fwrite(SENTENCE, sizeof(char)
(63,i < (size_t)
(64,count)
(65,pFile)
(66,)
(67,if (pFile)
(68,i++)
(69,-1)
(70,0)
(71,i = 0)
(72,sizeof(char)
(73,*filename = "output_bad.txt")
(74,(size_t)
(75,1)
(76,count)
(77,i = 0)
(78,j = 0)
(79,filename)
(80,char)
(81,j)
(82,pFile)
(83,)
(84,SENTENCE)
(85,"w+")
(86,filename)
(87,i)
(88,size_t)
(89,strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^