-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
68,71
69,70
71,72
72,73
73,74
73,75
74,75
77,78
78,79
79,80
79,81
80,81
82,83
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,37,40,41,45,47,52,54,58,60,61,65,67,70,75,76,81,83
-----computeFrom-----
13,14
13,15
23,24
23,25
36,37
36,38
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(6,16,0)
(0,37,0)
(4,6,0)
(24,39,0)
(24,3,0)
(27,24,0)
(15,37,0)
(22,18,0)
(17,7,0)
(31,20,0)
(14,29,0)
(30,38,0)
(20,16,0)
(12,17,0)
(34,7,0)
(37,7,0)
(17,3,0)
(33,16,0)
(29,3,0)
(8,3,0)
(37,3,0)
(9,8,0)
(3,7,0)
(18,21,0)
(6,8,0)
(38,35,0)
(5,3,0)
(36,25,0)
(16,6,0)
(2,36,0)
(1,21,0)
(3,8,0)
(24,18,0)
(6,18,0)
(36,2,0)
(23,21,0)
(8,9,0)
(11,18,0)
(13,21,0)
(16,20,0)
(8,6,0)
(26,29,0)
(10,2,0)
(14,26,1)
(24,27,1)
(15,29,1)
(4,5,1)
(15,36,1)
(16,20,1)
(20,31,1)
(24,3,1)
(32,28,1)
(30,32,1)
(0,15,1)
(32,17,1)
(24,18,1)
(8,9,1)
(38,30,1)
(29,14,1)
(5,28,1)
(19,38,1)
(37,3,1)
(12,37,1)
(33,4,1)
(6,16,1)
(31,33,1)
(8,6,1)
(19,24,1)
(10,29,1)
(3,8,1)
(17,3,1)
(26,3,1)
(29,3,1)
(28,18,1)
(36,2,1)
(27,32,1)
(37,0,1)
(17,12,1)
(2,10,1)
(22,11,1)
(6,18,1)
(18,22,1)
(15,28,2)
(6,16,2)
(37,3,2)
(20,28,2)
(0,28,2)
(33,28,2)
(31,28,2)
(30,32,2)
(8,28,2)
(6,28,2)
(3,28,2)
(24,18,2)
(17,28,2)
(5,28,2)
(24,3,2)
(29,3,2)
(29,28,2)
(27,32,2)
(10,29,2)
(6,18,2)
(14,28,2)
(38,32,2)
(37,28,2)
(4,28,2)
(3,8,2)
(12,28,2)
(16,28,2)
(16,20,2)
(24,32,2)
(8,6,2)
(36,29,2)
(26,28,2)
(17,3,2)
(8,9,2)
(36,2,2)
(2,29,2)
-----------------------------------
(0,"A String")
(1,data)
(2,-1)
(3,data = (char *)
(4,data)
(5,data)
(6,realloc(data, 100*sizeof(char)
(7,)
(8,(char *)
(9,char *)
(10,1)
(11,data)
(12,data)
(13,if(globalTrue)
(14,NULL)
(15,data)
(16,100*sizeof(char)
(17,printLine(data)
(18,data = NULL)
(19,RET)
(20,sizeof(char)
(21,)
(22,NULL)
(23,if(globalFalse)
(24,free(data)
(25,)
(26,data)
(27,data)
(28,globalTrue)
(29,data == NULL)
(30,"Benign, fixed string")
(31,char)
(32,globalFalse)
(33,100)
(34,if (data == NULL)
(35,)
(36,exit(-1)
(37,strcpy(data, "A String")
(38,printLine("Benign, fixed string")
(39,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^