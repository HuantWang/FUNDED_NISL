-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET listenSocket = INVALID_SOCKET;
        SOCKET acceptSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a listen socket */
            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (listenSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = INADDR_ANY;
            service.sin_port = htons(TCP_PORT);
            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
            {
                break;
            }
            acceptSocket = accept(listenSocket, NULL, NULL);
            if (acceptSocket == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed */
            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (listenSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(listenSocket);
        }
        if (acceptSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(acceptSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
62,74
62,75
62,76
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
92,93
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
114,115
115,116
115,117
116,117
116,118
117,118
120,121
120,122
121,122
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
128,129
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
141,142
142,143
143,144
145,146
147,148
149,150
149,151
150,151
150,152
151,152
151,153
151,154
152,153
154,155
156,157
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
175,176
175,177
176,177
176,178
177,178
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
187,190
187,191
187,192
188,189
190,191
192,193
194,195
194,196
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
204,205
206,207
206,208
207,208
210,211
212,213
213,214
213,215
214,215
214,216
215,216
217,218
220,221
221,222
221,223
222,223
224,225
224,226
225,226
227,228
230,231
230,232
231,232
231,233
232,233
234,235
236,237
237,238
238,239
238,240
239,240
241,242
243,244
243,245
244,245
244,246
245,246
247,248
249,250
250,251
251,252
251,253
252,253
254,255
256,257
257,258
257,259
258,259
258,260
259,260
262,263
264,265
264,266
265,266
266,267
266,268
268,269
268,270
270,271
271,272
271,273
272,273
275,276
275,277
275,278
275,279
276,277
277,278
277,279
278,279
280,281
280,282
282,283
284,285
285,286
285,287
286,287
288,289
288,290
288,291
291,292
292,293
294,295
295,296
295,297
297,298
297,299
297,300
300,301
302,303
302,304
303,304
303,305
304,305
304,306
305,306
308,309
308,310
309,310
312,313
312,314
312,315
312,316
313,314
314,315
314,316
315,316
317,318
317,319
317,320
318,319
320,321
323,324
323,325
324,325
324,326
325,326
327,328
329,330
330,331
331,332
331,333
332,333
335,336
335,337
335,338
335,339
336,337
337,338
337,339
338,339
341,342
341,343
342,343
344,345
344,346
345,346
345,347
346,347
349,350
351,352
352,353
354,355
355,356
355,357
356,357
356,358
357,358
357,359
358,359
360,361
362,363
362,364
362,365
362,366
362,367
363,364
365,366
367,368
368,369
368,370
371,372
371,373
372,373
374,375
376,377
378,379
379,380
379,381
380,381
383,384
383,385
384,385
386,387
387,388
388,389
388,390
389,390
391,392
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,32,34,38,40,43,47,49,52,55,57,60,66,69,71,73,75,79,81,83,87,90,91,95,100,101,103,109,110,111,113,118,119,122,124,129,131,135,137,140,144,146,148,153,155,157,159,161,165,168,170,172,174,178,180,182,186,189,191,193,196,197,198,203,205,208,209,211,216,218,219,223,226,228,229,233,235,240,242,246,248,253,255,260,261,263,267,269,273,274,279,281,283,287,289,290,293,296,298,299,301,306,307,310,311,316,319,321,322,326,328,333,334,339,340,343,347,348,350,353,359,361,364,366,369,370,373,375,377,381,382,385,390,392
-----computeFrom-----
18,19
18,20
64,65
64,66
77,78
77,79
97,98
97,99
105,106
105,107
115,116
115,117
126,127
126,128
150,151
150,152
163,164
163,165
176,177
176,178
184,185
184,186
194,195
194,196
200,201
200,202
201,202
201,203
206,207
206,208
213,214
213,215
221,222
221,223
231,232
231,233
244,245
244,246
257,258
257,259
303,304
303,305
304,305
304,306
308,309
308,310
314,315
314,316
324,325
324,326
337,338
337,339
341,342
341,343
356,357
356,358
-----guardedBy-----
233,242
246,255
310,350
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int count;    CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType myUnion;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G()
goodB2G
{    int count;    CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType myUnion;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType myUnion;
CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType myUnion;
CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType
CWE400_Resource_Exhaustion__listen_socket_fwrite_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET listenSocket = INVALID_SOCKET;        SOCKET acceptSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }        if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a listen socket */            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (listenSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = INADDR_ANY;            service.sin_port = htons(TCP_PORT);            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }            acceptSocket = accept(listenSocket, NULL, NULL);            if (acceptSocket == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed */            recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)            {                break;            }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)            {                break;            }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)            {                break;            }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(listenSocket);        }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(listenSocket);        }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(acceptSocket);        }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(acceptSocket);        }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(98,138,0)
(191,27,0)
(90,86,0)
(123,195,0)
(86,41,0)
(229,68,0)
(222,66,0)
(5,167,0)
(212,126,0)
(0,166,0)
(110,99,0)
(36,97,0)
(58,97,0)
(162,62,0)
(37,60,0)
(138,119,0)
(45,210,0)
(88,148,0)
(111,93,0)
(227,133,0)
(118,140,0)
(9,213,0)
(140,230,0)
(51,213,0)
(14,9,0)
(149,225,0)
(172,63,0)
(159,124,0)
(139,77,0)
(220,105,0)
(168,118,0)
(130,124,0)
(147,97,0)
(155,206,0)
(39,162,0)
(6,197,0)
(131,140,0)
(134,148,0)
(194,195,0)
(70,115,0)
(63,202,0)
(85,14,0)
(151,189,0)
(93,27,0)
(84,20,0)
(145,143,0)
(55,41,0)
(95,52,0)
(188,212,0)
(102,70,0)
(214,165,0)
(57,190,0)
(163,212,0)
(64,97,0)
(151,104,0)
(230,213,0)
(107,231,0)
(221,97,0)
(13,231,0)
(126,212,0)
(203,140,0)
(219,68,0)
(201,190,0)
(15,128,0)
(110,119,0)
(10,230,0)
(29,138,0)
(108,229,0)
(61,69,0)
(72,209,0)
(62,190,0)
(142,220,0)
(7,104,0)
(6,209,0)
(125,76,0)
(123,80,0)
(185,80,0)
(50,176,0)
(116,204,0)
(171,175,0)
(105,220,0)
(162,68,0)
(23,182,0)
(73,112,0)
(207,110,0)
(59,97,0)
(87,8,0)
(183,8,0)
(143,138,0)
(27,93,0)
(154,220,0)
(158,60,0)
(184,20,0)
(127,138,0)
(23,231,0)
(104,151,0)
(192,50,0)
(17,64,0)
(43,123,0)
(44,148,0)
(119,110,0)
(135,148,0)
(47,151,0)
(193,9,0)
(114,43,0)
(60,147,0)
(76,125,0)
(89,131,0)
(161,131,0)
(181,199,0)
(224,148,0)
(99,97,0)
(115,70,0)
(220,115,0)
(174,14,0)
(209,6,0)
(35,212,0)
(141,213,0)
(103,172,0)
(38,140,0)
(167,97,0)
(2,118,0)
(182,118,0)
(205,5,0)
(34,26,0)
(49,148,0)
(150,25,0)
(152,23,0)
(117,110,0)
(82,97,0)
(115,230,0)
(20,140,0)
(92,36,0)
(27,213,0)
(166,24,0)
(122,225,0)
(170,212,0)
(146,148,0)
(86,166,0)
(133,186,0)
(211,41,0)
(187,143,0)
(189,97,0)
(62,162,0)
(196,126,0)
(6,63,0)
(65,26,0)
(45,23,0)
(12,140,0)
(124,148,0)
(77,36,0)
(195,123,0)
(48,115,0)
(40,152,0)
(8,99,0)
(67,8,0)
(133,124,0)
(75,148,0)
(190,62,0)
(119,97,0)
(109,162,0)
(48,105,0)
(132,97,0)
(137,97,0)
(165,44,0)
(133,119,0)
(215,182,0)
(11,199,0)
(160,69,0)
(105,48,0)
(128,125,0)
(197,6,0)
(177,188,0)
(212,170,0)
(169,53,0)
(232,211,0)
(148,213,0)
(217,48,0)
(46,80,0)
(80,123,0)
(216,119,0)
(228,148,0)
(125,128,0)
(200,63,0)
(212,23,0)
(68,138,0)
(123,43,0)
(179,41,0)
(99,8,0)
(54,148,0)
(50,44,0)
(22,170,0)
(96,165,0)
(36,77,0)
(121,171,0)
(165,99,0)
(56,61,0)
(94,70,0)
(32,140,0)
(113,180,0)
(26,119,0)
(223,23,0)
(166,86,0)
(138,143,0)
(16,204,0)
(19,177,0)
(182,23,0)
(138,68,0)
(101,25,0)
(100,76,0)
(129,91,0)
(204,119,0)
(226,44,0)
(1,178,0)
(106,115,0)
(144,120,0)
(202,63,0)
(125,97,0)
(229,64,0)
(42,148,0)
(69,99,0)
(28,44,0)
(156,110,0)
(204,124,0)
(81,69,0)
(53,167,0)
(4,99,0)
(63,172,0)
(83,152,0)
(212,188,0)
(33,104,0)
(199,148,0)
(71,147,0)
(157,182,0)
(30,189,0)
(63,99,0)
(9,36,0)
(218,231,0)
(50,99,0)
(69,61,0)
(18,125,0)
(68,97,0)
(9,27,0)
(3,5,0)
(173,48,0)
(25,99,0)
(166,115,0)
(63,6,0)
(225,97,0)
(188,177,0)
(24,166,0)
(21,45,0)
(164,202,0)
(198,74,0)
(31,148,0)
(167,53,0)
(190,68,0)
(78,229,0)
(159,130,1)
(188,177,1)
(37,158,1)
(174,208,1)
(89,115,1)
(177,19,1)
(11,27,1)
(190,68,1)
(3,205,1)
(30,151,1)
(142,48,1)
(227,204,1)
(105,220,1)
(150,99,1)
(149,122,1)
(72,200,1)
(41,179,1)
(182,118,1)
(101,150,1)
(63,6,1)
(6,197,1)
(117,216,1)
(50,192,1)
(96,1,1)
(162,68,1)
(22,126,1)
(138,98,1)
(165,44,1)
(36,77,1)
(39,109,1)
(212,170,1)
(5,3,1)
(40,23,1)
(125,128,1)
(27,93,1)
(185,136,1)
(96,198,1)
(201,57,1)
(2,168,1)
(118,2,1)
(26,34,1)
(96,222,1)
(4,225,1)
(63,99,1)
(29,127,1)
(182,215,1)
(111,191,1)
(55,152,1)
(165,214,1)
(45,21,1)
(57,162,1)
(194,123,1)
(223,105,1)
(102,94,1)
(189,30,1)
(226,199,1)
(131,161,1)
(173,217,1)
(96,155,1)
(166,0,1)
(166,115,1)
(77,139,1)
(68,138,1)
(161,89,1)
(15,18,1)
(44,28,1)
(219,26,1)
(181,11,1)
(232,188,1)
(86,41,1)
(26,119,1)
(122,195,1)
(125,76,1)
(90,211,1)
(220,115,1)
(48,173,1)
(123,43,1)
(65,119,1)
(169,5,1)
(205,189,1)
(174,113,1)
(17,229,1)
(209,72,1)
(126,196,1)
(188,212,1)
(8,87,1)
(73,62,1)
(61,56,1)
(152,83,1)
(48,115,1)
(222,195,1)
(166,24,1)
(110,156,1)
(139,92,1)
(220,154,1)
(96,73,1)
(96,136,1)
(83,40,1)
(179,55,1)
(184,84,1)
(9,36,1)
(204,116,1)
(215,157,1)
(50,44,1)
(94,106,1)
(92,64,1)
(151,47,1)
(7,33,1)
(133,124,1)
(80,46,1)
(103,63,1)
(229,68,1)
(123,80,1)
(100,25,1)
(93,111,1)
(168,20,1)
(172,103,1)
(138,119,1)
(211,232,1)
(70,102,1)
(85,174,1)
(86,166,1)
(127,219,1)
(195,194,1)
(95,26,1)
(116,16,1)
(229,108,1)
(157,223,1)
(46,185,1)
(232,91,1)
(34,65,1)
(164,6,1)
(147,71,1)
(76,100,1)
(61,69,1)
(0,90,1)
(18,76,1)
(136,36,1)
(152,23,1)
(129,188,1)
(96,95,1)
(69,99,1)
(214,96,1)
(33,147,1)
(6,209,1)
(187,29,1)
(170,22,1)
(25,101,1)
(121,152,1)
(212,23,1)
(195,123,1)
(124,159,1)
(28,226,1)
(84,131,1)
(160,172,1)
(62,190,1)
(212,35,1)
(190,201,1)
(98,143,1)
(104,7,1)
(81,160,1)
(90,41,1)
(63,202,1)
(67,183,1)
(114,80,1)
(198,25,1)
(43,114,1)
(50,99,1)
(153,86,1)
(16,165,1)
(105,48,1)
(53,169,1)
(21,153,1)
(113,208,1)
(62,162,1)
(106,9,1)
(171,121,1)
(145,187,1)
(128,15,1)
(110,99,1)
(202,164,1)
(204,124,1)
(55,171,1)
(192,165,1)
(79,105,1)
(225,149,1)
(212,126,1)
(14,85,1)
(79,45,1)
(200,167,1)
(99,8,1)
(199,181,1)
(115,70,1)
(185,124,1)
(196,163,1)
(204,119,1)
(78,62,1)
(25,99,1)
(163,177,1)
(130,44,1)
(154,142,1)
(172,63,1)
(109,68,1)
(91,129,1)
(64,17,1)
(19,86,1)
(1,172,1)
(71,60,1)
(165,99,1)
(56,69,1)
(23,182,1)
(87,67,1)
(20,184,1)
(60,37,1)
(208,133,1)
(133,227,1)
(151,104,1)
(79,153,1)
(9,27,1)
(216,61,1)
(183,4,1)
(133,119,1)
(193,14,1)
(16,50,1)
(211,41,1)
(108,78,1)
(138,143,1)
(167,53,1)
(35,170,1)
(207,117,1)
(158,125,1)
(45,23,1)
(119,110,1)
(47,104,1)
(143,145,1)
(156,207,1)
(155,61,1)
(217,118,1)
(162,39,1)
(9,193,1)
(69,81,1)
(208,204,1)
(71,25,2)
(4,195,2)
(8,195,2)
(62,190,2)
(68,138,2)
(15,25,2)
(170,86,2)
(209,25,2)
(219,26,2)
(195,123,2)
(7,25,2)
(1,172,2)
(63,25,2)
(169,25,2)
(115,70,2)
(6,25,2)
(113,208,2)
(19,86,2)
(80,136,2)
(114,136,2)
(63,202,2)
(35,86,2)
(78,62,2)
(108,62,2)
(166,115,2)
(205,25,2)
(147,25,2)
(17,62,2)
(3,25,2)
(99,195,2)
(138,119,2)
(57,162,2)
(166,86,2)
(167,53,2)
(77,62,2)
(0,86,2)
(40,105,2)
(99,8,2)
(227,204,2)
(45,23,2)
(177,86,2)
(211,86,2)
(117,61,2)
(165,44,2)
(223,105,2)
(163,86,2)
(122,195,2)
(60,25,2)
(165,99,2)
(86,41,2)
(43,136,2)
(50,99,2)
(198,25,2)
(220,48,2)
(202,25,2)
(22,86,2)
(194,136,2)
(123,136,2)
(26,61,2)
(62,26,2)
(53,25,2)
(166,24,2)
(151,104,2)
(129,188,2)
(123,43,2)
(160,172,2)
(185,136,2)
(121,152,2)
(76,25,2)
(220,115,2)
(45,153,2)
(162,68,2)
(105,220,2)
(63,99,2)
(188,86,2)
(91,188,2)
(158,25,2)
(9,36,2)
(150,195,2)
(133,204,2)
(229,68,2)
(56,172,2)
(211,41,2)
(125,128,2)
(62,162,2)
(149,195,2)
(166,105,2)
(222,195,2)
(69,172,2)
(201,162,2)
(86,166,2)
(63,6,2)
(204,124,2)
(162,26,2)
(152,105,2)
(138,26,2)
(151,25,2)
(172,25,2)
(212,126,2)
(179,105,2)
(36,77,2)
(187,26,2)
(83,105,2)
(110,61,2)
(18,25,2)
(156,61,2)
(86,105,2)
(73,62,2)
(189,25,2)
(26,119,2)
(105,48,2)
(157,105,2)
(41,105,2)
(64,62,2)
(61,69,2)
(90,105,2)
(33,25,2)
(109,26,2)
(207,61,2)
(216,61,2)
(182,118,2)
(188,212,2)
(110,99,2)
(139,62,2)
(145,26,2)
(36,62,2)
(29,26,2)
(154,48,2)
(155,61,2)
(171,152,2)
(229,62,2)
(196,86,2)
(192,165,2)
(136,62,2)
(47,25,2)
(153,105,2)
(27,93,2)
(6,209,2)
(215,105,2)
(46,136,2)
(126,86,2)
(212,170,2)
(55,105,2)
(127,26,2)
(128,25,2)
(98,26,2)
(39,26,2)
(188,177,2)
(61,172,2)
(133,124,2)
(23,105,2)
(190,68,2)
(232,86,2)
(95,26,2)
(25,195,2)
(48,115,2)
(119,110,2)
(167,25,2)
(6,197,2)
(5,25,2)
(138,143,2)
(100,25,2)
(182,105,2)
(37,25,2)
(164,25,2)
(172,63,2)
(103,25,2)
(30,25,2)
(67,195,2)
(183,195,2)
(25,99,2)
(104,25,2)
(133,119,2)
(119,61,2)
(90,86,2)
(65,61,2)
(152,23,2)
(50,44,2)
(204,119,2)
(195,136,2)
(200,25,2)
(81,172,2)
(87,195,2)
(34,61,2)
(9,27,2)
(143,26,2)
(68,26,2)
(212,86,2)
(23,182,2)
(72,25,2)
(125,76,2)
(125,25,2)
(0,105,2)
(212,23,2)
(86,86,2)
(190,162,2)
(142,48,2)
(225,195,2)
(92,62,2)
(21,153,2)
(101,195,2)
(69,99,2)
(123,80,2)
(50,165,2)
-----------------------------------
(0,count)
(1,break;)
(2,"output_good.txt")
(3,sin_port)
(4,listenSocket)
(5,service.sin_port)
(6,(struct sockaddr*)
(7,sin_addr)
(8,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(9,myUnion.unionFirst = count)
(10,count)
(11,wsaDataInit)
(12,i)
(13,if (pFile == NULL)
(14,myUnion.unionFirst)
(15,service)
(16,acceptSocket)
(17,\'\\0\')
(18,0)
(19,SENTENCE)
(20,*pFile = NULL)
(21,pFile)
(22,SENTENCE)
(23,pFile = fopen(filename, "w+")
(24,size_t)
(25,listenSocket == INVALID_SOCKET)
(26,acceptSocket == SOCKET_ERROR)
(27,count = -1)
(28,INVALID_SOCKET)
(29,inputBuffer)
(30,INADDR_ANY)
(31,recvResult)
(32,if (count > 0 && count <= 20)
(33,service)
(34,SOCKET_ERROR)
(35,pFile)
(36,count = atoi(inputBuffer)
(37,sin_family)
(38,filename)
(39,SOCKET_ERROR)
(40,pFile)
(41,i = 0)
(42,acceptSocket)
(43,&wsaData)
(44,listenSocket = INVALID_SOCKET)
(45,fclose(pFile)
(46,2)
(47,s_addr)
(48,count > 0)
(49,wsaDataInit)
(50,CLOSE_SOCKET(listenSocket)
(51,myUnion)
(52,)
(53,htons(TCP_PORT)
(54,listenSocket)
(55,i)
(56,SOCKET_ERROR)
(57,recvResult)
(58,if (listen(listenSocket, LISTEN_BACKLOG)
(59,if (WSAStartup(MAKEWORD(2,2)
(60,service.sin_family)
(61,listen(listenSocket, LISTEN_BACKLOG)
(62,recvResult == SOCKET_ERROR || recvResult == 0)
(63,bind(listenSocket, (struct sockaddr*)
(64,inputBuffer[recvResult] = \'\\0\')
(65,acceptSocket)
(66,)
(67,SOCK_STREAM)
(68,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(69,listen(listenSocket, LISTEN_BACKLOG)
(70,myUnion.unionSecond)
(71,AF_INET)
(72,service)
(73,break;)
(74,)
(75,if (listenSocket != INVALID_SOCKET)
(76,&service)
(77,atoi(inputBuffer)
(78,inputBuffer)
(79,RET)
(80,MAKEWORD(2,2)
(81,LISTEN_BACKLOG)
(82,if (acceptSocket == SOCKET_ERROR)
(83,NULL)
(84,pFile)
(85,unionFirst)
(86,i < (size_t)
(87,IPPROTO_TCP)
(88,service)
(89,i)
(90,i)
(91,exit(1)
(92,count)
(93,-1)
(94,myUnion)
(95,break;)
(96,listenSocket)
(97,)
(98,0)
(99,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(100,service)
(101,INVALID_SOCKET)
(102,unionSecond)
(103,SOCKET_ERROR)
(104,service.sin_addr)
(105,count > 0 && count <= 20)
(106,count)
(107,if (pFile)
(108,recvResult)
(109,recvResult)
(110,accept(listenSocket, NULL, NULL)
(111,1)
(112,)
(113,WSACleanup()
(114,wsaData)
(115,count = myUnion.unionSecond)
(116,INVALID_SOCKET)
(117,listenSocket)
(118,*filename = "output_good.txt")
(119,acceptSocket = accept(listenSocket, NULL, NULL)
(120,)
(121,1)
(122,wsaDataInit)
(123,WSAStartup(MAKEWORD(2,2)
(124,acceptSocket = INVALID_SOCKET)
(125,memset(&service, 0, sizeof(service)
(126,sizeof(char)
(127,acceptSocket)
(128,sizeof(service)
(129,1)
(130,acceptSocket)
(131,i = 0)
(132,if (bind(listenSocket, (struct sockaddr*)
(133,CLOSE_SOCKET(acceptSocket)
(134,if (acceptSocket != INVALID_SOCKET)
(135,wsaData)
(136,0)
(137,if (recvResult == SOCKET_ERROR || recvResult == 0)
(138,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(139,inputBuffer)
(140,)
(141,count)
(142,count)
(143,CHAR_ARRAY_SIZE - 1)
(144,if (strlen(SENTENCE)
(145,1)
(146,do)
(147,service.sin_family = AF_INET)
(148,)
(149,1)
(150,listenSocket)
(151,service.sin_addr.s_addr)
(152,pFile == NULL)
(153,pFile)
(154,20)
(155,break;)
(156,NULL)
(157,filename)
(158,service)
(159,INVALID_SOCKET)
(160,listenSocket)
(161,0)
(162,recvResult == SOCKET_ERROR)
(163,SENTENCE)
(164,service)
(165,listenSocket != INVALID_SOCKET)
(166,(size_t)
(167,service.sin_port = htons(TCP_PORT)
(168,filename)
(169,TCP_PORT)
(170,strlen(SENTENCE)
(171,exit(1)
(172,bind(listenSocket, (struct sockaddr*)
(173,0)
(174,myUnion)
(175,)
(176,)
(177,strlen(SENTENCE)
(178,)
(179,0)
(180,)
(181,0)
(182,fopen(filename, "w+")
(183,AF_INET)
(184,NULL)
(185,2)
(186,)
(187,CHAR_ARRAY_SIZE)
(188,strlen(SENTENCE)
(189,service.sin_addr.s_addr = INADDR_ANY)
(190,recvResult == 0)
(191,count)
(192,listenSocket)
(193,count)
(194,NO_ERROR)
(195,WSAStartup(MAKEWORD(2,2)
(196,char)
(197,struct sockaddr*)
(198,break;)
(199,wsaDataInit = 0)
(200,listenSocket)
(201,0)
(202,sizeof(service)
(203,pFile)
(204,acceptSocket != INVALID_SOCKET)
(205,service)
(206,)
(207,NULL)
(208,wsaDataInit)
(209,&service)
(210,)
(211,i++)
(212,fwrite(SENTENCE, sizeof(char)
(213,)
(214,INVALID_SOCKET)
(215,"w+")
(216,acceptSocket)
(217,count)
(218,for (i = 0; i < (size_t)
(219,recvResult)
(220,count <= 20)
(221,if (listenSocket == INVALID_SOCKET)
(222,break;)
(223,pFile)
(224,inputBuffer)
(225,wsaDataInit = 1)
(226,listenSocket)
(227,acceptSocket)
(228,if (wsaDataInit)
(229,inputBuffer[recvResult])
(230,)
(231,)
(232,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^