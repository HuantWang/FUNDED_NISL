-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad()
{
    int j;
    for(j = 0; j < 1; j++)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
17,18
17,19
18,19
21,22
22,23
24,25
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
29,30
29,31
29,32
32,33
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
47,49
48,49
48,50
49,50
51,52
53,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
61,64
62,63
64,65
67,68
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
80,81
82,83
82,84
82,85
83,84
85,86
87,88
87,89
88,89
90,91
91,92
91,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
100,103
101,102
102,103
102,104
102,105
103,104
105,106
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
-----nextToken-----
2,4,8,10,15,16,19,20,23,28,30,31,35,37,40,42,45,46,50,52,57,59,63,65,66,70,72,76,79,81,84,86,89,92,93,97,99,104,106,107,111,113,117,119
-----computeFrom-----
13,14
13,15
17,18
17,19
41,42
41,43
48,49
48,50
74,75
74,76
87,88
87,89
95,96
95,97
-----guardedBy-----
97,119
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad(){    int j;    for(j = 0; j < 1; j++)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_17_bad
{    int j;    for(j = 0; j < 1; j++)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
int j;
int j;
int
j
j
for(j = 0; j < 1; j++)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(21,28,0)
(0,24,0)
(19,39,0)
(48,11,0)
(1,25,0)
(52,23,0)
(41,18,0)
(44,4,0)
(7,32,0)
(50,39,0)
(20,28,0)
(2,10,0)
(37,11,0)
(11,25,0)
(45,37,0)
(4,9,0)
(36,32,0)
(9,50,0)
(29,37,0)
(24,28,0)
(14,11,0)
(17,25,0)
(39,50,0)
(23,4,0)
(4,23,0)
(51,19,0)
(27,14,0)
(40,11,0)
(46,40,0)
(16,39,0)
(13,28,0)
(37,45,0)
(29,32,0)
(31,39,0)
(50,9,0)
(12,48,0)
(6,16,0)
(39,25,0)
(26,18,0)
(32,29,0)
(9,4,0)
(29,39,0)
(3,14,0)
(35,29,0)
(37,29,0)
(34,21,0)
(25,47,0)
(22,11,0)
(49,25,0)
(32,7,0)
(11,37,0)
(5,10,0)
(19,25,0)
(50,33,0)
(15,24,0)
(42,7,0)
(33,50,0)
(10,5,0)
(48,38,0)
(40,38,0)
(30,16,0)
(5,43,0)
(52,44,1)
(46,14,1)
(23,52,1)
(42,36,1)
(32,7,1)
(35,22,1)
(51,16,1)
(29,32,1)
(12,40,1)
(5,10,1)
(40,11,1)
(44,31,1)
(21,28,1)
(0,15,1)
(48,12,1)
(13,20,1)
(34,14,1)
(14,27,1)
(19,51,1)
(4,23,1)
(2,16,1)
(7,42,1)
(19,39,1)
(28,13,1)
(31,24,1)
(40,46,1)
(36,35,1)
(22,19,1)
(24,0,1)
(21,34,1)
(37,45,1)
(39,50,1)
(11,37,1)
(16,30,1)
(34,48,1)
(24,28,1)
(29,39,1)
(3,11,1)
(51,5,1)
(9,4,1)
(50,9,1)
(10,2,1)
(27,3,1)
(50,33,1)
(6,39,1)
(48,11,1)
(15,21,1)
(14,11,1)
(30,6,1)
(16,39,1)
(37,29,1)
(8,24,1)
(15,28,1)
(2,16,2)
(24,28,2)
(50,9,2)
(29,32,2)
(19,39,2)
(19,24,2)
(29,39,2)
(44,24,2)
(48,11,2)
(24,24,2)
(11,24,2)
(4,23,2)
(27,24,2)
(3,24,2)
(29,24,2)
(16,24,2)
(15,24,2)
(0,24,2)
(40,14,2)
(37,24,2)
(12,14,2)
(4,24,2)
(30,24,2)
(10,16,2)
(5,16,2)
(36,24,2)
(6,24,2)
(21,28,2)
(42,24,2)
(31,24,2)
(23,24,2)
(16,39,2)
(46,14,2)
(34,24,2)
(50,33,2)
(50,24,2)
(32,24,2)
(22,24,2)
(14,24,2)
(40,11,2)
(37,45,2)
(48,14,2)
(14,11,2)
(35,24,2)
(21,24,2)
(37,29,2)
(7,24,2)
(52,24,2)
(11,37,2)
(5,10,2)
(39,24,2)
(9,4,2)
(9,24,2)
(39,50,2)
(51,24,2)
(32,7,2)
-----------------------------------
(0,1)
(1,data)
(2,1)
(3,data)
(4,100*sizeof(wchar_t)
(5,exit(-1)
(6,data)
(7,sizeof(wchar_t)
(8,RET)
(9,malloc(100*sizeof(wchar_t)
(10,-1)
(11,data = (wchar_t *)
(12,data)
(13,0)
(14,data != NULL)
(15,j)
(16,data == NULL)
(17,if (data == NULL)
(18,)
(19,printWLine(data)
(20,j)
(21,j++)
(22,data)
(23,sizeof(wchar_t)
(24,j < 1)
(25,)
(26,j)
(27,NULL)
(28,j = 0)
(29,realloc(data, (130000)
(30,NULL)
(31,data)
(32,(130000)
(33,wchar_t *)
(34,j)
(35,data)
(36,130000)
(37,(wchar_t *)
(38,)
(39,* data = (wchar_t *)
(40,printWLine(data)
(41,for(j = 0; j < 1; j++)
(42,wchar_t)
(43,)
(44,100)
(45,wchar_t *)
(46,data)
(47,)
(48,free(data)
(49,if (data != NULL)
(50,(wchar_t *)
(51,data)
(52,wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^