-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(STATIC_CONST_TRUE)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
35,38
35,39
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
57,58
57,59
57,60
60,61
62,63
62,64
63,64
63,65
64,65
64,66
65,66
68,69
68,70
69,70
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
77,78
77,79
77,80
78,79
80,81
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
104,105
104,106
105,106
105,107
106,107
109,110
111,112
112,113
114,115
115,116
115,117
116,117
116,118
117,118
117,119
118,119
120,121
122,123
122,124
122,125
122,126
122,127
123,124
125,126
127,128
128,129
128,130
131,132
131,133
132,133
134,135
136,137
138,139
139,140
139,141
140,141
143,144
143,145
144,145
146,147
147,148
148,149
148,150
149,150
151,152
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,39,41,43,47,49,50,53,56,58,59,61,66,67,70,71,76,79,81,82,86,88,93,94,99,100,103,107,108,110,113,119,121,124,126,129,130,133,135,137,141,142,145,150,152
-----computeFrom-----
12,13
12,14
63,64
63,65
64,65
64,66
68,69
68,70
74,75
74,76
84,85
84,86
97,98
97,99
101,102
101,103
116,117
116,118
-----guardedBy-----
70,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(STATIC_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(41,51,0)
(45,35,0)
(65,35,0)
(28,51,0)
(3,48,0)
(44,67,0)
(39,34,0)
(14,50,0)
(71,79,0)
(66,65,0)
(68,62,0)
(24,34,0)
(4,69,0)
(61,41,0)
(68,50,0)
(37,33,0)
(39,6,0)
(33,65,0)
(52,55,0)
(5,34,0)
(76,40,0)
(46,55,0)
(72,30,0)
(26,52,0)
(8,34,0)
(79,71,0)
(17,53,0)
(33,37,0)
(43,35,0)
(29,40,0)
(51,71,0)
(1,11,0)
(59,64,0)
(7,13,0)
(75,42,0)
(51,11,0)
(6,39,0)
(25,26,0)
(22,26,0)
(18,17,0)
(33,39,0)
(13,35,0)
(50,39,0)
(11,51,0)
(70,42,0)
(78,67,0)
(69,17,0)
(16,17,0)
(80,68,0)
(67,40,0)
(58,19,0)
(78,69,0)
(31,40,0)
(50,68,0)
(26,39,0)
(54,32,0)
(56,17,0)
(52,26,0)
(47,78,0)
(51,67,0)
(36,33,0)
(67,78,0)
(21,44,0)
(65,33,0)
(20,79,0)
(12,39,0)
(38,78,0)
(49,67,0)
(74,64,0)
(44,15,0)
(51,41,0)
(64,67,0)
(27,48,0)
(55,52,0)
(57,6,0)
(42,17,0)
(60,51,0)
(23,55,0)
(2,17,0)
(77,68,0)
(48,17,0)
(0,69,0)
(30,9,0)
(55,39,0)
(71,51,0)
(51,60,1)
(69,4,1)
(74,67,1)
(81,10,1)
(0,48,1)
(63,65,1)
(55,39,1)
(28,79,1)
(65,35,1)
(57,12,1)
(35,45,1)
(44,67,1)
(44,21,1)
(39,6,1)
(36,66,1)
(59,74,1)
(64,59,1)
(61,11,1)
(77,10,1)
(20,65,1)
(38,49,1)
(22,25,1)
(52,26,1)
(6,57,1)
(67,78,1)
(50,39,1)
(33,39,1)
(26,39,1)
(33,36,1)
(46,23,1)
(54,71,1)
(71,51,1)
(26,22,1)
(73,52,1)
(51,67,1)
(42,75,1)
(70,81,1)
(51,41,1)
(13,35,1)
(80,77,1)
(79,20,1)
(3,42,1)
(78,69,1)
(72,64,1)
(47,38,1)
(71,79,1)
(49,52,1)
(32,54,1)
(48,27,1)
(65,33,1)
(33,37,1)
(50,14,1)
(51,11,1)
(60,41,1)
(73,44,1)
(78,47,1)
(64,67,1)
(81,68,1)
(21,63,1)
(45,43,1)
(52,55,1)
(10,39,1)
(14,80,1)
(13,7,1)
(11,1,1)
(66,35,1)
(25,69,1)
(43,30,1)
(73,81,1)
(73,63,1)
(4,0,1)
(68,50,1)
(1,28,1)
(66,13,1)
(23,26,1)
(75,70,1)
(27,3,1)
(55,46,1)
(41,61,1)
(7,32,1)
(7,71,1)
(43,64,1)
(30,72,1)
(54,71,2)
(80,10,2)
(72,64,2)
(52,55,2)
(60,65,2)
(78,69,2)
(32,71,2)
(75,81,2)
(44,63,2)
(21,63,2)
(52,26,2)
(46,26,2)
(65,52,2)
(47,52,2)
(1,65,2)
(68,50,2)
(55,26,2)
(38,52,2)
(43,52,2)
(26,39,2)
(74,52,2)
(27,81,2)
(36,65,2)
(33,52,2)
(67,52,2)
(69,81,2)
(39,6,2)
(13,65,2)
(13,35,2)
(20,65,2)
(51,65,2)
(44,67,2)
(3,81,2)
(51,41,2)
(22,81,2)
(26,81,2)
(36,52,2)
(33,37,2)
(45,52,2)
(71,65,2)
(65,65,2)
(7,65,2)
(78,52,2)
(63,52,2)
(64,67,2)
(70,81,2)
(48,81,2)
(50,10,2)
(4,81,2)
(11,65,2)
(71,79,2)
(35,52,2)
(66,65,2)
(33,65,2)
(66,52,2)
(28,65,2)
(71,51,2)
(49,52,2)
(30,64,2)
(68,10,2)
(55,39,2)
(51,67,2)
(51,11,2)
(14,10,2)
(77,10,2)
(52,81,2)
(65,35,2)
(59,52,2)
(42,81,2)
(0,81,2)
(64,52,2)
(50,39,2)
(79,65,2)
(23,26,2)
(61,65,2)
(25,81,2)
(67,78,2)
(65,33,2)
(33,39,2)
(41,65,2)
-----------------------------------
(0,filename)
(1,char)
(2,i)
(3,pFile)
(4,"output_good.txt")
(5,count)
(6,-1)
(7,i)
(8,if(STATIC_CONST_TRUE)
(9,)
(10,STATIC_CONST_TRUE)
(11,sizeof(char)
(12,count)
(13,i++)
(14,count)
(15,)
(16,pFile)
(17,)
(18,if (count > 0 && count <= 20)
(19,)
(20,SENTENCE)
(21,pFile)
(22,0)
(23,count)
(24,if(STATIC_CONST_TRUE)
(25,count)
(26,count > 0)
(27,NULL)
(28,SENTENCE)
(29,if (pFile == NULL)
(30,exit(1)
(31,if (pFile)
(32,exit(1)
(33,(size_t)
(34,)
(35,i = 0)
(36,count)
(37,size_t)
(38,filename)
(39,count = -1)
(40,)
(41,strlen(SENTENCE)
(42,i = 0)
(43,i)
(44,fclose(pFile)
(45,0)
(46,20)
(47,"w+")
(48,*pFile = NULL)
(49,pFile)
(50,&count)
(51,fwrite(SENTENCE, sizeof(char)
(52,count > 0 && count <= 20)
(53,)
(54,1)
(55,count <= 20)
(56,filename)
(57,1)
(58,if (strlen(SENTENCE)
(59,NULL)
(60,pFile)
(61,SENTENCE)
(62,)
(63,pFile)
(64,pFile == NULL)
(65,i < (size_t)
(66,i)
(67,pFile = fopen(filename, "w+")
(68,fscanf(stdin, "%d", &count)
(69,*filename = "output_good.txt")
(70,i)
(71,strlen(SENTENCE)
(72,1)
(73,RET)
(74,pFile)
(75,0)
(76,for (i = 0; i < (size_t)
(77,stdin)
(78,fopen(filename, "w+")
(79,strlen(SENTENCE)
(80,"%d")
(81,STATIC_CONST_TRUE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^