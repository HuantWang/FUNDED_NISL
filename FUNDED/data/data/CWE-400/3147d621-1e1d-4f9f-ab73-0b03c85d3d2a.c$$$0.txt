-----label-----
0
-----code-----
static void goodG2BSink(int count)
{
    if(goodG2BStatic)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
13,14
14,15
14,16
14,17
14,18
14,19
14,20
14,21
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
33,34
34,35
34,36
36,37
36,38
36,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
46,47
48,49
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
72,73
72,74
73,74
73,75
74,75
77,78
79,80
80,81
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
90,93
90,94
90,95
91,92
93,94
95,96
96,97
96,98
99,100
99,101
100,101
102,103
104,105
106,107
107,108
108,109
108,110
109,110
112,113
112,114
113,114
115,116
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,6,8,12,18,20,22,26,28,29,32,35,37,38,40,44,47,49,50,54,56,61,62,67,68,71,75,76,78,81,87,89,92,94,97,98,101,103,105,110,111,114,119,121
-----computeFrom-----
42,43
42,44
52,53
52,54
65,66
65,67
69,70
69,71
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2BSink(int count){    if(goodG2BStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2BSink(int count)
goodG2BSink
int count
int
count
count
{    if(goodG2BStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
if(goodG2BStatic)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
goodG2BStatic
goodG2BStatic
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(16,53,0)
(35,5,0)
(7,10,0)
(18,23,0)
(9,53,0)
(18,35,0)
(31,39,0)
(40,61,0)
(39,8,0)
(30,37,0)
(13,5,0)
(60,53,0)
(58,30,0)
(30,43,0)
(38,41,0)
(27,44,0)
(53,6,0)
(33,45,0)
(12,8,0)
(10,53,0)
(29,27,0)
(34,18,0)
(54,39,0)
(18,17,0)
(15,11,0)
(3,39,0)
(24,53,0)
(47,31,0)
(59,54,0)
(61,53,0)
(36,8,0)
(30,56,0)
(56,45,0)
(25,37,0)
(45,56,0)
(21,35,0)
(42,53,0)
(23,18,0)
(8,39,0)
(39,53,0)
(52,5,0)
(19,60,0)
(1,30,0)
(30,39,0)
(57,43,0)
(20,53,0)
(8,61,0)
(37,30,0)
(31,48,0)
(22,60,0)
(49,61,0)
(32,53,0)
(2,55,0)
(28,54,0)
(35,18,0)
(14,5,0)
(43,30,0)
(0,38,0)
(46,10,0)
(4,52,0)
(56,30,0)
(50,26,1)
(56,45,1)
(4,38,1)
(25,58,1)
(0,56,1)
(35,18,1)
(54,39,1)
(38,0,1)
(22,10,1)
(36,3,1)
(10,7,1)
(39,8,1)
(5,14,1)
(33,35,1)
(13,54,1)
(45,33,1)
(37,25,1)
(57,37,1)
(50,51,1)
(3,61,1)
(58,45,1)
(1,43,1)
(34,21,1)
(29,54,1)
(21,52,1)
(13,27,1)
(40,60,1)
(52,4,1)
(56,30,1)
(30,43,1)
(12,36,1)
(54,59,1)
(18,23,1)
(30,1,1)
(31,39,1)
(59,28,1)
(21,5,1)
(18,17,1)
(43,57,1)
(18,34,1)
(19,22,1)
(4,56,1)
(8,12,1)
(30,37,1)
(51,35,1)
(60,19,1)
(35,5,1)
(14,13,1)
(28,39,1)
(50,31,1)
(47,51,1)
(8,61,1)
(61,49,1)
(46,26,1)
(31,47,1)
(52,5,1)
(49,40,1)
(7,46,1)
(27,29,1)
(30,39,1)
(56,30,2)
(28,26,2)
(30,39,2)
(4,35,2)
(54,26,2)
(10,26,2)
(59,26,2)
(8,26,2)
(56,45,2)
(35,35,2)
(31,39,2)
(0,56,2)
(14,26,2)
(51,26,2)
(60,26,2)
(21,26,2)
(25,35,2)
(29,54,2)
(21,35,2)
(8,61,2)
(43,35,2)
(52,5,2)
(18,26,2)
(12,26,2)
(18,35,2)
(58,35,2)
(34,26,2)
(47,51,2)
(34,35,2)
(40,26,2)
(1,35,2)
(37,35,2)
(57,35,2)
(31,51,2)
(54,39,2)
(61,26,2)
(22,26,2)
(38,56,2)
(18,17,2)
(39,8,2)
(30,43,2)
(3,26,2)
(35,26,2)
(19,26,2)
(7,26,2)
(56,35,2)
(33,35,2)
(13,26,2)
(5,26,2)
(36,26,2)
(52,35,2)
(49,26,2)
(45,35,2)
(30,37,2)
(18,23,2)
(27,54,2)
(30,35,2)
(39,26,2)
(46,26,2)
(35,5,2)
(35,18,2)
-----------------------------------
(0,1)
(1,pFile)
(2,if(goodG2BStatic)
(3,pFile)
(4,i)
(5,i = 0)
(6,)
(7,0)
(8,fopen(filename, "w+")
(9,i)
(10,i = 0)
(11,)
(12,"w+")
(13,i)
(14,0)
(15,if (strlen(SENTENCE)
(16,pFile)
(17,int count)
(18,(size_t)
(19,NULL)
(20,if (pFile == NULL)
(21,i)
(22,pFile)
(23,size_t)
(24,if (pFile)
(25,char)
(26,goodG2BStatic)
(27,exit(1)
(28,pFile)
(29,1)
(30,fwrite(SENTENCE, sizeof(char)
(31,fclose(pFile)
(32,filename)
(33,SENTENCE)
(34,count)
(35,i < (size_t)
(36,filename)
(37,sizeof(char)
(38,exit(1)
(39,pFile = fopen(filename, "w+")
(40,filename)
(41,)
(42,for (i = 0; i < (size_t)
(43,strlen(SENTENCE)
(44,)
(45,strlen(SENTENCE)
(46,i)
(47,pFile)
(48,)
(49,"output_bad.txt")
(50,RET)
(51,pFile)
(52,i++)
(53,)
(54,pFile == NULL)
(55,)
(56,strlen(SENTENCE)
(57,SENTENCE)
(58,SENTENCE)
(59,NULL)
(60,*pFile = NULL)
(61,*filename = "output_bad.txt")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^