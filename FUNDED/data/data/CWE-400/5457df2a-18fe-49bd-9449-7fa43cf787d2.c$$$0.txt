-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
73,75
74,75
77,78
77,79
78,79
79,80
81,82
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,49,50,51,52,58,59,60,61,65,69,71,75,76,80,82
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,30,0)
(6,23,0)
(8,6,0)
(23,6,0)
(34,33,0)
(23,40,0)
(18,8,0)
(36,5,0)
(31,33,0)
(27,1,0)
(24,11,0)
(13,30,0)
(14,27,0)
(15,35,0)
(5,21,0)
(30,1,0)
(27,5,0)
(2,11,0)
(30,2,0)
(1,33,0)
(38,19,0)
(25,1,0)
(11,2,0)
(19,38,0)
(5,27,0)
(38,34,0)
(6,8,0)
(16,38,0)
(23,1,0)
(7,0,0)
(31,11,0)
(32,8,0)
(4,34,0)
(26,0,0)
(21,33,0)
(29,21,0)
(11,31,0)
(11,24,0)
(32,9,0)
(22,35,0)
(1,23,0)
(10,30,0)
(9,32,0)
(19,1,0)
(40,23,0)
(0,35,0)
(8,32,0)
(17,19,0)
(3,35,0)
(37,19,0)
(39,27,0)
(25,12,1)
(6,8,1)
(1,23,1)
(26,7,1)
(38,16,1)
(28,20,1)
(39,1,1)
(30,1,1)
(38,19,1)
(10,13,1)
(5,27,1)
(14,39,1)
(11,24,1)
(5,36,1)
(19,17,1)
(29,5,1)
(23,40,1)
(19,1,1)
(30,10,1)
(32,18,1)
(34,4,1)
(8,32,1)
(23,6,1)
(36,27,1)
(32,9,1)
(18,25,1)
(4,38,1)
(17,37,1)
(20,31,1)
(2,30,1)
(27,1,1)
(0,26,1)
(12,0,1)
(16,19,1)
(13,34,1)
(31,11,1)
(21,29,1)
(27,14,1)
(11,2,1)
(20,12,1)
(37,21,1)
(38,19,2)
(4,12,2)
(31,11,2)
(36,12,2)
(23,12,2)
(17,12,2)
(8,12,2)
(13,12,2)
(6,8,2)
(1,12,2)
(25,12,2)
(10,12,2)
(11,12,2)
(23,40,2)
(31,12,2)
(23,6,2)
(16,12,2)
(38,12,2)
(11,2,2)
(18,12,2)
(27,12,2)
(2,30,2)
(11,24,2)
(34,12,2)
(5,27,2)
(32,9,2)
(30,1,2)
(27,1,2)
(19,12,2)
(5,12,2)
(30,12,2)
(29,12,2)
(8,32,2)
(37,12,2)
(2,12,2)
(6,12,2)
(14,12,2)
(21,12,2)
(39,12,2)
(32,12,2)
(19,1,2)
(1,23,2)
-----------------------------------
(0,data = NULL)
(1,data = (struct _twoIntsStruct *)
(2,&data[0])
(3,if(staticReturnsTrue()
(4,0)
(5,data[0].intOne)
(6,ALLOCA(100*sizeof(struct _twoIntsStruct)
(7,data)
(8,100*sizeof(struct _twoIntsStruct)
(9,struct _twoIntsStruct)
(10,0)
(11,(twoIntsStruct *)
(12,staticReturnsTrue()
(13,data)
(14,0)
(15,data)
(16,intTwo)
(17,0)
(18,100)
(19,data[0])
(20,staticReturnsTrue()
(21,data[0].intOne = 0)
(22,if(staticReturnsTrue()
(23,(struct _twoIntsStruct *)
(24,twoIntsStruct *)
(25,data)
(26,NULL)
(27,data[0])
(28,RET)
(29,0)
(30,data[0])
(31,printStructLine((twoIntsStruct *)
(32,sizeof(struct _twoIntsStruct)
(33,)
(34,data[0].intTwo = 0)
(35,)
(36,intOne)
(37,data)
(38,data[0].intTwo)
(39,data)
(40,struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^