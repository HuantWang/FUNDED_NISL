-----label-----
1
-----code-----
static int lowlevel_hole(struct drm_i915_private *i915,
			 struct i915_address_space *vm,
			 u64 hole_start, u64 hole_end,
			 unsigned long end_time)
{
	I915_RND_STATE(seed_prng);
	unsigned int size;
	struct i915_vma mock_vma;

	memset(&mock_vma, 0, sizeof(struct i915_vma));

	/* Keep creating larger objects until one cannot fit into the hole */
	for (size = 12; (hole_end - hole_start) >> size; size++) {
		I915_RND_SUBSTATE(prng, seed_prng);
		struct drm_i915_gem_object *obj;
		unsigned int *order, count, n;
		u64 hole_size;

		hole_size = (hole_end - hole_start) >> size;
		if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32))
			hole_size = KMALLOC_MAX_SIZE / sizeof(u32);
		count = hole_size >> 1;
		if (!count) {
			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",
				 __func__, hole_start, hole_end, size, hole_size);
			break;
		}

		do {
			order = i915_random_order(count, &prng);
			if (order)
				break;
		} while (count >>= 1);
		if (!count)
			return -ENOMEM;
		GEM_BUG_ON(!order);

		GEM_BUG_ON(count * BIT_ULL(size) > vm->total);
		GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end);

		/* Ignore allocation failures (i.e. don't report them as
		 * a test failure) as we are purposefully allocating very
		 * large objects without checking that we have sufficient
		 * memory. We expect to hit -ENOMEM.
		 */

		obj = fake_dma_object(i915, BIT_ULL(size));
		if (IS_ERR(obj)) {
			kfree(order);
			break;
		}

		GEM_BUG_ON(obj->base.size != BIT_ULL(size));

		if (i915_gem_object_pin_pages(obj)) {
			i915_gem_object_put(obj);
			kfree(order);
			break;
		}

		for (n = 0; n < count; n++) {
			u64 addr = hole_start + order[n] * BIT_ULL(size);

			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);

			if (igt_timeout(end_time,
					"%s timed out before %d/%d\n",
					__func__, n, count)) {
				hole_end = hole_start; /* quit */
				break;
			}

			if (vm->allocate_va_range &&
			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))
				break;

			mock_vma.pages = obj->mm.pages;
			mock_vma.node.size = BIT_ULL(size);
			mock_vma.node.start = addr;

			intel_runtime_pm_get(i915);
			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);
			intel_runtime_pm_put(i915);
		}
		count = n;

		i915_random_reorder(order, count, &prng);
		for (n = 0; n < count; n++) {
			u64 addr = hole_start + order[n] * BIT_ULL(size);

			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);
			vm->clear_range(vm, addr, BIT_ULL(size));
		}

		i915_gem_object_unpin_pages(obj);
		i915_gem_object_put(obj);

		kfree(order);

		cleanup_freed_objects(i915);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
34,35
36,37
37,38
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
51,54
51,55
52,53
54,55
55,56
58,59
59,60
59,61
60,61
63,64
63,65
63,66
63,67
64,65
65,66
65,67
66,67
69,70
69,71
70,71
71,72
71,73
72,73
74,75
76,77
78,79
79,80
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
81,91
81,92
81,93
81,94
81,95
81,96
81,97
81,98
81,99
81,100
81,101
81,102
81,103
81,104
81,105
81,106
82,83
83,84
83,85
83,86
84,85
86,87
88,89
90,91
91,92
91,93
92,93
94,95
94,96
97,98
98,99
98,100
98,101
98,102
100,101
100,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
117,119
118,119
119,120
119,121
120,121
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
130,132
131,132
133,134
134,135
134,136
135,136
138,139
139,140
139,141
140,141
142,143
142,144
143,144
145,146
146,147
146,148
147,148
150,151
151,152
151,153
152,153
154,155
154,156
155,156
158,159
158,160
159,160
160,161
162,163
162,164
163,164
164,165
164,166
164,167
164,168
164,169
164,170
164,171
165,166
168,169
170,171
172,173
174,175
176,177
179,180
179,181
180,181
180,182
181,182
182,183
182,184
183,184
185,186
185,187
185,188
186,187
188,189
190,191
191,192
193,194
193,195
194,195
197,198
197,199
198,199
201,202
201,203
202,203
203,204
205,206
206,207
207,208
209,210
210,211
210,212
211,212
213,214
214,215
216,217
217,218
217,219
218,219
220,221
220,222
221,222
221,223
222,223
224,225
224,226
225,226
227,228
229,230
229,231
230,231
233,234
234,235
234,236
235,236
237,238
237,239
238,239
238,240
239,240
241,242
241,243
242,243
244,245
244,246
245,246
247,248
249,250
251,252
252,253
252,254
253,254
255,256
255,257
255,258
256,257
258,259
260,261
260,262
261,262
263,264
265,266
265,267
266,267
266,268
267,268
269,270
271,272
271,273
272,273
273,274
273,275
274,275
276,277
279,280
280,281
280,282
281,282
283,284
283,285
284,285
284,286
285,286
285,287
286,287
290,291
290,292
291,292
293,294
295,296
295,297
296,297
296,298
297,298
299,300
301,302
301,303
301,304
302,303
303,304
303,305
304,305
306,307
308,309
309,310
309,311
310,311
312,313
315,316
315,317
315,318
315,319
316,317
317,318
317,319
318,319
321,322
321,323
322,323
324,325
326,327
327,328
329,330
329,331
329,332
329,333
329,334
329,335
329,336
329,337
329,338
329,339
330,331
331,332
331,333
332,333
334,335
334,336
336,337
337,338
337,339
338,339
340,341
340,342
341,342
341,343
342,343
344,345
346,347
346,348
347,348
349,350
351,352
352,353
352,354
353,354
355,356
355,357
356,357
356,358
357,358
359,360
359,361
360,361
362,363
364,365
364,366
365,366
368,369
368,370
369,370
369,371
369,372
369,373
369,374
369,375
370,371
372,373
375,376
377,378
379,380
381,382
381,383
382,383
383,384
383,385
384,385
386,387
389,390
389,391
390,391
390,392
391,392
391,393
392,393
395,396
395,397
395,398
395,399
396,397
396,398
397,398
400,401
402,403
404,405
404,406
405,406
407,408
410,411
411,412
411,413
412,413
412,414
413,414
416,417
416,418
417,418
417,419
418,419
422,423
423,424
423,425
424,425
424,426
425,426
425,427
426,427
430,431
430,432
431,432
433,434
435,436
436,437
436,438
437,438
437,439
438,439
438,440
439,440
443,444
445,446
446,447
446,448
447,448
449,450
451,452
452,453
452,454
452,455
452,456
452,457
453,454
453,455
454,455
457,458
459,460
460,461
462,463
465,466
466,467
466,468
467,468
469,470
471,472
472,473
472,474
473,474
475,476
477,478
478,479
478,480
478,481
478,482
479,480
481,482
483,484
485,486
486,487
488,489
488,490
488,491
488,492
489,490
490,491
490,492
491,492
494,495
494,496
495,496
497,498
499,500
500,501
502,503
502,504
502,505
503,504
504,505
504,506
505,506
507,508
507,509
509,510
510,511
510,512
511,512
513,514
513,515
514,515
514,516
515,516
517,518
519,520
519,521
520,521
522,523
524,525
525,526
525,527
526,527
528,529
528,530
529,530
529,531
530,531
532,533
532,534
533,534
535,536
537,538
537,539
538,539
541,542
542,543
542,544
542,545
542,546
543,544
543,545
544,545
547,548
549,550
551,552
551,553
552,553
554,555
556,557
557,558
557,559
558,559
560,561
562,563
563,564
563,565
564,565
566,567
568,569
569,570
569,571
570,571
572,573
574,575
575,576
575,577
576,577
578,579
580,581
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,28,30,35,38,41,43,47,49,53,56,57,61,62,67,68,73,75,77,80,85,87,89,93,95,96,99,101,102,104,106,110,112,116,121,123,125,129,132,136,137,141,144,148,149,153,156,157,161,166,167,169,171,173,175,177,178,184,187,189,192,195,196,199,200,204,208,212,215,219,223,226,228,231,232,236,240,243,246,248,250,254,257,259,262,264,268,270,275,277,278,282,287,288,289,292,294,298,300,305,307,311,313,314,319,320,323,325,328,333,335,339,343,345,348,350,354,358,361,363,366,367,371,373,374,376,378,380,385,387,388,393,394,398,399,401,403,406,408,409,414,415,419,420,421,427,428,429,432,434,440,441,442,444,448,450,455,456,458,461,463,464,468,470,474,476,480,482,484,487,492,493,496,498,501,506,508,512,516,518,521,523,527,531,534,536,539,540,545,546,548,550,553,555,559,561,565,567,571,573,577,579,581
-----computeFrom-----
65,66
65,67
69,70
69,71
71,72
71,73
114,115
114,116
117,118
117,119
119,120
119,121
127,128
127,129
130,131
130,132
139,140
139,141
142,143
142,144
151,152
151,153
154,155
154,156
182,183
182,184
197,198
197,199
220,221
220,222
221,222
221,223
237,238
237,239
238,239
238,240
241,242
241,243
252,253
252,254
283,284
283,285
317,318
317,319
321,322
321,323
337,338
337,339
340,341
340,342
355,356
355,357
356,357
356,358
383,384
383,385
390,391
390,392
411,412
411,413
423,424
423,425
436,437
436,438
472,473
472,474
490,491
490,492
494,495
494,496
510,511
510,512
513,514
513,515
528,529
528,530
529,530
529,531
-----guardedBy-----
132,144
136,148
129,141
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;BreakStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int lowlevel_hole(struct drm_i915_private *i915,			 struct i915_address_space *vm,			 u64 hole_start, u64 hole_end,			 unsigned long end_time){	I915_RND_STATE(seed_prng);	unsigned int size;	struct i915_vma mock_vma;	memset(&mock_vma, 0, sizeof(struct i915_vma));	/* Keep creating larger objects until one cannot fit into the hole */	for (size = 12; (hole_end - hole_start) >> size; size++) {		I915_RND_SUBSTATE(prng, seed_prng);		struct drm_i915_gem_object *obj;		unsigned int *order, count, n;		u64 hole_size;		hole_size = (hole_end - hole_start) >> size;		if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32))			hole_size = KMALLOC_MAX_SIZE / sizeof(u32);		count = hole_size >> 1;		if (!count) {			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);			break;		}		do {			order = i915_random_order(count, &prng);			if (order)				break;		} while (count >>= 1);		if (!count)			return -ENOMEM;		GEM_BUG_ON(!order);		GEM_BUG_ON(count * BIT_ULL(size) > vm->total);		GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end);		/* Ignore allocation failures (i.e. don't report them as		 * a test failure) as we are purposefully allocating very		 * large objects without checking that we have sufficient		 * memory. We expect to hit -ENOMEM.		 */		obj = fake_dma_object(i915, BIT_ULL(size));		if (IS_ERR(obj)) {			kfree(order);			break;		}		GEM_BUG_ON(obj->base.size != BIT_ULL(size));		if (i915_gem_object_pin_pages(obj)) {			i915_gem_object_put(obj);			kfree(order);			break;		}		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}			if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;			mock_vma.pages = obj->mm.pages;			mock_vma.node.size = BIT_ULL(size);			mock_vma.node.start = addr;			intel_runtime_pm_get(i915);			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);			intel_runtime_pm_put(i915);		}		count = n;		i915_random_reorder(order, count, &prng);		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			vm->clear_range(vm, addr, BIT_ULL(size));		}		i915_gem_object_unpin_pages(obj);		i915_gem_object_put(obj);		kfree(order);		cleanup_freed_objects(i915);	}	return 0;}
static int
lowlevel_hole(struct drm_i915_private *i915,			 struct i915_address_space *vm,			 u64 hole_start, u64 hole_end,			 unsigned long end_time)
lowlevel_hole
struct drm_i915_private *i915
struct drm_i915_private
drm_i915_private
*i915
*
i915
struct i915_address_space *vm
struct i915_address_space
i915_address_space
*vm
*
vm
u64 hole_start
u64
u64
hole_start
hole_start
u64 hole_end
u64
u64
hole_end
hole_end
unsigned long end_time
unsigned long
end_time
end_time
{	I915_RND_STATE(seed_prng);	unsigned int size;	struct i915_vma mock_vma;	memset(&mock_vma, 0, sizeof(struct i915_vma));	/* Keep creating larger objects until one cannot fit into the hole */	for (size = 12; (hole_end - hole_start) >> size; size++) {		I915_RND_SUBSTATE(prng, seed_prng);		struct drm_i915_gem_object *obj;		unsigned int *order, count, n;		u64 hole_size;		hole_size = (hole_end - hole_start) >> size;		if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32))			hole_size = KMALLOC_MAX_SIZE / sizeof(u32);		count = hole_size >> 1;		if (!count) {			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);			break;		}		do {			order = i915_random_order(count, &prng);			if (order)				break;		} while (count >>= 1);		if (!count)			return -ENOMEM;		GEM_BUG_ON(!order);		GEM_BUG_ON(count * BIT_ULL(size) > vm->total);		GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end);		/* Ignore allocation failures (i.e. don't report them as		 * a test failure) as we are purposefully allocating very		 * large objects without checking that we have sufficient		 * memory. We expect to hit -ENOMEM.		 */		obj = fake_dma_object(i915, BIT_ULL(size));		if (IS_ERR(obj)) {			kfree(order);			break;		}		GEM_BUG_ON(obj->base.size != BIT_ULL(size));		if (i915_gem_object_pin_pages(obj)) {			i915_gem_object_put(obj);			kfree(order);			break;		}		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}			if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;			mock_vma.pages = obj->mm.pages;			mock_vma.node.size = BIT_ULL(size);			mock_vma.node.start = addr;			intel_runtime_pm_get(i915);			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);			intel_runtime_pm_put(i915);		}		count = n;		i915_random_reorder(order, count, &prng);		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			vm->clear_range(vm, addr, BIT_ULL(size));		}		i915_gem_object_unpin_pages(obj);		i915_gem_object_put(obj);		kfree(order);		cleanup_freed_objects(i915);	}	return 0;}
I915_RND_STATE(seed_prng);
I915_RND_STATE(seed_prng);
I915_RND_STATE
I915_RND_STATE
(seed_prng)
seed_prng
seed_prng
unsigned int size;
unsigned int size;
unsigned int
size
size
struct i915_vma mock_vma;
struct i915_vma mock_vma;
struct i915_vma
i915_vma
mock_vma
mock_vma
memset(&mock_vma, 0, sizeof(struct i915_vma));
memset(&mock_vma, 0, sizeof(struct i915_vma))
memset
memset
&mock_vma
mock_vma
mock_vma
0
sizeof(struct i915_vma)
struct i915_vma
struct i915_vma
i915_vma

for (size = 12; (hole_end - hole_start) >> size; size++) {		I915_RND_SUBSTATE(prng, seed_prng);		struct drm_i915_gem_object *obj;		unsigned int *order, count, n;		u64 hole_size;		hole_size = (hole_end - hole_start) >> size;		if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32))			hole_size = KMALLOC_MAX_SIZE / sizeof(u32);		count = hole_size >> 1;		if (!count) {			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);			break;		}		do {			order = i915_random_order(count, &prng);			if (order)				break;		} while (count >>= 1);		if (!count)			return -ENOMEM;		GEM_BUG_ON(!order);		GEM_BUG_ON(count * BIT_ULL(size) > vm->total);		GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end);		/* Ignore allocation failures (i.e. don't report them as		 * a test failure) as we are purposefully allocating very		 * large objects without checking that we have sufficient		 * memory. We expect to hit -ENOMEM.		 */		obj = fake_dma_object(i915, BIT_ULL(size));		if (IS_ERR(obj)) {			kfree(order);			break;		}		GEM_BUG_ON(obj->base.size != BIT_ULL(size));		if (i915_gem_object_pin_pages(obj)) {			i915_gem_object_put(obj);			kfree(order);			break;		}		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}			if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;			mock_vma.pages = obj->mm.pages;			mock_vma.node.size = BIT_ULL(size);			mock_vma.node.start = addr;			intel_runtime_pm_get(i915);			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);			intel_runtime_pm_put(i915);		}		count = n;		i915_random_reorder(order, count, &prng);		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			vm->clear_range(vm, addr, BIT_ULL(size));		}		i915_gem_object_unpin_pages(obj);		i915_gem_object_put(obj);		kfree(order);		cleanup_freed_objects(i915);	}
size = 12;
size = 12
size
size
12
(hole_end - hole_start) >> size
(hole_end - hole_start)
hole_end - hole_start
hole_end
hole_end
hole_start
hole_start
size
size
size++
size
size
{		I915_RND_SUBSTATE(prng, seed_prng);		struct drm_i915_gem_object *obj;		unsigned int *order, count, n;		u64 hole_size;		hole_size = (hole_end - hole_start) >> size;		if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32))			hole_size = KMALLOC_MAX_SIZE / sizeof(u32);		count = hole_size >> 1;		if (!count) {			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);			break;		}		do {			order = i915_random_order(count, &prng);			if (order)				break;		} while (count >>= 1);		if (!count)			return -ENOMEM;		GEM_BUG_ON(!order);		GEM_BUG_ON(count * BIT_ULL(size) > vm->total);		GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end);		/* Ignore allocation failures (i.e. don't report them as		 * a test failure) as we are purposefully allocating very		 * large objects without checking that we have sufficient		 * memory. We expect to hit -ENOMEM.		 */		obj = fake_dma_object(i915, BIT_ULL(size));		if (IS_ERR(obj)) {			kfree(order);			break;		}		GEM_BUG_ON(obj->base.size != BIT_ULL(size));		if (i915_gem_object_pin_pages(obj)) {			i915_gem_object_put(obj);			kfree(order);			break;		}		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}			if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;			mock_vma.pages = obj->mm.pages;			mock_vma.node.size = BIT_ULL(size);			mock_vma.node.start = addr;			intel_runtime_pm_get(i915);			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);			intel_runtime_pm_put(i915);		}		count = n;		i915_random_reorder(order, count, &prng);		for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			vm->clear_range(vm, addr, BIT_ULL(size));		}		i915_gem_object_unpin_pages(obj);		i915_gem_object_put(obj);		kfree(order);		cleanup_freed_objects(i915);	}
I915_RND_SUBSTATE(prng, seed_prng);
I915_RND_SUBSTATE(prng, seed_prng)
I915_RND_SUBSTATE
I915_RND_SUBSTATE
prng
prng
seed_prng
seed_prng
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object *obj;
struct drm_i915_gem_object
drm_i915_gem_object
*obj
*
obj
unsigned int *order, count, n;
unsigned int *order, count, n;
unsigned int
*order
*
order
count
count
n
n
u64 hole_size;
u64 hole_size;
u64
u64
hole_size
hole_size
hole_size = (hole_end - hole_start) >> size;
hole_size = (hole_end - hole_start) >> size
hole_size
hole_size
(hole_end - hole_start) >> size
(hole_end - hole_start)
hole_end - hole_start
hole_end
hole_end
hole_start
hole_start
size
size
if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32))			hole_size = KMALLOC_MAX_SIZE / sizeof(u32);
hole_size > KMALLOC_MAX_SIZE / sizeof(u32)
hole_size
hole_size
KMALLOC_MAX_SIZE / sizeof(u32)
KMALLOC_MAX_SIZE
KMALLOC_MAX_SIZE
sizeof(u32)
u32
u32
u32

hole_size = KMALLOC_MAX_SIZE / sizeof(u32);
hole_size = KMALLOC_MAX_SIZE / sizeof(u32)
hole_size
hole_size
KMALLOC_MAX_SIZE / sizeof(u32)
KMALLOC_MAX_SIZE
KMALLOC_MAX_SIZE
sizeof(u32)
u32
u32
u32

count = hole_size >> 1;
count = hole_size >> 1
count
count
hole_size >> 1
hole_size
hole_size
1
if (!count) {			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);			break;		}
!count
count
count
{			pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);			break;		}
pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size);
pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\n",				 __func__, hole_start, hole_end, size, hole_size)
pr_debug
pr_debug
"%s: hole is too small [%llx - %llx] >> %d: %lld\n"
__func__
__func__
hole_start
hole_start
hole_end
hole_end
size
size
hole_size
hole_size
break;
do {			order = i915_random_order(count, &prng);			if (order)				break;		} while (count >>= 1);
{			order = i915_random_order(count, &prng);			if (order)				break;		}
order = i915_random_order(count, &prng);
order = i915_random_order(count, &prng)
order
order
i915_random_order(count, &prng)
i915_random_order
i915_random_order
count
count
&prng
prng
prng
if (order)				break;
order
order
break;
count >>= 1
count
count
1
if (!count)			return -ENOMEM;
!count
count
count
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
GEM_BUG_ON(!order);
GEM_BUG_ON(!order)
GEM_BUG_ON
GEM_BUG_ON
!order
order
order
GEM_BUG_ON(count * BIT_ULL(size) > vm->total);
GEM_BUG_ON(count * BIT_ULL(size) > vm->total)
GEM_BUG_ON
GEM_BUG_ON
count * BIT_ULL(size) > vm->total
count * BIT_ULL(size)
count
count
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
vm->total
vm
vm
total
GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end);
GEM_BUG_ON(hole_start + count * BIT_ULL(size) > hole_end)
GEM_BUG_ON
GEM_BUG_ON
hole_start + count * BIT_ULL(size) > hole_end
hole_start + count * BIT_ULL(size)
hole_start
hole_start
count * BIT_ULL(size)
count
count
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
hole_end
hole_end
obj = fake_dma_object(i915, BIT_ULL(size));
obj = fake_dma_object(i915, BIT_ULL(size))
obj
obj
fake_dma_object(i915, BIT_ULL(size))
fake_dma_object
fake_dma_object
i915
i915
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
if (IS_ERR(obj)) {			kfree(order);			break;		}
IS_ERR(obj)
IS_ERR
IS_ERR
obj
obj
{			kfree(order);			break;		}
kfree(order);
kfree(order)
kfree
kfree
order
order
break;
GEM_BUG_ON(obj->base.size != BIT_ULL(size));
GEM_BUG_ON(obj->base.size != BIT_ULL(size))
GEM_BUG_ON
GEM_BUG_ON
obj->base.size != BIT_ULL(size)
obj->base.size
obj->base
obj
obj
base
size
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
if (i915_gem_object_pin_pages(obj)) {			i915_gem_object_put(obj);			kfree(order);			break;		}
i915_gem_object_pin_pages(obj)
i915_gem_object_pin_pages
i915_gem_object_pin_pages
obj
obj
{			i915_gem_object_put(obj);			kfree(order);			break;		}
i915_gem_object_put(obj);
i915_gem_object_put(obj)
i915_gem_object_put
i915_gem_object_put
obj
obj
kfree(order);
kfree(order)
kfree
kfree
order
order
break;
for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}			if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;			mock_vma.pages = obj->mm.pages;			mock_vma.node.size = BIT_ULL(size);			mock_vma.node.start = addr;			intel_runtime_pm_get(i915);			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);			intel_runtime_pm_put(i915);		}
n = 0;
n = 0
n
n
0
n < count
n
n
count
count
n++
n
n
{			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}			if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;			mock_vma.pages = obj->mm.pages;			mock_vma.node.size = BIT_ULL(size);			mock_vma.node.start = addr;			intel_runtime_pm_get(i915);			vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);			intel_runtime_pm_put(i915);		}
u64 addr = hole_start + order[n] * BIT_ULL(size);
u64 addr = hole_start + order[n] * BIT_ULL(size);
u64
u64
addr = hole_start + order[n] * BIT_ULL(size)
addr
= hole_start + order[n] * BIT_ULL(size)
hole_start + order[n] * BIT_ULL(size)
hole_start
hole_start
order[n] * BIT_ULL(size)
order[n]
order
order
n
n
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);
GEM_BUG_ON(addr + BIT_ULL(size) > vm->total)
GEM_BUG_ON
GEM_BUG_ON
addr + BIT_ULL(size) > vm->total
addr + BIT_ULL(size)
addr
addr
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
vm->total
vm
vm
total
if (igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)) {				hole_end = hole_start; /* quit */				break;			}
igt_timeout(end_time,					"%s timed out before %d/%d\n",					__func__, n, count)
igt_timeout
igt_timeout
end_time
end_time
"%s timed out before %d/%d\n"
__func__
__func__
n
n
count
count
{				hole_end = hole_start; /* quit */				break;			}
hole_end = hole_start;
hole_end = hole_start
hole_end
hole_end
hole_start
hole_start
break;
if (vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size)))				break;
vm->allocate_va_range &&			    vm->allocate_va_range(vm, addr, BIT_ULL(size))
vm->allocate_va_range
vm
vm
allocate_va_range
vm->allocate_va_range(vm, addr, BIT_ULL(size))
vm->allocate_va_range
vm
vm
allocate_va_range
vm
vm
addr
addr
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
break;
mock_vma.pages = obj->mm.pages;
mock_vma.pages = obj->mm.pages
mock_vma.pages
mock_vma
mock_vma
pages
obj->mm.pages
obj->mm
obj
obj
mm
pages
mock_vma.node.size = BIT_ULL(size);
mock_vma.node.size = BIT_ULL(size)
mock_vma.node.size
mock_vma.node
mock_vma
mock_vma
node
size
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
mock_vma.node.start = addr;
mock_vma.node.start = addr
mock_vma.node.start
mock_vma.node
mock_vma
mock_vma
node
start
addr
addr
intel_runtime_pm_get(i915);
intel_runtime_pm_get(i915)
intel_runtime_pm_get
intel_runtime_pm_get
i915
i915
vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0);
vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0)
vm->insert_entries
vm
vm
insert_entries
vm
vm
&mock_vma
mock_vma
mock_vma
I915_CACHE_NONE
I915_CACHE_NONE
0
intel_runtime_pm_put(i915);
intel_runtime_pm_put(i915)
intel_runtime_pm_put
intel_runtime_pm_put
i915
i915
count = n;
count = n
count
count
n
n
i915_random_reorder(order, count, &prng);
i915_random_reorder(order, count, &prng)
i915_random_reorder
i915_random_reorder
order
order
count
count
&prng
prng
prng
for (n = 0; n < count; n++) {			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			vm->clear_range(vm, addr, BIT_ULL(size));		}
n = 0;
n = 0
n
n
0
n < count
n
n
count
count
n++
n
n
{			u64 addr = hole_start + order[n] * BIT_ULL(size);			GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);			vm->clear_range(vm, addr, BIT_ULL(size));		}
u64 addr = hole_start + order[n] * BIT_ULL(size);
u64 addr = hole_start + order[n] * BIT_ULL(size);
u64
u64
addr = hole_start + order[n] * BIT_ULL(size)
addr
= hole_start + order[n] * BIT_ULL(size)
hole_start + order[n] * BIT_ULL(size)
hole_start
hole_start
order[n] * BIT_ULL(size)
order[n]
order
order
n
n
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
GEM_BUG_ON(addr + BIT_ULL(size) > vm->total);
GEM_BUG_ON(addr + BIT_ULL(size) > vm->total)
GEM_BUG_ON
GEM_BUG_ON
addr + BIT_ULL(size) > vm->total
addr + BIT_ULL(size)
addr
addr
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
vm->total
vm
vm
total
vm->clear_range(vm, addr, BIT_ULL(size));
vm->clear_range(vm, addr, BIT_ULL(size))
vm->clear_range
vm
vm
clear_range
vm
vm
addr
addr
BIT_ULL(size)
BIT_ULL
BIT_ULL
size
size
i915_gem_object_unpin_pages(obj);
i915_gem_object_unpin_pages(obj)
i915_gem_object_unpin_pages
i915_gem_object_unpin_pages
obj
obj
i915_gem_object_put(obj);
i915_gem_object_put(obj)
i915_gem_object_put
i915_gem_object_put
obj
obj
kfree(order);
kfree(order)
kfree
kfree
order
order
cleanup_freed_objects(i915);
cleanup_freed_objects(i915)
cleanup_freed_objects
cleanup_freed_objects
i915
i915
return 0;
0
-----joern-----
(54,231,0)
(44,78,0)
(101,172,0)
(41,272,0)
(37,152,0)
(228,206,0)
(257,147,0)
(148,237,0)
(179,129,0)
(194,206,0)
(194,13,0)
(46,161,0)
(18,13,0)
(226,64,0)
(61,227,0)
(248,259,0)
(82,191,0)
(89,162,0)
(204,61,0)
(166,13,0)
(221,167,0)
(261,21,0)
(59,217,0)
(284,81,0)
(241,109,0)
(201,59,0)
(249,217,0)
(256,40,0)
(160,118,0)
(215,212,0)
(77,183,0)
(70,81,0)
(252,212,0)
(97,144,0)
(122,71,0)
(219,54,0)
(1,196,0)
(7,74,0)
(18,206,0)
(71,122,0)
(237,74,0)
(68,179,0)
(116,273,0)
(100,206,0)
(90,129,0)
(162,89,0)
(176,280,0)
(36,250,0)
(113,252,0)
(29,152,0)
(108,134,0)
(123,129,0)
(259,31,0)
(255,283,0)
(92,89,0)
(16,83,0)
(252,227,0)
(173,75,0)
(20,225,0)
(4,227,0)
(283,41,0)
(110,201,0)
(178,45,0)
(30,266,0)
(158,161,0)
(182,193,0)
(161,130,0)
(19,216,0)
(252,139,0)
(195,147,0)
(24,124,0)
(34,250,0)
(81,12,0)
(9,161,0)
(225,41,0)
(131,9,0)
(75,206,0)
(216,227,0)
(81,141,0)
(188,186,0)
(43,250,0)
(31,189,0)
(231,193,0)
(274,272,0)
(61,74,0)
(203,61,0)
(143,198,0)
(15,96,0)
(125,204,0)
(81,201,0)
(244,143,0)
(58,74,0)
(51,90,0)
(105,46,0)
(171,109,0)
(250,130,0)
(250,187,0)
(188,162,0)
(61,57,0)
(8,257,0)
(129,85,0)
(42,253,0)
(128,75,0)
(3,139,0)
(159,163,0)
(139,139,0)
(234,33,0)
(189,227,0)
(277,46,0)
(137,90,0)
(65,85,0)
(154,9,0)
(72,202,0)
(26,94,0)
(186,206,0)
(95,83,0)
(247,29,0)
(33,71,0)
(95,33,0)
(264,59,0)
(40,145,0)
(95,134,0)
(144,37,0)
(73,128,0)
(14,279,0)
(21,141,0)
(63,250,0)
(126,101,0)
(46,130,0)
(160,217,0)
(211,123,0)
(283,255,0)
(107,74,0)
(196,202,0)
(214,74,0)
(9,154,0)
(57,141,0)
(225,198,0)
(23,9,0)
(37,201,0)
(98,173,0)
(173,206,0)
(44,129,0)
(162,75,0)
(4,78,0)
(60,174,0)
(272,96,0)
(135,57,0)
(243,167,0)
(188,196,0)
(163,159,0)
(255,64,0)
(230,74,0)
(285,194,0)
(54,75,0)
(236,74,0)
(6,167,0)
(134,45,0)
(28,266,0)
(172,101,0)
(271,4,0)
(239,166,0)
(266,33,0)
(262,135,0)
(227,252,0)
(132,59,0)
(259,198,0)
(169,245,0)
(114,253,0)
(152,67,0)
(270,198,0)
(147,167,0)
(124,54,0)
(252,201,0)
(54,202,0)
(106,179,0)
(75,128,0)
(186,188,0)
(246,170,0)
(220,277,0)
(55,85,0)
(273,116,0)
(193,202,0)
(183,129,0)
(72,143,0)
(119,226,0)
(86,170,0)
(9,130,0)
(250,217,0)
(59,201,0)
(250,198,0)
(223,189,0)
(199,74,0)
(265,191,0)
(237,227,0)
(250,117,0)
(154,198,0)
(55,198,0)
(151,64,0)
(276,129,0)
(170,119,0)
(278,29,0)
(212,252,0)
(85,129,0)
(260,158,0)
(124,198,0)
(35,118,0)
(180,74,0)
(136,227,0)
(135,96,0)
(45,134,0)
(152,37,0)
(122,179,0)
(83,173,0)
(67,152,0)
(272,227,0)
(272,41,0)
(266,134,0)
(72,255,0)
(157,246,0)
(121,129,0)
(138,198,0)
(31,128,0)
(162,188,0)
(156,7,0)
(273,202,0)
(37,144,0)
(283,130,0)
(208,201,0)
(39,145,0)
(91,99,0)
(48,84,0)
(161,117,0)
(175,81,0)
(158,117,0)
(209,154,0)
(2,208,0)
(119,191,0)
(189,141,0)
(158,180,0)
(174,60,0)
(184,273,0)
(195,69,0)
(85,13,0)
(277,187,0)
(118,160,0)
(41,283,0)
(149,189,0)
(197,21,0)
(226,119,0)
(231,54,0)
(268,116,0)
(205,72,0)
(227,11,0)
(155,49,0)
(180,158,0)
(266,167,0)
(216,275,0)
(88,255,0)
(242,187,0)
(83,109,0)
(181,136,0)
(254,272,0)
(27,161,0)
(235,227,0)
(145,139,0)
(161,245,0)
(47,159,0)
(53,250,0)
(101,126,0)
(164,198,0)
(59,187,0)
(189,31,0)
(101,279,0)
(72,64,0)
(104,213,0)
(145,40,0)
(280,167,0)
(251,163,0)
(28,95,0)
(126,74,0)
(232,46,0)
(224,147,0)
(52,74,0)
(89,198,0)
(94,198,0)
(81,139,0)
(31,259,0)
(168,17,0)
(67,74,0)
(57,74,0)
(158,40,0)
(200,273,0)
(279,90,0)
(46,117,0)
(144,198,0)
(139,201,0)
(152,29,0)
(41,225,0)
(80,273,0)
(170,246,0)
(10,61,0)
(240,44,0)
(112,141,0)
(174,198,0)
(273,206,0)
(217,160,0)
(38,206,0)
(185,160,0)
(119,170,0)
(84,95,0)
(115,141,0)
(9,117,0)
(218,122,0)
(177,276,0)
(93,172,0)
(142,37,0)
(85,55,0)
(229,57,0)
(190,193,0)
(109,83,0)
(127,45,0)
(179,122,0)
(147,195,0)
(191,119,0)
(163,102,0)
(133,78,0)
(279,101,0)
(87,57,0)
(145,94,0)
(79,161,0)
(25,11,0)
(222,74,0)
(40,158,0)
(187,74,0)
(143,72,0)
(111,81,0)
(253,74,0)
(69,195,0)
(61,204,0)
(134,60,0)
(238,74,0)
(102,163,0)
(170,255,0)
(54,124,0)
(277,198,0)
(187,277,0)
(192,74,0)
(40,130,0)
(140,96,0)
(166,74,0)
(94,145,0)
(250,17,0)
(50,139,0)
(266,83,0)
(128,130,0)
(145,201,0)
(49,139,0)
(7,129,0)
(246,198,0)
(99,96,0)
(233,141,0)
(37,139,0)
(128,31,0)
(183,74,0)
(165,196,0)
(49,201,0)
(193,231,0)
(267,102,0)
(60,206,0)
(210,162,0)
(90,279,0)
(129,74,0)
(56,270,0)
(263,72,0)
(32,115,0)
(269,75,0)
(136,213,0)
(153,135,0)
(21,139,0)
(275,216,0)
(71,206,0)
(103,33,0)
(207,55,0)
(29,202,0)
(22,250,0)
(191,202,0)
(21,201,0)
(102,187,0)
(46,277,0)
(275,74,0)
(282,174,0)
(250,161,0)
(146,81,0)
(66,18,0)
(172,198,0)
(147,257,0)
(201,74,0)
(258,74,0)
(76,54,0)
(0,283,0)
(196,188,0)
(62,74,0)
(281,74,0)
(195,69,1)
(156,135,1)
(267,187,1)
(273,202,1)
(46,232,1)
(205,263,1)
(224,257,1)
(150,5,1)
(40,130,1)
(124,24,1)
(29,278,1)
(170,255,1)
(272,254,1)
(138,147,1)
(49,201,1)
(105,242,1)
(37,201,1)
(164,138,1)
(121,180,1)
(60,174,1)
(113,235,1)
(9,130,1)
(246,198,1)
(46,117,1)
(139,139,1)
(59,187,1)
(112,233,1)
(55,198,1)
(145,139,1)
(44,129,1)
(61,57,1)
(1,165,1)
(99,91,1)
(21,201,1)
(182,81,1)
(84,48,1)
(215,113,1)
(248,189,1)
(147,195,1)
(40,145,1)
(235,208,1)
(282,134,1)
(101,172,1)
(250,117,1)
(41,225,1)
(261,141,1)
(159,47,1)
(266,83,1)
(175,70,1)
(28,266,1)
(23,198,1)
(162,75,1)
(30,133,1)
(254,274,1)
(83,109,1)
(193,202,1)
(2,201,1)
(284,175,1)
(21,197,1)
(233,276,1)
(31,189,1)
(118,35,1)
(163,159,1)
(153,96,1)
(231,193,1)
(279,90,1)
(71,122,1)
(283,41,1)
(191,202,1)
(181,123,1)
(197,261,1)
(95,84,1)
(218,179,1)
(189,149,1)
(43,22,1)
(148,183,1)
(59,217,1)
(194,285,1)
(251,267,1)
(102,163,1)
(253,114,1)
(174,198,1)
(154,198,1)
(186,188,1)
(123,211,1)
(9,117,1)
(210,75,1)
(280,176,1)
(264,132,1)
(57,229,1)
(19,49,1)
(283,130,1)
(259,248,1)
(158,40,1)
(185,249,1)
(95,83,1)
(219,193,1)
(231,54,1)
(134,45,1)
(65,121,1)
(250,217,1)
(142,275,1)
(249,102,1)
(177,126,1)
(209,9,1)
(34,43,1)
(135,262,1)
(119,170,1)
(83,16,1)
(190,182,1)
(81,139,1)
(173,98,1)
(53,208,1)
(49,139,1)
(75,128,1)
(168,250,1)
(95,134,1)
(227,252,1)
(256,67,1)
(61,227,1)
(124,198,1)
(183,77,1)
(180,158,1)
(141,112,1)
(57,141,1)
(139,201,1)
(81,12,1)
(15,61,1)
(7,156,1)
(86,255,1)
(9,161,1)
(179,68,1)
(66,173,1)
(262,153,1)
(98,83,1)
(126,101,1)
(47,251,1)
(257,8,1)
(61,204,1)
(147,257,1)
(29,202,1)
(276,177,1)
(87,21,1)
(129,85,1)
(82,265,1)
(87,169,1)
(81,201,1)
(102,187,1)
(188,196,1)
(111,186,1)
(31,259,1)
(250,161,1)
(277,46,1)
(136,181,1)
(195,224,1)
(72,202,1)
(50,3,1)
(16,109,1)
(198,164,1)
(116,268,1)
(149,223,1)
(184,80,1)
(226,119,1)
(274,0,1)
(232,105,1)
(166,239,1)
(239,237,1)
(273,184,1)
(110,102,1)
(119,191,1)
(128,31,1)
(9,131,1)
(252,201,1)
(259,198,1)
(139,50,1)
(170,246,1)
(44,240,1)
(194,13,1)
(101,279,1)
(174,282,1)
(51,123,1)
(154,9,1)
(216,19,1)
(250,198,1)
(172,198,1)
(35,185,1)
(46,130,1)
(266,33,1)
(114,42,1)
(37,139,1)
(265,170,1)
(152,29,1)
(95,33,1)
(4,227,1)
(127,178,1)
(242,253,1)
(122,218,1)
(154,209,1)
(120,231,1)
(189,141,1)
(67,152,1)
(80,116,1)
(145,201,1)
(263,226,1)
(41,272,1)
(4,271,1)
(49,155,1)
(88,135,1)
(81,141,1)
(24,76,1)
(161,117,1)
(93,279,1)
(171,60,1)
(132,110,1)
(247,37,1)
(0,88,1)
(161,79,1)
(234,231,1)
(252,212,1)
(85,55,1)
(54,75,1)
(208,2,1)
(266,134,1)
(109,241,1)
(273,116,1)
(7,129,1)
(122,179,1)
(135,96,1)
(33,103,1)
(89,198,1)
(27,81,1)
(137,51,1)
(108,45,1)
(157,86,1)
(30,104,1)
(172,93,1)
(165,162,1)
(131,23,1)
(191,82,1)
(37,144,1)
(216,227,1)
(104,136,1)
(208,201,1)
(28,95,1)
(196,1,1)
(201,59,1)
(110,217,1)
(55,207,1)
(240,276,1)
(279,14,1)
(70,146,1)
(193,190,1)
(72,255,1)
(87,120,1)
(203,10,1)
(158,260,1)
(81,284,1)
(155,150,1)
(125,203,1)
(18,66,1)
(106,33,1)
(235,139,1)
(21,139,1)
(211,129,1)
(169,161,1)
(73,269,1)
(178,71,1)
(220,46,1)
(91,72,1)
(89,92,1)
(272,96,1)
(158,161,1)
(79,27,1)
(134,108,1)
(32,194,1)
(158,117,1)
(212,215,1)
(250,34,1)
(271,44,1)
(115,141,1)
(85,13,1)
(63,53,1)
(143,244,1)
(250,130,1)
(244,205,1)
(278,247,1)
(76,219,1)
(54,202,1)
(23,270,1)
(96,140,1)
(8,280,1)
(250,187,1)
(42,154,1)
(48,49,1)
(94,198,1)
(155,139,1)
(143,198,1)
(204,125,1)
(59,264,1)
(30,168,1)
(14,90,1)
(68,106,1)
(46,161,1)
(260,40,1)
(270,198,1)
(128,130,1)
(77,7,1)
(144,97,1)
(103,234,1)
(5,227,1)
(30,154,1)
(277,220,1)
(275,216,1)
(72,143,1)
(252,139,1)
(21,141,1)
(223,73,1)
(90,137,1)
(200,18,1)
(266,30,1)
(135,57,1)
(54,124,1)
(272,227,1)
(146,111,1)
(36,63,1)
(270,56,1)
(39,256,1)
(277,198,1)
(97,142,1)
(173,75,1)
(18,13,1)
(241,171,1)
(196,202,1)
(225,20,1)
(133,4,1)
(189,227,1)
(237,148,1)
(217,160,1)
(261,115,1)
(161,130,1)
(152,37,1)
(99,96,1)
(276,129,1)
(269,21,1)
(179,129,1)
(183,129,1)
(285,273,1)
(45,127,1)
(145,94,1)
(162,89,1)
(22,36,1)
(26,39,1)
(237,227,1)
(225,198,1)
(166,13,1)
(3,5,1)
(144,198,1)
(255,283,1)
(188,162,1)
(246,157,1)
(20,272,1)
(92,210,1)
(140,15,1)
(207,65,1)
(94,26,1)
(268,200,1)
(90,129,1)
(160,118,1)
(123,129,1)
(153,99,1)
(10,57,1)
(115,32,1)
(187,277,1)
(229,87,1)
(136,227,1)
(56,166,1)
(244,135,2)
(135,276,2)
(59,154,2)
(59,187,2)
(66,231,2)
(91,135,2)
(128,31,2)
(158,161,2)
(188,196,2)
(59,217,2)
(250,198,2)
(44,129,2)
(72,143,2)
(31,21,2)
(5,208,2)
(1,21,2)
(85,55,2)
(72,202,2)
(119,170,2)
(270,198,2)
(31,189,2)
(169,81,2)
(183,276,2)
(226,119,2)
(95,134,2)
(183,129,2)
(120,231,2)
(234,231,2)
(122,231,2)
(15,276,2)
(160,118,2)
(89,198,2)
(141,276,2)
(95,49,2)
(212,139,2)
(145,139,2)
(81,12,2)
(134,231,2)
(81,201,2)
(231,81,2)
(218,231,2)
(174,198,2)
(61,57,2)
(89,21,2)
(273,231,2)
(81,21,2)
(261,231,2)
(53,208,2)
(148,276,2)
(26,49,2)
(19,49,2)
(4,276,2)
(152,29,2)
(37,49,2)
(60,231,2)
(123,49,2)
(124,198,2)
(85,49,2)
(231,54,2)
(5,139,2)
(264,154,2)
(196,21,2)
(10,276,2)
(197,276,2)
(40,145,2)
(274,135,2)
(252,139,2)
(4,227,2)
(273,116,2)
(37,144,2)
(265,135,2)
(114,154,2)
(95,83,2)
(116,231,2)
(129,49,2)
(9,161,2)
(108,231,2)
(84,49,2)
(88,135,2)
(174,231,2)
(127,231,2)
(85,13,2)
(113,139,2)
(90,129,2)
(134,45,2)
(147,195,2)
(61,227,2)
(75,21,2)
(196,202,2)
(136,227,2)
(248,21,2)
(129,85,2)
(195,69,2)
(235,208,2)
(98,231,2)
(259,198,2)
(109,231,2)
(190,81,2)
(247,49,2)
(193,202,2)
(157,135,2)
(270,276,2)
(126,101,2)
(133,276,2)
(180,49,2)
(3,5,2)
(235,139,2)
(250,187,2)
(250,161,2)
(128,21,2)
(215,208,2)
(250,208,2)
(284,21,2)
(177,123,2)
(161,81,2)
(150,5,2)
(171,231,2)
(283,135,2)
(252,208,2)
(278,49,2)
(203,276,2)
(211,49,2)
(77,276,2)
(153,276,2)
(9,276,2)
(162,21,2)
(180,158,2)
(197,231,2)
(99,96,2)
(137,123,2)
(193,81,2)
(149,21,2)
(119,191,2)
(49,139,2)
(92,21,2)
(191,135,2)
(119,135,2)
(94,49,2)
(186,21,2)
(231,193,2)
(250,117,2)
(194,13,2)
(267,154,2)
(102,163,2)
(115,231,2)
(86,135,2)
(51,123,2)
(40,49,2)
(259,21,2)
(225,135,2)
(30,276,2)
(145,201,2)
(29,202,2)
(240,276,2)
(143,135,2)
(166,276,2)
(80,231,2)
(41,225,2)
(146,21,2)
(65,49,2)
(18,13,2)
(212,208,2)
(73,21,2)
(184,231,2)
(178,231,2)
(237,227,2)
(94,198,2)
(72,255,2)
(251,154,2)
(250,217,2)
(99,135,2)
(252,201,2)
(216,227,2)
(34,208,2)
(272,96,2)
(112,276,2)
(54,202,2)
(227,252,2)
(159,154,2)
(173,75,2)
(96,276,2)
(189,141,2)
(36,208,2)
(275,216,2)
(147,257,2)
(56,276,2)
(30,154,2)
(172,123,2)
(154,198,2)
(115,141,2)
(43,208,2)
(46,161,2)
(123,129,2)
(170,255,2)
(179,129,2)
(185,102,2)
(142,49,2)
(250,130,2)
(275,49,2)
(131,276,2)
(262,135,2)
(72,135,2)
(122,179,2)
(83,231,2)
(254,135,2)
(139,139,2)
(271,276,2)
(144,198,2)
(81,139,2)
(208,201,2)
(54,124,2)
(145,49,2)
(30,123,2)
(263,135,2)
(266,83,2)
(226,135,2)
(87,276,2)
(255,283,2)
(207,49,2)
(227,139,2)
(154,276,2)
(266,33,2)
(173,231,2)
(50,5,2)
(7,129,2)
(21,139,2)
(260,49,2)
(106,231,2)
(30,208,2)
(201,59,2)
(47,154,2)
(101,172,2)
(155,208,2)
(189,21,2)
(55,198,2)
(41,272,2)
(158,40,2)
(188,21,2)
(140,276,2)
(273,202,2)
(266,123,2)
(237,276,2)
(216,49,2)
(241,231,2)
(42,154,2)
(102,187,2)
(70,21,2)
(102,154,2)
(23,276,2)
(83,109,2)
(166,13,2)
(21,231,2)
(60,174,2)
(187,154,2)
(29,49,2)
(79,81,2)
(37,139,2)
(126,123,2)
(233,276,2)
(0,135,2)
(191,202,2)
(7,276,2)
(124,193,2)
(189,227,2)
(163,159,2)
(165,21,2)
(269,21,2)
(163,154,2)
(225,198,2)
(21,201,2)
(158,49,2)
(46,154,2)
(104,123,2)
(33,231,2)
(18,231,2)
(201,154,2)
(135,57,2)
(16,231,2)
(204,276,2)
(186,188,2)
(143,198,2)
(276,123,2)
(35,102,2)
(128,130,2)
(54,193,2)
(63,208,2)
(227,208,2)
(39,49,2)
(160,102,2)
(61,276,2)
(81,141,2)
(277,198,2)
(28,266,2)
(255,135,2)
(49,201,2)
(105,154,2)
(41,135,2)
(272,227,2)
(125,276,2)
(113,208,2)
(71,122,2)
(172,198,2)
(276,129,2)
(279,123,2)
(219,193,2)
(242,154,2)
(110,154,2)
(170,246,2)
(239,276,2)
(161,117,2)
(279,90,2)
(90,123,2)
(118,102,2)
(277,46,2)
(44,276,2)
(154,9,2)
(256,49,2)
(182,81,2)
(135,135,2)
(208,154,2)
(21,141,2)
(153,135,2)
(101,123,2)
(67,152,2)
(246,135,2)
(28,95,2)
(136,123,2)
(266,134,2)
(135,96,2)
(132,154,2)
(101,279,2)
(223,21,2)
(277,154,2)
(145,94,2)
(285,231,2)
(54,75,2)
(61,204,2)
(215,139,2)
(103,231,2)
(179,231,2)
(22,208,2)
(57,141,2)
(283,41,2)
(156,276,2)
(93,123,2)
(82,135,2)
(152,37,2)
(205,135,2)
(266,276,2)
(210,21,2)
(21,276,2)
(71,231,2)
(217,160,2)
(262,276,2)
(76,193,2)
(20,135,2)
(37,201,2)
(49,208,2)
(144,49,2)
(252,212,2)
(282,231,2)
(95,33,2)
(31,259,2)
(188,162,2)
(232,154,2)
(268,231,2)
(200,231,2)
(139,201,2)
(194,231,2)
(162,89,2)
(14,123,2)
(32,231,2)
(24,193,2)
(57,276,2)
(229,276,2)
(246,198,2)
(9,117,2)
(40,130,2)
(168,208,2)
(187,277,2)
(249,102,2)
(209,276,2)
(181,123,2)
(139,5,2)
(68,231,2)
(162,75,2)
(27,81,2)
(111,21,2)
(266,154,2)
(121,49,2)
(272,135,2)
(283,130,2)
(253,154,2)
(48,49,2)
(266,208,2)
(175,21,2)
(67,49,2)
(2,154,2)
(97,49,2)
(217,102,2)
(9,130,2)
(261,276,2)
(170,135,2)
(45,231,2)
(55,49,2)
(161,130,2)
(75,128,2)
(158,117,2)
(220,154,2)
(46,117,2)
(152,49,2)
(46,130,2)
-----------------------------------
(0,hole_start)
(1,total)
(2,count)
(3,count)
(4,kfree(order)
(5,order)
(6,for (size = 12; (hole_end - hole_start)
(7,i915_gem_object_unpin_pages(obj)
(8,mock_vma)
(9,hole_end - hole_start)
(10,order)
(11,)
(12,unsigned long end_time)
(13,struct drm_i915_private *i915)
(14,size)
(15,n)
(16,start)
(17,)
(18,intel_runtime_pm_get(i915)
(19,order)
(20,size)
(21,n < count)
(22,hole_end)
(23,hole_end)
(24,size)
(25,if (order)
(26,size)
(27,hole_end)
(28,RET)
(29,vm->total)
(30,0)
(31,order[n] * BIT_ULL(size)
(32,n)
(33,mock_vma.pages)
(34,hole_size)
(35,u32)
(36,hole_start)
(37,count * BIT_ULL(size)
(38,if (vm->allocate_va_range &&\n\\n\\t\\t\\t    vm->allocate_va_range(vm, addr, BIT_ULL(size)
(39,count)
(40,hole_start + count * BIT_ULL(size)
(41,order[n] * BIT_ULL(size)
(42,prng)
(43,size)
(44,i915_gem_object_put(obj)
(45,mock_vma.node)
(46,hole_end - hole_start)
(47,u32)
(48,ENOMEM)
(49,!count)
(50,1)
(51,obj)
(52,n)
(53,"%s: hole is too small [%llx - %llx] >> %d: %lld\\n")
(54,vm->allocate_va_range(vm, addr, BIT_ULL(size)
(55,BIT_ULL(size)
(56,size)
(57,count = n)
(58,if (hole_size > KMALLOC_MAX_SIZE / sizeof(u32)
(59,hole_size >> 1)
(60,mock_vma.node.size = BIT_ULL(size)
(61,i915_random_reorder(order, count, &prng)
(62,for (n = 0; n < count; n++)
(63,__func__)
(64,)
(65,i915)
(66,i915)
(67,GEM_BUG_ON(count * BIT_ULL(size)
(68,mm)
(69,struct i915_vma)
(70,__func__)
(71,mock_vma.pages = obj->mm.pages)
(72,vm->clear_range(vm, addr, BIT_ULL(size)
(73,hole_start)
(74,)
(75,addr = hole_start + order[n] * BIT_ULL(size)
(76,addr)
(77,obj)
(78,)
(79,hole_start)
(80,I915_CACHE_NONE)
(81,igt_timeout(end_time,\n\\n\\t\\t\\t\\t\\t"%s timed out before %d/%d\\n",\n\\n\\t\\t\\t\\t\\t__func__, n, count)
(82,total)
(83,mock_vma.node.start)
(84,-ENOMEM)
(85,fake_dma_object(i915, BIT_ULL(size)
(86,addr)
(87,count)
(88,addr)
(89,BIT_ULL(size)
(90,obj->base)
(91,n)
(92,size)
(93,size)
(94,BIT_ULL(size)
(95,return -ENOMEM;)
(96,n = 0)
(97,size)
(98,addr)
(99,n++)
(100,addr)
(101,obj->base.size != BIT_ULL(size)
(102,hole_size > KMALLOC_MAX_SIZE / sizeof(u32)
(103,pages)
(104,break;)
(105,hole_end)
(106,obj)
(107,do)
(108,size)
(109,mock_vma.node)
(110,count)
(111,end_time)
(112,0)
(113,count)
(114,seed_prng)
(115,n++)
(116,&mock_vma)
(117,u64 hole_end)
(118,sizeof(u32)
(119,addr + BIT_ULL(size)
(120,break;)
(121,obj)
(122,obj->mm.pages)
(123,IS_ERR(obj)
(124,BIT_ULL(size)
(125,prng)
(126,GEM_BUG_ON(obj->base.size != BIT_ULL(size)
(127,node)
(128,hole_start + order[n] * BIT_ULL(size)
(129,obj = fake_dma_object(i915, BIT_ULL(size)
(130,u64 hole_start)
(131,hole_start)
(132,hole_size)
(133,break;)
(134,mock_vma.node.size)
(135,n < count)
(136,kfree(order)
(137,base)
(138,size)
(139,count >>= 1)
(140,0)
(141,n = 0)
(142,count)
(143,BIT_ULL(size)
(144,BIT_ULL(size)
(145,count * BIT_ULL(size)
(146,"%s timed out before %d/%d\\n")
(147,memset(&mock_vma, 0, sizeof(struct i915_vma)
(148,order)
(149,n)
(150,break;)
(151,addr)
(152,count * BIT_ULL(size)
(153,n)
(154,(hole_end - hole_start)
(155,count)
(156,obj)
(157,size)
(158,hole_start + count * BIT_ULL(size)
(159,sizeof(u32)
(160,KMALLOC_MAX_SIZE / sizeof(u32)
(161,hole_end = hole_start)
(162,addr + BIT_ULL(size)
(163,KMALLOC_MAX_SIZE / sizeof(u32)
(164,12)
(165,vm)
(166,cleanup_freed_objects(i915)
(167,)
(168,break;)
(169,break;)
(170,addr + BIT_ULL(size)
(171,mock_vma)
(172,BIT_ULL(size)
(173,mock_vma.node.start = addr)
(174,BIT_ULL(size)
(175,n)
(176,seed_prng)
(177,obj)
(178,mock_vma)
(179,obj->mm)
(180,GEM_BUG_ON(hole_start + count * BIT_ULL(size)
(181,order)
(182,vm)
(183,i915_gem_object_put(obj)
(184,0)
(185,KMALLOC_MAX_SIZE)
(186,GEM_BUG_ON(addr + BIT_ULL(size)
(187,hole_size = (hole_end - hole_start)
(188,addr + BIT_ULL(size)
(189,order[n])
(190,allocate_va_range)
(191,vm->total)
(192,count)
(193,vm->allocate_va_range)
(194,intel_runtime_pm_put(i915)
(195,sizeof(struct i915_vma)
(196,vm->total)
(197,count)
(198,size = 12)
(199,hole_size)
(200,vm)
(201,count = hole_size >> 1)
(202,struct i915_address_space *vm)
(203,count)
(204,&prng)
(205,addr)
(206,)
(207,size)
(208,!count)
(209,size)
(210,addr)
(211,obj)
(212,&prng)
(213,)
(214,for (n = 0; n < count; n++)
(215,prng)
(216,!order)
(217,hole_size = KMALLOC_MAX_SIZE / sizeof(u32)
(218,pages)
(219,vm)
(220,size)
(221,mock_vma)
(222,obj)
(223,order)
(224,0)
(225,BIT_ULL(size)
(226,GEM_BUG_ON(addr + BIT_ULL(size)
(227,order = i915_random_order(count, &prng)
(228,if (igt_timeout(end_time,\n\\n\\t\\t\\t\\t\\t"%s timed out before %d/%d\\n",\n\\n\\t\\t\\t\\t\\t__func__, n, count)
(229,n)
(230,order)
(231,vm->allocate_va_range &&\n\\n\\t\\t\\t    vm->allocate_va_range(vm, addr, BIT_ULL(size)
(232,hole_start)
(233,n)
(234,mock_vma)
(235,order)
(236,if (IS_ERR(obj)
(237,kfree(order)
(238,if (!count)
(239,i915)
(240,obj)
(241,node)
(242,hole_size)
(243,size)
(244,size)
(245,)
(246,BIT_ULL(size)
(247,vm)
(248,size)
(249,hole_size)
(250,pr_debug("%s: hole is too small [%llx - %llx] >> %d: %lld\\n",\n\\n\\t\\t\\t\\t __func__, hole_start, hole_end, size, hole_size)
(251,KMALLOC_MAX_SIZE)
(252,i915_random_order(count, &prng)
(253,I915_RND_SUBSTATE(prng, seed_prng)
(254,n)
(255,addr = hole_start + order[n] * BIT_ULL(size)
(256,hole_start)
(257,&mock_vma)
(258,if (!count)
(259,BIT_ULL(size)
(260,hole_end)
(261,n)
(262,count)
(263,vm)
(264,1)
(265,vm)
(266,return 0;)
(267,hole_size)
(268,mock_vma)
(269,addr)
(270,size++)
(271,order)
(272,order[n])
(273,vm->insert_entries(vm, &mock_vma, I915_CACHE_NONE, 0)
(274,order)
(275,GEM_BUG_ON(!order)
(276,i915_gem_object_pin_pages(obj)
(277,(hole_end - hole_start)
(278,total)
(279,obj->base.size)
(280,I915_RND_STATE(seed_prng)
(281,if (i915_gem_object_pin_pages(obj)
(282,size)
(283,hole_start + order[n] * BIT_ULL(size)
(284,count)
(285,i915)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^