-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
46,47
46,48
46,49
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
55,58
55,59
55,60
56,57
57,58
57,59
58,59
60,61
60,62
61,62
61,63
63,64
65,66
65,67
66,67
68,69
68,70
69,70
71,72
72,73
72,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
82,83
83,84
83,85
84,85
86,87
88,89
89,90
89,91
89,92
90,91
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,44,45,49,52,54,59,62,64,67,70,73,74,78,80,85,87,91,93,95,99,101,105,107,112,113
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
47,48
47,49
57,58
57,59
68,69
68,70
76,77
76,78
-----guardedBy-----
54,95
49,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_13_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(GLOBAL_CONST_FIVE==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(6,21,0)
(21,22,0)
(48,22,0)
(14,4,0)
(38,35,0)
(46,40,0)
(7,10,0)
(44,1,0)
(23,16,0)
(39,29,0)
(35,49,0)
(21,51,0)
(24,19,0)
(11,40,0)
(19,51,0)
(43,49,0)
(12,10,0)
(40,20,0)
(28,50,0)
(8,25,0)
(51,22,0)
(4,35,0)
(14,51,0)
(52,7,0)
(27,52,0)
(36,54,0)
(33,14,0)
(45,21,0)
(5,29,0)
(9,17,0)
(19,22,0)
(30,31,0)
(53,22,0)
(29,39,0)
(13,51,0)
(26,50,0)
(35,4,0)
(51,14,0)
(49,35,0)
(0,25,0)
(3,25,0)
(48,51,0)
(14,33,0)
(36,16,0)
(10,25,0)
(39,10,0)
(7,52,0)
(42,31,0)
(35,10,0)
(2,17,0)
(32,39,0)
(41,52,0)
(31,51,0)
(16,36,0)
(37,48,0)
(15,44,0)
(4,14,0)
(34,7,0)
(52,55,0)
(18,10,0)
(51,14,1)
(27,17,1)
(17,2,1)
(45,31,1)
(21,6,1)
(47,50,1)
(48,51,1)
(35,49,1)
(47,44,1)
(43,38,1)
(42,51,1)
(14,33,1)
(41,27,1)
(47,19,1)
(52,7,1)
(38,13,1)
(24,48,1)
(2,9,1)
(45,36,1)
(26,28,1)
(14,4,1)
(5,32,1)
(36,16,1)
(23,31,1)
(9,10,1)
(49,43,1)
(4,35,1)
(39,10,1)
(32,50,1)
(15,39,1)
(7,10,1)
(28,17,1)
(29,5,1)
(21,51,1)
(39,29,1)
(31,51,1)
(6,45,1)
(12,18,1)
(31,30,1)
(30,42,1)
(50,26,1)
(28,52,1)
(35,10,1)
(37,21,1)
(7,34,1)
(16,23,1)
(13,39,1)
(34,41,1)
(10,12,1)
(19,24,1)
(48,37,1)
(44,15,1)
(19,51,1)
(15,39,2)
(21,39,2)
(31,39,2)
(36,31,2)
(4,35,2)
(4,39,2)
(24,39,2)
(32,50,2)
(42,39,2)
(34,17,2)
(23,31,2)
(35,49,2)
(36,16,2)
(48,39,2)
(41,17,2)
(16,31,2)
(51,39,2)
(30,39,2)
(13,39,2)
(14,33,2)
(39,50,2)
(44,39,2)
(19,51,2)
(43,39,2)
(35,39,2)
(38,39,2)
(27,17,2)
(6,39,2)
(39,29,2)
(48,51,2)
(45,39,2)
(14,39,2)
(7,10,2)
(52,7,2)
(49,39,2)
(51,14,2)
(19,39,2)
(7,17,2)
(21,51,2)
(37,39,2)
(52,17,2)
(39,10,2)
(35,10,2)
(14,4,2)
(5,50,2)
(29,50,2)
(31,51,2)
-----------------------------------
(0,if(GLOBAL_CONST_FIVE==5)
(1,)
(2,5)
(3,if(GLOBAL_CONST_FIVE==5)
(4,malloc(data*sizeof(char)
(5,HELLO_STRING)
(6,HELLO_STRING)
(7,&data)
(8,data)
(9,GLOBAL_CONST_FIVE)
(10,data = 0)
(11,myString)
(12,0)
(13,myString)
(14,(char *)
(15,"Input is less than the length of the source string")
(16,-1)
(17,GLOBAL_CONST_FIVE==5)
(18,data)
(19,free(myString)
(20,)
(21,strcpy(myString, HELLO_STRING)
(22,)
(23,1)
(24,myString)
(25,)
(26,5)
(27,stdin)
(28,GLOBAL_CONST_FIVE)
(29,strlen(HELLO_STRING)
(30,NULL)
(31,myString == NULL)
(32,data)
(33,char *)
(34,data)
(35,data*sizeof(char)
(36,exit(-1)
(37,myString)
(38,data)
(39,data > strlen(HELLO_STRING)
(40,)
(41,"%zu")
(42,myString)
(43,char)
(44,printLine("Input is less than the length of the source string")
(45,myString)
(46,if (data > strlen(HELLO_STRING)
(47,RET)
(48,printLine(myString)
(49,sizeof(char)
(50,GLOBAL_CONST_FIVE==5)
(51,myString = (char *)
(52,fscanf(stdin, "%zu", &data)
(53,if (myString == NULL)
(54,)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^