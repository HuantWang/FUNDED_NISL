-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,95
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_11_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,23,0)
(20,28,0)
(42,5,0)
(17,24,0)
(24,43,0)
(12,46,0)
(46,30,0)
(26,33,0)
(9,7,0)
(42,14,0)
(7,9,0)
(40,6,0)
(32,8,0)
(3,22,0)
(14,42,0)
(47,43,0)
(13,1,0)
(22,3,0)
(6,12,0)
(16,14,0)
(1,46,0)
(6,28,0)
(37,33,0)
(12,6,0)
(17,46,0)
(3,27,0)
(18,1,0)
(2,41,0)
(25,33,0)
(31,8,0)
(15,24,0)
(39,27,0)
(38,17,0)
(44,12,0)
(27,39,0)
(27,3,0)
(0,3,0)
(34,39,0)
(36,9,0)
(23,7,0)
(10,46,0)
(9,13,0)
(24,17,0)
(28,30,0)
(11,17,0)
(1,18,0)
(35,41,0)
(43,30,0)
(21,12,0)
(29,30,0)
(1,13,0)
(45,39,0)
(8,33,0)
(39,46,0)
(46,1,0)
(0,30,0)
(41,46,0)
(3,0,0)
(13,9,0)
(44,43,1)
(17,46,1)
(45,28,1)
(38,42,1)
(41,35,1)
(15,17,1)
(32,31,1)
(7,36,1)
(42,14,1)
(10,48,1)
(11,38,1)
(1,13,1)
(38,41,1)
(24,15,1)
(4,19,1)
(6,12,1)
(8,32,1)
(12,46,1)
(3,22,1)
(39,34,1)
(48,8,1)
(0,3,1)
(19,48,1)
(19,0,1)
(47,24,1)
(41,46,1)
(36,10,1)
(7,23,1)
(35,2,1)
(39,46,1)
(3,27,1)
(17,11,1)
(21,44,1)
(24,17,1)
(13,9,1)
(6,40,1)
(14,16,1)
(46,1,1)
(12,21,1)
(9,7,1)
(27,39,1)
(20,6,1)
(34,45,1)
(28,20,1)
(43,47,1)
(2,46,1)
(1,18,1)
(16,41,1)
(40,12,1)
(39,46,2)
(7,48,2)
(12,48,2)
(13,48,2)
(35,48,2)
(47,48,2)
(1,13,2)
(42,14,2)
(46,1,2)
(3,22,2)
(6,48,2)
(3,48,2)
(7,23,2)
(1,18,2)
(45,48,2)
(0,3,2)
(44,48,2)
(43,48,2)
(12,46,2)
(34,48,2)
(46,48,2)
(36,48,2)
(3,27,2)
(6,12,2)
(17,48,2)
(20,48,2)
(11,48,2)
(41,46,2)
(13,9,2)
(41,48,2)
(15,48,2)
(2,48,2)
(38,48,2)
(1,48,2)
(27,39,2)
(40,48,2)
(24,17,2)
(17,46,2)
(27,48,2)
(0,48,2)
(28,48,2)
(9,48,2)
(39,48,2)
(9,7,2)
(16,41,2)
(24,48,2)
(14,41,2)
(21,48,2)
(42,41,2)
(10,48,2)
-----------------------------------
(0,printStructLine((twoIntsStruct *)
(1,(struct _twoIntsStruct *)
(2,data)
(3,(twoIntsStruct *)
(4,RET)
(5,)
(6,data[0].intTwo)
(7,sizeof(struct _twoIntsStruct)
(8,data = NULL)
(9,100*sizeof(struct _twoIntsStruct)
(10,data)
(11,0)
(12,data[0])
(13,malloc(100*sizeof(struct _twoIntsStruct)
(14,-1)
(15,intOne)
(16,1)
(17,data[0])
(18,struct _twoIntsStruct *)
(19,globalReturnsTrue()
(20,0)
(21,0)
(22,twoIntsStruct *)
(23,struct _twoIntsStruct)
(24,data[0].intOne)
(25,if(globalReturnsTrue()
(26,if(globalReturnsTrue()
(27,&data[0])
(28,data[0].intTwo = 0)
(29,if (data == NULL)
(30,)
(31,data)
(32,NULL)
(33,)
(34,0)
(35,NULL)
(36,100)
(37,data)
(38,data)
(39,data[0])
(40,intTwo)
(41,data == NULL)
(42,exit(-1)
(43,data[0].intOne = 0)
(44,data)
(45,data)
(46,data = (struct _twoIntsStruct *)
(47,0)
(48,globalReturnsTrue()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^