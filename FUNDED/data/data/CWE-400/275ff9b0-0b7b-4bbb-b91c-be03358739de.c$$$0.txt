-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,18,23,26,28,34,36,38,43,44,47,51,52,54,57,62,63
-----computeFrom-----
12,13
12,14
21,22
21,23
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_02_bad()
CWE400_Resource_Exhaustion__rand_for_loop_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
1
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(11,33,0)
(12,9,0)
(15,10,0)
(34,11,0)
(16,18,0)
(19,15,0)
(25,6,0)
(24,25,0)
(7,18,0)
(4,30,0)
(21,10,0)
(3,30,0)
(31,0,0)
(0,9,0)
(20,9,0)
(28,30,0)
(0,22,0)
(5,32,0)
(13,6,0)
(14,6,0)
(9,27,0)
(10,15,0)
(15,30,0)
(22,0,0)
(26,6,0)
(9,12,0)
(18,11,0)
(1,5,0)
(8,13,0)
(17,11,0)
(0,15,0)
(13,0,0)
(0,13,0)
(24,5,1)
(0,15,1)
(23,15,1)
(31,8,1)
(10,21,1)
(20,23,1)
(15,10,1)
(13,6,1)
(0,9,1)
(12,20,1)
(8,25,1)
(2,29,1)
(13,0,1)
(29,9,1)
(29,23,1)
(9,12,1)
(26,18,1)
(8,6,1)
(16,29,1)
(6,14,1)
(21,19,1)
(0,31,1)
(2,13,1)
(18,7,1)
(14,26,1)
(1,13,1)
(25,6,1)
(7,16,1)
(5,1,1)
(25,24,1)
(0,22,1)
(13,6,2)
(16,29,2)
(0,22,2)
(25,13,2)
(7,29,2)
(0,13,2)
(18,29,2)
(13,29,2)
(24,13,2)
(9,23,2)
(0,15,2)
(15,10,2)
(20,23,2)
(0,29,2)
(12,23,2)
(5,13,2)
(1,13,2)
(8,13,2)
(26,29,2)
(9,12,2)
(25,6,2)
(0,9,2)
(14,29,2)
(31,29,2)
(31,13,2)
(6,29,2)
(13,13,2)
(8,29,2)
(13,0,2)
-----------------------------------
(0,(size_t)
(1,"Hello")
(2,RET)
(3,if(1)
(4,count)
(5,printLine("Hello")
(6,i = 0)
(7,0)
(8,i)
(9,count = RAND32()
(10,-1)
(11,)
(12,RAND32()
(13,i < (size_t)
(14,0)
(15,count = -1)
(16,i)
(17,for (i = 0; i < (size_t)
(18,i = 0)
(19,count)
(20,count)
(21,1)
(22,size_t)
(23,1)
(24,i)
(25,i++)
(26,i)
(27,)
(28,if(1)
(29,1)
(30,)
(31,count)
(32,)
(33,)
(34,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^