-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
90,91
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,89,91
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_02_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(13,41,0)
(23,35,0)
(17,38,0)
(36,11,0)
(45,1,0)
(42,11,0)
(34,33,0)
(27,32,0)
(14,4,0)
(4,36,0)
(0,18,0)
(33,32,0)
(22,41,0)
(11,7,0)
(30,20,0)
(35,18,0)
(20,18,0)
(38,18,0)
(18,41,0)
(21,39,0)
(41,18,0)
(6,16,0)
(1,35,0)
(3,16,0)
(9,32,0)
(44,47,0)
(31,10,0)
(40,38,0)
(18,47,0)
(38,6,0)
(11,42,0)
(24,32,0)
(13,15,0)
(11,36,0)
(29,33,0)
(37,4,0)
(2,21,0)
(1,44,0)
(36,4,0)
(48,6,0)
(41,22,0)
(15,31,0)
(28,35,0)
(41,13,0)
(39,26,0)
(8,20,0)
(16,47,0)
(46,44,0)
(35,1,0)
(6,38,0)
(42,47,0)
(39,21,0)
(15,13,0)
(19,15,0)
(4,18,0)
(43,47,0)
(7,11,0)
(10,31,0)
(31,15,0)
(35,18,1)
(12,5,1)
(1,45,1)
(17,40,1)
(28,20,1)
(20,8,1)
(12,42,1)
(4,14,1)
(19,0,1)
(15,31,1)
(11,36,1)
(33,29,1)
(30,18,1)
(37,16,1)
(29,34,1)
(25,12,1)
(45,35,1)
(6,48,1)
(14,37,1)
(6,38,1)
(4,18,1)
(11,7,1)
(13,15,1)
(23,28,1)
(35,23,1)
(48,38,1)
(38,17,1)
(21,2,1)
(5,33,1)
(31,10,1)
(18,41,1)
(46,1,1)
(2,20,1)
(0,5,1)
(1,35,1)
(40,44,1)
(28,39,1)
(39,21,1)
(42,11,1)
(38,18,1)
(44,46,1)
(3,6,1)
(41,13,1)
(36,4,1)
(20,18,1)
(8,30,1)
(31,19,1)
(16,3,1)
(41,22,1)
(42,11,2)
(38,18,2)
(11,7,2)
(38,5,2)
(21,20,2)
(14,5,2)
(20,18,2)
(37,5,2)
(6,5,2)
(19,5,2)
(0,5,2)
(48,5,2)
(13,5,2)
(35,5,2)
(39,20,2)
(20,5,2)
(3,5,2)
(36,5,2)
(42,5,2)
(18,5,2)
(46,5,2)
(40,5,2)
(41,22,2)
(44,5,2)
(16,5,2)
(41,5,2)
(45,5,2)
(41,13,2)
(28,5,2)
(31,5,2)
(4,5,2)
(1,5,2)
(30,5,2)
(11,5,2)
(23,5,2)
(35,18,2)
(11,36,2)
(39,21,2)
(15,31,2)
(17,5,2)
(15,5,2)
(6,38,2)
(4,18,2)
(2,20,2)
(31,10,2)
(1,35,2)
(36,4,2)
(13,15,2)
(18,41,2)
(8,5,2)
-----------------------------------
(0,data)
(1,data[0].intOne)
(2,1)
(3,0)
(4,data[0])
(5,1)
(6,data[0].intTwo)
(7,twoIntsStruct *)
(8,NULL)
(9,if(1)
(10,struct _twoIntsStruct)
(11,(twoIntsStruct *)
(12,1)
(13,malloc(100*sizeof(struct _twoIntsStruct)
(14,0)
(15,100*sizeof(struct _twoIntsStruct)
(16,data[0].intTwo = 0)
(17,0)
(18,data = (struct _twoIntsStruct *)
(19,100)
(20,data == NULL)
(21,-1)
(22,struct _twoIntsStruct *)
(23,0)
(24,if(1)
(25,RET)
(26,)
(27,data)
(28,data)
(29,NULL)
(30,data)
(31,sizeof(struct _twoIntsStruct)
(32,)
(33,data = NULL)
(34,data)
(35,data[0])
(36,&data[0])
(37,data)
(38,data[0])
(39,exit(-1)
(40,data)
(41,(struct _twoIntsStruct *)
(42,printStructLine((twoIntsStruct *)
(43,if (data == NULL)
(44,data[0].intOne = 0)
(45,intOne)
(46,0)
(47,)
(48,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^