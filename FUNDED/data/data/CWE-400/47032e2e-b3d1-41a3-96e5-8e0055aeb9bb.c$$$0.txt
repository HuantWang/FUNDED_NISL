-----label-----
0
-----code-----
static void goodB2GSink(int count)
{
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
11,12
12,13
12,14
13,14
15,16
15,17
17,18
19,20
19,21
20,21
20,22
21,22
21,23
22,23
25,26
25,27
26,27
29,30
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
36,37
36,38
37,38
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
49,50
50,51
51,52
51,53
52,53
-----nextToken-----
2,4,6,8,14,16,18,23,24,27,28,34,35,38,42,43,45,48,53,54
-----computeFrom-----
20,21
20,22
21,22
21,23
25,26
25,27
32,33
32,34
36,37
36,38
-----guardedBy-----
27,45
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2GSink(int count){    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodB2GSink(int count)
goodB2GSink
int count
int
count
count
{    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(2,18,0)
(13,8,0)
(11,19,0)
(18,9,0)
(30,19,0)
(20,26,0)
(27,25,0)
(19,30,0)
(3,12,0)
(8,24,0)
(29,26,0)
(16,6,0)
(30,6,0)
(10,8,0)
(25,12,0)
(5,7,0)
(0,19,0)
(25,15,0)
(1,26,0)
(12,26,0)
(21,7,0)
(12,25,0)
(25,14,0)
(19,14,0)
(6,30,0)
(6,14,0)
(22,28,0)
(15,25,0)
(17,20,0)
(7,8,0)
(4,6,0)
(7,21,1)
(0,6,1)
(19,11,1)
(11,0,1)
(19,14,1)
(1,29,1)
(29,30,1)
(12,25,1)
(23,30,1)
(17,18,1)
(30,19,1)
(27,3,1)
(25,14,1)
(26,1,1)
(20,17,1)
(23,12,1)
(2,12,1)
(6,14,1)
(3,26,1)
(25,27,1)
(4,16,1)
(21,5,1)
(12,26,1)
(18,2,1)
(16,7,1)
(6,4,1)
(20,26,1)
(30,6,1)
(3,20,1)
(25,15,1)
(12,25,2)
(30,6,2)
(19,14,2)
(0,6,2)
(6,14,2)
(20,12,2)
(25,14,2)
(17,12,2)
(1,30,2)
(25,12,2)
(29,30,2)
(26,30,2)
(19,6,2)
(12,12,2)
(12,26,2)
(18,12,2)
(12,30,2)
(27,30,2)
(25,15,2)
(2,12,2)
(25,30,2)
(3,12,2)
(20,26,2)
(3,30,2)
(11,6,2)
(27,12,2)
(30,19,2)
-----------------------------------
(0,count)
(1,0)
(2,"Hello")
(3,i)
(4,0)
(5,i)
(6,count > 0)
(7,i = 0)
(8,)
(9,)
(10,if (count > 0 && count <= 20)
(11,20)
(12,i < (size_t)
(13,i)
(14,int count)
(15,size_t)
(16,count)
(17,i)
(18,printLine("Hello")
(19,count <= 20)
(20,i++)
(21,0)
(22,for (i = 0; i < (size_t)
(23,RET)
(24,)
(25,(size_t)
(26,i = 0)
(27,count)
(28,)
(29,i)
(30,count > 0 && count <= 20)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^