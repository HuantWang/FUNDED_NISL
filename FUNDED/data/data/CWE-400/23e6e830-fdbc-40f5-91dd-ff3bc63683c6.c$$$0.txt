-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_12_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
89,92
89,93
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
96,97
98,99
100,101
100,102
101,102
103,104
103,105
105,106
106,107
106,108
107,108
110,111
111,112
111,113
112,113
112,114
113,114
113,115
114,115
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
128,129
129,130
129,131
130,131
132,133
132,134
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
143,144
143,145
143,146
144,145
145,146
147,148
149,150
150,151
151,152
151,153
152,153
154,155
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,93,97,99,102,104,108,109,115,116,117,118,124,125,126,127,131,135,137,141,142,146,148,153,155
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
91,92
91,93
103,104
103,105
111,112
111,113
120,121
120,122
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_12_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_12_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_12_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(11,75,0)
(78,25,0)
(76,43,0)
(51,77,0)
(51,70,0)
(77,10,0)
(49,66,0)
(40,41,0)
(30,60,0)
(51,1,0)
(15,24,0)
(8,12,0)
(61,16,0)
(62,10,0)
(81,57,0)
(21,23,0)
(8,7,0)
(1,28,0)
(46,56,0)
(8,34,0)
(16,36,0)
(2,43,0)
(64,24,0)
(10,77,0)
(77,51,0)
(0,63,0)
(2,54,0)
(59,63,0)
(55,21,0)
(7,8,0)
(58,57,0)
(75,60,0)
(74,29,0)
(41,40,0)
(31,4,0)
(71,66,0)
(32,30,0)
(75,11,0)
(61,29,0)
(25,78,0)
(5,57,0)
(60,75,0)
(37,16,0)
(73,4,0)
(42,57,0)
(54,14,0)
(32,48,0)
(60,30,0)
(71,34,0)
(24,28,0)
(30,32,0)
(13,26,0)
(82,71,0)
(19,23,0)
(7,36,0)
(3,14,0)
(47,66,0)
(48,32,0)
(31,18,0)
(47,14,0)
(79,36,0)
(43,28,0)
(38,54,0)
(53,5,0)
(23,56,0)
(26,14,0)
(44,29,0)
(14,32,0)
(18,31,0)
(67,2,0)
(78,17,0)
(4,31,0)
(34,8,0)
(39,54,0)
(50,71,0)
(66,31,0)
(12,8,0)
(15,26,0)
(1,51,0)
(22,10,0)
(9,5,0)
(23,21,0)
(4,40,0)
(29,66,0)
(33,61,0)
(66,36,0)
(80,60,0)
(31,66,0)
(72,15,0)
(10,14,0)
(56,36,0)
(14,28,0)
(40,4,0)
(20,26,0)
(29,61,0)
(6,25,0)
(34,71,0)
(27,21,0)
(47,35,0)
(70,51,0)
(54,2,0)
(69,47,0)
(21,66,0)
(63,66,0)
(26,15,0)
(32,14,0)
(47,69,1)
(52,47,1)
(61,33,1)
(78,25,1)
(9,53,1)
(65,1,1)
(6,63,1)
(7,8,1)
(31,4,1)
(55,63,1)
(32,48,1)
(63,66,1)
(4,40,1)
(26,13,1)
(50,16,1)
(64,15,1)
(82,50,1)
(15,72,1)
(20,14,1)
(31,18,1)
(46,23,1)
(30,60,1)
(33,29,1)
(14,32,1)
(16,37,1)
(54,38,1)
(59,0,1)
(19,21,1)
(8,34,1)
(72,26,1)
(24,64,1)
(22,43,1)
(43,76,1)
(40,41,1)
(66,31,1)
(63,59,1)
(23,21,1)
(29,66,1)
(45,5,1)
(77,10,1)
(26,14,1)
(80,3,1)
(13,20,1)
(73,49,1)
(60,75,1)
(75,80,1)
(62,22,1)
(23,19,1)
(37,61,1)
(1,51,1)
(67,54,1)
(51,70,1)
(34,71,1)
(2,54,1)
(44,74,1)
(15,26,1)
(38,39,1)
(52,65,1)
(71,66,1)
(2,67,1)
(32,30,1)
(39,24,1)
(10,14,1)
(76,2,1)
(47,14,1)
(69,65,1)
(61,29,1)
(25,6,1)
(51,77,1)
(8,12,1)
(54,14,1)
(21,27,1)
(21,66,1)
(56,46,1)
(65,7,1)
(55,78,1)
(27,55,1)
(74,56,1)
(29,44,1)
(0,66,1)
(10,62,1)
(47,66,1)
(75,11,1)
(71,82,1)
(3,45,1)
(40,73,1)
(49,45,1)
(5,9,1)
(63,45,2)
(1,51,2)
(82,45,2)
(10,14,2)
(14,32,2)
(20,45,2)
(19,45,2)
(23,21,2)
(22,45,2)
(34,71,2)
(7,45,2)
(77,10,2)
(13,45,2)
(38,45,2)
(37,45,2)
(29,66,2)
(78,25,2)
(51,45,2)
(21,45,2)
(24,45,2)
(47,14,2)
(14,45,2)
(0,45,2)
(54,14,2)
(74,45,2)
(50,45,2)
(47,65,2)
(56,45,2)
(77,45,2)
(47,66,2)
(33,45,2)
(60,75,2)
(30,45,2)
(21,66,2)
(40,45,2)
(34,45,2)
(72,45,2)
(6,63,2)
(32,30,2)
(1,45,2)
(80,45,2)
(71,45,2)
(73,45,2)
(10,45,2)
(30,60,2)
(61,29,2)
(31,4,2)
(29,45,2)
(51,70,2)
(27,45,2)
(23,45,2)
(69,65,2)
(39,45,2)
(66,31,2)
(75,11,2)
(46,45,2)
(55,45,2)
(15,26,2)
(4,40,2)
(2,54,2)
(78,63,2)
(32,45,2)
(3,45,2)
(4,45,2)
(75,45,2)
(31,45,2)
(44,45,2)
(26,14,2)
(8,45,2)
(49,45,2)
(59,45,2)
(25,63,2)
(31,18,2)
(40,41,2)
(8,34,2)
(71,66,2)
(51,77,2)
(26,45,2)
(64,45,2)
(7,8,2)
(66,45,2)
(8,12,2)
(15,45,2)
(63,66,2)
(16,45,2)
(76,45,2)
(62,45,2)
(54,45,2)
(43,45,2)
(2,45,2)
(60,45,2)
(67,45,2)
(32,48,2)
(61,45,2)
-----------------------------------
(0,data)
(1,printStructLine((twoIntsStruct *)
(2,data[0].intTwo)
(3,data)
(4,calloc(100, sizeof(struct _twoIntsStruct)
(5,data = NULL)
(6,1)
(7,printStructLine((twoIntsStruct *)
(8,(twoIntsStruct *)
(9,NULL)
(10,data[0])
(11,struct _twoIntsStruct)
(12,twoIntsStruct *)
(13,0)
(14,data = (struct _twoIntsStruct *)
(15,data[0].intOne)
(16,data[0].intTwo = 0)
(17,)
(18,struct _twoIntsStruct *)
(19,intOne)
(20,data)
(21,data[0])
(22,data)
(23,data[0].intOne)
(24,data[0].intOne = 0)
(25,-1)
(26,data[0])
(27,0)
(28,)
(29,data[0])
(30,ALLOCA(100*sizeof(struct _twoIntsStruct)
(31,(struct _twoIntsStruct *)
(32,(struct _twoIntsStruct *)
(33,intTwo)
(34,&data[0])
(35,)
(36,)
(37,0)
(38,0)
(39,data)
(40,sizeof(struct _twoIntsStruct)
(41,struct _twoIntsStruct)
(42,if(globalReturnsTrueOrFalse()
(43,data[0].intTwo = 0)
(44,0)
(45,globalReturnsTrueOrFalse()
(46,0)
(47,free(data)
(48,struct _twoIntsStruct *)
(49,data)
(50,data)
(51,(twoIntsStruct *)
(52,RET)
(53,data)
(54,data[0])
(55,data)
(56,data[0].intOne = 0)
(57,)
(58,if(globalReturnsTrueOrFalse()
(59,NULL)
(60,100*sizeof(struct _twoIntsStruct)
(61,data[0].intTwo)
(62,0)
(63,data == NULL)
(64,0)
(65,globalReturnsTrueOrFalse()
(66,data = (struct _twoIntsStruct *)
(67,intTwo)
(68, sizeof(struct _twoIntsStruct)
(69,data)
(70,twoIntsStruct *)
(71,data[0])
(72,intOne)
(73,100)
(74,data)
(75,sizeof(struct _twoIntsStruct)
(76,0)
(77,&data[0])
(78,exit(-1)
(79,if (data == NULL)
(80,100)
(81,data)
(82,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^