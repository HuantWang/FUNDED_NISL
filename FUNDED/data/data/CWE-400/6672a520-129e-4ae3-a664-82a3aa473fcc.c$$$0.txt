-----label-----
1
-----code-----
static int init_bf_ctr(EVP_CIPHER_CTX *ctx, const unsigned char *key,
    const unsigned char *iv, int enc) {
  struct bf_ctr_ex *bce;

  bce = EVP_CIPHER_CTX_get_app_data(ctx);
  if (bce == NULL) {

    /* Allocate our data structure. */
    bce = calloc(1, sizeof(struct bf_ctr_ex));
    if (bce == NULL) {
      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),
        MOD_SFTP_VERSION ": Out of memory!");
      _exit(1);
    }

    EVP_CIPHER_CTX_set_app_data(ctx, bce);
  }

  if (key != NULL) {
    int key_len;

# if OPENSSL_VERSION_NUMBER == 0x0090805fL
    /* OpenSSL 0.9.8e had a bug where EVP_CIPHER_CTX_key_length() returned
     * the cipher key length rather than the context key length.
     */
    key_len = ctx->key_len;
# else
    key_len = EVP_CIPHER_CTX_key_length(ctx);
# endif

    BF_set_key(&(bce->key), key_len, key);
  }

  if (iv != NULL) {
    memcpy(bce->counter, iv, BF_BLOCK);
  }

  return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
23,24
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
48,50
48,51
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
57,58
58,59
58,60
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
71,72
71,73
72,73
75,76
76,77
76,78
76,79
77,78
79,80
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
89,91
89,92
90,91
91,92
91,93
93,94
95,96
96,97
96,98
97,98
99,100
99,101
100,101
102,103
104,105
105,106
105,107
105,108
105,109
106,107
108,109
109,110
110,111
110,112
111,112
114,115
116,117
118,119
118,120
119,120
119,121
120,121
122,123
124,125
125,126
126,127
126,128
126,129
126,130
127,128
129,130
129,131
130,131
133,134
135,136
137,138
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,22,24,29,31,32,36,39,41,45,47,52,55,56,60,61,65,67,73,74,78,80,82,86,88,92,94,98,101,103,107,112,113,115,117,121,123,128,131,132,134,136,138
-----computeFrom-----
34,35
34,36
43,44
43,45
50,51
50,52
63,64
63,65
84,85
84,86
96,97
96,98
119,120
119,121
-----guardedBy-----
47,67
45,82
86,117
121,134
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int init_bf_ctr(EVP_CIPHER_CTX *ctx, const unsigned char *key,    const unsigned char *iv, int enc) {  struct bf_ctr_ex *bce;  bce = EVP_CIPHER_CTX_get_app_data(ctx);  if (bce == NULL) {    /* Allocate our data structure. */    bce = calloc(1, sizeof(struct bf_ctr_ex));    if (bce == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    EVP_CIPHER_CTX_set_app_data(ctx, bce);  }  if (key != NULL) {    int key_len;# if OPENSSL_VERSION_NUMBER == 0x0090805fL    /* OpenSSL 0.9.8e had a bug where EVP_CIPHER_CTX_key_length() returned     * the cipher key length rather than the context key length.     */    key_len = ctx->key_len;# else    key_len = EVP_CIPHER_CTX_key_length(ctx);# endif    BF_set_key(&(bce->key), key_len, key);  }  if (iv != NULL) {    memcpy(bce->counter, iv, BF_BLOCK);  }  return 1;}
static int
init_bf_ctr(EVP_CIPHER_CTX *ctx, const unsigned char *key,    const unsigned char *iv, int enc)
init_bf_ctr
EVP_CIPHER_CTX *ctx
EVP_CIPHER_CTX
EVP_CIPHER_CTX
*ctx
*
ctx
const unsigned char *key
const unsigned char
*key
*
key
const unsigned char *iv
const unsigned char
*iv
*
iv
int enc
int
enc
enc
{  struct bf_ctr_ex *bce;  bce = EVP_CIPHER_CTX_get_app_data(ctx);  if (bce == NULL) {    /* Allocate our data structure. */    bce = calloc(1, sizeof(struct bf_ctr_ex));    if (bce == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    EVP_CIPHER_CTX_set_app_data(ctx, bce);  }  if (key != NULL) {    int key_len;# if OPENSSL_VERSION_NUMBER == 0x0090805fL    /* OpenSSL 0.9.8e had a bug where EVP_CIPHER_CTX_key_length() returned     * the cipher key length rather than the context key length.     */    key_len = ctx->key_len;# else    key_len = EVP_CIPHER_CTX_key_length(ctx);# endif    BF_set_key(&(bce->key), key_len, key);  }  if (iv != NULL) {    memcpy(bce->counter, iv, BF_BLOCK);  }  return 1;}
struct bf_ctr_ex *bce;
struct bf_ctr_ex *bce;
struct bf_ctr_ex
bf_ctr_ex
*bce
*
bce
bce = EVP_CIPHER_CTX_get_app_data(ctx);
bce = EVP_CIPHER_CTX_get_app_data(ctx)
bce
bce
EVP_CIPHER_CTX_get_app_data(ctx)
EVP_CIPHER_CTX_get_app_data
EVP_CIPHER_CTX_get_app_data
ctx
ctx
if (bce == NULL) {    /* Allocate our data structure. */    bce = calloc(1, sizeof(struct bf_ctr_ex));    if (bce == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    EVP_CIPHER_CTX_set_app_data(ctx, bce);  }
bce == NULL
bce
bce
NULL
NULL
{    /* Allocate our data structure. */    bce = calloc(1, sizeof(struct bf_ctr_ex));    if (bce == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }    EVP_CIPHER_CTX_set_app_data(ctx, bce);  }
bce = calloc(1, sizeof(struct bf_ctr_ex));
bce = calloc(1, sizeof(struct bf_ctr_ex))
bce
bce
calloc(1, sizeof(struct bf_ctr_ex))
calloc
calloc
1
sizeof(struct bf_ctr_ex)
struct bf_ctr_ex
struct bf_ctr_ex
bf_ctr_ex

if (bce == NULL) {      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }
bce == NULL
bce
bce
NULL
NULL
{      pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");      _exit(1);    }
pr_log_pri(pr_log_level_exhausted_rsrc(PR_LOG_RSRC_MEM, 0),        MOD_SFTP_VERSION ": Out of memory!");
_exit(1);
_exit(1)
_exit
_exit
1
EVP_CIPHER_CTX_set_app_data(ctx, bce);
EVP_CIPHER_CTX_set_app_data(ctx, bce)
EVP_CIPHER_CTX_set_app_data
EVP_CIPHER_CTX_set_app_data
ctx
ctx
bce
bce
if (key != NULL) {    int key_len;# if OPENSSL_VERSION_NUMBER == 0x0090805fL    /* OpenSSL 0.9.8e had a bug where EVP_CIPHER_CTX_key_length() returned     * the cipher key length rather than the context key length.     */    key_len = ctx->key_len;# else    key_len = EVP_CIPHER_CTX_key_length(ctx);# endif    BF_set_key(&(bce->key), key_len, key);  }
key != NULL
key
key
NULL
NULL
{    int key_len;# if OPENSSL_VERSION_NUMBER == 0x0090805fL    /* OpenSSL 0.9.8e had a bug where EVP_CIPHER_CTX_key_length() returned     * the cipher key length rather than the context key length.     */    key_len = ctx->key_len;# else    key_len = EVP_CIPHER_CTX_key_length(ctx);# endif    BF_set_key(&(bce->key), key_len, key);  }
int key_len;
int key_len;
int
key_len
key_len
key_len = EVP_CIPHER_CTX_key_length(ctx);
key_len = EVP_CIPHER_CTX_key_length(ctx)
key_len
key_len
EVP_CIPHER_CTX_key_length(ctx)
EVP_CIPHER_CTX_key_length
EVP_CIPHER_CTX_key_length
ctx
ctx
BF_set_key(&(bce->key), key_len, key);
BF_set_key(&(bce->key), key_len, key)
BF_set_key
BF_set_key
&(bce->key)
(bce->key)
bce->key
bce
bce
key
key_len
key_len
key
key
if (iv != NULL) {    memcpy(bce->counter, iv, BF_BLOCK);  }
iv != NULL
iv
iv
NULL
NULL
{    memcpy(bce->counter, iv, BF_BLOCK);  }
memcpy(bce->counter, iv, BF_BLOCK);
memcpy(bce->counter, iv, BF_BLOCK)
memcpy
memcpy
bce->counter
bce
bce
counter
iv
iv
BF_BLOCK
BF_BLOCK
return 1;
1
-----joern-----
(41,43,0)
(6,1,0)
(16,17,0)
(51,43,0)
(3,21,0)
(23,42,0)
(33,3,0)
(19,23,0)
(28,4,0)
(32,1,0)
(48,17,0)
(54,12,0)
(55,21,0)
(10,13,0)
(59,55,0)
(13,57,0)
(49,25,0)
(40,9,0)
(58,48,0)
(21,55,0)
(20,1,0)
(47,26,0)
(3,23,0)
(18,0,0)
(34,3,0)
(7,32,0)
(37,29,0)
(27,4,0)
(0,27,0)
(30,44,0)
(21,29,0)
(5,46,0)
(50,47,0)
(14,47,0)
(31,0,0)
(45,23,0)
(16,27,0)
(48,12,0)
(36,29,0)
(56,16,0)
(4,27,0)
(1,20,0)
(46,4,0)
(39,9,0)
(27,25,0)
(12,43,0)
(35,30,0)
(24,29,0)
(32,29,0)
(16,25,0)
(12,48,0)
(22,27,0)
(55,17,0)
(11,21,0)
(9,21,0)
(3,27,0)
(53,20,0)
(38,13,0)
(46,5,0)
(23,3,0)
(52,32,0)
(8,16,0)
(20,17,0)
(2,48,0)
(4,46,0)
(23,26,0)
(15,29,0)
(50,1,1)
(32,7,1)
(21,55,1)
(3,21,1)
(30,35,1)
(19,3,1)
(48,2,1)
(23,3,1)
(10,38,1)
(1,20,1)
(13,57,1)
(56,0,1)
(9,21,1)
(23,45,1)
(16,8,1)
(33,47,1)
(46,28,1)
(4,46,1)
(52,32,1)
(35,0,1)
(0,27,1)
(7,23,1)
(6,13,1)
(9,40,1)
(3,27,1)
(20,53,1)
(16,17,1)
(46,5,1)
(38,9,1)
(58,54,1)
(14,50,1)
(59,11,1)
(34,33,1)
(12,48,1)
(3,34,1)
(0,31,1)
(45,19,1)
(16,27,1)
(8,56,1)
(50,12,1)
(27,4,1)
(54,13,1)
(13,10,1)
(20,17,1)
(23,26,1)
(22,9,1)
(2,58,1)
(47,26,1)
(32,1,1)
(31,18,1)
(53,6,1)
(18,27,1)
(40,39,1)
(28,22,1)
(55,59,1)
(48,17,1)
(47,14,1)
(38,16,1)
(55,17,1)
(56,30,1)
(7,47,1)
(39,21,1)
(4,46,2)
(48,13,2)
(16,9,2)
(54,13,2)
(20,17,2)
(23,26,2)
(32,1,2)
(6,13,2)
(3,27,2)
(34,47,2)
(9,21,2)
(55,17,2)
(46,5,2)
(33,47,2)
(16,17,2)
(56,9,2)
(48,17,2)
(23,47,2)
(4,9,2)
(27,9,2)
(2,13,2)
(31,9,2)
(21,55,2)
(18,9,2)
(52,32,2)
(53,13,2)
(8,9,2)
(20,13,2)
(19,47,2)
(45,47,2)
(1,20,2)
(1,13,2)
(58,13,2)
(0,27,2)
(23,3,2)
(28,9,2)
(0,9,2)
(22,9,2)
(12,13,2)
(46,9,2)
(16,27,2)
(35,0,2)
(30,0,2)
(27,4,2)
(3,47,2)
(12,48,2)
(3,21,2)
(47,26,2)
(13,57,2)
-----------------------------------
(0,bce == NULL)
(1,key_len = EVP_CIPHER_CTX_key_length(ctx)
(2,key_len)
(3,bce->counter)
(4,calloc(1, sizeof(struct bf_ctr_ex)
(5,struct bf_ctr_ex)
(6,key_len)
(7,1)
(8,bce)
(9,bce == NULL)
(10,NULL)
(11,bce)
(12,key_len = ctx->key_len)
(13,key != NULL)
(14,NULL)
(15,if (bce == NULL)
(16,EVP_CIPHER_CTX_set_app_data(ctx, bce)
(17,EVP_CIPHER_CTX *ctx)
(18,bce)
(19,iv)
(20,EVP_CIPHER_CTX_key_length(ctx)
(21,bce = EVP_CIPHER_CTX_get_app_data(ctx)
(22,bce)
(23,memcpy(bce->counter, iv, BF_BLOCK)
(24,bce)
(25,)
(26,const unsigned char *iv)
(27,bce = calloc(1, sizeof(struct bf_ctr_ex)
(28,1)
(29,)
(30,_exit(1)
(31,NULL)
(32,return 1;)
(33,bce)
(34,counter)
(35,1)
(36,if (iv != NULL)
(37,if (key != NULL)
(38,key)
(39,bce)
(40,NULL)
(41,BF_set_key)
(42,)
(43,)
(44,)
(45,BF_BLOCK)
(46,sizeof(struct bf_ctr_ex)
(47,iv != NULL)
(48,ctx->key_len)
(49,if (bce == NULL)
(50,iv)
(51,key_len)
(52,RET)
(53,ctx)
(54,key_len)
(55,EVP_CIPHER_CTX_get_app_data(ctx)
(56,ctx)
(57,const unsigned char *key)
(58,ctx)
(59,ctx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^