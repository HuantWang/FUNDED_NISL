-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* FIX: Use a relatively small number */
        count = 20;
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
59,62
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,51,56,58,62,64,68,72,74,78,79
-----computeFrom-----
32,33
32,34
48,49
48,50
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B()
goodG2B
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
count = 20;
count = 20
count
count
20
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(11,4,0)
(34,17,0)
(37,31,0)
(22,31,0)
(26,1,0)
(19,6,0)
(32,36,0)
(1,36,0)
(10,27,0)
(0,1,0)
(39,0,0)
(35,13,0)
(16,3,0)
(5,25,0)
(0,11,0)
(4,36,0)
(17,13,0)
(31,4,0)
(18,36,0)
(23,4,0)
(11,0,0)
(33,8,0)
(25,36,0)
(14,36,0)
(28,11,0)
(13,17,0)
(17,25,0)
(9,8,0)
(6,25,0)
(31,23,0)
(38,23,0)
(1,30,0)
(22,1,0)
(20,9,0)
(27,17,0)
(12,30,0)
(2,4,0)
(21,36,0)
(30,1,0)
(8,36,0)
(13,21,0)
(24,22,0)
(8,9,0)
(21,3,0)
(7,21,0)
(27,25,0)
(3,21,0)
(29,23,0)
(21,3,1)
(27,17,1)
(27,10,1)
(0,39,1)
(0,1,1)
(7,1,1)
(35,34,1)
(19,27,1)
(6,19,1)
(31,23,1)
(10,17,1)
(34,31,1)
(23,38,1)
(37,22,1)
(33,21,1)
(13,21,1)
(38,29,1)
(20,33,1)
(8,9,1)
(39,28,1)
(31,37,1)
(11,0,1)
(1,30,1)
(24,23,1)
(30,12,1)
(16,7,1)
(9,20,1)
(22,24,1)
(28,8,1)
(13,35,1)
(17,13,1)
(22,1,1)
(15,6,1)
(29,11,1)
(3,16,1)
(12,26,1)
(17,13,2)
(1,30,2)
(22,1,2)
(31,23,2)
(13,21,2)
(21,3,2)
(27,17,2)
(11,0,2)
(8,9,2)
(0,1,2)
-----------------------------------
(0,*countPtr1)
(1,*countPtr1 = &count)
(2,count)
(3,&count)
(4,)
(5,count)
(6,printLine("Sleep time possibly too long")
(7,countPtr2)
(8,count = -1)
(9,-1)
(10,count)
(11,count = *countPtr1)
(12,count)
(13,*countPtr2)
(14,countPtr2)
(15,RET)
(16,count)
(17,count = *countPtr2)
(18,countPtr1)
(19,"Sleep time possibly too long")
(20,1)
(21,*countPtr2 = &count)
(22,*countPtr1)
(23,count = 20)
(24,countPtr1)
(25,)
(26,countPtr1)
(27,SLEEP(count)
(28,count)
(29,count)
(30,&count)
(31,*countPtr1 = count)
(32,count)
(33,count)
(34,count)
(35,countPtr2)
(36,)
(37,count)
(38,20)
(39,countPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^