-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(5==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
33,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,19,20,25,27,28,31,34,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
18,19
18,20
33,34
33,35
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_03_bad
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(6,5,0)
(34,31,0)
(37,20,0)
(43,26,0)
(7,46,0)
(10,42,0)
(39,5,0)
(13,19,0)
(35,22,0)
(8,12,0)
(14,25,0)
(12,46,0)
(32,4,0)
(41,51,0)
(47,20,0)
(42,19,0)
(29,46,0)
(19,16,0)
(55,12,0)
(45,32,0)
(2,48,0)
(51,41,0)
(16,5,0)
(3,7,0)
(23,9,0)
(49,35,0)
(32,31,0)
(8,46,0)
(17,16,0)
(24,26,0)
(38,51,0)
(52,8,0)
(31,32,0)
(18,36,0)
(19,42,0)
(40,41,0)
(9,12,0)
(33,5,0)
(31,16,0)
(48,51,0)
(44,14,0)
(2,12,0)
(9,46,0)
(54,32,0)
(50,27,0)
(48,2,0)
(1,7,0)
(43,30,0)
(28,27,0)
(11,2,0)
(51,48,0)
(51,16,0)
(0,36,0)
(7,12,0)
(2,11,0)
(12,2,0)
(53,16,0)
(36,12,0)
(15,14,0)
(26,43,0)
(12,2,1)
(45,20,1)
(20,37,1)
(54,45,1)
(18,12,1)
(34,54,1)
(26,24,1)
(51,16,1)
(32,31,1)
(21,27,1)
(31,34,1)
(40,38,1)
(23,7,1)
(31,16,1)
(16,53,1)
(43,26,1)
(0,18,1)
(42,10,1)
(36,12,1)
(9,23,1)
(52,9,1)
(27,28,1)
(51,41,1)
(35,49,1)
(36,0,1)
(37,47,1)
(3,43,1)
(7,12,1)
(21,8,1)
(8,12,1)
(47,16,1)
(3,36,1)
(38,55,1)
(50,32,1)
(2,48,1)
(50,20,1)
(8,52,1)
(28,50,1)
(10,13,1)
(21,35,1)
(7,1,1)
(9,12,1)
(48,51,1)
(55,19,1)
(49,19,1)
(13,27,1)
(19,16,1)
(41,40,1)
(53,17,1)
(1,3,1)
(24,36,1)
(19,42,1)
(2,11,1)
(49,19,2)
(42,27,2)
(7,12,2)
(19,27,2)
(12,2,2)
(45,20,2)
(51,41,2)
(48,51,2)
(2,11,2)
(35,19,2)
(24,36,2)
(31,20,2)
(32,31,2)
(31,16,2)
(8,12,2)
(8,19,2)
(1,19,2)
(26,36,2)
(7,19,2)
(48,19,2)
(12,19,2)
(36,19,2)
(2,19,2)
(55,19,2)
(9,12,2)
(54,20,2)
(36,12,2)
(23,19,2)
(0,19,2)
(2,48,2)
(52,19,2)
(3,19,2)
(10,27,2)
(9,19,2)
(41,19,2)
(40,19,2)
(43,26,2)
(51,16,2)
(43,36,2)
(19,16,2)
(38,19,2)
(34,20,2)
(13,27,2)
(18,19,2)
(19,42,2)
(32,20,2)
(51,19,2)
-----------------------------------
(0,NULL)
(1,HELLO_STRING)
(2,(char *)
(3,myString)
(4,)
(5,)
(6,if(5==5)
(7,strcpy(myString, HELLO_STRING)
(8,free(myString)
(9,printLine(myString)
(10,HELLO_STRING)
(11,char *)
(12,myString = (char *)
(13,data)
(14,)
(15,if (data > strlen(HELLO_STRING)
(16,data = 0)
(17,data)
(18,myString)
(19,data > strlen(HELLO_STRING)
(20,5==5)
(21,RET)
(22,)
(23,myString)
(24,1)
(25,)
(26,-1)
(27,5==5)
(28,5)
(29,if (myString == NULL)
(30,)
(31,&data)
(32,fscanf(stdin, "%zu", &data)
(33,if(5==5)
(34,data)
(35,printLine("Input is less than the length of the source string")
(36,myString == NULL)
(37,5)
(38,data)
(39,data)
(40,char)
(41,sizeof(char)
(42,strlen(HELLO_STRING)
(43,exit(-1)
(44,myString)
(45,stdin)
(46,)
(47,5)
(48,malloc(data*sizeof(char)
(49,"Input is less than the length of the source string")
(50,5)
(51,data*sizeof(char)
(52,myString)
(53,0)
(54,"%zu")
(55,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^