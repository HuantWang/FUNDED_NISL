-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
68,69
68,70
69,70
72,73
73,74
74,75
74,76
75,76
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,76,77,82,84
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,4,0)
(24,19,0)
(36,1,0)
(38,14,0)
(35,23,0)
(18,37,0)
(32,9,0)
(37,16,0)
(33,17,0)
(36,35,0)
(39,22,0)
(13,6,0)
(25,16,0)
(15,19,0)
(35,36,0)
(7,22,0)
(20,39,0)
(26,23,0)
(31,35,0)
(4,35,0)
(31,23,0)
(21,10,0)
(13,37,0)
(1,36,0)
(8,13,0)
(22,39,0)
(39,36,0)
(30,35,0)
(12,4,0)
(29,31,0)
(36,39,0)
(3,16,0)
(28,32,0)
(38,10,0)
(11,37,0)
(27,16,0)
(10,38,0)
(13,35,0)
(2,17,0)
(36,1,1)
(15,17,1)
(13,8,1)
(13,35,1)
(12,35,1)
(28,19,1)
(29,38,1)
(31,29,1)
(35,36,1)
(20,30,1)
(34,13,1)
(30,17,1)
(33,2,1)
(10,21,1)
(5,12,1)
(18,11,1)
(29,4,1)
(13,37,1)
(32,28,1)
(24,15,1)
(31,35,1)
(36,39,1)
(7,20,1)
(37,18,1)
(4,35,1)
(21,4,1)
(38,10,1)
(17,33,1)
(39,22,1)
(19,24,1)
(8,19,1)
(4,5,1)
(22,7,1)
(34,32,1)
(2,37,1)
(15,31,1)
(21,4,2)
(36,1,2)
(31,17,2)
(36,39,2)
(13,35,2)
(7,17,2)
(38,4,2)
(28,19,2)
(22,17,2)
(39,22,2)
(13,37,2)
(4,35,2)
(4,17,2)
(13,19,2)
(8,19,2)
(20,17,2)
(35,36,2)
(39,17,2)
(36,17,2)
(12,17,2)
(10,4,2)
(38,10,2)
(31,35,2)
(32,19,2)
(35,17,2)
(5,17,2)
(29,17,2)
(30,17,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,wchar_t *)
(2,GLOBAL_CONST_FIVE)
(3,data)
(4,data == NULL)
(5,NULL)
(6,)
(7,wchar_t)
(8,data)
(9,)
(10,-1)
(11,data)
(12,data)
(13,free(data)
(14,)
(15,GLOBAL_CONST_FIVE)
(16,)
(17,GLOBAL_CONST_FIVE==5)
(18,NULL)
(19,GLOBAL_CONST_FIVE!=5)
(20,100)
(21,1)
(22,sizeof(wchar_t)
(23,)
(24,5)
(25,if(GLOBAL_CONST_FIVE==5)
(26,if (data == NULL)
(27,if(GLOBAL_CONST_FIVE!=5)
(28,"Benign, fixed string")
(29,data)
(30,data)
(31,printWLine(data)
(32,printLine("Benign, fixed string")
(33,5)
(34,RET)
(35,data = (wchar_t *)
(36,(wchar_t *)
(37,data = NULL)
(38,exit(-1)
(39,calloc(100, sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^