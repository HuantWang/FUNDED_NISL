-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
25,26
25,27
27,28
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
37,38
37,39
37,40
37,41
38,39
39,40
39,41
40,41
43,44
43,45
44,45
46,47
46,48
47,48
47,49
48,49
51,52
53,54
54,55
56,57
57,58
58,59
58,60
59,60
-----nextToken-----
2,4,8,10,14,16,18,23,24,26,32,34,36,41,42,45,49,50,52,55,60,61
-----computeFrom-----
12,13
12,14
21,22
21,23
39,40
39,41
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }
1
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(28,13,0)
(2,25,0)
(27,1,0)
(22,26,0)
(16,4,0)
(31,25,0)
(13,10,0)
(3,6,0)
(0,30,0)
(29,5,0)
(21,4,0)
(2,26,0)
(6,15,0)
(17,20,0)
(12,30,0)
(23,29,0)
(7,26,0)
(1,14,0)
(4,13,0)
(20,26,0)
(32,30,0)
(25,29,0)
(25,2,0)
(25,31,0)
(24,2,0)
(18,14,0)
(34,25,0)
(1,30,0)
(14,1,0)
(25,1,0)
(9,29,0)
(11,13,0)
(17,6,1)
(23,9,1)
(9,33,1)
(26,22,1)
(18,27,1)
(2,25,1)
(20,17,1)
(16,8,1)
(22,7,1)
(21,16,1)
(8,33,1)
(7,4,1)
(1,14,1)
(24,20,1)
(14,18,1)
(33,1,1)
(6,3,1)
(4,21,1)
(25,31,1)
(2,26,1)
(24,26,1)
(19,8,1)
(25,1,1)
(29,23,1)
(25,34,1)
(19,2,1)
(34,24,1)
(3,2,1)
(8,29,1)
(25,29,1)
(20,26,1)
(24,2,2)
(2,2,2)
(6,2,2)
(20,2,2)
(26,8,2)
(24,8,2)
(25,31,2)
(2,8,2)
(2,25,2)
(25,2,2)
(29,33,2)
(7,8,2)
(20,26,2)
(4,8,2)
(1,14,2)
(25,8,2)
(34,2,2)
(3,2,2)
(9,33,2)
(22,8,2)
(25,1,2)
(2,26,2)
(17,2,2)
(34,8,2)
(21,8,2)
(16,8,2)
(25,29,2)
(23,33,2)
-----------------------------------
(0,if(1)
(1,count = -1)
(2,i < (size_t)
(3,"Hello")
(4,i = 0)
(5,)
(6,printLine("Hello")
(7,i)
(8,1)
(9,count)
(10,)
(11,for (i = 0; i < (size_t)
(12,count)
(13,)
(14,-1)
(15,)
(16,i)
(17,i)
(18,1)
(19,RET)
(20,i++)
(21,0)
(22,0)
(23,20)
(24,i)
(25,(size_t)
(26,i = 0)
(27,count)
(28,i)
(29,count = 20)
(30,)
(31,size_t)
(32,if(1)
(33,1)
(34,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^