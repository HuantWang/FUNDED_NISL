-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalFive==5)
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
39,42
40,41
40,42
41,42
41,43
42,43
45,46
45,47
46,47
49,50
49,51
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
61,62
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,43,44,47,48,53,55,59,60,65,66
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
40,41
40,42
41,42
41,43
45,46
45,47
-----guardedBy-----
47,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalFive==5)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(globalFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalFive==5)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalFive==5)    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(17,5,0)
(37,31,0)
(32,27,0)
(14,31,0)
(2,1,0)
(35,20,0)
(22,37,0)
(33,11,0)
(0,11,0)
(37,2,0)
(13,31,0)
(29,15,0)
(28,16,0)
(13,27,0)
(18,4,0)
(30,2,0)
(19,16,0)
(3,16,0)
(16,31,0)
(16,3,0)
(10,31,0)
(36,6,0)
(34,20,0)
(31,15,0)
(2,37,0)
(21,15,0)
(11,31,0)
(23,13,0)
(25,15,0)
(12,10,0)
(24,2,0)
(3,11,0)
(26,32,0)
(7,6,0)
(5,8,0)
(11,3,0)
(31,10,0)
(37,22,1)
(3,16,1)
(30,20,1)
(19,28,1)
(20,34,1)
(9,5,1)
(5,17,1)
(3,11,1)
(16,19,1)
(13,23,1)
(36,20,1)
(23,3,1)
(36,2,1)
(35,31,1)
(34,35,1)
(37,31,1)
(9,6,1)
(7,36,1)
(2,37,1)
(22,24,1)
(17,3,1)
(0,33,1)
(16,31,1)
(13,31,1)
(11,31,1)
(6,7,1)
(24,30,1)
(10,12,1)
(28,11,1)
(33,6,1)
(9,32,1)
(26,13,1)
(32,26,1)
(12,14,1)
(11,0,1)
(31,10,1)
(30,20,2)
(3,16,2)
(19,11,2)
(31,10,2)
(33,6,2)
(28,11,2)
(26,3,2)
(17,3,2)
(23,3,2)
(13,3,2)
(3,6,2)
(16,11,2)
(5,3,2)
(2,37,2)
(13,31,2)
(37,31,2)
(2,20,2)
(16,31,2)
(11,31,2)
(37,20,2)
(32,3,2)
(0,6,2)
(11,6,2)
(22,20,2)
(24,20,2)
(3,11,2)
-----------------------------------
(0,0)
(1,)
(2,fscanf(stdin, "%d", &count)
(3,count > 0 && count <= 2000)
(4,)
(5,printLine("Sleep time too long")
(6,globalFive==5)
(7,5)
(8,)
(9,RET)
(10,-1)
(11,count > 0)
(12,1)
(13,SLEEP(count)
(14,count)
(15,)
(16,count <= 2000)
(17,"Sleep time too long")
(18,if (count > 0 && count <= 2000)
(19,2000)
(20,globalFive==5)
(21,count)
(22,count)
(23,count)
(24,"%d")
(25,if(globalFive==5)
(26,"Sleep time OK")
(27,)
(28,count)
(29,if(globalFive==5)
(30,stdin)
(31,count = -1)
(32,printLine("Sleep time OK")
(33,count)
(34,5)
(35,globalFive)
(36,globalFive)
(37,&count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^