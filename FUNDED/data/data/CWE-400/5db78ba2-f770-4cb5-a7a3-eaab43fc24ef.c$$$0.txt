-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
68,69
68,70
70,71
70,72
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,67,69,71,72
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_16_bad(){    char * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__char_realloc_16_bad()
CWE401_Memory_Leak__char_realloc_16_bad
{    char * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(9,14,0)
(3,31,0)
(19,3,0)
(19,36,0)
(34,7,0)
(27,1,0)
(30,1,0)
(22,29,0)
(28,36,0)
(21,31,0)
(0,26,0)
(26,5,0)
(12,5,0)
(7,12,0)
(3,19,0)
(18,5,0)
(24,15,0)
(25,7,0)
(2,5,0)
(15,3,0)
(4,11,0)
(3,15,0)
(15,24,0)
(32,4,0)
(7,5,0)
(16,19,0)
(23,32,0)
(15,12,0)
(17,31,0)
(26,12,0)
(36,19,0)
(12,15,0)
(4,32,0)
(8,14,0)
(14,12,0)
(31,1,0)
(6,1,0)
(10,12,0)
(35,3,0)
(19,36,1)
(25,4,1)
(26,12,1)
(10,33,1)
(21,17,1)
(16,35,1)
(28,16,1)
(20,22,1)
(14,8,1)
(3,19,1)
(33,31,1)
(20,13,1)
(3,31,1)
(8,9,1)
(26,0,1)
(0,7,1)
(13,18,1)
(18,26,1)
(36,28,1)
(13,33,1)
(31,21,1)
(25,14,1)
(4,32,1)
(32,23,1)
(22,13,1)
(34,25,1)
(9,12,1)
(15,24,1)
(7,12,1)
(14,12,1)
(23,14,1)
(7,34,1)
(15,3,1)
(12,15,1)
(35,10,1)
(32,14,2)
(4,32,2)
(12,15,2)
(19,33,2)
(22,13,2)
(7,12,2)
(3,33,2)
(10,33,2)
(12,33,2)
(19,36,2)
(18,33,2)
(35,33,2)
(14,33,2)
(0,33,2)
(26,33,2)
(15,33,2)
(25,33,2)
(8,33,2)
(7,33,2)
(15,24,2)
(3,19,2)
(15,3,2)
(3,31,2)
(36,33,2)
(34,33,2)
(23,14,2)
(28,33,2)
(14,12,2)
(4,14,2)
(26,12,2)
(9,33,2)
(16,33,2)
-----------------------------------
(0,data)
(1,)
(2,if (data == NULL)
(3,realloc(data, 100*sizeof(char)
(4,exit(-1)
(5,)
(6,while(1)
(7,strcpy(data, "A String")
(8,NULL)
(9,data)
(10,data)
(11,)
(12,data = (char *)
(13,1)
(14,data == NULL)
(15,(char *)
(16,100)
(17,data)
(18,break;)
(19,100*sizeof(char)
(20,RET)
(21,NULL)
(22,break;)
(23,1)
(24,char *)
(25,data)
(26,printLine(data)
(27,while(1)
(28,char)
(29,)
(30,data)
(31,data = NULL)
(32,-1)
(33,1)
(34,"A String")
(35,data)
(36,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^