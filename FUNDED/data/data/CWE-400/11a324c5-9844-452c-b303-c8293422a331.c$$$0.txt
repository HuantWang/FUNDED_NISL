-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_14_bad()
{
    if(globalFive==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_14_bad(){    if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_14_bad()
CWE401_Memory_Leak__malloc_realloc_char_14_bad
{    if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(globalFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
globalFive==5
globalFive
globalFive
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(20,52,0)
(26,28,0)
(4,49,0)
(32,24,0)
(15,25,0)
(42,17,0)
(0,9,0)
(36,37,0)
(8,40,0)
(45,28,0)
(7,28,0)
(17,52,0)
(17,3,0)
(3,26,0)
(24,4,0)
(33,16,0)
(30,33,0)
(1,5,0)
(35,0,0)
(50,43,0)
(14,29,0)
(9,0,0)
(52,5,0)
(10,41,0)
(45,0,0)
(52,17,0)
(31,45,0)
(2,28,0)
(13,25,0)
(34,33,0)
(18,21,0)
(44,26,0)
(44,16,0)
(5,52,0)
(13,9,0)
(25,13,0)
(0,28,0)
(9,13,0)
(22,44,0)
(21,25,0)
(48,9,0)
(3,17,0)
(9,48,0)
(17,0,0)
(41,26,0)
(46,28,0)
(26,3,0)
(29,26,0)
(40,28,0)
(25,21,0)
(27,26,0)
(28,6,0)
(3,47,0)
(40,0,0)
(23,40,0)
(11,43,0)
(47,3,0)
(19,0,0)
(38,41,0)
(33,26,0)
(12,19,0)
(39,19,0)
(29,16,0)
(4,24,0)
(8,19,1)
(31,40,1)
(29,14,1)
(15,35,1)
(42,27,1)
(17,52,1)
(44,22,1)
(30,41,1)
(3,47,1)
(3,17,1)
(45,31,1)
(40,0,1)
(35,43,1)
(9,13,1)
(24,32,1)
(9,48,1)
(1,20,1)
(8,4,1)
(34,30,1)
(40,23,1)
(51,41,1)
(25,21,1)
(22,29,1)
(19,12,1)
(45,0,1)
(27,45,1)
(10,26,1)
(43,11,1)
(14,33,1)
(51,43,1)
(32,19,1)
(44,26,1)
(33,26,1)
(29,26,1)
(4,24,1)
(26,3,1)
(23,8,1)
(33,34,1)
(18,15,1)
(41,38,1)
(52,5,1)
(41,26,1)
(21,18,1)
(5,1,1)
(19,0,1)
(38,10,1)
(13,25,1)
(20,42,1)
(11,50,1)
(0,9,1)
(51,44,1)
(39,0,1)
(17,0,1)
(12,39,1)
(25,43,2)
(39,43,2)
(29,41,2)
(30,41,2)
(14,41,2)
(26,43,2)
(17,43,2)
(3,47,2)
(35,43,2)
(12,43,2)
(9,43,2)
(29,26,2)
(31,43,2)
(34,41,2)
(40,43,2)
(42,43,2)
(44,26,2)
(1,43,2)
(13,43,2)
(5,43,2)
(10,43,2)
(21,43,2)
(17,0,2)
(22,41,2)
(19,43,2)
(40,0,2)
(19,0,2)
(20,43,2)
(4,19,2)
(0,9,2)
(15,43,2)
(45,43,2)
(38,43,2)
(18,43,2)
(41,26,2)
(8,43,2)
(9,13,2)
(24,19,2)
(52,5,2)
(0,43,2)
(26,3,2)
(13,25,2)
(4,24,2)
(3,43,2)
(27,43,2)
(45,0,2)
(17,52,2)
(25,21,2)
(3,17,2)
(9,48,2)
(32,19,2)
(33,41,2)
(44,41,2)
(41,43,2)
(33,26,2)
(52,43,2)
(23,43,2)
-----------------------------------
(0,* data = (char *)
(1,char)
(2,data)
(3,(char *)
(4,exit(-1)
(5,sizeof(char)
(6,)
(7,if (data != NULL)
(8,data)
(9,(char *)
(10,data)
(11,5)
(12,NULL)
(13,malloc(100*sizeof(char)
(14,data)
(15,100)
(16,)
(17,realloc(data, (130000)
(18,char)
(19,data == NULL)
(20,130000)
(21,sizeof(char)
(22,data)
(23,"A String")
(24,-1)
(25,100*sizeof(char)
(26,data = (char *)
(27,data)
(28,)
(29,printLine(data)
(30,data)
(31,data)
(32,1)
(33,strcpy(data, "New String")
(34,"New String")
(35,data)
(36,if(globalFive==5)
(37,)
(38,NULL)
(39,data)
(40,strcpy(data, "A String")
(41,data != NULL)
(42,data)
(43,globalFive==5)
(44,free(data)
(45,printLine(data)
(46,if (data == NULL)
(47,char *)
(48,char *)
(49,)
(50,globalFive)
(51,RET)
(52,(130000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^