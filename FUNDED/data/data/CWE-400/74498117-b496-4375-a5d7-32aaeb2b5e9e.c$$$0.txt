-----label-----
0
-----code-----
static void sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 
	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude)
{
	struct sla_station *station;
	struct sla_trunk_ref *trunk_ref;

	AST_LIST_TRAVERSE(&sla_stations, station, entry) {
		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {
			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
				|| trunk_ref == exclude)
				continue;
			trunk_ref->state = state;
			ast_devstate_changed(sla_state_to_devstate(state), 
				"SLA:%s_%s", station->name, trunk->name);
			break;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
43,46
43,47
44,45
46,47
47,48
49,50
51,52
53,54
54,55
54,56
54,57
55,56
56,57
56,58
56,59
56,60
57,58
59,60
60,61
60,62
61,62
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
70,72
71,72
71,73
72,73
72,74
73,74
73,75
74,75
74,76
75,76
78,79
80,81
81,82
81,83
81,84
82,83
84,85
84,86
85,86
89,90
89,91
90,91
92,93
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
104,107
104,108
104,109
105,106
107,108
107,109
108,109
110,111
113,114
113,115
114,115
117,118
117,119
118,119
-----nextToken-----
2,4,7,9,10,13,15,18,20,23,25,26,31,33,34,38,40,41,45,48,50,52,58,62,63,65,67,76,77,79,83,86,87,88,91,93,94,99,100,102,106,109,111,112,115,116,119,120,121
-----computeFrom-----
71,72
71,73
72,73
72,74
73,74
73,75
89,90
89,91
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;
-----ast_node-----
static void sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude){	struct sla_station *station;	struct sla_trunk_ref *trunk_ref;	AST_LIST_TRAVERSE(&sla_stations, station, entry) {		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), 				"SLA:%s_%s", station->name, trunk->name);			break;		}	}}
static void
sla_change_trunk_state(const struct sla_trunk *trunk, enum sla_trunk_state state, 	enum sla_which_trunk_refs inactive_only, const struct sla_trunk_ref *exclude)
sla_change_trunk_state
const struct sla_trunk *trunk
const struct sla_trunk
sla_trunk
*trunk
*
trunk
enum sla_trunk_state state
enum sla_trunk_state
sla_trunk_state
state
state
enum sla_which_trunk_refs inactive_only
enum sla_which_trunk_refs
sla_which_trunk_refs
inactive_only
inactive_only
const struct sla_trunk_ref *exclude
const struct sla_trunk_ref
sla_trunk_ref
*exclude
*
exclude
{	struct sla_station *station;	struct sla_trunk_ref *trunk_ref;	AST_LIST_TRAVERSE(&sla_stations, station, entry) {		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), 				"SLA:%s_%s", station->name, trunk->name);			break;		}	}}
struct sla_station *station;
struct sla_station *station;
struct sla_station
sla_station
*station
*
station
struct sla_trunk_ref *trunk_ref;
struct sla_trunk_ref *trunk_ref;
struct sla_trunk_ref
sla_trunk_ref
*trunk_ref
*
trunk_ref
AST_LIST_TRAVERSE(&sla_stations, station, entry)
AST_LIST_TRAVERSE(&sla_stations, station, entry)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&sla_stations
sla_stations
sla_stations
station
station
entry
entry
)
{		AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry) {			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), 				"SLA:%s_%s", station->name, trunk->name);			break;		}	}
AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry)
AST_LIST_TRAVERSE(&station->trunks, trunk_ref, entry)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&station->trunks
station->trunks
station
station
trunks
trunk_ref
trunk_ref
entry
entry
)
{			if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;			trunk_ref->state = state;			ast_devstate_changed(sla_state_to_devstate(state), 				"SLA:%s_%s", station->name, trunk->name);			break;		}
if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude)				continue;
trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)				|| trunk_ref == exclude
trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
trunk_ref->trunk != trunk
trunk_ref->trunk
trunk_ref
trunk_ref
trunk
trunk
trunk
(inactive_only ? trunk_ref->chan : 0)
inactive_only ? trunk_ref->chan : 0
inactive_only
inactive_only
trunk_ref->chan
trunk_ref
trunk_ref
chan
0
trunk_ref == exclude
trunk_ref
trunk_ref
exclude
exclude
continue;
trunk_ref->state = state;
trunk_ref->state = state
trunk_ref->state
trunk_ref
trunk_ref
state
state
state
ast_devstate_changed(sla_state_to_devstate(state), 				"SLA:%s_%s", station->name, trunk->name);
ast_devstate_changed(sla_state_to_devstate(state), 				"SLA:%s_%s", station->name, trunk->name)
ast_devstate_changed
ast_devstate_changed
sla_state_to_devstate(state)
sla_state_to_devstate
sla_state_to_devstate
state
state
"SLA:%s_%s"
station->name
station
station
name
trunk->name
trunk
trunk
name
break;
-----joern-----
(19,2,0)
(9,32,0)
(13,31,0)
(18,28,0)
(10,3,0)
(2,21,0)
(27,20,0)
(37,27,0)
(4,3,0)
(29,14,0)
(39,28,0)
(20,28,0)
(5,36,0)
(3,20,0)
(32,2,0)
(42,2,0)
(22,14,0)
(27,11,0)
(1,13,0)
(34,2,0)
(36,5,0)
(2,32,0)
(5,38,0)
(25,17,0)
(17,40,0)
(24,38,0)
(17,42,0)
(41,35,0)
(20,13,0)
(7,20,0)
(26,35,0)
(2,42,0)
(16,17,0)
(13,20,0)
(36,42,0)
(28,41,0)
(5,11,0)
(15,38,0)
(12,22,0)
(14,31,0)
(14,28,0)
(20,3,0)
(42,17,0)
(8,5,0)
(23,35,0)
(42,36,0)
(43,22,0)
(30,27,0)
(38,5,0)
(33,32,0)
(20,27,0)
(17,40,1)
(43,6,1)
(5,8,1)
(2,19,1)
(20,3,1)
(13,31,1)
(32,33,1)
(7,13,1)
(10,4,1)
(38,24,1)
(17,16,1)
(1,14,1)
(42,2,1)
(14,29,1)
(3,10,1)
(22,12,1)
(36,5,1)
(9,34,1)
(14,31,1)
(34,5,1)
(42,17,1)
(18,20,1)
(2,32,1)
(36,42,1)
(25,2,1)
(12,43,1)
(20,27,1)
(24,15,1)
(5,11,1)
(19,34,1)
(43,36,1)
(16,25,1)
(37,3,1)
(27,11,1)
(2,21,1)
(4,7,1)
(27,30,1)
(6,36,1)
(29,22,1)
(30,37,1)
(8,38,1)
(5,38,1)
(13,1,1)
(20,13,1)
(0,18,1)
(33,9,1)
(36,42,2)
(5,38,2)
(27,11,2)
(16,2,2)
(13,31,2)
(34,5,2)
(25,2,2)
(6,36,2)
(42,2,2)
(20,3,2)
(2,5,2)
(19,34,2)
(42,17,2)
(5,11,2)
(2,21,2)
(14,31,2)
(32,34,2)
(42,5,2)
(20,13,2)
(36,5,2)
(33,34,2)
(2,32,2)
(9,34,2)
(17,2,2)
(20,27,2)
(17,40,2)
-----------------------------------
(0,RET)
(1,state)
(2,inactive_only ? trunk_ref->chan : 0)
(3,station->name)
(4,station)
(5,trunk_ref->trunk != trunk)
(6,continue;)
(7,"SLA:%s_%s")
(8,trunk)
(9,trunk_ref)
(10,name)
(11,const struct sla_trunk *trunk)
(12,state)
(13,sla_state_to_devstate(state)
(14,trunk_ref->state = state)
(15,trunk_ref)
(16,exclude)
(17,trunk_ref == exclude)
(18,break;)
(19,0)
(20,ast_devstate_changed(sla_state_to_devstate(state)
(21,enum sla_which_trunk_refs inactive_only)
(22,trunk_ref->state)
(23,trunk_ref)
(24,trunk)
(25,trunk_ref)
(26,station)
(27,trunk->name)
(28,)
(29,state)
(30,name)
(31,enum sla_trunk_state state)
(32,trunk_ref->chan)
(33,chan)
(34,inactive_only)
(35,)
(36,trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
(37,trunk)
(38,trunk_ref->trunk)
(39,if (trunk_ref->trunk != trunk || (inactive_only ? trunk_ref->chan : 0)
(40,const struct sla_trunk_ref *exclude)
(41,)
(42,(inactive_only ? trunk_ref->chan : 0)
(43,trunk_ref)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^