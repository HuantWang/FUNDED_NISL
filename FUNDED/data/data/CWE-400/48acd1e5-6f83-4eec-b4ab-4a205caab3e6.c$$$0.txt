-----label-----
1
-----code-----
struct socket *
sonewconn(struct socket *head, int connstatus)
{
	struct socket *so;
	struct socket *sp;
	struct pru_attach_info ai;

	if (head->so_qlen > 3 * head->so_qlimit / 2)
		return (NULL);
	so = soalloc(1);
	if (so == NULL)
		return (NULL);
	if ((head->so_options & SO_ACCEPTFILTER) != 0)
		connstatus = 0;
	so->so_head = head;
	so->so_type = head->so_type;
	so->so_options = head->so_options &~ SO_ACCEPTCONN;
	so->so_linger = head->so_linger;
	so->so_state = head->so_state | SS_NOFDREF;
	so->so_proto = head->so_proto;
	so->so_timeo = head->so_timeo;
	so->so_cred = crhold(head->so_cred);
	ai.sb_rlimit = NULL;
	ai.p_ucred = NULL;
	ai.fd_rdir = NULL;		/* jail code cruft XXX JH */
	if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||
	    /* Directly call function since we're already at protocol level. */
	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {
		sodealloc(so);
		return (NULL);
	}

	if (connstatus) {
		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);
		so->so_state |= SS_COMP;
		head->so_qlen++;
	} else {
		if (head->so_incqlen > head->so_qlimit) {
			sp = TAILQ_FIRST(&head->so_incomp);
			TAILQ_REMOVE(&head->so_incomp, sp, so_list);
			head->so_incqlen--;
			sp->so_state &= ~SS_INCOMP;
			sp->so_head = NULL;
			soaborta(sp);
		}
		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);
		so->so_state |= SS_INCOMP;
		head->so_incqlen++;
	}
	if (connstatus) {
		sorwakeup(head);
		wakeup((caddr_t)&head->so_timeo);
		so->so_state |= connstatus;
	}
	return (so);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
34,35
36,37
38,39
38,40
39,40
39,41
40,41
40,42
41,42
44,45
44,46
45,46
45,47
47,48
47,49
48,49
52,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
74,75
74,76
75,76
75,77
76,77
77,78
77,79
78,79
78,80
79,80
82,83
85,86
86,87
86,88
87,88
90,91
91,92
91,93
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
100,102
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
115,117
116,117
119,120
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
128,130
129,130
132,133
133,134
133,135
134,135
134,136
135,136
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
151,152
151,153
152,153
155,156
156,157
156,158
157,158
157,159
158,159
161,162
161,163
162,163
165,166
166,167
166,168
167,168
167,169
168,169
171,172
171,173
172,173
174,175
174,176
175,176
178,179
179,180
179,181
180,181
180,182
181,182
184,185
186,187
187,188
187,189
188,189
188,190
189,190
192,193
194,195
195,196
195,197
196,197
196,198
197,198
200,201
202,203
202,204
203,204
203,205
204,205
204,206
204,207
204,208
204,209
205,206
207,208
209,210
209,211
210,211
210,212
211,212
215,216
215,217
216,217
216,218
217,218
221,222
223,224
223,225
223,226
223,227
224,225
225,226
226,227
226,228
227,228
227,229
228,229
228,230
229,230
234,235
237,238
238,239
240,241
240,242
241,242
242,243
242,244
243,244
245,246
247,248
248,249
249,250
251,252
251,253
251,254
252,253
254,255
254,256
254,257
255,256
256,257
256,258
256,259
256,260
257,258
259,260
260,261
260,262
261,262
264,265
266,267
268,269
269,270
269,271
270,271
270,272
271,272
274,275
276,277
277,278
278,279
278,280
279,280
282,283
282,284
282,285
282,286
283,284
283,285
284,285
284,286
285,286
285,287
286,287
289,290
289,291
290,291
293,294
293,295
293,296
293,297
293,298
293,299
294,295
295,296
295,297
296,297
298,299
298,300
299,300
301,302
302,303
302,304
303,304
306,307
307,308
307,309
307,310
307,311
308,309
310,311
311,312
311,313
312,313
315,316
317,318
319,320
320,321
321,322
321,323
322,323
325,326
326,327
326,328
327,328
327,329
328,329
331,332
332,333
334,335
335,336
335,337
336,337
336,338
337,338
340,341
342,343
343,344
343,345
344,345
346,347
348,349
349,350
349,351
349,352
349,353
350,351
352,353
353,354
353,355
354,355
357,358
359,360
361,362
362,363
362,364
363,364
363,365
364,365
367,368
369,370
370,371
371,372
371,373
372,373
375,376
375,377
376,377
378,379
378,380
378,381
379,380
380,381
380,382
381,382
383,384
385,386
386,387
386,388
387,388
389,390
389,391
390,391
391,392
393,394
393,395
394,395
397,398
398,399
398,400
399,400
399,401
400,401
403,404
405,406
406,407
407,408
-----nextToken-----
3,5,6,9,11,12,14,16,21,23,24,28,30,31,35,37,42,43,46,49,50,51,55,59,62,63,67,69,73,80,81,83,84,88,89,94,95,97,102,103,106,107,112,113,117,118,121,126,127,130,131,136,137,141,142,144,149,150,153,154,159,160,163,164,169,170,173,176,177,182,183,185,190,191,193,198,199,201,206,208,212,213,214,218,219,220,222,230,231,232,233,235,236,239,244,246,250,253,258,262,263,265,267,272,273,275,280,281,287,288,291,292,297,300,304,305,309,313,314,316,318,323,324,329,330,333,338,339,341,345,347,351,355,356,358,360,365,366,368,373,374,377,382,384,388,392,395,396,401,402,404,408
-----computeFrom-----
39,40
39,41
44,45
44,46
45,46
45,47
57,58
57,59
65,66
65,67
75,76
75,77
77,78
77,79
86,87
86,88
91,92
91,93
99,100
99,101
109,110
109,111
114,115
114,116
123,124
123,125
133,134
133,135
138,139
138,140
146,147
146,148
156,157
156,158
166,167
166,168
179,180
179,181
187,188
187,189
195,196
195,197
203,204
203,205
269,270
269,271
284,285
284,286
295,296
295,297
326,327
326,328
335,336
335,337
362,363
362,364
389,390
389,391
398,399
398,400
-----guardedBy-----
69,73
222,250
235,246
291,323
288,324
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
struct socket *sonewconn(struct socket *head, int connstatus){	struct socket *so;	struct socket *sp;	struct pru_attach_info ai;	if (head->so_qlen > 3 * head->so_qlimit / 2)		return (NULL);	so = soalloc(1);	if (so == NULL)		return (NULL);	if ((head->so_options & SO_ACCEPTFILTER) != 0)		connstatus = 0;	so->so_head = head;	so->so_type = head->so_type;	so->so_options = head->so_options &~ SO_ACCEPTCONN;	so->so_linger = head->so_linger;	so->so_state = head->so_state | SS_NOFDREF;	so->so_proto = head->so_proto;	so->so_timeo = head->so_timeo;	so->so_cred = crhold(head->so_cred);	ai.sb_rlimit = NULL;	ai.p_ucred = NULL;	ai.fd_rdir = NULL;		/* jail code cruft XXX JH */	if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {		sodealloc(so);		return (NULL);	}	if (connstatus) {		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	} else {		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}	if (connstatus) {		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}	return (so);}
struct socket
socket
*sonewconn(struct socket *head, int connstatus)
*
sonewconn
struct socket *head
struct socket
socket
*head
*
head
int connstatus
int
connstatus
connstatus
{	struct socket *so;	struct socket *sp;	struct pru_attach_info ai;	if (head->so_qlen > 3 * head->so_qlimit / 2)		return (NULL);	so = soalloc(1);	if (so == NULL)		return (NULL);	if ((head->so_options & SO_ACCEPTFILTER) != 0)		connstatus = 0;	so->so_head = head;	so->so_type = head->so_type;	so->so_options = head->so_options &~ SO_ACCEPTCONN;	so->so_linger = head->so_linger;	so->so_state = head->so_state | SS_NOFDREF;	so->so_proto = head->so_proto;	so->so_timeo = head->so_timeo;	so->so_cred = crhold(head->so_cred);	ai.sb_rlimit = NULL;	ai.p_ucred = NULL;	ai.fd_rdir = NULL;		/* jail code cruft XXX JH */	if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {		sodealloc(so);		return (NULL);	}	if (connstatus) {		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	} else {		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}	if (connstatus) {		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}	return (so);}
struct socket *so;
struct socket *so;
struct socket
socket
*so
*
so
struct socket *sp;
struct socket *sp;
struct socket
socket
*sp
*
sp
struct pru_attach_info ai;
struct pru_attach_info ai;
struct pru_attach_info
pru_attach_info
ai
ai
if (head->so_qlen > 3 * head->so_qlimit / 2)		return (NULL);
head->so_qlen > 3 * head->so_qlimit / 2
head->so_qlen
head
head
so_qlen
3 * head->so_qlimit / 2
3 * head->so_qlimit
3
head->so_qlimit
head
head
so_qlimit
2
return (NULL);
(NULL)
NULL
NULL
so = soalloc(1);
so = soalloc(1)
so
so
soalloc(1)
soalloc
soalloc
1
if (so == NULL)		return (NULL);
so == NULL
so
so
NULL
NULL
return (NULL);
(NULL)
NULL
NULL
if ((head->so_options & SO_ACCEPTFILTER) != 0)		connstatus = 0;
(head->so_options & SO_ACCEPTFILTER) != 0
(head->so_options & SO_ACCEPTFILTER)
head->so_options & SO_ACCEPTFILTER
head->so_options
head
head
so_options
SO_ACCEPTFILTER
SO_ACCEPTFILTER
0
connstatus = 0;
connstatus = 0
connstatus
connstatus
0
so->so_head = head;
so->so_head = head
so->so_head
so
so
so_head
head
head
so->so_type = head->so_type;
so->so_type = head->so_type
so->so_type
so
so
so_type
head->so_type
head
head
so_type
so->so_options = head->so_options &~ SO_ACCEPTCONN;
so->so_options = head->so_options &~ SO_ACCEPTCONN
so->so_options
so
so
so_options
head->so_options &~ SO_ACCEPTCONN
head->so_options
head
head
so_options
~ SO_ACCEPTCONN
SO_ACCEPTCONN
SO_ACCEPTCONN
so->so_linger = head->so_linger;
so->so_linger = head->so_linger
so->so_linger
so
so
so_linger
head->so_linger
head
head
so_linger
so->so_state = head->so_state | SS_NOFDREF;
so->so_state = head->so_state | SS_NOFDREF
so->so_state
so
so
so_state
head->so_state | SS_NOFDREF
head->so_state
head
head
so_state
SS_NOFDREF
SS_NOFDREF
so->so_proto = head->so_proto;
so->so_proto = head->so_proto
so->so_proto
so
so
so_proto
head->so_proto
head
head
so_proto
so->so_timeo = head->so_timeo;
so->so_timeo = head->so_timeo
so->so_timeo
so
so
so_timeo
head->so_timeo
head
head
so_timeo
so->so_cred = crhold(head->so_cred);
so->so_cred = crhold(head->so_cred)
so->so_cred
so
so
so_cred
crhold(head->so_cred)
crhold
crhold
head->so_cred
head
head
so_cred
ai.sb_rlimit = NULL;
ai.sb_rlimit = NULL
ai.sb_rlimit
ai
ai
sb_rlimit
NULL
NULL
ai.p_ucred = NULL;
ai.p_ucred = NULL
ai.p_ucred
ai
ai
p_ucred
NULL
NULL
ai.fd_rdir = NULL;
ai.fd_rdir = NULL
ai.fd_rdir
ai
ai
fd_rdir
NULL
NULL
if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)) {		sodealloc(so);		return (NULL);	}
soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL) ||	    /* Directly call function since we're already at protocol level. */	    (*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)
soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
soreserve
soreserve
so
so
head->so_snd.ssb_hiwat
head->so_snd
head
head
so_snd
ssb_hiwat
head->so_rcv.ssb_hiwat
head->so_rcv
head
head
so_rcv
ssb_hiwat
NULL
NULL
(*so->so_proto->pr_usrreqs->pru_attach)(so, 0, &ai)
(*so->so_proto->pr_usrreqs->pru_attach)
*so->so_proto->pr_usrreqs->pru_attach
so->so_proto->pr_usrreqs->pru_attach
so->so_proto->pr_usrreqs
so->so_proto
so
so
so_proto
pr_usrreqs
pru_attach
so
so
0
&ai
ai
ai
{		sodealloc(so);		return (NULL);	}
sodealloc(so);
sodealloc(so)
sodealloc
sodealloc
so
so
return (NULL);
(NULL)
NULL
NULL
if (connstatus) {		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	} else {		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}
connstatus
connstatus
{		TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);		so->so_state |= SS_COMP;		head->so_qlen++;	}
TAILQ_INSERT_TAIL(&head->so_comp, so, so_list);
TAILQ_INSERT_TAIL(&head->so_comp, so, so_list)
TAILQ_INSERT_TAIL
TAILQ_INSERT_TAIL
&head->so_comp
head->so_comp
head
head
so_comp
so
so
so_list
so_list
so->so_state |= SS_COMP;
so->so_state |= SS_COMP
so->so_state
so
so
so_state
SS_COMP
SS_COMP
head->so_qlen++;
head->so_qlen++
head->so_qlen
head
head
so_qlen
{		if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}		TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);		so->so_state |= SS_INCOMP;		head->so_incqlen++;	}
if (head->so_incqlen > head->so_qlimit) {			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}
head->so_incqlen > head->so_qlimit
head->so_incqlen
head
head
so_incqlen
head->so_qlimit
head
head
so_qlimit
{			sp = TAILQ_FIRST(&head->so_incomp);			TAILQ_REMOVE(&head->so_incomp, sp, so_list);			head->so_incqlen--;			sp->so_state &= ~SS_INCOMP;			sp->so_head = NULL;			soaborta(sp);		}
sp = TAILQ_FIRST(&head->so_incomp);
sp = TAILQ_FIRST(&head->so_incomp)
sp
sp
TAILQ_FIRST(&head->so_incomp)
TAILQ_FIRST
TAILQ_FIRST
&head->so_incomp
head->so_incomp
head
head
so_incomp
TAILQ_REMOVE(&head->so_incomp, sp, so_list);
TAILQ_REMOVE(&head->so_incomp, sp, so_list)
TAILQ_REMOVE
TAILQ_REMOVE
&head->so_incomp
head->so_incomp
head
head
so_incomp
sp
sp
so_list
so_list
head->so_incqlen--;
head->so_incqlen--
head->so_incqlen
head
head
so_incqlen
sp->so_state &= ~SS_INCOMP;
sp->so_state &= ~SS_INCOMP
sp->so_state
sp
sp
so_state
~SS_INCOMP
SS_INCOMP
SS_INCOMP
sp->so_head = NULL;
sp->so_head = NULL
sp->so_head
sp
sp
so_head
NULL
NULL
soaborta(sp);
soaborta(sp)
soaborta
soaborta
sp
sp
TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list);
TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list)
TAILQ_INSERT_TAIL
TAILQ_INSERT_TAIL
&head->so_incomp
head->so_incomp
head
head
so_incomp
so
so
so_list
so_list
so->so_state |= SS_INCOMP;
so->so_state |= SS_INCOMP
so->so_state
so
so
so_state
SS_INCOMP
SS_INCOMP
head->so_incqlen++;
head->so_incqlen++
head->so_incqlen
head
head
so_incqlen
if (connstatus) {		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}
connstatus
connstatus
{		sorwakeup(head);		wakeup((caddr_t)&head->so_timeo);		so->so_state |= connstatus;	}
sorwakeup(head);
sorwakeup(head)
sorwakeup
sorwakeup
head
head
wakeup((caddr_t)&head->so_timeo);
wakeup((caddr_t)&head->so_timeo)
wakeup
wakeup
(caddr_t)&head->so_timeo
(caddr_t)
caddr_t
caddr_t
head->so_timeo
head
head
so_timeo
so->so_state |= connstatus;
so->so_state |= connstatus
so->so_state
so
so
so_state
connstatus
connstatus
return (so);
(so)
so
so
-----joern-----
(25,89,0)
(115,144,0)
(215,151,0)
(201,58,0)
(195,3,0)
(208,162,0)
(99,131,0)
(1,9,0)
(201,137,0)
(76,115,0)
(201,139,0)
(208,144,0)
(208,175,0)
(30,77,0)
(141,111,0)
(195,14,0)
(103,36,0)
(190,162,0)
(221,205,0)
(49,142,0)
(129,212,0)
(104,24,0)
(175,212,0)
(117,36,0)
(156,36,0)
(222,181,0)
(26,25,0)
(163,111,0)
(1,148,0)
(175,117,0)
(129,107,0)
(55,162,0)
(48,151,0)
(161,74,0)
(178,133,0)
(220,76,0)
(202,229,0)
(166,79,0)
(1,97,0)
(115,97,0)
(126,213,0)
(77,111,0)
(124,9,0)
(39,159,0)
(226,212,0)
(196,52,0)
(52,183,0)
(77,110,0)
(24,13,0)
(113,78,0)
(121,111,0)
(90,24,0)
(108,36,0)
(171,110,0)
(91,200,0)
(1,162,0)
(81,5,0)
(115,139,0)
(110,77,0)
(56,36,0)
(201,175,0)
(98,112,0)
(198,221,0)
(47,97,0)
(179,145,0)
(208,148,0)
(79,113,0)
(202,69,0)
(1,226,0)
(128,121,0)
(119,20,0)
(74,14,0)
(73,129,0)
(205,46,0)
(52,212,0)
(61,11,0)
(144,0,0)
(115,5,0)
(174,120,0)
(65,14,0)
(115,180,0)
(45,11,0)
(157,156,0)
(153,176,0)
(12,167,0)
(53,221,0)
(51,148,0)
(133,87,0)
(42,182,0)
(167,192,0)
(80,167,0)
(189,14,0)
(131,212,0)
(145,179,0)
(136,36,0)
(123,26,0)
(149,176,0)
(114,151,0)
(206,77,0)
(226,3,0)
(93,14,0)
(219,212,0)
(1,144,0)
(208,180,0)
(64,5,0)
(127,9,0)
(20,14,0)
(32,76,0)
(52,67,0)
(70,206,0)
(120,212,0)
(222,14,0)
(140,65,0)
(60,165,0)
(165,33,0)
(201,165,0)
(112,98,0)
(205,221,0)
(76,212,0)
(162,156,0)
(164,78,0)
(159,94,0)
(23,212,0)
(5,163,0)
(206,141,0)
(230,14,0)
(231,1,0)
(214,89,0)
(204,14,0)
(13,24,0)
(217,142,0)
(152,187,0)
(201,88,0)
(22,222,0)
(147,225,0)
(44,14,0)
(6,36,0)
(187,98,0)
(234,84,0)
(176,212,0)
(19,195,0)
(191,11,0)
(37,129,0)
(29,36,0)
(34,229,0)
(46,36,0)
(223,66,0)
(177,180,0)
(72,77,0)
(208,139,0)
(211,139,0)
(112,230,0)
(200,212,0)
(8,69,0)
(159,39,0)
(118,88,0)
(101,159,0)
(25,26,0)
(78,113,0)
(102,213,0)
(187,189,0)
(115,175,0)
(54,141,0)
(45,129,0)
(201,162,0)
(39,14,0)
(115,226,0)
(1,233,0)
(201,5,0)
(232,58,0)
(154,94,0)
(120,36,0)
(115,162,0)
(142,14,0)
(2,28,0)
(184,36,0)
(189,187,0)
(141,206,0)
(193,74,0)
(79,14,0)
(71,222,0)
(87,36,0)
(208,107,0)
(115,9,0)
(208,165,0)
(208,226,0)
(98,212,0)
(197,200,0)
(235,39,0)
(234,14,0)
(167,89,0)
(182,36,0)
(185,175,0)
(138,113,0)
(116,26,0)
(0,36,0)
(95,39,0)
(209,14,0)
(11,14,0)
(208,9,0)
(38,30,0)
(97,212,0)
(203,180,0)
(201,148,0)
(207,201,0)
(132,234,0)
(85,183,0)
(88,46,0)
(208,88,0)
(5,77,0)
(180,182,0)
(150,146,0)
(171,209,0)
(21,65,0)
(199,103,0)
(201,9,0)
(125,209,0)
(4,139,0)
(35,79,0)
(94,159,0)
(184,14,0)
(148,17,0)
(139,212,0)
(59,230,0)
(26,14,0)
(115,89,0)
(202,1,0)
(1,88,0)
(200,208,0)
(232,66,0)
(194,36,0)
(94,154,0)
(17,36,0)
(165,212,0)
(158,157,0)
(192,44,0)
(146,58,0)
(1,139,0)
(100,36,0)
(84,121,0)
(204,145,0)
(154,20,0)
(44,192,0)
(66,223,0)
(212,131,0)
(11,45,0)
(41,179,0)
(201,144,0)
(88,212,0)
(3,195,0)
(201,213,0)
(63,88,0)
(57,175,0)
(205,28,0)
(202,120,0)
(98,187,0)
(62,97,0)
(96,17,0)
(24,14,0)
(92,148,0)
(156,157,0)
(143,94,0)
(186,157,0)
(68,36,0)
(97,103,0)
(113,79,0)
(121,84,0)
(162,212,0)
(105,204,0)
(201,76,0)
(122,209,0)
(109,44,0)
(84,234,0)
(103,199,0)
(142,133,0)
(66,181,0)
(40,44,0)
(227,195,0)
(133,142,0)
(151,14,0)
(115,148,0)
(181,222,0)
(201,200,0)
(135,144,0)
(230,112,0)
(117,74,0)
(66,232,0)
(110,171,0)
(225,212,0)
(192,167,0)
(115,165,0)
(179,14,0)
(23,233,0)
(216,23,0)
(50,179,0)
(160,52,0)
(151,48,0)
(221,14,0)
(27,163,0)
(7,93,0)
(218,115,0)
(67,98,0)
(168,144,0)
(228,225,0)
(121,77,0)
(208,97,0)
(86,226,0)
(48,111,0)
(188,98,0)
(167,212,0)
(1,175,0)
(201,97,0)
(106,206,0)
(33,36,0)
(209,171,0)
(139,184,0)
(15,165,0)
(13,107,0)
(31,93,0)
(67,52,0)
(9,212,0)
(199,93,0)
(183,52,0)
(16,36,0)
(33,65,0)
(1,180,0)
(130,189,0)
(28,205,0)
(172,189,0)
(82,98,0)
(155,234,0)
(30,111,0)
(20,154,0)
(98,67,0)
(83,184,0)
(3,36,0)
(213,137,0)
(212,36,0)
(75,121,0)
(1,165,0)
(129,45,0)
(210,0,0)
(134,226,0)
(115,88,0)
(18,208,0)
(201,226,0)
(65,33,0)
(145,204,0)
(87,133,0)
(225,201,0)
(169,204,0)
(9,87,0)
(181,66,0)
(157,14,0)
(74,117,0)
(201,180,0)
(43,230,0)
(93,199,0)
(46,205,0)
(146,14,0)
(170,20,0)
(224,112,0)
(199,93,1)
(133,178,1)
(74,14,1)
(232,66,1)
(12,192,1)
(67,52,1)
(54,206,1)
(26,14,1)
(143,20,1)
(10,25,1)
(154,94,1)
(146,14,1)
(211,4,1)
(135,168,1)
(213,126,1)
(32,167,1)
(52,183,1)
(86,184,1)
(198,88,1)
(119,170,1)
(115,97,1)
(76,212,1)
(210,144,1)
(168,182,1)
(1,175,1)
(187,152,1)
(226,134,1)
(184,14,1)
(201,180,1)
(83,139,1)
(1,231,1)
(34,154,1)
(150,10,1)
(202,1,1)
(24,14,1)
(230,14,1)
(115,5,1)
(60,156,1)
(118,63,1)
(201,97,1)
(202,229,1)
(49,9,1)
(175,212,1)
(103,199,1)
(19,226,1)
(151,215,1)
(208,162,1)
(195,14,1)
(78,113,1)
(128,84,1)
(205,28,1)
(179,50,1)
(98,82,1)
(71,22,1)
(190,55,1)
(141,206,1)
(230,43,1)
(9,212,1)
(120,212,1)
(171,209,1)
(201,144,1)
(147,232,1)
(126,102,1)
(208,18,1)
(98,212,1)
(155,132,1)
(129,212,1)
(1,88,1)
(201,207,1)
(25,26,1)
(23,212,1)
(4,78,1)
(208,144,1)
(115,162,1)
(95,235,1)
(208,175,1)
(234,155,1)
(201,162,1)
(208,97,1)
(112,224,1)
(65,21,1)
(94,159,1)
(115,148,1)
(204,14,1)
(200,212,1)
(186,158,1)
(201,213,1)
(197,129,1)
(151,14,1)
(1,162,1)
(39,95,1)
(180,203,1)
(146,150,1)
(80,12,1)
(79,14,1)
(67,98,1)
(84,234,1)
(121,84,1)
(221,53,1)
(173,67,1)
(93,14,1)
(191,61,1)
(179,14,1)
(57,185,1)
(9,127,1)
(175,57,1)
(88,212,1)
(104,208,1)
(207,225,1)
(139,211,1)
(215,114,1)
(72,145,1)
(20,14,1)
(208,226,1)
(142,217,1)
(88,118,1)
(138,79,1)
(51,103,1)
(55,87,1)
(166,35,1)
(31,7,1)
(47,33,1)
(164,113,1)
(98,112,1)
(2,221,1)
(121,77,1)
(40,30,1)
(50,41,1)
(38,163,1)
(200,91,1)
(226,212,1)
(42,180,1)
(1,9,1)
(97,62,1)
(109,40,1)
(172,112,1)
(59,188,1)
(187,189,1)
(208,180,1)
(114,121,1)
(129,45,1)
(169,105,1)
(7,97,1)
(63,3,1)
(115,139,1)
(165,212,1)
(121,75,1)
(21,140,1)
(5,64,1)
(188,0,1)
(40,145,1)
(90,104,1)
(115,175,1)
(159,101,1)
(201,5,1)
(113,138,1)
(201,139,1)
(201,137,1)
(229,34,1)
(1,180,1)
(112,230,1)
(165,15,1)
(1,139,1)
(144,135,1)
(44,14,1)
(10,13,1)
(78,164,1)
(27,5,1)
(193,175,1)
(1,97,1)
(4,213,1)
(99,219,1)
(212,131,1)
(227,19,1)
(209,125,1)
(153,212,1)
(77,110,1)
(115,165,1)
(18,200,1)
(124,117,1)
(20,119,1)
(141,54,1)
(159,39,1)
(205,221,1)
(157,14,1)
(117,74,1)
(73,45,1)
(196,160,1)
(176,149,1)
(91,197,1)
(125,122,1)
(52,212,1)
(156,157,1)
(208,139,1)
(189,14,1)
(145,204,1)
(130,172,1)
(142,14,1)
(33,65,1)
(231,23,1)
(39,14,1)
(82,187,1)
(17,96,1)
(218,76,1)
(202,120,1)
(208,165,1)
(53,198,1)
(15,60,1)
(225,228,1)
(116,115,1)
(201,148,1)
(115,226,1)
(184,83,1)
(1,226,1)
(225,212,1)
(167,192,1)
(74,161,1)
(178,142,1)
(123,116,1)
(181,222,1)
(115,144,1)
(66,181,1)
(162,212,1)
(213,137,1)
(127,124,1)
(220,32,1)
(228,147,1)
(5,77,1)
(222,14,1)
(206,70,1)
(174,201,1)
(201,88,1)
(0,210,1)
(64,81,1)
(157,186,1)
(235,143,1)
(70,106,1)
(8,176,1)
(209,14,1)
(62,47,1)
(115,9,1)
(79,166,1)
(177,17,1)
(1,148,1)
(122,72,1)
(160,98,1)
(1,144,1)
(1,165,1)
(208,148,1)
(92,51,1)
(24,90,1)
(93,31,1)
(41,173,1)
(234,14,1)
(3,195,1)
(161,193,1)
(201,76,1)
(174,10,1)
(224,230,1)
(222,71,1)
(140,165,1)
(158,162,1)
(98,187,1)
(105,179,1)
(11,14,1)
(131,99,1)
(97,212,1)
(115,180,1)
(132,77,1)
(202,69,1)
(139,212,1)
(66,223,1)
(183,85,1)
(219,154,1)
(96,148,1)
(162,190,1)
(129,37,1)
(201,200,1)
(176,212,1)
(201,226,1)
(45,11,1)
(208,88,1)
(43,59,1)
(61,173,1)
(203,177,1)
(115,218,1)
(201,9,1)
(204,169,1)
(48,151,1)
(115,88,1)
(102,78,1)
(163,27,1)
(75,128,1)
(154,20,1)
(192,44,1)
(28,2,1)
(217,49,1)
(120,174,1)
(167,80,1)
(44,109,1)
(208,9,1)
(216,67,1)
(65,14,1)
(37,73,1)
(30,38,1)
(152,189,1)
(185,46,1)
(189,130,1)
(113,79,1)
(46,205,1)
(30,77,1)
(106,48,1)
(22,146,1)
(13,24,1)
(23,216,1)
(76,220,1)
(11,191,1)
(206,77,1)
(145,179,1)
(182,42,1)
(148,92,1)
(221,14,1)
(201,175,1)
(195,227,1)
(167,212,1)
(35,176,1)
(149,153,1)
(85,196,1)
(201,165,1)
(26,123,1)
(81,141,1)
(69,8,1)
(134,86,1)
(87,133,1)
(101,39,1)
(110,171,1)
(133,142,1)
(7,176,2)
(73,173,2)
(78,176,2)
(19,176,2)
(66,10,2)
(159,39,2)
(171,209,2)
(115,88,2)
(115,175,2)
(35,176,2)
(118,176,2)
(209,14,2)
(167,212,2)
(189,14,2)
(213,137,2)
(189,176,2)
(115,148,2)
(1,162,2)
(204,14,2)
(3,195,2)
(28,176,2)
(234,145,2)
(176,154,2)
(148,176,2)
(167,192,2)
(96,176,2)
(205,28,2)
(4,176,2)
(22,10,2)
(1,144,2)
(84,145,2)
(98,212,2)
(114,145,2)
(204,173,2)
(115,5,2)
(167,173,2)
(3,176,2)
(33,65,2)
(181,222,2)
(65,14,2)
(2,176,2)
(176,212,2)
(201,148,2)
(98,112,2)
(196,98,2)
(12,173,2)
(1,97,2)
(157,176,2)
(234,14,2)
(63,176,2)
(125,145,2)
(115,226,2)
(221,176,2)
(74,176,2)
(151,14,2)
(33,176,2)
(17,176,2)
(77,145,2)
(165,176,2)
(229,154,2)
(98,176,2)
(70,145,2)
(139,176,2)
(201,9,2)
(77,110,2)
(86,176,2)
(9,176,2)
(112,176,2)
(45,11,2)
(115,180,2)
(154,94,2)
(205,176,2)
(169,173,2)
(1,148,2)
(83,176,2)
(209,145,2)
(66,181,2)
(149,154,2)
(59,176,2)
(5,145,2)
(97,176,2)
(139,212,2)
(216,67,2)
(202,69,2)
(1,9,2)
(203,176,2)
(97,212,2)
(24,14,2)
(66,223,2)
(192,173,2)
(90,173,2)
(157,14,2)
(163,145,2)
(25,26,2)
(150,10,2)
(27,145,2)
(115,144,2)
(135,176,2)
(82,176,2)
(57,176,2)
(43,176,2)
(76,173,2)
(53,176,2)
(133,142,2)
(49,176,2)
(212,131,2)
(138,176,2)
(208,175,2)
(208,180,2)
(126,78,2)
(215,145,2)
(166,176,2)
(168,176,2)
(79,14,2)
(79,176,2)
(128,145,2)
(226,176,2)
(88,176,2)
(156,176,2)
(201,213,2)
(30,77,2)
(1,180,2)
(41,173,2)
(11,14,2)
(45,173,2)
(25,173,2)
(52,183,2)
(184,176,2)
(11,173,2)
(201,165,2)
(202,229,2)
(84,234,2)
(225,212,2)
(208,148,2)
(67,176,2)
(195,176,2)
(87,133,2)
(212,154,2)
(211,176,2)
(23,212,2)
(145,204,2)
(171,145,2)
(37,173,2)
(145,173,2)
(175,212,2)
(103,176,2)
(152,176,2)
(142,176,2)
(46,176,2)
(208,144,2)
(44,173,2)
(106,145,2)
(200,212,2)
(109,173,2)
(186,176,2)
(117,74,2)
(180,176,2)
(188,176,2)
(87,176,2)
(117,176,2)
(182,176,2)
(129,212,2)
(48,151,2)
(115,162,2)
(31,176,2)
(201,137,2)
(191,173,2)
(162,212,2)
(224,176,2)
(208,97,2)
(140,176,2)
(64,145,2)
(1,165,2)
(10,67,2)
(230,14,2)
(32,173,2)
(110,145,2)
(175,176,2)
(164,176,2)
(120,212,2)
(51,176,2)
(201,226,2)
(103,199,2)
(102,78,2)
(199,93,2)
(132,145,2)
(1,175,2)
(154,20,2)
(174,67,2)
(206,77,2)
(208,173,2)
(15,176,2)
(48,145,2)
(122,145,2)
(141,206,2)
(65,176,2)
(46,205,2)
(184,14,2)
(115,9,2)
(78,113,2)
(192,44,2)
(26,173,2)
(158,176,2)
(201,180,2)
(201,162,2)
(5,77,2)
(1,67,2)
(173,67,2)
(98,187,2)
(153,154,2)
(123,173,2)
(187,189,2)
(201,76,2)
(115,139,2)
(52,98,2)
(201,97,2)
(161,176,2)
(179,173,2)
(210,176,2)
(187,176,2)
(72,145,2)
(1,226,2)
(156,157,2)
(190,176,2)
(13,24,2)
(76,212,2)
(208,88,2)
(197,173,2)
(222,10,2)
(206,145,2)
(193,176,2)
(112,230,2)
(20,14,2)
(50,173,2)
(93,14,2)
(230,176,2)
(34,154,2)
(228,10,2)
(52,212,2)
(129,173,2)
(201,139,2)
(26,14,2)
(178,176,2)
(195,14,2)
(0,176,2)
(200,173,2)
(39,14,2)
(92,176,2)
(121,84,2)
(129,45,2)
(155,145,2)
(144,176,2)
(205,221,2)
(71,10,2)
(172,176,2)
(146,10,2)
(42,176,2)
(146,14,2)
(141,145,2)
(104,173,2)
(81,145,2)
(131,154,2)
(13,173,2)
(208,226,2)
(201,200,2)
(201,88,2)
(133,176,2)
(183,98,2)
(177,176,2)
(75,145,2)
(219,154,2)
(80,173,2)
(60,176,2)
(202,120,2)
(134,176,2)
(74,14,2)
(54,145,2)
(55,176,2)
(67,52,2)
(151,145,2)
(198,176,2)
(124,176,2)
(185,176,2)
(145,179,2)
(221,14,2)
(201,175,2)
(181,10,2)
(61,173,2)
(201,144,2)
(115,97,2)
(165,212,2)
(232,10,2)
(121,145,2)
(208,139,2)
(1,139,2)
(23,67,2)
(30,145,2)
(199,176,2)
(47,176,2)
(232,66,2)
(217,176,2)
(142,14,2)
(69,176,2)
(227,176,2)
(130,176,2)
(179,14,2)
(201,5,2)
(67,98,2)
(24,173,2)
(91,173,2)
(207,10,2)
(162,176,2)
(160,98,2)
(120,67,2)
(113,176,2)
(220,173,2)
(208,9,2)
(40,173,2)
(21,176,2)
(18,173,2)
(9,212,2)
(121,77,2)
(1,88,2)
(147,10,2)
(93,176,2)
(115,165,2)
(202,1,2)
(44,14,2)
(88,212,2)
(115,173,2)
(127,176,2)
(201,10,2)
(231,67,2)
(94,159,2)
(99,154,2)
(116,173,2)
(62,176,2)
(225,10,2)
(8,176,2)
(222,14,2)
(85,98,2)
(38,145,2)
(208,165,2)
(226,212,2)
(218,173,2)
(208,162,2)
(213,78,2)
(105,173,2)
(110,171,2)
(113,79,2)
-----------------------------------
(0,ai.fd_rdir = NULL)
(1,return (NULL)
(2,SO_ACCEPTCONN)
(3,so->so_type = head->so_type)
(4,so)
(5,sp->so_head)
(6,if (connstatus)
(7,head)
(8,NULL)
(9,so->so_state)
(10,connstatus)
(11,head->so_comp)
(12,so)
(13,head->so_qlen++)
(14,struct socket *head)
(15,so_timeo)
(16,if (soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
(17,ai.sb_rlimit = NULL)
(18,SS_COMP)
(19,head)
(20,head->so_qlen)
(21,so_timeo)
(22,head)
(23,sodealloc(so)
(24,head->so_qlen)
(25,head->so_incqlen++)
(26,head->so_incqlen)
(27,NULL)
(28,~ SO_ACCEPTCONN)
(29,if ((head->so_options & SO_ACCEPTFILTER)
(30,soaborta(sp)
(31,so_cred)
(32,so)
(33,so->so_timeo = head->so_timeo)
(34,NULL)
(35,head)
(36,)
(37,so_list)
(38,sp)
(39,head->so_qlimit)
(40,head)
(41,head)
(42,NULL)
(43,so_snd)
(44,head->so_incomp)
(45,&head->so_comp)
(46,so->so_options = head->so_options &~ SO_ACCEPTCONN)
(47,so)
(48,head->so_incqlen--)
(49,head)
(50,so_incqlen)
(51,ai)
(52,(*so->so_proto->pr_usrreqs->pru_attach)
(53,so_options)
(54,~SS_INCOMP)
(55,so)
(56,if (connstatus)
(57,so_linger)
(58,)
(59,head)
(60,so)
(61,head)
(62,so_cred)
(63,so)
(64,so_head)
(65,head->so_timeo)
(66,(caddr_t)
(67,soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
(68,if (head->so_qlen > 3 * head->so_qlimit / 2)
(69,return (NULL)
(70,so_state)
(71,so_timeo)
(72,sp)
(73,so)
(74,head->so_linger)
(75,so_list)
(76,so->so_state)
(77,sp = TAILQ_FIRST(&head->so_incomp)
(78,(head->so_options & SO_ACCEPTFILTER)
(79,head->so_options)
(80,so_list)
(81,sp)
(82,NULL)
(83,head)
(84,&head->so_incomp)
(85,ai)
(86,so)
(87,so->so_state = head->so_state | SS_NOFDREF)
(88,so->so_options)
(89,)
(90,so_qlen)
(91,so_state)
(92,sb_rlimit)
(93,head->so_cred)
(94,3 * head->so_qlimit / 2)
(95,so_qlimit)
(96,NULL)
(97,so->so_cred)
(98,soreserve(so, head->so_snd.ssb_hiwat, head->so_rcv.ssb_hiwat, NULL)
(99,1)
(100,sp)
(101,2)
(102,connstatus)
(103,so->so_cred = crhold(head->so_cred)
(104,head)
(105,head)
(106,sp)
(107,)
(108,so)
(109,so_incomp)
(110,TAILQ_FIRST(&head->so_incomp)
(111,)
(112,head->so_snd.ssb_hiwat)
(113,head->so_options & SO_ACCEPTFILTER)
(114,head)
(115,so->so_state |= SS_INCOMP)
(116,head)
(117,so->so_linger = head->so_linger)
(118,so_options)
(119,so_qlen)
(120,return (so)
(121,TAILQ_REMOVE(&head->so_incomp, sp, so_list)
(122,head)
(123,so_incqlen)
(124,so)
(125,so_incomp)
(126,0)
(127,so_state)
(128,sp)
(129,TAILQ_INSERT_TAIL(&head->so_comp, so, so_list)
(130,so_rcv)
(131,soalloc(1)
(132,head)
(133,head->so_state | SS_NOFDREF)
(134,so_type)
(135,fd_rdir)
(136,ai)
(137,int connstatus)
(138,SO_ACCEPTFILTER)
(139,so->so_head)
(140,head)
(141,sp->so_state &= ~SS_INCOMP)
(142,head->so_state)
(143,3)
(144,ai.fd_rdir)
(145,head->so_incqlen > head->so_qlimit)
(146,sorwakeup(head)
(147,so)
(148,ai.sb_rlimit)
(149,NULL)
(150,head)
(151,head->so_incqlen)
(152,ssb_hiwat)
(153,so)
(154,head->so_qlen > 3 * head->so_qlimit / 2)
(155,so_incomp)
(156,so->so_proto = head->so_proto)
(157,head->so_proto)
(158,head)
(159,head->so_qlimit / 2)
(160,so)
(161,so_linger)
(162,so->so_proto)
(163,sp->so_head = NULL)
(164,0)
(165,so->so_timeo)
(166,so_options)
(167,TAILQ_INSERT_TAIL(&head->so_incomp, so, so_list)
(168,ai)
(169,so_qlimit)
(170,head)
(171,&head->so_incomp)
(172,head)
(173,connstatus)
(174,so)
(175,so->so_linger)
(176,so == NULL)
(177,ai)
(178,SS_NOFDREF)
(179,head->so_incqlen)
(180,ai.p_ucred)
(181,&head->so_timeo)
(182,ai.p_ucred = NULL)
(183,&ai)
(184,so->so_head = head)
(185,so)
(186,so_proto)
(187,head->so_rcv.ssb_hiwat)
(188,so)
(189,head->so_rcv)
(190,so_proto)
(191,so_comp)
(192,&head->so_incomp)
(193,head)
(194,if (so == NULL)
(195,head->so_type)
(196,0)
(197,so)
(198,head)
(199,crhold(head->so_cred)
(200,so->so_state)
(201,so->so_state |= connstatus)
(202,RET)
(203,p_ucred)
(204,head->so_qlimit)
(205,head->so_options &~ SO_ACCEPTCONN)
(206,sp->so_state)
(207,connstatus)
(208,so->so_state |= SS_COMP)
(209,head->so_incomp)
(210,NULL)
(211,so_head)
(212,so = soalloc(1)
(213,connstatus = 0)
(214,if (head->so_incqlen > head->so_qlimit)
(215,so_incqlen)
(216,so)
(217,so_state)
(218,SS_INCOMP)
(219,so)
(220,so_state)
(221,head->so_options)
(222,head->so_timeo)
(223,caddr_t)
(224,ssb_hiwat)
(225,so->so_state)
(226,so->so_type)
(227,so_type)
(228,so_state)
(229,return (NULL)
(230,head->so_snd)
(231,NULL)
(232,wakeup((caddr_t)
(233,)
(234,head->so_incomp)
(235,head)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^