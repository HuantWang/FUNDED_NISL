-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,72,74
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalTrue)    {        /* FIX: Deallocate memory */        free(data);    }
globalTrue
globalTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(25,14,0)
(23,5,0)
(13,17,0)
(31,20,0)
(20,26,0)
(26,20,0)
(1,20,0)
(9,4,0)
(16,12,0)
(10,12,0)
(31,10,0)
(8,31,0)
(11,17,0)
(1,5,0)
(4,20,0)
(19,13,0)
(17,26,0)
(14,22,0)
(31,15,0)
(26,27,0)
(17,13,0)
(30,10,0)
(20,5,0)
(14,25,0)
(27,26,0)
(6,12,0)
(2,10,0)
(24,20,0)
(18,12,0)
(21,4,0)
(26,17,0)
(32,25,0)
(3,1,0)
(28,31,1)
(31,10,1)
(10,30,1)
(14,25,1)
(11,24,1)
(31,20,1)
(30,2,1)
(25,32,1)
(17,13,1)
(13,19,1)
(4,20,1)
(28,29,1)
(3,14,1)
(26,27,1)
(32,4,1)
(7,10,1)
(9,20,1)
(29,1,1)
(20,26,1)
(8,29,1)
(4,21,1)
(1,20,1)
(24,7,1)
(31,8,1)
(3,4,1)
(26,17,1)
(1,3,1)
(29,7,1)
(21,9,1)
(19,11,1)
(26,17,2)
(20,26,2)
(11,7,2)
(4,7,2)
(14,25,2)
(1,20,2)
(13,7,2)
(1,7,2)
(14,4,2)
(26,7,2)
(17,13,2)
(32,4,2)
(17,7,2)
(20,7,2)
(31,10,2)
(19,7,2)
(8,29,2)
(24,7,2)
(31,29,2)
(26,27,2)
(4,20,2)
(21,7,2)
(25,4,2)
(3,7,2)
(9,7,2)
(31,20,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,printWLine(data)
(2,data)
(3,data)
(4,data == NULL)
(5,)
(6,if(globalTrue)
(7,globalTrue)
(8,data)
(9,data)
(10,data = NULL)
(11,100)
(12,)
(13,sizeof(wchar_t)
(14,exit(-1)
(15,)
(16,data)
(17,calloc(100, sizeof(wchar_t)
(18,if(globalTrue)
(19,wchar_t)
(20,data = (wchar_t *)
(21,NULL)
(22,)
(23,if (data == NULL)
(24,data)
(25,-1)
(26,(wchar_t *)
(27,wchar_t *)
(28,RET)
(29,globalTrue)
(30,NULL)
(31,free(data)
(32,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^