-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_34_bad()
{
    char * data;
    CWE401_Memory_Leak__char_malloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
77,78
78,79
78,80
80,81
80,82
80,83
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,72,73,75,79,81,82,86,87,88
-----computeFrom-----
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_34_bad(){    char * data;    CWE401_Memory_Leak__char_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_34_bad()
CWE401_Memory_Leak__char_malloc_34_bad
{    char * data;    CWE401_Memory_Leak__char_malloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
CWE401_Memory_Leak__char_malloc_34_unionType myUnion;
CWE401_Memory_Leak__char_malloc_34_unionType myUnion;
CWE401_Memory_Leak__char_malloc_34_unionType
CWE401_Memory_Leak__char_malloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(36,28,0)
(0,19,0)
(37,23,0)
(20,6,0)
(26,40,0)
(5,35,0)
(40,32,0)
(14,23,0)
(9,39,0)
(35,5,0)
(40,26,0)
(12,31,0)
(8,12,0)
(39,31,0)
(39,28,0)
(2,21,0)
(18,17,0)
(6,20,0)
(24,4,0)
(17,28,0)
(11,39,0)
(1,21,0)
(10,20,0)
(16,32,0)
(33,26,0)
(4,28,0)
(38,5,0)
(20,38,0)
(25,28,0)
(38,20,0)
(17,31,0)
(5,31,0)
(0,22,0)
(23,28,0)
(31,28,0)
(15,12,0)
(7,31,0)
(4,31,0)
(3,6,0)
(22,0,0)
(5,38,0)
(27,22,0)
(31,5,0)
(30,28,0)
(34,40,0)
(21,4,0)
(32,28,0)
(13,26,0)
(7,23,1)
(5,35,1)
(38,20,1)
(40,26,1)
(12,31,1)
(39,9,1)
(0,22,1)
(23,14,1)
(12,8,1)
(9,11,1)
(11,0,1)
(29,40,1)
(8,15,1)
(5,38,1)
(20,6,1)
(26,33,1)
(15,31,1)
(34,4,1)
(22,27,1)
(27,12,1)
(4,24,1)
(13,34,1)
(6,3,1)
(14,37,1)
(11,12,1)
(31,5,1)
(21,1,1)
(17,31,1)
(10,7,1)
(4,31,1)
(3,10,1)
(18,39,1)
(39,31,1)
(1,2,1)
(33,13,1)
(2,17,1)
(24,21,1)
(17,18,1)
(12,31,2)
(0,22,2)
(20,6,2)
(22,12,2)
(5,35,2)
(38,20,2)
(39,31,2)
(27,12,2)
(4,31,2)
(17,31,2)
(5,38,2)
(0,12,2)
(31,5,2)
(40,26,2)
-----------------------------------
(0,exit(-1)
(1,unionFirst)
(2,myUnion)
(3,char)
(4,myUnion.unionFirst = data)
(5,(char *)
(6,sizeof(char)
(7,data)
(8,NULL)
(9,"A String")
(10,100)
(11,data)
(12,data == NULL)
(13,myUnion)
(14,NULL)
(15,data)
(16,data)
(17,printLine(data)
(18,data)
(19,)
(20,100*sizeof(char)
(21,myUnion.unionFirst)
(22,-1)
(23,data = NULL)
(24,data)
(25,myUnion)
(26,myUnion.unionSecond)
(27,1)
(28,)
(29,RET)
(30,data)
(31,data = (char *)
(32,)
(33,unionSecond)
(34,data)
(35,char *)
(36,if (data == NULL)
(37,data)
(38,malloc(100*sizeof(char)
(39,strcpy(data, "A String")
(40,* data = myUnion.unionSecond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^