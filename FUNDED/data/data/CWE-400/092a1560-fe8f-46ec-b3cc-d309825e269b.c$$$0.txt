-----label-----
0
-----code-----
static void goodB2G2()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goodB2G2Static = 1; /* true */
    goodB2G2Sink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,62,63,67,68,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goodB2G2Static = 1; /* true */    goodB2G2Sink(data);}
static void
goodB2G2()
goodB2G2
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goodB2G2Static = 1; /* true */    goodB2G2Sink(data);}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goodB2G2Static = 1;
goodB2G2Static = 1
goodB2G2Static
goodB2G2Static
1
goodB2G2Sink(data);
goodB2G2Sink(data)
goodB2G2Sink
goodB2G2Sink
data
data
-----joern-----
(29,32,0)
(12,33,0)
(16,24,0)
(28,24,0)
(31,16,0)
(2,19,0)
(3,16,0)
(2,8,0)
(7,6,0)
(32,29,0)
(20,16,0)
(33,16,0)
(17,23,0)
(10,4,0)
(3,36,0)
(34,3,0)
(15,33,0)
(0,24,0)
(33,25,0)
(9,24,0)
(16,32,0)
(23,4,0)
(4,23,0)
(23,29,0)
(36,3,0)
(29,23,0)
(26,24,0)
(11,6,0)
(21,28,0)
(36,24,0)
(13,3,0)
(22,9,0)
(6,24,0)
(25,24,0)
(27,28,0)
(14,31,0)
(19,2,0)
(5,32,0)
(35,31,0)
(18,25,0)
(3,25,0)
(30,19,0)
(32,16,0)
(32,5,0)
(9,16,0)
(33,16,1)
(2,19,1)
(17,20,1)
(18,33,1)
(31,16,1)
(1,9,1)
(9,16,1)
(15,31,1)
(19,30,1)
(3,34,1)
(22,28,1)
(36,3,1)
(9,22,1)
(23,4,1)
(32,29,1)
(11,7,1)
(25,18,1)
(29,23,1)
(15,2,1)
(6,11,1)
(12,15,1)
(31,14,1)
(35,16,1)
(27,21,1)
(30,31,1)
(14,35,1)
(34,13,1)
(13,25,1)
(32,5,1)
(4,10,1)
(20,6,1)
(3,16,1)
(28,27,1)
(33,12,1)
(16,32,1)
(21,36,1)
(10,17,1)
(3,25,1)
(19,31,2)
(32,5,2)
(29,23,2)
(3,16,2)
(16,32,2)
(36,3,2)
(33,16,2)
(2,19,2)
(9,16,2)
(32,29,2)
(23,4,2)
(3,25,2)
(31,16,2)
(2,31,2)
(30,31,2)
-----------------------------------
(0,if (data == NULL)
(1,RET)
(2,exit(-1)
(3,data[0])
(4,sizeof(int)
(5,int *)
(6,data = NULL)
(7,data)
(8,)
(9,goodB2G2Sink(data)
(10,int)
(11,NULL)
(12,0)
(13,data)
(14,NULL)
(15,data)
(16,data = (int *)
(17,100)
(18,5)
(19,-1)
(20,data)
(21,goodB2G2Static)
(22,data)
(23,100*sizeof(int)
(24,)
(25,data[0] = 5)
(26,data)
(27,1)
(28,goodB2G2Static = 1)
(29,malloc(100*sizeof(int)
(30,1)
(31,data == NULL)
(32,(int *)
(33,data[0])
(34,0)
(35,data)
(36,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^