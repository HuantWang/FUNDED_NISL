-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad()
{
    int i,j;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    for(j = 0; j < 1; j++)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
39,40
39,41
40,41
42,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
55,56
56,57
58,59
59,60
59,61
60,61
61,62
61,63
63,64
63,65
66,67
66,68
66,69
67,68
67,69
68,69
70,71
70,72
71,72
73,74
75,76
75,77
75,78
75,79
75,80
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
83,84
85,86
85,87
86,87
88,89
88,90
89,90
91,92
92,93
92,94
95,96
95,97
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
109,112
110,111
112,113
114,115
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
130,132
131,132
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,44,49,50,53,54,57,62,64,65,69,72,74,79,82,84,87,90,93,94,98,100,105,107,111,113,115,119,121,125,127,132,133
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
39,40
39,41
47,48
47,49
51,52
51,53
67,68
67,69
77,78
77,79
88,89
88,90
96,97
96,98
-----guardedBy-----
74,115
69,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad(){    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_17_bad
{    int i,j;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
for(j = 0; j < 1; j++)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(2,4,0)
(8,7,0)
(56,20,0)
(25,30,0)
(46,31,0)
(32,22,0)
(45,33,0)
(23,40,0)
(64,41,0)
(49,26,0)
(22,54,0)
(22,18,0)
(33,45,0)
(24,59,0)
(45,13,0)
(63,40,0)
(22,32,0)
(47,54,0)
(13,45,0)
(60,34,0)
(65,26,0)
(43,3,0)
(14,22,0)
(45,18,0)
(42,56,0)
(31,48,0)
(30,26,0)
(15,55,0)
(55,26,0)
(58,5,0)
(11,54,0)
(50,40,0)
(35,20,0)
(61,3,0)
(34,41,0)
(12,36,0)
(5,33,0)
(44,40,0)
(39,40,0)
(38,56,0)
(9,18,0)
(28,18,0)
(30,36,0)
(17,49,0)
(16,35,0)
(7,41,0)
(6,46,0)
(5,26,0)
(51,34,0)
(5,58,0)
(54,47,0)
(54,29,0)
(1,49,0)
(59,57,0)
(21,41,0)
(52,20,0)
(33,5,0)
(62,13,0)
(19,2,0)
(10,45,0)
(27,59,0)
(3,36,0)
(26,5,0)
(53,20,0)
(45,54,0)
(26,36,0)
(18,40,0)
(55,36,0)
(3,26,0)
(0,32,0)
(31,46,0)
(35,16,1)
(6,49,1)
(28,9,1)
(53,52,1)
(7,41,1)
(62,10,1)
(13,62,1)
(7,8,1)
(43,61,1)
(31,46,1)
(21,56,1)
(8,2,1)
(65,22,1)
(30,26,1)
(41,64,1)
(32,0,1)
(3,43,1)
(34,51,1)
(61,31,1)
(3,26,1)
(42,35,1)
(5,33,1)
(45,54,1)
(15,30,1)
(20,53,1)
(60,41,1)
(26,5,1)
(22,54,1)
(10,65,1)
(55,26,1)
(38,42,1)
(14,34,1)
(56,38,1)
(11,56,1)
(17,1,1)
(51,60,1)
(47,11,1)
(46,6,1)
(49,26,1)
(25,3,1)
(35,20,1)
(16,54,1)
(18,28,1)
(49,17,1)
(22,18,1)
(61,49,1)
(45,18,1)
(64,21,1)
(54,47,1)
(33,45,1)
(60,7,1)
(45,13,1)
(55,15,1)
(37,34,1)
(30,25,1)
(34,41,1)
(52,18,1)
(42,20,1)
(1,26,1)
(5,58,1)
(22,32,1)
(0,14,1)
(2,19,1)
(19,22,1)
(56,20,1)
(8,55,1)
(61,22,2)
(62,22,2)
(45,22,2)
(54,47,2)
(22,34,2)
(65,22,2)
(35,20,2)
(0,34,2)
(22,18,2)
(3,22,2)
(19,22,2)
(22,32,2)
(45,54,2)
(7,34,2)
(31,46,2)
(34,34,2)
(45,13,2)
(46,49,2)
(56,20,2)
(32,34,2)
(1,22,2)
(5,58,2)
(26,22,2)
(34,41,2)
(16,56,2)
(14,34,2)
(13,22,2)
(51,34,2)
(26,5,2)
(43,22,2)
(30,22,2)
(49,26,2)
(7,41,2)
(60,34,2)
(8,34,2)
(15,22,2)
(31,49,2)
(35,56,2)
(11,56,2)
(22,54,2)
(49,22,2)
(25,22,2)
(10,22,2)
(33,22,2)
(38,56,2)
(45,18,2)
(5,22,2)
(6,49,2)
(2,22,2)
(30,26,2)
(33,45,2)
(56,56,2)
(55,22,2)
(17,22,2)
(54,56,2)
(42,56,2)
(3,26,2)
(5,33,2)
(55,26,2)
(47,56,2)
-----------------------------------
(0,HELLO_STRING)
(1,myString)
(2,printLine("Input is less than the length of the source string")
(3,strcpy(myString, HELLO_STRING)
(4,)
(5,(char *)
(6,1)
(7,j++)
(8,j)
(9,data)
(10,data)
(11,data)
(12,if (myString == NULL)
(13,sizeof(char)
(14,data)
(15,myString)
(16,i)
(17,NULL)
(18,data = 0)
(19,"Input is less than the length of the source string")
(20,i = 0)
(21,j)
(22,data > strlen(HELLO_STRING)
(23,i)
(24,myString)
(25,myString)
(26,myString = (char *)
(27,if (data > strlen(HELLO_STRING)
(28,0)
(29,)
(30,printLine(myString)
(31,exit(-1)
(32,strlen(HELLO_STRING)
(33,malloc(data*sizeof(char)
(34,j < 1)
(35,i++)
(36,)
(37,RET)
(38,1)
(39,for(i = 0; i < 1; i++)
(40,)
(41,j = 0)
(42,i)
(43,HELLO_STRING)
(44,data)
(45,data*sizeof(char)
(46,-1)
(47,rand()
(48,)
(49,myString == NULL)
(50,j)
(51,1)
(52,i)
(53,0)
(54,data = rand()
(55,free(myString)
(56,i < 1)
(57,)
(58,char *)
(59,)
(60,j)
(61,myString)
(62,char)
(63,for(j = 0; j < 1; j++)
(64,0)
(65,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^