-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    size_t data;
    /* Initialize data */
    data = 0;
    for(i = 0; i < 1; i++)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read data from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    for(k = 0; k < 1; k++)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
39,40
40,41
40,42
42,43
42,44
42,45
44,45
45,46
47,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
56,57
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
75,76
76,77
77,78
77,79
78,79
81,82
81,83
81,84
81,85
82,83
83,84
83,85
84,85
87,88
87,89
88,89
91,92
92,93
94,95
95,96
95,97
96,97
97,98
97,99
99,100
99,101
102,103
102,104
102,105
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
110,111
112,113
112,114
113,114
116,117
116,118
116,119
116,120
116,121
117,118
118,119
118,120
119,120
121,122
121,123
122,123
122,124
124,125
126,127
126,128
127,128
129,130
129,131
130,131
132,133
133,134
133,135
136,137
136,138
137,138
137,139
138,139
140,141
142,143
143,144
144,145
144,146
145,146
147,148
149,150
150,151
150,152
150,153
151,152
153,154
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
167,168
169,170
170,171
171,172
171,173
172,173
-----nextToken-----
2,4,8,10,12,16,18,22,23,28,29,32,33,36,41,43,46,48,53,55,57,59,61,66,69,71,73,74,79,80,85,86,89,90,93,98,100,101,106,109,111,114,115,120,123,125,128,131,134,135,139,141,146,148,152,154,156,160,162,166,168,173,174
-----computeFrom-----
20,21
20,22
26,27
26,28
30,31
30,32
50,51
50,52
64,65
64,66
83,84
83,85
87,88
87,89
103,104
103,105
104,105
104,106
112,113
112,114
118,119
118,120
129,130
129,131
137,138
137,139
-----guardedBy-----
55,71
61,73
111,156
114,131
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int i,k;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    for(k = 0; k < 1; k++)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G()
goodB2G
{    int i,k;    size_t data;    /* Initialize data */    data = 0;    for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }    for(k = 0; k < 1; k++)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
int i,k;
int i,k;
int
i
i
k
k
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
for(i = 0; i < 1; i++)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read data from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
for(k = 0; k < 1; k++)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(58,35,0)
(74,47,0)
(62,59,0)
(5,86,0)
(26,84,0)
(43,48,0)
(35,54,0)
(14,15,0)
(68,81,0)
(69,75,0)
(3,71,0)
(34,31,0)
(73,60,0)
(69,35,0)
(53,56,0)
(29,71,0)
(0,10,0)
(74,27,0)
(70,40,0)
(36,31,0)
(25,69,0)
(39,76,0)
(75,69,0)
(37,27,0)
(35,69,0)
(57,79,0)
(10,43,0)
(12,54,0)
(60,59,0)
(24,41,0)
(47,10,0)
(80,71,0)
(7,51,0)
(85,31,0)
(64,76,0)
(79,20,0)
(15,76,0)
(69,25,0)
(49,43,0)
(1,68,0)
(33,65,0)
(88,66,0)
(8,12,0)
(66,43,0)
(51,35,0)
(21,22,0)
(16,20,0)
(87,66,0)
(74,43,0)
(75,77,0)
(61,10,0)
(67,38,0)
(47,74,0)
(68,1,0)
(46,58,0)
(74,22,0)
(84,59,0)
(11,27,0)
(71,41,0)
(18,35,0)
(17,54,0)
(19,77,0)
(10,27,0)
(66,15,0)
(41,71,0)
(4,31,0)
(28,65,0)
(58,54,0)
(12,35,0)
(38,77,0)
(32,15,0)
(27,31,0)
(76,55,0)
(22,74,0)
(42,66,0)
(86,13,0)
(72,1,0)
(77,43,0)
(40,20,0)
(45,59,0)
(23,82,0)
(10,47,0)
(65,63,0)
(44,51,0)
(9,20,0)
(2,56,0)
(78,31,0)
(56,35,0)
(77,38,0)
(71,15,0)
(51,54,0)
(77,75,0)
(6,23,0)
(77,27,0)
(43,66,0)
(50,84,0)
(30,74,0)
(52,79,0)
(22,21,1)
(2,53,1)
(58,46,1)
(67,19,1)
(70,43,1)
(12,35,1)
(10,0,1)
(51,35,1)
(87,88,1)
(50,59,1)
(79,57,1)
(56,2,1)
(8,58,1)
(66,87,1)
(60,73,1)
(74,22,1)
(27,37,1)
(47,10,1)
(43,66,1)
(60,59,1)
(20,16,1)
(84,26,1)
(61,74,1)
(74,43,1)
(71,3,1)
(6,47,1)
(41,24,1)
(19,18,1)
(80,29,1)
(23,6,1)
(77,38,1)
(1,72,1)
(42,49,1)
(46,51,1)
(40,70,1)
(69,25,1)
(21,30,1)
(49,41,1)
(84,59,1)
(47,74,1)
(16,9,1)
(88,42,1)
(68,1,1)
(70,86,1)
(52,40,1)
(77,43,1)
(7,56,1)
(10,27,1)
(51,44,1)
(45,62,1)
(30,84,1)
(29,15,1)
(38,67,1)
(40,20,1)
(62,79,1)
(66,15,1)
(26,50,1)
(12,8,1)
(72,56,1)
(24,71,1)
(86,5,1)
(0,61,1)
(69,75,1)
(15,14,1)
(83,84,1)
(71,15,1)
(53,35,1)
(18,47,1)
(56,35,1)
(37,11,1)
(59,45,1)
(52,20,1)
(44,7,1)
(74,27,1)
(10,43,1)
(9,27,1)
(75,77,1)
(57,52,1)
(73,12,1)
(14,32,1)
(41,71,1)
(58,35,1)
(77,27,1)
(73,23,1)
(50,60,1)
(7,68,1)
(32,79,1)
(35,69,1)
(5,41,1)
(3,80,1)
(79,20,1)
(68,56,2)
(80,79,2)
(52,79,2)
(74,22,2)
(43,66,2)
(0,74,2)
(87,41,2)
(19,47,2)
(72,56,2)
(29,79,2)
(71,15,2)
(66,41,2)
(10,74,2)
(47,74,2)
(49,41,2)
(14,79,2)
(15,79,2)
(84,59,2)
(73,84,2)
(23,47,2)
(68,1,2)
(2,47,2)
(77,27,2)
(21,84,2)
(75,77,2)
(74,27,2)
(77,43,2)
(66,15,2)
(38,47,2)
(40,20,2)
(10,27,2)
(3,79,2)
(79,20,2)
(46,47,2)
(79,79,2)
(50,84,2)
(6,47,2)
(51,35,2)
(69,25,2)
(1,56,2)
(5,41,2)
(60,84,2)
(74,84,2)
(43,41,2)
(57,79,2)
(41,79,2)
(42,41,2)
(75,47,2)
(24,79,2)
(12,35,2)
(56,35,2)
(69,47,2)
(77,47,2)
(58,35,2)
(71,79,2)
(51,47,2)
(35,47,2)
(69,75,2)
(53,47,2)
(58,47,2)
(8,47,2)
(88,41,2)
(60,59,2)
(70,79,2)
(61,74,2)
(47,10,2)
(77,38,2)
(86,41,2)
(10,43,2)
(56,47,2)
(22,84,2)
(47,84,2)
(26,84,2)
(7,47,2)
(44,47,2)
(74,43,2)
(35,69,2)
(32,79,2)
(30,84,2)
(40,79,2)
(84,84,2)
(18,47,2)
(12,47,2)
(67,47,2)
(41,71,2)
-----------------------------------
(0,100)
(1,-1)
(2,NULL)
(3,stdin)
(4,data)
(5,"fgets()
(6,"Input is less than the length of the source string or too large")
(7,myString)
(8,myString)
(9,i)
(10,data < 100)
(11,data)
(12,free(myString)
(13,)
(14,"")
(15,inputBuffer[CHAR_ARRAY_SIZE] = "")
(16,0)
(17,if (myString == NULL)
(18,myString)
(19,data)
(20,i = 0)
(21,HELLO_STRING)
(22,wcslen(HELLO_STRING)
(23,printLine("Input is less than the length of the source string or too large")
(24,NULL)
(25,wchar_t *)
(26,1)
(27,data = 0)
(28,if (data > wcslen(HELLO_STRING)
(29,inputBuffer)
(30,data)
(31,)
(32,inputBuffer)
(33,myString)
(34,i)
(35,myString = (wchar_t *)
(36,k)
(37,0)
(38,sizeof(wchar_t)
(39,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(40,i++)
(41,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,inputBuffer)
(43,data = strtoul(inputBuffer, NULL, 0)
(44,HELLO_STRING)
(45,0)
(46,myString)
(47,data > wcslen(HELLO_STRING)
(48,)
(49,data)
(50,k)
(51,wcscpy(myString, HELLO_STRING)
(52,i)
(53,myString)
(54,)
(55,)
(56,myString == NULL)
(57,1)
(58,printWLine(myString)
(59,k = 0)
(60,k++)
(61,data)
(62,k)
(63,)
(64,inputBuffer)
(65,)
(66,strtoul(inputBuffer, NULL, 0)
(67,wchar_t)
(68,exit(-1)
(69,(wchar_t *)
(70,i)
(71,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(72,1)
(73,k)
(74,data > wcslen(HELLO_STRING)
(75,malloc(data*sizeof(wchar_t)
(76,)
(77,data*sizeof(wchar_t)
(78,for(k = 0; k < 1; k++)
(79,i < 1)
(80,CHAR_ARRAY_SIZE)
(81,)
(82,)
(83,RET)
(84,k < 1)
(85,for(i = 0; i < 1; i++)
(86,printLine("fgets()
(87,0)
(88,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^