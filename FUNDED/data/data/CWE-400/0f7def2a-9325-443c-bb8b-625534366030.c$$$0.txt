-----label-----
0
-----code-----
static int get_target_info(int rank, ptl_process_t *id, ptl_pt_index_t local_data_pt, ptl_pt_index_t *target_data_pt,
                           ptl_pt_index_t *target_control_pt)
{
    int mpi_errno = MPI_SUCCESS;
    struct MPIDI_VC *vc;
    MPID_nem_ptl_vc_area *vc_ptl;
    MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_GET_TARGET_INFO);

    MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_GET_TARGET_INFO);

    MPIDI_PG_Get_vc(MPIDI_Process.my_pg, rank, &vc);
    vc_ptl = VC_PTL(vc);
    if (!vc_ptl->id_initialized) {
        mpi_errno = MPID_nem_ptl_init_id(vc);
        if (mpi_errno) MPIU_ERR_POP(mpi_errno);
    }

    *id = vc_ptl->id;

    MPIU_Assert(local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||
                local_data_pt == MPIDI_nem_ptl_control_pt);

    if (local_data_pt == MPIDI_nem_ptl_pt) {
        *target_data_pt = vc_ptl->pt;
        *target_control_pt = vc_ptl->ptr;
    }
    else if (local_data_pt == MPIDI_nem_ptl_get_pt) {
        *target_data_pt = vc_ptl->ptg;
        *target_control_pt = PTL_PT_ANY;
    }
    else if (local_data_pt == MPIDI_nem_ptl_control_pt) {
        *target_data_pt = vc_ptl->ptc;
        *target_control_pt = PTL_PT_ANY;
    }

 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO);
    return mpi_errno;

 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
7,8
9,10
9,11
10,11
12,13
12,14
15,16
15,17
16,17
18,19
20,21
20,22
21,22
23,24
23,25
26,27
26,28
27,28
29,30
29,31
32,33
32,34
32,35
32,36
32,37
32,38
32,39
32,40
32,41
32,42
32,43
32,44
32,45
32,46
33,34
34,35
34,36
36,37
36,38
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
50,51
52,53
52,54
55,56
56,57
56,58
57,58
59,60
60,61
62,63
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
72,74
73,74
76,77
78,79
79,80
81,82
82,83
82,84
83,84
85,86
85,87
86,87
88,89
90,91
90,92
91,92
92,93
92,94
93,94
96,97
96,98
97,98
98,99
98,100
99,100
101,102
101,103
102,103
104,105
106,107
106,108
107,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
118,119
120,121
120,122
121,122
124,125
125,126
125,127
126,127
128,129
128,130
129,130
129,131
130,131
130,132
131,132
133,134
135,136
135,137
136,137
138,139
140,141
140,142
141,142
143,144
145,146
145,147
145,148
146,147
146,148
147,148
149,150
151,152
151,153
152,153
153,154
153,155
154,155
155,156
157,158
157,159
158,159
161,162
162,163
162,164
163,164
164,165
166,167
166,168
167,168
170,171
170,172
170,173
171,172
171,173
172,173
174,175
176,177
176,178
177,178
178,179
178,180
179,180
180,181
182,183
182,184
183,184
186,187
187,188
187,189
188,189
189,190
191,192
193,194
193,195
194,195
194,196
195,196
197,198
199,200
199,201
200,201
201,202
201,203
202,203
203,204
205,206
205,207
206,207
209,210
210,211
210,212
211,212
212,213
214,215
216,217
216,218
218,219
219,220
219,221
220,221
222,223
224,225
225,226
227,228
227,229
229,230
-----nextToken-----
2,4,6,8,11,13,14,17,19,22,24,25,28,30,31,35,37,40,44,46,47,51,53,54,58,61,65,67,71,74,75,77,80,84,87,89,94,95,100,103,105,108,112,114,119,122,123,127,132,134,137,139,142,144,148,150,156,159,160,165,168,169,173,175,181,184,185,190,192,196,198,204,207,208,213,215,217,221,223,226,228,230
-----computeFrom-----
82,83
82,84
98,99
98,100
116,117
116,118
128,129
128,130
129,130
129,131
130,131
130,132
135,136
135,137
140,141
140,142
146,147
146,148
153,154
153,155
162,163
162,164
171,172
171,173
178,179
178,180
187,188
187,189
194,195
194,196
201,202
201,203
210,211
210,212
-----guardedBy-----
-----guardedByNegation-----
148,196
173,196
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int get_target_info(int rank, ptl_process_t *id, ptl_pt_index_t local_data_pt, ptl_pt_index_t *target_data_pt,                           ptl_pt_index_t *target_control_pt){    int mpi_errno = MPI_SUCCESS;    struct MPIDI_VC *vc;    MPID_nem_ptl_vc_area *vc_ptl;    MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_GET_TARGET_INFO);    MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_GET_TARGET_INFO);    MPIDI_PG_Get_vc(MPIDI_Process.my_pg, rank, &vc);    vc_ptl = VC_PTL(vc);    if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }    *id = vc_ptl->id;    MPIU_Assert(local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||                local_data_pt == MPIDI_nem_ptl_control_pt);    if (local_data_pt == MPIDI_nem_ptl_pt) {        *target_data_pt = vc_ptl->pt;        *target_control_pt = vc_ptl->ptr;    }    else if (local_data_pt == MPIDI_nem_ptl_get_pt) {        *target_data_pt = vc_ptl->ptg;        *target_control_pt = PTL_PT_ANY;    }    else if (local_data_pt == MPIDI_nem_ptl_control_pt) {        *target_data_pt = vc_ptl->ptc;        *target_control_pt = PTL_PT_ANY;    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
get_target_info(int rank, ptl_process_t *id, ptl_pt_index_t local_data_pt, ptl_pt_index_t *target_data_pt,                           ptl_pt_index_t *target_control_pt)
get_target_info
int rank
int
rank
rank
ptl_process_t *id
ptl_process_t
ptl_process_t
*id
*
id
ptl_pt_index_t local_data_pt
ptl_pt_index_t
ptl_pt_index_t
local_data_pt
local_data_pt
ptl_pt_index_t *target_data_pt
ptl_pt_index_t
ptl_pt_index_t
*target_data_pt
*
target_data_pt
ptl_pt_index_t *target_control_pt
ptl_pt_index_t
ptl_pt_index_t
*target_control_pt
*
target_control_pt
{    int mpi_errno = MPI_SUCCESS;    struct MPIDI_VC *vc;    MPID_nem_ptl_vc_area *vc_ptl;    MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_GET_TARGET_INFO);    MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_GET_TARGET_INFO);    MPIDI_PG_Get_vc(MPIDI_Process.my_pg, rank, &vc);    vc_ptl = VC_PTL(vc);    if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }    *id = vc_ptl->id;    MPIU_Assert(local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||                local_data_pt == MPIDI_nem_ptl_control_pt);    if (local_data_pt == MPIDI_nem_ptl_pt) {        *target_data_pt = vc_ptl->pt;        *target_control_pt = vc_ptl->ptr;    }    else if (local_data_pt == MPIDI_nem_ptl_get_pt) {        *target_data_pt = vc_ptl->ptg;        *target_control_pt = PTL_PT_ANY;    }    else if (local_data_pt == MPIDI_nem_ptl_control_pt) {        *target_data_pt = vc_ptl->ptc;        *target_control_pt = PTL_PT_ANY;    } fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
struct MPIDI_VC *vc;
struct MPIDI_VC *vc;
struct MPIDI_VC
MPIDI_VC
*vc
*
vc
MPID_nem_ptl_vc_area *vc_ptl;
MPID_nem_ptl_vc_area *vc_ptl;
MPID_nem_ptl_vc_area
MPID_nem_ptl_vc_area
*vc_ptl
*
vc_ptl
MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_GET_TARGET_INFO);
MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_GET_TARGET_INFO);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_MPID_NEM_GET_TARGET_INFO)
MPID_STATE_MPID_NEM_GET_TARGET_INFO
MPID_STATE_MPID_NEM_GET_TARGET_INFO
MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_GET_TARGET_INFO);
MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_GET_TARGET_INFO)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_MPID_NEM_GET_TARGET_INFO
MPID_STATE_MPID_NEM_GET_TARGET_INFO
MPIDI_PG_Get_vc(MPIDI_Process.my_pg, rank, &vc);
MPIDI_PG_Get_vc(MPIDI_Process.my_pg, rank, &vc)
MPIDI_PG_Get_vc
MPIDI_PG_Get_vc
MPIDI_Process.my_pg
MPIDI_Process
MPIDI_Process
my_pg
rank
rank
&vc
vc
vc
vc_ptl = VC_PTL(vc);
vc_ptl = VC_PTL(vc)
vc_ptl
vc_ptl
VC_PTL(vc)
VC_PTL
VC_PTL
vc
vc
if (!vc_ptl->id_initialized) {        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }
!vc_ptl->id_initialized
vc_ptl->id_initialized
vc_ptl
vc_ptl
id_initialized
{        mpi_errno = MPID_nem_ptl_init_id(vc);        if (mpi_errno) MPIU_ERR_POP(mpi_errno);    }
mpi_errno = MPID_nem_ptl_init_id(vc);
mpi_errno = MPID_nem_ptl_init_id(vc)
mpi_errno
mpi_errno
MPID_nem_ptl_init_id(vc)
MPID_nem_ptl_init_id
MPID_nem_ptl_init_id
vc
vc
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
*id = vc_ptl->id;
*id = vc_ptl->id
*id
id
id
vc_ptl->id
vc_ptl
vc_ptl
id
MPIU_Assert(local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||                local_data_pt == MPIDI_nem_ptl_control_pt);
MPIU_Assert(local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||                local_data_pt == MPIDI_nem_ptl_control_pt)
MPIU_Assert
MPIU_Assert
local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||                local_data_pt == MPIDI_nem_ptl_control_pt
local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt
local_data_pt == MPIDI_nem_ptl_pt
local_data_pt
local_data_pt
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
local_data_pt == MPIDI_nem_ptl_get_pt
local_data_pt
local_data_pt
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
local_data_pt == MPIDI_nem_ptl_control_pt
local_data_pt
local_data_pt
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
if (local_data_pt == MPIDI_nem_ptl_pt) {        *target_data_pt = vc_ptl->pt;        *target_control_pt = vc_ptl->ptr;    }    else if (local_data_pt == MPIDI_nem_ptl_get_pt) {        *target_data_pt = vc_ptl->ptg;        *target_control_pt = PTL_PT_ANY;    }    else if (local_data_pt == MPIDI_nem_ptl_control_pt) {        *target_data_pt = vc_ptl->ptc;        *target_control_pt = PTL_PT_ANY;    }
local_data_pt == MPIDI_nem_ptl_pt
local_data_pt
local_data_pt
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
{        *target_data_pt = vc_ptl->pt;        *target_control_pt = vc_ptl->ptr;    }
*target_data_pt = vc_ptl->pt;
*target_data_pt = vc_ptl->pt
*target_data_pt
target_data_pt
target_data_pt
vc_ptl->pt
vc_ptl
vc_ptl
pt
*target_control_pt = vc_ptl->ptr;
*target_control_pt = vc_ptl->ptr
*target_control_pt
target_control_pt
target_control_pt
vc_ptl->ptr
vc_ptl
vc_ptl
ptr
if (local_data_pt == MPIDI_nem_ptl_get_pt) {        *target_data_pt = vc_ptl->ptg;        *target_control_pt = PTL_PT_ANY;    }    else if (local_data_pt == MPIDI_nem_ptl_control_pt) {        *target_data_pt = vc_ptl->ptc;        *target_control_pt = PTL_PT_ANY;    }
local_data_pt == MPIDI_nem_ptl_get_pt
local_data_pt
local_data_pt
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
{        *target_data_pt = vc_ptl->ptg;        *target_control_pt = PTL_PT_ANY;    }
*target_data_pt = vc_ptl->ptg;
*target_data_pt = vc_ptl->ptg
*target_data_pt
target_data_pt
target_data_pt
vc_ptl->ptg
vc_ptl
vc_ptl
ptg
*target_control_pt = PTL_PT_ANY;
*target_control_pt = PTL_PT_ANY
*target_control_pt
target_control_pt
target_control_pt
PTL_PT_ANY
PTL_PT_ANY
if (local_data_pt == MPIDI_nem_ptl_control_pt) {        *target_data_pt = vc_ptl->ptc;        *target_control_pt = PTL_PT_ANY;    }
local_data_pt == MPIDI_nem_ptl_control_pt
local_data_pt
local_data_pt
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
{        *target_data_pt = vc_ptl->ptc;        *target_control_pt = PTL_PT_ANY;    }
*target_data_pt = vc_ptl->ptc;
*target_data_pt = vc_ptl->ptc
*target_data_pt
target_data_pt
target_data_pt
vc_ptl->ptc
vc_ptl
vc_ptl
ptc
*target_control_pt = PTL_PT_ANY;
*target_control_pt = PTL_PT_ANY
*target_control_pt
target_control_pt
target_control_pt
PTL_PT_ANY
PTL_PT_ANY
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO);
MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_MPID_NEM_GET_TARGET_INFO
MPID_STATE_MPID_NEM_GET_TARGET_INFO
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(96,60,0)
(42,78,0)
(77,13,0)
(15,56,0)
(32,57,0)
(110,16,0)
(95,106,0)
(96,104,0)
(9,76,0)
(59,108,0)
(103,38,0)
(41,99,0)
(111,100,0)
(53,38,0)
(20,103,0)
(78,42,0)
(7,76,0)
(42,44,0)
(104,56,0)
(12,38,0)
(17,69,0)
(86,38,0)
(48,47,0)
(2,44,0)
(109,55,0)
(56,38,0)
(64,99,0)
(29,4,0)
(85,41,0)
(80,66,0)
(35,56,0)
(83,15,0)
(78,87,0)
(69,90,0)
(73,25,0)
(97,15,0)
(84,43,0)
(105,25,0)
(70,44,0)
(57,44,0)
(1,43,0)
(99,64,0)
(68,65,0)
(18,90,0)
(36,38,0)
(65,68,0)
(93,43,0)
(43,1,0)
(94,109,0)
(105,76,0)
(110,26,0)
(87,78,0)
(87,44,0)
(33,107,0)
(81,14,0)
(11,57,0)
(66,108,0)
(34,2,0)
(81,97,0)
(90,27,0)
(106,77,0)
(28,35,0)
(76,49,0)
(50,49,0)
(106,56,0)
(110,47,0)
(6,38,0)
(66,79,0)
(51,38,0)
(88,105,0)
(56,107,0)
(72,16,0)
(67,15,0)
(91,41,0)
(75,25,0)
(19,14,0)
(15,97,0)
(23,81,0)
(100,96,0)
(99,78,0)
(89,79,0)
(79,60,0)
(105,38,0)
(22,19,0)
(24,59,0)
(39,38,0)
(62,7,0)
(3,104,0)
(21,110,0)
(98,104,0)
(82,16,0)
(78,99,0)
(107,56,0)
(63,65,0)
(76,4,0)
(69,108,0)
(47,110,0)
(99,41,0)
(1,13,0)
(77,106,0)
(102,2,0)
(31,42,0)
(52,106,0)
(45,65,0)
(49,76,0)
(35,58,0)
(109,68,0)
(5,56,0)
(100,14,0)
(8,87,0)
(10,105,0)
(58,35,0)
(37,42,0)
(104,96,0)
(64,38,0)
(40,87,0)
(19,77,0)
(30,70,0)
(46,38,0)
(74,38,0)
(16,110,0)
(61,70,0)
(65,56,0)
(92,12,0)
(43,56,0)
(59,1,0)
(41,44,0)
(97,27,0)
(68,38,0)
(54,6,0)
(25,38,0)
(110,38,0)
(101,38,0)
(0,35,0)
(94,58,1)
(31,41,1)
(76,49,1)
(1,43,1)
(70,30,1)
(78,87,1)
(106,56,1)
(88,105,1)
(83,67,1)
(23,70,1)
(2,34,1)
(92,6,1)
(45,109,1)
(100,111,1)
(81,14,1)
(41,44,1)
(15,83,1)
(11,32,1)
(69,108,1)
(50,9,1)
(35,28,1)
(28,0,1)
(93,84,1)
(100,14,1)
(104,98,1)
(102,64,1)
(99,78,1)
(20,51,1)
(58,35,1)
(103,20,1)
(94,71,1)
(65,56,1)
(35,56,1)
(25,73,1)
(82,72,1)
(56,107,1)
(47,48,1)
(33,5,1)
(0,56,1)
(64,99,1)
(110,26,1)
(12,92,1)
(17,97,1)
(20,79,1)
(22,2,1)
(98,3,1)
(80,96,1)
(32,2,1)
(71,76,1)
(110,47,1)
(81,23,1)
(6,54,1)
(90,18,1)
(21,16,1)
(91,85,1)
(3,100,1)
(66,80,1)
(8,40,1)
(20,90,1)
(2,44,1)
(57,11,1)
(70,44,1)
(95,19,1)
(63,45,1)
(89,66,1)
(9,58,1)
(48,21,1)
(54,25,1)
(73,75,1)
(105,25,1)
(97,15,1)
(96,104,1)
(43,56,1)
(66,108,1)
(34,102,1)
(65,63,1)
(107,33,1)
(109,94,1)
(30,61,1)
(109,55,1)
(20,70,1)
(72,12,1)
(59,108,1)
(62,71,1)
(24,77,1)
(37,31,1)
(16,82,1)
(110,16,1)
(15,56,1)
(99,41,1)
(77,106,1)
(5,110,1)
(42,44,1)
(7,62,1)
(42,37,1)
(18,69,1)
(104,56,1)
(49,50,1)
(41,91,1)
(59,24,1)
(111,57,1)
(43,93,1)
(106,52,1)
(85,68,1)
(68,65,1)
(7,76,1)
(52,95,1)
(94,7,1)
(105,76,1)
(19,14,1)
(84,59,1)
(69,17,1)
(57,44,1)
(78,42,1)
(10,103,1)
(67,81,1)
(79,89,1)
(87,8,1)
(105,10,1)
(61,57,1)
(20,1,1)
(87,44,1)
(40,42,1)
(19,22,1)
(70,57,2)
(81,70,2)
(81,14,2)
(110,16,2)
(71,58,2)
(106,2,2)
(1,43,2)
(43,56,2)
(50,58,2)
(78,87,2)
(57,2,2)
(42,44,2)
(97,70,2)
(77,2,2)
(66,108,2)
(90,70,2)
(66,57,2)
(99,78,2)
(9,58,2)
(100,57,2)
(87,42,2)
(30,57,2)
(93,2,2)
(52,2,2)
(31,41,2)
(69,70,2)
(110,47,2)
(49,58,2)
(84,2,2)
(95,2,2)
(109,55,2)
(62,71,2)
(15,56,2)
(24,2,2)
(96,57,2)
(19,14,2)
(106,56,2)
(23,70,2)
(111,57,2)
(40,42,2)
(11,2,2)
(56,107,2)
(57,44,2)
(105,76,2)
(32,2,2)
(2,44,2)
(76,49,2)
(104,57,2)
(35,56,2)
(22,2,2)
(42,41,2)
(105,25,2)
(19,2,2)
(98,57,2)
(99,41,2)
(88,105,2)
(96,104,2)
(68,65,2)
(77,106,2)
(100,14,2)
(58,35,2)
(18,70,2)
(80,57,2)
(67,70,2)
(1,2,2)
(37,41,2)
(65,56,2)
(69,108,2)
(7,76,2)
(7,71,2)
(70,44,2)
(83,70,2)
(59,2,2)
(89,57,2)
(79,57,2)
(59,108,2)
(8,42,2)
(64,99,2)
(78,42,2)
(43,2,2)
(15,70,2)
(76,58,2)
(97,15,2)
(78,41,2)
(17,70,2)
(3,57,2)
(41,44,2)
(61,57,2)
(110,26,2)
(87,44,2)
(104,56,2)
-----------------------------------
(0,vc_ptl)
(1,*target_control_pt = vc_ptl->ptr)
(2,local_data_pt == MPIDI_nem_ptl_pt)
(3,vc_ptl)
(4,)
(5,vc_ptl)
(6,MPIDI_STATE_DECL(MPID_STATE_MPID_NEM_GET_TARGET_INFO)
(7,MPIU_ERR_POP(mpi_errno)
(8,MPIDI_nem_ptl_control_pt)
(9,mpi_errno)
(10,mpi_errno)
(11,MPIDI_nem_ptl_get_pt)
(12,MPIDI_FUNC_ENTER(MPID_STATE_MPID_NEM_GET_TARGET_INFO)
(13,)
(14,ptl_pt_index_t *target_data_pt)
(15,vc_ptl->ptc)
(16,MPIDI_Process.my_pg)
(17,target_control_pt)
(18,PTL_PT_ANY)
(19,*target_data_pt)
(20,MPID_STATE_MPID_NEM_GET_TARGET_INFO)
(21,rank)
(22,target_data_pt)
(23,target_data_pt)
(24,target_control_pt)
(25,mpi_errno = MPI_SUCCESS)
(26,int rank)
(27,)
(28,id_initialized)
(29,if (mpi_errno)
(30,MPIDI_nem_ptl_control_pt)
(31,local_data_pt)
(32,local_data_pt)
(33,vc)
(34,MPIDI_nem_ptl_pt)
(35,vc_ptl->id_initialized)
(36,vc)
(37,MPIDI_nem_ptl_get_pt)
(38,)
(39,if (local_data_pt == MPIDI_nem_ptl_pt)
(40,local_data_pt)
(41,local_data_pt == MPIDI_nem_ptl_pt)
(42,local_data_pt == MPIDI_nem_ptl_get_pt)
(43,vc_ptl->ptr)
(44,ptl_pt_index_t local_data_pt)
(45,vc_ptl)
(46,mpi_errno)
(47,&vc)
(48,vc)
(49,MPID_nem_ptl_init_id(vc)
(50,vc)
(51,goto fn_exit;)
(52,pt)
(53,fn_exit:)
(54,MPID_STATE_MPID_NEM_GET_TARGET_INFO)
(55,ptl_process_t *id)
(56,vc_ptl = VC_PTL(vc)
(57,local_data_pt == MPIDI_nem_ptl_get_pt)
(58,!vc_ptl->id_initialized)
(59,*target_control_pt)
(60,)
(61,local_data_pt)
(62,mpi_errno)
(63,id)
(64,MPIU_Assert(local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||\n\\n                local_data_pt == MPIDI_nem_ptl_control_pt)
(65,vc_ptl->id)
(66,*target_control_pt)
(67,vc_ptl)
(68,*id = vc_ptl->id)
(69,*target_control_pt)
(70,local_data_pt == MPIDI_nem_ptl_control_pt)
(71,mpi_errno)
(72,MPIDI_Process)
(73,MPI_SUCCESS)
(74,vc_ptl)
(75,mpi_errno)
(76,mpi_errno = MPID_nem_ptl_init_id(vc)
(77,*target_data_pt = vc_ptl->pt)
(78,local_data_pt == MPIDI_nem_ptl_get_pt ||\n\\n                local_data_pt == MPIDI_nem_ptl_control_pt)
(79,*target_control_pt = PTL_PT_ANY)
(80,target_control_pt)
(81,*target_data_pt)
(82,my_pg)
(83,ptc)
(84,vc_ptl)
(85,local_data_pt)
(86,if (!vc_ptl->id_initialized)
(87,local_data_pt == MPIDI_nem_ptl_control_pt)
(88,RET)
(89,PTL_PT_ANY)
(90,*target_control_pt = PTL_PT_ANY)
(91,MPIDI_nem_ptl_pt)
(92,MPID_STATE_MPID_NEM_GET_TARGET_INFO)
(93,ptr)
(94,id)
(95,vc_ptl)
(96,*target_data_pt = vc_ptl->ptg)
(97,*target_data_pt = vc_ptl->ptc)
(98,ptg)
(99,local_data_pt == MPIDI_nem_ptl_pt || local_data_pt == MPIDI_nem_ptl_get_pt ||\n\\n                local_data_pt == MPIDI_nem_ptl_control_pt)
(100,*target_data_pt)
(101,fn_fail:)
(102,local_data_pt)
(103,MPIDI_FUNC_EXIT(MPID_STATE_MPID_NEM_GET_TARGET_INFO)
(104,vc_ptl->ptg)
(105,return mpi_errno;)
(106,vc_ptl->pt)
(107,VC_PTL(vc)
(108,ptl_pt_index_t *target_control_pt)
(109,*id)
(110,MPIDI_PG_Get_vc(MPIDI_Process.my_pg, rank, &vc)
(111,target_data_pt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^