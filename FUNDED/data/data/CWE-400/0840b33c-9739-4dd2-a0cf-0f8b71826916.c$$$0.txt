-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    data = NULL;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
27,30
28,29
29,30
29,31
30,31
32,33
32,34
33,34
33,35
35,36
37,38
37,39
38,39
40,41
40,42
42,43
43,44
43,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
62,63
-----nextToken-----
2,4,8,10,11,15,17,20,25,26,31,34,36,39,41,44,45,49,51,52,56,58,61,63
-----computeFrom-----
13,14
13,15
29,30
29,31
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,12,0)
(4,16,0)
(20,6,0)
(14,1,0)
(13,19,0)
(14,18,0)
(1,17,0)
(23,16,0)
(3,20,0)
(10,14,0)
(6,5,0)
(1,18,0)
(5,6,0)
(9,16,0)
(21,6,0)
(0,16,0)
(12,17,0)
(17,5,0)
(5,17,0)
(17,1,0)
(24,23,0)
(7,1,0)
(8,13,0)
(2,23,0)
(6,20,0)
(15,23,1)
(13,8,1)
(2,24,1)
(17,12,1)
(6,20,1)
(1,17,1)
(14,1,1)
(8,15,1)
(5,6,1)
(20,3,1)
(11,22,1)
(14,10,1)
(7,15,1)
(3,21,1)
(22,13,1)
(22,14,1)
(21,7,1)
(17,5,1)
(23,2,1)
(10,1,1)
(5,15,2)
(20,15,2)
(14,15,2)
(7,15,2)
(13,15,2)
(17,12,2)
(21,15,2)
(14,1,2)
(5,6,2)
(17,15,2)
(8,15,2)
(1,15,2)
(1,17,2)
(10,15,2)
(6,15,2)
(3,15,2)
(17,5,2)
(6,20,2)
-----------------------------------
(0,if(staticTrue)
(1,data = (wchar_t *)
(2,NULL)
(3,wchar_t)
(4,if(staticFalse)
(5,ALLOCA(100*sizeof(wchar_t)
(6,100*sizeof(wchar_t)
(7,data)
(8,"Benign, fixed string")
(9,data)
(10,data)
(11,RET)
(12,wchar_t *)
(13,printLine("Benign, fixed string")
(14,printWLine(data)
(15,staticFalse)
(16,)
(17,(wchar_t *)
(18,)
(19,)
(20,sizeof(wchar_t)
(21,100)
(22,staticTrue)
(23,data = NULL)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^