-----label-----
0
-----code-----
static void good1()
{
    if(GLOBAL_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
            if (data == NULL) {exit(-1);}
            int64_t * tmpData;
            /* Initialize and make use of data */
            data[0] = 5LL;
            printLongLongLine(data[0]);
            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10LL;
                printLongLongLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
7,9
8,9
11,12
12,13
13,14
13,15
14,15
17,18
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
65,66
65,67
66,67
70,71
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
91,92
93,94
93,95
94,95
96,97
97,98
97,99
98,99
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
107,110
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
116,118
117,118
121,122
122,123
122,124
123,124
125,126
125,127
126,127
129,130
130,131
130,132
131,132
133,134
-----nextToken-----
2,4,9,10,15,16,22,24,25,30,32,35,37,41,42,46,48,53,55,59,61,62,67,68,69,73,76,77,81,85,87,90,92,95,99,100,104,106,111,113,118,119,120,124,127,128,132,134
-----computeFrom-----
7,8
7,9
36,37
36,38
44,45
44,46
64,65
64,66
79,80
79,81
93,94
93,95
102,103
102,104
109,110
109,111
115,116
115,117
-----guardedBy-----
104,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }}
if(GLOBAL_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }
GLOBAL_CONST_FIVE!=5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }
{            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t
int64_t
* data = (int64_t *)malloc(100*sizeof(int64_t))
*
data
= (int64_t *)malloc(100*sizeof(int64_t))
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int64_t * tmpData;
int64_t * tmpData;
int64_t
int64_t
* tmpData
*
tmpData
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t))
tmpData
tmpData
(int64_t *)realloc(data, (130000)*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, (130000)*sizeof(int64_t))
realloc
realloc
data
data
(130000)*sizeof(int64_t)
(130000)
130000
sizeof(int64_t)
int64_t
int64_t
int64_t

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10LL;
data[0] = 10LL
data[0]
data
data
0
10LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(16,56,0)
(25,12,0)
(6,27,0)
(8,26,0)
(24,0,0)
(46,31,0)
(28,33,0)
(15,36,0)
(24,4,0)
(29,33,0)
(17,38,0)
(33,5,0)
(27,6,0)
(9,57,0)
(45,36,0)
(14,27,0)
(11,23,0)
(39,0,0)
(49,26,0)
(7,22,0)
(57,33,0)
(4,58,0)
(38,17,0)
(12,58,0)
(57,58,0)
(41,33,0)
(10,6,0)
(56,4,0)
(56,16,0)
(38,3,0)
(0,24,0)
(58,33,0)
(32,21,0)
(38,58,0)
(20,31,0)
(42,36,0)
(52,12,0)
(30,58,0)
(44,56,0)
(42,7,0)
(3,38,0)
(58,38,0)
(35,54,0)
(7,42,0)
(34,47,0)
(51,42,0)
(8,43,0)
(3,6,0)
(31,58,0)
(6,3,0)
(4,56,0)
(37,22,0)
(31,20,0)
(19,33,0)
(20,33,0)
(4,24,0)
(53,31,0)
(36,16,0)
(47,16,0)
(36,22,0)
(59,47,0)
(18,24,0)
(50,33,0)
(2,16,0)
(55,23,0)
(1,42,0)
(26,8,0)
(16,33,0)
(54,40,0)
(56,44,0)
(13,4,0)
(57,36,0)
(47,16,1)
(34,59,1)
(4,58,1)
(6,27,1)
(41,8,1)
(26,49,1)
(59,16,1)
(49,12,1)
(16,56,1)
(38,3,1)
(48,54,1)
(36,15,1)
(3,6,1)
(12,25,1)
(25,52,1)
(14,10,1)
(51,37,1)
(42,36,1)
(27,14,1)
(53,41,1)
(41,12,1)
(55,11,1)
(37,36,1)
(23,55,1)
(56,4,1)
(31,46,1)
(38,17,1)
(2,20,1)
(4,24,1)
(42,1,1)
(39,18,1)
(57,36,1)
(13,2,1)
(45,47,1)
(9,7,1)
(10,30,1)
(57,58,1)
(15,45,1)
(0,39,1)
(24,0,1)
(36,16,1)
(48,57,1)
(58,38,1)
(18,13,1)
(8,26,1)
(35,23,1)
(7,42,1)
(31,58,1)
(30,23,1)
(57,9,1)
(46,53,1)
(20,31,1)
(12,58,1)
(54,35,1)
(9,47,1)
(1,51,1)
(52,58,1)
(56,44,1)
(47,34,1)
(42,36,2)
(38,23,2)
(51,47,2)
(38,17,2)
(7,42,2)
(15,47,2)
(49,12,2)
(1,47,2)
(13,23,2)
(36,47,2)
(2,23,2)
(25,23,2)
(20,31,2)
(34,23,2)
(9,23,2)
(3,6,2)
(14,23,2)
(57,36,2)
(4,23,2)
(0,23,2)
(38,3,2)
(52,23,2)
(18,23,2)
(31,58,2)
(8,26,2)
(54,23,2)
(6,27,2)
(6,23,2)
(35,23,2)
(31,23,2)
(27,23,2)
(12,23,2)
(59,23,2)
(36,16,2)
(41,23,2)
(46,23,2)
(30,23,2)
(3,23,2)
(58,38,2)
(12,58,2)
(4,58,2)
(4,24,2)
(57,23,2)
(57,58,2)
(47,23,2)
(16,23,2)
(24,0,2)
(16,56,2)
(45,47,2)
(56,4,2)
(56,44,2)
(53,23,2)
(26,12,2)
(24,23,2)
(37,47,2)
(47,16,2)
(58,23,2)
(39,23,2)
(7,47,2)
(8,12,2)
(10,23,2)
(42,47,2)
(20,23,2)
(56,23,2)
-----------------------------------
(0,sizeof(int64_t)
(1,0)
(2,tmpData)
(3,malloc(100*sizeof(int64_t)
(4,realloc(data, (130000)
(5,)
(6,100*sizeof(int64_t)
(7,printLongLongLine(data[0])
(8,exit(-1)
(9,data)
(10,100)
(11,GLOBAL_CONST_FIVE)
(12,data == NULL)
(13,data)
(14,int64_t)
(15,tmpData)
(16,tmpData = (int64_t *)
(17,int64_t *)
(18,130000)
(19,if (data == NULL)
(20,printLongLongLine(data[0])
(21,)
(22,)
(23,GLOBAL_CONST_FIVE!=5)
(24,(130000)
(25,NULL)
(26,-1)
(27,sizeof(int64_t)
(28,data)
(29,if (tmpData != NULL)
(30,data)
(31,data[0])
(32,if(GLOBAL_CONST_FIVE!=5)
(33,)
(34,NULL)
(35,"Benign, fixed string")
(36,data = tmpData)
(37,L)
(38,(int64_t *)
(39,int64_t)
(40,)
(41,L)
(42,data[0])
(43,)
(44,int64_t *)
(45,data)
(46,0)
(47,tmpData != NULL)
(48,RET)
(49,1)
(50,tmpData)
(51,data)
(52,data)
(53,data)
(54,printLine("Benign, fixed string")
(55,5)
(56,(int64_t *)
(57,free(data)
(58,* data = (int64_t *)
(59,tmpData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^