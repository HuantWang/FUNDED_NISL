-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_02_bad()
{
    if(1)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
45,48
46,47
48,49
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
66,69
67,68
69,70
71,72
71,73
72,73
74,75
75,76
75,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
84,87
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,47,49,50,54,56,60,63,65,68,70,73,76,77,81,83,88,90,91,95,97,101,103
-----computeFrom-----
25,26
25,27
32,33
32,34
58,59
58,60
71,72
71,73
79,80
79,81
-----guardedBy-----
81,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_02_bad(){    if(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_02_bad()
CWE401_Memory_Leak__malloc_realloc_char_02_bad
{    if(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
1
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(41,45,0)
(22,19,0)
(43,18,0)
(20,30,0)
(23,50,0)
(17,30,0)
(38,1,0)
(10,2,0)
(33,12,0)
(14,33,0)
(24,13,0)
(45,15,0)
(8,7,0)
(42,15,0)
(18,15,0)
(9,40,0)
(39,42,0)
(38,13,0)
(25,23,0)
(31,50,0)
(29,25,0)
(1,38,0)
(5,50,0)
(40,12,0)
(12,33,0)
(28,37,0)
(46,12,0)
(37,7,0)
(21,5,0)
(5,23,0)
(11,48,0)
(10,49,0)
(47,5,0)
(42,7,0)
(4,14,0)
(50,3,0)
(7,50,0)
(36,50,0)
(0,24,0)
(48,24,0)
(13,23,0)
(33,14,0)
(32,23,0)
(18,7,0)
(13,38,0)
(12,40,0)
(30,23,0)
(27,50,0)
(23,14,0)
(13,24,0)
(14,4,0)
(34,13,0)
(14,23,0)
(6,37,0)
(44,49,0)
(24,48,0)
(26,42,0)
(38,7,0)
(49,10,0)
(25,50,0)
(45,7,0)
(7,38,0)
(44,30,1)
(17,20,1)
(30,23,1)
(46,32,1)
(25,23,1)
(42,26,1)
(12,40,1)
(35,45,1)
(39,37,1)
(23,14,1)
(14,33,1)
(0,34,1)
(34,8,1)
(37,7,1)
(35,37,1)
(9,46,1)
(28,7,1)
(18,43,1)
(38,13,1)
(11,0,1)
(29,5,1)
(41,18,1)
(47,10,1)
(20,23,1)
(48,11,1)
(40,9,1)
(49,44,1)
(5,23,1)
(5,21,1)
(35,16,1)
(45,41,1)
(24,48,1)
(33,12,1)
(47,30,1)
(6,28,1)
(32,16,1)
(37,6,1)
(42,7,1)
(30,17,1)
(26,39,1)
(10,49,1)
(13,23,1)
(38,1,1)
(43,42,1)
(13,24,1)
(7,38,1)
(21,47,1)
(45,7,1)
(25,29,1)
(14,4,1)
(8,25,1)
(18,7,1)
(43,37,2)
(13,24,2)
(29,16,2)
(26,37,2)
(18,37,2)
(8,16,2)
(32,16,2)
(5,23,2)
(30,23,2)
(49,30,2)
(38,16,2)
(23,14,2)
(37,16,2)
(14,16,2)
(24,48,2)
(17,16,2)
(42,37,2)
(24,16,2)
(28,16,2)
(20,16,2)
(14,4,2)
(42,7,2)
(13,16,2)
(48,16,2)
(6,16,2)
(34,16,2)
(37,7,2)
(30,16,2)
(33,16,2)
(18,7,2)
(5,16,2)
(47,16,2)
(12,40,2)
(21,16,2)
(25,23,2)
(13,23,2)
(38,1,2)
(44,30,2)
(12,16,2)
(10,49,2)
(25,16,2)
(9,16,2)
(45,7,2)
(45,37,2)
(14,33,2)
(39,37,2)
(40,16,2)
(23,16,2)
(11,16,2)
(7,38,2)
(33,12,2)
(0,16,2)
(7,16,2)
(38,13,2)
(46,16,2)
(41,37,2)
(10,30,2)
-----------------------------------
(0,130000)
(1,char *)
(2,)
(3,)
(4,char *)
(5,strcpy(data, "A String")
(6,NULL)
(7,data = (char *)
(8,data)
(9,char)
(10,exit(-1)
(11,char)
(12,100*sizeof(char)
(13,realloc(data, (130000)
(14,(char *)
(15,)
(16,1)
(17,NULL)
(18,printLine(data)
(19,)
(20,data)
(21,"A String")
(22,if(1)
(23,* data = (char *)
(24,(130000)
(25,printLine(data)
(26,"New String")
(27,if (data != NULL)
(28,data)
(29,data)
(30,data == NULL)
(31,if (data == NULL)
(32,data)
(33,malloc(100*sizeof(char)
(34,data)
(35,RET)
(36,data)
(37,data != NULL)
(38,(char *)
(39,data)
(40,sizeof(char)
(41,data)
(42,strcpy(data, "New String")
(43,data)
(44,1)
(45,free(data)
(46,100)
(47,data)
(48,sizeof(char)
(49,-1)
(50,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^