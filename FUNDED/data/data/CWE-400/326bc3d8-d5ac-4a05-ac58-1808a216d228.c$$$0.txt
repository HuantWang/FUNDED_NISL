-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_14_bad()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_14_bad(){    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_14_bad()
CWE401_Memory_Leak__int_realloc_14_bad
{    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(26,3,0)
(2,18,0)
(40,18,0)
(31,18,0)
(30,23,0)
(0,10,0)
(14,34,0)
(34,10,0)
(13,10,0)
(6,29,0)
(28,22,0)
(23,0,0)
(25,14,0)
(36,31,0)
(11,34,0)
(1,11,0)
(11,13,0)
(39,26,0)
(9,22,0)
(3,31,0)
(33,11,0)
(27,8,0)
(7,16,0)
(26,34,0)
(3,38,0)
(26,39,0)
(38,16,0)
(12,34,0)
(16,38,0)
(20,23,0)
(34,26,0)
(0,23,0)
(6,35,0)
(19,14,0)
(3,26,0)
(23,34,0)
(37,38,0)
(21,8,0)
(23,13,0)
(17,35,0)
(15,31,0)
(24,3,0)
(4,18,0)
(35,6,0)
(41,13,0)
(5,10,0)
(38,3,0)
(3,31,1)
(9,8,1)
(31,15,1)
(11,33,1)
(11,34,1)
(6,35,1)
(21,27,1)
(23,13,1)
(22,28,1)
(15,36,1)
(30,13,1)
(33,1,1)
(14,25,1)
(32,22,1)
(16,7,1)
(27,31,1)
(26,39,1)
(38,16,1)
(1,14,1)
(13,41,1)
(20,30,1)
(1,6,1)
(24,12,1)
(17,14,1)
(7,37,1)
(8,21,1)
(9,0,1)
(14,34,1)
(25,19,1)
(28,9,1)
(35,17,1)
(3,38,1)
(12,8,1)
(23,20,1)
(37,24,1)
(23,34,1)
(26,3,1)
(34,26,1)
(41,11,1)
(19,34,1)
(0,23,1)
(7,8,2)
(1,8,2)
(3,38,2)
(26,39,2)
(23,8,2)
(12,8,2)
(3,8,2)
(26,8,2)
(3,31,2)
(0,23,2)
(13,8,2)
(41,8,2)
(38,8,2)
(30,8,2)
(25,8,2)
(34,26,2)
(23,13,2)
(17,14,2)
(35,14,2)
(33,8,2)
(23,34,2)
(38,16,2)
(0,8,2)
(34,8,2)
(6,14,2)
(6,35,2)
(24,8,2)
(37,8,2)
(11,34,2)
(26,3,2)
(20,8,2)
(19,8,2)
(14,34,2)
(16,8,2)
(14,8,2)
(11,8,2)
-----------------------------------
(0,printIntLine(data[0])
(1,data)
(2,if(globalFive==5)
(3,realloc(data, 100*sizeof(int)
(4,if(globalFive==5)
(5,if (data == NULL)
(6,exit(-1)
(7,int)
(8,globalFive==5)
(9,globalFive)
(10,)
(11,data[0])
(12,data)
(13,data[0] = 5)
(14,data == NULL)
(15,NULL)
(16,sizeof(int)
(17,1)
(18,)
(19,data)
(20,0)
(21,5)
(22,globalFive==5)
(23,data[0])
(24,data)
(25,NULL)
(26,(int *)
(27,globalFive)
(28,5)
(29,)
(30,data)
(31,data = NULL)
(32,RET)
(33,0)
(34,data = (int *)
(35,-1)
(36,data)
(37,100)
(38,100*sizeof(int)
(39,int *)
(40,data)
(41,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^