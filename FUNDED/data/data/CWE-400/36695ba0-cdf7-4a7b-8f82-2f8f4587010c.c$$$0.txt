-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_15_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
51,52
51,53
51,54
51,55
52,53
53,54
53,55
54,55
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
65,66
67,68
68,69
70,71
71,72
72,73
72,74
73,74
78,79
79,80
79,81
80,81
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,38,41,46,48,50,55,56,59,63,64,66,69,74,75,76,77,81,82,83
-----computeFrom-----
12,13
12,14
23,24
23,25
53,54
53,55
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_15_bad(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_15_bad()
CWE400_Resource_Exhaustion__rand_for_loop_15_bad
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(21,1,0)
(11,17,0)
(40,17,0)
(32,36,0)
(19,20,0)
(29,44,0)
(41,9,0)
(26,20,0)
(2,0,0)
(7,20,0)
(35,37,0)
(8,7,0)
(36,25,0)
(43,6,0)
(16,17,0)
(46,37,0)
(36,37,0)
(13,44,0)
(20,17,0)
(23,44,0)
(0,15,0)
(33,41,0)
(39,12,0)
(6,37,0)
(5,37,0)
(25,36,0)
(18,30,0)
(27,7,0)
(34,37,0)
(9,41,0)
(12,30,0)
(24,31,0)
(14,21,0)
(28,9,0)
(45,14,0)
(31,17,0)
(4,21,0)
(41,44,0)
(1,21,0)
(14,30,0)
(21,36,0)
(21,14,0)
(10,30,0)
(21,41,0)
(22,17,0)
(21,4,1)
(31,24,1)
(12,39,1)
(18,10,1)
(6,43,1)
(21,41,1)
(32,38,1)
(21,36,1)
(9,28,1)
(28,33,1)
(40,14,1)
(14,21,1)
(3,34,1)
(5,6,1)
(7,8,1)
(30,18,1)
(25,32,1)
(2,14,1)
(45,30,1)
(4,45,1)
(27,3,1)
(41,9,1)
(12,30,1)
(22,31,1)
(38,41,1)
(42,40,1)
(36,25,1)
(8,27,1)
(39,0,1)
(0,2,1)
(24,3,1)
(10,7,1)
(34,36,1)
(14,30,1)
(43,38,1)
(21,1,1)
(3,5,1)
(45,12,1)
(42,22,1)
(45,3,2)
(34,38,2)
(21,36,2)
(39,14,2)
(4,3,2)
(45,14,2)
(14,14,2)
(2,14,2)
(21,3,2)
(6,38,2)
(4,14,2)
(31,3,2)
(22,3,2)
(25,38,2)
(43,38,2)
(5,38,2)
(40,3,2)
(36,38,2)
(24,3,2)
(36,25,2)
(21,1,2)
(8,3,2)
(21,14,2)
(32,38,2)
(27,3,2)
(14,30,2)
(12,30,2)
(7,3,2)
(10,3,2)
(14,21,2)
(30,3,2)
(0,14,2)
(18,3,2)
(41,9,2)
(12,14,2)
(21,41,2)
(14,3,2)
-----------------------------------
(0,printLine("Hello")
(1,size_t)
(2,"Hello")
(3,7)
(4,count)
(5,break;)
(6,printLine("Benign, fixed string")
(7,i = 0)
(8,0)
(9,-1)
(10,i)
(11,default:)
(12,i++)
(13,switch(6)
(14,i < (size_t)
(15,)
(16,case 7:)
(17,)
(18,0)
(19,for (i = 0; i < (size_t)
(20,)
(21,(size_t)
(22,break;)
(23,switch(7)
(24,"Benign, fixed string")
(25,RAND32()
(26,i)
(27,i)
(28,1)
(29,count)
(30,i = 0)
(31,printLine("Benign, fixed string")
(32,count)
(33,count)
(34,break;)
(35,case 6:)
(36,count = RAND32()
(37,)
(38,6)
(39,i)
(40,break;)
(41,count = -1)
(42,RET)
(43,"Benign, fixed string")
(44,)
(45,i)
(46,default:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^