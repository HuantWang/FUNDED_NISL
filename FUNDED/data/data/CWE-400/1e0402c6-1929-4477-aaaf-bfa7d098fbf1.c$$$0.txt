-----label-----
1
-----code-----
void
winimg_lazyinit(imglist *img)
{
  if (img->hdc)
    return;

  HDC dc = GetDC(wnd);
  if (!dc)
    return;

  if (!cdc)
    return;
  cdc--;

  img->hdc = CreateCompatibleDC(dc);
  if (img->hdc) {
    BITMAPINFO bmpinfo;
    unsigned char *pixels;

    bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
    bmpinfo.bmiHeader.biWidth = img->pixelwidth;
    bmpinfo.bmiHeader.biHeight = - img->pixelheight;
    bmpinfo.bmiHeader.biPlanes = 1;
    bmpinfo.bmiHeader.biBitCount = 32;
    bmpinfo.bmiHeader.biCompression = BI_RGB;
    bmpinfo.bmiHeader.biSizeImage = 0;
    img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);
    if (img->hbmp) {
      /*HGDIOBJ res =*/
      SelectObject(img->hdc, img->hbmp);
      size_t size = img->pixelwidth * img->pixelheight * 4;
      if (img->pixels) {
        CopyMemory(pixels, img->pixels, size);
        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);
        free(img->pixels);
      } else {
        // resume from hibernation
        assert(img->strage);
        strage_read(img->strage, pixels, size);
      }
      img->pixels = pixels;
    }
  }

  ReleaseDC(wnd, dc);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
12,14
13,14
13,15
14,15
18,19
19,20
19,21
20,21
22,23
22,24
24,25
25,26
25,27
26,27
28,29
30,31
30,32
31,32
32,33
35,36
35,37
36,37
37,38
40,41
41,42
42,43
44,45
45,46
45,47
46,47
46,48
47,48
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
60,66
60,67
60,68
60,69
60,70
60,71
61,62
62,63
62,64
63,64
65,66
67,68
68,69
68,70
70,71
70,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
89,91
90,91
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
106,107
107,108
107,109
108,109
111,112
112,113
112,114
113,114
113,115
114,115
114,116
115,116
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
137,138
139,140
140,141
140,142
141,142
141,143
142,143
142,144
143,144
148,149
149,150
149,151
150,151
150,152
151,152
154,155
154,156
154,157
154,158
154,159
154,160
154,161
155,156
157,158
159,160
160,161
162,163
164,165
164,166
165,166
165,167
167,168
169,170
170,171
172,173
175,176
175,177
176,177
176,178
177,178
180,181
180,182
180,183
180,184
181,182
182,183
182,184
182,185
183,184
185,186
185,187
186,187
189,190
189,191
190,191
193,194
194,195
194,196
195,196
197,198
197,199
199,200
200,201
200,202
201,202
201,203
202,203
202,204
203,204
206,207
206,208
207,208
211,212
211,213
211,214
212,213
212,214
213,214
216,217
216,218
217,218
218,219
218,220
218,221
218,222
219,220
221,222
223,224
223,225
224,225
227,228
229,230
230,231
230,232
231,232
233,234
233,235
234,235
237,238
237,239
238,239
239,240
239,241
240,241
242,243
242,244
243,244
246,247
247,248
247,249
247,250
247,251
248,249
250,251
250,252
251,252
254,255
256,257
258,259
259,260
259,261
260,261
260,262
261,262
264,265
266,267
267,268
267,269
267,270
268,269
270,271
272,273
-----nextToken-----
2,4,7,9,10,15,16,17,21,23,27,29,33,34,38,39,43,48,49,52,54,58,59,64,66,69,71,72,78,79,80,84,85,91,92,93,96,97,103,104,105,109,110,116,117,118,119,125,126,127,128,134,135,136,138,144,145,146,147,152,153,156,158,161,163,166,168,171,173,174,178,179,184,187,188,191,192,196,198,204,205,208,209,210,214,215,220,222,225,226,228,232,235,236,241,244,245,249,252,253,255,257,262,263,265,269,271,273
-----computeFrom-----
45,46
45,47
74,75
74,76
87,88
87,89
99,100
99,101
112,113
112,114
121,122
121,123
130,131
130,132
140,141
140,142
149,150
149,151
200,201
200,202
201,202
201,203
259,260
259,261
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;ReturnStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidwinimg_lazyinit(imglist *img){  if (img->hdc)    return;  HDC dc = GetDC(wnd);  if (!dc)    return;  if (!cdc)    return;  cdc--;  img->hdc = CreateCompatibleDC(dc);  if (img->hdc) {    BITMAPINFO bmpinfo;    unsigned char *pixels;    bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);    bmpinfo.bmiHeader.biWidth = img->pixelwidth;    bmpinfo.bmiHeader.biHeight = - img->pixelheight;    bmpinfo.bmiHeader.biPlanes = 1;    bmpinfo.bmiHeader.biBitCount = 32;    bmpinfo.bmiHeader.biCompression = BI_RGB;    bmpinfo.bmiHeader.biSizeImage = 0;    img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);    if (img->hbmp) {      /*HGDIOBJ res =*/      SelectObject(img->hdc, img->hbmp);      size_t size = img->pixelwidth * img->pixelheight * 4;      if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }      img->pixels = pixels;    }  }  ReleaseDC(wnd, dc);}
void
winimg_lazyinit(imglist *img)
winimg_lazyinit
imglist *img
imglist
imglist
*img
*
img
{  if (img->hdc)    return;  HDC dc = GetDC(wnd);  if (!dc)    return;  if (!cdc)    return;  cdc--;  img->hdc = CreateCompatibleDC(dc);  if (img->hdc) {    BITMAPINFO bmpinfo;    unsigned char *pixels;    bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);    bmpinfo.bmiHeader.biWidth = img->pixelwidth;    bmpinfo.bmiHeader.biHeight = - img->pixelheight;    bmpinfo.bmiHeader.biPlanes = 1;    bmpinfo.bmiHeader.biBitCount = 32;    bmpinfo.bmiHeader.biCompression = BI_RGB;    bmpinfo.bmiHeader.biSizeImage = 0;    img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);    if (img->hbmp) {      /*HGDIOBJ res =*/      SelectObject(img->hdc, img->hbmp);      size_t size = img->pixelwidth * img->pixelheight * 4;      if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }      img->pixels = pixels;    }  }  ReleaseDC(wnd, dc);}
if (img->hdc)    return;
img->hdc
img
img
hdc
return;
HDC dc = GetDC(wnd);
HDC dc = GetDC(wnd);
HDC
HDC
dc = GetDC(wnd)
dc
= GetDC(wnd)
GetDC(wnd)
GetDC
GetDC
wnd
wnd
if (!dc)    return;
!dc
dc
dc
return;
if (!cdc)    return;
!cdc
cdc
cdc
return;
cdc--;
cdc--
cdc
cdc
img->hdc = CreateCompatibleDC(dc);
img->hdc = CreateCompatibleDC(dc)
img->hdc
img
img
hdc
CreateCompatibleDC(dc)
CreateCompatibleDC
CreateCompatibleDC
dc
dc
if (img->hdc) {    BITMAPINFO bmpinfo;    unsigned char *pixels;    bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);    bmpinfo.bmiHeader.biWidth = img->pixelwidth;    bmpinfo.bmiHeader.biHeight = - img->pixelheight;    bmpinfo.bmiHeader.biPlanes = 1;    bmpinfo.bmiHeader.biBitCount = 32;    bmpinfo.bmiHeader.biCompression = BI_RGB;    bmpinfo.bmiHeader.biSizeImage = 0;    img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);    if (img->hbmp) {      /*HGDIOBJ res =*/      SelectObject(img->hdc, img->hbmp);      size_t size = img->pixelwidth * img->pixelheight * 4;      if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }      img->pixels = pixels;    }  }
img->hdc
img
img
hdc
{    BITMAPINFO bmpinfo;    unsigned char *pixels;    bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);    bmpinfo.bmiHeader.biWidth = img->pixelwidth;    bmpinfo.bmiHeader.biHeight = - img->pixelheight;    bmpinfo.bmiHeader.biPlanes = 1;    bmpinfo.bmiHeader.biBitCount = 32;    bmpinfo.bmiHeader.biCompression = BI_RGB;    bmpinfo.bmiHeader.biSizeImage = 0;    img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);    if (img->hbmp) {      /*HGDIOBJ res =*/      SelectObject(img->hdc, img->hbmp);      size_t size = img->pixelwidth * img->pixelheight * 4;      if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }      img->pixels = pixels;    }  }
BITMAPINFO bmpinfo;
BITMAPINFO bmpinfo;
BITMAPINFO
BITMAPINFO
bmpinfo
bmpinfo
unsigned char *pixels;
unsigned char *pixels;
unsigned char
*pixels
*
pixels
bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER);
bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER)
bmpinfo.bmiHeader.biSize
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biSize
sizeof(BITMAPINFOHEADER)
BITMAPINFOHEADER
BITMAPINFOHEADER
BITMAPINFOHEADER

bmpinfo.bmiHeader.biWidth = img->pixelwidth;
bmpinfo.bmiHeader.biWidth = img->pixelwidth
bmpinfo.bmiHeader.biWidth
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biWidth
img->pixelwidth
img
img
pixelwidth
bmpinfo.bmiHeader.biHeight = - img->pixelheight;
bmpinfo.bmiHeader.biHeight = - img->pixelheight
bmpinfo.bmiHeader.biHeight
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biHeight
- img->pixelheight
img->pixelheight
img
img
pixelheight
bmpinfo.bmiHeader.biPlanes = 1;
bmpinfo.bmiHeader.biPlanes = 1
bmpinfo.bmiHeader.biPlanes
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biPlanes
1
bmpinfo.bmiHeader.biBitCount = 32;
bmpinfo.bmiHeader.biBitCount = 32
bmpinfo.bmiHeader.biBitCount
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biBitCount
32
bmpinfo.bmiHeader.biCompression = BI_RGB;
bmpinfo.bmiHeader.biCompression = BI_RGB
bmpinfo.bmiHeader.biCompression
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biCompression
BI_RGB
BI_RGB
bmpinfo.bmiHeader.biSizeImage = 0;
bmpinfo.bmiHeader.biSizeImage = 0
bmpinfo.bmiHeader.biSizeImage
bmpinfo.bmiHeader
bmpinfo
bmpinfo
bmiHeader
biSizeImage
0
img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0);
img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0)
img->hbmp
img
img
hbmp
CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)&pixels, NULL, 0)
CreateDIBSection
CreateDIBSection
dc
dc
&bmpinfo
bmpinfo
bmpinfo
DIB_RGB_COLORS
DIB_RGB_COLORS
(void*)&pixels
void*
void
*
*
&pixels
pixels
pixels
NULL
NULL
0
if (img->hbmp) {      /*HGDIOBJ res =*/      SelectObject(img->hdc, img->hbmp);      size_t size = img->pixelwidth * img->pixelheight * 4;      if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }      img->pixels = pixels;    }
img->hbmp
img
img
hbmp
{      /*HGDIOBJ res =*/      SelectObject(img->hdc, img->hbmp);      size_t size = img->pixelwidth * img->pixelheight * 4;      if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }      img->pixels = pixels;    }
SelectObject(img->hdc, img->hbmp);
SelectObject(img->hdc, img->hbmp)
SelectObject
SelectObject
img->hdc
img
img
hdc
img->hbmp
img
img
hbmp
size_t size = img->pixelwidth * img->pixelheight * 4;
size_t size = img->pixelwidth * img->pixelheight * 4;
size_t
size_t
size = img->pixelwidth * img->pixelheight * 4
size
= img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight * 4
img->pixelwidth * img->pixelheight
img->pixelwidth
img
img
pixelwidth
img->pixelheight
img
img
pixelheight
4
if (img->pixels) {        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      } else {        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }
img->pixels
img
img
pixels
{        CopyMemory(pixels, img->pixels, size);        //printf("winimg_lazyinit free pixels %p\n", img->pixels); fflush(stdout);        free(img->pixels);      }
CopyMemory(pixels, img->pixels, size);
CopyMemory(pixels, img->pixels, size)
CopyMemory
CopyMemory
pixels
pixels
img->pixels
img
img
pixels
size
size
free(img->pixels);
free(img->pixels)
free
free
img->pixels
img
img
pixels
{        // resume from hibernation        assert(img->strage);        strage_read(img->strage, pixels, size);      }
assert(img->strage);
assert(img->strage)
assert
assert
img->strage
img
img
strage
strage_read(img->strage, pixels, size);
strage_read(img->strage, pixels, size)
strage_read
strage_read
img->strage
img
img
strage
pixels
pixels
size
size
img->pixels = pixels;
img->pixels = pixels
img->pixels
img
img
pixels
pixels
pixels
ReleaseDC(wnd, dc);
ReleaseDC(wnd, dc)
ReleaseDC
ReleaseDC
wnd
wnd
dc
dc
-----joern-----
(163,54,0)
(111,26,0)
(133,59,0)
(150,95,0)
(96,43,0)
(58,56,0)
(78,144,0)
(79,39,0)
(151,131,0)
(160,4,0)
(48,104,0)
(147,49,0)
(143,24,0)
(159,39,0)
(35,24,0)
(94,70,0)
(63,104,0)
(9,163,0)
(144,95,0)
(100,8,0)
(65,17,0)
(10,23,0)
(61,17,0)
(44,4,0)
(46,9,0)
(39,17,0)
(31,55,0)
(90,68,0)
(81,111,0)
(22,42,0)
(88,54,0)
(102,153,0)
(62,42,0)
(93,13,0)
(61,5,0)
(116,130,0)
(19,68,0)
(57,96,0)
(92,78,0)
(152,144,0)
(112,42,0)
(86,13,0)
(113,128,0)
(142,149,0)
(33,65,0)
(3,54,0)
(31,59,0)
(60,6,0)
(128,17,0)
(71,156,0)
(13,17,0)
(56,58,0)
(153,102,0)
(105,95,0)
(161,42,0)
(110,98,0)
(89,62,0)
(124,56,0)
(78,17,0)
(59,31,0)
(41,124,0)
(12,143,0)
(53,11,0)
(27,85,0)
(159,140,0)
(13,86,0)
(156,7,0)
(83,38,0)
(126,94,0)
(95,56,0)
(120,4,0)
(7,84,0)
(76,38,0)
(159,55,0)
(117,54,0)
(65,53,0)
(51,130,0)
(162,94,0)
(6,17,0)
(143,152,0)
(18,39,0)
(91,49,0)
(49,17,0)
(157,68,0)
(103,95,0)
(38,17,0)
(149,22,0)
(20,85,0)
(153,98,0)
(82,6,0)
(87,22,0)
(7,156,0)
(109,53,0)
(2,12,0)
(85,17,0)
(12,17,0)
(66,14,0)
(163,9,0)
(15,159,0)
(139,54,0)
(59,17,0)
(132,53,0)
(56,95,0)
(161,128,0)
(135,12,0)
(0,42,0)
(49,10,0)
(36,153,0)
(136,86,0)
(43,42,0)
(95,150,0)
(152,17,0)
(50,142,0)
(53,65,0)
(99,89,0)
(121,123,0)
(23,42,0)
(45,142,0)
(72,51,0)
(100,97,0)
(145,156,0)
(84,42,0)
(146,159,0)
(32,158,0)
(25,102,0)
(148,150,0)
(9,158,0)
(26,111,0)
(70,11,0)
(40,152,0)
(1,130,0)
(106,54,0)
(68,19,0)
(28,5,0)
(4,17,0)
(64,149,0)
(37,24,0)
(34,61,0)
(141,7,0)
(144,42,0)
(111,23,0)
(73,54,0)
(155,61,0)
(101,127,0)
(108,152,0)
(140,44,0)
(75,139,0)
(16,59,0)
(119,140,0)
(152,143,0)
(137,43,0)
(95,158,0)
(134,84,0)
(44,86,0)
(19,62,0)
(21,19,0)
(149,142,0)
(158,127,0)
(115,125,0)
(69,128,0)
(131,17,0)
(70,94,0)
(47,78,0)
(94,17,0)
(53,140,0)
(52,95,0)
(100,80,0)
(10,49,0)
(128,161,0)
(114,65,0)
(44,140,0)
(62,89,0)
(138,131,0)
(129,32,0)
(143,12,0)
(140,24,0)
(5,24,0)
(104,17,0)
(96,125,0)
(95,144,0)
(56,124,0)
(74,13,0)
(127,158,0)
(130,51,0)
(107,26,0)
(39,159,0)
(12,163,0)
(30,42,0)
(123,158,0)
(4,44,0)
(118,26,0)
(51,161,0)
(86,44,0)
(104,163,0)
(29,102,0)
(67,125,0)
(154,158,0)
(122,95,0)
(98,42,0)
(158,54,0)
(125,96,0)
(123,54,0)
(23,10,0)
(77,123,0)
(120,119,1)
(98,110,1)
(43,137,1)
(44,4,1)
(118,107,1)
(133,16,1)
(53,140,1)
(147,111,1)
(108,40,1)
(144,95,1)
(100,8,1)
(12,163,1)
(110,153,1)
(81,26,1)
(56,124,1)
(150,148,1)
(152,144,1)
(86,136,1)
(28,61,1)
(69,51,1)
(85,17,1)
(140,44,1)
(143,12,1)
(109,132,1)
(45,43,1)
(95,150,1)
(70,94,1)
(163,9,1)
(141,156,1)
(44,86,1)
(67,98,1)
(86,13,1)
(161,128,1)
(154,85,1)
(126,131,1)
(116,1,1)
(9,158,1)
(127,101,1)
(74,93,1)
(40,12,1)
(160,120,1)
(111,26,1)
(53,65,1)
(131,17,1)
(152,108,1)
(60,82,1)
(8,85,1)
(113,69,1)
(136,13,1)
(132,65,1)
(157,90,1)
(95,52,1)
(47,84,1)
(77,121,1)
(145,22,1)
(138,140,1)
(85,20,1)
(156,71,1)
(29,23,1)
(121,5,1)
(97,14,1)
(99,19,1)
(89,99,1)
(103,56,1)
(91,147,1)
(72,130,1)
(39,79,1)
(139,75,1)
(20,27,1)
(13,74,1)
(38,83,1)
(90,6,1)
(142,50,1)
(16,159,1)
(34,31,1)
(33,114,1)
(83,76,1)
(95,56,1)
(50,45,1)
(159,39,1)
(148,122,1)
(4,160,1)
(105,150,1)
(39,17,1)
(80,32,1)
(19,21,1)
(6,17,1)
(4,17,1)
(137,96,1)
(51,72,1)
(18,15,1)
(36,102,1)
(121,6,1)
(38,17,1)
(66,32,1)
(78,92,1)
(34,53,1)
(49,91,1)
(10,49,1)
(153,36,1)
(64,142,1)
(32,129,1)
(84,134,1)
(158,127,1)
(96,57,1)
(149,142,1)
(107,161,1)
(19,68,1)
(149,64,1)
(82,163,1)
(49,17,1)
(15,131,1)
(159,146,1)
(159,140,1)
(93,4,1)
(76,144,1)
(135,2,1)
(57,125,1)
(68,157,1)
(7,141,1)
(14,66,1)
(5,28,1)
(129,158,1)
(9,46,1)
(79,18,1)
(123,77,1)
(94,17,1)
(162,126,1)
(75,14,1)
(122,78,1)
(146,39,1)
(128,17,1)
(114,70,1)
(32,158,1)
(62,89,1)
(51,130,1)
(125,115,1)
(92,47,1)
(1,62,1)
(21,68,1)
(128,113,1)
(46,104,1)
(104,63,1)
(151,138,1)
(121,38,1)
(152,17,1)
(63,48,1)
(6,60,1)
(26,118,1)
(61,155,1)
(101,154,1)
(102,25,1)
(31,59,1)
(87,149,1)
(59,17,1)
(41,105,1)
(25,29,1)
(111,81,1)
(12,17,1)
(123,158,1)
(96,125,1)
(2,38,1)
(94,162,1)
(134,7,1)
(12,135,1)
(59,133,1)
(52,103,1)
(104,17,1)
(48,139,1)
(100,97,1)
(100,80,1)
(130,116,1)
(71,145,1)
(115,67,1)
(78,17,1)
(131,151,1)
(22,87,1)
(143,152,1)
(23,10,1)
(61,17,1)
(119,143,1)
(155,34,1)
(13,17,1)
(7,156,1)
(53,109,1)
(100,123,1)
(153,102,1)
(56,58,1)
(65,17,1)
(65,33,1)
(124,41,1)
(95,158,1)
(99,6,2)
(143,38,2)
(72,6,2)
(40,38,2)
(65,17,2)
(1,6,2)
(86,38,2)
(103,6,2)
(59,131,2)
(123,14,2)
(94,17,2)
(98,6,2)
(59,17,2)
(13,17,2)
(95,56,2)
(47,6,2)
(19,6,2)
(150,6,2)
(82,14,2)
(90,6,2)
(7,156,2)
(60,14,2)
(49,17,2)
(2,38,2)
(6,17,2)
(86,13,2)
(62,89,2)
(19,68,2)
(111,6,2)
(128,17,2)
(104,17,2)
(12,17,2)
(4,38,2)
(159,39,2)
(91,6,2)
(96,6,2)
(41,6,2)
(71,6,2)
(53,65,2)
(153,102,2)
(143,152,2)
(79,131,2)
(125,6,2)
(56,124,2)
(102,6,2)
(95,6,2)
(80,32,2)
(23,10,2)
(43,6,2)
(51,130,2)
(140,38,2)
(128,6,2)
(12,38,2)
(9,14,2)
(141,6,2)
(97,14,2)
(44,86,2)
(33,131,2)
(9,158,2)
(95,158,2)
(147,6,2)
(26,6,2)
(49,6,2)
(39,131,2)
(135,38,2)
(120,38,2)
(133,131,2)
(10,6,2)
(157,6,2)
(68,6,2)
(4,17,2)
(152,38,2)
(113,6,2)
(129,85,2)
(6,14,2)
(74,38,2)
(8,85,2)
(70,94,2)
(51,6,2)
(149,6,2)
(100,97,2)
(56,6,2)
(15,131,2)
(138,38,2)
(13,38,2)
(22,6,2)
(127,85,2)
(104,14,2)
(61,38,2)
(149,142,2)
(56,58,2)
(122,6,2)
(158,85,2)
(52,6,2)
(118,6,2)
(121,14,2)
(159,140,2)
(131,17,2)
(140,44,2)
(132,131,2)
(75,14,2)
(85,17,2)
(7,6,2)
(143,12,2)
(108,38,2)
(139,14,2)
(84,6,2)
(152,17,2)
(92,6,2)
(163,14,2)
(77,14,2)
(161,128,2)
(114,131,2)
(159,131,2)
(50,6,2)
(100,80,2)
(126,131,2)
(65,131,2)
(119,38,2)
(163,9,2)
(78,17,2)
(111,26,2)
(78,6,2)
(34,38,2)
(31,131,2)
(148,6,2)
(152,144,2)
(14,32,2)
(155,38,2)
(161,6,2)
(29,6,2)
(38,6,2)
(115,6,2)
(109,131,2)
(116,6,2)
(101,85,2)
(144,6,2)
(107,6,2)
(87,6,2)
(89,6,2)
(32,158,2)
(5,38,2)
(38,17,2)
(123,158,2)
(94,131,2)
(63,14,2)
(45,6,2)
(96,125,2)
(130,6,2)
(110,6,2)
(12,163,2)
(124,6,2)
(76,6,2)
(61,17,2)
(145,6,2)
(153,6,2)
(36,6,2)
(93,38,2)
(83,6,2)
(62,6,2)
(44,38,2)
(23,6,2)
(46,14,2)
(39,17,2)
(57,6,2)
(21,6,2)
(28,38,2)
(158,127,2)
(44,4,2)
(66,32,2)
(162,131,2)
(10,49,2)
(70,131,2)
(146,131,2)
(144,95,2)
(154,85,2)
(156,6,2)
(48,14,2)
(25,6,2)
(134,6,2)
(95,150,2)
(31,59,2)
(160,38,2)
(131,38,2)
(18,131,2)
(81,6,2)
(105,6,2)
(16,131,2)
(67,6,2)
(53,140,2)
(100,8,2)
(136,38,2)
(53,131,2)
(151,38,2)
(142,6,2)
(69,6,2)
(64,6,2)
(32,85,2)
(137,6,2)
-----------------------------------
(0,pixels)
(1,bmpinfo)
(2,img)
(3,if (img->hdc)
(4,img->pixelwidth)
(5,img->pixels = pixels)
(6,img->hdc)
(7,bmpinfo.bmiHeader.biSizeImage)
(8,return;)
(9,CreateCompatibleDC(dc)
(10,- img->pixelheight)
(11,)
(12,img->hdc)
(13,img->pixelheight)
(14,!cdc)
(15,pixels)
(16,img)
(17,imglist *img)
(18,img)
(19,bmpinfo.bmiHeader.biSize)
(20,hdc)
(21,biSize)
(22,bmpinfo.bmiHeader.biCompression = BI_RGB)
(23,bmpinfo.bmiHeader.biHeight = - img->pixelheight)
(24,)
(25,bmiHeader)
(26,bmpinfo.bmiHeader)
(27,img)
(28,pixels)
(29,bmpinfo)
(30,bmpinfo)
(31,free(img->pixels)
(32,!dc)
(33,strage)
(34,img)
(35,if (img->pixels)
(36,biPlanes)
(37,size)
(38,img->hbmp)
(39,img->pixels)
(40,img)
(41,pixels)
(42,)
(43,bmpinfo.bmiHeader.biBitCount = 32)
(44,img->pixelwidth * img->pixelheight * 4)
(45,bmpinfo)
(46,dc)
(47,img)
(48,img)
(49,img->pixelheight)
(50,bmiHeader)
(51,bmpinfo.bmiHeader.biWidth)
(52,0)
(53,strage_read(img->strage, pixels, size)
(54,)
(55,)
(56,(void*)
(57,biBitCount)
(58,void*)
(59,img->pixels)
(60,hdc)
(61,img->pixels)
(62,bmpinfo.bmiHeader.biSize = sizeof(BITMAPINFOHEADER)
(63,hdc)
(64,biCompression)
(65,img->strage)
(66,cdc)
(67,bmpinfo)
(68,bmpinfo.bmiHeader)
(69,img)
(70,assert(img->strage)
(71,bmiHeader)
(72,biWidth)
(73,if (img->hdc)
(74,pixelheight)
(75,cdc)
(76,img)
(77,dc)
(78,img->hbmp)
(79,pixels)
(80,return;)
(81,biHeight)
(82,img)
(83,hbmp)
(84,bmpinfo.bmiHeader.biSizeImage = 0)
(85,img->hdc)
(86,img->pixelheight * 4)
(87,BI_RGB)
(88,dc)
(89,sizeof(BITMAPINFOHEADER)
(90,bmpinfo)
(91,pixelheight)
(92,hbmp)
(93,img)
(94,img->strage)
(95,CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)
(96,bmpinfo.bmiHeader.biBitCount)
(97,return;)
(98,bmpinfo.bmiHeader.biPlanes = 1)
(99,BITMAPINFOHEADER)
(100,RET)
(101,wnd)
(102,bmpinfo.bmiHeader)
(103,NULL)
(104,img->hdc)
(105,DIB_RGB_COLORS)
(106,if (!cdc)
(107,bmpinfo)
(108,hbmp)
(109,size)
(110,1)
(111,bmpinfo.bmiHeader.biHeight)
(112,if (img->hbmp)
(113,pixelwidth)
(114,img)
(115,bmiHeader)
(116,bmiHeader)
(117,if (!dc)
(118,bmiHeader)
(119,size)
(120,img)
(121,wnd)
(122,dc)
(123,ReleaseDC(wnd, dc)
(124,&pixels)
(125,bmpinfo.bmiHeader)
(126,img)
(127,GetDC(wnd)
(128,img->pixelwidth)
(129,dc)
(130,bmpinfo.bmiHeader)
(131,img->pixels)
(132,pixels)
(133,pixels)
(134,0)
(135,hdc)
(136,4)
(137,32)
(138,img)
(139,cdc--)
(140,size = img->pixelwidth * img->pixelheight * 4)
(141,biSizeImage)
(142,bmpinfo.bmiHeader)
(143,SelectObject(img->hdc, img->hbmp)
(144,img->hbmp = CreateDIBSection(dc, &bmpinfo, DIB_RGB_COLORS, (void*)
(145,bmpinfo)
(146,size)
(147,img)
(148,bmpinfo)
(149,bmpinfo.bmiHeader.biCompression)
(150,&bmpinfo)
(151,pixels)
(152,img->hbmp)
(153,bmpinfo.bmiHeader.biPlanes)
(154,dc)
(155,pixels)
(156,bmpinfo.bmiHeader)
(157,bmiHeader)
(158,dc = GetDC(wnd)
(159,CopyMemory(pixels, img->pixels, size)
(160,pixelwidth)
(161,bmpinfo.bmiHeader.biWidth = img->pixelwidth)
(162,strage)
(163,img->hdc = CreateCompatibleDC(dc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^