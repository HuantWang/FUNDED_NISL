-----label-----
1
-----code-----
static int
peer_chr_disced(uint16_t conn_handle, const struct ble_gatt_error *error,
                const struct ble_gatt_chr *chr, void *arg)
{
    struct peer *peer;

    peer = arg;
    assert(peer->conn_handle == conn_handle);

    switch (error->status) {
    case 0:
        peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);
        break;

    case BLE_HS_EDONE:
        if (peer->disc_prev_chr_val > 0) {
            peer_disc_chrs(peer);
        }
        break;

    default:
        /* Error. */
        break;
    }

    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
10,11
10,12
11,12
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
24,25
24,26
27,28
27,29
27,30
27,31
27,32
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
46,47
46,48
47,48
50,51
52,53
52,54
53,54
53,55
54,55
57,58
57,59
57,60
57,61
57,62
57,63
57,64
57,65
58,59
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
77,78
78,79
80,81
80,82
81,82
81,83
82,83
82,84
83,84
87,88
88,89
89,90
89,91
90,91
92,93
97,98
-----nextToken-----
2,4,7,9,12,14,15,18,20,21,23,25,26,31,33,34,38,40,44,48,49,51,55,56,59,63,65,70,71,72,73,75,76,79,84,85,86,91,93,94,95,96,98
-----computeFrom-----
36,37
36,38
45,46
45,47
81,82
81,83
-----guardedBy-----
84,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;BreakStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static intpeer_chr_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                const struct ble_gatt_chr *chr, void *arg){    struct peer *peer;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_chrs(peer);        }        break;    default:        /* Error. */        break;    }    return 0;}
static int
peer_chr_disced(uint16_t conn_handle, const struct ble_gatt_error *error,                const struct ble_gatt_chr *chr, void *arg)
peer_chr_disced
uint16_t conn_handle
uint16_t
uint16_t
conn_handle
conn_handle
const struct ble_gatt_error *error
const struct ble_gatt_error
ble_gatt_error
*error
*
error
const struct ble_gatt_chr *chr
const struct ble_gatt_chr
ble_gatt_chr
*chr
*
chr
void *arg
void
*arg
*
arg
{    struct peer *peer;    peer = arg;    assert(peer->conn_handle == conn_handle);    switch (error->status) {    case 0:        peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_chrs(peer);        }        break;    default:        /* Error. */        break;    }    return 0;}
struct peer *peer;
struct peer *peer;
struct peer
peer
*peer
*
peer
peer = arg;
peer = arg
peer
peer
arg
arg
assert(peer->conn_handle == conn_handle);
assert(peer->conn_handle == conn_handle)
assert
assert
peer->conn_handle == conn_handle
peer->conn_handle
peer
peer
conn_handle
conn_handle
conn_handle
switch (error->status) {    case 0:        peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_chrs(peer);        }        break;    default:        /* Error. */        break;    }
error->status
error
error
status
{    case 0:        peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);        break;    case BLE_HS_EDONE:        if (peer->disc_prev_chr_val > 0) {            peer_disc_chrs(peer);        }        break;    default:        /* Error. */        break;    }
case 0:
0
peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr);
peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr)
peer_chr_add
peer_chr_add
peer
peer
peer->cur_svc->svc.start_handle
peer->cur_svc->svc
peer->cur_svc
peer
peer
cur_svc
svc
start_handle
chr
chr
break;
case BLE_HS_EDONE:
BLE_HS_EDONE
BLE_HS_EDONE
if (peer->disc_prev_chr_val > 0) {            peer_disc_chrs(peer);        }
peer->disc_prev_chr_val > 0
peer->disc_prev_chr_val
peer
peer
disc_prev_chr_val
0
{            peer_disc_chrs(peer);        }
peer_disc_chrs(peer);
peer_disc_chrs(peer)
peer_disc_chrs
peer_disc_chrs
peer
peer
break;
default:
break;
return 0;
0
-----joern-----
(10,41,0)
(34,15,0)
(22,7,0)
(4,32,0)
(19,21,0)
(21,6,0)
(45,47,0)
(14,34,0)
(43,34,0)
(21,3,0)
(21,12,0)
(1,21,0)
(17,47,0)
(37,22,0)
(31,28,0)
(3,38,0)
(29,38,0)
(23,6,0)
(47,28,0)
(32,15,0)
(41,24,0)
(27,34,0)
(29,34,0)
(36,15,0)
(5,43,0)
(47,18,0)
(3,21,0)
(28,34,0)
(26,3,0)
(34,9,0)
(39,8,0)
(0,6,0)
(47,17,0)
(11,22,0)
(16,6,0)
(43,8,0)
(38,29,0)
(41,34,0)
(35,6,0)
(21,34,0)
(13,15,0)
(46,38,0)
(2,6,0)
(17,15,0)
(8,43,0)
(25,6,0)
(40,29,0)
(38,3,0)
(44,6,0)
(33,29,0)
(42,28,0)
(30,43,0)
(20,32,0)
(28,47,0)
(45,28,1)
(47,18,1)
(43,5,1)
(21,34,1)
(31,34,1)
(8,39,1)
(26,38,1)
(32,20,1)
(35,41,1)
(28,42,1)
(20,35,1)
(29,34,1)
(11,17,1)
(39,43,1)
(47,28,1)
(29,33,1)
(19,22,1)
(22,7,1)
(20,44,1)
(21,3,1)
(40,19,1)
(35,8,1)
(22,37,1)
(20,23,1)
(38,46,1)
(3,26,1)
(10,8,1)
(42,31,1)
(41,10,1)
(30,22,1)
(21,12,1)
(47,45,1)
(21,1,1)
(43,34,1)
(37,11,1)
(34,9,1)
(28,34,1)
(4,32,1)
(33,40,1)
(23,22,1)
(38,29,1)
(44,21,1)
(14,27,1)
(8,43,1)
(34,14,1)
(1,3,1)
(5,30,1)
(46,29,1)
(41,34,1)
(17,47,1)
(3,38,1)
(38,22,2)
(8,43,2)
(22,7,2)
(8,22,2)
(30,22,2)
(21,22,2)
(1,22,2)
(43,22,2)
(21,3,2)
(5,22,2)
(3,38,2)
(47,18,2)
(40,22,2)
(46,22,2)
(35,22,2)
(29,22,2)
(17,47,2)
(26,22,2)
(41,8,2)
(23,22,2)
(21,34,2)
(44,22,2)
(34,9,2)
(29,34,2)
(33,22,2)
(28,34,2)
(43,34,2)
(41,34,2)
(4,32,2)
(19,22,2)
(39,22,2)
(3,22,2)
(10,8,2)
(38,29,2)
(47,28,2)
(21,12,2)
-----------------------------------
(0,default:)
(1,chr)
(2,if (peer->disc_prev_chr_val > 0)
(3,peer->cur_svc->svc.start_handle)
(4,RET)
(5,disc_prev_chr_val)
(6,)
(7,const struct ble_gatt_error *error)
(8,peer->disc_prev_chr_val > 0)
(9,void *arg)
(10,peer)
(11,error)
(12,const struct ble_gatt_chr *chr)
(13,switch (error->status)
(14,arg)
(15,)
(16,case 0:)
(17,assert(peer->conn_handle == conn_handle)
(18,uint16_t conn_handle)
(19,peer)
(20,0)
(21,peer_chr_add(peer, peer->cur_svc->svc.start_handle, chr)
(22,error->status)
(23,break;)
(24,)
(25,case BLE_HS_EDONE:)
(26,start_handle)
(27,peer)
(28,peer->conn_handle)
(29,peer->cur_svc)
(30,peer)
(31,peer)
(32,return 0;)
(33,cur_svc)
(34,peer = arg)
(35,break;)
(36,peer)
(37,status)
(38,peer->cur_svc->svc)
(39,0)
(40,peer)
(41,peer_disc_chrs(peer)
(42,conn_handle)
(43,peer->disc_prev_chr_val)
(44,break;)
(45,conn_handle)
(46,svc)
(47,peer->conn_handle == conn_handle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^