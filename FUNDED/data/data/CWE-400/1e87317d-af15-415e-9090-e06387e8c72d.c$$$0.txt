-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* FIX: Use a relatively small number */
        count = 20;
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
69,72
69,73
69,74
69,75
69,76
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
82,85
85,86
86,87
88,89
89,90
89,91
91,92
91,93
91,94
94,95
96,97
97,98
97,99
98,99
100,101
100,102
100,103
101,102
103,104
106,107
106,108
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
118,120
118,121
118,122
119,120
120,121
120,122
121,122
124,125
124,126
125,126
127,128
127,129
128,129
128,130
129,130
132,133
134,135
135,136
137,138
138,139
138,140
139,140
139,141
140,141
140,142
141,142
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
151,152
151,153
154,155
154,156
155,156
157,158
159,160
161,162
162,163
163,164
163,165
164,165
167,168
167,169
168,169
170,171
171,172
172,173
172,174
173,174
175,176
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,51,56,58,62,64,68,73,75,77,81,83,84,87,90,92,93,95,99,102,104,105,109,111,116,117,122,123,126,130,131,133,136,142,144,147,149,152,153,156,158,160,165,166,169,174,176
-----computeFrom-----
32,33
32,34
48,49
48,50
53,54
53,55
97,98
97,99
107,108
107,109
120,121
120,122
124,125
124,126
139,140
139,141
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
static void
goodG2B()
goodG2B
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
count = 20;
count = 20
count
count
20
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(82,15,0)
(24,33,0)
(54,15,0)
(68,29,0)
(8,34,0)
(91,60,0)
(37,20,0)
(63,46,0)
(21,49,0)
(51,46,0)
(19,87,0)
(22,86,0)
(34,71,0)
(10,72,0)
(50,20,0)
(11,64,0)
(9,64,0)
(72,60,0)
(18,37,0)
(57,4,0)
(27,81,0)
(70,51,0)
(16,44,0)
(41,80,0)
(23,60,0)
(74,60,0)
(21,64,0)
(46,51,0)
(88,38,0)
(79,76,0)
(73,3,0)
(15,60,0)
(13,20,0)
(61,11,0)
(18,16,0)
(75,44,0)
(89,4,0)
(35,25,0)
(25,4,0)
(66,40,0)
(50,81,0)
(26,31,0)
(64,7,0)
(38,42,0)
(45,22,0)
(33,69,0)
(16,30,0)
(47,18,0)
(77,30,0)
(71,51,0)
(20,44,0)
(90,68,0)
(5,40,0)
(49,21,0)
(4,72,0)
(67,7,0)
(25,60,0)
(80,87,0)
(39,31,0)
(62,66,0)
(1,76,0)
(64,25,0)
(40,66,0)
(56,44,0)
(52,49,0)
(64,21,0)
(55,16,0)
(64,11,0)
(2,0,0)
(48,86,0)
(86,44,0)
(60,85,0)
(28,71,0)
(71,28,0)
(4,25,0)
(65,60,0)
(34,87,0)
(40,44,0)
(86,22,0)
(36,60,0)
(3,50,0)
(83,44,0)
(84,64,0)
(17,87,0)
(37,18,0)
(43,60,0)
(53,71,0)
(78,81,0)
(59,72,0)
(76,60,0)
(30,16,0)
(81,20,0)
(31,25,0)
(12,85,0)
(85,44,0)
(33,25,0)
(46,40,0)
(51,85,0)
(71,34,0)
(3,16,0)
(14,50,0)
(32,37,0)
(7,64,0)
(53,8,1)
(10,59,1)
(1,79,1)
(37,18,1)
(41,38,1)
(64,7,1)
(81,78,1)
(3,73,1)
(57,35,1)
(51,46,1)
(45,48,1)
(3,16,1)
(71,51,1)
(18,16,1)
(33,24,1)
(24,6,1)
(14,3,1)
(68,90,1)
(46,63,1)
(77,55,1)
(25,4,1)
(61,7,1)
(41,21,1)
(80,41,1)
(21,49,1)
(71,53,1)
(39,25,1)
(64,25,1)
(9,11,1)
(50,81,1)
(27,37,1)
(6,34,1)
(34,71,1)
(80,87,1)
(19,68,1)
(73,81,1)
(31,26,1)
(11,61,1)
(90,31,1)
(72,10,1)
(22,45,1)
(70,50,1)
(16,30,1)
(54,51,1)
(19,31,1)
(4,89,1)
(35,72,1)
(88,21,1)
(47,32,1)
(21,64,1)
(48,40,1)
(58,6,1)
(4,72,1)
(40,66,1)
(38,88,1)
(62,5,1)
(32,86,1)
(79,15,1)
(64,11,1)
(59,76,1)
(84,49,1)
(8,80,1)
(49,52,1)
(67,84,1)
(58,33,1)
(8,87,1)
(15,82,1)
(26,39,1)
(31,25,1)
(63,70,1)
(18,47,1)
(30,77,1)
(76,1,1)
(86,22,1)
(71,28,1)
(5,16,1)
(78,27,1)
(52,34,1)
(64,9,1)
(17,19,1)
(46,40,1)
(7,67,1)
(89,57,1)
(87,17,1)
(34,87,1)
(66,62,1)
(50,14,1)
(82,54,1)
(33,25,1)
(41,34,2)
(52,34,2)
(34,34,2)
(51,46,2)
(33,6,2)
(64,7,2)
(18,16,2)
(80,87,2)
(53,34,2)
(64,11,2)
(31,25,2)
(86,22,2)
(49,34,2)
(46,40,2)
(21,34,2)
(16,30,2)
(64,34,2)
(3,16,2)
(71,28,2)
(38,21,2)
(88,21,2)
(7,34,2)
(50,81,2)
(61,34,2)
(34,71,2)
(64,25,2)
(68,31,2)
(80,34,2)
(21,49,2)
(71,51,2)
(33,25,2)
(8,34,2)
(90,31,2)
(21,64,2)
(11,34,2)
(37,18,2)
(40,66,2)
(9,34,2)
(84,34,2)
(71,34,2)
(25,4,2)
(4,72,2)
(34,87,2)
(24,6,2)
(67,34,2)
-----------------------------------
(0,)
(1,NULL)
(2,if (strlen(SENTENCE)
(3,*countPtr1)
(4,fopen(filename, "w+")
(5,countPtr2)
(6,pFile)
(7,sizeof(char)
(8,i)
(9,pFile)
(10,"output_bad.txt")
(11,strlen(SENTENCE)
(12,count)
(13,count)
(14,count)
(15,i = 0)
(16,*countPtr1 = &count)
(17,0)
(18,*countPtr1)
(19,i)
(20,)
(21,strlen(SENTENCE)
(22,-1)
(23,if (pFile)
(24,pFile)
(25,pFile = fopen(filename, "w+")
(26,NULL)
(27,count)
(28,size_t)
(29,)
(30,&count)
(31,pFile == NULL)
(32,count)
(33,fclose(pFile)
(34,i < (size_t)
(35,pFile)
(36,if (pFile == NULL)
(37,count = *countPtr1)
(38,exit(1)
(39,pFile)
(40,*countPtr2 = &count)
(41,i)
(42,)
(43,i)
(44,)
(45,1)
(46,*countPtr2)
(47,countPtr1)
(48,count)
(49,strlen(SENTENCE)
(50,*countPtr1 = count)
(51,count = *countPtr2)
(52,SENTENCE)
(53,count)
(54,i)
(55,countPtr1)
(56,count)
(57,filename)
(58,RET)
(59,filename)
(60,)
(61,SENTENCE)
(62,count)
(63,countPtr2)
(64,fwrite(SENTENCE, sizeof(char)
(65,pFile)
(66,&count)
(67,char)
(68,exit(1)
(69,)
(70,count)
(71,(size_t)
(72,*filename = "output_bad.txt")
(73,countPtr1)
(74,filename)
(75,countPtr2)
(76,*pFile = NULL)
(77,count)
(78,20)
(79,pFile)
(80,i++)
(81,count = 20)
(82,0)
(83,countPtr1)
(84,SENTENCE)
(85,)
(86,count = -1)
(87,i = 0)
(88,1)
(89,"w+")
(90,1)
(91,for (i = 0; i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^