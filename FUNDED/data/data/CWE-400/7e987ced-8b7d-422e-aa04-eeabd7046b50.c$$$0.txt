-----label-----
0
-----code-----
int main(int argc, char **argv)
{
	parse_cmd_opts(argc, argv);
	rootfd = open(server_root, O_RDONLY);
	if(rootfd == -1) {
		perror("Failed to open server root");
		exit(1);
	}
	
	init_mime_database();

	mailbox = calloc(num_threads, sizeof(int));
	pthread_t threads[num_threads];
	struct threaddata td[num_threads];

	int sock = socket(AF_INET, SOCK_STREAM, 0);
	if(sock == -1) {
		perror("Failed to open socket");
		exit(1);
	}

	int enable = 1;
#ifdef SO_REUSEPORT
	if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)) == -1) {
		perror("Failed to set socket options");
		exit(1);
	}
#endif

	if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {
		perror("Failed to set socket options");
		exit(1);
	}

	struct sockaddr_in bind_addr;
	bind_addr.sin_family = AF_INET;
	bind_addr.sin_port = htons(8080);
	inet_aton("0.0.0.0", &bind_addr.sin_addr);
	if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {
		perror("Failed to bind socket");
		exit(1);
	}

	if(listen(sock, 0) == -1) {
		perror("Failed to listen");
		exit(1);
	}

	struct rlimit lim;
	getrlimit(RLIMIT_NOFILE, &lim);
	if(lim.rlim_cur <= num_threads + 8) {
		fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n");
	}
	printf("Listening with %d threads, %ld files!\n", num_threads, lim.rlim_cur);

	for(unsigned i=0;i<num_threads;i++) {
		td[i].tid = i;
		pthread_create(&threads[i], NULL, thread_main, &td[i]);
	}

	struct sockaddr_in caddr;
	socklen_t caddr_len;
	int client;
	while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1 || 1) {
		handle_client(client);
	}

	perror("Accept failed");
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
15,37
15,38
15,39
15,40
15,41
15,42
15,43
16,17
17,18
17,19
17,20
18,19
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
31,32
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
43,44
43,45
44,45
47,48
48,49
48,50
49,50
52,53
53,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
65,66
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
75,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
84,85
85,86
87,88
88,89
88,90
90,91
90,92
92,93
93,94
93,95
93,96
93,97
94,95
96,97
98,99
101,102
101,103
102,103
102,104
103,104
105,106
107,108
107,109
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
118,119
119,120
119,121
121,122
121,123
123,124
125,126
125,127
126,127
126,128
127,128
127,129
127,130
127,131
127,132
127,133
128,129
130,131
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
145,147
146,147
147,148
147,149
148,149
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
176,177
176,178
177,178
180,181
181,182
181,183
181,184
182,183
185,186
186,187
186,188
187,188
190,191
190,192
191,192
191,193
192,193
192,194
192,195
192,196
193,194
195,196
197,198
197,199
198,199
198,200
199,200
201,202
203,204
204,205
206,207
207,208
208,209
210,211
212,213
212,214
213,214
214,215
214,216
215,216
218,219
219,220
219,221
220,221
223,224
223,225
224,225
224,226
225,226
225,227
225,228
226,227
228,229
231,232
233,234
233,235
234,235
235,236
235,237
236,237
239,240
240,241
240,242
241,242
244,245
245,246
245,247
246,247
248,249
250,251
251,252
251,253
251,254
252,253
254,255
256,257
257,258
259,260
259,261
260,261
260,262
261,262
261,263
262,263
265,266
265,267
266,267
269,270
270,271
271,272
271,273
271,274
272,273
274,275
277,278
278,279
278,280
278,281
278,282
279,280
282,283
284,285
284,286
285,286
288,289
288,290
288,291
288,292
289,290
290,291
290,292
292,293
292,294
294,295
296,297
296,298
297,298
299,300
301,302
302,303
304,305
304,306
305,306
306,307
306,308
307,308
307,309
308,309
308,310
309,310
311,312
314,315
316,317
317,318
317,319
317,320
317,321
317,322
318,319
320,321
321,322
321,323
322,323
324,325
326,327
328,329
330,331
331,332
331,333
332,333
334,335
336,337
337,338
337,339
338,339
340,341
342,343
343,344
343,345
344,345
346,347
348,349
349,350
349,351
351,352
353,354
353,355
354,355
354,356
355,356
355,357
356,357
357,358
357,359
358,359
360,361
360,362
360,363
360,364
361,362
363,364
365,366
365,367
366,367
366,368
367,368
369,370
371,372
372,373
374,375
375,376
377,378
380,381
381,382
382,383
382,384
383,384
385,386
387,388
388,389
388,390
389,390
392,393
-----nextToken-----
2,4,6,8,10,12,13,14,19,21,23,27,30,32,34,38,40,45,46,50,51,55,59,62,64,67,68,72,74,77,81,83,86,89,91,95,97,99,100,104,106,111,112,116,117,120,122,124,129,131,133,135,138,142,144,149,150,154,155,159,161,166,167,169,174,175,178,179,183,184,188,189,194,196,200,202,205,209,211,216,217,221,222,227,229,230,232,237,238,242,243,247,249,253,255,258,263,264,267,268,273,275,276,280,281,283,286,287,291,293,295,298,300,303,310,312,313,315,319,323,325,327,329,333,335,339,341,345,347,350,352,359,362,364,368,370,373,376,378,379,384,386,390,391,393
-----computeFrom-----
25,26
25,27
36,37
36,38
57,58
57,59
102,103
102,104
126,127
126,128
163,164
163,165
171,172
171,173
191,192
191,193
224,225
224,226
260,261
260,262
265,266
265,267
296,297
296,298
306,307
306,308
354,355
354,356
355,356
355,357
357,358
357,359
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ForStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;WhileStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int main(int argc, char **argv){	parse_cmd_opts(argc, argv);	rootfd = open(server_root, O_RDONLY);	if(rootfd == -1) {		perror("Failed to open server root");		exit(1);	}		init_mime_database();	mailbox = calloc(num_threads, sizeof(int));	pthread_t threads[num_threads];	struct threaddata td[num_threads];	int sock = socket(AF_INET, SOCK_STREAM, 0);	if(sock == -1) {		perror("Failed to open socket");		exit(1);	}	int enable = 1;#ifdef SO_REUSEPORT	if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}#endif	if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}	struct sockaddr_in bind_addr;	bind_addr.sin_family = AF_INET;	bind_addr.sin_port = htons(8080);	inet_aton("0.0.0.0", &bind_addr.sin_addr);	if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {		perror("Failed to bind socket");		exit(1);	}	if(listen(sock, 0) == -1) {		perror("Failed to listen");		exit(1);	}	struct rlimit lim;	getrlimit(RLIMIT_NOFILE, &lim);	if(lim.rlim_cur <= num_threads + 8) {		fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n");	}	printf("Listening with %d threads, %ld files!\n", num_threads, lim.rlim_cur);	for(unsigned i=0;i<num_threads;i++) {		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}	struct sockaddr_in caddr;	socklen_t caddr_len;	int client;	while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1 || 1) {		handle_client(client);	}	perror("Accept failed");	return 1;}
int
main(int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{	parse_cmd_opts(argc, argv);	rootfd = open(server_root, O_RDONLY);	if(rootfd == -1) {		perror("Failed to open server root");		exit(1);	}		init_mime_database();	mailbox = calloc(num_threads, sizeof(int));	pthread_t threads[num_threads];	struct threaddata td[num_threads];	int sock = socket(AF_INET, SOCK_STREAM, 0);	if(sock == -1) {		perror("Failed to open socket");		exit(1);	}	int enable = 1;#ifdef SO_REUSEPORT	if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}#endif	if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}	struct sockaddr_in bind_addr;	bind_addr.sin_family = AF_INET;	bind_addr.sin_port = htons(8080);	inet_aton("0.0.0.0", &bind_addr.sin_addr);	if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {		perror("Failed to bind socket");		exit(1);	}	if(listen(sock, 0) == -1) {		perror("Failed to listen");		exit(1);	}	struct rlimit lim;	getrlimit(RLIMIT_NOFILE, &lim);	if(lim.rlim_cur <= num_threads + 8) {		fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n");	}	printf("Listening with %d threads, %ld files!\n", num_threads, lim.rlim_cur);	for(unsigned i=0;i<num_threads;i++) {		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}	struct sockaddr_in caddr;	socklen_t caddr_len;	int client;	while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1 || 1) {		handle_client(client);	}	perror("Accept failed");	return 1;}
parse_cmd_opts(argc, argv);
parse_cmd_opts(argc, argv)
parse_cmd_opts
parse_cmd_opts
argc
argc
argv
argv
rootfd = open(server_root, O_RDONLY);
rootfd = open(server_root, O_RDONLY)
rootfd
rootfd
open(server_root, O_RDONLY)
open
open
server_root
server_root
O_RDONLY
O_RDONLY
if(rootfd == -1) {		perror("Failed to open server root");		exit(1);	}
rootfd == -1
rootfd
rootfd
-1
1
{		perror("Failed to open server root");		exit(1);	}
perror("Failed to open server root");
perror("Failed to open server root")
perror
perror
"Failed to open server root"
exit(1);
exit(1)
exit
exit
1
init_mime_database();
init_mime_database()
init_mime_database
init_mime_database
mailbox = calloc(num_threads, sizeof(int));
mailbox = calloc(num_threads, sizeof(int))
mailbox
mailbox
calloc(num_threads, sizeof(int))
calloc
calloc
num_threads
num_threads
sizeof(int)
int
int

pthread_t threads[num_threads];
pthread_t threads[num_threads];
pthread_t
pthread_t
threads[num_threads]
threads
[num_threads]
num_threads
num_threads
struct threaddata td[num_threads];
struct threaddata td[num_threads];
struct threaddata
threaddata
td[num_threads]
td
[num_threads]
num_threads
num_threads
int sock = socket(AF_INET, SOCK_STREAM, 0);
int sock = socket(AF_INET, SOCK_STREAM, 0);
int
sock = socket(AF_INET, SOCK_STREAM, 0)
sock
= socket(AF_INET, SOCK_STREAM, 0)
socket(AF_INET, SOCK_STREAM, 0)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
0
if(sock == -1) {		perror("Failed to open socket");		exit(1);	}
sock == -1
sock
sock
-1
1
{		perror("Failed to open socket");		exit(1);	}
perror("Failed to open socket");
perror("Failed to open socket")
perror
perror
"Failed to open socket"
exit(1);
exit(1)
exit
exit
1
int enable = 1;
int enable = 1;
int
enable = 1
enable
= 1
1
if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1) {		perror("Failed to set socket options");		exit(1);	}
setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)) == -1
setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable))
setsockopt
setsockopt
sock
sock
SOL_SOCKET
SOL_SOCKET
SO_REUSEADDR
SO_REUSEADDR
&enable
enable
enable
sizeof(enable)
(enable)
enable
enable
-1
1
{		perror("Failed to set socket options");		exit(1);	}
perror("Failed to set socket options");
perror("Failed to set socket options")
perror
perror
"Failed to set socket options"
exit(1);
exit(1)
exit
exit
1
struct sockaddr_in bind_addr;
struct sockaddr_in bind_addr;
struct sockaddr_in
sockaddr_in
bind_addr
bind_addr
bind_addr.sin_family = AF_INET;
bind_addr.sin_family = AF_INET
bind_addr.sin_family
bind_addr
bind_addr
sin_family
AF_INET
AF_INET
bind_addr.sin_port = htons(8080);
bind_addr.sin_port = htons(8080)
bind_addr.sin_port
bind_addr
bind_addr
sin_port
htons(8080)
htons
htons
8080
inet_aton("0.0.0.0", &bind_addr.sin_addr);
inet_aton("0.0.0.0", &bind_addr.sin_addr)
inet_aton
inet_aton
"0.0.0.0"
&bind_addr.sin_addr
bind_addr.sin_addr
bind_addr
bind_addr
sin_addr
if(bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1) {		perror("Failed to bind socket");		exit(1);	}
bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr)) == -1
bind(sock, (struct sockaddr *)&bind_addr, sizeof(bind_addr))
bind
bind
sock
sock
(struct sockaddr *)&bind_addr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&bind_addr
bind_addr
bind_addr
sizeof(bind_addr)
(bind_addr)
bind_addr
bind_addr
-1
1
{		perror("Failed to bind socket");		exit(1);	}
perror("Failed to bind socket");
perror("Failed to bind socket")
perror
perror
"Failed to bind socket"
exit(1);
exit(1)
exit
exit
1
if(listen(sock, 0) == -1) {		perror("Failed to listen");		exit(1);	}
listen(sock, 0) == -1
listen(sock, 0)
listen
listen
sock
sock
0
-1
1
{		perror("Failed to listen");		exit(1);	}
perror("Failed to listen");
perror("Failed to listen")
perror
perror
"Failed to listen"
exit(1);
exit(1)
exit
exit
1
struct rlimit lim;
struct rlimit lim;
struct rlimit
rlimit
lim
lim
getrlimit(RLIMIT_NOFILE, &lim);
getrlimit(RLIMIT_NOFILE, &lim)
getrlimit
getrlimit
RLIMIT_NOFILE
RLIMIT_NOFILE
&lim
lim
lim
if(lim.rlim_cur <= num_threads + 8) {		fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n");	}
lim.rlim_cur <= num_threads + 8
lim.rlim_cur
lim
lim
rlim_cur
num_threads + 8
num_threads
num_threads
8
{		fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n");	}
fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n");
fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\n")
fprintf
fprintf
stderr
stderr
"warning - you have more threads than files. Probably not what you want.\n"
printf("Listening with %d threads, %ld files!\n", num_threads, lim.rlim_cur);
printf("Listening with %d threads, %ld files!\n", num_threads, lim.rlim_cur)
printf
printf
"Listening with %d threads, %ld files!\n"
num_threads
num_threads
lim.rlim_cur
lim
lim
rlim_cur
for(unsigned i=0;i<num_threads;i++) {		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}
unsigned i=0;
unsigned i=0;
unsigned
i=0
i
=0
0
i<num_threads
i
i
num_threads
num_threads
i++
i
i
{		td[i].tid = i;		pthread_create(&threads[i], NULL, thread_main, &td[i]);	}
td[i].tid = i;
td[i].tid = i
td[i].tid
td[i]
td
td
i
i
tid
i
i
pthread_create(&threads[i], NULL, thread_main, &td[i]);
pthread_create(&threads[i], NULL, thread_main, &td[i])
pthread_create
pthread_create
&threads[i]
threads[i]
threads
threads
i
i
NULL
NULL
thread_main
thread_main
&td[i]
td[i]
td
td
i
i
struct sockaddr_in caddr;
struct sockaddr_in caddr;
struct sockaddr_in
sockaddr_in
caddr
caddr
socklen_t caddr_len;
socklen_t caddr_len;
socklen_t
socklen_t
caddr_len
caddr_len
int client;
int client;
int
client
client
while((client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1 || 1) {		handle_client(client);	}
(client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1 || 1
(client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)) != -1
(client = accept(sock, (struct sockaddr *)&caddr, &caddr_len))
client = accept(sock, (struct sockaddr *)&caddr, &caddr_len)
client
client
accept(sock, (struct sockaddr *)&caddr, &caddr_len)
accept
accept
sock
sock
(struct sockaddr *)&caddr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&caddr
caddr
caddr
&caddr_len
caddr_len
caddr_len
-1
1
1
{		handle_client(client);	}
handle_client(client);
handle_client(client)
handle_client
handle_client
client
client
perror("Accept failed");
perror("Accept failed")
perror
perror
"Accept failed"
return 1;
1
-----joern-----
(188,71,0)
(117,45,0)
(169,171,0)
(104,171,0)
(102,157,0)
(184,60,0)
(37,149,0)
(195,49,0)
(43,75,0)
(84,42,0)
(6,45,0)
(196,82,0)
(92,50,0)
(25,20,0)
(35,154,0)
(61,45,0)
(46,158,0)
(78,166,0)
(36,69,0)
(17,146,0)
(136,45,0)
(19,38,0)
(140,30,0)
(74,62,0)
(76,150,0)
(18,127,0)
(171,169,0)
(193,130,0)
(62,66,0)
(163,50,0)
(118,45,0)
(158,186,0)
(8,109,0)
(116,162,0)
(149,141,0)
(88,45,0)
(162,175,0)
(150,112,0)
(194,144,0)
(42,143,0)
(190,73,0)
(154,45,0)
(121,45,0)
(101,52,0)
(75,130,0)
(104,79,0)
(22,66,0)
(144,171,0)
(44,45,0)
(204,10,0)
(4,149,0)
(139,45,0)
(90,31,0)
(52,66,0)
(24,205,0)
(96,49,0)
(7,66,0)
(171,144,0)
(50,163,0)
(9,119,0)
(134,139,0)
(77,112,0)
(205,45,0)
(28,190,0)
(206,143,0)
(123,120,0)
(23,141,0)
(30,45,0)
(143,45,0)
(192,143,0)
(62,139,0)
(5,68,0)
(59,154,0)
(141,82,0)
(20,207,0)
(21,45,0)
(198,18,0)
(34,159,0)
(185,43,0)
(129,109,0)
(184,56,0)
(138,3,0)
(146,17,0)
(17,107,0)
(166,207,0)
(39,62,0)
(62,74,0)
(83,136,0)
(80,45,0)
(60,184,0)
(150,97,0)
(124,155,0)
(176,120,0)
(115,57,0)
(94,103,0)
(181,45,0)
(14,138,0)
(62,50,0)
(149,30,0)
(210,73,0)
(82,112,0)
(167,30,0)
(170,146,0)
(142,131,0)
(128,159,0)
(200,171,0)
(56,110,0)
(177,45,0)
(183,129,0)
(52,135,0)
(164,140,0)
(171,139,0)
(91,8,0)
(152,112,0)
(75,43,0)
(89,28,0)
(165,184,0)
(42,10,0)
(72,45,0)
(54,146,0)
(10,160,0)
(66,22,0)
(190,28,0)
(184,139,0)
(187,154,0)
(110,56,0)
(109,129,0)
(30,140,0)
(85,186,0)
(120,139,0)
(58,187,0)
(26,184,0)
(82,141,0)
(15,45,0)
(32,152,0)
(209,110,0)
(186,69,0)
(65,161,0)
(137,92,0)
(201,70,0)
(64,166,0)
(113,143,0)
(134,156,0)
(49,195,0)
(38,143,0)
(40,140,0)
(207,20,0)
(22,103,0)
(160,10,0)
(50,92,0)
(146,97,0)
(47,161,0)
(77,191,0)
(182,197,0)
(53,179,0)
(95,106,0)
(160,70,0)
(172,98,0)
(68,127,0)
(81,45,0)
(147,82,0)
(122,57,0)
(31,175,0)
(146,191,0)
(158,45,0)
(131,3,0)
(97,150,0)
(199,45,0)
(79,104,0)
(107,17,0)
(27,187,0)
(113,184,0)
(179,45,0)
(97,146,0)
(8,45,0)
(171,104,0)
(10,42,0)
(100,139,0)
(205,203,0)
(93,104,0)
(51,157,0)
(2,148,0)
(132,130,0)
(10,38,0)
(0,107,0)
(189,107,0)
(139,120,0)
(48,98,0)
(56,184,0)
(174,128,0)
(38,10,0)
(86,95,0)
(197,22,0)
(148,155,0)
(133,77,0)
(70,160,0)
(104,93,0)
(69,186,0)
(16,205,0)
(109,8,0)
(22,197,0)
(178,79,0)
(103,22,0)
(186,158,0)
(207,45,0)
(130,75,0)
(149,45,0)
(105,134,0)
(57,112,0)
(208,112,0)
(107,112,0)
(71,169,0)
(169,71,0)
(195,45,0)
(13,120,0)
(157,11,0)
(184,113,0)
(99,156,0)
(151,113,0)
(205,67,0)
(108,74,0)
(73,190,0)
(130,139,0)
(119,106,0)
(1,60,0)
(173,28,0)
(141,77,0)
(154,187,0)
(145,45,0)
(126,45,0)
(10,139,0)
(149,161,0)
(29,48,0)
(125,10,0)
(180,150,0)
(50,62,0)
(114,184,0)
(60,143,0)
(111,172,0)
(63,45,0)
(149,158,0)
(156,134,0)
(66,62,0)
(161,179,0)
(168,73,0)
(12,45,0)
(33,195,0)
(155,148,0)
(153,45,0)
(87,10,0)
(55,129,0)
(202,112,0)
(149,166,0)
(41,34,0)
(122,115,1)
(167,205,1)
(155,148,1)
(179,53,1)
(201,10,1)
(24,16,1)
(104,79,1)
(82,196,1)
(169,171,1)
(17,107,1)
(149,158,1)
(39,7,1)
(150,76,1)
(22,66,1)
(27,59,1)
(64,78,1)
(110,209,1)
(136,83,1)
(183,91,1)
(164,167,1)
(149,37,1)
(68,5,1)
(152,112,1)
(33,75,1)
(208,202,1)
(7,57,1)
(197,182,1)
(180,77,1)
(42,84,1)
(147,57,1)
(112,208,1)
(62,50,1)
(40,164,1)
(38,19,1)
(187,58,1)
(142,134,1)
(20,25,1)
(152,32,1)
(82,112,1)
(154,187,1)
(192,138,1)
(5,75,1)
(190,28,1)
(10,42,1)
(9,169,1)
(14,131,1)
(49,96,1)
(26,114,1)
(172,111,1)
(91,207,1)
(73,210,1)
(59,35,1)
(100,158,1)
(94,22,1)
(47,160,1)
(143,206,1)
(77,133,1)
(42,143,1)
(113,143,1)
(83,103,1)
(87,204,1)
(184,113,1)
(205,203,1)
(90,162,1)
(43,185,1)
(114,143,1)
(119,9,1)
(103,94,1)
(189,54,1)
(84,125,1)
(57,112,1)
(117,48,1)
(150,112,1)
(25,166,1)
(113,151,1)
(184,139,1)
(193,95,1)
(171,144,1)
(62,74,1)
(97,150,1)
(120,123,1)
(204,56,1)
(96,33,1)
(35,190,1)
(158,186,1)
(22,197,1)
(166,64,1)
(52,66,1)
(207,20,1)
(74,108,1)
(31,90,1)
(168,195,1)
(160,10,1)
(130,139,1)
(204,34,1)
(209,184,1)
(123,13,1)
(35,157,1)
(146,97,1)
(92,137,1)
(171,139,1)
(99,105,1)
(196,147,1)
(60,143,1)
(41,128,1)
(107,0,1)
(57,122,1)
(86,119,1)
(36,85,1)
(4,149,1)
(32,146,1)
(161,65,1)
(194,104,1)
(205,67,1)
(169,71,1)
(144,194,1)
(171,104,1)
(170,97,1)
(52,101,1)
(2,124,1)
(109,129,1)
(58,27,1)
(129,55,1)
(149,141,1)
(165,26,1)
(124,30,1)
(148,2,1)
(104,93,1)
(33,18,1)
(193,169,1)
(10,38,1)
(65,47,1)
(149,161,1)
(108,50,1)
(105,139,1)
(107,112,1)
(206,192,1)
(149,166,1)
(1,165,1)
(38,143,1)
(186,69,1)
(10,139,1)
(70,201,1)
(115,112,1)
(56,110,1)
(125,87,1)
(188,171,1)
(202,154,1)
(116,160,1)
(54,170,1)
(130,132,1)
(134,139,1)
(139,120,1)
(28,89,1)
(195,49,1)
(23,82,1)
(151,60,1)
(85,46,1)
(62,139,1)
(192,134,1)
(77,112,1)
(18,198,1)
(37,136,1)
(78,179,1)
(111,155,1)
(174,56,1)
(184,60,1)
(48,29,1)
(66,62,1)
(29,172,1)
(133,141,1)
(7,52,1)
(101,103,1)
(55,183,1)
(200,8,1)
(34,41,1)
(132,193,1)
(102,51,1)
(13,176,1)
(210,168,1)
(182,66,1)
(19,42,1)
(178,200,1)
(50,163,1)
(8,109,1)
(56,184,1)
(46,117,1)
(140,40,1)
(75,43,1)
(173,73,1)
(134,156,1)
(131,142,1)
(60,1,1)
(95,86,1)
(138,14,1)
(157,102,1)
(160,70,1)
(0,189,1)
(141,82,1)
(141,23,1)
(50,92,1)
(71,188,1)
(198,68,1)
(149,30,1)
(30,140,1)
(137,39,1)
(47,31,1)
(190,73,1)
(176,100,1)
(115,152,1)
(128,174,1)
(156,99,1)
(117,155,1)
(51,190,1)
(79,178,1)
(69,36,1)
(103,22,1)
(76,180,1)
(162,116,1)
(205,24,1)
(146,17,1)
(75,130,1)
(53,161,1)
(89,173,1)
(185,130,1)
(119,169,2)
(198,75,2)
(184,60,2)
(66,62,2)
(146,97,2)
(17,107,2)
(76,57,2)
(131,134,2)
(109,129,2)
(157,190,2)
(170,57,2)
(10,38,2)
(207,20,2)
(186,69,2)
(182,103,2)
(162,160,2)
(32,57,2)
(82,57,2)
(57,57,2)
(52,103,2)
(189,57,2)
(111,155,2)
(4,149,2)
(149,141,2)
(62,74,2)
(146,17,2)
(39,103,2)
(51,190,2)
(107,112,2)
(149,166,2)
(57,112,2)
(17,57,2)
(60,143,2)
(169,171,2)
(197,103,2)
(116,160,2)
(7,103,2)
(22,66,2)
(86,169,2)
(90,160,2)
(41,56,2)
(115,57,2)
(92,103,2)
(190,28,2)
(174,56,2)
(31,160,2)
(171,139,2)
(9,169,2)
(107,57,2)
(75,43,2)
(205,203,2)
(42,143,2)
(160,70,2)
(108,103,2)
(62,139,2)
(77,57,2)
(169,71,2)
(56,110,2)
(103,22,2)
(95,169,2)
(171,144,2)
(146,57,2)
(82,112,2)
(94,22,2)
(205,67,2)
(97,57,2)
(180,57,2)
(97,150,2)
(149,158,2)
(54,57,2)
(30,140,2)
(77,112,2)
(38,143,2)
(23,57,2)
(48,155,2)
(75,130,2)
(113,143,2)
(149,30,2)
(138,134,2)
(22,197,2)
(5,75,2)
(133,57,2)
(152,112,2)
(68,75,2)
(62,50,2)
(184,113,2)
(50,103,2)
(34,56,2)
(0,57,2)
(8,109,2)
(150,57,2)
(52,66,2)
(158,186,2)
(10,139,2)
(142,134,2)
(155,148,2)
(149,161,2)
(62,103,2)
(18,75,2)
(134,156,2)
(152,57,2)
(196,57,2)
(74,103,2)
(56,184,2)
(22,103,2)
(195,49,2)
(141,82,2)
(171,104,2)
(160,10,2)
(104,93,2)
(103,103,2)
(101,103,2)
(147,57,2)
(66,103,2)
(150,112,2)
(184,139,2)
(190,73,2)
(122,57,2)
(10,42,2)
(104,79,2)
(154,187,2)
(130,139,2)
(141,57,2)
(134,139,2)
(50,92,2)
(29,155,2)
(128,56,2)
(102,190,2)
(14,134,2)
(50,163,2)
(139,120,2)
(172,155,2)
(137,103,2)
-----------------------------------
(0,i)
(1,enable)
(2,1)
(3,)
(4,RET)
(5,"Failed to listen")
(6,sock)
(7,client)
(8,inet_aton("0.0.0.0", &bind_addr.sin_addr)
(9,"Failed to bind socket")
(10,setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)
(11,)
(12,bind_addr)
(13,SOCK_STREAM)
(14,1)
(15,if(lim.rlim_cur <= num_threads + 8)
(16,argc)
(17,&td[i])
(18,exit(1)
(19,enable)
(20,htons(8080)
(21,client)
(22,(client = accept(sock, (struct sockaddr *)
(23,tid)
(24,argv)
(25,8080)
(26,SOL_SOCKET)
(27,lim)
(28,num_threads + 8)
(29,1)
(30,rootfd = open(server_root, O_RDONLY)
(31,exit(1)
(32,i)
(33,RLIMIT_NOFILE)
(34,exit(1)
(35,"Listening with %d threads, %ld files!\\n")
(36,int)
(37,1)
(38,sizeof(enable)
(39,sock)
(40,O_RDONLY)
(41,1)
(42,&enable)
(43,-1)
(44,enable)
(45,)
(46,mailbox)
(47,bind_addr)
(48,exit(1)
(49,&lim)
(50,(struct sockaddr *)
(51,stderr)
(52,handle_client(client)
(53,AF_INET)
(54,thread_main)
(55,sin_addr)
(56,setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)
(57,i<num_threads)
(58,rlim_cur)
(59,num_threads)
(60,&enable)
(61,if(listen(sock, 0)
(62,accept(sock, (struct sockaddr *)
(63,if(sock == -1)
(64,sin_port)
(65,sin_family)
(66,client = accept(sock, (struct sockaddr *)
(67,int argc)
(68,perror("Failed to listen")
(69,sizeof(int)
(70,-1)
(71,-1)
(72,if(setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)
(73,lim.rlim_cur)
(74,&caddr_len)
(75,listen(sock, 0)
(76,i)
(77,td[i].tid = i)
(78,bind_addr)
(79,&bind_addr)
(80,if(setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)
(81,if(bind(sock, (struct sockaddr *)
(82,td[i])
(83,"Accept failed")
(84,enable)
(85,num_threads)
(86,1)
(87,SOL_SOCKET)
(88,lim)
(89,8)
(90,1)
(91,"0.0.0.0")
(92,&caddr)
(93,struct sockaddr *)
(94,1)
(95,exit(1)
(96,lim)
(97,&threads[i])
(98,)
(99,1)
(100,sock)
(101,client)
(102,"warning - you have more threads than files. Probably not what you want.\\n")
(103,(client = accept(sock, (struct sockaddr *)
(104,(struct sockaddr *)
(105,sock)
(106,)
(107,td[i])
(108,caddr_len)
(109,&bind_addr.sin_addr)
(110,-1)
(111,"Failed to open server root")
(112,i=0)
(113,sizeof(enable)
(114,sock)
(115,i)
(116,"Failed to set socket options")
(117,init_mime_database()
(118,for(unsigned i=0;i<num_threads;i++)
(119,perror("Failed to bind socket")
(120,socket(AF_INET, SOCK_STREAM, 0)
(121,threads)
(122,num_threads)
(123,0)
(124,rootfd)
(125,SO_REUSEADDR)
(126,td)
(127,)
(128,perror("Failed to set socket options")
(129,bind_addr.sin_addr)
(130,listen(sock, 0)
(131,perror("Failed to open socket")
(132,0)
(133,i)
(134,sock == -1)
(135,)
(136,perror("Accept failed")
(137,caddr)
(138,exit(1)
(139,sock = socket(AF_INET, SOCK_STREAM, 0)
(140,open(server_root, O_RDONLY)
(141,td[i].tid)
(142,"Failed to open socket")
(143,enable = 1)
(144,sizeof(bind_addr)
(145,i)
(146,pthread_create(&threads[i], NULL, thread_main, &td[i])
(147,td)
(148,-1)
(149,return 1;)
(150,threads[i])
(151,enable)
(152,i++)
(153,while((client = accept(sock, (struct sockaddr *)
(154,printf("Listening with %d threads, %ld files!\\n", num_threads, lim.rlim_cur)
(155,rootfd == -1)
(156,-1)
(157,fprintf(stderr, "warning - you have more threads than files. Probably not what you want.\\n")
(158,mailbox = calloc(num_threads, sizeof(int)
(159,)
(160,setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(enable)
(161,bind_addr.sin_family)
(162,perror("Failed to set socket options")
(163,struct sockaddr *)
(164,server_root)
(165,SO_REUSEPORT)
(166,bind_addr.sin_port)
(167,rootfd)
(168,lim)
(169,bind(sock, (struct sockaddr *)
(170,NULL)
(171,bind(sock, (struct sockaddr *)
(172,perror("Failed to open server root")
(173,num_threads)
(174,"Failed to set socket options")
(175,)
(176,AF_INET)
(177,caddr)
(178,bind_addr)
(179,bind_addr.sin_family = AF_INET)
(180,threads)
(181,caddr_len)
(182,1)
(183,bind_addr)
(184,setsockopt(sock, SOL_SOCKET, SO_REUSEPORT, &enable, sizeof(enable)
(185,1)
(186,calloc(num_threads, sizeof(int)
(187,lim.rlim_cur)
(188,1)
(189,td)
(190,lim.rlim_cur <= num_threads + 8)
(191,)
(192,enable)
(193,sock)
(194,bind_addr)
(195,getrlimit(RLIMIT_NOFILE, &lim)
(196,i)
(197,-1)
(198,1)
(199,if(rootfd == -1)
(200,sock)
(201,1)
(202,i)
(203,char **argv)
(204,sock)
(205,parse_cmd_opts(argc, argv)
(206,1)
(207,bind_addr.sin_port = htons(8080)
(208,0)
(209,1)
(210,rlim_cur)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^