-----label-----
0
-----code-----
static void good2()
{
    switch(6)
    {
    case 6:
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        wchar_t * tmpData;
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        /* FIX: Ensure realloc() was successful before assigning data to the memory block
        * allocated with realloc() */
        if (tmpData != NULL)
        {
            data = tmpData;
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
        }
        free(data);
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
69,71
70,71
70,72
72,73
74,75
74,76
74,77
75,76
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
106,107
107,108
107,109
108,109
110,111
112,113
113,114
113,115
114,115
116,117
120,121
121,122
121,123
122,123
-----nextToken-----
2,4,7,10,14,16,17,21,23,26,28,31,32,36,38,43,45,48,50,51,55,57,58,62,64,68,71,73,76,78,81,84,85,89,91,96,98,102,104,105,109,111,115,117,118,119,123,124,125
-----computeFrom-----
27,28
27,29
34,35
34,36
66,67
66,68
79,80
79,81
87,88
87,89
94,95
94,96
-----guardedBy-----
89,98
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void good2(){    switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
good2()
good2
{    switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        wchar_t * tmpData;        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }        free(data);    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wchar_t * tmpData;
wchar_t * tmpData;
wchar_t
* tmpData
*
tmpData
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
tmpData = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
tmpData
tmpData
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{            data = tmpData;            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);        }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(45,54,0)
(16,2,0)
(51,27,0)
(20,48,0)
(26,2,0)
(26,48,0)
(28,20,0)
(36,48,0)
(2,24,0)
(48,27,0)
(8,26,0)
(39,26,0)
(2,26,0)
(12,26,0)
(39,30,0)
(38,26,0)
(49,24,0)
(32,13,0)
(24,2,0)
(38,13,0)
(19,49,0)
(38,53,0)
(42,20,0)
(31,30,0)
(18,48,0)
(44,27,0)
(25,30,0)
(9,7,0)
(40,27,0)
(5,31,0)
(14,26,0)
(46,33,0)
(49,52,0)
(30,20,0)
(29,12,0)
(39,48,0)
(15,4,0)
(33,17,0)
(3,42,0)
(53,38,0)
(21,27,0)
(41,38,0)
(4,13,0)
(12,48,0)
(34,14,0)
(13,38,0)
(20,53,0)
(30,37,0)
(10,46,0)
(35,48,0)
(0,39,0)
(23,52,0)
(52,49,0)
(31,37,0)
(6,30,0)
(33,46,0)
(22,48,0)
(53,50,0)
(50,53,0)
(2,16,0)
(11,14,0)
(13,4,0)
(7,27,0)
(47,42,0)
(53,20,0)
(24,49,0)
(41,28,1)
(0,42,1)
(30,25,1)
(11,34,1)
(39,26,1)
(20,53,1)
(42,47,1)
(14,11,1)
(8,1,1)
(44,39,1)
(15,32,1)
(43,44,1)
(38,13,1)
(46,10,1)
(42,20,1)
(9,1,1)
(52,23,1)
(39,30,1)
(31,5,1)
(24,49,1)
(25,6,1)
(33,46,1)
(28,12,1)
(7,9,1)
(3,20,1)
(14,26,1)
(31,30,1)
(4,15,1)
(47,3,1)
(6,42,1)
(23,19,1)
(2,16,1)
(0,31,1)
(13,4,1)
(19,8,1)
(30,20,1)
(12,29,1)
(34,26,1)
(43,40,1)
(12,26,1)
(53,50,1)
(10,14,1)
(40,7,1)
(32,41,1)
(2,24,1)
(53,38,1)
(38,26,1)
(26,2,1)
(49,52,1)
(29,14,1)
(5,30,1)
(29,33,1)
(39,0,1)
(20,53,2)
(14,1,2)
(14,26,2)
(26,1,2)
(9,1,2)
(24,49,2)
(24,1,2)
(33,46,2)
(30,20,2)
(25,42,2)
(13,1,2)
(39,1,2)
(32,1,2)
(19,1,2)
(13,4,2)
(49,52,2)
(53,50,2)
(12,1,2)
(53,1,2)
(23,1,2)
(34,1,2)
(11,1,2)
(38,13,2)
(53,38,2)
(4,1,2)
(30,42,2)
(31,30,2)
(42,20,2)
(6,42,2)
(5,42,2)
(20,1,2)
(39,30,2)
(7,1,2)
(33,14,2)
(42,1,2)
(2,16,2)
(44,1,2)
(15,1,2)
(49,1,2)
(26,2,2)
(52,1,2)
(40,1,2)
(38,26,2)
(0,1,2)
(2,1,2)
(41,1,2)
(46,14,2)
(31,42,2)
(12,26,2)
(10,14,2)
(29,1,2)
(28,1,2)
(38,1,2)
(2,24,2)
(8,1,2)
(39,26,2)
(47,1,2)
(3,1,2)
-----------------------------------
(0,data)
(1,6)
(2,(wchar_t *)
(3,tmpData)
(4,sizeof(wchar_t)
(5,data)
(6,data)
(7,printLine("Benign, fixed string")
(8,data)
(9,"Benign, fixed string")
(10,1)
(11,NULL)
(12,printWLine(data)
(13,(130000)
(14,data == NULL)
(15,wchar_t)
(16,wchar_t *)
(17,)
(18,tmpData)
(19,100)
(20,tmpData = (wchar_t *)
(21,default:)
(22,data)
(23,wchar_t)
(24,malloc(100*sizeof(wchar_t)
(25,tmpData)
(26,* data = (wchar_t *)
(27,)
(28,tmpData)
(29,data)
(30,data = tmpData)
(31,printWLine(data)
(32,130000)
(33,exit(-1)
(34,data)
(35,if (data == NULL)
(36,if (tmpData != NULL)
(37,)
(38,realloc(data, (130000)
(39,free(data)
(40,break;)
(41,data)
(42,tmpData != NULL)
(43,RET)
(44,break;)
(45,switch(6)
(46,-1)
(47,NULL)
(48,)
(49,100*sizeof(wchar_t)
(50,wchar_t *)
(51,case 6:)
(52,sizeof(wchar_t)
(53,(wchar_t *)
(54,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^