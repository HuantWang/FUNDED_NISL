-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
71,72
72,73
72,74
73,74
77,78
77,79
79,80
79,81
79,82
79,83
79,84
79,85
80,81
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,69,70,74,75,76,78,81,82,83,84,88,89,90
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__char_realloc_15_bad()
CWE401_Memory_Leak__char_realloc_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(30,8,0)
(23,21,0)
(43,21,0)
(27,8,0)
(24,20,0)
(5,40,0)
(25,14,0)
(40,5,0)
(33,5,0)
(34,40,0)
(35,15,0)
(37,9,0)
(7,20,0)
(0,20,0)
(13,11,0)
(31,13,0)
(29,34,0)
(46,20,0)
(32,21,0)
(27,11,0)
(11,27,0)
(27,5,0)
(41,20,0)
(18,15,0)
(34,20,0)
(26,8,0)
(12,37,0)
(8,15,0)
(2,21,0)
(38,0,0)
(6,14,0)
(14,40,0)
(16,2,0)
(45,34,0)
(10,27,0)
(39,11,0)
(41,40,0)
(11,13,0)
(44,21,0)
(36,20,0)
(4,15,0)
(37,12,0)
(5,27,0)
(1,12,0)
(40,20,0)
(28,41,0)
(3,40,0)
(5,33,0)
(17,20,0)
(23,2,1)
(10,3,1)
(44,42,1)
(29,14,1)
(17,0,1)
(45,29,1)
(11,13,1)
(30,26,1)
(13,31,1)
(27,11,1)
(27,8,1)
(0,38,1)
(19,23,1)
(25,40,1)
(28,34,1)
(3,22,1)
(12,1,1)
(5,27,1)
(1,14,1)
(24,41,1)
(34,45,1)
(5,33,1)
(42,24,1)
(37,12,1)
(29,37,1)
(42,17,1)
(14,40,1)
(16,42,1)
(22,8,1)
(31,39,1)
(19,44,1)
(2,16,1)
(40,5,1)
(8,30,1)
(39,10,1)
(38,22,1)
(41,40,1)
(14,6,1)
(6,25,1)
(34,40,1)
(41,28,1)
(29,22,2)
(10,22,2)
(14,22,2)
(2,42,2)
(17,22,2)
(11,22,2)
(3,22,2)
(27,22,2)
(16,42,2)
(34,40,2)
(44,42,2)
(31,22,2)
(37,14,2)
(34,22,2)
(41,22,2)
(25,22,2)
(5,33,2)
(38,22,2)
(6,22,2)
(27,8,2)
(12,14,2)
(14,40,2)
(40,22,2)
(40,5,2)
(45,22,2)
(27,11,2)
(5,22,2)
(24,22,2)
(13,22,2)
(23,42,2)
(41,40,2)
(11,13,2)
(5,27,2)
(28,22,2)
(37,12,2)
(39,22,2)
(0,22,2)
(1,14,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,1)
(2,printLine("Benign, fixed string")
(3,data)
(4,data)
(5,(char *)
(6,NULL)
(7,default:)
(8,data = NULL)
(9,)
(10,data)
(11,100*sizeof(char)
(12,-1)
(13,sizeof(char)
(14,data == NULL)
(15,)
(16,"Benign, fixed string")
(17,break;)
(18,switch(6)
(19,RET)
(20,)
(21,)
(22,6)
(23,break;)
(24,break;)
(25,data)
(26,data)
(27,realloc(data, 100*sizeof(char)
(28,data)
(29,data)
(30,NULL)
(31,char)
(32,default:)
(33,char *)
(34,strcpy(data, "A String")
(35,switch(7)
(36,case 6:)
(37,exit(-1)
(38,"Benign, fixed string")
(39,100)
(40,data = (char *)
(41,printLine(data)
(42,7)
(43,case 7:)
(44,break;)
(45,"A String")
(46,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^