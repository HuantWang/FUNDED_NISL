-----label-----
0
-----code-----
static void goodG2B2()
{
    int * data;
    data = NULL;
    if(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int *)ALLOCA(100*sizeof(int));
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
40,41
40,42
41,42
41,43
42,43
46,47
47,48
47,49
48,49
50,51
50,52
51,52
54,55
54,56
56,57
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,43,44,45,49,52,53,55,57
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int *)ALLOCA(100*sizeof(int));        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)ALLOCA(100*sizeof(int));
data = (int *)ALLOCA(100*sizeof(int))
data
data
(int *)ALLOCA(100*sizeof(int))
int *
int
*
*
ALLOCA(100*sizeof(int))
ALLOCA
ALLOCA
100*sizeof(int)
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,16,0)
(0,13,0)
(24,10,0)
(22,10,0)
(19,9,0)
(10,24,0)
(19,20,0)
(23,11,0)
(24,19,0)
(16,13,0)
(10,22,0)
(19,24,0)
(5,0,0)
(18,11,0)
(17,11,0)
(21,16,0)
(15,13,0)
(4,14,0)
(28,0,0)
(9,19,0)
(3,22,0)
(1,10,0)
(26,23,0)
(9,14,0)
(27,9,0)
(16,9,0)
(25,23,0)
(0,9,0)
(20,19,0)
(13,14,0)
(2,16,0)
(16,4,0)
(7,11,0)
(0,9,1)
(16,21,1)
(4,16,1)
(28,9,1)
(26,25,1)
(16,13,1)
(8,23,1)
(2,13,1)
(15,0,1)
(24,10,1)
(21,2,1)
(16,9,1)
(12,4,1)
(12,8,1)
(23,26,1)
(10,22,1)
(1,27,1)
(9,19,1)
(19,24,1)
(22,3,1)
(13,15,1)
(3,1,1)
(6,12,1)
(19,20,1)
(27,8,1)
(5,28,1)
(0,5,1)
(4,8,2)
(19,20,2)
(2,8,2)
(5,8,2)
(9,8,2)
(13,8,2)
(19,8,2)
(9,19,2)
(24,10,2)
(10,22,2)
(22,8,2)
(24,8,2)
(10,8,2)
(4,16,2)
(16,8,2)
(3,8,2)
(19,24,2)
(0,9,2)
(1,8,2)
(27,8,2)
(16,13,2)
(15,8,2)
(21,8,2)
(28,8,2)
(0,8,2)
(16,9,2)
-----------------------------------
(0,data[0])
(1,100)
(2,data)
(3,int)
(4,printIntLine(data[0])
(5,0)
(6,RET)
(7,if(1)
(8,1)
(9,data = (int *)
(10,100*sizeof(int)
(11,)
(12,1)
(13,data[0] = 5)
(14,)
(15,5)
(16,data[0])
(17,if(1)
(18,data)
(19,(int *)
(20,int *)
(21,0)
(22,sizeof(int)
(23,data = NULL)
(24,ALLOCA(100*sizeof(int)
(25,data)
(26,NULL)
(27,data)
(28,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^