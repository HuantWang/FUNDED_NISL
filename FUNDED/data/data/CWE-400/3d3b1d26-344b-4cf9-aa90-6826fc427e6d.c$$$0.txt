-----label-----
0
-----code-----
static void goodB2G1()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
68,71
69,70
69,71
72,73
73,74
74,75
74,76
75,76
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,70,71,76,77,82,84
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(42,5,0)
(6,36,0)
(18,2,0)
(28,6,0)
(43,13,0)
(44,30,0)
(23,15,0)
(45,36,0)
(38,21,0)
(33,17,0)
(42,44,0)
(9,6,0)
(31,8,0)
(37,41,0)
(14,17,0)
(22,44,0)
(7,15,0)
(4,30,0)
(46,38,0)
(14,26,0)
(27,14,0)
(20,32,0)
(37,2,0)
(39,36,0)
(32,36,0)
(30,44,0)
(11,10,0)
(1,17,0)
(35,12,0)
(45,8,0)
(36,10,0)
(44,42,0)
(8,10,0)
(25,45,0)
(2,37,0)
(32,8,0)
(17,13,0)
(16,45,0)
(5,42,0)
(3,13,0)
(14,36,0)
(0,32,0)
(45,24,0)
(42,36,0)
(36,42,0)
(24,45,0)
(40,12,0)
(24,10,0)
(19,13,0)
(8,31,1)
(45,8,1)
(23,12,1)
(45,16,1)
(4,22,1)
(36,42,1)
(46,15,1)
(45,36,1)
(37,2,1)
(42,44,1)
(15,7,1)
(44,30,1)
(17,33,1)
(0,20,1)
(32,36,1)
(18,6,1)
(20,6,1)
(30,4,1)
(20,37,1)
(33,1,1)
(42,5,1)
(32,0,1)
(39,12,1)
(40,35,1)
(14,27,1)
(27,15,1)
(22,39,1)
(23,24,1)
(24,45,1)
(28,9,1)
(29,38,1)
(14,36,1)
(12,40,1)
(2,18,1)
(7,23,1)
(6,36,1)
(14,17,1)
(6,28,1)
(16,25,1)
(25,8,1)
(29,14,1)
(35,17,1)
(9,36,1)
(31,32,1)
(38,46,1)
(16,12,2)
(44,12,2)
(46,15,2)
(0,12,2)
(32,12,2)
(45,12,2)
(31,12,2)
(20,12,2)
(37,2,2)
(24,45,2)
(18,6,2)
(39,12,2)
(22,12,2)
(42,44,2)
(32,36,2)
(44,30,2)
(6,36,2)
(14,36,2)
(27,15,2)
(30,12,2)
(42,5,2)
(14,15,2)
(36,12,2)
(37,6,2)
(45,36,2)
(14,17,2)
(8,12,2)
(4,12,2)
(24,12,2)
(42,12,2)
(36,42,2)
(28,12,2)
(6,12,2)
(45,8,2)
(9,12,2)
(25,12,2)
(38,15,2)
(2,6,2)
-----------------------------------
(0,0)
(1,data)
(2,-1)
(3,if(5==5)
(4,int)
(5,int *)
(6,data == NULL)
(7,5)
(8,data[0] = 5)
(9,data)
(10,)
(11,if (data == NULL)
(12,5==5)
(13,)
(14,free(data)
(15,5!=5)
(16,0)
(17,data = NULL)
(18,1)
(19,data)
(20,data)
(21,)
(22,100)
(23,5)
(24,printIntLine(data[0])
(25,data)
(26,)
(27,data)
(28,NULL)
(29,RET)
(30,sizeof(int)
(31,5)
(32,data[0])
(33,NULL)
(34, sizeof(int)
(35,5)
(36,data = (int *)
(37,exit(-1)
(38,printLine("Benign, fixed string")
(39,data)
(40,5)
(41,)
(42,(int *)
(43,if(5!=5)
(44,calloc(100, sizeof(int)
(45,data[0])
(46,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^