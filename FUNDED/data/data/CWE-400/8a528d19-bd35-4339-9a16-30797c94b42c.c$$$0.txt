-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        size_t dataCopy = data;
        size_t data = dataCopy;
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
60,62
60,63
61,62
62,63
62,64
63,64
65,66
65,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
79,80
79,81
80,81
81,82
81,83
83,84
83,85
86,87
86,88
86,89
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
95,97
95,98
95,99
95,100
96,97
97,98
97,99
98,99
100,101
100,102
101,102
101,103
103,104
105,106
105,107
106,107
108,109
108,110
109,110
111,112
112,113
112,114
115,116
115,117
116,117
116,118
117,118
119,120
121,122
122,123
123,124
123,125
124,125
126,127
128,129
129,130
129,131
129,132
130,131
132,133
134,135
136,137
137,138
137,139
138,139
140,141
142,143
143,144
143,145
144,145
146,147
148,149
149,150
150,151
150,152
151,152
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,64,66,69,73,75,78,82,84,85,89,92,94,99,102,104,107,110,113,114,118,120,125,127,131,133,135,139,141,145,147,152,153
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
87,88
87,89
97,98
97,99
108,109
108,110
116,117
116,118
-----guardedBy-----
34,50
40,52
94,135
89,110
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fgets_31_bad
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        size_t dataCopy = data;        size_t data = dataCopy;        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t dataCopy = data;
size_t dataCopy = data;
size_t
size_t
dataCopy = data
dataCopy
= data
data
data
size_t data = dataCopy;
size_t data = dataCopy;
size_t
size_t
data = dataCopy
data
= dataCopy
dataCopy
dataCopy
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(68,55,0)
(54,53,0)
(70,14,0)
(36,65,0)
(4,30,0)
(25,7,0)
(56,49,0)
(46,3,0)
(24,69,0)
(43,4,0)
(58,68,0)
(20,67,0)
(22,43,0)
(20,27,0)
(19,30,0)
(67,39,0)
(44,9,0)
(27,40,0)
(49,56,0)
(30,45,0)
(7,55,0)
(34,40,0)
(65,45,0)
(4,65,0)
(1,38,0)
(2,49,0)
(16,41,0)
(56,59,0)
(62,3,0)
(14,13,0)
(5,65,0)
(12,13,0)
(7,9,0)
(26,43,0)
(6,7,0)
(9,10,0)
(38,37,0)
(57,14,0)
(68,7,0)
(61,41,0)
(53,7,0)
(66,4,0)
(8,27,0)
(15,40,0)
(3,62,0)
(53,55,0)
(51,30,0)
(71,67,0)
(69,30,0)
(9,44,0)
(17,29,0)
(32,27,0)
(40,45,0)
(6,55,0)
(64,20,0)
(63,35,0)
(0,37,0)
(28,62,0)
(43,30,0)
(67,20,0)
(48,45,0)
(14,27,0)
(21,4,0)
(31,20,0)
(42,17,0)
(60,69,0)
(10,9,0)
(13,14,0)
(47,55,0)
(18,53,0)
(33,20,0)
(9,7,0)
(11,6,0)
(50,14,0)
(37,44,0)
(62,43,0)
(37,43,0)
(35,52,0)
(37,38,0)
(44,37,0)
(4,67,0)
(41,7,0)
(6,7,1)
(43,22,1)
(6,11,1)
(20,27,1)
(57,70,1)
(21,66,1)
(62,3,1)
(8,65,1)
(71,13,1)
(68,58,1)
(28,43,1)
(33,71,1)
(20,64,1)
(49,2,1)
(61,7,1)
(4,21,1)
(3,46,1)
(13,14,1)
(23,68,1)
(46,28,1)
(18,56,1)
(66,35,1)
(13,12,1)
(4,65,1)
(67,20,1)
(5,36,1)
(58,6,1)
(53,7,1)
(31,33,1)
(56,49,1)
(17,42,1)
(16,61,1)
(37,38,1)
(44,37,1)
(41,7,1)
(14,27,1)
(25,62,1)
(14,50,1)
(1,0,1)
(62,43,1)
(65,5,1)
(70,27,1)
(63,13,1)
(50,57,1)
(2,41,1)
(43,4,1)
(9,44,1)
(18,41,1)
(41,16,1)
(27,32,1)
(54,18,1)
(22,26,1)
(64,31,1)
(66,67,1)
(32,8,1)
(68,7,1)
(0,25,1)
(38,1,1)
(23,17,1)
(9,10,1)
(26,4,1)
(35,63,1)
(42,62,1)
(11,53,1)
(12,14,1)
(37,43,1)
(7,9,1)
(53,54,1)
(4,67,1)
(2,41,2)
(63,13,2)
(31,13,2)
(41,62,2)
(6,62,2)
(53,7,2)
(68,62,2)
(4,65,2)
(43,4,2)
(37,43,2)
(25,62,2)
(14,27,2)
(58,62,2)
(44,37,2)
(37,62,2)
(54,62,2)
(1,62,2)
(71,13,2)
(0,62,2)
(56,41,2)
(38,62,2)
(56,49,2)
(9,10,2)
(44,62,2)
(62,3,2)
(20,27,2)
(6,7,2)
(64,13,2)
(37,38,2)
(7,62,2)
(33,13,2)
(9,44,2)
(17,62,2)
(53,62,2)
(18,62,2)
(35,13,2)
(13,14,2)
(11,62,2)
(68,7,2)
(7,9,2)
(67,20,2)
(4,67,2)
(67,13,2)
(9,62,2)
(49,41,2)
(61,62,2)
(62,43,2)
(41,7,2)
(42,62,2)
(20,13,2)
(16,62,2)
-----------------------------------
(0,data)
(1,char)
(2,1)
(3,strlen(HELLO_STRING)
(4,dataCopy = data)
(5,0)
(6,printLine(myString)
(7,myString = (char *)
(8,inputBuffer)
(9,(char *)
(10,char *)
(11,myString)
(12,NULL)
(13,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,inputBuffer)
(16,NULL)
(17,printLine("Input is less than the length of the source string")
(18,myString)
(19,data)
(20,strtoul(inputBuffer, NULL, 0)
(21,data)
(22,dataCopy)
(23,RET)
(24,if (data > strlen(HELLO_STRING)
(25,myString)
(26,data)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,data)
(29,)
(30,)
(31,NULL)
(32,"")
(33,inputBuffer)
(34,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(35,printLine("fgets()
(36,data)
(37,data*sizeof(char)
(38,sizeof(char)
(39,)
(40,)
(41,myString == NULL)
(42,"Input is less than the length of the source string")
(43,data = dataCopy)
(44,malloc(data*sizeof(char)
(45,)
(46,HELLO_STRING)
(47,if (myString == NULL)
(48,data)
(49,-1)
(50,stdin)
(51,dataCopy)
(52,)
(53,strcpy(myString, HELLO_STRING)
(54,HELLO_STRING)
(55,)
(56,exit(-1)
(57,CHAR_ARRAY_SIZE)
(58,myString)
(59,)
(60,myString)
(61,myString)
(62,data > strlen(HELLO_STRING)
(63,"fgets()
(64,0)
(65,data = 0)
(66,dataCopy)
(67,data = strtoul(inputBuffer, NULL, 0)
(68,free(myString)
(69,)
(70,inputBuffer)
(71,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^