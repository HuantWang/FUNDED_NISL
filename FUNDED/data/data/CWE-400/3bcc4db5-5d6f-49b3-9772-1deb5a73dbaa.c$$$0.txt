-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
79,80
79,81
80,81
83,84
83,85
84,85
86,87
87,88
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,82,85,90,92
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(3,43,0)
(40,32,0)
(1,25,0)
(30,9,0)
(47,3,0)
(8,14,0)
(33,25,0)
(49,7,0)
(13,43,0)
(29,31,0)
(33,10,0)
(3,10,0)
(12,44,0)
(41,32,0)
(34,32,0)
(46,20,0)
(31,48,0)
(17,10,0)
(43,40,0)
(6,37,0)
(9,10,0)
(43,3,0)
(37,20,0)
(8,10,0)
(14,8,0)
(20,32,0)
(44,34,0)
(22,0,0)
(10,32,0)
(9,37,0)
(10,8,0)
(36,25,0)
(28,23,0)
(12,10,0)
(29,8,0)
(27,12,0)
(35,33,0)
(15,23,0)
(8,29,0)
(44,12,0)
(39,40,0)
(19,49,0)
(5,48,0)
(38,3,0)
(37,9,0)
(48,31,0)
(7,4,0)
(2,31,0)
(33,24,0)
(31,29,0)
(25,23,0)
(7,49,0)
(0,10,0)
(21,0,0)
(18,12,0)
(26,9,0)
(34,44,0)
(16,23,0)
(36,1,1)
(12,18,1)
(44,12,1)
(42,25,1)
(37,6,1)
(6,9,1)
(47,0,1)
(17,42,1)
(40,39,1)
(46,37,1)
(47,7,1)
(48,5,1)
(11,34,1)
(3,10,1)
(33,25,1)
(5,2,1)
(37,9,1)
(30,40,1)
(8,14,1)
(19,0,1)
(9,10,1)
(3,38,1)
(12,10,1)
(20,46,1)
(26,30,1)
(0,10,1)
(49,19,1)
(39,43,1)
(45,11,1)
(43,3,1)
(33,35,1)
(18,27,1)
(10,8,1)
(21,22,1)
(45,33,1)
(0,21,1)
(7,49,1)
(22,10,1)
(25,36,1)
(38,47,1)
(9,26,1)
(31,48,1)
(2,17,1)
(8,29,1)
(33,10,1)
(13,3,1)
(29,31,1)
(34,44,1)
(27,20,1)
(43,13,1)
(35,11,1)
(11,42,1)
(44,42,2)
(0,10,2)
(35,11,2)
(27,42,2)
(2,42,2)
(29,42,2)
(12,42,2)
(33,10,2)
(47,42,2)
(22,42,2)
(7,49,2)
(18,42,2)
(17,42,2)
(9,10,2)
(39,42,2)
(8,29,2)
(10,42,2)
(30,42,2)
(33,11,2)
(43,3,2)
(37,9,2)
(26,42,2)
(3,10,2)
(12,10,2)
(49,0,2)
(44,12,2)
(40,42,2)
(33,25,2)
(21,42,2)
(3,42,2)
(37,42,2)
(38,42,2)
(46,42,2)
(6,42,2)
(43,42,2)
(8,42,2)
(31,42,2)
(5,42,2)
(48,42,2)
(34,42,2)
(8,14,2)
(20,42,2)
(19,0,2)
(7,0,2)
(31,48,2)
(34,44,2)
(10,8,2)
(9,42,2)
(13,42,2)
(0,42,2)
(29,31,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,100)
(3,data[0])
(4,)
(5,twoIntsStruct)
(6,intTwo)
(7,exit(-1)
(8,(twoIntsStruct *)
(9,data[0])
(10,data = (twoIntsStruct *)
(11,GLOBAL_CONST_TRUE)
(12,data[0])
(13,intOne)
(14,twoIntsStruct *)
(15,if(GLOBAL_CONST_TRUE)
(16,data)
(17,data)
(18,0)
(19,1)
(20,data[0].intTwo = 0)
(21,NULL)
(22,data)
(23,)
(24,)
(25,data = NULL)
(26,0)
(27,data)
(28,if(GLOBAL_CONST_TRUE)
(29,malloc(100*sizeof(twoIntsStruct)
(30,data)
(31,100*sizeof(twoIntsStruct)
(32,)
(33,free(data)
(34,printStructLine(&data[0])
(35,data)
(36,NULL)
(37,data[0].intTwo)
(38,0)
(39,0)
(40,data[0].intOne = 0)
(41,if (data == NULL)
(42,GLOBAL_CONST_TRUE)
(43,data[0].intOne)
(44,&data[0])
(45,RET)
(46,0)
(47,data)
(48,sizeof(twoIntsStruct)
(49,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^