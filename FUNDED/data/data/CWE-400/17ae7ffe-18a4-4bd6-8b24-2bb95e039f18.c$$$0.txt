-----label-----
0
-----code-----
static void goodG2B1()
{
    int64_t * data;
    data = NULL;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,9,11,12,16,18,21,26,27,32,36,38,41,43,47,48,53,54,55,59,62,63,66,68
-----computeFrom-----
14,15
14,16
30,31
30,32
42,43
42,44
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    int64_t * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    int64_t * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,1,0)
(27,10,0)
(21,17,0)
(8,4,0)
(4,8,0)
(2,24,0)
(8,22,0)
(18,21,0)
(10,27,0)
(12,4,0)
(17,21,0)
(27,7,0)
(19,4,0)
(20,0,0)
(27,17,0)
(4,10,0)
(11,21,0)
(5,22,0)
(7,27,0)
(3,24,0)
(13,18,0)
(23,24,0)
(6,24,0)
(10,22,0)
(26,10,0)
(21,18,0)
(25,6,0)
(16,6,0)
(17,27,0)
(12,19,1)
(4,12,1)
(14,8,1)
(6,16,1)
(9,14,1)
(15,6,1)
(5,10,1)
(4,10,1)
(14,0,1)
(17,21,1)
(16,25,1)
(10,27,1)
(19,5,1)
(27,17,1)
(0,20,1)
(20,15,1)
(11,26,1)
(26,15,1)
(21,18,1)
(13,11,1)
(8,4,1)
(27,7,1)
(18,13,1)
(20,15,2)
(21,15,2)
(4,10,2)
(8,15,2)
(27,17,2)
(13,15,2)
(27,15,2)
(27,7,2)
(5,15,2)
(8,4,2)
(26,15,2)
(0,15,2)
(10,15,2)
(18,15,2)
(12,15,2)
(11,15,2)
(17,15,2)
(19,15,2)
(10,27,2)
(21,18,2)
(17,21,2)
(4,15,2)
-----------------------------------
(0,printLine("Benign, fixed string")
(1,)
(2,data)
(3,if(staticFalse)
(4,data[0])
(5,L)
(6,data = NULL)
(7,int64_t *)
(8,printLongLongLine(data[0])
(9,RET)
(10,data = (int64_t *)
(11,100)
(12,0)
(13,int64_t)
(14,staticTrue)
(15,staticFalse)
(16,NULL)
(17,ALLOCA(100*sizeof(int64_t)
(18,sizeof(int64_t)
(19,data)
(20,"Benign, fixed string")
(21,100*sizeof(int64_t)
(22,)
(23,if(staticTrue)
(24,)
(25,data)
(26,data)
(27,(int64_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^