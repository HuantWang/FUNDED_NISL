-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_05_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(staticTrue)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
22,25
22,26
23,24
25,26
28,29
29,30
31,32
31,33
32,33
34,35
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
44,46
44,47
44,48
45,46
46,47
46,48
47,48
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
58,59
60,61
61,62
63,64
64,65
65,66
65,67
66,67
-----nextToken-----
2,4,8,10,14,16,19,24,26,27,30,33,39,41,43,48,49,52,56,57,59,62,67,68
-----computeFrom-----
12,13
12,14
46,47
46,48
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_05_bad(){    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_05_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_05_bad
{    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticTrue)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(staticTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticTrue
staticTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(29,8,0)
(9,1,0)
(9,17,0)
(27,17,0)
(8,19,0)
(30,8,0)
(9,36,0)
(12,13,0)
(16,19,0)
(28,36,0)
(3,10,0)
(25,7,0)
(20,7,0)
(23,20,0)
(8,2,0)
(1,9,0)
(19,36,0)
(33,10,0)
(4,9,0)
(36,14,0)
(15,24,0)
(36,10,0)
(34,7,0)
(19,8,0)
(26,13,0)
(6,10,0)
(21,14,0)
(0,15,0)
(11,13,0)
(31,26,0)
(14,36,0)
(7,5,0)
(35,20,0)
(17,9,0)
(17,13,0)
(8,19,1)
(21,28,1)
(18,17,1)
(26,13,1)
(23,35,1)
(19,16,1)
(4,27,1)
(27,13,1)
(17,9,1)
(31,15,1)
(15,0,1)
(17,13,1)
(35,22,1)
(9,1,1)
(22,8,1)
(0,17,1)
(32,36,1)
(12,11,1)
(29,30,1)
(20,23,1)
(30,32,1)
(14,21,1)
(13,12,1)
(19,36,1)
(27,26,1)
(36,14,1)
(9,36,1)
(9,4,1)
(22,32,1)
(11,20,1)
(16,29,1)
(26,31,1)
(18,22,1)
(30,32,2)
(4,17,2)
(23,22,2)
(27,22,2)
(16,32,2)
(8,19,2)
(17,13,2)
(19,36,2)
(9,1,2)
(4,22,2)
(13,22,2)
(36,14,2)
(35,22,2)
(17,9,2)
(29,32,2)
(11,22,2)
(19,32,2)
(9,17,2)
(31,17,2)
(8,32,2)
(20,22,2)
(27,17,2)
(12,22,2)
(17,17,2)
(9,36,2)
(17,22,2)
(26,17,2)
(9,22,2)
(26,13,2)
(15,17,2)
(0,17,2)
-----------------------------------
(0,"Hello")
(1,size_t)
(2,)
(3,if(staticTrue)
(4,count)
(5,)
(6,count)
(7,)
(8,fscanf(stdin, "%d", &count)
(9,(size_t)
(10,)
(11,i)
(12,0)
(13,i = 0)
(14,-1)
(15,printLine("Hello")
(16,count)
(17,i < (size_t)
(18,RET)
(19,&count)
(20,i = 0)
(21,1)
(22,staticTrue)
(23,0)
(24,)
(25,i)
(26,i++)
(27,i)
(28,count)
(29,"%d")
(30,stdin)
(31,i)
(32,staticTrue)
(33,if(staticTrue)
(34,for (i = 0; i < (size_t)
(35,i)
(36,count = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^