-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
27,28
27,29
28,29
29,30
31,32
32,33
32,34
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
41,43
41,44
41,45
42,43
43,44
43,45
44,45
47,48
47,49
48,49
50,51
50,52
51,52
51,53
52,53
55,56
57,58
58,59
60,61
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,14,16,20,25,26,30,36,38,40,45,46,49,53,54,56,59,64,65
-----computeFrom-----
12,13
12,14
23,24
23,25
43,44
43,45
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        /* FIX: Use a relatively small number */        count = 20;    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticReturnsTrue())    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(19,32,0)
(5,32,0)
(32,28,0)
(9,21,0)
(28,34,0)
(12,11,0)
(27,22,0)
(26,24,0)
(33,27,0)
(12,14,0)
(14,0,0)
(1,21,0)
(31,10,0)
(18,28,0)
(11,17,0)
(12,25,0)
(10,21,0)
(11,24,0)
(13,24,0)
(30,12,0)
(15,17,0)
(3,14,0)
(20,28,0)
(12,10,0)
(8,11,0)
(29,6,0)
(6,21,0)
(17,11,0)
(7,14,0)
(25,12,0)
(10,12,0)
(23,24,0)
(16,11,1)
(17,15,1)
(12,11,1)
(6,29,1)
(4,2,1)
(11,17,1)
(31,6,1)
(30,31,1)
(1,9,1)
(12,14,1)
(6,21,1)
(33,10,1)
(2,16,1)
(21,1,1)
(12,30,1)
(15,8,1)
(19,5,1)
(12,25,1)
(32,19,1)
(10,12,1)
(9,32,1)
(4,10,1)
(7,16,1)
(10,21,1)
(5,2,1)
(2,14,1)
(31,21,1)
(14,3,1)
(27,33,1)
(29,27,1)
(3,7,1)
(33,10,2)
(12,11,2)
(11,17,2)
(30,10,2)
(7,16,2)
(30,2,2)
(6,21,2)
(12,10,2)
(31,10,2)
(27,10,2)
(10,21,2)
(31,2,2)
(29,10,2)
(5,2,2)
(3,16,2)
(12,25,2)
(32,2,2)
(12,14,2)
(10,2,2)
(6,10,2)
(12,2,2)
(10,10,2)
(10,12,2)
(9,2,2)
(14,16,2)
(1,2,2)
(21,2,2)
(19,2,2)
-----------------------------------
(0,)
(1,0)
(2,staticReturnsTrue()
(3,20)
(4,RET)
(5,i)
(6,i++)
(7,count)
(8,count)
(9,i)
(10,i < (size_t)
(11,count = -1)
(12,(size_t)
(13,if(staticReturnsTrue()
(14,count = 20)
(15,1)
(16,staticReturnsTrue()
(17,-1)
(18,i)
(19,0)
(20,for (i = 0; i < (size_t)
(21,i = 0)
(22,)
(23,count)
(24,)
(25,size_t)
(26,if(staticReturnsTrue()
(27,printLine("Hello")
(28,)
(29,i)
(30,count)
(31,i)
(32,i = 0)
(33,"Hello")
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^