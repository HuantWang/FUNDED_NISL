-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_08_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticReturnsTrue())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
63,64
64,65
66,67
67,68
67,69
67,70
67,71
67,72
67,73
67,74
68,69
69,70
69,71
70,71
72,73
72,74
74,75
76,77
77,78
77,79
78,79
80,81
80,82
80,83
83,84
84,85
86,87
87,88
87,89
89,90
89,91
89,92
92,93
94,95
95,96
95,97
96,97
98,99
98,100
98,101
99,100
101,102
104,105
104,106
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
125,126
125,127
126,127
126,128
127,128
130,131
132,133
133,134
135,136
136,137
136,138
137,138
137,139
138,139
138,140
139,140
141,142
143,144
143,145
143,146
143,147
143,148
144,145
146,147
148,149
149,150
149,151
152,153
152,154
153,154
155,156
157,158
159,160
160,161
161,162
161,163
162,163
165,166
165,167
166,167
168,169
169,170
170,171
170,172
171,172
173,174
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,71,73,75,79,81,82,85,88,90,91,93,97,100,102,103,107,109,114,115,120,121,124,128,129,131,134,140,142,145,147,150,151,154,156,158,163,164,167,172,174
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
95,96
95,97
105,106
105,107
118,119
118,120
122,123
122,124
137,138
137,139
-----guardedBy-----
39,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_08_bad(){    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_08_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_08_bad
{    int count;    /* Initialize count */    count = -1;    if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(17,21,0)
(49,18,0)
(45,22,0)
(26,84,0)
(1,62,0)
(40,3,0)
(40,37,0)
(52,61,0)
(73,22,0)
(4,46,0)
(31,3,0)
(81,24,0)
(15,46,0)
(21,17,0)
(71,25,0)
(82,1,0)
(69,17,0)
(54,24,0)
(80,12,0)
(53,75,0)
(17,69,0)
(84,22,0)
(44,40,0)
(58,69,0)
(19,22,0)
(31,1,0)
(85,66,0)
(32,61,0)
(68,69,0)
(78,25,0)
(34,10,0)
(39,21,0)
(46,67,0)
(59,25,0)
(70,8,0)
(12,69,0)
(43,70,0)
(36,65,0)
(48,37,0)
(3,31,0)
(0,62,0)
(5,88,0)
(67,46,0)
(22,57,0)
(50,3,0)
(79,75,0)
(83,40,0)
(75,65,0)
(30,69,0)
(61,22,0)
(62,63,0)
(37,24,0)
(51,24,0)
(70,65,0)
(20,2,0)
(41,66,0)
(38,66,0)
(42,31,0)
(69,12,0)
(14,22,0)
(59,65,0)
(25,22,0)
(41,40,0)
(3,13,0)
(40,83,0)
(87,62,0)
(60,77,0)
(56,1,0)
(27,41,0)
(33,84,0)
(74,67,0)
(65,59,0)
(47,49,0)
(69,65,0)
(46,1,0)
(23,37,0)
(29,22,0)
(40,41,0)
(9,22,0)
(69,68,0)
(76,68,0)
(55,23,0)
(86,5,0)
(77,72,0)
(16,46,0)
(65,22,0)
(7,59,0)
(35,59,0)
(2,66,0)
(37,23,0)
(11,28,1)
(38,85,1)
(2,20,1)
(40,83,1)
(59,35,1)
(41,66,1)
(25,71,1)
(68,76,1)
(42,50,1)
(71,78,1)
(61,52,1)
(69,12,1)
(70,43,1)
(75,65,1)
(69,68,1)
(41,40,1)
(28,41,1)
(52,32,1)
(16,1,1)
(49,47,1)
(21,39,1)
(35,7,1)
(30,68,1)
(17,69,1)
(47,67,1)
(64,37,1)
(60,75,1)
(74,46,1)
(86,17,1)
(31,42,1)
(6,49,1)
(20,5,1)
(76,12,1)
(1,56,1)
(33,61,1)
(65,59,1)
(37,23,1)
(4,15,1)
(56,82,1)
(40,44,1)
(12,80,1)
(23,55,1)
(80,58,1)
(85,77,1)
(46,1,1)
(69,30,1)
(69,65,1)
(32,6,1)
(59,25,1)
(84,26,1)
(27,2,1)
(55,48,1)
(11,70,1)
(46,4,1)
(17,21,1)
(40,37,1)
(82,64,1)
(3,31,1)
(43,28,1)
(79,65,1)
(78,84,1)
(7,36,1)
(31,1,1)
(40,3,1)
(36,25,1)
(66,38,1)
(15,16,1)
(67,46,1)
(85,75,1)
(6,64,1)
(5,86,1)
(11,6,1)
(70,65,1)
(58,21,1)
(20,17,1)
(75,53,1)
(27,66,1)
(2,66,1)
(6,3,1)
(77,60,1)
(67,74,1)
(44,27,1)
(39,41,1)
(53,79,1)
(26,33,1)
(50,67,1)
(56,64,2)
(31,67,2)
(39,41,2)
(85,6,2)
(86,17,2)
(75,6,2)
(41,40,2)
(27,6,2)
(70,65,2)
(49,67,2)
(79,6,2)
(44,6,2)
(52,6,2)
(15,64,2)
(25,6,2)
(7,6,2)
(20,41,2)
(80,41,2)
(33,6,2)
(69,41,2)
(31,1,2)
(41,41,2)
(17,21,2)
(43,28,2)
(37,23,2)
(2,41,2)
(84,6,2)
(70,28,2)
(3,67,2)
(78,6,2)
(47,67,2)
(77,75,2)
(58,41,2)
(82,64,2)
(59,6,2)
(50,67,2)
(76,41,2)
(74,64,2)
(4,64,2)
(46,64,2)
(41,6,2)
(36,6,2)
(67,46,2)
(59,25,2)
(16,64,2)
(60,75,2)
(69,65,2)
(42,67,2)
(28,6,2)
(32,6,2)
(12,41,2)
(53,6,2)
(46,1,2)
(40,6,2)
(75,65,2)
(38,6,2)
(3,31,2)
(61,6,2)
(44,41,2)
(1,64,2)
(17,41,2)
(69,12,2)
(2,66,2)
(69,68,2)
(71,6,2)
(40,41,2)
(67,64,2)
(5,17,2)
(40,3,2)
(65,6,2)
(26,6,2)
(17,69,2)
(40,37,2)
(65,59,2)
(21,41,2)
(66,6,2)
(27,41,2)
(35,6,2)
(41,66,2)
(68,41,2)
(30,41,2)
(40,83,2)
-----------------------------------
(0,inputBuffer)
(1,inputBuffer[CHAR_ARRAY_SIZE] = "")
(2,i++)
(3,count = atoi(inputBuffer)
(4,stdin)
(5,exit(1)
(6,staticReturnsTrue()
(7,filename)
(8,)
(9,filename)
(10,)
(11,RET)
(12,sizeof(char)
(13,)
(14,i)
(15,CHAR_ARRAY_SIZE)
(16,inputBuffer)
(17,strlen(SENTENCE)
(18,)
(19,if (pFile)
(20,i)
(21,strlen(SENTENCE)
(22,)
(23,-1)
(24,)
(25,*filename = "output_bad.txt")
(26,NULL)
(27,i)
(28,pFile)
(29,for (i = 0; i < (size_t)
(30,pFile)
(31,atoi(inputBuffer)
(32,i)
(33,pFile)
(34,if (strlen(SENTENCE)
(35,"w+")
(36,pFile)
(37,count = -1)
(38,0)
(39,SENTENCE)
(40,(size_t)
(41,i < (size_t)
(42,inputBuffer)
(43,pFile)
(44,count)
(45,if (pFile == NULL)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,"fgets()
(48,count)
(49,printLine("fgets()
(50,count)
(51,if(staticReturnsTrue()
(52,0)
(53,NULL)
(54,if(staticReturnsTrue()
(55,1)
(56,"")
(57,)
(58,SENTENCE)
(59,fopen(filename, "w+")
(60,1)
(61,i = 0)
(62,)
(63,)
(64,staticReturnsTrue()
(65,pFile = fopen(filename, "w+")
(66,i = 0)
(67,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(68,strlen(SENTENCE)
(69,fwrite(SENTENCE, sizeof(char)
(70,fclose(pFile)
(71,"output_bad.txt")
(72,)
(73,pFile)
(74,NULL)
(75,pFile == NULL)
(76,SENTENCE)
(77,exit(1)
(78,filename)
(79,pFile)
(80,char)
(81,count)
(82,inputBuffer)
(83,size_t)
(84,*pFile = NULL)
(85,i)
(86,1)
(87,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(88,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^