-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_03_bad()
{
    int * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
68,70
69,70
69,71
72,73
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,57,58,59,63,66,67,70,71,73
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
54,55
54,56
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_03_bad(){    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_03_bad()
CWE401_Memory_Leak__int_calloc_03_bad
{    int * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,35,0)
(11,7,0)
(36,40,0)
(5,37,0)
(24,30,0)
(4,0,0)
(8,0,0)
(38,9,0)
(32,25,0)
(13,8,0)
(40,18,0)
(29,28,0)
(17,28,0)
(14,33,0)
(20,9,0)
(39,7,0)
(30,28,0)
(10,0,0)
(40,36,0)
(18,16,0)
(15,8,0)
(25,32,0)
(25,31,0)
(21,30,0)
(1,33,0)
(26,13,0)
(9,10,0)
(9,8,0)
(23,28,0)
(19,36,0)
(22,32,0)
(35,8,0)
(10,9,0)
(18,40,0)
(12,35,0)
(8,18,0)
(18,8,0)
(9,37,0)
(37,0,0)
(16,18,0)
(2,13,0)
(3,40,0)
(35,37,0)
(34,25,1)
(40,36,1)
(33,14,1)
(21,24,1)
(25,32,1)
(37,5,1)
(3,15,1)
(12,34,1)
(8,18,1)
(18,16,1)
(10,9,1)
(39,33,1)
(35,8,1)
(22,13,1)
(38,20,1)
(7,11,1)
(14,1,1)
(20,37,1)
(35,12,1)
(13,8,1)
(18,40,1)
(9,38,1)
(34,13,1)
(26,2,1)
(1,30,1)
(11,39,1)
(19,3,1)
(36,19,1)
(39,10,1)
(15,33,1)
(9,8,1)
(30,21,1)
(5,35,1)
(2,8,1)
(9,37,1)
(27,7,1)
(13,26,1)
(32,22,1)
(36,33,2)
(25,13,2)
(9,37,2)
(20,33,2)
(40,36,2)
(9,33,2)
(2,33,2)
(15,33,2)
(34,33,2)
(5,33,2)
(8,33,2)
(35,33,2)
(10,9,2)
(18,33,2)
(40,33,2)
(32,13,2)
(9,8,2)
(8,18,2)
(3,33,2)
(19,33,2)
(13,8,2)
(18,16,2)
(12,33,2)
(22,13,2)
(18,40,2)
(13,33,2)
(38,33,2)
(10,33,2)
(25,32,2)
(35,8,2)
(37,33,2)
(26,33,2)
-----------------------------------
(0,)
(1,5)
(2,data)
(3,100)
(4,if (data == NULL)
(5,5)
(6, sizeof(int)
(7,5==5)
(8,data = (int *)
(9,data[0])
(10,printIntLine(data[0])
(11,5)
(12,0)
(13,data == NULL)
(14,5)
(15,data)
(16,int *)
(17,if(5==5)
(18,(int *)
(19,int)
(20,data)
(21,NULL)
(22,1)
(23,if(5==5)
(24,data)
(25,exit(-1)
(26,NULL)
(27,RET)
(28,)
(29,data)
(30,data = NULL)
(31,)
(32,-1)
(33,5==5)
(34,data)
(35,data[0])
(36,sizeof(int)
(37,data[0] = 5)
(38,0)
(39,5)
(40,calloc(100, sizeof(int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^