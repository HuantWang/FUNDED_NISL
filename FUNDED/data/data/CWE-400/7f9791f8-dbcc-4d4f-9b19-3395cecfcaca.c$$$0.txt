-----label-----
1
-----code-----
size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(size_t data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
16,17
16,18
16,19
18,19
19,20
21,22
23,24
23,25
23,26
24,25
24,26
25,26
25,27
25,28
25,29
26,27
28,29
30,31
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
41,44
41,45
42,43
44,45
46,47
49,50
50,51
51,52
51,53
52,53
55,56
56,57
-----nextToken-----
3,5,8,10,15,17,20,22,27,29,31,33,35,40,43,45,47,48,53,54,57
-----computeFrom-----
24,25
24,26
38,39
38,40
-----guardedBy-----
29,45
35,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
size_t CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(size_t data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
size_t
size_t
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource(size_t data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_badSource
size_t data
size_t
size_t
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(10,3,0)
(22,17,0)
(23,7,0)
(16,17,0)
(26,20,0)
(26,7,0)
(26,9,0)
(0,15,0)
(20,15,0)
(2,26,0)
(12,26,0)
(4,15,0)
(21,19,0)
(6,20,0)
(20,9,0)
(14,3,0)
(17,3,0)
(17,22,0)
(18,17,0)
(20,8,0)
(11,17,0)
(13,23,0)
(15,3,0)
(24,23,0)
(15,20,0)
(5,21,0)
(3,23,0)
(25,15,0)
(1,22,0)
(18,16,1)
(17,3,1)
(5,22,1)
(21,5,1)
(11,3,1)
(17,18,1)
(0,6,1)
(3,14,1)
(15,4,1)
(22,1,1)
(1,17,1)
(26,20,1)
(26,12,1)
(25,0,1)
(12,21,1)
(26,9,1)
(4,25,1)
(2,26,1)
(12,20,1)
(22,17,1)
(15,3,1)
(16,11,1)
(20,15,1)
(6,22,1)
(14,10,1)
(20,9,1)
(21,22,2)
(20,15,2)
(17,3,2)
(4,22,2)
(25,22,2)
(15,22,2)
(22,17,2)
(26,9,2)
(26,20,2)
(20,22,2)
(6,22,2)
(5,22,2)
(15,3,2)
(20,9,2)
(2,26,2)
(0,22,2)
-----------------------------------
(0,inputBuffer)
(1,NULL)
(2,RET)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,0)
(5,"fgets()
(6,data)
(7,)
(8,)
(9,size_t data)
(10,inputBuffer)
(11,inputBuffer)
(12,data)
(13,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(14,"")
(15,strtoul(inputBuffer, NULL, 0)
(16,CHAR_ARRAY_SIZE)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,stdin)
(19,)
(20,data = strtoul(inputBuffer, NULL, 0)
(21,printLine("fgets()
(22,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(23,)
(24,inputBuffer)
(25,NULL)
(26,return data;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^