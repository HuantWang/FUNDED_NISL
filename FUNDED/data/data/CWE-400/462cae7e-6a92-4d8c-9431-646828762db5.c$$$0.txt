-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(globalReturnsTrue())
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
31,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,25,28,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
23,24
23,25
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_11_bad
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(globalReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(globalReturnsTrue())    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(23,12,0)
(22,36,0)
(16,42,0)
(20,47,0)
(17,49,0)
(49,42,0)
(34,28,0)
(7,44,0)
(48,41,0)
(2,6,0)
(9,44,0)
(47,44,0)
(43,39,0)
(22,20,0)
(11,24,0)
(20,22,0)
(12,1,0)
(4,44,0)
(33,48,0)
(8,41,0)
(5,28,0)
(44,42,0)
(15,6,0)
(38,7,0)
(25,22,0)
(47,20,0)
(4,42,0)
(14,4,0)
(45,41,0)
(18,7,0)
(36,22,0)
(37,3,0)
(29,41,0)
(27,47,0)
(32,12,0)
(21,11,0)
(39,48,0)
(22,48,0)
(28,44,0)
(0,39,0)
(26,0,0)
(6,2,0)
(39,0,0)
(40,36,0)
(44,47,0)
(22,11,0)
(39,11,0)
(49,44,0)
(3,10,0)
(11,30,0)
(13,48,0)
(47,27,0)
(24,11,0)
(7,42,0)
(2,35,0)
(37,39,1)
(22,48,1)
(46,48,1)
(39,11,1)
(19,11,1)
(5,34,1)
(7,44,1)
(11,24,1)
(38,18,1)
(22,36,1)
(25,9,1)
(6,15,1)
(36,40,1)
(18,2,1)
(40,25,1)
(39,0,1)
(28,44,1)
(43,19,1)
(47,20,1)
(49,44,1)
(2,6,1)
(48,13,1)
(9,39,1)
(14,7,1)
(47,27,1)
(28,5,1)
(3,37,1)
(31,49,1)
(31,3,1)
(21,46,1)
(34,44,1)
(17,4,1)
(31,19,1)
(26,43,1)
(44,47,1)
(18,28,1)
(13,33,1)
(20,22,1)
(4,14,1)
(24,21,1)
(4,44,1)
(49,17,1)
(7,38,1)
(15,28,1)
(0,26,1)
(22,11,1)
(39,48,1)
(19,46,1)
(22,36,2)
(47,27,2)
(39,19,2)
(39,11,2)
(44,39,2)
(9,39,2)
(7,44,2)
(5,39,2)
(14,39,2)
(22,48,2)
(11,24,2)
(20,22,2)
(47,20,2)
(28,44,2)
(17,39,2)
(7,39,2)
(18,39,2)
(0,19,2)
(4,39,2)
(2,28,2)
(24,46,2)
(26,19,2)
(36,39,2)
(39,0,2)
(22,11,2)
(28,39,2)
(34,39,2)
(11,46,2)
(43,19,2)
(21,46,2)
(15,28,2)
(3,39,2)
(47,39,2)
(39,48,2)
(49,44,2)
(40,39,2)
(38,39,2)
(44,47,2)
(49,39,2)
(4,44,2)
(37,39,2)
(25,39,2)
(22,39,2)
(2,6,2)
(20,39,2)
(6,28,2)
-----------------------------------
(0,strlen(HELLO_STRING)
(1,)
(2,exit(-1)
(3,printLine("Input is less than the length of the source string")
(4,printLine(myString)
(5,NULL)
(6,-1)
(7,strcpy(myString, HELLO_STRING)
(8,if(globalReturnsTrue()
(9,myString)
(10,)
(11,data = rand()
(12,)
(13,0)
(14,myString)
(15,1)
(16,if (myString == NULL)
(17,myString)
(18,myString)
(19,globalReturnsTrue()
(20,malloc(data*sizeof(char)
(21,data)
(22,data*sizeof(char)
(23,myString)
(24,rand()
(25,data)
(26,HELLO_STRING)
(27,char *)
(28,myString == NULL)
(29,if(globalReturnsTrue()
(30,)
(31,RET)
(32,if (data > strlen(HELLO_STRING)
(33,data)
(34,myString)
(35,)
(36,sizeof(char)
(37,"Input is less than the length of the source string")
(38,HELLO_STRING)
(39,data > strlen(HELLO_STRING)
(40,char)
(41,)
(42,)
(43,data)
(44,myString = (char *)
(45,data)
(46,globalReturnsTrue()
(47,(char *)
(48,data = 0)
(49,free(myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^