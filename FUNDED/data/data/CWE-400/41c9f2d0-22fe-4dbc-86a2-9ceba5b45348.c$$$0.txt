-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_12_bad()
{
    char * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize then use data */
        strcpy(data, "a string");
        printLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory initialized in the source */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
23,25
23,26
24,25
25,26
25,27
27,28
27,29
27,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
47,48
47,49
47,50
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
62,63
63,64
63,65
66,67
67,68
67,69
67,70
68,69
70,71
73,74
74,75
74,76
75,76
77,78
79,80
79,81
79,82
80,81
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
-----nextToken-----
2,4,8,10,11,15,17,21,26,28,29,31,35,38,40,44,46,51,54,56,59,61,64,65,69,71,72,76,78,82,84,89,91
-----computeFrom-----
13,14
13,15
33,34
33,35
49,50
49,51
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_12_bad(){    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
void
CWE401_Memory_Leak__strdup_char_12_bad()
CWE401_Memory_Leak__strdup_char_12_bad
{    char * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "a string");
strcpy(data, "a string")
strcpy
strcpy
data
data
"a string"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory initialized in the source */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory initialized in the source */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,35,0)
(19,10,0)
(14,22,0)
(11,14,0)
(8,23,0)
(0,4,0)
(6,11,0)
(9,12,0)
(13,10,0)
(16,19,0)
(7,14,0)
(32,34,0)
(2,15,0)
(3,30,0)
(35,15,0)
(17,19,0)
(18,22,0)
(34,23,0)
(9,6,0)
(11,6,0)
(34,14,0)
(34,24,0)
(18,14,0)
(33,12,0)
(15,38,0)
(4,23,0)
(20,10,0)
(23,38,0)
(23,35,0)
(12,9,0)
(39,38,0)
(30,14,0)
(36,10,0)
(27,15,0)
(29,30,0)
(37,18,0)
(35,23,0)
(4,38,0)
(11,21,0)
(25,9,0)
(30,22,0)
(14,11,0)
(21,11,0)
(6,9,0)
(38,31,0)
(27,26,1)
(7,26,1)
(18,14,1)
(34,32,1)
(1,4,1)
(6,9,1)
(33,25,1)
(9,12,1)
(29,14,1)
(12,33,1)
(11,21,1)
(35,15,1)
(34,23,1)
(37,30,1)
(16,17,1)
(32,1,1)
(8,15,1)
(19,16,1)
(2,27,1)
(28,34,1)
(26,19,1)
(34,14,1)
(35,5,1)
(5,8,1)
(15,2,1)
(4,0,1)
(25,7,1)
(30,14,1)
(11,6,1)
(3,29,1)
(4,23,1)
(23,35,1)
(18,37,1)
(1,18,1)
(14,11,1)
(0,23,1)
(28,1,1)
(30,3,1)
(23,26,2)
(6,26,2)
(11,26,2)
(29,26,2)
(25,26,2)
(23,35,2)
(9,26,2)
(6,9,2)
(34,1,2)
(9,12,2)
(34,14,2)
(37,26,2)
(33,26,2)
(4,23,2)
(35,26,2)
(4,26,2)
(14,11,2)
(18,26,2)
(0,26,2)
(30,26,2)
(18,14,2)
(8,26,2)
(35,15,2)
(34,23,2)
(14,26,2)
(15,26,2)
(32,1,2)
(3,26,2)
(11,21,2)
(7,26,2)
(11,6,2)
(2,26,2)
(30,14,2)
(12,26,2)
(27,26,2)
(5,26,2)
-----------------------------------
(0,data)
(1,globalReturnsTrueOrFalse()
(2,"myString")
(3,"a string")
(4,printLine(data)
(5,myString)
(6,ALLOCA(100*sizeof(char)
(7,data)
(8,data)
(9,100*sizeof(char)
(10,)
(11,(char *)
(12,sizeof(char)
(13,data)
(14,data = (char *)
(15,myString[] = "myString")
(16,NULL)
(17,data)
(18,printLine(data)
(19,data = NULL)
(20,if(globalReturnsTrueOrFalse()
(21,char *)
(22,)
(23,data = strdup(myString)
(24,)
(25,100)
(26,globalReturnsTrueOrFalse()
(27,myString)
(28,RET)
(29,data)
(30,strcpy(data, "a string")
(31,)
(32,data)
(33,char)
(34,free(data)
(35,strdup(myString)
(36,if(globalReturnsTrueOrFalse()
(37,data)
(38,)
(39,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^