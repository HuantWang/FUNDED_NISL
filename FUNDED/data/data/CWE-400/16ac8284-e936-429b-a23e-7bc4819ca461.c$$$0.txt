-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    data = NULL;
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize then use data */
        wcscpy(data, L"a string");
        printWLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
62,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,21,26,27,32,35,37,40,42,45,46,50,52,53,57,59,63,65
-----computeFrom-----
13,14
13,15
30,31
30,32
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    data = NULL;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    data = NULL;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize then use data */        wcscpy(data, L"a string");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"a string");
wcscpy(data, L"a string")
wcscpy
wcscpy
data
data
L"a string"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,18,0)
(5,17,0)
(18,9,0)
(17,10,0)
(9,18,0)
(0,10,0)
(18,8,0)
(15,24,0)
(1,10,0)
(24,7,0)
(23,8,0)
(11,9,0)
(6,23,0)
(9,12,0)
(12,9,0)
(7,24,0)
(14,16,0)
(7,12,0)
(19,18,0)
(22,7,0)
(12,7,0)
(9,11,0)
(16,13,0)
(4,10,0)
(2,17,0)
(3,16,1)
(7,24,1)
(5,2,1)
(6,18,1)
(19,20,1)
(16,14,1)
(23,6,1)
(23,18,1)
(21,3,1)
(18,9,1)
(17,5,1)
(3,23,1)
(15,22,1)
(24,15,1)
(20,17,1)
(12,7,1)
(14,20,1)
(9,12,1)
(9,11,1)
(22,19,1)
(23,18,2)
(9,11,2)
(7,24,2)
(15,20,2)
(22,20,2)
(12,20,2)
(14,20,2)
(18,20,2)
(18,9,2)
(9,20,2)
(6,20,2)
(9,12,2)
(12,7,2)
(7,20,2)
(19,20,2)
(24,20,2)
(16,20,2)
(23,20,2)
-----------------------------------
(0,data)
(1,if(staticReturnsFalse()
(2,data)
(3,staticReturnsTrue()
(4,if(staticReturnsTrue()
(5,NULL)
(6,data)
(7,100*sizeof(wchar_t)
(8,)
(9,(wchar_t *)
(10,)
(11,wchar_t *)
(12,ALLOCA(100*sizeof(wchar_t)
(13,)
(14,"Benign, fixed string")
(15,wchar_t)
(16,printLine("Benign, fixed string")
(17,data = NULL)
(18,data = (wchar_t *)
(19,data)
(20,staticReturnsFalse()
(21,RET)
(22,100)
(23,printWLine(data)
(24,sizeof(wchar_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^