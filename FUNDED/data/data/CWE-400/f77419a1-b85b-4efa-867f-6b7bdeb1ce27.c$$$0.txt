-----label-----
0
-----code-----
bool match_rule_match_metadata(MatchRule *rule, MessageMetadata *metadata) {
        return match_keys_match_metadata(&rule->keys, metadata);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
18,19
19,20
19,21
19,22
20,21
22,23
23,24
23,25
24,25
27,28
-----nextToken-----
2,4,7,9,10,13,15,16,21,25,26,28
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
bool match_rule_match_metadata(MatchRule *rule, MessageMetadata *metadata) {        return match_keys_match_metadata(&rule->keys, metadata);}
bool
match_rule_match_metadata(MatchRule *rule, MessageMetadata *metadata)
match_rule_match_metadata
MatchRule *rule
MatchRule
MatchRule
*rule
*
rule
MessageMetadata *metadata
MessageMetadata
MessageMetadata
*metadata
*
metadata
{        return match_keys_match_metadata(&rule->keys, metadata);}
return match_keys_match_metadata(&rule->keys, metadata);
match_keys_match_metadata(&rule->keys, metadata)
match_keys_match_metadata
match_keys_match_metadata
&rule->keys
rule->keys
rule
rule
keys
metadata
metadata
-----joern-----
(10,9,0)
(3,7,0)
(7,8,0)
(9,1,0)
(2,9,0)
(0,7,0)
(4,10,0)
(7,5,0)
(10,6,0)
(10,8,0)
(8,10,0)
(8,7,0)
(2,9,1)
(10,4,1)
(0,3,1)
(7,5,1)
(10,6,1)
(9,10,1)
(8,7,1)
(4,8,1)
(7,0,1)
(10,8,1)
(10,6,2)
(10,8,2)
(8,7,2)
(2,9,2)
(7,5,2)
-----------------------------------
(0,keys)
(1,)
(2,RET)
(3,rule)
(4,metadata)
(5,MatchRule *rule)
(6,MessageMetadata *metadata)
(7,rule->keys)
(8,&rule->keys)
(9,return match_keys_match_metadata(&rule->keys, metadata)
(10,match_keys_match_metadata(&rule->keys, metadata)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^