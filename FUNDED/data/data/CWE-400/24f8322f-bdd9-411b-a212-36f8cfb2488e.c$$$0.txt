-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
74,75
75,76
75,77
76,77
78,79
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,77,79
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_FIVE==5)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(13,11,0)
(31,0,0)
(12,29,0)
(5,4,0)
(8,34,0)
(19,22,0)
(35,25,0)
(32,11,0)
(16,8,0)
(14,22,0)
(29,9,0)
(6,0,0)
(9,29,0)
(27,34,0)
(26,15,0)
(34,11,0)
(15,26,0)
(0,7,0)
(21,26,0)
(3,25,0)
(30,7,0)
(30,17,0)
(22,19,0)
(18,17,0)
(9,20,0)
(8,7,0)
(22,14,0)
(24,15,0)
(8,36,0)
(28,7,0)
(33,4,0)
(7,17,0)
(1,34,0)
(10,30,0)
(7,22,0)
(19,26,0)
(2,11,0)
(22,7,0)
(26,19,0)
(6,7,1)
(16,25,1)
(34,27,1)
(25,3,1)
(28,4,1)
(4,33,1)
(31,6,1)
(23,25,1)
(35,30,1)
(24,21,1)
(27,1,1)
(33,5,1)
(8,16,1)
(35,4,1)
(3,35,1)
(22,19,1)
(30,7,1)
(15,24,1)
(23,8,1)
(10,0,1)
(8,34,1)
(8,7,1)
(0,31,1)
(26,15,1)
(19,26,1)
(7,22,1)
(22,14,1)
(30,10,1)
(29,12,1)
(5,34,1)
(21,28,1)
(12,0,1)
(9,29,1)
(0,7,1)
(10,9,1)
(22,19,2)
(0,4,2)
(29,0,2)
(7,22,2)
(7,4,2)
(9,29,2)
(0,7,2)
(28,4,2)
(6,4,2)
(12,0,2)
(8,34,2)
(15,4,2)
(19,4,2)
(19,26,2)
(26,4,2)
(31,4,2)
(8,25,2)
(24,4,2)
(9,0,2)
(22,14,2)
(10,4,2)
(30,7,2)
(16,25,2)
(22,4,2)
(8,7,2)
(21,4,2)
(30,4,2)
(26,15,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,if(GLOBAL_CONST_FIVE==5)
(3,5)
(4,GLOBAL_CONST_FIVE==5)
(5,GLOBAL_CONST_FIVE)
(6,data)
(7,data = (wchar_t *)
(8,free(data)
(9,exit(-1)
(10,data)
(11,)
(12,1)
(13,data)
(14,wchar_t *)
(15,sizeof(wchar_t)
(16,data)
(17,)
(18,if (data == NULL)
(19,malloc(100*sizeof(wchar_t)
(20,)
(21,100)
(22,(wchar_t *)
(23,RET)
(24,wchar_t)
(25,GLOBAL_CONST_FIVE==5)
(26,100*sizeof(wchar_t)
(27,NULL)
(28,data)
(29,-1)
(30,printWLine(data)
(31,NULL)
(32,if(GLOBAL_CONST_FIVE==5)
(33,5)
(34,data = NULL)
(35,GLOBAL_CONST_FIVE)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^