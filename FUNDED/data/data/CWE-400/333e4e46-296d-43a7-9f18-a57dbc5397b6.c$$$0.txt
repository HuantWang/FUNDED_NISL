-----label-----
0
-----code-----
static void goodB2G1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
89,92
90,91
92,93
93,94
94,95
94,96
95,96
98,99
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,91,96,97,102,104
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    struct _twoIntsStruct * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(6,49,0)
(31,38,0)
(27,12,0)
(49,6,0)
(0,15,0)
(36,16,0)
(15,27,0)
(12,27,0)
(33,9,0)
(11,13,0)
(28,44,0)
(32,52,0)
(38,30,0)
(27,15,0)
(10,5,0)
(3,54,0)
(25,6,0)
(37,18,0)
(49,16,0)
(44,1,0)
(39,54,0)
(4,18,0)
(12,51,0)
(53,47,0)
(23,17,0)
(21,16,0)
(32,9,0)
(26,46,0)
(45,5,0)
(5,43,0)
(7,6,0)
(13,43,0)
(47,41,0)
(43,16,0)
(50,37,0)
(30,17,0)
(15,26,0)
(44,21,0)
(1,43,0)
(7,54,0)
(51,12,0)
(8,30,0)
(13,48,0)
(46,26,0)
(13,37,0)
(2,1,0)
(19,21,0)
(34,18,0)
(26,15,0)
(9,32,0)
(12,43,0)
(17,16,0)
(43,12,0)
(6,7,0)
(38,43,0)
(54,7,0)
(30,38,0)
(22,1,0)
(1,44,0)
(24,37,0)
(20,38,0)
(42,18,0)
(54,43,0)
(6,25,0)
(14,43,0)
(0,14,1)
(6,25,1)
(22,2,1)
(35,29,1)
(27,15,1)
(53,35,1)
(15,26,1)
(30,8,1)
(3,39,1)
(31,32,1)
(19,44,1)
(32,9,1)
(47,53,1)
(24,50,1)
(43,12,1)
(5,10,1)
(39,21,1)
(8,38,1)
(26,46,1)
(14,29,1)
(9,33,1)
(49,6,1)
(10,45,1)
(30,38,1)
(29,37,1)
(35,49,1)
(5,43,1)
(13,11,1)
(13,37,1)
(54,43,1)
(26,0,1)
(21,19,1)
(44,28,1)
(12,51,1)
(38,20,1)
(40,13,1)
(33,5,1)
(31,5,1)
(17,23,1)
(44,1,1)
(40,47,1)
(28,1,1)
(12,27,1)
(7,54,1)
(37,24,1)
(23,30,1)
(6,7,1)
(1,43,1)
(11,35,1)
(45,43,1)
(38,43,1)
(2,17,1)
(13,43,1)
(54,3,1)
(20,31,1)
(1,22,1)
(11,35,2)
(14,29,2)
(45,29,2)
(28,29,2)
(7,29,2)
(27,29,2)
(13,35,2)
(7,54,2)
(12,29,2)
(54,29,2)
(39,29,2)
(3,29,2)
(43,12,2)
(22,29,2)
(5,43,2)
(32,5,2)
(54,43,2)
(49,29,2)
(32,9,2)
(12,51,2)
(8,29,2)
(27,15,2)
(49,6,2)
(20,29,2)
(38,43,2)
(44,29,2)
(30,29,2)
(53,35,2)
(19,29,2)
(43,29,2)
(13,37,2)
(1,43,2)
(6,25,2)
(21,29,2)
(44,1,2)
(38,29,2)
(30,38,2)
(6,7,2)
(5,29,2)
(47,35,2)
(23,29,2)
(26,46,2)
(6,29,2)
(1,29,2)
(15,29,2)
(0,29,2)
(2,29,2)
(33,5,2)
(13,43,2)
(17,29,2)
(12,27,2)
(31,29,2)
(9,5,2)
(26,29,2)
(15,26,2)
(10,29,2)
-----------------------------------
(0,100)
(1,data[0])
(2,data)
(3,0)
(4,if(globalFalse)
(5,data == NULL)
(6,(twoIntsStruct *)
(7,&data[0])
(8,intOne)
(9,-1)
(10,NULL)
(11,data)
(12,(struct _twoIntsStruct *)
(13,free(data)
(14,data)
(15,100*sizeof(struct _twoIntsStruct)
(16,)
(17,data[0].intOne = 0)
(18,)
(19,0)
(20,0)
(21,data[0].intTwo = 0)
(22,0)
(23,0)
(24,NULL)
(25,twoIntsStruct *)
(26,sizeof(struct _twoIntsStruct)
(27,malloc(100*sizeof(struct _twoIntsStruct)
(28,intTwo)
(29,globalTrue)
(30,data[0].intOne)
(31,data)
(32,exit(-1)
(33,1)
(34,if(globalTrue)
(35,globalFalse)
(36,if (data == NULL)
(37,data = NULL)
(38,data[0])
(39,data)
(40,RET)
(41,)
(42,data)
(43,data = (struct _twoIntsStruct *)
(44,data[0].intTwo)
(45,data)
(46,struct _twoIntsStruct)
(47,printLine("Benign, fixed string")
(48,)
(49,printStructLine((twoIntsStruct *)
(50,data)
(51,struct _twoIntsStruct *)
(52,)
(53,"Benign, fixed string")
(54,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^