-----label-----
1
-----code-----
static void
rack_init_sysctls()
{
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "rate_sample_method", CTLFLAG_RW,
	    &rack_rate_sample_method , USE_RTT_LOW,
	    "What method should we use for rate sampling 0=high, 1=low ");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "data_after_close", CTLFLAG_RW,
	    &rack_ignore_data_after_close, 0,
	    "Do we hold off sending a RST until all pending data is ack'd");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlpmethod", CTLFLAG_RW,
	    &rack_tlp_threshold_use, TLP_USE_TWO_ONE,
	    "What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "min_pace_time", CTLFLAG_RW,
	    &rack_min_pace_time, 0,
	    "Should we enforce a minimum pace time of 1ms");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "min_pace_segs", CTLFLAG_RW,
	    &rack_min_pace_time_seg_req, 6,
	    "How many segments have to be in the len to enforce min-pace-time");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "idle_reduce_high", CTLFLAG_RW,
	    &rack_reduce_largest_on_idle, 0,
	    "Should we reduce the largest cwnd seen to IW on idle reduction");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "bb_verbose", CTLFLAG_RW,
	    &rack_verbose_logging, 0,
	    "Should RACK black box logging be verbose");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "sackfiltering", CTLFLAG_RW,
	    &rack_use_sack_filter, 1,
	    "Do we use sack filtering?");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "delayed_ack", CTLFLAG_RW,
	    &rack_delayed_ack_time, 200,
	    "Delayed ack time (200ms)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlpminto", CTLFLAG_RW,
	    &rack_tlp_min, 10,
	    "TLP minimum timeout per the specification (10ms)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "precache", CTLFLAG_RW,
	    &rack_precache, 0,
	    "Where should we precache the mcopy (0 is not at all)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "sblklimit", CTLFLAG_RW,
	    &rack_sack_block_limit, 128,
	    "When do we start paying attention to small sack blocks");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "send_oldest", CTLFLAG_RW,
	    &rack_always_send_oldest, 1,
	    "Should we always send the oldest TLP and RACK-TLP");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "rack_tlp_in_recovery", CTLFLAG_RW,
	    &rack_tlp_in_recovery, 1,
	    "Can we do a TLP during recovery?");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "rack_tlimit", CTLFLAG_RW,
	    &rack_limited_retran, 0,
	    "How many times can a rack timeout drive out sends");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "minrto", CTLFLAG_RW,
	    &rack_rto_min, 0,
	    "Minimum RTO in ms -- set with caution below 1000 due to TLP");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "maxrto", CTLFLAG_RW,
	    &rack_rto_max, 0,
	    "Maxiumum RTO in ms -- should be at least as large as min_rto");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_retry", CTLFLAG_RW,
	    &rack_tlp_max_resend, 2,
	    "How many times does TLP retry a single segment or multiple with no ACK");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "recovery_loss_prop", CTLFLAG_RW,
	    &rack_use_proportional_reduce, 0,
	    "Should we proportionaly reduce cwnd based on the number of losses ");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "recovery_prop", CTLFLAG_RW,
	    &rack_proportional_rate, 10,
	    "What percent reduction per loss");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_cwnd_flag", CTLFLAG_RW,
	    &rack_lower_cwnd_at_tlp, 0,
	    "When a TLP completes a retran should we enter recovery?");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "hptsi_reduces", CTLFLAG_RW,
	    &rack_slot_reduction, 4,
	    "When setting a slot should we reduce by divisor");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "hptsi_every_seg", CTLFLAG_RW,
	    &rack_pace_every_seg, 1,
	    "Should we pace out every segment hptsi");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "hptsi_seg_max", CTLFLAG_RW,
	    &rack_hptsi_segments, 6,
	    "Should we pace out only a limited size of segments");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "prr_sendalot", CTLFLAG_RW,
	    &rack_send_a_lot_in_prr, 1,
	    "Send a lot in prr");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "minto", CTLFLAG_RW,
	    &rack_min_to, 1,
	    "Minimum rack timeout in milliseconds");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "earlyrecoveryseg", CTLFLAG_RW,
	    &rack_early_recovery_max_seg, 6,
	    "Max segments in early recovery");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "earlyrecovery", CTLFLAG_RW,
	    &rack_early_recovery, 1,
	    "Do we do early recovery with rack");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "reorder_thresh", CTLFLAG_RW,
	    &rack_reorder_thresh, 2,
	    "What factor for rack will be added when seeing reordering (shift right)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "rtt_tlp_thresh", CTLFLAG_RW,
	    &rack_tlp_thresh, 1,
	    "what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "reorder_fade", CTLFLAG_RW,
	    &rack_reorder_fade, 0,
	    "Does reorder detection fade, if so how many ms (0 means never)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "pktdelay", CTLFLAG_RW,
	    &rack_pkt_delay, 1,
	    "Extra RACK time (in ms) besides reordering thresh");
	SYSCTL_ADD_U32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "split_limit", CTLFLAG_RW,
	    &rack_map_split_limit, 0,
	    "Is there a limit on the number of map split entries (0=unlimited)");
	SYSCTL_ADD_S32(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "inc_var", CTLFLAG_RW,
	    &rack_inc_var, 0,
	    "Should rack add to the TLP timer the variance in rtt calculation");
	rack_badfr = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "badfr", CTLFLAG_RD,
	    &rack_badfr, "Total number of bad FRs");
	rack_badfr_bytes = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "badfr_bytes", CTLFLAG_RD,
	    &rack_badfr_bytes, "Total number of bad FRs");
	rack_rtm_prr_retran = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "prrsndret", CTLFLAG_RD,
	    &rack_rtm_prr_retran,
	    "Total number of prr based retransmits");
	rack_rtm_prr_newdata = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "prrsndnew", CTLFLAG_RD,
	    &rack_rtm_prr_newdata,
	    "Total number of prr based new transmits");
	rack_timestamp_mismatch = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tsnf", CTLFLAG_RD,
	    &rack_timestamp_mismatch,
	    "Total number of timestamps that we could not find the reported ts");
	rack_find_high = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "findhigh", CTLFLAG_RD,
	    &rack_find_high,
	    "Total number of FIN causing find-high");
	rack_reorder_seen = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "reordering", CTLFLAG_RD,
	    &rack_reorder_seen,
	    "Total number of times we added delay due to reordering");
	rack_tlp_tot = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_to_total", CTLFLAG_RD,
	    &rack_tlp_tot,
	    "Total number of tail loss probe expirations");
	rack_tlp_newdata = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_new", CTLFLAG_RD,
	    &rack_tlp_newdata,
	    "Total number of tail loss probe sending new data");

	rack_tlp_retran = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_retran", CTLFLAG_RD,
	    &rack_tlp_retran,
	    "Total number of tail loss probe sending retransmitted data");
	rack_tlp_retran_bytes = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_retran_bytes", CTLFLAG_RD,
	    &rack_tlp_retran_bytes,
	    "Total bytes of tail loss probe sending retransmitted data");
	rack_tlp_retran_fail = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_retran_fail", CTLFLAG_RD,
	    &rack_tlp_retran_fail,
	    "Total number of tail loss probe sending retransmitted data that failed (wait for t3)");
	rack_to_tot = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "rack_to_tot", CTLFLAG_RD,
	    &rack_to_tot,
	    "Total number of times the rack to expired?");
	rack_to_arm_rack = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "arm_rack", CTLFLAG_RD,
	    &rack_to_arm_rack,
	    "Total number of times the rack timer armed?");
	rack_to_arm_tlp = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "arm_tlp", CTLFLAG_RD,
	    &rack_to_arm_tlp,
	    "Total number of times the tlp timer armed?");
	rack_paced_segments = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "paced", CTLFLAG_RD,
	    &rack_paced_segments,
	    "Total number of times a segment send caused hptsi");
	rack_unpaced_segments = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "unpaced", CTLFLAG_RD,
	    &rack_unpaced_segments,
	    "Total number of times a segment did not cause hptsi");
	rack_saw_enobuf = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "saw_enobufs", CTLFLAG_RD,
	    &rack_saw_enobuf,
	    "Total number of times a segment did not cause hptsi");
	rack_saw_enetunreach = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "saw_enetunreach", CTLFLAG_RD,
	    &rack_saw_enetunreach,
	    "Total number of times a segment did not cause hptsi");
	rack_to_alloc = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "allocs", CTLFLAG_RD,
	    &rack_to_alloc,
	    "Total allocations of tracking structures");
	rack_to_alloc_hard = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "allochard", CTLFLAG_RD,
	    &rack_to_alloc_hard,
	    "Total allocations done with sleeping the hard way");
	rack_to_alloc_emerg = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "allocemerg", CTLFLAG_RD,
	    &rack_to_alloc_emerg,
	    "Total allocations done from emergency cache");
	rack_alloc_limited_conns = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "alloc_limited_conns", CTLFLAG_RD,
	    &rack_alloc_limited_conns,
	    "Connections with allocations dropped due to limit");
	rack_split_limited = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "split_limited", CTLFLAG_RD,
	    &rack_split_limited,
	    "Split allocations dropped due to limit");
	rack_sack_proc_all = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "sack_long", CTLFLAG_RD,
	    &rack_sack_proc_all,
	    "Total times we had to walk whole list for sack processing");

	rack_sack_proc_restart = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "sack_restart", CTLFLAG_RD,
	    &rack_sack_proc_restart,
	    "Total times we had to walk whole list due to a restart");
	rack_sack_proc_short = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "sack_short", CTLFLAG_RD,
	    &rack_sack_proc_short,
	    "Total times we took shortcut for sack processing");
	rack_enter_tlp_calc = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_calc_entered", CTLFLAG_RD,
	    &rack_enter_tlp_calc,
	    "Total times we called calc-tlp");
	rack_used_tlpmethod = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "hit_tlp_method", CTLFLAG_RD,
	    &rack_used_tlpmethod,
	    "Total number of runt sacks");
	rack_used_tlpmethod2 = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "hit_tlp_method2", CTLFLAG_RD,
	    &rack_used_tlpmethod2,
	    "Total number of runt sacks 2");
	rack_runt_sacks = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "runtsacks", CTLFLAG_RD,
	    &rack_runt_sacks,
	    "Total number of runt sacks");
	rack_progress_drops = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "prog_drops", CTLFLAG_RD,
	    &rack_progress_drops,
	    "Total number of progress drops");
	rack_input_idle_reduces = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "idle_reduce_oninput", CTLFLAG_RD,
	    &rack_input_idle_reduces,
	    "Total number of idle reductions on input");
	rack_tlp_does_nada = counter_u64_alloc(M_WAITOK);
	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "tlp_nada", CTLFLAG_RD,
	    &rack_tlp_does_nada,
	    "Total number of nada tlp calls");
	COUNTER_ARRAY_ALLOC(rack_out_size, TCP_MSS_ACCT_SIZE, M_WAITOK);
	SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "outsize", CTLFLAG_RD,
	    rack_out_size, TCP_MSS_ACCT_SIZE, "MSS send sizes");
	COUNTER_ARRAY_ALLOC(rack_opts_arry, RACK_OPTS_SIZE, M_WAITOK);
	SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "opts", CTLFLAG_RD,
	    rack_opts_arry, RACK_OPTS_SIZE, "RACK Option Stats");
	SYSCTL_ADD_PROC(&rack_sysctl_ctx,
	    SYSCTL_CHILDREN(rack_sysctl_root),
	    OID_AUTO, "clear", CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE,
	    &rack_clear_counter, 0, sysctl_rack_clear, "IU", "Clear counters");
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
5,15
5,16
5,17
5,18
5,19
5,20
5,21
5,22
5,23
5,24
5,25
5,26
5,27
5,28
5,29
5,30
5,31
5,32
5,33
5,34
5,35
5,36
5,37
5,38
5,39
5,40
5,41
5,42
5,43
5,44
5,45
5,46
5,47
5,48
5,49
5,50
5,51
5,52
5,53
5,54
5,55
5,56
5,57
5,58
5,59
5,60
5,61
5,62
5,63
5,64
5,65
5,66
5,67
5,68
5,69
5,70
5,71
5,72
5,73
5,74
5,75
5,76
5,77
5,78
5,79
5,80
5,81
5,82
5,83
5,84
5,85
5,86
5,87
5,88
5,89
5,90
5,91
5,92
5,93
5,94
5,95
5,96
5,97
5,98
5,99
5,100
5,101
5,102
5,103
5,104
5,105
5,106
5,107
5,108
5,109
5,110
5,111
5,112
6,7
7,8
7,9
7,10
7,11
7,12
7,13
7,14
7,15
7,16
8,9
10,11
11,12
13,14
13,15
14,15
16,17
18,19
21,22
23,24
24,25
26,27
29,30
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
31,32
33,34
34,35
36,37
36,38
37,38
39,40
41,42
44,45
46,47
47,48
51,52
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
53,54
55,56
56,57
58,59
58,60
59,60
61,62
63,64
66,67
68,69
69,70
71,72
74,75
75,76
75,77
75,78
75,79
75,80
75,81
75,82
75,83
75,84
76,77
78,79
79,80
81,82
81,83
82,83
84,85
86,87
89,90
91,92
92,93
96,97
97,98
97,99
97,100
97,101
97,102
97,103
97,104
97,105
97,106
98,99
100,101
101,102
103,104
103,105
104,105
106,107
108,109
111,112
113,114
114,115
118,119
119,120
119,121
119,122
119,123
119,124
119,125
119,126
119,127
119,128
120,121
122,123
123,124
125,126
125,127
126,127
128,129
130,131
133,134
135,136
136,137
140,141
141,142
141,143
141,144
141,145
141,146
141,147
141,148
141,149
141,150
142,143
144,145
145,146
147,148
147,149
148,149
150,151
152,153
155,156
157,158
158,159
162,163
163,164
163,165
163,166
163,167
163,168
163,169
163,170
163,171
163,172
164,165
166,167
167,168
169,170
169,171
170,171
172,173
174,175
177,178
179,180
180,181
184,185
185,186
185,187
185,188
185,189
185,190
185,191
185,192
185,193
185,194
186,187
188,189
189,190
191,192
191,193
192,193
194,195
196,197
199,200
201,202
202,203
206,207
207,208
207,209
207,210
207,211
207,212
207,213
207,214
207,215
207,216
208,209
210,211
211,212
213,214
213,215
214,215
216,217
218,219
221,222
223,224
224,225
228,229
229,230
229,231
229,232
229,233
229,234
229,235
229,236
229,237
229,238
230,231
232,233
233,234
235,236
235,237
236,237
238,239
240,241
243,244
245,246
246,247
250,251
251,252
251,253
251,254
251,255
251,256
251,257
251,258
251,259
251,260
252,253
254,255
255,256
257,258
257,259
258,259
260,261
262,263
265,266
267,268
268,269
272,273
273,274
273,275
273,276
273,277
273,278
273,279
273,280
273,281
273,282
274,275
276,277
277,278
279,280
279,281
280,281
282,283
284,285
287,288
289,290
290,291
294,295
295,296
295,297
295,298
295,299
295,300
295,301
295,302
295,303
295,304
296,297
298,299
299,300
301,302
301,303
302,303
304,305
306,307
309,310
311,312
312,313
316,317
317,318
317,319
317,320
317,321
317,322
317,323
317,324
317,325
317,326
318,319
320,321
321,322
323,324
323,325
324,325
326,327
328,329
331,332
333,334
334,335
338,339
339,340
339,341
339,342
339,343
339,344
339,345
339,346
339,347
339,348
340,341
342,343
343,344
345,346
345,347
346,347
348,349
350,351
353,354
355,356
356,357
360,361
361,362
361,363
361,364
361,365
361,366
361,367
361,368
361,369
361,370
362,363
364,365
365,366
367,368
367,369
368,369
370,371
372,373
375,376
377,378
378,379
382,383
383,384
383,385
383,386
383,387
383,388
383,389
383,390
383,391
383,392
384,385
386,387
387,388
389,390
389,391
390,391
392,393
394,395
397,398
399,400
400,401
404,405
405,406
405,407
405,408
405,409
405,410
405,411
405,412
405,413
405,414
406,407
408,409
409,410
411,412
411,413
412,413
414,415
416,417
419,420
421,422
422,423
426,427
427,428
427,429
427,430
427,431
427,432
427,433
427,434
427,435
427,436
428,429
430,431
431,432
433,434
433,435
434,435
436,437
438,439
441,442
443,444
444,445
448,449
449,450
449,451
449,452
449,453
449,454
449,455
449,456
449,457
449,458
450,451
452,453
453,454
455,456
455,457
456,457
458,459
460,461
463,464
465,466
466,467
470,471
471,472
471,473
471,474
471,475
471,476
471,477
471,478
471,479
471,480
472,473
474,475
475,476
477,478
477,479
478,479
480,481
482,483
485,486
487,488
488,489
492,493
493,494
493,495
493,496
493,497
493,498
493,499
493,500
493,501
493,502
494,495
496,497
497,498
499,500
499,501
500,501
502,503
504,505
507,508
509,510
510,511
514,515
515,516
515,517
515,518
515,519
515,520
515,521
515,522
515,523
515,524
516,517
518,519
519,520
521,522
521,523
522,523
524,525
526,527
529,530
531,532
532,533
536,537
537,538
537,539
537,540
537,541
537,542
537,543
537,544
537,545
537,546
538,539
540,541
541,542
543,544
543,545
544,545
546,547
548,549
551,552
553,554
554,555
558,559
559,560
559,561
559,562
559,563
559,564
559,565
559,566
559,567
559,568
560,561
562,563
563,564
565,566
565,567
566,567
568,569
570,571
573,574
575,576
576,577
580,581
581,582
581,583
581,584
581,585
581,586
581,587
581,588
581,589
581,590
582,583
584,585
585,586
587,588
587,589
588,589
590,591
592,593
595,596
597,598
598,599
602,603
603,604
603,605
603,606
603,607
603,608
603,609
603,610
603,611
603,612
604,605
606,607
607,608
609,610
609,611
610,611
612,613
614,615
617,618
619,620
620,621
624,625
625,626
625,627
625,628
625,629
625,630
625,631
625,632
625,633
625,634
626,627
628,629
629,630
631,632
631,633
632,633
634,635
636,637
639,640
641,642
642,643
646,647
647,648
647,649
647,650
647,651
647,652
647,653
647,654
647,655
647,656
648,649
650,651
651,652
653,654
653,655
654,655
656,657
658,659
661,662
663,664
664,665
668,669
669,670
669,671
669,672
669,673
669,674
669,675
669,676
669,677
669,678
670,671
672,673
673,674
675,676
675,677
676,677
678,679
680,681
683,684
685,686
686,687
690,691
691,692
691,693
691,694
691,695
691,696
691,697
691,698
691,699
691,700
692,693
694,695
695,696
697,698
697,699
698,699
700,701
702,703
705,706
707,708
708,709
712,713
713,714
713,715
713,716
713,717
713,718
713,719
713,720
713,721
713,722
714,715
716,717
717,718
719,720
719,721
720,721
722,723
724,725
727,728
729,730
730,731
734,735
735,736
735,737
735,738
735,739
735,740
735,741
735,742
735,743
735,744
736,737
738,739
739,740
741,742
741,743
742,743
744,745
746,747
749,750
751,752
752,753
756,757
757,758
757,759
758,759
760,761
760,762
761,762
763,764
765,766
766,767
766,768
766,769
766,770
766,771
766,772
766,773
766,774
767,768
769,770
770,771
772,773
772,774
773,774
775,776
777,778
780,781
782,783
783,784
786,787
787,788
787,789
788,789
790,791
790,792
791,792
793,794
795,796
796,797
796,798
796,799
796,800
796,801
796,802
796,803
796,804
797,798
799,800
800,801
802,803
802,804
803,804
805,806
807,808
810,811
812,813
813,814
816,817
817,818
817,819
818,819
820,821
820,822
821,822
823,824
825,826
826,827
826,828
826,829
826,830
826,831
826,832
826,833
826,834
827,828
829,830
830,831
832,833
832,834
833,834
835,836
837,838
840,841
842,843
843,844
846,847
847,848
847,849
848,849
850,851
850,852
851,852
853,854
855,856
856,857
856,858
856,859
856,860
856,861
856,862
856,863
856,864
857,858
859,860
860,861
862,863
862,864
863,864
865,866
867,868
870,871
872,873
873,874
876,877
877,878
877,879
878,879
880,881
880,882
881,882
883,884
885,886
886,887
886,888
886,889
886,890
886,891
886,892
886,893
886,894
887,888
889,890
890,891
892,893
892,894
893,894
895,896
897,898
900,901
902,903
903,904
906,907
907,908
907,909
908,909
910,911
910,912
911,912
913,914
915,916
916,917
916,918
916,919
916,920
916,921
916,922
916,923
916,924
917,918
919,920
920,921
922,923
922,924
923,924
925,926
927,928
930,931
932,933
933,934
936,937
937,938
937,939
938,939
940,941
940,942
941,942
943,944
945,946
946,947
946,948
946,949
946,950
946,951
946,952
946,953
946,954
947,948
949,950
950,951
952,953
952,954
953,954
955,956
957,958
960,961
962,963
963,964
966,967
967,968
967,969
968,969
970,971
970,972
971,972
973,974
975,976
976,977
976,978
976,979
976,980
976,981
976,982
976,983
976,984
977,978
979,980
980,981
982,983
982,984
983,984
985,986
987,988
990,991
992,993
993,994
996,997
997,998
997,999
998,999
1000,1001
1000,1002
1001,1002
1003,1004
1005,1006
1006,1007
1006,1008
1006,1009
1006,1010
1006,1011
1006,1012
1006,1013
1006,1014
1007,1008
1009,1010
1010,1011
1012,1013
1012,1014
1013,1014
1015,1016
1017,1018
1020,1021
1022,1023
1023,1024
1026,1027
1027,1028
1027,1029
1028,1029
1030,1031
1030,1032
1031,1032
1033,1034
1035,1036
1036,1037
1036,1038
1036,1039
1036,1040
1036,1041
1036,1042
1036,1043
1036,1044
1037,1038
1039,1040
1040,1041
1042,1043
1042,1044
1043,1044
1045,1046
1047,1048
1050,1051
1052,1053
1053,1054
1056,1057
1057,1058
1057,1059
1058,1059
1060,1061
1060,1062
1061,1062
1063,1064
1065,1066
1066,1067
1066,1068
1066,1069
1066,1070
1066,1071
1066,1072
1066,1073
1066,1074
1067,1068
1069,1070
1070,1071
1072,1073
1072,1074
1073,1074
1075,1076
1077,1078
1080,1081
1082,1083
1083,1084
1086,1087
1087,1088
1087,1089
1088,1089
1090,1091
1090,1092
1091,1092
1093,1094
1095,1096
1096,1097
1096,1098
1096,1099
1096,1100
1096,1101
1096,1102
1096,1103
1096,1104
1097,1098
1099,1100
1100,1101
1102,1103
1102,1104
1103,1104
1105,1106
1107,1108
1110,1111
1112,1113
1113,1114
1116,1117
1117,1118
1117,1119
1118,1119
1120,1121
1120,1122
1121,1122
1123,1124
1125,1126
1126,1127
1126,1128
1126,1129
1126,1130
1126,1131
1126,1132
1126,1133
1126,1134
1127,1128
1129,1130
1130,1131
1132,1133
1132,1134
1133,1134
1135,1136
1137,1138
1140,1141
1142,1143
1143,1144
1146,1147
1147,1148
1147,1149
1148,1149
1150,1151
1150,1152
1151,1152
1153,1154
1155,1156
1156,1157
1156,1158
1156,1159
1156,1160
1156,1161
1156,1162
1156,1163
1156,1164
1157,1158
1159,1160
1160,1161
1162,1163
1162,1164
1163,1164
1165,1166
1167,1168
1170,1171
1172,1173
1173,1174
1176,1177
1177,1178
1177,1179
1178,1179
1180,1181
1180,1182
1181,1182
1183,1184
1185,1186
1186,1187
1186,1188
1186,1189
1186,1190
1186,1191
1186,1192
1186,1193
1186,1194
1187,1188
1189,1190
1190,1191
1192,1193
1192,1194
1193,1194
1195,1196
1197,1198
1200,1201
1202,1203
1203,1204
1206,1207
1207,1208
1207,1209
1208,1209
1210,1211
1210,1212
1211,1212
1213,1214
1215,1216
1216,1217
1216,1218
1216,1219
1216,1220
1216,1221
1216,1222
1216,1223
1216,1224
1217,1218
1219,1220
1220,1221
1222,1223
1222,1224
1223,1224
1225,1226
1227,1228
1230,1231
1232,1233
1233,1234
1236,1237
1237,1238
1237,1239
1238,1239
1240,1241
1240,1242
1241,1242
1243,1244
1245,1246
1246,1247
1246,1248
1246,1249
1246,1250
1246,1251
1246,1252
1246,1253
1246,1254
1247,1248
1249,1250
1250,1251
1252,1253
1252,1254
1253,1254
1255,1256
1257,1258
1260,1261
1262,1263
1263,1264
1266,1267
1267,1268
1267,1269
1268,1269
1270,1271
1270,1272
1271,1272
1273,1274
1275,1276
1276,1277
1276,1278
1276,1279
1276,1280
1276,1281
1276,1282
1276,1283
1276,1284
1277,1278
1279,1280
1280,1281
1282,1283
1282,1284
1283,1284
1285,1286
1287,1288
1290,1291
1292,1293
1293,1294
1296,1297
1297,1298
1297,1299
1298,1299
1300,1301
1300,1302
1301,1302
1303,1304
1305,1306
1306,1307
1306,1308
1306,1309
1306,1310
1306,1311
1306,1312
1306,1313
1306,1314
1307,1308
1309,1310
1310,1311
1312,1313
1312,1314
1313,1314
1315,1316
1317,1318
1320,1321
1322,1323
1323,1324
1326,1327
1327,1328
1327,1329
1328,1329
1330,1331
1330,1332
1331,1332
1333,1334
1335,1336
1336,1337
1336,1338
1336,1339
1336,1340
1336,1341
1336,1342
1336,1343
1336,1344
1337,1338
1339,1340
1340,1341
1342,1343
1342,1344
1343,1344
1345,1346
1347,1348
1350,1351
1352,1353
1353,1354
1356,1357
1357,1358
1357,1359
1358,1359
1360,1361
1360,1362
1361,1362
1363,1364
1365,1366
1366,1367
1366,1368
1366,1369
1366,1370
1366,1371
1366,1372
1366,1373
1366,1374
1367,1368
1369,1370
1370,1371
1372,1373
1372,1374
1373,1374
1375,1376
1377,1378
1380,1381
1382,1383
1383,1384
1386,1387
1387,1388
1387,1389
1388,1389
1390,1391
1390,1392
1391,1392
1393,1394
1395,1396
1396,1397
1396,1398
1396,1399
1396,1400
1396,1401
1396,1402
1396,1403
1396,1404
1397,1398
1399,1400
1400,1401
1402,1403
1402,1404
1403,1404
1405,1406
1407,1408
1410,1411
1412,1413
1413,1414
1416,1417
1417,1418
1417,1419
1418,1419
1420,1421
1420,1422
1421,1422
1423,1424
1425,1426
1426,1427
1426,1428
1426,1429
1426,1430
1426,1431
1426,1432
1426,1433
1426,1434
1427,1428
1429,1430
1430,1431
1432,1433
1432,1434
1433,1434
1435,1436
1437,1438
1440,1441
1442,1443
1443,1444
1446,1447
1447,1448
1447,1449
1448,1449
1450,1451
1450,1452
1451,1452
1453,1454
1455,1456
1456,1457
1456,1458
1456,1459
1456,1460
1456,1461
1456,1462
1456,1463
1456,1464
1457,1458
1459,1460
1460,1461
1462,1463
1462,1464
1463,1464
1465,1466
1467,1468
1470,1471
1472,1473
1473,1474
1476,1477
1477,1478
1477,1479
1478,1479
1480,1481
1480,1482
1481,1482
1483,1484
1485,1486
1486,1487
1486,1488
1486,1489
1486,1490
1486,1491
1486,1492
1486,1493
1486,1494
1487,1488
1489,1490
1490,1491
1492,1493
1492,1494
1493,1494
1495,1496
1497,1498
1500,1501
1502,1503
1503,1504
1506,1507
1507,1508
1507,1509
1508,1509
1510,1511
1510,1512
1511,1512
1513,1514
1515,1516
1516,1517
1516,1518
1516,1519
1516,1520
1516,1521
1516,1522
1516,1523
1516,1524
1517,1518
1519,1520
1520,1521
1522,1523
1522,1524
1523,1524
1525,1526
1527,1528
1530,1531
1532,1533
1533,1534
1536,1537
1537,1538
1537,1539
1538,1539
1540,1541
1540,1542
1541,1542
1543,1544
1545,1546
1546,1547
1546,1548
1546,1549
1546,1550
1546,1551
1546,1552
1546,1553
1546,1554
1547,1548
1549,1550
1550,1551
1552,1553
1552,1554
1553,1554
1555,1556
1557,1558
1560,1561
1562,1563
1563,1564
1566,1567
1567,1568
1567,1569
1568,1569
1570,1571
1570,1572
1571,1572
1573,1574
1575,1576
1576,1577
1576,1578
1576,1579
1576,1580
1576,1581
1576,1582
1576,1583
1576,1584
1577,1578
1579,1580
1580,1581
1582,1583
1582,1584
1583,1584
1585,1586
1587,1588
1590,1591
1592,1593
1593,1594
1596,1597
1597,1598
1597,1599
1598,1599
1600,1601
1600,1602
1601,1602
1603,1604
1605,1606
1606,1607
1606,1608
1606,1609
1606,1610
1606,1611
1606,1612
1606,1613
1606,1614
1607,1608
1609,1610
1610,1611
1612,1613
1612,1614
1613,1614
1615,1616
1617,1618
1620,1621
1622,1623
1623,1624
1626,1627
1627,1628
1627,1629
1628,1629
1630,1631
1630,1632
1631,1632
1633,1634
1635,1636
1636,1637
1636,1638
1636,1639
1636,1640
1636,1641
1636,1642
1636,1643
1636,1644
1637,1638
1639,1640
1640,1641
1642,1643
1642,1644
1643,1644
1645,1646
1647,1648
1650,1651
1652,1653
1653,1654
1656,1657
1657,1658
1657,1659
1658,1659
1660,1661
1660,1662
1661,1662
1663,1664
1665,1666
1666,1667
1666,1668
1666,1669
1666,1670
1666,1671
1666,1672
1666,1673
1666,1674
1667,1668
1669,1670
1670,1671
1672,1673
1672,1674
1673,1674
1675,1676
1677,1678
1680,1681
1682,1683
1683,1684
1686,1687
1687,1688
1687,1689
1688,1689
1690,1691
1690,1692
1691,1692
1693,1694
1695,1696
1696,1697
1696,1698
1696,1699
1696,1700
1696,1701
1696,1702
1696,1703
1696,1704
1697,1698
1699,1700
1700,1701
1702,1703
1702,1704
1703,1704
1705,1706
1707,1708
1710,1711
1712,1713
1713,1714
1716,1717
1717,1718
1717,1719
1718,1719
1720,1721
1720,1722
1721,1722
1723,1724
1725,1726
1726,1727
1726,1728
1726,1729
1726,1730
1726,1731
1726,1732
1726,1733
1726,1734
1727,1728
1729,1730
1730,1731
1732,1733
1732,1734
1733,1734
1735,1736
1737,1738
1740,1741
1742,1743
1743,1744
1746,1747
1747,1748
1747,1749
1748,1749
1750,1751
1750,1752
1751,1752
1753,1754
1755,1756
1756,1757
1756,1758
1756,1759
1756,1760
1756,1761
1756,1762
1756,1763
1756,1764
1757,1758
1759,1760
1760,1761
1762,1763
1762,1764
1763,1764
1765,1766
1767,1768
1770,1771
1772,1773
1773,1774
1776,1777
1777,1778
1777,1779
1777,1780
1777,1781
1778,1779
1780,1781
1782,1783
1784,1785
1786,1787
1787,1788
1787,1789
1787,1790
1787,1791
1787,1792
1787,1793
1787,1794
1787,1795
1787,1796
1788,1789
1790,1791
1791,1792
1793,1794
1793,1795
1794,1795
1796,1797
1798,1799
1801,1802
1803,1804
1805,1806
1808,1809
1809,1810
1809,1811
1809,1812
1809,1813
1810,1811
1812,1813
1814,1815
1816,1817
1818,1819
1819,1820
1819,1821
1819,1822
1819,1823
1819,1824
1819,1825
1819,1826
1819,1827
1819,1828
1820,1821
1822,1823
1823,1824
1825,1826
1825,1827
1826,1827
1828,1829
1830,1831
1833,1834
1835,1836
1837,1838
1840,1841
1841,1842
1841,1843
1841,1844
1841,1845
1841,1846
1841,1847
1841,1848
1841,1849
1841,1850
1841,1851
1841,1852
1842,1843
1844,1845
1845,1846
1847,1848
1847,1849
1848,1849
1850,1851
1852,1853
1855,1856
1855,1857
1856,1857
1856,1858
1857,1858
1859,1860
1861,1862
1863,1864
1864,1865
1867,1868
-----nextToken-----
2,4,9,12,15,17,19,20,22,25,27,28,32,35,38,40,42,43,45,48,49,50,54,57,60,62,64,65,67,70,72,73,77,80,83,85,87,88,90,93,94,95,99,102,105,107,109,110,112,115,116,117,121,124,127,129,131,132,134,137,138,139,143,146,149,151,153,154,156,159,160,161,165,168,171,173,175,176,178,181,182,183,187,190,193,195,197,198,200,203,204,205,209,212,215,217,219,220,222,225,226,227,231,234,237,239,241,242,244,247,248,249,253,256,259,261,263,264,266,269,270,271,275,278,281,283,285,286,288,291,292,293,297,300,303,305,307,308,310,313,314,315,319,322,325,327,329,330,332,335,336,337,341,344,347,349,351,352,354,357,358,359,363,366,369,371,373,374,376,379,380,381,385,388,391,393,395,396,398,401,402,403,407,410,413,415,417,418,420,423,424,425,429,432,435,437,439,440,442,445,446,447,451,454,457,459,461,462,464,467,468,469,473,476,479,481,483,484,486,489,490,491,495,498,501,503,505,506,508,511,512,513,517,520,523,525,527,528,530,533,534,535,539,542,545,547,549,550,552,555,556,557,561,564,567,569,571,572,574,577,578,579,583,586,589,591,593,594,596,599,600,601,605,608,611,613,615,616,618,621,622,623,627,630,633,635,637,638,640,643,644,645,649,652,655,657,659,660,662,665,666,667,671,674,677,679,681,682,684,687,688,689,693,696,699,701,703,704,706,709,710,711,715,718,721,723,725,726,728,731,732,733,737,740,743,745,747,748,750,753,754,755,759,762,764,768,771,774,776,778,779,781,784,785,789,792,794,798,801,804,806,808,809,811,814,815,819,822,824,828,831,834,836,838,839,841,844,845,849,852,854,858,861,864,866,868,869,871,874,875,879,882,884,888,891,894,896,898,899,901,904,905,909,912,914,918,921,924,926,928,929,931,934,935,939,942,944,948,951,954,956,958,959,961,964,965,969,972,974,978,981,984,986,988,989,991,994,995,999,1002,1004,1008,1011,1014,1016,1018,1019,1021,1024,1025,1029,1032,1034,1038,1041,1044,1046,1048,1049,1051,1054,1055,1059,1062,1064,1068,1071,1074,1076,1078,1079,1081,1084,1085,1089,1092,1094,1098,1101,1104,1106,1108,1109,1111,1114,1115,1119,1122,1124,1128,1131,1134,1136,1138,1139,1141,1144,1145,1149,1152,1154,1158,1161,1164,1166,1168,1169,1171,1174,1175,1179,1182,1184,1188,1191,1194,1196,1198,1199,1201,1204,1205,1209,1212,1214,1218,1221,1224,1226,1228,1229,1231,1234,1235,1239,1242,1244,1248,1251,1254,1256,1258,1259,1261,1264,1265,1269,1272,1274,1278,1281,1284,1286,1288,1289,1291,1294,1295,1299,1302,1304,1308,1311,1314,1316,1318,1319,1321,1324,1325,1329,1332,1334,1338,1341,1344,1346,1348,1349,1351,1354,1355,1359,1362,1364,1368,1371,1374,1376,1378,1379,1381,1384,1385,1389,1392,1394,1398,1401,1404,1406,1408,1409,1411,1414,1415,1419,1422,1424,1428,1431,1434,1436,1438,1439,1441,1444,1445,1449,1452,1454,1458,1461,1464,1466,1468,1469,1471,1474,1475,1479,1482,1484,1488,1491,1494,1496,1498,1499,1501,1504,1505,1509,1512,1514,1518,1521,1524,1526,1528,1529,1531,1534,1535,1539,1542,1544,1548,1551,1554,1556,1558,1559,1561,1564,1565,1569,1572,1574,1578,1581,1584,1586,1588,1589,1591,1594,1595,1599,1602,1604,1608,1611,1614,1616,1618,1619,1621,1624,1625,1629,1632,1634,1638,1641,1644,1646,1648,1649,1651,1654,1655,1659,1662,1664,1668,1671,1674,1676,1678,1679,1681,1684,1685,1689,1692,1694,1698,1701,1704,1706,1708,1709,1711,1714,1715,1719,1722,1724,1728,1731,1734,1736,1738,1739,1741,1744,1745,1749,1752,1754,1758,1761,1764,1766,1768,1769,1771,1774,1775,1779,1781,1783,1785,1789,1792,1795,1797,1799,1800,1802,1804,1806,1807,1811,1813,1815,1817,1821,1824,1827,1829,1831,1832,1834,1836,1838,1839,1843,1846,1849,1851,1853,1854,1858,1860,1862,1865,1866,1868,1869,1870
-----computeFrom-----
757,758
757,759
787,788
787,789
817,818
817,819
847,848
847,849
877,878
877,879
907,908
907,909
937,938
937,939
967,968
967,969
997,998
997,999
1027,1028
1027,1029
1057,1058
1057,1059
1087,1088
1087,1089
1117,1118
1117,1119
1147,1148
1147,1149
1177,1178
1177,1179
1207,1208
1207,1209
1237,1238
1237,1239
1267,1268
1267,1269
1297,1298
1297,1299
1327,1328
1327,1329
1357,1358
1357,1359
1387,1388
1387,1389
1417,1418
1417,1419
1447,1448
1447,1449
1477,1478
1477,1479
1507,1508
1507,1509
1537,1538
1537,1539
1567,1568
1567,1569
1597,1598
1597,1599
1627,1628
1627,1629
1657,1658
1657,1659
1687,1688
1687,1689
1717,1718
1717,1719
1747,1748
1747,1749
1855,1856
1855,1857
1856,1857
1856,1858
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;
-----ast_node-----
static voidrack_init_sysctls(){	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rate_sample_method", CTLFLAG_RW,	    &rack_rate_sample_method , USE_RTT_LOW,	    "What method should we use for rate sampling 0=high, 1=low ");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "data_after_close", CTLFLAG_RW,	    &rack_ignore_data_after_close, 0,	    "Do we hold off sending a RST until all pending data is ack'd");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpmethod", CTLFLAG_RW,	    &rack_tlp_threshold_use, TLP_USE_TWO_ONE,	    "What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_time", CTLFLAG_RW,	    &rack_min_pace_time, 0,	    "Should we enforce a minimum pace time of 1ms");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_segs", CTLFLAG_RW,	    &rack_min_pace_time_seg_req, 6,	    "How many segments have to be in the len to enforce min-pace-time");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_high", CTLFLAG_RW,	    &rack_reduce_largest_on_idle, 0,	    "Should we reduce the largest cwnd seen to IW on idle reduction");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "bb_verbose", CTLFLAG_RW,	    &rack_verbose_logging, 0,	    "Should RACK black box logging be verbose");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sackfiltering", CTLFLAG_RW,	    &rack_use_sack_filter, 1,	    "Do we use sack filtering?");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "delayed_ack", CTLFLAG_RW,	    &rack_delayed_ack_time, 200,	    "Delayed ack time (200ms)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpminto", CTLFLAG_RW,	    &rack_tlp_min, 10,	    "TLP minimum timeout per the specification (10ms)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "precache", CTLFLAG_RW,	    &rack_precache, 0,	    "Where should we precache the mcopy (0 is not at all)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sblklimit", CTLFLAG_RW,	    &rack_sack_block_limit, 128,	    "When do we start paying attention to small sack blocks");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "send_oldest", CTLFLAG_RW,	    &rack_always_send_oldest, 1,	    "Should we always send the oldest TLP and RACK-TLP");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlp_in_recovery", CTLFLAG_RW,	    &rack_tlp_in_recovery, 1,	    "Can we do a TLP during recovery?");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlimit", CTLFLAG_RW,	    &rack_limited_retran, 0,	    "How many times can a rack timeout drive out sends");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minrto", CTLFLAG_RW,	    &rack_rto_min, 0,	    "Minimum RTO in ms -- set with caution below 1000 due to TLP");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "maxrto", CTLFLAG_RW,	    &rack_rto_max, 0,	    "Maxiumum RTO in ms -- should be at least as large as min_rto");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retry", CTLFLAG_RW,	    &rack_tlp_max_resend, 2,	    "How many times does TLP retry a single segment or multiple with no ACK");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_loss_prop", CTLFLAG_RW,	    &rack_use_proportional_reduce, 0,	    "Should we proportionaly reduce cwnd based on the number of losses ");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_prop", CTLFLAG_RW,	    &rack_proportional_rate, 10,	    "What percent reduction per loss");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_cwnd_flag", CTLFLAG_RW,	    &rack_lower_cwnd_at_tlp, 0,	    "When a TLP completes a retran should we enter recovery?");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_reduces", CTLFLAG_RW,	    &rack_slot_reduction, 4,	    "When setting a slot should we reduce by divisor");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_every_seg", CTLFLAG_RW,	    &rack_pace_every_seg, 1,	    "Should we pace out every segment hptsi");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_seg_max", CTLFLAG_RW,	    &rack_hptsi_segments, 6,	    "Should we pace out only a limited size of segments");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prr_sendalot", CTLFLAG_RW,	    &rack_send_a_lot_in_prr, 1,	    "Send a lot in prr");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minto", CTLFLAG_RW,	    &rack_min_to, 1,	    "Minimum rack timeout in milliseconds");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecoveryseg", CTLFLAG_RW,	    &rack_early_recovery_max_seg, 6,	    "Max segments in early recovery");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecovery", CTLFLAG_RW,	    &rack_early_recovery, 1,	    "Do we do early recovery with rack");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_thresh", CTLFLAG_RW,	    &rack_reorder_thresh, 2,	    "What factor for rack will be added when seeing reordering (shift right)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rtt_tlp_thresh", CTLFLAG_RW,	    &rack_tlp_thresh, 1,	    "what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_fade", CTLFLAG_RW,	    &rack_reorder_fade, 0,	    "Does reorder detection fade, if so how many ms (0 means never)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "pktdelay", CTLFLAG_RW,	    &rack_pkt_delay, 1,	    "Extra RACK time (in ms) besides reordering thresh");	SYSCTL_ADD_U32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limit", CTLFLAG_RW,	    &rack_map_split_limit, 0,	    "Is there a limit on the number of map split entries (0=unlimited)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "inc_var", CTLFLAG_RW,	    &rack_inc_var, 0,	    "Should rack add to the TLP timer the variance in rtt calculation");	rack_badfr = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr", CTLFLAG_RD,	    &rack_badfr, "Total number of bad FRs");	rack_badfr_bytes = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr_bytes", CTLFLAG_RD,	    &rack_badfr_bytes, "Total number of bad FRs");	rack_rtm_prr_retran = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndret", CTLFLAG_RD,	    &rack_rtm_prr_retran,	    "Total number of prr based retransmits");	rack_rtm_prr_newdata = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndnew", CTLFLAG_RD,	    &rack_rtm_prr_newdata,	    "Total number of prr based new transmits");	rack_timestamp_mismatch = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tsnf", CTLFLAG_RD,	    &rack_timestamp_mismatch,	    "Total number of timestamps that we could not find the reported ts");	rack_find_high = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "findhigh", CTLFLAG_RD,	    &rack_find_high,	    "Total number of FIN causing find-high");	rack_reorder_seen = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reordering", CTLFLAG_RD,	    &rack_reorder_seen,	    "Total number of times we added delay due to reordering");	rack_tlp_tot = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_to_total", CTLFLAG_RD,	    &rack_tlp_tot,	    "Total number of tail loss probe expirations");	rack_tlp_newdata = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_new", CTLFLAG_RD,	    &rack_tlp_newdata,	    "Total number of tail loss probe sending new data");	rack_tlp_retran = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran", CTLFLAG_RD,	    &rack_tlp_retran,	    "Total number of tail loss probe sending retransmitted data");	rack_tlp_retran_bytes = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_bytes", CTLFLAG_RD,	    &rack_tlp_retran_bytes,	    "Total bytes of tail loss probe sending retransmitted data");	rack_tlp_retran_fail = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_fail", CTLFLAG_RD,	    &rack_tlp_retran_fail,	    "Total number of tail loss probe sending retransmitted data that failed (wait for t3)");	rack_to_tot = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_to_tot", CTLFLAG_RD,	    &rack_to_tot,	    "Total number of times the rack to expired?");	rack_to_arm_rack = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_rack", CTLFLAG_RD,	    &rack_to_arm_rack,	    "Total number of times the rack timer armed?");	rack_to_arm_tlp = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_tlp", CTLFLAG_RD,	    &rack_to_arm_tlp,	    "Total number of times the tlp timer armed?");	rack_paced_segments = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "paced", CTLFLAG_RD,	    &rack_paced_segments,	    "Total number of times a segment send caused hptsi");	rack_unpaced_segments = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "unpaced", CTLFLAG_RD,	    &rack_unpaced_segments,	    "Total number of times a segment did not cause hptsi");	rack_saw_enobuf = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enobufs", CTLFLAG_RD,	    &rack_saw_enobuf,	    "Total number of times a segment did not cause hptsi");	rack_saw_enetunreach = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enetunreach", CTLFLAG_RD,	    &rack_saw_enetunreach,	    "Total number of times a segment did not cause hptsi");	rack_to_alloc = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocs", CTLFLAG_RD,	    &rack_to_alloc,	    "Total allocations of tracking structures");	rack_to_alloc_hard = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allochard", CTLFLAG_RD,	    &rack_to_alloc_hard,	    "Total allocations done with sleeping the hard way");	rack_to_alloc_emerg = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocemerg", CTLFLAG_RD,	    &rack_to_alloc_emerg,	    "Total allocations done from emergency cache");	rack_alloc_limited_conns = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "alloc_limited_conns", CTLFLAG_RD,	    &rack_alloc_limited_conns,	    "Connections with allocations dropped due to limit");	rack_split_limited = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limited", CTLFLAG_RD,	    &rack_split_limited,	    "Split allocations dropped due to limit");	rack_sack_proc_all = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_long", CTLFLAG_RD,	    &rack_sack_proc_all,	    "Total times we had to walk whole list for sack processing");	rack_sack_proc_restart = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_restart", CTLFLAG_RD,	    &rack_sack_proc_restart,	    "Total times we had to walk whole list due to a restart");	rack_sack_proc_short = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_short", CTLFLAG_RD,	    &rack_sack_proc_short,	    "Total times we took shortcut for sack processing");	rack_enter_tlp_calc = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_calc_entered", CTLFLAG_RD,	    &rack_enter_tlp_calc,	    "Total times we called calc-tlp");	rack_used_tlpmethod = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method", CTLFLAG_RD,	    &rack_used_tlpmethod,	    "Total number of runt sacks");	rack_used_tlpmethod2 = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method2", CTLFLAG_RD,	    &rack_used_tlpmethod2,	    "Total number of runt sacks 2");	rack_runt_sacks = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "runtsacks", CTLFLAG_RD,	    &rack_runt_sacks,	    "Total number of runt sacks");	rack_progress_drops = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prog_drops", CTLFLAG_RD,	    &rack_progress_drops,	    "Total number of progress drops");	rack_input_idle_reduces = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_oninput", CTLFLAG_RD,	    &rack_input_idle_reduces,	    "Total number of idle reductions on input");	rack_tlp_does_nada = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_nada", CTLFLAG_RD,	    &rack_tlp_does_nada,	    "Total number of nada tlp calls");	COUNTER_ARRAY_ALLOC(rack_out_size, TCP_MSS_ACCT_SIZE, M_WAITOK);	SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "outsize", CTLFLAG_RD,	    rack_out_size, TCP_MSS_ACCT_SIZE, "MSS send sizes");	COUNTER_ARRAY_ALLOC(rack_opts_arry, RACK_OPTS_SIZE, M_WAITOK);	SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "opts", CTLFLAG_RD,	    rack_opts_arry, RACK_OPTS_SIZE, "RACK Option Stats");	SYSCTL_ADD_PROC(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "clear", CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE,	    &rack_clear_counter, 0, sysctl_rack_clear, "IU", "Clear counters");}
static void
rack_init_sysctls()
rack_init_sysctls
{	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rate_sample_method", CTLFLAG_RW,	    &rack_rate_sample_method , USE_RTT_LOW,	    "What method should we use for rate sampling 0=high, 1=low ");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "data_after_close", CTLFLAG_RW,	    &rack_ignore_data_after_close, 0,	    "Do we hold off sending a RST until all pending data is ack'd");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpmethod", CTLFLAG_RW,	    &rack_tlp_threshold_use, TLP_USE_TWO_ONE,	    "What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_time", CTLFLAG_RW,	    &rack_min_pace_time, 0,	    "Should we enforce a minimum pace time of 1ms");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_segs", CTLFLAG_RW,	    &rack_min_pace_time_seg_req, 6,	    "How many segments have to be in the len to enforce min-pace-time");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_high", CTLFLAG_RW,	    &rack_reduce_largest_on_idle, 0,	    "Should we reduce the largest cwnd seen to IW on idle reduction");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "bb_verbose", CTLFLAG_RW,	    &rack_verbose_logging, 0,	    "Should RACK black box logging be verbose");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sackfiltering", CTLFLAG_RW,	    &rack_use_sack_filter, 1,	    "Do we use sack filtering?");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "delayed_ack", CTLFLAG_RW,	    &rack_delayed_ack_time, 200,	    "Delayed ack time (200ms)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpminto", CTLFLAG_RW,	    &rack_tlp_min, 10,	    "TLP minimum timeout per the specification (10ms)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "precache", CTLFLAG_RW,	    &rack_precache, 0,	    "Where should we precache the mcopy (0 is not at all)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sblklimit", CTLFLAG_RW,	    &rack_sack_block_limit, 128,	    "When do we start paying attention to small sack blocks");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "send_oldest", CTLFLAG_RW,	    &rack_always_send_oldest, 1,	    "Should we always send the oldest TLP and RACK-TLP");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlp_in_recovery", CTLFLAG_RW,	    &rack_tlp_in_recovery, 1,	    "Can we do a TLP during recovery?");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlimit", CTLFLAG_RW,	    &rack_limited_retran, 0,	    "How many times can a rack timeout drive out sends");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minrto", CTLFLAG_RW,	    &rack_rto_min, 0,	    "Minimum RTO in ms -- set with caution below 1000 due to TLP");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "maxrto", CTLFLAG_RW,	    &rack_rto_max, 0,	    "Maxiumum RTO in ms -- should be at least as large as min_rto");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retry", CTLFLAG_RW,	    &rack_tlp_max_resend, 2,	    "How many times does TLP retry a single segment or multiple with no ACK");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_loss_prop", CTLFLAG_RW,	    &rack_use_proportional_reduce, 0,	    "Should we proportionaly reduce cwnd based on the number of losses ");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_prop", CTLFLAG_RW,	    &rack_proportional_rate, 10,	    "What percent reduction per loss");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_cwnd_flag", CTLFLAG_RW,	    &rack_lower_cwnd_at_tlp, 0,	    "When a TLP completes a retran should we enter recovery?");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_reduces", CTLFLAG_RW,	    &rack_slot_reduction, 4,	    "When setting a slot should we reduce by divisor");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_every_seg", CTLFLAG_RW,	    &rack_pace_every_seg, 1,	    "Should we pace out every segment hptsi");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_seg_max", CTLFLAG_RW,	    &rack_hptsi_segments, 6,	    "Should we pace out only a limited size of segments");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prr_sendalot", CTLFLAG_RW,	    &rack_send_a_lot_in_prr, 1,	    "Send a lot in prr");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minto", CTLFLAG_RW,	    &rack_min_to, 1,	    "Minimum rack timeout in milliseconds");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecoveryseg", CTLFLAG_RW,	    &rack_early_recovery_max_seg, 6,	    "Max segments in early recovery");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecovery", CTLFLAG_RW,	    &rack_early_recovery, 1,	    "Do we do early recovery with rack");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_thresh", CTLFLAG_RW,	    &rack_reorder_thresh, 2,	    "What factor for rack will be added when seeing reordering (shift right)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rtt_tlp_thresh", CTLFLAG_RW,	    &rack_tlp_thresh, 1,	    "what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_fade", CTLFLAG_RW,	    &rack_reorder_fade, 0,	    "Does reorder detection fade, if so how many ms (0 means never)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "pktdelay", CTLFLAG_RW,	    &rack_pkt_delay, 1,	    "Extra RACK time (in ms) besides reordering thresh");	SYSCTL_ADD_U32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limit", CTLFLAG_RW,	    &rack_map_split_limit, 0,	    "Is there a limit on the number of map split entries (0=unlimited)");	SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "inc_var", CTLFLAG_RW,	    &rack_inc_var, 0,	    "Should rack add to the TLP timer the variance in rtt calculation");	rack_badfr = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr", CTLFLAG_RD,	    &rack_badfr, "Total number of bad FRs");	rack_badfr_bytes = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr_bytes", CTLFLAG_RD,	    &rack_badfr_bytes, "Total number of bad FRs");	rack_rtm_prr_retran = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndret", CTLFLAG_RD,	    &rack_rtm_prr_retran,	    "Total number of prr based retransmits");	rack_rtm_prr_newdata = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndnew", CTLFLAG_RD,	    &rack_rtm_prr_newdata,	    "Total number of prr based new transmits");	rack_timestamp_mismatch = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tsnf", CTLFLAG_RD,	    &rack_timestamp_mismatch,	    "Total number of timestamps that we could not find the reported ts");	rack_find_high = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "findhigh", CTLFLAG_RD,	    &rack_find_high,	    "Total number of FIN causing find-high");	rack_reorder_seen = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reordering", CTLFLAG_RD,	    &rack_reorder_seen,	    "Total number of times we added delay due to reordering");	rack_tlp_tot = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_to_total", CTLFLAG_RD,	    &rack_tlp_tot,	    "Total number of tail loss probe expirations");	rack_tlp_newdata = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_new", CTLFLAG_RD,	    &rack_tlp_newdata,	    "Total number of tail loss probe sending new data");	rack_tlp_retran = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran", CTLFLAG_RD,	    &rack_tlp_retran,	    "Total number of tail loss probe sending retransmitted data");	rack_tlp_retran_bytes = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_bytes", CTLFLAG_RD,	    &rack_tlp_retran_bytes,	    "Total bytes of tail loss probe sending retransmitted data");	rack_tlp_retran_fail = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_fail", CTLFLAG_RD,	    &rack_tlp_retran_fail,	    "Total number of tail loss probe sending retransmitted data that failed (wait for t3)");	rack_to_tot = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_to_tot", CTLFLAG_RD,	    &rack_to_tot,	    "Total number of times the rack to expired?");	rack_to_arm_rack = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_rack", CTLFLAG_RD,	    &rack_to_arm_rack,	    "Total number of times the rack timer armed?");	rack_to_arm_tlp = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_tlp", CTLFLAG_RD,	    &rack_to_arm_tlp,	    "Total number of times the tlp timer armed?");	rack_paced_segments = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "paced", CTLFLAG_RD,	    &rack_paced_segments,	    "Total number of times a segment send caused hptsi");	rack_unpaced_segments = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "unpaced", CTLFLAG_RD,	    &rack_unpaced_segments,	    "Total number of times a segment did not cause hptsi");	rack_saw_enobuf = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enobufs", CTLFLAG_RD,	    &rack_saw_enobuf,	    "Total number of times a segment did not cause hptsi");	rack_saw_enetunreach = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enetunreach", CTLFLAG_RD,	    &rack_saw_enetunreach,	    "Total number of times a segment did not cause hptsi");	rack_to_alloc = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocs", CTLFLAG_RD,	    &rack_to_alloc,	    "Total allocations of tracking structures");	rack_to_alloc_hard = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allochard", CTLFLAG_RD,	    &rack_to_alloc_hard,	    "Total allocations done with sleeping the hard way");	rack_to_alloc_emerg = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocemerg", CTLFLAG_RD,	    &rack_to_alloc_emerg,	    "Total allocations done from emergency cache");	rack_alloc_limited_conns = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "alloc_limited_conns", CTLFLAG_RD,	    &rack_alloc_limited_conns,	    "Connections with allocations dropped due to limit");	rack_split_limited = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limited", CTLFLAG_RD,	    &rack_split_limited,	    "Split allocations dropped due to limit");	rack_sack_proc_all = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_long", CTLFLAG_RD,	    &rack_sack_proc_all,	    "Total times we had to walk whole list for sack processing");	rack_sack_proc_restart = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_restart", CTLFLAG_RD,	    &rack_sack_proc_restart,	    "Total times we had to walk whole list due to a restart");	rack_sack_proc_short = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_short", CTLFLAG_RD,	    &rack_sack_proc_short,	    "Total times we took shortcut for sack processing");	rack_enter_tlp_calc = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_calc_entered", CTLFLAG_RD,	    &rack_enter_tlp_calc,	    "Total times we called calc-tlp");	rack_used_tlpmethod = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method", CTLFLAG_RD,	    &rack_used_tlpmethod,	    "Total number of runt sacks");	rack_used_tlpmethod2 = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method2", CTLFLAG_RD,	    &rack_used_tlpmethod2,	    "Total number of runt sacks 2");	rack_runt_sacks = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "runtsacks", CTLFLAG_RD,	    &rack_runt_sacks,	    "Total number of runt sacks");	rack_progress_drops = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prog_drops", CTLFLAG_RD,	    &rack_progress_drops,	    "Total number of progress drops");	rack_input_idle_reduces = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_oninput", CTLFLAG_RD,	    &rack_input_idle_reduces,	    "Total number of idle reductions on input");	rack_tlp_does_nada = counter_u64_alloc(M_WAITOK);	SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_nada", CTLFLAG_RD,	    &rack_tlp_does_nada,	    "Total number of nada tlp calls");	COUNTER_ARRAY_ALLOC(rack_out_size, TCP_MSS_ACCT_SIZE, M_WAITOK);	SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "outsize", CTLFLAG_RD,	    rack_out_size, TCP_MSS_ACCT_SIZE, "MSS send sizes");	COUNTER_ARRAY_ALLOC(rack_opts_arry, RACK_OPTS_SIZE, M_WAITOK);	SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "opts", CTLFLAG_RD,	    rack_opts_arry, RACK_OPTS_SIZE, "RACK Option Stats");	SYSCTL_ADD_PROC(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "clear", CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE,	    &rack_clear_counter, 0, sysctl_rack_clear, "IU", "Clear counters");}
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rate_sample_method", CTLFLAG_RW,	    &rack_rate_sample_method , USE_RTT_LOW,	    "What method should we use for rate sampling 0=high, 1=low ");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rate_sample_method", CTLFLAG_RW,	    &rack_rate_sample_method , USE_RTT_LOW,	    "What method should we use for rate sampling 0=high, 1=low ")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"rate_sample_method"
CTLFLAG_RW
CTLFLAG_RW
&rack_rate_sample_method
rack_rate_sample_method
rack_rate_sample_method
USE_RTT_LOW
USE_RTT_LOW
"What method should we use for rate sampling 0=high, 1=low "
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "data_after_close", CTLFLAG_RW,	    &rack_ignore_data_after_close, 0,	    "Do we hold off sending a RST until all pending data is ack'd");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "data_after_close", CTLFLAG_RW,	    &rack_ignore_data_after_close, 0,	    "Do we hold off sending a RST until all pending data is ack'd")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"data_after_close"
CTLFLAG_RW
CTLFLAG_RW
&rack_ignore_data_after_close
rack_ignore_data_after_close
rack_ignore_data_after_close
0
"Do we hold off sending a RST until all pending data is ack'd"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpmethod", CTLFLAG_RW,	    &rack_tlp_threshold_use, TLP_USE_TWO_ONE,	    "What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpmethod", CTLFLAG_RW,	    &rack_tlp_threshold_use, TLP_USE_TWO_ONE,	    "What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlpmethod"
CTLFLAG_RW
CTLFLAG_RW
&rack_tlp_threshold_use
rack_tlp_threshold_use
rack_tlp_threshold_use
TLP_USE_TWO_ONE
TLP_USE_TWO_ONE
"What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_time", CTLFLAG_RW,	    &rack_min_pace_time, 0,	    "Should we enforce a minimum pace time of 1ms");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_time", CTLFLAG_RW,	    &rack_min_pace_time, 0,	    "Should we enforce a minimum pace time of 1ms")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"min_pace_time"
CTLFLAG_RW
CTLFLAG_RW
&rack_min_pace_time
rack_min_pace_time
rack_min_pace_time
0
"Should we enforce a minimum pace time of 1ms"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_segs", CTLFLAG_RW,	    &rack_min_pace_time_seg_req, 6,	    "How many segments have to be in the len to enforce min-pace-time");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "min_pace_segs", CTLFLAG_RW,	    &rack_min_pace_time_seg_req, 6,	    "How many segments have to be in the len to enforce min-pace-time")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"min_pace_segs"
CTLFLAG_RW
CTLFLAG_RW
&rack_min_pace_time_seg_req
rack_min_pace_time_seg_req
rack_min_pace_time_seg_req
6
"How many segments have to be in the len to enforce min-pace-time"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_high", CTLFLAG_RW,	    &rack_reduce_largest_on_idle, 0,	    "Should we reduce the largest cwnd seen to IW on idle reduction");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_high", CTLFLAG_RW,	    &rack_reduce_largest_on_idle, 0,	    "Should we reduce the largest cwnd seen to IW on idle reduction")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"idle_reduce_high"
CTLFLAG_RW
CTLFLAG_RW
&rack_reduce_largest_on_idle
rack_reduce_largest_on_idle
rack_reduce_largest_on_idle
0
"Should we reduce the largest cwnd seen to IW on idle reduction"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "bb_verbose", CTLFLAG_RW,	    &rack_verbose_logging, 0,	    "Should RACK black box logging be verbose");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "bb_verbose", CTLFLAG_RW,	    &rack_verbose_logging, 0,	    "Should RACK black box logging be verbose")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"bb_verbose"
CTLFLAG_RW
CTLFLAG_RW
&rack_verbose_logging
rack_verbose_logging
rack_verbose_logging
0
"Should RACK black box logging be verbose"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sackfiltering", CTLFLAG_RW,	    &rack_use_sack_filter, 1,	    "Do we use sack filtering?");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sackfiltering", CTLFLAG_RW,	    &rack_use_sack_filter, 1,	    "Do we use sack filtering?")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"sackfiltering"
CTLFLAG_RW
CTLFLAG_RW
&rack_use_sack_filter
rack_use_sack_filter
rack_use_sack_filter
1
"Do we use sack filtering?"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "delayed_ack", CTLFLAG_RW,	    &rack_delayed_ack_time, 200,	    "Delayed ack time (200ms)");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "delayed_ack", CTLFLAG_RW,	    &rack_delayed_ack_time, 200,	    "Delayed ack time (200ms)")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"delayed_ack"
CTLFLAG_RW
CTLFLAG_RW
&rack_delayed_ack_time
rack_delayed_ack_time
rack_delayed_ack_time
200
"Delayed ack time (200ms)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpminto", CTLFLAG_RW,	    &rack_tlp_min, 10,	    "TLP minimum timeout per the specification (10ms)");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlpminto", CTLFLAG_RW,	    &rack_tlp_min, 10,	    "TLP minimum timeout per the specification (10ms)")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlpminto"
CTLFLAG_RW
CTLFLAG_RW
&rack_tlp_min
rack_tlp_min
rack_tlp_min
10
"TLP minimum timeout per the specification (10ms)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "precache", CTLFLAG_RW,	    &rack_precache, 0,	    "Where should we precache the mcopy (0 is not at all)");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "precache", CTLFLAG_RW,	    &rack_precache, 0,	    "Where should we precache the mcopy (0 is not at all)")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"precache"
CTLFLAG_RW
CTLFLAG_RW
&rack_precache
rack_precache
rack_precache
0
"Where should we precache the mcopy (0 is not at all)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sblklimit", CTLFLAG_RW,	    &rack_sack_block_limit, 128,	    "When do we start paying attention to small sack blocks");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sblklimit", CTLFLAG_RW,	    &rack_sack_block_limit, 128,	    "When do we start paying attention to small sack blocks")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"sblklimit"
CTLFLAG_RW
CTLFLAG_RW
&rack_sack_block_limit
rack_sack_block_limit
rack_sack_block_limit
128
"When do we start paying attention to small sack blocks"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "send_oldest", CTLFLAG_RW,	    &rack_always_send_oldest, 1,	    "Should we always send the oldest TLP and RACK-TLP");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "send_oldest", CTLFLAG_RW,	    &rack_always_send_oldest, 1,	    "Should we always send the oldest TLP and RACK-TLP")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"send_oldest"
CTLFLAG_RW
CTLFLAG_RW
&rack_always_send_oldest
rack_always_send_oldest
rack_always_send_oldest
1
"Should we always send the oldest TLP and RACK-TLP"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlp_in_recovery", CTLFLAG_RW,	    &rack_tlp_in_recovery, 1,	    "Can we do a TLP during recovery?");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlp_in_recovery", CTLFLAG_RW,	    &rack_tlp_in_recovery, 1,	    "Can we do a TLP during recovery?")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"rack_tlp_in_recovery"
CTLFLAG_RW
CTLFLAG_RW
&rack_tlp_in_recovery
rack_tlp_in_recovery
rack_tlp_in_recovery
1
"Can we do a TLP during recovery?"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlimit", CTLFLAG_RW,	    &rack_limited_retran, 0,	    "How many times can a rack timeout drive out sends");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_tlimit", CTLFLAG_RW,	    &rack_limited_retran, 0,	    "How many times can a rack timeout drive out sends")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"rack_tlimit"
CTLFLAG_RW
CTLFLAG_RW
&rack_limited_retran
rack_limited_retran
rack_limited_retran
0
"How many times can a rack timeout drive out sends"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minrto", CTLFLAG_RW,	    &rack_rto_min, 0,	    "Minimum RTO in ms -- set with caution below 1000 due to TLP");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minrto", CTLFLAG_RW,	    &rack_rto_min, 0,	    "Minimum RTO in ms -- set with caution below 1000 due to TLP")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"minrto"
CTLFLAG_RW
CTLFLAG_RW
&rack_rto_min
rack_rto_min
rack_rto_min
0
"Minimum RTO in ms -- set with caution below 1000 due to TLP"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "maxrto", CTLFLAG_RW,	    &rack_rto_max, 0,	    "Maxiumum RTO in ms -- should be at least as large as min_rto");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "maxrto", CTLFLAG_RW,	    &rack_rto_max, 0,	    "Maxiumum RTO in ms -- should be at least as large as min_rto")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"maxrto"
CTLFLAG_RW
CTLFLAG_RW
&rack_rto_max
rack_rto_max
rack_rto_max
0
"Maxiumum RTO in ms -- should be at least as large as min_rto"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retry", CTLFLAG_RW,	    &rack_tlp_max_resend, 2,	    "How many times does TLP retry a single segment or multiple with no ACK");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retry", CTLFLAG_RW,	    &rack_tlp_max_resend, 2,	    "How many times does TLP retry a single segment or multiple with no ACK")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_retry"
CTLFLAG_RW
CTLFLAG_RW
&rack_tlp_max_resend
rack_tlp_max_resend
rack_tlp_max_resend
2
"How many times does TLP retry a single segment or multiple with no ACK"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_loss_prop", CTLFLAG_RW,	    &rack_use_proportional_reduce, 0,	    "Should we proportionaly reduce cwnd based on the number of losses ");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_loss_prop", CTLFLAG_RW,	    &rack_use_proportional_reduce, 0,	    "Should we proportionaly reduce cwnd based on the number of losses ")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"recovery_loss_prop"
CTLFLAG_RW
CTLFLAG_RW
&rack_use_proportional_reduce
rack_use_proportional_reduce
rack_use_proportional_reduce
0
"Should we proportionaly reduce cwnd based on the number of losses "
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_prop", CTLFLAG_RW,	    &rack_proportional_rate, 10,	    "What percent reduction per loss");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "recovery_prop", CTLFLAG_RW,	    &rack_proportional_rate, 10,	    "What percent reduction per loss")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"recovery_prop"
CTLFLAG_RW
CTLFLAG_RW
&rack_proportional_rate
rack_proportional_rate
rack_proportional_rate
10
"What percent reduction per loss"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_cwnd_flag", CTLFLAG_RW,	    &rack_lower_cwnd_at_tlp, 0,	    "When a TLP completes a retran should we enter recovery?");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_cwnd_flag", CTLFLAG_RW,	    &rack_lower_cwnd_at_tlp, 0,	    "When a TLP completes a retran should we enter recovery?")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_cwnd_flag"
CTLFLAG_RW
CTLFLAG_RW
&rack_lower_cwnd_at_tlp
rack_lower_cwnd_at_tlp
rack_lower_cwnd_at_tlp
0
"When a TLP completes a retran should we enter recovery?"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_reduces", CTLFLAG_RW,	    &rack_slot_reduction, 4,	    "When setting a slot should we reduce by divisor");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_reduces", CTLFLAG_RW,	    &rack_slot_reduction, 4,	    "When setting a slot should we reduce by divisor")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"hptsi_reduces"
CTLFLAG_RW
CTLFLAG_RW
&rack_slot_reduction
rack_slot_reduction
rack_slot_reduction
4
"When setting a slot should we reduce by divisor"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_every_seg", CTLFLAG_RW,	    &rack_pace_every_seg, 1,	    "Should we pace out every segment hptsi");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_every_seg", CTLFLAG_RW,	    &rack_pace_every_seg, 1,	    "Should we pace out every segment hptsi")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"hptsi_every_seg"
CTLFLAG_RW
CTLFLAG_RW
&rack_pace_every_seg
rack_pace_every_seg
rack_pace_every_seg
1
"Should we pace out every segment hptsi"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_seg_max", CTLFLAG_RW,	    &rack_hptsi_segments, 6,	    "Should we pace out only a limited size of segments");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hptsi_seg_max", CTLFLAG_RW,	    &rack_hptsi_segments, 6,	    "Should we pace out only a limited size of segments")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"hptsi_seg_max"
CTLFLAG_RW
CTLFLAG_RW
&rack_hptsi_segments
rack_hptsi_segments
rack_hptsi_segments
6
"Should we pace out only a limited size of segments"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prr_sendalot", CTLFLAG_RW,	    &rack_send_a_lot_in_prr, 1,	    "Send a lot in prr");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prr_sendalot", CTLFLAG_RW,	    &rack_send_a_lot_in_prr, 1,	    "Send a lot in prr")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"prr_sendalot"
CTLFLAG_RW
CTLFLAG_RW
&rack_send_a_lot_in_prr
rack_send_a_lot_in_prr
rack_send_a_lot_in_prr
1
"Send a lot in prr"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minto", CTLFLAG_RW,	    &rack_min_to, 1,	    "Minimum rack timeout in milliseconds");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "minto", CTLFLAG_RW,	    &rack_min_to, 1,	    "Minimum rack timeout in milliseconds")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"minto"
CTLFLAG_RW
CTLFLAG_RW
&rack_min_to
rack_min_to
rack_min_to
1
"Minimum rack timeout in milliseconds"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecoveryseg", CTLFLAG_RW,	    &rack_early_recovery_max_seg, 6,	    "Max segments in early recovery");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecoveryseg", CTLFLAG_RW,	    &rack_early_recovery_max_seg, 6,	    "Max segments in early recovery")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"earlyrecoveryseg"
CTLFLAG_RW
CTLFLAG_RW
&rack_early_recovery_max_seg
rack_early_recovery_max_seg
rack_early_recovery_max_seg
6
"Max segments in early recovery"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecovery", CTLFLAG_RW,	    &rack_early_recovery, 1,	    "Do we do early recovery with rack");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "earlyrecovery", CTLFLAG_RW,	    &rack_early_recovery, 1,	    "Do we do early recovery with rack")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"earlyrecovery"
CTLFLAG_RW
CTLFLAG_RW
&rack_early_recovery
rack_early_recovery
rack_early_recovery
1
"Do we do early recovery with rack"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_thresh", CTLFLAG_RW,	    &rack_reorder_thresh, 2,	    "What factor for rack will be added when seeing reordering (shift right)");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_thresh", CTLFLAG_RW,	    &rack_reorder_thresh, 2,	    "What factor for rack will be added when seeing reordering (shift right)")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"reorder_thresh"
CTLFLAG_RW
CTLFLAG_RW
&rack_reorder_thresh
rack_reorder_thresh
rack_reorder_thresh
2
"What factor for rack will be added when seeing reordering (shift right)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rtt_tlp_thresh", CTLFLAG_RW,	    &rack_tlp_thresh, 1,	    "what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rtt_tlp_thresh", CTLFLAG_RW,	    &rack_tlp_thresh, 1,	    "what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"rtt_tlp_thresh"
CTLFLAG_RW
CTLFLAG_RW
&rack_tlp_thresh
rack_tlp_thresh
rack_tlp_thresh
1
"what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_fade", CTLFLAG_RW,	    &rack_reorder_fade, 0,	    "Does reorder detection fade, if so how many ms (0 means never)");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reorder_fade", CTLFLAG_RW,	    &rack_reorder_fade, 0,	    "Does reorder detection fade, if so how many ms (0 means never)")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"reorder_fade"
CTLFLAG_RW
CTLFLAG_RW
&rack_reorder_fade
rack_reorder_fade
rack_reorder_fade
0
"Does reorder detection fade, if so how many ms (0 means never)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "pktdelay", CTLFLAG_RW,	    &rack_pkt_delay, 1,	    "Extra RACK time (in ms) besides reordering thresh");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "pktdelay", CTLFLAG_RW,	    &rack_pkt_delay, 1,	    "Extra RACK time (in ms) besides reordering thresh")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"pktdelay"
CTLFLAG_RW
CTLFLAG_RW
&rack_pkt_delay
rack_pkt_delay
rack_pkt_delay
1
"Extra RACK time (in ms) besides reordering thresh"
SYSCTL_ADD_U32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limit", CTLFLAG_RW,	    &rack_map_split_limit, 0,	    "Is there a limit on the number of map split entries (0=unlimited)");
SYSCTL_ADD_U32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limit", CTLFLAG_RW,	    &rack_map_split_limit, 0,	    "Is there a limit on the number of map split entries (0=unlimited)")
SYSCTL_ADD_U32
SYSCTL_ADD_U32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"split_limit"
CTLFLAG_RW
CTLFLAG_RW
&rack_map_split_limit
rack_map_split_limit
rack_map_split_limit
0
"Is there a limit on the number of map split entries (0=unlimited)"
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "inc_var", CTLFLAG_RW,	    &rack_inc_var, 0,	    "Should rack add to the TLP timer the variance in rtt calculation");
SYSCTL_ADD_S32(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "inc_var", CTLFLAG_RW,	    &rack_inc_var, 0,	    "Should rack add to the TLP timer the variance in rtt calculation")
SYSCTL_ADD_S32
SYSCTL_ADD_S32
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"inc_var"
CTLFLAG_RW
CTLFLAG_RW
&rack_inc_var
rack_inc_var
rack_inc_var
0
"Should rack add to the TLP timer the variance in rtt calculation"
rack_badfr = counter_u64_alloc(M_WAITOK);
rack_badfr = counter_u64_alloc(M_WAITOK)
rack_badfr
rack_badfr
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr", CTLFLAG_RD,	    &rack_badfr, "Total number of bad FRs");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr", CTLFLAG_RD,	    &rack_badfr, "Total number of bad FRs")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"badfr"
CTLFLAG_RD
CTLFLAG_RD
&rack_badfr
rack_badfr
rack_badfr
"Total number of bad FRs"
rack_badfr_bytes = counter_u64_alloc(M_WAITOK);
rack_badfr_bytes = counter_u64_alloc(M_WAITOK)
rack_badfr_bytes
rack_badfr_bytes
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr_bytes", CTLFLAG_RD,	    &rack_badfr_bytes, "Total number of bad FRs");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "badfr_bytes", CTLFLAG_RD,	    &rack_badfr_bytes, "Total number of bad FRs")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"badfr_bytes"
CTLFLAG_RD
CTLFLAG_RD
&rack_badfr_bytes
rack_badfr_bytes
rack_badfr_bytes
"Total number of bad FRs"
rack_rtm_prr_retran = counter_u64_alloc(M_WAITOK);
rack_rtm_prr_retran = counter_u64_alloc(M_WAITOK)
rack_rtm_prr_retran
rack_rtm_prr_retran
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndret", CTLFLAG_RD,	    &rack_rtm_prr_retran,	    "Total number of prr based retransmits");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndret", CTLFLAG_RD,	    &rack_rtm_prr_retran,	    "Total number of prr based retransmits")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"prrsndret"
CTLFLAG_RD
CTLFLAG_RD
&rack_rtm_prr_retran
rack_rtm_prr_retran
rack_rtm_prr_retran
"Total number of prr based retransmits"
rack_rtm_prr_newdata = counter_u64_alloc(M_WAITOK);
rack_rtm_prr_newdata = counter_u64_alloc(M_WAITOK)
rack_rtm_prr_newdata
rack_rtm_prr_newdata
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndnew", CTLFLAG_RD,	    &rack_rtm_prr_newdata,	    "Total number of prr based new transmits");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prrsndnew", CTLFLAG_RD,	    &rack_rtm_prr_newdata,	    "Total number of prr based new transmits")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"prrsndnew"
CTLFLAG_RD
CTLFLAG_RD
&rack_rtm_prr_newdata
rack_rtm_prr_newdata
rack_rtm_prr_newdata
"Total number of prr based new transmits"
rack_timestamp_mismatch = counter_u64_alloc(M_WAITOK);
rack_timestamp_mismatch = counter_u64_alloc(M_WAITOK)
rack_timestamp_mismatch
rack_timestamp_mismatch
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tsnf", CTLFLAG_RD,	    &rack_timestamp_mismatch,	    "Total number of timestamps that we could not find the reported ts");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tsnf", CTLFLAG_RD,	    &rack_timestamp_mismatch,	    "Total number of timestamps that we could not find the reported ts")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tsnf"
CTLFLAG_RD
CTLFLAG_RD
&rack_timestamp_mismatch
rack_timestamp_mismatch
rack_timestamp_mismatch
"Total number of timestamps that we could not find the reported ts"
rack_find_high = counter_u64_alloc(M_WAITOK);
rack_find_high = counter_u64_alloc(M_WAITOK)
rack_find_high
rack_find_high
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "findhigh", CTLFLAG_RD,	    &rack_find_high,	    "Total number of FIN causing find-high");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "findhigh", CTLFLAG_RD,	    &rack_find_high,	    "Total number of FIN causing find-high")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"findhigh"
CTLFLAG_RD
CTLFLAG_RD
&rack_find_high
rack_find_high
rack_find_high
"Total number of FIN causing find-high"
rack_reorder_seen = counter_u64_alloc(M_WAITOK);
rack_reorder_seen = counter_u64_alloc(M_WAITOK)
rack_reorder_seen
rack_reorder_seen
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reordering", CTLFLAG_RD,	    &rack_reorder_seen,	    "Total number of times we added delay due to reordering");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "reordering", CTLFLAG_RD,	    &rack_reorder_seen,	    "Total number of times we added delay due to reordering")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"reordering"
CTLFLAG_RD
CTLFLAG_RD
&rack_reorder_seen
rack_reorder_seen
rack_reorder_seen
"Total number of times we added delay due to reordering"
rack_tlp_tot = counter_u64_alloc(M_WAITOK);
rack_tlp_tot = counter_u64_alloc(M_WAITOK)
rack_tlp_tot
rack_tlp_tot
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_to_total", CTLFLAG_RD,	    &rack_tlp_tot,	    "Total number of tail loss probe expirations");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_to_total", CTLFLAG_RD,	    &rack_tlp_tot,	    "Total number of tail loss probe expirations")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_to_total"
CTLFLAG_RD
CTLFLAG_RD
&rack_tlp_tot
rack_tlp_tot
rack_tlp_tot
"Total number of tail loss probe expirations"
rack_tlp_newdata = counter_u64_alloc(M_WAITOK);
rack_tlp_newdata = counter_u64_alloc(M_WAITOK)
rack_tlp_newdata
rack_tlp_newdata
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_new", CTLFLAG_RD,	    &rack_tlp_newdata,	    "Total number of tail loss probe sending new data");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_new", CTLFLAG_RD,	    &rack_tlp_newdata,	    "Total number of tail loss probe sending new data")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_new"
CTLFLAG_RD
CTLFLAG_RD
&rack_tlp_newdata
rack_tlp_newdata
rack_tlp_newdata
"Total number of tail loss probe sending new data"
rack_tlp_retran = counter_u64_alloc(M_WAITOK);
rack_tlp_retran = counter_u64_alloc(M_WAITOK)
rack_tlp_retran
rack_tlp_retran
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran", CTLFLAG_RD,	    &rack_tlp_retran,	    "Total number of tail loss probe sending retransmitted data");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran", CTLFLAG_RD,	    &rack_tlp_retran,	    "Total number of tail loss probe sending retransmitted data")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_retran"
CTLFLAG_RD
CTLFLAG_RD
&rack_tlp_retran
rack_tlp_retran
rack_tlp_retran
"Total number of tail loss probe sending retransmitted data"
rack_tlp_retran_bytes = counter_u64_alloc(M_WAITOK);
rack_tlp_retran_bytes = counter_u64_alloc(M_WAITOK)
rack_tlp_retran_bytes
rack_tlp_retran_bytes
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_bytes", CTLFLAG_RD,	    &rack_tlp_retran_bytes,	    "Total bytes of tail loss probe sending retransmitted data");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_bytes", CTLFLAG_RD,	    &rack_tlp_retran_bytes,	    "Total bytes of tail loss probe sending retransmitted data")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_retran_bytes"
CTLFLAG_RD
CTLFLAG_RD
&rack_tlp_retran_bytes
rack_tlp_retran_bytes
rack_tlp_retran_bytes
"Total bytes of tail loss probe sending retransmitted data"
rack_tlp_retran_fail = counter_u64_alloc(M_WAITOK);
rack_tlp_retran_fail = counter_u64_alloc(M_WAITOK)
rack_tlp_retran_fail
rack_tlp_retran_fail
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_fail", CTLFLAG_RD,	    &rack_tlp_retran_fail,	    "Total number of tail loss probe sending retransmitted data that failed (wait for t3)");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_retran_fail", CTLFLAG_RD,	    &rack_tlp_retran_fail,	    "Total number of tail loss probe sending retransmitted data that failed (wait for t3)")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_retran_fail"
CTLFLAG_RD
CTLFLAG_RD
&rack_tlp_retran_fail
rack_tlp_retran_fail
rack_tlp_retran_fail
"Total number of tail loss probe sending retransmitted data that failed (wait for t3)"
rack_to_tot = counter_u64_alloc(M_WAITOK);
rack_to_tot = counter_u64_alloc(M_WAITOK)
rack_to_tot
rack_to_tot
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_to_tot", CTLFLAG_RD,	    &rack_to_tot,	    "Total number of times the rack to expired?");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "rack_to_tot", CTLFLAG_RD,	    &rack_to_tot,	    "Total number of times the rack to expired?")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"rack_to_tot"
CTLFLAG_RD
CTLFLAG_RD
&rack_to_tot
rack_to_tot
rack_to_tot
"Total number of times the rack to expired?"
rack_to_arm_rack = counter_u64_alloc(M_WAITOK);
rack_to_arm_rack = counter_u64_alloc(M_WAITOK)
rack_to_arm_rack
rack_to_arm_rack
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_rack", CTLFLAG_RD,	    &rack_to_arm_rack,	    "Total number of times the rack timer armed?");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_rack", CTLFLAG_RD,	    &rack_to_arm_rack,	    "Total number of times the rack timer armed?")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"arm_rack"
CTLFLAG_RD
CTLFLAG_RD
&rack_to_arm_rack
rack_to_arm_rack
rack_to_arm_rack
"Total number of times the rack timer armed?"
rack_to_arm_tlp = counter_u64_alloc(M_WAITOK);
rack_to_arm_tlp = counter_u64_alloc(M_WAITOK)
rack_to_arm_tlp
rack_to_arm_tlp
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_tlp", CTLFLAG_RD,	    &rack_to_arm_tlp,	    "Total number of times the tlp timer armed?");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "arm_tlp", CTLFLAG_RD,	    &rack_to_arm_tlp,	    "Total number of times the tlp timer armed?")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"arm_tlp"
CTLFLAG_RD
CTLFLAG_RD
&rack_to_arm_tlp
rack_to_arm_tlp
rack_to_arm_tlp
"Total number of times the tlp timer armed?"
rack_paced_segments = counter_u64_alloc(M_WAITOK);
rack_paced_segments = counter_u64_alloc(M_WAITOK)
rack_paced_segments
rack_paced_segments
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "paced", CTLFLAG_RD,	    &rack_paced_segments,	    "Total number of times a segment send caused hptsi");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "paced", CTLFLAG_RD,	    &rack_paced_segments,	    "Total number of times a segment send caused hptsi")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"paced"
CTLFLAG_RD
CTLFLAG_RD
&rack_paced_segments
rack_paced_segments
rack_paced_segments
"Total number of times a segment send caused hptsi"
rack_unpaced_segments = counter_u64_alloc(M_WAITOK);
rack_unpaced_segments = counter_u64_alloc(M_WAITOK)
rack_unpaced_segments
rack_unpaced_segments
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "unpaced", CTLFLAG_RD,	    &rack_unpaced_segments,	    "Total number of times a segment did not cause hptsi");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "unpaced", CTLFLAG_RD,	    &rack_unpaced_segments,	    "Total number of times a segment did not cause hptsi")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"unpaced"
CTLFLAG_RD
CTLFLAG_RD
&rack_unpaced_segments
rack_unpaced_segments
rack_unpaced_segments
"Total number of times a segment did not cause hptsi"
rack_saw_enobuf = counter_u64_alloc(M_WAITOK);
rack_saw_enobuf = counter_u64_alloc(M_WAITOK)
rack_saw_enobuf
rack_saw_enobuf
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enobufs", CTLFLAG_RD,	    &rack_saw_enobuf,	    "Total number of times a segment did not cause hptsi");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enobufs", CTLFLAG_RD,	    &rack_saw_enobuf,	    "Total number of times a segment did not cause hptsi")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"saw_enobufs"
CTLFLAG_RD
CTLFLAG_RD
&rack_saw_enobuf
rack_saw_enobuf
rack_saw_enobuf
"Total number of times a segment did not cause hptsi"
rack_saw_enetunreach = counter_u64_alloc(M_WAITOK);
rack_saw_enetunreach = counter_u64_alloc(M_WAITOK)
rack_saw_enetunreach
rack_saw_enetunreach
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enetunreach", CTLFLAG_RD,	    &rack_saw_enetunreach,	    "Total number of times a segment did not cause hptsi");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "saw_enetunreach", CTLFLAG_RD,	    &rack_saw_enetunreach,	    "Total number of times a segment did not cause hptsi")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"saw_enetunreach"
CTLFLAG_RD
CTLFLAG_RD
&rack_saw_enetunreach
rack_saw_enetunreach
rack_saw_enetunreach
"Total number of times a segment did not cause hptsi"
rack_to_alloc = counter_u64_alloc(M_WAITOK);
rack_to_alloc = counter_u64_alloc(M_WAITOK)
rack_to_alloc
rack_to_alloc
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocs", CTLFLAG_RD,	    &rack_to_alloc,	    "Total allocations of tracking structures");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocs", CTLFLAG_RD,	    &rack_to_alloc,	    "Total allocations of tracking structures")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"allocs"
CTLFLAG_RD
CTLFLAG_RD
&rack_to_alloc
rack_to_alloc
rack_to_alloc
"Total allocations of tracking structures"
rack_to_alloc_hard = counter_u64_alloc(M_WAITOK);
rack_to_alloc_hard = counter_u64_alloc(M_WAITOK)
rack_to_alloc_hard
rack_to_alloc_hard
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allochard", CTLFLAG_RD,	    &rack_to_alloc_hard,	    "Total allocations done with sleeping the hard way");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allochard", CTLFLAG_RD,	    &rack_to_alloc_hard,	    "Total allocations done with sleeping the hard way")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"allochard"
CTLFLAG_RD
CTLFLAG_RD
&rack_to_alloc_hard
rack_to_alloc_hard
rack_to_alloc_hard
"Total allocations done with sleeping the hard way"
rack_to_alloc_emerg = counter_u64_alloc(M_WAITOK);
rack_to_alloc_emerg = counter_u64_alloc(M_WAITOK)
rack_to_alloc_emerg
rack_to_alloc_emerg
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocemerg", CTLFLAG_RD,	    &rack_to_alloc_emerg,	    "Total allocations done from emergency cache");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "allocemerg", CTLFLAG_RD,	    &rack_to_alloc_emerg,	    "Total allocations done from emergency cache")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"allocemerg"
CTLFLAG_RD
CTLFLAG_RD
&rack_to_alloc_emerg
rack_to_alloc_emerg
rack_to_alloc_emerg
"Total allocations done from emergency cache"
rack_alloc_limited_conns = counter_u64_alloc(M_WAITOK);
rack_alloc_limited_conns = counter_u64_alloc(M_WAITOK)
rack_alloc_limited_conns
rack_alloc_limited_conns
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "alloc_limited_conns", CTLFLAG_RD,	    &rack_alloc_limited_conns,	    "Connections with allocations dropped due to limit");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "alloc_limited_conns", CTLFLAG_RD,	    &rack_alloc_limited_conns,	    "Connections with allocations dropped due to limit")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"alloc_limited_conns"
CTLFLAG_RD
CTLFLAG_RD
&rack_alloc_limited_conns
rack_alloc_limited_conns
rack_alloc_limited_conns
"Connections with allocations dropped due to limit"
rack_split_limited = counter_u64_alloc(M_WAITOK);
rack_split_limited = counter_u64_alloc(M_WAITOK)
rack_split_limited
rack_split_limited
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limited", CTLFLAG_RD,	    &rack_split_limited,	    "Split allocations dropped due to limit");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "split_limited", CTLFLAG_RD,	    &rack_split_limited,	    "Split allocations dropped due to limit")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"split_limited"
CTLFLAG_RD
CTLFLAG_RD
&rack_split_limited
rack_split_limited
rack_split_limited
"Split allocations dropped due to limit"
rack_sack_proc_all = counter_u64_alloc(M_WAITOK);
rack_sack_proc_all = counter_u64_alloc(M_WAITOK)
rack_sack_proc_all
rack_sack_proc_all
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_long", CTLFLAG_RD,	    &rack_sack_proc_all,	    "Total times we had to walk whole list for sack processing");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_long", CTLFLAG_RD,	    &rack_sack_proc_all,	    "Total times we had to walk whole list for sack processing")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"sack_long"
CTLFLAG_RD
CTLFLAG_RD
&rack_sack_proc_all
rack_sack_proc_all
rack_sack_proc_all
"Total times we had to walk whole list for sack processing"
rack_sack_proc_restart = counter_u64_alloc(M_WAITOK);
rack_sack_proc_restart = counter_u64_alloc(M_WAITOK)
rack_sack_proc_restart
rack_sack_proc_restart
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_restart", CTLFLAG_RD,	    &rack_sack_proc_restart,	    "Total times we had to walk whole list due to a restart");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_restart", CTLFLAG_RD,	    &rack_sack_proc_restart,	    "Total times we had to walk whole list due to a restart")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"sack_restart"
CTLFLAG_RD
CTLFLAG_RD
&rack_sack_proc_restart
rack_sack_proc_restart
rack_sack_proc_restart
"Total times we had to walk whole list due to a restart"
rack_sack_proc_short = counter_u64_alloc(M_WAITOK);
rack_sack_proc_short = counter_u64_alloc(M_WAITOK)
rack_sack_proc_short
rack_sack_proc_short
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_short", CTLFLAG_RD,	    &rack_sack_proc_short,	    "Total times we took shortcut for sack processing");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "sack_short", CTLFLAG_RD,	    &rack_sack_proc_short,	    "Total times we took shortcut for sack processing")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"sack_short"
CTLFLAG_RD
CTLFLAG_RD
&rack_sack_proc_short
rack_sack_proc_short
rack_sack_proc_short
"Total times we took shortcut for sack processing"
rack_enter_tlp_calc = counter_u64_alloc(M_WAITOK);
rack_enter_tlp_calc = counter_u64_alloc(M_WAITOK)
rack_enter_tlp_calc
rack_enter_tlp_calc
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_calc_entered", CTLFLAG_RD,	    &rack_enter_tlp_calc,	    "Total times we called calc-tlp");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_calc_entered", CTLFLAG_RD,	    &rack_enter_tlp_calc,	    "Total times we called calc-tlp")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_calc_entered"
CTLFLAG_RD
CTLFLAG_RD
&rack_enter_tlp_calc
rack_enter_tlp_calc
rack_enter_tlp_calc
"Total times we called calc-tlp"
rack_used_tlpmethod = counter_u64_alloc(M_WAITOK);
rack_used_tlpmethod = counter_u64_alloc(M_WAITOK)
rack_used_tlpmethod
rack_used_tlpmethod
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method", CTLFLAG_RD,	    &rack_used_tlpmethod,	    "Total number of runt sacks");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method", CTLFLAG_RD,	    &rack_used_tlpmethod,	    "Total number of runt sacks")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"hit_tlp_method"
CTLFLAG_RD
CTLFLAG_RD
&rack_used_tlpmethod
rack_used_tlpmethod
rack_used_tlpmethod
"Total number of runt sacks"
rack_used_tlpmethod2 = counter_u64_alloc(M_WAITOK);
rack_used_tlpmethod2 = counter_u64_alloc(M_WAITOK)
rack_used_tlpmethod2
rack_used_tlpmethod2
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method2", CTLFLAG_RD,	    &rack_used_tlpmethod2,	    "Total number of runt sacks 2");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "hit_tlp_method2", CTLFLAG_RD,	    &rack_used_tlpmethod2,	    "Total number of runt sacks 2")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"hit_tlp_method2"
CTLFLAG_RD
CTLFLAG_RD
&rack_used_tlpmethod2
rack_used_tlpmethod2
rack_used_tlpmethod2
"Total number of runt sacks 2"
rack_runt_sacks = counter_u64_alloc(M_WAITOK);
rack_runt_sacks = counter_u64_alloc(M_WAITOK)
rack_runt_sacks
rack_runt_sacks
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "runtsacks", CTLFLAG_RD,	    &rack_runt_sacks,	    "Total number of runt sacks");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "runtsacks", CTLFLAG_RD,	    &rack_runt_sacks,	    "Total number of runt sacks")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"runtsacks"
CTLFLAG_RD
CTLFLAG_RD
&rack_runt_sacks
rack_runt_sacks
rack_runt_sacks
"Total number of runt sacks"
rack_progress_drops = counter_u64_alloc(M_WAITOK);
rack_progress_drops = counter_u64_alloc(M_WAITOK)
rack_progress_drops
rack_progress_drops
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prog_drops", CTLFLAG_RD,	    &rack_progress_drops,	    "Total number of progress drops");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "prog_drops", CTLFLAG_RD,	    &rack_progress_drops,	    "Total number of progress drops")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"prog_drops"
CTLFLAG_RD
CTLFLAG_RD
&rack_progress_drops
rack_progress_drops
rack_progress_drops
"Total number of progress drops"
rack_input_idle_reduces = counter_u64_alloc(M_WAITOK);
rack_input_idle_reduces = counter_u64_alloc(M_WAITOK)
rack_input_idle_reduces
rack_input_idle_reduces
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_oninput", CTLFLAG_RD,	    &rack_input_idle_reduces,	    "Total number of idle reductions on input");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "idle_reduce_oninput", CTLFLAG_RD,	    &rack_input_idle_reduces,	    "Total number of idle reductions on input")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"idle_reduce_oninput"
CTLFLAG_RD
CTLFLAG_RD
&rack_input_idle_reduces
rack_input_idle_reduces
rack_input_idle_reduces
"Total number of idle reductions on input"
rack_tlp_does_nada = counter_u64_alloc(M_WAITOK);
rack_tlp_does_nada = counter_u64_alloc(M_WAITOK)
rack_tlp_does_nada
rack_tlp_does_nada
counter_u64_alloc(M_WAITOK)
counter_u64_alloc
counter_u64_alloc
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_nada", CTLFLAG_RD,	    &rack_tlp_does_nada,	    "Total number of nada tlp calls");
SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "tlp_nada", CTLFLAG_RD,	    &rack_tlp_does_nada,	    "Total number of nada tlp calls")
SYSCTL_ADD_COUNTER_U64
SYSCTL_ADD_COUNTER_U64
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"tlp_nada"
CTLFLAG_RD
CTLFLAG_RD
&rack_tlp_does_nada
rack_tlp_does_nada
rack_tlp_does_nada
"Total number of nada tlp calls"
COUNTER_ARRAY_ALLOC(rack_out_size, TCP_MSS_ACCT_SIZE, M_WAITOK);
COUNTER_ARRAY_ALLOC(rack_out_size, TCP_MSS_ACCT_SIZE, M_WAITOK)
COUNTER_ARRAY_ALLOC
COUNTER_ARRAY_ALLOC
rack_out_size
rack_out_size
TCP_MSS_ACCT_SIZE
TCP_MSS_ACCT_SIZE
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "outsize", CTLFLAG_RD,	    rack_out_size, TCP_MSS_ACCT_SIZE, "MSS send sizes");
SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "outsize", CTLFLAG_RD,	    rack_out_size, TCP_MSS_ACCT_SIZE, "MSS send sizes")
SYSCTL_ADD_COUNTER_U64_ARRAY
SYSCTL_ADD_COUNTER_U64_ARRAY
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"outsize"
CTLFLAG_RD
CTLFLAG_RD
rack_out_size
rack_out_size
TCP_MSS_ACCT_SIZE
TCP_MSS_ACCT_SIZE
"MSS send sizes"
COUNTER_ARRAY_ALLOC(rack_opts_arry, RACK_OPTS_SIZE, M_WAITOK);
COUNTER_ARRAY_ALLOC(rack_opts_arry, RACK_OPTS_SIZE, M_WAITOK)
COUNTER_ARRAY_ALLOC
COUNTER_ARRAY_ALLOC
rack_opts_arry
rack_opts_arry
RACK_OPTS_SIZE
RACK_OPTS_SIZE
M_WAITOK
M_WAITOK
SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "opts", CTLFLAG_RD,	    rack_opts_arry, RACK_OPTS_SIZE, "RACK Option Stats");
SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "opts", CTLFLAG_RD,	    rack_opts_arry, RACK_OPTS_SIZE, "RACK Option Stats")
SYSCTL_ADD_COUNTER_U64_ARRAY
SYSCTL_ADD_COUNTER_U64_ARRAY
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"opts"
CTLFLAG_RD
CTLFLAG_RD
rack_opts_arry
rack_opts_arry
RACK_OPTS_SIZE
RACK_OPTS_SIZE
"RACK Option Stats"
SYSCTL_ADD_PROC(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "clear", CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE,	    &rack_clear_counter, 0, sysctl_rack_clear, "IU", "Clear counters");
SYSCTL_ADD_PROC(&rack_sysctl_ctx,	    SYSCTL_CHILDREN(rack_sysctl_root),	    OID_AUTO, "clear", CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE,	    &rack_clear_counter, 0, sysctl_rack_clear, "IU", "Clear counters")
SYSCTL_ADD_PROC
SYSCTL_ADD_PROC
&rack_sysctl_ctx
rack_sysctl_ctx
rack_sysctl_ctx
SYSCTL_CHILDREN(rack_sysctl_root)
SYSCTL_CHILDREN
SYSCTL_CHILDREN
rack_sysctl_root
rack_sysctl_root
OID_AUTO
OID_AUTO
"clear"
CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE
CTLTYPE_UINT | CTLFLAG_RW
CTLTYPE_UINT
CTLTYPE_UINT
CTLFLAG_RW
CTLFLAG_RW
CTLFLAG_MPSAFE
CTLFLAG_MPSAFE
&rack_clear_counter
rack_clear_counter
rack_clear_counter
0
sysctl_rack_clear
sysctl_rack_clear
"IU"
"Clear counters"
-----joern-----
(946,336,0)
(797,386,0)
(256,513,0)
(423,674,0)
(478,416,0)
(271,789,0)
(749,461,0)
(105,758,0)
(121,470,0)
(556,789,0)
(710,645,0)
(639,325,0)
(157,792,0)
(536,702,0)
(54,516,0)
(78,766,0)
(611,679,0)
(453,363,0)
(746,513,0)
(287,737,0)
(88,472,0)
(17,944,0)
(230,755,0)
(810,574,0)
(937,564,0)
(549,937,0)
(839,121,0)
(900,819,0)
(591,916,0)
(246,583,0)
(903,461,0)
(524,479,0)
(558,64,0)
(214,432,0)
(862,766,0)
(528,566,0)
(434,461,0)
(938,66,0)
(598,286,0)
(750,378,0)
(847,251,0)
(835,556,0)
(951,204,0)
(682,460,0)
(670,461,0)
(375,634,0)
(777,639,0)
(856,937,0)
(355,143,0)
(356,472,0)
(598,548,0)
(734,871,0)
(663,768,0)
(312,478,0)
(332,461,0)
(958,741,0)
(206,824,0)
(813,927,0)
(842,568,0)
(19,656,0)
(100,26,0)
(82,621,0)
(16,853,0)
(889,56,0)
(28,23,0)
(888,240,0)
(699,215,0)
(6,48,0)
(364,371,0)
(235,537,0)
(604,900,0)
(618,314,0)
(306,27,0)
(775,314,0)
(899,6,0)
(457,163,0)
(168,213,0)
(920,375,0)
(24,476,0)
(296,181,0)
(830,732,0)
(384,890,0)
(146,55,0)
(703,650,0)
(412,461,0)
(922,379,0)
(365,5,0)
(406,619,0)
(455,119,0)
(667,824,0)
(415,283,0)
(772,247,0)
(565,757,0)
(119,826,0)
(570,5,0)
(201,240,0)
(283,199,0)
(578,23,0)
(81,461,0)
(46,379,0)
(953,349,0)
(629,284,0)
(523,340,0)
(222,349,0)
(754,133,0)
(136,504,0)
(85,647,0)
(730,825,0)
(692,121,0)
(438,119,0)
(872,857,0)
(505,94,0)
(880,932,0)
(814,735,0)
(336,461,0)
(854,431,0)
(213,1,0)
(170,887,0)
(153,592,0)
(200,612,0)
(568,612,0)
(755,363,0)
(167,888,0)
(539,217,0)
(5,461,0)
(749,165,0)
(496,41,0)
(636,176,0)
(122,810,0)
(291,794,0)
(459,461,0)
(115,556,0)
(131,416,0)
(741,670,0)
(905,373,0)
(677,721,0)
(35,857,0)
(354,472,0)
(739,797,0)
(254,75,0)
(328,700,0)
(303,336,0)
(871,593,0)
(404,38,0)
(244,451,0)
(378,881,0)
(590,456,0)
(516,461,0)
(341,785,0)
(894,565,0)
(385,571,0)
(36,531,0)
(65,119,0)
(281,261,0)
(259,461,0)
(919,308,0)
(186,146,0)
(555,788,0)
(221,472,0)
(379,326,0)
(766,298,0)
(556,835,0)
(888,15,0)
(513,746,0)
(783,819,0)
(698,746,0)
(787,461,0)
(382,551,0)
(547,222,0)
(934,143,0)
(24,66,0)
(16,39,0)
(41,175,0)
(711,810,0)
(832,674,0)
(596,176,0)
(630,222,0)
(149,143,0)
(539,461,0)
(62,116,0)
(669,733,0)
(553,434,0)
(362,926,0)
(825,730,0)
(807,787,0)
(412,662,0)
(369,556,0)
(216,146,0)
(25,461,0)
(387,583,0)
(146,461,0)
(257,247,0)
(140,478,0)
(473,561,0)
(435,400,0)
(959,720,0)
(798,583,0)
(418,737,0)
(467,763,0)
(481,146,0)
(918,893,0)
(520,618,0)
(657,518,0)
(561,796,0)
(854,461,0)
(589,64,0)
(189,561,0)
(323,414,0)
(480,206,0)
(717,12,0)
(592,461,0)
(340,6,0)
(127,146,0)
(848,819,0)
(950,766,0)
(518,787,0)
(213,168,0)
(737,622,0)
(5,266,0)
(565,904,0)
(626,5,0)
(282,937,0)
(571,385,0)
(565,461,0)
(375,920,0)
(615,792,0)
(178,461,0)
(331,314,0)
(508,680,0)
(669,861,0)
(829,69,0)
(722,708,0)
(307,120,0)
(949,576,0)
(817,864,0)
(222,461,0)
(13,556,0)
(22,668,0)
(838,504,0)
(680,394,0)
(794,670,0)
(2,461,0)
(142,673,0)
(299,25,0)
(389,516,0)
(21,125,0)
(607,904,0)
(399,364,0)
(544,565,0)
(906,819,0)
(175,41,0)
(623,903,0)
(185,25,0)
(836,737,0)
(650,703,0)
(60,670,0)
(277,459,0)
(283,391,0)
(644,461,0)
(651,676,0)
(41,735,0)
(495,811,0)
(857,771,0)
(641,568,0)
(818,556,0)
(158,64,0)
(870,136,0)
(896,277,0)
(694,635,0)
(805,232,0)
(310,619,0)
(579,23,0)
(372,179,0)
(330,247,0)
(146,763,0)
(351,222,0)
(583,461,0)
(139,390,0)
(261,64,0)
(71,245,0)
(432,459,0)
(548,598,0)
(370,532,0)
(308,919,0)
(815,880,0)
(515,491,0)
(138,758,0)
(98,459,0)
(20,223,0)
(874,637,0)
(875,57,0)
(377,674,0)
(650,935,0)
(792,586,0)
(173,857,0)
(880,532,0)
(674,832,0)
(808,364,0)
(895,39,0)
(326,379,0)
(491,539,0)
(460,621,0)
(268,343,0)
(72,583,0)
(143,501,0)
(171,568,0)
(843,875,0)
(498,23,0)
(792,461,0)
(488,587,0)
(45,885,0)
(410,792,0)
(931,755,0)
(943,172,0)
(181,206,0)
(584,314,0)
(194,373,0)
(719,610,0)
(350,688,0)
(559,168,0)
(426,662,0)
(669,885,0)
(276,459,0)
(510,44,0)
(964,461,0)
(535,55,0)
(352,222,0)
(539,56,0)
(525,6,0)
(39,16,0)
(890,461,0)
(723,890,0)
(460,708,0)
(191,461,0)
(884,920,0)
(288,504,0)
(904,565,0)
(182,85,0)
(37,478,0)
(639,461,0)
(869,730,0)
(416,478,0)
(143,461,0)
(198,964,0)
(360,176,0)
(199,283,0)
(892,379,0)
(375,764,0)
(941,798,0)
(643,848,0)
(800,176,0)
(317,375,0)
(64,261,0)
(119,461,0)
(345,539,0)
(613,157,0)
(274,449,0)
(888,461,0)
(27,284,0)
(32,259,0)
(177,888,0)
(521,266,0)
(137,887,0)
(758,930,0)
(124,24,0)
(314,461,0)
(751,768,0)
(631,176,0)
(108,472,0)
(289,937,0)
(373,461,0)
(504,461,0)
(329,875,0)
(816,582,0)
(914,222,0)
(309,903,0)
(507,670,0)
(472,88,0)
(251,565,0)
(363,755,0)
(166,47,0)
(796,561,0)
(960,598,0)
(881,378,0)
(891,871,0)
(912,373,0)
(730,461,0)
(430,85,0)
(738,711,0)
(85,182,0)
(766,487,0)
(217,539,0)
(332,400,0)
(33,619,0)
(673,927,0)
(66,24,0)
(116,378,0)
(543,496,0)
(316,875,0)
(742,375,0)
(428,175,0)
(575,375,0)
(936,448,0)
(770,199,0)
(402,378,0)
(803,783,0)
(67,2,0)
(92,41,0)
(227,592,0)
(59,887,0)
(29,827,0)
(31,827,0)
(391,283,0)
(85,461,0)
(831,819,0)
(4,556,0)
(561,461,0)
(286,598,0)
(442,733,0)
(644,164,0)
(219,459,0)
(104,57,0)
(778,880,0)
(545,586,0)
(627,308,0)
(512,368,0)
(759,583,0)
(154,715,0)
(294,269,0)
(917,660,0)
(687,185,0)
(414,448,0)
(319,24,0)
(819,900,0)
(465,937,0)
(755,576,0)
(3,150,0)
(373,905,0)
(726,149,0)
(14,561,0)
(700,583,0)
(546,751,0)
(245,71,0)
(204,336,0)
(731,888,0)
(6,12,0)
(193,459,0)
(278,439,0)
(509,758,0)
(930,758,0)
(195,880,0)
(347,504,0)
(447,278,0)
(650,461,0)
(278,893,0)
(468,242,0)
(880,461,0)
(184,880,0)
(745,734,0)
(834,513,0)
(342,25,0)
(346,336,0)
(600,587,0)
(790,347,0)
(511,283,0)
(311,389,0)
(696,932,0)
(810,461,0)
(927,673,0)
(593,871,0)
(433,390,0)
(573,24,0)
(582,887,0)
(492,568,0)
(411,472,0)
(376,371,0)
(348,761,0)
(513,834,0)
(551,378,0)
(925,880,0)
(247,461,0)
(172,461,0)
(587,675,0)
(441,158,0)
(425,619,0)
(758,461,0)
(336,732,0)
(619,461,0)
(695,459,0)
(500,16,0)
(264,379,0)
(464,549,0)
(580,787,0)
(797,864,0)
(655,743,0)
(937,461,0)
(679,587,0)
(421,678,0)
(608,378,0)
(620,930,0)
(76,639,0)
(863,213,0)
(797,822,0)
(266,5,0)
(781,827,0)
(255,101,0)
(718,176,0)
(446,810,0)
(484,758,0)
(701,565,0)
(215,5,0)
(597,539,0)
(599,182,0)
(875,236,0)
(207,564,0)
(614,675,0)
(672,966,0)
(860,685,0)
(561,449,0)
(378,461,0)
(252,414,0)
(228,47,0)
(295,787,0)
(909,835,0)
(527,27,0)
(314,344,0)
(619,44,0)
(572,819,0)
(390,433,0)
(420,594,0)
(439,278,0)
(806,637,0)
(403,513,0)
(763,146,0)
(379,461,0)
(56,539,0)
(367,876,0)
(685,860,0)
(624,871,0)
(265,792,0)
(44,619,0)
(503,598,0)
(714,236,0)
(485,766,0)
(99,810,0)
(407,773,0)
(622,737,0)
(887,137,0)
(823,871,0)
(75,650,0)
(220,801,0)
(475,268,0)
(462,956,0)
(865,88,0)
(9,451,0)
(782,487,0)
(810,711,0)
(947,247,0)
(810,933,0)
(962,553,0)
(413,565,0)
(381,778,0)
(743,206,0)
(280,693,0)
(43,379,0)
(927,813,0)
(320,41,0)
(279,412,0)
(956,461,0)
(827,702,0)
(766,461,0)
(526,385,0)
(605,259,0)
(753,927,0)
(16,461,0)
(774,5,0)
(674,514,0)
(478,461,0)
(249,876,0)
(660,917,0)
(483,561,0)
(396,853,0)
(267,23,0)
(121,849,0)
(361,431,0)
(429,587,0)
(259,605,0)
(504,136,0)
(654,674,0)
(191,398,0)
(117,478,0)
(861,669,0)
(61,245,0)
(647,85,0)
(263,737,0)
(851,504,0)
(594,143,0)
(517,25,0)
(126,356,0)
(51,758,0)
(720,247,0)
(812,119,0)
(583,700,0)
(533,792,0)
(715,956,0)
(598,461,0)
(513,461,0)
(707,64,0)
(474,364,0)
(378,551,0)
(25,785,0)
(504,347,0)
(125,21,0)
(41,461,0)
(871,461,0)
(568,492,0)
(568,461,0)
(448,414,0)
(146,541,0)
(129,827,0)
(83,6,0)
(27,461,0)
(876,90,0)
(212,5,0)
(91,669,0)
(176,636,0)
(460,682,0)
(691,64,0)
(660,461,0)
(293,871,0)
(364,474,0)
(554,872,0)
(107,121,0)
(827,461,0)
(531,561,0)
(514,674,0)
(670,741,0)
(304,460,0)
(273,755,0)
(787,807,0)
(538,64,0)
(497,598,0)
(302,757,0)
(5,212,0)
(648,41,0)
(785,25,0)
(357,178,0)
(379,264,0)
(587,727,0)
(176,631,0)
(338,278,0)
(132,558,0)
(472,356,0)
(789,556,0)
(822,797,0)
(343,461,0)
(576,755,0)
(34,685,0)
(712,232,0)
(665,639,0)
(343,268,0)
(929,85,0)
(866,130,0)
(472,108,0)
(562,217,0)
(16,761,0)
(826,119,0)
(592,241,0)
(477,143,0)
(577,513,0)
(103,857,0)
(38,459,0)
(787,321,0)
(788,2,0)
(751,461,0)
(824,206,0)
(145,583,0)
(841,119,0)
(888,676,0)
(349,222,0)
(64,158,0)
(440,764,0)
(645,23,0)
(628,27,0)
(64,461,0)
(556,668,0)
(886,888,0)
(120,461,0)
(176,596,0)
(737,721,0)
(771,857,0)
(747,314,0)
(833,834,0)
(144,121,0)
(400,332,0)
(359,568,0)
(556,461,0)
(964,436,0)
(927,461,0)
(595,771,0)
(315,178,0)
(179,314,0)
(616,162,0)
(90,876,0)
(247,63,0)
(760,287,0)
(478,479,0)
(327,146,0)
(961,514,0)
(592,106,0)
(563,766,0)
(206,743,0)
(924,875,0)
(664,956,0)
(966,379,0)
(487,766,0)
(539,491,0)
(81,417,0)
(776,737,0)
(476,24,0)
(459,432,0)
(902,433,0)
(552,593,0)
(792,157,0)
(451,461,0)
(737,461,0)
(756,647,0)
(926,362,0)
(101,461,0)
(121,205,0)
(422,451,0)
(638,851,0)
(765,504,0)
(87,796,0)
(85,684,0)
(278,461,0)
(8,414,0)
(795,857,0)
(253,787,0)
(231,876,0)
(903,309,0)
(529,373,0)
(458,106,0)
(106,592,0)
(297,264,0)
(401,876,0)
(937,163,0)
(923,592,0)
(876,461,0)
(773,120,0)
(659,481,0)
(799,887,0)
(819,848,0)
(119,841,0)
(111,143,0)
(921,866,0)
(522,927,0)
(101,693,0)
(414,252,0)
(769,143,0)
(7,283,0)
(569,470,0)
(89,650,0)
(601,931,0)
(802,16,0)
(188,119,0)
(374,249,0)
(828,644,0)
(915,343,0)
(571,461,0)
(301,644,0)
(637,874,0)
(368,758,0)
(74,844,0)
(222,162,0)
(729,206,0)
(748,213,0)
(353,119,0)
(290,176,0)
(68,874,0)
(885,669,0)
(857,566,0)
(928,854,0)
(97,24,0)
(292,417,0)
(459,38,0)
(52,252,0)
(916,639,0)
(275,172,0)
(143,149,0)
(819,783,0)
(963,81,0)
(877,857,0)
(437,644,0)
(804,434,0)
(240,888,0)
(394,680,0)
(668,556,0)
(70,587,0)
(471,670,0)
(952,394,0)
(883,669,0)
(190,727,0)
(557,460,0)
(713,306,0)
(161,541,0)
(588,165,0)
(779,213,0)
(681,819,0)
(879,6,0)
(787,518,0)
(489,682,0)
(210,860,0)
(744,336,0)
(243,28,0)
(693,101,0)
(94,25,0)
(305,822,0)
(644,69,0)
(502,926,0)
(478,26,0)
(27,527,0)
(466,888,0)
(472,461,0)
(640,605,0)
(128,362,0)
(40,871,0)
(669,461,0)
(639,777,0)
(675,587,0)
(318,670,0)
(335,905,0)
(366,539,0)
(602,861,0)
(871,734,0)
(957,16,0)
(419,826,0)
(797,461,0)
(30,758,0)
(513,93,0)
(5,215,0)
(587,461,0)
(42,283,0)
(932,880,0)
(373,452,0)
(314,179,0)
(537,956,0)
(64,558,0)
(205,121,0)
(837,25,0)
(499,890,0)
(236,875,0)
(653,344,0)
(121,461,0)
(202,137,0)
(152,827,0)
(176,461,0)
(901,807,0)
(337,876,0)
(73,326,0)
(878,960,0)
(927,150,0)
(6,461,0)
(333,749,0)
(764,375,0)
(935,650,0)
(143,594,0)
(908,565,0)
(768,751,0)
(192,414,0)
(424,129,0)
(550,619,0)
(160,797,0)
(857,872,0)
(414,461,0)
(706,283,0)
(69,644,0)
(417,81,0)
(380,592,0)
(93,513,0)
(598,960,0)
(118,631,0)
(560,501,0)
(336,204,0)
(752,674,0)
(18,504,0)
(678,827,0)
(371,364,0)
(676,888,0)
(26,478,0)
(375,461,0)
(610,461,0)
(566,857,0)
(540,583,0)
(704,527,0)
(855,460,0)
(887,582,0)
(247,635,0)
(876,249,0)
(564,937,0)
(1,213,0)
(486,574,0)
(284,27,0)
(898,436,0)
(119,65,0)
(58,841,0)
(48,6,0)
(23,645,0)
(757,565,0)
(617,386,0)
(229,30,0)
(501,143,0)
(609,212,0)
(308,461,0)
(705,712,0)
(459,277,0)
(222,914,0)
(12,6,0)
(603,469,0)
(206,181,0)
(937,549,0)
(619,844,0)
(238,849,0)
(956,715,0)
(766,485,0)
(123,27,0)
(197,539,0)
(55,146,0)
(206,461,0)
(685,461,0)
(853,16,0)
(727,587,0)
(147,513,0)
(398,191,0)
(2,788,0)
(96,314,0)
(758,30,0)
(436,964,0)
(469,792,0)
(568,171,0)
(586,792,0)
(470,121,0)
(493,364,0)
(684,85,0)
(208,125,0)
(109,108,0)
(110,927,0)
(71,461,0)
(761,16,0)
(809,927,0)
(408,476,0)
(728,943,0)
(388,571,0)
(163,937,0)
(532,880,0)
(565,251,0)
(689,71,0)
(662,412,0)
(732,336,0)
(583,145,0)
(585,875,0)
(248,336,0)
(755,461,0)
(165,749,0)
(443,755,0)
(634,375,0)
(456,461,0)
(225,634,0)
(490,887,0)
(948,16,0)
(25,94,0)
(926,461,0)
(23,579,0)
(866,461,0)
(0,398,0)
(392,876,0)
(373,269,0)
(113,579,0)
(364,461,0)
(646,598,0)
(762,827,0)
(871,624,0)
(445,504,0)
(697,213,0)
(735,41,0)
(688,944,0)
(456,811,0)
(887,897,0)
(395,16,0)
(322,622,0)
(427,23,0)
(11,439,0)
(269,373,0)
(151,669,0)
(504,851,0)
(172,943,0)
(652,176,0)
(213,767,0)
(283,461,0)
(740,164,0)
(79,145,0)
(868,5,0)
(169,379,0)
(873,813,0)
(721,737,0)
(41,496,0)
(561,531,0)
(956,537,0)
(321,787,0)
(840,206,0)
(606,392,0)
(260,797,0)
(134,452,0)
(135,875,0)
(270,21,0)
(449,561,0)
(857,461,0)
(767,213,0)
(954,222,0)
(944,688,0)
(324,414,0)
(965,478,0)
(867,121,0)
(213,461,0)
(650,75,0)
(378,116,0)
(454,639,0)
(233,650,0)
(945,650,0)
(670,801,0)
(792,469,0)
(405,684,0)
(967,828,0)
(859,548,0)
(820,298,0)
(386,797,0)
(852,767,0)
(736,914,0)
(674,133,0)
(791,777,0)
(150,927,0)
(755,931,0)
(858,845,0)
(21,461,0)
(15,888,0)
(272,956,0)
(658,278,0)
(25,185,0)
(209,63,0)
(247,720,0)
(610,242,0)
(53,241,0)
(102,797,0)
(479,478,0)
(956,661,0)
(635,247,0)
(393,415,0)
(450,391,0)
(874,461,0)
(733,669,0)
(344,314,0)
(690,639,0)
(827,129,0)
(452,373,0)
(942,41,0)
(234,41,0)
(880,778,0)
(314,618,0)
(223,592,0)
(339,492,0)
(180,825,0)
(313,15,0)
(530,644,0)
(334,378,0)
(506,315,0)
(844,619,0)
(133,674,0)
(298,766,0)
(463,871,0)
(633,64,0)
(939,636,0)
(619,406,0)
(379,966,0)
(644,828,0)
(882,375,0)
(670,794,0)
(876,392,0)
(224,336,0)
(431,854,0)
(226,919,0)
(893,278,0)
(671,27,0)
(897,887,0)
(95,93,0)
(183,897,0)
(409,669,0)
(141,48,0)
(23,28,0)
(278,845,0)
(819,461,0)
(325,639,0)
(49,325,0)
(542,787,0)
(47,481,0)
(849,121,0)
(383,660,0)
(907,935,0)
(656,364,0)
(780,206,0)
(519,90,0)
(864,797,0)
(250,286,0)
(793,24,0)
(232,461,0)
(649,624,0)
(27,306,0)
(709,1,0)
(680,461,0)
(57,875,0)
(174,810,0)
(887,461,0)
(77,146,0)
(674,461,0)
(666,27,0)
(218,85,0)
(725,24,0)
(786,146,0)
(911,171,0)
(178,315,0)
(114,191,0)
(716,881,0)
(358,956,0)
(164,644,0)
(300,619,0)
(203,406,0)
(955,703,0)
(875,135,0)
(913,460,0)
(592,223,0)
(187,674,0)
(63,247,0)
(414,192,0)
(397,130,0)
(242,610,0)
(494,670,0)
(24,461,0)
(574,810,0)
(587,679,0)
(821,755,0)
(232,712,0)
(146,481,0)
(237,414,0)
(239,205,0)
(10,472,0)
(196,373,0)
(784,278,0)
(875,461,0)
(148,933,0)
(567,650,0)
(283,415,0)
(516,389,0)
(850,661,0)
(944,461,0)
(460,461,0)
(6,340,0)
(686,596,0)
(156,192,0)
(811,456,0)
(84,309,0)
(940,85,0)
(241,592,0)
(50,375,0)
(642,206,0)
(541,146,0)
(708,460,0)
(130,866,0)
(444,65,0)
(933,810,0)
(262,474,0)
(583,798,0)
(702,827,0)
(737,287,0)
(390,461,0)
(482,364,0)
(801,670,0)
(661,956,0)
(639,916,0)
(23,461,0)
(162,222,0)
(581,887,0)
(625,321,0)
(258,592,0)
(910,644,0)
(724,135,0)
(86,485,0)
(621,460,0)
(846,598,0)
(481,47,0)
(80,247,0)
(845,278,0)
(632,917,0)
(434,553,0)
(112,927,0)
(758,368,0)
(683,568,0)
(285,669,0)
(159,332,0)
(612,568,0)
(120,773,0)
(211,832,0)
(364,656,0)
(155,876,0)
(827,678,0)
(459,277,1)
(143,501,1)
(651,15,1)
(268,475,1)
(390,433,1)
(592,241,1)
(456,811,1)
(342,785,1)
(378,551,1)
(269,294,1)
(479,524,1)
(513,93,1)
(171,911,1)
(931,601,1)
(887,799,1)
(403,577,1)
(308,919,1)
(156,237,1)
(398,0,1)
(389,311,1)
(937,564,1)
(290,631,1)
(804,792,1)
(336,303,1)
(176,360,1)
(42,706,1)
(729,743,1)
(568,492,1)
(904,607,1)
(483,796,1)
(775,331,1)
(384,723,1)
(195,815,1)
(485,86,1)
(459,98,1)
(87,531,1)
(828,967,1)
(948,957,1)
(64,558,1)
(758,930,1)
(90,519,1)
(577,834,1)
(778,381,1)
(375,920,1)
(37,312,1)
(278,447,1)
(226,627,1)
(650,945,1)
(750,334,1)
(501,560,1)
(114,650,1)
(6,525,1)
(953,162,1)
(241,53,1)
(244,9,1)
(920,884,1)
(891,734,1)
(453,576,1)
(362,128,1)
(659,327,1)
(639,916,1)
(836,776,1)
(136,870,1)
(638,18,1)
(33,44,1)
(162,616,1)
(709,767,1)
(862,563,1)
(875,236,1)
(68,364,1)
(599,929,1)
(909,818,1)
(71,245,1)
(789,271,1)
(797,864,1)
(438,455,1)
(819,783,1)
(154,661,1)
(369,4,1)
(76,916,1)
(852,964,1)
(529,196,1)
(210,34,1)
(888,167,1)
(702,536,1)
(863,779,1)
(137,202,1)
(41,175,1)
(284,629,1)
(787,807,1)
(45,565,1)
(876,392,1)
(868,570,1)
(375,764,1)
(513,746,1)
(264,297,1)
(817,412,1)
(560,149,1)
(289,549,1)
(347,790,1)
(545,615,1)
(943,728,1)
(93,95,1)
(619,844,1)
(665,454,1)
(870,758,1)
(588,333,1)
(2,788,1)
(208,270,1)
(791,665,1)
(121,470,1)
(325,49,1)
(426,279,1)
(597,197,1)
(609,266,1)
(521,16,1)
(518,657,1)
(363,453,1)
(8,324,1)
(502,278,1)
(16,853,1)
(263,622,1)
(842,641,1)
(670,794,1)
(790,136,1)
(481,47,1)
(768,663,1)
(910,164,1)
(52,749,1)
(840,780,1)
(139,513,1)
(764,440,1)
(412,662,1)
(105,138,1)
(236,714,1)
(797,386,1)
(149,726,1)
(247,947,1)
(245,61,1)
(618,520,1)
(449,274,1)
(85,218,1)
(726,669,1)
(941,759,1)
(515,120,1)
(252,52,1)
(313,827,1)
(677,836,1)
(99,933,1)
(278,845,1)
(148,574,1)
(594,420,1)
(561,449,1)
(335,191,1)
(570,626,1)
(526,388,1)
(631,118,1)
(830,204,1)
(220,794,1)
(872,554,1)
(717,899,1)
(201,731,1)
(13,789,1)
(784,658,1)
(338,845,1)
(165,588,1)
(16,761,1)
(404,219,1)
(809,110,1)
(227,258,1)
(53,106,1)
(960,878,1)
(222,914,1)
(110,150,1)
(566,528,1)
(756,730,1)
(446,99,1)
(239,583,1)
(857,872,1)
(376,474,1)
(956,537,1)
(539,217,1)
(504,765,1)
(583,700,1)
(203,550,1)
(330,63,1)
(489,557,1)
(765,288,1)
(183,247,1)
(196,269,1)
(108,109,1)
(388,283,1)
(225,882,1)
(811,495,1)
(620,222,1)
(355,594,1)
(0,114,1)
(439,11,1)
(766,78,1)
(858,893,1)
(141,610,1)
(447,439,1)
(606,231,1)
(598,497,1)
(583,145,1)
(517,299,1)
(437,828,1)
(100,140,1)
(755,931,1)
(855,708,1)
(559,863,1)
(544,413,1)
(287,760,1)
(44,510,1)
(710,579,1)
(129,424,1)
(152,129,1)
(314,344,1)
(161,24,1)
(406,203,1)
(401,367,1)
(4,835,1)
(656,19,1)
(538,707,1)
(378,608,1)
(23,579,1)
(628,527,1)
(569,205,1)
(339,171,1)
(181,296,1)
(294,905,1)
(926,362,1)
(301,530,1)
(478,26,1)
(172,943,1)
(612,200,1)
(462,537,1)
(957,853,1)
(871,593,1)
(841,58,1)
(436,898,1)
(417,292,1)
(343,268,1)
(434,553,1)
(375,50,1)
(918,390,1)
(585,843,1)
(876,249,1)
(228,166,1)
(281,558,1)
(722,621,1)
(867,470,1)
(952,508,1)
(600,70,1)
(475,915,1)
(827,781,1)
(925,195,1)
(662,426,1)
(547,954,1)
(536,504,1)
(555,67,1)
(62,456,1)
(535,481,1)
(200,842,1)
(204,951,1)
(625,542,1)
(424,31,1)
(414,448,1)
(940,684,1)
(296,824,1)
(523,48,1)
(740,69,1)
(720,959,1)
(32,414,1)
(147,403,1)
(786,186,1)
(121,849,1)
(366,217,1)
(86,487,1)
(896,64,1)
(304,682,1)
(495,590,1)
(592,923,1)
(452,134,1)
(333,639,1)
(938,476,1)
(741,958,1)
(663,546,1)
(604,178,1)
(157,613,1)
(484,368,1)
(41,942,1)
(678,421,1)
(512,930,1)
(944,688,1)
(450,42,1)
(414,192,1)
(754,514,1)
(15,313,1)
(26,100,1)
(652,800,1)
(319,124,1)
(701,908,1)
(92,175,1)
(670,318,1)
(232,712,1)
(213,767,1)
(748,1,1)
(697,168,1)
(364,474,1)
(415,393,1)
(378,881,1)
(247,63,1)
(648,92,1)
(522,753,1)
(619,406,1)
(353,188,1)
(19,399,1)
(283,415,1)
(644,69,1)
(777,791,1)
(611,727,1)
(733,442,1)
(28,243,1)
(856,465,1)
(326,73,1)
(259,605,1)
(43,922,1)
(622,322,1)
(857,566,1)
(168,559,1)
(906,681,1)
(795,35,1)
(160,822,1)
(78,298,1)
(164,740,1)
(25,342,1)
(11,784,1)
(327,77,1)
(150,3,1)
(513,256,1)
(934,501,1)
(751,768,1)
(497,548,1)
(176,636,1)
(143,149,1)
(882,317,1)
(708,722,1)
(134,194,1)
(640,32,1)
(173,771,1)
(745,624,1)
(951,890,1)
(405,647,1)
(591,325,1)
(607,757,1)
(516,389,1)
(188,65,1)
(540,72,1)
(142,112,1)
(575,634,1)
(393,199,1)
(574,486,1)
(96,179,1)
(762,678,1)
(514,961,1)
(511,391,1)
(821,931,1)
(684,405,1)
(64,158,1)
(660,917,1)
(430,940,1)
(823,293,1)
(565,904,1)
(916,591,1)
(49,751,1)
(583,540,1)
(386,617,1)
(77,763,1)
(31,29,1)
(674,832,1)
(947,80,1)
(73,43,1)
(123,671,1)
(174,446,1)
(913,855,1)
(348,395,1)
(116,62,1)
(460,621,1)
(125,208,1)
(753,673,1)
(586,545,1)
(657,807,1)
(277,896,1)
(816,897,1)
(314,618,1)
(488,600,1)
(321,625,1)
(857,103,1)
(803,906,1)
(146,127,1)
(820,862,1)
(771,595,1)
(478,416,1)
(874,637,1)
(399,482,1)
(476,408,1)
(746,698,1)
(431,361,1)
(305,864,1)
(880,778,1)
(668,22,1)
(504,136,1)
(792,410,1)
(848,643,1)
(418,721,1)
(303,744,1)
(589,261,1)
(237,8,1)
(84,623,1)
(441,538,1)
(873,556,1)
(273,443,1)
(792,469,1)
(690,777,1)
(797,260,1)
(937,549,1)
(871,624,1)
(813,873,1)
(532,370,1)
(699,868,1)
(963,23,1)
(373,269,1)
(20,153,1)
(519,249,1)
(54,880,1)
(716,116,1)
(253,321,1)
(346,248,1)
(320,648,1)
(18,838,1)
(962,804,1)
(213,697,1)
(871,734,1)
(60,801,1)
(10,88,1)
(394,952,1)
(238,144,1)
(357,539,1)
(61,689,1)
(507,741,1)
(869,561,1)
(550,310,1)
(14,473,1)
(779,748,1)
(233,935,1)
(954,349,1)
(927,673,1)
(837,94,1)
(368,512,1)
(902,139,1)
(834,833,1)
(776,263,1)
(373,905,1)
(472,108,1)
(634,225,1)
(735,814,1)
(956,462,1)
(282,856,1)
(85,647,1)
(942,234,1)
(827,678,1)
(230,363,1)
(772,257,1)
(285,733,1)
(365,774,1)
(554,566,1)
(965,26,1)
(583,798,1)
(248,732,1)
(888,240,1)
(539,56,1)
(102,160,1)
(831,848,1)
(711,738,1)
(598,960,1)
(271,668,1)
(915,568,1)
(669,733,1)
(455,826,1)
(653,775,1)
(650,935,1)
(202,490,1)
(408,451,1)
(810,122,1)
(379,326,1)
(387,246,1)
(649,887,1)
(312,416,1)
(835,909,1)
(895,670,1)
(350,17,1)
(458,927,1)
(250,332,1)
(508,787,1)
(509,51,1)
(184,932,1)
(25,185,1)
(382,402,1)
(468,719,1)
(568,359,1)
(251,847,1)
(88,865,1)
(416,131,1)
(619,425,1)
(587,727,1)
(414,252,1)
(552,823,1)
(340,523,1)
(615,265,1)
(933,148,1)
(163,457,1)
(429,675,1)
(923,380,1)
(679,611,1)
(23,645,1)
(214,277,1)
(687,866,1)
(644,828,1)
(56,889,1)
(372,618,1)
(807,901,1)
(766,298,1)
(673,142,1)
(451,422,1)
(213,168,1)
(928,213,1)
(82,71,1)
(626,212,1)
(703,955,1)
(209,635,1)
(191,398,1)
(824,667,1)
(903,309,1)
(730,825,1)
(159,797,1)
(400,435,1)
(216,786,1)
(112,809,1)
(919,226,1)
(616,592,1)
(496,543,1)
(883,861,1)
(133,754,1)
(539,491,1)
(850,854,1)
(737,418,1)
(567,233,1)
(50,575,1)
(23,427,1)
(897,183,1)
(707,589,1)
(798,941,1)
(80,720,1)
(815,778,1)
(41,496,1)
(6,48,1)
(632,383,1)
(683,492,1)
(219,276,1)
(758,368,1)
(379,966,1)
(490,59,1)
(800,718,1)
(655,840,1)
(691,158,1)
(261,281,1)
(249,374,1)
(755,576,1)
(465,163,1)
(681,831,1)
(744,946,1)
(246,700,1)
(119,826,1)
(371,376,1)
(592,223,1)
(732,830,1)
(466,886,1)
(197,345,1)
(719,373,1)
(792,586,1)
(827,129,1)
(324,448,1)
(121,205,1)
(680,394,1)
(610,242,1)
(557,913,1)
(190,516,1)
(912,452,1)
(278,439,1)
(832,211,1)
(785,341,1)
(658,338,1)
(793,66,1)
(901,874,1)
(182,599,1)
(769,355,1)
(385,526,1)
(41,735,1)
(379,169,1)
(617,739,1)
(207,343,1)
(83,879,1)
(440,41,1)
(513,834,1)
(561,796,1)
(565,251,1)
(887,137,1)
(322,287,1)
(413,904,1)
(97,319,1)
(675,614,1)
(551,382,1)
(875,57,1)
(749,165,1)
(674,187,1)
(180,869,1)
(885,45,1)
(685,860,1)
(166,659,1)
(396,39,1)
(464,282,1)
(341,517,1)
(309,84,1)
(537,235,1)
(565,757,1)
(579,113,1)
(727,190,1)
(682,489,1)
(614,488,1)
(91,409,1)
(704,306,1)
(179,372,1)
(967,301,1)
(721,677,1)
(601,273,1)
(890,384,1)
(563,950,1)
(888,15,1)
(448,936,1)
(688,350,1)
(642,181,1)
(646,960,1)
(247,720,1)
(106,458,1)
(937,163,1)
(391,450,1)
(736,351,1)
(414,323,1)
(696,925,1)
(279,25,1)
(392,606,1)
(421,702,1)
(460,304,1)
(506,357,1)
(101,693,1)
(739,102,1)
(206,181,1)
(878,286,1)
(932,696,1)
(654,423,1)
(299,837,1)
(760,660,1)
(58,314,1)
(293,891,1)
(801,220,1)
(223,20,1)
(425,300,1)
(723,499,1)
(810,574,1)
(314,584,1)
(478,479,1)
(407,307,1)
(378,116,1)
(81,417,1)
(866,130,1)
(861,602,1)
(128,502,1)
(176,596,1)
(155,392,1)
(16,39,1)
(558,132,1)
(894,544,1)
(266,521,1)
(29,762,1)
(222,352,1)
(212,609,1)
(318,507,1)
(712,705,1)
(541,161,1)
(706,7,1)
(487,782,1)
(556,835,1)
(621,82,1)
(270,6,1)
(113,680,1)
(880,532,1)
(70,679,1)
(260,386,1)
(819,900,1)
(337,155,1)
(774,215,1)
(636,939,1)
(6,12,1)
(98,193,1)
(758,509,1)
(373,452,1)
(24,476,1)
(875,135,1)
(64,261,1)
(955,89,1)
(5,215,1)
(323,192,1)
(747,344,1)
(329,135,1)
(120,773,1)
(146,55,1)
(310,33,1)
(358,272,1)
(67,819,1)
(119,841,1)
(206,480,1)
(641,683,1)
(288,851,1)
(27,666,1)
(158,441,1)
(143,594,1)
(561,189,1)
(843,236,1)
(199,770,1)
(829,21,1)
(825,180,1)
(24,725,1)
(9,336,1)
(556,668,1)
(6,340,1)
(351,547,1)
(486,81,1)
(206,824,1)
(336,732,1)
(647,756,1)
(185,687,1)
(189,449,1)
(525,12,1)
(956,661,1)
(693,280,1)
(936,252,1)
(695,432,1)
(860,210,1)
(698,172,1)
(689,810,1)
(146,541,1)
(822,305,1)
(332,400,1)
(109,926,1)
(397,921,1)
(435,159,1)
(117,965,1)
(373,912,1)
(799,170,1)
(132,674,1)
(235,664,1)
(504,851,1)
(671,628,1)
(650,703,1)
(794,291,1)
(118,652,1)
(215,699,1)
(300,406,1)
(833,746,1)
(267,645,1)
(737,721,1)
(178,315,1)
(608,551,1)
(782,903,1)
(666,284,1)
(494,60,1)
(546,937,1)
(72,798,1)
(65,444,1)
(907,75,1)
(205,239,1)
(875,924,1)
(291,121,1)
(234,735,1)
(428,496,1)
(472,88,1)
(755,363,1)
(571,385,1)
(802,761,1)
(743,655,1)
(286,250,1)
(787,253,1)
(810,933,1)
(568,612,1)
(364,371,1)
(939,596,1)
(85,684,1)
(880,184,1)
(672,478,1)
(74,379,1)
(167,177,1)
(755,821,1)
(539,366,1)
(633,691,1)
(454,76,1)
(16,500,1)
(360,290,1)
(578,498,1)
(814,320,1)
(12,717,1)
(584,747,1)
(859,846,1)
(47,228,1)
(505,185,1)
(510,844,1)
(143,769,1)
(38,404,1)
(104,176,1)
(472,10,1)
(761,348,1)
(409,285,1)
(46,326,1)
(966,672,1)
(297,966,1)
(661,850,1)
(467,541,1)
(780,642,1)
(700,328,1)
(306,713,1)
(637,806,1)
(177,240,1)
(715,154,1)
(556,369,1)
(819,848,1)
(854,431,1)
(598,548,1)
(905,335,1)
(624,649,1)
(879,340,1)
(111,477,1)
(924,329,1)
(292,963,1)
(886,676,1)
(410,586,1)
(135,724,1)
(959,772,1)
(781,152,1)
(193,38,1)
(888,676,1)
(315,506,1)
(630,914,1)
(670,741,1)
(224,346,1)
(676,651,1)
(103,173,1)
(79,876,1)
(5,212,1)
(851,638,1)
(75,254,1)
(272,715,1)
(639,777,1)
(231,401,1)
(766,487,1)
(473,483,1)
(724,316,1)
(864,817,1)
(921,644,1)
(30,229,1)
(493,371,1)
(645,710,1)
(419,841,1)
(370,101,1)
(420,111,1)
(380,223,1)
(255,766,1)
(937,289,1)
(138,484,1)
(229,105,1)
(334,881,1)
(593,552,1)
(470,569,1)
(146,763,1)
(812,438,1)
(364,808,1)
(857,771,1)
(222,349,1)
(949,308,1)
(504,347,1)
(763,467,1)
(144,692,1)
(503,646,1)
(477,934,1)
(63,209,1)
(345,56,1)
(423,752,1)
(278,893,1)
(797,822,1)
(186,55,1)
(21,125,1)
(805,587,1)
(728,275,1)
(644,164,1)
(527,704,1)
(145,79,1)
(444,812,1)
(587,675,1)
(27,306,1)
(213,1,1)
(853,396,1)
(524,119,1)
(572,783,1)
(562,597,1)
(845,858,1)
(459,38,1)
(298,820,1)
(402,750,1)
(565,701,1)
(469,603,1)
(198,755,1)
(783,803,1)
(176,631,1)
(946,224,1)
(592,106,1)
(258,241,1)
(499,378,1)
(356,126,1)
(767,852,1)
(491,515,1)
(121,107,1)
(922,892,1)
(256,93,1)
(169,46,1)
(961,206,1)
(543,871,1)
(218,182,1)
(669,151,1)
(349,953,1)
(500,802,1)
(265,533,1)
(36,259,1)
(217,562,1)
(3,813,1)
(34,598,1)
(927,522,1)
(884,764,1)
(243,578,1)
(759,387,1)
(498,267,1)
(758,30,1)
(480,729,1)
(66,938,1)
(731,466,1)
(23,28,1)
(590,737,1)
(307,619,1)
(520,888,1)
(930,620,1)
(367,90,1)
(316,585,1)
(548,859,1)
(847,894,1)
(122,711,1)
(876,90,1)
(127,216,1)
(950,485,1)
(865,354,1)
(530,910,1)
(787,518,1)
(314,179,1)
(528,143,1)
(254,232,1)
(433,902,1)
(375,634,1)
(472,356,1)
(935,907,1)
(881,716,1)
(352,630,1)
(929,430,1)
(576,949,1)
(892,264,1)
(818,115,1)
(17,472,1)
(51,30,1)
(222,162,1)
(838,445,1)
(734,745,1)
(596,686,1)
(595,795,1)
(411,356,1)
(119,65,1)
(359,612,1)
(317,742,1)
(587,679,1)
(64,633,1)
(262,434,1)
(57,104,1)
(482,493,1)
(627,460,1)
(549,464,1)
(89,567,1)
(643,900,1)
(211,654,1)
(605,640,1)
(899,83,1)
(573,793,1)
(153,227,1)
(354,221,1)
(377,832,1)
(192,156,1)
(639,690,1)
(206,743,1)
(900,604,1)
(1,709,1)
(826,419,1)
(39,895,1)
(582,816,1)
(889,491,1)
(383,27,1)
(619,44,1)
(242,468,1)
(603,157,1)
(130,397,1)
(908,251,1)
(718,636,1)
(846,503,1)
(714,57,1)
(667,875,1)
(580,518,1)
(331,96,1)
(964,436,1)
(713,571,1)
(533,469,1)
(871,463,1)
(810,711,1)
(361,928,1)
(25,94,1)
(956,715,1)
(686,5,1)
(459,432,1)
(140,37,1)
(85,182,1)
(5,365,1)
(170,137,1)
(876,337,1)
(752,133,1)
(945,703,1)
(581,582,1)
(35,877,1)
(613,944,1)
(806,68,1)
(432,214,1)
(381,532,1)
(115,13,1)
(844,74,1)
(374,375,1)
(827,702,1)
(670,801,1)
(257,330,1)
(276,695,1)
(650,75,1)
(126,108,1)
(194,529,1)
(927,813,1)
(534,146,1)
(669,861,1)
(561,531,1)
(221,411,1)
(917,632,1)
(796,87,1)
(471,494,1)
(69,829,1)
(474,262,1)
(629,123,1)
(898,198,1)
(808,656,1)
(460,708,1)
(542,295,1)
(623,956,1)
(25,785,1)
(568,171,1)
(460,682,1)
(757,302,1)
(819,572,1)
(328,145,1)
(55,535,1)
(247,635,1)
(887,582,1)
(175,428,1)
(422,244,1)
(770,685,1)
(492,339,1)
(639,325,1)
(275,85,1)
(664,358,1)
(283,511,1)
(344,653,1)
(674,133,1)
(674,514,1)
(283,199,1)
(598,286,1)
(788,555,1)
(463,40,1)
(131,479,1)
(364,656,1)
(737,287,1)
(27,527,1)
(725,97,1)
(742,920,1)
(602,91,1)
(958,471,1)
(24,66,1)
(787,321,1)
(5,266,1)
(587,429,1)
(893,918,1)
(240,201,1)
(274,14,1)
(395,948,1)
(635,694,1)
(737,622,1)
(48,141,1)
(738,174,1)
(119,353,1)
(443,230,1)
(766,485,1)
(553,962,1)
(302,459,1)
(295,580,1)
(669,885,1)
(7,415,1)
(442,885,1)
(336,204,1)
(146,481,1)
(445,347,1)
(280,255,1)
(839,849,1)
(927,150,1)
(564,207,1)
(457,564,1)
(22,857,1)
(283,391,1)
(40,593,1)
(94,505,1)
(311,54,1)
(914,736,1)
(151,883,1)
(427,28,1)
(478,117,1)
(877,872,1)
(880,932,1)
(59,581,1)
(27,284,1)
(692,867,1)
(556,789,1)
(773,407,1)
(124,573,1)
(531,36,1)
(705,805,1)
(187,377,1)
(849,238,1)
(887,897,1)
(107,839,1)
(911,2,1)
(95,147,1)
(792,157,1)
(379,264,1)
(644,437,1)
(758,368,2)
(378,881,2)
(758,30,2)
(206,824,2)
(71,245,2)
(539,491,2)
(120,773,2)
(650,935,2)
(375,764,2)
(539,56,2)
(792,586,2)
(513,93,2)
(459,38,2)
(875,57,2)
(871,593,2)
(592,106,2)
(478,416,2)
(639,777,2)
(5,215,2)
(472,88,2)
(592,241,2)
(478,26,2)
(592,223,2)
(16,39,2)
(504,347,2)
(680,394,2)
(880,932,2)
(336,732,2)
(956,661,2)
(730,825,2)
(561,531,2)
(674,133,2)
(343,268,2)
(827,702,2)
(41,735,2)
(797,822,2)
(827,678,2)
(23,579,2)
(598,548,2)
(766,487,2)
(927,813,2)
(478,479,2)
(460,682,2)
(213,168,2)
(21,125,2)
(379,966,2)
(178,315,2)
(85,647,2)
(810,574,2)
(598,960,2)
(85,182,2)
(64,158,2)
(556,835,2)
(390,433,2)
(64,261,2)
(41,496,2)
(565,251,2)
(787,321,2)
(414,448,2)
(414,252,2)
(674,832,2)
(379,326,2)
(598,286,2)
(472,356,2)
(364,371,2)
(644,69,2)
(172,943,2)
(373,452,2)
(583,798,2)
(412,662,2)
(27,284,2)
(460,621,2)
(283,391,2)
(146,55,2)
(565,757,2)
(561,796,2)
(571,385,2)
(874,637,2)
(755,931,2)
(101,693,2)
(810,933,2)
(937,549,2)
(937,163,2)
(875,135,2)
(669,733,2)
(232,712,2)
(375,920,2)
(871,624,2)
(737,287,2)
(121,470,2)
(619,406,2)
(685,860,2)
(278,893,2)
(887,897,2)
(758,930,2)
(222,349,2)
(674,514,2)
(956,537,2)
(583,700,2)
(755,576,2)
(314,344,2)
(749,165,2)
(669,885,2)
(143,501,2)
(880,532,2)
(583,145,2)
(857,566,2)
(866,130,2)
(737,622,2)
(539,217,2)
(25,185,2)
(375,634,2)
(378,551,2)
(6,48,2)
(875,236,2)
(888,15,2)
(516,389,2)
(23,645,2)
(797,864,2)
(25,94,2)
(819,848,2)
(2,788,2)
(660,917,2)
(755,363,2)
(119,65,2)
(16,853,2)
(24,66,2)
(364,656,2)
(332,400,2)
(556,789,2)
(810,711,2)
(887,582,2)
(669,861,2)
(213,767,2)
(16,761,2)
(206,181,2)
(504,136,2)
(565,904,2)
(308,919,2)
(888,240,2)
(176,636,2)
(644,164,2)
(278,439,2)
(336,204,2)
(314,179,2)
(41,175,2)
(876,90,2)
(314,618,2)
(903,309,2)
(854,431,2)
(283,415,2)
(119,826,2)
(6,340,2)
(766,298,2)
(568,612,2)
(880,778,2)
(787,518,2)
(378,116,2)
(460,708,2)
(222,914,2)
(751,768,2)
(143,594,2)
(561,449,2)
(876,249,2)
(787,807,2)
(926,362,2)
(513,834,2)
(871,734,2)
(206,743,2)
(364,474,2)
(737,721,2)
(644,828,2)
(857,872,2)
(459,277,2)
(23,28,2)
(587,727,2)
(568,492,2)
(373,269,2)
(619,844,2)
(472,108,2)
(792,469,2)
(670,794,2)
(797,386,2)
(792,157,2)
(5,266,2)
(379,264,2)
(81,417,2)
(6,12,2)
(121,205,2)
(459,432,2)
(888,676,2)
(964,436,2)
(283,199,2)
(176,631,2)
(481,47,2)
(944,688,2)
(639,916,2)
(191,398,2)
(247,635,2)
(85,684,2)
(434,553,2)
(766,485,2)
(619,44,2)
(25,785,2)
(414,192,2)
(27,527,2)
(176,596,2)
(278,845,2)
(639,325,2)
(27,306,2)
(5,212,2)
(670,801,2)
(876,392,2)
(937,564,2)
(587,675,2)
(373,905,2)
(247,63,2)
(956,715,2)
(556,668,2)
(222,162,2)
(146,763,2)
(143,149,2)
(587,679,2)
(146,541,2)
(927,673,2)
(64,558,2)
(513,746,2)
(213,1,2)
(819,900,2)
(827,129,2)
(650,75,2)
(146,481,2)
(927,150,2)
(121,849,2)
(857,771,2)
(819,783,2)
(650,703,2)
(247,720,2)
(670,741,2)
(610,242,2)
(24,476,2)
(119,841,2)
(456,811,2)
(568,171,2)
(259,605,2)
(887,137,2)
(504,851,2)
-----------------------------------
(0,M_WAITOK)
(1,SYSCTL_CHILDREN(rack_sysctl_root)
(2,rack_rtm_prr_retran = counter_u64_alloc(M_WAITOK)
(3,rack_sysctl_root)
(4,4)
(5,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(6,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(7,OID_AUTO)
(8,"findhigh")
(9,rack_opts_arry)
(10,"Total bytes of tail loss probe sending retransmitted data")
(11,rack_tlp_retran)
(12,&rack_sack_proc_restart)
(13,OID_AUTO)
(14,CTLFLAG_RD)
(15,&rack_sysctl_ctx)
(16,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(17,rack_tlp_retran_fail)
(18,CTLFLAG_RW)
(19,rack_to_tot)
(20,rack_hptsi_segments)
(21,rack_sack_proc_short = counter_u64_alloc(M_WAITOK)
(22,rack_sysctl_ctx)
(23,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(24,SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root)
(25,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(26,&rack_pkt_delay)
(27,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(28,&rack_to_arm_tlp)
(29,"earlyrecovery")
(30,&rack_min_to)
(31,CTLFLAG_RW)
(32,rack_reorder_seen)
(33,OID_AUTO)
(34,rack_runt_sacks)
(35,"tlp_cwnd_flag")
(36,rack_sysctl_ctx)
(37,"pktdelay")
(38,&rack_rto_max)
(39,&rack_sysctl_ctx)
(40,TLP_USE_TWO_ONE)
(41,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(42,CTLFLAG_RD)
(43,CTLFLAG_RW)
(44,SYSCTL_CHILDREN(rack_sysctl_root)
(45,rack_sysctl_ctx)
(46,0)
(47,CTLFLAG_RW | CTLFLAG_MPSAFE)
(48,&rack_sysctl_ctx)
(49,rack_sysctl_ctx)
(50,"How many segments have to be in the len to enforce min-pace-time")
(51,1)
(52,rack_sysctl_ctx)
(53,rack_sysctl_root)
(54,rack_alloc_limited_conns)
(55,&rack_clear_counter)
(56,SYSCTL_CHILDREN(rack_sysctl_root)
(57,&rack_sysctl_ctx)
(58,rack_sysctl_ctx)
(59,"data_after_close")
(60,OID_AUTO)
(61,M_WAITOK)
(62,rack_sysctl_ctx)
(63,SYSCTL_CHILDREN(rack_sysctl_root)
(64,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(65,&rack_reorder_fade)
(66,SYSCTL_CHILDREN(rack_sysctl_root)
(67,rack_rtm_prr_retran)
(68,rack_to_arm_rack)
(69,&rack_sysctl_ctx)
(70,OID_AUTO)
(71,rack_unpaced_segments = counter_u64_alloc(M_WAITOK)
(72,0)
(73,rack_map_split_limit)
(74,rack_sysctl_ctx)
(75,&rack_sysctl_ctx)
(76,OID_AUTO)
(77,OID_AUTO)
(78,"Total allocations done with sleeping the hard way")
(79,rack_sysctl_ctx)
(80,USE_RTT_LOW)
(81,rack_paced_segments = counter_u64_alloc(M_WAITOK)
(82,rack_sysctl_ctx)
(83,"sack_restart")
(84,M_WAITOK)
(85,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(86,rack_sysctl_root)
(87,rack_sysctl_root)
(88,&rack_tlp_retran_bytes)
(89,CTLFLAG_RD)
(90,SYSCTL_CHILDREN(rack_sysctl_root)
(91,CTLFLAG_RW)
(92,OID_AUTO)
(93,&rack_tlp_newdata)
(94,SYSCTL_CHILDREN(rack_sysctl_root)
(95,rack_tlp_newdata)
(96,OID_AUTO)
(97,RACK_OPTS_SIZE)
(98,"Maxiumum RTO in ms -- should be at least as large as min_rto")
(99,OID_AUTO)
(100,rack_pkt_delay)
(101,rack_to_alloc_emerg = counter_u64_alloc(M_WAITOK)
(102,"hit_tlp_method")
(103,"When a TLP completes a retran should we enter recovery?")
(104,rack_sysctl_ctx)
(105,CTLFLAG_RW)
(106,&rack_sysctl_ctx)
(107,"Do we use sack filtering?")
(108,&rack_sysctl_ctx)
(109,rack_sysctl_ctx)
(110,OID_AUTO)
(111,CTLFLAG_RW)
(112,CTLFLAG_RW)
(113,rack_sysctl_ctx)
(114,rack_sack_proc_all)
(115,"hptsi_reduces")
(116,&rack_sysctl_ctx)
(117,"Extra RACK time (in ms)
(118,rack_sack_block_limit)
(119,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(120,rack_badfr = counter_u64_alloc(M_WAITOK)
(121,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(122,"Total number of times a segment send caused hptsi")
(123,CTLFLAG_RD)
(124,CTLFLAG_RD)
(125,counter_u64_alloc(M_WAITOK)
(126,rack_sysctl_root)
(127,"Clear counters")
(128,M_WAITOK)
(129,&rack_early_recovery)
(130,counter_u64_alloc(M_WAITOK)
(131,rack_sysctl_root)
(132,rack_sysctl_ctx)
(133,SYSCTL_CHILDREN(rack_sysctl_root)
(134,rack_sack_proc_all)
(135,&rack_always_send_oldest)
(136,&rack_sysctl_ctx)
(137,&rack_ignore_data_after_close)
(138,"minto")
(139,rack_tlp_retran)
(140,CTLFLAG_RW)
(141,rack_sysctl_ctx)
(142,rack_pace_every_seg)
(143,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(144,CTLFLAG_RW)
(145,&rack_sysctl_ctx)
(146,SYSCTL_ADD_PROC(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(147,CTLFLAG_RD)
(148,rack_sysctl_root)
(149,&rack_sysctl_ctx)
(150,SYSCTL_CHILDREN(rack_sysctl_root)
(151,"Should we proportionaly reduce cwnd based on the number of losses ")
(152,1)
(153,CTLFLAG_RW)
(154,rack_sysctl_root)
(155,0)
(156,rack_find_high)
(157,&rack_sysctl_ctx)
(158,&rack_rto_min)
(159,rack_used_tlpmethod2)
(160,OID_AUTO)
(161,rack_sysctl_ctx)
(162,&rack_sysctl_ctx)
(163,SYSCTL_CHILDREN(rack_sysctl_root)
(164,SYSCTL_CHILDREN(rack_sysctl_root)
(165,counter_u64_alloc(M_WAITOK)
(166,CTLFLAG_RW)
(167,"What factor for rack will be added when seeing reordering (shift right)
(168,&rack_saw_enetunreach)
(169,"Is there a limit on the number of map split entries (0=unlimited)
(170,0)
(171,&rack_sysctl_ctx)
(172,rack_tlp_newdata = counter_u64_alloc(M_WAITOK)
(173,0)
(174,CTLFLAG_RD)
(175,SYSCTL_CHILDREN(rack_sysctl_root)
(176,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(177,2)
(178,rack_badfr_bytes = counter_u64_alloc(M_WAITOK)
(179,SYSCTL_CHILDREN(rack_sysctl_root)
(180,M_WAITOK)
(181,SYSCTL_CHILDREN(rack_sysctl_root)
(182,&rack_tlp_tot)
(183,rack_sysctl_ctx)
(184,"Total allocations done from emergency cache")
(185,&rack_sysctl_ctx)
(186,0)
(187,"How many times can a rack timeout drive out sends")
(188,0)
(189,"Total number of times we added delay due to reordering")
(190,rack_sysctl_ctx)
(191,rack_sack_proc_all = counter_u64_alloc(M_WAITOK)
(192,&rack_find_high)
(193,0)
(194,CTLFLAG_RD)
(195,"allocemerg")
(196,OID_AUTO)
(197,"badfr")
(198,rack_saw_enetunreach)
(199,&rack_sysctl_ctx)
(200,rack_rtm_prr_retran)
(201,rack_reorder_thresh)
(202,rack_ignore_data_after_close)
(203,rack_inc_var)
(204,&rack_sysctl_ctx)
(205,&rack_sysctl_ctx)
(206,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(207,rack_sysctl_ctx)
(208,M_WAITOK)
(209,rack_sysctl_root)
(210,M_WAITOK)
(211,rack_limited_retran)
(212,SYSCTL_CHILDREN(rack_sysctl_root)
(213,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(214,rack_sysctl_root)
(215,&rack_precache)
(216,"IU")
(217,&rack_badfr)
(218,"Total number of tail loss probe expirations")
(219,CTLFLAG_RW)
(220,rack_sysctl_root)
(221,"tlp_retran_bytes")
(222,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(223,&rack_hptsi_segments)
(224,CTLFLAG_RD)
(225,rack_min_pace_time_seg_req)
(226,M_WAITOK)
(227,"hptsi_seg_max")
(228,CTLFLAG_MPSAFE)
(229,rack_min_to)
(230,OID_AUTO)
(231,CTLFLAG_RW)
(232,rack_split_limited = counter_u64_alloc(M_WAITOK)
(233,OID_AUTO)
(234,0)
(235,rack_to_alloc)
(236,SYSCTL_CHILDREN(rack_sysctl_root)
(237,CTLFLAG_RD)
(238,rack_use_sack_filter)
(239,rack_sysctl_ctx)
(240,&rack_reorder_thresh)
(241,SYSCTL_CHILDREN(rack_sysctl_root)
(242,counter_u64_alloc(M_WAITOK)
(243,rack_to_arm_tlp)
(244,RACK_OPTS_SIZE)
(245,counter_u64_alloc(M_WAITOK)
(246,OID_AUTO)
(247,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(248,OID_AUTO)
(249,&rack_sysctl_ctx)
(250,rack_sysctl_ctx)
(251,&rack_tlp_max_resend)
(252,&rack_sysctl_ctx)
(253,"Total number of times the rack timer armed?")
(254,rack_sysctl_ctx)
(255,rack_to_alloc_emerg)
(256,"Total number of tail loss probe sending new data")
(257,"rate_sample_method")
(258,OID_AUTO)
(259,rack_reorder_seen = counter_u64_alloc(M_WAITOK)
(260,"Total number of runt sacks")
(261,SYSCTL_CHILDREN(rack_sysctl_root)
(262,rack_sysctl_ctx)
(263,OID_AUTO)
(264,SYSCTL_CHILDREN(rack_sysctl_root)
(265,"tlp_retran_fail")
(266,&rack_sysctl_ctx)
(267,OID_AUTO)
(268,counter_u64_alloc(M_WAITOK)
(269,SYSCTL_CHILDREN(rack_sysctl_root)
(270,rack_sack_proc_short)
(271,rack_sysctl_root)
(272,OID_AUTO)
(273,CTLFLAG_RD)
(274,rack_reorder_seen)
(275,rack_tlp_newdata)
(276,"maxrto")
(277,&rack_sysctl_ctx)
(278,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(279,rack_used_tlpmethod)
(280,M_WAITOK)
(281,rack_sysctl_root)
(282,CTLFLAG_RD)
(283,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(284,&rack_progress_drops)
(285,OID_AUTO)
(286,&rack_sysctl_ctx)
(287,&rack_sysctl_ctx)
(288,6)
(289,"Total number of prr based new transmits")
(290,128)
(291,rack_sysctl_ctx)
(292,M_WAITOK)
(293,"tlpmethod")
(294,rack_sysctl_root)
(295,"arm_rack")
(296,rack_sysctl_root)
(297,rack_sysctl_root)
(298,&rack_to_alloc_hard)
(299,"tlp_calc_entered")
(300,0)
(301,CTLFLAG_RD)
(302,rack_sysctl_ctx)
(303,"MSS send sizes")
(304,"Total number of times a segment did not cause hptsi")
(305,rack_sysctl_root)
(306,&rack_sysctl_ctx)
(307,rack_badfr)
(308,rack_saw_enobuf = counter_u64_alloc(M_WAITOK)
(309,counter_u64_alloc(M_WAITOK)
(310,"inc_var")
(311,M_WAITOK)
(312,OID_AUTO)
(313,rack_sysctl_ctx)
(314,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(315,counter_u64_alloc(M_WAITOK)
(316,CTLFLAG_RW)
(317,"min_pace_segs")
(318,"Delayed ack time (200ms)
(319,rack_opts_arry)
(320,CTLFLAG_RW)
(321,&rack_to_arm_rack)
(322,rack_sysctl_root)
(323,"Total number of FIN causing find-high")
(324,OID_AUTO)
(325,&rack_sysctl_ctx)
(326,&rack_map_split_limit)
(327,"clear")
(328,rack_sysctl_root)
(329,1)
(330,OID_AUTO)
(331,"rtt_tlp_thresh")
(332,rack_used_tlpmethod2 = counter_u64_alloc(M_WAITOK)
(333,rack_find_high)
(334,OID_AUTO)
(335,rack_sysctl_ctx)
(336,SYSCTL_ADD_COUNTER_U64_ARRAY(&rack_sysctl_ctx, SYSCTL_CHILDREN(rack_sysctl_root)
(337,"Should we reduce the largest cwnd seen to IW on idle reduction")
(338,OID_AUTO)
(339,rack_sysctl_root)
(340,SYSCTL_CHILDREN(rack_sysctl_root)
(341,rack_enter_tlp_calc)
(342,"Total times we called calc-tlp")
(343,rack_rtm_prr_newdata = counter_u64_alloc(M_WAITOK)
(344,&rack_tlp_thresh)
(345,OID_AUTO)
(346,"outsize")
(347,SYSCTL_CHILDREN(rack_sysctl_root)
(348,rack_tlp_min)
(349,SYSCTL_CHILDREN(rack_sysctl_root)
(350,M_WAITOK)
(351,CTLFLAG_RW)
(352,"Send a lot in prr")
(353,"Does reorder detection fade, if so how many ms (0 means never)
(354,CTLFLAG_RD)
(355,10)
(356,SYSCTL_CHILDREN(rack_sysctl_root)
(357,rack_badfr_bytes)
(358,"allocs")
(359,"Total number of prr based retransmits")
(360,"When do we start paying attention to small sack blocks")
(361,M_WAITOK)
(362,counter_u64_alloc(M_WAITOK)
(363,SYSCTL_CHILDREN(rack_sysctl_root)
(364,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(365,"Where should we precache the mcopy (0 is not at all)
(366,"Total number of bad FRs")
(367,OID_AUTO)
(368,SYSCTL_CHILDREN(rack_sysctl_root)
(369,"When setting a slot should we reduce by divisor")
(370,rack_sysctl_ctx)
(371,SYSCTL_CHILDREN(rack_sysctl_root)
(372,rack_sysctl_root)
(373,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(374,rack_sysctl_ctx)
(375,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(376,rack_sysctl_root)
(377,0)
(378,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(379,SYSCTL_ADD_U32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(380,6)
(381,rack_sysctl_root)
(382,rack_tlp_does_nada)
(383,rack_input_idle_reduces)
(384,M_WAITOK)
(385,counter_u64_alloc(M_WAITOK)
(386,&rack_used_tlpmethod)
(387,"bb_verbose")
(388,rack_progress_drops)
(389,counter_u64_alloc(M_WAITOK)
(390,rack_tlp_retran = counter_u64_alloc(M_WAITOK)
(391,&rack_runt_sacks)
(392,&rack_reduce_largest_on_idle)
(393,rack_sysctl_root)
(394,counter_u64_alloc(M_WAITOK)
(395,CTLFLAG_RW)
(396,rack_sysctl_root)
(397,M_WAITOK)
(398,counter_u64_alloc(M_WAITOK)
(399,CTLFLAG_RD)
(400,counter_u64_alloc(M_WAITOK)
(401,"idle_reduce_high")
(402,CTLFLAG_RD)
(403,"tlp_new")
(404,rack_rto_max)
(405,rack_sysctl_root)
(406,&rack_inc_var)
(407,M_WAITOK)
(408,rack_sysctl_ctx)
(409,"recovery_loss_prop")
(410,"Total number of tail loss probe sending retransmitted data that failed (wait for t3)
(411,OID_AUTO)
(412,rack_used_tlpmethod = counter_u64_alloc(M_WAITOK)
(413,OID_AUTO)
(414,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(415,SYSCTL_CHILDREN(rack_sysctl_root)
(416,SYSCTL_CHILDREN(rack_sysctl_root)
(417,counter_u64_alloc(M_WAITOK)
(418,"Total number of idle reductions on input")
(419,rack_sysctl_root)
(420,rack_proportional_rate)
(421,rack_sysctl_root)
(422,M_WAITOK)
(423,"rack_tlimit")
(424,rack_early_recovery)
(425,"Should rack add to the TLP timer the variance in rtt calculation")
(426,M_WAITOK)
(427,"Total number of times the tlp timer armed?")
(428,rack_sysctl_root)
(429,"Connections with allocations dropped due to limit")
(430,"tlp_to_total")
(431,counter_u64_alloc(M_WAITOK)
(432,SYSCTL_CHILDREN(rack_sysctl_root)
(433,counter_u64_alloc(M_WAITOK)
(434,rack_to_tot = counter_u64_alloc(M_WAITOK)
(435,M_WAITOK)
(436,counter_u64_alloc(M_WAITOK)
(437,"Total times we took shortcut for sack processing")
(438,"reorder_fade")
(439,&rack_tlp_retran)
(440,rack_sysctl_ctx)
(441,rack_rto_min)
(442,rack_sysctl_root)
(443,"saw_enobufs")
(444,rack_reorder_fade)
(445,OID_AUTO)
(446,"paced")
(447,"Total number of tail loss probe sending retransmitted data")
(448,SYSCTL_CHILDREN(rack_sysctl_root)
(449,&rack_reorder_seen)
(450,rack_runt_sacks)
(451,COUNTER_ARRAY_ALLOC(rack_opts_arry, RACK_OPTS_SIZE, M_WAITOK)
(452,&rack_sack_proc_all)
(453,rack_sysctl_root)
(454,"tsnf")
(455,OID_AUTO)
(456,rack_tlp_does_nada = counter_u64_alloc(M_WAITOK)
(457,rack_sysctl_root)
(458,rack_sysctl_ctx)
(459,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(460,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(461,)
(462,"Total allocations of tracking structures")
(463,"What method do we do for TLP time calc 0=no-de-ack-comp, 1=ID, 2=2.1, 3=2.2")
(464,rack_rtm_prr_newdata)
(465,OID_AUTO)
(466,"reorder_thresh")
(467,rack_sysctl_root)
(468,M_WAITOK)
(469,SYSCTL_CHILDREN(rack_sysctl_root)
(470,SYSCTL_CHILDREN(rack_sysctl_root)
(471,CTLFLAG_RW)
(472,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(473,"reordering")
(474,&rack_sysctl_ctx)
(475,M_WAITOK)
(476,&rack_sysctl_ctx)
(477,"recovery_prop")
(478,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(479,&rack_sysctl_ctx)
(480,"Can we do a TLP during recovery?")
(481,CTLTYPE_UINT | CTLFLAG_RW | CTLFLAG_MPSAFE)
(482,"rack_to_tot")
(483,OID_AUTO)
(484,OID_AUTO)
(485,SYSCTL_CHILDREN(rack_sysctl_root)
(486,rack_sysctl_ctx)
(487,&rack_sysctl_ctx)
(488,CTLFLAG_RD)
(489,rack_unpaced_segments)
(490,CTLFLAG_RW)
(491,&rack_sysctl_ctx)
(492,SYSCTL_CHILDREN(rack_sysctl_root)
(493,OID_AUTO)
(494,"delayed_ack")
(495,M_WAITOK)
(496,&rack_sysctl_ctx)
(497,"Total number of runt sacks 2")
(498,"arm_tlp")
(499,rack_out_size)
(500,"TLP minimum timeout per the specification (10ms)
(501,SYSCTL_CHILDREN(rack_sysctl_root)
(502,rack_tlp_retran_bytes)
(503,"hit_tlp_method2")
(504,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(505,rack_sysctl_root)
(506,M_WAITOK)
(507,200)
(508,rack_to_arm_tlp)
(509,"Minimum rack timeout in milliseconds")
(510,rack_sysctl_root)
(511,"Total number of runt sacks")
(512,rack_sysctl_root)
(513,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(514,&rack_sysctl_ctx)
(515,rack_sysctl_ctx)
(516,rack_alloc_limited_conns = counter_u64_alloc(M_WAITOK)
(517,CTLFLAG_RD)
(518,SYSCTL_CHILDREN(rack_sysctl_root)
(519,rack_sysctl_root)
(520,rack_sysctl_ctx)
(521,rack_sysctl_ctx)
(522,"Should we pace out every segment hptsi")
(523,rack_sysctl_root)
(524,rack_sysctl_ctx)
(525,"Total times we had to walk whole list due to a restart")
(526,M_WAITOK)
(527,SYSCTL_CHILDREN(rack_sysctl_root)
(528,rack_sysctl_ctx)
(529,"sack_long")
(530,"sack_short")
(531,&rack_sysctl_ctx)
(532,&rack_sysctl_ctx)
(533,OID_AUTO)
(534,RET)
(535,rack_clear_counter)
(536,rack_sysctl_ctx)
(537,&rack_to_alloc)
(538,CTLFLAG_RW)
(539,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(540,"Should RACK black box logging be verbose")
(541,&rack_sysctl_ctx)
(542,CTLFLAG_RD)
(543,rack_sysctl_ctx)
(544,"tlp_retry")
(545,rack_tlp_retran_fail)
(546,rack_timestamp_mismatch)
(547,"prr_sendalot")
(548,&rack_used_tlpmethod2)
(549,&rack_rtm_prr_newdata)
(550,CTLFLAG_RW)
(551,&rack_tlp_does_nada)
(552,rack_tlp_threshold_use)
(553,counter_u64_alloc(M_WAITOK)
(554,rack_sysctl_root)
(555,M_WAITOK)
(556,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(557,CTLFLAG_RD)
(558,&rack_sysctl_ctx)
(559,rack_saw_enetunreach)
(560,rack_sysctl_root)
(561,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(562,rack_badfr)
(563,"allochard")
(564,&rack_sysctl_ctx)
(565,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(566,&rack_sysctl_ctx)
(567,"split_limited")
(568,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(569,rack_sysctl_root)
(570,"precache")
(571,rack_progress_drops = counter_u64_alloc(M_WAITOK)
(572,"Total number of bad FRs")
(573,"opts")
(574,&rack_sysctl_ctx)
(575,6)
(576,&rack_sysctl_ctx)
(577,OID_AUTO)
(578,CTLFLAG_RD)
(579,&rack_sysctl_ctx)
(580,OID_AUTO)
(581,OID_AUTO)
(582,SYSCTL_CHILDREN(rack_sysctl_root)
(583,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(584,"what divisor for TLP rtt/retran will be added (1=rtt, 2=1/2 rtt etc)
(585,"send_oldest")
(586,&rack_tlp_retran_fail)
(587,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(588,M_WAITOK)
(589,OID_AUTO)
(590,rack_tlp_does_nada)
(591,rack_sysctl_root)
(592,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(593,&rack_tlp_threshold_use)
(594,&rack_proportional_rate)
(595,rack_lower_cwnd_at_tlp)
(596,&rack_sysctl_ctx)
(597,CTLFLAG_RD)
(598,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(599,rack_tlp_tot)
(600,"alloc_limited_conns")
(601,rack_saw_enobuf)
(602,rack_use_proportional_reduce)
(603,rack_sysctl_root)
(604,rack_sysctl_ctx)
(605,counter_u64_alloc(M_WAITOK)
(606,rack_reduce_largest_on_idle)
(607,rack_sysctl_root)
(608,"Total number of nada tlp calls")
(609,rack_sysctl_root)
(610,rack_sack_proc_restart = counter_u64_alloc(M_WAITOK)
(611,rack_sysctl_root)
(612,&rack_rtm_prr_retran)
(613,rack_sysctl_ctx)
(614,rack_alloc_limited_conns)
(615,CTLFLAG_RD)
(616,rack_sysctl_ctx)
(617,rack_used_tlpmethod)
(618,&rack_sysctl_ctx)
(619,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(620,rack_sysctl_ctx)
(621,&rack_sysctl_ctx)
(622,SYSCTL_CHILDREN(rack_sysctl_root)
(623,rack_to_alloc_hard)
(624,&rack_sysctl_ctx)
(625,rack_to_arm_rack)
(626,OID_AUTO)
(627,rack_saw_enobuf)
(628,OID_AUTO)
(629,rack_progress_drops)
(630,1)
(631,&rack_sack_block_limit)
(632,M_WAITOK)
(633,"Minimum RTO in ms -- set with caution below 1000 due to TLP")
(634,&rack_min_pace_time_seg_req)
(635,&rack_sysctl_ctx)
(636,SYSCTL_CHILDREN(rack_sysctl_root)
(637,counter_u64_alloc(M_WAITOK)
(638,rack_early_recovery_max_seg)
(639,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(640,M_WAITOK)
(641,"prrsndret")
(642,OID_AUTO)
(643,rack_sysctl_root)
(644,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(645,SYSCTL_CHILDREN(rack_sysctl_root)
(646,OID_AUTO)
(647,&rack_sysctl_ctx)
(648,"min_pace_time")
(649,rack_sysctl_ctx)
(650,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(651,rack_sysctl_root)
(652,CTLFLAG_RW)
(653,rack_tlp_thresh)
(654,CTLFLAG_RW)
(655,rack_tlp_in_recovery)
(656,&rack_to_tot)
(657,rack_sysctl_root)
(658,"tlp_retran")
(659,CTLTYPE_UINT)
(660,rack_input_idle_reduces = counter_u64_alloc(M_WAITOK)
(661,&rack_sysctl_ctx)
(662,counter_u64_alloc(M_WAITOK)
(663,M_WAITOK)
(664,CTLFLAG_RD)
(665,CTLFLAG_RD)
(666,"Total number of progress drops")
(667,rack_sysctl_ctx)
(668,&rack_sysctl_ctx)
(669,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(670,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(671,"prog_drops")
(672,rack_sysctl_ctx)
(673,&rack_pace_every_seg)
(674,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(675,&rack_alloc_limited_conns)
(676,SYSCTL_CHILDREN(rack_sysctl_root)
(677,rack_input_idle_reduces)
(678,SYSCTL_CHILDREN(rack_sysctl_root)
(679,SYSCTL_CHILDREN(rack_sysctl_root)
(680,rack_to_arm_tlp = counter_u64_alloc(M_WAITOK)
(681,"badfr_bytes")
(682,&rack_unpaced_segments)
(683,OID_AUTO)
(684,SYSCTL_CHILDREN(rack_sysctl_root)
(685,rack_runt_sacks = counter_u64_alloc(M_WAITOK)
(686,rack_sysctl_ctx)
(687,rack_sysctl_ctx)
(688,counter_u64_alloc(M_WAITOK)
(689,rack_unpaced_segments)
(690,"Total number of timestamps that we could not find the reported ts")
(691,0)
(692,"sackfiltering")
(693,counter_u64_alloc(M_WAITOK)
(694,rack_sysctl_ctx)
(695,OID_AUTO)
(696,rack_to_alloc_emerg)
(697,"Total number of times a segment did not cause hptsi")
(698,rack_sysctl_ctx)
(699,rack_precache)
(700,SYSCTL_CHILDREN(rack_sysctl_root)
(701,"How many times does TLP retry a single segment or multiple with no ACK")
(702,&rack_sysctl_ctx)
(703,&rack_split_limited)
(704,rack_sysctl_root)
(705,M_WAITOK)
(706,"runtsacks")
(707,"minrto")
(708,SYSCTL_CHILDREN(rack_sysctl_root)
(709,rack_sysctl_root)
(710,rack_sysctl_root)
(711,&rack_paced_segments)
(712,counter_u64_alloc(M_WAITOK)
(713,rack_sysctl_ctx)
(714,rack_sysctl_root)
(715,SYSCTL_CHILDREN(rack_sysctl_root)
(716,rack_sysctl_root)
(717,rack_sack_proc_restart)
(718,OID_AUTO)
(719,rack_sack_proc_restart)
(720,&rack_rate_sample_method)
(721,&rack_input_idle_reduces)
(722,rack_sysctl_root)
(723,TCP_MSS_ACCT_SIZE)
(724,rack_always_send_oldest)
(725,"RACK Option Stats")
(726,rack_sysctl_ctx)
(727,&rack_sysctl_ctx)
(728,M_WAITOK)
(729,1)
(730,rack_tlp_tot = counter_u64_alloc(M_WAITOK)
(731,CTLFLAG_RW)
(732,SYSCTL_CHILDREN(rack_sysctl_root)
(733,SYSCTL_CHILDREN(rack_sysctl_root)
(734,SYSCTL_CHILDREN(rack_sysctl_root)
(735,&rack_min_pace_time)
(736,rack_send_a_lot_in_prr)
(737,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(738,rack_paced_segments)
(739,CTLFLAG_RD)
(740,rack_sysctl_root)
(741,&rack_delayed_ack_time)
(742,OID_AUTO)
(743,&rack_tlp_in_recovery)
(744,TCP_MSS_ACCT_SIZE)
(745,rack_sysctl_root)
(746,&rack_sysctl_ctx)
(747,1)
(748,OID_AUTO)
(749,rack_find_high = counter_u64_alloc(M_WAITOK)
(750,"tlp_nada")
(751,rack_timestamp_mismatch = counter_u64_alloc(M_WAITOK)
(752,OID_AUTO)
(753,1)
(754,rack_sysctl_root)
(755,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(756,rack_sysctl_ctx)
(757,&rack_sysctl_ctx)
(758,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(759,CTLFLAG_RW)
(760,rack_sysctl_ctx)
(761,&rack_tlp_min)
(762,OID_AUTO)
(763,SYSCTL_CHILDREN(rack_sysctl_root)
(764,&rack_sysctl_ctx)
(765,"Max segments in early recovery")
(766,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(767,&rack_sysctl_ctx)
(768,counter_u64_alloc(M_WAITOK)
(769,"What percent reduction per loss")
(770,rack_sysctl_ctx)
(771,&rack_lower_cwnd_at_tlp)
(772,CTLFLAG_RW)
(773,counter_u64_alloc(M_WAITOK)
(774,0)
(775,CTLFLAG_RW)
(776,"idle_reduce_oninput")
(777,&rack_timestamp_mismatch)
(778,SYSCTL_CHILDREN(rack_sysctl_root)
(779,"saw_enetunreach")
(780,"rack_tlp_in_recovery")
(781,"Do we do early recovery with rack")
(782,rack_sysctl_ctx)
(783,&rack_badfr_bytes)
(784,CTLFLAG_RD)
(785,&rack_enter_tlp_calc)
(786,sysctl_rack_clear)
(787,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(788,counter_u64_alloc(M_WAITOK)
(789,SYSCTL_CHILDREN(rack_sysctl_root)
(790,rack_sysctl_root)
(791,rack_timestamp_mismatch)
(792,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(793,OID_AUTO)
(794,&rack_sysctl_ctx)
(795,CTLFLAG_RW)
(796,SYSCTL_CHILDREN(rack_sysctl_root)
(797,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(798,&rack_verbose_logging)
(799,"Do we hold off sending a RST until all pending data is ack\'d")
(800,"sblklimit")
(801,SYSCTL_CHILDREN(rack_sysctl_root)
(802,10)
(803,rack_badfr_bytes)
(804,rack_to_tot)
(805,rack_split_limited)
(806,M_WAITOK)
(807,&rack_sysctl_ctx)
(808,"Total number of times the rack to expired?")
(809,"hptsi_every_seg")
(810,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(811,counter_u64_alloc(M_WAITOK)
(812,CTLFLAG_RW)
(813,&rack_sysctl_ctx)
(814,rack_min_pace_time)
(815,OID_AUTO)
(816,rack_sysctl_root)
(817,rack_sysctl_ctx)
(818,CTLFLAG_RW)
(819,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(820,rack_to_alloc_hard)
(821,"Total number of times a segment did not cause hptsi")
(822,SYSCTL_CHILDREN(rack_sysctl_root)
(823,CTLFLAG_RW)
(824,&rack_sysctl_ctx)
(825,counter_u64_alloc(M_WAITOK)
(826,SYSCTL_CHILDREN(rack_sysctl_root)
(827,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(828,&rack_sack_proc_short)
(829,rack_sysctl_ctx)
(830,rack_sysctl_root)
(831,OID_AUTO)
(832,&rack_limited_retran)
(833,rack_sysctl_root)
(834,SYSCTL_CHILDREN(rack_sysctl_root)
(835,&rack_slot_reduction)
(836,CTLFLAG_RD)
(837,OID_AUTO)
(838,"earlyrecoveryseg")
(839,1)
(840,CTLFLAG_RW)
(841,&rack_sysctl_ctx)
(842,CTLFLAG_RD)
(843,OID_AUTO)
(844,&rack_sysctl_ctx)
(845,SYSCTL_CHILDREN(rack_sysctl_root)
(846,CTLFLAG_RD)
(847,rack_tlp_max_resend)
(848,SYSCTL_CHILDREN(rack_sysctl_root)
(849,&rack_use_sack_filter)
(850,rack_sysctl_ctx)
(851,&rack_early_recovery_max_seg)
(852,rack_sysctl_ctx)
(853,SYSCTL_CHILDREN(rack_sysctl_root)
(854,rack_to_alloc = counter_u64_alloc(M_WAITOK)
(855,OID_AUTO)
(856,"prrsndnew")
(857,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(858,rack_sysctl_root)
(859,rack_used_tlpmethod2)
(860,counter_u64_alloc(M_WAITOK)
(861,&rack_use_proportional_reduce)
(862,CTLFLAG_RD)
(863,CTLFLAG_RD)
(864,&rack_sysctl_ctx)
(865,rack_tlp_retran_bytes)
(866,rack_enter_tlp_calc = counter_u64_alloc(M_WAITOK)
(867,OID_AUTO)
(868,CTLFLAG_RW)
(869,rack_tlp_tot)
(870,rack_sysctl_ctx)
(871,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(872,SYSCTL_CHILDREN(rack_sysctl_root)
(873,rack_sysctl_ctx)
(874,rack_to_arm_rack = counter_u64_alloc(M_WAITOK)
(875,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(876,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(877,OID_AUTO)
(878,rack_sysctl_root)
(879,OID_AUTO)
(880,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(881,SYSCTL_CHILDREN(rack_sysctl_root)
(882,CTLFLAG_RW)
(883,0)
(884,rack_sysctl_root)
(885,&rack_sysctl_ctx)
(886,OID_AUTO)
(887,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(888,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(889,rack_sysctl_root)
(890,COUNTER_ARRAY_ALLOC(rack_out_size, TCP_MSS_ACCT_SIZE, M_WAITOK)
(891,OID_AUTO)
(892,OID_AUTO)
(893,&rack_sysctl_ctx)
(894,CTLFLAG_RW)
(895,rack_sysctl_ctx)
(896,rack_sysctl_ctx)
(897,&rack_sysctl_ctx)
(898,M_WAITOK)
(899,CTLFLAG_RD)
(900,&rack_sysctl_ctx)
(901,rack_sysctl_ctx)
(902,M_WAITOK)
(903,rack_to_alloc_hard = counter_u64_alloc(M_WAITOK)
(904,SYSCTL_CHILDREN(rack_sysctl_root)
(905,&rack_sysctl_ctx)
(906,CTLFLAG_RD)
(907,rack_sysctl_root)
(908,2)
(909,rack_slot_reduction)
(910,OID_AUTO)
(911,rack_sysctl_ctx)
(912,"Total times we had to walk whole list for sack processing")
(913,"unpaced")
(914,&rack_send_a_lot_in_prr)
(915,rack_rtm_prr_newdata)
(916,SYSCTL_CHILDREN(rack_sysctl_root)
(917,counter_u64_alloc(M_WAITOK)
(918,rack_sysctl_ctx)
(919,counter_u64_alloc(M_WAITOK)
(920,SYSCTL_CHILDREN(rack_sysctl_root)
(921,rack_enter_tlp_calc)
(922,"split_limit")
(923,"Should we pace out only a limited size of segments")
(924,"Should we always send the oldest TLP and RACK-TLP")
(925,CTLFLAG_RD)
(926,rack_tlp_retran_bytes = counter_u64_alloc(M_WAITOK)
(927,SYSCTL_ADD_S32(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(928,rack_to_alloc)
(929,CTLFLAG_RD)
(930,&rack_sysctl_ctx)
(931,&rack_saw_enobuf)
(932,&rack_to_alloc_emerg)
(933,SYSCTL_CHILDREN(rack_sysctl_root)
(934,OID_AUTO)
(935,SYSCTL_CHILDREN(rack_sysctl_root)
(936,rack_sysctl_root)
(937,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(938,rack_sysctl_root)
(939,rack_sysctl_root)
(940,OID_AUTO)
(941,rack_verbose_logging)
(942,"Should we enforce a minimum pace time of 1ms")
(943,counter_u64_alloc(M_WAITOK)
(944,rack_tlp_retran_fail = counter_u64_alloc(M_WAITOK)
(945,"Split allocations dropped due to limit")
(946,rack_out_size)
(947,"What method should we use for rate sampling 0=high, 1=low ")
(948,"tlpminto")
(949,rack_sysctl_ctx)
(950,OID_AUTO)
(951,rack_sysctl_ctx)
(952,M_WAITOK)
(953,rack_sysctl_root)
(954,OID_AUTO)
(955,rack_split_limited)
(956,SYSCTL_ADD_COUNTER_U64(&rack_sysctl_ctx,\n\\n\\t    SYSCTL_CHILDREN(rack_sysctl_root)
(957,OID_AUTO)
(958,rack_delayed_ack_time)
(959,rack_rate_sample_method)
(960,SYSCTL_CHILDREN(rack_sysctl_root)
(961,rack_sysctl_ctx)
(962,M_WAITOK)
(963,rack_paced_segments)
(964,rack_saw_enetunreach = counter_u64_alloc(M_WAITOK)
(965,1)
(966,&rack_sysctl_ctx)
(967,rack_sack_proc_short)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^