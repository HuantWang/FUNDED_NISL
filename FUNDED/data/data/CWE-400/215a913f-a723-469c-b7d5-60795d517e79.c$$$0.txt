-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticTrue)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
20,21
21,22
22,23
22,24
23,24
26,27
27,28
28,29
28,30
29,30
32,33
32,34
33,34
35,36
36,37
36,38
37,38
38,39
38,40
40,41
40,42
43,44
43,45
43,46
44,45
44,46
45,46
47,48
47,49
48,49
50,51
52,53
52,54
52,55
52,56
52,57
53,54
54,55
54,56
55,56
57,58
57,59
58,59
58,60
60,61
62,63
62,64
63,64
65,66
65,67
66,67
68,69
69,70
69,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
86,89
87,88
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
107,108
107,109
108,109
-----nextToken-----
2,4,9,11,15,16,19,24,25,30,31,34,39,41,42,46,49,51,56,59,61,64,67,70,71,75,77,82,84,88,90,92,96,98,102,104,109,110
-----computeFrom-----
13,14
13,15
28,29
28,30
44,45
44,46
54,55
54,56
65,66
65,67
73,74
73,75
-----guardedBy-----
51,92
46,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(11,31,0)
(23,30,0)
(41,47,0)
(34,31,0)
(33,41,0)
(43,34,0)
(2,4,0)
(21,41,0)
(46,47,0)
(15,23,0)
(44,46,0)
(1,25,0)
(35,11,0)
(34,16,0)
(24,14,0)
(11,1,0)
(11,35,0)
(47,41,0)
(48,16,0)
(19,31,0)
(6,46,0)
(7,23,0)
(47,9,0)
(27,9,0)
(17,52,0)
(38,47,0)
(26,12,0)
(39,40,0)
(41,33,0)
(16,34,0)
(40,20,0)
(27,47,0)
(36,24,0)
(31,12,0)
(40,39,0)
(32,29,0)
(50,12,0)
(41,21,0)
(28,12,0)
(52,47,0)
(11,33,0)
(0,1,0)
(46,9,0)
(37,52,0)
(45,1,0)
(18,35,0)
(34,1,0)
(8,11,0)
(3,9,0)
(29,9,0)
(5,31,0)
(33,11,0)
(49,39,0)
(4,22,0)
(13,27,0)
(29,47,0)
(2,10,1)
(37,47,1)
(42,4,1)
(6,44,1)
(29,32,1)
(44,52,1)
(27,47,1)
(31,19,1)
(43,42,1)
(19,5,1)
(52,17,1)
(4,2,1)
(13,29,1)
(52,47,1)
(47,41,1)
(34,16,1)
(46,47,1)
(35,18,1)
(0,10,1)
(41,21,1)
(8,38,1)
(51,27,1)
(40,39,1)
(49,52,1)
(11,1,1)
(16,48,1)
(32,46,1)
(51,24,1)
(10,31,1)
(1,45,1)
(34,31,1)
(39,49,1)
(41,33,1)
(17,37,1)
(24,36,1)
(45,0,1)
(33,11,1)
(51,42,1)
(34,1,1)
(27,13,1)
(11,35,1)
(48,43,1)
(44,40,1)
(46,6,1)
(36,34,1)
(11,31,1)
(38,34,1)
(18,8,1)
(42,1,1)
(29,47,1)
(17,34,2)
(2,10,2)
(47,41,2)
(34,16,2)
(27,47,2)
(11,35,2)
(41,34,2)
(29,47,2)
(34,31,2)
(49,52,2)
(33,11,2)
(11,34,2)
(45,10,2)
(4,10,2)
(46,47,2)
(52,47,2)
(8,34,2)
(46,34,2)
(18,34,2)
(36,34,2)
(33,34,2)
(6,34,2)
(24,34,2)
(52,34,2)
(38,34,2)
(11,31,2)
(39,52,2)
(27,34,2)
(0,10,2)
(48,42,2)
(35,34,2)
(34,42,2)
(1,10,2)
(32,34,2)
(16,42,2)
(47,34,2)
(40,52,2)
(44,34,2)
(41,33,2)
(13,34,2)
(11,1,2)
(34,1,2)
(40,39,2)
(29,34,2)
(37,34,2)
(41,21,2)
(43,42,2)
-----------------------------------
(0,data)
(1,data = 20)
(2,"Benign, fixed string")
(3,if (myString == NULL)
(4,printLine("Benign, fixed string")
(5,data)
(6,HELLO_STRING)
(7,if (data > strlen(HELLO_STRING)
(8,data)
(9,)
(10,staticFalse)
(11,data*sizeof(char)
(12,)
(13,myString)
(14,)
(15,myString)
(16,strlen(HELLO_STRING)
(17,NULL)
(18,char)
(19,0)
(20,)
(21,char *)
(22,)
(23,)
(24,printLine("Input is less than the length of the source string")
(25,)
(26,if(staticFalse)
(27,free(myString)
(28,if(staticTrue)
(29,printLine(myString)
(30,)
(31,data = 0)
(32,myString)
(33,malloc(data*sizeof(char)
(34,data > strlen(HELLO_STRING)
(35,sizeof(char)
(36,"Input is less than the length of the source string")
(37,myString)
(38,myString)
(39,-1)
(40,exit(-1)
(41,(char *)
(42,staticTrue)
(43,data)
(44,myString)
(45,20)
(46,strcpy(myString, HELLO_STRING)
(47,myString = (char *)
(48,HELLO_STRING)
(49,1)
(50,data)
(51,RET)
(52,myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^