-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_09_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
65,68
65,69
65,70
65,71
65,72
66,67
67,68
67,69
68,69
70,71
70,72
72,73
74,75
75,76
75,77
76,77
78,79
78,80
78,81
81,82
82,83
84,85
85,86
85,87
87,88
87,89
87,90
90,91
92,93
93,94
93,95
94,95
96,97
96,98
96,99
97,98
99,100
102,103
102,104
103,104
103,105
104,105
106,107
108,109
109,110
110,111
110,112
111,112
114,115
114,116
114,117
114,118
115,116
116,117
116,118
117,118
120,121
120,122
121,122
123,124
123,125
124,125
124,126
125,126
128,129
130,131
131,132
133,134
134,135
134,136
135,136
135,137
136,137
136,138
137,138
139,140
141,142
141,143
141,144
141,145
141,146
142,143
144,145
146,147
147,148
147,149
150,151
150,152
151,152
153,154
155,156
157,158
158,159
159,160
159,161
160,161
163,164
163,165
164,165
166,167
167,168
168,169
168,170
169,170
171,172
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,69,71,73,77,79,80,83,86,88,89,91,95,98,100,101,105,107,112,113,118,119,122,126,127,129,132,138,140,143,145,148,149,152,154,156,161,162,165,170,172
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
93,94
93,95
103,104
103,105
116,117
116,118
120,121
120,122
135,136
135,137
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_09_bad(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_09_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_09_bad
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(17,11,0)
(4,8,0)
(75,49,0)
(1,15,0)
(11,12,0)
(9,10,0)
(3,8,0)
(35,64,0)
(39,3,0)
(82,32,0)
(10,29,0)
(44,25,0)
(64,77,0)
(68,64,0)
(26,25,0)
(88,84,0)
(25,11,0)
(51,62,0)
(45,8,0)
(62,23,0)
(53,15,0)
(49,75,0)
(84,11,0)
(43,8,0)
(60,84,0)
(58,33,0)
(53,25,0)
(22,53,0)
(67,68,0)
(87,23,0)
(55,32,0)
(33,72,0)
(13,53,0)
(57,23,0)
(38,49,0)
(78,55,0)
(2,11,0)
(56,17,0)
(55,78,0)
(66,48,0)
(47,10,0)
(52,0,0)
(81,29,0)
(85,29,0)
(31,45,0)
(66,15,0)
(19,75,0)
(6,11,0)
(46,66,0)
(10,55,0)
(34,11,0)
(18,85,0)
(15,53,0)
(79,19,0)
(69,78,0)
(41,28,0)
(10,9,0)
(45,10,0)
(74,38,0)
(49,38,0)
(30,32,0)
(0,5,0)
(65,55,0)
(29,36,0)
(40,75,0)
(20,1,0)
(71,24,0)
(50,11,0)
(23,62,0)
(75,76,0)
(14,11,0)
(73,11,0)
(28,21,0)
(86,17,0)
(29,85,0)
(27,68,0)
(37,64,0)
(23,68,0)
(75,15,0)
(85,68,0)
(83,23,0)
(59,75,0)
(15,11,0)
(16,32,0)
(76,75,0)
(54,1,0)
(80,15,0)
(10,45,0)
(70,76,0)
(75,19,0)
(15,53,1)
(85,68,1)
(83,68,1)
(7,63,1)
(18,81,1)
(10,55,1)
(46,61,1)
(79,59,1)
(75,40,1)
(68,67,1)
(23,68,1)
(75,15,1)
(33,58,1)
(86,84,1)
(39,49,1)
(0,52,1)
(17,56,1)
(53,25,1)
(10,29,1)
(27,63,1)
(10,9,1)
(8,4,1)
(84,60,1)
(23,57,1)
(22,80,1)
(10,47,1)
(57,87,1)
(75,76,1)
(31,3,1)
(53,13,1)
(1,54,1)
(76,70,1)
(39,33,1)
(3,8,1)
(51,23,1)
(42,66,1)
(70,19,1)
(7,29,1)
(66,15,1)
(1,15,1)
(75,19,1)
(31,8,1)
(63,55,1)
(49,38,1)
(42,7,1)
(28,41,1)
(49,75,1)
(41,62,1)
(40,76,1)
(3,39,1)
(80,25,1)
(59,38,1)
(67,27,1)
(52,1,1)
(85,18,1)
(43,1,1)
(54,20,1)
(4,43,1)
(62,51,1)
(38,74,1)
(20,15,1)
(42,61,1)
(19,79,1)
(87,83,1)
(44,26,1)
(74,45,1)
(66,46,1)
(25,44,1)
(69,65,1)
(62,23,1)
(43,0,1)
(78,69,1)
(60,88,1)
(56,86,1)
(58,49,1)
(61,45,1)
(29,85,1)
(26,17,1)
(45,10,1)
(55,78,1)
(7,28,1)
(13,22,1)
(45,8,1)
(81,62,1)
(88,7,1)
(47,31,1)
(75,45,2)
(38,45,2)
(49,45,2)
(53,25,2)
(70,45,2)
(1,15,2)
(8,7,2)
(66,61,2)
(29,62,2)
(47,7,2)
(0,1,2)
(56,7,2)
(83,63,2)
(19,45,2)
(27,63,2)
(76,45,2)
(62,23,2)
(31,45,2)
(57,63,2)
(75,76,2)
(17,7,2)
(39,45,2)
(26,7,2)
(47,45,2)
(10,9,2)
(62,63,2)
(18,62,2)
(1,7,2)
(79,45,2)
(53,7,2)
(86,7,2)
(45,10,2)
(81,62,2)
(58,49,2)
(31,7,2)
(22,7,2)
(60,7,2)
(45,45,2)
(10,55,2)
(49,38,2)
(13,7,2)
(45,8,2)
(51,63,2)
(80,7,2)
(85,68,2)
(67,63,2)
(61,7,2)
(41,62,2)
(44,7,2)
(87,63,2)
(88,7,2)
(29,85,2)
(59,45,2)
(23,68,2)
(55,78,2)
(33,49,2)
(54,7,2)
(45,7,2)
(85,62,2)
(49,75,2)
(10,7,2)
(3,45,2)
(15,53,2)
(10,45,2)
(10,29,2)
(46,61,2)
(25,7,2)
(15,7,2)
(66,15,2)
(3,8,2)
(20,7,2)
(52,1,2)
(4,7,2)
(68,63,2)
(23,63,2)
(74,45,2)
(43,7,2)
(75,15,2)
(28,62,2)
(75,19,2)
(84,7,2)
(40,45,2)
-----------------------------------
(0,exit(1)
(1,pFile == NULL)
(2,pFile)
(3,i++)
(4,0)
(5,)
(6,filename)
(7,GLOBAL_CONST_TRUE)
(8,i = 0)
(9,size_t)
(10,(size_t)
(11,)
(12,)
(13,"w+")
(14,if (pFile == NULL)
(15,pFile = fopen(filename, "w+")
(16,count)
(17,*pFile = NULL)
(18,inputBuffer)
(19,sizeof(char)
(20,pFile)
(21,)
(22,filename)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,)
(25,*filename = "output_bad.txt")
(26,filename)
(27,inputBuffer)
(28,printLine("fgets()
(29,count = atoi(inputBuffer)
(30,if(GLOBAL_CONST_TRUE)
(31,i)
(32,)
(33,exit(1)
(34,for (i = 0; i < (size_t)
(35,inputBuffer)
(36,)
(37,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(38,strlen(SENTENCE)
(39,i)
(40,pFile)
(41,"fgets()
(42,RET)
(43,i)
(44,"output_bad.txt")
(45,i < (size_t)
(46,pFile)
(47,count)
(48,)
(49,strlen(SENTENCE)
(50,i)
(51,NULL)
(52,1)
(53,fopen(filename, "w+")
(54,NULL)
(55,count = -1)
(56,NULL)
(57,stdin)
(58,1)
(59,SENTENCE)
(60,0)
(61,pFile)
(62,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(63,GLOBAL_CONST_TRUE)
(64,)
(65,count)
(66,fclose(pFile)
(67,"")
(68,inputBuffer[CHAR_ARRAY_SIZE] = "")
(69,1)
(70,SENTENCE)
(71,if (strlen(SENTENCE)
(72,)
(73,if (pFile)
(74,SENTENCE)
(75,fwrite(SENTENCE, sizeof(char)
(76,strlen(SENTENCE)
(77,)
(78,-1)
(79,char)
(80,pFile)
(81,count)
(82,if(GLOBAL_CONST_TRUE)
(83,inputBuffer)
(84,i = 0)
(85,atoi(inputBuffer)
(86,pFile)
(87,CHAR_ARRAY_SIZE)
(88,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^