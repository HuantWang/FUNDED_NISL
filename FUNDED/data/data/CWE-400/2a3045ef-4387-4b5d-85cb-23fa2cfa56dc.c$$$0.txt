-----label-----
1
-----code-----
void dir_scan2(struct dir_info *dir, struct pseudo *pseudo)
{
	struct dir_ent *dir_ent = NULL;
	struct pseudo_entry *pseudo_ent;
	struct stat buf;
	static int pseudo_ino = 1;

	while((dir_ent = scan2_readdir(dir, dir_ent)) != NULL) {
		struct inode_info *inode_info = dir_ent->inode;
		struct stat *buf = &inode_info->buf;
		char *name = dir_ent->name;

		eval_actions(dir_ent);

		if((buf->st_mode & S_IFMT) == S_IFDIR)
			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));
	}

	while((pseudo_ent = pseudo_readdir(pseudo)) != NULL) {
		dir_ent = scan2_lookup(dir, pseudo_ent->name);
		if(pseudo_ent->dev->type == 'm') {
			struct stat *buf;
			if(dir_ent == NULL) {
				ERROR_START("Pseudo modify file \"%s\" does "
					"not exist in source filesystem.",
					pseudo_ent->pathname);
				ERROR_EXIT("  Ignoring.\n");
				continue;
			}
			if(dir_ent->inode->root_entry) {
				ERROR_START("Pseudo modify file \"%s\" is a "
					"pre-existing file in the filesystem "
					"being appended to.  It cannot be "\
					"modified.", pseudo_ent->pathname);
				ERROR_EXIT("  Ignoring.\n");
				continue;
			}
			buf = &dir_ent->inode->buf;
			buf->st_mode = (buf->st_mode & S_IFMT) |
				pseudo_ent->dev->mode;
			buf->st_uid = pseudo_ent->dev->uid;
			buf->st_gid = pseudo_ent->dev->gid;
			continue;
		}

		if(dir_ent) {
			if(dir_ent->inode->root_entry) {
				ERROR_START("Pseudo file \"%s\" is a "
					"pre-existing file in the filesystem "
					"being appended to.",
					pseudo_ent->pathname);
				ERROR_EXIT("  Ignoring.\n");
			} else {
				ERROR_START("Pseudo file \"%s\" exists in "
					"source filesystem \"%s\".",
					pseudo_ent->pathname,
					pathname(dir_ent));
				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "
					"override.\n");
			}
			continue;
		}

		memset(&buf, 0, sizeof(buf));
		buf.st_mode = pseudo_ent->dev->mode;
		buf.st_uid = pseudo_ent->dev->uid;
		buf.st_gid = pseudo_ent->dev->gid;
		buf.st_rdev = makedev(pseudo_ent->dev->major,
			pseudo_ent->dev->minor);
		buf.st_mtime = time(NULL);
		buf.st_ino = pseudo_ino ++;

		if(pseudo_ent->dev->type == 'd') {
			struct dir_ent *dir_ent =
				create_dir_entry(pseudo_ent->name, NULL,
						pseudo_ent->pathname, dir);
			char *subpath = strdup(subpathname(dir_ent));
			struct dir_info *sub_dir = scan1_opendir("", subpath,
						dir->depth + 1);
			if(sub_dir == NULL) {
				ERROR_START("Could not create pseudo directory "
					"\"%s\"", pseudo_ent->pathname);
				ERROR_EXIT(", skipping...\n");
				free(subpath);
				pseudo_ino --;
				continue;
			}
			dir_scan2(sub_dir, pseudo_ent->pseudo);
			dir->directory_count ++;
			add_dir_entry(dir_ent, sub_dir,
				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));
		} else if(pseudo_ent->dev->type == 'f') {
#ifdef USE_TMP_FILE
			struct stat buf2;
			int res = stat(pseudo_ent->dev->filename, &buf2);
			if(res == -1) {
				ERROR_START("Stat on pseudo file \"%s\" failed"
					pseudo_ent->pathname);
				ERROR_EXIT(", skipping...\n");
				pseudo_ino --;
				continue;
			}
			buf.st_size = buf2.st_size;
			add_dir_entry2(pseudo_ent->name, NULL,
				pseudo_ent->dev->filename, NULL,
				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);
#else
			add_dir_entry2(pseudo_ent->name, NULL,
				pseudo_ent->pathname, NULL,
				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,
				pseudo_ent->dev->pseudo_id), dir);
#endif
		} else {
			add_dir_entry2(pseudo_ent->name, NULL,
				pseudo_ent->pathname, NULL,
				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
44,45
44,46
46,47
48,49
48,50
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
54,57
55,56
57,58
59,60
61,62
63,64
63,65
63,66
63,67
63,68
64,65
65,66
65,67
66,67
68,69
68,70
68,71
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
80,82
80,83
83,84
84,85
85,86
85,87
86,87
89,90
90,91
90,92
92,93
92,94
92,95
95,96
96,97
96,98
97,98
100,101
101,102
101,103
102,103
104,105
106,107
106,108
107,108
107,109
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
118,119
119,120
119,121
119,122
120,121
122,123
122,124
123,124
126,127
126,128
126,129
127,128
129,130
131,132
133,134
133,135
134,135
134,136
135,136
136,137
136,138
137,138
139,140
139,141
140,141
142,143
144,145
146,147
146,148
146,149
146,150
146,151
146,152
146,153
146,154
146,155
146,156
146,157
147,148
148,149
148,150
149,150
151,152
151,153
151,154
152,153
154,155
156,157
156,158
157,158
160,161
160,162
161,162
161,163
162,163
162,164
163,164
163,165
164,165
169,170
169,171
169,172
169,173
169,174
169,175
169,176
169,177
170,171
171,172
171,173
172,173
174,175
174,176
177,178
177,179
178,179
178,180
179,180
181,182
183,184
183,185
183,186
184,185
185,186
185,187
185,188
186,187
189,190
189,191
190,191
193,194
194,195
194,196
195,196
199,200
199,201
200,201
200,202
201,202
201,203
202,203
206,207
206,208
206,209
207,208
208,209
208,210
208,211
209,210
212,213
212,214
213,214
216,217
217,218
217,219
218,219
222,223
223,224
223,225
224,225
226,227
227,228
227,229
228,229
228,230
229,230
233,234
234,235
234,236
235,236
235,237
236,237
239,240
239,241
240,241
241,242
241,243
242,243
242,244
243,244
246,247
248,249
248,250
249,250
249,251
250,251
254,255
255,256
255,257
256,257
256,258
257,258
260,261
260,262
261,262
261,263
262,263
266,267
267,268
267,269
268,269
268,270
269,270
272,273
272,274
273,274
273,275
274,275
279,280
279,281
280,281
282,283
282,284
283,284
283,285
283,286
284,285
284,286
285,286
285,287
286,287
290,291
290,292
291,292
292,293
292,294
292,295
293,294
296,297
296,298
297,298
300,301
301,302
301,303
302,303
305,306
305,307
306,307
307,308
307,309
307,310
307,311
308,309
311,312
311,313
312,313
315,316
315,317
316,317
318,319
320,321
321,322
321,323
322,323
326,327
327,328
327,329
327,330
327,331
328,329
330,331
331,332
334,335
335,336
336,337
338,339
339,340
339,341
340,341
340,342
341,342
344,345
344,346
345,346
345,347
346,347
350,351
351,352
351,353
352,353
352,354
353,354
356,357
356,358
357,358
357,359
358,359
362,363
363,364
363,365
364,365
364,366
365,366
368,369
368,370
369,370
369,371
370,371
374,375
375,376
375,377
376,377
376,378
377,378
380,381
380,382
380,383
381,382
383,384
383,385
384,385
384,386
385,386
389,390
389,391
390,391
390,392
391,392
395,396
396,397
396,398
397,398
397,399
398,399
401,402
401,403
402,403
404,405
406,407
407,408
407,409
408,409
408,410
409,410
412,413
413,414
415,416
415,417
415,418
416,417
416,418
417,418
417,419
418,419
418,420
419,420
424,425
424,426
424,427
424,428
424,429
424,430
424,431
425,426
426,427
426,428
427,428
429,430
429,431
429,432
432,433
433,434
433,435
433,436
433,437
433,438
434,435
436,437
436,438
437,438
440,441
442,443
442,444
443,444
446,447
448,449
449,450
449,451
451,452
451,453
451,454
454,455
455,456
455,457
456,457
458,459
458,460
459,460
461,462
463,464
464,465
464,466
465,466
467,468
467,469
467,470
470,471
471,472
471,473
471,474
471,475
472,473
475,476
477,478
477,479
478,479
478,480
479,480
483,484
483,485
484,485
484,486
485,486
487,488
489,490
489,491
489,492
489,493
489,494
490,491
491,492
491,493
491,494
492,493
495,496
495,497
496,497
499,500
500,501
500,502
501,502
504,505
505,506
505,507
506,507
508,509
510,511
511,512
512,513
515,516
516,517
516,518
516,519
517,518
519,520
521,522
521,523
522,523
525,526
526,527
527,528
527,529
528,529
531,532
532,533
532,534
532,535
532,536
533,534
535,536
537,538
539,540
539,541
539,542
539,543
540,541
542,543
543,544
545,546
548,549
548,550
548,551
549,550
549,551
550,551
550,552
551,552
551,553
552,553
557,558
558,559
559,560
559,561
559,562
559,563
559,564
559,565
559,566
560,561
562,563
562,564
563,564
566,567
568,569
568,570
569,570
572,573
574,575
574,576
574,577
574,578
575,576
577,578
578,579
580,581
582,583
582,584
583,584
583,585
584,585
588,589
590,591
591,592
592,593
592,594
592,595
592,596
592,597
592,598
592,599
593,594
595,596
595,597
596,597
599,600
601,602
601,603
602,603
605,606
607,608
607,609
607,610
607,611
608,609
610,611
611,612
613,614
616,617
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,31,33,34,38,40,43,45,47,53,56,58,60,62,67,69,70,74,75,79,81,82,87,88,91,93,94,98,99,103,105,112,113,115,117,121,124,125,128,130,132,138,141,143,145,150,153,155,158,159,165,166,167,168,173,175,176,180,182,187,188,191,192,196,197,198,203,204,205,210,211,214,215,219,220,221,225,230,231,232,237,238,244,245,247,251,252,253,258,259,263,264,265,270,271,275,276,277,278,281,287,288,289,294,295,298,299,303,304,309,310,313,314,317,319,323,324,325,329,332,333,337,342,343,347,348,349,354,355,359,360,361,366,367,371,372,373,378,379,382,386,387,388,392,393,394,399,400,403,405,410,411,414,420,421,422,423,428,430,431,435,438,439,441,444,445,447,450,452,453,457,460,462,466,468,469,473,474,476,480,481,482,486,488,493,494,497,498,502,503,507,509,513,514,518,520,523,524,529,530,534,536,538,541,544,546,547,553,554,555,556,561,564,565,567,570,571,573,576,579,581,585,586,587,589,594,597,598,600,603,604,606,609,612,614,615,617
-----computeFrom-----
49,50
49,51
51,52
51,53
107,108
107,109
109,110
109,111
134,135
134,136
136,137
136,138
148,149
148,150
161,162
161,163
178,179
178,180
223,224
223,225
234,235
234,236
239,240
239,241
241,242
241,243
255,256
255,257
267,268
267,269
339,340
339,341
351,352
351,353
363,364
363,365
375,376
375,377
396,397
396,398
407,408
407,409
416,417
416,418
477,478
477,479
484,485
484,486
549,550
549,551
-----guardedBy-----
166,276
165,275
420,523
554,586
553,585
-----guardedByNegation-----
421,586
420,603
422,555
553,603
-----lastLexicalUse-----
420,603
553,603
-----jump-----
420,603
553,603
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ContinueStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
void dir_scan2(struct dir_info *dir, struct pseudo *pseudo){	struct dir_ent *dir_ent = NULL;	struct pseudo_entry *pseudo_ent;	struct stat buf;	static int pseudo_ino = 1;	while((dir_ent = scan2_readdir(dir, dir_ent)) != NULL) {		struct inode_info *inode_info = dir_ent->inode;		struct stat *buf = &inode_info->buf;		char *name = dir_ent->name;		eval_actions(dir_ent);		if((buf->st_mode & S_IFMT) == S_IFDIR)			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));	}	while((pseudo_ent = pseudo_readdir(pseudo)) != NULL) {		dir_ent = scan2_lookup(dir, pseudo_ent->name);		if(pseudo_ent->dev->type == 'm') {			struct stat *buf;			if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			buf = &dir_ent->inode->buf;			buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;			buf->st_uid = pseudo_ent->dev->uid;			buf->st_gid = pseudo_ent->dev->gid;			continue;		}		if(dir_ent) {			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}			continue;		}		memset(&buf, 0, sizeof(buf));		buf.st_mode = pseudo_ent->dev->mode;		buf.st_uid = pseudo_ent->dev->uid;		buf.st_gid = pseudo_ent->dev->gid;		buf.st_rdev = makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor);		buf.st_mtime = time(NULL);		buf.st_ino = pseudo_ino ++;		if(pseudo_ent->dev->type == 'd') {			struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);			char *subpath = strdup(subpathname(dir_ent));			struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);			if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}			dir_scan2(sub_dir, pseudo_ent->pseudo);			dir->directory_count ++;			add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));		} else if(pseudo_ent->dev->type == 'f') {#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		} else {			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}	}}
void
dir_scan2(struct dir_info *dir, struct pseudo *pseudo)
dir_scan2
struct dir_info *dir
struct dir_info
dir_info
*dir
*
dir
struct pseudo *pseudo
struct pseudo
pseudo
*pseudo
*
pseudo
{	struct dir_ent *dir_ent = NULL;	struct pseudo_entry *pseudo_ent;	struct stat buf;	static int pseudo_ino = 1;	while((dir_ent = scan2_readdir(dir, dir_ent)) != NULL) {		struct inode_info *inode_info = dir_ent->inode;		struct stat *buf = &inode_info->buf;		char *name = dir_ent->name;		eval_actions(dir_ent);		if((buf->st_mode & S_IFMT) == S_IFDIR)			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));	}	while((pseudo_ent = pseudo_readdir(pseudo)) != NULL) {		dir_ent = scan2_lookup(dir, pseudo_ent->name);		if(pseudo_ent->dev->type == 'm') {			struct stat *buf;			if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			buf = &dir_ent->inode->buf;			buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;			buf->st_uid = pseudo_ent->dev->uid;			buf->st_gid = pseudo_ent->dev->gid;			continue;		}		if(dir_ent) {			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}			continue;		}		memset(&buf, 0, sizeof(buf));		buf.st_mode = pseudo_ent->dev->mode;		buf.st_uid = pseudo_ent->dev->uid;		buf.st_gid = pseudo_ent->dev->gid;		buf.st_rdev = makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor);		buf.st_mtime = time(NULL);		buf.st_ino = pseudo_ino ++;		if(pseudo_ent->dev->type == 'd') {			struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);			char *subpath = strdup(subpathname(dir_ent));			struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);			if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}			dir_scan2(sub_dir, pseudo_ent->pseudo);			dir->directory_count ++;			add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));		} else if(pseudo_ent->dev->type == 'f') {#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		} else {			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}	}}
struct dir_ent *dir_ent = NULL;
struct dir_ent *dir_ent = NULL;
struct dir_ent
dir_ent
*dir_ent = NULL
*
dir_ent
= NULL
NULL
NULL
struct pseudo_entry *pseudo_ent;
struct pseudo_entry *pseudo_ent;
struct pseudo_entry
pseudo_entry
*pseudo_ent
*
pseudo_ent
struct stat buf;
struct stat buf;
struct stat
stat
buf
buf
static int pseudo_ino = 1;
static int pseudo_ino = 1;
static int
pseudo_ino = 1
pseudo_ino
= 1
1
while((dir_ent = scan2_readdir(dir, dir_ent)) != NULL) {		struct inode_info *inode_info = dir_ent->inode;		struct stat *buf = &inode_info->buf;		char *name = dir_ent->name;		eval_actions(dir_ent);		if((buf->st_mode & S_IFMT) == S_IFDIR)			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));	}
(dir_ent = scan2_readdir(dir, dir_ent)) != NULL
(dir_ent = scan2_readdir(dir, dir_ent))
dir_ent = scan2_readdir(dir, dir_ent)
dir_ent
dir_ent
scan2_readdir(dir, dir_ent)
scan2_readdir
scan2_readdir
dir
dir
dir_ent
dir_ent
NULL
NULL
{		struct inode_info *inode_info = dir_ent->inode;		struct stat *buf = &inode_info->buf;		char *name = dir_ent->name;		eval_actions(dir_ent);		if((buf->st_mode & S_IFMT) == S_IFDIR)			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));	}
struct inode_info *inode_info = dir_ent->inode;
struct inode_info *inode_info = dir_ent->inode;
struct inode_info
inode_info
*inode_info = dir_ent->inode
*
inode_info
= dir_ent->inode
dir_ent->inode
dir_ent
dir_ent
inode
struct stat *buf = &inode_info->buf;
struct stat *buf = &inode_info->buf;
struct stat
stat
*buf = &inode_info->buf
*
buf
= &inode_info->buf
&inode_info->buf
inode_info->buf
inode_info
inode_info
buf
char *name = dir_ent->name;
char *name = dir_ent->name;
char
*name = dir_ent->name
*
name
= dir_ent->name
dir_ent->name
dir_ent
dir_ent
name
eval_actions(dir_ent);
eval_actions(dir_ent)
eval_actions
eval_actions
dir_ent
dir_ent
if((buf->st_mode & S_IFMT) == S_IFDIR)			dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));
(buf->st_mode & S_IFMT) == S_IFDIR
(buf->st_mode & S_IFMT)
buf->st_mode & S_IFMT
buf->st_mode
buf
buf
st_mode
S_IFMT
S_IFMT
S_IFDIR
S_IFDIR
dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo));
dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo))
dir_scan2
dir_scan2
dir_ent->dir
dir_ent
dir_ent
dir
pseudo_subdir(name, pseudo)
pseudo_subdir
pseudo_subdir
name
name
pseudo
pseudo
while((pseudo_ent = pseudo_readdir(pseudo)) != NULL) {		dir_ent = scan2_lookup(dir, pseudo_ent->name);		if(pseudo_ent->dev->type == 'm') {			struct stat *buf;			if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			buf = &dir_ent->inode->buf;			buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;			buf->st_uid = pseudo_ent->dev->uid;			buf->st_gid = pseudo_ent->dev->gid;			continue;		}		if(dir_ent) {			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}			continue;		}		memset(&buf, 0, sizeof(buf));		buf.st_mode = pseudo_ent->dev->mode;		buf.st_uid = pseudo_ent->dev->uid;		buf.st_gid = pseudo_ent->dev->gid;		buf.st_rdev = makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor);		buf.st_mtime = time(NULL);		buf.st_ino = pseudo_ino ++;		if(pseudo_ent->dev->type == 'd') {			struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);			char *subpath = strdup(subpathname(dir_ent));			struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);			if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}			dir_scan2(sub_dir, pseudo_ent->pseudo);			dir->directory_count ++;			add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));		} else if(pseudo_ent->dev->type == 'f') {#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		} else {			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}	}
(pseudo_ent = pseudo_readdir(pseudo)) != NULL
(pseudo_ent = pseudo_readdir(pseudo))
pseudo_ent = pseudo_readdir(pseudo)
pseudo_ent
pseudo_ent
pseudo_readdir(pseudo)
pseudo_readdir
pseudo_readdir
pseudo
pseudo
NULL
NULL
{		dir_ent = scan2_lookup(dir, pseudo_ent->name);		if(pseudo_ent->dev->type == 'm') {			struct stat *buf;			if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			buf = &dir_ent->inode->buf;			buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;			buf->st_uid = pseudo_ent->dev->uid;			buf->st_gid = pseudo_ent->dev->gid;			continue;		}		if(dir_ent) {			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}			continue;		}		memset(&buf, 0, sizeof(buf));		buf.st_mode = pseudo_ent->dev->mode;		buf.st_uid = pseudo_ent->dev->uid;		buf.st_gid = pseudo_ent->dev->gid;		buf.st_rdev = makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor);		buf.st_mtime = time(NULL);		buf.st_ino = pseudo_ino ++;		if(pseudo_ent->dev->type == 'd') {			struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);			char *subpath = strdup(subpathname(dir_ent));			struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);			if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}			dir_scan2(sub_dir, pseudo_ent->pseudo);			dir->directory_count ++;			add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));		} else if(pseudo_ent->dev->type == 'f') {#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		} else {			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}	}
dir_ent = scan2_lookup(dir, pseudo_ent->name);
dir_ent = scan2_lookup(dir, pseudo_ent->name)
dir_ent
dir_ent
scan2_lookup(dir, pseudo_ent->name)
scan2_lookup
scan2_lookup
dir
dir
pseudo_ent->name
pseudo_ent
pseudo_ent
name
if(pseudo_ent->dev->type == 'm') {			struct stat *buf;			if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			buf = &dir_ent->inode->buf;			buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;			buf->st_uid = pseudo_ent->dev->uid;			buf->st_gid = pseudo_ent->dev->gid;			continue;		}
pseudo_ent->dev->type == 'm'
pseudo_ent->dev->type
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
type
'm'
{			struct stat *buf;			if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}			buf = &dir_ent->inode->buf;			buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;			buf->st_uid = pseudo_ent->dev->uid;			buf->st_gid = pseudo_ent->dev->gid;			continue;		}
struct stat *buf;
struct stat *buf;
struct stat
stat
*buf
*
buf
if(dir_ent == NULL) {				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}
dir_ent == NULL
dir_ent
dir_ent
NULL
NULL
{				ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}
ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname);
ERROR_START("Pseudo modify file \"%s\" does "					"not exist in source filesystem.",					pseudo_ent->pathname)
ERROR_START
ERROR_START
"Pseudo modify file \"%s\" does "					"not exist in source filesystem."
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
ERROR_EXIT("  Ignoring.\n");
ERROR_EXIT("  Ignoring.\n")
ERROR_EXIT
ERROR_EXIT
"  Ignoring.\n"
continue;
if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}
dir_ent->inode->root_entry
dir_ent->inode
dir_ent
dir_ent
inode
root_entry
{				ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");				continue;			}
ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname);
ERROR_START("Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified.", pseudo_ent->pathname)
ERROR_START
ERROR_START
"Pseudo modify file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.  It cannot be "\					"modified."
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
ERROR_EXIT("  Ignoring.\n");
ERROR_EXIT("  Ignoring.\n")
ERROR_EXIT
ERROR_EXIT
"  Ignoring.\n"
continue;
buf = &dir_ent->inode->buf;
buf = &dir_ent->inode->buf
buf
buf
&dir_ent->inode->buf
dir_ent->inode->buf
dir_ent->inode
dir_ent
dir_ent
inode
buf
buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode;
buf->st_mode = (buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode
buf->st_mode
buf
buf
st_mode
(buf->st_mode & S_IFMT) |				pseudo_ent->dev->mode
(buf->st_mode & S_IFMT)
buf->st_mode & S_IFMT
buf->st_mode
buf
buf
st_mode
S_IFMT
S_IFMT
pseudo_ent->dev->mode
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
mode
buf->st_uid = pseudo_ent->dev->uid;
buf->st_uid = pseudo_ent->dev->uid
buf->st_uid
buf
buf
st_uid
pseudo_ent->dev->uid
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
uid
buf->st_gid = pseudo_ent->dev->gid;
buf->st_gid = pseudo_ent->dev->gid
buf->st_gid
buf
buf
st_gid
pseudo_ent->dev->gid
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
gid
continue;
if(dir_ent) {			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}			continue;		}
dir_ent
dir_ent
{			if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}			continue;		}
if(dir_ent->inode->root_entry) {				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			} else {				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}
dir_ent->inode->root_entry
dir_ent->inode
dir_ent
dir_ent
inode
root_entry
{				ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);				ERROR_EXIT("  Ignoring.\n");			}
ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname);
ERROR_START("Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to.",					pseudo_ent->pathname)
ERROR_START
ERROR_START
"Pseudo file \"%s\" is a "					"pre-existing file in the filesystem "					"being appended to."
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
ERROR_EXIT("  Ignoring.\n");
ERROR_EXIT("  Ignoring.\n")
ERROR_EXIT
ERROR_EXIT
"  Ignoring.\n"
{				ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));				ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");			}
ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent));
ERROR_START("Pseudo file \"%s\" exists in "					"source filesystem \"%s\".",					pseudo_ent->pathname,					pathname(dir_ent))
ERROR_START
ERROR_START
"Pseudo file \"%s\" exists in "					"source filesystem \"%s\"."
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
pathname(dir_ent)
pathname
pathname
dir_ent
dir_ent
ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n");
ERROR_EXIT("\nIgnoring, exclude it (-e/-ef) to "					"override.\n")
ERROR_EXIT
ERROR_EXIT
"\nIgnoring, exclude it (-e/-ef) to "					"override.\n"
continue;
memset(&buf, 0, sizeof(buf));
memset(&buf, 0, sizeof(buf))
memset
memset
&buf
buf
buf
0
sizeof(buf)
(buf)
buf
buf
buf.st_mode = pseudo_ent->dev->mode;
buf.st_mode = pseudo_ent->dev->mode
buf.st_mode
buf
buf
st_mode
pseudo_ent->dev->mode
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
mode
buf.st_uid = pseudo_ent->dev->uid;
buf.st_uid = pseudo_ent->dev->uid
buf.st_uid
buf
buf
st_uid
pseudo_ent->dev->uid
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
uid
buf.st_gid = pseudo_ent->dev->gid;
buf.st_gid = pseudo_ent->dev->gid
buf.st_gid
buf
buf
st_gid
pseudo_ent->dev->gid
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
gid
buf.st_rdev = makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor);
buf.st_rdev = makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor)
buf.st_rdev
buf
buf
st_rdev
makedev(pseudo_ent->dev->major,			pseudo_ent->dev->minor)
makedev
makedev
pseudo_ent->dev->major
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
major
pseudo_ent->dev->minor
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
minor
buf.st_mtime = time(NULL);
buf.st_mtime = time(NULL)
buf.st_mtime
buf
buf
st_mtime
time(NULL)
time
time
NULL
NULL
buf.st_ino = pseudo_ino ++;
buf.st_ino = pseudo_ino ++
buf.st_ino
buf
buf
st_ino
pseudo_ino ++
pseudo_ino
pseudo_ino
if(pseudo_ent->dev->type == 'd') {			struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);			char *subpath = strdup(subpathname(dir_ent));			struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);			if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}			dir_scan2(sub_dir, pseudo_ent->pseudo);			dir->directory_count ++;			add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));		} else if(pseudo_ent->dev->type == 'f') {#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		} else {			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}
pseudo_ent->dev->type == 'd'
pseudo_ent->dev->type
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
type
'd'
{			struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);			char *subpath = strdup(subpathname(dir_ent));			struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);			if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}			dir_scan2(sub_dir, pseudo_ent->pseudo);			dir->directory_count ++;			add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));		}
struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);
struct dir_ent *dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir);
struct dir_ent
dir_ent
*dir_ent =				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir)
*
dir_ent
=				create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir)
create_dir_entry(pseudo_ent->name, NULL,						pseudo_ent->pathname, dir)
create_dir_entry
create_dir_entry
pseudo_ent->name
pseudo_ent
pseudo_ent
name
NULL
NULL
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
dir
dir
char *subpath = strdup(subpathname(dir_ent));
char *subpath = strdup(subpathname(dir_ent));
char
*subpath = strdup(subpathname(dir_ent))
*
subpath
= strdup(subpathname(dir_ent))
strdup(subpathname(dir_ent))
strdup
strdup
subpathname(dir_ent)
subpathname
subpathname
dir_ent
dir_ent
struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);
struct dir_info *sub_dir = scan1_opendir("", subpath,						dir->depth + 1);
struct dir_info
dir_info
*sub_dir = scan1_opendir("", subpath,						dir->depth + 1)
*
sub_dir
= scan1_opendir("", subpath,						dir->depth + 1)
scan1_opendir("", subpath,						dir->depth + 1)
scan1_opendir
scan1_opendir
""
subpath
subpath
dir->depth + 1
dir->depth
dir
dir
depth
1
if(sub_dir == NULL) {				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}
sub_dir == NULL
sub_dir
sub_dir
NULL
NULL
{				ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				free(subpath);				pseudo_ino --;				continue;			}
ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname);
ERROR_START("Could not create pseudo directory "					"\"%s\"", pseudo_ent->pathname)
ERROR_START
ERROR_START
"Could not create pseudo directory "					"\"%s\""
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
ERROR_EXIT(", skipping...\n");
ERROR_EXIT(", skipping...\n")
ERROR_EXIT
ERROR_EXIT
", skipping...\n"
free(subpath);
free(subpath)
free
free
subpath
subpath
pseudo_ino --;
pseudo_ino --
pseudo_ino
pseudo_ino
continue;
dir_scan2(sub_dir, pseudo_ent->pseudo);
dir_scan2(sub_dir, pseudo_ent->pseudo)
dir_scan2
dir_scan2
sub_dir
sub_dir
pseudo_ent->pseudo
pseudo_ent
pseudo_ent
pseudo
dir->directory_count ++;
dir->directory_count ++
dir->directory_count
dir
dir
directory_count
add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0));
add_dir_entry(dir_ent, sub_dir,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0))
add_dir_entry
add_dir_entry
dir_ent
dir_ent
sub_dir
sub_dir
lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
lookup_inode2
lookup_inode2
&buf
buf
buf
PSEUDO_FILE_OTHER
PSEUDO_FILE_OTHER
0
if(pseudo_ent->dev->type == 'f') {#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		} else {			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}
pseudo_ent->dev->type == 'f'
pseudo_ent->dev->type
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
type
'f'
{#ifdef USE_TMP_FILE			struct stat buf2;			int res = stat(pseudo_ent->dev->filename, &buf2);			if(res == -1) {				ERROR_START("Stat on pseudo file \"%s\" failed"					pseudo_ent->pathname);				ERROR_EXIT(", skipping...\n");				pseudo_ino --;				continue;			}			buf.st_size = buf2.st_size;			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->dev->filename, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);#else			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);#endif		}
add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir);
add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id), dir)
add_dir_entry2
add_dir_entry2
pseudo_ent->name
pseudo_ent
pseudo_ent
name
NULL
NULL
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
NULL
NULL
lookup_inode2(&buf, PSEUDO_FILE_PROCESS,				pseudo_ent->dev->pseudo_id)
lookup_inode2
lookup_inode2
&buf
buf
buf
PSEUDO_FILE_PROCESS
PSEUDO_FILE_PROCESS
pseudo_ent->dev->pseudo_id
pseudo_ent->dev
pseudo_ent
pseudo_ent
dev
pseudo_id
dir
dir
{			add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);		}
add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir);
add_dir_entry2(pseudo_ent->name, NULL,				pseudo_ent->pathname, NULL,				lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0), dir)
add_dir_entry2
add_dir_entry2
pseudo_ent->name
pseudo_ent
pseudo_ent
name
NULL
NULL
pseudo_ent->pathname
pseudo_ent
pseudo_ent
pathname
NULL
NULL
lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
lookup_inode2
lookup_inode2
&buf
buf
buf
PSEUDO_FILE_OTHER
PSEUDO_FILE_OTHER
0
dir
dir
-----joern-----
(362,174,0)
(90,174,0)
(246,195,0)
(210,177,0)
(177,282,0)
(292,343,0)
(121,237,0)
(76,17,0)
(180,185,0)
(183,104,0)
(368,42,0)
(40,215,0)
(217,274,0)
(69,18,0)
(339,108,0)
(342,10,0)
(54,118,0)
(272,17,0)
(238,18,0)
(286,351,0)
(189,310,0)
(340,259,0)
(160,264,0)
(308,174,0)
(140,305,0)
(304,165,0)
(305,174,0)
(265,174,0)
(359,328,0)
(302,320,0)
(151,158,0)
(364,308,0)
(213,287,0)
(110,297,0)
(15,165,0)
(47,282,0)
(169,47,0)
(221,87,0)
(119,26,0)
(205,55,0)
(302,55,0)
(268,282,0)
(300,203,0)
(154,278,0)
(275,184,0)
(184,90,0)
(288,38,0)
(310,230,0)
(13,9,0)
(72,268,0)
(23,18,0)
(118,13,0)
(210,185,0)
(234,58,0)
(171,234,0)
(58,234,0)
(197,258,0)
(11,87,0)
(36,309,0)
(278,138,0)
(52,215,0)
(277,331,0)
(259,210,0)
(144,41,0)
(372,181,0)
(287,235,0)
(307,343,0)
(297,17,0)
(159,108,0)
(228,238,0)
(193,166,0)
(370,320,0)
(148,41,0)
(324,166,0)
(234,171,0)
(209,71,0)
(306,125,0)
(252,199,0)
(243,16,0)
(92,172,0)
(145,161,0)
(258,65,0)
(89,367,0)
(272,377,0)
(258,195,0)
(243,336,0)
(216,240,0)
(351,174,0)
(309,2,0)
(287,213,0)
(338,69,0)
(165,246,0)
(156,259,0)
(222,247,0)
(221,2,0)
(378,376,0)
(117,13,0)
(247,337,0)
(18,23,0)
(311,23,0)
(22,62,0)
(346,287,0)
(26,168,0)
(259,138,0)
(155,195,0)
(373,349,0)
(242,55,0)
(157,344,0)
(315,166,0)
(316,69,0)
(241,44,0)
(174,19,0)
(359,253,0)
(326,153,0)
(87,221,0)
(9,13,0)
(229,126,0)
(175,207,0)
(357,202,0)
(207,239,0)
(322,195,0)
(278,196,0)
(202,104,0)
(359,348,0)
(305,47,0)
(226,218,0)
(178,254,0)
(356,42,0)
(345,315,0)
(254,178,0)
(6,93,0)
(255,305,0)
(59,237,0)
(227,203,0)
(88,309,0)
(57,161,0)
(94,268,0)
(331,127,0)
(132,36,0)
(16,195,0)
(99,22,0)
(230,271,0)
(358,272,0)
(181,372,0)
(34,124,0)
(245,363,0)
(334,210,0)
(191,291,0)
(218,9,0)
(48,26,0)
(130,179,0)
(318,69,0)
(4,90,0)
(24,1,0)
(298,287,0)
(44,241,0)
(28,124,0)
(265,124,0)
(285,356,0)
(322,14,0)
(348,359,0)
(333,287,0)
(122,218,0)
(75,114,0)
(36,38,0)
(114,61,0)
(86,276,0)
(116,174,0)
(22,36,0)
(247,108,0)
(46,265,0)
(3,201,0)
(60,128,0)
(70,210,0)
(349,373,0)
(370,290,0)
(64,91,0)
(237,61,0)
(47,305,0)
(125,199,0)
(325,62,0)
(321,254,0)
(194,236,0)
(371,334,0)
(219,116,0)
(276,174,0)
(111,61,0)
(149,206,0)
(45,158,0)
(320,25,0)
(174,362,0)
(105,137,0)
(18,238,0)
(281,17,0)
(50,253,0)
(192,203,0)
(237,59,0)
(179,174,0)
(103,191,0)
(343,174,0)
(162,19,0)
(253,174,0)
(184,275,0)
(18,91,0)
(273,373,0)
(198,100,0)
(94,309,0)
(181,174,0)
(303,18,0)
(290,370,0)
(2,221,0)
(109,250,0)
(66,107,0)
(128,171,0)
(23,311,0)
(204,139,0)
(43,238,0)
(294,213,0)
(105,278,0)
(68,275,0)
(31,14,0)
(127,91,0)
(146,349,0)
(257,351,0)
(284,104,0)
(190,174,0)
(202,36,0)
(73,178,0)
(104,174,0)
(74,360,0)
(87,275,0)
(7,348,0)
(362,196,0)
(18,282,0)
(166,315,0)
(1,25,0)
(108,174,0)
(104,202,0)
(319,16,0)
(335,76,0)
(16,47,0)
(241,116,0)
(114,274,0)
(153,16,0)
(246,76,0)
(341,243,0)
(320,302,0)
(317,164,0)
(173,198,0)
(347,93,0)
(115,38,0)
(100,38,0)
(37,91,0)
(198,282,0)
(379,236,0)
(188,200,0)
(223,107,0)
(353,276,0)
(134,265,0)
(231,268,0)
(244,136,0)
(283,359,0)
(352,61,0)
(334,236,0)
(315,39,0)
(13,118,0)
(366,170,0)
(287,282,0)
(184,179,0)
(71,236,0)
(215,174,0)
(208,153,0)
(238,174,0)
(78,241,0)
(14,322,0)
(97,18,0)
(263,200,0)
(330,316,0)
(312,207,0)
(129,198,0)
(232,210,0)
(279,61,0)
(311,174,0)
(168,26,0)
(191,71,0)
(336,243,0)
(182,236,0)
(19,174,0)
(253,359,0)
(376,258,0)
(2,38,0)
(84,61,0)
(117,91,0)
(108,247,0)
(128,264,0)
(58,276,0)
(126,346,0)
(240,36,0)
(41,16,0)
(239,293,0)
(51,232,0)
(0,119,0)
(348,16,0)
(224,199,0)
(309,36,0)
(363,291,0)
(375,17,0)
(261,370,0)
(170,127,0)
(177,210,0)
(119,174,0)
(287,346,0)
(56,309,0)
(323,213,0)
(98,23,0)
(213,174,0)
(139,351,0)
(124,265,0)
(131,181,0)
(138,236,0)
(201,214,0)
(296,336,0)
(42,356,0)
(93,171,0)
(123,254,0)
(96,168,0)
(47,16,0)
(28,61,0)
(102,18,0)
(374,271,0)
(9,218,0)
(350,206,0)
(234,264,0)
(125,2,0)
(139,10,0)
(264,128,0)
(293,239,0)
(62,22,0)
(21,302,0)
(287,308,0)
(67,9,0)
(62,135,0)
(158,28,0)
(360,354,0)
(112,116,0)
(276,58,0)
(187,75,0)
(351,139,0)
(79,311,0)
(354,214,0)
(214,354,0)
(332,253,0)
(313,119,0)
(63,243,0)
(344,328,0)
(77,337,0)
(200,293,0)
(93,237,0)
(83,240,0)
(232,71,0)
(18,69,0)
(355,117,0)
(22,275,0)
(106,41,0)
(262,372,0)
(260,138,0)
(212,91,0)
(12,346,0)
(27,177,0)
(308,287,0)
(215,271,0)
(186,172,0)
(372,199,0)
(365,38,0)
(176,239,0)
(143,65,0)
(55,174,0)
(124,28,0)
(220,148,0)
(230,195,0)
(268,94,0)
(267,75,0)
(309,94,0)
(206,42,0)
(177,107,0)
(278,105,0)
(270,377,0)
(17,203,0)
(147,39,0)
(185,210,0)
(291,191,0)
(101,236,0)
(211,360,0)
(53,232,0)
(254,16,0)
(179,184,0)
(314,191,0)
(291,363,0)
(137,210,0)
(164,250,0)
(90,184,0)
(141,308,0)
(158,237,0)
(133,135,0)
(65,258,0)
(33,203,0)
(81,278,0)
(142,203,0)
(336,59,0)
(32,290,0)
(214,195,0)
(82,58,0)
(233,170,0)
(258,376,0)
(59,336,0)
(30,177,0)
(127,331,0)
(361,287,0)
(150,310,0)
(20,311,0)
(163,179,0)
(373,117,0)
(29,354,0)
(275,38,0)
(329,38,0)
(113,342,0)
(274,343,0)
(289,137,0)
(360,174,0)
(41,148,0)
(166,174,0)
(274,114,0)
(100,198,0)
(49,203,0)
(295,1,0)
(290,174,0)
(202,38,0)
(69,316,0)
(26,119,0)
(5,128,0)
(116,241,0)
(161,322,0)
(249,252,0)
(135,62,0)
(22,38,0)
(13,117,0)
(367,377,0)
(256,290,0)
(136,337,0)
(251,346,0)
(76,246,0)
(266,94,0)
(280,362,0)
(8,195,0)
(85,44,0)
(363,236,0)
(343,274,0)
(55,302,0)
(128,237,0)
(301,90,0)
(137,105,0)
(207,174,0)
(25,320,0)
(264,234,0)
(71,232,0)
(269,201,0)
(369,331,0)
(239,207,0)
(35,195,0)
(167,184,0)
(25,195,0)
(320,370,0)
(171,61,0)
(152,181,0)
(42,206,0)
(271,215,0)
(80,62,0)
(218,174,0)
(107,203,0)
(39,315,0)
(138,259,0)
(206,363,0)
(297,199,0)
(299,22,0)
(95,137,0)
(346,126,0)
(354,360,0)
(248,184,0)
(271,230,0)
(184,282,0)
(293,195,0)
(225,2,0)
(75,237,0)
(31,161,1)
(106,144,1)
(190,109,1)
(284,183,1)
(244,247,1)
(90,174,1)
(271,215,1)
(89,373,1)
(340,260,1)
(126,229,1)
(177,107,1)
(222,153,1)
(58,276,1)
(78,116,1)
(168,26,1)
(287,282,1)
(205,1,1)
(18,69,1)
(291,191,1)
(77,136,1)
(27,70,1)
(173,129,1)
(51,209,1)
(276,86,1)
(30,27,1)
(243,63,1)
(278,154,1)
(305,255,1)
(105,137,1)
(171,234,1)
(18,97,1)
(82,276,1)
(239,176,1)
(228,127,1)
(209,185,1)
(86,353,1)
(4,301,1)
(180,210,1)
(88,132,1)
(117,13,1)
(190,77,1)
(287,298,1)
(140,169,1)
(122,226,1)
(87,275,1)
(184,90,1)
(39,147,1)
(108,159,1)
(298,346,1)
(162,174,1)
(297,17,1)
(68,168,1)
(5,93,1)
(216,36,1)
(344,157,1)
(2,221,1)
(254,123,1)
(207,174,1)
(368,206,1)
(178,73,1)
(219,168,1)
(190,186,1)
(372,181,1)
(179,174,1)
(301,68,1)
(339,222,1)
(280,190,1)
(373,349,1)
(331,277,1)
(287,213,1)
(131,262,1)
(60,5,1)
(187,267,1)
(220,41,1)
(352,28,1)
(47,305,1)
(177,210,1)
(318,338,1)
(184,282,1)
(281,107,1)
(197,65,1)
(36,309,1)
(166,193,1)
(286,204,1)
(121,148,1)
(278,196,1)
(136,244,1)
(350,149,1)
(48,119,1)
(309,2,1)
(181,174,1)
(125,306,1)
(265,46,1)
(305,174,1)
(176,207,1)
(234,264,1)
(310,150,1)
(69,316,1)
(127,331,1)
(50,332,1)
(259,210,1)
(378,197,1)
(307,292,1)
(206,350,1)
(362,280,1)
(17,375,1)
(97,69,1)
(166,174,1)
(335,165,1)
(175,200,1)
(315,345,1)
(98,311,1)
(76,17,1)
(198,173,1)
(14,31,1)
(320,302,1)
(224,297,1)
(272,17,1)
(19,162,1)
(243,16,1)
(257,286,1)
(333,308,1)
(80,135,1)
(320,370,1)
(190,22,1)
(63,341,1)
(167,90,1)
(325,80,1)
(312,175,1)
(190,18,1)
(185,180,1)
(158,151,1)
(53,51,1)
(349,146,1)
(360,211,1)
(164,317,1)
(214,354,1)
(119,0,1)
(358,367,1)
(221,87,1)
(334,371,1)
(225,275,1)
(246,76,1)
(44,85,1)
(237,59,1)
(134,158,1)
(181,152,1)
(347,6,1)
(22,62,1)
(158,237,1)
(76,335,1)
(255,140,1)
(18,282,1)
(229,333,1)
(56,88,1)
(232,53,1)
(317,148,1)
(132,2,1)
(16,47,1)
(241,116,1)
(351,174,1)
(154,81,1)
(41,16,1)
(120,39,1)
(116,174,1)
(278,138,1)
(234,58,1)
(290,174,1)
(360,174,1)
(285,42,1)
(316,330,1)
(124,34,1)
(32,256,1)
(34,265,1)
(345,166,1)
(259,156,1)
(161,145,1)
(308,174,1)
(153,208,1)
(273,117,1)
(297,110,1)
(231,72,1)
(290,32,1)
(11,225,1)
(174,362,1)
(299,100,1)
(144,153,1)
(343,174,1)
(242,205,1)
(346,126,1)
(190,270,1)
(369,170,1)
(0,313,1)
(24,214,1)
(137,289,1)
(304,322,1)
(302,21,1)
(128,171,1)
(23,98,1)
(183,357,1)
(104,174,1)
(55,242,1)
(12,251,1)
(336,296,1)
(293,239,1)
(215,174,1)
(95,356,1)
(271,374,1)
(356,285,1)
(139,351,1)
(319,19,1)
(151,45,1)
(179,163,1)
(193,324,1)
(40,52,1)
(357,240,1)
(264,128,1)
(342,113,1)
(268,282,1)
(13,118,1)
(59,336,1)
(18,238,1)
(266,268,1)
(9,218,1)
(147,315,1)
(275,184,1)
(190,224,1)
(70,105,1)
(283,178,1)
(294,44,1)
(93,347,1)
(75,237,1)
(238,43,1)
(28,124,1)
(118,54,1)
(94,268,1)
(87,11,1)
(233,366,1)
(202,104,1)
(211,74,1)
(107,66,1)
(323,294,1)
(102,23,1)
(315,166,1)
(302,55,1)
(230,271,1)
(249,372,1)
(311,174,1)
(376,378,1)
(108,174,1)
(23,311,1)
(123,321,1)
(362,196,1)
(343,307,1)
(306,252,1)
(93,237,1)
(364,361,1)
(177,282,1)
(137,210,1)
(129,202,1)
(114,274,1)
(263,188,1)
(138,259,1)
(58,82,1)
(265,174,1)
(241,78,1)
(370,290,1)
(168,96,1)
(189,258,1)
(135,133,1)
(128,237,1)
(169,319,1)
(47,282,1)
(22,36,1)
(55,174,1)
(308,141,1)
(296,243,1)
(160,128,1)
(356,42,1)
(254,16,1)
(252,249,1)
(314,245,1)
(208,326,1)
(112,219,1)
(247,108,1)
(104,284,1)
(133,99,1)
(145,57,1)
(336,243,1)
(29,360,1)
(116,112,1)
(326,39,1)
(334,210,1)
(149,334,1)
(85,241,1)
(146,273,1)
(26,48,1)
(1,295,1)
(26,119,1)
(324,16,1)
(239,207,1)
(75,187,1)
(119,174,1)
(206,363,1)
(201,269,1)
(363,291,1)
(186,342,1)
(274,343,1)
(332,283,1)
(277,369,1)
(99,299,1)
(74,201,1)
(240,83,1)
(330,102,1)
(62,135,1)
(264,160,1)
(159,339,1)
(25,320,1)
(157,359,1)
(198,282,1)
(370,261,1)
(128,60,1)
(22,275,1)
(94,266,1)
(109,164,1)
(70,356,1)
(367,89,1)
(200,263,1)
(66,223,1)
(18,23,1)
(190,185,1)
(188,230,1)
(79,20,1)
(218,122,1)
(6,237,1)
(295,24,1)
(15,304,1)
(353,264,1)
(152,131,1)
(185,210,1)
(45,114,1)
(165,15,1)
(322,14,1)
(54,9,1)
(43,228,1)
(359,348,1)
(355,44,1)
(366,373,1)
(20,303,1)
(248,179,1)
(141,364,1)
(373,117,1)
(303,238,1)
(351,257,1)
(204,178,1)
(69,318,1)
(41,106,1)
(274,217,1)
(67,218,1)
(375,281,1)
(359,253,1)
(268,231,1)
(309,94,1)
(42,368,1)
(46,134,1)
(292,75,1)
(44,241,1)
(190,352,1)
(348,16,1)
(202,36,1)
(57,25,1)
(251,126,1)
(207,312,1)
(81,137,1)
(238,174,1)
(21,55,1)
(143,120,1)
(190,287,1)
(348,7,1)
(9,67,1)
(338,316,1)
(327,19,1)
(210,177,1)
(103,314,1)
(3,293,1)
(150,189,1)
(270,272,1)
(226,355,1)
(213,174,1)
(72,56,1)
(125,2,1)
(371,138,1)
(110,125,1)
(258,65,1)
(269,3,1)
(245,71,1)
(39,315,1)
(170,233,1)
(65,143,1)
(321,120,1)
(71,232,1)
(240,36,1)
(7,253,1)
(287,346,1)
(83,216,1)
(354,360,1)
(341,121,1)
(153,16,1)
(73,254,1)
(258,376,1)
(374,215,1)
(260,363,1)
(218,174,1)
(124,265,1)
(287,308,1)
(361,213,1)
(163,130,1)
(148,41,1)
(90,4,1)
(186,344,1)
(256,302,1)
(276,174,1)
(253,174,1)
(113,139,1)
(130,167,1)
(253,50,1)
(191,71,1)
(177,30,1)
(105,278,1)
(52,310,1)
(148,220,1)
(262,240,1)
(215,40,1)
(13,9,1)
(191,103,1)
(19,174,1)
(70,17,1)
(272,358,1)
(232,210,1)
(62,325,1)
(354,29,1)
(178,254,1)
(217,343,1)
(313,246,1)
(42,206,1)
(267,171,1)
(289,95,1)
(96,26,1)
(100,198,1)
(213,323,1)
(156,340,1)
(261,290,1)
(184,179,1)
(311,79,1)
(346,12,1)
(184,248,1)
(158,148,2)
(243,16,2)
(0,120,2)
(201,120,2)
(188,120,2)
(197,120,2)
(173,240,2)
(9,218,2)
(24,120,2)
(237,148,2)
(312,120,2)
(120,39,2)
(316,373,2)
(226,44,2)
(42,206,2)
(62,135,2)
(179,174,2)
(193,19,2)
(139,351,2)
(153,39,2)
(20,373,2)
(147,19,2)
(275,168,2)
(310,120,2)
(200,120,2)
(53,185,2)
(315,19,2)
(297,17,2)
(65,120,2)
(42,185,2)
(319,19,2)
(184,168,2)
(116,168,2)
(13,118,2)
(19,19,2)
(241,168,2)
(104,240,2)
(298,44,2)
(259,210,2)
(247,108,2)
(371,185,2)
(146,44,2)
(54,44,2)
(252,240,2)
(98,373,2)
(293,120,2)
(374,120,2)
(149,185,2)
(198,282,2)
(346,44,2)
(265,148,2)
(59,148,2)
(247,153,2)
(97,373,2)
(45,148,2)
(255,19,2)
(136,153,2)
(11,168,2)
(308,174,2)
(51,185,2)
(161,120,2)
(184,90,2)
(246,120,2)
(18,69,2)
(254,120,2)
(3,120,2)
(72,168,2)
(127,373,2)
(118,44,2)
(44,168,2)
(323,44,2)
(175,120,2)
(303,373,2)
(22,240,2)
(28,148,2)
(29,120,2)
(295,120,2)
(343,148,2)
(87,275,2)
(152,240,2)
(370,290,2)
(336,148,2)
(41,153,2)
(232,210,2)
(1,120,2)
(13,9,2)
(55,120,2)
(373,117,2)
(44,241,2)
(269,120,2)
(25,120,2)
(244,153,2)
(179,168,2)
(352,148,2)
(272,17,2)
(354,360,2)
(117,13,2)
(124,148,2)
(211,120,2)
(150,120,2)
(90,168,2)
(241,116,2)
(287,213,2)
(305,174,2)
(330,373,2)
(305,19,2)
(96,120,2)
(185,210,2)
(302,55,2)
(78,168,2)
(302,120,2)
(162,19,2)
(256,120,2)
(268,168,2)
(87,168,2)
(286,178,2)
(158,237,2)
(6,148,2)
(314,185,2)
(2,221,2)
(290,120,2)
(148,153,2)
(47,282,2)
(166,19,2)
(208,39,2)
(112,168,2)
(346,126,2)
(259,185,2)
(94,268,2)
(18,238,2)
(284,240,2)
(268,282,2)
(344,178,2)
(271,215,2)
(41,16,2)
(309,94,2)
(266,168,2)
(232,185,2)
(22,275,2)
(153,16,2)
(340,185,2)
(359,253,2)
(242,120,2)
(315,166,2)
(28,124,2)
(214,120,2)
(100,240,2)
(376,120,2)
(362,196,2)
(180,185,2)
(125,240,2)
(21,120,2)
(287,44,2)
(276,174,2)
(76,17,2)
(94,168,2)
(126,44,2)
(238,373,2)
(290,174,2)
(181,174,2)
(343,174,2)
(347,148,2)
(356,185,2)
(85,168,2)
(13,44,2)
(131,240,2)
(171,148,2)
(378,120,2)
(363,291,2)
(370,120,2)
(178,120,2)
(325,240,2)
(67,44,2)
(309,2,2)
(359,348,2)
(191,185,2)
(362,19,2)
(202,240,2)
(221,87,2)
(287,308,2)
(280,19,2)
(270,373,2)
(40,120,2)
(143,120,2)
(289,356,2)
(16,19,2)
(187,148,2)
(351,178,2)
(334,210,2)
(254,16,2)
(291,191,2)
(174,362,2)
(177,107,2)
(117,44,2)
(168,26,2)
(106,153,2)
(119,120,2)
(363,185,2)
(69,373,2)
(31,120,2)
(309,168,2)
(145,120,2)
(138,185,2)
(278,356,2)
(218,44,2)
(345,19,2)
(367,373,2)
(9,44,2)
(52,120,2)
(260,185,2)
(128,237,2)
(56,168,2)
(108,153,2)
(332,178,2)
(191,71,2)
(372,240,2)
(285,185,2)
(275,184,2)
(358,373,2)
(82,148,2)
(160,148,2)
(23,311,2)
(342,178,2)
(296,148,2)
(278,138,2)
(304,120,2)
(47,305,2)
(27,185,2)
(209,185,2)
(90,174,2)
(202,104,2)
(234,58,2)
(216,168,2)
(103,185,2)
(75,148,2)
(351,174,2)
(26,119,2)
(80,240,2)
(32,120,2)
(55,174,2)
(225,168,2)
(273,44,2)
(336,243,2)
(222,153,2)
(239,207,2)
(113,178,2)
(219,168,2)
(360,120,2)
(355,44,2)
(264,128,2)
(159,153,2)
(331,373,2)
(372,181,2)
(99,240,2)
(357,240,2)
(257,178,2)
(26,120,2)
(307,148,2)
(93,237,2)
(292,148,2)
(185,185,2)
(246,76,2)
(349,44,2)
(104,174,2)
(5,148,2)
(89,373,2)
(224,240,2)
(322,120,2)
(73,120,2)
(176,120,2)
(148,41,2)
(23,373,2)
(181,240,2)
(213,44,2)
(36,309,2)
(43,373,2)
(262,240,2)
(258,65,2)
(127,331,2)
(139,178,2)
(271,120,2)
(132,168,2)
(287,346,2)
(168,120,2)
(368,185,2)
(114,148,2)
(240,36,2)
(206,185,2)
(278,196,2)
(134,148,2)
(122,44,2)
(7,178,2)
(230,120,2)
(105,278,2)
(353,148,2)
(274,148,2)
(177,282,2)
(154,356,2)
(177,185,2)
(202,36,2)
(165,120,2)
(320,370,2)
(361,44,2)
(75,237,2)
(69,316,2)
(291,185,2)
(308,44,2)
(263,120,2)
(267,148,2)
(184,179,2)
(79,373,2)
(164,148,2)
(186,120,2)
(293,239,2)
(311,174,2)
(39,19,2)
(25,320,2)
(70,185,2)
(58,148,2)
(15,120,2)
(299,240,2)
(88,168,2)
(339,153,2)
(68,168,2)
(74,120,2)
(177,210,2)
(311,373,2)
(215,120,2)
(360,174,2)
(163,168,2)
(108,174,2)
(243,148,2)
(124,265,2)
(60,148,2)
(71,232,2)
(138,259,2)
(169,19,2)
(4,168,2)
(238,174,2)
(157,178,2)
(36,168,2)
(128,171,2)
(156,185,2)
(306,240,2)
(116,174,2)
(297,240,2)
(215,174,2)
(359,178,2)
(47,19,2)
(144,153,2)
(46,148,2)
(167,168,2)
(12,44,2)
(228,373,2)
(123,120,2)
(63,148,2)
(174,19,2)
(22,36,2)
(348,16,2)
(277,373,2)
(16,47,2)
(348,178,2)
(335,120,2)
(135,240,2)
(151,148,2)
(234,264,2)
(350,185,2)
(206,363,2)
(237,59,2)
(213,174,2)
(207,120,2)
(59,336,2)
(258,120,2)
(71,185,2)
(105,356,2)
(83,168,2)
(251,44,2)
(320,302,2)
(261,120,2)
(258,376,2)
(301,168,2)
(218,174,2)
(231,168,2)
(30,185,2)
(14,120,2)
(128,148,2)
(62,240,2)
(133,240,2)
(100,198,2)
(220,153,2)
(333,44,2)
(86,148,2)
(166,174,2)
(190,19,2)
(373,349,2)
(22,62,2)
(2,168,2)
(366,373,2)
(287,282,2)
(318,373,2)
(274,343,2)
(184,282,2)
(210,177,2)
(249,240,2)
(239,120,2)
(77,153,2)
(95,356,2)
(229,44,2)
(320,120,2)
(214,354,2)
(276,148,2)
(253,178,2)
(313,120,2)
(34,148,2)
(321,120,2)
(109,148,2)
(334,185,2)
(233,373,2)
(114,274,2)
(121,148,2)
(245,185,2)
(354,120,2)
(248,168,2)
(272,373,2)
(39,315,2)
(129,240,2)
(93,148,2)
(221,168,2)
(50,178,2)
(198,240,2)
(171,234,2)
(265,174,2)
(234,148,2)
(217,148,2)
(18,23,2)
(170,373,2)
(110,240,2)
(283,178,2)
(137,210,2)
(369,373,2)
(204,178,2)
(141,44,2)
(76,120,2)
(119,174,2)
(18,282,2)
(105,137,2)
(326,39,2)
(210,185,2)
(341,148,2)
(18,373,2)
(102,373,2)
(48,120,2)
(205,120,2)
(58,276,2)
(230,271,2)
(137,356,2)
(183,240,2)
(140,19,2)
(356,42,2)
(130,168,2)
(207,174,2)
(189,120,2)
(338,373,2)
(253,174,2)
(264,148,2)
(294,44,2)
(19,174,2)
(125,2,2)
(364,44,2)
(324,19,2)
(57,120,2)
(81,356,2)
(240,168,2)
(322,14,2)
(317,148,2)
(373,44,2)
(178,254,2)
-----------------------------------
(0,dev)
(1,buf.st_rdev)
(2,*subpath = strdup(subpathname(dir_ent)
(3,buf)
(4,name)
(5,buf)
(6,buf)
(7,dir_ent)
(8,if(pseudo_ent->dev->type == \'d\')
(9,pseudo_ent->dev->filename)
(10,)
(11,dir_ent)
(12,0)
(13,stat(pseudo_ent->dev->filename, &buf2)
(14,time(NULL)
(15,st_ino)
(16,dir_ent = scan2_lookup(dir, pseudo_ent->name)
(17,pseudo_ino = 1)
(18,add_dir_entry2(pseudo_ent->name, NULL,\n\\n\\t\\t\\t\\tpseudo_ent->dev->filename, NULL,\n\\n\\t\\t\\t\\tlookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
(19,(pseudo_ent = pseudo_readdir(pseudo)
(20,pseudo_ent)
(21,major)
(22,add_dir_entry(dir_ent, sub_dir,\n\\n\\t\\t\\t\\tlookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
(23,pseudo_ent->dev->filename)
(24,buf)
(25,buf.st_rdev = makedev(pseudo_ent->dev->major,\n\\n\\t\\t\\tpseudo_ent->dev->minor)
(26,pseudo_ent->dev->type)
(27,dir)
(28,buf->st_gid = pseudo_ent->dev->gid)
(29,gid)
(30,dir_ent)
(31,NULL)
(32,dev)
(33,while((pseudo_ent = pseudo_readdir(pseudo)
(34,gid)
(35,if(dir_ent)
(36,*sub_dir = scan1_opendir("", subpath,\n\\n\\t\\t\\t\\t\\t\\tdir->depth + 1)
(37,buf2)
(38,)
(39,pseudo_ent->dev->type == \'m\')
(40,dev)
(41,dir_ent->inode)
(42,buf->st_mode & S_IFMT)
(43,name)
(44,pseudo_ent->dev->type == \'f\')
(45,buf)
(46,dev)
(47,scan2_lookup(dir, pseudo_ent->name)
(48,type)
(49,pseudo_ent)
(50,pathname)
(51,dir_ent)
(52,pseudo_ent)
(53,inode)
(54,buf2)
(55,pseudo_ent->dev)
(56,subpath)
(57,buf)
(58,pseudo_ent->dev->mode)
(59,&dir_ent->inode->buf)
(60,st_mode)
(61,)
(62,lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
(63,inode)
(64,res)
(65,&buf)
(66,NULL)
(67,filename)
(68,dir_ent)
(69,lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
(70,dir_ent)
(71,*inode_info = dir_ent->inode)
(72,dir)
(73,root_entry)
(74,pseudo_ent)
(75,buf->st_uid)
(76,pseudo_ino ++)
(77,continue;)
(78,type)
(79,dev)
(80,PSEUDO_FILE_OTHER)
(81,name)
(82,mode)
(83,NULL)
(84,if(dir_ent == NULL)
(85,\'f\')
(86,dev)
(87,subpathname(dir_ent)
(88,"")
(89,", skipping...\\n")
(90,pseudo_ent->name)
(91,)
(92,if(dir_ent->inode->root_entry)
(93,buf->st_mode)
(94,dir->depth + 1)
(95,dir_ent)
(96,\'d\')
(97,dir)
(98,filename)
(99,sub_dir)
(100,dir->directory_count ++)
(101,if((buf->st_mode & S_IFMT)
(102,NULL)
(103,buf)
(104,pseudo_ent->pseudo)
(105,dir_scan2(dir_ent->dir, pseudo_subdir(name, pseudo)
(106,inode)
(107,*dir_ent = NULL)
(108,pseudo_ent->pathname)
(109,continue;)
(110,pseudo_ino)
(111,buf)
(112,dev)
(113,"  Ignoring.\\n")
(114,buf->st_uid = pseudo_ent->dev->uid)
(115,subpath)
(116,pseudo_ent->dev)
(117,res = stat(pseudo_ent->dev->filename, &buf2)
(118,&buf2)
(119,pseudo_ent->dev)
(120,dir_ent)
(121,buf)
(122,dev)
(123,inode)
(124,pseudo_ent->dev->gid)
(125,free(subpath)
(126,&buf)
(127,buf.st_size = buf2.st_size)
(128,buf->st_mode)
(129,dir)
(130,pseudo_ent)
(131,pseudo_ent)
(132,sub_dir)
(133,buf)
(134,pseudo_ent)
(135,&buf)
(136,ERROR_EXIT("  Ignoring.\\n")
(137,dir_ent->dir)
(138,*name = dir_ent->name)
(139,ERROR_START("Pseudo file \\"%s\\" is a "\n\\n\\t\\t\\t\\t\\t"pre-existing file in the filesystem "\n\\n\\t\\t\\t\\t\\t"being appended to.",\n\\n\\t\\t\\t\\t\\tpseudo_ent->pathname)
(140,pseudo_ent)
(141,pathname)
(142,buf)
(143,buf)
(144,dir_ent)
(145,st_mtime)
(146,1)
(147,\'m\')
(148,dir_ent->inode->root_entry)
(149,buf)
(150,st_mode)
(151,st_gid)
(152,pathname)
(153,dir_ent == NULL)
(154,pseudo)
(155,if(pseudo_ent->dev->type == \'m\')
(156,name)
(157,"\\nIgnoring, exclude it (-e/-ef)
(158,buf->st_gid)
(159,pathname)
(160,S_IFMT)
(161,buf.st_mtime)
(162,NULL)
(163,pathname)
(164,ERROR_EXIT("  Ignoring.\\n")
(165,buf.st_ino)
(166,pseudo_ent->dev)
(167,NULL)
(168,pseudo_ent->dev->type == \'d\')
(169,dir)
(170,buf.st_size)
(171,buf->st_mode = (buf->st_mode & S_IFMT)
(172,)
(173,directory_count)
(174,pseudo_ent = pseudo_readdir(pseudo)
(175,pseudo_ent)
(176,uid)
(177,scan2_readdir(dir, dir_ent)
(178,dir_ent->inode->root_entry)
(179,pseudo_ent->pathname)
(180,NULL)
(181,pseudo_ent->pathname)
(182,buf)
(183,pseudo_ent)
(184,create_dir_entry(pseudo_ent->name, NULL,\n\\n\\t\\t\\t\\t\\t\\tpseudo_ent->pathname, dir)
(185,(dir_ent = scan2_readdir(dir, dir_ent)
(186,continue;)
(187,st_uid)
(188,buf)
(189,buf)
(190,pseudo_ent)
(191,inode_info->buf)
(192,dir_ent)
(193,dev)
(194,inode_info)
(195,)
(196,struct pseudo *pseudo)
(197,0)
(198,dir->directory_count)
(199,)
(200,buf.st_uid)
(201,buf.st_gid)
(202,dir_scan2(sub_dir, pseudo_ent->pseudo)
(203,)
(204,"Pseudo file \\"%s\\" is a "\n\\n\\t\\t\\t\\t\\t"pre-existing file in the filesystem "\n\\n\\t\\t\\t\\t\\t"being appended to.")
(205,pseudo_ent)
(206,buf->st_mode)
(207,pseudo_ent->dev)
(208,NULL)
(209,inode_info)
(210,dir_ent = scan2_readdir(dir, dir_ent)
(211,dev)
(212,if(res == -1)
(213,pseudo_ent->name)
(214,buf.st_gid = pseudo_ent->dev->gid)
(215,pseudo_ent->dev)
(216,sub_dir)
(217,uid)
(218,pseudo_ent->dev)
(219,pseudo_ent)
(220,root_entry)
(221,strdup(subpathname(dir_ent)
(222,"Pseudo modify file \\"%s\\" does "\n\\n\\t\\t\\t\\t\\t"not exist in source filesystem.")
(223,dir_ent)
(224,continue;)
(225,subpath)
(226,pseudo_ent)
(227,while((dir_ent = scan2_readdir(dir, dir_ent)
(228,pseudo_ent)
(229,buf)
(230,buf.st_mode = pseudo_ent->dev->mode)
(231,depth)
(232,dir_ent->inode)
(233,st_size)
(234,(buf->st_mode & S_IFMT)
(235,)
(236,)
(237,buf = &dir_ent->inode->buf)
(238,pseudo_ent->name)
(239,pseudo_ent->dev->uid)
(240,sub_dir == NULL)
(241,pseudo_ent->dev->type)
(242,dev)
(243,dir_ent->inode)
(244,"  Ignoring.\\n")
(245,buf)
(246,buf.st_ino = pseudo_ino ++)
(247,ERROR_START("Pseudo modify file \\"%s\\" does "\n\\n\\t\\t\\t\\t\\t"not exist in source filesystem.",\n\\n\\t\\t\\t\\t\\tpseudo_ent->pathname)
(248,dir)
(249,", skipping...\\n")
(250,)
(251,PSEUDO_FILE_OTHER)
(252,ERROR_EXIT(", skipping...\\n")
(253,pseudo_ent->pathname)
(254,dir_ent->inode)
(255,name)
(256,pseudo_ent)
(257,pathname)
(258,memset(&buf, 0, sizeof(buf)
(259,dir_ent->name)
(260,name)
(261,minor)
(262,"Could not create pseudo directory "\n\\n\\t\\t\\t\\t\\t"\\"%s\\"")
(263,st_uid)
(264,buf->st_mode & S_IFMT)
(265,pseudo_ent->dev)
(266,1)
(267,buf)
(268,dir->depth)
(269,st_gid)
(270,continue;)
(271,pseudo_ent->dev->mode)
(272,pseudo_ino --)
(273,res)
(274,pseudo_ent->dev->uid)
(275,*dir_ent =\n\\n\\t\\t\\t\\tcreate_dir_entry(pseudo_ent->name, NULL,\n\\n\\t\\t\\t\\t\\t\\tpseudo_ent->pathname, dir)
(276,pseudo_ent->dev)
(277,st_size)
(278,pseudo_subdir(name, pseudo)
(279,if(dir_ent->inode->root_entry)
(280,pseudo)
(281,pseudo_ino)
(282,struct dir_info *dir)
(283,"Pseudo file \\"%s\\" exists in "\n\\n\\t\\t\\t\\t\\t"source filesystem \\"%s\\".")
(284,pseudo)
(285,S_IFDIR)
(286,pseudo_ent)
(287,add_dir_entry2(pseudo_ent->name, NULL,\n\\n\\t\\t\\t\\tpseudo_ent->pathname, NULL,\n\\n\\t\\t\\t\\tlookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
(288,if(sub_dir == NULL)
(289,dir)
(290,pseudo_ent->dev)
(291,&inode_info->buf)
(292,pseudo_ent)
(293,buf.st_uid = pseudo_ent->dev->uid)
(294,pseudo_ent)
(295,st_rdev)
(296,buf)
(297,pseudo_ino --)
(298,dir)
(299,dir_ent)
(300,pseudo_ino)
(301,pseudo_ent)
(302,pseudo_ent->dev->major)
(303,NULL)
(304,buf)
(305,pseudo_ent->name)
(306,subpath)
(307,dev)
(308,pseudo_ent->pathname)
(309,scan1_opendir("", subpath,\n\\n\\t\\t\\t\\t\\t\\tdir->depth + 1)
(310,buf.st_mode)
(311,pseudo_ent->dev)
(312,dev)
(313,pseudo_ent)
(314,inode_info)
(315,pseudo_ent->dev->type)
(316,&buf)
(317,"  Ignoring.\\n")
(318,0)
(319,dir_ent)
(320,makedev(pseudo_ent->dev->major,\n\\n\\t\\t\\tpseudo_ent->dev->minor)
(321,dir_ent)
(322,buf.st_mtime = time(NULL)
(323,name)
(324,pseudo_ent)
(325,0)
(326,dir_ent)
(327,RET)
(328,)
(329,dir_ent)
(330,buf)
(331,buf2.st_size)
(332,pseudo_ent)
(333,NULL)
(334,eval_actions(dir_ent)
(335,pseudo_ino)
(336,dir_ent->inode->buf)
(337,)
(338,PSEUDO_FILE_OTHER)
(339,pseudo_ent)
(340,dir_ent)
(341,dir_ent)
(342,ERROR_EXIT("  Ignoring.\\n")
(343,pseudo_ent->dev)
(344,ERROR_EXIT("\\nIgnoring, exclude it (-e/-ef)
(345,type)
(346,lookup_inode2(&buf, PSEUDO_FILE_OTHER, 0)
(347,st_mode)
(348,pathname(dir_ent)
(349,-1)
(350,st_mode)
(351,pseudo_ent->pathname)
(352,continue;)
(353,pseudo_ent)
(354,pseudo_ent->dev->gid)
(355,res)
(356,(buf->st_mode & S_IFMT)
(357,sub_dir)
(358,pseudo_ino)
(359,ERROR_START("Pseudo file \\"%s\\" exists in "\n\\n\\t\\t\\t\\t\\t"source filesystem \\"%s\\".",\n\\n\\t\\t\\t\\t\\tpseudo_ent->pathname,\n\\n\\t\\t\\t\\t\\tpathname(dir_ent)
(360,pseudo_ent->dev)
(361,NULL)
(362,pseudo_readdir(pseudo)
(363,*buf = &inode_info->buf)
(364,pseudo_ent)
(365,sub_dir)
(366,buf)
(367,ERROR_EXIT(", skipping...\\n")
(368,S_IFMT)
(369,buf2)
(370,pseudo_ent->dev->minor)
(371,dir_ent)
(372,ERROR_START("Could not create pseudo directory "\n\\n\\t\\t\\t\\t\\t"\\"%s\\"", pseudo_ent->pathname)
(373,res == -1)
(374,mode)
(375,1)
(376,sizeof(buf)
(377,)
(378,buf)
(379,name)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^