-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(45,18,0)
(21,40,0)
(13,33,0)
(19,23,0)
(23,2,0)
(22,4,0)
(35,0,0)
(15,6,0)
(34,46,0)
(41,12,0)
(48,28,0)
(11,12,0)
(29,13,0)
(16,40,0)
(47,31,0)
(14,9,0)
(25,47,0)
(40,24,0)
(44,47,0)
(8,7,0)
(4,17,0)
(39,24,0)
(5,9,0)
(5,40,0)
(28,7,0)
(4,22,0)
(29,24,0)
(13,18,0)
(46,40,0)
(20,21,0)
(40,9,0)
(12,40,0)
(13,47,0)
(38,0,0)
(28,18,0)
(1,46,0)
(27,15,0)
(13,29,0)
(18,0,0)
(37,33,0)
(7,28,0)
(24,29,0)
(12,9,0)
(33,13,0)
(32,13,0)
(49,18,0)
(36,0,0)
(26,5,0)
(21,9,0)
(28,47,0)
(24,40,0)
(43,23,0)
(3,22,0)
(24,39,0)
(30,42,1)
(3,46,1)
(30,5,1)
(29,13,1)
(41,46,1)
(5,40,1)
(10,18,1)
(42,10,1)
(18,49,1)
(27,28,1)
(20,12,1)
(16,28,1)
(1,40,1)
(7,8,1)
(47,25,1)
(41,4,1)
(33,37,1)
(46,34,1)
(8,48,1)
(28,18,1)
(44,10,1)
(28,7,1)
(4,22,1)
(34,1,1)
(37,32,1)
(13,33,1)
(12,11,1)
(25,44,1)
(24,29,1)
(46,40,1)
(15,27,1)
(40,24,1)
(21,20,1)
(42,47,1)
(26,21,1)
(21,40,1)
(28,47,1)
(13,47,1)
(11,41,1)
(32,16,1)
(13,18,1)
(24,39,1)
(12,40,1)
(5,26,1)
(49,45,1)
(48,42,1)
(22,3,1)
(30,15,1)
(15,28,2)
(5,28,2)
(32,28,2)
(4,22,2)
(12,40,2)
(25,10,2)
(11,28,2)
(7,42,2)
(24,29,2)
(26,28,2)
(40,24,2)
(20,28,2)
(22,46,2)
(8,42,2)
(48,42,2)
(34,28,2)
(28,18,2)
(44,10,2)
(3,46,2)
(29,28,2)
(27,28,2)
(28,42,2)
(4,46,2)
(46,28,2)
(41,28,2)
(37,28,2)
(29,13,2)
(28,47,2)
(5,40,2)
(13,18,2)
(47,10,2)
(40,28,2)
(24,28,2)
(33,28,2)
(21,28,2)
(13,33,2)
(28,7,2)
(13,28,2)
(24,39,2)
(16,28,2)
(13,47,2)
(12,28,2)
(1,28,2)
(21,40,2)
(46,40,2)
-----------------------------------
(0,)
(1,myString)
(2,)
(3,1)
(4,exit(-1)
(5,free(myString)
(6,)
(7,strlen(HELLO_STRING)
(8,HELLO_STRING)
(9,)
(10,GLOBAL_CONST_TRUE)
(11,HELLO_STRING)
(12,strcpy(myString, HELLO_STRING)
(13,data*sizeof(char)
(14,if (myString == NULL)
(15,printLine("Input is less than the length of the source string")
(16,myString)
(17,)
(18,data = 0)
(19,if (data > strlen(HELLO_STRING)
(20,myString)
(21,printLine(myString)
(22,-1)
(23,)
(24,(char *)
(25,20)
(26,myString)
(27,"Input is less than the length of the source string")
(28,data > strlen(HELLO_STRING)
(29,malloc(data*sizeof(char)
(30,RET)
(31,)
(32,data)
(33,sizeof(char)
(34,NULL)
(35,if(GLOBAL_CONST_TRUE)
(36,data)
(37,char)
(38,if(GLOBAL_CONST_TRUE)
(39,char *)
(40,myString = (char *)
(41,myString)
(42,GLOBAL_CONST_TRUE)
(43,myString)
(44,data)
(45,data)
(46,myString == NULL)
(47,data = 20)
(48,data)
(49,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^