-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_sleep_15_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
34,35
35,36
35,37
36,37
40,41
40,42
42,43
42,44
42,45
42,46
42,47
42,48
42,49
43,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,28,31,32,33,37,38,39,41,44,48,50,54,55,56,57,61,62,63
-----computeFrom-----
12,13
12,14
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_sleep_15_bad(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE400_Resource_Exhaustion__fscanf_sleep_15_bad()
CWE400_Resource_Exhaustion__fscanf_sleep_15_bad
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(9,7,0)
(24,31,0)
(20,7,0)
(23,27,0)
(4,10,0)
(2,31,0)
(6,9,0)
(7,18,0)
(29,26,0)
(32,18,0)
(12,2,0)
(9,10,0)
(22,27,0)
(2,18,0)
(19,31,0)
(14,10,0)
(17,31,0)
(25,31,0)
(18,13,0)
(18,27,0)
(7,9,0)
(11,10,0)
(30,17,0)
(16,19,0)
(13,18,0)
(5,31,0)
(26,10,0)
(33,27,0)
(8,9,0)
(3,31,0)
(15,10,0)
(1,13,0)
(21,5,1)
(7,20,1)
(8,6,1)
(17,30,1)
(2,12,1)
(18,13,1)
(13,1,1)
(14,9,1)
(0,14,1)
(2,18,1)
(5,17,1)
(30,0,1)
(26,29,1)
(25,19,1)
(6,28,1)
(7,18,1)
(0,4,1)
(21,25,1)
(12,0,1)
(4,26,1)
(29,28,1)
(9,7,1)
(28,18,1)
(1,32,1)
(16,2,1)
(19,16,1)
(20,8,1)
(9,7,2)
(19,0,2)
(9,28,2)
(16,0,2)
(12,0,2)
(8,28,2)
(26,28,2)
(18,13,2)
(7,28,2)
(2,18,2)
(14,28,2)
(29,28,2)
(30,0,2)
(5,0,2)
(7,18,2)
(2,0,2)
(17,0,2)
(20,28,2)
(4,28,2)
(25,0,2)
(6,28,2)
-----------------------------------
(0,7)
(1,1)
(2,SLEEP(count)
(3,case 7:)
(4,break;)
(5,break;)
(6,stdin)
(7,&count)
(8,"%d")
(9,fscanf(stdin, "%d", &count)
(10,)
(11,case 6:)
(12,count)
(13,-1)
(14,break;)
(15,default:)
(16,"Sleep time possibly too long")
(17,printLine("Benign, fixed string")
(18,count = -1)
(19,printLine("Sleep time possibly too long")
(20,count)
(21,RET)
(22,count)
(23,switch(7)
(24,default:)
(25,break;)
(26,printLine("Benign, fixed string")
(27,)
(28,6)
(29,"Benign, fixed string")
(30,"Benign, fixed string")
(31,)
(32,count)
(33,switch(6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^