-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_14_bad()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
57,58
59,60
62,63
63,64
63,65
64,65
66,67
68,69
68,70
69,70
69,71
70,71
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,52,54,58,60,61,65,67,71,72,74
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
43,44
43,45
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_14_bad(){    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_14_bad()
CWE401_Memory_Leak__char_malloc_14_bad
{    char * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,3,0)
(3,12,0)
(24,0,0)
(20,12,0)
(0,23,0)
(4,6,0)
(15,32,0)
(1,28,0)
(13,24,0)
(27,34,0)
(28,34,0)
(16,32,0)
(7,16,0)
(6,30,0)
(6,4,0)
(3,30,0)
(36,9,0)
(33,32,0)
(27,9,0)
(22,2,0)
(6,9,0)
(19,8,0)
(0,24,0)
(2,9,0)
(30,6,0)
(9,6,0)
(30,3,0)
(17,2,0)
(29,8,0)
(14,28,0)
(5,3,0)
(10,32,0)
(18,31,0)
(28,9,0)
(21,16,0)
(26,27,0)
(25,34,0)
(9,34,0)
(11,31,0)
(18,11,1)
(22,17,1)
(19,29,1)
(3,12,1)
(27,9,1)
(11,8,1)
(14,2,1)
(2,9,1)
(8,19,1)
(24,13,1)
(17,9,1)
(30,3,1)
(16,21,1)
(0,24,1)
(36,8,1)
(26,28,1)
(27,26,1)
(35,31,1)
(21,7,1)
(2,22,1)
(12,20,1)
(6,30,1)
(14,0,1)
(20,5,1)
(6,4,1)
(11,27,1)
(1,14,1)
(5,36,1)
(28,9,1)
(9,6,1)
(31,18,1)
(28,1,1)
(13,2,1)
(29,16,1)
(1,8,2)
(6,30,2)
(2,8,2)
(36,8,2)
(3,8,2)
(28,9,2)
(3,12,2)
(27,9,2)
(24,2,2)
(26,8,2)
(17,8,2)
(5,8,2)
(28,8,2)
(6,8,2)
(27,8,2)
(12,8,2)
(30,8,2)
(22,8,2)
(20,8,2)
(9,6,2)
(14,8,2)
(6,4,2)
(30,3,2)
(2,9,2)
(9,8,2)
(0,2,2)
(13,2,2)
(0,24,2)
-----------------------------------
(0,exit(-1)
(1,"A String")
(2,data == NULL)
(3,100*sizeof(char)
(4,char *)
(5,100)
(6,(char *)
(7,data)
(8,globalFive==5)
(9,data = (char *)
(10,if(globalFive==5)
(11,globalFive)
(12,sizeof(char)
(13,1)
(14,data)
(15,data)
(16,data = NULL)
(17,data)
(18,5)
(19,5)
(20,char)
(21,NULL)
(22,NULL)
(23,)
(24,-1)
(25,if (data == NULL)
(26,data)
(27,printLine(data)
(28,strcpy(data, "A String")
(29,globalFive)
(30,malloc(100*sizeof(char)
(31,globalFive==5)
(32,)
(33,if(globalFive==5)
(34,)
(35,RET)
(36,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^