-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink(size_t dataArray[])
{
    size_t data = dataArray[2];
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
32,34
33,34
35,36
35,37
36,37
38,39
40,41
40,42
41,42
44,45
44,46
44,47
44,48
44,49
45,46
46,47
46,48
47,48
49,50
49,51
50,51
50,52
52,53
54,55
54,56
55,56
57,58
57,59
58,59
60,61
61,62
61,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
78,81
79,80
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,34,37,39,42,43,48,51,53,56,59,62,63,67,69,74,76,80,82,84,88,90,94,96,101,102
-----computeFrom-----
31,32
31,33
32,33
32,34
40,41
40,42
46,47
46,48
57,58
57,59
65,66
65,67
-----guardedBy-----
39,84
42,59
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink(size_t dataArray[]){    size_t data = dataArray[2];    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_66b_goodB2GSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    size_t data = dataArray[2];    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(18,47,0)
(30,32,0)
(6,5,0)
(31,20,0)
(20,32,0)
(2,47,0)
(35,18,0)
(6,19,0)
(26,9,0)
(17,32,0)
(28,7,0)
(15,45,0)
(10,19,0)
(0,1,0)
(13,16,0)
(7,28,0)
(34,1,0)
(8,28,0)
(46,6,0)
(40,4,0)
(44,5,0)
(21,26,0)
(0,7,0)
(43,39,0)
(42,0,0)
(25,6,0)
(12,37,0)
(28,5,0)
(9,26,0)
(5,13,0)
(41,13,0)
(43,32,0)
(14,39,0)
(6,25,0)
(32,39,0)
(38,28,0)
(37,12,0)
(5,47,0)
(0,5,0)
(45,23,0)
(36,4,0)
(25,12,0)
(13,5,0)
(3,43,0)
(7,0,0)
(32,12,0)
(29,18,0)
(4,32,0)
(17,39,0)
(11,13,0)
(12,32,0)
(33,17,0)
(20,39,0)
(19,6,0)
(12,25,0)
(24,17,0)
(1,0,0)
(9,27,0)
(32,12,1)
(6,19,1)
(4,32,1)
(17,24,1)
(5,13,1)
(28,38,1)
(21,4,1)
(20,31,1)
(1,34,1)
(7,28,1)
(25,6,1)
(9,26,1)
(0,1,1)
(8,0,1)
(33,9,1)
(7,0,1)
(22,45,1)
(30,7,1)
(20,32,1)
(6,5,1)
(36,40,1)
(11,41,1)
(42,5,1)
(24,33,1)
(3,17,1)
(10,46,1)
(34,42,1)
(43,32,1)
(19,10,1)
(41,44,1)
(43,3,1)
(12,25,1)
(28,5,1)
(13,16,1)
(46,30,1)
(13,11,1)
(40,32,1)
(33,4,1)
(4,36,1)
(38,8,1)
(15,7,1)
(45,15,1)
(12,37,1)
(0,5,1)
(26,21,1)
(22,20,1)
(17,32,1)
(31,43,1)
(12,25,2)
(3,7,2)
(28,5,2)
(25,6,2)
(20,7,2)
(12,7,2)
(8,0,2)
(36,7,2)
(43,7,2)
(32,7,2)
(32,12,2)
(20,32,2)
(9,4,2)
(26,4,2)
(6,19,2)
(4,7,2)
(43,32,2)
(15,7,2)
(13,16,2)
(21,4,2)
(33,7,2)
(7,0,2)
(28,0,2)
(7,28,2)
(25,7,2)
(0,5,2)
(38,0,2)
(31,7,2)
(17,32,2)
(40,7,2)
(19,7,2)
(45,7,2)
(24,7,2)
(6,7,2)
(10,7,2)
(46,7,2)
(6,5,2)
(5,13,2)
(30,7,2)
(0,1,2)
(12,37,2)
(9,26,2)
(17,7,2)
(4,32,2)
-----------------------------------
(0,data > strlen(HELLO_STRING)
(1,strlen(HELLO_STRING)
(2,data)
(3,myString)
(4,myString == NULL)
(5,data = dataArray[2])
(6,data*sizeof(char)
(7,data > strlen(HELLO_STRING)
(8,data)
(9,exit(-1)
(10,char)
(11,2)
(12,(char *)
(13,dataArray[2])
(14,if (myString == NULL)
(15,"Input is less than the length of the source string or too large")
(16,size_t dataArray[])
(17,strcpy(myString, HELLO_STRING)
(18,)
(19,sizeof(char)
(20,free(myString)
(21,1)
(22,RET)
(23,)
(24,HELLO_STRING)
(25,malloc(data*sizeof(char)
(26,-1)
(27,)
(28,data < 100)
(29,if (data > strlen(HELLO_STRING)
(30,myString)
(31,myString)
(32,myString = (char *)
(33,myString)
(34,HELLO_STRING)
(35,myString)
(36,NULL)
(37,char *)
(38,100)
(39,)
(40,myString)
(41,dataArray)
(42,data)
(43,printLine(myString)
(44,data)
(45,printLine("Input is less than the length of the source string or too large")
(46,data)
(47,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^