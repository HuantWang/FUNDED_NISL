-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
37,38
37,39
40,41
40,42
40,43
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
49,51
49,52
49,53
49,54
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
57,58
59,60
59,61
60,61
62,63
62,64
63,64
65,66
66,67
66,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
84,85
86,87
88,89
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
-----nextToken-----
2,4,9,11,15,16,18,23,25,26,29,31,36,38,39,43,46,48,53,56,58,61,64,67,68,72,74,79,81,85,87,89,93,95,99,101,106,107
-----computeFrom-----
13,14
13,15
41,42
41,43
51,52
51,53
62,63
62,64
70,71
70,72
-----guardedBy-----
48,89
43,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
1
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(3,37,0)
(19,12,0)
(16,39,0)
(5,46,0)
(26,38,0)
(42,39,0)
(26,21,0)
(37,27,0)
(20,8,0)
(46,12,0)
(4,12,0)
(29,35,0)
(47,31,0)
(28,25,0)
(4,25,0)
(40,45,0)
(39,35,0)
(6,48,0)
(48,4,0)
(14,4,0)
(34,10,0)
(9,45,0)
(33,29,0)
(31,12,0)
(10,46,0)
(10,11,0)
(30,22,0)
(2,45,0)
(15,16,0)
(12,45,0)
(38,26,0)
(6,49,0)
(13,31,0)
(48,6,0)
(22,39,0)
(39,6,0)
(49,6,0)
(22,35,0)
(6,39,0)
(24,42,0)
(41,39,0)
(46,10,0)
(4,48,0)
(29,39,0)
(43,35,0)
(16,35,0)
(18,20,0)
(7,12,0)
(0,13,0)
(44,38,0)
(25,4,0)
(23,22,0)
(32,20,0)
(50,10,0)
(51,42,0)
(31,13,0)
(22,39,1)
(33,22,1)
(47,17,1)
(3,31,1)
(46,5,1)
(30,26,1)
(44,42,1)
(28,14,1)
(29,33,1)
(15,29,1)
(51,24,1)
(48,4,1)
(41,31,1)
(29,39,1)
(1,17,1)
(46,12,1)
(19,7,1)
(6,48,1)
(30,42,1)
(17,10,1)
(26,38,1)
(1,37,1)
(22,23,1)
(31,12,1)
(17,36,1)
(4,12,1)
(25,28,1)
(39,6,1)
(6,49,1)
(16,15,1)
(13,0,1)
(16,39,1)
(4,25,1)
(31,13,1)
(23,30,1)
(42,39,1)
(50,36,1)
(10,46,1)
(42,51,1)
(34,50,1)
(14,41,1)
(12,19,1)
(1,16,1)
(5,34,1)
(38,44,1)
(36,12,1)
(37,3,1)
(0,47,1)
(24,39,1)
(13,17,2)
(39,6,2)
(31,17,2)
(50,36,2)
(46,36,2)
(26,38,2)
(41,31,2)
(15,31,2)
(48,4,2)
(33,31,2)
(39,31,2)
(44,42,2)
(10,36,2)
(25,31,2)
(22,39,2)
(22,31,2)
(14,31,2)
(42,31,2)
(5,36,2)
(42,39,2)
(47,17,2)
(46,12,2)
(4,31,2)
(34,36,2)
(29,39,2)
(37,31,2)
(0,17,2)
(6,48,2)
(29,31,2)
(26,42,2)
(51,31,2)
(16,39,2)
(23,31,2)
(31,13,2)
(24,31,2)
(48,31,2)
(6,49,2)
(3,31,2)
(30,31,2)
(4,12,2)
(31,12,2)
(38,42,2)
(4,25,2)
(6,31,2)
(10,46,2)
(28,31,2)
(16,31,2)
-----------------------------------
(0,HELLO_STRING)
(1,RET)
(2,if(1)
(3,"Input is less than the length of the source string")
(4,data*sizeof(char)
(5,data)
(6,(char *)
(7,data)
(8,)
(9,if(1)
(10,fscanf(stdin, "%zu", &data)
(11,)
(12,data = 0)
(13,strlen(HELLO_STRING)
(14,data)
(15,myString)
(16,free(myString)
(17,1)
(18,myString)
(19,0)
(20,)
(21,)
(22,strcpy(myString, HELLO_STRING)
(23,HELLO_STRING)
(24,myString)
(25,sizeof(char)
(26,exit(-1)
(27,)
(28,char)
(29,printLine(myString)
(30,myString)
(31,data > strlen(HELLO_STRING)
(32,if (data > strlen(HELLO_STRING)
(33,myString)
(34,"%zu")
(35,)
(36,1)
(37,printLine("Input is less than the length of the source string")
(38,-1)
(39,myString = (char *)
(40,data)
(41,myString)
(42,myString == NULL)
(43,if (myString == NULL)
(44,1)
(45,)
(46,&data)
(47,data)
(48,malloc(data*sizeof(char)
(49,char *)
(50,stdin)
(51,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^