-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_02_bad()
{
    char * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
69,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,68,70
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_02_bad(){    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_02_bad()
CWE401_Memory_Leak__char_realloc_02_bad
{    char * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(24,0,0)
(32,18,0)
(16,14,0)
(2,7,0)
(4,24,0)
(7,2,0)
(30,26,0)
(33,7,0)
(22,19,0)
(9,5,0)
(17,21,0)
(7,19,0)
(33,18,0)
(31,21,0)
(19,21,0)
(27,5,0)
(31,19,0)
(14,19,0)
(13,26,0)
(18,25,0)
(7,33,0)
(5,21,0)
(18,33,0)
(25,18,0)
(33,24,0)
(26,13,0)
(19,7,0)
(20,0,0)
(8,14,0)
(15,25,0)
(28,0,0)
(5,19,0)
(6,31,0)
(11,0,0)
(1,24,0)
(3,33,0)
(13,12,0)
(23,24,1)
(7,33,1)
(15,32,1)
(33,18,1)
(30,14,1)
(26,30,1)
(3,22,1)
(13,26,1)
(22,23,1)
(14,19,1)
(31,19,1)
(27,14,1)
(25,15,1)
(18,25,1)
(10,31,1)
(29,10,1)
(31,6,1)
(27,13,1)
(19,7,1)
(7,2,1)
(14,16,1)
(1,4,1)
(5,19,1)
(8,19,1)
(33,24,1)
(9,27,1)
(5,9,1)
(16,8,1)
(10,23,1)
(32,3,1)
(24,1,1)
(6,5,1)
(14,19,2)
(19,7,2)
(22,23,2)
(31,23,2)
(7,33,2)
(33,23,2)
(13,26,2)
(13,14,2)
(32,23,2)
(7,2,2)
(26,14,2)
(6,23,2)
(3,23,2)
(30,14,2)
(16,23,2)
(27,23,2)
(5,19,2)
(8,23,2)
(7,23,2)
(15,23,2)
(33,24,2)
(5,23,2)
(9,23,2)
(33,18,2)
(25,23,2)
(31,19,2)
(18,25,2)
(14,23,2)
(18,23,2)
(19,23,2)
-----------------------------------
(0,)
(1,NULL)
(2,char *)
(3,data)
(4,data)
(5,strcpy(data, "A String")
(6,data)
(7,(char *)
(8,data)
(9,"A String")
(10,1)
(11,if(1)
(12,)
(13,exit(-1)
(14,data == NULL)
(15,char)
(16,NULL)
(17,if (data == NULL)
(18,100*sizeof(char)
(19,data = (char *)
(20,data)
(21,)
(22,data)
(23,1)
(24,data = NULL)
(25,sizeof(char)
(26,-1)
(27,data)
(28,if(1)
(29,RET)
(30,1)
(31,printLine(data)
(32,100)
(33,realloc(data, 100*sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^