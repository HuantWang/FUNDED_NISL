-----label-----
0
-----code-----
static int
sysctl_rack_clear(SYSCTL_HANDLER_ARGS)
{
	uint32_t stat;
	int32_t error;

	error = SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t));
	if (error || req->newptr == NULL)
		return error;

	error = SYSCTL_IN(req, &stat, sizeof(uint32_t));
	if (error)
		return (error);
	if (stat == 1) {
#ifdef INVARIANTS
		printf("Clearing RACK counters\n");
#endif
		counter_u64_zero(rack_badfr);
		counter_u64_zero(rack_badfr_bytes);
		counter_u64_zero(rack_rtm_prr_retran);
		counter_u64_zero(rack_rtm_prr_newdata);
		counter_u64_zero(rack_timestamp_mismatch);
		counter_u64_zero(rack_reorder_seen);
		counter_u64_zero(rack_tlp_tot);
		counter_u64_zero(rack_tlp_newdata);
		counter_u64_zero(rack_tlp_retran);
		counter_u64_zero(rack_tlp_retran_bytes);
		counter_u64_zero(rack_tlp_retran_fail);
		counter_u64_zero(rack_to_tot);
		counter_u64_zero(rack_to_arm_rack);
		counter_u64_zero(rack_to_arm_tlp);
		counter_u64_zero(rack_paced_segments);
		counter_u64_zero(rack_unpaced_segments);
		counter_u64_zero(rack_saw_enobuf);
		counter_u64_zero(rack_saw_enetunreach);
		counter_u64_zero(rack_to_alloc_hard);
		counter_u64_zero(rack_to_alloc_emerg);
		counter_u64_zero(rack_sack_proc_all);
		counter_u64_zero(rack_sack_proc_short);
		counter_u64_zero(rack_sack_proc_restart);
		counter_u64_zero(rack_to_alloc);
		counter_u64_zero(rack_alloc_limited_conns);
		counter_u64_zero(rack_split_limited);
		counter_u64_zero(rack_find_high);
		counter_u64_zero(rack_runt_sacks);
		counter_u64_zero(rack_used_tlpmethod);
		counter_u64_zero(rack_used_tlpmethod2);
		counter_u64_zero(rack_enter_tlp_calc);
		counter_u64_zero(rack_progress_drops);
		counter_u64_zero(rack_tlp_does_nada);
	}
	rack_clear_counter = 0;
	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
27,31
28,29
30,31
32,33
33,34
35,36
36,37
36,38
37,38
40,41
40,42
41,42
41,43
42,43
44,45
44,46
45,46
45,47
46,47
49,50
51,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
64,65
66,67
67,68
67,69
68,69
71,72
71,73
72,73
74,75
75,76
76,77
78,79
78,80
79,80
79,81
80,81
83,84
83,85
83,86
83,87
83,88
83,89
83,90
83,91
83,92
83,93
83,94
83,95
83,96
83,97
83,98
83,99
83,100
83,101
83,102
83,103
83,104
83,105
83,106
83,107
83,108
83,109
83,110
83,111
83,112
83,113
83,114
83,115
83,116
84,85
85,86
85,87
86,87
88,89
89,90
91,92
92,93
92,94
93,94
95,96
96,97
98,99
99,100
99,101
100,101
102,103
103,104
105,106
106,107
106,108
107,108
109,110
110,111
112,113
113,114
113,115
114,115
116,117
117,118
119,120
120,121
120,122
121,122
123,124
124,125
126,127
127,128
127,129
128,129
130,131
131,132
133,134
134,135
134,136
135,136
137,138
138,139
140,141
141,142
141,143
142,143
144,145
145,146
147,148
148,149
148,150
149,150
151,152
152,153
154,155
155,156
155,157
156,157
158,159
159,160
161,162
162,163
162,164
163,164
165,166
166,167
168,169
169,170
169,171
170,171
172,173
173,174
175,176
176,177
176,178
177,178
179,180
180,181
182,183
183,184
183,185
184,185
186,187
187,188
189,190
190,191
190,192
191,192
193,194
194,195
196,197
197,198
197,199
198,199
200,201
201,202
203,204
204,205
204,206
205,206
207,208
208,209
210,211
211,212
211,213
212,213
214,215
215,216
217,218
218,219
218,220
219,220
221,222
222,223
224,225
225,226
225,227
226,227
228,229
229,230
231,232
232,233
232,234
233,234
235,236
236,237
238,239
239,240
239,241
240,241
242,243
243,244
245,246
246,247
246,248
247,248
249,250
250,251
252,253
253,254
253,255
254,255
256,257
257,258
259,260
260,261
260,262
261,262
263,264
264,265
266,267
267,268
267,269
268,269
270,271
271,272
273,274
274,275
274,276
275,276
277,278
278,279
280,281
281,282
281,283
282,283
284,285
285,286
287,288
288,289
288,290
289,290
291,292
292,293
294,295
295,296
295,297
296,297
298,299
299,300
301,302
302,303
302,304
303,304
305,306
306,307
308,309
309,310
309,311
310,311
312,313
313,314
315,316
316,317
316,318
317,318
320,321
321,322
-----nextToken-----
2,4,7,9,14,16,20,22,26,29,31,34,38,39,43,47,48,50,53,57,60,62,65,69,70,73,77,81,82,87,90,94,97,101,104,108,111,115,118,122,125,129,132,136,139,143,146,150,153,157,160,164,167,171,174,178,181,185,188,192,195,199,202,206,209,213,216,220,223,227,230,234,237,241,244,248,251,255,258,262,265,269,272,276,279,283,286,290,293,297,300,304,307,311,314,318,319,322
-----computeFrom-----
24,25
24,26
41,42
41,43
44,45
44,46
55,56
55,57
79,80
79,81
316,317
316,318
-----guardedBy-----
43,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intsysctl_rack_clear(SYSCTL_HANDLER_ARGS){	uint32_t stat;	int32_t error;	error = SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t));	if (error || req->newptr == NULL)		return error;	error = SYSCTL_IN(req, &stat, sizeof(uint32_t));	if (error)		return (error);	if (stat == 1) {#ifdef INVARIANTS		printf("Clearing RACK counters\n");#endif		counter_u64_zero(rack_badfr);		counter_u64_zero(rack_badfr_bytes);		counter_u64_zero(rack_rtm_prr_retran);		counter_u64_zero(rack_rtm_prr_newdata);		counter_u64_zero(rack_timestamp_mismatch);		counter_u64_zero(rack_reorder_seen);		counter_u64_zero(rack_tlp_tot);		counter_u64_zero(rack_tlp_newdata);		counter_u64_zero(rack_tlp_retran);		counter_u64_zero(rack_tlp_retran_bytes);		counter_u64_zero(rack_tlp_retran_fail);		counter_u64_zero(rack_to_tot);		counter_u64_zero(rack_to_arm_rack);		counter_u64_zero(rack_to_arm_tlp);		counter_u64_zero(rack_paced_segments);		counter_u64_zero(rack_unpaced_segments);		counter_u64_zero(rack_saw_enobuf);		counter_u64_zero(rack_saw_enetunreach);		counter_u64_zero(rack_to_alloc_hard);		counter_u64_zero(rack_to_alloc_emerg);		counter_u64_zero(rack_sack_proc_all);		counter_u64_zero(rack_sack_proc_short);		counter_u64_zero(rack_sack_proc_restart);		counter_u64_zero(rack_to_alloc);		counter_u64_zero(rack_alloc_limited_conns);		counter_u64_zero(rack_split_limited);		counter_u64_zero(rack_find_high);		counter_u64_zero(rack_runt_sacks);		counter_u64_zero(rack_used_tlpmethod);		counter_u64_zero(rack_used_tlpmethod2);		counter_u64_zero(rack_enter_tlp_calc);		counter_u64_zero(rack_progress_drops);		counter_u64_zero(rack_tlp_does_nada);	}	rack_clear_counter = 0;	return (0);}
static int
sysctl_rack_clear(SYSCTL_HANDLER_ARGS)
sysctl_rack_clear
SYSCTL_HANDLER_ARGS
SYSCTL_HANDLER_ARGS
SYSCTL_HANDLER_ARGS


{	uint32_t stat;	int32_t error;	error = SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t));	if (error || req->newptr == NULL)		return error;	error = SYSCTL_IN(req, &stat, sizeof(uint32_t));	if (error)		return (error);	if (stat == 1) {#ifdef INVARIANTS		printf("Clearing RACK counters\n");#endif		counter_u64_zero(rack_badfr);		counter_u64_zero(rack_badfr_bytes);		counter_u64_zero(rack_rtm_prr_retran);		counter_u64_zero(rack_rtm_prr_newdata);		counter_u64_zero(rack_timestamp_mismatch);		counter_u64_zero(rack_reorder_seen);		counter_u64_zero(rack_tlp_tot);		counter_u64_zero(rack_tlp_newdata);		counter_u64_zero(rack_tlp_retran);		counter_u64_zero(rack_tlp_retran_bytes);		counter_u64_zero(rack_tlp_retran_fail);		counter_u64_zero(rack_to_tot);		counter_u64_zero(rack_to_arm_rack);		counter_u64_zero(rack_to_arm_tlp);		counter_u64_zero(rack_paced_segments);		counter_u64_zero(rack_unpaced_segments);		counter_u64_zero(rack_saw_enobuf);		counter_u64_zero(rack_saw_enetunreach);		counter_u64_zero(rack_to_alloc_hard);		counter_u64_zero(rack_to_alloc_emerg);		counter_u64_zero(rack_sack_proc_all);		counter_u64_zero(rack_sack_proc_short);		counter_u64_zero(rack_sack_proc_restart);		counter_u64_zero(rack_to_alloc);		counter_u64_zero(rack_alloc_limited_conns);		counter_u64_zero(rack_split_limited);		counter_u64_zero(rack_find_high);		counter_u64_zero(rack_runt_sacks);		counter_u64_zero(rack_used_tlpmethod);		counter_u64_zero(rack_used_tlpmethod2);		counter_u64_zero(rack_enter_tlp_calc);		counter_u64_zero(rack_progress_drops);		counter_u64_zero(rack_tlp_does_nada);	}	rack_clear_counter = 0;	return (0);}
uint32_t stat;
uint32_t stat;
uint32_t
uint32_t
stat
stat
int32_t error;
int32_t error;
int32_t
int32_t
error
error
error = SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t));
error = SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t))
error
error
SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t))
SYSCTL_OUT
SYSCTL_OUT
req
req
&rack_clear_counter
rack_clear_counter
rack_clear_counter
sizeof(uint32_t)
uint32_t
uint32_t
uint32_t

if (error || req->newptr == NULL)		return error;
error || req->newptr == NULL
error
error
req->newptr == NULL
req->newptr
req
req
newptr
NULL
NULL
return error;
error
error
error = SYSCTL_IN(req, &stat, sizeof(uint32_t));
error = SYSCTL_IN(req, &stat, sizeof(uint32_t))
error
error
SYSCTL_IN(req, &stat, sizeof(uint32_t))
SYSCTL_IN
SYSCTL_IN
req
req
&stat
stat
stat
sizeof(uint32_t)
uint32_t
uint32_t
uint32_t

if (error)		return (error);
error
error
return (error);
(error)
error
error
if (stat == 1) {#ifdef INVARIANTS		printf("Clearing RACK counters\n");#endif		counter_u64_zero(rack_badfr);		counter_u64_zero(rack_badfr_bytes);		counter_u64_zero(rack_rtm_prr_retran);		counter_u64_zero(rack_rtm_prr_newdata);		counter_u64_zero(rack_timestamp_mismatch);		counter_u64_zero(rack_reorder_seen);		counter_u64_zero(rack_tlp_tot);		counter_u64_zero(rack_tlp_newdata);		counter_u64_zero(rack_tlp_retran);		counter_u64_zero(rack_tlp_retran_bytes);		counter_u64_zero(rack_tlp_retran_fail);		counter_u64_zero(rack_to_tot);		counter_u64_zero(rack_to_arm_rack);		counter_u64_zero(rack_to_arm_tlp);		counter_u64_zero(rack_paced_segments);		counter_u64_zero(rack_unpaced_segments);		counter_u64_zero(rack_saw_enobuf);		counter_u64_zero(rack_saw_enetunreach);		counter_u64_zero(rack_to_alloc_hard);		counter_u64_zero(rack_to_alloc_emerg);		counter_u64_zero(rack_sack_proc_all);		counter_u64_zero(rack_sack_proc_short);		counter_u64_zero(rack_sack_proc_restart);		counter_u64_zero(rack_to_alloc);		counter_u64_zero(rack_alloc_limited_conns);		counter_u64_zero(rack_split_limited);		counter_u64_zero(rack_find_high);		counter_u64_zero(rack_runt_sacks);		counter_u64_zero(rack_used_tlpmethod);		counter_u64_zero(rack_used_tlpmethod2);		counter_u64_zero(rack_enter_tlp_calc);		counter_u64_zero(rack_progress_drops);		counter_u64_zero(rack_tlp_does_nada);	}
stat == 1
stat
stat
1
{#ifdef INVARIANTS		printf("Clearing RACK counters\n");#endif		counter_u64_zero(rack_badfr);		counter_u64_zero(rack_badfr_bytes);		counter_u64_zero(rack_rtm_prr_retran);		counter_u64_zero(rack_rtm_prr_newdata);		counter_u64_zero(rack_timestamp_mismatch);		counter_u64_zero(rack_reorder_seen);		counter_u64_zero(rack_tlp_tot);		counter_u64_zero(rack_tlp_newdata);		counter_u64_zero(rack_tlp_retran);		counter_u64_zero(rack_tlp_retran_bytes);		counter_u64_zero(rack_tlp_retran_fail);		counter_u64_zero(rack_to_tot);		counter_u64_zero(rack_to_arm_rack);		counter_u64_zero(rack_to_arm_tlp);		counter_u64_zero(rack_paced_segments);		counter_u64_zero(rack_unpaced_segments);		counter_u64_zero(rack_saw_enobuf);		counter_u64_zero(rack_saw_enetunreach);		counter_u64_zero(rack_to_alloc_hard);		counter_u64_zero(rack_to_alloc_emerg);		counter_u64_zero(rack_sack_proc_all);		counter_u64_zero(rack_sack_proc_short);		counter_u64_zero(rack_sack_proc_restart);		counter_u64_zero(rack_to_alloc);		counter_u64_zero(rack_alloc_limited_conns);		counter_u64_zero(rack_split_limited);		counter_u64_zero(rack_find_high);		counter_u64_zero(rack_runt_sacks);		counter_u64_zero(rack_used_tlpmethod);		counter_u64_zero(rack_used_tlpmethod2);		counter_u64_zero(rack_enter_tlp_calc);		counter_u64_zero(rack_progress_drops);		counter_u64_zero(rack_tlp_does_nada);	}
counter_u64_zero(rack_badfr);
counter_u64_zero(rack_badfr);
counter_u64_zero
counter_u64_zero
(rack_badfr)
rack_badfr
rack_badfr
counter_u64_zero(rack_badfr_bytes);
counter_u64_zero(rack_badfr_bytes);
counter_u64_zero
counter_u64_zero
(rack_badfr_bytes)
rack_badfr_bytes
rack_badfr_bytes
counter_u64_zero(rack_rtm_prr_retran);
counter_u64_zero(rack_rtm_prr_retran);
counter_u64_zero
counter_u64_zero
(rack_rtm_prr_retran)
rack_rtm_prr_retran
rack_rtm_prr_retran
counter_u64_zero(rack_rtm_prr_newdata);
counter_u64_zero(rack_rtm_prr_newdata);
counter_u64_zero
counter_u64_zero
(rack_rtm_prr_newdata)
rack_rtm_prr_newdata
rack_rtm_prr_newdata
counter_u64_zero(rack_timestamp_mismatch);
counter_u64_zero(rack_timestamp_mismatch);
counter_u64_zero
counter_u64_zero
(rack_timestamp_mismatch)
rack_timestamp_mismatch
rack_timestamp_mismatch
counter_u64_zero(rack_reorder_seen);
counter_u64_zero(rack_reorder_seen);
counter_u64_zero
counter_u64_zero
(rack_reorder_seen)
rack_reorder_seen
rack_reorder_seen
counter_u64_zero(rack_tlp_tot);
counter_u64_zero(rack_tlp_tot);
counter_u64_zero
counter_u64_zero
(rack_tlp_tot)
rack_tlp_tot
rack_tlp_tot
counter_u64_zero(rack_tlp_newdata);
counter_u64_zero(rack_tlp_newdata);
counter_u64_zero
counter_u64_zero
(rack_tlp_newdata)
rack_tlp_newdata
rack_tlp_newdata
counter_u64_zero(rack_tlp_retran);
counter_u64_zero(rack_tlp_retran);
counter_u64_zero
counter_u64_zero
(rack_tlp_retran)
rack_tlp_retran
rack_tlp_retran
counter_u64_zero(rack_tlp_retran_bytes);
counter_u64_zero(rack_tlp_retran_bytes);
counter_u64_zero
counter_u64_zero
(rack_tlp_retran_bytes)
rack_tlp_retran_bytes
rack_tlp_retran_bytes
counter_u64_zero(rack_tlp_retran_fail);
counter_u64_zero(rack_tlp_retran_fail);
counter_u64_zero
counter_u64_zero
(rack_tlp_retran_fail)
rack_tlp_retran_fail
rack_tlp_retran_fail
counter_u64_zero(rack_to_tot);
counter_u64_zero(rack_to_tot);
counter_u64_zero
counter_u64_zero
(rack_to_tot)
rack_to_tot
rack_to_tot
counter_u64_zero(rack_to_arm_rack);
counter_u64_zero(rack_to_arm_rack);
counter_u64_zero
counter_u64_zero
(rack_to_arm_rack)
rack_to_arm_rack
rack_to_arm_rack
counter_u64_zero(rack_to_arm_tlp);
counter_u64_zero(rack_to_arm_tlp);
counter_u64_zero
counter_u64_zero
(rack_to_arm_tlp)
rack_to_arm_tlp
rack_to_arm_tlp
counter_u64_zero(rack_paced_segments);
counter_u64_zero(rack_paced_segments);
counter_u64_zero
counter_u64_zero
(rack_paced_segments)
rack_paced_segments
rack_paced_segments
counter_u64_zero(rack_unpaced_segments);
counter_u64_zero(rack_unpaced_segments);
counter_u64_zero
counter_u64_zero
(rack_unpaced_segments)
rack_unpaced_segments
rack_unpaced_segments
counter_u64_zero(rack_saw_enobuf);
counter_u64_zero(rack_saw_enobuf);
counter_u64_zero
counter_u64_zero
(rack_saw_enobuf)
rack_saw_enobuf
rack_saw_enobuf
counter_u64_zero(rack_saw_enetunreach);
counter_u64_zero(rack_saw_enetunreach);
counter_u64_zero
counter_u64_zero
(rack_saw_enetunreach)
rack_saw_enetunreach
rack_saw_enetunreach
counter_u64_zero(rack_to_alloc_hard);
counter_u64_zero(rack_to_alloc_hard);
counter_u64_zero
counter_u64_zero
(rack_to_alloc_hard)
rack_to_alloc_hard
rack_to_alloc_hard
counter_u64_zero(rack_to_alloc_emerg);
counter_u64_zero(rack_to_alloc_emerg);
counter_u64_zero
counter_u64_zero
(rack_to_alloc_emerg)
rack_to_alloc_emerg
rack_to_alloc_emerg
counter_u64_zero(rack_sack_proc_all);
counter_u64_zero(rack_sack_proc_all);
counter_u64_zero
counter_u64_zero
(rack_sack_proc_all)
rack_sack_proc_all
rack_sack_proc_all
counter_u64_zero(rack_sack_proc_short);
counter_u64_zero(rack_sack_proc_short);
counter_u64_zero
counter_u64_zero
(rack_sack_proc_short)
rack_sack_proc_short
rack_sack_proc_short
counter_u64_zero(rack_sack_proc_restart);
counter_u64_zero(rack_sack_proc_restart);
counter_u64_zero
counter_u64_zero
(rack_sack_proc_restart)
rack_sack_proc_restart
rack_sack_proc_restart
counter_u64_zero(rack_to_alloc);
counter_u64_zero(rack_to_alloc);
counter_u64_zero
counter_u64_zero
(rack_to_alloc)
rack_to_alloc
rack_to_alloc
counter_u64_zero(rack_alloc_limited_conns);
counter_u64_zero(rack_alloc_limited_conns);
counter_u64_zero
counter_u64_zero
(rack_alloc_limited_conns)
rack_alloc_limited_conns
rack_alloc_limited_conns
counter_u64_zero(rack_split_limited);
counter_u64_zero(rack_split_limited);
counter_u64_zero
counter_u64_zero
(rack_split_limited)
rack_split_limited
rack_split_limited
counter_u64_zero(rack_find_high);
counter_u64_zero(rack_find_high);
counter_u64_zero
counter_u64_zero
(rack_find_high)
rack_find_high
rack_find_high
counter_u64_zero(rack_runt_sacks);
counter_u64_zero(rack_runt_sacks);
counter_u64_zero
counter_u64_zero
(rack_runt_sacks)
rack_runt_sacks
rack_runt_sacks
counter_u64_zero(rack_used_tlpmethod);
counter_u64_zero(rack_used_tlpmethod);
counter_u64_zero
counter_u64_zero
(rack_used_tlpmethod)
rack_used_tlpmethod
rack_used_tlpmethod
counter_u64_zero(rack_used_tlpmethod2);
counter_u64_zero(rack_used_tlpmethod2);
counter_u64_zero
counter_u64_zero
(rack_used_tlpmethod2)
rack_used_tlpmethod2
rack_used_tlpmethod2
counter_u64_zero(rack_enter_tlp_calc);
counter_u64_zero(rack_enter_tlp_calc);
counter_u64_zero
counter_u64_zero
(rack_enter_tlp_calc)
rack_enter_tlp_calc
rack_enter_tlp_calc
counter_u64_zero(rack_progress_drops);
counter_u64_zero(rack_progress_drops);
counter_u64_zero
counter_u64_zero
(rack_progress_drops)
rack_progress_drops
rack_progress_drops
counter_u64_zero(rack_tlp_does_nada);
counter_u64_zero(rack_tlp_does_nada);
counter_u64_zero
counter_u64_zero
(rack_tlp_does_nada)
rack_tlp_does_nada
rack_tlp_does_nada
rack_clear_counter = 0;
rack_clear_counter = 0
rack_clear_counter
rack_clear_counter
0
return (0);
(0)
0
-----joern-----
(84,23,0)
(58,82,0)
(109,10,0)
(56,52,0)
(67,82,0)
(93,81,0)
(18,30,0)
(50,82,0)
(28,107,0)
(73,91,0)
(111,13,0)
(66,10,0)
(22,82,0)
(91,82,0)
(70,10,0)
(98,57,0)
(9,67,0)
(70,7,0)
(106,33,0)
(15,85,0)
(80,8,0)
(18,70,0)
(43,44,0)
(31,96,0)
(92,107,0)
(85,82,0)
(101,100,0)
(47,82,0)
(0,82,0)
(57,92,0)
(49,30,0)
(69,6,0)
(86,82,0)
(39,10,0)
(2,10,0)
(108,6,0)
(59,82,0)
(48,39,0)
(51,82,0)
(2,92,0)
(44,82,0)
(96,82,0)
(26,70,0)
(110,10,0)
(94,83,0)
(76,2,0)
(60,61,0)
(79,22,0)
(63,100,0)
(92,57,0)
(89,38,0)
(48,83,0)
(32,82,0)
(33,82,0)
(100,39,0)
(1,7,0)
(18,105,0)
(6,83,0)
(55,72,0)
(78,53,0)
(21,7,0)
(74,5,0)
(42,82,0)
(104,51,0)
(87,10,0)
(100,63,0)
(14,82,0)
(46,14,0)
(19,64,0)
(90,86,0)
(11,32,0)
(71,63,0)
(24,82,0)
(40,42,0)
(53,82,0)
(27,88,0)
(103,58,0)
(52,82,0)
(100,97,0)
(62,47,0)
(107,92,0)
(36,82,0)
(7,10,0)
(5,82,0)
(64,82,0)
(88,82,0)
(30,39,0)
(97,100,0)
(99,72,0)
(23,82,0)
(12,10,0)
(102,25,0)
(25,82,0)
(41,92,0)
(13,82,0)
(83,48,0)
(4,50,0)
(16,36,0)
(39,100,0)
(45,82,0)
(17,105,0)
(34,59,0)
(37,48,0)
(83,6,0)
(105,2,0)
(8,82,0)
(68,39,0)
(54,82,0)
(65,45,0)
(81,82,0)
(38,82,0)
(3,29,0)
(77,54,0)
(75,97,0)
(29,82,0)
(92,2,0)
(20,0,0)
(61,82,0)
(35,24,0)
(26,7,1)
(80,86,1)
(103,45,1)
(58,103,1)
(62,33,1)
(50,4,1)
(89,23,1)
(18,70,1)
(102,53,1)
(31,38,1)
(79,67,1)
(38,89,1)
(18,105,1)
(32,11,1)
(97,75,1)
(98,41,1)
(11,29,1)
(43,52,1)
(23,84,1)
(1,21,1)
(94,6,1)
(16,32,1)
(74,50,1)
(7,1,1)
(85,15,1)
(2,92,1)
(34,91,1)
(48,39,1)
(55,99,1)
(72,55,1)
(28,57,1)
(18,30,1)
(63,71,1)
(0,20,1)
(108,69,1)
(67,9,1)
(92,107,1)
(22,79,1)
(105,17,1)
(4,88,1)
(19,25,1)
(49,48,1)
(70,26,1)
(44,43,1)
(37,39,1)
(86,90,1)
(76,48,1)
(54,77,1)
(73,42,1)
(91,73,1)
(40,24,1)
(46,47,1)
(60,13,1)
(8,80,1)
(96,31,1)
(51,104,1)
(92,57,1)
(47,62,1)
(39,100,1)
(105,2,1)
(14,46,1)
(6,108,1)
(99,95,1)
(100,97,1)
(21,72,1)
(84,61,1)
(41,76,1)
(77,58,1)
(35,64,1)
(59,34,1)
(9,85,1)
(83,6,1)
(48,83,1)
(95,2,1)
(93,51,1)
(27,0,1)
(75,63,1)
(106,22,1)
(45,65,1)
(30,49,1)
(15,72,1)
(33,106,1)
(57,98,1)
(52,56,1)
(17,95,1)
(42,40,1)
(5,74,1)
(48,37,1)
(71,101,1)
(24,35,1)
(100,63,1)
(111,14,1)
(65,5,1)
(70,7,1)
(104,8,1)
(69,37,1)
(107,28,1)
(25,102,1)
(36,16,1)
(30,39,1)
(3,44,1)
(21,81,1)
(88,27,1)
(83,94,1)
(81,93,1)
(90,59,1)
(101,68,1)
(56,54,1)
(29,3,1)
(53,78,1)
(61,60,1)
(13,111,1)
(64,19,1)
(78,36,1)
(20,96,1)
(93,72,2)
(54,72,2)
(64,72,2)
(31,72,2)
(39,100,2)
(48,39,2)
(104,72,2)
(92,57,2)
(62,72,2)
(44,72,2)
(29,72,2)
(90,72,2)
(15,72,2)
(102,72,2)
(83,6,2)
(107,48,2)
(24,72,2)
(2,92,2)
(57,48,2)
(86,72,2)
(30,39,2)
(52,72,2)
(80,72,2)
(21,95,2)
(33,72,2)
(88,72,2)
(94,37,2)
(35,72,2)
(76,48,2)
(41,48,2)
(13,72,2)
(89,72,2)
(38,72,2)
(14,72,2)
(40,72,2)
(53,72,2)
(50,72,2)
(49,48,2)
(45,72,2)
(78,72,2)
(43,72,2)
(83,37,2)
(72,95,2)
(20,72,2)
(85,72,2)
(103,72,2)
(16,72,2)
(25,72,2)
(100,97,2)
(2,48,2)
(46,72,2)
(74,72,2)
(60,72,2)
(51,72,2)
(69,37,2)
(105,95,2)
(18,30,2)
(9,72,2)
(18,70,2)
(22,72,2)
(4,72,2)
(36,72,2)
(108,37,2)
(105,2,2)
(5,72,2)
(61,72,2)
(99,95,2)
(67,72,2)
(55,95,2)
(8,72,2)
(34,72,2)
(56,72,2)
(3,72,2)
(65,72,2)
(11,72,2)
(1,95,2)
(48,83,2)
(18,105,2)
(73,72,2)
(23,72,2)
(84,72,2)
(19,72,2)
(17,95,2)
(98,48,2)
(6,37,2)
(91,72,2)
(42,72,2)
(79,72,2)
(70,95,2)
(32,72,2)
(47,72,2)
(81,72,2)
(7,95,2)
(92,107,2)
(26,95,2)
(58,72,2)
(111,72,2)
(106,72,2)
(96,72,2)
(59,72,2)
(92,48,2)
(100,63,2)
(77,72,2)
(27,72,2)
(28,48,2)
(70,7,2)
(0,72,2)
(95,48,2)
(30,48,2)
-----------------------------------
(0,counter_u64_zero(rack_tlp_retran_fail)
(1,0)
(2,error = SYSCTL_IN(req, &stat, sizeof(uint32_t)
(3,rack_to_alloc_emerg)
(4,rack_to_arm_rack)
(5,counter_u64_zero(rack_to_arm_tlp)
(6,req->newptr)
(7,rack_clear_counter = 0)
(8,counter_u64_zero(rack_enter_tlp_calc)
(9,rack_badfr)
(10,)
(11,rack_sack_proc_all)
(12,if (error)
(13,counter_u64_zero(rack_reorder_seen)
(14,counter_u64_zero(rack_timestamp_mismatch)
(15,"Clearing RACK counters\\n")
(16,rack_sack_proc_short)
(17,error)
(18,RET)
(19,rack_alloc_limited_conns)
(20,rack_tlp_retran_fail)
(21,rack_clear_counter)
(22,counter_u64_zero(rack_badfr_bytes)
(23,counter_u64_zero(rack_tlp_newdata)
(24,counter_u64_zero(rack_split_limited)
(25,counter_u64_zero(rack_to_alloc)
(26,0)
(27,rack_to_tot)
(28,uint32_t)
(29,counter_u64_zero(rack_to_alloc_emerg)
(30,return error;)
(31,rack_tlp_retran_bytes)
(32,counter_u64_zero(rack_sack_proc_all)
(33,counter_u64_zero(rack_rtm_prr_retran)
(34,rack_used_tlpmethod)
(35,rack_split_limited)
(36,counter_u64_zero(rack_sack_proc_short)
(37,error)
(38,counter_u64_zero(rack_tlp_retran)
(39,error = SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t)
(40,rack_find_high)
(41,req)
(42,counter_u64_zero(rack_find_high)
(43,rack_to_alloc_hard)
(44,counter_u64_zero(rack_to_alloc_hard)
(45,counter_u64_zero(rack_paced_segments)
(46,rack_timestamp_mismatch)
(47,counter_u64_zero(rack_rtm_prr_newdata)
(48,error || req->newptr == NULL)
(49,error)
(50,counter_u64_zero(rack_to_arm_rack)
(51,counter_u64_zero(rack_progress_drops)
(52,counter_u64_zero(rack_saw_enetunreach)
(53,counter_u64_zero(rack_sack_proc_restart)
(54,counter_u64_zero(rack_saw_enobuf)
(55,1)
(56,rack_saw_enetunreach)
(57,&stat)
(58,counter_u64_zero(rack_unpaced_segments)
(59,counter_u64_zero(rack_used_tlpmethod)
(60,rack_tlp_tot)
(61,counter_u64_zero(rack_tlp_tot)
(62,rack_rtm_prr_newdata)
(63,&rack_clear_counter)
(64,counter_u64_zero(rack_alloc_limited_conns)
(65,rack_paced_segments)
(66,if (error || req->newptr == NULL)
(67,counter_u64_zero(rack_badfr)
(68,error)
(69,req)
(70,return (0)
(71,rack_clear_counter)
(72,stat == 1)
(73,rack_runt_sacks)
(74,rack_to_arm_tlp)
(75,uint32_t)
(76,error)
(77,rack_saw_enobuf)
(78,rack_sack_proc_restart)
(79,rack_badfr_bytes)
(80,rack_enter_tlp_calc)
(81,counter_u64_zero(rack_tlp_does_nada)
(82,)
(83,req->newptr == NULL)
(84,rack_tlp_newdata)
(85,printf("Clearing RACK counters\\n")
(86,counter_u64_zero(rack_used_tlpmethod2)
(87,error)
(88,counter_u64_zero(rack_to_tot)
(89,rack_tlp_retran)
(90,rack_used_tlpmethod2)
(91,counter_u64_zero(rack_runt_sacks)
(92,SYSCTL_IN(req, &stat, sizeof(uint32_t)
(93,rack_tlp_does_nada)
(94,NULL)
(95,error)
(96,counter_u64_zero(rack_tlp_retran_bytes)
(97,sizeof(uint32_t)
(98,stat)
(99,stat)
(100,SYSCTL_OUT(req, &rack_clear_counter, sizeof(uint32_t)
(101,req)
(102,rack_to_alloc)
(103,rack_unpaced_segments)
(104,rack_progress_drops)
(105,return (error)
(106,rack_rtm_prr_retran)
(107,sizeof(uint32_t)
(108,newptr)
(109,stat)
(110,if (stat == 1)
(111,rack_reorder_seen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^