-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_17_bad()
{
    int i,j;
    wchar_t * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
48,51
49,50
52,53
53,54
53,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
70,73
71,72
73,74
76,77
77,78
77,79
78,79
80,81
82,83
82,84
82,85
82,86
83,84
84,85
84,86
85,86
88,89
88,90
89,90
92,93
93,94
95,96
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,51,54,55,59,61,66,68,72,74,75,79,81,86,87,90,91,94,96
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
57,58
57,59
84,85
84,86
88,89
88,90
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_17_bad(){    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_17_bad()
CWE401_Memory_Leak__wchar_t_calloc_17_bad
{    int i,j;    wchar_t * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(38,39,0)
(8,39,0)
(39,38,0)
(35,8,0)
(38,28,0)
(28,16,0)
(41,21,0)
(14,39,0)
(4,1,0)
(15,8,0)
(26,21,0)
(10,28,0)
(7,24,0)
(45,25,0)
(6,37,0)
(38,13,0)
(5,1,0)
(33,42,0)
(12,39,0)
(37,21,0)
(30,29,0)
(28,38,0)
(3,37,0)
(24,9,0)
(2,18,0)
(17,14,0)
(25,19,0)
(32,29,0)
(11,16,0)
(25,45,0)
(31,26,0)
(39,42,0)
(44,9,0)
(16,28,0)
(36,18,0)
(23,18,0)
(40,45,0)
(29,9,0)
(20,21,0)
(43,18,0)
(27,18,0)
(13,38,0)
(14,42,0)
(1,18,0)
(0,9,0)
(29,30,1)
(8,15,1)
(5,4,1)
(20,41,1)
(14,17,1)
(10,12,1)
(12,37,1)
(11,10,1)
(9,44,1)
(6,26,1)
(25,45,1)
(45,40,1)
(7,29,1)
(8,39,1)
(0,37,1)
(39,38,1)
(35,39,1)
(38,28,1)
(17,8,1)
(21,20,1)
(32,9,1)
(40,8,1)
(14,39,1)
(3,6,1)
(1,5,1)
(15,35,1)
(26,21,1)
(30,32,1)
(38,13,1)
(28,16,1)
(29,9,1)
(31,14,1)
(22,29,1)
(32,24,1)
(16,11,1)
(17,25,1)
(37,21,1)
(44,0,1)
(24,9,1)
(37,3,1)
(41,1,1)
(6,21,1)
(26,31,1)
(24,7,1)
(37,37,2)
(39,38,2)
(26,21,2)
(6,37,2)
(39,37,2)
(11,37,2)
(40,8,2)
(38,28,2)
(24,9,2)
(38,13,2)
(25,45,2)
(31,37,2)
(29,29,2)
(25,8,2)
(8,39,2)
(26,37,2)
(16,37,2)
(17,37,2)
(10,37,2)
(3,37,2)
(28,16,2)
(37,21,2)
(8,37,2)
(28,37,2)
(24,29,2)
(7,29,2)
(14,37,2)
(32,29,2)
(38,37,2)
(30,29,2)
(15,37,2)
(29,9,2)
(12,37,2)
(45,8,2)
(14,39,2)
(35,37,2)
-----------------------------------
(0,j)
(1,data = NULL)
(2,i)
(3,1)
(4,data)
(5,NULL)
(6,i)
(7,j)
(8,data == NULL)
(9,j = 0)
(10,100)
(11,wchar_t)
(12,data)
(13,wchar_t *)
(14,printWLine(data)
(15,NULL)
(16,sizeof(wchar_t)
(17,data)
(18,)
(19,)
(20,0)
(21,i = 0)
(22,RET)
(23,j)
(24,j++)
(25,exit(-1)
(26,i++)
(27,for(j = 0; j < 1; j++)
(28,calloc(100, sizeof(wchar_t)
(29,j < 1)
(30,1)
(31,i)
(32,j)
(33,if (data == NULL)
(34, sizeof(wchar_t)
(35,data)
(36,for(i = 0; i < 1; i++)
(37,i < 1)
(38,(wchar_t *)
(39,data = (wchar_t *)
(40,1)
(41,i)
(42,)
(43,data)
(44,0)
(45,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^