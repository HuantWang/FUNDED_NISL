-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_61_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    count = CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count);
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
27,28
28,29
28,30
29,30
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
81,82
81,83
82,83
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
102,107
103,104
105,106
107,108
108,109
108,110
111,112
111,113
112,113
114,115
116,117
118,119
119,120
120,121
120,122
121,122
124,125
124,126
125,126
127,128
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,14,16,20,23,25,30,32,34,38,40,41,44,47,49,50,52,56,59,61,62,66,68,73,74,79,80,83,87,88,90,93,99,101,104,106,109,110,113,115,117,122,123,126,131,133
-----computeFrom-----
12,13
12,14
18,19
18,20
54,55
54,56
64,65
64,66
77,78
77,79
81,82
81,83
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_61_bad(){    int count;    /* Initialize count */    count = -1;    count = CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_61_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_61_bad
{    int count;    /* Initialize count */    count = -1;    count = CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count);
count = CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count)
count
count
CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count)
CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource
CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource
count
count
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(3,44,0)
(33,60,0)
(57,46,0)
(37,60,0)
(32,61,0)
(22,43,0)
(55,45,0)
(41,43,0)
(45,55,0)
(63,45,0)
(48,63,0)
(15,59,0)
(36,29,0)
(64,47,0)
(26,59,0)
(13,47,0)
(25,63,0)
(52,60,0)
(50,26,0)
(34,55,0)
(28,66,0)
(60,59,0)
(35,2,0)
(30,44,0)
(62,16,0)
(61,15,0)
(2,12,0)
(11,55,0)
(23,62,0)
(17,7,0)
(29,60,0)
(42,62,0)
(58,47,0)
(19,26,0)
(44,15,0)
(5,38,0)
(16,62,0)
(62,57,0)
(44,51,0)
(62,45,0)
(10,60,0)
(40,28,0)
(20,62,0)
(8,45,0)
(9,60,0)
(4,29,0)
(56,37,0)
(15,61,0)
(61,26,0)
(43,60,0)
(65,60,0)
(44,30,0)
(39,46,0)
(14,16,0)
(26,19,0)
(51,47,0)
(17,45,0)
(24,59,0)
(55,29,0)
(45,60,0)
(21,37,0)
(62,23,0)
(51,44,0)
(6,60,0)
(18,17,0)
(46,57,0)
(49,23,0)
(1,51,0)
(31,64,0)
(54,15,0)
(27,19,0)
(57,62,0)
(54,26,1)
(31,28,1)
(42,16,1)
(1,64,1)
(31,57,1)
(27,50,1)
(55,29,1)
(44,3,1)
(55,34,1)
(62,45,1)
(57,46,1)
(32,54,1)
(17,18,1)
(36,4,1)
(62,23,1)
(1,47,1)
(40,57,1)
(61,26,1)
(21,15,1)
(49,20,1)
(41,37,1)
(64,47,1)
(63,45,1)
(34,11,1)
(0,17,1)
(25,45,1)
(43,22,1)
(53,51,1)
(64,31,1)
(15,61,1)
(20,46,1)
(2,35,1)
(45,55,1)
(14,23,1)
(0,53,1)
(44,30,1)
(4,43,1)
(39,51,1)
(51,47,1)
(56,21,1)
(46,39,1)
(62,16,1)
(3,1,1)
(22,41,1)
(44,15,1)
(11,8,1)
(61,32,1)
(37,56,1)
(57,62,1)
(29,36,1)
(26,19,1)
(18,53,1)
(17,45,1)
(8,29,1)
(35,63,1)
(16,14,1)
(28,40,1)
(58,2,1)
(62,42,1)
(51,44,1)
(48,25,1)
(13,58,1)
(19,27,1)
(58,63,1)
(47,13,1)
(23,49,1)
(63,48,1)
(35,63,2)
(26,19,2)
(44,51,2)
(14,51,2)
(57,62,2)
(40,57,2)
(63,45,2)
(39,51,2)
(3,51,2)
(16,51,2)
(62,16,2)
(64,47,2)
(64,51,2)
(57,46,2)
(49,51,2)
(23,51,2)
(46,51,2)
(20,51,2)
(44,30,2)
(62,51,2)
(61,26,2)
(17,53,2)
(31,51,2)
(62,45,2)
(42,51,2)
(45,55,2)
(57,51,2)
(1,51,2)
(51,44,2)
(62,23,2)
(2,63,2)
(51,47,2)
(51,51,2)
(55,29,2)
(17,45,2)
(44,15,2)
(28,57,2)
(18,53,2)
(15,61,2)
-----------------------------------
(0,RET)
(1,i)
(2,exit(1)
(3,count)
(4,filename)
(5,if (strlen(SENTENCE)
(6,if (pFile)
(7,)
(8,pFile)
(9,if (pFile == NULL)
(10,for (i = 0; i < (size_t)
(11,filename)
(12,)
(13,0)
(14,SENTENCE)
(15,count = CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count)
(16,strlen(SENTENCE)
(17,fclose(pFile)
(18,pFile)
(19,-1)
(20,SENTENCE)
(21,i)
(22,NULL)
(23,sizeof(char)
(24,count)
(25,pFile)
(26,count = -1)
(27,1)
(28,exit(1)
(29,*filename = "output_bad.txt")
(30,size_t)
(31,i)
(32,count)
(33,i)
(34,"w+")
(35,1)
(36,"output_bad.txt")
(37,i = 0)
(38,)
(39,SENTENCE)
(40,1)
(41,pFile)
(42,pFile)
(43,*pFile = NULL)
(44,(size_t)
(45,pFile = fopen(filename, "w+")
(46,strlen(SENTENCE)
(47,i = 0)
(48,NULL)
(49,char)
(50,count)
(51,i < (size_t)
(52,pFile)
(53,pFile)
(54,count)
(55,fopen(filename, "w+")
(56,0)
(57,strlen(SENTENCE)
(58,i)
(59,)
(60,)
(61,CWE400_Resource_Exhaustion__fgets_fwrite_61b_badSource(count)
(62,fwrite(SENTENCE, sizeof(char)
(63,pFile == NULL)
(64,i++)
(65,filename)
(66,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^