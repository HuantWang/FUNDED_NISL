-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_fwrite_16_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    while(1)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
        break;
    }
    while(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
20,21
20,22
21,22
22,23
22,24
24,25
24,26
24,27
26,27
27,28
29,30
31,32
31,33
31,34
32,33
32,34
33,34
33,35
33,36
33,37
34,35
36,37
38,39
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
55,56
56,57
56,58
57,58
61,62
61,63
63,64
63,65
64,65
64,66
64,67
64,68
64,69
64,70
64,71
65,66
66,67
66,68
67,68
69,70
69,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
77,80
80,81
81,82
83,84
84,85
84,86
86,87
86,88
86,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
95,98
96,97
98,99
101,102
101,103
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
119,120
119,121
120,121
122,123
122,124
123,124
123,125
124,125
127,128
129,130
130,131
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
138,139
140,141
140,142
140,143
140,144
140,145
141,142
143,144
145,146
146,147
146,148
149,150
149,151
150,151
152,153
154,155
156,157
157,158
158,159
158,160
159,160
162,163
162,164
163,164
165,166
166,167
167,168
167,169
168,169
170,171
-----nextToken-----
2,4,8,10,14,16,18,23,25,28,30,35,37,39,41,43,48,51,53,58,59,60,62,68,70,72,76,78,79,82,85,87,88,90,94,97,99,100,104,106,111,112,117,118,121,125,126,128,131,137,139,142,144,147,148,151,153,155,160,161,164,169,171,172
-----computeFrom-----
12,13
12,14
32,33
32,34
46,47
46,48
92,93
92,94
102,103
102,104
115,116
115,117
119,120
119,121
134,135
134,136
-----guardedBy-----
37,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_fwrite_16_bad(){    int count;    /* Initialize count */    count = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }}
void
CWE400_Resource_Exhaustion__fgets_fwrite_16_bad()
CWE400_Resource_Exhaustion__fgets_fwrite_16_bad
{    int count;    /* Initialize count */    count = -1;    while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }    while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
while(1)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
1
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }        break;    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
while(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }        break;    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
-----joern-----
(53,51,0)
(27,87,0)
(51,38,0)
(34,47,0)
(44,36,0)
(30,74,0)
(46,64,0)
(19,86,0)
(55,60,0)
(17,75,0)
(64,6,0)
(85,54,0)
(68,53,0)
(58,78,0)
(38,78,0)
(63,88,0)
(86,54,0)
(16,90,0)
(11,59,0)
(5,90,0)
(26,86,0)
(38,21,0)
(71,49,0)
(79,13,0)
(56,78,0)
(47,7,0)
(15,32,0)
(48,78,0)
(61,87,0)
(90,50,0)
(51,53,0)
(59,51,0)
(51,59,0)
(52,78,0)
(65,50,0)
(28,51,0)
(33,90,0)
(21,38,0)
(70,52,0)
(25,50,0)
(18,30,0)
(0,76,0)
(53,68,0)
(86,24,0)
(8,78,0)
(83,21,0)
(10,90,0)
(81,56,0)
(45,21,0)
(90,33,0)
(20,33,0)
(14,4,0)
(62,12,0)
(43,78,0)
(84,15,0)
(86,26,0)
(49,78,0)
(21,52,0)
(22,78,0)
(50,60,0)
(40,51,0)
(73,38,0)
(88,54,0)
(35,12,0)
(86,15,0)
(80,68,0)
(72,50,0)
(4,12,0)
(2,9,0)
(47,38,0)
(26,12,0)
(54,88,0)
(24,86,0)
(39,87,0)
(51,40,0)
(15,72,0)
(41,60,0)
(1,40,0)
(36,89,0)
(76,38,0)
(42,51,0)
(72,15,0)
(37,49,0)
(57,26,0)
(82,72,0)
(77,56,0)
(29,52,0)
(31,78,0)
(60,75,0)
(69,76,0)
(54,87,0)
(78,9,0)
(63,85,1)
(51,38,1)
(35,62,1)
(83,73,1)
(51,28,1)
(88,63,1)
(33,20,1)
(17,15,1)
(86,24,1)
(45,83,1)
(66,17,1)
(73,52,1)
(37,71,1)
(72,50,1)
(47,38,1)
(26,12,1)
(53,68,1)
(72,82,1)
(62,76,1)
(10,50,1)
(51,40,1)
(16,5,1)
(4,12,1)
(62,36,1)
(28,40,1)
(51,59,1)
(38,21,1)
(81,66,1)
(5,10,1)
(53,51,1)
(14,53,1)
(3,26,1)
(90,16,1)
(21,52,1)
(23,54,1)
(40,1,1)
(69,0,1)
(30,18,1)
(42,68,1)
(1,59,1)
(33,90,1)
(64,46,1)
(44,76,1)
(15,72,1)
(4,14,1)
(36,44,1)
(65,25,1)
(84,33,1)
(70,29,1)
(57,4,1)
(34,3,1)
(90,50,1)
(86,19,1)
(52,70,1)
(29,49,1)
(77,81,1)
(12,35,1)
(56,77,1)
(20,90,1)
(0,38,1)
(76,38,1)
(86,15,1)
(59,11,1)
(26,86,1)
(86,54,1)
(19,57,1)
(68,80,1)
(47,34,1)
(54,88,1)
(82,84,1)
(46,33,1)
(25,23,1)
(76,69,1)
(14,30,1)
(67,2,1)
(11,42,1)
(21,45,1)
(50,65,1)
(66,23,1)
(2,47,1)
(17,64,1)
(49,37,1)
(18,53,1)
(2,3,1)
(67,66,1)
(71,56,1)
(57,12,1)
(80,26,1)
(86,66,2)
(56,66,2)
(36,76,2)
(53,68,2)
(76,38,2)
(26,66,2)
(15,33,2)
(26,12,2)
(57,66,2)
(46,33,2)
(54,88,2)
(18,53,2)
(20,23,2)
(53,26,2)
(17,23,2)
(21,66,2)
(50,23,2)
(40,26,2)
(80,26,2)
(57,26,2)
(47,38,2)
(25,23,2)
(77,66,2)
(81,66,2)
(51,59,2)
(44,76,2)
(86,24,2)
(72,33,2)
(86,26,2)
(86,54,2)
(53,51,2)
(16,23,2)
(38,21,2)
(68,26,2)
(1,26,2)
(51,26,2)
(33,23,2)
(49,66,2)
(33,90,2)
(69,66,2)
(90,23,2)
(10,23,2)
(86,15,2)
(0,66,2)
(35,66,2)
(76,66,2)
(45,66,2)
(70,66,2)
(62,66,2)
(28,26,2)
(4,26,2)
(21,52,2)
(42,26,2)
(29,66,2)
(84,33,2)
(82,33,2)
(51,38,2)
(51,40,2)
(59,26,2)
(64,33,2)
(65,23,2)
(72,50,2)
(83,66,2)
(37,66,2)
(14,26,2)
(19,26,2)
(4,12,2)
(2,66,2)
(26,26,2)
(38,66,2)
(19,66,2)
(12,66,2)
(52,66,2)
(3,66,2)
(73,66,2)
(34,3,2)
(30,53,2)
(5,23,2)
(47,3,2)
(26,86,2)
(15,72,2)
(71,66,2)
(11,26,2)
(90,50,2)
-----------------------------------
(0,pFile)
(1,SENTENCE)
(2,break;)
(3,pFile)
(4,i++)
(5,CHAR_ARRAY_SIZE)
(6,)
(7,)
(8,pFile)
(9,)
(10,inputBuffer)
(11,char)
(12,i = 0)
(13,)
(14,i)
(15,count = atoi(inputBuffer)
(16,stdin)
(17,break;)
(18,1)
(19,count)
(20,NULL)
(21,fopen(filename, "w+")
(22,filename)
(23,1)
(24,size_t)
(25,inputBuffer)
(26,i < (size_t)
(27,while(1)
(28,pFile)
(29,filename)
(30,exit(1)
(31,for (i = 0; i < (size_t)
(32,)
(33,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(34,pFile)
(35,0)
(36,exit(1)
(37,NULL)
(38,pFile = fopen(filename, "w+")
(39,count)
(40,strlen(SENTENCE)
(41,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,SENTENCE)
(43,i)
(44,1)
(45,"w+")
(46,"fgets()
(47,fclose(pFile)
(48,if (pFile)
(49,*pFile = NULL)
(50,inputBuffer[CHAR_ARRAY_SIZE] = "")
(51,fwrite(SENTENCE, sizeof(char)
(52,*filename = "output_bad.txt")
(53,strlen(SENTENCE)
(54,count = -1)
(55,inputBuffer)
(56,i = 0)
(57,i)
(58,if (pFile == NULL)
(59,sizeof(char)
(60,)
(61,while(1)
(62,i)
(63,1)
(64,printLine("fgets()
(65,"")
(66,1)
(67,RET)
(68,strlen(SENTENCE)
(69,NULL)
(70,"output_bad.txt")
(71,pFile)
(72,atoi(inputBuffer)
(73,pFile)
(74,)
(75,)
(76,pFile == NULL)
(77,0)
(78,)
(79,if (strlen(SENTENCE)
(80,SENTENCE)
(81,i)
(82,inputBuffer)
(83,filename)
(84,count)
(85,count)
(86,(size_t)
(87,)
(88,-1)
(89,)
(90,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^