-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_18_bad()
{
    int * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    goto sink;
sink:
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
20,21
20,22
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
69,70
69,71
-----nextToken-----
2,4,8,10,11,15,17,19,21,25,28,30,33,34,37,38,42,44,49,51,56,57,58,62,65,66,68,70,71
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_18_bad(){    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_calloc_18_bad()
CWE401_Memory_Leak__int_calloc_18_bad
{    int * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    goto sink;sink:    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));
source
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
goto sink;
sink
sink:    /* POTENTIAL FLAW: No deallocation */    ;
sink
;
-----joern-----
(4,35,0)
(11,22,0)
(14,0,0)
(33,25,0)
(33,6,0)
(18,20,0)
(28,18,0)
(13,32,0)
(5,0,0)
(11,32,0)
(2,17,0)
(27,19,0)
(29,25,0)
(1,22,0)
(22,1,0)
(20,22,0)
(10,17,0)
(18,15,0)
(17,19,0)
(7,0,0)
(19,0,0)
(16,3,0)
(15,18,0)
(25,33,0)
(15,0,0)
(26,0,0)
(17,20,0)
(32,11,0)
(20,0,0)
(24,3,0)
(21,0,0)
(30,11,0)
(3,0,0)
(31,0,0)
(35,20,0)
(22,20,0)
(18,19,0)
(9,35,0)
(23,18,0)
(34,20,0)
(22,11,0)
(13,30,1)
(25,29,1)
(29,35,1)
(7,3,1)
(11,32,1)
(18,19,1)
(16,24,1)
(33,25,1)
(18,20,1)
(12,26,1)
(2,33,1)
(10,2,1)
(35,9,1)
(3,16,1)
(27,17,1)
(2,35,1)
(28,23,1)
(19,27,1)
(22,1,1)
(17,20,1)
(18,28,1)
(32,13,1)
(15,18,1)
(4,20,1)
(20,22,1)
(9,4,1)
(30,34,1)
(22,11,1)
(34,7,1)
(17,10,1)
(23,19,1)
(26,15,1)
(35,20,1)
(11,32,2)
(20,22,2)
(22,11,2)
(33,35,2)
(29,35,2)
(18,20,2)
(25,35,2)
(17,20,2)
(18,19,2)
(22,1,2)
(15,18,2)
(33,25,2)
(35,20,2)
-----------------------------------
(0,)
(1,int *)
(2,data)
(3,data = NULL)
(4,data)
(5,if (data == NULL)
(6,)
(7,goto source;)
(8, sizeof(int)
(9,NULL)
(10,0)
(11,calloc(100, sizeof(int)
(12,RET)
(13,int)
(14,source:)
(15,printIntLine(data[0])
(16,NULL)
(17,data[0])
(18,data[0])
(19,data[0] = 5)
(20,data = (int *)
(21,sink:)
(22,(int *)
(23,data)
(24,data)
(25,-1)
(26,goto sink;)
(27,5)
(28,0)
(29,1)
(30,100)
(31,data)
(32,sizeof(int)
(33,exit(-1)
(34,data)
(35,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^