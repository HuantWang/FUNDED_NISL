-----label-----
1
-----code-----
static int
tapdisk_channel_launch_tapdisk(tapdisk_channel_t *channel)
{
	int err;
	char *read_dev, *write_dev;

	read_dev          = NULL;
	write_dev         = NULL;
	channel->read_fd  = -1;
	channel->write_fd = -1;

	err = tapdisk_channel_get_device_number(channel);
	if (err)
		return err;

	err = asprintf(&write_dev,
		       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor);
	if (err == -1) {
		err = -ENOMEM;
		write_dev = NULL;
		goto fail;
	}

	err = asprintf(&read_dev,
		       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor);
	if (err == -1) {
		err = -ENOMEM;
		read_dev = NULL;
		goto fail;
	}

	channel->write_fd = tapdisk_channel_open_control_socket(write_dev);
	if (channel->write_fd < 0) {
		err = channel->write_fd;
		channel->write_fd = -1;
		goto fail;
	}

	channel->read_fd = tapdisk_channel_open_control_socket(read_dev);
	if (channel->read_fd < 0) {
		err = channel->read_fd;
		channel->read_fd = -1;
		goto fail;
	}

	channel->tapdisk_pid =
		tapdisk_channel_start_process(channel, write_dev, read_dev);
	if (channel->tapdisk_pid < 0) {
		err = channel->tapdisk_pid;
		channel->tapdisk_pid = -1;
		goto fail;
	}

	channel->open       = 1;
	channel->channel_id = channel->write_fd;

	free(read_dev);
	free(write_dev);

	DPRINTF("process launched, channel = %d:%d\n",
		channel->channel_id, channel->cookie);

	return tapdisk_channel_send_pid_request(channel);

fail:
	free(read_dev);
	free(write_dev);
	if (channel->read_fd != -1)
		close(channel->read_fd);
	if (channel->write_fd != -1)
		close(channel->write_fd);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
12,13
13,14
13,15
15,16
17,18
18,19
18,20
18,21
20,21
20,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
61,62
63,64
63,65
64,65
66,67
67,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
73,77
73,78
74,75
76,77
77,78
80,81
82,83
82,84
83,84
86,87
86,88
87,88
87,89
88,89
90,91
92,93
92,94
92,95
93,94
94,95
94,96
95,96
97,98
98,99
100,101
101,102
101,103
102,103
104,105
106,107
108,109
109,110
109,111
110,111
112,113
112,114
112,115
112,116
112,117
113,114
115,116
116,117
119,120
121,122
121,123
122,123
125,126
125,127
126,127
126,128
127,128
129,130
131,132
131,133
131,134
132,133
133,134
133,135
134,135
136,137
137,138
139,140
140,141
140,142
141,142
143,144
145,146
147,148
148,149
148,150
149,150
149,151
150,151
153,154
153,155
154,155
156,157
158,159
158,160
159,160
159,161
160,161
160,162
161,162
165,166
165,167
165,168
166,167
167,168
167,169
168,169
170,171
170,172
171,172
174,175
175,176
175,177
176,177
176,178
177,178
180,181
182,183
184,185
185,186
185,187
186,187
186,188
187,188
190,191
190,192
191,192
193,194
195,196
195,197
196,197
196,198
197,198
197,199
198,199
202,203
202,204
202,205
203,204
204,205
204,206
205,206
207,208
207,209
208,209
211,212
212,213
212,214
213,214
213,215
214,215
217,218
219,220
221,222
222,223
222,224
223,224
223,225
224,225
227,228
227,229
227,230
227,231
228,229
230,231
232,233
234,235
236,237
236,238
237,238
237,239
238,239
238,240
239,240
243,244
243,245
243,246
244,245
245,246
245,247
246,247
248,249
248,250
249,250
252,253
253,254
253,255
254,255
254,256
255,256
258,259
260,261
262,263
263,264
263,265
264,265
264,266
265,266
269,270
270,271
270,272
271,272
271,273
272,273
275,276
275,277
276,277
279,280
280,281
280,282
281,282
283,284
285,286
286,287
286,288
287,288
289,290
291,292
292,293
292,294
292,295
292,296
293,294
296,297
296,298
297,298
300,301
300,302
301,302
304,305
305,306
305,307
306,307
308,309
310,311
310,312
312,313
313,314
313,315
314,315
316,317
318,319
319,320
319,321
320,321
322,323
324,325
324,326
325,326
325,327
326,327
326,328
327,328
330,331
332,333
333,334
333,335
334,335
336,337
336,338
337,338
340,341
340,342
341,342
341,343
342,343
342,344
343,344
346,347
348,349
349,350
349,351
350,351
352,353
352,354
353,354
356,357
357,358
-----nextToken-----
2,4,7,9,10,14,16,19,21,22,24,25,29,31,35,37,42,43,45,50,51,53,57,60,62,65,68,72,75,78,79,81,84,85,89,91,96,99,103,105,107,111,114,117,118,120,123,124,128,130,135,138,142,144,146,151,152,155,157,162,163,164,169,172,173,178,179,181,183,188,189,192,194,199,200,201,206,209,210,215,216,218,220,225,226,229,231,233,235,240,241,242,247,250,251,256,257,259,261,266,267,268,273,274,277,278,282,284,288,290,294,295,298,299,302,303,307,309,311,315,317,321,323,328,329,331,335,338,339,344,345,347,351,354,355,358
-----computeFrom-----
27,28
27,29
33,34
33,35
39,40
39,41
47,48
47,49
55,56
55,57
70,71
70,72
87,88
87,89
94,95
94,96
101,102
101,103
109,110
109,111
126,127
126,128
133,134
133,135
140,141
140,142
148,149
148,150
159,160
159,161
167,168
167,169
175,176
175,177
185,186
185,187
196,197
196,198
204,205
204,206
212,213
212,214
222,223
222,224
237,238
237,239
245,246
245,247
253,254
253,255
263,264
263,265
270,271
270,272
325,326
325,327
341,342
341,343
-----guardedBy-----
89,96
128,135
162,178
163,179
200,216
199,215
240,256
241,257
329,339
328,338
344,354
345,355
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static inttapdisk_channel_launch_tapdisk(tapdisk_channel_t *channel){	int err;	char *read_dev, *write_dev;	read_dev          = NULL;	write_dev         = NULL;	channel->read_fd  = -1;	channel->write_fd = -1;	err = tapdisk_channel_get_device_number(channel);	if (err)		return err;	err = asprintf(&write_dev,		       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor);	if (err == -1) {		err = -ENOMEM;		write_dev = NULL;		goto fail;	}	err = asprintf(&read_dev,		       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor);	if (err == -1) {		err = -ENOMEM;		read_dev = NULL;		goto fail;	}	channel->write_fd = tapdisk_channel_open_control_socket(write_dev);	if (channel->write_fd < 0) {		err = channel->write_fd;		channel->write_fd = -1;		goto fail;	}	channel->read_fd = tapdisk_channel_open_control_socket(read_dev);	if (channel->read_fd < 0) {		err = channel->read_fd;		channel->read_fd = -1;		goto fail;	}	channel->tapdisk_pid =		tapdisk_channel_start_process(channel, write_dev, read_dev);	if (channel->tapdisk_pid < 0) {		err = channel->tapdisk_pid;		channel->tapdisk_pid = -1;		goto fail;	}	channel->open       = 1;	channel->channel_id = channel->write_fd;	free(read_dev);	free(write_dev);	DPRINTF("process launched, channel = %d:%d\n",		channel->channel_id, channel->cookie);	return tapdisk_channel_send_pid_request(channel);fail:	free(read_dev);	free(write_dev);	if (channel->read_fd != -1)		close(channel->read_fd);	if (channel->write_fd != -1)		close(channel->write_fd);	return err;}
static int
tapdisk_channel_launch_tapdisk(tapdisk_channel_t *channel)
tapdisk_channel_launch_tapdisk
tapdisk_channel_t *channel
tapdisk_channel_t
tapdisk_channel_t
*channel
*
channel
{	int err;	char *read_dev, *write_dev;	read_dev          = NULL;	write_dev         = NULL;	channel->read_fd  = -1;	channel->write_fd = -1;	err = tapdisk_channel_get_device_number(channel);	if (err)		return err;	err = asprintf(&write_dev,		       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor);	if (err == -1) {		err = -ENOMEM;		write_dev = NULL;		goto fail;	}	err = asprintf(&read_dev,		       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor);	if (err == -1) {		err = -ENOMEM;		read_dev = NULL;		goto fail;	}	channel->write_fd = tapdisk_channel_open_control_socket(write_dev);	if (channel->write_fd < 0) {		err = channel->write_fd;		channel->write_fd = -1;		goto fail;	}	channel->read_fd = tapdisk_channel_open_control_socket(read_dev);	if (channel->read_fd < 0) {		err = channel->read_fd;		channel->read_fd = -1;		goto fail;	}	channel->tapdisk_pid =		tapdisk_channel_start_process(channel, write_dev, read_dev);	if (channel->tapdisk_pid < 0) {		err = channel->tapdisk_pid;		channel->tapdisk_pid = -1;		goto fail;	}	channel->open       = 1;	channel->channel_id = channel->write_fd;	free(read_dev);	free(write_dev);	DPRINTF("process launched, channel = %d:%d\n",		channel->channel_id, channel->cookie);	return tapdisk_channel_send_pid_request(channel);fail:	free(read_dev);	free(write_dev);	if (channel->read_fd != -1)		close(channel->read_fd);	if (channel->write_fd != -1)		close(channel->write_fd);	return err;}
int err;
int err;
int
err
err
char *read_dev, *write_dev;
char *read_dev, *write_dev;
char
*read_dev
*
read_dev
*write_dev
*
write_dev
read_dev          = NULL;
read_dev          = NULL
read_dev
read_dev
NULL
NULL
write_dev         = NULL;
write_dev         = NULL
write_dev
write_dev
NULL
NULL
channel->read_fd  = -1;
channel->read_fd  = -1
channel->read_fd
channel
channel
read_fd
-1
1
channel->write_fd = -1;
channel->write_fd = -1
channel->write_fd
channel
channel
write_fd
-1
1
err = tapdisk_channel_get_device_number(channel);
err = tapdisk_channel_get_device_number(channel)
err
err
tapdisk_channel_get_device_number(channel)
tapdisk_channel_get_device_number
tapdisk_channel_get_device_number
channel
channel
if (err)		return err;
err
err
return err;
err
err
err = asprintf(&write_dev,		       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor);
err = asprintf(&write_dev,		       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor)
err
err
asprintf(&write_dev,		       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor)
asprintf
asprintf
&write_dev
write_dev
write_dev
"%s/tapctrlwrite%d"
BLKTAP_CTRL_DIR
BLKTAP_CTRL_DIR
channel->minor
channel
channel
minor
if (err == -1) {		err = -ENOMEM;		write_dev = NULL;		goto fail;	}
err == -1
err
err
-1
1
{		err = -ENOMEM;		write_dev = NULL;		goto fail;	}
err = -ENOMEM;
err = -ENOMEM
err
err
-ENOMEM
ENOMEM
ENOMEM
write_dev = NULL;
write_dev = NULL
write_dev
write_dev
NULL
NULL
goto fail;
fail
err = asprintf(&read_dev,		       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor);
err = asprintf(&read_dev,		       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor)
err
err
asprintf(&read_dev,		       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor)
asprintf
asprintf
&read_dev
read_dev
read_dev
"%s/tapctrlread%d"
BLKTAP_CTRL_DIR
BLKTAP_CTRL_DIR
channel->minor
channel
channel
minor
if (err == -1) {		err = -ENOMEM;		read_dev = NULL;		goto fail;	}
err == -1
err
err
-1
1
{		err = -ENOMEM;		read_dev = NULL;		goto fail;	}
err = -ENOMEM;
err = -ENOMEM
err
err
-ENOMEM
ENOMEM
ENOMEM
read_dev = NULL;
read_dev = NULL
read_dev
read_dev
NULL
NULL
goto fail;
fail
channel->write_fd = tapdisk_channel_open_control_socket(write_dev);
channel->write_fd = tapdisk_channel_open_control_socket(write_dev)
channel->write_fd
channel
channel
write_fd
tapdisk_channel_open_control_socket(write_dev)
tapdisk_channel_open_control_socket
tapdisk_channel_open_control_socket
write_dev
write_dev
if (channel->write_fd < 0) {		err = channel->write_fd;		channel->write_fd = -1;		goto fail;	}
channel->write_fd < 0
channel->write_fd
channel
channel
write_fd
0
{		err = channel->write_fd;		channel->write_fd = -1;		goto fail;	}
err = channel->write_fd;
err = channel->write_fd
err
err
channel->write_fd
channel
channel
write_fd
channel->write_fd = -1;
channel->write_fd = -1
channel->write_fd
channel
channel
write_fd
-1
1
goto fail;
fail
channel->read_fd = tapdisk_channel_open_control_socket(read_dev);
channel->read_fd = tapdisk_channel_open_control_socket(read_dev)
channel->read_fd
channel
channel
read_fd
tapdisk_channel_open_control_socket(read_dev)
tapdisk_channel_open_control_socket
tapdisk_channel_open_control_socket
read_dev
read_dev
if (channel->read_fd < 0) {		err = channel->read_fd;		channel->read_fd = -1;		goto fail;	}
channel->read_fd < 0
channel->read_fd
channel
channel
read_fd
0
{		err = channel->read_fd;		channel->read_fd = -1;		goto fail;	}
err = channel->read_fd;
err = channel->read_fd
err
err
channel->read_fd
channel
channel
read_fd
channel->read_fd = -1;
channel->read_fd = -1
channel->read_fd
channel
channel
read_fd
-1
1
goto fail;
fail
channel->tapdisk_pid =		tapdisk_channel_start_process(channel, write_dev, read_dev);
channel->tapdisk_pid =		tapdisk_channel_start_process(channel, write_dev, read_dev)
channel->tapdisk_pid
channel
channel
tapdisk_pid
tapdisk_channel_start_process(channel, write_dev, read_dev)
tapdisk_channel_start_process
tapdisk_channel_start_process
channel
channel
write_dev
write_dev
read_dev
read_dev
if (channel->tapdisk_pid < 0) {		err = channel->tapdisk_pid;		channel->tapdisk_pid = -1;		goto fail;	}
channel->tapdisk_pid < 0
channel->tapdisk_pid
channel
channel
tapdisk_pid
0
{		err = channel->tapdisk_pid;		channel->tapdisk_pid = -1;		goto fail;	}
err = channel->tapdisk_pid;
err = channel->tapdisk_pid
err
err
channel->tapdisk_pid
channel
channel
tapdisk_pid
channel->tapdisk_pid = -1;
channel->tapdisk_pid = -1
channel->tapdisk_pid
channel
channel
tapdisk_pid
-1
1
goto fail;
fail
channel->open       = 1;
channel->open       = 1
channel->open
channel
channel
open
1
channel->channel_id = channel->write_fd;
channel->channel_id = channel->write_fd
channel->channel_id
channel
channel
channel_id
channel->write_fd
channel
channel
write_fd
free(read_dev);
free(read_dev)
free
free
read_dev
read_dev
free(write_dev);
free(write_dev)
free
free
write_dev
write_dev
DPRINTF("process launched, channel = %d:%d\n",		channel->channel_id, channel->cookie);
DPRINTF("process launched, channel = %d:%d\n",		channel->channel_id, channel->cookie)
DPRINTF
DPRINTF
"process launched, channel = %d:%d\n"
channel->channel_id
channel
channel
channel_id
channel->cookie
channel
channel
cookie
return tapdisk_channel_send_pid_request(channel);
tapdisk_channel_send_pid_request(channel)
tapdisk_channel_send_pid_request
tapdisk_channel_send_pid_request
channel
channel
fail:	free(read_dev);
fail
free(read_dev);
free(read_dev)
free
free
read_dev
read_dev
free(write_dev);
free(write_dev)
free
free
write_dev
write_dev
if (channel->read_fd != -1)		close(channel->read_fd);
channel->read_fd != -1
channel->read_fd
channel
channel
read_fd
-1
1
close(channel->read_fd);
close(channel->read_fd)
close
close
channel->read_fd
channel
channel
read_fd
if (channel->write_fd != -1)		close(channel->write_fd);
channel->write_fd != -1
channel->write_fd
channel
channel
write_fd
-1
1
close(channel->write_fd);
close(channel->write_fd)
close
close
channel->write_fd
channel
channel
write_fd
return err;
err
err
-----joern-----
(40,182,0)
(17,26,0)
(133,131,0)
(126,208,0)
(89,3,0)
(51,41,0)
(131,3,0)
(172,56,0)
(15,92,0)
(80,90,0)
(187,45,0)
(167,156,0)
(111,191,0)
(208,126,0)
(126,114,0)
(61,15,0)
(121,140,0)
(75,182,0)
(108,102,0)
(87,26,0)
(187,39,0)
(197,56,0)
(181,205,0)
(174,44,0)
(145,116,0)
(53,148,0)
(53,36,0)
(93,111,0)
(202,164,0)
(138,49,0)
(26,179,0)
(158,196,0)
(142,114,0)
(128,120,0)
(178,8,0)
(132,146,0)
(175,40,0)
(133,52,0)
(133,56,0)
(65,6,0)
(13,56,0)
(173,36,0)
(129,116,0)
(79,92,0)
(107,182,0)
(161,138,0)
(183,149,0)
(116,118,0)
(142,49,0)
(21,2,0)
(48,12,0)
(197,179,0)
(94,136,0)
(41,132,0)
(40,114,0)
(8,2,0)
(118,116,0)
(187,25,0)
(145,52,0)
(66,113,0)
(156,56,0)
(194,182,0)
(49,56,0)
(102,37,0)
(100,52,0)
(137,103,0)
(110,205,0)
(84,116,0)
(76,129,0)
(13,0,0)
(171,173,0)
(184,95,0)
(189,39,0)
(59,126,0)
(60,56,0)
(37,151,0)
(135,68,0)
(62,40,0)
(28,13,0)
(162,73,0)
(148,53,0)
(17,56,0)
(52,56,0)
(141,44,0)
(193,41,0)
(38,56,0)
(179,56,0)
(49,204,0)
(97,58,0)
(41,53,0)
(22,73,0)
(91,113,0)
(4,49,0)
(23,173,0)
(1,9,0)
(191,17,0)
(150,56,0)
(191,182,0)
(96,142,0)
(105,48,0)
(97,17,0)
(147,0,0)
(186,56,0)
(40,62,0)
(63,52,0)
(151,182,0)
(207,68,0)
(83,56,0)
(11,194,0)
(9,179,0)
(58,97,0)
(144,197,0)
(14,102,0)
(62,196,0)
(142,182,0)
(72,73,0)
(164,149,0)
(112,171,0)
(153,131,0)
(187,28,0)
(116,145,0)
(73,53,0)
(141,149,0)
(6,187,0)
(20,118,0)
(136,107,0)
(70,167,0)
(74,56,0)
(180,45,0)
(71,171,0)
(75,2,0)
(188,56,0)
(192,97,0)
(2,159,0)
(47,116,0)
(24,2,0)
(107,136,0)
(25,49,0)
(136,56,0)
(187,194,0)
(16,26,0)
(159,179,0)
(7,39,0)
(170,92,0)
(4,44,0)
(48,8,0)
(124,167,0)
(203,4,0)
(113,91,0)
(143,56,0)
(212,89,0)
(165,55,0)
(130,185,0)
(69,56,0)
(116,129,0)
(114,9,0)
(85,159,0)
(26,17,0)
(160,19,0)
(125,133,0)
(199,118,0)
(126,49,0)
(31,25,0)
(97,182,0)
(54,36,0)
(26,182,0)
(18,131,0)
(129,56,0)
(194,114,0)
(111,120,0)
(117,57,0)
(82,151,0)
(118,182,0)
(39,17,0)
(211,103,0)
(142,90,0)
(44,55,0)
(40,165,0)
(152,94,0)
(94,182,0)
(30,95,0)
(64,35,0)
(73,132,0)
(205,67,0)
(141,89,0)
(45,182,0)
(95,184,0)
(171,182,0)
(141,173,0)
(73,13,0)
(169,141,0)
(12,48,0)
(126,165,0)
(197,35,0)
(92,13,0)
(41,193,0)
(184,120,0)
(6,182,0)
(78,56,0)
(210,56,0)
(138,156,0)
(191,111,0)
(43,107,0)
(88,145,0)
(25,182,0)
(167,182,0)
(104,179,0)
(173,171,0)
(33,19,0)
(190,4,0)
(37,56,0)
(123,45,0)
(187,205,0)
(171,132,0)
(151,37,0)
(200,56,0)
(165,57,0)
(103,182,0)
(205,182,0)
(195,179,0)
(81,41,0)
(39,182,0)
(163,148,0)
(138,182,0)
(5,28,0)
(46,12,0)
(171,13,0)
(26,52,0)
(89,140,0)
(114,56,0)
(74,179,0)
(187,56,0)
(8,56,0)
(141,56,0)
(155,191,0)
(67,56,0)
(187,167,0)
(32,146,0)
(92,132,0)
(156,138,0)
(98,198,0)
(27,75,0)
(109,136,0)
(99,37,0)
(68,182,0)
(209,91,0)
(10,191,0)
(159,2,0)
(103,53,0)
(177,40,0)
(122,58,0)
(86,142,0)
(138,114,0)
(40,49,0)
(201,204,0)
(41,182,0)
(146,132,0)
(149,185,0)
(35,185,0)
(108,187,0)
(92,182,0)
(108,141,0)
(196,62,0)
(41,13,0)
(2,8,0)
(176,194,0)
(19,165,0)
(127,126,0)
(73,182,0)
(44,4,0)
(77,25,0)
(68,184,0)
(9,114,0)
(115,56,0)
(45,132,0)
(132,56,0)
(0,13,0)
(136,94,0)
(50,138,0)
(106,35,0)
(168,210,0)
(34,28,0)
(91,129,0)
(134,67,0)
(126,182,0)
(206,26,0)
(19,182,0)
(2,75,0)
(139,74,0)
(210,52,0)
(90,142,0)
(94,156,0)
(29,94,0)
(162,198,0)
(157,107,0)
(92,15,0)
(166,55,0)
(141,111,0)
(73,162,0)
(0,52,0)
(57,165,0)
(4,182,0)
(204,49,0)
(154,3,0)
(28,182,0)
(198,162,0)
(4,114,0)
(42,97,0)
(149,164,0)
(119,75,0)
(140,89,0)
(155,93,1)
(105,8,1)
(103,182,1)
(79,13,1)
(149,164,1)
(104,52,1)
(171,13,1)
(26,52,1)
(20,199,1)
(201,25,1)
(178,101,1)
(90,142,1)
(141,149,1)
(92,13,1)
(191,10,1)
(142,182,1)
(162,73,1)
(87,39,1)
(0,52,1)
(73,132,1)
(58,97,1)
(13,0,1)
(154,131,1)
(167,124,1)
(9,179,1)
(109,74,1)
(129,116,1)
(40,114,1)
(0,147,1)
(169,62,1)
(71,23,1)
(180,179,1)
(89,140,1)
(39,182,1)
(205,182,1)
(93,58,1)
(135,111,1)
(193,41,1)
(33,44,1)
(84,47,1)
(26,16,1)
(57,117,1)
(122,97,1)
(32,45,1)
(94,152,1)
(126,114,1)
(72,22,1)
(41,13,1)
(174,90,1)
(141,173,1)
(212,91,1)
(151,182,1)
(44,4,1)
(14,101,1)
(26,179,1)
(25,31,1)
(61,92,1)
(141,89,1)
(205,110,1)
(140,121,1)
(81,162,1)
(4,203,1)
(11,91,1)
(25,182,1)
(65,136,1)
(68,207,1)
(171,112,1)
(86,96,1)
(88,76,1)
(114,9,1)
(46,105,1)
(170,79,1)
(138,114,1)
(156,138,1)
(125,166,1)
(125,154,1)
(171,132,1)
(175,193,1)
(96,114,1)
(161,50,1)
(2,75,1)
(126,165,1)
(121,212,1)
(59,127,1)
(173,171,1)
(6,65,1)
(127,62,1)
(199,84,1)
(39,189,1)
(157,94,1)
(138,161,1)
(191,17,1)
(206,87,1)
(211,173,1)
(75,27,1)
(42,192,1)
(187,45,1)
(34,5,1)
(128,184,1)
(103,137,1)
(8,2,1)
(166,165,1)
(176,11,1)
(41,182,1)
(138,49,1)
(194,182,1)
(40,165,1)
(80,142,1)
(4,182,1)
(100,63,1)
(2,159,1)
(94,156,1)
(118,182,1)
(142,114,1)
(136,107,1)
(6,182,1)
(66,209,1)
(45,123,1)
(23,15,1)
(207,135,1)
(184,95,1)
(40,177,1)
(210,52,1)
(165,57,1)
(187,39,1)
(208,126,1)
(151,82,1)
(4,114,1)
(41,51,1)
(169,208,1)
(17,26,1)
(64,106,1)
(137,211,1)
(158,40,1)
(76,48,1)
(163,103,1)
(68,182,1)
(130,35,1)
(24,159,1)
(26,182,1)
(198,98,1)
(160,33,1)
(187,194,1)
(139,210,1)
(70,67,1)
(27,119,1)
(125,54,1)
(119,21,1)
(108,102,1)
(171,182,1)
(187,167,1)
(43,157,1)
(35,64,1)
(108,141,1)
(40,182,1)
(162,198,1)
(18,153,1)
(124,70,1)
(116,118,1)
(159,179,1)
(126,182,1)
(106,149,1)
(15,92,1)
(146,32,1)
(73,13,1)
(179,195,1)
(167,182,1)
(209,129,1)
(82,99,1)
(101,37,1)
(31,77,1)
(97,182,1)
(45,182,1)
(116,145,1)
(145,52,1)
(85,178,1)
(29,109,1)
(49,204,1)
(148,163,1)
(147,28,1)
(177,175,1)
(30,68,1)
(50,167,1)
(90,80,1)
(107,43,1)
(28,34,1)
(75,182,1)
(92,170,1)
(144,133,1)
(133,125,1)
(123,180,1)
(113,66,1)
(133,52,1)
(141,169,1)
(97,42,1)
(126,49,1)
(107,182,1)
(112,71,1)
(196,158,1)
(73,182,1)
(51,81,1)
(134,205,1)
(126,59,1)
(53,148,1)
(118,20,1)
(102,14,1)
(58,122,1)
(67,134,1)
(191,182,1)
(197,179,1)
(7,15,1)
(15,61,1)
(142,86,1)
(187,6,1)
(141,111,1)
(125,128,1)
(47,145,1)
(91,113,1)
(152,29,1)
(192,17,1)
(95,30,1)
(111,191,1)
(187,28,1)
(133,131,1)
(187,25,1)
(168,156,1)
(97,17,1)
(5,90,1)
(195,104,1)
(73,53,1)
(204,201,1)
(37,151,1)
(131,18,1)
(74,139,1)
(9,1,1)
(203,190,1)
(210,168,1)
(108,187,1)
(175,162,1)
(187,205,1)
(21,24,1)
(183,48,1)
(91,129,1)
(197,144,1)
(153,89,1)
(164,202,1)
(4,49,1)
(145,88,1)
(102,37,1)
(62,40,1)
(54,53,1)
(10,155,1)
(92,132,1)
(77,132,1)
(41,53,1)
(197,35,1)
(74,179,1)
(202,183,1)
(141,44,1)
(181,58,1)
(194,176,1)
(48,8,1)
(159,85,1)
(138,182,1)
(190,174,1)
(1,194,1)
(19,160,1)
(110,181,1)
(52,100,1)
(73,72,1)
(62,196,1)
(189,7,1)
(16,206,1)
(99,49,1)
(142,49,1)
(125,130,1)
(94,182,1)
(136,94,1)
(19,182,1)
(28,182,1)
(22,197,1)
(41,132,1)
(92,182,1)
(132,146,1)
(98,73,1)
(12,46,1)
(48,12,1)
(40,49,1)
(117,19,1)
(87,15,2)
(40,90,2)
(163,15,2)
(39,182,2)
(133,90,2)
(61,90,2)
(168,58,2)
(167,58,2)
(141,91,2)
(9,179,2)
(111,191,2)
(142,91,2)
(21,101,2)
(137,15,2)
(148,15,2)
(46,101,2)
(173,171,2)
(139,58,2)
(125,15,2)
(11,91,2)
(96,91,2)
(0,52,2)
(173,15,2)
(73,13,2)
(117,90,2)
(22,90,2)
(196,91,2)
(103,15,2)
(133,58,2)
(97,17,2)
(187,205,2)
(79,90,2)
(130,48,2)
(98,91,2)
(116,145,2)
(64,48,2)
(19,182,2)
(156,58,2)
(62,48,2)
(102,101,2)
(194,182,2)
(208,126,2)
(133,15,2)
(72,90,2)
(116,48,2)
(53,148,2)
(92,90,2)
(76,48,2)
(28,90,2)
(41,13,2)
(48,12,2)
(197,48,2)
(107,58,2)
(159,101,2)
(118,48,2)
(162,91,2)
(118,182,2)
(40,58,2)
(191,17,2)
(126,182,2)
(141,48,2)
(40,15,2)
(129,48,2)
(72,58,2)
(169,15,2)
(75,101,2)
(67,58,2)
(105,101,2)
(138,49,2)
(171,182,2)
(175,58,2)
(187,39,2)
(41,182,2)
(151,182,2)
(141,89,2)
(138,182,2)
(141,44,2)
(113,48,2)
(116,118,2)
(14,101,2)
(4,114,2)
(174,90,2)
(97,15,2)
(209,48,2)
(159,179,2)
(91,113,2)
(177,48,2)
(57,90,2)
(73,132,2)
(108,102,2)
(40,91,2)
(62,40,2)
(68,58,2)
(138,114,2)
(158,91,2)
(165,57,2)
(158,15,2)
(74,58,2)
(4,90,2)
(177,15,2)
(103,182,2)
(147,90,2)
(94,58,2)
(91,48,2)
(1,91,2)
(62,90,2)
(158,90,2)
(110,58,2)
(84,48,2)
(49,204,2)
(126,62,2)
(133,91,2)
(24,101,2)
(149,164,2)
(98,48,2)
(34,90,2)
(171,13,2)
(169,91,2)
(138,58,2)
(162,15,2)
(59,62,2)
(98,90,2)
(142,182,2)
(48,8,2)
(25,182,2)
(22,58,2)
(196,15,2)
(98,58,2)
(156,138,2)
(13,0,2)
(27,101,2)
(205,58,2)
(119,101,2)
(106,48,2)
(92,132,2)
(178,101,2)
(54,15,2)
(149,48,2)
(211,15,2)
(62,58,2)
(88,48,2)
(131,91,2)
(37,151,2)
(2,159,2)
(102,37,2)
(193,41,2)
(191,58,2)
(144,91,2)
(210,58,2)
(97,182,2)
(165,90,2)
(192,15,2)
(157,58,2)
(135,58,2)
(71,15,2)
(162,48,2)
(114,9,2)
(39,15,2)
(107,182,2)
(177,58,2)
(35,48,2)
(167,182,2)
(44,4,2)
(70,58,2)
(30,58,2)
(121,91,2)
(43,58,2)
(144,58,2)
(58,97,2)
(66,48,2)
(198,90,2)
(164,48,2)
(4,182,2)
(95,58,2)
(4,49,2)
(162,58,2)
(196,90,2)
(124,58,2)
(198,91,2)
(162,90,2)
(72,91,2)
(109,58,2)
(181,58,2)
(40,114,2)
(90,142,2)
(33,90,2)
(197,179,2)
(155,58,2)
(89,140,2)
(41,162,2)
(187,167,2)
(184,95,2)
(7,15,2)
(196,58,2)
(212,91,2)
(10,58,2)
(41,53,2)
(8,2,2)
(205,182,2)
(125,48,2)
(73,90,2)
(129,116,2)
(12,101,2)
(144,15,2)
(136,107,2)
(191,182,2)
(58,15,2)
(85,101,2)
(197,58,2)
(187,28,2)
(125,91,2)
(171,15,2)
(175,90,2)
(136,94,2)
(169,58,2)
(45,182,2)
(187,45,2)
(140,91,2)
(98,15,2)
(126,165,2)
(5,90,2)
(68,182,2)
(28,182,2)
(184,58,2)
(73,48,2)
(154,91,2)
(22,48,2)
(162,198,2)
(161,58,2)
(196,48,2)
(162,73,2)
(141,173,2)
(26,182,2)
(23,15,2)
(92,182,2)
(193,162,2)
(65,58,2)
(177,90,2)
(29,58,2)
(19,90,2)
(17,26,2)
(145,48,2)
(53,15,2)
(141,15,2)
(20,48,2)
(187,194,2)
(73,15,2)
(40,165,2)
(73,53,2)
(177,91,2)
(26,52,2)
(142,114,2)
(171,132,2)
(133,131,2)
(2,75,2)
(114,91,2)
(125,58,2)
(90,91,2)
(62,91,2)
(40,48,2)
(108,187,2)
(22,15,2)
(74,179,2)
(94,156,2)
(145,52,2)
(189,15,2)
(203,90,2)
(170,90,2)
(73,58,2)
(86,91,2)
(80,91,2)
(125,90,2)
(47,48,2)
(112,15,2)
(175,91,2)
(166,90,2)
(183,48,2)
(197,35,2)
(15,92,2)
(40,182,2)
(126,49,2)
(26,15,2)
(8,101,2)
(72,48,2)
(111,58,2)
(169,90,2)
(48,101,2)
(190,90,2)
(51,162,2)
(128,58,2)
(141,58,2)
(44,90,2)
(73,182,2)
(175,48,2)
(42,15,2)
(72,15,2)
(73,91,2)
(127,62,2)
(134,58,2)
(169,48,2)
(50,58,2)
(133,52,2)
(41,132,2)
(160,90,2)
(142,49,2)
(6,58,2)
(75,182,2)
(16,15,2)
(158,48,2)
(62,196,2)
(198,58,2)
(198,15,2)
(187,25,2)
(122,15,2)
(144,48,2)
(93,58,2)
(94,182,2)
(199,48,2)
(17,15,2)
(18,91,2)
(108,141,2)
(2,101,2)
(197,15,2)
(198,48,2)
(175,15,2)
(136,58,2)
(187,58,2)
(62,15,2)
(126,114,2)
(153,91,2)
(89,91,2)
(15,90,2)
(176,91,2)
(91,129,2)
(208,62,2)
(132,146,2)
(141,90,2)
(40,49,2)
(206,15,2)
(141,111,2)
(152,58,2)
(13,90,2)
(133,48,2)
(197,91,2)
(26,179,2)
(144,90,2)
(210,52,2)
(158,58,2)
(141,149,2)
(81,162,2)
(92,13,2)
(197,90,2)
(194,91,2)
(9,91,2)
(207,58,2)
(6,182,2)
(0,90,2)
(202,48,2)
(22,91,2)
-----------------------------------
(0,tapdisk_channel_open_control_socket(read_dev)
(1,write_dev)
(2,asprintf(&write_dev,\n\\n\\t\\t       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor)
(3,)
(4,channel->write_fd)
(5,channel)
(6,tapdisk_channel_send_pid_request(channel)
(7,channel)
(8,err = asprintf(&write_dev,\n\\n\\t\\t       "%s/tapctrlwrite%d", BLKTAP_CTRL_DIR, channel->minor)
(9,tapdisk_channel_open_control_socket(write_dev)
(10,tapdisk_pid)
(11,channel)
(12,-1)
(13,channel->read_fd = tapdisk_channel_open_control_socket(read_dev)
(14,err)
(15,channel->read_fd < 0)
(16,read_dev)
(17,channel->tapdisk_pid =\n\\n\\t\\ttapdisk_channel_start_process(channel, write_dev, read_dev)
(18,NULL)
(19,channel->write_fd)
(20,minor)
(21,BLKTAP_CTRL_DIR)
(22,channel)
(23,err)
(24,"%s/tapctrlwrite%d")
(25,channel->write_fd)
(26,tapdisk_channel_start_process(channel, write_dev, read_dev)
(27,minor)
(28,channel->read_fd)
(29,channel)
(30,1)
(31,write_fd)
(32,1)
(33,channel)
(34,read_fd)
(35,write_dev = NULL)
(36,)
(37,err = tapdisk_channel_get_device_number(channel)
(38,if (channel->tapdisk_pid < 0)
(39,channel->tapdisk_pid)
(40,channel->write_fd)
(41,channel->read_fd)
(42,tapdisk_pid)
(43,cookie)
(44,err = channel->write_fd)
(45,channel->read_fd)
(46,1)
(47,"%s/tapctrlread%d")
(48,err == -1)
(49,channel->write_fd = -1)
(50,channel)
(51,read_fd)
(52,read_dev          = NULL)
(53,channel->read_fd = -1)
(54,goto fail;)
(55,)
(56,)
(57,-1)
(58,channel->tapdisk_pid < 0)
(59,write_fd)
(60,if (channel->read_fd != -1)
(61,0)
(62,channel->write_fd != -1)
(63,read_dev)
(64,NULL)
(65,channel)
(66,1)
(67,channel->open       = 1)
(68,channel->tapdisk_pid)
(69,if (channel->write_fd != -1)
(70,channel)
(71,channel)
(72,read_fd)
(73,channel->read_fd)
(74,free(write_dev)
(75,channel->minor)
(76,err)
(77,channel)
(78,if (err)
(79,channel)
(80,0)
(81,channel)
(82,channel)
(83,fail:)
(84,BLKTAP_CTRL_DIR)
(85,write_dev)
(86,write_fd)
(87,channel)
(88,read_dev)
(89,err = -ENOMEM)
(90,channel->write_fd < 0)
(91,err == -1)
(92,channel->read_fd)
(93,err)
(94,channel->channel_id)
(95,-1)
(96,channel)
(97,channel->tapdisk_pid)
(98,1)
(99,err)
(100,NULL)
(101,err)
(102,return err;)
(103,channel->read_fd)
(104,write_dev)
(105,err)
(106,write_dev)
(107,channel->cookie)
(108,RET)
(109,"process launched, channel = %d:%d\\n")
(110,open)
(111,err = channel->tapdisk_pid)
(112,read_fd)
(113,-1)
(114,channel->write_fd = tapdisk_channel_open_control_socket(write_dev)
(115,if (err == -1)
(116,asprintf(&read_dev,\n\\n\\t\\t       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor)
(117,1)
(118,channel->minor)
(119,channel)
(120,)
(121,ENOMEM)
(122,0)
(123,read_fd)
(124,channel_id)
(125,read_dev)
(126,channel->write_fd)
(127,channel)
(128,goto fail;)
(129,err = asprintf(&read_dev,\n\\n\\t\\t       "%s/tapctrlread%d", BLKTAP_CTRL_DIR, channel->minor)
(130,goto fail;)
(131,read_dev = NULL)
(132,channel->read_fd  = -1)
(133,free(read_dev)
(134,1)
(135,channel)
(136,DPRINTF("process launched, channel = %d:%d\\n",\n\\n\\t\\tchannel->channel_id, channel->cookie)
(137,read_fd)
(138,channel->write_fd)
(139,write_dev)
(140,-ENOMEM)
(141,return err;)
(142,channel->write_fd)
(143,if (err == -1)
(144,write_dev)
(145,&read_dev)
(146,-1)
(147,read_dev)
(148,-1)
(149,err = -ENOMEM)
(150,if (channel->read_fd < 0)
(151,tapdisk_channel_get_device_number(channel)
(152,channel_id)
(153,read_dev)
(154,goto fail;)
(155,channel)
(156,channel->channel_id = channel->write_fd)
(157,channel)
(158,1)
(159,&write_dev)
(160,write_fd)
(161,write_fd)
(162,channel->read_fd != -1)
(163,1)
(164,-ENOMEM)
(165,channel->write_fd = -1)
(166,goto fail;)
(167,channel->channel_id)
(168,read_dev)
(169,err)
(170,read_fd)
(171,channel->read_fd)
(172,write_dev)
(173,err = channel->read_fd)
(174,err)
(175,channel)
(176,write_fd)
(177,write_fd)
(178,err)
(179,write_dev         = NULL)
(180,channel)
(181,channel)
(182,tapdisk_channel_t *channel)
(183,err)
(184,channel->tapdisk_pid = -1)
(185,)
(186,if (channel->write_fd < 0)
(187,return tapdisk_channel_send_pid_request(channel)
(188,err)
(189,tapdisk_pid)
(190,channel)
(191,channel->tapdisk_pid)
(192,channel)
(193,close(channel->read_fd)
(194,channel->write_fd)
(195,NULL)
(196,-1)
(197,free(write_dev)
(198,-1)
(199,channel)
(200,read_dev)
(201,1)
(202,ENOMEM)
(203,write_fd)
(204,-1)
(205,channel->open)
(206,write_dev)
(207,tapdisk_pid)
(208,close(channel->write_fd)
(209,err)
(210,free(read_dev)
(211,channel)
(212,err)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^