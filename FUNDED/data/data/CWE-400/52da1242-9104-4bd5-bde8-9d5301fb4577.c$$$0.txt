-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_63b_badSink(int * countPtr)
{
    int count = *countPtr;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
42,44
42,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
54,55
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
96,99
96,100
96,101
97,98
99,100
101,102
102,103
102,104
105,106
105,107
106,107
108,109
110,111
112,113
113,114
114,115
114,116
115,116
118,119
118,120
119,120
121,122
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,6,8,9,13,15,19,24,26,28,32,34,35,38,41,43,44,46,50,53,55,56,60,62,67,68,73,74,77,81,82,84,87,93,95,98,100,103,104,107,109,111,116,117,120,125,127
-----computeFrom-----
48,49
48,50
58,59
58,60
71,72
71,73
75,76
75,77
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_63b_badSink(int * countPtr){    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_63b_badSink(int * countPtr)
CWE400_Resource_Exhaustion__fscanf_fwrite_63b_badSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(9,23,0)
(51,4,0)
(48,56,0)
(45,14,0)
(39,54,0)
(40,22,0)
(54,39,0)
(46,35,0)
(60,59,0)
(62,0,0)
(19,34,0)
(23,56,0)
(16,1,0)
(11,59,0)
(56,23,0)
(8,16,0)
(0,15,0)
(27,34,0)
(41,59,0)
(28,23,0)
(12,7,0)
(23,63,0)
(57,4,0)
(5,59,0)
(29,59,0)
(58,59,0)
(52,59,0)
(43,39,0)
(7,4,0)
(62,26,0)
(59,15,0)
(36,38,0)
(0,62,0)
(16,29,0)
(22,29,0)
(35,53,0)
(20,2,0)
(49,29,0)
(37,29,0)
(34,59,0)
(31,62,0)
(17,22,0)
(39,0,0)
(29,22,0)
(24,49,0)
(63,23,0)
(23,9,0)
(7,39,0)
(42,60,0)
(18,4,0)
(13,2,0)
(47,0,0)
(39,7,0)
(33,25,0)
(14,9,0)
(9,14,0)
(21,60,0)
(50,18,0)
(22,34,0)
(32,59,0)
(30,63,0)
(23,29,0)
(3,23,0)
(38,6,0)
(10,15,0)
(55,49,0)
(2,59,0)
(23,29,1)
(21,42,1)
(14,45,1)
(31,47,1)
(46,9,1)
(9,23,1)
(2,20,1)
(20,13,1)
(30,28,1)
(16,29,1)
(0,62,1)
(39,54,1)
(13,0,1)
(62,26,1)
(60,21,1)
(34,19,1)
(7,39,1)
(28,14,1)
(48,63,1)
(51,49,1)
(35,46,1)
(57,51,1)
(39,43,1)
(27,60,1)
(12,4,1)
(23,56,1)
(61,7,1)
(16,8,1)
(9,14,1)
(42,2,1)
(40,37,1)
(51,38,1)
(45,7,1)
(38,36,1)
(50,9,1)
(39,0,1)
(3,56,1)
(44,16,1)
(7,4,1)
(17,40,1)
(29,22,1)
(55,24,1)
(36,49,1)
(23,3,1)
(4,57,1)
(44,61,1)
(50,35,1)
(8,61,1)
(56,48,1)
(18,4,1)
(37,34,1)
(63,30,1)
(12,18,1)
(43,12,1)
(22,17,1)
(18,50,1)
(22,34,1)
(24,29,1)
(62,31,1)
(49,29,1)
(19,27,1)
(49,55,1)
(23,63,1)
(9,14,2)
(12,7,2)
(18,7,2)
(22,34,2)
(28,7,2)
(38,49,2)
(29,22,2)
(23,63,2)
(9,7,2)
(23,7,2)
(23,56,2)
(48,7,2)
(62,26,2)
(45,7,2)
(30,7,2)
(18,4,2)
(43,7,2)
(16,61,2)
(39,0,2)
(14,7,2)
(7,4,2)
(7,7,2)
(35,9,2)
(39,54,2)
(7,39,2)
(39,7,2)
(50,7,2)
(0,62,2)
(46,9,2)
(36,49,2)
(63,7,2)
(56,7,2)
(49,29,2)
(8,61,2)
(3,7,2)
(16,29,2)
(9,23,2)
(23,29,2)
-----------------------------------
(0,count = *countPtr)
(1,)
(2,i = 0)
(3,pFile)
(4,i = 0)
(5,if (pFile)
(6,)
(7,i < (size_t)
(8,pFile)
(9,strlen(SENTENCE)
(10,count)
(11,i)
(12,i)
(13,i)
(14,strlen(SENTENCE)
(15,)
(16,fclose(pFile)
(17,"w+")
(18,i++)
(19,"output_bad.txt")
(20,0)
(21,NULL)
(22,fopen(filename, "w+")
(23,fwrite(SENTENCE, sizeof(char)
(24,pFile)
(25,)
(26,int * countPtr)
(27,filename)
(28,SENTENCE)
(29,pFile = fopen(filename, "w+")
(30,char)
(31,countPtr)
(32,if (pFile == NULL)
(33,if (strlen(SENTENCE)
(34,*filename = "output_bad.txt")
(35,exit(1)
(36,1)
(37,pFile)
(38,exit(1)
(39,(size_t)
(40,filename)
(41,for (i = 0; i < (size_t)
(42,pFile)
(43,count)
(44,RET)
(45,SENTENCE)
(46,1)
(47,count)
(48,SENTENCE)
(49,pFile == NULL)
(50,i)
(51,i)
(52,pFile)
(53,)
(54,size_t)
(55,NULL)
(56,strlen(SENTENCE)
(57,0)
(58,filename)
(59,)
(60,*pFile = NULL)
(61,pFile)
(62,*countPtr)
(63,sizeof(char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^