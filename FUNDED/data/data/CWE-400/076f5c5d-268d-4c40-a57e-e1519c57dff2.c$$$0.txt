-----label-----
0
-----code-----
static bool dccp_can_early_drop(const struct nf_conn *ct)
{
	switch (ct->proto.dccp.state) {
	case CT_DCCP_CLOSEREQ:
	case CT_DCCP_CLOSING:
	case CT_DCCP_TIMEWAIT:
		return true;
	default:
		break;
	}

	return false;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
12,14
13,14
13,15
14,15
14,16
15,16
15,17
16,17
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
25,26
26,27
28,29
29,30
31,32
35,36
-----nextToken-----
2,4,7,9,10,17,18,19,20,24,27,30,32,33,34,36
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;SwitchStatement;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ReturnStatement;LiteralExpression;DefaultStatement;BreakStatement;ReturnStatement;LiteralExpression;
-----ast_node-----
static bool dccp_can_early_drop(const struct nf_conn *ct){	switch (ct->proto.dccp.state) {	case CT_DCCP_CLOSEREQ:	case CT_DCCP_CLOSING:	case CT_DCCP_TIMEWAIT:		return true;	default:		break;	}	return false;}
static bool
dccp_can_early_drop(const struct nf_conn *ct)
dccp_can_early_drop
const struct nf_conn *ct
const struct nf_conn
nf_conn
*ct
*
ct
{	switch (ct->proto.dccp.state) {	case CT_DCCP_CLOSEREQ:	case CT_DCCP_CLOSING:	case CT_DCCP_TIMEWAIT:		return true;	default:		break;	}	return false;}
switch (ct->proto.dccp.state) {	case CT_DCCP_CLOSEREQ:	case CT_DCCP_CLOSING:	case CT_DCCP_TIMEWAIT:		return true;	default:		break;	}
ct->proto.dccp.state
ct->proto.dccp
ct->proto
ct
ct
proto
dccp
state
{	case CT_DCCP_CLOSEREQ:	case CT_DCCP_CLOSING:	case CT_DCCP_TIMEWAIT:		return true;	default:		break;	}
case CT_DCCP_CLOSEREQ:
CT_DCCP_CLOSEREQ
CT_DCCP_CLOSEREQ
case CT_DCCP_CLOSING:
CT_DCCP_CLOSING
CT_DCCP_CLOSING
case CT_DCCP_TIMEWAIT:
CT_DCCP_TIMEWAIT
CT_DCCP_TIMEWAIT
return true;
true
default:
break;
return false;
false
-----joern-----
(18,0,0)
(19,12,0)
(10,0,0)
(16,0,0)
(19,6,0)
(11,1,0)
(14,17,0)
(11,2,0)
(13,15,0)
(4,11,0)
(1,15,0)
(12,17,0)
(6,0,0)
(15,1,0)
(3,6,0)
(9,11,0)
(7,12,0)
(8,0,0)
(1,11,0)
(5,0,0)
(20,1,0)
(12,7,1)
(11,9,1)
(19,12,1)
(1,20,1)
(19,6,1)
(11,2,1)
(15,1,1)
(15,13,1)
(7,16,1)
(20,11,1)
(13,1,1)
(6,3,1)
(1,11,1)
(9,4,1)
(3,15,1)
(16,15,1)
(15,1,2)
(11,2,2)
(16,15,2)
(19,6,2)
(7,15,2)
(12,15,2)
(3,15,2)
(1,11,2)
(6,15,2)
(19,12,2)
-----------------------------------
(0,)
(1,ct->proto.dccp)
(2,const struct nf_conn *ct)
(3,true)
(4,ct)
(5,case CT_DCCP_TIMEWAIT:)
(6,return true;)
(7,false)
(8,case CT_DCCP_CLOSING:)
(9,proto)
(10,default:)
(11,ct->proto)
(12,return false;)
(13,state)
(14,switch (ct->proto.dccp.state)
(15,ct->proto.dccp.state)
(16,break;)
(17,)
(18,case CT_DCCP_CLOSEREQ:)
(19,RET)
(20,dccp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^