-----label-----
0
-----code-----
static void good1()
{
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            char * tmpData;
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            tmpData = (char *)realloc(data, (130000)*sizeof(char));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
8,9
9,10
10,11
10,12
11,12
14,15
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
16,17
17,18
17,19
19,20
19,21
19,22
22,23
23,24
23,25
24,25
24,26
26,27
28,29
28,30
29,30
31,32
31,33
33,34
34,35
34,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
53,54
53,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
70,71
70,72
71,72
73,74
73,75
74,75
74,76
76,77
78,79
78,80
78,81
79,80
81,82
83,84
83,85
84,85
86,87
87,88
87,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
96,99
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
104,107
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,7,12,13,18,20,21,25,27,30,32,35,36,40,42,47,49,52,54,55,59,61,62,66,68,72,75,77,80,82,85,88,89,93,95,100,102,106,108,109,113,115,119,121
-----computeFrom-----
31,32
31,33
38,39
38,40
70,71
70,72
83,84
83,85
91,92
91,93
98,99
98,100
-----guardedBy-----
93,102
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
static void
good1()
good1
{    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }}
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
char * tmpData;
char * tmpData;
char
* tmpData
*
tmpData
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
tmpData = (char *)realloc(data, (130000)*sizeof(char));
tmpData = (char *)realloc(data, (130000)*sizeof(char))
tmpData
tmpData
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(15,47,0)
(18,5,0)
(46,0,0)
(31,49,0)
(4,32,0)
(35,48,0)
(51,47,0)
(30,42,0)
(14,41,0)
(3,48,0)
(47,15,0)
(53,17,0)
(25,17,0)
(39,47,0)
(49,31,0)
(1,12,0)
(19,41,0)
(24,47,0)
(31,10,0)
(12,57,0)
(54,10,0)
(15,30,0)
(28,24,0)
(0,57,0)
(56,17,0)
(57,10,0)
(32,17,0)
(10,17,0)
(8,50,0)
(41,19,0)
(8,57,0)
(33,0,0)
(57,50,0)
(26,57,0)
(16,21,0)
(20,57,0)
(39,48,0)
(29,39,0)
(31,39,0)
(19,52,0)
(11,40,0)
(40,10,0)
(15,36,0)
(39,31,0)
(2,8,0)
(13,35,0)
(10,31,0)
(17,9,0)
(45,24,0)
(36,15,0)
(38,42,0)
(30,15,0)
(32,47,0)
(42,27,0)
(7,40,0)
(21,47,0)
(48,35,0)
(22,17,0)
(37,55,0)
(0,50,0)
(21,17,0)
(44,18,0)
(12,47,0)
(47,17,0)
(42,30,0)
(48,39,0)
(12,17,0)
(27,42,0)
(6,32,0)
(34,27,0)
(7,10,1)
(21,47,1)
(48,35,1)
(44,23,1)
(57,10,1)
(12,57,1)
(38,51,1)
(35,13,1)
(30,42,1)
(12,1,1)
(16,32,1)
(41,14,1)
(57,20,1)
(29,54,1)
(34,38,1)
(28,45,1)
(0,57,1)
(1,8,1)
(13,3,1)
(47,15,1)
(24,28,1)
(6,19,1)
(31,39,1)
(39,47,1)
(26,40,1)
(43,12,1)
(18,44,1)
(32,47,1)
(10,31,1)
(19,41,1)
(0,33,1)
(45,47,1)
(2,0,1)
(8,2,1)
(51,23,1)
(43,18,1)
(54,21,1)
(15,30,1)
(20,26,1)
(8,57,1)
(46,57,1)
(15,36,1)
(33,46,1)
(12,47,1)
(3,29,1)
(24,47,1)
(11,7,1)
(42,27,1)
(31,49,1)
(39,48,1)
(4,6,1)
(21,16,1)
(1,40,1)
(6,24,1)
(40,11,1)
(14,24,1)
(27,34,1)
(40,10,1)
(32,4,1)
(30,23,2)
(6,23,2)
(19,41,2)
(46,40,2)
(47,23,2)
(42,27,2)
(11,23,2)
(2,40,2)
(12,47,2)
(15,23,2)
(40,10,2)
(15,36,2)
(48,23,2)
(32,23,2)
(35,23,2)
(16,23,2)
(40,23,2)
(30,42,2)
(45,23,2)
(31,23,2)
(33,40,2)
(4,23,2)
(48,35,2)
(51,23,2)
(26,40,2)
(57,40,2)
(38,23,2)
(41,24,2)
(39,47,2)
(31,49,2)
(39,48,2)
(8,40,2)
(44,23,2)
(39,23,2)
(0,40,2)
(0,57,2)
(7,23,2)
(15,30,2)
(32,47,2)
(34,23,2)
(3,23,2)
(31,39,2)
(10,23,2)
(28,23,2)
(24,23,2)
(42,23,2)
(20,40,2)
(29,23,2)
(13,23,2)
(54,23,2)
(47,15,2)
(21,23,2)
(24,47,2)
(57,10,2)
(12,57,2)
(27,23,2)
(21,47,2)
(18,23,2)
(1,23,2)
(10,31,2)
(14,24,2)
(8,57,2)
(19,24,2)
(12,23,2)
-----------------------------------
(0,strcpy(data, "New String")
(1,data)
(2,data)
(3,130000)
(4,"A String")
(5,)
(6,data)
(7,tmpData)
(8,printLine(data)
(9,)
(10,tmpData = (char *)
(11,NULL)
(12,free(data)
(13,char)
(14,1)
(15,(char *)
(16,data)
(17,)
(18,printLine("Benign, fixed string")
(19,exit(-1)
(20,tmpData)
(21,printLine(data)
(22,tmpData)
(23,0)
(24,data == NULL)
(25,if (tmpData != NULL)
(26,data)
(27,sizeof(char)
(28,NULL)
(29,data)
(30,malloc(100*sizeof(char)
(31,(char *)
(32,strcpy(data, "A String")
(33,"New String")
(34,char)
(35,sizeof(char)
(36,char *)
(37,if(0)
(38,100)
(39,realloc(data, (130000)
(40,tmpData != NULL)
(41,-1)
(42,100*sizeof(char)
(43,RET)
(44,"Benign, fixed string")
(45,data)
(46,data)
(47,* data = (char *)
(48,(130000)
(49,char *)
(50,)
(51,data)
(52,)
(53,data)
(54,tmpData)
(55,)
(56,if (data == NULL)
(57,data = tmpData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^