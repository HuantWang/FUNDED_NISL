-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_16_bad()
{
    char * data;
    data = NULL;
    while(1)
    {
        {
            char myString[] = "myString";
            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */
            data = strdup(myString);
            /* Use data */
            printLine(data);
        }
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
21,22
21,23
21,24
22,23
23,24
23,25
25,26
25,27
25,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
40,41
40,42
41,42
43,44
46,47
46,48
48,49
48,50
-----nextToken-----
2,4,8,10,11,15,17,19,24,26,27,29,33,36,38,42,44,45,47,49,50
-----computeFrom-----
13,14
13,15
31,32
31,33
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_16_bad(){    char * data;    data = NULL;    while(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__strdup_char_16_bad()
CWE401_Memory_Leak__strdup_char_16_bad
{    char * data;    data = NULL;    while(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        break;    }
1
{        {            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }        break;    }
{            char myString[] = "myString";            /* POTENTIAL FLAW: Allocate memory from the heap using a function that requires free() for deallocation */            data = strdup(myString);            /* Use data */            printLine(data);        }
char myString[] = "myString";
char myString[] = "myString";
char
myString[] = "myString"
myString
[]
= "myString"
"myString"
data = strdup(myString);
data = strdup(myString)
data
data
strdup(myString)
strdup
strdup
myString
myString
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(13,4,0)
(3,4,0)
(22,12,0)
(11,3,0)
(12,1,0)
(23,15,0)
(10,23,0)
(7,4,0)
(5,15,0)
(1,12,0)
(9,1,0)
(18,14,0)
(6,22,0)
(24,12,0)
(1,10,0)
(0,10,0)
(17,23,0)
(12,23,0)
(22,23,0)
(8,10,0)
(19,4,0)
(21,3,0)
(0,16,1)
(24,10,1)
(1,10,1)
(2,20,1)
(16,3,1)
(3,21,1)
(22,12,1)
(20,16,1)
(21,11,1)
(2,18,1)
(5,22,1)
(6,12,1)
(10,8,1)
(1,9,1)
(18,20,1)
(22,6,1)
(12,1,1)
(20,5,1)
(9,24,1)
(8,0,1)
(6,16,2)
(12,1,2)
(1,10,2)
(24,16,2)
(8,16,2)
(1,16,2)
(22,12,2)
(5,16,2)
(22,16,2)
(12,16,2)
(9,16,2)
(0,16,2)
(18,20,2)
(10,16,2)
-----------------------------------
(0,myString)
(1,strdup(myString)
(2,RET)
(3,data = NULL)
(4,)
(5,break;)
(6,data)
(7,while(1)
(8,"myString")
(9,myString)
(10,myString[] = "myString")
(11,data)
(12,data = strdup(myString)
(13,data)
(14,)
(15,)
(16,1)
(17,myString)
(18,break;)
(19,while(1)
(20,1)
(21,NULL)
(22,printLine(data)
(23,)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^