-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_44_bad()
{
    int count;
    /* define a function pointer */
    void (*funcPtr) (int) = badSink;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    /* use the function pointer */
    funcPtr(count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
31,33
32,33
33,34
33,35
35,36
35,37
35,38
37,38
38,39
40,41
42,43
42,44
42,45
43,44
43,45
44,45
44,46
44,47
44,48
45,46
47,48
49,50
51,52
53,54
55,56
56,57
57,58
57,59
58,59
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,30,34,36,39,41,46,48,50,52,54,59,62,64,69,70,74,76
-----computeFrom-----
26,27
26,28
43,44
43,45
57,58
57,59
-----guardedBy-----
48,64
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_44_bad(){    int count;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* use the function pointer */    funcPtr(count);}
void
CWE400_Resource_Exhaustion__fgets_sleep_44_bad()
CWE400_Resource_Exhaustion__fgets_sleep_44_bad
{    int count;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    /* use the function pointer */    funcPtr(count);}
int count;
int count;
int
count
count
void (*funcPtr) (int) = badSink;
void (*funcPtr) (int) = badSink;
void
(*funcPtr) (int) = badSink
*funcPtr
*
funcPtr
int
int


= badSink
badSink
badSink
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
funcPtr(count);
funcPtr(count)
funcPtr
funcPtr
count
count
-----joern-----
(0,15,0)
(30,1,0)
(12,19,0)
(15,28,0)
(24,11,0)
(27,31,0)
(18,6,0)
(25,6,0)
(28,25,0)
(5,19,0)
(20,15,0)
(11,6,0)
(2,3,0)
(10,28,0)
(17,25,0)
(11,0,0)
(16,6,0)
(13,18,0)
(7,19,0)
(32,25,0)
(31,6,0)
(21,26,0)
(14,0,0)
(11,31,0)
(19,3,0)
(9,28,0)
(26,31,0)
(15,0,0)
(31,26,0)
(0,22,0)
(23,18,0)
(19,28,0)
(8,6,0)
(3,19,0)
(29,30,0)
(14,3,1)
(24,30,1)
(3,2,1)
(21,27,1)
(24,0,1)
(11,0,1)
(19,12,1)
(27,18,1)
(15,20,1)
(11,24,1)
(30,29,1)
(15,28,1)
(3,19,1)
(11,31,1)
(18,13,1)
(7,5,1)
(5,28,1)
(28,9,1)
(31,26,1)
(12,7,1)
(20,14,1)
(26,21,1)
(29,3,1)
(13,23,1)
(2,19,1)
(10,31,1)
(19,28,1)
(0,15,1)
(4,11,1)
(9,10,1)
(3,19,2)
(15,28,2)
(0,15,2)
(20,3,2)
(29,3,2)
(14,3,2)
(11,0,2)
(19,28,2)
(15,3,2)
(30,3,2)
(31,26,2)
(0,3,2)
(11,31,2)
-----------------------------------
(0,count = atoi(inputBuffer)
(1,)
(2,NULL)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,RET)
(5,inputBuffer)
(6,)
(7,CHAR_ARRAY_SIZE)
(8,count)
(9,"")
(10,inputBuffer)
(11,funcPtr(count)
(12,stdin)
(13,badSink)
(14,count)
(15,atoi(inputBuffer)
(16,funcPtr)
(17,inputBuffer)
(18,(*funcPtr)
(19,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(20,inputBuffer)
(21,1)
(22,)
(23,funcPtr)
(24,count)
(25,)
(26,-1)
(27,count)
(28,inputBuffer[CHAR_ARRAY_SIZE] = "")
(29,"fgets()
(30,printLine("fgets()
(31,count = -1)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^