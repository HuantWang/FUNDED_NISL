-----label-----
1
-----code-----
void
do_timeout_notification(struct rtpp_session *sp)
{
    int result, len;
    struct rtpp_timeout_handler *th = sp->timeout_handler;

    if (th == NULL)
	return;

    if (th->connected == 0) {
        reconnect_timeout_handler(sp, th);

        /* If connect fails, no notification will be sent */
        if (th->connected == 0) {
            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");
            return;
        }
    }

    len = snprintf(th->notify_buf, sizeof(th->notify_buf), "%d %d\n", sp->ports[0], sp->ports[1]);
    assert(len < sizeof(th->notify_buf));

    do {
        result = send(th->fd, th->notify_buf, len, 0);
    } while (len == -1 && errno == EINTR);

    if (result < 0) {
        th->connected = 0;
        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification");
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
13,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
27,29
28,29
31,32
31,33
32,33
32,34
33,34
35,36
38,39
38,40
39,40
39,41
40,41
40,42
41,42
45,46
45,47
46,47
47,48
47,49
47,50
48,49
50,51
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
61,62
61,63
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
78,81
78,82
78,83
78,84
79,80
81,82
81,83
82,83
85,86
86,87
87,88
87,89
88,89
92,93
92,94
93,94
93,95
94,95
98,99
98,100
99,100
99,101
100,101
104,105
105,106
105,107
106,107
108,109
108,110
109,110
111,112
112,113
113,114
113,115
114,115
117,118
117,119
118,119
119,120
120,121
120,122
121,122
123,124
123,125
123,126
123,127
123,128
124,125
126,127
126,128
127,128
130,131
130,132
131,132
134,135
137,138
137,139
138,139
138,140
139,140
141,142
143,144
143,145
144,145
146,147
148,149
148,150
149,150
149,151
150,151
153,154
153,155
154,155
155,156
155,157
156,157
156,158
157,158
161,162
162,163
162,164
162,165
162,166
163,164
165,166
167,168
167,169
168,169
-----nextToken-----
2,4,7,9,10,14,16,18,22,24,25,29,30,34,36,37,42,43,44,49,51,53,58,59,60,65,67,70,71,72,73,77,80,83,84,89,90,91,95,96,97,101,102,103,107,110,115,116,122,125,128,129,132,133,135,136,140,142,145,147,151,152,158,159,160,164,166,169,170,171
-----computeFrom-----
32,33
32,34
39,40
39,41
55,56
55,57
75,76
75,77
108,109
108,110
120,121
120,122
137,138
137,139
138,139
138,140
143,144
143,145
149,150
149,151
155,156
155,157
-----guardedBy-----
43,59
42,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
voiddo_timeout_notification(struct rtpp_session *sp){    int result, len;    struct rtpp_timeout_handler *th = sp->timeout_handler;    if (th == NULL)	return;    if (th->connected == 0) {        reconnect_timeout_handler(sp, th);        /* If connect fails, no notification will be sent */        if (th->connected == 0) {            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");            return;        }    }    len = snprintf(th->notify_buf, sizeof(th->notify_buf), "%d %d\n", sp->ports[0], sp->ports[1]);    assert(len < sizeof(th->notify_buf));    do {        result = send(th->fd, th->notify_buf, len, 0);    } while (len == -1 && errno == EINTR);    if (result < 0) {        th->connected = 0;        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification");    }}
void
do_timeout_notification(struct rtpp_session *sp)
do_timeout_notification
struct rtpp_session *sp
struct rtpp_session
rtpp_session
*sp
*
sp
{    int result, len;    struct rtpp_timeout_handler *th = sp->timeout_handler;    if (th == NULL)	return;    if (th->connected == 0) {        reconnect_timeout_handler(sp, th);        /* If connect fails, no notification will be sent */        if (th->connected == 0) {            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");            return;        }    }    len = snprintf(th->notify_buf, sizeof(th->notify_buf), "%d %d\n", sp->ports[0], sp->ports[1]);    assert(len < sizeof(th->notify_buf));    do {        result = send(th->fd, th->notify_buf, len, 0);    } while (len == -1 && errno == EINTR);    if (result < 0) {        th->connected = 0;        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification");    }}
int result, len;
int result, len;
int
result
result
len
len
struct rtpp_timeout_handler *th = sp->timeout_handler;
struct rtpp_timeout_handler *th = sp->timeout_handler;
struct rtpp_timeout_handler
rtpp_timeout_handler
*th = sp->timeout_handler
*
th
= sp->timeout_handler
sp->timeout_handler
sp
sp
timeout_handler
if (th == NULL)	return;
th == NULL
th
th
NULL
NULL
return;
if (th->connected == 0) {        reconnect_timeout_handler(sp, th);        /* If connect fails, no notification will be sent */        if (th->connected == 0) {            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");            return;        }    }
th->connected == 0
th->connected
th
th
connected
0
{        reconnect_timeout_handler(sp, th);        /* If connect fails, no notification will be sent */        if (th->connected == 0) {            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");            return;        }    }
reconnect_timeout_handler(sp, th);
reconnect_timeout_handler(sp, th)
reconnect_timeout_handler
reconnect_timeout_handler
sp
sp
th
th
if (th->connected == 0) {            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");            return;        }
th->connected == 0
th->connected
th
th
connected
0
{            rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");            return;        }
rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification");
rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification")
rtpp_log_write
rtpp_log_write
RTPP_LOG_ERR
RTPP_LOG_ERR
sp->log
sp
sp
log
"unable to send timeout notification"
return;
len = snprintf(th->notify_buf, sizeof(th->notify_buf), "%d %d\n", sp->ports[0], sp->ports[1]);
len = snprintf(th->notify_buf, sizeof(th->notify_buf), "%d %d\n", sp->ports[0], sp->ports[1])
len
len
snprintf(th->notify_buf, sizeof(th->notify_buf), "%d %d\n", sp->ports[0], sp->ports[1])
snprintf
snprintf
th->notify_buf
th
th
notify_buf
sizeof(th->notify_buf)
(th->notify_buf)
th->notify_buf
th
th
notify_buf
"%d %d\n"
sp->ports[0]
sp->ports
sp
sp
ports
0
sp->ports[1]
sp->ports
sp
sp
ports
1
assert(len < sizeof(th->notify_buf));
assert(len < sizeof(th->notify_buf))
assert
assert
len < sizeof(th->notify_buf)
len
len
sizeof(th->notify_buf)
(th->notify_buf)
th->notify_buf
th
th
notify_buf
do {        result = send(th->fd, th->notify_buf, len, 0);    } while (len == -1 && errno == EINTR);
{        result = send(th->fd, th->notify_buf, len, 0);    }
result = send(th->fd, th->notify_buf, len, 0);
result = send(th->fd, th->notify_buf, len, 0)
result
result
send(th->fd, th->notify_buf, len, 0)
send
send
th->fd
th
th
fd
th->notify_buf
th
th
notify_buf
len
len
0
len == -1 && errno == EINTR
len == -1
len
len
-1
1
errno == EINTR
errno
errno
EINTR
EINTR
if (result < 0) {        th->connected = 0;        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification");    }
result < 0
result
result
0
{        th->connected = 0;        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification");    }
th->connected = 0;
th->connected = 0
th->connected
th
th
connected
0
rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification");
rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification")
rtpp_log_ewrite
rtpp_log_ewrite
RTPP_LOG_ERR
RTPP_LOG_ERR
sp->log
sp
sp
log
"failed to send timeout notification"
-----joern-----
(32,2,0)
(64,9,0)
(49,12,0)
(43,1,0)
(62,9,0)
(88,1,0)
(33,12,0)
(20,31,0)
(43,40,0)
(104,34,0)
(33,28,0)
(96,5,0)
(6,5,0)
(25,28,0)
(102,74,0)
(83,20,0)
(81,40,0)
(101,23,0)
(61,99,0)
(47,13,0)
(17,98,0)
(7,44,0)
(29,26,0)
(34,0,0)
(44,75,0)
(70,51,0)
(38,26,0)
(95,13,0)
(33,75,0)
(61,87,0)
(57,94,0)
(7,5,0)
(60,92,0)
(37,40,0)
(81,86,0)
(9,1,0)
(13,99,0)
(72,80,0)
(28,1,0)
(69,86,0)
(1,5,0)
(3,16,0)
(99,61,0)
(0,33,0)
(92,23,0)
(8,53,0)
(39,0,0)
(71,2,0)
(59,20,0)
(45,5,0)
(9,19,0)
(12,33,0)
(68,75,0)
(24,22,0)
(86,81,0)
(14,70,0)
(103,43,0)
(19,9,0)
(67,5,0)
(43,80,0)
(18,94,0)
(82,44,0)
(89,1,0)
(93,28,0)
(53,51,0)
(75,5,0)
(65,50,0)
(74,99,0)
(33,0,0)
(77,53,0)
(10,86,0)
(38,44,0)
(42,5,0)
(48,35,0)
(41,99,0)
(94,20,0)
(37,1,0)
(90,50,0)
(74,1,0)
(76,23,0)
(91,31,0)
(15,5,0)
(16,70,0)
(84,91,0)
(70,75,0)
(13,1,0)
(51,70,0)
(12,22,0)
(23,1,0)
(1,37,0)
(46,89,0)
(19,33,0)
(51,53,0)
(0,34,0)
(35,63,0)
(86,52,0)
(63,35,0)
(84,36,0)
(73,63,0)
(30,35,0)
(26,1,0)
(50,1,0)
(4,81,0)
(99,74,0)
(75,33,0)
(44,7,0)
(97,22,0)
(66,34,0)
(34,40,0)
(23,92,0)
(99,13,0)
(20,94,0)
(85,37,0)
(2,61,0)
(58,99,0)
(11,81,0)
(27,26,0)
(79,33,0)
(22,40,0)
(55,37,0)
(56,5,0)
(89,98,0)
(99,75,0)
(100,61,0)
(26,38,0)
(35,1,0)
(33,19,0)
(22,12,0)
(28,33,0)
(98,52,0)
(44,38,0)
(78,89,0)
(54,43,0)
(21,74,0)
(94,40,0)
(70,16,0)
(37,40,1)
(84,36,1)
(101,50,1)
(98,17,1)
(70,16,1)
(33,28,1)
(75,33,1)
(51,53,1)
(33,19,1)
(65,90,1)
(81,40,1)
(83,63,1)
(95,47,1)
(7,44,1)
(48,30,1)
(85,88,1)
(34,40,1)
(71,32,1)
(0,39,1)
(91,20,1)
(19,9,1)
(63,73,1)
(73,35,1)
(35,48,1)
(94,40,1)
(57,18,1)
(74,21,1)
(68,92,1)
(94,57,1)
(34,104,1)
(70,75,1)
(41,74,1)
(43,103,1)
(36,50,1)
(50,65,1)
(51,70,1)
(20,59,1)
(43,1,1)
(89,1,1)
(78,46,1)
(22,40,1)
(82,75,1)
(20,94,1)
(77,70,1)
(97,24,1)
(64,62,1)
(23,1,1)
(38,26,1)
(86,69,1)
(16,3,1)
(32,51,1)
(92,23,1)
(68,63,1)
(49,22,1)
(69,81,1)
(27,82,1)
(86,81,1)
(33,12,1)
(79,19,1)
(26,1,1)
(102,13,1)
(24,79,1)
(35,1,1)
(11,4,1)
(9,64,1)
(66,12,1)
(59,94,1)
(44,38,1)
(3,14,1)
(4,10,1)
(28,25,1)
(99,74,1)
(99,58,1)
(29,27,1)
(100,51,1)
(10,98,1)
(33,0,1)
(2,61,1)
(8,77,1)
(84,2,1)
(90,1,1)
(9,1,1)
(39,34,1)
(92,60,1)
(84,86,1)
(26,29,1)
(46,2,1)
(2,71,1)
(74,1,1)
(37,55,1)
(103,54,1)
(1,37,1)
(44,75,1)
(55,85,1)
(62,28,1)
(84,91,1)
(99,13,1)
(28,1,1)
(18,83,1)
(25,93,1)
(53,8,1)
(23,76,1)
(13,1,1)
(76,101,1)
(100,7,1)
(0,34,1)
(30,43,1)
(17,89,1)
(21,102,1)
(43,40,1)
(54,92,1)
(12,22,1)
(104,66,1)
(13,95,1)
(58,41,1)
(81,11,1)
(60,23,1)
(47,100,1)
(12,49,1)
(89,78,1)
(99,75,1)
(14,61,1)
(61,99,1)
(50,1,1)
(63,35,1)
(93,68,1)
(22,97,1)
(33,12,2)
(97,63,2)
(71,92,2)
(37,40,2)
(14,51,2)
(104,63,2)
(99,13,2)
(12,92,2)
(61,63,2)
(9,1,2)
(93,92,2)
(1,37,2)
(66,63,2)
(81,2,2)
(21,51,2)
(7,92,2)
(16,92,2)
(99,51,2)
(75,33,2)
(61,99,2)
(63,35,2)
(7,44,2)
(33,0,2)
(12,63,2)
(94,40,2)
(22,40,2)
(29,63,2)
(62,92,2)
(92,50,2)
(30,92,2)
(34,63,2)
(95,51,2)
(47,63,2)
(4,2,2)
(86,2,2)
(100,51,2)
(21,92,2)
(16,51,2)
(33,92,2)
(39,92,2)
(25,92,2)
(68,92,2)
(35,92,2)
(9,92,2)
(24,92,2)
(82,92,2)
(61,92,2)
(73,92,2)
(74,51,2)
(82,63,2)
(58,92,2)
(44,38,2)
(94,63,2)
(51,70,2)
(102,63,2)
(8,70,2)
(28,63,2)
(97,92,2)
(70,16,2)
(24,63,2)
(23,50,2)
(32,92,2)
(99,74,2)
(89,1,2)
(10,2,2)
(29,92,2)
(70,75,2)
(11,2,2)
(51,63,2)
(49,63,2)
(3,63,2)
(17,2,2)
(50,1,2)
(58,51,2)
(53,70,2)
(74,92,2)
(74,1,2)
(18,63,2)
(51,53,2)
(100,92,2)
(48,92,2)
(28,92,2)
(83,63,2)
(16,63,2)
(21,63,2)
(2,63,2)
(71,63,2)
(13,92,2)
(99,63,2)
(0,92,2)
(84,91,2)
(95,92,2)
(91,63,2)
(49,92,2)
(3,92,2)
(33,19,2)
(43,40,2)
(41,63,2)
(70,63,2)
(36,50,2)
(7,63,2)
(28,1,2)
(84,36,2)
(75,92,2)
(25,63,2)
(59,63,2)
(86,81,2)
(75,63,2)
(38,63,2)
(81,40,2)
(0,34,2)
(103,92,2)
(23,1,2)
(63,92,2)
(14,63,2)
(98,2,2)
(74,63,2)
(54,92,2)
(51,51,2)
(69,2,2)
(99,75,2)
(27,63,2)
(26,1,2)
(57,63,2)
(64,92,2)
(93,63,2)
(3,51,2)
(19,9,2)
(9,63,2)
(2,92,2)
(0,63,2)
(41,92,2)
(102,51,2)
(79,63,2)
(26,63,2)
(95,63,2)
(68,63,2)
(70,92,2)
(20,63,2)
(41,51,2)
(34,92,2)
(104,92,2)
(14,92,2)
(43,1,2)
(22,92,2)
(19,92,2)
(13,1,2)
(47,51,2)
(61,51,2)
(78,2,2)
(77,70,2)
(64,63,2)
(26,92,2)
(20,94,2)
(22,63,2)
(46,2,2)
(44,75,2)
(62,63,2)
(101,50,2)
(38,92,2)
(89,2,2)
(92,23,2)
(34,40,2)
(99,92,2)
(13,51,2)
(19,63,2)
(27,92,2)
(102,92,2)
(47,92,2)
(51,92,2)
(2,61,2)
(38,26,2)
(13,63,2)
(44,92,2)
(33,63,2)
(100,63,2)
(12,22,2)
(44,63,2)
(33,28,2)
(39,63,2)
(60,50,2)
(35,1,2)
(43,92,2)
(76,50,2)
(66,92,2)
(58,63,2)
(32,63,2)
(79,92,2)
(70,51,2)
-----------------------------------
(0,sp->ports[1])
(1,*th = sp->timeout_handler)
(2,result < 0)
(3,1)
(4,sp)
(5,)
(6,result)
(7,assert(len < sizeof(th->notify_buf)
(8,EINTR)
(9,th->notify_buf)
(10,RTPP_LOG_ERR)
(11,log)
(12,sp->ports[0])
(13,th->fd)
(14,len)
(15,len)
(16,-1)
(17,0)
(18,sp)
(19,sizeof(th->notify_buf)
(20,rtpp_log_write(RTPP_LOG_ERR, sp->log, "unable to send timeout notification")
(21,notify_buf)
(22,sp->ports)
(23,th->connected)
(24,sp)
(25,notify_buf)
(26,th->notify_buf)
(27,th)
(28,th->notify_buf)
(29,notify_buf)
(30,th)
(31,)
(32,result)
(33,snprintf(th->notify_buf, sizeof(th->notify_buf)
(34,sp->ports)
(35,th->connected)
(36,return;)
(37,sp->timeout_handler)
(38,sizeof(th->notify_buf)
(39,1)
(40,struct rtpp_session *sp)
(41,len)
(42,do)
(43,reconnect_timeout_handler(sp, th)
(44,len < sizeof(th->notify_buf)
(45,th)
(46,th)
(47,th)
(48,connected)
(49,0)
(50,th == NULL)
(51,len == -1 && errno == EINTR)
(52,)
(53,errno == EINTR)
(54,sp)
(55,timeout_handler)
(56,if (result < 0)
(57,log)
(58,0)
(59,"unable to send timeout notification")
(60,0)
(61,result = send(th->fd, th->notify_buf, len, 0)
(62,th)
(63,th->connected == 0)
(64,notify_buf)
(65,NULL)
(66,sp)
(67,if (th->connected == 0)
(68,len)
(69,"failed to send timeout notification")
(70,len == -1)
(71,0)
(72,if (th->connected == 0)
(73,0)
(74,th->notify_buf)
(75,len = snprintf(th->notify_buf, sizeof(th->notify_buf)
(76,connected)
(77,errno)
(78,connected)
(79,"%d %d\\n")
(80,)
(81,sp->log)
(82,len)
(83,RTPP_LOG_ERR)
(84,RET)
(85,sp)
(86,rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "failed to send timeout notification")
(87,)
(88,th)
(89,th->connected)
(90,th)
(91,return;)
(92,th->connected == 0)
(93,th)
(94,sp->log)
(95,fd)
(96,if (th == NULL)
(97,ports)
(98,th->connected = 0)
(99,send(th->fd, th->notify_buf, len, 0)
(100,result)
(101,th)
(102,th)
(103,th)
(104,ports)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^