-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
30,33
31,32
31,33
32,33
35,36
36,37
37,38
37,39
38,39
41,42
42,43
42,44
43,44
44,45
44,46
46,47
46,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
71,72
73,74
73,75
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,15,16,20,21,26,29,33,34,39,40,45,47,48,53,56,58,61,62,67,70,72,75,78,81,82,86,88,93,95,99,101,103,107,109,113,115,120,121
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
31,32
31,33
50,51
50,52
51,52
51,53
59,60
59,61
65,66
65,67
76,77
76,78
84,85
84,86
-----guardedBy-----
58,103
61,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(41,2,0)
(36,56,0)
(4,0,0)
(15,57,0)
(29,11,0)
(33,50,0)
(16,29,0)
(34,33,0)
(23,57,0)
(53,2,0)
(45,1,0)
(10,37,0)
(2,57,0)
(28,53,0)
(34,57,0)
(57,14,0)
(19,26,0)
(52,1,0)
(34,0,0)
(31,47,0)
(9,7,0)
(32,29,0)
(2,53,0)
(51,39,0)
(24,26,0)
(56,49,0)
(5,11,0)
(50,0,0)
(35,47,0)
(8,11,0)
(3,10,0)
(37,38,0)
(18,21,0)
(21,18,0)
(0,4,0)
(54,40,0)
(13,0,0)
(39,11,0)
(50,57,0)
(5,1,0)
(22,39,0)
(2,41,0)
(44,2,0)
(58,20,0)
(6,14,0)
(30,58,0)
(50,33,0)
(55,34,0)
(2,0,0)
(37,10,0)
(33,34,0)
(46,52,0)
(50,40,0)
(42,14,0)
(11,21,0)
(43,58,0)
(41,21,0)
(59,34,0)
(27,50,0)
(40,50,0)
(21,41,0)
(52,11,0)
(11,1,0)
(12,5,0)
(17,14,0)
(0,48,0)
(29,1,0)
(21,11,0)
(7,60,0)
(9,33,1)
(37,10,1)
(2,0,1)
(46,29,1)
(22,51,1)
(12,52,1)
(33,34,1)
(50,40,1)
(36,47,1)
(41,2,1)
(24,19,1)
(32,16,1)
(55,59,1)
(8,33,1)
(21,18,1)
(19,57,1)
(27,47,1)
(3,39,1)
(25,7,1)
(56,36,1)
(54,27,1)
(23,15,1)
(34,55,1)
(2,53,1)
(26,24,1)
(47,35,1)
(28,44,1)
(25,5,1)
(2,57,1)
(16,37,1)
(34,57,1)
(13,26,1)
(0,4,1)
(39,22,1)
(29,11,1)
(31,0,1)
(52,11,1)
(7,9,1)
(57,23,1)
(25,56,1)
(10,3,1)
(5,12,1)
(33,50,1)
(59,50,1)
(39,11,1)
(4,13,1)
(31,26,1)
(52,46,1)
(29,32,1)
(34,0,1)
(35,31,1)
(11,21,1)
(5,11,1)
(21,41,1)
(53,28,1)
(50,57,1)
(44,8,1)
(50,0,1)
(40,54,1)
(51,11,1)
(16,39,1)
(11,21,2)
(54,47,2)
(50,40,2)
(21,41,2)
(21,18,2)
(41,33,2)
(44,33,2)
(39,33,2)
(9,33,2)
(28,33,2)
(46,33,2)
(53,33,2)
(12,33,2)
(39,11,2)
(33,34,2)
(29,33,2)
(0,26,2)
(3,39,2)
(41,2,2)
(34,0,2)
(37,39,2)
(34,57,2)
(37,10,2)
(4,26,2)
(50,57,2)
(29,11,2)
(22,33,2)
(7,33,2)
(55,50,2)
(50,0,2)
(36,47,2)
(5,33,2)
(8,33,2)
(11,33,2)
(16,33,2)
(34,50,2)
(2,33,2)
(52,33,2)
(59,50,2)
(2,0,2)
(33,47,2)
(32,33,2)
(40,47,2)
(0,4,2)
(10,39,2)
(21,33,2)
(52,11,2)
(33,50,2)
(50,47,2)
(27,47,2)
(51,33,2)
(5,11,2)
(2,57,2)
(2,53,2)
(56,47,2)
(13,26,2)
-----------------------------------
(0,data = rand()
(1,)
(2,data*sizeof(char)
(3,1)
(4,rand()
(5,free(myString)
(6,if(staticFive!=5)
(7,printLine("Input is less than the length of the source string or too large")
(8,myString)
(9,"Input is less than the length of the source string or too large")
(10,-1)
(11,myString = (char *)
(12,myString)
(13,data)
(14,)
(15,data)
(16,myString)
(17,data)
(18,char *)
(19,staticFive)
(20,)
(21,(char *)
(22,NULL)
(23,0)
(24,5)
(25,RET)
(26,staticFive==5)
(27,data)
(28,char)
(29,strcpy(myString, HELLO_STRING)
(30,if (data > strlen(HELLO_STRING)
(31,staticFive)
(32,HELLO_STRING)
(33,data > strlen(HELLO_STRING)
(34,data < 100)
(35,5)
(36,"Benign, fixed string")
(37,exit(-1)
(38,)
(39,myString == NULL)
(40,strlen(HELLO_STRING)
(41,malloc(data*sizeof(char)
(42,if(staticFive==5)
(43,myString)
(44,data)
(45,if (myString == NULL)
(46,myString)
(47,staticFive!=5)
(48,)
(49,)
(50,data > strlen(HELLO_STRING)
(51,myString)
(52,printLine(myString)
(53,sizeof(char)
(54,HELLO_STRING)
(55,100)
(56,printLine("Benign, fixed string")
(57,data = 0)
(58,)
(59,data)
(60,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^