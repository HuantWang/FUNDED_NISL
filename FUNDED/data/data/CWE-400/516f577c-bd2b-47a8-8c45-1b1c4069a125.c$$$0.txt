-----label-----
0
-----code-----
static void goodB2G()
{
    int64_t * data;
    data = NULL;
    goto source;
source:
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int64_t *)malloc(100*sizeof(int64_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5LL;
    printLongLongLine(data[0]);
    goto sink;
sink:
    /* FIX: Deallocate memory */
    free(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
71,72
73,74
73,75
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,9,11,12,16,18,20,22,26,30,32,35,37,41,42,46,48,53,55,60,61,62,66,69,70,72,74,78,80
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int64_t * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    goto sink;sink:    /* FIX: Deallocate memory */    free(data);}
static void
goodB2G()
goodB2G
{    int64_t * data;    data = NULL;    goto source;source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5LL;    printLongLongLine(data[0]);    goto sink;sink:    /* FIX: Deallocate memory */    free(data);}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
goto source;
source
source:    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int64_t *)malloc(100*sizeof(int64_t));
source
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
goto sink;
sink
sink:    /* FIX: Deallocate memory */    free(data);
sink
free(data);
free(data)
free
free
data
data
-----joern-----
(25,17,0)
(8,4,0)
(13,17,0)
(22,7,0)
(4,7,0)
(14,33,0)
(33,7,0)
(28,17,0)
(24,7,0)
(16,18,0)
(17,13,0)
(15,7,0)
(27,25,0)
(10,7,0)
(29,31,0)
(25,27,0)
(9,11,0)
(17,25,0)
(19,7,0)
(3,28,0)
(5,7,0)
(23,8,0)
(11,7,0)
(8,28,0)
(4,8,0)
(12,27,0)
(33,28,0)
(18,27,0)
(32,3,0)
(28,7,0)
(6,7,0)
(29,1,0)
(27,18,0)
(17,28,0)
(0,31,0)
(26,3,0)
(2,8,0)
(20,28,0)
(21,11,0)
(31,29,0)
(26,32,1)
(24,11,1)
(31,0,1)
(23,5,1)
(32,28,1)
(3,26,1)
(5,29,1)
(8,2,1)
(33,28,1)
(8,28,1)
(27,18,1)
(4,8,1)
(15,4,1)
(0,3,1)
(17,25,1)
(29,31,1)
(28,17,1)
(11,9,1)
(33,14,1)
(5,3,1)
(12,20,1)
(3,28,1)
(18,16,1)
(20,24,1)
(2,23,1)
(16,12,1)
(25,27,1)
(17,13,1)
(9,21,1)
(30,33,1)
(14,15,1)
(17,13,2)
(29,3,2)
(3,28,2)
(25,27,2)
(29,31,2)
(27,18,2)
(33,28,2)
(0,3,2)
(17,25,2)
(28,17,2)
(8,28,2)
(31,3,2)
(4,8,2)
-----------------------------------
(0,1)
(1,)
(2,0)
(3,data == NULL)
(4,printLongLongLine(data[0])
(5,L)
(6,sink:)
(7,)
(8,data[0])
(9,NULL)
(10,data)
(11,data = NULL)
(12,100)
(13,int64_t *)
(14,data)
(15,goto sink;)
(16,int64_t)
(17,(int64_t *)
(18,sizeof(int64_t)
(19,source:)
(20,data)
(21,data)
(22,if (data == NULL)
(23,data)
(24,goto source;)
(25,malloc(100*sizeof(int64_t)
(26,NULL)
(27,100*sizeof(int64_t)
(28,data = (int64_t *)
(29,exit(-1)
(30,RET)
(31,-1)
(32,data)
(33,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^