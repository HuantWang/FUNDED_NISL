-----label-----
0
-----code-----
static void __iax2_poke_noanswer(const void *data)
{
	struct iax2_peer *peer = (struct iax2_peer *)data;
	int callno;

	if (peer->lastms > -1) {
		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);
		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);
		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */
	}
	if ((callno = peer->callno) > 0) {
		ast_mutex_lock(&iaxsl[callno]);
		iax2_destroy(callno);
		ast_mutex_unlock(&iaxsl[callno]);
	}
	peer->callno = 0;
	peer->lastms = -1;
	/* Try again quickly */
	peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));
	if (peer->pokeexpire == -1)
		peer_unref(peer);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
30,31
32,33
32,34
33,34
33,35
34,35
34,36
35,36
38,39
40,41
40,42
40,43
41,42
42,43
42,44
42,45
42,46
42,47
43,44
45,46
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
57,60
57,61
57,62
57,63
58,59
60,61
64,65
64,66
65,66
68,69
68,70
69,70
72,73
73,74
73,75
73,76
73,77
73,78
74,75
76,77
78,79
81,82
81,83
82,83
85,86
85,87
86,87
86,88
87,88
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
96,99
97,98
98,99
98,100
99,100
101,102
102,103
102,104
102,105
105,106
106,107
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
125,127
126,127
126,128
127,128
131,132
132,133
132,134
133,134
133,135
134,135
137,138
139,140
140,141
140,142
141,142
141,143
142,143
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
150,152
151,152
154,155
156,157
156,158
157,158
159,160
161,162
161,163
162,163
162,164
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
173,174
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,29,31,36,37,39,44,46,47,50,51,54,55,59,61,62,63,66,67,70,71,75,77,79,80,83,84,90,93,94,95,100,103,104,107,111,113,117,121,123,128,129,130,135,136,138,143,144,147,149,152,153,155,158,160,165,166,168,172,174
-----computeFrom-----
33,34
33,35
86,87
86,88
88,89
88,90
125,126
125,127
132,133
132,134
140,141
140,142
162,163
162,164
-----guardedBy-----
37,71
36,83
94,123
165,174
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void __iax2_poke_noanswer(const void *data){	struct iax2_peer *peer = (struct iax2_peer *)data;	int callno;	if (peer->lastms > -1) {		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */	}	if ((callno = peer->callno) > 0) {		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}	peer->callno = 0;	peer->lastms = -1;	/* Try again quickly */	peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));	if (peer->pokeexpire == -1)		peer_unref(peer);}
static void
__iax2_poke_noanswer(const void *data)
__iax2_poke_noanswer
const void *data
const void
*data
*
data
{	struct iax2_peer *peer = (struct iax2_peer *)data;	int callno;	if (peer->lastms > -1) {		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */	}	if ((callno = peer->callno) > 0) {		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}	peer->callno = 0;	peer->lastms = -1;	/* Try again quickly */	peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));	if (peer->pokeexpire == -1)		peer_unref(peer);}
struct iax2_peer *peer = (struct iax2_peer *)data;
struct iax2_peer *peer = (struct iax2_peer *)data;
struct iax2_peer
iax2_peer
*peer = (struct iax2_peer *)data
*
peer
= (struct iax2_peer *)data
(struct iax2_peer *)data
struct iax2_peer *
struct iax2_peer
iax2_peer
*
*
data
data
int callno;
int callno;
int
callno
callno
if (peer->lastms > -1) {		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */	}
peer->lastms > -1
peer->lastms
peer
peer
lastms
-1
1
{		ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);		manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);		ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */	}
ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms);
ast_log(LOG_NOTICE, "Peer '%s' is now UNREACHABLE! Time: %d\n", peer->name, peer->lastms)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Peer '%s' is now UNREACHABLE! Time: %d\n"
peer->name
peer
peer
name
peer->lastms
peer
peer
lastms
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms);
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n", peer->name, peer->lastms)
manager_event
manager_event
EVENT_FLAG_SYSTEM
EVENT_FLAG_SYSTEM
"PeerStatus"
"ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Unreachable\r\nTime: %d\r\n"
peer->name
peer
peer
name
peer->lastms
peer
peer
lastms
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name);
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_UNAVAILABLE
AST_DEVICE_UNAVAILABLE
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"IAX2/%s"
peer->name
peer
peer
name
if ((callno = peer->callno) > 0) {		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}
(callno = peer->callno) > 0
(callno = peer->callno)
callno = peer->callno
callno
callno
peer->callno
peer
peer
callno
0
{		ast_mutex_lock(&iaxsl[callno]);		iax2_destroy(callno);		ast_mutex_unlock(&iaxsl[callno]);	}
ast_mutex_lock(&iaxsl[callno]);
ast_mutex_lock(&iaxsl[callno]);
ast_mutex_lock
ast_mutex_lock
(&iaxsl[callno])
&iaxsl[callno]
&
iaxsl
[callno]
callno
callno
iax2_destroy(callno);
iax2_destroy(callno)
iax2_destroy
iax2_destroy
callno
callno
ast_mutex_unlock(&iaxsl[callno]);
ast_mutex_unlock(&iaxsl[callno])
ast_mutex_unlock
ast_mutex_unlock
&iaxsl[callno]
iaxsl[callno]
iaxsl
iaxsl
callno
callno
peer->callno = 0;
peer->callno = 0
peer->callno
peer
peer
callno
0
peer->lastms = -1;
peer->lastms = -1
peer->lastms
peer
peer
lastms
-1
1
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer))
peer->pokeexpire
peer
peer
pokeexpire
iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer))
iax2_sched_add
iax2_sched_add
sched
sched
peer->pokefreqnotok
peer
peer
pokefreqnotok
iax2_poke_peer_s
iax2_poke_peer_s
peer_ref(peer)
peer_ref
peer_ref
peer
peer
if (peer->pokeexpire == -1)		peer_unref(peer);
peer->pokeexpire == -1
peer->pokeexpire
peer
peer
pokeexpire
-1
1
peer_unref(peer);
peer_unref(peer)
peer_unref
peer_unref
peer
peer
-----joern-----
(4,54,0)
(26,82,0)
(86,69,0)
(60,39,0)
(43,51,0)
(31,51,0)
(63,28,0)
(54,78,0)
(42,93,0)
(82,26,0)
(80,52,0)
(61,36,0)
(11,3,0)
(58,51,0)
(59,36,0)
(63,64,0)
(71,87,0)
(42,20,0)
(67,91,0)
(55,48,0)
(21,4,0)
(43,75,0)
(56,72,0)
(69,78,0)
(17,2,0)
(50,61,0)
(57,59,0)
(66,78,0)
(39,42,0)
(61,69,0)
(75,43,0)
(90,59,0)
(52,36,0)
(83,51,0)
(27,24,0)
(64,2,0)
(87,78,0)
(40,72,0)
(95,52,0)
(13,69,0)
(9,61,0)
(30,42,0)
(55,78,0)
(62,78,0)
(61,62,0)
(4,66,0)
(18,3,0)
(72,78,0)
(85,4,0)
(2,64,0)
(96,16,0)
(24,15,0)
(74,78,0)
(12,78,0)
(82,46,0)
(77,20,0)
(23,15,0)
(89,59,0)
(46,82,0)
(69,61,0)
(76,63,0)
(79,62,0)
(62,61,0)
(66,4,0)
(24,42,0)
(88,66,0)
(73,19,0)
(49,78,0)
(52,80,0)
(39,53,0)
(68,20,0)
(65,93,0)
(16,51,0)
(44,80,0)
(84,54,0)
(45,80,0)
(19,78,0)
(25,49,0)
(63,78,0)
(70,63,0)
(19,16,0)
(41,24,0)
(74,91,0)
(46,53,0)
(15,24,0)
(3,28,0)
(28,4,0)
(20,78,0)
(47,61,0)
(28,51,0)
(87,52,0)
(15,23,0)
(38,51,0)
(26,42,0)
(22,49,0)
(48,55,0)
(20,42,0)
(6,55,0)
(1,26,0)
(8,74,0)
(93,42,0)
(52,87,0)
(81,87,0)
(35,74,0)
(78,51,0)
(10,51,0)
(33,54,0)
(91,67,0)
(94,52,0)
(49,43,0)
(4,28,0)
(54,4,0)
(72,59,0)
(64,63,0)
(14,75,0)
(80,78,0)
(55,34,0)
(5,19,0)
(32,67,0)
(37,78,0)
(78,55,0)
(3,78,0)
(7,12,0)
(59,72,0)
(0,26,0)
(91,74,0)
(23,53,0)
(29,62,0)
(39,60,1)
(55,34,1)
(43,75,1)
(42,20,1)
(66,88,1)
(6,37,1)
(60,46,1)
(63,78,1)
(30,91,1)
(72,78,1)
(46,82,1)
(16,96,1)
(28,4,1)
(93,65,1)
(8,78,1)
(88,85,1)
(24,42,1)
(59,72,1)
(12,78,1)
(80,78,1)
(7,64,1)
(73,93,1)
(3,78,1)
(30,59,1)
(52,80,1)
(44,45,1)
(64,2,1)
(24,41,1)
(62,78,1)
(70,76,1)
(64,63,1)
(5,73,1)
(89,61,1)
(62,79,1)
(90,57,1)
(81,80,1)
(18,43,1)
(13,86,1)
(65,42,1)
(4,66,1)
(84,33,1)
(72,40,1)
(26,42,1)
(67,32,1)
(54,84,1)
(86,62,1)
(78,55,1)
(79,29,1)
(82,26,1)
(12,7,1)
(15,24,1)
(91,67,1)
(0,93,1)
(2,17,1)
(14,49,1)
(54,78,1)
(45,95,1)
(49,25,1)
(20,68,1)
(92,12,1)
(69,78,1)
(73,23,1)
(93,42,1)
(26,1,1)
(52,87,1)
(27,39,1)
(50,52,1)
(17,63,1)
(22,16,1)
(77,30,1)
(9,47,1)
(20,78,1)
(63,70,1)
(41,27,1)
(80,44,1)
(68,77,1)
(23,15,1)
(21,3,1)
(57,89,1)
(76,28,1)
(19,5,1)
(25,22,1)
(49,78,1)
(61,69,1)
(87,71,1)
(91,74,1)
(94,91,1)
(92,64,1)
(55,48,1)
(11,18,1)
(96,19,1)
(95,94,1)
(87,78,1)
(40,56,1)
(29,9,1)
(4,54,1)
(69,13,1)
(74,35,1)
(19,78,1)
(61,62,1)
(85,54,1)
(75,14,1)
(39,42,1)
(56,90,1)
(74,78,1)
(66,78,1)
(33,21,1)
(35,8,1)
(55,6,1)
(1,0,1)
(71,81,1)
(32,74,1)
(47,50,1)
(63,28,1)
(3,11,1)
(12,78,2)
(12,64,2)
(40,91,2)
(24,93,2)
(7,64,2)
(82,93,2)
(57,91,2)
(3,78,2)
(52,91,2)
(89,91,2)
(62,78,2)
(4,54,2)
(94,91,2)
(71,91,2)
(28,4,2)
(39,42,2)
(49,78,2)
(29,91,2)
(93,42,2)
(15,24,2)
(59,91,2)
(19,78,2)
(63,28,2)
(26,42,2)
(72,91,2)
(80,78,2)
(44,91,2)
(87,91,2)
(86,91,2)
(87,78,2)
(20,78,2)
(66,78,2)
(47,91,2)
(78,55,2)
(74,78,2)
(61,91,2)
(95,91,2)
(72,78,2)
(59,72,2)
(56,91,2)
(46,82,2)
(64,2,2)
(39,93,2)
(23,93,2)
(15,93,2)
(60,93,2)
(41,93,2)
(82,26,2)
(55,34,2)
(52,87,2)
(64,63,2)
(61,69,2)
(9,91,2)
(13,91,2)
(69,78,2)
(79,91,2)
(46,93,2)
(90,91,2)
(24,42,2)
(52,80,2)
(61,62,2)
(50,91,2)
(54,78,2)
(4,66,2)
(0,93,2)
(62,91,2)
(81,91,2)
(42,20,2)
(1,93,2)
(91,67,2)
(23,15,2)
(91,74,2)
(27,93,2)
(26,93,2)
(55,48,2)
(63,78,2)
(43,75,2)
(80,91,2)
(45,91,2)
(69,91,2)
-----------------------------------
(0,iaxsl)
(1,callno)
(2,-1)
(3,peer->pokeexpire)
(4,iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer)
(5,callno)
(6,data)
(7,peer)
(8,peer)
(9,"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Unreachable\\r\\nTime: %d\\r\\n")
(10,peer)
(11,pokeexpire)
(12,peer_unref(peer)
(13,lastms)
(14,1)
(15,&iaxsl[callno])
(16,peer->callno = 0)
(17,1)
(18,peer)
(19,peer->callno)
(20,peer->callno)
(21,sched)
(22,peer)
(23,ast_mutex_unlock(&iaxsl[callno])
(24,iaxsl[callno])
(25,lastms)
(26,iaxsl[callno])
(27,iaxsl)
(28,peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer)
(29,peer)
(30,callno)
(31,callno)
(32,1)
(33,peer)
(34,const void *data)
(35,lastms)
(36,)
(37,peer)
(38,if (peer->pokeexpire == -1)
(39,iax2_destroy(callno)
(40,name)
(41,callno)
(42,callno = peer->callno)
(43,peer->lastms = -1)
(44,name)
(45,peer)
(46,ast_mutex_lock(&iaxsl[callno])
(47,"PeerStatus")
(48,struct iax2_peer *)
(49,peer->lastms)
(50,EVENT_FLAG_SYSTEM)
(51,)
(52,ast_log(LOG_NOTICE, "Peer \'%s\' is now UNREACHABLE! Time: %d\\n", peer->name, peer->lastms)
(53,)
(54,peer->pokefreqnotok)
(55,(struct iax2_peer *)
(56,peer)
(57,AST_DEVSTATE_CACHABLE)
(58,if ((callno = peer->callno)
(59,ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
(60,callno)
(61,manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Unreachable\\r\\nTime: %d\\r\\n", peer->name, peer->lastms)
(62,peer->name)
(63,peer->pokeexpire)
(64,peer->pokeexpire == -1)
(65,0)
(66,peer_ref(peer)
(67,-1)
(68,callno)
(69,peer->lastms)
(70,pokeexpire)
(71,lastms)
(72,peer->name)
(73,peer)
(74,peer->lastms)
(75,-1)
(76,peer)
(77,peer)
(78,*peer = (struct iax2_peer *)
(79,name)
(80,peer->name)
(81,peer)
(82,&iaxsl[callno])
(83,if (peer->lastms > -1)
(84,pokefreqnotok)
(85,iax2_poke_peer_s)
(86,peer)
(87,peer->lastms)
(88,peer)
(89,AST_DEVICE_UNAVAILABLE)
(90,"IAX2/%s")
(91,peer->lastms > -1)
(92,RET)
(93,(callno = peer->callno)
(94,LOG_NOTICE)
(95,"Peer \'%s\' is now UNREACHABLE! Time: %d\\n")
(96,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^