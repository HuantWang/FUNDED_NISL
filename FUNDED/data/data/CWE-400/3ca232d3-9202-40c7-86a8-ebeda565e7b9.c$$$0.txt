-----label-----
0
-----code-----
static void goodB2G1Sink(int count)
{
    if(goodB2G1Static)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
11,12
13,14
14,15
15,16
15,17
16,17
19,20
20,21
20,22
20,23
21,22
21,23
22,23
22,24
23,24
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
42,43
43,44
44,45
44,46
45,46
-----nextToken-----
2,4,6,8,12,17,18,24,25,28,29,34,36,40,41,46,47
-----computeFrom-----
21,22
21,23
22,23
22,24
26,27
26,28
-----guardedBy-----
28,36
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1Sink(int count){    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G1Sink(int count)
goodB2G1Sink
int count
int
count
count
{    if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
if(goodB2G1Static)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
goodB2G1Static
goodB2G1Static
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(3,12,0)
(12,3,0)
(12,0,0)
(13,7,0)
(20,15,0)
(24,8,0)
(13,1,0)
(18,0,0)
(11,6,0)
(2,1,0)
(0,7,0)
(0,12,0)
(4,3,0)
(16,2,0)
(9,13,0)
(14,19,0)
(15,22,0)
(6,21,0)
(5,0,0)
(3,7,0)
(23,3,0)
(4,10,1)
(6,11,1)
(16,13,1)
(18,3,1)
(17,2,1)
(11,10,1)
(2,16,1)
(0,7,1)
(9,12,1)
(0,5,1)
(12,3,1)
(13,7,1)
(3,7,1)
(12,0,1)
(15,20,1)
(5,18,1)
(23,4,1)
(13,9,1)
(17,15,1)
(3,23,1)
(20,12,1)
(17,6,1)
(12,0,2)
(4,10,2)
(13,12,2)
(16,12,2)
(12,3,2)
(9,12,2)
(13,7,2)
(11,10,2)
(0,3,2)
(15,12,2)
(23,10,2)
(18,3,2)
(20,12,2)
(0,7,2)
(3,7,2)
(5,3,2)
(6,10,2)
(2,12,2)
(12,10,2)
(3,10,2)
-----------------------------------
(0,count <= 2000)
(1,)
(2,printLine("Sleep time OK")
(3,count > 0)
(4,count)
(5,2000)
(6,printLine("Benign, fixed string")
(7,int count)
(8,)
(9,count)
(10,goodB2G1Static)
(11,"Benign, fixed string")
(12,count > 0 && count <= 2000)
(13,SLEEP(count)
(14,if(goodB2G1Static)
(15,printLine("Sleep time too long")
(16,"Sleep time OK")
(17,RET)
(18,count)
(19,)
(20,"Sleep time too long")
(21,)
(22,)
(23,0)
(24,if (count > 0 && count <= 2000)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^