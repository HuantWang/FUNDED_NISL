-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    data = NULL;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize then use data */
        strcpy(data, "a string");
        printLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation of memory */
        /* no deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
19,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
36,37
38,39
38,40
39,40
41,42
41,43
43,44
44,45
44,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
64,65
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,27,32,35,37,40,42,45,46,50,52,53,57,59,62,63,65
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
41,42
41,43
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    char * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    char * data;    data = NULL;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize then use data */        strcpy(data, "a string");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "a string");
strcpy(data, "a string")
strcpy
strcpy
data
data
"a string"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation of memory */        /* no deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(23,4,0)
(5,0,0)
(5,25,0)
(25,2,0)
(13,6,0)
(4,25,0)
(2,25,0)
(24,7,0)
(0,5,0)
(23,7,0)
(16,23,0)
(4,7,0)
(29,31,0)
(0,3,0)
(8,14,0)
(9,3,0)
(20,15,0)
(10,14,0)
(19,4,0)
(24,4,0)
(25,4,0)
(31,21,0)
(25,5,0)
(22,24,0)
(26,6,0)
(11,15,0)
(12,15,0)
(27,20,0)
(1,15,0)
(17,20,0)
(28,23,0)
(30,0,0)
(3,0,0)
(27,17,1)
(24,4,1)
(24,22,1)
(25,2,1)
(31,29,1)
(18,6,1)
(16,28,1)
(4,25,1)
(20,27,1)
(28,4,1)
(23,16,1)
(26,13,1)
(13,24,1)
(10,8,1)
(22,23,1)
(13,31,1)
(14,10,1)
(30,19,1)
(25,5,1)
(29,14,1)
(5,0,1)
(19,14,1)
(8,20,1)
(6,26,1)
(0,3,1)
(9,30,1)
(23,4,1)
(3,9,1)
(28,14,2)
(4,14,2)
(29,14,2)
(23,4,2)
(5,0,2)
(0,14,2)
(3,14,2)
(0,3,2)
(25,14,2)
(9,14,2)
(25,5,2)
(25,2,2)
(4,25,2)
(24,14,2)
(24,4,2)
(31,14,2)
(5,14,2)
(30,14,2)
(16,14,2)
(22,14,2)
(19,14,2)
(23,14,2)
-----------------------------------
(0,100*sizeof(char)
(1,data)
(2,char *)
(3,sizeof(char)
(4,data = (char *)
(5,ALLOCA(100*sizeof(char)
(6,5==5)
(7,)
(8,5)
(9,char)
(10,5)
(11,if(5!=5)
(12,if(5==5)
(13,5)
(14,5!=5)
(15,)
(16,"a string")
(17,data)
(18,RET)
(19,data)
(20,data = NULL)
(21,)
(22,data)
(23,strcpy(data, "a string")
(24,printLine(data)
(25,(char *)
(26,5)
(27,NULL)
(28,data)
(29,"Benign, fixed string")
(30,100)
(31,printLine("Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^