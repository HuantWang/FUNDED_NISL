-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalReturnsTrueOrFalse())
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    else
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
    else
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
21,22
22,23
22,24
22,25
22,26
22,27
22,28
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
43,44
44,45
44,46
46,47
46,48
48,49
49,50
51,52
51,53
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
53,54
54,55
54,56
55,56
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
74,75
75,76
75,77
75,78
75,79
76,77
78,79
79,80
82,83
83,84
84,85
86,87
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
109,111
110,111
113,114
113,115
114,115
116,117
118,119
118,120
119,120
119,121
120,121
120,122
120,123
120,124
121,122
123,124
125,126
125,127
126,127
126,128
127,128
129,130
131,132
132,133
134,135
135,136
136,137
138,139
140,141
142,143
143,144
143,145
144,145
146,147
146,148
146,149
146,150
146,151
147,148
149,150
151,152
153,154
153,155
154,155
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
176,177
179,180
180,181
180,182
181,182
183,184
183,185
183,186
183,187
184,185
186,187
188,189
192,193
192,194
193,194
193,195
194,195
196,197
198,199
199,200
200,201
200,202
201,202
203,204
205,206
206,207
206,208
206,209
206,210
206,211
206,212
207,208
208,209
208,210
210,211
212,213
213,214
213,215
214,215
216,217
218,219
219,220
219,221
220,221
222,223
222,224
224,225
225,226
227,228
228,229
228,230
230,231
230,232
232,233
233,234
235,236
235,237
236,237
236,238
236,239
236,240
236,241
236,242
236,243
236,244
236,245
236,246
236,247
237,238
238,239
238,240
239,240
241,242
241,243
241,244
241,245
242,243
244,245
246,247
248,249
250,251
250,252
251,252
251,253
252,253
254,255
256,257
258,259
259,260
259,261
259,262
259,263
260,261
262,263
263,264
266,267
267,268
268,269
270,271
271,272
271,273
272,273
272,274
273,274
276,277
278,279
279,280
279,281
280,281
280,282
281,282
281,283
282,283
286,287
286,288
287,288
289,290
291,292
292,293
292,294
293,294
293,295
294,295
297,298
297,299
298,299
300,301
302,303
302,304
303,304
303,305
304,305
304,306
304,307
304,308
305,306
307,308
309,310
309,311
310,311
310,312
311,312
313,314
315,316
316,317
318,319
319,320
320,321
322,323
324,325
326,327
327,328
327,329
328,329
330,331
330,332
330,333
330,334
330,335
331,332
333,334
335,336
337,338
337,339
338,339
342,343
342,344
343,344
343,345
344,345
344,346
345,346
347,348
349,350
349,351
350,351
353,354
355,356
356,357
356,358
357,358
357,359
358,359
360,361
363,364
364,365
364,366
365,366
367,368
367,369
367,370
367,371
368,369
370,371
372,373
376,377
376,378
377,378
377,379
378,379
380,381
382,383
383,384
384,385
384,386
385,386
387,388
389,390
389,391
389,392
390,391
391,392
393,394
394,395
394,396
395,396
396,397
396,398
398,399
398,400
401,402
401,403
401,404
402,403
402,404
403,404
403,405
404,405
406,407
406,408
407,408
409,410
411,412
411,413
412,413
415,416
415,417
415,418
415,419
415,420
416,417
417,418
417,419
418,419
420,421
420,422
421,422
421,423
423,424
425,426
425,427
426,427
428,429
428,430
429,430
431,432
432,433
432,434
435,436
435,437
436,437
436,438
437,438
439,440
441,442
442,443
443,444
443,445
444,445
446,447
448,449
449,450
449,451
449,452
450,451
452,453
454,455
456,457
457,458
457,459
458,459
460,461
462,463
463,464
463,465
464,465
466,467
468,469
469,470
470,471
470,472
471,472
474,475
475,476
475,477
476,477
477,478
477,479
479,480
479,481
482,483
482,484
482,485
483,484
483,485
484,485
484,486
485,486
487,488
487,489
488,489
490,491
492,493
492,494
493,494
496,497
496,498
496,499
496,500
496,501
497,498
498,499
498,500
499,500
501,502
501,503
502,503
502,504
504,505
506,507
506,508
507,508
509,510
509,511
510,511
512,513
513,514
513,515
516,517
516,518
517,518
517,519
518,519
520,521
522,523
523,524
524,525
524,526
525,526
527,528
529,530
530,531
530,532
530,533
531,532
533,534
535,536
537,538
538,539
538,540
539,540
541,542
543,544
544,545
544,546
545,546
547,548
549,550
550,551
551,552
551,553
552,553
-----nextToken-----
2,4,9,11,15,16,20,25,27,31,33,37,39,42,45,47,50,56,59,61,63,65,69,71,73,77,80,81,85,90,91,93,99,100,101,104,106,111,112,115,117,122,124,128,130,133,137,139,141,145,148,150,152,155,156,157,162,164,167,168,170,175,177,178,182,185,187,189,190,191,195,197,202,204,209,211,215,217,221,223,226,229,231,234,240,243,245,247,249,253,255,257,261,264,265,269,274,275,277,283,284,285,288,290,295,296,299,301,306,308,312,314,317,321,323,325,329,332,334,336,339,340,341,346,348,351,352,354,359,361,362,366,369,371,373,374,375,379,381,386,388,392,397,399,400,405,408,410,413,414,419,422,424,427,430,433,434,438,440,445,447,451,453,455,459,461,465,467,472,473,478,480,481,486,489,491,494,495,500,503,505,508,511,514,515,519,521,526,528,532,534,536,540,542,546,548,553,554
-----computeFrom-----
13,14
13,15
54,55
54,56
67,68
67,69
87,88
87,89
95,96
95,97
108,109
108,110
119,120
119,121
143,144
143,145
153,154
153,155
159,160
159,161
160,161
160,162
165,166
165,167
172,173
172,174
180,181
180,182
193,194
193,195
238,239
238,240
251,252
251,253
271,272
271,273
279,280
279,281
292,293
292,294
303,304
303,305
327,328
327,329
337,338
337,339
343,344
343,345
344,345
344,346
349,350
349,351
356,357
356,358
364,365
364,366
377,378
377,379
402,403
402,404
403,404
403,405
411,412
411,413
417,418
417,419
428,429
428,430
436,437
436,438
483,484
483,485
484,485
484,486
492,493
492,494
498,499
498,500
509,510
509,511
517,518
517,519
-----guardedBy-----
195,204
379,388
410,455
413,430
491,536
494,511
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalReturnsTrueOrFalse())    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    else    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(globalReturnsTrueOrFalse())    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }    else    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(87,206,0)
(242,228,0)
(81,291,0)
(102,188,0)
(209,235,0)
(15,202,0)
(188,43,0)
(177,316,0)
(71,83,0)
(103,171,0)
(256,261,0)
(318,314,0)
(156,12,0)
(287,52,0)
(235,243,0)
(26,238,0)
(38,213,0)
(191,243,0)
(225,187,0)
(158,153,0)
(270,325,0)
(285,97,0)
(10,250,0)
(199,51,0)
(9,53,0)
(249,328,0)
(0,310,0)
(224,219,0)
(243,235,0)
(279,218,0)
(54,12,0)
(191,104,0)
(252,262,0)
(195,305,0)
(58,248,0)
(294,16,0)
(67,262,0)
(69,86,0)
(48,310,0)
(130,109,0)
(326,213,0)
(164,78,0)
(317,235,0)
(307,240,0)
(80,145,0)
(66,286,0)
(164,286,0)
(265,40,0)
(159,26,0)
(250,116,0)
(55,191,0)
(173,219,0)
(281,199,0)
(107,245,0)
(214,39,0)
(192,116,0)
(105,140,0)
(84,263,0)
(185,303,0)
(234,73,0)
(300,206,0)
(194,153,0)
(83,21,0)
(86,261,0)
(32,221,0)
(123,210,0)
(29,207,0)
(65,210,0)
(326,34,0)
(8,3,0)
(258,137,0)
(304,39,0)
(168,249,0)
(14,176,0)
(136,153,0)
(329,48,0)
(17,99,0)
(139,97,0)
(99,16,0)
(56,19,0)
(47,139,0)
(134,291,0)
(327,286,0)
(283,28,0)
(204,309,0)
(309,30,0)
(182,127,0)
(312,39,0)
(101,39,0)
(278,239,0)
(207,221,0)
(132,271,0)
(96,267,0)
(196,238,0)
(12,156,0)
(328,261,0)
(24,97,0)
(109,254,0)
(332,188,0)
(82,118,0)
(302,39,0)
(121,239,0)
(255,261,0)
(245,107,0)
(198,323,0)
(30,266,0)
(314,43,0)
(211,156,0)
(21,112,0)
(9,290,0)
(229,124,0)
(147,267,0)
(243,261,0)
(127,199,0)
(310,146,0)
(6,261,0)
(18,282,0)
(28,282,0)
(63,3,0)
(41,105,0)
(140,296,0)
(301,221,0)
(76,164,0)
(122,4,0)
(221,32,0)
(213,326,0)
(66,30,0)
(227,146,0)
(48,64,0)
(206,256,0)
(36,219,0)
(240,39,0)
(176,14,0)
(128,108,0)
(199,42,0)
(74,323,0)
(275,6,0)
(6,263,0)
(247,191,0)
(64,245,0)
(165,316,0)
(22,326,0)
(263,6,0)
(104,271,0)
(276,39,0)
(310,153,0)
(212,213,0)
(210,297,0)
(133,173,0)
(169,294,0)
(138,12,0)
(228,321,0)
(3,4,0)
(215,146,0)
(333,19,0)
(52,145,0)
(269,205,0)
(44,206,0)
(286,39,0)
(2,261,0)
(226,32,0)
(125,301,0)
(220,202,0)
(202,238,0)
(94,167,0)
(145,30,0)
(298,231,0)
(217,62,0)
(264,282,0)
(174,72,0)
(164,30,0)
(75,35,0)
(79,328,0)
(113,264,0)
(47,238,0)
(239,179,0)
(205,235,0)
(9,256,0)
(253,28,0)
(236,62,0)
(68,43,0)
(129,323,0)
(326,22,0)
(314,120,0)
(34,326,0)
(222,243,0)
(280,172,0)
(163,173,0)
(273,170,0)
(145,80,0)
(97,315,0)
(218,171,0)
(19,238,0)
(12,282,0)
(264,179,0)
(198,244,0)
(218,310,0)
(216,51,0)
(256,206,0)
(42,181,0)
(117,153,0)
(257,86,0)
(135,261,0)
(268,107,0)
(248,51,0)
(141,245,0)
(154,292,0)
(137,106,0)
(92,256,0)
(172,115,0)
(245,256,0)
(7,309,0)
(4,3,0)
(189,97,0)
(238,261,0)
(73,51,0)
(239,282,0)
(289,26,0)
(294,213,0)
(73,199,0)
(187,153,0)
(166,237,0)
(40,157,0)
(292,153,0)
(119,261,0)
(85,257,0)
(213,16,0)
(193,69,0)
(181,42,0)
(143,202,0)
(267,97,0)
(1,176,0)
(218,43,0)
(245,64,0)
(183,264,0)
(114,108,0)
(46,198,0)
(290,42,0)
(9,43,0)
(203,139,0)
(180,240,0)
(277,66,0)
(173,163,0)
(48,256,0)
(324,235,0)
(179,264,0)
(23,9,0)
(60,145,0)
(95,212,0)
(188,120,0)
(39,260,0)
(31,66,0)
(282,153,0)
(127,51,0)
(57,156,0)
(161,286,0)
(246,292,0)
(59,261,0)
(28,117,0)
(254,261,0)
(244,118,0)
(259,108,0)
(70,205,0)
(251,97,0)
(249,243,0)
(321,228,0)
(299,249,0)
(295,47,0)
(43,108,0)
(124,35,0)
(126,98,0)
(173,238,0)
(90,266,0)
(208,187,0)
(42,290,0)
(187,25,0)
(271,243,0)
(314,231,0)
(331,39,0)
(145,140,0)
(9,310,0)
(98,6,0)
(35,124,0)
(190,30,0)
(221,301,0)
(171,218,0)
(212,16,0)
(140,105,0)
(116,153,0)
(148,146,0)
(219,224,0)
(110,97,0)
(313,109,0)
(115,13,0)
(241,16,0)
(218,256,0)
(146,310,0)
(152,254,0)
(25,187,0)
(262,213,0)
(186,43,0)
(282,12,0)
(11,294,0)
(175,162,0)
(12,30,0)
(48,43,0)
(284,184,0)
(188,256,0)
(237,35,0)
(308,53,0)
(91,75,0)
(322,173,0)
(47,311,0)
(200,12,0)
(45,224,0)
(290,9,0)
(245,43,0)
(26,139,0)
(330,133,0)
(201,139,0)
(100,301,0)
(64,48,0)
(288,80,0)
(244,153,0)
(223,69,0)
(316,14,0)
(53,9,0)
(150,163,0)
(4,321,0)
(86,257,0)
(219,36,0)
(230,39,0)
(291,274,0)
(140,145,0)
(320,97,0)
(88,97,0)
(231,314,0)
(120,188,0)
(120,314,0)
(22,218,0)
(235,205,0)
(99,213,0)
(219,173,0)
(238,202,0)
(245,310,0)
(89,117,0)
(118,244,0)
(93,39,0)
(62,199,0)
(20,248,0)
(188,310,0)
(33,153,0)
(271,104,0)
(35,75,0)
(145,52,0)
(131,266,0)
(42,199,0)
(197,97,0)
(155,75,0)
(266,30,0)
(235,238,0)
(323,198,0)
(30,153,0)
(5,266,0)
(77,232,0)
(187,225,0)
(104,191,0)
(144,271,0)
(61,97,0)
(218,22,0)
(142,25,0)
(306,225,0)
(293,135,0)
(248,199,0)
(179,239,0)
(296,140,0)
(160,48,0)
(221,207,0)
(35,237,0)
(321,261,0)
(14,153,0)
(115,172,0)
(319,250,0)
(314,310,0)
(173,133,0)
(149,233,0)
(314,256,0)
(6,98,0)
(21,83,0)
(37,135,0)
(18,80,1)
(218,310,1)
(116,192,1)
(246,154,1)
(165,244,1)
(90,190,1)
(31,77,1)
(111,310,1)
(73,234,1)
(247,271,1)
(28,253,1)
(271,243,1)
(98,126,1)
(53,308,1)
(198,323,1)
(94,207,1)
(289,50,1)
(138,54,1)
(240,180,1)
(121,278,1)
(151,47,1)
(82,198,1)
(268,141,1)
(32,226,1)
(120,314,1)
(319,10,1)
(133,330,1)
(44,92,1)
(288,145,1)
(317,205,1)
(326,22,1)
(248,199,1)
(177,165,1)
(49,175,1)
(212,213,1)
(195,179,1)
(212,95,1)
(70,209,1)
(272,40,1)
(250,319,1)
(226,301,1)
(91,155,1)
(239,282,1)
(89,28,1)
(145,52,1)
(318,49,1)
(271,132,1)
(149,309,1)
(168,104,1)
(314,43,1)
(222,133,1)
(332,314,1)
(324,222,1)
(146,227,1)
(9,310,1)
(105,41,1)
(294,11,1)
(160,329,1)
(310,146,1)
(200,156,1)
(25,142,1)
(140,105,1)
(258,64,1)
(80,145,1)
(314,256,1)
(1,316,1)
(182,73,1)
(100,111,1)
(225,306,1)
(224,45,1)
(27,164,1)
(243,235,1)
(264,282,1)
(237,166,1)
(293,124,1)
(282,12,1)
(73,199,1)
(87,44,1)
(122,3,1)
(173,163,1)
(238,202,1)
(12,200,1)
(4,3,1)
(66,277,1)
(155,50,1)
(11,169,1)
(6,98,1)
(118,82,1)
(275,263,1)
(211,57,1)
(196,135,1)
(245,43,1)
(314,231,1)
(290,9,1)
(12,156,1)
(22,218,1)
(145,140,1)
(215,148,1)
(298,318,1)
(270,133,1)
(267,147,1)
(133,173,1)
(38,120,1)
(126,275,1)
(279,38,1)
(314,310,1)
(145,30,1)
(199,42,1)
(42,181,1)
(109,313,1)
(124,35,1)
(150,219,1)
(309,7,1)
(252,213,1)
(28,282,1)
(172,280,1)
(99,17,1)
(63,254,1)
(323,129,1)
(266,5,1)
(283,179,1)
(277,31,1)
(313,130,1)
(253,283,1)
(236,199,1)
(262,213,1)
(223,193,1)
(294,213,1)
(289,284,1)
(307,178,1)
(66,286,1)
(7,204,1)
(132,144,1)
(29,221,1)
(171,103,1)
(289,273,1)
(31,195,1)
(164,286,1)
(17,294,1)
(242,4,1)
(9,256,1)
(9,43,1)
(71,62,1)
(9,53,1)
(265,120,1)
(43,68,1)
(140,296,1)
(141,49,1)
(52,287,1)
(159,289,1)
(299,168,1)
(321,228,1)
(120,188,1)
(6,263,1)
(47,295,1)
(20,62,1)
(76,66,1)
(57,138,1)
(47,139,1)
(227,215,1)
(156,211,1)
(151,26,1)
(77,80,1)
(147,96,1)
(135,37,1)
(269,70,1)
(41,60,1)
(60,14,1)
(164,30,1)
(176,1,1)
(257,85,1)
(169,115,1)
(27,66,1)
(92,328,1)
(48,43,1)
(234,248,1)
(95,99,1)
(239,121,1)
(316,177,1)
(50,256,1)
(329,245,1)
(221,301,1)
(127,182,1)
(79,249,1)
(309,30,1)
(175,151,1)
(178,43,1)
(75,91,1)
(272,137,1)
(42,290,1)
(66,30,1)
(127,199,1)
(86,257,1)
(254,152,1)
(333,56,1)
(217,236,1)
(40,265,1)
(80,288,1)
(228,242,1)
(131,90,1)
(263,84,1)
(219,36,1)
(152,109,1)
(62,217,1)
(281,64,1)
(67,252,1)
(330,173,1)
(37,293,1)
(256,206,1)
(219,224,1)
(4,122,1)
(245,310,1)
(102,332,1)
(188,102,1)
(124,229,1)
(69,223,1)
(31,111,1)
(235,205,1)
(14,176,1)
(185,19,1)
(221,32,1)
(272,127,1)
(5,131,1)
(45,322,1)
(183,113,1)
(286,161,1)
(46,323,1)
(19,238,1)
(287,140,1)
(273,104,1)
(26,159,1)
(104,191,1)
(8,63,1)
(31,94,1)
(198,46,1)
(235,238,1)
(144,243,1)
(99,213,1)
(58,20,1)
(201,203,1)
(204,30,1)
(35,237,1)
(179,239,1)
(64,48,1)
(139,201,1)
(218,171,1)
(12,30,1)
(207,221,1)
(64,245,1)
(272,212,1)
(229,35,1)
(193,321,1)
(100,286,1)
(249,299,1)
(322,86,1)
(174,27,1)
(83,71,1)
(280,262,1)
(203,267,1)
(327,240,1)
(262,67,1)
(264,183,1)
(48,160,1)
(164,76,1)
(48,256,1)
(23,281,1)
(56,238,1)
(49,174,1)
(163,150,1)
(173,219,1)
(206,300,1)
(202,220,1)
(278,264,1)
(292,246,1)
(48,310,1)
(21,83,1)
(248,58,1)
(125,100,1)
(155,139,1)
(62,199,1)
(154,207,1)
(208,25,1)
(30,266,1)
(166,75,1)
(192,250,1)
(218,256,1)
(55,247,1)
(129,74,1)
(68,186,1)
(117,89,1)
(104,271,1)
(180,307,1)
(130,6,1)
(205,269,1)
(235,317,1)
(191,55,1)
(188,43,1)
(115,172,1)
(107,268,1)
(3,8,1)
(207,29,1)
(19,333,1)
(26,139,1)
(173,238,1)
(187,25,1)
(179,264,1)
(328,79,1)
(103,279,1)
(35,75,1)
(169,262,1)
(148,0,1)
(54,18,1)
(143,196,1)
(26,238,1)
(245,107,1)
(218,43,1)
(74,116,1)
(15,143,1)
(20,21,1)
(213,326,1)
(84,19,1)
(301,125,1)
(31,149,1)
(295,26,1)
(220,15,1)
(231,298,1)
(191,243,1)
(188,310,1)
(308,23,1)
(249,243,1)
(142,309,1)
(209,324,1)
(244,118,1)
(96,178,1)
(289,270,1)
(326,34,1)
(190,292,1)
(289,185,1)
(137,258,1)
(47,238,1)
(284,124,1)
(10,187,1)
(245,256,1)
(300,87,1)
(161,327,1)
(49,151,1)
(306,208,1)
(0,117,1)
(85,69,1)
(113,282,1)
(187,225,1)
(188,256,1)
(49,27,1)
(57,80,2)
(332,314,2)
(7,207,2)
(156,80,2)
(245,310,2)
(174,27,2)
(54,80,2)
(113,80,2)
(324,133,2)
(183,80,2)
(234,64,2)
(192,309,2)
(310,146,2)
(154,207,2)
(245,107,2)
(14,176,2)
(225,309,2)
(256,206,2)
(280,262,2)
(204,207,2)
(9,256,2)
(207,178,2)
(155,178,2)
(270,133,2)
(221,32,2)
(267,178,2)
(149,309,2)
(139,178,2)
(329,245,2)
(228,19,2)
(306,309,2)
(15,124,2)
(9,53,2)
(73,199,2)
(282,12,2)
(218,256,2)
(84,19,2)
(130,19,2)
(213,326,2)
(64,48,2)
(313,19,2)
(164,30,2)
(38,120,2)
(75,50,2)
(8,19,2)
(48,256,2)
(277,178,2)
(3,19,2)
(9,43,2)
(71,62,2)
(42,290,2)
(278,264,2)
(307,178,2)
(87,104,2)
(125,111,2)
(21,83,2)
(314,256,2)
(323,309,2)
(245,43,2)
(229,178,2)
(258,64,2)
(326,120,2)
(86,19,2)
(99,120,2)
(292,207,2)
(80,145,2)
(25,309,2)
(144,133,2)
(117,179,2)
(207,111,2)
(289,178,2)
(269,133,2)
(195,179,2)
(219,224,2)
(290,64,2)
(40,120,2)
(316,309,2)
(133,19,2)
(10,309,2)
(21,62,2)
(271,133,2)
(46,309,2)
(239,282,2)
(64,245,2)
(140,309,2)
(326,22,2)
(11,120,2)
(173,238,2)
(143,124,2)
(265,120,2)
(229,50,2)
(166,178,2)
(26,178,2)
(236,64,2)
(48,245,2)
(268,49,2)
(245,256,2)
(99,213,2)
(90,207,2)
(80,309,2)
(238,202,2)
(91,178,2)
(145,140,2)
(244,309,2)
(191,271,2)
(237,178,2)
(41,309,2)
(124,50,2)
(202,124,2)
(127,64,2)
(187,309,2)
(294,120,2)
(30,266,2)
(252,120,2)
(187,225,2)
(326,34,2)
(213,120,2)
(215,179,2)
(169,120,2)
(205,133,2)
(23,64,2)
(104,133,2)
(141,49,2)
(152,19,2)
(67,120,2)
(22,218,2)
(63,19,2)
(284,124,2)
(155,50,2)
(273,104,2)
(177,309,2)
(217,64,2)
(242,19,2)
(196,124,2)
(50,104,2)
(35,178,2)
(173,163,2)
(73,64,2)
(22,120,2)
(60,309,2)
(140,105,2)
(4,3,2)
(53,64,2)
(12,80,2)
(321,228,2)
(12,30,2)
(318,49,2)
(62,64,2)
(145,52,2)
(32,178,2)
(29,111,2)
(264,80,2)
(193,19,2)
(256,104,2)
(168,104,2)
(182,64,2)
(219,36,2)
(124,35,2)
(160,245,2)
(62,199,2)
(294,213,2)
(238,124,2)
(199,64,2)
(231,49,2)
(20,64,2)
(221,111,2)
(188,314,2)
(19,238,2)
(142,309,2)
(94,207,2)
(42,64,2)
(282,80,2)
(239,264,2)
(227,179,2)
(47,26,2)
(223,19,2)
(104,191,2)
(19,124,2)
(95,120,2)
(244,118,2)
(188,43,2)
(165,309,2)
(69,19,2)
(209,133,2)
(118,309,2)
(166,50,2)
(264,282,2)
(5,207,2)
(129,309,2)
(107,49,2)
(257,19,2)
(163,19,2)
(121,264,2)
(17,120,2)
(207,221,2)
(235,205,2)
(198,309,2)
(109,19,2)
(116,309,2)
(44,104,2)
(176,309,2)
(188,256,2)
(127,199,2)
(253,179,2)
(42,181,2)
(293,124,2)
(235,133,2)
(47,139,2)
(29,178,2)
(330,19,2)
(171,120,2)
(203,178,2)
(58,64,2)
(115,262,2)
(212,120,2)
(200,80,2)
(248,64,2)
(120,188,2)
(222,133,2)
(180,178,2)
(35,75,2)
(28,282,2)
(226,178,2)
(220,124,2)
(35,50,2)
(115,172,2)
(159,178,2)
(275,19,2)
(52,309,2)
(179,264,2)
(28,179,2)
(224,19,2)
(317,133,2)
(37,124,2)
(48,310,2)
(185,19,2)
(164,286,2)
(287,309,2)
(14,309,2)
(30,207,2)
(188,310,2)
(266,207,2)
(279,120,2)
(221,178,2)
(9,64,2)
(27,178,2)
(12,156,2)
(290,9,2)
(147,178,2)
(18,80,2)
(301,111,2)
(314,49,2)
(309,207,2)
(247,271,2)
(89,179,2)
(26,139,2)
(208,309,2)
(148,179,2)
(111,179,2)
(86,257,2)
(281,64,2)
(122,19,2)
(179,80,2)
(102,314,2)
(77,80,2)
(286,178,2)
(91,50,2)
(132,133,2)
(240,178,2)
(137,64,2)
(263,19,2)
(333,124,2)
(201,178,2)
(164,66,2)
(55,271,2)
(138,80,2)
(328,104,2)
(314,43,2)
(262,213,2)
(131,207,2)
(226,111,2)
(327,178,2)
(301,178,2)
(100,178,2)
(308,64,2)
(85,19,2)
(124,178,2)
(92,104,2)
(66,30,2)
(179,239,2)
(218,171,2)
(300,104,2)
(321,19,2)
(249,104,2)
(6,19,2)
(198,323,2)
(245,49,2)
(96,178,2)
(98,19,2)
(64,49,2)
(100,111,2)
(309,30,2)
(295,26,2)
(120,49,2)
(271,243,2)
(161,178,2)
(314,310,2)
(212,213,2)
(82,309,2)
(262,120,2)
(47,238,2)
(79,104,2)
(120,314,2)
(187,25,2)
(56,124,2)
(103,120,2)
(172,262,2)
(70,133,2)
(135,124,2)
(221,301,2)
(0,179,2)
(145,309,2)
(1,309,2)
(9,310,2)
(246,207,2)
(6,263,2)
(173,219,2)
(299,104,2)
(243,235,2)
(218,310,2)
(35,237,2)
(322,19,2)
(76,66,2)
(250,309,2)
(298,49,2)
(218,43,2)
(243,133,2)
(211,80,2)
(48,43,2)
(283,179,2)
(126,19,2)
(175,151,2)
(314,231,2)
(125,178,2)
(150,19,2)
(199,42,2)
(206,104,2)
(4,19,2)
(237,50,2)
(191,243,2)
(145,30,2)
(83,62,2)
(151,178,2)
(75,178,2)
(249,243,2)
(173,19,2)
(254,19,2)
(105,309,2)
(310,179,2)
(74,309,2)
(288,309,2)
(319,309,2)
(31,178,2)
(219,19,2)
(248,199,2)
(133,173,2)
(66,286,2)
(146,179,2)
(6,98,2)
(218,120,2)
(235,238,2)
(45,19,2)
(190,207,2)
(104,271,2)
(140,296,2)
(66,178,2)
(26,238,2)
(32,111,2)
-----------------------------------
(0,data)
(1,TCP_PORT)
(2,if (WSAStartup(MAKEWORD(2,2)
(3,service.sin_addr)
(4,service.sin_addr.s_addr)
(5,IPPROTO_TCP)
(6,memset(&service, 0, sizeof(service)
(7,INVALID_SOCKET)
(8,sin_addr)
(9,data*sizeof(char)
(10,service)
(11,HELLO_STRING)
(12,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(13,)
(14,service.sin_port = htons(TCP_PORT)
(15,SOCK_STREAM)
(16,)
(17,myString)
(18,recvResult)
(19,connectSocket == INVALID_SOCKET)
(20,myString)
(21,exit(-1)
(22,malloc(data*sizeof(char)
(23,data)
(24,do)
(25,&service)
(26,connectSocket != INVALID_SOCKET)
(27,wsaDataInit)
(28,inputBuffer[recvResult])
(29,NO_ERROR)
(30,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(31,connectSocket)
(32,&wsaData)
(33,if (WSAStartup(MAKEWORD(2,2)
(34,char *)
(35,WSAStartup(MAKEWORD(2,2)
(36,struct sockaddr*)
(37,1)
(38,myString)
(39,)
(40,printLine("Input is less than the length of the source string or too large")
(41,service)
(42,(char *)
(43,data = 0)
(44,inputBuffer)
(45,service)
(46,s_addr)
(47,CLOSE_SOCKET(connectSocket)
(48,data < 100)
(49,globalReturnsTrueOrFalse()
(50,0)
(51,)
(52,sizeof(service)
(53,sizeof(char)
(54,connectSocket)
(55,0)
(56,connectSocket)
(57,CHAR_ARRAY_SIZE)
(58,HELLO_STRING)
(59,if (recvResult == SOCKET_ERROR || recvResult == 0)
(60,connectSocket)
(61,wsaDataInit)
(62,myString == NULL)
(63,service)
(64,data > strlen(HELLO_STRING)
(65,myString)
(66,connectSocket != INVALID_SOCKET)
(67,NULL)
(68,0)
(69,service.sin_port)
(70,CHAR_ARRAY_SIZE)
(71,1)
(72,)
(73,printLine(myString)
(74,service)
(75,MAKEWORD(2,2)
(76,connectSocket)
(77,break;)
(78,)
(79,\'\\0\')
(80,connect(connectSocket, (struct sockaddr*)
(81,if (data > strlen(HELLO_STRING)
(82,IP_ADDRESS)
(83,-1)
(84,service)
(85,TCP_PORT)
(86,service.sin_port = htons(TCP_PORT)
(87,NULL)
(88,if (wsaDataInit)
(89,\'\\0\')
(90,AF_INET)
(91,2)
(92,data)
(93,connectSocket)
(94,break;)
(95,myString)
(96,wsaDataInit)
(97,)
(98,sizeof(service)
(99,printLine(myString)
(100,2)
(101,service)
(102,100)
(103,char)
(104,recvResult == SOCKET_ERROR || recvResult == 0)
(105,&service)
(106,)
(107,strlen(HELLO_STRING)
(108,)
(109,service.sin_family)
(110,wsaData)
(111,0)
(112,)
(113,recvResult)
(114,data)
(115,exit(-1)
(116,service.sin_family = AF_INET)
(117,inputBuffer[recvResult] = \'\\0\')
(118,inet_addr(IP_ADDRESS)
(119,if (connect(connectSocket, (struct sockaddr*)
(120,data > strlen(HELLO_STRING)
(121,0)
(122,s_addr)
(123,if (data > strlen(HELLO_STRING)
(124,WSAStartup(MAKEWORD(2,2)
(125,2)
(126,service)
(127,free(myString)
(128,if(globalReturnsTrueOrFalse()
(129,sin_addr)
(130,service)
(131,SOCK_STREAM)
(132,SOCKET_ERROR)
(133,connect(connectSocket, (struct sockaddr*)
(134,myString)
(135,wsaDataInit = 1)
(136,if (recvResult == SOCKET_ERROR || recvResult == 0)
(137,printLine("Input is less than the length of the source string or too large")
(138,inputBuffer)
(139,connectSocket = INVALID_SOCKET)
(140,(struct sockaddr*)
(141,data)
(142,service)
(143,AF_INET)
(144,recvResult)
(145,connect(connectSocket, (struct sockaddr*)
(146,strtoul(inputBuffer, NULL, 0)
(147,0)
(148,inputBuffer)
(149,break;)
(150,service)
(151,wsaDataInit)
(152,AF_INET)
(153,)
(154,wsaDataInit)
(155,2)
(156,CHAR_ARRAY_SIZE - 1)
(157,)
(158,if (connectSocket == INVALID_SOCKET)
(159,INVALID_SOCKET)
(160,100)
(161,INVALID_SOCKET)
(162,)
(163,sizeof(service)
(164,CLOSE_SOCKET(connectSocket)
(165,service)
(166,wsaData)
(167,)
(168,inputBuffer)
(169,myString)
(170,)
(171,sizeof(char)
(172,-1)
(173,connect(connectSocket, (struct sockaddr*)
(174,WSACleanup()
(175,WSACleanup()
(176,htons(TCP_PORT)
(177,sin_port)
(178,globalReturnsTrueOrFalse()
(179,recvResult == SOCKET_ERROR || recvResult == 0)
(180,0)
(181,char *)
(182,myString)
(183,SOCKET_ERROR)
(184,)
(185,break;)
(186,data)
(187,memset(&service, 0, sizeof(service)
(188,data < 100)
(189,recvResult)
(190,connectSocket)
(191,recvResult == 0)
(192,AF_INET)
(193,service)
(194,if (connect(connectSocket, (struct sockaddr*)
(195,break;)
(196,connectSocket)
(197,inputBuffer)
(198,service.sin_addr.s_addr)
(199,myString = (char *)
(200,0)
(201,INVALID_SOCKET)
(202,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(203,connectSocket)
(204,connectSocket)
(205,CHAR_ARRAY_SIZE - 1)
(206,strtoul(inputBuffer, NULL, 0)
(207,WSAStartup(MAKEWORD(2,2)
(208,0)
(209,inputBuffer)
(210,)
(211,1)
(212,free(myString)
(213,myString = (char *)
(214,if (wsaDataInit)
(215,NULL)
(216,if (myString == NULL)
(217,NULL)
(218,data*sizeof(char)
(219,(struct sockaddr*)
(220,IPPROTO_TCP)
(221,WSAStartup(MAKEWORD(2,2)
(222,recvResult)
(223,sin_port)
(224,&service)
(225,sizeof(service)
(226,wsaData)
(227,0)
(228,inet_addr(IP_ADDRESS)
(229,NO_ERROR)
(230,wsaDataInit)
(231,strlen(HELLO_STRING)
(232,)
(233,)
(234,myString)
(235,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(236,myString)
(237,&wsaData)
(238,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(239,recvResult == 0)
(240,wsaDataInit = 0)
(241,if (myString == NULL)
(242,IP_ADDRESS)
(243,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(244,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(245,data > strlen(HELLO_STRING)
(246,1)
(247,recvResult)
(248,strcpy(myString, HELLO_STRING)
(249,inputBuffer[recvResult])
(250,service.sin_family)
(251,if (connectSocket != INVALID_SOCKET)
(252,myString)
(253,recvResult)
(254,service.sin_family = AF_INET)
(255,if (connectSocket == INVALID_SOCKET)
(256,data = strtoul(inputBuffer, NULL, 0)
(257,htons(TCP_PORT)
(258,"Input is less than the length of the source string or too large")
(259,if(globalReturnsTrueOrFalse()
(260,)
(261,)
(262,myString == NULL)
(263,&service)
(264,recvResult == SOCKET_ERROR)
(265,"Input is less than the length of the source string or too large")
(266,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(267,wsaDataInit = 0)
(268,HELLO_STRING)
(269,1)
(270,break;)
(271,recvResult == SOCKET_ERROR)
(272,RET)
(273,break;)
(274,)
(275,0)
(276,wsaData)
(277,INVALID_SOCKET)
(278,recvResult)
(279,data)
(280,1)
(281,myString)
(282,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(283,inputBuffer)
(284,break;)
(285,connectSocket)
(286,connectSocket = INVALID_SOCKET)
(287,service)
(288,SOCKET_ERROR)
(289,connectSocket)
(290,malloc(data*sizeof(char)
(291,)
(292,wsaDataInit = 1)
(293,wsaDataInit)
(294,strcpy(myString, HELLO_STRING)
(295,connectSocket)
(296,struct sockaddr*)
(297,)
(298,HELLO_STRING)
(299,recvResult)
(300,0)
(301,MAKEWORD(2,2)
(302,inputBuffer)
(303,)
(304,if (connectSocket != INVALID_SOCKET)
(305,)
(306,service)
(307,wsaDataInit)
(308,char)
(309,connectSocket == INVALID_SOCKET)
(310,data = strtoul(inputBuffer, NULL, 0)
(311,)
(312,recvResult)
(313,sin_family)
(314,data > strlen(HELLO_STRING)
(315,)
(316,service.sin_port)
(317,0)
(318,data)
(319,sin_family)
(320,service)
(321,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(322,connectSocket)
(323,service.sin_addr)
(324,connectSocket)
(325,)
(326,(char *)
(327,connectSocket)
(328,inputBuffer[recvResult] = \'\\0\')
(329,data)
(330,SOCKET_ERROR)
(331,do)
(332,data)
(333,INVALID_SOCKET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^