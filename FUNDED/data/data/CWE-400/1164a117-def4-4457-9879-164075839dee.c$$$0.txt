-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink(int * countPtr)
{
    int count = *countPtr;
    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
    SLEEP(count);
    printLine("Sleep time possibly too long");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
21,22
21,23
22,23
24,25
26,27
27,28
27,29
28,29
-----nextToken-----
2,4,6,8,9,13,15,19,23,25,29,30
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink(int * countPtr){    int count = *countPtr;    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */    SLEEP(count);    printLine("Sleep time possibly too long");}
void
CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink(int * countPtr)
CWE400_Resource_Exhaustion__listen_socket_sleep_63b_badSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */    SLEEP(count);    printLine("Sleep time possibly too long");}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(5,6,0)
(6,2,0)
(2,11,0)
(0,9,0)
(7,2,0)
(1,4,0)
(10,11,0)
(6,9,0)
(11,2,0)
(2,9,0)
(11,8,0)
(4,9,0)
(11,8,1)
(3,4,1)
(4,1,1)
(10,7,1)
(5,2,1)
(6,5,1)
(1,6,1)
(6,2,1)
(11,10,1)
(2,11,1)
(6,2,2)
(2,11,2)
(11,8,2)
-----------------------------------
(0,count)
(1,"Sleep time possibly too long")
(2,count = *countPtr)
(3,RET)
(4,printLine("Sleep time possibly too long")
(5,count)
(6,SLEEP(count)
(7,count)
(8,int * countPtr)
(9,)
(10,countPtr)
(11,*countPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^