-----label-----
1
-----code-----
static int agent_hangup(struct ast_channel *ast)
{
	struct agent_pvt *p = ast_channel_tech_pvt(ast);
	struct ast_channel *indicate_chan = NULL;
	char *tmp_moh; /* moh buffer for indicating after unlocking p */

	if (p->pending) {
		AST_LIST_LOCK(&agents);
		AST_LIST_REMOVE(&agents, p, list);
		AST_LIST_UNLOCK(&agents);
	}

	ast_mutex_lock(&p->lock);
	p->owner = NULL;
	ast_channel_tech_pvt_set(ast, NULL);
	p->app_sleep_cond = 1;
	p->acknowledged = 0;

	/* Release ownership of the agent to other threads (presumably running the login app). */
	p->app_lock_flag = 0;
	ast_cond_signal(&p->app_complete_cond);

	/* if they really are hung up then set start to 0 so the test
	 * later if we're called on an already downed channel
	 * doesn't cause an agent to be logged out like when
	 * agent_request() is followed immediately by agent_hangup()
	 * as in apps/app_chanisavail.c:chanavail_exec()
	 */

	ast_debug(1, "Hangup called for state %s\n", ast_state2str(ast_channel_state(ast)));
	if (p->start && (ast_channel_state(ast) != AST_STATE_UP)) {
		p->start = 0;
	} else
		p->start = 0;
	if (p->chan) {
		ast_channel_internal_bridged_channel_set(p->chan, NULL);
		/* If they're dead, go ahead and hang up on the agent now */
		if (p->dead) {
			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);
		} else if (p->loginstart) {
			indicate_chan = ast_channel_ref(p->chan);
			tmp_moh = ast_strdupa(p->moh);
		}
	}
	ast_mutex_unlock(&p->lock);

	if (indicate_chan) {
		ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,
			S_OR(tmp_moh, NULL),
			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0);
		indicate_chan = ast_channel_unref(indicate_chan);
	}

	/* Only register a device state change if the agent is still logged in */
	if (!p->loginstart) {
		p->logincallerid[0] = '\0';
	} else {
		ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent);
	}

	if (p->abouttograb) {
		/* Let the "about to grab" thread know this isn't valid anymore, and let it
		   kill it later */
		p->abouttograb = 0;
	} else if (p->dead) {
		ast_mutex_destroy(&p->lock);
		ast_cond_destroy(&p->app_complete_cond);
		ast_cond_destroy(&p->login_wait_cond);
		ast_free(p);
	} else {
		if (p->chan) {
			/* Not dead -- check availability now */
			ast_mutex_lock(&p->lock);
			/* Store last disconnect time */
			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));
			ast_mutex_unlock(&p->lock);
		}
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
35,36
36,37
36,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
46,47
46,48
46,49
47,48
48,49
48,50
49,50
51,52
52,53
52,54
55,56
56,57
56,58
56,59
56,60
57,58
59,60
60,61
62,63
64,65
66,67
67,68
67,69
68,69
70,71
71,72
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
83,84
83,85
84,85
84,86
85,86
88,89
90,91
91,92
91,93
91,94
92,93
94,95
96,97
98,99
99,100
99,101
100,101
100,102
101,102
105,106
106,107
106,108
107,108
107,109
108,109
112,113
113,114
113,115
114,115
114,116
115,116
119,120
120,121
120,122
121,122
123,124
124,125
124,126
125,126
128,129
129,130
129,131
129,132
129,133
130,131
134,135
134,136
135,136
137,138
137,139
138,139
140,141
142,143
142,144
142,145
143,144
143,145
144,145
144,146
145,146
148,149
149,150
149,151
150,151
150,152
151,152
153,154
155,156
157,158
158,159
159,160
159,161
160,161
160,162
161,162
165,166
166,167
166,168
167,168
167,169
168,169
172,173
172,174
173,174
173,175
174,175
177,178
177,179
178,179
179,180
179,181
179,182
180,181
182,183
182,184
183,184
186,187
188,189
188,190
188,191
189,190
189,191
190,191
193,194
194,195
195,196
195,197
195,198
196,197
198,199
198,200
199,200
202,203
204,205
204,206
205,206
205,207
206,207
209,210
209,211
210,211
211,212
211,213
212,213
214,215
214,216
215,216
217,218
217,219
218,219
221,222
222,223
222,224
223,224
225,226
225,227
226,227
228,229
228,230
229,230
232,233
233,234
233,235
234,235
236,237
237,238
237,239
238,239
241,242
241,243
242,243
244,245
244,246
245,246
246,247
246,248
246,249
246,250
246,251
247,248
249,250
251,252
253,254
253,255
253,256
254,255
256,257
258,259
260,261
260,262
260,263
261,262
262,263
262,264
263,264
265,266
267,268
267,269
268,269
268,270
269,270
271,272
275,276
276,277
276,278
277,278
279,280
279,281
280,281
282,283
284,285
284,286
284,287
285,286
286,287
286,288
287,288
290,291
291,292
292,293
292,294
293,294
293,295
294,295
294,296
295,296
300,301
301,302
302,303
302,304
302,305
302,306
303,304
305,306
308,309
308,310
309,310
312,313
312,314
312,315
313,314
313,315
314,315
317,318
318,319
319,320
319,321
320,321
320,322
321,322
325,326
325,327
325,328
326,327
326,328
327,328
330,331
330,332
330,333
330,334
331,332
332,333
332,334
333,334
335,336
336,337
336,338
337,338
340,341
341,342
341,343
342,343
344,345
345,346
345,347
346,347
349,350
350,351
350,352
351,352
353,354
354,355
354,356
355,356
358,359
359,360
359,361
360,361
362,363
364,365
365,366
365,367
366,367
366,368
367,368
370,371
370,372
370,373
371,372
372,373
372,374
373,374
375,376
376,377
376,378
377,378
380,381
381,382
381,383
382,383
382,384
383,384
386,387
386,388
386,389
387,388
389,390
390,391
392,393
392,394
392,395
393,394
395,396
395,397
396,397
400,401
401,402
401,403
402,403
404,405
405,406
405,407
406,407
409,410
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,28,30,31,34,37,39,40,44,45,50,53,54,58,61,63,65,69,72,76,80,81,86,87,89,93,95,97,102,103,104,109,110,111,116,117,118,122,126,127,131,132,133,136,139,141,146,147,152,154,156,162,163,164,169,170,171,175,176,181,184,185,187,191,192,197,200,201,203,207,208,213,216,219,220,224,227,230,231,235,239,240,243,248,250,252,255,257,259,264,266,270,272,273,274,278,281,283,288,289,296,297,298,299,304,306,307,310,311,315,316,322,323,324,328,329,334,338,339,343,347,348,352,356,357,361,363,368,369,374,378,379,384,385,388,391,394,397,398,399,403,407,408,410
-----computeFrom-----
83,84
83,85
99,100
99,101
106,107
106,108
113,114
113,115
143,144
143,145
149,150
149,151
159,160
159,161
166,167
166,168
211,212
211,213
222,223
222,224
267,268
267,269
276,277
276,278
292,293
292,294
319,320
319,321
381,382
381,383
-----guardedBy-----
146,162
147,163
-----guardedByNegation-----
146,169
147,170
-----lastLexicalUse-----
146,169
147,170
-----jump-----
146,169
147,170
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int agent_hangup(struct ast_channel *ast){	struct agent_pvt *p = ast_channel_tech_pvt(ast);	struct ast_channel *indicate_chan = NULL;	char *tmp_moh; /* moh buffer for indicating after unlocking p */	if (p->pending) {		AST_LIST_LOCK(&agents);		AST_LIST_REMOVE(&agents, p, list);		AST_LIST_UNLOCK(&agents);	}	ast_mutex_lock(&p->lock);	p->owner = NULL;	ast_channel_tech_pvt_set(ast, NULL);	p->app_sleep_cond = 1;	p->acknowledged = 0;	/* Release ownership of the agent to other threads (presumably running the login app). */	p->app_lock_flag = 0;	ast_cond_signal(&p->app_complete_cond);	/* if they really are hung up then set start to 0 so the test	 * later if we're called on an already downed channel	 * doesn't cause an agent to be logged out like when	 * agent_request() is followed immediately by agent_hangup()	 * as in apps/app_chanisavail.c:chanavail_exec()	 */	ast_debug(1, "Hangup called for state %s\n", ast_state2str(ast_channel_state(ast)));	if (p->start && (ast_channel_state(ast) != AST_STATE_UP)) {		p->start = 0;	} else		p->start = 0;	if (p->chan) {		ast_channel_internal_bridged_channel_set(p->chan, NULL);		/* If they're dead, go ahead and hang up on the agent now */		if (p->dead) {			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);		} else if (p->loginstart) {			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}	}	ast_mutex_unlock(&p->lock);	if (indicate_chan) {		ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,			S_OR(tmp_moh, NULL),			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0);		indicate_chan = ast_channel_unref(indicate_chan);	}	/* Only register a device state change if the agent is still logged in */	if (!p->loginstart) {		p->logincallerid[0] = '\0';	} else {		ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent);	}	if (p->abouttograb) {		/* Let the "about to grab" thread know this isn't valid anymore, and let it		   kill it later */		p->abouttograb = 0;	} else if (p->dead) {		ast_mutex_destroy(&p->lock);		ast_cond_destroy(&p->app_complete_cond);		ast_cond_destroy(&p->login_wait_cond);		ast_free(p);	} else {		if (p->chan) {			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}	}	return 0;}
static int
agent_hangup(struct ast_channel *ast)
agent_hangup
struct ast_channel *ast
struct ast_channel
ast_channel
*ast
*
ast
{	struct agent_pvt *p = ast_channel_tech_pvt(ast);	struct ast_channel *indicate_chan = NULL;	char *tmp_moh; /* moh buffer for indicating after unlocking p */	if (p->pending) {		AST_LIST_LOCK(&agents);		AST_LIST_REMOVE(&agents, p, list);		AST_LIST_UNLOCK(&agents);	}	ast_mutex_lock(&p->lock);	p->owner = NULL;	ast_channel_tech_pvt_set(ast, NULL);	p->app_sleep_cond = 1;	p->acknowledged = 0;	/* Release ownership of the agent to other threads (presumably running the login app). */	p->app_lock_flag = 0;	ast_cond_signal(&p->app_complete_cond);	/* if they really are hung up then set start to 0 so the test	 * later if we're called on an already downed channel	 * doesn't cause an agent to be logged out like when	 * agent_request() is followed immediately by agent_hangup()	 * as in apps/app_chanisavail.c:chanavail_exec()	 */	ast_debug(1, "Hangup called for state %s\n", ast_state2str(ast_channel_state(ast)));	if (p->start && (ast_channel_state(ast) != AST_STATE_UP)) {		p->start = 0;	} else		p->start = 0;	if (p->chan) {		ast_channel_internal_bridged_channel_set(p->chan, NULL);		/* If they're dead, go ahead and hang up on the agent now */		if (p->dead) {			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);		} else if (p->loginstart) {			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}	}	ast_mutex_unlock(&p->lock);	if (indicate_chan) {		ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,			S_OR(tmp_moh, NULL),			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0);		indicate_chan = ast_channel_unref(indicate_chan);	}	/* Only register a device state change if the agent is still logged in */	if (!p->loginstart) {		p->logincallerid[0] = '\0';	} else {		ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent);	}	if (p->abouttograb) {		/* Let the "about to grab" thread know this isn't valid anymore, and let it		   kill it later */		p->abouttograb = 0;	} else if (p->dead) {		ast_mutex_destroy(&p->lock);		ast_cond_destroy(&p->app_complete_cond);		ast_cond_destroy(&p->login_wait_cond);		ast_free(p);	} else {		if (p->chan) {			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}	}	return 0;}
struct agent_pvt *p = ast_channel_tech_pvt(ast);
struct agent_pvt *p = ast_channel_tech_pvt(ast);
struct agent_pvt
agent_pvt
*p = ast_channel_tech_pvt(ast)
*
p
= ast_channel_tech_pvt(ast)
ast_channel_tech_pvt(ast)
ast_channel_tech_pvt
ast_channel_tech_pvt
ast
ast
struct ast_channel *indicate_chan = NULL;
struct ast_channel *indicate_chan = NULL;
struct ast_channel
ast_channel
*indicate_chan = NULL
*
indicate_chan
= NULL
NULL
NULL
char *tmp_moh;
char *tmp_moh;
char
*tmp_moh
*
tmp_moh
if (p->pending) {		AST_LIST_LOCK(&agents);		AST_LIST_REMOVE(&agents, p, list);		AST_LIST_UNLOCK(&agents);	}
p->pending
p
p
pending
{		AST_LIST_LOCK(&agents);		AST_LIST_REMOVE(&agents, p, list);		AST_LIST_UNLOCK(&agents);	}
AST_LIST_LOCK(&agents);
AST_LIST_LOCK(&agents);
AST_LIST_LOCK
AST_LIST_LOCK
(&agents)
&agents
&
agents
AST_LIST_REMOVE(&agents, p, list);
AST_LIST_REMOVE(&agents, p, list)
AST_LIST_REMOVE
AST_LIST_REMOVE
&agents
agents
agents
p
p
list
list
AST_LIST_UNLOCK(&agents);
AST_LIST_UNLOCK(&agents)
AST_LIST_UNLOCK
AST_LIST_UNLOCK
&agents
agents
agents
ast_mutex_lock(&p->lock);
ast_mutex_lock(&p->lock)
ast_mutex_lock
ast_mutex_lock
&p->lock
p->lock
p
p
lock
p->owner = NULL;
p->owner = NULL
p->owner
p
p
owner
NULL
NULL
ast_channel_tech_pvt_set(ast, NULL);
ast_channel_tech_pvt_set(ast, NULL)
ast_channel_tech_pvt_set
ast_channel_tech_pvt_set
ast
ast
NULL
NULL
p->app_sleep_cond = 1;
p->app_sleep_cond = 1
p->app_sleep_cond
p
p
app_sleep_cond
1
p->acknowledged = 0;
p->acknowledged = 0
p->acknowledged
p
p
acknowledged
0
p->app_lock_flag = 0;
p->app_lock_flag = 0
p->app_lock_flag
p
p
app_lock_flag
0
ast_cond_signal(&p->app_complete_cond);
ast_cond_signal(&p->app_complete_cond)
ast_cond_signal
ast_cond_signal
&p->app_complete_cond
p->app_complete_cond
p
p
app_complete_cond
ast_debug(1, "Hangup called for state %s\n", ast_state2str(ast_channel_state(ast)));
ast_debug(1, "Hangup called for state %s\n", ast_state2str(ast_channel_state(ast)))
ast_debug
ast_debug
1
"Hangup called for state %s\n"
ast_state2str(ast_channel_state(ast))
ast_state2str
ast_state2str
ast_channel_state(ast)
ast_channel_state
ast_channel_state
ast
ast
if (p->start && (ast_channel_state(ast) != AST_STATE_UP)) {		p->start = 0;	} else		p->start = 0;
p->start && (ast_channel_state(ast) != AST_STATE_UP)
p->start
p
p
start
(ast_channel_state(ast) != AST_STATE_UP)
ast_channel_state(ast) != AST_STATE_UP
ast_channel_state(ast)
ast_channel_state
ast_channel_state
ast
ast
AST_STATE_UP
AST_STATE_UP
{		p->start = 0;	}
p->start = 0;
p->start = 0
p->start
p
p
start
0
p->start = 0;
p->start = 0
p->start
p
p
start
0
if (p->chan) {		ast_channel_internal_bridged_channel_set(p->chan, NULL);		/* If they're dead, go ahead and hang up on the agent now */		if (p->dead) {			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);		} else if (p->loginstart) {			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}	}
p->chan
p
p
chan
{		ast_channel_internal_bridged_channel_set(p->chan, NULL);		/* If they're dead, go ahead and hang up on the agent now */		if (p->dead) {			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);		} else if (p->loginstart) {			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}	}
ast_channel_internal_bridged_channel_set(p->chan, NULL);
ast_channel_internal_bridged_channel_set(p->chan, NULL)
ast_channel_internal_bridged_channel_set
ast_channel_internal_bridged_channel_set
p->chan
p
p
chan
NULL
NULL
if (p->dead) {			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);		} else if (p->loginstart) {			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}
p->dead
p
p
dead
{			ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);		}
ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT);
ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT)
ast_softhangup
ast_softhangup
p->chan
p
p
chan
AST_SOFTHANGUP_EXPLICIT
AST_SOFTHANGUP_EXPLICIT
if (p->loginstart) {			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}
p->loginstart
p
p
loginstart
{			indicate_chan = ast_channel_ref(p->chan);			tmp_moh = ast_strdupa(p->moh);		}
indicate_chan = ast_channel_ref(p->chan);
indicate_chan = ast_channel_ref(p->chan)
indicate_chan
indicate_chan
ast_channel_ref(p->chan)
ast_channel_ref
ast_channel_ref
p->chan
p
p
chan
tmp_moh = ast_strdupa(p->moh);
tmp_moh = ast_strdupa(p->moh)
tmp_moh
tmp_moh
ast_strdupa(p->moh)
ast_strdupa
ast_strdupa
p->moh
p
p
moh
ast_mutex_unlock(&p->lock);
ast_mutex_unlock(&p->lock)
ast_mutex_unlock
ast_mutex_unlock
&p->lock
p->lock
p
p
lock
if (indicate_chan) {		ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,			S_OR(tmp_moh, NULL),			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0);		indicate_chan = ast_channel_unref(indicate_chan);	}
indicate_chan
indicate_chan
{		ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,			S_OR(tmp_moh, NULL),			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0);		indicate_chan = ast_channel_unref(indicate_chan);	}
ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,			S_OR(tmp_moh, NULL),			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0);
ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,			S_OR(tmp_moh, NULL),			!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0)
ast_indicate_data
ast_indicate_data
indicate_chan
indicate_chan
AST_CONTROL_HOLD
AST_CONTROL_HOLD
S_OR(tmp_moh, NULL)
S_OR
S_OR
tmp_moh
tmp_moh
NULL
NULL
!ast_strlen_zero(tmp_moh) ? strlen(tmp_moh) + 1 : 0
!ast_strlen_zero(tmp_moh)
ast_strlen_zero(tmp_moh)
ast_strlen_zero
ast_strlen_zero
tmp_moh
tmp_moh
strlen(tmp_moh) + 1
strlen(tmp_moh)
strlen
strlen
tmp_moh
tmp_moh
1
0
indicate_chan = ast_channel_unref(indicate_chan);
indicate_chan = ast_channel_unref(indicate_chan)
indicate_chan
indicate_chan
ast_channel_unref(indicate_chan)
ast_channel_unref
ast_channel_unref
indicate_chan
indicate_chan
if (!p->loginstart) {		p->logincallerid[0] = '\0';	} else {		ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent);	}
!p->loginstart
p->loginstart
p
p
loginstart
{		p->logincallerid[0] = '\0';	}
p->logincallerid[0] = '\0';
p->logincallerid[0] = '\0'
p->logincallerid[0]
p->logincallerid
p
p
logincallerid
0
'\0'
{		ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent);	}
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent);
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
"Agent/%s"
p->agent
p
p
agent
if (p->abouttograb) {		/* Let the "about to grab" thread know this isn't valid anymore, and let it		   kill it later */		p->abouttograb = 0;	} else if (p->dead) {		ast_mutex_destroy(&p->lock);		ast_cond_destroy(&p->app_complete_cond);		ast_cond_destroy(&p->login_wait_cond);		ast_free(p);	} else {		if (p->chan) {			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}	}
p->abouttograb
p
p
abouttograb
{		/* Let the "about to grab" thread know this isn't valid anymore, and let it		   kill it later */		p->abouttograb = 0;	}
p->abouttograb = 0;
p->abouttograb = 0
p->abouttograb
p
p
abouttograb
0
if (p->dead) {		ast_mutex_destroy(&p->lock);		ast_cond_destroy(&p->app_complete_cond);		ast_cond_destroy(&p->login_wait_cond);		ast_free(p);	} else {		if (p->chan) {			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}	}
p->dead
p
p
dead
{		ast_mutex_destroy(&p->lock);		ast_cond_destroy(&p->app_complete_cond);		ast_cond_destroy(&p->login_wait_cond);		ast_free(p);	}
ast_mutex_destroy(&p->lock);
ast_mutex_destroy(&p->lock)
ast_mutex_destroy
ast_mutex_destroy
&p->lock
p->lock
p
p
lock
ast_cond_destroy(&p->app_complete_cond);
ast_cond_destroy(&p->app_complete_cond)
ast_cond_destroy
ast_cond_destroy
&p->app_complete_cond
p->app_complete_cond
p
p
app_complete_cond
ast_cond_destroy(&p->login_wait_cond);
ast_cond_destroy(&p->login_wait_cond)
ast_cond_destroy
ast_cond_destroy
&p->login_wait_cond
p->login_wait_cond
p
p
login_wait_cond
ast_free(p);
ast_free(p)
ast_free
ast_free
p
p
{		if (p->chan) {			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}	}
if (p->chan) {			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}
p->chan
p
p
chan
{			/* Not dead -- check availability now */			ast_mutex_lock(&p->lock);			/* Store last disconnect time */			p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));			ast_mutex_unlock(&p->lock);		}
ast_mutex_lock(&p->lock);
ast_mutex_lock(&p->lock)
ast_mutex_lock
ast_mutex_lock
&p->lock
p->lock
p
p
lock
p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000));
p->lastdisc = ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000))
p->lastdisc
p
p
lastdisc
ast_tvadd(ast_tvnow(), ast_samp2tv(p->wrapuptime, 1000))
ast_tvadd
ast_tvadd
ast_tvnow()
ast_tvnow
ast_tvnow
ast_samp2tv(p->wrapuptime, 1000)
ast_samp2tv
ast_samp2tv
p->wrapuptime
p
p
wrapuptime
1000
ast_mutex_unlock(&p->lock);
ast_mutex_unlock(&p->lock)
ast_mutex_unlock
ast_mutex_unlock
&p->lock
p->lock
p
p
lock
return 0;
0
-----joern-----
(176,95,0)
(43,60,0)
(130,83,0)
(106,92,0)
(57,18,0)
(28,47,0)
(178,208,0)
(44,47,0)
(177,65,0)
(32,156,0)
(97,201,0)
(171,3,0)
(152,133,0)
(49,165,0)
(26,161,0)
(8,18,0)
(214,93,0)
(147,117,0)
(133,18,0)
(43,59,0)
(65,88,0)
(120,154,0)
(30,18,0)
(43,117,0)
(22,95,0)
(132,103,0)
(115,7,0)
(110,131,0)
(150,18,0)
(203,95,0)
(8,137,0)
(156,182,0)
(25,184,0)
(34,133,0)
(60,196,0)
(3,181,0)
(111,157,0)
(228,16,0)
(181,210,0)
(229,118,0)
(218,100,0)
(77,185,0)
(67,126,0)
(91,105,0)
(174,95,0)
(23,18,0)
(5,43,0)
(170,18,0)
(88,65,0)
(125,198,0)
(2,197,0)
(201,18,0)
(128,110,0)
(28,57,0)
(117,122,0)
(215,40,0)
(207,86,0)
(45,184,0)
(130,166,0)
(225,82,0)
(108,150,0)
(28,211,0)
(205,70,0)
(4,182,0)
(217,95,0)
(204,193,0)
(208,118,0)
(13,176,0)
(114,23,0)
(103,30,0)
(131,110,0)
(64,215,0)
(15,153,0)
(28,82,0)
(196,60,0)
(94,7,0)
(116,0,0)
(175,48,0)
(188,186,0)
(7,18,0)
(75,142,0)
(146,194,0)
(197,18,0)
(205,219,0)
(86,137,0)
(0,116,0)
(156,116,0)
(98,190,0)
(28,130,0)
(122,202,0)
(9,19,0)
(28,197,0)
(83,158,0)
(43,182,0)
(103,73,0)
(72,17,0)
(221,122,0)
(227,196,0)
(211,18,0)
(230,57,0)
(9,93,0)
(208,178,0)
(209,95,0)
(58,66,0)
(186,18,0)
(28,184,0)
(27,122,0)
(90,28,0)
(89,95,0)
(20,182,0)
(181,3,0)
(170,180,0)
(139,19,0)
(96,95,0)
(47,210,0)
(56,211,0)
(119,159,0)
(106,144,0)
(62,200,0)
(86,95,0)
(153,157,0)
(142,13,0)
(134,100,0)
(166,18,0)
(3,220,0)
(47,18,0)
(85,95,0)
(124,70,0)
(166,130,0)
(53,52,0)
(28,95,0)
(181,38,0)
(148,165,0)
(198,18,0)
(39,218,0)
(126,18,0)
(157,95,0)
(118,18,0)
(29,215,0)
(65,95,0)
(176,13,0)
(50,166,0)
(165,49,0)
(195,119,0)
(151,116,0)
(116,202,0)
(60,43,0)
(149,180,0)
(68,218,0)
(18,95,0)
(213,159,0)
(48,221,0)
(100,134,0)
(54,201,0)
(144,18,0)
(36,195,0)
(69,62,0)
(134,95,0)
(184,18,0)
(182,95,0)
(179,198,0)
(155,43,0)
(88,84,0)
(118,208,0)
(102,84,0)
(215,18,0)
(143,47,0)
(220,18,0)
(107,126,0)
(198,58,0)
(12,40,0)
(58,198,0)
(1,130,0)
(226,221,0)
(11,227,0)
(141,219,0)
(136,220,0)
(168,154,0)
(52,80,0)
(76,70,0)
(223,103,0)
(156,78,0)
(221,48,0)
(23,185,0)
(149,94,0)
(37,95,0)
(121,220,0)
(81,169,0)
(13,142,0)
(49,200,0)
(144,106,0)
(122,163,0)
(57,96,0)
(210,159,0)
(195,36,0)
(17,126,0)
(142,18,0)
(33,36,0)
(119,195,0)
(38,181,0)
(30,103,0)
(117,43,0)
(192,8,0)
(167,28,0)
(84,137,0)
(92,180,0)
(200,49,0)
(173,190,0)
(78,59,0)
(199,170,0)
(123,153,0)
(206,30,0)
(66,58,0)
(92,106,0)
(162,118,0)
(112,60,0)
(163,122,0)
(66,180,0)
(113,23,0)
(0,133,0)
(190,18,0)
(163,99,0)
(35,36,0)
(193,18,0)
(187,86,0)
(7,94,0)
(135,37,0)
(220,3,0)
(145,200,0)
(100,218,0)
(216,99,0)
(84,88,0)
(78,156,0)
(126,17,0)
(133,0,0)
(200,62,0)
(99,18,0)
(23,19,0)
(160,96,0)
(127,211,0)
(178,95,0)
(173,213,0)
(189,186,0)
(197,217,0)
(63,190,0)
(105,18,0)
(18,8,0)
(94,149,0)
(165,18,0)
(6,105,0)
(101,82,0)
(196,227,0)
(172,144,0)
(218,18,0)
(46,7,0)
(24,205,0)
(87,78,0)
(71,150,0)
(41,57,0)
(17,191,0)
(10,142,0)
(51,165,0)
(140,95,0)
(222,95,0)
(42,144,0)
(31,193,0)
(60,48,0)
(28,153,0)
(48,60,0)
(62,137,0)
(104,30,0)
(74,217,0)
(82,37,0)
(93,9,0)
(154,18,0)
(164,18,0)
(70,205,0)
(43,116,0)
(190,173,0)
(129,83,0)
(161,18,0)
(213,173,0)
(55,95,0)
(14,65,0)
(227,122,0)
(16,139,0)
(185,23,0)
(36,18,0)
(184,169,0)
(109,110,0)
(82,18,0)
(210,181,0)
(211,52,0)
(99,163,0)
(224,117,0)
(139,16,0)
(169,212,0)
(138,197,0)
(28,215,0)
(153,18,0)
(21,166,0)
(70,18,0)
(61,161,0)
(110,18,0)
(79,99,0)
(182,20,1)
(103,30,1)
(183,134,1)
(117,122,1)
(65,88,1)
(60,112,1)
(201,97,1)
(56,49,1)
(207,217,1)
(213,173,1)
(17,72,1)
(148,65,1)
(47,143,1)
(181,38,1)
(199,149,1)
(68,17,1)
(82,18,1)
(70,18,1)
(206,104,1)
(99,216,1)
(223,131,1)
(33,210,1)
(116,0,1)
(28,57,1)
(16,228,1)
(84,137,1)
(167,119,1)
(186,18,1)
(12,215,1)
(28,215,1)
(170,199,1)
(48,175,1)
(21,50,1)
(38,47,1)
(221,226,1)
(134,100,1)
(93,214,1)
(28,184,1)
(189,150,1)
(17,126,1)
(81,184,1)
(109,183,1)
(31,204,1)
(162,9,1)
(187,207,1)
(220,136,1)
(25,193,1)
(78,156,1)
(113,185,1)
(214,23,1)
(54,40,1)
(75,10,1)
(168,120,1)
(196,227,1)
(163,99,1)
(131,110,1)
(107,67,1)
(218,18,1)
(226,196,1)
(71,205,1)
(100,218,1)
(67,150,1)
(157,111,1)
(74,197,1)
(112,196,1)
(2,138,1)
(57,230,1)
(5,183,1)
(111,153,1)
(129,130,1)
(156,182,1)
(224,147,1)
(87,43,1)
(8,192,1)
(142,75,1)
(127,56,1)
(118,18,1)
(0,133,1)
(166,18,1)
(133,34,1)
(218,39,1)
(51,148,1)
(106,144,1)
(3,171,1)
(68,201,1)
(82,225,1)
(121,38,1)
(48,221,1)
(181,3,1)
(150,108,1)
(60,196,1)
(192,164,1)
(28,130,1)
(170,18,1)
(197,2,1)
(215,18,1)
(62,137,1)
(28,167,1)
(96,160,1)
(44,213,1)
(110,128,1)
(149,94,1)
(156,116,1)
(133,18,1)
(101,157,1)
(155,5,1)
(86,187,1)
(42,172,1)
(126,107,1)
(165,18,1)
(76,124,1)
(79,27,1)
(204,83,1)
(99,18,1)
(34,152,1)
(10,37,1)
(221,122,1)
(72,126,1)
(7,18,1)
(84,102,1)
(188,189,1)
(47,18,1)
(66,58,1)
(20,4,1)
(205,70,1)
(118,229,1)
(43,182,1)
(98,161,1)
(109,78,1)
(136,121,1)
(227,122,1)
(217,74,1)
(122,163,1)
(176,13,1)
(200,145,1)
(153,18,1)
(117,224,1)
(120,182,1)
(43,117,1)
(130,1,1)
(190,63,1)
(9,93,1)
(104,132,1)
(97,54,1)
(138,178,1)
(46,115,1)
(105,91,1)
(225,101,1)
(43,60,1)
(161,26,1)
(45,25,1)
(156,32,1)
(18,8,1)
(152,151,1)
(124,201,1)
(142,18,1)
(41,86,1)
(186,188,1)
(90,28,1)
(115,66,1)
(144,42,1)
(77,139,1)
(193,18,1)
(185,77,1)
(154,18,1)
(162,154,1)
(208,118,1)
(227,11,1)
(198,18,1)
(37,135,1)
(135,82,1)
(40,12,1)
(8,137,1)
(36,35,1)
(151,186,1)
(147,155,1)
(110,18,1)
(211,127,1)
(61,105,1)
(130,166,1)
(7,46,1)
(36,18,1)
(4,18,1)
(173,190,1)
(205,24,1)
(184,45,1)
(179,125,1)
(68,122,1)
(114,113,1)
(166,21,1)
(49,200,1)
(204,103,1)
(175,221,1)
(28,47,1)
(52,53,1)
(190,18,1)
(195,36,1)
(154,168,1)
(193,31,1)
(23,18,1)
(14,177,1)
(216,79,1)
(91,6,1)
(198,179,1)
(160,57,1)
(86,137,1)
(27,116,1)
(125,92,1)
(26,61,1)
(139,16,1)
(169,81,1)
(35,33,1)
(30,206,1)
(58,198,1)
(210,181,1)
(28,82,1)
(54,52,1)
(229,162,1)
(184,18,1)
(32,87,1)
(28,153,1)
(64,29,1)
(69,165,1)
(126,18,1)
(53,211,1)
(108,71,1)
(43,116,1)
(68,186,1)
(123,96,1)
(228,154,1)
(167,161,1)
(57,18,1)
(1,166,1)
(161,18,1)
(132,223,1)
(11,117,1)
(70,76,1)
(201,18,1)
(200,62,1)
(94,7,1)
(92,106,1)
(102,14,1)
(153,15,1)
(172,105,1)
(49,165,1)
(143,44,1)
(211,18,1)
(24,70,1)
(167,170,1)
(150,18,1)
(119,195,1)
(88,84,1)
(62,69,1)
(177,176,1)
(178,208,1)
(6,193,1)
(220,18,1)
(60,48,1)
(145,62,1)
(29,49,1)
(171,220,1)
(28,211,1)
(15,123,1)
(23,185,1)
(39,68,1)
(215,64,1)
(50,131,1)
(165,51,1)
(23,114,1)
(197,18,1)
(167,169,1)
(83,129,1)
(105,18,1)
(3,220,1)
(28,197,1)
(144,18,1)
(13,142,1)
(230,41,1)
(30,18,1)
(63,98,1)
(128,109,1)
(42,105,2)
(227,183,2)
(227,122,2)
(63,161,2)
(43,60,2)
(122,163,2)
(28,215,2)
(133,18,2)
(175,196,2)
(83,131,2)
(228,154,2)
(119,195,2)
(178,208,2)
(47,18,2)
(149,94,2)
(184,193,2)
(172,105,2)
(198,18,2)
(161,105,2)
(224,183,2)
(93,154,2)
(208,118,2)
(173,161,2)
(13,142,2)
(205,201,2)
(150,18,2)
(9,93,2)
(43,183,2)
(52,49,2)
(156,116,2)
(30,131,2)
(220,161,2)
(195,36,2)
(98,161,2)
(226,196,2)
(90,28,2)
(133,186,2)
(7,105,2)
(181,38,2)
(213,173,2)
(130,131,2)
(211,49,2)
(126,18,2)
(103,131,2)
(143,161,2)
(99,186,2)
(28,211,2)
(152,186,2)
(117,183,2)
(181,161,2)
(28,197,2)
(156,183,2)
(210,181,2)
(86,137,2)
(195,161,2)
(70,201,2)
(49,200,2)
(153,18,2)
(105,193,2)
(136,161,2)
(151,186,2)
(142,18,2)
(190,161,2)
(12,49,2)
(81,193,2)
(46,105,2)
(116,0,2)
(104,131,2)
(154,18,2)
(106,105,2)
(115,105,2)
(28,47,2)
(210,161,2)
(198,105,2)
(8,137,2)
(119,161,2)
(200,62,2)
(23,18,2)
(218,18,2)
(221,196,2)
(216,186,2)
(99,18,2)
(114,154,2)
(0,133,2)
(62,137,2)
(181,3,2)
(32,183,2)
(139,154,2)
(82,18,2)
(34,186,2)
(61,105,2)
(145,165,2)
(17,150,2)
(60,196,2)
(44,161,2)
(190,18,2)
(29,49,2)
(66,58,2)
(49,165,2)
(188,150,2)
(3,220,2)
(186,150,2)
(127,49,2)
(45,193,2)
(87,183,2)
(48,221,2)
(56,49,2)
(33,161,2)
(23,154,2)
(16,154,2)
(112,196,2)
(94,7,2)
(62,165,2)
(163,186,2)
(60,183,2)
(25,193,2)
(193,18,2)
(170,18,2)
(200,165,2)
(65,88,2)
(50,131,2)
(211,18,2)
(106,144,2)
(60,48,2)
(144,18,2)
(103,30,2)
(121,161,2)
(5,183,2)
(79,186,2)
(43,182,2)
(94,105,2)
(169,193,2)
(144,105,2)
(66,105,2)
(118,18,2)
(220,18,2)
(214,154,2)
(35,161,2)
(166,18,2)
(28,184,2)
(28,82,2)
(91,193,2)
(77,154,2)
(1,131,2)
(147,183,2)
(170,105,2)
(30,18,2)
(27,186,2)
(92,105,2)
(70,18,2)
(117,122,2)
(64,49,2)
(223,131,2)
(108,201,2)
(18,8,2)
(47,161,2)
(176,13,2)
(205,70,2)
(215,49,2)
(58,105,2)
(206,131,2)
(17,126,2)
(173,190,2)
(201,18,2)
(116,186,2)
(215,18,2)
(28,57,2)
(165,18,2)
(71,201,2)
(105,18,2)
(184,18,2)
(221,122,2)
(139,16,2)
(72,150,2)
(125,105,2)
(161,18,2)
(124,201,2)
(7,18,2)
(113,154,2)
(196,183,2)
(23,185,2)
(156,182,2)
(84,137,2)
(78,183,2)
(155,183,2)
(171,161,2)
(3,161,2)
(11,183,2)
(9,154,2)
(199,105,2)
(197,18,2)
(163,99,2)
(28,130,2)
(213,161,2)
(38,161,2)
(36,161,2)
(110,18,2)
(185,154,2)
(26,105,2)
(122,186,2)
(69,165,2)
(166,131,2)
(196,227,2)
(40,49,2)
(100,218,2)
(126,150,2)
(53,49,2)
(88,84,2)
(76,201,2)
(6,193,2)
(134,100,2)
(57,18,2)
(132,131,2)
(179,105,2)
(24,201,2)
(130,166,2)
(58,198,2)
(0,186,2)
(129,131,2)
(36,18,2)
(189,150,2)
(131,110,2)
(92,106,2)
(186,18,2)
(28,153,2)
(21,131,2)
(43,116,2)
(48,196,2)
(78,156,2)
(107,150,2)
(149,105,2)
(43,117,2)
(67,150,2)
(150,201,2)
-----------------------------------
(0,ast_channel_ref(p->chan)
(1,0)
(2,owner)
(3,ast_samp2tv(p->wrapuptime, 1000)
(4,indicate_chan)
(5,indicate_chan)
(6,p)
(7,p->login_wait_cond)
(8,ast_channel_tech_pvt(ast)
(9,AST_LIST_UNLOCK(&agents)
(10,p)
(11,tmp_moh)
(12,0)
(13,&p->app_complete_cond)
(14,"Hangup called for state %s\\n")
(15,acknowledged)
(16,&agents)
(17,ast_softhangup(p->chan, AST_SOFTHANGUP_EXPLICIT)
(18,*p = ast_channel_tech_pvt(ast)
(19,)
(20,NULL)
(21,logincallerid)
(22,indicate_chan)
(23,AST_LIST_REMOVE(&agents, p, list)
(24,NULL)
(25,p)
(26,chan)
(27,tmp_moh)
(28,return 0;)
(29,p)
(30,p->agent)
(31,abouttograb)
(32,indicate_chan)
(33,p)
(34,chan)
(35,lock)
(36,p->lock)
(37,p->app_lock_flag = 0)
(38,ast_tvnow()
(39,lock)
(40,p->start = 0)
(41,p)
(42,lock)
(43,ast_indicate_data(indicate_chan, AST_CONTROL_HOLD,\n\\n\\t\\t\\tS_OR(tmp_moh, NULL)
(44,p)
(45,abouttograb)
(46,login_wait_cond)
(47,p->lastdisc)
(48,strlen(tmp_moh)
(49,p->start && (ast_channel_state(ast)
(50,p)
(51,start)
(52,p->start = 0)
(53,0)
(54,p)
(55,if (p->chan)
(56,p)
(57,p->app_sleep_cond)
(58,&p->app_complete_cond)
(59,)
(60,!ast_strlen_zero(tmp_moh)
(61,p)
(62,ast_channel_state(ast)
(63,lock)
(64,start)
(65,ast_debug(1, "Hangup called for state %s\\n", ast_state2str(ast_channel_state(ast)
(66,ast_cond_destroy(&p->app_complete_cond)
(67,p)
(68,p)
(69,ast)
(70,p->chan)
(71,p)
(72,AST_SOFTHANGUP_EXPLICIT)
(73,)
(74,NULL)
(75,app_complete_cond)
(76,chan)
(77,agents)
(78,indicate_chan = ast_channel_unref(indicate_chan)
(79,p)
(80,)
(81,0)
(82,p->app_lock_flag)
(83,p->logincallerid[0] = \'\\0\')
(84,ast_channel_state(ast)
(85,if (p->start && (ast_channel_state(ast)
(86,ast_channel_tech_pvt_set(ast, NULL)
(87,indicate_chan)
(88,ast_state2str(ast_channel_state(ast)
(89,if (p->pending)
(90,RET)
(91,dead)
(92,ast_mutex_destroy(&p->lock)
(93,&agents)
(94,&p->login_wait_cond)
(95,)
(96,p->app_sleep_cond = 1)
(97,chan)
(98,p)
(99,p->moh)
(100,&p->lock)
(101,p)
(102,ast)
(103,ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Agent/%s", p->agent)
(104,p)
(105,p->dead)
(106,&p->lock)
(107,chan)
(108,dead)
(109,p)
(110,p->loginstart)
(111,0)
(112,0)
(113,p)
(114,list)
(115,p)
(116,indicate_chan = ast_channel_ref(p->chan)
(117,S_OR(tmp_moh, NULL)
(118,p->lock)
(119,ast_mutex_unlock(&p->lock)
(120,p)
(121,p)
(122,tmp_moh = ast_strdupa(p->moh)
(123,p)
(124,p)
(125,p)
(126,p->chan)
(127,start)
(128,loginstart)
(129,\'\\0\')
(130,p->logincallerid[0])
(131,!p->loginstart)
(132,"Agent/%s")
(133,p->chan)
(134,ast_mutex_unlock(&p->lock)
(135,0)
(136,wrapuptime)
(137,struct ast_channel *ast)
(138,p)
(139,AST_LIST_LOCK(&agents)
(140,if (indicate_chan)
(141,if (p->dead)
(142,p->app_complete_cond)
(143,lastdisc)
(144,p->lock)
(145,AST_STATE_UP)
(146,if (p->chan)
(147,tmp_moh)
(148,p)
(149,ast_cond_destroy(&p->login_wait_cond)
(150,p->dead)
(151,indicate_chan)
(152,p)
(153,p->acknowledged)
(154,p->pending)
(155,AST_CONTROL_HOLD)
(156,ast_channel_unref(indicate_chan)
(157,p->acknowledged = 0)
(158,)
(159,)
(160,1)
(161,p->chan)
(162,p)
(163,ast_strdupa(p->moh)
(164,p)
(165,p->start)
(166,p->logincallerid)
(167,0)
(168,pending)
(169,p->abouttograb = 0)
(170,ast_free(p)
(171,1000)
(172,p)
(173,&p->lock)
(174,tmp_moh)
(175,1)
(176,ast_cond_signal(&p->app_complete_cond)
(177,1)
(178,ast_mutex_lock(&p->lock)
(179,app_complete_cond)
(180,)
(181,ast_tvadd(ast_tvnow()
(182,*indicate_chan = NULL)
(183,indicate_chan)
(184,p->abouttograb)
(185,&agents)
(186,p->loginstart)
(187,NULL)
(188,loginstart)
(189,p)
(190,p->lock)
(191,)
(192,ast)
(193,p->abouttograb)
(194,)
(195,&p->lock)
(196,!ast_strlen_zero(tmp_moh)
(197,p->owner)
(198,p->app_complete_cond)
(199,p)
(200,ast_channel_state(ast)
(201,p->chan)
(202,)
(203,if (p->abouttograb)
(204,p)
(205,ast_channel_internal_bridged_channel_set(p->chan, NULL)
(206,agent)
(207,ast)
(208,&p->lock)
(209,if (!p->loginstart)
(210,p->lastdisc = ast_tvadd(ast_tvnow()
(211,p->start)
(212,)
(213,ast_mutex_lock(&p->lock)
(214,agents)
(215,p->start)
(216,moh)
(217,p->owner = NULL)
(218,p->lock)
(219,)
(220,p->wrapuptime)
(221,strlen(tmp_moh)
(222,p)
(223,AST_DEVICE_NOT_INUSE)
(224,NULL)
(225,app_lock_flag)
(226,tmp_moh)
(227,ast_strlen_zero(tmp_moh)
(228,agents)
(229,lock)
(230,app_sleep_cond)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^