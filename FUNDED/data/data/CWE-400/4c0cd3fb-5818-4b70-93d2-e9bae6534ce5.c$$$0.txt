-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
20,21
21,22
22,23
22,24
23,24
26,27
27,28
28,29
28,30
29,30
32,33
32,34
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
-----nextToken-----
2,4,8,10,14,16,19,24,25,30,31,34,39,41,45,46
-----computeFrom-----
12,13
12,14
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(7,16,0)
(20,16,0)
(21,16,0)
(4,0,0)
(17,6,0)
(5,19,0)
(18,1,0)
(20,12,0)
(0,9,0)
(20,0,0)
(16,1,0)
(14,1,0)
(19,12,0)
(8,20,0)
(16,7,0)
(11,1,0)
(6,10,0)
(15,0,0)
(3,7,0)
(20,0,1)
(3,21,1)
(22,16,1)
(0,15,1)
(2,13,1)
(13,0,1)
(19,5,1)
(2,19,1)
(20,16,1)
(5,20,1)
(20,8,1)
(16,7,1)
(13,6,1)
(4,22,1)
(6,17,1)
(8,13,1)
(7,3,1)
(17,22,1)
(15,4,1)
(19,13,2)
(20,0,2)
(17,22,2)
(5,13,2)
(0,22,2)
(4,22,2)
(20,13,2)
(8,13,2)
(15,22,2)
(6,22,2)
(16,7,2)
(20,16,2)
-----------------------------------
(0,count = 20)
(1,)
(2,RET)
(3,1)
(4,count)
(5,"Sleep time possibly too long")
(6,printLine("Benign, fixed string")
(7,-1)
(8,count)
(9,)
(10,)
(11,count)
(12,)
(13,STATIC_CONST_TRUE)
(14,if(STATIC_CONST_TRUE)
(15,20)
(16,count = -1)
(17,"Benign, fixed string")
(18,if(STATIC_CONST_FALSE)
(19,printLine("Sleep time possibly too long")
(20,SLEEP(count)
(21,count)
(22,STATIC_CONST_FALSE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^