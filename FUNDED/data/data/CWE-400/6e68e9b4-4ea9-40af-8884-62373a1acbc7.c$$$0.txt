-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_44_bad()
{
    int count;
    /* define a function pointer */
    void (*funcPtr) (int) = badSink;
    /* Initialize count */
    count = -1;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read count using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
15,16
15,17
18,19
18,20
20,21
22,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
31,37
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
50,51
52,53
53,54
53,55
55,56
55,57
57,58
58,59
60,61
60,62
61,62
61,63
61,64
61,65
61,66
61,67
61,68
61,69
61,70
61,71
61,72
62,63
63,64
63,65
64,65
66,67
66,68
66,69
66,70
67,68
69,70
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
83,84
84,85
84,86
84,87
84,88
85,86
87,88
88,89
91,92
92,93
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
111,112
111,113
112,113
114,115
116,117
117,118
117,119
118,119
118,120
119,120
122,123
122,124
123,124
125,126
127,128
127,129
128,129
128,130
129,130
129,131
129,132
129,133
130,131
132,133
134,135
134,136
135,136
135,137
136,137
138,139
140,141
141,142
143,144
144,145
145,146
147,148
149,150
151,152
152,153
152,154
153,154
155,156
155,157
155,158
155,159
155,160
156,157
158,159
160,161
162,163
162,164
163,164
167,168
167,169
168,169
168,170
169,170
169,171
170,171
172,173
174,175
174,176
175,176
178,179
180,181
181,182
181,183
182,183
182,184
183,184
185,186
188,189
189,190
189,191
190,191
192,193
192,194
193,194
195,196
198,199
198,200
199,200
199,201
200,201
202,203
204,205
205,206
206,207
206,208
207,208
209,210
211,212
212,213
212,214
213,214
215,216
-----nextToken-----
2,4,8,10,13,16,17,19,21,24,28,30,34,36,40,42,46,48,51,54,56,59,65,68,70,72,74,78,80,82,86,89,90,94,99,100,102,108,109,110,113,115,120,121,124,126,131,133,137,139,142,146,148,150,154,157,159,161,164,165,166,171,173,176,177,179,184,186,187,191,194,196,197,201,203,208,210,214,216
-----computeFrom-----
26,27
26,28
63,64
63,65
76,77
76,78
96,97
96,98
104,105
104,106
117,118
117,119
128,129
128,130
152,153
152,154
162,163
162,164
168,169
168,170
169,170
169,171
174,175
174,176
181,182
181,183
189,190
189,191
199,200
199,201
-----guardedBy-----
201,210
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_44_bad(){    int count;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(count);}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_44_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_44_bad
{    int count;    /* define a function pointer */    void (*funcPtr) (int) = badSink;    /* Initialize count */    count = -1;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(count);}
int count;
int count;
int
count
count
void (*funcPtr) (int) = badSink;
void (*funcPtr) (int) = badSink;
void
(*funcPtr) (int) = badSink
*funcPtr
*
funcPtr
int
int


= badSink
badSink
badSink
count = -1;
count = -1
count
count
-1
1
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read count using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to int */            count = atoi(inputBuffer);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
funcPtr(count);
funcPtr(count)
funcPtr
funcPtr
count
count
-----joern-----
(55,61,0)
(57,103,0)
(4,26,0)
(85,37,0)
(6,124,0)
(104,2,0)
(83,111,0)
(31,82,0)
(90,65,0)
(17,80,0)
(9,63,0)
(129,2,0)
(116,33,0)
(106,39,0)
(19,29,0)
(40,21,0)
(108,16,0)
(51,57,0)
(16,97,0)
(124,89,0)
(82,39,0)
(0,71,0)
(41,68,0)
(97,37,0)
(96,39,0)
(123,21,0)
(26,89,0)
(115,97,0)
(78,115,0)
(80,96,0)
(100,21,0)
(11,52,0)
(73,58,0)
(1,36,0)
(77,21,0)
(91,79,0)
(22,3,0)
(38,35,0)
(11,111,0)
(96,36,0)
(97,21,0)
(68,101,0)
(32,123,0)
(37,39,0)
(35,9,0)
(68,21,0)
(102,57,0)
(120,109,0)
(76,130,0)
(45,2,0)
(69,37,0)
(41,103,0)
(18,57,0)
(113,61,0)
(90,21,0)
(72,57,0)
(43,109,0)
(9,35,0)
(131,82,0)
(20,102,0)
(14,115,0)
(126,7,0)
(74,52,0)
(12,9,0)
(61,39,0)
(65,90,0)
(36,96,0)
(56,62,0)
(106,49,0)
(71,39,0)
(48,109,0)
(37,99,0)
(96,80,0)
(2,45,0)
(52,11,0)
(37,97,0)
(47,106,0)
(30,29,0)
(44,84,0)
(114,1,0)
(111,11,0)
(39,21,0)
(99,37,0)
(66,84,0)
(93,103,0)
(92,82,0)
(86,24,0)
(2,97,0)
(63,9,0)
(29,57,0)
(64,81,0)
(70,63,0)
(33,103,0)
(98,101,0)
(81,11,0)
(107,21,0)
(36,1,0)
(28,57,0)
(41,130,0)
(115,24,0)
(45,16,0)
(48,90,0)
(25,125,0)
(42,124,0)
(23,97,0)
(125,96,0)
(11,81,0)
(60,36,0)
(119,65,0)
(109,48,0)
(34,57,0)
(110,99,0)
(105,76,0)
(16,45,0)
(36,60,0)
(95,99,0)
(96,125,0)
(94,79,0)
(10,48,0)
(122,37,0)
(24,21,0)
(79,123,0)
(89,21,0)
(117,103,0)
(15,41,0)
(50,71,0)
(59,57,0)
(13,130,0)
(130,103,0)
(87,27,0)
(71,29,0)
(75,81,0)
(89,26,0)
(118,33,0)
(127,57,0)
(54,57,0)
(53,39,0)
(101,68,0)
(8,68,0)
(130,76,0)
(106,29,0)
(128,96,0)
(39,82,0)
(112,102,0)
(121,57,0)
(88,16,0)
(9,21,0)
(84,21,0)
(24,86,1)
(63,70,1)
(48,109,1)
(122,23,1)
(19,30,1)
(41,68,1)
(22,80,1)
(74,81,1)
(112,130,1)
(67,106,1)
(38,12,1)
(89,26,1)
(11,81,1)
(105,13,1)
(56,45,1)
(13,33,1)
(52,74,1)
(124,42,1)
(96,125,1)
(53,84,1)
(4,124,1)
(120,123,1)
(20,112,1)
(35,38,1)
(129,16,1)
(44,66,1)
(39,82,1)
(70,61,1)
(79,91,1)
(41,130,1)
(14,78,1)
(126,111,1)
(86,115,1)
(9,35,1)
(96,39,1)
(48,10,1)
(23,80,1)
(91,94,1)
(101,98,1)
(113,39,1)
(16,97,1)
(83,11,1)
(76,105,1)
(45,16,1)
(29,19,1)
(87,61,1)
(111,83,1)
(0,22,1)
(66,111,1)
(119,48,1)
(33,118,1)
(12,63,1)
(0,46,1)
(106,39,1)
(75,64,1)
(55,113,1)
(131,53,1)
(115,14,1)
(1,114,1)
(82,31,1)
(80,96,1)
(78,45,1)
(68,101,1)
(0,87,1)
(96,36,1)
(37,99,1)
(31,92,1)
(65,119,1)
(102,20,1)
(71,50,1)
(128,89,1)
(111,11,1)
(109,43,1)
(36,1,1)
(106,47,1)
(30,102,1)
(10,109,1)
(108,88,1)
(16,108,1)
(95,110,1)
(110,69,1)
(94,9,1)
(61,39,1)
(50,0,1)
(37,39,1)
(90,65,1)
(88,97,1)
(97,37,1)
(64,46,1)
(81,75,1)
(46,68,1)
(99,95,1)
(47,71,1)
(67,71,1)
(26,4,1)
(118,116,1)
(15,67,1)
(6,90,1)
(2,104,1)
(125,25,1)
(42,6,1)
(0,56,1)
(106,29,1)
(64,29,1)
(9,63,1)
(123,32,1)
(61,55,1)
(104,129,1)
(85,99,1)
(5,41,1)
(25,36,1)
(17,96,1)
(73,67,1)
(114,128,1)
(36,60,1)
(80,17,1)
(84,44,1)
(32,79,1)
(37,85,1)
(0,126,1)
(71,29,1)
(8,24,1)
(41,15,1)
(15,73,1)
(2,97,1)
(130,76,1)
(69,122,1)
(43,120,1)
(45,2,1)
(11,52,1)
(92,131,1)
(98,8,1)
(71,39,1)
(115,97,1)
(115,45,2)
(115,97,2)
(16,80,2)
(11,52,2)
(97,80,2)
(14,45,2)
(110,80,2)
(82,111,2)
(106,29,2)
(129,16,2)
(52,46,2)
(96,61,2)
(61,111,2)
(75,46,2)
(106,71,2)
(45,80,2)
(71,39,2)
(53,111,2)
(74,46,2)
(109,61,2)
(36,60,2)
(36,1,2)
(46,45,2)
(8,45,2)
(120,61,2)
(37,39,2)
(61,39,2)
(48,61,2)
(73,67,2)
(41,68,2)
(10,61,2)
(16,97,2)
(38,61,2)
(114,61,2)
(45,2,2)
(81,46,2)
(39,111,2)
(37,99,2)
(25,61,2)
(26,61,2)
(91,61,2)
(70,61,2)
(47,71,2)
(101,45,2)
(80,61,2)
(11,81,2)
(23,80,2)
(78,45,2)
(17,61,2)
(39,82,2)
(31,111,2)
(45,16,2)
(12,61,2)
(88,80,2)
(89,26,2)
(68,45,2)
(92,111,2)
(32,61,2)
(94,61,2)
(128,61,2)
(111,11,2)
(43,61,2)
(84,111,2)
(124,61,2)
(119,61,2)
(98,45,2)
(35,61,2)
(55,111,2)
(96,125,2)
(80,96,2)
(83,46,2)
(123,61,2)
(111,46,2)
(37,80,2)
(104,16,2)
(90,61,2)
(9,35,2)
(56,45,2)
(65,61,2)
(64,46,2)
(48,109,2)
(96,39,2)
(113,111,2)
(2,16,2)
(9,63,2)
(99,80,2)
(69,80,2)
(79,61,2)
(41,130,2)
(6,61,2)
(87,61,2)
(22,80,2)
(122,80,2)
(36,61,2)
(125,61,2)
(130,76,2)
(95,80,2)
(106,39,2)
(1,61,2)
(9,61,2)
(42,61,2)
(126,111,2)
(85,80,2)
(89,61,2)
(66,111,2)
(108,80,2)
(4,61,2)
(24,45,2)
(68,101,2)
(97,37,2)
(63,61,2)
(90,65,2)
(86,45,2)
(44,111,2)
(11,46,2)
(2,97,2)
(71,29,2)
(96,36,2)
(131,111,2)
-----------------------------------
(0,connectSocket)
(1,&service)
(2,recvResult == 0)
(3,)
(4,TCP_PORT)
(5,RET)
(6,service)
(7,)
(8,count)
(9,memset(&service, 0, sizeof(service)
(10,s_addr)
(11,WSAStartup(MAKEWORD(2,2)
(12,0)
(13,count)
(14,recvResult)
(15,count)
(16,recvResult == SOCKET_ERROR)
(17,SOCKET_ERROR)
(18,if (wsaDataInit)
(19,INVALID_SOCKET)
(20,0)
(21,)
(22,break;)
(23,recvResult)
(24,inputBuffer[recvResult] = '\\0')
(25,service)
(26,htons(TCP_PORT)
(27,)
(28,inputBuffer)
(29,connectSocket = INVALID_SOCKET)
(30,connectSocket)
(31,IPPROTO_TCP)
(32,AF_INET)
(33,(*funcPtr)
(34,connectSocket)
(35,sizeof(service)
(36,(struct sockaddr*)
(37,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(38,service)
(39,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(40,if (recvResult == SOCKET_ERROR || recvResult == 0)
(41,funcPtr(count)
(42,sin_port)
(43,sin_addr)
(44,1)
(45,recvResult == SOCKET_ERROR || recvResult == 0)
(46,0)
(47,connectSocket)
(48,service.sin_addr.s_addr)
(49,)
(50,INVALID_SOCKET)
(51,do)
(52,&wsaData)
(53,connectSocket)
(54,wsaDataInit)
(55,INVALID_SOCKET)
(56,break;)
(57,)
(58,)
(59,if (connectSocket != INVALID_SOCKET)
(60,struct sockaddr*)
(61,connectSocket == INVALID_SOCKET)
(62,)
(63,&service)
(64,2)
(65,inet_addr(IP_ADDRESS)
(66,wsaDataInit)
(67,wsaDataInit)
(68,count = atoi(inputBuffer)
(69,inputBuffer)
(70,service)
(71,connectSocket != INVALID_SOCKET)
(72,service)
(73,WSACleanup()
(74,wsaData)
(75,2)
(76,-1)
(77,if (connect(connectSocket, (struct sockaddr*)
(78,inputBuffer)
(79,service.sin_family)
(80,connect(connectSocket, (struct sockaddr*)
(81,MAKEWORD(2,2)
(82,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(83,NO_ERROR)
(84,wsaDataInit = 1)
(85,0)
(86,'\\0')
(87,break;)
(88,recvResult)
(89,service.sin_port = htons(TCP_PORT)
(90,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(91,sin_family)
(92,SOCK_STREAM)
(93,funcPtr)
(94,service)
(95,1)
(96,connect(connectSocket, (struct sockaddr*)
(97,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(98,inputBuffer)
(99,CHAR_ARRAY_SIZE - 1)
(100,if (WSAStartup(MAKEWORD(2,2)
(101,atoi(inputBuffer)
(102,wsaDataInit = 0)
(103,)
(104,0)
(105,1)
(106,CLOSE_SOCKET(connectSocket)
(107,if (connectSocket == INVALID_SOCKET)
(108,SOCKET_ERROR)
(109,service.sin_addr)
(110,CHAR_ARRAY_SIZE)
(111,WSAStartup(MAKEWORD(2,2)
(112,wsaDataInit)
(113,connectSocket)
(114,service)
(115,inputBuffer[recvResult])
(116,funcPtr)
(117,count)
(118,badSink)
(119,IP_ADDRESS)
(120,service)
(121,wsaData)
(122,connectSocket)
(123,service.sin_family = AF_INET)
(124,service.sin_port)
(125,sizeof(service)
(126,break;)
(127,recvResult)
(128,connectSocket)
(129,recvResult)
(130,count = -1)
(131,AF_INET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^