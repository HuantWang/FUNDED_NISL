-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalReturnsTrue())
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
40,41
43,44
43,45
44,45
47,48
47,49
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
59,60
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,41,42,45,46,51,53,57,58,63,64
-----computeFrom-----
12,13
12,14
38,39
38,40
39,40
39,41
43,44
43,45
-----guardedBy-----
45,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalReturnsTrue())    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(7,31,0)
(28,12,0)
(11,12,0)
(19,32,0)
(31,7,0)
(6,26,0)
(21,19,0)
(25,10,0)
(3,28,0)
(23,10,0)
(24,31,0)
(2,0,0)
(16,14,0)
(27,12,0)
(9,10,0)
(29,7,0)
(18,7,0)
(31,10,0)
(9,32,0)
(3,10,0)
(28,3,0)
(1,3,0)
(33,23,0)
(7,15,0)
(13,9,0)
(17,3,0)
(30,16,0)
(5,0,0)
(10,23,0)
(12,28,0)
(12,10,0)
(10,0,0)
(20,0,0)
(24,29,1)
(10,23,1)
(1,17,1)
(28,12,1)
(28,3,1)
(16,30,1)
(29,18,1)
(30,28,1)
(9,10,1)
(33,25,1)
(12,10,1)
(27,22,1)
(3,1,1)
(4,10,1)
(8,16,1)
(9,13,1)
(12,11,1)
(23,33,1)
(8,19,1)
(31,10,1)
(13,28,1)
(31,24,1)
(22,7,1)
(21,9,1)
(8,22,1)
(3,10,1)
(17,12,1)
(19,21,1)
(18,4,1)
(11,27,1)
(7,31,1)
(22,4,1)
(7,4,2)
(31,4,2)
(31,10,2)
(27,22,2)
(30,28,2)
(19,28,2)
(28,3,2)
(9,28,2)
(28,12,2)
(12,10,2)
(28,22,2)
(16,28,2)
(13,28,2)
(11,22,2)
(24,4,2)
(3,10,2)
(3,12,2)
(21,28,2)
(1,12,2)
(12,22,2)
(7,31,2)
(9,10,2)
(29,4,2)
(17,12,2)
(18,4,2)
(10,23,2)
-----------------------------------
(0,)
(1,2000)
(2,if(globalReturnsTrue()
(3,count <= 2000)
(4,globalReturnsTrue()
(5,if(globalReturnsTrue()
(6,if (count > 0 && count <= 2000)
(7,fscanf(stdin, "%d", &count)
(8,RET)
(9,SLEEP(count)
(10,count = -1)
(11,0)
(12,count > 0)
(13,count)
(14,)
(15,)
(16,printLine("Sleep time too long")
(17,count)
(18,stdin)
(19,printLine("Sleep time OK")
(20,count)
(21,"Sleep time OK")
(22,globalReturnsTrue()
(23,-1)
(24,count)
(25,count)
(26,)
(27,count)
(28,count > 0 && count <= 2000)
(29,"%d")
(30,"Sleep time too long")
(31,&count)
(32,)
(33,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^