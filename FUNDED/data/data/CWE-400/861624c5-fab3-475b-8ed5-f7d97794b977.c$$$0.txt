-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
69,70
70,71
70,72
71,72
75,76
75,77
77,78
77,79
77,80
77,81
77,82
77,83
78,79
83,84
84,85
84,86
85,86
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,36,39,40,44,46,51,53,57,59,60,64,66,67,68,72,73,74,76,79,80,81,82,86,87,88
-----computeFrom-----
13,14
13,15
24,25
24,26
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__char_malloc_15_bad()
CWE401_Memory_Leak__char_malloc_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(45,3,0)
(0,20,0)
(36,37,0)
(16,11,0)
(17,11,0)
(7,4,0)
(30,11,0)
(3,34,0)
(35,15,0)
(3,45,0)
(27,40,0)
(31,15,0)
(12,37,0)
(28,20,0)
(45,23,0)
(2,11,0)
(26,28,0)
(42,0,0)
(5,15,0)
(20,45,0)
(4,7,0)
(45,20,0)
(13,41,0)
(43,15,0)
(39,11,0)
(19,20,0)
(24,0,0)
(4,18,0)
(6,30,0)
(44,15,0)
(14,34,0)
(22,7,0)
(33,8,0)
(1,37,0)
(21,40,0)
(28,11,0)
(8,34,0)
(34,8,0)
(25,41,0)
(23,45,0)
(41,20,0)
(38,11,0)
(32,43,0)
(41,11,0)
(34,3,0)
(40,37,0)
(20,11,0)
(42,20,1)
(45,23,1)
(9,38,1)
(41,20,1)
(3,34,1)
(19,10,1)
(39,28,1)
(6,10,1)
(5,9,1)
(28,26,1)
(0,24,1)
(41,25,1)
(13,0,1)
(38,30,1)
(43,32,1)
(33,14,1)
(29,5,1)
(44,43,1)
(13,4,1)
(14,19,1)
(21,27,1)
(20,45,1)
(28,20,1)
(4,7,1)
(0,20,1)
(45,3,1)
(40,21,1)
(25,13,1)
(26,41,1)
(32,9,1)
(9,39,1)
(10,40,1)
(24,42,1)
(8,33,1)
(34,8,1)
(22,0,1)
(29,44,1)
(7,22,1)
(30,6,1)
(42,10,2)
(5,9,2)
(19,10,2)
(6,10,2)
(3,10,2)
(44,9,2)
(24,10,2)
(41,10,2)
(34,8,2)
(39,10,2)
(3,34,2)
(8,10,2)
(0,10,2)
(13,10,2)
(22,0,2)
(20,10,2)
(38,10,2)
(45,3,2)
(33,10,2)
(41,20,2)
(25,10,2)
(4,7,2)
(28,10,2)
(32,9,2)
(43,9,2)
(30,10,2)
(45,23,2)
(14,10,2)
(20,45,2)
(34,10,2)
(28,20,2)
(7,0,2)
(0,20,2)
(45,10,2)
(26,10,2)
(4,0,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,case 6:)
(3,malloc(100*sizeof(char)
(4,exit(-1)
(5,break;)
(6,"Benign, fixed string")
(7,-1)
(8,sizeof(char)
(9,7)
(10,6)
(11,)
(12,switch(7)
(13,data)
(14,100)
(15,)
(16,default:)
(17,if (data == NULL)
(18,)
(19,data)
(20,data = (char *)
(21,NULL)
(22,1)
(23,char *)
(24,NULL)
(25,"A String")
(26,data)
(27,data)
(28,printLine(data)
(29,RET)
(30,printLine("Benign, fixed string")
(31,case 7:)
(32,"Benign, fixed string")
(33,char)
(34,100*sizeof(char)
(35,default:)
(36,switch(6)
(37,)
(38,break;)
(39,break;)
(40,data = NULL)
(41,strcpy(data, "A String")
(42,data)
(43,printLine("Benign, fixed string")
(44,break;)
(45,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^