-----label-----
0
-----code-----
static int driver_name_activated(Activation *activation, Peer *receiver) {
        SocketBuffer *skb, *skb_safe;
        ActivationRequest *request, *request_safe;
        int r;

        if (!activation)
                return 0;

        /* in case the name is dropped again in the future, we should request it again */
        activation->requested = false;

        c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link) {
                Peer *sender;

                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);
                if (sender) {
                        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;

                        c_dvar_begin_write(&var, driver_type_out_u, 1);
                        c_dvar_write(&var, "(");
                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);
                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);

                        r = driver_send_reply(sender, &var, NULL);
                        if (r)
                                return error_trace(r);
                }

                activation_request_free(request);
        }

        c_list_for_each_entry_safe(skb, skb_safe, &activation->socket_buffers, link) {
                Message *message = skb->message;
                Peer *sender;

                sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id);

                r = peer_queue_call(receiver, sender, message);
                if (r) {
                        if (r == PEER_E_QUOTA)
                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));
                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)
                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));
                        else
                                return error_fold(r);
                }

                socket_buffer_free(skb);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
18,19
19,20
19,21
19,22
20,21
22,23
22,24
25,26
25,27
28,29
29,30
29,31
29,32
30,31
32,33
32,34
35,36
35,37
38,39
39,40
39,41
41,42
43,44
43,45
44,45
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
57,60
57,61
57,62
58,59
60,61
62,63
64,65
65,66
65,67
66,67
69,70
71,72
72,73
72,74
72,75
72,76
73,74
74,75
74,76
75,76
77,78
77,79
80,81
81,82
81,83
82,83
84,85
84,86
84,87
85,86
87,88
88,89
88,90
89,90
89,91
90,91
94,95
94,96
95,96
98,99
98,100
99,100
101,102
101,103
101,104
101,105
101,106
101,107
101,108
101,109
101,110
102,103
103,104
103,105
104,105
106,107
107,108
109,110
110,111
111,112
111,113
112,113
114,115
114,116
116,117
117,118
119,120
120,121
120,122
120,123
120,124
121,122
123,124
124,125
126,127
129,130
130,131
130,132
130,133
131,132
133,134
134,135
137,138
138,139
138,140
138,141
138,142
138,143
139,140
141,142
142,143
144,145
146,147
146,148
147,148
150,151
152,153
153,154
153,155
153,156
153,157
154,155
156,157
157,158
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
172,173
174,175
176,177
176,178
177,178
179,180
180,181
180,182
181,182
183,184
185,186
186,187
186,188
187,188
189,190
191,192
192,193
192,194
192,195
192,196
192,197
193,194
195,196
197,198
199,200
200,201
200,202
201,202
204,205
206,207
207,208
207,209
207,210
207,211
207,212
207,213
208,209
209,210
209,211
210,211
212,213
212,214
212,215
215,216
216,217
216,218
217,218
220,221
221,222
221,223
222,223
224,225
224,226
227,228
228,229
228,230
229,230
231,232
231,233
231,234
232,233
234,235
235,236
235,237
236,237
236,238
237,238
241,242
241,243
242,243
245,246
246,247
246,248
247,248
249,250
249,251
249,252
249,253
250,251
252,253
254,255
256,257
258,259
258,260
259,260
261,262
262,263
262,264
262,265
263,264
263,265
264,265
266,267
268,269
269,270
269,271
270,271
272,273
272,274
272,275
272,276
272,277
273,274
275,276
277,278
277,279
278,279
280,281
283,284
283,285
284,285
286,287
288,289
288,290
288,291
289,290
289,291
290,291
292,293
294,295
295,296
295,297
296,297
298,299
298,300
298,301
298,302
298,303
299,300
301,302
303,304
303,305
304,305
306,307
309,310
309,311
310,311
312,313
314,315
315,316
315,317
316,317
318,319
320,321
321,322
321,323
322,323
324,325
326,327
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,26,27,31,33,34,36,37,40,42,46,48,53,54,55,59,61,63,67,68,70,76,78,79,83,86,91,92,93,96,97,100,105,108,113,115,118,122,125,127,128,132,135,136,140,143,145,148,149,151,155,158,159,161,165,168,170,173,175,178,182,184,188,190,194,196,198,202,203,205,211,213,214,218,219,223,225,226,230,233,238,239,240,243,244,248,251,253,255,257,260,265,267,271,274,276,279,281,282,285,287,291,293,297,300,302,305,307,308,311,313,317,319,323,325,327
-----computeFrom-----
50,51
50,52
81,82
81,83
163,164
163,165
228,229
228,230
246,247
246,248
263,264
263,265
269,270
269,271
289,290
289,291
295,296
295,297
-----guardedBy-----
265,287
291,313
-----guardedByNegation-----
265,319
291,319
-----lastLexicalUse-----
265,319
291,319
-----jump-----
265,319
291,319
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_name_activated(Activation *activation, Peer *receiver) {        SocketBuffer *skb, *skb_safe;        ActivationRequest *request, *request_safe;        int r;        if (!activation)                return 0;        /* in case the name is dropped again in the future, we should request it again */        activation->requested = false;        c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link) {                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);                if (sender) {                        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, NULL);                        if (r)                                return error_trace(r);                }                activation_request_free(request);        }        c_list_for_each_entry_safe(skb, skb_safe, &activation->socket_buffers, link) {                Message *message = skb->message;                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id);                r = peer_queue_call(receiver, sender, message);                if (r) {                        if (r == PEER_E_QUOTA)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);                }                socket_buffer_free(skb);        }        return 0;}
static int
driver_name_activated(Activation *activation, Peer *receiver)
driver_name_activated
Activation *activation
Activation
Activation
*activation
*
activation
Peer *receiver
Peer
Peer
*receiver
*
receiver
{        SocketBuffer *skb, *skb_safe;        ActivationRequest *request, *request_safe;        int r;        if (!activation)                return 0;        /* in case the name is dropped again in the future, we should request it again */        activation->requested = false;        c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link) {                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);                if (sender) {                        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, NULL);                        if (r)                                return error_trace(r);                }                activation_request_free(request);        }        c_list_for_each_entry_safe(skb, skb_safe, &activation->socket_buffers, link) {                Message *message = skb->message;                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id);                r = peer_queue_call(receiver, sender, message);                if (r) {                        if (r == PEER_E_QUOTA)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);                }                socket_buffer_free(skb);        }        return 0;}
SocketBuffer *skb, *skb_safe;
SocketBuffer *skb, *skb_safe;
SocketBuffer
SocketBuffer
*skb
*
skb
*skb_safe
*
skb_safe
ActivationRequest *request, *request_safe;
ActivationRequest *request, *request_safe;
ActivationRequest
ActivationRequest
*request
*
request
*request_safe
*
request_safe
int r;
int r;
int
r
r
if (!activation)                return 0;
!activation
activation
activation
return 0;
0
activation->requested = false;
activation->requested = false
activation->requested
activation
activation
requested
false
c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link)
c_list_for_each_entry_safe(request, request_safe, &activation->activation_requests, link)
c_list_for_each_entry_safe
c_list_for_each_entry_safe
request
request
request_safe
request_safe
&activation->activation_requests
activation->activation_requests
activation
activation
activation_requests
link
link
)
{                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);                if (sender) {                        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, NULL);                        if (r)                                return error_trace(r);                }                activation_request_free(request);        }
Peer *sender;
Peer *sender;
Peer
Peer
*sender
*
sender
sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id);
sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
sender
sender
peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
peer_registry_find_peer
peer_registry_find_peer
&receiver->bus->peers
receiver->bus->peers
receiver->bus
receiver
receiver
bus
peers
request->sender_id
request
request
sender_id
if (sender) {                        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, NULL);                        if (r)                                return error_trace(r);                }
sender
sender
{                        _c_cleanup_(c_dvar_deinitp) CDVar var = C_DVAR_INIT;                        c_dvar_begin_write(&var, driver_type_out_u, 1);                        c_dvar_write(&var, "(");                        driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);                        c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);                        r = driver_send_reply(sender, &var, NULL);                        if (r)                                return error_trace(r);                }
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_(c_dvar_deinitp)
_c_cleanup_
_c_cleanup_
(c_dvar_deinitp)
c_dvar_deinitp
c_dvar_deinitp
)
CDVar var = C_DVAR_INIT;
CDVar var = C_DVAR_INIT;
CDVar
CDVar
var = C_DVAR_INIT
var
= C_DVAR_INIT
C_DVAR_INIT
C_DVAR_INIT
c_dvar_begin_write(&var, driver_type_out_u, 1);
c_dvar_begin_write(&var, driver_type_out_u, 1)
c_dvar_begin_write
c_dvar_begin_write
&var
var
var
driver_type_out_u
driver_type_out_u
1
c_dvar_write(&var, "(");
c_dvar_write(&var, "(")
c_dvar_write
c_dvar_write
&var
var
var
"("
driver_write_reply_header(&var, sender, request->serial, driver_type_out_u);
driver_write_reply_header(&var, sender, request->serial, driver_type_out_u)
driver_write_reply_header
driver_write_reply_header
&var
var
var
sender
sender
request->serial
request
request
serial
driver_type_out_u
driver_type_out_u
c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS);
c_dvar_write(&var, "(u)", DBUS_START_REPLY_SUCCESS)
c_dvar_write
c_dvar_write
&var
var
var
"(u)"
DBUS_START_REPLY_SUCCESS
DBUS_START_REPLY_SUCCESS
r = driver_send_reply(sender, &var, NULL);
r = driver_send_reply(sender, &var, NULL)
r
r
driver_send_reply(sender, &var, NULL)
driver_send_reply
driver_send_reply
sender
sender
&var
var
var
NULL
NULL
if (r)                                return error_trace(r);
r
r
return error_trace(r);
error_trace(r)
error_trace
error_trace
r
r
activation_request_free(request);
activation_request_free(request)
activation_request_free
activation_request_free
request
request
c_list_for_each_entry_safe(skb, skb_safe, &activation->socket_buffers, link)
c_list_for_each_entry_safe(skb, skb_safe, &activation->socket_buffers, link)
c_list_for_each_entry_safe
c_list_for_each_entry_safe
skb
skb
skb_safe
skb_safe
&activation->socket_buffers
activation->socket_buffers
activation
activation
socket_buffers
link
link
)
{                Message *message = skb->message;                Peer *sender;                sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id);                r = peer_queue_call(receiver, sender, message);                if (r) {                        if (r == PEER_E_QUOTA)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);                }                socket_buffer_free(skb);        }
Message *message = skb->message;
Message *message = skb->message;
Message
Message
*message = skb->message
*
message
= skb->message
skb->message
skb
skb
message
Peer *sender;
Peer *sender;
Peer
Peer
*sender
*
sender
sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id);
sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id)
sender
sender
peer_registry_find_peer(&receiver->bus->peers, message->sender_id)
peer_registry_find_peer
peer_registry_find_peer
&receiver->bus->peers
receiver->bus->peers
receiver->bus
receiver
receiver
bus
peers
message->sender_id
message
message
sender_id
r = peer_queue_call(receiver, sender, message);
r = peer_queue_call(receiver, sender, message)
r
r
peer_queue_call(receiver, sender, message)
peer_queue_call
peer_queue_call
receiver
receiver
sender
sender
message
message
if (r) {                        if (r == PEER_E_QUOTA)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);                }
r
r
{                        if (r == PEER_E_QUOTA)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);                }
if (r == PEER_E_QUOTA)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));                        else if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);
r == PEER_E_QUOTA
r
r
PEER_E_QUOTA
PEER_E_QUOTA
r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r));
r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r))
r
r
driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.LimitsExceeded", driver_error_to_string(r))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.LimitsExceeded"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
if (r == PEER_E_EXPECTED_REPLY_EXISTS)                                r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));                        else                                return error_fold(r);
r == PEER_E_EXPECTED_REPLY_EXISTS
r
r
PEER_E_EXPECTED_REPLY_EXISTS
PEER_E_EXPECTED_REPLY_EXISTS
r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r));
r = driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r))
r
r
driver_send_error(sender, message_read_serial(message), "org.freedesktop.DBus.Error.AccessDenied", driver_error_to_string(r))
driver_send_error
driver_send_error
sender
sender
message_read_serial(message)
message_read_serial
message_read_serial
message
message
"org.freedesktop.DBus.Error.AccessDenied"
driver_error_to_string(r)
driver_error_to_string
driver_error_to_string
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
socket_buffer_free(skb);
socket_buffer_free(skb)
socket_buffer_free
socket_buffer_free
skb
skb
return 0;
0
-----joern-----
(2,22,0)
(98,47,0)
(116,30,0)
(89,2,0)
(22,32,0)
(102,113,0)
(47,134,0)
(9,93,0)
(19,135,0)
(77,75,0)
(18,38,0)
(73,90,0)
(125,99,0)
(72,59,0)
(96,90,0)
(8,7,0)
(42,50,0)
(23,92,0)
(71,133,0)
(60,72,0)
(103,135,0)
(118,17,0)
(25,104,0)
(132,98,0)
(40,77,0)
(117,131,0)
(79,14,0)
(6,14,0)
(67,2,0)
(134,92,0)
(58,13,0)
(31,134,0)
(119,77,0)
(102,22,0)
(99,30,0)
(68,102,0)
(12,39,0)
(54,33,0)
(133,65,0)
(124,102,0)
(102,128,0)
(55,43,0)
(16,92,0)
(94,112,0)
(33,88,0)
(49,13,0)
(130,92,0)
(90,65,0)
(121,77,0)
(47,13,0)
(36,112,0)
(133,33,0)
(84,32,0)
(28,50,0)
(45,2,0)
(27,136,0)
(126,28,0)
(13,58,0)
(52,101,0)
(64,106,0)
(66,32,0)
(135,92,0)
(63,98,0)
(72,47,0)
(135,77,0)
(81,22,0)
(100,79,0)
(85,123,0)
(34,65,0)
(81,127,0)
(98,93,0)
(24,32,0)
(128,102,0)
(3,92,0)
(35,113,0)
(1,33,0)
(128,84,0)
(30,14,0)
(29,32,0)
(2,65,0)
(7,17,0)
(59,72,0)
(101,117,0)
(88,33,0)
(56,77,0)
(74,92,0)
(105,44,0)
(5,128,0)
(76,92,0)
(0,62,0)
(17,14,0)
(20,65,0)
(28,131,0)
(41,58,0)
(112,94,0)
(108,117,0)
(120,79,0)
(99,17,0)
(111,28,0)
(69,15,0)
(79,7,0)
(70,118,0)
(39,121,0)
(136,32,0)
(82,20,0)
(102,106,0)
(50,127,0)
(127,50,0)
(106,102,0)
(103,40,0)
(86,17,0)
(39,84,0)
(4,31,0)
(94,17,0)
(30,99,0)
(117,101,0)
(88,84,0)
(13,49,0)
(127,81,0)
(33,133,0)
(57,15,0)
(118,72,0)
(7,79,0)
(98,14,0)
(101,49,0)
(2,131,0)
(62,40,0)
(48,54,0)
(65,20,0)
(91,20,0)
(65,32,0)
(84,2,0)
(109,17,0)
(50,28,0)
(80,88,0)
(33,54,0)
(22,81,0)
(93,17,0)
(97,94,0)
(103,121,0)
(87,104,0)
(49,101,0)
(95,43,0)
(110,130,0)
(129,22,0)
(51,134,0)
(122,14,0)
(104,84,0)
(62,59,0)
(32,92,0)
(93,98,0)
(10,117,0)
(98,43,0)
(113,65,0)
(103,123,0)
(77,130,0)
(26,72,0)
(15,84,0)
(37,33,0)
(2,84,0)
(33,22,0)
(43,98,0)
(11,59,0)
(78,47,0)
(72,118,0)
(115,58,0)
(13,47,0)
(90,81,0)
(112,14,0)
(114,134,0)
(53,84,0)
(21,112,0)
(59,14,0)
(83,92,0)
(81,90,0)
(113,102,0)
(38,75,0)
(4,46,1)
(30,99,1)
(19,136,1)
(40,62,1)
(60,118,1)
(135,19,1)
(119,56,1)
(36,21,1)
(98,93,1)
(94,97,1)
(98,47,1)
(50,28,1)
(27,54,1)
(65,20,1)
(99,125,1)
(62,0,1)
(128,5,1)
(84,2,1)
(117,131,1)
(102,22,1)
(116,99,1)
(30,116,1)
(27,106,1)
(128,84,1)
(129,65,1)
(87,25,1)
(110,77,1)
(106,102,1)
(7,17,1)
(89,53,1)
(79,7,1)
(132,43,1)
(107,59,1)
(113,35,1)
(108,10,1)
(49,101,1)
(126,129,1)
(103,123,1)
(97,98,1)
(28,131,1)
(95,63,1)
(9,30,1)
(100,120,1)
(50,42,1)
(27,61,1)
(101,52,1)
(91,34,1)
(93,9,1)
(10,78,1)
(55,95,1)
(73,96,1)
(99,17,1)
(120,7,1)
(71,37,1)
(43,55,1)
(22,81,1)
(2,65,1)
(115,49,1)
(2,22,1)
(123,85,1)
(72,60,1)
(93,17,1)
(11,112,1)
(85,38,1)
(125,79,1)
(1,133,1)
(136,27,1)
(20,82,1)
(37,48,1)
(88,84,1)
(26,11,1)
(72,47,1)
(57,69,1)
(90,73,1)
(53,22,1)
(52,117,1)
(112,36,1)
(88,80,1)
(102,113,1)
(48,104,1)
(17,86,1)
(4,107,1)
(117,108,1)
(127,50,1)
(0,107,1)
(103,121,1)
(56,38,1)
(77,75,1)
(38,75,1)
(72,118,1)
(118,17,1)
(124,64,1)
(25,61,1)
(35,124,1)
(47,13,1)
(45,89,1)
(70,26,1)
(103,40,1)
(13,49,1)
(98,132,1)
(130,110,1)
(94,17,1)
(81,127,1)
(12,15,1)
(96,127,1)
(21,94,1)
(121,77,1)
(38,18,1)
(90,65,1)
(46,47,1)
(62,59,1)
(67,45,1)
(133,65,1)
(13,58,1)
(101,117,1)
(34,31,1)
(8,17,1)
(15,84,1)
(69,104,1)
(58,41,1)
(79,100,1)
(2,67,1)
(64,15,1)
(104,84,1)
(31,4,1)
(77,119,1)
(78,130,1)
(33,133,1)
(41,115,1)
(2,131,1)
(39,12,1)
(112,94,1)
(80,1,1)
(102,128,1)
(133,71,1)
(113,65,1)
(7,8,1)
(59,72,1)
(39,84,1)
(42,28,1)
(33,88,1)
(121,39,1)
(33,22,1)
(5,68,1)
(15,57,1)
(54,33,1)
(118,70,1)
(109,46,1)
(81,90,1)
(135,77,1)
(63,93,1)
(111,126,1)
(104,87,1)
(40,77,1)
(61,84,1)
(68,113,1)
(28,111,1)
(103,135,1)
(98,43,1)
(86,109,1)
(82,91,1)
(121,77,2)
(59,72,2)
(86,46,2)
(89,107,2)
(63,46,2)
(115,38,2)
(70,46,2)
(113,65,2)
(93,46,2)
(12,15,2)
(2,65,2)
(31,107,2)
(77,75,2)
(57,104,2)
(48,104,2)
(71,104,2)
(93,17,2)
(10,38,2)
(2,131,2)
(43,46,2)
(72,47,2)
(41,38,2)
(50,107,2)
(54,104,2)
(82,46,2)
(39,84,2)
(133,65,2)
(61,107,2)
(88,84,2)
(64,15,2)
(0,107,2)
(80,104,2)
(20,46,2)
(84,107,2)
(19,104,2)
(101,117,2)
(112,94,2)
(91,107,2)
(19,61,2)
(28,131,2)
(34,46,2)
(84,2,2)
(45,46,2)
(109,46,2)
(55,46,2)
(120,46,2)
(13,38,2)
(50,28,2)
(65,107,2)
(72,118,2)
(25,61,2)
(26,46,2)
(36,46,2)
(19,15,2)
(27,15,2)
(11,46,2)
(132,46,2)
(50,46,2)
(4,46,2)
(103,123,2)
(102,113,2)
(128,84,2)
(127,50,2)
(90,65,2)
(112,46,2)
(22,81,2)
(91,46,2)
(127,46,2)
(81,46,2)
(111,46,2)
(119,38,2)
(118,17,2)
(5,15,2)
(81,107,2)
(73,107,2)
(87,61,2)
(118,46,2)
(136,104,2)
(135,61,2)
(21,46,2)
(125,46,2)
(116,46,2)
(85,38,2)
(22,46,2)
(77,38,2)
(8,46,2)
(82,107,2)
(47,13,2)
(28,46,2)
(107,46,2)
(106,15,2)
(31,46,2)
(42,107,2)
(96,107,2)
(37,104,2)
(106,102,2)
(15,84,2)
(102,22,2)
(22,107,2)
(79,7,2)
(90,107,2)
(62,59,2)
(46,38,2)
(97,46,2)
(7,46,2)
(17,46,2)
(98,47,2)
(124,15,2)
(35,15,2)
(27,104,2)
(60,46,2)
(38,75,2)
(102,15,2)
(130,38,2)
(42,46,2)
(68,15,2)
(33,22,2)
(126,107,2)
(90,46,2)
(4,107,2)
(98,43,2)
(110,38,2)
(127,107,2)
(33,88,2)
(47,38,2)
(2,22,2)
(128,15,2)
(61,46,2)
(72,46,2)
(78,38,2)
(81,127,2)
(99,17,2)
(104,61,2)
(88,104,2)
(40,77,2)
(133,104,2)
(33,104,2)
(111,107,2)
(136,15,2)
(45,107,2)
(62,107,2)
(9,46,2)
(102,128,2)
(53,107,2)
(34,107,2)
(96,46,2)
(49,101,2)
(30,46,2)
(101,38,2)
(59,46,2)
(135,15,2)
(2,107,2)
(30,99,2)
(89,46,2)
(117,38,2)
(53,46,2)
(94,46,2)
(104,84,2)
(49,38,2)
(103,40,2)
(108,38,2)
(99,46,2)
(69,104,2)
(117,131,2)
(65,20,2)
(129,46,2)
(58,38,2)
(79,46,2)
(135,77,2)
(13,49,2)
(126,46,2)
(54,33,2)
(103,121,2)
(13,58,2)
(103,135,2)
(2,46,2)
(81,90,2)
(136,61,2)
(98,93,2)
(123,38,2)
(39,15,2)
(33,133,2)
(56,38,2)
(52,38,2)
(67,46,2)
(113,15,2)
(15,104,2)
(84,46,2)
(100,46,2)
(73,46,2)
(98,46,2)
(121,15,2)
(95,46,2)
(65,46,2)
(67,107,2)
(7,17,2)
(135,104,2)
(94,17,2)
(27,61,2)
(40,107,2)
(129,107,2)
(28,107,2)
(1,104,2)
(20,107,2)
-----------------------------------
(0,r)
(1,"org.freedesktop.DBus.Error.LimitsExceeded")
(2,peer_queue_call(receiver, sender, message)
(3,skb_safe)
(4,request)
(5,r)
(6,var)
(7,&var)
(8,var)
(9,var)
(10,receiver)
(11,r)
(12,r)
(13,peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
(14,)
(15,r == PEER_E_EXPECTED_REPLY_EXISTS)
(16,if (!activation)
(17,var = C_DVAR_INIT)
(18,activation)
(19,0)
(20,skb->message)
(21,"(u)
(22,sender = peer_registry_find_peer(&receiver->bus->peers, message->sender_id)
(23,request_safe)
(24,sender)
(25,r)
(26,sender)
(27,skb)
(28,receiver->bus)
(29,message)
(30,c_dvar_write(&var, "(")
(31,activation_request_free(request)
(32,)
(33,driver_send_error(sender, message_read_serial(message)
(34,message)
(35,message)
(36,DBUS_START_REPLY_SUCCESS)
(37,sender)
(38,!activation)
(39,error_fold(r)
(40,return error_trace(r)
(41,sender_id)
(42,peers)
(43,request->serial)
(44,)
(45,sender)
(46,sender)
(47,sender = peer_registry_find_peer(&receiver->bus->peers, request->sender_id)
(48,r)
(49,&receiver->bus->peers)
(50,receiver->bus->peers)
(51,sender)
(52,peers)
(53,r)
(54,r = driver_send_error(sender, message_read_serial(message)
(55,serial)
(56,activation)
(57,PEER_E_EXPECTED_REPLY_EXISTS)
(58,request->sender_id)
(59,r = driver_send_reply(sender, &var, NULL)
(60,NULL)
(61,r)
(62,error_trace(r)
(63,sender)
(64,r)
(65,*message = skb->message)
(66,if (r)
(67,message)
(68,"org.freedesktop.DBus.Error.AccessDenied")
(69,r)
(70,var)
(71,message)
(72,driver_send_reply(sender, &var, NULL)
(73,sender_id)
(74,r)
(75,Activation *activation)
(76,skb)
(77,activation->requested)
(78,sender)
(79,c_dvar_begin_write(&var, driver_type_out_u, 1)
(80,r)
(81,peer_registry_find_peer(&receiver->bus->peers, message->sender_id)
(82,message)
(83,request)
(84,r = peer_queue_call(receiver, sender, message)
(85,0)
(86,C_DVAR_INIT)
(87,PEER_E_QUOTA)
(88,driver_error_to_string(r)
(89,receiver)
(90,message->sender_id)
(91,skb)
(92,)
(93,&var)
(94,&var)
(95,request)
(96,message)
(97,var)
(98,driver_write_reply_header(&var, sender, request->serial, driver_type_out_u)
(99,&var)
(100,1)
(101,receiver->bus->peers)
(102,driver_send_error(sender, message_read_serial(message)
(103,RET)
(104,r == PEER_E_QUOTA)
(105,if (r == PEER_E_QUOTA)
(106,r = driver_send_error(sender, message_read_serial(message)
(107,r)
(108,bus)
(109,var)
(110,false)
(111,bus)
(112,c_dvar_write(&var, "(u)
(113,message_read_serial(message)
(114,if (sender)
(115,request)
(116,"(")
(117,receiver->bus)
(118,&var)
(119,requested)
(120,driver_type_out_u)
(121,return error_fold(r)
(122,if (r)
(123,return 0;)
(124,sender)
(125,var)
(126,receiver)
(127,&receiver->bus->peers)
(128,driver_error_to_string(r)
(129,sender)
(130,activation->requested = false)
(131,Peer *receiver)
(132,driver_type_out_u)
(133,message_read_serial(message)
(134,)
(135,return 0;)
(136,socket_buffer_free(skb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^