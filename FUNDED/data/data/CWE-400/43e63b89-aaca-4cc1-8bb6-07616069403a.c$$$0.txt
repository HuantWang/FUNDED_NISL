-----label-----
0
-----code-----
static void good2()
{
    if(globalReturnsTrue())
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
8,9
10,11
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
54,55
54,56
55,56
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
84,85
85,86
85,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
94,97
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
103,105
104,105
108,109
109,110
109,111
110,111
112,113
112,114
113,114
116,117
117,118
117,119
118,119
120,121
-----nextToken-----
2,4,9,14,16,17,21,23,26,28,31,32,36,38,43,45,48,50,51,56,57,58,62,65,66,70,73,75,78,80,83,86,87,91,93,98,100,105,106,107,111,114,115,119,121
-----computeFrom-----
27,28
27,29
34,35
34,36
53,54
53,55
68,69
68,70
81,82
81,83
89,90
89,91
96,97
96,98
102,103
102,104
-----guardedBy-----
91,100
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(globalReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(globalReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(globalReturnsTrue())    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(1,60,0)
(46,43,0)
(49,18,0)
(29,9,0)
(55,41,0)
(8,49,0)
(6,0,0)
(27,0,0)
(35,60,0)
(54,44,0)
(28,47,0)
(15,59,0)
(42,14,0)
(1,4,0)
(36,0,0)
(59,15,0)
(52,18,0)
(49,0,0)
(21,1,0)
(3,32,0)
(9,0,0)
(19,6,0)
(51,6,0)
(30,19,0)
(6,19,0)
(36,32,0)
(57,1,0)
(19,33,0)
(9,15,0)
(20,59,0)
(2,52,0)
(52,2,0)
(12,52,0)
(6,51,0)
(32,40,0)
(43,45,0)
(62,52,0)
(16,32,0)
(14,55,0)
(38,14,0)
(26,46,0)
(52,0,0)
(55,33,0)
(9,29,0)
(37,36,0)
(1,18,0)
(13,47,0)
(1,55,0)
(31,10,0)
(4,1,0)
(58,32,0)
(36,55,0)
(51,5,0)
(4,41,0)
(33,32,0)
(18,32,0)
(24,32,0)
(47,0,0)
(60,41,0)
(15,9,0)
(56,33,0)
(59,20,0)
(25,5,0)
(14,60,0)
(5,51,0)
(19,30,0)
(33,19,0)
(48,59,0)
(43,46,0)
(0,9,0)
(39,20,0)
(61,18,0)
(34,49,0)
(0,32,0)
(7,44,0)
(44,33,0)
(17,55,0)
(11,6,0)
(50,55,0)
(23,51,0)
(2,32,0)
(57,60,1)
(61,49,1)
(43,46,1)
(19,30,1)
(1,21,1)
(1,18,1)
(37,4,1)
(50,44,1)
(53,36,1)
(9,29,1)
(35,14,1)
(6,51,1)
(34,47,1)
(9,15,1)
(49,0,1)
(2,52,1)
(36,0,1)
(55,33,1)
(8,34,1)
(15,59,1)
(51,5,1)
(19,6,1)
(28,0,1)
(34,43,1)
(20,39,1)
(53,22,1)
(25,23,1)
(54,33,1)
(52,62,1)
(0,9,1)
(14,42,1)
(27,22,1)
(62,12,1)
(11,56,1)
(55,17,1)
(23,11,1)
(21,57,1)
(14,55,1)
(12,18,1)
(18,61,1)
(36,55,1)
(1,55,1)
(7,54,1)
(42,38,1)
(1,60,1)
(48,27,1)
(59,20,1)
(49,8,1)
(47,13,1)
(39,48,1)
(52,0,1)
(5,25,1)
(47,0,1)
(56,2,1)
(4,1,1)
(38,55,1)
(44,33,1)
(60,35,1)
(26,47,1)
(33,19,1)
(46,26,1)
(6,0,1)
(36,37,1)
(13,28,1)
(37,44,1)
(17,50,1)
(52,18,1)
(44,7,1)
(52,18,2)
(12,22,2)
(13,22,2)
(36,55,2)
(8,22,2)
(5,22,2)
(6,0,2)
(52,22,2)
(44,22,2)
(33,22,2)
(48,22,2)
(56,22,2)
(0,9,2)
(1,55,2)
(6,22,2)
(38,44,2)
(36,22,2)
(60,44,2)
(19,30,2)
(51,5,2)
(9,22,2)
(35,44,2)
(17,44,2)
(2,52,2)
(54,22,2)
(59,20,2)
(9,29,2)
(39,22,2)
(62,22,2)
(15,59,2)
(21,44,2)
(6,51,2)
(9,15,2)
(49,0,2)
(1,60,2)
(2,22,2)
(43,47,2)
(36,0,2)
(34,22,2)
(46,47,2)
(20,22,2)
(14,55,2)
(33,19,2)
(1,18,2)
(44,33,2)
(28,22,2)
(0,22,2)
(15,22,2)
(18,22,2)
(61,22,2)
(23,22,2)
(4,44,2)
(50,44,2)
(55,44,2)
(7,22,2)
(19,6,2)
(4,1,2)
(27,22,2)
(49,22,2)
(14,44,2)
(51,22,2)
(26,47,2)
(47,22,2)
(52,0,2)
(42,44,2)
(37,22,2)
(25,22,2)
(57,44,2)
(55,33,2)
(19,22,2)
(59,22,2)
(1,44,2)
(11,22,2)
(47,0,2)
(43,46,2)
-----------------------------------
(0,* data = (int *)
(1,data[0])
(2,printIntLine(data[0])
(3,data)
(4,printIntLine(data[0])
(5,sizeof(int)
(6,realloc(data, (130000)
(7,NULL)
(8,0)
(9,(int *)
(10,)
(11,data)
(12,data)
(13,NULL)
(14,data[0])
(15,malloc(100*sizeof(int)
(16,if (data == NULL)
(17,tmpData)
(18,data[0] = 5)
(19,(int *)
(20,sizeof(int)
(21,0)
(22,globalReturnsTrue()
(23,130000)
(24,tmpData)
(25,int)
(26,1)
(27,data)
(28,data)
(29,int *)
(30,int *)
(31,if(globalReturnsTrue()
(32,)
(33,tmpData = (int *)
(34,data)
(35,10)
(36,free(data)
(37,data)
(38,data)
(39,int)
(40,)
(41,)
(42,0)
(43,exit(-1)
(44,tmpData != NULL)
(45,)
(46,-1)
(47,data == NULL)
(48,100)
(49,data[0])
(50,data)
(51,(130000)
(52,data[0])
(53,RET)
(54,tmpData)
(55,data = tmpData)
(56,tmpData)
(57,data)
(58,if (tmpData != NULL)
(59,100*sizeof(int)
(60,data[0] = 10)
(61,5)
(62,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^