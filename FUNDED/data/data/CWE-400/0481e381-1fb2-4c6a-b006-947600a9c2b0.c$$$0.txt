-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
55,57
56,57
59,60
59,61
59,62
59,63
59,64
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
87,88
87,89
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,49,52,54,57,58,63,66,68,71,74,77,78,82,84,89,91,95,97,99,103,105,109,111,116,117
-----computeFrom-----
46,47
46,48
47,48
47,49
55,56
55,57
61,62
61,63
72,73
72,74
80,81
80,82
-----guardedBy-----
54,99
57,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_listen_socket_64b_goodB2GSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(49,11,0)
(4,17,0)
(34,12,0)
(25,0,0)
(23,16,0)
(13,44,0)
(22,44,0)
(27,23,0)
(9,10,0)
(10,16,0)
(30,44,0)
(36,51,0)
(47,16,0)
(17,10,0)
(46,11,0)
(51,38,0)
(33,51,0)
(48,7,0)
(38,51,0)
(50,37,0)
(13,19,0)
(20,9,0)
(11,46,0)
(34,52,0)
(22,15,0)
(0,37,0)
(31,37,0)
(15,37,0)
(14,19,0)
(2,40,0)
(43,16,0)
(24,44,0)
(43,10,0)
(13,46,0)
(9,16,0)
(46,13,0)
(30,38,0)
(51,33,0)
(11,49,0)
(23,10,0)
(10,11,0)
(11,10,0)
(38,30,0)
(32,13,0)
(41,12,0)
(51,44,0)
(40,6,0)
(8,30,0)
(44,37,0)
(40,15,0)
(15,40,0)
(28,0,0)
(21,15,0)
(44,22,0)
(35,33,0)
(6,40,0)
(26,22,0)
(45,43,0)
(5,10,0)
(29,43,0)
(7,1,0)
(12,34,0)
(3,17,0)
(18,30,0)
(40,39,0)
(19,13,0)
(11,46,1)
(17,10,1)
(20,23,1)
(14,32,1)
(33,35,1)
(43,10,1)
(51,33,1)
(32,5,1)
(2,21,1)
(19,14,1)
(22,26,1)
(23,10,1)
(11,49,1)
(48,38,1)
(34,12,1)
(5,38,1)
(40,2,1)
(45,29,1)
(30,44,1)
(22,15,1)
(4,3,1)
(42,9,1)
(9,20,1)
(41,17,1)
(8,18,1)
(13,44,1)
(17,4,1)
(13,19,1)
(24,15,1)
(15,40,1)
(44,22,1)
(26,24,1)
(36,44,1)
(23,27,1)
(38,51,1)
(35,36,1)
(43,45,1)
(40,6,1)
(42,7,1)
(38,30,1)
(51,44,1)
(29,34,1)
(40,39,1)
(29,17,1)
(46,13,1)
(27,43,1)
(9,10,1)
(10,11,1)
(7,48,1)
(18,51,1)
(12,41,1)
(3,10,1)
(30,8,1)
(40,39,2)
(17,10,2)
(40,6,2)
(30,44,2)
(11,46,2)
(13,44,2)
(22,15,2)
(5,38,2)
(43,38,2)
(48,38,2)
(3,38,2)
(51,44,2)
(9,10,2)
(23,38,2)
(19,38,2)
(14,38,2)
(41,17,2)
(30,51,2)
(12,17,2)
(45,38,2)
(34,17,2)
(32,38,2)
(23,10,2)
(43,10,2)
(20,38,2)
(38,30,2)
(51,33,2)
(46,13,2)
(18,51,2)
(27,38,2)
(11,38,2)
(7,38,2)
(15,40,2)
(29,38,2)
(4,38,2)
(13,19,2)
(38,51,2)
(46,38,2)
(8,51,2)
(11,49,2)
(13,38,2)
(44,22,2)
(9,38,2)
(10,38,2)
(10,11,2)
(34,12,2)
(17,38,2)
-----------------------------------
(0,)
(1,)
(2,dataVoidPtr)
(3,myString)
(4,NULL)
(5,myString)
(6,size_t *)
(7,printLine("Input is less than the length of the source string or too large")
(8,100)
(9,free(myString)
(10,myString = (char *)
(11,(char *)
(12,-1)
(13,data*sizeof(char)
(14,char)
(15,* dataPtr = (size_t *)
(16,)
(17,myString == NULL)
(18,data)
(19,sizeof(char)
(20,myString)
(21,dataPtr)
(22,*dataPtr)
(23,printLine(myString)
(24,data)
(25,if (data > strlen(HELLO_STRING)
(26,dataPtr)
(27,myString)
(28,myString)
(29,myString)
(30,data < 100)
(31,dataPtr)
(32,data)
(33,strlen(HELLO_STRING)
(34,exit(-1)
(35,HELLO_STRING)
(36,data)
(37,)
(38,data > strlen(HELLO_STRING)
(39,void * dataVoidPtr)
(40,(size_t *)
(41,1)
(42,RET)
(43,strcpy(myString, HELLO_STRING)
(44,data = (*dataPtr)
(45,HELLO_STRING)
(46,malloc(data*sizeof(char)
(47,if (myString == NULL)
(48,"Input is less than the length of the source string or too large")
(49,char *)
(50,data)
(51,data > strlen(HELLO_STRING)
(52,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^