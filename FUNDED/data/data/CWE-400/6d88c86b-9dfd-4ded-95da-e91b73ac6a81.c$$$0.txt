-----label-----
0
-----code-----
static int tgt_get_match(xt_t *xt)
{
	ni_t *ni = to_ni(xt);
	struct list_head *l;

	if (xt->pt->options & PTL_PT_FLOWCTRL) {
		if (list_empty(&xt->pt->priority_list) &&
		    list_empty(&xt->pt->overflow_list)) {
			WARN();
			pthread_spin_lock(&xt->pt->obj_lock);
			xt->pt->disable |= PT_AUTO_DISABLE;
			pthread_spin_unlock(&xt->pt->obj_lock);
			xt->ni_fail = PTL_NI_FLOW_CTRL;
			xt->le = NULL;
			init_disabled_events(xt);
			return STATE_TGT_COMM_EVENT;
		}
	}

	list_for_each(l, &xt->pt->priority_list) {
		xt->le = list_entry(l, le_t, list);
		if (ni->options & PTL_NI_NO_MATCHING) {
			le_ref(xt->le);
			goto done;
		}

		if (check_match(xt)) {
			me_ref((me_t *)xt->le);
			goto done;
		}
	}

	list_for_each(l, &xt->pt->overflow_list) {
		xt->le = list_entry(l, le_t, list);
		if (ni->options & PTL_NI_NO_MATCHING) {
			le_ref(xt->le);
			goto done;
		}

		if (check_match(xt)) {
			me_ref((me_t *)xt->le);
			goto done;
		}
	}

	WARN();
	xt->le = NULL;
	return STATE_TGT_NO_MATCH;

done:
	return STATE_TGT_GET_PERM;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
35,36
35,37
36,37
40,41
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
55,57
56,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
65,67
65,68
65,69
65,70
65,71
65,72
65,73
66,67
67,68
68,69
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
76,78
77,78
81,82
82,83
82,84
83,84
83,85
84,85
84,86
85,86
89,90
91,92
92,93
92,94
93,94
95,96
96,97
96,98
97,98
97,99
98,99
102,103
103,104
103,105
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
119,120
119,121
120,121
122,123
124,125
125,126
127,128
128,129
128,130
128,131
129,130
131,132
133,134
134,135
134,136
135,136
135,137
136,137
140,141
141,142
141,143
141,144
142,143
143,144
143,145
144,145
144,146
145,146
148,149
148,150
148,151
148,152
149,150
151,152
153,154
155,156
157,158
157,159
158,159
158,160
159,160
159,161
160,161
163,164
165,166
165,167
166,167
167,168
167,169
168,169
170,171
170,172
171,172
174,175
176,177
176,178
177,178
177,179
178,179
180,181
182,183
182,184
183,184
184,185
184,186
185,186
187,188
187,189
188,189
188,190
189,190
191,192
193,194
193,195
194,195
197,198
199,200
200,201
200,202
200,203
201,202
203,204
205,206
206,207
206,208
207,208
207,209
208,209
212,213
213,214
213,215
213,216
214,215
215,216
215,217
216,217
216,218
217,218
220,221
220,222
220,223
220,224
221,222
223,224
225,226
227,228
229,230
229,231
230,231
230,232
231,232
231,233
232,233
235,236
237,238
237,239
238,239
239,240
239,241
240,241
242,243
242,244
243,244
246,247
248,249
248,250
249,250
249,251
250,251
252,253
254,255
254,256
255,256
256,257
256,258
257,258
259,260
259,261
260,261
260,262
261,262
263,264
265,266
265,267
266,267
269,270
271,272
272,273
273,274
275,276
276,277
276,278
277,278
277,279
278,279
281,282
283,284
284,285
286,287
286,288
288,289
289,290
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,28,30,31,37,38,39,41,47,52,53,54,57,62,63,64,69,73,78,79,80,86,87,88,90,94,99,100,101,106,107,109,114,115,117,121,123,126,130,132,137,138,139,146,147,150,152,154,156,161,162,164,169,172,173,175,179,181,186,190,192,195,196,198,202,204,209,210,211,218,219,222,224,226,228,233,234,236,241,244,245,247,251,253,258,262,264,267,268,270,274,279,280,282,285,287,290
-----computeFrom-----
33,34
33,35
44,45
44,46
82,83
82,84
103,104
103,105
111,112
111,113
143,144
143,145
158,159
158,160
215,216
215,217
230,231
230,232
276,277
276,278
-----guardedBy-----
38,100
37,123
63,100
62,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tgt_get_match(xt_t *xt){	ni_t *ni = to_ni(xt);	struct list_head *l;	if (xt->pt->options & PTL_PT_FLOWCTRL) {		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			WARN();			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			xt->ni_fail = PTL_NI_FLOW_CTRL;			xt->le = NULL;			init_disabled_events(xt);			return STATE_TGT_COMM_EVENT;		}	}	list_for_each(l, &xt->pt->priority_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}	list_for_each(l, &xt->pt->overflow_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}	WARN();	xt->le = NULL;	return STATE_TGT_NO_MATCH;done:	return STATE_TGT_GET_PERM;}
static int
tgt_get_match(xt_t *xt)
tgt_get_match
xt_t *xt
xt_t
xt_t
*xt
*
xt
{	ni_t *ni = to_ni(xt);	struct list_head *l;	if (xt->pt->options & PTL_PT_FLOWCTRL) {		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			WARN();			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			xt->ni_fail = PTL_NI_FLOW_CTRL;			xt->le = NULL;			init_disabled_events(xt);			return STATE_TGT_COMM_EVENT;		}	}	list_for_each(l, &xt->pt->priority_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}	list_for_each(l, &xt->pt->overflow_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}	WARN();	xt->le = NULL;	return STATE_TGT_NO_MATCH;done:	return STATE_TGT_GET_PERM;}
ni_t *ni = to_ni(xt);
ni_t *ni = to_ni(xt);
ni_t
ni_t
*ni = to_ni(xt)
*
ni
= to_ni(xt)
to_ni(xt)
to_ni
to_ni
xt
xt
struct list_head *l;
struct list_head *l;
struct list_head
list_head
*l
*
l
if (xt->pt->options & PTL_PT_FLOWCTRL) {		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			WARN();			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			xt->ni_fail = PTL_NI_FLOW_CTRL;			xt->le = NULL;			init_disabled_events(xt);			return STATE_TGT_COMM_EVENT;		}	}
xt->pt->options & PTL_PT_FLOWCTRL
xt->pt->options
xt->pt
xt
xt
pt
options
PTL_PT_FLOWCTRL
PTL_PT_FLOWCTRL
{		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			WARN();			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			xt->ni_fail = PTL_NI_FLOW_CTRL;			xt->le = NULL;			init_disabled_events(xt);			return STATE_TGT_COMM_EVENT;		}	}
if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			WARN();			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			xt->ni_fail = PTL_NI_FLOW_CTRL;			xt->le = NULL;			init_disabled_events(xt);			return STATE_TGT_COMM_EVENT;		}
list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)
list_empty(&xt->pt->priority_list)
list_empty
list_empty
&xt->pt->priority_list
xt->pt->priority_list
xt->pt
xt
xt
pt
priority_list
list_empty(&xt->pt->overflow_list)
list_empty
list_empty
&xt->pt->overflow_list
xt->pt->overflow_list
xt->pt
xt
xt
pt
overflow_list
{			WARN();			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			xt->ni_fail = PTL_NI_FLOW_CTRL;			xt->le = NULL;			init_disabled_events(xt);			return STATE_TGT_COMM_EVENT;		}
WARN();
WARN()
WARN
WARN
pthread_spin_lock(&xt->pt->obj_lock);
pthread_spin_lock(&xt->pt->obj_lock)
pthread_spin_lock
pthread_spin_lock
&xt->pt->obj_lock
xt->pt->obj_lock
xt->pt
xt
xt
pt
obj_lock
xt->pt->disable |= PT_AUTO_DISABLE;
xt->pt->disable |= PT_AUTO_DISABLE
xt->pt->disable
xt->pt
xt
xt
pt
disable
PT_AUTO_DISABLE
PT_AUTO_DISABLE
pthread_spin_unlock(&xt->pt->obj_lock);
pthread_spin_unlock(&xt->pt->obj_lock)
pthread_spin_unlock
pthread_spin_unlock
&xt->pt->obj_lock
xt->pt->obj_lock
xt->pt
xt
xt
pt
obj_lock
xt->ni_fail = PTL_NI_FLOW_CTRL;
xt->ni_fail = PTL_NI_FLOW_CTRL
xt->ni_fail
xt
xt
ni_fail
PTL_NI_FLOW_CTRL
PTL_NI_FLOW_CTRL
xt->le = NULL;
xt->le = NULL
xt->le
xt
xt
le
NULL
NULL
init_disabled_events(xt);
init_disabled_events(xt)
init_disabled_events
init_disabled_events
xt
xt
return STATE_TGT_COMM_EVENT;
STATE_TGT_COMM_EVENT
STATE_TGT_COMM_EVENT
list_for_each(l, &xt->pt->priority_list)
list_for_each(l, &xt->pt->priority_list)
list_for_each
list_for_each
l
l
&xt->pt->priority_list
xt->pt->priority_list
xt->pt
xt
xt
pt
priority_list
)
{		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}
xt->le = list_entry(l, le_t, list);
xt->le = list_entry(l, le_t, list)
xt->le
xt
xt
le
list_entry(l, le_t, list)
list_entry
list_entry
l
l
le_t
le_t
list
list
if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}
ni->options & PTL_NI_NO_MATCHING
ni->options
ni
ni
options
PTL_NI_NO_MATCHING
PTL_NI_NO_MATCHING
{			le_ref(xt->le);			goto done;		}
le_ref(xt->le);
le_ref(xt->le)
le_ref
le_ref
xt->le
xt
xt
le
goto done;
done
if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}
check_match(xt)
check_match
check_match
xt
xt
{			me_ref((me_t *)xt->le);			goto done;		}
me_ref((me_t *)xt->le);
me_ref((me_t *)xt->le)
me_ref
me_ref
(me_t *)xt->le
me_t *
me_t
me_t
*
*
xt->le
xt
xt
le
goto done;
done
list_for_each(l, &xt->pt->overflow_list)
list_for_each(l, &xt->pt->overflow_list)
list_for_each
list_for_each
l
l
&xt->pt->overflow_list
xt->pt->overflow_list
xt->pt
xt
xt
pt
overflow_list
)
{		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}
xt->le = list_entry(l, le_t, list);
xt->le = list_entry(l, le_t, list)
xt->le
xt
xt
le
list_entry(l, le_t, list)
list_entry
list_entry
l
l
le_t
le_t
list
list
if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}
ni->options & PTL_NI_NO_MATCHING
ni->options
ni
ni
options
PTL_NI_NO_MATCHING
PTL_NI_NO_MATCHING
{			le_ref(xt->le);			goto done;		}
le_ref(xt->le);
le_ref(xt->le)
le_ref
le_ref
xt->le
xt
xt
le
goto done;
done
if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}
check_match(xt)
check_match
check_match
xt
xt
{			me_ref((me_t *)xt->le);			goto done;		}
me_ref((me_t *)xt->le);
me_ref((me_t *)xt->le)
me_ref
me_ref
(me_t *)xt->le
me_t *
me_t
me_t
*
*
xt->le
xt
xt
le
goto done;
done
WARN();
WARN()
WARN
WARN
xt->le = NULL;
xt->le = NULL
xt->le
xt
xt
le
NULL
NULL
return STATE_TGT_NO_MATCH;
STATE_TGT_NO_MATCH
STATE_TGT_NO_MATCH
done:	return STATE_TGT_GET_PERM;
done
return STATE_TGT_GET_PERM;
STATE_TGT_GET_PERM
STATE_TGT_GET_PERM
-----joern-----
(94,48,0)
(79,126,0)
(6,95,0)
(123,69,0)
(110,115,0)
(8,46,0)
(115,40,0)
(36,94,0)
(57,31,0)
(1,118,0)
(113,70,0)
(31,48,0)
(111,118,0)
(41,40,0)
(131,79,0)
(80,4,0)
(27,63,0)
(115,110,0)
(135,12,0)
(107,34,0)
(144,130,0)
(117,50,0)
(140,144,0)
(30,78,0)
(69,126,0)
(93,118,0)
(137,26,0)
(52,117,0)
(1,4,0)
(17,118,0)
(47,23,0)
(99,46,0)
(63,120,0)
(42,71,0)
(75,118,0)
(22,59,0)
(45,64,0)
(68,144,0)
(116,122,0)
(128,70,0)
(1,130,0)
(130,126,0)
(128,48,0)
(104,79,0)
(102,130,0)
(5,55,0)
(13,38,0)
(103,40,0)
(16,48,0)
(92,64,0)
(49,51,0)
(132,59,0)
(76,118,0)
(38,18,0)
(121,128,0)
(23,47,0)
(38,126,0)
(81,59,0)
(67,9,0)
(94,36,0)
(4,48,0)
(132,71,0)
(70,122,0)
(110,83,0)
(58,133,0)
(49,31,0)
(108,92,0)
(21,64,0)
(77,37,0)
(36,12,0)
(89,94,0)
(65,50,0)
(6,25,0)
(144,30,0)
(107,74,0)
(12,135,0)
(25,19,0)
(68,1,0)
(96,23,0)
(63,79,0)
(25,118,0)
(24,132,0)
(18,38,0)
(14,23,0)
(139,124,0)
(62,48,0)
(144,4,0)
(79,48,0)
(100,34,0)
(84,3,0)
(79,63,0)
(142,4,0)
(50,40,0)
(37,55,0)
(126,69,0)
(126,93,0)
(112,47,0)
(87,16,0)
(143,26,0)
(73,117,0)
(2,6,0)
(68,92,0)
(34,100,0)
(19,48,0)
(100,16,0)
(19,25,0)
(11,30,0)
(83,110,0)
(39,143,0)
(92,70,0)
(92,40,0)
(74,101,0)
(43,24,0)
(88,130,0)
(91,93,0)
(97,19,0)
(64,103,0)
(30,48,0)
(92,117,0)
(53,37,0)
(63,27,0)
(12,36,0)
(59,118,0)
(7,71,0)
(10,62,0)
(60,83,0)
(74,107,0)
(127,24,0)
(134,71,0)
(70,128,0)
(105,96,0)
(119,143,0)
(98,36,0)
(4,132,0)
(26,143,0)
(3,48,0)
(109,103,0)
(31,49,0)
(51,49,0)
(24,48,0)
(95,6,0)
(35,48,0)
(125,16,0)
(28,100,0)
(46,48,0)
(24,126,0)
(38,48,0)
(136,24,0)
(135,40,0)
(86,69,0)
(139,26,0)
(51,101,0)
(16,100,0)
(122,40,0)
(71,132,0)
(143,132,0)
(138,38,0)
(55,37,0)
(56,35,0)
(61,85,0)
(33,78,0)
(32,95,0)
(64,48,0)
(24,43,0)
(15,30,0)
(101,51,0)
(145,47,0)
(78,118,0)
(117,48,0)
(72,94,0)
(143,126,0)
(43,85,0)
(20,1,0)
(23,96,0)
(26,137,0)
(83,46,0)
(120,63,0)
(66,6,0)
(0,118,0)
(130,48,0)
(141,93,0)
(29,25,0)
(129,31,0)
(37,25,0)
(114,54,0)
(26,139,0)
(35,40,0)
(44,124,0)
(18,133,0)
(143,48,0)
(47,48,0)
(34,107,0)
(106,49,0)
(27,54,0)
(144,118,0)
(90,128,0)
(101,74,0)
(82,69,0)
(46,83,0)
(66,2,1)
(88,102,1)
(61,43,1)
(3,48,1)
(15,17,1)
(17,3,1)
(12,36,1)
(79,104,1)
(143,132,1)
(92,70,1)
(127,95,1)
(95,6,1)
(24,132,1)
(16,48,1)
(72,41,1)
(1,130,1)
(63,79,1)
(30,48,1)
(20,58,1)
(123,82,1)
(14,47,1)
(142,80,1)
(116,70,1)
(100,28,1)
(92,64,1)
(10,55,1)
(68,1,1)
(25,19,1)
(20,114,1)
(94,89,1)
(117,48,1)
(24,136,1)
(117,73,1)
(39,3,1)
(92,108,1)
(46,48,1)
(33,30,1)
(132,71,1)
(7,134,1)
(135,12,1)
(6,66,1)
(82,130,1)
(80,62,1)
(47,48,1)
(71,7,1)
(56,103,1)
(108,35,1)
(129,96,1)
(145,112,1)
(144,4,1)
(125,87,1)
(51,49,1)
(18,38,1)
(84,95,1)
(65,117,1)
(52,115,1)
(119,39,1)
(128,48,1)
(68,92,1)
(89,72,1)
(143,119,1)
(102,96,1)
(31,57,1)
(131,62,1)
(144,140,1)
(34,100,1)
(27,63,1)
(126,69,1)
(26,143,1)
(41,74,1)
(87,101,1)
(79,48,1)
(20,61,1)
(49,106,1)
(24,126,1)
(139,26,1)
(4,142,1)
(44,139,1)
(101,51,1)
(2,132,1)
(38,48,1)
(55,37,1)
(130,88,1)
(36,94,1)
(1,20,1)
(96,23,1)
(35,48,1)
(77,53,1)
(46,8,1)
(86,123,1)
(35,56,1)
(74,107,1)
(144,30,1)
(83,60,1)
(4,48,1)
(36,98,1)
(50,65,1)
(102,74,1)
(107,34,1)
(94,48,1)
(90,135,1)
(83,46,1)
(112,25,1)
(24,48,1)
(21,50,1)
(114,27,1)
(38,13,1)
(143,126,1)
(30,11,1)
(53,126,1)
(138,55,1)
(1,4,1)
(13,138,1)
(37,25,1)
(43,24,1)
(3,84,1)
(58,18,1)
(28,16,1)
(70,128,1)
(47,145,1)
(62,48,1)
(38,126,1)
(109,64,1)
(105,23,1)
(60,46,1)
(73,52,1)
(70,113,1)
(92,117,1)
(5,37,1)
(26,137,1)
(98,94,1)
(45,21,1)
(42,4,1)
(96,105,1)
(99,122,1)
(64,45,1)
(20,44,1)
(122,116,1)
(37,77,1)
(128,121,1)
(79,126,1)
(62,10,1)
(100,16,1)
(140,78,1)
(57,129,1)
(103,109,1)
(16,125,1)
(115,110,1)
(23,47,1)
(110,83,1)
(19,97,1)
(6,25,1)
(136,127,1)
(106,31,1)
(74,101,1)
(113,128,1)
(49,31,1)
(31,48,1)
(143,48,1)
(11,15,1)
(19,48,1)
(55,5,1)
(121,90,1)
(78,33,1)
(144,130,1)
(95,32,1)
(104,131,1)
(63,120,1)
(23,14,1)
(130,48,1)
(68,144,1)
(134,42,1)
(69,86,1)
(97,29,1)
(32,6,1)
(64,48,1)
(8,99,1)
(53,96,2)
(92,117,2)
(3,95,2)
(73,74,2)
(143,126,2)
(49,96,2)
(20,62,2)
(109,74,2)
(27,63,2)
(96,23,2)
(69,96,2)
(68,144,2)
(61,95,2)
(102,74,2)
(87,101,2)
(10,55,2)
(31,96,2)
(51,96,2)
(94,74,2)
(95,6,2)
(70,128,2)
(126,96,2)
(92,70,2)
(65,74,2)
(143,132,2)
(122,74,2)
(60,74,2)
(1,4,2)
(37,74,2)
(43,95,2)
(18,55,2)
(107,34,2)
(92,64,2)
(126,74,2)
(88,74,2)
(116,74,2)
(88,96,2)
(114,62,2)
(104,62,2)
(63,120,2)
(132,62,2)
(115,110,2)
(36,74,2)
(126,69,2)
(74,96,2)
(27,62,2)
(119,3,2)
(55,74,2)
(103,74,2)
(117,74,2)
(144,130,2)
(55,37,2)
(79,126,2)
(52,74,2)
(42,62,2)
(41,74,2)
(16,101,2)
(100,16,2)
(26,143,2)
(6,62,2)
(101,96,2)
(1,3,2)
(136,95,2)
(143,3,2)
(50,74,2)
(139,26,2)
(62,55,2)
(80,62,2)
(18,38,2)
(135,74,2)
(86,96,2)
(47,48,2)
(38,55,2)
(4,62,2)
(138,55,2)
(140,3,2)
(5,96,2)
(63,62,2)
(89,74,2)
(63,79,2)
(86,74,2)
(24,95,2)
(123,96,2)
(79,62,2)
(7,62,2)
(102,96,2)
(70,74,2)
(1,62,2)
(142,62,2)
(69,74,2)
(125,101,2)
(46,48,2)
(5,74,2)
(66,62,2)
(24,126,2)
(74,101,2)
(99,74,2)
(64,74,2)
(44,3,2)
(46,74,2)
(17,3,2)
(23,47,2)
(123,74,2)
(6,25,2)
(55,96,2)
(20,95,2)
(1,55,2)
(115,74,2)
(39,3,2)
(107,101,2)
(100,101,2)
(1,130,2)
(16,48,2)
(77,74,2)
(32,62,2)
(144,3,2)
(132,71,2)
(83,46,2)
(71,62,2)
(68,92,2)
(130,74,2)
(26,137,2)
(83,74,2)
(56,74,2)
(98,74,2)
(31,48,2)
(127,95,2)
(64,48,2)
(117,48,2)
(128,74,2)
(34,100,2)
(13,55,2)
(37,96,2)
(30,3,2)
(128,48,2)
(34,101,2)
(135,12,2)
(12,74,2)
(72,74,2)
(68,1,2)
(106,96,2)
(15,3,2)
(2,62,2)
(131,62,2)
(30,48,2)
(74,107,2)
(35,48,2)
(49,31,2)
(58,55,2)
(51,49,2)
(1,95,2)
(130,96,2)
(110,83,2)
(37,25,2)
(8,74,2)
(36,94,2)
(24,132,2)
(57,96,2)
(94,48,2)
(139,3,2)
(20,55,2)
(33,3,2)
(4,48,2)
(129,96,2)
(110,74,2)
(35,74,2)
(143,48,2)
(62,48,2)
(84,95,2)
(20,3,2)
(121,74,2)
(130,48,2)
(108,74,2)
(92,74,2)
(11,3,2)
(26,3,2)
(38,48,2)
(82,74,2)
(78,3,2)
(82,96,2)
(12,36,2)
(19,48,2)
(90,74,2)
(101,51,2)
(24,48,2)
(113,74,2)
(38,126,2)
(43,24,2)
(25,19,2)
(77,96,2)
(95,62,2)
(28,101,2)
(21,74,2)
(134,62,2)
(144,4,2)
(45,74,2)
(79,48,2)
(53,74,2)
(144,30,2)
(3,48,2)
-----------------------------------
(0,if (xt->pt->options & PTL_PT_FLOWCTRL)
(1,return STATE_TGT_GET_PERM;)
(2,ni)
(3,check_match(xt)
(4,xt->le)
(5,PTL_NI_NO_MATCHING)
(6,ni->options)
(7,list)
(8,pt)
(9,)
(10,xt)
(11,le)
(12,&xt->pt->obj_lock)
(13,le)
(14,options)
(15,xt)
(16,xt->pt)
(17,WARN()
(18,le_ref(xt->le)
(19,to_ni(xt)
(20,STATE_TGT_GET_PERM)
(21,xt)
(22,if (ni->options & PTL_NI_NO_MATCHING)
(23,xt->pt->options)
(24,xt->le)
(25,*ni = to_ni(xt)
(26,(me_t *)
(27,me_ref((me_t *)
(28,overflow_list)
(29,ni)
(30,xt->le)
(31,xt->pt)
(32,PTL_NI_NO_MATCHING)
(33,NULL)
(34,&xt->pt->overflow_list)
(35,init_disabled_events(xt)
(36,xt->pt->obj_lock)
(37,ni->options)
(38,xt->le)
(39,xt)
(40,)
(41,WARN()
(42,l)
(43,le_ref(xt->le)
(44,goto done;)
(45,le)
(46,xt->pt)
(47,xt->pt)
(48,xt_t *xt)
(49,xt->pt->priority_list)
(50,xt->ni_fail = PTL_NI_FLOW_CTRL)
(51,&xt->pt->priority_list)
(52,xt)
(53,ni)
(54,)
(55,ni->options & PTL_NI_NO_MATCHING)
(56,xt)
(57,pt)
(58,goto done;)
(59,)
(60,obj_lock)
(61,goto done;)
(62,check_match(xt)
(63,(me_t *)
(64,xt->le)
(65,PTL_NI_FLOW_CTRL)
(66,options)
(67,if (list_empty(&xt->pt->priority_list)
(68,RET)
(69,list_entry(l, le_t, list)
(70,xt->pt->disable)
(71,list_entry(l, le_t, list)
(72,xt)
(73,ni_fail)
(74,list_empty(&xt->pt->priority_list)
(75,l)
(76,done:)
(77,options)
(78,xt->le = NULL)
(79,xt->le)
(80,xt)
(81,if (check_match(xt)
(82,l)
(83,xt->pt->obj_lock)
(84,xt)
(85,)
(86,list)
(87,xt)
(88,le)
(89,pt)
(90,xt)
(91,if (ni->options & PTL_NI_NO_MATCHING)
(92,return STATE_TGT_COMM_EVENT;)
(93,)
(94,xt->pt)
(95,ni->options & PTL_NI_NO_MATCHING)
(96,xt->pt->options & PTL_PT_FLOWCTRL)
(97,xt)
(98,obj_lock)
(99,xt)
(100,xt->pt->overflow_list)
(101,list_empty(&xt->pt->priority_list)
(102,xt)
(103,xt->le = NULL)
(104,le)
(105,PTL_PT_FLOWCTRL)
(106,priority_list)
(107,list_empty(&xt->pt->overflow_list)
(108,STATE_TGT_COMM_EVENT)
(109,NULL)
(110,&xt->pt->obj_lock)
(111,ni)
(112,xt)
(113,disable)
(114,goto done;)
(115,pthread_spin_unlock(&xt->pt->obj_lock)
(116,PT_AUTO_DISABLE)
(117,xt->ni_fail)
(118,)
(119,le)
(120,me_t *)
(121,pt)
(122,xt->pt->disable |= PT_AUTO_DISABLE)
(123,le_t)
(124,)
(125,pt)
(126,xt->le = list_entry(l, le_t, list)
(127,xt)
(128,xt->pt)
(129,xt)
(130,xt->le)
(131,xt)
(132,xt->le = list_entry(l, le_t, list)
(133,)
(134,le_t)
(135,pthread_spin_lock(&xt->pt->obj_lock)
(136,le)
(137,me_t *)
(138,xt)
(139,me_ref((me_t *)
(140,STATE_TGT_NO_MATCH)
(141,if (check_match(xt)
(142,le)
(143,xt->le)
(144,return STATE_TGT_NO_MATCH;)
(145,pt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^