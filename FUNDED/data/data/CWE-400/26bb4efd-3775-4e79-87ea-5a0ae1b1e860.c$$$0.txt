-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,46,50,52,55,57
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    char * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    char * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(7,1,0)
(5,19,0)
(14,10,0)
(8,9,0)
(19,21,0)
(17,1,0)
(20,9,0)
(24,14,0)
(9,20,0)
(9,10,0)
(11,1,0)
(19,20,0)
(14,3,0)
(20,21,0)
(9,8,0)
(13,20,0)
(4,1,0)
(3,14,0)
(15,20,0)
(10,9,0)
(6,3,0)
(22,13,0)
(0,19,0)
(13,21,0)
(23,17,0)
(10,14,0)
(12,17,0)
(19,20,1)
(5,20,1)
(24,15,1)
(6,24,1)
(13,22,1)
(14,3,1)
(17,23,1)
(9,8,1)
(9,10,1)
(0,5,1)
(16,17,1)
(13,20,1)
(19,0,1)
(2,18,1)
(10,14,1)
(18,16,1)
(18,13,1)
(20,9,1)
(3,6,1)
(15,16,1)
(23,12,1)
(22,19,1)
(6,16,2)
(5,16,2)
(14,3,2)
(19,20,2)
(24,16,2)
(20,9,2)
(13,16,2)
(20,16,2)
(9,10,2)
(14,16,2)
(15,16,2)
(10,16,2)
(9,16,2)
(13,20,2)
(22,16,2)
(19,16,2)
(10,14,2)
(3,16,2)
(9,8,2)
(0,16,2)
-----------------------------------
(0,"A String")
(1,)
(2,RET)
(3,sizeof(char)
(4,if(GLOBAL_CONST_TRUE)
(5,data)
(6,char)
(7,if(GLOBAL_CONST_TRUE)
(8,char *)
(9,(char *)
(10,ALLOCA(100*sizeof(char)
(11,data)
(12,data)
(13,printLine(data)
(14,100*sizeof(char)
(15,data)
(16,GLOBAL_CONST_TRUE)
(17,data = NULL)
(18,GLOBAL_CONST_TRUE)
(19,strcpy(data, "A String")
(20,data = (char *)
(21,)
(22,data)
(23,NULL)
(24,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^