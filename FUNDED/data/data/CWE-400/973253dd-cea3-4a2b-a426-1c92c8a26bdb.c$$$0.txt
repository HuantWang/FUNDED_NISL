-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_13_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
27,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
36,37
36,38
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
59,60
61,62
62,63
64,65
65,66
66,67
66,68
67,68
-----nextToken-----
2,4,8,10,14,16,20,21,26,29,33,34,40,42,44,49,50,53,57,58,60,63,68,69
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
31,32
31,33
47,48
47,49
51,52
51,53
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_13_bad(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_13_bad()
CWE400_Resource_Exhaustion__rand_for_loop_13_bad
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(GLOBAL_CONST_FIVE==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(10,18,0)
(5,18,0)
(16,33,0)
(6,32,0)
(36,34,0)
(16,1,0)
(6,29,0)
(32,34,0)
(25,24,0)
(18,38,0)
(8,32,0)
(2,6,0)
(6,16,0)
(24,4,0)
(30,24,0)
(29,6,0)
(13,11,0)
(28,11,0)
(7,38,0)
(15,38,0)
(20,4,0)
(18,10,0)
(33,16,0)
(23,19,0)
(22,38,0)
(14,0,0)
(37,10,0)
(19,34,0)
(21,4,0)
(9,16,0)
(6,18,0)
(26,3,0)
(32,6,0)
(12,34,0)
(27,3,0)
(4,35,0)
(31,14,0)
(17,11,1)
(6,2,1)
(36,24,1)
(6,18,1)
(18,10,1)
(11,13,1)
(32,34,1)
(16,33,1)
(17,32,1)
(14,31,1)
(24,25,1)
(25,30,1)
(6,29,1)
(33,9,1)
(6,16,1)
(8,19,1)
(31,32,1)
(34,12,1)
(37,5,1)
(9,3,1)
(19,23,1)
(28,16,1)
(28,3,1)
(3,26,1)
(2,8,1)
(23,14,1)
(26,27,1)
(10,37,1)
(27,18,1)
(12,36,1)
(8,34,1)
(13,28,1)
(32,6,1)
(30,11,1)
(19,34,1)
(19,34,2)
(23,32,2)
(32,34,2)
(2,32,2)
(6,11,2)
(30,11,2)
(6,29,2)
(32,32,2)
(14,32,2)
(6,32,2)
(33,3,2)
(6,18,2)
(16,33,2)
(32,11,2)
(8,32,2)
(32,6,2)
(25,11,2)
(36,11,2)
(12,11,2)
(2,11,2)
(24,11,2)
(18,10,2)
(9,3,2)
(34,11,2)
(6,16,2)
(8,11,2)
(31,32,2)
(19,32,2)
(16,3,2)
-----------------------------------
(0,)
(1,)
(2,count)
(3,GLOBAL_CONST_FIVE==5)
(4,)
(5,count)
(6,(size_t)
(7,if(GLOBAL_CONST_FIVE==5)
(8,i)
(9,count)
(10,-1)
(11,GLOBAL_CONST_FIVE==5)
(12,0)
(13,5)
(14,printLine("Hello")
(15,if(GLOBAL_CONST_FIVE==5)
(16,count = RAND32()
(17,RET)
(18,count = -1)
(19,i++)
(20,i)
(21,for (i = 0; i < (size_t)
(22,count)
(23,i)
(24,i = 0)
(25,0)
(26,5)
(27,GLOBAL_CONST_FIVE)
(28,GLOBAL_CONST_FIVE)
(29,size_t)
(30,i)
(31,"Hello")
(32,i < (size_t)
(33,RAND32()
(34,i = 0)
(35,)
(36,i)
(37,1)
(38,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^