-----label-----
0
-----code-----
static void goodG2B1()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
22,23
23,24
24,25
24,26
25,26
28,29
28,30
28,31
28,32
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
39,41
40,41
42,43
42,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
82,83
82,84
83,84
85,86
-----nextToken-----
2,4,9,11,12,16,18,21,26,27,32,36,38,41,43,47,48,54,55,56,57,63,64,65,66,70,74,76,80,81,84,86
-----computeFrom-----
14,15
14,16
30,31
30,32
42,43
42,44
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B1(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B1()
goodG2B1
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(2,15,0)
(18,8,0)
(41,4,0)
(32,24,0)
(31,7,0)
(21,10,0)
(15,2,0)
(19,7,0)
(16,8,0)
(42,1,0)
(28,21,0)
(2,36,0)
(40,8,0)
(14,26,0)
(7,31,0)
(0,22,0)
(20,22,0)
(11,37,0)
(3,10,0)
(5,2,0)
(4,41,0)
(15,32,0)
(4,36,0)
(23,33,0)
(21,28,0)
(38,24,0)
(25,1,0)
(8,16,0)
(37,30,0)
(4,28,0)
(10,21,0)
(35,36,0)
(26,24,0)
(43,16,0)
(8,36,0)
(10,3,0)
(38,23,0)
(23,38,0)
(17,15,0)
(27,32,0)
(36,4,0)
(29,1,0)
(31,23,0)
(9,7,0)
(28,4,0)
(23,31,0)
(16,26,0)
(13,21,0)
(33,23,0)
(7,36,0)
(12,2,0)
(22,1,0)
(36,24,0)
(35,39,1)
(26,14,1)
(32,27,1)
(8,40,1)
(28,21,1)
(8,36,1)
(12,5,1)
(11,39,1)
(6,38,1)
(15,17,1)
(7,19,1)
(19,9,1)
(38,23,1)
(27,15,1)
(21,10,1)
(13,35,1)
(20,0,1)
(6,37,1)
(10,3,1)
(22,20,1)
(43,8,1)
(40,18,1)
(4,41,1)
(18,32,1)
(14,16,1)
(23,31,1)
(9,26,1)
(37,11,1)
(15,2,1)
(39,22,1)
(16,43,1)
(17,2,1)
(36,4,1)
(5,36,1)
(2,12,1)
(4,28,1)
(16,8,1)
(23,33,1)
(10,13,1)
(7,36,1)
(31,7,1)
(2,36,1)
(34,6,1)
(36,39,2)
(12,39,2)
(40,39,2)
(31,39,2)
(13,39,2)
(19,39,2)
(15,39,2)
(4,39,2)
(16,8,2)
(31,7,2)
(38,23,2)
(23,39,2)
(15,2,2)
(32,39,2)
(14,39,2)
(21,10,2)
(36,4,2)
(4,41,2)
(2,39,2)
(18,39,2)
(37,39,2)
(26,39,2)
(5,39,2)
(43,39,2)
(35,39,2)
(7,39,2)
(23,31,2)
(9,39,2)
(4,28,2)
(8,36,2)
(28,39,2)
(2,36,2)
(7,36,2)
(21,39,2)
(8,39,2)
(10,39,2)
(16,39,2)
(23,33,2)
(17,39,2)
(28,21,2)
(10,3,2)
(27,39,2)
(38,39,2)
(11,39,2)
-----------------------------------
(0,data)
(1,)
(2,data[0])
(3,struct _twoIntsStruct)
(4,(struct _twoIntsStruct *)
(5,data)
(6,staticTrue)
(7,data[0])
(8,data[0])
(9,data)
(10,sizeof(struct _twoIntsStruct)
(11,"Benign, fixed string")
(12,0)
(13,100)
(14,0)
(15,data[0].intOne)
(16,data[0].intTwo)
(17,intOne)
(18,data)
(19,0)
(20,NULL)
(21,100*sizeof(struct _twoIntsStruct)
(22,data = NULL)
(23,(twoIntsStruct *)
(24,)
(25,data)
(26,data[0].intTwo = 0)
(27,0)
(28,ALLOCA(100*sizeof(struct _twoIntsStruct)
(29,if(staticFalse)
(30,)
(31,&data[0])
(32,data[0].intOne = 0)
(33,twoIntsStruct *)
(34,RET)
(35,data)
(36,data = (struct _twoIntsStruct *)
(37,printLine("Benign, fixed string")
(38,printStructLine((twoIntsStruct *)
(39,staticFalse)
(40,0)
(41,struct _twoIntsStruct *)
(42,if(staticTrue)
(43,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^