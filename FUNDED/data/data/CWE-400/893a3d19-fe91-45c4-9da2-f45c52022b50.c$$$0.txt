-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_07_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFive==5)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(staticFive==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
63,65
64,65
64,66
65,66
68,69
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,31,33,38,40,42,44,46,51,54,56,61,62,66,67,73,75,77,82,83,86,90,91,93,96,101,102
-----computeFrom-----
12,13
12,14
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
80,81
80,82
84,85
84,86
-----guardedBy-----
40,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_07_bad(){    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_07_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_07_bad
{    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFive==5)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(41,49,0)
(34,27,0)
(7,35,0)
(19,47,0)
(11,28,0)
(17,38,0)
(40,48,0)
(54,10,0)
(28,24,0)
(9,16,0)
(15,49,0)
(33,37,0)
(1,19,0)
(3,28,0)
(42,48,0)
(7,3,0)
(23,4,0)
(21,24,0)
(7,34,0)
(20,24,0)
(30,10,0)
(45,55,0)
(6,16,0)
(48,31,0)
(38,49,0)
(0,27,0)
(10,48,0)
(50,7,0)
(13,45,0)
(49,24,0)
(12,50,0)
(3,14,0)
(35,7,0)
(50,25,0)
(51,3,0)
(36,25,0)
(8,26,0)
(34,16,0)
(32,7,0)
(27,34,0)
(22,16,0)
(53,4,0)
(43,37,0)
(28,3,0)
(18,8,0)
(7,50,0)
(52,25,0)
(5,36,0)
(2,19,0)
(44,49,0)
(29,25,0)
(24,19,0)
(39,34,0)
(49,38,0)
(23,3,1)
(8,18,1)
(5,8,1)
(34,27,1)
(18,50,1)
(13,38,1)
(12,25,1)
(53,23,1)
(30,54,1)
(52,10,1)
(49,41,1)
(7,34,1)
(7,3,1)
(0,39,1)
(51,38,1)
(27,0,1)
(36,5,1)
(4,53,1)
(46,50,1)
(15,24,1)
(38,49,1)
(54,4,1)
(32,12,1)
(12,36,1)
(23,45,1)
(24,20,1)
(45,13,1)
(49,24,1)
(11,51,1)
(3,28,1)
(41,44,1)
(21,37,1)
(17,49,1)
(28,24,1)
(46,4,1)
(25,29,1)
(29,52,1)
(7,35,1)
(37,43,1)
(20,21,1)
(33,34,1)
(50,25,1)
(10,30,1)
(36,25,1)
(23,37,1)
(50,7,1)
(43,33,1)
(28,11,1)
(44,15,1)
(7,32,1)
(38,17,1)
(38,49,2)
(49,37,2)
(49,24,2)
(20,37,2)
(3,38,2)
(28,38,2)
(38,37,2)
(36,25,2)
(51,38,2)
(7,35,2)
(12,4,2)
(18,50,2)
(50,50,2)
(15,37,2)
(50,4,2)
(7,3,2)
(32,50,2)
(41,37,2)
(50,25,2)
(7,34,2)
(3,28,2)
(21,37,2)
(7,4,2)
(30,4,2)
(52,4,2)
(24,37,2)
(25,4,2)
(11,38,2)
(5,50,2)
(54,4,2)
(28,24,2)
(7,50,2)
(29,4,2)
(32,4,2)
(36,50,2)
(8,50,2)
(10,4,2)
(50,7,2)
(44,37,2)
(34,27,2)
(13,38,2)
(45,38,2)
(12,50,2)
(17,37,2)
-----------------------------------
(0,1)
(1,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(2,inputBuffer)
(3,count = atoi(inputBuffer)
(4,staticFive==5)
(5,i)
(6,count)
(7,(size_t)
(8,printLine("Hello")
(9,if(staticFive==5)
(10,i = 0)
(11,inputBuffer)
(12,i)
(13,"fgets()
(14,)
(15,inputBuffer)
(16,)
(17,NULL)
(18,"Hello")
(19,)
(20,"")
(21,inputBuffer)
(22,if(staticFive==5)
(23,staticFive)
(24,inputBuffer[CHAR_ARRAY_SIZE] = "")
(25,i = 0)
(26,)
(27,-1)
(28,atoi(inputBuffer)
(29,0)
(30,0)
(31,)
(32,count)
(33,staticFive)
(34,count = -1)
(35,size_t)
(36,i++)
(37,staticFive==5)
(38,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(39,count)
(40,i)
(41,stdin)
(42,for (i = 0; i < (size_t)
(43,5)
(44,CHAR_ARRAY_SIZE)
(45,printLine("fgets()
(46,RET)
(47,)
(48,)
(49,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(50,i < (size_t)
(51,count)
(52,i)
(53,5)
(54,i)
(55,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^