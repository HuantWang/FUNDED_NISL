-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
62,63
62,64
63,64
65,66
66,67
66,68
67,68
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,41,42,48,49,50,51,57,58,59,60,64,68,69,72,74
-----computeFrom-----
14,15
14,16
24,25
24,26
36,37
36,38
44,45
44,46
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(32,27,0)
(2,38,0)
(33,19,0)
(25,37,0)
(22,11,0)
(12,29,0)
(19,33,0)
(10,28,0)
(28,10,0)
(31,22,0)
(11,22,0)
(38,24,0)
(3,19,0)
(24,27,0)
(38,2,0)
(23,30,0)
(26,3,0)
(28,24,0)
(11,2,0)
(9,38,0)
(6,30,0)
(10,32,0)
(2,11,0)
(0,29,0)
(1,12,0)
(8,10,0)
(21,37,0)
(34,11,0)
(3,24,0)
(24,38,0)
(38,9,0)
(20,27,0)
(12,20,0)
(14,29,0)
(33,27,0)
(37,30,0)
(16,28,0)
(29,12,0)
(29,24,0)
(13,28,0)
(19,3,0)
(15,24,0)
(4,20,0)
(5,30,0)
(36,3,0)
(35,32,0)
(15,18,1)
(17,7,1)
(26,20,1)
(19,3,1)
(29,0,1)
(38,2,1)
(10,8,1)
(35,10,1)
(33,19,1)
(20,4,1)
(28,16,1)
(12,29,1)
(22,31,1)
(24,38,1)
(34,15,1)
(29,24,1)
(37,25,1)
(12,1,1)
(4,12,1)
(18,37,1)
(28,24,1)
(25,21,1)
(3,36,1)
(36,26,1)
(31,34,1)
(0,14,1)
(2,11,1)
(16,13,1)
(38,9,1)
(11,22,1)
(1,29,1)
(10,28,1)
(7,33,1)
(8,28,1)
(7,18,1)
(14,32,1)
(32,35,1)
(3,24,1)
(13,24,1)
(19,18,2)
(20,18,2)
(10,28,2)
(19,3,2)
(36,18,2)
(34,18,2)
(32,18,2)
(12,29,2)
(24,18,2)
(24,38,2)
(28,24,2)
(4,18,2)
(31,18,2)
(29,18,2)
(3,24,2)
(29,24,2)
(14,18,2)
(38,9,2)
(10,18,2)
(33,19,2)
(28,18,2)
(0,18,2)
(16,18,2)
(13,18,2)
(35,18,2)
(22,18,2)
(38,2,2)
(1,18,2)
(8,18,2)
(11,18,2)
(12,18,2)
(38,18,2)
(26,18,2)
(15,18,2)
(11,22,2)
(33,18,2)
(2,11,2)
(3,18,2)
(2,18,2)
-----------------------------------
(0,0)
(1,intTwo)
(2,ALLOCA(100*sizeof(twoIntsStruct)
(3,data[0])
(4,0)
(5,data)
(6,if(STATIC_CONST_TRUE)
(7,STATIC_CONST_TRUE)
(8,intOne)
(9,twoIntsStruct *)
(10,data[0].intOne)
(11,100*sizeof(twoIntsStruct)
(12,data[0].intTwo)
(13,data)
(14,data)
(15,data)
(16,0)
(17,RET)
(18,STATIC_CONST_TRUE)
(19,&data[0])
(20,data[0].intTwo = 0)
(21,data)
(22,sizeof(twoIntsStruct)
(23,if(STATIC_CONST_TRUE)
(24,data = (twoIntsStruct *)
(25,NULL)
(26,data)
(27,)
(28,data[0])
(29,data[0])
(30,)
(31,twoIntsStruct)
(32,data[0].intOne = 0)
(33,printStructLine(&data[0])
(34,100)
(35,0)
(36,0)
(37,data = NULL)
(38,(twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^