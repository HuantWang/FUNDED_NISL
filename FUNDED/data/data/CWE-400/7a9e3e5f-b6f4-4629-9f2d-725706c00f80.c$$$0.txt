-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_15_bad()
{
    char * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
74,75
74,76
76,77
76,78
76,79
76,80
76,81
76,82
77,78
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,66,67,71,72,73,75,78,79,80,81,85,86,87
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_15_bad(){    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__char_calloc_15_bad()
CWE401_Memory_Leak__char_calloc_15_bad
{    char * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(13,0,0)
(27,0,0)
(2,19,0)
(15,26,0)
(30,0,0)
(22,13,0)
(32,5,0)
(20,0,0)
(44,3,0)
(10,19,0)
(38,10,0)
(43,26,0)
(45,6,0)
(1,17,0)
(42,1,0)
(31,7,0)
(17,7,0)
(7,31,0)
(25,40,0)
(17,0,0)
(36,25,0)
(39,1,0)
(26,11,0)
(28,0,0)
(6,3,0)
(19,7,0)
(35,0,0)
(12,3,0)
(14,3,0)
(4,35,0)
(25,36,0)
(7,19,0)
(34,36,0)
(23,17,0)
(16,11,0)
(7,17,0)
(33,3,0)
(18,35,0)
(5,17,0)
(19,10,0)
(35,17,0)
(29,0,0)
(8,11,0)
(5,0,0)
(37,11,0)
(7,31,1)
(27,5,1)
(1,17,1)
(17,7,1)
(22,41,1)
(43,15,1)
(1,42,1)
(44,6,1)
(38,2,1)
(4,1,1)
(21,44,1)
(25,36,1)
(36,34,1)
(6,45,1)
(26,43,1)
(10,38,1)
(30,13,1)
(5,32,1)
(7,19,1)
(5,17,1)
(35,18,1)
(9,30,1)
(19,10,1)
(13,22,1)
(42,39,1)
(32,35,1)
(23,41,1)
(35,17,1)
(34,1,1)
(45,9,1)
(4,25,1)
(2,23,1)
(9,27,1)
(21,14,1)
(39,17,1)
(18,4,1)
(14,9,1)
(41,26,1)
(34,1,2)
(7,31,2)
(10,41,2)
(1,41,2)
(5,41,2)
(27,41,2)
(1,17,2)
(36,1,2)
(19,10,2)
(30,41,2)
(22,41,2)
(35,17,2)
(32,41,2)
(44,9,2)
(4,41,2)
(7,19,2)
(13,41,2)
(45,9,2)
(19,41,2)
(7,41,2)
(6,9,2)
(2,41,2)
(18,41,2)
(25,36,2)
(5,17,2)
(42,41,2)
(17,41,2)
(25,1,2)
(17,7,2)
(35,41,2)
(14,9,2)
(23,41,2)
(38,41,2)
(39,41,2)
-----------------------------------
(0,)
(1,data == NULL)
(2,100)
(3,)
(4,data)
(5,printLine(data)
(6,printLine("Benign, fixed string")
(7,(char *)
(8,switch(7)
(9,7)
(10,sizeof(char)
(11,)
(12,case 7:)
(13,printLine("Benign, fixed string")
(14,break;)
(15,data)
(16,data)
(17,data = (char *)
(18,"A String")
(19,calloc(100, sizeof(char)
(20,case 6:)
(21,RET)
(22,"Benign, fixed string")
(23,data)
(24, sizeof(char)
(25,exit(-1)
(26,data = NULL)
(27,break;)
(28,if (data == NULL)
(29,default:)
(30,break;)
(31,char *)
(32,data)
(33,default:)
(34,1)
(35,strcpy(data, "A String")
(36,-1)
(37,switch(6)
(38,char)
(39,data)
(40,)
(41,6)
(42,NULL)
(43,NULL)
(44,break;)
(45,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^