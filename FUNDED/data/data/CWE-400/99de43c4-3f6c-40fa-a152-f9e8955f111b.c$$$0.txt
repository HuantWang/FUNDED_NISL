-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_for_loop_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
55,57
56,57
57,58
59,60
61,62
61,63
62,63
63,64
63,65
65,66
65,67
67,68
68,69
69,70
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
80,82
80,83
80,84
81,82
82,83
82,84
83,84
86,87
86,88
87,88
89,90
89,91
90,91
90,92
91,92
94,95
96,97
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,53,58,60,64,66,70,75,77,79,84,85,88,92,93,95,98,103,104
-----computeFrom-----
32,33
32,34
48,49
48,50
55,56
55,57
82,83
82,84
86,87
86,88
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_for_loop_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__rand_for_loop_32_bad()
CWE400_Resource_Exhaustion__rand_for_loop_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(30,16,0)
(42,49,0)
(18,10,0)
(28,43,0)
(41,16,0)
(43,45,0)
(36,35,0)
(54,46,0)
(45,43,0)
(47,51,0)
(36,0,0)
(13,16,0)
(5,52,0)
(15,36,0)
(12,25,0)
(2,51,0)
(0,10,0)
(26,27,0)
(26,31,0)
(1,16,0)
(39,43,0)
(37,30,0)
(6,32,0)
(38,9,0)
(19,6,0)
(31,32,0)
(9,25,0)
(8,35,0)
(40,31,0)
(26,0,0)
(46,29,0)
(35,16,0)
(14,30,0)
(17,25,0)
(11,12,0)
(49,16,0)
(7,37,0)
(43,49,0)
(44,18,0)
(39,49,0)
(10,16,0)
(52,25,0)
(33,4,0)
(27,26,0)
(4,35,0)
(31,26,0)
(51,18,0)
(52,39,0)
(12,11,0)
(20,12,0)
(50,18,0)
(11,49,0)
(48,32,0)
(22,39,0)
(24,11,0)
(30,37,0)
(25,9,0)
(0,36,0)
(25,16,0)
(34,26,0)
(3,0,0)
(21,10,0)
(53,32,0)
(35,4,0)
(32,48,1)
(30,37,1)
(36,35,1)
(15,3,1)
(22,52,1)
(25,9,1)
(26,27,1)
(46,54,1)
(12,25,1)
(23,31,1)
(24,30,1)
(8,25,1)
(6,19,1)
(45,28,1)
(6,32,1)
(14,35,1)
(33,8,1)
(39,43,1)
(48,53,1)
(40,32,1)
(53,51,1)
(52,25,1)
(5,43,1)
(34,40,1)
(11,12,1)
(47,0,1)
(19,46,1)
(52,5,1)
(26,0,1)
(9,38,1)
(36,15,1)
(40,6,1)
(28,11,1)
(51,2,1)
(35,4,1)
(38,17,1)
(12,20,1)
(31,32,1)
(39,22,1)
(2,47,1)
(4,33,1)
(3,39,1)
(54,31,1)
(20,24,1)
(7,14,1)
(0,36,1)
(26,34,1)
(31,26,1)
(37,7,1)
(43,45,1)
(54,31,2)
(52,25,2)
(12,25,2)
(19,31,2)
(34,31,2)
(31,26,2)
(43,45,2)
(26,27,2)
(25,9,2)
(26,0,2)
(26,31,2)
(40,31,2)
(46,31,2)
(31,31,2)
(35,4,2)
(36,35,2)
(39,43,2)
(6,31,2)
(31,32,2)
(0,36,2)
(6,32,2)
(11,12,2)
(30,37,2)
-----------------------------------
(0,count = *countPtr2)
(1,count)
(2,0)
(3,count)
(4,&count)
(5,countPtr1)
(6,i++)
(7,1)
(8,countPtr2)
(9,&count)
(10,)
(11,count = *countPtr1)
(12,*countPtr1)
(13,countPtr2)
(14,count)
(15,countPtr2)
(16,)
(17,countPtr1)
(18,)
(19,i)
(20,countPtr1)
(21,count)
(22,count)
(23,RET)
(24,count)
(25,*countPtr1 = &count)
(26,(size_t)
(27,size_t)
(28,count)
(29,)
(30,count = -1)
(31,i < (size_t)
(32,i = 0)
(33,count)
(34,count)
(35,*countPtr2 = &count)
(36,*countPtr2)
(37,-1)
(38,count)
(39,*countPtr1 = count)
(40,i)
(41,countPtr1)
(42,count)
(43,count = RAND32()
(44,i)
(45,RAND32()
(46,printLine("Hello")
(47,i)
(48,0)
(49,)
(50,for (i = 0; i < (size_t)
(51,i = 0)
(52,*countPtr1)
(53,i)
(54,"Hello")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^