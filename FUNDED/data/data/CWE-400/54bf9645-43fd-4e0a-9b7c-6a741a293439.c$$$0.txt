-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    data = NULL;
    if(globalFive==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
60,61
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,40,41,45,47,48,52,54,58,59,61
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
36,37
36,38
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    char * data;    data = NULL;    if(globalFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    char * data;    data = NULL;    if(globalFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(28,15,0)
(4,15,0)
(1,2,0)
(2,15,0)
(21,28,0)
(19,17,0)
(25,12,0)
(13,0,0)
(12,14,0)
(4,2,0)
(24,4,0)
(22,13,0)
(23,11,0)
(2,13,0)
(10,9,0)
(16,3,0)
(18,9,0)
(5,17,0)
(0,13,0)
(8,9,0)
(7,11,0)
(3,9,0)
(6,28,0)
(20,14,0)
(13,2,0)
(14,22,0)
(26,3,0)
(14,12,0)
(13,22,0)
(22,14,0)
(28,2,0)
(23,7,1)
(11,23,1)
(17,19,1)
(12,25,1)
(5,3,1)
(19,5,1)
(25,20,1)
(3,16,1)
(20,1,1)
(1,17,1)
(4,24,1)
(14,12,1)
(22,14,1)
(27,11,1)
(28,2,1)
(6,21,1)
(7,4,1)
(21,2,1)
(24,28,1)
(4,2,1)
(13,0,1)
(7,17,1)
(28,6,1)
(16,26,1)
(2,13,1)
(13,22,1)
(14,17,2)
(22,14,2)
(12,17,2)
(4,17,2)
(28,2,2)
(2,13,2)
(14,12,2)
(25,17,2)
(1,17,2)
(2,17,2)
(22,17,2)
(20,17,2)
(24,17,2)
(13,17,2)
(28,17,2)
(21,17,2)
(13,0,2)
(6,17,2)
(4,2,2)
(13,22,2)
-----------------------------------
(0,char *)
(1,data)
(2,data = (char *)
(3,data = NULL)
(4,printLine(data)
(5,globalFive)
(6,"A String")
(7,globalFive)
(8,data)
(9,)
(10,if(globalFive==5)
(11,globalFive==5)
(12,sizeof(char)
(13,(char *)
(14,100*sizeof(char)
(15,)
(16,NULL)
(17,globalFive==5)
(18,if(globalFive==5)
(19,5)
(20,100)
(21,data)
(22,ALLOCA(100*sizeof(char)
(23,5)
(24,data)
(25,char)
(26,data)
(27,RET)
(28,strcpy(data, "A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^