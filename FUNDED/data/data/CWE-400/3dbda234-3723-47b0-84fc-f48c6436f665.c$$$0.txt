-----label-----
0
-----code-----
static twoIntsStruct * goodG2BSource(twoIntsStruct * data)
{
    /* FIX: Use memory allocated on the stack with ALLOCA */
    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
    /* Initialize and make use of data */
    data[0].intOne = 0;
    data[0].intTwo = 0;
    printStructLine(&data[0]);
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
14,15
15,16
15,17
16,17
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
35,36
35,37
36,37
36,38
37,38
37,39
38,39
43,44
44,45
44,46
45,46
45,47
46,47
46,48
47,48
52,53
53,54
53,55
54,55
56,57
57,58
57,59
58,59
61,62
62,63
-----nextToken-----
3,5,6,9,11,12,17,21,23,26,28,32,33,39,40,41,42,48,49,50,51,55,59,60,63
-----computeFrom-----
15,16
15,17
27,28
27,29
35,36
35,37
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static twoIntsStruct * goodG2BSource(twoIntsStruct * data){    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
static twoIntsStruct
twoIntsStruct
* goodG2BSource(twoIntsStruct * data)
*
goodG2BSource
twoIntsStruct * data
twoIntsStruct
twoIntsStruct
* data
*
data
{    /* FIX: Use memory allocated on the stack with ALLOCA */    data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));    /* Initialize and make use of data */    data[0].intOne = 0;    data[0].intTwo = 0;    printStructLine(&data[0]);    return data;}
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
return data;
data
data
-----joern-----
(6,16,0)
(25,1,0)
(29,24,0)
(30,2,0)
(32,9,0)
(16,11,0)
(9,15,0)
(17,2,0)
(13,10,0)
(3,26,0)
(26,14,0)
(28,25,0)
(11,16,0)
(5,20,0)
(20,9,0)
(15,16,0)
(25,15,0)
(9,20,0)
(14,26,0)
(27,17,0)
(0,4,0)
(24,1,0)
(9,1,0)
(18,0,0)
(24,15,0)
(15,2,0)
(11,14,0)
(15,1,0)
(12,24,0)
(10,25,0)
(23,25,0)
(0,1,0)
(24,2,0)
(10,13,0)
(22,9,0)
(7,4,0)
(4,30,0)
(19,14,0)
(21,30,0)
(16,15,0)
(25,10,0)
(0,15,0)
(31,0,0)
(4,0,0)
(16,6,0)
(14,11,0)
(13,2,0)
(20,17,0)
(8,15,0)
(12,24,1)
(24,1,1)
(9,1,1)
(14,26,1)
(11,14,1)
(25,15,1)
(22,15,1)
(16,6,1)
(13,10,1)
(30,21,1)
(28,23,1)
(16,11,1)
(18,17,1)
(0,15,1)
(0,1,1)
(32,22,1)
(20,9,1)
(25,1,1)
(26,3,1)
(20,5,1)
(0,31,1)
(24,29,1)
(15,16,1)
(19,8,1)
(31,18,1)
(10,25,1)
(4,0,1)
(29,13,1)
(3,19,1)
(23,30,1)
(25,28,1)
(24,15,1)
(9,15,1)
(27,20,1)
(9,32,1)
(17,27,1)
(4,7,1)
(21,4,1)
(7,0,1)
(15,1,1)
(5,9,1)
(16,6,2)
(9,1,2)
(12,24,2)
(0,15,2)
(11,14,2)
(25,1,2)
(9,15,2)
(16,11,2)
(25,15,2)
(20,9,2)
(10,25,2)
(15,1,2)
(4,0,2)
(0,1,2)
(24,1,2)
(14,26,2)
(15,16,2)
(13,10,2)
(24,15,2)
-----------------------------------
(0,data[0])
(1,twoIntsStruct * data)
(2,)
(3,twoIntsStruct)
(4,data[0].intTwo)
(5,intOne)
(6,twoIntsStruct *)
(7,intTwo)
(8,data)
(9,data[0])
(10,&data[0])
(11,ALLOCA(100*sizeof(twoIntsStruct)
(12,RET)
(13,printStructLine(&data[0])
(14,100*sizeof(twoIntsStruct)
(15,data = (twoIntsStruct *)
(16,(twoIntsStruct *)
(17,data[0].intOne = 0)
(18,data)
(19,100)
(20,data[0].intOne)
(21,0)
(22,data)
(23,data)
(24,return data;)
(25,data[0])
(26,sizeof(twoIntsStruct)
(27,0)
(28,0)
(29,data)
(30,data[0].intTwo = 0)
(31,0)
(32,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^