-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_18_bad()
{
    goto sink;
sink:
    {
        char * data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (char *)realloc(data, (130000)*sizeof(char));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            strcpy(data, "New String");
            printLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,7,9,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_18_bad(){    goto sink;sink:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_18_bad()
CWE401_Memory_Leak__malloc_realloc_char_18_bad
{    goto sink;sink:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }}
goto sink;
sink
sink:    {        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }
sink
{        char * data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (char *)realloc(data, (130000)*sizeof(char));        if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }    }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)        {            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            strcpy(data, "New String");            printLine(data);            free(data);        }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(27,11,0)
(4,7,0)
(3,44,0)
(48,37,0)
(16,39,0)
(7,37,0)
(0,25,0)
(24,14,0)
(31,14,0)
(23,46,0)
(14,31,0)
(9,44,0)
(3,46,0)
(40,41,0)
(16,27,0)
(34,23,0)
(37,29,0)
(36,41,0)
(2,42,0)
(6,22,0)
(12,26,0)
(46,3,0)
(43,37,0)
(10,46,0)
(15,19,0)
(13,42,0)
(37,23,0)
(42,41,0)
(8,22,0)
(32,29,0)
(23,37,0)
(41,16,0)
(31,5,0)
(21,43,0)
(39,16,0)
(19,11,0)
(32,41,0)
(45,40,0)
(40,29,0)
(28,11,0)
(44,3,0)
(46,41,0)
(26,37,0)
(35,32,0)
(49,29,0)
(7,25,0)
(0,37,0)
(11,19,0)
(18,40,0)
(47,29,0)
(20,0,0)
(1,26,0)
(23,34,0)
(38,7,0)
(29,22,0)
(33,3,0)
(16,41,0)
(46,23,0)
(27,16,0)
(41,29,0)
(30,29,0)
(43,25,0)
(11,27,0)
(36,8,1)
(43,21,1)
(40,41,1)
(26,12,1)
(7,37,1)
(18,42,1)
(13,2,1)
(15,28,1)
(16,39,1)
(20,43,1)
(10,48,1)
(17,0,1)
(44,9,1)
(28,36,1)
(46,41,1)
(23,46,1)
(23,34,1)
(26,37,1)
(37,23,1)
(40,45,1)
(48,32,1)
(21,7,1)
(16,27,1)
(43,37,1)
(32,41,1)
(32,35,1)
(42,13,1)
(0,37,1)
(41,16,1)
(42,41,1)
(3,44,1)
(46,3,1)
(2,41,1)
(11,19,1)
(19,15,1)
(35,40,1)
(14,24,1)
(45,18,1)
(18,31,1)
(9,33,1)
(17,26,1)
(1,37,1)
(7,4,1)
(12,1,1)
(27,11,1)
(38,26,1)
(24,42,1)
(31,14,1)
(4,38,1)
(0,20,1)
(33,10,1)
(4,26,2)
(32,41,2)
(11,19,2)
(31,14,2)
(43,26,2)
(27,11,2)
(14,42,2)
(7,26,2)
(0,26,2)
(23,46,2)
(46,41,2)
(38,26,2)
(40,41,2)
(42,41,2)
(43,37,2)
(26,37,2)
(16,27,2)
(20,26,2)
(41,16,2)
(0,37,2)
(31,42,2)
(16,39,2)
(21,26,2)
(3,44,2)
(23,34,2)
(24,42,2)
(37,23,2)
(7,37,2)
(46,3,2)
-----------------------------------
(0,free(data)
(1,data)
(2,data)
(3,(130000)
(4,"New String")
(5,)
(6,sink:)
(7,strcpy(data, "New String")
(8,goto sink;)
(9,char)
(10,data)
(11,100*sizeof(char)
(12,NULL)
(13,NULL)
(14,-1)
(15,char)
(16,(char *)
(17,RET)
(18,data)
(19,sizeof(char)
(20,data)
(21,data)
(22,)
(23,(char *)
(24,1)
(25,)
(26,data != NULL)
(27,malloc(100*sizeof(char)
(28,100)
(29,)
(30,if (data == NULL)
(31,exit(-1)
(32,printLine(data)
(33,130000)
(34,char *)
(35,data)
(36,data)
(37,data = (char *)
(38,data)
(39,char *)
(40,strcpy(data, "A String")
(41,* data = (char *)
(42,data == NULL)
(43,printLine(data)
(44,sizeof(char)
(45,"A String")
(46,realloc(data, (130000)
(47,data)
(48,data)
(49,if (data != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^