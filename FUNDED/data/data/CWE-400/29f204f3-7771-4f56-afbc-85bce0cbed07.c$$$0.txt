-----label-----
0
-----code-----
static void good2()
{
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            int * tmpData;
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            tmpData = (int *)realloc(data, (130000)*sizeof(int));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
50,51
50,52
53,54
54,55
54,56
55,56
55,57
56,57
60,61
61,62
61,63
62,63
64,65
64,66
65,66
68,69
69,70
69,71
70,71
72,73
72,74
73,74
73,75
75,76
77,78
77,79
77,80
78,79
80,81
82,83
82,84
83,84
85,86
86,87
86,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
95,98
96,97
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
113,114
113,115
114,115
117,118
118,119
118,120
119,120
121,122
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,49,51,52,57,58,59,63,66,67,71,74,76,79,81,84,87,88,92,94,99,101,106,107,108,112,115,116,120,122
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
54,55
54,56
69,70
69,71
82,83
82,84
90,91
90,92
97,98
97,99
103,104
103,105
-----guardedBy-----
92,101
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(GLOBAL_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(GLOBAL_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }}
if(GLOBAL_CONST_FIVE==5)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            int * tmpData;            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            tmpData = (int *)realloc(data, (130000)*sizeof(int));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }            free(data);        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(27,44,0)
(54,25,0)
(63,23,0)
(40,59,0)
(33,40,0)
(60,57,0)
(12,44,0)
(32,63,0)
(11,15,0)
(46,59,0)
(0,58,0)
(40,61,0)
(36,23,0)
(2,49,0)
(53,12,0)
(54,62,0)
(19,49,0)
(44,41,0)
(7,40,0)
(35,2,0)
(24,1,0)
(32,37,0)
(17,23,0)
(34,62,0)
(47,37,0)
(39,37,0)
(51,39,0)
(6,32,0)
(28,31,0)
(49,2,0)
(31,28,0)
(5,44,0)
(42,17,0)
(5,17,0)
(62,54,0)
(10,15,0)
(59,41,0)
(28,58,0)
(40,37,0)
(1,17,0)
(43,42,0)
(30,56,0)
(39,17,0)
(22,0,0)
(44,58,0)
(58,23,0)
(63,32,0)
(55,17,0)
(61,40,0)
(18,0,0)
(16,57,0)
(29,28,0)
(58,28,0)
(28,29,0)
(52,32,0)
(26,58,0)
(42,43,0)
(38,23,0)
(45,23,0)
(61,41,0)
(37,23,0)
(64,39,0)
(8,42,0)
(13,1,0)
(40,44,0)
(4,44,0)
(42,8,0)
(3,16,0)
(23,14,0)
(48,12,0)
(9,31,0)
(2,8,0)
(57,16,0)
(20,5,0)
(50,23,0)
(12,59,0)
(32,17,0)
(17,42,0)
(31,16,0)
(16,31,0)
(5,23,0)
(8,2,0)
(31,17,0)
(19,35,1)
(26,63,1)
(37,47,1)
(12,44,1)
(40,44,1)
(64,51,1)
(60,3,1)
(20,0,1)
(40,37,1)
(49,19,1)
(0,58,1)
(6,52,1)
(15,10,1)
(1,17,1)
(62,34,1)
(39,64,1)
(55,15,1)
(40,59,1)
(51,1,1)
(53,48,1)
(52,37,1)
(44,58,1)
(61,40,1)
(7,33,1)
(40,7,1)
(33,59,1)
(13,17,1)
(10,11,1)
(44,27,1)
(2,49,1)
(24,13,1)
(16,57,1)
(20,61,1)
(5,20,1)
(57,60,1)
(51,54,1)
(21,5,1)
(42,8,1)
(4,0,1)
(46,12,1)
(32,17,1)
(31,17,1)
(32,6,1)
(35,55,1)
(21,15,1)
(0,22,1)
(47,39,1)
(63,32,1)
(28,31,1)
(8,2,1)
(58,28,1)
(32,37,1)
(28,29,1)
(54,62,1)
(12,53,1)
(42,43,1)
(5,17,1)
(31,16,1)
(3,9,1)
(39,17,1)
(17,42,1)
(1,24,1)
(48,44,1)
(18,58,1)
(9,26,1)
(34,1,1)
(5,44,1)
(59,46,1)
(22,18,1)
(27,4,1)
(59,0,2)
(32,37,2)
(17,42,2)
(63,15,2)
(42,8,2)
(5,44,2)
(18,15,2)
(49,15,2)
(39,17,2)
(8,15,2)
(52,15,2)
(16,15,2)
(64,15,2)
(28,29,2)
(9,15,2)
(60,15,2)
(40,37,2)
(39,15,2)
(19,15,2)
(32,15,2)
(54,1,2)
(47,15,2)
(1,15,2)
(31,17,2)
(4,0,2)
(40,0,2)
(31,15,2)
(0,58,2)
(22,15,2)
(40,44,2)
(62,1,2)
(61,0,2)
(42,43,2)
(24,15,2)
(13,15,2)
(5,17,2)
(33,0,2)
(53,0,2)
(16,57,2)
(2,49,2)
(51,15,2)
(63,32,2)
(61,40,2)
(1,17,2)
(5,15,2)
(54,62,2)
(12,44,2)
(44,0,2)
(12,0,2)
(31,16,2)
(32,17,2)
(57,15,2)
(7,0,2)
(55,15,2)
(40,59,2)
(28,31,2)
(42,15,2)
(34,1,2)
(6,15,2)
(35,15,2)
(2,15,2)
(3,15,2)
(37,15,2)
(17,15,2)
(46,0,2)
(27,0,2)
(48,0,2)
(0,15,2)
(20,15,2)
(8,2,2)
(58,28,2)
(58,15,2)
(28,15,2)
(44,58,2)
(26,15,2)
-----------------------------------
(0,tmpData != NULL)
(1,data == NULL)
(2,100*sizeof(int)
(3,130000)
(4,data)
(5,free(data)
(6,0)
(7,0)
(8,malloc(100*sizeof(int)
(9,data)
(10,5)
(11,GLOBAL_CONST_FIVE)
(12,data[0])
(13,data)
(14,)
(15,GLOBAL_CONST_FIVE==5)
(16,(130000)
(17,* data = (int *)
(18,tmpData)
(19,int)
(20,data)
(21,RET)
(22,NULL)
(23,)
(24,NULL)
(25,)
(26,tmpData)
(27,tmpData)
(28,(int *)
(29,int *)
(30,if(GLOBAL_CONST_FIVE==5)
(31,realloc(data, (130000)
(32,data[0])
(33,data)
(34,1)
(35,100)
(36,data)
(37,data[0] = 5)
(38,if (data == NULL)
(39,data[0])
(40,data[0])
(41,)
(42,(int *)
(43,int *)
(44,data = tmpData)
(45,if (tmpData != NULL)
(46,10)
(47,5)
(48,data)
(49,sizeof(int)
(50,tmpData)
(51,data)
(52,data)
(53,0)
(54,exit(-1)
(55,data)
(56,)
(57,sizeof(int)
(58,tmpData = (int *)
(59,data[0] = 10)
(60,int)
(61,printIntLine(data[0])
(62,-1)
(63,printIntLine(data[0])
(64,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^