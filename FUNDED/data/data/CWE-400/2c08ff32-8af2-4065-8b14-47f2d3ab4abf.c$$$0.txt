-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
62,63
62,64
62,65
63,64
64,65
66,67
67,68
68,69
68,70
69,70
72,73
73,74
73,75
74,75
75,76
75,77
76,77
78,79
78,80
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
92,93
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
99,100
99,101
100,101
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
112,113
113,114
114,115
114,116
115,116
-----nextToken-----
2,4,8,10,14,16,20,25,27,30,32,37,39,41,43,45,50,53,55,60,61,65,70,71,77,79,81,86,87,90,91,97,98,101,105,106,108,111,116,117
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
83,84
83,85
84,85
84,86
88,89
88,90
95,96
95,97
99,100
99,101
-----guardedBy-----
39,55
90,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(42,18,0)
(29,40,0)
(54,7,0)
(24,56,0)
(26,48,0)
(17,62,0)
(31,5,0)
(35,62,0)
(39,44,0)
(51,44,0)
(56,4,0)
(5,46,0)
(41,7,0)
(58,52,0)
(25,0,0)
(33,40,0)
(12,2,0)
(62,46,0)
(7,41,0)
(34,53,0)
(21,38,0)
(25,39,0)
(43,27,0)
(7,39,0)
(40,0,0)
(46,56,0)
(55,62,0)
(11,5,0)
(49,46,0)
(37,26,0)
(0,25,0)
(63,25,0)
(19,38,0)
(40,39,0)
(43,7,0)
(47,23,0)
(62,17,0)
(28,42,0)
(0,40,0)
(11,45,0)
(44,39,0)
(40,11,0)
(13,38,0)
(60,21,0)
(32,56,0)
(7,43,0)
(25,11,0)
(1,27,0)
(3,46,0)
(50,25,0)
(10,2,0)
(22,11,0)
(38,57,0)
(20,17,0)
(9,62,0)
(53,27,0)
(14,43,0)
(59,2,0)
(15,47,0)
(30,39,0)
(39,2,0)
(61,27,0)
(5,11,0)
(8,21,0)
(7,11,0)
(53,34,1)
(7,39,1)
(43,7,1)
(44,51,1)
(29,33,1)
(36,6,1)
(47,15,1)
(26,37,1)
(33,21,1)
(8,36,1)
(7,11,1)
(27,1,1)
(25,11,1)
(11,5,1)
(62,9,1)
(5,46,1)
(43,27,1)
(16,43,1)
(36,42,1)
(21,60,1)
(14,53,1)
(0,25,1)
(31,22,1)
(37,43,1)
(34,26,1)
(35,46,1)
(17,62,1)
(42,28,1)
(7,41,1)
(9,55,1)
(49,3,1)
(7,54,1)
(22,17,1)
(0,40,1)
(55,35,1)
(5,31,1)
(63,50,1)
(61,0,1)
(20,62,1)
(16,47,1)
(3,6,1)
(40,29,1)
(50,40,1)
(25,63,1)
(51,30,1)
(62,46,1)
(16,0,1)
(17,20,1)
(46,49,1)
(15,36,1)
(40,11,1)
(14,27,1)
(28,17,1)
(40,39,1)
(36,11,1)
(60,8,1)
(54,14,1)
(39,44,1)
(1,61,1)
(53,27,1)
(25,39,1)
(6,39,1)
(14,43,2)
(55,6,2)
(53,27,2)
(0,36,2)
(40,39,2)
(1,0,2)
(34,43,2)
(39,44,2)
(63,40,2)
(7,41,2)
(3,6,2)
(11,5,2)
(7,39,2)
(43,7,2)
(47,36,2)
(7,43,2)
(7,11,2)
(40,36,2)
(0,25,2)
(61,0,2)
(62,46,2)
(43,0,2)
(25,39,2)
(35,6,2)
(43,43,2)
(29,36,2)
(37,43,2)
(21,36,2)
(7,0,2)
(20,6,2)
(17,62,2)
(60,36,2)
(15,36,2)
(0,40,2)
(54,0,2)
(49,6,2)
(42,17,2)
(22,17,2)
(53,43,2)
(54,43,2)
(5,46,2)
(26,43,2)
(40,11,2)
(31,17,2)
(11,17,2)
(25,40,2)
(62,6,2)
(17,6,2)
(25,11,2)
(5,17,2)
(27,0,2)
(46,6,2)
(33,36,2)
(50,40,2)
(8,36,2)
(28,17,2)
(9,6,2)
(43,27,2)
(14,0,2)
-----------------------------------
(0,count > 0 && count <= 20)
(1,0)
(2,)
(3,inputBuffer)
(4,)
(5,atoi(inputBuffer)
(6,globalReturnsTrue()
(7,(size_t)
(8,i)
(9,stdin)
(10,if(globalReturnsFalse()
(11,count = atoi(inputBuffer)
(12,if(globalReturnsTrue()
(13,if (count > 0 && count <= 20)
(14,i)
(15,"Benign, fixed string")
(16,RET)
(17,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(18,)
(19,i)
(20,NULL)
(21,i = 0)
(22,count)
(23,)
(24,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,count <= 20)
(26,printLine("Hello")
(27,i = 0)
(28,"fgets()
(29,0)
(30,count)
(31,inputBuffer)
(32,inputBuffer)
(33,count)
(34,i)
(35,inputBuffer)
(36,globalReturnsFalse()
(37,"Hello")
(38,)
(39,count = -1)
(40,count > 0)
(41,size_t)
(42,printLine("fgets()
(43,i < (size_t)
(44,-1)
(45,)
(46,inputBuffer[CHAR_ARRAY_SIZE] = "")
(47,printLine("Benign, fixed string")
(48,)
(49,"")
(50,count)
(51,1)
(52,)
(53,i++)
(54,count)
(55,CHAR_ARRAY_SIZE)
(56,)
(57,)
(58,for (i = 0; i < (size_t)
(59,count)
(60,0)
(61,i)
(62,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(63,20)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^