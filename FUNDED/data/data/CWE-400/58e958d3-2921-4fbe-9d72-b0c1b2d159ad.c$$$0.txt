-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
21,24
21,25
22,23
24,25
27,28
28,29
30,31
30,32
32,33
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
51,52
51,53
52,53
52,54
53,54
56,57
58,59
59,60
61,62
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,8,10,14,16,18,23,25,26,29,31,37,39,41,46,47,50,54,55,57,60,65,66
-----computeFrom-----
12,13
12,14
44,45
44,46
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_02_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
1
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,25,0)
(15,5,0)
(34,1,0)
(30,15,0)
(36,35,0)
(20,1,0)
(22,0,0)
(31,15,0)
(15,30,0)
(16,27,0)
(16,25,0)
(23,35,0)
(3,10,0)
(21,10,0)
(1,17,0)
(13,16,0)
(35,36,0)
(25,16,0)
(2,10,0)
(35,23,0)
(12,17,0)
(35,15,0)
(26,17,0)
(6,21,0)
(24,35,0)
(8,5,0)
(11,30,0)
(25,15,0)
(17,18,0)
(9,5,0)
(7,5,0)
(36,10,0)
(4,16,0)
(0,32,0)
(28,36,0)
(28,21,1)
(10,2,1)
(19,15,1)
(35,15,1)
(20,33,1)
(6,0,1)
(15,30,1)
(14,4,1)
(33,19,1)
(0,22,1)
(2,3,1)
(1,34,1)
(29,36,1)
(16,25,1)
(21,6,1)
(28,10,1)
(33,16,1)
(30,11,1)
(22,36,1)
(21,10,1)
(4,13,1)
(35,23,1)
(36,35,1)
(29,33,1)
(13,19,1)
(36,10,1)
(24,28,1)
(25,14,1)
(25,15,1)
(35,24,1)
(3,1,1)
(11,31,1)
(34,20,1)
(28,33,2)
(35,36,2)
(21,10,2)
(3,33,2)
(16,25,2)
(21,36,2)
(4,19,2)
(24,36,2)
(36,36,2)
(25,15,2)
(15,30,2)
(36,35,2)
(24,33,2)
(0,36,2)
(35,15,2)
(16,19,2)
(2,33,2)
(6,36,2)
(13,19,2)
(35,33,2)
(25,19,2)
(22,36,2)
(10,33,2)
(35,23,2)
(14,19,2)
(34,33,2)
(36,33,2)
(1,33,2)
(20,33,2)
(28,36,2)
(36,10,2)
-----------------------------------
(0,printLine("Hello")
(1,i = 0)
(2,0)
(3,i)
(4,"%d")
(5,)
(6,i)
(7,if(1)
(8,count)
(9,if(1)
(10,i = 0)
(11,1)
(12,for (i = 0; i < (size_t)
(13,stdin)
(14,count)
(15,count = -1)
(16,fscanf(stdin, "%d", &count)
(17,)
(18,)
(19,1)
(20,i)
(21,i++)
(22,"Hello")
(23,size_t)
(24,count)
(25,&count)
(26,i)
(27,)
(28,i)
(29,RET)
(30,-1)
(31,count)
(32,)
(33,1)
(34,0)
(35,(size_t)
(36,i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^