-----label-----
0
-----code-----
static void goodB2G2()
{
    twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
89,90
90,91
90,92
91,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,84,87,92,94
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(50,18,0)
(7,5,0)
(37,3,0)
(34,45,0)
(22,28,0)
(43,27,0)
(2,25,0)
(11,27,0)
(17,38,0)
(14,12,0)
(6,10,0)
(24,44,0)
(31,8,0)
(38,17,0)
(10,1,0)
(0,27,0)
(40,11,0)
(8,12,0)
(27,44,0)
(27,10,0)
(28,44,0)
(42,38,0)
(30,6,0)
(33,17,0)
(10,27,0)
(46,41,0)
(13,45,0)
(41,11,0)
(45,13,0)
(47,11,0)
(13,16,0)
(6,30,0)
(35,25,0)
(12,25,0)
(1,10,0)
(3,28,0)
(42,44,0)
(30,5,0)
(18,3,0)
(26,43,0)
(3,18,0)
(5,30,0)
(17,27,0)
(10,6,0)
(21,49,0)
(19,30,0)
(8,39,0)
(48,17,0)
(41,49,0)
(49,44,0)
(38,42,0)
(4,25,0)
(36,12,0)
(15,18,0)
(32,6,0)
(6,12,0)
(8,27,0)
(11,41,0)
(18,27,0)
(29,43,0)
(18,27,1)
(7,19,1)
(13,45,1)
(8,27,1)
(40,13,1)
(28,22,1)
(17,27,1)
(17,48,1)
(9,12,1)
(11,47,1)
(15,49,1)
(38,17,1)
(49,21,1)
(48,33,1)
(29,27,1)
(43,27,1)
(3,18,1)
(33,28,1)
(26,29,1)
(0,9,1)
(45,34,1)
(42,38,1)
(37,18,1)
(6,12,1)
(32,0,1)
(6,30,1)
(3,37,1)
(23,8,1)
(20,42,1)
(5,7,1)
(19,32,1)
(46,11,1)
(50,15,1)
(10,1,1)
(11,27,1)
(31,20,1)
(12,14,1)
(27,10,1)
(14,36,1)
(22,3,1)
(30,5,1)
(23,20,1)
(21,41,1)
(41,11,1)
(34,43,1)
(47,40,1)
(8,12,1)
(20,9,1)
(43,26,1)
(41,46,1)
(40,43,1)
(18,50,1)
(10,6,1)
(8,31,1)
(47,9,2)
(18,27,2)
(6,12,2)
(8,12,2)
(50,9,2)
(48,9,2)
(8,20,2)
(46,9,2)
(18,9,2)
(29,9,2)
(43,9,2)
(3,9,2)
(32,9,2)
(40,9,2)
(10,1,2)
(5,9,2)
(6,9,2)
(6,30,2)
(3,18,2)
(27,10,2)
(41,11,2)
(42,38,2)
(43,27,2)
(19,9,2)
(31,20,2)
(33,9,2)
(28,9,2)
(17,9,2)
(21,9,2)
(10,9,2)
(10,6,2)
(8,27,2)
(13,45,2)
(13,43,2)
(38,9,2)
(30,9,2)
(15,9,2)
(41,9,2)
(45,43,2)
(11,27,2)
(27,9,2)
(38,17,2)
(37,9,2)
(42,9,2)
(34,43,2)
(17,27,2)
(11,9,2)
(0,9,2)
(49,9,2)
(30,5,2)
(26,9,2)
(7,9,2)
(22,9,2)
-----------------------------------
(0,data)
(1,twoIntsStruct *)
(2,if(staticTrue)
(3,data[0].intTwo)
(4,data)
(5,sizeof(twoIntsStruct)
(6,realloc(data, 100*sizeof(twoIntsStruct)
(7,twoIntsStruct)
(8,free(data)
(9,staticTrue)
(10,(twoIntsStruct *)
(11,data[0])
(12,data = NULL)
(13,exit(-1)
(14,NULL)
(15,data)
(16,)
(17,data[0])
(18,data[0])
(19,100)
(20,staticTrue)
(21,0)
(22,0)
(23,RET)
(24,if (data == NULL)
(25,)
(26,NULL)
(27,data = (twoIntsStruct *)
(28,data[0].intTwo = 0)
(29,data)
(30,100*sizeof(twoIntsStruct)
(31,data)
(32,data)
(33,data)
(34,1)
(35,if(staticTrue)
(36,data)
(37,intTwo)
(38,&data[0])
(39,)
(40,data)
(41,data[0].intOne)
(42,printStructLine(&data[0])
(43,data == NULL)
(44,)
(45,-1)
(46,intOne)
(47,0)
(48,0)
(49,data[0].intOne = 0)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^