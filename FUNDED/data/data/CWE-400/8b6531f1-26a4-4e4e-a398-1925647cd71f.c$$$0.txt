-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_realloc_14_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
75,76
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,60,62,63,67,69,73,74,76
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
71,72
71,73
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_realloc_14_bad(){    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_realloc_14_bad()
CWE401_Memory_Leak__wchar_t_realloc_14_bad
{    wchar_t * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,18,0)
(29,30,0)
(21,9,0)
(30,29,0)
(9,8,0)
(3,7,0)
(19,1,0)
(28,25,0)
(18,29,0)
(6,26,0)
(13,20,0)
(17,2,0)
(18,0,0)
(24,2,0)
(27,26,0)
(0,18,0)
(25,10,0)
(25,7,0)
(4,21,0)
(11,32,0)
(30,14,0)
(12,29,0)
(2,10,0)
(15,14,0)
(34,20,0)
(23,1,0)
(29,18,0)
(20,1,0)
(14,30,0)
(16,10,0)
(29,20,0)
(5,32,0)
(18,10,0)
(31,1,0)
(22,30,0)
(9,21,0)
(10,7,0)
(15,22,1)
(28,2,1)
(18,29,1)
(28,9,1)
(20,13,1)
(5,26,1)
(33,32,1)
(2,10,1)
(13,34,1)
(26,27,1)
(30,14,1)
(32,11,1)
(18,0,1)
(10,18,1)
(25,10,1)
(12,16,1)
(27,6,1)
(4,2,1)
(9,21,1)
(16,26,1)
(5,25,1)
(17,24,1)
(29,20,1)
(21,4,1)
(25,28,1)
(22,12,1)
(29,30,1)
(14,15,1)
(11,5,1)
(24,10,1)
(6,20,1)
(2,17,1)
(18,26,2)
(12,26,2)
(14,26,2)
(29,26,2)
(10,18,2)
(9,21,2)
(24,26,2)
(2,26,2)
(25,26,2)
(29,20,2)
(28,26,2)
(22,26,2)
(25,10,2)
(18,29,2)
(2,10,2)
(30,26,2)
(17,26,2)
(10,26,2)
(30,14,2)
(4,2,2)
(9,2,2)
(29,30,2)
(15,26,2)
(21,2,2)
(16,26,2)
(18,0,2)
-----------------------------------
(0,wchar_t *)
(1,)
(2,data == NULL)
(3,if (data == NULL)
(4,1)
(5,globalFive)
(6,globalFive)
(7,)
(8,)
(9,exit(-1)
(10,data = (wchar_t *)
(11,5)
(12,data)
(13,NULL)
(14,sizeof(wchar_t)
(15,wchar_t)
(16,data)
(17,NULL)
(18,(wchar_t *)
(19,if(globalFive==5)
(20,data = NULL)
(21,-1)
(22,100)
(23,data)
(24,data)
(25,printWLine(data)
(26,globalFive==5)
(27,5)
(28,data)
(29,realloc(data, 100*sizeof(wchar_t)
(30,100*sizeof(wchar_t)
(31,if(globalFive==5)
(32,globalFive==5)
(33,RET)
(34,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^