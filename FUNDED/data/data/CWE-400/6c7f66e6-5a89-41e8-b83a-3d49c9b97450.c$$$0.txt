-----label-----
1
-----code-----
int fchdir(int fd)
{
	int   status;
	typeof(fchdir) *original_fchdir = dlsym(RTLD_NEXT, "fchdir");

	debug(D_DEBUG, "fchdir from %d.\n", getpid());
	status = original_fchdir(fd);

	if(status == 0)
	{
		struct rmonitor_msg msg;
		char  *newpath = getcwd(NULL, 0);

		msg.type   = CHDIR;

		/* We only send a message when cwd actually changes, so errno is always 0. */
		msg.error  = 0;
		msg.origin = getpid();
		strcpy(msg.data.s, newpath);
		free(newpath);

		send_monitor_msg(&msg);
	}

	return status;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
15,16
16,17
16,18
17,18
18,19
19,20
21,22
21,23
21,24
24,25
25,26
25,27
25,28
26,27
28,29
31,32
32,33
32,34
32,35
32,36
33,34
35,36
38,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
51,52
51,53
52,53
55,56
55,57
55,58
55,59
55,60
55,61
55,62
55,63
56,57
57,58
57,59
58,59
60,61
62,63
63,64
63,65
65,66
65,67
65,68
68,69
69,70
69,71
69,72
70,71
72,73
75,76
76,77
76,78
77,78
77,79
78,79
81,82
83,84
84,85
84,86
85,86
85,87
86,87
90,91
91,92
91,93
92,93
92,94
93,94
96,97
97,98
99,100
100,101
100,102
100,103
101,102
103,104
103,105
104,105
104,106
105,106
109,110
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
122,123
124,125
125,126
-----nextToken-----
2,4,6,8,12,14,20,22,23,27,29,30,34,36,37,40,44,47,49,53,54,59,61,64,66,67,71,73,74,79,80,82,87,88,89,94,95,98,102,106,107,108,110,114,116,120,123,126
-----computeFrom-----
42,43
42,44
51,52
51,53
76,77
76,78
84,85
84,86
91,92
91,93
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;UnaryExpression;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int fchdir(int fd){	int   status;	typeof(fchdir) *original_fchdir = dlsym(RTLD_NEXT, "fchdir");	debug(D_DEBUG, "fchdir from %d.\n", getpid());	status = original_fchdir(fd);	if(status == 0)	{		struct rmonitor_msg msg;		char  *newpath = getcwd(NULL, 0);		msg.type   = CHDIR;		/* We only send a message when cwd actually changes, so errno is always 0. */		msg.error  = 0;		msg.origin = getpid();		strcpy(msg.data.s, newpath);		free(newpath);		send_monitor_msg(&msg);	}	return status;}
int
fchdir(int fd)
fchdir
int fd
int
fd
fd
{	int   status;	typeof(fchdir) *original_fchdir = dlsym(RTLD_NEXT, "fchdir");	debug(D_DEBUG, "fchdir from %d.\n", getpid());	status = original_fchdir(fd);	if(status == 0)	{		struct rmonitor_msg msg;		char  *newpath = getcwd(NULL, 0);		msg.type   = CHDIR;		/* We only send a message when cwd actually changes, so errno is always 0. */		msg.error  = 0;		msg.origin = getpid();		strcpy(msg.data.s, newpath);		free(newpath);		send_monitor_msg(&msg);	}	return status;}
int   status;
int   status;
int
status
status
typeof(fchdir) *original_fchdir = dlsym(RTLD_NEXT, "fchdir");
typeof(fchdir) *original_fchdir = dlsym(RTLD_NEXT, "fchdir");
typeof(fchdir)
(fchdir)
fchdir
fchdir
*original_fchdir = dlsym(RTLD_NEXT, "fchdir")
*
original_fchdir
= dlsym(RTLD_NEXT, "fchdir")
dlsym(RTLD_NEXT, "fchdir")
dlsym
dlsym
RTLD_NEXT
RTLD_NEXT
"fchdir"
debug(D_DEBUG, "fchdir from %d.\n", getpid());
debug(D_DEBUG, "fchdir from %d.\n", getpid())
debug
debug
D_DEBUG
D_DEBUG
"fchdir from %d.\n"
getpid()
getpid
getpid
status = original_fchdir(fd);
status = original_fchdir(fd)
status
status
original_fchdir(fd)
original_fchdir
original_fchdir
fd
fd
if(status == 0)	{		struct rmonitor_msg msg;		char  *newpath = getcwd(NULL, 0);		msg.type   = CHDIR;		/* We only send a message when cwd actually changes, so errno is always 0. */		msg.error  = 0;		msg.origin = getpid();		strcpy(msg.data.s, newpath);		free(newpath);		send_monitor_msg(&msg);	}
status == 0
status
status
0
{		struct rmonitor_msg msg;		char  *newpath = getcwd(NULL, 0);		msg.type   = CHDIR;		/* We only send a message when cwd actually changes, so errno is always 0. */		msg.error  = 0;		msg.origin = getpid();		strcpy(msg.data.s, newpath);		free(newpath);		send_monitor_msg(&msg);	}
struct rmonitor_msg msg;
struct rmonitor_msg msg;
struct rmonitor_msg
rmonitor_msg
msg
msg
char  *newpath = getcwd(NULL, 0);
char  *newpath = getcwd(NULL, 0);
char
*newpath = getcwd(NULL, 0)
*
newpath
= getcwd(NULL, 0)
getcwd(NULL, 0)
getcwd
getcwd
NULL
NULL
0
msg.type   = CHDIR;
msg.type   = CHDIR
msg.type
msg
msg
type
CHDIR
CHDIR
msg.error  = 0;
msg.error  = 0
msg.error
msg
msg
error
0
msg.origin = getpid();
msg.origin = getpid()
msg.origin
msg
msg
origin
getpid()
getpid
getpid
strcpy(msg.data.s, newpath);
strcpy(msg.data.s, newpath)
strcpy
strcpy
msg.data.s
msg.data
msg
msg
data
s
newpath
newpath
free(newpath);
free(newpath)
free
free
newpath
newpath
send_monitor_msg(&msg);
send_monitor_msg(&msg)
send_monitor_msg
send_monitor_msg
&msg
msg
msg
return status;
status
status
-----joern-----
(0,9,0)
(48,19,0)
(34,56,0)
(59,11,0)
(50,25,0)
(19,25,0)
(46,51,0)
(12,18,0)
(18,21,0)
(10,34,0)
(42,56,0)
(18,37,0)
(12,29,0)
(40,27,0)
(11,56,0)
(13,21,0)
(41,58,0)
(47,28,0)
(40,36,0)
(25,9,0)
(53,50,0)
(8,21,0)
(3,42,0)
(54,25,0)
(28,42,0)
(4,45,0)
(57,35,0)
(29,12,0)
(20,56,0)
(58,27,0)
(6,27,0)
(53,51,0)
(37,18,0)
(55,13,0)
(38,59,0)
(19,56,0)
(49,45,0)
(23,59,0)
(5,35,0)
(60,9,0)
(1,28,0)
(22,56,0)
(24,51,0)
(39,37,0)
(13,27,0)
(51,53,0)
(27,21,0)
(43,11,0)
(25,56,0)
(52,37,0)
(35,57,0)
(50,53,0)
(35,21,0)
(30,21,0)
(26,50,0)
(16,40,0)
(27,40,0)
(34,10,0)
(32,17,0)
(14,29,0)
(9,25,0)
(17,32,0)
(50,56,0)
(15,35,0)
(44,10,0)
(45,17,0)
(17,56,0)
(7,58,0)
(31,53,0)
(33,13,0)
(2,12,0)
(6,35,1)
(48,50,1)
(31,51,1)
(53,31,1)
(10,44,1)
(12,29,1)
(13,55,1)
(25,9,1)
(0,54,1)
(16,6,1)
(37,39,1)
(32,45,1)
(42,3,1)
(49,4,1)
(40,16,1)
(18,37,1)
(44,19,1)
(1,47,1)
(59,38,1)
(23,42,1)
(26,53,1)
(24,17,1)
(33,13,1)
(5,18,1)
(19,25,1)
(43,59,1)
(38,23,1)
(3,28,1)
(29,14,1)
(34,10,1)
(55,58,1)
(50,26,1)
(47,25,1)
(4,11,1)
(17,32,1)
(39,52,1)
(12,2,1)
(13,27,1)
(28,1,1)
(9,60,1)
(52,12,1)
(58,7,1)
(58,27,1)
(45,49,1)
(50,25,1)
(35,57,1)
(53,51,1)
(55,34,1)
(2,29,1)
(41,27,1)
(50,53,1)
(57,15,1)
(11,43,1)
(40,36,1)
(46,24,1)
(60,0,1)
(19,48,1)
(54,58,1)
(51,46,1)
(7,41,1)
(27,40,1)
(15,5,1)
(38,58,2)
(11,58,2)
(46,58,2)
(12,29,2)
(34,10,2)
(34,58,2)
(60,58,2)
(40,36,2)
(1,58,2)
(48,58,2)
(53,51,2)
(10,58,2)
(43,58,2)
(13,27,2)
(50,53,2)
(35,57,2)
(24,58,2)
(44,58,2)
(47,58,2)
(17,58,2)
(49,58,2)
(45,58,2)
(19,25,2)
(25,9,2)
(23,58,2)
(28,58,2)
(26,58,2)
(4,58,2)
(53,58,2)
(50,58,2)
(19,58,2)
(50,25,2)
(31,58,2)
(59,58,2)
(33,13,2)
(18,37,2)
(3,58,2)
(9,58,2)
(17,32,2)
(25,58,2)
(32,58,2)
(51,58,2)
(27,40,2)
(54,58,2)
(58,27,2)
(0,58,2)
(42,58,2)
-----------------------------------
(0,NULL)
(1,type)
(2,original_fchdir)
(3,CHDIR)
(4,msg)
(5,D_DEBUG)
(6,status)
(7,0)
(8,status)
(9,getcwd(NULL, 0)
(10,&msg)
(11,msg.error  = 0)
(12,typeof(fchdir)
(13,return status;)
(14,fchdir)
(15,"fchdir from %d.\\n")
(16,fd)
(17,msg.origin = getpid()
(18,typeof(fchdir)
(19,free(newpath)
(20,newpath)
(21,)
(22,msg)
(23,msg)
(24,msg)
(25,*newpath = getcwd(NULL, 0)
(26,newpath)
(27,status = original_fchdir(fd)
(28,msg.type)
(29,typeof(fchdir)
(30,if(status == 0)
(31,s)
(32,getpid()
(33,RET)
(34,send_monitor_msg(&msg)
(35,debug(D_DEBUG, "fchdir from %d.\\n", getpid()
(36,int fd)
(37,dlsym(RTLD_NEXT, "fchdir")
(38,error)
(39,"fchdir")
(40,original_fchdir(fd)
(41,status)
(42,msg.type   = CHDIR)
(43,0)
(44,msg)
(45,msg.origin)
(46,data)
(47,msg)
(48,newpath)
(49,origin)
(50,strcpy(msg.data.s, newpath)
(51,msg.data)
(52,RTLD_NEXT)
(53,msg.data.s)
(54,newpath)
(55,status)
(56,)
(57,getpid()
(58,status == 0)
(59,msg.error)
(60,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^