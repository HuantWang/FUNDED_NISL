-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_good.txt";
        /* FIX: Validate count before using it as the for loop variant to write to a file */
        if (count > 0 && count <= 20)
        {
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
57,58
58,59
58,60
59,60
64,65
65,66
65,67
66,67
70,71
70,72
72,73
72,74
72,75
72,76
72,77
72,78
73,74
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
80,81
80,82
82,83
84,85
85,86
85,87
86,87
88,89
88,90
88,91
91,92
92,93
94,95
95,96
95,97
97,98
97,99
97,100
100,101
102,103
102,104
103,104
103,105
104,105
104,106
105,106
108,109
108,110
109,110
112,113
112,114
112,115
112,116
113,114
114,115
114,116
115,116
117,118
117,119
117,120
118,119
120,121
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
131,132
131,133
132,133
135,136
135,137
135,138
135,139
136,137
137,138
137,139
138,139
141,142
141,143
142,143
144,145
144,146
145,146
145,147
146,147
149,150
151,152
152,153
154,155
155,156
155,157
156,157
156,158
157,158
157,159
158,159
160,161
162,163
162,164
162,165
162,166
162,167
163,164
165,166
167,168
168,169
168,170
171,172
171,173
172,173
174,175
176,177
178,179
179,180
179,181
180,181
183,184
183,185
184,185
186,187
187,188
188,189
188,190
189,190
191,192
195,196
196,197
196,198
197,198
-----nextToken-----
2,4,8,10,14,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,60,61,62,63,67,68,69,71,74,79,81,83,87,89,90,93,96,98,99,101,106,107,110,111,116,119,121,122,126,128,133,134,139,140,143,147,148,150,153,159,161,164,166,169,170,173,175,177,181,182,185,190,192,193,194,198,199,200
-----computeFrom-----
12,13
12,14
34,35
34,36
48,49
48,50
103,104
103,105
104,105
104,106
108,109
108,110
114,115
114,116
124,125
124,126
137,138
137,139
141,142
141,143
156,157
156,158
-----guardedBy-----
39,55
110,150
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_good.txt";        /* FIX: Validate count before using it as the for loop variant to write to a file */        if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)        {            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }            if (pFile)            {                fclose(pFile);            }        }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(36,48,0)
(29,81,0)
(8,7,0)
(12,8,0)
(94,53,0)
(33,37,0)
(18,56,0)
(55,2,0)
(96,23,0)
(37,52,0)
(63,59,0)
(84,20,0)
(71,95,0)
(66,83,0)
(22,27,0)
(17,40,0)
(8,41,0)
(90,98,0)
(53,14,0)
(41,8,0)
(14,53,0)
(85,56,0)
(10,75,0)
(82,52,0)
(86,21,0)
(69,95,0)
(83,66,0)
(19,41,0)
(49,100,0)
(87,21,0)
(104,2,0)
(53,8,0)
(99,63,0)
(68,24,0)
(31,23,0)
(13,66,0)
(11,24,0)
(30,7,0)
(78,53,0)
(38,80,0)
(32,52,0)
(16,46,0)
(6,46,0)
(75,62,0)
(92,18,0)
(107,57,0)
(61,95,0)
(50,63,0)
(89,24,0)
(24,100,0)
(66,24,0)
(42,97,0)
(53,59,0)
(48,56,0)
(9,21,0)
(63,76,0)
(4,27,0)
(76,63,0)
(66,96,0)
(35,59,0)
(106,98,0)
(25,68,0)
(100,24,0)
(47,40,0)
(45,21,0)
(76,98,0)
(57,2,0)
(93,68,0)
(46,56,0)
(53,78,0)
(11,26,0)
(98,59,0)
(103,81,0)
(96,66,0)
(1,70,0)
(56,2,0)
(14,27,0)
(98,8,0)
(66,20,0)
(77,11,0)
(67,66,0)
(51,7,0)
(81,52,0)
(20,66,0)
(100,46,0)
(5,100,0)
(63,8,0)
(79,2,0)
(102,83,0)
(0,56,0)
(15,18,0)
(21,40,0)
(72,52,0)
(28,27,0)
(74,56,0)
(59,108,0)
(60,2,0)
(40,81,0)
(98,76,0)
(34,48,0)
(43,56,0)
(21,86,0)
(23,96,0)
(39,52,0)
(88,44,0)
(73,7,0)
(24,95,0)
(101,38,0)
(91,28,0)
(3,86,0)
(59,44,0)
(44,40,0)
(44,59,0)
(105,14,0)
(99,50,1)
(21,40,1)
(94,105,1)
(40,47,1)
(63,99,1)
(31,14,1)
(28,27,1)
(104,11,1)
(77,54,1)
(14,53,1)
(21,9,1)
(16,6,1)
(106,46,1)
(66,83,1)
(38,101,1)
(87,45,1)
(4,38,1)
(14,27,1)
(100,49,1)
(104,54,1)
(3,21,1)
(64,60,1)
(93,25,1)
(100,46,1)
(11,24,1)
(68,93,1)
(75,10,1)
(104,76,1)
(44,40,1)
(66,20,1)
(101,68,1)
(34,36,1)
(92,58,1)
(25,24,1)
(53,59,1)
(33,65,1)
(27,22,1)
(63,8,1)
(90,106,1)
(15,92,1)
(88,35,1)
(47,17,1)
(105,27,1)
(60,57,1)
(68,24,1)
(1,96,1)
(39,59,1)
(8,41,1)
(49,5,1)
(11,77,1)
(57,107,1)
(65,8,1)
(28,91,1)
(96,23,1)
(23,31,1)
(66,24,1)
(18,15,1)
(53,78,1)
(4,68,1)
(98,8,1)
(44,88,1)
(36,18,1)
(50,98,1)
(41,19,1)
(53,94,1)
(53,8,1)
(64,104,1)
(9,87,1)
(83,102,1)
(102,20,1)
(24,100,1)
(39,75,1)
(5,89,1)
(98,90,1)
(89,76,1)
(86,3,1)
(91,96,1)
(105,28,1)
(58,82,1)
(84,67,1)
(63,59,1)
(46,16,1)
(70,1,1)
(59,44,1)
(67,23,1)
(17,65,1)
(58,39,1)
(98,59,1)
(10,86,1)
(37,33,1)
(82,37,1)
(76,63,1)
(107,58,1)
(35,86,1)
(48,34,1)
(96,66,1)
(66,13,1)
(20,84,1)
(13,83,1)
(54,14,1)
(45,40,1)
(6,48,1)
(86,21,1)
(22,4,1)
(19,12,1)
(76,98,1)
(91,70,1)
(106,58,2)
(6,58,2)
(83,14,2)
(105,76,2)
(9,65,2)
(45,65,2)
(98,58,2)
(75,86,2)
(11,54,2)
(67,14,2)
(33,65,2)
(104,58,2)
(107,58,2)
(98,8,2)
(105,14,2)
(11,24,2)
(14,27,2)
(91,14,2)
(27,76,2)
(63,98,2)
(59,44,2)
(10,86,2)
(21,65,2)
(17,65,2)
(25,76,2)
(93,76,2)
(53,8,2)
(68,24,2)
(14,76,2)
(24,76,2)
(98,59,2)
(70,96,2)
(68,76,2)
(24,100,2)
(76,63,2)
(60,58,2)
(44,40,2)
(77,54,2)
(28,27,2)
(63,8,2)
(22,76,2)
(23,14,2)
(47,65,2)
(63,59,2)
(14,53,2)
(102,14,2)
(87,65,2)
(92,58,2)
(66,14,2)
(44,86,2)
(76,58,2)
(50,98,2)
(18,58,2)
(31,14,2)
(38,68,2)
(8,41,2)
(89,76,2)
(86,65,2)
(96,66,2)
(94,76,2)
(96,14,2)
(96,23,2)
(49,76,2)
(3,65,2)
(34,58,2)
(82,65,2)
(14,14,2)
(90,58,2)
(28,14,2)
(57,58,2)
(13,14,2)
(100,76,2)
(53,76,2)
(46,58,2)
(94,14,2)
(4,76,2)
(86,21,2)
(101,68,2)
(35,86,2)
(88,86,2)
(99,98,2)
(15,58,2)
(66,83,2)
(36,58,2)
(84,14,2)
(5,76,2)
(66,20,2)
(59,86,2)
(53,59,2)
(20,14,2)
(16,58,2)
(39,65,2)
(76,98,2)
(37,65,2)
(48,58,2)
(40,65,2)
(54,76,2)
(100,46,2)
(53,78,2)
(1,96,2)
(21,40,2)
(66,24,2)
(53,14,2)
-----------------------------------
(0,pFile)
(1,1)
(2,)
(3,NULL)
(4,i)
(5,filename)
(6,filename)
(7,)
(8,count = -1)
(9,stdin)
(10,"fgets()
(11,fclose(pFile)
(12,count)
(13,pFile)
(14,i < (size_t)
(15,0)
(16,"output_good.txt")
(17,inputBuffer)
(18,i = 0)
(19,1)
(20,sizeof(char)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,0)
(23,strlen(SENTENCE)
(24,pFile = fopen(filename, "w+")
(25,pFile)
(26,)
(27,i = 0)
(28,i++)
(29,inputBuffer)
(30,count)
(31,SENTENCE)
(32,default:)
(33,"Benign, fixed string")
(34,NULL)
(35,count)
(36,pFile)
(37,printLine("Benign, fixed string")
(38,exit(1)
(39,break;)
(40,inputBuffer[CHAR_ARRAY_SIZE] = "")
(41,-1)
(42,if (strlen(SENTENCE)
(43,if (count > 0 && count <= 20)
(44,atoi(inputBuffer)
(45,inputBuffer)
(46,*filename = "output_good.txt")
(47,"")
(48,*pFile = NULL)
(49,"w+")
(50,count)
(51,switch(6)
(52,)
(53,(size_t)
(54,pFile)
(55,default:)
(56,)
(57,printLine("Benign, fixed string")
(58,7)
(59,count = atoi(inputBuffer)
(60,break;)
(61,for (i = 0; i < (size_t)
(62,)
(63,count <= 20)
(64,RET)
(65,6)
(66,fwrite(SENTENCE, sizeof(char)
(67,SENTENCE)
(68,pFile == NULL)
(69,if (pFile == NULL)
(70,exit(1)
(71,if (pFile)
(72,case 6:)
(73,switch(7)
(74,i)
(75,printLine("fgets()
(76,count > 0 && count <= 20)
(77,pFile)
(78,size_t)
(79,case 7:)
(80,)
(81,)
(82,break;)
(83,strlen(SENTENCE)
(84,char)
(85,filename)
(86,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(87,CHAR_ARRAY_SIZE)
(88,inputBuffer)
(89,pFile)
(90,0)
(91,i)
(92,i)
(93,NULL)
(94,count)
(95,)
(96,strlen(SENTENCE)
(97,)
(98,count > 0)
(99,20)
(100,fopen(filename, "w+")
(101,1)
(102,SENTENCE)
(103,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(104,break;)
(105,i)
(106,count)
(107,"Benign, fixed string")
(108,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^