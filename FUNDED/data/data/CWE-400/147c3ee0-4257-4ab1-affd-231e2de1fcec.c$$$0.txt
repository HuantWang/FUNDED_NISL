-----label-----
0
-----code-----
static void goodB2G()
{
    int i,k;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    for(k = 0; k < 1; k++)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
71,74
72,73
74,75
77,78
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
96,97
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,73,75,76,80,82,87,88,91,92,95,100,102
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
85,86
85,87
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int i,k;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    int i,k;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }}
int i,k;
int i,k;
int
i
i
k
k
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
for(k = 0; k < 1; k++)    {        /* FIX: Deallocate memory */        free(data);    }
k = 0;
k = 0
k
k
0
k < 1
k
k
1
k++
k
k
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(26,34,0)
(21,31,0)
(14,16,0)
(46,17,0)
(51,44,0)
(41,27,0)
(29,16,0)
(31,18,0)
(31,21,0)
(22,51,0)
(5,16,0)
(32,16,0)
(18,15,0)
(3,47,0)
(39,0,0)
(44,31,0)
(27,23,0)
(24,6,0)
(40,50,0)
(3,44,0)
(31,44,0)
(3,14,0)
(38,23,0)
(30,10,0)
(45,17,0)
(43,40,0)
(8,3,0)
(0,23,0)
(4,50,0)
(15,10,0)
(36,14,0)
(33,2,0)
(7,44,0)
(2,35,0)
(34,50,0)
(18,31,0)
(48,27,0)
(19,16,0)
(6,44,0)
(12,42,0)
(9,40,0)
(20,50,0)
(51,42,0)
(1,23,0)
(15,18,0)
(28,16,0)
(25,14,0)
(49,15,0)
(37,6,0)
(17,44,0)
(2,33,0)
(10,15,0)
(17,42,0)
(44,42,0)
(11,33,0)
(43,9,1)
(9,50,1)
(10,30,1)
(27,41,1)
(4,20,1)
(45,2,1)
(17,44,1)
(48,0,1)
(33,11,1)
(39,3,1)
(9,34,1)
(3,44,1)
(0,39,1)
(7,40,1)
(40,50,1)
(2,33,1)
(31,18,1)
(45,6,1)
(37,44,1)
(51,44,1)
(11,6,1)
(38,1,1)
(50,4,1)
(3,8,1)
(41,48,1)
(48,23,1)
(18,15,1)
(49,7,1)
(8,27,1)
(22,17,1)
(25,36,1)
(24,37,1)
(40,43,1)
(44,31,1)
(30,49,1)
(31,21,1)
(26,51,1)
(23,38,1)
(27,23,1)
(46,45,1)
(20,14,1)
(1,40,1)
(17,46,1)
(15,10,1)
(34,50,1)
(6,44,1)
(51,22,1)
(3,14,1)
(13,27,1)
(34,26,1)
(0,23,1)
(14,25,1)
(6,24,1)
(3,44,2)
(3,27,2)
(40,50,2)
(3,14,2)
(31,40,2)
(45,40,2)
(41,27,2)
(27,23,2)
(24,40,2)
(6,40,2)
(51,40,2)
(44,31,2)
(8,27,2)
(37,40,2)
(49,40,2)
(22,40,2)
(31,18,2)
(11,6,2)
(44,40,2)
(0,23,2)
(17,40,2)
(33,6,2)
(18,15,2)
(43,40,2)
(26,40,2)
(40,40,2)
(27,27,2)
(48,27,2)
(34,40,2)
(34,50,2)
(31,21,2)
(15,10,2)
(18,40,2)
(9,40,2)
(0,27,2)
(46,40,2)
(51,44,2)
(2,33,2)
(2,6,2)
(15,40,2)
(10,40,2)
(6,44,2)
(17,44,2)
(39,27,2)
(7,40,2)
(30,40,2)
-----------------------------------
(0,k++)
(1,k)
(2,exit(-1)
(3,free(data)
(4,0)
(5,data)
(6,data == NULL)
(7,data)
(8,data)
(9,i)
(10,sizeof(char)
(11,1)
(12,if (data == NULL)
(13,RET)
(14,data = NULL)
(15,100*sizeof(char)
(16,)
(17,strcpy(data, "A String")
(18,malloc(100*sizeof(char)
(19,i)
(20,i)
(21,char *)
(22,data)
(23,k = 0)
(24,NULL)
(25,NULL)
(26,i)
(27,k < 1)
(28,for(k = 0; k < 1; k++)
(29,k)
(30,char)
(31,(char *)
(32,for(i = 0; i < 1; i++)
(33,-1)
(34,i++)
(35,)
(36,data)
(37,data)
(38,0)
(39,k)
(40,i < 1)
(41,1)
(42,)
(43,1)
(44,data = (char *)
(45,data)
(46,"A String")
(47,)
(48,k)
(49,100)
(50,i = 0)
(51,printLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^