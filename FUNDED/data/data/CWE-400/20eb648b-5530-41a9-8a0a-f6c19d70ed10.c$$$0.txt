-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_16_bad()
{
    int * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
34,35
35,36
35,37
38,39
38,40
39,40
39,41
40,41
42,43
44,45
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
67,68
67,69
69,70
69,71
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,33,36,37,41,43,48,50,55,56,57,61,64,65,66,68,70,71
-----computeFrom-----
13,14
13,15
22,23
22,24
39,40
39,41
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_16_bad(){    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__int_calloc_16_bad()
CWE401_Memory_Leak__int_calloc_16_bad
{    int * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        break;    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(17,33,0)
(29,10,0)
(2,10,0)
(21,9,0)
(23,9,0)
(18,7,0)
(37,38,0)
(4,28,0)
(2,17,0)
(2,30,0)
(1,15,0)
(28,18,0)
(30,33,0)
(18,28,0)
(27,10,0)
(38,35,0)
(14,34,0)
(0,33,0)
(22,38,0)
(15,10,0)
(9,23,0)
(32,30,0)
(23,15,0)
(10,33,0)
(36,27,0)
(25,33,0)
(15,23,0)
(13,2,0)
(27,30,0)
(16,35,0)
(19,23,0)
(10,15,0)
(12,27,0)
(31,5,0)
(17,2,0)
(26,35,0)
(6,2,0)
(15,1,0)
(39,35,0)
(5,10,0)
(20,5,0)
(2,30,1)
(15,23,1)
(6,30,1)
(5,20,1)
(27,10,1)
(27,36,1)
(25,17,1)
(20,31,1)
(23,9,1)
(3,38,1)
(4,5,1)
(10,15,1)
(14,11,1)
(11,25,1)
(31,10,1)
(12,5,1)
(12,18,1)
(2,10,1)
(24,11,1)
(17,2,1)
(15,1,1)
(2,13,1)
(32,27,1)
(18,28,1)
(11,3,1)
(13,6,1)
(28,4,1)
(37,22,1)
(5,10,1)
(30,32,1)
(9,21,1)
(19,29,1)
(38,37,1)
(36,12,1)
(24,14,1)
(29,3,1)
(21,19,1)
(10,15,2)
(27,3,2)
(17,2,2)
(15,1,2)
(21,3,2)
(23,9,2)
(18,5,2)
(17,3,2)
(6,3,2)
(4,5,2)
(27,10,2)
(28,5,2)
(12,3,2)
(19,3,2)
(36,3,2)
(30,3,2)
(15,3,2)
(23,3,2)
(13,3,2)
(20,3,2)
(31,3,2)
(5,3,2)
(2,30,2)
(18,28,2)
(2,10,2)
(25,3,2)
(2,3,2)
(15,23,2)
(10,3,2)
(14,11,2)
(5,10,2)
(9,3,2)
(29,3,2)
(32,3,2)
-----------------------------------
(0,if (data == NULL)
(1,int *)
(2,data[0])
(3,1)
(4,1)
(5,data == NULL)
(6,data)
(7,)
(8, sizeof(int)
(9,sizeof(int)
(10,data = (int *)
(11,1)
(12,data)
(13,0)
(14,break;)
(15,(int *)
(16,while(1)
(17,printIntLine(data[0])
(18,exit(-1)
(19,100)
(20,NULL)
(21,int)
(22,data)
(23,calloc(100, sizeof(int)
(24,RET)
(25,break;)
(26,data)
(27,data[0])
(28,-1)
(29,data)
(30,data[0] = 5)
(31,data)
(32,5)
(33,)
(34,)
(35,)
(36,0)
(37,NULL)
(38,data = NULL)
(39,while(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^