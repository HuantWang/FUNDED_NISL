-----label-----
0
-----code-----
static void goodB2G2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_good.txt";
            /* FIX: Validate count before using it as the for loop variant to write to a file */
            if (count > 0 && count <= 20)
            {
                pFile = fopen(filename, "w+");
                if (pFile == NULL)
                {
                    exit(1);
                }
                for (i = 0; i < (size_t)count; i++)
                {
                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
                }
                if (pFile)
                {
                    fclose(pFile);
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
50,52
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
78,79
81,82
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
119,121
119,122
119,123
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
131,132
133,134
134,135
135,136
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
152,153
152,154
153,154
157,158
157,159
158,159
158,160
159,160
159,161
160,161
162,163
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
178,179
179,180
179,181
180,181
182,183
182,184
183,184
185,186
188,189
188,190
189,190
189,191
190,191
192,193
194,195
195,196
196,197
196,198
197,198
199,200
201,202
201,203
202,203
204,205
205,206
205,207
205,208
205,209
206,207
207,208
207,209
208,209
210,211
210,212
212,213
214,215
215,216
215,217
216,217
218,219
218,220
218,221
221,222
222,223
224,225
225,226
225,227
227,228
227,229
227,230
230,231
232,233
232,234
233,234
233,235
234,235
234,236
235,236
238,239
238,240
239,240
242,243
242,244
242,245
242,246
243,244
244,245
244,246
245,246
247,248
247,249
247,250
248,249
250,251
253,254
253,255
254,255
254,256
255,256
257,258
259,260
260,261
261,262
261,263
262,263
265,266
265,267
265,268
265,269
266,267
267,268
267,269
268,269
271,272
271,273
272,273
274,275
274,276
275,276
275,277
276,277
279,280
281,282
282,283
284,285
285,286
285,287
286,287
286,288
287,288
287,289
288,289
290,291
292,293
292,294
292,295
292,296
292,297
293,294
295,296
297,298
298,299
298,300
301,302
301,303
302,303
304,305
306,307
308,309
309,310
309,311
310,311
313,314
313,315
314,315
316,317
317,318
318,319
318,320
319,320
321,322
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,32,36,38,41,44,46,49,55,58,60,62,64,68,70,72,76,79,80,84,89,90,92,98,99,100,103,105,110,111,114,116,121,123,127,129,132,136,138,140,144,147,149,151,154,155,156,161,163,166,167,169,174,176,177,181,184,186,187,191,193,198,200,203,209,211,213,217,219,220,223,226,228,229,231,236,237,240,241,246,249,251,252,256,258,263,264,269,270,273,277,278,280,283,289,291,294,296,299,300,303,305,307,311,312,315,320,322
-----computeFrom-----
12,13
12,14
53,54
53,55
66,67
66,68
86,87
86,88
94,95
94,96
107,108
107,109
118,119
118,120
142,143
142,144
152,153
152,154
158,159
158,160
159,160
159,161
164,165
164,166
171,172
171,173
179,180
179,181
189,190
189,191
233,234
233,235
234,235
234,236
238,239
238,240
244,245
244,246
254,255
254,256
267,268
267,269
271,272
271,273
286,287
286,288
-----guardedBy-----
191,200
240,280
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
static void
goodB2G2()
goodB2G2
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_good.txt";            /* FIX: Validate count before using it as the for loop variant to write to a file */            if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_good.txt";
const char *filename = "output_good.txt";
const char
*filename = "output_good.txt"
*
filename
= "output_good.txt"
"output_good.txt"
if (count > 0 && count <= 20)            {                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                pFile = fopen(filename, "w+");                if (pFile == NULL)                {                    exit(1);                }                for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }                if (pFile)                {                    fclose(pFile);                }            }
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)                {                    exit(1);                }
pFile == NULL
pFile
pFile
NULL
NULL
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)                {                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);                }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
exit(1);
exit(1)
exit
exit
1
if (pFile)                {                    fclose(pFile);                }
pFile
pFile
{                    fclose(pFile);                }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(118,8,0)
(30,38,0)
(84,158,0)
(177,3,0)
(39,194,0)
(167,138,0)
(168,52,0)
(3,45,0)
(124,151,0)
(22,30,0)
(173,13,0)
(59,20,0)
(190,46,0)
(131,115,0)
(50,13,0)
(12,1,0)
(48,86,0)
(84,165,0)
(154,114,0)
(171,32,0)
(171,114,0)
(3,177,0)
(142,151,0)
(46,165,0)
(115,131,0)
(165,114,0)
(0,44,0)
(100,172,0)
(43,171,0)
(161,35,0)
(120,143,0)
(68,13,0)
(105,33,0)
(81,141,0)
(130,111,0)
(172,13,0)
(127,165,0)
(111,126,0)
(78,143,0)
(188,160,0)
(146,26,0)
(145,23,0)
(165,46,0)
(128,44,0)
(93,84,0)
(162,114,0)
(174,114,0)
(178,89,0)
(49,20,0)
(72,60,0)
(44,52,0)
(82,151,0)
(24,49,0)
(104,102,0)
(112,99,0)
(142,1,0)
(176,193,0)
(125,30,0)
(7,13,0)
(91,127,0)
(163,2,0)
(52,99,0)
(92,120,0)
(5,104,0)
(135,114,0)
(35,174,0)
(49,105,0)
(74,140,0)
(62,2,0)
(86,143,0)
(55,23,0)
(119,172,0)
(98,111,0)
(17,126,0)
(108,154,0)
(96,97,0)
(8,74,0)
(90,177,0)
(1,142,0)
(189,30,0)
(6,114,0)
(57,33,0)
(41,160,0)
(170,127,0)
(32,171,0)
(155,171,0)
(84,38,0)
(27,115,0)
(86,0,0)
(65,49,0)
(148,27,0)
(139,172,0)
(107,164,0)
(87,38,0)
(119,165,0)
(42,35,0)
(25,174,0)
(1,12,0)
(1,52,0)
(174,25,0)
(49,75,0)
(1,143,0)
(129,25,0)
(13,185,0)
(184,165,0)
(22,194,0)
(194,22,0)
(152,84,0)
(64,134,0)
(53,15,0)
(14,150,0)
(3,16,0)
(149,158,0)
(37,194,0)
(60,2,0)
(175,142,0)
(191,4,0)
(94,61,0)
(67,13,0)
(134,38,0)
(63,67,0)
(183,23,0)
(85,86,0)
(21,16,0)
(16,3,0)
(40,19,0)
(66,165,0)
(101,84,0)
(83,89,0)
(4,105,0)
(86,52,0)
(60,102,0)
(71,13,0)
(69,134,0)
(132,119,0)
(70,151,0)
(38,114,0)
(2,60,0)
(9,184,0)
(47,49,0)
(52,23,0)
(126,74,0)
(15,117,0)
(36,74,0)
(144,74,0)
(182,13,0)
(20,49,0)
(99,52,0)
(18,114,0)
(89,115,0)
(10,24,0)
(89,19,0)
(122,45,0)
(19,89,0)
(143,114,0)
(79,158,0)
(61,114,0)
(180,105,0)
(109,13,0)
(171,155,0)
(97,75,0)
(160,141,0)
(111,105,0)
(134,61,0)
(51,44,0)
(133,33,0)
(45,3,0)
(105,111,0)
(75,49,0)
(169,13,0)
(141,114,0)
(119,157,0)
(38,84,0)
(34,74,0)
(115,89,0)
(44,0,0)
(58,32,0)
(28,45,0)
(73,154,0)
(56,124,0)
(136,155,0)
(192,46,0)
(75,97,0)
(0,86,0)
(115,27,0)
(113,176,0)
(95,126,0)
(179,4,0)
(30,22,0)
(77,46,0)
(158,84,0)
(187,116,0)
(194,38,0)
(89,178,0)
(186,137,0)
(80,184,0)
(195,121,0)
(166,8,0)
(164,74,0)
(147,178,0)
(44,143,0)
(76,164,0)
(49,24,0)
(102,114,0)
(110,13,0)
(103,67,0)
(54,181,0)
(11,1,0)
(102,104,0)
(143,120,0)
(31,74,0)
(15,105,0)
(123,33,0)
(184,172,0)
(89,165,0)
(3,45,1)
(97,96,1)
(63,159,1)
(76,8,1)
(156,88,1)
(39,38,1)
(8,166,1)
(28,153,1)
(86,143,1)
(59,24,1)
(127,91,1)
(93,158,1)
(134,69,1)
(119,165,1)
(88,159,1)
(22,30,1)
(5,60,1)
(192,66,1)
(92,78,1)
(138,167,1)
(134,38,1)
(82,176,1)
(43,32,1)
(90,45,1)
(148,83,1)
(170,165,1)
(142,151,1)
(115,27,1)
(1,11,1)
(160,188,1)
(37,39,1)
(139,100,1)
(53,106,1)
(167,75,1)
(4,105,1)
(22,194,1)
(78,61,1)
(30,125,1)
(127,165,1)
(73,108,1)
(188,41,1)
(152,87,1)
(158,149,1)
(115,131,1)
(51,86,1)
(151,70,1)
(187,29,1)
(164,107,1)
(9,80,1)
(86,52,1)
(20,59,1)
(176,113,1)
(106,142,1)
(153,143,1)
(190,77,1)
(95,164,1)
(154,73,1)
(89,178,1)
(124,151,1)
(180,0,1)
(172,139,1)
(174,25,1)
(175,124,1)
(141,81,1)
(32,58,1)
(16,21,1)
(94,134,1)
(171,32,1)
(60,72,1)
(42,102,1)
(165,46,1)
(194,38,1)
(99,112,1)
(21,3,1)
(64,22,1)
(88,187,1)
(48,85,1)
(194,37,1)
(75,97,1)
(58,127,1)
(0,86,1)
(119,172,1)
(27,148,1)
(80,195,1)
(61,94,1)
(49,47,1)
(120,92,1)
(96,142,1)
(84,165,1)
(4,191,1)
(163,62,1)
(0,44,1)
(107,76,1)
(179,105,1)
(143,120,1)
(147,115,1)
(66,154,1)
(14,19,1)
(105,111,1)
(129,35,1)
(125,189,1)
(49,105,1)
(102,104,1)
(80,14,1)
(25,129,1)
(156,106,1)
(67,103,1)
(56,75,1)
(49,24,1)
(100,67,1)
(11,175,1)
(47,20,1)
(89,165,1)
(41,171,1)
(85,126,1)
(56,138,1)
(159,52,1)
(77,192,1)
(184,9,1)
(149,79,1)
(132,184,1)
(111,98,1)
(44,143,1)
(113,4,1)
(84,158,1)
(83,174,1)
(98,130,1)
(69,64,1)
(155,136,1)
(195,16,1)
(108,16,1)
(10,65,1)
(19,89,1)
(156,15,1)
(72,2,1)
(126,17,1)
(184,172,1)
(177,90,1)
(178,147,1)
(82,4,1)
(45,122,1)
(104,5,1)
(118,88,1)
(24,10,1)
(17,95,1)
(15,105,1)
(75,49,1)
(136,43,1)
(3,177,1)
(30,38,1)
(112,168,1)
(16,3,1)
(40,89,1)
(46,190,1)
(101,152,1)
(171,155,1)
(28,172,1)
(35,161,1)
(80,54,1)
(19,40,1)
(89,115,1)
(130,180,1)
(88,29,1)
(166,118,1)
(189,194,1)
(128,51,1)
(15,53,1)
(1,143,1)
(186,22,1)
(87,19,1)
(175,151,1)
(81,160,1)
(161,42,1)
(191,179,1)
(54,127,1)
(29,184,1)
(111,126,1)
(79,101,1)
(122,28,1)
(156,0,1)
(65,97,1)
(84,93,1)
(124,56,1)
(29,119,1)
(86,48,1)
(70,82,1)
(62,141,1)
(1,52,1)
(38,84,1)
(52,99,1)
(91,170,1)
(80,186,1)
(44,128,1)
(2,163,1)
(142,1,1)
(80,153,1)
(44,52,1)
(103,63,1)
(1,12,1)
(49,20,1)
(60,2,1)
(184,165,1)
(119,132,1)
(171,127,2)
(95,88,2)
(16,3,2)
(142,1,2)
(21,159,2)
(154,16,2)
(81,127,2)
(188,127,2)
(132,184,2)
(148,127,2)
(25,127,2)
(164,88,2)
(22,30,2)
(176,4,2)
(124,142,2)
(141,127,2)
(174,25,2)
(58,127,2)
(45,153,2)
(41,127,2)
(147,127,2)
(129,127,2)
(11,0,2)
(85,88,2)
(15,105,2)
(175,0,2)
(40,127,2)
(178,127,2)
(69,22,2)
(46,16,2)
(90,153,2)
(0,44,2)
(130,0,2)
(72,127,2)
(82,0,2)
(184,172,2)
(5,127,2)
(115,127,2)
(113,4,2)
(1,12,2)
(161,127,2)
(27,127,2)
(56,142,2)
(22,19,2)
(38,84,2)
(143,22,2)
(142,151,2)
(175,142,2)
(160,127,2)
(89,178,2)
(35,127,2)
(111,0,2)
(105,111,2)
(98,0,2)
(127,165,2)
(14,19,2)
(67,159,2)
(190,16,2)
(171,155,2)
(4,105,2)
(115,131,2)
(60,2,2)
(93,19,2)
(180,0,2)
(104,127,2)
(75,49,2)
(62,127,2)
(37,19,2)
(167,75,2)
(63,159,2)
(186,22,2)
(122,153,2)
(22,194,2)
(19,89,2)
(184,165,2)
(192,16,2)
(92,22,2)
(163,127,2)
(30,38,2)
(138,75,2)
(48,88,2)
(96,142,2)
(177,159,2)
(90,159,2)
(76,88,2)
(8,88,2)
(9,159,2)
(84,19,2)
(128,86,2)
(1,142,2)
(142,142,2)
(134,38,2)
(152,19,2)
(47,142,2)
(64,22,2)
(174,127,2)
(124,151,2)
(86,52,2)
(0,88,2)
(24,142,2)
(1,52,2)
(45,159,2)
(42,127,2)
(54,127,2)
(111,126,2)
(87,19,2)
(78,22,2)
(100,159,2)
(16,153,2)
(191,0,2)
(65,142,2)
(83,127,2)
(91,16,2)
(30,194,2)
(153,22,2)
(103,159,2)
(75,142,2)
(184,159,2)
(120,22,2)
(44,143,2)
(97,142,2)
(51,86,2)
(187,29,2)
(119,184,2)
(2,127,2)
(102,127,2)
(155,127,2)
(1,143,2)
(134,22,2)
(165,16,2)
(151,0,2)
(3,159,2)
(189,194,2)
(49,20,2)
(80,159,2)
(32,127,2)
(119,172,2)
(43,127,2)
(139,159,2)
(52,99,2)
(29,159,2)
(84,158,2)
(126,88,2)
(39,19,2)
(79,19,2)
(105,0,2)
(17,88,2)
(143,120,2)
(102,104,2)
(177,153,2)
(106,0,2)
(195,16,2)
(165,46,2)
(44,86,2)
(107,88,2)
(3,153,2)
(89,127,2)
(179,0,2)
(171,32,2)
(70,0,2)
(38,19,2)
(89,115,2)
(127,16,2)
(73,16,2)
(118,88,2)
(77,16,2)
(172,159,2)
(149,19,2)
(61,22,2)
(49,24,2)
(49,105,2)
(28,153,2)
(28,159,2)
(49,142,2)
(4,0,2)
(84,165,2)
(194,38,2)
(136,127,2)
(194,19,2)
(3,177,2)
(86,88,2)
(53,106,2)
(66,16,2)
(3,45,2)
(119,165,2)
(11,142,2)
(142,0,2)
(19,127,2)
(21,153,2)
(115,27,2)
(1,0,2)
(158,19,2)
(60,127,2)
(170,16,2)
(122,159,2)
(86,143,2)
(125,194,2)
(44,52,2)
(75,97,2)
(59,142,2)
(101,19,2)
(15,106,2)
(20,142,2)
(89,165,2)
(16,159,2)
(0,86,2)
(10,142,2)
(94,22,2)
(166,88,2)
(108,16,2)
-----------------------------------
(0,count > 0 && count <= 20)
(1,(size_t)
(2,service.sin_addr)
(3,WSAStartup(MAKEWORD(2,2)
(4,pFile == NULL)
(5,IP_ADDRESS)
(6,if (connectSocket == INVALID_SOCKET)
(7,recvResult)
(8,i = 0)
(9,INVALID_SOCKET)
(10,char)
(11,count)
(12,size_t)
(13,)
(14,break;)
(15,fclose(pFile)
(16,WSAStartup(MAKEWORD(2,2)
(17,"output_good.txt")
(18,if (connect(connectSocket, (struct sockaddr*)
(19,connect(connectSocket, (struct sockaddr*)
(20,strlen(SENTENCE)
(21,NO_ERROR)
(22,recvResult == SOCKET_ERROR || recvResult == 0)
(23,)
(24,sizeof(char)
(25,htons(TCP_PORT)
(26,)
(27,&service)
(28,2)
(29,wsaDataInit)
(30,recvResult == 0)
(31,i)
(32,&service)
(33,)
(34,if (count > 0 && count <= 20)
(35,service.sin_port)
(36,filename)
(37,SOCKET_ERROR)
(38,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(39,recvResult)
(40,SOCKET_ERROR)
(41,service)
(42,service)
(43,0)
(44,count <= 20)
(45,MAKEWORD(2,2)
(46,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(47,pFile)
(48,0)
(49,fwrite(SENTENCE, sizeof(char)
(50,if (wsaDataInit)
(51,count)
(52,count = -1)
(53,pFile)
(54,break;)
(55,if(GLOBAL_CONST_TRUE)
(56,i)
(57,if (pFile)
(58,service)
(59,SENTENCE)
(60,service.sin_addr.s_addr)
(61,inputBuffer[recvResult] = \'\\0\')
(62,service)
(63,wsaDataInit)
(64,inputBuffer)
(65,SENTENCE)
(66,connectSocket)
(67,wsaDataInit = 0)
(68,connectSocket)
(69,recvResult)
(70,0)
(71,inputBuffer)
(72,s_addr)
(73,1)
(74,)
(75,strlen(SENTENCE)
(76,pFile)
(77,SOCK_STREAM)
(78,count)
(79,CHAR_ARRAY_SIZE)
(80,connectSocket)
(81,AF_INET)
(82,i)
(83,connectSocket)
(84,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(85,count)
(86,count > 0)
(87,recvResult)
(88,GLOBAL_CONST_TRUE)
(89,connect(connectSocket, (struct sockaddr*)
(90,wsaData)
(91,INVALID_SOCKET)
(92,inputBuffer)
(93,0)
(94,\'\\0\')
(95,filename)
(96,SENTENCE)
(97,strlen(SENTENCE)
(98,"w+")
(99,-1)
(100,connectSocket)
(101,inputBuffer)
(102,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(103,0)
(104,inet_addr(IP_ADDRESS)
(105,pFile = fopen(filename, "w+")
(106,pFile)
(107,NULL)
(108,wsaDataInit)
(109,wsaData)
(110,wsaDataInit)
(111,fopen(filename, "w+")
(112,1)
(113,1)
(114,)
(115,(struct sockaddr*)
(116,)
(117,)
(118,i)
(119,CLOSE_SOCKET(connectSocket)
(120,atoi(inputBuffer)
(121,)
(122,2)
(123,if (pFile == NULL)
(124,i++)
(125,0)
(126,*filename = "output_good.txt")
(127,connectSocket == INVALID_SOCKET)
(128,20)
(129,TCP_PORT)
(130,filename)
(131,struct sockaddr*)
(132,connectSocket)
(133,for (i = 0; i < (size_t)
(134,inputBuffer[recvResult])
(135,if (WSAStartup(MAKEWORD(2,2)
(136,service)
(137,)
(138,exit(1)
(139,INVALID_SOCKET)
(140,)
(141,service.sin_family = AF_INET)
(142,i < (size_t)
(143,count = atoi(inputBuffer)
(144,pFile)
(145,count)
(146,if (strlen(SENTENCE)
(147,service)
(148,service)
(149,1)
(150,)
(151,i = 0)
(152,connectSocket)
(153,0)
(154,wsaDataInit = 1)
(155,sizeof(service)
(156,RET)
(157,)
(158,CHAR_ARRAY_SIZE - 1)
(159,GLOBAL_CONST_TRUE)
(160,service.sin_family)
(161,sin_port)
(162,if (recvResult == SOCKET_ERROR || recvResult == 0)
(163,sin_addr)
(164,*pFile = NULL)
(165,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(166,0)
(167,1)
(168,count)
(169,do)
(170,connectSocket)
(171,memset(&service, 0, sizeof(service)
(172,connectSocket = INVALID_SOCKET)
(173,service)
(174,service.sin_port = htons(TCP_PORT)
(175,i)
(176,exit(1)
(177,&wsaData)
(178,sizeof(service)
(179,pFile)
(180,pFile)
(181,)
(182,if (connectSocket != INVALID_SOCKET)
(183,if(GLOBAL_CONST_TRUE)
(184,connectSocket != INVALID_SOCKET)
(185,)
(186,break;)
(187,WSACleanup()
(188,sin_family)
(189,recvResult)
(190,IPPROTO_TCP)
(191,NULL)
(192,AF_INET)
(193,)
(194,recvResult == SOCKET_ERROR)
(195,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^