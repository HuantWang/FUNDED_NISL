-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_01_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
57,59
58,59
59,60
59,61
60,61
62,63
62,64
64,65
66,67
66,68
66,69
66,70
67,68
68,69
68,70
69,70
72,73
72,74
73,74
75,76
75,77
76,77
76,78
77,78
80,81
82,83
83,84
85,86
86,87
87,88
87,89
88,89
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,61,63,65,70,71,74,78,79,81,84,89,90
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
68,69
68,70
72,73
72,74
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_01_bad(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_01_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_01_bad
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(3,41,0)
(18,45,0)
(16,45,0)
(5,1,0)
(38,25,0)
(40,19,0)
(33,41,0)
(21,8,0)
(34,16,0)
(28,22,0)
(4,37,0)
(7,43,0)
(31,3,0)
(27,3,0)
(15,24,0)
(37,16,0)
(22,14,0)
(16,37,0)
(45,35,0)
(20,11,0)
(32,21,0)
(14,8,0)
(16,12,0)
(3,25,0)
(43,1,0)
(41,21,0)
(6,1,0)
(35,45,0)
(30,14,0)
(45,2,0)
(35,41,0)
(36,35,0)
(29,19,0)
(10,41,0)
(9,13,0)
(0,21,0)
(17,9,0)
(25,3,0)
(42,43,0)
(26,3,0)
(14,22,0)
(44,8,0)
(1,8,0)
(24,19,0)
(16,14,0)
(23,20,0)
(12,16,0)
(37,19,0)
(23,25,1)
(35,41,1)
(39,37,1)
(43,7,1)
(28,30,1)
(24,15,1)
(27,26,1)
(26,31,1)
(38,3,1)
(17,37,1)
(16,14,1)
(4,19,1)
(37,16,1)
(25,38,1)
(3,41,1)
(10,14,1)
(19,29,1)
(33,10,1)
(41,33,1)
(16,45,1)
(24,19,1)
(16,12,1)
(4,24,1)
(15,9,1)
(14,22,1)
(16,34,1)
(45,35,1)
(22,28,1)
(31,41,1)
(42,20,1)
(42,45,1)
(40,43,1)
(29,40,1)
(20,23,1)
(7,42,1)
(3,27,1)
(36,18,1)
(35,36,1)
(37,19,1)
(34,4,1)
(25,3,1)
(18,25,1)
(9,17,1)
(24,19,2)
(34,37,2)
(16,14,2)
(35,41,2)
(36,25,2)
(37,19,2)
(16,12,2)
(35,25,2)
(17,37,2)
(45,25,2)
(23,25,2)
(24,37,2)
(16,45,2)
(4,37,2)
(15,37,2)
(37,16,2)
(25,3,2)
(37,37,2)
(9,37,2)
(20,25,2)
(3,41,2)
(45,35,2)
(18,25,2)
(14,22,2)
(16,37,2)
-----------------------------------
(0,inputBuffer)
(1,)
(2,)
(3,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,i)
(5,i)
(6,for (i = 0; i < (size_t)
(7,0)
(8,)
(9,printLine("Hello")
(10,inputBuffer)
(11,)
(12,size_t)
(13,)
(14,count = -1)
(15,i)
(16,(size_t)
(17,"Hello")
(18,count)
(19,i = 0)
(20,printLine("fgets()
(21,)
(22,-1)
(23,"fgets()
(24,i++)
(25,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(26,CHAR_ARRAY_SIZE)
(27,stdin)
(28,1)
(29,0)
(30,count)
(31,inputBuffer)
(32,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(33,"")
(34,count)
(35,atoi(inputBuffer)
(36,inputBuffer)
(37,i < (size_t)
(38,NULL)
(39,RET)
(40,i)
(41,inputBuffer[CHAR_ARRAY_SIZE] = "")
(42,i)
(43,i = 0)
(44,count)
(45,count = atoi(inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^