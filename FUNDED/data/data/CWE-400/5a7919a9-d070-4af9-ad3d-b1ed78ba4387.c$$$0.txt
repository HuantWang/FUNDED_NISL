-----label-----
1
-----code-----
static int handle_statechange(void *datap)
{
	struct statechange *sc = datap;
	struct ao2_iterator miter, qiter;
	struct member *m;
	struct call_queue *q;
	char interface[80], *slash_pos;
	int found = 0;			/* Found this member in any queue */
	int found_member;		/* Found this member in this queue */
	int avail = 0;			/* Found an available member in this queue */

	qiter = ao2_iterator_init(queues, 0);
	while ((q = ao2_t_iterator_next(&qiter, "Iterate over queues"))) {
		ao2_lock(q);

		avail = 0;
		found_member = 0;
		miter = ao2_iterator_init(q->members, 0);
		for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {
			if (!found_member) {
				ast_copy_string(interface, m->state_interface, sizeof(interface));

				if ((slash_pos = strchr(interface, '/'))) {
					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {
						*slash_pos = '\0';
					}
				}

				if (!strcasecmp(interface, sc->dev)) {
					found_member = 1;
					update_status(q, m, sc->state);
				}
			}

			/* check every member until we find one NOT_INUSE */
			if (!avail) {
				avail = is_member_available(m);
			}
			if (avail && found_member) {
				/* early exit as we've found an available member and the member of interest */
				ao2_ref(m, -1);
				break;
			}
		}

		if (found_member) {
			found = 1;
			if (avail) {
				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);
			} else {
				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);
			}
		}

		ao2_iterator_destroy(&miter);

		ao2_unlock(q);
		queue_t_unref(q, "Done with iterator");
	}
	ao2_iterator_destroy(&qiter);

	if (found) {
		ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state));
	} else {
		ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state));
	}

	ast_free(sc);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
21,22
22,23
22,24
22,25
23,24
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
44,47
46,47
46,48
48,49
50,51
50,52
53,54
54,55
54,56
56,57
56,58
58,59
60,61
61,62
61,63
63,64
65,66
66,67
66,68
68,69
68,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
76,79
77,78
79,80
82,83
82,84
83,84
84,85
84,86
85,86
87,88
87,89
87,90
88,89
90,91
91,92
94,95
94,96
94,97
94,98
94,99
94,100
94,101
94,102
94,103
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
111,112
112,113
112,114
113,114
115,116
115,117
115,118
116,117
118,119
118,120
119,120
123,124
123,125
123,126
123,127
125,126
126,127
126,128
127,128
129,130
129,131
130,131
132,133
133,134
135,136
135,137
135,138
136,137
138,139
140,141
142,143
142,144
142,145
143,144
143,145
144,145
145,146
147,148
147,149
147,150
148,149
149,150
149,151
149,152
149,153
150,151
152,153
154,155
154,156
155,156
158,159
159,160
160,161
162,163
162,164
163,164
164,165
164,166
165,166
167,168
167,169
167,170
168,169
170,171
173,174
174,175
174,176
175,176
175,177
176,177
177,178
177,179
177,180
177,181
178,179
180,181
184,185
185,186
185,187
186,187
188,189
188,190
188,191
189,190
191,192
191,193
192,193
196,197
197,198
198,199
198,200
199,200
200,201
203,204
203,205
204,205
205,206
205,207
205,208
206,207
208,209
210,211
210,212
211,212
214,215
214,216
215,216
216,217
216,218
217,218
220,221
221,222
221,223
221,224
221,225
222,223
224,225
226,227
228,229
228,230
229,230
232,233
232,234
233,234
234,235
236,237
237,238
238,239
238,240
239,240
241,242
241,243
242,243
244,245
246,247
246,248
247,248
247,249
248,249
250,251
252,253
252,254
253,254
254,255
254,256
254,257
255,256
257,258
259,260
262,263
262,264
263,264
265,266
265,267
266,267
267,268
267,269
268,269
271,272
271,273
271,274
272,273
274,275
275,276
276,277
276,278
276,279
276,280
277,278
279,280
282,283
282,284
283,284
286,287
287,288
288,289
288,290
288,291
288,292
289,290
291,292
294,295
294,296
295,296
298,299
299,300
299,301
300,301
302,303
303,304
305,306
306,307
306,308
307,308
309,310
311,312
312,313
312,314
312,315
313,314
315,316
318,319
319,320
319,321
320,321
322,323
323,324
325,326
325,327
325,328
326,327
328,329
329,330
330,331
330,332
330,333
330,334
330,335
330,336
331,332
335,336
335,337
336,337
339,340
339,341
340,341
343,344
343,345
344,345
346,347
346,348
347,348
350,351
351,352
352,353
352,354
352,355
352,356
352,357
352,358
353,354
357,358
357,359
358,359
361,362
361,363
362,363
365,366
365,367
366,367
368,369
368,370
369,370
372,373
373,374
373,375
374,375
376,377
378,379
-----nextToken-----
2,4,6,8,9,14,16,17,20,24,26,28,32,34,35,39,41,42,45,47,49,51,52,55,57,59,62,64,67,69,71,75,78,80,81,86,89,92,93,98,100,104,105,109,110,114,117,120,121,122,124,128,131,134,137,139,141,146,151,153,156,157,161,166,169,171,172,179,181,182,183,187,190,193,194,195,201,202,207,209,212,213,218,219,223,225,227,230,231,235,240,243,245,249,251,256,258,260,261,264,269,270,273,278,280,281,284,285,290,292,293,296,297,301,304,308,310,314,316,317,321,324,327,332,333,334,337,338,341,342,345,348,349,354,355,356,359,360,363,364,367,370,371,375,377,379
-----computeFrom-----
73,74
73,75
84,85
84,86
102,103
102,104
107,108
107,109
112,113
112,114
126,127
126,128
164,165
164,166
175,176
175,177
185,186
185,187
191,192
191,193
198,199
198,200
216,217
216,218
238,239
238,240
247,248
247,249
267,268
267,269
-----guardedBy-----
193,201
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ForStatement;NullStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int handle_statechange(void *datap){	struct statechange *sc = datap;	struct ao2_iterator miter, qiter;	struct member *m;	struct call_queue *q;	char interface[80], *slash_pos;	int found = 0;			/* Found this member in any queue */	int found_member;		/* Found this member in this queue */	int avail = 0;			/* Found an available member in this queue */	qiter = ao2_iterator_init(queues, 0);	while ((q = ao2_t_iterator_next(&qiter, "Iterate over queues"))) {		ao2_lock(q);		avail = 0;		found_member = 0;		miter = ao2_iterator_init(q->members, 0);		for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {			if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}			/* check every member until we find one NOT_INUSE */			if (!avail) {				avail = is_member_available(m);			}			if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}		}		if (found_member) {			found = 1;			if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}		}		ao2_iterator_destroy(&miter);		ao2_unlock(q);		queue_t_unref(q, "Done with iterator");	}	ao2_iterator_destroy(&qiter);	if (found) {		ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state));	} else {		ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state));	}	ast_free(sc);	return 0;}
static int
handle_statechange(void *datap)
handle_statechange
void *datap
void
*datap
*
datap
{	struct statechange *sc = datap;	struct ao2_iterator miter, qiter;	struct member *m;	struct call_queue *q;	char interface[80], *slash_pos;	int found = 0;			/* Found this member in any queue */	int found_member;		/* Found this member in this queue */	int avail = 0;			/* Found an available member in this queue */	qiter = ao2_iterator_init(queues, 0);	while ((q = ao2_t_iterator_next(&qiter, "Iterate over queues"))) {		ao2_lock(q);		avail = 0;		found_member = 0;		miter = ao2_iterator_init(q->members, 0);		for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {			if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}			/* check every member until we find one NOT_INUSE */			if (!avail) {				avail = is_member_available(m);			}			if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}		}		if (found_member) {			found = 1;			if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}		}		ao2_iterator_destroy(&miter);		ao2_unlock(q);		queue_t_unref(q, "Done with iterator");	}	ao2_iterator_destroy(&qiter);	if (found) {		ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state));	} else {		ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state));	}	ast_free(sc);	return 0;}
struct statechange *sc = datap;
struct statechange *sc = datap;
struct statechange
statechange
*sc = datap
*
sc
= datap
datap
datap
struct ao2_iterator miter, qiter;
struct ao2_iterator miter, qiter;
struct ao2_iterator
ao2_iterator
miter
miter
qiter
qiter
struct member *m;
struct member *m;
struct member
member
*m
*
m
struct call_queue *q;
struct call_queue *q;
struct call_queue
call_queue
*q
*
q
char interface[80], *slash_pos;
char interface[80], *slash_pos;
char
interface[80]
interface
[80]
80
*slash_pos
*
slash_pos
int found = 0;
int found = 0;
int
found = 0
found
= 0
0
int found_member;
int found_member;
int
found_member
found_member
int avail = 0;
int avail = 0;
int
avail = 0
avail
= 0
0
qiter = ao2_iterator_init(queues, 0);
qiter = ao2_iterator_init(queues, 0)
qiter
qiter
ao2_iterator_init(queues, 0)
ao2_iterator_init
ao2_iterator_init
queues
queues
0
while ((q = ao2_t_iterator_next(&qiter, "Iterate over queues"))) {		ao2_lock(q);		avail = 0;		found_member = 0;		miter = ao2_iterator_init(q->members, 0);		for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {			if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}			/* check every member until we find one NOT_INUSE */			if (!avail) {				avail = is_member_available(m);			}			if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}		}		if (found_member) {			found = 1;			if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}		}		ao2_iterator_destroy(&miter);		ao2_unlock(q);		queue_t_unref(q, "Done with iterator");	}
(q = ao2_t_iterator_next(&qiter, "Iterate over queues"))
q = ao2_t_iterator_next(&qiter, "Iterate over queues")
q
q
ao2_t_iterator_next(&qiter, "Iterate over queues")
ao2_t_iterator_next
ao2_t_iterator_next
&qiter
qiter
qiter
"Iterate over queues"
{		ao2_lock(q);		avail = 0;		found_member = 0;		miter = ao2_iterator_init(q->members, 0);		for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {			if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}			/* check every member until we find one NOT_INUSE */			if (!avail) {				avail = is_member_available(m);			}			if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}		}		if (found_member) {			found = 1;			if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}		}		ao2_iterator_destroy(&miter);		ao2_unlock(q);		queue_t_unref(q, "Done with iterator");	}
ao2_lock(q);
ao2_lock(q)
ao2_lock
ao2_lock
q
q
avail = 0;
avail = 0
avail
avail
0
found_member = 0;
found_member = 0
found_member
found_member
0
miter = ao2_iterator_init(q->members, 0);
miter = ao2_iterator_init(q->members, 0)
miter
miter
ao2_iterator_init(q->members, 0)
ao2_iterator_init
ao2_iterator_init
q->members
q
q
members
0
for (; (m = ao2_iterator_next(&miter)); ao2_ref(m, -1)) {			if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}			/* check every member until we find one NOT_INUSE */			if (!avail) {				avail = is_member_available(m);			}			if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}		}
;
(m = ao2_iterator_next(&miter))
m = ao2_iterator_next(&miter)
m
m
ao2_iterator_next(&miter)
ao2_iterator_next
ao2_iterator_next
&miter
miter
miter
ao2_ref(m, -1)
ao2_ref
ao2_ref
m
m
-1
1
{			if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}			/* check every member until we find one NOT_INUSE */			if (!avail) {				avail = is_member_available(m);			}			if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}		}
if (!found_member) {				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}
!found_member
found_member
found_member
{				ast_copy_string(interface, m->state_interface, sizeof(interface));				if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}				if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}			}
ast_copy_string(interface, m->state_interface, sizeof(interface));
ast_copy_string(interface, m->state_interface, sizeof(interface))
ast_copy_string
ast_copy_string
interface
interface
m->state_interface
m
m
state_interface
sizeof(interface)
(interface)
interface
interface
if ((slash_pos = strchr(interface, '/'))) {					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}
(slash_pos = strchr(interface, '/'))
slash_pos = strchr(interface, '/')
slash_pos
slash_pos
strchr(interface, '/')
strchr
strchr
interface
interface
'/'
{					if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}				}
if (!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))) {						*slash_pos = '\0';					}
!strncasecmp(interface, "Local/", 6) && (slash_pos = strchr(slash_pos + 1, '/'))
!strncasecmp(interface, "Local/", 6)
strncasecmp(interface, "Local/", 6)
strncasecmp
strncasecmp
interface
interface
"Local/"
6
(slash_pos = strchr(slash_pos + 1, '/'))
slash_pos = strchr(slash_pos + 1, '/')
slash_pos
slash_pos
strchr(slash_pos + 1, '/')
strchr
strchr
slash_pos + 1
slash_pos
slash_pos
1
'/'
{						*slash_pos = '\0';					}
*slash_pos = '\0';
*slash_pos = '\0'
*slash_pos
slash_pos
slash_pos
'\0'
if (!strcasecmp(interface, sc->dev)) {					found_member = 1;					update_status(q, m, sc->state);				}
!strcasecmp(interface, sc->dev)
strcasecmp(interface, sc->dev)
strcasecmp
strcasecmp
interface
interface
sc->dev
sc
sc
dev
{					found_member = 1;					update_status(q, m, sc->state);				}
found_member = 1;
found_member = 1
found_member
found_member
1
update_status(q, m, sc->state);
update_status(q, m, sc->state)
update_status
update_status
q
q
m
m
sc->state
sc
sc
state
if (!avail) {				avail = is_member_available(m);			}
!avail
avail
avail
{				avail = is_member_available(m);			}
avail = is_member_available(m);
avail = is_member_available(m)
avail
avail
is_member_available(m)
is_member_available
is_member_available
m
m
if (avail && found_member) {				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}
avail && found_member
avail
avail
found_member
found_member
{				/* early exit as we've found an available member and the member of interest */				ao2_ref(m, -1);				break;			}
ao2_ref(m, -1);
ao2_ref(m, -1)
ao2_ref
ao2_ref
m
m
-1
1
break;
if (found_member) {			found = 1;			if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}		}
found_member
found_member
{			found = 1;			if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}		}
found = 1;
found = 1
found
found
1
if (avail) {				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			} else {				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}
avail
avail
{				ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);			}
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name);
ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
"Queue:%s_avail"
q->name
q
q
name
{				ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);			}
ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name);
ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_INUSE
AST_DEVICE_INUSE
"Queue:%s_avail"
q->name
q
q
name
ao2_iterator_destroy(&miter);
ao2_iterator_destroy(&miter)
ao2_iterator_destroy
ao2_iterator_destroy
&miter
miter
miter
ao2_unlock(q);
ao2_unlock(q)
ao2_unlock
ao2_unlock
q
q
queue_t_unref(q, "Done with iterator");
queue_t_unref(q, "Done with iterator")
queue_t_unref
queue_t_unref
q
q
"Done with iterator"
ao2_iterator_destroy(&qiter);
ao2_iterator_destroy(&qiter)
ao2_iterator_destroy
ao2_iterator_destroy
&qiter
qiter
qiter
if (found) {		ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state));	} else {		ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state));	}
found
found
{		ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state));	}
ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state));
ast_debug(1, "Device '%s' changed to state '%d' (%s)\n", sc->dev, sc->state, ast_devstate2str(sc->state))
ast_debug
ast_debug
1
"Device '%s' changed to state '%d' (%s)\n"
sc->dev
sc
sc
dev
sc->state
sc
sc
state
ast_devstate2str(sc->state)
ast_devstate2str
ast_devstate2str
sc->state
sc
sc
state
{		ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state));	}
ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state));
ast_debug(3, "Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n", sc->dev, sc->state, ast_devstate2str(sc->state))
ast_debug
ast_debug
3
"Device '%s' changed to state '%d' (%s) but we don't care because they're not a member of any queue.\n"
sc->dev
sc
sc
dev
sc->state
sc
sc
state
ast_devstate2str(sc->state)
ast_devstate2str
ast_devstate2str
sc->state
sc
sc
state
ast_free(sc);
ast_free(sc)
ast_free
ast_free
sc
sc
return 0;
0
-----joern-----
(37,142,0)
(123,10,0)
(106,32,0)
(81,120,0)
(198,49,0)
(191,55,0)
(190,81,0)
(26,61,0)
(168,102,0)
(129,115,0)
(53,128,0)
(21,143,0)
(88,75,0)
(53,135,0)
(77,141,0)
(53,66,0)
(20,59,0)
(91,147,0)
(46,55,0)
(67,24,0)
(52,70,0)
(111,140,0)
(134,54,0)
(190,21,0)
(130,81,0)
(141,186,0)
(12,80,0)
(184,55,0)
(42,74,0)
(182,83,0)
(195,53,0)
(172,72,0)
(110,77,0)
(61,77,0)
(90,24,0)
(164,14,0)
(13,186,0)
(10,14,0)
(58,194,0)
(148,14,0)
(69,43,0)
(82,55,0)
(36,152,0)
(184,120,0)
(60,41,0)
(190,183,0)
(148,138,0)
(135,65,0)
(47,70,0)
(14,148,0)
(80,146,0)
(173,55,0)
(4,178,0)
(152,77,0)
(95,146,0)
(141,77,0)
(146,44,0)
(187,60,0)
(143,120,0)
(189,120,0)
(186,198,0)
(56,190,0)
(147,55,0)
(120,55,0)
(109,106,0)
(192,149,0)
(48,146,0)
(27,55,0)
(8,19,0)
(110,125,0)
(193,152,0)
(121,120,0)
(122,60,0)
(143,21,0)
(163,55,0)
(188,79,0)
(59,54,0)
(185,171,0)
(156,109,0)
(84,100,0)
(74,100,0)
(190,145,0)
(115,77,0)
(137,115,0)
(10,43,0)
(72,172,0)
(72,147,0)
(19,147,0)
(197,66,0)
(18,126,0)
(108,19,0)
(30,178,0)
(172,55,0)
(186,141,0)
(89,177,0)
(15,190,0)
(21,190,0)
(199,55,0)
(74,50,0)
(194,49,0)
(73,173,0)
(165,192,0)
(183,120,0)
(63,55,0)
(176,34,0)
(147,19,0)
(49,194,0)
(87,169,0)
(83,181,0)
(160,192,0)
(131,171,0)
(78,128,0)
(79,115,0)
(39,128,0)
(162,199,0)
(28,110,0)
(183,190,0)
(60,187,0)
(154,7,0)
(119,55,0)
(152,193,0)
(22,34,0)
(39,98,0)
(120,104,0)
(126,18,0)
(96,100,0)
(43,10,0)
(149,106,0)
(114,18,0)
(80,59,0)
(100,14,0)
(94,54,0)
(169,61,0)
(22,181,0)
(34,161,0)
(2,55,0)
(199,53,0)
(140,54,0)
(57,176,0)
(167,43,0)
(153,193,0)
(85,54,0)
(180,143,0)
(166,79,0)
(110,103,0)
(49,198,0)
(127,138,0)
(17,77,0)
(102,193,0)
(1,106,0)
(29,14,0)
(198,54,0)
(9,55,0)
(178,55,0)
(128,126,0)
(33,131,0)
(196,54,0)
(41,120,0)
(11,131,0)
(83,34,0)
(192,120,0)
(103,110,0)
(100,74,0)
(93,143,0)
(136,41,0)
(140,14,0)
(22,59,0)
(116,173,0)
(23,103,0)
(107,59,0)
(174,125,0)
(149,192,0)
(86,164,0)
(115,79,0)
(16,181,0)
(106,149,0)
(115,44,0)
(64,55,0)
(25,7,0)
(18,66,0)
(41,60,0)
(99,74,0)
(98,39,0)
(85,144,0)
(179,148,0)
(109,120,0)
(170,41,0)
(79,120,0)
(132,55,0)
(92,22,0)
(40,184,0)
(101,183,0)
(155,10,0)
(97,183,0)
(43,133,0)
(124,140,0)
(150,194,0)
(113,72,0)
(176,77,0)
(51,94,0)
(38,106,0)
(157,177,0)
(94,14,0)
(68,55,0)
(66,142,0)
(159,81,0)
(22,146,0)
(81,190,0)
(126,128,0)
(139,181,0)
(70,98,0)
(112,18,0)
(175,24,0)
(76,22,0)
(7,106,0)
(164,54,0)
(5,142,0)
(6,135,0)
(181,54,0)
(128,39,0)
(3,199,0)
(7,120,0)
(118,126,0)
(138,147,0)
(61,169,0)
(106,7,0)
(142,66,0)
(115,14,0)
(0,109,0)
(31,70,0)
(35,34,0)
(193,102,0)
(193,177,0)
(144,198,0)
(144,85,0)
(106,109,0)
(117,198,0)
(151,144,0)
(62,49,0)
(194,14,0)
(158,152,0)
(98,70,0)
(34,176,0)
(138,148,0)
(158,36,1)
(182,115,1)
(85,144,1)
(184,40,1)
(30,120,1)
(73,178,1)
(124,111,1)
(18,66,1)
(100,96,1)
(105,174,1)
(165,109,1)
(107,181,1)
(69,45,1)
(105,77,1)
(83,181,1)
(146,48,1)
(87,26,1)
(112,114,1)
(1,71,1)
(155,123,1)
(169,87,1)
(148,138,1)
(100,14,1)
(128,126,1)
(80,146,1)
(176,77,1)
(131,33,1)
(143,120,1)
(180,81,1)
(19,108,1)
(106,7,1)
(21,143,1)
(130,183,1)
(117,59,1)
(86,85,1)
(53,66,1)
(151,74,1)
(182,187,1)
(144,198,1)
(120,104,1)
(61,169,1)
(10,14,1)
(103,23,1)
(20,107,1)
(45,131,1)
(123,167,1)
(29,147,1)
(93,180,1)
(115,79,1)
(40,106,1)
(141,186,1)
(22,34,1)
(122,39,1)
(164,86,1)
(77,141,1)
(166,188,1)
(142,5,1)
(14,148,1)
(97,101,1)
(60,41,1)
(12,77,1)
(3,199,1)
(126,118,1)
(92,76,1)
(42,45,1)
(111,164,1)
(197,193,1)
(115,14,1)
(148,179,1)
(160,165,1)
(183,97,1)
(37,197,1)
(26,22,1)
(176,57,1)
(170,122,1)
(17,198,1)
(96,84,1)
(11,105,1)
(181,16,1)
(43,10,1)
(121,189,1)
(51,14,1)
(83,182,1)
(29,140,1)
(25,38,1)
(114,78,1)
(35,83,1)
(59,20,1)
(135,6,1)
(10,155,1)
(152,158,1)
(34,176,1)
(137,129,1)
(81,159,1)
(47,52,1)
(78,98,1)
(23,28,1)
(4,30,1)
(193,152,1)
(28,22,1)
(138,147,1)
(164,14,1)
(190,183,1)
(94,51,1)
(53,128,1)
(84,99,1)
(61,77,1)
(22,146,1)
(101,56,1)
(190,21,1)
(173,116,1)
(13,17,1)
(38,1,1)
(33,11,1)
(106,109,1)
(66,142,1)
(167,69,1)
(39,128,1)
(76,83,1)
(18,112,1)
(118,18,1)
(159,130,1)
(151,105,1)
(153,80,1)
(49,62,1)
(80,12,1)
(192,160,1)
(15,71,1)
(58,117,1)
(74,100,1)
(113,14,1)
(184,120,1)
(40,190,1)
(199,53,1)
(22,181,1)
(79,166,1)
(98,70,1)
(109,120,1)
(120,121,1)
(136,170,1)
(172,72,1)
(62,194,1)
(22,76,1)
(188,137,1)
(194,14,1)
(156,7,1)
(95,187,1)
(99,42,1)
(39,98,1)
(80,59,1)
(178,4,1)
(138,127,1)
(5,37,1)
(70,31,1)
(198,49,1)
(17,61,1)
(102,168,1)
(143,93,1)
(192,120,1)
(53,195,1)
(183,120,1)
(150,58,1)
(151,43,1)
(154,25,1)
(126,18,1)
(52,66,1)
(179,138,1)
(140,124,1)
(91,173,1)
(174,110,1)
(149,192,1)
(41,120,1)
(195,39,1)
(94,14,1)
(108,8,1)
(76,34,1)
(41,136,1)
(186,13,1)
(129,146,1)
(152,77,1)
(109,0,1)
(57,35,1)
(190,81,1)
(140,14,1)
(194,150,1)
(127,29,1)
(110,103,1)
(186,198,1)
(147,19,1)
(187,60,1)
(106,149,1)
(0,156,1)
(144,151,1)
(22,59,1)
(36,153,1)
(182,80,1)
(22,92,1)
(8,91,1)
(79,120,1)
(49,194,1)
(116,73,1)
(110,77,1)
(72,113,1)
(162,184,1)
(199,162,1)
(16,139,1)
(83,34,1)
(6,53,1)
(56,15,1)
(7,154,1)
(72,147,1)
(168,152,1)
(48,95,1)
(139,94,1)
(115,77,1)
(71,172,1)
(193,102,1)
(122,66,1)
(31,47,1)
(122,135,1)
(81,120,1)
(7,120,1)
(115,14,2)
(49,14,2)
(43,45,2)
(100,45,2)
(83,77,2)
(66,80,2)
(53,128,2)
(155,45,2)
(110,103,2)
(100,14,2)
(179,14,2)
(128,98,2)
(39,66,2)
(117,14,2)
(111,14,2)
(151,14,2)
(160,71,2)
(78,98,2)
(142,80,2)
(186,22,2)
(22,181,2)
(7,120,2)
(194,14,2)
(41,120,2)
(198,49,2)
(23,22,2)
(143,71,2)
(159,71,2)
(149,192,2)
(181,14,2)
(183,120,2)
(146,187,2)
(94,14,2)
(97,71,2)
(81,71,2)
(28,22,2)
(21,71,2)
(0,71,2)
(190,21,2)
(153,80,2)
(34,83,2)
(3,199,2)
(72,147,2)
(187,80,2)
(6,39,2)
(77,14,2)
(169,22,2)
(167,45,2)
(126,18,2)
(85,14,2)
(106,149,2)
(35,83,2)
(114,98,2)
(60,80,2)
(118,98,2)
(138,147,2)
(34,176,2)
(184,120,2)
(102,80,2)
(147,19,2)
(80,146,2)
(70,66,2)
(144,198,2)
(115,77,2)
(86,14,2)
(96,45,2)
(53,66,2)
(14,14,2)
(198,14,2)
(144,14,2)
(80,59,2)
(21,143,2)
(17,14,2)
(152,77,2)
(77,22,2)
(37,80,2)
(143,120,2)
(61,77,2)
(165,71,2)
(135,39,2)
(123,45,2)
(166,187,2)
(156,71,2)
(87,22,2)
(92,76,2)
(174,22,2)
(168,80,2)
(99,45,2)
(105,14,2)
(39,98,2)
(154,71,2)
(22,146,2)
(149,71,2)
(115,187,2)
(137,187,2)
(52,66,2)
(7,71,2)
(95,187,2)
(190,183,2)
(11,105,2)
(182,77,2)
(136,80,2)
(66,142,2)
(101,71,2)
(60,41,2)
(36,80,2)
(141,186,2)
(195,39,2)
(110,77,2)
(39,128,2)
(129,187,2)
(148,14,2)
(107,14,2)
(109,71,2)
(187,60,2)
(131,105,2)
(76,77,2)
(93,71,2)
(57,83,2)
(183,71,2)
(22,59,2)
(17,22,2)
(103,22,2)
(124,14,2)
(128,126,2)
(1,71,2)
(197,80,2)
(120,104,2)
(18,98,2)
(61,22,2)
(26,22,2)
(61,169,2)
(115,79,2)
(122,80,2)
(190,81,2)
(150,14,2)
(164,14,2)
(84,45,2)
(79,120,2)
(193,102,2)
(13,14,2)
(172,72,2)
(85,144,2)
(158,80,2)
(18,66,2)
(109,120,2)
(10,14,2)
(16,14,2)
(186,198,2)
(41,80,2)
(98,70,2)
(106,109,2)
(31,66,2)
(106,7,2)
(77,141,2)
(190,71,2)
(20,14,2)
(13,22,2)
(12,77,2)
(59,14,2)
(176,77,2)
(15,71,2)
(38,71,2)
(22,34,2)
(83,181,2)
(74,100,2)
(81,120,2)
(42,45,2)
(74,45,2)
(29,14,2)
(199,53,2)
(139,14,2)
(188,187,2)
(152,80,2)
(22,77,2)
(5,80,2)
(176,83,2)
(193,80,2)
(80,77,2)
(106,71,2)
(170,80,2)
(180,71,2)
(56,71,2)
(130,71,2)
(138,14,2)
(69,45,2)
(45,105,2)
(10,45,2)
(148,138,2)
(112,98,2)
(51,14,2)
(192,120,2)
(193,152,2)
(43,10,2)
(141,14,2)
(33,105,2)
(126,98,2)
(141,22,2)
(192,71,2)
(25,71,2)
(49,194,2)
(53,39,2)
(83,34,2)
(98,66,2)
(140,14,2)
(14,148,2)
(186,14,2)
(110,22,2)
(48,187,2)
(58,14,2)
(47,66,2)
(79,187,2)
(127,14,2)
(62,14,2)
-----------------------------------
(0,state)
(1,1)
(2,qiter)
(3,RET)
(4,0)
(5,\'/\')
(6,\'\\0\')
(7,sc->dev)
(8,queues)
(9,q)
(10,q->name)
(11,found)
(12,found_member)
(13,miter)
(14,q = ao2_t_iterator_next(&qiter, "Iterate over queues")
(15,3)
(16,0)
(17,m)
(18,slash_pos + 1)
(19,ao2_iterator_init(queues, 0)
(20,0)
(21,ast_devstate2str(sc->state)
(22,avail && found_member)
(23,1)
(24,)
(25,sc)
(26,m)
(27,if (found)
(28,m)
(29,q)
(30,found)
(31,6)
(32,)
(33,1)
(34,avail = is_member_available(m)
(35,avail)
(36,m)
(37,interface)
(38,"Device \'%s\' changed to state \'%d\' (%s)
(39,!strncasecmp(interface, "Local/", 6)
(40,sc)
(41,sc->dev)
(42,AST_DEVICE_INUSE)
(43,ast_devstate_changed(AST_DEVICE_NOT_INUSE, "Queue:%s_avail", q->name)
(44,)
(45,avail)
(46,sc)
(47,"Local/")
(48,1)
(49,ao2_iterator_init(q->members, 0)
(50,)
(51,q)
(52,interface)
(53,*slash_pos)
(54,)
(55,)
(56,"Device \'%s\' changed to state \'%d\' (%s)
(57,m)
(58,q)
(59,found_member = 0)
(60,strcasecmp(interface, sc->dev)
(61,ao2_ref(m, -1)
(62,0)
(63,avail)
(64,interface)
(65,)
(66,slash_pos = strchr(interface, \'/\')
(67,if (avail && found_member)
(68,while ((q = ao2_t_iterator_next(&qiter, "Iterate over queues")
(69,AST_DEVICE_NOT_INUSE)
(70,strncasecmp(interface, "Local/", 6)
(71,found)
(72,&qiter)
(73,avail)
(74,ast_devstate_changed(AST_DEVICE_INUSE, "Queue:%s_avail", q->name)
(75,)
(76,avail)
(77,m = ao2_iterator_next(&miter)
(78,slash_pos)
(79,sc->state)
(80,!found_member)
(81,sc->state)
(82,miter)
(83,!avail)
(84,q)
(85,ao2_iterator_destroy(&miter)
(86,q)
(87,1)
(88,if (!strncasecmp(interface, "Local/", 6)
(89,if ((slash_pos = strchr(interface, \'/\')
(90,if (!avail)
(91,qiter)
(92,found_member)
(93,state)
(94,ao2_lock(q)
(95,found_member)
(96,name)
(97,dev)
(98,!strncasecmp(interface, "Local/", 6)
(99,"Queue:%s_avail")
(100,q->name)
(101,sc)
(102,sizeof(interface)
(103,-1)
(104,void *datap)
(105,found_member)
(106,ast_debug(1, "Device \'%s\' changed to state \'%d\' (%s)
(107,found_member)
(108,0)
(109,sc->state)
(110,ao2_ref(m, -1)
(111,q)
(112,1)
(113,qiter)
(114,slash_pos)
(115,update_status(q, m, sc->state)
(116,0)
(117,miter)
(118,\'/\')
(119,found_member)
(120,*sc = datap)
(121,datap)
(122,interface)
(123,q)
(124,"Done with iterator")
(125,)
(126,strchr(slash_pos + 1, \'/\')
(127,qiter)
(128,slash_pos = strchr(slash_pos + 1, \'/\')
(129,q)
(130,sc)
(131,found = 1)
(132,m)
(133,)
(134,for (; (m = ao2_iterator_next(&miter)
(135,*slash_pos = \'\\0\')
(136,dev)
(137,m)
(138,&qiter)
(139,avail)
(140,queue_t_unref(q, "Done with iterator")
(141,ao2_iterator_next(&miter)
(142,strchr(interface, \'/\')
(143,sc->state)
(144,&miter)
(145,)
(146,found_member = 1)
(147,qiter = ao2_iterator_init(queues, 0)
(148,ao2_t_iterator_next(&qiter, "Iterate over queues")
(149,ast_devstate2str(sc->state)
(150,members)
(151,miter)
(152,m->state_interface)
(153,interface)
(154,dev)
(155,name)
(156,sc)
(157,if (!strcasecmp(interface, sc->dev)
(158,state_interface)
(159,state)
(160,state)
(161,)
(162,0)
(163,found)
(164,ao2_unlock(q)
(165,sc)
(166,state)
(167,"Queue:%s_avail")
(168,interface)
(169,-1)
(170,sc)
(171,)
(172,ao2_iterator_destroy(&qiter)
(173,avail = 0)
(174,break;)
(175,if (!found_member)
(176,is_member_available(m)
(177,)
(178,found = 0)
(179,"Iterate over queues")
(180,sc)
(181,avail = 0)
(182,avail)
(183,sc->dev)
(184,ast_free(sc)
(185,if (avail)
(186,&miter)
(187,!strcasecmp(interface, sc->dev)
(188,sc)
(189,sc)
(190,ast_debug(3, "Device \'%s\' changed to state \'%d\' (%s)
(191,slash_pos)
(192,sc->state)
(193,ast_copy_string(interface, m->state_interface, sizeof(interface)
(194,q->members)
(195,slash_pos)
(196,if (found_member)
(197,slash_pos)
(198,miter = ao2_iterator_init(q->members, 0)
(199,return 0;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^