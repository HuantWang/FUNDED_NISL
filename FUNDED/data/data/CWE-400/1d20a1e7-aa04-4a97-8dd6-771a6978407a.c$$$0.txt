-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(5==5)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(5==5)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
29,31
30,31
30,32
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,19,20,25,28,31,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
18,19
18,20
23,24
23,25
30,31
30,32
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad(){    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_03_bad
{    size_t data;    /* Initialize data */    data = 0;    if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
5==5
5
5
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(5==5)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
5==5
5
5
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(2,16,0)
(22,29,0)
(28,36,0)
(52,38,0)
(34,3,0)
(29,21,0)
(17,6,0)
(22,13,0)
(7,20,0)
(47,3,0)
(46,27,0)
(13,22,0)
(24,30,0)
(43,20,0)
(3,49,0)
(15,22,0)
(4,21,0)
(49,42,0)
(35,36,0)
(34,36,0)
(16,0,0)
(48,3,0)
(31,25,0)
(18,17,0)
(45,25,0)
(22,42,0)
(42,49,0)
(37,47,0)
(5,8,0)
(25,3,0)
(28,3,0)
(32,30,0)
(49,40,0)
(16,8,0)
(22,8,0)
(16,29,0)
(53,28,0)
(40,49,0)
(50,29,0)
(3,36,0)
(1,29,0)
(26,21,0)
(41,47,0)
(14,34,0)
(44,21,0)
(33,13,0)
(8,39,0)
(19,0,0)
(49,3,0)
(0,16,0)
(12,8,0)
(25,36,0)
(38,52,0)
(10,27,0)
(8,12,0)
(20,23,0)
(42,22,0)
(52,51,0)
(9,38,0)
(8,12,1)
(11,30,1)
(46,10,1)
(19,2,1)
(41,3,1)
(15,48,1)
(16,0,1)
(2,30,1)
(28,3,1)
(45,47,1)
(25,31,1)
(34,14,1)
(11,34,1)
(5,27,1)
(13,33,1)
(48,16,1)
(32,8,1)
(33,15,1)
(30,24,1)
(34,3,1)
(37,41,1)
(27,46,1)
(50,1,1)
(16,8,1)
(22,29,1)
(22,8,1)
(3,49,1)
(12,5,1)
(49,40,1)
(28,53,1)
(18,16,1)
(45,52,1)
(31,45,1)
(17,18,1)
(29,50,1)
(53,25,1)
(49,42,1)
(16,29,1)
(9,47,1)
(25,3,1)
(42,22,1)
(47,3,1)
(24,32,1)
(11,17,1)
(38,9,1)
(22,13,1)
(14,28,1)
(0,19,1)
(52,38,1)
(32,27,1)
(47,37,1)
(10,29,1)
(15,16,2)
(34,16,2)
(14,16,2)
(16,8,2)
(5,27,2)
(52,47,2)
(45,16,2)
(16,30,2)
(25,16,2)
(3,16,2)
(19,30,2)
(22,16,2)
(49,42,2)
(34,3,2)
(47,16,2)
(52,38,2)
(18,16,2)
(8,12,2)
(16,29,2)
(22,13,2)
(47,3,2)
(41,16,2)
(28,3,2)
(38,47,2)
(31,16,2)
(53,16,2)
(12,27,2)
(49,16,2)
(22,8,2)
(2,30,2)
(9,47,2)
(42,22,2)
(49,40,2)
(42,16,2)
(28,16,2)
(37,16,2)
(8,27,2)
(33,16,2)
(48,16,2)
(17,16,2)
(25,3,2)
(0,30,2)
(16,0,2)
(13,16,2)
(3,49,2)
(22,29,2)
-----------------------------------
(0,strlen(HELLO_STRING)
(1,data)
(2,data)
(3,myString = (char *)
(4,data)
(5,data)
(6,)
(7,myString)
(8,data = rand()
(9,1)
(10,5)
(11,RET)
(12,rand()
(13,sizeof(char)
(14,myString)
(15,data)
(16,data > strlen(HELLO_STRING)
(17,printLine("Input is less than the length of the source string")
(18,"Input is less than the length of the source string")
(19,HELLO_STRING)
(20,)
(21,)
(22,data*sizeof(char)
(23,)
(24,5)
(25,strcpy(myString, HELLO_STRING)
(26,if(5==5)
(27,5==5)
(28,printLine(myString)
(29,data = 0)
(30,5==5)
(31,HELLO_STRING)
(32,5)
(33,char)
(34,free(myString)
(35,if (myString == NULL)
(36,)
(37,NULL)
(38,-1)
(39,)
(40,char *)
(41,myString)
(42,malloc(data*sizeof(char)
(43,if (data > strlen(HELLO_STRING)
(44,if(5==5)
(45,myString)
(46,5)
(47,myString == NULL)
(48,myString)
(49,(char *)
(50,0)
(51,)
(52,exit(-1)
(53,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^