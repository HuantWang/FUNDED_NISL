-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(7,2,0)
(20,11,0)
(48,34,0)
(26,41,0)
(42,6,0)
(43,31,0)
(18,5,0)
(20,6,0)
(39,11,0)
(14,18,0)
(32,10,0)
(44,37,0)
(9,42,0)
(17,44,0)
(40,5,0)
(42,30,0)
(33,34,0)
(5,18,0)
(31,16,0)
(28,34,0)
(19,27,0)
(28,47,0)
(2,34,0)
(15,32,0)
(24,41,0)
(38,28,0)
(0,48,0)
(32,15,0)
(11,42,0)
(34,47,0)
(13,6,0)
(46,30,0)
(30,36,0)
(31,43,0)
(25,27,0)
(35,47,0)
(1,20,0)
(16,31,0)
(30,42,0)
(22,43,0)
(3,31,0)
(48,16,0)
(12,15,0)
(21,2,0)
(18,20,0)
(11,20,0)
(27,6,0)
(48,0,0)
(34,48,0)
(2,47,0)
(4,45,0)
(16,48,0)
(30,46,0)
(23,6,0)
(45,34,0)
(31,20,0)
(41,34,0)
(29,30,0)
(45,47,0)
(8,28,1)
(39,1,1)
(30,29,1)
(48,16,1)
(20,11,1)
(43,22,1)
(1,42,1)
(29,9,1)
(31,43,1)
(32,15,1)
(16,31,1)
(26,34,1)
(45,34,1)
(18,20,1)
(28,34,1)
(17,18,1)
(24,26,1)
(11,39,1)
(42,30,1)
(7,21,1)
(44,17,1)
(21,41,1)
(38,45,1)
(34,48,1)
(15,12,1)
(40,14,1)
(11,42,1)
(21,32,1)
(4,2,1)
(2,34,1)
(28,38,1)
(31,20,1)
(30,46,1)
(8,44,1)
(41,34,1)
(41,24,1)
(12,41,1)
(48,0,1)
(30,36,1)
(5,40,1)
(45,4,1)
(3,33,1)
(18,5,1)
(22,3,1)
(14,20,1)
(2,7,1)
(33,18,1)
(4,18,2)
(32,41,2)
(48,18,2)
(11,42,2)
(48,16,2)
(15,41,2)
(16,31,2)
(41,18,2)
(24,18,2)
(44,18,2)
(21,18,2)
(7,18,2)
(2,34,2)
(30,46,2)
(28,18,2)
(18,5,2)
(42,30,2)
(30,36,2)
(31,43,2)
(31,20,2)
(33,18,2)
(18,20,2)
(31,18,2)
(48,0,2)
(12,41,2)
(22,18,2)
(45,18,2)
(34,48,2)
(32,15,2)
(17,18,2)
(3,18,2)
(38,18,2)
(41,34,2)
(43,18,2)
(28,34,2)
(26,18,2)
(20,11,2)
(45,34,2)
(34,18,2)
(2,18,2)
(16,18,2)
-----------------------------------
(0,char *)
(1,data)
(2,strcpy(myString, HELLO_STRING)
(3,data)
(4,myString)
(5,strlen(HELLO_STRING)
(6,)
(7,HELLO_STRING)
(8,RET)
(9,dataPtr)
(10,)
(11,*dataPtr)
(12,1)
(13,data)
(14,data)
(15,-1)
(16,malloc(data*sizeof(char)
(17,"Input is less than the length of the source string")
(18,data > strlen(HELLO_STRING)
(19,myString)
(20,data = (*dataPtr)
(21,myString)
(22,char)
(23,dataPtr)
(24,NULL)
(25,if (data > strlen(HELLO_STRING)
(26,myString)
(27,)
(28,free(myString)
(29,dataVoidPtr)
(30,(size_t *)
(31,data*sizeof(char)
(32,exit(-1)
(33,myString)
(34,myString = (char *)
(35,if (myString == NULL)
(36,void * dataVoidPtr)
(37,)
(38,myString)
(39,dataPtr)
(40,HELLO_STRING)
(41,myString == NULL)
(42,* dataPtr = (size_t *)
(43,sizeof(char)
(44,printLine("Input is less than the length of the source string")
(45,printLine(myString)
(46,size_t *)
(47,)
(48,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^