-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_44_bad()
{
    wchar_t * data;
    /* define a function pointer */
    void (*funcPtr) (wchar_t *) = badSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (wchar_t *)malloc(100*sizeof(wchar_t));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    wcscpy(data, L"A String");
    printWLine(data);
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,49,50,54,56,61,63,67,69,70,74,76,80,82
-----computeFrom-----
28,29
28,30
34,35
34,36
45,46
45,47
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_44_bad(){    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
void
CWE401_Memory_Leak__wchar_t_malloc_44_bad()
CWE401_Memory_Leak__wchar_t_malloc_44_bad
{    wchar_t * data;    /* define a function pointer */    void (*funcPtr) (wchar_t *) = badSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (wchar_t *)malloc(100*sizeof(wchar_t));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    wcscpy(data, L"A String");    printWLine(data);    /* use the function pointer */    funcPtr(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
void (*funcPtr) (wchar_t *) = badSink;
void (*funcPtr) (wchar_t *) = badSink;
void
(*funcPtr) (wchar_t *) = badSink
*funcPtr
*
funcPtr
wchar_t *
wchar_t
*
*

= badSink
badSink
badSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(2,7,0)
(29,20,0)
(19,1,0)
(26,10,0)
(26,24,0)
(1,10,0)
(7,10,0)
(24,26,0)
(16,24,0)
(23,10,0)
(4,10,0)
(14,3,0)
(0,7,0)
(5,10,0)
(5,26,0)
(3,14,0)
(20,29,0)
(20,17,0)
(15,1,0)
(21,4,0)
(24,16,0)
(30,26,0)
(22,3,0)
(27,3,0)
(25,10,0)
(14,24,0)
(6,30,0)
(4,26,0)
(9,5,0)
(24,14,0)
(28,10,0)
(18,29,0)
(11,27,0)
(3,27,0)
(12,30,0)
(13,26,0)
(12,6,1)
(9,4,1)
(13,1,1)
(8,5,1)
(3,27,1)
(14,3,1)
(1,15,1)
(7,2,1)
(6,26,1)
(11,22,1)
(21,30,1)
(22,13,1)
(4,21,1)
(2,0,1)
(29,18,1)
(21,20,1)
(27,11,1)
(19,7,1)
(5,26,1)
(26,24,1)
(24,16,1)
(20,29,1)
(4,26,1)
(18,30,1)
(24,14,1)
(5,9,1)
(15,19,1)
(30,26,1)
(30,12,1)
(3,27,2)
(20,30,2)
(5,26,2)
(26,24,2)
(24,16,2)
(4,26,2)
(14,3,2)
(24,14,2)
(29,30,2)
(30,26,2)
(20,29,2)
(18,30,2)
-----------------------------------
(0,funcPtr)
(1,data = NULL)
(2,badSink)
(3,100*sizeof(wchar_t)
(4,printWLine(data)
(5,funcPtr(data)
(6,data)
(7,(*funcPtr)
(8,RET)
(9,data)
(10,)
(11,wchar_t)
(12,NULL)
(13,data)
(14,malloc(100*sizeof(wchar_t)
(15,NULL)
(16,wchar_t *)
(17,)
(18,1)
(19,data)
(20,exit(-1)
(21,data)
(22,100)
(23,funcPtr)
(24,(wchar_t *)
(25,data)
(26,data = (wchar_t *)
(27,sizeof(wchar_t)
(28,if (data == NULL)
(29,-1)
(30,data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^