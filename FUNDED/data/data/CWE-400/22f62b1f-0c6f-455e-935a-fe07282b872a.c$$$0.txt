-----label-----
0
-----code-----
static void goodB2G()
{
    int * data;
    CWE401_Memory_Leak__int_realloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)realloc(data, 100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
73,74
73,75
74,75
74,76
75,76
78,79
80,81
80,82
81,82
82,83
82,84
84,85
84,86
84,87
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,76,77,79,83,85,86,90,91,95,97
-----computeFrom-----
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int * data;    CWE401_Memory_Leak__int_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G()
goodB2G
{    int * data;    CWE401_Memory_Leak__int_realloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)realloc(data, 100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* FIX: Deallocate memory */        free(data);    }}
int * data;
int * data;
int
* data
*
data
CWE401_Memory_Leak__int_realloc_34_unionType myUnion;
CWE401_Memory_Leak__int_realloc_34_unionType myUnion;
CWE401_Memory_Leak__int_realloc_34_unionType
CWE401_Memory_Leak__int_realloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        /* FIX: Deallocate memory */        free(data);    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
free(data);
free(data)
free
free
data
data
-----joern-----
(3,15,0)
(12,9,0)
(29,17,0)
(43,46,0)
(31,18,0)
(27,44,0)
(5,8,0)
(45,29,0)
(46,1,0)
(18,4,0)
(22,18,0)
(34,22,0)
(19,22,0)
(18,31,0)
(30,28,0)
(6,15,0)
(39,13,0)
(14,1,0)
(31,35,0)
(37,13,0)
(34,41,0)
(1,46,0)
(35,9,0)
(42,31,0)
(0,46,0)
(24,8,0)
(47,26,0)
(10,9,0)
(23,9,0)
(38,8,0)
(17,29,0)
(44,9,0)
(4,18,0)
(26,22,0)
(36,26,0)
(31,13,0)
(22,9,0)
(13,37,0)
(17,21,0)
(28,44,0)
(13,31,0)
(40,35,0)
(32,34,0)
(25,41,0)
(5,9,0)
(20,35,0)
(28,1,0)
(16,34,0)
(2,23,0)
(8,22,0)
(18,22,0)
(41,9,0)
(1,44,0)
(8,5,0)
(11,9,0)
(15,23,0)
(33,37,0)
(8,41,0)
(23,22,0)
(19,35,1)
(0,43,1)
(33,39,1)
(20,40,1)
(34,16,1)
(26,22,1)
(36,22,1)
(3,6,1)
(30,1,1)
(24,41,1)
(5,8,1)
(39,42,1)
(1,46,1)
(45,26,1)
(25,34,1)
(28,30,1)
(26,47,1)
(7,28,1)
(22,18,1)
(43,14,1)
(46,0,1)
(38,24,1)
(23,22,1)
(31,35,1)
(13,37,1)
(31,13,1)
(32,17,1)
(8,38,1)
(37,33,1)
(14,23,1)
(42,19,1)
(8,22,1)
(35,20,1)
(2,15,1)
(6,5,1)
(47,36,1)
(28,1,1)
(29,45,1)
(18,31,1)
(16,32,1)
(34,22,1)
(8,41,1)
(15,3,1)
(23,2,1)
(17,29,1)
(41,25,1)
(18,4,1)
(32,26,1)
(8,41,2)
(17,29,2)
(8,22,2)
(23,22,2)
(5,8,2)
(26,22,2)
(28,1,2)
(31,13,2)
(1,46,2)
(29,26,2)
(13,37,2)
(18,4,2)
(34,22,2)
(17,26,2)
(31,35,2)
(22,18,2)
(45,26,2)
(18,31,2)
-----------------------------------
(0,unionSecond)
(1,* data = myUnion.unionSecond)
(2,data)
(3,unionFirst)
(4,int *)
(5,printIntLine(data[0])
(6,myUnion)
(7,RET)
(8,data[0])
(9,)
(10,data)
(11,if (data == NULL)
(12,myUnion)
(13,100*sizeof(int)
(14,data)
(15,myUnion.unionFirst)
(16,0)
(17,exit(-1)
(18,(int *)
(19,data)
(20,NULL)
(21,)
(22,data = (int *)
(23,myUnion.unionFirst = data)
(24,data)
(25,5)
(26,data == NULL)
(27,data)
(28,free(data)
(29,-1)
(30,data)
(31,realloc(data, 100*sizeof(int)
(32,data)
(33,int)
(34,data[0])
(35,data = NULL)
(36,data)
(37,sizeof(int)
(38,0)
(39,100)
(40,data)
(41,data[0] = 5)
(42,data)
(43,myUnion)
(44,)
(45,1)
(46,myUnion.unionSecond)
(47,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^