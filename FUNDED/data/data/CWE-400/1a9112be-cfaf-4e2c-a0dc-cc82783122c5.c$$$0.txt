-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
61,64
62,63
64,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
72,73
73,74
73,75
74,75
76,77
76,78
78,79
80,81
80,82
81,82
81,83
82,83
82,84
83,84
86,87
86,88
87,88
90,91
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
110,111
111,112
112,113
112,114
113,114
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,69,75,77,79,84,85,88,89,95,96,99,103,104,106,109,114,115
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
81,82
81,83
82,83
82,84
86,87
86,88
93,94
93,95
97,98
97,99
-----guardedBy-----
38,54
88,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,9,0)
(43,15,0)
(40,29,0)
(34,23,0)
(20,49,0)
(5,25,0)
(62,42,0)
(41,50,0)
(8,16,0)
(26,25,0)
(37,28,0)
(17,52,0)
(4,40,0)
(9,16,0)
(18,34,0)
(15,43,0)
(52,47,0)
(53,52,0)
(22,46,0)
(56,0,0)
(1,56,0)
(31,19,0)
(45,29,0)
(33,47,0)
(43,39,0)
(57,61,0)
(2,37,0)
(9,24,0)
(24,19,0)
(51,39,0)
(9,28,0)
(19,16,0)
(28,37,0)
(43,28,0)
(27,47,0)
(39,43,0)
(58,43,0)
(43,16,0)
(10,19,0)
(55,40,0)
(11,33,0)
(3,25,0)
(16,33,0)
(47,34,0)
(52,42,0)
(60,9,0)
(29,6,0)
(19,24,0)
(32,28,0)
(49,38,0)
(63,26,0)
(16,48,0)
(42,52,0)
(28,46,0)
(36,52,0)
(35,57,0)
(19,28,0)
(30,47,0)
(44,46,0)
(39,25,0)
(59,46,0)
(24,9,0)
(33,16,0)
(7,34,0)
(21,29,0)
(30,12,1)
(3,24,1)
(20,13,1)
(16,33,1)
(31,9,1)
(58,51,1)
(52,53,1)
(28,37,1)
(14,40,1)
(57,35,1)
(19,10,1)
(24,19,1)
(26,63,1)
(24,9,1)
(62,52,1)
(36,47,1)
(54,39,1)
(43,16,1)
(60,14,1)
(35,39,1)
(11,8,1)
(51,25,1)
(42,62,1)
(8,42,1)
(13,56,1)
(9,28,1)
(17,36,1)
(49,20,1)
(33,47,1)
(53,17,1)
(43,15,1)
(42,52,1)
(19,16,1)
(27,30,1)
(9,16,1)
(63,57,1)
(40,55,1)
(10,31,1)
(39,25,1)
(39,43,1)
(1,42,1)
(52,47,1)
(47,27,1)
(54,49,1)
(43,58,1)
(12,28,1)
(54,24,1)
(19,28,1)
(37,2,1)
(26,25,1)
(13,12,1)
(2,32,1)
(13,16,1)
(55,4,1)
(5,3,1)
(56,1,1)
(25,5,1)
(33,11,1)
(4,13,1)
(43,28,1)
(51,26,1)
(9,60,1)
(4,13,2)
(16,33,2)
(25,24,2)
(17,12,2)
(52,47,2)
(10,9,2)
(58,24,2)
(47,12,2)
(53,12,2)
(43,28,2)
(39,25,2)
(14,13,2)
(3,24,2)
(36,12,2)
(33,42,2)
(1,42,2)
(52,12,2)
(27,12,2)
(11,42,2)
(43,16,2)
(19,9,2)
(8,42,2)
(58,39,2)
(63,39,2)
(43,24,2)
(55,13,2)
(24,13,2)
(24,9,2)
(20,13,2)
(9,16,2)
(5,24,2)
(28,37,2)
(39,43,2)
(39,39,2)
(43,39,2)
(33,47,2)
(42,12,2)
(24,19,2)
(43,15,2)
(39,24,2)
(9,28,2)
(9,13,2)
(19,28,2)
(51,39,2)
(31,9,2)
(16,42,2)
(56,42,2)
(60,13,2)
(57,39,2)
(19,16,2)
(51,24,2)
(26,25,2)
(35,39,2)
(26,39,2)
(42,52,2)
(62,12,2)
(30,12,2)
(49,13,2)
(40,13,2)
-----------------------------------
(0,)
(1,"fgets()
(2,1)
(3,i)
(4,i)
(5,0)
(6,)
(7,inputBuffer)
(8,count)
(9,count > 0)
(10,20)
(11,inputBuffer)
(12,GLOBAL_CONST_TRUE)
(13,GLOBAL_CONST_FALSE)
(14,count)
(15,size_t)
(16,count = atoi(inputBuffer)
(17,CHAR_ARRAY_SIZE)
(18,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(19,count <= 20)
(20,"Benign, fixed string")
(21,if (count > 0 && count <= 20)
(22,if(GLOBAL_CONST_TRUE)
(23,)
(24,count > 0 && count <= 20)
(25,i = 0)
(26,i++)
(27,"")
(28,count = -1)
(29,)
(30,inputBuffer)
(31,count)
(32,count)
(33,atoi(inputBuffer)
(34,)
(35,"Hello")
(36,inputBuffer)
(37,-1)
(38,)
(39,i < (size_t)
(40,i = 0)
(41,for (i = 0; i < (size_t)
(42,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(43,(size_t)
(44,if(GLOBAL_CONST_FALSE)
(45,i)
(46,)
(47,inputBuffer[CHAR_ARRAY_SIZE] = "")
(48,)
(49,printLine("Benign, fixed string")
(50,)
(51,i)
(52,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(53,stdin)
(54,RET)
(55,0)
(56,printLine("fgets()
(57,printLine("Hello")
(58,count)
(59,count)
(60,0)
(61,)
(62,NULL)
(63,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^