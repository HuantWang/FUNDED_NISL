-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_34_bad()
{
    int * data;
    CWE401_Memory_Leak__int_calloc_34_unionType myUnion;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    myUnion.unionFirst = data;
    {
        int * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
5,14
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
75,76
77,78
77,79
78,79
79,80
79,81
81,82
81,83
81,84
84,85
85,86
85,87
86,87
-----nextToken-----
2,4,8,10,11,15,17,21,23,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,73,74,76,80,82,83,87,88,89
-----computeFrom-----
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_34_bad(){    int * data;    CWE401_Memory_Leak__int_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_34_bad()
CWE401_Memory_Leak__int_calloc_34_bad
{    int * data;    CWE401_Memory_Leak__int_calloc_34_unionType myUnion;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    myUnion.unionFirst = data;    {        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
CWE401_Memory_Leak__int_calloc_34_unionType myUnion;
CWE401_Memory_Leak__int_calloc_34_unionType myUnion;
CWE401_Memory_Leak__int_calloc_34_unionType
CWE401_Memory_Leak__int_calloc_34_unionType
myUnion
myUnion
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        int * data = myUnion.unionSecond;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
int * data = myUnion.unionSecond;
int * data = myUnion.unionSecond;
int
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
;
-----joern-----
(36,38,0)
(44,41,0)
(5,14,0)
(10,17,0)
(27,44,0)
(32,11,0)
(20,24,0)
(14,5,0)
(29,31,0)
(33,11,0)
(26,28,0)
(43,41,0)
(1,5,0)
(30,31,0)
(44,27,0)
(38,5,0)
(14,37,0)
(21,36,0)
(16,11,0)
(9,44,0)
(5,31,0)
(19,38,0)
(40,2,0)
(39,1,0)
(18,31,0)
(17,14,0)
(42,25,0)
(3,31,0)
(11,16,0)
(2,41,0)
(28,17,0)
(14,17,0)
(42,24,0)
(17,28,0)
(38,31,0)
(35,12,0)
(34,1,0)
(6,44,0)
(12,31,0)
(24,42,0)
(22,36,0)
(0,2,0)
(15,16,0)
(23,18,0)
(8,5,0)
(4,12,0)
(27,31,0)
(44,5,0)
(37,14,0)
(16,18,0)
(2,5,0)
(41,31,0)
(6,41,1)
(26,10,1)
(2,5,1)
(36,22,1)
(21,27,1)
(1,34,1)
(27,44,1)
(24,20,1)
(0,1,1)
(13,16,1)
(44,9,1)
(12,35,1)
(44,41,1)
(28,26,1)
(8,12,1)
(20,1,1)
(39,5,1)
(41,43,1)
(5,14,1)
(10,8,1)
(0,42,1)
(42,24,1)
(32,15,1)
(19,36,1)
(38,19,1)
(15,38,1)
(44,5,1)
(2,40,1)
(14,37,1)
(33,32,1)
(9,6,1)
(14,17,1)
(34,39,1)
(17,28,1)
(16,11,1)
(1,5,1)
(11,33,1)
(35,4,1)
(40,0,1)
(38,5,1)
(43,2,1)
(22,21,1)
(5,14,2)
(1,5,2)
(14,37,2)
(42,1,2)
(24,1,2)
(2,5,2)
(27,44,2)
(20,1,2)
(16,11,2)
(14,17,2)
(38,5,2)
(42,24,2)
(17,28,2)
(44,41,2)
(44,5,2)
-----------------------------------
(0,data)
(1,data == NULL)
(2,data[0])
(3,myUnion)
(4,data)
(5,data = (int *)
(6,data)
(7, sizeof(int)
(8,data)
(9,0)
(10,100)
(11,myUnion.unionSecond)
(12,data = NULL)
(13,RET)
(14,(int *)
(15,data)
(16,* data = myUnion.unionSecond)
(17,calloc(100, sizeof(int)
(18,)
(19,data)
(20,1)
(21,myUnion)
(22,unionFirst)
(23,data)
(24,-1)
(25,)
(26,int)
(27,printIntLine(data[0])
(28,sizeof(int)
(29,if (data == NULL)
(30,data)
(31,)
(32,myUnion)
(33,unionSecond)
(34,NULL)
(35,NULL)
(36,myUnion.unionFirst)
(37,int *)
(38,myUnion.unionFirst = data)
(39,data)
(40,0)
(41,data[0] = 5)
(42,exit(-1)
(43,5)
(44,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^