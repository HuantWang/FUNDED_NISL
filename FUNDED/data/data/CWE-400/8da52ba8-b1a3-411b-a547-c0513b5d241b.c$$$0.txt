-----label-----
1
-----code-----
size_t hashfn(const char *key, size_t tablen)
{
	long hashVal = 0;
	while (*key != '\0') {
		hashVal = (hashVal << 4) + *(key++);
		long g = hashVal & 0xF0000000L;
		if (g != 0) hashVal ^= g >> 24;
		hashVal &= ~g;
	}
	return hashVal % tablen;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
17,18
18,19
18,20
20,21
20,22
22,23
24,25
24,26
25,26
25,27
26,27
27,28
30,31
30,32
30,33
30,34
31,32
32,33
32,34
33,34
35,36
35,37
36,37
37,38
37,39
38,39
41,42
42,43
43,44
44,45
46,47
47,48
47,49
49,50
49,51
51,52
52,53
52,54
53,54
56,57
56,58
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
70,71
70,72
71,72
73,74
74,75
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
3,5,7,9,10,13,15,19,21,23,28,29,34,39,40,45,48,50,54,55,59,60,64,67,68,72,75,79,81
-----computeFrom-----
25,26
25,27
32,33
32,34
35,36
35,37
37,38
37,39
52,53
52,54
57,58
57,59
62,63
62,64
65,66
65,67
70,71
70,72
77,78
77,79
-----guardedBy-----
59,67
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
size_t hashfn(const char *key, size_t tablen){	long hashVal = 0;	while (*key != '\0') {		hashVal = (hashVal << 4) + *(key++);		long g = hashVal & 0xF0000000L;		if (g != 0) hashVal ^= g >> 24;		hashVal &= ~g;	}	return hashVal % tablen;}
size_t
size_t
hashfn(const char *key, size_t tablen)
hashfn
const char *key
const char
*key
*
key
size_t tablen
size_t
size_t
tablen
tablen
{	long hashVal = 0;	while (*key != '\0') {		hashVal = (hashVal << 4) + *(key++);		long g = hashVal & 0xF0000000L;		if (g != 0) hashVal ^= g >> 24;		hashVal &= ~g;	}	return hashVal % tablen;}
long hashVal = 0;
long hashVal = 0;
long
hashVal = 0
hashVal
= 0
0
while (*key != '\0') {		hashVal = (hashVal << 4) + *(key++);		long g = hashVal & 0xF0000000L;		if (g != 0) hashVal ^= g >> 24;		hashVal &= ~g;	}
*key != '\0'
*key
key
key
'\0'
{		hashVal = (hashVal << 4) + *(key++);		long g = hashVal & 0xF0000000L;		if (g != 0) hashVal ^= g >> 24;		hashVal &= ~g;	}
hashVal = (hashVal << 4) + *(key++);
hashVal = (hashVal << 4) + *(key++)
hashVal
hashVal
(hashVal << 4) + *(key++)
(hashVal << 4)
hashVal << 4
hashVal
hashVal
4
*(key++)
(key++)
key++
key
key
long g = hashVal & 0xF0000000L;
long g = hashVal & 0xF0000000L;
long
g = hashVal & 0xF0000000L
g
= hashVal & 0xF0000000L
hashVal & 0xF0000000L
hashVal
hashVal
0xF0000000L
if (g != 0) hashVal ^= g >> 24;
g != 0
g
g
0
hashVal ^= g >> 24;
hashVal ^= g >> 24
hashVal
hashVal
g >> 24
g
g
24
hashVal &= ~g;
hashVal &= ~g
hashVal
hashVal
~g
g
g
return hashVal % tablen;
hashVal % tablen
hashVal
hashVal
tablen
tablen
-----joern-----
(0,43,0)
(3,43,0)
(8,43,0)
(38,20,0)
(25,23,0)
(34,23,0)
(39,23,0)
(13,30,0)
(7,15,0)
(19,29,0)
(39,24,0)
(37,11,0)
(8,7,0)
(18,30,0)
(4,23,0)
(33,29,0)
(9,15,0)
(19,25,0)
(39,10,0)
(26,18,0)
(39,35,0)
(2,18,0)
(1,4,0)
(6,20,0)
(25,7,0)
(41,7,0)
(23,43,0)
(19,23,0)
(27,39,0)
(23,19,0)
(32,15,0)
(44,4,0)
(17,38,0)
(30,43,0)
(39,7,0)
(15,30,0)
(35,11,0)
(42,11,0)
(14,35,0)
(24,11,0)
(25,19,0)
(30,4,0)
(31,25,0)
(4,30,0)
(28,8,0)
(29,33,0)
(20,38,0)
(29,19,0)
(33,40,0)
(7,23,0)
(21,24,0)
(20,40,0)
(16,39,0)
(22,8,0)
(12,33,0)
(36,25,0)
(5,24,0)
(8,23,0)
(15,7,0)
(25,24,0)
(36,31,1)
(39,24,1)
(8,7,1)
(18,26,1)
(44,13,1)
(8,23,1)
(1,44,1)
(16,27,1)
(8,28,1)
(14,35,1)
(34,38,1)
(31,34,1)
(41,18,1)
(29,33,1)
(2,30,1)
(23,19,1)
(18,30,1)
(25,24,1)
(39,7,1)
(20,40,1)
(33,12,1)
(15,9,1)
(39,23,1)
(24,5,1)
(25,23,1)
(38,17,1)
(25,7,1)
(19,25,1)
(7,23,1)
(32,41,1)
(22,18,1)
(35,39,1)
(27,38,1)
(12,25,1)
(13,23,1)
(4,23,1)
(39,10,1)
(6,24,1)
(6,8,1)
(7,15,1)
(33,40,1)
(17,20,1)
(30,4,1)
(28,22,1)
(39,16,1)
(20,6,1)
(5,21,1)
(26,2,1)
(4,1,1)
(19,29,1)
(15,30,1)
(25,36,1)
(38,20,1)
(22,7,1)
(9,32,1)
(38,20,2)
(36,38,2)
(15,30,2)
(13,38,2)
(23,38,2)
(4,38,2)
(20,40,2)
(25,23,2)
(39,10,2)
(29,33,2)
(12,38,2)
(44,38,2)
(30,4,2)
(23,19,2)
(26,38,2)
(25,38,2)
(33,40,2)
(19,29,2)
(2,38,2)
(22,38,2)
(7,15,2)
(39,23,2)
(20,38,2)
(15,18,2)
(17,38,2)
(8,7,2)
(31,38,2)
(9,18,2)
(18,30,2)
(6,38,2)
(32,18,2)
(25,7,2)
(39,7,2)
(8,23,2)
(14,35,2)
(34,38,2)
(7,18,2)
(19,38,2)
(28,38,2)
(29,38,2)
(1,38,2)
(41,18,2)
(8,38,2)
(30,38,2)
(39,24,2)
(4,23,2)
(7,23,2)
(25,24,2)
(19,25,2)
(38,38,2)
(33,38,2)
(18,38,2)
-----------------------------------
(0,if (g != 0)
(1,0xF0000000L)
(2,g)
(3,g)
(4,hashVal & 0xF0000000L)
(5,0)
(6,key)
(7,hashVal ^= g >> 24)
(8,hashVal &= ~g)
(9,24)
(10,size_t tablen)
(11,)
(12,key)
(13,g)
(14,RET)
(15,g >> 24)
(16,tablen)
(17,'\\0')
(18,g != 0)
(19,(hashVal << 4)
(20,*key)
(21,hashVal)
(22,hashVal)
(23,hashVal = (hashVal << 4)
(24,hashVal = 0)
(25,hashVal << 4)
(26,0)
(27,hashVal)
(28,~g)
(29,*(key++)
(30,g = hashVal & 0xF0000000L)
(31,hashVal)
(32,g)
(33,key++)
(34,hashVal)
(35,return hashVal % tablen;)
(36,4)
(37,hashVal)
(38,*key != '\\0')
(39,hashVal % tablen)
(40,const char *key)
(41,hashVal)
(42,while (*key != '\\0')
(43,)
(44,hashVal)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^