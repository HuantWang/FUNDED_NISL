-----label-----
1
-----code-----
void
fw_fill_response(struct fw_packet *response, u32 *request_header,
		 int rcode, void *payload, size_t length)
{
	int tcode, tlabel, extended_tcode, source, destination;

	tcode          = HEADER_GET_TCODE(request_header[0]);
	tlabel         = HEADER_GET_TLABEL(request_header[0]);
	source         = HEADER_GET_DESTINATION(request_header[0]);
	destination    = HEADER_GET_SOURCE(request_header[1]);
	extended_tcode = HEADER_GET_EXTENDED_TCODE(request_header[3]);

	response->header[0] =
		HEADER_RETRY(RETRY_1) |
		HEADER_TLABEL(tlabel) |
		HEADER_DESTINATION(destination);
	response->header[1] =
		HEADER_SOURCE(source) |
		HEADER_RCODE(rcode);
	response->header[2] = 0;

	switch (tcode) {
	case TCODE_WRITE_QUADLET_REQUEST:
	case TCODE_WRITE_BLOCK_REQUEST:
		response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE);
		response->header_length = 12;
		response->payload_length = 0;
		break;

	case TCODE_READ_QUADLET_REQUEST:
		response->header[0] |=
			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE);
		if (payload != NULL)
			response->header[3] = *(u32 *)payload;
		else
			response->header[3] = 0;
		response->header_length = 16;
		response->payload_length = 0;
		break;

	case TCODE_READ_BLOCK_REQUEST:
	case TCODE_LOCK_REQUEST:
		response->header[0] |= HEADER_TCODE(tcode + 2);
		response->header[3] =
			HEADER_DATA_LENGTH(length) |
			HEADER_EXTENDED_TCODE(extended_tcode);
		response->header_length = 16;
		response->payload = payload;
		response->payload_length = length;
		break;

	default:
		BUG();
		return;
	}

	response->payload_bus = 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
23,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
31,37
31,38
31,39
31,40
31,41
31,42
32,33
33,34
33,35
33,36
33,37
33,38
33,39
35,36
37,38
39,40
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
60,62
61,62
63,64
63,65
64,65
67,68
68,69
68,70
69,70
71,72
71,73
72,73
74,75
74,76
75,76
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
85,87
86,87
89,90
90,91
90,92
91,92
93,94
93,95
94,95
96,97
96,98
97,98
100,101
101,102
101,103
102,103
102,104
103,104
103,105
104,105
108,109
108,110
109,110
109,111
110,111
110,112
111,112
113,114
115,116
115,117
116,117
118,119
120,121
120,122
121,122
123,124
125,126
126,127
126,128
127,128
127,129
128,129
128,130
129,130
133,134
133,135
134,135
134,136
135,136
137,138
139,140
139,141
140,141
142,143
144,145
145,146
145,147
146,147
146,148
147,148
147,149
148,149
153,154
153,155
154,155
156,157
156,158
156,159
156,160
156,161
156,162
156,163
156,164
156,165
156,166
156,167
156,168
156,169
156,170
156,171
156,172
156,173
156,174
156,175
156,176
156,177
156,178
156,179
157,158
158,159
160,161
161,162
163,164
164,165
164,166
165,166
165,167
166,167
166,168
167,168
171,172
171,173
172,173
174,175
176,177
177,178
177,179
178,179
178,180
179,180
183,184
184,185
184,186
185,186
185,187
186,187
191,192
192,193
194,195
195,196
195,197
196,197
196,198
197,198
197,199
198,199
202,203
202,204
203,204
205,206
207,208
207,209
207,210
208,209
208,210
209,210
211,212
213,214
214,215
214,216
215,216
215,217
216,217
216,218
217,218
221,222
222,223
222,224
223,224
223,225
224,225
226,227
228,229
230,231
231,232
231,233
232,233
232,234
233,234
233,235
234,235
239,240
240,241
240,242
241,242
241,243
242,243
246,247
247,248
247,249
248,249
248,250
249,250
254,255
255,256
257,258
258,259
260,261
261,262
261,263
262,263
262,264
263,264
263,265
264,265
268,269
268,270
269,270
271,272
271,273
272,273
275,276
276,277
276,278
277,278
277,279
278,279
278,280
279,280
283,284
283,285
284,285
284,286
285,286
287,288
289,290
289,291
290,291
292,293
294,295
295,296
295,297
296,297
296,298
297,298
301,302
302,303
302,304
303,304
303,305
304,305
307,308
309,310
310,311
310,312
311,312
311,313
312,313
315,316
319,320
320,321
321,322
324,325
325,326
325,327
326,327
326,328
327,328
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,22,24,25,28,30,34,36,38,40,42,44,48,51,54,55,59,62,65,66,70,73,76,77,81,84,87,88,92,95,98,99,105,106,107,112,114,117,119,122,124,130,131,132,136,138,141,143,149,150,151,152,155,159,162,168,169,170,173,175,180,181,182,187,188,189,190,193,199,200,201,204,206,210,212,218,219,220,225,227,229,235,236,237,238,243,244,245,250,251,252,253,256,259,265,266,267,270,273,274,280,281,282,286,288,291,293,298,299,300,305,306,308,313,314,316,317,318,322,323,328,329,330
-----computeFrom-----
46,47
46,48
57,58
57,59
68,69
68,70
79,80
79,81
90,91
90,92
101,102
101,103
108,109
108,110
109,110
109,111
126,127
126,128
133,134
133,135
145,146
145,147
164,165
164,166
177,178
177,179
184,185
184,186
195,196
195,197
208,209
208,210
214,215
214,216
231,232
231,233
240,241
240,242
247,248
247,249
261,262
261,263
271,272
271,273
276,277
276,278
283,284
283,285
295,296
295,297
302,303
302,304
310,311
310,312
325,326
325,327
-----guardedBy-----
210,229
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
voidfw_fill_response(struct fw_packet *response, u32 *request_header,		 int rcode, void *payload, size_t length){	int tcode, tlabel, extended_tcode, source, destination;	tcode          = HEADER_GET_TCODE(request_header[0]);	tlabel         = HEADER_GET_TLABEL(request_header[0]);	source         = HEADER_GET_DESTINATION(request_header[0]);	destination    = HEADER_GET_SOURCE(request_header[1]);	extended_tcode = HEADER_GET_EXTENDED_TCODE(request_header[3]);	response->header[0] =		HEADER_RETRY(RETRY_1) |		HEADER_TLABEL(tlabel) |		HEADER_DESTINATION(destination);	response->header[1] =		HEADER_SOURCE(source) |		HEADER_RCODE(rcode);	response->header[2] = 0;	switch (tcode) {	case TCODE_WRITE_QUADLET_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE);		response->header_length = 12;		response->payload_length = 0;		break;	case TCODE_READ_QUADLET_REQUEST:		response->header[0] |=			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE);		if (payload != NULL)			response->header[3] = *(u32 *)payload;		else			response->header[3] = 0;		response->header_length = 16;		response->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:	case TCODE_LOCK_REQUEST:		response->header[0] |= HEADER_TCODE(tcode + 2);		response->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode);		response->header_length = 16;		response->payload = payload;		response->payload_length = length;		break;	default:		BUG();		return;	}	response->payload_bus = 0;}
void
fw_fill_response(struct fw_packet *response, u32 *request_header,		 int rcode, void *payload, size_t length)
fw_fill_response
struct fw_packet *response
struct fw_packet
fw_packet
*response
*
response
u32 *request_header
u32
u32
*request_header
*
request_header
int rcode
int
rcode
rcode
void *payload
void
*payload
*
payload
size_t length
size_t
size_t
length
length
{	int tcode, tlabel, extended_tcode, source, destination;	tcode          = HEADER_GET_TCODE(request_header[0]);	tlabel         = HEADER_GET_TLABEL(request_header[0]);	source         = HEADER_GET_DESTINATION(request_header[0]);	destination    = HEADER_GET_SOURCE(request_header[1]);	extended_tcode = HEADER_GET_EXTENDED_TCODE(request_header[3]);	response->header[0] =		HEADER_RETRY(RETRY_1) |		HEADER_TLABEL(tlabel) |		HEADER_DESTINATION(destination);	response->header[1] =		HEADER_SOURCE(source) |		HEADER_RCODE(rcode);	response->header[2] = 0;	switch (tcode) {	case TCODE_WRITE_QUADLET_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE);		response->header_length = 12;		response->payload_length = 0;		break;	case TCODE_READ_QUADLET_REQUEST:		response->header[0] |=			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE);		if (payload != NULL)			response->header[3] = *(u32 *)payload;		else			response->header[3] = 0;		response->header_length = 16;		response->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:	case TCODE_LOCK_REQUEST:		response->header[0] |= HEADER_TCODE(tcode + 2);		response->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode);		response->header_length = 16;		response->payload = payload;		response->payload_length = length;		break;	default:		BUG();		return;	}	response->payload_bus = 0;}
int tcode, tlabel, extended_tcode, source, destination;
int tcode, tlabel, extended_tcode, source, destination;
int
tcode
tcode
tlabel
tlabel
extended_tcode
extended_tcode
source
source
destination
destination
tcode          = HEADER_GET_TCODE(request_header[0]);
tcode          = HEADER_GET_TCODE(request_header[0])
tcode
tcode
HEADER_GET_TCODE(request_header[0])
HEADER_GET_TCODE
HEADER_GET_TCODE
request_header[0]
request_header
request_header
0
tlabel         = HEADER_GET_TLABEL(request_header[0]);
tlabel         = HEADER_GET_TLABEL(request_header[0])
tlabel
tlabel
HEADER_GET_TLABEL(request_header[0])
HEADER_GET_TLABEL
HEADER_GET_TLABEL
request_header[0]
request_header
request_header
0
source         = HEADER_GET_DESTINATION(request_header[0]);
source         = HEADER_GET_DESTINATION(request_header[0])
source
source
HEADER_GET_DESTINATION(request_header[0])
HEADER_GET_DESTINATION
HEADER_GET_DESTINATION
request_header[0]
request_header
request_header
0
destination    = HEADER_GET_SOURCE(request_header[1]);
destination    = HEADER_GET_SOURCE(request_header[1])
destination
destination
HEADER_GET_SOURCE(request_header[1])
HEADER_GET_SOURCE
HEADER_GET_SOURCE
request_header[1]
request_header
request_header
1
extended_tcode = HEADER_GET_EXTENDED_TCODE(request_header[3]);
extended_tcode = HEADER_GET_EXTENDED_TCODE(request_header[3])
extended_tcode
extended_tcode
HEADER_GET_EXTENDED_TCODE(request_header[3])
HEADER_GET_EXTENDED_TCODE
HEADER_GET_EXTENDED_TCODE
request_header[3]
request_header
request_header
3
response->header[0] =		HEADER_RETRY(RETRY_1) |		HEADER_TLABEL(tlabel) |		HEADER_DESTINATION(destination);
response->header[0] =		HEADER_RETRY(RETRY_1) |		HEADER_TLABEL(tlabel) |		HEADER_DESTINATION(destination)
response->header[0]
response->header
response
response
header
0
HEADER_RETRY(RETRY_1) |		HEADER_TLABEL(tlabel) |		HEADER_DESTINATION(destination)
HEADER_RETRY(RETRY_1) |		HEADER_TLABEL(tlabel)
HEADER_RETRY(RETRY_1)
HEADER_RETRY
HEADER_RETRY
RETRY_1
RETRY_1
HEADER_TLABEL(tlabel)
HEADER_TLABEL
HEADER_TLABEL
tlabel
tlabel
HEADER_DESTINATION(destination)
HEADER_DESTINATION
HEADER_DESTINATION
destination
destination
response->header[1] =		HEADER_SOURCE(source) |		HEADER_RCODE(rcode);
response->header[1] =		HEADER_SOURCE(source) |		HEADER_RCODE(rcode)
response->header[1]
response->header
response
response
header
1
HEADER_SOURCE(source) |		HEADER_RCODE(rcode)
HEADER_SOURCE(source)
HEADER_SOURCE
HEADER_SOURCE
source
source
HEADER_RCODE(rcode)
HEADER_RCODE
HEADER_RCODE
rcode
rcode
response->header[2] = 0;
response->header[2] = 0
response->header[2]
response->header
response
response
header
2
0
switch (tcode) {	case TCODE_WRITE_QUADLET_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE);		response->header_length = 12;		response->payload_length = 0;		break;	case TCODE_READ_QUADLET_REQUEST:		response->header[0] |=			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE);		if (payload != NULL)			response->header[3] = *(u32 *)payload;		else			response->header[3] = 0;		response->header_length = 16;		response->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:	case TCODE_LOCK_REQUEST:		response->header[0] |= HEADER_TCODE(tcode + 2);		response->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode);		response->header_length = 16;		response->payload = payload;		response->payload_length = length;		break;	default:		BUG();		return;	}
tcode
tcode
{	case TCODE_WRITE_QUADLET_REQUEST:	case TCODE_WRITE_BLOCK_REQUEST:		response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE);		response->header_length = 12;		response->payload_length = 0;		break;	case TCODE_READ_QUADLET_REQUEST:		response->header[0] |=			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE);		if (payload != NULL)			response->header[3] = *(u32 *)payload;		else			response->header[3] = 0;		response->header_length = 16;		response->payload_length = 0;		break;	case TCODE_READ_BLOCK_REQUEST:	case TCODE_LOCK_REQUEST:		response->header[0] |= HEADER_TCODE(tcode + 2);		response->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode);		response->header_length = 16;		response->payload = payload;		response->payload_length = length;		break;	default:		BUG();		return;	}
case TCODE_WRITE_QUADLET_REQUEST:
TCODE_WRITE_QUADLET_REQUEST
TCODE_WRITE_QUADLET_REQUEST
case TCODE_WRITE_BLOCK_REQUEST:
TCODE_WRITE_BLOCK_REQUEST
TCODE_WRITE_BLOCK_REQUEST
response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE);
response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE)
response->header[0]
response->header
response
response
header
0
HEADER_TCODE(TCODE_WRITE_RESPONSE)
HEADER_TCODE
HEADER_TCODE
TCODE_WRITE_RESPONSE
TCODE_WRITE_RESPONSE
response->header_length = 12;
response->header_length = 12
response->header_length
response
response
header_length
12
response->payload_length = 0;
response->payload_length = 0
response->payload_length
response
response
payload_length
0
break;
case TCODE_READ_QUADLET_REQUEST:
TCODE_READ_QUADLET_REQUEST
TCODE_READ_QUADLET_REQUEST
response->header[0] |=			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE);
response->header[0] |=			HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE)
response->header[0]
response->header
response
response
header
0
HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE)
HEADER_TCODE
HEADER_TCODE
TCODE_READ_QUADLET_RESPONSE
TCODE_READ_QUADLET_RESPONSE
if (payload != NULL)			response->header[3] = *(u32 *)payload;		else			response->header[3] = 0;
payload != NULL
payload
payload
NULL
NULL
response->header[3] = *(u32 *)payload;
response->header[3] = *(u32 *)payload
response->header[3]
response->header
response
response
header
3
*(u32 *)payload
(u32 *)payload
u32 *
u32
u32
*
*
payload
payload
response->header[3] = 0;
response->header[3] = 0
response->header[3]
response->header
response
response
header
3
0
response->header_length = 16;
response->header_length = 16
response->header_length
response
response
header_length
16
response->payload_length = 0;
response->payload_length = 0
response->payload_length
response
response
payload_length
0
break;
case TCODE_READ_BLOCK_REQUEST:
TCODE_READ_BLOCK_REQUEST
TCODE_READ_BLOCK_REQUEST
case TCODE_LOCK_REQUEST:
TCODE_LOCK_REQUEST
TCODE_LOCK_REQUEST
response->header[0] |= HEADER_TCODE(tcode + 2);
response->header[0] |= HEADER_TCODE(tcode + 2)
response->header[0]
response->header
response
response
header
0
HEADER_TCODE(tcode + 2)
HEADER_TCODE
HEADER_TCODE
tcode + 2
tcode
tcode
2
response->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode);
response->header[3] =			HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode)
response->header[3]
response->header
response
response
header
3
HEADER_DATA_LENGTH(length) |			HEADER_EXTENDED_TCODE(extended_tcode)
HEADER_DATA_LENGTH(length)
HEADER_DATA_LENGTH
HEADER_DATA_LENGTH
length
length
HEADER_EXTENDED_TCODE(extended_tcode)
HEADER_EXTENDED_TCODE
HEADER_EXTENDED_TCODE
extended_tcode
extended_tcode
response->header_length = 16;
response->header_length = 16
response->header_length
response
response
header_length
16
response->payload = payload;
response->payload = payload
response->payload
response
response
payload
payload
payload
response->payload_length = length;
response->payload_length = length
response->payload_length
response
response
payload_length
length
length
break;
default:
BUG();
BUG()
BUG
BUG
return;
response->payload_bus = 0;
response->payload_bus = 0
response->payload_bus
response
response
payload_bus
0
-----joern-----
(28,166,0)
(62,50,0)
(51,162,0)
(104,50,0)
(72,92,0)
(81,155,0)
(164,185,0)
(85,71,0)
(161,37,0)
(78,45,0)
(86,53,0)
(168,155,0)
(5,32,0)
(125,116,0)
(40,128,0)
(31,74,0)
(1,22,0)
(169,155,0)
(170,121,0)
(169,71,0)
(79,37,0)
(60,85,0)
(2,91,0)
(29,141,0)
(175,76,0)
(67,183,0)
(137,79,0)
(128,65,0)
(185,37,0)
(178,85,0)
(20,37,0)
(34,116,0)
(166,37,0)
(91,37,0)
(115,45,0)
(34,58,0)
(156,4,0)
(172,155,0)
(47,74,0)
(117,45,0)
(142,67,0)
(151,12,0)
(7,155,0)
(161,141,0)
(92,33,0)
(162,51,0)
(144,25,0)
(158,45,0)
(32,94,0)
(159,153,0)
(150,94,0)
(19,155,0)
(85,60,0)
(34,39,0)
(103,155,0)
(99,94,0)
(107,71,0)
(134,78,0)
(44,65,0)
(35,5,0)
(46,166,0)
(43,157,0)
(116,34,0)
(17,122,0)
(24,45,0)
(174,138,0)
(165,180,0)
(63,110,0)
(82,61,0)
(113,91,0)
(90,182,0)
(30,106,0)
(20,67,0)
(4,144,0)
(71,167,0)
(74,37,0)
(170,154,0)
(136,77,0)
(76,169,0)
(91,172,0)
(89,62,0)
(81,120,0)
(127,45,0)
(38,95,0)
(15,139,0)
(3,95,0)
(53,58,0)
(97,117,0)
(83,161,0)
(65,155,0)
(97,152,0)
(152,4,0)
(138,12,0)
(183,45,0)
(65,58,0)
(57,122,0)
(42,155,0)
(124,179,0)
(180,121,0)
(110,155,0)
(144,45,0)
(33,152,0)
(12,45,0)
(132,155,0)
(18,19,0)
(106,18,0)
(14,20,0)
(64,160,0)
(62,125,0)
(129,63,0)
(122,121,0)
(60,153,0)
(123,155,0)
(100,77,0)
(160,132,0)
(18,106,0)
(61,45,0)
(93,180,0)
(95,3,0)
(67,20,0)
(168,77,0)
(3,169,0)
(138,37,0)
(25,122,0)
(0,18,0)
(157,155,0)
(160,37,0)
(183,179,0)
(16,19,0)
(119,5,0)
(9,155,0)
(36,160,0)
(127,33,0)
(128,37,0)
(169,76,0)
(94,45,0)
(25,144,0)
(162,168,0)
(141,155,0)
(6,155,0)
(94,32,0)
(153,60,0)
(23,144,0)
(95,37,0)
(176,3,0)
(165,117,0)
(85,77,0)
(146,97,0)
(179,124,0)
(169,67,0)
(102,34,0)
(33,92,0)
(8,51,0)
(69,20,0)
(168,71,0)
(61,154,0)
(133,155,0)
(154,170,0)
(179,150,0)
(4,152,0)
(143,170,0)
(147,155,0)
(56,51,0)
(167,45,0)
(180,165,0)
(177,128,0)
(111,172,0)
(70,170,0)
(131,155,0)
(130,47,0)
(18,0,0)
(21,162,0)
(122,25,0)
(168,173,0)
(126,132,0)
(117,165,0)
(145,150,0)
(88,161,0)
(135,63,0)
(79,71,0)
(74,47,0)
(140,45,0)
(80,163,0)
(0,61,0)
(47,139,0)
(153,78,0)
(41,138,0)
(169,77,0)
(112,117,0)
(84,81,0)
(52,100,0)
(85,155,0)
(32,5,0)
(101,16,0)
(50,37,0)
(106,120,0)
(166,81,0)
(54,7,0)
(5,121,0)
(55,163,0)
(148,74,0)
(124,87,0)
(16,182,0)
(96,79,0)
(184,45,0)
(10,53,0)
(182,37,0)
(73,182,0)
(33,127,0)
(26,22,0)
(105,0,0)
(185,157,0)
(152,33,0)
(149,155,0)
(116,125,0)
(182,16,0)
(51,37,0)
(171,45,0)
(178,22,0)
(163,121,0)
(168,67,0)
(85,67,0)
(179,183,0)
(22,178,0)
(11,173,0)
(48,95,0)
(98,110,0)
(39,34,0)
(77,100,0)
(118,155,0)
(108,155,0)
(27,153,0)
(100,37,0)
(163,49,0)
(59,100,0)
(63,37,0)
(181,178,0)
(49,163,0)
(66,167,0)
(154,61,0)
(22,37,0)
(152,97,0)
(50,62,0)
(109,180,0)
(49,78,0)
(114,50,0)
(71,79,0)
(77,127,0)
(173,168,0)
(19,18,0)
(68,124,0)
(75,185,0)
(150,179,0)
(78,49,0)
(160,36,1)
(133,157,1)
(49,163,1)
(21,51,1)
(135,129,1)
(53,58,1)
(122,57,1)
(146,4,1)
(13,167,1)
(180,109,1)
(183,179,1)
(138,174,1)
(53,10,1)
(106,120,1)
(179,150,1)
(71,79,1)
(185,164,1)
(114,53,1)
(25,122,1)
(150,94,1)
(136,100,1)
(5,119,1)
(162,51,1)
(100,37,1)
(97,117,1)
(122,121,1)
(169,77,1)
(6,141,1)
(20,37,1)
(176,95,1)
(163,55,1)
(152,97,1)
(12,151,1)
(82,117,1)
(180,121,1)
(0,105,1)
(143,82,1)
(62,89,1)
(127,33,1)
(162,21,1)
(60,153,1)
(59,52,1)
(124,87,1)
(83,132,1)
(102,62,1)
(182,37,1)
(27,178,1)
(67,142,1)
(67,20,1)
(1,26,1)
(79,137,1)
(150,145,1)
(91,37,1)
(63,135,1)
(64,139,1)
(148,53,1)
(105,106,1)
(81,84,1)
(69,127,1)
(124,68,1)
(139,15,1)
(35,99,1)
(38,13,1)
(40,177,1)
(175,3,1)
(30,16,1)
(77,100,1)
(170,121,1)
(7,108,1)
(163,121,1)
(84,166,1)
(161,37,1)
(85,60,1)
(178,22,1)
(52,61,1)
(80,134,1)
(36,64,1)
(104,114,1)
(169,76,1)
(125,116,1)
(16,182,1)
(55,80,1)
(74,37,1)
(151,138,1)
(46,65,1)
(147,81,1)
(169,71,1)
(19,18,1)
(22,1,1)
(20,14,1)
(130,74,1)
(28,46,1)
(11,162,1)
(90,73,1)
(99,144,1)
(85,77,1)
(156,92,1)
(128,37,1)
(33,92,1)
(4,144,1)
(109,93,1)
(153,159,1)
(101,182,1)
(167,66,1)
(126,160,1)
(88,83,1)
(117,165,1)
(23,78,1)
(50,104,1)
(93,112,1)
(63,37,1)
(168,71,1)
(78,49,1)
(75,172,1)
(132,126,1)
(85,71,1)
(159,27,1)
(95,48,1)
(5,121,1)
(70,143,1)
(14,69,1)
(169,67,1)
(57,17,1)
(51,37,1)
(179,124,1)
(113,169,1)
(107,79,1)
(141,29,1)
(165,180,1)
(34,39,1)
(44,128,1)
(4,156,1)
(166,37,1)
(10,86,1)
(48,38,1)
(96,183,1)
(92,72,1)
(85,67,1)
(138,37,1)
(129,19,1)
(15,47,1)
(66,71,1)
(170,70,1)
(76,175,1)
(79,37,1)
(65,44,1)
(177,110,1)
(181,22,1)
(51,8,1)
(3,95,1)
(153,78,1)
(161,88,1)
(47,130,1)
(34,58,1)
(65,58,1)
(34,102,1)
(50,37,1)
(17,23,1)
(54,12,1)
(168,77,1)
(56,13,1)
(0,61,1)
(29,161,1)
(41,6,1)
(22,37,1)
(152,4,1)
(61,154,1)
(119,35,1)
(73,85,1)
(8,56,1)
(64,125,1)
(137,96,1)
(145,67,1)
(168,173,1)
(174,41,1)
(86,168,1)
(31,148,1)
(3,176,1)
(166,28,1)
(47,74,1)
(100,59,1)
(68,150,1)
(110,98,1)
(98,63,1)
(16,101,1)
(112,94,1)
(168,67,1)
(33,152,1)
(74,31,1)
(154,170,1)
(26,13,1)
(108,13,1)
(97,146,1)
(94,32,1)
(2,113,1)
(41,147,1)
(144,25,1)
(157,43,1)
(111,91,1)
(77,136,1)
(18,106,1)
(164,75,1)
(106,30,1)
(173,11,1)
(32,5,1)
(54,7,1)
(128,40,1)
(182,90,1)
(116,34,1)
(95,37,1)
(178,181,1)
(62,50,1)
(185,37,1)
(71,107,1)
(89,50,1)
(142,20,1)
(81,120,1)
(72,77,1)
(160,37,1)
(41,133,1)
(43,185,1)
(172,111,1)
(18,0,1)
(91,2,1)
(116,53,2)
(15,53,2)
(31,53,2)
(160,37,2)
(54,7,2)
(61,154,2)
(85,77,2)
(169,71,2)
(129,13,2)
(62,50,2)
(33,152,2)
(19,18,2)
(127,33,2)
(101,13,2)
(51,37,2)
(56,13,2)
(90,13,2)
(106,120,2)
(60,153,2)
(20,37,2)
(27,13,2)
(12,13,2)
(26,13,2)
(166,37,2)
(139,53,2)
(148,53,2)
(51,13,2)
(162,13,2)
(75,13,2)
(47,53,2)
(182,37,2)
(81,120,2)
(0,13,2)
(177,13,2)
(16,182,2)
(122,121,2)
(128,13,2)
(44,13,2)
(165,180,2)
(76,13,2)
(81,13,2)
(5,121,2)
(160,13,2)
(11,13,2)
(18,0,2)
(185,13,2)
(132,13,2)
(138,37,2)
(106,13,2)
(185,37,2)
(152,4,2)
(113,13,2)
(0,61,2)
(128,37,2)
(172,13,2)
(169,13,2)
(49,163,2)
(173,13,2)
(25,122,2)
(154,170,2)
(48,13,2)
(16,13,2)
(74,53,2)
(116,34,2)
(79,37,2)
(151,13,2)
(10,13,2)
(85,71,2)
(19,13,2)
(91,37,2)
(181,13,2)
(40,13,2)
(8,13,2)
(141,13,2)
(84,13,2)
(94,32,2)
(176,13,2)
(18,13,2)
(3,13,2)
(32,5,2)
(138,13,2)
(38,13,2)
(63,13,2)
(63,37,2)
(28,13,2)
(183,179,2)
(46,13,2)
(124,87,2)
(125,116,2)
(86,13,2)
(34,53,2)
(166,13,2)
(164,13,2)
(180,121,2)
(91,13,2)
(153,13,2)
(85,60,2)
(102,53,2)
(34,58,2)
(169,76,2)
(159,13,2)
(161,37,2)
(41,13,2)
(110,13,2)
(95,37,2)
(174,13,2)
(105,13,2)
(85,67,2)
(65,13,2)
(53,13,2)
(152,97,2)
(6,13,2)
(162,51,2)
(126,13,2)
(125,53,2)
(1,13,2)
(83,13,2)
(36,13,2)
(53,58,2)
(163,121,2)
(50,37,2)
(78,49,2)
(7,13,2)
(47,74,2)
(60,13,2)
(169,67,2)
(62,53,2)
(4,144,2)
(147,13,2)
(130,53,2)
(111,13,2)
(179,150,2)
(135,13,2)
(168,71,2)
(98,13,2)
(95,13,2)
(21,13,2)
(178,22,2)
(33,92,2)
(64,13,2)
(50,53,2)
(133,13,2)
(85,13,2)
(97,117,2)
(29,13,2)
(22,37,2)
(104,53,2)
(88,13,2)
(89,53,2)
(65,58,2)
(30,13,2)
(153,78,2)
(168,173,2)
(168,67,2)
(150,94,2)
(170,121,2)
(144,25,2)
(182,13,2)
(22,13,2)
(34,39,2)
(43,13,2)
(175,13,2)
(179,124,2)
(168,77,2)
(18,106,2)
(2,13,2)
(157,13,2)
(100,37,2)
(108,13,2)
(169,77,2)
(71,79,2)
(161,13,2)
(74,37,2)
(3,95,2)
(114,53,2)
(73,13,2)
(67,20,2)
(168,13,2)
(178,13,2)
(117,165,2)
(77,100,2)
-----------------------------------
(0,HEADER_EXTENDED_TCODE(extended_tcode)
(1,header)
(2,header_length)
(3,response->header[0])
(4,HEADER_TLABEL(tlabel)
(5,request_header[0])
(6,break;)
(7,return;)
(8,header)
(9,case TCODE_WRITE_BLOCK_REQUEST:)
(10,NULL)
(11,TCODE_READ_QUADLET_RESPONSE)
(12,response->payload_bus = 0)
(13,tcode)
(14,header)
(15,0)
(16,response->header[3])
(17,request_header)
(18,HEADER_DATA_LENGTH(length)
(19,response->header[3] =\n\\n\\t\\t\\tHEADER_DATA_LENGTH(length)
(20,response->header)
(21,0)
(22,response->header)
(23,tlabel)
(24,source)
(25,HEADER_GET_TLABEL(request_header[0])
(26,response)
(27,tcode)
(28,payload_length)
(29,0)
(30,length)
(31,header)
(32,HEADER_GET_DESTINATION(request_header[0])
(33,HEADER_RETRY(RETRY_1)
(34,(u32 *)
(35,request_header)
(36,header_length)
(37,struct fw_packet *response)
(38,response)
(39,u32 *)
(40,payload)
(41,response)
(42,case TCODE_LOCK_REQUEST:)
(43,0)
(44,payload)
(45,)
(46,response)
(47,response->header[3])
(48,header)
(49,HEADER_GET_TCODE(request_header[0])
(50,response->header)
(51,response->header)
(52,response)
(53,payload != NULL)
(54,RET)
(55,0)
(56,response)
(57,0)
(58,void *payload)
(59,header)
(60,HEADER_TCODE(tcode + 2)
(61,extended_tcode = HEADER_GET_EXTENDED_TCODE(request_header[3])
(62,response->header[3])
(63,response->header_length)
(64,response)
(65,response->payload = payload)
(66,0)
(67,response->header[1])
(68,rcode)
(69,response)
(70,3)
(71,response->header[2])
(72,RETRY_1)
(73,response)
(74,response->header)
(75,response)
(76,HEADER_TCODE(TCODE_WRITE_RESPONSE)
(77,response->header[0])
(78,tcode          = HEADER_GET_TCODE(request_header[0])
(79,response->header)
(80,request_header)
(81,response->payload_length = length)
(82,extended_tcode)
(83,response)
(84,length)
(85,response->header[0] |= HEADER_TCODE(tcode + 2)
(86,payload)
(87,int rcode)
(88,payload_length)
(89,3)
(90,header)
(91,response->header_length)
(92,HEADER_RETRY(RETRY_1)
(93,request_header)
(94,source         = HEADER_GET_DESTINATION(request_header[0])
(95,response->header)
(96,response)
(97,HEADER_DESTINATION(destination)
(98,16)
(99,source)
(100,response->header)
(101,3)
(102,payload)
(103,case TCODE_READ_BLOCK_REQUEST:)
(104,header)
(105,extended_tcode)
(106,HEADER_DATA_LENGTH(length)
(107,2)
(108,BUG()
(109,1)
(110,response->header_length = 16)
(111,12)
(112,destination)
(113,response)
(114,response)
(115,tlabel)
(116,*(u32 *)
(117,destination    = HEADER_GET_SOURCE(request_header[1])
(118,if (payload != NULL)
(119,0)
(120,size_t length)
(121,u32 *request_header)
(122,request_header[0])
(123,case TCODE_READ_QUADLET_REQUEST:)
(124,HEADER_RCODE(rcode)
(125,response->header[3] = *(u32 *)
(126,16)
(127,response->header[0] =\n\\n\\t\\tHEADER_RETRY(RETRY_1)
(128,response->payload)
(129,response)
(130,3)
(131,default:)
(132,response->header_length = 16)
(133,break;)
(134,tcode)
(135,header_length)
(136,0)
(137,header)
(138,response->payload_bus)
(139,response->header[3] = 0)
(140,extended_tcode)
(141,response->payload_length = 0)
(142,1)
(143,request_header)
(144,tlabel         = HEADER_GET_TLABEL(request_header[0])
(145,source)
(146,destination)
(147,break;)
(148,response)
(149,case TCODE_WRITE_QUADLET_REQUEST:)
(150,HEADER_SOURCE(source)
(151,0)
(152,HEADER_TLABEL(tlabel)
(153,tcode + 2)
(154,HEADER_GET_EXTENDED_TCODE(request_header[3])
(155,)
(156,tlabel)
(157,response->payload_length = 0)
(158,tcode)
(159,2)
(160,response->header_length)
(161,response->payload_length)
(162,response->header[0])
(163,request_header[0])
(164,payload_length)
(165,HEADER_GET_SOURCE(request_header[1])
(166,response->payload_length)
(167,response->header[2] = 0)
(168,response->header[0] |=\n\\n\\t\\t\\tHEADER_TCODE(TCODE_READ_QUADLET_RESPONSE)
(169,response->header[0] |= HEADER_TCODE(TCODE_WRITE_RESPONSE)
(170,request_header[3])
(171,switch (tcode)
(172,response->header_length = 12)
(173,HEADER_TCODE(TCODE_READ_QUADLET_RESPONSE)
(174,payload_bus)
(175,TCODE_WRITE_RESPONSE)
(176,0)
(177,response)
(178,response->header[0])
(179,HEADER_SOURCE(source)
(180,request_header[1])
(181,0)
(182,response->header)
(183,response->header[1] =\n\\n\\t\\tHEADER_SOURCE(source)
(184,destination)
(185,response->payload_length)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^