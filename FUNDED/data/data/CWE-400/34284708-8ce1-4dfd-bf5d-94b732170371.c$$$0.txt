-----label-----
1
-----code-----
static void srp_remove_one(struct ib_device *device)
{
	struct srp_device *srp_dev;
	struct srp_host *host, *tmp_host;
	struct srp_target_port *target;

	srp_dev = ib_get_client_data(device, &srp_client);
	if (!srp_dev)
		return;

	list_for_each_entry_safe(host, tmp_host, &srp_dev->dev_list, list) {
		device_unregister(&host->dev);
		/*
		 * Wait for the sysfs entry to go away, so that no new
		 * target ports can be created.
		 */
		wait_for_completion(&host->released);

		/*
		 * Remove all target ports.
		 */
		spin_lock(&host->target_lock);
		list_for_each_entry(target, &host->target_list, list)
			srp_queue_remove_work(target);
		spin_unlock(&host->target_lock);

		/*
		 * Wait for target port removal tasks.
		 */
		flush_workqueue(system_long_wq);

		kfree(host);
	}

	if (srp_dev->fmr_pool)
		ib_destroy_fmr_pool(srp_dev->fmr_pool);
	ib_dereg_mr(srp_dev->mr);
	ib_dealloc_pd(srp_dev->pd);

	kfree(srp_dev);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
20,23
21,22
23,24
23,25
26,27
26,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
41,42
43,44
45,46
46,47
48,49
48,50
49,50
50,51
53,54
54,55
54,56
54,57
54,58
54,59
55,56
57,58
59,60
61,62
62,63
62,64
63,64
66,67
68,69
69,70
69,71
69,72
69,73
69,74
69,75
69,76
69,77
69,78
70,71
71,72
71,73
72,73
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
93,94
93,95
94,95
97,98
98,99
98,100
98,101
98,102
99,100
101,102
103,104
104,105
104,106
105,106
108,109
110,111
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
131,132
133,134
134,135
134,136
135,136
137,138
139,140
139,141
140,141
140,142
141,142
144,145
145,146
145,147
146,147
148,149
148,150
149,150
152,153
153,154
153,155
154,155
156,157
156,158
157,158
160,161
161,162
161,163
162,163
164,165
164,166
165,166
168,169
169,170
169,171
170,171
172,173
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,27,28,32,34,35,39,42,44,47,51,52,56,58,60,64,65,67,73,77,78,82,86,87,91,95,96,100,102,106,107,109,114,116,120,124,125,129,132,136,138,142,143,147,150,151,155,158,159,163,166,167,171,173
-----computeFrom-----
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void srp_remove_one(struct ib_device *device){	struct srp_device *srp_dev;	struct srp_host *host, *tmp_host;	struct srp_target_port *target;	srp_dev = ib_get_client_data(device, &srp_client);	if (!srp_dev)		return;	list_for_each_entry_safe(host, tmp_host, &srp_dev->dev_list, list) {		device_unregister(&host->dev);		/*		 * Wait for the sysfs entry to go away, so that no new		 * target ports can be created.		 */		wait_for_completion(&host->released);		/*		 * Remove all target ports.		 */		spin_lock(&host->target_lock);		list_for_each_entry(target, &host->target_list, list)			srp_queue_remove_work(target);		spin_unlock(&host->target_lock);		/*		 * Wait for target port removal tasks.		 */		flush_workqueue(system_long_wq);		kfree(host);	}	if (srp_dev->fmr_pool)		ib_destroy_fmr_pool(srp_dev->fmr_pool);	ib_dereg_mr(srp_dev->mr);	ib_dealloc_pd(srp_dev->pd);	kfree(srp_dev);}
static void
srp_remove_one(struct ib_device *device)
srp_remove_one
struct ib_device *device
struct ib_device
ib_device
*device
*
device
{	struct srp_device *srp_dev;	struct srp_host *host, *tmp_host;	struct srp_target_port *target;	srp_dev = ib_get_client_data(device, &srp_client);	if (!srp_dev)		return;	list_for_each_entry_safe(host, tmp_host, &srp_dev->dev_list, list) {		device_unregister(&host->dev);		/*		 * Wait for the sysfs entry to go away, so that no new		 * target ports can be created.		 */		wait_for_completion(&host->released);		/*		 * Remove all target ports.		 */		spin_lock(&host->target_lock);		list_for_each_entry(target, &host->target_list, list)			srp_queue_remove_work(target);		spin_unlock(&host->target_lock);		/*		 * Wait for target port removal tasks.		 */		flush_workqueue(system_long_wq);		kfree(host);	}	if (srp_dev->fmr_pool)		ib_destroy_fmr_pool(srp_dev->fmr_pool);	ib_dereg_mr(srp_dev->mr);	ib_dealloc_pd(srp_dev->pd);	kfree(srp_dev);}
struct srp_device *srp_dev;
struct srp_device *srp_dev;
struct srp_device
srp_device
*srp_dev
*
srp_dev
struct srp_host *host, *tmp_host;
struct srp_host *host, *tmp_host;
struct srp_host
srp_host
*host
*
host
*tmp_host
*
tmp_host
struct srp_target_port *target;
struct srp_target_port *target;
struct srp_target_port
srp_target_port
*target
*
target
srp_dev = ib_get_client_data(device, &srp_client);
srp_dev = ib_get_client_data(device, &srp_client)
srp_dev
srp_dev
ib_get_client_data(device, &srp_client)
ib_get_client_data
ib_get_client_data
device
device
&srp_client
srp_client
srp_client
if (!srp_dev)		return;
!srp_dev
srp_dev
srp_dev
return;
list_for_each_entry_safe(host, tmp_host, &srp_dev->dev_list, list)
list_for_each_entry_safe(host, tmp_host, &srp_dev->dev_list, list)
list_for_each_entry_safe
list_for_each_entry_safe
host
host
tmp_host
tmp_host
&srp_dev->dev_list
srp_dev->dev_list
srp_dev
srp_dev
dev_list
list
list
)
{		device_unregister(&host->dev);		/*		 * Wait for the sysfs entry to go away, so that no new		 * target ports can be created.		 */		wait_for_completion(&host->released);		/*		 * Remove all target ports.		 */		spin_lock(&host->target_lock);		list_for_each_entry(target, &host->target_list, list)			srp_queue_remove_work(target);		spin_unlock(&host->target_lock);		/*		 * Wait for target port removal tasks.		 */		flush_workqueue(system_long_wq);		kfree(host);	}
device_unregister(&host->dev);
device_unregister(&host->dev)
device_unregister
device_unregister
&host->dev
host->dev
host
host
dev
wait_for_completion(&host->released);
wait_for_completion(&host->released)
wait_for_completion
wait_for_completion
&host->released
host->released
host
host
released
spin_lock(&host->target_lock);
spin_lock(&host->target_lock)
spin_lock
spin_lock
&host->target_lock
host->target_lock
host
host
target_lock
list_for_each_entry(target, &host->target_list, list)
list_for_each_entry(target, &host->target_list, list)
list_for_each_entry
list_for_each_entry
target
target
&host->target_list
host->target_list
host
host
target_list
list
list
)
srp_queue_remove_work(target);
srp_queue_remove_work(target)
srp_queue_remove_work
srp_queue_remove_work
target
target
spin_unlock(&host->target_lock);
spin_unlock(&host->target_lock)
spin_unlock
spin_unlock
&host->target_lock
host->target_lock
host
host
target_lock
flush_workqueue(system_long_wq);
flush_workqueue(system_long_wq);
flush_workqueue
flush_workqueue
(system_long_wq)
system_long_wq
system_long_wq
kfree(host);
kfree(host)
kfree
kfree
host
host
if (srp_dev->fmr_pool)		ib_destroy_fmr_pool(srp_dev->fmr_pool);
srp_dev->fmr_pool
srp_dev
srp_dev
fmr_pool
ib_destroy_fmr_pool(srp_dev->fmr_pool);
ib_destroy_fmr_pool(srp_dev->fmr_pool)
ib_destroy_fmr_pool
ib_destroy_fmr_pool
srp_dev->fmr_pool
srp_dev
srp_dev
fmr_pool
ib_dereg_mr(srp_dev->mr);
ib_dereg_mr(srp_dev->mr)
ib_dereg_mr
ib_dereg_mr
srp_dev->mr
srp_dev
srp_dev
mr
ib_dealloc_pd(srp_dev->pd);
ib_dealloc_pd(srp_dev->pd)
ib_dealloc_pd
ib_dealloc_pd
srp_dev->pd
srp_dev
srp_dev
pd
kfree(srp_dev);
kfree(srp_dev)
kfree
kfree
srp_dev
srp_dev
-----joern-----
(49,32,0)
(34,16,0)
(23,54,0)
(12,6,0)
(9,1,0)
(32,29,0)
(61,5,0)
(44,5,0)
(16,31,0)
(37,31,0)
(42,5,0)
(29,5,0)
(12,5,0)
(52,5,0)
(50,44,0)
(6,52,0)
(4,27,0)
(51,6,0)
(40,57,0)
(58,52,0)
(8,5,0)
(33,29,0)
(35,9,0)
(41,29,0)
(52,9,0)
(3,7,0)
(47,24,0)
(18,14,0)
(59,38,0)
(9,52,0)
(11,30,0)
(22,57,0)
(25,41,0)
(15,47,0)
(39,29,0)
(31,16,0)
(41,25,0)
(46,38,0)
(36,54,0)
(7,29,0)
(10,38,0)
(3,30,0)
(54,52,0)
(0,47,0)
(57,52,0)
(10,33,0)
(37,29,0)
(43,58,0)
(17,55,0)
(24,47,0)
(21,5,0)
(56,5,0)
(25,55,0)
(26,39,0)
(33,10,0)
(48,5,0)
(19,30,0)
(6,12,0)
(31,37,0)
(20,29,0)
(60,16,0)
(57,28,0)
(30,3,0)
(53,20,0)
(13,52,0)
(14,9,0)
(9,14,0)
(55,25,0)
(28,57,0)
(24,5,0)
(45,55,0)
(7,3,0)
(44,52,0)
(47,52,0)
(2,6,0)
(38,10,0)
(28,57,1)
(45,17,1)
(40,22,1)
(44,50,1)
(3,30,1)
(20,53,1)
(26,33,1)
(14,18,1)
(18,35,1)
(12,6,1)
(34,60,1)
(9,1,1)
(59,46,1)
(17,37,1)
(57,40,1)
(35,13,1)
(51,54,1)
(53,7,1)
(52,9,1)
(0,12,1)
(49,20,1)
(22,54,1)
(39,26,1)
(7,3,1)
(57,52,1)
(32,49,1)
(36,23,1)
(47,52,1)
(60,58,1)
(24,47,1)
(33,10,1)
(27,58,1)
(54,36,1)
(55,45,1)
(43,52,1)
(58,52,1)
(2,51,1)
(6,52,1)
(54,52,1)
(4,27,1)
(4,44,1)
(25,55,1)
(9,14,1)
(50,24,1)
(47,15,1)
(11,19,1)
(51,28,1)
(30,11,1)
(58,43,1)
(6,2,1)
(41,25,1)
(37,31,1)
(44,52,1)
(23,32,1)
(15,0,1)
(16,34,1)
(38,59,1)
(10,38,1)
(46,41,1)
(31,16,1)
(19,39,1)
(19,58,2)
(57,52,2)
(17,58,2)
(9,14,2)
(12,6,2)
(37,31,2)
(24,47,2)
(58,52,2)
(52,9,2)
(41,25,2)
(32,58,2)
(31,58,2)
(44,52,2)
(45,58,2)
(25,55,2)
(51,58,2)
(37,58,2)
(39,58,2)
(60,58,2)
(34,58,2)
(40,54,2)
(20,58,2)
(57,54,2)
(7,58,2)
(30,58,2)
(53,58,2)
(50,58,2)
(24,58,2)
(7,3,2)
(10,38,2)
(26,58,2)
(36,58,2)
(38,58,2)
(16,58,2)
(6,52,2)
(25,58,2)
(47,58,2)
(12,58,2)
(0,58,2)
(22,54,2)
(23,58,2)
(31,16,2)
(54,52,2)
(33,10,2)
(44,58,2)
(2,58,2)
(33,58,2)
(47,52,2)
(6,58,2)
(4,27,2)
(49,58,2)
(9,1,2)
(3,58,2)
(28,54,2)
(27,58,2)
(10,58,2)
(59,58,2)
(3,30,2)
(46,58,2)
(28,57,2)
(11,58,2)
(41,58,2)
(15,58,2)
(54,58,2)
(55,58,2)
-----------------------------------
(0,srp_dev)
(1,struct ib_device *device)
(2,mr)
(3,&host->target_lock)
(4,RET)
(5,)
(6,srp_dev->mr)
(7,spin_unlock(&host->target_lock)
(8,if (!srp_dev)
(9,ib_get_client_data(device, &srp_client)
(10,&host->target_lock)
(11,target_lock)
(12,ib_dereg_mr(srp_dev->mr)
(13,srp_dev)
(14,&srp_client)
(15,pd)
(16,host->dev)
(17,host)
(18,srp_client)
(19,host)
(20,flush_workqueue(system_long_wq)
(21,target)
(22,srp_dev)
(23,srp_dev)
(24,ib_dealloc_pd(srp_dev->pd)
(25,&host->released)
(26,target)
(27,return;)
(28,ib_destroy_fmr_pool(srp_dev->fmr_pool)
(29,)
(30,host->target_lock)
(31,&host->dev)
(32,kfree(host)
(33,spin_lock(&host->target_lock)
(34,dev)
(35,device)
(36,fmr_pool)
(37,device_unregister(&host->dev)
(38,host->target_lock)
(39,srp_queue_remove_work(target)
(40,fmr_pool)
(41,wait_for_completion(&host->released)
(42,tmp_host)
(43,srp_dev)
(44,kfree(srp_dev)
(45,released)
(46,host)
(47,srp_dev->pd)
(48,srp_dev)
(49,host)
(50,srp_dev)
(51,srp_dev)
(52,srp_dev = ib_get_client_data(device, &srp_client)
(53,system_long_wq)
(54,srp_dev->fmr_pool)
(55,host->released)
(56,host)
(57,srp_dev->fmr_pool)
(58,!srp_dev)
(59,target_lock)
(60,host)
(61,if (srp_dev->fmr_pool)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^