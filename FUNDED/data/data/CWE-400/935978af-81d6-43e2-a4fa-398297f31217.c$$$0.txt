-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
24,29
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
92,94
93,94
96,97
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,94,95,97
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_06_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(38,35,0)
(38,8,0)
(24,49,0)
(17,23,0)
(8,38,0)
(33,15,0)
(21,22,0)
(40,50,0)
(36,15,0)
(41,15,0)
(14,49,0)
(28,34,0)
(22,35,0)
(51,21,0)
(5,52,0)
(7,25,0)
(26,12,0)
(17,8,0)
(31,8,0)
(32,1,0)
(7,21,0)
(39,4,0)
(11,5,0)
(45,50,0)
(12,26,0)
(19,23,0)
(27,4,0)
(34,52,0)
(23,22,0)
(30,12,0)
(37,25,0)
(3,44,0)
(15,22,0)
(1,22,0)
(2,34,0)
(22,5,0)
(4,44,0)
(52,34,0)
(23,17,0)
(21,7,0)
(5,22,0)
(8,31,0)
(13,35,0)
(48,22,0)
(46,13,0)
(0,1,0)
(34,2,0)
(9,44,0)
(52,5,0)
(20,21,0)
(41,13,0)
(6,2,0)
(47,35,0)
(18,44,0)
(43,23,0)
(2,6,0)
(5,11,0)
(8,17,0)
(26,10,0)
(29,41,0)
(42,7,0)
(25,35,0)
(15,41,0)
(42,21,1)
(21,20,1)
(0,32,1)
(49,24,1)
(52,34,1)
(34,2,1)
(40,38,1)
(2,28,1)
(13,46,1)
(25,37,1)
(26,12,1)
(33,1,1)
(5,11,1)
(16,50,1)
(15,36,1)
(23,22,1)
(14,4,1)
(15,22,1)
(23,43,1)
(17,23,1)
(48,49,1)
(43,19,1)
(1,0,1)
(21,22,1)
(38,8,1)
(4,39,1)
(2,6,1)
(5,52,1)
(36,33,1)
(7,21,1)
(51,13,1)
(19,25,1)
(20,51,1)
(50,45,1)
(33,26,1)
(32,22,1)
(40,49,1)
(24,14,1)
(39,27,1)
(45,40,1)
(8,31,1)
(37,7,1)
(1,22,1)
(41,29,1)
(28,48,1)
(29,15,1)
(46,41,1)
(8,17,1)
(30,1,1)
(22,5,1)
(41,15,1)
(12,30,1)
(7,42,1)
(0,49,2)
(5,11,2)
(2,6,2)
(13,49,2)
(43,49,2)
(38,49,2)
(37,49,2)
(32,49,2)
(1,22,2)
(8,17,2)
(2,49,2)
(23,22,2)
(29,49,2)
(22,49,2)
(41,15,2)
(48,49,2)
(28,49,2)
(1,49,2)
(52,34,2)
(41,49,2)
(23,49,2)
(26,12,2)
(7,21,2)
(42,49,2)
(26,1,2)
(34,49,2)
(46,49,2)
(5,49,2)
(38,8,2)
(52,49,2)
(34,2,2)
(7,49,2)
(19,49,2)
(15,22,2)
(5,52,2)
(21,22,2)
(17,49,2)
(12,1,2)
(15,49,2)
(21,49,2)
(22,5,2)
(8,49,2)
(51,49,2)
(25,49,2)
(36,49,2)
(33,49,2)
(17,23,2)
(20,49,2)
(8,31,2)
(30,1,2)
-----------------------------------
(0,NULL)
(1,data == NULL)
(2,sizeof(struct _twoIntsStruct)
(3,data)
(4,data = NULL)
(5,(struct _twoIntsStruct *)
(6,struct _twoIntsStruct)
(7,data[0].intTwo)
(8,(twoIntsStruct *)
(9,if(STATIC_CONST_FIVE==5)
(10,)
(11,struct _twoIntsStruct *)
(12,-1)
(13,data[0].intOne = 0)
(14,STATIC_CONST_FIVE)
(15,data[0])
(16,RET)
(17,&data[0])
(18,if(STATIC_CONST_FIVE==5)
(19,data)
(20,0)
(21,data[0])
(22,data = (struct _twoIntsStruct *)
(23,data[0])
(24,5)
(25,data[0].intTwo = 0)
(26,exit(-1)
(27,data)
(28,100)
(29,intOne)
(30,1)
(31,twoIntsStruct *)
(32,data)
(33,data)
(34,100*sizeof(struct _twoIntsStruct)
(35,)
(36,0)
(37,0)
(38,printStructLine((twoIntsStruct *)
(39,NULL)
(40,STATIC_CONST_FIVE)
(41,data[0].intOne)
(42,intTwo)
(43,0)
(44,)
(45,5)
(46,0)
(47,if (data == NULL)
(48,data)
(49,STATIC_CONST_FIVE==5)
(50,STATIC_CONST_FIVE==5)
(51,data)
(52,malloc(100*sizeof(struct _twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^