-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_03_bad()
{
    char * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,68,69,71
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_03_bad(){    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_03_bad()
CWE401_Memory_Leak__char_calloc_03_bad
{    char * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(20,0,0)
(8,15,0)
(17,3,0)
(9,28,0)
(35,2,0)
(5,6,0)
(20,25,0)
(24,18,0)
(2,35,0)
(2,24,0)
(24,2,0)
(22,0,0)
(13,24,0)
(0,20,0)
(29,6,0)
(26,32,0)
(26,13,0)
(4,27,0)
(16,13,0)
(34,5,0)
(30,6,0)
(21,27,0)
(13,32,0)
(19,28,0)
(7,35,0)
(23,15,0)
(12,6,0)
(11,26,0)
(3,32,0)
(18,24,0)
(31,5,0)
(36,26,0)
(1,2,0)
(10,32,0)
(24,13,0)
(27,13,0)
(3,13,0)
(15,8,1)
(16,15,1)
(26,36,1)
(28,9,1)
(7,1,1)
(9,19,1)
(4,21,1)
(11,20,1)
(23,5,1)
(0,22,1)
(33,28,1)
(3,17,1)
(34,31,1)
(21,13,1)
(19,3,1)
(22,27,1)
(13,24,1)
(27,13,1)
(24,2,1)
(3,13,1)
(8,23,1)
(24,18,1)
(36,11,1)
(2,35,1)
(11,27,1)
(19,15,1)
(20,0,1)
(17,26,1)
(35,7,1)
(27,4,1)
(26,13,1)
(5,34,1)
(1,16,1)
(3,13,2)
(13,24,2)
(20,27,2)
(16,15,2)
(35,15,2)
(0,27,2)
(4,15,2)
(26,15,2)
(21,15,2)
(24,18,2)
(20,0,2)
(1,15,2)
(26,13,2)
(2,15,2)
(36,15,2)
(17,15,2)
(3,15,2)
(24,2,2)
(7,15,2)
(24,15,2)
(27,13,2)
(22,27,2)
(13,15,2)
(27,15,2)
(2,35,2)
(11,15,2)
-----------------------------------
(0,-1)
(1,100)
(2,calloc(100, sizeof(char)
(3,printLine(data)
(4,NULL)
(5,data = NULL)
(6,)
(7,char)
(8,5)
(9,5)
(10,if (data == NULL)
(11,data)
(12,if(5==5)
(13,data = (char *)
(14, sizeof(char)
(15,5==5)
(16,data)
(17,data)
(18,char *)
(19,5)
(20,exit(-1)
(21,data)
(22,1)
(23,5)
(24,(char *)
(25,)
(26,strcpy(data, "A String")
(27,data == NULL)
(28,5==5)
(29,if(5==5)
(30,data)
(31,data)
(32,)
(33,RET)
(34,NULL)
(35,sizeof(char)
(36,"A String")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^