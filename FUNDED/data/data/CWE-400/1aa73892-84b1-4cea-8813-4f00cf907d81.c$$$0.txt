-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
25,26
27,28
27,29
29,30
31,32
31,33
31,34
31,35
32,33
33,34
33,35
34,35
37,38
37,39
38,39
40,41
40,42
41,42
41,43
42,43
45,46
47,48
48,49
50,51
51,52
52,53
52,54
53,54
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,30,35,36,39,43,44,46,49,54,55
-----computeFrom-----
12,13
12,14
18,19
18,20
33,34
33,35
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(13,12,0)
(28,7,0)
(18,14,0)
(5,27,0)
(3,7,0)
(25,27,0)
(18,3,0)
(0,2,0)
(24,12,0)
(15,6,0)
(19,24,0)
(8,3,0)
(22,26,0)
(11,14,0)
(1,12,0)
(9,14,0)
(21,18,0)
(23,18,0)
(20,7,0)
(26,4,0)
(17,25,0)
(3,18,0)
(14,2,0)
(6,7,0)
(27,2,0)
(12,2,0)
(18,23,0)
(16,24,0)
(27,25,0)
(9,27,1)
(25,17,1)
(22,3,1)
(10,3,1)
(16,14,1)
(11,9,1)
(20,24,1)
(18,21,1)
(21,8,1)
(6,7,1)
(19,16,1)
(27,25,1)
(3,7,1)
(8,7,1)
(18,14,1)
(6,15,1)
(28,20,1)
(14,11,1)
(8,6,1)
(24,19,1)
(3,18,1)
(7,28,1)
(15,26,1)
(18,23,1)
(26,22,1)
(17,5,1)
(6,7,2)
(18,23,2)
(8,3,2)
(3,18,2)
(18,14,2)
(3,7,2)
(26,3,2)
(27,25,2)
(21,3,2)
(6,3,2)
(18,3,2)
(15,3,2)
(22,3,2)
(3,3,2)
-----------------------------------
(0,count)
(1,i)
(2,)
(3,i < (size_t)
(4,)
(5,count)
(6,i++)
(7,i = 0)
(8,i)
(9,count)
(10,RET)
(11,20)
(12,)
(13,for (i = 0; i < (size_t)
(14,count = 20)
(15,i)
(16,i)
(17,1)
(18,(size_t)
(19,0)
(20,i)
(21,count)
(22,"Hello")
(23,size_t)
(24,i = 0)
(25,-1)
(26,printLine("Hello")
(27,count = -1)
(28,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^