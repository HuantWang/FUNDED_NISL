-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * * dataPtr = (int * *)dataVoidPtr;
    /* dereference dataPtr into data */
    int * data = (*dataPtr);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
14,18
18,19
19,20
19,21
20,21
20,22
22,23
22,24
25,26
27,28
28,29
28,30
30,31
30,32
30,33
33,34
34,35
35,36
36,37
-----nextToken-----
2,4,6,8,9,13,15,16,17,21,23,24,26,29,31,32,37,38
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * * dataPtr = (int * *)dataVoidPtr;    /* dereference dataPtr into data */    int * data = (*dataPtr);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_malloc_64b_badSink(void * dataVoidPtr)
CWE401_Memory_Leak__int_malloc_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * * dataPtr = (int * *)dataVoidPtr;    /* dereference dataPtr into data */    int * data = (*dataPtr);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * * dataPtr = (int * *)dataVoidPtr;
int * * dataPtr = (int * *)dataVoidPtr;
int
* * dataPtr = (int * *)dataVoidPtr
*
*
dataPtr
= (int * *)dataVoidPtr
(int * *)dataVoidPtr
int * *
int
* *
*
*
dataVoidPtr
dataVoidPtr
int * data = (*dataPtr);
int * data = (*dataPtr);
int
* data = (*dataPtr)
*
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
;
-----joern-----
(13,9,0)
(6,9,0)
(4,12,0)
(7,0,0)
(9,12,0)
(9,0,0)
(11,12,0)
(8,0,0)
(1,0,0)
(13,1,0)
(10,13,0)
(12,11,0)
(1,13,0)
(12,2,0)
(3,1,0)
(12,9,0)
(9,12,1)
(10,3,1)
(1,13,1)
(5,1,1)
(3,9,1)
(12,2,1)
(4,6,1)
(13,10,1)
(13,9,1)
(12,4,1)
(12,11,1)
(1,13,2)
(12,11,2)
(12,2,2)
(9,12,2)
(13,9,2)
-----------------------------------
(0,)
(1,* data = (*dataPtr)
(2,void * dataVoidPtr)
(3,data)
(4,dataVoidPtr)
(5,RET)
(6,dataPtr)
(7,data)
(8,dataPtr)
(9,* * dataPtr = (int * *)
(10,dataPtr)
(11,int * *)
(12,(int * *)
(13,*dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^