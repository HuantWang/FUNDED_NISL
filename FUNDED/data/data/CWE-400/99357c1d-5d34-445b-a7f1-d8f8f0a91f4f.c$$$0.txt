-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad()
{
    switch(6)
    {
    case 6:
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
            free(data);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
48,49
50,51
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
88,91
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,7,10,14,16,17,21,23,26,28,31,32,36,38,43,45,49,51,52,56,58,62,65,67,70,72,75,78,79,83,85,90,92,93,97,99,103,105,106,107,111,112,113
-----computeFrom-----
27,28
27,29
34,35
34,36
60,61
60,62
73,74
73,75
81,82
81,83
-----guardedBy-----
83,105
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad(){    switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_15_bad
{    switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(49,6,0)
(25,41,0)
(17,36,0)
(15,41,0)
(1,29,0)
(35,24,0)
(49,29,0)
(38,9,0)
(42,41,0)
(39,41,0)
(44,10,0)
(2,11,0)
(30,38,0)
(13,39,0)
(8,4,0)
(36,24,0)
(6,33,0)
(43,2,0)
(40,5,0)
(38,19,0)
(27,11,0)
(9,38,0)
(7,19,0)
(33,9,0)
(1,6,0)
(12,24,0)
(27,37,0)
(5,41,0)
(22,14,0)
(9,5,0)
(11,2,0)
(45,43,0)
(18,10,0)
(26,4,0)
(27,5,0)
(37,27,0)
(28,2,0)
(31,24,0)
(48,14,0)
(20,1,0)
(0,9,0)
(21,49,0)
(33,6,0)
(22,23,0)
(47,33,0)
(6,41,0)
(3,24,0)
(10,5,0)
(33,47,0)
(39,5,0)
(4,6,0)
(19,38,0)
(11,27,0)
(34,16,0)
(41,24,0)
(14,22,0)
(5,27,0)
(9,33,0)
(50,6,0)
(2,43,0)
(20,49,1)
(0,50,1)
(38,19,1)
(46,35,1)
(49,6,1)
(46,12,1)
(35,4,1)
(33,9,1)
(1,20,1)
(39,13,1)
(27,11,1)
(26,6,1)
(10,18,1)
(12,36,1)
(33,47,1)
(40,32,1)
(35,1,1)
(27,37,1)
(45,28,1)
(8,26,1)
(13,10,1)
(22,14,1)
(30,0,1)
(49,21,1)
(18,44,1)
(10,5,1)
(43,45,1)
(50,39,1)
(9,5,1)
(5,27,1)
(13,22,1)
(4,8,1)
(1,6,1)
(14,48,1)
(39,5,1)
(19,7,1)
(6,33,1)
(9,38,1)
(44,5,1)
(28,40,1)
(48,10,1)
(2,43,1)
(7,30,1)
(21,4,1)
(11,2,1)
(36,17,1)
(4,6,1)
(17,32,1)
(40,32,2)
(18,32,2)
(48,10,2)
(50,32,2)
(38,19,2)
(30,32,2)
(17,32,2)
(9,38,2)
(49,6,2)
(5,32,2)
(1,6,2)
(5,27,2)
(27,11,2)
(26,32,2)
(13,32,2)
(0,32,2)
(33,32,2)
(8,32,2)
(11,32,2)
(9,5,2)
(45,32,2)
(22,14,2)
(9,32,2)
(35,32,2)
(4,32,2)
(28,32,2)
(10,5,2)
(33,9,2)
(27,37,2)
(14,10,2)
(39,32,2)
(22,10,2)
(6,32,2)
(43,32,2)
(11,2,2)
(1,4,2)
(49,4,2)
(10,32,2)
(19,32,2)
(33,47,2)
(2,43,2)
(27,32,2)
(38,32,2)
(6,33,2)
(12,32,2)
(2,32,2)
(20,4,2)
(7,32,2)
(4,6,2)
(36,32,2)
(44,32,2)
(39,5,2)
(21,4,2)
-----------------------------------
(0,data)
(1,free(data)
(2,100*sizeof(wchar_t)
(3,default:)
(4,data != NULL)
(5,* data = (wchar_t *)
(6,data = (wchar_t *)
(7,wchar_t)
(8,NULL)
(9,realloc(data, (130000)
(10,data == NULL)
(11,malloc(100*sizeof(wchar_t)
(12,break;)
(13,data)
(14,-1)
(15,if (data != NULL)
(16,)
(17,"Benign, fixed string")
(18,NULL)
(19,sizeof(wchar_t)
(20,data)
(21,data)
(22,exit(-1)
(23,)
(24,)
(25,if (data == NULL)
(26,data)
(27,(wchar_t *)
(28,100)
(29,)
(30,130000)
(31,case 6:)
(32,6)
(33,(wchar_t *)
(34,switch(6)
(35,break;)
(36,printLine("Benign, fixed string")
(37,wchar_t *)
(38,(130000)
(39,printWLine(data)
(40,data)
(41,)
(42,data)
(43,sizeof(wchar_t)
(44,data)
(45,wchar_t)
(46,RET)
(47,wchar_t *)
(48,1)
(49,printWLine(data)
(50,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^