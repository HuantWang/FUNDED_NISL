-----label-----
1
-----code-----
static int
jme_map_tx_skb(struct jme_adapter *jme, struct sk_buff *skb, int idx)
{
	struct jme_ring *txring = &(jme->txring[0]);
	struct txdesc *txdesc = txring->desc, *ctxdesc;
	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
	bool hidma = jme->dev->features & NETIF_F_HIGHDMA;
	int i, nr_frags = skb_shinfo(skb)->nr_frags;
	int mask = jme->tx_ring_mask;
	const struct skb_frag_struct *frag;
	u32 len;
	int ret = 0;

	for (i = 0 ; i < nr_frags ; ++i) {
		frag = &skb_shinfo(skb)->frags[i];
		ctxdesc = txdesc + ((idx + i + 2) & (mask));
		ctxbi = txbi + ((idx + i + 2) & (mask));

		ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,
				skb_frag_page(frag),
				frag->page_offset, skb_frag_size(frag), hidma);
		if (ret) {
			jme_drop_tx_map(jme, idx, i);
			goto out;
		}

	}

	len = skb_is_nonlinear(skb) ? skb_headlen(skb) : skb->len;
	ctxdesc = txdesc + ((idx + 1) & (mask));
	ctxbi = txbi + ((idx + 1) & (mask));
	ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data),
			offset_in_page(skb->data), len, hidma);
	if (ret)
		jme_drop_tx_map(jme, idx, i);

out:
	return ret;

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
31,32
32,33
32,34
33,34
33,35
34,35
38,39
39,40
39,41
39,42
40,41
42,43
42,44
42,45
45,46
46,47
46,48
47,48
50,51
50,52
53,54
54,55
54,56
54,57
55,56
57,58
57,59
57,60
60,61
61,62
61,63
62,63
65,66
65,67
68,69
69,70
69,71
71,72
71,73
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
81,82
83,84
84,85
84,86
84,87
86,87
88,89
88,90
90,91
91,92
91,93
92,93
92,94
93,94
95,96
98,99
99,100
99,101
101,102
101,103
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
112,113
112,114
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
124,125
124,126
126,127
128,129
128,130
128,131
128,132
129,130
130,131
130,132
131,132
134,135
134,136
135,136
137,138
139,140
140,141
142,143
142,144
142,145
142,146
142,147
143,144
144,145
144,146
145,146
147,148
148,149
148,150
149,150
149,151
150,151
150,152
151,152
153,154
156,157
158,159
159,160
159,161
160,161
162,163
162,164
163,164
165,166
166,167
166,168
167,168
168,169
168,170
169,170
169,171
170,171
172,173
175,176
176,177
178,179
179,180
179,181
180,181
182,183
182,184
183,184
185,186
186,187
186,188
187,188
188,189
188,190
189,190
189,191
190,191
192,193
195,196
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
202,206
202,207
202,208
202,209
202,210
203,204
205,206
205,207
206,207
209,210
211,212
213,214
213,215
214,215
216,217
218,219
218,220
219,220
222,223
222,224
223,224
225,226
227,228
229,230
229,231
230,231
232,233
232,234
233,234
234,235
234,236
234,237
234,238
235,236
237,238
239,240
241,242
243,244
245,246
246,247
246,248
247,248
249,250
249,251
249,252
250,251
250,252
251,252
253,254
255,256
255,257
256,257
258,259
260,261
260,262
261,262
264,265
265,266
265,267
266,267
268,269
268,270
269,270
271,272
272,273
272,274
273,274
274,275
274,276
275,276
278,279
279,280
281,282
282,283
282,284
283,284
285,286
285,287
286,287
288,289
289,290
289,291
290,291
291,292
291,293
292,293
295,296
296,297
298,299
299,300
299,301
300,301
302,303
302,304
302,305
302,306
302,307
302,308
302,309
302,310
303,304
305,306
305,307
306,307
309,310
311,312
313,314
313,315
314,315
316,317
316,318
317,318
320,321
320,322
321,322
323,324
323,325
324,325
327,328
329,330
331,332
331,333
332,333
334,335
335,336
335,337
335,338
335,339
336,337
338,339
340,341
342,343
344,345
344,346
346,347
347,348
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,25,27,28,35,36,37,41,43,44,48,49,51,52,56,58,59,63,64,66,67,70,72,78,79,80,82,85,87,89,94,96,97,100,102,106,107,111,113,114,118,120,123,125,127,132,133,136,138,141,146,152,154,155,157,161,164,171,173,174,177,181,184,191,193,194,197,201,204,207,208,210,212,215,217,220,221,224,226,228,231,236,238,240,242,244,248,252,254,257,259,262,263,267,270,276,277,280,284,287,293,294,297,301,304,307,308,310,312,315,318,319,322,325,326,328,330,333,337,339,341,343,345,348
-----computeFrom-----
74,75
74,76
130,131
130,132
134,135
134,136
144,145
144,146
159,160
159,161
162,163
162,164
166,167
166,168
168,169
168,170
169,170
169,171
179,180
179,181
182,183
182,184
186,187
186,188
188,189
188,190
189,190
189,191
199,200
199,201
246,247
246,248
265,266
265,267
268,269
268,270
272,273
272,274
274,275
274,276
282,283
282,284
285,286
285,287
289,290
289,291
291,292
291,293
299,300
299,301
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static intjme_map_tx_skb(struct jme_adapter *jme, struct sk_buff *skb, int idx){	struct jme_ring *txring = &(jme->txring[0]);	struct txdesc *txdesc = txring->desc, *ctxdesc;	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;	bool hidma = jme->dev->features & NETIF_F_HIGHDMA;	int i, nr_frags = skb_shinfo(skb)->nr_frags;	int mask = jme->tx_ring_mask;	const struct skb_frag_struct *frag;	u32 len;	int ret = 0;	for (i = 0 ; i < nr_frags ; ++i) {		frag = &skb_shinfo(skb)->frags[i];		ctxdesc = txdesc + ((idx + i + 2) & (mask));		ctxbi = txbi + ((idx + i + 2) & (mask));		ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma);		if (ret) {			jme_drop_tx_map(jme, idx, i);			goto out;		}	}	len = skb_is_nonlinear(skb) ? skb_headlen(skb) : skb->len;	ctxdesc = txdesc + ((idx + 1) & (mask));	ctxbi = txbi + ((idx + 1) & (mask));	ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data),			offset_in_page(skb->data), len, hidma);	if (ret)		jme_drop_tx_map(jme, idx, i);out:	return ret;}
static int
jme_map_tx_skb(struct jme_adapter *jme, struct sk_buff *skb, int idx)
jme_map_tx_skb
struct jme_adapter *jme
struct jme_adapter
jme_adapter
*jme
*
jme
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
int idx
int
idx
idx
{	struct jme_ring *txring = &(jme->txring[0]);	struct txdesc *txdesc = txring->desc, *ctxdesc;	struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;	bool hidma = jme->dev->features & NETIF_F_HIGHDMA;	int i, nr_frags = skb_shinfo(skb)->nr_frags;	int mask = jme->tx_ring_mask;	const struct skb_frag_struct *frag;	u32 len;	int ret = 0;	for (i = 0 ; i < nr_frags ; ++i) {		frag = &skb_shinfo(skb)->frags[i];		ctxdesc = txdesc + ((idx + i + 2) & (mask));		ctxbi = txbi + ((idx + i + 2) & (mask));		ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma);		if (ret) {			jme_drop_tx_map(jme, idx, i);			goto out;		}	}	len = skb_is_nonlinear(skb) ? skb_headlen(skb) : skb->len;	ctxdesc = txdesc + ((idx + 1) & (mask));	ctxbi = txbi + ((idx + 1) & (mask));	ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data),			offset_in_page(skb->data), len, hidma);	if (ret)		jme_drop_tx_map(jme, idx, i);out:	return ret;}
struct jme_ring *txring = &(jme->txring[0]);
struct jme_ring *txring = &(jme->txring[0]);
struct jme_ring
jme_ring
*txring = &(jme->txring[0])
*
txring
= &(jme->txring[0])
&(jme->txring[0])
(jme->txring[0])
jme->txring[0]
jme->txring
jme
jme
txring
0
struct txdesc *txdesc = txring->desc, *ctxdesc;
struct txdesc *txdesc = txring->desc, *ctxdesc;
struct txdesc
txdesc
*txdesc = txring->desc
*
txdesc
= txring->desc
txring->desc
txring
txring
desc
*ctxdesc
*
ctxdesc
struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
struct jme_buffer_info *txbi = txring->bufinf, *ctxbi;
struct jme_buffer_info
jme_buffer_info
*txbi = txring->bufinf
*
txbi
= txring->bufinf
txring->bufinf
txring
txring
bufinf
*ctxbi
*
ctxbi
bool hidma = jme->dev->features & NETIF_F_HIGHDMA;
bool hidma = jme->dev->features & NETIF_F_HIGHDMA;
bool
hidma = jme->dev->features & NETIF_F_HIGHDMA
hidma
= jme->dev->features & NETIF_F_HIGHDMA
jme->dev->features & NETIF_F_HIGHDMA
jme->dev->features
jme->dev
jme
jme
dev
features
NETIF_F_HIGHDMA
NETIF_F_HIGHDMA
int i, nr_frags = skb_shinfo(skb)->nr_frags;
int i, nr_frags = skb_shinfo(skb)->nr_frags;
int
i
i
nr_frags = skb_shinfo(skb)->nr_frags
nr_frags
= skb_shinfo(skb)->nr_frags
skb_shinfo(skb)->nr_frags
skb_shinfo(skb)
skb_shinfo
skb_shinfo
skb
skb
nr_frags
int mask = jme->tx_ring_mask;
int mask = jme->tx_ring_mask;
int
mask = jme->tx_ring_mask
mask
= jme->tx_ring_mask
jme->tx_ring_mask
jme
jme
tx_ring_mask
const struct skb_frag_struct *frag;
const struct skb_frag_struct *frag;
const struct skb_frag_struct
skb_frag_struct
*frag
*
frag
u32 len;
u32 len;
u32
u32
len
len
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
for (i = 0 ; i < nr_frags ; ++i) {		frag = &skb_shinfo(skb)->frags[i];		ctxdesc = txdesc + ((idx + i + 2) & (mask));		ctxbi = txbi + ((idx + i + 2) & (mask));		ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma);		if (ret) {			jme_drop_tx_map(jme, idx, i);			goto out;		}	}
i = 0 ;
i = 0
i
i
0
i < nr_frags
i
i
nr_frags
nr_frags
++i
i
i
{		frag = &skb_shinfo(skb)->frags[i];		ctxdesc = txdesc + ((idx + i + 2) & (mask));		ctxbi = txbi + ((idx + i + 2) & (mask));		ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma);		if (ret) {			jme_drop_tx_map(jme, idx, i);			goto out;		}	}
frag = &skb_shinfo(skb)->frags[i];
frag = &skb_shinfo(skb)->frags[i]
frag
frag
&skb_shinfo(skb)->frags[i]
skb_shinfo(skb)->frags[i]
skb_shinfo(skb)->frags
skb_shinfo(skb)
skb_shinfo
skb_shinfo
skb
skb
frags
i
i
ctxdesc = txdesc + ((idx + i + 2) & (mask));
ctxdesc = txdesc + ((idx + i + 2) & (mask))
ctxdesc
ctxdesc
txdesc + ((idx + i + 2) & (mask))
txdesc
txdesc
((idx + i + 2) & (mask))
(idx + i + 2) & (mask)
(idx + i + 2)
idx + i + 2
idx + i
idx
idx
i
i
2
(mask)
mask
mask
ctxbi = txbi + ((idx + i + 2) & (mask));
ctxbi = txbi + ((idx + i + 2) & (mask))
ctxbi
ctxbi
txbi + ((idx + i + 2) & (mask))
txbi
txbi
((idx + i + 2) & (mask))
(idx + i + 2) & (mask)
(idx + i + 2)
idx + i + 2
idx + i
idx
idx
i
i
2
(mask)
mask
mask
ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma);
ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma)
ret
ret
jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,				skb_frag_page(frag),				frag->page_offset, skb_frag_size(frag), hidma)
jme_fill_tx_map
jme_fill_tx_map
jme->pdev
jme
jme
pdev
ctxdesc
ctxdesc
ctxbi
ctxbi
skb_frag_page(frag)
skb_frag_page
skb_frag_page
frag
frag
frag->page_offset
frag
frag
page_offset
skb_frag_size(frag)
skb_frag_size
skb_frag_size
frag
frag
hidma
hidma
if (ret) {			jme_drop_tx_map(jme, idx, i);			goto out;		}
ret
ret
{			jme_drop_tx_map(jme, idx, i);			goto out;		}
jme_drop_tx_map(jme, idx, i);
jme_drop_tx_map(jme, idx, i)
jme_drop_tx_map
jme_drop_tx_map
jme
jme
idx
idx
i
i
goto out;
out
len = skb_is_nonlinear(skb) ? skb_headlen(skb) : skb->len;
len = skb_is_nonlinear(skb) ? skb_headlen(skb) : skb->len
len
len
skb_is_nonlinear(skb) ? skb_headlen(skb) : skb->len
skb_is_nonlinear(skb)
skb_is_nonlinear
skb_is_nonlinear
skb
skb
skb_headlen(skb)
skb_headlen
skb_headlen
skb
skb
skb->len
skb
skb
len
ctxdesc = txdesc + ((idx + 1) & (mask));
ctxdesc = txdesc + ((idx + 1) & (mask))
ctxdesc
ctxdesc
txdesc + ((idx + 1) & (mask))
txdesc
txdesc
((idx + 1) & (mask))
(idx + 1) & (mask)
(idx + 1)
idx + 1
idx
idx
1
(mask)
mask
mask
ctxbi = txbi + ((idx + 1) & (mask));
ctxbi = txbi + ((idx + 1) & (mask))
ctxbi
ctxbi
txbi + ((idx + 1) & (mask))
txbi
txbi
((idx + 1) & (mask))
(idx + 1) & (mask)
(idx + 1)
idx + 1
idx
idx
1
(mask)
mask
mask
ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data),			offset_in_page(skb->data), len, hidma);
ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data),			offset_in_page(skb->data), len, hidma)
ret
ret
jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data),			offset_in_page(skb->data), len, hidma)
jme_fill_tx_map
jme_fill_tx_map
jme->pdev
jme
jme
pdev
ctxdesc
ctxdesc
ctxbi
ctxbi
virt_to_page(skb->data)
virt_to_page
virt_to_page
skb->data
skb
skb
data
offset_in_page(skb->data)
offset_in_page
offset_in_page
skb->data
skb
skb
data
len
len
hidma
hidma
if (ret)		jme_drop_tx_map(jme, idx, i);
ret
ret
jme_drop_tx_map(jme, idx, i);
jme_drop_tx_map(jme, idx, i)
jme_drop_tx_map
jme_drop_tx_map
jme
jme
idx
idx
i
i
out:	return ret;
out
return ret;
ret
ret
-----joern-----
(8,87,0)
(73,72,0)
(54,35,0)
(68,159,0)
(168,87,0)
(36,140,0)
(3,121,0)
(123,88,0)
(15,113,0)
(96,41,0)
(116,159,0)
(4,88,0)
(133,99,0)
(128,88,0)
(56,88,0)
(29,10,0)
(102,40,0)
(109,18,0)
(116,64,0)
(146,88,0)
(13,73,0)
(118,90,0)
(61,38,0)
(82,121,0)
(19,47,0)
(153,88,0)
(147,0,0)
(77,39,0)
(55,72,0)
(18,109,0)
(151,64,0)
(169,165,0)
(116,10,0)
(18,37,0)
(71,165,0)
(100,116,0)
(124,55,0)
(69,99,0)
(59,165,0)
(125,41,0)
(173,106,0)
(44,88,0)
(115,69,0)
(69,115,0)
(116,91,0)
(139,88,0)
(25,99,0)
(44,108,0)
(133,5,0)
(17,58,0)
(75,35,0)
(120,56,0)
(15,88,0)
(38,176,0)
(48,147,0)
(26,165,0)
(166,116,0)
(129,108,0)
(0,88,0)
(108,129,0)
(172,135,0)
(87,72,0)
(65,140,0)
(132,40,0)
(121,36,0)
(137,88,0)
(78,76,0)
(129,65,0)
(21,176,0)
(163,147,0)
(98,88,0)
(17,23,0)
(165,4,0)
(147,24,0)
(12,130,0)
(101,136,0)
(107,156,0)
(3,24,0)
(45,64,0)
(6,88,0)
(64,116,0)
(172,116,0)
(148,73,0)
(73,47,0)
(129,15,0)
(106,88,0)
(40,165,0)
(7,97,0)
(174,9,0)
(150,35,0)
(27,140,0)
(64,135,0)
(52,100,0)
(23,99,0)
(167,125,0)
(41,96,0)
(130,47,0)
(77,72,0)
(91,116,0)
(16,116,0)
(106,115,0)
(10,86,0)
(58,47,0)
(85,0,0)
(104,88,0)
(55,140,0)
(108,24,0)
(81,127,0)
(165,109,0)
(86,10,0)
(96,88,0)
(3,156,0)
(154,173,0)
(27,76,0)
(37,18,0)
(4,165,0)
(23,17,0)
(92,47,0)
(116,156,0)
(80,106,0)
(41,9,0)
(76,86,0)
(113,72,0)
(137,136,0)
(161,137,0)
(2,4,0)
(14,25,0)
(37,15,0)
(55,47,0)
(46,172,0)
(125,99,0)
(36,121,0)
(121,15,0)
(73,63,0)
(50,88,0)
(58,17,0)
(145,63,0)
(76,15,0)
(60,86,0)
(51,39,0)
(33,88,0)
(39,77,0)
(79,19,0)
(135,74,0)
(83,0,0)
(156,3,0)
(109,88,0)
(67,108,0)
(85,39,0)
(43,47,0)
(134,69,0)
(177,55,0)
(19,27,0)
(93,130,0)
(176,38,0)
(162,58,0)
(0,85,0)
(110,65,0)
(5,165,0)
(165,44,0)
(159,116,0)
(11,113,0)
(84,109,0)
(53,36,0)
(116,137,0)
(143,24,0)
(136,137,0)
(155,37,0)
(155,140,0)
(130,36,0)
(160,77,0)
(34,87,0)
(157,88,0)
(86,176,0)
(95,44,0)
(173,47,0)
(20,168,0)
(35,54,0)
(28,77,0)
(111,17,0)
(37,155,0)
(56,91,0)
(74,135,0)
(149,19,0)
(89,9,0)
(73,140,0)
(141,129,0)
(58,74,0)
(86,76,0)
(22,97,0)
(115,106,0)
(108,44,0)
(176,88,0)
(116,100,0)
(54,165,0)
(27,19,0)
(74,58,0)
(18,176,0)
(24,88,0)
(87,168,0)
(165,5,0)
(35,99,0)
(114,133,0)
(38,0,0)
(42,15,0)
(10,90,0)
(165,40,0)
(175,96,0)
(164,18,0)
(97,88,0)
(25,41,0)
(158,73,0)
(156,90,0)
(112,155,0)
(24,147,0)
(171,173,0)
(56,4,0)
(127,47,0)
(41,25,0)
(131,135,0)
(117,88,0)
(76,27,0)
(136,168,0)
(49,113,0)
(116,172,0)
(113,15,0)
(170,65,0)
(159,72,0)
(1,56,0)
(40,72,0)
(9,99,0)
(165,137,0)
(65,129,0)
(121,3,0)
(66,37,0)
(144,88,0)
(9,41,0)
(57,3,0)
(135,90,0)
(5,133,0)
(122,116,0)
(100,135,0)
(168,136,0)
(165,96,0)
(138,91,0)
(91,90,0)
(41,125,0)
(39,85,0)
(36,130,0)
(70,88,0)
(103,155,0)
(119,55,0)
(94,133,0)
(165,54,0)
(105,159,0)
(62,23,0)
(142,38,0)
(30,115,0)
(152,88,0)
(31,27,0)
(61,142,1)
(80,137,1)
(147,0,1)
(56,91,1)
(23,99,1)
(170,110,1)
(136,101,1)
(25,14,1)
(116,172,1)
(2,44,1)
(110,67,1)
(165,96,1)
(77,28,1)
(162,17,1)
(30,69,1)
(28,160,1)
(97,22,1)
(69,134,1)
(172,46,1)
(136,168,1)
(20,87,1)
(156,3,1)
(37,155,1)
(58,17,1)
(161,24,1)
(127,47,1)
(134,80,1)
(65,140,1)
(102,132,1)
(32,91,1)
(15,113,1)
(149,31,1)
(171,47,1)
(114,94,1)
(79,149,1)
(150,75,1)
(21,0,1)
(165,54,1)
(3,24,1)
(39,77,1)
(43,97,1)
(18,176,1)
(159,72,1)
(23,62,1)
(121,36,1)
(137,136,1)
(177,124,1)
(106,115,1)
(16,166,1)
(165,26,1)
(73,158,1)
(34,161,1)
(108,24,1)
(100,135,1)
(55,72,1)
(122,172,1)
(65,170,1)
(73,47,1)
(141,65,1)
(107,10,1)
(26,169,1)
(44,108,1)
(9,174,1)
(127,81,1)
(165,44,1)
(143,176,1)
(87,8,1)
(167,175,1)
(129,65,1)
(159,105,1)
(113,72,1)
(76,78,1)
(74,58,1)
(100,52,1)
(3,121,1)
(12,53,1)
(124,126,1)
(125,99,1)
(166,159,1)
(115,69,1)
(73,72,1)
(132,2,1)
(67,95,1)
(116,159,1)
(11,42,1)
(129,141,1)
(35,150,1)
(14,125,1)
(147,163,1)
(24,147,1)
(92,43,1)
(121,15,1)
(120,145,1)
(19,79,1)
(37,15,1)
(58,162,1)
(165,137,1)
(18,37,1)
(64,135,1)
(171,127,1)
(37,66,1)
(0,85,1)
(172,135,1)
(154,171,1)
(85,39,1)
(151,100,1)
(165,40,1)
(115,30,1)
(39,51,1)
(138,156,1)
(116,64,1)
(130,93,1)
(120,126,1)
(155,140,1)
(129,15,1)
(8,34,1)
(169,54,1)
(168,87,1)
(87,72,1)
(130,47,1)
(41,125,1)
(116,122,1)
(68,138,1)
(125,167,1)
(31,60,1)
(108,129,1)
(77,72,1)
(176,38,1)
(173,106,1)
(165,5,1)
(163,48,1)
(81,32,1)
(40,72,1)
(126,4,1)
(168,20,1)
(25,99,1)
(94,59,1)
(48,143,1)
(116,10,1)
(22,7,1)
(45,151,1)
(84,96,1)
(42,106,1)
(17,23,1)
(158,13,1)
(62,131,1)
(38,0,1)
(55,140,1)
(52,16,1)
(173,154,1)
(145,73,1)
(51,77,1)
(96,41,1)
(109,18,1)
(35,99,1)
(58,47,1)
(76,27,1)
(173,47,1)
(133,99,1)
(10,86,1)
(54,35,1)
(53,57,1)
(41,9,1)
(82,36,1)
(121,82,1)
(91,116,1)
(38,61,1)
(59,71,1)
(120,55,1)
(5,133,1)
(133,114,1)
(19,47,1)
(78,27,1)
(56,4,1)
(116,156,1)
(69,99,1)
(119,177,1)
(36,140,1)
(174,89,1)
(103,164,1)
(101,168,1)
(40,102,1)
(71,40,1)
(46,64,1)
(165,109,1)
(17,111,1)
(60,29,1)
(27,140,1)
(66,155,1)
(116,100,1)
(175,173,1)
(9,99,1)
(1,56,1)
(29,135,1)
(160,83,1)
(57,107,1)
(7,15,1)
(49,11,1)
(73,140,1)
(113,49,1)
(86,176,1)
(55,119,1)
(95,109,1)
(27,19,1)
(131,173,1)
(111,23,1)
(112,103,1)
(105,68,1)
(75,5,1)
(41,25,1)
(148,32,1)
(4,165,1)
(86,76,1)
(76,15,1)
(55,47,1)
(89,125,1)
(36,130,1)
(164,84,1)
(135,74,1)
(47,92,1)
(56,120,1)
(13,148,1)
(93,12,1)
(64,45,1)
(116,137,1)
(142,21,1)
(155,112,1)
(41,9,2)
(2,173,2)
(76,27,2)
(25,125,2)
(95,173,2)
(159,72,2)
(76,15,2)
(165,44,2)
(9,99,2)
(87,72,2)
(129,65,2)
(133,99,2)
(116,156,2)
(108,173,2)
(116,172,2)
(40,173,2)
(126,173,2)
(109,173,2)
(4,173,2)
(131,173,2)
(121,36,2)
(76,173,2)
(165,54,2)
(129,15,2)
(26,173,2)
(41,173,2)
(32,173,2)
(10,173,2)
(18,176,2)
(135,74,2)
(35,99,2)
(0,85,2)
(65,140,2)
(79,173,2)
(167,173,2)
(138,173,2)
(130,47,2)
(165,96,2)
(15,113,2)
(136,168,2)
(5,173,2)
(64,173,2)
(9,125,2)
(66,173,2)
(19,173,2)
(44,108,2)
(150,173,2)
(46,173,2)
(125,99,2)
(55,140,2)
(148,32,2)
(74,58,2)
(156,173,2)
(156,3,2)
(41,25,2)
(37,173,2)
(177,126,2)
(124,126,2)
(69,99,2)
(127,32,2)
(121,173,2)
(122,173,2)
(10,86,2)
(129,173,2)
(41,125,2)
(106,115,2)
(53,173,2)
(4,165,2)
(19,47,2)
(86,76,2)
(96,173,2)
(54,173,2)
(116,173,2)
(58,47,2)
(108,24,2)
(67,173,2)
(159,173,2)
(27,19,2)
(39,77,2)
(86,173,2)
(36,130,2)
(56,4,2)
(154,32,2)
(174,125,2)
(27,140,2)
(162,173,2)
(37,155,2)
(55,47,2)
(116,137,2)
(132,173,2)
(82,173,2)
(52,173,2)
(165,40,2)
(25,99,2)
(62,173,2)
(89,125,2)
(164,173,2)
(13,32,2)
(5,133,2)
(3,121,2)
(109,18,2)
(58,173,2)
(14,125,2)
(73,140,2)
(64,135,2)
(112,173,2)
(172,135,2)
(57,173,2)
(78,173,2)
(36,173,2)
(170,173,2)
(71,173,2)
(108,129,2)
(73,72,2)
(168,87,2)
(85,39,2)
(165,109,2)
(100,135,2)
(151,173,2)
(102,173,2)
(37,15,2)
(93,173,2)
(149,173,2)
(100,173,2)
(158,32,2)
(17,23,2)
(116,159,2)
(23,173,2)
(173,32,2)
(127,47,2)
(114,173,2)
(35,173,2)
(169,173,2)
(96,41,2)
(58,17,2)
(165,137,2)
(130,173,2)
(84,173,2)
(81,32,2)
(40,72,2)
(27,173,2)
(44,173,2)
(133,173,2)
(116,10,2)
(173,106,2)
(94,173,2)
(16,173,2)
(56,91,2)
(176,38,2)
(86,176,2)
(45,173,2)
(18,173,2)
(17,173,2)
(113,72,2)
(73,47,2)
(147,0,2)
(3,24,2)
(1,56,2)
(155,140,2)
(110,173,2)
(60,173,2)
(115,69,2)
(54,35,2)
(75,173,2)
(166,173,2)
(3,173,2)
(137,136,2)
(74,173,2)
(171,32,2)
(105,173,2)
(107,173,2)
(111,173,2)
(173,47,2)
(38,0,2)
(116,64,2)
(65,173,2)
(36,140,2)
(165,5,2)
(145,32,2)
(135,173,2)
(155,173,2)
(91,173,2)
(77,72,2)
(141,173,2)
(59,173,2)
(121,15,2)
(12,173,2)
(103,173,2)
(23,99,2)
(55,72,2)
(73,32,2)
(18,37,2)
(119,126,2)
(31,173,2)
(116,100,2)
(165,173,2)
(91,116,2)
(125,173,2)
(175,173,2)
(24,147,2)
(55,126,2)
(68,173,2)
(172,173,2)
(29,173,2)
-----------------------------------
(0,*txring = &(jme->txring[0])
(1,RET)
(2,ret)
(3,txbi + ((idx + i + 2)
(4,ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data)
(5,virt_to_page(skb->data)
(6,txdesc)
(7,ret)
(8,dev)
(9,skb->len)
(10,ctxdesc = txdesc + ((idx + i + 2)
(11,jme)
(12,i)
(13,idx)
(14,skb)
(15,mask = jme->tx_ring_mask)
(16,ctxbi)
(17,skb_shinfo(skb)
(18,txdesc + ((idx + 1)
(19,i + 2)
(20,features)
(21,txdesc)
(22,0)
(23,skb_shinfo(skb)
(24,*txbi = txring->bufinf)
(25,skb_headlen(skb)
(26,hidma)
(27,idx + i + 2)
(28,txring)
(29,ctxdesc)
(30,nr_frags)
(31,idx)
(32,ret)
(33,ret)
(34,jme)
(35,skb->data)
(36,idx + i + 2)
(37,(idx + 1)
(38,txring->desc)
(39,jme->txring[0])
(40,jme->pdev)
(41,skb_is_nonlinear(skb)
(42,mask)
(43,i)
(44,ctxbi = txbi + ((idx + 1)
(45,page_offset)
(46,frag)
(47,i = 0)
(48,txring)
(49,tx_ring_mask)
(50,if (ret)
(51,0)
(52,frag)
(53,idx)
(54,offset_in_page(skb->data)
(55,jme_drop_tx_map(jme, idx, i)
(56,return ret;)
(57,txbi)
(58,skb_shinfo(skb)
(59,ctxbi)
(60,txdesc)
(61,desc)
(62,skb)
(63,)
(64,frag->page_offset)
(65,idx + 1)
(66,mask)
(67,txbi)
(68,jme)
(69,skb_shinfo(skb)
(70,hidma)
(71,ctxdesc)
(72,struct jme_adapter *jme)
(73,jme_drop_tx_map(jme, idx, i)
(74,&skb_shinfo(skb)
(75,skb)
(76,(idx + i + 2)
(77,jme->txring)
(78,mask)
(79,2)
(80,nr_frags)
(81,i)
(82,mask)
(83,txring)
(84,ctxdesc)
(85,&(jme->txring[0])
(86,txdesc + ((idx + i + 2)
(87,jme->dev)
(88,)
(89,skb)
(90,)
(91,ret = jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,\n\\n\\t\\t\\t\\tskb_frag_page(frag)
(92,0)
(93,2)
(94,skb)
(95,ctxbi)
(96,len = skb_is_nonlinear(skb)
(97,ret = 0)
(98,nr_frags)
(99,struct sk_buff *skb)
(100,skb_frag_page(frag)
(101,NETIF_F_HIGHDMA)
(102,pdev)
(103,idx)
(104,frag)
(105,pdev)
(106,nr_frags = skb_shinfo(skb)
(107,ctxbi)
(108,txbi + ((idx + 1)
(109,ctxdesc = txdesc + ((idx + 1)
(110,idx)
(111,frags)
(112,1)
(113,jme->tx_ring_mask)
(114,data)
(115,skb_shinfo(skb)
(116,jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi,\n\\n\\t\\t\\t\\tskb_frag_page(frag)
(117,txring)
(118,if (ret)
(119,i)
(120,ret)
(121,(idx + i + 2)
(122,hidma)
(123,out:)
(124,jme)
(125,skb_is_nonlinear(skb)
(126,ret)
(127,++i)
(128,len)
(129,(idx + 1)
(130,i + 2)
(131,frag)
(132,jme)
(133,skb->data)
(134,skb)
(135,frag = &skb_shinfo(skb)
(136,jme->dev->features & NETIF_F_HIGHDMA)
(137,hidma = jme->dev->features & NETIF_F_HIGHDMA)
(138,ret)
(139,i)
(140,int idx)
(141,mask)
(142,txring)
(143,txbi)
(144,ctxdesc)
(145,goto out;)
(146,txbi)
(147,txring->bufinf)
(148,jme)
(149,i)
(150,data)
(151,frag)
(152,mask)
(153,for (i = 0 ; i < nr_frags ; ++i)
(154,nr_frags)
(155,idx + 1)
(156,ctxbi = txbi + ((idx + i + 2)
(157,ctxbi)
(158,i)
(159,jme->pdev)
(160,jme)
(161,hidma)
(162,i)
(163,bufinf)
(164,txdesc)
(165,jme_fill_tx_map(jme->pdev, ctxdesc, ctxbi, virt_to_page(skb->data)
(166,ctxdesc)
(167,skb)
(168,jme->dev->features)
(169,len)
(170,1)
(171,i)
(172,skb_frag_size(frag)
(173,i < nr_frags)
(174,len)
(175,len)
(176,*txdesc = txring->desc)
(177,idx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^