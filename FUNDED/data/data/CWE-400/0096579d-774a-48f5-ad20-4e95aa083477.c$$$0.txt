-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticTrue)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(staticTrue)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(staticTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
staticTrue
staticTrue
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(staticTrue)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticTrue
staticTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(3,46,0)
(19,29,0)
(1,7,0)
(43,12,0)
(5,15,0)
(20,7,0)
(13,10,0)
(7,20,0)
(9,0,0)
(37,29,0)
(30,17,0)
(12,6,0)
(48,19,0)
(7,1,0)
(18,39,0)
(28,39,0)
(22,13,0)
(26,9,0)
(19,0,0)
(19,20,0)
(46,19,0)
(16,2,0)
(32,10,0)
(7,15,0)
(34,13,0)
(11,49,0)
(27,10,0)
(35,42,0)
(20,19,0)
(24,14,0)
(36,12,0)
(44,39,0)
(31,0,0)
(19,46,0)
(15,10,0)
(0,47,0)
(9,29,0)
(45,17,0)
(14,10,0)
(17,15,0)
(41,11,0)
(49,11,0)
(14,15,0)
(33,27,0)
(49,25,0)
(9,42,0)
(21,16,0)
(13,15,0)
(8,29,0)
(27,15,0)
(29,39,0)
(42,9,0)
(38,0,0)
(15,7,0)
(48,5,1)
(42,35,1)
(29,37,1)
(0,31,1)
(7,20,1)
(27,33,1)
(27,15,1)
(23,4,1)
(37,8,1)
(4,40,1)
(40,29,1)
(49,11,1)
(13,22,1)
(46,3,1)
(33,14,1)
(13,15,1)
(35,26,1)
(9,0,1)
(23,16,1)
(30,45,1)
(34,49,1)
(45,15,1)
(19,29,1)
(23,27,1)
(22,34,1)
(20,19,1)
(26,4,1)
(11,41,1)
(9,42,1)
(19,0,1)
(14,24,1)
(4,0,1)
(9,29,1)
(19,46,1)
(14,15,1)
(31,38,1)
(7,1,1)
(3,48,1)
(41,17,1)
(38,40,1)
(15,7,1)
(5,9,1)
(21,9,1)
(17,15,1)
(34,17,1)
(17,30,1)
(16,21,1)
(24,13,1)
(19,9,2)
(46,9,2)
(13,15,2)
(19,0,2)
(7,9,2)
(7,1,2)
(14,9,2)
(41,17,2)
(17,9,2)
(27,9,2)
(48,9,2)
(19,29,2)
(9,4,2)
(14,15,2)
(3,9,2)
(33,9,2)
(34,9,2)
(0,40,2)
(15,9,2)
(11,17,2)
(22,9,2)
(15,7,2)
(20,19,2)
(31,40,2)
(27,15,2)
(24,9,2)
(26,4,2)
(7,20,2)
(13,9,2)
(35,4,2)
(16,9,2)
(20,9,2)
(5,9,2)
(30,9,2)
(21,9,2)
(17,15,2)
(45,9,2)
(49,17,2)
(9,42,2)
(42,4,2)
(9,29,2)
(38,40,2)
(19,46,2)
(9,0,2)
(49,11,2)
-----------------------------------
(0,data = 20)
(1,wchar_t *)
(2,)
(3,wchar_t)
(4,staticTrue)
(5,myString)
(6,)
(7,(wchar_t *)
(8,data)
(9,data > wcslen(HELLO_STRING)
(10,)
(11,-1)
(12,)
(13,wcscpy(myString, HELLO_STRING)
(14,printWLine(myString)
(15,myString = (wchar_t *)
(16,printLine("Input is less than the length of the source string")
(17,myString == NULL)
(18,data)
(19,data*sizeof(wchar_t)
(20,malloc(data*sizeof(wchar_t)
(21,"Input is less than the length of the source string")
(22,HELLO_STRING)
(23,RET)
(24,myString)
(25,)
(26,data)
(27,free(myString)
(28,if(staticTrue)
(29,data = 0)
(30,NULL)
(31,20)
(32,if (myString == NULL)
(33,myString)
(34,myString)
(35,HELLO_STRING)
(36,if (data > wcslen(HELLO_STRING)
(37,0)
(38,data)
(39,)
(40,staticTrue)
(41,1)
(42,wcslen(HELLO_STRING)
(43,myString)
(44,if(staticTrue)
(45,myString)
(46,sizeof(wchar_t)
(47,)
(48,data)
(49,exit(-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^