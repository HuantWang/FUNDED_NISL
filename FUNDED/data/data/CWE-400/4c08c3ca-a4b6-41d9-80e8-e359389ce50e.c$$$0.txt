-----label-----
0
-----code-----
static void goodG2B2()
{
    int64_t * data;
    data = NULL;
    if(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
57,58
57,59
59,60
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,46,47,48,52,55,56,58,60
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int64_t * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int64_t * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(20,11,0)
(23,13,0)
(11,20,0)
(5,13,0)
(22,7,0)
(10,8,0)
(0,6,0)
(8,7,0)
(13,5,0)
(12,20,0)
(5,9,0)
(0,9,0)
(14,12,0)
(18,7,0)
(21,6,0)
(20,12,0)
(11,13,0)
(16,5,0)
(13,11,0)
(6,0,0)
(17,7,0)
(13,23,0)
(19,20,0)
(6,5,0)
(3,6,0)
(4,8,0)
(1,9,0)
(14,19,1)
(1,5,1)
(19,16,1)
(6,5,1)
(3,1,1)
(4,10,1)
(24,0,1)
(24,15,1)
(6,21,1)
(13,11,1)
(13,23,1)
(21,3,1)
(15,8,1)
(8,4,1)
(0,6,1)
(12,14,1)
(11,20,1)
(2,24,1)
(16,15,1)
(5,13,1)
(20,12,1)
(6,15,2)
(11,15,2)
(13,23,2)
(11,20,2)
(13,15,2)
(5,15,2)
(6,5,2)
(21,15,2)
(20,15,2)
(13,11,2)
(19,15,2)
(1,15,2)
(14,15,2)
(0,6,2)
(12,15,2)
(3,15,2)
(16,15,2)
(20,12,2)
(5,13,2)
(0,15,2)
-----------------------------------
(0,printLongLongLine(data[0])
(1,L)
(2,RET)
(3,data)
(4,NULL)
(5,data = (int64_t *)
(6,data[0])
(7,)
(8,data = NULL)
(9,)
(10,data)
(11,ALLOCA(100*sizeof(int64_t)
(12,sizeof(int64_t)
(13,(int64_t *)
(14,int64_t)
(15,1)
(16,data)
(17,data)
(18,if(1)
(19,100)
(20,100*sizeof(int64_t)
(21,0)
(22,if(1)
(23,int64_t *)
(24,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^