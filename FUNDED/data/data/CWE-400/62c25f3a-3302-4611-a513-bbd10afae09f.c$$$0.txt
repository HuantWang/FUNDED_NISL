-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_05_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    if(staticTrue)
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
29,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
36,38
36,39
37,38
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,30,35,38,39,40,44,46,51,53
-----computeFrom-----
14,15
14,16
20,21
20,22
33,34
33,35
42,43
42,44
-----guardedBy-----
44,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_05_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(staticTrue)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_05_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_05_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    if(staticTrue)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
if(staticTrue)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
staticTrue
staticTrue
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
-----joern-----
(12,15,0)
(5,21,0)
(13,9,0)
(6,3,0)
(24,19,0)
(17,9,0)
(19,15,0)
(1,18,0)
(22,13,0)
(14,8,0)
(20,13,0)
(11,22,0)
(15,19,0)
(10,8,0)
(16,18,0)
(21,13,0)
(8,18,0)
(13,22,0)
(6,13,0)
(4,21,0)
(23,15,0)
(19,18,0)
(2,22,0)
(25,6,0)
(4,13,1)
(21,13,1)
(7,21,1)
(20,0,1)
(0,19,1)
(15,12,1)
(22,11,1)
(21,5,1)
(24,8,1)
(19,15,1)
(23,24,1)
(13,22,1)
(11,2,1)
(2,20,1)
(6,25,1)
(7,0,1)
(14,10,1)
(12,23,1)
(7,6,1)
(6,13,1)
(8,14,1)
(25,21,1)
(5,4,1)
(11,0,2)
(19,15,2)
(5,0,2)
(25,21,2)
(6,13,2)
(20,0,2)
(22,0,2)
(13,22,2)
(2,0,2)
(13,0,2)
(4,0,2)
(21,13,2)
(21,0,2)
(6,21,2)
-----------------------------------
(0,staticTrue)
(1,if(staticTrue)
(2,"BadSink_fopen.txt")
(3,)
(4,data)
(5,NULL)
(6,fclose(data)
(7,RET)
(8,data = NULL)
(9,)
(10,data)
(11,"w+")
(12,"w+")
(13,data = fopen("BadSink_fopen.txt", "w+")
(14,NULL)
(15,fopen("BadSource_fopen.txt", "w+")
(16,data)
(17,if (data != NULL)
(18,)
(19,data = fopen("BadSource_fopen.txt", "w+")
(20,data)
(21,data != NULL)
(22,fopen("BadSink_fopen.txt", "w+")
(23,"BadSource_fopen.txt")
(24,data)
(25,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^