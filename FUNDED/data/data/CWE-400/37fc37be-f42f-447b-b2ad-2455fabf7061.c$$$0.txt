-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink(int countArray[])
{
    int count = countArray[2];
    /* FIX: Validate count before using it as a parameter in the sleep function */
    if (count > 0 && count <= 2000)
    {
        SLEEP(count);
        printLine("Sleep time OK");
    }
    else
    {
        printLine("Sleep time too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
17,19
18,19
21,22
21,23
21,24
22,23
22,24
23,24
23,25
24,25
27,28
27,29
28,29
31,32
31,33
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
43,44
44,45
45,46
45,47
46,47
-----nextToken-----
2,4,6,8,9,13,15,19,20,25,26,29,30,35,37,41,42,47,48
-----computeFrom-----
22,23
22,24
23,24
23,25
27,28
27,29
-----guardedBy-----
29,37
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink(int countArray[]){    int count = countArray[2];    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink(int countArray[])
CWE400_Resource_Exhaustion__rand_sleep_66b_goodB2GSink
int countArray[]
int
countArray[]
countArray
[]
{    int count = countArray[2];    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
int count = countArray[2];
int count = countArray[2];
int
count = countArray[2]
count
= countArray[2]
countArray[2]
countArray
countArray
2
if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{        SLEEP(count);        printLine("Sleep time OK");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{        printLine("Sleep time too long");    }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(12,14,0)
(20,24,0)
(22,5,0)
(6,5,0)
(14,18,0)
(5,16,0)
(10,16,0)
(8,2,0)
(10,13,0)
(0,14,0)
(21,13,0)
(4,20,0)
(15,19,0)
(13,2,0)
(17,24,0)
(9,10,0)
(16,5,0)
(23,2,0)
(5,13,0)
(20,13,0)
(19,1,0)
(11,10,0)
(13,14,0)
(14,13,0)
(3,17,0)
(16,10,0)
(9,11,1)
(0,21,1)
(10,13,1)
(4,16,1)
(15,16,1)
(3,20,1)
(7,17,1)
(16,10,1)
(10,9,1)
(16,5,1)
(14,18,1)
(6,10,1)
(7,19,1)
(14,12,1)
(19,15,1)
(22,6,1)
(12,0,1)
(5,13,1)
(17,3,1)
(11,13,1)
(5,22,1)
(20,4,1)
(20,13,1)
(13,14,1)
(22,10,2)
(15,16,2)
(5,13,2)
(14,18,2)
(20,13,2)
(17,16,2)
(19,16,2)
(3,16,2)
(5,10,2)
(10,13,2)
(13,14,2)
(16,5,2)
(4,16,2)
(20,16,2)
(16,10,2)
(6,10,2)
-----------------------------------
(0,countArray)
(1,)
(2,)
(3,"Sleep time OK")
(4,count)
(5,count <= 2000)
(6,count)
(7,RET)
(8,count)
(9,0)
(10,count > 0)
(11,count)
(12,2)
(13,count = countArray[2])
(14,countArray[2])
(15,"Sleep time too long")
(16,count > 0 && count <= 2000)
(17,printLine("Sleep time OK")
(18,int countArray[])
(19,printLine("Sleep time too long")
(20,SLEEP(count)
(21,count)
(22,2000)
(23,if (count > 0 && count <= 2000)
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^