-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_64b_badSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(6,4,0)
(13,36,0)
(47,22,0)
(11,34,0)
(48,26,0)
(19,3,0)
(45,6,0)
(46,12,0)
(23,6,0)
(35,30,0)
(11,25,0)
(17,29,0)
(2,3,0)
(34,5,0)
(29,26,0)
(4,29,0)
(22,47,0)
(15,38,0)
(25,42,0)
(40,8,0)
(44,33,0)
(1,3,0)
(25,12,0)
(34,11,0)
(29,4,0)
(36,27,0)
(43,30,0)
(0,23,0)
(12,3,0)
(5,34,0)
(7,9,0)
(20,19,0)
(38,12,0)
(37,33,0)
(26,47,0)
(9,3,0)
(16,9,0)
(26,33,0)
(43,14,0)
(9,12,0)
(32,34,0)
(47,21,0)
(31,38,0)
(4,33,0)
(12,25,0)
(10,5,0)
(30,43,0)
(2,12,0)
(25,11,0)
(6,23,0)
(34,4,0)
(42,25,0)
(18,2,0)
(24,8,0)
(8,33,0)
(28,4,0)
(39,47,0)
(19,12,0)
(47,26,0)
(25,11,1)
(12,25,1)
(29,26,1)
(6,23,1)
(23,0,1)
(45,4,1)
(34,4,1)
(41,36,1)
(41,19,1)
(32,46,1)
(47,21,1)
(0,45,1)
(2,12,1)
(15,31,1)
(9,12,1)
(38,15,1)
(11,34,1)
(29,17,1)
(43,30,1)
(38,12,1)
(30,35,1)
(2,18,1)
(13,6,1)
(36,13,1)
(19,20,1)
(6,4,1)
(34,5,1)
(25,42,1)
(20,2,1)
(18,9,1)
(7,16,1)
(5,10,1)
(4,29,1)
(39,48,1)
(26,47,1)
(31,12,1)
(46,6,1)
(19,12,1)
(10,32,1)
(47,39,1)
(28,26,1)
(9,7,1)
(16,38,1)
(47,22,1)
(35,38,1)
(17,28,1)
(16,43,1)
(20,6,2)
(34,6,2)
(15,6,2)
(32,6,2)
(19,12,2)
(16,6,2)
(25,11,2)
(11,6,2)
(43,30,2)
(11,34,2)
(7,6,2)
(38,12,2)
(13,6,2)
(9,6,2)
(47,21,2)
(10,6,2)
(38,6,2)
(4,29,2)
(12,6,2)
(29,26,2)
(6,23,2)
(9,12,2)
(31,6,2)
(47,22,2)
(35,38,2)
(36,6,2)
(43,38,2)
(18,6,2)
(5,6,2)
(34,5,2)
(25,6,2)
(25,42,2)
(19,6,2)
(2,12,2)
(46,6,2)
(30,38,2)
(12,25,2)
(26,47,2)
(2,6,2)
(34,4,2)
(6,4,2)
-----------------------------------
(0,HELLO_STRING)
(1,if (myString == NULL)
(2,printLine(myString)
(3,)
(4,data = (*dataPtr)
(5,sizeof(char)
(6,data > strlen(HELLO_STRING)
(7,HELLO_STRING)
(8,)
(9,strcpy(myString, HELLO_STRING)
(10,char)
(11,malloc(data*sizeof(char)
(12,myString = (char *)
(13,"Input is less than the length of the source string")
(14,)
(15,NULL)
(16,myString)
(17,dataPtr)
(18,myString)
(19,free(myString)
(20,myString)
(21,void * dataVoidPtr)
(22,size_t *)
(23,strlen(HELLO_STRING)
(24,myString)
(25,(char *)
(26,* dataPtr = (size_t *)
(27,)
(28,data)
(29,*dataPtr)
(30,-1)
(31,myString)
(32,data)
(33,)
(34,data*sizeof(char)
(35,1)
(36,printLine("Input is less than the length of the source string")
(37,dataPtr)
(38,myString == NULL)
(39,dataVoidPtr)
(40,if (data > strlen(HELLO_STRING)
(41,RET)
(42,char *)
(43,exit(-1)
(44,data)
(45,data)
(46,myString)
(47,(size_t *)
(48,dataPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^