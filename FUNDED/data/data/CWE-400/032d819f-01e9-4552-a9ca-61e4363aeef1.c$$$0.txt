-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_09_bad()
{
    if(GLOBAL_CONST_TRUE)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
9,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,8,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_09_bad(){    if(GLOBAL_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_09_bad()
CWE401_Memory_Leak__malloc_realloc_int_09_bad
{    if(GLOBAL_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(GLOBAL_CONST_TRUE)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(35,23,0)
(0,1,0)
(27,6,0)
(21,29,0)
(58,30,0)
(8,23,0)
(19,31,0)
(28,37,0)
(3,8,0)
(41,1,0)
(30,35,0)
(21,13,0)
(42,6,0)
(53,29,0)
(32,16,0)
(9,14,0)
(4,18,0)
(18,48,0)
(12,31,0)
(26,0,0)
(10,56,0)
(54,23,0)
(29,21,0)
(7,3,0)
(30,54,0)
(22,23,0)
(6,27,0)
(16,54,0)
(52,56,0)
(10,1,0)
(56,10,0)
(51,24,0)
(55,3,0)
(49,14,0)
(48,46,0)
(5,56,0)
(3,54,0)
(13,54,0)
(20,41,0)
(36,27,0)
(30,8,0)
(51,37,0)
(56,41,0)
(57,23,0)
(46,48,0)
(34,54,0)
(48,18,0)
(40,30,0)
(17,4,0)
(4,54,0)
(13,21,0)
(50,13,0)
(13,27,0)
(56,6,0)
(35,30,0)
(54,4,0)
(25,23,0)
(2,46,0)
(4,17,0)
(0,6,0)
(56,8,0)
(45,8,0)
(27,13,0)
(44,48,0)
(14,6,0)
(43,21,0)
(11,39,0)
(23,47,0)
(31,6,0)
(6,23,0)
(31,41,0)
(27,36,0)
(37,51,0)
(18,4,0)
(15,16,0)
(45,3,1)
(55,51,1)
(26,10,1)
(55,16,1)
(54,4,1)
(31,19,1)
(52,41,1)
(4,17,1)
(16,15,1)
(13,21,1)
(42,35,1)
(0,6,1)
(56,41,1)
(2,44,1)
(9,49,1)
(21,29,1)
(13,54,1)
(38,14,1)
(28,16,1)
(56,8,1)
(3,54,1)
(5,52,1)
(15,32,1)
(51,37,1)
(53,43,1)
(12,14,1)
(32,54,1)
(48,46,1)
(29,53,1)
(27,13,1)
(56,6,1)
(40,58,1)
(16,54,1)
(14,6,1)
(50,42,1)
(46,2,1)
(20,31,1)
(30,40,1)
(8,45,1)
(4,18,1)
(18,48,1)
(30,54,1)
(35,30,1)
(56,5,1)
(34,33,1)
(49,6,1)
(10,56,1)
(19,12,1)
(14,9,1)
(3,7,1)
(43,50,1)
(38,0,1)
(31,6,1)
(41,20,1)
(38,33,1)
(0,26,1)
(37,28,1)
(58,8,1)
(27,36,1)
(7,55,1)
(44,34,1)
(30,8,1)
(6,27,1)
(16,33,2)
(18,33,2)
(6,27,2)
(0,14,2)
(30,8,2)
(43,33,2)
(21,33,2)
(2,33,2)
(30,54,2)
(44,33,2)
(56,8,2)
(16,54,2)
(3,33,2)
(35,33,2)
(56,41,2)
(27,33,2)
(55,33,2)
(13,33,2)
(51,37,2)
(31,6,2)
(46,33,2)
(50,33,2)
(6,33,2)
(48,46,2)
(4,33,2)
(32,33,2)
(10,56,2)
(13,21,2)
(26,14,2)
(15,33,2)
(14,33,2)
(19,14,2)
(31,14,2)
(51,16,2)
(58,33,2)
(13,54,2)
(4,17,2)
(10,14,2)
(0,6,2)
(54,33,2)
(28,16,2)
(35,30,2)
(20,14,2)
(56,6,2)
(3,54,2)
(27,36,2)
(18,48,2)
(29,33,2)
(27,13,2)
(52,14,2)
(49,33,2)
(53,33,2)
(34,33,2)
(37,16,2)
(54,4,2)
(7,33,2)
(21,29,2)
(8,33,2)
(12,14,2)
(56,14,2)
(5,14,2)
(48,33,2)
(42,33,2)
(14,6,2)
(41,14,2)
(45,33,2)
(9,33,2)
(4,18,2)
(40,33,2)
(30,33,2)
-----------------------------------
(0,free(data)
(1,)
(2,int)
(3,data[0])
(4,(int *)
(5,0)
(6,data = (int *)
(7,0)
(8,data[0] = 5)
(9,NULL)
(10,printIntLine(data[0])
(11,if(GLOBAL_CONST_TRUE)
(12,data)
(13,realloc(data, (130000)
(14,data != NULL)
(15,NULL)
(16,data == NULL)
(17,int *)
(18,malloc(100*sizeof(int)
(19,0)
(20,10)
(21,(130000)
(22,data)
(23,)
(24,)
(25,if (data != NULL)
(26,data)
(27,(int *)
(28,1)
(29,sizeof(int)
(30,data[0])
(31,data[0])
(32,data)
(33,GLOBAL_CONST_TRUE)
(34,data)
(35,printIntLine(data[0])
(36,int *)
(37,-1)
(38,RET)
(39,)
(40,0)
(41,data[0] = 10)
(42,data)
(43,130000)
(44,100)
(45,5)
(46,sizeof(int)
(47,)
(48,100*sizeof(int)
(49,data)
(50,data)
(51,exit(-1)
(52,data)
(53,int)
(54,* data = (int *)
(55,data)
(56,data[0])
(57,if (data == NULL)
(58,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^