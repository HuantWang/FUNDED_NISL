-----label-----
0
-----code-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
{
	int res;
	int status;
	char tech[256];
	char *location;
	const char *macrocontext, *macroexten;
	enum ast_device_state newstate;

	/* on entry here, we know that tmp->chan == NULL */
	if (tmp->member->paused) {
		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||
		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {
		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",
				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	if (!tmp->member->ringinuse) {
		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {
			newstate = ast_device_state(tmp->member->interface);
			if (newstate != tmp->member->status) {
				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",
					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
				ast_devstate_changed_literal(newstate, tmp->member->interface);
			}
		}
		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {
			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
			if (ast_channel_cdr(qe->chan)) {
				ast_cdr_busy(ast_channel_cdr(qe->chan));
			}
			tmp->stillgoing = 0;
			(*busies)++;
			return 0;
		}
	}

	if (use_weight && compare_weight(qe->parent,tmp->member)) {
		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;
		(*busies)++;
		return 0;
	}

	ast_copy_string(tech, tmp->interface, sizeof(tech));
	if ((location = strchr(tech, '/'))) {
		*location++ = '\0';
	} else {
		location = "";
	}

	/* Request the peer */
	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
	if (!tmp->chan) {			/* If we can't, just go on to the next call */
		if (ast_channel_cdr(qe->chan)) {
			ast_cdr_busy(ast_channel_cdr(qe->chan));
		}
		tmp->stillgoing = 0;

		ao2_lock(qe->parent);
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		qe->parent->rrpos++;
		qe->linpos++;
		ao2_unlock(qe->parent);

		(*busies)++;
		return 0;
	}

	ast_channel_lock_both(tmp->chan, qe->chan);

	if (qe->cancel_answered_elsewhere) {
		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
	}
	ast_channel_appl_set(tmp->chan, "AppQueue");
	ast_channel_data_set(tmp->chan, "(Outgoing Line)");
	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));

	/* If the new channel has no callerid, try to guess what it should be */
	if (!ast_channel_caller(tmp->chan)->id.number.valid) {
		if (ast_channel_connected(qe->chan)->id.number.valid) {
			struct ast_party_caller caller;

			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
			caller.id = ast_channel_connected(qe->chan)->id;
			caller.ani = ast_channel_connected(qe->chan)->ani;
			ast_channel_set_caller_event(tmp->chan, &caller, NULL);
		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {
			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {
			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 
		}
		tmp->dial_callerid_absent = 1;
	}

	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));

	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;

	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));

	/* Inherit specially named variables from parent channel */
	ast_channel_inherit_variables(qe->chan, tmp->chan);
	ast_channel_datastore_inherit(qe->chan, tmp->chan);

	/* Presense of ADSI CPE on outgoing channel follows ours */
	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));

	/* Inherit context and extension */
	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
	if (!ast_strlen_zero(macroexten)) {
		ast_channel_exten_set(tmp->chan, macroexten);
	} else {
		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
	}
	if (ast_cdr_isset_unanswered()) {
		/* they want to see the unanswered dial attempts! */
		/* set up the CDR fields on all the CDRs to give sensical information */
		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
	}

	ast_channel_unlock(tmp->chan);
	ast_channel_unlock(qe->chan);

	/* Place the call, but don't wait on the answer */
	if ((res = ast_call(tmp->chan, location, 0))) {
		/* Again, keep going even if there's an error */
		ast_verb(3, "Couldn't call %s\n", tmp->interface);
		do_hang(tmp);
		(*busies)++;
		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
		return 0;
	} else if (qe->parent->eventwhencalled) {
		char vars[2048];

		ast_channel_lock_both(tmp->chan, qe->chan);

		/*** DOCUMENTATION
		<managerEventInstance>
			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>
			<syntax>
				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />
				<parameter name="AgentCalled">
					<para>The agent's technology or location.</para>
				</parameter>
				<parameter name="AgentName">
					<para>The name of the agent.</para>
				</parameter>
				<parameter name="Variable" required="no" multiple="yes">
					<para>Optional channel variables from the ChannelCalling channel</para>
				</parameter>
			</syntax>
			<see-also>
				<ref type="managerEvent">AgentRingNoAnswer</ref>
				<ref type="managerEvent">AgentComplete</ref>
				<ref type="managerEvent">AgentConnect</ref>
			</see-also>
		</managerEventInstance>
		***/
		manager_event(EVENT_FLAG_AGENT, "AgentCalled",
			"Queue: %s\r\n"
			"AgentCalled: %s\r\n"
			"AgentName: %s\r\n"
			"ChannelCalling: %s\r\n"
			"DestinationChannel: %s\r\n"
			"CallerIDNum: %s\r\n"
			"CallerIDName: %s\r\n"
			"ConnectedLineNum: %s\r\n"
			"ConnectedLineName: %s\r\n"
			"Context: %s\r\n"
			"Extension: %s\r\n"
			"Priority: %d\r\n"
			"Uniqueid: %s\r\n"
			"%s",
			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),
			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),
			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),
			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),
			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");

		ast_channel_unlock(tmp->chan);
		ast_channel_unlock(qe->chan);

		ast_verb(3, "Called %s\n", tmp->interface);
	}

	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
43,45
46,47
47,48
47,49
47,50
49,50
49,51
52,53
52,54
55,56
56,57
56,58
57,58
59,60
61,62
61,63
62,63
62,64
63,64
63,65
64,65
68,69
68,70
68,71
68,72
68,73
69,70
70,71
70,72
70,73
70,74
71,72
75,76
75,77
76,77
79,80
79,81
80,81
80,82
81,82
83,84
83,85
84,85
87,88
88,89
89,90
89,91
90,91
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
101,103
102,103
106,107
107,108
108,109
109,110
110,111
112,113
114,115
114,116
115,116
115,117
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
123,124
123,125
124,125
124,126
125,126
129,130
130,131
130,132
131,132
131,133
132,133
132,134
133,134
135,136
137,138
137,139
138,139
141,142
141,143
142,143
142,144
143,144
147,148
148,149
148,150
149,150
149,151
150,151
151,152
151,153
152,153
155,156
155,157
156,157
156,158
157,158
161,162
162,163
162,164
163,164
163,165
164,165
164,166
165,166
167,168
169,170
169,171
170,171
173,174
173,175
174,175
174,176
175,176
179,180
179,181
179,182
179,183
179,184
180,181
181,182
181,183
181,184
181,185
181,186
182,183
186,187
187,188
187,189
187,190
188,189
188,190
189,190
192,193
192,194
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
204,205
204,206
205,206
208,209
208,210
209,210
209,211
210,211
212,213
212,214
213,214
216,217
217,218
218,219
218,220
219,220
221,222
221,223
222,223
224,225
224,226
225,226
228,229
229,230
229,231
230,231
230,232
231,232
235,236
236,237
237,238
238,239
239,240
241,242
243,244
243,245
244,245
245,246
245,247
246,247
246,248
247,248
251,252
251,253
252,253
252,254
253,254
253,255
254,255
256,257
257,258
257,259
258,259
258,260
259,260
259,261
260,261
264,265
266,267
266,268
267,268
268,269
268,270
269,270
271,272
271,273
272,273
274,275
274,276
275,276
275,277
276,277
280,281
280,282
281,282
281,283
282,283
284,285
284,286
285,286
285,287
286,287
290,291
290,292
291,292
292,293
292,294
292,295
292,296
292,297
292,298
293,294
295,296
298,299
298,300
299,300
299,301
300,301
304,305
304,306
305,306
307,308
307,309
308,309
308,310
309,310
313,314
313,315
314,315
316,317
318,319
319,320
319,321
319,322
320,321
322,323
324,325
324,326
325,326
325,327
326,327
330,331
330,332
331,332
331,333
332,333
333,334
333,335
334,335
334,336
335,336
335,337
336,337
340,341
342,343
343,344
343,345
344,345
344,346
345,346
345,347
346,347
350,351
352,353
352,354
352,355
352,356
352,357
353,354
354,355
354,356
354,357
354,358
355,356
359,360
359,361
360,361
363,364
363,365
364,365
364,366
365,366
367,368
367,369
368,369
371,372
372,373
373,374
373,375
374,375
376,377
376,378
377,378
379,380
379,381
380,381
383,384
384,385
384,386
385,386
385,387
386,387
390,391
391,392
392,393
393,394
394,395
396,397
398,399
398,400
399,400
399,401
400,401
402,403
402,404
402,405
403,404
405,406
405,407
406,407
409,410
409,411
410,411
413,414
413,415
413,416
413,417
413,418
414,415
415,416
415,417
415,418
415,419
415,420
416,417
420,421
420,422
421,422
421,423
422,423
426,427
426,428
427,428
430,431
430,432
431,432
431,433
432,433
434,435
434,436
435,436
438,439
439,440
440,441
440,442
441,442
443,444
443,445
444,445
446,447
446,448
447,448
450,451
451,452
451,453
452,453
452,454
453,454
457,458
458,459
459,460
460,461
461,462
463,464
465,466
466,467
466,468
466,469
466,470
467,468
469,470
471,472
471,473
472,473
475,476
476,477
477,478
479,480
479,481
479,482
480,481
481,482
481,483
482,483
484,485
484,486
484,487
485,486
487,488
490,491
491,492
492,493
492,494
493,494
494,495
495,496
498,499
499,500
500,501
500,502
501,502
504,505
505,506
505,507
506,507
506,508
507,508
510,511
510,512
510,513
510,514
510,515
510,516
511,512
513,514
515,516
515,517
516,517
518,519
518,520
519,520
522,523
522,524
523,524
526,527
528,529
529,530
531,532
531,533
532,533
533,534
533,535
534,535
537,538
537,539
537,540
537,541
537,542
537,543
537,544
537,545
537,546
538,539
538,540
539,540
539,541
540,541
542,543
542,544
543,544
546,547
547,548
548,549
548,550
549,550
551,552
551,553
552,553
554,555
554,556
555,556
558,559
559,560
559,561
560,561
560,562
561,562
565,566
566,567
566,568
567,568
569,570
569,571
570,571
573,574
574,575
574,576
574,577
574,578
575,576
577,578
577,579
578,579
581,582
581,583
582,583
585,586
585,587
586,587
588,589
588,590
589,590
592,593
593,594
594,595
594,596
595,596
595,597
596,597
600,601
601,602
602,603
602,604
603,604
606,607
607,608
607,609
608,609
610,611
610,612
611,612
614,615
615,616
616,617
617,618
618,619
620,621
622,623
623,624
623,625
623,626
624,625
626,627
626,628
627,628
630,631
630,632
631,632
634,635
634,636
635,636
635,637
636,637
639,640
640,641
641,642
641,643
641,644
642,643
644,645
644,646
645,646
648,649
650,651
651,652
651,653
651,654
652,653
654,655
654,656
655,656
659,660
660,661
660,662
660,663
661,662
663,664
663,665
664,665
668,669
669,670
669,671
669,672
669,673
670,671
672,673
672,674
673,674
675,676
675,677
676,677
680,681
681,682
682,683
683,684
683,685
684,685
686,687
686,688
687,688
690,691
690,692
691,692
692,693
692,694
693,694
693,695
694,695
694,696
695,696
695,697
696,697
698,699
698,700
699,700
705,706
705,707
706,707
706,708
706,709
707,708
707,709
708,709
708,710
709,710
709,711
710,711
710,712
711,712
713,714
713,715
714,715
720,721
720,722
720,723
720,724
720,725
721,722
722,723
722,724
723,724
725,726
727,728
728,729
728,730
728,731
729,730
731,732
732,733
734,735
734,736
735,736
737,738
737,739
738,739
741,742
742,743
742,744
743,744
743,745
744,745
747,748
747,749
748,749
748,750
749,750
751,752
751,753
752,753
756,757
757,758
757,759
758,759
758,760
759,760
762,763
762,764
763,764
763,765
764,765
766,767
766,768
767,768
771,772
772,773
772,774
772,775
772,776
773,774
775,776
775,777
776,777
779,780
780,781
782,783
784,785
784,786
784,787
785,786
786,787
786,788
787,788
789,790
789,791
790,791
790,792
791,792
791,793
792,793
794,795
794,796
795,796
800,801
801,802
802,803
802,804
802,805
802,806
802,807
803,804
805,806
805,807
806,807
809,810
809,811
810,811
810,812
811,812
811,813
812,813
814,815
814,816
815,816
820,821
822,823
824,825
824,826
825,826
826,827
826,828
827,828
829,830
829,831
829,832
830,831
832,833
832,834
833,834
835,836
835,837
836,837
839,840
839,841
840,841
842,843
842,844
843,844
846,847
847,848
848,849
848,850
848,851
848,852
848,853
849,850
851,852
851,853
852,853
855,856
855,857
855,858
856,857
858,859
858,860
859,860
861,862
861,863
862,863
865,866
865,867
866,867
868,869
868,870
869,870
872,873
874,875
876,877
877,878
877,879
878,879
878,880
879,880
883,884
884,885
884,886
884,887
885,886
887,888
887,889
888,889
890,891
890,892
891,892
894,895
894,896
895,896
897,898
897,899
898,899
901,902
902,903
902,904
903,904
903,905
904,905
904,906
905,906
907,908
907,909
908,909
912,913
912,914
913,914
913,915
914,915
916,917
916,918
917,918
921,922
922,923
922,924
922,925
923,924
925,926
925,927
926,927
928,929
928,930
929,930
932,933
932,934
933,934
935,936
935,937
936,937
939,940
940,941
940,942
940,943
941,942
943,944
943,945
944,945
947,948
947,949
948,949
951,952
952,953
952,954
952,955
953,954
955,956
955,957
956,957
959,960
959,961
960,961
963,964
964,965
964,966
964,967
965,966
967,968
967,969
968,969
971,972
971,973
972,973
974,975
974,976
975,976
978,979
979,980
979,981
980,981
982,983
982,984
982,985
983,984
985,986
985,987
986,987
990,991
991,992
991,993
991,994
992,993
994,995
994,996
995,996
998,999
998,1000
998,1001
999,1000
999,1001
1000,1001
1002,1003
1004,1005
1004,1006
1005,1006
1007,1008
1007,1009
1008,1009
1011,1012
1013,1014
1014,1015
1014,1016
1015,1016
1017,1018
1017,1019
1017,1020
1018,1019
1020,1021
1020,1022
1021,1022
1025,1026
1025,1027
1025,1028
1026,1027
1027,1028
1027,1029
1028,1029
1030,1031
1032,1033
1033,1034
1034,1035
1034,1036
1034,1037
1035,1036
1037,1038
1037,1039
1038,1039
1041,1042
1043,1044
1044,1045
1045,1046
1045,1047
1045,1048
1046,1047
1048,1049
1048,1050
1049,1050
1052,1053
1052,1054
1053,1054
1055,1056
1055,1057
1056,1057
1059,1060
1059,1061
1060,1061
1061,1062
1063,1064
1063,1065
1063,1066
1063,1067
1063,1068
1063,1069
1063,1070
1063,1071
1063,1072
1063,1073
1063,1074
1064,1065
1065,1066
1065,1067
1065,1068
1066,1067
1068,1069
1068,1070
1069,1070
1071,1072
1071,1073
1072,1073
1075,1076
1075,1077
1076,1077
1078,1079
1078,1080
1079,1080
1082,1083
1083,1084
1083,1085
1083,1086
1084,1085
1086,1087
1086,1088
1087,1088
1087,1089
1088,1089
1090,1091
1090,1092
1091,1092
1095,1096
1095,1097
1096,1097
1096,1098
1097,1098
1099,1100
1099,1101
1100,1101
1104,1105
1105,1106
1105,1107
1105,1108
1106,1107
1108,1109
1108,1110
1109,1110
1109,1111
1110,1111
1112,1113
1112,1114
1113,1114
1117,1118
1117,1119
1118,1119
1118,1120
1119,1120
1121,1122
1121,1123
1122,1123
1126,1127
1127,1128
1127,1129
1127,1130
1128,1129
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1134,1135
1134,1136
1135,1136
1139,1140
1139,1141
1140,1141
1140,1142
1141,1142
1143,1144
1143,1145
1144,1145
1148,1149
1149,1150
1149,1151
1149,1152
1150,1151
1152,1153
1152,1154
1153,1154
1153,1155
1154,1155
1156,1157
1156,1158
1157,1158
1161,1162
1161,1163
1162,1163
1164,1165
1164,1166
1165,1166
1168,1169
1169,1170
1169,1171
1169,1172
1170,1171
1172,1173
1172,1174
1173,1174
1173,1175
1174,1175
1176,1177
1176,1178
1177,1178
1181,1182
1181,1183
1182,1183
1184,1185
1184,1186
1185,1186
1188,1189
1189,1190
1189,1191
1189,1192
1190,1191
1192,1193
1192,1194
1193,1194
1193,1195
1194,1195
1196,1197
1196,1198
1197,1198
1201,1202
1201,1203
1202,1203
1202,1204
1203,1204
1205,1206
1205,1207
1206,1207
1210,1211
1211,1212
1211,1213
1211,1214
1212,1213
1214,1215
1214,1216
1215,1216
1215,1217
1216,1217
1218,1219
1218,1220
1219,1220
1223,1224
1223,1225
1224,1225
1224,1226
1225,1226
1227,1228
1227,1229
1228,1229
1232,1233
1233,1234
1233,1235
1234,1235
1234,1236
1235,1236
1235,1237
1236,1237
1238,1239
1238,1240
1239,1240
1243,1244
1243,1245
1244,1245
1244,1246
1245,1246
1247,1248
1247,1249
1248,1249
1252,1253
1253,1254
1253,1255
1253,1256
1254,1255
1256,1257
1256,1258
1257,1258
1257,1259
1258,1259
1260,1261
1260,1262
1261,1262
1265,1266
1265,1267
1266,1267
1266,1268
1267,1268
1269,1270
1269,1271
1270,1271
1274,1275
1275,1276
1275,1277
1275,1278
1276,1277
1278,1279
1278,1280
1279,1280
1279,1281
1280,1281
1282,1283
1282,1284
1283,1284
1287,1288
1287,1289
1288,1289
1288,1290
1289,1290
1291,1292
1291,1293
1292,1293
1296,1297
1297,1298
1297,1299
1298,1299
1300,1301
1300,1302
1301,1302
1304,1305
1305,1306
1305,1307
1306,1307
1308,1309
1308,1310
1309,1310
1312,1313
1312,1314
1312,1315
1313,1314
1314,1315
1314,1316
1315,1316
1317,1318
1317,1319
1317,1320
1317,1321
1318,1319
1320,1321
1320,1322
1321,1322
1324,1325
1327,1328
1327,1329
1327,1330
1327,1331
1327,1332
1328,1329
1329,1330
1329,1331
1329,1332
1329,1333
1330,1331
1334,1335
1334,1336
1335,1336
1338,1339
1339,1340
1339,1341
1340,1341
1342,1343
1344,1345
1345,1346
1346,1347
1347,1348
1348,1349
1350,1351
1351,1352
1351,1353
1351,1354
1351,1355
1352,1353
1354,1355
1354,1356
1355,1356
1358,1359
1358,1360
1359,1360
1362,1363
1362,1364
1363,1364
1365,1366
1365,1367
1366,1367
1369,1370
1371,1372
1371,1373
1372,1373
1372,1374
1373,1374
1373,1375
1374,1375
1378,1379
1378,1380
1378,1381
1378,1382
1378,1383
1378,1384
1379,1380
1380,1381
1380,1382
1382,1383
1382,1384
1384,1385
1386,1387
1387,1388
1387,1389
1387,1390
1388,1389
1390,1391
1390,1392
1391,1392
1394,1395
1394,1396
1395,1396
1398,1399
1399,1400
1399,1401
1399,1402
1399,1403
1399,1404
1399,1405
1399,1406
1399,1407
1399,1408
1399,1409
1399,1410
1399,1411
1399,1412
1399,1413
1399,1414
1399,1415
1399,1416
1399,1417
1400,1401
1402,1403
1406,1407
1406,1408
1407,1408
1407,1409
1408,1409
1412,1413
1412,1414
1413,1414
1416,1417
1416,1418
1417,1418
1417,1419
1418,1419
1422,1423
1422,1424
1423,1424
1425,1426
1425,1427
1426,1427
1429,1430
1429,1431
1430,1431
1432,1433
1432,1434
1433,1434
1436,1437
1436,1438
1436,1439
1436,1440
1437,1438
1439,1440
1439,1441
1440,1441
1440,1442
1441,1442
1441,1443
1442,1443
1442,1444
1443,1444
1445,1446
1445,1447
1446,1447
1452,1453
1452,1454
1453,1454
1453,1455
1454,1455
1454,1456
1455,1456
1455,1457
1456,1457
1458,1459
1458,1460
1459,1460
1466,1467
1466,1468
1466,1469
1466,1470
1467,1468
1469,1470
1469,1471
1470,1471
1470,1472
1471,1472
1471,1473
1472,1473
1472,1474
1473,1474
1475,1476
1475,1477
1476,1477
1482,1483
1482,1484
1483,1484
1483,1485
1484,1485
1484,1486
1485,1486
1485,1487
1486,1487
1488,1489
1488,1490
1489,1490
1496,1497
1496,1498
1496,1499
1496,1500
1497,1498
1499,1500
1499,1501
1500,1501
1500,1502
1501,1502
1501,1503
1502,1503
1502,1504
1503,1504
1505,1506
1505,1507
1506,1507
1512,1513
1512,1514
1513,1514
1513,1515
1514,1515
1514,1516
1515,1516
1515,1517
1516,1517
1518,1519
1518,1520
1519,1520
1526,1527
1526,1528
1526,1529
1526,1530
1527,1528
1529,1530
1529,1531
1530,1531
1530,1532
1531,1532
1531,1533
1532,1533
1532,1534
1533,1534
1535,1536
1535,1537
1536,1537
1542,1543
1542,1544
1543,1544
1543,1545
1544,1545
1544,1546
1545,1546
1545,1547
1546,1547
1548,1549
1548,1550
1549,1550
1556,1557
1556,1558
1557,1558
1559,1560
1559,1561
1560,1561
1563,1564
1563,1565
1564,1565
1566,1567
1566,1568
1567,1568
1570,1571
1570,1572
1571,1572
1573,1574
1573,1575
1574,1575
1577,1578
1577,1579
1578,1579
1580,1581
1580,1582
1581,1582
1584,1585
1584,1586
1584,1587
1585,1586
1585,1587
1586,1587
1586,1588
1587,1588
1587,1589
1588,1589
1592,1593
1594,1595
1594,1596
1594,1597
1594,1598
1595,1596
1597,1598
1597,1599
1598,1599
1601,1602
1603,1604
1604,1605
1605,1606
1608,1609
1609,1610
1609,1611
1610,1611
1612,1613
1612,1614
1613,1614
1616,1617
1617,1618
1617,1619
1618,1619
1620,1621
1620,1622
1621,1622
1624,1625
1625,1626
1625,1627
1625,1628
1625,1629
1626,1627
1630,1631
1630,1632
1631,1632
1634,1635
1635,1636
1635,1637
1635,1638
1635,1639
1636,1637
1638,1639
1638,1640
1639,1640
1642,1643
1642,1644
1643,1644
1646,1647
1646,1648
1647,1648
1649,1650
1649,1651
1650,1651
1653,1654
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,25,27,30,32,35,37,39,42,44,45,48,50,51,53,54,58,60,65,66,67,72,73,74,77,78,82,85,86,91,94,97,98,103,104,105,111,113,121,122,126,127,128,134,136,139,140,144,145,146,153,154,158,159,160,166,168,171,172,176,177,178,183,184,185,190,191,195,196,197,201,202,203,206,207,211,214,215,220,223,226,227,232,233,234,240,242,248,249,250,255,261,262,263,265,270,273,277,278,279,283,287,288,289,294,296,297,301,302,303,306,310,311,312,315,317,321,323,327,328,329,337,338,339,341,347,348,349,351,356,357,358,361,362,366,369,370,375,378,381,382,387,388,389,395,397,401,404,407,408,411,412,417,418,419,423,424,425,428,429,433,436,437,442,445,448,449,454,455,456,462,464,468,470,473,474,478,483,486,488,489,496,497,502,503,508,509,512,514,517,520,521,524,525,527,530,535,536,541,544,545,550,553,556,557,562,563,564,568,571,572,576,579,580,583,584,587,590,591,597,598,599,604,605,609,612,613,619,621,625,628,629,632,633,637,638,643,646,647,649,653,656,657,658,662,665,666,667,671,674,677,678,679,685,688,689,697,700,701,702,703,704,712,715,716,717,718,719,724,726,730,733,736,739,740,745,746,750,753,754,755,760,761,765,768,769,770,774,777,778,781,783,788,793,796,797,798,799,804,807,808,813,816,817,818,819,821,823,828,831,834,837,838,841,844,845,850,853,854,857,860,863,864,867,870,871,873,875,880,881,882,886,889,892,893,896,899,900,906,909,910,911,915,918,919,920,924,927,930,931,934,937,938,942,945,946,949,950,954,957,958,961,962,966,969,970,973,976,977,981,984,987,988,989,993,996,997,1001,1003,1006,1009,1010,1012,1016,1019,1022,1023,1024,1029,1031,1036,1039,1040,1042,1047,1050,1051,1054,1057,1058,1062,1067,1070,1073,1074,1077,1080,1081,1085,1089,1092,1093,1094,1098,1101,1102,1103,1107,1111,1114,1115,1116,1120,1123,1124,1125,1129,1133,1136,1137,1138,1142,1145,1146,1147,1151,1155,1158,1159,1160,1163,1166,1167,1171,1175,1178,1179,1180,1183,1186,1187,1191,1195,1198,1199,1200,1204,1207,1208,1209,1213,1217,1220,1221,1222,1226,1229,1230,1231,1237,1240,1241,1242,1246,1249,1250,1251,1255,1259,1262,1263,1264,1268,1271,1272,1273,1277,1281,1284,1285,1286,1290,1293,1294,1295,1299,1302,1303,1307,1310,1311,1316,1319,1322,1323,1325,1326,1331,1332,1333,1336,1337,1341,1343,1349,1353,1356,1357,1360,1361,1364,1367,1368,1370,1375,1376,1377,1381,1383,1385,1389,1392,1393,1396,1397,1401,1403,1404,1405,1409,1410,1411,1414,1415,1419,1420,1421,1424,1427,1428,1431,1434,1435,1438,1444,1447,1448,1449,1450,1451,1457,1460,1461,1462,1463,1464,1465,1468,1474,1477,1478,1479,1480,1481,1487,1490,1491,1492,1493,1494,1495,1498,1504,1507,1508,1509,1510,1511,1517,1520,1521,1522,1523,1524,1525,1528,1534,1537,1538,1539,1540,1541,1547,1550,1551,1552,1553,1554,1555,1558,1561,1562,1565,1568,1569,1572,1575,1576,1579,1582,1583,1589,1590,1591,1593,1596,1599,1600,1602,1606,1607,1611,1614,1615,1619,1622,1623,1627,1628,1629,1632,1633,1637,1640,1641,1644,1645,1648,1651,1652,1654
-----computeFrom-----
100,101
100,102
115,116
115,117
117,118
117,119
118,119
118,120
130,131
130,132
131,132
131,133
148,149
148,150
149,150
149,151
162,163
162,164
163,164
163,165
229,230
229,231
253,254
253,255
257,258
257,259
268,269
268,270
281,282
281,283
331,332
331,333
333,334
333,335
343,344
343,345
384,385
384,386
399,400
399,401
451,452
451,453
481,482
481,483
492,493
492,494
500,501
500,502
505,506
505,507
559,560
559,561
742,743
742,744
757,758
757,759
877,878
877,879
902,903
902,904
979,980
979,981
1014,1015
1014,1016
1233,1234
1233,1235
1314,1315
1314,1316
1585,1586
1585,1587
-----guardedBy-----
177,202
176,226
154,196
171,232
261,327
262,328
263,312
283,323
287,327
288,328
289,312
347,387
408,424
407,448
411,454
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;IfStatement;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ConditionalExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies){	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
static int
ring_entry(struct queue_ent *qe, struct callattempt *tmp, int *busies)
ring_entry
struct queue_ent *qe
struct queue_ent
queue_ent
*qe
*
qe
struct callattempt *tmp
struct callattempt
callattempt
*tmp
*
tmp
int *busies
int
*busies
*
busies
{	int res;	int status;	char tech[256];	char *location;	const char *macrocontext, *macroexten;	enum ast_device_state newstate;	/* on entry here, we know that tmp->chan == NULL */	if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}	if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}	ast_copy_string(tech, tmp->interface, sizeof(tech));	if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}	/* Request the peer */	tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);	if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}	ast_channel_lock_both(tmp->chan, qe->chan);	if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}	ast_channel_appl_set(tmp->chan, "AppQueue");	ast_channel_data_set(tmp->chan, "(Outgoing Line)");	memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));	/* If the new channel has no callerid, try to guess what it should be */	if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}	ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));	ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;	ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));	/* Inherit specially named variables from parent channel */	ast_channel_inherit_variables(qe->chan, tmp->chan);	ast_channel_datastore_inherit(qe->chan, tmp->chan);	/* Presense of ADSI CPE on outgoing channel follows ours */	ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));	/* Inherit context and extension */	macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");	ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);	macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");	if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}	if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}	ast_channel_unlock(tmp->chan);	ast_channel_unlock(qe->chan);	/* Place the call, but don't wait on the answer */	if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}	update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));	return 1;}
int res;
int res;
int
res
res
int status;
int status;
int
status
status
char tech[256];
char tech[256];
char
tech[256]
tech
[256]
256
char *location;
char *location;
char
*location
*
location
const char *macrocontext, *macroexten;
const char *macrocontext, *macroexten;
const char
*macrocontext
*
macrocontext
*macroexten
*
macroexten
enum ast_device_state newstate;
enum ast_device_state newstate;
enum ast_device_state
ast_device_state
newstate
newstate
if (tmp->member->paused) {		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
tmp->member->paused
tmp->member
tmp
tmp
member
paused
{		ast_debug(1, "%s paused, can't receive call\n", tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "%s paused, can't receive call\n", tmp->interface);
ast_debug(1, "%s paused, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s paused, can't receive call\n"
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))) {		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)) ||		(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime))
tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
tmp->lastqueue && tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime)
time(NULL) - tmp->lastcall < tmp->lastqueue->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
tmp->lastqueue->wrapuptime
tmp->lastqueue
tmp
tmp
lastqueue
wrapuptime
(!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime))
!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
!tmp->lastqueue && qe->parent->wrapuptime
!tmp->lastqueue
tmp->lastqueue
tmp
tmp
lastqueue
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
(time(NULL) - tmp->lastcall < qe->parent->wrapuptime)
time(NULL) - tmp->lastcall < qe->parent->wrapuptime
time(NULL) - tmp->lastcall
time(NULL)
time
time
NULL
NULL
tmp->lastcall
tmp
tmp
lastcall
qe->parent->wrapuptime
qe->parent
qe
qe
parent
wrapuptime
{		ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface);
ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\n",				(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name), tmp->interface)
ast_debug
ast_debug
1
"Wrapuptime not yet expired on queue %s for %s\n"
(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name
tmp->lastqueue
tmp
tmp
lastqueue
tmp->lastqueue->name
tmp->lastqueue
tmp
tmp
lastqueue
name
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (!tmp->member->ringinuse) {		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
!tmp->member->ringinuse
tmp->member->ringinuse
tmp->member
tmp
tmp
member
ringinuse
{		if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}		if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}	}
if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)) {			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}
check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
check_state_unknown
check_state_unknown
(tmp->member->status == AST_DEVICE_UNKNOWN)
tmp->member->status == AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			newstate = ast_device_state(tmp->member->interface);			if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}		}
newstate = ast_device_state(tmp->member->interface);
newstate = ast_device_state(tmp->member->interface)
newstate
newstate
ast_device_state(tmp->member->interface)
ast_device_state
ast_device_state
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if (newstate != tmp->member->status) {				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}
newstate != tmp->member->status
newstate
newstate
tmp->member->status
tmp->member
tmp
tmp
member
status
{				ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));				ast_devstate_changed_literal(newstate, tmp->member->interface);			}
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate));
ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\n",					tmp->member->interface, ast_devstate2str(tmp->member->status), ast_devstate2str(newstate))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Found a channel matching iterface %s while status was %s changed to %s\n"
tmp->member->interface
tmp->member
tmp
tmp
member
interface
ast_devstate2str(tmp->member->status)
ast_devstate2str
ast_devstate2str
tmp->member->status
tmp->member
tmp
tmp
member
status
ast_devstate2str(newstate)
ast_devstate2str
ast_devstate2str
newstate
newstate
ast_devstate_changed_literal(newstate, tmp->member->interface);
ast_devstate_changed_literal(newstate, tmp->member->interface)
ast_devstate_changed_literal
ast_devstate_changed_literal
newstate
newstate
tmp->member->interface
tmp->member
tmp
tmp
member
interface
if ((tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)) {			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
(tmp->member->status != AST_DEVICE_NOT_INUSE) && (tmp->member->status != AST_DEVICE_UNKNOWN)
(tmp->member->status != AST_DEVICE_NOT_INUSE)
tmp->member->status != AST_DEVICE_NOT_INUSE
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
(tmp->member->status != AST_DEVICE_UNKNOWN)
tmp->member->status != AST_DEVICE_UNKNOWN
tmp->member->status
tmp->member
tmp
tmp
member
status
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
{			ast_debug(1, "%s in use, can't receive call\n", tmp->interface);			if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}			tmp->stillgoing = 0;			(*busies)++;			return 0;		}
ast_debug(1, "%s in use, can't receive call\n", tmp->interface);
ast_debug(1, "%s in use, can't receive call\n", tmp->interface)
ast_debug
ast_debug
1
"%s in use, can't receive call\n"
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {				ast_cdr_busy(ast_channel_cdr(qe->chan));			}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{				ast_cdr_busy(ast_channel_cdr(qe->chan));			}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
if (use_weight && compare_weight(qe->parent,tmp->member)) {		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
use_weight && compare_weight(qe->parent,tmp->member)
use_weight
use_weight
compare_weight(qe->parent,tmp->member)
compare_weight
compare_weight
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
{		ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		(*busies)++;		return 0;	}
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface);
ast_debug(1, "Priority queue delaying call to %s:%s\n", qe->parent->name, tmp->interface)
ast_debug
ast_debug
1
"Priority queue delaying call to %s:%s\n"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_copy_string(tech, tmp->interface, sizeof(tech));
ast_copy_string(tech, tmp->interface, sizeof(tech))
ast_copy_string
ast_copy_string
tech
tech
tmp->interface
tmp
tmp
interface
sizeof(tech)
(tech)
tech
tech
if ((location = strchr(tech, '/'))) {		*location++ = '\0';	} else {		location = "";	}
(location = strchr(tech, '/'))
location = strchr(tech, '/')
location
location
strchr(tech, '/')
strchr
strchr
tech
tech
'/'
{		*location++ = '\0';	}
*location++ = '\0';
*location++ = '\0'
*location++
location++
location
location
'\0'
{		location = "";	}
location = "";
location = ""
location
location
""
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status);
tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
tmp->chan
tmp
tmp
chan
ast_request(tech, ast_channel_nativeformats(qe->chan), qe->chan, location, &status)
ast_request
ast_request
tech
tech
ast_channel_nativeformats(qe->chan)
ast_channel_nativeformats
ast_channel_nativeformats
qe->chan
qe
qe
chan
qe->chan
qe
qe
chan
location
location
&status
status
status
if (!tmp->chan) {			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
!tmp->chan
tmp->chan
tmp
tmp
chan
{			/* If we can't, just go on to the next call */		if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}		tmp->stillgoing = 0;		ao2_lock(qe->parent);		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		qe->parent->rrpos++;		qe->linpos++;		ao2_unlock(qe->parent);		(*busies)++;		return 0;	}
if (ast_channel_cdr(qe->chan)) {			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
{			ast_cdr_busy(ast_channel_cdr(qe->chan));		}
ast_cdr_busy(ast_channel_cdr(qe->chan));
ast_cdr_busy(ast_channel_cdr(qe->chan))
ast_cdr_busy
ast_cdr_busy
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
tmp->stillgoing = 0;
tmp->stillgoing = 0
tmp->stillgoing
tmp
tmp
stillgoing
0
ao2_lock(qe->parent);
ao2_lock(qe->parent)
ao2_lock
ao2_lock
qe->parent
qe
qe
parent
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
qe->parent->rrpos++;
qe->parent->rrpos++
qe->parent->rrpos
qe->parent
qe
qe
parent
rrpos
qe->linpos++;
qe->linpos++
qe->linpos
qe
qe
linpos
ao2_unlock(qe->parent);
ao2_unlock(qe->parent)
ao2_unlock
ao2_unlock
qe->parent
qe
qe
parent
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
return 0;
0
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
if (qe->cancel_answered_elsewhere) {		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
qe->cancel_answered_elsewhere
qe
qe
cancel_answered_elsewhere
{		ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);	}
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE);
ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
ast_channel_hangupcause_set
ast_channel_hangupcause_set
tmp->chan
tmp
tmp
chan
AST_CAUSE_ANSWERED_ELSEWHERE
AST_CAUSE_ANSWERED_ELSEWHERE
ast_channel_appl_set(tmp->chan, "AppQueue");
ast_channel_appl_set(tmp->chan, "AppQueue")
ast_channel_appl_set
ast_channel_appl_set
tmp->chan
tmp
tmp
chan
"AppQueue"
ast_channel_data_set(tmp->chan, "(Outgoing Line)");
ast_channel_data_set(tmp->chan, "(Outgoing Line)")
ast_channel_data_set
ast_channel_data_set
tmp->chan
tmp
tmp
chan
"(Outgoing Line)"
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)));
memset(ast_channel_whentohangup(tmp->chan), 0, sizeof(*ast_channel_whentohangup(tmp->chan)))
memset
memset
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
0
sizeof(*ast_channel_whentohangup(tmp->chan))
(*ast_channel_whentohangup(tmp->chan))
*ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup(tmp->chan)
ast_channel_whentohangup
ast_channel_whentohangup
tmp->chan
tmp
tmp
chan
if (!ast_channel_caller(tmp->chan)->id.number.valid) {		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
!ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number.valid
ast_channel_caller(tmp->chan)->id.number
ast_channel_caller(tmp->chan)->id
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
id
number
valid
{		if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}		tmp->dial_callerid_absent = 1;	}
if (ast_channel_connected(qe->chan)->id.number.valid) {			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		} else if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
{			struct ast_party_caller caller;			ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));			caller.id = ast_channel_connected(qe->chan)->id;			caller.ani = ast_channel_connected(qe->chan)->ani;			ast_channel_set_caller_event(tmp->chan, &caller, NULL);		}
struct ast_party_caller caller;
struct ast_party_caller caller;
struct ast_party_caller
ast_party_caller
caller
caller
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan));
ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan))
ast_party_caller_set_init
ast_party_caller_set_init
&caller
caller
caller
ast_channel_caller(tmp->chan)
ast_channel_caller
ast_channel_caller
tmp->chan
tmp
tmp
chan
caller.id = ast_channel_connected(qe->chan)->id;
caller.id = ast_channel_connected(qe->chan)->id
caller.id
caller
caller
id
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
caller.ani = ast_channel_connected(qe->chan)->ani;
caller.ani = ast_channel_connected(qe->chan)->ani
caller.ani
caller
caller
ani
ast_channel_connected(qe->chan)->ani
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
ani
ast_channel_set_caller_event(tmp->chan, &caller, NULL);
ast_channel_set_caller_event(tmp->chan, &caller, NULL)
ast_channel_set_caller_event
ast_channel_set_caller_event
tmp->chan
tmp
tmp
chan
&caller
caller
caller
NULL
NULL
if (!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)) {			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		} else if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero(ast_channel_dialed(qe->chan)->number.str)
ast_strlen_zero
ast_strlen_zero
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
{			ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);		}
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL);
ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)->number.str, NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
ast_channel_dialed(qe->chan)->number.str
ast_channel_dialed(qe->chan)->number
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
number
str
NULL
NULL
NULL
NULL
if (!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))) {			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)))
ast_strlen_zero
ast_strlen_zero
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
{			ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL); 		}
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL);
ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan)), NULL, NULL)
ast_set_callerid
ast_set_callerid
tmp->chan
tmp
tmp
chan
S_OR(ast_channel_macroexten(qe->chan), ast_channel_exten(qe->chan))
S_OR
S_OR
ast_channel_macroexten(qe->chan)
ast_channel_macroexten
ast_channel_macroexten
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
NULL
NULL
NULL
NULL
tmp->dial_callerid_absent = 1;
tmp->dial_callerid_absent = 1
tmp->dial_callerid_absent
tmp
tmp
dial_callerid_absent
1
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan));
ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan), ast_channel_redirecting(qe->chan))
ast_party_redirecting_copy
ast_party_redirecting_copy
ast_channel_redirecting(tmp->chan)
ast_channel_redirecting
ast_channel_redirecting
tmp->chan
tmp
tmp
chan
ast_channel_redirecting(qe->chan)
ast_channel_redirecting
ast_channel_redirecting
qe->chan
qe
qe
chan
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select;
ast_channel_dialed(tmp->chan)->transit_network_select = ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(tmp->chan)->transit_network_select
ast_channel_dialed(tmp->chan)
ast_channel_dialed
ast_channel_dialed
tmp->chan
tmp
tmp
chan
transit_network_select
ast_channel_dialed(qe->chan)->transit_network_select
ast_channel_dialed(qe->chan)
ast_channel_dialed
ast_channel_dialed
qe->chan
qe
qe
chan
transit_network_select
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan));
ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan), ast_channel_caller(qe->chan))
ast_connected_line_copy_from_caller
ast_connected_line_copy_from_caller
ast_channel_connected(tmp->chan)
ast_channel_connected
ast_channel_connected
tmp->chan
tmp
tmp
chan
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
ast_channel_inherit_variables(qe->chan, tmp->chan);
ast_channel_inherit_variables(qe->chan, tmp->chan)
ast_channel_inherit_variables
ast_channel_inherit_variables
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_datastore_inherit(qe->chan, tmp->chan);
ast_channel_datastore_inherit(qe->chan, tmp->chan)
ast_channel_datastore_inherit
ast_channel_datastore_inherit
qe->chan
qe
qe
chan
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan));
ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan))
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp->chan
tmp
tmp
chan
ast_channel_adsicpe(qe->chan)
ast_channel_adsicpe
ast_channel_adsicpe
qe->chan
qe
qe
chan
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT");
macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
macrocontext
macrocontext
pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_CONTEXT"
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext);
ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext)
ast_channel_dialcontext_set
ast_channel_dialcontext_set
tmp->chan
tmp
tmp
chan
ast_strlen_zero(macrocontext) ? ast_channel_context(qe->chan) : macrocontext
ast_strlen_zero(macrocontext)
ast_strlen_zero
ast_strlen_zero
macrocontext
macrocontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
macrocontext
macrocontext
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN");
macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
macroexten
macroexten
pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
pbx_builtin_getvar_helper
pbx_builtin_getvar_helper
qe->chan
qe
qe
chan
"MACRO_EXTEN"
if (!ast_strlen_zero(macroexten)) {		ast_channel_exten_set(tmp->chan, macroexten);	} else {		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
!ast_strlen_zero(macroexten)
ast_strlen_zero(macroexten)
ast_strlen_zero
ast_strlen_zero
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, macroexten);	}
ast_channel_exten_set(tmp->chan, macroexten);
ast_channel_exten_set(tmp->chan, macroexten)
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
macroexten
macroexten
{		ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));	}
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan));
ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan))
ast_channel_exten_set
ast_channel_exten_set
tmp->chan
tmp
tmp
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
if (ast_cdr_isset_unanswered()) {		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_isset_unanswered()
ast_cdr_isset_unanswered
ast_cdr_isset_unanswered
{		/* they want to see the unanswered dial attempts! */		/* set up the CDR fields on all the CDRs to give sensical information */		ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));		strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);		strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);		strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);		strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));		strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);		strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);		ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;		strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);		strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);	}
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan));
ast_cdr_setdestchan(ast_channel_cdr(tmp->chan), ast_channel_name(tmp->chan))
ast_cdr_setdestchan
ast_cdr_setdestchan
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid);
strcpy(ast_channel_cdr(tmp->chan)->clid, ast_channel_cdr(qe->chan)->clid)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->clid
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
clid
ast_channel_cdr(qe->chan)->clid
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
clid
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel);
strcpy(ast_channel_cdr(tmp->chan)->channel, ast_channel_cdr(qe->chan)->channel)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->channel
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
channel
ast_channel_cdr(qe->chan)->channel
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
channel
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src);
strcpy(ast_channel_cdr(tmp->chan)->src, ast_channel_cdr(qe->chan)->src)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->src
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
src
ast_channel_cdr(qe->chan)->src
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
src
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dst, ast_channel_exten(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dst
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dst
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan));
strcpy(ast_channel_cdr(tmp->chan)->dcontext, ast_channel_context(qe->chan))
strcpy
strcpy
ast_channel_cdr(tmp->chan)->dcontext
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
dcontext
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp);
strcpy(ast_channel_cdr(tmp->chan)->lastapp, ast_channel_cdr(qe->chan)->lastapp)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastapp
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastapp
ast_channel_cdr(qe->chan)->lastapp
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastapp
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata);
strcpy(ast_channel_cdr(tmp->chan)->lastdata, ast_channel_cdr(qe->chan)->lastdata)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->lastdata
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
lastdata
ast_channel_cdr(qe->chan)->lastdata
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
lastdata
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags;
ast_channel_cdr(tmp->chan)->amaflags = ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(tmp->chan)->amaflags
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
amaflags
ast_channel_cdr(qe->chan)->amaflags
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
amaflags
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode);
strcpy(ast_channel_cdr(tmp->chan)->accountcode, ast_channel_cdr(qe->chan)->accountcode)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->accountcode
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
accountcode
ast_channel_cdr(qe->chan)->accountcode
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
accountcode
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield);
strcpy(ast_channel_cdr(tmp->chan)->userfield, ast_channel_cdr(qe->chan)->userfield)
strcpy
strcpy
ast_channel_cdr(tmp->chan)->userfield
ast_channel_cdr(tmp->chan)
ast_channel_cdr
ast_channel_cdr
tmp->chan
tmp
tmp
chan
userfield
ast_channel_cdr(qe->chan)->userfield
ast_channel_cdr(qe->chan)
ast_channel_cdr
ast_channel_cdr
qe->chan
qe
qe
chan
userfield
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
if ((res = ast_call(tmp->chan, location, 0))) {		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	} else if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
(res = ast_call(tmp->chan, location, 0))
res = ast_call(tmp->chan, location, 0)
res
res
ast_call(tmp->chan, location, 0)
ast_call
ast_call
tmp->chan
tmp
tmp
chan
location
location
0
{		/* Again, keep going even if there's an error */		ast_verb(3, "Couldn't call %s\n", tmp->interface);		do_hang(tmp);		(*busies)++;		update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));		return 0;	}
ast_verb(3, "Couldn't call %s\n", tmp->interface);
ast_verb(3, "Couldn't call %s\n", tmp->interface)
ast_verb
ast_verb
3
"Couldn't call %s\n"
tmp->interface
tmp
tmp
interface
do_hang(tmp);
do_hang(tmp)
do_hang
do_hang
tmp
tmp
(*busies)++;
(*busies)++
(*busies)
*busies
busies
busies
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 0;
0
if (qe->parent->eventwhencalled) {		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
{		char vars[2048];		ast_channel_lock_both(tmp->chan, qe->chan);		/*** DOCUMENTATION		<managerEventInstance>			<synopsis>Raised when an Agent is notified of a member in the queue.</synopsis>			<syntax>				<xi:include xpointer="xpointer(/docs/managerEvent[@name='QueueMemberStatus']/managerEventInstance/syntax/parameter[@name='Queue'])" />				<parameter name="AgentCalled">					<para>The agent's technology or location.</para>				</parameter>				<parameter name="AgentName">					<para>The name of the agent.</para>				</parameter>				<parameter name="Variable" required="no" multiple="yes">					<para>Optional channel variables from the ChannelCalling channel</para>				</parameter>			</syntax>			<see-also>				<ref type="managerEvent">AgentRingNoAnswer</ref>				<ref type="managerEvent">AgentComplete</ref>				<ref type="managerEvent">AgentConnect</ref>			</see-also>		</managerEventInstance>		***/		manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");		ast_channel_unlock(tmp->chan);		ast_channel_unlock(qe->chan);		ast_verb(3, "Called %s\n", tmp->interface);	}
char vars[2048];
char vars[2048];
char
vars[2048]
vars
[2048]
2048
ast_channel_lock_both(tmp->chan, qe->chan);
ast_channel_lock_both(tmp->chan, qe->chan)
ast_channel_lock_both
ast_channel_lock_both
tmp->chan
tmp
tmp
chan
qe->chan
qe
qe
chan
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "");
manager_event(EVENT_FLAG_AGENT, "AgentCalled",			"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s",			qe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan), ast_channel_name(tmp->chan),			S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown"),			S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown"),			ast_channel_context(qe->chan), ast_channel_exten(qe->chan), ast_channel_priority(qe->chan), ast_channel_uniqueid(qe->chan),			qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : "")
manager_event
manager_event
EVENT_FLAG_AGENT
EVENT_FLAG_AGENT
"AgentCalled"
"Queue: %s\r\n"			"AgentCalled: %s\r\n"			"AgentName: %s\r\n"			"ChannelCalling: %s\r\n"			"DestinationChannel: %s\r\n"			"CallerIDNum: %s\r\n"			"CallerIDName: %s\r\n"			"ConnectedLineNum: %s\r\n"			"ConnectedLineName: %s\r\n"			"Context: %s\r\n"			"Extension: %s\r\n"			"Priority: %d\r\n"			"Uniqueid: %s\r\n"			"%s"
qe->parent->name
qe->parent
qe
qe
parent
name
tmp->interface
tmp
tmp
interface
tmp->member->membername
tmp->member
tmp
tmp
member
membername
ast_channel_name(qe->chan)
ast_channel_name
ast_channel_name
qe->chan
qe
qe
chan
ast_channel_name(tmp->chan)
ast_channel_name
ast_channel_name
tmp->chan
tmp
tmp
chan
S_COR(ast_channel_caller(qe->chan)->id.number.valid, ast_channel_caller(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.number.valid
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
valid
ast_channel_caller(qe->chan)->id.number.str
ast_channel_caller(qe->chan)->id.number
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_caller(qe->chan)->id.name.valid, ast_channel_caller(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_caller(qe->chan)->id.name.valid
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
valid
ast_channel_caller(qe->chan)->id.name.str
ast_channel_caller(qe->chan)->id.name
ast_channel_caller(qe->chan)->id
ast_channel_caller(qe->chan)
ast_channel_caller
ast_channel_caller
qe->chan
qe
qe
chan
id
name
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.number.valid, ast_channel_connected(qe->chan)->id.number.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.number.valid
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
valid
ast_channel_connected(qe->chan)->id.number.str
ast_channel_connected(qe->chan)->id.number
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
number
str
"unknown"
S_COR(ast_channel_connected(qe->chan)->id.name.valid, ast_channel_connected(qe->chan)->id.name.str, "unknown")
S_COR
S_COR
ast_channel_connected(qe->chan)->id.name.valid
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
valid
ast_channel_connected(qe->chan)->id.name.str
ast_channel_connected(qe->chan)->id.name
ast_channel_connected(qe->chan)->id
ast_channel_connected(qe->chan)
ast_channel_connected
ast_channel_connected
qe->chan
qe
qe
chan
id
name
str
"unknown"
ast_channel_context(qe->chan)
ast_channel_context
ast_channel_context
qe->chan
qe
qe
chan
ast_channel_exten(qe->chan)
ast_channel_exten
ast_channel_exten
qe->chan
qe
qe
chan
ast_channel_priority(qe->chan)
ast_channel_priority
ast_channel_priority
qe->chan
qe
qe
chan
ast_channel_uniqueid(qe->chan)
ast_channel_uniqueid
ast_channel_uniqueid
qe->chan
qe
qe
chan
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)) : ""
qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES
qe->parent->eventwhencalled
qe->parent
qe
qe
parent
eventwhencalled
QUEUE_EVENT_VARIABLES
QUEUE_EVENT_VARIABLES
vars2manager(qe->chan, vars, sizeof(vars))
vars2manager
vars2manager
qe->chan
qe
qe
chan
vars
vars
sizeof(vars)
(vars)
vars
vars
""
ast_channel_unlock(tmp->chan);
ast_channel_unlock(tmp->chan)
ast_channel_unlock
ast_channel_unlock
tmp->chan
tmp
tmp
chan
ast_channel_unlock(qe->chan);
ast_channel_unlock(qe->chan)
ast_channel_unlock
ast_channel_unlock
qe->chan
qe
qe
chan
ast_verb(3, "Called %s\n", tmp->interface);
ast_verb(3, "Called %s\n", tmp->interface)
ast_verb
ast_verb
3
"Called %s\n"
tmp->interface
tmp
tmp
interface
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member));
update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member))
update_status
update_status
qe->parent
qe
qe
parent
tmp->member
tmp
tmp
member
get_queue_member_status(tmp->member)
get_queue_member_status
get_queue_member_status
tmp->member
tmp
tmp
member
return 1;
1
-----joern-----
(2,358,0)
(905,359,0)
(470,494,0)
(722,89,0)
(552,6,0)
(656,122,0)
(117,230,0)
(388,945,0)
(377,52,0)
(955,677,0)
(90,589,0)
(35,429,0)
(211,417,0)
(984,122,0)
(375,797,0)
(471,101,0)
(521,18,0)
(853,128,0)
(223,436,0)
(493,275,0)
(568,14,0)
(926,554,0)
(349,75,0)
(295,553,0)
(436,155,0)
(338,372,0)
(39,505,0)
(621,886,0)
(433,182,0)
(743,983,0)
(273,176,0)
(6,552,0)
(533,391,0)
(152,543,0)
(168,427,0)
(246,136,0)
(206,524,0)
(678,860,0)
(172,122,0)
(909,859,0)
(368,761,0)
(557,214,0)
(92,239,0)
(626,554,0)
(513,198,0)
(348,15,0)
(7,894,0)
(180,845,0)
(500,554,0)
(502,817,0)
(546,819,0)
(747,579,0)
(16,626,0)
(486,994,0)
(881,232,0)
(567,621,0)
(894,781,0)
(491,875,0)
(794,330,0)
(856,680,0)
(157,781,0)
(970,439,0)
(705,227,0)
(459,760,0)
(606,932,0)
(595,10,0)
(891,958,0)
(330,794,0)
(665,778,0)
(850,424,0)
(781,894,0)
(797,122,0)
(91,333,0)
(27,270,0)
(303,380,0)
(477,511,0)
(940,392,0)
(924,884,0)
(48,957,0)
(718,530,0)
(837,554,0)
(967,536,0)
(83,227,0)
(303,288,0)
(688,630,0)
(930,75,0)
(165,716,0)
(28,908,0)
(565,3,0)
(969,610,0)
(937,537,0)
(935,756,0)
(387,970,0)
(161,818,0)
(902,957,0)
(628,122,0)
(737,691,0)
(332,957,0)
(339,756,0)
(248,957,0)
(240,122,0)
(887,371,0)
(533,524,0)
(153,67,0)
(76,522,0)
(23,448,0)
(906,958,0)
(233,168,0)
(844,216,0)
(772,253,0)
(878,56,0)
(817,502,0)
(180,835,0)
(236,977,0)
(146,218,0)
(467,554,0)
(410,833,0)
(149,802,0)
(710,957,0)
(873,543,0)
(375,305,0)
(956,949,0)
(626,16,0)
(429,693,0)
(350,338,0)
(40,561,0)
(510,627,0)
(257,624,0)
(326,940,0)
(376,471,0)
(105,989,0)
(995,711,0)
(552,719,0)
(354,554,0)
(260,447,0)
(466,356,0)
(32,139,0)
(677,122,0)
(208,452,0)
(372,554,0)
(606,839,0)
(414,631,0)
(970,943,0)
(644,191,0)
(114,494,0)
(636,724,0)
(919,501,0)
(658,353,0)
(940,957,0)
(914,920,0)
(745,359,0)
(121,56,0)
(164,979,0)
(335,818,0)
(637,791,0)
(609,677,0)
(36,251,0)
(219,584,0)
(605,771,0)
(434,386,0)
(272,299,0)
(59,268,0)
(318,18,0)
(166,392,0)
(836,354,0)
(642,282,0)
(610,969,0)
(663,572,0)
(490,532,0)
(889,281,0)
(496,633,0)
(620,86,0)
(683,969,0)
(598,360,0)
(684,817,0)
(91,888,0)
(619,498,0)
(29,341,0)
(309,851,0)
(572,970,0)
(731,447,0)
(871,564,0)
(332,980,0)
(992,574,0)
(883,792,0)
(953,869,0)
(692,234,0)
(329,30,0)
(394,58,0)
(289,935,0)
(918,553,0)
(970,498,0)
(778,665,0)
(879,816,0)
(311,744,0)
(335,554,0)
(658,122,0)
(799,957,0)
(600,149,0)
(247,335,0)
(796,908,0)
(662,882,0)
(79,605,0)
(535,428,0)
(181,232,0)
(293,449,0)
(894,7,0)
(698,654,0)
(744,269,0)
(884,733,0)
(516,834,0)
(120,364,0)
(715,875,0)
(130,943,0)
(354,494,0)
(940,865,0)
(185,100,0)
(25,684,0)
(479,308,0)
(535,925,0)
(228,901,0)
(125,349,0)
(475,502,0)
(651,364,0)
(303,108,0)
(17,59,0)
(684,730,0)
(425,439,0)
(155,337,0)
(232,881,0)
(201,718,0)
(263,57,0)
(45,248,0)
(15,540,0)
(405,959,0)
(970,191,0)
(508,554,0)
(362,231,0)
(838,193,0)
(629,828,0)
(492,730,0)
(391,486,0)
(512,579,0)
(77,554,0)
(764,554,0)
(179,174,0)
(822,134,0)
(262,231,0)
(616,901,0)
(72,374,0)
(184,947,0)
(225,929,0)
(182,694,0)
(752,296,0)
(468,619,0)
(805,203,0)
(687,139,0)
(267,64,0)
(497,792,0)
(245,134,0)
(336,103,0)
(970,227,0)
(134,494,0)
(85,327,0)
(440,631,0)
(7,994,0)
(202,827,0)
(451,494,0)
(757,689,0)
(512,337,0)
(105,554,0)
(103,957,0)
(6,122,0)
(492,392,0)
(718,954,0)
(623,880,0)
(993,894,0)
(336,230,0)
(23,494,0)
(712,266,0)
(444,80,0)
(327,108,0)
(508,964,0)
(447,554,0)
(272,300,0)
(771,605,0)
(940,817,0)
(932,606,0)
(366,866,0)
(884,122,0)
(188,554,0)
(498,293,0)
(88,51,0)
(593,748,0)
(615,724,0)
(684,508,0)
(421,701,0)
(606,464,0)
(578,577,0)
(203,849,0)
(389,859,0)
(929,337,0)
(717,514,0)
(204,451,0)
(596,900,0)
(728,554,0)
(797,375,0)
(250,886,0)
(630,530,0)
(412,221,0)
(154,269,0)
(159,122,0)
(34,568,0)
(353,658,0)
(847,380,0)
(453,869,0)
(126,779,0)
(833,970,0)
(195,871,0)
(396,440,0)
(800,809,0)
(191,57,0)
(20,303,0)
(481,714,0)
(372,338,0)
(297,386,0)
(27,489,0)
(307,385,0)
(882,554,0)
(821,623,0)
(358,957,0)
(754,118,0)
(869,182,0)
(774,802,0)
(323,64,0)
(970,432,0)
(481,78,0)
(737,554,0)
(181,275,0)
(463,589,0)
(553,161,0)
(406,859,0)
(899,554,0)
(631,440,0)
(785,290,0)
(232,181,0)
(334,135,0)
(501,932,0)
(429,541,0)
(908,796,0)
(702,470,0)
(167,797,0)
(942,554,0)
(568,270,0)
(536,689,0)
(50,938,0)
(783,871,0)
(573,17,0)
(665,341,0)
(168,108,0)
(349,624,0)
(650,957,0)
(716,122,0)
(815,679,0)
(3,554,0)
(60,198,0)
(278,725,0)
(626,494,0)
(190,168,0)
(224,106,0)
(816,613,0)
(488,957,0)
(138,354,0)
(820,835,0)
(156,712,0)
(536,122,0)
(649,100,0)
(196,122,0)
(379,792,0)
(606,39,0)
(855,144,0)
(492,817,0)
(882,432,0)
(78,481,0)
(737,494,0)
(912,829,0)
(432,970,0)
(470,772,0)
(16,100,0)
(313,284,0)
(474,179,0)
(308,86,0)
(192,656,0)
(238,94,0)
(981,387,0)
(279,467,0)
(732,957,0)
(908,554,0)
(979,229,0)
(157,938,0)
(711,554,0)
(320,156,0)
(244,848,0)
(590,45,0)
(725,58,0)
(819,957,0)
(507,372,0)
(103,336,0)
(477,292,0)
(944,692,0)
(357,240,0)
(300,272,0)
(29,122,0)
(154,679,0)
(485,871,0)
(472,957,0)
(299,517,0)
(836,819,0)
(613,816,0)
(978,901,0)
(675,122,0)
(390,248,0)
(458,833,0)
(428,245,0)
(864,968,0)
(736,760,0)
(359,905,0)
(969,554,0)
(530,630,0)
(940,11,0)
(363,437,0)
(695,451,0)
(281,889,0)
(130,122,0)
(253,772,0)
(162,727,0)
(765,291,0)
(666,92,0)
(938,554,0)
(748,593,0)
(802,149,0)
(150,719,0)
(414,337,0)
(414,939,0)
(903,455,0)
(940,730,0)
(566,156,0)
(755,17,0)
(865,554,0)
(512,67,0)
(210,294,0)
(127,899,0)
(116,991,0)
(248,390,0)
(562,385,0)
(191,970,0)
(148,554,0)
(386,122,0)
(630,198,0)
(52,122,0)
(104,443,0)
(75,356,0)
(870,577,0)
(866,554,0)
(442,3,0)
(99,623,0)
(851,554,0)
(314,957,0)
(984,453,0)
(446,947,0)
(929,285,0)
(596,315,0)
(713,152,0)
(214,616,0)
(611,851,0)
(532,494,0)
(273,239,0)
(174,179,0)
(519,188,0)
(134,245,0)
(858,173,0)
(45,122,0)
(397,856,0)
(877,425,0)
(856,708,0)
(632,992,0)
(373,235,0)
(628,814,0)
(962,957,0)
(24,374,0)
(300,358,0)
(907,108,0)
(459,625,0)
(946,86,0)
(10,989,0)
(135,400,0)
(237,293,0)
(974,78,0)
(555,399,0)
(802,264,0)
(343,912,0)
(787,284,0)
(690,615,0)
(58,725,0)
(796,957,0)
(721,692,0)
(581,800,0)
(264,802,0)
(467,615,0)
(728,848,0)
(498,619,0)
(897,970,0)
(54,152,0)
(186,389,0)
(97,537,0)
(498,970,0)
(829,912,0)
(301,310,0)
(807,467,0)
(840,222,0)
(80,264,0)
(3,494,0)
(268,59,0)
(115,957,0)
(834,122,0)
(905,486,0)
(972,658,0)
(55,496,0)
(439,970,0)
(674,764,0)
(804,653,0)
(675,223,0)
(623,821,0)
(983,94,0)
(198,630,0)
(340,700,0)
(66,949,0)
(189,78,0)
(244,561,0)
(922,117,0)
(851,548,0)
(304,2,0)
(276,438,0)
(591,372,0)
(471,376,0)
(383,733,0)
(292,437,0)
(3,99,0)
(800,122,0)
(987,116,0)
(655,122,0)
(841,866,0)
(492,600,0)
(896,558,0)
(67,153,0)
(290,122,0)
(223,675,0)
(453,984,0)
(416,114,0)
(530,338,0)
(534,225,0)
(168,494,0)
(641,105,0)
(378,886,0)
(420,466,0)
(436,223,0)
(934,452,0)
(958,494,0)
(290,697,0)
(141,561,0)
(292,477,0)
(331,627,0)
(41,291,0)
(328,172,0)
(777,425,0)
(831,717,0)
(810,989,0)
(557,642,0)
(890,122,0)
(388,751,0)
(312,464,0)
(977,711,0)
(68,675,0)
(345,77,0)
(832,135,0)
(673,218,0)
(531,266,0)
(494,957,0)
(579,512,0)
(158,605,0)
(411,171,0)
(487,168,0)
(538,267,0)
(413,684,0)
(239,273,0)
(700,340,0)
(256,400,0)
(814,628,0)
(135,334,0)
(439,425,0)
(828,947,0)
(706,723,0)
(867,291,0)
(61,287,0)
(179,957,0)
(550,899,0)
(89,364,0)
(728,494,0)
(550,699,0)
(976,643,0)
(108,327,0)
(248,45,0)
(968,864,0)
(701,778,0)
(563,492,0)
(369,474,0)
(462,498,0)
(129,606,0)
(917,536,0)
(759,417,0)
(18,933,0)
(691,830,0)
(374,122,0)
(916,533,0)
(500,902,0)
(635,251,0)
(9,391,0)
(613,656,0)
(778,701,0)
(33,715,0)
(959,530,0)
(585,287,0)
(353,296,0)
(258,643,0)
(723,779,0)
(403,970,0)
(764,120,0)
(572,663,0)
(449,845,0)
(632,511,0)
(817,88,0)
(303,584,0)
(308,479,0)
(725,278,0)
(812,408,0)
(22,730,0)
(67,512,0)
(389,186,0)
(603,606,0)
(285,929,0)
(172,328,0)
(415,900,0)
(588,193,0)
(793,538,0)
(368,727,0)
(751,388,0)
(344,33,0)
(413,674,0)
(18,114,0)
(861,625,0)
(994,7,0)
(612,541,0)
(207,984,0)
(358,2,0)
(427,654,0)
(798,888,0)
(200,229,0)
(324,558,0)
(530,718,0)
(615,957,0)
(578,902,0)
(875,715,0)
(954,554,0)
(399,333,0)
(11,150,0)
(393,748,0)
(418,104,0)
(791,122,0)
(483,148,0)
(401,794,0)
(725,957,0)
(186,155,0)
(883,227,0)
(598,221,0)
(252,443,0)
(196,360,0)
(970,387,0)
(95,159,0)
(580,950,0)
(833,458,0)
(370,679,0)
(897,33,0)
(351,336,0)
(193,554,0)
(100,16,0)
(146,334,0)
(10,744,0)
(921,716,0)
(213,884,0)
(540,15,0)
(726,296,0)
(674,364,0)
(13,574,0)
(524,533,0)
(806,711,0)
(619,455,0)
(431,196,0)
(198,122,0)
(193,838,0)
(680,856,0)
(474,554,0)
(380,494,0)
(509,321,0)
(174,231,0)
(252,554,0)
(971,969,0)
(529,728,0)
(900,494,0)
(848,728,0)
(114,554,0)
(724,615,0)
(342,882,0)
(775,957,0)
(438,173,0)
(511,632,0)
(402,384,0)
(296,726,0)
(131,390,0)
(879,337,0)
(989,105,0)
(132,628,0)
(288,303,0)
(904,479,0)
(56,818,0)
(605,122,0)
(767,387,0)
(982,842,0)
(419,730,0)
(864,693,0)
(282,321,0)
(846,728,0)
(457,429,0)
(689,536,0)
(818,335,0)
(123,52,0)
(762,105,0)
(2,826,0)
(574,122,0)
(101,253,0)
(168,487,0)
(221,412,0)
(579,340,0)
(299,272,0)
(385,554,0)
(541,554,0)
(970,510,0)
(164,408,0)
(377,957,0)
(387,554,0)
(330,860,0)
(275,181,0)
(143,665,0)
(794,554,0)
(151,335,0)
(913,856,0)
(251,554,0)
(235,973,0)
(155,186,0)
(646,290,0)
(234,994,0)
(587,200,0)
(229,979,0)
(417,122,0)
(495,632,0)
(828,714,0)
(608,957,0)
(885,303,0)
(761,368,0)
(968,270,0)
(570,154,0)
(663,122,0)
(733,884,0)
(240,796,0)
(879,104,0)
(435,693,0)
(703,764,0)
(53,310,0)
(868,440,0)
(95,49,0)
(939,414,0)
(692,554,0)
(726,880,0)
(417,751,0)
(729,559,0)
(510,970,0)
(860,678,0)
(253,101,0)
(860,781,0)
(859,494,0)
(577,122,0)
(49,95,0)
(176,122,0)
(734,569,0)
(992,632,0)
(761,548,0)
(307,701,0)
(173,890,0)
(872,463,0)
(33,897,0)
(961,694,0)
(65,700,0)
(494,168,0)
(182,869,0)
(511,337,0)
(4,954,0)
(77,162,0)
(520,574,0)
(413,983,0)
(139,986,0)
(927,289,0)
(505,39,0)
(908,494,0)
(443,252,0)
(149,337,0)
(809,800,0)
(460,554,0)
(382,633,0)
(119,205,0)
(931,957,0)
(168,584,0)
(979,164,0)
(426,559,0)
(960,897,0)
(209,11,0)
(826,122,0)
(1,458,0)
(142,888,0)
(623,99,0)
(430,849,0)
(923,175,0)
(398,460,0)
(679,554,0)
(950,714,0)
(653,970,0)
(39,606,0)
(975,826,0)
(175,205,0)
(205,522,0)
(670,899,0)
(424,330,0)
(147,471,0)
(680,494,0)
(322,218,0)
(116,395,0)
(865,44,0)
(843,626,0)
(958,554,0)
(964,86,0)
(712,156,0)
(517,122,0)
(216,220,0)
(704,979,0)
(333,399,0)
(893,834,0)
(838,957,0)
(395,116,0)
(816,879,0)
(330,424,0)
(473,45,0)
(980,554,0)
(727,368,0)
(586,980,0)
(720,80,0)
(787,266,0)
(231,554,0)
(689,977,0)
(382,837,0)
(360,598,0)
(423,505,0)
(711,977,0)
(633,496,0)
(719,552,0)
(134,554,0)
(583,890,0)
(900,596,0)
(617,390,0)
(287,554,0)
(170,675,0)
(738,957,0)
(835,122,0)
(707,235,0)
(365,159,0)
(811,959,0)
(222,554,0)
(733,946,0)
(310,301,0)
(461,727,0)
(275,122,0)
(145,500,0)
(515,791,0)
(985,912,0)
(818,564,0)
(869,453,0)
(897,748,0)
(413,492,0)
(980,332,0)
(948,744,0)
(332,272,0)
(245,428,0)
(973,118,0)
(667,517,0)
(432,882,0)
(218,146,0)
(310,53,0)
(561,122,0)
(598,426,0)
(441,865,0)
(458,543,0)
(826,2,0)
(943,130,0)
(380,303,0)
(277,278,0)
(106,284,0)
(49,18,0)
(454,783,0)
(268,480,0)
(216,554,0)
(697,290,0)
(234,692,0)
(911,890,0)
(575,837,0)
(139,122,0)
(489,564,0)
(243,845,0)
(271,222,0)
(504,460,0)
(789,970,0)
(437,292,0)
(517,299,0)
(614,301,0)
(744,920,0)
(356,466,0)
(70,737,0)
(970,516,0)
(994,486,0)
(819,546,0)
(305,375,0)
(75,349,0)
(727,957,0)
(901,494,0)
(916,554,0)
(701,307,0)
(225,254,0)
(966,719,0)
(994,234,0)
(742,957,0)
(92,856,0)
(447,494,0)
(26,642,0)
(44,523,0)
(137,481,0)
(162,77,0)
(845,449,0)
(291,122,0)
(830,691,0)
(479,122,0)
(413,183,0)
(543,458,0)
(291,867,0)
(58,494,0)
(951,144,0)
(640,338,0)
(69,44,0)
(866,91,0)
(285,384,0)
(367,183,0)
(286,196,0)
(881,830,0)
(16,227,0)
(183,216,0)
(380,554,0)
(634,821,0)
(989,10,0)
(316,830,0)
(779,594,0)
(727,162,0)
(680,554,0)
(530,959,0)
(699,550,0)
(926,30,0)
(949,122,0)
(935,289,0)
(936,275,0)
(639,626,0)
(538,957,0)
(152,122,0)
(409,508,0)
(899,550,0)
(128,948,0)
(443,104,0)
(990,487,0)
(338,530,0)
(399,554,0)
(408,164,0)
(391,533,0)
(301,122,0)
(871,783,0)
(543,152,0)
(229,200,0)
(769,541,0)
(618,991,0)
(460,678,0)
(136,407,0)
(128,188,0)
(440,494,0)
(96,477,0)
(437,554,0)
(627,510,0)
(407,374,0)
(197,957,0)
(860,330,0)
(93,317,0)
(902,500,0)
(888,122,0)
(361,159,0)
(14,568,0)
(973,235,0)
(668,532,0)
(110,977,0)
(5,627,0)
(261,957,0)
(269,744,0)
(464,744,0)
(875,867,0)
(672,880,0)
(445,655,0)
(638,523,0)
(58,554,0)
(400,135,0)
(52,377,0)
(963,6,0)
(254,225,0)
(824,916,0)
(801,680,0)
(298,186,0)
(456,300,0)
(476,577,0)
(407,287,0)
(163,938,0)
(900,554,0)
(144,957,0)
(501,148,0)
(593,171,0)
(278,122,0)
(862,865,0)
(514,717,0)
(902,578,0)
(901,554,0)
(469,855,0)
(709,252,0)
(89,569,0)
(525,29,0)
(714,481,0)
(200,30,0)
(558,122,0)
(814,887,0)
(655,153,0)
(117,122,0)
(845,180,0)
(943,970,0)
(385,494,0)
(781,157,0)
(77,494,0)
(100,122,0)
(338,625,0)
(791,9,0)
(607,216,0)
(183,625,0)
(355,259,0)
(647,392,0)
(352,908,0)
(84,436,0)
(222,254,0)
(447,260,0)
(571,900,0)
(535,337,0)
(107,39,0)
(111,474,0)
(793,958,0)
(857,470,0)
(779,880,0)
(694,182,0)
(199,816,0)
(30,200,0)
(828,892,0)
(140,385,0)
(584,657,0)
(970,572,0)
(112,621,0)
(354,836,0)
(241,957,0)
(763,905,0)
(980,494,0)
(887,814,0)
(218,122,0)
(599,550,0)
(876,120,0)
(470,554,0)
(730,494,0)
(49,986,0)
(859,389,0)
(221,598,0)
(8,327,0)
(776,800,0)
(356,75,0)
(601,101,0)
(381,193,0)
(249,783,0)
(255,240,0)
(492,865,0)
(384,285,0)
(235,494,0)
(528,980,0)
(283,334,0)
(910,27,0)
(577,578,0)
(753,837,0)
(874,950,0)
(932,501,0)
(159,95,0)
(700,554,0)
(91,86,0)
(556,11,0)
(215,437,0)
(179,474,0)
(91,866,0)
(14,849,0)
(404,157,0)
(293,498,0)
(0,593,0)
(98,77,0)
(947,554,0)
(950,580,0)
(284,787,0)
(955,970,0)
(102,596,0)
(589,463,0)
(537,122,0)
(391,9,0)
(482,67,0)
(677,955,0)
(686,23,0)
(346,148,0)
(739,172,0)
(977,849,0)
(912,122,0)
(390,494,0)
(859,554,0)
(624,349,0)
(124,205,0)
(653,400,0)
(500,494,0)
(289,589,0)
(156,122,0)
(622,834,0)
(842,270,0)
(848,244,0)
(835,180,0)
(222,494,0)
(661,715,0)
(15,122,0)
(171,809,0)
(589,289,0)
(682,288,0)
(17,122,0)
(654,427,0)
(18,49,0)
(168,827,0)
(440,554,0)
(489,27,0)
(940,118,0)
(514,86,0)
(544,58,0)
(867,875,0)
(684,86,0)
(59,17,0)
(80,122,0)
(214,557,0)
(53,455,0)
(851,494,0)
(792,122,0)
(553,554,0)
(104,879,0)
(87,428,0)
(760,270,0)
(773,450,0)
(413,175,0)
(341,29,0)
(321,282,0)
(823,756,0)
(384,122,0)
(652,23,0)
(723,554,0)
(150,880,0)
(795,517,0)
(653,624,0)
(671,942,0)
(9,791,0)
(660,678,0)
(819,836,0)
(259,122,0)
(252,494,0)
(758,700,0)
(723,494,0)
(808,447,0)
(881,337,0)
(751,417,0)
(463,872,0)
(272,332,0)
(272,358,0)
(561,244,0)
(427,168,0)
(340,579,0)
(779,723,0)
(532,554,0)
(171,593,0)
(251,317,0)
(306,452,0)
(895,797,0)
(546,558,0)
(834,516,0)
(173,833,0)
(56,122,0)
(264,80,0)
(700,494,0)
(374,407,0)
(952,508,0)
(173,438,0)
(748,897,0)
(492,118,0)
(347,86,0)
(452,208,0)
(676,188,0)
(455,53,0)
(62,633,0)
(778,337,0)
(983,849,0)
(714,957,0)
(47,252,0)
(696,984,0)
(99,3,0)
(518,172,0)
(516,970,0)
(773,540,0)
(756,122,0)
(231,174,0)
(942,564,0)
(827,168,0)
(511,477,0)
(506,253,0)
(537,925,0)
(825,176,0)
(175,693,0)
(948,128,0)
(749,9,0)
(855,554,0)
(620,842,0)
(965,408,0)
(716,179,0)
(582,569,0)
(863,359,0)
(455,619,0)
(679,154,0)
(78,122,0)
(176,273,0)
(266,787,0)
(551,794,0)
(970,833,0)
(193,494,0)
(654,122,0)
(783,554,0)
(448,23,0)
(548,851,0)
(527,954,0)
(818,161,0)
(413,940,0)
(57,191,0)
(505,554,0)
(503,281,0)
(74,466,0)
(302,130,0)
(560,677,0)
(970,653,0)
(901,616,0)
(602,114,0)
(740,15,0)
(325,916,0)
(478,29,0)
(281,122,0)
(30,926,0)
(452,122,0)
(855,494,0)
(659,656,0)
(852,117,0)
(610,957,0)
(106,970,0)
(756,935,0)
(426,598,0)
(486,391,0)
(786,214,0)
(557,337,0)
(465,964,0)
(540,773,0)
(970,106,0)
(94,554,0)
(886,621,0)
(615,467,0)
(988,655,0)
(768,239,0)
(750,354,0)
(37,674,0)
(656,613,0)
(502,108,0)
(205,554,0)
(464,606,0)
(715,33,0)
(386,297,0)
(928,395,0)
(559,122,0)
(287,407,0)
(719,150,0)
(466,122,0)
(886,227,0)
(43,826,0)
(486,905,0)
(842,620,0)
(940,600,0)
(395,106,0)
(360,196,0)
(548,761,0)
(522,693,0)
(947,494,0)
(187,384,0)
(993,554,0)
(642,557,0)
(541,429,0)
(633,382,0)
(547,88,0)
(616,214,0)
(938,157,0)
(73,358,0)
(178,600,0)
(925,537,0)
(390,554,0)
(334,146,0)
(991,771,0)
(780,232,0)
(242,479,0)
(946,733,0)
(784,301,0)
(915,948,0)
(898,6,0)
(648,294,0)
(400,653,0)
(294,648,0)
(569,89,0)
(991,116,0)
(894,993,0)
(21,52,0)
(970,897,0)
(341,665,0)
(333,91,0)
(188,128,0)
(664,658,0)
(280,386,0)
(770,259,0)
(947,828,0)
(265,628,0)
(559,426,0)
(539,53,0)
(408,554,0)
(385,307,0)
(827,122,0)
(226,838,0)
(592,449,0)
(594,779,0)
(23,554,0)
(621,554,0)
(317,251,0)
(305,746,0)
(425,554,0)
(833,173,0)
(114,18,0)
(717,122,0)
(986,139,0)
(627,122,0)
(148,501,0)
(766,926,0)
(939,451,0)
(106,395,0)
(437,494,0)
(46,380,0)
(155,436,0)
(631,414,0)
(71,278,0)
(31,663,0)
(220,625,0)
(959,554,0)
(741,382,0)
(179,716,0)
(558,546,0)
(113,654,0)
(624,653,0)
(837,382,0)
(42,57,0)
(81,993,0)
(19,723,0)
(274,594,0)
(792,883,0)
(941,500,0)
(64,122,0)
(422,717,0)
(269,154,0)
(133,176,0)
(266,712,0)
(177,164,0)
(929,225,0)
(12,737,0)
(781,860,0)
(771,991,0)
(448,600,0)
(830,881,0)
(230,117,0)
(532,83,0)
(63,281,0)
(818,56,0)
(545,134,0)
(970,955,0)
(969,494,0)
(576,399,0)
(82,321,0)
(925,535,0)
(499,970,0)
(796,240,0)
(569,554,0)
(294,270,0)
(977,689,0)
(574,992,0)
(948,839,0)
(118,103,0)
(451,939,0)
(549,439,0)
(600,448,0)
(57,122,0)
(958,793,0)
(888,91,0)
(109,297,0)
(986,49,0)
(538,793,0)
(790,584,0)
(492,564,0)
(449,293,0)
(392,726,0)
(813,855,0)
(296,353,0)
(267,538,0)
(94,203,0)
(809,171,0)
(604,787,0)
(319,993,0)
(882,494,0)
(691,737,0)
(284,106,0)
(542,714,0)
(854,680,0)
(484,835,0)
(533,916,0)
(428,535,0)
(949,66,0)
(526,926,0)
(407,136,0)
(118,973,0)
(669,505,0)
(451,554,0)
(685,272,0)
(212,130,0)
(282,642,0)
(161,553,0)
(235,554,0)
(856,92,0)
(645,663,0)
(760,459,0)
(492,11,0)
(144,855,0)
(788,949,0)
(782,559,0)
(169,64,0)
(597,764,0)
(239,92,0)
(954,718,0)
(230,336,0)
(64,267,0)
(101,471,0)
(254,222,0)
(194,968,0)
(681,827,0)
(38,94,0)
(678,460,0)
(83,532,0)
(735,220,0)
(648,364,0)
(803,89,0)
(890,173,0)
(359,122,0)
(328,86,0)
(848,160,0)
(321,122,0)
(730,554,0)
(772,470,0)
(153,655,0)
(513,60,1)
(89,569,1)
(32,114,1)
(559,782,1)
(553,918,1)
(207,696,1)
(807,279,1)
(191,644,1)
(563,818,1)
(79,432,1)
(840,557,1)
(339,694,1)
(609,560,1)
(824,524,1)
(231,554,1)
(921,165,1)
(530,959,1)
(335,151,1)
(351,230,1)
(95,159,1)
(155,186,1)
(689,757,1)
(401,424,1)
(73,902,1)
(434,280,1)
(252,494,1)
(309,461,1)
(470,554,1)
(413,183,1)
(452,122,1)
(935,756,1)
(381,144,1)
(193,588,1)
(385,554,1)
(792,379,1)
(871,783,1)
(579,340,1)
(23,494,1)
(306,934,1)
(49,95,1)
(140,511,1)
(721,894,1)
(798,142,1)
(382,741,1)
(187,225,1)
(106,395,1)
(465,508,1)
(104,418,1)
(278,277,1)
(620,842,1)
(176,825,1)
(991,618,1)
(223,675,1)
(626,554,1)
(902,500,1)
(928,116,1)
(170,68,1)
(553,554,1)
(282,321,1)
(336,230,1)
(307,385,1)
(476,870,1)
(202,427,1)
(698,113,1)
(594,274,1)
(406,909,1)
(586,358,1)
(679,370,1)
(598,426,1)
(938,50,1)
(266,531,1)
(15,740,1)
(949,122,1)
(942,671,1)
(583,911,1)
(92,666,1)
(952,409,1)
(297,386,1)
(451,695,1)
(498,293,1)
(577,476,1)
(262,474,1)
(502,475,1)
(342,662,1)
(164,408,1)
(695,204,1)
(13,520,1)
(410,458,1)
(173,438,1)
(408,812,1)
(842,270,1)
(1,543,1)
(858,890,1)
(83,532,1)
(61,585,1)
(977,689,1)
(653,400,1)
(391,9,1)
(440,396,1)
(974,189,1)
(927,935,1)
(394,544,1)
(276,858,1)
(0,171,1)
(39,505,1)
(101,601,1)
(300,358,1)
(279,690,1)
(245,134,1)
(639,297,1)
(271,840,1)
(527,959,1)
(660,460,1)
(346,483,1)
(977,711,1)
(129,10,1)
(964,465,1)
(284,787,1)
(981,191,1)
(468,455,1)
(685,300,1)
(110,236,1)
(853,188,1)
(737,494,1)
(699,550,1)
(919,148,1)
(421,307,1)
(561,141,1)
(658,972,1)
(968,270,1)
(148,346,1)
(491,867,1)
(559,122,1)
(273,176,1)
(303,380,1)
(756,122,1)
(75,356,1)
(598,360,1)
(361,986,1)
(897,33,1)
(727,162,1)
(168,487,1)
(550,899,1)
(779,126,1)
(171,809,1)
(616,901,1)
(162,77,1)
(455,903,1)
(97,428,1)
(318,49,1)
(103,336,1)
(34,203,1)
(628,265,1)
(689,536,1)
(449,845,1)
(504,330,1)
(717,122,1)
(958,906,1)
(123,610,1)
(725,278,1)
(793,958,1)
(357,255,1)
(787,604,1)
(538,793,1)
(654,698,1)
(147,101,1)
(383,884,1)
(239,273,1)
(915,606,1)
(56,878,1)
(830,316,1)
(53,310,1)
(772,470,1)
(662,510,1)
(442,821,1)
(968,194,1)
(496,55,1)
(533,916,1)
(743,14,1)
(593,0,1)
(144,855,1)
(940,326,1)
(332,272,1)
(112,378,1)
(544,260,1)
(924,213,1)
(130,122,1)
(838,193,1)
(234,692,1)
(990,190,1)
(133,680,1)
(196,431,1)
(683,971,1)
(855,469,1)
(517,667,1)
(505,554,1)
(117,122,1)
(534,254,1)
(548,851,1)
(474,554,1)
(453,984,1)
(366,841,1)
(359,122,1)
(908,28,1)
(159,365,1)
(29,122,1)
(82,214,1)
(970,572,1)
(369,716,1)
(610,969,1)
(31,645,1)
(993,81,1)
(704,164,1)
(970,439,1)
(633,62,1)
(47,709,1)
(360,196,1)
(29,478,1)
(24,246,1)
(400,256,1)
(161,553,1)
(169,323,1)
(541,554,1)
(252,554,1)
(363,215,1)
(773,540,1)
(291,122,1)
(272,300,1)
(222,494,1)
(493,830,1)
(384,122,1)
(30,329,1)
(181,275,1)
(380,46,1)
(888,798,1)
(640,7,1)
(462,619,1)
(963,898,1)
(565,442,1)
(900,571,1)
(571,415,1)
(719,966,1)
(712,156,1)
(597,305,1)
(979,704,1)
(107,505,1)
(67,153,1)
(359,863,1)
(377,52,1)
(985,977,1)
(471,101,1)
(320,395,1)
(130,212,1)
(27,270,1)
(604,266,1)
(678,660,1)
(305,375,1)
(75,930,1)
(958,554,1)
(984,207,1)
(909,512,1)
(856,92,1)
(386,434,1)
(910,942,1)
(574,13,1)
(166,647,1)
(285,384,1)
(545,822,1)
(159,122,1)
(178,448,1)
(455,53,1)
(436,223,1)
(911,458,1)
(296,353,1)
(104,443,1)
(313,787,1)
(437,554,1)
(912,343,1)
(118,754,1)
(57,122,1)
(614,784,1)
(970,510,1)
(317,93,1)
(440,554,1)
(549,425,1)
(368,761,1)
(154,679,1)
(947,554,1)
(789,499,1)
(417,211,1)
(613,656,1)
(568,34,1)
(291,41,1)
(216,607,1)
(626,494,1)
(117,852,1)
(830,691,1)
(198,122,1)
(771,605,1)
(834,893,1)
(697,290,1)
(128,853,1)
(349,125,1)
(588,381,1)
(492,118,1)
(728,494,1)
(492,563,1)
(55,699,1)
(418,443,1)
(629,947,1)
(573,755,1)
(702,727,1)
(490,970,1)
(769,457,1)
(925,537,1)
(777,387,1)
(900,494,1)
(989,810,1)
(730,554,1)
(764,554,1)
(940,730,1)
(249,454,1)
(389,859,1)
(463,589,1)
(828,714,1)
(686,881,1)
(9,749,1)
(78,974,1)
(319,317,1)
(988,579,1)
(290,122,1)
(816,199,1)
(783,554,1)
(96,292,1)
(869,953,1)
(415,259,1)
(22,584,1)
(912,122,1)
(947,494,1)
(926,554,1)
(348,66,1)
(473,796,1)
(507,591,1)
(630,198,1)
(511,477,1)
(72,24,1)
(38,268,1)
(804,624,1)
(27,910,1)
(352,240,1)
(622,955,1)
(281,122,1)
(479,122,1)
(619,455,1)
(801,854,1)
(779,594,1)
(761,548,1)
(301,614,1)
(50,163,1)
(652,686,1)
(399,555,1)
(739,518,1)
(208,452,1)
(94,554,1)
(222,554,1)
(489,27,1)
(100,122,1)
(555,576,1)
(2,826,1)
(87,245,1)
(874,714,1)
(642,26,1)
(970,516,1)
(767,981,1)
(84,223,1)
(213,91,1)
(143,341,1)
(157,938,1)
(972,664,1)
(200,587,1)
(835,122,1)
(956,260,1)
(530,718,1)
(156,122,1)
(252,47,1)
(193,554,1)
(888,122,1)
(128,188,1)
(193,494,1)
(321,509,1)
(618,771,1)
(860,330,1)
(791,637,1)
(402,187,1)
(653,804,1)
(451,494,1)
(684,508,1)
(304,826,1)
(589,289,1)
(865,554,1)
(854,872,1)
(201,954,1)
(876,764,1)
(812,965,1)
(946,733,1)
(937,97,1)
(760,736,1)
(666,239,1)
(385,562,1)
(46,847,1)
(94,238,1)
(44,69,1)
(257,349,1)
(659,192,1)
(637,515,1)
(403,16,1)
(814,628,1)
(748,593,1)
(499,403,1)
(428,245,1)
(680,554,1)
(141,40,1)
(859,406,1)
(497,83,1)
(303,108,1)
(244,561,1)
(150,719,1)
(890,583,1)
(7,994,1)
(696,376,1)
(292,437,1)
(585,374,1)
(4,527,1)
(663,122,1)
(864,968,1)
(654,122,1)
(246,229,1)
(970,943,1)
(448,23,1)
(970,833,1)
(387,767,1)
(663,31,1)
(844,697,1)
(390,554,1)
(728,846,1)
(535,428,1)
(53,539,1)
(479,904,1)
(656,659,1)
(286,426,1)
(232,181,1)
(137,78,1)
(753,55,1)
(642,282,1)
(818,335,1)
(311,496,1)
(317,251,1)
(451,554,1)
(605,122,1)
(433,869,1)
(297,109,1)
(278,122,1)
(142,308,1)
(483,39,1)
(439,425,1)
(711,554,1)
(260,447,1)
(631,440,1)
(218,322,1)
(943,130,1)
(11,556,1)
(248,45,1)
(412,221,1)
(16,626,1)
(254,222,1)
(215,149,1)
(852,922,1)
(438,276,1)
(275,936,1)
(675,170,1)
(179,716,1)
(671,871,1)
(866,366,1)
(729,872,1)
(477,96,1)
(525,701,1)
(856,680,1)
(969,554,1)
(835,820,1)
(701,307,1)
(287,554,1)
(787,266,1)
(596,900,1)
(225,534,1)
(460,554,1)
(312,932,1)
(62,382,1)
(579,747,1)
(748,393,1)
(831,946,1)
(367,459,1)
(723,19,1)
(105,554,1)
(478,525,1)
(327,85,1)
(600,178,1)
(783,249,1)
(52,122,1)
(612,769,1)
(253,506,1)
(407,287,1)
(390,494,1)
(668,490,1)
(69,865,1)
(846,529,1)
(413,983,1)
(88,547,1)
(77,554,1)
(903,53,1)
(23,554,1)
(923,864,1)
(940,600,1)
(106,224,1)
(404,938,1)
(108,327,1)
(33,344,1)
(443,252,1)
(429,541,1)
(56,122,1)
(899,554,1)
(408,554,1)
(68,186,1)
(619,468,1)
(272,299,1)
(124,889,1)
(918,295,1)
(464,744,1)
(749,791,1)
(511,632,1)
(932,501,1)
(694,182,1)
(341,29,1)
(264,80,1)
(6,963,1)
(841,888,1)
(192,104,1)
(256,135,1)
(615,467,1)
(906,891,1)
(881,232,1)
(267,64,1)
(817,502,1)
(238,38,1)
(101,253,1)
(701,421,1)
(232,780,1)
(134,494,1)
(218,122,1)
(158,79,1)
(41,765,1)
(239,768,1)
(557,214,1)
(745,234,1)
(577,122,1)
(321,122,1)
(427,654,1)
(300,456,1)
(458,543,1)
(774,264,1)
(800,581,1)
(344,715,1)
(580,950,1)
(575,753,1)
(288,303,1)
(127,670,1)
(752,353,1)
(692,944,1)
(532,494,1)
(328,172,1)
(961,182,1)
(578,577,1)
(58,494,1)
(847,682,1)
(724,636,1)
(904,242,1)
(58,394,1)
(776,33,1)
(265,132,1)
(299,517,1)
(9,791,1)
(272,685,1)
(940,392,1)
(3,565,1)
(869,453,1)
(546,558,1)
(30,926,1)
(828,947,1)
(411,809,1)
(908,494,1)
(365,361,1)
(409,773,1)
(156,566,1)
(966,552,1)
(827,122,1)
(950,714,1)
(899,127,1)
(416,602,1)
(646,338,1)
(857,702,1)
(393,593,1)
(826,43,1)
(875,867,1)
(723,554,1)
(850,157,1)
(206,905,1)
(862,412,1)
(237,449,1)
(821,634,1)
(66,949,1)
(225,254,1)
(114,494,1)
(250,883,1)
(487,990,1)
(542,332,1)
(500,554,1)
(467,554,1)
(233,730,1)
(70,12,1)
(272,358,1)
(457,35,1)
(182,869,1)
(423,669,1)
(470,494,1)
(591,530,1)
(658,122,1)
(514,717,1)
(747,340,1)
(768,273,1)
(541,612,1)
(781,157,1)
(148,554,1)
(736,220,1)
(882,554,1)
(779,723,1)
(139,687,1)
(884,924,1)
(851,494,1)
(280,288,1)
(444,600,1)
(691,737,1)
(969,683,1)
(882,494,1)
(7,894,1)
(74,420,1)
(970,106,1)
(582,722,1)
(116,987,1)
(536,917,1)
(953,453,1)
(378,250,1)
(913,92,1)
(64,169,1)
(989,105,1)
(665,341,1)
(303,885,1)
(195,485,1)
(145,248,1)
(865,441,1)
(726,296,1)
(194,522,1)
(277,71,1)
(211,759,1)
(896,836,1)
(765,498,1)
(744,269,1)
(100,185,1)
(440,494,1)
(81,319,1)
(505,423,1)
(510,627,1)
(246,699,1)
(413,940,1)
(334,283,1)
(470,857,1)
(843,639,1)
(813,259,1)
(335,554,1)
(396,868,1)
(718,201,1)
(887,814,1)
(17,122,1)
(517,122,1)
(684,730,1)
(379,497,1)
(567,112,1)
(509,82,1)
(251,635,1)
(54,572,1)
(979,164,1)
(439,549,1)
(731,808,1)
(106,284,1)
(229,200,1)
(938,554,1)
(35,229,1)
(648,294,1)
(597,208,1)
(607,844,1)
(926,766,1)
(481,78,1)
(136,246,1)
(900,554,1)
(93,251,1)
(199,613,1)
(236,136,1)
(374,72,1)
(324,896,1)
(135,334,1)
(287,61,1)
(680,801,1)
(80,122,1)
(528,586,1)
(766,526,1)
(723,494,1)
(626,843,1)
(845,243,1)
(886,621,1)
(459,760,1)
(308,479,1)
(940,817,1)
(188,554,1)
(584,219,1)
(495,992,1)
(460,398,1)
(823,339,1)
(134,554,1)
(879,816,1)
(627,331,1)
(684,817,1)
(522,76,1)
(632,992,1)
(872,463,1)
(917,967,1)
(788,956,1)
(955,677,1)
(617,131,1)
(818,161,1)
(152,122,1)
(492,392,1)
(615,724,1)
(590,473,1)
(466,122,1)
(574,122,1)
(520,477,1)
(581,776,1)
(730,419,1)
(125,75,1)
(895,167,1)
(692,554,1)
(837,575,1)
(589,90,1)
(897,960,1)
(486,391,1)
(26,282,1)
(120,876,1)
(222,271,1)
(558,324,1)
(550,599,1)
(188,519,1)
(838,226,1)
(121,489,1)
(870,500,1)
(441,862,1)
(446,580,1)
(67,482,1)
(655,445,1)
(338,530,1)
(240,122,1)
(407,374,1)
(901,978,1)
(467,807,1)
(884,122,1)
(543,873,1)
(294,270,1)
(362,262,1)
(400,135,1)
(224,284,1)
(653,624,1)
(960,748,1)
(811,405,1)
(611,309,1)
(678,460,1)
(606,464,1)
(540,15,1)
(118,973,1)
(916,325,1)
(240,357,1)
(719,552,1)
(330,424,1)
(851,554,1)
(482,153,1)
(877,777,1)
(720,444,1)
(600,448,1)
(221,598,1)
(155,436,1)
(929,225,1)
(413,175,1)
(539,310,1)
(784,293,1)
(216,554,1)
(905,763,1)
(965,948,1)
(373,819,1)
(485,288,1)
(717,422,1)
(556,209,1)
(172,122,1)
(10,744,1)
(52,21,1)
(425,877,1)
(531,712,1)
(375,797,1)
(173,890,1)
(19,706,1)
(529,580,1)
(763,359,1)
(33,715,1)
(878,121,1)
(289,935,1)
(102,900,1)
(138,750,1)
(2,304,1)
(204,217,1)
(274,723,1)
(978,228,1)
(694,961,1)
(800,122,1)
(466,74,1)
(950,874,1)
(623,99,1)
(599,899,1)
(986,139,1)
(119,124,1)
(92,239,1)
(922,118,1)
(862,779,1)
(212,302,1)
(970,955,1)
(558,122,1)
(506,772,1)
(474,111,1)
(420,400,1)
(601,253,1)
(837,554,1)
(682,377,1)
(716,122,1)
(413,674,1)
(219,790,1)
(18,114,1)
(354,494,1)
(725,58,1)
(764,703,1)
(486,905,1)
(533,524,1)
(898,11,1)
(190,827,1)
(454,195,1)
(414,631,1)
(842,982,1)
(936,493,1)
(23,652,1)
(635,36,1)
(214,616,1)
(535,925,1)
(164,177,1)
(91,333,1)
(176,122,1)
(987,991,1)
(755,829,1)
(754,973,1)
(186,298,1)
(893,622,1)
(380,554,1)
(484,106,1)
(386,122,1)
(965,496,1)
(552,6,1)
(778,665,1)
(796,908,1)
(153,655,1)
(16,100,1)
(929,285,1)
(934,89,1)
(385,494,1)
(235,707,1)
(134,545,1)
(882,342,1)
(983,743,1)
(760,270,1)
(930,356,1)
(419,22,1)
(266,712,1)
(538,267,1)
(503,429,1)
(179,474,1)
(561,122,1)
(508,554,1)
(259,355,1)
(656,122,1)
(983,94,1)
(146,218,1)
(409,66,1)
(298,389,1)
(171,411,1)
(512,67,1)
(492,730,1)
(954,4,1)
(395,928,1)
(674,764,1)
(750,376,1)
(205,119,1)
(316,691,1)
(866,554,1)
(191,57,1)
(59,17,1)
(716,921,1)
(794,554,1)
(524,206,1)
(674,37,1)
(808,494,1)
(833,458,1)
(633,382,1)
(757,536,1)
(475,108,1)
(183,367,1)
(879,104,1)
(354,554,1)
(940,118,1)
(700,758,1)
(382,837,1)
(947,184,1)
(802,774,1)
(174,231,1)
(547,817,1)
(343,985,1)
(398,504,1)
(40,728,1)
(447,554,1)
(859,494,1)
(445,988,1)
(836,354,1)
(226,193,1)
(944,721,1)
(449,592,1)
(667,795,1)
(395,116,1)
(175,923,1)
(3,554,1)
(908,554,1)
(741,837,1)
(501,148,1)
(942,554,1)
(706,150,1)
(263,789,1)
(235,494,1)
(456,980,1)
(15,122,1)
(782,729,1)
(259,122,1)
(569,554,1)
(714,481,1)
(568,270,1)
(713,54,1)
(58,554,1)
(405,350,1)
(970,653,1)
(333,399,1)
(135,832,1)
(168,427,1)
(641,762,1)
(737,554,1)
(627,122,1)
(18,521,1)
(243,180,1)
(526,979,1)
(795,300,1)
(954,554,1)
(532,554,1)
(907,615,1)
(819,546,1)
(750,44,1)
(560,653,1)
(881,830,1)
(868,939,1)
(621,554,1)
(242,964,1)
(492,817,1)
(205,554,1)
(670,7,1)
(126,594,1)
(322,673,1)
(294,210,1)
(437,363,1)
(709,535,1)
(235,554,1)
(498,462,1)
(751,417,1)
(859,554,1)
(268,59,1)
(628,122,1)
(833,173,1)
(196,122,1)
(275,122,1)
(891,103,1)
(334,146,1)
(481,137,1)
(345,838,1)
(669,603,1)
(687,32,1)
(469,813,1)
(114,416,1)
(940,11,1)
(570,679,1)
(189,542,1)
(111,369,1)
(848,728,1)
(711,806,1)
(131,45,1)
(230,117,1)
(796,240,1)
(820,484,1)
(289,927,1)
(822,929,1)
(733,884,1)
(862,18,1)
(179,174,1)
(163,993,1)
(217,828,1)
(98,345,1)
(458,1,1)
(634,694,1)
(168,108,1)
(38,829,1)
(557,642,1)
(157,404,1)
(781,860,1)
(80,720,1)
(715,661,1)
(471,147,1)
(572,663,1)
(587,30,1)
(543,152,1)
(873,152,1)
(677,609,1)
(358,2,1)
(220,735,1)
(902,578,1)
(916,554,1)
(740,348,1)
(293,449,1)
(833,410,1)
(494,168,1)
(500,494,1)
(496,633,1)
(251,554,1)
(323,793,1)
(310,301,1)
(387,554,1)
(995,689,1)
(516,834,1)
(6,122,1)
(825,133,1)
(477,292,1)
(372,554,1)
(815,311,1)
(414,939,1)
(949,788,1)
(380,494,1)
(676,915,1)
(537,122,1)
(113,233,1)
(437,494,1)
(376,471,1)
(826,122,1)
(85,8,1)
(90,289,1)
(973,235,1)
(392,166,1)
(700,554,1)
(984,122,1)
(384,402,1)
(677,122,1)
(228,155,1)
(388,751,1)
(22,88,1)
(5,439,1)
(848,244,1)
(281,63,1)
(37,648,1)
(993,554,1)
(461,162,1)
(980,494,1)
(432,882,1)
(940,865,1)
(136,407,1)
(890,122,1)
(14,568,1)
(737,70,1)
(883,792,1)
(248,390,1)
(566,320,1)
(645,943,1)
(844,887,1)
(675,122,1)
(681,202,1)
(464,312,1)
(818,56,1)
(436,84,1)
(576,866,1)
(25,620,1)
(700,494,1)
(603,129,1)
(991,771,1)
(200,30,1)
(269,154,1)
(664,392,1)
(606,39,1)
(624,349,1)
(349,75,1)
(715,875,1)
(867,291,1)
(733,383,1)
(184,446,1)
(971,778,1)
(353,658,1)
(735,216,1)
(165,886,1)
(980,554,1)
(623,821,1)
(661,875,1)
(253,772,1)
(247,56,1)
(593,171,1)
(519,676,1)
(690,136,1)
(60,959,1)
(959,811,1)
(644,57,1)
(759,889,1)
(425,554,1)
(8,907,1)
(231,362,1)
(762,595,1)
(786,616,1)
(970,387,1)
(595,744,1)
(512,579,1)
(452,306,1)
(183,216,1)
(894,781,1)
(959,554,1)
(303,584,1)
(792,122,1)
(330,794,1)
(185,649,1)
(492,600,1)
(293,237,1)
(49,986,1)
(329,926,1)
(889,281,1)
(492,11,1)
(39,107,1)
(684,25,1)
(605,158,1)
(331,5,1)
(806,995,1)
(649,626,1)
(144,951,1)
(780,181,1)
(982,328,1)
(326,179,1)
(530,630,1)
(397,913,1)
(350,640,1)
(17,573,1)
(447,731,1)
(168,584,1)
(78,122,1)
(894,993,1)
(124,388,1)
(149,802,1)
(845,180,1)
(515,533,1)
(970,498,1)
(105,641,1)
(863,745,1)
(399,554,1)
(778,701,1)
(834,122,1)
(958,494,1)
(203,805,1)
(172,739,1)
(805,94,1)
(151,247,1)
(21,123,1)
(132,697,1)
(167,208,1)
(77,98,1)
(679,554,1)
(596,102,1)
(756,823,1)
(901,494,1)
(680,494,1)
(897,748,1)
(198,513,1)
(175,205,1)
(791,122,1)
(518,514,1)
(688,198,1)
(91,888,1)
(492,865,1)
(941,145,1)
(28,352,1)
(829,912,1)
(951,855,1)
(18,49,1)
(139,122,1)
(301,122,1)
(91,866,1)
(370,815,1)
(165,297,1)
(255,538,1)
(802,264,1)
(770,725,1)
(63,503,1)
(592,845,1)
(632,495,1)
(718,954,1)
(209,726,1)
(532,668,1)
(428,87,1)
(606,932,1)
(413,492,1)
(336,351,1)
(809,800,1)
(969,494,1)
(970,191,1)
(636,467,1)
(948,128,1)
(647,623,1)
(168,827,1)
(948,744,1)
(602,412,1)
(851,611,1)
(229,979,1)
(217,848,1)
(45,122,1)
(860,678,1)
(45,590,1)
(374,122,1)
(803,317,1)
(794,551,1)
(810,105,1)
(655,122,1)
(354,138,1)
(965,10,1)
(970,432,1)
(447,494,1)
(722,803,1)
(76,205,1)
(77,494,1)
(707,373,1)
(338,372,1)
(797,895,1)
(422,831,1)
(673,897,1)
(372,507,1)
(356,466,1)
(832,334,1)
(813,596,1)
(42,263,1)
(10,989,1)
(828,629,1)
(703,597,1)
(551,401,1)
(99,3,1)
(621,567,1)
(665,143,1)
(325,824,1)
(855,554,1)
(855,494,1)
(57,42,1)
(502,108,1)
(283,146,1)
(971,217,1)
(71,58,1)
(905,359,1)
(785,646,1)
(970,897,1)
(214,786,1)
(116,991,1)
(424,850,1)
(980,528,1)
(391,533,1)
(501,919,1)
(413,684,1)
(856,397,1)
(355,770,1)
(109,386,1)
(624,257,1)
(340,700,1)
(417,122,1)
(727,368,1)
(20,380,1)
(64,122,1)
(290,785,1)
(114,554,1)
(728,554,1)
(537,937,1)
(498,619,1)
(790,108,1)
(500,941,1)
(180,835,1)
(569,734,1)
(816,613,1)
(819,836,1)
(994,486,1)
(875,491,1)
(284,313,1)
(3,494,1)
(630,688,1)
(295,335,1)
(12,879,1)
(508,952,1)
(536,122,1)
(302,516,1)
(862,856,1)
(939,451,1)
(734,582,1)
(885,20,1)
(43,975,1)
(827,681,1)
(154,570,1)
(994,234,1)
(758,65,1)
(210,120,1)
(562,140,1)
(182,433,1)
(332,980,1)
(65,414,1)
(152,713,1)
(975,73,1)
(967,110,1)
(431,286,1)
(177,408,1)
(992,574,1)
(901,554,1)
(296,752,1)
(797,122,1)
(426,559,1)
(521,318,1)
(390,617,1)
(186,389,1)
(273,872,2)
(289,935,2)
(420,297,2)
(335,288,2)
(633,55,2)
(906,260,2)
(183,216,2)
(269,496,2)
(583,458,2)
(205,554,2)
(104,217,2)
(459,7,2)
(59,17,2)
(486,905,2)
(53,297,2)
(388,889,2)
(357,260,2)
(950,714,2)
(573,829,2)
(869,453,2)
(653,624,2)
(851,554,2)
(703,317,2)
(682,260,2)
(589,289,2)
(553,554,2)
(447,494,2)
(155,186,2)
(280,288,2)
(138,260,2)
(618,297,2)
(959,554,2)
(56,122,2)
(272,260,2)
(512,67,2)
(65,217,2)
(715,875,2)
(365,412,2)
(536,136,2)
(812,699,2)
(331,297,2)
(431,872,2)
(354,260,2)
(91,333,2)
(106,395,2)
(114,494,2)
(174,231,2)
(228,217,2)
(537,217,2)
(10,989,2)
(822,217,2)
(332,272,2)
(380,554,2)
(289,694,2)
(16,297,2)
(444,217,2)
(259,122,2)
(532,494,2)
(220,7,2)
(850,157,2)
(865,554,2)
(728,580,2)
(800,297,2)
(903,297,2)
(498,293,2)
(516,834,2)
(234,692,2)
(868,217,2)
(373,260,2)
(4,959,2)
(492,865,2)
(105,496,2)
(915,10,2)
(483,10,2)
(321,217,2)
(15,122,2)
(304,260,2)
(141,580,2)
(595,496,2)
(106,284,2)
(398,157,2)
(570,496,2)
(546,558,2)
(422,260,2)
(69,376,2)
(725,58,2)
(698,136,2)
(986,412,2)
(198,959,2)
(544,260,2)
(134,554,2)
(654,122,2)
(714,481,2)
(900,554,2)
(987,297,2)
(500,260,2)
(390,260,2)
(773,66,2)
(540,66,2)
(222,217,2)
(24,246,2)
(864,968,2)
(375,797,2)
(581,297,2)
(76,229,2)
(409,260,2)
(970,191,2)
(384,217,2)
(186,217,2)
(120,317,2)
(627,122,2)
(934,317,2)
(770,260,2)
(818,335,2)
(28,260,2)
(707,260,2)
(716,122,2)
(288,260,2)
(382,55,2)
(439,297,2)
(983,94,2)
(452,122,2)
(287,554,2)
(393,297,2)
(756,122,2)
(413,175,2)
(468,297,2)
(536,122,2)
(668,297,2)
(661,297,2)
(848,244,2)
(646,7,2)
(946,260,2)
(723,494,2)
(751,889,2)
(969,260,2)
(867,297,2)
(268,59,2)
(542,260,2)
(543,152,2)
(699,7,2)
(928,297,2)
(513,959,2)
(212,297,2)
(719,552,2)
(649,297,2)
(37,317,2)
(474,288,2)
(749,905,2)
(546,260,2)
(29,217,2)
(332,260,2)
(599,7,2)
(376,260,2)
(322,297,2)
(988,217,2)
(547,108,2)
(190,136,2)
(539,297,2)
(590,260,2)
(79,297,2)
(400,297,2)
(761,260,2)
(860,678,2)
(328,260,2)
(860,157,2)
(222,494,2)
(723,694,2)
(935,694,2)
(167,208,2)
(297,288,2)
(191,57,2)
(636,136,2)
(500,494,2)
(558,260,2)
(334,146,2)
(473,260,2)
(792,122,2)
(229,979,2)
(321,122,2)
(22,136,2)
(231,554,2)
(562,217,2)
(425,554,2)
(580,260,2)
(907,136,2)
(909,217,2)
(428,245,2)
(361,412,2)
(340,217,2)
(300,358,2)
(2,260,2)
(921,288,2)
(614,297,2)
(865,376,2)
(806,136,2)
(845,180,2)
(553,288,2)
(837,55,2)
(886,297,2)
(386,288,2)
(132,697,2)
(875,867,2)
(492,288,2)
(358,2,2)
(530,7,2)
(145,260,2)
(252,554,2)
(929,285,2)
(630,198,2)
(234,894,2)
(856,92,2)
(341,217,2)
(935,756,2)
(469,260,2)
(478,217,2)
(290,7,2)
(443,217,2)
(368,260,2)
(477,292,2)
(673,297,2)
(225,254,2)
(977,136,2)
(891,260,2)
(489,288,2)
(140,217,2)
(818,56,2)
(908,260,2)
(937,217,2)
(168,108,2)
(648,317,2)
(59,829,2)
(396,217,2)
(679,496,2)
(272,300,2)
(576,260,2)
(658,122,2)
(52,260,2)
(64,122,2)
(275,217,2)
(256,297,2)
(179,716,2)
(788,260,2)
(374,122,2)
(899,7,2)
(878,288,2)
(376,471,2)
(75,297,2)
(821,694,2)
(549,297,2)
(90,694,2)
(734,317,2)
(324,260,2)
(697,7,2)
(350,7,2)
(496,699,2)
(333,260,2)
(943,297,2)
(970,439,2)
(575,55,2)
(922,260,2)
(96,217,2)
(320,297,2)
(533,524,2)
(715,297,2)
(634,694,2)
(407,246,2)
(793,958,2)
(940,288,2)
(54,297,2)
(748,297,2)
(616,217,2)
(620,842,2)
(464,10,2)
(535,217,2)
(631,440,2)
(803,317,2)
(552,694,2)
(457,229,2)
(432,882,2)
(477,217,2)
(802,264,2)
(494,136,2)
(794,554,2)
(338,7,2)
(62,55,2)
(410,458,2)
(82,217,2)
(466,297,2)
(426,872,2)
(970,653,2)
(511,632,2)
(139,412,2)
(20,260,2)
(532,554,2)
(901,494,2)
(200,30,2)
(463,589,2)
(755,829,2)
(199,217,2)
(588,260,2)
(517,300,2)
(535,428,2)
(686,217,2)
(665,341,2)
(208,317,2)
(427,136,2)
(23,494,2)
(204,217,2)
(374,246,2)
(787,266,2)
(153,217,2)
(356,466,2)
(835,297,2)
(714,260,2)
(130,297,2)
(601,260,2)
(949,260,2)
(641,496,2)
(351,260,2)
(492,600,2)
(939,451,2)
(971,260,2)
(300,260,2)
(627,297,2)
(479,122,2)
(936,217,2)
(994,486,2)
(238,136,2)
(382,837,2)
(152,297,2)
(57,122,2)
(470,554,2)
(370,496,2)
(222,554,2)
(118,973,2)
(567,297,2)
(656,217,2)
(855,260,2)
(875,297,2)
(994,894,2)
(565,694,2)
(606,464,2)
(723,554,2)
(560,297,2)
(464,744,2)
(112,297,2)
(188,554,2)
(470,260,2)
(245,217,2)
(353,658,2)
(727,162,2)
(336,230,2)
(18,114,2)
(229,699,2)
(240,260,2)
(308,479,2)
(211,889,2)
(221,872,2)
(745,234,2)
(866,554,2)
(902,260,2)
(630,959,2)
(889,229,2)
(349,297,2)
(329,979,2)
(154,496,2)
(559,122,2)
(769,229,2)
(834,122,2)
(326,288,2)
(309,260,2)
(248,390,2)
(555,260,2)
(978,217,2)
(814,628,2)
(100,122,2)
(607,7,2)
(163,993,2)
(831,260,2)
(626,494,2)
(550,899,2)
(451,554,2)
(582,317,2)
(731,136,2)
(330,794,2)
(91,888,2)
(299,517,2)
(294,270,2)
(205,229,2)
(884,260,2)
(164,699,2)
(720,217,2)
(623,694,2)
(5,297,2)
(384,122,2)
(218,297,2)
(135,297,2)
(779,694,2)
(34,136,2)
(498,297,2)
(433,376,2)
(844,7,2)
(700,554,2)
(609,297,2)
(440,494,2)
(947,554,2)
(955,297,2)
(859,554,2)
(669,10,2)
(701,217,2)
(101,253,2)
(176,122,2)
(78,122,2)
(691,217,2)
(684,730,2)
(474,554,2)
(846,580,2)
(110,136,2)
(613,656,2)
(417,889,2)
(423,10,2)
(681,136,2)
(556,694,2)
(501,148,2)
(390,494,2)
(225,217,2)
(888,260,2)
(808,136,2)
(883,297,2)
(67,153,2)
(819,546,2)
(833,173,2)
(485,288,2)
(983,136,2)
(353,694,2)
(411,297,2)
(30,926,2)
(67,217,2)
(852,260,2)
(926,979,2)
(680,494,2)
(514,260,2)
(623,821,2)
(882,494,2)
(291,297,2)
(970,106,2)
(525,217,2)
(283,297,2)
(387,297,2)
(1,297,2)
(683,260,2)
(131,260,2)
(942,288,2)
(108,136,2)
(316,217,2)
(101,260,2)
(437,554,2)
(606,932,2)
(678,157,2)
(330,157,2)
(574,122,2)
(41,297,2)
(481,78,2)
(91,866,2)
(728,554,2)
(57,297,2)
(246,699,2)
(83,297,2)
(690,136,2)
(498,619,2)
(429,229,2)
(240,122,2)
(45,260,2)
(819,836,2)
(952,260,2)
(510,627,2)
(414,631,2)
(624,349,2)
(209,694,2)
(342,297,2)
(116,297,2)
(783,288,2)
(378,297,2)
(727,368,2)
(334,297,2)
(192,217,2)
(694,182,2)
(130,122,2)
(784,297,2)
(449,845,2)
(817,108,2)
(159,412,2)
(6,694,2)
(6,122,2)
(960,297,2)
(679,554,2)
(827,136,2)
(824,905,2)
(236,136,2)
(75,356,2)
(725,278,2)
(692,554,2)
(969,494,2)
(840,217,2)
(829,912,2)
(18,49,2)
(717,260,2)
(993,554,2)
(901,554,2)
(511,217,2)
(644,297,2)
(533,905,2)
(2,826,2)
(670,7,2)
(613,217,2)
(380,260,2)
(538,267,2)
(15,66,2)
(441,376,2)
(354,554,2)
(165,288,2)
(602,412,2)
(653,400,2)
(305,375,2)
(980,260,2)
(919,10,2)
(603,10,2)
(303,584,2)
(27,270,2)
(881,830,2)
(496,633,2)
(655,122,2)
(60,959,2)
(574,217,2)
(760,270,2)
(207,376,2)
(916,554,2)
(298,217,2)
(78,260,2)
(716,288,2)
(187,217,2)
(701,307,2)
(566,297,2)
(548,260,2)
(963,694,2)
(269,154,2)
(354,494,2)
(367,7,2)
(680,554,2)
(100,297,2)
(631,217,2)
(471,101,2)
(385,217,2)
(558,122,2)
(128,188,2)
(557,214,2)
(244,561,2)
(449,297,2)
(447,554,2)
(764,317,2)
(292,437,2)
(502,108,2)
(438,458,2)
(833,297,2)
(730,136,2)
(995,136,2)
(124,229,2)
(867,291,2)
(333,399,2)
(125,297,2)
(206,905,2)
(159,122,2)
(958,494,2)
(278,122,2)
(533,916,2)
(765,297,2)
(113,136,2)
(439,425,2)
(617,260,2)
(134,494,2)
(940,817,2)
(40,580,2)
(102,259,2)
(977,711,2)
(413,183,2)
(66,260,2)
(257,297,2)
(25,260,2)
(175,229,2)
(278,260,2)
(828,947,2)
(296,694,2)
(797,122,2)
(925,217,2)
(924,260,2)
(870,260,2)
(748,593,2)
(389,217,2)
(932,10,2)
(809,800,2)
(571,259,2)
(95,159,2)
(272,299,2)
(791,905,2)
(561,580,2)
(854,872,2)
(985,136,2)
(440,554,2)
(224,297,2)
(168,487,2)
(508,554,2)
(947,494,2)
(744,269,2)
(505,10,2)
(550,7,2)
(377,52,2)
(114,554,2)
(528,260,2)
(772,470,2)
(492,392,2)
(11,694,2)
(860,330,2)
(653,297,2)
(757,136,2)
(948,744,2)
(146,218,2)
(594,694,2)
(908,494,2)
(202,136,2)
(836,260,2)
(699,550,2)
(685,300,2)
(43,260,2)
(259,260,2)
(143,217,2)
(157,993,2)
(407,287,2)
(786,217,2)
(857,260,2)
(8,136,2)
(413,684,2)
(482,217,2)
(766,979,2)
(499,297,2)
(615,467,2)
(772,260,2)
(297,386,2)
(940,600,2)
(968,270,2)
(704,699,2)
(247,288,2)
(980,554,2)
(820,297,2)
(970,432,2)
(711,136,2)
(642,217,2)
(16,626,2)
(407,374,2)
(359,122,2)
(864,229,2)
(137,260,2)
(551,157,2)
(737,494,2)
(986,139,2)
(733,884,2)
(568,136,2)
(520,217,2)
(290,122,2)
(689,136,2)
(783,554,2)
(729,872,2)
(271,217,2)
(948,10,2)
(319,317,2)
(99,694,2)
(632,992,2)
(640,7,2)
(569,554,2)
(341,29,2)
(874,260,2)
(923,229,2)
(168,136,2)
(379,297,2)
(232,217,2)
(216,554,2)
(899,554,2)
(722,317,2)
(217,260,2)
(492,817,2)
(970,833,2)
(926,554,2)
(724,136,2)
(737,217,2)
(790,108,2)
(531,297,2)
(330,424,2)
(645,297,2)
(460,554,2)
(286,872,2)
(813,260,2)
(85,136,2)
(811,7,2)
(467,554,2)
(882,297,2)
(563,288,2)
(750,260,2)
(260,136,2)
(965,699,2)
(970,510,2)
(991,297,2)
(897,748,2)
(758,217,2)
(150,694,2)
(19,694,2)
(910,288,2)
(158,297,2)
(490,297,2)
(288,303,2)
(17,122,2)
(504,157,2)
(500,554,2)
(264,217,2)
(214,616,2)
(872,463,2)
(659,217,2)
(697,290,2)
(950,260,2)
(492,11,2)
(231,288,2)
(89,317,2)
(389,859,2)
(436,217,2)
(791,122,2)
(232,181,2)
(856,680,2)
(424,157,2)
(385,494,2)
(221,598,2)
(954,959,2)
(274,694,2)
(593,171,2)
(95,412,2)
(927,694,2)
(718,959,2)
(619,455,2)
(977,689,2)
(148,10,2)
(885,260,2)
(894,317,2)
(97,217,2)
(616,901,2)
(512,217,2)
(385,554,2)
(876,317,2)
(242,260,2)
(548,851,2)
(470,494,2)
(476,260,2)
(676,10,2)
(526,979,2)
(970,572,2)
(747,217,2)
(287,246,2)
(237,297,2)
(61,246,2)
(117,122,2)
(579,217,2)
(311,496,2)
(14,136,2)
(604,297,2)
(817,502,2)
(445,217,2)
(818,288,2)
(310,301,2)
(475,108,2)
(372,7,2)
(210,317,2)
(162,77,2)
(399,260,2)
(189,260,2)
(492,118,2)
(753,55,2)
(842,260,2)
(990,136,2)
(171,809,2)
(201,959,2)
(970,387,2)
(492,730,2)
(12,217,2)
(305,208,2)
(925,537,2)
(688,959,2)
(255,260,2)
(98,260,2)
(629,580,2)
(235,494,2)
(675,122,2)
(35,229,2)
(213,260,2)
(318,412,2)
(805,136,2)
(366,260,2)
(348,66,2)
(166,694,2)
(696,376,2)
(735,7,2)
(764,554,2)
(183,7,2)
(128,10,2)
(414,217,2)
(521,412,2)
(123,260,2)
(970,943,2)
(77,554,2)
(458,297,2)
(515,905,2)
(380,494,2)
(530,718,2)
(285,384,2)
(119,229,2)
(621,554,2)
(223,217,2)
(779,723,2)
(751,417,2)
(105,554,2)
(299,300,2)
(902,578,2)
(156,297,2)
(559,872,2)
(135,334,2)
(185,297,2)
(142,260,2)
(660,157,2)
(684,817,2)
(740,66,2)
(700,494,2)
(674,317,2)
(175,205,2)
(279,136,2)
(529,580,2)
(896,260,2)
(897,297,2)
(358,260,2)
(888,122,2)
(511,477,2)
(486,234,2)
(168,827,2)
(886,621,2)
(743,136,2)
(768,872,2)
(375,208,2)
(624,297,2)
(834,297,2)
(667,300,2)
(535,925,2)
(894,781,2)
(437,494,2)
(961,376,2)
(9,905,2)
(823,694,2)
(632,217,2)
(600,217,2)
(414,939,2)
(184,580,2)
(974,260,2)
(235,260,2)
(527,959,2)
(898,694,2)
(737,554,2)
(251,554,2)
(281,122,2)
(816,217,2)
(58,260,2)
(203,136,2)
(780,217,2)
(810,496,2)
(620,260,2)
(136,407,2)
(545,217,2)
(989,105,2)
(31,297,2)
(42,297,2)
(282,321,2)
(442,694,2)
(303,108,2)
(837,554,2)
(871,783,2)
(771,605,2)
(866,260,2)
(694,376,2)
(890,458,2)
(91,260,2)
(982,260,2)
(427,654,2)
(239,273,2)
(30,979,2)
(345,260,2)
(572,297,2)
(66,949,2)
(7,894,2)
(327,136,2)
(700,217,2)
(383,260,2)
(244,580,2)
(728,494,2)
(947,580,2)
(39,10,2)
(930,297,2)
(46,260,2)
(275,122,2)
(352,260,2)
(253,260,2)
(530,630,2)
(598,426,2)
(180,835,2)
(3,554,2)
(73,260,2)
(879,816,2)
(216,7,2)
(984,122,2)
(405,7,2)
(610,969,2)
(230,260,2)
(233,136,2)
(174,288,2)
(944,894,2)
(917,136,2)
(136,699,2)
(626,554,2)
(843,297,2)
(173,890,2)
(628,122,2)
(452,317,2)
(663,122,2)
(170,217,2)
(81,317,2)
(642,282,2)
(248,45,2)
(626,297,2)
(858,458,2)
(108,327,2)
(332,980,2)
(787,297,2)
(797,208,2)
(372,554,2)
(648,294,2)
(74,297,2)
(814,697,2)
(859,217,2)
(356,297,2)
(954,554,2)
(7,994,2)
(848,580,2)
(193,554,2)
(415,259,2)
(637,905,2)
(778,701,2)
(655,217,2)
(684,260,2)
(402,217,2)
(38,136,2)
(610,260,2)
(193,260,2)
(117,260,2)
(200,979,2)
(295,288,2)
(970,516,2)
(970,897,2)
(611,260,2)
(493,217,2)
(21,260,2)
(615,136,2)
(938,993,2)
(235,554,2)
(335,554,2)
(336,260,2)
(953,376,2)
(26,217,2)
(796,908,2)
(992,574,2)
(293,449,2)
(593,297,2)
(623,99,2)
(973,235,2)
(343,136,2)
(273,176,2)
(10,496,2)
(276,458,2)
(428,217,2)
(777,297,2)
(391,533,2)
(177,699,2)
(900,259,2)
(360,196,2)
(600,448,2)
(879,217,2)
(395,116,2)
(863,234,2)
(104,443,2)
(169,260,2)
(161,553,2)
(249,288,2)
(771,297,2)
(592,297,2)
(973,260,2)
(230,117,2)
(448,23,2)
(252,494,2)
(39,505,2)
(665,217,2)
(84,217,2)
(890,122,2)
(853,10,2)
(77,260,2)
(458,543,2)
(809,297,2)
(989,496,2)
(303,380,2)
(517,122,2)
(568,270,2)
(421,217,2)
(956,260,2)
(50,993,2)
(346,10,2)
(16,100,2)
(972,694,2)
(561,122,2)
(58,494,2)
(736,7,2)
(381,260,2)
(432,297,2)
(939,217,2)
(877,297,2)
(872,694,2)
(72,246,2)
(277,260,2)
(652,217,2)
(955,677,2)
(198,122,2)
(612,229,2)
(359,234,2)
(80,217,2)
(712,156,2)
(68,217,2)
(830,691,2)
(621,297,2)
(323,260,2)
(711,554,2)
(882,554,2)
(260,447,2)
(301,122,2)
(369,288,2)
(339,694,2)
(254,217,2)
(958,260,2)
(816,613,2)
(338,530,2)
(969,554,2)
(580,950,2)
(795,300,2)
(395,297,2)
(13,217,2)
(408,554,2)
(484,297,2)
(826,122,2)
(514,717,2)
(144,260,2)
(873,297,2)
(847,260,2)
(606,10,2)
(179,474,2)
(833,458,2)
(149,217,2)
(325,905,2)
(303,260,2)
(448,217,2)
(905,359,2)
(155,217,2)
(761,548,2)
(836,354,2)
(313,297,2)
(148,554,2)
(340,700,2)
(133,872,2)
(509,217,2)
(156,122,2)
(29,122,2)
(773,540,2)
(958,554,2)
(486,391,2)
(801,872,2)
(889,281,2)
(479,260,2)
(310,297,2)
(538,793,2)
(186,389,2)
(56,288,2)
(881,232,2)
(819,260,2)
(121,288,2)
(391,905,2)
(968,229,2)
(296,353,2)
(172,260,2)
(979,164,2)
(827,122,2)
(157,938,2)
(940,11,2)
(412,872,2)
(308,260,2)
(47,217,2)
(508,260,2)
(557,642,2)
(980,494,2)
(111,288,2)
(146,297,2)
(577,122,2)
(591,7,2)
(815,496,2)
(586,260,2)
(208,452,2)
(984,376,2)
(176,872,2)
(894,993,2)
(49,986,2)
(756,694,2)
(887,697,2)
(942,554,2)
(979,699,2)
(33,715,2)
(702,260,2)
(883,792,2)
(887,814,2)
(781,860,2)
(44,376,2)
(760,7,2)
(447,136,2)
(835,122,2)
(530,959,2)
(116,991,2)
(828,580,2)
(49,412,2)
(589,694,2)
(173,438,2)
(388,751,2)
(557,217,2)
(940,865,2)
(871,288,2)
(7,317,2)
(779,594,2)
(838,193,2)
(741,55,2)
(725,260,2)
(461,260,2)
(832,297,2)
(981,297,2)
(622,297,2)
(268,829,2)
(712,297,2)
(666,872,2)
(884,122,2)
(505,554,2)
(671,288,2)
(510,297,2)
(181,275,2)
(585,246,2)
(879,104,2)
(512,579,2)
(264,80,2)
(540,15,2)
(895,208,2)
(943,130,2)
(413,674,2)
(796,260,2)
(55,699,2)
(462,297,2)
(767,297,2)
(466,122,2)
(774,217,2)
(522,229,2)
(912,136,2)
(77,494,2)
(471,260,2)
(460,157,2)
(893,297,2)
(399,554,2)
(223,675,2)
(733,260,2)
(92,872,2)
(338,372,2)
(596,259,2)
(14,568,2)
(149,802,2)
(446,580,2)
(58,554,2)
(726,694,2)
(172,122,2)
(328,172,2)
(951,260,2)
(109,288,2)
(252,217,2)
(416,412,2)
(262,288,2)
(226,260,2)
(229,200,2)
(759,889,2)
(154,679,2)
(193,494,2)
(785,7,2)
(454,288,2)
(173,458,2)
(215,217,2)
(52,122,2)
(267,64,2)
(3,494,2)
(656,122,2)
(144,855,2)
(862,376,2)
(851,260,2)
(3,694,2)
(598,872,2)
(691,737,2)
(639,297,2)
(239,872,2)
(776,297,2)
(647,694,2)
(254,222,2)
(901,217,2)
(744,496,2)
(970,498,2)
(403,297,2)
(506,260,2)
(419,136,2)
(949,122,2)
(674,764,2)
(179,174,2)
(463,694,2)
(524,905,2)
(253,772,2)
(191,297,2)
(807,136,2)
(719,694,2)
(792,297,2)
(161,288,2)
(360,872,2)
(436,223,2)
(151,288,2)
(27,288,2)
(662,297,2)
(842,270,2)
(455,297,2)
(596,900,2)
(796,240,2)
(598,360,2)
(519,10,2)
(107,10,2)
(248,260,2)
(302,297,2)
(503,229,2)
(147,260,2)
(363,217,2)
(534,217,2)
(940,392,2)
(246,229,2)
(64,260,2)
(940,730,2)
(196,122,2)
(71,260,2)
(680,872,2)
(654,136,2)
(312,10,2)
(195,288,2)
(401,157,2)
(494,168,2)
(413,492,2)
(687,412,2)
(272,358,2)
(451,494,2)
(929,225,2)
(818,161,2)
(993,317,2)
(150,719,2)
(481,260,2)
(18,412,2)
(908,554,2)
(605,297,2)
(281,229,2)
(265,697,2)
(10,744,2)
(675,217,2)
(633,382,2)
(916,905,2)
(507,7,2)
(94,554,2)
(465,260,2)
(941,260,2)
(139,122,2)
(417,122,2)
(188,10,2)
(948,128,2)
(443,252,2)
(709,217,2)
(537,122,2)
(284,787,2)
(178,217,2)
(859,494,2)
(467,136,2)
(155,436,2)
(689,536,2)
(619,297,2)
(730,554,2)
(418,217,2)
(912,122,2)
(99,3,2)
(584,108,2)
(538,260,2)
(800,122,2)
(781,157,2)
(194,229,2)
(911,458,2)
(306,317,2)
(32,412,2)
(663,297,2)
(317,251,2)
(918,288,2)
(94,136,2)
(489,27,2)
(282,217,2)
(181,217,2)
(851,494,2)
(798,260,2)
(975,260,2)
(451,217,2)
(552,6,2)
(778,665,2)
(182,869,2)
(782,872,2)
(180,297,2)
(497,297,2)
(905,234,2)
(456,260,2)
(628,697,2)
(307,217,2)
(387,554,2)
(677,122,2)
(940,118,2)
(344,297,2)
(579,340,2)
(294,317,2)
(0,297,2)
(929,217,2)
(518,260,2)
(543,297,2)
(605,122,2)
(677,297,2)
(87,217,2)
(179,288,2)
(106,297,2)
(400,135,2)
(541,229,2)
(587,979,2)
(932,501,2)
(196,872,2)
(495,217,2)
(913,872,2)
(103,336,2)
(219,108,2)
(804,297,2)
(408,699,2)
(615,724,2)
(245,134,2)
(826,260,2)
(397,872,2)
(695,217,2)
(845,297,2)
(243,297,2)
(970,955,2)
(164,408,2)
(390,554,2)
(838,260,2)
(855,554,2)
(763,234,2)
(802,217,2)
(413,940,2)
(902,500,2)
(721,894,2)
(455,53,2)
(992,217,2)
(793,260,2)
(53,310,2)
(830,217,2)
(501,10,2)
(994,234,2)
(171,297,2)
(377,260,2)
(897,33,2)
(572,663,2)
(429,541,2)
(267,260,2)
(684,508,2)
(762,496,2)
(434,288,2)
(291,122,2)
(964,260,2)
(118,260,2)
(789,297,2)
(285,217,2)
(794,157,2)
(134,217,2)
(828,714,2)
(692,894,2)
(413,983,2)
(855,494,2)
(92,239,2)
(168,584,2)
(45,122,2)
(349,75,2)
(63,229,2)
(754,260,2)
(368,761,2)
(70,217,2)
(516,297,2)
(103,260,2)
(829,136,2)
(386,122,2)
(664,694,2)
(440,217,2)
(781,993,2)
(959,7,2)
(991,771,2)
(459,760,2)
(152,122,2)
(292,217,2)
(301,297,2)
(904,260,2)
(532,297,2)
(17,829,2)
(214,217,2)
(569,317,2)
(752,694,2)
(153,655,2)
(739,260,2)
(168,427,2)
(218,122,2)
(453,376,2)
(23,217,2)
(578,260,2)
(394,260,2)
(266,297,2)
(437,217,2)
(597,317,2)
(881,217,2)
(727,260,2)
(263,297,2)
(541,554,2)
(83,532,2)
(706,694,2)
(713,297,2)
(577,260,2)
(726,296,2)
(967,136,2)
(606,39,2)
(869,376,2)
(487,136,2)
(856,872,2)
(406,217,2)
(658,694,2)
(129,10,2)
(718,954,2)
(266,712,2)
(126,694,2)
(825,872,2)
(425,297,2)
(284,297,2)
(362,288,2)
(49,95,2)
(778,217,2)
(80,122,2)
(307,385,2)
(426,559,2)
(127,7,2)
(966,694,2)
(250,297,2)
(114,412,2)
(391,9,2)
(578,577,2)
(848,728,2)
(162,260,2)
(355,260,2)
(88,108,2)
(717,122,2)
(946,733,2)
(900,494,2)
(841,260,2)
(453,984,2)
(136,229,2)
(89,569,2)
(970,297,2)
(404,993,2)
(293,297,2)
(392,694,2)
(491,297,2)
(678,460,2)
(9,791,2)
(182,376,2)
(412,221,2)
(23,554,2)
(938,554,2)
(33,297,2)
-----------------------------------
(0,number)
(1,QUEUE_EVENT_VARIABLES)
(2,pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(3,tmp->chan)
(4,lastqueue)
(5,qe)
(6,qe->chan)
(7,(tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(8,tech)
(9,qe->parent->wrapuptime)
(10,newstate != tmp->member->status)
(11,caller.ani)
(12,tmp)
(13,chan)
(14,(*busies)
(15,qe->chan)
(16,ast_channel_lock_both(tmp->chan, qe->chan)
(17,qe->chan)
(18,ast_set_callerid(tmp->chan, S_OR(ast_channel_macroexten(qe->chan)
(19,chan)
(20,location)
(21,chan)
(22,tmp)
(23,tmp->chan)
(24,qe)
(25,0)
(26,src)
(27,*busies)
(28,chan)
(29,qe->chan)
(30,tmp->member->status)
(31,chan)
(32,qe)
(33,ast_channel_connected(qe->chan)
(34,busies)
(35,1)
(36,tmp)
(37,0)
(38,tmp)
(39,tmp->member->interface)
(40,qe)
(41,chan)
(42,parent)
(43,chan)
(44,tmp->dial_callerid_absent = 1)
(45,qe->chan)
(46,chan)
(47,chan)
(48,if (ast_cdr_isset_unanswered()
(49,S_OR(ast_channel_macroexten(qe->chan)
(50,lastqueue)
(51,)
(52,qe->chan)
(53,ast_channel_caller(qe->chan)
(54,qe)
(55,check_state_unknown)
(56,qe->parent)
(57,qe->parent)
(58,tmp->chan)
(59,ast_channel_cdr(qe->chan)
(60,qe)
(61,member)
(62,AST_DEVICE_UNKNOWN)
(63,chan)
(64,qe->chan)
(65,tmp)
(66,ast_channel_cdr(qe->chan)
(67,ast_channel_cdr(qe->chan)
(68,qe)
(69,1)
(70,chan)
(71,qe)
(72,parent)
(73,macrocontext)
(74,chan)
(75,ast_channel_connected(qe->chan)
(76,0)
(77,tmp->chan)
(78,qe->chan)
(79,qe)
(80,qe->chan)
(81,lastqueue)
(82,qe)
(83,ast_channel_unlock(tmp->chan)
(84,channel)
(85,\'/\')
(86,)
(87,dcontext)
(88,*location++ = \'\\0\')
(89,ast_debug(1, "%s paused, can\'t receive call\\n", tmp->interface)
(90,str)
(91,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(92,ast_channel_dialed(qe->chan)
(93,paused)
(94,tmp->stillgoing)
(95,ast_channel_exten(qe->chan)
(96,accountcode)
(97,qe)
(98,chan)
(99,ast_channel_caller(tmp->chan)
(100,qe->chan)
(101,ast_channel_caller(tmp->chan)
(102,AST_CAUSE_ANSWERED_ELSEWHERE)
(103,ast_channel_dialed(tmp->chan)
(104,ast_channel_cdr(tmp->chan)
(105,tmp->member)
(106,S_COR(ast_channel_caller(qe->chan)
(107,interface)
(108,location = strchr(tech, \'/\')
(109,eventwhencalled)
(110,"Priority queue delaying call to %s:%s\\n")
(111,member)
(112,tmp)
(113,qe)
(114,tmp->chan)
(115,if (qe->cancel_answered_elsewhere)
(116,ast_channel_caller(qe->chan)
(117,qe->chan)
(118,ast_channel_dialed(tmp->chan)
(119,stillgoing)
(120,tmp->stillgoing = 0)
(121,qe)
(122,struct queue_ent *qe)
(123,qe)
(124,tmp)
(125,name)
(126,NULL)
(127,member)
(128,tmp->member->interface)
(129,LOG_WARNING)
(130,qe->chan)
(131,tmp)
(132,qe)
(133,qe)
(134,tmp->chan)
(135,ast_channel_connected(qe->chan)
(136,use_weight && compare_weight(qe->parent,tmp->member)
(137,"MACRO_EXTEN")
(138,chan)
(139,qe->chan)
(140,tmp)
(141,chan)
(142,qe)
(143,userfield)
(144,ast_channel_appl_set(tmp->chan, "AppQueue")
(145,tmp)
(146,ast_channel_connected(qe->chan)
(147,valid)
(148,tmp->member)
(149,ast_channel_cdr(tmp->chan)
(150,caller.ani = ast_channel_connected(qe->chan)
(151,member)
(152,qe->parent)
(153,ast_channel_cdr(qe->chan)
(154,tmp->member->interface)
(155,strcpy(ast_channel_cdr(tmp->chan)
(156,qe->chan)
(157,tmp->lastqueue->wrapuptime)
(158,chan)
(159,qe->chan)
(160,)
(161,get_queue_member_status(tmp->member)
(162,ast_channel_whentohangup(tmp->chan)
(163,tmp)
(164,tmp->member->status)
(165,qe)
(166,id)
(167,qe)
(168,ast_request(tech, ast_channel_nativeformats(qe->chan)
(169,chan)
(170,chan)
(171,ast_channel_connected(qe->chan)
(172,qe->parent)
(173,vars2manager(qe->chan, vars, sizeof(vars)
(174,get_queue_member_status(tmp->member)
(175,return 0;)
(176,qe->chan)
(177,status)
(178,amaflags)
(179,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(180,ast_channel_caller(qe->chan)
(181,ast_channel_cdr(qe->chan)
(182,ast_channel_connected(qe->chan)
(183,return 0;)
(184,chan)
(185,chan)
(186,ast_channel_cdr(tmp->chan)
(187,qe)
(188,tmp->member)
(189,qe)
(190,location)
(191,qe->parent->name)
(192,qe)
(193,tmp->chan)
(194,busies)
(195,"Couldn\'t call %s\\n")
(196,qe->chan)
(197,if (!tmp->member->ringinuse)
(198,qe->parent)
(199,lastapp)
(200,tmp->member->status != AST_DEVICE_UNKNOWN)
(201,name)
(202,qe)
(203,tmp->stillgoing = 0)
(204,tmp)
(205,tmp->stillgoing)
(206,NULL)
(207,chan)
(208,ast_channel_cdr(qe->chan)
(209,caller)
(210,busies)
(211,chan)
(212,chan)
(213,qe)
(214,ast_channel_cdr(tmp->chan)
(215,tmp)
(216,tmp->stillgoing)
(217,ast_cdr_isset_unanswered()
(218,qe->chan)
(219,"")
(220,tmp->stillgoing = 0)
(221,ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(222,tmp->chan)
(223,ast_channel_cdr(qe->chan)
(224,"unknown")
(225,ast_channel_cdr(tmp->chan)
(226,"(Outgoing Line)
(227,)
(228,tmp)
(229,(tmp->member->status != AST_DEVICE_NOT_INUSE)
(230,ast_channel_dialed(qe->chan)
(231,tmp->member)
(232,ast_channel_cdr(qe->chan)
(233,tech)
(234,!tmp->lastqueue)
(235,tmp->chan)
(236,1)
(237,valid)
(238,stillgoing)
(239,ast_channel_dialed(qe->chan)
(240,qe->chan)
(241,if ((res = ast_call(tmp->chan, location, 0)
(242,qe)
(243,id)
(244,ast_channel_exten(qe->chan)
(245,ast_channel_cdr(tmp->chan)
(246,use_weight)
(247,tmp)
(248,ast_channel_datastore_inherit(qe->chan, tmp->chan)
(249,interface)
(250,3)
(251,tmp->member)
(252,tmp->chan)
(253,ast_channel_caller(tmp->chan)
(254,ast_channel_cdr(tmp->chan)
(255,qe)
(256,valid)
(257,str)
(258,if ((tmp->member->status != AST_DEVICE_NOT_INUSE)
(259,qe->cancel_answered_elsewhere)
(260,!tmp->chan)
(261,if (tmp->member->paused)
(262,tmp)
(263,qe)
(264,ast_channel_cdr(qe->chan)
(265,chan)
(266,ast_channel_caller(qe->chan)
(267,ast_channel_caller(qe->chan)
(268,ast_cdr_busy(ast_channel_cdr(qe->chan)
(269,ast_device_state(tmp->member->interface)
(270,int *busies)
(271,chan)
(272,ast_strlen_zero(macrocontext)
(273,ast_channel_dialed(qe->chan)
(274,caller)
(275,qe->chan)
(276,vars)
(277,chan)
(278,qe->chan)
(279,tmp)
(280,qe)
(281,qe->chan)
(282,ast_channel_cdr(qe->chan)
(283,id)
(284,ast_channel_caller(qe->chan)
(285,ast_channel_exten(qe->chan)
(286,qe)
(287,tmp->member)
(288,res = ast_call(tmp->chan, location, 0)
(289,ast_channel_dialed(qe->chan)
(290,qe->chan)
(291,qe->chan)
(292,ast_channel_cdr(tmp->chan)
(293,ast_channel_caller(qe->chan)
(294,*busies)
(295,tmp)
(296,ast_channel_connected(qe->chan)
(297,qe->parent->eventwhencalled)
(298,channel)
(299,ast_channel_context(qe->chan)
(300,ast_strlen_zero(macrocontext)
(301,qe->chan)
(302,qe)
(303,ast_call(tmp->chan, location, 0)
(304,"MACRO_CONTEXT")
(305,ast_cdr_busy(ast_channel_cdr(qe->chan)
(306,chan)
(307,ast_channel_cdr(tmp->chan)
(308,ao2_lock(qe->parent)
(309,tmp)
(310,ast_channel_caller(qe->chan)
(311,newstate)
(312,newstate)
(313,str)
(314,macrocontext)
(315,)
(316,lastdata)
(317,tmp->member->paused)
(318,NULL)
(319,tmp)
(320,qe)
(321,qe->chan)
(322,chan)
(323,qe)
(324,chan)
(325,lastcall)
(326,1)
(327,strchr(tech, \'/\')
(328,ao2_unlock(qe->parent)
(329,status)
(330,time(NULL)
(331,chan)
(332,ast_channel_dialcontext_set(tmp->chan, ast_strlen_zero(macrocontext)
(333,get_queue_member_status(tmp->member)
(334,ast_channel_connected(qe->chan)
(335,tmp->member)
(336,ast_channel_dialed(qe->chan)
(337,)
(338,ast_debug(1, "Wrapuptime not yet expired on queue %s for %s\\n",\n\\n\\t\\t\\t\\t(tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(339,qe)
(340,ast_channel_cdr(tmp->chan)
(341,ast_channel_cdr(qe->chan)
(342,chan)
(343,chan)
(344,valid)
(345,tmp)
(346,member)
(347,if (ast_channel_cdr(qe->chan)
(348,qe)
(349,ast_channel_connected(qe->chan)
(350,"Wrapuptime not yet expired on queue %s for %s\\n")
(351,transit_network_select)
(352,tmp)
(353,ast_channel_connected(qe->chan)
(354,tmp->chan)
(355,cancel_answered_elsewhere)
(356,ast_channel_connected(qe->chan)
(357,chan)
(358,macrocontext = pbx_builtin_getvar_helper(qe->chan, "MACRO_CONTEXT")
(359,qe->parent)
(360,ast_channel_exten(qe->chan)
(361,qe)
(362,member)
(363,chan)
(364,)
(365,chan)
(366,member)
(367,0)
(368,sizeof(*ast_channel_whentohangup(tmp->chan)
(369,tmp)
(370,member)
(371,)
(372,tmp->interface)
(373,tmp)
(374,qe->parent)
(375,ast_channel_cdr(qe->chan)
(376,!ast_channel_caller(tmp->chan)
(377,ast_channel_unlock(qe->chan)
(378,"Called %s\\n")
(379,chan)
(380,tmp->chan)
(381,tmp)
(382,tmp->member->status)
(383,rrpos)
(384,qe->chan)
(385,tmp->chan)
(386,qe->parent)
(387,tmp->interface)
(388,ast_cdr_busy(ast_channel_cdr(qe->chan)
(389,ast_channel_cdr(tmp->chan)
(390,tmp->chan)
(391,time(NULL)
(392,caller.id)
(393,str)
(394,chan)
(395,ast_channel_caller(qe->chan)
(396,chan)
(397,NULL)
(398,lastqueue)
(399,tmp->member)
(400,ast_channel_connected(qe->chan)
(401,tmp)
(402,chan)
(403,EVENT_FLAG_AGENT)
(404,wrapuptime)
(405,tmp)
(406,chan)
(407,compare_weight(qe->parent,tmp->member)
(408,tmp->member)
(409,tmp)
(410,"")
(411,id)
(412,!ast_strlen_zero(S_OR(ast_channel_macroexten(qe->chan)
(413,RET)
(414,ast_cdr_setdestchan(ast_channel_cdr(tmp->chan)
(415,tmp)
(416,chan)
(417,qe->chan)
(418,lastapp)
(419,chan)
(420,qe)
(421,userfield)
(422,linpos)
(423,member)
(424,time(NULL)
(425,tmp->member)
(426,ast_channel_macroexten(qe->chan)
(427,ast_channel_nativeformats(qe->chan)
(428,ast_channel_cdr(tmp->chan)
(429,ast_debug(1, "%s in use, can\'t receive call\\n", tmp->interface)
(430,if (ast_channel_cdr(qe->chan)
(431,chan)
(432,ast_channel_name(tmp->chan)
(433,number)
(434,parent)
(435,if (ast_channel_cdr(qe->chan)
(436,ast_channel_cdr(qe->chan)
(437,tmp->chan)
(438,sizeof(vars)
(439,tmp->member->membername)
(440,tmp->chan)
(441,dial_callerid_absent)
(442,tmp)
(443,ast_channel_cdr(tmp->chan)
(444,qe)
(445,chan)
(446,tmp)
(447,tmp->chan)
(448,ast_channel_cdr(tmp->chan)
(449,ast_channel_caller(qe->chan)
(450,)
(451,tmp->chan)
(452,qe->chan)
(453,ast_channel_connected(qe->chan)
(454,tmp)
(455,ast_channel_caller(qe->chan)
(456,macrocontext)
(457,"%s in use, can\'t receive call\\n")
(458,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES)
(459,(*busies)
(460,tmp->lastqueue)
(461,0)
(462,"unknown")
(463,ast_strlen_zero(ast_channel_dialed(qe->chan)
(464,ast_devstate2str(newstate)
(465,0)
(466,qe->chan)
(467,tmp->interface)
(468,str)
(469,chan)
(470,tmp->chan)
(471,ast_channel_caller(tmp->chan)
(472,location)
(473,qe)
(474,tmp->member)
(475,location)
(476,chan)
(477,ast_channel_cdr(tmp->chan)
(478,chan)
(479,qe->parent)
(480,)
(481,pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(482,clid)
(483,tmp)
(484,qe)
(485,3)
(486,qe->parent->wrapuptime && (time(NULL)
(487,&status)
(488,status)
(489,(*busies)
(490,tmp)
(491,id)
(492,return 0;)
(493,qe)
(494,tmp->chan = ast_request(tech, ast_channel_nativeformats(qe->chan)
(495,accountcode)
(496,check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(497,qe)
(498,S_COR(ast_channel_caller(qe->chan)
(499,"AgentCalled")
(500,tmp->chan)
(501,tmp->member->status)
(502,location++)
(503,qe)
(504,tmp)
(505,tmp->member)
(506,id)
(507,interface)
(508,tmp->stillgoing)
(509,chan)
(510,ast_channel_name(qe->chan)
(511,strcpy(ast_channel_cdr(tmp->chan)
(512,strcpy(ast_channel_cdr(tmp->chan)
(513,parent)
(514,qe->linpos++)
(515,qe)
(516,ast_channel_exten(qe->chan)
(517,qe->chan)
(518,qe)
(519,member)
(520,qe)
(521,NULL)
(522,tmp->stillgoing = 0)
(523,)
(524,time(NULL)
(525,qe)
(526,tmp)
(527,tmp)
(528,chan)
(529,tmp)
(530,tmp->lastqueue ? tmp->lastqueue->name : qe->parent->name)
(531,id)
(532,tmp->chan)
(533,time(NULL)
(534,dst)
(535,strcpy(ast_channel_cdr(tmp->chan)
(536,qe->parent)
(537,qe->chan)
(538,ast_connected_line_copy_from_caller(ast_channel_connected(tmp->chan)
(539,id)
(540,ast_channel_cdr(qe->chan)
(541,tmp->interface)
(542,macroexten)
(543,qe->parent->eventwhencalled)
(544,tmp)
(545,chan)
(546,ast_channel_redirecting(qe->chan)
(547,\'\\0\')
(548,ast_channel_whentohangup(tmp->chan)
(549,membername)
(550,tmp->member->ringinuse)
(551,lastcall)
(552,ast_channel_connected(qe->chan)
(553,tmp->member)
(554,struct callattempt *tmp)
(555,member)
(556,ani)
(557,strcpy(ast_channel_cdr(tmp->chan)
(558,qe->chan)
(559,qe->chan)
(560,qe)
(561,qe->chan)
(562,chan)
(563,0)
(564,)
(565,chan)
(566,chan)
(567,interface)
(568,*busies)
(569,tmp->interface)
(570,interface)
(571,chan)
(572,ast_channel_uniqueid(qe->chan)
(573,chan)
(574,qe->chan)
(575,member)
(576,tmp)
(577,qe->chan)
(578,ast_channel_adsicpe(qe->chan)
(579,ast_channel_cdr(tmp->chan)
(580,!ast_strlen_zero(macroexten)
(581,chan)
(582,tmp)
(583,chan)
(584,location = "")
(585,tmp)
(586,tmp)
(587,AST_DEVICE_UNKNOWN)
(588,chan)
(589,ast_channel_dialed(qe->chan)
(590,chan)
(591,tmp)
(592,name)
(593,ast_channel_connected(qe->chan)
(594,&caller)
(595,newstate)
(596,ast_channel_hangupcause_set(tmp->chan, AST_CAUSE_ANSWERED_ELSEWHERE)
(597,tmp)
(598,S_OR(ast_channel_macroexten(qe->chan)
(599,ringinuse)
(600,ast_channel_cdr(tmp->chan)
(601,number)
(602,tmp)
(603,"Found a channel matching iterface %s while status was %s changed to %s\\n")
(604,number)
(605,qe->chan)
(606,ast_log(LOG_WARNING, "Found a channel matching iterface %s while status was %s changed to %s\\n",\n\\n\\t\\t\\t\\t\\ttmp->member->interface, ast_devstate2str(tmp->member->status)
(607,stillgoing)
(608,if ((location = strchr(tech, \'/\')
(609,chan)
(610,ast_channel_unlock(tmp->chan)
(611,chan)
(612,interface)
(613,ast_channel_cdr(qe->chan)
(614,chan)
(615,ast_copy_string(tech, tmp->interface, sizeof(tech)
(616,ast_channel_cdr(tmp->chan)
(617,chan)
(618,id)
(619,ast_channel_caller(qe->chan)
(620,(*busies)
(621,tmp->interface)
(622,qe)
(623,ast_party_caller_set_init(&caller, ast_channel_caller(tmp->chan)
(624,ast_channel_connected(qe->chan)
(625,)
(626,tmp->chan)
(627,qe->chan)
(628,qe->chan)
(629,macroexten)
(630,qe->parent->name)
(631,ast_channel_name(tmp->chan)
(632,ast_channel_cdr(qe->chan)
(633,tmp->member->status == AST_DEVICE_UNKNOWN)
(634,caller)
(635,member)
(636,tech)
(637,parent)
(638,if (ast_channel_connected(qe->chan)
(639,tmp)
(640,1)
(641,member)
(642,ast_channel_cdr(qe->chan)
(643,)
(644,name)
(645,qe)
(646,qe)
(647,caller)
(648,(*busies)
(649,qe)
(650,if (!ast_channel_caller(tmp->chan)
(651,if (ast_channel_cdr(qe->chan)
(652,chan)
(653,S_COR(ast_channel_connected(qe->chan)
(654,qe->chan)
(655,qe->chan)
(656,qe->chan)
(657,)
(658,qe->chan)
(659,chan)
(660,wrapuptime)
(661,number)
(662,tmp)
(663,qe->chan)
(664,qe)
(665,ast_channel_cdr(qe->chan)
(666,str)
(667,chan)
(668,chan)
(669,tmp)
(670,tmp)
(671,tmp)
(672,caller)
(673,qe)
(674,return 0;)
(675,qe->chan)
(676,tmp)
(677,qe->chan)
(678,tmp->lastqueue->wrapuptime)
(679,tmp->member)
(680,tmp->chan)
(681,chan)
(682,res)
(683,chan)
(684,return 0;)
(685,macrocontext)
(686,tmp)
(687,chan)
(688,name)
(689,qe->parent->name)
(690,tech)
(691,ast_channel_cdr(tmp->chan)
(692,tmp->lastqueue)
(693,)
(694,ast_channel_connected(qe->chan)
(695,chan)
(696,qe)
(697,ast_channel_cdr(qe->chan)
(698,chan)
(699,!tmp->member->ringinuse)
(700,tmp->chan)
(701,ast_channel_cdr(tmp->chan)
(702,tmp)
(703,stillgoing)
(704,AST_DEVICE_NOT_INUSE)
(705,vars)
(706,tmp)
(707,chan)
(708,)
(709,tmp)
(710,if (!tmp->chan)
(711,tmp->interface)
(712,ast_channel_caller(qe->chan)
(713,parent)
(714,macroexten = pbx_builtin_getvar_helper(qe->chan, "MACRO_EXTEN")
(715,ast_channel_connected(qe->chan)
(716,qe->parent)
(717,qe->linpos)
(718,tmp->lastqueue->name)
(719,ast_channel_connected(qe->chan)
(720,chan)
(721,tmp)
(722,"%s paused, can\'t receive call\\n")
(723,tmp->chan)
(724,sizeof(tech)
(725,ast_channel_lock_both(tmp->chan, qe->chan)
(726,caller.id = ast_channel_connected(qe->chan)
(727,memset(ast_channel_whentohangup(tmp->chan)
(728,tmp->chan)
(729,qe)
(730,tmp->chan)
(731,chan)
(732,if (use_weight && compare_weight(qe->parent,tmp->member)
(733,qe->parent->rrpos)
(734,interface)
(735,0)
(736,busies)
(737,tmp->chan)
(738,macroexten)
(739,parent)
(740,chan)
(741,status)
(742,if (!ast_strlen_zero(macroexten)
(743,0)
(744,newstate = ast_device_state(tmp->member->interface)
(745,qe)
(746,)
(747,clid)
(748,ast_channel_connected(qe->chan)
(749,wrapuptime)
(750,tmp)
(751,ast_channel_cdr(qe->chan)
(752,id)
(753,tmp)
(754,transit_network_select)
(755,qe)
(756,qe->chan)
(757,name)
(758,chan)
(759,qe)
(760,*busies)
(761,*ast_channel_whentohangup(tmp->chan)
(762,tmp)
(763,wrapuptime)
(764,tmp->stillgoing)
(765,qe)
(766,member)
(767,interface)
(768,number)
(769,tmp)
(770,qe)
(771,ast_channel_caller(qe->chan)
(772,ast_channel_caller(tmp->chan)
(773,ast_cdr_busy(ast_channel_cdr(qe->chan)
(774,amaflags)
(775,res)
(776,qe)
(777,tmp)
(778,strcpy(ast_channel_cdr(tmp->chan)
(779,ast_channel_set_caller_event(tmp->chan, &caller, NULL)
(780,lastdata)
(781,tmp->lastqueue->wrapuptime && (time(NULL)
(782,chan)
(783,tmp->interface)
(784,qe)
(785,chan)
(786,src)
(787,ast_channel_caller(qe->chan)
(788,chan)
(789,"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s")
(790,location)
(791,qe->parent)
(792,qe->chan)
(793,ast_channel_connected(tmp->chan)
(794,tmp->lastcall)
(795,qe)
(796,ast_channel_inherit_variables(qe->chan, tmp->chan)
(797,qe->chan)
(798,parent)
(799,newstate)
(800,qe->chan)
(801,chan)
(802,ast_channel_cdr(qe->chan)
(803,1)
(804,"unknown")
(805,0)
(806,interface)
(807,interface)
(808,tmp)
(809,ast_channel_connected(qe->chan)
(810,status)
(811,lastqueue)
(812,member)
(813,tmp)
(814,ast_channel_cdr(qe->chan)
(815,tmp)
(816,ast_channel_cdr(qe->chan)
(817,*location++)
(818,update_status(qe->parent, tmp->member, get_queue_member_status(tmp->member)
(819,ast_party_redirecting_copy(ast_channel_redirecting(tmp->chan)
(820,chan)
(821,&caller)
(822,tmp)
(823,chan)
(824,tmp)
(825,chan)
(826,qe->chan)
(827,qe->chan)
(828,ast_channel_exten_set(tmp->chan, macroexten)
(829,ast_channel_cdr(qe->chan)
(830,ast_channel_cdr(tmp->chan)
(831,qe)
(832,name)
(833,qe->parent->eventwhencalled == QUEUE_EVENT_VARIABLES ? vars2manager(qe->chan, vars, sizeof(vars)
(834,qe->chan)
(835,qe->chan)
(836,ast_channel_redirecting(tmp->chan)
(837,tmp->member)
(838,ast_channel_data_set(tmp->chan, "(Outgoing Line)
(839,)
(840,tmp)
(841,tmp)
(842,*busies)
(843,chan)
(844,tmp)
(845,ast_channel_caller(qe->chan)
(846,chan)
(847,tmp)
(848,ast_channel_exten_set(tmp->chan, ast_channel_exten(qe->chan)
(849,)
(850,NULL)
(851,tmp->chan)
(852,chan)
(853,interface)
(854,tmp)
(855,tmp->chan)
(856,ast_set_callerid(tmp->chan, ast_channel_dialed(qe->chan)
(857,chan)
(858,vars)
(859,tmp->chan)
(860,time(NULL)
(861,if (ast_channel_cdr(qe->chan)
(862,tmp)
(863,parent)
(864,(*busies)
(865,tmp->dial_callerid_absent)
(866,tmp->member)
(867,ast_channel_connected(qe->chan)
(868,tmp)
(869,ast_channel_connected(qe->chan)
(870,qe)
(871,ast_verb(3, "Couldn\'t call %s\\n", tmp->interface)
(872,!ast_strlen_zero(ast_channel_dialed(qe->chan)
(873,eventwhencalled)
(874,macroexten)
(875,ast_channel_connected(qe->chan)
(876,0)
(877,member)
(878,parent)
(879,strcpy(ast_channel_cdr(tmp->chan)
(880,)
(881,strcpy(ast_channel_cdr(tmp->chan)
(882,tmp->chan)
(883,ast_channel_unlock(qe->chan)
(884,qe->parent)
(885,0)
(886,ast_verb(3, "Called %s\\n", tmp->interface)
(887,ast_cdr_busy(ast_channel_cdr(qe->chan)
(888,qe->parent)
(889,ast_channel_cdr(qe->chan)
(890,qe->chan)
(891,tmp)
(892,)
(893,chan)
(894,tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(895,chan)
(896,qe)
(897,S_COR(ast_channel_connected(qe->chan)
(898,qe)
(899,tmp->member)
(900,tmp->chan)
(901,tmp->chan)
(902,ast_channel_adsicpe_set(tmp->chan, ast_channel_adsicpe(qe->chan)
(903,name)
(904,parent)
(905,qe->parent->wrapuptime)
(906,chan)
(907,location)
(908,tmp->chan)
(909,tmp)
(910,busies)
(911,qe)
(912,qe->chan)
(913,NULL)
(914,if (newstate != tmp->member->status)
(915,newstate)
(916,tmp->lastcall)
(917,parent)
(918,member)
(919,status)
(920,)
(921,parent)
(922,qe)
(923,0)
(924,parent)
(925,ast_channel_context(qe->chan)
(926,tmp->member)
(927,number)
(928,valid)
(929,strcpy(ast_channel_cdr(tmp->chan)
(930,id)
(931,tech)
(932,ast_devstate2str(tmp->member->status)
(933,)
(934,qe)
(935,ast_channel_dialed(qe->chan)
(936,chan)
(937,chan)
(938,tmp->lastqueue)
(939,ast_channel_cdr(tmp->chan)
(940,return 1;)
(941,chan)
(942,do_hang(tmp)
(943,ast_channel_priority(qe->chan)
(944,lastqueue)
(945,)
(946,qe->parent->rrpos++)
(947,tmp->chan)
(948,ast_devstate_changed_literal(newstate, tmp->member->interface)
(949,qe->chan)
(950,ast_strlen_zero(macroexten)
(951,"AppQueue")
(952,stillgoing)
(953,id)
(954,tmp->lastqueue)
(955,ast_channel_context(qe->chan)
(956,qe)
(957,)
(958,tmp->chan)
(959,tmp->lastqueue)
(960,"unknown")
(961,valid)
(962,if ((tmp->lastqueue && tmp->lastqueue->wrapuptime && (time(NULL)
(963,chan)
(964,tmp->stillgoing = 0)
(965,tmp)
(966,ani)
(967,qe)
(968,*busies)
(969,tmp->chan)
(970,manager_event(EVENT_FLAG_AGENT, "AgentCalled",\n\\n\\t\\t\\t"Queue: %s\\r\\n"\n\\n\\t\\t\\t"AgentCalled: %s\\r\\n"\n\\n\\t\\t\\t"AgentName: %s\\r\\n"\n\\n\\t\\t\\t"ChannelCalling: %s\\r\\n"\n\\n\\t\\t\\t"DestinationChannel: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDNum: %s\\r\\n"\n\\n\\t\\t\\t"CallerIDName: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineNum: %s\\r\\n"\n\\n\\t\\t\\t"ConnectedLineName: %s\\r\\n"\n\\n\\t\\t\\t"Context: %s\\r\\n"\n\\n\\t\\t\\t"Extension: %s\\r\\n"\n\\n\\t\\t\\t"Priority: %d\\r\\n"\n\\n\\t\\t\\t"Uniqueid: %s\\r\\n"\n\\n\\t\\t\\t"%s",\n\\n\\t\\t\\tqe->parent->name, tmp->interface, tmp->member->membername, ast_channel_name(qe->chan)
(971,tmp)
(972,chan)
(973,ast_channel_dialed(tmp->chan)
(974,chan)
(975,qe)
(976,if (check_state_unknown && (tmp->member->status == AST_DEVICE_UNKNOWN)
(977,ast_debug(1, "Priority queue delaying call to %s:%s\\n", qe->parent->name, tmp->interface)
(978,chan)
(979,tmp->member->status != AST_DEVICE_NOT_INUSE)
(980,tmp->chan)
(981,tmp)
(982,busies)
(983,return 0;)
(984,qe->chan)
(985,qe)
(986,ast_channel_macroexten(qe->chan)
(987,number)
(988,qe)
(989,tmp->member->status)
(990,status)
(991,ast_channel_caller(qe->chan)
(992,ast_channel_cdr(qe->chan)
(993,tmp->lastqueue)
(994,!tmp->lastqueue && qe->parent->wrapuptime && (time(NULL)
(995,tmp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^