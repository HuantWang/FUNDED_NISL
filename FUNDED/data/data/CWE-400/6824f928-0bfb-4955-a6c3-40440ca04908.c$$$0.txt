-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_sleep_09_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
64,66
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,68,70,74,75
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_sleep_09_bad(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__fgets_sleep_09_bad()
CWE400_Resource_Exhaustion__fgets_sleep_09_bad
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(35,23,0)
(33,5,0)
(29,16,0)
(18,9,0)
(2,11,0)
(7,25,0)
(8,10,0)
(17,8,0)
(3,15,0)
(1,5,0)
(19,27,0)
(9,14,0)
(14,9,0)
(23,5,0)
(23,25,0)
(21,27,0)
(5,33,0)
(32,14,0)
(20,8,0)
(5,31,0)
(34,14,0)
(22,2,0)
(33,16,0)
(23,11,0)
(24,36,0)
(26,33,0)
(12,27,0)
(13,16,0)
(14,16,0)
(0,14,0)
(25,27,0)
(16,8,0)
(15,25,0)
(30,24,0)
(25,15,0)
(14,16,1)
(2,22,1)
(35,4,1)
(23,5,1)
(3,7,1)
(28,2,1)
(9,14,1)
(24,30,1)
(33,16,1)
(16,13,1)
(23,35,1)
(32,0,1)
(33,26,1)
(13,29,1)
(23,25,1)
(4,24,1)
(5,33,1)
(15,3,1)
(28,4,1)
(30,9,1)
(1,9,1)
(34,16,1)
(25,15,1)
(0,34,1)
(29,6,1)
(9,18,1)
(4,5,1)
(6,25,1)
(22,23,1)
(4,6,1)
(14,32,1)
(26,1,1)
(18,14,1)
(24,9,2)
(14,16,2)
(23,25,2)
(9,14,2)
(1,9,2)
(5,33,2)
(13,6,2)
(0,6,2)
(35,4,2)
(18,6,2)
(14,6,2)
(29,6,2)
(30,9,2)
(23,5,2)
(22,4,2)
(32,6,2)
(26,9,2)
(25,15,2)
(33,16,2)
(9,6,2)
(16,6,2)
(5,9,2)
(33,9,2)
(2,4,2)
(34,6,2)
(23,4,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,count)
(2,printLine("Sleep time possibly too long")
(3,1)
(4,GLOBAL_CONST_TRUE)
(5,count = atoi(inputBuffer)
(6,GLOBAL_CONST_TRUE)
(7,count)
(8,)
(9,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(10,)
(11,)
(12,count)
(13,"")
(14,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,-1)
(16,inputBuffer[CHAR_ARRAY_SIZE] = "")
(17,inputBuffer)
(18,NULL)
(19,if(GLOBAL_CONST_TRUE)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,if(GLOBAL_CONST_TRUE)
(22,"Sleep time possibly too long")
(23,SLEEP(count)
(24,printLine("fgets()
(25,count = -1)
(26,inputBuffer)
(27,)
(28,RET)
(29,inputBuffer)
(30,"fgets()
(31,)
(32,stdin)
(33,atoi(inputBuffer)
(34,inputBuffer)
(35,count)
(36,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^