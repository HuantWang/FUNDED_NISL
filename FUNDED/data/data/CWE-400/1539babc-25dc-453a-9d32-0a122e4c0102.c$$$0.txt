-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_calloc_09_bad()
{
    char * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
31,34
32,33
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,34,37,38,42,44,49,51,55,57,58,62,64,67,69
-----computeFrom-----
13,14
13,15
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_calloc_09_bad(){    char * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_calloc_09_bad()
CWE401_Memory_Leak__char_calloc_09_bad
{    char * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(0,25,0)
(13,11,0)
(1,23,0)
(26,10,0)
(4,7,0)
(11,24,0)
(9,17,0)
(30,23,0)
(20,4,0)
(32,7,0)
(17,9,0)
(17,7,0)
(11,7,0)
(14,6,0)
(2,11,0)
(31,3,0)
(17,15,0)
(9,10,0)
(7,24,0)
(0,6,0)
(15,17,0)
(3,23,0)
(18,7,0)
(28,24,0)
(12,23,0)
(4,24,0)
(27,18,0)
(6,0,0)
(21,18,0)
(8,3,0)
(5,9,0)
(7,17,0)
(10,9,0)
(19,3,1)
(13,18,1)
(11,2,1)
(26,5,1)
(27,21,1)
(3,31,1)
(18,7,1)
(29,4,1)
(11,7,1)
(10,26,1)
(31,8,1)
(32,19,1)
(5,32,1)
(4,7,1)
(21,7,1)
(13,0,1)
(20,11,1)
(4,20,1)
(14,18,1)
(18,27,1)
(7,17,1)
(2,13,1)
(9,10,1)
(17,15,1)
(22,29,1)
(17,9,1)
(6,14,1)
(29,19,1)
(0,6,1)
(18,7,2)
(17,9,2)
(13,19,2)
(10,19,2)
(18,19,2)
(20,19,2)
(0,18,2)
(7,19,2)
(17,15,2)
(6,18,2)
(4,19,2)
(21,19,2)
(4,7,2)
(32,19,2)
(5,19,2)
(0,6,2)
(11,19,2)
(11,7,2)
(14,18,2)
(17,19,2)
(9,10,2)
(2,19,2)
(7,17,2)
(9,19,2)
(27,19,2)
(26,19,2)
-----------------------------------
(0,exit(-1)
(1,if(GLOBAL_CONST_TRUE)
(2,"A String")
(3,data = NULL)
(4,printLine(data)
(5,100)
(6,-1)
(7,data = (char *)
(8,data)
(9,calloc(100, sizeof(char)
(10,sizeof(char)
(11,strcpy(data, "A String")
(12,data)
(13,data)
(14,1)
(15,char *)
(16, sizeof(char)
(17,(char *)
(18,data == NULL)
(19,GLOBAL_CONST_TRUE)
(20,data)
(21,data)
(22,RET)
(23,)
(24,)
(25,)
(26,char)
(27,NULL)
(28,if (data == NULL)
(29,GLOBAL_CONST_TRUE)
(30,if(GLOBAL_CONST_TRUE)
(31,NULL)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^