-----label-----
0
-----code-----
static void good1()
{
    while(1)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            char * tmpData;
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            tmpData = (char *)realloc(data, (130000)*sizeof(char));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
            }
            free(data);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
47,48
47,49
50,51
51,52
51,53
51,54
52,53
54,55
57,58
58,59
58,60
59,60
61,62
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
70,71
72,73
72,74
72,75
73,74
75,76
77,78
77,79
78,79
80,81
81,82
81,83
84,85
84,86
85,86
85,87
86,87
88,89
90,91
90,92
90,93
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
98,101
99,100
101,102
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,46,48,49,53,55,56,60,62,66,69,71,74,76,79,82,83,87,89,94,96,100,102,103,107,109,113,115,116
-----computeFrom-----
25,26
25,27
32,33
32,34
64,65
64,66
77,78
77,79
85,86
85,87
92,93
92,94
-----guardedBy-----
87,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
static void good1(){    while(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }        break;    }}
static void
good1()
good1
{    while(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }        break;    }}
while(1)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }        break;    }
1
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }        break;    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            char * tmpData;            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            tmpData = (char *)realloc(data, (130000)*sizeof(char));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }            free(data);        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
char * tmpData;
char * tmpData;
char
* tmpData
*
tmpData
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
tmpData = (char *)realloc(data, (130000)*sizeof(char));
tmpData = (char *)realloc(data, (130000)*sizeof(char))
tmpData
tmpData
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
break;
-----joern-----
(29,14,0)
(13,39,0)
(35,36,0)
(13,48,0)
(4,26,0)
(55,49,0)
(5,24,0)
(33,49,0)
(55,37,0)
(11,9,0)
(54,44,0)
(41,17,0)
(16,43,0)
(46,37,0)
(42,39,0)
(37,55,0)
(14,39,0)
(32,5,0)
(53,43,0)
(45,53,0)
(12,33,0)
(22,16,0)
(44,21,0)
(24,5,0)
(48,13,0)
(8,39,0)
(50,16,0)
(37,24,0)
(42,33,0)
(33,43,0)
(3,24,0)
(38,47,0)
(39,13,0)
(47,30,0)
(31,26,0)
(30,47,0)
(15,49,0)
(16,33,0)
(49,26,0)
(2,55,0)
(36,39,0)
(19,39,0)
(30,1,0)
(36,26,0)
(40,8,0)
(28,8,0)
(55,2,0)
(51,42,0)
(21,44,0)
(17,49,0)
(53,33,0)
(13,54,0)
(23,17,0)
(0,26,0)
(42,26,0)
(39,26,0)
(25,33,0)
(24,37,0)
(44,54,0)
(6,44,0)
(34,36,0)
(52,26,0)
(27,7,0)
(14,26,0)
(10,21,0)
(49,55,0)
(54,13,0)
(26,7,0)
(37,39,0)
(51,53,1)
(45,16,1)
(5,32,1)
(22,33,1)
(38,8,1)
(37,24,1)
(18,27,1)
(35,34,1)
(36,35,1)
(17,41,1)
(12,25,1)
(42,33,1)
(53,45,1)
(32,3,1)
(53,33,1)
(49,55,1)
(14,39,1)
(36,39,1)
(13,54,1)
(19,20,1)
(50,22,1)
(37,39,1)
(40,28,1)
(8,40,1)
(42,51,1)
(16,50,1)
(28,39,1)
(29,36,1)
(16,33,1)
(17,49,1)
(47,38,1)
(44,21,1)
(21,10,1)
(13,48,1)
(6,19,1)
(23,49,1)
(33,49,1)
(25,17,1)
(34,8,1)
(34,30,1)
(55,2,1)
(51,17,1)
(54,44,1)
(46,15,1)
(8,39,1)
(24,5,1)
(15,14,1)
(55,37,1)
(27,42,1)
(10,6,1)
(30,47,1)
(18,20,1)
(39,13,1)
(42,39,1)
(14,29,1)
(33,12,1)
(3,46,1)
(41,23,1)
(55,2,2)
(54,44,2)
(13,54,2)
(33,17,2)
(15,20,2)
(3,20,2)
(16,17,2)
(5,20,2)
(37,39,2)
(8,39,2)
(13,20,2)
(46,20,2)
(36,39,2)
(21,20,2)
(44,21,2)
(53,33,2)
(42,20,2)
(30,8,2)
(42,33,2)
(55,20,2)
(49,55,2)
(12,17,2)
(17,49,2)
(24,20,2)
(47,8,2)
(54,20,2)
(39,13,2)
(22,17,2)
(49,20,2)
(37,24,2)
(37,20,2)
(14,39,2)
(34,20,2)
(44,20,2)
(40,20,2)
(50,17,2)
(42,39,2)
(38,8,2)
(35,20,2)
(29,20,2)
(55,37,2)
(16,33,2)
(51,20,2)
(30,47,2)
(25,17,2)
(19,20,2)
(28,20,2)
(10,20,2)
(6,20,2)
(17,20,2)
(39,20,2)
(23,20,2)
(14,20,2)
(32,20,2)
(36,20,2)
(24,5,2)
(41,20,2)
(8,20,2)
(53,17,2)
(27,20,2)
(45,17,2)
(13,48,2)
(33,49,2)
-----------------------------------
(0,if (tmpData != NULL)
(1,)
(2,char *)
(3,130000)
(4,data)
(5,sizeof(char)
(6,100)
(7,)
(8,data == NULL)
(9,)
(10,char)
(11,while(1)
(12,tmpData)
(13,(char *)
(14,printLine(data)
(15,tmpData)
(16,strcpy(data, "New String")
(17,tmpData != NULL)
(18,RET)
(19,data)
(20,1)
(21,sizeof(char)
(22,data)
(23,tmpData)
(24,(130000)
(25,data)
(26,)
(27,break;)
(28,data)
(29,data)
(30,exit(-1)
(31,if (data == NULL)
(32,char)
(33,data = tmpData)
(34,data)
(35,"A String")
(36,strcpy(data, "A String")
(37,realloc(data, (130000)
(38,1)
(39,* data = (char *)
(40,NULL)
(41,NULL)
(42,free(data)
(43,)
(44,100*sizeof(char)
(45,data)
(46,data)
(47,-1)
(48,char *)
(49,tmpData = (char *)
(50,"New String")
(51,data)
(52,tmpData)
(53,printLine(data)
(54,malloc(100*sizeof(char)
(55,(char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^