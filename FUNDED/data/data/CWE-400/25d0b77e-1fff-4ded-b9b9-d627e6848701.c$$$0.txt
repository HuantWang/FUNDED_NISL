-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    /* Initialize data */
    data = 0;
    /* FIX: Use a relatively small number for memory allocation */
    data = 20;
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
22,23
22,24
23,24
24,25
24,26
26,27
26,28
29,30
29,31
29,32
30,31
30,32
31,32
33,34
33,35
34,35
36,37
38,39
38,40
38,41
38,42
38,43
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
52,53
54,55
55,56
55,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
72,75
73,74
75,76
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
93,94
93,95
94,95
-----nextToken-----
2,4,9,11,15,16,20,21,25,27,28,32,35,37,42,45,47,50,53,56,57,61,63,68,70,74,76,78,82,84,88,90,95,96
-----computeFrom-----
13,14
13,15
18,19
18,20
30,31
30,32
40,41
40,42
51,52
51,53
59,60
59,61
-----guardedBy-----
37,78
32,53
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    /* Initialize data */    data = 0;    /* FIX: Use a relatively small number for memory allocation */    data = 20;    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = 20;
data = 20
data
data
20
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(38,29,0)
(30,10,0)
(12,29,0)
(4,12,0)
(12,19,0)
(38,28,0)
(29,38,0)
(13,36,0)
(36,0,0)
(26,24,0)
(31,28,0)
(7,16,0)
(8,2,0)
(1,40,0)
(32,23,0)
(13,21,0)
(23,5,0)
(2,12,0)
(16,19,0)
(25,19,0)
(29,12,0)
(16,12,0)
(20,32,0)
(29,37,0)
(2,19,0)
(35,30,0)
(33,41,0)
(39,0,0)
(17,21,0)
(18,41,0)
(24,0,0)
(27,19,0)
(15,36,0)
(9,40,0)
(23,32,0)
(34,27,0)
(43,31,0)
(37,29,0)
(21,13,0)
(28,38,0)
(42,24,0)
(40,0,0)
(41,12,0)
(28,31,0)
(3,28,0)
(28,36,0)
(27,12,0)
(11,36,0)
(6,13,0)
(22,2,0)
(14,16,1)
(8,22,1)
(41,12,1)
(20,41,1)
(22,41,1)
(38,28,1)
(6,36,1)
(4,13,1)
(30,35,1)
(2,12,1)
(12,29,1)
(3,4,1)
(26,42,1)
(41,33,1)
(16,7,1)
(11,24,1)
(18,12,1)
(23,32,1)
(29,38,1)
(14,30,1)
(22,23,1)
(15,11,1)
(43,3,1)
(28,36,1)
(35,13,1)
(36,15,1)
(24,26,1)
(2,8,1)
(7,27,1)
(33,18,1)
(34,2,1)
(31,43,1)
(27,34,1)
(21,17,1)
(28,31,1)
(13,21,1)
(27,12,1)
(29,37,1)
(17,6,1)
(13,36,1)
(32,20,1)
(16,12,1)
(3,13,2)
(34,13,2)
(23,32,2)
(31,13,2)
(41,12,2)
(33,13,2)
(32,41,2)
(30,13,2)
(35,13,2)
(20,41,2)
(13,21,2)
(28,36,2)
(8,13,2)
(12,13,2)
(29,13,2)
(28,31,2)
(7,13,2)
(2,12,2)
(2,13,2)
(38,28,2)
(4,13,2)
(41,13,2)
(29,38,2)
(27,13,2)
(38,13,2)
(16,12,2)
(29,37,2)
(16,13,2)
(12,29,2)
(13,36,2)
(22,13,2)
(28,13,2)
(27,12,2)
(23,41,2)
(43,13,2)
(18,13,2)
-----------------------------------
(0,)
(1,myString)
(2,strcpy(myString, HELLO_STRING)
(3,data)
(4,myString)
(5,)
(6,data)
(7,myString)
(8,HELLO_STRING)
(9,if (data > strlen(HELLO_STRING)
(10,)
(11,data)
(12,myString = (char *)
(13,data > strlen(HELLO_STRING)
(14,RET)
(15,20)
(16,free(myString)
(17,HELLO_STRING)
(18,myString)
(19,)
(20,1)
(21,strlen(HELLO_STRING)
(22,myString)
(23,exit(-1)
(24,data = 0)
(25,if (myString == NULL)
(26,0)
(27,printLine(myString)
(28,data*sizeof(char)
(29,(char *)
(30,printLine("Input is less than the length of the source string")
(31,sizeof(char)
(32,-1)
(33,NULL)
(34,myString)
(35,"Input is less than the length of the source string")
(36,data = 20)
(37,char *)
(38,malloc(data*sizeof(char)
(39,data)
(40,)
(41,myString == NULL)
(42,data)
(43,char)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^