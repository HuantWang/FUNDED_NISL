-----label-----
0
-----code-----
static void goodG2B1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,15,16,18,21,25,26,27,28,32,33,34,36,39,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114,115,116,120,121,122
-----computeFrom-----
13,14
13,15
30,31
30,32
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    size_t data;    /* Initialize data */    data = 0;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    size_t data;    /* Initialize data */    data = 0;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
data = 20;
data = 20
data
data
20
break;
switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(43,2,0)
(4,34,0)
(54,1,0)
(13,5,0)
(38,39,0)
(22,40,0)
(20,35,0)
(6,9,0)
(2,35,0)
(7,2,0)
(10,5,0)
(51,36,0)
(11,32,0)
(2,43,0)
(20,2,0)
(17,35,0)
(55,58,0)
(60,3,0)
(38,8,0)
(25,2,0)
(1,16,0)
(33,20,0)
(41,5,0)
(8,5,0)
(39,43,0)
(19,34,0)
(30,5,0)
(38,58,0)
(12,32,0)
(48,28,0)
(23,52,0)
(50,8,0)
(23,45,0)
(47,16,0)
(18,28,0)
(36,35,0)
(59,34,0)
(42,2,0)
(21,42,0)
(52,23,0)
(38,9,0)
(27,42,0)
(0,25,0)
(16,1,0)
(29,8,0)
(43,39,0)
(43,61,0)
(9,38,0)
(53,52,0)
(56,25,0)
(15,13,0)
(3,34,0)
(1,8,0)
(39,38,0)
(61,43,0)
(25,35,0)
(46,5,0)
(14,32,0)
(40,31,0)
(24,58,0)
(1,58,0)
(36,2,0)
(58,32,0)
(49,34,0)
(28,34,0)
(44,38,0)
(10,13,1)
(36,51,1)
(1,16,1)
(23,52,1)
(40,22,1)
(1,8,1)
(38,9,1)
(8,50,1)
(54,26,1)
(50,29,1)
(0,42,1)
(4,3,1)
(37,4,1)
(24,55,1)
(58,24,1)
(42,2,1)
(38,58,1)
(22,1,1)
(2,43,1)
(52,53,1)
(38,8,1)
(51,20,1)
(15,57,1)
(0,23,1)
(21,27,1)
(44,7,1)
(20,2,1)
(1,58,1)
(27,2,1)
(6,44,1)
(57,58,1)
(43,39,1)
(53,42,1)
(16,47,1)
(9,6,1)
(33,25,1)
(7,1,1)
(47,54,1)
(37,59,1)
(25,56,1)
(29,57,1)
(59,36,1)
(36,2,1)
(59,40,1)
(25,2,1)
(26,41,1)
(39,38,1)
(26,10,1)
(60,26,1)
(42,21,1)
(3,60,1)
(56,0,1)
(43,61,1)
(13,15,1)
(41,8,1)
(20,33,1)
(54,26,2)
(38,8,2)
(21,1,2)
(27,1,2)
(43,61,2)
(1,16,2)
(60,26,2)
(43,1,2)
(9,1,2)
(23,52,2)
(38,1,2)
(38,58,2)
(40,1,2)
(25,2,2)
(1,26,2)
(1,8,2)
(53,42,2)
(10,57,2)
(29,57,2)
(47,26,2)
(15,57,2)
(36,2,2)
(8,57,2)
(42,1,2)
(59,26,2)
(42,2,2)
(38,9,2)
(0,1,2)
(6,1,2)
(4,26,2)
(41,57,2)
(20,1,2)
(2,1,2)
(1,58,2)
(22,1,2)
(13,57,2)
(52,42,2)
(39,1,2)
(36,1,2)
(44,1,2)
(56,1,2)
(23,42,2)
(33,1,2)
(7,1,2)
(20,2,2)
(3,26,2)
(50,57,2)
(39,38,2)
(25,1,2)
(2,43,2)
(43,39,2)
(51,1,2)
(16,26,2)
-----------------------------------
(0,myString)
(1,data > strlen(HELLO_STRING)
(2,myString = (char *)
(3,printLine("Benign, fixed string")
(4,break;)
(5,)
(6,char)
(7,myString)
(8,data = 20)
(9,sizeof(char)
(10,break;)
(11,switch(7)
(12,switch(5)
(13,printLine("Benign, fixed string")
(14,data)
(15,"Benign, fixed string")
(16,strlen(HELLO_STRING)
(17,if (myString == NULL)
(18,if (data > strlen(HELLO_STRING)
(19,default:)
(20,printLine(myString)
(21,NULL)
(22,"Input is less than the length of the source string")
(23,exit(-1)
(24,0)
(25,strcpy(myString, HELLO_STRING)
(26,7)
(27,myString)
(28,)
(29,data)
(30,case 6:)
(31,)
(32,)
(33,myString)
(34,)
(35,)
(36,free(myString)
(37,RET)
(38,data*sizeof(char)
(39,malloc(data*sizeof(char)
(40,printLine("Input is less than the length of the source string")
(41,break;)
(42,myString == NULL)
(43,(char *)
(44,data)
(45,)
(46,default:)
(47,HELLO_STRING)
(48,myString)
(49,case 7:)
(50,20)
(51,myString)
(52,-1)
(53,1)
(54,data)
(55,data)
(56,HELLO_STRING)
(57,5)
(58,data = 0)
(59,break;)
(60,"Benign, fixed string")
(61,char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^