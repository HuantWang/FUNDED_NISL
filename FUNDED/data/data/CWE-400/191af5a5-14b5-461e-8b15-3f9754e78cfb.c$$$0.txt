-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(globalTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
69,70
70,71
71,72
71,73
72,73
75,76
76,77
77,78
77,79
78,79
80,81
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,73,74,79,81
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalTrue
globalTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,25,0)
(7,13,0)
(14,32,0)
(27,28,0)
(34,20,0)
(13,7,0)
(35,7,0)
(0,3,0)
(26,13,0)
(23,26,0)
(4,20,0)
(2,20,0)
(7,35,0)
(9,17,0)
(21,1,0)
(33,1,0)
(5,19,0)
(28,18,0)
(13,3,0)
(21,13,0)
(26,3,0)
(17,25,0)
(1,20,0)
(19,13,0)
(11,9,0)
(30,17,0)
(22,29,0)
(6,19,0)
(25,17,0)
(25,7,0)
(16,13,0)
(21,8,0)
(22,32,0)
(32,22,0)
(10,21,0)
(17,9,0)
(12,1,0)
(11,30,1)
(7,25,1)
(30,16,1)
(1,33,1)
(10,24,1)
(26,13,1)
(5,13,1)
(19,6,1)
(21,10,1)
(17,9,1)
(13,7,1)
(14,19,1)
(6,5,1)
(24,26,1)
(19,13,1)
(33,12,1)
(7,35,1)
(15,28,1)
(22,32,1)
(25,17,1)
(23,22,1)
(15,21,1)
(9,11,1)
(21,13,1)
(32,14,1)
(16,31,1)
(27,24,1)
(28,27,1)
(31,1,1)
(23,19,1)
(26,23,1)
(24,31,1)
(21,1,1)
(28,24,2)
(5,31,2)
(7,25,2)
(17,9,2)
(11,31,2)
(30,31,2)
(16,31,2)
(22,32,2)
(21,13,2)
(23,31,2)
(22,19,2)
(14,19,2)
(27,24,2)
(13,7,2)
(19,13,2)
(9,31,2)
(10,24,2)
(26,13,2)
(7,31,2)
(13,31,2)
(25,17,2)
(21,24,2)
(17,31,2)
(7,35,2)
(25,31,2)
(32,19,2)
(26,31,2)
(19,31,2)
(6,31,2)
(21,1,2)
-----------------------------------
(0,if (data == NULL)
(1,data = NULL)
(2,if(globalTrue)
(3,)
(4,if(globalFalse)
(5,data)
(6,NULL)
(7,(wchar_t *)
(8,)
(9,sizeof(wchar_t)
(10,data)
(11,wchar_t)
(12,data)
(13,data = (wchar_t *)
(14,1)
(15,RET)
(16,data)
(17,100*sizeof(wchar_t)
(18,)
(19,data == NULL)
(20,)
(21,free(data)
(22,exit(-1)
(23,data)
(24,globalFalse)
(25,malloc(100*sizeof(wchar_t)
(26,printWLine(data)
(27,"Benign, fixed string")
(28,printLine("Benign, fixed string")
(29,)
(30,100)
(31,globalTrue)
(32,-1)
(33,NULL)
(34,data)
(35,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^