-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_18_bad()
{
    goto sink;
sink:
    {
        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            wcscpy(data, L"New String");
            printWLine(data);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
46,49
47,48
49,50
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
63,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
72,74
73,74
75,76
76,77
76,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
85,87
85,88
86,87
87,88
87,89
87,90
88,89
90,91
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
-----nextToken-----
2,4,7,9,13,15,16,20,22,25,27,30,31,35,37,42,44,48,50,51,55,57,61,64,66,69,71,74,77,78,82,84,89,91,92,96,98,102,104
-----computeFrom-----
26,27
26,28
33,34
33,35
59,60
59,61
72,73
72,74
80,81
80,82
-----guardedBy-----
82,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_18_bad(){    goto sink;sink:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_18_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_18_bad
{    goto sink;sink:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }}
goto sink;
sink
sink:    {        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }
sink
{        wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));        if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }    }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)        {            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            wcscpy(data, L"New String");            printWLine(data);            free(data);        }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(10,33,0)
(13,38,0)
(7,38,0)
(41,11,0)
(0,31,0)
(3,5,0)
(31,28,0)
(20,13,0)
(23,35,0)
(38,7,0)
(40,35,0)
(38,13,0)
(6,13,0)
(11,33,0)
(20,33,0)
(5,9,0)
(27,33,0)
(9,19,0)
(10,20,0)
(19,11,0)
(33,15,0)
(9,20,0)
(9,5,0)
(12,21,0)
(39,19,0)
(21,11,0)
(32,9,0)
(19,39,0)
(17,11,0)
(18,0,0)
(7,42,0)
(26,33,0)
(21,34,0)
(22,10,0)
(37,7,0)
(17,34,0)
(31,0,0)
(42,7,0)
(5,3,0)
(29,20,0)
(16,33,0)
(8,5,0)
(43,30,0)
(19,9,0)
(1,30,0)
(14,15,0)
(30,11,0)
(13,6,0)
(25,42,0)
(24,3,0)
(13,20,0)
(35,20,0)
(36,15,0)
(11,19,0)
(2,17,0)
(42,25,1)
(9,20,1)
(35,20,1)
(10,22,1)
(30,11,1)
(12,17,1)
(19,39,1)
(23,40,1)
(41,10,1)
(32,41,1)
(21,11,1)
(17,11,1)
(30,43,1)
(10,20,1)
(22,35,1)
(3,24,1)
(43,1,1)
(31,0,1)
(35,23,1)
(38,7,1)
(22,31,1)
(11,19,1)
(5,3,1)
(13,38,1)
(9,5,1)
(4,30,1)
(2,30,1)
(1,11,1)
(8,32,1)
(17,2,1)
(40,20,1)
(18,35,1)
(29,36,1)
(4,21,1)
(0,18,1)
(21,12,1)
(37,29,1)
(24,8,1)
(19,9,1)
(7,42,1)
(25,37,1)
(20,13,1)
(13,6,1)
(35,20,2)
(13,6,2)
(2,30,2)
(21,30,2)
(21,11,2)
(5,3,2)
(18,35,2)
(11,19,2)
(20,13,2)
(38,7,2)
(31,0,2)
(30,11,2)
(9,5,2)
(17,30,2)
(13,38,2)
(12,30,2)
(19,39,2)
(9,20,2)
(0,35,2)
(7,42,2)
(19,9,2)
(31,35,2)
(10,20,2)
(17,11,2)
-----------------------------------
(0,-1)
(1,data)
(2,data)
(3,sizeof(wchar_t)
(4,RET)
(5,(130000)
(6,wchar_t *)
(7,100*sizeof(wchar_t)
(8,130000)
(9,realloc(data, (130000)
(10,printWLine(data)
(11,data = (wchar_t *)
(12,data)
(13,(wchar_t *)
(14,sink:)
(15,)
(16,data)
(17,printWLine(data)
(18,1)
(19,(wchar_t *)
(20,* data = (wchar_t *)
(21,free(data)
(22,data)
(23,NULL)
(24,wchar_t)
(25,wchar_t)
(26,if (data == NULL)
(27,if (data != NULL)
(28,)
(29,data)
(30,data != NULL)
(31,exit(-1)
(32,data)
(33,)
(34,)
(35,data == NULL)
(36,goto sink;)
(37,100)
(38,malloc(100*sizeof(wchar_t)
(39,wchar_t *)
(40,data)
(41,data)
(42,sizeof(wchar_t)
(43,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^