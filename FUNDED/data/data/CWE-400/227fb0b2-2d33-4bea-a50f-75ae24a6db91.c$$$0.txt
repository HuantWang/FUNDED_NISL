-----label-----
0
-----code-----
static void goodG2B2()
{
    int64_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
61,62
62,63
62,64
63,64
67,68
67,69
69,70
69,71
69,72
69,73
69,74
69,75
70,71
75,76
76,77
76,78
77,78
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,31,33,36,38,42,43,48,49,50,54,57,58,59,60,64,65,66,68,71,72,73,74,78,79,80
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    int64_t * data;    data = NULL;    switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(4,23,0)
(10,19,0)
(6,30,0)
(21,25,0)
(8,19,0)
(3,4,0)
(17,19,0)
(37,22,0)
(13,23,0)
(23,13,0)
(23,6,0)
(14,9,0)
(4,19,0)
(12,18,0)
(30,20,0)
(16,18,0)
(0,17,0)
(2,19,0)
(9,14,0)
(27,25,0)
(34,19,0)
(31,18,0)
(22,25,0)
(1,19,0)
(28,18,0)
(5,25,0)
(33,14,0)
(30,6,0)
(11,20,0)
(20,30,0)
(6,23,0)
(15,30,0)
(14,4,0)
(9,19,0)
(35,25,0)
(26,28,0)
(36,14,0)
(29,28,0)
(23,4,0)
(10,9,1)
(0,24,1)
(24,28,1)
(3,24,1)
(9,14,1)
(33,36,1)
(20,11,1)
(2,17,1)
(32,10,1)
(30,20,1)
(37,32,1)
(11,15,1)
(36,34,1)
(14,4,1)
(6,30,1)
(23,6,1)
(17,0,1)
(22,37,1)
(15,3,1)
(29,26,1)
(32,2,1)
(34,4,1)
(7,35,1)
(35,32,1)
(28,29,1)
(21,22,1)
(23,13,1)
(7,21,1)
(14,33,1)
(4,23,1)
(3,24,2)
(22,32,2)
(20,24,2)
(23,6,2)
(15,24,2)
(10,24,2)
(4,24,2)
(6,24,2)
(6,30,2)
(14,4,2)
(21,32,2)
(9,24,2)
(34,24,2)
(9,14,2)
(23,24,2)
(30,24,2)
(4,23,2)
(17,24,2)
(33,24,2)
(35,32,2)
(0,24,2)
(37,32,2)
(11,24,2)
(14,24,2)
(2,24,2)
(36,24,2)
(23,13,2)
(30,20,2)
-----------------------------------
(0,"Benign, fixed string")
(1,default:)
(2,break;)
(3,data)
(4,data = (int64_t *)
(5,case 7:)
(6,ALLOCA(100*sizeof(int64_t)
(7,RET)
(8,case 6:)
(9,printLongLongLine(data[0])
(10,break;)
(11,int64_t)
(12,switch(7)
(13,int64_t *)
(14,data[0])
(15,100)
(16,switch(6)
(17,printLine("Benign, fixed string")
(18,)
(19,)
(20,sizeof(int64_t)
(21,break;)
(22,printLine("Benign, fixed string")
(23,(int64_t *)
(24,6)
(25,)
(26,data)
(27,default:)
(28,data = NULL)
(29,NULL)
(30,100*sizeof(int64_t)
(31,data)
(32,7)
(33,0)
(34,L)
(35,break;)
(36,data)
(37,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^