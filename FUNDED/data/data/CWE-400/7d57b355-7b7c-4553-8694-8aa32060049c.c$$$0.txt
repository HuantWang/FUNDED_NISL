-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_malloc_17_bad()
{
    int i,j;
    char * data;
    data = NULL;
    for(i = 0; i < 1; i++)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)malloc(100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
38,42
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
70,71
71,72
71,73
71,74
72,73
74,75
77,78
78,79
78,80
79,80
81,82
83,84
83,85
83,86
83,87
84,85
85,86
85,87
86,87
89,90
89,91
90,91
93,94
94,95
96,97
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,67,69,73,75,76,80,82,87,88,91,92,95,97
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
58,59
58,60
85,86
85,87
89,90
89,91
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_malloc_17_bad(){    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_malloc_17_bad()
CWE401_Memory_Leak__char_malloc_17_bad
{    int i,j;    char * data;    data = NULL;    for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int i,j;
int i,j;
int
i
i
j
j
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(i = 0; i < 1; i++)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)malloc(100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(34,21,0)
(11,38,0)
(35,41,0)
(42,30,0)
(44,7,0)
(22,5,0)
(9,8,0)
(23,44,0)
(26,34,0)
(31,47,0)
(29,31,0)
(28,44,0)
(4,8,0)
(40,2,0)
(21,11,0)
(3,5,0)
(17,24,0)
(25,31,0)
(33,47,0)
(13,23,0)
(39,45,0)
(17,19,0)
(18,10,0)
(36,30,0)
(6,5,0)
(7,11,0)
(41,21,0)
(12,21,0)
(11,21,0)
(45,14,0)
(11,7,0)
(21,14,0)
(10,47,0)
(0,5,0)
(16,45,0)
(20,5,0)
(44,23,0)
(8,5,0)
(32,41,0)
(38,11,0)
(2,30,0)
(48,47,0)
(46,27,0)
(27,30,0)
(24,17,0)
(7,44,0)
(43,14,0)
(1,24,0)
(15,27,0)
(34,14,0)
(45,21,0)
(40,27,1)
(29,47,1)
(39,16,1)
(44,23,1)
(42,36,1)
(41,32,1)
(45,39,1)
(27,30,1)
(34,21,1)
(29,10,1)
(2,30,1)
(7,44,1)
(11,7,1)
(46,2,1)
(35,21,1)
(46,30,1)
(10,47,1)
(11,38,1)
(37,27,1)
(8,9,1)
(34,26,1)
(13,28,1)
(9,4,1)
(36,31,1)
(45,21,1)
(12,31,1)
(31,47,1)
(41,21,1)
(32,35,1)
(30,42,1)
(31,25,1)
(24,1,1)
(23,13,1)
(27,15,1)
(10,18,1)
(33,8,1)
(47,48,1)
(15,46,1)
(28,12,1)
(26,45,1)
(1,41,1)
(18,34,1)
(16,41,1)
(21,11,1)
(25,29,1)
(48,33,1)
(17,24,1)
(16,17,1)
(2,40,1)
(13,31,2)
(45,31,2)
(21,31,2)
(12,31,2)
(2,30,2)
(10,47,2)
(46,27,2)
(41,31,2)
(24,41,2)
(11,38,2)
(17,24,2)
(44,23,2)
(11,7,2)
(11,31,2)
(39,31,2)
(45,21,2)
(40,27,2)
(31,31,2)
(18,31,2)
(25,31,2)
(2,27,2)
(34,21,2)
(44,31,2)
(35,31,2)
(7,44,2)
(17,41,2)
(10,31,2)
(23,31,2)
(41,21,2)
(32,31,2)
(28,31,2)
(15,27,2)
(7,31,2)
(27,30,2)
(27,27,2)
(16,31,2)
(26,31,2)
(34,31,2)
(21,11,2)
(29,31,2)
(31,47,2)
(1,41,2)
-----------------------------------
(0,j)
(1,1)
(2,j++)
(3,for(j = 0; j < 1; j++)
(4,data)
(5,)
(6,for(i = 0; i < 1; i++)
(7,malloc(100*sizeof(char)
(8,data = NULL)
(9,NULL)
(10,i++)
(11,(char *)
(12,data)
(13,char)
(14,)
(15,1)
(16,data)
(17,exit(-1)
(18,i)
(19,)
(20,data)
(21,data = (char *)
(22,i)
(23,sizeof(char)
(24,-1)
(25,1)
(26,data)
(27,j < 1)
(28,100)
(29,i)
(30,j = 0)
(31,i < 1)
(32,NULL)
(33,i)
(34,printLine(data)
(35,data)
(36,j)
(37,RET)
(38,char *)
(39,"A String")
(40,j)
(41,data == NULL)
(42,0)
(43,if (data == NULL)
(44,100*sizeof(char)
(45,strcpy(data, "A String")
(46,j)
(47,i = 0)
(48,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^