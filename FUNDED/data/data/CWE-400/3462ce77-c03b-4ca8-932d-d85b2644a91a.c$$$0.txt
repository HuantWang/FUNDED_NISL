-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING) && data < 100)
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
42,44
43,44
44,45
44,46
46,47
46,48
49,50
49,51
49,52
50,51
50,52
51,52
51,53
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
63,64
63,65
63,66
63,67
63,68
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
71,72
73,74
73,75
74,75
76,77
76,78
77,78
79,80
80,81
80,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
94,95
96,97
97,98
97,99
97,100
98,99
100,101
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
116,117
117,118
118,119
118,120
119,120
124,125
125,126
125,127
126,127
-----nextToken-----
2,4,9,11,15,16,18,21,25,28,29,30,34,35,36,38,41,45,47,48,53,56,58,61,62,67,70,72,75,78,81,82,86,88,93,95,99,101,103,107,109,113,115,120,121,122,123,127,128,129
-----computeFrom-----
13,14
13,15
23,24
23,25
50,51
50,52
51,52
51,53
59,60
59,61
65,66
65,67
76,77
76,78
84,85
84,86
-----guardedBy-----
58,103
61,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set data to a random value */        data = rand();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = rand();
data = rand()
data
data
rand()
rand
rand
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(54,17,0)
(60,29,0)
(9,52,0)
(23,58,0)
(55,12,0)
(48,17,0)
(57,36,0)
(35,21,0)
(21,12,0)
(26,38,0)
(0,12,0)
(4,21,0)
(26,29,0)
(36,27,0)
(3,58,0)
(47,58,0)
(23,15,0)
(29,25,0)
(30,22,0)
(50,8,0)
(33,22,0)
(20,8,0)
(12,21,0)
(51,29,0)
(44,25,0)
(18,17,0)
(40,21,0)
(13,46,0)
(38,26,0)
(6,23,0)
(52,17,0)
(64,25,0)
(12,0,0)
(32,52,0)
(42,58,0)
(15,23,0)
(65,40,0)
(12,55,0)
(31,26,0)
(22,23,0)
(56,35,0)
(20,55,0)
(34,49,0)
(59,48,0)
(20,23,0)
(21,27,0)
(28,40,0)
(35,27,0)
(41,17,0)
(2,20,0)
(38,22,0)
(14,58,0)
(11,26,0)
(5,14,0)
(26,31,0)
(46,21,0)
(22,38,0)
(8,20,0)
(46,27,0)
(39,17,0)
(61,31,0)
(26,23,0)
(49,34,0)
(22,29,0)
(53,34,0)
(36,21,0)
(55,20,0)
(20,29,0)
(16,35,0)
(49,45,0)
(7,63,0)
(63,62,0)
(37,25,0)
(1,27,0)
(19,58,0)
(12,55,1)
(36,21,1)
(48,59,1)
(61,11,1)
(41,36,1)
(7,38,1)
(26,31,1)
(22,33,1)
(43,29,1)
(11,24,1)
(16,40,1)
(10,41,1)
(28,65,1)
(40,28,1)
(46,13,1)
(16,49,1)
(20,8,1)
(38,26,1)
(24,19,1)
(36,57,1)
(59,24,1)
(23,15,1)
(5,43,1)
(4,38,1)
(22,23,1)
(33,30,1)
(29,51,1)
(30,26,1)
(63,7,1)
(13,35,1)
(35,56,1)
(8,50,1)
(12,0,1)
(26,23,1)
(35,21,1)
(14,5,1)
(18,48,1)
(2,4,1)
(49,34,1)
(57,46,1)
(38,22,1)
(50,2,1)
(65,21,1)
(21,12,1)
(40,21,1)
(20,29,1)
(55,20,1)
(6,43,1)
(10,18,1)
(53,40,1)
(19,14,1)
(46,21,1)
(34,53,1)
(42,23,1)
(31,61,1)
(15,6,1)
(20,23,1)
(24,42,1)
(41,63,1)
(56,16,1)
(51,60,1)
(26,29,1)
(22,29,1)
(11,24,2)
(30,26,2)
(15,43,2)
(50,38,2)
(33,26,2)
(22,23,2)
(53,40,2)
(20,23,2)
(35,21,2)
(42,43,2)
(23,43,2)
(65,38,2)
(26,24,2)
(31,24,2)
(40,38,2)
(63,38,2)
(18,24,2)
(35,38,2)
(61,24,2)
(36,21,2)
(26,29,2)
(13,38,2)
(57,38,2)
(28,38,2)
(20,29,2)
(38,24,2)
(48,24,2)
(46,21,2)
(26,23,2)
(14,43,2)
(23,15,2)
(21,38,2)
(8,38,2)
(34,40,2)
(56,38,2)
(12,55,2)
(55,20,2)
(22,29,2)
(12,38,2)
(16,38,2)
(6,43,2)
(26,31,2)
(20,8,2)
(49,40,2)
(22,26,2)
(7,38,2)
(46,38,2)
(21,12,2)
(49,34,2)
(55,38,2)
(5,43,2)
(59,24,2)
(40,21,2)
(36,38,2)
(41,24,2)
(12,0,2)
(19,43,2)
(20,38,2)
(38,22,2)
(4,38,2)
(38,26,2)
(2,38,2)
-----------------------------------
(0,char *)
(1,if (myString == NULL)
(2,data)
(3,case 6:)
(4,myString)
(5,"Benign, fixed string")
(6,data)
(7,"Input is less than the length of the source string or too large")
(8,sizeof(char)
(9,myString)
(10,RET)
(11,data)
(12,(char *)
(13,myString)
(14,printLine("Benign, fixed string")
(15,rand()
(16,myString)
(17,)
(18,break;)
(19,break;)
(20,data*sizeof(char)
(21,myString = (char *)
(22,data < 100)
(23,data = rand()
(24,7)
(25,)
(26,data > strlen(HELLO_STRING)
(27,)
(28,NULL)
(29,data = 0)
(30,data)
(31,strlen(HELLO_STRING)
(32,if (data > strlen(HELLO_STRING)
(33,100)
(34,-1)
(35,strcpy(myString, HELLO_STRING)
(36,free(myString)
(37,switch(7)
(38,data > strlen(HELLO_STRING)
(39,default:)
(40,myString == NULL)
(41,break;)
(42,break;)
(43,6)
(44,data)
(45,)
(46,printLine(myString)
(47,default:)
(48,printLine("Benign, fixed string")
(49,exit(-1)
(50,char)
(51,0)
(52,)
(53,1)
(54,case 7:)
(55,malloc(data*sizeof(char)
(56,HELLO_STRING)
(57,myString)
(58,)
(59,"Benign, fixed string")
(60,data)
(61,HELLO_STRING)
(62,)
(63,printLine("Input is less than the length of the source string or too large")
(64,switch(6)
(65,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^