-----label-----
0
-----code-----
void
winimg_destroy(imglist *img)
{
  if (img->hdc) {
    cdc++;
    DeleteDC(img->hdc);
    DeleteObject(img->hbmp);
  } else if (img->pixels) {
    //printf("winimg_destroy free pixels %p\n", img->pixels);
    free(img->pixels);
  } else {
    strage_destroy(img->strage);
  }
  //printf("winimg_destroy free img %p\n", img);
  free(img);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
13,15
14,15
17,18
17,19
17,20
18,19
19,20
20,21
22,23
23,24
23,25
24,25
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
34,36
35,36
38,39
38,40
38,41
39,40
39,41
40,41
43,44
44,45
45,46
45,47
46,47
48,49
48,50
49,50
52,53
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
-----nextToken-----
2,4,7,9,10,15,16,21,25,28,29,33,36,37,41,42,47,50,51,56,59,60,64,66
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidwinimg_destroy(imglist *img){  if (img->hdc) {    cdc++;    DeleteDC(img->hdc);    DeleteObject(img->hbmp);  } else if (img->pixels) {    //printf("winimg_destroy free pixels %p\n", img->pixels);    free(img->pixels);  } else {    strage_destroy(img->strage);  }  //printf("winimg_destroy free img %p\n", img);  free(img);}
void
winimg_destroy(imglist *img)
winimg_destroy
imglist *img
imglist
imglist
*img
*
img
{  if (img->hdc) {    cdc++;    DeleteDC(img->hdc);    DeleteObject(img->hbmp);  } else if (img->pixels) {    //printf("winimg_destroy free pixels %p\n", img->pixels);    free(img->pixels);  } else {    strage_destroy(img->strage);  }  //printf("winimg_destroy free img %p\n", img);  free(img);}
if (img->hdc) {    cdc++;    DeleteDC(img->hdc);    DeleteObject(img->hbmp);  } else if (img->pixels) {    //printf("winimg_destroy free pixels %p\n", img->pixels);    free(img->pixels);  } else {    strage_destroy(img->strage);  }
img->hdc
img
img
hdc
{    cdc++;    DeleteDC(img->hdc);    DeleteObject(img->hbmp);  }
cdc++;
cdc++
cdc
cdc
DeleteDC(img->hdc);
DeleteDC(img->hdc)
DeleteDC
DeleteDC
img->hdc
img
img
hdc
DeleteObject(img->hbmp);
DeleteObject(img->hbmp)
DeleteObject
DeleteObject
img->hbmp
img
img
hbmp
if (img->pixels) {    //printf("winimg_destroy free pixels %p\n", img->pixels);    free(img->pixels);  } else {    strage_destroy(img->strage);  }
img->pixels
img
img
pixels
{    //printf("winimg_destroy free pixels %p\n", img->pixels);    free(img->pixels);  }
free(img->pixels);
free(img->pixels)
free
free
img->pixels
img
img
pixels
{    strage_destroy(img->strage);  }
strage_destroy(img->strage);
strage_destroy(img->strage)
strage_destroy
strage_destroy
img->strage
img
img
strage
free(img);
free(img)
free
free
img
img
-----joern-----
(30,10,0)
(17,24,0)
(19,4,0)
(11,5,0)
(2,20,0)
(25,20,0)
(3,7,0)
(7,15,0)
(4,24,0)
(14,32,0)
(5,6,0)
(29,17,0)
(10,27,0)
(9,17,0)
(22,4,0)
(5,24,0)
(25,24,0)
(31,27,0)
(31,4,0)
(26,5,0)
(6,12,0)
(7,24,0)
(6,5,0)
(30,24,0)
(32,24,0)
(21,27,0)
(23,21,0)
(0,32,0)
(15,7,0)
(4,31,0)
(10,30,0)
(15,13,0)
(16,30,0)
(18,30,0)
(8,7,0)
(28,25,0)
(18,16,1)
(21,23,1)
(11,26,1)
(7,8,1)
(4,24,1)
(22,21,1)
(5,11,1)
(28,10,1)
(15,7,1)
(8,3,1)
(0,14,1)
(28,15,1)
(7,24,1)
(5,24,1)
(17,29,1)
(6,5,1)
(1,25,1)
(23,32,1)
(30,18,1)
(31,4,1)
(28,6,1)
(19,22,1)
(26,17,1)
(32,24,1)
(17,24,1)
(9,32,1)
(3,17,1)
(25,28,1)
(30,24,1)
(10,30,1)
(32,0,1)
(29,9,1)
(4,19,1)
(16,31,1)
(25,24,1)
(6,5,2)
(9,32,2)
(4,24,2)
(5,17,2)
(31,32,2)
(11,17,2)
(10,32,2)
(17,24,2)
(10,30,2)
(6,17,2)
(21,32,2)
(26,17,2)
(15,17,2)
(31,4,2)
(15,7,2)
(19,32,2)
(16,32,2)
(25,24,2)
(5,24,2)
(18,32,2)
(7,24,2)
(32,24,2)
(17,32,2)
(23,32,2)
(30,24,2)
(29,32,2)
(22,32,2)
(7,17,2)
(30,32,2)
(3,17,2)
(8,17,2)
(4,32,2)
-----------------------------------
(0,hdc)
(1,RET)
(2,if (img->hdc)
(3,img)
(4,img->hdc)
(5,img->pixels)
(6,free(img->pixels)
(7,img->strage)
(8,strage)
(9,img)
(10,DeleteObject(img->hbmp)
(11,pixels)
(12,)
(13,)
(14,img)
(15,strage_destroy(img->strage)
(16,img)
(17,img->pixels)
(18,hbmp)
(19,hdc)
(20,)
(21,cdc++)
(22,img)
(23,cdc)
(24,imglist *img)
(25,free(img)
(26,img)
(27,)
(28,img)
(29,pixels)
(30,img->hbmp)
(31,DeleteDC(img->hdc)
(32,img->hdc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^