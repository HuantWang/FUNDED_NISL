-----label-----
1
-----code-----
int recv_data(int fd)
{
	struct client *c;
	ssize_t len;

	c = client_find(fd);
	if (!c) {
#ifdef DEBUG
		syslog(LOG_WARN, "could not find a client session for fd %d", fd);
		int i;
		for (i = 0; i < NUM_CLIENTS; i++) {
			if (CLIENTS[i].fd == -1) continue;
			syslog(LOG_WARN, " client[%d] fd = %d // %s", i,
					CLIENTS[i].fd, CLIENTS[i].addr);
		}
#endif
		return 0;
	}

	vdebug("reading from %s, fd %d", c->addr, fd);
	for (;;) {
		vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",
				fd, c->offset, sizeof(c->pdu), c->addr);

		len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset);
		if (len <= 0) {
			if (errno == EAGAIN) return 0;
			if (len == 0)
				vdebug("EOF from %s, fd %d", c->addr, fd);
			else
				syslog(LOG_INFO, "failed to read from %s: %s",
						c->addr, strerror(errno));

			client_close(fd);
			break;
		}

		c->offset += len;
		c->bytes += len;
		vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",
				fd, len, c->offset, c->addr);

		if (c->offset < sizeof(c->pdu)) {
			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",
					c->offset, sizeof(c->pdu), c->addr, fd);
			continue;
		}

		c->offset = 0;
		if (pdu_unpack(&c->pdu) != 0) {
			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);
#ifdef DEBUG
			uint8_t *byte = ((uint8_t*)(&c->pdu));
			int off = 0;
			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)
				;
			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);
#endif
			memset(&c->pdu, 0, sizeof(c->pdu));
			continue;
		}

		syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",
				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,
				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output);

		iris_call_submit_result(&c->pdu);
		memset(&c->pdu, 0, sizeof(c->pdu));
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
12,13
14,15
14,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
30,31
32,33
32,34
33,34
34,35
36,37
37,38
39,40
40,41
40,42
40,43
40,44
41,42
44,45
44,46
45,46
48,49
50,51
50,52
52,53
52,54
52,55
52,56
52,57
52,58
52,59
52,60
52,61
52,62
52,63
52,64
53,54
54,55
54,56
54,57
54,58
54,59
54,60
55,56
58,59
60,61
60,62
61,62
64,65
65,66
66,67
66,68
67,68
70,71
70,72
71,72
74,75
75,76
75,77
76,77
78,79
78,80
78,81
78,82
79,80
81,82
83,84
83,85
84,85
84,86
85,86
87,88
89,90
90,91
91,92
91,93
92,93
95,96
95,97
96,97
99,100
99,101
100,101
100,102
101,102
104,105
104,106
104,107
104,108
105,106
105,107
106,107
106,108
107,108
109,110
111,112
113,114
113,115
113,116
114,115
114,116
115,116
118,119
119,120
119,121
119,122
119,123
120,121
123,124
123,125
124,125
127,128
129,130
130,131
130,132
130,133
130,134
130,135
131,132
133,134
136,137
136,138
137,138
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
152,153
153,154
153,155
154,155
154,156
155,156
158,159
160,161
161,162
161,163
162,163
162,164
163,164
166,167
168,169
169,170
169,171
169,172
169,173
169,174
169,175
170,171
173,174
175,176
177,178
177,179
178,179
181,182
181,183
182,183
185,186
185,187
186,187
186,188
187,188
187,189
188,189
191,192
192,193
193,194
193,195
194,195
197,198
197,199
198,199
199,200
199,201
199,202
199,203
199,204
199,205
200,201
203,204
203,205
204,205
207,208
208,209
209,210
209,211
210,211
213,214
213,215
214,215
217,218
220,221
221,222
221,223
222,223
222,224
223,224
227,228
227,229
228,229
228,230
229,230
229,231
230,231
232,233
233,234
233,235
234,235
238,239
238,240
238,241
239,240
240,241
240,242
240,243
240,244
240,245
241,242
243,244
246,247
246,248
247,248
250,251
252,253
253,254
253,255
253,256
253,257
254,255
256,257
257,258
257,259
258,259
262,263
263,264
264,265
264,266
265,266
269,270
270,271
270,272
270,273
270,274
270,275
270,276
270,277
270,278
270,279
270,280
271,272
273,274
276,277
276,278
277,278
277,279
278,279
282,283
282,284
283,284
283,285
284,285
288,289
288,290
289,290
289,291
290,291
293,294
293,295
294,295
294,296
295,296
299,300
299,301
300,301
300,302
301,302
305,306
305,307
306,307
306,308
307,308
311,312
311,313
312,313
312,314
313,314
317,318
317,319
318,319
318,320
319,320
323,324
324,325
324,326
325,326
327,328
328,329
328,330
329,330
332,333
333,334
333,335
333,336
333,337
334,335
336,337
337,338
337,339
338,339
342,343
343,344
344,345
344,346
345,346
348,349
-----nextToken-----
2,4,6,8,13,15,16,20,22,26,29,31,35,38,42,43,46,47,49,51,56,57,59,62,63,68,69,72,73,77,80,82,86,88,93,94,97,98,102,103,108,110,112,116,117,121,122,125,126,128,132,134,135,138,139,142,144,148,150,151,156,157,159,164,165,167,171,172,174,176,179,180,183,184,189,190,195,196,201,202,205,206,211,212,215,216,218,219,224,225,226,231,235,236,237,242,244,245,248,249,251,255,259,260,261,266,267,268,272,274,275,279,280,281,285,286,287,291,292,296,297,298,302,303,304,308,309,310,314,315,316,320,321,322,326,330,331,335,339,340,341,346,347,349
-----computeFrom-----
24,25
24,26
75,76
75,77
100,101
100,102
106,107
106,108
114,115
114,116
153,154
153,155
161,162
161,163
186,187
186,188
221,222
221,223
228,229
228,230
-----guardedBy-----
102,116
196,212
195,215
190,206
236,267
235,266
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int recv_data(int fd){	struct client *c;	ssize_t len;	c = client_find(fd);	if (!c) {#ifdef DEBUG		syslog(LOG_WARN, "could not find a client session for fd %d", fd);		int i;		for (i = 0; i < NUM_CLIENTS; i++) {			if (CLIENTS[i].fd == -1) continue;			syslog(LOG_WARN, " client[%d] fd = %d // %s", i,					CLIENTS[i].fd, CLIENTS[i].addr);		}#endif		return 0;	}	vdebug("reading from %s, fd %d", c->addr, fd);	for (;;) {		vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",				fd, c->offset, sizeof(c->pdu), c->addr);		len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset);		if (len <= 0) {			if (errno == EAGAIN) return 0;			if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));			client_close(fd);			break;		}		c->offset += len;		c->bytes += len;		vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",				fd, len, c->offset, c->addr);		if (c->offset < sizeof(c->pdu)) {			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);			continue;		}		c->offset = 0;		if (pdu_unpack(&c->pdu) != 0) {			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);#ifdef DEBUG			uint8_t *byte = ((uint8_t*)(&c->pdu));			int off = 0;			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)				;			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);#endif			memset(&c->pdu, 0, sizeof(c->pdu));			continue;		}		syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output);		iris_call_submit_result(&c->pdu);		memset(&c->pdu, 0, sizeof(c->pdu));	}	return 0;}
int
recv_data(int fd)
recv_data
int fd
int
fd
fd
{	struct client *c;	ssize_t len;	c = client_find(fd);	if (!c) {#ifdef DEBUG		syslog(LOG_WARN, "could not find a client session for fd %d", fd);		int i;		for (i = 0; i < NUM_CLIENTS; i++) {			if (CLIENTS[i].fd == -1) continue;			syslog(LOG_WARN, " client[%d] fd = %d // %s", i,					CLIENTS[i].fd, CLIENTS[i].addr);		}#endif		return 0;	}	vdebug("reading from %s, fd %d", c->addr, fd);	for (;;) {		vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",				fd, c->offset, sizeof(c->pdu), c->addr);		len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset);		if (len <= 0) {			if (errno == EAGAIN) return 0;			if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));			client_close(fd);			break;		}		c->offset += len;		c->bytes += len;		vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",				fd, len, c->offset, c->addr);		if (c->offset < sizeof(c->pdu)) {			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);			continue;		}		c->offset = 0;		if (pdu_unpack(&c->pdu) != 0) {			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);#ifdef DEBUG			uint8_t *byte = ((uint8_t*)(&c->pdu));			int off = 0;			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)				;			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);#endif			memset(&c->pdu, 0, sizeof(c->pdu));			continue;		}		syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output);		iris_call_submit_result(&c->pdu);		memset(&c->pdu, 0, sizeof(c->pdu));	}	return 0;}
struct client *c;
struct client *c;
struct client
client
*c
*
c
ssize_t len;
ssize_t len;
ssize_t
ssize_t
len
len
c = client_find(fd);
c = client_find(fd)
c
c
client_find(fd)
client_find
client_find
fd
fd
if (!c) {#ifdef DEBUG		syslog(LOG_WARN, "could not find a client session for fd %d", fd);		int i;		for (i = 0; i < NUM_CLIENTS; i++) {			if (CLIENTS[i].fd == -1) continue;			syslog(LOG_WARN, " client[%d] fd = %d // %s", i,					CLIENTS[i].fd, CLIENTS[i].addr);		}#endif		return 0;	}
!c
c
c
{#ifdef DEBUG		syslog(LOG_WARN, "could not find a client session for fd %d", fd);		int i;		for (i = 0; i < NUM_CLIENTS; i++) {			if (CLIENTS[i].fd == -1) continue;			syslog(LOG_WARN, " client[%d] fd = %d // %s", i,					CLIENTS[i].fd, CLIENTS[i].addr);		}#endif		return 0;	}
return 0;
0
vdebug("reading from %s, fd %d", c->addr, fd);
vdebug("reading from %s, fd %d", c->addr, fd)
vdebug
vdebug
"reading from %s, fd %d"
c->addr
c
c
addr
fd
fd
for (;;) {		vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",				fd, c->offset, sizeof(c->pdu), c->addr);		len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset);		if (len <= 0) {			if (errno == EAGAIN) return 0;			if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));			client_close(fd);			break;		}		c->offset += len;		c->bytes += len;		vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",				fd, len, c->offset, c->addr);		if (c->offset < sizeof(c->pdu)) {			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);			continue;		}		c->offset = 0;		if (pdu_unpack(&c->pdu) != 0) {			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);#ifdef DEBUG			uint8_t *byte = ((uint8_t*)(&c->pdu));			int off = 0;			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)				;			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);#endif			memset(&c->pdu, 0, sizeof(c->pdu));			continue;		}		syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output);		iris_call_submit_result(&c->pdu);		memset(&c->pdu, 0, sizeof(c->pdu));	}
;
{		vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",				fd, c->offset, sizeof(c->pdu), c->addr);		len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset);		if (len <= 0) {			if (errno == EAGAIN) return 0;			if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));			client_close(fd);			break;		}		c->offset += len;		c->bytes += len;		vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",				fd, len, c->offset, c->addr);		if (c->offset < sizeof(c->pdu)) {			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);			continue;		}		c->offset = 0;		if (pdu_unpack(&c->pdu) != 0) {			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);#ifdef DEBUG			uint8_t *byte = ((uint8_t*)(&c->pdu));			int off = 0;			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)				;			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);#endif			memset(&c->pdu, 0, sizeof(c->pdu));			continue;		}		syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output);		iris_call_submit_result(&c->pdu);		memset(&c->pdu, 0, sizeof(c->pdu));	}
vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",				fd, c->offset, sizeof(c->pdu), c->addr);
vdebug("IRIS >> fd(%d): have %d bytes, want %d total for %s",				fd, c->offset, sizeof(c->pdu), c->addr)
vdebug
vdebug
"IRIS >> fd(%d): have %d bytes, want %d total for %s"
fd
fd
c->offset
c
c
offset
sizeof(c->pdu)
(c->pdu)
c->pdu
c
c
pdu
c->addr
c
c
addr
len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset);
len = pdu_read(fd, (uint8_t*)(&c->pdu), c->offset)
len
len
pdu_read(fd, (uint8_t*)(&c->pdu), c->offset)
pdu_read
pdu_read
fd
fd
(uint8_t*)(&c->pdu)
uint8_t*
uint8_t
uint8_t
*
*
(&c->pdu)
&c->pdu
c->pdu
c
c
pdu
c->offset
c
c
offset
if (len <= 0) {			if (errno == EAGAIN) return 0;			if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));			client_close(fd);			break;		}
len <= 0
len
len
0
{			if (errno == EAGAIN) return 0;			if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));			client_close(fd);			break;		}
if (errno == EAGAIN) return 0;
errno == EAGAIN
errno
errno
EAGAIN
EAGAIN
return 0;
0
if (len == 0)				vdebug("EOF from %s, fd %d", c->addr, fd);			else				syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));
len == 0
len
len
0
vdebug("EOF from %s, fd %d", c->addr, fd);
vdebug("EOF from %s, fd %d", c->addr, fd)
vdebug
vdebug
"EOF from %s, fd %d"
c->addr
c
c
addr
fd
fd
syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno));
syslog(LOG_INFO, "failed to read from %s: %s",						c->addr, strerror(errno))
syslog
syslog
LOG_INFO
LOG_INFO
"failed to read from %s: %s"
c->addr
c
c
addr
strerror(errno)
strerror
strerror
errno
errno
client_close(fd);
client_close(fd)
client_close
client_close
fd
fd
break;
c->offset += len;
c->offset += len
c->offset
c
c
offset
len
len
c->bytes += len;
c->bytes += len
c->bytes
c
c
bytes
len
len
vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",				fd, len, c->offset, c->addr);
vdebug("IRIS >> fd(%d): read %d (for %d total) from %s",				fd, len, c->offset, c->addr)
vdebug
vdebug
"IRIS >> fd(%d): read %d (for %d total) from %s"
fd
fd
len
len
c->offset
c
c
offset
c->addr
c
c
addr
if (c->offset < sizeof(c->pdu)) {			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);			continue;		}
c->offset < sizeof(c->pdu)
c->offset
c
c
offset
sizeof(c->pdu)
(c->pdu)
c->pdu
c
c
pdu
{			vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);			continue;		}
vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd);
vdebug("Read a partial PDU (%d/%d bytes) from %s, fd %d",					c->offset, sizeof(c->pdu), c->addr, fd)
vdebug
vdebug
"Read a partial PDU (%d/%d bytes) from %s, fd %d"
c->offset
c
c
offset
sizeof(c->pdu)
(c->pdu)
c->pdu
c
c
pdu
c->addr
c
c
addr
fd
fd
continue;
c->offset = 0;
c->offset = 0
c->offset
c
c
offset
0
if (pdu_unpack(&c->pdu) != 0) {			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);#ifdef DEBUG			uint8_t *byte = ((uint8_t*)(&c->pdu));			int off = 0;			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)				;			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);#endif			memset(&c->pdu, 0, sizeof(c->pdu));			continue;		}
pdu_unpack(&c->pdu) != 0
pdu_unpack(&c->pdu)
pdu_unpack
pdu_unpack
&c->pdu
c->pdu
c
c
pdu
0
{			syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);#ifdef DEBUG			uint8_t *byte = ((uint8_t*)(&c->pdu));			int off = 0;			for (off = 0; off < sizeof(c->pdu) && *(byte+off) == '\0'; off++)				;			vdebug("first non-null byte in %s recv buffer is at position %d\n", c->addr, off);#endif			memset(&c->pdu, 0, sizeof(c->pdu));			continue;		}
syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd);
syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd)
syslog
syslog
LOG_WARN
LOG_WARN
"discarding bogus packet from %s, fd %d"
c->addr
c
c
addr
fd
fd
memset(&c->pdu, 0, sizeof(c->pdu));
memset(&c->pdu, 0, sizeof(c->pdu))
memset
memset
&c->pdu
c->pdu
c
c
pdu
0
sizeof(c->pdu)
(c->pdu)
c->pdu
c
c
pdu
continue;
syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output);
syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'",				c->pdu.crc32, c->pdu.version, (uint32_t)c->pdu.ts,				c->pdu.host, c->pdu.service, c->pdu.rc, c->pdu.output)
syslog
syslog
LOG_RESULT
LOG_RESULT
"SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d) '%s'"
c->pdu.crc32
c->pdu
c
c
pdu
crc32
c->pdu.version
c->pdu
c
c
pdu
version
(uint32_t)c->pdu.ts
uint32_t
uint32_t
uint32_t

c->pdu.ts
c->pdu
c
c
pdu
ts
c->pdu.host
c->pdu
c
c
pdu
host
c->pdu.service
c->pdu
c
c
pdu
service
c->pdu.rc
c->pdu
c
c
pdu
rc
c->pdu.output
c->pdu
c
c
pdu
output
iris_call_submit_result(&c->pdu);
iris_call_submit_result(&c->pdu)
iris_call_submit_result
iris_call_submit_result
&c->pdu
c->pdu
c
c
pdu
memset(&c->pdu, 0, sizeof(c->pdu));
memset(&c->pdu, 0, sizeof(c->pdu))
memset
memset
&c->pdu
c->pdu
c
c
pdu
0
sizeof(c->pdu)
(c->pdu)
c->pdu
c
c
pdu
return 0;
0
-----joern-----
(167,126,0)
(205,236,0)
(169,205,0)
(247,212,0)
(28,0,0)
(0,199,0)
(238,228,0)
(169,89,0)
(56,238,0)
(175,96,0)
(247,290,0)
(290,247,0)
(252,191,0)
(81,186,0)
(196,67,0)
(130,173,0)
(86,281,0)
(147,145,0)
(277,62,0)
(21,8,0)
(223,29,0)
(106,122,0)
(275,235,0)
(96,121,0)
(69,34,0)
(93,75,0)
(173,96,0)
(165,96,0)
(73,158,0)
(223,38,0)
(255,79,0)
(71,251,0)
(74,96,0)
(154,96,0)
(173,259,0)
(110,175,0)
(215,116,0)
(35,31,0)
(288,96,0)
(62,273,0)
(225,159,0)
(80,17,0)
(27,29,0)
(39,194,0)
(5,194,0)
(150,38,0)
(137,170,0)
(26,144,0)
(116,8,0)
(212,200,0)
(208,157,0)
(158,271,0)
(250,290,0)
(208,25,0)
(169,245,0)
(199,166,0)
(11,290,0)
(143,47,0)
(290,29,0)
(66,175,0)
(178,121,0)
(246,223,0)
(228,75,0)
(162,7,0)
(248,130,0)
(100,245,0)
(65,81,0)
(191,224,0)
(149,43,0)
(1,157,0)
(82,80,0)
(13,39,0)
(195,268,0)
(289,47,0)
(190,18,0)
(179,61,0)
(220,90,0)
(204,223,0)
(53,231,0)
(115,175,0)
(9,161,0)
(282,144,0)
(67,196,0)
(140,27,0)
(266,174,0)
(237,290,0)
(171,38,0)
(286,90,0)
(159,96,0)
(134,200,0)
(184,74,0)
(40,98,0)
(57,173,0)
(34,255,0)
(127,15,0)
(49,80,0)
(239,259,0)
(198,141,0)
(223,141,0)
(141,92,0)
(95,131,0)
(245,38,0)
(265,7,0)
(154,160,0)
(243,134,0)
(207,261,0)
(241,173,0)
(66,255,0)
(124,199,0)
(153,70,0)
(90,96,0)
(199,51,0)
(104,230,0)
(235,133,0)
(174,17,0)
(210,116,0)
(236,96,0)
(199,61,0)
(255,229,0)
(107,166,0)
(177,168,0)
(123,145,0)
(111,183,0)
(119,244,0)
(170,8,0)
(270,229,0)
(63,185,0)
(271,8,0)
(76,51,0)
(133,235,0)
(222,126,0)
(2,150,0)
(245,169,0)
(248,191,0)
(277,179,0)
(84,274,0)
(130,200,0)
(97,66,0)
(232,201,0)
(231,53,0)
(151,194,0)
(37,247,0)
(255,75,0)
(188,201,0)
(25,71,0)
(76,61,0)
(35,85,0)
(204,96,0)
(192,204,0)
(223,204,0)
(262,29,0)
(187,235,0)
(264,101,0)
(228,90,0)
(129,61,0)
(186,81,0)
(180,25,0)
(212,159,0)
(159,212,0)
(16,163,0)
(128,274,0)
(230,257,0)
(279,69,0)
(38,245,0)
(205,169,0)
(112,53,0)
(230,92,0)
(203,8,0)
(103,202,0)
(230,96,0)
(201,255,0)
(262,165,0)
(139,170,0)
(68,96,0)
(235,96,0)
(238,92,0)
(189,165,0)
(257,160,0)
(51,76,0)
(170,274,0)
(99,168,0)
(290,202,0)
(259,200,0)
(200,96,0)
(290,250,0)
(287,158,0)
(14,288,0)
(263,17,0)
(281,174,0)
(120,98,0)
(72,262,0)
(152,245,0)
(188,96,0)
(30,150,0)
(255,34,0)
(77,230,0)
(240,250,0)
(164,161,0)
(63,96,0)
(19,142,0)
(160,154,0)
(217,17,0)
(257,230,0)
(228,133,0)
(247,92,0)
(108,141,0)
(100,92,0)
(199,0,0)
(229,255,0)
(113,165,0)
(90,228,0)
(78,247,0)
(22,255,0)
(0,168,0)
(268,61,0)
(196,126,0)
(182,74,0)
(259,159,0)
(81,42,0)
(79,145,0)
(3,122,0)
(60,271,0)
(174,8,0)
(229,207,0)
(212,75,0)
(284,75,0)
(250,96,0)
(101,38,0)
(80,42,0)
(259,173,0)
(100,96,0)
(255,201,0)
(221,154,0)
(70,185,0)
(85,35,0)
(48,250,0)
(209,224,0)
(80,82,0)
(43,47,0)
(228,238,0)
(206,118,0)
(238,96,0)
(155,47,0)
(96,161,0)
(41,118,0)
(79,255,0)
(262,161,0)
(26,290,0)
(233,92,0)
(163,96,0)
(214,204,0)
(46,161,0)
(260,261,0)
(126,96,0)
(121,96,0)
(244,96,0)
(157,96,0)
(58,200,0)
(117,179,0)
(194,39,0)
(181,288,0)
(146,31,0)
(230,212,0)
(38,75,0)
(12,17,0)
(281,96,0)
(255,66,0)
(245,29,0)
(157,208,0)
(176,199,0)
(223,75,0)
(259,75,0)
(211,7,0)
(138,61,0)
(197,236,0)
(242,199,0)
(185,70,0)
(261,207,0)
(288,82,0)
(231,96,0)
(158,17,0)
(55,262,0)
(98,131,0)
(114,174,0)
(207,229,0)
(276,273,0)
(6,261,0)
(194,96,0)
(216,238,0)
(126,196,0)
(218,161,0)
(213,179,0)
(212,38,0)
(269,63,0)
(234,8,0)
(64,231,0)
(131,98,0)
(226,101,0)
(170,29,0)
(25,75,0)
(274,170,0)
(265,112,0)
(144,26,0)
(156,51,0)
(254,200,0)
(105,224,0)
(74,118,0)
(251,96,0)
(174,281,0)
(130,159,0)
(134,159,0)
(274,96,0)
(168,0,0)
(54,76,0)
(172,130,0)
(112,8,0)
(278,170,0)
(219,112,0)
(285,75,0)
(98,122,0)
(23,251,0)
(148,244,0)
(83,159,0)
(100,212,0)
(134,161,0)
(193,15,0)
(133,228,0)
(144,96,0)
(249,79,0)
(53,112,0)
(247,96,0)
(102,69,0)
(228,29,0)
(280,188,0)
(89,169,0)
(121,29,0)
(248,134,0)
(259,38,0)
(258,27,0)
(20,236,0)
(36,188,0)
(122,98,0)
(290,26,0)
(255,183,0)
(186,158,0)
(135,212,0)
(141,96,0)
(92,75,0)
(25,208,0)
(145,79,0)
(253,76,0)
(50,217,0)
(212,173,0)
(112,265,0)
(283,228,0)
(229,270,0)
(238,212,0)
(183,142,0)
(236,205,0)
(43,29,0)
(42,81,0)
(132,277,0)
(118,74,0)
(141,212,0)
(32,255,0)
(261,96,0)
(251,71,0)
(62,277,0)
(142,183,0)
(109,268,0)
(31,35,0)
(82,288,0)
(59,27,0)
(245,100,0)
(271,70,0)
(165,262,0)
(183,255,0)
(142,96,0)
(71,25,0)
(272,281,0)
(45,228,0)
(39,255,0)
(85,244,0)
(255,39,0)
(27,224,0)
(34,69,0)
(136,207,0)
(141,223,0)
(70,153,0)
(160,257,0)
(200,92,0)
(51,199,0)
(158,186,0)
(94,231,0)
(69,96,0)
(44,63,0)
(67,75,0)
(7,96,0)
(267,100,0)
(33,154,0)
(179,277,0)
(227,223,0)
(244,85,0)
(122,96,0)
(7,265,0)
(273,62,0)
(10,8,0)
(18,61,0)
(70,271,0)
(42,80,0)
(91,100,0)
(52,157,0)
(88,223,0)
(24,144,0)
(134,173,0)
(175,66,0)
(168,61,0)
(201,188,0)
(185,63,0)
(125,142,0)
(256,251,0)
(118,29,0)
(145,96,0)
(4,34,0)
(288,96,1)
(139,274,1)
(110,115,1)
(204,192,1)
(245,169,1)
(230,212,1)
(261,6,1)
(141,212,1)
(250,48,1)
(16,96,1)
(27,258,1)
(199,0,1)
(148,92,1)
(126,96,1)
(193,150,1)
(128,278,1)
(109,195,1)
(22,32,1)
(62,273,1)
(184,182,1)
(15,127,1)
(272,86,1)
(72,165,1)
(158,287,1)
(100,267,1)
(39,13,1)
(173,241,1)
(159,96,1)
(223,141,1)
(283,262,1)
(217,50,1)
(290,26,1)
(246,259,1)
(98,131,1)
(288,14,1)
(257,230,1)
(69,279,1)
(124,176,1)
(57,212,1)
(175,110,1)
(79,249,1)
(87,62,1)
(223,38,1)
(247,96,1)
(76,61,1)
(0,28,1)
(43,149,1)
(249,145,1)
(136,261,1)
(169,89,1)
(267,91,1)
(290,250,1)
(13,194,1)
(155,43,1)
(54,0,1)
(259,239,1)
(118,74,1)
(157,52,1)
(31,35,1)
(12,263,1)
(80,82,1)
(142,19,1)
(221,33,1)
(174,17,1)
(116,215,1)
(171,228,1)
(130,159,1)
(212,200,1)
(242,62,1)
(78,37,1)
(25,208,1)
(245,100,1)
(198,108,1)
(170,29,1)
(178,68,1)
(111,142,1)
(149,118,1)
(211,162,1)
(119,148,1)
(120,40,1)
(125,34,1)
(188,96,1)
(51,76,1)
(205,236,1)
(247,92,1)
(141,96,1)
(238,216,1)
(144,96,1)
(204,96,1)
(145,96,1)
(11,257,1)
(236,20,1)
(167,222,1)
(283,234,1)
(255,201,1)
(91,169,1)
(263,116,1)
(281,272,1)
(172,15,1)
(51,156,1)
(230,77,1)
(130,173,1)
(104,223,1)
(129,138,1)
(189,55,1)
(266,42,1)
(247,212,1)
(274,96,1)
(5,151,1)
(223,204,1)
(216,56,1)
(197,152,1)
(275,238,1)
(6,260,1)
(255,79,1)
(141,92,1)
(255,183,1)
(73,80,1)
(96,121,1)
(165,96,1)
(214,141,1)
(28,168,1)
(259,173,1)
(179,213,1)
(276,277,1)
(34,69,1)
(147,183,1)
(212,38,1)
(100,92,1)
(33,230,1)
(259,200,1)
(0,168,1)
(44,269,1)
(144,24,1)
(282,247,1)
(236,96,1)
(62,277,1)
(34,4,1)
(277,132,1)
(256,23,1)
(60,170,1)
(112,53,1)
(186,158,1)
(20,197,1)
(248,134,1)
(195,18,1)
(254,257,1)
(134,159,1)
(97,175,1)
(59,140,1)
(42,81,1)
(226,15,1)
(42,80,1)
(94,174,1)
(133,235,1)
(2,30,1)
(67,196,1)
(90,286,1)
(235,96,1)
(170,139,1)
(173,96,1)
(71,251,1)
(27,29,1)
(118,41,1)
(212,135,1)
(194,96,1)
(237,250,1)
(279,102,1)
(253,54,1)
(290,247,1)
(88,227,1)
(168,61,1)
(229,270,1)
(38,245,1)
(278,137,1)
(248,130,1)
(177,99,1)
(228,29,1)
(232,188,1)
(231,64,1)
(84,128,1)
(181,49,1)
(230,92,1)
(168,177,1)
(229,207,1)
(217,17,1)
(151,66,1)
(190,87,1)
(268,61,1)
(81,186,1)
(185,63,1)
(121,178,1)
(212,173,1)
(145,123,1)
(123,147,1)
(99,124,1)
(262,165,1)
(108,88,1)
(169,205,1)
(179,61,1)
(61,129,1)
(64,94,1)
(175,96,1)
(231,96,1)
(63,96,1)
(187,275,1)
(244,96,1)
(213,117,1)
(37,11,1)
(233,200,1)
(134,173,1)
(82,288,1)
(122,106,1)
(80,17,1)
(50,42,1)
(79,145,1)
(223,29,1)
(243,155,1)
(234,112,1)
(121,29,1)
(200,96,1)
(70,153,1)
(141,198,1)
(220,133,1)
(260,39,1)
(138,27,1)
(196,126,1)
(271,70,1)
(238,212,1)
(103,290,1)
(137,31,1)
(228,90,1)
(159,225,1)
(48,240,1)
(117,268,1)
(81,65,1)
(101,38,1)
(77,104,1)
(70,185,1)
(258,59,1)
(170,274,1)
(30,38,1)
(40,101,1)
(240,26,1)
(118,29,1)
(176,242,1)
(230,96,1)
(65,186,1)
(268,109,1)
(251,96,1)
(255,34,1)
(130,172,1)
(210,271,1)
(283,103,1)
(252,268,1)
(90,96,1)
(259,159,1)
(1,67,1)
(207,136,1)
(56,45,1)
(154,221,1)
(274,84,1)
(126,167,1)
(92,233,1)
(41,74,1)
(208,157,1)
(174,114,1)
(150,38,1)
(26,144,1)
(277,179,1)
(100,212,1)
(7,96,1)
(238,96,1)
(53,231,1)
(201,188,1)
(262,29,1)
(156,76,1)
(188,36,1)
(152,171,1)
(114,281,1)
(163,96,1)
(7,211,1)
(191,252,1)
(219,53,1)
(195,61,1)
(52,1,1)
(146,35,1)
(134,200,1)
(225,83,1)
(76,253,1)
(25,71,1)
(24,282,1)
(86,266,1)
(69,96,1)
(112,265,1)
(132,179,1)
(206,101,1)
(199,61,1)
(180,208,1)
(212,159,1)
(190,199,1)
(150,2,1)
(131,95,1)
(85,244,1)
(115,22,1)
(194,5,1)
(100,96,1)
(3,120,1)
(43,29,1)
(257,160,1)
(165,113,1)
(4,69,1)
(227,246,1)
(255,39,1)
(135,159,1)
(63,44,1)
(283,25,1)
(265,7,1)
(18,190,1)
(23,180,1)
(215,210,1)
(14,181,1)
(36,280,1)
(290,29,1)
(102,201,1)
(106,3,1)
(158,17,1)
(244,119,1)
(154,96,1)
(160,154,1)
(122,96,1)
(228,238,1)
(157,96,1)
(134,243,1)
(241,57,1)
(248,191,1)
(140,163,1)
(269,60,1)
(130,200,1)
(142,96,1)
(286,220,1)
(163,16,1)
(174,281,1)
(83,150,1)
(201,232,1)
(162,219,1)
(238,92,1)
(45,283,1)
(259,38,1)
(74,96,1)
(273,276,1)
(222,255,1)
(31,146,1)
(113,189,1)
(39,194,1)
(32,31,1)
(182,206,1)
(200,58,1)
(239,173,1)
(35,85,1)
(199,51,1)
(245,29,1)
(55,163,1)
(17,12,1)
(66,97,1)
(247,78,1)
(74,184,1)
(251,256,1)
(127,193,1)
(66,175,1)
(58,254,1)
(49,217,1)
(183,111,1)
(49,17,1)
(98,122,1)
(261,96,1)
(228,133,1)
(149,98,1)
(264,226,1)
(287,73,1)
(281,96,1)
(192,214,1)
(255,66,1)
(207,261,1)
(290,237,1)
(18,61,1)
(183,142,1)
(250,96,1)
(262,72,1)
(280,229,1)
(255,229,1)
(95,122,1)
(158,271,1)
(235,187,1)
(101,264,1)
(19,125,1)
(180,31,2)
(40,101,2)
(232,31,2)
(14,31,2)
(80,42,2)
(114,31,2)
(71,31,2)
(271,31,2)
(236,150,2)
(244,96,2)
(230,212,2)
(0,168,2)
(62,277,2)
(92,257,2)
(154,96,2)
(80,17,2)
(62,268,2)
(110,31,2)
(169,150,2)
(255,31,2)
(165,96,2)
(179,268,2)
(267,150,2)
(236,96,2)
(54,62,2)
(207,261,2)
(282,257,2)
(193,163,2)
(77,150,2)
(124,62,2)
(230,92,2)
(269,31,2)
(74,96,2)
(157,31,2)
(52,31,2)
(3,101,2)
(132,268,2)
(55,163,2)
(30,150,2)
(258,163,2)
(121,29,2)
(127,163,2)
(288,96,2)
(255,229,2)
(130,159,2)
(0,62,2)
(288,42,2)
(171,150,2)
(259,173,2)
(183,31,2)
(257,160,2)
(260,31,2)
(72,163,2)
(175,31,2)
(18,268,2)
(233,257,2)
(59,163,2)
(229,270,2)
(134,200,2)
(290,29,2)
(90,150,2)
(69,96,2)
(246,150,2)
(98,122,2)
(150,150,2)
(243,15,2)
(145,31,2)
(277,179,2)
(200,96,2)
(20,150,2)
(2,163,2)
(76,61,2)
(28,62,2)
(220,163,2)
(63,96,2)
(168,61,2)
(141,212,2)
(223,38,2)
(238,96,2)
(34,31,2)
(247,92,2)
(85,244,2)
(39,194,2)
(212,159,2)
(7,31,2)
(255,39,2)
(187,163,2)
(141,92,2)
(210,31,2)
(64,31,2)
(235,163,2)
(31,35,2)
(5,31,2)
(196,31,2)
(268,163,2)
(44,31,2)
(90,96,2)
(290,257,2)
(286,163,2)
(253,62,2)
(73,80,2)
(287,80,2)
(18,61,2)
(247,212,2)
(58,257,2)
(35,257,2)
(228,150,2)
(130,15,2)
(45,163,2)
(17,31,2)
(170,31,2)
(49,31,2)
(11,257,2)
(152,150,2)
(215,31,2)
(151,31,2)
(271,70,2)
(199,51,2)
(242,62,2)
(208,31,2)
(33,150,2)
(38,150,2)
(275,150,2)
(152,163,2)
(169,205,2)
(264,15,2)
(91,150,2)
(275,163,2)
(240,257,2)
(53,31,2)
(42,42,2)
(81,80,2)
(174,281,2)
(248,134,2)
(238,212,2)
(25,208,2)
(241,150,2)
(133,235,2)
(212,173,2)
(265,31,2)
(109,268,2)
(145,96,2)
(235,96,2)
(267,163,2)
(245,163,2)
(173,96,2)
(136,31,2)
(24,257,2)
(188,96,2)
(262,29,2)
(35,85,2)
(205,236,2)
(26,144,2)
(156,62,2)
(170,274,2)
(190,268,2)
(223,204,2)
(288,31,2)
(245,169,2)
(113,163,2)
(12,31,2)
(155,15,2)
(245,100,2)
(100,150,2)
(38,245,2)
(165,163,2)
(88,150,2)
(179,61,2)
(125,31,2)
(157,96,2)
(196,126,2)
(159,96,2)
(189,163,2)
(23,31,2)
(283,163,2)
(112,53,2)
(192,150,2)
(158,80,2)
(119,257,2)
(130,173,2)
(160,150,2)
(83,150,2)
(70,31,2)
(213,268,2)
(79,145,2)
(255,183,2)
(118,101,2)
(96,121,2)
(158,271,2)
(162,31,2)
(117,268,2)
(118,29,2)
(201,31,2)
(2,150,2)
(217,42,2)
(160,154,2)
(27,29,2)
(63,31,2)
(251,96,2)
(170,29,2)
(141,150,2)
(111,31,2)
(279,31,2)
(268,61,2)
(74,101,2)
(144,257,2)
(103,257,2)
(186,80,2)
(223,29,2)
(262,165,2)
(265,7,2)
(216,163,2)
(185,63,2)
(99,62,2)
(212,150,2)
(214,150,2)
(259,38,2)
(222,31,2)
(176,62,2)
(221,150,2)
(247,257,2)
(290,26,2)
(217,17,2)
(228,238,2)
(228,163,2)
(228,29,2)
(184,101,2)
(216,150,2)
(48,257,2)
(115,31,2)
(19,31,2)
(238,92,2)
(201,188,2)
(281,96,2)
(235,150,2)
(51,76,2)
(173,150,2)
(230,150,2)
(129,163,2)
(191,163,2)
(261,31,2)
(70,185,2)
(7,96,2)
(70,153,2)
(259,200,2)
(149,15,2)
(84,31,2)
(207,31,2)
(197,163,2)
(76,62,2)
(37,257,2)
(278,31,2)
(1,31,2)
(257,150,2)
(226,15,2)
(238,150,2)
(159,150,2)
(30,163,2)
(182,101,2)
(195,268,2)
(262,163,2)
(256,31,2)
(112,31,2)
(281,31,2)
(204,96,2)
(150,38,2)
(227,150,2)
(45,150,2)
(148,257,2)
(244,257,2)
(174,31,2)
(95,101,2)
(49,42,2)
(139,31,2)
(250,257,2)
(134,15,2)
(61,163,2)
(87,62,2)
(146,257,2)
(283,150,2)
(15,163,2)
(274,96,2)
(199,62,2)
(248,130,2)
(195,163,2)
(57,150,2)
(280,31,2)
(85,257,2)
(116,31,2)
(112,265,2)
(172,15,2)
(228,90,2)
(228,133,2)
(154,150,2)
(53,231,2)
(247,96,2)
(43,15,2)
(204,150,2)
(31,257,2)
(126,31,2)
(274,31,2)
(254,257,2)
(118,74,2)
(163,96,2)
(231,31,2)
(286,150,2)
(140,163,2)
(66,31,2)
(62,273,2)
(100,96,2)
(90,163,2)
(255,201,2)
(80,82,2)
(82,288,2)
(249,31,2)
(138,163,2)
(211,31,2)
(6,31,2)
(142,96,2)
(251,31,2)
(43,29,2)
(27,163,2)
(229,207,2)
(137,31,2)
(134,159,2)
(229,31,2)
(181,31,2)
(4,31,2)
(234,31,2)
(150,163,2)
(206,101,2)
(100,163,2)
(255,79,2)
(67,196,2)
(122,101,2)
(237,257,2)
(257,230,2)
(273,268,2)
(135,150,2)
(14,42,2)
(39,31,2)
(199,0,2)
(255,66,2)
(168,62,2)
(255,34,2)
(276,268,2)
(290,250,2)
(34,69,2)
(79,31,2)
(183,142,2)
(123,31,2)
(261,96,2)
(205,150,2)
(56,150,2)
(82,31,2)
(80,31,2)
(199,61,2)
(128,31,2)
(134,173,2)
(101,15,2)
(142,31,2)
(223,150,2)
(252,163,2)
(108,150,2)
(120,101,2)
(66,175,2)
(174,17,2)
(212,38,2)
(175,96,2)
(109,163,2)
(239,150,2)
(42,31,2)
(133,163,2)
(225,150,2)
(181,42,2)
(198,150,2)
(290,247,2)
(141,96,2)
(91,163,2)
(50,42,2)
(212,200,2)
(266,31,2)
(187,150,2)
(259,159,2)
(42,81,2)
(230,96,2)
(56,163,2)
(167,31,2)
(65,80,2)
(171,163,2)
(106,101,2)
(186,158,2)
(223,141,2)
(20,163,2)
(38,163,2)
(205,163,2)
(13,31,2)
(219,31,2)
(259,150,2)
(98,101,2)
(250,96,2)
(194,96,2)
(185,31,2)
(41,101,2)
(245,29,2)
(97,31,2)
(231,96,2)
(100,212,2)
(131,101,2)
(69,31,2)
(71,251,2)
(177,62,2)
(130,200,2)
(272,31,2)
(81,186,2)
(169,163,2)
(94,31,2)
(32,31,2)
(25,31,2)
(100,92,2)
(51,62,2)
(102,31,2)
(42,80,2)
(268,268,2)
(104,150,2)
(36,31,2)
(158,17,2)
(98,131,2)
(208,157,2)
(78,257,2)
(197,150,2)
(86,31,2)
(144,96,2)
(67,31,2)
(147,31,2)
(122,96,2)
(26,257,2)
(188,31,2)
(238,163,2)
(236,163,2)
(22,31,2)
(194,31,2)
(263,31,2)
(200,257,2)
(82,42,2)
(126,96,2)
(277,268,2)
(60,31,2)
(248,191,2)
(133,150,2)
(101,38,2)
(25,71,2)
(169,89,2)
(220,150,2)
(245,150,2)
-----------------------------------
(0,CLIENTS[i].fd)
(1,c)
(2,0)
(3,c)
(4,service)
(5,pdu)
(6,pdu)
(7,c->pdu)
(8,)
(9,len)
(10,byte)
(11,"Read a partial PDU (%d/%d bytes)
(12,0)
(13,version)
(14,pdu)
(15,errno == EAGAIN)
(16,c)
(17,off = 0)
(18,i++)
(19,pdu)
(20,pdu)
(21,for (off = 0; off < sizeof(c->pdu)
(22,"SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d)
(23,c)
(24,pdu)
(25,memset(&c->pdu, 0, sizeof(c->pdu)
(26,sizeof(c->pdu)
(27,syslog(LOG_WARN, "could not find a client session for fd %d", fd)
(28,fd)
(29,int fd)
(30,len)
(31,pdu_unpack(&c->pdu)
(32,LOG_RESULT)
(33,c)
(34,c->pdu.service)
(35,pdu_unpack(&c->pdu)
(36,pdu)
(37,c)
(38,len = pdu_read(fd, (uint8_t*)
(39,c->pdu.version)
(40,LOG_INFO)
(41,fd)
(42,off < sizeof(c->pdu)
(43,client_close(fd)
(44,pdu)
(45,fd)
(46,for (;;)
(47,)
(48,addr)
(49,off)
(50,off)
(51,CLIENTS[i].addr)
(52,pdu)
(53,&c->pdu)
(54,CLIENTS)
(55,"reading from %s, fd %d")
(56,c)
(57,c)
(58,offset)
(59,"could not find a client session for fd %d")
(60,byte)
(61,i = 0)
(62,CLIENTS[i].fd == -1)
(63,c->pdu)
(64,pdu)
(65,\'\\0\')
(66,c->pdu.crc32)
(67,iris_call_submit_result(&c->pdu)
(68,c)
(69,c->pdu)
(70,(uint8_t*)
(71,sizeof(c->pdu)
(72,fd)
(73,byte)
(74,c->addr)
(75,)
(76,CLIENTS[i])
(77,offset)
(78,offset)
(79,c->pdu.output)
(80,off < sizeof(c->pdu)
(81,*(byte+off)
(82,sizeof(c->pdu)
(83,c)
(84,addr)
(85,&c->pdu)
(86,c)
(87,continue;)
(88,len)
(89,uint8_t*)
(90,c->addr)
(91,c)
(92,c->offset = 0)
(93,if (len <= 0)
(94,c)
(95,errno)
(96,c = client_find(fd)
(97,crc32)
(98,syslog(LOG_INFO, "failed to read from %s: %s",\n\\n\\t\\t\\t\\t\\t\\tc->addr, strerror(errno)
(99,CLIENTS)
(100,c->offset)
(101,len == 0)
(102,c)
(103,continue;)
(104,c)
(105,i)
(106,addr)
(107,if (CLIENTS[i].fd == -1)
(108,c)
(109,NUM_CLIENTS)
(110,pdu)
(111,rc)
(112,memset(&c->pdu, 0, sizeof(c->pdu)
(113,addr)
(114,off)
(115,c)
(116,off = 0)
(117,CLIENTS)
(118,vdebug("EOF from %s, fd %d", c->addr, fd)
(119,pdu)
(120,"failed to read from %s: %s")
(121,client_find(fd)
(122,c->addr)
(123,pdu)
(124,i)
(125,c)
(126,c->pdu)
(127,EAGAIN)
(128,c)
(129,0)
(130,return 0;)
(131,strerror(errno)
(132,fd)
(133,sizeof(c->pdu)
(134,return 0;)
(135,len)
(136,ts)
(137,LOG_WARN)
(138,i)
(139,fd)
(140,LOG_WARN)
(141,c->offset)
(142,c->pdu)
(143,if (len == 0)
(144,c->pdu)
(145,c->pdu)
(146,0)
(147,c)
(148,c)
(149,fd)
(150,len <= 0)
(151,c)
(152,fd)
(153,uint8_t*)
(154,c->pdu)
(155,break;)
(156,addr)
(157,c->pdu)
(158,byte+off)
(159,c->offset)
(160,sizeof(c->pdu)
(161,)
(162,c)
(163,!c)
(164,c)
(165,c->addr)
(166,)
(167,pdu)
(168,CLIENTS[i])
(169,(uint8_t*)
(170,syslog(LOG_WARN, "discarding bogus packet from %s, fd %d", c->addr, fd)
(171,len)
(172,0)
(173,c->bytes)
(174,vdebug("first non-null byte in %s recv buffer is at position %d\\n", c->addr, off)
(175,c->pdu)
(176," client[%d] fd = %d // %s")
(177,i)
(178,fd)
(179,CLIENTS[i])
(180,0)
(181,c)
(182,c)
(183,c->pdu.rc)
(184,addr)
(185,&c->pdu)
(186,*(byte+off)
(187,pdu)
(188,c->pdu)
(189,c)
(190,i)
(191,return 0;)
(192,addr)
(193,errno)
(194,c->pdu)
(195,i)
(196,&c->pdu)
(197,c)
(198,offset)
(199,syslog(LOG_WARN, " client[%d] fd = %d // %s", i,\n\\n\\t\\t\\t\\t\\tCLIENTS[i].fd, CLIENTS[i].addr)
(200,c->offset)
(201,c->pdu.host)
(202,)
(203,off)
(204,c->addr)
(205,&c->pdu)
(206,"EOF from %s, fd %d")
(207,c->pdu.ts)
(208,&c->pdu)
(209,for (i = 0; i < NUM_CLIENTS; i++)
(210,off)
(211,pdu)
(212,c->offset += len)
(213,i)
(214,c)
(215,0)
(216,offset)
(217,off++)
(218,if (!c)
(219,0)
(220,c)
(221,pdu)
(222,c)
(223,vdebug("IRIS >> fd(%d)
(224,)
(225,offset)
(226,len)
(227,fd)
(228,vdebug("IRIS >> fd(%d)
(229,(uint32_t)
(230,c->offset)
(231,c->pdu)
(232,host)
(233,0)
(234,continue;)
(235,c->pdu)
(236,c->pdu)
(237,fd)
(238,c->offset)
(239,len)
(240,c)
(241,bytes)
(242,LOG_WARN)
(243,0)
(244,c->pdu)
(245,pdu_read(fd, (uint8_t*)
(246,"IRIS >> fd(%d)
(247,c->offset)
(248,RET)
(249,output)
(250,c->addr)
(251,c->pdu)
(252,0)
(253,i)
(254,c)
(255,syslog(LOG_RESULT, "SERVICE RESULT %08x v%d [%d] %s/%s (rc:%d)
(256,pdu)
(257,c->offset < sizeof(c->pdu)
(258,fd)
(259,c->bytes += len)
(260,c)
(261,c->pdu)
(262,vdebug("reading from %s, fd %d", c->addr, fd)
(263,off)
(264,0)
(265,sizeof(c->pdu)
(266,"first non-null byte in %s recv buffer is at position %d\\n")
(267,offset)
(268,i < NUM_CLIENTS)
(269,c)
(270,uint32_t)
(271,*byte = ((uint8_t*)
(272,addr)
(273,-1)
(274,c->addr)
(275,c)
(276,1)
(277,CLIENTS[i].fd)
(278,"discarding bogus packet from %s, fd %d")
(279,pdu)
(280,c)
(281,c->addr)
(282,c)
(283,"IRIS >> fd(%d)
(284,if (c->offset < sizeof(c->pdu)
(285,if (pdu_unpack(&c->pdu)
(286,addr)
(287,off)
(288,c->pdu)
(289,if (errno == EAGAIN)
(290,vdebug("Read a partial PDU (%d/%d bytes)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^