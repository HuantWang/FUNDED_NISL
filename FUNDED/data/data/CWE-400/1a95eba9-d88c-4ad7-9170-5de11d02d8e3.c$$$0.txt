-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
33,34
35,36
35,37
37,38
39,40
39,41
39,42
39,43
40,41
41,42
41,43
42,43
45,46
45,47
46,47
48,49
48,50
49,50
49,51
50,51
53,54
55,56
56,57
58,59
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,14,16,19,24,25,28,34,36,38,43,44,47,51,52,54,57,62,63
-----computeFrom-----
12,13
12,14
22,23
22,24
41,42
41,43
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use a relatively small number */        count = 20;    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(GLOBAL_CONST_TRUE)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,16,0)
(14,24,0)
(20,31,0)
(7,11,0)
(4,29,0)
(22,31,0)
(16,21,0)
(11,3,0)
(5,14,0)
(1,3,0)
(26,18,0)
(19,31,0)
(9,11,0)
(25,24,0)
(16,14,0)
(0,6,0)
(3,15,0)
(29,19,0)
(27,31,0)
(6,24,0)
(19,29,0)
(21,10,0)
(12,21,0)
(32,16,0)
(23,24,0)
(34,26,0)
(16,32,0)
(28,16,0)
(17,19,0)
(16,19,0)
(13,3,0)
(33,21,0)
(26,34,1)
(16,19,1)
(7,9,1)
(12,33,1)
(2,14,1)
(6,24,1)
(14,24,1)
(5,6,1)
(0,26,1)
(29,4,1)
(30,8,1)
(6,0,1)
(21,12,1)
(16,32,1)
(33,8,1)
(11,7,1)
(28,5,1)
(23,25,1)
(34,14,1)
(4,17,1)
(30,21,1)
(2,30,1)
(8,19,1)
(9,30,1)
(16,28,1)
(14,16,1)
(16,21,1)
(5,24,1)
(25,11,1)
(19,29,1)
(24,23,1)
(16,30,2)
(7,30,2)
(0,14,2)
(19,29,2)
(11,30,2)
(23,30,2)
(16,19,2)
(24,30,2)
(12,8,2)
(5,14,2)
(34,14,2)
(5,30,2)
(14,30,2)
(16,14,2)
(9,30,2)
(26,14,2)
(28,30,2)
(21,8,2)
(6,24,2)
(14,16,2)
(6,14,2)
(28,14,2)
(33,8,2)
(25,30,2)
(14,14,2)
(16,21,2)
(16,32,2)
(14,24,2)
-----------------------------------
(0,i)
(1,for (i = 0; i < (size_t)
(2,RET)
(3,)
(4,1)
(5,i)
(6,i++)
(7,0)
(8,GLOBAL_CONST_TRUE)
(9,i)
(10,)
(11,i = 0)
(12,20)
(13,i)
(14,i < (size_t)
(15,)
(16,(size_t)
(17,count)
(18,)
(19,count = -1)
(20,count)
(21,count = 20)
(22,if(GLOBAL_CONST_TRUE)
(23,0)
(24,i = 0)
(25,i)
(26,printLine("Hello")
(27,if(GLOBAL_CONST_TRUE)
(28,count)
(29,-1)
(30,GLOBAL_CONST_TRUE)
(31,)
(32,size_t)
(33,count)
(34,"Hello")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^