-----label-----
1
-----code-----
OMX_ERRORTYPE omx_volume_component_Constructor(OMX_COMPONENTTYPE *openmaxStandComp, OMX_STRING cComponentName) {
	OMX_ERRORTYPE err;
	omx_volume_component_PrivateType* omx_volume_component_Private;
	OMX_U32 i;

	DEBUG(DEB_LEV_FUNCTION_NAME, "In %s\n",__func__);

	if (!openmaxStandComp->pComponentPrivate) {
		openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));
		DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",
				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp);
		if(openmaxStandComp->pComponentPrivate == NULL) {
			return OMX_ErrorInsufficientResources;
		}
	} else {
		DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);
		return OMX_ErrorUndefined;
	}

	omx_volume_component_Private = openmaxStandComp->pComponentPrivate;
	omx_volume_component_Private->ports = NULL;

	/** Calling base filter constructor */
	err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);
	if (err != OMX_ErrorNone) {
			DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__);
			return err;
	}

	omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;
	omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;

	/** Allocate Ports and call port constructor. */
	if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {
		omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));
		if (!omx_volume_component_Private->ports) {
			return OMX_ErrorInsufficientResources;
		}
		for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {
			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));
			if (!omx_volume_component_Private->ports[i]) {
				return OMX_ErrorInsufficientResources;
			}
		}
	}

	err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);
	if (err != OMX_ErrorNone) {
		return OMX_ErrorInsufficientResources;
	}
	err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);
	if (err != OMX_ErrorNone) {
		return OMX_ErrorInsufficientResources;
	}

	/** Domain specific section for the ports. */
	omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;
	omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;

	omx_volume_component_Private->gain = GAIN_VALUE; //100.0f; // default gain
	omx_volume_component_Private->destructor = omx_volume_component_Destructor;
	openmaxStandComp->SetParameter = omx_volume_component_SetParameter;
	openmaxStandComp->GetParameter = omx_volume_component_GetParameter;
	openmaxStandComp->GetConfig = omx_volume_component_GetConfig;
	openmaxStandComp->SetConfig = omx_volume_component_SetConfig;
	omx_volume_component_Private->DoStateSet = &omx_volume_component_DoStateSet;
	omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;

	DEBUG(DEB_LEV_FUNCTION_NAME, "Out of %s for component %x\n", __func__, (int)openmaxStandComp);
	return OMX_ErrorNone;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
38,41
38,42
39,40
41,42
44,45
46,47
46,48
46,49
47,48
48,49
48,50
49,50
52,53
52,54
52,55
53,54
54,55
54,56
55,56
55,57
56,57
59,60
59,61
59,62
60,61
63,64
64,65
64,66
65,66
68,69
69,70
69,71
69,72
69,73
69,74
69,75
70,71
72,73
75,76
77,78
77,79
78,79
78,80
81,82
81,83
82,83
85,86
85,87
86,87
86,88
89,90
91,92
91,93
92,93
92,94
93,94
93,95
94,95
97,98
99,100
100,101
101,102
103,104
103,105
104,105
105,106
105,107
105,108
105,109
105,110
106,107
108,109
111,112
113,114
113,115
114,115
114,116
117,118
117,119
118,119
121,122
122,123
124,125
125,126
125,127
126,127
128,129
128,130
129,130
132,133
133,134
133,135
134,135
134,136
135,136
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
145,146
147,148
149,150
151,152
151,153
152,153
152,154
153,154
155,156
157,158
157,159
158,159
159,160
159,161
159,162
159,163
160,161
162,163
165,166
167,168
168,169
170,171
171,172
171,173
172,173
172,174
173,174
173,175
174,175
174,176
175,176
178,179
182,183
183,184
183,185
184,185
184,186
185,186
185,187
186,187
186,188
187,188
190,191
194,195
194,196
195,196
195,197
196,197
196,198
197,198
197,199
198,199
198,200
199,200
202,203
205,206
206,207
206,208
207,208
210,211
210,212
210,213
211,212
212,213
212,214
213,214
213,215
214,215
217,218
217,219
217,220
218,219
220,221
220,222
221,222
221,223
222,223
222,224
223,224
226,227
229,230
230,231
230,232
231,232
233,234
235,236
235,237
236,237
237,238
237,239
238,239
241,242
242,243
243,244
245,246
245,247
245,248
245,249
246,247
247,248
247,249
248,249
251,252
251,253
252,253
254,255
254,256
255,256
255,257
256,257
256,258
257,258
260,261
263,264
264,265
266,267
266,268
267,268
268,269
268,270
269,270
269,271
270,271
270,272
271,272
274,275
276,277
276,278
276,279
277,278
280,281
281,282
281,283
282,283
285,286
285,287
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
295,296
296,297
298,299
299,300
299,301
300,301
302,303
302,304
302,305
302,306
302,307
303,304
305,306
307,308
308,309
308,310
309,310
309,311
310,311
315,316
317,318
317,319
318,319
318,320
319,320
321,322
323,324
324,325
325,326
327,328
328,329
328,330
329,330
331,332
331,333
331,334
331,335
331,336
332,333
334,335
336,337
337,338
337,339
338,339
338,340
339,340
344,345
346,347
346,348
347,348
347,349
348,349
350,351
352,353
353,354
354,355
356,357
357,358
357,359
358,359
358,360
359,360
359,361
360,361
360,362
361,362
361,363
362,363
365,366
369,370
371,372
372,373
372,374
373,374
373,375
374,375
374,376
375,376
375,377
376,377
376,378
377,378
380,381
384,385
386,387
387,388
387,389
388,389
388,390
389,390
392,393
394,395
395,396
395,397
396,397
396,398
397,398
400,401
402,403
403,404
403,405
404,405
404,406
405,406
408,409
410,411
411,412
411,413
412,413
412,414
413,414
416,417
418,419
419,420
419,421
420,421
420,422
421,422
424,425
426,427
427,428
427,429
428,429
428,430
429,430
432,433
434,435
435,436
435,437
436,437
436,438
437,438
440,441
441,442
443,444
444,445
444,446
445,446
445,447
446,447
449,450
451,452
452,453
452,454
452,455
452,456
452,457
453,454
455,456
458,459
460,461
460,462
461,462
461,463
464,465
466,467
467,468
-----nextToken-----
3,5,8,10,11,14,16,21,23,27,29,30,34,36,40,42,43,45,50,51,57,58,61,62,66,67,71,73,74,76,79,80,83,84,87,88,90,95,96,98,102,107,109,110,112,115,116,119,120,123,127,130,131,136,137,139,143,146,148,150,154,156,161,163,164,166,169,176,177,179,180,181,188,189,191,192,193,200,201,203,204,208,209,215,216,219,224,225,227,228,232,234,239,240,244,249,250,253,258,259,261,262,265,272,273,275,278,279,283,284,290,291,293,297,301,304,306,311,312,313,314,316,320,322,326,330,333,335,340,341,342,343,345,349,351,355,363,364,366,367,368,370,378,379,381,382,383,385,390,391,393,398,399,401,406,407,409,414,415,417,422,423,425,430,431,433,438,439,442,447,448,450,454,456,457,459,462,463,465,468
-----computeFrom-----
54,55
54,56
92,93
92,94
125,126
125,127
133,134
133,135
141,142
141,143
152,153
152,154
171,172
171,173
183,184
183,185
195,196
195,197
212,213
212,214
247,248
247,249
251,252
251,253
268,269
268,270
299,300
299,301
318,319
318,320
328,329
328,330
347,348
347,349
357,358
357,359
372,373
372,374
387,388
387,389
395,396
395,397
403,404
403,405
411,412
411,413
419,420
419,421
427,428
427,429
435,436
435,437
444,445
444,446
-----guardedBy-----
154,169
208,290
201,259
204,262
203,261
209,291
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
OMX_ERRORTYPE omx_volume_component_Constructor(OMX_COMPONENTTYPE *openmaxStandComp, OMX_STRING cComponentName) {	OMX_ERRORTYPE err;	omx_volume_component_PrivateType* omx_volume_component_Private;	OMX_U32 i;	DEBUG(DEB_LEV_FUNCTION_NAME, "In %s\n",__func__);	if (!openmaxStandComp->pComponentPrivate) {		openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));		DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp);		if(openmaxStandComp->pComponentPrivate == NULL) {			return OMX_ErrorInsufficientResources;		}	} else {		DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);		return OMX_ErrorUndefined;	}	omx_volume_component_Private = openmaxStandComp->pComponentPrivate;	omx_volume_component_Private->ports = NULL;	/** Calling base filter constructor */	err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);	if (err != OMX_ErrorNone) {			DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__);			return err;	}	omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;	omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;	/** Allocate Ports and call port constructor. */	if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {		omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));		if (!omx_volume_component_Private->ports) {			return OMX_ErrorInsufficientResources;		}		for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));			if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}		}	}	err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);	if (err != OMX_ErrorNone) {		return OMX_ErrorInsufficientResources;	}	err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);	if (err != OMX_ErrorNone) {		return OMX_ErrorInsufficientResources;	}	/** Domain specific section for the ports. */	omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;	omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;	omx_volume_component_Private->gain = GAIN_VALUE; //100.0f; // default gain	omx_volume_component_Private->destructor = omx_volume_component_Destructor;	openmaxStandComp->SetParameter = omx_volume_component_SetParameter;	openmaxStandComp->GetParameter = omx_volume_component_GetParameter;	openmaxStandComp->GetConfig = omx_volume_component_GetConfig;	openmaxStandComp->SetConfig = omx_volume_component_SetConfig;	omx_volume_component_Private->DoStateSet = &omx_volume_component_DoStateSet;	omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;	DEBUG(DEB_LEV_FUNCTION_NAME, "Out of %s for component %x\n", __func__, (int)openmaxStandComp);	return OMX_ErrorNone;}
OMX_ERRORTYPE
OMX_ERRORTYPE
omx_volume_component_Constructor(OMX_COMPONENTTYPE *openmaxStandComp, OMX_STRING cComponentName)
omx_volume_component_Constructor
OMX_COMPONENTTYPE *openmaxStandComp
OMX_COMPONENTTYPE
OMX_COMPONENTTYPE
*openmaxStandComp
*
openmaxStandComp
OMX_STRING cComponentName
OMX_STRING
OMX_STRING
cComponentName
cComponentName
{	OMX_ERRORTYPE err;	omx_volume_component_PrivateType* omx_volume_component_Private;	OMX_U32 i;	DEBUG(DEB_LEV_FUNCTION_NAME, "In %s\n",__func__);	if (!openmaxStandComp->pComponentPrivate) {		openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));		DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp);		if(openmaxStandComp->pComponentPrivate == NULL) {			return OMX_ErrorInsufficientResources;		}	} else {		DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);		return OMX_ErrorUndefined;	}	omx_volume_component_Private = openmaxStandComp->pComponentPrivate;	omx_volume_component_Private->ports = NULL;	/** Calling base filter constructor */	err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);	if (err != OMX_ErrorNone) {			DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__);			return err;	}	omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;	omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;	/** Allocate Ports and call port constructor. */	if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {		omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));		if (!omx_volume_component_Private->ports) {			return OMX_ErrorInsufficientResources;		}		for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));			if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}		}	}	err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);	if (err != OMX_ErrorNone) {		return OMX_ErrorInsufficientResources;	}	err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);	if (err != OMX_ErrorNone) {		return OMX_ErrorInsufficientResources;	}	/** Domain specific section for the ports. */	omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;	omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;	omx_volume_component_Private->gain = GAIN_VALUE; //100.0f; // default gain	omx_volume_component_Private->destructor = omx_volume_component_Destructor;	openmaxStandComp->SetParameter = omx_volume_component_SetParameter;	openmaxStandComp->GetParameter = omx_volume_component_GetParameter;	openmaxStandComp->GetConfig = omx_volume_component_GetConfig;	openmaxStandComp->SetConfig = omx_volume_component_SetConfig;	omx_volume_component_Private->DoStateSet = &omx_volume_component_DoStateSet;	omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;	DEBUG(DEB_LEV_FUNCTION_NAME, "Out of %s for component %x\n", __func__, (int)openmaxStandComp);	return OMX_ErrorNone;}
OMX_ERRORTYPE err;
OMX_ERRORTYPE err;
OMX_ERRORTYPE
OMX_ERRORTYPE
err
err
omx_volume_component_PrivateType* omx_volume_component_Private;
omx_volume_component_PrivateType* omx_volume_component_Private;
omx_volume_component_PrivateType
omx_volume_component_PrivateType
* omx_volume_component_Private
*
omx_volume_component_Private
OMX_U32 i;
OMX_U32 i;
OMX_U32
OMX_U32
i
i
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s\n",__func__);
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s\n",__func__)
DEBUG
DEBUG
DEB_LEV_FUNCTION_NAME
DEB_LEV_FUNCTION_NAME
"In %s\n"
__func__
__func__
if (!openmaxStandComp->pComponentPrivate) {		openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));		DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp);		if(openmaxStandComp->pComponentPrivate == NULL) {			return OMX_ErrorInsufficientResources;		}	} else {		DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);		return OMX_ErrorUndefined;	}
!openmaxStandComp->pComponentPrivate
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
{		openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));		DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp);		if(openmaxStandComp->pComponentPrivate == NULL) {			return OMX_ErrorInsufficientResources;		}	}
openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType));
openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType))
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
calloc(1, sizeof(omx_volume_component_PrivateType))
calloc
calloc
1
sizeof(omx_volume_component_PrivateType)
omx_volume_component_PrivateType
omx_volume_component_PrivateType
omx_volume_component_PrivateType

DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp);
DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\n",				__func__, (int)openmaxStandComp->pComponentPrivate, (int)openmaxStandComp)
DEBUG
DEBUG
DEB_LEV_FUNCTION_NAME
DEB_LEV_FUNCTION_NAME
"In %s allocated private structure %x for std component %x\n"
__func__
__func__
(int)openmaxStandComp->pComponentPrivate
int
int

openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
(int)openmaxStandComp
int
int

openmaxStandComp
openmaxStandComp
if(openmaxStandComp->pComponentPrivate == NULL) {			return OMX_ErrorInsufficientResources;		}
openmaxStandComp->pComponentPrivate == NULL
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
NULL
NULL
{			return OMX_ErrorInsufficientResources;		}
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
{		DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);		return OMX_ErrorUndefined;	}
DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate);
DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\n", __func__, (int)openmaxStandComp->pComponentPrivate)
DEBUG
DEBUG
DEB_LEV_ERR
DEB_LEV_ERR
"In %s, Error Component %x Already Allocated\n"
__func__
__func__
(int)openmaxStandComp->pComponentPrivate
int
int

openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
return OMX_ErrorUndefined;
OMX_ErrorUndefined
OMX_ErrorUndefined
omx_volume_component_Private = openmaxStandComp->pComponentPrivate;
omx_volume_component_Private = openmaxStandComp->pComponentPrivate
omx_volume_component_Private
omx_volume_component_Private
openmaxStandComp->pComponentPrivate
openmaxStandComp
openmaxStandComp
pComponentPrivate
omx_volume_component_Private->ports = NULL;
omx_volume_component_Private->ports = NULL
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
NULL
NULL
err = omx_base_filter_Constructor(openmaxStandComp, cComponentName);
err = omx_base_filter_Constructor(openmaxStandComp, cComponentName)
err
err
omx_base_filter_Constructor(openmaxStandComp, cComponentName)
omx_base_filter_Constructor
omx_base_filter_Constructor
openmaxStandComp
openmaxStandComp
cComponentName
cComponentName
if (err != OMX_ErrorNone) {			DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__);			return err;	}
err != OMX_ErrorNone
err
err
OMX_ErrorNone
OMX_ErrorNone
{			DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__);			return err;	}
DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__);
DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\n", __func__)
DEBUG
DEBUG
DEB_LEV_ERR
DEB_LEV_ERR
"In %s failed base class constructor\n"
__func__
__func__
return err;
err
err
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0;
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nStartPortNumber
0
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2;
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
2
if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports) {		omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));		if (!omx_volume_component_Private->ports) {			return OMX_ErrorInsufficientResources;		}		for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));			if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}		}	}
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
!omx_volume_component_Private->ports
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
{		omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));		if (!omx_volume_component_Private->ports) {			return OMX_ErrorInsufficientResources;		}		for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));			if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}		}	}
omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *));
omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *))
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *))
calloc
calloc
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
sizeof(omx_base_PortType *)
omx_base_PortType *
omx_base_PortType
omx_base_PortType
*
*
if (!omx_volume_component_Private->ports) {			return OMX_ErrorInsufficientResources;		}
!omx_volume_component_Private->ports
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
{			return OMX_ErrorInsufficientResources;		}
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++) {			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));			if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}		}
i=0;
i=0
i
i
0
i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
i
i
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts
omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio]
omx_volume_component_Private->sPortTypesParam
omx_volume_component_Private
omx_volume_component_Private
sPortTypesParam
OMX_PortDomainAudio
OMX_PortDomainAudio
nPorts
i++
i
i
{			omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));			if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}		}
omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType));
omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType))
omx_volume_component_Private->ports[i]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
i
i
calloc(1, sizeof(omx_base_audio_PortType))
calloc
calloc
1
sizeof(omx_base_audio_PortType)
omx_base_audio_PortType
omx_base_audio_PortType
omx_base_audio_PortType

if (!omx_volume_component_Private->ports[i]) {				return OMX_ErrorInsufficientResources;			}
!omx_volume_component_Private->ports[i]
omx_volume_component_Private->ports[i]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
i
i
{				return OMX_ErrorInsufficientResources;			}
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE);
err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE)
err
err
base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE)
base_audio_port_Constructor
base_audio_port_Constructor
openmaxStandComp
openmaxStandComp
&omx_volume_component_Private->ports[0]
omx_volume_component_Private->ports[0]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
0
0
OMX_TRUE
OMX_TRUE
if (err != OMX_ErrorNone) {		return OMX_ErrorInsufficientResources;	}
err != OMX_ErrorNone
err
err
OMX_ErrorNone
OMX_ErrorNone
{		return OMX_ErrorInsufficientResources;	}
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE);
err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE)
err
err
base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE)
base_audio_port_Constructor
base_audio_port_Constructor
openmaxStandComp
openmaxStandComp
&omx_volume_component_Private->ports[1]
omx_volume_component_Private->ports[1]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
1
1
OMX_FALSE
OMX_FALSE
if (err != OMX_ErrorNone) {		return OMX_ErrorInsufficientResources;	}
err != OMX_ErrorNone
err
err
OMX_ErrorNone
OMX_ErrorNone
{		return OMX_ErrorInsufficientResources;	}
return OMX_ErrorInsufficientResources;
OMX_ErrorInsufficientResources
OMX_ErrorInsufficientResources
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam
omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
OMX_BASE_FILTER_INPUTPORT_INDEX
OMX_BASE_FILTER_INPUTPORT_INDEX
sPortParam
nBufferSize
DEFAULT_OUT_BUFFER_SIZE
DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE;
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam
omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]
omx_volume_component_Private->ports
omx_volume_component_Private
omx_volume_component_Private
ports
OMX_BASE_FILTER_OUTPUTPORT_INDEX
OMX_BASE_FILTER_OUTPUTPORT_INDEX
sPortParam
nBufferSize
DEFAULT_OUT_BUFFER_SIZE
DEFAULT_OUT_BUFFER_SIZE
omx_volume_component_Private->gain = GAIN_VALUE;
omx_volume_component_Private->gain = GAIN_VALUE
omx_volume_component_Private->gain
omx_volume_component_Private
omx_volume_component_Private
gain
GAIN_VALUE
GAIN_VALUE
omx_volume_component_Private->destructor = omx_volume_component_Destructor;
omx_volume_component_Private->destructor = omx_volume_component_Destructor
omx_volume_component_Private->destructor
omx_volume_component_Private
omx_volume_component_Private
destructor
omx_volume_component_Destructor
omx_volume_component_Destructor
openmaxStandComp->SetParameter = omx_volume_component_SetParameter;
openmaxStandComp->SetParameter = omx_volume_component_SetParameter
openmaxStandComp->SetParameter
openmaxStandComp
openmaxStandComp
SetParameter
omx_volume_component_SetParameter
omx_volume_component_SetParameter
openmaxStandComp->GetParameter = omx_volume_component_GetParameter;
openmaxStandComp->GetParameter = omx_volume_component_GetParameter
openmaxStandComp->GetParameter
openmaxStandComp
openmaxStandComp
GetParameter
omx_volume_component_GetParameter
omx_volume_component_GetParameter
openmaxStandComp->GetConfig = omx_volume_component_GetConfig;
openmaxStandComp->GetConfig = omx_volume_component_GetConfig
openmaxStandComp->GetConfig
openmaxStandComp
openmaxStandComp
GetConfig
omx_volume_component_GetConfig
omx_volume_component_GetConfig
openmaxStandComp->SetConfig = omx_volume_component_SetConfig;
openmaxStandComp->SetConfig = omx_volume_component_SetConfig
openmaxStandComp->SetConfig
openmaxStandComp
openmaxStandComp
SetConfig
omx_volume_component_SetConfig
omx_volume_component_SetConfig
omx_volume_component_Private->DoStateSet = &omx_volume_component_DoStateSet;
omx_volume_component_Private->DoStateSet = &omx_volume_component_DoStateSet
omx_volume_component_Private->DoStateSet
omx_volume_component_Private
omx_volume_component_Private
DoStateSet
&omx_volume_component_DoStateSet
omx_volume_component_DoStateSet
omx_volume_component_DoStateSet
omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback;
omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback
omx_volume_component_Private->BufferMgmtCallback
omx_volume_component_Private
omx_volume_component_Private
BufferMgmtCallback
omx_volume_component_BufferMgmtCallback
omx_volume_component_BufferMgmtCallback
DEBUG(DEB_LEV_FUNCTION_NAME, "Out of %s for component %x\n", __func__, (int)openmaxStandComp);
DEBUG(DEB_LEV_FUNCTION_NAME, "Out of %s for component %x\n", __func__, (int)openmaxStandComp)
DEBUG
DEBUG
DEB_LEV_FUNCTION_NAME
DEB_LEV_FUNCTION_NAME
"Out of %s for component %x\n"
__func__
__func__
(int)openmaxStandComp
int
int

openmaxStandComp
openmaxStandComp
return OMX_ErrorNone;
OMX_ErrorNone
OMX_ErrorNone
-----joern-----
(152,153,0)
(279,48,0)
(39,221,0)
(238,276,0)
(106,264,0)
(16,100,0)
(268,276,0)
(179,77,0)
(90,118,0)
(99,183,0)
(142,162,0)
(129,199,0)
(66,78,0)
(87,42,0)
(270,189,0)
(154,276,0)
(223,237,0)
(100,155,0)
(247,8,0)
(100,183,0)
(148,109,0)
(145,76,0)
(120,36,0)
(128,263,0)
(120,30,0)
(45,114,0)
(201,145,0)
(230,102,0)
(36,120,0)
(270,162,0)
(23,232,0)
(69,233,0)
(18,279,0)
(59,57,0)
(158,87,0)
(231,180,0)
(270,245,0)
(82,48,0)
(151,221,0)
(270,218,0)
(270,134,0)
(61,189,0)
(243,153,0)
(249,233,0)
(149,57,0)
(71,254,0)
(134,208,0)
(213,242,0)
(183,176,0)
(10,37,0)
(206,29,0)
(202,263,0)
(104,221,0)
(211,173,0)
(210,278,0)
(160,221,0)
(37,241,0)
(6,154,0)
(178,233,0)
(211,57,0)
(12,159,0)
(122,261,0)
(8,247,0)
(119,108,0)
(270,76,0)
(57,34,0)
(25,209,0)
(123,88,0)
(4,222,0)
(260,257,0)
(69,241,0)
(102,57,0)
(35,74,0)
(117,241,0)
(205,9,0)
(30,120,0)
(270,237,0)
(99,74,0)
(65,211,0)
(95,247,0)
(108,119,0)
(264,55,0)
(125,245,0)
(46,278,0)
(58,70,0)
(230,231,0)
(145,102,0)
(230,191,0)
(199,42,0)
(282,191,0)
(228,38,0)
(211,241,0)
(62,117,0)
(193,229,0)
(0,11,0)
(51,242,0)
(188,196,0)
(237,272,0)
(188,267,0)
(137,99,0)
(31,267,0)
(135,147,0)
(69,26,0)
(37,233,0)
(107,35,0)
(156,249,0)
(117,57,0)
(207,279,0)
(222,172,0)
(29,283,0)
(37,57,0)
(242,48,0)
(270,128,0)
(199,88,0)
(165,208,0)
(104,242,0)
(40,221,0)
(5,221,0)
(249,57,0)
(111,203,0)
(269,260,0)
(129,166,0)
(120,48,0)
(248,218,0)
(17,99,0)
(237,57,0)
(60,22,0)
(172,222,0)
(229,57,0)
(247,95,0)
(153,257,0)
(162,57,0)
(134,246,0)
(178,241,0)
(77,72,0)
(218,261,0)
(43,221,0)
(63,221,0)
(49,221,0)
(9,182,0)
(208,165,0)
(227,34,0)
(191,109,0)
(22,109,0)
(91,56,0)
(92,231,0)
(81,246,0)
(99,48,0)
(245,49,0)
(168,203,0)
(236,155,0)
(38,228,0)
(44,175,0)
(3,196,0)
(21,141,0)
(195,120,0)
(189,57,0)
(52,207,0)
(103,43,0)
(262,128,0)
(280,19,0)
(38,109,0)
(281,87,0)
(77,231,0)
(6,88,0)
(211,233,0)
(93,100,0)
(225,249,0)
(22,6,0)
(74,35,0)
(270,191,0)
(241,221,0)
(229,67,0)
(266,9,0)
(182,95,0)
(132,100,0)
(77,76,0)
(173,211,0)
(191,37,0)
(179,264,0)
(212,104,0)
(276,57,0)
(252,82,0)
(259,211,0)
(182,9,0)
(174,118,0)
(179,145,0)
(113,11,0)
(204,162,0)
(112,118,0)
(80,0,0)
(14,241,0)
(214,165,0)
(9,57,0)
(57,221,0)
(129,233,0)
(270,229,0)
(197,30,0)
(234,249,0)
(249,241,0)
(222,48,0)
(70,76,0)
(215,175,0)
(115,27,0)
(34,48,0)
(68,134,0)
(230,76,0)
(226,28,0)
(270,78,0)
(251,221,0)
(116,147,0)
(267,188,0)
(70,13,0)
(209,109,0)
(270,82,0)
(34,57,0)
(226,278,0)
(181,207,0)
(273,221,0)
(180,221,0)
(279,207,0)
(12,82,0)
(176,183,0)
(275,181,0)
(124,254,0)
(131,154,0)
(84,149,0)
(270,231,0)
(139,108,0)
(11,0,0)
(126,82,0)
(192,43,0)
(145,231,0)
(186,215,0)
(87,57,0)
(226,153,0)
(98,69,0)
(85,270,0)
(232,76,0)
(164,279,0)
(270,102,0)
(270,215,0)
(249,225,0)
(146,221,0)
(95,182,0)
(143,30,0)
(145,184,0)
(76,88,0)
(114,141,0)
(185,108,0)
(171,180,0)
(232,149,0)
(69,57,0)
(217,69,0)
(255,67,0)
(54,108,0)
(30,221,0)
(239,247,0)
(242,104,0)
(140,215,0)
(177,141,0)
(108,48,0)
(138,251,0)
(77,191,0)
(254,221,0)
(187,29,0)
(76,232,0)
(162,241,0)
(37,191,0)
(242,213,0)
(244,64,0)
(274,149,0)
(230,162,0)
(179,260,0)
(225,203,0)
(9,241,0)
(42,199,0)
(130,103,0)
(179,12,0)
(70,82,0)
(105,229,0)
(270,221,0)
(117,233,0)
(79,208,0)
(34,74,0)
(78,57,0)
(70,231,0)
(35,24,0)
(97,64,0)
(53,242,0)
(119,26,0)
(258,103,0)
(118,112,0)
(279,33,0)
(157,109,0)
(170,31,0)
(89,178,0)
(19,57,0)
(166,75,0)
(141,48,0)
(207,221,0)
(102,233,0)
(179,70,0)
(272,221,0)
(208,134,0)
(216,12,0)
(261,221,0)
(256,37,0)
(7,78,0)
(133,181,0)
(270,168,0)
(26,69,0)
(240,230,0)
(271,102,0)
(50,49,0)
(38,178,0)
(82,74,0)
(213,283,0)
(141,74,0)
(75,166,0)
(215,48,0)
(127,218,0)
(29,241,0)
(247,88,0)
(183,99,0)
(233,147,0)
(235,77,0)
(267,31,0)
(19,8,0)
(183,100,0)
(191,188,0)
(144,24,0)
(56,221,0)
(175,221,0)
(169,272,0)
(200,245,0)
(38,188,0)
(1,0,0)
(29,233,0)
(24,35,0)
(42,87,0)
(218,48,0)
(141,114,0)
(190,153,0)
(230,82,0)
(219,42,0)
(101,117,0)
(179,270,0)
(0,57,0)
(276,154,0)
(224,237,0)
(149,232,0)
(28,226,0)
(67,221,0)
(178,38,0)
(8,19,0)
(70,102,0)
(74,155,0)
(154,6,0)
(265,38,0)
(121,168,0)
(199,129,0)
(198,242,0)
(246,221,0)
(264,207,0)
(278,48,0)
(86,128,0)
(233,129,0)
(26,119,0)
(231,11,0)
(83,267,0)
(165,117,0)
(178,57,0)
(110,189,0)
(163,26,0)
(15,225,0)
(118,48,0)
(230,136,0)
(283,213,0)
(166,129,0)
(245,48,0)
(32,47,0)
(203,168,0)
(41,178,0)
(278,226,0)
(70,191,0)
(194,91,0)
(64,55,0)
(11,231,0)
(96,199,0)
(43,108,0)
(150,8,0)
(168,251,0)
(117,165,0)
(250,47,0)
(73,102,0)
(263,221,0)
(179,230,0)
(78,27,0)
(56,91,0)
(128,48,0)
(27,221,0)
(277,6,0)
(6,22,0)
(189,56,0)
(145,82,0)
(108,43,0)
(94,30,0)
(70,162,0)
(77,82,0)
(283,29,0)
(222,100,0)
(20,254,0)
(77,102,0)
(220,64,0)
(161,19,0)
(77,162,0)
(153,226,0)
(47,104,0)
(203,225,0)
(145,162,0)
(100,222,0)
(167,76,0)
(88,221,0)
(29,57,0)
(253,283,0)
(2,34,0)
(165,214,1)
(104,242,1)
(259,65,1)
(154,276,1)
(81,134,1)
(70,76,1)
(198,213,1)
(249,156,1)
(114,141,1)
(211,259,1)
(108,48,1)
(54,192,1)
(57,34,1)
(201,173,1)
(93,74,1)
(156,234,1)
(8,150,1)
(199,96,1)
(145,82,1)
(174,254,1)
(38,178,1)
(148,173,1)
(168,203,1)
(163,69,1)
(56,91,1)
(272,169,1)
(270,128,1)
(192,22,1)
(249,57,1)
(108,185,1)
(120,48,1)
(255,229,1)
(91,194,1)
(61,110,1)
(133,207,1)
(217,98,1)
(42,87,1)
(181,275,1)
(112,118,1)
(162,204,1)
(69,241,1)
(122,218,1)
(45,141,1)
(19,57,1)
(212,103,1)
(215,186,1)
(117,241,1)
(268,60,1)
(22,109,1)
(231,11,1)
(77,102,1)
(270,229,1)
(208,165,1)
(15,249,1)
(64,97,1)
(9,57,1)
(256,10,1)
(179,270,1)
(242,48,1)
(191,109,1)
(31,170,1)
(7,56,1)
(22,6,1)
(26,69,1)
(9,205,1)
(11,113,1)
(211,233,1)
(253,29,1)
(34,227,1)
(162,57,1)
(276,238,1)
(50,245,1)
(261,122,1)
(230,162,1)
(41,89,1)
(145,231,1)
(171,231,1)
(234,47,1)
(34,74,1)
(202,128,1)
(142,57,1)
(0,80,1)
(62,101,1)
(150,19,1)
(241,14,1)
(119,26,1)
(283,29,1)
(260,269,1)
(152,190,1)
(70,82,1)
(60,209,1)
(225,15,1)
(278,210,1)
(38,188,1)
(222,172,1)
(214,117,1)
(51,212,1)
(17,16,1)
(4,183,1)
(114,45,1)
(100,183,1)
(209,109,1)
(282,37,1)
(224,223,1)
(25,228,1)
(73,271,1)
(178,241,1)
(16,132,1)
(145,102,1)
(218,48,1)
(96,42,1)
(154,131,1)
(220,244,1)
(275,133,1)
(32,104,1)
(77,82,1)
(203,111,1)
(270,189,1)
(117,57,1)
(179,145,1)
(29,206,1)
(100,222,1)
(111,225,1)
(247,88,1)
(258,130,1)
(271,95,1)
(237,224,1)
(170,83,1)
(95,247,1)
(206,187,1)
(231,92,1)
(103,258,1)
(192,95,1)
(179,264,1)
(0,57,1)
(71,20,1)
(267,31,1)
(67,255,1)
(98,54,1)
(203,225,1)
(178,57,1)
(78,57,1)
(278,48,1)
(270,231,1)
(175,44,1)
(30,120,1)
(230,102,1)
(94,143,1)
(145,76,1)
(240,228,1)
(70,162,1)
(227,2,1)
(199,88,1)
(270,245,1)
(120,36,1)
(248,127,1)
(199,42,1)
(128,262,1)
(52,241,1)
(129,166,1)
(211,241,1)
(14,162,1)
(27,115,1)
(230,191,1)
(191,282,1)
(265,178,1)
(74,35,1)
(179,260,1)
(229,57,1)
(158,281,1)
(149,84,1)
(232,149,1)
(76,167,1)
(242,53,1)
(270,134,1)
(53,198,1)
(20,124,1)
(208,79,1)
(110,261,1)
(244,181,1)
(270,78,1)
(12,82,1)
(179,77,1)
(80,1,1)
(70,231,1)
(270,162,1)
(219,87,1)
(65,233,1)
(215,48,1)
(264,207,1)
(134,208,1)
(222,48,1)
(283,253,1)
(38,109,1)
(129,199,1)
(21,100,1)
(270,76,1)
(115,78,1)
(120,195,1)
(183,99,1)
(102,73,1)
(37,233,1)
(279,33,1)
(178,233,1)
(245,48,1)
(97,220,1)
(247,239,1)
(29,57,1)
(270,82,1)
(77,76,1)
(109,157,1)
(24,144,1)
(60,109,1)
(207,279,1)
(228,38,1)
(66,7,1)
(237,57,1)
(270,218,1)
(173,211,1)
(191,37,1)
(99,137,1)
(118,90,1)
(279,164,1)
(277,154,1)
(242,213,1)
(239,8,1)
(230,76,1)
(247,8,1)
(107,82,1)
(281,102,1)
(6,154,1)
(6,88,1)
(144,107,1)
(249,241,1)
(84,274,1)
(153,226,1)
(108,119,1)
(37,256,1)
(270,168,1)
(193,105,1)
(113,0,1)
(211,57,1)
(141,48,1)
(186,140,1)
(134,68,1)
(117,62,1)
(226,278,1)
(29,241,1)
(230,231,1)
(279,48,1)
(70,102,1)
(143,197,1)
(168,121,1)
(232,23,1)
(180,171,1)
(252,126,1)
(131,276,1)
(70,58,1)
(166,75,1)
(177,21,1)
(68,208,1)
(229,193,1)
(222,4,1)
(59,114,1)
(77,235,1)
(280,161,1)
(106,64,1)
(250,32,1)
(194,189,1)
(264,106,1)
(95,182,1)
(183,176,1)
(246,81,1)
(37,241,1)
(185,139,1)
(188,267,1)
(235,47,1)
(29,233,1)
(149,57,1)
(128,48,1)
(78,66,1)
(266,247,1)
(103,43,1)
(92,11,1)
(132,93,1)
(130,43,1)
(270,102,1)
(77,231,1)
(87,57,1)
(230,240,1)
(210,46,1)
(11,0,1)
(43,108,1)
(189,61,1)
(249,233,1)
(82,252,1)
(251,138,1)
(169,237,1)
(243,112,1)
(195,94,1)
(161,88,1)
(34,48,1)
(178,41,1)
(90,174,1)
(209,25,1)
(189,57,1)
(145,162,1)
(79,165,1)
(2,59,1)
(218,248,1)
(276,57,1)
(26,163,1)
(102,57,1)
(70,191,1)
(123,76,1)
(83,191,1)
(270,191,1)
(233,129,1)
(157,148,1)
(197,27,1)
(274,180,1)
(10,22,1)
(179,230,1)
(69,217,1)
(47,104,1)
(99,74,1)
(270,215,1)
(140,263,1)
(6,277,1)
(127,175,1)
(121,203,1)
(216,114,1)
(138,168,1)
(190,243,1)
(23,149,1)
(105,246,1)
(1,181,1)
(77,191,1)
(89,188,1)
(18,52,1)
(164,18,1)
(12,216,1)
(35,24,1)
(69,233,1)
(77,162,1)
(187,51,1)
(38,265,1)
(165,117,1)
(101,251,1)
(167,232,1)
(8,19,1)
(238,268,1)
(181,207,1)
(76,232,1)
(58,103,1)
(46,152,1)
(42,219,1)
(225,249,1)
(245,125,1)
(179,12,1)
(269,153,1)
(82,48,1)
(254,71,1)
(230,82,1)
(37,57,1)
(118,48,1)
(69,57,1)
(205,266,1)
(213,283,1)
(99,48,1)
(166,199,1)
(270,85,1)
(262,86,1)
(88,123,1)
(226,28,1)
(86,49,1)
(141,177,1)
(47,250,1)
(182,9,1)
(125,200,1)
(223,67,1)
(139,119,1)
(49,50,1)
(179,70,1)
(145,201,1)
(126,112,1)
(204,142,1)
(117,233,1)
(200,272,1)
(270,237,1)
(137,17,1)
(9,241,1)
(19,280,1)
(87,158,1)
(85,30,1)
(141,74,1)
(263,202,1)
(44,215,1)
(182,9,2)
(271,95,2)
(54,95,2)
(139,22,2)
(12,82,2)
(233,129,2)
(167,181,2)
(100,112,2)
(219,95,2)
(270,168,2)
(43,22,2)
(208,47,2)
(270,102,2)
(154,173,2)
(203,47,2)
(31,22,2)
(102,95,2)
(56,91,2)
(113,181,2)
(264,207,2)
(105,47,2)
(208,165,2)
(163,95,2)
(137,112,2)
(274,181,2)
(38,188,2)
(99,74,2)
(197,47,2)
(73,95,2)
(243,112,2)
(46,112,2)
(104,103,2)
(226,278,2)
(279,114,2)
(139,95,2)
(27,47,2)
(23,181,2)
(164,114,2)
(248,47,2)
(134,208,2)
(117,47,2)
(229,47,2)
(60,228,2)
(111,47,2)
(211,95,2)
(245,47,2)
(74,35,2)
(95,247,2)
(88,181,2)
(165,117,2)
(95,182,2)
(119,22,2)
(87,95,2)
(37,233,2)
(49,47,2)
(77,191,2)
(77,76,2)
(216,114,2)
(91,47,2)
(183,112,2)
(129,166,2)
(156,47,2)
(272,47,2)
(62,47,2)
(69,233,2)
(237,57,2)
(6,154,2)
(18,114,2)
(67,47,2)
(70,102,2)
(157,173,2)
(108,119,2)
(150,181,2)
(168,47,2)
(230,162,2)
(121,47,2)
(179,77,2)
(17,112,2)
(22,228,2)
(127,47,2)
(16,112,2)
(117,57,2)
(98,95,2)
(102,57,2)
(277,228,2)
(154,228,2)
(225,47,2)
(270,189,2)
(270,191,2)
(191,109,2)
(122,47,2)
(177,112,2)
(145,162,2)
(131,173,2)
(276,228,2)
(178,233,2)
(199,88,2)
(145,76,2)
(140,47,2)
(231,11,2)
(68,47,2)
(195,47,2)
(198,103,2)
(87,57,2)
(250,103,2)
(259,95,2)
(166,95,2)
(187,103,2)
(148,173,2)
(98,22,2)
(120,47,2)
(8,19,2)
(43,95,2)
(44,47,2)
(153,226,2)
(193,47,2)
(256,22,2)
(112,118,2)
(129,199,2)
(120,36,2)
(29,233,2)
(171,181,2)
(11,0,2)
(141,74,2)
(9,57,2)
(232,181,2)
(282,22,2)
(110,47,2)
(179,230,2)
(45,112,2)
(103,43,2)
(207,114,2)
(126,112,2)
(128,48,2)
(84,181,2)
(118,48,2)
(253,103,2)
(11,181,2)
(270,134,2)
(262,47,2)
(269,112,2)
(205,247,2)
(19,57,2)
(215,48,2)
(275,114,2)
(153,112,2)
(211,233,2)
(35,24,2)
(70,103,2)
(58,103,2)
(89,22,2)
(43,108,2)
(145,82,2)
(218,48,2)
(276,57,2)
(241,114,2)
(270,78,2)
(107,112,2)
(226,28,2)
(9,247,2)
(247,181,2)
(66,47,2)
(12,114,2)
(212,103,2)
(234,47,2)
(217,22,2)
(114,141,2)
(276,173,2)
(99,112,2)
(69,57,2)
(247,8,2)
(78,47,2)
(249,233,2)
(224,47,2)
(60,173,2)
(186,47,2)
(188,22,2)
(0,181,2)
(134,47,2)
(34,48,2)
(57,34,2)
(69,22,2)
(191,37,2)
(183,99,2)
(206,103,2)
(242,48,2)
(268,228,2)
(103,22,2)
(15,47,2)
(226,112,2)
(270,76,2)
(179,12,2)
(6,88,2)
(47,103,2)
(185,22,2)
(0,57,2)
(230,102,2)
(230,228,2)
(191,22,2)
(81,47,2)
(152,112,2)
(178,241,2)
(168,203,2)
(51,103,2)
(230,231,2)
(207,279,2)
(211,241,2)
(211,57,2)
(278,112,2)
(129,95,2)
(268,173,2)
(29,103,2)
(76,181,2)
(6,228,2)
(188,267,2)
(280,181,2)
(141,112,2)
(222,112,2)
(279,33,2)
(61,47,2)
(65,95,2)
(70,191,2)
(70,231,2)
(97,181,2)
(78,57,2)
(249,57,2)
(178,57,2)
(8,181,2)
(52,114,2)
(154,276,2)
(108,48,2)
(100,183,2)
(270,82,2)
(183,176,2)
(76,232,2)
(77,47,2)
(270,231,2)
(202,47,2)
(179,70,2)
(178,22,2)
(182,247,2)
(235,47,2)
(6,173,2)
(209,228,2)
(189,47,2)
(166,75,2)
(96,95,2)
(162,114,2)
(279,48,2)
(161,181,2)
(249,47,2)
(47,104,2)
(145,102,2)
(94,47,2)
(185,95,2)
(29,57,2)
(10,22,2)
(132,112,2)
(103,95,2)
(203,225,2)
(270,47,2)
(82,48,2)
(228,38,2)
(57,114,2)
(228,22,2)
(37,241,2)
(30,47,2)
(128,47,2)
(26,22,2)
(173,95,2)
(165,47,2)
(242,213,2)
(41,22,2)
(100,222,2)
(130,22,2)
(263,47,2)
(9,241,2)
(70,162,2)
(25,228,2)
(38,22,2)
(190,112,2)
(213,283,2)
(21,112,2)
(53,103,2)
(175,47,2)
(144,112,2)
(227,114,2)
(255,47,2)
(4,112,2)
(38,178,2)
(158,95,2)
(74,112,2)
(194,47,2)
(34,74,2)
(119,26,2)
(264,181,2)
(180,181,2)
(125,47,2)
(270,229,2)
(29,241,2)
(181,207,2)
(14,114,2)
(270,218,2)
(141,48,2)
(258,95,2)
(117,233,2)
(70,82,2)
(179,260,2)
(37,22,2)
(240,228,2)
(251,47,2)
(217,95,2)
(229,57,2)
(270,162,2)
(77,82,2)
(199,42,2)
(64,181,2)
(133,114,2)
(95,181,2)
(131,228,2)
(115,47,2)
(109,173,2)
(218,47,2)
(270,215,2)
(108,22,2)
(222,172,2)
(258,22,2)
(123,181,2)
(201,173,2)
(26,95,2)
(37,57,2)
(117,241,2)
(270,237,2)
(281,95,2)
(22,109,2)
(77,162,2)
(261,47,2)
(42,87,2)
(230,191,2)
(50,47,2)
(242,103,2)
(246,47,2)
(70,76,2)
(163,22,2)
(82,112,2)
(86,47,2)
(114,112,2)
(7,47,2)
(162,57,2)
(260,112,2)
(54,22,2)
(270,128,2)
(173,211,2)
(22,173,2)
(252,112,2)
(214,47,2)
(225,249,2)
(69,241,2)
(232,149,2)
(213,103,2)
(106,181,2)
(169,47,2)
(59,114,2)
(249,241,2)
(220,181,2)
(265,22,2)
(99,48,2)
(238,228,2)
(69,95,2)
(179,270,2)
(245,48,2)
(149,181,2)
(101,47,2)
(83,22,2)
(266,247,2)
(238,173,2)
(120,48,2)
(149,57,2)
(267,31,2)
(283,103,2)
(230,82,2)
(145,231,2)
(247,88,2)
(85,47,2)
(92,181,2)
(34,114,2)
(215,47,2)
(30,120,2)
(278,48,2)
(244,181,2)
(145,173,2)
(2,114,2)
(179,145,2)
(231,181,2)
(192,22,2)
(143,47,2)
(209,109,2)
(230,76,2)
(239,181,2)
(222,48,2)
(181,114,2)
(26,69,2)
(104,242,2)
(199,95,2)
(119,95,2)
(223,47,2)
(179,264,2)
(142,114,2)
(1,181,2)
(80,181,2)
(38,109,2)
(233,95,2)
(283,29,2)
(210,112,2)
(22,6,2)
(32,103,2)
(24,112,2)
(79,47,2)
(35,112,2)
(42,95,2)
(200,47,2)
(237,47,2)
(77,102,2)
(270,245,2)
(277,173,2)
(130,95,2)
(138,47,2)
(19,181,2)
(108,95,2)
(170,22,2)
(189,57,2)
(77,231,2)
(267,22,2)
(56,47,2)
(192,95,2)
(93,112,2)
(204,114,2)
-----------------------------------
(0,omx_volume_component_Private->sPortTypesParam)
(1,omx_volume_component_Private)
(2,openmaxStandComp)
(3,if (!omx_volume_component_Private->ports[i])
(4,openmaxStandComp)
(5,err)
(6,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(7,omx_volume_component_Private)
(8,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(9,omx_volume_component_Private->ports)
(10,omx_volume_component_Private)
(11,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(12,return OMX_ErrorInsufficientResources;)
(13,)
(14,NULL)
(15,OMX_BASE_FILTER_INPUTPORT_INDEX)
(16,__func__)
(17,openmaxStandComp)
(18,openmaxStandComp)
(19,omx_volume_component_Private->sPortTypesParam)
(20,"In %s\\n")
(21,openmaxStandComp)
(22,i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(23,OMX_PortDomainAudio)
(24,sizeof(omx_volume_component_PrivateType)
(25,i)
(26,omx_volume_component_Private->ports[0])
(27,omx_volume_component_Private->BufferMgmtCallback = omx_volume_component_BufferMgmtCallback)
(28,int)
(29,omx_volume_component_Private->ports)
(30,DEBUG(DEB_LEV_FUNCTION_NAME, "Out of %s for component %x\\n", __func__, (int)
(31,sizeof(omx_base_audio_PortType)
(32,err)
(33,OMX_STRING cComponentName)
(34,openmaxStandComp->pComponentPrivate)
(35,calloc(1, sizeof(omx_volume_component_PrivateType)
(36,int)
(37,omx_volume_component_Private->ports)
(38,omx_volume_component_Private->ports[i])
(39,if (omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports)
(40,i)
(41,ports)
(42,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(43,err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE)
(44,omx_volume_component_GetConfig)
(45,NULL)
(46,openmaxStandComp)
(47,err != OMX_ErrorNone)
(48,OMX_COMPONENTTYPE *openmaxStandComp)
(49,openmaxStandComp->SetParameter = omx_volume_component_SetParameter)
(50,omx_volume_component_SetParameter)
(51,openmaxStandComp)
(52,err)
(53,OMX_FALSE)
(54,openmaxStandComp)
(55,)
(56,omx_volume_component_Private->DoStateSet = &omx_volume_component_DoStateSet)
(57,omx_volume_component_Private = openmaxStandComp->pComponentPrivate)
(58,OMX_ErrorInsufficientResources)
(59,omx_volume_component_Private)
(60,i)
(61,DoStateSet)
(62,ports)
(63,if (err != OMX_ErrorNone)
(64,DEBUG(DEB_LEV_ERR, "In %s failed base class constructor\\n", __func__)
(65,omx_volume_component_Private)
(66,BufferMgmtCallback)
(67,omx_volume_component_Private->gain = GAIN_VALUE)
(68,nBufferSize)
(69,omx_volume_component_Private->ports)
(70,return OMX_ErrorInsufficientResources;)
(71,__func__)
(72,)
(73,ports)
(74,openmaxStandComp->pComponentPrivate = calloc(1, sizeof(omx_volume_component_PrivateType)
(75,omx_base_PortType *)
(76,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(77,return OMX_ErrorInsufficientResources;)
(78,omx_volume_component_Private->BufferMgmtCallback)
(79,sPortParam)
(80,sPortTypesParam)
(81,DEFAULT_OUT_BUFFER_SIZE)
(82,openmaxStandComp->pComponentPrivate)
(83,1)
(84,sPortTypesParam)
(85,OMX_ErrorNone)
(86,openmaxStandComp)
(87,omx_volume_component_Private->sPortTypesParam)
(88,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts = 2)
(89,omx_volume_component_Private)
(90,pComponentPrivate)
(91,&omx_volume_component_DoStateSet)
(92,nStartPortNumber)
(93,DEB_LEV_FUNCTION_NAME)
(94,__func__)
(95,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts && !omx_volume_component_Private->ports)
(96,nPorts)
(97,__func__)
(98,omx_volume_component_Private)
(99,openmaxStandComp->pComponentPrivate)
(100,DEBUG(DEB_LEV_FUNCTION_NAME, "In %s allocated private structure %x for std component %x\\n",\n\\n\\t\\t\\t\\t__func__, (int)
(101,omx_volume_component_Private)
(102,omx_volume_component_Private->ports)
(103,err != OMX_ErrorNone)
(104,err = base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE)
(105,omx_volume_component_Private)
(106,err)
(107,1)
(108,base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[0], 0, OMX_TRUE)
(109,i=0)
(110,omx_volume_component_Private)
(111,sPortParam)
(112,!openmaxStandComp->pComponentPrivate)
(113,OMX_PortDomainAudio)
(114,openmaxStandComp->pComponentPrivate == NULL)
(115,omx_volume_component_BufferMgmtCallback)
(116,for (i=0; i < omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts; i++)
(117,omx_volume_component_Private->ports)
(118,openmaxStandComp->pComponentPrivate)
(119,&omx_volume_component_Private->ports[0])
(120,(int)
(121,nBufferSize)
(122,omx_volume_component_SetConfig)
(123,2)
(124,DEB_LEV_FUNCTION_NAME)
(125,SetParameter)
(126,openmaxStandComp)
(127,openmaxStandComp)
(128,openmaxStandComp->GetParameter)
(129,calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *)
(130,err)
(131,OMX_PortDomainAudio)
(132,"In %s allocated private structure %x for std component %x\\n")
(133,err)
(134,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize)
(135,if (!omx_volume_component_Private->ports)
(136,)
(137,pComponentPrivate)
(138,DEFAULT_OUT_BUFFER_SIZE)
(139,0)
(140,openmaxStandComp)
(141,openmaxStandComp->pComponentPrivate)
(142,omx_volume_component_Private)
(143,"Out of %s for component %x\\n")
(144,omx_volume_component_PrivateType)
(145,return OMX_ErrorInsufficientResources;)
(146,omx_volume_component_Private)
(147,)
(148,i)
(149,omx_volume_component_Private->sPortTypesParam)
(150,OMX_PortDomainAudio)
(151,if (err != OMX_ErrorNone)
(152,__func__)
(153,DEBUG(DEB_LEV_ERR, "In %s, Error Component %x Already Allocated\\n", __func__, (int)
(154,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(155,)
(156,ports)
(157,0)
(158,sPortTypesParam)
(159,)
(160,if (err != OMX_ErrorNone)
(161,omx_volume_component_Private)
(162,omx_volume_component_Private->ports)
(163,0)
(164,cComponentName)
(165,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX])
(166,sizeof(omx_base_PortType *)
(167,nPorts)
(168,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize)
(169,omx_volume_component_Destructor)
(170,omx_base_audio_PortType)
(171,0)
(172,int)
(173,!omx_volume_component_Private->ports)
(174,openmaxStandComp)
(175,openmaxStandComp->GetConfig = omx_volume_component_GetConfig)
(176,int)
(177,pComponentPrivate)
(178,omx_volume_component_Private->ports)
(179,RET)
(180,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber = 0)
(181,err != OMX_ErrorNone)
(182,!omx_volume_component_Private->ports)
(183,(int)
(184,)
(185,OMX_TRUE)
(186,GetConfig)
(187,omx_volume_component_Private)
(188,omx_volume_component_Private->ports[i] = calloc(1, sizeof(omx_base_audio_PortType)
(189,omx_volume_component_Private->DoStateSet)
(190,"In %s, Error Component %x Already Allocated\\n")
(191,omx_volume_component_Private->ports[i])
(192,err)
(193,gain)
(194,omx_volume_component_DoStateSet)
(195,openmaxStandComp)
(196,)
(197,DEB_LEV_FUNCTION_NAME)
(198,1)
(199,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(200,openmaxStandComp)
(201,OMX_ErrorInsufficientResources)
(202,omx_volume_component_GetParameter)
(203,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam)
(204,ports)
(205,ports)
(206,ports)
(207,err = omx_base_filter_Constructor(openmaxStandComp, cComponentName)
(208,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam)
(209,i++)
(210,pComponentPrivate)
(211,omx_volume_component_Private->ports)
(212,err)
(213,&omx_volume_component_Private->ports[1])
(214,OMX_BASE_FILTER_OUTPUTPORT_INDEX)
(215,openmaxStandComp->GetConfig)
(216,OMX_ErrorInsufficientResources)
(217,ports)
(218,openmaxStandComp->SetConfig)
(219,OMX_PortDomainAudio)
(220,"In %s failed base class constructor\\n")
(221,)
(222,(int)
(223,omx_volume_component_Private)
(224,destructor)
(225,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX])
(226,(int)
(227,pComponentPrivate)
(228,!omx_volume_component_Private->ports[i])
(229,omx_volume_component_Private->gain)
(230,return OMX_ErrorInsufficientResources;)
(231,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nStartPortNumber)
(232,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio])
(233,omx_volume_component_Private->ports = calloc(omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts, sizeof(omx_base_PortType *)
(234,omx_volume_component_Private)
(235,OMX_ErrorInsufficientResources)
(236,if(openmaxStandComp->pComponentPrivate == NULL)
(237,omx_volume_component_Private->destructor)
(238,sPortTypesParam)
(239,nPorts)
(240,OMX_ErrorInsufficientResources)
(241,omx_volume_component_Private->ports = NULL)
(242,base_audio_port_Constructor(openmaxStandComp, &omx_volume_component_Private->ports[1], 1, OMX_FALSE)
(243,DEB_LEV_ERR)
(244,DEB_LEV_ERR)
(245,openmaxStandComp->SetParameter)
(246,omx_volume_component_Private->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE)
(247,omx_volume_component_Private->sPortTypesParam[OMX_PortDomainAudio].nPorts)
(248,SetConfig)
(249,omx_volume_component_Private->ports)
(250,OMX_ErrorNone)
(251,omx_volume_component_Private->ports[OMX_BASE_FILTER_INPUTPORT_INDEX]->sPortParam.nBufferSize = DEFAULT_OUT_BUFFER_SIZE)
(252,pComponentPrivate)
(253,1)
(254,DEBUG(DEB_LEV_FUNCTION_NAME, "In %s\\n",__func__)
(255,GAIN_VALUE)
(256,ports)
(257,)
(258,OMX_ErrorNone)
(259,ports)
(260,return OMX_ErrorUndefined;)
(261,openmaxStandComp->SetConfig = omx_volume_component_SetConfig)
(262,GetParameter)
(263,openmaxStandComp->GetParameter = omx_volume_component_GetParameter)
(264,return err;)
(265,i)
(266,omx_volume_component_Private)
(267,calloc(1, sizeof(omx_base_audio_PortType)
(268,omx_volume_component_Private)
(269,OMX_ErrorUndefined)
(270,return OMX_ErrorNone;)
(271,omx_volume_component_Private)
(272,omx_volume_component_Private->destructor = omx_volume_component_Destructor)
(273,if (!openmaxStandComp->pComponentPrivate)
(274,omx_volume_component_Private)
(275,OMX_ErrorNone)
(276,omx_volume_component_Private->sPortTypesParam)
(277,nPorts)
(278,openmaxStandComp->pComponentPrivate)
(279,omx_base_filter_Constructor(openmaxStandComp, cComponentName)
(280,sPortTypesParam)
(281,omx_volume_component_Private)
(282,i)
(283,omx_volume_component_Private->ports[1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^