-----label-----
0
-----code-----
static void goodB2G1()
{
    char * data;
    data = NULL;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)calloc(100, sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
67,70
68,69
68,70
69,70
72,73
73,74
74,75
74,76
75,76
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,57,59,60,64,66,70,71,76,77,82,84
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    char * data;    data = NULL;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)calloc(100, sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)calloc(100, sizeof(char));
data = (char *)calloc(100, sizeof(char))
data
data
(char *)calloc(100, sizeof(char))
char *
char
*
*
calloc(100, sizeof(char))
calloc
calloc
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(10,4,0)
(4,23,0)
(34,8,0)
(11,40,0)
(22,36,0)
(16,12,0)
(14,4,0)
(6,30,0)
(4,30,0)
(5,39,0)
(35,8,0)
(20,3,0)
(30,4,0)
(32,14,0)
(1,4,0)
(27,39,0)
(19,30,0)
(30,6,0)
(39,8,0)
(31,23,0)
(28,2,0)
(24,8,0)
(6,3,0)
(10,39,0)
(3,6,0)
(31,4,0)
(10,13,0)
(18,37,0)
(25,2,0)
(16,0,0)
(14,23,0)
(15,10,0)
(9,6,0)
(41,14,0)
(37,42,0)
(30,19,0)
(0,16,0)
(21,0,0)
(38,36,0)
(29,40,0)
(26,23,0)
(33,31,0)
(2,4,0)
(11,39,1)
(33,14,1)
(2,4,1)
(5,27,1)
(10,39,1)
(18,36,1)
(1,40,1)
(30,6,1)
(20,9,1)
(16,0,1)
(38,22,1)
(3,20,1)
(14,41,1)
(39,5,1)
(10,4,1)
(7,37,1)
(15,36,1)
(37,18,1)
(40,29,1)
(32,2,1)
(22,40,1)
(22,31,1)
(41,32,1)
(29,11,1)
(14,4,1)
(9,1,1)
(32,16,1)
(28,25,1)
(30,19,1)
(0,21,1)
(25,4,1)
(36,38,1)
(6,3,1)
(4,30,1)
(7,10,1)
(31,33,1)
(10,15,1)
(31,4,1)
(21,2,1)
(2,28,1)
(20,40,2)
(32,40,2)
(30,19,2)
(30,6,2)
(31,4,2)
(1,40,2)
(33,40,2)
(10,36,2)
(0,2,2)
(21,2,2)
(9,40,2)
(28,40,2)
(6,3,2)
(4,40,2)
(6,40,2)
(18,36,2)
(4,30,2)
(2,4,2)
(2,40,2)
(14,40,2)
(37,36,2)
(3,40,2)
(16,2,2)
(10,4,2)
(10,39,2)
(31,40,2)
(30,40,2)
(41,40,2)
(14,4,2)
(15,36,2)
(16,0,2)
(25,40,2)
-----------------------------------
(0,-1)
(1,data)
(2,data == NULL)
(3,sizeof(char)
(4,data = (char *)
(5,NULL)
(6,calloc(100, sizeof(char)
(7,RET)
(8,)
(9,100)
(10,free(data)
(11,STATIC_CONST_FIVE)
(12,)
(13,)
(14,strcpy(data, "A String")
(15,data)
(16,exit(-1)
(17, sizeof(char)
(18,"Benign, fixed string")
(19,char *)
(20,char)
(21,1)
(22,STATIC_CONST_FIVE)
(23,)
(24,data)
(25,data)
(26,if (data == NULL)
(27,data)
(28,NULL)
(29,5)
(30,(char *)
(31,printLine(data)
(32,data)
(33,data)
(34,if(STATIC_CONST_FIVE!=5)
(35,if(STATIC_CONST_FIVE==5)
(36,STATIC_CONST_FIVE!=5)
(37,printLine("Benign, fixed string")
(38,5)
(39,data = NULL)
(40,STATIC_CONST_FIVE==5)
(41,"A String")
(42,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^