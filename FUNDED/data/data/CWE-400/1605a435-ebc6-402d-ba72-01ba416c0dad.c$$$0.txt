-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_63b_goodB2GSink(int * countPtr)
{
    int count = *countPtr;
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
11,12
12,13
12,14
14,15
14,16
16,17
17,18
18,19
20,21
20,22
21,22
22,23
22,24
23,24
25,26
25,27
27,28
29,30
29,31
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
39,40
40,41
40,42
40,43
40,44
41,42
42,43
42,44
43,44
46,47
46,48
47,48
49,50
49,51
50,51
50,52
51,52
54,55
56,57
57,58
59,60
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,6,8,9,13,15,19,24,26,28,33,34,37,38,44,45,48,52,53,55,58,63,64
-----computeFrom-----
30,31
30,32
31,32
31,33
35,36
35,37
42,43
42,44
46,47
46,48
-----guardedBy-----
37,55
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_63b_goodB2GSink(int * countPtr){    int count = *countPtr;    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_63b_goodB2GSink(int * countPtr)
CWE400_Resource_Exhaustion__fgets_for_loop_63b_goodB2GSink
int * countPtr
int
* countPtr
*
countPtr
{    int count = *countPtr;    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count = *countPtr;
int count = *countPtr;
int
count = *countPtr
count
= *countPtr
*countPtr
countPtr
countPtr
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(25,19,0)
(2,33,0)
(32,5,0)
(21,28,0)
(33,6,0)
(11,27,0)
(11,14,0)
(17,31,0)
(11,10,0)
(0,28,0)
(15,33,0)
(10,5,0)
(27,23,0)
(27,9,0)
(31,27,0)
(31,0,0)
(13,28,0)
(14,11,0)
(0,31,0)
(26,6,0)
(19,5,0)
(28,0,0)
(29,12,0)
(28,27,0)
(23,27,0)
(18,10,0)
(16,5,0)
(34,9,0)
(30,23,0)
(8,31,0)
(6,9,0)
(4,27,0)
(20,11,0)
(3,6,0)
(35,22,0)
(23,7,0)
(12,24,0)
(10,11,0)
(8,17,1)
(25,12,1)
(0,31,1)
(12,29,1)
(18,19,1)
(31,27,1)
(28,13,1)
(1,10,1)
(19,25,1)
(23,30,1)
(20,18,1)
(11,20,1)
(10,11,1)
(31,8,1)
(19,5,1)
(11,14,1)
(27,23,1)
(23,7,1)
(30,4,1)
(18,5,1)
(1,0,1)
(5,32,1)
(16,0,1)
(2,27,1)
(29,10,1)
(13,21,1)
(28,27,1)
(33,15,1)
(32,16,1)
(15,2,1)
(0,28,1)
(21,33,1)
(17,28,1)
(10,5,1)
(11,27,1)
(5,0,2)
(31,27,2)
(8,28,2)
(10,0,2)
(16,0,2)
(0,28,2)
(18,10,2)
(32,0,2)
(29,10,2)
(27,23,2)
(19,5,2)
(31,28,2)
(10,10,2)
(20,10,2)
(0,31,2)
(12,10,2)
(20,0,2)
(17,28,2)
(28,27,2)
(11,0,2)
(18,0,2)
(23,7,2)
(11,14,2)
(11,10,2)
(10,5,2)
(10,11,2)
(11,27,2)
(19,10,2)
(25,10,2)
-----------------------------------
(0,count > 0 && count <= 20)
(1,RET)
(2,i)
(3,i)
(4,count)
(5,i = 0)
(6,)
(7,int * countPtr)
(8,20)
(9,)
(10,i < (size_t)
(11,(size_t)
(12,printLine("Hello")
(13,0)
(14,size_t)
(15,0)
(16,i)
(17,count)
(18,i)
(19,i++)
(20,count)
(21,count)
(22,)
(23,*countPtr)
(24,)
(25,i)
(26,if (count > 0 && count <= 20)
(27,count = *countPtr)
(28,count > 0)
(29,"Hello")
(30,countPtr)
(31,count <= 20)
(32,0)
(33,i = 0)
(34,count)
(35,for (i = 0; i < (size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^