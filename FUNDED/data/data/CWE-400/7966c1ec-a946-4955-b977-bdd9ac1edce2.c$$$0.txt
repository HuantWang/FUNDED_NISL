-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_01_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
46,49
46,50
47,48
49,50
51,52
54,55
55,56
56,57
56,58
57,58
60,61
60,62
61,62
62,63
62,64
64,65
64,66
67,68
67,69
67,70
68,69
68,70
69,70
71,72
71,73
72,73
74,75
76,77
76,78
76,79
76,80
76,81
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
84,85
86,87
86,88
87,88
89,90
89,91
90,91
92,93
93,94
93,95
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
110,113
111,112
113,114
115,116
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
127,128
129,130
130,131
131,132
131,133
132,133
-----nextToken-----
2,4,9,11,15,16,20,22,25,27,32,34,36,38,40,45,48,50,52,53,58,59,63,65,66,70,73,75,80,83,85,88,91,94,95,99,101,106,108,112,114,116,120,122,126,128,133,134
-----computeFrom-----
13,14
13,15
29,30
29,31
43,44
43,45
68,69
68,70
78,79
78,80
89,90
89,91
97,98
97,99
-----guardedBy-----
34,50
40,52
75,116
70,91
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_01_bad(){    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_01_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_01_bad
{    size_t data;    /* Initialize data */    data = 0;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(1,4,0)
(3,35,0)
(24,18,0)
(25,35,0)
(28,5,0)
(31,41,0)
(30,2,0)
(55,5,0)
(8,59,0)
(8,22,0)
(27,3,0)
(46,45,0)
(23,52,0)
(53,59,0)
(16,23,0)
(59,53,0)
(48,1,0)
(35,45,0)
(24,17,0)
(41,46,0)
(56,22,0)
(0,52,0)
(1,48,0)
(32,52,0)
(39,3,0)
(60,35,0)
(34,46,0)
(22,8,0)
(6,48,0)
(5,55,0)
(48,3,0)
(12,52,0)
(44,10,0)
(43,49,0)
(15,49,0)
(58,5,0)
(36,42,0)
(13,41,0)
(21,36,0)
(14,17,0)
(57,53,0)
(9,46,0)
(53,57,0)
(41,31,0)
(23,12,0)
(11,48,0)
(59,8,0)
(32,12,0)
(41,1,0)
(10,12,0)
(50,1,0)
(20,45,0)
(51,48,0)
(2,45,0)
(8,46,0)
(40,8,0)
(33,32,0)
(53,12,0)
(7,12,0)
(61,31,0)
(8,1,0)
(37,55,0)
(38,5,0)
(49,12,0)
(10,52,0)
(19,29,0)
(17,24,0)
(5,3,0)
(62,2,0)
(54,19,0)
(12,53,0)
(47,10,0)
(17,14,1)
(40,7,1)
(51,6,1)
(15,43,1)
(1,48,1)
(10,44,1)
(39,46,1)
(37,5,1)
(32,12,1)
(53,59,1)
(33,10,1)
(36,21,1)
(7,41,1)
(11,50,1)
(43,12,1)
(59,8,1)
(12,53,1)
(23,12,1)
(5,38,1)
(41,31,1)
(14,49,1)
(26,19,1)
(49,15,1)
(3,27,1)
(32,33,1)
(23,16,1)
(31,61,1)
(53,57,1)
(10,12,1)
(48,3,1)
(49,12,1)
(8,46,1)
(24,17,1)
(48,51,1)
(58,3,1)
(47,49,1)
(6,11,1)
(47,24,1)
(28,58,1)
(8,22,1)
(54,41,1)
(22,56,1)
(55,5,1)
(55,37,1)
(21,55,1)
(46,9,1)
(9,34,1)
(16,32,1)
(27,39,1)
(26,23,1)
(41,46,1)
(19,54,1)
(8,1,1)
(38,28,1)
(56,40,1)
(5,3,1)
(44,47,1)
(13,36,1)
(41,1,1)
(13,1,1)
(61,13,1)
(50,55,1)
(33,41,2)
(5,3,2)
(49,41,2)
(22,41,2)
(50,55,2)
(6,55,2)
(32,12,2)
(44,41,2)
(23,12,2)
(16,41,2)
(8,1,2)
(43,41,2)
(8,22,2)
(41,31,2)
(32,41,2)
(48,55,2)
(11,55,2)
(23,41,2)
(7,41,2)
(1,55,2)
(53,57,2)
(53,41,2)
(41,1,2)
(41,46,2)
(19,41,2)
(24,17,2)
(17,49,2)
(51,55,2)
(8,41,2)
(12,41,2)
(49,12,2)
(59,41,2)
(24,49,2)
(59,8,2)
(10,41,2)
(10,12,2)
(36,55,2)
(12,53,2)
(14,49,2)
(48,3,2)
(47,41,2)
(40,41,2)
(8,46,2)
(55,5,2)
(53,59,2)
(1,48,2)
(21,55,2)
(56,41,2)
(54,41,2)
(15,41,2)
-----------------------------------
(0,if (myString == NULL)
(1,data = strtoul(inputBuffer, NULL, 0)
(2,)
(3,inputBuffer[CHAR_ARRAY_SIZE] = "")
(4,)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,NULL)
(7,myString)
(8,data*sizeof(wchar_t)
(9,0)
(10,wcscpy(myString, HELLO_STRING)
(11,inputBuffer)
(12,myString = (wchar_t *)
(13,data)
(14,1)
(15,NULL)
(16,myString)
(17,-1)
(18,)
(19,printLine("Input is less than the length of the source string")
(20,data)
(21,"fgets()
(22,sizeof(wchar_t)
(23,free(myString)
(24,exit(-1)
(25,inputBuffer)
(26,RET)
(27,"")
(28,CHAR_ARRAY_SIZE)
(29,)
(30,if (data > wcslen(HELLO_STRING)
(31,wcslen(HELLO_STRING)
(32,printWLine(myString)
(33,myString)
(34,data)
(35,)
(36,printLine("fgets()
(37,NULL)
(38,stdin)
(39,inputBuffer)
(40,data)
(41,data > wcslen(HELLO_STRING)
(42,)
(43,myString)
(44,HELLO_STRING)
(45,)
(46,data = 0)
(47,myString)
(48,strtoul(inputBuffer, NULL, 0)
(49,myString == NULL)
(50,data)
(51,0)
(52,)
(53,(wchar_t *)
(54,"Input is less than the length of the source string")
(55,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(56,wchar_t)
(57,wchar_t *)
(58,inputBuffer)
(59,malloc(data*sizeof(wchar_t)
(60,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(61,HELLO_STRING)
(62,myString)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^