-----label-----
0
-----code-----
static void goodB2G()
{
    char * data;
    void (*funcPtr) (char *) = goodB2GSink;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (char *)malloc(100*sizeof(char));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    strcpy(data, "A String");
    printLine(data);
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
5,13
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
38,40
40,41
42,43
42,44
43,44
45,46
45,47
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,30,32,36,39,41,44,46,49,50,54,56,61,63,67,69,70,74,76,80,82
-----computeFrom-----
28,29
28,30
34,35
34,36
45,46
45,47
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    char * data;    void (*funcPtr) (char *) = goodB2GSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    funcPtr(data);}
static void
goodB2G()
goodB2G
{    char * data;    void (*funcPtr) (char *) = goodB2GSink;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (char *)malloc(100*sizeof(char));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    strcpy(data, "A String");    printLine(data);    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = goodB2GSink;
void (*funcPtr) (char *) = goodB2GSink;
void
(*funcPtr) (char *) = goodB2GSink
*funcPtr
*
funcPtr
char *
char
*
*

= goodB2GSink
goodB2GSink
goodB2GSink
data = NULL;
data = NULL
data
data
NULL
NULL
data = (char *)malloc(100*sizeof(char));
data = (char *)malloc(100*sizeof(char))
data
data
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(3,22,0)
(10,4,0)
(13,12,0)
(14,3,0)
(31,22,0)
(11,22,0)
(5,7,0)
(7,3,0)
(6,13,0)
(12,13,0)
(21,3,0)
(19,14,0)
(25,26,0)
(30,21,0)
(17,22,0)
(20,22,0)
(4,22,0)
(33,4,0)
(1,12,0)
(13,19,0)
(3,14,0)
(14,19,0)
(21,22,0)
(25,9,0)
(26,25,0)
(14,0,0)
(16,31,0)
(8,26,0)
(32,22,0)
(28,3,0)
(27,3,0)
(24,7,0)
(15,27,0)
(2,31,0)
(19,13,0)
(0,14,0)
(18,27,0)
(27,22,0)
(20,3,0)
(23,20,0)
(16,2,1)
(25,26,1)
(21,3,1)
(10,33,1)
(3,14,1)
(8,7,1)
(27,3,1)
(7,24,1)
(23,21,1)
(18,25,1)
(5,3,1)
(20,23,1)
(14,19,1)
(29,20,1)
(18,7,1)
(26,8,1)
(24,5,1)
(12,1,1)
(1,6,1)
(15,18,1)
(30,27,1)
(20,3,1)
(7,3,1)
(28,4,1)
(31,16,1)
(33,31,1)
(27,15,1)
(6,28,1)
(21,30,1)
(19,13,1)
(4,10,1)
(13,12,1)
(14,0,1)
(21,3,2)
(26,7,2)
(25,26,2)
(7,3,2)
(14,0,2)
(25,7,2)
(13,12,2)
(20,3,2)
(19,13,2)
(8,7,2)
(3,14,2)
(27,3,2)
(14,19,2)
-----------------------------------
(0,char *)
(1,char)
(2,funcPtr)
(3,data = (char *)
(4,data = NULL)
(5,data)
(6,100)
(7,data == NULL)
(8,1)
(9,)
(10,NULL)
(11,data)
(12,sizeof(char)
(13,100*sizeof(char)
(14,(char *)
(15,"A String")
(16,goodB2GSink)
(17,if (data == NULL)
(18,data)
(19,malloc(100*sizeof(char)
(20,funcPtr(data)
(21,printLine(data)
(22,)
(23,data)
(24,NULL)
(25,exit(-1)
(26,-1)
(27,strcpy(data, "A String")
(28,data)
(29,RET)
(30,data)
(31,(*funcPtr)
(32,funcPtr)
(33,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^