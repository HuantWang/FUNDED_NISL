-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
64,65
65,66
65,67
66,67
69,70
69,71
71,72
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,40,41,47,48,49,50,56,57,58,59,63,67,68,70,72
-----computeFrom-----
14,15
14,16
23,24
23,25
35,36
35,37
43,44
43,45
52,53
52,54
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(11,15,0)
(34,8,0)
(3,1,0)
(5,16,0)
(19,38,0)
(15,34,0)
(18,16,0)
(23,28,0)
(31,10,0)
(12,15,0)
(9,1,0)
(22,16,0)
(10,31,0)
(27,8,0)
(25,4,0)
(21,27,0)
(16,5,0)
(2,28,0)
(0,31,0)
(35,2,0)
(29,10,0)
(4,27,0)
(38,19,0)
(28,2,0)
(15,4,0)
(14,1,0)
(4,15,0)
(30,2,0)
(7,5,0)
(17,34,0)
(5,7,0)
(7,8,0)
(26,3,0)
(19,34,0)
(28,6,0)
(19,13,0)
(36,6,0)
(2,34,0)
(32,1,0)
(31,38,0)
(16,34,0)
(34,19,0)
(24,3,0)
(38,31,0)
(13,19,0)
(6,8,0)
(10,29,1)
(33,7,1)
(21,4,1)
(17,37,1)
(37,3,1)
(34,19,1)
(28,2,1)
(30,35,1)
(29,0,1)
(20,33,1)
(12,11,1)
(19,38,1)
(4,15,1)
(16,18,1)
(28,23,1)
(26,24,1)
(33,37,1)
(15,34,1)
(25,15,1)
(11,6,1)
(7,5,1)
(5,16,1)
(36,28,1)
(31,10,1)
(2,34,1)
(35,34,1)
(22,27,1)
(19,13,1)
(4,25,1)
(16,34,1)
(6,36,1)
(0,17,1)
(27,21,1)
(2,30,1)
(23,2,1)
(38,31,1)
(3,26,1)
(15,12,1)
(18,22,1)
(25,37,2)
(17,37,2)
(15,37,2)
(16,34,2)
(7,5,2)
(29,37,2)
(4,15,2)
(2,37,2)
(27,37,2)
(6,37,2)
(4,37,2)
(36,37,2)
(7,37,2)
(38,37,2)
(5,16,2)
(19,13,2)
(18,37,2)
(19,37,2)
(28,2,2)
(0,37,2)
(35,37,2)
(10,37,2)
(28,37,2)
(11,37,2)
(15,34,2)
(2,34,2)
(30,37,2)
(38,31,2)
(22,37,2)
(5,37,2)
(19,38,2)
(31,10,2)
(23,37,2)
(34,19,2)
(16,37,2)
(34,37,2)
(31,37,2)
(21,37,2)
(12,37,2)
-----------------------------------
(0,100)
(1,)
(2,data[0])
(3,data = NULL)
(4,data[0].intTwo)
(5,&data[0])
(6,data[0].intOne = 0)
(7,printStructLine(&data[0])
(8,)
(9,if(1)
(10,sizeof(twoIntsStruct)
(11,data)
(12,0)
(13,twoIntsStruct *)
(14,data)
(15,data[0])
(16,data[0])
(17,data)
(18,0)
(19,(twoIntsStruct *)
(20,RET)
(21,0)
(22,data)
(23,intOne)
(24,data)
(25,intTwo)
(26,NULL)
(27,data[0].intTwo = 0)
(28,data[0].intOne)
(29,twoIntsStruct)
(30,0)
(31,100*sizeof(twoIntsStruct)
(32,if(1)
(33,1)
(34,data = (twoIntsStruct *)
(35,data)
(36,0)
(37,1)
(38,ALLOCA(100*sizeof(twoIntsStruct)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^