-----label-----
1
-----code-----
int
sosetopt(struct socket *so, struct sockopt *sopt)
{
	int	error, optval;
	struct	linger l;
	struct	timeval tv;
	u_long  val;

	error = 0;
	sopt->sopt_dir = SOPT_SET;
	if (sopt->sopt_level != SOL_SOCKET) {
		if (so->so_proto && so->so_proto->pr_ctloutput) {
			return (so_pru_ctloutput(so, sopt));
		}
		error = ENOPROTOOPT;
	} else {
		switch (sopt->sopt_name) {
#ifdef INET
		case SO_ACCEPTFILTER:
			error = do_setopt_accept_filter(so, sopt);
			if (error)
				goto bad;
			break;
#endif /* INET */
		case SO_LINGER:
			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);
			if (error)
				goto bad;

			so->so_linger = l.l_linger;
			if (l.l_onoff)
				so->so_options |= SO_LINGER;
			else
				so->so_options &= ~SO_LINGER;
			break;

		case SO_DEBUG:
		case SO_KEEPALIVE:
		case SO_DONTROUTE:
		case SO_USELOOPBACK:
		case SO_BROADCAST:
		case SO_REUSEADDR:
		case SO_REUSEPORT:
		case SO_OOBINLINE:
		case SO_TIMESTAMP:
			error = sooptcopyin(sopt, &optval, sizeof optval,
					    sizeof optval);
			if (error)
				goto bad;
			if (optval)
				so->so_options |= sopt->sopt_name;
			else
				so->so_options &= ~sopt->sopt_name;
			break;

		case SO_SNDBUF:
		case SO_RCVBUF:
		case SO_SNDLOWAT:
		case SO_RCVLOWAT:
			error = sooptcopyin(sopt, &optval, sizeof optval,
					    sizeof optval);
			if (error)
				goto bad;

			/*
			 * Values < 1 make no sense for any of these
			 * options, so disallow them.
			 */
			if (optval < 1) {
				error = EINVAL;
				goto bad;
			}

			switch (sopt->sopt_name) {
			case SO_SNDBUF:
			case SO_RCVBUF:
				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?
				    &so->so_snd : &so->so_rcv, (u_long)optval,
				    so,
				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {
					error = ENOBUFS;
					goto bad;
				}
				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :
				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;
				break;

			/*
			 * Make sure the low-water is never greater than
			 * the high-water.
			 */
			case SO_SNDLOWAT:
				so->so_snd.ssb_lowat =
				    (optval > so->so_snd.ssb_hiwat) ?
				    so->so_snd.ssb_hiwat : optval;
				break;
			case SO_RCVLOWAT:
				so->so_rcv.ssb_lowat =
				    (optval > so->so_rcv.ssb_hiwat) ?
				    so->so_rcv.ssb_hiwat : optval;
				break;
			}
			break;

		case SO_SNDTIMEO:
		case SO_RCVTIMEO:
			error = sooptcopyin(sopt, &tv, sizeof tv,
					    sizeof tv);
			if (error)
				goto bad;

			/* assert(hz > 0); */
			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||
			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {
				error = EDOM;
				goto bad;
			}
			/* assert(tick > 0); */
			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */
			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;
			if (val > SHRT_MAX) {
				error = EDOM;
				goto bad;
			}
			if (val == 0 && tv.tv_usec != 0)
				val = 1;

			switch (sopt->sopt_name) {
			case SO_SNDTIMEO:
				so->so_snd.ssb_timeo = val;
				break;
			case SO_RCVTIMEO:
				so->so_rcv.ssb_timeo = val;
				break;
			}
			break;
		default:
			error = ENOPROTOOPT;
			break;
		}
		if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput) {
			(void) so_pru_ctloutput(so, sopt);
		}
	}
bad:
	return (error);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
48,49
49,50
49,51
50,51
50,52
51,52
54,55
56,57
56,58
56,59
57,58
57,59
58,59
58,60
59,60
62,63
64,65
64,66
65,66
65,67
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
72,74
73,74
77,78
78,79
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
93,95
94,95
94,96
95,96
95,97
96,97
99,100
99,101
99,102
99,103
99,104
99,105
99,106
99,107
99,108
99,109
99,110
99,111
99,112
99,113
99,114
99,115
99,116
99,117
99,118
99,119
99,120
99,121
99,122
99,123
99,124
99,125
99,126
99,127
99,128
99,129
99,130
99,131
99,132
99,133
99,134
99,135
99,136
99,137
99,138
99,139
99,140
100,101
101,102
103,104
104,105
104,106
105,106
107,108
107,109
107,110
107,111
107,112
108,109
110,111
112,113
113,114
115,116
116,117
118,119
119,120
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
128,130
129,130
132,133
132,134
133,134
136,137
136,138
136,139
137,138
137,139
138,139
141,142
142,143
142,144
143,144
143,145
144,145
147,148
149,150
150,151
150,152
151,152
151,153
152,153
155,156
156,157
159,160
160,161
162,163
163,164
165,166
166,167
168,169
169,170
171,172
172,173
174,175
175,176
177,178
178,179
180,181
181,182
183,184
184,185
186,187
187,188
187,189
188,189
190,191
190,192
190,193
190,194
190,195
191,192
193,194
195,196
196,197
198,199
199,200
201,202
202,203
204,205
204,206
205,206
207,208
209,210
209,211
209,212
210,211
212,213
213,214
213,215
214,215
214,216
215,216
218,219
218,220
219,220
222,223
223,224
223,225
224,225
224,226
225,226
228,229
229,230
229,231
230,231
234,235
235,236
237,238
238,239
240,241
241,242
243,244
244,245
246,247
247,248
247,249
248,249
250,251
250,252
250,253
250,254
250,255
251,252
253,254
255,256
256,257
258,259
259,260
261,262
262,263
264,265
264,266
265,266
267,268
269,270
269,271
270,271
270,272
271,272
274,275
274,276
275,276
276,277
276,278
277,278
279,280
281,282
283,284
283,285
284,285
284,286
285,286
288,289
288,290
288,291
288,292
288,293
288,294
288,295
288,296
288,297
288,298
288,299
289,290
290,291
292,293
293,294
295,296
295,297
296,297
296,298
297,298
297,299
297,300
297,301
297,302
298,299
300,301
300,302
300,303
301,302
301,303
302,303
302,304
303,304
306,307
308,309
309,310
309,311
310,311
313,314
314,315
314,316
315,316
318,319
318,320
319,320
319,321
320,321
323,324
325,326
327,328
328,329
328,330
329,330
329,331
330,331
333,334
336,337
336,338
337,338
338,339
338,340
339,340
341,342
343,344
345,346
346,347
346,348
347,348
347,349
348,349
349,350
349,351
349,352
350,351
350,352
351,352
351,353
352,353
355,356
357,358
358,359
358,360
359,360
362,363
363,364
363,365
364,365
368,369
369,370
372,373
373,374
375,376
376,377
376,378
377,378
377,379
378,379
378,380
379,380
383,384
383,385
383,386
384,385
385,386
385,387
386,387
388,389
388,390
389,390
389,391
390,391
394,395
394,396
395,396
395,397
396,397
400,401
403,404
404,405
406,407
407,408
407,409
408,409
408,410
409,410
409,411
410,411
414,415
414,416
414,417
415,416
416,417
416,418
417,418
419,420
419,421
420,421
420,422
421,422
425,426
425,427
426,427
426,428
427,428
431,432
435,436
436,437
438,439
439,440
441,442
442,443
442,444
443,444
445,446
445,447
445,448
445,449
445,450
446,447
448,449
450,451
451,452
453,454
454,455
456,457
457,458
459,460
459,461
460,461
462,463
464,465
464,466
465,466
465,467
466,467
466,468
467,468
467,469
468,469
468,470
469,470
469,471
470,471
474,475
474,476
475,476
475,477
476,477
479,480
479,481
480,481
482,483
484,485
484,486
485,486
485,487
486,487
490,491
490,492
491,492
491,493
492,493
496,497
496,498
497,498
498,499
498,500
499,500
501,502
503,504
505,506
506,507
506,508
507,508
509,510
509,511
510,511
510,512
511,512
512,513
514,515
514,516
515,516
515,517
516,517
519,520
521,522
521,523
522,523
522,524
523,524
526,527
528,529
528,530
529,530
529,531
530,531
532,533
534,535
534,536
535,536
536,537
536,538
537,538
539,540
541,542
543,544
543,545
544,545
544,546
545,546
545,547
546,547
549,550
549,551
550,551
550,552
551,552
555,556
556,557
556,558
557,558
560,561
560,562
561,562
561,563
562,563
565,566
565,567
565,568
565,569
565,570
565,571
566,567
567,568
569,570
570,571
570,572
571,572
571,573
572,573
572,574
573,574
577,578
580,581
581,582
583,584
584,585
584,586
585,586
585,587
586,587
586,588
587,588
591,592
596,597
597,598
597,599
598,599
600,601
603,604
603,605
604,605
604,606
605,606
605,607
606,607
606,608
607,608
610,611
610,612
611,612
614,615
614,616
615,616
615,617
616,617
620,621
621,622
622,623
622,624
623,624
623,625
626,627
626,628
626,629
627,628
629,630
631,632
633,634
633,635
635,636
636,637
637,638
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,24,28,30,34,36,40,42,46,47,52,53,55,60,61,63,69,70,74,75,76,82,84,86,90,92,97,98,102,106,109,111,114,117,120,123,125,130,131,134,135,139,140,145,146,148,153,154,157,158,161,164,167,170,173,176,179,182,185,189,192,194,197,200,203,206,208,211,216,217,220,221,226,227,231,232,233,236,239,242,245,249,252,254,257,260,263,266,268,272,273,278,280,282,286,287,291,294,299,304,305,307,311,312,316,317,321,322,324,326,331,332,334,335,340,342,344,353,354,356,360,361,365,366,367,370,371,374,380,381,382,387,391,392,393,397,398,399,401,402,405,411,412,413,418,422,423,424,428,429,430,432,433,434,437,440,444,447,449,452,455,458,461,463,471,472,473,477,478,481,483,487,488,489,493,494,495,500,502,504,508,513,517,518,520,524,525,527,531,533,538,540,542,547,548,552,553,554,558,559,563,564,568,574,575,576,578,579,582,588,589,590,592,593,594,595,599,601,602,608,609,612,613,617,618,619,624,625,628,630,632,634,638
-----computeFrom-----
44,45
44,46
49,50
49,51
57,58
57,59
66,67
66,68
88,89
88,90
104,105
104,106
127,128
127,129
142,143
142,144
150,151
150,152
187,188
187,189
213,214
213,215
223,224
223,225
247,248
247,249
270,271
270,272
276,277
276,278
296,297
296,298
301,302
301,303
338,339
338,340
346,347
346,348
350,351
350,352
376,377
376,378
385,386
385,387
407,408
407,409
416,417
416,418
442,443
442,444
465,466
465,467
466,467
466,468
467,468
467,469
468,469
468,470
474,475
474,476
479,480
479,481
484,485
484,486
490,491
490,492
498,499
498,500
506,507
506,508
509,510
509,511
514,515
514,516
521,522
521,523
529,530
529,531
536,537
536,538
544,545
544,546
545,546
545,547
549,550
549,551
556,557
556,558
570,571
570,572
584,585
584,586
597,598
597,599
604,605
604,606
605,606
605,607
606,607
606,608
-----guardedBy-----
60,86
74,84
547,558
617,630
-----guardedByNegation-----
60,632
-----lastLexicalUse-----
60,632
-----jump-----
60,632
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ReturnStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
intsosetopt(struct socket *so, struct sockopt *sopt){	int	error, optval;	struct	linger l;	struct	timeval tv;	u_long  val;	error = 0;	sopt->sopt_dir = SOPT_SET;	if (sopt->sopt_level != SOL_SOCKET) {		if (so->so_proto && so->so_proto->pr_ctloutput) {			return (so_pru_ctloutput(so, sopt));		}		error = ENOPROTOOPT;	} else {		switch (sopt->sopt_name) {#ifdef INET		case SO_ACCEPTFILTER:			error = do_setopt_accept_filter(so, sopt);			if (error)				goto bad;			break;#endif /* INET */		case SO_LINGER:			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);			if (error)				goto bad;			so->so_linger = l.l_linger;			if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;			break;		case SO_DEBUG:		case SO_KEEPALIVE:		case SO_DONTROUTE:		case SO_USELOOPBACK:		case SO_BROADCAST:		case SO_REUSEADDR:		case SO_REUSEPORT:		case SO_OOBINLINE:		case SO_TIMESTAMP:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;			break;		case SO_SNDBUF:		case SO_RCVBUF:		case SO_SNDLOWAT:		case SO_RCVLOWAT:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			/*			 * Values < 1 make no sense for any of these			 * options, so disallow them.			 */			if (optval < 1) {				error = EINVAL;				goto bad;			}			switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}			break;		case SO_SNDTIMEO:		case SO_RCVTIMEO:			error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);			if (error)				goto bad;			/* assert(hz > 0); */			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}			/* assert(tick > 0); */			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;			if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}			if (val == 0 && tv.tv_usec != 0)				val = 1;			switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}			break;		default:			error = ENOPROTOOPT;			break;		}		if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput) {			(void) so_pru_ctloutput(so, sopt);		}	}bad:	return (error);}
int
sosetopt(struct socket *so, struct sockopt *sopt)
sosetopt
struct socket *so
struct socket
socket
*so
*
so
struct sockopt *sopt
struct sockopt
sockopt
*sopt
*
sopt
{	int	error, optval;	struct	linger l;	struct	timeval tv;	u_long  val;	error = 0;	sopt->sopt_dir = SOPT_SET;	if (sopt->sopt_level != SOL_SOCKET) {		if (so->so_proto && so->so_proto->pr_ctloutput) {			return (so_pru_ctloutput(so, sopt));		}		error = ENOPROTOOPT;	} else {		switch (sopt->sopt_name) {#ifdef INET		case SO_ACCEPTFILTER:			error = do_setopt_accept_filter(so, sopt);			if (error)				goto bad;			break;#endif /* INET */		case SO_LINGER:			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);			if (error)				goto bad;			so->so_linger = l.l_linger;			if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;			break;		case SO_DEBUG:		case SO_KEEPALIVE:		case SO_DONTROUTE:		case SO_USELOOPBACK:		case SO_BROADCAST:		case SO_REUSEADDR:		case SO_REUSEPORT:		case SO_OOBINLINE:		case SO_TIMESTAMP:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;			break;		case SO_SNDBUF:		case SO_RCVBUF:		case SO_SNDLOWAT:		case SO_RCVLOWAT:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			/*			 * Values < 1 make no sense for any of these			 * options, so disallow them.			 */			if (optval < 1) {				error = EINVAL;				goto bad;			}			switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}			break;		case SO_SNDTIMEO:		case SO_RCVTIMEO:			error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);			if (error)				goto bad;			/* assert(hz > 0); */			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}			/* assert(tick > 0); */			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;			if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}			if (val == 0 && tv.tv_usec != 0)				val = 1;			switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}			break;		default:			error = ENOPROTOOPT;			break;		}		if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput) {			(void) so_pru_ctloutput(so, sopt);		}	}bad:	return (error);}
int	error, optval;
int	error, optval;
int
error
error
optval
optval
struct	linger l;
struct	linger l;
struct	linger
linger
l
l
struct	timeval tv;
struct	timeval tv;
struct	timeval
timeval
tv
tv
u_long  val;
u_long  val;
u_long
u_long
val
val
error = 0;
error = 0
error
error
0
sopt->sopt_dir = SOPT_SET;
sopt->sopt_dir = SOPT_SET
sopt->sopt_dir
sopt
sopt
sopt_dir
SOPT_SET
SOPT_SET
if (sopt->sopt_level != SOL_SOCKET) {		if (so->so_proto && so->so_proto->pr_ctloutput) {			return (so_pru_ctloutput(so, sopt));		}		error = ENOPROTOOPT;	} else {		switch (sopt->sopt_name) {#ifdef INET		case SO_ACCEPTFILTER:			error = do_setopt_accept_filter(so, sopt);			if (error)				goto bad;			break;#endif /* INET */		case SO_LINGER:			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);			if (error)				goto bad;			so->so_linger = l.l_linger;			if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;			break;		case SO_DEBUG:		case SO_KEEPALIVE:		case SO_DONTROUTE:		case SO_USELOOPBACK:		case SO_BROADCAST:		case SO_REUSEADDR:		case SO_REUSEPORT:		case SO_OOBINLINE:		case SO_TIMESTAMP:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;			break;		case SO_SNDBUF:		case SO_RCVBUF:		case SO_SNDLOWAT:		case SO_RCVLOWAT:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			/*			 * Values < 1 make no sense for any of these			 * options, so disallow them.			 */			if (optval < 1) {				error = EINVAL;				goto bad;			}			switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}			break;		case SO_SNDTIMEO:		case SO_RCVTIMEO:			error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);			if (error)				goto bad;			/* assert(hz > 0); */			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}			/* assert(tick > 0); */			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;			if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}			if (val == 0 && tv.tv_usec != 0)				val = 1;			switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}			break;		default:			error = ENOPROTOOPT;			break;		}		if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput) {			(void) so_pru_ctloutput(so, sopt);		}	}
sopt->sopt_level != SOL_SOCKET
sopt->sopt_level
sopt
sopt
sopt_level
SOL_SOCKET
SOL_SOCKET
{		if (so->so_proto && so->so_proto->pr_ctloutput) {			return (so_pru_ctloutput(so, sopt));		}		error = ENOPROTOOPT;	}
if (so->so_proto && so->so_proto->pr_ctloutput) {			return (so_pru_ctloutput(so, sopt));		}
so->so_proto && so->so_proto->pr_ctloutput
so->so_proto
so
so
so_proto
so->so_proto->pr_ctloutput
so->so_proto
so
so
so_proto
pr_ctloutput
{			return (so_pru_ctloutput(so, sopt));		}
return (so_pru_ctloutput(so, sopt));
(so_pru_ctloutput(so, sopt))
so_pru_ctloutput(so, sopt)
so_pru_ctloutput
so_pru_ctloutput
so
so
sopt
sopt
error = ENOPROTOOPT;
error = ENOPROTOOPT
error
error
ENOPROTOOPT
ENOPROTOOPT
{		switch (sopt->sopt_name) {#ifdef INET		case SO_ACCEPTFILTER:			error = do_setopt_accept_filter(so, sopt);			if (error)				goto bad;			break;#endif /* INET */		case SO_LINGER:			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);			if (error)				goto bad;			so->so_linger = l.l_linger;			if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;			break;		case SO_DEBUG:		case SO_KEEPALIVE:		case SO_DONTROUTE:		case SO_USELOOPBACK:		case SO_BROADCAST:		case SO_REUSEADDR:		case SO_REUSEPORT:		case SO_OOBINLINE:		case SO_TIMESTAMP:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;			break;		case SO_SNDBUF:		case SO_RCVBUF:		case SO_SNDLOWAT:		case SO_RCVLOWAT:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			/*			 * Values < 1 make no sense for any of these			 * options, so disallow them.			 */			if (optval < 1) {				error = EINVAL;				goto bad;			}			switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}			break;		case SO_SNDTIMEO:		case SO_RCVTIMEO:			error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);			if (error)				goto bad;			/* assert(hz > 0); */			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}			/* assert(tick > 0); */			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;			if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}			if (val == 0 && tv.tv_usec != 0)				val = 1;			switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}			break;		default:			error = ENOPROTOOPT;			break;		}		if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput) {			(void) so_pru_ctloutput(so, sopt);		}	}
switch (sopt->sopt_name) {#ifdef INET		case SO_ACCEPTFILTER:			error = do_setopt_accept_filter(so, sopt);			if (error)				goto bad;			break;#endif /* INET */		case SO_LINGER:			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);			if (error)				goto bad;			so->so_linger = l.l_linger;			if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;			break;		case SO_DEBUG:		case SO_KEEPALIVE:		case SO_DONTROUTE:		case SO_USELOOPBACK:		case SO_BROADCAST:		case SO_REUSEADDR:		case SO_REUSEPORT:		case SO_OOBINLINE:		case SO_TIMESTAMP:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;			break;		case SO_SNDBUF:		case SO_RCVBUF:		case SO_SNDLOWAT:		case SO_RCVLOWAT:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			/*			 * Values < 1 make no sense for any of these			 * options, so disallow them.			 */			if (optval < 1) {				error = EINVAL;				goto bad;			}			switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}			break;		case SO_SNDTIMEO:		case SO_RCVTIMEO:			error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);			if (error)				goto bad;			/* assert(hz > 0); */			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}			/* assert(tick > 0); */			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;			if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}			if (val == 0 && tv.tv_usec != 0)				val = 1;			switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}			break;		default:			error = ENOPROTOOPT;			break;		}
sopt->sopt_name
sopt
sopt
sopt_name
{#ifdef INET		case SO_ACCEPTFILTER:			error = do_setopt_accept_filter(so, sopt);			if (error)				goto bad;			break;#endif /* INET */		case SO_LINGER:			error = sooptcopyin(sopt, &l, sizeof l, sizeof l);			if (error)				goto bad;			so->so_linger = l.l_linger;			if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;			break;		case SO_DEBUG:		case SO_KEEPALIVE:		case SO_DONTROUTE:		case SO_USELOOPBACK:		case SO_BROADCAST:		case SO_REUSEADDR:		case SO_REUSEPORT:		case SO_OOBINLINE:		case SO_TIMESTAMP:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;			break;		case SO_SNDBUF:		case SO_RCVBUF:		case SO_SNDLOWAT:		case SO_RCVLOWAT:			error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);			if (error)				goto bad;			/*			 * Values < 1 make no sense for any of these			 * options, so disallow them.			 */			if (optval < 1) {				error = EINVAL;				goto bad;			}			switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}			break;		case SO_SNDTIMEO:		case SO_RCVTIMEO:			error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);			if (error)				goto bad;			/* assert(hz > 0); */			if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}			/* assert(tick > 0); */			/* assert(ULONG_MAX - SHRT_MAX >= 1000000); */			val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;			if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}			if (val == 0 && tv.tv_usec != 0)				val = 1;			switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}			break;		default:			error = ENOPROTOOPT;			break;		}
case SO_LINGER:
SO_LINGER
SO_LINGER
error = sooptcopyin(sopt, &l, sizeof l, sizeof l);
error = sooptcopyin(sopt, &l, sizeof l, sizeof l)
error
error
sooptcopyin(sopt, &l, sizeof l, sizeof l)
sooptcopyin
sooptcopyin
sopt
sopt
&l
l
l
sizeof l
l
l
sizeof l
l
l
if (error)				goto bad;
error
error
goto bad;
bad
so->so_linger = l.l_linger;
so->so_linger = l.l_linger
so->so_linger
so
so
so_linger
l.l_linger
l
l
l_linger
if (l.l_onoff)				so->so_options |= SO_LINGER;			else				so->so_options &= ~SO_LINGER;
l.l_onoff
l
l
l_onoff
so->so_options |= SO_LINGER;
so->so_options |= SO_LINGER
so->so_options
so
so
so_options
SO_LINGER
SO_LINGER
so->so_options &= ~SO_LINGER;
so->so_options &= ~SO_LINGER
so->so_options
so
so
so_options
~SO_LINGER
SO_LINGER
SO_LINGER
break;
case SO_DEBUG:
SO_DEBUG
SO_DEBUG
case SO_KEEPALIVE:
SO_KEEPALIVE
SO_KEEPALIVE
case SO_DONTROUTE:
SO_DONTROUTE
SO_DONTROUTE
case SO_USELOOPBACK:
SO_USELOOPBACK
SO_USELOOPBACK
case SO_BROADCAST:
SO_BROADCAST
SO_BROADCAST
case SO_REUSEADDR:
SO_REUSEADDR
SO_REUSEADDR
case SO_REUSEPORT:
SO_REUSEPORT
SO_REUSEPORT
case SO_OOBINLINE:
SO_OOBINLINE
SO_OOBINLINE
case SO_TIMESTAMP:
SO_TIMESTAMP
SO_TIMESTAMP
error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);
error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval)
error
error
sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval)
sooptcopyin
sooptcopyin
sopt
sopt
&optval
optval
optval
sizeof optval
optval
optval
sizeof optval
optval
optval
if (error)				goto bad;
error
error
goto bad;
bad
if (optval)				so->so_options |= sopt->sopt_name;			else				so->so_options &= ~sopt->sopt_name;
optval
optval
so->so_options |= sopt->sopt_name;
so->so_options |= sopt->sopt_name
so->so_options
so
so
so_options
sopt->sopt_name
sopt
sopt
sopt_name
so->so_options &= ~sopt->sopt_name;
so->so_options &= ~sopt->sopt_name
so->so_options
so
so
so_options
~sopt->sopt_name
sopt->sopt_name
sopt
sopt
sopt_name
break;
case SO_SNDBUF:
SO_SNDBUF
SO_SNDBUF
case SO_RCVBUF:
SO_RCVBUF
SO_RCVBUF
case SO_SNDLOWAT:
SO_SNDLOWAT
SO_SNDLOWAT
case SO_RCVLOWAT:
SO_RCVLOWAT
SO_RCVLOWAT
error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval);
error = sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval)
error
error
sooptcopyin(sopt, &optval, sizeof optval,					    sizeof optval)
sooptcopyin
sooptcopyin
sopt
sopt
&optval
optval
optval
sizeof optval
optval
optval
sizeof optval
optval
optval
if (error)				goto bad;
error
error
goto bad;
bad
if (optval < 1) {				error = EINVAL;				goto bad;			}
optval < 1
optval
optval
1
{				error = EINVAL;				goto bad;			}
error = EINVAL;
error = EINVAL
error
error
EINVAL
EINVAL
goto bad;
bad
switch (sopt->sopt_name) {			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}
sopt->sopt_name
sopt
sopt
sopt_name
{			case SO_SNDBUF:			case SO_RCVBUF:				if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}				(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;				break;			/*			 * Make sure the low-water is never greater than			 * the high-water.			 */			case SO_SNDLOWAT:				so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;				break;			case SO_RCVLOWAT:				so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;				break;			}
case SO_SNDBUF:
SO_SNDBUF
SO_SNDBUF
case SO_RCVBUF:
SO_RCVBUF
SO_RCVBUF
if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0) {					error = ENOBUFS;					goto bad;				}
ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE]) == 0
ssb_reserve(sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv, (u_long)optval,				    so,				    &curproc->p_rlimit[RLIMIT_SBSIZE])
ssb_reserve
ssb_reserve
sopt->sopt_name == SO_SNDBUF ?				    &so->so_snd : &so->so_rcv
sopt->sopt_name == SO_SNDBUF
sopt->sopt_name
sopt
sopt
sopt_name
SO_SNDBUF
SO_SNDBUF
&so->so_snd
so->so_snd
so
so
so_snd
&so->so_rcv
so->so_rcv
so
so
so_rcv
(u_long)optval
u_long
u_long
u_long

optval
optval
so
so
&curproc->p_rlimit[RLIMIT_SBSIZE]
curproc->p_rlimit[RLIMIT_SBSIZE]
curproc->p_rlimit
curproc
curproc
p_rlimit
RLIMIT_SBSIZE
RLIMIT_SBSIZE
0
{					error = ENOBUFS;					goto bad;				}
error = ENOBUFS;
error = ENOBUFS
error
error
ENOBUFS
ENOBUFS
goto bad;
bad
(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE;
(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags &= ~SSB_AUTOSIZE
(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)->ssb_flags
(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv)
sopt->sopt_name == SO_SNDBUF ? &so->so_snd :				    &so->so_rcv
sopt->sopt_name == SO_SNDBUF
sopt->sopt_name
sopt
sopt
sopt_name
SO_SNDBUF
SO_SNDBUF
&so->so_snd
so->so_snd
so
so
so_snd
&so->so_rcv
so->so_rcv
so
so
so_rcv
ssb_flags
~SSB_AUTOSIZE
SSB_AUTOSIZE
SSB_AUTOSIZE
break;
case SO_SNDLOWAT:
SO_SNDLOWAT
SO_SNDLOWAT
so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval;
so->so_snd.ssb_lowat =				    (optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval
so->so_snd.ssb_lowat
so->so_snd
so
so
so_snd
ssb_lowat
(optval > so->so_snd.ssb_hiwat) ?				    so->so_snd.ssb_hiwat : optval
(optval > so->so_snd.ssb_hiwat)
optval > so->so_snd.ssb_hiwat
optval
optval
so->so_snd.ssb_hiwat
so->so_snd
so
so
so_snd
ssb_hiwat
so->so_snd.ssb_hiwat
so->so_snd
so
so
so_snd
ssb_hiwat
optval
optval
break;
case SO_RCVLOWAT:
SO_RCVLOWAT
SO_RCVLOWAT
so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval;
so->so_rcv.ssb_lowat =				    (optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval
so->so_rcv.ssb_lowat
so->so_rcv
so
so
so_rcv
ssb_lowat
(optval > so->so_rcv.ssb_hiwat) ?				    so->so_rcv.ssb_hiwat : optval
(optval > so->so_rcv.ssb_hiwat)
optval > so->so_rcv.ssb_hiwat
optval
optval
so->so_rcv.ssb_hiwat
so->so_rcv
so
so
so_rcv
ssb_hiwat
so->so_rcv.ssb_hiwat
so->so_rcv
so
so
so_rcv
ssb_hiwat
optval
optval
break;
break;
case SO_SNDTIMEO:
SO_SNDTIMEO
SO_SNDTIMEO
case SO_RCVTIMEO:
SO_RCVTIMEO
SO_RCVTIMEO
error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv);
error = sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv)
error
error
sooptcopyin(sopt, &tv, sizeof tv,					    sizeof tv)
sooptcopyin
sooptcopyin
sopt
sopt
&tv
tv
tv
sizeof tv
tv
tv
sizeof tv
tv
tv
if (error)				goto bad;
error
error
goto bad;
bad
if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000) {				error = EDOM;				goto bad;			}
tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0 || tv.tv_usec >= 1000000
tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||			    tv.tv_usec < 0
tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz
tv.tv_sec < 0
tv.tv_sec
tv
tv
tv_sec
0
tv.tv_sec > SHRT_MAX / hz
tv.tv_sec
tv
tv
tv_sec
SHRT_MAX / hz
SHRT_MAX
SHRT_MAX
hz
hz
tv.tv_usec < 0
tv.tv_usec
tv
tv
tv_usec
0
tv.tv_usec >= 1000000
tv.tv_usec
tv
tv
tv_usec
1000000
{				error = EDOM;				goto bad;			}
error = EDOM;
error = EDOM
error
error
EDOM
EDOM
goto bad;
bad
val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick;
val = (u_long)(tv.tv_sec * hz) + tv.tv_usec / tick
val
val
(u_long)(tv.tv_sec * hz) + tv.tv_usec / tick
(u_long)(tv.tv_sec * hz)
(u_long)
u_long
u_long
tv.tv_sec * hz
tv.tv_sec
tv
tv
tv_sec
hz
hz
tv.tv_usec / tick
tv.tv_usec
tv
tv
tv_usec
tick
tick
if (val > SHRT_MAX) {				error = EDOM;				goto bad;			}
val > SHRT_MAX
val
val
SHRT_MAX
SHRT_MAX
{				error = EDOM;				goto bad;			}
error = EDOM;
error = EDOM
error
error
EDOM
EDOM
goto bad;
bad
if (val == 0 && tv.tv_usec != 0)				val = 1;
val == 0 && tv.tv_usec != 0
val == 0
val
val
0
tv.tv_usec != 0
tv.tv_usec
tv
tv
tv_usec
0
val = 1;
val = 1
val
val
1
switch (sopt->sopt_name) {			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}
sopt->sopt_name
sopt
sopt
sopt_name
{			case SO_SNDTIMEO:				so->so_snd.ssb_timeo = val;				break;			case SO_RCVTIMEO:				so->so_rcv.ssb_timeo = val;				break;			}
case SO_SNDTIMEO:
SO_SNDTIMEO
SO_SNDTIMEO
so->so_snd.ssb_timeo = val;
so->so_snd.ssb_timeo = val
so->so_snd.ssb_timeo
so->so_snd
so
so
so_snd
ssb_timeo
val
val
break;
case SO_RCVTIMEO:
SO_RCVTIMEO
SO_RCVTIMEO
so->so_rcv.ssb_timeo = val;
so->so_rcv.ssb_timeo = val
so->so_rcv.ssb_timeo
so->so_rcv
so
so
so_rcv
ssb_timeo
val
val
break;
break;
default:
error = ENOPROTOOPT;
error = ENOPROTOOPT
error
error
ENOPROTOOPT
ENOPROTOOPT
break;
if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput) {			(void) so_pru_ctloutput(so, sopt);		}
error == 0 && so->so_proto && so->so_proto->pr_ctloutput
error == 0 && so->so_proto
error == 0
error
error
0
so->so_proto
so
so
so_proto
so->so_proto->pr_ctloutput
so->so_proto
so
so
so_proto
pr_ctloutput
{			(void) so_pru_ctloutput(so, sopt);		}
(void) so_pru_ctloutput(so, sopt);
(void) so_pru_ctloutput(so, sopt)
void
void

so_pru_ctloutput(so, sopt)
so_pru_ctloutput
so_pru_ctloutput
so
so
sopt
sopt
bad:	return (error);
bad
return (error);
(error)
error
error
-----joern-----
(90,307,0)
(319,166,0)
(105,149,0)
(348,143,0)
(308,128,0)
(326,365,0)
(147,257,0)
(91,340,0)
(170,359,0)
(51,298,0)
(94,322,0)
(396,364,0)
(264,190,0)
(123,215,0)
(357,80,0)
(306,307,0)
(122,171,0)
(324,29,0)
(70,35,0)
(177,81,0)
(74,347,0)
(237,60,0)
(16,113,0)
(171,122,0)
(160,332,0)
(216,117,0)
(220,143,0)
(241,185,0)
(144,79,0)
(132,347,0)
(217,201,0)
(220,363,0)
(346,307,0)
(286,257,0)
(214,97,0)
(193,331,0)
(188,161,0)
(371,37,0)
(364,396,0)
(56,235,0)
(136,256,0)
(262,326,0)
(131,117,0)
(78,176,0)
(213,393,0)
(72,91,0)
(18,156,0)
(363,104,0)
(157,58,0)
(277,226,0)
(119,377,0)
(139,107,0)
(287,104,0)
(292,8,0)
(139,196,0)
(166,233,0)
(79,156,0)
(351,307,0)
(385,372,0)
(1,17,0)
(174,226,0)
(262,377,0)
(375,307,0)
(212,349,0)
(267,83,0)
(255,307,0)
(181,79,0)
(226,62,0)
(332,249,0)
(173,156,0)
(49,64,0)
(98,197,0)
(39,296,0)
(185,62,0)
(191,80,0)
(279,81,0)
(22,266,0)
(81,13,0)
(302,21,0)
(177,190,0)
(200,6,0)
(224,307,0)
(369,173,0)
(395,297,0)
(111,340,0)
(103,307,0)
(180,238,0)
(210,331,0)
(115,64,0)
(198,233,0)
(238,156,0)
(297,135,0)
(269,251,0)
(32,26,0)
(169,307,0)
(358,256,0)
(393,194,0)
(14,249,0)
(135,125,0)
(349,37,0)
(126,323,0)
(162,155,0)
(256,11,0)
(117,77,0)
(158,30,0)
(267,156,0)
(215,270,0)
(350,68,0)
(117,216,0)
(256,358,0)
(78,11,0)
(383,344,0)
(25,39,0)
(57,121,0)
(391,104,0)
(311,307,0)
(278,296,0)
(6,80,0)
(75,177,0)
(128,309,0)
(63,215,0)
(207,79,0)
(234,107,0)
(154,296,0)
(302,11,0)
(289,156,0)
(37,349,0)
(97,118,0)
(123,156,0)
(355,359,0)
(336,374,0)
(215,63,0)
(262,364,0)
(201,11,0)
(266,238,0)
(370,194,0)
(303,307,0)
(85,55,0)
(209,368,0)
(219,307,0)
(116,288,0)
(177,331,0)
(88,155,0)
(52,162,0)
(322,334,0)
(77,117,0)
(364,39,0)
(376,297,0)
(329,8,0)
(185,241,0)
(323,69,0)
(143,156,0)
(230,369,0)
(62,185,0)
(30,11,0)
(283,307,0)
(89,21,0)
(69,323,0)
(36,157,0)
(178,235,0)
(353,140,0)
(179,359,0)
(31,222,0)
(120,50,0)
(165,307,0)
(372,385,0)
(233,222,0)
(302,76,0)
(18,82,0)
(10,156,0)
(62,226,0)
(248,322,0)
(163,359,0)
(381,140,0)
(268,233,0)
(254,25,0)
(222,31,0)
(30,44,0)
(372,156,0)
(371,295,0)
(35,390,0)
(12,372,0)
(80,11,0)
(321,157,0)
(302,127,0)
(75,176,0)
(150,359,0)
(155,276,0)
(73,295,0)
(123,11,0)
(184,197,0)
(93,307,0)
(332,310,0)
(196,139,0)
(177,315,0)
(97,11,0)
(177,128,0)
(332,11,0)
(253,196,0)
(100,20,0)
(230,265,0)
(194,393,0)
(10,319,0)
(145,78,0)
(6,307,0)
(55,69,0)
(112,277,0)
(92,251,0)
(109,323,0)
(301,13,0)
(288,156,0)
(125,135,0)
(64,11,0)
(78,156,0)
(96,315,0)
(387,359,0)
(27,265,0)
(166,5,0)
(218,41,0)
(43,307,0)
(257,11,0)
(21,302,0)
(57,396,0)
(205,295,0)
(333,324,0)
(33,307,0)
(347,132,0)
(189,117,0)
(223,307,0)
(166,319,0)
(76,302,0)
(393,11,0)
(358,307,0)
(285,143,0)
(20,80,0)
(149,104,0)
(65,125,0)
(320,338,0)
(304,234,0)
(238,266,0)
(369,230,0)
(284,238,0)
(186,395,0)
(185,58,0)
(80,191,0)
(140,0,0)
(233,166,0)
(138,173,0)
(310,332,0)
(86,169,0)
(240,276,0)
(168,365,0)
(363,394,0)
(288,5,0)
(261,307,0)
(204,193,0)
(227,113,0)
(38,363,0)
(298,156,0)
(193,358,0)
(182,17,0)
(193,131,0)
(193,6,0)
(64,367,0)
(127,302,0)
(125,385,0)
(319,10,0)
(246,76,0)
(280,123,0)
(251,113,0)
(175,173,0)
(364,262,0)
(135,359,0)
(315,307,0)
(40,121,0)
(305,256,0)
(289,85,0)
(382,307,0)
(176,245,0)
(249,332,0)
(4,177,0)
(171,368,0)
(222,233,0)
(142,307,0)
(228,85,0)
(137,310,0)
(263,307,0)
(377,26,0)
(334,204,0)
(17,44,0)
(177,131,0)
(5,288,0)
(108,289,0)
(295,104,0)
(177,169,0)
(66,91,0)
(83,132,0)
(328,307,0)
(388,118,0)
(236,82,0)
(121,57,0)
(211,329,0)
(110,113,0)
(313,391,0)
(208,190,0)
(45,193,0)
(37,371,0)
(379,329,0)
(26,377,0)
(193,169,0)
(170,347,0)
(282,302,0)
(23,83,0)
(118,97,0)
(125,276,0)
(104,62,0)
(315,302,0)
(275,374,0)
(58,157,0)
(129,326,0)
(300,113,0)
(61,390,0)
(337,29,0)
(197,184,0)
(190,161,0)
(203,60,0)
(352,216,0)
(149,394,0)
(153,113,0)
(367,113,0)
(118,166,0)
(322,156,0)
(131,307,0)
(250,10,0)
(187,267,0)
(334,82,0)
(329,156,0)
(225,139,0)
(384,18,0)
(272,307,0)
(226,277,0)
(50,298,0)
(259,68,0)
(17,156,0)
(9,309,0)
(234,235,0)
(141,332,0)
(166,118,0)
(342,122,0)
(44,64,0)
(44,30,0)
(252,298,0)
(173,369,0)
(295,371,0)
(256,156,0)
(293,307,0)
(7,97,0)
(134,289,0)
(176,64,0)
(347,8,0)
(55,156,0)
(385,125,0)
(151,369,0)
(193,204,0)
(366,122,0)
(152,55,0)
(339,307,0)
(104,307,0)
(235,234,0)
(340,198,0)
(317,267,0)
(276,125,0)
(2,26,0)
(82,18,0)
(177,358,0)
(82,334,0)
(325,395,0)
(281,81,0)
(235,11,0)
(196,359,0)
(107,184,0)
(114,344,0)
(46,220,0)
(87,394,0)
(167,80,0)
(206,307,0)
(164,288,0)
(83,267,0)
(198,340,0)
(326,262,0)
(260,127,0)
(169,332,0)
(53,393,0)
(386,307,0)
(79,181,0)
(5,166,0)
(39,364,0)
(374,11,0)
(312,365,0)
(197,156,0)
(290,385,0)
(69,307,0)
(334,322,0)
(215,123,0)
(8,329,0)
(265,230,0)
(122,156,0)
(107,234,0)
(331,307,0)
(296,39,0)
(102,349,0)
(29,324,0)
(183,37,0)
(298,50,0)
(276,155,0)
(19,324,0)
(34,307,0)
(365,326,0)
(332,169,0)
(356,121,0)
(3,60,0)
(117,318,0)
(314,25,0)
(199,0,0)
(162,156,0)
(99,128,0)
(233,198,0)
(149,60,0)
(243,201,0)
(50,149,0)
(15,77,0)
(84,222,0)
(67,78,0)
(271,123,0)
(130,191,0)
(48,60,0)
(335,318,0)
(85,64,0)
(294,162,0)
(316,113,0)
(193,315,0)
(389,307,0)
(324,156,0)
(345,197,0)
(143,220,0)
(247,55,0)
(377,262,0)
(58,185,0)
(155,162,0)
(177,140,0)
(80,357,0)
(24,132,0)
(107,139,0)
(62,104,0)
(95,359,0)
(159,35,0)
(192,10,0)
(258,193,0)
(341,57,0)
(71,372,0)
(244,368,0)
(54,307,0)
(232,113,0)
(297,395,0)
(265,156,0)
(373,367,0)
(361,307,0)
(124,277,0)
(299,141,0)
(177,6,0)
(59,359,0)
(233,338,0)
(347,170,0)
(273,265,0)
(80,6,0)
(106,30,0)
(327,391,0)
(318,117,0)
(181,107,0)
(380,394,0)
(302,315,0)
(233,156,0)
(29,170,0)
(338,233,0)
(107,181,0)
(80,20,0)
(101,307,0)
(378,131,0)
(395,156,0)
(229,18,0)
(274,307,0)
(396,57,0)
(221,307,0)
(47,307,0)
(330,307,0)
(117,11,0)
(368,171,0)
(132,83,0)
(133,331,0)
(39,25,0)
(42,307,0)
(239,41,0)
(8,347,0)
(28,359,0)
(363,60,0)
(177,35,0)
(184,107,0)
(117,131,0)
(340,91,0)
(397,58,0)
(204,334,0)
(291,357,0)
(332,141,0)
(177,113,0)
(354,358,0)
(103,266,1)
(43,150,1)
(348,285,1)
(302,127,1)
(10,156,1)
(81,281,1)
(358,256,1)
(336,275,1)
(177,128,1)
(21,89,1)
(99,308,1)
(364,262,1)
(211,379,1)
(177,35,1)
(381,41,1)
(295,205,1)
(34,331,1)
(112,185,1)
(48,363,1)
(61,35,1)
(388,97,1)
(49,115,1)
(370,393,1)
(188,190,1)
(193,315,1)
(56,178,1)
(354,201,1)
(323,109,1)
(24,29,1)
(55,247,1)
(338,320,1)
(53,213,1)
(350,259,1)
(52,294,1)
(233,222,1)
(357,291,1)
(266,22,1)
(234,235,1)
(334,82,1)
(233,156,1)
(378,201,1)
(225,107,1)
(19,374,1)
(173,138,1)
(45,303,1)
(226,174,1)
(134,108,1)
(193,169,1)
(86,201,1)
(119,26,1)
(332,310,1)
(303,48,1)
(87,371,1)
(85,228,1)
(38,220,1)
(191,130,1)
(4,148,1)
(166,319,1)
(223,171,1)
(384,229,1)
(298,252,1)
(29,324,1)
(313,327,1)
(74,132,1)
(177,190,1)
(171,122,1)
(193,131,1)
(363,104,1)
(395,325,1)
(288,156,1)
(222,31,1)
(262,326,1)
(130,167,1)
(302,76,1)
(332,141,1)
(393,11,1)
(220,46,1)
(83,23,1)
(4,199,1)
(239,242,1)
(193,331,1)
(162,156,1)
(297,376,1)
(78,11,1)
(79,144,1)
(280,271,1)
(190,264,1)
(80,11,1)
(4,61,1)
(286,147,1)
(196,139,1)
(123,156,1)
(180,68,1)
(44,30,1)
(362,358,1)
(138,175,1)
(27,273,1)
(123,11,1)
(67,145,1)
(94,193,1)
(45,34,1)
(66,72,1)
(265,156,1)
(68,350,1)
(353,381,1)
(368,244,1)
(96,201,1)
(155,88,1)
(298,156,1)
(236,18,1)
(182,1,1)
(204,193,1)
(216,352,1)
(4,9,1)
(196,253,1)
(7,214,1)
(366,360,1)
(222,84,1)
(321,287,1)
(185,58,1)
(252,51,1)
(379,132,1)
(356,146,1)
(345,98,1)
(25,314,1)
(176,78,1)
(32,2,1)
(51,257,1)
(139,107,1)
(30,158,1)
(136,305,1)
(135,125,1)
(92,269,1)
(177,131,1)
(193,258,1)
(177,358,1)
(284,180,1)
(45,43,1)
(152,195,1)
(297,395,1)
(230,265,1)
(290,372,1)
(173,156,1)
(205,73,1)
(107,234,1)
(204,334,1)
(166,5,1)
(82,236,1)
(385,290,1)
(380,87,1)
(100,357,1)
(20,100,1)
(391,313,1)
(391,104,1)
(202,6,1)
(184,197,1)
(347,8,1)
(246,127,1)
(334,322,1)
(231,242,1)
(303,237,1)
(319,10,1)
(193,358,1)
(108,68,1)
(187,317,1)
(303,257,1)
(143,156,1)
(264,208,1)
(181,79,1)
(166,118,1)
(349,102,1)
(201,217,1)
(10,250,1)
(207,234,1)
(123,280,1)
(271,204,1)
(394,380,1)
(144,207,1)
(266,238,1)
(143,348,1)
(125,276,1)
(277,124,1)
(257,286,1)
(132,83,1)
(84,166,1)
(14,160,1)
(189,378,1)
(23,267,1)
(111,91,1)
(326,129,1)
(215,63,1)
(253,139,1)
(226,277,1)
(17,182,1)
(172,202,1)
(115,251,1)
(217,243,1)
(75,176,1)
(244,209,1)
(62,185,1)
(257,11,1)
(210,133,1)
(392,146,1)
(235,56,1)
(238,284,1)
(387,196,1)
(396,57,1)
(385,372,1)
(45,223,1)
(237,149,1)
(376,395,1)
(223,44,1)
(247,152,1)
(340,91,1)
(310,137,1)
(198,340,1)
(122,342,1)
(45,103,1)
(340,111,1)
(289,134,1)
(82,18,1)
(17,156,1)
(128,99,1)
(329,211,1)
(88,162,1)
(37,349,1)
(83,267,1)
(155,162,1)
(320,233,1)
(177,140,1)
(235,11,1)
(78,156,1)
(233,198,1)
(279,230,1)
(194,393,1)
(37,183,1)
(118,97,1)
(177,6,1)
(242,131,1)
(73,391,1)
(256,156,1)
(121,40,1)
(4,231,1)
(4,188,1)
(343,195,1)
(36,321,1)
(335,189,1)
(117,11,1)
(256,11,1)
(4,215,1)
(254,296,1)
(131,117,1)
(228,289,1)
(304,235,1)
(194,370,1)
(363,394,1)
(58,157,1)
(175,265,1)
(276,155,1)
(71,276,1)
(5,288,1)
(291,191,1)
(8,292,1)
(80,20,1)
(218,239,1)
(249,14,1)
(80,357,1)
(220,143,1)
(4,204,1)
(77,15,1)
(371,37,1)
(117,318,1)
(149,104,1)
(285,257,1)
(139,225,1)
(137,141,1)
(347,132,1)
(4,343,1)
(342,366,1)
(208,391,1)
(174,277,1)
(39,296,1)
(292,329,1)
(200,201,1)
(374,336,1)
(159,70,1)
(58,397,1)
(333,19,1)
(395,156,1)
(197,156,1)
(129,365,1)
(332,11,1)
(363,38,1)
(281,279,1)
(352,318,1)
(89,282,1)
(170,347,1)
(305,354,1)
(260,21,1)
(314,254,1)
(212,295,1)
(117,77,1)
(39,25,1)
(250,192,1)
(256,136,1)
(258,45,1)
(50,120,1)
(329,156,1)
(18,384,1)
(79,156,1)
(195,169,1)
(41,218,1)
(147,394,1)
(365,168,1)
(126,55,1)
(125,385,1)
(296,278,1)
(347,74,1)
(178,338,1)
(148,362,1)
(145,230,1)
(326,365,1)
(171,368,1)
(85,64,1)
(325,186,1)
(373,64,1)
(8,329,1)
(193,6,1)
(278,154,1)
(360,202,1)
(367,373,1)
(104,62,1)
(312,377,1)
(214,374,1)
(331,210,1)
(243,194,1)
(55,156,1)
(262,377,1)
(69,323,1)
(15,216,1)
(164,116,1)
(44,64,1)
(154,57,1)
(377,26,1)
(397,157,1)
(185,241,1)
(43,59,1)
(308,338,1)
(332,249,1)
(29,337,1)
(287,396,1)
(315,302,1)
(105,50,1)
(177,81,1)
(199,140,1)
(78,67,1)
(98,234,1)
(146,315,1)
(1,360,1)
(317,24,1)
(59,170,1)
(50,298,1)
(372,12,1)
(322,248,1)
(209,122,1)
(103,85,1)
(117,216,1)
(57,121,1)
(43,387,1)
(168,312,1)
(118,388,1)
(192,118,1)
(64,49,1)
(64,11,1)
(4,392,1)
(140,353,1)
(186,374,1)
(324,156,1)
(393,53,1)
(120,298,1)
(213,367,1)
(90,362,1)
(85,55,1)
(273,194,1)
(158,106,1)
(124,112,1)
(177,169,1)
(30,11,1)
(9,128,1)
(65,276,1)
(295,104,1)
(275,41,1)
(197,345,1)
(70,396,1)
(337,324,1)
(125,65,1)
(233,166,1)
(57,341,1)
(46,143,1)
(107,184,1)
(177,4,1)
(234,304,1)
(248,94,1)
(238,156,1)
(116,118,1)
(22,238,1)
(72,268,1)
(4,172,1)
(149,105,1)
(324,333,1)
(201,11,1)
(91,66,1)
(127,260,1)
(183,349,1)
(327,104,1)
(374,11,1)
(302,21,1)
(302,11,1)
(75,177,1)
(107,181,1)
(230,369,1)
(141,299,1)
(133,201,1)
(369,151,1)
(288,164,1)
(18,156,1)
(35,159,1)
(102,212,1)
(265,27,1)
(157,36,1)
(62,226,1)
(26,32,1)
(259,69,1)
(369,173,1)
(40,356,1)
(6,80,1)
(97,7,1)
(215,123,1)
(322,156,1)
(43,374,1)
(169,332,1)
(4,81,1)
(109,126,1)
(294,240,1)
(177,315,1)
(162,52,1)
(150,135,1)
(12,71,1)
(268,222,1)
(97,11,1)
(338,233,1)
(122,156,1)
(151,173,1)
(364,39,1)
(341,121,1)
(2,39,1)
(229,322,1)
(372,156,1)
(149,394,1)
(318,335,1)
(106,17,1)
(267,187,1)
(160,86,1)
(176,64,1)
(45,90,1)
(76,246,1)
(377,119,1)
(371,295,1)
(289,156,1)
(282,96,1)
(167,200,1)
(267,156,1)
(299,249,1)
(240,297,1)
(80,191,1)
(251,92,1)
(396,364,1)
(177,331,1)
(147,371,1)
(396,57,2)
(48,257,2)
(218,242,2)
(198,340,2)
(143,257,2)
(50,298,2)
(215,63,2)
(158,360,2)
(79,234,2)
(289,156,2)
(29,374,2)
(302,11,2)
(238,156,2)
(350,195,2)
(145,230,2)
(256,156,2)
(329,132,2)
(234,338,2)
(347,8,2)
(185,58,2)
(332,11,2)
(68,195,2)
(112,396,2)
(97,374,2)
(265,194,2)
(169,332,2)
(248,193,2)
(166,319,2)
(338,374,2)
(304,338,2)
(119,39,2)
(204,334,2)
(294,374,2)
(80,20,2)
(91,374,2)
(37,295,2)
(107,234,2)
(354,201,2)
(75,177,2)
(177,81,2)
(139,338,2)
(358,201,2)
(230,265,2)
(132,83,2)
(327,396,2)
(177,190,2)
(45,374,2)
(201,194,2)
(237,257,2)
(106,360,2)
(385,372,2)
(129,377,2)
(207,234,2)
(125,276,2)
(27,194,2)
(235,338,2)
(5,288,2)
(258,391,2)
(290,276,2)
(80,201,2)
(107,181,2)
(267,156,2)
(302,127,2)
(177,35,2)
(121,146,2)
(177,230,2)
(146,201,2)
(395,156,2)
(226,277,2)
(127,201,2)
(34,201,2)
(155,162,2)
(44,30,2)
(20,201,2)
(94,193,2)
(379,132,2)
(170,347,2)
(287,396,2)
(256,11,2)
(184,197,2)
(135,374,2)
(178,338,2)
(297,374,2)
(100,201,2)
(162,156,2)
(369,173,2)
(262,39,2)
(372,156,2)
(70,396,2)
(176,230,2)
(15,201,2)
(50,257,2)
(204,391,2)
(353,41,2)
(318,201,2)
(341,146,2)
(45,201,2)
(276,155,2)
(190,391,2)
(210,201,2)
(322,156,2)
(391,396,2)
(196,338,2)
(64,11,2)
(395,374,2)
(128,338,2)
(193,201,2)
(55,195,2)
(392,146,2)
(299,201,2)
(56,338,2)
(223,202,2)
(155,374,2)
(302,76,2)
(189,201,2)
(335,201,2)
(273,194,2)
(75,176,2)
(45,338,2)
(151,265,2)
(296,57,2)
(191,201,2)
(258,195,2)
(204,374,2)
(198,374,2)
(225,338,2)
(246,201,2)
(116,118,2)
(87,371,2)
(175,265,2)
(360,202,2)
(32,39,2)
(205,391,2)
(184,234,2)
(193,195,2)
(357,201,2)
(71,276,2)
(256,201,2)
(188,391,2)
(247,195,2)
(302,201,2)
(193,358,2)
(243,194,2)
(340,374,2)
(297,395,2)
(347,132,2)
(323,195,2)
(332,141,2)
(143,156,2)
(83,374,2)
(371,295,2)
(185,396,2)
(182,360,2)
(150,374,2)
(118,374,2)
(166,118,2)
(374,41,2)
(187,374,2)
(52,374,2)
(177,131,2)
(266,238,2)
(364,57,2)
(258,374,2)
(230,369,2)
(17,360,2)
(268,374,2)
(329,156,2)
(35,396,2)
(85,68,2)
(193,6,2)
(199,41,2)
(177,6,2)
(141,201,2)
(84,374,2)
(80,191,2)
(193,202,2)
(363,394,2)
(337,374,2)
(168,377,2)
(319,10,2)
(364,262,2)
(177,128,2)
(131,117,2)
(371,391,2)
(170,374,2)
(103,195,2)
(200,201,2)
(51,257,2)
(177,140,2)
(173,156,2)
(356,146,2)
(231,242,2)
(80,11,2)
(349,295,2)
(117,216,2)
(242,201,2)
(77,201,2)
(81,230,2)
(286,391,2)
(131,201,2)
(388,374,2)
(109,195,2)
(160,201,2)
(7,374,2)
(228,68,2)
(211,132,2)
(331,201,2)
(377,26,2)
(196,139,2)
(177,194,2)
(39,57,2)
(45,391,2)
(253,338,2)
(137,201,2)
(305,201,2)
(336,41,2)
(90,362,2)
(107,184,2)
(177,169,2)
(201,11,2)
(148,362,2)
(372,276,2)
(381,41,2)
(235,11,2)
(45,195,2)
(97,11,2)
(105,257,2)
(385,276,2)
(332,249,2)
(343,195,2)
(169,201,2)
(41,242,2)
(239,242,2)
(125,385,2)
(5,118,2)
(195,201,2)
(282,201,2)
(72,374,2)
(132,374,2)
(391,104,2)
(324,374,2)
(8,329,2)
(45,362,2)
(342,360,2)
(76,201,2)
(133,201,2)
(193,338,2)
(39,296,2)
(117,11,2)
(172,202,2)
(193,169,2)
(73,391,2)
(118,97,2)
(176,64,2)
(69,323,2)
(233,374,2)
(340,91,2)
(240,374,2)
(202,201,2)
(262,377,2)
(125,374,2)
(96,201,2)
(204,193,2)
(208,391,2)
(384,322,2)
(44,360,2)
(220,257,2)
(44,64,2)
(99,338,2)
(215,123,2)
(62,396,2)
(302,21,2)
(284,68,2)
(226,396,2)
(159,396,2)
(378,201,2)
(280,204,2)
(2,39,2)
(229,322,2)
(377,39,2)
(86,201,2)
(29,324,2)
(139,107,2)
(216,201,2)
(40,146,2)
(65,276,2)
(43,374,2)
(102,295,2)
(348,257,2)
(250,118,2)
(57,146,2)
(123,156,2)
(310,201,2)
(181,79,2)
(264,391,2)
(313,396,2)
(61,396,2)
(238,68,2)
(252,257,2)
(257,391,2)
(217,194,2)
(288,156,2)
(326,365,2)
(374,11,2)
(186,374,2)
(380,371,2)
(317,374,2)
(292,132,2)
(18,156,2)
(149,394,2)
(89,201,2)
(55,156,2)
(123,204,2)
(57,121,2)
(82,322,2)
(21,201,2)
(36,396,2)
(397,396,2)
(192,118,2)
(4,230,2)
(338,233,2)
(66,374,2)
(9,338,2)
(1,360,2)
(345,234,2)
(122,360,2)
(62,226,2)
(193,131,2)
(58,396,2)
(262,326,2)
(363,257,2)
(289,68,2)
(78,230,2)
(249,201,2)
(37,349,2)
(363,104,2)
(149,257,2)
(332,201,2)
(10,156,2)
(267,374,2)
(82,18,2)
(180,68,2)
(193,391,2)
(275,41,2)
(181,234,2)
(257,11,2)
(285,257,2)
(136,201,2)
(183,295,2)
(258,201,2)
(6,201,2)
(333,374,2)
(108,68,2)
(244,360,2)
(111,374,2)
(369,265,2)
(396,364,2)
(154,57,2)
(177,358,2)
(254,57,2)
(325,374,2)
(320,374,2)
(157,396,2)
(266,68,2)
(147,391,2)
(135,125,2)
(394,371,2)
(236,322,2)
(277,396,2)
(358,256,2)
(18,322,2)
(12,276,2)
(85,64,2)
(134,68,2)
(162,374,2)
(204,362,2)
(74,132,2)
(25,57,2)
(308,338,2)
(204,202,2)
(260,201,2)
(396,146,2)
(185,241,2)
(233,166,2)
(334,82,2)
(130,201,2)
(45,202,2)
(78,156,2)
(43,338,2)
(6,80,2)
(209,360,2)
(334,322,2)
(265,156,2)
(123,11,2)
(193,331,2)
(171,122,2)
(314,57,2)
(298,257,2)
(17,156,2)
(177,315,2)
(164,118,2)
(22,68,2)
(4,194,2)
(321,396,2)
(312,377,2)
(78,11,2)
(26,39,2)
(194,393,2)
(104,62,2)
(364,39,2)
(140,41,2)
(10,118,2)
(124,396,2)
(271,204,2)
(281,230,2)
(30,11,2)
(366,360,2)
(171,360,2)
(258,362,2)
(258,202,2)
(59,374,2)
(303,391,2)
(376,374,2)
(204,195,2)
(79,156,2)
(69,195,2)
(152,195,2)
(46,257,2)
(173,265,2)
(117,77,2)
(24,374,2)
(126,195,2)
(352,201,2)
(298,156,2)
(362,201,2)
(80,357,2)
(393,11,2)
(107,338,2)
(214,374,2)
(222,31,2)
(279,230,2)
(215,204,2)
(138,265,2)
(149,104,2)
(212,295,2)
(166,5,2)
(120,257,2)
(222,374,2)
(334,193,2)
(197,234,2)
(347,374,2)
(259,195,2)
(234,235,2)
(230,194,2)
(319,118,2)
(117,201,2)
(177,331,2)
(276,374,2)
(166,374,2)
(62,185,2)
(387,338,2)
(204,338,2)
(278,57,2)
(144,234,2)
(220,143,2)
(8,132,2)
(23,374,2)
(368,360,2)
(83,267,2)
(288,118,2)
(295,391,2)
(315,201,2)
(315,302,2)
(233,156,2)
(104,396,2)
(30,360,2)
(326,377,2)
(291,201,2)
(324,156,2)
(122,156,2)
(39,25,2)
(98,234,2)
(167,201,2)
(117,318,2)
(371,37,2)
(14,201,2)
(171,368,2)
(322,193,2)
(174,396,2)
(365,377,2)
(197,156,2)
(233,222,2)
(38,257,2)
(295,104,2)
(332,310,2)
(58,157,2)
(88,374,2)
(19,374,2)
(67,230,2)
(233,198,2)
(193,315,2)
(193,374,2)
(193,362,2)
(204,201,2)
(85,55,2)
(258,338,2)
-----------------------------------
(0,)
(1,so)
(2,tv)
(3,case SO_SNDTIMEO:)
(4,error)
(5,&so->so_snd)
(6,error = sooptcopyin(sopt, &optval, sizeof optval,\n\\n\\t\\t\\t\\t\\t    sizeof optval)
(7,sopt_name)
(8,so->so_rcv.ssb_hiwat)
(9,goto bad;)
(10,so->so_rcv)
(11,struct sockopt *sopt)
(12,so_snd)
(13,)
(14,l)
(15,optval)
(16,l)
(17,so->so_options)
(18,so->so_proto)
(19,so)
(20,sizeof optval)
(21,&tv)
(22,~SO_LINGER)
(23,ssb_hiwat)
(24,optval)
(25,SHRT_MAX / hz)
(26,tv.tv_usec)
(27,so_proto)
(28,case SO_RCVLOWAT:)
(29,so->so_rcv.ssb_lowat)
(30,sopt->sopt_name)
(31,u_long)
(32,tv_usec)
(33,case SO_LINGER:)
(34,break;)
(35,error = EDOM)
(36,tv_sec)
(37,tv.tv_usec != 0)
(38,val)
(39,tv.tv_sec > SHRT_MAX / hz)
(40,tv_sec)
(41,optval < 1)
(42,case SO_TIMESTAMP:)
(43,break;)
(44,so->so_options |= sopt->sopt_name)
(45,error)
(46,ssb_timeo)
(47,case SO_DONTROUTE:)
(48,break;)
(49,sopt_dir)
(50,so->so_rcv.ssb_timeo)
(51,so)
(52,so_snd)
(53,sopt_level)
(54,if (optval)
(55,so->so_linger)
(56,sopt_name)
(57,tv.tv_sec < 0)
(58,tv.tv_sec * hz)
(59,break;)
(60,)
(61,goto bad;)
(62,(u_long)
(63,void)
(64,sopt->sopt_dir)
(65,optval)
(66,p_rlimit)
(67,sopt)
(68,l.l_onoff)
(69,so->so_linger = l.l_linger)
(70,error)
(71,so)
(72,curproc)
(73,val)
(74,optval)
(75,RET)
(76,sizeof tv)
(77,sizeof optval)
(78,so_pru_ctloutput(so, sopt)
(79,so->so_snd)
(80,sooptcopyin(sopt, &optval, sizeof optval,\n\\n\\t\\t\\t\\t\\t    sizeof optval)
(81,error = ENOPROTOOPT)
(82,so->so_proto->pr_ctloutput)
(83,so->so_rcv.ssb_hiwat)
(84,optval)
(85,so->so_options |= SO_LINGER)
(86,error)
(87,val)
(88,ssb_hiwat)
(89,tv)
(90,break;)
(91,curproc->p_rlimit)
(92,0)
(93,if (error)
(94,so)
(95,case SO_SNDBUF:)
(96,error)
(97,sopt->sopt_name)
(98,so)
(99,ENOBUFS)
(100,optval)
(101,case SO_DEBUG:)
(102,tv_usec)
(103,break;)
(104,val = (u_long)
(105,val)
(106,sopt)
(107,sopt->sopt_name == SO_SNDBUF ? &so->so_snd :\n\\n\\t\\t\\t\\t    &so->so_rcv)
(108,so)
(109,l_linger)
(110,bad:)
(111,RLIMIT_SBSIZE)
(112,tv)
(113,)
(114,if (error == 0 && so->so_proto && so->so_proto->pr_ctloutput)
(115,sopt)
(116,so)
(117,sooptcopyin(sopt, &optval, sizeof optval,\n\\n\\t\\t\\t\\t\\t    sizeof optval)
(118,sopt->sopt_name == SO_SNDBUF)
(119,0)
(120,ssb_timeo)
(121,tv.tv_sec)
(122,so->so_options)
(123,so_pru_ctloutput(so, sopt)
(124,tv_usec)
(125,(optval > so->so_snd.ssb_hiwat)
(126,l)
(127,sizeof tv)
(128,error = ENOBUFS)
(129,1000000)
(130,optval)
(131,error = sooptcopyin(sopt, &optval, sizeof optval,\n\\n\\t\\t\\t\\t\\t    sizeof optval)
(132,optval > so->so_rcv.ssb_hiwat)
(133,error)
(134,so_options)
(135,so->so_snd.ssb_lowat =\n\\n\\t\\t\\t\\t    (optval > so->so_snd.ssb_hiwat)
(136,sopt)
(137,l)
(138,so_proto)
(139,(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :\n\\n\\t\\t\\t\\t    &so->so_rcv)
(140,error = EINVAL)
(141,sizeof l)
(142,case SO_RCVTIMEO:)
(143,so->so_snd)
(144,so_snd)
(145,so)
(146,error)
(147,sopt)
(148,goto bad;)
(149,so->so_rcv.ssb_timeo = val)
(150,break;)
(151,pr_ctloutput)
(152,so)
(153,if (sopt->sopt_level != SOL_SOCKET)
(154,tv)
(155,so->so_snd.ssb_hiwat)
(156,struct socket *so)
(157,tv.tv_sec)
(158,sopt_name)
(159,EDOM)
(160,sopt)
(161,)
(162,so->so_snd)
(163,case SO_RCVBUF:)
(164,so_snd)
(165,switch (sopt->sopt_name)
(166,sopt->sopt_name == SO_SNDBUF ?\n\\n\\t\\t\\t\\t    &so->so_snd : &so->so_rcv)
(167,sopt)
(168,tv_usec)
(169,error = sooptcopyin(sopt, &l, sizeof l, sizeof l)
(170,so->so_rcv.ssb_lowat =\n\\n\\t\\t\\t\\t    (optval > so->so_rcv.ssb_hiwat)
(171,so->so_options &= ~sopt->sopt_name)
(172,goto bad;)
(173,so->so_proto)
(174,tick)
(175,so)
(176,return (so_pru_ctloutput(so, sopt)
(177,return (error)
(178,sopt)
(179,if (ssb_reserve(sopt->sopt_name == SO_SNDBUF ?\n\\n\\t\\t\\t\\t    &so->so_snd : &so->so_rcv, (u_long)
(180,so)
(181,&so->so_snd)
(182,so_options)
(183,0)
(184,&so->so_rcv)
(185,(u_long)
(186,so)
(187,so_rcv)
(188,goto bad;)
(189,sopt)
(190,error = EDOM)
(191,&optval)
(192,so)
(193,error == 0)
(194,sopt->sopt_level != SOL_SOCKET)
(195,error)
(196,(sopt->sopt_name == SO_SNDBUF ? &so->so_snd :\n\\n\\t\\t\\t\\t    &so->so_rcv)
(197,so->so_rcv)
(198,&curproc->p_rlimit[RLIMIT_SBSIZE])
(199,goto bad;)
(200,error)
(201,sopt->sopt_name)
(202,error)
(203,case SO_RCVTIMEO:)
(204,error == 0 && so->so_proto && so->so_proto->pr_ctloutput)
(205,0)
(206,if (error)
(207,so)
(208,error)
(209,~sopt)
(210,ENOPROTOOPT)
(211,so_rcv)
(212,tv)
(213,sopt)
(214,sopt)
(215,(void)
(216,sizeof optval)
(217,sopt_name)
(218,1)
(219,if (optval < 1)
(220,so->so_snd.ssb_timeo)
(221,case SO_USELOOPBACK:)
(222,(u_long)
(223,break;)
(224,if (tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||\n\\n\\t\\t\\t    tv.tv_usec < 0 || tv.tv_usec >= 1000000)
(225,ssb_flags)
(226,tv.tv_usec / tick)
(227,error)
(228,SO_LINGER)
(229,so)
(230,so->so_proto && so->so_proto->pr_ctloutput)
(231,goto bad;)
(232,val)
(233,ssb_reserve(sopt->sopt_name == SO_SNDBUF ?\n\\n\\t\\t\\t\\t    &so->so_snd : &so->so_rcv, (u_long)
(234,sopt->sopt_name == SO_SNDBUF)
(235,sopt->sopt_name)
(236,pr_ctloutput)
(237,break;)
(238,so->so_options)
(239,optval)
(240,optval)
(241,u_long)
(242,error)
(243,sopt)
(244,sopt_name)
(245,)
(246,tv)
(247,so_linger)
(248,so_proto)
(249,&l)
(250,so_rcv)
(251,error = 0)
(252,so_rcv)
(253,~SSB_AUTOSIZE)
(254,SHRT_MAX)
(255,switch (sopt->sopt_name)
(256,do_setopt_accept_filter(so, sopt)
(257,sopt->sopt_name)
(258,0)
(259,l)
(260,tv)
(261,case SO_OOBINLINE:)
(262,tv.tv_usec < 0 || tv.tv_usec >= 1000000)
(263,default:)
(264,EDOM)
(265,so->so_proto)
(266,so->so_options &= ~SO_LINGER)
(267,so->so_rcv)
(268,so)
(269,error)
(270,)
(271,so)
(272,case SO_RCVBUF:)
(273,so)
(274,if (val == 0 && tv.tv_usec != 0)
(275,sopt)
(276,optval > so->so_snd.ssb_hiwat)
(277,tv.tv_usec)
(278,tv_sec)
(279,error)
(280,sopt)
(281,ENOPROTOOPT)
(282,sopt)
(283,if (l.l_onoff)
(284,so_options)
(285,so)
(286,sopt_name)
(287,val)
(288,so->so_snd)
(289,so->so_options)
(290,ssb_hiwat)
(291,optval)
(292,ssb_hiwat)
(293,if (error)
(294,so)
(295,val == 0)
(296,tv.tv_sec)
(297,so->so_snd.ssb_lowat)
(298,so->so_rcv)
(299,l)
(300,optval)
(301,if (so->so_proto && so->so_proto->pr_ctloutput)
(302,sooptcopyin(sopt, &tv, sizeof tv,\n\\n\\t\\t\\t\\t\\t    sizeof tv)
(303,break;)
(304,SO_SNDBUF)
(305,so)
(306,case SO_REUSEPORT:)
(307,)
(308,error)
(309,)
(310,sizeof l)
(311,case SO_SNDBUF:)
(312,tv)
(313,SHRT_MAX)
(314,hz)
(315,error = sooptcopyin(sopt, &tv, sizeof tv,\n\\n\\t\\t\\t\\t\\t    sizeof tv)
(316,tv)
(317,so)
(318,&optval)
(319,&so->so_rcv)
(320,0)
(321,tv)
(322,so->so_proto)
(323,l.l_linger)
(324,so->so_rcv)
(325,so_snd)
(326,tv.tv_usec >= 1000000)
(327,val)
(328,case SO_KEEPALIVE:)
(329,so->so_rcv)
(330,case SO_ACCEPTFILTER:)
(331,error = ENOPROTOOPT)
(332,sooptcopyin(sopt, &l, sizeof l, sizeof l)
(333,so_rcv)
(334,so->so_proto && so->so_proto->pr_ctloutput)
(335,optval)
(336,sopt_name)
(337,ssb_lowat)
(338,ssb_reserve(sopt->sopt_name == SO_SNDBUF ?\n\\n\\t\\t\\t\\t    &so->so_snd : &so->so_rcv, (u_long)
(339,case SO_REUSEADDR:)
(340,curproc->p_rlimit[RLIMIT_SBSIZE])
(341,0)
(342,so_options)
(343,goto bad;)
(344,)
(345,so_rcv)
(346,if (val > SHRT_MAX)
(347,(optval > so->so_rcv.ssb_hiwat)
(348,so_snd)
(349,tv.tv_usec)
(350,l_onoff)
(351,if (error)
(352,optval)
(353,EINVAL)
(354,error)
(355,case SO_SNDLOWAT:)
(356,tv)
(357,sizeof optval)
(358,error = do_setopt_accept_filter(so, sopt)
(359,)
(360,optval)
(361,case SO_SNDLOWAT:)
(362,error)
(363,so->so_snd.ssb_timeo = val)
(364,tv.tv_sec > SHRT_MAX / hz ||\n\\n\\t\\t\\t    tv.tv_usec < 0 || tv.tv_usec >= 1000000)
(365,tv.tv_usec)
(366,so)
(367,sopt->sopt_dir = SOPT_SET)
(368,~sopt->sopt_name)
(369,so->so_proto->pr_ctloutput)
(370,SOL_SOCKET)
(371,val == 0 && tv.tv_usec != 0)
(372,so->so_snd)
(373,SOPT_SET)
(374,sopt->sopt_name)
(375,case SO_SNDTIMEO:)
(376,ssb_lowat)
(377,tv.tv_usec < 0)
(378,error)
(379,so)
(380,1)
(381,error)
(382,if (error)
(383,switch (sopt->sopt_name)
(384,so_proto)
(385,so->so_snd.ssb_hiwat)
(386,case SO_BROADCAST:)
(387,break;)
(388,SO_SNDBUF)
(389,case SO_RCVLOWAT:)
(390,)
(391,val > SHRT_MAX)
(392,goto bad;)
(393,sopt->sopt_level)
(394,val = 1)
(395,so->so_snd)
(396,tv.tv_sec < 0 || tv.tv_sec > SHRT_MAX / hz ||\n\\n\\t\\t\\t    tv.tv_usec < 0 || tv.tv_usec >= 1000000)
(397,hz)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^