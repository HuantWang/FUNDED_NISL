-----label-----
0
-----code-----
static int tgt_get_match(xt_t *xt)
{
	ni_t *ni = to_ni(xt);
	struct list_head *l;

	if (xt->pt->options & PTL_PT_FLOWCTRL) {
		if (list_empty(&xt->pt->priority_list) &&
		    list_empty(&xt->pt->overflow_list)) {
			pthread_spin_lock(&xt->pt->obj_lock);
			xt->pt->disable |= PT_AUTO_DISABLE;
			pthread_spin_unlock(&xt->pt->obj_lock);
			goto no_match;
		}
	}

	list_for_each(l, &xt->pt->priority_list) {
		xt->le = list_entry(l, le_t, list);
		if (ni->options & PTL_NI_NO_MATCHING) {
			le_ref(xt->le);
			goto done;
		}

		if (check_match(xt)) {
			me_ref((me_t *)xt->le);
			goto done;
		}
	}

	list_for_each(l, &xt->pt->overflow_list) {
		xt->le = list_entry(l, le_t, list);
		if (ni->options & PTL_NI_NO_MATCHING) {
			le_ref(xt->le);
			goto done;
		}

		if (check_match(xt)) {
			me_ref((me_t *)xt->le);
			goto done;
		}
	}

no_match:
	WARN();
	xt->le = NULL;
	return STATE_TGT_NO_MATCH;

done:
	return STATE_TGT_GET_PERM;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
35,36
35,37
36,37
40,41
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
48,49
49,50
49,51
50,51
50,52
51,52
55,56
55,57
56,57
58,59
59,60
59,61
60,61
60,62
61,62
65,66
65,67
65,68
65,69
66,67
67,68
67,69
68,69
70,71
71,72
71,73
72,73
72,74
73,74
77,78
78,79
78,80
79,80
79,81
80,81
80,82
81,82
85,86
87,88
88,89
88,90
89,90
91,92
92,93
92,94
93,94
93,95
94,95
98,99
100,101
101,102
101,103
101,104
102,103
104,105
106,107
107,108
107,109
108,109
108,110
109,110
113,114
114,115
114,116
114,117
115,116
116,117
116,118
117,118
117,119
118,119
121,122
121,123
121,124
121,125
122,123
124,125
126,127
128,129
130,131
130,132
131,132
131,133
132,133
132,134
133,134
136,137
138,139
138,140
139,140
140,141
140,142
141,142
143,144
143,145
144,145
147,148
149,150
149,151
150,151
150,152
151,152
153,154
155,156
155,157
156,157
157,158
157,159
158,159
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
173,176
174,175
176,177
178,179
179,180
179,181
180,181
180,182
181,182
185,186
186,187
186,188
186,189
187,188
188,189
188,190
189,190
189,191
190,191
193,194
193,195
193,196
193,197
194,195
196,197
198,199
200,201
202,203
202,204
203,204
203,205
204,205
204,206
205,206
208,209
210,211
210,212
211,212
212,213
212,214
213,214
215,216
215,217
216,217
219,220
221,222
221,223
222,223
222,224
223,224
225,226
227,228
227,229
228,229
229,230
229,231
230,231
232,233
232,234
233,234
233,235
234,235
236,237
238,239
238,240
239,240
242,243
244,245
244,246
246,247
247,248
248,249
250,251
251,252
251,253
252,253
252,254
253,254
256,257
258,259
259,260
261,262
261,263
263,264
264,265
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,28,30,31,37,38,39,41,47,52,53,54,57,62,63,64,69,74,75,76,82,83,84,86,90,95,96,97,99,103,105,110,111,112,119,120,123,125,127,129,134,135,137,142,145,146,148,152,154,159,163,165,168,169,171,175,177,182,183,184,191,192,195,197,199,201,206,207,209,214,217,218,220,224,226,231,235,237,240,241,243,245,249,254,255,257,260,262,265
-----computeFrom-----
33,34
33,35
44,45
44,46
78,79
78,80
116,117
116,118
131,132
131,133
188,189
188,190
203,204
203,205
251,252
251,253
-----guardedBy-----
38,96
37,95
63,96
62,95
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int tgt_get_match(xt_t *xt){	ni_t *ni = to_ni(xt);	struct list_head *l;	if (xt->pt->options & PTL_PT_FLOWCTRL) {		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			goto no_match;		}	}	list_for_each(l, &xt->pt->priority_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}	list_for_each(l, &xt->pt->overflow_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}no_match:	WARN();	xt->le = NULL;	return STATE_TGT_NO_MATCH;done:	return STATE_TGT_GET_PERM;}
static int
tgt_get_match(xt_t *xt)
tgt_get_match
xt_t *xt
xt_t
xt_t
*xt
*
xt
{	ni_t *ni = to_ni(xt);	struct list_head *l;	if (xt->pt->options & PTL_PT_FLOWCTRL) {		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			goto no_match;		}	}	list_for_each(l, &xt->pt->priority_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}	list_for_each(l, &xt->pt->overflow_list) {		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}no_match:	WARN();	xt->le = NULL;	return STATE_TGT_NO_MATCH;done:	return STATE_TGT_GET_PERM;}
ni_t *ni = to_ni(xt);
ni_t *ni = to_ni(xt);
ni_t
ni_t
*ni = to_ni(xt)
*
ni
= to_ni(xt)
to_ni(xt)
to_ni
to_ni
xt
xt
struct list_head *l;
struct list_head *l;
struct list_head
list_head
*l
*
l
if (xt->pt->options & PTL_PT_FLOWCTRL) {		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			goto no_match;		}	}
xt->pt->options & PTL_PT_FLOWCTRL
xt->pt->options
xt->pt
xt
xt
pt
options
PTL_PT_FLOWCTRL
PTL_PT_FLOWCTRL
{		if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			goto no_match;		}	}
if (list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)) {			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			goto no_match;		}
list_empty(&xt->pt->priority_list) &&		    list_empty(&xt->pt->overflow_list)
list_empty(&xt->pt->priority_list)
list_empty
list_empty
&xt->pt->priority_list
xt->pt->priority_list
xt->pt
xt
xt
pt
priority_list
list_empty(&xt->pt->overflow_list)
list_empty
list_empty
&xt->pt->overflow_list
xt->pt->overflow_list
xt->pt
xt
xt
pt
overflow_list
{			pthread_spin_lock(&xt->pt->obj_lock);			xt->pt->disable |= PT_AUTO_DISABLE;			pthread_spin_unlock(&xt->pt->obj_lock);			goto no_match;		}
pthread_spin_lock(&xt->pt->obj_lock);
pthread_spin_lock(&xt->pt->obj_lock)
pthread_spin_lock
pthread_spin_lock
&xt->pt->obj_lock
xt->pt->obj_lock
xt->pt
xt
xt
pt
obj_lock
xt->pt->disable |= PT_AUTO_DISABLE;
xt->pt->disable |= PT_AUTO_DISABLE
xt->pt->disable
xt->pt
xt
xt
pt
disable
PT_AUTO_DISABLE
PT_AUTO_DISABLE
pthread_spin_unlock(&xt->pt->obj_lock);
pthread_spin_unlock(&xt->pt->obj_lock)
pthread_spin_unlock
pthread_spin_unlock
&xt->pt->obj_lock
xt->pt->obj_lock
xt->pt
xt
xt
pt
obj_lock
goto no_match;
no_match
list_for_each(l, &xt->pt->priority_list)
list_for_each(l, &xt->pt->priority_list)
list_for_each
list_for_each
l
l
&xt->pt->priority_list
xt->pt->priority_list
xt->pt
xt
xt
pt
priority_list
)
{		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}
xt->le = list_entry(l, le_t, list);
xt->le = list_entry(l, le_t, list)
xt->le
xt
xt
le
list_entry(l, le_t, list)
list_entry
list_entry
l
l
le_t
le_t
list
list
if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}
ni->options & PTL_NI_NO_MATCHING
ni->options
ni
ni
options
PTL_NI_NO_MATCHING
PTL_NI_NO_MATCHING
{			le_ref(xt->le);			goto done;		}
le_ref(xt->le);
le_ref(xt->le)
le_ref
le_ref
xt->le
xt
xt
le
goto done;
done
if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}
check_match(xt)
check_match
check_match
xt
xt
{			me_ref((me_t *)xt->le);			goto done;		}
me_ref((me_t *)xt->le);
me_ref((me_t *)xt->le)
me_ref
me_ref
(me_t *)xt->le
me_t *
me_t
me_t
*
*
xt->le
xt
xt
le
goto done;
done
list_for_each(l, &xt->pt->overflow_list)
list_for_each(l, &xt->pt->overflow_list)
list_for_each
list_for_each
l
l
&xt->pt->overflow_list
xt->pt->overflow_list
xt->pt
xt
xt
pt
overflow_list
)
{		xt->le = list_entry(l, le_t, list);		if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}		if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}	}
xt->le = list_entry(l, le_t, list);
xt->le = list_entry(l, le_t, list)
xt->le
xt
xt
le
list_entry(l, le_t, list)
list_entry
list_entry
l
l
le_t
le_t
list
list
if (ni->options & PTL_NI_NO_MATCHING) {			le_ref(xt->le);			goto done;		}
ni->options & PTL_NI_NO_MATCHING
ni->options
ni
ni
options
PTL_NI_NO_MATCHING
PTL_NI_NO_MATCHING
{			le_ref(xt->le);			goto done;		}
le_ref(xt->le);
le_ref(xt->le)
le_ref
le_ref
xt->le
xt
xt
le
goto done;
done
if (check_match(xt)) {			me_ref((me_t *)xt->le);			goto done;		}
check_match(xt)
check_match
check_match
xt
xt
{			me_ref((me_t *)xt->le);			goto done;		}
me_ref((me_t *)xt->le);
me_ref((me_t *)xt->le)
me_ref
me_ref
(me_t *)xt->le
me_t *
me_t
me_t
*
*
xt->le
xt
xt
le
goto done;
done
no_match:	WARN();
no_match
WARN();
WARN()
WARN
WARN
xt->le = NULL;
xt->le = NULL
xt->le
xt
xt
le
NULL
NULL
return STATE_TGT_NO_MATCH;
STATE_TGT_NO_MATCH
STATE_TGT_NO_MATCH
done:	return STATE_TGT_GET_PERM;
done
return STATE_TGT_GET_PERM;
STATE_TGT_GET_PERM
STATE_TGT_GET_PERM
-----joern-----
(63,117,0)
(126,92,0)
(63,44,0)
(16,81,0)
(52,39,0)
(70,124,0)
(95,38,0)
(67,44,0)
(128,73,0)
(129,29,0)
(89,92,0)
(3,125,0)
(36,75,0)
(55,85,0)
(105,5,0)
(59,20,0)
(24,102,0)
(34,121,0)
(103,15,0)
(63,52,0)
(69,27,0)
(52,63,0)
(74,5,0)
(90,57,0)
(94,44,0)
(7,73,0)
(28,88,0)
(80,63,0)
(117,75,0)
(20,59,0)
(113,53,0)
(77,124,0)
(114,73,0)
(33,26,0)
(10,96,0)
(22,57,0)
(8,110,0)
(84,97,0)
(100,124,0)
(64,66,0)
(87,131,0)
(118,73,0)
(104,75,0)
(124,44,0)
(6,85,0)
(97,12,0)
(116,125,0)
(119,61,0)
(118,38,0)
(46,39,0)
(123,37,0)
(10,64,0)
(0,68,0)
(88,27,0)
(94,73,0)
(29,73,0)
(61,29,0)
(81,60,0)
(125,44,0)
(68,81,0)
(96,27,0)
(9,92,0)
(107,14,0)
(102,7,0)
(56,73,0)
(128,15,0)
(94,84,0)
(14,92,0)
(75,92,0)
(21,8,0)
(18,20,0)
(57,102,0)
(15,128,0)
(32,59,0)
(132,92,0)
(29,44,0)
(120,53,0)
(82,93,0)
(125,3,0)
(117,5,0)
(131,117,0)
(47,38,0)
(58,67,0)
(48,118,0)
(88,73,0)
(43,63,0)
(72,61,0)
(115,56,0)
(3,41,0)
(27,96,0)
(57,22,0)
(30,56,0)
(121,131,0)
(106,93,0)
(64,10,0)
(66,64,0)
(44,14,0)
(125,73,0)
(11,60,0)
(60,73,0)
(17,59,0)
(111,94,0)
(31,118,0)
(86,112,0)
(54,41,0)
(100,120,0)
(4,93,0)
(8,85,0)
(85,73,0)
(83,131,0)
(56,30,0)
(121,92,0)
(66,47,0)
(61,131,0)
(85,8,0)
(50,12,0)
(49,5,0)
(51,125,0)
(120,100,0)
(127,22,0)
(4,110,0)
(35,89,0)
(65,29,0)
(84,25,0)
(108,128,0)
(38,47,0)
(121,30,0)
(26,73,0)
(121,29,0)
(7,102,0)
(1,26,0)
(102,92,0)
(62,92,0)
(23,67,0)
(97,84,0)
(110,8,0)
(103,82,0)
(47,66,0)
(79,15,0)
(2,30,0)
(101,88,0)
(124,117,0)
(124,100,0)
(42,67,0)
(19,98,0)
(37,73,0)
(121,26,0)
(96,10,0)
(122,60,0)
(130,7,0)
(131,73,0)
(30,112,0)
(119,121,0)
(100,76,0)
(63,73,0)
(45,128,0)
(59,102,0)
(5,117,0)
(38,118,0)
(84,94,0)
(99,57,0)
(78,92,0)
(40,94,0)
(60,81,0)
(109,92,0)
(124,73,0)
(61,92,0)
(13,14,0)
(91,114,0)
(26,89,0)
(76,100,0)
(15,103,0)
(110,4,0)
(27,88,0)
(25,84,0)
(81,68,0)
(112,93,0)
(44,67,0)
(71,56,0)
(82,103,0)
(96,27,1)
(78,106,1)
(79,128,1)
(131,73,1)
(121,131,1)
(89,35,1)
(8,21,1)
(4,110,1)
(127,57,1)
(57,102,1)
(2,56,1)
(117,5,1)
(47,38,1)
(15,128,1)
(123,20,1)
(54,3,1)
(110,8,1)
(64,10,1)
(80,22,1)
(71,82,1)
(11,102,1)
(49,131,1)
(37,123,1)
(120,100,1)
(74,105,1)
(66,47,1)
(83,37,1)
(22,57,1)
(99,117,1)
(101,68,1)
(72,113,1)
(60,122,1)
(114,73,1)
(44,67,1)
(86,30,1)
(130,24,1)
(125,73,1)
(125,44,1)
(103,15,1)
(125,51,1)
(10,96,1)
(106,4,1)
(60,73,1)
(43,80,1)
(6,55,1)
(20,18,1)
(84,25,1)
(38,95,1)
(119,61,1)
(38,118,1)
(69,88,1)
(90,99,1)
(34,89,1)
(31,48,1)
(21,85,1)
(94,111,1)
(63,44,1)
(78,114,1)
(48,10,1)
(63,73,1)
(61,131,1)
(7,130,1)
(5,74,1)
(111,40,1)
(108,64,1)
(15,79,1)
(27,88,1)
(94,44,1)
(59,102,1)
(100,124,1)
(27,69,1)
(33,78,1)
(1,33,1)
(63,43,1)
(18,59,1)
(128,73,1)
(122,11,1)
(56,73,1)
(112,86,1)
(115,71,1)
(91,22,1)
(29,73,1)
(26,73,1)
(81,60,1)
(51,116,1)
(61,72,1)
(30,56,1)
(128,45,1)
(67,23,1)
(72,54,1)
(23,58,1)
(3,125,1)
(121,26,1)
(118,73,1)
(68,0,1)
(46,52,1)
(68,81,1)
(40,37,1)
(100,76,1)
(45,108,1)
(56,115,1)
(52,63,1)
(124,77,1)
(124,117,1)
(131,87,1)
(116,20,1)
(42,29,1)
(105,49,1)
(124,73,1)
(32,44,1)
(0,81,1)
(119,121,1)
(88,73,1)
(72,50,1)
(28,101,1)
(102,7,1)
(8,85,1)
(118,31,1)
(85,73,1)
(82,103,1)
(59,17,1)
(7,73,1)
(20,59,1)
(61,29,1)
(50,97,1)
(114,91,1)
(35,26,1)
(26,1,1)
(84,94,1)
(65,129,1)
(129,68,1)
(121,34,1)
(121,30,1)
(77,70,1)
(16,60,1)
(64,66,1)
(30,2,1)
(58,42,1)
(17,32,1)
(94,73,1)
(22,127,1)
(70,114,1)
(129,64,1)
(85,6,1)
(95,118,1)
(63,117,1)
(88,28,1)
(37,73,1)
(97,84,1)
(72,46,1)
(29,65,1)
(87,83,1)
(57,90,1)
(81,16,1)
(55,112,1)
(121,29,1)
(124,44,1)
(113,120,1)
(59,64,2)
(100,76,2)
(23,64,2)
(97,37,2)
(74,37,2)
(78,114,2)
(15,64,2)
(129,68,2)
(1,64,2)
(115,64,2)
(27,88,2)
(129,64,2)
(23,68,2)
(3,20,2)
(22,57,2)
(58,68,2)
(121,131,2)
(61,29,2)
(46,22,2)
(32,64,2)
(81,60,2)
(83,37,2)
(128,73,2)
(55,64,2)
(100,114,2)
(102,7,2)
(114,22,2)
(63,44,2)
(58,64,2)
(110,64,2)
(123,20,2)
(114,73,2)
(29,68,2)
(42,64,2)
(10,96,2)
(59,68,2)
(63,117,2)
(51,20,2)
(124,114,2)
(29,73,2)
(44,64,2)
(61,37,2)
(120,100,2)
(77,114,2)
(57,102,2)
(66,47,2)
(84,37,2)
(65,68,2)
(68,81,2)
(90,37,2)
(57,37,2)
(64,68,2)
(108,64,2)
(100,124,2)
(33,114,2)
(118,73,2)
(60,73,2)
(64,66,2)
(20,59,2)
(124,117,2)
(119,61,2)
(26,73,2)
(121,64,2)
(88,68,2)
(52,63,2)
(47,10,2)
(82,103,2)
(45,64,2)
(56,64,2)
(94,37,2)
(78,64,2)
(127,37,2)
(101,68,2)
(124,73,2)
(44,68,2)
(117,37,2)
(116,20,2)
(42,68,2)
(70,114,2)
(4,64,2)
(85,73,2)
(119,121,2)
(17,68,2)
(95,10,2)
(31,10,2)
(80,22,2)
(61,20,2)
(69,68,2)
(30,56,2)
(117,5,2)
(121,114,2)
(121,30,2)
(72,22,2)
(44,67,2)
(125,44,2)
(84,94,2)
(1,114,2)
(59,102,2)
(118,10,2)
(2,64,2)
(61,131,2)
(63,73,2)
(10,68,2)
(20,64,2)
(99,37,2)
(37,20,2)
(112,64,2)
(131,73,2)
(6,64,2)
(89,114,2)
(94,44,2)
(103,64,2)
(7,73,2)
(48,10,2)
(17,64,2)
(72,37,2)
(79,64,2)
(8,64,2)
(33,64,2)
(110,8,2)
(49,37,2)
(91,22,2)
(63,22,2)
(43,22,2)
(124,44,2)
(54,20,2)
(26,64,2)
(52,22,2)
(38,10,2)
(106,64,2)
(85,64,2)
(30,64,2)
(67,68,2)
(86,64,2)
(21,64,2)
(125,20,2)
(61,22,2)
(87,37,2)
(121,29,2)
(20,68,2)
(29,64,2)
(84,25,2)
(65,64,2)
(89,64,2)
(131,37,2)
(125,73,2)
(113,114,2)
(71,64,2)
(105,37,2)
(34,64,2)
(27,68,2)
(94,73,2)
(8,85,2)
(38,118,2)
(96,27,2)
(121,26,2)
(40,37,2)
(26,114,2)
(72,20,2)
(3,125,2)
(47,38,2)
(18,68,2)
(64,10,2)
(15,128,2)
(111,37,2)
(120,114,2)
(96,68,2)
(37,73,2)
(88,73,2)
(22,37,2)
(32,68,2)
(72,114,2)
(34,114,2)
(82,64,2)
(35,114,2)
(103,15,2)
(61,114,2)
(4,110,2)
(67,64,2)
(66,10,2)
(128,64,2)
(5,37,2)
(56,73,2)
(97,84,2)
(35,64,2)
(18,64,2)
(50,37,2)
(28,68,2)
-----------------------------------
(0,PTL_PT_FLOWCTRL)
(1,le)
(2,disable)
(3,le_ref(xt->le)
(4,pthread_spin_unlock(&xt->pt->obj_lock)
(5,list_entry(l, le_t, list)
(6,pt)
(7,to_ni(xt)
(8,xt->pt->obj_lock)
(9,l)
(10,list_empty(&xt->pt->priority_list)
(11,xt)
(12,)
(13,if (check_match(xt)
(14,)
(15,xt->pt->obj_lock)
(16,options)
(17,options)
(18,PTL_NI_NO_MATCHING)
(19,if (list_empty(&xt->pt->priority_list)
(20,ni->options & PTL_NI_NO_MATCHING)
(21,obj_lock)
(22,ni->options & PTL_NI_NO_MATCHING)
(23,list)
(24,ni)
(25,me_t *)
(26,xt->le)
(27,xt->pt->priority_list)
(28,pt)
(29,xt->le)
(30,xt->pt->disable)
(31,pt)
(32,ni)
(33,xt)
(34,STATE_TGT_NO_MATCH)
(35,NULL)
(36,if (ni->options & PTL_NI_NO_MATCHING)
(37,check_match(xt)
(38,xt->pt->overflow_list)
(39,)
(40,xt)
(41,)
(42,l)
(43,le)
(44,xt->le = list_entry(l, le_t, list)
(45,pt)
(46,goto done;)
(47,&xt->pt->overflow_list)
(48,xt)
(49,l)
(50,goto done;)
(51,le)
(52,le_ref(xt->le)
(53,)
(54,goto done;)
(55,xt)
(56,xt->pt)
(57,ni->options)
(58,le_t)
(59,ni->options)
(60,xt->pt)
(61,return STATE_TGT_GET_PERM;)
(62,ni)
(63,xt->le)
(64,list_empty(&xt->pt->priority_list)
(65,le)
(66,list_empty(&xt->pt->overflow_list)
(67,list_entry(l, le_t, list)
(68,xt->pt->options & PTL_PT_FLOWCTRL)
(69,priority_list)
(70,xt)
(71,xt)
(72,STATE_TGT_GET_PERM)
(73,xt_t *xt)
(74,list)
(75,)
(76,me_t *)
(77,le)
(78,WARN()
(79,obj_lock)
(80,xt)
(81,xt->pt->options)
(82,pthread_spin_lock(&xt->pt->obj_lock)
(83,xt)
(84,(me_t *)
(85,xt->pt)
(86,PT_AUTO_DISABLE)
(87,le)
(88,xt->pt)
(89,xt->le = NULL)
(90,options)
(91,xt)
(92,)
(93,)
(94,xt->le)
(95,overflow_list)
(96,&xt->pt->priority_list)
(97,me_ref((me_t *)
(98,)
(99,ni)
(100,(me_t *)
(101,xt)
(102,*ni = to_ni(xt)
(103,&xt->pt->obj_lock)
(104,if (check_match(xt)
(105,le_t)
(106,goto no_match;)
(107,if (ni->options & PTL_NI_NO_MATCHING)
(108,xt)
(109,no_match:)
(110,&xt->pt->obj_lock)
(111,le)
(112,xt->pt->disable |= PT_AUTO_DISABLE)
(113,goto done;)
(114,check_match(xt)
(115,pt)
(116,xt)
(117,xt->le = list_entry(l, le_t, list)
(118,xt->pt)
(119,RET)
(120,me_ref((me_t *)
(121,return STATE_TGT_NO_MATCH;)
(122,pt)
(123,xt)
(124,xt->le)
(125,xt->le)
(126,if (xt->pt->options & PTL_PT_FLOWCTRL)
(127,PTL_NI_NO_MATCHING)
(128,xt->pt)
(129,xt)
(130,xt)
(131,xt->le)
(132,done:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^