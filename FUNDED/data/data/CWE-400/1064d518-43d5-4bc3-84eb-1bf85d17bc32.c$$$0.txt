-----label-----
1
-----code-----
void ops_cls_status_msgs_get(enum ops_cls_list_status_code status_code,
                         const char *op_str, const char *feature_str,
                         const char *iface_str, const char *iface_num,
                         unsigned int seq_num,  unsigned int len,
                         char *status_msg_str)
{
    const char *status_table_str;
    char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];
    status_table_str = ops_cls_status_table_get(status_code);

    if(status_table_str != NULL) {
        if(seq_num == 0) {
            /* invalid entry sequence number, so format the string without
             * entry sequence number string.
             */
            if (iface_num) {
                snprintf(status_msg_str,len,status_table_str,
                         op_str,feature_str,
                         iface_str,iface_num,
                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);
            } else {
                snprintf(status_msg_str,len,status_table_str,
                         op_str,feature_str,
                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);
            }
        } else {
            /* valid entry sequence number, so format the string using
             * entry sequence number.
             */
            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,
                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);

            if (iface_num) {
                snprintf(status_msg_str,len,status_table_str,
                         op_str,feature_str,
                         iface_str,iface_num,seq_num_str);
            } else {
                snprintf(status_msg_str,len,status_table_str,
                         op_str,feature_str, seq_num_str);
            }

        } /* end if seq_num == 0 */
    } /* end if status_table_str != NULL */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
5,6
5,7
6,7
8,9
10,11
10,12
12,13
12,14
15,16
15,17
17,18
17,19
20,21
20,22
22,23
22,24
25,26
25,27
27,28
27,29
30,31
30,32
32,33
34,35
34,36
36,37
38,39
38,40
40,41
40,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
47,48
47,49
50,51
51,52
51,53
53,54
53,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
74,76
74,77
75,76
75,77
76,77
79,80
80,81
80,82
80,83
81,82
83,84
84,85
85,86
85,87
85,88
85,89
85,90
85,91
85,92
85,93
85,94
86,87
88,89
90,91
92,93
94,95
96,97
98,99
100,101
102,103
104,105
105,106
106,107
106,108
106,109
106,110
106,111
106,112
106,113
107,108
109,110
111,112
113,114
115,116
117,118
119,120
121,122
121,123
122,123
123,124
123,125
123,126
123,127
123,128
124,125
126,127
128,129
130,131
132,133
134,135
134,136
134,137
135,136
137,138
138,139
139,140
139,141
139,142
139,143
139,144
139,145
139,146
139,147
139,148
140,141
142,143
144,145
146,147
148,149
150,151
152,153
154,155
156,157
158,159
159,160
160,161
160,162
160,163
160,164
160,165
160,166
160,167
161,162
163,164
165,166
167,168
169,170
171,172
173,174
-----nextToken-----
2,4,7,9,11,13,14,16,18,19,21,23,24,26,28,29,31,33,35,37,39,41,42,46,48,49,52,54,57,61,64,66,70,72,77,78,82,87,89,91,93,95,97,99,101,103,108,110,112,114,116,118,120,125,127,129,131,133,136,141,143,145,147,149,151,153,155,157,162,164,166,168,170,172,174
-----computeFrom-----
59,60
59,61
68,69
68,70
75,76
75,77
-----guardedBy-----
70,168
-----guardedByNegation-----
77,133
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void ops_cls_status_msgs_get(enum ops_cls_list_status_code status_code,                         const char *op_str, const char *feature_str,                         const char *iface_str, const char *iface_num,                         unsigned int seq_num,  unsigned int len,                         char *status_msg_str){    const char *status_table_str;    char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];    status_table_str = ops_cls_status_table_get(status_code);    if(status_table_str != NULL) {        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }        } /* end if seq_num == 0 */    } /* end if status_table_str != NULL */}
void
ops_cls_status_msgs_get(enum ops_cls_list_status_code status_code,                         const char *op_str, const char *feature_str,                         const char *iface_str, const char *iface_num,                         unsigned int seq_num,  unsigned int len,                         char *status_msg_str)
ops_cls_status_msgs_get
enum ops_cls_list_status_code status_code
enum ops_cls_list_status_code
ops_cls_list_status_code
status_code
status_code
const char *op_str
const char
*op_str
*
op_str
const char *feature_str
const char
*feature_str
*
feature_str
const char *iface_str
const char
*iface_str
*
iface_str
const char *iface_num
const char
*iface_num
*
iface_num
unsigned int seq_num
unsigned int
seq_num
seq_num
unsigned int len
unsigned int
len
len
char *status_msg_str
char
*status_msg_str
*
status_msg_str
{    const char *status_table_str;    char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];    status_table_str = ops_cls_status_table_get(status_code);    if(status_table_str != NULL) {        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }        } /* end if seq_num == 0 */    } /* end if status_table_str != NULL */}
const char *status_table_str;
const char *status_table_str;
const char
*status_table_str
*
status_table_str
char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];
char seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN];
char
seq_num_str[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN]
seq_num_str
[OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN]
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
status_table_str = ops_cls_status_table_get(status_code);
status_table_str = ops_cls_status_table_get(status_code)
status_table_str
status_table_str
ops_cls_status_table_get(status_code)
ops_cls_status_table_get
ops_cls_status_table_get
status_code
status_code
if(status_table_str != NULL) {        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }        } /* end if seq_num == 0 */    }
status_table_str != NULL
status_table_str
status_table_str
NULL
NULL
{        if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }        } /* end if seq_num == 0 */    }
if(seq_num == 0) {            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }        } else {            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }        }
seq_num == 0
seq_num
seq_num
0
{            /* invalid entry sequence number, so format the string without             * entry sequence number string.             */            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }        }
if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }
iface_num
iface_num
{                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
snprintf
snprintf
status_msg_str
status_msg_str
len
len
status_table_str
status_table_str
op_str
op_str
feature_str
feature_str
iface_str
iface_str
iface_num
iface_num
OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID
OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID
{                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);            }
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID);
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
snprintf
snprintf
status_msg_str
status_msg_str
len
len
status_table_str
status_table_str
op_str
op_str
feature_str
feature_str
OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID
OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID
{            /* valid entry sequence number, so format the string using             * entry sequence number.             */            snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);            if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }        }
snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num);
snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num)
snprintf
snprintf
seq_num_str
seq_num_str
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN
OPS_CLS_STATUS_MSG_SEQ_NUM_VALID
OPS_CLS_STATUS_MSG_SEQ_NUM_VALID
seq_num
seq_num
if (iface_num) {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            } else {                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }
iface_num
iface_num
{                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);            }
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str);
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str,                         iface_str,iface_num,seq_num_str)
snprintf
snprintf
status_msg_str
status_msg_str
len
len
status_table_str
status_table_str
op_str
op_str
feature_str
feature_str
iface_str
iface_str
iface_num
iface_num
seq_num_str
seq_num_str
{                snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);            }
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str);
snprintf(status_msg_str,len,status_table_str,                         op_str,feature_str, seq_num_str)
snprintf
snprintf
status_msg_str
status_msg_str
len
len
status_table_str
status_table_str
op_str
op_str
feature_str
feature_str
seq_num_str
seq_num_str
-----joern-----
(70,40,0)
(12,44,0)
(2,40,0)
(37,47,0)
(40,33,0)
(12,20,0)
(8,33,0)
(41,12,0)
(40,30,0)
(12,66,0)
(58,35,0)
(22,40,0)
(40,50,0)
(8,66,0)
(36,31,0)
(8,30,0)
(67,8,0)
(47,66,0)
(48,58,0)
(59,66,0)
(40,20,0)
(5,8,0)
(43,66,0)
(3,47,0)
(58,32,0)
(10,12,0)
(12,25,0)
(27,12,0)
(17,40,0)
(68,8,0)
(53,40,0)
(21,71,0)
(12,55,0)
(40,66,0)
(8,20,0)
(8,50,0)
(69,8,0)
(13,8,0)
(47,30,0)
(31,64,0)
(11,12,0)
(66,31,0)
(62,71,0)
(60,32,0)
(28,47,0)
(12,30,0)
(0,58,0)
(39,59,0)
(45,58,0)
(46,8,0)
(47,20,0)
(49,40,0)
(51,8,0)
(40,56,0)
(8,55,0)
(12,50,0)
(31,66,0)
(8,18,0)
(7,60,0)
(9,47,0)
(34,42,0)
(38,47,0)
(8,44,0)
(6,47,0)
(14,12,0)
(65,12,0)
(15,71,0)
(57,12,0)
(54,60,0)
(1,12,0)
(4,58,0)
(12,33,0)
(52,35,0)
(66,71,0)
(47,33,0)
(16,59,0)
(47,19,0)
(61,8,0)
(47,50,0)
(29,26,0)
(8,66,1)
(40,20,1)
(47,50,1)
(37,9,1)
(7,54,1)
(12,33,1)
(12,44,1)
(47,33,1)
(47,6,1)
(36,43,1)
(66,31,1)
(27,57,1)
(40,30,1)
(47,66,1)
(8,55,1)
(12,30,1)
(47,20,1)
(59,66,1)
(63,47,1)
(63,12,1)
(58,32,1)
(12,41,1)
(63,40,1)
(8,67,1)
(12,50,1)
(17,49,1)
(40,50,1)
(14,23,1)
(23,60,1)
(6,3,1)
(5,68,1)
(40,66,1)
(67,13,1)
(63,8,1)
(40,17,1)
(38,28,1)
(53,22,1)
(9,24,1)
(60,7,1)
(68,69,1)
(1,11,1)
(4,60,1)
(45,4,1)
(57,14,1)
(13,5,1)
(58,48,1)
(28,37,1)
(48,0,1)
(12,55,1)
(8,33,1)
(11,27,1)
(12,20,1)
(22,2,1)
(8,20,1)
(63,59,1)
(39,66,1)
(49,70,1)
(47,30,1)
(3,38,1)
(60,32,1)
(10,65,1)
(46,51,1)
(8,44,1)
(40,33,1)
(65,1,1)
(41,10,1)
(59,16,1)
(12,66,1)
(8,50,1)
(0,45,1)
(16,39,1)
(54,59,1)
(51,61,1)
(8,30,1)
(31,64,1)
(61,24,1)
(2,23,1)
(31,36,1)
(69,46,1)
(24,58,1)
(70,53,1)
(8,50,2)
(59,66,2)
(60,32,2)
(17,23,2)
(28,24,2)
(47,33,2)
(8,30,2)
(47,30,2)
(66,31,2)
(40,23,2)
(53,23,2)
(68,24,2)
(8,20,2)
(40,50,2)
(8,66,2)
(69,24,2)
(57,23,2)
(12,23,2)
(12,30,2)
(12,55,2)
(40,33,2)
(12,50,2)
(11,23,2)
(13,24,2)
(24,60,2)
(65,23,2)
(8,33,2)
(47,24,2)
(51,24,2)
(6,24,2)
(14,23,2)
(37,24,2)
(10,23,2)
(48,60,2)
(70,23,2)
(47,66,2)
(40,30,2)
(3,24,2)
(47,50,2)
(60,59,2)
(2,23,2)
(9,24,2)
(40,20,2)
(54,59,2)
(61,24,2)
(0,60,2)
(12,33,2)
(23,60,2)
(40,66,2)
(27,23,2)
(49,23,2)
(5,24,2)
(4,60,2)
(38,24,2)
(8,44,2)
(41,23,2)
(8,55,2)
(7,59,2)
(12,66,2)
(12,44,2)
(58,32,2)
(67,24,2)
(58,60,2)
(12,20,2)
(45,60,2)
(1,23,2)
(8,24,2)
(47,20,2)
(31,64,2)
(22,23,2)
(46,24,2)
-----------------------------------
(0,OPS_CLS_STATUS_MSG_SEQ_NUM_VALID)
(1,feature_str)
(2,status_msg_str)
(3,feature_str)
(4,seq_num_str)
(5,iface_str)
(6,seq_num_str)
(7,0)
(8,snprintf(status_msg_str,len,status_table_str,\n\\n                         op_str,feature_str,\n\\n                         iface_str,iface_num,seq_num_str)
(9,status_msg_str)
(10,iface_num)
(11,op_str)
(12,snprintf(status_msg_str,len,status_table_str,\n\\n                         op_str,feature_str,\n\\n                         iface_str,iface_num,\n\\n                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
(13,iface_num)
(14,status_msg_str)
(15,if(status_table_str != NULL)
(16,NULL)
(17,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
(18,)
(19,)
(20,const char *feature_str)
(21,seq_num_str)
(22,len)
(23,iface_num)
(24,iface_num)
(25,)
(26,)
(27,status_table_str)
(28,status_table_str)
(29,if(seq_num == 0)
(30,unsigned int len)
(31,ops_cls_status_table_get(status_code)
(32,unsigned int seq_num)
(33,char *status_msg_str)
(34,if (iface_num)
(35,)
(36,status_code)
(37,len)
(38,op_str)
(39,status_table_str)
(40,snprintf(status_msg_str,len,status_table_str,\n\\n                         op_str,feature_str,\n\\n                         OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
(41,OPS_CLS_STATUS_MSG_SEQ_NUM_INVALID)
(42,)
(43,status_table_str)
(44,const char *iface_str)
(45,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN)
(46,status_table_str)
(47,snprintf(status_msg_str,len,status_table_str,\n\\n                         op_str,feature_str, seq_num_str)
(48,seq_num)
(49,feature_str)
(50,const char *op_str)
(51,len)
(52,if (iface_num)
(53,status_table_str)
(54,seq_num)
(55,const char *iface_num)
(56,)
(57,len)
(58,snprintf(seq_num_str,OPS_CLS_STATUS_MSG_SEQ_NUM_STR_LEN,\n\\n                     OPS_CLS_STATUS_MSG_SEQ_NUM_VALID,seq_num)
(59,status_table_str != NULL)
(60,seq_num == 0)
(61,status_msg_str)
(62,status_table_str)
(63,RET)
(64,enum ops_cls_list_status_code status_code)
(65,iface_str)
(66,status_table_str = ops_cls_status_table_get(status_code)
(67,seq_num_str)
(68,feature_str)
(69,op_str)
(70,op_str)
(71,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^