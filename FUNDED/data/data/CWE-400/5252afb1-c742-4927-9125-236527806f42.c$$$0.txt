-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_10_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalTrue)
    {
        {
            char inputBuffer[CHAR_ARRAY_SIZE] = "";
            /* POTENTIAL FLAW: Read count from the console using fgets() */
            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
            {
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            else
            {
                printLine("fgets() failed.");
            }
        }
    }
    if(globalTrue)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
22,23
23,24
23,25
25,26
25,27
25,28
27,28
28,29
30,31
32,33
32,34
32,35
33,34
33,35
34,35
34,36
34,37
34,38
35,36
37,38
39,40
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
55,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
64,65
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
72,73
74,75
74,76
74,77
74,78
75,76
76,77
76,78
77,78
80,81
80,82
81,82
83,84
83,85
84,85
84,86
85,86
88,89
90,91
91,92
93,94
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,8,10,14,16,19,24,26,29,31,36,38,40,42,44,49,52,54,59,60,63,69,71,73,78,79,82,86,87,89,92,97,98
-----computeFrom-----
12,13
12,14
33,34
33,35
47,48
47,49
76,77
76,78
80,81
80,82
-----guardedBy-----
38,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_10_bad(){    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_10_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_10_bad
{    int count;    /* Initialize count */    count = -1;    if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }    if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalTrue)    {        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
globalTrue
globalTrue
{        {            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }    }
{            char inputBuffer[CHAR_ARRAY_SIZE] = "";            /* POTENTIAL FLAW: Read count from the console using fgets() */            if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }        }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)            {                /* Convert to int */                count = atoi(inputBuffer);            }            else            {                printLine("fgets() failed.");            }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{                /* Convert to int */                count = atoi(inputBuffer);            }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{                printLine("fgets() failed.");            }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
if(globalTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
globalTrue
globalTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(20,6,0)
(30,13,0)
(29,24,0)
(47,9,0)
(51,2,0)
(21,38,0)
(1,4,0)
(42,24,0)
(10,4,0)
(14,46,0)
(2,22,0)
(13,19,0)
(21,2,0)
(3,18,0)
(41,48,0)
(12,38,0)
(28,7,0)
(43,45,0)
(21,45,0)
(17,18,0)
(50,7,0)
(38,19,0)
(45,43,0)
(6,5,0)
(23,46,0)
(45,4,0)
(25,4,0)
(40,19,0)
(31,24,0)
(15,21,0)
(44,47,0)
(2,31,0)
(38,21,0)
(8,19,0)
(11,41,0)
(41,24,0)
(7,16,0)
(24,46,0)
(48,41,0)
(26,43,0)
(27,31,0)
(18,7,0)
(33,48,0)
(21,15,0)
(46,35,0)
(32,21,0)
(37,41,0)
(36,45,0)
(0,41,0)
(31,2,0)
(0,11,1)
(48,41,1)
(32,12,1)
(45,43,1)
(12,13,1)
(42,49,1)
(8,40,1)
(13,30,1)
(43,26,1)
(21,32,1)
(17,3,1)
(49,45,1)
(44,48,1)
(51,48,1)
(18,17,1)
(39,34,1)
(13,19,1)
(21,45,1)
(47,44,1)
(41,24,1)
(11,24,1)
(19,8,1)
(29,42,1)
(21,2,1)
(40,18,1)
(3,34,1)
(24,29,1)
(38,21,1)
(21,15,1)
(27,51,1)
(33,41,1)
(31,27,1)
(39,38,1)
(20,38,1)
(31,24,1)
(37,0,1)
(12,19,1)
(48,33,1)
(41,37,1)
(2,31,1)
(34,2,1)
(34,47,1)
(34,49,1)
(38,19,1)
(30,6,1)
(26,36,1)
(6,20,1)
(48,49,2)
(44,48,2)
(37,49,2)
(6,38,2)
(21,2,2)
(41,49,2)
(45,43,2)
(24,49,2)
(13,38,2)
(17,34,2)
(11,49,2)
(21,15,2)
(13,19,2)
(19,34,2)
(42,49,2)
(18,34,2)
(27,48,2)
(29,49,2)
(38,34,2)
(51,48,2)
(32,34,2)
(21,38,2)
(2,31,2)
(30,38,2)
(20,38,2)
(8,34,2)
(33,49,2)
(2,48,2)
(41,24,2)
(47,48,2)
(40,34,2)
(21,34,2)
(38,19,2)
(48,41,2)
(12,38,2)
(0,49,2)
(31,48,2)
(38,21,2)
(31,24,2)
(12,34,2)
(32,38,2)
(38,38,2)
(21,45,2)
(3,34,2)
-----------------------------------
(0,CHAR_ARRAY_SIZE)
(1,if(globalTrue)
(2,count = atoi(inputBuffer)
(3,i)
(4,)
(5,)
(6,printLine("Hello")
(7,)
(8,0)
(9,)
(10,count)
(11,inputBuffer)
(12,i)
(13,i++)
(14,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(15,size_t)
(16,)
(17,0)
(18,i = 0)
(19,i = 0)
(20,"Hello")
(21,(size_t)
(22,)
(23,inputBuffer)
(24,inputBuffer[CHAR_ARRAY_SIZE] = "")
(25,if(globalTrue)
(26,1)
(27,inputBuffer)
(28,for (i = 0; i < (size_t)
(29,"")
(30,i)
(31,atoi(inputBuffer)
(32,count)
(33,NULL)
(34,globalTrue)
(35,)
(36,count)
(37,stdin)
(38,i < (size_t)
(39,RET)
(40,i)
(41,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(42,inputBuffer)
(43,-1)
(44,"fgets()
(45,count = -1)
(46,)
(47,printLine("fgets()
(48,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(49,globalTrue)
(50,i)
(51,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^