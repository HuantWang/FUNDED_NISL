-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    else
    {
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
    }
    if(globalReturnsTrueOrFalse())
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
    else
    {
        {
            size_t i = 0;
            /* FIX: Validate count before using it as the for loop variant */
            if (count > 0 && count <= 20)
            {
                for (i = 0; i < (size_t)count; i++)
                {
                    printLine("Hello");
                }
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
19,20
21,22
22,23
23,24
23,25
24,25
26,27
27,28
29,30
30,31
31,32
31,33
32,33
34,35
35,36
37,38
37,39
37,40
38,39
39,40
41,42
42,43
42,44
43,44
44,45
44,46
45,46
47,48
47,49
49,50
51,52
51,53
52,53
52,54
53,54
53,55
54,55
57,58
57,59
58,59
61,62
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
76,77
78,79
79,80
81,82
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
90,91
90,92
91,92
93,94
93,95
95,96
97,98
97,99
98,99
98,100
99,100
99,101
100,101
103,104
103,105
104,105
107,108
108,109
108,110
108,111
108,112
109,110
110,111
110,112
111,112
114,115
114,116
115,116
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
127,128
128,129
129,130
129,131
130,131
-----nextToken-----
2,4,8,10,14,16,20,25,28,33,36,40,46,48,50,55,56,59,60,66,67,70,74,75,77,80,85,86,92,94,96,101,102,105,106,112,113,116,120,121,123,126,131,132
-----computeFrom-----
12,13
12,14
23,24
23,25
31,32
31,33
52,53
52,54
53,54
53,55
57,58
57,59
64,65
64,66
68,69
68,70
98,99
98,100
99,100
99,101
103,104
103,105
110,111
110,112
114,115
114,116
-----guardedBy-----
59,77
105,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    else    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    else    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }    else    {        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
{        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();    }
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
if(globalReturnsTrueOrFalse())    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }    else    {        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
{        {            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }    }
{            size_t i = 0;            /* FIX: Validate count before using it as the for loop variant */            if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)            {                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{                for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }            }
for (i = 0; i < (size_t)count; i++)                {                    printLine("Hello");                }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                    printLine("Hello");                }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(33,28,0)
(21,15,0)
(26,33,0)
(50,64,0)
(18,15,0)
(62,33,0)
(14,26,0)
(66,33,0)
(11,69,0)
(35,10,0)
(74,76,0)
(67,40,0)
(15,21,0)
(35,33,0)
(13,43,0)
(52,71,0)
(56,41,0)
(9,38,0)
(30,5,0)
(59,21,0)
(66,10,0)
(10,48,0)
(46,69,0)
(15,18,0)
(15,10,0)
(66,7,0)
(37,15,0)
(38,72,0)
(42,1,0)
(46,35,0)
(39,35,0)
(74,64,0)
(43,2,0)
(36,58,0)
(19,74,0)
(73,26,0)
(69,10,0)
(23,43,0)
(61,56,0)
(68,1,0)
(4,66,0)
(53,5,0)
(76,74,0)
(33,60,0)
(35,46,0)
(51,13,0)
(34,58,0)
(10,24,0)
(24,10,0)
(7,17,0)
(17,7,0)
(73,1,0)
(32,64,0)
(54,17,0)
(58,56,0)
(16,56,0)
(47,43,0)
(21,5,0)
(28,33,0)
(17,33,0)
(26,14,0)
(3,53,0)
(55,73,0)
(49,64,0)
(17,10,0)
(15,33,0)
(27,35,0)
(20,66,0)
(69,33,0)
(69,46,0)
(44,6,0)
(57,10,0)
(31,76,0)
(8,70,0)
(26,73,0)
(6,1,0)
(29,17,0)
(75,5,0)
(25,26,0)
(7,66,0)
(26,10,0)
(65,69,0)
(22,52,0)
(12,13,0)
(26,25,1)
(45,73,1)
(26,10,1)
(38,9,1)
(53,5,1)
(26,14,1)
(27,39,1)
(9,21,1)
(13,12,1)
(31,19,1)
(30,46,1)
(4,20,1)
(20,58,1)
(57,63,1)
(58,36,1)
(28,62,1)
(63,74,1)
(6,1,1)
(55,1,1)
(73,26,1)
(35,27,1)
(73,1,1)
(33,28,1)
(66,4,1)
(69,33,1)
(7,66,1)
(21,15,1)
(55,6,1)
(75,30,1)
(74,76,1)
(44,52,1)
(11,65,1)
(24,57,1)
(52,22,1)
(15,33,1)
(45,7,1)
(37,59,1)
(7,17,1)
(51,0,1)
(76,31,1)
(15,18,1)
(69,10,1)
(0,33,1)
(17,29,1)
(68,7,1)
(45,21,1)
(26,33,1)
(69,11,1)
(34,0,1)
(54,66,1)
(10,24,1)
(5,75,1)
(17,33,1)
(42,68,1)
(15,10,1)
(35,33,1)
(6,44,1)
(21,5,1)
(35,10,1)
(59,5,1)
(25,55,1)
(46,69,1)
(53,3,1)
(66,33,1)
(12,51,1)
(29,54,1)
(46,35,1)
(3,38,1)
(0,10,1)
(62,63,1)
(66,10,1)
(15,37,1)
(65,35,1)
(39,13,1)
(59,53,1)
(36,34,1)
(17,10,1)
(45,46,1)
(22,73,1)
(1,42,1)
(65,35,2)
(34,0,2)
(26,7,2)
(59,46,2)
(22,73,2)
(24,63,2)
(26,10,2)
(15,46,2)
(38,21,2)
(25,73,2)
(66,33,2)
(15,33,2)
(66,10,2)
(20,0,2)
(37,46,2)
(26,14,2)
(4,0,2)
(42,7,2)
(46,69,2)
(54,66,2)
(58,0,2)
(7,17,2)
(35,0,2)
(10,24,2)
(9,21,2)
(52,73,2)
(17,33,2)
(15,18,2)
(21,15,2)
(37,21,2)
(17,66,2)
(44,73,2)
(7,0,2)
(62,63,2)
(6,1,2)
(15,21,2)
(73,73,2)
(46,0,2)
(55,73,2)
(36,0,2)
(73,1,2)
(25,7,2)
(66,0,2)
(26,33,2)
(74,76,2)
(6,73,2)
(21,21,2)
(1,7,2)
(73,7,2)
(12,0,2)
(59,21,2)
(35,10,2)
(73,26,2)
(53,21,2)
(53,5,2)
(15,10,2)
(10,63,2)
(21,5,2)
(30,46,2)
(33,28,2)
(11,35,2)
(3,21,2)
(57,63,2)
(68,7,2)
(39,0,2)
(21,46,2)
(7,66,2)
(28,63,2)
(46,35,2)
(69,35,2)
(17,10,2)
(69,10,2)
(13,0,2)
(26,73,2)
(55,7,2)
(69,33,2)
(27,0,2)
(35,33,2)
(29,66,2)
(51,0,2)
(5,46,2)
(33,63,2)
(75,46,2)
-----------------------------------
(0,globalReturnsTrueOrFalse()
(1,i = 0)
(2,)
(3,i)
(4,0)
(5,i = 0)
(6,i++)
(7,count > 0 && count <= 20)
(8,for (i = 0; i < (size_t)
(9,"Hello")
(10,count = RAND32()
(11,20)
(12,0)
(13,i = 0)
(14,size_t)
(15,(size_t)
(16,i)
(17,count <= 20)
(18,size_t)
(19,count)
(20,count)
(21,i < (size_t)
(22,"Hello")
(23,if (count > 0 && count <= 20)
(24,RAND32()
(25,count)
(26,(size_t)
(27,0)
(28,RAND32()
(29,20)
(30,i)
(31,1)
(32,if(globalReturnsTrueOrFalse()
(33,count = RAND32()
(34,i)
(35,count > 0)
(36,0)
(37,count)
(38,printLine("Hello")
(39,count)
(40,)
(41,)
(42,0)
(43,)
(44,i)
(45,RET)
(46,count > 0 && count <= 20)
(47,i)
(48,)
(49,count)
(50,if(globalReturnsTrueOrFalse()
(51,i)
(52,printLine("Hello")
(53,i++)
(54,count)
(55,i)
(56,)
(57,count)
(58,i = 0)
(59,i)
(60,)
(61,if (count > 0 && count <= 20)
(62,count)
(63,globalReturnsTrueOrFalse()
(64,)
(65,count)
(66,count > 0)
(67,for (i = 0; i < (size_t)
(68,i)
(69,count <= 20)
(70,)
(71,)
(72,)
(73,i < (size_t)
(74,count = -1)
(75,0)
(76,-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^