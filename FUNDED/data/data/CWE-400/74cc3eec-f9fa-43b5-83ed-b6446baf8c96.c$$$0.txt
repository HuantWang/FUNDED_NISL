-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    data = NULL;
    {
        char * data = *dataPtr1;
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
40,43
40,44
40,45
40,46
41,42
42,43
42,44
44,45
44,46
44,47
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
60,63
61,62
63,64
65,66
65,67
67,68
68,69
68,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
85,88
86,87
88,89
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
100,101
102,103
104,105
104,106
105,106
106,107
106,108
108,109
108,110
108,111
111,112
112,113
113,114
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,37,39,43,45,46,50,54,57,59,62,64,66,69,70,74,76,81,83,87,89,90,94,96,101,103,107,109,110,114,115
-----computeFrom-----
35,36
35,37
52,53
52,54
65,66
65,67
72,73
72,74
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_32_bad()
CWE401_Memory_Leak__char_realloc_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    data = NULL;    {        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
data = NULL;
data = NULL
data
data
NULL
NULL
{        char * data = *dataPtr1;        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
;
-----joern-----
(24,12,0)
(51,38,0)
(44,10,0)
(48,38,0)
(14,8,0)
(6,51,0)
(46,12,0)
(49,40,0)
(49,2,0)
(22,10,0)
(51,0,0)
(39,49,0)
(4,49,0)
(1,48,0)
(2,10,0)
(23,2,0)
(34,7,0)
(17,28,0)
(33,41,0)
(42,45,0)
(11,36,0)
(19,28,0)
(21,7,0)
(20,38,0)
(32,46,0)
(19,22,0)
(38,10,0)
(28,19,0)
(36,40,0)
(28,44,0)
(29,11,0)
(43,2,0)
(9,40,0)
(22,52,0)
(40,12,0)
(12,46,0)
(35,52,0)
(47,22,0)
(12,24,0)
(26,9,0)
(7,34,0)
(30,14,0)
(14,46,0)
(34,13,0)
(3,36,0)
(12,40,0)
(40,2,0)
(45,10,0)
(11,38,0)
(50,45,0)
(0,51,0)
(53,8,0)
(27,9,0)
(36,2,0)
(37,10,0)
(0,2,0)
(16,10,0)
(31,44,0)
(15,40,0)
(8,14,0)
(38,48,0)
(46,0,0)
(25,19,0)
(46,14,0)
(52,22,0)
(41,40,0)
(18,10,0)
(41,2,0)
(54,0,0)
(0,51,1)
(11,38,1)
(52,35,1)
(9,26,1)
(3,11,1)
(38,48,1)
(9,40,1)
(14,8,1)
(40,12,1)
(53,30,1)
(1,20,1)
(42,22,1)
(12,24,1)
(50,42,1)
(22,52,1)
(45,50,1)
(49,40,1)
(46,14,1)
(41,33,1)
(36,40,1)
(27,40,1)
(4,34,1)
(30,32,1)
(17,36,1)
(19,22,1)
(46,0,1)
(11,29,1)
(6,54,1)
(5,28,1)
(33,49,1)
(7,21,1)
(48,1,1)
(15,0,1)
(51,38,1)
(49,39,1)
(26,27,1)
(47,38,1)
(12,46,1)
(32,15,1)
(8,53,1)
(41,40,1)
(21,9,1)
(34,7,1)
(54,45,1)
(35,47,1)
(29,41,1)
(28,19,1)
(51,6,1)
(36,3,1)
(19,25,1)
(4,9,1)
(39,4,1)
(25,17,1)
(7,9,2)
(0,51,2)
(12,24,2)
(40,12,2)
(51,38,2)
(36,40,2)
(14,8,2)
(19,22,2)
(22,52,2)
(11,38,2)
(34,9,2)
(49,40,2)
(46,14,2)
(41,40,2)
(46,0,2)
(21,9,2)
(12,46,2)
(34,7,2)
(9,40,2)
(28,19,2)
(38,48,2)
-----------------------------------
(0,* data = *dataPtr1)
(1,data)
(2,)
(3,data)
(4,data)
(5,RET)
(6,dataPtr1)
(7,-1)
(8,sizeof(char)
(9,data == NULL)
(10,)
(11,*dataPtr1)
(12,(char *)
(13,)
(14,100*sizeof(char)
(15,data)
(16,data)
(17,data)
(18,dataPtr2)
(19,*dataPtr2)
(20,dataPtr1)
(21,1)
(22,* *dataPtr2 = &data)
(23,if (data == NULL)
(24,char *)
(25,dataPtr2)
(26,NULL)
(27,data)
(28,* data = *dataPtr2)
(29,dataPtr1)
(30,100)
(31,data)
(32,data)
(33,data)
(34,exit(-1)
(35,data)
(36,*dataPtr1 = data)
(37,dataPtr1)
(38,* *dataPtr1 = &data)
(39,"A String")
(40,data = (char *)
(41,printLine(data)
(42,data)
(43,data)
(44,)
(45,data = NULL)
(46,realloc(data, 100*sizeof(char)
(47,dataPtr2)
(48,&data)
(49,strcpy(data, "A String")
(50,NULL)
(51,*dataPtr1)
(52,&data)
(53,char)
(54,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^