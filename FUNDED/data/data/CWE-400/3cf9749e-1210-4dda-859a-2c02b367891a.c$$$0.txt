-----label-----
1
-----code-----
static int
peer_dsc_add(struct peer *peer, uint16_t chr_val_handle,
             const struct ble_gatt_dsc *gatt_dsc)
{
    struct peer_dsc *prev;
    struct peer_dsc *dsc;
    struct peer_svc *svc;
    struct peer_chr *chr;

    svc = peer_svc_find_range(peer, chr_val_handle);
    if (svc == NULL) {
        /* Can't find service for discovered descriptor; this shouldn't
         * happen.
         */
        assert(0);
        return BLE_HS_EUNKNOWN;
    }

    chr = peer_chr_find(svc, chr_val_handle, NULL);
    if (chr == NULL) {
        /* Can't find characteristic for discovered descriptor; this shouldn't
         * happen.
         */
        assert(0);
        return BLE_HS_EUNKNOWN;
    }

    dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);
    if (dsc != NULL) {
        /* Descriptor already discovered. */
        return 0;
    }

    dsc = os_memblock_get(&peer_dsc_pool);
    if (dsc == NULL) {
        /* Out of memory. */
        return BLE_HS_ENOMEM;
    }
    memset(dsc, 0, sizeof *dsc);

    dsc->dsc = *gatt_dsc;

    if (prev == NULL) {
        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
    } else {
        SLIST_NEXT(prev, next) = dsc;
    }

    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
53,54
55,56
55,57
55,58
56,57
58,59
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
68,70
69,70
70,71
70,72
71,72
74,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
81,84
81,85
82,83
84,85
86,87
88,89
90,91
90,92
91,92
91,93
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
105,106
106,107
106,108
107,108
109,110
109,111
109,112
109,113
110,111
112,113
114,115
114,116
115,116
118,119
119,120
121,122
121,123
122,123
122,124
123,124
125,126
127,128
128,129
130,131
131,132
131,133
132,133
134,135
134,136
135,136
137,138
138,139
140,141
140,142
141,142
141,143
142,143
144,145
146,147
147,148
148,149
150,151
151,152
151,153
151,154
151,155
152,153
154,155
157,158
158,159
159,160
161,162
162,163
162,164
163,164
163,165
164,165
167,168
168,169
170,171
170,172
170,173
171,172
171,173
172,173
174,175
176,177
177,178
178,179
178,180
178,181
178,182
179,180
181,182
182,183
182,184
183,184
186,187
188,189
190,191
191,192
192,193
192,194
193,194
193,195
193,196
194,195
196,197
198,199
200,201
202,203
-----nextToken-----
2,4,7,9,10,13,15,18,20,21,26,28,29,33,35,36,40,42,43,47,49,50,54,57,59,61,65,67,72,73,76,80,83,85,87,89,93,95,100,101,104,108,111,113,116,117,120,124,126,129,133,136,139,143,145,149,153,155,156,160,165,166,169,173,175,180,184,185,187,189,195,197,199,201,203
-----computeFrom-----
52,53
52,54
63,64
63,65
78,79
78,80
91,92
91,93
106,107
106,108
122,123
122,124
131,132
131,133
141,142
141,143
162,163
162,164
171,172
171,173
192,193
192,194
-----guardedBy-----
-----guardedByNegation-----
173,197
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intpeer_dsc_add(struct peer *peer, uint16_t chr_val_handle,             const struct ble_gatt_dsc *gatt_dsc){    struct peer_dsc *prev;    struct peer_dsc *dsc;    struct peer_svc *svc;    struct peer_chr *chr;    svc = peer_svc_find_range(peer, chr_val_handle);    if (svc == NULL) {        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }    chr = peer_chr_find(svc, chr_val_handle, NULL);    if (chr == NULL) {        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }    dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);    if (dsc != NULL) {        /* Descriptor already discovered. */        return 0;    }    dsc = os_memblock_get(&peer_dsc_pool);    if (dsc == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }    memset(dsc, 0, sizeof *dsc);    dsc->dsc = *gatt_dsc;    if (prev == NULL) {        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    } else {        SLIST_NEXT(prev, next) = dsc;    }    return 0;}
static int
peer_dsc_add(struct peer *peer, uint16_t chr_val_handle,             const struct ble_gatt_dsc *gatt_dsc)
peer_dsc_add
struct peer *peer
struct peer
peer
*peer
*
peer
uint16_t chr_val_handle
uint16_t
uint16_t
chr_val_handle
chr_val_handle
const struct ble_gatt_dsc *gatt_dsc
const struct ble_gatt_dsc
ble_gatt_dsc
*gatt_dsc
*
gatt_dsc
{    struct peer_dsc *prev;    struct peer_dsc *dsc;    struct peer_svc *svc;    struct peer_chr *chr;    svc = peer_svc_find_range(peer, chr_val_handle);    if (svc == NULL) {        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }    chr = peer_chr_find(svc, chr_val_handle, NULL);    if (chr == NULL) {        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }    dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);    if (dsc != NULL) {        /* Descriptor already discovered. */        return 0;    }    dsc = os_memblock_get(&peer_dsc_pool);    if (dsc == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }    memset(dsc, 0, sizeof *dsc);    dsc->dsc = *gatt_dsc;    if (prev == NULL) {        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    } else {        SLIST_NEXT(prev, next) = dsc;    }    return 0;}
struct peer_dsc *prev;
struct peer_dsc *prev;
struct peer_dsc
peer_dsc
*prev
*
prev
struct peer_dsc *dsc;
struct peer_dsc *dsc;
struct peer_dsc
peer_dsc
*dsc
*
dsc
struct peer_svc *svc;
struct peer_svc *svc;
struct peer_svc
peer_svc
*svc
*
svc
struct peer_chr *chr;
struct peer_chr *chr;
struct peer_chr
peer_chr
*chr
*
chr
svc = peer_svc_find_range(peer, chr_val_handle);
svc = peer_svc_find_range(peer, chr_val_handle)
svc
svc
peer_svc_find_range(peer, chr_val_handle)
peer_svc_find_range
peer_svc_find_range
peer
peer
chr_val_handle
chr_val_handle
if (svc == NULL) {        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }
svc == NULL
svc
svc
NULL
NULL
{        /* Can't find service for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }
assert(0);
assert(0)
assert
assert
0
return BLE_HS_EUNKNOWN;
BLE_HS_EUNKNOWN
BLE_HS_EUNKNOWN
chr = peer_chr_find(svc, chr_val_handle, NULL);
chr = peer_chr_find(svc, chr_val_handle, NULL)
chr
chr
peer_chr_find(svc, chr_val_handle, NULL)
peer_chr_find
peer_chr_find
svc
svc
chr_val_handle
chr_val_handle
NULL
NULL
if (chr == NULL) {        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }
chr == NULL
chr
chr
NULL
NULL
{        /* Can't find characteristic for discovered descriptor; this shouldn't         * happen.         */        assert(0);        return BLE_HS_EUNKNOWN;    }
assert(0);
assert(0)
assert
assert
0
return BLE_HS_EUNKNOWN;
BLE_HS_EUNKNOWN
BLE_HS_EUNKNOWN
dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev);
dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev)
dsc
dsc
peer_dsc_find(chr, gatt_dsc->handle, &prev)
peer_dsc_find
peer_dsc_find
chr
chr
gatt_dsc->handle
gatt_dsc
gatt_dsc
handle
&prev
prev
prev
if (dsc != NULL) {        /* Descriptor already discovered. */        return 0;    }
dsc != NULL
dsc
dsc
NULL
NULL
{        /* Descriptor already discovered. */        return 0;    }
return 0;
0
dsc = os_memblock_get(&peer_dsc_pool);
dsc = os_memblock_get(&peer_dsc_pool)
dsc
dsc
os_memblock_get(&peer_dsc_pool)
os_memblock_get
os_memblock_get
&peer_dsc_pool
peer_dsc_pool
peer_dsc_pool
if (dsc == NULL) {        /* Out of memory. */        return BLE_HS_ENOMEM;    }
dsc == NULL
dsc
dsc
NULL
NULL
{        /* Out of memory. */        return BLE_HS_ENOMEM;    }
return BLE_HS_ENOMEM;
BLE_HS_ENOMEM
BLE_HS_ENOMEM
memset(dsc, 0, sizeof *dsc);
memset(dsc, 0, sizeof *dsc)
memset
memset
dsc
dsc
0
sizeof *dsc
*dsc
dsc
dsc
dsc->dsc = *gatt_dsc;
dsc->dsc = *gatt_dsc
dsc->dsc
dsc
dsc
dsc
*gatt_dsc
gatt_dsc
gatt_dsc
if (prev == NULL) {        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    } else {        SLIST_NEXT(prev, next) = dsc;    }
prev == NULL
prev
prev
NULL
NULL
{        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);    }
SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
SLIST_INSERT_HEAD(&chr->dscs, dsc, next)
SLIST_INSERT_HEAD
SLIST_INSERT_HEAD
&chr->dscs
chr->dscs
chr
chr
dscs
dsc
dsc
next
next
{        SLIST_NEXT(prev, next) = dsc;    }
SLIST_NEXT(prev, next) = dsc;
SLIST_NEXT(prev, next) = dsc
SLIST_NEXT(prev, next)
SLIST_NEXT
SLIST_NEXT
prev
prev
next
next
dsc
dsc
return 0;
0
-----joern-----
(42,79,0)
(71,56,0)
(24,6,0)
(49,25,0)
(72,89,0)
(78,42,0)
(5,16,0)
(17,70,0)
(7,45,0)
(95,42,0)
(16,28,0)
(65,88,0)
(21,62,0)
(96,88,0)
(66,6,0)
(2,97,0)
(73,72,0)
(55,16,0)
(39,60,0)
(18,79,0)
(87,95,0)
(9,19,0)
(76,40,0)
(88,18,0)
(32,79,0)
(90,24,0)
(40,60,0)
(57,18,0)
(90,79,0)
(8,41,0)
(29,59,0)
(3,57,0)
(63,68,0)
(14,5,0)
(58,42,0)
(22,37,0)
(52,90,0)
(48,62,0)
(26,79,0)
(86,97,0)
(7,29,0)
(61,80,0)
(91,18,0)
(33,79,0)
(80,83,0)
(45,70,0)
(16,5,0)
(82,45,0)
(90,42,0)
(64,28,0)
(88,47,0)
(60,26,0)
(16,55,0)
(83,80,0)
(84,56,0)
(13,79,0)
(78,46,0)
(97,38,0)
(41,25,0)
(69,67,0)
(72,26,0)
(97,47,0)
(35,41,0)
(83,57,0)
(85,79,0)
(97,30,0)
(67,68,0)
(88,30,0)
(75,46,0)
(37,47,0)
(28,89,0)
(42,78,0)
(16,18,0)
(47,79,0)
(36,63,0)
(27,55,0)
(54,47,0)
(12,79,0)
(7,67,0)
(80,42,0)
(28,16,0)
(6,24,0)
(0,28,0)
(40,79,0)
(20,95,0)
(50,29,0)
(7,44,0)
(57,83,0)
(43,79,0)
(60,42,0)
(47,97,0)
(81,44,0)
(7,40,0)
(80,51,0)
(74,79,0)
(93,80,0)
(40,41,0)
(53,90,0)
(24,90,0)
(4,79,0)
(23,19,0)
(11,37,0)
(34,60,0)
(44,77,0)
(15,17,0)
(10,88,0)
(62,5,0)
(25,42,0)
(25,92,0)
(19,18,0)
(18,88,0)
(26,72,0)
(6,42,0)
(1,79,0)
(31,57,0)
(46,78,0)
(94,16,0)
(5,79,0)
(46,75,1)
(97,2,1)
(27,28,1)
(6,66,1)
(24,6,1)
(73,60,1)
(49,41,1)
(52,53,1)
(97,38,1)
(48,21,1)
(40,41,1)
(60,39,1)
(58,62,1)
(10,96,1)
(44,81,1)
(60,42,1)
(80,61,1)
(88,30,1)
(28,0,1)
(75,58,1)
(40,76,1)
(3,31,1)
(21,5,1)
(9,18,1)
(91,37,1)
(80,83,1)
(64,94,1)
(28,89,1)
(15,37,1)
(42,78,1)
(71,26,1)
(11,22,1)
(7,67,1)
(96,91,1)
(55,27,1)
(25,42,1)
(90,24,1)
(83,57,1)
(35,8,1)
(45,82,1)
(36,19,1)
(95,87,1)
(37,47,1)
(7,40,1)
(93,83,1)
(5,16,1)
(8,56,1)
(29,50,1)
(2,86,1)
(0,64,1)
(19,23,1)
(76,80,1)
(57,18,1)
(34,90,1)
(72,73,1)
(81,95,1)
(76,25,1)
(97,30,1)
(66,52,1)
(78,46,1)
(7,29,1)
(50,62,1)
(26,72,1)
(17,15,1)
(20,42,1)
(95,42,1)
(16,28,1)
(94,14,1)
(80,42,1)
(63,36,1)
(88,47,1)
(16,18,1)
(47,97,1)
(22,47,1)
(7,45,1)
(72,89,1)
(61,93,1)
(56,84,1)
(31,56,1)
(41,35,1)
(65,10,1)
(39,34,1)
(14,19,1)
(88,65,1)
(53,95,1)
(87,20,1)
(62,5,1)
(86,54,1)
(6,42,1)
(90,42,1)
(67,69,1)
(7,44,1)
(25,49,1)
(37,11,1)
(23,9,1)
(18,88,1)
(62,48,1)
(16,55,1)
(84,71,1)
(82,17,1)
(19,18,1)
(69,63,1)
(57,3,1)
(40,60,1)
(57,56,2)
(49,56,2)
(24,6,2)
(62,19,2)
(45,37,2)
(84,95,2)
(76,95,2)
(39,95,2)
(67,19,2)
(83,57,2)
(46,62,2)
(94,19,2)
(5,16,2)
(50,62,2)
(66,95,2)
(6,95,2)
(8,56,2)
(96,37,2)
(36,19,2)
(80,56,2)
(82,37,2)
(18,37,2)
(95,42,2)
(58,62,2)
(40,60,2)
(40,95,2)
(7,29,2)
(27,19,2)
(87,62,2)
(14,19,2)
(57,18,2)
(28,89,2)
(25,42,2)
(23,37,2)
(91,37,2)
(44,95,2)
(65,37,2)
(7,44,2)
(18,88,2)
(15,37,2)
(40,41,2)
(90,24,2)
(35,56,2)
(7,45,2)
(41,56,2)
(88,30,2)
(21,19,2)
(72,95,2)
(63,19,2)
(26,72,2)
(48,19,2)
(80,42,2)
(31,56,2)
(7,40,2)
(34,95,2)
(10,37,2)
(90,42,2)
(53,95,2)
(17,37,2)
(88,37,2)
(71,95,2)
(42,62,2)
(3,56,2)
(62,5,2)
(0,19,2)
(81,95,2)
(64,19,2)
(9,37,2)
(24,95,2)
(20,62,2)
(88,47,2)
(75,62,2)
(93,56,2)
(47,97,2)
(25,56,2)
(19,37,2)
(95,62,2)
(16,19,2)
(60,42,2)
(97,30,2)
(56,95,2)
(73,95,2)
(6,42,2)
(19,18,2)
(42,78,2)
(28,19,2)
(37,47,2)
(97,38,2)
(83,56,2)
(78,62,2)
(72,89,2)
(80,83,2)
(60,95,2)
(16,55,2)
(61,56,2)
(55,19,2)
(52,95,2)
(90,95,2)
(26,95,2)
(5,19,2)
(69,19,2)
(16,18,2)
(16,28,2)
(78,46,2)
(29,62,2)
(7,67,2)
-----------------------------------
(0,handle)
(1,if (prev == NULL)
(2,chr_val_handle)
(3,dscs)
(4,prev)
(5,dsc = peer_dsc_find(chr, gatt_dsc->handle, &prev)
(6,*dsc)
(7,RET)
(8,prev)
(9,chr)
(10,chr_val_handle)
(11,NULL)
(12,if (svc == NULL)
(13,if (chr == NULL)
(14,dsc)
(15,0)
(16,peer_dsc_find(chr, gatt_dsc->handle, &prev)
(17,assert(0)
(18,chr = peer_chr_find(svc, chr_val_handle, NULL)
(19,chr == NULL)
(20,dsc)
(21,dsc)
(22,svc)
(23,NULL)
(24,sizeof *dsc)
(25,SLIST_NEXT(prev, next)
(26,dsc->dsc = *gatt_dsc)
(27,prev)
(28,gatt_dsc->handle)
(29,return 0;)
(30,uint16_t chr_val_handle)
(31,chr)
(32,if (dsc == NULL)
(33,svc)
(34,dsc)
(35,next)
(36,0)
(37,svc == NULL)
(38,struct peer *peer)
(39,dsc)
(40,return 0;)
(41,SLIST_NEXT(prev, next)
(42,dsc = os_memblock_get(&peer_dsc_pool)
(43,chr)
(44,return BLE_HS_ENOMEM;)
(45,return BLE_HS_EUNKNOWN;)
(46,&peer_dsc_pool)
(47,svc = peer_svc_find_range(peer, chr_val_handle)
(48,NULL)
(49,dsc)
(50,0)
(51,)
(52,0)
(53,dsc)
(54,svc)
(55,&prev)
(56,prev == NULL)
(57,chr->dscs)
(58,dsc)
(59,)
(60,dsc->dsc)
(61,next)
(62,dsc != NULL)
(63,assert(0)
(64,gatt_dsc)
(65,NULL)
(66,dsc)
(67,return BLE_HS_EUNKNOWN;)
(68,)
(69,BLE_HS_EUNKNOWN)
(70,)
(71,prev)
(72,*gatt_dsc)
(73,gatt_dsc)
(74,dsc)
(75,peer_dsc_pool)
(76,0)
(77,)
(78,os_memblock_get(&peer_dsc_pool)
(79,)
(80,SLIST_INSERT_HEAD(&chr->dscs, dsc, next)
(81,BLE_HS_ENOMEM)
(82,BLE_HS_EUNKNOWN)
(83,&chr->dscs)
(84,NULL)
(85,if (dsc != NULL)
(86,peer)
(87,NULL)
(88,peer_chr_find(svc, chr_val_handle, NULL)
(89,const struct ble_gatt_dsc *gatt_dsc)
(90,memset(dsc, 0, sizeof *dsc)
(91,chr)
(92,)
(93,dsc)
(94,chr)
(95,dsc == NULL)
(96,svc)
(97,peer_svc_find_range(peer, chr_val_handle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^