-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFive==5)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
33,35
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
-----nextToken-----
2,4,8,10,14,16,20,21,26,27,31,32,37,39,43,44
-----computeFrom-----
12,13
12,14
18,19
18,20
24,25
24,26
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticFive==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFive==5)    {        /* FIX: Use a relatively small number */        count = 20;    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticFive==5)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(3,4,0)
(21,9,0)
(4,11,0)
(17,12,0)
(16,9,0)
(8,12,0)
(6,7,0)
(2,1,0)
(15,6,0)
(5,12,0)
(1,5,0)
(10,6,0)
(22,14,0)
(10,5,0)
(19,6,0)
(5,1,0)
(23,12,0)
(18,5,0)
(0,14,0)
(10,11,0)
(13,10,0)
(21,14,1)
(15,19,1)
(0,22,1)
(10,5,1)
(22,5,1)
(14,0,1)
(5,1,1)
(9,16,1)
(4,3,1)
(10,6,1)
(6,15,1)
(13,9,1)
(21,6,1)
(20,9,1)
(2,18,1)
(20,4,1)
(10,13,1)
(16,21,1)
(3,10,1)
(19,14,1)
(1,2,1)
(6,14,2)
(13,9,2)
(4,9,2)
(15,14,2)
(10,5,2)
(19,14,2)
(10,6,2)
(5,1,2)
(10,9,2)
(3,9,2)
-----------------------------------
(0,5)
(1,-1)
(2,1)
(3,"Sleep time possibly too long")
(4,printLine("Sleep time possibly too long")
(5,count = -1)
(6,count = 20)
(7,)
(8,if(staticFive==5)
(9,staticFive==5)
(10,SLEEP(count)
(11,)
(12,)
(13,count)
(14,staticFive==5)
(15,20)
(16,5)
(17,count)
(18,count)
(19,count)
(20,RET)
(21,staticFive)
(22,staticFive)
(23,if(staticFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^