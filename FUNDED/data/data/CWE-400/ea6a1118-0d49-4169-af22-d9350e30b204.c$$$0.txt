-----label-----
0
-----code-----
static int ptl_init(MPIDI_PG_t *pg_p, int pg_rank, char **bc_val_p, int *val_max_sz_p)
{
    int mpi_errno = MPI_SUCCESS;
    int ret;
    ptl_md_t md;
    ptl_ni_limits_t desired;
    MPIDI_STATE_DECL(MPID_STATE_PTL_INIT);

    MPIDI_FUNC_ENTER(MPID_STATE_PTL_INIT);

    /* first make sure that our private fields in the vc and req fit into the area provided  */
    MPIU_Assert(sizeof(MPID_nem_ptl_vc_area) <= MPID_NEM_VC_NETMOD_AREA_LEN);
    MPIU_Assert(sizeof(MPID_nem_ptl_req_area) <= MPID_NEM_REQ_NETMOD_AREA_LEN);

    /* Make sure our IOV is the same as portals4's IOV */
    MPIU_Assert(sizeof(ptl_iovec_t) == sizeof(MPID_IOV));
    MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_base)) == ((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF)));
    MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_len))  == ((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN)));
    MPIU_Assert(sizeof(((ptl_iovec_t*)0)->iov_len) == sizeof(((MPID_IOV*)0)->MPID_IOV_LEN));
            

    mpi_errno = MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched);
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    MPIDI_Anysource_improbe_fn = MPID_nem_ptl_anysource_improbe;

    /* init portals */
    ret = PtlInit();
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlinit", "**ptlinit %s", MPID_nem_ptl_strerror(ret));
    
    /* do an interface pre-init to get the default limits struct */
    ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,
                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));

    /* finalize the interface so we can re-init with our desired maximums */
    ret = PtlNIFini(MPIDI_nem_ptl_ni);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));

    /* set higher limits if they are determined to be too low */
    if (desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS") == NULL)
        desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT;
    if (desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS") == NULL)
        desired.max_eqs = EQ_COUNT;

    /* do the real init */
    ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,
                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));

    ret = PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptleqalloc", "**ptleqalloc %s", MPID_nem_ptl_strerror(ret));

    /* allocate portal for matching messages */
    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,
                     PTL_PT_ANY, &MPIDI_nem_ptl_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    /* allocate portal for large messages where receiver does a get */
    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,
                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    /* allocate portal for MPICH control messages */
    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,
                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    /* allocate portal for MPICH control messages */
    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,
                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    /* create an MD that covers all of memory */
    md.start = 0;
    md.length = (ptl_size_t)-1;
    md.options = 0x0;
    md.eq_handle = MPIDI_nem_ptl_eq;
    md.ct_handle = PTL_CT_NONE;
    ret = PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlmdbind", "**ptlmdbind %s", MPID_nem_ptl_strerror(ret));

    /* currently, rportlas only works with a single NI and EQ */
    ret = MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));

    /* allow rportal to manage the primary portal and retransmit if needed */
    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    /* allow rportal to manage the get and control portals, but we
     * don't expect retransmission to be needed on these portals, so
     * we pass PTL_PT_ANY as the dummy portal.  unfortunately, portals
     * does not have an "invalid" PT constant, which would have been
     * more appropriate to pass over here. */
    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY);
    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));

    /* create business card */
    mpi_errno = get_business_card(pg_rank, bc_val_p, val_max_sz_p);
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    /* init other modules */
    mpi_errno = MPID_nem_ptl_poll_init();
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);

    mpi_errno = MPID_nem_ptl_nm_init();
    if (mpi_errno) MPIU_ERR_POP(mpi_errno);
    
 fn_exit:
    MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT);
    return mpi_errno;
 fn_fail:
    goto fn_exit;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
17,19
17,20
21,22
21,23
23,24
23,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
26,39
26,40
26,41
26,42
26,43
26,44
26,45
26,46
26,47
26,48
26,49
26,50
26,51
26,52
26,53
26,54
26,55
26,56
26,57
26,58
26,59
26,60
26,61
26,62
26,63
26,64
26,65
26,66
26,67
26,68
26,69
26,70
26,71
26,72
26,73
26,74
26,75
26,76
26,77
26,78
26,79
26,80
26,81
26,82
26,83
26,84
26,85
27,28
28,29
28,30
30,31
30,32
32,33
33,34
35,36
36,37
36,38
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
56,57
57,58
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
69,71
70,71
71,72
71,73
72,73
75,76
77,78
78,79
78,80
79,80
81,82
81,83
82,83
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
93,94
93,95
94,95
95,96
95,97
96,97
99,100
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
108,110
109,110
110,111
110,112
111,112
111,113
113,114
115,116
116,117
117,118
117,119
118,119
119,120
119,121
120,121
120,122
121,122
123,124
127,128
128,129
128,130
129,130
129,131
131,132
133,134
134,135
135,136
135,137
136,137
137,138
137,139
138,139
138,140
139,140
141,142
145,146
146,147
146,148
147,148
149,150
149,151
150,151
151,152
151,153
152,153
152,154
154,155
156,157
157,158
158,159
158,160
159,160
160,161
160,162
161,162
161,163
162,163
164,165
168,169
169,170
169,171
170,171
170,172
172,173
174,175
175,176
176,177
176,178
177,178
178,179
178,180
179,180
179,181
180,181
182,183
186,187
187,188
187,189
188,189
190,191
190,192
191,192
192,193
193,194
193,195
194,195
195,196
195,197
196,197
196,198
197,198
199,200
203,204
204,205
205,206
205,207
206,207
207,208
207,209
208,209
208,210
209,210
211,212
215,216
216,217
216,218
217,218
219,220
219,221
219,222
220,221
222,223
224,225
226,227
226,228
227,228
229,230
230,231
230,232
231,232
233,234
235,236
236,237
236,238
237,238
239,240
241,242
242,243
242,244
243,244
245,246
246,247
248,249
249,250
249,251
249,252
249,253
249,254
249,255
249,256
250,251
252,253
254,255
256,257
260,261
260,262
261,262
263,264
265,266
266,267
266,268
267,268
269,270
269,271
269,272
269,273
269,274
269,275
269,276
270,271
272,273
274,275
274,276
275,276
277,278
279,280
281,282
283,284
284,285
286,287
287,288
289,290
290,291
290,292
290,293
290,294
290,295
290,296
290,297
291,292
293,294
295,296
297,298
301,302
301,303
302,303
304,305
306,307
307,308
307,309
308,309
310,311
310,312
311,312
313,314
315,316
316,317
316,318
316,319
316,320
316,321
316,322
316,323
317,318
319,320
321,322
323,324
327,328
327,329
328,329
330,331
332,333
332,334
333,334
333,335
334,335
334,336
335,336
335,337
336,337
339,340
341,342
341,343
342,343
342,344
343,344
346,347
348,349
349,350
349,351
350,351
350,352
351,352
354,355
356,357
356,358
357,358
357,359
358,359
358,360
359,360
359,361
360,361
363,364
365,366
365,367
366,367
366,368
367,368
370,371
372,373
373,374
373,375
374,375
374,376
375,376
378,379
380,381
381,382
381,383
382,383
384,385
384,386
384,387
384,388
384,389
384,390
384,391
385,386
387,388
389,390
389,391
390,391
392,393
394,395
396,397
397,398
399,400
400,401
402,403
403,404
405,406
406,407
406,408
406,409
406,410
406,411
406,412
406,413
407,408
409,410
411,412
413,414
417,418
417,419
418,419
420,421
422,423
423,424
423,425
424,425
426,427
426,428
426,429
426,430
427,428
429,430
431,432
433,434
434,435
436,437
437,438
437,439
437,440
437,441
437,442
437,443
437,444
438,439
440,441
442,443
444,445
448,449
448,450
449,450
451,452
453,454
454,455
454,456
455,456
457,458
457,459
457,460
457,461
457,462
457,463
458,459
460,461
462,463
462,464
463,464
463,465
464,465
466,467
468,469
470,471
472,473
474,475
475,476
477,478
478,479
478,480
478,481
478,482
478,483
478,484
478,485
479,480
481,482
483,484
485,486
489,490
489,491
490,491
492,493
494,495
495,496
495,497
496,497
498,499
498,500
498,501
498,502
498,503
498,504
499,500
501,502
503,504
503,505
504,505
504,506
505,506
507,508
509,510
511,512
513,514
515,516
516,517
518,519
519,520
519,521
519,522
519,523
519,524
519,525
519,526
520,521
522,523
524,525
526,527
530,531
530,532
531,532
533,534
535,536
536,537
536,538
537,538
539,540
539,541
539,542
539,543
539,544
539,545
540,541
542,543
544,545
544,546
545,546
545,547
546,547
548,549
550,551
552,553
554,555
556,557
557,558
559,560
560,561
560,562
560,563
560,564
560,565
560,566
560,567
561,562
563,564
565,566
567,568
571,572
571,573
572,573
574,575
576,577
577,578
577,579
578,579
580,581
580,582
580,583
580,584
580,585
580,586
581,582
583,584
585,586
585,587
586,587
586,588
587,588
589,590
591,592
593,594
595,596
597,598
598,599
600,601
601,602
601,603
601,604
601,605
601,606
601,607
601,608
602,603
604,605
606,607
608,609
612,613
612,614
613,614
615,616
617,618
618,619
618,620
619,620
619,621
620,621
624,625
625,626
625,627
626,627
626,628
627,628
630,631
630,632
631,632
632,633
635,636
636,637
636,638
637,638
637,639
638,639
642,643
643,644
643,645
644,645
644,646
645,646
648,649
650,651
651,652
651,653
652,653
652,654
653,654
656,657
658,659
659,660
659,661
660,661
662,663
662,664
662,665
662,666
663,664
665,666
667,668
668,669
670,671
671,672
673,674
674,675
674,676
674,677
674,678
674,679
674,680
674,681
675,676
677,678
679,680
681,682
685,686
685,687
686,687
688,689
690,691
691,692
691,693
692,693
694,695
694,696
694,697
694,698
695,696
697,698
697,699
698,699
698,700
699,700
704,705
706,707
707,708
707,709
707,710
707,711
707,712
707,713
707,714
708,709
710,711
712,713
714,715
718,719
718,720
719,720
721,722
723,724
724,725
724,726
725,726
727,728
727,729
727,730
727,731
727,732
728,729
730,731
732,733
734,735
736,737
738,739
739,740
739,741
739,742
739,743
739,744
739,745
739,746
740,741
742,743
744,745
746,747
750,751
750,752
751,752
753,754
755,756
756,757
756,758
757,758
759,760
759,761
759,762
759,763
759,764
760,761
762,763
764,765
766,767
768,769
770,771
771,772
771,773
771,774
771,775
771,776
771,777
771,778
772,773
774,775
776,777
778,779
782,783
782,784
783,784
785,786
787,788
788,789
788,790
789,790
791,792
791,793
791,794
791,795
791,796
792,793
794,795
796,797
798,799
800,801
802,803
803,804
803,805
803,806
803,807
803,808
803,809
803,810
804,805
806,807
808,809
810,811
814,815
814,816
815,816
817,818
819,820
820,821
820,822
821,822
823,824
823,825
823,826
823,827
824,825
826,827
828,829
830,831
832,833
832,834
833,834
835,836
836,837
836,838
837,838
839,840
841,842
842,843
842,844
843,844
845,846
846,847
848,849
848,850
849,850
851,852
852,853
852,854
853,854
855,856
857,858
858,859
858,860
859,860
861,862
862,863
864,865
864,866
865,866
867,868
868,869
868,870
869,870
871,872
873,874
873,875
875,876
876,877
876,878
877,878
879,880
881,882
882,883
884,885
884,886
886,887
-----nextToken-----
2,4,7,9,10,12,14,16,18,19,20,22,24,25,29,31,34,37,39,43,45,49,51,55,58,62,64,68,73,74,76,80,85,86,88,92,97,98,102,103,107,112,114,122,124,125,126,130,132,140,142,143,144,148,153,155,163,165,166,167,171,173,181,183,184,185,189,198,200,201,202,210,212,213,214,218,221,223,225,228,232,234,238,240,244,247,251,253,255,257,258,259,262,264,268,271,273,276,278,280,282,285,288,292,294,296,298,299,300,303,305,309,312,314,318,320,322,324,325,326,329,331,337,338,340,344,345,347,352,353,355,361,362,364,368,369,371,376,377,379,383,386,388,391,393,395,398,401,404,408,410,412,414,415,416,419,421,425,428,430,432,435,439,441,443,445,446,447,450,452,456,459,461,465,467,469,471,473,476,480,482,484,486,487,488,491,493,497,500,502,506,508,510,512,514,517,521,523,525,527,528,529,532,534,538,541,543,547,549,551,553,555,558,562,564,566,568,569,570,573,575,579,582,584,588,590,592,594,596,599,603,605,607,609,610,611,614,616,621,622,623,628,629,633,634,639,640,641,646,647,649,654,655,657,661,664,666,669,672,676,678,680,682,683,684,687,689,693,696,700,701,702,703,705,709,711,713,715,716,717,720,722,726,729,731,733,735,737,741,743,745,747,748,749,752,754,758,761,763,765,767,769,773,775,777,779,780,781,784,786,790,793,795,797,799,801,805,807,809,811,812,813,816,818,822,825,827,829,831,834,838,840,844,847,850,854,856,860,863,866,870,872,874,878,880,883,885,887
-----computeFrom-----
69,70
69,71
81,82
81,83
93,94
93,95
108,109
108,110
149,150
149,151
190,191
190,192
216,217
216,218
236,237
236,238
242,243
242,244
266,267
266,268
274,275
274,276
307,308
307,309
333,334
333,335
334,335
334,336
341,342
341,343
349,350
349,351
357,358
357,359
358,359
358,360
365,366
365,367
373,374
373,375
381,382
381,383
389,390
389,391
423,424
423,425
454,455
454,456
462,463
462,464
463,464
463,465
495,496
495,497
503,504
503,505
504,505
504,506
536,537
536,538
544,545
544,546
545,546
545,547
577,578
577,579
585,586
585,587
586,587
586,588
618,619
618,620
625,626
625,627
630,631
630,632
636,637
636,638
643,644
643,645
651,652
651,653
659,660
659,661
691,692
691,693
724,725
724,726
756,757
756,758
788,789
788,790
820,821
820,822
842,843
842,844
858,859
858,860
-----guardedBy-----
337,352
338,353
340,355
361,376
364,379
362,377
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;UnaryExpression;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;Name;UnaryExpression;UnaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;LiteralExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;GotoStatement;Name;
-----ast_node-----
static int ptl_init(MPIDI_PG_t *pg_p, int pg_rank, char **bc_val_p, int *val_max_sz_p){    int mpi_errno = MPI_SUCCESS;    int ret;    ptl_md_t md;    ptl_ni_limits_t desired;    MPIDI_STATE_DECL(MPID_STATE_PTL_INIT);    MPIDI_FUNC_ENTER(MPID_STATE_PTL_INIT);    /* first make sure that our private fields in the vc and req fit into the area provided  */    MPIU_Assert(sizeof(MPID_nem_ptl_vc_area) <= MPID_NEM_VC_NETMOD_AREA_LEN);    MPIU_Assert(sizeof(MPID_nem_ptl_req_area) <= MPID_NEM_REQ_NETMOD_AREA_LEN);    /* Make sure our IOV is the same as portals4's IOV */    MPIU_Assert(sizeof(ptl_iovec_t) == sizeof(MPID_IOV));    MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_base)) == ((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF)));    MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_len))  == ((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN)));    MPIU_Assert(sizeof(((ptl_iovec_t*)0)->iov_len) == sizeof(((MPID_IOV*)0)->MPID_IOV_LEN));                mpi_errno = MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    MPIDI_Anysource_improbe_fn = MPID_nem_ptl_anysource_improbe;    /* init portals */    ret = PtlInit();    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlinit", "**ptlinit %s", MPID_nem_ptl_strerror(ret));        /* do an interface pre-init to get the default limits struct */    ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));    /* finalize the interface so we can re-init with our desired maximums */    ret = PtlNIFini(MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));    /* set higher limits if they are determined to be too low */    if (desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS") == NULL)        desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT;    if (desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS") == NULL)        desired.max_eqs = EQ_COUNT;    /* do the real init */    ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));    ret = PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptleqalloc", "**ptleqalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for matching messages */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for large messages where receiver does a get */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for MPICH control messages */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for MPICH control messages */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* create an MD that covers all of memory */    md.start = 0;    md.length = (ptl_size_t)-1;    md.options = 0x0;    md.eq_handle = MPIDI_nem_ptl_eq;    md.ct_handle = PTL_CT_NONE;    ret = PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlmdbind", "**ptlmdbind %s", MPID_nem_ptl_strerror(ret));    /* currently, rportlas only works with a single NI and EQ */    ret = MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));    /* allow rportal to manage the primary portal and retransmit if needed */    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allow rportal to manage the get and control portals, but we     * don't expect retransmission to be needed on these portals, so     * we pass PTL_PT_ANY as the dummy portal.  unfortunately, portals     * does not have an "invalid" PT constant, which would have been     * more appropriate to pass over here. */    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* create business card */    mpi_errno = get_business_card(pg_rank, bc_val_p, val_max_sz_p);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    /* init other modules */    mpi_errno = MPID_nem_ptl_poll_init();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    mpi_errno = MPID_nem_ptl_nm_init();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);     fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT);    return mpi_errno; fn_fail:    goto fn_exit;}
static int
ptl_init(MPIDI_PG_t *pg_p, int pg_rank, char **bc_val_p, int *val_max_sz_p)
ptl_init
MPIDI_PG_t *pg_p
MPIDI_PG_t
MPIDI_PG_t
*pg_p
*
pg_p
int pg_rank
int
pg_rank
pg_rank
char **bc_val_p
char
**bc_val_p
*
*
bc_val_p
int *val_max_sz_p
int
*val_max_sz_p
*
val_max_sz_p
{    int mpi_errno = MPI_SUCCESS;    int ret;    ptl_md_t md;    ptl_ni_limits_t desired;    MPIDI_STATE_DECL(MPID_STATE_PTL_INIT);    MPIDI_FUNC_ENTER(MPID_STATE_PTL_INIT);    /* first make sure that our private fields in the vc and req fit into the area provided  */    MPIU_Assert(sizeof(MPID_nem_ptl_vc_area) <= MPID_NEM_VC_NETMOD_AREA_LEN);    MPIU_Assert(sizeof(MPID_nem_ptl_req_area) <= MPID_NEM_REQ_NETMOD_AREA_LEN);    /* Make sure our IOV is the same as portals4's IOV */    MPIU_Assert(sizeof(ptl_iovec_t) == sizeof(MPID_IOV));    MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_base)) == ((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF)));    MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_len))  == ((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN)));    MPIU_Assert(sizeof(((ptl_iovec_t*)0)->iov_len) == sizeof(((MPID_IOV*)0)->MPID_IOV_LEN));                mpi_errno = MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    MPIDI_Anysource_improbe_fn = MPID_nem_ptl_anysource_improbe;    /* init portals */    ret = PtlInit();    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlinit", "**ptlinit %s", MPID_nem_ptl_strerror(ret));        /* do an interface pre-init to get the default limits struct */    ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));    /* finalize the interface so we can re-init with our desired maximums */    ret = PtlNIFini(MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));    /* set higher limits if they are determined to be too low */    if (desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS") == NULL)        desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT;    if (desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS") == NULL)        desired.max_eqs = EQ_COUNT;    /* do the real init */    ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));    ret = PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptleqalloc", "**ptleqalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for matching messages */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for large messages where receiver does a get */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for MPICH control messages */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allocate portal for MPICH control messages */    ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* create an MD that covers all of memory */    md.start = 0;    md.length = (ptl_size_t)-1;    md.options = 0x0;    md.eq_handle = MPIDI_nem_ptl_eq;    md.ct_handle = PTL_CT_NONE;    ret = PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlmdbind", "**ptlmdbind %s", MPID_nem_ptl_strerror(ret));    /* currently, rportlas only works with a single NI and EQ */    ret = MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));    /* allow rportal to manage the primary portal and retransmit if needed */    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* allow rportal to manage the get and control portals, but we     * don't expect retransmission to be needed on these portals, so     * we pass PTL_PT_ANY as the dummy portal.  unfortunately, portals     * does not have an "invalid" PT constant, which would have been     * more appropriate to pass over here. */    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY);    MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));    /* create business card */    mpi_errno = get_business_card(pg_rank, bc_val_p, val_max_sz_p);    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    /* init other modules */    mpi_errno = MPID_nem_ptl_poll_init();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);    mpi_errno = MPID_nem_ptl_nm_init();    if (mpi_errno) MPIU_ERR_POP(mpi_errno);     fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT);    return mpi_errno; fn_fail:    goto fn_exit;}
int mpi_errno = MPI_SUCCESS;
int mpi_errno = MPI_SUCCESS;
int
mpi_errno = MPI_SUCCESS
mpi_errno
= MPI_SUCCESS
MPI_SUCCESS
MPI_SUCCESS
int ret;
int ret;
int
ret
ret
ptl_md_t md;
ptl_md_t md;
ptl_md_t
ptl_md_t
md
md
ptl_ni_limits_t desired;
ptl_ni_limits_t desired;
ptl_ni_limits_t
ptl_ni_limits_t
desired
desired
MPIDI_STATE_DECL(MPID_STATE_PTL_INIT);
MPIDI_STATE_DECL(MPID_STATE_PTL_INIT);
MPIDI_STATE_DECL
MPIDI_STATE_DECL
(MPID_STATE_PTL_INIT)
MPID_STATE_PTL_INIT
MPID_STATE_PTL_INIT
MPIDI_FUNC_ENTER(MPID_STATE_PTL_INIT);
MPIDI_FUNC_ENTER(MPID_STATE_PTL_INIT)
MPIDI_FUNC_ENTER
MPIDI_FUNC_ENTER
MPID_STATE_PTL_INIT
MPID_STATE_PTL_INIT
MPIU_Assert(sizeof(MPID_nem_ptl_vc_area) <= MPID_NEM_VC_NETMOD_AREA_LEN);
MPIU_Assert(sizeof(MPID_nem_ptl_vc_area) <= MPID_NEM_VC_NETMOD_AREA_LEN)
MPIU_Assert
MPIU_Assert
sizeof(MPID_nem_ptl_vc_area) <= MPID_NEM_VC_NETMOD_AREA_LEN
sizeof(MPID_nem_ptl_vc_area)
MPID_nem_ptl_vc_area
MPID_nem_ptl_vc_area
MPID_nem_ptl_vc_area

MPID_NEM_VC_NETMOD_AREA_LEN
MPID_NEM_VC_NETMOD_AREA_LEN
MPIU_Assert(sizeof(MPID_nem_ptl_req_area) <= MPID_NEM_REQ_NETMOD_AREA_LEN);
MPIU_Assert(sizeof(MPID_nem_ptl_req_area) <= MPID_NEM_REQ_NETMOD_AREA_LEN)
MPIU_Assert
MPIU_Assert
sizeof(MPID_nem_ptl_req_area) <= MPID_NEM_REQ_NETMOD_AREA_LEN
sizeof(MPID_nem_ptl_req_area)
MPID_nem_ptl_req_area
MPID_nem_ptl_req_area
MPID_nem_ptl_req_area

MPID_NEM_REQ_NETMOD_AREA_LEN
MPID_NEM_REQ_NETMOD_AREA_LEN
MPIU_Assert(sizeof(ptl_iovec_t) == sizeof(MPID_IOV));
MPIU_Assert(sizeof(ptl_iovec_t) == sizeof(MPID_IOV))
MPIU_Assert
MPIU_Assert
sizeof(ptl_iovec_t) == sizeof(MPID_IOV)
sizeof(ptl_iovec_t)
ptl_iovec_t
ptl_iovec_t
ptl_iovec_t

sizeof(MPID_IOV)
MPID_IOV
MPID_IOV
MPID_IOV

MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_base)) == ((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF)));
MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_base)) == ((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF)))
MPIU_Assert
MPIU_Assert
((void*)&(((ptl_iovec_t*)0)->iov_base)) == ((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF))
((void*)&(((ptl_iovec_t*)0)->iov_base))
(void*)&(((ptl_iovec_t*)0)->iov_base)
void*
void
*
*
&(((ptl_iovec_t*)0)->iov_base)
(((ptl_iovec_t*)0)->iov_base)
((ptl_iovec_t*)0)->iov_base
((ptl_iovec_t*)0)
(ptl_iovec_t*)0
ptl_iovec_t*
ptl_iovec_t
ptl_iovec_t
*
*
0
iov_base
((void*)&(((MPID_IOV*)0)->MPID_IOV_BUF))
(void*)&(((MPID_IOV*)0)->MPID_IOV_BUF)
void*
void
*
*
&(((MPID_IOV*)0)->MPID_IOV_BUF)
(((MPID_IOV*)0)->MPID_IOV_BUF)
((MPID_IOV*)0)->MPID_IOV_BUF
((MPID_IOV*)0)
(MPID_IOV*)0
MPID_IOV*
MPID_IOV
MPID_IOV
*
*
0
MPID_IOV_BUF
MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_len))  == ((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN)));
MPIU_Assert(((void*)&(((ptl_iovec_t*)0)->iov_len))  == ((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN)))
MPIU_Assert
MPIU_Assert
((void*)&(((ptl_iovec_t*)0)->iov_len))  == ((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN))
((void*)&(((ptl_iovec_t*)0)->iov_len))
(void*)&(((ptl_iovec_t*)0)->iov_len)
void*
void
*
*
&(((ptl_iovec_t*)0)->iov_len)
(((ptl_iovec_t*)0)->iov_len)
((ptl_iovec_t*)0)->iov_len
((ptl_iovec_t*)0)
(ptl_iovec_t*)0
ptl_iovec_t*
ptl_iovec_t
ptl_iovec_t
*
*
0
iov_len
((void*)&(((MPID_IOV*)0)->MPID_IOV_LEN))
(void*)&(((MPID_IOV*)0)->MPID_IOV_LEN)
void*
void
*
*
&(((MPID_IOV*)0)->MPID_IOV_LEN)
(((MPID_IOV*)0)->MPID_IOV_LEN)
((MPID_IOV*)0)->MPID_IOV_LEN
((MPID_IOV*)0)
(MPID_IOV*)0
MPID_IOV*
MPID_IOV
MPID_IOV
*
*
0
MPID_IOV_LEN
MPIU_Assert(sizeof(((ptl_iovec_t*)0)->iov_len) == sizeof(((MPID_IOV*)0)->MPID_IOV_LEN));
MPIU_Assert(sizeof(((ptl_iovec_t*)0)->iov_len) == sizeof(((MPID_IOV*)0)->MPID_IOV_LEN))
MPIU_Assert
MPIU_Assert
sizeof(((ptl_iovec_t*)0)->iov_len) == sizeof(((MPID_IOV*)0)->MPID_IOV_LEN)
sizeof(((ptl_iovec_t*)0)->iov_len)
(((ptl_iovec_t*)0)->iov_len)
((ptl_iovec_t*)0)->iov_len
((ptl_iovec_t*)0)
(ptl_iovec_t*)0
ptl_iovec_t*
ptl_iovec_t
ptl_iovec_t
*
*
0
iov_len
sizeof(((MPID_IOV*)0)->MPID_IOV_LEN)
(((MPID_IOV*)0)->MPID_IOV_LEN)
((MPID_IOV*)0)->MPID_IOV_LEN
((MPID_IOV*)0)
(MPID_IOV*)0
MPID_IOV*
MPID_IOV
MPID_IOV
*
*
0
MPID_IOV_LEN
mpi_errno = MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched);
mpi_errno = MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched)
mpi_errno
mpi_errno
MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched)
MPIDI_CH3I_Register_anysource_notification
MPIDI_CH3I_Register_anysource_notification
MPID_nem_ptl_anysource_posted
MPID_nem_ptl_anysource_posted
MPID_nem_ptl_anysource_matched
MPID_nem_ptl_anysource_matched
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
MPIDI_Anysource_improbe_fn = MPID_nem_ptl_anysource_improbe;
MPIDI_Anysource_improbe_fn = MPID_nem_ptl_anysource_improbe
MPIDI_Anysource_improbe_fn
MPIDI_Anysource_improbe_fn
MPID_nem_ptl_anysource_improbe
MPID_nem_ptl_anysource_improbe
ret = PtlInit();
ret = PtlInit()
ret
ret
PtlInit()
PtlInit
PtlInit
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlinit", "**ptlinit %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlinit", "**ptlinit %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlinit"
"**ptlinit %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni);
ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni)
ret
ret
PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni)
PtlNIInit
PtlNIInit
PTL_IFACE_DEFAULT
PTL_IFACE_DEFAULT
PTL_NI_MATCHING | PTL_NI_PHYSICAL
PTL_NI_MATCHING
PTL_NI_MATCHING
PTL_NI_PHYSICAL
PTL_NI_PHYSICAL
PTL_PID_ANY
PTL_PID_ANY
NULL
NULL
&desired
desired
desired
&MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlniinit"
"**ptlniinit %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlNIFini(MPIDI_nem_ptl_ni);
ret = PtlNIFini(MPIDI_nem_ptl_ni)
ret
ret
PtlNIFini(MPIDI_nem_ptl_ni)
PtlNIFini
PtlNIFini
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlnifini"
"**ptlnifini %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
if (desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS") == NULL)        desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT;
desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS") == NULL
desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT
desired.max_unexpected_headers
desired
desired
max_unexpected_headers
UNEXPECTED_HDR_COUNT
UNEXPECTED_HDR_COUNT
getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS") == NULL
getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS")
getenv
getenv
"PTL_LIM_MAX_UNEXPECTED_HEADERS"
NULL
NULL
desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT;
desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT
desired.max_unexpected_headers
desired
desired
max_unexpected_headers
UNEXPECTED_HDR_COUNT
UNEXPECTED_HDR_COUNT
if (desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS") == NULL)        desired.max_eqs = EQ_COUNT;
desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS") == NULL
desired.max_eqs < EQ_COUNT
desired.max_eqs
desired
desired
max_eqs
EQ_COUNT
EQ_COUNT
getenv("PTL_LIM_MAX_EQS") == NULL
getenv("PTL_LIM_MAX_EQS")
getenv
getenv
"PTL_LIM_MAX_EQS"
NULL
NULL
desired.max_eqs = EQ_COUNT;
desired.max_eqs = EQ_COUNT
desired.max_eqs
desired
desired
max_eqs
EQ_COUNT
EQ_COUNT
ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni);
ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni)
ret
ret
PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni)
PtlNIInit
PtlNIInit
PTL_IFACE_DEFAULT
PTL_IFACE_DEFAULT
PTL_NI_MATCHING | PTL_NI_PHYSICAL
PTL_NI_MATCHING
PTL_NI_MATCHING
PTL_NI_PHYSICAL
PTL_NI_PHYSICAL
PTL_PID_ANY
PTL_PID_ANY
&desired
desired
desired
&MPIDI_nem_ptl_ni_limits
MPIDI_nem_ptl_ni_limits
MPIDI_nem_ptl_ni_limits
&MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlniinit"
"**ptlniinit %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq);
ret = PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq)
ret
ret
PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq)
PtlEQAlloc
PtlEQAlloc
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
EQ_COUNT
EQ_COUNT
&MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptleqalloc", "**ptleqalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptleqalloc", "**ptleqalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptleqalloc"
"**ptleqalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_pt);
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_pt)
ret
ret
PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_pt)
PtlPTAlloc
PtlPTAlloc
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_TRUNCATE
PTL_PT_FLOWCTRL
PTL_PT_FLOWCTRL
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
PTL_PT_ANY
PTL_PT_ANY
&MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt);
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt)
ret
ret
PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt)
PtlPTAlloc
PtlPTAlloc
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_TRUNCATE
PTL_PT_FLOWCTRL
PTL_PT_FLOWCTRL
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
PTL_PT_ANY
PTL_PT_ANY
&MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt);
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt)
ret
ret
PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt)
PtlPTAlloc
PtlPTAlloc
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_TRUNCATE
PTL_PT_FLOWCTRL
PTL_PT_FLOWCTRL
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
PTL_PT_ANY
PTL_PT_ANY
&MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt);
ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt)
ret
ret
PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt)
PtlPTAlloc
PtlPTAlloc
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL
PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_USE_ONCE
PTL_PT_ONLY_TRUNCATE
PTL_PT_ONLY_TRUNCATE
PTL_PT_FLOWCTRL
PTL_PT_FLOWCTRL
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
PTL_PT_ANY
PTL_PT_ANY
&MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
md.start = 0;
md.start = 0
md.start
md
md
start
0
md.length = (ptl_size_t)-1;
md.length = (ptl_size_t)-1
md.length
md
md
length
(ptl_size_t)-1
(ptl_size_t)
ptl_size_t
ptl_size_t
1
md.options = 0x0;
md.options = 0x0
md.options
md
md
options
0x0
md.eq_handle = MPIDI_nem_ptl_eq;
md.eq_handle = MPIDI_nem_ptl_eq
md.eq_handle
md
md
eq_handle
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
md.ct_handle = PTL_CT_NONE;
md.ct_handle = PTL_CT_NONE
md.ct_handle
md
md
ct_handle
PTL_CT_NONE
PTL_CT_NONE
ret = PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md);
ret = PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md)
ret
ret
PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md)
PtlMDBind
PtlMDBind
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
&md
md
md
&MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
MPIDI_nem_ptl_global_md
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlmdbind", "**ptlmdbind %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlmdbind", "**ptlmdbind %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlmdbind"
"**ptlmdbind %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info);
ret = MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info)
ret
ret
MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info)
MPID_nem_ptl_rptl_init
MPID_nem_ptl_rptl_init
MPIDI_Process.my_pg->size
MPIDI_Process.my_pg
MPIDI_Process
MPIDI_Process
my_pg
size
5
get_target_info
get_target_info
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlniinit"
"**ptlniinit %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt);
ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt)
ret
ret
MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt)
MPID_nem_ptl_rptl_ptinit
MPID_nem_ptl_rptl_ptinit
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_pt
MPIDI_nem_ptl_rpt_pt
MPIDI_nem_ptl_rpt_pt
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY);
ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY)
ret
ret
MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY)
MPID_nem_ptl_rptl_ptinit
MPID_nem_ptl_rptl_ptinit
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_get_pt
MPIDI_nem_ptl_get_pt
PTL_PT_ANY
PTL_PT_ANY
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY);
ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY)
ret
ret
MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY)
MPID_nem_ptl_rptl_ptinit
MPID_nem_ptl_rptl_ptinit
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_ni
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_eq
MPIDI_nem_ptl_control_pt
MPIDI_nem_ptl_control_pt
PTL_PT_ANY
PTL_PT_ANY
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret));
MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret))
MPIU_ERR_CHKANDJUMP1
MPIU_ERR_CHKANDJUMP1
ret
ret
mpi_errno
mpi_errno
MPI_ERR_OTHER
MPI_ERR_OTHER
"**ptlptalloc"
"**ptlptalloc %s"
MPID_nem_ptl_strerror(ret)
MPID_nem_ptl_strerror
MPID_nem_ptl_strerror
ret
ret
mpi_errno = get_business_card(pg_rank, bc_val_p, val_max_sz_p);
mpi_errno = get_business_card(pg_rank, bc_val_p, val_max_sz_p)
mpi_errno
mpi_errno
get_business_card(pg_rank, bc_val_p, val_max_sz_p)
get_business_card
get_business_card
pg_rank
pg_rank
bc_val_p
bc_val_p
val_max_sz_p
val_max_sz_p
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
mpi_errno = MPID_nem_ptl_poll_init();
mpi_errno = MPID_nem_ptl_poll_init()
mpi_errno
mpi_errno
MPID_nem_ptl_poll_init()
MPID_nem_ptl_poll_init
MPID_nem_ptl_poll_init
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
mpi_errno = MPID_nem_ptl_nm_init();
mpi_errno = MPID_nem_ptl_nm_init()
mpi_errno
mpi_errno
MPID_nem_ptl_nm_init()
MPID_nem_ptl_nm_init
MPID_nem_ptl_nm_init
if (mpi_errno) MPIU_ERR_POP(mpi_errno);
mpi_errno
mpi_errno
MPIU_ERR_POP(mpi_errno);
MPIU_ERR_POP(mpi_errno)
MPIU_ERR_POP
MPIU_ERR_POP
mpi_errno
mpi_errno
fn_exit:    MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT);
fn_exit
MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT);
MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT)
MPIDI_FUNC_EXIT
MPIDI_FUNC_EXIT
MPID_STATE_PTL_INIT
MPID_STATE_PTL_INIT
return mpi_errno;
mpi_errno
mpi_errno
fn_fail:    goto fn_exit;
fn_fail
goto fn_exit;
fn_exit
-----joern-----
(250,127,0)
(277,149,0)
(326,251,0)
(55,103,0)
(427,127,0)
(21,209,0)
(375,384,0)
(378,303,0)
(203,413,0)
(320,47,0)
(190,24,0)
(91,331,0)
(382,52,0)
(278,422,0)
(359,93,0)
(170,17,0)
(317,127,0)
(200,95,0)
(304,314,0)
(373,109,0)
(184,28,0)
(195,309,0)
(422,95,0)
(5,82,0)
(22,427,0)
(214,401,0)
(405,189,0)
(29,20,0)
(287,135,0)
(320,165,0)
(33,127,0)
(17,127,0)
(47,320,0)
(130,301,0)
(301,233,0)
(97,196,0)
(3,103,0)
(125,413,0)
(109,373,0)
(213,156,0)
(110,116,0)
(420,85,0)
(331,127,0)
(425,52,0)
(367,135,0)
(211,153,0)
(93,127,0)
(248,65,0)
(11,250,0)
(165,320,0)
(106,422,0)
(79,333,0)
(70,411,0)
(192,141,0)
(131,179,0)
(57,185,0)
(112,274,0)
(310,381,0)
(226,326,0)
(237,231,0)
(379,134,0)
(156,43,0)
(397,63,0)
(43,112,0)
(176,246,0)
(273,76,0)
(179,63,0)
(293,153,0)
(399,334,0)
(149,250,0)
(392,46,0)
(187,179,0)
(40,127,0)
(369,260,0)
(341,6,0)
(183,421,0)
(94,242,0)
(76,21,0)
(201,241,0)
(333,79,0)
(427,376,0)
(10,231,0)
(424,90,0)
(297,95,0)
(2,48,0)
(381,413,0)
(356,211,0)
(120,133,0)
(339,89,0)
(99,133,0)
(246,93,0)
(149,241,0)
(260,127,0)
(87,166,0)
(267,24,0)
(377,7,0)
(72,374,0)
(372,127,0)
(241,401,0)
(51,209,0)
(109,103,0)
(384,127,0)
(87,105,0)
(329,393,0)
(401,214,0)
(326,68,0)
(323,401,0)
(144,376,0)
(28,127,0)
(328,413,0)
(396,300,0)
(238,144,0)
(202,214,0)
(301,373,0)
(89,417,0)
(282,251,0)
(225,170,0)
(12,47,0)
(265,320,0)
(412,168,0)
(25,52,0)
(421,85,0)
(21,76,0)
(63,110,0)
(1,411,0)
(322,185,0)
(171,228,0)
(350,191,0)
(306,68,0)
(411,4,0)
(295,172,0)
(250,149,0)
(100,127,0)
(388,75,0)
(234,355,0)
(198,371,0)
(222,7,0)
(58,28,0)
(298,179,0)
(83,112,0)
(103,109,0)
(66,37,0)
(2,156,0)
(244,363,0)
(233,301,0)
(292,47,0)
(74,208,0)
(196,374,0)
(370,422,0)
(402,302,0)
(126,427,0)
(259,411,0)
(31,384,0)
(207,24,0)
(374,196,0)
(264,127,0)
(303,378,0)
(358,87,0)
(343,109,0)
(79,342,0)
(255,16,0)
(153,75,0)
(148,211,0)
(24,190,0)
(180,166,0)
(246,376,0)
(16,28,0)
(159,127,0)
(395,281,0)
(272,303,0)
(326,206,0)
(399,53,0)
(410,154,0)
(410,378,0)
(78,229,0)
(121,399,0)
(179,262,0)
(28,332,0)
(43,156,0)
(281,395,0)
(163,144,0)
(124,232,0)
(353,333,0)
(14,246,0)
(71,250,0)
(95,422,0)
(300,12,0)
(276,379,0)
(303,272,0)
(355,127,0)
(24,141,0)
(135,287,0)
(413,127,0)
(300,231,0)
(85,68,0)
(284,323,0)
(309,264,0)
(426,172,0)
(385,371,0)
(251,326,0)
(139,76,0)
(418,53,0)
(144,127,0)
(368,331,0)
(326,257,0)
(223,418,0)
(415,82,0)
(210,415,0)
(53,399,0)
(105,127,0)
(250,241,0)
(417,127,0)
(18,154,0)
(150,85,0)
(85,421,0)
(154,311,0)
(374,127,0)
(274,217,0)
(137,290,0)
(265,322,0)
(266,363,0)
(153,211,0)
(64,182,0)
(379,254,0)
(387,24,0)
(260,371,0)
(345,190,0)
(352,127,0)
(378,155,0)
(96,374,0)
(38,28,0)
(144,40,0)
(311,154,0)
(204,108,0)
(357,17,0)
(47,292,0)
(147,127,0)
(108,376,0)
(215,411,0)
(63,127,0)
(37,133,0)
(390,172,0)
(287,417,0)
(144,163,0)
(232,422,0)
(391,127,0)
(111,290,0)
(321,334,0)
(152,217,0)
(17,170,0)
(332,364,0)
(8,94,0)
(26,336,0)
(421,68,0)
(175,228,0)
(163,40,0)
(166,87,0)
(307,324,0)
(189,401,0)
(230,424,0)
(40,146,0)
(286,84,0)
(123,401,0)
(216,152,0)
(360,250,0)
(236,250,0)
(68,127,0)
(83,127,0)
(141,24,0)
(228,72,0)
(349,246,0)
(268,146,0)
(161,152,0)
(138,318,0)
(188,134,0)
(206,326,0)
(281,290,0)
(93,290,0)
(84,315,0)
(23,51,0)
(35,192,0)
(290,93,0)
(155,378,0)
(85,127,0)
(270,413,0)
(383,403,0)
(381,254,0)
(413,254,0)
(296,228,0)
(253,89,0)
(287,337,0)
(199,53,0)
(61,355,0)
(289,127,0)
(384,418,0)
(152,216,0)
(172,141,0)
(80,401,0)
(112,43,0)
(312,206,0)
(146,40,0)
(342,127,0)
(32,170,0)
(52,133,0)
(52,37,0)
(208,153,0)
(411,17,0)
(409,424,0)
(16,332,0)
(181,127,0)
(154,410,0)
(262,179,0)
(119,228,0)
(401,189,0)
(104,182,0)
(81,57,0)
(308,101,0)
(365,72,0)
(15,246,0)
(330,235,0)
(340,56,0)
(178,413,0)
(302,107,0)
(27,399,0)
(181,424,0)
(347,65,0)
(82,127,0)
(221,355,0)
(416,144,0)
(186,179,0)
(274,112,0)
(7,222,0)
(44,93,0)
(122,326,0)
(218,181,0)
(407,52,0)
(336,127,0)
(228,376,0)
(246,127,0)
(46,127,0)
(250,376,0)
(334,324,0)
(12,300,0)
(84,286,0)
(167,393,0)
(205,395,0)
(102,262,0)
(361,387,0)
(337,287,0)
(398,127,0)
(185,57,0)
(411,376,0)
(220,52,0)
(160,273,0)
(283,196,0)
(384,376,0)
(338,79,0)
(65,376,0)
(305,384,0)
(334,399,0)
(427,211,0)
(239,170,0)
(311,8,0)
(424,258,0)
(133,127,0)
(44,246,0)
(414,264,0)
(275,101,0)
(290,281,0)
(235,127,0)
(112,83,0)
(75,153,0)
(86,329,0)
(224,368,0)
(256,323,0)
(386,107,0)
(422,222,0)
(37,52,0)
(380,209,0)
(404,368,0)
(410,362,0)
(297,355,0)
(316,291,0)
(41,399,0)
(60,94,0)
(319,228,0)
(254,127,0)
(229,399,0)
(291,371,0)
(427,148,0)
(376,127,0)
(294,44,0)
(56,101,0)
(208,114,0)
(59,110,0)
(317,84,0)
(113,196,0)
(413,381,0)
(84,317,0)
(158,85,0)
(279,85,0)
(13,148,0)
(110,63,0)
(134,379,0)
(77,302,0)
(354,265,0)
(197,8,0)
(165,127,0)
(288,384,0)
(143,257,0)
(247,114,0)
(20,181,0)
(132,286,0)
(142,355,0)
(376,65,0)
(193,7,0)
(418,384,0)
(217,274,0)
(384,53,0)
(212,384,0)
(118,146,0)
(209,21,0)
(9,355,0)
(335,153,0)
(351,415,0)
(173,424,0)
(371,198,0)
(364,332,0)
(413,376,0)
(52,127,0)
(164,28,0)
(318,379,0)
(249,163,0)
(355,95,0)
(389,57,0)
(179,376,0)
(129,168,0)
(222,422,0)
(117,110,0)
(240,254,0)
(133,99,0)
(379,318,0)
(49,427,0)
(45,146,0)
(179,127,0)
(24,387,0)
(28,376,0)
(67,250,0)
(53,127,0)
(128,196,0)
(424,181,0)
(39,272,0)
(156,2,0)
(406,127,0)
(327,185,0)
(172,192,0)
(98,141,0)
(423,427,0)
(326,314,0)
(30,99,0)
(154,18,0)
(322,265,0)
(185,322,0)
(271,127,0)
(419,116,0)
(332,127,0)
(257,326,0)
(192,172,0)
(145,309,0)
(105,87,0)
(47,12,0)
(115,28,0)
(209,51,0)
(57,389,0)
(101,127,0)
(393,127,0)
(254,379,0)
(0,257,0)
(366,170,0)
(424,269,0)
(169,324,0)
(362,410,0)
(92,4,0)
(261,40,0)
(151,127,0)
(68,326,0)
(168,190,0)
(140,144,0)
(72,228,0)
(315,84,0)
(246,44,0)
(172,376,0)
(194,6,0)
(344,172,0)
(320,265,0)
(411,127,0)
(231,237,0)
(417,287,0)
(219,24,0)
(355,297,0)
(62,217,0)
(408,427,0)
(422,232,0)
(211,127,0)
(401,241,0)
(114,208,0)
(363,127,0)
(8,311,0)
(95,127,0)
(191,127,0)
(177,401,0)
(148,427,0)
(313,329,0)
(69,376,0)
(116,110,0)
(141,127,0)
(76,273,0)
(428,246,0)
(346,315,0)
(182,403,0)
(227,146,0)
(399,229,0)
(401,323,0)
(373,301,0)
(325,114,0)
(19,2,0)
(314,326,0)
(228,127,0)
(263,297,0)
(252,144,0)
(241,127,0)
(242,94,0)
(162,260,0)
(52,376,0)
(73,281,0)
(6,272,0)
(4,411,0)
(228,374,0)
(94,8,0)
(362,127,0)
(157,179,0)
(231,300,0)
(280,411,0)
(54,336,0)
(42,127,0)
(378,410,0)
(153,208,0)
(172,127,0)
(88,395,0)
(272,6,0)
(4,17,0)
(6,341,0)
(262,63,0)
(265,354,0)
(190,168,0)
(342,79,0)
(174,273,0)
(101,275,0)
(371,127,0)
(217,152,0)
(28,16,0)
(243,144,0)
(48,2,0)
(348,172,0)
(50,153,0)
(85,376,0)
(245,233,0)
(285,222,0)
(34,85,0)
(324,334,0)
(299,332,0)
(355,376,0)
(405,177,1)
(154,311,1)
(15,14,1)
(172,192,1)
(322,185,1)
(68,326,1)
(218,144,1)
(250,376,1)
(351,417,1)
(267,190,1)
(23,76,1)
(85,376,1)
(41,334,1)
(123,201,1)
(60,378,1)
(262,63,1)
(122,306,1)
(238,40,1)
(295,344,1)
(364,299,1)
(384,53,1)
(206,312,1)
(319,296,1)
(358,166,1)
(199,427,1)
(139,273,1)
(367,89,1)
(356,179,1)
(357,246,1)
(347,248,1)
(37,66,1)
(215,70,1)
(419,59,1)
(355,297,1)
(188,318,1)
(78,27,1)
(86,82,1)
(268,45,1)
(35,348,1)
(281,73,1)
(276,240,1)
(404,224,1)
(130,233,1)
(119,175,1)
(421,183,1)
(196,128,1)
(98,355,1)
(152,216,1)
(320,265,1)
(266,136,1)
(410,378,1)
(426,141,1)
(228,72,1)
(101,275,1)
(44,294,1)
(414,309,1)
(131,187,1)
(161,43,1)
(378,303,1)
(11,241,1)
(284,123,1)
(287,135,1)
(246,44,1)
(204,136,1)
(339,264,1)
(348,390,1)
(303,272,1)
(350,291,1)
(79,333,1)
(312,251,1)
(164,58,1)
(95,422,1)
(325,74,1)
(285,370,1)
(94,60,1)
(291,316,1)
(315,346,1)
(408,423,1)
(298,157,1)
(233,245,1)
(349,15,1)
(283,113,1)
(259,280,1)
(160,174,1)
(338,333,1)
(327,57,1)
(274,217,1)
(3,52,1)
(210,351,1)
(4,17,1)
(223,375,1)
(87,358,1)
(265,354,1)
(66,425,1)
(134,188,1)
(97,283,1)
(266,108,1)
(153,75,1)
(277,360,1)
(142,221,1)
(273,160,1)
(144,163,1)
(211,153,1)
(195,145,1)
(153,208,1)
(374,196,1)
(30,120,1)
(203,328,1)
(359,413,1)
(117,397,1)
(397,85,1)
(109,103,1)
(28,376,1)
(326,251,1)
(16,332,1)
(103,55,1)
(144,376,1)
(156,213,1)
(200,384,1)
(105,87,1)
(110,116,1)
(213,2,1)
(51,23,1)
(209,380,1)
(427,148,1)
(106,278,1)
(241,401,1)
(411,17,1)
(140,238,1)
(400,181,1)
(57,389,1)
(43,156,1)
(9,142,1)
(47,12,1)
(84,286,1)
(69,83,1)
(99,30,1)
(263,234,1)
(294,176,1)
(16,255,1)
(329,313,1)
(89,253,1)
(396,231,1)
(313,86,1)
(133,99,1)
(392,336,1)
(350,42,1)
(421,68,1)
(44,93,1)
(1,259,1)
(306,107,1)
(49,408,1)
(111,137,1)
(45,118,1)
(331,91,1)
(362,410,1)
(175,319,1)
(24,190,1)
(2,48,1)
(129,345,1)
(296,171,1)
(360,67,1)
(321,121,1)
(309,195,1)
(245,109,1)
(382,407,1)
(102,298,1)
(260,371,1)
(72,365,1)
(163,40,1)
(227,268,1)
(280,17,1)
(239,225,1)
(88,359,1)
(19,362,1)
(145,172,1)
(113,96,1)
(424,258,1)
(422,232,1)
(26,54,1)
(370,200,1)
(76,139,1)
(388,50,1)
(264,414,1)
(340,36,1)
(350,394,1)
(373,109,1)
(326,206,1)
(413,254,1)
(353,235,1)
(165,320,1)
(399,334,1)
(305,212,1)
(40,146,1)
(311,8,1)
(149,277,1)
(224,393,1)
(301,233,1)
(61,9,1)
(108,204,1)
(290,111,1)
(424,269,1)
(299,363,1)
(186,63,1)
(411,4,1)
(13,22,1)
(38,184,1)
(326,257,1)
(192,35,1)
(92,215,1)
(126,49,1)
(361,207,1)
(384,418,1)
(427,376,1)
(146,227,1)
(304,206,1)
(85,421,1)
(240,331,1)
(205,88,1)
(198,385,1)
(108,376,1)
(247,325,1)
(333,353,1)
(416,252,1)
(31,53,1)
(368,404,1)
(150,68,1)
(172,141,1)
(323,256,1)
(202,189,1)
(324,169,1)
(124,106,1)
(14,93,1)
(191,350,1)
(17,170,1)
(424,173,1)
(135,367,1)
(222,7,1)
(385,56,1)
(162,191,1)
(326,314,1)
(63,110,1)
(28,16,1)
(27,41,1)
(369,260,1)
(148,211,1)
(413,376,1)
(8,197,1)
(410,154,1)
(163,249,1)
(72,374,1)
(363,244,1)
(0,122,1)
(190,168,1)
(229,78,1)
(173,409,1)
(87,166,1)
(91,368,1)
(424,90,1)
(254,379,1)
(64,104,1)
(34,158,1)
(137,281,1)
(412,129,1)
(253,339,1)
(136,376,1)
(183,420,1)
(275,308,1)
(371,198,1)
(81,47,1)
(52,376,1)
(154,18,1)
(39,6,1)
(114,247,1)
(77,402,1)
(379,134,1)
(58,38,1)
(346,105,1)
(287,337,1)
(62,152,1)
(314,304,1)
(286,132,1)
(185,57,1)
(79,338,1)
(418,53,1)
(93,290,1)
(185,327,1)
(184,332,1)
(109,343,1)
(21,76,1)
(6,194,1)
(300,231,1)
(279,34,1)
(281,395,1)
(250,149,1)
(217,152,1)
(376,65,1)
(375,305,1)
(171,374,1)
(158,150,1)
(243,416,1)
(379,318,1)
(194,165,1)
(282,226,1)
(308,400,1)
(84,315,1)
(232,124,1)
(250,241,1)
(300,396,1)
(317,84,1)
(344,426,1)
(278,222,1)
(231,10,1)
(57,81,1)
(149,241,1)
(187,186,1)
(256,284,1)
(228,376,1)
(230,218,1)
(176,428,1)
(21,209,1)
(365,119,1)
(80,323,1)
(355,376,1)
(29,400,1)
(24,387,1)
(418,223,1)
(345,219,1)
(308,20,1)
(138,276,1)
(291,371,1)
(244,266,1)
(336,26,1)
(226,257,1)
(174,403,1)
(52,37,1)
(231,237,1)
(181,424,1)
(141,24,1)
(125,254,1)
(272,39,1)
(401,214,1)
(383,182,1)
(366,357,1)
(70,1,1)
(425,220,1)
(76,273,1)
(355,95,1)
(82,5,1)
(401,189,1)
(115,164,1)
(192,141,1)
(121,199,1)
(65,347,1)
(212,288,1)
(168,412,1)
(214,202,1)
(50,335,1)
(390,295,1)
(393,167,1)
(189,405,1)
(148,13,1)
(394,371,1)
(71,11,1)
(7,377,1)
(52,133,1)
(2,19,1)
(128,97,1)
(225,366,1)
(118,261,1)
(217,62,1)
(387,361,1)
(270,203,1)
(32,239,1)
(413,381,1)
(246,93,1)
(75,388,1)
(143,0,1)
(53,399,1)
(246,376,1)
(257,143,1)
(297,263,1)
(334,324,1)
(120,250,1)
(293,356,1)
(332,364,1)
(74,293,1)
(320,47,1)
(401,323,1)
(255,115,1)
(409,230,1)
(235,330,1)
(381,310,1)
(36,101,1)
(55,3,1)
(73,395,1)
(335,208,1)
(407,25,1)
(37,133,1)
(197,94,1)
(249,243,1)
(169,307,1)
(343,103,1)
(56,340,1)
(234,61,1)
(193,285,1)
(85,68,1)
(220,382,1)
(378,155,1)
(251,282,1)
(403,383,1)
(46,392,1)
(261,228,1)
(132,315,1)
(177,80,1)
(104,373,1)
(260,162,1)
(318,138,1)
(386,302,1)
(290,281,1)
(6,341,1)
(420,279,1)
(301,130,1)
(208,114,1)
(96,411,1)
(342,79,1)
(427,211,1)
(22,126,1)
(411,376,1)
(201,28,1)
(112,43,1)
(402,21,1)
(381,254,1)
(310,270,1)
(156,2,1)
(207,267,1)
(262,102,1)
(116,419,1)
(179,63,1)
(182,64,1)
(172,376,1)
(221,95,1)
(166,180,1)
(385,36,1)
(144,40,1)
(179,262,1)
(25,133,1)
(67,236,1)
(272,6,1)
(328,178,1)
(8,94,1)
(415,210,1)
(112,274,1)
(47,292,1)
(170,32,1)
(174,373,1)
(152,161,1)
(107,386,1)
(380,51,1)
(179,376,1)
(178,125,1)
(302,77,1)
(384,376,1)
(417,287,1)
(373,301,1)
(252,140,1)
(167,329,1)
(422,222,1)
(219,98,1)
(12,300,1)
(83,112,1)
(59,117,1)
(395,205,1)
(428,349,1)
(377,193,1)
(20,181,1)
(94,242,1)
(316,394,1)
(20,29,1)
(56,101,1)
(248,69,1)
(399,229,1)
(288,31,1)
(5,415,1)
(157,131,1)
(423,211,1)
(297,95,1)
(307,321,1)
(306,21,1)
(236,71,1)
(209,51,1)
(4,92,1)
(28,332,1)
(180,342,1)
(10,317,1)
(228,374,1)
(330,46,1)
(265,322,1)
(107,21,2)
(64,373,2)
(154,311,2)
(101,275,2)
(424,269,2)
(84,315,2)
(16,332,2)
(380,76,2)
(300,231,2)
(209,76,2)
(179,63,2)
(192,141,2)
(332,364,2)
(246,376,2)
(108,136,2)
(355,376,2)
(320,47,2)
(384,418,2)
(6,341,2)
(399,334,2)
(144,40,2)
(302,21,2)
(208,114,2)
(20,400,2)
(355,297,2)
(228,72,2)
(172,141,2)
(417,287,2)
(245,109,2)
(179,262,2)
(290,281,2)
(93,290,2)
(326,314,2)
(179,376,2)
(21,209,2)
(413,376,2)
(63,110,2)
(144,163,2)
(24,387,2)
(301,109,2)
(51,76,2)
(383,373,2)
(401,214,2)
(8,94,2)
(211,153,2)
(12,300,2)
(355,95,2)
(4,17,2)
(410,378,2)
(384,376,2)
(231,237,2)
(24,190,2)
(84,286,2)
(374,196,2)
(274,217,2)
(153,208,2)
(326,257,2)
(95,422,2)
(2,48,2)
(156,2,2)
(410,154,2)
(172,192,2)
(378,303,2)
(250,241,2)
(334,324,2)
(222,7,2)
(381,254,2)
(402,21,2)
(52,133,2)
(303,272,2)
(326,206,2)
(190,168,2)
(130,109,2)
(373,301,2)
(144,376,2)
(68,326,2)
(110,116,2)
(133,99,2)
(246,44,2)
(411,4,2)
(112,274,2)
(185,57,2)
(72,374,2)
(250,376,2)
(28,376,2)
(384,53,2)
(386,21,2)
(260,371,2)
(362,410,2)
(153,75,2)
(287,337,2)
(85,421,2)
(427,148,2)
(422,222,2)
(401,189,2)
(403,373,2)
(281,395,2)
(56,36,2)
(85,68,2)
(165,320,2)
(53,399,2)
(401,323,2)
(163,40,2)
(79,333,2)
(40,146,2)
(87,166,2)
(47,292,2)
(21,76,2)
(23,76,2)
(418,53,2)
(424,258,2)
(291,394,2)
(250,149,2)
(29,400,2)
(37,133,2)
(43,156,2)
(320,265,2)
(424,90,2)
(297,95,2)
(56,101,2)
(378,155,2)
(326,251,2)
(52,37,2)
(311,8,2)
(17,170,2)
(413,254,2)
(317,84,2)
(181,424,2)
(342,79,2)
(47,12,2)
(373,109,2)
(112,43,2)
(316,394,2)
(379,318,2)
(371,198,2)
(28,332,2)
(340,36,2)
(233,109,2)
(427,211,2)
(287,135,2)
(94,242,2)
(254,379,2)
(141,24,2)
(182,373,2)
(265,354,2)
(44,93,2)
(228,376,2)
(411,17,2)
(411,376,2)
(52,376,2)
(241,401,2)
(246,93,2)
(57,389,2)
(209,51,2)
(105,87,2)
(172,376,2)
(149,241,2)
(301,233,2)
(262,63,2)
(379,134,2)
(291,371,2)
(399,229,2)
(109,103,2)
(104,373,2)
(427,376,2)
(20,181,2)
(152,216,2)
(204,136,2)
(83,112,2)
(108,376,2)
(413,381,2)
(228,374,2)
(369,260,2)
(422,232,2)
(322,185,2)
(85,376,2)
(28,16,2)
(376,65,2)
(77,21,2)
(421,68,2)
(272,6,2)
(148,211,2)
(265,322,2)
(154,18,2)
(76,273,2)
(217,152,2)
-----------------------------------
(0,PTL_NI_MATCHING)
(1,MPI_ERR_OTHER)
(2,(ptl_iovec_t*)
(3,desired)
(4,MPID_nem_ptl_strerror(ret)
(5,0x0)
(6,(ptl_iovec_t*)
(7,PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(8,((MPID_IOV*)
(9,MPI_ERR_OTHER)
(10,0)
(11,ret)
(12,&(((ptl_iovec_t*)
(13,ret)
(14,ret)
(15,mpi_errno)
(16,MPID_nem_ptl_strerror(ret)
(17,ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt)
(18,void*)
(19,0)
(20,MPIU_ERR_POP(mpi_errno)
(21,desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS")
(22,"**ptlptalloc %s")
(23,"PTL_LIM_MAX_EQS")
(24,PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt)
(25,ret)
(26,MPI_SUCCESS)
(27,PTL_PT_ANY)
(28,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlinit", "**ptlinit %s", MPID_nem_ptl_strerror(ret)
(29,mpi_errno)
(30,MPIDI_nem_ptl_ni)
(31,ret)
(32,MPIDI_nem_ptl_rpt_pt)
(33,md)
(34,MPI_ERR_OTHER)
(35,ret)
(36,mpi_errno)
(37,MPID_nem_ptl_strerror(ret)
(38,mpi_errno)
(39,iov_len)
(40,ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY)
(41,MPIDI_nem_ptl_eq)
(42,goto fn_exit;)
(43,sizeof(((ptl_iovec_t*)
(44,MPID_nem_ptl_strerror(ret)
(45,MPIDI_nem_ptl_eq)
(46,MPIDI_STATE_DECL(MPID_STATE_PTL_INIT)
(47,(void*)
(48,ptl_iovec_t*)
(49,MPI_ERR_OTHER)
(50,PTL_PT_ANY)
(51,getenv("PTL_LIM_MAX_EQS")
(52,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlnifini", "**ptlnifini %s", MPID_nem_ptl_strerror(ret)
(53,ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt)
(54,mpi_errno)
(55,max_unexpected_headers)
(56,MPIU_ERR_POP(mpi_errno)
(57,(MPID_IOV*)
(58,MPI_ERR_OTHER)
(59,EQ_COUNT)
(60,0)
(61,"**ptlptalloc")
(62,MPID_IOV_LEN)
(63,ret = PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq)
(64,max_unexpected_headers)
(65,MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched)
(66,ret)
(67,"**ptlniinit")
(68,ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,\n\\n                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni)
(69,mpi_errno)
(70,"**ptlptalloc")
(71,mpi_errno)
(72,MPID_nem_ptl_strerror(ret)
(73,size)
(74,PTL_PT_ONLY_USE_ONCE)
(75,&MPIDI_nem_ptl_pt)
(76,desired.max_eqs < EQ_COUNT)
(77,max_eqs)
(78,MPIDI_nem_ptl_get_pt)
(79,sizeof(MPID_nem_ptl_vc_area)
(80,PTL_PID_ANY)
(81,0)
(82,md.options = 0x0)
(83,MPIU_Assert(sizeof(((ptl_iovec_t*)
(84,sizeof(ptl_iovec_t)
(85,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret)
(86,md)
(87,sizeof(MPID_nem_ptl_req_area)
(88,MPIDI_Process)
(89,md.length)
(90,char **bc_val_p)
(91,PTL_CT_NONE)
(92,ret)
(93,ret = MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info)
(94,(MPID_IOV*)
(95,ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt)
(96,ret)
(97,MPIDI_nem_ptl_get_pt)
(98,ret)
(99,PtlNIFini(MPIDI_nem_ptl_ni)
(100,if (mpi_errno)
(101,mpi_errno = MPID_nem_ptl_poll_init()
(102,ret)
(103,desired.max_unexpected_headers)
(104,desired)
(105,MPIU_Assert(sizeof(MPID_nem_ptl_req_area)
(106,PTL_PT_ANY)
(107,desired.max_eqs = EQ_COUNT)
(108,MPIU_ERR_POP(mpi_errno)
(109,desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT)
(110,PtlEQAlloc(MPIDI_nem_ptl_ni, EQ_COUNT, &MPIDI_nem_ptl_eq)
(111,get_target_info)
(112,sizeof(((ptl_iovec_t*)
(113,MPIDI_nem_ptl_ni)
(114,PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(115,"**ptlinit %s")
(116,&MPIDI_nem_ptl_eq)
(117,MPIDI_nem_ptl_ni)
(118,MPIDI_nem_ptl_ni)
(119,"**ptlptalloc %s")
(120,ret)
(121,MPIDI_nem_ptl_ni)
(122,PTL_IFACE_DEFAULT)
(123,PTL_IFACE_DEFAULT)
(124,MPIDI_nem_ptl_control_pt)
(125,ret)
(126,"**ptlptalloc")
(127,)
(128,PTL_PT_ANY)
(129,PTL_PT_ONLY_TRUNCATE)
(130,NULL)
(131,MPI_ERR_OTHER)
(132,MPID_IOV)
(133,ret = PtlNIFini(MPIDI_nem_ptl_ni)
(134,&MPIDI_nem_ptl_global_md)
(135,-1)
(136,mpi_errno)
(137,5)
(138,md)
(139,EQ_COUNT)
(140,mpi_errno)
(141,ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_rpt_pt)
(142,mpi_errno)
(143,PTL_NI_PHYSICAL)
(144,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(145,md)
(146,MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_control_pt, PTL_PT_ANY)
(147,if (mpi_errno)
(148,MPID_nem_ptl_strerror(ret)
(149,MPID_nem_ptl_strerror(ret)
(150,ret)
(151,if (desired.max_eqs < EQ_COUNT && getenv("PTL_LIM_MAX_EQS")
(152,(MPID_IOV*)
(153,PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_pt)
(154,(void*)
(155,void*)
(156,((ptl_iovec_t*)
(157,"**ptleqalloc")
(158,mpi_errno)
(159,if (mpi_errno)
(160,max_eqs)
(161,0)
(162,mpi_errno)
(163,MPID_nem_ptl_strerror(ret)
(164,"**ptlinit")
(165,MPIU_Assert(((void*)
(166,sizeof(MPID_nem_ptl_req_area)
(167,MPIDI_nem_ptl_eq)
(168,PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(169,PTL_PT_FLOWCTRL)
(170,MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_pt, MPIDI_nem_ptl_rpt_pt)
(171,ret)
(172,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(173,val_max_sz_p)
(174,desired)
(175,"**ptlptalloc")
(176,"**ptlniinit %s")
(177,NULL)
(178,mpi_errno)
(179,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptleqalloc", "**ptleqalloc %s", MPID_nem_ptl_strerror(ret)
(180,MPID_nem_ptl_req_area)
(181,mpi_errno = get_business_card(pg_rank, bc_val_p, val_max_sz_p)
(182,desired.max_unexpected_headers)
(183,ret)
(184,ret)
(185,((MPID_IOV*)
(186,ret)
(187,mpi_errno)
(188,MPIDI_nem_ptl_global_md)
(189,&desired)
(190,PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(191,MPIDI_FUNC_EXIT(MPID_STATE_PTL_INIT)
(192,MPID_nem_ptl_strerror(ret)
(193,PTL_PT_ONLY_TRUNCATE)
(194,0)
(195,start)
(196,MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY)
(197,MPID_IOV_LEN)
(198,MPID_nem_ptl_nm_init()
(199,ret)
(200,ret)
(201,ret)
(202,MPIDI_nem_ptl_ni)
(203,"**ptlmdbind")
(204,mpi_errno)
(205,my_pg)
(206,&MPIDI_nem_ptl_ni_limits)
(207,PTL_PT_ANY)
(208,PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(209,getenv("PTL_LIM_MAX_EQS")
(210,options)
(211,ret = PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_pt)
(212,MPI_ERR_OTHER)
(213,iov_len)
(214,&MPIDI_nem_ptl_ni)
(215,"**ptlptalloc %s")
(216,MPID_IOV*)
(217,((MPID_IOV*)
(218,mpi_errno)
(219,MPIDI_nem_ptl_ni)
(220,"**ptlnifini")
(221,ret)
(222,PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(223,ret)
(224,md)
(225,MPIDI_nem_ptl_eq)
(226,PTL_PID_ANY)
(227,PTL_PT_ANY)
(228,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(229,&MPIDI_nem_ptl_get_pt)
(230,pg_rank)
(231,(ptl_iovec_t*)
(232,&MPIDI_nem_ptl_control_pt)
(233,getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS")
(234,"**ptlptalloc %s")
(235,MPIDI_FUNC_ENTER(MPID_STATE_PTL_INIT)
(236,MPI_ERR_OTHER)
(237,ptl_iovec_t*)
(238,ret)
(239,MPIDI_nem_ptl_pt)
(240,ret)
(241,ret = PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,\n\\n                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni)
(242,MPID_IOV*)
(243,"**ptlptalloc %s")
(244,MPID_nem_ptl_anysource_improbe)
(245,"PTL_LIM_MAX_UNEXPECTED_HEADERS")
(246,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret)
(247,PTL_PT_FLOWCTRL)
(248,MPID_nem_ptl_anysource_posted)
(249,ret)
(250,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlniinit", "**ptlniinit %s", MPID_nem_ptl_strerror(ret)
(251,&desired)
(252,MPI_ERR_OTHER)
(253,length)
(254,ret = PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md)
(255,ret)
(256,PTL_NI_PHYSICAL)
(257,PTL_NI_MATCHING | PTL_NI_PHYSICAL)
(258,int pg_rank)
(259,mpi_errno)
(260,return mpi_errno;)
(261,ret)
(262,MPID_nem_ptl_strerror(ret)
(263,ret)
(264,md.start = 0)
(265,(void*)
(266,MPIDI_Anysource_improbe_fn)
(267,MPIDI_nem_ptl_eq)
(268,MPIDI_nem_ptl_control_pt)
(269,int *val_max_sz_p)
(270,"**ptlmdbind %s")
(271,fn_exit:)
(272,((ptl_iovec_t*)
(273,desired.max_eqs)
(274,sizeof(((MPID_IOV*)
(275,MPID_nem_ptl_poll_init()
(276,MPIDI_nem_ptl_ni)
(277,ret)
(278,MPIDI_nem_ptl_eq)
(279,"**ptlniinit")
(280,ret)
(281,MPIDI_Process.my_pg->size)
(282,desired)
(283,MPIDI_nem_ptl_eq)
(284,PTL_NI_MATCHING)
(285,PTL_PT_ONLY_USE_ONCE)
(286,sizeof(MPID_IOV)
(287,(ptl_size_t)
(288,mpi_errno)
(289,ret)
(290,MPID_nem_ptl_rptl_init(MPIDI_Process.my_pg->size, 5, get_target_info)
(291,MPIU_ERR_POP(mpi_errno)
(292,void*)
(293,MPIDI_nem_ptl_ni)
(294,ret)
(295,MPI_ERR_OTHER)
(296,mpi_errno)
(297,MPID_nem_ptl_strerror(ret)
(298,"**ptleqalloc %s")
(299,ret)
(300,((ptl_iovec_t*)
(301,getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS")
(302,desired.max_eqs)
(303,&(((ptl_iovec_t*)
(304,MPIDI_nem_ptl_ni)
(305,"**ptlptalloc")
(306,ret)
(307,PTL_PT_ONLY_TRUNCATE)
(308,mpi_errno)
(309,md.start)
(310,ret)
(311,&(((MPID_IOV*)
(312,MPIDI_nem_ptl_ni_limits)
(313,eq_handle)
(314,&MPIDI_nem_ptl_ni)
(315,sizeof(ptl_iovec_t)
(316,mpi_errno)
(317,MPIU_Assert(sizeof(ptl_iovec_t)
(318,&md)
(319,MPI_ERR_OTHER)
(320,((void*)
(321,PTL_PT_ONLY_USE_ONCE)
(322,&(((MPID_IOV*)
(323,PTL_NI_MATCHING | PTL_NI_PHYSICAL)
(324,PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(325,PTL_PT_ONLY_TRUNCATE)
(326,PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,\n\\n                    PTL_PID_ANY, &desired, &MPIDI_nem_ptl_ni_limits, &MPIDI_nem_ptl_ni)
(327,MPID_IOV_BUF)
(328,MPI_ERR_OTHER)
(329,md.eq_handle)
(330,MPID_STATE_PTL_INIT)
(331,md.ct_handle = PTL_CT_NONE)
(332,ret = PtlInit()
(333,sizeof(MPID_nem_ptl_vc_area)
(334,PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL)
(335,MPIDI_nem_ptl_eq)
(336,mpi_errno = MPI_SUCCESS)
(337,ptl_size_t)
(338,MPID_NEM_VC_NETMOD_AREA_LEN)
(339,md)
(340,mpi_errno)
(341,ptl_iovec_t*)
(342,MPIU_Assert(sizeof(MPID_nem_ptl_vc_area)
(343,UNEXPECTED_HDR_COUNT)
(344,mpi_errno)
(345,PTL_PT_ONLY_USE_ONCE)
(346,ptl_iovec_t)
(347,MPID_nem_ptl_anysource_matched)
(348,"**ptlptalloc %s")
(349,MPI_ERR_OTHER)
(350,MPID_STATE_PTL_INIT)
(351,md)
(352,if (desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS")
(353,MPID_nem_ptl_vc_area)
(354,void*)
(355,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(356,ret)
(357,ret)
(358,MPID_NEM_REQ_NETMOD_AREA_LEN)
(359,ret)
(360,"**ptlniinit %s")
(361,MPIDI_nem_ptl_rpt_pt)
(362,MPIU_Assert(((void*)
(363,MPIDI_Anysource_improbe_fn = MPID_nem_ptl_anysource_improbe)
(364,PtlInit()
(365,ret)
(366,MPIDI_nem_ptl_ni)
(367,1)
(368,md.ct_handle)
(369,RET)
(370,MPIDI_nem_ptl_ni)
(371,mpi_errno = MPID_nem_ptl_nm_init()
(372,if (mpi_errno)
(373,desired.max_unexpected_headers < UNEXPECTED_HDR_COUNT && getenv("PTL_LIM_MAX_UNEXPECTED_HEADERS")
(374,ret = MPID_nem_ptl_rptl_ptinit(MPIDI_nem_ptl_ni, MPIDI_nem_ptl_eq, MPIDI_nem_ptl_get_pt, PTL_PT_ANY)
(375,"**ptlptalloc %s")
(376,mpi_errno = MPIDI_CH3I_Register_anysource_notification(MPID_nem_ptl_anysource_posted, MPID_nem_ptl_anysource_matched)
(377,PTL_PT_FLOWCTRL)
(378,(void*)
(379,PtlMDBind(MPIDI_nem_ptl_ni, &md, &MPIDI_nem_ptl_global_md)
(380,NULL)
(381,MPID_nem_ptl_strerror(ret)
(382,MPI_ERR_OTHER)
(383,UNEXPECTED_HDR_COUNT)
(384,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(385,mpi_errno)
(386,EQ_COUNT)
(387,&MPIDI_nem_ptl_rpt_pt)
(388,MPIDI_nem_ptl_pt)
(389,MPID_IOV*)
(390,"**ptlptalloc")
(391,desired)
(392,MPID_STATE_PTL_INIT)
(393,md.eq_handle = MPIDI_nem_ptl_eq)
(394,mpi_errno)
(395,MPIDI_Process.my_pg)
(396,iov_base)
(397,ret)
(398,mpi_errno)
(399,PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_get_pt)
(400,mpi_errno)
(401,PtlNIInit(PTL_IFACE_DEFAULT, PTL_NI_MATCHING | PTL_NI_PHYSICAL,\n\\n                    PTL_PID_ANY, NULL, &desired, &MPIDI_nem_ptl_ni)
(402,desired)
(403,desired.max_unexpected_headers = UNEXPECTED_HDR_COUNT)
(404,ct_handle)
(405,desired)
(406,fn_fail:)
(407,mpi_errno)
(408,mpi_errno)
(409,bc_val_p)
(410,((void*)
(411,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(412,PTL_PT_FLOWCTRL)
(413,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlmdbind", "**ptlmdbind %s", MPID_nem_ptl_strerror(ret)
(414,0)
(415,md.options)
(416,"**ptlptalloc")
(417,md.length = (ptl_size_t)
(418,MPID_nem_ptl_strerror(ret)
(419,MPIDI_nem_ptl_eq)
(420,"**ptlniinit %s")
(421,MPID_nem_ptl_strerror(ret)
(422,PtlPTAlloc(MPIDI_nem_ptl_ni, PTL_PT_ONLY_USE_ONCE | PTL_PT_ONLY_TRUNCATE | PTL_PT_FLOWCTRL, MPIDI_nem_ptl_eq,\n\\n                     PTL_PT_ANY, &MPIDI_nem_ptl_control_pt)
(423,ret)
(424,get_business_card(pg_rank, bc_val_p, val_max_sz_p)
(425,"**ptlnifini %s")
(426,ret)
(427,MPIU_ERR_CHKANDJUMP1(ret, mpi_errno, MPI_ERR_OTHER, "**ptlptalloc", "**ptlptalloc %s", MPID_nem_ptl_strerror(ret)
(428,"**ptlniinit")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^