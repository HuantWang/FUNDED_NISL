-----label-----
1
-----code-----
static size_t badSource(size_t data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
16,17
16,18
16,19
18,19
19,20
21,22
23,24
23,25
23,26
24,25
24,26
25,26
25,27
25,28
25,29
26,27
28,29
30,31
32,33
34,35
36,37
37,38
38,39
38,40
39,40
41,42
41,43
41,44
41,45
42,43
44,45
46,47
49,50
50,51
51,52
51,53
52,53
55,56
56,57
-----nextToken-----
3,5,8,10,15,17,20,22,27,29,31,33,35,40,43,45,47,48,53,54,57
-----computeFrom-----
24,25
24,26
38,39
38,40
-----guardedBy-----
29,45
35,47
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static size_t badSource(size_t data){    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
static size_t
size_t
badSource(size_t data)
badSource
size_t data
size_t
size_t
data
data
{    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    return data;}
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
return data;
data
data
-----joern-----
(26,8,0)
(7,1,0)
(19,1,0)
(12,16,0)
(1,8,0)
(9,6,0)
(13,1,0)
(11,22,0)
(21,9,0)
(3,17,0)
(17,24,0)
(17,6,0)
(22,1,0)
(20,9,0)
(17,22,0)
(0,2,0)
(8,9,0)
(18,12,0)
(10,2,0)
(23,5,0)
(2,8,0)
(2,5,0)
(22,24,0)
(4,8,0)
(15,17,0)
(22,14,0)
(25,2,0)
(1,22,0)
(5,2,0)
(3,17,1)
(17,22,1)
(1,19,1)
(17,24,1)
(22,1,1)
(0,8,1)
(2,10,1)
(8,26,1)
(15,22,1)
(5,2,1)
(5,23,1)
(2,8,1)
(13,7,1)
(18,5,1)
(17,15,1)
(19,13,1)
(7,11,1)
(12,18,1)
(1,8,1)
(23,2,1)
(25,0,1)
(10,25,1)
(15,12,1)
(11,5,1)
(22,24,1)
(26,4,1)
(7,5,2)
(13,5,2)
(11,5,2)
(17,24,2)
(12,5,2)
(17,22,2)
(2,8,2)
(22,1,2)
(3,17,2)
(22,5,2)
(5,2,2)
(1,5,2)
(22,24,2)
(1,8,2)
(18,5,2)
(19,5,2)
-----------------------------------
(0,inputBuffer)
(1,strtoul(inputBuffer, NULL, 0)
(2,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(3,RET)
(4,inputBuffer)
(5,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(6,)
(7,inputBuffer)
(8,inputBuffer[CHAR_ARRAY_SIZE] = "")
(9,)
(10,stdin)
(11,data)
(12,printLine("fgets()
(13,NULL)
(14,)
(15,data)
(16,)
(17,return data;)
(18,"fgets()
(19,0)
(20,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(21,inputBuffer)
(22,data = strtoul(inputBuffer, NULL, 0)
(23,NULL)
(24,size_t data)
(25,CHAR_ARRAY_SIZE)
(26,"")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^