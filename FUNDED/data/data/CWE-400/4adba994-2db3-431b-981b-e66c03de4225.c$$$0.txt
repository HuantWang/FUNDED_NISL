-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_02_bad()
{
    if(1)
    {
        {
            int * data = (int *)malloc(100*sizeof(int));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            data[0] = 5;
            printIntLine(data[0]);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (int *)realloc(data, (130000)*sizeof(int));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                data[0] = 10;
                printIntLine(data[0]);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
13,14
13,15
13,16
16,17
17,18
17,19
18,19
18,20
20,21
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
31,32
31,33
32,33
32,34
33,34
35,36
37,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
63,65
64,65
64,66
66,67
68,69
68,70
68,71
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
86,89
87,88
88,89
88,90
89,90
89,91
90,91
94,95
95,96
95,97
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
-----nextToken-----
2,4,7,12,14,15,19,21,24,26,29,30,34,36,41,43,48,49,50,54,57,58,62,65,67,70,72,75,78,79,83,85,91,92,93,97,100,101,105,107
-----computeFrom-----
25,26
25,27
32,33
32,34
45,46
45,47
60,61
60,62
73,74
73,75
81,82
81,83
88,89
88,90
-----guardedBy-----
83,107
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_02_bad(){    if(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_02_bad()
CWE401_Memory_Leak__malloc_realloc_int_02_bad
{    if(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }}
if(1)    {        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
1
{        {            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }    }
{            int * data = (int *)malloc(100*sizeof(int));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            data[0] = 5;            printIntLine(data[0]);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (int *)realloc(data, (130000)*sizeof(int));            if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }        }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)            {                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                data[0] = 10;                printIntLine(data[0]);                free(data);            }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(1,13,0)
(18,46,0)
(9,34,0)
(38,8,0)
(35,11,0)
(27,6,0)
(20,23,0)
(37,8,0)
(31,7,0)
(43,25,0)
(46,18,0)
(10,15,0)
(24,49,0)
(40,19,0)
(15,26,0)
(19,49,0)
(34,29,0)
(34,11,0)
(22,18,0)
(58,11,0)
(53,34,0)
(12,58,0)
(5,4,0)
(42,8,0)
(26,15,0)
(8,6,0)
(30,58,0)
(19,29,0)
(27,58,0)
(55,37,0)
(15,4,0)
(37,11,0)
(44,46,0)
(34,24,0)
(32,2,0)
(8,32,0)
(54,38,0)
(2,32,0)
(56,51,0)
(58,8,0)
(39,17,0)
(6,3,0)
(58,27,0)
(43,29,0)
(56,57,0)
(16,51,0)
(26,32,0)
(47,6,0)
(43,46,0)
(48,7,0)
(46,43,0)
(25,43,0)
(50,24,0)
(36,38,0)
(18,13,0)
(51,56,0)
(29,6,0)
(45,6,0)
(29,43,0)
(32,26,0)
(13,18,0)
(14,29,0)
(11,6,0)
(53,49,0)
(23,29,0)
(32,8,0)
(21,37,0)
(4,15,0)
(33,34,0)
(0,6,0)
(7,29,0)
(41,23,0)
(34,53,0)
(46,8,0)
(23,24,0)
(8,32,1)
(40,53,1)
(19,40,1)
(22,44,1)
(5,10,1)
(28,19,1)
(20,7,1)
(28,52,1)
(34,9,1)
(56,51,1)
(42,52,1)
(41,20,1)
(13,1,1)
(46,8,1)
(23,41,1)
(19,29,1)
(1,22,1)
(54,36,1)
(11,35,1)
(26,15,1)
(50,23,1)
(10,42,1)
(34,29,1)
(27,58,1)
(35,37,1)
(32,2,1)
(15,4,1)
(28,7,1)
(43,25,1)
(58,11,1)
(36,8,1)
(34,24,1)
(16,38,1)
(37,21,1)
(58,8,1)
(43,46,1)
(7,29,1)
(32,26,1)
(55,56,1)
(30,12,1)
(37,8,1)
(46,18,1)
(31,29,1)
(9,33,1)
(21,55,1)
(38,8,1)
(44,14,1)
(14,27,1)
(53,34,1)
(38,54,1)
(24,50,1)
(29,43,1)
(51,16,1)
(58,30,1)
(23,29,1)
(33,24,1)
(4,5,1)
(55,38,1)
(48,31,1)
(18,13,1)
(12,11,1)
(7,48,1)
(34,11,1)
(27,52,2)
(31,52,2)
(44,52,2)
(58,8,2)
(23,29,2)
(58,52,2)
(34,29,2)
(34,7,2)
(37,8,2)
(50,7,2)
(19,7,2)
(22,52,2)
(43,46,2)
(43,52,2)
(21,52,2)
(20,7,2)
(41,7,2)
(18,52,2)
(14,52,2)
(55,52,2)
(5,52,2)
(34,24,2)
(38,8,2)
(46,18,2)
(24,7,2)
(10,52,2)
(35,52,2)
(27,58,2)
(56,38,2)
(15,52,2)
(16,38,2)
(13,52,2)
(46,8,2)
(40,7,2)
(15,4,2)
(18,13,2)
(8,52,2)
(19,29,2)
(53,7,2)
(32,52,2)
(33,7,2)
(9,7,2)
(42,52,2)
(32,2,2)
(48,52,2)
(7,52,2)
(36,52,2)
(26,52,2)
(58,11,2)
(56,51,2)
(8,32,2)
(46,52,2)
(34,11,2)
(51,38,2)
(43,25,2)
(30,52,2)
(12,52,2)
(11,52,2)
(4,52,2)
(23,7,2)
(29,52,2)
(54,52,2)
(38,52,2)
(37,52,2)
(29,43,2)
(53,34,2)
(7,29,2)
(1,52,2)
(26,15,2)
(32,26,2)
-----------------------------------
(0,data)
(1,int)
(2,int *)
(3,)
(4,sizeof(int)
(5,int)
(6,)
(7,data != NULL)
(8,* data = (int *)
(9,0)
(10,100)
(11,data[0] = 5)
(12,data)
(13,sizeof(int)
(14,data)
(15,100*sizeof(int)
(16,1)
(17,)
(18,(130000)
(19,free(data)
(20,data)
(21,0)
(22,130000)
(23,data[0])
(24,data[0] = 10)
(25,int *)
(26,malloc(100*sizeof(int)
(27,printIntLine(data[0])
(28,RET)
(29,data = (int *)
(30,0)
(31,data)
(32,(int *)
(33,data)
(34,data[0])
(35,5)
(36,data)
(37,data[0])
(38,data == NULL)
(39,if(1)
(40,data)
(41,0)
(42,data)
(43,(int *)
(44,data)
(45,if (data == NULL)
(46,realloc(data, (130000)
(47,if (data != NULL)
(48,NULL)
(49,)
(50,10)
(51,-1)
(52,1)
(53,printIntLine(data[0])
(54,NULL)
(55,data)
(56,exit(-1)
(57,)
(58,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^