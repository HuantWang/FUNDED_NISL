-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(1)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
21,22
21,23
22,23
25,26
25,27
27,28
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
37,38
37,39
37,40
37,41
38,39
39,40
39,41
40,41
43,44
43,45
44,45
46,47
46,48
47,48
47,49
48,49
51,52
53,54
54,55
56,57
57,58
58,59
58,60
59,60
-----nextToken-----
2,4,8,10,14,16,18,23,24,26,32,34,36,41,42,45,49,50,52,55,60,61
-----computeFrom-----
12,13
12,14
21,22
21,23
39,40
39,41
43,44
43,45
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }    if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        /* FIX: Use a relatively small number */        count = 20;    }
1
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(1)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
1
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(19,6,0)
(15,16,0)
(34,33,0)
(34,0,0)
(33,10,0)
(1,5,0)
(33,34,0)
(25,18,0)
(6,3,0)
(13,20,0)
(34,5,0)
(24,10,0)
(14,31,0)
(22,15,0)
(17,10,0)
(5,12,0)
(6,31,0)
(30,18,0)
(23,13,0)
(26,3,0)
(11,24,0)
(4,33,0)
(32,5,0)
(34,6,0)
(18,13,0)
(3,6,0)
(2,34,0)
(9,31,0)
(7,10,0)
(0,34,0)
(8,31,0)
(28,13,0)
(33,34,1)
(29,6,1)
(24,10,1)
(34,0,1)
(27,21,1)
(22,33,1)
(27,33,1)
(4,24,1)
(34,6,1)
(24,11,1)
(5,1,1)
(21,5,1)
(34,5,1)
(25,21,1)
(33,10,1)
(2,4,1)
(21,29,1)
(11,15,1)
(7,18,1)
(15,22,1)
(6,3,1)
(34,2,1)
(3,26,1)
(30,25,1)
(18,30,1)
(10,17,1)
(17,7,1)
(26,19,1)
(1,32,1)
(4,10,1)
(32,29,1)
(18,21,2)
(33,21,2)
(25,21,2)
(2,33,2)
(33,33,2)
(34,21,2)
(34,6,2)
(4,33,2)
(5,29,2)
(17,21,2)
(7,21,2)
(24,33,2)
(1,29,2)
(2,21,2)
(15,33,2)
(30,21,2)
(24,10,2)
(22,33,2)
(4,21,2)
(34,33,2)
(34,0,2)
(34,5,2)
(6,3,2)
(33,34,2)
(10,21,2)
(32,29,2)
(11,33,2)
(33,10,2)
-----------------------------------
(0,size_t)
(1,20)
(2,count)
(3,-1)
(4,i)
(5,count = 20)
(6,count = -1)
(7,i)
(8,count)
(9,if(1)
(10,i = 0)
(11,i)
(12,)
(13,)
(14,if(1)
(15,printLine("Hello")
(16,)
(17,0)
(18,i = 0)
(19,count)
(20,)
(21,1)
(22,"Hello")
(23,i)
(24,i++)
(25,i)
(26,1)
(27,RET)
(28,for (i = 0; i < (size_t)
(29,1)
(30,0)
(31,)
(32,count)
(33,i < (size_t)
(34,(size_t)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^