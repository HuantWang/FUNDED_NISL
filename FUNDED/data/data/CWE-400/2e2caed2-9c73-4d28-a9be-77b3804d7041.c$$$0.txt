-----label-----
0
-----code-----
static void expand(char *as, boolean_t check_ncargs)
{
    register char *cs;
    register char *sgpathp, *oldcs;
    struct stat stb;

    if (globerr)
	return;
    sgpathp = gpathp;
    cs = as;
    if (*cs == '~' && gpathp == gpath) {
	addpath('~');
	for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)
	    addpath(*cs++);
	if (!*cs || *cs == '/') {
	    if (gpathp != gpath + 1) {
		*gpathp = 0;
		if (gethdir(gpath + 1))
		    globerr = "Unknown user name after ~";
		/* memmove used as strings overlap */
		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);
	    }
	    else
		(void) strlcpy(gpath, home, BUFSIZ);
	    gpathp = strend(gpath);
	}
    }
    while (!any(*cs, globchars)) {
	if (*cs == 0) {
	    if (!globbed)
		Gcat(gpath, "", check_ncargs);
	    else if (stat(gpath, &stb) >= 0) {
		Gcat(gpath, "", check_ncargs);
		globcnt++;
	    }
	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)
	      globerr = "Arguments too long";
	    goto endit;
	}
	addpath(*cs++);
    }
    oldcs = cs;
    while (cs > as && *cs != '/')
	cs--, gpathp--;
    if (*cs == '/')
	cs++, gpathp++;
    *gpathp = 0;
    if (*oldcs == '{') {
	(void) execbrc(cs, ((char *) 0));
	return;
    }
    matchdir(cs, check_ncargs);
  endit:
    gpathp = sgpathp;
    *gpathp = 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
16,17
17,18
17,19
19,20
19,21
22,23
23,24
23,25
23,26
25,26
25,27
28,29
28,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
38,39
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
54,56
55,56
55,57
56,57
57,58
60,61
60,62
61,62
63,64
65,66
65,67
65,68
66,67
67,68
67,69
68,69
71,72
71,73
71,74
72,73
73,74
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
81,82
82,83
84,85
84,86
85,86
87,88
88,89
90,91
90,92
91,92
92,93
95,96
96,97
96,98
97,98
99,100
100,101
101,102
103,104
103,105
104,105
104,106
105,106
106,107
107,108
109,110
109,111
110,111
111,112
114,115
114,116
115,116
115,117
115,118
116,117
116,118
117,118
119,120
119,121
120,121
123,124
123,125
123,126
124,125
125,126
125,127
126,127
127,128
130,131
130,132
131,132
131,133
132,133
134,135
134,136
135,136
138,139
139,140
139,141
140,141
143,144
144,145
144,146
145,146
145,147
148,149
148,150
148,151
148,152
149,150
151,152
153,154
153,155
154,155
157,158
157,159
158,159
158,160
159,160
161,162
161,163
162,163
166,167
167,168
167,169
168,169
168,170
171,172
171,173
171,174
171,175
172,173
174,175
176,177
178,179
180,181
181,182
181,183
182,183
184,185
184,186
185,186
187,188
189,190
189,191
190,191
191,192
191,193
191,194
192,193
194,195
195,196
197,198
199,200
199,201
200,201
200,202
201,202
201,203
202,203
203,204
206,207
206,208
206,209
207,208
207,209
207,210
208,209
209,210
211,212
212,213
212,214
212,215
212,216
213,214
215,216
218,219
220,221
220,222
221,222
221,223
222,223
222,224
222,225
223,224
225,226
227,228
228,229
231,232
231,233
232,233
233,234
233,235
233,236
233,237
234,235
236,237
239,240
241,242
242,243
243,244
245,246
245,247
246,247
246,248
247,248
248,249
248,250
249,250
251,252
253,254
255,256
256,257
256,258
257,258
260,261
262,263
263,264
263,265
264,265
266,267
267,268
268,269
270,271
271,272
271,273
272,273
274,275
276,277
276,278
277,278
277,279
278,279
278,280
279,280
281,282
283,284
283,285
284,285
285,286
288,289
289,290
289,291
290,291
291,292
293,294
294,295
296,297
296,298
297,298
297,299
298,299
299,300
302,303
303,304
303,305
304,305
305,306
307,308
308,309
310,311
311,312
311,313
312,313
313,314
316,317
316,318
317,318
317,319
318,319
319,320
322,323
322,324
323,324
324,325
324,326
325,326
325,327
328,329
328,330
328,331
329,330
331,332
333,334
334,335
334,336
335,336
335,337
337,338
341,342
342,343
342,344
342,345
343,344
345,346
347,348
349,350
349,351
351,352
352,353
352,354
353,354
355,356
357,358
358,359
358,360
359,360
360,361
-----nextToken-----
2,4,6,8,9,12,14,18,20,21,24,26,27,29,30,34,36,39,40,44,46,50,52,58,59,62,64,69,70,75,80,83,86,89,93,94,98,102,108,112,113,118,121,122,128,129,133,136,137,141,142,146,147,150,152,155,156,160,163,164,165,169,170,173,175,177,179,183,186,188,193,196,198,204,205,210,214,216,217,219,224,226,229,230,235,237,238,240,244,250,252,254,258,259,261,265,269,273,275,280,282,286,287,292,295,300,301,306,309,314,315,320,321,326,327,330,332,336,338,339,340,344,346,348,350,354,356,361,362
-----computeFrom-----
42,43
42,44
48,49
48,50
54,55
54,56
55,56
55,57
60,61
60,62
76,77
76,78
77,78
77,79
90,91
90,92
104,105
104,106
109,110
109,111
116,117
116,118
119,120
119,121
125,126
125,127
134,135
134,136
139,140
139,141
153,154
153,155
157,158
157,159
161,162
161,163
181,182
181,183
201,202
201,203
221,222
221,223
246,247
246,248
256,257
256,258
271,272
271,273
277,278
277,279
278,279
278,280
283,284
283,285
297,298
297,299
311,312
311,313
317,318
317,319
352,353
352,354
358,359
358,360
-----guardedBy-----
58,112
64,188
62,183
121,163
118,128
226,237
300,306
-----guardedByNegation-----
121,175
-----lastLexicalUse-----
121,175
-----jump-----
121,175
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;IfStatement;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;WhileStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;ExpressionList;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void expand(char *as, boolean_t check_ncargs){    register char *cs;    register char *sgpathp, *oldcs;    struct stat stb;    if (globerr)	return;    sgpathp = gpathp;    cs = as;    if (*cs == '~' && gpathp == gpath) {	addpath('~');	for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)	    addpath(*cs++);	if (!*cs || *cs == '/') {	    if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);	    gpathp = strend(gpath);	}    }    while (!any(*cs, globchars)) {	if (*cs == 0) {	    if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    goto endit;	}	addpath(*cs++);    }    oldcs = cs;    while (cs > as && *cs != '/')	cs--, gpathp--;    if (*cs == '/')	cs++, gpathp++;    *gpathp = 0;    if (*oldcs == '{') {	(void) execbrc(cs, ((char *) 0));	return;    }    matchdir(cs, check_ncargs);  endit:    gpathp = sgpathp;    *gpathp = 0;}
static void
expand(char *as, boolean_t check_ncargs)
expand
char *as
char
*as
*
as
boolean_t check_ncargs
boolean_t
boolean_t
check_ncargs
check_ncargs
{    register char *cs;    register char *sgpathp, *oldcs;    struct stat stb;    if (globerr)	return;    sgpathp = gpathp;    cs = as;    if (*cs == '~' && gpathp == gpath) {	addpath('~');	for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)	    addpath(*cs++);	if (!*cs || *cs == '/') {	    if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);	    gpathp = strend(gpath);	}    }    while (!any(*cs, globchars)) {	if (*cs == 0) {	    if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    goto endit;	}	addpath(*cs++);    }    oldcs = cs;    while (cs > as && *cs != '/')	cs--, gpathp--;    if (*cs == '/')	cs++, gpathp++;    *gpathp = 0;    if (*oldcs == '{') {	(void) execbrc(cs, ((char *) 0));	return;    }    matchdir(cs, check_ncargs);  endit:    gpathp = sgpathp;    *gpathp = 0;}
register char *cs;
register char *cs;
register char
*cs
*
cs
register char *sgpathp, *oldcs;
register char *sgpathp, *oldcs;
register char
*sgpathp
*
sgpathp
*oldcs
*
oldcs
struct stat stb;
struct stat stb;
struct stat
stat
stb
stb
if (globerr)	return;
globerr
globerr
return;
sgpathp = gpathp;
sgpathp = gpathp
sgpathp
sgpathp
gpathp
gpathp
cs = as;
cs = as
cs
cs
as
as
if (*cs == '~' && gpathp == gpath) {	addpath('~');	for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)	    addpath(*cs++);	if (!*cs || *cs == '/') {	    if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);	    gpathp = strend(gpath);	}    }
*cs == '~' && gpathp == gpath
*cs == '~'
*cs
cs
cs
'~'
gpathp == gpath
gpathp
gpathp
gpath
gpath
{	addpath('~');	for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)	    addpath(*cs++);	if (!*cs || *cs == '/') {	    if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);	    gpathp = strend(gpath);	}    }
addpath('~');
addpath('~')
addpath
addpath
'~'
for (cs++; letter(*cs) || digit(*cs) || *cs == '-';)	    addpath(*cs++);
cs++;
cs++
cs
cs
letter(*cs) || digit(*cs) || *cs == '-'
letter(*cs) || digit(*cs)
letter(*cs)
letter
letter
*cs
cs
cs
digit(*cs)
digit
digit
*cs
cs
cs
*cs == '-'
*cs
cs
cs
'-'
addpath(*cs++);
addpath(*cs++)
addpath
addpath
*cs++
cs++
cs
cs
if (!*cs || *cs == '/') {	    if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);	    gpathp = strend(gpath);	}
!*cs || *cs == '/'
!*cs
*cs
cs
cs
*cs == '/'
*cs
cs
cs
'/'
{	    if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);	    gpathp = strend(gpath);	}
if (gpathp != gpath + 1) {		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }	    else		(void) strlcpy(gpath, home, BUFSIZ);
gpathp != gpath + 1
gpathp
gpathp
gpath + 1
gpath
gpath
1
{		*gpathp = 0;		if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";		/* memmove used as strings overlap */		(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);	    }
*gpathp = 0;
*gpathp = 0
*gpathp
gpathp
gpathp
0
if (gethdir(gpath + 1))		    globerr = "Unknown user name after ~";
gethdir(gpath + 1)
gethdir
gethdir
gpath + 1
gpath
gpath
1
globerr = "Unknown user name after ~";
globerr = "Unknown user name after ~"
globerr
globerr
"Unknown user name after ~"
(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1);
(void) memmove(gpath, gpath + 1, strlen(gpath + 1) + 1)
void
void

memmove(gpath, gpath + 1, strlen(gpath + 1) + 1)
memmove
memmove
gpath
gpath
gpath + 1
gpath
gpath
1
strlen(gpath + 1) + 1
strlen(gpath + 1)
strlen
strlen
gpath + 1
gpath
gpath
1
1
(void) strlcpy(gpath, home, BUFSIZ);
(void) strlcpy(gpath, home, BUFSIZ)
void
void

strlcpy(gpath, home, BUFSIZ)
strlcpy
strlcpy
gpath
gpath
home
home
BUFSIZ
BUFSIZ
gpathp = strend(gpath);
gpathp = strend(gpath)
gpathp
gpathp
strend(gpath)
strend
strend
gpath
gpath
while (!any(*cs, globchars)) {	if (*cs == 0) {	    if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    goto endit;	}	addpath(*cs++);    }
!any(*cs, globchars)
any(*cs, globchars)
any
any
*cs
cs
cs
globchars
globchars
{	if (*cs == 0) {	    if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    goto endit;	}	addpath(*cs++);    }
if (*cs == 0) {	    if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    goto endit;	}
*cs == 0
*cs
cs
cs
0
{	    if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }	    if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";	    goto endit;	}
if (!globbed)		Gcat(gpath, "", check_ncargs);	    else if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }
!globbed
globbed
globbed
Gcat(gpath, "", check_ncargs);
Gcat(gpath, "", check_ncargs)
Gcat
Gcat
gpath
gpath
""
check_ncargs
check_ncargs
if (stat(gpath, &stb) >= 0) {		Gcat(gpath, "", check_ncargs);		globcnt++;	    }
stat(gpath, &stb) >= 0
stat(gpath, &stb)
stat
stat
gpath
gpath
&stb
stb
stb
0
{		Gcat(gpath, "", check_ncargs);		globcnt++;	    }
Gcat(gpath, "", check_ncargs);
Gcat(gpath, "", check_ncargs)
Gcat
Gcat
gpath
gpath
""
check_ncargs
check_ncargs
globcnt++;
globcnt++
globcnt
globcnt
if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)	      globerr = "Arguments too long";
limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT
limits[GLOB_INDEX_STAT]++
limits[GLOB_INDEX_STAT]
limits
limits
GLOB_INDEX_STAT
GLOB_INDEX_STAT
GLOB_LIMIT_STAT
GLOB_LIMIT_STAT
globerr = "Arguments too long";
globerr = "Arguments too long"
globerr
globerr
"Arguments too long"
goto endit;
endit
addpath(*cs++);
addpath(*cs++)
addpath
addpath
*cs++
cs++
cs
cs
oldcs = cs;
oldcs = cs
oldcs
oldcs
cs
cs
while (cs > as && *cs != '/')	cs--, gpathp--;
cs > as && *cs != '/'
cs > as
cs
cs
as
as
*cs != '/'
*cs
cs
cs
'/'
cs--, gpathp--;
cs--, gpathp--
cs--
cs
cs
gpathp--
gpathp
gpathp
if (*cs == '/')	cs++, gpathp++;
*cs == '/'
*cs
cs
cs
'/'
cs++, gpathp++;
cs++, gpathp++
cs++
cs
cs
gpathp++
gpathp
gpathp
*gpathp = 0;
*gpathp = 0
*gpathp
gpathp
gpathp
0
if (*oldcs == '{') {	(void) execbrc(cs, ((char *) 0));	return;    }
*oldcs == '{'
*oldcs
oldcs
oldcs
'{'
{	(void) execbrc(cs, ((char *) 0));	return;    }
(void) execbrc(cs, ((char *) 0));
(void) execbrc(cs, ((char *) 0))
void
void

execbrc(cs, ((char *) 0))
execbrc
execbrc
cs
cs
((char *) 0)
(char *) 0
char *
char
*
*
0
return;
matchdir(cs, check_ncargs);
matchdir(cs, check_ncargs)
matchdir
matchdir
cs
cs
check_ncargs
check_ncargs
endit:    gpathp = sgpathp;
endit
gpathp = sgpathp;
gpathp = sgpathp
gpathp
gpathp
sgpathp
sgpathp
*gpathp = 0;
*gpathp = 0
*gpathp
gpathp
gpathp
0
-----joern-----
(90,84,0)
(128,141,0)
(62,68,0)
(22,35,0)
(31,200,0)
(34,6,0)
(37,85,0)
(74,54,0)
(25,35,0)
(94,48,0)
(96,60,0)
(180,127,0)
(104,19,0)
(155,35,0)
(51,72,0)
(128,148,0)
(191,9,0)
(69,145,0)
(65,124,0)
(186,145,0)
(185,25,0)
(120,53,0)
(6,35,0)
(140,99,0)
(38,177,0)
(55,37,0)
(143,111,0)
(53,120,0)
(165,184,0)
(10,128,0)
(136,76,0)
(82,4,0)
(182,8,0)
(138,184,0)
(123,68,0)
(151,44,0)
(168,76,0)
(23,42,0)
(11,4,0)
(25,185,0)
(162,111,0)
(114,68,0)
(88,128,0)
(113,68,0)
(163,35,0)
(117,161,0)
(192,35,0)
(13,68,0)
(130,1,0)
(36,114,0)
(159,134,0)
(33,60,0)
(118,42,0)
(103,193,0)
(106,52,0)
(26,32,0)
(89,174,0)
(5,176,0)
(42,23,0)
(60,35,0)
(44,151,0)
(198,43,0)
(133,132,0)
(136,24,0)
(63,183,0)
(35,68,0)
(104,185,0)
(61,80,0)
(43,122,0)
(116,112,0)
(80,153,0)
(99,58,0)
(125,35,0)
(44,92,0)
(57,146,0)
(47,35,0)
(152,188,0)
(170,193,0)
(188,68,0)
(3,24,0)
(58,39,0)
(70,24,0)
(41,200,0)
(71,63,0)
(169,124,0)
(140,35,0)
(39,58,0)
(84,35,0)
(177,181,0)
(8,199,0)
(42,35,0)
(58,99,0)
(193,103,0)
(27,25,0)
(163,40,0)
(23,65,0)
(112,114,0)
(72,40,0)
(126,4,0)
(203,68,0)
(95,138,0)
(21,85,0)
(20,161,0)
(78,181,0)
(102,53,0)
(91,6,0)
(131,68,0)
(147,134,0)
(2,190,0)
(139,90,0)
(24,68,0)
(32,154,0)
(146,188,0)
(187,199,0)
(8,132,0)
(59,90,0)
(145,69,0)
(49,84,0)
(189,155,0)
(15,192,0)
(137,195,0)
(145,186,0)
(191,143,0)
(190,35,0)
(87,126,0)
(190,167,0)
(99,140,0)
(17,63,0)
(186,35,0)
(167,190,0)
(158,174,0)
(52,106,0)
(4,82,0)
(199,184,0)
(129,146,0)
(115,174,0)
(76,136,0)
(73,21,0)
(46,142,0)
(183,35,0)
(146,68,0)
(201,148,0)
(30,161,0)
(77,127,0)
(6,91,0)
(90,139,0)
(139,43,0)
(164,140,0)
(172,68,0)
(195,138,0)
(167,69,0)
(110,35,0)
(0,163,0)
(100,19,0)
(29,136,0)
(155,162,0)
(142,192,0)
(199,187,0)
(28,39,0)
(12,120,0)
(98,186,0)
(103,202,0)
(21,35,0)
(60,68,0)
(156,200,0)
(183,63,0)
(154,32,0)
(50,8,0)
(194,91,0)
(67,44,0)
(93,176,0)
(84,90,0)
(101,99,0)
(86,52,0)
(124,65,0)
(155,80,0)
(135,162,0)
(175,110,0)
(185,104,0)
(16,68,0)
(14,183,0)
(199,8,0)
(66,128,0)
(196,176,0)
(119,82,0)
(22,124,0)
(193,35,0)
(79,48,0)
(83,39,0)
(63,71,0)
(197,145,0)
(75,52,0)
(153,80,0)
(65,194,0)
(109,22,0)
(179,151,0)
(181,68,0)
(45,92,0)
(54,157,0)
(174,141,0)
(8,50,0)
(161,130,0)
(132,147,0)
(147,132,0)
(144,50,0)
(97,154,0)
(60,141,0)
(130,161,0)
(24,35,0)
(1,130,0)
(194,65,0)
(157,54,0)
(80,155,0)
(53,35,0)
(134,147,0)
(166,50,0)
(107,154,0)
(35,122,0)
(18,68,0)
(192,142,0)
(4,126,0)
(69,167,0)
(91,194,0)
(173,43,0)
(162,155,0)
(65,23,0)
(32,26,0)
(64,68,0)
(56,7,0)
(43,139,0)
(149,31,0)
(81,26,0)
(124,22,0)
(202,103,0)
(105,106,0)
(43,35,0)
(162,135,0)
(150,134,0)
(108,54,0)
(121,201,0)
(171,68,0)
(132,8,0)
(178,188,0)
(2,194,1)
(162,135,1)
(4,126,1)
(55,21,1)
(42,35,1)
(186,35,1)
(130,161,1)
(80,61,1)
(50,166,1)
(101,140,1)
(29,181,1)
(26,32,1)
(8,50,1)
(154,107,1)
(192,35,1)
(42,118,1)
(161,30,1)
(22,35,1)
(174,89,1)
(97,174,1)
(133,147,1)
(5,48,1)
(44,151,1)
(117,20,1)
(38,120,1)
(155,80,1)
(83,99,1)
(173,24,1)
(195,137,1)
(201,121,1)
(65,124,1)
(71,63,1)
(70,3,1)
(179,67,1)
(37,55,1)
(114,36,1)
(106,52,1)
(102,139,1)
(190,2,1)
(137,106,1)
(168,136,1)
(66,10,1)
(120,53,1)
(88,82,1)
(58,99,1)
(129,5,1)
(181,78,1)
(77,180,1)
(143,162,1)
(185,25,1)
(132,133,1)
(21,73,1)
(17,183,1)
(53,102,1)
(142,46,1)
(139,90,1)
(38,72,1)
(35,125,1)
(108,74,1)
(80,153,1)
(189,76,1)
(76,168,1)
(129,60,1)
(199,8,1)
(120,12,1)
(73,139,1)
(3,71,1)
(84,35,1)
(6,35,1)
(34,202,1)
(191,9,1)
(178,160,1)
(104,185,1)
(96,33,1)
(86,75,1)
(59,84,1)
(110,175,1)
(87,11,1)
(33,76,1)
(72,51,1)
(28,83,1)
(194,91,1)
(98,167,1)
(119,4,1)
(191,143,1)
(14,104,1)
(175,31,1)
(97,201,1)
(25,27,1)
(14,58,1)
(56,142,1)
(23,42,1)
(192,15,1)
(197,186,1)
(63,17,1)
(140,164,1)
(82,4,1)
(142,192,1)
(110,35,1)
(130,1,1)
(124,169,1)
(48,79,1)
(190,35,1)
(166,144,1)
(30,117,1)
(145,186,1)
(43,35,1)
(128,141,1)
(170,194,1)
(75,105,1)
(144,182,1)
(31,149,1)
(193,170,1)
(67,199,1)
(158,115,1)
(146,188,1)
(180,157,1)
(191,114,1)
(136,29,1)
(94,26,1)
(95,195,1)
(162,155,1)
(8,132,1)
(51,163,1)
(152,178,1)
(57,129,1)
(53,35,1)
(155,35,1)
(10,88,1)
(109,23,1)
(65,23,1)
(67,130,1)
(121,128,1)
(90,84,1)
(20,106,1)
(138,95,1)
(24,70,1)
(39,28,1)
(60,141,1)
(43,198,1)
(61,189,1)
(84,49,1)
(47,188,1)
(14,44,1)
(6,34,1)
(15,71,1)
(183,14,1)
(89,158,1)
(194,65,1)
(127,77,1)
(36,112,1)
(78,177,1)
(60,35,1)
(107,97,1)
(112,116,1)
(74,138,1)
(43,122,1)
(58,39,1)
(146,57,1)
(124,22,1)
(69,167,1)
(118,91,1)
(169,22,1)
(199,187,1)
(99,101,1)
(115,7,1)
(60,96,1)
(150,50,1)
(167,190,1)
(173,37,1)
(132,147,1)
(5,26,1)
(164,35,1)
(159,150,1)
(35,122,1)
(22,109,1)
(82,119,1)
(90,59,1)
(147,134,1)
(99,140,1)
(34,110,1)
(91,6,1)
(157,54,1)
(145,197,1)
(21,35,1)
(149,58,1)
(198,173,1)
(126,87,1)
(103,193,1)
(125,47,1)
(52,86,1)
(49,43,1)
(193,35,1)
(26,81,1)
(183,35,1)
(174,141,1)
(188,152,1)
(105,69,1)
(69,145,1)
(116,146,1)
(182,127,1)
(32,154,1)
(97,82,1)
(81,32,1)
(24,35,1)
(46,192,1)
(7,56,1)
(54,108,1)
(27,142,1)
(11,7,1)
(25,35,1)
(79,94,1)
(0,120,1)
(177,38,1)
(12,53,1)
(163,35,1)
(139,43,1)
(134,159,1)
(202,103,1)
(136,24,1)
(9,160,1)
(186,98,1)
(128,66,1)
(140,35,1)
(63,183,1)
(14,69,1)
(151,179,1)
(76,136,1)
(182,157,1)
(163,0,1)
(109,23,2)
(125,160,2)
(190,35,2)
(52,69,2)
(96,76,2)
(140,160,2)
(86,69,2)
(198,139,2)
(43,139,2)
(12,71,2)
(120,71,2)
(72,120,2)
(65,124,2)
(63,142,2)
(21,35,2)
(162,76,2)
(167,58,2)
(143,76,2)
(36,142,2)
(14,142,2)
(158,7,2)
(116,76,2)
(4,7,2)
(163,35,2)
(95,106,2)
(105,69,2)
(26,32,2)
(6,194,2)
(75,69,2)
(139,139,2)
(80,153,2)
(33,76,2)
(178,160,2)
(71,63,2)
(65,23,2)
(32,154,2)
(136,24,2)
(129,76,2)
(142,192,2)
(199,187,2)
(15,71,2)
(99,140,2)
(22,35,2)
(89,7,2)
(101,160,2)
(128,82,2)
(70,71,2)
(174,141,2)
(194,58,2)
(8,50,2)
(50,106,2)
(49,43,2)
(169,23,2)
(191,9,2)
(29,71,2)
(91,6,2)
(0,120,2)
(31,58,2)
(185,142,2)
(43,35,2)
(36,76,2)
(43,71,2)
(194,65,2)
(177,71,2)
(9,160,2)
(67,69,2)
(195,106,2)
(130,1,2)
(88,82,2)
(107,142,2)
(124,22,2)
(157,106,2)
(162,155,2)
(139,43,2)
(8,106,2)
(84,43,2)
(133,106,2)
(17,160,2)
(20,106,2)
(166,106,2)
(60,35,2)
(76,71,2)
(82,7,2)
(97,142,2)
(80,76,2)
(183,35,2)
(164,160,2)
(142,71,2)
(39,99,2)
(155,80,2)
(6,58,2)
(130,106,2)
(10,82,2)
(35,160,2)
(4,126,2)
(128,141,2)
(186,35,2)
(161,106,2)
(32,142,2)
(47,160,2)
(71,160,2)
(90,84,2)
(106,52,2)
(181,71,2)
(25,35,2)
(132,147,2)
(69,58,2)
(151,69,2)
(103,193,2)
(136,71,2)
(110,58,2)
(24,71,2)
(119,7,2)
(124,23,2)
(69,167,2)
(87,7,2)
(81,142,2)
(118,91,2)
(35,122,2)
(170,194,2)
(112,76,2)
(56,142,2)
(152,160,2)
(23,91,2)
(26,142,2)
(77,157,2)
(5,142,2)
(155,76,2)
(202,194,2)
(61,76,2)
(180,157,2)
(55,139,2)
(71,142,2)
(99,160,2)
(137,106,2)
(27,142,2)
(189,76,2)
(74,106,2)
(51,120,2)
(38,71,2)
(98,167,2)
(34,58,2)
(194,91,2)
(14,160,2)
(79,26,2)
(69,145,2)
(110,35,2)
(104,185,2)
(129,142,2)
(186,167,2)
(114,142,2)
(117,106,2)
(192,71,2)
(193,194,2)
(102,71,2)
(149,58,2)
(3,71,2)
(42,91,2)
(168,71,2)
(134,106,2)
(42,35,2)
(57,142,2)
(174,7,2)
(2,58,2)
(24,35,2)
(43,122,2)
(199,8,2)
(116,142,2)
(145,167,2)
(44,151,2)
(22,23,2)
(157,54,2)
(130,161,2)
(82,4,2)
(58,39,2)
(65,91,2)
(23,42,2)
(146,76,2)
(53,35,2)
(58,99,2)
(63,183,2)
(150,106,2)
(21,139,2)
(30,106,2)
(190,58,2)
(162,135,2)
(104,142,2)
(59,43,2)
(199,106,2)
(138,106,2)
(48,26,2)
(28,99,2)
(147,106,2)
(173,71,2)
(147,134,2)
(60,76,2)
(188,160,2)
(126,7,2)
(94,26,2)
(145,186,2)
(193,35,2)
(60,141,2)
(154,142,2)
(115,7,2)
(53,71,2)
(191,143,2)
(144,106,2)
(155,35,2)
(54,106,2)
(6,35,2)
(120,53,2)
(175,58,2)
(159,106,2)
(44,69,2)
(140,35,2)
(185,25,2)
(146,142,2)
(76,136,2)
(121,82,2)
(83,99,2)
(8,132,2)
(84,35,2)
(112,142,2)
(7,142,2)
(63,160,2)
(78,71,2)
(198,71,2)
(46,71,2)
(201,82,2)
(58,160,2)
(103,194,2)
(108,106,2)
(197,167,2)
(173,139,2)
(139,90,2)
(139,71,2)
(163,120,2)
(179,69,2)
(192,35,2)
(25,142,2)
(91,58,2)
(183,160,2)
(194,194,2)
(57,76,2)
(17,142,2)
(11,7,2)
(73,139,2)
(34,194,2)
(146,188,2)
(132,106,2)
(167,190,2)
(37,139,2)
(66,82,2)
(106,69,2)
(202,103,2)
(90,43,2)
(182,106,2)
(127,157,2)
(91,194,2)
(114,76,2)
(183,142,2)
-----------------------------------
(0,cs)
(1,void)
(2,cs)
(3,oldcs)
(4,stat(gpath, &stb)
(5,goto endit;)
(6,*cs)
(7,!globbed)
(8,memmove(gpath, gpath + 1, strlen(gpath + 1)
(9,return;)
(10,"")
(11,gpath)
(12,\'/\')
(13,while (!any(*cs, globchars)
(14,cs)
(15,cs)
(16,cs)
(17,globchars)
(18,if (*oldcs == \'{\')
(19,)
(20,gpath)
(21,cs--)
(22,*cs)
(23,digit(*cs)
(24,oldcs = cs)
(25,cs++)
(26,limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)
(27,cs)
(28,gpath)
(29,oldcs)
(30,BUFSIZ)
(31,addpath(\'~\')
(32,limits[GLOB_INDEX_STAT]++)
(33,cs)
(34,cs)
(35,cs = as)
(36,0)
(37,gpathp--)
(38,gpathp)
(39,gpathp == gpath)
(40,)
(41,if (!*cs || *cs == \'/\')
(42,*cs)
(43,cs > as)
(44,gpathp = strend(gpath)
(45,if (gpathp != gpath + 1)
(46,0)
(47,cs)
(48,globerr = "Arguments too long")
(49,cs)
(50,gpath + 1)
(51,gpathp)
(52,gpath + 1)
(53,*cs)
(54,gpath + 1)
(55,gpathp)
(56,globbed)
(57,sgpathp)
(58,*cs == \'~\' && gpathp == gpath)
(59,\'/\')
(60,matchdir(cs, check_ncargs)
(61,0)
(62,stb)
(63,any(*cs, globchars)
(64,if (*cs == \'~\' && gpathp == gpath)
(65,digit(*cs)
(66,check_ncargs)
(67,gpathp)
(68,)
(69,!*cs || *cs == \'/\')
(70,cs)
(71,!any(*cs, globchars)
(72,gpathp++)
(73,cs)
(74,gpath)
(75,gpath)
(76,*oldcs == \'{\')
(77,"Unknown user name after ~")
(78,0)
(79,"Arguments too long")
(80,(char *)
(81,GLOB_LIMIT_STAT)
(82,stat(gpath, &stb)
(83,gpathp)
(84,*cs)
(85,)
(86,1)
(87,stb)
(88,gpath)
(89,check_ncargs)
(90,*cs != \'/\')
(91,letter(*cs)
(92,)
(93,if (!globbed)
(94,globerr)
(95,0)
(96,check_ncargs)
(97,limits)
(98,cs)
(99,*cs == \'~\')
(100,if (*cs == 0)
(101,\'~\')
(102,cs)
(103,*cs++)
(104,addpath(*cs++)
(105,gpathp)
(106,gpathp != gpath + 1)
(107,GLOB_INDEX_STAT)
(108,1)
(109,cs)
(110,cs++)
(111,)
(112,*gpathp)
(113,if (*cs == \'/\')
(114,*gpathp = 0)
(115,gpath)
(116,gpathp)
(117,home)
(118,cs)
(119,0)
(120,*cs == \'/\')
(121,globcnt)
(122,char *as)
(123,endit:)
(124,*cs == \'-\')
(125,as)
(126,&stb)
(127,globerr = "Unknown user name after ~")
(128,Gcat(gpath, "", check_ncargs)
(129,gpathp)
(130,(void)
(131,while (cs > as && *cs != \'/\')
(132,strlen(gpath + 1)
(133,1)
(134,gpath + 1)
(135,void)
(136,*oldcs)
(137,gpathp)
(138,*gpathp = 0)
(139,cs > as && *cs != \'/\')
(140,*cs)
(141,boolean_t check_ncargs)
(142,*cs == 0)
(143,return;)
(144,gpath)
(145,*cs == \'/\')
(146,gpathp = sgpathp)
(147,strlen(gpath + 1)
(148,)
(149,\'~\')
(150,gpath)
(151,strend(gpath)
(152,gpathp)
(153,char *)
(154,limits[GLOB_INDEX_STAT])
(155,execbrc(cs, ((char *)
(156,for (cs++; letter(*cs)
(157,gethdir(gpath + 1)
(158,"")
(159,1)
(160,globerr)
(161,strlcpy(gpath, home, BUFSIZ)
(162,(void)
(163,cs++)
(164,cs)
(165,if (gethdir(gpath + 1)
(166,1)
(167,!*cs)
(168,\'{\')
(169,\'-\')
(170,cs)
(171,sgpathp)
(172,oldcs)
(173,cs)
(174,Gcat(gpath, "", check_ncargs)
(175,cs)
(176,)
(177,*gpathp)
(178,sgpathp)
(179,gpath)
(180,globerr)
(181,*gpathp = 0)
(182,gpath)
(183,*cs)
(184,)
(185,*cs++)
(186,*cs)
(187,void)
(188,sgpathp = gpathp)
(189,cs)
(190,*cs)
(191,RET)
(192,*cs)
(193,cs++)
(194,letter(*cs)
(195,*gpathp)
(196,if (limits[GLOB_INDEX_STAT]++ >= GLOB_LIMIT_STAT)
(197,\'/\')
(198,as)
(199,(void)
(200,)
(201,globcnt++)
(202,addpath(*cs++)
(203,if (globerr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^