-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_42_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    count = badSource(count);
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
27,28
28,29
28,30
29,30
31,32
31,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
75,76
75,77
75,78
75,79
76,77
77,78
77,79
78,79
81,82
81,83
82,83
84,85
84,86
85,86
85,87
86,87
89,90
91,92
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
100,101
102,103
102,104
102,105
102,106
102,107
103,104
105,106
107,108
108,109
108,110
111,112
111,113
112,113
114,115
116,117
118,119
119,120
120,121
120,122
121,122
124,125
124,126
125,126
127,128
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,8,10,14,16,20,23,25,30,32,34,38,40,41,44,47,49,50,52,56,59,61,62,66,68,73,74,79,80,83,87,88,90,93,99,101,104,106,109,110,113,115,117,122,123,126,131,133
-----computeFrom-----
12,13
12,14
18,19
18,20
54,55
54,56
64,65
64,66
77,78
77,79
81,82
81,83
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_42_bad(){    int count;    /* Initialize count */    count = -1;    count = badSource(count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_42_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_42_bad
{    int count;    /* Initialize count */    count = -1;    count = badSource(count);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = badSource(count);
count = badSource(count)
count
count
badSource(count)
badSource
badSource
count
count
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(27,19,0)
(43,34,0)
(1,28,0)
(43,65,0)
(24,28,0)
(56,28,0)
(59,28,0)
(53,9,0)
(55,8,0)
(37,19,0)
(6,9,0)
(3,58,0)
(41,12,0)
(34,43,0)
(43,39,0)
(51,19,0)
(45,8,0)
(8,29,0)
(64,42,0)
(23,65,0)
(13,50,0)
(15,53,0)
(66,23,0)
(10,29,0)
(63,51,0)
(33,51,0)
(14,43,0)
(25,17,0)
(57,61,0)
(9,53,0)
(29,8,0)
(65,23,0)
(27,44,0)
(28,19,0)
(21,27,0)
(46,58,0)
(29,12,0)
(12,28,0)
(11,39,0)
(65,43,0)
(16,63,0)
(2,12,0)
(7,44,0)
(53,51,0)
(31,25,0)
(43,8,0)
(45,4,0)
(39,43,0)
(38,50,0)
(51,63,0)
(35,0,0)
(53,49,0)
(54,28,0)
(44,27,0)
(40,28,0)
(9,58,0)
(50,28,0)
(5,34,0)
(62,29,0)
(18,36,0)
(8,28,0)
(60,43,0)
(36,48,0)
(32,45,0)
(63,27,0)
(61,58,0)
(47,42,0)
(49,53,0)
(0,28,0)
(22,26,0)
(30,0,0)
(42,8,0)
(43,14,1)
(36,18,1)
(13,38,1)
(57,25,1)
(2,0,1)
(47,8,1)
(7,21,1)
(65,43,1)
(50,13,1)
(63,16,1)
(43,8,1)
(39,11,1)
(42,8,1)
(43,34,1)
(45,8,1)
(64,47,1)
(58,3,1)
(60,23,1)
(6,61,1)
(30,35,1)
(33,27,1)
(51,63,1)
(34,5,1)
(6,58,1)
(41,2,1)
(63,27,1)
(53,49,1)
(46,36,1)
(20,9,1)
(0,30,1)
(61,58,1)
(27,44,1)
(38,51,1)
(8,29,1)
(23,66,1)
(62,55,1)
(5,60,1)
(29,12,1)
(57,65,1)
(66,9,1)
(53,51,1)
(18,42,1)
(65,23,1)
(55,12,1)
(10,62,1)
(44,7,1)
(32,20,1)
(25,31,1)
(53,15,1)
(12,41,1)
(29,10,1)
(52,45,1)
(11,34,1)
(45,32,1)
(52,20,1)
(16,33,1)
(43,39,1)
(46,42,1)
(14,39,1)
(42,64,1)
(9,58,1)
(35,50,1)
(61,57,1)
(15,6,1)
(31,65,1)
(9,53,1)
(3,46,1)
(66,9,2)
(6,9,2)
(18,42,2)
(61,9,2)
(11,9,2)
(65,23,2)
(60,9,2)
(5,9,2)
(53,9,2)
(9,58,2)
(39,9,2)
(36,42,2)
(53,49,2)
(9,9,2)
(45,8,2)
(23,9,2)
(51,63,2)
(42,8,2)
(45,20,2)
(8,29,2)
(15,9,2)
(53,51,2)
(43,9,2)
(14,9,2)
(43,39,2)
(65,9,2)
(25,65,2)
(29,12,2)
(65,43,2)
(32,20,2)
(9,53,2)
(61,58,2)
(31,65,2)
(57,9,2)
(63,27,2)
(43,8,2)
(43,34,2)
(27,44,2)
(34,9,2)
-----------------------------------
(0,*pFile = NULL)
(1,filename)
(2,filename)
(3,0)
(4,)
(5,char)
(6,i)
(7,1)
(8,pFile = fopen(filename, "w+")
(9,i < (size_t)
(10,"w+")
(11,SENTENCE)
(12,*filename = "output_bad.txt")
(13,0)
(14,pFile)
(15,count)
(16,count)
(17,)
(18,1)
(19,)
(20,pFile)
(21,count)
(22,if (strlen(SENTENCE)
(23,strlen(SENTENCE)
(24,i)
(25,exit(1)
(26,)
(27,count = -1)
(28,)
(29,fopen(filename, "w+")
(30,NULL)
(31,1)
(32,pFile)
(33,count)
(34,sizeof(char)
(35,pFile)
(36,exit(1)
(37,count)
(38,i)
(39,strlen(SENTENCE)
(40,pFile)
(41,"output_bad.txt")
(42,pFile == NULL)
(43,fwrite(SENTENCE, sizeof(char)
(44,-1)
(45,fclose(pFile)
(46,i)
(47,pFile)
(48,)
(49,size_t)
(50,i = 0)
(51,count = badSource(count)
(52,RET)
(53,(size_t)
(54,for (i = 0; i < (size_t)
(55,pFile)
(56,if (pFile == NULL)
(57,i)
(58,i = 0)
(59,if (pFile)
(60,SENTENCE)
(61,i++)
(62,filename)
(63,badSource(count)
(64,NULL)
(65,strlen(SENTENCE)
(66,SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^