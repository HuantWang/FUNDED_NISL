-----label-----
0
-----code-----
int main(int argc, char **argv) {
    sigset_t sigmask;
    int sigfd;
    Display *d;
    Window root_win;
    int xrr_event_base = 0;
    int xrr_error_base = 0;
    int x11_fd;

    if (argc < 2) {
        fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0]);
        exit(2);
    }

    signal(SIGCHLD, SIG_IGN);
    sigemptyset(&sigmask);
    sigaddset(&sigmask, SIGTERM);
    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == -1)
        err(1, "Couldn't block signals for graceful signal recovery");

    sigfd = signalfd(-1, &sigmask, SFD_CLOEXEC);
    if (sigfd == -1)
        err(1, "Couldn't create signalfd for graceful signal recovery");

    d = XOpenDisplay(NULL);
    if (!d)
        errx(1, "Failed to open display");

    root_win = DefaultRootWindow(d);

    if (!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base))
        errx(1, "RandR extension missing");

    XRRSelectInput(d, root_win, RRScreenChangeNotifyMask);

    XFlush(d);
    x11_fd = ConnectionNumber(d);
    for (;;) {
        int layout_changed;
        XEvent ev;
        fd_set in_fds;
        FD_ZERO(&in_fds);
        FD_SET(sigfd, &in_fds);
        FD_SET(x11_fd, &in_fds);

        if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1) {
            XCloseDisplay(d);
            err(1, "select");
        }

        if (FD_ISSET(sigfd, &in_fds)) {
            /* This must be SIGTERM as we are not listening on anything else */
            break;
        }

        layout_changed = 0;
        while (XPending(d)) {
            XNextEvent(d, &ev);
            XRRUpdateConfiguration(&ev);

            /* This should be the only event we get, but check regardless. */
            if (ev.type == xrr_event_base + RRScreenChangeNotify)
                layout_changed = 1;
        }

        if (layout_changed) {
            fprintf(stderr, "Screen layout change event received\n");
            switch (fork()) {
                case 0:
                    close(x11_fd);
                    execvp(argv[1], &argv[1]);
                    err(1, "exec");

                case -1:
                    warn("fork");
                    break;

                default:
                    break;
            }
        }
    }
    XCloseDisplay(d);
    return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
15,36
15,37
15,38
15,39
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
43,44
43,45
45,46
47,48
48,49
48,50
50,51
50,52
52,53
54,55
55,56
55,57
57,58
59,60
59,61
60,61
60,62
61,62
64,65
64,66
65,66
66,67
66,68
66,69
66,70
67,68
69,70
72,73
72,74
73,74
76,77
77,78
77,79
78,79
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
94,95
96,97
97,98
97,99
97,100
98,99
100,101
101,102
103,104
105,106
105,107
106,107
106,108
107,108
107,109
107,110
107,111
108,109
110,111
112,113
113,114
115,116
117,118
119,120
120,121
120,122
120,123
121,122
125,126
126,127
126,128
127,128
129,130
129,131
129,132
129,133
130,131
132,133
134,135
135,136
137,138
139,140
139,141
140,141
140,142
141,142
143,144
145,146
146,147
146,148
146,149
147,148
151,152
152,153
152,154
153,154
155,156
155,157
156,157
158,159
160,161
160,162
161,162
162,163
164,165
165,166
165,167
165,168
166,167
170,171
171,172
171,173
172,173
174,175
174,176
175,176
177,178
179,180
179,181
180,181
181,182
181,183
181,184
181,185
182,183
184,185
186,187
187,188
189,190
190,191
192,193
193,194
193,195
193,196
194,195
198,199
199,200
199,201
199,202
199,203
200,201
202,203
204,205
206,207
208,209
209,210
209,211
210,211
212,213
214,215
215,216
215,217
216,217
218,219
218,220
219,220
221,222
223,224
223,225
225,226
225,227
225,228
225,229
225,230
225,231
225,232
225,233
225,234
225,235
225,236
226,227
227,228
227,229
229,230
231,232
232,233
232,234
233,234
235,236
237,238
238,239
238,240
239,240
241,242
243,244
244,245
244,246
245,246
247,248
248,249
250,251
251,252
251,253
251,254
252,253
254,255
256,257
257,258
259,260
260,261
260,262
260,263
261,262
263,264
265,266
266,267
268,269
268,270
269,270
269,271
270,271
270,272
270,273
270,274
270,275
270,276
271,272
273,274
275,276
276,277
278,279
280,281
282,283
284,285
286,287
286,288
287,288
288,289
288,290
289,290
291,292
293,294
294,295
294,296
294,297
295,296
299,300
299,301
300,301
300,302
300,303
301,302
303,304
305,306
306,307
308,309
310,311
311,312
311,313
312,313
315,316
315,317
316,317
316,318
317,318
319,320
321,322
321,323
321,324
322,323
323,324
323,325
323,326
324,325
326,327
328,329
329,330
331,332
332,333
332,334
333,334
335,336
336,337
338,339
338,340
339,340
339,341
340,341
340,342
341,342
344,345
344,346
345,346
347,348
349,350
350,351
350,352
351,352
354,355
354,356
355,356
357,358
357,359
358,359
359,360
359,361
359,362
360,361
362,363
365,366
365,367
366,367
367,368
369,370
369,371
369,372
369,373
369,374
369,375
369,376
369,377
369,378
370,371
372,373
373,374
373,375
374,375
376,377
378,379
379,380
379,381
379,382
380,381
382,383
382,384
383,384
386,387
387,388
387,389
388,389
391,392
392,393
392,394
392,395
393,394
397,398
398,399
400,401
401,402
401,403
402,403
408,409
409,410
409,411
410,411
412,413
414,415
-----nextToken-----
2,4,6,8,10,12,13,14,19,21,24,26,30,32,33,37,39,42,44,46,49,51,53,56,58,62,63,68,70,71,74,75,79,80,84,86,88,92,95,99,102,104,109,111,114,116,118,122,123,124,128,131,133,136,138,142,144,148,149,150,154,157,159,163,167,168,169,173,176,178,183,185,188,191,195,196,197,201,203,205,207,211,213,217,220,222,224,228,230,234,236,240,242,246,249,253,255,258,262,264,267,272,274,277,279,281,283,285,290,292,296,297,298,302,304,307,309,313,314,318,320,325,327,330,334,337,342,343,346,348,352,353,356,361,363,364,368,371,375,377,381,384,385,389,390,394,395,396,399,403,404,405,406,407,411,413,415
-----computeFrom-----
60,61
60,62
106,107
106,108
126,127
126,128
140,141
140,142
152,153
152,154
171,172
171,173
215,216
215,217
269,270
269,271
311,312
311,313
339,340
339,341
344,345
344,346
350,351
350,352
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;SwitchStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CaseStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int main(int argc, char **argv) {    sigset_t sigmask;    int sigfd;    Display *d;    Window root_win;    int xrr_event_base = 0;    int xrr_error_base = 0;    int x11_fd;    if (argc < 2) {        fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0]);        exit(2);    }    signal(SIGCHLD, SIG_IGN);    sigemptyset(&sigmask);    sigaddset(&sigmask, SIGTERM);    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == -1)        err(1, "Couldn't block signals for graceful signal recovery");    sigfd = signalfd(-1, &sigmask, SFD_CLOEXEC);    if (sigfd == -1)        err(1, "Couldn't create signalfd for graceful signal recovery");    d = XOpenDisplay(NULL);    if (!d)        errx(1, "Failed to open display");    root_win = DefaultRootWindow(d);    if (!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base))        errx(1, "RandR extension missing");    XRRSelectInput(d, root_win, RRScreenChangeNotifyMask);    XFlush(d);    x11_fd = ConnectionNumber(d);    for (;;) {        int layout_changed;        XEvent ev;        fd_set in_fds;        FD_ZERO(&in_fds);        FD_SET(sigfd, &in_fds);        FD_SET(x11_fd, &in_fds);        if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1) {            XCloseDisplay(d);            err(1, "select");        }        if (FD_ISSET(sigfd, &in_fds)) {            /* This must be SIGTERM as we are not listening on anything else */            break;        }        layout_changed = 0;        while (XPending(d)) {            XNextEvent(d, &ev);            XRRUpdateConfiguration(&ev);            /* This should be the only event we get, but check regardless. */            if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;        }        if (layout_changed) {            fprintf(stderr, "Screen layout change event received\n");            switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }        }    }    XCloseDisplay(d);    return 0;}
int
main(int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{    sigset_t sigmask;    int sigfd;    Display *d;    Window root_win;    int xrr_event_base = 0;    int xrr_error_base = 0;    int x11_fd;    if (argc < 2) {        fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0]);        exit(2);    }    signal(SIGCHLD, SIG_IGN);    sigemptyset(&sigmask);    sigaddset(&sigmask, SIGTERM);    if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == -1)        err(1, "Couldn't block signals for graceful signal recovery");    sigfd = signalfd(-1, &sigmask, SFD_CLOEXEC);    if (sigfd == -1)        err(1, "Couldn't create signalfd for graceful signal recovery");    d = XOpenDisplay(NULL);    if (!d)        errx(1, "Failed to open display");    root_win = DefaultRootWindow(d);    if (!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base))        errx(1, "RandR extension missing");    XRRSelectInput(d, root_win, RRScreenChangeNotifyMask);    XFlush(d);    x11_fd = ConnectionNumber(d);    for (;;) {        int layout_changed;        XEvent ev;        fd_set in_fds;        FD_ZERO(&in_fds);        FD_SET(sigfd, &in_fds);        FD_SET(x11_fd, &in_fds);        if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1) {            XCloseDisplay(d);            err(1, "select");        }        if (FD_ISSET(sigfd, &in_fds)) {            /* This must be SIGTERM as we are not listening on anything else */            break;        }        layout_changed = 0;        while (XPending(d)) {            XNextEvent(d, &ev);            XRRUpdateConfiguration(&ev);            /* This should be the only event we get, but check regardless. */            if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;        }        if (layout_changed) {            fprintf(stderr, "Screen layout change event received\n");            switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }        }    }    XCloseDisplay(d);    return 0;}
sigset_t sigmask;
sigset_t sigmask;
sigset_t
sigset_t
sigmask
sigmask
int sigfd;
int sigfd;
int
sigfd
sigfd
Display *d;
Display *d;
Display
Display
*d
*
d
Window root_win;
Window root_win;
Window
Window
root_win
root_win
int xrr_event_base = 0;
int xrr_event_base = 0;
int
xrr_event_base = 0
xrr_event_base
= 0
0
int xrr_error_base = 0;
int xrr_error_base = 0;
int
xrr_error_base = 0
xrr_error_base
= 0
0
int x11_fd;
int x11_fd;
int
x11_fd
x11_fd
if (argc < 2) {        fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0]);        exit(2);    }
argc < 2
argc
argc
2
{        fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0]);        exit(2);    }
fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0]);
fprintf(stderr, "Usage: %s <script> [args ...]\n", argv[0])
fprintf
fprintf
stderr
stderr
"Usage: %s <script> [args ...]\n"
argv[0]
argv
argv
0
exit(2);
exit(2)
exit
exit
2
signal(SIGCHLD, SIG_IGN);
signal(SIGCHLD, SIG_IGN)
signal
signal
SIGCHLD
SIGCHLD
SIG_IGN
SIG_IGN
sigemptyset(&sigmask);
sigemptyset(&sigmask)
sigemptyset
sigemptyset
&sigmask
sigmask
sigmask
sigaddset(&sigmask, SIGTERM);
sigaddset(&sigmask, SIGTERM)
sigaddset
sigaddset
&sigmask
sigmask
sigmask
SIGTERM
SIGTERM
if (sigprocmask(SIG_BLOCK, &sigmask, NULL) == -1)        err(1, "Couldn't block signals for graceful signal recovery");
sigprocmask(SIG_BLOCK, &sigmask, NULL) == -1
sigprocmask(SIG_BLOCK, &sigmask, NULL)
sigprocmask
sigprocmask
SIG_BLOCK
SIG_BLOCK
&sigmask
sigmask
sigmask
NULL
NULL
-1
1
err(1, "Couldn't block signals for graceful signal recovery");
err(1, "Couldn't block signals for graceful signal recovery")
err
err
1
"Couldn't block signals for graceful signal recovery"
sigfd = signalfd(-1, &sigmask, SFD_CLOEXEC);
sigfd = signalfd(-1, &sigmask, SFD_CLOEXEC)
sigfd
sigfd
signalfd(-1, &sigmask, SFD_CLOEXEC)
signalfd
signalfd
-1
1
&sigmask
sigmask
sigmask
SFD_CLOEXEC
SFD_CLOEXEC
if (sigfd == -1)        err(1, "Couldn't create signalfd for graceful signal recovery");
sigfd == -1
sigfd
sigfd
-1
1
err(1, "Couldn't create signalfd for graceful signal recovery");
err(1, "Couldn't create signalfd for graceful signal recovery")
err
err
1
"Couldn't create signalfd for graceful signal recovery"
d = XOpenDisplay(NULL);
d = XOpenDisplay(NULL)
d
d
XOpenDisplay(NULL)
XOpenDisplay
XOpenDisplay
NULL
NULL
if (!d)        errx(1, "Failed to open display");
!d
d
d
errx(1, "Failed to open display");
errx(1, "Failed to open display")
errx
errx
1
"Failed to open display"
root_win = DefaultRootWindow(d);
root_win = DefaultRootWindow(d)
root_win
root_win
DefaultRootWindow(d)
DefaultRootWindow
DefaultRootWindow
d
d
if (!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base))        errx(1, "RandR extension missing");
!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base)
XRRQueryExtension(d, &xrr_event_base, &xrr_error_base)
XRRQueryExtension
XRRQueryExtension
d
d
&xrr_event_base
xrr_event_base
xrr_event_base
&xrr_error_base
xrr_error_base
xrr_error_base
errx(1, "RandR extension missing");
errx(1, "RandR extension missing")
errx
errx
1
"RandR extension missing"
XRRSelectInput(d, root_win, RRScreenChangeNotifyMask);
XRRSelectInput(d, root_win, RRScreenChangeNotifyMask)
XRRSelectInput
XRRSelectInput
d
d
root_win
root_win
RRScreenChangeNotifyMask
RRScreenChangeNotifyMask
XFlush(d);
XFlush(d)
XFlush
XFlush
d
d
x11_fd = ConnectionNumber(d);
x11_fd = ConnectionNumber(d)
x11_fd
x11_fd
ConnectionNumber(d)
ConnectionNumber
ConnectionNumber
d
d
for (;;) {        int layout_changed;        XEvent ev;        fd_set in_fds;        FD_ZERO(&in_fds);        FD_SET(sigfd, &in_fds);        FD_SET(x11_fd, &in_fds);        if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1) {            XCloseDisplay(d);            err(1, "select");        }        if (FD_ISSET(sigfd, &in_fds)) {            /* This must be SIGTERM as we are not listening on anything else */            break;        }        layout_changed = 0;        while (XPending(d)) {            XNextEvent(d, &ev);            XRRUpdateConfiguration(&ev);            /* This should be the only event we get, but check regardless. */            if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;        }        if (layout_changed) {            fprintf(stderr, "Screen layout change event received\n");            switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }        }    }
;
{        int layout_changed;        XEvent ev;        fd_set in_fds;        FD_ZERO(&in_fds);        FD_SET(sigfd, &in_fds);        FD_SET(x11_fd, &in_fds);        if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1) {            XCloseDisplay(d);            err(1, "select");        }        if (FD_ISSET(sigfd, &in_fds)) {            /* This must be SIGTERM as we are not listening on anything else */            break;        }        layout_changed = 0;        while (XPending(d)) {            XNextEvent(d, &ev);            XRRUpdateConfiguration(&ev);            /* This should be the only event we get, but check regardless. */            if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;        }        if (layout_changed) {            fprintf(stderr, "Screen layout change event received\n");            switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }        }    }
int layout_changed;
int layout_changed;
int
layout_changed
layout_changed
XEvent ev;
XEvent ev;
XEvent
XEvent
ev
ev
fd_set in_fds;
fd_set in_fds;
fd_set
fd_set
in_fds
in_fds
FD_ZERO(&in_fds);
FD_ZERO(&in_fds)
FD_ZERO
FD_ZERO
&in_fds
in_fds
in_fds
FD_SET(sigfd, &in_fds);
FD_SET(sigfd, &in_fds)
FD_SET
FD_SET
sigfd
sigfd
&in_fds
in_fds
in_fds
FD_SET(x11_fd, &in_fds);
FD_SET(x11_fd, &in_fds)
FD_SET
FD_SET
x11_fd
x11_fd
&in_fds
in_fds
in_fds
if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1) {            XCloseDisplay(d);            err(1, "select");        }
select(FD_SETSIZE, &in_fds, NULL, NULL, NULL) == -1
select(FD_SETSIZE, &in_fds, NULL, NULL, NULL)
select
select
FD_SETSIZE
FD_SETSIZE
&in_fds
in_fds
in_fds
NULL
NULL
NULL
NULL
NULL
NULL
-1
1
{            XCloseDisplay(d);            err(1, "select");        }
XCloseDisplay(d);
XCloseDisplay(d)
XCloseDisplay
XCloseDisplay
d
d
err(1, "select");
err(1, "select")
err
err
1
"select"
if (FD_ISSET(sigfd, &in_fds)) {            /* This must be SIGTERM as we are not listening on anything else */            break;        }
FD_ISSET(sigfd, &in_fds)
FD_ISSET
FD_ISSET
sigfd
sigfd
&in_fds
in_fds
in_fds
{            /* This must be SIGTERM as we are not listening on anything else */            break;        }
break;
layout_changed = 0;
layout_changed = 0
layout_changed
layout_changed
0
while (XPending(d)) {            XNextEvent(d, &ev);            XRRUpdateConfiguration(&ev);            /* This should be the only event we get, but check regardless. */            if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;        }
XPending(d)
XPending
XPending
d
d
{            XNextEvent(d, &ev);            XRRUpdateConfiguration(&ev);            /* This should be the only event we get, but check regardless. */            if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;        }
XNextEvent(d, &ev);
XNextEvent(d, &ev)
XNextEvent
XNextEvent
d
d
&ev
ev
ev
XRRUpdateConfiguration(&ev);
XRRUpdateConfiguration(&ev)
XRRUpdateConfiguration
XRRUpdateConfiguration
&ev
ev
ev
if (ev.type == xrr_event_base + RRScreenChangeNotify)                layout_changed = 1;
ev.type == xrr_event_base + RRScreenChangeNotify
ev.type
ev
ev
type
xrr_event_base + RRScreenChangeNotify
xrr_event_base
xrr_event_base
RRScreenChangeNotify
RRScreenChangeNotify
layout_changed = 1;
layout_changed = 1
layout_changed
layout_changed
1
if (layout_changed) {            fprintf(stderr, "Screen layout change event received\n");            switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }        }
layout_changed
layout_changed
{            fprintf(stderr, "Screen layout change event received\n");            switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }        }
fprintf(stderr, "Screen layout change event received\n");
fprintf(stderr, "Screen layout change event received\n")
fprintf
fprintf
stderr
stderr
"Screen layout change event received\n"
switch (fork()) {                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }
fork()
fork
fork
{                case 0:                    close(x11_fd);                    execvp(argv[1], &argv[1]);                    err(1, "exec");                case -1:                    warn("fork");                    break;                default:                    break;            }
case 0:
0
close(x11_fd);
close(x11_fd)
close
close
x11_fd
x11_fd
execvp(argv[1], &argv[1]);
execvp(argv[1], &argv[1])
execvp
execvp
argv[1]
argv
argv
1
&argv[1]
argv[1]
argv
argv
1
err(1, "exec");
err(1, "exec")
err
err
1
"exec"
case -1:
-1
1
warn("fork");
warn("fork")
warn
warn
"fork"
break;
default:
break;
XCloseDisplay(d);
XCloseDisplay(d)
XCloseDisplay
XCloseDisplay
d
d
return 0;
0
-----joern-----
(100,149,0)
(102,188,0)
(117,89,0)
(78,154,0)
(10,17,0)
(172,6,0)
(29,155,0)
(40,179,0)
(162,104,0)
(17,180,0)
(189,65,0)
(176,60,0)
(81,160,0)
(181,104,0)
(89,174,0)
(50,17,0)
(171,123,0)
(57,187,0)
(108,72,0)
(68,149,0)
(189,125,0)
(133,111,0)
(169,104,0)
(3,171,0)
(185,162,0)
(200,133,0)
(46,13,0)
(87,57,0)
(199,67,0)
(197,181,0)
(101,189,0)
(149,104,0)
(150,96,0)
(14,39,0)
(69,45,0)
(41,100,0)
(61,39,0)
(137,156,0)
(171,3,0)
(178,32,0)
(95,104,0)
(115,189,0)
(139,122,0)
(131,197,0)
(26,32,0)
(91,104,0)
(14,160,0)
(151,46,0)
(21,104,0)
(143,149,0)
(146,162,0)
(153,61,0)
(31,16,0)
(48,39,0)
(111,133,0)
(2,7,0)
(55,93,0)
(119,191,0)
(86,125,0)
(38,75,0)
(187,57,0)
(114,104,0)
(11,56,0)
(63,197,0)
(133,67,0)
(161,21,0)
(179,147,0)
(180,17,0)
(90,197,0)
(78,46,0)
(103,143,0)
(4,45,0)
(9,39,0)
(59,198,0)
(198,123,0)
(112,104,0)
(52,10,0)
(17,10,0)
(110,55,0)
(148,128,0)
(179,160,0)
(160,100,0)
(142,170,0)
(132,104,0)
(22,49,0)
(53,8,0)
(151,60,0)
(83,55,0)
(1,122,0)
(13,30,0)
(187,39,0)
(94,3,0)
(34,149,0)
(181,92,0)
(13,46,0)
(160,104,0)
(37,198,0)
(167,189,0)
(15,46,0)
(44,123,0)
(80,104,0)
(149,33,0)
(144,149,0)
(122,145,0)
(17,149,0)
(192,75,0)
(97,104,0)
(129,62,0)
(138,87,0)
(46,104,0)
(13,155,0)
(56,27,0)
(193,128,0)
(47,8,0)
(51,15,0)
(7,104,0)
(66,39,0)
(49,111,0)
(85,120,0)
(82,92,0)
(6,39,0)
(87,93,0)
(88,16,0)
(79,89,0)
(177,73,0)
(159,43,0)
(27,60,0)
(128,156,0)
(190,46,0)
(18,174,0)
(23,144,0)
(19,154,0)
(165,21,0)
(24,137,0)
(126,30,0)
(25,107,0)
(32,178,0)
(98,127,0)
(157,72,0)
(7,124,0)
(16,118,0)
(8,47,0)
(109,96,0)
(166,61,0)
(92,181,0)
(136,59,0)
(30,13,0)
(155,13,0)
(33,149,0)
(35,47,0)
(111,49,0)
(43,80,0)
(42,60,0)
(174,89,0)
(187,55,0)
(194,49,0)
(137,149,0)
(74,39,0)
(154,78,0)
(67,104,0)
(141,60,0)
(57,87,0)
(178,47,0)
(174,93,0)
(125,189,0)
(175,33,0)
(71,60,0)
(135,47,0)
(144,104,0)
(70,147,0)
(116,14,0)
(77,68,0)
(124,7,0)
(170,45,0)
(158,13,0)
(121,133,0)
(143,104,0)
(89,184,0)
(195,99,0)
(198,59,0)
(15,99,0)
(10,67,0)
(80,43,0)
(76,104,0)
(120,65,0)
(36,104,0)
(164,151,0)
(197,104,0)
(170,17,0)
(113,184,0)
(65,120,0)
(64,174,0)
(106,107,0)
(58,60,0)
(27,56,0)
(100,160,0)
(179,60,0)
(12,124,0)
(105,127,0)
(182,60,0)
(20,78,0)
(151,62,0)
(84,104,0)
(5,67,0)
(134,60,0)
(191,149,0)
(92,149,0)
(62,151,0)
(147,179,0)
(0,104,0)
(130,189,0)
(72,60,0)
(196,87,0)
(45,104,0)
(28,181,0)
(55,187,0)
(140,118,0)
(183,104,0)
(168,73,0)
(17,170,0)
(99,15,0)
(47,178,0)
(54,104,0)
(198,149,0)
(152,113,0)
(197,149,0)
(186,39,0)
(65,189,0)
(164,27,1)
(17,10,1)
(116,163,1)
(100,41,1)
(165,113,1)
(79,122,1)
(168,178,1)
(41,81,1)
(43,159,1)
(196,138,1)
(63,180,1)
(143,103,1)
(110,14,1)
(189,130,1)
(102,15,1)
(137,149,1)
(187,55,1)
(198,149,1)
(37,68,1)
(87,93,1)
(175,34,1)
(179,160,1)
(7,124,1)
(89,174,1)
(133,121,1)
(9,6,1)
(170,142,1)
(103,102,1)
(167,125,1)
(194,22,1)
(81,144,1)
(12,80,1)
(111,49,1)
(78,154,1)
(96,109,1)
(124,12,1)
(88,31,1)
(162,185,1)
(107,106,1)
(16,88,1)
(34,78,1)
(25,111,1)
(20,46,1)
(119,149,1)
(173,68,1)
(51,128,1)
(38,192,1)
(109,150,1)
(192,191,1)
(197,90,1)
(172,61,1)
(64,18,1)
(100,149,1)
(90,131,1)
(26,47,1)
(92,82,1)
(187,57,1)
(148,137,1)
(153,166,1)
(8,53,1)
(2,124,1)
(17,149,1)
(131,63,1)
(160,100,1)
(77,107,1)
(69,4,1)
(135,8,1)
(67,199,1)
(99,195,1)
(94,198,1)
(13,158,1)
(149,33,1)
(138,55,1)
(29,30,1)
(40,151,1)
(11,186,1)
(177,168,1)
(62,129,1)
(200,49,1)
(106,25,1)
(61,153,1)
(32,26,1)
(197,149,1)
(68,77,1)
(137,24,1)
(143,149,1)
(181,92,1)
(59,136,1)
(127,105,1)
(24,65,1)
(193,148,1)
(15,99,1)
(77,72,1)
(4,67,1)
(186,163,1)
(80,43,1)
(53,35,1)
(105,98,1)
(191,119,1)
(126,190,1)
(30,126,1)
(70,40,1)
(197,181,1)
(33,175,1)
(178,47,1)
(108,157,1)
(51,65,1)
(165,122,1)
(163,16,1)
(14,160,1)
(179,147,1)
(10,67,1)
(128,193,1)
(63,127,1)
(130,115,1)
(129,164,1)
(154,19,1)
(3,94,1)
(111,133,1)
(191,149,1)
(15,46,1)
(46,13,1)
(65,120,1)
(72,108,1)
(150,78,1)
(27,56,1)
(11,173,1)
(115,167,1)
(151,46,1)
(170,45,1)
(18,117,1)
(92,149,1)
(121,200,1)
(120,85,1)
(14,116,1)
(35,7,1)
(174,64,1)
(174,93,1)
(73,177,1)
(86,101,1)
(6,172,1)
(17,170,1)
(144,149,1)
(82,28,1)
(142,10,1)
(56,11,1)
(185,143,1)
(122,139,1)
(1,45,1)
(28,75,1)
(178,32,1)
(78,46,1)
(77,111,1)
(57,87,1)
(159,21,1)
(146,162,1)
(144,23,1)
(189,125,1)
(139,1,1)
(190,178,1)
(11,160,1)
(101,179,1)
(34,96,1)
(87,196,1)
(19,20,1)
(157,15,1)
(83,110,1)
(113,152,1)
(31,173,1)
(133,67,1)
(55,83,1)
(122,145,1)
(171,3,1)
(47,135,1)
(98,180,1)
(125,86,1)
(117,79,1)
(161,165,1)
(22,171,1)
(151,62,1)
(136,37,1)
(85,189,1)
(195,51,1)
(158,155,1)
(166,187,1)
(190,73,1)
(13,30,1)
(152,89,1)
(50,181,1)
(180,17,1)
(49,194,1)
(147,70,1)
(68,149,1)
(10,52,1)
(198,59,1)
(21,161,1)
(52,50,1)
(7,2,1)
(155,29,1)
(28,191,1)
(45,69,1)
(75,38,1)
(47,8,1)
(65,189,1)
(11,9,1)
(13,155,1)
(23,197,1)
(199,5,1)
(55,93,1)
(149,33,2)
(143,149,2)
(27,15,2)
(172,163,2)
(120,15,2)
(9,163,2)
(187,57,2)
(189,125,2)
(151,62,2)
(171,68,2)
(174,122,2)
(121,68,2)
(65,189,2)
(70,15,2)
(86,15,2)
(68,15,2)
(78,154,2)
(92,149,2)
(55,93,2)
(195,15,2)
(62,15,2)
(153,163,2)
(177,178,2)
(13,155,2)
(25,111,2)
(110,163,2)
(106,111,2)
(200,68,2)
(11,15,2)
(194,68,2)
(68,149,2)
(68,68,2)
(178,32,2)
(170,45,2)
(171,3,2)
(75,191,2)
(115,15,2)
(151,15,2)
(78,46,2)
(108,15,2)
(80,43,2)
(77,15,2)
(197,181,2)
(178,47,2)
(40,15,2)
(150,78,2)
(187,163,2)
(133,68,2)
(179,15,2)
(64,122,2)
(146,162,2)
(89,174,2)
(187,55,2)
(55,163,2)
(96,78,2)
(49,68,2)
(157,15,2)
(152,122,2)
(198,68,2)
(160,100,2)
(111,68,2)
(164,15,2)
(6,163,2)
(173,15,2)
(168,178,2)
(73,178,2)
(46,13,2)
(77,68,2)
(197,149,2)
(117,122,2)
(13,30,2)
(59,68,2)
(105,180,2)
(61,163,2)
(98,180,2)
(10,67,2)
(3,68,2)
(147,15,2)
(107,111,2)
(24,65,2)
(18,122,2)
(94,68,2)
(130,15,2)
(56,15,2)
(87,93,2)
(186,163,2)
(189,15,2)
(65,15,2)
(65,120,2)
(15,99,2)
(198,59,2)
(163,173,2)
(180,17,2)
(116,163,2)
(198,149,2)
(7,124,2)
(127,180,2)
(15,15,2)
(57,163,2)
(179,160,2)
(138,163,2)
(151,46,2)
(89,122,2)
(17,149,2)
(57,87,2)
(87,163,2)
(128,65,2)
(167,15,2)
(16,173,2)
(109,78,2)
(17,170,2)
(144,149,2)
(15,46,2)
(192,191,2)
(166,163,2)
(14,163,2)
(17,10,2)
(196,163,2)
(14,160,2)
(137,149,2)
(181,92,2)
(101,15,2)
(31,173,2)
(88,173,2)
(191,149,2)
(137,65,2)
(193,65,2)
(136,68,2)
(122,145,2)
(79,122,2)
(113,122,2)
(37,68,2)
(83,163,2)
(38,191,2)
(85,15,2)
(51,15,2)
(47,8,2)
(100,149,2)
(27,56,2)
(179,147,2)
(133,67,2)
(174,93,2)
(125,15,2)
(72,15,2)
(99,15,2)
(148,65,2)
(22,68,2)
(111,49,2)
(111,133,2)
(129,15,2)
-----------------------------------
(0,x11_fd)
(1,argc)
(2,SIGTERM)
(3,&ev)
(4,xrr_error_base)
(5,xrr_event_base)
(6,warn("fork")
(7,sigaddset(&sigmask, SIGTERM)
(8,&sigmask)
(9,break;)
(10,&xrr_event_base)
(11,in_fds)
(12,sigmask)
(13,signalfd(-1, &sigmask, SFD_CLOEXEC)
(14,close(x11_fd)
(15,FD_ISSET(sigfd, &in_fds)
(16,fprintf(stderr, "Screen layout change event received\\n")
(17,XRRQueryExtension(d, &xrr_event_base, &xrr_error_base)
(18,argv)
(19,1)
(20,sigfd)
(21,signal(SIGCHLD, SIG_IGN)
(22,ev)
(23,d)
(24,d)
(25,layout_changed)
(26,1)
(27,FD_ZERO(&in_fds)
(28,root_win)
(29,sigmask)
(30,-1)
(31,stderr)
(32,-1)
(33,XOpenDisplay(NULL)
(34,d)
(35,SIG_BLOCK)
(36,xrr_event_base)
(37,d)
(38,"Failed to open display")
(39,)
(40,x11_fd)
(41,d)
(42,layout_changed)
(43,&sigmask)
(44,if (ev.type == xrr_event_base + RRScreenChangeNotify)
(45,xrr_error_base = 0)
(46,sigfd = signalfd(-1, &sigmask, SFD_CLOEXEC)
(47,sigprocmask(SIG_BLOCK, &sigmask, NULL)
(48,case 0:)
(49,ev.type)
(50,d)
(51,sigfd)
(52,xrr_event_base)
(53,sigmask)
(54,if (argc < 2)
(55,argv[1])
(56,&in_fds)
(57,&argv[1])
(58,in_fds)
(59,&ev)
(60,)
(61,err(1, "exec")
(62,&in_fds)
(63,d)
(64,0)
(65,select(FD_SETSIZE, &in_fds, NULL, NULL, NULL)
(66,default:)
(67,xrr_event_base = 0)
(68,XPending(d)
(69,0)
(70,in_fds)
(71,if (layout_changed)
(72,layout_changed = 0)
(73,err(1, "Couldn\'t block signals for graceful signal recovery")
(74,1:)
(75,errx(1, "Failed to open display")
(76,sigmask)
(77,d)
(78,sigfd == -1)
(79,stderr)
(80,sigemptyset(&sigmask)
(81,x11_fd)
(82,d)
(83,1)
(84,if (!d)
(85,1)
(86,in_fds)
(87,argv[1])
(88,"Screen layout change event received\\n")
(89,fprintf(stderr, "Usage: %s <script> [args ...]\\n", argv[0])
(90,RRScreenChangeNotifyMask)
(91,if (!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base)
(92,DefaultRootWindow(d)
(93,char **argv)
(94,ev)
(95,sigfd)
(96,err(1, "Couldn\'t create signalfd for graceful signal recovery")
(97,if (sigfd == -1)
(98,1)
(99,&in_fds)
(100,ConnectionNumber(d)
(101,FD_SETSIZE)
(102,break;)
(103,d)
(104,)
(105,"RandR extension missing")
(106,1)
(107,layout_changed = 1)
(108,0)
(109,"Couldn\'t create signalfd for graceful signal recovery")
(110,argv)
(111,ev.type == xrr_event_base + RRScreenChangeNotify)
(112,root_win)
(113,exit(2)
(114,for (;;)
(115,NULL)
(116,x11_fd)
(117,"Usage: %s <script> [args ...]\\n")
(118,)
(119,d)
(120,-1)
(121,RRScreenChangeNotify)
(122,argc < 2)
(123,)
(124,&sigmask)
(125,&in_fds)
(126,1)
(127,errx(1, "RandR extension missing")
(128,err(1, "select")
(129,in_fds)
(130,NULL)
(131,root_win)
(132,if (sigprocmask(SIG_BLOCK, &sigmask, NULL)
(133,xrr_event_base + RRScreenChangeNotify)
(134,if (select(FD_SETSIZE, &in_fds, NULL, NULL, NULL)
(135,NULL)
(136,ev)
(137,XCloseDisplay(d)
(138,argv)
(139,2)
(140,switch (fork()
(141,while (XPending(d)
(142,xrr_error_base)
(143,XCloseDisplay(d)
(144,XFlush(d)
(145,int argc)
(146,RET)
(147,&in_fds)
(148,1)
(149,d = XOpenDisplay(NULL)
(150,1)
(151,FD_SET(sigfd, &in_fds)
(152,2)
(153,"exec")
(154,-1)
(155,&sigmask)
(156,)
(157,layout_changed)
(158,SFD_CLOEXEC)
(159,sigmask)
(160,x11_fd = ConnectionNumber(d)
(161,SIG_IGN)
(162,return 0;)
(163,fork()
(164,sigfd)
(165,SIGCHLD)
(166,1)
(167,NULL)
(168,1)
(169,d)
(170,&xrr_error_base)
(171,XRRUpdateConfiguration(&ev)
(172,"fork")
(173,layout_changed)
(174,argv[0])
(175,NULL)
(176,ev)
(177,"Couldn\'t block signals for graceful signal recovery")
(178,sigprocmask(SIG_BLOCK, &sigmask, NULL)
(179,FD_SET(x11_fd, &in_fds)
(180,!XRRQueryExtension(d, &xrr_event_base, &xrr_error_base)
(181,root_win = DefaultRootWindow(d)
(182,if (FD_ISSET(sigfd, &in_fds)
(183,xrr_error_base)
(184,)
(185,0)
(186,break;)
(187,execvp(argv[1], &argv[1])
(188,)
(189,select(FD_SETSIZE, &in_fds, NULL, NULL, NULL)
(190,sigfd)
(191,!d)
(192,1)
(193,"select")
(194,type)
(195,in_fds)
(196,1)
(197,XRRSelectInput(d, root_win, RRScreenChangeNotifyMask)
(198,XNextEvent(d, &ev)
(199,0)
(200,xrr_event_base)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^