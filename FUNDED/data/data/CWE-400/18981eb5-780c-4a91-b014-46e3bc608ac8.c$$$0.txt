-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fgets_for_loop_34_bad()
{
    int count;
    CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
23,25
24,25
25,26
25,27
27,28
27,29
27,30
29,30
30,31
32,33
34,35
34,36
34,37
35,36
35,37
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
65,67
66,67
69,70
71,72
71,73
72,73
73,74
73,75
75,76
75,77
77,78
78,79
78,80
79,80
82,83
82,84
83,84
84,85
84,86
85,86
87,88
87,89
89,90
91,92
91,93
91,94
91,95
92,93
93,94
93,95
94,95
97,98
97,99
98,99
100,101
100,102
101,102
101,103
102,103
105,106
107,108
108,109
110,111
111,112
112,113
112,114
113,114
-----nextToken-----
2,4,8,10,14,16,20,22,26,28,31,33,38,40,42,44,46,51,54,56,61,62,67,68,70,74,76,80,81,86,88,90,95,96,99,103,104,106,109,114,115
-----computeFrom-----
18,19
18,20
35,36
35,37
49,50
49,51
64,65
64,66
93,94
93,95
97,98
97,99
-----guardedBy-----
40,56
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fgets_for_loop_34_bad(){    int count;    CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fgets_for_loop_34_bad()
CWE400_Resource_Exhaustion__fgets_for_loop_34_bad
{    int count;    CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType myUnion;
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType
CWE400_Resource_Exhaustion__fgets_for_loop_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(13,1,0)
(26,28,0)
(6,28,0)
(47,12,0)
(11,51,0)
(15,46,0)
(10,12,0)
(46,27,0)
(33,6,0)
(44,53,0)
(41,24,0)
(39,44,0)
(47,32,0)
(52,42,0)
(2,47,0)
(12,27,0)
(57,20,0)
(45,13,0)
(49,47,0)
(17,58,0)
(39,9,0)
(2,13,0)
(51,54,0)
(20,1,0)
(38,41,0)
(14,54,0)
(39,51,0)
(0,44,0)
(9,39,0)
(56,39,0)
(53,1,0)
(27,20,0)
(25,45,0)
(19,46,0)
(50,27,0)
(43,20,0)
(3,2,0)
(16,18,0)
(22,54,0)
(35,46,0)
(31,1,0)
(28,53,0)
(21,46,0)
(46,21,0)
(2,1,0)
(29,42,0)
(36,7,0)
(18,30,0)
(8,6,0)
(42,44,0)
(4,1,0)
(44,42,0)
(34,7,0)
(12,47,0)
(55,27,0)
(7,2,0)
(13,45,0)
(58,54,0)
(48,21,0)
(5,13,0)
(23,28,0)
(51,39,0)
(40,53,0)
(58,17,1)
(13,45,1)
(37,51,1)
(46,27,1)
(42,29,1)
(27,55,1)
(33,44,1)
(48,46,1)
(16,21,1)
(25,5,1)
(2,47,1)
(47,12,1)
(3,7,1)
(14,22,1)
(0,2,1)
(18,16,1)
(15,35,1)
(44,42,1)
(19,27,1)
(38,51,1)
(21,46,1)
(17,41,1)
(2,13,1)
(10,49,1)
(55,50,1)
(39,56,1)
(50,13,1)
(34,36,1)
(6,8,1)
(7,34,1)
(29,52,1)
(51,39,1)
(8,33,1)
(22,6,1)
(12,10,1)
(36,18,1)
(41,38,1)
(11,54,1)
(56,11,1)
(21,48,1)
(35,19,1)
(12,27,1)
(11,58,1)
(45,25,1)
(49,21,1)
(36,47,1)
(58,54,1)
(51,54,1)
(39,9,1)
(52,0,1)
(54,14,1)
(46,15,1)
(39,44,1)
(2,3,1)
(2,47,2)
(13,45,2)
(44,42,2)
(10,21,2)
(18,21,2)
(49,21,2)
(46,27,2)
(39,51,2)
(2,13,2)
(51,39,2)
(47,12,2)
(47,21,2)
(17,51,2)
(56,51,2)
(58,54,2)
(12,21,2)
(16,21,2)
(58,51,2)
(39,9,2)
(39,44,2)
(12,27,2)
(38,51,2)
(51,54,2)
(51,51,2)
(11,51,2)
(41,51,2)
(21,46,2)
-----------------------------------
(0,count)
(1,)
(2,myUnion.unionFirst = count)
(3,count)
(4,myUnion)
(5,count)
(6,i = 0)
(7,myUnion.unionFirst)
(8,0)
(9,size_t)
(10,inputBuffer)
(11,i)
(12,atoi(inputBuffer)
(13,count = -1)
(14,0)
(15,stdin)
(16,"fgets()
(17,i)
(18,printLine("fgets()
(19,inputBuffer)
(20,)
(21,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(22,i)
(23,i)
(24,)
(25,1)
(26,for (i = 0; i < (size_t)
(27,inputBuffer[CHAR_ARRAY_SIZE] = "")
(28,)
(29,unionSecond)
(30,)
(31,count)
(32,)
(33,i)
(34,unionFirst)
(35,CHAR_ARRAY_SIZE)
(36,myUnion)
(37,RET)
(38,"Hello")
(39,(size_t)
(40,count)
(41,printLine("Hello")
(42,myUnion.unionSecond)
(43,inputBuffer)
(44,count = myUnion.unionSecond)
(45,-1)
(46,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(47,count = atoi(inputBuffer)
(48,NULL)
(49,count)
(50,inputBuffer)
(51,i < (size_t)
(52,myUnion)
(53,)
(54,i = 0)
(55,"")
(56,count)
(57,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(58,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^