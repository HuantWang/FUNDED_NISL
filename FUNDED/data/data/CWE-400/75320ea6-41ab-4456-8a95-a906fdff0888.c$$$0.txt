-----label-----
1
-----code-----
static int64_t compac_scanwork(struct thr_info *thr)
{
	struct cgpu_info *compac = thr->cgpu;
	struct COMPAC_INFO *info = compac->device_data;
	struct timeval now;

	int read_bytes = 1;
	int i, cpu_yield;
	float frequency;
	uint64_t hashes = 0;
	uint32_t err = 0;
	uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;
	uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);

	if (compac->usbinfo.nodev)
		return -1;

	if (!info->chips) {
		usb_nodev(compac);
		return -1;
	}

	if (info->ramping < RAMP_CT)
		max_task_wait = RAMP_MS;

	hashes = info->hashes;
	info->hashes -= hashes;

	cgtime(&now);
	info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;
	cgtime(&info->last_scanhash);

	if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {
		if (info->failing) {
			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {
				applog(LOG_ERR, "%s %d: Device failed to respond to restart",
					   compac->drv->name, compac->device_id);
				usb_nodev(compac);
				return -1;
			}
		} else {
			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",
				   compac->drv->name, compac->device_id);
			usb_reset(compac);
			info->failing = true;
			return 0;
		}
	}

	if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {

		info->job_id = (info->job_id + 1) % MAX_JOBS;

		if (info->update_work) {
			mutex_lock(&info->lock);
			for (i = 0; i < MAX_JOBS; i++) {
				if (info->work[i])
					free_work(info->work[i]);
				info->work[i] = NULL;
			}
			mutex_unlock(&info->lock);
			info->update_work = 0;
		}

		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {
			free_work(info->work[info->job_id]);
			info->work[info->job_id] = NULL;
		}

		if (!info->work[info->job_id]) {
			info->work[info->job_id] = get_work(thr, thr->id);
		} else {
			info->work[info->job_id]->drv_rolllimit--;
			roll_work(info->work[info->job_id]);
		}

		if (info->ramping < RAMP_CT) {
			info->ramping++;
			info->ramp_hcn += hcn_max / RAMP_CT;
			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);

			cgtime(&info->last_nonce);
		} else {
			info->nonceless++;
			info->active = true;
			info->ramp_hcn = (0xffffffff / info->chips);
		}

		init_task(info);

		frequency = info->frequency;
		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {
			frequency += 25;
		}
		if (frequency != info->frequency)
			compac_set_frequency(compac, frequency, true);

		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {
			info->dups = 0;
			compac_send_chain_inactive(compac);
		}

		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);
		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {
			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);
			usb_nodev(compac);
			return -1;
		}

		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;
		cgtime(&info->last_task);
	}

	cpu_yield = bound(max_task_wait / 20, 1, 100);
	cgsleep_ms(cpu_yield);

	if (compac->shutdown)
		compac_set_frequency(compac, info->frequency_start, false);

	return hashes;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
9,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
12,25
12,26
12,27
12,28
12,29
12,30
12,31
12,32
12,33
12,34
12,35
12,36
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
46,47
46,48
48,49
50,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
94,95
95,96
95,97
96,97
98,99
98,100
100,101
101,102
101,103
101,104
101,105
102,103
104,105
104,106
105,106
105,107
106,107
112,113
112,114
113,114
113,115
114,115
114,116
115,116
119,120
120,121
122,123
122,124
123,124
124,125
124,126
125,126
128,129
128,130
129,130
130,131
130,132
131,132
133,134
135,136
136,137
138,139
138,140
139,140
139,141
140,141
140,142
141,142
144,145
146,147
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
156,157
156,158
157,158
160,161
161,162
161,163
162,163
162,164
163,164
166,167
168,169
169,170
169,171
170,171
172,173
173,174
175,176
176,177
176,178
177,178
177,179
178,179
181,182
181,183
182,183
183,184
183,185
184,185
184,186
185,186
185,187
186,187
190,191
190,192
190,193
191,192
193,194
194,195
196,197
197,198
197,199
198,199
202,203
203,204
203,205
204,205
206,207
207,208
207,209
208,209
211,212
211,213
212,213
212,214
213,214
213,215
214,215
217,218
218,219
218,220
219,220
219,221
220,221
223,224
225,226
226,227
226,228
226,229
227,228
227,229
228,229
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
238,239
239,240
239,241
240,241
240,242
241,242
241,243
243,244
246,247
248,249
248,250
248,251
249,250
250,251
250,252
250,253
250,254
250,255
251,252
253,254
256,257
256,258
257,258
257,259
258,259
262,263
262,264
263,264
266,267
267,268
267,269
268,269
270,271
272,273
273,274
275,276
275,277
275,278
275,279
276,277
277,278
277,279
277,280
277,281
277,282
278,279
280,281
283,284
283,285
284,285
284,286
285,286
289,290
289,291
290,291
293,294
294,295
294,296
295,296
297,298
299,300
300,301
300,302
301,302
301,303
302,303
306,307
308,309
308,310
309,310
309,311
310,311
310,312
311,312
314,315
315,316
315,317
316,317
316,318
316,319
317,318
319,320
320,321
322,323
323,324
323,325
324,325
327,328
329,330
329,331
329,332
329,333
329,334
329,335
329,336
329,337
329,338
329,339
329,340
329,341
329,342
329,343
330,331
331,332
331,333
332,333
332,334
333,334
336,337
336,338
337,338
338,339
338,340
339,340
339,341
340,341
344,345
346,347
346,348
347,348
347,349
348,349
351,352
351,353
351,354
351,355
352,353
353,354
353,355
354,355
356,357
357,358
357,359
358,359
361,362
361,363
361,364
361,365
362,363
363,364
363,365
364,365
367,368
367,369
368,369
370,371
372,373
373,374
375,376
375,377
376,377
376,378
377,378
377,379
378,379
378,380
379,380
382,383
384,385
385,386
385,387
386,387
388,389
388,390
389,390
389,391
390,391
393,394
395,396
396,397
396,398
397,398
397,399
398,399
398,400
399,400
402,403
404,405
406,407
407,408
407,409
408,409
410,411
411,412
411,413
412,413
415,416
416,417
416,418
417,418
417,419
418,419
422,423
422,424
423,424
423,425
424,425
424,426
425,426
425,427
426,427
429,430
429,431
430,431
433,434
433,435
434,435
434,436
435,436
435,437
436,437
436,438
437,438
440,441
440,442
441,442
446,447
446,448
447,448
448,449
448,450
449,450
451,452
451,453
452,453
452,454
453,454
456,457
456,458
457,458
460,461
461,462
461,463
462,463
462,464
463,464
463,465
464,465
467,468
467,469
468,469
471,472
473,474
473,475
473,476
474,475
475,476
475,477
476,477
476,478
477,478
480,481
480,482
481,482
484,485
485,486
486,487
486,488
487,488
487,489
488,489
488,490
489,490
492,493
492,494
493,494
496,497
496,498
496,499
497,498
499,500
501,502
501,503
502,503
505,506
505,507
506,507
507,508
508,509
508,510
509,510
509,511
510,511
510,512
511,512
514,515
514,516
515,516
519,520
520,521
520,522
521,522
523,524
523,525
524,525
524,526
525,526
528,529
528,530
529,530
532,533
532,534
532,535
533,534
533,535
534,535
534,536
535,536
538,539
540,541
540,542
540,543
540,544
541,542
542,543
543,544
543,545
544,545
547,548
548,549
548,550
549,550
549,551
550,551
553,554
553,555
554,555
556,557
558,559
559,560
559,561
560,561
560,562
561,562
564,565
564,566
564,567
564,568
565,566
567,568
567,569
568,569
573,574
574,575
574,576
575,576
577,578
578,579
578,580
579,580
582,583
582,584
582,585
583,584
584,585
585,586
585,587
586,587
589,590
590,591
590,592
591,592
591,593
592,593
596,597
597,598
597,599
598,599
598,600
599,600
602,603
603,604
603,605
605,606
605,607
606,607
609,610
610,611
610,612
611,612
613,614
615,616
616,617
616,618
617,618
619,620
619,621
620,621
623,624
623,625
624,625
624,626
625,626
625,627
626,627
626,628
627,628
630,631
630,632
631,632
634,635
634,636
635,636
635,637
635,638
636,637
638,639
639,640
641,642
642,643
642,644
643,644
646,647
646,648
649,650
650,651
651,652
651,653
652,653
655,656
655,657
656,657
656,658
657,658
659,660
659,661
660,661
663,664
664,665
664,666
664,667
664,668
665,666
667,668
669,670
672,673
672,674
673,674
673,675
674,675
674,676
675,676
675,677
676,677
676,678
677,678
681,682
681,683
682,683
685,686
685,687
686,687
686,688
686,689
687,688
689,690
690,691
692,693
693,694
693,695
694,695
698,699
698,700
699,700
700,701
700,702
701,702
701,703
702,703
706,707
707,708
707,709
708,709
710,711
712,713
713,714
713,715
714,715
716,717
716,718
716,719
716,720
716,721
716,722
717,718
719,720
721,722
721,723
722,723
722,724
724,725
726,727
726,728
727,728
730,731
732,733
733,734
735,736
737,738
737,739
738,739
738,740
739,740
739,741
740,741
742,743
744,745
744,746
745,746
747,748
749,750
749,751
749,752
750,751
751,752
751,753
751,754
751,755
751,756
752,753
754,755
757,758
757,759
758,759
758,760
759,760
763,764
763,765
764,765
767,768
768,769
768,770
769,770
771,772
773,774
774,775
776,777
777,778
777,779
778,779
778,780
779,780
782,783
782,784
783,784
784,785
784,786
785,786
785,787
786,787
786,788
787,788
791,792
791,793
791,794
792,793
794,795
795,796
797,798
798,799
798,800
799,800
803,804
804,805
804,806
805,806
807,808
808,809
808,810
809,810
812,813
813,814
813,815
814,815
816,817
816,818
816,819
816,820
817,818
819,820
819,821
820,821
825,826
826,827
826,828
827,828
829,830
831,832
831,833
832,833
832,834
833,834
836,837
837,838
837,839
837,840
837,841
838,839
840,841
842,843
842,844
843,844
847,848
848,849
-----nextToken-----

-----computeFrom-----
85,86
85,87
86,87
86,88
104,105
104,106
139,140
139,141
147,148
147,149
153,154
153,155
161,162
161,163
176,177
176,178
181,182
181,183
183,184
183,185
184,185
184,186
212,213
212,214
218,219
218,220
219,220
219,221
233,234
233,235
239,240
239,241
240,241
240,242
241,242
241,243
300,301
300,302
309,310
309,311
315,316
315,317
331,332
331,333
336,337
336,338
338,339
338,340
363,364
363,365
367,368
367,369
396,397
396,398
416,417
416,418
423,424
423,425
433,434
433,435
461,462
461,463
486,487
486,488
533,534
533,535
548,549
548,550
553,554
553,555
559,560
559,561
590,591
590,592
597,598
597,599
603,604
603,605
616,617
616,618
624,625
624,626
625,626
625,627
634,635
634,636
646,647
646,648
651,652
651,653
656,657
656,658
673,674
673,675
674,675
674,676
675,676
675,677
685,686
685,687
700,701
700,702
713,714
713,715
738,739
738,740
739,740
739,741
744,745
744,746
777,778
777,779
782,783
782,784
784,785
784,786
785,786
785,787
813,814
813,815
819,820
819,821
-----guardedBy-----
216,237
224,247
221,244
215,303
313,420
321,796
318,793
326,811
325,810
439,466
443,470
442,469
537,546
539,557
536,580
629,653
662,670
679,704
695,703
-----guardedByNegation-----
536,607
-----lastLexicalUse-----
536,607
-----jump-----
536,607
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t compac_scanwork(struct thr_info *thr){	struct cgpu_info *compac = thr->cgpu;	struct COMPAC_INFO *info = compac->device_data;	struct timeval now;	int read_bytes = 1;	int i, cpu_yield;	float frequency;	uint64_t hashes = 0;	uint32_t err = 0;	uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;	uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);	if (compac->usbinfo.nodev)		return -1;	if (!info->chips) {		usb_nodev(compac);		return -1;	}	if (info->ramping < RAMP_CT)		max_task_wait = RAMP_MS;	hashes = info->hashes;	info->hashes -= hashes;	cgtime(&now);	info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;	cgtime(&info->last_scanhash);	if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}	if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);			usb_nodev(compac);			return -1;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}	cpu_yield = bound(max_task_wait / 20, 1, 100);	cgsleep_ms(cpu_yield);	if (compac->shutdown)		compac_set_frequency(compac, info->frequency_start, false);	return hashes;}
static int64_t
int64_t
compac_scanwork(struct thr_info *thr)
compac_scanwork
struct thr_info *thr
struct thr_info
thr_info
*thr
*
thr
{	struct cgpu_info *compac = thr->cgpu;	struct COMPAC_INFO *info = compac->device_data;	struct timeval now;	int read_bytes = 1;	int i, cpu_yield;	float frequency;	uint64_t hashes = 0;	uint32_t err = 0;	uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;	uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);	if (compac->usbinfo.nodev)		return -1;	if (!info->chips) {		usb_nodev(compac);		return -1;	}	if (info->ramping < RAMP_CT)		max_task_wait = RAMP_MS;	hashes = info->hashes;	info->hashes -= hashes;	cgtime(&now);	info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;	cgtime(&info->last_scanhash);	if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}	if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);			usb_nodev(compac);			return -1;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}	cpu_yield = bound(max_task_wait / 20, 1, 100);	cgsleep_ms(cpu_yield);	if (compac->shutdown)		compac_set_frequency(compac, info->frequency_start, false);	return hashes;}
struct cgpu_info *compac = thr->cgpu;
struct cgpu_info *compac = thr->cgpu;
struct cgpu_info
cgpu_info
*compac = thr->cgpu
*
compac
= thr->cgpu
thr->cgpu
thr
thr
cgpu
struct COMPAC_INFO *info = compac->device_data;
struct COMPAC_INFO *info = compac->device_data;
struct COMPAC_INFO
COMPAC_INFO
*info = compac->device_data
*
info
= compac->device_data
compac->device_data
compac
compac
device_data
struct timeval now;
struct timeval now;
struct timeval
timeval
now
now
int read_bytes = 1;
int read_bytes = 1;
int
read_bytes = 1
read_bytes
= 1
1
int i, cpu_yield;
int i, cpu_yield;
int
i
i
cpu_yield
cpu_yield
float frequency;
float frequency;
float
frequency
frequency
uint64_t hashes = 0;
uint64_t hashes = 0;
uint64_t
uint64_t
hashes = 0
hashes
= 0
0
uint32_t err = 0;
uint32_t err = 0;
uint32_t
uint32_t
err = 0
err
= 0
0
uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;
uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;
uint32_t
uint32_t
hcn_max = info->hashrate * RAMP_MS / 1000
hcn_max
= info->hashrate * RAMP_MS / 1000
info->hashrate * RAMP_MS / 1000
info->hashrate * RAMP_MS
info->hashrate
info
info
hashrate
RAMP_MS
RAMP_MS
1000
uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);
uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);
uint32_t
uint32_t
max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000)
max_task_wait
= bound(info->fullscan_ms * 0.40, 5, 1000)
bound(info->fullscan_ms * 0.40, 5, 1000)
bound
bound
info->fullscan_ms * 0.40
info->fullscan_ms
info
info
fullscan_ms
0.40
5
1000
if (compac->usbinfo.nodev)		return -1;
compac->usbinfo.nodev
compac->usbinfo
compac
compac
usbinfo
nodev
return -1;
-1
1
if (!info->chips) {		usb_nodev(compac);		return -1;	}
!info->chips
info->chips
info
info
chips
{		usb_nodev(compac);		return -1;	}
usb_nodev(compac);
usb_nodev(compac)
usb_nodev
usb_nodev
compac
compac
return -1;
-1
1
if (info->ramping < RAMP_CT)		max_task_wait = RAMP_MS;
info->ramping < RAMP_CT
info->ramping
info
info
ramping
RAMP_CT
RAMP_CT
max_task_wait = RAMP_MS;
max_task_wait = RAMP_MS
max_task_wait
max_task_wait
RAMP_MS
RAMP_MS
hashes = info->hashes;
hashes = info->hashes
hashes
hashes
info->hashes
info
info
hashes
info->hashes -= hashes;
info->hashes -= hashes
info->hashes
info
info
hashes
hashes
hashes
cgtime(&now);
cgtime(&now)
cgtime
cgtime
&now
now
now
info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;
info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10
info->scanhash_ms
info
info
scanhash_ms
(info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10
(info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash))
info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
info->scanhash_ms * 9
info->scanhash_ms
info
info
scanhash_ms
9
ms_tdiff(&now, &info->last_scanhash)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_scanhash
info->last_scanhash
info
info
last_scanhash
10
cgtime(&info->last_scanhash);
cgtime(&info->last_scanhash)
cgtime
cgtime
&info->last_scanhash
info->last_scanhash
info
info
last_scanhash
if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}
info->nonceless > (MAX_IDLE * 1000 / max_task_wait)
info->nonceless
info
info
nonceless
(MAX_IDLE * 1000 / max_task_wait)
MAX_IDLE * 1000 / max_task_wait
MAX_IDLE * 1000
MAX_IDLE
MAX_IDLE
1000
max_task_wait
max_task_wait
{		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}
if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}
info->failing
info
info
failing
{			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}		}
if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}
info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)
info->nonceless
info
info
nonceless
(2 * MAX_IDLE * 1000 / max_task_wait)
2 * MAX_IDLE * 1000 / max_task_wait
2 * MAX_IDLE * 1000
2 * MAX_IDLE
2
MAX_IDLE
MAX_IDLE
1000
max_task_wait
max_task_wait
{				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				usb_nodev(compac);				return -1;			}
applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);
applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id)
applog
applog
LOG_ERR
LOG_ERR
"%s %d: Device failed to respond to restart"
compac->drv->name
compac->drv
compac
compac
drv
name
compac->device_id
compac
compac
device_id
usb_nodev(compac);
usb_nodev(compac)
usb_nodev
usb_nodev
compac
compac
return -1;
-1
1
{			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}
applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);
applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id)
applog
applog
LOG_WARNING
LOG_WARNING
"%s %d: No valid hashes recently, attempting to reset"
compac->drv->name
compac->drv
compac
compac
drv
name
compac->device_id
compac
compac
device_id
usb_reset(compac);
usb_reset(compac)
usb_reset
usb_reset
compac
compac
info->failing = true;
info->failing = true
info->failing
info
info
failing
true
return 0;
0
if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);			usb_nodev(compac);			return -1;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}
info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)
info->update_work
info
info
update_work
(ms_tdiff(&now, &info->last_task) > max_task_wait)
ms_tdiff(&now, &info->last_task) > max_task_wait
ms_tdiff(&now, &info->last_task)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_task
info->last_task
info
info
last_task
max_task_wait
max_task_wait
{		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);			usb_nodev(compac);			return -1;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}
info->job_id = (info->job_id + 1) % MAX_JOBS;
info->job_id = (info->job_id + 1) % MAX_JOBS
info->job_id
info
info
job_id
(info->job_id + 1) % MAX_JOBS
(info->job_id + 1)
info->job_id + 1
info->job_id
info
info
job_id
1
MAX_JOBS
MAX_JOBS
if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}
info->update_work
info
info
update_work
{			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}
mutex_lock(&info->lock);
mutex_lock(&info->lock)
mutex_lock
mutex_lock
&info->lock
info->lock
info
info
lock
for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}
i = 0;
i = 0
i
i
0
i < MAX_JOBS
i
i
MAX_JOBS
MAX_JOBS
i++
i
i
{				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}
if (info->work[i])					free_work(info->work[i]);
info->work[i]
info->work
info
info
work
i
i
free_work(info->work[i]);
free_work(info->work[i])
free_work
free_work
info->work[i]
info->work
info
info
work
i
i
info->work[i] = NULL;
info->work[i] = NULL
info->work[i]
info->work
info
info
work
i
i
NULL
NULL
mutex_unlock(&info->lock);
mutex_unlock(&info->lock)
mutex_unlock
mutex_unlock
&info->lock
info->lock
info
info
lock
info->update_work = 0;
info->update_work = 0
info->update_work
info
info
update_work
0
if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}
info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
info->work[info->job_id]->drv_rolllimit == 0
info->work[info->job_id]->drv_rolllimit
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
drv_rolllimit
0
{			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}
free_work(info->work[info->job_id]);
free_work(info->work[info->job_id])
free_work
free_work
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
info->work[info->job_id] = NULL;
info->work[info->job_id] = NULL
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
NULL
NULL
if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}
!info->work[info->job_id]
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
{			info->work[info->job_id] = get_work(thr, thr->id);		}
info->work[info->job_id] = get_work(thr, thr->id);
info->work[info->job_id] = get_work(thr, thr->id)
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
get_work(thr, thr->id)
get_work
get_work
thr
thr
thr->id
thr
thr
id
{			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}
info->work[info->job_id]->drv_rolllimit--;
info->work[info->job_id]->drv_rolllimit--
info->work[info->job_id]->drv_rolllimit
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
drv_rolllimit
roll_work(info->work[info->job_id]);
roll_work(info->work[info->job_id])
roll_work
roll_work
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}
info->ramping < RAMP_CT
info->ramping
info
info
ramping
RAMP_CT
RAMP_CT
{			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		}
info->ramping++;
info->ramping++
info->ramping
info
info
ramping
info->ramp_hcn += hcn_max / RAMP_CT;
info->ramp_hcn += hcn_max / RAMP_CT
info->ramp_hcn
info
info
ramp_hcn
hcn_max / RAMP_CT
hcn_max
hcn_max
RAMP_CT
RAMP_CT
info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);
info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff)
info->ramp_hcn
info
info
ramp_hcn
bound(info->ramp_hcn, 0, 0xffffffff)
bound
bound
info->ramp_hcn
info
info
ramp_hcn
0
0xffffffff
cgtime(&info->last_nonce);
cgtime(&info->last_nonce)
cgtime
cgtime
&info->last_nonce
info->last_nonce
info
info
last_nonce
{			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}
info->nonceless++;
info->nonceless++
info->nonceless
info
info
nonceless
info->active = true;
info->active = true
info->active
info
info
active
true
info->ramp_hcn = (0xffffffff / info->chips);
info->ramp_hcn = (0xffffffff / info->chips)
info->ramp_hcn
info
info
ramp_hcn
(0xffffffff / info->chips)
0xffffffff / info->chips
0xffffffff
info->chips
info
info
chips
init_task(info);
init_task(info)
init_task
init_task
info
info
frequency = info->frequency;
frequency = info->frequency
frequency
frequency
info->frequency
info
info
frequency
if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}
info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000
info->frequency != info->frequency_requested
info->frequency
info
info
frequency
info->frequency_requested
info
info
frequency_requested
ms_tdiff(&now, &info->last_freq_set) > 9 * 1000
ms_tdiff(&now, &info->last_freq_set)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_freq_set
info->last_freq_set
info
info
last_freq_set
9 * 1000
9
1000
{			frequency += 25;		}
frequency += 25;
frequency += 25
frequency
frequency
25
if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);
frequency != info->frequency
frequency
frequency
info->frequency
info
info
frequency
compac_set_frequency(compac, frequency, true);
compac_set_frequency(compac, frequency, true)
compac_set_frequency
compac_set_frequency
compac
compac
frequency
frequency
true
if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}
info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000
info->dups * 2 >= info->chips
info->dups * 2
info->dups
info
info
dups
2
info->chips
info
info
chips
ms_tdiff(&now, &info->last_chain_inactive) > 3000
ms_tdiff(&now, &info->last_chain_inactive)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_chain_inactive
info->last_chain_inactive
info
info
last_chain_inactive
3000
{			info->dups = 0;			compac_send_chain_inactive(compac);		}
info->dups = 0;
info->dups = 0
info->dups
info
info
dups
0
compac_send_chain_inactive(compac);
compac_send_chain_inactive(compac)
compac_send_chain_inactive
compac_send_chain_inactive
compac
compac
err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);
err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK)
err
err
usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK)
usb_write
usb_write
compac
compac
(char *)info->work_tx
char *
char
*
*
info->work_tx
info
info
work_tx
TX_TASK_SIZE
TX_TASK_SIZE
&read_bytes
read_bytes
read_bytes
C_SENDWORK
C_SENDWORK
if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);			usb_nodev(compac);			return -1;		}
err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE
err != LIBUSB_SUCCESS
err
err
LIBUSB_SUCCESS
LIBUSB_SUCCESS
read_bytes != TX_TASK_SIZE
read_bytes
read_bytes
TX_TASK_SIZE
TX_TASK_SIZE
{			applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);			usb_nodev(compac);			return -1;		}
applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id);
applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id)
applog
applog
LOG_WARNING
LOG_WARNING
"%s %d: Write error"
compac->drv->name
compac->drv
compac
compac
drv
name
compac->device_id
compac
compac
device_id
usb_nodev(compac);
usb_nodev(compac)
usb_nodev
usb_nodev
compac
compac
return -1;
-1
1
info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;
info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10
info->task_ms
info
info
task_ms
(info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10
(info->task_ms * 9 + ms_tdiff(&now, &info->last_task))
info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
info->task_ms * 9
info->task_ms
info
info
task_ms
9
ms_tdiff(&now, &info->last_task)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_task
info->last_task
info
info
last_task
10
cgtime(&info->last_task);
cgtime(&info->last_task)
cgtime
cgtime
&info->last_task
info->last_task
info
info
last_task
cpu_yield = bound(max_task_wait / 20, 1, 100);
cpu_yield = bound(max_task_wait / 20, 1, 100)
cpu_yield
cpu_yield
bound(max_task_wait / 20, 1, 100)
bound
bound
max_task_wait / 20
max_task_wait
max_task_wait
20
1
100
cgsleep_ms(cpu_yield);
cgsleep_ms(cpu_yield)
cgsleep_ms
cgsleep_ms
cpu_yield
cpu_yield
if (compac->shutdown)		compac_set_frequency(compac, info->frequency_start, false);
compac->shutdown
compac
compac
shutdown
compac_set_frequency(compac, info->frequency_start, false);
compac_set_frequency(compac, info->frequency_start, false)
compac_set_frequency
compac_set_frequency
compac
compac
info->frequency_start
info
info
frequency_start
false
return hashes;
hashes
hashes
-----joern-----
(461,255,0)
(404,205,0)
(475,320,0)
(332,378,0)
(386,331,0)
(209,532,0)
(51,419,0)
(258,205,0)
(132,497,0)
(14,255,0)
(424,243,0)
(171,205,0)
(39,215,0)
(540,235,0)
(479,244,0)
(283,79,0)
(443,409,0)
(258,218,0)
(269,123,0)
(187,205,0)
(389,177,0)
(72,62,0)
(336,472,0)
(440,325,0)
(300,217,0)
(76,500,0)
(415,205,0)
(466,367,0)
(62,72,0)
(227,264,0)
(7,401,0)
(400,118,0)
(178,106,0)
(236,409,0)
(105,281,0)
(309,411,0)
(156,255,0)
(270,92,0)
(342,98,0)
(17,207,0)
(309,40,0)
(511,248,0)
(264,158,0)
(335,69,0)
(356,188,0)
(141,231,0)
(105,98,0)
(396,168,0)
(105,235,0)
(0,177,0)
(76,426,0)
(323,445,0)
(222,203,0)
(360,426,0)
(52,320,0)
(161,322,0)
(198,167,0)
(147,538,0)
(483,237,0)
(372,9,0)
(287,436,0)
(144,131,0)
(34,504,0)
(358,205,0)
(485,426,0)
(122,538,0)
(472,205,0)
(284,248,0)
(396,203,0)
(278,277,0)
(255,289,0)
(512,112,0)
(57,200,0)
(459,96,0)
(207,236,0)
(138,78,0)
(101,172,0)
(441,240,0)
(241,208,0)
(437,426,0)
(273,200,0)
(297,515,0)
(193,401,0)
(423,464,0)
(308,205,0)
(402,58,0)
(223,205,0)
(88,89,0)
(182,486,0)
(492,205,0)
(31,409,0)
(475,205,0)
(315,205,0)
(378,187,0)
(491,435,0)
(41,458,0)
(91,258,0)
(318,358,0)
(210,213,0)
(197,211,0)
(468,472,0)
(538,205,0)
(222,205,0)
(468,255,0)
(89,88,0)
(54,414,0)
(521,64,0)
(414,255,0)
(404,41,0)
(112,205,0)
(353,442,0)
(166,399,0)
(349,410,0)
(507,118,0)
(329,403,0)
(200,253,0)
(392,233,0)
(311,201,0)
(126,403,0)
(444,426,0)
(25,171,0)
(127,426,0)
(169,130,0)
(487,317,0)
(52,217,0)
(456,231,0)
(41,243,0)
(218,195,0)
(116,436,0)
(203,215,0)
(398,73,0)
(278,413,0)
(35,398,0)
(110,147,0)
(253,200,0)
(524,421,0)
(105,395,0)
(439,281,0)
(47,361,0)
(192,84,0)
(189,205,0)
(43,40,0)
(14,395,0)
(219,308,0)
(508,471,0)
(465,419,0)
(388,464,0)
(180,324,0)
(284,73,0)
(63,47,0)
(113,8,0)
(306,213,0)
(346,416,0)
(189,235,0)
(264,255,0)
(344,428,0)
(225,221,0)
(420,315,0)
(28,217,0)
(191,42,0)
(41,474,0)
(42,313,0)
(40,43,0)
(491,440,0)
(504,386,0)
(530,101,0)
(158,192,0)
(168,396,0)
(210,205,0)
(2,404,0)
(536,255,0)
(357,538,0)
(100,361,0)
(90,435,0)
(261,80,0)
(200,362,0)
(325,373,0)
(133,360,0)
(252,361,0)
(443,205,0)
(140,313,0)
(229,210,0)
(293,194,0)
(316,274,0)
(403,329,0)
(105,233,0)
(38,537,0)
(106,56,0)
(362,200,0)
(365,289,0)
(458,205,0)
(515,300,0)
(12,527,0)
(55,108,0)
(390,187,0)
(536,253,0)
(101,205,0)
(393,90,0)
(124,452,0)
(244,35,0)
(277,278,0)
(123,426,0)
(386,195,0)
(541,70,0)
(79,205,0)
(82,211,0)
(293,180,0)
(412,329,0)
(452,63,0)
(461,288,0)
(96,413,0)
(471,205,0)
(389,10,0)
(280,492,0)
(274,205,0)
(326,473,0)
(389,413,0)
(484,241,0)
(473,500,0)
(220,475,0)
(539,426,0)
(239,527,0)
(192,395,0)
(339,416,0)
(387,154,0)
(350,90,0)
(105,367,0)
(322,10,0)
(320,52,0)
(207,17,0)
(80,394,0)
(411,355,0)
(527,145,0)
(191,186,0)
(40,309,0)
(27,331,0)
(380,442,0)
(542,260,0)
(130,135,0)
(65,426,0)
(464,423,0)
(410,299,0)
(540,233,0)
(174,252,0)
(473,205,0)
(121,362,0)
(298,210,0)
(179,205,0)
(160,426,0)
(248,284,0)
(148,211,0)
(59,13,0)
(231,205,0)
(288,508,0)
(290,419,0)
(367,205,0)
(158,264,0)
(186,503,0)
(337,67,0)
(307,244,0)
(259,257,0)
(514,339,0)
(104,236,0)
(540,293,0)
(1,130,0)
(235,243,0)
(333,506,0)
(41,404,0)
(137,31,0)
(46,76,0)
(417,187,0)
(520,359,0)
(293,376,0)
(215,205,0)
(272,74,0)
(310,97,0)
(230,320,0)
(260,205,0)
(37,426,0)
(72,506,0)
(351,440,0)
(449,499,0)
(523,468,0)
(21,231,0)
(481,62,0)
(474,108,0)
(513,362,0)
(8,105,0)
(13,69,0)
(353,288,0)
(371,510,0)
(355,411,0)
(314,389,0)
(423,426,0)
(86,69,0)
(527,399,0)
(78,55,0)
(516,308,0)
(448,426,0)
(7,205,0)
(391,26,0)
(152,492,0)
(60,320,0)
(540,529,0)
(143,54,0)
(105,504,0)
(112,460,0)
(221,205,0)
(452,205,0)
(312,221,0)
(410,205,0)
(515,205,0)
(490,189,0)
(87,288,0)
(94,472,0)
(510,255,0)
(164,461,0)
(414,54,0)
(246,40,0)
(353,508,0)
(213,306,0)
(143,532,0)
(394,322,0)
(431,329,0)
(529,540,0)
(403,126,0)
(543,132,0)
(132,73,0)
(77,414,0)
(5,211,0)
(508,211,0)
(170,255,0)
(144,255,0)
(10,322,0)
(438,415,0)
(339,170,0)
(35,244,0)
(279,480,0)
(147,110,0)
(201,211,0)
(26,133,0)
(450,50,0)
(278,126,0)
(63,452,0)
(105,258,0)
(272,443,0)
(96,499,0)
(436,287,0)
(398,35,0)
(12,105,0)
(301,343,0)
(404,409,0)
(482,110,0)
(203,222,0)
(118,205,0)
(519,503,0)
(419,290,0)
(531,18,0)
(330,205,0)
(85,367,0)
(318,78,0)
(187,378,0)
(383,358,0)
(472,468,0)
(277,492,0)
(74,272,0)
(415,409,0)
(537,272,0)
(105,33,0)
(58,480,0)
(488,179,0)
(313,205,0)
(142,79,0)
(406,143,0)
(340,168,0)
(49,211,0)
(476,64,0)
(237,205,0)
(179,42,0)
(364,236,0)
(312,411,0)
(331,421,0)
(224,177,0)
(320,475,0)
(271,355,0)
(418,536,0)
(242,237,0)
(334,128,0)
(235,415,0)
(249,99,0)
(128,79,0)
(449,205,0)
(58,205,0)
(262,461,0)
(352,387,0)
(489,426,0)
(32,218,0)
(234,537,0)
(540,93,0)
(204,192,0)
(318,243,0)
(385,96,0)
(213,16,0)
(64,13,0)
(462,135,0)
(162,529,0)
(322,394,0)
(263,205,0)
(518,396,0)
(103,458,0)
(12,208,0)
(318,6,0)
(505,264,0)
(467,426,0)
(105,399,0)
(70,170,0)
(163,26,0)
(478,508,0)
(279,426,0)
(281,252,0)
(345,504,0)
(159,452,0)
(133,26,0)
(498,222,0)
(42,179,0)
(442,353,0)
(114,102,0)
(347,33,0)
(486,171,0)
(330,233,0)
(257,497,0)
(84,192,0)
(213,506,0)
(188,506,0)
(413,96,0)
(409,211,0)
(99,398,0)
(432,260,0)
(492,277,0)
(115,80,0)
(504,205,0)
(413,426,0)
(522,468,0)
(48,211,0)
(64,426,0)
(130,205,0)
(308,455,0)
(88,496,0)
(419,413,0)
(394,80,0)
(540,387,0)
(202,416,0)
(502,361,0)
(171,486,0)
(328,317,0)
(232,426,0)
(47,63,0)
(172,237,0)
(93,205,0)
(248,205,0)
(500,426,0)
(80,205,0)
(373,260,0)
(313,42,0)
(435,90,0)
(255,426,0)
(205,426,0)
(291,410,0)
(117,211,0)
(384,215,0)
(470,165,0)
(180,89,0)
(299,290,0)
(238,194,0)
(69,177,0)
(528,7,0)
(434,476,0)
(107,288,0)
(325,440,0)
(172,408,0)
(10,389,0)
(54,143,0)
(186,191,0)
(110,186,0)
(24,449,0)
(480,279,0)
(98,205,0)
(525,353,0)
(6,205,0)
(84,255,0)
(200,131,0)
(71,84,0)
(368,536,0)
(435,491,0)
(185,257,0)
(533,473,0)
(377,499,0)
(30,154,0)
(398,99,0)
(373,378,0)
(460,28,0)
(184,443,0)
(440,491,0)
(48,287,0)
(401,145,0)
(95,9,0)
(527,387,0)
(245,156,0)
(540,217,0)
(231,141,0)
(292,290,0)
(214,295,0)
(233,506,0)
(105,293,0)
(170,486,0)
(409,31,0)
(73,398,0)
(233,16,0)
(42,191,0)
(11,97,0)
(194,205,0)
(436,205,0)
(367,240,0)
(348,189,0)
(13,64,0)
(81,72,0)
(268,50,0)
(458,41,0)
(154,426,0)
(89,496,0)
(43,426,0)
(83,62,0)
(79,128,0)
(495,263,0)
(9,205,0)
(295,506,0)
(537,205,0)
(408,172,0)
(529,279,0)
(303,31,0)
(461,508,0)
(98,540,0)
(155,376,0)
(282,515,0)
(422,112,0)
(92,255,0)
(175,84,0)
(73,132,0)
(411,312,0)
(250,387,0)
(362,255,0)
(74,168,0)
(253,536,0)
(407,33,0)
(167,480,0)
(126,278,0)
(125,471,0)
(23,500,0)
(26,205,0)
(535,358,0)
(480,167,0)
(475,540,0)
(415,235,0)
(538,147,0)
(309,135,0)
(243,251,0)
(31,303,0)
(491,18,0)
(305,255,0)
(474,41,0)
(90,205,0)
(526,255,0)
(286,415,0)
(165,207,0)
(433,526,0)
(463,88,0)
(194,293,0)
(527,7,0)
(12,250,0)
(503,186,0)
(425,426,0)
(29,426,0)
(12,76,0)
(497,132,0)
(319,253,0)
(331,386,0)
(61,10,0)
(510,145,0)
(317,487,0)
(446,167,0)
(237,409,0)
(205,9,0)
(265,313,0)
(168,74,0)
(129,317,0)
(454,6,0)
(493,6,0)
(480,58,0)
(341,404,0)
(272,537,0)
(172,243,0)
(526,509,0)
(497,211,0)
(260,373,0)
(68,106,0)
(289,496,0)
(250,399,0)
(93,409,0)
(221,312,0)
(387,205,0)
(267,171,0)
(56,106,0)
(92,146,0)
(429,532,0)
(416,426,0)
(442,205,0)
(381,14,0)
(20,254,0)
(106,416,0)
(67,255,0)
(317,205,0)
(135,130,0)
(370,426,0)
(250,131,0)
(33,205,0)
(329,205,0)
(186,110,0)
(378,373,0)
(102,126,0)
(143,145,0)
(457,475,0)
(69,413,0)
(15,16,0)
(321,170,0)
(6,409,0)
(427,156,0)
(382,482,0)
(399,43,0)
(53,284,0)
(276,443,0)
(6,318,0)
(236,207,0)
(119,101,0)
(354,58,0)
(494,93,0)
(376,293,0)
(105,93,0)
(419,177,0)
(476,426,0)
(540,399,0)
(540,281,0)
(499,449,0)
(173,426,0)
(411,309,0)
(240,327,0)
(17,251,0)
(78,318,0)
(111,458,0)
(151,144,0)
(139,509,0)
(376,205,0)
(150,375,0)
(499,96,0)
(105,387,0)
(4,399,0)
(206,506,0)
(67,327,0)
(397,289,0)
(455,195,0)
(33,52,0)
(28,460,0)
(300,515,0)
(216,263,0)
(266,442,0)
(379,421,0)
(338,158,0)
(136,529,0)
(460,112,0)
(181,98,0)
(421,205,0)
(358,318,0)
(62,205,0)
(134,387,0)
(363,211,0)
(73,284,0)
(222,409,0)
(19,213,0)
(69,13,0)
(287,48,0)
(315,303,0)
(278,177,0)
(44,188,0)
(235,189,0)
(477,389,0)
(428,366,0)
(487,100,0)
(170,70,0)
(257,205,0)
(247,414,0)
(172,101,0)
(36,54,0)
(236,205,0)
(190,248,0)
(469,461,0)
(215,203,0)
(196,426,0)
(118,359,0)
(212,211,0)
(486,170,0)
(165,205,0)
(369,376,0)
(509,526,0)
(302,7,0)
(343,250,0)
(360,133,0)
(55,78,0)
(97,56,0)
(50,426,0)
(233,330,0)
(120,192,0)
(447,93,0)
(201,205,0)
(303,315,0)
(281,205,0)
(126,102,0)
(532,143,0)
(89,180,0)
(299,410,0)
(157,303,0)
(256,88,0)
(226,526,0)
(500,473,0)
(97,70,0)
(228,143,0)
(176,471,0)
(517,281,0)
(56,97,0)
(237,172,0)
(3,449,0)
(153,221,0)
(45,194,0)
(296,170,0)
(100,487,0)
(532,255,0)
(207,165,0)
(18,491,0)
(154,500,0)
(244,205,0)
(399,205,0)
(75,123,0)
(275,436,0)
(290,299,0)
(405,89,0)
(294,413,0)
(304,279,0)
(16,445,0)
(366,146,0)
(430,222,0)
(486,182,0)
(170,339,0)
(373,325,0)
(9,255,0)
(455,308,0)
(12,366,0)
(110,482,0)
(443,272,0)
(135,309,0)
(199,13,0)
(285,274,0)
(288,66,0)
(289,255,0)
(374,179,0)
(501,165,0)
(192,158,0)
(203,396,0)
(453,170,0)
(471,508,0)
(22,503,0)
(109,278,0)
(534,315,0)
(451,330,0)
(421,331,0)
(376,409,0)
(183,330,0)
(213,210,0)
(70,211,0)
(359,118,0)
(149,258,0)
(109,126,1)
(128,334,1)
(35,244,1)
(461,164,1)
(408,172,1)
(470,501,1)
(130,169,1)
(243,424,1)
(350,393,1)
(441,367,1)
(174,281,1)
(452,159,1)
(103,111,1)
(278,109,1)
(315,205,1)
(259,185,1)
(18,531,1)
(277,278,1)
(286,438,1)
(203,222,1)
(114,492,1)
(526,433,1)
(72,81,1)
(391,43,1)
(521,277,1)
(207,236,1)
(13,69,1)
(495,409,1)
(276,184,1)
(156,245,1)
(512,52,1)
(171,25,1)
(365,397,1)
(205,9,1)
(515,205,1)
(309,135,1)
(12,250,1)
(203,215,1)
(11,310,1)
(73,284,1)
(239,401,1)
(132,73,1)
(7,205,1)
(105,233,1)
(135,462,1)
(461,288,1)
(531,373,1)
(38,252,1)
(402,354,1)
(98,205,1)
(541,325,1)
(56,106,1)
(247,77,1)
(121,513,1)
(362,255,1)
(58,205,1)
(57,394,1)
(416,202,1)
(326,23,1)
(26,205,1)
(410,205,1)
(271,135,1)
(304,50,1)
(62,481,1)
(91,149,1)
(360,133,1)
(278,177,1)
(260,432,1)
(513,253,1)
(132,543,1)
(222,430,1)
(299,410,1)
(306,213,1)
(43,40,1)
(193,7,1)
(317,129,1)
(215,205,1)
(449,205,1)
(200,253,1)
(499,377,1)
(184,537,1)
(210,205,1)
(180,89,1)
(358,383,1)
(84,255,1)
(140,508,1)
(461,508,1)
(333,206,1)
(25,267,1)
(269,75,1)
(387,134,1)
(73,398,1)
(476,64,1)
(418,368,1)
(443,409,1)
(341,2,1)
(334,79,1)
(4,423,1)
(494,447,1)
(421,205,1)
(338,264,1)
(353,288,1)
(378,332,1)
(379,524,1)
(281,517,1)
(14,255,1)
(26,163,1)
(466,325,1)
(249,284,1)
(330,183,1)
(63,452,1)
(311,386,1)
(398,99,1)
(235,415,1)
(236,205,1)
(41,404,1)
(293,194,1)
(359,118,1)
(142,180,1)
(295,506,1)
(288,508,1)
(521,48,1)
(3,294,1)
(210,229,1)
(542,378,1)
(72,62,1)
(215,384,1)
(419,413,1)
(126,102,1)
(89,88,1)
(443,205,1)
(201,205,1)
(390,417,1)
(458,205,1)
(322,10,1)
(481,83,1)
(393,18,1)
(540,93,1)
(420,93,1)
(389,477,1)
(414,255,1)
(252,174,1)
(300,515,1)
(280,394,1)
(188,506,1)
(358,205,1)
(244,307,1)
(373,260,1)
(88,496,1)
(202,346,1)
(540,293,1)
(123,269,1)
(415,286,1)
(12,208,1)
(187,390,1)
(31,303,1)
(525,191,1)
(432,542,1)
(113,14,1)
(457,220,1)
(325,373,1)
(30,387,1)
(318,243,1)
(84,175,1)
(417,353,1)
(414,247,1)
(404,409,1)
(492,205,1)
(328,188,1)
(536,418,1)
(143,54,1)
(170,339,1)
(381,192,1)
(380,525,1)
(0,224,1)
(56,97,1)
(417,461,1)
(292,410,1)
(336,94,1)
(191,42,1)
(312,221,1)
(310,70,1)
(93,205,1)
(97,11,1)
(248,190,1)
(527,7,1)
(86,335,1)
(525,288,1)
(213,16,1)
(458,103,1)
(161,80,1)
(474,41,1)
(162,136,1)
(39,272,1)
(110,482,1)
(472,205,1)
(307,479,1)
(42,313,1)
(262,353,1)
(335,521,1)
(337,240,1)
(165,470,1)
(229,298,1)
(359,520,1)
(98,181,1)
(529,279,1)
(517,439,1)
(238,408,1)
(482,382,1)
(317,205,1)
(71,158,1)
(222,205,1)
(491,18,1)
(325,440,1)
(506,333,1)
(7,528,1)
(209,429,1)
(171,205,1)
(172,243,1)
(519,110,1)
(233,330,1)
(526,255,1)
(199,59,1)
(124,263,1)
(76,46,1)
(277,492,1)
(12,105,1)
(454,358,1)
(396,518,1)
(383,535,1)
(339,514,1)
(331,421,1)
(41,458,1)
(250,343,1)
(112,422,1)
(46,156,1)
(92,270,1)
(303,315,1)
(80,205,1)
(88,463,1)
(255,289,1)
(472,336,1)
(283,142,1)
(397,305,1)
(382,42,1)
(313,205,1)
(169,1,1)
(316,285,1)
(119,530,1)
(329,205,1)
(147,538,1)
(290,419,1)
(189,348,1)
(453,339,1)
(179,205,1)
(527,399,1)
(237,205,1)
(105,235,1)
(231,21,1)
(112,205,1)
(294,279,1)
(106,416,1)
(295,214,1)
(218,32,1)
(17,207,1)
(87,107,1)
(320,230,1)
(449,24,1)
(204,56,1)
(54,36,1)
(533,326,1)
(233,506,1)
(74,272,1)
(15,233,1)
(412,102,1)
(479,99,1)
(537,205,1)
(469,262,1)
(33,347,1)
(540,399,1)
(431,412,1)
(237,483,1)
(480,167,1)
(94,523,1)
(321,486,1)
(155,194,1)
(213,19,1)
(77,228,1)
(424,235,1)
(411,355,1)
(436,205,1)
(475,540,1)
(279,480,1)
(462,130,1)
(508,471,1)
(537,234,1)
(278,413,1)
(12,527,1)
(354,304,1)
(419,465,1)
(498,215,1)
(529,162,1)
(285,299,1)
(339,416,1)
(468,255,1)
(355,271,1)
(451,306,1)
(540,529,1)
(332,187,1)
(136,98,1)
(8,113,1)
(428,344,1)
(138,318,1)
(353,508,1)
(96,459,1)
(282,128,1)
(185,56,1)
(433,226,1)
(68,178,1)
(515,297,1)
(72,506,1)
(318,358,1)
(236,409,1)
(233,392,1)
(499,449,1)
(258,205,1)
(142,474,1)
(311,28,1)
(90,205,1)
(172,237,1)
(59,69,1)
(264,505,1)
(250,387,1)
(442,205,1)
(510,371,1)
(309,411,1)
(102,114,1)
(28,460,1)
(463,256,1)
(122,482,1)
(24,3,1)
(12,366,1)
(248,205,1)
(186,110,1)
(473,205,1)
(522,472,1)
(105,504,1)
(320,475,1)
(523,156,1)
(250,399,1)
(104,364,1)
(99,249,1)
(419,177,1)
(189,205,1)
(253,319,1)
(256,405,1)
(70,170,1)
(389,177,1)
(443,276,1)
(175,71,1)
(156,255,1)
(388,154,1)
(287,436,1)
(465,51,1)
(430,498,1)
(439,100,1)
(10,389,1)
(52,320,1)
(105,33,1)
(226,413,1)
(222,409,1)
(301,144,1)
(514,321,1)
(78,318,1)
(42,179,1)
(12,76,1)
(452,205,1)
(460,112,1)
(158,264,1)
(289,496,1)
(220,33,1)
(538,205,1)
(194,45,1)
(413,96,1)
(106,68,1)
(95,223,1)
(33,205,1)
(101,119,1)
(257,259,1)
(14,381,1)
(235,189,1)
(373,378,1)
(530,243,1)
(133,26,1)
(505,227,1)
(450,123,1)
(272,537,1)
(520,118,1)
(396,203,1)
(509,526,1)
(468,522,1)
(55,78,1)
(153,225,1)
(60,475,1)
(541,67,1)
(23,359,1)
(351,491,1)
(480,58,1)
(298,72,1)
(435,90,1)
(503,22,1)
(389,413,1)
(527,239,1)
(486,171,1)
(221,205,1)
(78,138,1)
(291,349,1)
(105,93,1)
(422,512,1)
(186,503,1)
(47,63,1)
(179,488,1)
(163,391,1)
(427,476,1)
(374,313,1)
(236,104,1)
(58,402,1)
(34,345,1)
(81,62,1)
(27,504,1)
(534,420,1)
(315,534,1)
(488,374,1)
(230,60,1)
(477,314,1)
(518,203,1)
(105,367,1)
(192,158,1)
(261,115,1)
(44,356,1)
(284,248,1)
(38,263,1)
(538,357,1)
(347,407,1)
(386,331,1)
(507,141,1)
(246,309,1)
(32,258,1)
(111,55,1)
(105,258,1)
(362,121,1)
(67,255,1)
(9,255,1)
(401,193,1)
(118,400,1)
(237,409,1)
(46,468,1)
(48,287,1)
(299,290,1)
(19,210,1)
(468,472,1)
(228,406,1)
(207,165,1)
(356,506,1)
(293,376,1)
(540,281,1)
(473,533,1)
(257,205,1)
(242,101,1)
(190,511,1)
(442,266,1)
(510,255,1)
(130,205,1)
(9,372,1)
(152,280,1)
(501,74,1)
(159,124,1)
(6,493,1)
(224,359,1)
(415,409,1)
(511,257,1)
(97,70,1)
(79,205,1)
(349,360,1)
(128,79,1)
(471,205,1)
(423,464,1)
(2,458,1)
(157,315,1)
(79,283,1)
(318,6,1)
(540,233,1)
(105,281,1)
(135,130,1)
(367,205,1)
(376,369,1)
(387,205,1)
(151,200,1)
(438,189,1)
(464,388,1)
(107,191,1)
(275,497,1)
(509,139,1)
(40,246,1)
(378,187,1)
(367,85,1)
(314,61,1)
(376,409,1)
(62,205,1)
(263,216,1)
(200,362,1)
(288,87,1)
(535,408,1)
(120,204,1)
(75,416,1)
(223,255,1)
(69,413,1)
(377,449,1)
(166,4,1)
(221,153,1)
(342,300,1)
(139,526,1)
(492,152,1)
(170,486,1)
(245,427,1)
(274,205,1)
(405,293,1)
(54,414,1)
(74,168,1)
(80,261,1)
(356,295,1)
(268,450,1)
(369,155,1)
(493,454,1)
(476,434,1)
(364,165,1)
(352,500,1)
(6,205,1)
(69,177,1)
(101,205,1)
(540,387,1)
(536,255,1)
(183,451,1)
(483,242,1)
(176,478,1)
(92,255,1)
(264,255,1)
(366,428,1)
(434,64,1)
(164,469,1)
(194,205,1)
(144,151,1)
(141,231,1)
(105,387,1)
(168,396,1)
(278,126,1)
(51,292,1)
(475,205,1)
(231,205,1)
(181,342,1)
(116,275,1)
(234,38,1)
(168,340,1)
(543,73,1)
(158,338,1)
(404,205,1)
(154,30,1)
(527,387,1)
(260,205,1)
(105,8,1)
(253,536,1)
(353,442,1)
(110,147,1)
(258,91,1)
(96,499,1)
(263,205,1)
(436,116,1)
(530,74,1)
(265,140,1)
(376,205,1)
(410,291,1)
(303,157,1)
(497,132,1)
(392,330,1)
(516,219,1)
(53,248,1)
(126,403,1)
(421,379,1)
(400,507,1)
(346,205,1)
(471,125,1)
(399,166,1)
(206,47,1)
(172,101,1)
(407,540,1)
(22,519,1)
(45,238,1)
(105,293,1)
(456,509,1)
(191,186,1)
(446,198,1)
(487,317,1)
(451,72,1)
(406,274,1)
(398,35,1)
(289,365,1)
(532,209,1)
(241,484,1)
(6,409,1)
(23,177,1)
(486,182,1)
(297,282,1)
(201,311,1)
(447,277,1)
(357,122,1)
(372,95,1)
(272,443,1)
(475,457,1)
(213,506,1)
(399,205,1)
(83,188,1)
(459,385,1)
(41,243,1)
(344,92,1)
(329,431,1)
(491,435,1)
(115,274,1)
(21,456,1)
(319,536,1)
(484,509,1)
(105,399,1)
(440,351,1)
(244,205,1)
(90,350,1)
(177,0,1)
(213,210,1)
(149,455,1)
(266,380,1)
(490,17,1)
(394,80,1)
(411,312,1)
(478,201,1)
(50,268,1)
(64,13,1)
(528,302,1)
(118,205,1)
(170,453,1)
(31,137,1)
(13,199,1)
(225,355,1)
(504,205,1)
(187,205,1)
(524,27,1)
(403,329,1)
(343,301,1)
(67,337,1)
(280,299,1)
(192,84,1)
(270,141,1)
(340,396,1)
(308,516,1)
(143,532,1)
(273,57,1)
(440,491,1)
(394,322,1)
(345,218,1)
(371,143,1)
(178,97,1)
(461,255,1)
(415,205,1)
(455,308,1)
(409,31,1)
(76,500,1)
(144,255,1)
(1,399,1)
(308,205,1)
(167,446,1)
(504,34,1)
(274,316,1)
(40,309,1)
(532,255,1)
(61,161,1)
(385,499,1)
(208,241,1)
(134,352,1)
(85,466,1)
(302,510,1)
(129,328,1)
(100,487,1)
(500,473,1)
(69,86,1)
(36,414,1)
(216,495,1)
(368,273,1)
(170,255,1)
(313,265,1)
(296,541,1)
(89,496,1)
(137,303,1)
(219,128,1)
(165,205,1)
(267,296,1)
(93,494,1)
(105,98,1)
(284,53,1)
(348,490,1)
(16,15,1)
(240,441,1)
(227,120,1)
(404,341,1)
(125,176,1)
(198,58,1)
(429,54,1)
(188,44,1)
(384,39,1)
(540,235,1)
(154,500,1)
(214,16,1)
(330,205,1)
(281,205,1)
(143,274,2)
(247,274,2)
(222,409,2)
(188,188,2)
(339,416,2)
(353,277,2)
(90,205,2)
(48,287,2)
(59,56,2)
(57,394,2)
(84,56,2)
(122,42,2)
(105,387,2)
(317,205,2)
(23,141,2)
(473,205,2)
(13,277,2)
(258,205,2)
(94,156,2)
(455,308,2)
(297,128,2)
(300,515,2)
(394,80,2)
(387,205,2)
(62,205,2)
(315,277,2)
(52,128,2)
(22,42,2)
(501,74,2)
(33,128,2)
(112,128,2)
(480,167,2)
(505,56,2)
(183,188,2)
(310,277,2)
(507,141,2)
(422,128,2)
(207,236,2)
(0,359,2)
(411,141,2)
(435,90,2)
(285,299,2)
(266,277,2)
(102,492,2)
(76,500,2)
(13,69,2)
(48,56,2)
(281,263,2)
(218,128,2)
(492,205,2)
(540,293,2)
(222,205,2)
(427,56,2)
(180,408,2)
(440,373,2)
(165,205,2)
(453,277,2)
(276,277,2)
(322,10,2)
(129,263,2)
(6,409,2)
(369,408,2)
(257,56,2)
(464,141,2)
(429,274,2)
(85,325,2)
(260,277,2)
(510,274,2)
(185,56,2)
(149,128,2)
(172,101,2)
(398,35,2)
(53,56,2)
(144,255,2)
(275,56,2)
(162,128,2)
(178,97,2)
(515,205,2)
(248,205,2)
(105,235,2)
(468,255,2)
(236,205,2)
(259,56,2)
(474,41,2)
(215,205,2)
(42,277,2)
(325,373,2)
(319,394,2)
(109,492,2)
(31,277,2)
(56,277,2)
(540,93,2)
(527,274,2)
(135,130,2)
(488,277,2)
(126,492,2)
(462,141,2)
(14,255,2)
(12,76,2)
(500,473,2)
(415,205,2)
(56,97,2)
(201,277,2)
(364,74,2)
(358,408,2)
(362,394,2)
(530,277,2)
(299,290,2)
(295,506,2)
(168,396,2)
(272,537,2)
(156,56,2)
(99,56,2)
(105,233,2)
(487,263,2)
(458,408,2)
(386,331,2)
(249,56,2)
(359,118,2)
(93,205,2)
(100,487,2)
(110,42,2)
(104,74,2)
(64,56,2)
(479,56,2)
(386,128,2)
(101,205,2)
(245,56,2)
(458,205,2)
(231,509,2)
(96,499,2)
(415,409,2)
(12,366,2)
(214,188,2)
(404,408,2)
(69,277,2)
(523,156,2)
(303,277,2)
(499,449,2)
(508,471,2)
(282,128,2)
(309,135,2)
(491,435,2)
(17,74,2)
(528,274,2)
(113,56,2)
(244,56,2)
(157,277,2)
(151,394,2)
(105,281,2)
(504,128,2)
(46,56,2)
(143,54,2)
(27,128,2)
(442,277,2)
(46,277,2)
(466,325,2)
(486,182,2)
(387,141,2)
(250,394,2)
(492,394,2)
(321,277,2)
(152,394,2)
(423,141,2)
(349,141,2)
(299,410,2)
(503,42,2)
(250,387,2)
(187,277,2)
(33,205,2)
(521,277,2)
(480,58,2)
(389,177,2)
(239,274,2)
(540,235,2)
(378,277,2)
(64,277,2)
(413,96,2)
(44,188,2)
(67,325,2)
(306,213,2)
(257,205,2)
(461,508,2)
(105,33,2)
(100,263,2)
(315,205,2)
(510,255,2)
(287,56,2)
(51,141,2)
(168,272,2)
(336,156,2)
(443,277,2)
(475,205,2)
(419,177,2)
(69,56,2)
(529,279,2)
(476,64,2)
(436,56,2)
(320,475,2)
(203,222,2)
(181,128,2)
(142,277,2)
(442,205,2)
(394,274,2)
(474,408,2)
(277,299,2)
(32,128,2)
(78,408,2)
(516,128,2)
(88,408,2)
(41,408,2)
(221,141,2)
(70,170,2)
(283,277,2)
(527,7,2)
(76,277,2)
(309,141,2)
(424,74,2)
(411,312,2)
(190,56,2)
(229,72,2)
(328,263,2)
(408,277,2)
(132,73,2)
(540,399,2)
(540,387,2)
(105,504,2)
(272,443,2)
(201,205,2)
(278,126,2)
(318,358,2)
(483,277,2)
(452,205,2)
(237,205,2)
(60,128,2)
(263,277,2)
(207,165,2)
(191,186,2)
(26,205,2)
(256,408,2)
(487,317,2)
(543,56,2)
(40,309,2)
(258,128,2)
(262,353,2)
(469,353,2)
(540,281,2)
(477,274,2)
(193,274,2)
(379,128,2)
(512,128,2)
(533,141,2)
(80,205,2)
(326,141,2)
(112,205,2)
(284,56,2)
(408,172,2)
(147,42,2)
(225,141,2)
(248,56,2)
(184,277,2)
(134,141,2)
(508,277,2)
(524,128,2)
(410,205,2)
(76,56,2)
(34,128,2)
(374,277,2)
(356,188,2)
(189,205,2)
(213,506,2)
(404,205,2)
(28,460,2)
(84,255,2)
(67,255,2)
(170,486,2)
(55,78,2)
(10,274,2)
(331,421,2)
(88,496,2)
(506,263,2)
(9,255,2)
(106,97,2)
(156,255,2)
(289,496,2)
(44,263,2)
(293,408,2)
(517,263,2)
(431,492,2)
(471,205,2)
(191,42,2)
(264,56,2)
(200,253,2)
(288,508,2)
(443,205,2)
(520,141,2)
(141,509,2)
(186,110,2)
(73,56,2)
(177,359,2)
(28,128,2)
(63,263,2)
(35,244,2)
(438,74,2)
(373,378,2)
(399,205,2)
(43,141,2)
(264,255,2)
(417,277,2)
(393,373,2)
(280,394,2)
(436,205,2)
(103,408,2)
(318,408,2)
(340,272,2)
(293,194,2)
(339,277,2)
(40,141,2)
(284,248,2)
(515,128,2)
(179,205,2)
(188,506,2)
(172,277,2)
(534,277,2)
(47,63,2)
(461,288,2)
(471,277,2)
(532,255,2)
(540,529,2)
(504,205,2)
(233,330,2)
(334,277,2)
(171,205,2)
(163,141,2)
(15,188,2)
(71,56,2)
(383,408,2)
(332,277,2)
(460,128,2)
(337,325,2)
(460,112,2)
(410,141,2)
(403,492,2)
(476,56,2)
(164,353,2)
(56,106,2)
(235,415,2)
(388,141,2)
(298,72,2)
(26,141,2)
(329,492,2)
(421,128,2)
(299,141,2)
(306,72,2)
(250,399,2)
(200,394,2)
(62,188,2)
(478,277,2)
(97,70,2)
(233,506,2)
(525,277,2)
(19,72,2)
(491,18,2)
(141,231,2)
(77,274,2)
(389,413,2)
(443,409,2)
(529,128,2)
(303,315,2)
(389,274,2)
(318,243,2)
(147,538,2)
(492,299,2)
(98,128,2)
(242,277,2)
(194,408,2)
(64,13,2)
(518,272,2)
(384,272,2)
(404,409,2)
(271,141,2)
(203,215,2)
(72,62,2)
(538,205,2)
(154,500,2)
(392,188,2)
(312,141,2)
(21,509,2)
(194,205,2)
(497,132,2)
(144,394,2)
(542,277,2)
(368,394,2)
(237,409,2)
(475,540,2)
(288,191,2)
(175,56,2)
(89,88,2)
(110,147,2)
(439,263,2)
(63,452,2)
(35,56,2)
(330,188,2)
(126,403,2)
(39,272,2)
(415,74,2)
(353,442,2)
(235,74,2)
(106,416,2)
(309,411,2)
(169,141,2)
(132,56,2)
(390,277,2)
(136,128,2)
(210,205,2)
(83,188,2)
(89,496,2)
(241,509,2)
(457,128,2)
(93,277,2)
(189,74,2)
(61,274,2)
(434,277,2)
(325,277,2)
(380,277,2)
(367,325,2)
(272,277,2)
(180,89,2)
(255,289,2)
(540,233,2)
(509,526,2)
(121,394,2)
(166,141,2)
(7,205,2)
(456,509,2)
(12,250,2)
(128,79,2)
(342,128,2)
(125,277,2)
(277,492,2)
(473,141,2)
(213,210,2)
(526,255,2)
(98,205,2)
(92,141,2)
(253,536,2)
(161,274,2)
(461,255,2)
(210,72,2)
(170,255,2)
(42,313,2)
(490,74,2)
(373,277,2)
(118,141,2)
(500,141,2)
(1,141,2)
(126,102,2)
(114,492,2)
(366,141,2)
(399,141,2)
(92,255,2)
(8,56,2)
(430,272,2)
(468,472,2)
(355,141,2)
(176,277,2)
(532,274,2)
(81,188,2)
(491,373,2)
(475,128,2)
(353,288,2)
(245,277,2)
(484,509,2)
(192,56,2)
(220,128,2)
(153,141,2)
(343,394,2)
(382,42,2)
(186,503,2)
(409,277,2)
(353,508,2)
(208,509,2)
(394,322,2)
(313,205,2)
(179,277,2)
(521,56,2)
(25,277,2)
(513,394,2)
(362,255,2)
(351,373,2)
(537,205,2)
(227,56,2)
(273,394,2)
(41,458,2)
(105,98,2)
(72,188,2)
(451,188,2)
(396,203,2)
(300,128,2)
(191,277,2)
(4,141,2)
(170,339,2)
(344,141,2)
(314,274,2)
(522,156,2)
(105,399,2)
(455,128,2)
(231,205,2)
(486,171,2)
(325,440,2)
(41,243,2)
(274,205,2)
(6,205,2)
(13,56,2)
(537,277,2)
(170,277,2)
(130,205,2)
(414,255,2)
(236,74,2)
(367,205,2)
(233,188,2)
(277,278,2)
(105,367,2)
(80,274,2)
(6,408,2)
(280,299,2)
(427,277,2)
(54,414,2)
(137,277,2)
(541,277,2)
(16,188,2)
(174,263,2)
(403,329,2)
(421,205,2)
(192,158,2)
(409,31,2)
(236,409,2)
(213,16,2)
(224,359,2)
(158,56,2)
(244,205,2)
(235,189,2)
(291,141,2)
(432,277,2)
(302,274,2)
(420,277,2)
(205,9,2)
(203,272,2)
(207,74,2)
(278,413,2)
(133,141,2)
(228,274,2)
(481,188,2)
(378,187,2)
(454,408,2)
(52,320,2)
(70,277,2)
(419,413,2)
(335,56,2)
(313,277,2)
(68,97,2)
(215,272,2)
(234,277,2)
(468,156,2)
(115,274,2)
(12,105,2)
(277,394,2)
(165,74,2)
(452,263,2)
(308,128,2)
(199,277,2)
(118,205,2)
(73,284,2)
(447,277,2)
(295,188,2)
(79,277,2)
(86,277,2)
(10,389,2)
(90,373,2)
(495,277,2)
(449,205,2)
(124,263,2)
(158,264,2)
(465,141,2)
(110,482,2)
(14,56,2)
(116,56,2)
(279,480,2)
(55,408,2)
(493,408,2)
(418,394,2)
(511,56,2)
(86,56,2)
(281,205,2)
(317,263,2)
(2,408,2)
(358,205,2)
(331,128,2)
(441,325,2)
(406,274,2)
(341,408,2)
(357,42,2)
(105,258,2)
(152,299,2)
(359,141,2)
(311,277,2)
(350,373,2)
(423,464,2)
(36,274,2)
(159,263,2)
(435,373,2)
(486,277,2)
(58,205,2)
(74,272,2)
(476,277,2)
(514,277,2)
(398,99,2)
(12,527,2)
(91,128,2)
(419,141,2)
(494,277,2)
(200,362,2)
(188,263,2)
(407,128,2)
(7,274,2)
(414,274,2)
(540,128,2)
(74,277,2)
(187,205,2)
(253,394,2)
(391,141,2)
(119,277,2)
(527,387,2)
(440,491,2)
(286,74,2)
(12,208,2)
(135,141,2)
(105,293,2)
(41,404,2)
(405,408,2)
(292,141,2)
(59,277,2)
(373,260,2)
(140,277,2)
(290,141,2)
(206,263,2)
(345,128,2)
(204,56,2)
(333,263,2)
(31,303,2)
(428,141,2)
(30,141,2)
(371,274,2)
(461,353,2)
(527,399,2)
(89,408,2)
(111,408,2)
(97,277,2)
(401,274,2)
(105,93,2)
(78,318,2)
(74,168,2)
(318,6,2)
(535,408,2)
(463,408,2)
(243,74,2)
(120,56,2)
(199,56,2)
(238,408,2)
(54,274,2)
(192,84,2)
(246,141,2)
(101,277,2)
(307,56,2)
(338,56,2)
(360,141,2)
(470,74,2)
(347,128,2)
(260,205,2)
(263,205,2)
(320,128,2)
(138,408,2)
(531,373,2)
(128,277,2)
(219,128,2)
(293,376,2)
(329,205,2)
(17,207,2)
(335,277,2)
(278,492,2)
(360,133,2)
(376,409,2)
(69,177,2)
(186,42,2)
(536,394,2)
(216,277,2)
(209,274,2)
(398,56,2)
(221,205,2)
(278,177,2)
(316,299,2)
(171,277,2)
(482,42,2)
(330,205,2)
(47,263,2)
(322,274,2)
(79,205,2)
(69,413,2)
(172,243,2)
(356,263,2)
(230,128,2)
(133,26,2)
(105,56,2)
(400,141,2)
(130,141,2)
(536,255,2)
(222,272,2)
(434,56,2)
(538,42,2)
(87,191,2)
(156,277,2)
(237,277,2)
(308,205,2)
(252,263,2)
(381,56,2)
(376,408,2)
(519,42,2)
(11,277,2)
(73,398,2)
(396,272,2)
(43,40,2)
(312,221,2)
(172,237,2)
(107,191,2)
(497,56,2)
(18,373,2)
(155,408,2)
(412,492,2)
(72,506,2)
(154,141,2)
(287,436,2)
(352,141,2)
(265,277,2)
(45,408,2)
(270,141,2)
(296,277,2)
(498,272,2)
(240,325,2)
(42,179,2)
(261,274,2)
(348,74,2)
(411,355,2)
(274,299,2)
(472,205,2)
(213,72,2)
(301,394,2)
(267,277,2)
(38,277,2)
(290,419,2)
(376,205,2)
(143,532,2)
(472,156,2)
-----------------------------------
(0,RAMP_MS)
(1,info)
(2,info)
(3,info)
(4,info)
(5,if (info->ramping < RAMP_CT)
(6,info->job_id)
(7,info->failing)
(8,-1)
(9,compac->device_data)
(10,MAX_IDLE * 1000 / max_task_wait)
(11,LIBUSB_SUCCESS)
(12,RET)
(13,bound(max_task_wait / 20, 1, 100)
(14,usb_nodev(compac)
(15,NULL)
(16,info->work[i] = NULL)
(17,free_work(info->work[info->job_id])
(18,&now)
(19,i)
(20,if (info->failing)
(21,chips)
(22,1000)
(23,hashes)
(24,fullscan_ms)
(25,work_tx)
(26,info->last_scanhash)
(27,0xffffffff)
(28,cgtime(&info->last_nonce)
(29,hashes)
(30,hashes)
(31,(info->job_id + 1)
(32,true)
(33,info->ramp_hcn)
(34,ramp_hcn)
(35,&info->last_task)
(36,name)
(37,if (compac->shutdown)
(38,info)
(39,info)
(40,(info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
(41,info->work[info->job_id])
(42,info->frequency != info->frequency_requested)
(43,info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
(44,MAX_JOBS)
(45,work)
(46,hashes)
(47,mutex_lock(&info->lock)
(48,cgtime(&info->last_task)
(49,if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set)
(50,err = 0)
(51,1000)
(52,info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff)
(53,9)
(54,compac->drv->name)
(55,info->work[info->job_id]->drv_rolllimit--)
(56,err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE)
(57,LOG_ERR)
(58,info->hashrate)
(59,1)
(60,0)
(61,MAX_IDLE)
(62,info->work)
(63,&info->lock)
(64,cpu_yield = bound(max_task_wait / 20, 1, 100)
(65,frequency)
(66,)
(67,compac_send_chain_inactive(compac)
(68,TX_TASK_SIZE)
(69,max_task_wait / 20)
(70,err = usb_write(compac, (char *)
(71,compac)
(72,info->work[i])
(73,info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
(74,info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0)
(75,hashes)
(76,return hashes;)
(77,compac)
(78,info->work[info->job_id]->drv_rolllimit)
(79,info->ramping)
(80,info->nonceless)
(81,i)
(82,if (!info->work[info->job_id])
(83,info)
(84,compac->device_id)
(85,dups)
(86,20)
(87,25)
(88,thr->id)
(89,get_work(thr, thr->id)
(90,info->last_chain_inactive)
(91,active)
(92,usb_nodev(compac)
(93,info->job_id)
(94,info)
(95,compac)
(96,bound(info->fullscan_ms * 0.40, 5, 1000)
(97,err != LIBUSB_SUCCESS)
(98,info->ramp_hcn)
(99,&now)
(100,mutex_unlock(&info->lock)
(101,info->work)
(102,&now)
(103,work)
(104,job_id)
(105,return -1;)
(106,read_bytes != TX_TASK_SIZE)
(107,frequency)
(108,)
(109,max_task_wait)
(110,ms_tdiff(&now, &info->last_freq_set)
(111,info)
(112,info->last_nonce)
(113,1)
(114,now)
(115,info)
(116,last_task)
(117,if (info->update_work)
(118,info->ramping)
(119,work)
(120,"%s %d: Write error")
(121,device_id)
(122,info)
(123,hashes = 0)
(124,info)
(125,frequency)
(126,ms_tdiff(&now, &info->last_task)
(127,info)
(128,info->ramping < RAMP_CT)
(129,lock)
(130,info->scanhash_ms)
(131,)
(132,(info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
(133,&info->last_scanhash)
(134,hashes)
(135,info->scanhash_ms * 9)
(136,hcn_max)
(137,MAX_JOBS)
(138,drv_rolllimit)
(139,nodev)
(140,info)
(141,!info->chips)
(142,info)
(143,applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",\n\\n\\t\\t\\t\\t   compac->drv->name, compac->device_id)
(144,usb_nodev(compac)
(145,)
(146,)
(147,&info->last_freq_set)
(148,if (frequency != info->frequency)
(149,info)
(150,if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)
(151,compac)
(152,update_work)
(153,last_scanhash)
(154,info->hashes -= hashes)
(155,info)
(156,compac->shutdown)
(157,1)
(158,compac->drv->name)
(159,lock)
(160,hcn_max)
(161,2)
(162,RAMP_CT)
(163,last_scanhash)
(164,true)
(165,info->work)
(166,scanhash_ms)
(167,RAMP_MS / 1000)
(168,info->work[info->job_id]->drv_rolllimit == 0)
(169,scanhash_ms)
(170,usb_write(compac, (char *)
(171,info->work_tx)
(172,info->work[info->job_id])
(173,if (info->ramping < RAMP_CT)
(174,0)
(175,device_id)
(176,info)
(177,max_task_wait = RAMP_MS)
(178,read_bytes)
(179,info->frequency_requested)
(180,info->work[info->job_id] = get_work(thr, thr->id)
(181,ramp_hcn)
(182,char *)
(183,work)
(184,info)
(185,info)
(186,ms_tdiff(&now, &info->last_freq_set)
(187,info->dups)
(188,i < MAX_JOBS)
(189,info->work)
(190,task_ms)
(191,info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set)
(192,applog(LOG_WARNING,"%s %d: Write error", compac->drv->name, compac->device_id)
(193,true)
(194,info->work)
(195,)
(196,compac)
(197,if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0)
(198,RAMP_MS)
(199,100)
(200,applog(LOG_ERR, "%s %d: Device failed to respond to restart",\n\\n\\t\\t\\t\\t\\t   compac->drv->name, compac->device_id)
(201,init_task(info)
(202,1)
(203,info->work[info->job_id])
(204,LOG_WARNING)
(205,*info = compac->device_data)
(206,i)
(207,info->work[info->job_id])
(208,return -1;)
(209,device_id)
(210,info->work)
(211,)
(212,if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE)
(213,info->work[i])
(214,i)
(215,info->work)
(216,update_work)
(217,)
(218,info->active = true)
(219,info)
(220,info)
(221,info->last_scanhash)
(222,info->job_id)
(223,info)
(224,max_task_wait)
(225,info)
(226,compac)
(227,compac)
(228,"%s %d: No valid hashes recently, attempting to reset")
(229,work)
(230,0xffffffff)
(231,info->chips)
(232,i)
(233,info->work[i])
(234,work)
(235,info->work[info->job_id])
(236,info->job_id)
(237,info->job_id)
(238,info)
(239,0)
(240,info->dups = 0)
(241,-1)
(242,info)
(243,info->work[info->job_id] = NULL)
(244,info->last_task)
(245,shutdown)
(246,10)
(247,drv)
(248,info->task_ms)
(249,now)
(250,return -1;)
(251,)
(252,info->update_work = 0)
(253,compac->drv->name)
(254,)
(255,*compac = thr->cgpu)
(256,thr)
(257,info->task_ms)
(258,info->active)
(259,task_ms)
(260,info->chips)
(261,nonceless)
(262,compac)
(263,info->update_work)
(264,compac->drv)
(265,frequency)
(266,frequency)
(267,info)
(268,0)
(269,0)
(270,compac)
(271,now)
(272,info->work[info->job_id])
(273,"%s %d: Device failed to respond to restart")
(274,info->failing)
(275,info)
(276,job_id)
(277,info->update_work || (ms_tdiff(&now, &info->last_task)
(278,ms_tdiff(&now, &info->last_task)
(279,hcn_max = info->hashrate * RAMP_MS / 1000)
(280,info)
(281,info->update_work)
(282,info)
(283,ramping)
(284,info->task_ms * 9)
(285,info)
(286,job_id)
(287,&info->last_task)
(288,frequency += 25)
(289,thr->cgpu)
(290,MAX_IDLE * 1000 / max_task_wait)
(291,nonceless)
(292,MAX_IDLE)
(293,info->work[info->job_id])
(294,max_task_wait)
(295,i++)
(296,compac)
(297,ramping)
(298,info)
(299,info->nonceless > (MAX_IDLE * 1000 / max_task_wait)
(300,info->ramping++)
(301,1)
(302,info)
(303,info->job_id + 1)
(304,hcn_max)
(305,compac)
(306,free_work(info->work[i])
(307,last_task)
(308,info->nonceless)
(309,info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
(310,err)
(311,info)
(312,&info->last_scanhash)
(313,info->frequency)
(314,1000)
(315,info->job_id)
(316,failing)
(317,info->lock)
(318,info->work[info->job_id])
(319,name)
(320,bound(info->ramp_hcn, 0, 0xffffffff)
(321,TX_TASK_SIZE)
(322,2 * MAX_IDLE * 1000 / max_task_wait)
(323,if (info->work[i])
(324,)
(325,info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive)
(326,info)
(327,)
(328,info)
(329,info->last_task)
(330,info->work)
(331,0xffffffff / info->chips)
(332,2)
(333,0)
(334,RAMP_CT)
(335,max_task_wait)
(336,frequency_start)
(337,compac)
(338,name)
(339,&read_bytes)
(340,0)
(341,job_id)
(342,info)
(343,-1)
(344,1)
(345,info)
(346,read_bytes)
(347,ramp_hcn)
(348,work)
(349,info)
(350,last_chain_inactive)
(351,3000)
(352,info)
(353,frequency != info->frequency)
(354,info)
(355,&now)
(356,i)
(357,last_freq_set)
(358,info->work)
(359,info->ramping < RAMP_CT)
(360,cgtime(&info->last_scanhash)
(361,)
(362,compac->device_id)
(363,if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive)
(364,info)
(365,cgpu)
(366,return -1;)
(367,info->dups)
(368,compac)
(369,job_id)
(370,now)
(371,compac)
(372,device_data)
(373,info->dups * 2 >= info->chips)
(374,info)
(375,)
(376,info->job_id)
(377,0.40)
(378,info->dups * 2)
(379,chips)
(380,info)
(381,compac)
(382,now)
(383,work)
(384,work)
(385,5)
(386,info->ramp_hcn = (0xffffffff / info->chips)
(387,info->hashes)
(388,now)
(389,1000 / max_task_wait)
(390,dups)
(391,info)
(392,i)
(393,info)
(394,info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)
(395,)
(396,info->work[info->job_id]->drv_rolllimit)
(397,thr)
(398,ms_tdiff(&now, &info->last_task)
(399,info->scanhash_ms)
(400,ramping)
(401,info->failing = true)
(402,hashrate)
(403,&info->last_task)
(404,info->job_id)
(405,thr)
(406,LOG_WARNING)
(407,info)
(408,!info->work[info->job_id])
(409,info->job_id = (info->job_id + 1)
(410,info->nonceless)
(411,ms_tdiff(&now, &info->last_scanhash)
(412,info)
(413,max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000)
(414,compac->drv)
(415,info->job_id)
(416,read_bytes = 1)
(417,info)
(418,drv)
(419,1000 / max_task_wait)
(420,info)
(421,info->chips)
(422,last_nonce)
(423,cgtime(&now)
(424,NULL)
(425,cpu_yield)
(426,)
(427,compac)
(428,-1)
(429,compac)
(430,job_id)
(431,last_task)
(432,chips)
(433,usbinfo)
(434,cpu_yield)
(435,&info->last_chain_inactive)
(436,info->last_task)
(437,max_task_wait)
(438,info)
(439,info)
(440,ms_tdiff(&now, &info->last_chain_inactive)
(441,0)
(442,info->frequency)
(443,info->job_id)
(444,if (compac->usbinfo.nodev)
(445,)
(446,1000)
(447,info)
(448,if (!info->chips)
(449,info->fullscan_ms)
(450,err)
(451,info)
(452,info->lock)
(453,C_SENDWORK)
(454,info)
(455,info->nonceless++)
(456,info)
(457,ramp_hcn)
(458,info->work)
(459,1000)
(460,&info->last_nonce)
(461,compac_set_frequency(compac, frequency, true)
(462,9)
(463,id)
(464,&now)
(465,max_task_wait)
(466,info)
(467,read_bytes)
(468,compac_set_frequency(compac, info->frequency_start, false)
(469,frequency)
(470,work)
(471,info->frequency)
(472,info->frequency_start)
(473,info->hashes)
(474,roll_work(info->work[info->job_id])
(475,info->ramp_hcn)
(476,cgsleep_ms(cpu_yield)
(477,max_task_wait)
(478,frequency)
(479,info)
(480,info->hashrate * RAMP_MS / 1000)
(481,work)
(482,&now)
(483,job_id)
(484,1)
(485,if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)
(486,(char *)
(487,&info->lock)
(488,frequency_requested)
(489,err)
(490,info)
(491,ms_tdiff(&now, &info->last_chain_inactive)
(492,info->update_work)
(493,job_id)
(494,job_id)
(495,info)
(496,struct thr_info *thr)
(497,info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
(498,info)
(499,info->fullscan_ms * 0.40)
(500,hashes = info->hashes)
(501,info)
(502,for (i = 0; i < MAX_JOBS; i++)
(503,9 * 1000)
(504,info->ramp_hcn)
(505,drv)
(506,i = 0)
(507,info)
(508,frequency = info->frequency)
(509,compac->usbinfo.nodev)
(510,usb_reset(compac)
(511,info)
(512,info)
(513,compac)
(514,read_bytes)
(515,info->ramping)
(516,nonceless)
(517,update_work)
(518,drv_rolllimit)
(519,9)
(520,RAMP_CT)
(521,cpu_yield)
(522,false)
(523,compac)
(524,info)
(525,frequency)
(526,compac->usbinfo)
(527,return 0;)
(528,failing)
(529,hcn_max / RAMP_CT)
(530,info)
(531,now)
(532,compac->device_id)
(533,hashes)
(534,job_id)
(535,info)
(536,compac->drv)
(537,info->work)
(538,info->last_freq_set)
(539,if (info->update_work || (ms_tdiff(&now, &info->last_task)
(540,info->ramp_hcn += hcn_max / RAMP_CT)
(541,err)
(542,info)
(543,10)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^