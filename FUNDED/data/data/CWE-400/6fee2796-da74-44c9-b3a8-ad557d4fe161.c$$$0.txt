-----label-----
1
-----code-----
void
tcp_reass_flush(struct tcpcb *tp)
{
	struct tseg_qent *qe;

	INP_WLOCK_ASSERT(tp->t_inpcb);

	while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {
		LIST_REMOVE(qe, tqe_q);
		m_freem(qe->tqe_m);
		uma_zfree(V_tcp_reass_zone, qe);
		tp->t_segqlen--;
	}

	KASSERT((tp->t_segqlen == 0),
	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",
	    tp, tp->t_segqlen));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
27,28
27,29
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
34,35
36,37
37,38
37,39
38,39
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
45,48
46,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
75,78
76,77
78,79
79,80
79,81
80,81
80,82
81,82
85,86
86,87
86,88
86,89
88,89
90,91
90,92
91,92
-----nextToken-----
2,4,7,9,10,15,17,18,22,25,26,32,35,39,40,42,47,49,51,55,58,59,63,65,67,72,73,77,82,83,84,87,89,92,93
-----computeFrom-----
28,29
28,30
30,31
30,32
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
voidtcp_reass_flush(struct tcpcb *tp){	struct tseg_qent *qe;	INP_WLOCK_ASSERT(tp->t_inpcb);	while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}	KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen));}
void
tcp_reass_flush(struct tcpcb *tp)
tcp_reass_flush
struct tcpcb *tp
struct tcpcb
tcpcb
*tp
*
tp
{	struct tseg_qent *qe;	INP_WLOCK_ASSERT(tp->t_inpcb);	while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}	KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen));}
struct tseg_qent *qe;
struct tseg_qent *qe;
struct tseg_qent
tseg_qent
*qe
*
qe
INP_WLOCK_ASSERT(tp->t_inpcb);
INP_WLOCK_ASSERT(tp->t_inpcb)
INP_WLOCK_ASSERT
INP_WLOCK_ASSERT
tp->t_inpcb
tp
tp
t_inpcb
while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}
(qe = LIST_FIRST(&tp->t_segq)) != NULL
(qe = LIST_FIRST(&tp->t_segq))
qe = LIST_FIRST(&tp->t_segq)
qe
qe
LIST_FIRST(&tp->t_segq)
LIST_FIRST
LIST_FIRST
&tp->t_segq
tp->t_segq
tp
tp
t_segq
NULL
NULL
{		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}
LIST_REMOVE(qe, tqe_q);
LIST_REMOVE(qe, tqe_q)
LIST_REMOVE
LIST_REMOVE
qe
qe
tqe_q
tqe_q
m_freem(qe->tqe_m);
m_freem(qe->tqe_m)
m_freem
m_freem
qe->tqe_m
qe
qe
tqe_m
uma_zfree(V_tcp_reass_zone, qe);
uma_zfree(V_tcp_reass_zone, qe)
uma_zfree
uma_zfree
V_tcp_reass_zone
V_tcp_reass_zone
qe
qe
tp->t_segqlen--;
tp->t_segqlen--
tp->t_segqlen
tp
tp
t_segqlen
KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen));
KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen))
KASSERT
KASSERT
(tp->t_segqlen == 0)
tp->t_segqlen == 0
tp->t_segqlen
tp
tp
t_segqlen
0
("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen)
"TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen
"TCP reass queue %p segment count is %d instead of 0 after flush."
tp
tp
tp->t_segqlen
tp
tp
t_segqlen
-----joern-----
(16,35,0)
(8,9,0)
(40,13,0)
(41,1,0)
(23,2,0)
(42,30,0)
(29,37,0)
(36,15,0)
(25,10,0)
(16,13,0)
(37,0,0)
(9,8,0)
(28,8,0)
(10,25,0)
(10,3,0)
(7,9,0)
(21,36,0)
(33,32,0)
(1,22,0)
(1,13,0)
(19,3,0)
(32,8,0)
(40,11,0)
(30,13,0)
(15,25,0)
(34,8,0)
(30,2,0)
(17,25,0)
(10,2,0)
(35,34,0)
(12,0,0)
(36,13,0)
(14,37,0)
(26,36,0)
(38,0,0)
(43,32,0)
(5,1,0)
(8,34,0)
(32,12,0)
(35,16,0)
(22,1,0)
(4,3,0)
(27,40,0)
(11,0,0)
(38,8,0)
(2,10,0)
(34,35,0)
(44,38,0)
(6,16,0)
(45,40,0)
(11,40,0)
(20,16,0)
(37,8,0)
(22,3,0)
(2,30,0)
(12,32,0)
(18,15,0)
(39,38,0)
(31,30,0)
(21,18,1)
(37,8,1)
(32,43,1)
(32,8,1)
(33,37,1)
(2,23,1)
(18,17,1)
(6,28,1)
(10,2,1)
(1,13,1)
(10,25,1)
(34,35,1)
(38,39,1)
(10,36,1)
(5,41,1)
(44,12,1)
(37,14,1)
(9,7,1)
(40,13,1)
(11,40,1)
(7,8,1)
(30,42,1)
(16,20,1)
(29,9,1)
(36,13,1)
(14,29,1)
(17,2,1)
(26,21,1)
(12,32,1)
(27,38,1)
(42,31,1)
(31,9,1)
(22,1,1)
(30,13,1)
(40,45,1)
(2,30,1)
(28,11,1)
(28,22,1)
(35,16,1)
(1,5,1)
(24,10,1)
(36,26,1)
(9,8,1)
(38,8,1)
(16,13,1)
(43,33,1)
(45,27,1)
(39,44,1)
(23,30,1)
(20,6,1)
(8,34,1)
(9,8,2)
(6,9,2)
(38,8,2)
(39,9,2)
(12,32,2)
(27,9,2)
(20,9,2)
(7,9,2)
(40,13,2)
(32,9,2)
(40,9,2)
(44,9,2)
(33,9,2)
(10,25,2)
(11,9,2)
(36,13,2)
(28,9,2)
(16,13,2)
(16,9,2)
(22,1,2)
(1,13,2)
(35,9,2)
(8,9,2)
(37,8,2)
(38,9,2)
(8,34,2)
(35,16,2)
(32,8,2)
(9,9,2)
(29,9,2)
(11,40,2)
(12,9,2)
(45,9,2)
(43,9,2)
(2,30,2)
(10,2,2)
(14,9,2)
(37,9,2)
(34,9,2)
(34,35,2)
(30,13,2)
-----------------------------------
(0,)
(1,tp->t_inpcb)
(2,tp->t_segqlen == 0)
(3,)
(4,while ((qe = LIST_FIRST(&tp->t_segq)
(5,t_inpcb)
(6,tp)
(7,NULL)
(8,qe = LIST_FIRST(&tp->t_segq)
(9,(qe = LIST_FIRST(&tp->t_segq)
(10,KASSERT((tp->t_segqlen == 0)
(11,tp->t_segqlen--)
(12,m_freem(qe->tqe_m)
(13,struct tcpcb *tp)
(14,tqe_q)
(15,)
(16,tp->t_segq)
(17,"TCP reass queue %p segment count is %d instead of 0 after flush.")
(18,tp)
(19,qe)
(20,t_segq)
(21,tp)
(22,INP_WLOCK_ASSERT(tp->t_inpcb)
(23,0)
(24,RET)
(25,)
(26,t_segqlen)
(27,tp)
(28,qe)
(29,qe)
(30,tp->t_segqlen)
(31,tp)
(32,qe->tqe_m)
(33,qe)
(34,LIST_FIRST(&tp->t_segq)
(35,&tp->t_segq)
(36,tp->t_segqlen)
(37,LIST_REMOVE(qe, tqe_q)
(38,uma_zfree(V_tcp_reass_zone, qe)
(39,qe)
(40,tp->t_segqlen)
(41,tp)
(42,t_segqlen)
(43,tqe_m)
(44,V_tcp_reass_zone)
(45,t_segqlen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^