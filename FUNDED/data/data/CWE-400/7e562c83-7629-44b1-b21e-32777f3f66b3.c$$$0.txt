-----label-----
0
-----code-----
static int commit_ref_update(struct ref_lock *lock,
			     const unsigned char *sha1, const char *logmsg)
{
	clear_loose_ref_cache(&ref_cache);
	if (log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0 ||
	    (strcmp(lock->ref_name, lock->orig_ref_name) &&
	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)) {
		unlock_ref(lock);
		return -1;
	}
	if (strcmp(lock->orig_ref_name, "HEAD") != 0) {
		/*
		 * Special hack: If a branch is updated directly and HEAD
		 * points to it (may happen on the remote side of a push
		 * for example) then logically the HEAD reflog should be
		 * updated too.
		 * A generic solution implies reverse symref information,
		 * but finding all symrefs pointing to the given branch
		 * would be rather costly for this rare event (the direct
		 * update of a branch) to be worth it.  So let's cheat and
		 * check with HEAD only which should cover 99% of all usage
		 * scenarios (even 100% of the default ones).
		 */
		unsigned char head_sha1[20];
		int head_flag;
		const char *head_ref;
		head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,
					      head_sha1, &head_flag);
		if (head_ref && (head_flag & REF_ISSYMREF) &&
		    !strcmp(head_ref, lock->ref_name))
			log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);
	}
	if (commit_ref(lock)) {
		error("Couldn't set %s", lock->ref_name);
		unlock_ref(lock);
		return -1;
	}
	unlock_ref(lock);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
27,28
27,29
30,31
30,32
31,32
31,33
32,33
32,34
33,34
33,35
33,36
33,37
33,38
34,35
36,37
36,38
37,38
40,41
40,42
41,42
44,45
46,47
49,50
50,51
50,52
51,52
51,53
51,54
52,53
54,55
54,56
55,56
58,59
58,60
59,60
62,63
62,64
63,64
63,65
63,66
63,67
63,68
64,65
66,67
66,68
67,68
70,71
70,72
71,72
74,75
76,77
79,80
79,81
80,81
81,82
81,83
82,83
84,85
86,87
87,88
89,90
89,91
90,91
90,92
91,92
91,93
91,94
92,93
94,95
94,96
95,96
100,101
100,102
100,103
100,104
100,105
101,102
102,103
102,104
104,105
104,106
106,107
108,109
109,110
109,111
111,112
113,114
114,115
114,116
116,117
116,118
119,120
120,121
120,122
121,122
123,124
123,125
123,126
123,127
123,128
124,125
127,128
129,130
131,132
132,133
134,135
134,136
135,136
135,137
136,137
136,138
137,138
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
146,149
147,148
149,150
151,152
151,153
152,153
155,156
156,157
156,158
156,159
156,160
156,161
157,158
160,161
160,162
161,162
164,165
166,167
168,169
168,170
169,170
169,171
170,171
172,173
174,175
174,176
174,177
175,176
176,177
176,178
176,179
177,178
180,181
180,182
181,182
184,185
185,186
185,187
186,187
188,189
190,191
191,192
193,194
194,195
194,196
195,196
197,198
199,200
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,25,28,29,35,38,39,42,43,45,47,48,53,56,57,60,61,65,68,69,72,73,75,77,78,83,85,88,93,96,97,98,99,103,105,107,110,112,115,117,118,122,125,126,128,130,133,138,142,144,148,150,153,154,158,159,162,163,165,167,171,173,178,179,182,183,187,189,192,196,198,200
-----computeFrom-----
31,32
31,33
32,33
32,34
50,51
50,52
62,63
62,64
90,91
90,92
120,121
120,122
135,136
135,137
136,137
136,138
140,141
140,142
-----guardedBy-----
72,85
93,148
96,162
153,162
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int commit_ref_update(struct ref_lock *lock,			     const unsigned char *sha1, const char *logmsg){	clear_loose_ref_cache(&ref_cache);	if (log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0 ||	    (strcmp(lock->ref_name, lock->orig_ref_name) &&	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)) {		unlock_ref(lock);		return -1;	}	if (strcmp(lock->orig_ref_name, "HEAD") != 0) {		/*		 * Special hack: If a branch is updated directly and HEAD		 * points to it (may happen on the remote side of a push		 * for example) then logically the HEAD reflog should be		 * updated too.		 * A generic solution implies reverse symref information,		 * but finding all symrefs pointing to the given branch		 * would be rather costly for this rare event (the direct		 * update of a branch) to be worth it.  So let's cheat and		 * check with HEAD only which should cover 99% of all usage		 * scenarios (even 100% of the default ones).		 */		unsigned char head_sha1[20];		int head_flag;		const char *head_ref;		head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag);		if (head_ref && (head_flag & REF_ISSYMREF) &&		    !strcmp(head_ref, lock->ref_name))			log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);	}	if (commit_ref(lock)) {		error("Couldn't set %s", lock->ref_name);		unlock_ref(lock);		return -1;	}	unlock_ref(lock);	return 0;}
static int
commit_ref_update(struct ref_lock *lock,			     const unsigned char *sha1, const char *logmsg)
commit_ref_update
struct ref_lock *lock
struct ref_lock
ref_lock
*lock
*
lock
const unsigned char *sha1
const unsigned char
*sha1
*
sha1
const char *logmsg
const char
*logmsg
*
logmsg
{	clear_loose_ref_cache(&ref_cache);	if (log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0 ||	    (strcmp(lock->ref_name, lock->orig_ref_name) &&	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)) {		unlock_ref(lock);		return -1;	}	if (strcmp(lock->orig_ref_name, "HEAD") != 0) {		/*		 * Special hack: If a branch is updated directly and HEAD		 * points to it (may happen on the remote side of a push		 * for example) then logically the HEAD reflog should be		 * updated too.		 * A generic solution implies reverse symref information,		 * but finding all symrefs pointing to the given branch		 * would be rather costly for this rare event (the direct		 * update of a branch) to be worth it.  So let's cheat and		 * check with HEAD only which should cover 99% of all usage		 * scenarios (even 100% of the default ones).		 */		unsigned char head_sha1[20];		int head_flag;		const char *head_ref;		head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag);		if (head_ref && (head_flag & REF_ISSYMREF) &&		    !strcmp(head_ref, lock->ref_name))			log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);	}	if (commit_ref(lock)) {		error("Couldn't set %s", lock->ref_name);		unlock_ref(lock);		return -1;	}	unlock_ref(lock);	return 0;}
clear_loose_ref_cache(&ref_cache);
clear_loose_ref_cache(&ref_cache);
clear_loose_ref_cache
clear_loose_ref_cache
(&ref_cache)
&ref_cache
&
ref_cache
if (log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0 ||	    (strcmp(lock->ref_name, lock->orig_ref_name) &&	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)) {		unlock_ref(lock);		return -1;	}
log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0 ||	    (strcmp(lock->ref_name, lock->orig_ref_name) &&	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)
log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg) < 0
log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg)
log_ref_write
log_ref_write
lock->ref_name
lock
lock
ref_name
lock->old_sha1
lock
lock
old_sha1
sha1
sha1
logmsg
logmsg
0
(strcmp(lock->ref_name, lock->orig_ref_name) &&	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0)
strcmp(lock->ref_name, lock->orig_ref_name) &&	     log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0
strcmp(lock->ref_name, lock->orig_ref_name)
strcmp
strcmp
lock->ref_name
lock
lock
ref_name
lock->orig_ref_name
lock
lock
orig_ref_name
log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg) < 0
log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg)
log_ref_write
log_ref_write
lock->orig_ref_name
lock
lock
orig_ref_name
lock->old_sha1
lock
lock
old_sha1
sha1
sha1
logmsg
logmsg
0
{		unlock_ref(lock);		return -1;	}
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
return -1;
-1
1
if (strcmp(lock->orig_ref_name, "HEAD") != 0) {		/*		 * Special hack: If a branch is updated directly and HEAD		 * points to it (may happen on the remote side of a push		 * for example) then logically the HEAD reflog should be		 * updated too.		 * A generic solution implies reverse symref information,		 * but finding all symrefs pointing to the given branch		 * would be rather costly for this rare event (the direct		 * update of a branch) to be worth it.  So let's cheat and		 * check with HEAD only which should cover 99% of all usage		 * scenarios (even 100% of the default ones).		 */		unsigned char head_sha1[20];		int head_flag;		const char *head_ref;		head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag);		if (head_ref && (head_flag & REF_ISSYMREF) &&		    !strcmp(head_ref, lock->ref_name))			log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);	}
strcmp(lock->orig_ref_name, "HEAD") != 0
strcmp(lock->orig_ref_name, "HEAD")
strcmp
strcmp
lock->orig_ref_name
lock
lock
orig_ref_name
"HEAD"
0
{		/*		 * Special hack: If a branch is updated directly and HEAD		 * points to it (may happen on the remote side of a push		 * for example) then logically the HEAD reflog should be		 * updated too.		 * A generic solution implies reverse symref information,		 * but finding all symrefs pointing to the given branch		 * would be rather costly for this rare event (the direct		 * update of a branch) to be worth it.  So let's cheat and		 * check with HEAD only which should cover 99% of all usage		 * scenarios (even 100% of the default ones).		 */		unsigned char head_sha1[20];		int head_flag;		const char *head_ref;		head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag);		if (head_ref && (head_flag & REF_ISSYMREF) &&		    !strcmp(head_ref, lock->ref_name))			log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);	}
unsigned char head_sha1[20];
unsigned char head_sha1[20];
unsigned char
head_sha1[20]
head_sha1
[20]
20
int head_flag;
int head_flag;
int
head_flag
head_flag
const char *head_ref;
const char *head_ref;
const char
*head_ref
*
head_ref
head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag);
head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag)
head_ref
head_ref
resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,					      head_sha1, &head_flag)
resolve_ref_unsafe
resolve_ref_unsafe
"HEAD"
RESOLVE_REF_READING
RESOLVE_REF_READING
head_sha1
head_sha1
&head_flag
head_flag
head_flag
if (head_ref && (head_flag & REF_ISSYMREF) &&		    !strcmp(head_ref, lock->ref_name))			log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);
head_ref && (head_flag & REF_ISSYMREF) &&		    !strcmp(head_ref, lock->ref_name)
head_ref && (head_flag & REF_ISSYMREF)
head_ref
head_ref
(head_flag & REF_ISSYMREF)
head_flag & REF_ISSYMREF
head_flag
head_flag
REF_ISSYMREF
REF_ISSYMREF
!strcmp(head_ref, lock->ref_name)
strcmp(head_ref, lock->ref_name)
strcmp
strcmp
head_ref
head_ref
lock->ref_name
lock
lock
ref_name
log_ref_write("HEAD", lock->old_sha1, sha1, logmsg);
log_ref_write("HEAD", lock->old_sha1, sha1, logmsg)
log_ref_write
log_ref_write
"HEAD"
lock->old_sha1
lock
lock
old_sha1
sha1
sha1
logmsg
logmsg
if (commit_ref(lock)) {		error("Couldn't set %s", lock->ref_name);		unlock_ref(lock);		return -1;	}
commit_ref(lock)
commit_ref
commit_ref
lock
lock
{		error("Couldn't set %s", lock->ref_name);		unlock_ref(lock);		return -1;	}
error("Couldn't set %s", lock->ref_name);
error("Couldn't set %s", lock->ref_name)
error
error
"Couldn't set %s"
lock->ref_name
lock
lock
ref_name
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
return -1;
-1
1
unlock_ref(lock);
unlock_ref(lock)
unlock_ref
unlock_ref
lock
lock
return 0;
0
-----joern-----
(92,19,0)
(4,14,0)
(78,102,0)
(46,70,0)
(13,69,0)
(38,100,0)
(37,89,0)
(71,41,0)
(11,41,0)
(76,47,0)
(70,50,0)
(63,59,0)
(71,69,0)
(83,19,0)
(19,22,0)
(96,43,0)
(55,36,0)
(83,1,0)
(27,58,0)
(52,67,0)
(61,22,0)
(64,2,0)
(55,43,0)
(49,38,0)
(71,26,0)
(43,21,0)
(31,46,0)
(100,33,0)
(7,57,0)
(57,22,0)
(59,50,0)
(71,47,0)
(1,83,0)
(89,22,0)
(18,96,0)
(40,52,0)
(33,100,0)
(19,83,0)
(99,19,0)
(43,96,0)
(15,41,0)
(58,27,0)
(8,65,0)
(51,55,0)
(95,67,0)
(38,2,0)
(10,46,0)
(47,22,0)
(67,52,0)
(88,74,0)
(2,38,0)
(25,84,0)
(12,57,0)
(0,44,0)
(2,22,0)
(66,47,0)
(52,36,0)
(83,69,0)
(98,40,0)
(81,22,0)
(30,13,0)
(67,43,0)
(14,79,0)
(82,2,0)
(45,49,0)
(77,13,0)
(86,22,0)
(41,22,0)
(33,80,0)
(74,44,0)
(70,46,0)
(20,24,0)
(80,71,0)
(24,22,0)
(90,102,0)
(86,55,0)
(101,21,0)
(5,13,0)
(63,14,0)
(87,96,0)
(100,38,0)
(103,81,0)
(81,79,0)
(97,80,0)
(36,52,0)
(32,96,0)
(9,22,0)
(1,100,0)
(38,49,0)
(100,1,0)
(49,22,0)
(13,26,0)
(16,86,0)
(53,21,0)
(44,22,0)
(34,96,0)
(93,71,0)
(96,32,0)
(9,13,0)
(29,43,0)
(3,49,0)
(13,9,0)
(6,21,0)
(72,9,0)
(75,40,0)
(41,71,0)
(89,102,0)
(23,74,0)
(83,26,0)
(83,57,0)
(85,4,0)
(28,71,0)
(91,27,0)
(48,86,0)
(63,65,0)
(47,71,0)
(94,83,0)
(44,74,0)
(73,21,0)
(35,83,0)
(56,9,0)
(42,44,0)
(46,22,0)
(68,61,0)
(65,102,0)
(36,55,0)
(84,59,0)
(58,102,0)
(62,102,0)
(80,33,0)
(54,32,0)
(61,50,0)
(55,86,0)
(52,40,0)
(17,1,0)
(74,23,0)
(71,80,0)
(60,70,0)
(39,23,0)
(57,83,0)
(51,40,1)
(13,26,1)
(99,38,1)
(67,95,1)
(71,69,1)
(39,74,1)
(35,94,1)
(59,84,1)
(41,15,1)
(87,29,1)
(7,12,1)
(32,54,1)
(70,46,1)
(83,26,1)
(93,41,1)
(13,69,1)
(67,43,1)
(65,8,1)
(67,52,1)
(15,11,1)
(85,81,1)
(74,44,1)
(74,88,1)
(61,22,1)
(60,24,1)
(66,76,1)
(63,14,1)
(80,71,1)
(92,99,1)
(71,47,1)
(38,49,1)
(71,26,1)
(63,65,1)
(13,9,1)
(23,39,1)
(3,2,1)
(40,75,1)
(49,22,1)
(4,85,1)
(2,22,1)
(24,20,1)
(9,22,1)
(96,32,1)
(98,95,1)
(41,22,1)
(83,69,1)
(83,35,1)
(20,13,1)
(86,22,1)
(34,87,1)
(10,60,1)
(33,100,1)
(0,33,1)
(89,37,1)
(28,93,1)
(12,19,1)
(55,86,1)
(86,16,1)
(1,17,1)
(81,103,1)
(81,22,1)
(47,22,1)
(88,44,1)
(1,83,1)
(76,58,1)
(16,48,1)
(8,89,1)
(64,80,1)
(71,28,1)
(100,38,1)
(38,2,1)
(11,47,1)
(52,40,1)
(84,25,1)
(68,70,1)
(89,22,1)
(46,31,1)
(18,34,1)
(57,7,1)
(27,91,1)
(75,98,1)
(19,92,1)
(20,23,1)
(55,43,1)
(97,71,1)
(19,22,1)
(49,45,1)
(43,96,1)
(33,80,1)
(47,66,1)
(83,19,1)
(37,24,1)
(58,27,1)
(57,22,1)
(2,82,1)
(23,74,1)
(77,5,1)
(36,55,1)
(63,59,1)
(42,0,1)
(29,23,1)
(52,36,1)
(72,30,1)
(80,97,1)
(95,43,1)
(56,72,1)
(61,68,1)
(94,57,1)
(45,3,1)
(25,61,1)
(54,18,1)
(46,22,1)
(103,33,1)
(82,64,1)
(71,41,1)
(14,4,1)
(48,51,1)
(9,56,1)
(44,42,1)
(24,22,1)
(31,10,1)
(20,67,1)
(30,67,1)
(83,57,1)
(17,83,1)
(44,22,1)
(100,1,1)
(13,77,1)
(5,9,1)
(63,14,2)
(61,22,2)
(47,22,2)
(71,47,2)
(30,67,2)
(38,49,2)
(3,80,2)
(33,100,2)
(8,24,2)
(43,96,2)
(36,40,2)
(55,43,2)
(29,23,2)
(24,22,2)
(96,32,2)
(33,80,2)
(67,23,2)
(13,26,2)
(63,65,2)
(2,80,2)
(85,33,2)
(57,22,2)
(41,22,2)
(75,95,2)
(100,1,2)
(37,24,2)
(64,80,2)
(54,23,2)
(71,41,2)
(1,83,2)
(4,33,2)
(96,23,2)
(77,67,2)
(25,24,2)
(95,23,2)
(19,22,2)
(59,24,2)
(12,38,2)
(13,67,2)
(98,95,2)
(14,33,2)
(52,95,2)
(1,38,2)
(42,33,2)
(13,9,2)
(67,43,2)
(89,24,2)
(10,24,2)
(16,40,2)
(0,33,2)
(89,22,2)
(46,22,2)
(32,23,2)
(23,74,2)
(99,38,2)
(44,22,2)
(83,57,2)
(24,33,2)
(81,33,2)
(52,40,2)
(92,38,2)
(83,26,2)
(83,69,2)
(38,2,2)
(86,22,2)
(38,80,2)
(18,23,2)
(100,80,2)
(13,69,2)
(39,33,2)
(82,80,2)
(63,59,2)
(49,22,2)
(45,80,2)
(57,38,2)
(74,44,2)
(51,40,2)
(81,22,2)
(49,80,2)
(80,71,2)
(48,40,2)
(86,40,2)
(34,23,2)
(72,67,2)
(61,24,2)
(103,33,2)
(20,33,2)
(44,33,2)
(71,26,2)
(68,24,2)
(83,19,2)
(36,55,2)
(84,24,2)
(60,24,2)
(46,24,2)
(19,38,2)
(88,33,2)
(55,40,2)
(55,86,2)
(65,24,2)
(87,23,2)
(83,38,2)
(56,67,2)
(94,38,2)
(35,38,2)
(58,27,2)
(9,22,2)
(52,36,2)
(7,38,2)
(2,22,2)
(31,24,2)
(67,52,2)
(71,69,2)
(100,38,2)
(9,67,2)
(74,33,2)
(70,46,2)
(23,33,2)
(40,95,2)
(5,67,2)
(17,38,2)
(70,24,2)
(43,23,2)
-----------------------------------
(0,lock)
(1,log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg)
(2,lock->ref_name)
(3,lock)
(4,-1)
(5,sha1)
(6,if (head_ref && (head_flag & REF_ISSYMREF)
(7,old_sha1)
(8,0)
(9,lock->old_sha1)
(10,lock)
(11,lock)
(12,lock)
(13,log_ref_write("HEAD", lock->old_sha1, sha1, logmsg)
(14,return -1;)
(15,old_sha1)
(16,ref_name)
(17,0)
(18,head_sha1)
(19,lock->orig_ref_name)
(20,lock)
(21,)
(22,struct ref_lock *lock)
(23,strcmp(lock->orig_ref_name, "HEAD")
(24,commit_ref(lock)
(25,1)
(26,const char *logmsg)
(27,&ref_cache)
(28,logmsg)
(29,head_ref)
(30,"HEAD")
(31,ref_name)
(32,&head_flag)
(33,log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg)
(34,RESOLVE_REF_READING)
(35,logmsg)
(36,!strcmp(head_ref, lock->ref_name)
(37,lock)
(38,strcmp(lock->ref_name, lock->orig_ref_name)
(39,0)
(40,head_flag & REF_ISSYMREF)
(41,lock->old_sha1)
(42,orig_ref_name)
(43,head_ref = resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,\n\\n\\t\\t\\t\\t\\t      head_sha1, &head_flag)
(44,lock->orig_ref_name)
(45,orig_ref_name)
(46,lock->ref_name)
(47,lock->ref_name)
(48,lock)
(49,lock->orig_ref_name)
(50,)
(51,head_ref)
(52,(head_flag & REF_ISSYMREF)
(53,head_flag)
(54,head_flag)
(55,strcmp(head_ref, lock->ref_name)
(56,old_sha1)
(57,lock->old_sha1)
(58,clear_loose_ref_cache(&ref_cache)
(59,return -1;)
(60,"Couldn\'t set %s")
(61,unlock_ref(lock)
(62,if (log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg)
(63,RET)
(64,lock)
(65,return 0;)
(66,ref_name)
(67,head_ref && (head_flag & REF_ISSYMREF)
(68,lock)
(69,const unsigned char *sha1)
(70,error("Couldn\'t set %s", lock->ref_name)
(71,log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg)
(72,lock)
(73,head_sha1)
(74,strcmp(lock->orig_ref_name, "HEAD")
(75,REF_ISSYMREF)
(76,lock)
(77,logmsg)
(78,if (commit_ref(lock)
(79,)
(80,log_ref_write(lock->ref_name, lock->old_sha1, sha1, logmsg)
(81,unlock_ref(lock)
(82,ref_name)
(83,log_ref_write(lock->orig_ref_name, lock->old_sha1, sha1, logmsg)
(84,-1)
(85,1)
(86,lock->ref_name)
(87,"HEAD")
(88,"HEAD")
(89,unlock_ref(lock)
(90,if (strcmp(lock->orig_ref_name, "HEAD")
(91,ref_cache)
(92,orig_ref_name)
(93,sha1)
(94,sha1)
(95,head_ref)
(96,resolve_ref_unsafe("HEAD", RESOLVE_REF_READING,\n\\n\\t\\t\\t\\t\\t      head_sha1, &head_flag)
(97,0)
(98,head_flag)
(99,lock)
(100,strcmp(lock->ref_name, lock->orig_ref_name)
(101,head_ref)
(102,)
(103,lock)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^