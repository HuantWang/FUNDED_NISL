-----label-----
0
-----code-----
static void matchdir(char *pattern, boolean_t check_ncargs)
{
    struct stat stb;

#ifdef HAVE_DIRENT_H
    register struct dirent *dp;
#else
    register struct direct *dp;
#endif

    DIR *dirp;

    dirp = opendir(*gpath == '\0' ? "." : gpath);
    if (dirp == NULL) {
	if (globbed)
	    return;
	goto patherr2;
    }
#ifdef HAVE_DIRFD
    if (fstat(dirfd(dirp), &stb) < 0)
#else /* HAVE_DIRFD */
    if (fstat(dirp->dd_fd, &stb) < 0)
#endif /* HAVE_DIRFD */
	goto patherr1;
    if (!isdir(stb)) {
	errno = ENOTDIR;
	goto patherr1;
    }
    while (!globerr && ((dp = readdir(dirp)) != NULL)) {
	if (dp->d_ino == 0)
	    continue;
	if (match(dp->d_name, pattern, check_ncargs)) {
	    Gcat(gpath, dp->d_name, check_ncargs);
	    globcnt++;
	}
    }
    closedir(dirp);
    return;

  patherr1:
    closedir(dirp);
  patherr2:
    globerr = "Bad directory components";
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
11,12
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
16,17
17,18
17,19
18,19
20,21
22,23
23,24
23,25
24,25
26,27
26,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
38,39
40,41
40,42
41,42
43,44
43,45
43,46
44,45
44,46
45,46
46,47
50,51
52,53
52,54
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
65,67
66,67
66,68
67,68
67,69
67,70
68,69
70,71
70,72
71,72
74,75
75,76
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
87,88
87,89
88,89
89,90
89,91
90,91
92,93
94,95
96,97
96,98
97,98
97,99
98,99
99,100
101,102
102,103
102,104
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
112,113
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
123,124
123,125
124,125
124,126
124,127
124,128
125,126
127,128
127,129
128,129
131,132
133,134
135,136
135,137
136,137
137,138
137,139
137,140
137,141
138,139
140,141
142,143
142,144
143,144
146,147
148,149
149,150
150,151
152,153
153,154
153,155
154,155
156,157
159,160
159,161
161,162
162,163
162,164
163,164
165,166
167,168
167,169
169,170
170,171
170,172
171,172
-----nextToken-----
2,4,6,8,9,12,14,19,21,25,27,28,32,34,35,39,42,47,48,49,51,55,57,61,62,64,69,72,73,76,77,79,84,86,91,93,95,100,106,109,111,113,119,120,121,122,126,129,130,132,134,139,141,144,145,147,151,155,157,158,160,164,166,168,172,173
-----computeFrom-----
37,38
37,39
44,45
44,46
53,54
53,55
66,67
66,68
89,90
89,91
97,98
97,99
102,103
102,104
104,105
104,106
116,117
116,118
170,171
170,172
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ConditionalExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ReturnStatement;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;WhileStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ContinueStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void matchdir(char *pattern, boolean_t check_ncargs){    struct stat stb;#ifdef HAVE_DIRENT_H    register struct dirent *dp;#else    register struct direct *dp;#endif    DIR *dirp;    dirp = opendir(*gpath == '\0' ? "." : gpath);    if (dirp == NULL) {	if (globbed)	    return;	goto patherr2;    }#ifdef HAVE_DIRFD    if (fstat(dirfd(dirp), &stb) < 0)#else /* HAVE_DIRFD */    if (fstat(dirp->dd_fd, &stb) < 0)#endif /* HAVE_DIRFD */	goto patherr1;    if (!isdir(stb)) {	errno = ENOTDIR;	goto patherr1;    }    while (!globerr && ((dp = readdir(dirp)) != NULL)) {	if (dp->d_ino == 0)	    continue;	if (match(dp->d_name, pattern, check_ncargs)) {	    Gcat(gpath, dp->d_name, check_ncargs);	    globcnt++;	}    }    closedir(dirp);    return;  patherr1:    closedir(dirp);  patherr2:    globerr = "Bad directory components";}
static void
matchdir(char *pattern, boolean_t check_ncargs)
matchdir
char *pattern
char
*pattern
*
pattern
boolean_t check_ncargs
boolean_t
boolean_t
check_ncargs
check_ncargs
{    struct stat stb;#ifdef HAVE_DIRENT_H    register struct dirent *dp;#else    register struct direct *dp;#endif    DIR *dirp;    dirp = opendir(*gpath == '\0' ? "." : gpath);    if (dirp == NULL) {	if (globbed)	    return;	goto patherr2;    }#ifdef HAVE_DIRFD    if (fstat(dirfd(dirp), &stb) < 0)#else /* HAVE_DIRFD */    if (fstat(dirp->dd_fd, &stb) < 0)#endif /* HAVE_DIRFD */	goto patherr1;    if (!isdir(stb)) {	errno = ENOTDIR;	goto patherr1;    }    while (!globerr && ((dp = readdir(dirp)) != NULL)) {	if (dp->d_ino == 0)	    continue;	if (match(dp->d_name, pattern, check_ncargs)) {	    Gcat(gpath, dp->d_name, check_ncargs);	    globcnt++;	}    }    closedir(dirp);    return;  patherr1:    closedir(dirp);  patherr2:    globerr = "Bad directory components";}
struct stat stb;
struct stat stb;
struct stat
stat
stb
stb
register struct direct *dp;
register struct direct *dp;
register struct direct
direct
*dp
*
dp
DIR *dirp;
DIR *dirp;
DIR
DIR
*dirp
*
dirp
dirp = opendir(*gpath == '\0' ? "." : gpath);
dirp = opendir(*gpath == '\0' ? "." : gpath)
dirp
dirp
opendir(*gpath == '\0' ? "." : gpath)
opendir
opendir
*gpath == '\0' ? "." : gpath
*gpath == '\0'
*gpath
gpath
gpath
'\0'
"."
gpath
gpath
if (dirp == NULL) {	if (globbed)	    return;	goto patherr2;    }
dirp == NULL
dirp
dirp
NULL
NULL
{	if (globbed)	    return;	goto patherr2;    }
if (globbed)	    return;
globbed
globbed
return;
goto patherr2;
patherr2
if (fstat(dirp->dd_fd, &stb) < 0)#endif /* HAVE_DIRFD */	goto patherr1;
fstat(dirp->dd_fd, &stb) < 0
fstat(dirp->dd_fd, &stb)
fstat
fstat
dirp->dd_fd
dirp
dirp
dd_fd
&stb
stb
stb
0
goto patherr1;
patherr1
if (!isdir(stb)) {	errno = ENOTDIR;	goto patherr1;    }
!isdir(stb)
isdir(stb)
isdir
isdir
stb
stb
{	errno = ENOTDIR;	goto patherr1;    }
errno = ENOTDIR;
errno = ENOTDIR
errno
errno
ENOTDIR
ENOTDIR
goto patherr1;
patherr1
while (!globerr && ((dp = readdir(dirp)) != NULL)) {	if (dp->d_ino == 0)	    continue;	if (match(dp->d_name, pattern, check_ncargs)) {	    Gcat(gpath, dp->d_name, check_ncargs);	    globcnt++;	}    }
!globerr && ((dp = readdir(dirp)) != NULL)
!globerr
globerr
globerr
((dp = readdir(dirp)) != NULL)
(dp = readdir(dirp)) != NULL
(dp = readdir(dirp))
dp = readdir(dirp)
dp
dp
readdir(dirp)
readdir
readdir
dirp
dirp
NULL
NULL
{	if (dp->d_ino == 0)	    continue;	if (match(dp->d_name, pattern, check_ncargs)) {	    Gcat(gpath, dp->d_name, check_ncargs);	    globcnt++;	}    }
if (dp->d_ino == 0)	    continue;
dp->d_ino == 0
dp->d_ino
dp
dp
d_ino
0
continue;
if (match(dp->d_name, pattern, check_ncargs)) {	    Gcat(gpath, dp->d_name, check_ncargs);	    globcnt++;	}
match(dp->d_name, pattern, check_ncargs)
match
match
dp->d_name
dp
dp
d_name
pattern
pattern
check_ncargs
check_ncargs
{	    Gcat(gpath, dp->d_name, check_ncargs);	    globcnt++;	}
Gcat(gpath, dp->d_name, check_ncargs);
Gcat(gpath, dp->d_name, check_ncargs)
Gcat
Gcat
gpath
gpath
dp->d_name
dp
dp
d_name
check_ncargs
check_ncargs
globcnt++;
globcnt++
globcnt
globcnt
closedir(dirp);
closedir(dirp)
closedir
closedir
dirp
dirp
return;
patherr1:    closedir(dirp);
patherr1
closedir(dirp);
closedir(dirp)
closedir
closedir
dirp
dirp
patherr2:    globerr = "Bad directory components";
patherr2
globerr = "Bad directory components";
globerr = "Bad directory components"
globerr
globerr
"Bad directory components"
-----joern-----
(63,52,0)
(78,69,0)
(48,28,0)
(18,40,0)
(32,36,0)
(66,41,0)
(40,39,0)
(35,0,0)
(10,52,0)
(23,41,0)
(58,38,0)
(75,32,0)
(11,48,0)
(0,35,0)
(17,62,0)
(26,73,0)
(21,77,0)
(55,36,0)
(77,36,0)
(30,52,0)
(56,36,0)
(37,44,0)
(33,69,0)
(42,38,0)
(59,36,0)
(43,28,0)
(15,43,0)
(33,43,0)
(62,69,0)
(24,27,0)
(52,30,0)
(64,73,0)
(51,62,0)
(52,63,0)
(30,41,0)
(81,36,0)
(26,69,0)
(80,26,0)
(52,10,0)
(20,36,0)
(22,33,0)
(74,78,0)
(50,69,0)
(0,38,0)
(29,36,0)
(50,41,0)
(69,50,0)
(77,41,0)
(54,19,0)
(73,26,0)
(9,12,0)
(6,38,0)
(82,87,0)
(78,9,0)
(41,42,0)
(85,43,0)
(25,50,0)
(42,41,0)
(69,78,0)
(32,41,0)
(67,39,0)
(76,12,0)
(83,61,0)
(49,34,0)
(86,87,0)
(41,36,0)
(12,9,0)
(43,33,0)
(71,36,0)
(5,26,0)
(45,35,0)
(7,30,0)
(19,70,0)
(16,36,0)
(68,19,0)
(13,66,0)
(79,40,0)
(2,63,0)
(65,37,0)
(19,31,0)
(1,0,0)
(46,36,0)
(34,36,0)
(43,31,0)
(60,61,0)
(8,34,0)
(27,36,0)
(62,19,0)
(38,42,0)
(72,66,0)
(47,69,0)
(38,0,0)
(19,62,0)
(24,3,0)
(57,10,0)
(44,37,0)
(9,78,0)
(14,33,0)
(76,19,1)
(38,0,1)
(72,13,1)
(24,3,1)
(8,60,1)
(24,34,1)
(67,40,1)
(9,12,1)
(77,21,1)
(76,48,1)
(22,14,1)
(0,35,1)
(32,75,1)
(66,41,1)
(12,76,1)
(37,65,1)
(10,57,1)
(9,78,1)
(49,8,1)
(64,26,1)
(38,58,1)
(75,67,1)
(7,66,1)
(33,69,1)
(0,1,1)
(42,38,1)
(34,49,1)
(38,6,1)
(43,85,1)
(52,63,1)
(58,0,1)
(54,68,1)
(21,9,1)
(66,72,1)
(43,31,1)
(13,41,1)
(26,69,1)
(75,53,1)
(63,2,1)
(45,23,1)
(76,4,1)
(68,62,1)
(5,80,1)
(8,32,1)
(30,7,1)
(76,44,1)
(17,51,1)
(78,74,1)
(26,5,1)
(80,9,1)
(24,27,1)
(14,15,1)
(32,41,1)
(79,44,1)
(18,79,1)
(3,84,1)
(51,73,1)
(33,22,1)
(19,62,1)
(69,50,1)
(19,31,1)
(6,0,1)
(73,64,1)
(40,18,1)
(84,66,1)
(10,52,1)
(50,25,1)
(52,30,1)
(30,41,1)
(25,47,1)
(15,19,1)
(19,70,1)
(60,84,1)
(78,69,1)
(2,30,1)
(48,11,1)
(77,41,1)
(27,77,1)
(85,33,1)
(62,69,1)
(50,41,1)
(4,73,1)
(1,35,1)
(47,12,1)
(43,33,1)
(53,10,1)
(65,10,1)
(74,69,1)
(73,26,1)
(62,17,1)
(44,37,1)
(57,52,1)
(11,43,1)
(41,42,1)
(19,54,1)
(35,45,1)
(10,66,2)
(32,10,2)
(8,44,2)
(9,44,2)
(34,10,2)
(8,84,2)
(11,19,2)
(80,9,2)
(26,69,2)
(65,10,2)
(74,12,2)
(52,66,2)
(73,9,2)
(76,44,2)
(7,66,2)
(12,9,2)
(44,10,2)
(19,62,2)
(5,9,2)
(3,84,2)
(19,70,2)
(53,10,2)
(6,0,2)
(24,3,2)
(49,44,2)
(30,41,2)
(52,63,2)
(66,41,2)
(24,27,2)
(73,26,2)
(76,9,2)
(54,73,2)
(9,9,2)
(49,84,2)
(15,19,2)
(63,66,2)
(78,12,2)
(44,37,2)
(84,66,2)
(12,44,2)
(22,19,2)
(41,42,2)
(42,38,2)
(57,66,2)
(58,0,2)
(52,30,2)
(67,44,2)
(62,73,2)
(43,19,2)
(38,0,2)
(48,19,2)
(17,73,2)
(64,9,2)
(69,12,2)
(19,73,2)
(2,66,2)
(50,41,2)
(18,44,2)
(47,12,2)
(62,69,2)
(75,10,2)
(49,10,2)
(78,69,2)
(68,73,2)
(50,12,2)
(75,44,2)
(60,84,2)
(9,78,2)
(26,9,2)
(19,31,2)
(79,44,2)
(9,12,2)
(14,19,2)
(77,41,2)
(32,44,2)
(34,84,2)
(43,31,2)
(30,66,2)
(32,41,2)
(8,10,2)
(21,44,2)
(51,73,2)
(85,19,2)
(27,44,2)
(4,73,2)
(33,69,2)
(25,12,2)
(37,10,2)
(40,44,2)
(69,50,2)
(33,19,2)
(10,52,2)
(0,35,2)
(34,44,2)
(43,33,2)
(77,44,2)
-----------------------------------
(0,*gpath == \'\\0\')
(1,\'\\0\')
(2,stb)
(3,return;)
(4,continue;)
(5,d_ino)
(6,gpath)
(7,dirp)
(8,globerr)
(9,!globerr && ((dp = readdir(dirp)
(10,fstat(dirfd(dirp)
(11,globcnt)
(12,!globerr)
(13,dirp)
(14,dp)
(15,gpath)
(16,if (dirp == NULL)
(17,d_name)
(18,ENOTDIR)
(19,match(dp->d_name, pattern, check_ncargs)
(20,patherr2:)
(21,dirp)
(22,d_name)
(23,dirp)
(24,RET)
(25,dirp)
(26,dp->d_ino)
(27,return;)
(28,)
(29,if (fstat(dirfd(dirp)
(30,dirfd(dirp)
(31,boolean_t check_ncargs)
(32,closedir(dirp)
(33,dp->d_name)
(34,globerr = "Bad directory components")
(35,*gpath)
(36,)
(37,isdir(stb)
(38,*gpath == \'\\0\' ? "." : gpath)
(39,)
(40,errno = ENOTDIR)
(41,dirp = opendir(*gpath == \'\\0\' ? "." : gpath)
(42,opendir(*gpath == \'\\0\' ? "." : gpath)
(43,Gcat(gpath, dp->d_name, check_ncargs)
(44,!isdir(stb)
(45,gpath)
(46,dirp)
(47,dp)
(48,globcnt++)
(49,"Bad directory components")
(50,readdir(dirp)
(51,dp)
(52,fstat(dirfd(dirp)
(53,goto patherr1;)
(54,check_ncargs)
(55,while (!globerr && ((dp = readdir(dirp)
(56,if (!isdir(stb)
(57,0)
(58,".")
(59,dp)
(60,goto patherr2;)
(61,)
(62,dp->d_name)
(63,&stb)
(64,0)
(65,stb)
(66,dirp == NULL)
(67,goto patherr1;)
(68,pattern)
(69,dp = readdir(dirp)
(70,char *pattern)
(71,stb)
(72,NULL)
(73,dp->d_ino == 0)
(74,NULL)
(75,dirp)
(76,globerr)
(77,closedir(dirp)
(78,(dp = readdir(dirp)
(79,errno)
(80,dp)
(81,patherr1:)
(82,if (match(dp->d_name, pattern, check_ncargs)
(83,if (globbed)
(84,globbed)
(85,check_ncargs)
(86,if (dp->d_ino == 0)
(87,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^