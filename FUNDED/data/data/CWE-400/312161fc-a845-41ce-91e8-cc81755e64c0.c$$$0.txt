-----label-----
1
-----code-----
void
tcp_reass_flush(struct tcpcb *tp)
{
	struct tseg_qent *qe;

	INP_WLOCK_ASSERT(tp->t_inpcb);

	while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {
		LIST_REMOVE(qe, tqe_q);
		m_freem(qe->tqe_m);
		uma_zfree(V_tcp_reass_zone, qe);
		tp->t_segqlen--;
	}

	KASSERT((tp->t_segqlen == 0),
	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",
	    tp, tp->t_segqlen));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
24,25
27,28
27,29
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
34,35
36,37
37,38
37,39
38,39
41,42
43,44
43,45
43,46
43,47
44,45
45,46
45,47
45,48
46,47
48,49
50,51
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
61,64
62,63
64,65
66,67
68,69
69,70
70,71
70,72
71,72
74,75
75,76
75,77
75,78
76,77
78,79
79,80
79,81
80,81
80,82
81,82
85,86
86,87
86,88
86,89
88,89
90,91
90,92
91,92
-----nextToken-----
2,4,7,9,10,15,17,18,22,25,26,32,35,39,40,42,47,49,51,55,58,59,63,65,67,72,73,77,82,83,84,87,89,92,93
-----computeFrom-----
28,29
28,30
30,31
30,32
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
voidtcp_reass_flush(struct tcpcb *tp){	struct tseg_qent *qe;	INP_WLOCK_ASSERT(tp->t_inpcb);	while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}	KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen));}
void
tcp_reass_flush(struct tcpcb *tp)
tcp_reass_flush
struct tcpcb *tp
struct tcpcb
tcpcb
*tp
*
tp
{	struct tseg_qent *qe;	INP_WLOCK_ASSERT(tp->t_inpcb);	while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}	KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen));}
struct tseg_qent *qe;
struct tseg_qent *qe;
struct tseg_qent
tseg_qent
*qe
*
qe
INP_WLOCK_ASSERT(tp->t_inpcb);
INP_WLOCK_ASSERT(tp->t_inpcb)
INP_WLOCK_ASSERT
INP_WLOCK_ASSERT
tp->t_inpcb
tp
tp
t_inpcb
while ((qe = LIST_FIRST(&tp->t_segq)) != NULL) {		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}
(qe = LIST_FIRST(&tp->t_segq)) != NULL
(qe = LIST_FIRST(&tp->t_segq))
qe = LIST_FIRST(&tp->t_segq)
qe
qe
LIST_FIRST(&tp->t_segq)
LIST_FIRST
LIST_FIRST
&tp->t_segq
tp->t_segq
tp
tp
t_segq
NULL
NULL
{		LIST_REMOVE(qe, tqe_q);		m_freem(qe->tqe_m);		uma_zfree(V_tcp_reass_zone, qe);		tp->t_segqlen--;	}
LIST_REMOVE(qe, tqe_q);
LIST_REMOVE(qe, tqe_q)
LIST_REMOVE
LIST_REMOVE
qe
qe
tqe_q
tqe_q
m_freem(qe->tqe_m);
m_freem(qe->tqe_m)
m_freem
m_freem
qe->tqe_m
qe
qe
tqe_m
uma_zfree(V_tcp_reass_zone, qe);
uma_zfree(V_tcp_reass_zone, qe)
uma_zfree
uma_zfree
V_tcp_reass_zone
V_tcp_reass_zone
qe
qe
tp->t_segqlen--;
tp->t_segqlen--
tp->t_segqlen
tp
tp
t_segqlen
KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen));
KASSERT((tp->t_segqlen == 0),	    ("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen))
KASSERT
KASSERT
(tp->t_segqlen == 0)
tp->t_segqlen == 0
tp->t_segqlen
tp
tp
t_segqlen
0
("TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen)
"TCP reass queue %p segment count is %d instead of 0 after flush.",	    tp, tp->t_segqlen
"TCP reass queue %p segment count is %d instead of 0 after flush."
tp
tp
tp->t_segqlen
tp
tp
t_segqlen
-----joern-----
(29,19,0)
(16,41,0)
(7,37,0)
(33,34,0)
(24,23,0)
(41,25,0)
(41,13,0)
(36,25,0)
(8,15,0)
(23,0,0)
(14,17,0)
(31,14,0)
(5,22,0)
(28,34,0)
(13,41,0)
(4,12,0)
(13,17,0)
(1,12,0)
(9,21,0)
(9,12,0)
(29,21,0)
(22,15,0)
(22,5,0)
(19,29,0)
(35,15,0)
(19,0,0)
(32,9,0)
(13,15,0)
(10,12,0)
(3,20,0)
(44,17,0)
(20,3,0)
(40,19,0)
(17,13,0)
(11,5,0)
(12,1,0)
(23,14,0)
(6,23,0)
(5,0,0)
(37,12,0)
(2,19,0)
(3,0,0)
(25,41,0)
(37,21,0)
(12,10,0)
(43,37,0)
(18,9,0)
(25,0,0)
(45,34,0)
(45,21,0)
(34,45,0)
(30,3,0)
(34,12,0)
(20,1,0)
(27,3,0)
(38,10,0)
(39,25,0)
(1,20,0)
(42,5,0)
(13,17,1)
(18,45,1)
(27,30,1)
(9,32,1)
(5,0,1)
(45,34,1)
(9,12,1)
(19,0,1)
(41,25,1)
(6,31,1)
(2,40,1)
(3,27,1)
(23,0,1)
(5,42,1)
(44,41,1)
(16,25,1)
(22,5,1)
(26,13,1)
(41,16,1)
(25,39,1)
(39,36,1)
(3,0,1)
(36,10,1)
(20,3,1)
(13,41,1)
(32,18,1)
(34,28,1)
(25,0,1)
(34,12,1)
(23,24,1)
(4,29,1)
(4,22,1)
(10,12,1)
(43,7,1)
(19,2,1)
(13,23,1)
(31,44,1)
(10,38,1)
(7,10,1)
(37,12,1)
(29,19,1)
(37,43,1)
(42,11,1)
(24,6,1)
(28,33,1)
(33,37,1)
(1,20,1)
(38,12,1)
(12,1,1)
(40,9,1)
(30,4,1)
(3,10,2)
(40,10,2)
(45,10,2)
(3,0,2)
(43,10,2)
(10,12,2)
(37,10,2)
(45,34,2)
(19,10,2)
(1,20,2)
(12,10,2)
(34,10,2)
(1,10,2)
(27,10,2)
(18,10,2)
(13,17,2)
(32,10,2)
(29,10,2)
(2,10,2)
(13,41,2)
(28,10,2)
(22,5,2)
(25,0,2)
(20,10,2)
(12,1,2)
(30,10,2)
(38,10,2)
(37,12,2)
(5,0,2)
(9,10,2)
(29,19,2)
(33,10,2)
(20,3,2)
(41,25,2)
(19,0,2)
(7,10,2)
(9,12,2)
(23,0,2)
(34,12,2)
(10,10,2)
(4,10,2)
-----------------------------------
(0,struct tcpcb *tp)
(1,LIST_FIRST(&tp->t_segq)
(2,t_segqlen)
(3,tp->t_segq)
(4,qe)
(5,tp->t_inpcb)
(6,tp)
(7,qe)
(8,qe)
(9,uma_zfree(V_tcp_reass_zone, qe)
(10,(qe = LIST_FIRST(&tp->t_segq)
(11,tp)
(12,qe = LIST_FIRST(&tp->t_segq)
(13,KASSERT((tp->t_segqlen == 0)
(14,)
(15,)
(16,0)
(17,)
(18,V_tcp_reass_zone)
(19,tp->t_segqlen)
(20,&tp->t_segq)
(21,)
(22,INP_WLOCK_ASSERT(tp->t_inpcb)
(23,tp->t_segqlen)
(24,t_segqlen)
(25,tp->t_segqlen)
(26,RET)
(27,t_segq)
(28,tqe_m)
(29,tp->t_segqlen--)
(30,tp)
(31,tp)
(32,qe)
(33,qe)
(34,qe->tqe_m)
(35,while ((qe = LIST_FIRST(&tp->t_segq)
(36,tp)
(37,LIST_REMOVE(qe, tqe_q)
(38,NULL)
(39,t_segqlen)
(40,tp)
(41,tp->t_segqlen == 0)
(42,t_inpcb)
(43,tqe_q)
(44,"TCP reass queue %p segment count is %d instead of 0 after flush.")
(45,m_freem(qe->tqe_m)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^