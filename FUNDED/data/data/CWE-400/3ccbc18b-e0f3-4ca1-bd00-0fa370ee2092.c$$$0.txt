-----label-----
1
-----code-----
void CWE401_Memory_Leak__int64_t_malloc_12_bad()
{
    int64_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int64_t *)malloc(100*sizeof(int64_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
19,22
20,21
21,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
72,75
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
83,85
84,85
86,87
86,88
88,89
89,90
89,91
90,91
93,94
94,95
94,96
95,96
95,97
96,97
100,101
101,102
101,103
102,103
104,105
104,106
105,106
108,109
108,110
108,111
109,110
110,111
112,113
114,115
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,61,62,63,67,70,71,76,80,82,85,87,91,92,97,98,99,103,106,107,111,113,118,120
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
74,75
74,76
86,87
86,88
94,95
94,96
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int64_t_malloc_12_bad(){    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__int64_t_malloc_12_bad()
CWE401_Memory_Leak__int64_t_malloc_12_bad
{    int64_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int64_t *)malloc(100*sizeof(int64_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)malloc(100*sizeof(int64_t));
data = (int64_t *)malloc(100*sizeof(int64_t))
data
data
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(17,44,0)
(47,40,0)
(35,46,0)
(16,14,0)
(43,40,0)
(26,3,0)
(26,8,0)
(7,49,0)
(32,14,0)
(46,8,0)
(46,35,0)
(25,38,0)
(15,44,0)
(48,49,0)
(3,38,0)
(32,49,0)
(6,15,0)
(13,21,0)
(35,26,0)
(38,25,0)
(2,41,0)
(0,26,0)
(23,12,0)
(37,28,0)
(1,25,0)
(23,7,0)
(41,2,0)
(3,26,0)
(28,37,0)
(25,1,0)
(34,49,0)
(24,15,0)
(36,35,0)
(14,7,0)
(33,8,0)
(23,4,0)
(14,32,0)
(20,2,0)
(29,7,0)
(12,23,0)
(3,27,0)
(39,35,0)
(18,14,0)
(7,23,0)
(30,37,0)
(13,26,0)
(45,28,0)
(4,23,0)
(22,44,0)
(11,13,0)
(9,25,0)
(27,3,0)
(12,37,0)
(38,3,0)
(10,1,0)
(40,7,0)
(41,19,0)
(37,12,0)
(13,7,0)
(31,44,0)
(29,50,1)
(13,26,1)
(39,36,1)
(15,6,1)
(37,28,1)
(48,40,1)
(32,14,1)
(26,3,1)
(23,4,1)
(12,37,1)
(3,38,1)
(42,13,1)
(16,18,1)
(11,5,1)
(13,11,1)
(6,24,1)
(20,40,1)
(50,15,1)
(14,16,1)
(7,23,1)
(43,7,1)
(5,32,1)
(1,10,1)
(36,33,1)
(3,27,1)
(5,46,1)
(41,2,1)
(30,29,1)
(14,7,1)
(40,7,1)
(38,25,1)
(28,45,1)
(48,41,1)
(42,5,1)
(33,26,1)
(2,20,1)
(18,48,1)
(40,47,1)
(9,0,1)
(35,26,1)
(10,9,1)
(35,39,1)
(23,12,1)
(0,50,1)
(47,43,1)
(13,7,1)
(45,30,1)
(46,35,1)
(25,1,1)
(11,5,2)
(13,7,2)
(47,50,2)
(32,14,2)
(9,50,2)
(45,50,2)
(23,4,2)
(43,50,2)
(37,50,2)
(35,26,2)
(2,40,2)
(38,50,2)
(23,50,2)
(26,50,2)
(36,50,2)
(39,50,2)
(32,50,2)
(7,50,2)
(20,40,2)
(14,7,2)
(41,40,2)
(40,7,2)
(10,50,2)
(38,25,2)
(14,50,2)
(3,38,2)
(29,50,2)
(12,50,2)
(25,1,2)
(46,35,2)
(13,5,2)
(26,3,2)
(37,28,2)
(33,50,2)
(48,50,2)
(41,2,2)
(40,50,2)
(18,50,2)
(30,50,2)
(25,50,2)
(12,37,2)
(23,12,2)
(35,50,2)
(28,50,2)
(0,50,2)
(3,27,2)
(3,50,2)
(1,50,2)
(13,26,2)
(16,50,2)
(46,50,2)
(7,23,2)
-----------------------------------
(0,data)
(1,sizeof(int64_t)
(2,-1)
(3,(int64_t *)
(4,int64_t *)
(5,globalReturnsTrueOrFalse()
(6,NULL)
(7,data = (int64_t *)
(8,)
(9,100)
(10,int64_t)
(11,data)
(12,malloc(100*sizeof(int64_t)
(13,free(data)
(14,data[0])
(15,data = NULL)
(16,0)
(17,if(globalReturnsTrueOrFalse()
(18,data)
(19,)
(20,1)
(21,)
(22,data)
(23,(int64_t *)
(24,data)
(25,100*sizeof(int64_t)
(26,data = (int64_t *)
(27,int64_t *)
(28,sizeof(int64_t)
(29,data)
(30,100)
(31,if(globalReturnsTrueOrFalse()
(32,printLongLongLine(data[0])
(33,L)
(34,if (data == NULL)
(35,data[0])
(36,data)
(37,100*sizeof(int64_t)
(38,ALLOCA(100*sizeof(int64_t)
(39,0)
(40,data == NULL)
(41,exit(-1)
(42,RET)
(43,data)
(44,)
(45,int64_t)
(46,printLongLongLine(data[0])
(47,NULL)
(48,L)
(49,)
(50,globalReturnsTrueOrFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^