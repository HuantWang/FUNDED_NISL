-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(GLOBAL_CONST_TRUE)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
28,30
29,30
31,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
56,57
58,59
58,60
59,60
61,62
61,63
62,63
64,65
65,66
65,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
87,88
89,90
90,91
90,92
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
103,104
103,105
104,105
-----nextToken-----
2,4,9,11,15,16,19,24,27,30,35,37,38,42,45,47,52,55,57,60,63,66,67,71,73,78,80,84,86,88,92,94,98,100,105,106
-----computeFrom-----
13,14
13,15
22,23
22,24
40,41
40,42
50,51
50,52
61,62
61,63
69,70
69,71
-----guardedBy-----
47,88
42,63
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_09_bad
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(GLOBAL_CONST_TRUE)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(36,33,0)
(45,0,0)
(39,33,0)
(17,19,0)
(23,44,0)
(9,5,0)
(12,24,0)
(28,44,0)
(42,28,0)
(11,40,0)
(25,39,0)
(44,47,0)
(10,49,0)
(15,19,0)
(13,44,0)
(24,47,0)
(29,5,0)
(5,9,0)
(48,33,0)
(7,9,0)
(46,44,0)
(34,10,0)
(19,15,0)
(35,46,0)
(16,10,0)
(34,40,0)
(41,44,0)
(10,8,0)
(26,39,0)
(49,10,0)
(13,2,0)
(37,41,0)
(2,13,0)
(6,24,0)
(30,34,0)
(22,47,0)
(31,28,0)
(41,47,0)
(40,34,0)
(5,39,0)
(4,0,0)
(43,33,0)
(5,2,0)
(13,27,0)
(15,32,0)
(2,5,0)
(44,13,0)
(27,13,0)
(34,39,0)
(14,18,0)
(46,47,0)
(38,14,0)
(5,10,0)
(0,21,0)
(24,44,0)
(42,44,1)
(10,49,1)
(41,44,1)
(9,7,1)
(24,6,1)
(23,34,1)
(30,3,1)
(31,42,1)
(5,10,1)
(15,19,1)
(20,39,1)
(38,34,1)
(35,41,1)
(25,26,1)
(49,16,1)
(19,17,1)
(37,24,1)
(34,39,1)
(28,44,1)
(12,15,1)
(14,38,1)
(13,2,1)
(16,20,1)
(34,10,1)
(28,31,1)
(3,20,1)
(7,29,1)
(44,13,1)
(6,12,1)
(2,5,1)
(1,3,1)
(12,28,1)
(17,28,1)
(29,23,1)
(24,44,1)
(39,25,1)
(5,39,1)
(46,44,1)
(13,27,1)
(5,9,1)
(40,11,1)
(46,35,1)
(1,46,1)
(1,14,1)
(41,37,1)
(34,40,1)
(3,10,1)
(11,30,1)
(41,34,2)
(31,34,2)
(13,2,2)
(46,34,2)
(40,3,2)
(5,9,2)
(13,27,2)
(49,20,2)
(15,19,2)
(19,28,2)
(10,49,2)
(38,34,2)
(23,34,2)
(30,3,2)
(5,39,2)
(34,40,2)
(2,5,2)
(5,10,2)
(29,34,2)
(24,44,2)
(11,3,2)
(6,34,2)
(14,34,2)
(16,20,2)
(5,34,2)
(10,20,2)
(9,34,2)
(34,39,2)
(41,44,2)
(15,28,2)
(35,34,2)
(28,34,2)
(24,34,2)
(44,13,2)
(34,3,2)
(2,34,2)
(7,34,2)
(44,34,2)
(37,34,2)
(28,44,2)
(17,28,2)
(34,10,2)
(13,34,2)
(42,34,2)
(12,34,2)
(46,44,2)
-----------------------------------
(0,)
(1,RET)
(2,malloc(data*sizeof(char)
(3,GLOBAL_CONST_TRUE)
(4,myString)
(5,data*sizeof(char)
(6,HELLO_STRING)
(7,char)
(8,)
(9,sizeof(char)
(10,data = rand()
(11,HELLO_STRING)
(12,myString)
(13,(char *)
(14,printLine("Input is less than the length of the source string")
(15,exit(-1)
(16,data)
(17,1)
(18,)
(19,-1)
(20,GLOBAL_CONST_TRUE)
(21,)
(22,if (myString == NULL)
(23,myString)
(24,strcpy(myString, HELLO_STRING)
(25,0)
(26,data)
(27,char *)
(28,myString == NULL)
(29,data)
(30,data)
(31,NULL)
(32,)
(33,)
(34,data > strlen(HELLO_STRING)
(35,myString)
(36,data)
(37,myString)
(38,"Input is less than the length of the source string")
(39,data = 0)
(40,strlen(HELLO_STRING)
(41,printLine(myString)
(42,myString)
(43,if(GLOBAL_CONST_TRUE)
(44,myString = (char *)
(45,if (data > strlen(HELLO_STRING)
(46,free(myString)
(47,)
(48,if(GLOBAL_CONST_TRUE)
(49,rand()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^