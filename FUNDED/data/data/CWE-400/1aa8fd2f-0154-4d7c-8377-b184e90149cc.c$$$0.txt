-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
92,93
92,94
93,94
94,95
96,97
97,98
98,99
98,100
99,100
101,102
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,86,90,91,95,100,102
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(49,39,0)
(0,50,0)
(39,31,0)
(9,38,0)
(51,20,0)
(25,47,0)
(26,30,0)
(10,40,0)
(19,30,0)
(20,22,0)
(48,35,0)
(52,12,0)
(28,35,0)
(51,8,0)
(20,51,0)
(27,31,0)
(46,40,0)
(51,27,0)
(32,20,0)
(40,20,0)
(41,12,0)
(43,31,0)
(39,17,0)
(27,7,0)
(7,18,0)
(45,28,0)
(23,32,0)
(32,41,0)
(3,50,0)
(27,51,0)
(13,5,0)
(7,27,0)
(52,22,0)
(8,51,0)
(37,50,0)
(21,32,0)
(39,20,0)
(29,12,0)
(12,29,0)
(41,32,0)
(4,27,0)
(47,20,0)
(3,38,0)
(31,30,0)
(38,22,0)
(2,31,0)
(35,22,0)
(28,40,0)
(5,13,0)
(42,7,0)
(50,3,0)
(18,14,0)
(12,52,0)
(18,7,0)
(6,20,0)
(1,5,0)
(34,30,0)
(11,22,0)
(50,20,0)
(44,3,0)
(12,41,0)
(15,47,0)
(40,28,0)
(13,24,0)
(14,18,0)
(46,47,1)
(1,47,1)
(47,15,1)
(52,12,1)
(16,39,1)
(27,31,1)
(10,46,1)
(21,23,1)
(36,33,1)
(32,20,1)
(45,40,1)
(32,21,1)
(44,50,1)
(18,42,1)
(9,3,1)
(20,51,1)
(47,20,1)
(18,14,1)
(38,9,1)
(28,40,1)
(37,35,1)
(42,4,1)
(35,48,1)
(6,33,1)
(25,20,1)
(39,20,1)
(40,20,1)
(46,13,1)
(28,45,1)
(15,25,1)
(50,20,1)
(49,36,1)
(48,28,1)
(33,31,1)
(12,29,1)
(3,50,1)
(50,0,1)
(51,8,1)
(43,2,1)
(13,5,1)
(39,49,1)
(36,52,1)
(4,6,1)
(3,44,1)
(41,32,1)
(31,43,1)
(0,37,1)
(12,41,1)
(7,18,1)
(39,31,1)
(23,38,1)
(51,27,1)
(16,36,1)
(40,10,1)
(5,1,1)
(27,7,1)
(23,33,2)
(52,12,2)
(49,36,2)
(47,20,2)
(5,47,2)
(20,51,2)
(12,41,2)
(39,20,2)
(10,33,2)
(20,33,2)
(28,40,2)
(25,33,2)
(13,47,2)
(3,33,2)
(15,33,2)
(47,33,2)
(3,50,2)
(41,33,2)
(0,33,2)
(40,33,2)
(35,33,2)
(7,18,2)
(37,33,2)
(18,33,2)
(39,36,2)
(38,33,2)
(27,31,2)
(28,33,2)
(44,33,2)
(40,20,2)
(1,47,2)
(46,33,2)
(51,8,2)
(51,33,2)
(51,27,2)
(32,20,2)
(18,14,2)
(39,31,2)
(50,33,2)
(9,33,2)
(21,33,2)
(42,33,2)
(12,29,2)
(7,33,2)
(27,33,2)
(4,33,2)
(41,32,2)
(52,33,2)
(48,33,2)
(45,33,2)
(32,33,2)
(6,33,2)
(27,7,2)
(13,5,2)
(50,20,2)
(12,33,2)
-----------------------------------
(0,0)
(1,1)
(2,data)
(3,data[0].intTwo)
(4,data)
(5,-1)
(6,data)
(7,100*sizeof(struct _twoIntsStruct)
(8,struct _twoIntsStruct *)
(9,0)
(10,0)
(11,if (data == NULL)
(12,(twoIntsStruct *)
(13,exit(-1)
(14,struct _twoIntsStruct)
(15,NULL)
(16,RET)
(17,)
(18,sizeof(struct _twoIntsStruct)
(19,if(globalReturnsTrue()
(20,data = (struct _twoIntsStruct *)
(21,0)
(22,)
(23,data)
(24,)
(25,data)
(26,data)
(27,realloc(data, 100*sizeof(struct _twoIntsStruct)
(28,data[0].intOne)
(29,twoIntsStruct *)
(30,)
(31,data = NULL)
(32,data[0])
(33,globalReturnsTrue()
(34,if(globalReturnsTrue()
(35,data[0].intOne = 0)
(36,globalReturnsTrue()
(37,data)
(38,data[0].intTwo = 0)
(39,free(data)
(40,data[0])
(41,&data[0])
(42,100)
(43,NULL)
(44,intTwo)
(45,intOne)
(46,data)
(47,data == NULL)
(48,0)
(49,data)
(50,data[0])
(51,(struct _twoIntsStruct *)
(52,printStructLine((twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^