-----label-----
0
-----code-----
vm_page_t
vm_page_alloc(vm_object_t object, vm_pindex_t pindex, int req)
{
	vm_page_t m = NULL;
	int color, flags, page_req;

	page_req = req & VM_ALLOC_CLASS_MASK;
	KASSERT(curthread->td_intr_nesting_level == 0 ||
	    page_req == VM_ALLOC_INTERRUPT,
	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));

	if ((req & VM_ALLOC_NOOBJ) == 0) {
		KASSERT(object != NULL,
		    ("vm_page_alloc: NULL object."));
		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);
		color = (pindex + object->pg_color) & PQ_L2_MASK;
	} else
		color = pindex & PQ_L2_MASK;

	/*
	 * The pager is allowed to eat deeper into the free page list.
	 */
	if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {
		page_req = VM_ALLOC_SYSTEM;
	};

loop:
	mtx_lock_spin(&vm_page_queue_free_mtx);
	if (cnt.v_free_count > cnt.v_free_reserved ||
	    (page_req == VM_ALLOC_SYSTEM && 
	     cnt.v_cache_count == 0 && 
	     cnt.v_free_count > cnt.v_interrupt_free_min) ||
	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {
		/*
		 * Allocate from the free queue if the number of free pages
		 * exceeds the minimum for the request class.
		 */
		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);
	} else if (page_req != VM_ALLOC_INTERRUPT) {
		mtx_unlock_spin(&vm_page_queue_free_mtx);
		/*
		 * Allocatable from cache (non-interrupt only).  On success,
		 * we must free the page and try again, thus ensuring that
		 * cnt.v_*_free_min counters are replenished.
		 */
		vm_page_lock_queues();
		if ((m = vm_page_select_cache(color)) == NULL) {
#if defined(DIAGNOSTIC)
			if (cnt.v_cache_count > 0)
				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);
#endif
			vm_page_unlock_queues();
			atomic_add_int(&vm_pageout_deficit, 1);
			pagedaemon_wakeup();
			return (NULL);
		}
		vm_page_unlock_queues();
		goto loop;
	} else {
		/*
		 * Not allocatable from cache from interrupt, give up.
		 */
		mtx_unlock_spin(&vm_page_queue_free_mtx);
		atomic_add_int(&vm_pageout_deficit, 1);
		pagedaemon_wakeup();
		return (NULL);
	}

	/*
	 *  At this point we had better have found a good page.
	 */

	KASSERT(
	    m != NULL,
	    ("vm_page_alloc(): missing page on free queue")
	);

	/*
	 * Remove from free queue
	 */
	vm_pageq_remove_nowakeup(m);

	/*
	 * Initialize structure.  Only the PG_ZERO flag is inherited.
	 */
	flags = PG_BUSY;
	if (m->flags & PG_ZERO) {
		vm_page_zero_count--;
		if (req & VM_ALLOC_ZERO)
			flags = PG_ZERO | PG_BUSY;
	}
	if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))
		flags &= ~PG_BUSY;
	m->flags = flags;
	if (req & VM_ALLOC_WIRED) {
		atomic_add_int(&cnt.v_wire_count, 1);
		m->wire_count = 1;
	} else
		m->wire_count = 0;
	m->hold_count = 0;
	m->act_count = 0;
	m->busy = 0;
	m->valid = 0;
	KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));
	mtx_unlock_spin(&vm_page_queue_free_mtx);

	if ((req & VM_ALLOC_NOOBJ) == 0)
		vm_page_insert(m, object, pindex);
	else
		m->pindex = pindex;

	/*
	 * Don't wakeup too often - wakeup the pageout daemon when
	 * we would be nearly out of memory.
	 */
	if (vm_paging_needed())
		pagedaemon_wakeup();

	return (m);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
20,30
20,31
20,32
20,33
20,34
20,35
20,36
20,37
20,38
20,39
20,40
20,41
20,42
20,43
20,44
20,45
21,22
22,23
22,24
23,24
25,26
25,27
27,28
28,29
30,31
31,32
31,33
31,34
31,35
33,34
35,36
37,38
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
50,51
52,53
52,54
53,54
53,55
54,55
54,56
55,56
59,60
59,61
60,61
62,63
64,65
66,67
66,68
66,69
67,68
67,69
68,69
69,70
69,71
70,71
72,73
75,76
75,77
75,78
76,77
77,78
77,79
77,80
78,79
80,81
80,82
81,82
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
99,101
100,101
101,102
101,103
102,103
104,105
104,106
105,106
108,109
110,111
111,112
111,113
112,113
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
122,123
122,124
123,124
125,126
127,128
128,129
128,130
129,130
131,132
133,134
134,135
135,136
135,137
136,137
138,139
141,142
141,143
143,144
144,145
144,146
145,146
147,148
148,149
148,150
151,152
151,153
151,154
152,153
152,154
153,154
153,155
154,155
154,156
155,156
155,157
156,157
159,160
159,161
160,161
163,164
164,165
164,166
165,166
165,167
166,167
166,168
167,168
169,170
171,172
171,173
172,173
172,174
173,174
177,178
177,179
178,179
178,180
179,180
182,183
182,184
183,184
186,187
187,188
187,189
188,189
188,190
189,190
191,192
193,194
193,195
194,195
194,196
195,196
199,200
200,201
201,202
201,203
202,203
204,205
204,206
204,207
204,208
205,206
207,208
209,210
211,212
211,213
212,213
213,214
213,215
214,215
216,217
219,220
219,221
219,222
220,221
220,222
221,222
223,224
225,226
225,227
225,228
225,229
225,230
226,227
227,228
227,229
228,229
230,231
231,232
233,234
234,235
235,236
237,238
237,239
238,239
238,240
239,240
240,241
240,242
241,242
243,244
243,245
244,245
246,247
248,249
250,251
250,252
250,253
250,254
251,252
252,253
253,254
255,256
256,257
256,258
256,259
257,258
259,260
260,261
263,264
264,265
265,266
267,268
268,269
269,270
271,272
272,273
273,274
275,276
277,278
277,279
277,280
277,281
278,279
279,280
279,281
280,281
282,283
283,284
285,286
286,287
286,288
286,289
287,288
289,290
290,291
293,294
294,295
295,296
297,298
298,299
299,300
301,302
302,303
302,304
302,305
303,304
305,306
305,307
306,307
308,309
310,311
312,313
313,314
313,315
314,315
316,317
318,319
319,320
319,321
320,321
322,323
324,325
324,326
325,326
325,327
326,327
326,328
327,328
330,331
332,333
332,334
333,334
334,335
335,336
337,338
337,339
338,339
338,340
339,340
341,342
343,344
344,345
344,346
345,346
347,348
347,349
348,349
350,351
352,353
352,354
353,354
353,355
354,355
356,357
357,358
357,359
358,359
360,361
362,363
363,364
363,365
364,365
366,367
367,368
369,370
370,371
370,372
371,372
371,373
372,373
375,376
377,378
377,379
377,380
378,379
378,380
379,380
381,382
383,384
383,385
384,385
385,386
385,387
385,388
386,387
388,389
389,390
389,391
390,391
394,395
395,396
395,397
396,397
396,398
397,398
401,402
402,403
402,404
403,404
403,405
404,405
408,409
409,410
409,411
410,411
410,412
411,412
415,416
416,417
416,418
417,418
417,419
418,419
422,423
423,424
423,425
424,425
424,426
425,426
429,430
430,431
430,432
431,432
431,433
432,433
436,437
437,438
437,439
437,440
438,439
440,441
440,442
441,442
441,443
442,443
446,447
447,448
447,449
449,450
451,452
452,453
452,454
453,454
455,456
456,457
458,459
458,460
458,461
459,460
459,461
460,461
461,462
461,463
462,463
464,465
467,468
468,469
468,470
468,471
468,472
469,470
471,472
473,474
475,476
477,478
478,479
478,480
479,480
479,481
480,481
483,484
485,486
485,487
486,487
487,488
489,490
490,491
491,492
493,494
494,495
495,496
-----nextToken-----
3,5,8,10,13,15,17,19,24,26,29,32,34,36,38,42,45,47,51,56,57,58,61,63,65,71,73,74,79,82,84,86,90,92,94,98,103,106,107,109,113,116,118,124,126,130,132,137,139,140,142,146,149,150,157,158,161,162,168,170,174,175,176,180,181,184,185,190,192,196,197,198,203,206,208,210,215,217,218,222,224,229,232,236,242,245,247,249,254,258,261,262,266,270,274,276,281,284,288,291,292,296,300,304,307,309,311,315,317,321,323,328,329,331,336,340,342,346,349,351,355,359,361,365,368,373,374,376,380,382,387,391,392,393,398,399,400,405,406,407,412,413,414,419,420,421,426,427,428,433,434,435,439,443,444,445,448,450,454,457,463,465,466,470,472,474,476,481,482,484,488,492,496
-----computeFrom-----
40,41
40,42
43,44
43,45
52,53
52,54
53,54
53,55
59,60
59,61
67,68
67,69
69,70
69,71
80,81
80,82
96,97
96,98
99,100
99,101
101,102
101,103
111,112
111,113
114,115
114,116
120,121
120,122
122,123
122,124
128,129
128,130
135,136
135,137
152,153
152,154
153,154
153,155
154,155
154,156
164,165
164,166
165,166
165,167
166,167
166,168
171,172
171,173
177,178
177,179
187,188
187,189
188,189
188,190
193,194
193,195
201,202
201,203
211,212
211,213
213,214
213,215
220,221
220,222
238,239
238,240
240,241
240,242
305,306
305,307
319,320
319,321
325,326
325,327
338,339
338,340
344,345
344,346
347,348
347,349
353,354
353,355
357,358
357,359
363,364
363,365
370,371
370,372
378,379
378,380
395,396
395,397
402,403
402,404
409,410
409,411
416,417
416,418
423,424
423,425
430,431
430,432
440,441
440,442
459,460
459,461
461,462
461,463
478,479
478,480
-----guardedBy-----
130,137
249,270
329,346
331,349
-----guardedByNegation-----
190,222
192,224
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;NullStatement;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;ExpressionList;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
vm_page_tvm_page_alloc(vm_object_t object, vm_pindex_t pindex, int req){	vm_page_t m = NULL;	int color, flags, page_req;	page_req = req & VM_ALLOC_CLASS_MASK;	KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));	if ((req & VM_ALLOC_NOOBJ) == 0) {		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_L2_MASK;	} else		color = pindex & PQ_L2_MASK;	/*	 * The pager is allowed to eat deeper into the free page list.	 */	if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {		page_req = VM_ALLOC_SYSTEM;	};loop:	mtx_lock_spin(&vm_page_queue_free_mtx);	if (cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	} else if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}		vm_page_unlock_queues();		goto loop;	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}	/*	 *  At this point we had better have found a good page.	 */	KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	);	/*	 * Remove from free queue	 */	vm_pageq_remove_nowakeup(m);	/*	 * Initialize structure.  Only the PG_ZERO flag is inherited.	 */	flags = PG_BUSY;	if (m->flags & PG_ZERO) {		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}	if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))		flags &= ~PG_BUSY;	m->flags = flags;	if (req & VM_ALLOC_WIRED) {		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	} else		m->wire_count = 0;	m->hold_count = 0;	m->act_count = 0;	m->busy = 0;	m->valid = 0;	KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));	mtx_unlock_spin(&vm_page_queue_free_mtx);	if ((req & VM_ALLOC_NOOBJ) == 0)		vm_page_insert(m, object, pindex);	else		m->pindex = pindex;	/*	 * Don't wakeup too often - wakeup the pageout daemon when	 * we would be nearly out of memory.	 */	if (vm_paging_needed())		pagedaemon_wakeup();	return (m);}
vm_page_t
vm_page_t
vm_page_alloc(vm_object_t object, vm_pindex_t pindex, int req)
vm_page_alloc
vm_object_t object
vm_object_t
vm_object_t
object
object
vm_pindex_t pindex
vm_pindex_t
vm_pindex_t
pindex
pindex
int req
int
req
req
{	vm_page_t m = NULL;	int color, flags, page_req;	page_req = req & VM_ALLOC_CLASS_MASK;	KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));	if ((req & VM_ALLOC_NOOBJ) == 0) {		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_L2_MASK;	} else		color = pindex & PQ_L2_MASK;	/*	 * The pager is allowed to eat deeper into the free page list.	 */	if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {		page_req = VM_ALLOC_SYSTEM;	};loop:	mtx_lock_spin(&vm_page_queue_free_mtx);	if (cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	} else if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}		vm_page_unlock_queues();		goto loop;	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}	/*	 *  At this point we had better have found a good page.	 */	KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	);	/*	 * Remove from free queue	 */	vm_pageq_remove_nowakeup(m);	/*	 * Initialize structure.  Only the PG_ZERO flag is inherited.	 */	flags = PG_BUSY;	if (m->flags & PG_ZERO) {		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}	if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))		flags &= ~PG_BUSY;	m->flags = flags;	if (req & VM_ALLOC_WIRED) {		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	} else		m->wire_count = 0;	m->hold_count = 0;	m->act_count = 0;	m->busy = 0;	m->valid = 0;	KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));	mtx_unlock_spin(&vm_page_queue_free_mtx);	if ((req & VM_ALLOC_NOOBJ) == 0)		vm_page_insert(m, object, pindex);	else		m->pindex = pindex;	/*	 * Don't wakeup too often - wakeup the pageout daemon when	 * we would be nearly out of memory.	 */	if (vm_paging_needed())		pagedaemon_wakeup();	return (m);}
vm_page_t m = NULL;
vm_page_t m = NULL;
vm_page_t
vm_page_t
m = NULL
m
= NULL
NULL
NULL
int color, flags, page_req;
int color, flags, page_req;
int
color
color
flags
flags
page_req
page_req
page_req = req & VM_ALLOC_CLASS_MASK;
page_req = req & VM_ALLOC_CLASS_MASK
page_req
page_req
req & VM_ALLOC_CLASS_MASK
req
req
VM_ALLOC_CLASS_MASK
VM_ALLOC_CLASS_MASK
KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"));
KASSERT(curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT,	    ("vm_page_alloc(NORMAL|SYSTEM) in interrupt context"))
KASSERT
KASSERT
curthread->td_intr_nesting_level == 0 ||	    page_req == VM_ALLOC_INTERRUPT
curthread->td_intr_nesting_level == 0
curthread->td_intr_nesting_level
curthread
curthread
td_intr_nesting_level
0
page_req == VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
("vm_page_alloc(NORMAL|SYSTEM) in interrupt context")
"vm_page_alloc(NORMAL|SYSTEM) in interrupt context"
if ((req & VM_ALLOC_NOOBJ) == 0) {		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_L2_MASK;	} else		color = pindex & PQ_L2_MASK;
(req & VM_ALLOC_NOOBJ) == 0
(req & VM_ALLOC_NOOBJ)
req & VM_ALLOC_NOOBJ
req
req
VM_ALLOC_NOOBJ
VM_ALLOC_NOOBJ
0
{		KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));		VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);		color = (pindex + object->pg_color) & PQ_L2_MASK;	}
KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."));
KASSERT(object != NULL,		    ("vm_page_alloc: NULL object."))
KASSERT
KASSERT
object != NULL
object
object
NULL
NULL
("vm_page_alloc: NULL object.")
"vm_page_alloc: NULL object."
VM_OBJECT_LOCK_ASSERT(object, MA_OWNED);
VM_OBJECT_LOCK_ASSERT(object, MA_OWNED)
VM_OBJECT_LOCK_ASSERT
VM_OBJECT_LOCK_ASSERT
object
object
MA_OWNED
MA_OWNED
color = (pindex + object->pg_color) & PQ_L2_MASK;
color = (pindex + object->pg_color) & PQ_L2_MASK
color
color
(pindex + object->pg_color) & PQ_L2_MASK
(pindex + object->pg_color)
pindex + object->pg_color
pindex
pindex
object->pg_color
object
object
pg_color
PQ_L2_MASK
PQ_L2_MASK
color = pindex & PQ_L2_MASK;
color = pindex & PQ_L2_MASK
color
color
pindex & PQ_L2_MASK
pindex
pindex
PQ_L2_MASK
PQ_L2_MASK
if ((curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)) {		page_req = VM_ALLOC_SYSTEM;	}
(curproc == pageproc) && (page_req != VM_ALLOC_INTERRUPT)
(curproc == pageproc)
curproc == pageproc
curproc
curproc
pageproc
pageproc
(page_req != VM_ALLOC_INTERRUPT)
page_req != VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
{		page_req = VM_ALLOC_SYSTEM;	}
page_req = VM_ALLOC_SYSTEM;
page_req = VM_ALLOC_SYSTEM
page_req
page_req
VM_ALLOC_SYSTEM
VM_ALLOC_SYSTEM
;
loop:	mtx_lock_spin(&vm_page_queue_free_mtx);
loop
mtx_lock_spin(&vm_page_queue_free_mtx);
mtx_lock_spin(&vm_page_queue_free_mtx);
mtx_lock_spin
mtx_lock_spin
(&vm_page_queue_free_mtx)
&vm_page_queue_free_mtx
&
vm_page_queue_free_mtx
if (cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)) {		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	} else if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}		vm_page_unlock_queues();		goto loop;	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}
cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min) ||	    (page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)
cnt.v_free_count > cnt.v_free_reserved ||	    (page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min)
cnt.v_free_count > cnt.v_free_reserved
cnt.v_free_count
cnt
cnt
v_free_count
cnt.v_free_reserved
cnt
cnt
v_free_reserved
(page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min)
page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0 && 	     cnt.v_free_count > cnt.v_interrupt_free_min
page_req == VM_ALLOC_SYSTEM && 	     cnt.v_cache_count == 0
page_req == VM_ALLOC_SYSTEM
page_req
page_req
VM_ALLOC_SYSTEM
VM_ALLOC_SYSTEM
cnt.v_cache_count == 0
cnt.v_cache_count
cnt
cnt
v_cache_count
0
cnt.v_free_count > cnt.v_interrupt_free_min
cnt.v_free_count
cnt
cnt
v_free_count
cnt.v_interrupt_free_min
cnt
cnt
v_interrupt_free_min
(page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)
page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0
page_req == VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
cnt.v_free_count > 0
cnt.v_free_count
cnt
cnt
v_free_count
0
{		/*		 * Allocate from the free queue if the number of free pages		 * exceeds the minimum for the request class.		 */		m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);	}
m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0);
m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0)
m
m
vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO) != 0)
vm_pageq_find
vm_pageq_find
PQ_FREE
PQ_FREE
color
color
(req & VM_ALLOC_ZERO) != 0
(req & VM_ALLOC_ZERO)
req & VM_ALLOC_ZERO
req
req
VM_ALLOC_ZERO
VM_ALLOC_ZERO
0
if (page_req != VM_ALLOC_INTERRUPT) {		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}		vm_page_unlock_queues();		goto loop;	} else {		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}
page_req != VM_ALLOC_INTERRUPT
page_req
page_req
VM_ALLOC_INTERRUPT
VM_ALLOC_INTERRUPT
{		mtx_unlock_spin(&vm_page_queue_free_mtx);		/*		 * Allocatable from cache (non-interrupt only).  On success,		 * we must free the page and try again, thus ensuring that		 * cnt.v_*_free_min counters are replenished.		 */		vm_page_lock_queues();		if ((m = vm_page_select_cache(color)) == NULL) {#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}		vm_page_unlock_queues();		goto loop;	}
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_lock_queues();
vm_page_lock_queues()
vm_page_lock_queues
vm_page_lock_queues
if ((m = vm_page_select_cache(color)) == NULL) {#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}
(m = vm_page_select_cache(color)) == NULL
(m = vm_page_select_cache(color))
m = vm_page_select_cache(color)
m
m
vm_page_select_cache(color)
vm_page_select_cache
vm_page_select_cache
color
color
NULL
NULL
{#if defined(DIAGNOSTIC)			if (cnt.v_cache_count > 0)				printf("vm_page_alloc(NORMAL): missing pages on cache queue: %d\n", cnt.v_cache_count);#endif			vm_page_unlock_queues();			atomic_add_int(&vm_pageout_deficit, 1);			pagedaemon_wakeup();			return (NULL);		}
vm_page_unlock_queues();
vm_page_unlock_queues()
vm_page_unlock_queues
vm_page_unlock_queues
atomic_add_int(&vm_pageout_deficit, 1);
atomic_add_int(&vm_pageout_deficit, 1)
atomic_add_int
atomic_add_int
&vm_pageout_deficit
vm_pageout_deficit
vm_pageout_deficit
1
pagedaemon_wakeup();
pagedaemon_wakeup()
pagedaemon_wakeup
pagedaemon_wakeup
return (NULL);
(NULL)
NULL
NULL
vm_page_unlock_queues();
vm_page_unlock_queues()
vm_page_unlock_queues
vm_page_unlock_queues
goto loop;
loop
{		/*		 * Not allocatable from cache from interrupt, give up.		 */		mtx_unlock_spin(&vm_page_queue_free_mtx);		atomic_add_int(&vm_pageout_deficit, 1);		pagedaemon_wakeup();		return (NULL);	}
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
atomic_add_int(&vm_pageout_deficit, 1);
atomic_add_int(&vm_pageout_deficit, 1)
atomic_add_int
atomic_add_int
&vm_pageout_deficit
vm_pageout_deficit
vm_pageout_deficit
1
pagedaemon_wakeup();
pagedaemon_wakeup()
pagedaemon_wakeup
pagedaemon_wakeup
return (NULL);
(NULL)
NULL
NULL
KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	);
KASSERT(	    m != NULL,	    ("vm_page_alloc(): missing page on free queue")	)
KASSERT
KASSERT
m != NULL
m
m
NULL
NULL
("vm_page_alloc(): missing page on free queue")
"vm_page_alloc(): missing page on free queue"
vm_pageq_remove_nowakeup(m);
vm_pageq_remove_nowakeup(m)
vm_pageq_remove_nowakeup
vm_pageq_remove_nowakeup
m
m
flags = PG_BUSY;
flags = PG_BUSY
flags
flags
PG_BUSY
PG_BUSY
if (m->flags & PG_ZERO) {		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}
m->flags & PG_ZERO
m->flags
m
m
flags
PG_ZERO
PG_ZERO
{		vm_page_zero_count--;		if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;	}
vm_page_zero_count--;
vm_page_zero_count--
vm_page_zero_count
vm_page_zero_count
if (req & VM_ALLOC_ZERO)			flags = PG_ZERO | PG_BUSY;
req & VM_ALLOC_ZERO
req
req
VM_ALLOC_ZERO
VM_ALLOC_ZERO
flags = PG_ZERO | PG_BUSY;
flags = PG_ZERO | PG_BUSY
flags
flags
PG_ZERO | PG_BUSY
PG_ZERO
PG_ZERO
PG_BUSY
PG_BUSY
if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ))		flags &= ~PG_BUSY;
req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
req
req
(VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ
VM_ALLOC_NOBUSY
VM_ALLOC_NOBUSY
VM_ALLOC_NOOBJ
VM_ALLOC_NOOBJ
flags &= ~PG_BUSY;
flags &= ~PG_BUSY
flags
flags
~PG_BUSY
PG_BUSY
PG_BUSY
m->flags = flags;
m->flags = flags
m->flags
m
m
flags
flags
flags
if (req & VM_ALLOC_WIRED) {		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	} else		m->wire_count = 0;
req & VM_ALLOC_WIRED
req
req
VM_ALLOC_WIRED
VM_ALLOC_WIRED
{		atomic_add_int(&cnt.v_wire_count, 1);		m->wire_count = 1;	}
atomic_add_int(&cnt.v_wire_count, 1);
atomic_add_int(&cnt.v_wire_count, 1)
atomic_add_int
atomic_add_int
&cnt.v_wire_count
cnt.v_wire_count
cnt
cnt
v_wire_count
1
m->wire_count = 1;
m->wire_count = 1
m->wire_count
m
m
wire_count
1
m->wire_count = 0;
m->wire_count = 0
m->wire_count
m
m
wire_count
0
m->hold_count = 0;
m->hold_count = 0
m->hold_count
m
m
hold_count
0
m->act_count = 0;
m->act_count = 0
m->act_count
m
m
act_count
0
m->busy = 0;
m->busy = 0
m->busy
m
m
busy
0
m->valid = 0;
m->valid = 0
m->valid
m
m
valid
0
KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m));
KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m))
KASSERT
KASSERT
m->dirty == 0
m->dirty
m
m
dirty
0
("vm_page_alloc: free/cache page %p was dirty", m)
"vm_page_alloc: free/cache page %p was dirty", m
"vm_page_alloc: free/cache page %p was dirty"
m
m
mtx_unlock_spin(&vm_page_queue_free_mtx);
mtx_unlock_spin(&vm_page_queue_free_mtx)
mtx_unlock_spin
mtx_unlock_spin
&vm_page_queue_free_mtx
vm_page_queue_free_mtx
vm_page_queue_free_mtx
if ((req & VM_ALLOC_NOOBJ) == 0)		vm_page_insert(m, object, pindex);	else		m->pindex = pindex;
(req & VM_ALLOC_NOOBJ) == 0
(req & VM_ALLOC_NOOBJ)
req & VM_ALLOC_NOOBJ
req
req
VM_ALLOC_NOOBJ
VM_ALLOC_NOOBJ
0
vm_page_insert(m, object, pindex);
vm_page_insert(m, object, pindex)
vm_page_insert
vm_page_insert
m
m
object
object
pindex
pindex
m->pindex = pindex;
m->pindex = pindex
m->pindex
m
m
pindex
pindex
pindex
if (vm_paging_needed())		pagedaemon_wakeup();
vm_paging_needed()
vm_paging_needed
vm_paging_needed
pagedaemon_wakeup();
pagedaemon_wakeup()
pagedaemon_wakeup
pagedaemon_wakeup
return (m);
(m)
m
m
-----joern-----
(0,256,0)
(186,188,0)
(26,9,0)
(127,86,0)
(59,22,0)
(62,134,0)
(74,72,0)
(3,208,0)
(191,6,0)
(203,1,0)
(19,188,0)
(20,133,0)
(188,151,0)
(217,232,0)
(142,193,0)
(147,256,0)
(206,72,0)
(258,205,0)
(169,124,0)
(14,75,0)
(168,67,0)
(282,229,0)
(205,188,0)
(198,147,0)
(220,256,0)
(59,176,0)
(79,22,0)
(166,168,0)
(40,37,0)
(158,230,0)
(103,68,0)
(223,205,0)
(222,256,0)
(269,256,0)
(28,251,0)
(261,280,0)
(232,140,0)
(15,186,0)
(131,242,0)
(178,32,0)
(247,115,0)
(25,273,0)
(205,270,0)
(36,274,0)
(80,256,0)
(64,138,0)
(128,151,0)
(279,151,0)
(60,214,0)
(208,256,0)
(121,265,0)
(209,69,0)
(204,11,0)
(28,211,0)
(235,99,0)
(138,68,0)
(118,49,0)
(124,125,0)
(206,152,0)
(251,28,0)
(132,24,0)
(278,188,0)
(152,206,0)
(266,237,0)
(58,272,0)
(43,32,0)
(8,206,0)
(244,79,0)
(69,233,0)
(161,235,0)
(14,169,0)
(192,227,0)
(264,256,0)
(194,140,0)
(280,115,0)
(3,67,0)
(190,45,0)
(139,74,0)
(174,26,0)
(182,50,0)
(151,178,0)
(49,211,0)
(252,256,0)
(231,211,0)
(85,138,0)
(259,83,0)
(210,143,0)
(123,193,0)
(169,83,0)
(57,273,0)
(250,143,0)
(196,7,0)
(42,3,0)
(50,256,0)
(277,156,0)
(234,1,0)
(277,121,0)
(273,25,0)
(17,212,0)
(105,43,0)
(186,16,0)
(152,24,0)
(239,278,0)
(125,124,0)
(27,268,0)
(92,63,0)
(182,188,0)
(111,1,0)
(54,74,0)
(69,43,0)
(106,83,0)
(260,265,0)
(100,26,0)
(269,86,0)
(238,134,0)
(144,24,0)
(14,101,0)
(270,147,0)
(116,88,0)
(242,260,0)
(78,255,0)
(180,99,0)
(221,28,0)
(30,20,0)
(227,13,0)
(91,208,0)
(88,233,0)
(41,176,0)
(169,14,0)
(125,45,0)
(117,256,0)
(226,252,0)
(243,147,0)
(108,47,0)
(224,174,0)
(11,135,0)
(112,216,0)
(158,124,0)
(195,18,0)
(187,145,0)
(276,79,0)
(245,268,0)
(49,208,0)
(114,71,0)
(48,89,0)
(225,85,0)
(5,59,0)
(104,88,0)
(229,216,0)
(277,117,0)
(235,161,0)
(172,9,0)
(94,59,0)
(212,128,0)
(263,117,0)
(50,182,0)
(230,268,0)
(24,152,0)
(31,256,0)
(155,161,0)
(143,210,0)
(37,44,0)
(142,235,0)
(229,282,0)
(253,13,0)
(202,214,0)
(70,282,0)
(215,216,0)
(26,22,0)
(129,82,0)
(47,87,0)
(9,26,0)
(246,91,0)
(6,89,0)
(163,135,0)
(262,274,0)
(124,169,0)
(136,147,0)
(268,230,0)
(148,128,0)
(228,20,0)
(230,158,0)
(89,6,0)
(6,211,0)
(13,178,0)
(255,145,0)
(124,158,0)
(214,22,0)
(175,16,0)
(18,75,0)
(260,242,0)
(26,174,0)
(240,251,0)
(83,169,0)
(79,233,0)
(43,69,0)
(153,186,0)
(216,112,0)
(255,211,0)
(35,255,0)
(207,182,0)
(51,231,0)
(45,208,0)
(176,59,0)
(278,272,0)
(162,256,0)
(71,63,0)
(13,227,0)
(55,237,0)
(110,188,0)
(21,270,0)
(83,208,0)
(66,212,0)
(146,220,0)
(99,235,0)
(34,260,0)
(149,110,0)
(53,82,0)
(151,128,0)
(171,193,0)
(88,32,0)
(184,133,0)
(150,256,0)
(237,230,0)
(235,142,0)
(11,188,0)
(102,256,0)
(107,63,0)
(7,211,0)
(110,220,0)
(19,256,0)
(33,121,0)
(75,82,0)
(193,142,0)
(77,45,0)
(29,252,0)
(38,101,0)
(181,101,0)
(178,174,0)
(219,181,0)
(157,60,0)
(23,112,0)
(99,256,0)
(174,178,0)
(230,237,0)
(154,256,0)
(101,14,0)
(60,188,0)
(79,188,0)
(101,181,0)
(54,188,0)
(170,3,0)
(140,232,0)
(125,111,0)
(254,134,0)
(130,91,0)
(216,229,0)
(4,192,0)
(86,269,0)
(249,151,0)
(63,71,0)
(185,50,0)
(241,182,0)
(165,168,0)
(29,188,0)
(183,110,0)
(87,265,0)
(200,112,0)
(188,189,0)
(137,142,0)
(236,278,0)
(141,256,0)
(93,140,0)
(82,75,0)
(173,178,0)
(167,265,0)
(122,198,0)
(248,188,0)
(73,251,0)
(270,256,0)
(270,133,0)
(267,227,0)
(210,256,0)
(97,115,0)
(96,111,0)
(65,68,0)
(201,231,0)
(179,69,0)
(151,188,0)
(272,256,0)
(138,85,0)
(257,29,0)
(111,125,0)
(212,211,0)
(87,47,0)
(145,255,0)
(81,7,0)
(120,256,0)
(39,154,0)
(67,168,0)
(115,280,0)
(128,212,0)
(45,37,0)
(213,256,0)
(98,68,0)
(218,256,0)
(13,176,0)
(197,198,0)
(160,256,0)
(117,188,0)
(61,79,0)
(52,29,0)
(1,111,0)
(113,156,0)
(90,9,0)
(275,19,0)
(229,256,0)
(271,134,0)
(91,37,0)
(199,49,0)
(281,37,0)
(84,54,0)
(76,11,0)
(208,49,0)
(133,20,0)
(177,18,0)
(164,282,0)
(156,68,0)
(159,6,0)
(126,208,0)
(67,3,0)
(12,36,0)
(95,181,0)
(109,154,0)
(151,176,0)
(25,134,0)
(83,37,0)
(75,14,0)
(227,192,0)
(198,133,0)
(135,256,0)
(63,188,0)
(161,208,0)
(119,54,0)
(75,18,0)
(45,125,0)
(10,60,0)
(112,188,0)
(46,161,0)
(9,233,0)
(17,66,1)
(105,69,1)
(27,245,1)
(221,7,1)
(24,144,1)
(37,281,1)
(161,208,1)
(106,259,1)
(79,188,1)
(121,33,1)
(157,10,1)
(146,110,1)
(87,47,1)
(19,188,1)
(235,142,1)
(126,154,1)
(251,73,1)
(90,100,1)
(119,206,1)
(226,29,1)
(114,63,1)
(216,215,1)
(16,175,1)
(237,55,1)
(86,127,1)
(29,188,1)
(149,183,1)
(45,190,1)
(190,77,1)
(135,163,1)
(231,201,1)
(118,126,1)
(192,227,1)
(241,188,1)
(165,166,1)
(98,138,1)
(187,255,1)
(93,192,1)
(185,182,1)
(116,43,1)
(176,59,1)
(94,41,1)
(140,194,1)
(45,37,1)
(23,200,1)
(214,202,1)
(224,26,1)
(63,92,1)
(276,244,1)
(151,176,1)
(110,188,1)
(7,211,1)
(230,268,1)
(77,169,1)
(71,114,1)
(1,203,1)
(88,233,1)
(127,67,1)
(166,176,1)
(168,165,1)
(6,211,1)
(35,210,1)
(232,217,1)
(229,216,1)
(259,230,1)
(248,158,1)
(99,180,1)
(54,84,1)
(10,145,1)
(207,241,1)
(272,58,1)
(124,169,1)
(89,48,1)
(76,272,1)
(112,23,1)
(2,79,1)
(21,205,1)
(95,83,1)
(142,193,1)
(277,117,1)
(79,233,1)
(49,199,1)
(281,40,1)
(197,122,1)
(97,247,1)
(151,128,1)
(194,93,1)
(67,168,1)
(217,140,1)
(91,208,1)
(51,270,1)
(242,131,1)
(9,172,1)
(154,109,1)
(112,188,1)
(25,273,1)
(249,279,1)
(198,133,1)
(58,278,1)
(177,82,1)
(147,243,1)
(70,216,1)
(257,220,1)
(115,97,1)
(63,188,1)
(6,191,1)
(42,170,1)
(236,252,1)
(232,140,1)
(103,232,1)
(60,188,1)
(269,86,1)
(113,98,1)
(148,212,1)
(57,91,1)
(186,153,1)
(215,112,1)
(137,193,1)
(34,242,1)
(82,129,1)
(179,209,1)
(203,234,1)
(208,49,1)
(47,108,1)
(143,250,1)
(139,54,1)
(73,240,1)
(74,139,1)
(20,30,1)
(201,51,1)
(223,28,1)
(28,211,1)
(69,179,1)
(125,111,1)
(184,7,1)
(75,18,1)
(103,280,1)
(69,233,1)
(164,70,1)
(210,143,1)
(12,71,1)
(159,99,1)
(234,45,1)
(43,69,1)
(186,188,1)
(128,212,1)
(238,192,1)
(46,142,1)
(56,2,1)
(133,20,1)
(270,21,1)
(261,232,1)
(221,133,1)
(15,231,1)
(171,208,1)
(167,260,1)
(183,74,1)
(49,211,1)
(151,178,1)
(228,184,1)
(124,125,1)
(54,188,1)
(142,137,1)
(178,174,1)
(96,1,1)
(28,251,1)
(266,269,1)
(55,266,1)
(81,196,1)
(277,156,1)
(125,45,1)
(227,13,1)
(260,242,1)
(247,261,1)
(277,121,1)
(275,50,1)
(138,85,1)
(92,107,1)
(138,64,1)
(243,136,1)
(100,173,1)
(209,89,1)
(78,35,1)
(231,211,1)
(263,2,1)
(144,132,1)
(40,67,1)
(127,254,1)
(129,53,1)
(254,238,1)
(111,96,1)
(163,11,1)
(111,1,1)
(99,235,1)
(110,149,1)
(108,91,1)
(8,152,1)
(13,176,1)
(246,130,1)
(14,75,1)
(273,57,1)
(253,267,1)
(223,198,1)
(267,271,1)
(91,37,1)
(75,82,1)
(50,182,1)
(89,6,1)
(181,219,1)
(191,159,1)
(166,178,1)
(183,16,1)
(206,8,1)
(258,223,1)
(239,236,1)
(132,231,1)
(170,168,1)
(278,239,1)
(3,208,1)
(182,207,1)
(271,25,1)
(250,229,1)
(175,186,1)
(252,226,1)
(214,22,1)
(174,224,1)
(71,63,1)
(235,161,1)
(45,208,1)
(155,46,1)
(122,28,1)
(130,158,1)
(104,116,1)
(101,181,1)
(14,101,1)
(255,211,1)
(212,17,1)
(84,119,1)
(127,37,1)
(145,255,1)
(212,211,1)
(117,188,1)
(229,164,1)
(279,248,1)
(38,181,1)
(7,81,1)
(66,249,1)
(240,221,1)
(221,71,1)
(153,15,1)
(195,177,1)
(5,94,1)
(161,155,1)
(88,104,1)
(52,257,1)
(182,188,1)
(13,178,1)
(169,83,1)
(128,148,1)
(11,188,1)
(43,105,1)
(270,133,1)
(260,34,1)
(158,230,1)
(173,88,1)
(48,6,1)
(270,147,1)
(83,37,1)
(152,24,1)
(198,197,1)
(280,115,1)
(19,275,1)
(107,147,1)
(83,106,1)
(174,26,1)
(205,188,1)
(26,22,1)
(83,208,1)
(244,61,1)
(206,152,1)
(26,9,1)
(4,227,1)
(180,235,1)
(30,228,1)
(202,60,1)
(145,187,1)
(198,147,1)
(41,89,1)
(91,246,1)
(204,76,1)
(36,12,1)
(9,233,1)
(172,90,1)
(255,78,1)
(61,145,1)
(13,253,1)
(220,146,1)
(11,204,1)
(136,19,1)
(131,87,1)
(50,185,1)
(117,263,1)
(245,237,1)
(85,225,1)
(230,237,1)
(225,103,1)
(199,118,1)
(59,22,1)
(196,36,1)
(29,52,1)
(200,135,1)
(60,157,1)
(59,5,1)
(64,85,1)
(33,167,1)
(67,3,1)
(193,123,1)
(219,95,1)
(18,195,1)
(79,276,1)
(192,4,1)
(79,22,1)
(188,151,1)
(169,14,1)
(2,214,1)
(109,39,1)
(278,188,1)
(205,258,1)
(229,282,1)
(3,42,1)
(156,113,1)
(158,124,1)
(101,38,1)
(123,171,1)
(53,101,1)
(268,27,1)
(216,112,1)
(263,56,1)
(30,7,2)
(37,67,2)
(196,71,2)
(94,89,2)
(45,37,2)
(57,91,2)
(229,282,2)
(280,232,2)
(54,188,2)
(151,158,2)
(174,89,2)
(50,158,2)
(216,158,2)
(135,158,2)
(149,158,2)
(95,83,2)
(20,7,2)
(269,192,2)
(136,158,2)
(267,91,2)
(53,101,2)
(224,89,2)
(263,158,2)
(203,45,2)
(98,192,2)
(78,158,2)
(23,158,2)
(279,158,2)
(36,71,2)
(129,101,2)
(79,22,2)
(127,192,2)
(49,211,2)
(227,91,2)
(11,188,2)
(143,158,2)
(188,158,2)
(38,83,2)
(169,83,2)
(232,192,2)
(106,230,2)
(113,192,2)
(214,145,2)
(43,89,2)
(270,133,2)
(229,158,2)
(16,231,2)
(2,158,2)
(277,117,2)
(84,231,2)
(226,158,2)
(3,208,2)
(174,26,2)
(58,158,2)
(250,158,2)
(139,231,2)
(128,158,2)
(69,89,2)
(147,158,2)
(259,230,2)
(152,231,2)
(240,158,2)
(182,158,2)
(6,211,2)
(51,158,2)
(9,233,2)
(182,188,2)
(47,91,2)
(28,158,2)
(25,91,2)
(86,192,2)
(103,192,2)
(200,158,2)
(19,158,2)
(157,145,2)
(83,37,2)
(246,158,2)
(67,168,2)
(133,7,2)
(220,158,2)
(228,7,2)
(230,237,2)
(198,147,2)
(205,188,2)
(239,158,2)
(215,158,2)
(140,192,2)
(26,89,2)
(192,91,2)
(258,158,2)
(67,3,2)
(231,158,2)
(236,158,2)
(13,91,2)
(90,89,2)
(151,176,2)
(277,156,2)
(167,91,2)
(79,188,2)
(8,231,2)
(177,101,2)
(169,230,2)
(151,128,2)
(14,101,2)
(281,67,2)
(235,161,2)
(278,158,2)
(173,89,2)
(255,211,2)
(206,231,2)
(104,89,2)
(15,231,2)
(125,169,2)
(12,71,2)
(206,152,2)
(75,18,2)
(61,145,2)
(124,169,2)
(13,176,2)
(208,49,2)
(26,9,2)
(71,63,2)
(92,158,2)
(151,178,2)
(241,158,2)
(181,83,2)
(116,89,2)
(21,158,2)
(82,101,2)
(155,142,2)
(278,188,2)
(9,89,2)
(117,158,2)
(79,233,2)
(114,158,2)
(52,158,2)
(216,112,2)
(221,158,2)
(17,158,2)
(27,192,2)
(245,192,2)
(115,232,2)
(257,158,2)
(42,168,2)
(254,192,2)
(252,158,2)
(108,91,2)
(13,178,2)
(152,24,2)
(50,182,2)
(91,208,2)
(117,188,2)
(35,158,2)
(204,158,2)
(249,158,2)
(145,255,2)
(124,125,2)
(142,193,2)
(45,169,2)
(275,158,2)
(176,59,2)
(125,111,2)
(111,1,2)
(237,192,2)
(188,151,2)
(242,91,2)
(1,45,2)
(270,147,2)
(231,211,2)
(29,158,2)
(101,181,2)
(223,158,2)
(176,89,2)
(255,158,2)
(271,91,2)
(14,83,2)
(76,158,2)
(60,145,2)
(190,169,2)
(5,89,2)
(260,242,2)
(54,231,2)
(161,208,2)
(210,143,2)
(158,124,2)
(81,71,2)
(125,45,2)
(29,188,2)
(110,158,2)
(244,145,2)
(75,82,2)
(121,91,2)
(217,192,2)
(131,91,2)
(88,233,2)
(232,140,2)
(266,192,2)
(107,158,2)
(70,158,2)
(7,211,2)
(276,145,2)
(133,20,2)
(97,232,2)
(88,89,2)
(99,235,2)
(34,91,2)
(110,188,2)
(89,6,2)
(111,45,2)
(169,14,2)
(227,13,2)
(73,158,2)
(253,91,2)
(172,89,2)
(146,158,2)
(192,227,2)
(91,37,2)
(268,192,2)
(230,192,2)
(148,158,2)
(144,231,2)
(112,158,2)
(175,231,2)
(230,268,2)
(56,2,2)
(156,192,2)
(183,158,2)
(28,211,2)
(132,231,2)
(100,89,2)
(138,192,2)
(195,101,2)
(7,71,2)
(205,158,2)
(41,89,2)
(184,7,2)
(235,142,2)
(45,208,2)
(186,188,2)
(64,192,2)
(138,85,2)
(122,28,2)
(158,230,2)
(4,91,2)
(10,145,2)
(14,75,2)
(105,89,2)
(91,158,2)
(130,158,2)
(178,174,2)
(83,208,2)
(207,158,2)
(212,211,2)
(161,142,2)
(19,188,2)
(59,22,2)
(24,231,2)
(43,69,2)
(26,22,2)
(18,101,2)
(209,89,2)
(229,216,2)
(85,192,2)
(225,192,2)
(273,91,2)
(185,158,2)
(197,28,2)
(277,121,2)
(79,145,2)
(219,83,2)
(112,188,2)
(202,145,2)
(75,101,2)
(210,158,2)
(55,192,2)
(87,47,2)
(3,168,2)
(198,28,2)
(63,158,2)
(33,91,2)
(260,91,2)
(124,230,2)
(194,192,2)
(164,158,2)
(71,158,2)
(63,188,2)
(248,158,2)
(214,22,2)
(269,86,2)
(96,45,2)
(101,83,2)
(153,231,2)
(28,251,2)
(83,230,2)
(272,158,2)
(163,158,2)
(243,158,2)
(60,188,2)
(93,192,2)
(11,158,2)
(25,273,2)
(46,142,2)
(179,89,2)
(69,233,2)
(201,158,2)
(198,133,2)
(74,231,2)
(128,212,2)
(234,45,2)
(119,231,2)
(40,67,2)
(280,115,2)
(170,168,2)
(77,169,2)
(186,231,2)
(247,232,2)
(178,89,2)
(158,192,2)
(59,89,2)
(270,158,2)
(187,158,2)
(261,232,2)
(66,158,2)
(251,158,2)
(212,158,2)
(238,192,2)
(87,91,2)
(145,158,2)
-----------------------------------
(0,flags)
(1,cnt.v_free_count)
(2,vm_paging_needed()
(3,page_req != VM_ALLOC_INTERRUPT)
(4,NULL)
(5,PQ_L2_MASK)
(6,req & VM_ALLOC_NOOBJ)
(7,req & VM_ALLOC_ZERO)
(8,1)
(9,object->pg_color)
(10,m)
(11,m->valid)
(12,vm_page_zero_count)
(13,vm_page_select_cache(color)
(14,cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(15,m)
(16,m->wire_count = 0)
(17,VM_ALLOC_ZERO)
(18,cnt.v_interrupt_free_min)
(19,vm_pageq_remove_nowakeup(m)
(20,PG_ZERO | PG_BUSY)
(21,flags)
(22,vm_pindex_t pindex)
(23,dirty)
(24,cnt.v_wire_count)
(25,mtx_unlock_spin(&vm_page_queue_free_mtx)
(26,pindex + object->pg_color)
(27,v_free_reserved)
(28,req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
(29,m->act_count)
(30,PG_BUSY)
(31,if (cnt.v_free_count > cnt.v_free_reserved ||\n\\n\\t    (page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(32,)
(33,NULL)
(34,1)
(35,req)
(36,vm_page_zero_count--)
(37,page_req = VM_ALLOC_SYSTEM)
(38,0)
(39,m)
(40,page_req)
(41,color)
(42,VM_ALLOC_INTERRUPT)
(43,KASSERT(object != NULL,\n\\n\\t\\t    ("vm_page_alloc: NULL object.")
(44,)
(45,page_req == VM_ALLOC_INTERRUPT)
(46,page_req)
(47,&vm_page_queue_free_mtx)
(48,0)
(49,req & VM_ALLOC_CLASS_MASK)
(50,KASSERT(\n\\n\\t    m != NULL,\n\\n\\t    ("vm_page_alloc()
(51,req)
(52,act_count)
(53,cnt)
(54,m->wire_count)
(55,v_free_count)
(56,pagedaemon_wakeup()
(57,vm_page_queue_free_mtx)
(58,0)
(59,pindex & PQ_L2_MASK)
(60,m->pindex)
(61,m)
(62,if ((m = vm_page_select_cache(color)
(63,m->flags)
(64,1)
(65,if (cnt.v_cache_count > 0)
(66,req)
(67,(curproc == pageproc)
(68,)
(69,object != NULL)
(70,"vm_page_alloc: free/cache page %p was dirty")
(71,m->flags & PG_ZERO)
(72,)
(73,VM_ALLOC_NOOBJ)
(74,m->wire_count = 1)
(75,cnt.v_free_count > cnt.v_interrupt_free_min)
(76,m)
(77,page_req)
(78,VM_ALLOC_NOOBJ)
(79,vm_page_insert(m, object, pindex)
(80,if (m->flags & PG_ZERO)
(81,VM_ALLOC_ZERO)
(82,cnt.v_free_count)
(83,page_req == VM_ALLOC_SYSTEM)
(84,wire_count)
(85,&vm_pageout_deficit)
(86,&vm_page_queue_free_mtx)
(87,mtx_unlock_spin(&vm_page_queue_free_mtx)
(88,VM_OBJECT_LOCK_ASSERT(object, MA_OWNED)
(89,(req & VM_ALLOC_NOOBJ)
(90,object)
(91,page_req != VM_ALLOC_INTERRUPT)
(92,flags)
(93,cnt)
(94,pindex)
(95,cnt)
(96,0)
(97,v_cache_count)
(98,pagedaemon_wakeup()
(99,KASSERT(curthread->td_intr_nesting_level == 0 ||\n\\n\\t    page_req == VM_ALLOC_INTERRUPT,\n\\n\\t    ("vm_page_alloc(NORMAL|SYSTEM)
(100,pindex)
(101,cnt.v_cache_count == 0)
(102,if ((req & VM_ALLOC_NOOBJ)
(103,vm_page_unlock_queues()
(104,MA_OWNED)
(105,"vm_page_alloc: NULL object.")
(106,VM_ALLOC_SYSTEM)
(107,m)
(108,vm_page_queue_free_mtx)
(109,NULL)
(110,m->hold_count)
(111,cnt.v_free_count > 0)
(112,m->dirty)
(113,NULL)
(114,PG_ZERO)
(115,cnt.v_cache_count)
(116,object)
(117,return (m)
(118,req)
(119,m)
(120,if (req & VM_ALLOC_WIRED)
(121,return (NULL)
(122,flags)
(123,td_intr_nesting_level)
(124,(page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(125,page_req == VM_ALLOC_INTERRUPT && cnt.v_free_count > 0)
(126,page_req)
(127,vm_page_queue_free_mtx)
(128,(req & VM_ALLOC_ZERO)
(129,v_free_count)
(130,page_req)
(131,vm_pageout_deficit)
(132,cnt)
(133,flags = PG_ZERO | PG_BUSY)
(134,)
(135,m->valid = 0)
(136,flags)
(137,0)
(138,atomic_add_int(&vm_pageout_deficit, 1)
(139,1)
(140,cnt.v_cache_count)
(141,if (req & (VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
(142,curthread->td_intr_nesting_level == 0)
(143,&vm_page_queue_free_mtx)
(144,v_wire_count)
(145,(req & VM_ALLOC_NOOBJ)
(146,0)
(147,flags = PG_BUSY)
(148,0)
(149,hold_count)
(150,if ((curproc == pageproc)
(151,vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO)
(152,&cnt.v_wire_count)
(153,wire_count)
(154,m = NULL)
(155,VM_ALLOC_INTERRUPT)
(156,return (NULL)
(157,pindex)
(158,cnt.v_free_count > cnt.v_free_reserved ||\n\\n\\t    (page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(159,req)
(160,if ((req & VM_ALLOC_NOOBJ)
(161,page_req == VM_ALLOC_INTERRUPT)
(162,color)
(163,0)
(164,m)
(165,pageproc)
(166,curproc)
(167,pagedaemon_wakeup()
(168,curproc == pageproc)
(169,page_req == VM_ALLOC_SYSTEM && \n\\n\\t     cnt.v_cache_count == 0 && \n\\n\\t     cnt.v_free_count > cnt.v_interrupt_free_min)
(170,page_req)
(171,curthread)
(172,pg_color)
(173,color)
(174,(pindex + object->pg_color)
(175,0)
(176,color = pindex & PQ_L2_MASK)
(177,cnt)
(178,color = (pindex + object->pg_color)
(179,NULL)
(180,"vm_page_alloc(NORMAL|SYSTEM)
(181,cnt.v_cache_count)
(182,m != NULL)
(183,m)
(184,flags)
(185,"vm_page_alloc()
(186,m->wire_count)
(187,0)
(188,m = vm_pageq_find(PQ_FREE, color, (req & VM_ALLOC_ZERO)
(189,)
(190,VM_ALLOC_INTERRUPT)
(191,VM_ALLOC_NOOBJ)
(192,(m = vm_page_select_cache(color)
(193,curthread->td_intr_nesting_level)
(194,v_cache_count)
(195,v_interrupt_free_min)
(196,req)
(197,~PG_BUSY)
(198,flags &= ~PG_BUSY)
(199,VM_ALLOC_CLASS_MASK)
(200,m)
(201,VM_ALLOC_WIRED)
(202,pindex)
(203,v_free_count)
(204,valid)
(205,m->flags)
(206,atomic_add_int(&cnt.v_wire_count, 1)
(207,NULL)
(208,page_req = req & VM_ALLOC_CLASS_MASK)
(209,object)
(210,mtx_unlock_spin(&vm_page_queue_free_mtx)
(211,int req)
(212,req & VM_ALLOC_ZERO)
(213,loop:)
(214,m->pindex = pindex)
(215,0)
(216,m->dirty == 0)
(217,0)
(218,page_req)
(219,v_cache_count)
(220,m->hold_count = 0)
(221,req)
(222,if (vm_paging_needed()
(223,m)
(224,PQ_L2_MASK)
(225,vm_pageout_deficit)
(226,0)
(227,m = vm_page_select_cache(color)
(228,PG_ZERO)
(229,KASSERT(m->dirty == 0, ("vm_page_alloc: free/cache page %p was dirty", m)
(230,cnt.v_free_count > cnt.v_free_reserved)
(231,req & VM_ALLOC_WIRED)
(232,cnt.v_cache_count > 0)
(233,vm_object_t object)
(234,cnt)
(235,curthread->td_intr_nesting_level == 0 ||\n\\n\\t    page_req == VM_ALLOC_INTERRUPT)
(236,m)
(237,cnt.v_free_count)
(238,vm_page_unlock_queues()
(239,busy)
(240,VM_ALLOC_NOBUSY)
(241,m)
(242,&vm_pageout_deficit)
(243,PG_BUSY)
(244,object)
(245,cnt)
(246,VM_ALLOC_INTERRUPT)
(247,cnt)
(248,m)
(249,color)
(250,vm_page_queue_free_mtx)
(251,VM_ALLOC_NOBUSY | VM_ALLOC_NOOBJ)
(252,m->act_count = 0)
(253,color)
(254,goto loop;)
(255,req & VM_ALLOC_NOOBJ)
(256,)
(257,m)
(258,flags)
(259,page_req)
(260,atomic_add_int(&vm_pageout_deficit, 1)
(261,"vm_page_alloc(NORMAL)
(262,if (req & VM_ALLOC_ZERO)
(263,m)
(264,m)
(265,)
(266,cnt)
(267,m)
(268,cnt.v_free_reserved)
(269,mtx_lock_spin(&vm_page_queue_free_mtx)
(270,m->flags = flags)
(271,vm_page_lock_queues()
(272,m->busy = 0)
(273,&vm_page_queue_free_mtx)
(274,)
(275,m)
(276,pindex)
(277,RET)
(278,m->busy)
(279,PQ_FREE)
(280,printf("vm_page_alloc(NORMAL)
(281,VM_ALLOC_SYSTEM)
(282,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^