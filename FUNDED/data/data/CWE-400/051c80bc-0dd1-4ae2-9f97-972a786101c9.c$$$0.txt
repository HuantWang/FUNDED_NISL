-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(5==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
18,20
21,22
22,23
23,24
23,25
24,25
27,28
28,29
29,30
29,31
30,31
33,34
33,35
34,35
34,36
37,38
38,39
38,40
39,40
40,41
40,42
41,42
43,44
43,45
45,46
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
53,54
53,55
54,55
56,57
56,58
57,58
57,59
58,59
61,62
63,64
64,65
66,67
67,68
68,69
68,70
69,70
-----nextToken-----
2,4,8,10,14,16,19,20,25,26,31,32,35,36,42,44,46,51,52,55,59,60,62,65,70,71
-----computeFrom-----
12,13
12,14
18,19
18,20
29,30
29,31
34,35
34,36
49,50
49,51
53,54
53,55
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(5==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
5==5
5
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(9,20,0)
(17,40,0)
(12,4,0)
(2,20,0)
(16,15,0)
(37,9,0)
(1,0,0)
(36,39,0)
(27,20,0)
(9,1,0)
(21,18,0)
(1,39,0)
(40,10,0)
(24,40,0)
(25,4,0)
(38,13,0)
(28,40,0)
(8,20,0)
(34,4,0)
(33,22,0)
(15,14,0)
(1,19,0)
(41,27,0)
(26,36,0)
(39,4,0)
(39,36,0)
(19,1,0)
(1,9,0)
(18,35,0)
(29,0,0)
(0,32,0)
(7,1,0)
(11,13,0)
(6,24,0)
(30,0,0)
(31,39,0)
(3,24,0)
(5,22,0)
(11,39,1)
(9,1,1)
(6,22,1)
(15,16,1)
(13,38,1)
(1,0,1)
(37,20,1)
(1,7,1)
(33,0,1)
(5,33,1)
(24,3,1)
(8,24,1)
(39,36,1)
(1,39,1)
(18,21,1)
(1,19,1)
(2,8,1)
(9,20,1)
(27,41,1)
(21,9,1)
(20,2,1)
(30,29,1)
(23,22,1)
(41,18,1)
(27,20,1)
(3,6,1)
(33,15,1)
(16,13,1)
(29,13,1)
(26,31,1)
(38,11,1)
(37,27,1)
(0,30,1)
(7,37,1)
(23,9,1)
(36,26,1)
(22,5,1)
(29,13,2)
(21,9,2)
(30,13,2)
(9,1,2)
(7,9,2)
(39,36,2)
(1,0,2)
(41,9,2)
(1,39,2)
(1,9,2)
(3,22,2)
(2,22,2)
(16,13,2)
(27,9,2)
(24,22,2)
(37,9,2)
(15,13,2)
(6,22,2)
(1,22,2)
(0,13,2)
(37,22,2)
(8,22,2)
(9,20,2)
(1,19,2)
(20,22,2)
(9,22,2)
(18,9,2)
(9,9,2)
(7,22,2)
(27,20,2)
-----------------------------------
(0,count = 20)
(1,(size_t)
(2,0)
(3,0)
(4,)
(5,5)
(6,i)
(7,count)
(8,i)
(9,i < (size_t)
(10,)
(11,5)
(12,if(5!=5)
(13,5!=5)
(14,)
(15,printLine("Benign, fixed string")
(16,"Benign, fixed string")
(17,for (i = 0; i < (size_t)
(18,printLine("Hello")
(19,size_t)
(20,i = 0)
(21,"Hello")
(22,5==5)
(23,RET)
(24,i = 0)
(25,if(5==5)
(26,1)
(27,i++)
(28,i)
(29,count)
(30,20)
(31,count)
(32,)
(33,5)
(34,count)
(35,)
(36,-1)
(37,i)
(38,5)
(39,count = -1)
(40,)
(41,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^