-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(1)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
30,33
31,32
33,34
35,36
35,37
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
55,58
56,57
58,59
61,62
62,63
62,64
63,64
65,66
67,68
67,69
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,36,39,40,44,46,51,53,57,59,60,64,66,68,73,75
-----computeFrom-----
13,14
13,15
22,23
22,24
35,36
35,37
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(1)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t));
data = (wchar_t *)realloc(data, 100*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, 100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, 100*sizeof(wchar_t))
realloc
realloc
data
data
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(1)    {        /* FIX: Deallocate memory */        free(data);    }
1
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(28,30,0)
(5,13,0)
(30,32,0)
(0,13,0)
(20,2,0)
(25,20,0)
(17,23,0)
(32,14,0)
(10,20,0)
(30,20,0)
(18,2,0)
(1,13,0)
(15,33,0)
(22,0,0)
(33,20,0)
(30,23,0)
(23,17,0)
(32,13,0)
(5,26,0)
(13,26,0)
(4,26,0)
(27,0,0)
(11,5,0)
(9,2,0)
(19,24,0)
(16,23,0)
(13,32,0)
(24,19,0)
(33,13,0)
(14,32,0)
(3,24,0)
(8,2,0)
(19,21,0)
(7,17,0)
(23,30,0)
(33,6,0)
(32,30,0)
(33,13,1)
(29,31,1)
(33,15,1)
(5,13,1)
(27,22,1)
(30,20,1)
(16,28,1)
(32,14,1)
(31,12,1)
(15,31,1)
(20,25,1)
(24,3,1)
(13,32,1)
(1,12,1)
(31,5,1)
(23,17,1)
(12,20,1)
(0,13,1)
(22,13,1)
(29,33,1)
(32,30,1)
(5,11,1)
(0,27,1)
(11,0,1)
(17,7,1)
(33,20,1)
(3,0,1)
(7,16,1)
(28,1,1)
(19,24,1)
(25,10,1)
(11,19,1)
(30,23,1)
(0,13,2)
(5,12,2)
(13,12,2)
(5,13,2)
(1,12,2)
(32,12,2)
(16,12,2)
(23,17,2)
(11,12,2)
(28,12,2)
(15,31,2)
(33,13,2)
(32,30,2)
(30,23,2)
(24,0,2)
(0,12,2)
(13,32,2)
(17,12,2)
(19,24,2)
(30,20,2)
(30,12,2)
(33,31,2)
(33,20,2)
(22,12,2)
(7,12,2)
(19,0,2)
(27,12,2)
(32,14,2)
(23,12,2)
(3,0,2)
-----------------------------------
(0,data == NULL)
(1,data)
(2,)
(3,1)
(4,if (data == NULL)
(5,printWLine(data)
(6,)
(7,wchar_t)
(8,if(1)
(9,if(1)
(10,data)
(11,data)
(12,1)
(13,data = (wchar_t *)
(14,wchar_t *)
(15,data)
(16,100)
(17,sizeof(wchar_t)
(18,data)
(19,exit(-1)
(20,data = NULL)
(21,)
(22,data)
(23,100*sizeof(wchar_t)
(24,-1)
(25,NULL)
(26,)
(27,NULL)
(28,data)
(29,RET)
(30,realloc(data, 100*sizeof(wchar_t)
(31,1)
(32,(wchar_t *)
(33,free(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^