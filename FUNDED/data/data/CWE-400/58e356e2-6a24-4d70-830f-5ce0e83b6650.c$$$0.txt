-----label-----
1
-----code-----
pid_t fork()
{
	pid_t pid;
	typeof(fork) *original_fork = dlsym(RTLD_NEXT, "fork");

	debug(D_DEBUG, "fork from %d.\n", getpid());
	pid = original_fork();

	if(!pid)
	{
		struct rmonitor_msg msg;

		msg.type   = BRANCH;
		msg.origin = getpid();
		msg.data.p = getppid();

		send_monitor_msg(&msg);
	}

	return pid;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
6,7
6,8
6,9
6,10
6,11
6,12
7,8
8,9
8,10
9,10
11,12
13,14
14,15
14,16
15,16
16,17
17,18
19,20
19,21
19,22
22,23
23,24
23,25
23,26
24,25
26,27
29,30
30,31
30,32
30,33
30,34
31,32
33,34
36,37
37,38
39,40
40,41
40,42
41,42
43,44
44,45
46,47
46,48
47,48
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
66,68
67,68
67,69
68,69
71,72
72,73
74,75
75,76
75,77
76,77
76,78
77,78
77,79
78,79
82,83
83,84
85,86
86,87
86,88
87,88
89,90
90,91
92,93
93,94
-----nextToken-----
3,5,10,12,18,20,21,25,27,28,32,34,35,38,42,45,49,54,56,61,62,64,69,70,73,79,80,81,84,88,91,94
-----computeFrom-----
40,41
40,42
58,59
58,60
66,67
66,68
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;UnaryExpression;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
pid_t fork(){	pid_t pid;	typeof(fork) *original_fork = dlsym(RTLD_NEXT, "fork");	debug(D_DEBUG, "fork from %d.\n", getpid());	pid = original_fork();	if(!pid)	{		struct rmonitor_msg msg;		msg.type   = BRANCH;		msg.origin = getpid();		msg.data.p = getppid();		send_monitor_msg(&msg);	}	return pid;}
pid_t
pid_t
fork()
fork
{	pid_t pid;	typeof(fork) *original_fork = dlsym(RTLD_NEXT, "fork");	debug(D_DEBUG, "fork from %d.\n", getpid());	pid = original_fork();	if(!pid)	{		struct rmonitor_msg msg;		msg.type   = BRANCH;		msg.origin = getpid();		msg.data.p = getppid();		send_monitor_msg(&msg);	}	return pid;}
pid_t pid;
pid_t pid;
pid_t
pid_t
pid
pid
typeof(fork) *original_fork = dlsym(RTLD_NEXT, "fork");
typeof(fork) *original_fork = dlsym(RTLD_NEXT, "fork");
typeof(fork)
(fork)
fork
fork
*original_fork = dlsym(RTLD_NEXT, "fork")
*
original_fork
= dlsym(RTLD_NEXT, "fork")
dlsym(RTLD_NEXT, "fork")
dlsym
dlsym
RTLD_NEXT
RTLD_NEXT
"fork"
debug(D_DEBUG, "fork from %d.\n", getpid());
debug(D_DEBUG, "fork from %d.\n", getpid())
debug
debug
D_DEBUG
D_DEBUG
"fork from %d.\n"
getpid()
getpid
getpid
pid = original_fork();
pid = original_fork()
pid
pid
original_fork()
original_fork
original_fork
if(!pid)	{		struct rmonitor_msg msg;		msg.type   = BRANCH;		msg.origin = getpid();		msg.data.p = getppid();		send_monitor_msg(&msg);	}
!pid
pid
pid
{		struct rmonitor_msg msg;		msg.type   = BRANCH;		msg.origin = getpid();		msg.data.p = getppid();		send_monitor_msg(&msg);	}
struct rmonitor_msg msg;
struct rmonitor_msg msg;
struct rmonitor_msg
rmonitor_msg
msg
msg
msg.type   = BRANCH;
msg.type   = BRANCH
msg.type
msg
msg
type
BRANCH
BRANCH
msg.origin = getpid();
msg.origin = getpid()
msg.origin
msg
msg
origin
getpid()
getpid
getpid
msg.data.p = getppid();
msg.data.p = getppid()
msg.data.p
msg.data
msg
msg
data
p
getppid()
getppid
getppid
send_monitor_msg(&msg);
send_monitor_msg(&msg)
send_monitor_msg
send_monitor_msg
&msg
msg
msg
return pid;
pid
pid
-----joern-----
(12,37,0)
(19,37,0)
(27,23,0)
(34,44,0)
(44,18,0)
(0,39,0)
(41,10,0)
(8,4,0)
(15,44,0)
(1,33,0)
(4,8,0)
(17,23,0)
(14,25,0)
(7,40,0)
(6,18,0)
(25,23,0)
(33,1,0)
(2,29,0)
(29,44,0)
(16,35,0)
(37,18,0)
(20,3,0)
(36,21,0)
(40,25,0)
(3,20,0)
(22,10,0)
(21,17,0)
(17,42,0)
(38,39,0)
(42,17,0)
(30,18,0)
(11,33,0)
(32,10,0)
(33,41,0)
(31,26,0)
(28,1,0)
(20,23,0)
(39,21,0)
(29,18,0)
(44,15,0)
(10,41,0)
(9,26,0)
(5,40,0)
(37,19,0)
(24,8,0)
(4,23,0)
(21,39,0)
(13,29,0)
(43,37,0)
(26,20,0)
(35,44,0)
(41,18,0)
(15,34,1)
(32,22,1)
(4,8,1)
(1,28,1)
(3,26,1)
(34,37,1)
(11,1,1)
(33,1,1)
(25,14,1)
(22,33,1)
(37,19,1)
(13,29,1)
(38,20,1)
(2,4,1)
(14,40,1)
(8,24,1)
(0,38,1)
(17,42,1)
(41,10,1)
(5,35,1)
(35,16,1)
(29,2,1)
(21,39,1)
(33,11,1)
(42,21,1)
(7,5,1)
(35,44,1)
(19,12,1)
(16,44,1)
(21,36,1)
(26,31,1)
(10,32,1)
(36,39,1)
(24,17,1)
(44,15,1)
(9,25,1)
(40,7,1)
(39,0,1)
(29,44,1)
(31,9,1)
(12,43,1)
(43,41,1)
(20,3,1)
(2,35,1)
(41,10,2)
(17,35,2)
(42,35,2)
(17,42,2)
(33,1,2)
(44,15,2)
(25,35,2)
(39,35,2)
(7,35,2)
(5,35,2)
(29,44,2)
(38,35,2)
(21,39,2)
(8,35,2)
(20,3,2)
(31,35,2)
(13,29,2)
(0,35,2)
(20,35,2)
(21,35,2)
(24,35,2)
(4,35,2)
(26,35,2)
(37,19,2)
(9,35,2)
(36,35,2)
(40,35,2)
(4,8,2)
(35,44,2)
(14,35,2)
(3,35,2)
-----------------------------------
(0,data)
(1,typeof(fork)
(2,pid)
(3,getpid()
(4,send_monitor_msg(&msg)
(5,msg)
(6,if(!pid)
(7,type)
(8,&msg)
(9,msg)
(10,dlsym(RTLD_NEXT, "fork")
(11,original_fork)
(12,"fork from %d.\\n")
(13,RET)
(14,BRANCH)
(15,original_fork()
(16,pid)
(17,msg.data.p = getppid()
(18,)
(19,getpid()
(20,msg.origin = getpid()
(21,msg.data.p)
(22,RTLD_NEXT)
(23,)
(24,msg)
(25,msg.type   = BRANCH)
(26,msg.origin)
(27,msg)
(28,fork)
(29,return pid;)
(30,pid)
(31,origin)
(32,"fork")
(33,typeof(fork)
(34,pid)
(35,!pid)
(36,p)
(37,debug(D_DEBUG, "fork from %d.\\n", getpid()
(38,msg)
(39,msg.data)
(40,msg.type)
(41,typeof(fork)
(42,getppid()
(43,D_DEBUG)
(44,pid = original_fork()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^