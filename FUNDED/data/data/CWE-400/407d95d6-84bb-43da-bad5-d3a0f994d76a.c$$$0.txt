-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_12_bad()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    else
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsTrueOrFalse())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
18,21
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
81,82
82,83
82,84
85,86
86,87
86,88
86,89
87,88
89,90
92,93
93,94
93,95
94,95
96,97
98,99
98,100
98,101
99,100
100,101
102,103
104,105
105,106
106,107
106,108
107,108
109,110
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,70,73,75,78,80,83,84,88,90,91,95,97,101,103,108,110
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
68,69
68,70
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_12_bad(){    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
void
CWE401_Memory_Leak__wchar_t_calloc_12_bad()
CWE401_Memory_Leak__wchar_t_calloc_12_bad
{    wchar_t * data;    data = NULL;    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    else    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsTrueOrFalse())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(29,23,0)
(33,20,0)
(2,21,0)
(29,21,0)
(3,19,0)
(19,22,0)
(11,19,0)
(20,33,0)
(34,16,0)
(0,32,0)
(27,29,0)
(12,22,0)
(40,12,0)
(1,26,0)
(19,11,0)
(34,43,0)
(10,11,0)
(12,40,0)
(6,38,0)
(44,21,0)
(4,33,0)
(12,21,0)
(5,26,0)
(21,37,0)
(24,18,0)
(21,12,0)
(16,34,0)
(8,36,0)
(31,38,0)
(38,34,0)
(44,37,0)
(17,44,0)
(15,32,0)
(39,16,0)
(41,5,0)
(22,19,0)
(29,34,0)
(16,39,0)
(25,18,0)
(30,43,0)
(26,5,0)
(16,26,0)
(28,18,0)
(22,12,0)
(26,16,0)
(32,18,0)
(36,43,0)
(13,34,0)
(20,14,0)
(36,34,0)
(5,41,1)
(7,29,1)
(7,42,1)
(22,19,1)
(16,39,1)
(41,1,1)
(3,2,1)
(8,38,1)
(12,22,1)
(15,0,1)
(4,38,1)
(12,40,1)
(44,17,1)
(29,21,1)
(36,34,1)
(29,27,1)
(42,36,1)
(27,42,1)
(6,31,1)
(1,13,1)
(44,21,1)
(13,9,1)
(32,15,1)
(34,16,1)
(38,6,1)
(8,20,1)
(21,12,1)
(36,8,1)
(2,9,1)
(17,21,1)
(10,3,1)
(29,34,1)
(42,44,1)
(19,11,1)
(31,34,1)
(16,26,1)
(33,4,1)
(26,5,1)
(11,10,1)
(20,33,1)
(9,32,1)
(38,34,1)
(10,9,2)
(5,9,2)
(26,9,2)
(38,34,2)
(13,9,2)
(20,33,2)
(21,12,2)
(27,42,2)
(38,9,2)
(36,34,2)
(44,21,2)
(29,42,2)
(26,5,2)
(36,9,2)
(16,9,2)
(6,9,2)
(19,11,2)
(11,9,2)
(16,26,2)
(41,9,2)
(44,9,2)
(4,38,2)
(17,9,2)
(29,34,2)
(16,39,2)
(20,38,2)
(12,40,2)
(34,16,2)
(22,9,2)
(3,9,2)
(29,21,2)
(34,9,2)
(21,9,2)
(19,9,2)
(33,38,2)
(22,19,2)
(1,9,2)
(8,9,2)
(31,9,2)
(12,9,2)
(2,9,2)
(12,22,2)
-----------------------------------
(0,data)
(1,100)
(2,data)
(3,100)
(4,1)
(5,sizeof(wchar_t)
(6,NULL)
(7,RET)
(8,data)
(9,globalReturnsTrueOrFalse()
(10,wchar_t)
(11,sizeof(wchar_t)
(12,(wchar_t *)
(13,data)
(14,)
(15,NULL)
(16,(wchar_t *)
(17,data)
(18,)
(19,100*sizeof(wchar_t)
(20,exit(-1)
(21,data = (wchar_t *)
(22,ALLOCA(100*sizeof(wchar_t)
(23,)
(24,data)
(25,if(globalReturnsTrueOrFalse()
(26,calloc(100, sizeof(wchar_t)
(27,data)
(28,if(globalReturnsTrueOrFalse()
(29,free(data)
(30,if (data == NULL)
(31,data)
(32,data = NULL)
(33,-1)
(34,data = (wchar_t *)
(35, sizeof(wchar_t)
(36,printWLine(data)
(37,)
(38,data == NULL)
(39,wchar_t *)
(40,wchar_t *)
(41,wchar_t)
(42,globalReturnsTrueOrFalse()
(43,)
(44,printWLine(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^