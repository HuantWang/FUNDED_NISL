-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_malloc_01_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)malloc(100*sizeof(int));
    if (data == NULL) {exit(-1);}
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    /* POTENTIAL FLAW: No deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
28,29
30,31
30,32
32,33
33,34
33,35
36,37
36,38
37,38
37,39
38,39
40,41
42,43
43,44
44,45
44,46
45,46
47,48
49,50
50,51
50,52
51,52
51,53
52,53
56,57
57,58
57,59
58,59
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,31,34,35,39,41,46,48,53,54,55,59,62,63,64
-----computeFrom-----
13,14
13,15
19,20
19,21
30,31
30,32
37,38
37,39
50,51
50,52
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_malloc_01_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__int_malloc_01_bad()
CWE401_Memory_Leak__int_malloc_01_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)malloc(100*sizeof(int));    if (data == NULL) {exit(-1);}    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    /* POTENTIAL FLAW: No deallocation */    ; /* empty statement needed for some flow variants */}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)malloc(100*sizeof(int));
data = (int *)malloc(100*sizeof(int))
data
data
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
;
-----joern-----
(16,0,0)
(17,0,0)
(3,21,0)
(8,4,0)
(26,5,0)
(5,26,0)
(19,0,0)
(25,3,0)
(6,2,0)
(9,0,0)
(3,13,0)
(28,1,0)
(19,6,0)
(14,17,0)
(12,28,0)
(6,19,0)
(27,4,0)
(1,18,0)
(31,6,0)
(26,13,0)
(15,25,0)
(3,25,0)
(13,26,0)
(21,3,0)
(15,2,0)
(7,6,0)
(25,0,0)
(4,25,0)
(13,3,0)
(20,5,0)
(2,0,0)
(1,28,0)
(23,15,0)
(10,26,0)
(30,25,0)
(6,25,0)
(29,17,0)
(22,15,0)
(11,2,0)
(12,4,1)
(29,14,1)
(4,8,1)
(10,30,1)
(13,26,1)
(23,4,1)
(20,10,1)
(25,3,1)
(27,25,1)
(17,29,1)
(24,19,1)
(30,17,1)
(5,20,1)
(11,15,1)
(23,1,1)
(15,25,1)
(2,11,1)
(15,22,1)
(31,2,1)
(3,21,1)
(6,2,1)
(1,28,1)
(8,27,1)
(6,25,1)
(28,12,1)
(19,6,1)
(7,31,1)
(26,5,1)
(6,7,1)
(3,13,1)
(4,25,1)
(22,23,1)
(3,13,2)
(13,26,2)
(1,28,2)
(6,25,2)
(3,21,2)
(25,3,2)
(15,25,2)
(19,6,2)
(26,5,2)
(28,4,2)
(1,4,2)
(12,4,2)
(6,2,2)
(4,25,2)
-----------------------------------
(0,)
(1,exit(-1)
(2,data[0] = 5)
(3,(int *)
(4,data == NULL)
(5,sizeof(int)
(6,data[0])
(7,0)
(8,NULL)
(9,if (data == NULL)
(10,100)
(11,5)
(12,1)
(13,malloc(100*sizeof(int)
(14,data)
(15,data[0])
(16,data)
(17,data = NULL)
(18,)
(19,printIntLine(data[0])
(20,int)
(21,int *)
(22,0)
(23,data)
(24,RET)
(25,data = (int *)
(26,100*sizeof(int)
(27,data)
(28,-1)
(29,NULL)
(30,data)
(31,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^