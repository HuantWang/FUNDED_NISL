-----label-----
0
-----code-----
static void goodB2G1()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
80,81
80,82
81,82
84,85
84,86
84,87
86,87
87,88
88,89
88,90
89,90
92,93
93,94
94,95
94,96
95,96
97,98
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,83,85,90,91,96,98
-----computeFrom-----
14,15
14,16
23,24
23,25
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(28,52,0)
(42,37,0)
(16,17,0)
(8,1,0)
(3,50,0)
(10,19,0)
(12,53,0)
(2,48,0)
(36,3,0)
(39,6,0)
(23,49,0)
(47,22,0)
(24,15,0)
(9,18,0)
(45,40,0)
(51,40,0)
(37,18,0)
(30,11,0)
(14,52,0)
(21,18,0)
(32,30,0)
(19,10,0)
(50,3,0)
(43,6,0)
(18,6,0)
(13,37,0)
(7,15,0)
(10,0,0)
(4,26,0)
(38,35,0)
(31,44,0)
(49,44,0)
(30,18,0)
(21,22,0)
(17,37,0)
(30,53,0)
(3,18,0)
(48,1,0)
(53,15,0)
(40,48,0)
(52,18,0)
(18,21,0)
(44,49,0)
(5,53,0)
(50,43,0)
(49,22,0)
(48,40,0)
(34,15,0)
(41,21,0)
(37,17,0)
(26,25,0)
(22,49,0)
(17,35,0)
(1,6,0)
(21,41,0)
(22,53,0)
(27,19,0)
(40,18,0)
(22,21,0)
(43,50,0)
(20,3,0)
(35,6,0)
(17,37,1)
(29,26,1)
(20,36,1)
(13,1,1)
(3,18,1)
(51,45,1)
(23,47,1)
(36,35,1)
(18,21,1)
(52,28,1)
(40,18,1)
(30,18,1)
(16,37,1)
(35,38,1)
(19,27,1)
(30,53,1)
(44,31,1)
(2,40,1)
(10,19,1)
(37,42,1)
(49,44,1)
(43,50,1)
(38,17,1)
(46,33,1)
(30,32,1)
(45,10,1)
(21,22,1)
(32,46,1)
(17,16,1)
(48,2,1)
(27,52,1)
(37,18,1)
(9,33,1)
(52,18,1)
(31,23,1)
(14,18,1)
(53,12,1)
(28,14,1)
(47,9,1)
(40,51,1)
(3,20,1)
(33,53,1)
(26,4,1)
(8,48,1)
(1,8,1)
(45,52,1)
(29,30,1)
(48,40,1)
(4,46,1)
(42,13,1)
(22,53,1)
(22,49,1)
(46,43,1)
(12,5,1)
(50,3,1)
(21,41,1)
(37,33,2)
(19,52,2)
(48,33,2)
(32,46,2)
(36,33,2)
(14,33,2)
(20,33,2)
(49,44,2)
(27,52,2)
(50,33,2)
(17,37,2)
(51,33,2)
(48,40,2)
(10,52,2)
(21,22,2)
(43,50,2)
(22,33,2)
(44,33,2)
(52,33,2)
(8,33,2)
(37,18,2)
(9,33,2)
(18,33,2)
(3,33,2)
(17,33,2)
(50,3,2)
(21,41,2)
(16,33,2)
(40,33,2)
(2,33,2)
(23,33,2)
(28,33,2)
(22,49,2)
(22,53,2)
(13,33,2)
(43,33,2)
(21,33,2)
(35,33,2)
(10,19,2)
(26,46,2)
(30,53,2)
(40,18,2)
(49,33,2)
(18,21,2)
(4,46,2)
(1,33,2)
(30,46,2)
(47,33,2)
(42,33,2)
(3,18,2)
(52,18,2)
(45,33,2)
(31,33,2)
(38,33,2)
(30,18,2)
-----------------------------------
(0,)
(1,data[0].intOne = 0)
(2,intOne)
(3,data[0])
(4,"Benign, fixed string")
(5,data)
(6,)
(7,if(1)
(8,0)
(9,data)
(10,exit(-1)
(11,)
(12,NULL)
(13,data)
(14,data)
(15,)
(16,intTwo)
(17,data[0].intTwo)
(18,data = (twoIntsStruct *)
(19,-1)
(20,0)
(21,(twoIntsStruct *)
(22,realloc(data, 100*sizeof(twoIntsStruct)
(23,100)
(24,if(0)
(25,)
(26,printLine("Benign, fixed string")
(27,1)
(28,NULL)
(29,RET)
(30,free(data)
(31,twoIntsStruct)
(32,data)
(33,1)
(34,data)
(35,data[0].intTwo = 0)
(36,data)
(37,data[0])
(38,0)
(39,if (data == NULL)
(40,data[0])
(41,twoIntsStruct *)
(42,0)
(43,printStructLine(&data[0])
(44,sizeof(twoIntsStruct)
(45,data)
(46,0)
(47,data)
(48,data[0].intOne)
(49,100*sizeof(twoIntsStruct)
(50,&data[0])
(51,0)
(52,data == NULL)
(53,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^