-----label-----
0
-----code-----
static int prepend_component(const char **p, bool usec, CalendarComponent **c) {
        int r, start, stop = -1, repeat = 0;
        CalendarComponent *cc;
        const char *e;

        assert(p);
        assert(c);

        e = *p;

        r = parse_component_decimal(&e, usec, &start);
        if (r < 0)
                return r;

        if (e[0] == '.' && e[1] == '.') {
                e += 2;
                r = parse_component_decimal(&e, usec, &stop);
                if (r < 0)
                        return r;

                repeat = usec ? USEC_PER_SEC : 1;
        }

        if (*e == '/') {
                e++;
                r = parse_component_decimal(&e, usec, &repeat);
                if (r < 0)
                        return r;

                if (repeat == 0)
                        return -ERANGE;
        }

        if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))
                return -EINVAL;

        cc = new0(CalendarComponent, 1);
        if (!cc)
                return -ENOMEM;

        cc->start = start;
        cc->stop = stop;
        cc->repeat = repeat;
        cc->next = *c;

        *p = e;
        *c = cc;

        if (*e ==',') {
                *p += 1;
                return prepend_component(p, usec, c);
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
7,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
18,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
23,24
24,25
24,26
24,27
24,28
24,29
26,27
28,29
30,31
30,32
32,33
33,34
35,36
35,37
37,38
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
49,50
49,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
79,80
81,82
83,84
84,85
86,87
86,88
87,88
87,89
88,89
91,92
92,93
94,95
94,96
95,96
95,97
96,97
96,98
97,98
97,99
98,99
102,103
102,104
103,104
103,105
104,105
108,109
108,110
108,111
108,112
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
118,119
118,120
118,121
118,122
119,120
121,122
122,123
124,125
126,127
127,128
129,130
129,131
130,131
130,132
131,132
134,135
135,136
137,138
138,139
138,140
139,140
141,142
141,143
141,144
142,143
144,145
147,148
147,149
148,149
148,150
149,150
150,151
153,154
153,155
153,156
153,157
154,155
155,156
156,157
158,159
159,160
159,161
160,161
162,163
162,164
162,165
162,166
163,164
165,166
166,167
168,169
170,171
171,172
173,174
173,175
174,175
174,176
175,176
178,179
179,180
181,182
181,183
182,183
182,184
183,184
186,187
187,188
188,189
190,191
190,192
191,192
192,193
192,194
192,195
192,196
192,197
192,198
192,199
192,200
193,194
195,196
196,197
204,205
205,206
206,207
208,209
209,210
209,211
210,211
212,213
212,214
212,215
213,214
215,216
218,219
218,220
219,220
220,221
222,223
223,224
224,225
226,227
227,228
227,229
228,229
228,230
229,230
232,233
234,235
235,236
235,237
236,237
236,238
237,238
240,241
242,243
243,244
243,245
244,245
244,246
245,246
248,249
250,251
251,252
251,253
252,253
252,254
253,254
256,257
257,258
259,260
260,261
260,262
261,262
262,263
264,265
266,267
267,268
267,269
268,269
269,270
271,272
273,274
273,275
274,275
274,276
275,276
276,277
279,280
279,281
280,281
281,282
281,283
282,283
283,284
286,287
287,288
287,289
287,290
287,291
288,289
290,291
292,293
294,295
296,297
-----nextToken-----
2,4,6,8,9,10,12,14,17,19,20,21,25,27,29,31,34,36,38,42,44,45,48,50,51,55,57,61,63,67,70,74,77,80,82,85,89,90,93,99,100,101,105,106,107,112,113,117,120,123,125,128,132,133,136,140,143,145,146,151,152,157,161,164,167,169,172,176,177,180,184,185,189,194,197,198,199,200,201,202,203,207,211,214,216,217,221,225,230,231,233,238,239,241,246,247,249,254,255,258,263,265,270,272,277,278,284,285,289,291,293,295,297
-----computeFrom-----
65,66
65,67
72,73
72,74
87,88
87,89
95,96
95,97
96,97
96,98
102,103
102,104
110,111
110,112
115,116
115,117
130,131
130,132
138,139
138,140
148,149
148,150
159,160
159,161
174,175
174,176
182,183
182,184
209,210
209,211
227,228
227,229
235,236
235,237
243,244
243,245
251,252
251,253
260,261
260,262
267,268
267,269
274,275
274,276
281,282
281,283
-----guardedBy-----
89,93
105,123
132,136
151,167
176,180
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int prepend_component(const char **p, bool usec, CalendarComponent **c) {        int r, start, stop = -1, repeat = 0;        CalendarComponent *cc;        const char *e;        assert(p);        assert(c);        e = *p;        r = parse_component_decimal(&e, usec, &start);        if (r < 0)                return r;        if (e[0] == '.' && e[1] == '.') {                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }        if (*e == '/') {                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }        if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))                return -EINVAL;        cc = new0(CalendarComponent, 1);        if (!cc)                return -ENOMEM;        cc->start = start;        cc->stop = stop;        cc->repeat = repeat;        cc->next = *c;        *p = e;        *c = cc;        if (*e ==',') {                *p += 1;                return prepend_component(p, usec, c);        }        return 0;}
static int
prepend_component(const char **p, bool usec, CalendarComponent **c)
prepend_component
const char **p
const char
**p
*
*
p
bool usec
bool
usec
usec
CalendarComponent **c
CalendarComponent
CalendarComponent
**c
*
*
c
{        int r, start, stop = -1, repeat = 0;        CalendarComponent *cc;        const char *e;        assert(p);        assert(c);        e = *p;        r = parse_component_decimal(&e, usec, &start);        if (r < 0)                return r;        if (e[0] == '.' && e[1] == '.') {                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }        if (*e == '/') {                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }        if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))                return -EINVAL;        cc = new0(CalendarComponent, 1);        if (!cc)                return -ENOMEM;        cc->start = start;        cc->stop = stop;        cc->repeat = repeat;        cc->next = *c;        *p = e;        *c = cc;        if (*e ==',') {                *p += 1;                return prepend_component(p, usec, c);        }        return 0;}
int r, start, stop = -1, repeat = 0;
int r, start, stop = -1, repeat = 0;
int
r
r
start
start
stop = -1
stop
= -1
-1
1
repeat = 0
repeat
= 0
0
CalendarComponent *cc;
CalendarComponent *cc;
CalendarComponent
CalendarComponent
*cc
*
cc
const char *e;
const char *e;
const char
*e
*
e
assert(p);
assert(p)
assert
assert
p
p
assert(c);
assert(c)
assert
assert
c
c
e = *p;
e = *p
e
e
*p
p
p
r = parse_component_decimal(&e, usec, &start);
r = parse_component_decimal(&e, usec, &start)
r
r
parse_component_decimal(&e, usec, &start)
parse_component_decimal
parse_component_decimal
&e
e
e
usec
usec
&start
start
start
if (r < 0)                return r;
r < 0
r
r
0
return r;
r
r
if (e[0] == '.' && e[1] == '.') {                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }
e[0] == '.' && e[1] == '.'
e[0] == '.'
e[0]
e
e
0
'.'
e[1] == '.'
e[1]
e
e
1
'.'
{                e += 2;                r = parse_component_decimal(&e, usec, &stop);                if (r < 0)                        return r;                repeat = usec ? USEC_PER_SEC : 1;        }
e += 2;
e += 2
e
e
2
r = parse_component_decimal(&e, usec, &stop);
r = parse_component_decimal(&e, usec, &stop)
r
r
parse_component_decimal(&e, usec, &stop)
parse_component_decimal
parse_component_decimal
&e
e
e
usec
usec
&stop
stop
stop
if (r < 0)                        return r;
r < 0
r
r
0
return r;
r
r
repeat = usec ? USEC_PER_SEC : 1;
repeat = usec ? USEC_PER_SEC : 1
repeat
repeat
usec ? USEC_PER_SEC : 1
usec
usec
USEC_PER_SEC
USEC_PER_SEC
1
if (*e == '/') {                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }
*e == '/'
*e
e
e
'/'
{                e++;                r = parse_component_decimal(&e, usec, &repeat);                if (r < 0)                        return r;                if (repeat == 0)                        return -ERANGE;        }
e++;
e++
e
e
r = parse_component_decimal(&e, usec, &repeat);
r = parse_component_decimal(&e, usec, &repeat)
r
r
parse_component_decimal(&e, usec, &repeat)
parse_component_decimal
parse_component_decimal
&e
e
e
usec
usec
&repeat
repeat
repeat
if (r < 0)                        return r;
r < 0
r
r
0
return r;
r
r
if (repeat == 0)                        return -ERANGE;
repeat == 0
repeat
repeat
0
return -ERANGE;
-ERANGE
ERANGE
ERANGE
if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':'))                return -EINVAL;
!IN_SET(*e, 0, ' ', ',', '-', '~', ':')
IN_SET(*e, 0, ' ', ',', '-', '~', ':')
IN_SET
IN_SET
*e
e
e
0
' '
','
'-'
'~'
':'
return -EINVAL;
-EINVAL
EINVAL
EINVAL
cc = new0(CalendarComponent, 1);
cc = new0(CalendarComponent, 1)
cc
cc
new0(CalendarComponent, 1)
new0
new0
CalendarComponent
CalendarComponent
1
if (!cc)                return -ENOMEM;
!cc
cc
cc
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
cc->start = start;
cc->start = start
cc->start
cc
cc
start
start
start
cc->stop = stop;
cc->stop = stop
cc->stop
cc
cc
stop
stop
stop
cc->repeat = repeat;
cc->repeat = repeat
cc->repeat
cc
cc
repeat
repeat
repeat
cc->next = *c;
cc->next = *c
cc->next
cc
cc
next
*c
c
c
*p = e;
*p = e
*p
p
p
e
e
*c = cc;
*c = cc
*c
c
c
cc
cc
if (*e ==',') {                *p += 1;                return prepend_component(p, usec, c);        }
*e ==','
*e
e
e
','
{                *p += 1;                return prepend_component(p, usec, c);        }
*p += 1;
*p += 1
*p
p
p
1
return prepend_component(p, usec, c);
prepend_component(p, usec, c)
prepend_component
prepend_component
p
p
usec
usec
c
c
return 0;
0
-----joern-----
(80,102,0)
(38,9,0)
(72,174,0)
(29,119,0)
(119,29,0)
(62,75,0)
(73,115,0)
(146,6,0)
(169,83,0)
(167,131,0)
(82,121,0)
(75,51,0)
(146,137,0)
(43,168,0)
(128,102,0)
(50,82,0)
(155,99,0)
(128,116,0)
(22,131,0)
(11,84,0)
(96,149,0)
(116,67,0)
(149,70,0)
(67,27,0)
(98,136,0)
(82,50,0)
(129,5,0)
(84,72,0)
(150,87,0)
(27,156,0)
(154,83,0)
(140,21,0)
(85,49,0)
(103,99,0)
(59,146,0)
(69,75,0)
(101,163,0)
(66,171,0)
(57,139,0)
(135,131,0)
(158,168,0)
(61,72,0)
(50,20,0)
(142,123,0)
(3,37,0)
(57,20,0)
(83,49,0)
(60,130,0)
(64,131,0)
(164,30,0)
(26,174,0)
(53,149,0)
(38,5,0)
(175,155,0)
(16,137,0)
(46,63,0)
(9,163,0)
(40,5,0)
(1,84,0)
(128,38,0)
(111,125,0)
(167,21,0)
(115,72,0)
(97,157,0)
(52,131,0)
(139,57,0)
(120,131,0)
(116,44,0)
(68,30,0)
(116,11,0)
(20,117,0)
(9,72,0)
(156,27,0)
(173,96,0)
(41,34,0)
(57,149,0)
(87,83,0)
(116,115,0)
(145,124,0)
(91,74,0)
(30,121,0)
(38,67,0)
(166,167,0)
(53,136,0)
(100,36,0)
(79,53,0)
(106,124,0)
(43,39,0)
(38,155,0)
(162,149,0)
(4,72,0)
(108,164,0)
(169,149,0)
(76,82,0)
(38,131,0)
(5,39,0)
(127,29,0)
(56,13,0)
(158,131,0)
(24,6,0)
(132,115,0)
(82,172,0)
(5,157,0)
(93,172,0)
(48,20,0)
(102,172,0)
(112,6,0)
(36,129,0)
(82,34,0)
(156,168,0)
(43,121,0)
(146,131,0)
(152,161,0)
(116,9,0)
(129,115,0)
(135,39,0)
(129,11,0)
(49,83,0)
(81,75,0)
(128,148,0)
(36,39,0)
(6,131,0)
(33,66,0)
(65,11,0)
(0,148,0)
(157,149,0)
(55,119,0)
(58,4,0)
(21,167,0)
(155,72,0)
(75,122,0)
(25,29,0)
(70,149,0)
(95,30,0)
(113,156,0)
(83,169,0)
(171,66,0)
(83,121,0)
(89,43,0)
(109,161,0)
(164,131,0)
(129,67,0)
(96,63,0)
(134,131,0)
(51,149,0)
(129,155,0)
(107,158,0)
(88,87,0)
(157,131,0)
(19,50,0)
(31,57,0)
(30,162,0)
(122,75,0)
(161,121,0)
(53,20,0)
(99,167,0)
(20,149,0)
(12,9,0)
(38,115,0)
(141,135,0)
(29,149,0)
(2,37,0)
(143,131,0)
(137,117,0)
(129,44,0)
(169,20,0)
(160,68,0)
(30,164,0)
(28,67,0)
(99,131,0)
(126,130,0)
(148,164,0)
(130,6,0)
(13,32,0)
(137,161,0)
(105,9,0)
(15,129,0)
(49,6,0)
(38,11,0)
(78,150,0)
(94,162,0)
(171,149,0)
(55,63,0)
(18,70,0)
(115,146,0)
(129,9,0)
(51,75,0)
(162,30,0)
(172,117,0)
(54,171,0)
(30,68,0)
(92,75,0)
(104,139,0)
(8,136,0)
(116,36,0)
(72,131,0)
(47,75,0)
(34,167,0)
(147,131,0)
(159,155,0)
(128,123,0)
(35,96,0)
(11,168,0)
(63,96,0)
(23,161,0)
(133,51,0)
(157,20,0)
(37,172,0)
(17,131,0)
(51,20,0)
(116,155,0)
(149,131,0)
(110,43,0)
(123,87,0)
(138,43,0)
(163,131,0)
(172,82,0)
(71,174,0)
(124,164,0)
(77,150,0)
(128,125,0)
(114,75,0)
(27,131,0)
(87,136,0)
(42,169,0)
(161,137,0)
(90,149,0)
(171,20,0)
(84,131,0)
(119,55,0)
(34,82,0)
(151,20,0)
(128,170,0)
(86,38,0)
(67,72,0)
(70,39,0)
(153,117,0)
(128,32,0)
(49,137,0)
(130,137,0)
(174,72,0)
(10,131,0)
(63,55,0)
(118,67,0)
(83,87,0)
(45,119,0)
(74,170,0)
(165,131,0)
(116,5,0)
(43,116,0)
(14,131,0)
(144,111,0)
(7,131,0)
(4,72,1)
(122,75,1)
(125,111,1)
(123,142,1)
(172,82,1)
(158,107,1)
(36,100,1)
(116,11,1)
(157,20,1)
(126,60,1)
(30,162,1)
(112,24,1)
(40,27,1)
(65,157,1)
(43,121,1)
(149,70,1)
(108,149,1)
(5,39,1)
(42,88,1)
(56,130,1)
(70,18,1)
(128,102,1)
(97,5,1)
(47,69,1)
(79,139,1)
(150,87,1)
(116,36,1)
(55,63,1)
(154,169,1)
(138,110,1)
(96,173,1)
(115,72,1)
(38,11,1)
(51,20,1)
(123,87,1)
(162,94,1)
(30,121,1)
(133,139,1)
(32,13,1)
(130,126,1)
(141,6,1)
(102,80,1)
(82,50,1)
(13,56,1)
(116,67,1)
(75,92,1)
(128,123,1)
(54,84,1)
(105,4,1)
(45,29,1)
(38,155,1)
(152,23,1)
(144,122,1)
(78,77,1)
(158,168,1)
(155,72,1)
(174,71,1)
(12,105,1)
(33,171,1)
(116,155,1)
(20,149,1)
(129,5,1)
(38,115,1)
(9,72,1)
(129,9,1)
(70,39,1)
(20,151,1)
(107,135,1)
(5,40,1)
(164,30,1)
(62,51,1)
(86,66,1)
(124,164,1)
(58,72,1)
(116,5,1)
(137,161,1)
(127,25,1)
(28,118,1)
(68,160,1)
(146,59,1)
(157,97,1)
(129,67,1)
(102,172,1)
(67,28,1)
(67,72,1)
(89,138,1)
(83,169,1)
(76,50,1)
(96,149,1)
(57,31,1)
(110,129,1)
(43,89,1)
(146,137,1)
(92,81,1)
(133,130,1)
(6,112,1)
(11,65,1)
(38,9,1)
(53,149,1)
(4,58,1)
(63,96,1)
(43,39,1)
(23,16,1)
(27,156,1)
(100,66,1)
(25,63,1)
(130,6,1)
(30,68,1)
(169,20,1)
(87,83,1)
(9,12,1)
(1,11,1)
(95,162,1)
(113,67,1)
(88,53,1)
(163,101,1)
(90,158,1)
(167,21,1)
(139,57,1)
(46,96,1)
(50,19,1)
(161,152,1)
(55,119,1)
(63,46,1)
(162,149,1)
(128,32,1)
(116,43,1)
(151,48,1)
(48,55,1)
(118,146,1)
(116,9,1)
(51,133,1)
(82,121,1)
(38,5,1)
(29,127,1)
(148,0,1)
(83,121,1)
(37,3,1)
(35,124,1)
(84,72,1)
(175,159,1)
(61,122,1)
(161,109,1)
(156,113,1)
(119,45,1)
(171,54,1)
(114,62,1)
(41,76,1)
(38,86,1)
(119,29,1)
(16,37,1)
(139,104,1)
(135,39,1)
(21,140,1)
(69,114,1)
(24,167,1)
(84,1,1)
(0,124,1)
(81,47,1)
(18,90,1)
(169,149,1)
(99,167,1)
(50,20,1)
(124,145,1)
(57,20,1)
(93,20,1)
(129,15,1)
(155,175,1)
(71,26,1)
(43,168,1)
(115,132,1)
(49,137,1)
(116,115,1)
(85,154,1)
(128,148,1)
(128,125,1)
(19,93,1)
(140,166,1)
(161,121,1)
(74,91,1)
(49,6,1)
(53,20,1)
(146,6,1)
(26,61,1)
(60,150,1)
(83,49,1)
(160,95,1)
(157,149,1)
(130,137,1)
(66,33,1)
(80,37,1)
(99,103,1)
(66,171,1)
(169,42,1)
(103,155,1)
(53,79,1)
(101,9,1)
(145,106,1)
(38,67,1)
(129,11,1)
(51,149,1)
(72,174,1)
(159,163,1)
(173,35,1)
(3,2,1)
(11,168,1)
(31,137,1)
(104,57,1)
(2,172,1)
(128,38,1)
(132,73,1)
(156,168,1)
(128,116,1)
(170,74,1)
(128,170,1)
(36,39,1)
(15,36,1)
(142,150,1)
(82,34,1)
(34,41,1)
(135,141,1)
(150,78,1)
(94,108,1)
(57,149,1)
(77,87,1)
(111,144,1)
(31,55,1)
(73,99,1)
(29,149,1)
(91,4,1)
(109,23,1)
(129,115,1)
(171,20,1)
(34,167,1)
(37,172,1)
(148,164,1)
(75,51,1)
(129,155,1)
(171,149,1)
(59,115,1)
(106,164,1)
(49,85,1)
(40,4,2)
(30,162,2)
(38,155,2)
(113,4,2)
(172,55,2)
(3,55,2)
(154,139,2)
(148,164,2)
(116,9,2)
(61,122,2)
(43,121,2)
(32,130,2)
(137,37,2)
(50,55,2)
(81,130,2)
(148,124,2)
(37,172,2)
(46,124,2)
(104,37,2)
(116,5,2)
(128,32,2)
(155,72,2)
(57,20,2)
(55,119,2)
(171,149,2)
(60,150,2)
(116,11,2)
(130,137,2)
(167,21,2)
(43,66,2)
(53,149,2)
(149,70,2)
(57,55,2)
(84,4,2)
(5,4,2)
(27,156,2)
(133,139,2)
(157,20,2)
(75,139,2)
(80,37,2)
(171,20,2)
(152,23,2)
(57,37,2)
(76,55,2)
(51,130,2)
(75,130,2)
(146,6,2)
(9,4,2)
(156,4,2)
(67,72,2)
(65,4,2)
(9,72,2)
(115,72,2)
(119,29,2)
(33,4,2)
(169,149,2)
(37,55,2)
(114,130,2)
(105,4,2)
(99,167,2)
(57,149,2)
(173,124,2)
(28,4,2)
(92,139,2)
(116,115,2)
(138,66,2)
(122,139,2)
(129,115,2)
(51,20,2)
(159,4,2)
(132,4,2)
(102,37,2)
(75,51,2)
(129,155,2)
(83,49,2)
(125,122,2)
(111,122,2)
(161,37,2)
(169,139,2)
(2,55,2)
(82,55,2)
(102,172,2)
(31,55,2)
(157,4,2)
(34,167,2)
(11,4,2)
(51,149,2)
(43,168,2)
(72,174,2)
(5,39,2)
(88,139,2)
(128,123,2)
(129,9,2)
(54,4,2)
(92,130,2)
(116,155,2)
(30,121,2)
(133,130,2)
(82,50,2)
(55,124,2)
(51,139,2)
(97,4,2)
(77,139,2)
(58,122,2)
(73,4,2)
(158,168,2)
(13,130,2)
(172,82,2)
(128,170,2)
(110,66,2)
(49,6,2)
(59,4,2)
(139,55,2)
(38,11,2)
(38,67,2)
(104,55,2)
(49,137,2)
(41,55,2)
(30,68,2)
(67,4,2)
(49,139,2)
(87,83,2)
(86,66,2)
(116,36,2)
(66,4,2)
(170,4,2)
(48,55,2)
(93,55,2)
(128,38,2)
(103,4,2)
(66,171,2)
(4,72,2)
(84,72,2)
(87,139,2)
(146,137,2)
(63,124,2)
(169,20,2)
(63,96,2)
(109,23,2)
(122,130,2)
(19,55,2)
(96,124,2)
(116,67,2)
(45,63,2)
(20,149,2)
(162,149,2)
(55,63,2)
(137,161,2)
(128,116,2)
(130,150,2)
(50,20,2)
(96,149,2)
(26,122,2)
(124,164,2)
(118,4,2)
(83,169,2)
(4,122,2)
(174,122,2)
(53,139,2)
(139,37,2)
(62,130,2)
(128,102,2)
(35,124,2)
(139,57,2)
(83,139,2)
(114,139,2)
(27,4,2)
(79,139,2)
(78,139,2)
(25,63,2)
(135,39,2)
(69,139,2)
(146,4,2)
(155,4,2)
(144,122,2)
(156,168,2)
(72,122,2)
(81,139,2)
(129,5,2)
(130,6,2)
(53,20,2)
(151,55,2)
(127,63,2)
(1,4,2)
(62,139,2)
(82,121,2)
(123,150,2)
(31,37,2)
(83,121,2)
(163,4,2)
(129,66,2)
(36,39,2)
(150,139,2)
(12,4,2)
(34,55,2)
(70,39,2)
(171,4,2)
(157,149,2)
(128,125,2)
(101,4,2)
(16,37,2)
(38,66,2)
(126,150,2)
(15,66,2)
(128,148,2)
(129,67,2)
(82,34,2)
(29,149,2)
(36,66,2)
(129,11,2)
(74,4,2)
(20,55,2)
(47,130,2)
(69,130,2)
(56,130,2)
(100,66,2)
(119,63,2)
(175,4,2)
(11,168,2)
(99,4,2)
(122,75,2)
(164,30,2)
(38,115,2)
(123,87,2)
(161,121,2)
(47,139,2)
(116,66,2)
(42,139,2)
(89,66,2)
(23,37,2)
(85,139,2)
(29,63,2)
(71,122,2)
(150,87,2)
(38,5,2)
(38,9,2)
(91,4,2)
(43,39,2)
(115,4,2)
(142,150,2)
(0,124,2)
-----------------------------------
(0,r)
(1,cc)
(2,r)
(3,0)
(4,!cc)
(5,*p)
(6,repeat = 0)
(7,if (r < 0)
(8,if (repeat == 0)
(9,cc->start)
(10,e)
(11,*c)
(12,start)
(13,-ERANGE)
(14,if (e[0] == '.' && e[1] == '.')
(15,1)
(16,repeat)
(17,repeat)
(18,p)
(19,e)
(20,e += 2)
(21,-1)
(22,stop)
(23,usec)
(24,repeat)
(25,e)
(26,CalendarComponent)
(27,cc->next = *c)
(28,next)
(29,e[1])
(30,parse_component_decimal(&e, usec, &start)
(31,e)
(32,return -ERANGE;)
(33,',')
(34,&stop)
(35,e)
(36,*p)
(37,r < 0)
(38,return 0;)
(39,const char **p)
(40,p)
(41,stop)
(42,e)
(43,prepend_component(p, usec, c)
(44,)
(45,'.')
(46,'.')
(47,'-')
(48,e)
(49,&repeat)
(50,&e)
(51,*e)
(52,if (!cc)
(53,e++)
(54,e)
(55,e[0] == '.' && e[1] == '.')
(56,ERANGE)
(57,*e)
(58,cc)
(59,repeat)
(60,repeat)
(61,cc)
(62,0)
(63,e[0] == '.')
(64,r)
(65,c)
(66,*e ==',')
(67,cc->next)
(68,&start)
(69,',')
(70,*p)
(71,1)
(72,cc = new0(CalendarComponent, 1)
(73,cc)
(74,-ENOMEM)
(75,IN_SET(*e, 0, ' ', ',', '-', '~', ':')
(76,usec)
(77,r)
(78,0)
(79,e)
(80,r)
(81,'~')
(82,parse_component_decimal(&e, usec, &stop)
(83,parse_component_decimal(&e, usec, &repeat)
(84,*c = cc)
(85,repeat)
(86,0)
(87,r = parse_component_decimal(&e, usec, &repeat)
(88,r)
(89,c)
(90,e)
(91,ENOMEM)
(92,':')
(93,r)
(94,e)
(95,usec)
(96,e[0])
(97,e)
(98,if (r < 0)
(99,cc->stop = stop)
(100,p)
(101,start)
(102,return r;)
(103,stop)
(104,'/')
(105,cc)
(106,r)
(107,c)
(108,r)
(109,USEC_PER_SEC)
(110,p)
(111,-EINVAL)
(112,0)
(113,c)
(114,' ')
(115,cc->repeat)
(116,return prepend_component(p, usec, c)
(117,)
(118,cc)
(119,e[1] == '.')
(120,cc)
(121,bool usec)
(122,!IN_SET(*e, 0, ' ', ',', '-', '~', ':')
(123,return r;)
(124,r < 0)
(125,return -EINVAL;)
(126,0)
(127,1)
(128,RET)
(129,*p += 1)
(130,repeat == 0)
(131,)
(132,repeat)
(133,e)
(134,if (!IN_SET(*e, 0, ' ', ',', '-', '~', ':')
(135,assert(p)
(136,)
(137,repeat = usec ? USEC_PER_SEC : 1)
(138,usec)
(139,*e == '/')
(140,1)
(141,p)
(142,r)
(143,if (*e == '/')
(144,EINVAL)
(145,0)
(146,cc->repeat = repeat)
(147,start)
(148,return r;)
(149,e = *p)
(150,r < 0)
(151,2)
(152,1)
(153,if (r < 0)
(154,usec)
(155,cc->stop)
(156,*c)
(157,*p = e)
(158,assert(c)
(159,cc)
(160,start)
(161,usec ? USEC_PER_SEC : 1)
(162,&e)
(163,cc->start = start)
(164,r = parse_component_decimal(&e, usec, &start)
(165,if (*e ==',')
(166,stop)
(167,stop = -1)
(168,CalendarComponent **c)
(169,&e)
(170,return -ENOMEM;)
(171,*e)
(172,r = parse_component_decimal(&e, usec, &stop)
(173,0)
(174,new0(CalendarComponent, 1)
(175,stop)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^