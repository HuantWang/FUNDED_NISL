-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65_bad()
{
    size_t data;
    /* define a function pointer */
    void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink;
    /* Initialize data */
    data = 0;
    {
#ifdef _WIN32
        WSADATA wsaData;
        int wsaDataInit = 0;
#endif
        int recvResult;
        struct sockaddr_in service;
        SOCKET connectSocket = INVALID_SOCKET;
        char inputBuffer[CHAR_ARRAY_SIZE];
        do
        {
#ifdef _WIN32
            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
            {
                break;
            }
            wsaDataInit = 1;
#endif
            /* POTENTIAL FLAW: Read data using a connect socket */
            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
            if (connectSocket == INVALID_SOCKET)
            {
                break;
            }
            memset(&service, 0, sizeof(service));
            service.sin_family = AF_INET;
            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
            service.sin_port = htons(TCP_PORT);
            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
            {
                break;
            }
            /* Abort on error or the connection was closed, make sure to recv one
             * less char than is in the recv_buf in order to append a terminator */
            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
            if (recvResult == SOCKET_ERROR || recvResult == 0)
            {
                break;
            }
            /* NUL-terminate the string */
            inputBuffer[recvResult] = '\0';
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        while (0);
        if (connectSocket != INVALID_SOCKET)
        {
            CLOSE_SOCKET(connectSocket);
        }
#ifdef _WIN32
        if (wsaDataInit)
        {
            WSACleanup();
        }
#endif
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
20,21
22,23
24,25
25,26
27,28
28,29
28,30
29,30
32,33
32,34
32,35
32,36
32,37
32,38
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
53,54
54,55
54,56
56,57
56,58
58,59
59,60
61,62
61,63
62,63
62,64
62,65
62,66
62,67
62,68
62,69
62,70
62,71
62,72
62,73
63,64
64,65
64,66
65,66
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
84,85
85,86
85,87
85,88
85,89
86,87
88,89
89,90
92,93
93,94
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
104,105
105,106
105,107
106,107
106,108
107,108
107,109
108,109
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
123,125
124,125
126,127
128,129
128,130
129,130
129,131
130,131
130,132
130,133
130,134
131,132
133,134
135,136
135,137
136,137
136,138
137,138
139,140
141,142
142,143
144,145
145,146
146,147
148,149
150,151
152,153
153,154
153,155
154,155
156,157
156,158
156,159
156,160
156,161
157,158
159,160
161,162
163,164
163,165
164,165
168,169
168,170
169,170
169,171
170,171
170,172
171,172
173,174
175,176
175,177
176,177
179,180
181,182
182,183
182,184
183,184
183,185
184,185
186,187
189,190
190,191
190,192
191,192
193,194
193,195
193,196
193,197
194,195
196,197
198,199
202,203
202,204
203,204
203,205
204,205
206,207
208,209
209,210
210,211
210,212
211,212
213,214
215,216
216,217
216,218
217,218
219,220
-----nextToken-----
2,4,9,11,14,17,18,21,23,26,30,31,35,37,41,43,47,49,52,55,57,60,66,69,71,73,75,79,81,83,87,90,91,95,100,101,103,109,110,111,114,116,121,122,125,127,132,134,138,140,143,147,149,151,155,158,160,162,165,166,167,172,174,177,178,180,185,187,188,192,195,197,199,200,201,205,207,212,214,218,220
-----computeFrom-----
28,29
28,30
64,65
64,66
77,78
77,79
97,98
97,99
105,106
105,107
118,119
118,120
129,130
129,131
153,154
153,155
163,164
163,165
169,170
169,171
170,171
170,172
175,176
175,177
182,183
182,184
190,191
190,192
203,204
203,205
-----guardedBy-----
205,214
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65_bad(){    size_t data;    /* define a function pointer */    void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65_bad
{    size_t data;    /* define a function pointer */    void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink;    /* Initialize data */    data = 0;    {#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }    /* use the function pointer */    funcPtr(data);}
size_t data;
size_t data;
size_t
size_t
data
data
void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink;
void (*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink;
void
(*funcPtr) (size_t) = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink
*funcPtr
*
funcPtr
size_t
size_t
size_t


= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink
data = 0;
data = 0
data
data
0
{#ifdef _WIN32        WSADATA wsaData;        int wsaDataInit = 0;#endif        int recvResult;        struct sockaddr_in service;        SOCKET connectSocket = INVALID_SOCKET;        char inputBuffer[CHAR_ARRAY_SIZE];        do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);        if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }#ifdef _WIN32        if (wsaDataInit)        {            WSACleanup();        }#endif    }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do        {#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        while (0);
{#ifdef _WIN32            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)            {                break;            }            wsaDataInit = 1;#endif            /* POTENTIAL FLAW: Read data using a connect socket */            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);            if (connectSocket == INVALID_SOCKET)            {                break;            }            memset(&service, 0, sizeof(service));            service.sin_family = AF_INET;            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);            service.sin_port = htons(TCP_PORT);            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }            /* Abort on error or the connection was closed, make sure to recv one             * less char than is in the recv_buf in order to append a terminator */            recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);            if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }            /* NUL-terminate the string */            inputBuffer[recvResult] = '\0';            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)            {                break;            }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                break;            }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)            {                break;            }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                break;            }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)            {                break;            }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                break;            }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)        {            CLOSE_SOCKET(connectSocket);        }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{            CLOSE_SOCKET(connectSocket);        }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(5,33,0)
(107,33,0)
(86,52,0)
(114,26,0)
(82,70,0)
(89,23,0)
(83,48,0)
(22,47,0)
(114,31,0)
(38,15,0)
(26,114,0)
(42,15,0)
(83,52,0)
(96,125,0)
(70,52,0)
(9,39,0)
(119,83,0)
(122,31,0)
(37,91,0)
(124,36,0)
(67,101,0)
(20,54,0)
(110,71,0)
(33,70,0)
(106,43,0)
(8,70,0)
(75,111,0)
(81,110,0)
(48,23,0)
(71,110,0)
(64,2,0)
(110,54,0)
(109,7,0)
(118,70,0)
(21,7,0)
(64,31,0)
(112,125,0)
(97,130,0)
(84,2,0)
(95,114,0)
(50,44,0)
(25,39,0)
(115,58,0)
(40,23,0)
(28,31,0)
(22,31,0)
(93,83,0)
(7,109,0)
(34,23,0)
(78,66,0)
(41,47,0)
(53,122,0)
(90,63,0)
(14,58,0)
(123,118,0)
(29,32,0)
(111,52,0)
(3,111,0)
(36,118,0)
(77,49,0)
(6,7,0)
(19,17,0)
(105,12,0)
(36,113,0)
(18,43,0)
(85,14,0)
(66,23,0)
(102,31,0)
(32,118,0)
(54,110,0)
(131,66,0)
(81,91,0)
(72,26,0)
(103,81,0)
(45,70,0)
(12,44,0)
(27,28,0)
(52,31,0)
(12,39,0)
(38,17,0)
(100,48,0)
(91,81,0)
(38,114,0)
(4,105,0)
(129,69,0)
(80,31,0)
(43,113,0)
(52,111,0)
(23,15,0)
(51,23,0)
(43,118,0)
(55,52,0)
(2,64,0)
(32,122,0)
(74,31,0)
(118,31,0)
(7,6,0)
(49,15,0)
(70,33,0)
(17,15,0)
(94,31,0)
(30,17,0)
(55,48,0)
(92,71,0)
(88,109,0)
(125,73,0)
(76,23,0)
(12,105,0)
(69,52,0)
(110,81,0)
(60,6,0)
(73,125,0)
(113,43,0)
(73,22,0)
(10,38,0)
(35,116,0)
(126,110,0)
(57,11,0)
(7,31,0)
(98,23,0)
(121,49,0)
(46,32,0)
(16,23,0)
(61,15,0)
(44,12,0)
(1,73,0)
(99,55,0)
(65,26,0)
(132,23,0)
(110,52,0)
(130,64,0)
(39,12,0)
(128,79,0)
(104,14,0)
(70,118,0)
(0,130,0)
(59,23,0)
(127,26,0)
(13,69,0)
(117,28,0)
(47,22,0)
(24,36,0)
(58,31,0)
(87,111,0)
(55,56,0)
(81,103,0)
(108,48,0)
(113,36,0)
(55,99,1)
(17,30,1)
(113,36,1)
(93,90,1)
(43,118,1)
(128,69,1)
(60,21,1)
(93,57,1)
(55,52,1)
(127,65,1)
(25,9,1)
(52,111,1)
(93,128,1)
(46,113,1)
(45,123,1)
(126,64,1)
(7,6,1)
(129,13,1)
(71,92,1)
(125,96,1)
(111,3,1)
(85,7,1)
(88,69,1)
(122,53,1)
(124,24,1)
(36,118,1)
(73,1,1)
(32,29,1)
(93,62,1)
(109,88,1)
(70,82,1)
(95,122,1)
(81,103,1)
(67,68,1)
(54,110,1)
(113,43,1)
(78,17,1)
(107,5,1)
(100,108,1)
(83,119,1)
(50,12,1)
(58,115,1)
(29,46,1)
(90,44,1)
(75,86,1)
(21,109,1)
(5,8,1)
(69,52,1)
(8,45,1)
(54,20,1)
(108,66,1)
(28,27,1)
(13,52,1)
(4,39,1)
(20,110,1)
(104,85,1)
(120,38,1)
(114,26,1)
(57,113,1)
(84,130,1)
(12,105,1)
(38,10,1)
(38,114,1)
(32,118,1)
(86,28,1)
(92,81,1)
(10,68,1)
(130,97,1)
(99,83,1)
(112,58,1)
(53,32,1)
(81,91,1)
(47,41,1)
(36,124,1)
(106,118,1)
(22,47,1)
(97,0,1)
(66,131,1)
(115,14,1)
(3,87,1)
(19,49,1)
(9,48,1)
(93,35,1)
(24,43,1)
(37,126,1)
(2,84,1)
(105,4,1)
(110,81,1)
(44,50,1)
(18,106,1)
(62,114,1)
(14,104,1)
(123,54,1)
(64,2,1)
(68,83,1)
(6,60,1)
(83,48,1)
(30,19,1)
(35,54,1)
(26,72,1)
(110,52,1)
(96,112,1)
(10,67,1)
(55,48,1)
(65,95,1)
(83,52,1)
(69,129,1)
(91,37,1)
(48,100,1)
(38,17,1)
(73,125,1)
(70,33,1)
(110,71,1)
(41,73,1)
(1,125,1)
(27,117,1)
(117,44,1)
(82,33,1)
(39,25,1)
(68,55,1)
(131,78,1)
(87,75,1)
(121,77,1)
(9,62,1)
(70,52,1)
(43,18,1)
(49,121,1)
(72,127,1)
(7,109,1)
(119,93,1)
(33,107,1)
(44,12,1)
(0,22,1)
(118,70,1)
(12,39,1)
(124,43,2)
(115,69,2)
(118,70,2)
(36,43,2)
(113,54,2)
(52,111,2)
(113,43,2)
(37,69,2)
(118,54,2)
(26,113,2)
(83,48,2)
(3,44,2)
(52,44,2)
(38,17,2)
(87,44,2)
(47,69,2)
(41,69,2)
(45,54,2)
(75,44,2)
(28,44,2)
(32,118,2)
(18,54,2)
(104,69,2)
(91,69,2)
(112,69,2)
(105,62,2)
(44,62,2)
(50,62,2)
(64,69,2)
(32,113,2)
(12,105,2)
(55,52,2)
(6,69,2)
(73,125,2)
(44,12,2)
(57,113,2)
(86,44,2)
(54,110,2)
(62,113,2)
(113,36,2)
(96,69,2)
(58,69,2)
(64,2,2)
(110,69,2)
(36,118,2)
(69,52,2)
(129,44,2)
(110,71,2)
(39,62,2)
(125,69,2)
(55,48,2)
(122,113,2)
(128,69,2)
(2,69,2)
(29,113,2)
(7,109,2)
(69,44,2)
(1,69,2)
(84,69,2)
(126,69,2)
(109,69,2)
(12,62,2)
(72,113,2)
(111,44,2)
(73,69,2)
(99,83,2)
(43,54,2)
(7,69,2)
(13,44,2)
(106,54,2)
(27,44,2)
(82,54,2)
(22,47,2)
(21,69,2)
(7,6,2)
(71,69,2)
(85,69,2)
(90,44,2)
(117,44,2)
(114,113,2)
(60,69,2)
(67,68,2)
(43,118,2)
(20,69,2)
(55,83,2)
(33,54,2)
(46,113,2)
(14,69,2)
(70,33,2)
(5,54,2)
(12,39,2)
(8,54,2)
(127,113,2)
(38,114,2)
(110,81,2)
(70,52,2)
(53,113,2)
(54,69,2)
(83,52,2)
(0,69,2)
(81,103,2)
(9,62,2)
(65,113,2)
(92,69,2)
(25,62,2)
(97,69,2)
(95,113,2)
(88,69,2)
(123,54,2)
(81,69,2)
(70,54,2)
(81,91,2)
(35,54,2)
(4,62,2)
(114,26,2)
(24,43,2)
(130,69,2)
(107,54,2)
(110,52,2)
(22,69,2)
-----------------------------------
(0,service)
(1,s_addr)
(2,htons(TCP_PORT)
(3,IPPROTO_TCP)
(4,wsaData)
(5,CHAR_ARRAY_SIZE)
(6,sizeof(service)
(7,memset(&service, 0, sizeof(service)
(8,inputBuffer)
(9,2)
(10,data)
(11,)
(12,WSAStartup(MAKEWORD(2,2)
(13,connectSocket)
(14,service.sin_family)
(15,)
(16,wsaData)
(17,data = 0)
(18,SOCKET_ERROR)
(19,data)
(20,SOCKET_ERROR)
(21,0)
(22,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(23,)
(24,recvResult)
(25,2)
(26,strtoul(inputBuffer, NULL, 0)
(27,1)
(28,wsaDataInit = 1)
(29,recvResult)
(30,0)
(31,)
(32,inputBuffer[recvResult])
(33,CHAR_ARRAY_SIZE - 1)
(34,service)
(35,break;)
(36,recvResult == 0)
(37,service)
(38,funcPtr(data)
(39,MAKEWORD(2,2)
(40,if (connectSocket != INVALID_SOCKET)
(41,IP_ADDRESS)
(42,data)
(43,recvResult == SOCKET_ERROR)
(44,WSAStartup(MAKEWORD(2,2)
(45,connectSocket)
(46,inputBuffer)
(47,inet_addr(IP_ADDRESS)
(48,connectSocket = INVALID_SOCKET)
(49,(*funcPtr)
(50,NO_ERROR)
(51,recvResult)
(52,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(53,'\\0')
(54,connect(connectSocket, (struct sockaddr*)
(55,CLOSE_SOCKET(connectSocket)
(56,)
(57,break;)
(58,service.sin_family = AF_INET)
(59,wsaDataInit)
(60,service)
(61,funcPtr)
(62,0)
(63,)
(64,service.sin_port = htons(TCP_PORT)
(65,inputBuffer)
(66,wsaDataInit = 0)
(67,WSACleanup()
(68,wsaDataInit)
(69,connectSocket == INVALID_SOCKET)
(70,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(71,sizeof(service)
(72,0)
(73,service.sin_addr.s_addr)
(74,if (recvResult == SOCKET_ERROR || recvResult == 0)
(75,AF_INET)
(76,connectSocket)
(77,funcPtr)
(78,wsaDataInit)
(79,)
(80,if (connectSocket == INVALID_SOCKET)
(81,(struct sockaddr*)
(82,0)
(83,connectSocket != INVALID_SOCKET)
(84,TCP_PORT)
(85,service)
(86,connectSocket)
(87,SOCK_STREAM)
(88,service)
(89,inputBuffer)
(90,break;)
(91,&service)
(92,service)
(93,connectSocket)
(94,if (WSAStartup(MAKEWORD(2,2)
(95,data)
(96,sin_addr)
(97,sin_port)
(98,if (wsaDataInit)
(99,connectSocket)
(100,INVALID_SOCKET)
(101,)
(102,if (connect(connectSocket, (struct sockaddr*)
(103,struct sockaddr*)
(104,sin_family)
(105,&wsaData)
(106,recvResult)
(107,1)
(108,connectSocket)
(109,&service)
(110,connect(connectSocket, (struct sockaddr*)
(111,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(112,service)
(113,recvResult == SOCKET_ERROR || recvResult == 0)
(114,data = strtoul(inputBuffer, NULL, 0)
(115,AF_INET)
(116,)
(117,wsaDataInit)
(118,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(119,INVALID_SOCKET)
(120,RET)
(121,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_65b_badSink)
(122,inputBuffer[recvResult] = '\\0')
(123,recvResult)
(124,0)
(125,service.sin_addr)
(126,connectSocket)
(127,NULL)
(128,break;)
(129,INVALID_SOCKET)
(130,service.sin_port)
(131,0)
(132,do)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^