-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    /* Initialize count */
    count = -1;
    /* FIX: Use a relatively small number */
    count = 20;
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
22,23
22,24
22,25
22,26
22,27
22,28
22,29
23,24
24,25
24,26
25,26
27,28
27,29
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
44,47
47,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
71,72
71,73
71,74
71,75
72,73
73,74
73,75
74,75
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
90,91
91,92
91,93
92,93
92,94
93,94
93,95
94,95
96,97
98,99
98,100
98,101
98,102
98,103
99,100
101,102
103,104
104,105
104,106
107,108
107,109
108,109
110,111
112,113
114,115
115,116
116,117
116,118
117,118
120,121
120,122
121,122
123,124
124,125
125,126
125,127
126,127
128,129
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,30,34,36,37,40,43,45,46,48,52,55,57,58,62,64,69,70,75,76,79,83,84,86,89,95,97,100,102,105,106,109,111,113,118,119,122,127,129
-----computeFrom-----
12,13
12,14
18,19
18,20
50,51
50,52
60,61
60,62
73,74
73,75
77,78
77,79
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
static void
goodG2B()
goodG2B
{    int count;    /* Initialize count */    count = -1;    /* FIX: Use a relatively small number */    count = 20;    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
count = 20;
count = 20
count
count
20
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(17,61,0)
(28,38,0)
(36,48,0)
(31,38,0)
(48,38,0)
(18,1,0)
(37,18,0)
(17,32,0)
(47,56,0)
(23,18,0)
(12,45,0)
(7,21,0)
(49,56,0)
(64,36,0)
(22,48,0)
(5,16,0)
(61,17,0)
(48,22,0)
(38,21,0)
(55,32,0)
(30,38,0)
(65,39,0)
(58,16,0)
(18,48,0)
(32,56,0)
(0,50,0)
(5,21,0)
(62,48,0)
(4,63,0)
(19,42,0)
(6,50,0)
(17,50,0)
(63,18,0)
(24,40,0)
(20,27,0)
(18,23,0)
(53,38,0)
(50,21,0)
(60,30,0)
(34,38,0)
(46,30,0)
(59,40,0)
(41,22,0)
(14,45,0)
(22,45,0)
(8,11,0)
(40,48,0)
(44,47,0)
(51,38,0)
(32,17,0)
(42,1,0)
(33,5,0)
(1,18,0)
(45,38,0)
(3,23,0)
(9,38,0)
(18,63,0)
(10,31,0)
(15,8,0)
(35,56,0)
(25,31,0)
(43,17,0)
(1,42,0)
(2,38,0)
(27,13,0)
(36,29,0)
(57,22,0)
(16,5,0)
(52,18,0)
(6,0,1)
(4,23,1)
(12,31,1)
(35,49,1)
(40,59,1)
(31,25,1)
(3,52,1)
(42,19,1)
(52,42,1)
(55,56,1)
(25,10,1)
(45,14,1)
(22,45,1)
(62,45,1)
(44,1,1)
(18,23,1)
(20,40,1)
(17,61,1)
(56,35,1)
(49,27,1)
(18,63,1)
(55,47,1)
(57,41,1)
(47,56,1)
(23,3,1)
(5,16,1)
(1,42,1)
(44,8,1)
(32,17,1)
(59,24,1)
(36,48,1)
(19,32,1)
(32,56,1)
(15,1,1)
(43,55,1)
(41,62,1)
(49,40,1)
(17,50,1)
(18,37,1)
(54,32,1)
(14,12,1)
(26,54,1)
(64,54,1)
(0,5,1)
(16,58,1)
(63,4,1)
(46,50,1)
(58,33,1)
(60,46,1)
(47,44,1)
(26,36,1)
(1,18,1)
(40,48,1)
(48,22,1)
(27,20,1)
(22,57,1)
(24,48,1)
(8,15,1)
(37,63,1)
(10,30,1)
(17,43,1)
(36,64,1)
(50,6,1)
(18,48,1)
(30,60,1)
(52,32,2)
(27,40,2)
(18,63,2)
(55,32,2)
(18,32,2)
(17,50,2)
(36,48,2)
(1,42,2)
(40,48,2)
(37,32,2)
(47,32,2)
(48,22,2)
(20,40,2)
(4,32,2)
(47,56,2)
(32,56,2)
(63,32,2)
(1,32,2)
(36,54,2)
(5,16,2)
(1,18,2)
(17,61,2)
(42,32,2)
(64,54,2)
(44,32,2)
(23,32,2)
(3,32,2)
(32,32,2)
(15,1,2)
(8,1,2)
(22,45,2)
(19,32,2)
(32,17,2)
(18,23,2)
(43,32,2)
(18,48,2)
(17,32,2)
-----------------------------------
(0,count)
(1,strlen(SENTENCE)
(2,pFile)
(3,char)
(4,SENTENCE)
(5,count = -1)
(6,20)
(7,count)
(8,exit(1)
(9,if (pFile == NULL)
(10,pFile)
(11,)
(12,filename)
(13,)
(14,"output_bad.txt")
(15,1)
(16,-1)
(17,(size_t)
(18,fwrite(SENTENCE, sizeof(char)
(19,SENTENCE)
(20,1)
(21,)
(22,fopen(filename, "w+")
(23,sizeof(char)
(24,pFile)
(25,NULL)
(26,RET)
(27,exit(1)
(28,filename)
(29,)
(30,i = 0)
(31,*pFile = NULL)
(32,i < (size_t)
(33,count)
(34,i)
(35,0)
(36,fclose(pFile)
(37,pFile)
(38,)
(39,)
(40,pFile == NULL)
(41,filename)
(42,strlen(SENTENCE)
(43,count)
(44,i)
(45,*filename = "output_bad.txt")
(46,i)
(47,i++)
(48,pFile = fopen(filename, "w+")
(49,i)
(50,count = 20)
(51,if (pFile)
(52,SENTENCE)
(53,for (i = 0; i < (size_t)
(54,pFile)
(55,i)
(56,i = 0)
(57,"w+")
(58,1)
(59,NULL)
(60,0)
(61,size_t)
(62,pFile)
(63,strlen(SENTENCE)
(64,pFile)
(65,if (strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^