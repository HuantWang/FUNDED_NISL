-----label-----
0
-----code-----
static void goodB2G1()
{
    twoIntsStruct * data;
    data = NULL;
    if(STATIC_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(STATIC_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
78,79
78,80
79,80
82,83
82,84
82,85
83,84
85,86
86,87
87,88
87,89
88,89
91,92
92,93
93,94
93,95
94,95
96,97
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,81,84,89,90,95,97
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    twoIntsStruct * data;    data = NULL;    if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(STATIC_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(STATIC_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
STATIC_CONST_FALSE
STATIC_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(33,47,0)
(44,23,0)
(14,44,0)
(1,16,0)
(32,44,0)
(22,3,0)
(44,14,0)
(21,33,0)
(0,13,0)
(15,25,0)
(43,25,0)
(23,35,0)
(37,3,0)
(10,7,0)
(18,33,0)
(26,41,0)
(10,32,0)
(52,4,0)
(16,32,0)
(50,32,0)
(44,32,0)
(4,38,0)
(39,1,0)
(49,12,0)
(12,15,0)
(10,11,0)
(5,15,0)
(28,32,0)
(6,25,0)
(51,25,0)
(23,44,0)
(35,23,0)
(11,13,0)
(12,50,0)
(33,32,0)
(31,43,0)
(27,50,0)
(34,50,0)
(46,41,0)
(2,16,0)
(20,35,0)
(32,25,0)
(29,13,0)
(46,19,0)
(24,13,0)
(45,11,0)
(47,33,0)
(36,10,0)
(1,43,0)
(50,12,0)
(30,16,0)
(47,6,0)
(3,32,0)
(48,11,0)
(6,47,0)
(16,1,0)
(42,23,0)
(41,46,0)
(44,14,1)
(30,3,1)
(12,50,1)
(3,37,1)
(10,32,1)
(20,42,1)
(33,32,1)
(18,21,1)
(9,10,1)
(41,26,1)
(22,32,1)
(46,41,1)
(43,31,1)
(4,52,1)
(48,45,1)
(15,5,1)
(17,6,1)
(5,12,1)
(9,4,1)
(52,17,1)
(1,16,1)
(50,32,1)
(10,11,1)
(16,2,1)
(34,27,1)
(32,44,1)
(10,36,1)
(42,28,1)
(47,33,1)
(21,15,1)
(17,40,1)
(27,43,1)
(40,11,1)
(23,35,1)
(30,46,1)
(1,39,1)
(37,22,1)
(16,32,1)
(26,3,1)
(49,50,1)
(2,30,1)
(50,34,1)
(11,48,1)
(33,18,1)
(35,20,1)
(39,16,1)
(36,17,1)
(6,47,1)
(28,40,1)
(3,32,1)
(44,23,1)
(31,1,1)
(12,49,1)
(42,40,2)
(10,32,2)
(32,44,2)
(5,40,2)
(21,40,2)
(12,50,2)
(33,32,2)
(47,40,2)
(34,40,2)
(15,40,2)
(18,40,2)
(44,23,2)
(1,16,2)
(30,40,2)
(23,40,2)
(46,41,2)
(43,40,2)
(23,35,2)
(20,40,2)
(50,32,2)
(10,11,2)
(12,40,2)
(52,17,2)
(44,14,2)
(32,40,2)
(46,3,2)
(1,40,2)
(16,40,2)
(47,33,2)
(37,40,2)
(36,17,2)
(3,32,2)
(50,40,2)
(10,17,2)
(26,3,2)
(41,3,2)
(31,40,2)
(3,40,2)
(44,40,2)
(6,47,2)
(16,32,2)
(2,40,2)
(4,17,2)
(22,40,2)
(39,40,2)
(27,40,2)
(49,40,2)
(35,40,2)
(33,40,2)
(6,40,2)
(28,40,2)
-----------------------------------
(0,if(STATIC_CONST_FALSE)
(1,data[0].intOne)
(2,0)
(3,data == NULL)
(4,printLine("Benign, fixed string")
(5,0)
(6,printStructLine(&data[0])
(7,)
(8, sizeof(twoIntsStruct)
(9,RET)
(10,free(data)
(11,data = NULL)
(12,data[0].intTwo)
(13,)
(14,twoIntsStruct *)
(15,data[0].intTwo = 0)
(16,data[0])
(17,STATIC_CONST_FALSE)
(18,0)
(19,)
(20,twoIntsStruct)
(21,data)
(22,data)
(23,calloc(100, sizeof(twoIntsStruct)
(24,data)
(25,)
(26,1)
(27,data)
(28,data)
(29,if(STATIC_CONST_TRUE)
(30,data)
(31,0)
(32,data = (twoIntsStruct *)
(33,data[0])
(34,0)
(35,sizeof(twoIntsStruct)
(36,data)
(37,NULL)
(38,)
(39,intOne)
(40,STATIC_CONST_TRUE)
(41,-1)
(42,100)
(43,data[0].intOne = 0)
(44,(twoIntsStruct *)
(45,data)
(46,exit(-1)
(47,&data[0])
(48,NULL)
(49,intTwo)
(50,data[0])
(51,if (data == NULL)
(52,"Benign, fixed string")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^