-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data);
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
18,19
18,20
19,20
21,22
21,23
22,23
24,25
26,27
26,28
27,28
28,29
28,30
30,31
30,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
47,48
47,49
47,50
47,51
48,49
49,50
49,51
50,51
52,53
52,54
53,54
53,55
55,56
57,58
57,59
58,59
60,61
60,62
61,62
63,64
64,65
64,66
67,68
68,69
68,70
68,71
69,70
71,72
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
89,91
90,91
-----nextToken-----
2,4,9,11,15,16,20,23,25,29,31,32,37,40,42,45,46,51,54,56,59,62,65,66,70,72,74,78,80,84,86,91,92
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
35,36
35,37
43,44
43,45
49,50
49,51
60,61
60,62
-----guardedBy-----
42,74
45,62
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data);    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data);    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data);
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data)
data
data
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource
data
data
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(11,5,0)
(29,36,0)
(19,31,0)
(25,26,0)
(38,0,0)
(6,37,0)
(6,26,0)
(13,5,0)
(1,11,0)
(26,0,0)
(14,36,0)
(21,28,0)
(26,25,0)
(2,37,0)
(16,19,0)
(9,8,0)
(17,22,0)
(40,29,0)
(10,29,0)
(20,33,0)
(37,36,0)
(19,36,0)
(8,3,0)
(37,6,0)
(36,3,0)
(29,31,0)
(22,0,0)
(34,8,0)
(0,26,0)
(37,28,0)
(0,35,0)
(23,22,0)
(18,35,0)
(12,19,0)
(15,3,0)
(31,19,0)
(24,27,0)
(18,0,0)
(36,11,0)
(26,6,0)
(7,5,0)
(4,16,0)
(28,37,0)
(33,0,0)
(32,24,0)
(5,3,0)
(33,35,0)
(30,18,0)
(11,36,0)
(31,29,0)
(22,35,0)
(19,16,0)
(33,0,1)
(23,17,1)
(40,10,1)
(18,0,1)
(31,19,1)
(36,11,1)
(14,5,1)
(37,36,1)
(11,1,1)
(32,31,1)
(10,19,1)
(20,18,1)
(39,33,1)
(22,0,1)
(0,26,1)
(2,38,1)
(29,40,1)
(24,32,1)
(38,31,1)
(19,36,1)
(18,30,1)
(37,28,1)
(22,23,1)
(11,5,1)
(26,25,1)
(1,14,1)
(26,6,1)
(5,7,1)
(33,20,1)
(30,22,1)
(16,4,1)
(17,0,1)
(29,36,1)
(28,21,1)
(31,29,1)
(19,16,1)
(39,24,1)
(4,12,1)
(21,2,1)
(6,37,1)
(12,36,1)
(7,13,1)
(0,26,2)
(6,37,2)
(10,19,2)
(22,31,2)
(29,19,2)
(21,31,2)
(36,11,2)
(0,31,2)
(29,36,2)
(26,31,2)
(23,31,2)
(32,31,2)
(18,31,2)
(37,31,2)
(26,6,2)
(24,31,2)
(18,0,2)
(31,29,2)
(19,36,2)
(17,31,2)
(22,0,2)
(38,31,2)
(2,31,2)
(20,31,2)
(31,19,2)
(37,28,2)
(11,5,2)
(33,0,2)
(40,19,2)
(6,31,2)
(33,31,2)
(19,16,2)
(26,25,2)
(28,31,2)
(30,31,2)
(37,36,2)
-----------------------------------
(0,myString = (wchar_t *)
(1,data)
(2,data)
(3,)
(4,HELLO_STRING)
(5,data = 0)
(6,malloc(data*sizeof(wchar_t)
(7,0)
(8,)
(9,if (data > wcslen(HELLO_STRING)
(10,data)
(11,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data)
(12,data)
(13,data)
(14,data)
(15,data)
(16,wcslen(HELLO_STRING)
(17,myString)
(18,printWLine(myString)
(19,data > wcslen(HELLO_STRING)
(20,myString)
(21,wchar_t)
(22,wcscpy(myString, HELLO_STRING)
(23,HELLO_STRING)
(24,printLine("Input is less than the length of the source string or too large")
(25,wchar_t *)
(26,(wchar_t *)
(27,)
(28,sizeof(wchar_t)
(29,data < 100)
(30,myString)
(31,data > wcslen(HELLO_STRING)
(32,"Input is less than the length of the source string or too large")
(33,free(myString)
(34,myString)
(35,)
(36,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fgets_61b_goodB2GSource(data)
(37,data*sizeof(wchar_t)
(38,myString)
(39,RET)
(40,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^