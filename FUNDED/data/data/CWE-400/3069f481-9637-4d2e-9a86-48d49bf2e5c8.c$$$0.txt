-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(globalTrue)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(globalTrue)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
20,21
21,22
22,23
22,24
23,24
26,27
26,28
27,28
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,19,24,25,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
22,23
22,24
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(globalTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(globalTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(globalTrue)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
globalTrue
globalTrue
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(globalTrue)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
globalTrue
globalTrue
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(19,1,0)
(45,14,0)
(42,43,0)
(31,35,0)
(36,19,0)
(15,38,0)
(43,42,0)
(25,33,0)
(48,49,0)
(12,33,0)
(1,19,0)
(19,18,0)
(35,26,0)
(10,49,0)
(21,32,0)
(42,9,0)
(3,20,0)
(43,49,0)
(32,21,0)
(42,11,0)
(18,47,0)
(46,26,0)
(5,37,0)
(27,18,0)
(30,45,0)
(16,45,0)
(33,43,0)
(37,17,0)
(23,39,0)
(0,26,0)
(21,35,0)
(24,1,0)
(37,5,0)
(22,43,0)
(29,21,0)
(4,32,0)
(38,43,0)
(2,18,0)
(33,49,0)
(34,5,0)
(11,42,0)
(10,43,0)
(20,43,0)
(28,23,0)
(41,10,0)
(40,35,0)
(38,49,0)
(7,20,0)
(21,11,0)
(11,21,0)
(13,26,0)
(19,35,0)
(9,42,0)
(21,18,0)
(4,29,1)
(37,5,1)
(33,43,1)
(29,22,1)
(8,6,1)
(10,43,1)
(5,34,1)
(19,1,1)
(20,43,1)
(35,31,1)
(34,20,1)
(8,38,1)
(22,19,1)
(42,9,1)
(21,32,1)
(19,35,1)
(21,35,1)
(8,23,1)
(11,21,1)
(33,12,1)
(25,37,1)
(6,18,1)
(15,10,1)
(20,3,1)
(25,20,1)
(2,27,1)
(31,40,1)
(38,15,1)
(3,7,1)
(28,19,1)
(18,2,1)
(43,42,1)
(36,6,1)
(41,33,1)
(24,36,1)
(12,25,1)
(27,44,1)
(7,43,1)
(32,4,1)
(6,44,1)
(21,18,1)
(1,24,1)
(38,43,1)
(10,41,1)
(44,35,1)
(23,28,1)
(19,18,1)
(42,11,1)
(32,19,2)
(43,42,2)
(23,19,2)
(37,20,2)
(10,19,2)
(7,19,2)
(15,19,2)
(28,19,2)
(19,18,2)
(33,43,2)
(43,19,2)
(21,35,2)
(21,32,2)
(1,6,2)
(2,44,2)
(38,43,2)
(36,6,2)
(5,20,2)
(10,43,2)
(21,18,2)
(20,19,2)
(42,11,2)
(4,19,2)
(21,19,2)
(11,21,2)
(19,35,2)
(20,43,2)
(12,19,2)
(33,19,2)
(42,19,2)
(3,19,2)
(19,6,2)
(42,9,2)
(41,19,2)
(38,19,2)
(18,44,2)
(34,20,2)
(27,44,2)
(22,19,2)
(25,19,2)
(24,6,2)
(19,1,2)
(37,5,2)
(11,19,2)
(29,19,2)
-----------------------------------
(0,data)
(1,strlen(HELLO_STRING)
(2,20)
(3,NULL)
(4,char)
(5,-1)
(6,globalTrue)
(7,myString)
(8,RET)
(9,char *)
(10,printLine(myString)
(11,malloc(data*sizeof(char)
(12,HELLO_STRING)
(13,if(globalTrue)
(14,)
(15,myString)
(16,if (data > strlen(HELLO_STRING)
(17,)
(18,data = 20)
(19,data > strlen(HELLO_STRING)
(20,myString == NULL)
(21,data*sizeof(char)
(22,myString)
(23,printLine("Input is less than the length of the source string")
(24,HELLO_STRING)
(25,myString)
(26,)
(27,data)
(28,"Input is less than the length of the source string")
(29,data)
(30,myString)
(31,0)
(32,sizeof(char)
(33,strcpy(myString, HELLO_STRING)
(34,1)
(35,data = 0)
(36,data)
(37,exit(-1)
(38,free(myString)
(39,)
(40,data)
(41,myString)
(42,(char *)
(43,myString = (char *)
(44,globalTrue)
(45,)
(46,if(globalTrue)
(47,)
(48,if (myString == NULL)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^