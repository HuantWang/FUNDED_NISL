-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_char_07_bad()
{
    if(staticFive==5)
    {
        {
            char * data = (char *)malloc(100*sizeof(char));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            strcpy(data, "A String");
            printLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (char *)realloc(data, (130000)*sizeof(char));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                strcpy(data, "New String");
                printLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_char_07_bad(){    if(staticFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_char_07_bad()
CWE401_Memory_Leak__malloc_realloc_char_07_bad
{    if(staticFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }}
if(staticFive==5)    {        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }    }
{            char * data = (char *)malloc(100*sizeof(char));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            strcpy(data, "A String");            printLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (char *)realloc(data, (130000)*sizeof(char));            if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }        }
char * data = (char *)malloc(100*sizeof(char));
char * data = (char *)malloc(100*sizeof(char));
char
* data = (char *)malloc(100*sizeof(char))
*
data
= (char *)malloc(100*sizeof(char))
(char *)malloc(100*sizeof(char))
char *
char
*
*
malloc(100*sizeof(char))
malloc
malloc
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
data = (char *)realloc(data, (130000)*sizeof(char));
data = (char *)realloc(data, (130000)*sizeof(char))
data
data
(char *)realloc(data, (130000)*sizeof(char))
char *
char
*
*
realloc(data, (130000)*sizeof(char))
realloc
realloc
data
data
(130000)*sizeof(char)
(130000)
130000
sizeof(char)
char
char

if (data != NULL)            {                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                strcpy(data, "New String");                printLine(data);                free(data);            }
strcpy(data, "New String");
strcpy(data, "New String")
strcpy
strcpy
data
data
"New String"
printLine(data);
printLine(data)
printLine
printLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(3,35,0)
(28,29,0)
(32,50,0)
(34,28,0)
(45,39,0)
(30,3,0)
(41,52,0)
(1,28,0)
(31,8,0)
(37,52,0)
(7,47,0)
(19,36,0)
(52,45,0)
(6,45,0)
(20,15,0)
(51,45,0)
(29,28,0)
(35,46,0)
(4,52,0)
(23,20,0)
(41,0,0)
(46,41,0)
(13,15,0)
(24,25,0)
(0,41,0)
(27,36,0)
(40,37,0)
(16,34,0)
(28,34,0)
(29,22,0)
(13,25,0)
(18,22,0)
(22,29,0)
(5,4,0)
(46,35,0)
(43,42,0)
(25,22,0)
(41,46,0)
(17,37,0)
(20,25,0)
(50,25,0)
(44,33,0)
(52,41,0)
(48,35,0)
(11,20,0)
(2,45,0)
(36,25,0)
(43,8,0)
(38,52,0)
(29,52,0)
(35,3,0)
(49,38,0)
(14,33,0)
(12,38,0)
(9,13,0)
(22,18,0)
(38,45,0)
(22,25,0)
(50,15,0)
(8,43,0)
(4,45,0)
(10,52,0)
(25,45,0)
(26,29,0)
(10,33,1)
(5,38,1)
(50,25,1)
(24,4,1)
(22,18,1)
(19,25,1)
(8,31,1)
(13,9,1)
(37,52,1)
(38,49,1)
(41,0,1)
(41,46,1)
(35,3,1)
(29,52,1)
(43,8,1)
(28,34,1)
(11,36,1)
(4,52,1)
(37,40,1)
(20,23,1)
(49,12,1)
(44,14,1)
(26,24,1)
(9,20,1)
(23,11,1)
(17,52,1)
(30,48,1)
(12,37,1)
(46,35,1)
(29,28,1)
(40,17,1)
(1,26,1)
(33,44,1)
(25,22,1)
(12,43,1)
(52,41,1)
(22,29,1)
(34,16,1)
(16,1,1)
(21,50,1)
(21,33,1)
(50,32,1)
(4,5,1)
(13,25,1)
(27,19,1)
(20,25,1)
(48,10,1)
(32,13,1)
(36,25,1)
(21,36,1)
(36,27,1)
(31,37,1)
(3,30,1)
(38,52,1)
(25,33,2)
(35,3,2)
(37,33,2)
(32,36,2)
(11,36,2)
(29,33,2)
(38,52,2)
(16,33,2)
(5,33,2)
(31,37,2)
(36,33,2)
(19,33,2)
(41,46,2)
(30,33,2)
(20,25,2)
(46,33,2)
(52,41,2)
(35,33,2)
(10,33,2)
(9,36,2)
(49,33,2)
(29,28,2)
(13,36,2)
(46,35,2)
(28,33,2)
(50,25,2)
(41,33,2)
(3,33,2)
(43,37,2)
(23,36,2)
(26,33,2)
(50,36,2)
(28,34,2)
(17,33,2)
(12,33,2)
(48,33,2)
(38,33,2)
(43,8,2)
(22,29,2)
(37,52,2)
(40,33,2)
(8,37,2)
(22,33,2)
(1,33,2)
(41,0,2)
(20,36,2)
(29,52,2)
(13,25,2)
(34,33,2)
(36,25,2)
(4,33,2)
(52,33,2)
(4,52,2)
(25,22,2)
(27,33,2)
(22,18,2)
(24,33,2)
-----------------------------------
(0,char *)
(1,130000)
(2,if (data != NULL)
(3,sizeof(char)
(4,printLine(data)
(5,data)
(6,if (data == NULL)
(7,if(staticFive==5)
(8,-1)
(9,data)
(10,data)
(11,data)
(12,data)
(13,printLine(data)
(14,staticFive)
(15,)
(16,char)
(17,data)
(18,char *)
(19,data)
(20,strcpy(data, "New String")
(21,RET)
(22,(char *)
(23,"New String")
(24,data)
(25,data = (char *)
(26,data)
(27,NULL)
(28,(130000)
(29,realloc(data, (130000)
(30,char)
(31,1)
(32,data)
(33,staticFive==5)
(34,sizeof(char)
(35,100*sizeof(char)
(36,data != NULL)
(37,data == NULL)
(38,strcpy(data, "A String")
(39,)
(40,NULL)
(41,(char *)
(42,)
(43,exit(-1)
(44,5)
(45,)
(46,malloc(100*sizeof(char)
(47,)
(48,100)
(49,"A String")
(50,free(data)
(51,data)
(52,* data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^