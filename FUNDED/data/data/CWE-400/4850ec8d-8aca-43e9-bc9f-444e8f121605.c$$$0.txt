-----label-----
1
-----code-----
static int64_t compac_scanwork(struct thr_info *thr)
{
	struct cgpu_info *compac = thr->cgpu;
	struct COMPAC_INFO *info = compac->device_data;
	struct timeval now;

	int read_bytes = 1;
	int i, cpu_yield;
	float frequency;
	uint64_t hashes = 0;
	uint32_t err = 0;
	uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;
	uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);

	if (compac->usbinfo.nodev)
		return -1;

	if (!info->chips) {
		usb_nodev(compac);
		return -1;
	}

	if (info->ramping < RAMP_CT)
		max_task_wait = RAMP_MS;

	hashes = info->hashes;
	info->hashes -= hashes;

	cgtime(&now);
	info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;
	cgtime(&info->last_scanhash);

	if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {
		if (info->failing) {
			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {
				applog(LOG_ERR, "%s %d: Device failed to respond to restart",
					   compac->drv->name, compac->device_id);
				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)
					usb_nodev(compac);
				return -1;
			}
		} else {
			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",
				   compac->drv->name, compac->device_id);
			usb_reset(compac);
			info->failing = true;
			return 0;
		}
	}

	if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {

		info->job_id = (info->job_id + 1) % MAX_JOBS;

		if (info->update_work) {
			mutex_lock(&info->lock);
			for (i = 0; i < MAX_JOBS; i++) {
				if (info->work[i])
					free_work(info->work[i]);
				info->work[i] = NULL;
			}
			mutex_unlock(&info->lock);
			info->update_work = 0;
		}

		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {
			free_work(info->work[info->job_id]);
			info->work[info->job_id] = NULL;
		}

		if (!info->work[info->job_id]) {
			info->work[info->job_id] = get_work(thr, thr->id);
		} else {
			info->work[info->job_id]->drv_rolllimit--;
			roll_work(info->work[info->job_id]);
		}

		if (info->ramping < RAMP_CT) {
			info->ramping++;
			info->ramp_hcn += hcn_max / RAMP_CT;
			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);

			cgtime(&info->last_nonce);
		} else {
			info->nonceless++;
			info->active = true;
			info->ramp_hcn = (0xffffffff / info->chips);
		}

		init_task(info);

		frequency = info->frequency;
		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {
			frequency += 25;
		}
		if (frequency != info->frequency)
			compac_set_frequency(compac, frequency, true);

		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {
			info->dups = 0;
			compac_send_chain_inactive(compac);
		}

		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);
		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {
			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);
			info->write_err++;
		} else {
			info->write_err = 0;
		}

		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;
		cgtime(&info->last_task);
	}

	cpu_yield = bound(max_task_wait / 20, 1, 100);
	cgsleep_ms(cpu_yield);

	if (compac->shutdown)
		compac_set_frequency(compac, info->frequency_start, false);

	return hashes;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
9,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
12,25
12,26
12,27
12,28
12,29
12,30
12,31
12,32
12,33
12,34
12,35
12,36
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
21,23
22,23
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
33,35
34,35
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
46,47
46,48
48,49
50,51
51,52
51,53
51,54
53,54
55,56
57,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
84,85
85,86
85,87
86,87
86,88
87,88
87,89
88,89
91,92
94,95
95,96
95,97
96,97
98,99
98,100
100,101
101,102
101,103
101,104
101,105
102,103
104,105
104,106
105,106
105,107
106,107
112,113
112,114
113,114
113,115
114,115
114,116
115,116
119,120
120,121
122,123
122,124
123,124
124,125
124,126
125,126
128,129
128,130
129,130
130,131
130,132
131,132
133,134
135,136
136,137
138,139
138,140
139,140
139,141
140,141
140,142
141,142
144,145
146,147
147,148
147,149
148,149
150,151
152,153
153,154
153,155
154,155
156,157
156,158
157,158
160,161
161,162
161,163
162,163
162,164
163,164
166,167
168,169
169,170
169,171
170,171
172,173
173,174
175,176
176,177
176,178
177,178
177,179
178,179
181,182
181,183
182,183
183,184
183,185
184,185
184,186
185,186
185,187
186,187
190,191
190,192
190,193
191,192
193,194
194,195
196,197
197,198
197,199
198,199
202,203
203,204
203,205
204,205
206,207
207,208
207,209
208,209
211,212
211,213
212,213
212,214
213,214
213,215
214,215
217,218
218,219
218,220
219,220
219,221
220,221
223,224
225,226
226,227
226,228
226,229
227,228
227,229
228,229
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
238,239
239,240
239,241
240,241
240,242
241,242
241,243
243,244
246,247
248,249
248,250
248,251
249,250
250,251
250,252
250,253
250,254
250,255
251,252
253,254
256,257
256,258
257,258
257,259
258,259
262,263
262,264
263,264
266,267
266,268
267,268
267,269
268,269
268,270
269,270
269,271
270,271
273,274
275,276
275,277
276,277
276,278
277,278
280,281
282,283
283,284
283,285
284,285
286,287
288,289
289,290
291,292
291,293
291,294
291,295
292,293
293,294
293,295
293,296
293,297
293,298
294,295
296,297
299,300
299,301
300,301
300,302
301,302
305,306
305,307
306,307
309,310
310,311
310,312
311,312
313,314
315,316
316,317
316,318
317,318
317,319
318,319
322,323
324,325
324,326
325,326
325,327
326,327
326,328
327,328
330,331
331,332
331,333
332,333
332,334
332,335
333,334
335,336
336,337
338,339
339,340
339,341
340,341
343,344
345,346
345,347
345,348
345,349
345,350
345,351
345,352
345,353
345,354
345,355
345,356
345,357
345,358
345,359
346,347
347,348
347,349
348,349
348,350
349,350
352,353
352,354
353,354
354,355
354,356
355,356
355,357
356,357
360,361
362,363
362,364
363,364
363,365
364,365
367,368
367,369
367,370
367,371
368,369
369,370
369,371
370,371
372,373
373,374
373,375
374,375
377,378
377,379
377,380
377,381
378,379
379,380
379,381
380,381
383,384
383,385
384,385
386,387
388,389
389,390
391,392
391,393
392,393
392,394
393,394
393,395
394,395
394,396
395,396
398,399
400,401
401,402
401,403
402,403
404,405
404,406
405,406
405,407
406,407
409,410
411,412
412,413
412,414
413,414
413,415
414,415
414,416
415,416
418,419
420,421
422,423
423,424
423,425
424,425
426,427
427,428
427,429
428,429
431,432
432,433
432,434
433,434
433,435
434,435
438,439
438,440
439,440
439,441
440,441
440,442
441,442
441,443
442,443
445,446
445,447
446,447
449,450
449,451
450,451
450,452
451,452
451,453
452,453
452,454
453,454
456,457
456,458
457,458
462,463
462,464
463,464
464,465
464,466
465,466
467,468
467,469
468,469
468,470
469,470
472,473
472,474
473,474
476,477
477,478
477,479
478,479
478,480
479,480
479,481
480,481
483,484
483,485
484,485
487,488
489,490
489,491
489,492
490,491
491,492
491,493
492,493
492,494
493,494
496,497
496,498
497,498
500,501
501,502
502,503
502,504
503,504
503,505
504,505
504,506
505,506
508,509
508,510
509,510
512,513
512,514
512,515
513,514
515,516
517,518
517,519
518,519
521,522
521,523
522,523
523,524
524,525
524,526
525,526
525,527
526,527
526,528
527,528
530,531
530,532
531,532
535,536
536,537
536,538
537,538
539,540
539,541
540,541
540,542
541,542
544,545
544,546
545,546
548,549
548,550
548,551
549,550
549,551
550,551
550,552
551,552
554,555
556,557
556,558
556,559
556,560
557,558
558,559
559,560
559,561
560,561
563,564
564,565
564,566
565,566
565,567
566,567
569,570
569,571
570,571
572,573
574,575
575,576
575,577
576,577
576,578
577,578
580,581
580,582
580,583
580,584
581,582
583,584
583,585
584,585
589,590
590,591
590,592
591,592
593,594
594,595
594,596
595,596
598,599
598,600
598,601
599,600
600,601
601,602
601,603
602,603
605,606
606,607
606,608
607,608
607,609
608,609
612,613
613,614
613,615
614,615
614,616
615,616
618,619
619,620
619,621
621,622
621,623
622,623
625,626
626,627
626,628
627,628
629,630
631,632
632,633
632,634
633,634
635,636
635,637
636,637
639,640
639,641
640,641
640,642
641,642
641,643
642,643
642,644
643,644
646,647
646,648
647,648
650,651
650,652
651,652
651,653
651,654
652,653
654,655
655,656
657,658
658,659
658,660
659,660
662,663
662,664
665,666
666,667
667,668
667,669
668,669
671,672
671,673
672,673
672,674
673,674
675,676
675,677
676,677
679,680
680,681
680,682
680,683
680,684
681,682
683,684
685,686
688,689
688,690
689,690
689,691
690,691
690,692
691,692
691,693
692,693
692,694
693,694
697,698
697,699
698,699
701,702
701,703
702,703
702,704
702,705
703,704
705,706
706,707
708,709
709,710
709,711
710,711
714,715
714,716
715,716
716,717
716,718
717,718
717,719
718,719
722,723
723,724
723,725
724,725
726,727
728,729
729,730
729,731
730,731
732,733
732,734
732,735
732,736
732,737
732,738
733,734
735,736
737,738
737,739
738,739
738,740
740,741
742,743
742,744
743,744
746,747
748,749
749,750
751,752
753,754
753,755
753,756
754,755
754,756
755,756
755,757
756,757
758,759
760,761
760,762
761,762
763,764
765,766
765,767
766,767
767,768
767,769
767,770
767,771
767,772
768,769
770,771
773,774
773,775
774,775
774,776
775,776
779,780
779,781
780,781
783,784
784,785
785,786
785,787
786,787
789,790
790,791
791,792
791,793
792,793
792,794
793,794
797,798
798,799
798,800
799,800
799,801
800,801
803,804
803,805
804,805
805,806
805,807
806,807
806,808
807,808
807,809
808,809
812,813
812,814
812,815
813,814
815,816
816,817
818,819
819,820
819,821
820,821
824,825
825,826
825,827
826,827
828,829
829,830
829,831
830,831
833,834
834,835
834,836
835,836
837,838
837,839
837,840
837,841
838,839
840,841
840,842
841,842
846,847
847,848
847,849
848,849
850,851
852,853
852,854
853,854
853,855
854,855
857,858
858,859
858,860
858,861
858,862
859,860
861,862
863,864
863,865
864,865
868,869
869,870
-----nextToken-----

-----computeFrom-----
85,86
85,87
86,87
86,88
104,105
104,106
139,140
139,141
147,148
147,149
153,154
153,155
161,162
161,163
176,177
176,178
181,182
181,183
183,184
183,185
184,185
184,186
212,213
212,214
218,219
218,220
219,220
219,221
233,234
233,235
239,240
239,241
240,241
240,242
241,242
241,243
267,268
267,269
268,269
268,270
275,276
275,277
316,317
316,318
325,326
325,327
331,332
331,333
347,348
347,349
352,353
352,354
354,355
354,356
379,380
379,381
383,384
383,385
412,413
412,414
432,433
432,434
439,440
439,441
449,450
449,451
477,478
477,479
502,503
502,504
549,550
549,551
564,565
564,566
569,570
569,571
575,576
575,577
606,607
606,608
613,614
613,615
619,620
619,621
632,633
632,634
640,641
640,642
641,642
641,643
650,651
650,652
662,663
662,664
667,668
667,669
672,673
672,674
689,690
689,691
690,691
690,692
691,692
691,693
701,702
701,703
716,717
716,718
729,730
729,731
754,755
754,756
755,756
755,757
760,761
760,762
791,792
791,793
798,799
798,800
803,804
803,805
805,806
805,807
806,807
806,808
834,835
834,836
840,841
840,842
-----guardedBy-----
216,237
224,247
221,244
215,319
236,278
329,436
337,817
334,814
342,832
341,831
455,482
459,486
458,485
553,562
555,573
552,596
645,669
678,686
695,720
711,719
-----guardedByNegation-----
552,623
-----lastLexicalUse-----
552,623
-----jump-----
552,623
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int64_t compac_scanwork(struct thr_info *thr){	struct cgpu_info *compac = thr->cgpu;	struct COMPAC_INFO *info = compac->device_data;	struct timeval now;	int read_bytes = 1;	int i, cpu_yield;	float frequency;	uint64_t hashes = 0;	uint32_t err = 0;	uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;	uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);	if (compac->usbinfo.nodev)		return -1;	if (!info->chips) {		usb_nodev(compac);		return -1;	}	if (info->ramping < RAMP_CT)		max_task_wait = RAMP_MS;	hashes = info->hashes;	info->hashes -= hashes;	cgtime(&now);	info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;	cgtime(&info->last_scanhash);	if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}	if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);			info->write_err++;		} else {			info->write_err = 0;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}	cpu_yield = bound(max_task_wait / 20, 1, 100);	cgsleep_ms(cpu_yield);	if (compac->shutdown)		compac_set_frequency(compac, info->frequency_start, false);	return hashes;}
static int64_t
int64_t
compac_scanwork(struct thr_info *thr)
compac_scanwork
struct thr_info *thr
struct thr_info
thr_info
*thr
*
thr
{	struct cgpu_info *compac = thr->cgpu;	struct COMPAC_INFO *info = compac->device_data;	struct timeval now;	int read_bytes = 1;	int i, cpu_yield;	float frequency;	uint64_t hashes = 0;	uint32_t err = 0;	uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;	uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);	if (compac->usbinfo.nodev)		return -1;	if (!info->chips) {		usb_nodev(compac);		return -1;	}	if (info->ramping < RAMP_CT)		max_task_wait = RAMP_MS;	hashes = info->hashes;	info->hashes -= hashes;	cgtime(&now);	info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;	cgtime(&info->last_scanhash);	if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}	if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);			info->write_err++;		} else {			info->write_err = 0;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}	cpu_yield = bound(max_task_wait / 20, 1, 100);	cgsleep_ms(cpu_yield);	if (compac->shutdown)		compac_set_frequency(compac, info->frequency_start, false);	return hashes;}
struct cgpu_info *compac = thr->cgpu;
struct cgpu_info *compac = thr->cgpu;
struct cgpu_info
cgpu_info
*compac = thr->cgpu
*
compac
= thr->cgpu
thr->cgpu
thr
thr
cgpu
struct COMPAC_INFO *info = compac->device_data;
struct COMPAC_INFO *info = compac->device_data;
struct COMPAC_INFO
COMPAC_INFO
*info = compac->device_data
*
info
= compac->device_data
compac->device_data
compac
compac
device_data
struct timeval now;
struct timeval now;
struct timeval
timeval
now
now
int read_bytes = 1;
int read_bytes = 1;
int
read_bytes = 1
read_bytes
= 1
1
int i, cpu_yield;
int i, cpu_yield;
int
i
i
cpu_yield
cpu_yield
float frequency;
float frequency;
float
frequency
frequency
uint64_t hashes = 0;
uint64_t hashes = 0;
uint64_t
uint64_t
hashes = 0
hashes
= 0
0
uint32_t err = 0;
uint32_t err = 0;
uint32_t
uint32_t
err = 0
err
= 0
0
uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;
uint32_t hcn_max = info->hashrate * RAMP_MS / 1000;
uint32_t
uint32_t
hcn_max = info->hashrate * RAMP_MS / 1000
hcn_max
= info->hashrate * RAMP_MS / 1000
info->hashrate * RAMP_MS / 1000
info->hashrate * RAMP_MS
info->hashrate
info
info
hashrate
RAMP_MS
RAMP_MS
1000
uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);
uint32_t max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000);
uint32_t
uint32_t
max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000)
max_task_wait
= bound(info->fullscan_ms * 0.40, 5, 1000)
bound(info->fullscan_ms * 0.40, 5, 1000)
bound
bound
info->fullscan_ms * 0.40
info->fullscan_ms
info
info
fullscan_ms
0.40
5
1000
if (compac->usbinfo.nodev)		return -1;
compac->usbinfo.nodev
compac->usbinfo
compac
compac
usbinfo
nodev
return -1;
-1
1
if (!info->chips) {		usb_nodev(compac);		return -1;	}
!info->chips
info->chips
info
info
chips
{		usb_nodev(compac);		return -1;	}
usb_nodev(compac);
usb_nodev(compac)
usb_nodev
usb_nodev
compac
compac
return -1;
-1
1
if (info->ramping < RAMP_CT)		max_task_wait = RAMP_MS;
info->ramping < RAMP_CT
info->ramping
info
info
ramping
RAMP_CT
RAMP_CT
max_task_wait = RAMP_MS;
max_task_wait = RAMP_MS
max_task_wait
max_task_wait
RAMP_MS
RAMP_MS
hashes = info->hashes;
hashes = info->hashes
hashes
hashes
info->hashes
info
info
hashes
info->hashes -= hashes;
info->hashes -= hashes
info->hashes
info
info
hashes
hashes
hashes
cgtime(&now);
cgtime(&now)
cgtime
cgtime
&now
now
now
info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10;
info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10
info->scanhash_ms
info
info
scanhash_ms
(info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)) / 10
(info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash))
info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
info->scanhash_ms * 9
info->scanhash_ms
info
info
scanhash_ms
9
ms_tdiff(&now, &info->last_scanhash)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_scanhash
info->last_scanhash
info
info
last_scanhash
10
cgtime(&info->last_scanhash);
cgtime(&info->last_scanhash)
cgtime
cgtime
&info->last_scanhash
info->last_scanhash
info
info
last_scanhash
if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)) {		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}
info->nonceless > (MAX_IDLE * 1000 / max_task_wait)
info->nonceless
info
info
nonceless
(MAX_IDLE * 1000 / max_task_wait)
MAX_IDLE * 1000 / max_task_wait
MAX_IDLE * 1000
MAX_IDLE
MAX_IDLE
1000
max_task_wait
max_task_wait
{		if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}	}
if (info->failing) {			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}		} else {			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}
info->failing
info
info
failing
{			if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}		}
if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)) {				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}
info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)
info->nonceless
info
info
nonceless
(2 * MAX_IDLE * 1000 / max_task_wait)
2 * MAX_IDLE * 1000 / max_task_wait
2 * MAX_IDLE * 1000
2 * MAX_IDLE
2
MAX_IDLE
MAX_IDLE
1000
max_task_wait
max_task_wait
{				applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);				if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);				return -1;			}
applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id);
applog(LOG_ERR, "%s %d: Device failed to respond to restart",					   compac->drv->name, compac->device_id)
applog
applog
LOG_ERR
LOG_ERR
"%s %d: Device failed to respond to restart"
compac->drv->name
compac->drv
compac
compac
drv
name
compac->device_id
compac
compac
device_id
if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)					usb_nodev(compac);
info->ident != IDENT_BSC && info->ident != IDENT_GSC
info->ident != IDENT_BSC
info->ident
info
info
ident
IDENT_BSC
IDENT_BSC
info->ident != IDENT_GSC
info->ident
info
info
ident
IDENT_GSC
IDENT_GSC
usb_nodev(compac);
usb_nodev(compac)
usb_nodev
usb_nodev
compac
compac
return -1;
-1
1
{			applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);			usb_reset(compac);			info->failing = true;			return 0;		}
applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id);
applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",				   compac->drv->name, compac->device_id)
applog
applog
LOG_WARNING
LOG_WARNING
"%s %d: No valid hashes recently, attempting to reset"
compac->drv->name
compac->drv
compac
compac
drv
name
compac->device_id
compac
compac
device_id
usb_reset(compac);
usb_reset(compac)
usb_reset
usb_reset
compac
compac
info->failing = true;
info->failing = true
info->failing
info
info
failing
true
return 0;
0
if (info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)) {		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);			info->write_err++;		} else {			info->write_err = 0;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}
info->update_work || (ms_tdiff(&now, &info->last_task) > max_task_wait)
info->update_work
info
info
update_work
(ms_tdiff(&now, &info->last_task) > max_task_wait)
ms_tdiff(&now, &info->last_task) > max_task_wait
ms_tdiff(&now, &info->last_task)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_task
info->last_task
info
info
last_task
max_task_wait
max_task_wait
{		info->job_id = (info->job_id + 1) % MAX_JOBS;		if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}		if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}		if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}		if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}		init_task(info);		frequency = info->frequency;		if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}		if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);		if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}		err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);		if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);			info->write_err++;		} else {			info->write_err = 0;		}		info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;		cgtime(&info->last_task);	}
info->job_id = (info->job_id + 1) % MAX_JOBS;
info->job_id = (info->job_id + 1) % MAX_JOBS
info->job_id
info
info
job_id
(info->job_id + 1) % MAX_JOBS
(info->job_id + 1)
info->job_id + 1
info->job_id
info
info
job_id
1
MAX_JOBS
MAX_JOBS
if (info->update_work) {			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}
info->update_work
info
info
update_work
{			mutex_lock(&info->lock);			for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}			mutex_unlock(&info->lock);			info->update_work = 0;		}
mutex_lock(&info->lock);
mutex_lock(&info->lock)
mutex_lock
mutex_lock
&info->lock
info->lock
info
info
lock
for (i = 0; i < MAX_JOBS; i++) {				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}
i = 0;
i = 0
i
i
0
i < MAX_JOBS
i
i
MAX_JOBS
MAX_JOBS
i++
i
i
{				if (info->work[i])					free_work(info->work[i]);				info->work[i] = NULL;			}
if (info->work[i])					free_work(info->work[i]);
info->work[i]
info->work
info
info
work
i
i
free_work(info->work[i]);
free_work(info->work[i])
free_work
free_work
info->work[i]
info->work
info
info
work
i
i
info->work[i] = NULL;
info->work[i] = NULL
info->work[i]
info->work
info
info
work
i
i
NULL
NULL
mutex_unlock(&info->lock);
mutex_unlock(&info->lock)
mutex_unlock
mutex_unlock
&info->lock
info->lock
info
info
lock
info->update_work = 0;
info->update_work = 0
info->update_work
info
info
update_work
0
if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0) {			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}
info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
info->work[info->job_id]->drv_rolllimit == 0
info->work[info->job_id]->drv_rolllimit
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
drv_rolllimit
0
{			free_work(info->work[info->job_id]);			info->work[info->job_id] = NULL;		}
free_work(info->work[info->job_id]);
free_work(info->work[info->job_id])
free_work
free_work
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
info->work[info->job_id] = NULL;
info->work[info->job_id] = NULL
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
NULL
NULL
if (!info->work[info->job_id]) {			info->work[info->job_id] = get_work(thr, thr->id);		} else {			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}
!info->work[info->job_id]
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
{			info->work[info->job_id] = get_work(thr, thr->id);		}
info->work[info->job_id] = get_work(thr, thr->id);
info->work[info->job_id] = get_work(thr, thr->id)
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
get_work(thr, thr->id)
get_work
get_work
thr
thr
thr->id
thr
thr
id
{			info->work[info->job_id]->drv_rolllimit--;			roll_work(info->work[info->job_id]);		}
info->work[info->job_id]->drv_rolllimit--;
info->work[info->job_id]->drv_rolllimit--
info->work[info->job_id]->drv_rolllimit
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
drv_rolllimit
roll_work(info->work[info->job_id]);
roll_work(info->work[info->job_id])
roll_work
roll_work
info->work[info->job_id]
info->work
info
info
work
info->job_id
info
info
job_id
if (info->ramping < RAMP_CT) {			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		} else {			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}
info->ramping < RAMP_CT
info->ramping
info
info
ramping
RAMP_CT
RAMP_CT
{			info->ramping++;			info->ramp_hcn += hcn_max / RAMP_CT;			info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);			cgtime(&info->last_nonce);		}
info->ramping++;
info->ramping++
info->ramping
info
info
ramping
info->ramp_hcn += hcn_max / RAMP_CT;
info->ramp_hcn += hcn_max / RAMP_CT
info->ramp_hcn
info
info
ramp_hcn
hcn_max / RAMP_CT
hcn_max
hcn_max
RAMP_CT
RAMP_CT
info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff);
info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff)
info->ramp_hcn
info
info
ramp_hcn
bound(info->ramp_hcn, 0, 0xffffffff)
bound
bound
info->ramp_hcn
info
info
ramp_hcn
0
0xffffffff
cgtime(&info->last_nonce);
cgtime(&info->last_nonce)
cgtime
cgtime
&info->last_nonce
info->last_nonce
info
info
last_nonce
{			info->nonceless++;			info->active = true;			info->ramp_hcn = (0xffffffff / info->chips);		}
info->nonceless++;
info->nonceless++
info->nonceless
info
info
nonceless
info->active = true;
info->active = true
info->active
info
info
active
true
info->ramp_hcn = (0xffffffff / info->chips);
info->ramp_hcn = (0xffffffff / info->chips)
info->ramp_hcn
info
info
ramp_hcn
(0xffffffff / info->chips)
0xffffffff / info->chips
0xffffffff
info->chips
info
info
chips
init_task(info);
init_task(info)
init_task
init_task
info
info
frequency = info->frequency;
frequency = info->frequency
frequency
frequency
info->frequency
info
info
frequency
if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000) {			frequency += 25;		}
info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set) > 9 * 1000
info->frequency != info->frequency_requested
info->frequency
info
info
frequency
info->frequency_requested
info
info
frequency_requested
ms_tdiff(&now, &info->last_freq_set) > 9 * 1000
ms_tdiff(&now, &info->last_freq_set)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_freq_set
info->last_freq_set
info
info
last_freq_set
9 * 1000
9
1000
{			frequency += 25;		}
frequency += 25;
frequency += 25
frequency
frequency
25
if (frequency != info->frequency)			compac_set_frequency(compac, frequency, true);
frequency != info->frequency
frequency
frequency
info->frequency
info
info
frequency
compac_set_frequency(compac, frequency, true);
compac_set_frequency(compac, frequency, true)
compac_set_frequency
compac_set_frequency
compac
compac
frequency
frequency
true
if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000) {			info->dups = 0;			compac_send_chain_inactive(compac);		}
info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive) > 3000
info->dups * 2 >= info->chips
info->dups * 2
info->dups
info
info
dups
2
info->chips
info
info
chips
ms_tdiff(&now, &info->last_chain_inactive) > 3000
ms_tdiff(&now, &info->last_chain_inactive)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_chain_inactive
info->last_chain_inactive
info
info
last_chain_inactive
3000
{			info->dups = 0;			compac_send_chain_inactive(compac);		}
info->dups = 0;
info->dups = 0
info->dups
info
info
dups
0
compac_send_chain_inactive(compac);
compac_send_chain_inactive(compac)
compac_send_chain_inactive
compac_send_chain_inactive
compac
compac
err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK);
err = usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK)
err
err
usb_write(compac, (char *)info->work_tx, TX_TASK_SIZE, &read_bytes, C_SENDWORK)
usb_write
usb_write
compac
compac
(char *)info->work_tx
char *
char
*
*
info->work_tx
info
info
work_tx
TX_TASK_SIZE
TX_TASK_SIZE
&read_bytes
read_bytes
read_bytes
C_SENDWORK
C_SENDWORK
if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE) {			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);			info->write_err++;		} else {			info->write_err = 0;		}
err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE
err != LIBUSB_SUCCESS
err
err
LIBUSB_SUCCESS
LIBUSB_SUCCESS
read_bytes != TX_TASK_SIZE
read_bytes
read_bytes
TX_TASK_SIZE
TX_TASK_SIZE
{			applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);			info->write_err++;		}
applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id);
applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id)
applog
applog
LOG_INFO
LOG_INFO
"%s %d: Write error"
compac->drv->name
compac->drv
compac
compac
drv
name
compac->device_id
compac
compac
device_id
info->write_err++;
info->write_err++
info->write_err
info
info
write_err
{			info->write_err = 0;		}
info->write_err = 0;
info->write_err = 0
info->write_err
info
info
write_err
0
info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10;
info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10
info->task_ms
info
info
task_ms
(info->task_ms * 9 + ms_tdiff(&now, &info->last_task)) / 10
(info->task_ms * 9 + ms_tdiff(&now, &info->last_task))
info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
info->task_ms * 9
info->task_ms
info
info
task_ms
9
ms_tdiff(&now, &info->last_task)
ms_tdiff
ms_tdiff
&now
now
now
&info->last_task
info->last_task
info
info
last_task
10
cgtime(&info->last_task);
cgtime(&info->last_task)
cgtime
cgtime
&info->last_task
info->last_task
info
info
last_task
cpu_yield = bound(max_task_wait / 20, 1, 100);
cpu_yield = bound(max_task_wait / 20, 1, 100)
cpu_yield
cpu_yield
bound(max_task_wait / 20, 1, 100)
bound
bound
max_task_wait / 20
max_task_wait
max_task_wait
20
1
100
cgsleep_ms(cpu_yield);
cgsleep_ms(cpu_yield)
cgsleep_ms
cgsleep_ms
cpu_yield
cpu_yield
if (compac->shutdown)		compac_set_frequency(compac, info->frequency_start, false);
compac->shutdown
compac
compac
shutdown
compac_set_frequency(compac, info->frequency_start, false);
compac_set_frequency(compac, info->frequency_start, false)
compac_set_frequency
compac_set_frequency
compac
compac
info->frequency_start
info
info
frequency_start
false
return hashes;
hashes
hashes
-----joern-----
(25,135,0)
(402,291,0)
(246,260,0)
(186,412,0)
(500,442,0)
(185,552,0)
(419,410,0)
(321,30,0)
(484,138,0)
(266,306,0)
(391,465,0)
(274,407,0)
(120,465,0)
(365,184,0)
(518,369,0)
(389,300,0)
(375,392,0)
(311,486,0)
(319,465,0)
(66,161,0)
(324,465,0)
(325,468,0)
(484,253,0)
(91,168,0)
(501,560,0)
(267,71,0)
(245,512,0)
(326,546,0)
(157,93,0)
(233,347,0)
(416,222,0)
(222,151,0)
(370,400,0)
(79,97,0)
(552,185,0)
(251,438,0)
(227,210,0)
(16,199,0)
(214,306,0)
(179,4,0)
(427,216,0)
(517,453,0)
(325,151,0)
(533,31,0)
(416,167,0)
(208,198,0)
(217,337,0)
(543,448,0)
(264,490,0)
(335,538,0)
(44,88,0)
(151,465,0)
(138,200,0)
(420,510,0)
(15,346,0)
(405,151,0)
(477,151,0)
(36,291,0)
(313,512,0)
(383,330,0)
(12,391,0)
(213,58,0)
(309,130,0)
(479,306,0)
(331,357,0)
(317,43,0)
(263,57,0)
(495,519,0)
(320,84,0)
(434,198,0)
(163,401,0)
(378,419,0)
(258,355,0)
(238,81,0)
(125,465,0)
(492,490,0)
(87,438,0)
(34,513,0)
(502,17,0)
(187,526,0)
(278,88,0)
(202,219,0)
(406,197,0)
(108,42,0)
(21,151,0)
(68,438,0)
(128,292,0)
(387,151,0)
(192,151,0)
(185,319,0)
(132,161,0)
(228,248,0)
(432,42,0)
(330,0,0)
(526,292,0)
(527,453,0)
(235,135,0)
(476,510,0)
(301,46,0)
(155,17,0)
(397,85,0)
(139,199,0)
(514,311,0)
(255,418,0)
(72,43,0)
(495,284,0)
(542,59,0)
(441,130,0)
(353,395,0)
(353,263,0)
(46,151,0)
(425,62,0)
(283,552,0)
(61,304,0)
(522,251,0)
(475,281,0)
(260,151,0)
(195,76,0)
(392,386,0)
(164,512,0)
(78,36,0)
(424,151,0)
(435,151,0)
(482,465,0)
(198,208,0)
(456,306,0)
(360,151,0)
(360,298,0)
(356,413,0)
(404,253,0)
(222,329,0)
(6,186,0)
(304,61,0)
(57,263,0)
(60,524,0)
(121,120,0)
(477,398,0)
(302,356,0)
(285,224,0)
(29,465,0)
(485,85,0)
(537,106,0)
(98,167,0)
(203,202,0)
(308,237,0)
(225,248,0)
(558,449,0)
(5,336,0)
(127,518,0)
(442,151,0)
(50,323,0)
(411,89,0)
(452,151,0)
(388,278,0)
(452,289,0)
(101,151,0)
(366,195,0)
(75,306,0)
(144,35,0)
(268,413,0)
(405,432,0)
(9,196,0)
(331,346,0)
(290,427,0)
(76,195,0)
(138,484,0)
(314,47,0)
(455,465,0)
(512,245,0)
(166,291,0)
(343,151,0)
(118,300,0)
(251,532,0)
(152,465,0)
(469,465,0)
(112,110,0)
(49,148,0)
(164,193,0)
(299,337,0)
(104,286,0)
(97,79,0)
(431,328,0)
(263,144,0)
(53,542,0)
(513,34,0)
(394,0,0)
(322,413,0)
(238,318,0)
(400,151,0)
(454,551,0)
(538,32,0)
(369,518,0)
(342,551,0)
(75,117,0)
(340,306,0)
(87,400,0)
(157,84,0)
(470,201,0)
(353,360,0)
(51,91,0)
(531,7,0)
(412,164,0)
(19,546,0)
(80,527,0)
(329,465,0)
(231,52,0)
(145,232,0)
(34,197,0)
(172,473,0)
(421,373,0)
(227,237,0)
(224,285,0)
(247,4,0)
(297,89,0)
(252,306,0)
(94,304,0)
(246,219,0)
(62,32,0)
(253,404,0)
(315,347,0)
(45,193,0)
(65,45,0)
(363,465,0)
(281,468,0)
(392,478,0)
(419,353,0)
(426,101,0)
(204,325,0)
(524,352,0)
(341,82,0)
(295,371,0)
(149,336,0)
(393,223,0)
(305,71,0)
(245,272,0)
(87,507,0)
(410,419,0)
(482,100,0)
(489,222,0)
(220,88,0)
(165,385,0)
(332,383,0)
(478,291,0)
(506,387,0)
(532,151,0)
(130,441,0)
(82,515,0)
(376,31,0)
(346,214,0)
(190,465,0)
(466,6,0)
(170,193,0)
(358,329,0)
(297,551,0)
(195,366,0)
(513,253,0)
(304,151,0)
(451,540,0)
(8,87,0)
(525,98,0)
(473,151,0)
(512,313,0)
(210,319,0)
(347,233,0)
(331,30,0)
(52,294,0)
(174,327,0)
(118,442,0)
(158,97,0)
(454,355,0)
(373,415,0)
(436,30,0)
(416,477,0)
(240,62,0)
(413,356,0)
(508,405,0)
(329,358,0)
(41,432,0)
(123,306,0)
(21,214,0)
(14,75,0)
(106,177,0)
(373,151,0)
(72,291,0)
(408,96,0)
(496,343,0)
(364,424,0)
(560,438,0)
(285,446,0)
(3,223,0)
(17,291,0)
(546,317,0)
(472,526,0)
(433,337,0)
(159,108,0)
(237,227,0)
(103,93,0)
(377,427,0)
(413,291,0)
(552,542,0)
(538,151,0)
(346,331,0)
(205,166,0)
(32,62,0)
(354,552,0)
(218,405,0)
(39,31,0)
(448,291,0)
(108,488,0)
(369,465,0)
(183,174,0)
(461,85,0)
(423,358,0)
(430,260,0)
(352,524,0)
(193,164,0)
(197,34,0)
(343,26,0)
(249,387,0)
(510,376,0)
(414,210,0)
(312,255,0)
(390,360,0)
(223,221,0)
(395,151,0)
(293,506,0)
(2,332,0)
(542,53,0)
(351,478,0)
(107,376,0)
(350,93,0)
(31,376,0)
(198,434,0)
(377,416,0)
(22,100,0)
(223,3,0)
(289,129,0)
(353,267,0)
(84,157,0)
(515,292,0)
(366,151,0)
(157,486,0)
(200,151,0)
(13,420,0)
(392,356,0)
(258,151,0)
(353,477,0)
(253,484,0)
(337,151,0)
(442,118,0)
(168,91,0)
(298,446,0)
(291,465,0)
(117,151,0)
(114,21,0)
(353,420,0)
(541,294,0)
(119,538,0)
(230,532,0)
(532,251,0)
(384,357,0)
(546,151,0)
(279,23,0)
(348,142,0)
(536,400,0)
(71,267,0)
(300,401,0)
(213,519,0)
(95,208,0)
(291,448,0)
(552,148,0)
(74,395,0)
(449,98,0)
(303,98,0)
(444,4,0)
(357,524,0)
(177,106,0)
(40,465,0)
(196,446,0)
(32,323,0)
(415,373,0)
(202,292,0)
(412,186,0)
(175,398,0)
(81,238,0)
(242,35,0)
(511,454,0)
(193,45,0)
(162,89,0)
(551,454,0)
(247,40,0)
(339,446,0)
(240,151,0)
(161,151,0)
(381,465,0)
(453,527,0)
(177,163,0)
(109,373,0)
(4,247,0)
(161,214,0)
(30,151,0)
(530,409,0)
(432,405,0)
(407,151,0)
(221,223,0)
(93,291,0)
(520,291,0)
(487,192,0)
(395,214,0)
(447,323,0)
(81,46,0)
(181,348,0)
(463,232,0)
(58,213,0)
(400,87,0)
(261,201,0)
(542,552,0)
(70,167,0)
(182,391,0)
(215,286,0)
(143,117,0)
(20,465,0)
(163,177,0)
(176,514,0)
(529,166,0)
(219,191,0)
(154,515,0)
(61,278,0)
(512,164,0)
(241,166,0)
(234,124,0)
(214,168,0)
(497,452,0)
(213,300,0)
(332,151,0)
(206,415,0)
(296,327,0)
(507,87,0)
(126,532,0)
(223,300,0)
(287,410,0)
(197,151,0)
(186,306,0)
(276,465,0)
(540,513,0)
(134,258,0)
(106,151,0)
(201,203,0)
(509,90,0)
(99,240,0)
(377,457,0)
(457,465,0)
(211,184,0)
(4,151,0)
(131,281,0)
(503,202,0)
(376,510,0)
(549,58,0)
(277,151,0)
(448,133,0)
(344,420,0)
(272,151,0)
(184,267,0)
(473,287,0)
(135,151,0)
(23,224,0)
(177,21,0)
(415,506,0)
(513,540,0)
(277,110,0)
(256,290,0)
(460,241,0)
(120,482,0)
(212,45,0)
(333,151,0)
(338,477,0)
(253,513,0)
(100,526,0)
(362,3,0)
(224,23,0)
(201,151,0)
(429,151,0)
(278,61,0)
(3,214,0)
(202,203,0)
(196,9,0)
(557,53,0)
(481,174,0)
(327,465,0)
(396,10,0)
(85,348,0)
(26,167,0)
(3,151,0)
(450,291,0)
(24,435,0)
(137,387,0)
(59,542,0)
(534,325,0)
(233,386,0)
(552,291,0)
(368,294,0)
(86,319,0)
(548,416,0)
(250,482,0)
(286,402,0)
(468,352,0)
(173,465,0)
(184,151,0)
(194,361,0)
(286,151,0)
(203,201,0)
(55,319,0)
(409,151,0)
(199,394,0)
(36,151,0)
(515,82,0)
(10,306,0)
(516,531,0)
(474,435,0)
(92,447,0)
(327,174,0)
(168,214,0)
(422,519,0)
(464,371,0)
(559,70,0)
(161,213,0)
(288,36,0)
(282,306,0)
(88,292,0)
(141,424,0)
(108,159,0)
(376,107,0)
(353,0,0)
(223,393,0)
(180,272,0)
(208,133,0)
(361,84,0)
(229,53,0)
(64,57,0)
(151,36,0)
(415,206,0)
(393,284,0)
(519,213,0)
(189,402,0)
(150,185,0)
(328,291,0)
(209,318,0)
(528,289,0)
(98,449,0)
(113,222,0)
(440,395,0)
(206,385,0)
(445,306,0)
(347,151,0)
(387,506,0)
(551,297,0)
(462,159,0)
(527,151,0)
(63,210,0)
(260,246,0)
(478,392,0)
(210,227,0)
(307,410,0)
(71,151,0)
(272,245,0)
(267,434,0)
(148,306,0)
(417,367,0)
(263,438,0)
(409,91,0)
(207,419,0)
(292,465,0)
(195,135,0)
(287,0,0)
(337,299,0)
(87,144,0)
(188,450,0)
(493,449,0)
(458,90,0)
(372,347,0)
(226,21,0)
(443,6,0)
(5,98,0)
(10,151,0)
(255,151,0)
(398,465,0)
(361,291,0)
(419,151,0)
(467,117,0)
(535,200,0)
(281,151,0)
(554,473,0)
(98,5,0)
(399,486,0)
(110,79,0)
(135,195,0)
(202,89,0)
(244,221,0)
(84,361,0)
(420,353,0)
(254,317,0)
(371,82,0)
(160,465,0)
(382,346,0)
(316,157,0)
(504,3,0)
(377,7,0)
(62,240,0)
(91,409,0)
(402,286,0)
(265,306,0)
(42,108,0)
(105,442,0)
(510,465,0)
(550,240,0)
(357,331,0)
(385,206,0)
(416,343,0)
(97,101,0)
(468,281,0)
(88,89,0)
(232,151,0)
(355,258,0)
(480,71,0)
(539,101,0)
(45,151,0)
(459,332,0)
(56,130,0)
(275,412,0)
(398,327,0)
(410,287,0)
(93,157,0)
(57,151,0)
(9,232,0)
(483,429,0)
(441,282,0)
(294,52,0)
(116,272,0)
(488,108,0)
(18,191,0)
(353,118,0)
(70,291,0)
(435,447,0)
(83,298,0)
(524,357,0)
(471,409,0)
(11,313,0)
(349,263,0)
(219,246,0)
(117,75,0)
(273,200,0)
(280,47,0)
(23,151,0)
(267,184,0)
(243,57,0)
(73,465,0)
(403,348,0)
(336,5,0)
(232,9,0)
(336,291,0)
(107,151,0)
(148,552,0)
(418,255,0)
(221,151,0)
(50,490,0)
(556,465,0)
(544,366,0)
(164,412,0)
(101,97,0)
(136,23,0)
(37,404,0)
(292,515,0)
(71,214,0)
(371,151,0)
(33,299,0)
(490,151,0)
(330,383,0)
(380,527,0)
(437,361,0)
(213,161,0)
(439,255,0)
(169,277,0)
(199,151,0)
(310,100,0)
(428,402,0)
(367,488,0)
(85,75,0)
(102,452,0)
(1,438,0)
(359,46,0)
(248,151,0)
(138,248,0)
(28,192,0)
(383,332,0)
(269,157,0)
(282,441,0)
(553,258,0)
(468,325,0)
(82,371,0)
(348,75,0)
(40,247,0)
(346,151,0)
(54,304,0)
(555,552,0)
(358,42,0)
(311,222,0)
(192,353,0)
(453,348,0)
(311,477,0)
(424,118,0)
(270,198,0)
(111,221,0)
(178,106,0)
(494,277,0)
(356,392,0)
(334,429,0)
(135,214,0)
(6,151,0)
(449,291,0)
(67,367,0)
(294,151,0)
(47,438,0)
(191,219,0)
(146,336,0)
(318,238,0)
(130,151,0)
(156,297,0)
(488,367,0)
(42,358,0)
(239,5,0)
(46,81,0)
(519,495,0)
(523,410,0)
(69,478,0)
(90,465,0)
(53,151,0)
(30,331,0)
(262,208,0)
(171,465,0)
(118,424,0)
(122,448,0)
(200,138,0)
(394,199,0)
(491,26,0)
(353,222,0)
(58,151,0)
(174,151,0)
(110,277,0)
(442,214,0)
(147,107,0)
(379,392,0)
(499,457,0)
(434,498,0)
(521,237,0)
(385,238,0)
(153,465,0)
(352,468,0)
(198,133,0)
(457,327,0)
(115,58,0)
(48,72,0)
(100,482,0)
(453,75,0)
(345,197,0)
(42,432,0)
(237,148,0)
(38,366,0)
(79,110,0)
(195,300,0)
(526,100,0)
(374,297,0)
(547,144,0)
(490,50,0)
(355,454,0)
(21,177,0)
(166,241,0)
(377,311,0)
(236,260,0)
(259,515,0)
(450,216,0)
(325,214,0)
(367,151,0)
(27,407,0)
(219,202,0)
(238,385,0)
(545,107,0)
(297,292,0)
(271,343,0)
(85,291,0)
(505,404,0)
(257,477,0)
(88,278,0)
(248,138,0)
(526,89,0)
(506,415,0)
(140,360,0)
(77,168,0)
(329,358,1)
(140,196,1)
(217,433,1)
(552,185,1)
(88,220,1)
(22,526,1)
(192,28,1)
(382,15,1)
(5,239,1)
(344,192,1)
(36,291,1)
(290,256,1)
(472,187,1)
(240,151,1)
(285,224,1)
(416,343,1)
(205,292,1)
(67,417,1)
(122,520,1)
(390,140,1)
(23,151,1)
(243,251,1)
(453,75,1)
(375,379,1)
(526,472,1)
(88,292,1)
(527,380,1)
(315,372,1)
(423,42,1)
(79,97,1)
(383,332,1)
(237,148,1)
(348,181,1)
(222,113,1)
(292,515,1)
(473,151,1)
(376,107,1)
(97,158,1)
(512,313,1)
(403,484,1)
(85,397,1)
(162,52,1)
(52,231,1)
(85,75,1)
(295,128,1)
(407,27,1)
(71,214,1)
(356,413,1)
(457,327,1)
(82,341,1)
(53,557,1)
(299,337,1)
(64,243,1)
(560,501,1)
(459,2,1)
(251,522,1)
(240,550,1)
(443,466,1)
(417,159,1)
(131,407,1)
(359,318,1)
(312,241,1)
(3,151,1)
(470,355,1)
(231,294,1)
(241,460,1)
(490,264,1)
(226,106,1)
(159,462,1)
(379,227,1)
(251,438,1)
(400,151,1)
(416,548,1)
(515,82,1)
(509,458,1)
(559,98,1)
(108,488,1)
(58,151,1)
(187,250,1)
(533,107,1)
(525,303,1)
(377,427,1)
(357,384,1)
(322,268,1)
(227,210,1)
(352,468,1)
(39,533,1)
(219,246,1)
(98,5,1)
(505,513,1)
(27,274,1)
(319,55,1)
(513,540,1)
(155,120,1)
(488,367,1)
(274,214,1)
(154,82,1)
(499,17,1)
(50,490,1)
(454,551,1)
(201,151,1)
(149,525,1)
(157,93,1)
(85,291,1)
(448,543,1)
(313,11,1)
(257,338,1)
(467,14,1)
(297,374,1)
(3,362,1)
(37,505,1)
(453,527,1)
(462,432,1)
(81,46,1)
(501,144,1)
(177,106,1)
(91,409,1)
(100,526,1)
(434,198,1)
(442,151,1)
(354,49,1)
(377,7,1)
(355,454,1)
(195,366,1)
(452,497,1)
(368,418,1)
(468,325,1)
(135,214,1)
(296,89,1)
(310,22,1)
(471,395,1)
(393,223,1)
(332,151,1)
(163,177,1)
(553,134,1)
(236,191,1)
(419,151,1)
(130,56,1)
(5,336,1)
(248,151,1)
(21,151,1)
(466,289,1)
(485,461,1)
(432,405,1)
(168,77,1)
(489,369,1)
(398,175,1)
(105,424,1)
(89,411,1)
(61,278,1)
(54,40,1)
(387,151,1)
(406,540,1)
(65,6,1)
(107,545,1)
(174,151,1)
(478,291,1)
(362,504,1)
(134,429,1)
(347,151,1)
(405,508,1)
(69,356,1)
(215,428,1)
(260,151,1)
(358,42,1)
(199,151,1)
(148,552,1)
(333,291,1)
(239,336,1)
(9,232,1)
(304,94,1)
(90,509,1)
(1,285,1)
(314,438,1)
(53,151,1)
(448,133,1)
(414,237,1)
(524,60,1)
(532,230,1)
(31,39,1)
(281,151,1)
(398,327,1)
(101,151,1)
(263,349,1)
(297,89,1)
(396,330,1)
(232,145,1)
(237,521,1)
(87,8,1)
(302,413,1)
(45,212,1)
(10,151,1)
(294,151,1)
(384,331,1)
(88,89,1)
(196,9,1)
(412,275,1)
(353,477,1)
(436,321,1)
(420,13,1)
(475,131,1)
(70,291,1)
(534,281,1)
(229,354,1)
(99,425,1)
(60,357,1)
(279,136,1)
(253,513,1)
(373,109,1)
(484,253,1)
(291,448,1)
(235,366,1)
(114,226,1)
(93,291,1)
(268,375,1)
(506,387,1)
(180,116,1)
(185,150,1)
(208,133,1)
(317,254,1)
(212,65,1)
(558,5,1)
(233,347,1)
(391,12,1)
(380,80,1)
(186,412,1)
(517,484,1)
(184,151,1)
(203,202,1)
(535,75,1)
(208,95,1)
(228,200,1)
(45,151,1)
(106,178,1)
(483,61,1)
(210,63,1)
(409,530,1)
(77,91,1)
(34,197,1)
(477,257,1)
(530,471,1)
(156,342,1)
(238,318,1)
(343,496,1)
(555,185,1)
(309,186,1)
(197,345,1)
(143,467,1)
(71,151,1)
(201,261,1)
(395,151,1)
(49,206,1)
(10,396,1)
(385,238,1)
(528,452,1)
(410,419,1)
(341,371,1)
(325,214,1)
(197,151,1)
(449,291,1)
(547,263,1)
(47,280,1)
(482,100,1)
(286,104,1)
(515,259,1)
(17,502,1)
(389,118,1)
(413,322,1)
(418,255,1)
(161,132,1)
(76,195,1)
(224,23,1)
(164,512,1)
(521,308,1)
(490,151,1)
(299,33,1)
(191,18,1)
(346,214,1)
(202,503,1)
(139,16,1)
(377,457,1)
(275,164,1)
(87,400,1)
(253,404,1)
(244,111,1)
(473,554,1)
(49,72,1)
(470,61,1)
(36,288,1)
(524,357,1)
(280,314,1)
(120,121,1)
(427,290,1)
(421,506,1)
(177,21,1)
(4,151,1)
(495,519,1)
(355,258,1)
(202,219,1)
(117,143,1)
(444,329,1)
(335,447,1)
(184,211,1)
(493,558,1)
(30,436,1)
(258,553,1)
(110,112,1)
(250,282,1)
(21,214,1)
(331,346,1)
(544,38,1)
(203,201,1)
(297,292,1)
(457,499,1)
(71,480,1)
(100,310,1)
(42,108,1)
(286,151,1)
(209,415,1)
(222,151,1)
(255,439,1)
(86,151,1)
(62,240,1)
(415,506,1)
(328,291,1)
(202,89,1)
(11,193,1)
(560,438,1)
(345,406,1)
(343,151,1)
(287,410,1)
(25,235,1)
(353,222,1)
(494,169,1)
(438,68,1)
(342,511,1)
(21,114,1)
(120,482,1)
(546,151,1)
(195,300,1)
(411,162,1)
(516,241,1)
(223,300,1)
(402,286,1)
(552,291,1)
(57,151,1)
(16,299,1)
(478,351,1)
(316,269,1)
(539,110,1)
(164,193,1)
(395,440,1)
(192,151,1)
(6,151,1)
(365,76,1)
(135,151,1)
(161,214,1)
(262,270,1)
(301,359,1)
(332,459,1)
(251,532,1)
(200,151,1)
(19,326,1)
(141,364,1)
(529,205,1)
(468,281,1)
(542,53,1)
(269,355,1)
(326,206,1)
(255,151,1)
(353,395,1)
(74,203,1)
(353,118,1)
(170,45,1)
(367,67,1)
(130,151,1)
(57,64,1)
(549,76,1)
(554,172,1)
(557,229,1)
(433,434,1)
(32,62,1)
(377,311,1)
(451,138,1)
(361,194,1)
(44,388,1)
(526,292,1)
(146,149,1)
(136,407,1)
(466,233,1)
(183,481,1)
(95,262,1)
(366,544,1)
(402,291,1)
(68,1,1)
(258,151,1)
(79,110,1)
(102,227,1)
(369,518,1)
(271,70,1)
(219,191,1)
(351,69,1)
(328,431,1)
(132,66,1)
(227,237,1)
(157,84,1)
(213,58,1)
(330,383,1)
(477,151,1)
(272,180,1)
(199,139,1)
(314,560,1)
(126,47,1)
(476,391,1)
(188,418,1)
(198,208,1)
(101,426,1)
(175,477,1)
(166,529,1)
(325,151,1)
(480,305,1)
(111,495,1)
(348,75,1)
(131,298,1)
(420,510,1)
(263,438,1)
(442,214,1)
(372,392,1)
(308,148,1)
(402,189,1)
(449,493,1)
(245,272,1)
(350,84,1)
(511,258,1)
(46,301,1)
(144,547,1)
(506,293,1)
(413,291,1)
(503,219,1)
(435,151,1)
(441,130,1)
(174,183,1)
(169,157,1)
(24,474,1)
(404,37,1)
(464,295,1)
(331,30,1)
(385,165,1)
(481,296,1)
(353,420,1)
(318,209,1)
(58,115,1)
(526,89,1)
(487,394,1)
(392,356,1)
(128,510,1)
(551,297,1)
(110,277,1)
(405,151,1)
(213,161,1)
(267,184,1)
(94,54,1)
(294,541,1)
(346,382,1)
(433,393,1)
(392,478,1)
(17,291,1)
(337,151,1)
(273,535,1)
(440,74,1)
(519,422,1)
(176,79,1)
(200,273,1)
(230,126,1)
(248,225,1)
(281,475,1)
(193,170,1)
(552,555,1)
(296,52,1)
(138,200,1)
(115,549,1)
(346,151,1)
(104,215,1)
(282,441,1)
(84,361,1)
(543,122,1)
(484,138,1)
(358,423,1)
(172,353,1)
(453,348,1)
(241,166,1)
(349,57,1)
(118,442,1)
(225,228,1)
(91,51,1)
(437,316,1)
(214,168,1)
(496,271,1)
(181,403,1)
(194,437,1)
(300,389,1)
(357,331,1)
(8,400,1)
(277,151,1)
(387,137,1)
(321,468,1)
(519,213,1)
(361,291,1)
(98,449,1)
(407,151,1)
(221,244,1)
(461,453,1)
(352,524,1)
(195,135,1)
(87,438,1)
(452,151,1)
(538,151,1)
(107,151,1)
(3,214,1)
(518,127,1)
(46,151,1)
(397,485,1)
(536,370,1)
(508,218,1)
(532,151,1)
(374,156,1)
(304,151,1)
(337,217,1)
(424,151,1)
(537,352,1)
(26,491,1)
(210,319,1)
(93,103,1)
(72,48,1)
(2,287,1)
(147,476,1)
(502,155,1)
(334,483,1)
(311,514,1)
(458,319,1)
(366,151,1)
(256,450,1)
(432,41,1)
(550,99,1)
(63,414,1)
(211,365,1)
(223,221,1)
(293,387,1)
(460,166,1)
(428,17,1)
(51,409,1)
(371,464,1)
(540,451,1)
(92,435,1)
(388,304,1)
(353,263,1)
(416,222,1)
(426,539,1)
(204,534,1)
(439,312,1)
(179,444,1)
(185,319,1)
(517,348,1)
(499,402,1)
(298,83,1)
(116,313,1)
(109,421,1)
(87,144,1)
(450,291,1)
(283,542,1)
(42,432,1)
(430,236,1)
(106,151,1)
(82,371,1)
(523,419,1)
(97,101,1)
(108,159,1)
(246,260,1)
(176,328,1)
(522,532,1)
(247,4,1)
(165,238,1)
(394,199,1)
(422,213,1)
(80,517,1)
(512,245,1)
(305,184,1)
(303,429,1)
(48,317,1)
(213,300,1)
(425,538,1)
(12,182,1)
(320,361,1)
(56,309,1)
(166,291,1)
(40,247,1)
(138,248,1)
(238,81,1)
(270,267,1)
(127,398,1)
(396,32,1)
(336,146,1)
(70,559,1)
(338,327,1)
(250,203,1)
(415,373,1)
(121,482,1)
(546,19,1)
(55,86,1)
(161,151,1)
(264,492,1)
(412,164,1)
(514,176,1)
(207,378,1)
(84,320,1)
(311,222,1)
(278,88,1)
(249,453,1)
(409,151,1)
(504,221,1)
(15,30,1)
(18,201,1)
(206,385,1)
(327,174,1)
(113,489,1)
(360,390,1)
(364,163,1)
(118,424,1)
(419,353,1)
(263,57,1)
(168,91,1)
(206,415,1)
(232,151,1)
(119,335,1)
(66,58,1)
(541,368,1)
(218,222,1)
(85,348,1)
(500,105,1)
(52,294,1)
(497,102,1)
(135,25,1)
(307,523,1)
(545,147,1)
(288,78,1)
(429,151,1)
(28,487,1)
(117,151,1)
(410,307,1)
(83,360,1)
(450,188,1)
(112,277,1)
(325,204,1)
(158,101,1)
(189,286,1)
(193,45,1)
(33,337,1)
(4,179,1)
(272,151,1)
(367,151,1)
(75,117,1)
(261,470,1)
(243,507,1)
(378,473,1)
(360,151,1)
(353,267,1)
(376,31,1)
(527,151,1)
(492,299,1)
(507,87,1)
(178,537,1)
(38,352,1)
(151,36,1)
(7,531,1)
(198,133,1)
(531,516,1)
(72,291,1)
(289,528,1)
(277,494,1)
(552,542,1)
(202,292,1)
(41,405,1)
(137,249,1)
(13,344,1)
(371,151,1)
(429,334,1)
(23,279,1)
(513,34,1)
(14,10,1)
(223,3,1)
(538,119,1)
(548,26,1)
(373,151,1)
(78,333,1)
(6,443,1)
(30,151,1)
(474,50,1)
(356,302,1)
(491,343,1)
(221,151,1)
(103,350,1)
(220,44,1)
(416,477,1)
(249,85,1)
(150,283,1)
(38,300,1)
(311,477,1)
(254,546,1)
(182,90,1)
(431,79,1)
(510,376,1)
(259,154,1)
(400,536,1)
(47,438,1)
(463,47,1)
(145,463,1)
(353,360,1)
(260,430,1)
(447,92,1)
(435,24,1)
(267,71,1)
(542,59,1)
(424,141,1)
(377,416,1)
(442,500,1)
(419,207,1)
(336,291,1)
(370,251,1)
(61,304,1)
(347,315,1)
(508,418,2)
(87,438,2)
(416,477,2)
(81,415,2)
(267,76,2)
(77,203,2)
(83,407,2)
(210,319,2)
(176,355,2)
(24,299,2)
(108,159,2)
(4,151,2)
(540,138,2)
(25,203,2)
(272,203,2)
(310,61,2)
(435,299,2)
(377,457,2)
(356,227,2)
(332,299,2)
(9,407,2)
(105,352,2)
(213,161,2)
(47,438,2)
(429,151,2)
(183,418,2)
(489,418,2)
(198,76,2)
(151,36,2)
(222,418,2)
(317,206,2)
(87,400,2)
(88,89,2)
(215,17,2)
(389,352,2)
(6,151,2)
(294,418,2)
(107,151,2)
(360,407,2)
(397,453,2)
(93,355,2)
(42,108,2)
(402,286,2)
(331,468,2)
(117,151,2)
(496,429,2)
(377,311,2)
(560,47,2)
(531,241,2)
(189,17,2)
(195,203,2)
(528,227,2)
(549,76,2)
(472,61,2)
(387,203,2)
(283,203,2)
(119,299,2)
(417,418,2)
(185,203,2)
(453,348,2)
(40,418,2)
(327,418,2)
(413,227,2)
(113,418,2)
(325,214,2)
(336,429,2)
(206,203,2)
(409,203,2)
(470,61,2)
(57,47,2)
(71,76,2)
(349,47,2)
(553,429,2)
(221,151,2)
(481,418,2)
(253,513,2)
(34,197,2)
(272,151,2)
(102,227,2)
(392,227,2)
(348,484,2)
(104,17,2)
(98,5,2)
(130,203,2)
(10,203,2)
(454,551,2)
(536,251,2)
(400,151,2)
(538,151,2)
(321,468,2)
(372,227,2)
(444,418,2)
(82,371,2)
(201,151,2)
(302,227,2)
(138,203,2)
(209,415,2)
(156,429,2)
(121,355,2)
(223,221,2)
(75,117,2)
(358,42,2)
(438,407,2)
(500,352,2)
(232,407,2)
(308,203,2)
(281,203,2)
(178,352,2)
(22,355,2)
(422,76,2)
(255,151,2)
(76,203,2)
(410,419,2)
(30,468,2)
(19,206,2)
(525,429,2)
(513,138,2)
(415,203,2)
(495,76,2)
(316,355,2)
(544,203,2)
(448,133,2)
(219,191,2)
(98,449,2)
(21,214,2)
(80,203,2)
(514,355,2)
(114,352,2)
(71,151,2)
(301,415,2)
(146,429,2)
(62,240,2)
(484,203,2)
(477,151,2)
(203,202,2)
(311,477,2)
(135,203,2)
(258,151,2)
(402,17,2)
(373,203,2)
(233,347,2)
(291,448,2)
(286,17,2)
(440,203,2)
(100,355,2)
(557,203,2)
(449,429,2)
(353,263,2)
(383,332,2)
(541,418,2)
(235,203,2)
(285,224,2)
(470,355,2)
(76,195,2)
(88,292,2)
(79,97,2)
(57,151,2)
(552,291,2)
(468,281,2)
(439,241,2)
(326,206,2)
(253,138,2)
(390,407,2)
(203,201,2)
(423,418,2)
(47,47,2)
(530,203,2)
(91,409,2)
(392,478,2)
(254,206,2)
(161,76,2)
(293,203,2)
(354,203,2)
(213,58,2)
(377,7,2)
(419,151,2)
(443,203,2)
(237,203,2)
(559,429,2)
(453,75,2)
(1,407,2)
(504,76,2)
(392,356,2)
(517,203,2)
(512,313,2)
(420,510,2)
(202,219,2)
(118,442,2)
(385,238,2)
(169,355,2)
(398,327,2)
(250,61,2)
(325,151,2)
(473,151,2)
(222,151,2)
(374,429,2)
(477,418,2)
(396,203,2)
(457,61,2)
(28,299,2)
(380,203,2)
(199,151,2)
(95,76,2)
(475,203,2)
(539,110,2)
(135,214,2)
(497,227,2)
(94,418,2)
(34,138,2)
(428,17,2)
(2,299,2)
(378,299,2)
(110,277,2)
(379,227,2)
(230,47,2)
(120,355,2)
(542,59,2)
(432,418,2)
(3,214,2)
(506,203,2)
(449,291,2)
(405,418,2)
(56,203,2)
(307,299,2)
(395,151,2)
(54,418,2)
(41,418,2)
(195,135,2)
(537,352,2)
(281,151,2)
(249,203,2)
(202,201,2)
(217,203,2)
(40,247,2)
(502,355,2)
(450,291,2)
(211,76,2)
(403,484,2)
(345,138,2)
(46,415,2)
(109,203,2)
(131,203,2)
(452,227,2)
(552,542,2)
(337,203,2)
(348,75,2)
(53,203,2)
(37,138,2)
(512,245,2)
(328,291,2)
(245,203,2)
(355,258,2)
(177,106,2)
(85,453,2)
(98,429,2)
(106,151,2)
(210,237,2)
(246,201,2)
(550,299,2)
(165,415,2)
(202,89,2)
(157,355,2)
(50,490,2)
(50,299,2)
(17,291,2)
(331,30,2)
(356,413,2)
(426,110,2)
(524,468,2)
(311,355,2)
(304,418,2)
(166,291,2)
(79,110,2)
(261,355,2)
(60,468,2)
(193,45,2)
(179,418,2)
(62,299,2)
(309,203,2)
(393,76,2)
(246,260,2)
(206,415,2)
(214,203,2)
(412,164,2)
(100,526,2)
(250,355,2)
(224,407,2)
(527,203,2)
(192,151,2)
(108,488,2)
(175,418,2)
(263,47,2)
(300,352,2)
(532,151,2)
(548,429,2)
(233,227,2)
(358,418,2)
(161,214,2)
(370,251,2)
(101,110,2)
(353,118,2)
(61,418,2)
(360,151,2)
(164,203,2)
(218,418,2)
(547,47,2)
(253,404,2)
(501,47,2)
(287,410,2)
(289,227,2)
(463,407,2)
(52,418,2)
(11,203,2)
(394,199,2)
(187,355,2)
(482,355,2)
(383,299,2)
(117,203,2)
(263,57,2)
(552,185,2)
(282,441,2)
(366,203,2)
(416,222,2)
(21,352,2)
(53,151,2)
(198,133,2)
(223,3,2)
(32,62,2)
(197,138,2)
(353,267,2)
(488,367,2)
(118,424,2)
(32,299,2)
(499,355,2)
(3,76,2)
(126,47,2)
(42,418,2)
(373,151,2)
(267,184,2)
(248,151,2)
(351,227,2)
(197,151,2)
(127,418,2)
(297,89,2)
(61,278,2)
(155,355,2)
(70,429,2)
(270,76,2)
(454,429,2)
(482,61,2)
(118,352,2)
(409,151,2)
(174,151,2)
(155,61,2)
(442,214,2)
(116,203,2)
(526,292,2)
(511,429,2)
(282,203,2)
(418,241,2)
(138,248,2)
(377,427,2)
(406,138,2)
(221,76,2)
(33,203,2)
(93,291,2)
(346,214,2)
(357,468,2)
(560,438,2)
(45,151,2)
(461,453,2)
(168,203,2)
(184,151,2)
(110,355,2)
(376,31,2)
(273,203,2)
(542,203,2)
(377,416,2)
(17,61,2)
(524,357,2)
(70,291,2)
(407,151,2)
(488,418,2)
(332,151,2)
(418,255,2)
(121,61,2)
(99,299,2)
(457,327,2)
(81,46,2)
(394,299,2)
(551,429,2)
(404,138,2)
(407,203,2)
(180,203,2)
(468,325,2)
(419,299,2)
(414,237,2)
(45,203,2)
(224,23,2)
(87,144,2)
(46,151,2)
(482,100,2)
(405,151,2)
(92,299,2)
(68,407,2)
(512,203,2)
(526,61,2)
(457,355,2)
(285,407,2)
(468,203,2)
(310,355,2)
(88,418,2)
(15,468,2)
(69,227,2)
(546,206,2)
(385,415,2)
(304,151,2)
(140,407,2)
(231,418,2)
(419,353,2)
(23,151,2)
(484,253,2)
(507,87,2)
(355,429,2)
(361,355,2)
(174,418,2)
(328,79,2)
(347,151,2)
(495,519,2)
(30,151,2)
(402,291,2)
(262,76,2)
(335,299,2)
(85,291,2)
(330,383,2)
(200,203,2)
(278,88,2)
(506,387,2)
(168,91,2)
(268,227,2)
(9,232,2)
(188,418,2)
(195,300,2)
(212,203,2)
(67,418,2)
(64,47,2)
(410,299,2)
(229,203,2)
(429,61,2)
(280,47,2)
(159,418,2)
(196,9,2)
(462,418,2)
(91,203,2)
(84,355,2)
(277,355,2)
(434,198,2)
(393,223,2)
(172,299,2)
(451,138,2)
(177,21,2)
(342,429,2)
(442,151,2)
(51,203,2)
(240,299,2)
(120,482,2)
(164,193,2)
(16,299,2)
(334,61,2)
(263,438,2)
(280,407,2)
(163,352,2)
(65,203,2)
(436,468,2)
(526,355,2)
(193,203,2)
(36,291,2)
(459,299,2)
(416,343,2)
(421,203,2)
(251,47,2)
(42,432,2)
(238,81,2)
(148,203,2)
(415,373,2)
(472,355,2)
(473,299,2)
(478,291,2)
(10,151,2)
(192,299,2)
(47,407,2)
(200,151,2)
(269,355,2)
(521,203,2)
(322,227,2)
(207,299,2)
(241,166,2)
(437,355,2)
(27,203,2)
(191,201,2)
(195,366,2)
(371,151,2)
(369,418,2)
(87,251,2)
(44,418,2)
(453,203,2)
(320,355,2)
(163,177,2)
(111,76,2)
(484,138,2)
(72,206,2)
(376,107,2)
(347,227,2)
(277,151,2)
(546,151,2)
(148,552,2)
(538,299,2)
(362,76,2)
(203,355,2)
(251,532,2)
(237,148,2)
(554,299,2)
(368,418,2)
(251,438,2)
(294,151,2)
(441,203,2)
(513,34,2)
(256,418,2)
(49,203,2)
(331,346,2)
(138,200,2)
(416,429,2)
(424,352,2)
(22,61,2)
(226,352,2)
(144,47,2)
(350,355,2)
(427,418,2)
(337,151,2)
(315,227,2)
(483,61,2)
(275,203,2)
(346,151,2)
(467,203,2)
(452,151,2)
(510,376,2)
(395,203,2)
(490,299,2)
(558,429,2)
(471,203,2)
(303,429,2)
(290,418,2)
(311,222,2)
(366,151,2)
(245,272,2)
(526,89,2)
(352,203,2)
(157,84,2)
(3,151,2)
(352,524,2)
(352,468,2)
(480,76,2)
(518,418,2)
(157,93,2)
(61,304,2)
(161,151,2)
(21,151,2)
(344,299,2)
(112,355,2)
(136,407,2)
(367,151,2)
(85,348,2)
(478,227,2)
(18,201,2)
(214,168,2)
(424,151,2)
(184,76,2)
(499,61,2)
(106,352,2)
(38,203,2)
(225,203,2)
(412,203,2)
(314,47,2)
(400,251,2)
(353,420,2)
(220,418,2)
(186,203,2)
(274,203,2)
(353,299,2)
(384,468,2)
(516,241,2)
(432,405,2)
(329,418,2)
(199,299,2)
(343,429,2)
(149,429,2)
(267,71,2)
(313,203,2)
(413,291,2)
(487,299,2)
(196,407,2)
(85,75,2)
(367,418,2)
(271,429,2)
(108,418,2)
(527,151,2)
(555,203,2)
(492,299,2)
(248,203,2)
(177,352,2)
(103,355,2)
(329,358,2)
(425,299,2)
(158,110,2)
(134,429,2)
(202,292,2)
(365,76,2)
(507,251,2)
(535,203,2)
(327,174,2)
(515,82,2)
(79,355,2)
(552,203,2)
(228,203,2)
(23,407,2)
(239,429,2)
(26,429,2)
(198,208,2)
(6,203,2)
(325,203,2)
(523,299,2)
(227,237,2)
(415,506,2)
(551,297,2)
(361,291,2)
(287,299,2)
(258,429,2)
(491,429,2)
(170,203,2)
(346,468,2)
(100,61,2)
(236,201,2)
(145,407,2)
(238,415,2)
(97,110,2)
(388,418,2)
(296,418,2)
(382,468,2)
(213,76,2)
(513,540,2)
(298,407,2)
(164,512,2)
(305,76,2)
(503,201,2)
(375,227,2)
(257,418,2)
(143,203,2)
(493,429,2)
(255,241,2)
(14,203,2)
(247,4,2)
(261,61,2)
(442,352,2)
(353,222,2)
(338,418,2)
(181,484,2)
(194,355,2)
(238,318,2)
(162,52,2)
(204,203,2)
(63,237,2)
(411,52,2)
(485,453,2)
(84,361,2)
(227,210,2)
(208,76,2)
(502,61,2)
(137,203,2)
(219,246,2)
(420,299,2)
(5,336,2)
(299,337,2)
(101,151,2)
(58,76,2)
(72,291,2)
(297,429,2)
(387,151,2)
(299,203,2)
(48,206,2)
(58,151,2)
(150,203,2)
(7,241,2)
(494,355,2)
(534,203,2)
(532,47,2)
(466,203,2)
(353,395,2)
(260,151,2)
(260,201,2)
(206,385,2)
(430,201,2)
(120,61,2)
(369,518,2)
(519,76,2)
(5,429,2)
(130,151,2)
(201,61,2)
(227,203,2)
(292,515,2)
(74,203,2)
(223,300,2)
(355,454,2)
(186,412,2)
(330,299,2)
(453,527,2)
(450,418,2)
(97,101,2)
(247,418,2)
(223,76,2)
(336,291,2)
(278,418,2)
(433,203,2)
(434,76,2)
(66,76,2)
(279,407,2)
(17,355,2)
(505,138,2)
(490,151,2)
(244,76,2)
(297,292,2)
(185,319,2)
(353,477,2)
(203,61,2)
(8,251,2)
(441,130,2)
(522,47,2)
(312,241,2)
(474,299,2)
(240,151,2)
(201,355,2)
(213,300,2)
(435,151,2)
(4,418,2)
(115,76,2)
(52,294,2)
(318,415,2)
(139,299,2)
(343,151,2)
(243,47,2)
(187,61,2)
(431,79,2)
(219,201,2)
(89,52,2)
(519,213,2)
(141,352,2)
(364,352,2)
(208,133,2)
(314,407,2)
(353,360,2)
(13,299,2)
(71,214,2)
(286,151,2)
(264,299,2)
(542,53,2)
(132,76,2)
(135,151,2)
(75,203,2)
(357,331,2)
(359,415,2)
(232,151,2)
(398,418,2)
(447,299,2)
-----------------------------------
(0,)
(1,i)
(2,info)
(3,info->job_id)
(4,info->last_scanhash)
(5,compac->drv->name)
(6,info->task_ms)
(7,return -1;)
(8,i)
(9,&info->lock)
(10,init_task(info)
(11,now)
(12,0)
(13,RAMP_CT)
(14,frequency)
(15,info)
(16,info)
(17,compac->shutdown)
(18,now)
(19,dups)
(20,read_bytes)
(21,info->job_id)
(22,1)
(23,info->lock)
(24,active)
(25,job_id)
(26,info->failing = true)
(27,update_work)
(28,ramp_hcn)
(29,i)
(30,info->work)
(31,RAMP_MS / 1000)
(32,info->ramp_hcn = (0xffffffff / info->chips)
(33,RAMP_CT)
(34,&info->last_freq_set)
(35,)
(36,compac->device_data)
(37,1000)
(38,info)
(39,1000)
(40,cgtime(&info->last_scanhash)
(41,9)
(42,info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
(43,)
(44,1000)
(45,info->task_ms)
(46,info->last_chain_inactive)
(47,i < MAX_JOBS)
(48,compac)
(49,err)
(50,info->nonceless++)
(51,1)
(52,info->ramping < RAMP_CT)
(53,info->work_tx)
(54,info)
(55,1)
(56,last_task)
(57,info->work)
(58,info->work)
(59,char *)
(60,0)
(61,info->nonceless > (MAX_IDLE * 1000 / max_task_wait)
(62,0xffffffff / info->chips)
(63,TX_TASK_SIZE)
(64,work)
(65,info)
(66,info)
(67,last_scanhash)
(68,0)
(69,compac)
(70,usb_reset(compac)
(71,info->job_id)
(72,compac_send_chain_inactive(compac)
(73,frequency)
(74,info)
(75,frequency = info->frequency)
(76,!info->work[info->job_id])
(77,MAX_JOBS)
(78,compac)
(79,info->ident != IDENT_BSC && info->ident != IDENT_GSC)
(80,info)
(81,&info->last_chain_inactive)
(82,info->fullscan_ms * 0.40)
(83,0)
(84,compac->drv->name)
(85,compac_set_frequency(compac, frequency, true)
(86,read_bytes)
(87,info->work[i])
(88,1000 / max_task_wait)
(89,max_task_wait = RAMP_MS)
(90,hashes = 0)
(91,info->job_id + 1)
(92,true)
(93,compac->device_id)
(94,nonceless)
(95,id)
(96,)
(97,info->ident != IDENT_GSC)
(98,applog(LOG_WARNING, "%s %d: No valid hashes recently, attempting to reset",\n\\n\\t\\t\\t\\t   compac->drv->name, compac->device_id)
(99,info)
(100,bound(max_task_wait / 20, 1, 100)
(101,info->ident)
(102,info)
(103,device_id)
(104,frequency_start)
(105,info)
(106,info->work)
(107,info->hashrate)
(108,ms_tdiff(&now, &info->last_scanhash)
(109,chips)
(110,info->ident != IDENT_BSC)
(111,info)
(112,IDENT_BSC)
(113,scanhash_ms)
(114,job_id)
(115,work)
(116,info)
(117,info->frequency)
(118,info->work[info->job_id])
(119,ramp_hcn)
(120,cgsleep_ms(cpu_yield)
(121,cpu_yield)
(122,thr)
(123,if (info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0)
(124,)
(125,if (info->nonceless > (MAX_IDLE * 1000 / max_task_wait)
(126,info)
(127,now)
(128,max_task_wait)
(129,)
(130,info->last_task)
(131,info)
(132,job_id)
(133,struct thr_info *thr)
(134,info)
(135,info->job_id)
(136,info)
(137,dups)
(138,info->frequency != info->frequency_requested)
(139,ramping)
(140,info)
(141,work)
(142,)
(143,frequency)
(144,info->work[i] = NULL)
(145,lock)
(146,drv)
(147,info)
(148,err = usb_write(compac, (char *)
(149,compac)
(150,read_bytes)
(151,*info = compac->device_data)
(152,err)
(153,hashes)
(154,5)
(155,compac)
(156,1000)
(157,applog(LOG_ERR, "%s %d: Device failed to respond to restart",\n\\n\\t\\t\\t\\t\\t   compac->drv->name, compac->device_id)
(158,IDENT_GSC)
(159,&now)
(160,if (compac->usbinfo.nodev)
(161,info->job_id)
(162,max_task_wait)
(163,free_work(info->work[info->job_id])
(164,info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
(165,3000)
(166,compac->usbinfo)
(167,)
(168,(info->job_id + 1)
(169,info)
(170,9)
(171,info)
(172,info)
(173,now)
(174,info->hashes)
(175,hashes)
(176,1)
(177,info->work[info->job_id])
(178,work)
(179,last_scanhash)
(180,last_task)
(181,25)
(182,err)
(183,hashes)
(184,info->work)
(185,&read_bytes)
(186,info->task_ms = (info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
(187,max_task_wait)
(188,compac)
(189,false)
(190,cpu_yield)
(191,&now)
(192,info->ramp_hcn)
(193,info->task_ms * 9)
(194,drv)
(195,info->work[info->job_id])
(196,mutex_unlock(&info->lock)
(197,info->last_freq_set)
(198,get_work(thr, thr->id)
(199,info->ramping)
(200,info->frequency)
(201,info->update_work)
(202,ms_tdiff(&now, &info->last_task)
(203,info->update_work || (ms_tdiff(&now, &info->last_task)
(204,job_id)
(205,compac)
(206,info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive)
(207,ramp_hcn)
(208,thr->id)
(209,now)
(210,read_bytes != TX_TASK_SIZE)
(211,work)
(212,task_ms)
(213,info->work[info->job_id])
(214,info->job_id = (info->job_id + 1)
(215,info)
(216,)
(217,ramping)
(218,info)
(219,ms_tdiff(&now, &info->last_task)
(220,max_task_wait)
(221,info->work)
(222,info->scanhash_ms)
(223,info->work[info->job_id])
(224,&info->lock)
(225,frequency_requested)
(226,info)
(227,err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE)
(228,info)
(229,info)
(230,work)
(231,RAMP_CT)
(232,info->lock)
(233,info->write_err++)
(234,if (info->failing)
(235,info)
(236,info)
(237,err != LIBUSB_SUCCESS)
(238,ms_tdiff(&now, &info->last_chain_inactive)
(239,name)
(240,info->chips)
(241,compac->usbinfo.nodev)
(242,if (info->work[i])
(243,info)
(244,work)
(245,&info->last_task)
(246,&info->last_task)
(247,&info->last_scanhash)
(248,info->frequency_requested)
(249,info)
(250,cpu_yield)
(251,info->work[i])
(252,if (info->ramping < RAMP_CT)
(253,ms_tdiff(&now, &info->last_freq_set)
(254,0)
(255,info->chips)
(256,1)
(257,hashes)
(258,info->nonceless)
(259,1000)
(260,info->last_task)
(261,update_work)
(262,thr)
(263,info->work[i])
(264,nonceless)
(265,if (info->update_work)
(266,if (info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set)
(267,info->work[info->job_id])
(268,compac)
(269,LOG_ERR)
(270,thr)
(271,info)
(272,info->last_task)
(273,frequency)
(274,info)
(275,10)
(276,if (compac->shutdown)
(277,info->ident)
(278,MAX_IDLE * 1000 / max_task_wait)
(279,lock)
(280,MAX_JOBS)
(281,info->work)
(282,cgtime(&info->last_task)
(283,TX_TASK_SIZE)
(284,)
(285,mutex_lock(&info->lock)
(286,info->frequency_start)
(287,info->ramp_hcn = bound(info->ramp_hcn, 0, 0xffffffff)
(288,device_data)
(289,info->write_err = 0)
(290,-1)
(291,*compac = thr->cgpu)
(292,max_task_wait = bound(info->fullscan_ms * 0.40, 5, 1000)
(293,2)
(294,info->ramping)
(295,info)
(296,hashes)
(297,1000 / max_task_wait)
(298,info->update_work = 0)
(299,info->ramping < RAMP_CT)
(300,info->work[info->job_id] = NULL)
(301,last_chain_inactive)
(302,name)
(303,LOG_WARNING)
(304,info->nonceless)
(305,info)
(306,)
(307,0xffffffff)
(308,err)
(309,info)
(310,100)
(311,return -1;)
(312,info)
(313,&now)
(314,i)
(315,write_err)
(316,"%s %d: Device failed to respond to restart")
(317,info->dups = 0)
(318,&now)
(319,read_bytes = 1)
(320,name)
(321,info)
(322,drv)
(323,)
(324,if (info->update_work || (ms_tdiff(&now, &info->last_task)
(325,info->job_id)
(326,info)
(327,hashes = info->hashes)
(328,usb_nodev(compac)
(329,info->scanhash_ms = (info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
(330,cgtime(&info->last_nonce)
(331,info->work[info->job_id])
(332,info->last_nonce)
(333,info)
(334,failing)
(335,info)
(336,compac->drv)
(337,info->ramping)
(338,info)
(339,for (i = 0; i < MAX_JOBS; i++)
(340,if (err != LIBUSB_SUCCESS || read_bytes != TX_TASK_SIZE)
(341,0.40)
(342,MAX_IDLE)
(343,info->failing)
(344,hcn_max)
(345,last_freq_set)
(346,info->job_id)
(347,info->write_err)
(348,frequency += 25)
(349,i)
(350,compac)
(351,device_id)
(352,info->work[info->job_id] && info->work[info->job_id]->drv_rolllimit == 0)
(353,info->ramp_hcn += hcn_max / RAMP_CT)
(354,compac)
(355,info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)
(356,compac->drv->name)
(357,info->work[info->job_id]->drv_rolllimit)
(358,(info->scanhash_ms * 9 + ms_tdiff(&now, &info->last_scanhash)
(359,info)
(360,info->update_work)
(361,compac->drv)
(362,job_id)
(363,compac)
(364,info)
(365,info)
(366,info->work)
(367,info->last_scanhash)
(368,info)
(369,cgtime(&now)
(370,info)
(371,info->fullscan_ms)
(372,info)
(373,info->chips)
(374,max_task_wait)
(375,"%s %d: Write error")
(376,info->hashrate * RAMP_MS / 1000)
(377,RET)
(378,info)
(379,LOG_INFO)
(380,frequency)
(381,max_task_wait)
(382,job_id)
(383,&info->last_nonce)
(384,drv_rolllimit)
(385,ms_tdiff(&now, &info->last_chain_inactive)
(386,)
(387,info->dups)
(388,MAX_IDLE)
(389,NULL)
(390,update_work)
(391,err = 0)
(392,applog(LOG_INFO,"%s %d: Write error", compac->drv->name, compac->device_id)
(393,roll_work(info->work[info->job_id])
(394,info->ramping++)
(395,info->job_id)
(396,info)
(397,true)
(398,info->hashes -= hashes)
(399,if (info->ident != IDENT_BSC && info->ident != IDENT_GSC)
(400,info->work)
(401,)
(402,compac_set_frequency(compac, info->frequency_start, false)
(403,frequency)
(404,9 * 1000)
(405,info->scanhash_ms)
(406,info)
(407,info->update_work)
(408,if (info->nonceless > (2 * MAX_IDLE * 1000 / max_task_wait)
(409,info->job_id)
(410,bound(info->ramp_hcn, 0, 0xffffffff)
(411,RAMP_MS)
(412,(info->task_ms * 9 + ms_tdiff(&now, &info->last_task)
(413,compac->drv)
(414,read_bytes)
(415,info->dups * 2 >= info->chips)
(416,return 0;)
(417,info)
(418,!info->chips)
(419,info->ramp_hcn)
(420,hcn_max / RAMP_CT)
(421,info)
(422,drv_rolllimit)
(423,10)
(424,info->work)
(425,0xffffffff)
(426,ident)
(427,return -1;)
(428,compac)
(429,info->failing)
(430,last_task)
(431,compac)
(432,info->scanhash_ms * 9)
(433,info)
(434,info->work[info->job_id] = get_work(thr, thr->id)
(435,info->active)
(436,work)
(437,compac)
(438,i = 0)
(439,chips)
(440,job_id)
(441,&info->last_task)
(442,info->job_id)
(443,task_ms)
(444,info)
(445,if (!info->work[info->job_id])
(446,)
(447,info->active = true)
(448,thr->cgpu)
(449,compac->device_id)
(450,usb_nodev(compac)
(451,now)
(452,info->write_err)
(453,frequency != info->frequency)
(454,2 * MAX_IDLE * 1000 / max_task_wait)
(455,hcn_max)
(456,if (frequency != info->frequency)
(457,return hashes;)
(458,hashes)
(459,last_nonce)
(460,nodev)
(461,compac)
(462,now)
(463,info)
(464,fullscan_ms)
(465,)
(466,info)
(467,info)
(468,info->work[info->job_id])
(469,if (!info->chips)
(470,info)
(471,info)
(472,20)
(473,info->ramp_hcn)
(474,info)
(475,work)
(476,hcn_max)
(477,info->hashes)
(478,compac->device_id)
(479,if (info->dups * 2 >= info->chips && ms_tdiff(&now, &info->last_chain_inactive)
(480,job_id)
(481,info)
(482,cpu_yield = bound(max_task_wait / 20, 1, 100)
(483,info)
(484,info->frequency != info->frequency_requested && ms_tdiff(&now, &info->last_freq_set)
(485,frequency)
(486,)
(487,info)
(488,&info->last_scanhash)
(489,info)
(490,info->nonceless)
(491,true)
(492,info)
(493,device_id)
(494,ident)
(495,info->work[info->job_id]->drv_rolllimit--)
(496,failing)
(497,write_err)
(498,)
(499,hashes)
(500,job_id)
(501,i)
(502,shutdown)
(503,max_task_wait)
(504,info)
(505,9)
(506,info->dups * 2)
(507,free_work(info->work[i])
(508,scanhash_ms)
(509,0)
(510,hcn_max = info->hashrate * RAMP_MS / 1000)
(511,2)
(512,ms_tdiff(&now, &info->last_task)
(513,ms_tdiff(&now, &info->last_freq_set)
(514,-1)
(515,bound(info->fullscan_ms * 0.40, 5, 1000)
(516,1)
(517,frequency)
(518,&now)
(519,info->work[info->job_id]->drv_rolllimit)
(520,compac)
(521,LIBUSB_SUCCESS)
(522,i)
(523,0)
(524,info->work[info->job_id]->drv_rolllimit == 0)
(525,"%s %d: No valid hashes recently, attempting to reset")
(526,max_task_wait / 20)
(527,info->frequency)
(528,0)
(529,usbinfo)
(530,job_id)
(531,-1)
(532,info->work)
(533,RAMP_MS)
(534,info)
(535,info)
(536,work)
(537,info)
(538,info->ramp_hcn)
(539,info)
(540,&now)
(541,ramping)
(542,(char *)
(543,cgpu)
(544,work)
(545,hashrate)
(546,info->dups)
(547,NULL)
(548,0)
(549,info)
(550,chips)
(551,MAX_IDLE * 1000 / max_task_wait)
(552,usb_write(compac, (char *)
(553,nonceless)
(554,ramp_hcn)
(555,C_SENDWORK)
(556,if (info->ramping < RAMP_CT)
(557,work_tx)
(558,compac)
(559,compac)
(560,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^