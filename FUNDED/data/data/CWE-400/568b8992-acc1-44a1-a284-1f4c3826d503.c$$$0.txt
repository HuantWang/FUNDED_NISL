-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_11_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(globalReturnsTrue())
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
37,40
37,41
37,42
37,43
37,44
38,39
39,40
39,41
40,41
42,43
42,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
56,57
57,58
57,59
59,60
59,61
59,62
62,63
64,65
65,66
65,67
66,67
68,69
68,70
68,71
69,70
71,72
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
105,106
106,107
106,108
107,108
107,109
108,109
108,110
109,110
111,112
113,114
113,115
113,116
113,117
113,118
114,115
116,117
118,119
119,120
119,121
122,123
122,124
123,124
125,126
127,128
129,130
130,131
131,132
131,133
132,133
135,136
135,137
136,137
138,139
139,140
140,141
140,142
141,142
143,144
-----nextToken-----
2,4,8,10,14,16,20,25,27,28,31,35,41,43,45,49,51,52,55,58,60,61,63,67,70,72,73,77,79,84,85,90,91,94,98,99,101,104,110,112,115,117,120,121,124,126,128,133,134,137,142,144
-----computeFrom-----
12,13
12,14
65,66
65,67
75,76
75,77
88,89
88,90
92,93
92,94
107,108
107,109
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_11_bad(){    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_11_bad()
CWE400_Resource_Exhaustion__fscanf_fwrite_11_bad
{    int count;    /* Initialize count */    count = -1;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(globalReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(globalReturnsTrue())    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(52,45,0)
(7,66,0)
(16,15,0)
(54,40,0)
(45,51,0)
(37,48,0)
(0,51,0)
(20,40,0)
(6,15,0)
(9,51,0)
(73,20,0)
(67,23,0)
(64,51,0)
(15,58,0)
(31,53,0)
(29,40,0)
(66,14,0)
(23,54,0)
(15,19,0)
(33,35,0)
(10,3,0)
(39,34,0)
(38,45,0)
(55,65,0)
(62,30,0)
(18,19,0)
(12,21,0)
(28,57,0)
(65,16,0)
(61,3,0)
(11,20,0)
(40,29,0)
(57,19,0)
(43,46,0)
(11,35,0)
(32,62,0)
(19,57,0)
(69,53,0)
(15,56,0)
(19,51,0)
(50,20,0)
(3,51,0)
(23,17,0)
(47,57,0)
(57,45,0)
(42,35,0)
(49,21,0)
(13,43,0)
(41,51,0)
(8,21,0)
(68,35,0)
(27,58,0)
(54,23,0)
(15,16,0)
(58,15,0)
(60,23,0)
(63,29,0)
(72,51,0)
(26,56,0)
(34,51,0)
(71,51,0)
(20,11,0)
(20,50,0)
(59,54,0)
(51,22,0)
(36,34,0)
(56,15,0)
(25,15,0)
(16,65,0)
(53,19,0)
(40,21,0)
(1,33,0)
(2,40,0)
(70,11,0)
(62,19,0)
(23,54,1)
(35,42,1)
(69,31,1)
(16,15,1)
(28,47,1)
(1,16,1)
(60,67,1)
(40,29,1)
(18,45,1)
(20,40,1)
(44,23,1)
(26,6,1)
(68,53,1)
(73,70,1)
(10,44,1)
(24,44,1)
(19,57,1)
(62,32,1)
(13,16,1)
(53,19,1)
(15,56,1)
(20,50,1)
(56,26,1)
(3,61,1)
(52,34,1)
(1,43,1)
(45,38,1)
(33,35,1)
(31,19,1)
(6,65,1)
(11,35,1)
(25,58,1)
(66,7,1)
(43,13,1)
(24,62,1)
(4,40,1)
(58,27,1)
(63,2,1)
(42,68,1)
(54,59,1)
(70,33,1)
(5,11,1)
(7,53,1)
(20,73,1)
(39,3,1)
(36,39,1)
(11,20,1)
(15,25,1)
(29,63,1)
(34,36,1)
(33,1,1)
(38,52,1)
(15,19,1)
(53,69,1)
(68,66,1)
(57,45,1)
(27,56,1)
(59,60,1)
(67,4,1)
(65,55,1)
(15,58,1)
(62,19,1)
(55,11,1)
(16,65,1)
(70,35,1)
(44,4,1)
(32,5,1)
(61,10,1)
(47,18,1)
(54,40,1)
(57,28,1)
(24,5,1)
(43,16,2)
(18,44,2)
(47,44,2)
(67,4,2)
(1,11,2)
(73,11,2)
(32,5,2)
(26,11,2)
(39,44,2)
(65,11,2)
(11,11,2)
(52,44,2)
(19,57,2)
(57,44,2)
(66,53,2)
(45,44,2)
(11,35,2)
(11,44,2)
(69,44,2)
(10,44,2)
(25,11,2)
(35,44,2)
(15,19,2)
(61,44,2)
(11,20,2)
(23,4,2)
(40,29,2)
(57,45,2)
(73,44,2)
(16,15,2)
(53,19,2)
(68,44,2)
(54,40,2)
(62,5,2)
(23,54,2)
(20,11,2)
(20,50,2)
(16,65,2)
(6,11,2)
(15,58,2)
(7,53,2)
(42,44,2)
(70,44,2)
(3,44,2)
(20,44,2)
(33,35,2)
(27,11,2)
(70,11,2)
(5,44,2)
(15,11,2)
(58,11,2)
(31,44,2)
(20,40,2)
(13,16,2)
(60,4,2)
(55,11,2)
(56,11,2)
(34,44,2)
(16,11,2)
(53,44,2)
(36,44,2)
(38,44,2)
(54,4,2)
(28,44,2)
(59,4,2)
(19,44,2)
(33,11,2)
(15,56,2)
(62,19,2)
-----------------------------------
(0,i)
(1,i)
(2,count)
(3,i = 0)
(4,globalReturnsTrue()
(5,pFile)
(6,SENTENCE)
(7,1)
(8,count)
(9,if (pFile)
(10,i)
(11,i < (size_t)
(12,if(globalReturnsTrue()
(13,1)
(14,)
(15,fwrite(SENTENCE, sizeof(char)
(16,strlen(SENTENCE)
(17,)
(18,pFile)
(19,pFile = fopen(filename, "w+")
(20,(size_t)
(21,)
(22,)
(23,fscanf(stdin, "%d", &count)
(24,RET)
(25,pFile)
(26,char)
(27,SENTENCE)
(28,"w+")
(29,-1)
(30,)
(31,pFile)
(32,pFile)
(33,i++)
(34,*pFile = NULL)
(35,i = 0)
(36,NULL)
(37,if (strlen(SENTENCE)
(38,"output_bad.txt")
(39,pFile)
(40,count = -1)
(41,for (i = 0; i < (size_t)
(42,0)
(43,exit(1)
(44,globalReturnsTrue()
(45,*filename = "output_bad.txt")
(46,)
(47,filename)
(48,)
(49,if(globalReturnsTrue()
(50,size_t)
(51,)
(52,filename)
(53,pFile == NULL)
(54,&count)
(55,SENTENCE)
(56,sizeof(char)
(57,fopen(filename, "w+")
(58,strlen(SENTENCE)
(59,count)
(60,"%d")
(61,0)
(62,fclose(pFile)
(63,1)
(64,filename)
(65,strlen(SENTENCE)
(66,exit(1)
(67,stdin)
(68,i)
(69,NULL)
(70,i)
(71,if (pFile == NULL)
(72,pFile)
(73,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^