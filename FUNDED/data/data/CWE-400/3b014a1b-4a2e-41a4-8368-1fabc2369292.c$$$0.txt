-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_07_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read count from the console using fscanf() */
        fscanf(stdin, "%d", &count);
    }
    if(staticFive==5)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
54,55
54,56
55,56
57,58
57,59
58,59
58,60
59,60
62,63
64,65
65,66
67,68
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,14,16,20,21,26,28,29,32,36,37,43,45,47,52,53,56,60,61,63,66,71,72
-----computeFrom-----
12,13
12,14
18,19
18,20
34,35
34,36
50,51
50,52
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_07_bad(){    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_07_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_07_bad
{    int count;    /* Initialize count */    count = -1;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }    if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFive==5)    {        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read count from the console using fscanf() */        fscanf(stdin, "%d", &count);    }
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
if(staticFive==5)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(19,13,0)
(21,7,0)
(6,10,0)
(13,28,0)
(8,10,0)
(13,16,0)
(5,15,0)
(28,24,0)
(35,28,0)
(9,21,0)
(27,21,0)
(40,1,0)
(28,35,0)
(3,32,0)
(11,33,0)
(29,34,0)
(0,13,0)
(16,33,0)
(20,33,0)
(13,0,0)
(16,13,0)
(1,15,0)
(14,28,0)
(37,15,0)
(39,23,0)
(10,21,0)
(25,24,0)
(38,33,0)
(18,24,0)
(15,31,0)
(30,35,0)
(4,3,0)
(26,24,0)
(12,34,0)
(15,1,0)
(17,23,0)
(36,11,0)
(1,28,0)
(2,16,0)
(28,35,1)
(13,28,1)
(34,12,1)
(37,34,1)
(30,14,1)
(1,28,1)
(29,28,1)
(23,17,1)
(4,16,1)
(20,38,1)
(16,13,1)
(15,1,1)
(10,8,1)
(17,39,1)
(33,20,1)
(5,37,1)
(19,2,1)
(40,5,1)
(39,34,1)
(36,3,1)
(8,6,1)
(38,10,1)
(22,23,1)
(22,16,1)
(2,33,1)
(11,33,1)
(13,0,1)
(13,19,1)
(2,11,1)
(11,36,1)
(16,33,1)
(35,30,1)
(39,15,1)
(12,29,1)
(6,23,1)
(3,4,1)
(1,40,1)
(8,23,2)
(28,35,2)
(5,34,2)
(2,23,2)
(16,16,2)
(15,1,2)
(11,33,2)
(1,28,2)
(13,16,2)
(6,23,2)
(13,28,2)
(16,33,2)
(13,23,2)
(40,34,2)
(19,16,2)
(37,34,2)
(4,16,2)
(16,23,2)
(11,16,2)
(36,16,2)
(19,23,2)
(33,23,2)
(20,23,2)
(15,34,2)
(10,23,2)
(16,13,2)
(38,23,2)
(2,16,2)
(3,16,2)
(1,34,2)
(13,0,2)
-----------------------------------
(0,size_t)
(1,&count)
(2,i)
(3,printLine("Hello")
(4,"Hello")
(5,"%d")
(6,i)
(7,)
(8,0)
(9,for (i = 0; i < (size_t)
(10,i = 0)
(11,i++)
(12,5)
(13,(size_t)
(14,count)
(15,fscanf(stdin, "%d", &count)
(16,i < (size_t)
(17,5)
(18,count)
(19,count)
(20,0)
(21,)
(22,RET)
(23,staticFive==5)
(24,)
(25,if(staticFive==5)
(26,if(staticFive==5)
(27,i)
(28,count = -1)
(29,staticFive)
(30,1)
(31,)
(32,)
(33,i = 0)
(34,staticFive==5)
(35,-1)
(36,i)
(37,stdin)
(38,i)
(39,staticFive)
(40,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^