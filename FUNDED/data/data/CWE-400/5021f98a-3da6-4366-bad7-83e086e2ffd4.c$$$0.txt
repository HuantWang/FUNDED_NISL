-----label-----
0
-----code-----
static void goodB2G1()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(8)
    {
    case 7:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
    {
        size_t i = 0;
        /* FIX: Validate count before using it as the for loop variant */
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
    break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
26,27
27,28
31,32
32,33
32,34
33,34
37,38
37,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
43,44
43,45
44,45
49,50
49,51
50,51
51,52
51,53
52,53
54,55
54,56
56,57
58,59
58,60
59,60
59,61
60,61
60,62
61,62
64,65
64,66
65,66
68,69
69,70
69,71
69,72
69,73
70,71
71,72
71,73
72,73
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
88,89
89,90
90,91
90,92
91,92
-----nextToken-----
2,4,8,10,14,16,18,21,25,28,29,30,34,35,36,38,41,45,46,47,48,53,55,57,62,63,66,67,73,74,77,81,82,84,87,92,93,94
-----computeFrom-----
12,13
12,14
23,24
23,25
59,60
59,61
60,61
60,62
64,65
64,66
71,72
71,73
75,76
75,77
-----guardedBy-----
66,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G1(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }}
static void
goodB2G1()
goodB2G1
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(8)    {    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }
8
{    case 7:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:    {        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }    break;    }
case 7:
7
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
{        size_t i = 0;        /* FIX: Validate count before using it as the for loop variant */        if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
if (count > 0 && count <= 20)        {            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
count > 0 && count <= 20
count > 0
count
count
0
count <= 20
count
count
20
{            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
-----joern-----
(34,41,0)
(27,23,0)
(34,8,0)
(8,34,0)
(40,3,0)
(2,39,0)
(37,51,0)
(55,41,0)
(16,3,0)
(41,51,0)
(48,33,0)
(1,46,0)
(15,19,0)
(50,55,0)
(4,51,0)
(39,3,0)
(35,33,0)
(29,39,0)
(44,41,0)
(7,2,0)
(55,25,0)
(18,23,0)
(25,46,0)
(10,19,0)
(12,20,0)
(30,18,0)
(41,43,0)
(52,33,0)
(46,25,0)
(14,39,0)
(38,3,0)
(34,25,0)
(19,50,0)
(9,32,0)
(42,13,0)
(6,2,0)
(19,25,0)
(34,13,0)
(31,51,0)
(55,50,0)
(17,3,0)
(28,40,0)
(0,25,0)
(50,19,0)
(43,41,0)
(22,3,0)
(45,51,0)
(47,34,0)
(19,41,0)
(20,53,0)
(54,51,0)
(21,55,0)
(13,34,0)
(25,33,0)
(24,55,0)
(26,37,0)
(5,23,0)
(13,23,0)
(47,42,1)
(23,27,1)
(43,44,1)
(42,23,1)
(55,25,1)
(28,11,1)
(49,22,1)
(44,36,1)
(34,25,1)
(13,34,1)
(41,43,1)
(19,25,1)
(37,26,1)
(20,12,1)
(1,0,1)
(49,17,1)
(46,1,1)
(21,24,1)
(34,41,1)
(40,28,1)
(4,41,1)
(2,7,1)
(12,13,1)
(5,50,1)
(36,25,1)
(19,10,1)
(25,46,1)
(11,45,1)
(17,40,1)
(50,55,1)
(42,18,1)
(22,50,1)
(55,41,1)
(18,23,1)
(45,37,1)
(22,13,1)
(27,5,1)
(50,19,1)
(13,23,1)
(34,8,1)
(7,6,1)
(24,19,1)
(10,15,1)
(55,21,1)
(6,11,1)
(34,47,1)
(26,36,1)
(18,30,1)
(30,20,1)
(11,4,1)
(19,41,1)
(15,2,1)
(13,34,2)
(34,41,2)
(25,46,2)
(19,41,2)
(18,23,2)
(50,11,2)
(13,23,2)
(55,19,2)
(19,11,2)
(4,36,2)
(26,36,2)
(28,11,2)
(23,50,2)
(34,50,2)
(40,11,2)
(34,8,2)
(50,55,2)
(18,13,2)
(42,13,2)
(30,13,2)
(20,13,2)
(19,25,2)
(5,50,2)
(13,50,2)
(15,11,2)
(24,19,2)
(34,13,2)
(10,11,2)
(42,50,2)
(12,13,2)
(21,19,2)
(22,11,2)
(27,50,2)
(55,25,2)
(50,19,2)
(37,36,2)
(17,11,2)
(34,25,2)
(55,41,2)
(47,50,2)
(7,11,2)
(6,11,2)
(44,36,2)
(45,36,2)
(43,36,2)
(2,11,2)
(47,13,2)
(41,36,2)
(41,43,2)
(13,13,2)
-----------------------------------
(0,count)
(1,1)
(2,i = 0)
(3,)
(4,break;)
(5,i)
(6,i)
(7,0)
(8,size_t)
(9,for (i = 0; i < (size_t)
(10,0)
(11,8)
(12,"Hello")
(13,i < (size_t)
(14,if (count > 0 && count <= 20)
(15,count)
(16,default:)
(17,break;)
(18,i++)
(19,count > 0)
(20,printLine("Hello")
(21,20)
(22,break;)
(23,i = 0)
(24,count)
(25,count = -1)
(26,"Benign, fixed string")
(27,0)
(28,"Benign, fixed string")
(29,i)
(30,i)
(31,case 6:)
(32,)
(33,)
(34,(size_t)
(35,switch(6)
(36,6)
(37,printLine("Benign, fixed string")
(38,case 7:)
(39,)
(40,printLine("Benign, fixed string")
(41,count = RAND32()
(42,i)
(43,RAND32()
(44,count)
(45,break;)
(46,-1)
(47,count)
(48,count)
(49,RET)
(50,count > 0 && count <= 20)
(51,)
(52,switch(8)
(53,)
(54,default:)
(55,count <= 20)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^