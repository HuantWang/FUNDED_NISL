-----label-----
1
-----code-----
void
fdfree(struct proc *p)
{
	struct filedesc *fdp = p->p_fd;
	struct file *fp;
	int fd;

	if (--fdp->fd_refcnt > 0)
		return;
	for (fd = 0; fd <= fdp->fd_lastfile; fd++) {
		fp = fdp->fd_ofiles[fd];
		if (fp != NULL) {
			fdp->fd_ofiles[fd] = NULL;
			knote_fdclose(p, fd);
			 /* closef() expects a refcount of 2 */
			FREF(fp);
			(void) closef(fp, p);
		}
	}
	p->p_fd = NULL;
	if (fdp->fd_nfiles > NDFILE)
		free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE);
	if (NDHISLOTS(fdp->fd_nfiles) > NDHISLOTS(NDFILE)) {
		free(fdp->fd_himap, M_FILEDESC,
		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int));
		free(fdp->fd_lomap, M_FILEDESC,
		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int));
	}
	if (fdp->fd_cdir)
		vrele(fdp->fd_cdir);
	if (fdp->fd_rdir)
		vrele(fdp->fd_rdir);
	pool_put(&fdesc_pool, fdp);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
36,37
36,38
37,38
37,39
38,39
39,40
39,41
40,41
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
54,55
54,56
55,56
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
67,68
67,69
68,69
71,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
82,84
83,84
83,85
84,85
87,88
89,90
91,92
92,93
92,94
92,95
93,94
95,96
97,98
99,100
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
110,111
110,112
110,113
111,112
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
125,127
126,127
126,128
127,128
127,129
128,129
131,132
133,134
134,135
134,136
134,137
134,138
135,136
137,138
137,139
138,139
141,142
143,144
143,145
144,145
144,146
145,146
148,149
150,151
150,152
151,152
151,153
152,153
152,154
153,154
155,156
155,157
156,157
159,160
159,161
160,161
162,163
164,165
164,166
165,166
166,167
166,168
166,169
166,170
167,168
169,170
169,171
170,171
173,174
175,176
175,177
176,177
176,178
177,178
179,180
179,181
180,181
183,184
184,185
184,186
185,186
188,189
189,190
189,191
189,192
189,193
190,191
192,193
192,194
193,194
196,197
198,199
198,200
199,200
199,201
200,201
202,203
202,204
203,204
206,207
207,208
207,209
208,209
211,212
211,213
212,213
212,214
213,214
216,217
217,218
217,219
218,219
220,221
220,222
221,222
224,225
224,226
225,226
225,227
226,227
229,230
230,231
230,232
231,232
233,234
233,235
234,235
237,238
238,239
238,240
238,241
239,240
241,242
242,243
244,245
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,27,29,30,33,35,41,42,43,44,49,50,53,56,57,60,65,69,70,72,76,78,85,86,88,90,94,96,98,102,104,108,109,112,114,116,121,122,124,129,130,132,136,139,140,142,146,147,149,154,157,158,161,163,168,171,172,174,178,181,182,186,187,191,194,195,197,201,204,205,209,210,214,215,219,222,223,227,228,232,235,236,240,243,245
-----computeFrom-----
37,38
37,39
47,48
47,49
51,52
51,53
63,64
63,65
74,75
74,76
81,82
81,83
118,119
118,120
126,127
126,128
143,144
143,145
151,152
151,153
175,176
175,177
198,199
198,200
-----guardedBy-----
78,90
76,114
129,146
130,147
157,204
158,205
161,178
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidfdfree(struct proc *p){	struct filedesc *fdp = p->p_fd;	struct file *fp;	int fd;	if (--fdp->fd_refcnt > 0)		return;	for (fd = 0; fd <= fdp->fd_lastfile; fd++) {		fp = fdp->fd_ofiles[fd];		if (fp != NULL) {			fdp->fd_ofiles[fd] = NULL;			knote_fdclose(p, fd);			 /* closef() expects a refcount of 2 */			FREF(fp);			(void) closef(fp, p);		}	}	p->p_fd = NULL;	if (fdp->fd_nfiles > NDFILE)		free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE);	if (NDHISLOTS(fdp->fd_nfiles) > NDHISLOTS(NDFILE)) {		free(fdp->fd_himap, M_FILEDESC,		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int));		free(fdp->fd_lomap, M_FILEDESC,		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int));	}	if (fdp->fd_cdir)		vrele(fdp->fd_cdir);	if (fdp->fd_rdir)		vrele(fdp->fd_rdir);	pool_put(&fdesc_pool, fdp);}
void
fdfree(struct proc *p)
fdfree
struct proc *p
struct proc
proc
*p
*
p
{	struct filedesc *fdp = p->p_fd;	struct file *fp;	int fd;	if (--fdp->fd_refcnt > 0)		return;	for (fd = 0; fd <= fdp->fd_lastfile; fd++) {		fp = fdp->fd_ofiles[fd];		if (fp != NULL) {			fdp->fd_ofiles[fd] = NULL;			knote_fdclose(p, fd);			 /* closef() expects a refcount of 2 */			FREF(fp);			(void) closef(fp, p);		}	}	p->p_fd = NULL;	if (fdp->fd_nfiles > NDFILE)		free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE);	if (NDHISLOTS(fdp->fd_nfiles) > NDHISLOTS(NDFILE)) {		free(fdp->fd_himap, M_FILEDESC,		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int));		free(fdp->fd_lomap, M_FILEDESC,		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int));	}	if (fdp->fd_cdir)		vrele(fdp->fd_cdir);	if (fdp->fd_rdir)		vrele(fdp->fd_rdir);	pool_put(&fdesc_pool, fdp);}
struct filedesc *fdp = p->p_fd;
struct filedesc *fdp = p->p_fd;
struct filedesc
filedesc
*fdp = p->p_fd
*
fdp
= p->p_fd
p->p_fd
p
p
p_fd
struct file *fp;
struct file *fp;
struct file
file
*fp
*
fp
int fd;
int fd;
int
fd
fd
if (--fdp->fd_refcnt > 0)		return;
--fdp->fd_refcnt > 0
--fdp->fd_refcnt
fdp->fd_refcnt
fdp
fdp
fd_refcnt
0
return;
for (fd = 0; fd <= fdp->fd_lastfile; fd++) {		fp = fdp->fd_ofiles[fd];		if (fp != NULL) {			fdp->fd_ofiles[fd] = NULL;			knote_fdclose(p, fd);			 /* closef() expects a refcount of 2 */			FREF(fp);			(void) closef(fp, p);		}	}
fd = 0;
fd = 0
fd
fd
0
fd <= fdp->fd_lastfile
fd
fd
fdp->fd_lastfile
fdp
fdp
fd_lastfile
fd++
fd
fd
{		fp = fdp->fd_ofiles[fd];		if (fp != NULL) {			fdp->fd_ofiles[fd] = NULL;			knote_fdclose(p, fd);			 /* closef() expects a refcount of 2 */			FREF(fp);			(void) closef(fp, p);		}	}
fp = fdp->fd_ofiles[fd];
fp = fdp->fd_ofiles[fd]
fp
fp
fdp->fd_ofiles[fd]
fdp->fd_ofiles
fdp
fdp
fd_ofiles
fd
fd
if (fp != NULL) {			fdp->fd_ofiles[fd] = NULL;			knote_fdclose(p, fd);			 /* closef() expects a refcount of 2 */			FREF(fp);			(void) closef(fp, p);		}
fp != NULL
fp
fp
NULL
NULL
{			fdp->fd_ofiles[fd] = NULL;			knote_fdclose(p, fd);			 /* closef() expects a refcount of 2 */			FREF(fp);			(void) closef(fp, p);		}
fdp->fd_ofiles[fd] = NULL;
fdp->fd_ofiles[fd] = NULL
fdp->fd_ofiles[fd]
fdp->fd_ofiles
fdp
fdp
fd_ofiles
fd
fd
NULL
NULL
knote_fdclose(p, fd);
knote_fdclose(p, fd)
knote_fdclose
knote_fdclose
p
p
fd
fd
FREF(fp);
FREF(fp)
FREF
FREF
fp
fp
(void) closef(fp, p);
(void) closef(fp, p)
void
void

closef(fp, p)
closef
closef
fp
fp
p
p
p->p_fd = NULL;
p->p_fd = NULL
p->p_fd
p
p
p_fd
NULL
NULL
if (fdp->fd_nfiles > NDFILE)		free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE);
fdp->fd_nfiles > NDFILE
fdp->fd_nfiles
fdp
fdp
fd_nfiles
NDFILE
NDFILE
free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE);
free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE)
free
free
fdp->fd_ofiles
fdp
fdp
fd_ofiles
M_FILEDESC
M_FILEDESC
fdp->fd_nfiles * OFILESIZE
fdp->fd_nfiles
fdp
fdp
fd_nfiles
OFILESIZE
OFILESIZE
if (NDHISLOTS(fdp->fd_nfiles) > NDHISLOTS(NDFILE)) {		free(fdp->fd_himap, M_FILEDESC,		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int));		free(fdp->fd_lomap, M_FILEDESC,		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int));	}
NDHISLOTS(fdp->fd_nfiles) > NDHISLOTS(NDFILE)
NDHISLOTS(fdp->fd_nfiles)
NDHISLOTS
NDHISLOTS
fdp->fd_nfiles
fdp
fdp
fd_nfiles
NDHISLOTS(NDFILE)
NDHISLOTS
NDHISLOTS
NDFILE
NDFILE
{		free(fdp->fd_himap, M_FILEDESC,		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int));		free(fdp->fd_lomap, M_FILEDESC,		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int));	}
free(fdp->fd_himap, M_FILEDESC,		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int));
free(fdp->fd_himap, M_FILEDESC,		    NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int))
free
free
fdp->fd_himap
fdp
fdp
fd_himap
M_FILEDESC
M_FILEDESC
NDHISLOTS(fdp->fd_nfiles) * sizeof(u_int)
NDHISLOTS(fdp->fd_nfiles)
NDHISLOTS
NDHISLOTS
fdp->fd_nfiles
fdp
fdp
fd_nfiles
sizeof(u_int)
u_int
u_int
u_int

free(fdp->fd_lomap, M_FILEDESC,		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int));
free(fdp->fd_lomap, M_FILEDESC,		    NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int))
free
free
fdp->fd_lomap
fdp
fdp
fd_lomap
M_FILEDESC
M_FILEDESC
NDLOSLOTS(fdp->fd_nfiles) * sizeof(u_int)
NDLOSLOTS(fdp->fd_nfiles)
NDLOSLOTS
NDLOSLOTS
fdp->fd_nfiles
fdp
fdp
fd_nfiles
sizeof(u_int)
u_int
u_int
u_int

if (fdp->fd_cdir)		vrele(fdp->fd_cdir);
fdp->fd_cdir
fdp
fdp
fd_cdir
vrele(fdp->fd_cdir);
vrele(fdp->fd_cdir)
vrele
vrele
fdp->fd_cdir
fdp
fdp
fd_cdir
if (fdp->fd_rdir)		vrele(fdp->fd_rdir);
fdp->fd_rdir
fdp
fdp
fd_rdir
vrele(fdp->fd_rdir);
vrele(fdp->fd_rdir)
vrele
vrele
fdp->fd_rdir
fdp
fdp
fd_rdir
pool_put(&fdesc_pool, fdp);
pool_put(&fdesc_pool, fdp)
pool_put
pool_put
&fdesc_pool
fdesc_pool
fdesc_pool
fdp
fdp
-----joern-----
(24,2,0)
(10,121,0)
(108,85,0)
(128,52,0)
(40,28,0)
(124,129,0)
(99,115,0)
(89,105,0)
(7,105,0)
(36,61,0)
(119,115,0)
(1,53,0)
(53,52,0)
(13,26,0)
(22,74,0)
(82,60,0)
(60,97,0)
(57,20,0)
(105,89,0)
(58,107,0)
(66,52,0)
(19,8,0)
(85,52,0)
(78,43,0)
(37,52,0)
(51,28,0)
(95,50,0)
(15,128,0)
(107,79,0)
(94,54,0)
(105,96,0)
(123,45,0)
(67,76,0)
(24,41,0)
(115,45,0)
(121,52,0)
(97,117,0)
(42,76,0)
(40,38,0)
(29,81,0)
(71,79,0)
(109,89,0)
(63,52,0)
(83,72,0)
(18,80,0)
(115,52,0)
(121,124,0)
(118,2,0)
(3,45,0)
(61,36,0)
(52,45,0)
(79,107,0)
(102,118,0)
(124,39,0)
(64,53,0)
(55,31,0)
(79,74,0)
(56,45,0)
(50,52,0)
(81,29,0)
(66,96,0)
(133,28,0)
(41,45,0)
(129,113,0)
(74,52,0)
(12,93,0)
(47,61,0)
(6,24,0)
(80,7,0)
(107,72,0)
(116,66,0)
(76,81,0)
(90,106,0)
(110,60,0)
(92,29,0)
(61,28,0)
(96,66,0)
(13,54,0)
(129,124,0)
(60,107,0)
(120,53,0)
(52,128,0)
(125,45,0)
(77,40,0)
(105,7,0)
(75,55,0)
(48,45,0)
(80,52,0)
(36,52,0)
(29,85,0)
(16,36,0)
(129,32,0)
(113,129,0)
(68,80,0)
(73,90,0)
(54,13,0)
(27,26,0)
(20,114,0)
(97,31,0)
(96,105,0)
(101,34,0)
(26,52,0)
(106,90,0)
(54,94,0)
(81,76,0)
(4,96,0)
(49,128,0)
(104,19,0)
(103,111,0)
(30,19,0)
(118,28,0)
(8,19,0)
(74,79,0)
(127,74,0)
(0,28,0)
(26,13,0)
(38,40,0)
(35,45,0)
(115,119,0)
(98,90,0)
(23,45,0)
(5,36,0)
(90,52,0)
(33,94,0)
(7,80,0)
(70,38,0)
(61,34,0)
(117,97,0)
(55,107,0)
(91,32,0)
(59,50,0)
(21,66,0)
(100,93,0)
(88,45,0)
(112,38,0)
(25,85,0)
(118,31,0)
(62,81,0)
(113,63,0)
(85,29,0)
(128,2,0)
(46,24,0)
(87,119,0)
(38,52,0)
(132,26,0)
(124,121,0)
(96,39,0)
(63,113,0)
(76,52,0)
(93,107,0)
(53,64,0)
(131,41,0)
(114,37,0)
(34,31,0)
(17,121,0)
(43,52,0)
(14,124,0)
(69,43,0)
(60,2,0)
(97,60,0)
(32,129,0)
(37,114,0)
(114,20,0)
(19,52,0)
(9,45,0)
(79,28,0)
(126,37,0)
(86,51,0)
(44,106,0)
(65,63,0)
(79,34,0)
(84,118,0)
(11,37,0)
(122,63,0)
(130,52,0)
(86,97,1)
(26,27,1)
(112,70,1)
(37,52,1)
(53,52,1)
(58,40,1)
(24,2,1)
(46,40,1)
(32,91,1)
(84,34,1)
(120,1,1)
(124,121,1)
(1,43,1)
(105,7,1)
(38,52,1)
(111,20,1)
(51,28,1)
(36,52,1)
(28,0,1)
(19,104,1)
(87,64,1)
(8,19,1)
(76,52,1)
(93,12,1)
(79,74,1)
(19,52,1)
(113,63,1)
(74,52,1)
(100,107,1)
(109,7,1)
(69,8,1)
(108,25,1)
(17,54,1)
(33,13,1)
(93,107,1)
(20,114,1)
(57,114,1)
(69,50,1)
(50,52,1)
(103,111,1)
(73,98,1)
(44,90,1)
(118,28,1)
(97,60,1)
(6,46,1)
(106,90,1)
(114,37,1)
(115,52,1)
(90,52,1)
(128,2,1)
(75,118,1)
(12,100,1)
(116,124,1)
(66,52,1)
(30,50,1)
(51,86,1)
(103,115,1)
(80,52,1)
(25,62,1)
(52,128,1)
(129,32,1)
(121,10,1)
(91,113,1)
(24,6,1)
(4,66,1)
(15,49,1)
(22,58,1)
(85,52,1)
(118,2,1)
(18,68,1)
(50,59,1)
(95,96,1)
(21,116,1)
(65,122,1)
(76,42,1)
(7,80,1)
(132,81,1)
(115,119,1)
(77,28,1)
(11,52,1)
(68,4,1)
(29,85,1)
(47,36,1)
(90,73,1)
(16,93,1)
(115,99,1)
(20,57,1)
(74,127,1)
(79,34,1)
(55,107,1)
(27,132,1)
(131,24,1)
(96,105,1)
(26,52,1)
(67,106,1)
(43,52,1)
(54,94,1)
(95,54,1)
(53,120,1)
(101,61,1)
(54,13,1)
(5,16,1)
(119,87,1)
(66,21,1)
(71,74,1)
(60,2,1)
(129,113,1)
(96,66,1)
(64,53,1)
(59,95,1)
(78,69,1)
(55,75,1)
(81,76,1)
(13,26,1)
(92,85,1)
(99,119,1)
(61,28,1)
(77,51,1)
(110,55,1)
(104,30,1)
(94,33,1)
(86,93,1)
(36,5,1)
(79,28,1)
(61,47,1)
(132,106,1)
(107,79,1)
(133,20,1)
(124,129,1)
(82,110,1)
(60,82,1)
(63,52,1)
(102,84,1)
(89,109,1)
(41,131,1)
(79,71,1)
(40,38,1)
(0,133,1)
(61,36,1)
(14,121,1)
(106,44,1)
(126,11,1)
(34,101,1)
(127,22,1)
(80,18,1)
(43,78,1)
(38,112,1)
(85,108,1)
(29,92,1)
(70,77,1)
(62,76,1)
(118,102,1)
(105,89,1)
(42,67,1)
(10,17,1)
(60,107,1)
(121,52,1)
(63,65,1)
(128,15,1)
(49,130,1)
(98,41,1)
(81,29,1)
(87,43,1)
(97,117,1)
(37,126,1)
(40,28,1)
(122,14,1)
(32,54,2)
(115,119,2)
(44,20,2)
(118,28,2)
(63,54,2)
(59,20,2)
(94,20,2)
(64,53,2)
(55,93,2)
(124,54,2)
(70,40,2)
(79,34,2)
(77,20,2)
(96,66,2)
(30,50,2)
(81,76,2)
(34,93,2)
(38,40,2)
(10,54,2)
(61,28,2)
(6,20,2)
(96,105,2)
(55,107,2)
(29,106,2)
(121,52,2)
(119,20,2)
(1,43,2)
(93,107,2)
(43,20,2)
(116,54,2)
(69,20,2)
(16,93,2)
(26,20,2)
(40,40,2)
(4,54,2)
(79,28,2)
(43,52,2)
(38,52,2)
(105,54,2)
(5,93,2)
(20,114,2)
(41,20,2)
(7,54,2)
(38,20,2)
(77,40,2)
(103,111,2)
(70,20,2)
(67,106,2)
(13,26,2)
(74,52,2)
(37,52,2)
(14,54,2)
(62,106,2)
(100,40,2)
(12,40,2)
(128,2,2)
(51,28,2)
(74,40,2)
(58,40,2)
(52,128,2)
(65,54,2)
(60,107,2)
(79,74,2)
(104,50,2)
(26,52,2)
(114,37,2)
(132,20,2)
(85,52,2)
(51,40,2)
(115,20,2)
(122,54,2)
(87,20,2)
(66,54,2)
(54,94,2)
(36,52,2)
(93,40,2)
(120,43,2)
(60,93,2)
(95,20,2)
(105,7,2)
(25,106,2)
(112,40,2)
(121,54,2)
(127,40,2)
(7,80,2)
(50,20,2)
(54,20,2)
(98,20,2)
(47,93,2)
(8,19,2)
(133,20,2)
(96,54,2)
(75,93,2)
(91,54,2)
(81,29,2)
(63,52,2)
(112,20,2)
(97,117,2)
(78,20,2)
(113,54,2)
(92,106,2)
(106,90,2)
(90,20,2)
(46,20,2)
(84,93,2)
(61,93,2)
(106,20,2)
(131,20,2)
(33,20,2)
(22,40,2)
(85,106,2)
(53,52,2)
(24,2,2)
(99,20,2)
(81,106,2)
(36,93,2)
(64,43,2)
(113,63,2)
(105,89,2)
(129,113,2)
(129,54,2)
(76,52,2)
(61,36,2)
(97,60,2)
(17,54,2)
(13,20,2)
(110,93,2)
(102,93,2)
(24,20,2)
(109,54,2)
(53,43,2)
(86,40,2)
(118,93,2)
(19,52,2)
(82,93,2)
(80,52,2)
(107,40,2)
(108,106,2)
(29,85,2)
(76,106,2)
(124,121,2)
(118,2,2)
(101,93,2)
(97,93,2)
(42,106,2)
(27,20,2)
(66,52,2)
(90,52,2)
(129,32,2)
(68,54,2)
(79,40,2)
(8,50,2)
(21,54,2)
(71,40,2)
(40,38,2)
(73,20,2)
(115,52,2)
(89,54,2)
(28,20,2)
(0,20,2)
(80,54,2)
(40,28,2)
(40,20,2)
(107,79,2)
(19,50,2)
(54,13,2)
(60,2,2)
(18,54,2)
(50,52,2)
(111,20,2)
(124,129,2)
-----------------------------------
(0,0)
(1,fdp)
(2,struct proc *p)
(3,for (fd = 0; fd <= fdp->fd_lastfile; fd++)
(4,M_FILEDESC)
(5,fd_ofiles)
(6,p_fd)
(7,NDLOSLOTS(fdp->fd_nfiles)
(8,vrele(fdp->fd_cdir)
(9,fp)
(10,fd_himap)
(11,fdp)
(12,NULL)
(13,NDHISLOTS(fdp->fd_nfiles)
(14,M_FILEDESC)
(15,p_fd)
(16,fdp)
(17,fdp)
(18,fd_nfiles)
(19,fdp->fd_cdir)
(20,--fdp->fd_refcnt > 0)
(21,fd_lomap)
(22,fdp)
(23,fd)
(24,p->p_fd)
(25,fdp)
(26,fdp->fd_nfiles)
(27,fd_nfiles)
(28,fd = 0)
(29,fdp->fd_nfiles * OFILESIZE)
(30,fdp)
(31,)
(32,sizeof(u_int)
(33,NDFILE)
(34,fdp->fd_ofiles[fd] = NULL)
(35,if (--fdp->fd_refcnt > 0)
(36,fdp->fd_ofiles)
(37,fdp->fd_refcnt)
(38,fdp->fd_lastfile)
(39,)
(40,fd <= fdp->fd_lastfile)
(41,p->p_fd = NULL)
(42,fd_ofiles)
(43,fdp->fd_rdir)
(44,NDFILE)
(45,)
(46,p)
(47,fd)
(48,fdp)
(49,p)
(50,fdp->fd_cdir)
(51,fd++)
(52,*fdp = p->p_fd)
(53,fdp->fd_rdir)
(54,NDHISLOTS(fdp->fd_nfiles)
(55,FREF(fp)
(56,if (NDHISLOTS(fdp->fd_nfiles)
(57,0)
(58,fp)
(59,fd_cdir)
(60,closef(fp, p)
(61,fdp->fd_ofiles[fd])
(62,M_FILEDESC)
(63,fdp->fd_nfiles)
(64,vrele(fdp->fd_rdir)
(65,fd_nfiles)
(66,fdp->fd_lomap)
(67,fdp)
(68,fdp)
(69,fdp)
(70,fdp)
(71,fd)
(72,)
(73,fd_nfiles)
(74,fdp->fd_ofiles)
(75,fp)
(76,fdp->fd_ofiles)
(77,fd)
(78,fd_rdir)
(79,fdp->fd_ofiles[fd])
(80,fdp->fd_nfiles)
(81,free(fdp->fd_ofiles, M_FILEDESC, fdp->fd_nfiles * OFILESIZE)
(82,p)
(83,if (fp != NULL)
(84,p)
(85,fdp->fd_nfiles)
(86,fd)
(87,fdesc_pool)
(88,if (fdp->fd_cdir)
(89,sizeof(u_int)
(90,fdp->fd_nfiles)
(91,u_int)
(92,OFILESIZE)
(93,fp != NULL)
(94,NDHISLOTS(NDFILE)
(95,fdp)
(96,free(fdp->fd_lomap, M_FILEDESC,\n\\n\\t\\t    NDLOSLOTS(fdp->fd_nfiles)
(97,(void)
(98,fdp)
(99,fdp)
(100,fp)
(101,NULL)
(102,fd)
(103,RET)
(104,fd_cdir)
(105,NDLOSLOTS(fdp->fd_nfiles)
(106,fdp->fd_nfiles > NDFILE)
(107,fp = fdp->fd_ofiles[fd])
(108,fd_nfiles)
(109,u_int)
(110,fp)
(111,return;)
(112,fd_lastfile)
(113,NDHISLOTS(fdp->fd_nfiles)
(114,--fdp->fd_refcnt)
(115,pool_put(&fdesc_pool, fdp)
(116,fdp)
(117,void)
(118,knote_fdclose(p, fd)
(119,&fdesc_pool)
(120,fd_rdir)
(121,fdp->fd_himap)
(122,fdp)
(123,if (fdp->fd_nfiles > NDFILE)
(124,free(fdp->fd_himap, M_FILEDESC,\n\\n\\t\\t    NDHISLOTS(fdp->fd_nfiles)
(125,if (fdp->fd_rdir)
(126,fd_refcnt)
(127,fd_ofiles)
(128,p->p_fd)
(129,NDHISLOTS(fdp->fd_nfiles)
(130,fdp)
(131,NULL)
(132,fdp)
(133,fd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^