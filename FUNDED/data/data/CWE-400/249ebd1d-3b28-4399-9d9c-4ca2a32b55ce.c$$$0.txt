-----label-----
0
-----code-----
static void goodG2B2()
{
    int count;
    /* Initialize count */
    count = -1;
    switch(6)
    {
    case 6:
        /* FIX: Use a relatively small number */
        count = 20;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
43,44
45,46
45,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
63,64
65,66
66,67
68,69
69,70
70,71
70,72
71,72
76,77
77,78
77,79
78,79
-----nextToken-----
2,4,8,10,14,16,18,21,25,26,27,28,32,33,34,36,39,44,46,48,53,54,57,61,62,64,67,72,73,74,75,79,80,81
-----computeFrom-----
12,13
12,14
23,24
23,25
51,52
51,53
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    int count;    /* Initialize count */    count = -1;    switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
switch(6)    {    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use a relatively small number */        count = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
count = 20;
count = 20
count
count
20
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(9,28,0)
(13,22,0)
(33,3,0)
(43,46,0)
(11,37,0)
(5,37,0)
(42,30,0)
(17,19,0)
(4,26,0)
(16,22,0)
(25,22,0)
(18,3,0)
(7,19,0)
(20,26,0)
(23,37,0)
(9,46,0)
(12,26,0)
(38,30,0)
(19,3,0)
(44,17,0)
(31,4,0)
(34,3,0)
(40,8,0)
(21,26,0)
(15,9,0)
(16,9,0)
(14,40,0)
(46,43,0)
(2,39,0)
(45,16,0)
(41,3,0)
(39,3,0)
(9,30,0)
(29,46,0)
(9,16,0)
(6,17,0)
(1,19,0)
(32,22,0)
(36,32,0)
(30,26,0)
(28,9,0)
(24,26,0)
(35,43,0)
(46,37,0)
(0,24,1)
(22,25,1)
(16,22,1)
(32,36,1)
(34,16,1)
(27,46,1)
(2,0,1)
(38,27,1)
(42,38,1)
(9,15,1)
(14,16,1)
(45,32,1)
(41,39,1)
(46,43,1)
(39,2,1)
(4,31,1)
(35,29,1)
(9,46,1)
(20,30,1)
(9,28,1)
(16,9,1)
(0,20,1)
(25,13,1)
(17,44,1)
(6,0,1)
(40,14,1)
(10,41,1)
(31,27,1)
(24,4,1)
(13,17,1)
(36,40,1)
(30,42,1)
(10,34,1)
(9,30,1)
(45,22,1)
(32,22,1)
(43,35,1)
(44,6,1)
(15,45,1)
(41,0,2)
(14,16,2)
(13,0,2)
(32,16,2)
(40,16,2)
(45,0,2)
(42,27,2)
(32,22,2)
(34,0,2)
(39,0,2)
(44,0,2)
(16,0,2)
(15,0,2)
(6,0,2)
(16,16,2)
(16,22,2)
(16,9,2)
(46,43,2)
(31,27,2)
(9,46,2)
(20,27,2)
(9,30,2)
(45,16,2)
(9,16,2)
(4,27,2)
(38,27,2)
(24,27,2)
(36,16,2)
(2,0,2)
(15,16,2)
(22,0,2)
(9,28,2)
(17,0,2)
(30,27,2)
(9,0,2)
(25,0,2)
-----------------------------------
(0,7)
(1,i)
(2,"Benign, fixed string")
(3,)
(4,printLine("Benign, fixed string")
(5,switch(7)
(6,i)
(7,for (i = 0; i < (size_t)
(8,)
(9,(size_t)
(10,RET)
(11,count)
(12,case 6:)
(13,i)
(14,"Hello")
(15,count)
(16,i < (size_t)
(17,i = 0)
(18,default:)
(19,)
(20,break;)
(21,default:)
(22,i = 0)
(23,switch(6)
(24,break;)
(25,0)
(26,)
(27,6)
(28,size_t)
(29,count)
(30,count = 20)
(31,"Benign, fixed string")
(32,i++)
(33,case 7:)
(34,break;)
(35,1)
(36,i)
(37,)
(38,count)
(39,printLine("Benign, fixed string")
(40,printLine("Hello")
(41,break;)
(42,20)
(43,-1)
(44,0)
(45,i)
(46,count = -1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^