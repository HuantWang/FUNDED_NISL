-----label-----
0
-----code-----
static void goodG2B()
{
    size_t data;
    size_t *dataPtr1 = &data;
    size_t *dataPtr2 = &data;
    /* Initialize data */
    data = 0;
    {
        size_t data = *dataPtr1;
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        *dataPtr1 = data;
    }
    {
        size_t data = *dataPtr2;
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
46,47
47,48
48,49
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
58,59
60,61
62,63
62,64
63,64
64,65
64,66
65,66
67,68
67,69
69,70
70,71
71,72
73,74
73,75
74,75
75,76
75,77
77,78
77,79
80,81
80,82
80,83
81,82
81,83
82,83
84,85
84,86
85,86
87,88
89,90
89,91
89,92
89,93
89,94
90,91
91,92
91,93
92,93
94,95
94,96
95,96
95,97
97,98
99,100
99,101
100,101
102,103
102,104
103,104
105,106
106,107
106,108
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
123,126
124,125
126,127
128,129
130,131
131,132
131,133
132,133
134,135
136,137
137,138
137,139
138,139
140,141
142,143
143,144
144,145
144,146
145,146
-----nextToken-----
2,4,9,11,15,17,18,22,26,28,29,33,37,38,43,45,49,53,54,59,61,66,68,72,76,78,79,83,86,88,93,96,98,101,104,107,108,112,114,119,121,125,127,129,133,135,139,141,146,147
-----computeFrom-----
35,36
35,37
51,52
51,53
56,57
56,58
81,82
81,83
91,92
91,93
102,103
102,104
110,111
110,112
-----guardedBy-----
88,129
83,104
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    size_t data;    size_t *dataPtr1 = &data;    size_t *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        size_t data = *dataPtr1;        /* FIX: Use a relatively small number for memory allocation */        data = 20;        *dataPtr1 = data;    }    {        size_t data = *dataPtr2;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B()
goodG2B
{    size_t data;    size_t *dataPtr1 = &data;    size_t *dataPtr2 = &data;    /* Initialize data */    data = 0;    {        size_t data = *dataPtr1;        /* FIX: Use a relatively small number for memory allocation */        data = 20;        *dataPtr1 = data;    }    {        size_t data = *dataPtr2;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
size_t *dataPtr1 = &data;
size_t *dataPtr1 = &data;
size_t
size_t
*dataPtr1 = &data
*
dataPtr1
= &data
&data
data
data
size_t *dataPtr2 = &data;
size_t *dataPtr2 = &data;
size_t
size_t
*dataPtr2 = &data
*
dataPtr2
= &data
&data
data
data
data = 0;
data = 0
data
data
0
{        size_t data = *dataPtr1;        /* FIX: Use a relatively small number for memory allocation */        data = 20;        *dataPtr1 = data;    }
size_t data = *dataPtr1;
size_t data = *dataPtr1;
size_t
size_t
data = *dataPtr1
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
data = 20;
data = 20
data
data
20
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        size_t data = *dataPtr2;        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
size_t data = *dataPtr2;
size_t data = *dataPtr2;
size_t
size_t
data = *dataPtr2
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,26,0)
(65,47,0)
(52,64,0)
(0,52,0)
(23,55,0)
(69,26,0)
(55,19,0)
(23,64,0)
(37,24,0)
(66,32,0)
(45,32,0)
(4,47,0)
(5,18,0)
(55,23,0)
(31,63,0)
(38,66,0)
(68,31,0)
(18,50,0)
(55,59,0)
(35,50,0)
(28,20,0)
(42,52,0)
(14,49,0)
(17,9,0)
(33,64,0)
(7,10,0)
(44,39,0)
(20,39,0)
(40,0,0)
(53,5,0)
(36,59,0)
(10,32,0)
(6,49,0)
(14,22,0)
(62,61,0)
(2,32,0)
(0,39,0)
(66,14,0)
(64,23,0)
(1,60,0)
(18,5,0)
(58,39,0)
(26,19,0)
(32,50,0)
(51,60,0)
(11,63,0)
(54,19,0)
(26,69,0)
(46,14,0)
(56,0,0)
(8,50,0)
(64,33,0)
(10,7,0)
(67,10,0)
(21,31,0)
(48,7,0)
(20,52,0)
(27,55,0)
(47,52,0)
(59,55,0)
(15,22,0)
(58,52,0)
(9,34,0)
(16,45,0)
(19,24,0)
(63,50,0)
(41,69,0)
(60,51,0)
(12,58,0)
(32,45,0)
(61,50,0)
(24,18,0)
(3,22,0)
(19,63,0)
(57,61,0)
(24,19,0)
(51,43,0)
(49,50,0)
(7,49,0)
(22,49,0)
(29,50,0)
(25,18,0)
(64,52,0)
(52,39,0)
(56,47,1)
(24,18,1)
(48,61,1)
(4,52,1)
(57,62,1)
(58,12,1)
(56,51,1)
(24,37,1)
(62,18,1)
(14,46,1)
(67,48,1)
(30,19,1)
(14,22,1)
(20,28,1)
(46,66,1)
(61,57,1)
(20,52,1)
(18,5,1)
(5,53,1)
(7,10,1)
(25,32,1)
(12,0,1)
(45,16,1)
(58,52,1)
(32,45,1)
(47,65,1)
(28,58,1)
(66,38,1)
(69,41,1)
(41,30,1)
(54,14,1)
(52,64,1)
(9,17,1)
(1,47,1)
(3,7,1)
(19,24,1)
(66,32,1)
(10,67,1)
(13,20,1)
(51,60,1)
(37,54,1)
(15,3,1)
(22,15,1)
(36,27,1)
(64,33,1)
(55,19,1)
(38,22,1)
(53,25,1)
(0,52,1)
(65,4,1)
(27,42,1)
(64,23,1)
(17,26,1)
(23,55,1)
(40,56,1)
(26,69,1)
(59,36,1)
(16,2,1)
(13,9,1)
(0,40,1)
(10,32,1)
(55,59,1)
(42,26,1)
(60,1,1)
(26,19,1)
(47,52,1)
(1,47,2)
(10,32,2)
(56,26,2)
(12,26,2)
(4,26,2)
(23,55,2)
(18,5,2)
(59,26,2)
(20,52,2)
(0,52,2)
(60,47,2)
(36,26,2)
(28,26,2)
(55,26,2)
(40,26,2)
(26,19,2)
(9,26,2)
(55,59,2)
(65,26,2)
(47,26,2)
(24,18,2)
(64,26,2)
(32,45,2)
(27,26,2)
(19,24,2)
(17,26,2)
(7,10,2)
(51,60,2)
(51,47,2)
(58,26,2)
(58,52,2)
(14,22,2)
(64,23,2)
(64,33,2)
(66,32,2)
(42,26,2)
(23,26,2)
(47,52,2)
(26,69,2)
(52,26,2)
(52,64,2)
(0,26,2)
(20,26,2)
(55,19,2)
-----------------------------------
(0,wcscpy(myString, HELLO_STRING)
(1,1)
(2,dataPtr1)
(3,data)
(4,myString)
(5,&data)
(6,data)
(7,data = *dataPtr1)
(8,data)
(9,printLine("Input is less than the length of the source string")
(10,*dataPtr1)
(11,data)
(12,myString)
(13,RET)
(14,*dataPtr1 = data)
(15,20)
(16,data)
(17,"Input is less than the length of the source string")
(18,*dataPtr2 = &data)
(19,data = *dataPtr2)
(20,free(myString)
(21,myString)
(22,data = 20)
(23,malloc(data*sizeof(wchar_t)
(24,*dataPtr2)
(25,dataPtr2)
(26,data > wcslen(HELLO_STRING)
(27,data)
(28,myString)
(29,dataPtr2)
(30,data)
(31,)
(32,*dataPtr1 = &data)
(33,wchar_t *)
(34,)
(35,dataPtr1)
(36,wchar_t)
(37,dataPtr2)
(38,dataPtr1)
(39,)
(40,HELLO_STRING)
(41,HELLO_STRING)
(42,myString)
(43,)
(44,if (myString == NULL)
(45,&data)
(46,data)
(47,myString == NULL)
(48,data)
(49,)
(50,)
(51,exit(-1)
(52,myString = (wchar_t *)
(53,data)
(54,data)
(55,data*sizeof(wchar_t)
(56,myString)
(57,0)
(58,printWLine(myString)
(59,sizeof(wchar_t)
(60,-1)
(61,data = 0)
(62,data)
(63,)
(64,(wchar_t *)
(65,NULL)
(66,*dataPtr1)
(67,dataPtr1)
(68,if (data > wcslen(HELLO_STRING)
(69,wcslen(HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^