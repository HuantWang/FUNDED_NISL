-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
88,89
88,90
90,91
90,92
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,81,85,86,87,89,91,92
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad(){    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_16_bad
{    struct _twoIntsStruct * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);        break;    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(25,16,0)
(16,35,0)
(20,35,0)
(8,44,0)
(29,44,0)
(2,29,0)
(22,44,0)
(28,16,0)
(34,24,0)
(17,47,0)
(19,51,0)
(49,15,0)
(5,47,0)
(41,26,0)
(22,1,0)
(32,47,0)
(36,1,0)
(51,19,0)
(43,35,0)
(13,44,0)
(1,36,0)
(19,16,0)
(2,25,0)
(48,19,0)
(25,2,0)
(50,38,0)
(37,44,0)
(30,14,0)
(11,21,0)
(35,20,0)
(24,43,0)
(27,19,0)
(4,25,0)
(23,26,0)
(16,44,0)
(7,8,0)
(3,38,0)
(46,9,0)
(0,39,0)
(43,24,0)
(1,51,0)
(33,43,0)
(26,47,0)
(9,0,0)
(35,16,0)
(51,1,0)
(31,29,0)
(21,14,0)
(14,21,0)
(38,16,0)
(24,34,0)
(0,9,0)
(21,16,0)
(18,25,0)
(6,2,0)
(35,43,0)
(1,22,0)
(42,21,0)
(14,8,0)
(51,19,1)
(0,9,1)
(4,8,1)
(2,25,1)
(12,26,1)
(49,45,1)
(18,4,1)
(26,41,1)
(38,3,1)
(30,21,1)
(33,28,1)
(16,35,1)
(9,46,1)
(31,2,1)
(45,12,1)
(22,1,1)
(21,42,1)
(43,24,1)
(7,14,1)
(14,21,1)
(27,29,1)
(6,25,1)
(19,16,1)
(21,16,1)
(3,50,1)
(24,33,1)
(10,45,1)
(1,36,1)
(29,31,1)
(24,34,1)
(10,49,1)
(25,16,1)
(48,27,1)
(14,30,1)
(45,13,1)
(2,6,1)
(38,16,1)
(28,12,1)
(35,43,1)
(11,38,1)
(11,0,1)
(13,22,1)
(8,7,1)
(50,16,1)
(19,48,1)
(42,11,1)
(41,23,1)
(46,38,1)
(25,18,1)
(35,20,1)
(1,51,1)
(29,12,2)
(4,12,2)
(16,12,2)
(19,16,2)
(3,12,2)
(2,25,2)
(25,12,2)
(24,34,2)
(11,12,2)
(35,20,2)
(51,19,2)
(21,16,2)
(1,51,2)
(48,12,2)
(25,16,2)
(33,12,2)
(0,9,2)
(49,45,2)
(6,12,2)
(24,12,2)
(1,12,2)
(21,12,2)
(16,35,2)
(8,12,2)
(9,38,2)
(51,12,2)
(14,21,2)
(31,12,2)
(38,12,2)
(42,12,2)
(22,12,2)
(28,12,2)
(35,12,2)
(1,36,2)
(43,12,2)
(30,12,2)
(43,24,2)
(2,12,2)
(0,38,2)
(46,38,2)
(19,12,2)
(50,12,2)
(18,12,2)
(27,12,2)
(35,43,2)
(7,12,2)
(22,1,2)
(38,16,2)
(13,12,2)
(14,12,2)
-----------------------------------
(0,exit(-1)
(1,(twoIntsStruct *)
(2,data[0].intTwo)
(3,NULL)
(4,data)
(5,while(1)
(6,intTwo)
(7,0)
(8,data[0].intOne = 0)
(9,-1)
(10,RET)
(11,data)
(12,1)
(13,break;)
(14,data[0].intOne)
(15,)
(16,data = (struct _twoIntsStruct *)
(17,while(1)
(18,0)
(19,data[0])
(20,struct _twoIntsStruct *)
(21,data[0])
(22,printStructLine((twoIntsStruct *)
(23,data)
(24,sizeof(struct _twoIntsStruct)
(25,data[0])
(26,data = NULL)
(27,data)
(28,data)
(29,data[0].intTwo = 0)
(30,intOne)
(31,0)
(32,data)
(33,100)
(34,struct _twoIntsStruct)
(35,(struct _twoIntsStruct *)
(36,twoIntsStruct *)
(37,if (data == NULL)
(38,data == NULL)
(39,)
(40, sizeof(struct _twoIntsStruct)
(41,NULL)
(42,0)
(43,calloc(100, sizeof(struct _twoIntsStruct)
(44,)
(45,1)
(46,1)
(47,)
(48,0)
(49,break;)
(50,data)
(51,&data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^