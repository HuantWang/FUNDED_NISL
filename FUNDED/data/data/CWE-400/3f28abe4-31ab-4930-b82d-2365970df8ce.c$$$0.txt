-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
37,38
39,40
39,41
41,42
42,43
42,44
43,44
46,47
46,48
47,48
47,49
48,49
50,51
52,53
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
68,69
69,70
69,71
70,71
70,72
71,72
71,73
72,73
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
86,88
87,88
88,89
90,91
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,40,44,45,49,51,56,58,64,65,66,67,73,74,75,76,80,84,85,89,91
-----computeFrom-----
14,15
14,16
25,26
25,27
39,40
39,41
47,48
47,49
60,61
60,62
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad(){    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad()
CWE401_Memory_Leak__twoIntsStruct_realloc_11_bad
{    twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)realloc(data, 100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, 100*sizeof(twoIntsStruct))
realloc
realloc
data
data
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(29,31,0)
(7,46,0)
(42,16,0)
(24,41,0)
(19,42,0)
(32,26,0)
(7,3,0)
(45,3,0)
(27,46,0)
(30,43,0)
(11,36,0)
(15,13,0)
(37,41,0)
(47,15,0)
(10,43,0)
(4,17,0)
(25,23,0)
(18,25,0)
(36,10,0)
(25,3,0)
(3,25,0)
(26,36,0)
(14,44,0)
(20,23,0)
(3,42,0)
(3,7,0)
(28,16,0)
(41,37,0)
(17,43,0)
(34,12,0)
(40,16,0)
(41,24,0)
(13,17,0)
(15,23,0)
(0,16,0)
(24,23,0)
(9,26,0)
(8,24,0)
(1,15,0)
(21,24,0)
(44,23,0)
(34,31,0)
(46,7,0)
(23,25,0)
(37,43,0)
(13,15,0)
(22,10,0)
(25,18,0)
(31,34,0)
(5,42,0)
(35,44,0)
(39,7,0)
(23,43,0)
(26,23,0)
(38,13,0)
(36,26,0)
(38,15,1)
(9,34,1)
(42,19,1)
(27,39,1)
(1,47,1)
(20,33,1)
(9,44,1)
(7,46,1)
(2,37,1)
(36,11,1)
(21,8,1)
(25,3,1)
(19,5,1)
(45,20,1)
(47,10,1)
(23,25,1)
(4,13,1)
(34,31,1)
(14,23,1)
(31,29,1)
(44,35,1)
(25,18,1)
(15,1,1)
(3,42,1)
(3,7,1)
(32,9,1)
(26,32,1)
(46,27,1)
(26,23,1)
(10,22,1)
(39,45,1)
(15,23,1)
(6,2,1)
(13,38,1)
(37,41,1)
(11,26,1)
(44,23,1)
(24,23,1)
(2,33,1)
(17,4,1)
(13,15,1)
(33,42,1)
(8,17,1)
(22,36,1)
(41,24,1)
(29,44,1)
(24,21,1)
(36,26,1)
(35,14,1)
(13,15,2)
(9,33,2)
(35,33,2)
(44,23,2)
(47,33,2)
(25,33,2)
(3,7,2)
(3,42,2)
(8,33,2)
(23,33,2)
(29,44,2)
(24,23,2)
(21,33,2)
(17,33,2)
(15,33,2)
(45,33,2)
(37,41,2)
(46,33,2)
(26,23,2)
(32,33,2)
(14,33,2)
(36,33,2)
(7,33,2)
(23,25,2)
(25,18,2)
(11,33,2)
(44,33,2)
(3,33,2)
(4,33,2)
(26,33,2)
(27,33,2)
(41,33,2)
(41,24,2)
(36,26,2)
(34,31,2)
(39,33,2)
(10,33,2)
(24,33,2)
(37,33,2)
(7,46,2)
(1,33,2)
(13,33,2)
(34,44,2)
(25,3,2)
(31,44,2)
(20,33,2)
(38,33,2)
(22,33,2)
(15,23,2)
-----------------------------------
(0,if(globalReturnsTrue()
(1,0)
(2,globalReturnsTrue()
(3,realloc(data, 100*sizeof(twoIntsStruct)
(4,0)
(5,data)
(6,RET)
(7,100*sizeof(twoIntsStruct)
(8,data)
(9,data)
(10,data[0].intOne = 0)
(11,intOne)
(12,)
(13,data[0].intTwo)
(14,data)
(15,data[0])
(16,)
(17,data[0].intTwo = 0)
(18,twoIntsStruct *)
(19,NULL)
(20,data)
(21,0)
(22,0)
(23,data = (twoIntsStruct *)
(24,data[0])
(25,(twoIntsStruct *)
(26,data[0])
(27,twoIntsStruct)
(28,data)
(29,1)
(30,if (data == NULL)
(31,-1)
(32,0)
(33,globalReturnsTrue()
(34,exit(-1)
(35,NULL)
(36,data[0].intOne)
(37,printStructLine(&data[0])
(38,intTwo)
(39,100)
(40,if(globalReturnsTrue()
(41,&data[0])
(42,data = NULL)
(43,)
(44,data == NULL)
(45,data)
(46,sizeof(twoIntsStruct)
(47,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^