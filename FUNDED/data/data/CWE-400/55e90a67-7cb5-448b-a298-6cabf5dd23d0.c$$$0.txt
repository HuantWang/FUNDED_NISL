-----label-----
0
-----code-----
static void goodB2G()
{
    int count;
    /* Initialize count */
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read count from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to int */
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink(&count);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
19,20
19,21
21,22
21,23
21,24
23,24
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
30,32
30,33
30,34
31,32
33,34
35,36
37,38
39,40
41,42
42,43
43,44
43,45
44,45
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
57,58
58,59
58,60
59,60
61,62
62,63
-----nextToken-----
2,4,8,10,14,16,20,22,25,27,32,34,36,38,40,45,48,50,55,56,60,63
-----computeFrom-----
12,13
12,14
29,30
29,31
43,44
43,45
-----guardedBy-----
34,50
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static void goodB2G(){    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink(&count);}
static void
goodB2G()
goodB2G
{    int count;    /* Initialize count */    count = -1;    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }    CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink(&count);}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read count from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to int */            count = atoi(inputBuffer);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to int */            count = atoi(inputBuffer);        }
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink(&count);
CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink(&count)
CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink
CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink
&count
count
count
-----joern-----
(24,8,0)
(6,5,0)
(2,23,0)
(18,23,0)
(25,22,0)
(15,23,0)
(13,25,0)
(23,25,0)
(28,8,0)
(0,21,0)
(7,8,0)
(5,25,0)
(27,23,0)
(22,21,0)
(14,4,0)
(16,21,0)
(8,21,0)
(9,24,0)
(8,7,0)
(20,25,0)
(23,15,0)
(26,11,0)
(0,24,0)
(3,22,0)
(29,14,0)
(24,0,0)
(17,7,0)
(24,14,0)
(5,14,0)
(14,5,0)
(10,26,0)
(19,15,0)
(1,22,0)
(13,8,1)
(9,14,1)
(5,25,1)
(26,10,1)
(23,27,1)
(9,26,1)
(5,6,1)
(15,19,1)
(25,20,1)
(19,23,1)
(18,25,1)
(8,7,1)
(2,18,1)
(10,15,1)
(15,23,1)
(7,17,1)
(23,25,1)
(12,0,1)
(20,13,1)
(6,29,1)
(29,15,1)
(14,5,1)
(27,2,1)
(24,14,1)
(17,28,1)
(0,24,1)
(24,8,1)
(24,9,1)
(10,15,2)
(6,15,2)
(5,25,2)
(23,25,2)
(0,24,2)
(14,5,2)
(8,7,2)
(15,23,2)
(29,15,2)
(14,15,2)
(5,15,2)
(24,8,2)
(24,14,2)
(26,15,2)
-----------------------------------
(0,CWE400_Resource_Exhaustion__fgets_fwrite_64b_goodB2GSink(&count)
(1,inputBuffer)
(2,CHAR_ARRAY_SIZE)
(3,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(4,)
(5,atoi(inputBuffer)
(6,inputBuffer)
(7,-1)
(8,count = -1)
(9,count)
(10,"fgets()
(11,)
(12,RET)
(13,inputBuffer)
(14,count = atoi(inputBuffer)
(15,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(16,count)
(17,1)
(18,inputBuffer)
(19,NULL)
(20,"")
(21,)
(22,)
(23,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(24,&count)
(25,inputBuffer[CHAR_ARRAY_SIZE] = "")
(26,printLine("fgets()
(27,stdin)
(28,count)
(29,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^