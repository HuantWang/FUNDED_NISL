-----label-----
0
-----code-----
static void good2()
{
    if(1)
    {
        {
            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
            if (data == NULL) {exit(-1);}
            struct _twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine((twoIntsStruct *)&data[0]);
            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine((twoIntsStruct *)&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
97,99
97,100
98,99
100,101
102,103
102,104
103,104
105,106
106,107
106,108
107,108
110,111
110,112
111,112
111,113
112,113
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
121,122
123,124
124,125
124,126
125,126
125,127
126,127
126,128
127,128
132,133
133,134
133,135
134,135
134,136
135,136
135,137
136,137
141,142
142,143
142,144
143,144
145,146
145,147
146,147
146,148
147,148
149,150
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
160,161
-----nextToken-----
2,4,7,13,15,16,21,23,26,28,32,33,37,39,44,46,50,52,53,59,60,61,62,68,69,70,71,75,79,81,85,86,90,94,96,99,101,104,108,109,113,115,120,122,128,129,130,131,137,138,139,140,144,148,150,154,155,159,161
-----computeFrom-----
27,28
27,29
35,36
35,37
55,56
55,57
64,65
64,66
88,89
88,90
102,103
102,104
111,112
111,113
118,119
118,120
124,125
124,126
133,134
133,135
-----guardedBy-----
113,122
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(1)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(1)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }}
if(1)    {        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
1
{        {            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }    }
{            struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));            if (data == NULL) {exit(-1);}            struct _twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine((twoIntsStruct *)&data[0]);            tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }            free(data);        }
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct * data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
struct _twoIntsStruct
_twoIntsStruct
* data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
*
data
= (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct * tmpData;
struct _twoIntsStruct
_twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct));
tmpData = (struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
tmpData
tmpData
(struct _twoIntsStruct *)realloc(data, (130000)*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, (130000)*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(struct _twoIntsStruct)
(130000)
130000
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine((twoIntsStruct *)&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(58,63,0)
(17,60,0)
(23,67,0)
(16,65,0)
(26,17,0)
(27,84,0)
(64,65,0)
(71,26,0)
(38,31,0)
(39,76,0)
(70,63,0)
(13,52,0)
(84,59,0)
(34,57,0)
(21,10,0)
(32,50,0)
(76,67,0)
(26,65,0)
(40,22,0)
(73,81,0)
(20,59,0)
(22,11,0)
(46,19,0)
(10,21,0)
(78,42,0)
(63,80,0)
(17,26,0)
(9,49,0)
(41,67,0)
(56,19,0)
(7,0,0)
(19,20,0)
(45,41,0)
(1,40,0)
(62,67,0)
(75,67,0)
(47,72,0)
(65,67,0)
(57,30,0)
(81,84,0)
(19,46,0)
(74,26,0)
(18,50,0)
(42,72,0)
(28,64,0)
(50,33,0)
(15,7,0)
(30,25,0)
(11,22,0)
(54,49,0)
(11,65,0)
(61,60,0)
(55,4,0)
(36,67,0)
(49,69,0)
(69,49,0)
(2,81,0)
(41,54,0)
(30,57,0)
(43,69,0)
(33,50,0)
(33,52,0)
(69,43,0)
(86,41,0)
(54,41,0)
(85,84,0)
(40,62,0)
(50,84,0)
(53,86,0)
(7,15,0)
(65,57,0)
(20,19,0)
(48,67,0)
(44,33,0)
(49,54,0)
(5,84,0)
(24,11,0)
(25,30,0)
(51,25,0)
(81,46,0)
(52,59,0)
(62,40,0)
(68,64,0)
(66,69,0)
(60,67,0)
(37,80,0)
(79,86,0)
(67,29,0)
(6,43,0)
(35,54,0)
(42,76,0)
(54,35,0)
(43,6,0)
(5,67,0)
(82,11,0)
(57,34,0)
(72,42,0)
(49,65,0)
(46,81,0)
(25,21,0)
(21,25,0)
(3,72,0)
(12,15,0)
(57,65,0)
(40,1,0)
(80,63,0)
(5,65,0)
(4,59,0)
(80,4,0)
(19,56,0)
(14,17,0)
(72,65,0)
(8,5,0)
(84,41,0)
(22,40,0)
(63,84,0)
(25,21,1)
(15,12,1)
(13,33,1)
(42,72,1)
(66,9,1)
(86,53,1)
(58,70,1)
(86,41,1)
(8,20,1)
(40,1,1)
(84,41,1)
(9,45,1)
(54,49,1)
(17,26,1)
(77,83,1)
(68,28,1)
(54,35,1)
(73,2,1)
(20,19,1)
(70,52,1)
(55,80,1)
(76,39,1)
(8,86,1)
(64,65,1)
(61,17,1)
(5,84,1)
(28,65,1)
(5,8,1)
(21,51,1)
(19,46,1)
(57,34,1)
(65,57,1)
(3,64,1)
(81,84,1)
(60,61,1)
(24,82,1)
(37,63,1)
(18,32,1)
(7,15,1)
(33,50,1)
(78,72,1)
(72,65,1)
(14,26,1)
(74,76,1)
(72,47,1)
(51,16,1)
(41,54,1)
(79,41,1)
(11,24,1)
(49,65,1)
(26,65,1)
(19,56,1)
(2,4,1)
(49,69,1)
(39,42,1)
(50,18,1)
(62,40,1)
(81,73,1)
(44,50,1)
(32,84,1)
(82,60,1)
(52,13,1)
(27,85,1)
(46,81,1)
(4,55,1)
(22,11,1)
(43,6,1)
(69,43,1)
(45,62,1)
(71,74,1)
(85,86,1)
(26,71,1)
(47,3,1)
(17,14,1)
(5,65,1)
(16,83,1)
(63,58,1)
(64,68,1)
(53,79,1)
(63,84,1)
(43,66,1)
(80,37,1)
(3,7,1)
(57,30,1)
(40,22,1)
(12,64,1)
(21,10,1)
(77,5,1)
(42,78,1)
(33,44,1)
(50,84,1)
(30,25,1)
(84,27,1)
(11,65,1)
(80,63,1)
(79,83,2)
(25,21,2)
(50,84,2)
(15,64,2)
(72,83,2)
(54,49,2)
(41,54,2)
(11,65,2)
(3,83,2)
(33,50,2)
(5,83,2)
(49,65,2)
(19,86,2)
(85,86,2)
(57,34,2)
(43,83,2)
(7,15,2)
(41,83,2)
(76,83,2)
(12,64,2)
(24,83,2)
(33,86,2)
(57,30,2)
(64,83,2)
(43,6,2)
(18,86,2)
(81,86,2)
(63,86,2)
(61,83,2)
(21,10,2)
(44,86,2)
(58,86,2)
(27,86,2)
(64,65,2)
(17,26,2)
(69,43,2)
(7,64,2)
(46,86,2)
(22,11,2)
(5,65,2)
(19,56,2)
(70,86,2)
(40,1,2)
(65,57,2)
(30,83,2)
(54,35,2)
(42,72,2)
(4,86,2)
(2,86,2)
(62,83,2)
(11,83,2)
(51,83,2)
(46,81,2)
(8,83,2)
(78,83,2)
(69,83,2)
(19,46,2)
(80,63,2)
(60,83,2)
(5,84,2)
(84,41,2)
(72,65,2)
(39,83,2)
(37,86,2)
(65,83,2)
(71,83,2)
(16,83,2)
(21,83,2)
(80,86,2)
(42,83,2)
(50,86,2)
(13,86,2)
(68,83,2)
(28,83,2)
(86,83,2)
(66,83,2)
(32,86,2)
(22,83,2)
(86,41,2)
(20,86,2)
(53,83,2)
(20,19,2)
(63,84,2)
(14,83,2)
(73,86,2)
(49,69,2)
(62,40,2)
(45,83,2)
(57,83,2)
(26,65,2)
(55,86,2)
(17,83,2)
(49,83,2)
(40,22,2)
(84,86,2)
(81,84,2)
(26,83,2)
(30,25,2)
(52,86,2)
(54,83,2)
(82,83,2)
(25,83,2)
(40,83,2)
(47,83,2)
(74,83,2)
(9,83,2)
-----------------------------------
(0,)
(1,twoIntsStruct *)
(2,data)
(3,data)
(4,data[0].intTwo = 1)
(5,free(data)
(6,struct _twoIntsStruct)
(7,exit(-1)
(8,data)
(9,data)
(10,struct _twoIntsStruct)
(11,data[0])
(12,1)
(13,1)
(14,intTwo)
(15,-1)
(16,data)
(17,data[0].intTwo)
(18,0)
(19,(twoIntsStruct *)
(20,printStructLine((twoIntsStruct *)
(21,sizeof(struct _twoIntsStruct)
(22,&data[0])
(23,if (tmpData != NULL)
(24,0)
(25,100*sizeof(struct _twoIntsStruct)
(26,data[0])
(27,tmpData)
(28,data)
(29,)
(30,malloc(100*sizeof(struct _twoIntsStruct)
(31,)
(32,data)
(33,data[0].intOne)
(34,struct _twoIntsStruct *)
(35,struct _twoIntsStruct *)
(36,data)
(37,intTwo)
(38,if(1)
(39,0)
(40,(twoIntsStruct *)
(41,tmpData = (struct _twoIntsStruct *)
(42,data[0].intOne)
(43,sizeof(struct _twoIntsStruct)
(44,intOne)
(45,tmpData)
(46,&data[0])
(47,0)
(48,tmpData)
(49,realloc(data, (130000)
(50,data[0])
(51,100)
(52,data[0].intOne = 1)
(53,NULL)
(54,(struct _twoIntsStruct *)
(55,1)
(56,twoIntsStruct *)
(57,(struct _twoIntsStruct *)
(58,0)
(59,)
(60,data[0].intTwo = 0)
(61,0)
(62,printStructLine((twoIntsStruct *)
(63,data[0])
(64,data == NULL)
(65,* data = (struct _twoIntsStruct *)
(66,130000)
(67,)
(68,NULL)
(69,(130000)
(70,data)
(71,0)
(72,data[0])
(73,0)
(74,data)
(75,if (data == NULL)
(76,data[0].intOne = 0)
(77,RET)
(78,intOne)
(79,tmpData)
(80,data[0].intTwo)
(81,data[0])
(82,data)
(83,1)
(84,data = tmpData)
(85,data)
(86,tmpData != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^