-----label-----
0
-----code-----
static void goodB2G1()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
33,36
34,35
34,36
35,36
38,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
47,48
47,49
49,50
49,51
52,53
52,54
52,55
53,54
53,55
54,55
54,56
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
74,75
76,77
76,78
77,78
79,80
79,81
80,81
82,83
83,84
83,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
100,103
101,102
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
117,118
119,120
120,121
121,122
121,123
122,123
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,43,48,50,51,56,59,61,64,65,70,73,75,78,81,84,85,89,91,96,98,102,104,106,110,112,116,118,123,124
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
53,54
53,55
54,55
54,56
62,63
62,64
68,69
68,70
79,80
79,81
87,88
87,89
-----guardedBy-----
61,106
64,81
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G1(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G1()
goodB2G1
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(6,12,0)
(28,16,0)
(62,3,0)
(41,30,0)
(7,18,0)
(10,42,0)
(37,3,0)
(60,33,0)
(11,5,0)
(4,62,0)
(56,21,0)
(56,23,0)
(38,21,0)
(27,2,0)
(26,17,0)
(20,23,0)
(15,32,0)
(0,36,0)
(33,30,0)
(55,30,0)
(21,48,0)
(23,56,0)
(5,59,0)
(32,15,0)
(59,5,0)
(9,21,0)
(41,17,0)
(29,23,0)
(17,21,0)
(13,48,0)
(30,21,0)
(7,62,0)
(45,42,0)
(34,4,0)
(22,28,0)
(32,39,0)
(12,18,0)
(12,62,0)
(31,5,0)
(61,36,0)
(59,3,0)
(3,62,0)
(3,59,0)
(3,37,0)
(53,48,0)
(23,40,0)
(19,18,0)
(62,18,0)
(43,7,0)
(50,28,0)
(14,48,0)
(46,12,0)
(30,33,0)
(52,62,0)
(1,47,0)
(52,18,0)
(25,62,0)
(35,52,0)
(58,15,0)
(57,17,0)
(17,41,0)
(51,31,0)
(24,56,0)
(5,21,0)
(47,49,0)
(5,31,0)
(30,41,0)
(44,27,0)
(8,4,0)
(47,1,1)
(4,62,1)
(10,45,1)
(33,60,1)
(56,24,1)
(26,30,1)
(54,52,1)
(3,37,1)
(0,61,1)
(1,36,1)
(3,59,1)
(4,34,1)
(60,55,1)
(24,20,1)
(29,42,1)
(6,32,1)
(23,56,1)
(52,62,1)
(56,21,1)
(17,57,1)
(5,21,1)
(61,42,1)
(20,29,1)
(45,21,1)
(21,38,1)
(5,31,1)
(30,21,1)
(51,11,1)
(42,10,1)
(43,12,1)
(31,51,1)
(15,58,1)
(58,4,1)
(62,3,1)
(17,21,1)
(46,6,1)
(59,5,1)
(25,41,1)
(55,36,1)
(44,41,1)
(41,17,1)
(7,43,1)
(7,62,1)
(36,0,1)
(8,62,1)
(30,33,1)
(54,47,1)
(11,25,1)
(6,4,1)
(32,15,1)
(34,8,1)
(35,7,1)
(12,62,1)
(57,26,1)
(12,46,1)
(41,30,1)
(54,27,1)
(52,35,1)
(27,44,1)
(61,23,1)
(38,9,1)
(3,37,2)
(7,62,2)
(4,41,2)
(52,62,2)
(32,15,2)
(29,42,2)
(43,41,2)
(4,62,2)
(31,41,2)
(62,41,2)
(33,36,2)
(17,30,2)
(5,21,2)
(46,41,2)
(27,41,2)
(20,42,2)
(41,36,2)
(47,36,2)
(6,41,2)
(32,4,2)
(30,36,2)
(52,41,2)
(25,41,2)
(30,33,2)
(12,62,2)
(1,36,2)
(5,41,2)
(35,41,2)
(30,21,2)
(5,31,2)
(58,4,2)
(59,41,2)
(15,4,2)
(23,56,2)
(56,42,2)
(41,17,2)
(57,30,2)
(44,41,2)
(12,41,2)
(60,36,2)
(26,30,2)
(56,21,2)
(55,36,2)
(3,59,2)
(7,41,2)
(62,3,2)
(23,42,2)
(51,41,2)
(24,42,2)
(41,30,2)
(34,41,2)
(11,41,2)
(17,21,2)
(8,41,2)
(3,41,2)
(59,5,2)
-----------------------------------
(0,5)
(1,"Benign, fixed string")
(2,)
(3,(wchar_t *)
(4,myString == NULL)
(5,data*sizeof(wchar_t)
(6,myString)
(7,printWLine(myString)
(8,myString)
(9,data)
(10,5)
(11,data)
(12,wcscpy(myString, HELLO_STRING)
(13,if(STATIC_CONST_FIVE==5)
(14,data)
(15,-1)
(16,)
(17,data < 100)
(18,)
(19,if (myString == NULL)
(20,"%zu")
(21,data = 0)
(22,if (data > wcslen(HELLO_STRING)
(23,fscanf(stdin, "%zu", &data)
(24,data)
(25,myString)
(26,data)
(27,printLine("Input is less than the length of the source string or too large")
(28,)
(29,stdin)
(30,data > wcslen(HELLO_STRING)
(31,sizeof(wchar_t)
(32,exit(-1)
(33,wcslen(HELLO_STRING)
(34,NULL)
(35,myString)
(36,STATIC_CONST_FIVE!=5)
(37,wchar_t *)
(38,0)
(39,)
(40,)
(41,data > wcslen(HELLO_STRING)
(42,STATIC_CONST_FIVE==5)
(43,myString)
(44,"Input is less than the length of the source string or too large")
(45,STATIC_CONST_FIVE)
(46,HELLO_STRING)
(47,printLine("Benign, fixed string")
(48,)
(49,)
(50,myString)
(51,wchar_t)
(52,free(myString)
(53,if(STATIC_CONST_FIVE!=5)
(54,RET)
(55,data)
(56,&data)
(57,100)
(58,1)
(59,malloc(data*sizeof(wchar_t)
(60,HELLO_STRING)
(61,STATIC_CONST_FIVE)
(62,myString = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^