-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    data = NULL;
    while(1)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
40,41
40,42
40,43
41,42
43,44
46,47
47,48
47,49
48,49
50,51
53,54
53,55
55,56
55,57
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,45,49,51,52,54,56,57
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
static void goodG2B(){    char * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
static void
goodG2B()
goodG2B
{    char * data;    data = NULL;    while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
1
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);        break;    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(27,6,0)
(22,26,0)
(16,18,0)
(3,18,0)
(24,23,0)
(17,25,0)
(10,17,0)
(1,6,0)
(21,2,0)
(27,17,0)
(20,25,0)
(0,18,0)
(23,6,0)
(25,20,0)
(4,20,0)
(13,19,0)
(5,26,0)
(19,18,0)
(20,8,0)
(8,20,0)
(9,27,0)
(15,8,0)
(23,27,0)
(26,27,0)
(14,19,0)
(25,17,0)
(17,10,0)
(26,6,0)
(17,27,0)
(12,11,1)
(23,27,1)
(19,13,1)
(13,14,1)
(8,15,1)
(27,17,1)
(22,5,1)
(12,21,1)
(4,9,1)
(17,10,1)
(26,27,1)
(26,22,1)
(15,4,1)
(24,26,1)
(23,24,1)
(11,1,1)
(7,19,1)
(20,8,1)
(1,23,1)
(25,20,1)
(9,7,1)
(11,7,1)
(21,11,1)
(17,25,1)
(5,27,1)
(25,7,2)
(17,7,2)
(25,20,2)
(15,7,2)
(21,11,2)
(23,7,2)
(24,7,2)
(20,8,2)
(1,7,2)
(26,27,2)
(17,10,2)
(4,7,2)
(22,7,2)
(26,7,2)
(27,7,2)
(17,25,2)
(20,7,2)
(8,7,2)
(5,7,2)
(27,17,2)
(9,7,2)
(23,27,2)
-----------------------------------
(0,while(1)
(1,break;)
(2,)
(3,data)
(4,100)
(5,data)
(6,)
(7,1)
(8,sizeof(char)
(9,data)
(10,char *)
(11,1)
(12,RET)
(13,NULL)
(14,data)
(15,char)
(16,while(1)
(17,(char *)
(18,)
(19,data = NULL)
(20,100*sizeof(char)
(21,break;)
(22,"A String")
(23,printLine(data)
(24,data)
(25,ALLOCA(100*sizeof(char)
(26,strcpy(data, "A String")
(27,data = (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^