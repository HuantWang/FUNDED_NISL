-----label-----
0
-----code-----
static void test_line(void) {
        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
        const char *test = "TEST", *line;
        size_t n_bytes;
        int pair[2], r;

        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);
        assert(r >= 0);

        r = socket_init(&client, NULL, pair[0]);
        assert(r == 0);

        r = socket_init(&server, NULL, pair[1]);
        assert(r == 0);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && !line);

        r = socket_queue_line(&client, NULL, test, strlen(test));
        assert(r == 0);

        r = socket_queue_line(&client, NULL, test, strlen(test));
        assert(r == 0);

        r = socket_dispatch(&client, EPOLLOUT);
        assert(r == SOCKET_E_LOST_INTEREST);
        r = socket_dispatch(&server, EPOLLIN);
        assert(!r || r == SOCKET_E_PREEMPTED);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && line);
        assert(n_bytes == strlen(test));
        assert(memcmp(test, line, n_bytes) == 0);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && line);
        assert(n_bytes == strlen(test));
        assert(memcmp(test, line, n_bytes) == 0);

        r = socket_dequeue_line(&server, &line, &n_bytes);
        assert(!r && !line);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
9,30
9,31
9,32
9,33
9,34
9,35
9,36
9,37
9,38
9,39
9,40
9,41
10,11
11,12
11,13
12,13
14,15
15,16
17,18
18,19
19,20
19,21
19,22
20,21
22,23
22,24
24,25
25,26
25,27
26,27
28,29
30,31
30,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
39,42
41,42
41,43
41,44
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
56,59
58,59
58,60
60,61
62,63
64,65
65,66
65,67
66,67
68,69
68,70
68,71
68,72
68,73
69,70
71,72
73,74
76,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
90,92
90,93
90,94
91,92
93,94
94,95
96,97
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
106,108
107,108
110,111
111,112
111,113
112,113
114,115
114,116
114,117
114,118
115,116
117,118
118,119
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
130,132
131,132
134,135
135,136
135,137
136,137
138,139
138,140
138,141
138,142
139,140
141,142
142,143
144,145
145,146
147,148
148,149
150,151
151,152
151,153
152,153
154,155
154,156
155,156
156,157
158,159
159,160
161,162
162,163
162,164
163,164
165,166
165,167
165,168
165,169
165,170
166,167
168,169
169,170
171,172
173,174
175,176
175,177
176,177
178,179
180,181
181,182
181,183
182,183
184,185
184,186
185,186
188,189
189,190
189,191
190,191
192,193
192,194
192,195
192,196
192,197
193,194
195,196
196,197
198,199
200,201
202,203
202,204
203,204
205,206
207,208
208,209
208,210
209,210
211,212
211,213
212,213
215,216
216,217
216,218
217,218
219,220
219,221
219,222
220,221
222,223
223,224
225,226
227,228
228,229
228,230
229,230
231,232
231,233
232,233
234,235
236,237
237,238
237,239
238,239
240,241
240,242
240,243
241,242
243,244
244,245
246,247
248,249
249,250
249,251
250,251
252,253
252,254
253,254
254,255
256,257
256,258
257,258
259,260
261,262
262,263
262,264
263,264
265,266
265,267
265,268
265,269
266,267
268,269
269,270
271,272
272,273
274,275
275,276
277,278
278,279
278,280
279,280
281,282
281,283
282,283
283,284
285,286
287,288
288,289
288,290
289,290
291,292
291,293
292,293
294,295
294,296
295,296
297,298
299,300
300,301
300,302
301,302
303,304
303,305
304,305
304,306
304,307
304,308
305,306
307,308
309,310
311,312
314,315
315,316
315,317
316,317
318,319
318,320
318,321
318,322
319,320
321,322
322,323
324,325
325,326
327,328
328,329
330,331
331,332
331,333
332,333
334,335
334,336
335,336
336,337
338,339
340,341
341,342
341,343
342,343
344,345
344,346
345,346
347,348
347,349
348,349
350,351
352,353
353,354
353,355
354,355
356,357
356,358
357,358
357,359
357,360
357,361
358,359
360,361
362,363
364,365
367,368
368,369
368,370
369,370
371,372
371,373
371,374
371,375
372,373
374,375
375,376
377,378
378,379
380,381
381,382
383,384
384,385
384,386
385,386
387,388
387,389
388,389
389,390
391,392
392,393
-----nextToken-----
2,4,6,8,13,16,21,23,27,29,31,35,37,40,42,43,45,47,48,52,54,57,59,61,63,67,70,72,74,75,77,81,84,85,89,92,95,97,100,101,105,108,109,113,116,119,121,124,125,129,132,133,137,140,143,146,149,153,157,160,164,167,170,172,174,177,179,183,186,187,191,194,197,199,201,204,206,210,213,214,218,221,224,226,230,233,235,239,242,245,247,251,255,258,260,264,267,270,273,276,280,284,286,290,293,296,298,302,306,308,310,312,313,317,320,323,326,329,333,337,339,343,346,349,351,355,359,361,363,365,366,370,373,376,379,382,386,390,393
-----computeFrom-----
65,66
65,67
82,83
82,84
87,88
87,89
106,107
106,108
111,112
111,113
130,131
130,132
135,136
135,137
154,155
154,156
162,163
162,164
184,185
184,186
189,190
189,191
211,212
211,213
216,217
216,218
231,232
231,233
237,238
237,239
252,253
252,254
256,257
256,258
262,263
262,264
281,282
281,283
291,292
291,293
303,304
303,305
315,316
315,317
334,335
334,336
344,345
344,346
356,357
356,358
368,369
368,370
387,388
387,389
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static void test_line(void) {        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);        const char *test = "TEST", *line;        size_t n_bytes;        int pair[2], r;        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);        assert(r >= 0);        r = socket_init(&client, NULL, pair[0]);        assert(r == 0);        r = socket_init(&server, NULL, pair[1]);        assert(r == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);        r = socket_queue_line(&client, NULL, test, strlen(test));        assert(r == 0);        r = socket_queue_line(&client, NULL, test, strlen(test));        assert(r == 0);        r = socket_dispatch(&client, EPOLLOUT);        assert(r == SOCKET_E_LOST_INTEREST);        r = socket_dispatch(&server, EPOLLIN);        assert(!r || r == SOCKET_E_PREEMPTED);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);}
static void
test_line(void)
test_line
void
void


{        _c_cleanup_(socket_deinit) Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);        const char *test = "TEST", *line;        size_t n_bytes;        int pair[2], r;        r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);        assert(r >= 0);        r = socket_init(&client, NULL, pair[0]);        assert(r == 0);        r = socket_init(&server, NULL, pair[1]);        assert(r == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);        r = socket_queue_line(&client, NULL, test, strlen(test));        assert(r == 0);        r = socket_queue_line(&client, NULL, test, strlen(test));        assert(r == 0);        r = socket_dispatch(&client, EPOLLOUT);        assert(r == SOCKET_E_LOST_INTEREST);        r = socket_dispatch(&server, EPOLLIN);        assert(!r || r == SOCKET_E_PREEMPTED);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && line);        assert(n_bytes == strlen(test));        assert(memcmp(test, line, n_bytes) == 0);        r = socket_dequeue_line(&server, &line, &n_bytes);        assert(!r && !line);}
_c_cleanup_(socket_deinit)
_c_cleanup_(socket_deinit)
_c_cleanup_
_c_cleanup_
(socket_deinit)
socket_deinit
socket_deinit
)
Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
Socket client = SOCKET_NULL(client), server = SOCKET_NULL(server);
Socket
Socket
client = SOCKET_NULL(client)
client
= SOCKET_NULL(client)
SOCKET_NULL(client)
SOCKET_NULL
SOCKET_NULL
client
client
server = SOCKET_NULL(server)
server
= SOCKET_NULL(server)
SOCKET_NULL(server)
SOCKET_NULL
SOCKET_NULL
server
server
const char *test = "TEST", *line;
const char *test = "TEST", *line;
const char
*test = "TEST"
*
test
= "TEST"
"TEST"
*line
*
line
size_t n_bytes;
size_t n_bytes;
size_t
size_t
n_bytes
n_bytes
int pair[2], r;
int pair[2], r;
int
pair[2]
pair
[2]
2
r
r
r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair);
r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
r
r
socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
socketpair
socketpair
AF_UNIX
AF_UNIX
SOCK_STREAM
SOCK_STREAM
0
pair
pair
assert(r >= 0);
assert(r >= 0)
assert
assert
r >= 0
r
r
0
r = socket_init(&client, NULL, pair[0]);
r = socket_init(&client, NULL, pair[0])
r
r
socket_init(&client, NULL, pair[0])
socket_init
socket_init
&client
client
client
NULL
NULL
pair[0]
pair
pair
0
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_init(&server, NULL, pair[1]);
r = socket_init(&server, NULL, pair[1])
r
r
socket_init(&server, NULL, pair[1])
socket_init
socket_init
&server
server
server
NULL
NULL
pair[1]
pair
pair
1
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && !line);
assert(!r && !line)
assert
assert
!r && !line
!r
r
r
!line
line
line
r = socket_queue_line(&client, NULL, test, strlen(test));
r = socket_queue_line(&client, NULL, test, strlen(test))
r
r
socket_queue_line(&client, NULL, test, strlen(test))
socket_queue_line
socket_queue_line
&client
client
client
NULL
NULL
test
test
strlen(test)
strlen
strlen
test
test
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_queue_line(&client, NULL, test, strlen(test));
r = socket_queue_line(&client, NULL, test, strlen(test))
r
r
socket_queue_line(&client, NULL, test, strlen(test))
socket_queue_line
socket_queue_line
&client
client
client
NULL
NULL
test
test
strlen(test)
strlen
strlen
test
test
assert(r == 0);
assert(r == 0)
assert
assert
r == 0
r
r
0
r = socket_dispatch(&client, EPOLLOUT);
r = socket_dispatch(&client, EPOLLOUT)
r
r
socket_dispatch(&client, EPOLLOUT)
socket_dispatch
socket_dispatch
&client
client
client
EPOLLOUT
EPOLLOUT
assert(r == SOCKET_E_LOST_INTEREST);
assert(r == SOCKET_E_LOST_INTEREST)
assert
assert
r == SOCKET_E_LOST_INTEREST
r
r
SOCKET_E_LOST_INTEREST
SOCKET_E_LOST_INTEREST
r = socket_dispatch(&server, EPOLLIN);
r = socket_dispatch(&server, EPOLLIN)
r
r
socket_dispatch(&server, EPOLLIN)
socket_dispatch
socket_dispatch
&server
server
server
EPOLLIN
EPOLLIN
assert(!r || r == SOCKET_E_PREEMPTED);
assert(!r || r == SOCKET_E_PREEMPTED)
assert
assert
!r || r == SOCKET_E_PREEMPTED
!r
r
r
r == SOCKET_E_PREEMPTED
r
r
SOCKET_E_PREEMPTED
SOCKET_E_PREEMPTED
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && line);
assert(!r && line)
assert
assert
!r && line
!r
r
r
line
line
assert(n_bytes == strlen(test));
assert(n_bytes == strlen(test))
assert
assert
n_bytes == strlen(test)
n_bytes
n_bytes
strlen(test)
strlen
strlen
test
test
assert(memcmp(test, line, n_bytes) == 0);
assert(memcmp(test, line, n_bytes) == 0)
assert
assert
memcmp(test, line, n_bytes) == 0
memcmp(test, line, n_bytes)
memcmp
memcmp
test
test
line
line
n_bytes
n_bytes
0
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && line);
assert(!r && line)
assert
assert
!r && line
!r
r
r
line
line
assert(n_bytes == strlen(test));
assert(n_bytes == strlen(test))
assert
assert
n_bytes == strlen(test)
n_bytes
n_bytes
strlen(test)
strlen
strlen
test
test
assert(memcmp(test, line, n_bytes) == 0);
assert(memcmp(test, line, n_bytes) == 0)
assert
assert
memcmp(test, line, n_bytes) == 0
memcmp(test, line, n_bytes)
memcmp
memcmp
test
test
line
line
n_bytes
n_bytes
0
r = socket_dequeue_line(&server, &line, &n_bytes);
r = socket_dequeue_line(&server, &line, &n_bytes)
r
r
socket_dequeue_line(&server, &line, &n_bytes)
socket_dequeue_line
socket_dequeue_line
&server
server
server
&line
line
line
&n_bytes
n_bytes
n_bytes
assert(!r && !line);
assert(!r && !line)
assert
assert
!r && !line
!r
r
r
!line
line
line
-----joern-----
(68,59,0)
(90,161,0)
(85,87,0)
(149,48,0)
(160,157,0)
(66,143,0)
(57,171,0)
(17,28,0)
(128,59,0)
(63,50,0)
(131,24,0)
(19,30,0)
(144,126,0)
(186,24,0)
(142,181,0)
(102,21,0)
(30,19,0)
(140,151,0)
(12,41,0)
(53,23,0)
(9,57,0)
(73,24,0)
(83,68,0)
(158,148,0)
(0,123,0)
(176,63,0)
(52,68,0)
(117,61,0)
(78,42,0)
(23,49,0)
(21,88,0)
(161,90,0)
(179,6,0)
(146,71,0)
(154,162,0)
(63,65,0)
(41,23,0)
(2,11,0)
(115,30,0)
(149,161,0)
(30,165,0)
(98,51,0)
(36,65,0)
(67,55,0)
(15,42,0)
(109,118,0)
(164,179,0)
(178,88,0)
(166,178,0)
(81,139,0)
(86,79,0)
(75,139,0)
(93,55,0)
(77,130,0)
(87,36,0)
(181,74,0)
(68,138,0)
(151,91,0)
(175,24,0)
(133,139,0)
(30,65,0)
(86,24,0)
(165,30,0)
(28,19,0)
(56,154,0)
(31,3,0)
(49,23,0)
(115,65,0)
(43,62,0)
(1,178,0)
(137,138,0)
(22,94,0)
(104,7,0)
(91,99,0)
(27,148,0)
(152,104,0)
(107,24,0)
(116,51,0)
(150,178,0)
(41,12,0)
(33,141,0)
(82,67,0)
(14,36,0)
(46,42,0)
(98,4,0)
(103,57,0)
(172,6,0)
(154,143,0)
(112,7,0)
(15,24,0)
(7,104,0)
(10,24,0)
(127,24,0)
(79,86,0)
(148,64,0)
(151,55,0)
(135,94,0)
(60,116,0)
(118,74,0)
(122,155,0)
(33,131,0)
(28,101,0)
(108,171,0)
(74,181,0)
(91,130,0)
(173,24,0)
(119,30,0)
(37,19,0)
(97,171,0)
(121,71,0)
(174,55,0)
(99,91,0)
(185,41,0)
(92,83,0)
(29,149,0)
(95,146,0)
(132,117,0)
(100,50,0)
(3,55,0)
(40,24,0)
(88,24,0)
(131,33,0)
(123,24,0)
(84,49,0)
(145,158,0)
(181,51,0)
(68,52,0)
(47,117,0)
(50,65,0)
(61,71,0)
(76,146,0)
(9,24,0)
(6,179,0)
(157,51,0)
(111,165,0)
(8,36,0)
(154,56,0)
(175,62,0)
(133,123,0)
(22,126,0)
(139,75,0)
(159,49,0)
(55,24,0)
(74,94,0)
(161,149,0)
(18,166,0)
(11,2,0)
(72,27,0)
(166,21,0)
(101,28,0)
(21,166,0)
(7,67,0)
(171,57,0)
(3,63,0)
(45,33,0)
(64,148,0)
(35,171,0)
(36,87,0)
(30,115,0)
(156,24,0)
(80,30,0)
(87,85,0)
(165,55,0)
(94,24,0)
(171,65,0)
(126,144,0)
(50,63,0)
(148,158,0)
(70,96,0)
(96,74,0)
(125,79,0)
(71,61,0)
(71,24,0)
(91,151,0)
(168,49,0)
(166,18,0)
(163,115,0)
(42,15,0)
(101,24,0)
(129,22,0)
(139,133,0)
(94,74,0)
(25,88,0)
(79,99,0)
(144,24,0)
(104,24,0)
(88,4,0)
(123,148,0)
(154,48,0)
(67,7,0)
(23,24,0)
(69,64,0)
(4,88,0)
(167,63,0)
(106,2,0)
(65,24,0)
(16,28,0)
(134,65,0)
(48,24,0)
(170,61,0)
(138,51,0)
(178,166,0)
(83,24,0)
(44,93,0)
(85,24,0)
(113,99,0)
(141,33,0)
(90,24,0)
(184,130,0)
(120,46,0)
(187,65,0)
(116,61,0)
(124,2,0)
(18,24,0)
(55,93,0)
(4,98,0)
(126,22,0)
(51,24,0)
(74,118,0)
(38,79,0)
(39,4,0)
(143,154,0)
(130,91,0)
(51,157,0)
(61,116,0)
(74,96,0)
(183,48,0)
(68,83,0)
(63,3,0)
(75,24,0)
(99,24,0)
(114,141,0)
(177,49,0)
(158,51,0)
(147,98,0)
(13,146,0)
(20,87,0)
(180,26,0)
(62,175,0)
(136,41,0)
(169,56,0)
(162,154,0)
(19,24,0)
(26,24,0)
(2,104,0)
(62,26,0)
(42,46,0)
(110,51,0)
(155,161,0)
(57,9,0)
(12,24,0)
(32,62,0)
(61,117,0)
(26,63,0)
(33,45,0)
(48,154,0)
(95,24,0)
(161,155,0)
(182,126,0)
(138,68,0)
(162,51,0)
(141,83,0)
(148,27,0)
(179,173,0)
(46,65,0)
(153,91,0)
(63,26,0)
(146,95,0)
(59,68,0)
(11,24,0)
(105,52,0)
(6,65,0)
(173,179,0)
(89,162,0)
(58,36,0)
(148,123,0)
(5,45,0)
(54,133,0)
(106,124,1)
(4,98,1)
(140,113,1)
(171,65,1)
(184,77,1)
(160,110,1)
(141,83,1)
(149,29,1)
(3,55,1)
(62,26,1)
(162,89,1)
(92,9,1)
(112,67,1)
(85,87,1)
(180,90,1)
(68,138,1)
(46,120,1)
(66,56,1)
(170,116,1)
(28,16,1)
(56,169,1)
(55,93,1)
(71,61,1)
(67,55,1)
(21,88,1)
(133,54,1)
(171,108,1)
(145,0,1)
(95,146,1)
(178,1,1)
(130,184,1)
(181,51,1)
(162,51,1)
(173,179,1)
(16,17,1)
(139,81,1)
(61,116,1)
(165,55,1)
(115,65,1)
(41,136,1)
(97,35,1)
(54,123,1)
(64,69,1)
(33,141,1)
(175,62,1)
(50,65,1)
(74,118,1)
(139,133,1)
(114,83,1)
(70,181,1)
(132,47,1)
(154,162,1)
(159,177,1)
(63,65,1)
(4,39,1)
(0,85,1)
(28,19,1)
(30,165,1)
(136,185,1)
(157,160,1)
(101,28,1)
(72,64,1)
(115,163,1)
(2,104,1)
(182,22,1)
(79,125,1)
(30,115,1)
(52,105,1)
(150,21,1)
(147,25,1)
(27,72,1)
(88,4,1)
(20,36,1)
(148,64,1)
(178,88,1)
(17,19,1)
(22,129,1)
(8,58,1)
(119,80,1)
(67,82,1)
(131,33,1)
(91,130,1)
(39,98,1)
(155,122,1)
(19,30,1)
(86,79,1)
(146,13,1)
(104,7,1)
(78,144,1)
(161,149,1)
(6,172,1)
(75,139,1)
(13,76,1)
(74,181,1)
(122,149,1)
(166,21,1)
(94,74,1)
(124,104,1)
(68,59,1)
(158,51,1)
(108,97,1)
(176,3,1)
(87,20,1)
(25,11,1)
(63,50,1)
(18,166,1)
(2,106,1)
(134,51,1)
(34,131,1)
(30,65,1)
(53,65,1)
(77,153,1)
(103,171,1)
(36,14,1)
(23,49,1)
(46,65,1)
(98,147,1)
(22,94,1)
(11,2,1)
(149,48,1)
(35,173,1)
(158,145,1)
(68,52,1)
(59,128,1)
(109,96,1)
(47,170,1)
(126,182,1)
(29,48,1)
(84,168,1)
(81,133,1)
(9,57,1)
(60,121,1)
(1,150,1)
(126,22,1)
(6,65,1)
(31,180,1)
(7,67,1)
(181,142,1)
(141,114,1)
(144,126,1)
(142,135,1)
(138,51,1)
(96,70,1)
(102,88,1)
(172,164,1)
(137,92,1)
(79,99,1)
(98,51,1)
(58,15,1)
(161,155,1)
(146,71,1)
(36,65,1)
(37,175,1)
(50,100,1)
(165,111,1)
(179,6,1)
(125,38,1)
(91,151,1)
(129,94,1)
(116,51,1)
(12,41,1)
(113,12,1)
(177,53,1)
(148,27,1)
(41,23,1)
(153,151,1)
(76,71,1)
(121,86,1)
(83,68,1)
(135,18,1)
(152,101,1)
(21,102,1)
(167,176,1)
(14,8,1)
(148,158,1)
(151,55,1)
(51,157,1)
(15,42,1)
(120,78,1)
(57,171,1)
(33,45,1)
(5,141,1)
(43,26,1)
(185,23,1)
(128,52,1)
(49,84,1)
(166,178,1)
(82,152,1)
(57,103,1)
(38,99,1)
(26,63,1)
(45,5,1)
(89,183,1)
(151,140,1)
(111,37,1)
(3,31,1)
(143,66,1)
(117,132,1)
(7,112,1)
(187,134,1)
(110,55,1)
(99,91,1)
(69,158,1)
(118,109,1)
(42,46,1)
(169,162,1)
(123,148,1)
(133,123,1)
(93,44,1)
(90,161,1)
(62,32,1)
(61,117,1)
(116,60,1)
(48,154,1)
(154,143,1)
(183,95,1)
(87,36,1)
(100,167,1)
(138,137,1)
(65,187,1)
(164,75,1)
(44,174,1)
(80,165,1)
(154,56,1)
(74,96,1)
(168,159,1)
(32,43,1)
(163,119,1)
(105,138,1)
(63,3,1)
(171,65,2)
(74,96,2)
(165,55,2)
(166,178,2)
(57,171,2)
(154,162,2)
(162,51,2)
(19,30,2)
(83,68,2)
(181,51,2)
(104,7,2)
(141,83,2)
(139,133,2)
(6,65,2)
(101,28,2)
(144,126,2)
(131,33,2)
(81,133,2)
(7,67,2)
(166,21,2)
(148,64,2)
(46,65,2)
(63,65,2)
(179,6,2)
(74,181,2)
(51,157,2)
(62,26,2)
(94,74,2)
(178,88,2)
(45,141,2)
(2,104,2)
(36,65,2)
(98,51,2)
(30,65,2)
(116,51,2)
(3,55,2)
(75,139,2)
(99,91,2)
(41,23,2)
(5,141,2)
(148,27,2)
(133,123,2)
(91,151,2)
(63,50,2)
(55,93,2)
(28,19,2)
(33,141,2)
(126,22,2)
(148,158,2)
(95,146,2)
(87,36,2)
(50,65,2)
(18,166,2)
(146,71,2)
(21,88,2)
(33,45,2)
(26,63,2)
(88,4,2)
(68,52,2)
(161,155,2)
(67,55,2)
(138,51,2)
(91,130,2)
(15,42,2)
(161,149,2)
(9,57,2)
(63,3,2)
(158,51,2)
(122,149,2)
(151,55,2)
(4,98,2)
(175,62,2)
(149,48,2)
(115,65,2)
(74,118,2)
(182,22,2)
(85,87,2)
(71,61,2)
(154,56,2)
(30,115,2)
(154,143,2)
(11,2,2)
(48,154,2)
(23,49,2)
(173,179,2)
(123,148,2)
(68,59,2)
(86,79,2)
(1,21,2)
(42,46,2)
(12,41,2)
(79,99,2)
(22,94,2)
(90,161,2)
(155,149,2)
(178,21,2)
(68,138,2)
(61,117,2)
(30,165,2)
(61,116,2)
(150,21,2)
-----------------------------------
(0,r)
(1,SOCKET_E_PREEMPTED)
(2,r == SOCKET_E_LOST_INTEREST)
(3,&client)
(4,socket_dispatch(&server, EPOLLIN)
(5,line)
(6,strlen(test)
(7,socket_dispatch(&client, EPOLLOUT)
(8,line)
(9,assert(memcmp(test, line, n_bytes)
(10,server)
(11,assert(r == SOCKET_E_LOST_INTEREST)
(12,assert(r >= 0)
(13,0)
(14,n_bytes)
(15,assert(n_bytes == strlen(test)
(16,0)
(17,r)
(18,assert(!r || r == SOCKET_E_PREEMPTED)
(19,r = socket_queue_line(&client, NULL, test, strlen(test)
(20,0)
(21,!r)
(22,!r)
(23,r = socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
(24,)
(25,r)
(26,r = socket_queue_line(&client, NULL, test, strlen(test)
(27,&n_bytes)
(28,r == 0)
(29,r)
(30,socket_queue_line(&client, NULL, test, strlen(test)
(31,client)
(32,0)
(33,!r && !line)
(34,RET)
(35,test)
(36,memcmp(test, line, n_bytes)
(37,r)
(38,r)
(39,EPOLLIN)
(40,test)
(41,r >= 0)
(42,n_bytes == strlen(test)
(43,r)
(44,client)
(45,!line)
(46,strlen(test)
(47,pair)
(48,r = socket_dequeue_line(&server, &line, &n_bytes)
(49,socketpair(AF_UNIX, SOCK_STREAM, 0, pair)
(50,strlen(test)
(51,server = SOCKET_NULL(server)
(52,&line)
(53,r)
(54,r)
(55,client = SOCKET_NULL(client)
(56,&line)
(57,memcmp(test, line, n_bytes)
(58,test)
(59,&n_bytes)
(60,server)
(61,socket_init(&server, NULL, pair[1])
(62,r == 0)
(63,socket_queue_line(&client, NULL, test, strlen(test)
(64,&line)
(65,*test = "TEST")
(66,n_bytes)
(67,&client)
(68,socket_dequeue_line(&server, &line, &n_bytes)
(69,line)
(70,line)
(71,r = socket_init(&server, NULL, pair[1])
(72,n_bytes)
(73,pair)
(74,socket_dequeue_line(&server, &line, &n_bytes)
(75,assert(!r && line)
(76,r)
(77,pair)
(78,n_bytes)
(79,r == 0)
(80,NULL)
(81,line)
(82,client)
(83,r = socket_dequeue_line(&server, &line, &n_bytes)
(84,pair)
(85,assert(memcmp(test, line, n_bytes)
(86,assert(r == 0)
(87,memcmp(test, line, n_bytes)
(88,r = socket_dispatch(&server, EPOLLIN)
(89,server)
(90,assert(!r && !line)
(91,socket_init(&client, NULL, pair[0])
(92,r)
(93,SOCKET_NULL(client)
(94,r = socket_dequeue_line(&server, &line, &n_bytes)
(95,assert(r == 0)
(96,&line)
(97,line)
(98,&server)
(99,r = socket_init(&client, NULL, pair[0])
(100,test)
(101,assert(r == 0)
(102,r)
(103,0)
(104,r = socket_dispatch(&client, EPOLLOUT)
(105,line)
(106,SOCKET_E_LOST_INTEREST)
(107,r)
(108,n_bytes)
(109,n_bytes)
(110,server)
(111,client)
(112,EPOLLOUT)
(113,r)
(114,r)
(115,strlen(test)
(116,&server)
(117,pair[1])
(118,&n_bytes)
(119,test)
(120,test)
(121,r)
(122,line)
(123,r = socket_dequeue_line(&server, &line, &n_bytes)
(124,r)
(125,0)
(126,!r && line)
(127,line)
(128,n_bytes)
(129,r)
(130,pair[0])
(131,assert(!r && !line)
(132,1)
(133,!r)
(134,test)
(135,r)
(136,0)
(137,server)
(138,&server)
(139,!r && line)
(140,client)
(141,!r)
(142,server)
(143,&n_bytes)
(144,assert(!r && line)
(145,server)
(146,r == 0)
(147,server)
(148,socket_dequeue_line(&server, &line, &n_bytes)
(149,!r)
(150,r)
(151,&client)
(152,r)
(153,NULL)
(154,socket_dequeue_line(&server, &line, &n_bytes)
(155,!line)
(156,client)
(157,SOCKET_NULL(server)
(158,&server)
(159,SOCK_STREAM)
(160,server)
(161,!r && !line)
(162,&server)
(163,test)
(164,n_bytes)
(165,&client)
(166,!r || r == SOCKET_E_PREEMPTED)
(167,test)
(168,0)
(169,line)
(170,NULL)
(171,memcmp(test, line, n_bytes)
(172,test)
(173,assert(n_bytes == strlen(test)
(174,client)
(175,assert(r == 0)
(176,NULL)
(177,AF_UNIX)
(178,r == SOCKET_E_PREEMPTED)
(179,n_bytes == strlen(test)
(180,r)
(181,&server)
(182,line)
(183,r)
(184,0)
(185,r)
(186,n_bytes)
(187,"TEST")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^