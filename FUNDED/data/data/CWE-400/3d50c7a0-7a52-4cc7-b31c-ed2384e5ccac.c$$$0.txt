-----label-----
0
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_goodG2BSink(void * dataVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    size_t * dataPtr = (size_t *)dataVoidPtr;
    /* dereference dataPtr into data */
    size_t data = (*dataPtr);
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
21,22
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
35,36
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
45,46
45,47
45,48
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
54,57
54,58
54,59
55,56
56,57
56,58
57,58
59,60
59,61
60,61
60,62
62,63
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
74,75
74,76
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
88,91
89,90
91,92
93,94
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
109,110
109,111
110,111
-----nextToken-----
2,4,6,8,9,14,16,17,22,24,26,30,32,37,41,43,44,48,51,53,58,61,63,66,69,72,73,77,79,84,86,90,92,94,98,100,104,106,111,112
-----computeFrom-----
46,47
46,48
56,57
56,58
67,68
67,69
75,76
75,77
-----guardedBy-----
53,94
48,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_goodG2BSink(void * dataVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_goodG2BSink(void * dataVoidPtr)
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_connect_socket_64b_goodG2BSink
void * dataVoidPtr
void
* dataVoidPtr
*
dataVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    size_t * dataPtr = (size_t *)dataVoidPtr;    /* dereference dataPtr into data */    size_t data = (*dataPtr);    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t * dataPtr = (size_t *)dataVoidPtr;
size_t
size_t
* dataPtr = (size_t *)dataVoidPtr
*
dataPtr
= (size_t *)dataVoidPtr
(size_t *)dataVoidPtr
size_t *
size_t
size_t
*
*
dataVoidPtr
dataVoidPtr
size_t data = (*dataPtr);
size_t data = (*dataPtr);
size_t
size_t
data = (*dataPtr)
data
= (*dataPtr)
(*dataPtr)
*dataPtr
dataPtr
dataPtr
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(26,38,0)
(33,14,0)
(44,17,0)
(43,45,0)
(9,20,0)
(7,19,0)
(39,44,0)
(24,41,0)
(7,33,0)
(2,20,0)
(22,44,0)
(13,0,0)
(0,6,0)
(40,47,0)
(19,7,0)
(43,47,0)
(15,44,0)
(41,24,0)
(18,39,0)
(27,24,0)
(34,42,0)
(44,22,0)
(47,43,0)
(5,40,0)
(14,39,0)
(44,39,0)
(4,33,0)
(25,47,0)
(14,33,0)
(41,11,0)
(45,6,0)
(25,10,0)
(3,6,0)
(28,43,0)
(16,10,0)
(29,10,0)
(31,7,0)
(32,40,0)
(48,19,0)
(39,20,0)
(16,47,0)
(23,1,0)
(45,43,0)
(6,0,0)
(43,28,0)
(38,10,0)
(30,16,0)
(33,20,0)
(21,25,0)
(36,16,0)
(38,47,0)
(46,23,0)
(12,42,0)
(6,33,0)
(37,47,0)
(47,10,0)
(6,45,0)
(35,14,0)
(42,20,0)
(7,33,1)
(44,22,1)
(3,37,1)
(6,33,1)
(43,28,1)
(36,40,1)
(38,47,1)
(13,3,1)
(14,35,1)
(36,41,1)
(8,23,1)
(47,43,1)
(16,47,1)
(27,40,1)
(35,4,1)
(24,27,1)
(7,19,1)
(48,31,1)
(4,39,1)
(19,48,1)
(44,15,1)
(15,18,1)
(25,47,1)
(39,44,1)
(14,39,1)
(16,30,1)
(0,13,1)
(44,17,1)
(45,6,1)
(8,25,1)
(21,38,1)
(31,33,1)
(26,16,1)
(40,32,1)
(38,26,1)
(41,24,1)
(23,46,1)
(43,45,1)
(37,7,1)
(46,7,1)
(33,14,1)
(6,0,1)
(32,5,1)
(5,47,1)
(25,21,1)
(40,47,1)
(30,36,1)
(44,22,2)
(46,7,2)
(44,17,2)
(27,40,2)
(32,7,2)
(37,7,2)
(38,7,2)
(43,28,2)
(40,7,2)
(3,7,2)
(23,7,2)
(36,7,2)
(26,7,2)
(45,7,2)
(39,44,2)
(21,7,2)
(33,14,2)
(30,7,2)
(25,47,2)
(25,7,2)
(0,7,2)
(5,7,2)
(41,24,2)
(38,47,2)
(45,6,2)
(7,33,2)
(6,0,2)
(41,40,2)
(40,47,2)
(43,45,2)
(14,39,2)
(24,40,2)
(7,19,2)
(16,47,2)
(13,7,2)
(6,33,2)
(43,7,2)
(47,43,2)
(16,7,2)
(6,7,2)
(47,7,2)
-----------------------------------
(0,sizeof(wchar_t)
(1,)
(2,dataPtr)
(3,data)
(4,data)
(5,myString)
(6,data*sizeof(wchar_t)
(7,data > wcslen(HELLO_STRING)
(8,RET)
(9,data)
(10,)
(11,)
(12,if (data > wcslen(HELLO_STRING)
(13,wchar_t)
(14,*dataPtr)
(15,dataVoidPtr)
(16,wcscpy(myString, HELLO_STRING)
(17,void * dataVoidPtr)
(18,dataPtr)
(19,wcslen(HELLO_STRING)
(20,)
(21,myString)
(22,size_t *)
(23,printLine("Input is less than the length of the source string")
(24,-1)
(25,free(myString)
(26,myString)
(27,1)
(28,wchar_t *)
(29,if (myString == NULL)
(30,HELLO_STRING)
(31,data)
(32,NULL)
(33,data = (*dataPtr)
(34,myString)
(35,dataPtr)
(36,myString)
(37,myString)
(38,printWLine(myString)
(39,* dataPtr = (size_t *)
(40,myString == NULL)
(41,exit(-1)
(42,)
(43,(wchar_t *)
(44,(size_t *)
(45,malloc(data*sizeof(wchar_t)
(46,"Input is less than the length of the source string")
(47,myString = (wchar_t *)
(48,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^