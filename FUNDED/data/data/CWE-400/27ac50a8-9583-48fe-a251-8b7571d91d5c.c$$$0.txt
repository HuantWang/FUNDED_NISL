-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_realloc_13_bad()
{
    int * data;
    data = NULL;
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)realloc(data, 100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
77,78
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,37,39,42,43,47,49,54,56,61,62,63,67,70,71,75,76,78
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
38,39
38,40
45,46
45,47
58,59
58,60
73,74
73,75
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_realloc_13_bad(){    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_realloc_13_bad()
CWE401_Memory_Leak__int_realloc_13_bad
{    int * data;    data = NULL;    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)realloc(data, 100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)realloc(data, 100*sizeof(int));
data = (int *)realloc(data, 100*sizeof(int))
data
data
(int *)realloc(data, 100*sizeof(int))
int *
int
*
*
realloc(data, 100*sizeof(int))
realloc
realloc
data
data
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(8,14,0)
(4,8,0)
(23,10,0)
(13,5,0)
(12,19,0)
(21,8,0)
(4,12,0)
(17,34,0)
(30,32,0)
(7,32,0)
(3,5,0)
(37,10,0)
(32,30,0)
(24,8,0)
(12,13,0)
(18,34,0)
(12,4,0)
(34,0,0)
(6,26,0)
(33,13,0)
(40,4,0)
(28,0,0)
(30,16,0)
(41,14,0)
(36,26,0)
(29,14,0)
(34,29,0)
(38,5,0)
(29,34,0)
(35,19,0)
(20,21,0)
(4,40,0)
(19,12,0)
(9,15,0)
(2,13,0)
(27,22,0)
(25,12,0)
(34,8,0)
(19,15,0)
(0,14,0)
(21,0,0)
(1,22,0)
(8,4,0)
(31,5,0)
(39,21,0)
(10,8,0)
(15,19,0)
(18,17,1)
(23,37,1)
(34,0,1)
(9,35,1)
(4,40,1)
(32,7,1)
(20,10,1)
(2,33,1)
(34,18,1)
(10,23,1)
(29,34,1)
(1,27,1)
(25,24,1)
(28,21,1)
(34,8,1)
(13,2,1)
(39,20,1)
(4,12,1)
(11,22,1)
(24,26,1)
(8,4,1)
(36,6,1)
(15,9,1)
(30,32,1)
(27,26,1)
(26,36,1)
(21,39,1)
(17,0,1)
(0,28,1)
(27,29,1)
(35,25,1)
(22,1,1)
(12,19,1)
(7,10,1)
(19,15,1)
(20,30,1)
(6,13,1)
(12,13,1)
(37,8,1)
(10,8,1)
(21,8,1)
(23,26,2)
(8,26,2)
(34,26,2)
(21,26,2)
(18,26,2)
(10,8,2)
(35,26,2)
(28,26,2)
(19,15,2)
(29,26,2)
(30,10,2)
(4,40,2)
(0,26,2)
(21,8,2)
(17,26,2)
(4,12,2)
(8,4,2)
(34,8,2)
(37,26,2)
(12,19,2)
(12,26,2)
(39,26,2)
(24,26,2)
(15,26,2)
(34,0,2)
(25,26,2)
(10,26,2)
(12,13,2)
(4,26,2)
(9,26,2)
(32,10,2)
(20,26,2)
(29,34,2)
(30,32,2)
(19,26,2)
(7,10,2)
-----------------------------------
(0,data[0] = 5)
(1,5)
(2,NULL)
(3,if(GLOBAL_CONST_FIVE==5)
(4,(int *)
(5,)
(6,GLOBAL_CONST_FIVE)
(7,1)
(8,data = (int *)
(9,int)
(10,data == NULL)
(11,RET)
(12,realloc(data, 100*sizeof(int)
(13,data = NULL)
(14,)
(15,sizeof(int)
(16,)
(17,data)
(18,0)
(19,100*sizeof(int)
(20,data)
(21,data[0])
(22,GLOBAL_CONST_FIVE==5)
(23,NULL)
(24,data)
(25,data)
(26,GLOBAL_CONST_FIVE==5)
(27,GLOBAL_CONST_FIVE)
(28,5)
(29,printIntLine(data[0])
(30,exit(-1)
(31,if(GLOBAL_CONST_FIVE==5)
(32,-1)
(33,data)
(34,data[0])
(35,100)
(36,5)
(37,data)
(38,data)
(39,0)
(40,int *)
(41,if (data == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^