-----label-----
1
-----code-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_16_bad()
{
    FILE * data;
    data = NULL;
    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */
    data = fopen("BadSource_fopen.txt", "w+");
    while(1)
    {
        /* FLAW: Point data to another file handle without closing the handle from the source */
        data = fopen("BadSink_fopen.txt", "w+");
        /* avoid incidental for not closing the file handle */
        if (data != NULL)
        {
            fclose(data);
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
20,21
20,22
21,22
23,24
23,25
23,26
24,25
28,29
28,30
30,31
30,32
30,33
31,32
32,33
32,34
33,34
35,36
35,37
35,38
36,37
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
-----nextToken-----
2,4,9,11,12,16,18,22,25,26,27,29,34,37,38,39,43,45,50,52,53
-----computeFrom-----
14,15
14,16
20,21
20,22
32,33
32,34
41,42
41,43
-----guardedBy-----
43,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;
-----ast_node-----
void CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_16_bad(){    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    while(1)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    }}
void
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_16_bad()
CWE773_Missing_Reference_to_Active_File_Descriptor_or_Handle__fopen_16_bad
{    FILE * data;    data = NULL;    /* POTENTIAL FLAW: Create a file handle using fopen() that may not be closed properly */    data = fopen("BadSource_fopen.txt", "w+");    while(1)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    }}
FILE * data;
FILE * data;
FILE
FILE
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = fopen("BadSource_fopen.txt", "w+");
data = fopen("BadSource_fopen.txt", "w+")
data
data
fopen("BadSource_fopen.txt", "w+")
fopen
fopen
"BadSource_fopen.txt"
"w+"
while(1)    {        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    }
1
{        /* FLAW: Point data to another file handle without closing the handle from the source */        data = fopen("BadSink_fopen.txt", "w+");        /* avoid incidental for not closing the file handle */        if (data != NULL)        {            fclose(data);        }        break;    }
data = fopen("BadSink_fopen.txt", "w+");
data = fopen("BadSink_fopen.txt", "w+")
data
data
fopen("BadSink_fopen.txt", "w+")
fopen
fopen
"BadSink_fopen.txt"
"w+"
if (data != NULL)        {            fclose(data);        }
data != NULL
data
data
NULL
NULL
{            fclose(data);        }
fclose(data);
fclose(data)
fclose
fclose
data
data
break;
-----joern-----
(22,24,0)
(1,18,0)
(1,21,0)
(21,26,0)
(19,6,0)
(12,0,0)
(7,6,0)
(8,3,0)
(21,6,0)
(14,24,0)
(11,0,0)
(9,26,0)
(4,24,0)
(22,0,0)
(20,22,0)
(3,21,0)
(10,17,0)
(23,21,0)
(24,22,0)
(17,0,0)
(5,3,0)
(16,1,0)
(13,26,0)
(6,21,0)
(15,17,0)
(3,21,1)
(6,7,1)
(5,8,1)
(1,21,1)
(16,3,1)
(23,25,1)
(22,24,1)
(4,20,1)
(20,17,1)
(7,19,1)
(2,25,1)
(1,16,1)
(14,4,1)
(2,9,1)
(10,15,1)
(9,1,1)
(3,5,1)
(21,6,1)
(17,10,1)
(8,21,1)
(24,14,1)
(19,23,1)
(25,22,1)
(9,3,1)
(5,25,2)
(1,21,2)
(3,25,2)
(9,25,2)
(6,25,2)
(8,25,2)
(16,3,2)
(19,25,2)
(21,25,2)
(7,25,2)
(1,3,2)
(3,21,2)
(21,6,2)
(22,24,2)
(23,25,2)
-----------------------------------
(0,)
(1,fclose(data)
(2,RET)
(3,data != NULL)
(4,"BadSource_fopen.txt")
(5,NULL)
(6,fopen("BadSink_fopen.txt", "w+")
(7,"w+")
(8,data)
(9,break;)
(10,NULL)
(11,data)
(12,while(1)
(13,if (data != NULL)
(14,"w+")
(15,data)
(16,data)
(17,data = NULL)
(18,)
(19,"BadSink_fopen.txt")
(20,data)
(21,data = fopen("BadSink_fopen.txt", "w+")
(22,data = fopen("BadSource_fopen.txt", "w+")
(23,data)
(24,fopen("BadSource_fopen.txt", "w+")
(25,1)
(26,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^