-----label-----
0
-----code-----
static void goodB2G1()
{
    wchar_t * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
66,69
67,68
68,69
70,71
71,72
72,73
72,74
73,74
76,77
77,78
78,79
78,80
79,80
81,82
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,69,74,75,80,82
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G1(){    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G1()
goodB2G1
{    wchar_t * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Deallocate memory */        free(data);    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(5,35,0)
(18,1,0)
(15,5,0)
(10,26,0)
(35,1,0)
(28,9,0)
(12,7,0)
(30,26,0)
(24,2,0)
(26,7,0)
(8,9,0)
(13,11,0)
(11,24,0)
(16,35,0)
(34,7,0)
(22,16,0)
(24,11,0)
(9,35,0)
(5,26,0)
(9,8,0)
(20,35,0)
(23,8,0)
(9,28,0)
(3,8,0)
(32,7,0)
(31,18,0)
(29,16,0)
(21,1,0)
(35,9,0)
(8,3,0)
(33,3,0)
(4,6,0)
(6,27,0)
(18,35,0)
(5,25,0)
(4,17,1)
(13,16,1)
(35,9,1)
(17,14,1)
(16,35,1)
(9,28,1)
(18,31,1)
(33,23,1)
(18,35,1)
(23,20,1)
(26,30,1)
(5,15,1)
(14,26,1)
(9,8,1)
(16,22,1)
(11,13,1)
(31,24,1)
(19,6,1)
(3,33,1)
(19,5,1)
(31,16,1)
(17,18,1)
(22,29,1)
(5,35,1)
(20,14,1)
(30,10,1)
(29,35,1)
(24,11,1)
(8,3,1)
(6,4,1)
(15,17,1)
(5,26,1)
(18,35,2)
(5,26,2)
(35,14,2)
(35,9,2)
(24,11,2)
(20,14,2)
(31,14,2)
(13,16,2)
(6,17,2)
(5,35,2)
(15,17,2)
(4,17,2)
(24,16,2)
(3,14,2)
(16,14,2)
(11,16,2)
(8,14,2)
(9,14,2)
(9,8,2)
(29,14,2)
(33,14,2)
(23,14,2)
(8,3,2)
(9,28,2)
(16,35,2)
(5,17,2)
(18,14,2)
(22,14,2)
-----------------------------------
(0, sizeof(wchar_t)
(1,)
(2,)
(3,sizeof(wchar_t)
(4,"Benign, fixed string")
(5,free(data)
(6,printLine("Benign, fixed string")
(7,)
(8,calloc(100, sizeof(wchar_t)
(9,(wchar_t *)
(10,data)
(11,-1)
(12,if(globalReturnsFalse()
(13,1)
(14,globalReturnsTrue()
(15,data)
(16,data == NULL)
(17,globalReturnsFalse()
(18,printWLine(data)
(19,RET)
(20,data)
(21,if (data == NULL)
(22,NULL)
(23,100)
(24,exit(-1)
(25,)
(26,data = NULL)
(27,)
(28,wchar_t *)
(29,data)
(30,NULL)
(31,data)
(32,data)
(33,wchar_t)
(34,if(globalReturnsTrue()
(35,data = (wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^