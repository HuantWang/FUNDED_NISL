-----label-----
0
-----code-----
static struct ast_channel *dahdi_new(struct dahdi_pvt *i, int state, int startpbx, int idx, int law, const char *linkedid, struct ast_callid *callid)
{
	struct ast_channel *tmp;
	struct ast_format deflaw;
	int x;
	int features;
	struct ast_str *chan_name;
	struct ast_variable *v;
	char *dashptr;
	char device_name[AST_CHANNEL_NAME];

	if (i->subs[idx].owner) {
		ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx]);
		return NULL;
	}

	ast_format_clear(&deflaw);
#if defined(HAVE_PRI)
	/*
	 * The dnid has been stuffed with the called-number[:subaddress]
	 * by dahdi_request() for outgoing calls.
	 */
	chan_name = create_channel_name(i, i->outgoing, i->dnid);
#else
	chan_name = create_channel_name(i);
#endif	/* defined(HAVE_PRI) */
	if (!chan_name) {
		return NULL;
	}

	tmp = ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name));
	ast_free(chan_name);
	if (!tmp) {
		return NULL;
	}

	if (callid) {
		ast_channel_callid_set(tmp, callid);
	}

	ast_channel_tech_set(tmp, &dahdi_tech);
#if defined(HAVE_PRI)
	if (i->pri) {
		ast_cc_copy_config_params(i->cc_params, i->pri->cc_params);
	}
#endif	/* defined(HAVE_PRI) */
	ast_channel_cc_params_init(tmp, i->cc_params);
	if (law) {
		i->law = law;
		if (law == DAHDI_LAW_ALAW) {
			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);
		} else {
			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);
		}
	} else {
		switch (i->sig) {
		case SIG_PRI_LIB_HANDLE_CASES:
			/* Make sure companding law is known. */
			i->law = (i->law_default == DAHDI_LAW_ALAW)
				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;
			break;
		default:
			i->law = i->law_default;
			break;
		}
		if (i->law_default == DAHDI_LAW_ALAW) {
			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);
		} else {
			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);
		}
	}
	ast_channel_set_fd(tmp, 0, i->subs[idx].dfd);
	ast_format_cap_add(ast_channel_nativeformats(tmp), &deflaw);
	/* Start out assuming ulaw since it's smaller :) */
	ast_format_copy(ast_channel_rawreadformat(tmp), &deflaw);
	ast_format_copy(ast_channel_readformat(tmp), &deflaw);
	ast_format_copy(ast_channel_rawwriteformat(tmp), &deflaw);
	ast_format_copy(ast_channel_writeformat(tmp), &deflaw);
	i->subs[idx].linear = 0;
	dahdi_setlinear(i->subs[idx].dfd, i->subs[idx].linear);
	features = 0;
	if (idx == SUB_REAL) {
		if (i->busydetect && CANBUSYDETECT(i))
			features |= DSP_FEATURE_BUSY_DETECT;
		if ((i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i))
			features |= DSP_FEATURE_CALL_PROGRESS;
		if ((i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i))
			features |= DSP_FEATURE_WAITDIALTONE;
		if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||
			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))) {
			features |= DSP_FEATURE_FAX_DETECT;
		}
		x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE;
		if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)) {
			i->hardwaredtmf = 0;
			features |= DSP_FEATURE_DIGIT_DETECT;
		} else if (NEED_MFDETECT(i)) {
			i->hardwaredtmf = 1;
			features |= DSP_FEATURE_DIGIT_DETECT;
		}
	}
	if (features) {
		if (i->dsp) {
			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));
		} else {
			if (i->channel != CHAN_PSEUDO)
				i->dsp = ast_dsp_new();
			else
				i->dsp = NULL;
			if (i->dsp) {
				i->dsp_features = features;
#if defined(HAVE_PRI) || defined(HAVE_SS7)
				/* We cannot do progress detection until receive PROGRESS message */
				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {
					/* Remember requested DSP features, don't treat
					   talking as ANSWER */
					i->dsp_features = features & ~DSP_PROGRESS_TALK;
					features = 0;
				}
#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */
				ast_dsp_set_features(i->dsp, features);
				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);
				if (!ast_strlen_zero(progzone))
					ast_dsp_set_call_progress_zone(i->dsp, progzone);
				if (i->busydetect && CANBUSYDETECT(i)) {
					ast_dsp_set_busy_count(i->dsp, i->busycount);
					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);
				}
			}
		}
	}

	i->dialtone_scanning_time_elapsed = 0;

	if (state == AST_STATE_RING)
		ast_channel_rings_set(tmp, 1);
	ast_channel_tech_pvt_set(tmp, i);
	if ((i->sig == SIG_FXOKS) || (i->sig == SIG_FXOGS) || (i->sig == SIG_FXOLS)) {
		/* Only FXO signalled stuff can be picked up */
		ast_channel_callgroup_set(tmp, i->callgroup);
		ast_channel_pickupgroup_set(tmp, i->pickupgroup);
		ast_channel_named_callgroups_set(tmp, i->named_callgroups);
		ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups);
	}
	if (!ast_strlen_zero(i->parkinglot))
		ast_channel_parkinglot_set(tmp, i->parkinglot);
	if (!ast_strlen_zero(i->language))
		ast_channel_language_set(tmp, i->language);
	if (!i->owner)
		i->owner = tmp;
	if (!ast_strlen_zero(i->accountcode))
		ast_channel_accountcode_set(tmp, i->accountcode);
	if (i->amaflags)
		ast_channel_amaflags_set(tmp, i->amaflags);
	i->subs[idx].owner = tmp;
	ast_channel_context_set(tmp, i->context);
	if (!analog_lib_handles(i->sig, i->radio, i->oprmode)) {
		ast_channel_call_forward_set(tmp, i->call_forward);
	}
	/* If we've been told "no ADSI" then enforce it */
	if (!i->adsi)
		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);
	if (!ast_strlen_zero(i->exten))
		ast_channel_exten_set(tmp, i->exten);
	if (!ast_strlen_zero(i->rdnis)) {
		ast_channel_redirecting(tmp)->from.number.valid = 1;
		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);
	}
	if (!ast_strlen_zero(i->dnid)) {
		ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);
	}

	/* Don't use ast_set_callerid() here because it will
	 * generate a needless NewCallerID event */
#if defined(HAVE_PRI) || defined(HAVE_SS7)
	if (!ast_strlen_zero(i->cid_ani)) {
		ast_channel_caller(tmp)->ani.number.valid = 1;
		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_ani);
	} else if (!ast_strlen_zero(i->cid_num)) {
		ast_channel_caller(tmp)->ani.number.valid = 1;
		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);
	}
#else
	if (!ast_strlen_zero(i->cid_num)) {
		ast_channel_caller(tmp)->ani.number.valid = 1;
		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);
	}
#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */
	ast_channel_caller(tmp)->id.name.presentation = i->callingpres;
	ast_channel_caller(tmp)->id.number.presentation = i->callingpres;
	ast_channel_caller(tmp)->id.number.plan = i->cid_ton;
	ast_channel_caller(tmp)->ani2 = i->cid_ani2;
	ast_channel_caller(tmp)->id.tag = ast_strdup(i->cid_tag);
	/* clear the fake event in case we posted one before we had ast_channel */
	i->fake_event = 0;
	/* Assure there is no confmute on this channel */
	dahdi_confmute(i, 0);
	i->muting = 0;
	/* Configure the new channel jb */
	ast_jb_configure(tmp, &global_jbconf);

	/* Set initial device state */
	ast_copy_string(device_name, ast_channel_name(tmp), sizeof(device_name));
	dashptr = strrchr(device_name, '-');
	if (dashptr) {
		*dashptr = '\0';
	}
	ast_devstate_changed_literal(AST_DEVICE_UNKNOWN, device_name);

	for (v = i->vars ; v ; v = v->next)
		pbx_builtin_setvar_helper(tmp, v->name, v->value);

	ast_module_ref(ast_module_info->self);

	dahdi_ami_channel_event(i, tmp);
	if (startpbx) {
#ifdef HAVE_OPENR2
		if (i->mfcr2call) {
			pbx_builtin_setvar_helper(tmp, "MFCR2_CATEGORY", openr2_proto_get_category_string(i->mfcr2_recvd_category));
		}
#endif
		if (ast_pbx_start(tmp)) {
			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));
			ast_hangup(tmp);
			return NULL;
		}
	}
	return tmp;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
4,12
4,13
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
27,28
29,30
29,31
31,32
31,33
34,35
34,36
35,36
37,38
37,39
40,41
40,42
40,43
40,44
40,45
40,46
40,47
40,48
40,49
40,50
40,51
40,52
40,53
40,54
40,55
40,56
40,57
40,58
40,59
40,60
40,61
40,62
40,63
40,64
40,65
40,66
40,67
40,68
40,69
40,70
40,71
40,72
40,73
40,74
40,75
40,76
40,77
40,78
40,79
40,80
40,81
40,82
40,83
40,84
40,85
40,86
40,87
40,88
40,89
40,90
40,91
40,92
40,93
40,94
40,95
40,96
40,97
40,98
40,99
40,100
40,101
40,102
40,103
40,104
40,105
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
57,58
59,60
60,61
60,62
62,63
64,65
65,66
65,67
66,67
68,69
68,70
71,72
72,73
72,74
73,74
75,76
75,77
78,79
79,80
79,81
81,82
81,83
84,85
85,86
85,87
87,88
87,89
89,90
90,91
92,93
92,94
93,94
93,95
94,95
94,96
95,96
95,97
96,97
99,100
102,103
102,104
103,104
104,105
104,106
104,107
104,108
104,109
105,106
107,108
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
120,121
122,123
123,124
123,125
124,125
126,127
127,128
129,130
130,131
130,132
131,132
133,134
133,135
134,135
136,137
138,139
138,140
139,140
140,141
142,143
143,144
144,145
146,147
147,148
147,149
148,149
150,151
150,152
150,153
150,154
150,155
150,156
150,157
150,158
150,159
150,160
150,161
150,162
151,152
154,155
156,157
156,158
157,158
160,161
160,162
161,162
164,165
164,166
165,166
168,169
168,170
169,170
172,173
172,174
173,174
176,177
178,179
178,180
179,180
183,184
183,185
184,185
186,187
188,189
189,190
189,191
190,191
192,193
194,195
194,196
195,196
196,197
198,199
199,200
200,201
202,203
202,204
203,204
205,206
206,207
207,208
207,209
207,210
208,209
210,211
212,213
214,215
215,216
215,217
215,218
216,217
218,219
220,221
221,222
223,224
224,225
224,226
224,227
225,226
227,228
229,230
229,231
230,231
233,234
233,235
233,236
234,235
236,237
236,238
237,238
238,239
238,240
239,240
239,241
240,241
243,244
245,246
245,247
245,248
246,247
246,248
247,248
249,250
251,252
252,253
253,254
253,255
253,256
253,257
254,255
256,257
257,258
259,260
262,263
263,264
264,265
264,266
264,267
264,268
265,266
267,268
268,269
270,271
273,274
273,275
274,275
274,276
275,276
275,277
276,277
279,280
279,281
279,282
279,283
279,284
279,285
280,281
281,282
283,284
284,285
284,286
285,286
285,287
286,287
289,290
289,291
289,292
290,291
291,292
291,293
292,293
292,294
293,294
296,297
298,299
300,301
304,305
305,306
305,307
306,307
306,308
307,308
310,311
310,312
311,312
315,316
315,317
315,318
316,317
316,318
317,318
317,319
318,319
321,322
323,324
324,325
325,326
325,327
325,328
325,329
326,327
328,329
329,330
331,332
334,335
335,336
336,337
336,338
336,339
336,340
337,338
339,340
340,341
342,343
345,346
346,347
346,348
346,349
346,350
347,348
349,350
352,353
352,354
353,354
353,355
354,355
354,356
355,356
358,359
361,362
362,363
362,364
362,365
363,364
365,366
365,367
366,367
368,369
370,371
371,372
373,374
374,375
374,376
374,377
375,376
377,378
377,379
378,379
380,381
382,383
383,384
385,386
386,387
386,388
386,389
387,388
389,390
389,391
390,391
392,393
394,395
395,396
397,398
398,399
398,400
398,401
399,400
401,402
401,403
402,403
404,405
406,407
407,408
409,410
410,411
410,412
410,413
411,412
413,414
413,415
414,415
416,417
418,419
419,420
421,422
422,423
422,424
423,424
423,425
424,425
424,426
425,426
425,427
426,427
429,430
433,434
434,435
434,436
434,437
435,436
437,438
437,439
438,439
438,440
439,440
439,441
440,441
443,444
446,447
446,448
447,448
447,449
448,449
448,450
449,450
452,453
455,456
456,457
456,458
457,458
460,461
460,462
461,462
461,463
462,463
464,465
466,467
466,468
466,469
466,470
466,471
466,472
467,468
467,469
468,469
468,470
469,470
469,471
470,471
473,474
473,475
474,475
476,477
478,479
479,480
479,481
480,481
482,483
484,485
484,486
485,486
485,487
486,487
487,488
487,489
488,489
488,490
489,490
492,493
494,495
494,496
495,496
497,498
499,500
500,501
500,502
501,502
503,504
505,506
505,507
506,507
506,508
507,508
508,509
508,510
509,510
509,511
510,511
513,514
513,515
514,515
517,518
517,519
518,519
520,521
522,523
523,524
523,525
524,525
526,527
528,529
528,530
529,530
529,531
530,531
531,532
531,533
532,533
533,534
533,535
534,535
537,538
538,539
538,540
539,540
539,541
540,541
543,544
545,546
546,547
546,548
547,548
547,549
548,549
551,552
552,553
552,554
553,554
553,555
554,555
557,558
559,560
560,561
561,562
561,563
562,563
564,565
566,567
567,568
567,569
568,569
570,571
570,572
571,572
573,574
575,576
575,577
575,578
576,577
576,578
576,579
576,580
577,578
579,580
579,581
580,581
580,582
581,582
581,583
582,583
585,586
588,589
590,591
591,592
593,594
593,595
594,595
595,596
595,597
596,597
596,598
597,598
601,602
602,603
602,604
603,604
605,606
607,608
607,609
608,609
608,610
609,610
611,612
613,614
613,615
614,615
615,616
615,617
616,617
616,618
617,618
621,622
622,623
622,624
623,624
625,626
627,628
627,629
628,629
630,631
631,632
631,633
631,634
632,633
632,634
633,634
636,637
637,638
638,639
638,640
638,641
638,642
639,640
643,644
643,645
644,645
646,647
648,649
648,650
649,650
649,651
649,652
650,651
650,652
651,652
651,653
652,653
655,656
657,658
658,659
658,660
659,660
659,661
660,661
663,664
664,665
666,667
667,668
667,669
668,669
668,670
669,670
672,673
674,675
674,676
675,676
675,677
676,677
679,680
679,681
679,682
679,683
679,684
680,681
681,682
681,683
682,683
682,684
683,684
686,687
688,689
689,690
689,691
689,692
690,691
692,693
692,694
693,694
696,697
698,699
699,700
699,701
699,702
700,701
702,703
702,704
703,704
706,707
706,708
707,708
709,710
709,711
710,711
713,714
713,715
714,715
715,716
715,717
716,717
718,719
720,721
721,722
721,723
721,724
722,723
724,725
724,726
725,726
728,729
730,731
730,732
731,732
731,733
732,733
732,734
733,734
736,737
736,738
737,738
739,740
741,742
741,743
742,743
743,744
743,745
743,746
744,745
746,747
746,748
747,748
750,751
750,752
751,752
754,755
755,756
755,757
755,758
756,757
758,759
758,760
759,760
762,763
763,764
763,765
764,765
767,768
768,769
768,770
769,770
769,771
770,771
774,775
774,776
775,776
775,777
776,777
778,779
780,781
781,782
781,783
781,784
782,783
784,785
787,788
788,789
788,790
788,791
789,790
791,792
793,794
795,796
795,797
796,797
796,798
797,798
797,799
798,799
799,800
799,801
800,801
800,802
801,802
804,805
806,807
807,808
807,809
808,809
808,810
809,810
812,813
814,815
815,816
815,817
816,817
816,818
817,818
820,821
822,823
822,824
822,825
822,826
823,824
824,825
824,826
824,827
825,826
827,828
829,830
829,831
830,831
833,834
834,835
834,836
834,837
835,836
837,838
839,840
839,841
840,841
843,844
844,845
844,846
844,847
845,846
847,848
849,850
849,851
850,851
853,854
854,855
854,856
854,857
855,856
857,858
859,860
859,861
860,861
863,864
863,865
864,865
865,866
865,867
866,867
868,869
868,870
869,870
872,873
873,874
873,875
873,876
874,875
876,877
878,879
878,880
879,880
882,883
882,884
883,884
884,885
884,886
885,886
887,888
887,889
888,889
891,892
892,893
892,894
892,895
893,894
895,896
897,898
897,899
898,899
901,902
901,903
902,903
903,904
903,905
904,905
907,908
908,909
908,910
909,910
909,911
910,911
913,914
915,916
915,917
916,917
917,918
917,919
918,919
920,921
920,922
921,922
924,925
925,926
925,927
925,928
926,927
928,929
930,931
930,932
931,932
934,935
934,936
935,936
935,937
936,937
939,940
940,941
940,942
940,943
941,942
943,944
945,946
945,947
946,947
949,950
950,951
950,952
951,952
951,953
952,953
952,954
953,954
953,955
954,955
957,958
960,961
962,963
963,964
963,965
963,966
964,965
966,967
968,969
968,970
969,970
972,973
972,974
973,974
974,975
974,976
974,977
974,978
975,976
977,978
977,979
978,979
981,982
981,983
982,983
985,986
985,987
986,987
989,990
990,991
991,992
991,993
991,994
992,993
994,995
996,997
996,998
997,998
1000,1001
1000,1002
1001,1002
1002,1003
1002,1004
1003,1004
1006,1007
1007,1008
1007,1009
1007,1010
1008,1009
1010,1011
1012,1013
1014,1015
1014,1016
1015,1016
1016,1017
1016,1018
1017,1018
1019,1020
1019,1021
1020,1021
1023,1024
1024,1025
1024,1026
1024,1027
1025,1026
1027,1028
1029,1030
1029,1031
1030,1031
1033,1034
1033,1035
1034,1035
1035,1036
1035,1037
1036,1037
1038,1039
1038,1040
1039,1040
1042,1043
1042,1044
1043,1044
1044,1045
1044,1046
1045,1046
1045,1047
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1048,1050
1049,1050
1051,1052
1057,1058
1058,1059
1058,1060
1059,1060
1059,1061
1060,1061
1060,1062
1061,1062
1061,1063
1062,1063
1062,1064
1063,1064
1065,1066
1070,1071
1070,1072
1071,1072
1073,1074
1073,1075
1074,1075
1077,1078
1077,1079
1078,1079
1079,1080
1079,1081
1080,1081
1082,1083
1082,1084
1083,1084
1086,1087
1087,1088
1088,1089
1088,1090
1089,1090
1089,1091
1090,1091
1090,1092
1091,1092
1091,1093
1092,1093
1094,1095
1098,1099
1098,1100
1099,1100
1101,1102
1101,1103
1102,1103
1105,1106
1105,1107
1106,1107
1107,1108
1107,1109
1108,1109
1110,1111
1110,1112
1111,1112
1114,1115
1114,1116
1115,1116
1116,1117
1116,1118
1117,1118
1117,1119
1118,1119
1118,1120
1119,1120
1119,1121
1120,1121
1120,1122
1121,1122
1123,1124
1129,1130
1130,1131
1130,1132
1131,1132
1131,1133
1132,1133
1132,1134
1133,1134
1133,1135
1134,1135
1134,1136
1135,1136
1137,1138
1142,1143
1142,1144
1143,1144
1145,1146
1145,1147
1146,1147
1149,1150
1150,1151
1150,1152
1151,1152
1151,1153
1152,1153
1152,1154
1153,1154
1153,1155
1154,1155
1154,1156
1155,1156
1157,1158
1162,1163
1162,1164
1163,1164
1166,1167
1167,1168
1167,1169
1168,1169
1168,1170
1169,1170
1169,1171
1170,1171
1170,1172
1171,1172
1171,1173
1172,1173
1174,1175
1179,1180
1179,1181
1180,1181
1183,1184
1184,1185
1184,1186
1185,1186
1185,1187
1186,1187
1186,1188
1187,1188
1187,1189
1188,1189
1188,1190
1189,1190
1191,1192
1196,1197
1196,1198
1197,1198
1200,1201
1201,1202
1201,1203
1202,1203
1202,1204
1203,1204
1203,1205
1204,1205
1206,1207
1209,1210
1209,1211
1210,1211
1213,1214
1214,1215
1214,1216
1215,1216
1215,1217
1216,1217
1216,1218
1217,1218
1217,1219
1218,1219
1220,1221
1224,1225
1224,1226
1225,1226
1227,1228
1227,1229
1228,1229
1231,1232
1232,1233
1232,1234
1233,1234
1233,1235
1234,1235
1238,1239
1239,1240
1239,1241
1239,1242
1240,1241
1242,1243
1245,1246
1246,1247
1246,1248
1247,1248
1247,1249
1248,1249
1252,1253
1253,1254
1253,1255
1253,1256
1254,1255
1256,1257
1258,1259
1259,1260
1261,1262
1262,1263
1262,1264
1262,1265
1262,1266
1263,1264
1265,1266
1267,1268
1267,1269
1268,1269
1270,1271
1272,1273
1273,1274
1274,1275
1276,1277
1277,1278
1277,1279
1278,1279
1280,1281
1280,1282
1280,1283
1281,1282
1283,1284
1286,1287
1286,1288
1287,1288
1289,1290
1290,1291
1291,1292
1291,1293
1292,1293
1293,1294
1296,1297
1297,1298
1297,1299
1297,1300
1298,1299
1300,1301
1302,1303
1304,1305
1304,1306
1304,1307
1304,1308
1305,1306
1306,1307
1306,1308
1307,1308
1309,1310
1309,1311
1310,1311
1313,1314
1315,1316
1315,1317
1316,1317
1318,1319
1318,1320
1319,1320
1322,1323
1323,1324
1323,1325
1323,1326
1323,1327
1324,1325
1326,1327
1328,1329
1328,1330
1329,1330
1332,1333
1332,1334
1333,1334
1336,1337
1337,1338
1337,1339
1338,1339
1340,1341
1340,1342
1341,1342
1344,1345
1345,1346
1345,1347
1345,1348
1346,1347
1348,1349
1350,1351
1352,1353
1352,1354
1353,1354
1355,1356
1356,1357
1356,1358
1357,1358
1357,1359
1358,1359
1360,1361
1362,1363
1362,1364
1362,1365
1363,1364
1364,1365
1364,1366
1364,1367
1364,1368
1365,1366
1367,1368
1370,1371
1370,1372
1371,1372
1373,1374
1375,1376
1376,1377
1376,1378
1377,1378
1379,1380
1381,1382
1382,1383
1384,1385
1385,1386
-----nextToken-----
3,5,6,9,11,12,14,16,18,20,22,24,26,28,30,32,33,36,38,39,44,46,47,51,53,56,58,61,63,67,69,70,74,76,77,80,82,83,86,88,91,97,98,100,101,106,108,109,112,113,116,118,121,125,128,132,135,137,141,145,149,152,153,155,158,159,162,163,166,167,170,171,174,175,177,180,181,182,185,187,191,193,197,201,204,209,211,213,217,219,222,226,228,231,232,235,241,242,244,248,250,255,258,260,261,266,269,271,272,277,278,282,287,288,294,295,297,299,301,302,303,308,309,312,313,314,319,320,322,327,330,332,333,338,341,343,344,348,350,351,356,357,359,360,364,367,369,372,376,379,381,384,388,391,393,396,400,403,405,408,412,415,417,420,427,428,430,431,432,436,441,442,444,445,450,451,453,454,458,459,463,465,471,472,475,477,481,483,490,491,493,496,498,502,504,511,512,515,516,519,521,525,527,535,536,541,542,544,549,550,555,556,558,563,565,569,572,574,578,583,584,586,587,589,592,598,599,600,604,606,610,612,618,619,620,624,626,629,634,635,640,641,642,645,647,653,654,656,661,662,665,670,671,673,677,678,684,685,687,691,694,695,697,701,704,705,708,711,712,717,719,723,726,727,729,734,735,738,740,745,748,749,752,753,757,760,761,765,766,771,772,773,777,779,783,785,786,790,792,794,802,803,805,810,811,813,818,819,821,826,828,831,832,836,838,841,842,846,848,851,852,856,858,861,862,867,870,871,875,877,880,881,886,889,890,894,896,899,900,905,906,911,912,914,919,922,923,927,929,932,933,937,938,942,944,947,948,955,956,958,959,961,965,967,970,971,976,979,980,983,984,987,988,993,995,998,999,1004,1005,1009,1011,1013,1018,1021,1022,1026,1028,1031,1032,1037,1040,1041,1050,1052,1053,1054,1055,1056,1064,1066,1067,1068,1069,1072,1075,1076,1081,1084,1085,1093,1095,1096,1097,1100,1103,1104,1109,1112,1113,1122,1124,1125,1126,1127,1128,1136,1138,1139,1140,1141,1144,1147,1148,1156,1158,1159,1160,1161,1164,1165,1173,1175,1176,1177,1178,1181,1182,1190,1192,1193,1194,1195,1198,1199,1205,1207,1208,1211,1212,1219,1221,1222,1223,1226,1229,1230,1235,1236,1237,1241,1243,1244,1249,1250,1251,1255,1257,1260,1264,1266,1269,1271,1275,1279,1282,1284,1285,1288,1294,1295,1299,1301,1303,1308,1311,1312,1314,1317,1320,1321,1325,1327,1330,1331,1334,1335,1339,1342,1343,1347,1349,1351,1354,1359,1361,1366,1368,1369,1372,1374,1378,1380,1383,1386
-----computeFrom-----
130,131
130,132
147,148
147,149
238,239
238,240
246,247
246,248
284,285
284,286
291,292
291,293
305,306
305,307
316,317
316,318
422,423
422,424
456,457
456,458
461,462
461,463
468,469
468,470
479,480
479,481
485,486
485,487
487,488
487,489
500,501
500,502
506,507
506,508
508,509
508,510
523,524
523,525
529,530
529,531
531,532
531,533
538,539
538,540
546,547
546,548
552,553
552,554
561,562
561,563
567,568
567,569
570,571
570,572
595,596
595,597
602,603
602,604
615,616
615,617
622,623
622,624
650,651
650,652
658,659
658,660
667,668
667,669
681,682
681,683
706,707
706,708
731,732
731,733
768,769
768,770
775,776
775,777
796,797
796,798
797,798
797,799
799,800
799,801
807,808
807,809
815,816
815,817
908,909
908,910
950,951
950,952
1044,1045
1044,1046
1058,1059
1058,1060
1088,1089
1088,1090
1116,1117
1116,1118
1130,1131
1130,1132
1150,1151
1150,1152
1167,1168
1167,1169
1184,1185
1184,1186
1201,1202
1201,1203
1214,1215
1214,1216
1232,1233
1232,1234
1246,1247
1246,1248
1277,1278
1277,1279
1291,1292
1291,1293
1306,1307
1306,1308
1315,1316
1315,1317
-----guardedBy-----
463,586
653,661
740,765
818,861
-----guardedByNegation-----
653,670
-----lastLexicalUse-----
653,670
-----jump-----
653,670
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ReturnStatement;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct ast_channel *dahdi_new(struct dahdi_pvt *i, int state, int startpbx, int idx, int law, const char *linkedid, struct ast_callid *callid){	struct ast_channel *tmp;	struct ast_format deflaw;	int x;	int features;	struct ast_str *chan_name;	struct ast_variable *v;	char *dashptr;	char device_name[AST_CHANNEL_NAME];	if (i->subs[idx].owner) {		ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx]);		return NULL;	}	ast_format_clear(&deflaw);#if defined(HAVE_PRI)	/*	 * The dnid has been stuffed with the called-number[:subaddress]	 * by dahdi_request() for outgoing calls.	 */	chan_name = create_channel_name(i, i->outgoing, i->dnid);#else	chan_name = create_channel_name(i);#endif	/* defined(HAVE_PRI) */	if (!chan_name) {		return NULL;	}	tmp = ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name));	ast_free(chan_name);	if (!tmp) {		return NULL;	}	if (callid) {		ast_channel_callid_set(tmp, callid);	}	ast_channel_tech_set(tmp, &dahdi_tech);#if defined(HAVE_PRI)	if (i->pri) {		ast_cc_copy_config_params(i->cc_params, i->pri->cc_params);	}#endif	/* defined(HAVE_PRI) */	ast_channel_cc_params_init(tmp, i->cc_params);	if (law) {		i->law = law;		if (law == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	} else {		switch (i->sig) {		case SIG_PRI_LIB_HANDLE_CASES:			/* Make sure companding law is known. */			i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;			break;		default:			i->law = i->law_default;			break;		}		if (i->law_default == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	}	ast_channel_set_fd(tmp, 0, i->subs[idx].dfd);	ast_format_cap_add(ast_channel_nativeformats(tmp), &deflaw);	/* Start out assuming ulaw since it's smaller :) */	ast_format_copy(ast_channel_rawreadformat(tmp), &deflaw);	ast_format_copy(ast_channel_readformat(tmp), &deflaw);	ast_format_copy(ast_channel_rawwriteformat(tmp), &deflaw);	ast_format_copy(ast_channel_writeformat(tmp), &deflaw);	i->subs[idx].linear = 0;	dahdi_setlinear(i->subs[idx].dfd, i->subs[idx].linear);	features = 0;	if (idx == SUB_REAL) {		if (i->busydetect && CANBUSYDETECT(i))			features |= DSP_FEATURE_BUSY_DETECT;		if ((i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_CALL_PROGRESS;		if ((i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_WAITDIALTONE;		if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))) {			features |= DSP_FEATURE_FAX_DETECT;		}		x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE;		if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)) {			i->hardwaredtmf = 0;			features |= DSP_FEATURE_DIGIT_DETECT;		} else if (NEED_MFDETECT(i)) {			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}	}	if (features) {		if (i->dsp) {			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));		} else {			if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;			if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}		}	}	i->dialtone_scanning_time_elapsed = 0;	if (state == AST_STATE_RING)		ast_channel_rings_set(tmp, 1);	ast_channel_tech_pvt_set(tmp, i);	if ((i->sig == SIG_FXOKS) || (i->sig == SIG_FXOGS) || (i->sig == SIG_FXOLS)) {		/* Only FXO signalled stuff can be picked up */		ast_channel_callgroup_set(tmp, i->callgroup);		ast_channel_pickupgroup_set(tmp, i->pickupgroup);		ast_channel_named_callgroups_set(tmp, i->named_callgroups);		ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups);	}	if (!ast_strlen_zero(i->parkinglot))		ast_channel_parkinglot_set(tmp, i->parkinglot);	if (!ast_strlen_zero(i->language))		ast_channel_language_set(tmp, i->language);	if (!i->owner)		i->owner = tmp;	if (!ast_strlen_zero(i->accountcode))		ast_channel_accountcode_set(tmp, i->accountcode);	if (i->amaflags)		ast_channel_amaflags_set(tmp, i->amaflags);	i->subs[idx].owner = tmp;	ast_channel_context_set(tmp, i->context);	if (!analog_lib_handles(i->sig, i->radio, i->oprmode)) {		ast_channel_call_forward_set(tmp, i->call_forward);	}	/* If we've been told "no ADSI" then enforce it */	if (!i->adsi)		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);	if (!ast_strlen_zero(i->exten))		ast_channel_exten_set(tmp, i->exten);	if (!ast_strlen_zero(i->rdnis)) {		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}	if (!ast_strlen_zero(i->dnid)) {		ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);	}	/* Don't use ast_set_callerid() here because it will	 * generate a needless NewCallerID event */#if defined(HAVE_PRI) || defined(HAVE_SS7)	if (!ast_strlen_zero(i->cid_ani)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_ani);	} else if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}#else	if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */	ast_channel_caller(tmp)->id.name.presentation = i->callingpres;	ast_channel_caller(tmp)->id.number.presentation = i->callingpres;	ast_channel_caller(tmp)->id.number.plan = i->cid_ton;	ast_channel_caller(tmp)->ani2 = i->cid_ani2;	ast_channel_caller(tmp)->id.tag = ast_strdup(i->cid_tag);	/* clear the fake event in case we posted one before we had ast_channel */	i->fake_event = 0;	/* Assure there is no confmute on this channel */	dahdi_confmute(i, 0);	i->muting = 0;	/* Configure the new channel jb */	ast_jb_configure(tmp, &global_jbconf);	/* Set initial device state */	ast_copy_string(device_name, ast_channel_name(tmp), sizeof(device_name));	dashptr = strrchr(device_name, '-');	if (dashptr) {		*dashptr = '\0';	}	ast_devstate_changed_literal(AST_DEVICE_UNKNOWN, device_name);	for (v = i->vars ; v ; v = v->next)		pbx_builtin_setvar_helper(tmp, v->name, v->value);	ast_module_ref(ast_module_info->self);	dahdi_ami_channel_event(i, tmp);	if (startpbx) {#ifdef HAVE_OPENR2		if (i->mfcr2call) {			pbx_builtin_setvar_helper(tmp, "MFCR2_CATEGORY", openr2_proto_get_category_string(i->mfcr2_recvd_category));		}#endif		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			return NULL;		}	}	return tmp;}
static struct ast_channel
ast_channel
*dahdi_new(struct dahdi_pvt *i, int state, int startpbx, int idx, int law, const char *linkedid, struct ast_callid *callid)
*
dahdi_new
struct dahdi_pvt *i
struct dahdi_pvt
dahdi_pvt
*i
*
i
int state
int
state
state
int startpbx
int
startpbx
startpbx
int idx
int
idx
idx
int law
int
law
law
const char *linkedid
const char
*linkedid
*
linkedid
struct ast_callid *callid
struct ast_callid
ast_callid
*callid
*
callid
{	struct ast_channel *tmp;	struct ast_format deflaw;	int x;	int features;	struct ast_str *chan_name;	struct ast_variable *v;	char *dashptr;	char device_name[AST_CHANNEL_NAME];	if (i->subs[idx].owner) {		ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx]);		return NULL;	}	ast_format_clear(&deflaw);#if defined(HAVE_PRI)	/*	 * The dnid has been stuffed with the called-number[:subaddress]	 * by dahdi_request() for outgoing calls.	 */	chan_name = create_channel_name(i, i->outgoing, i->dnid);#else	chan_name = create_channel_name(i);#endif	/* defined(HAVE_PRI) */	if (!chan_name) {		return NULL;	}	tmp = ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name));	ast_free(chan_name);	if (!tmp) {		return NULL;	}	if (callid) {		ast_channel_callid_set(tmp, callid);	}	ast_channel_tech_set(tmp, &dahdi_tech);#if defined(HAVE_PRI)	if (i->pri) {		ast_cc_copy_config_params(i->cc_params, i->pri->cc_params);	}#endif	/* defined(HAVE_PRI) */	ast_channel_cc_params_init(tmp, i->cc_params);	if (law) {		i->law = law;		if (law == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	} else {		switch (i->sig) {		case SIG_PRI_LIB_HANDLE_CASES:			/* Make sure companding law is known. */			i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;			break;		default:			i->law = i->law_default;			break;		}		if (i->law_default == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	}	ast_channel_set_fd(tmp, 0, i->subs[idx].dfd);	ast_format_cap_add(ast_channel_nativeformats(tmp), &deflaw);	/* Start out assuming ulaw since it's smaller :) */	ast_format_copy(ast_channel_rawreadformat(tmp), &deflaw);	ast_format_copy(ast_channel_readformat(tmp), &deflaw);	ast_format_copy(ast_channel_rawwriteformat(tmp), &deflaw);	ast_format_copy(ast_channel_writeformat(tmp), &deflaw);	i->subs[idx].linear = 0;	dahdi_setlinear(i->subs[idx].dfd, i->subs[idx].linear);	features = 0;	if (idx == SUB_REAL) {		if (i->busydetect && CANBUSYDETECT(i))			features |= DSP_FEATURE_BUSY_DETECT;		if ((i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_CALL_PROGRESS;		if ((i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_WAITDIALTONE;		if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))) {			features |= DSP_FEATURE_FAX_DETECT;		}		x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE;		if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)) {			i->hardwaredtmf = 0;			features |= DSP_FEATURE_DIGIT_DETECT;		} else if (NEED_MFDETECT(i)) {			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}	}	if (features) {		if (i->dsp) {			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));		} else {			if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;			if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}		}	}	i->dialtone_scanning_time_elapsed = 0;	if (state == AST_STATE_RING)		ast_channel_rings_set(tmp, 1);	ast_channel_tech_pvt_set(tmp, i);	if ((i->sig == SIG_FXOKS) || (i->sig == SIG_FXOGS) || (i->sig == SIG_FXOLS)) {		/* Only FXO signalled stuff can be picked up */		ast_channel_callgroup_set(tmp, i->callgroup);		ast_channel_pickupgroup_set(tmp, i->pickupgroup);		ast_channel_named_callgroups_set(tmp, i->named_callgroups);		ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups);	}	if (!ast_strlen_zero(i->parkinglot))		ast_channel_parkinglot_set(tmp, i->parkinglot);	if (!ast_strlen_zero(i->language))		ast_channel_language_set(tmp, i->language);	if (!i->owner)		i->owner = tmp;	if (!ast_strlen_zero(i->accountcode))		ast_channel_accountcode_set(tmp, i->accountcode);	if (i->amaflags)		ast_channel_amaflags_set(tmp, i->amaflags);	i->subs[idx].owner = tmp;	ast_channel_context_set(tmp, i->context);	if (!analog_lib_handles(i->sig, i->radio, i->oprmode)) {		ast_channel_call_forward_set(tmp, i->call_forward);	}	/* If we've been told "no ADSI" then enforce it */	if (!i->adsi)		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);	if (!ast_strlen_zero(i->exten))		ast_channel_exten_set(tmp, i->exten);	if (!ast_strlen_zero(i->rdnis)) {		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}	if (!ast_strlen_zero(i->dnid)) {		ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);	}	/* Don't use ast_set_callerid() here because it will	 * generate a needless NewCallerID event */#if defined(HAVE_PRI) || defined(HAVE_SS7)	if (!ast_strlen_zero(i->cid_ani)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_ani);	} else if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}#else	if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */	ast_channel_caller(tmp)->id.name.presentation = i->callingpres;	ast_channel_caller(tmp)->id.number.presentation = i->callingpres;	ast_channel_caller(tmp)->id.number.plan = i->cid_ton;	ast_channel_caller(tmp)->ani2 = i->cid_ani2;	ast_channel_caller(tmp)->id.tag = ast_strdup(i->cid_tag);	/* clear the fake event in case we posted one before we had ast_channel */	i->fake_event = 0;	/* Assure there is no confmute on this channel */	dahdi_confmute(i, 0);	i->muting = 0;	/* Configure the new channel jb */	ast_jb_configure(tmp, &global_jbconf);	/* Set initial device state */	ast_copy_string(device_name, ast_channel_name(tmp), sizeof(device_name));	dashptr = strrchr(device_name, '-');	if (dashptr) {		*dashptr = '\0';	}	ast_devstate_changed_literal(AST_DEVICE_UNKNOWN, device_name);	for (v = i->vars ; v ; v = v->next)		pbx_builtin_setvar_helper(tmp, v->name, v->value);	ast_module_ref(ast_module_info->self);	dahdi_ami_channel_event(i, tmp);	if (startpbx) {#ifdef HAVE_OPENR2		if (i->mfcr2call) {			pbx_builtin_setvar_helper(tmp, "MFCR2_CATEGORY", openr2_proto_get_category_string(i->mfcr2_recvd_category));		}#endif		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			return NULL;		}	}	return tmp;}
struct ast_channel *tmp;
struct ast_channel *tmp;
struct ast_channel
ast_channel
*tmp
*
tmp
struct ast_format deflaw;
struct ast_format deflaw;
struct ast_format
ast_format
deflaw
deflaw
int x;
int x;
int
x
x
int features;
int features;
int
features
features
struct ast_str *chan_name;
struct ast_str *chan_name;
struct ast_str
ast_str
*chan_name
*
chan_name
struct ast_variable *v;
struct ast_variable *v;
struct ast_variable
ast_variable
*v
*
v
char *dashptr;
char *dashptr;
char
*dashptr
*
dashptr
char device_name[AST_CHANNEL_NAME];
char device_name[AST_CHANNEL_NAME];
char
device_name[AST_CHANNEL_NAME]
device_name
[AST_CHANNEL_NAME]
AST_CHANNEL_NAME
AST_CHANNEL_NAME
if (i->subs[idx].owner) {		ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx]);		return NULL;	}
i->subs[idx].owner
i->subs[idx]
i->subs
i
i
subs
idx
idx
owner
{		ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx]);		return NULL;	}
ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx]);
ast_log(LOG_WARNING, "Channel %d already has a %s call\n", i->channel,subnames[idx])
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Channel %d already has a %s call\n"
i->channel
i
i
channel
subnames[idx]
subnames
subnames
idx
idx
return NULL;
NULL
NULL
ast_format_clear(&deflaw);
ast_format_clear(&deflaw)
ast_format_clear
ast_format_clear
&deflaw
deflaw
deflaw
chan_name = create_channel_name(i);
chan_name = create_channel_name(i)
chan_name
chan_name
create_channel_name(i)
create_channel_name
create_channel_name
i
i
if (!chan_name) {		return NULL;	}
!chan_name
chan_name
chan_name
{		return NULL;	}
return NULL;
NULL
NULL
tmp = ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name));
tmp = ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name))
tmp
tmp
ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name))
ast_channel_alloc
ast_channel_alloc
0
state
state
i->cid_num
i
i
cid_num
i->cid_name
i
i
cid_name
i->accountcode
i
i
accountcode
i->exten
i
i
exten
i->context
i
i
context
linkedid
linkedid
i->amaflags
i
i
amaflags
"DAHDI/%s"
ast_str_buffer(chan_name)
ast_str_buffer
ast_str_buffer
chan_name
chan_name
ast_free(chan_name);
ast_free(chan_name)
ast_free
ast_free
chan_name
chan_name
if (!tmp) {		return NULL;	}
!tmp
tmp
tmp
{		return NULL;	}
return NULL;
NULL
NULL
if (callid) {		ast_channel_callid_set(tmp, callid);	}
callid
callid
{		ast_channel_callid_set(tmp, callid);	}
ast_channel_callid_set(tmp, callid);
ast_channel_callid_set(tmp, callid)
ast_channel_callid_set
ast_channel_callid_set
tmp
tmp
callid
callid
ast_channel_tech_set(tmp, &dahdi_tech);
ast_channel_tech_set(tmp, &dahdi_tech)
ast_channel_tech_set
ast_channel_tech_set
tmp
tmp
&dahdi_tech
dahdi_tech
dahdi_tech
ast_channel_cc_params_init(tmp, i->cc_params);
ast_channel_cc_params_init(tmp, i->cc_params)
ast_channel_cc_params_init
ast_channel_cc_params_init
tmp
tmp
i->cc_params
i
i
cc_params
if (law) {		i->law = law;		if (law == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	} else {		switch (i->sig) {		case SIG_PRI_LIB_HANDLE_CASES:			/* Make sure companding law is known. */			i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;			break;		default:			i->law = i->law_default;			break;		}		if (i->law_default == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	}
law
law
{		i->law = law;		if (law == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	}
i->law = law;
i->law = law
i->law
i
i
law
law
law
if (law == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}
law == DAHDI_LAW_ALAW
law
law
DAHDI_LAW_ALAW
DAHDI_LAW_ALAW
{			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		}
ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);
ast_format_set(&deflaw, AST_FORMAT_ALAW, 0)
ast_format_set
ast_format_set
&deflaw
deflaw
deflaw
AST_FORMAT_ALAW
AST_FORMAT_ALAW
0
{			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}
ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);
ast_format_set(&deflaw, AST_FORMAT_ULAW, 0)
ast_format_set
ast_format_set
&deflaw
deflaw
deflaw
AST_FORMAT_ULAW
AST_FORMAT_ULAW
0
{		switch (i->sig) {		case SIG_PRI_LIB_HANDLE_CASES:			/* Make sure companding law is known. */			i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;			break;		default:			i->law = i->law_default;			break;		}		if (i->law_default == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}	}
switch (i->sig) {		case SIG_PRI_LIB_HANDLE_CASES:			/* Make sure companding law is known. */			i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;			break;		default:			i->law = i->law_default;			break;		}
i->sig
i
i
sig
{		case SIG_PRI_LIB_HANDLE_CASES:			/* Make sure companding law is known. */			i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;			break;		default:			i->law = i->law_default;			break;		}
case SIG_PRI_LIB_HANDLE_CASES:
SIG_PRI_LIB_HANDLE_CASES
SIG_PRI_LIB_HANDLE_CASES
i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW;
i->law = (i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW
i->law
i
i
law
(i->law_default == DAHDI_LAW_ALAW)				? DAHDI_LAW_ALAW : DAHDI_LAW_MULAW
(i->law_default == DAHDI_LAW_ALAW)
i->law_default == DAHDI_LAW_ALAW
i->law_default
i
i
law_default
DAHDI_LAW_ALAW
DAHDI_LAW_ALAW
DAHDI_LAW_ALAW
DAHDI_LAW_ALAW
DAHDI_LAW_MULAW
DAHDI_LAW_MULAW
break;
default:
i->law = i->law_default;
i->law = i->law_default
i->law
i
i
law
i->law_default
i
i
law_default
break;
if (i->law_default == DAHDI_LAW_ALAW) {			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		} else {			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}
i->law_default == DAHDI_LAW_ALAW
i->law_default
i
i
law_default
DAHDI_LAW_ALAW
DAHDI_LAW_ALAW
{			ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);		}
ast_format_set(&deflaw, AST_FORMAT_ALAW, 0);
ast_format_set(&deflaw, AST_FORMAT_ALAW, 0)
ast_format_set
ast_format_set
&deflaw
deflaw
deflaw
AST_FORMAT_ALAW
AST_FORMAT_ALAW
0
{			ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);		}
ast_format_set(&deflaw, AST_FORMAT_ULAW, 0);
ast_format_set(&deflaw, AST_FORMAT_ULAW, 0)
ast_format_set
ast_format_set
&deflaw
deflaw
deflaw
AST_FORMAT_ULAW
AST_FORMAT_ULAW
0
ast_channel_set_fd(tmp, 0, i->subs[idx].dfd);
ast_channel_set_fd(tmp, 0, i->subs[idx].dfd)
ast_channel_set_fd
ast_channel_set_fd
tmp
tmp
0
i->subs[idx].dfd
i->subs[idx]
i->subs
i
i
subs
idx
idx
dfd
ast_format_cap_add(ast_channel_nativeformats(tmp), &deflaw);
ast_format_cap_add(ast_channel_nativeformats(tmp), &deflaw)
ast_format_cap_add
ast_format_cap_add
ast_channel_nativeformats(tmp)
ast_channel_nativeformats
ast_channel_nativeformats
tmp
tmp
&deflaw
deflaw
deflaw
ast_format_copy(ast_channel_rawreadformat(tmp), &deflaw);
ast_format_copy(ast_channel_rawreadformat(tmp), &deflaw)
ast_format_copy
ast_format_copy
ast_channel_rawreadformat(tmp)
ast_channel_rawreadformat
ast_channel_rawreadformat
tmp
tmp
&deflaw
deflaw
deflaw
ast_format_copy(ast_channel_readformat(tmp), &deflaw);
ast_format_copy(ast_channel_readformat(tmp), &deflaw)
ast_format_copy
ast_format_copy
ast_channel_readformat(tmp)
ast_channel_readformat
ast_channel_readformat
tmp
tmp
&deflaw
deflaw
deflaw
ast_format_copy(ast_channel_rawwriteformat(tmp), &deflaw);
ast_format_copy(ast_channel_rawwriteformat(tmp), &deflaw)
ast_format_copy
ast_format_copy
ast_channel_rawwriteformat(tmp)
ast_channel_rawwriteformat
ast_channel_rawwriteformat
tmp
tmp
&deflaw
deflaw
deflaw
ast_format_copy(ast_channel_writeformat(tmp), &deflaw);
ast_format_copy(ast_channel_writeformat(tmp), &deflaw)
ast_format_copy
ast_format_copy
ast_channel_writeformat(tmp)
ast_channel_writeformat
ast_channel_writeformat
tmp
tmp
&deflaw
deflaw
deflaw
i->subs[idx].linear = 0;
i->subs[idx].linear = 0
i->subs[idx].linear
i->subs[idx]
i->subs
i
i
subs
idx
idx
linear
0
dahdi_setlinear(i->subs[idx].dfd, i->subs[idx].linear);
dahdi_setlinear(i->subs[idx].dfd, i->subs[idx].linear)
dahdi_setlinear
dahdi_setlinear
i->subs[idx].dfd
i->subs[idx]
i->subs
i
i
subs
idx
idx
dfd
i->subs[idx].linear
i->subs[idx]
i->subs
i
i
subs
idx
idx
linear
features = 0;
features = 0
features
features
0
if (idx == SUB_REAL) {		if (i->busydetect && CANBUSYDETECT(i))			features |= DSP_FEATURE_BUSY_DETECT;		if ((i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_CALL_PROGRESS;		if ((i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_WAITDIALTONE;		if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))) {			features |= DSP_FEATURE_FAX_DETECT;		}		x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE;		if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)) {			i->hardwaredtmf = 0;			features |= DSP_FEATURE_DIGIT_DETECT;		} else if (NEED_MFDETECT(i)) {			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}	}
idx == SUB_REAL
idx
idx
SUB_REAL
SUB_REAL
{		if (i->busydetect && CANBUSYDETECT(i))			features |= DSP_FEATURE_BUSY_DETECT;		if ((i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_CALL_PROGRESS;		if ((i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_WAITDIALTONE;		if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))) {			features |= DSP_FEATURE_FAX_DETECT;		}		x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE;		if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)) {			i->hardwaredtmf = 0;			features |= DSP_FEATURE_DIGIT_DETECT;		} else if (NEED_MFDETECT(i)) {			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}	}
if (i->busydetect && CANBUSYDETECT(i))			features |= DSP_FEATURE_BUSY_DETECT;
i->busydetect && CANBUSYDETECT(i)
i->busydetect
i
i
busydetect
CANBUSYDETECT(i)
CANBUSYDETECT
CANBUSYDETECT
i
i
features |= DSP_FEATURE_BUSY_DETECT;
features |= DSP_FEATURE_BUSY_DETECT
features
features
DSP_FEATURE_BUSY_DETECT
DSP_FEATURE_BUSY_DETECT
if ((i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_CALL_PROGRESS;
(i->callprogress & CALLPROGRESS_PROGRESS) && CANPROGRESSDETECT(i)
(i->callprogress & CALLPROGRESS_PROGRESS)
i->callprogress & CALLPROGRESS_PROGRESS
i->callprogress
i
i
callprogress
CALLPROGRESS_PROGRESS
CALLPROGRESS_PROGRESS
CANPROGRESSDETECT(i)
CANPROGRESSDETECT
CANPROGRESSDETECT
i
i
features |= DSP_FEATURE_CALL_PROGRESS;
features |= DSP_FEATURE_CALL_PROGRESS
features
features
DSP_FEATURE_CALL_PROGRESS
DSP_FEATURE_CALL_PROGRESS
if ((i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i))			features |= DSP_FEATURE_WAITDIALTONE;
(i->waitfordialtone || i->dialtone_detect) && CANPROGRESSDETECT(i)
(i->waitfordialtone || i->dialtone_detect)
i->waitfordialtone || i->dialtone_detect
i->waitfordialtone
i
i
waitfordialtone
i->dialtone_detect
i
i
dialtone_detect
CANPROGRESSDETECT(i)
CANPROGRESSDETECT
CANPROGRESSDETECT
i
i
features |= DSP_FEATURE_WAITDIALTONE;
features |= DSP_FEATURE_WAITDIALTONE
features
features
DSP_FEATURE_WAITDIALTONE
DSP_FEATURE_WAITDIALTONE
if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))) {			features |= DSP_FEATURE_FAX_DETECT;		}
(!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)) ||			(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))
(!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING))
!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)
!i->outgoing
i->outgoing
i
i
outgoing
(i->callprogress & CALLPROGRESS_FAX_INCOMING)
i->callprogress & CALLPROGRESS_FAX_INCOMING
i->callprogress
i
i
callprogress
CALLPROGRESS_FAX_INCOMING
CALLPROGRESS_FAX_INCOMING
(i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING))
i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING)
i->outgoing
i
i
outgoing
(i->callprogress & CALLPROGRESS_FAX_OUTGOING)
i->callprogress & CALLPROGRESS_FAX_OUTGOING
i->callprogress
i
i
callprogress
CALLPROGRESS_FAX_OUTGOING
CALLPROGRESS_FAX_OUTGOING
{			features |= DSP_FEATURE_FAX_DETECT;		}
features |= DSP_FEATURE_FAX_DETECT;
features |= DSP_FEATURE_FAX_DETECT
features
features
DSP_FEATURE_FAX_DETECT
DSP_FEATURE_FAX_DETECT
x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE;
x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE
x
x
DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE
DAHDI_TONEDETECT_ON
DAHDI_TONEDETECT_ON
DAHDI_TONEDETECT_MUTE
DAHDI_TONEDETECT_MUTE
if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)) {			i->hardwaredtmf = 0;			features |= DSP_FEATURE_DIGIT_DETECT;		} else if (NEED_MFDETECT(i)) {			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}
ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)
ioctl
ioctl
i->subs[idx].dfd
i->subs[idx]
i->subs
i
i
subs
idx
idx
dfd
DAHDI_TONEDETECT
DAHDI_TONEDETECT
&x
x
x
{			i->hardwaredtmf = 0;			features |= DSP_FEATURE_DIGIT_DETECT;		}
i->hardwaredtmf = 0;
i->hardwaredtmf = 0
i->hardwaredtmf
i
i
hardwaredtmf
0
features |= DSP_FEATURE_DIGIT_DETECT;
features |= DSP_FEATURE_DIGIT_DETECT
features
features
DSP_FEATURE_DIGIT_DETECT
DSP_FEATURE_DIGIT_DETECT
if (NEED_MFDETECT(i)) {			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}
NEED_MFDETECT(i)
NEED_MFDETECT
NEED_MFDETECT
i
i
{			i->hardwaredtmf = 1;			features |= DSP_FEATURE_DIGIT_DETECT;		}
i->hardwaredtmf = 1;
i->hardwaredtmf = 1
i->hardwaredtmf
i
i
hardwaredtmf
1
features |= DSP_FEATURE_DIGIT_DETECT;
features |= DSP_FEATURE_DIGIT_DETECT
features
features
DSP_FEATURE_DIGIT_DETECT
DSP_FEATURE_DIGIT_DETECT
if (features) {		if (i->dsp) {			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));		} else {			if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;			if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}		}	}
features
features
{		if (i->dsp) {			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));		} else {			if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;			if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}		}	}
if (i->dsp) {			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));		} else {			if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;			if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}		}
i->dsp
i
i
dsp
{			ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));		}
ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp));
ast_debug(1, "Already have a dsp on %s?\n", ast_channel_name(tmp))
ast_debug
ast_debug
1
"Already have a dsp on %s?\n"
ast_channel_name(tmp)
ast_channel_name
ast_channel_name
tmp
tmp
{			if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;			if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}		}
if (i->channel != CHAN_PSEUDO)				i->dsp = ast_dsp_new();			else				i->dsp = NULL;
i->channel != CHAN_PSEUDO
i->channel
i
i
channel
CHAN_PSEUDO
CHAN_PSEUDO
i->dsp = ast_dsp_new();
i->dsp = ast_dsp_new()
i->dsp
i
i
dsp
ast_dsp_new()
ast_dsp_new
ast_dsp_new
i->dsp = NULL;
i->dsp = NULL
i->dsp
i
i
dsp
NULL
NULL
if (i->dsp) {				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}
i->dsp
i
i
dsp
{				i->dsp_features = features;#if defined(HAVE_PRI) || defined(HAVE_SS7)				/* We cannot do progress detection until receive PROGRESS message */				if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig) || (i->sig == SIG_SS7))) {					/* Remember requested DSP features, don't treat					   talking as ANSWER */					i->dsp_features = features & ~DSP_PROGRESS_TALK;					features = 0;				}#endif	/* defined(HAVE_PRI) || defined(HAVE_SS7) */				ast_dsp_set_features(i->dsp, features);				ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);				if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);				if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}			}
i->dsp_features = features;
i->dsp_features = features
i->dsp_features
i
i
dsp_features
features
features
ast_dsp_set_features(i->dsp, features);
ast_dsp_set_features(i->dsp, features)
ast_dsp_set_features
ast_dsp_set_features
i->dsp
i
i
dsp
features
features
ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax);
ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax)
ast_dsp_set_digitmode
ast_dsp_set_digitmode
i->dsp
i
i
dsp
DSP_DIGITMODE_DTMF | i->dtmfrelax
DSP_DIGITMODE_DTMF
DSP_DIGITMODE_DTMF
i->dtmfrelax
i
i
dtmfrelax
if (!ast_strlen_zero(progzone))					ast_dsp_set_call_progress_zone(i->dsp, progzone);
!ast_strlen_zero(progzone)
ast_strlen_zero(progzone)
ast_strlen_zero
ast_strlen_zero
progzone
progzone
ast_dsp_set_call_progress_zone(i->dsp, progzone);
ast_dsp_set_call_progress_zone(i->dsp, progzone)
ast_dsp_set_call_progress_zone
ast_dsp_set_call_progress_zone
i->dsp
i
i
dsp
progzone
progzone
if (i->busydetect && CANBUSYDETECT(i)) {					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}
i->busydetect && CANBUSYDETECT(i)
i->busydetect
i
i
busydetect
CANBUSYDETECT(i)
CANBUSYDETECT
CANBUSYDETECT
i
i
{					ast_dsp_set_busy_count(i->dsp, i->busycount);					ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);				}
ast_dsp_set_busy_count(i->dsp, i->busycount);
ast_dsp_set_busy_count(i->dsp, i->busycount)
ast_dsp_set_busy_count
ast_dsp_set_busy_count
i->dsp
i
i
dsp
i->busycount
i
i
busycount
ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence);
ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence)
ast_dsp_set_busy_pattern
ast_dsp_set_busy_pattern
i->dsp
i
i
dsp
&i->busy_cadence
i->busy_cadence
i
i
busy_cadence
i->dialtone_scanning_time_elapsed = 0;
i->dialtone_scanning_time_elapsed = 0
i->dialtone_scanning_time_elapsed
i
i
dialtone_scanning_time_elapsed
0
if (state == AST_STATE_RING)		ast_channel_rings_set(tmp, 1);
state == AST_STATE_RING
state
state
AST_STATE_RING
AST_STATE_RING
ast_channel_rings_set(tmp, 1);
ast_channel_rings_set(tmp, 1)
ast_channel_rings_set
ast_channel_rings_set
tmp
tmp
1
ast_channel_tech_pvt_set(tmp, i);
ast_channel_tech_pvt_set(tmp, i)
ast_channel_tech_pvt_set
ast_channel_tech_pvt_set
tmp
tmp
i
i
if ((i->sig == SIG_FXOKS) || (i->sig == SIG_FXOGS) || (i->sig == SIG_FXOLS)) {		/* Only FXO signalled stuff can be picked up */		ast_channel_callgroup_set(tmp, i->callgroup);		ast_channel_pickupgroup_set(tmp, i->pickupgroup);		ast_channel_named_callgroups_set(tmp, i->named_callgroups);		ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups);	}
(i->sig == SIG_FXOKS) || (i->sig == SIG_FXOGS) || (i->sig == SIG_FXOLS)
(i->sig == SIG_FXOKS) || (i->sig == SIG_FXOGS)
(i->sig == SIG_FXOKS)
i->sig == SIG_FXOKS
i->sig
i
i
sig
SIG_FXOKS
SIG_FXOKS
(i->sig == SIG_FXOGS)
i->sig == SIG_FXOGS
i->sig
i
i
sig
SIG_FXOGS
SIG_FXOGS
(i->sig == SIG_FXOLS)
i->sig == SIG_FXOLS
i->sig
i
i
sig
SIG_FXOLS
SIG_FXOLS
{		/* Only FXO signalled stuff can be picked up */		ast_channel_callgroup_set(tmp, i->callgroup);		ast_channel_pickupgroup_set(tmp, i->pickupgroup);		ast_channel_named_callgroups_set(tmp, i->named_callgroups);		ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups);	}
ast_channel_callgroup_set(tmp, i->callgroup);
ast_channel_callgroup_set(tmp, i->callgroup)
ast_channel_callgroup_set
ast_channel_callgroup_set
tmp
tmp
i->callgroup
i
i
callgroup
ast_channel_pickupgroup_set(tmp, i->pickupgroup);
ast_channel_pickupgroup_set(tmp, i->pickupgroup)
ast_channel_pickupgroup_set
ast_channel_pickupgroup_set
tmp
tmp
i->pickupgroup
i
i
pickupgroup
ast_channel_named_callgroups_set(tmp, i->named_callgroups);
ast_channel_named_callgroups_set(tmp, i->named_callgroups)
ast_channel_named_callgroups_set
ast_channel_named_callgroups_set
tmp
tmp
i->named_callgroups
i
i
named_callgroups
ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups);
ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups)
ast_channel_named_pickupgroups_set
ast_channel_named_pickupgroups_set
tmp
tmp
i->named_pickupgroups
i
i
named_pickupgroups
if (!ast_strlen_zero(i->parkinglot))		ast_channel_parkinglot_set(tmp, i->parkinglot);
!ast_strlen_zero(i->parkinglot)
ast_strlen_zero(i->parkinglot)
ast_strlen_zero
ast_strlen_zero
i->parkinglot
i
i
parkinglot
ast_channel_parkinglot_set(tmp, i->parkinglot);
ast_channel_parkinglot_set(tmp, i->parkinglot)
ast_channel_parkinglot_set
ast_channel_parkinglot_set
tmp
tmp
i->parkinglot
i
i
parkinglot
if (!ast_strlen_zero(i->language))		ast_channel_language_set(tmp, i->language);
!ast_strlen_zero(i->language)
ast_strlen_zero(i->language)
ast_strlen_zero
ast_strlen_zero
i->language
i
i
language
ast_channel_language_set(tmp, i->language);
ast_channel_language_set(tmp, i->language)
ast_channel_language_set
ast_channel_language_set
tmp
tmp
i->language
i
i
language
if (!i->owner)		i->owner = tmp;
!i->owner
i->owner
i
i
owner
i->owner = tmp;
i->owner = tmp
i->owner
i
i
owner
tmp
tmp
if (!ast_strlen_zero(i->accountcode))		ast_channel_accountcode_set(tmp, i->accountcode);
!ast_strlen_zero(i->accountcode)
ast_strlen_zero(i->accountcode)
ast_strlen_zero
ast_strlen_zero
i->accountcode
i
i
accountcode
ast_channel_accountcode_set(tmp, i->accountcode);
ast_channel_accountcode_set(tmp, i->accountcode)
ast_channel_accountcode_set
ast_channel_accountcode_set
tmp
tmp
i->accountcode
i
i
accountcode
if (i->amaflags)		ast_channel_amaflags_set(tmp, i->amaflags);
i->amaflags
i
i
amaflags
ast_channel_amaflags_set(tmp, i->amaflags);
ast_channel_amaflags_set(tmp, i->amaflags)
ast_channel_amaflags_set
ast_channel_amaflags_set
tmp
tmp
i->amaflags
i
i
amaflags
i->subs[idx].owner = tmp;
i->subs[idx].owner = tmp
i->subs[idx].owner
i->subs[idx]
i->subs
i
i
subs
idx
idx
owner
tmp
tmp
ast_channel_context_set(tmp, i->context);
ast_channel_context_set(tmp, i->context)
ast_channel_context_set
ast_channel_context_set
tmp
tmp
i->context
i
i
context
if (!analog_lib_handles(i->sig, i->radio, i->oprmode)) {		ast_channel_call_forward_set(tmp, i->call_forward);	}
!analog_lib_handles(i->sig, i->radio, i->oprmode)
analog_lib_handles(i->sig, i->radio, i->oprmode)
analog_lib_handles
analog_lib_handles
i->sig
i
i
sig
i->radio
i
i
radio
i->oprmode
i
i
oprmode
{		ast_channel_call_forward_set(tmp, i->call_forward);	}
ast_channel_call_forward_set(tmp, i->call_forward);
ast_channel_call_forward_set(tmp, i->call_forward)
ast_channel_call_forward_set
ast_channel_call_forward_set
tmp
tmp
i->call_forward
i
i
call_forward
if (!i->adsi)		ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);
!i->adsi
i->adsi
i
i
adsi
ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE);
ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE)
ast_channel_adsicpe_set
ast_channel_adsicpe_set
tmp
tmp
AST_ADSI_UNAVAILABLE
AST_ADSI_UNAVAILABLE
if (!ast_strlen_zero(i->exten))		ast_channel_exten_set(tmp, i->exten);
!ast_strlen_zero(i->exten)
ast_strlen_zero(i->exten)
ast_strlen_zero
ast_strlen_zero
i->exten
i
i
exten
ast_channel_exten_set(tmp, i->exten);
ast_channel_exten_set(tmp, i->exten)
ast_channel_exten_set
ast_channel_exten_set
tmp
tmp
i->exten
i
i
exten
if (!ast_strlen_zero(i->rdnis)) {		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}
!ast_strlen_zero(i->rdnis)
ast_strlen_zero(i->rdnis)
ast_strlen_zero
ast_strlen_zero
i->rdnis
i
i
rdnis
{		ast_channel_redirecting(tmp)->from.number.valid = 1;		ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);	}
ast_channel_redirecting(tmp)->from.number.valid = 1;
ast_channel_redirecting(tmp)->from.number.valid = 1
ast_channel_redirecting(tmp)->from.number.valid
ast_channel_redirecting(tmp)->from.number
ast_channel_redirecting(tmp)->from
ast_channel_redirecting(tmp)
ast_channel_redirecting
ast_channel_redirecting
tmp
tmp
from
number
valid
1
ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis);
ast_channel_redirecting(tmp)->from.number.str = ast_strdup(i->rdnis)
ast_channel_redirecting(tmp)->from.number.str
ast_channel_redirecting(tmp)->from.number
ast_channel_redirecting(tmp)->from
ast_channel_redirecting(tmp)
ast_channel_redirecting
ast_channel_redirecting
tmp
tmp
from
number
str
ast_strdup(i->rdnis)
ast_strdup
ast_strdup
i->rdnis
i
i
rdnis
if (!ast_strlen_zero(i->dnid)) {		ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);	}
!ast_strlen_zero(i->dnid)
ast_strlen_zero(i->dnid)
ast_strlen_zero
ast_strlen_zero
i->dnid
i
i
dnid
{		ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);	}
ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid);
ast_channel_dialed(tmp)->number.str = ast_strdup(i->dnid)
ast_channel_dialed(tmp)->number.str
ast_channel_dialed(tmp)->number
ast_channel_dialed(tmp)
ast_channel_dialed
ast_channel_dialed
tmp
tmp
number
str
ast_strdup(i->dnid)
ast_strdup
ast_strdup
i->dnid
i
i
dnid
if (!ast_strlen_zero(i->cid_num)) {		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}
!ast_strlen_zero(i->cid_num)
ast_strlen_zero(i->cid_num)
ast_strlen_zero
ast_strlen_zero
i->cid_num
i
i
cid_num
{		ast_channel_caller(tmp)->ani.number.valid = 1;		ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);	}
ast_channel_caller(tmp)->ani.number.valid = 1;
ast_channel_caller(tmp)->ani.number.valid = 1
ast_channel_caller(tmp)->ani.number.valid
ast_channel_caller(tmp)->ani.number
ast_channel_caller(tmp)->ani
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani
number
valid
1
ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num);
ast_channel_caller(tmp)->ani.number.str = ast_strdup(i->cid_num)
ast_channel_caller(tmp)->ani.number.str
ast_channel_caller(tmp)->ani.number
ast_channel_caller(tmp)->ani
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani
number
str
ast_strdup(i->cid_num)
ast_strdup
ast_strdup
i->cid_num
i
i
cid_num
ast_channel_caller(tmp)->id.name.presentation = i->callingpres;
ast_channel_caller(tmp)->id.name.presentation = i->callingpres
ast_channel_caller(tmp)->id.name.presentation
ast_channel_caller(tmp)->id.name
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
name
presentation
i->callingpres
i
i
callingpres
ast_channel_caller(tmp)->id.number.presentation = i->callingpres;
ast_channel_caller(tmp)->id.number.presentation = i->callingpres
ast_channel_caller(tmp)->id.number.presentation
ast_channel_caller(tmp)->id.number
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
number
presentation
i->callingpres
i
i
callingpres
ast_channel_caller(tmp)->id.number.plan = i->cid_ton;
ast_channel_caller(tmp)->id.number.plan = i->cid_ton
ast_channel_caller(tmp)->id.number.plan
ast_channel_caller(tmp)->id.number
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
number
plan
i->cid_ton
i
i
cid_ton
ast_channel_caller(tmp)->ani2 = i->cid_ani2;
ast_channel_caller(tmp)->ani2 = i->cid_ani2
ast_channel_caller(tmp)->ani2
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
ani2
i->cid_ani2
i
i
cid_ani2
ast_channel_caller(tmp)->id.tag = ast_strdup(i->cid_tag);
ast_channel_caller(tmp)->id.tag = ast_strdup(i->cid_tag)
ast_channel_caller(tmp)->id.tag
ast_channel_caller(tmp)->id
ast_channel_caller(tmp)
ast_channel_caller
ast_channel_caller
tmp
tmp
id
tag
ast_strdup(i->cid_tag)
ast_strdup
ast_strdup
i->cid_tag
i
i
cid_tag
i->fake_event = 0;
i->fake_event = 0
i->fake_event
i
i
fake_event
0
dahdi_confmute(i, 0);
dahdi_confmute(i, 0)
dahdi_confmute
dahdi_confmute
i
i
0
i->muting = 0;
i->muting = 0
i->muting
i
i
muting
0
ast_jb_configure(tmp, &global_jbconf);
ast_jb_configure(tmp, &global_jbconf)
ast_jb_configure
ast_jb_configure
tmp
tmp
&global_jbconf
global_jbconf
global_jbconf
ast_copy_string(device_name, ast_channel_name(tmp), sizeof(device_name));
ast_copy_string(device_name, ast_channel_name(tmp), sizeof(device_name))
ast_copy_string
ast_copy_string
device_name
device_name
ast_channel_name(tmp)
ast_channel_name
ast_channel_name
tmp
tmp
sizeof(device_name)
(device_name)
device_name
device_name
dashptr = strrchr(device_name, '-');
dashptr = strrchr(device_name, '-')
dashptr
dashptr
strrchr(device_name, '-')
strrchr
strrchr
device_name
device_name
'-'
if (dashptr) {		*dashptr = '\0';	}
dashptr
dashptr
{		*dashptr = '\0';	}
*dashptr = '\0';
*dashptr = '\0'
*dashptr
dashptr
dashptr
'\0'
ast_devstate_changed_literal(AST_DEVICE_UNKNOWN, device_name);
ast_devstate_changed_literal(AST_DEVICE_UNKNOWN, device_name)
ast_devstate_changed_literal
ast_devstate_changed_literal
AST_DEVICE_UNKNOWN
AST_DEVICE_UNKNOWN
device_name
device_name
for (v = i->vars ; v ; v = v->next)		pbx_builtin_setvar_helper(tmp, v->name, v->value);
v = i->vars ;
v = i->vars
v
v
i->vars
i
i
vars
v
v
v = v->next
v
v
v->next
v
v
next
pbx_builtin_setvar_helper(tmp, v->name, v->value);
pbx_builtin_setvar_helper(tmp, v->name, v->value)
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
tmp
tmp
v->name
v
v
name
v->value
v
v
value
ast_module_ref(ast_module_info->self);
ast_module_ref(ast_module_info->self)
ast_module_ref
ast_module_ref
ast_module_info->self
ast_module_info
ast_module_info
self
dahdi_ami_channel_event(i, tmp);
dahdi_ami_channel_event(i, tmp)
dahdi_ami_channel_event
dahdi_ami_channel_event
i
i
tmp
tmp
if (startpbx) {#ifdef HAVE_OPENR2		if (i->mfcr2call) {			pbx_builtin_setvar_helper(tmp, "MFCR2_CATEGORY", openr2_proto_get_category_string(i->mfcr2_recvd_category));		}#endif		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			return NULL;		}	}
startpbx
startpbx
{#ifdef HAVE_OPENR2		if (i->mfcr2call) {			pbx_builtin_setvar_helper(tmp, "MFCR2_CATEGORY", openr2_proto_get_category_string(i->mfcr2_recvd_category));		}#endif		if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			return NULL;		}	}
if (ast_pbx_start(tmp)) {			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			return NULL;		}
ast_pbx_start(tmp)
ast_pbx_start
ast_pbx_start
tmp
tmp
{			ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));			ast_hangup(tmp);			return NULL;		}
ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp));
ast_log(LOG_WARNING, "Unable to start PBX on %s\n", ast_channel_name(tmp))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Unable to start PBX on %s\n"
ast_channel_name(tmp)
ast_channel_name
ast_channel_name
tmp
tmp
ast_hangup(tmp);
ast_hangup(tmp)
ast_hangup
ast_hangup
tmp
tmp
return NULL;
NULL
NULL
return tmp;
tmp
tmp
-----joern-----
(403,734,0)
(849,451,0)
(30,867,0)
(38,588,0)
(2,67,0)
(877,440,0)
(597,273,0)
(412,588,0)
(559,204,0)
(37,180,0)
(842,239,0)
(142,588,0)
(93,588,0)
(497,61,0)
(679,379,0)
(649,705,0)
(464,720,0)
(280,54,0)
(683,84,0)
(661,588,0)
(121,672,0)
(818,689,0)
(599,530,0)
(483,537,0)
(237,579,0)
(880,588,0)
(164,184,0)
(509,734,0)
(499,416,0)
(324,163,0)
(46,768,0)
(155,705,0)
(853,169,0)
(510,819,0)
(792,113,0)
(138,346,0)
(481,204,0)
(775,127,0)
(697,568,0)
(566,231,0)
(30,734,0)
(778,336,0)
(461,588,0)
(353,422,0)
(531,783,0)
(64,310,0)
(116,718,0)
(506,747,0)
(207,137,0)
(526,265,0)
(362,231,0)
(364,668,0)
(701,196,0)
(301,126,0)
(661,622,0)
(306,588,0)
(44,588,0)
(495,13,0)
(474,115,0)
(711,847,0)
(314,563,0)
(237,588,0)
(416,588,0)
(218,588,0)
(432,832,0)
(438,86,0)
(555,458,0)
(7,207,0)
(802,399,0)
(244,588,0)
(365,720,0)
(412,568,0)
(525,621,0)
(687,386,0)
(539,657,0)
(640,534,0)
(137,173,0)
(89,599,0)
(815,705,0)
(158,702,0)
(649,590,0)
(366,474,0)
(576,830,0)
(705,720,0)
(739,334,0)
(263,489,0)
(113,863,0)
(725,588,0)
(253,416,0)
(16,689,0)
(60,401,0)
(69,731,0)
(690,715,0)
(827,80,0)
(769,734,0)
(26,859,0)
(361,705,0)
(812,841,0)
(65,93,0)
(660,794,0)
(366,554,0)
(166,734,0)
(498,737,0)
(543,667,0)
(801,705,0)
(366,198,0)
(563,588,0)
(170,358,0)
(758,58,0)
(804,556,0)
(360,588,0)
(530,599,0)
(481,588,0)
(667,665,0)
(510,518,0)
(786,208,0)
(368,77,0)
(650,705,0)
(281,3,0)
(426,400,0)
(847,211,0)
(815,685,0)
(288,244,0)
(706,687,0)
(731,734,0)
(452,382,0)
(600,664,0)
(613,40,0)
(801,734,0)
(475,571,0)
(712,734,0)
(696,642,0)
(413,646,0)
(455,172,0)
(703,25,0)
(163,324,0)
(647,588,0)
(653,819,0)
(844,457,0)
(809,137,0)
(400,527,0)
(386,585,0)
(412,527,0)
(771,49,0)
(127,486,0)
(808,387,0)
(754,527,0)
(603,530,0)
(106,631,0)
(242,555,0)
(720,705,0)
(33,360,0)
(1,705,0)
(100,146,0)
(97,818,0)
(383,250,0)
(754,568,0)
(566,272,0)
(200,494,0)
(454,856,0)
(448,293,0)
(119,853,0)
(489,588,0)
(182,362,0)
(720,866,0)
(544,576,0)
(423,378,0)
(250,537,0)
(247,22,0)
(617,588,0)
(670,734,0)
(160,387,0)
(366,54,0)
(399,348,0)
(222,218,0)
(878,143,0)
(628,661,0)
(708,734,0)
(103,73,0)
(857,780,0)
(100,588,0)
(366,661,0)
(760,360,0)
(854,720,0)
(622,176,0)
(75,43,0)
(570,734,0)
(123,246,0)
(354,406,0)
(82,339,0)
(305,725,0)
(122,677,0)
(665,406,0)
(534,458,0)
(746,300,0)
(273,782,0)
(725,502,0)
(765,180,0)
(603,705,0)
(399,802,0)
(846,588,0)
(169,734,0)
(751,686,0)
(207,451,0)
(366,440,0)
(29,100,0)
(268,734,0)
(807,617,0)
(52,705,0)
(221,249,0)
(449,580,0)
(366,553,0)
(869,40,0)
(313,387,0)
(757,99,0)
(389,412,0)
(870,457,0)
(872,588,0)
(845,580,0)
(366,90,0)
(531,828,0)
(279,713,0)
(6,176,0)
(332,700,0)
(230,467,0)
(566,518,0)
(574,602,0)
(602,657,0)
(633,653,0)
(530,603,0)
(541,430,0)
(494,553,0)
(162,316,0)
(297,56,0)
(573,846,0)
(387,160,0)
(184,715,0)
(479,492,0)
(510,272,0)
(316,705,0)
(61,705,0)
(224,337,0)
(565,734,0)
(67,222,0)
(206,532,0)
(688,785,0)
(337,876,0)
(25,588,0)
(545,21,0)
(186,705,0)
(856,705,0)
(416,62,0)
(443,437,0)
(720,464,0)
(246,588,0)
(767,661,0)
(611,720,0)
(126,517,0)
(674,290,0)
(853,588,0)
(875,194,0)
(180,37,0)
(749,375,0)
(250,588,0)
(165,799,0)
(754,588,0)
(13,154,0)
(749,160,0)
(591,743,0)
(353,461,0)
(283,485,0)
(235,172,0)
(553,494,0)
(484,300,0)
(400,426,0)
(555,54,0)
(607,603,0)
(741,527,0)
(173,137,0)
(419,718,0)
(374,211,0)
(567,378,0)
(402,361,0)
(683,346,0)
(817,840,0)
(736,458,0)
(638,588,0)
(820,228,0)
(64,734,0)
(32,38,0)
(630,783,0)
(140,872,0)
(501,761,0)
(56,734,0)
(251,111,0)
(729,155,0)
(142,681,0)
(133,422,0)
(223,720,0)
(500,434,0)
(753,155,0)
(128,736,0)
(238,421,0)
(145,588,0)
(436,734,0)
(532,206,0)
(122,300,0)
(598,103,0)
(99,588,0)
(347,91,0)
(409,227,0)
(287,780,0)
(713,812,0)
(510,337,0)
(644,627,0)
(182,588,0)
(339,694,0)
(25,856,0)
(219,642,0)
(755,26,0)
(14,638,0)
(604,30,0)
(426,272,0)
(49,771,0)
(681,732,0)
(650,734,0)
(771,588,0)
(233,649,0)
(439,417,0)
(175,588,0)
(880,452,0)
(424,518,0)
(216,648,0)
(515,60,0)
(841,840,0)
(98,467,0)
(791,572,0)
(357,734,0)
(366,743,0)
(557,627,0)
(73,103,0)
(247,266,0)
(806,168,0)
(556,804,0)
(638,549,0)
(715,589,0)
(386,687,0)
(114,204,0)
(876,518,0)
(714,297,0)
(743,26,0)
(8,785,0)
(814,791,0)
(255,417,0)
(161,585,0)
(680,588,0)
(485,802,0)
(37,705,0)
(843,334,0)
(763,176,0)
(183,625,0)
(472,734,0)
(610,103,0)
(695,554,0)
(668,568,0)
(162,91,0)
(799,83,0)
(53,158,0)
(697,118,0)
(756,452,0)
(22,247,0)
(785,102,0)
(465,638,0)
(689,705,0)
(83,799,0)
(349,806,0)
(619,639,0)
(517,337,0)
(255,442,0)
(634,102,0)
(452,705,0)
(522,588,0)
(59,805,0)
(657,602,0)
(534,700,0)
(151,250,0)
(51,272,0)
(137,207,0)
(407,705,0)
(252,734,0)
(421,238,0)
(580,272,0)
(201,400,0)
(385,734,0)
(631,106,0)
(643,185,0)
(367,188,0)
(359,705,0)
(335,422,0)
(405,358,0)
(300,122,0)
(336,720,0)
(624,732,0)
(718,419,0)
(788,648,0)
(548,339,0)
(56,297,0)
(316,162,0)
(709,726,0)
(580,876,0)
(434,588,0)
(685,2,0)
(750,459,0)
(223,588,0)
(372,739,0)
(738,223,0)
(812,713,0)
(430,451,0)
(722,52,0)
(601,629,0)
(740,680,0)
(311,386,0)
(160,749,0)
(118,697,0)
(113,705,0)
(665,27,0)
(296,182,0)
(698,108,0)
(337,518,0)
(571,588,0)
(793,563,0)
(366,38,0)
(409,734,0)
(868,822,0)
(586,358,0)
(629,869,0)
(226,758,0)
(311,171,0)
(575,650,0)
(797,459,0)
(171,469,0)
(590,734,0)
(422,588,0)
(152,320,0)
(733,769,0)
(471,734,0)
(511,802,0)
(35,348,0)
(154,13,0)
(511,745,0)
(795,304,0)
(580,337,0)
(41,744,0)
(871,90,0)
(868,174,0)
(109,227,0)
(171,311,0)
(62,416,0)
(552,865,0)
(464,588,0)
(417,255,0)
(426,791,0)
(834,239,0)
(106,458,0)
(184,720,0)
(340,338,0)
(217,719,0)
(421,622,0)
(658,571,0)
(188,588,0)
(463,244,0)
(818,401,0)
(582,646,0)
(207,541,0)
(238,625,0)
(22,588,0)
(331,25,0)
(712,700,0)
(366,768,0)
(400,568,0)
(700,712,0)
(54,555,0)
(72,644,0)
(579,761,0)
(307,717,0)
(517,876,0)
(434,870,0)
(847,705,0)
(699,76,0)
(358,405,0)
(260,587,0)
(762,90,0)
(366,668,0)
(191,485,0)
(324,139,0)
(239,834,0)
(677,146,0)
(713,588,0)
(371,846,0)
(777,818,0)
(257,498,0)
(303,803,0)
(92,289,0)
(395,617,0)
(310,64,0)
(108,698,0)
(487,861,0)
(524,317,0)
(724,865,0)
(702,158,0)
(56,361,0)
(139,324,0)
(270,343,0)
(34,588,0)
(879,106,0)
(380,1,0)
(12,464,0)
(404,455,0)
(693,49,0)
(63,734,0)
(239,838,0)
(512,510,0)
(852,642,0)
(427,758,0)
(444,44,0)
(459,720,0)
(816,22,0)
(264,257,0)
(612,206,0)
(440,588,0)
(391,720,0)
(217,734,0)
(614,471,0)
(787,59,0)
(125,210,0)
(605,863,0)
(9,734,0)
(298,520,0)
(761,492,0)
(460,108,0)
(862,681,0)
(137,705,0)
(776,469,0)
(699,202,0)
(705,734,0)
(534,420,0)
(322,218,0)
(366,67,0)
(351,588,0)
(173,541,0)
(496,683,0)
(257,588,0)
(366,126,0)
(812,116,0)
(516,186,0)
(337,272,0)
(850,357,0)
(214,38,0)
(555,338,0)
(838,258,0)
(752,173,0)
(523,100,0)
(215,430,0)
(80,731,0)
(363,644,0)
(293,734,0)
(517,642,0)
(720,223,0)
(502,677,0)
(608,306,0)
(210,258,0)
(659,80,0)
(513,702,0)
(457,870,0)
(720,336,0)
(154,835,0)
(370,158,0)
(127,705,0)
(867,588,0)
(131,420,0)
(451,246,0)
(380,303,0)
(562,734,0)
(86,393,0)
(150,873,0)
(17,730,0)
(93,65,0)
(669,362,0)
(366,3,0)
(549,315,0)
(74,824,0)
(517,664,0)
(858,780,0)
(41,306,0)
(110,440,0)
(761,579,0)
(441,357,0)
(819,572,0)
(686,588,0)
(433,835,0)
(730,588,0)
(625,588,0)
(773,173,0)
(648,75,0)
(426,664,0)
(232,872,0)
(146,677,0)
(177,585,0)
(874,240,0)
(840,841,0)
(552,458,0)
(682,61,0)
(366,587,0)
(75,648,0)
(510,876,0)
(781,520,0)
(768,527,0)
(870,434,0)
(654,359,0)
(684,732,0)
(400,588,0)
(468,734,0)
(644,588,0)
(759,734,0)
(832,68,0)
(758,352,0)
(723,801,0)
(49,615,0)
(566,664,0)
(652,34,0)
(447,734,0)
(86,438,0)
(732,588,0)
(115,474,0)
(876,664,0)
(471,705,0)
(236,371,0)
(315,737,0)
(463,705,0)
(595,783,0)
(145,290,0)
(459,588,0)
(73,734,0)
(580,664,0)
(726,584,0)
(302,588,0)
(851,302,0)
(277,734,0)
(129,206,0)
(380,366,0)
(329,734,0)
(527,741,0)
(426,580,0)
(325,461,0)
(455,527,0)
(255,458,0)
(474,368,0)
(240,334,0)
(376,680,0)
(442,255,0)
(677,502,0)
(719,217,0)
(626,747,0)
(505,348,0)
(43,75,0)
(615,49,0)
(352,758,0)
(339,87,0)
(745,511,0)
(150,705,0)
(635,589,0)
(106,587,0)
(864,59,0)
(295,734,0)
(0,365,0)
(716,254,0)
(95,510,0)
(704,585,0)
(80,588,0)
(856,382,0)
(108,169,0)
(426,566,0)
(867,30,0)
(369,553,0)
(774,265,0)
(343,522,0)
(532,726,0)
(615,717,0)
(602,118,0)
(577,522,0)
(112,853,0)
(514,458,0)
(415,544,0)
(826,463,0)
(546,867,0)
(289,705,0)
(317,705,0)
(320,382,0)
(357,441,0)
(677,122,0)
(148,734,0)
(662,686,0)
(540,560,0)
(343,270,0)
(227,588,0)
(366,139,0)
(147,1,0)
(466,697,0)
(486,127,0)
(155,588,0)
(190,139,0)
(800,86,0)
(743,74,0)
(366,667,0)
(345,734,0)
(678,880,0)
(105,168,0)
(571,658,0)
(104,518,0)
(290,458,0)
(81,517,0)
(115,211,0)
(668,588,0)
(592,182,0)
(196,705,0)
(676,805,0)
(5,83,0)
(438,705,0)
(517,566,0)
(829,237,0)
(508,787,0)
(380,249,0)
(350,801,0)
(559,99,0)
(517,580,0)
(388,804,0)
(530,734,0)
(783,531,0)
(656,234,0)
(811,434,0)
(692,430,0)
(317,188,0)
(410,588,0)
(271,511,0)
(248,560,0)
(202,734,0)
(114,588,0)
(667,822,0)
(833,438,0)
(31,188,0)
(589,715,0)
(411,244,0)
(520,298,0)
(469,290,0)
(10,556,0)
(471,865,0)
(98,3,0)
(631,588,0)
(300,588,0)
(726,532,0)
(552,680,0)
(589,617,0)
(564,236,0)
(510,566,0)
(229,725,0)
(40,869,0)
(299,734,0)
(681,142,0)
(784,859,0)
(563,824,0)
(754,315,0)
(420,534,0)
(616,175,0)
(429,588,0)
(856,25,0)
(822,667,0)
(593,175,0)
(576,544,0)
(267,698,0)
(717,615,0)
(634,504,0)
(355,93,0)
(550,726,0)
(240,705,0)
(732,681,0)
(689,818,0)
(783,588,0)
(522,343,0)
(580,518,0)
(185,718,0)
(838,62,0)
(618,489,0)
(373,734,0)
(59,787,0)
(589,588,0)
(246,451,0)
(204,559,0)
(462,734,0)
(326,571,0)
(3,98,0)
(139,210,0)
(312,861,0)
(861,588,0)
(764,672,0)
(96,2,0)
(174,705,0)
(371,176,0)
(538,730,0)
(720,365,0)
(580,68,0)
(819,510,0)
(337,727,0)
(680,552,0)
(396,351,0)
(196,163,0)
(431,365,0)
(67,2,0)
(428,366,0)
(204,481,0)
(327,386,0)
(276,21,0)
(802,485,0)
(560,588,0)
(503,858,0)
(290,145,0)
(159,754,0)
(366,182,0)
(168,806,0)
(579,458,0)
(870,390,0)
(848,236,0)
(758,736,0)
(761,712,0)
(412,498,0)
(420,588,0)
(578,734,0)
(581,486,0)
(185,429,0)
(452,880,0)
(394,876,0)
(537,483,0)
(156,420,0)
(728,880,0)
(338,588,0)
(178,713,0)
(806,588,0)
(473,685,0)
(726,705,0)
(168,705,0)
(747,626,0)
(143,705,0)
(770,351,0)
(45,566,0)
(378,720,0)
(273,588,0)
(485,283,0)
(782,273,0)
(566,876,0)
(284,426,0)
(278,579,0)
(348,399,0)
(197,107,0)
(623,67,0)
(30,705,0)
(194,705,0)
(824,74,0)
(410,823,0)
(366,80,0)
(715,734,0)
(712,761,0)
(685,815,0)
(480,163,0)
(872,634,0)
(199,552,0)
(768,588,0)
(272,734,0)
(212,198,0)
(38,359,0)
(319,302,0)
(275,76,0)
(408,522,0)
(206,588,0)
(126,588,0)
(208,497,0)
(158,384,0)
(153,223,0)
(636,354,0)
(558,653,0)
(497,208,0)
(338,555,0)
(366,653,0)
(202,699,0)
(79,791,0)
(697,527,0)
(790,631,0)
(440,293,0)
(789,268,0)
(510,664,0)
(222,734,0)
(720,184,0)
(780,418,0)
(366,236,0)
(282,324,0)
(544,588,0)
(11,255,0)
(533,126,0)
(697,588,0)
(136,22,0)
(198,13,0)
(836,514,0)
(90,588,0)
(456,687,0)
(174,868,0)
(189,834,0)
(28,799,0)
(801,588,0)
(323,429,0)
(256,304,0)
(286,822,0)
(117,734,0)
(377,715,0)
(217,705,0)
(265,681,0)
(60,705,0)
(655,566,0)
(27,665,0)
(20,37,0)
(225,368,0)
(213,519,0)
(243,410,0)
(366,739,0)
(274,34,0)
(259,863,0)
(320,861,0)
(865,471,0)
(1,734,0)
(361,56,0)
(365,588,0)
(493,683,0)
(710,50,0)
(380,794,0)
(587,106,0)
(132,283,0)
(341,122,0)
(135,316,0)
(657,588,0)
(455,568,0)
(262,719,0)
(120,657,0)
(553,409,0)
(218,222,0)
(173,451,0)
(76,588,0)
(589,360,0)
(320,705,0)
(426,337,0)
(837,745,0)
(356,876,0)
(426,642,0)
(339,705,0)
(57,626,0)
(744,41,0)
(188,317,0)
(445,705,0)
(315,549,0)
(291,840,0)
(23,625,0)
(545,192,0)
(735,154,0)
(54,492,0)
(39,806,0)
(163,196,0)
(494,705,0)
(198,354,0)
(467,98,0)
(27,302,0)
(721,352,0)
(627,644,0)
(457,560,0)
(52,859,0)
(587,650,0)
(205,668,0)
(841,812,0)
(637,207,0)
(863,588,0)
(488,471,0)
(846,371,0)
(220,283,0)
(101,311,0)
(810,114,0)
(609,868,0)
(330,734,0)
(146,100,0)
(556,588,0)
(234,734,0)
(498,412,0)
(835,154,0)
(85,771,0)
(76,699,0)
(497,734,0)
(718,185,0)
(498,257,0)
(321,525,0)
(254,588,0)
(486,834,0)
(869,629,0)
(204,114,0)
(366,44,0)
(241,115,0)
(236,588,0)
(290,469,0)
(629,588,0)
(627,705,0)
(823,536,0)
(596,867,0)
(91,162,0)
(249,392,0)
(26,743,0)
(337,664,0)
(397,631,0)
(302,27,0)
(50,254,0)
(62,838,0)
(681,265,0)
(470,107,0)
(641,734,0)
(294,289,0)
(2,685,0)
(779,873,0)
(387,588,0)
(334,240,0)
(422,353,0)
(769,34,0)
(50,705,0)
(507,379,0)
(646,588,0)
(547,352,0)
(419,351,0)
(517,272,0)
(42,86,0)
(19,736,0)
(859,52,0)
(124,174,0)
(15,634,0)
(707,823,0)
(736,758,0)
(632,400,0)
(245,246,0)
(266,247,0)
(344,745,0)
(378,588,0)
(583,306,0)
(78,176,0)
(265,588,0)
(664,272,0)
(554,357,0)
(417,588,0)
(823,410,0)
(840,588,0)
(366,872,0)
(333,429,0)
(40,588,0)
(455,588,0)
(435,338,0)
(90,832,0)
(203,504,0)
(517,518,0)
(666,150,0)
(518,664,0)
(478,417,0)
(244,463,0)
(65,55,0)
(780,858,0)
(873,150,0)
(681,862,0)
(426,518,0)
(4,768,0)
(179,142,0)
(831,664,0)
(742,441,0)
(36,720,0)
(336,588,0)
(168,382,0)
(748,815,0)
(453,35,0)
(653,588,0)
(491,568,0)
(492,734,0)
(673,227,0)
(510,580,0)
(476,176,0)
(47,257,0)
(566,337,0)
(450,337,0)
(606,186,0)
(876,272,0)
(228,588,0)
(822,868,0)
(227,409,0)
(519,734,0)
(528,114,0)
(346,683,0)
(490,629,0)
(860,145,0)
(521,697,0)
(70,165,0)
(149,514,0)
(37,734,0)
(414,437,0)
(535,254,0)
(700,534,0)
(542,272,0)
(873,698,0)
(318,377,0)
(518,272,0)
(118,642,0)
(467,194,0)
(348,35,0)
(261,734,0)
(165,705,0)
(358,588,0)
(855,441,0)
(130,545,0)
(561,237,0)
(309,481,0)
(825,585,0)
(141,771,0)
(446,273,0)
(306,41,0)
(342,474,0)
(134,464,0)
(328,238,0)
(639,590,0)
(172,455,0)
(698,873,0)
(718,116,0)
(663,410,0)
(194,467,0)
(34,769,0)
(209,93,0)
(107,588,0)
(169,853,0)
(283,588,0)
(351,419,0)
(167,336,0)
(835,705,0)
(745,588,0)
(118,602,0)
(863,113,0)
(861,320,0)
(717,588,0)
(292,44,0)
(366,108,0)
(625,238,0)
(529,626,0)
(268,715,0)
(865,552,0)
(730,734,0)
(622,421,0)
(620,171,0)
(617,589,0)
(675,145,0)
(48,35,0)
(648,588,0)
(429,185,0)
(211,115,0)
(66,481,0)
(590,639,0)
(769,705,0)
(71,217,0)
(18,412,0)
(461,353,0)
(569,647,0)
(549,638,0)
(720,378,0)
(554,525,0)
(720,459,0)
(482,519,0)
(269,754,0)
(805,59,0)
(430,541,0)
(798,421,0)
(799,165,0)
(379,866,0)
(859,26,0)
(35,588,0)
(824,563,0)
(834,486,0)
(691,303,0)
(839,142,0)
(823,705,0)
(426,876,0)
(366,239,0)
(645,556,0)
(651,218,0)
(254,50,0)
(821,541,0)
(116,812,0)
(828,531,0)
(13,198,0)
(21,545,0)
(626,588,0)
(560,457,0)
(579,237,0)
(315,754,0)
(805,705,0)
(88,98,0)
(308,545,0)
(157,846,0)
(74,77,0)
(3,658,0)
(352,588,0)
(590,649,0)
(211,847,0)
(360,589,0)
(813,310,0)
(830,576,0)
(187,421,0)
(381,76,0)
(155,734,0)
(59,734,0)
(425,647,0)
(794,58,0)
(772,442,0)
(61,497,0)
(720,144,0)
(334,739,0)
(181,734,0)
(193,455,0)
(94,544,0)
(366,83,0)
(658,734,0)
(502,725,0)
(24,407,0)
(537,250,0)
(551,841,0)
(83,749,0)
(739,202,0)
(99,559,0)
(162,734,0)
(802,511,0)
(44,234,0)
(469,171,0)
(55,65,0)
(796,734,0)
(285,585,0)
(366,401,0)
(408,405,1)
(366,474,1)
(284,400,1)
(656,44,1)
(561,829,1)
(614,158,1)
(720,336,1)
(52,705,1)
(811,500,1)
(170,823,1)
(35,453,1)
(688,634,1)
(845,832,1)
(698,873,1)
(521,426,1)
(812,713,1)
(348,505,1)
(159,498,1)
(214,32,1)
(771,85,1)
(280,555,1)
(228,588,1)
(453,48,1)
(158,53,1)
(534,458,1)
(629,588,1)
(433,266,1)
(227,588,1)
(837,344,1)
(430,451,1)
(548,82,1)
(510,518,1)
(552,458,1)
(238,625,1)
(822,286,1)
(190,324,1)
(651,67,1)
(355,782,1)
(426,400,1)
(26,859,1)
(324,163,1)
(566,337,1)
(526,30,1)
(377,318,1)
(438,705,1)
(875,222,1)
(566,655,1)
(831,600,1)
(505,35,1)
(397,790,1)
(666,658,1)
(335,172,1)
(671,143,1)
(366,668,1)
(415,74,1)
(337,664,1)
(347,316,1)
(19,128,1)
(566,876,1)
(425,569,1)
(366,198,1)
(510,272,1)
(529,57,1)
(862,681,1)
(292,444,1)
(142,588,1)
(165,70,1)
(863,259,1)
(264,47,1)
(379,866,1)
(426,518,1)
(860,675,1)
(587,106,1)
(336,167,1)
(728,678,1)
(366,661,1)
(556,588,1)
(880,728,1)
(817,713,1)
(806,588,1)
(720,144,1)
(668,205,1)
(816,136,1)
(452,880,1)
(848,564,1)
(30,705,1)
(137,705,1)
(270,343,1)
(746,484,1)
(420,588,1)
(294,405,1)
(451,246,1)
(539,120,1)
(23,661,1)
(836,149,1)
(637,809,1)
(245,123,1)
(184,164,1)
(440,110,1)
(127,705,1)
(774,526,1)
(57,175,1)
(815,705,1)
(857,858,1)
(502,725,1)
(634,102,1)
(780,287,1)
(13,495,1)
(344,348,1)
(880,588,1)
(163,480,1)
(70,830,1)
(108,698,1)
(632,791,1)
(100,29,1)
(754,527,1)
(580,664,1)
(618,627,1)
(366,108,1)
(232,140,1)
(1,147,1)
(767,686,1)
(0,431,1)
(644,588,1)
(380,249,1)
(804,556,1)
(155,753,1)
(722,368,1)
(21,276,1)
(827,86,1)
(182,588,1)
(208,786,1)
(67,623,1)
(528,481,1)
(173,451,1)
(630,266,1)
(457,560,1)
(22,588,1)
(366,239,1)
(858,503,1)
(227,109,1)
(697,588,1)
(545,21,1)
(835,433,1)
(517,518,1)
(182,592,1)
(497,61,1)
(107,588,1)
(141,664,1)
(366,440,1)
(366,126,1)
(131,492,1)
(736,19,1)
(386,687,1)
(423,567,1)
(873,779,1)
(363,72,1)
(42,175,1)
(649,705,1)
(126,533,1)
(139,324,1)
(840,588,1)
(196,705,1)
(116,718,1)
(101,620,1)
(870,457,1)
(542,712,1)
(320,705,1)
(730,538,1)
(628,767,1)
(136,830,1)
(351,770,1)
(98,467,1)
(339,548,1)
(426,272,1)
(168,705,1)
(359,705,1)
(224,116,1)
(859,52,1)
(843,240,1)
(517,580,1)
(283,588,1)
(380,366,1)
(680,376,1)
(449,845,1)
(372,334,1)
(204,481,1)
(593,616,1)
(265,588,1)
(178,718,1)
(254,588,1)
(853,588,1)
(352,588,1)
(878,268,1)
(720,184,1)
(112,119,1)
(152,399,1)
(802,511,1)
(73,103,1)
(5,799,1)
(27,302,1)
(664,831,1)
(695,477,1)
(412,568,1)
(188,588,1)
(778,464,1)
(822,868,1)
(246,245,1)
(685,815,1)
(610,598,1)
(314,793,1)
(791,79,1)
(720,378,1)
(486,127,1)
(639,619,1)
(95,653,1)
(876,664,1)
(790,463,1)
(513,804,1)
(217,719,1)
(412,588,1)
(67,2,1)
(697,527,1)
(315,754,1)
(394,559,1)
(445,377,1)
(554,695,1)
(380,303,1)
(79,814,1)
(305,100,1)
(71,671,1)
(358,588,1)
(246,588,1)
(141,869,1)
(751,662,1)
(471,705,1)
(649,233,1)
(60,705,1)
(810,528,1)
(207,7,1)
(557,55,1)
(319,851,1)
(249,221,1)
(167,778,1)
(782,273,1)
(459,750,1)
(250,383,1)
(489,588,1)
(450,224,1)
(607,56,1)
(627,705,1)
(2,685,1)
(748,828,1)
(39,105,1)
(275,381,1)
(80,588,1)
(173,773,1)
(228,820,1)
(517,876,1)
(494,705,1)
(732,588,1)
(650,705,1)
(244,288,1)
(94,415,1)
(400,527,1)
(24,107,1)
(471,865,1)
(510,876,1)
(501,579,1)
(25,703,1)
(150,705,1)
(420,156,1)
(757,204,1)
(690,64,1)
(12,134,1)
(730,588,1)
(498,412,1)
(861,312,1)
(334,240,1)
(113,705,1)
(310,813,1)
(64,310,1)
(398,514,1)
(518,104,1)
(720,866,1)
(348,35,1)
(237,588,1)
(664,272,1)
(306,583,1)
(537,250,1)
(718,185,1)
(469,776,1)
(784,52,1)
(331,454,1)
(426,791,1)
(106,879,1)
(147,766,1)
(343,522,1)
(832,432,1)
(580,449,1)
(240,874,1)
(719,262,1)
(569,568,1)
(660,758,1)
(772,255,1)
(652,274,1)
(288,411,1)
(733,646,1)
(745,588,1)
(783,588,1)
(106,631,1)
(38,214,1)
(220,511,1)
(188,367,1)
(1,705,1)
(404,298,1)
(479,54,1)
(54,555,1)
(506,626,1)
(211,847,1)
(69,80,1)
(8,688,1)
(686,588,1)
(587,260,1)
(744,41,1)
(595,630,1)
(129,612,1)
(834,486,1)
(10,763,1)
(608,399,1)
(467,230,1)
(40,613,1)
(271,745,1)
(412,18,1)
(136,749,1)
(151,50,1)
(268,715,1)
(564,686,1)
(107,470,1)
(236,848,1)
(32,782,1)
(416,588,1)
(378,423,1)
(839,179,1)
(716,710,1)
(247,22,1)
(118,602,1)
(480,196,1)
(876,518,1)
(429,323,1)
(353,422,1)
(137,207,1)
(217,705,1)
(535,716,1)
(801,705,1)
(567,391,1)
(104,424,1)
(367,31,1)
(487,152,1)
(206,129,1)
(647,425,1)
(207,451,1)
(697,568,1)
(426,337,1)
(72,557,1)
(229,305,1)
(193,404,1)
(569,527,1)
(440,588,1)
(549,638,1)
(162,316,1)
(237,561,1)
(360,588,1)
(209,355,1)
(323,333,1)
(55,65,1)
(120,574,1)
(18,389,1)
(154,835,1)
(489,263,1)
(415,43,1)
(200,169,1)
(99,757,1)
(582,217,1)
(586,170,1)
(510,566,1)
(400,588,1)
(579,458,1)
(137,173,1)
(675,386,1)
(205,364,1)
(514,836,1)
(486,581,1)
(355,359,1)
(689,16,1)
(657,588,1)
(667,543,1)
(215,821,1)
(130,21,1)
(700,534,1)
(234,656,1)
(366,90,1)
(844,560,1)
(195,541,1)
(250,588,1)
(442,255,1)
(362,669,1)
(54,280,1)
(600,869,1)
(873,150,1)
(235,455,1)
(726,705,1)
(748,838,1)
(735,835,1)
(523,517,1)
(626,588,1)
(76,275,1)
(577,408,1)
(827,315,1)
(308,130,1)
(158,702,1)
(333,419,1)
(242,338,1)
(337,876,1)
(760,33,1)
(800,42,1)
(266,247,1)
(59,805,1)
(430,692,1)
(421,798,1)
(534,420,1)
(289,705,1)
(354,636,1)
(336,588,1)
(211,374,1)
(736,458,1)
(631,397,1)
(198,13,1)
(683,346,1)
(109,673,1)
(617,395,1)
(122,300,1)
(279,178,1)
(431,223,1)
(835,705,1)
(100,588,1)
(155,705,1)
(525,321,1)
(685,473,1)
(324,282,1)
(827,398,1)
(184,715,1)
(92,294,1)
(867,588,1)
(741,768,1)
(371,846,1)
(563,314,1)
(681,732,1)
(849,519,1)
(293,448,1)
(720,459,1)
(511,745,1)
(794,660,1)
(731,69,1)
(771,588,1)
(11,417,1)
(758,352,1)
(517,566,1)
(91,347,1)
(196,701,1)
(636,198,1)
(841,840,1)
(366,739,1)
(732,684,1)
(608,168,1)
(611,365,1)
(591,26,1)
(874,409,1)
(657,539,1)
(339,694,1)
(867,546,1)
(302,319,1)
(408,289,1)
(681,265,1)
(823,705,1)
(507,679,1)
(366,743,1)
(381,739,1)
(754,568,1)
(189,486,1)
(80,659,1)
(171,469,1)
(720,464,1)
(711,43,1)
(653,558,1)
(226,442,1)
(721,427,1)
(491,668,1)
(495,154,1)
(516,379,1)
(742,855,1)
(66,309,1)
(366,38,1)
(223,738,1)
(400,201,1)
(776,290,1)
(194,705,1)
(763,371,1)
(14,465,1)
(629,601,1)
(276,785,1)
(659,827,1)
(625,588,1)
(583,608,1)
(41,306,1)
(327,116,1)
(428,60,1)
(172,455,1)
(359,654,1)
(712,700,1)
(739,372,1)
(605,792,1)
(108,460,1)
(274,733,1)
(522,588,1)
(50,705,1)
(366,587,1)
(267,873,1)
(624,265,1)
(206,588,1)
(510,337,1)
(743,26,1)
(634,15,1)
(118,697,1)
(93,209,1)
(846,157,1)
(183,23,1)
(700,332,1)
(799,28,1)
(828,531,1)
(754,269,1)
(841,551,1)
(90,762,1)
(653,588,1)
(571,588,1)
(366,768,1)
(327,337,1)
(597,483,1)
(201,632,1)
(580,337,1)
(435,590,1)
(517,337,1)
(532,206,1)
(40,588,1)
(684,624,1)
(50,254,1)
(475,326,1)
(713,279,1)
(673,553,1)
(724,552,1)
(820,171,1)
(142,839,1)
(552,680,1)
(105,452,1)
(520,781,1)
(410,663,1)
(380,1,1)
(568,491,1)
(455,568,1)
(65,93,1)
(312,487,1)
(615,717,1)
(146,677,1)
(842,834,1)
(749,160,1)
(140,594,1)
(618,55,1)
(715,589,1)
(434,811,1)
(838,62,1)
(380,794,1)
(864,37,1)
(494,200,1)
(560,248,1)
(571,475,1)
(804,388,1)
(438,833,1)
(469,290,1)
(43,75,1)
(853,112,1)
(455,588,1)
(483,537,1)
(705,720,1)
(6,622,1)
(353,461,1)
(599,89,1)
(35,588,1)
(422,588,1)
(868,609,1)
(53,370,1)
(366,80,1)
(350,723,1)
(383,151,1)
(262,71,1)
(298,520,1)
(366,653,1)
(815,748,1)
(826,489,1)
(326,3,1)
(625,183,1)
(187,238,1)
(533,301,1)
(871,171,1)
(750,797,1)
(374,847,1)
(834,189,1)
(128,352,1)
(365,588,1)
(538,17,1)
(769,705,1)
(16,777,1)
(222,218,1)
(698,267,1)
(185,429,1)
(218,322,1)
(627,644,1)
(444,202,1)
(493,346,1)
(204,114,1)
(579,278,1)
(574,697,1)
(325,422,1)
(135,497,1)
(770,396,1)
(679,731,1)
(399,348,1)
(37,705,1)
(315,549,1)
(789,705,1)
(745,837,1)
(10,6,1)
(356,394,1)
(114,810,1)
(559,204,1)
(787,508,1)
(579,237,1)
(157,573,1)
(743,591,1)
(466,521,1)
(514,458,1)
(257,588,1)
(402,471,1)
(733,870,1)
(777,97,1)
(387,808,1)
(290,674,1)
(341,300,1)
(563,588,1)
(88,467,1)
(133,335,1)
(287,857,1)
(790,489,1)
(474,115,1)
(400,568,1)
(426,664,1)
(377,715,1)
(530,603,1)
(366,3,1)
(272,51,1)
(351,588,1)
(180,765,1)
(530,599,1)
(255,417,1)
(654,38,1)
(132,220,1)
(173,541,1)
(854,459,1)
(646,588,1)
(82,671,1)
(580,518,1)
(145,588,1)
(723,186,1)
(56,361,1)
(677,122,1)
(366,67,1)
(316,705,1)
(306,588,1)
(457,844,1)
(38,588,1)
(366,872,1)
(75,648,1)
(411,826,1)
(291,817,1)
(543,822,1)
(213,477,1)
(869,629,1)
(603,705,1)
(753,729,1)
(62,416,1)
(856,25,1)
(645,10,1)
(269,159,1)
(830,576,1)
(485,283,1)
(566,518,1)
(755,859,1)
(598,195,1)
(597,113,1)
(819,510,1)
(85,141,1)
(590,649,1)
(399,802,1)
(320,861,1)
(244,588,1)
(273,588,1)
(766,155,1)
(207,541,1)
(717,307,1)
(416,499,1)
(365,0,1)
(106,458,1)
(47,412,1)
(366,554,1)
(497,208,1)
(263,618,1)
(405,358,1)
(191,283,1)
(498,257,1)
(236,588,1)
(225,474,1)
(3,281,1)
(260,106,1)
(503,804,1)
(317,705,1)
(26,755,1)
(387,588,1)
(823,410,1)
(650,575,1)
(422,133,1)
(821,137,1)
(396,876,1)
(317,188,1)
(268,789,1)
(165,705,1)
(589,588,1)
(773,752,1)
(139,190,1)
(301,647,1)
(162,91,1)
(851,667,1)
(676,864,1)
(212,13,1)
(396,559,1)
(202,699,1)
(808,313,1)
(174,705,1)
(554,357,1)
(712,761,1)
(726,532,1)
(626,529,1)
(553,369,1)
(589,360,1)
(870,434,1)
(876,272,1)
(122,341,1)
(464,12,1)
(51,542,1)
(801,350,1)
(807,360,1)
(83,5,1)
(221,377,1)
(316,135,1)
(594,769,1)
(633,146,1)
(788,270,1)
(614,683,1)
(255,458,1)
(248,540,1)
(340,435,1)
(592,296,1)
(863,588,1)
(615,49,1)
(163,196,1)
(61,705,1)
(311,386,1)
(614,780,1)
(149,272,1)
(339,705,1)
(289,92,1)
(663,243,1)
(781,118,1)
(460,698,1)
(143,878,1)
(775,210,1)
(322,651,1)
(638,14,1)
(868,174,1)
(13,154,1)
(665,27,1)
(429,588,1)
(662,594,1)
(60,515,1)
(555,338,1)
(281,98,1)
(855,850,1)
(631,588,1)
(761,492,1)
(876,356,1)
(361,705,1)
(238,328,1)
(477,357,1)
(366,667,1)
(799,165,1)
(677,502,1)
(738,153,1)
(257,264,1)
(71,339,1)
(707,862,1)
(169,853,1)
(127,775,1)
(283,132,1)
(31,524,1)
(448,440,1)
(199,680,1)
(352,547,1)
(678,756,1)
(517,272,1)
(496,493,1)
(793,743,1)
(454,320,1)
(658,571,1)
(164,854,1)
(710,744,1)
(801,588,1)
(555,242,1)
(342,115,1)
(44,292,1)
(86,438,1)
(364,747,1)
(805,676,1)
(762,871,1)
(175,588,1)
(872,588,1)
(865,724,1)
(613,629,1)
(865,552,1)
(692,215,1)
(553,494,1)
(98,88,1)
(729,73,1)
(474,342,1)
(253,239,1)
(45,362,1)
(49,771,1)
(434,588,1)
(452,705,1)
(366,54,1)
(230,194,1)
(83,799,1)
(668,588,1)
(648,588,1)
(686,751,1)
(119,108,1)
(797,611,1)
(300,746,1)
(254,535,1)
(370,702,1)
(511,271,1)
(756,856,1)
(29,523,1)
(879,631,1)
(699,76,1)
(717,588,1)
(723,379,1)
(171,311,1)
(725,229,1)
(713,588,1)
(544,588,1)
(869,40,1)
(702,513,1)
(481,66,1)
(833,800,1)
(303,691,1)
(195,451,1)
(123,849,1)
(622,421,1)
(459,588,1)
(785,102,1)
(398,228,1)
(846,588,1)
(34,588,1)
(508,805,1)
(154,735,1)
(872,232,1)
(186,705,1)
(44,588,1)
(145,860,1)
(786,61,1)
(389,353,1)
(847,711,1)
(481,588,1)
(609,174,1)
(432,90,1)
(590,639,1)
(172,235,1)
(455,527,1)
(412,527,1)
(632,146,1)
(805,705,1)
(309,518,1)
(417,588,1)
(484,502,1)
(103,610,1)
(812,841,1)
(856,705,1)
(464,588,1)
(113,863,1)
(768,588,1)
(74,824,1)
(335,298,1)
(300,588,1)
(473,815,1)
(366,236,1)
(461,588,1)
(349,39,1)
(116,812,1)
(747,506,1)
(517,664,1)
(115,211,1)
(522,577,1)
(748,665,1)
(575,587,1)
(388,556,1)
(174,124,1)
(674,145,1)
(813,442,1)
(465,754,1)
(337,518,1)
(604,650,1)
(752,207,1)
(467,194,1)
(25,588,1)
(424,615,1)
(143,705,1)
(573,236,1)
(747,626,1)
(500,646,1)
(827,647,1)
(366,428,1)
(366,553,1)
(617,588,1)
(546,596,1)
(541,430,1)
(580,272,1)
(216,788,1)
(138,785,1)
(510,580,1)
(492,479,1)
(551,840,1)
(358,586,1)
(175,593,1)
(806,349,1)
(376,740,1)
(409,227,1)
(7,637,1)
(36,445,1)
(485,191,1)
(368,225,1)
(97,407,1)
(827,353,1)
(338,588,1)
(398,580,1)
(555,458,1)
(792,483,1)
(37,180,1)
(223,588,1)
(366,182,1)
(761,501,1)
(850,59,1)
(378,588,1)
(321,554,1)
(603,607,1)
(754,588,1)
(488,614,1)
(515,818,1)
(419,351,1)
(602,657,1)
(612,709,1)
(290,145,1)
(714,361,1)
(297,714,1)
(426,566,1)
(398,566,1)
(240,705,1)
(739,334,1)
(379,507,1)
(518,272,1)
(391,36,1)
(3,98,1)
(655,45,1)
(720,223,1)
(818,689,1)
(552,199,1)
(290,458,1)
(410,588,1)
(814,819,1)
(550,107,1)
(366,83,1)
(198,212,1)
(540,434,1)
(682,530,1)
(90,588,1)
(15,872,1)
(620,469,1)
(114,588,1)
(24,726,1)
(241,211,1)
(691,143,1)
(28,165,1)
(255,11,1)
(134,378,1)
(524,270,1)
(769,34,1)
(788,317,1)
(194,875,1)
(859,784,1)
(357,441,1)
(417,478,1)
(296,228,1)
(701,828,1)
(99,588,1)
(156,131,1)
(519,482,1)
(725,588,1)
(545,308,1)
(861,588,1)
(720,365,1)
(76,588,1)
(61,682,1)
(661,588,1)
(623,2,1)
(470,197,1)
(527,741,1)
(499,253,1)
(669,182,1)
(580,876,1)
(740,488,1)
(761,579,1)
(461,325,1)
(421,238,1)
(427,226,1)
(463,705,1)
(20,293,1)
(798,238,1)
(426,580,1)
(146,100,1)
(311,101,1)
(847,705,1)
(518,664,1)
(22,816,1)
(338,340,1)
(614,545,1)
(490,514,1)
(407,24,1)
(779,150,1)
(110,877,1)
(661,628,1)
(2,96,1)
(441,742,1)
(96,685,1)
(802,485,1)
(56,297,1)
(273,446,1)
(210,125,1)
(768,46,1)
(785,8,1)
(197,766,1)
(840,291,1)
(125,139,1)
(46,4,1)
(168,806,1)
(282,163,1)
(213,525,1)
(689,705,1)
(559,99,1)
(395,807,1)
(4,747,1)
(218,588,1)
(332,534,1)
(286,868,1)
(421,187,1)
(703,331,1)
(780,858,1)
(601,490,1)
(510,664,1)
(81,126,1)
(259,605,1)
(783,595,1)
(124,354,1)
(430,541,1)
(619,649,1)
(648,216,1)
(589,617,1)
(687,706,1)
(52,722,1)
(596,604,1)
(446,597,1)
(824,563,1)
(328,625,1)
(30,867,1)
(683,496,1)
(59,787,1)
(640,420,1)
(265,774,1)
(307,49,1)
(616,398,1)
(643,429,1)
(147,407,1)
(126,588,1)
(638,588,1)
(48,801,1)
(534,640,1)
(680,588,1)
(635,690,1)
(160,387,1)
(463,244,1)
(765,20,1)
(681,142,1)
(179,732,1)
(361,402,1)
(809,195,1)
(644,363,1)
(442,772,1)
(186,606,1)
(33,635,1)
(517,81,1)
(337,272,1)
(278,237,1)
(426,876,1)
(560,588,1)
(302,588,1)
(558,633,1)
(697,466,1)
(153,336,1)
(89,603,1)
(346,138,1)
(566,664,1)
(531,783,1)
(544,94,1)
(512,95,1)
(482,213,1)
(576,544,1)
(309,615,1)
(93,588,1)
(718,419,1)
(170,862,1)
(318,715,1)
(366,139,1)
(667,822,1)
(337,450,1)
(313,83,1)
(456,327,1)
(185,643,1)
(17,234,1)
(49,693,1)
(334,843,1)
(758,736,1)
(243,707,1)
(150,666,1)
(455,193,1)
(478,439,1)
(239,842,1)
(115,241,1)
(547,721,1)
(606,516,1)
(566,272,1)
(426,284,1)
(706,456,1)
(366,44,1)
(239,834,1)
(369,494,1)
(829,700,1)
(877,730,1)
(646,413,1)
(155,588,1)
(407,705,1)
(709,550,1)
(360,760,1)
(233,162,1)
(556,645,1)
(413,582,1)
(510,512,1)
(647,588,1)
(34,652,1)
(581,127,1)
(693,771,1)
(151,744,1)
(284,647,2)
(637,195,2)
(636,266,2)
(189,828,2)
(30,143,2)
(506,175,2)
(514,143,2)
(178,718,2)
(546,143,2)
(712,761,2)
(542,143,2)
(679,143,2)
(156,143,2)
(214,782,2)
(24,766,2)
(855,143,2)
(654,782,2)
(558,146,2)
(184,715,2)
(303,143,2)
(167,377,2)
(697,527,2)
(730,588,2)
(245,143,2)
(805,705,2)
(22,143,2)
(634,102,2)
(689,705,2)
(353,647,2)
(441,143,2)
(824,563,2)
(510,664,2)
(874,143,2)
(517,647,2)
(816,143,2)
(365,588,2)
(839,143,2)
(487,399,2)
(315,549,2)
(554,477,2)
(712,700,2)
(394,559,2)
(196,828,2)
(455,568,2)
(576,544,2)
(466,647,2)
(817,713,2)
(517,580,2)
(449,171,2)
(876,664,2)
(450,116,2)
(311,514,2)
(559,514,2)
(686,588,2)
(291,713,2)
(593,398,2)
(718,419,2)
(237,588,2)
(513,804,2)
(308,785,2)
(66,514,2)
(154,835,2)
(663,862,2)
(249,377,2)
(579,237,2)
(802,348,2)
(745,348,2)
(137,207,2)
(461,422,2)
(685,815,2)
(322,143,2)
(360,442,2)
(163,196,2)
(170,143,2)
(191,511,2)
(247,143,2)
(257,353,2)
(818,407,2)
(326,143,2)
(566,664,2)
(566,272,2)
(824,43,2)
(739,334,2)
(155,705,2)
(673,143,2)
(366,661,2)
(488,143,2)
(374,43,2)
(35,588,2)
(700,143,2)
(667,822,2)
(835,705,2)
(366,739,2)
(153,377,2)
(778,377,2)
(875,143,2)
(137,705,2)
(130,785,2)
(502,725,2)
(118,697,2)
(497,143,2)
(224,116,2)
(807,442,2)
(701,828,2)
(227,143,2)
(124,266,2)
(658,571,2)
(486,127,2)
(162,91,2)
(218,143,2)
(289,405,2)
(337,272,2)
(445,377,2)
(182,228,2)
(847,705,2)
(788,143,2)
(339,705,2)
(398,143,2)
(60,705,2)
(83,830,2)
(483,537,2)
(793,43,2)
(380,794,2)
(643,419,2)
(677,122,2)
(195,143,2)
(617,442,2)
(736,442,2)
(870,457,2)
(169,143,2)
(740,143,2)
(426,400,2)
(549,353,2)
(517,664,2)
(107,766,2)
(432,171,2)
(34,143,2)
(653,588,2)
(661,588,2)
(31,270,2)
(426,791,2)
(518,664,2)
(695,477,2)
(112,143,2)
(735,266,2)
(150,705,2)
(302,266,2)
(208,143,2)
(366,474,2)
(872,588,2)
(272,143,2)
(25,399,2)
(700,534,2)
(869,629,2)
(555,338,2)
(697,588,2)
(703,399,2)
(463,489,2)
(302,588,2)
(220,511,2)
(560,588,2)
(259,483,2)
(419,514,2)
(446,143,2)
(863,483,2)
(646,588,2)
(532,206,2)
(517,337,2)
(116,514,2)
(657,588,2)
(106,631,2)
(577,143,2)
(83,799,2)
(493,785,2)
(400,527,2)
(335,647,2)
(760,442,2)
(644,55,2)
(560,646,2)
(870,646,2)
(366,768,2)
(376,143,2)
(366,553,2)
(541,430,2)
(67,2,2)
(481,588,2)
(698,873,2)
(106,458,2)
(453,143,2)
(828,266,2)
(222,218,2)
(566,876,2)
(319,266,2)
(486,828,2)
(28,830,2)
(48,143,2)
(127,705,2)
(801,143,2)
(426,580,2)
(225,43,2)
(399,802,2)
(386,514,2)
(842,828,2)
(503,804,2)
(195,195,2)
(742,143,2)
(73,103,2)
(298,520,2)
(23,686,2)
(42,175,2)
(366,743,2)
(221,377,2)
(358,588,2)
(530,603,2)
(409,227,2)
(603,143,2)
(371,846,2)
(327,514,2)
(571,143,2)
(204,514,2)
(150,143,2)
(223,588,2)
(206,107,2)
(527,747,2)
(691,143,2)
(278,143,2)
(859,43,2)
(233,143,2)
(248,646,2)
(514,458,2)
(339,671,2)
(349,399,2)
(850,143,2)
(671,143,2)
(802,485,2)
(29,647,2)
(667,266,2)
(649,143,2)
(151,143,2)
(604,143,2)
(835,266,2)
(306,143,2)
(516,379,2)
(745,588,2)
(400,647,2)
(868,174,2)
(655,228,2)
(1,766,2)
(469,514,2)
(92,405,2)
(455,527,2)
(540,646,2)
(266,247,2)
(6,686,2)
(324,828,2)
(799,830,2)
(677,502,2)
(366,126,2)
(564,686,2)
(656,143,2)
(545,21,2)
(357,143,2)
(498,353,2)
(240,143,2)
(263,143,2)
(366,872,2)
(719,143,2)
(822,266,2)
(722,43,2)
(378,377,2)
(86,175,2)
(257,588,2)
(400,568,2)
(56,297,2)
(650,143,2)
(79,146,2)
(409,143,2)
(499,828,2)
(325,422,2)
(665,266,2)
(638,588,2)
(557,55,2)
(358,143,2)
(145,588,2)
(91,143,2)
(146,677,2)
(255,458,2)
(831,869,2)
(590,649,2)
(870,434,2)
(123,143,2)
(421,686,2)
(547,442,2)
(683,785,2)
(26,43,2)
(526,143,2)
(549,638,2)
(157,686,2)
(328,686,2)
(828,531,2)
(90,588,2)
(210,828,2)
(720,223,2)
(457,560,2)
(25,588,2)
(666,143,2)
(440,143,2)
(275,143,2)
(781,647,2)
(463,705,2)
(725,100,2)
(730,143,2)
(185,419,2)
(559,99,2)
(841,840,2)
(827,143,2)
(552,458,2)
(412,588,2)
(687,514,2)
(753,143,2)
(281,143,2)
(14,353,2)
(821,195,2)
(13,154,2)
(690,442,2)
(35,143,2)
(575,143,2)
(791,146,2)
(838,828,2)
(425,175,2)
(260,143,2)
(21,785,2)
(321,477,2)
(800,175,2)
(518,615,2)
(823,705,2)
(475,143,2)
(697,568,2)
(771,514,2)
(101,514,2)
(709,107,2)
(867,143,2)
(311,386,2)
(801,588,2)
(97,407,2)
(563,588,2)
(268,377,2)
(616,398,2)
(108,143,2)
(37,180,2)
(664,869,2)
(697,647,2)
(270,143,2)
(90,171,2)
(386,687,2)
(609,266,2)
(217,705,2)
(426,566,2)
(510,566,2)
(645,594,2)
(75,648,2)
(131,143,2)
(594,143,2)
(587,143,2)
(419,351,2)
(512,146,2)
(761,143,2)
(65,143,2)
(631,588,2)
(366,54,2)
(607,143,2)
(340,143,2)
(366,139,2)
(288,489,2)
(653,146,2)
(426,337,2)
(783,588,2)
(747,175,2)
(731,143,2)
(217,719,2)
(602,647,2)
(832,171,2)
(865,552,2)
(381,143,2)
(710,744,2)
(196,705,2)
(651,143,2)
(743,26,2)
(853,143,2)
(749,160,2)
(761,492,2)
(720,378,2)
(473,143,2)
(62,828,2)
(554,357,2)
(853,588,2)
(88,143,2)
(471,143,2)
(254,744,2)
(165,705,2)
(771,588,2)
(416,828,2)
(141,514,2)
(146,647,2)
(837,348,2)
(160,387,2)
(207,195,2)
(182,588,2)
(500,646,2)
(707,862,2)
(582,143,2)
(864,143,2)
(662,594,2)
(194,143,2)
(76,588,2)
(337,876,2)
(457,646,2)
(494,705,2)
(776,514,2)
(37,705,2)
(846,686,2)
(244,588,2)
(838,62,2)
(138,785,2)
(768,747,2)
(128,442,2)
(792,483,2)
(53,804,2)
(474,115,2)
(477,143,2)
(397,143,2)
(100,588,2)
(109,143,2)
(342,43,2)
(194,705,2)
(105,399,2)
(32,782,2)
(489,588,2)
(729,143,2)
(576,143,2)
(530,599,2)
(762,171,2)
(246,143,2)
(527,741,2)
(723,143,2)
(752,195,2)
(352,588,2)
(777,407,2)
(706,514,2)
(713,718,2)
(531,266,2)
(147,766,2)
(100,647,2)
(720,377,2)
(1,407,2)
(758,736,2)
(541,195,2)
(624,143,2)
(223,377,2)
(463,244,2)
(142,588,2)
(301,647,2)
(412,527,2)
(569,175,2)
(683,346,2)
(200,143,2)
(613,629,2)
(714,143,2)
(171,311,2)
(629,588,2)
(422,647,2)
(765,143,2)
(756,399,2)
(491,747,2)
(269,353,2)
(519,143,2)
(85,514,2)
(332,143,2)
(171,514,2)
(71,143,2)
(351,514,2)
(877,143,2)
(434,646,2)
(133,647,2)
(606,379,2)
(353,422,2)
(718,185,2)
(395,442,2)
(417,588,2)
(198,266,2)
(862,143,2)
(686,594,2)
(573,686,2)
(589,442,2)
(603,705,2)
(732,143,2)
(34,588,2)
(699,143,2)
(678,399,2)
(366,440,2)
(861,399,2)
(163,828,2)
(715,589,2)
(59,805,2)
(841,713,2)
(337,664,2)
(316,705,2)
(474,43,2)
(309,514,2)
(717,49,2)
(202,143,2)
(630,266,2)
(769,143,2)
(618,143,2)
(282,828,2)
(20,143,2)
(227,588,2)
(7,195,2)
(424,615,2)
(120,647,2)
(211,847,2)
(639,143,2)
(812,713,2)
(429,419,2)
(847,43,2)
(283,588,2)
(440,588,2)
(532,107,2)
(51,143,2)
(720,336,2)
(13,266,2)
(2,685,2)
(158,702,2)
(323,419,2)
(758,442,2)
(830,143,2)
(784,43,2)
(140,594,2)
(366,198,2)
(209,143,2)
(505,143,2)
(356,559,2)
(627,705,2)
(628,686,2)
(459,377,2)
(861,588,2)
(699,76,2)
(316,143,2)
(115,43,2)
(743,43,2)
(525,477,2)
(868,266,2)
(265,143,2)
(122,300,2)
(574,647,2)
(360,588,2)
(197,766,2)
(268,715,2)
(681,143,2)
(289,705,2)
(769,34,2)
(716,744,2)
(270,343,2)
(315,754,2)
(494,143,2)
(809,195,2)
(207,541,2)
(116,718,2)
(366,182,2)
(67,143,2)
(566,337,2)
(876,559,2)
(665,27,2)
(247,22,2)
(736,458,2)
(52,705,2)
(402,143,2)
(49,771,2)
(534,143,2)
(378,588,2)
(38,588,2)
(366,90,2)
(405,143,2)
(54,143,2)
(589,360,2)
(396,514,2)
(664,272,2)
(118,602,2)
(631,143,2)
(720,866,2)
(854,377,2)
(305,100,2)
(283,511,2)
(442,255,2)
(611,377,2)
(804,594,2)
(127,828,2)
(426,272,2)
(362,228,2)
(869,514,2)
(113,483,2)
(271,348,2)
(511,745,2)
(580,171,2)
(12,377,2)
(627,644,2)
(524,270,2)
(343,522,2)
(749,830,2)
(522,143,2)
(615,717,2)
(738,377,2)
(361,705,2)
(413,143,2)
(869,40,2)
(829,143,2)
(626,175,2)
(55,143,2)
(366,668,2)
(44,588,2)
(452,705,2)
(580,518,2)
(334,240,2)
(451,143,2)
(872,594,2)
(830,576,2)
(293,143,2)
(455,298,2)
(705,720,2)
(159,353,2)
(218,588,2)
(154,266,2)
(276,785,2)
(254,588,2)
(856,25,2)
(533,647,2)
(122,502,2)
(548,671,2)
(314,43,2)
(43,143,2)
(587,106,2)
(55,65,2)
(871,171,2)
(676,143,2)
(336,588,2)
(137,173,2)
(341,502,2)
(39,399,2)
(407,766,2)
(17,143,2)
(845,171,2)
(250,143,2)
(579,143,2)
(267,143,2)
(819,510,2)
(605,483,2)
(162,143,2)
(444,143,2)
(86,438,2)
(387,588,2)
(454,399,2)
(353,461,2)
(689,407,2)
(366,67,2)
(165,830,2)
(363,55,2)
(658,143,2)
(495,266,2)
(40,588,2)
(798,238,2)
(246,588,2)
(292,143,2)
(492,143,2)
(566,518,2)
(648,588,2)
(183,686,2)
(452,880,2)
(50,705,2)
(754,353,2)
(813,442,2)
(331,399,2)
(95,146,2)
(324,163,2)
(510,518,2)
(172,298,2)
(510,272,2)
(383,143,2)
(521,647,2)
(262,143,2)
(113,863,2)
(420,588,2)
(188,270,2)
(865,143,2)
(338,143,2)
(555,458,2)
(479,143,2)
(833,175,2)
(56,361,2)
(348,35,2)
(556,588,2)
(139,324,2)
(873,143,2)
(596,143,2)
(145,514,2)
(290,458,2)
(110,143,2)
(126,588,2)
(399,348,2)
(82,671,2)
(366,236,2)
(237,143,2)
(426,664,2)
(780,804,2)
(859,52,2)
(615,514,2)
(240,705,2)
(206,588,2)
(802,511,2)
(201,647,2)
(692,195,2)
(880,399,2)
(366,667,2)
(728,399,2)
(649,705,2)
(366,407,2)
(620,514,2)
(583,143,2)
(451,246,2)
(823,410,2)
(297,143,2)
(851,266,2)
(812,841,2)
(461,588,2)
(660,442,2)
(143,377,2)
(294,405,2)
(467,194,2)
(119,143,2)
(222,143,2)
(531,783,2)
(155,143,2)
(290,145,2)
(537,250,2)
(350,143,2)
(733,143,2)
(766,143,2)
(659,143,2)
(483,143,2)
(470,766,2)
(430,541,2)
(46,747,2)
(274,143,2)
(638,353,2)
(652,143,2)
(236,686,2)
(61,705,2)
(834,828,2)
(720,144,2)
(489,143,2)
(0,377,2)
(337,518,2)
(647,588,2)
(273,143,2)
(685,143,2)
(680,588,2)
(724,143,2)
(836,143,2)
(380,1,2)
(467,143,2)
(849,143,2)
(567,377,2)
(26,859,2)
(238,625,2)
(366,3,2)
(171,469,2)
(76,143,2)
(216,143,2)
(808,830,2)
(184,377,2)
(787,143,2)
(134,377,2)
(427,442,2)
(244,489,2)
(234,143,2)
(175,588,2)
(517,272,2)
(555,143,2)
(581,828,2)
(370,804,2)
(113,705,2)
(720,464,2)
(806,588,2)
(204,481,2)
(720,459,2)
(459,588,2)
(612,107,2)
(510,876,2)
(30,867,2)
(336,377,2)
(539,647,2)
(416,588,2)
(399,143,2)
(366,44,2)
(173,451,2)
(484,502,2)
(50,254,2)
(610,143,2)
(355,143,2)
(306,588,2)
(622,421,2)
(597,143,2)
(799,165,2)
(510,580,2)
(647,175,2)
(164,377,2)
(746,502,2)
(617,588,2)
(543,266,2)
(380,303,2)
(354,266,2)
(511,348,2)
(368,43,2)
(8,594,2)
(410,862,2)
(366,554,2)
(312,399,2)
(70,830,2)
(431,377,2)
(844,646,2)
(455,588,2)
(677,100,2)
(98,467,2)
(580,876,2)
(625,686,2)
(502,100,2)
(320,861,2)
(74,43,2)
(517,566,2)
(725,588,2)
(104,615,2)
(408,143,2)
(61,143,2)
(320,705,2)
(599,143,2)
(400,588,2)
(590,143,2)
(438,705,2)
(179,143,2)
(212,266,2)
(811,646,2)
(310,442,2)
(529,175,2)
(81,647,2)
(726,532,2)
(783,266,2)
(391,377,2)
(174,705,2)
(346,785,2)
(380,366,2)
(366,108,2)
(530,143,2)
(822,868,2)
(862,681,2)
(481,514,2)
(41,306,2)
(3,143,2)
(168,399,2)
(99,204,2)
(136,143,2)
(132,511,2)
(187,238,2)
(137,195,2)
(739,143,2)
(420,143,2)
(675,514,2)
(27,302,2)
(815,705,2)
(52,43,2)
(522,588,2)
(69,143,2)
(518,272,2)
(64,310,2)
(750,377,2)
(757,204,2)
(215,195,2)
(379,866,2)
(185,429,2)
(823,862,2)
(629,514,2)
(580,272,2)
(143,705,2)
(287,804,2)
(843,143,2)
(344,348,2)
(801,705,2)
(80,588,2)
(595,266,2)
(366,83,2)
(580,664,2)
(160,830,2)
(806,399,2)
(755,43,2)
(118,647,2)
(64,442,2)
(422,588,2)
(460,143,2)
(334,143,2)
(702,804,2)
(371,686,2)
(59,787,2)
(37,143,2)
(199,143,2)
(684,143,2)
(747,626,2)
(635,442,2)
(485,511,2)
(230,143,2)
(600,869,2)
(682,143,2)
(357,441,2)
(175,398,2)
(404,298,2)
(758,352,2)
(880,588,2)
(89,143,2)
(3,98,2)
(876,272,2)
(204,114,2)
(726,107,2)
(566,228,2)
(264,353,2)
(773,195,2)
(1,705,2)
(561,143,2)
(482,143,2)
(435,143,2)
(239,834,2)
(840,713,2)
(198,13,2)
(510,337,2)
(761,579,2)
(646,143,2)
(57,175,2)
(36,377,2)
(273,588,2)
(366,239,2)
(16,407,2)
(713,588,2)
(538,143,2)
(544,143,2)
(428,407,2)
(523,647,2)
(361,143,2)
(680,143,2)
(239,828,2)
(40,629,2)
(661,686,2)
(49,514,2)
(126,647,2)
(213,143,2)
(333,419,2)
(22,588,2)
(242,143,2)
(380,249,2)
(856,399,2)
(698,143,2)
(236,588,2)
(300,502,2)
(317,270,2)
(313,830,2)
(498,257,2)
(563,43,2)
(235,298,2)
(125,828,2)
(426,518,2)
(19,442,2)
(448,143,2)
(80,143,2)
(571,588,2)
(857,804,2)
(751,594,2)
(535,744,2)
(544,588,2)
(786,143,2)
(622,686,2)
(430,195,2)
(790,143,2)
(741,747,2)
(804,556,2)
(193,298,2)
(693,514,2)
(73,143,2)
(559,204,2)
(411,489,2)
(94,143,2)
(520,647,2)
(551,713,2)
(498,412,2)
(41,143,2)
(202,699,2)
(99,588,2)
(668,588,2)
(146,100,2)
(805,143,2)
(586,143,2)
(135,143,2)
(785,594,2)
(296,228,2)
(452,399,2)
(253,828,2)
(232,594,2)
(770,514,2)
(174,266,2)
(876,518,2)
(840,588,2)
(307,49,2)
(552,680,2)
(568,747,2)
(592,228,2)
(115,211,2)
(754,588,2)
(623,143,2)
(754,527,2)
(681,732,2)
(780,858,2)
(142,143,2)
(54,555,2)
(366,80,2)
(438,175,2)
(471,705,2)
(168,705,2)
(348,143,2)
(615,49,2)
(155,588,2)
(768,588,2)
(2,143,2)
(116,812,2)
(534,420,2)
(608,143,2)
(782,273,2)
(556,594,2)
(44,143,2)
(38,782,2)
(405,358,2)
(879,143,2)
(469,290,2)
(785,102,2)
(718,514,2)
(668,747,2)
(300,588,2)
(15,594,2)
(640,143,2)
(369,143,2)
(589,617,2)
(534,458,2)
(229,100,2)
(789,377,2)
(315,353,2)
(434,588,2)
(715,442,2)
(648,143,2)
(797,377,2)
(626,588,2)
(634,594,2)
(779,143,2)
(106,143,2)
(415,143,2)
(190,828,2)
(114,588,2)
(379,143,2)
(517,876,2)
(433,266,2)
(508,143,2)
(207,451,2)
(228,171,2)
(351,588,2)
(93,143,2)
(601,514,2)
(279,718,2)
(711,43,2)
(681,142,2)
(732,588,2)
(338,588,2)
(589,588,2)
(632,647,2)
(265,588,2)
(410,588,2)
(712,143,2)
(464,377,2)
(688,594,2)
(129,107,2)
(591,43,2)
(412,568,2)
(748,143,2)
(818,689,2)
(515,407,2)
(33,442,2)
(720,365,2)
(580,337,2)
(43,75,2)
(627,55,2)
(812,718,2)
(650,705,2)
(705,377,2)
(846,588,2)
(517,518,2)
(27,266,2)
(490,514,2)
(173,195,2)
(364,747,2)
(553,494,2)
(337,116,2)
(366,653,2)
(158,804,2)
(186,705,2)
(820,171,2)
(507,143,2)
(873,150,2)
(814,146,2)
(238,686,2)
(775,828,2)
(826,489,2)
(365,377,2)
(243,862,2)
(426,647,2)
(720,184,2)
(552,143,2)
(343,143,2)
(553,143,2)
(644,588,2)
(147,407,2)
(834,486,2)
(681,265,2)
(320,399,2)
(619,143,2)
(674,514,2)
(75,143,2)
(359,782,2)
(266,143,2)
(430,451,2)
(372,143,2)
(848,686,2)
(30,705,2)
(721,442,2)
(856,705,2)
(744,143,2)
(317,188,2)
(169,853,2)
(103,143,2)
(172,455,2)
(501,143,2)
(426,876,2)
(456,514,2)
(149,143,2)
(421,238,2)
(633,146,2)
(96,143,2)
(377,442,2)
(65,93,2)
(767,686,2)
(152,399,2)
(168,806,2)
(226,442,2)
(528,481,2)
(537,143,2)
(819,146,2)
(545,785,2)
(18,353,2)
(858,804,2)
(108,698,2)
(317,705,2)
(669,228,2)
(290,514,2)
(286,266,2)
(93,588,2)
(347,143,2)
(280,143,2)
(72,55,2)
(352,442,2)
(464,588,2)
(763,686,2)
(162,316,2)
(429,588,2)
(5,830,2)
(186,379,2)
(359,705,2)
(510,146,2)
(62,416,2)
(860,514,2)
(387,830,2)
(412,353,2)
(180,143,2)
(867,588,2)
(579,458,2)
(217,143,2)
(241,43,2)
(496,785,2)
(407,705,2)
(497,61,2)
(657,647,2)
(228,588,2)
(726,705,2)
(465,353,2)
(10,594,2)
(59,143,2)
(366,587,2)
(614,143,2)
(782,143,2)
(47,353,2)
(56,143,2)
(744,41,2)
(810,481,2)
(255,417,2)
(471,865,2)
(107,588,2)
(815,143,2)
(774,143,2)
(863,588,2)
(74,824,2)
(339,694,2)
(211,43,2)
(188,588,2)
(114,481,2)
(173,541,2)
(480,828,2)
(598,143,2)
(423,377,2)
(388,594,2)
(389,353,2)
(318,442,2)
(377,715,2)
(878,377,2)
(45,228,2)
(250,588,2)
(50,744,2)
(60,407,2)
(754,568,2)
(550,107,2)
(205,747,2)
(769,705,2)
(139,828,2)
(298,647,2)
(625,588,2)
(485,283,2)
(367,270,2)
(4,747,2)
(717,588,2)
(602,657,2)
(366,38,2)
(590,639,2)
(497,208,2)
(98,143,2)
(794,442,2)
-----------------------------------
(0,context)
(1,return tmp;)
(2,ast_channel_caller(tmp)
(3,ast_channel_caller(tmp)
(4,i)
(5,str)
(6,break;)
(7,name)
(8,DAHDI_LAW_ALAW)
(9,if (!i->owner)
(10,i)
(11,idx)
(12,cid_name)
(13,ast_channel_caller(tmp)
(14,busy_cadence)
(15,law)
(16,tmp)
(17,i)
(18,dsp)
(19,idx)
(20,tmp)
(21,&deflaw)
(22,i->cid_ani)
(23,i)
(24,tmp)
(25,i->pickupgroup)
(26,ast_channel_redirecting(tmp)
(27,ast_strdup(i->cid_ani)
(28,number)
(29,outgoing)
(30,ast_channel_context_set(tmp, i->context)
(31,i)
(32,i)
(33,i)
(34,i->cc_params)
(35,i->sig)
(36,0)
(37,ast_jb_configure(tmp, &global_jbconf)
(38,i->owner)
(39,i)
(40,CANBUSYDETECT(i)
(41,ast_strlen_zero(i->parkinglot)
(42,1)
(43,!ast_strlen_zero(i->rdnis)
(44,i->fake_event)
(45,features)
(46,dsp)
(47,i)
(48,i)
(49,i->callprogress & CALLPROGRESS_PROGRESS)
(50,ast_channel_parkinglot_set(tmp, i->parkinglot)
(51,0)
(52,ast_channel_redirecting(tmp)
(53,0)
(54,i->subs[idx].linear)
(55,!ast_strlen_zero(i->accountcode)
(56,ast_format_cap_add(ast_channel_nativeformats(tmp)
(57,i)
(58,)
(59,ast_copy_string(device_name, ast_channel_name(tmp)
(60,ast_hangup(tmp)
(61,ast_channel_readformat(tmp)
(62,ast_strdup(i->cid_num)
(63,if (features)
(64,ast_format_clear(&deflaw)
(65,ast_strlen_zero(i->accountcode)
(66,waitfordialtone)
(67,ast_channel_caller(tmp)
(68,)
(69,0)
(70,tmp)
(71,tmp)
(72,i)
(73,ast_module_ref(ast_module_info->self)
(74,ast_channel_redirecting(tmp)
(75,ast_strlen_zero(i->rdnis)
(76,i->cid_tag)
(77,)
(78,default:)
(79,0)
(80,i->dialtone_scanning_time_elapsed)
(81,features)
(82,tmp)
(83,ast_channel_dialed(tmp)
(84,)
(85,callprogress)
(86,ast_debug(1, "Already have a dsp on %s?\\n", ast_channel_name(tmp)
(87,)
(88,number)
(89,deflaw)
(90,i->hardwaredtmf)
(91,&deflaw)
(92,AST_ADSI_UNAVAILABLE)
(93,i->accountcode)
(94,dnid)
(95,features)
(96,name)
(97,LOG_WARNING)
(98,ast_channel_caller(tmp)
(99,CANPROGRESSDETECT(i)
(100,i->outgoing)
(101,x)
(102,int law)
(103,ast_module_info->self)
(104,DSP_FEATURE_CALL_PROGRESS)
(105,tmp)
(106,i->subs[idx])
(107,i->mfcr2call)
(108,ast_channel_caller(tmp)
(109,cid_ani2)
(110,muting)
(111,)
(112,cid_ton)
(113,ast_channel_language_set(tmp, i->language)
(114,i->dialtone_detect)
(115,ast_channel_redirecting(tmp)
(116,(!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)
(117,if (state == AST_STATE_RING)
(118,ast_dsp_set_digitmode(i->dsp, DSP_DIGITMODE_DTMF | i->dtmfrelax)
(119,i)
(120,i)
(121,if (ast_pbx_start(tmp)
(122,i->sig == SIG_SS7)
(123,i)
(124,tmp)
(125,1)
(126,i->dsp_features)
(127,ast_channel_caller(tmp)
(128,subnames)
(129,mfcr2_recvd_category)
(130,AST_FORMAT_ULAW)
(131,i)
(132,sig)
(133,busydetect)
(134,i)
(135,tmp)
(136,i)
(137,pbx_builtin_setvar_helper(tmp, v->name, v->value)
(138,deflaw)
(139,ast_channel_caller(tmp)
(140,i)
(141,i)
(142,i->oprmode)
(143,!tmp)
(144,const char *linkedid)
(145,i->subs)
(146,i->outgoing && (dahdi_sig_pri_lib_handles(i->sig)
(147,tmp)
(148,if (!ast_strlen_zero(i->dnid)
(149,idx)
(150,ast_channel_caller(tmp)
(151,i)
(152,tmp)
(153,i)
(154,ast_channel_caller(tmp)
(155,dahdi_ami_channel_event(i, tmp)
(156,subs)
(157,law_default)
(158,ast_format_set(&deflaw, AST_FORMAT_ULAW, 0)
(159,i)
(160,ast_strdup(i->dnid)
(161,if ((i->callprogress & CALLPROGRESS_PROGRESS)
(162,ast_format_copy(ast_channel_rawwriteformat(tmp)
(163,ast_channel_caller(tmp)
(164,chan_name)
(165,ast_channel_dialed(tmp)
(166,if (!tmp)
(167,accountcode)
(168,ast_channel_named_pickupgroups_set(tmp, i->named_pickupgroups)
(169,ast_channel_caller(tmp)
(170,i)
(171,ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)
(172,ast_dsp_set_call_progress_zone(i->dsp, progzone)
(173,v->value)
(174,ast_channel_caller(tmp)
(175,i->dsp)
(176,)
(177,if ((!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)
(178,i)
(179,i)
(180,&global_jbconf)
(181,if (!ast_strlen_zero(i->language)
(182,i->hardwaredtmf)
(183,law_default)
(184,ast_str_buffer(chan_name)
(185,i->callprogress & CALLPROGRESS_FAX_INCOMING)
(186,ast_channel_rings_set(tmp, 1)
(187,DAHDI_LAW_MULAW)
(188,i->exten)
(189,number)
(190,valid)
(191,SIG_FXOLS)
(192,)
(193,dsp)
(194,ast_channel_caller(tmp)
(195,v)
(196,ast_channel_caller(tmp)
(197,i)
(198,ast_channel_caller(tmp)
(199,idx)
(200,tmp)
(201,dsp)
(202,ast_channel_caller(tmp)
(203,if (law == DAHDI_LAW_ALAW)
(204,i->waitfordialtone || i->dialtone_detect)
(205,dsp)
(206,i->mfcr2_recvd_category)
(207,v->name)
(208,&deflaw)
(209,accountcode)
(210,ast_channel_caller(tmp)
(211,ast_channel_redirecting(tmp)
(212,valid)
(213,AST_DEVICE_UNKNOWN)
(214,owner)
(215,v)
(216,rdnis)
(217,ast_channel_tech_set(tmp, &dahdi_tech)
(218,i->callingpres)
(219,if (!ast_strlen_zero(progzone)
(220,i)
(221,NULL)
(222,ast_channel_caller(tmp)
(223,i->exten)
(224,features)
(225,1)
(226,LOG_WARNING)
(227,i->cid_ani2)
(228,NEED_MFDETECT(i)
(229,sig)
(230,id)
(231,)
(232,law)
(233,tmp)
(234,i->fake_event = 0)
(235,progzone)
(236,i->law)
(237,i->subs)
(238,i->law_default == DAHDI_LAW_ALAW)
(239,ast_channel_caller(tmp)
(240,ast_channel_caller(tmp)
(241,number)
(242,idx)
(243,i)
(244,i->amaflags)
(245,vars)
(246,i->vars)
(247,ast_strlen_zero(i->cid_ani)
(248,pri)
(249,return NULL;)
(250,i->language)
(251,if (i->dsp)
(252,if (dashptr)
(253,i)
(254,i->parkinglot)
(255,i->subs[idx])
(256,if (i->channel != CHAN_PSEUDO)
(257,i->busycount)
(258,)
(259,language)
(260,owner)
(261,device_name)
(262,dahdi_tech)
(263,amaflags)
(264,busycount)
(265,i->sig)
(266,!ast_strlen_zero(i->cid_ani)
(267,number)
(268,ast_free(chan_name)
(269,dsp)
(270,!ast_strlen_zero(i->exten)
(271,SIG_FXOGS)
(272,features = 0)
(273,i->owner)
(274,i)
(275,cid_tag)
(276,deflaw)
(277,if (i->pri)
(278,idx)
(279,outgoing)
(280,linear)
(281,presentation)
(282,number)
(283,i->sig)
(284,features)
(285,if (ioctl(i->subs[idx].dfd, DAHDI_TONEDETECT, &x)
(286,number)
(287,0)
(288,amaflags)
(289,ast_channel_adsicpe_set(tmp, AST_ADSI_UNAVAILABLE)
(290,i->subs[idx])
(291,callprogress)
(292,fake_event)
(293,i->muting = 0)
(294,tmp)
(295,if (!ast_strlen_zero(i->parkinglot)
(296,i)
(297,&deflaw)
(298,!ast_strlen_zero(progzone)
(299,deflaw)
(300,i->sig)
(301,i)
(302,i->cid_ani)
(303,return NULL;)
(304,)
(305,i)
(306,i->parkinglot)
(307,i)
(308,0)
(309,i)
(310,&deflaw)
(311,&x)
(312,callgroup)
(313,i)
(314,rdnis)
(315,ast_dsp_set_busy_pattern(i->dsp, &i->busy_cadence)
(316,ast_channel_rawwriteformat(tmp)
(317,ast_channel_exten_set(tmp, i->exten)
(318,chan_name)
(319,cid_ani)
(320,ast_channel_callgroup_set(tmp, i->callgroup)
(321,\'\\0\')
(322,callingpres)
(323,callprogress)
(324,ast_channel_caller(tmp)
(325,i)
(326,i)
(327,x)
(328,DAHDI_LAW_ALAW)
(329,if (i->subs[idx].owner)
(330,for (v = i->vars ; v ; v = v->next)
(331,i)
(332,dfd)
(333,i)
(334,ast_channel_caller(tmp)
(335,i)
(336,i->accountcode)
(337,features |= DSP_FEATURE_FAX_DETECT)
(338,i->subs)
(339,ast_channel_callid_set(tmp, callid)
(340,subs)
(341,SIG_SS7)
(342,valid)
(343,ast_strlen_zero(i->exten)
(344,i)
(345,v)
(346,&deflaw)
(347,deflaw)
(348,i->sig == SIG_FXOKS)
(349,named_pickupgroups)
(350,i)
(351,i->outgoing)
(352,i->channel)
(353,i->busydetect && CANBUSYDETECT(i)
(354,ast_channel_caller(tmp)
(355,i)
(356,DSP_FEATURE_WAITDIALTONE)
(357,dashptr = strrchr(device_name, \'-\')
(358,i->adsi)
(359,i->owner = tmp)
(360,i->outgoing)
(361,ast_channel_nativeformats(tmp)
(362,i->hardwaredtmf = 1)
(363,accountcode)
(364,i)
(365,i->context)
(366,return NULL;)
(367,exten)
(368,ast_channel_redirecting(tmp)
(369,ani2)
(370,AST_FORMAT_ULAW)
(371,i->law = i->law_default)
(372,tag)
(373,features)
(374,from)
(375,)
(376,subs)
(377,!chan_name)
(378,i->cid_num)
(379,state == AST_STATE_RING)
(380,RET)
(381,i)
(382,)
(383,language)
(384,)
(385,if (!chan_name)
(386,x = DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE)
(387,i->dnid)
(388,DAHDI_LAW_ALAW)
(389,i)
(390,)
(391,state)
(392,)
(393,)
(394,features)
(395,dnid)
(396,i)
(397,subs)
(398,features)
(399,(i->sig == SIG_FXOKS)
(400,i->dsp)
(401,)
(402,tmp)
(403,if (!ast_strlen_zero(i->exten)
(404,i)
(405,!i->adsi)
(406,)
(407,ast_pbx_start(tmp)
(408,i)
(409,ast_channel_caller(tmp)
(410,i->call_forward)
(411,i)
(412,i->dsp)
(413,pri)
(414,if (i->law_default == DAHDI_LAW_ALAW)
(415,i)
(416,i->cid_num)
(417,i->subs)
(418,)
(419,!i->outgoing)
(420,i->subs)
(421,(i->law_default == DAHDI_LAW_ALAW)
(422,i->busydetect)
(423,cid_num)
(424,features)
(425,dsp)
(426,ast_dsp_set_features(i->dsp, features)
(427,"Channel %d already has a %s call\\n")
(428,NULL)
(429,i->callprogress)
(430,v->next)
(431,i)
(432,0)
(433,tmp)
(434,i->cc_params)
(435,i)
(436,if (!ast_strlen_zero(i->rdnis)
(437,)
(438,ast_channel_name(tmp)
(439,i)
(440,i->muting)
(441,strrchr(device_name, \'-\')
(442,i->subs[idx].owner)
(443,switch (i->sig)
(444,i)
(445,tmp)
(446,owner)
(447,dashptr)
(448,0)
(449,DSP_FEATURE_DIGIT_DETECT)
(450,DSP_FEATURE_FAX_DETECT)
(451,v = i->vars)
(452,ast_channel_named_callgroups_set(tmp, i->named_callgroups)
(453,sig)
(454,tmp)
(455,i->dsp)
(456,DAHDI_TONEDETECT_ON)
(457,i->pri->cc_params)
(458,int idx)
(459,i->amaflags)
(460,plan)
(461,CANBUSYDETECT(i)
(462,if ((i->sig == SIG_FXOKS)
(463,ast_channel_amaflags_set(tmp, i->amaflags)
(464,i->cid_name)
(465,i)
(466,dsp)
(467,ast_channel_caller(tmp)
(468,if (!ast_strlen_zero(i->cid_ani)
(469,i->subs[idx].dfd)
(470,mfcr2call)
(471,ast_channel_set_fd(tmp, 0, i->subs[idx].dfd)
(472,if (callid)
(473,id)
(474,ast_channel_redirecting(tmp)
(475,callingpres)
(476,case SIG_PRI_LIB_HANDLE_CASES:)
(477,dashptr)
(478,subs)
(479,0)
(480,ani)
(481,i->waitfordialtone)
(482,device_name)
(483,!ast_strlen_zero(i->language)
(484,i)
(485,i->sig == SIG_FXOLS)
(486,ast_channel_caller(tmp)
(487,i)
(488,0)
(489,i->amaflags)
(490,i)
(491,NULL)
(492,i->subs[idx].linear = 0)
(493,AST_FORMAT_ALAW)
(494,ast_channel_caller(tmp)
(495,number)
(496,0)
(497,ast_format_copy(ast_channel_readformat(tmp)
(498,ast_dsp_set_busy_count(i->dsp, i->busycount)
(499,cid_num)
(500,i)
(501,linear)
(502,dahdi_sig_pri_lib_handles(i->sig)
(503,deflaw)
(504,)
(505,SIG_FXOKS)
(506,CHAN_PSEUDO)
(507,AST_STATE_RING)
(508,device_name)
(509,if (startpbx)
(510,features & ~DSP_PROGRESS_TALK)
(511,i->sig == SIG_FXOGS)
(512,~DSP_PROGRESS_TALK)
(513,deflaw)
(514,idx == SUB_REAL)
(515,tmp)
(516,tmp)
(517,i->dsp_features = features)
(518,features |= DSP_FEATURE_CALL_PROGRESS)
(519,ast_devstate_changed_literal(AST_DEVICE_UNKNOWN, device_name)
(520,ast_strlen_zero(progzone)
(521,i)
(522,i->exten)
(523,i)
(524,tmp)
(525,*dashptr = \'\\0\')
(526,i)
(527,i->dsp = ast_dsp_new()
(528,i)
(529,channel)
(530,ast_format_copy(ast_channel_rawreadformat(tmp)
(531,ast_strlen_zero(i->cid_num)
(532,openr2_proto_get_category_string(i->mfcr2_recvd_category)
(533,dsp_features)
(534,i->subs[idx])
(535,parkinglot)
(536,)
(537,ast_strlen_zero(i->language)
(538,0)
(539,dtmfrelax)
(540,i)
(541,v = v->next)
(542,features)
(543,str)
(544,i->dnid)
(545,ast_format_set(&deflaw, AST_FORMAT_ULAW, 0)
(546,context)
(547,channel)
(548,callid)
(549,&i->busy_cadence)
(550,tmp)
(551,CALLPROGRESS_FAX_OUTGOING)
(552,i->subs[idx])
(553,ast_channel_caller(tmp)
(554,*dashptr)
(555,i->subs[idx])
(556,i->law_default)
(557,tmp)
(558,dsp_features)
(559,(i->waitfordialtone || i->dialtone_detect)
(560,i->pri)
(561,subs)
(562,if (i->amaflags)
(563,i->rdnis)
(564,i)
(565,if (!analog_lib_handles(i->sig, i->radio, i->oprmode)
(566,features |= DSP_FEATURE_DIGIT_DETECT)
(567,i)
(568,i->dsp = NULL)
(569,i)
(570,if (!ast_strlen_zero(i->accountcode)
(571,i->callingpres)
(572,)
(573,i)
(574,DSP_DIGITMODE_DTMF)
(575,tmp)
(576,ast_strlen_zero(i->dnid)
(577,exten)
(578,if (law)
(579,i->subs[idx])
(580,features |= DSP_FEATURE_DIGIT_DETECT)
(581,ani)
(582,i)
(583,parkinglot)
(584,)
(585,)
(586,adsi)
(587,i->subs[idx].owner)
(588,struct dahdi_pvt *i)
(589,create_channel_name(i, i->outgoing, i->dnid)
(590,ast_format_copy(ast_channel_writeformat(tmp)
(591,str)
(592,hardwaredtmf)
(593,dsp)
(594,law)
(595,cid_num)
(596,i)
(597,i)
(598,ast_module_info)
(599,&deflaw)
(600,features)
(601,busydetect)
(602,DSP_DIGITMODE_DTMF | i->dtmfrelax)
(603,ast_channel_rawreadformat(tmp)
(604,tmp)
(605,i)
(606,1)
(607,tmp)
(608,i)
(609,ani)
(610,self)
(611,linkedid)
(612,i)
(613,i)
(614,tmp)
(615,(i->callprogress & CALLPROGRESS_PROGRESS)
(616,i)
(617,i->dnid)
(618,i)
(619,deflaw)
(620,DAHDI_TONEDETECT)
(621,)
(622,i->law = (i->law_default == DAHDI_LAW_ALAW)
(623,presentation)
(624,i)
(625,i->law_default)
(626,i->channel)
(627,ast_channel_accountcode_set(tmp, i->accountcode)
(628,law)
(629,i->busydetect)
(630,i)
(631,i->subs)
(632,i)
(633,i)
(634,i->law = law)
(635,i)
(636,1)
(637,v)
(638,i->busy_cadence)
(639,&deflaw)
(640,idx)
(641,if (!i->adsi)
(642,)
(643,CALLPROGRESS_FAX_INCOMING)
(644,i->accountcode)
(645,law_default)
(646,i->pri)
(647,i->dsp)
(648,i->rdnis)
(649,ast_channel_writeformat(tmp)
(650,i->subs[idx].owner = tmp)
(651,i)
(652,cc_params)
(653,i->dsp_features)
(654,tmp)
(655,DSP_FEATURE_DIGIT_DETECT)
(656,0)
(657,i->dtmfrelax)
(658,ast_channel_caller(tmp)
(659,dialtone_scanning_time_elapsed)
(660,NULL)
(661,i->law)
(662,i)
(663,call_forward)
(664,features |= DSP_FEATURE_BUSY_DETECT)
(665,ast_channel_caller(tmp)
(666,tmp)
(667,ast_channel_caller(tmp)
(668,i->dsp)
(669,1)
(670,tmp)
(671,callid)
(672,)
(673,i)
(674,idx)
(675,i)
(676,tmp)
(677,dahdi_sig_pri_lib_handles(i->sig)
(678,i)
(679,state)
(680,i->subs)
(681,analog_lib_handles(i->sig, i->radio, i->oprmode)
(682,tmp)
(683,ast_format_set(&deflaw, AST_FORMAT_ALAW, 0)
(684,radio)
(685,ast_channel_caller(tmp)
(686,i->sig)
(687,DAHDI_TONEDETECT_ON | DAHDI_TONEDETECT_MUTE)
(688,law)
(689,ast_channel_name(tmp)
(690,chan_name)
(691,NULL)
(692,next)
(693,CALLPROGRESS_PROGRESS)
(694,struct ast_callid *callid)
(695,dashptr)
(696,if (i->outgoing && (dahdi_sig_pri_lib_handles(i->sig)
(697,i->dsp)
(698,ast_channel_caller(tmp)
(699,ast_strdup(i->cid_tag)
(700,i->subs[idx].dfd)
(701,tmp)
(702,&deflaw)
(703,pickupgroup)
(704,if (i->busydetect && CANBUSYDETECT(i)
(705,tmp = ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name)
(706,DAHDI_TONEDETECT_MUTE)
(707,tmp)
(708,if (idx == SUB_REAL)
(709,"MFCR2_CATEGORY")
(710,tmp)
(711,tmp)
(712,dahdi_setlinear(i->subs[idx].dfd, i->subs[idx].linear)
(713,i->outgoing)
(714,deflaw)
(715,chan_name = create_channel_name(i, i->outgoing, i->dnid)
(716,i)
(717,CANPROGRESSDETECT(i)
(718,!i->outgoing && (i->callprogress & CALLPROGRESS_FAX_INCOMING)
(719,&dahdi_tech)
(720,ast_channel_alloc(0, state, i->cid_num, i->cid_name, i->accountcode, i->exten, i->context, linkedid, i->amaflags, "DAHDI/%s", ast_str_buffer(chan_name)
(721,i)
(722,tmp)
(723,tmp)
(724,dfd)
(725,i->sig)
(726,pbx_builtin_setvar_helper(tmp, "MFCR2_CATEGORY", openr2_proto_get_category_string(i->mfcr2_recvd_category)
(727,)
(728,named_callgroups)
(729,i)
(730,dahdi_confmute(i, 0)
(731,i->dialtone_scanning_time_elapsed = 0)
(732,i->radio)
(733,tmp)
(734,)
(735,ani)
(736,subnames[idx])
(737,)
(738,exten)
(739,ast_channel_caller(tmp)
(740,i)
(741,ast_dsp_new()
(742,\'-\')
(743,ast_channel_redirecting(tmp)
(744,!ast_strlen_zero(i->parkinglot)
(745,i->sig)
(746,sig)
(747,i->channel != CHAN_PSEUDO)
(748,tmp)
(749,ast_channel_dialed(tmp)
(750,amaflags)
(751,sig)
(752,v)
(753,tmp)
(754,i->dsp)
(755,number)
(756,tmp)
(757,i)
(758,ast_log(LOG_WARNING, "Channel %d already has a %s call\\n", i->channel,subnames[idx])
(759,chan_name)
(760,outgoing)
(761,i->subs[idx].linear)
(762,hardwaredtmf)
(763,break;)
(764,if (i->mfcr2call)
(765,global_jbconf)
(766,startpbx)
(767,i)
(768,i->dsp)
(769,ast_channel_cc_params_init(tmp, i->cc_params)
(770,outgoing)
(771,i->callprogress)
(772,owner)
(773,value)
(774,sig)
(775,tmp)
(776,dfd)
(777,"Unable to start PBX on %s\\n")
(778,i)
(779,id)
(780,ast_format_set(&deflaw, AST_FORMAT_ALAW, 0)
(781,progzone)
(782,!i->owner)
(783,i->cid_num)
(784,from)
(785,law == DAHDI_LAW_ALAW)
(786,deflaw)
(787,sizeof(device_name)
(788,i)
(789,chan_name)
(790,i)
(791,features = 0)
(792,tmp)
(793,i)
(794,return NULL;)
(795,if (i->dsp)
(796,x)
(797,i)
(798,DAHDI_LAW_ALAW)
(799,ast_channel_dialed(tmp)
(800,"Already have a dsp on %s?\\n")
(801,ast_channel_tech_pvt_set(tmp, i)
(802,(i->sig == SIG_FXOGS)
(803,)
(804,i->law_default == DAHDI_LAW_ALAW)
(805,ast_channel_name(tmp)
(806,i->named_pickupgroups)
(807,i)
(808,dnid)
(809,tmp)
(810,dialtone_detect)
(811,cc_params)
(812,i->outgoing && (i->callprogress & CALLPROGRESS_FAX_OUTGOING)
(813,deflaw)
(814,features)
(815,ast_channel_caller(tmp)
(816,cid_ani)
(817,i)
(818,ast_log(LOG_WARNING, "Unable to start PBX on %s\\n", ast_channel_name(tmp)
(819,i->dsp_features = features & ~DSP_PROGRESS_TALK)
(820,i)
(821,v)
(822,ast_channel_caller(tmp)
(823,ast_channel_call_forward_set(tmp, i->call_forward)
(824,ast_strdup(i->rdnis)
(825,if ((i->waitfordialtone || i->dialtone_detect)
(826,tmp)
(827,i)
(828,!ast_strlen_zero(i->cid_num)
(829,i)
(830,!ast_strlen_zero(i->dnid)
(831,DSP_FEATURE_BUSY_DETECT)
(832,i->hardwaredtmf = 0)
(833,tmp)
(834,ast_channel_caller(tmp)
(835,ast_channel_caller(tmp)
(836,SUB_REAL)
(837,sig)
(838,ast_channel_caller(tmp)
(839,oprmode)
(840,i->callprogress)
(841,i->callprogress & CALLPROGRESS_FAX_OUTGOING)
(842,str)
(843,id)
(844,cc_params)
(845,features)
(846,i->law_default)
(847,ast_channel_redirecting(tmp)
(848,law)
(849,v)
(850,dashptr)
(851,i)
(852,if (i->busydetect && CANBUSYDETECT(i)
(853,i->cid_ton)
(854,"DAHDI/%s")
(855,device_name)
(856,ast_channel_pickupgroup_set(tmp, i->pickupgroup)
(857,AST_FORMAT_ALAW)
(858,&deflaw)
(859,ast_channel_redirecting(tmp)
(860,subs)
(861,i->callgroup)
(862,!analog_lib_handles(i->sig, i->radio, i->oprmode)
(863,i->language)
(864,device_name)
(865,i->subs[idx].dfd)
(866,int state)
(867,i->context)
(868,ast_channel_caller(tmp)
(869,i->busydetect && CANBUSYDETECT(i)
(870,ast_cc_copy_config_params(i->cc_params, i->pri->cc_params)
(871,i)
(872,i->law)
(873,ast_channel_caller(tmp)
(874,tmp)
(875,tmp)
(876,features |= DSP_FEATURE_WAITDIALTONE)
(877,i)
(878,tmp)
(879,idx)
(880,i->named_callgroups)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^