-----label-----
1
-----code-----
static bool fanout_flow_is_huge(struct packet_sock *po, struct sk_buff *skb)
{
	u32 rxhash;
	int i, count = 0;

	rxhash = skb_get_hash(skb);
	for (i = 0; i < ROLLOVER_HLEN; i++)
		if (po->rollover->history[i] == rxhash)
			count++;

	po->rollover->history[prandom_u32() % ROLLOVER_HLEN] = rxhash;
	return count > (ROLLOVER_HLEN >> 1);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
25,28
27,28
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
42,46
43,44
44,45
44,46
45,46
48,49
48,50
49,50
51,52
53,54
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
60,61
60,62
61,62
65,66
67,68
69,70
70,71
71,72
73,74
74,75
74,76
75,76
75,77
76,77
76,78
77,78
77,79
78,79
82,83
82,84
83,84
84,85
86,87
88,89
90,91
91,92
91,93
92,93
94,95
95,96
95,97
96,97
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,26,28,30,32,36,39,41,46,47,50,52,55,62,63,64,66,68,72,79,80,81,85,87,89,93,97,98
-----computeFrom-----
34,35
34,36
44,45
44,46
48,49
48,50
57,58
57,59
74,75
74,76
82,83
82,84
91,92
91,93
95,96
95,97
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static bool fanout_flow_is_huge(struct packet_sock *po, struct sk_buff *skb){	u32 rxhash;	int i, count = 0;	rxhash = skb_get_hash(skb);	for (i = 0; i < ROLLOVER_HLEN; i++)		if (po->rollover->history[i] == rxhash)			count++;	po->rollover->history[prandom_u32() % ROLLOVER_HLEN] = rxhash;	return count > (ROLLOVER_HLEN >> 1);}
static bool
fanout_flow_is_huge(struct packet_sock *po, struct sk_buff *skb)
fanout_flow_is_huge
struct packet_sock *po
struct packet_sock
packet_sock
*po
*
po
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
{	u32 rxhash;	int i, count = 0;	rxhash = skb_get_hash(skb);	for (i = 0; i < ROLLOVER_HLEN; i++)		if (po->rollover->history[i] == rxhash)			count++;	po->rollover->history[prandom_u32() % ROLLOVER_HLEN] = rxhash;	return count > (ROLLOVER_HLEN >> 1);}
u32 rxhash;
u32 rxhash;
u32
u32
rxhash
rxhash
int i, count = 0;
int i, count = 0;
int
i
i
count = 0
count
= 0
0
rxhash = skb_get_hash(skb);
rxhash = skb_get_hash(skb)
rxhash
rxhash
skb_get_hash(skb)
skb_get_hash
skb_get_hash
skb
skb
for (i = 0; i < ROLLOVER_HLEN; i++)		if (po->rollover->history[i] == rxhash)			count++;
i = 0;
i = 0
i
i
0
i < ROLLOVER_HLEN
i
i
ROLLOVER_HLEN
ROLLOVER_HLEN
i++
i
i
if (po->rollover->history[i] == rxhash)			count++;
po->rollover->history[i] == rxhash
po->rollover->history[i]
po->rollover->history
po->rollover
po
po
rollover
history
i
i
rxhash
rxhash
count++;
count++
count
count
po->rollover->history[prandom_u32() % ROLLOVER_HLEN] = rxhash;
po->rollover->history[prandom_u32() % ROLLOVER_HLEN] = rxhash
po->rollover->history[prandom_u32() % ROLLOVER_HLEN]
po->rollover->history
po->rollover
po
po
rollover
history
prandom_u32() % ROLLOVER_HLEN
prandom_u32()
prandom_u32
prandom_u32
ROLLOVER_HLEN
ROLLOVER_HLEN
rxhash
rxhash
return count > (ROLLOVER_HLEN >> 1);
count > (ROLLOVER_HLEN >> 1)
count
count
(ROLLOVER_HLEN >> 1)
ROLLOVER_HLEN >> 1
ROLLOVER_HLEN
ROLLOVER_HLEN
1
-----joern-----
(8,18,0)
(4,1,0)
(41,22,0)
(11,43,0)
(6,43,0)
(23,18,0)
(6,22,0)
(29,28,0)
(12,28,0)
(47,27,0)
(18,8,0)
(46,34,0)
(48,32,0)
(16,15,0)
(37,33,0)
(44,6,0)
(17,33,0)
(2,10,0)
(35,4,0)
(13,27,0)
(25,26,0)
(3,27,0)
(5,11,0)
(36,27,0)
(38,27,0)
(7,24,0)
(15,50,0)
(21,18,0)
(31,50,0)
(4,34,0)
(0,1,0)
(14,13,0)
(26,11,0)
(9,20,0)
(10,22,0)
(34,4,0)
(39,6,0)
(32,28,0)
(1,21,0)
(22,6,0)
(50,15,0)
(20,33,0)
(30,34,0)
(26,21,0)
(22,10,0)
(24,15,0)
(40,20,0)
(15,27,0)
(13,15,0)
(18,21,0)
(50,45,0)
(49,11,0)
(21,26,0)
(10,33,0)
(21,13,0)
(11,26,0)
(1,27,0)
(24,10,0)
(4,28,0)
(10,24,0)
(19,33,0)
(42,19,0)
(28,27,0)
(2,22,1)
(21,18,1)
(13,14,1)
(41,6,1)
(48,24,1)
(35,13,1)
(26,25,1)
(10,22,1)
(1,4,1)
(19,33,1)
(10,2,1)
(32,48,1)
(39,44,1)
(17,15,1)
(0,1,1)
(20,33,1)
(30,35,1)
(24,7,1)
(13,15,1)
(49,20,1)
(12,29,1)
(37,17,1)
(28,12,1)
(24,15,1)
(31,16,1)
(16,28,1)
(32,28,1)
(46,30,1)
(11,5,1)
(10,33,1)
(8,26,1)
(7,10,1)
(4,28,1)
(23,8,1)
(33,37,1)
(22,6,1)
(21,26,1)
(18,8,1)
(4,34,1)
(22,41,1)
(20,9,1)
(5,49,1)
(6,39,1)
(11,43,1)
(26,11,1)
(50,45,1)
(25,11,1)
(42,24,1)
(15,50,1)
(18,23,1)
(24,10,1)
(44,20,1)
(1,21,1)
(50,31,1)
(9,40,1)
(14,21,1)
(42,32,1)
(34,46,1)
(40,19,1)
(6,43,1)
(19,42,1)
(40,33,1)
(19,20,2)
(1,21,2)
(19,33,2)
(21,26,2)
(50,45,2)
(26,11,2)
(44,20,2)
(4,28,2)
(13,15,2)
(32,24,2)
(7,20,2)
(20,20,2)
(24,15,2)
(32,28,2)
(9,20,2)
(24,10,2)
(10,20,2)
(39,20,2)
(21,18,2)
(22,20,2)
(41,20,2)
(10,33,2)
(22,6,2)
(6,20,2)
(48,24,2)
(42,20,2)
(6,43,2)
(40,20,2)
(20,33,2)
(18,8,2)
(24,20,2)
(11,43,2)
(4,34,2)
(10,22,2)
(2,20,2)
(0,1,2)
(15,50,2)
-----------------------------------
(0,RET)
(1,return count > (ROLLOVER_HLEN >> 1)
(2,i)
(3,rxhash)
(4,count > (ROLLOVER_HLEN >> 1)
(5,rollover)
(6,po->rollover)
(7,rxhash)
(8,prandom_u32()
(9,ROLLOVER_HLEN)
(10,po->rollover->history[i])
(11,po->rollover)
(12,0)
(13,po->rollover->history[prandom_u32()
(14,rxhash)
(15,rxhash = skb_get_hash(skb)
(16,rxhash)
(17,i)
(18,prandom_u32()
(19,i++)
(20,i < ROLLOVER_HLEN)
(21,po->rollover->history[prandom_u32()
(22,po->rollover->history)
(23,ROLLOVER_HLEN)
(24,po->rollover->history[i] == rxhash)
(25,history)
(26,po->rollover->history)
(27,)
(28,count = 0)
(29,count)
(30,ROLLOVER_HLEN)
(31,skb)
(32,count++)
(33,i = 0)
(34,ROLLOVER_HLEN >> 1)
(35,count)
(36,for (i = 0; i < ROLLOVER_HLEN; i++)
(37,0)
(38,count)
(39,rollover)
(40,i)
(41,history)
(42,i)
(43,struct packet_sock *po)
(44,po)
(45,struct sk_buff *skb)
(46,1)
(47,i)
(48,count)
(49,po)
(50,skb_get_hash(skb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^