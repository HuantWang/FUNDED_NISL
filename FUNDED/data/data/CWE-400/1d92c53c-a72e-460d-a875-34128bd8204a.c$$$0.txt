-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_63_bad()
{
    int * data;
    data = NULL;
    /* POTENTIAL FLAW: Allocate memory on the heap */
    data = (int *)calloc(100, sizeof(int));
    /* Initialize and make use of data */
    data[0] = 5;
    printIntLine(data[0]);
    CWE401_Memory_Leak__int_calloc_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
22,23
22,24
23,24
23,25
25,26
27,28
27,29
27,30
28,29
31,32
32,33
32,34
35,36
36,37
36,38
37,38
37,39
38,39
42,43
43,44
43,45
44,45
46,47
46,48
47,48
50,51
51,52
51,53
52,53
54,55
55,56
-----nextToken-----
2,4,8,10,11,15,17,21,24,26,29,30,33,34,39,40,41,45,48,49,53,56
-----computeFrom-----
13,14
13,15
19,20
19,21
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_63_bad(){    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    CWE401_Memory_Leak__int_calloc_63b_badSink(&data);}
void
CWE401_Memory_Leak__int_calloc_63_bad()
CWE401_Memory_Leak__int_calloc_63_bad
{    int * data;    data = NULL;    /* POTENTIAL FLAW: Allocate memory on the heap */    data = (int *)calloc(100, sizeof(int));    /* Initialize and make use of data */    data[0] = 5;    printIntLine(data[0]);    CWE401_Memory_Leak__int_calloc_63b_badSink(&data);}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
CWE401_Memory_Leak__int_calloc_63b_badSink(&data);
CWE401_Memory_Leak__int_calloc_63b_badSink(&data)
CWE401_Memory_Leak__int_calloc_63b_badSink
CWE401_Memory_Leak__int_calloc_63b_badSink
&data
data
data
-----joern-----
(9,4,0)
(24,20,0)
(0,6,0)
(14,9,0)
(15,6,0)
(26,4,0)
(1,24,0)
(9,19,0)
(13,9,0)
(13,6,0)
(7,20,0)
(20,7,0)
(21,9,0)
(20,4,0)
(0,16,0)
(9,13,0)
(22,18,0)
(18,19,0)
(4,20,0)
(10,24,0)
(23,18,0)
(12,2,0)
(8,16,0)
(24,1,0)
(16,0,0)
(2,6,0)
(5,1,0)
(4,6,0)
(19,6,0)
(20,24,0)
(25,19,0)
(11,2,0)
(16,4,0)
(18,4,0)
(21,14,1)
(16,4,1)
(20,7,1)
(14,19,1)
(4,20,1)
(24,1,1)
(5,10,1)
(0,16,1)
(10,26,1)
(16,8,1)
(2,11,1)
(1,5,1)
(18,22,1)
(8,13,1)
(9,19,1)
(18,4,1)
(19,25,1)
(23,4,1)
(22,23,1)
(13,9,1)
(17,0,1)
(20,24,1)
(26,2,1)
(25,18,1)
(9,21,1)
(9,4,1)
(11,12,1)
(9,4,2)
(4,20,2)
(18,4,2)
(0,16,2)
(20,24,2)
(16,4,2)
(20,7,2)
(9,19,2)
(24,1,2)
(13,9,2)
-----------------------------------
(0,CWE401_Memory_Leak__int_calloc_63b_badSink(&data)
(1,sizeof(int)
(2,data = NULL)
(3, sizeof(int)
(4,data = (int *)
(5,int)
(6,)
(7,int *)
(8,data)
(9,data[0])
(10,100)
(11,NULL)
(12,data)
(13,printIntLine(data[0])
(14,data)
(15,data)
(16,&data)
(17,RET)
(18,data[0])
(19,data[0] = 5)
(20,(int *)
(21,0)
(22,0)
(23,data)
(24,calloc(100, sizeof(int)
(25,5)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^