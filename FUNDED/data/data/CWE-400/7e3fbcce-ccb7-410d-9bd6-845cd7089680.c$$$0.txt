-----label-----
1
-----code-----
static void badSink()
{
    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData;
    {
        wchar_t * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
7,8
7,9
8,9
10,11
10,12
12,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
22,23
22,24
22,25
23,24
23,25
24,25
26,27
26,28
27,28
29,30
31,32
31,33
31,34
31,35
31,36
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
39,40
41,42
41,43
42,43
44,45
44,46
45,46
47,48
48,49
48,50
51,52
51,53
52,53
52,54
53,54
55,56
57,58
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
65,68
66,67
68,69
70,71
72,73
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
86,87
86,88
87,88
-----nextToken-----
2,4,9,11,14,18,20,21,25,28,30,35,38,40,43,46,49,50,54,56,61,63,67,69,71,75,77,81,83,88,89
-----computeFrom-----
23,24
23,25
33,34
33,35
44,45
44,46
52,53
52,54
-----guardedBy-----
30,71
25,46
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void badSink(){    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
static void
badSink()
badSink
{    size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData;    {        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData;
size_t data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData;
size_t
size_t
data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData
data
= CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData
{        wchar_t * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(4,9,0)
(9,39,0)
(36,15,0)
(16,9,0)
(27,28,0)
(37,9,0)
(22,0,0)
(20,12,0)
(0,19,0)
(6,9,0)
(11,37,0)
(23,20,0)
(4,19,0)
(20,23,0)
(39,25,0)
(1,38,0)
(0,9,0)
(28,40,0)
(18,5,0)
(15,36,0)
(33,20,0)
(8,5,0)
(37,19,0)
(21,28,0)
(20,28,0)
(26,16,0)
(39,9,0)
(13,38,0)
(9,19,0)
(34,13,0)
(10,14,0)
(39,23,0)
(14,17,0)
(23,39,0)
(36,3,0)
(12,20,0)
(38,13,0)
(2,40,0)
(35,4,0)
(38,28,0)
(29,19,0)
(32,37,0)
(5,40,0)
(25,39,0)
(30,12,0)
(7,16,0)
(24,15,0)
(16,9,1)
(13,34,1)
(37,9,1)
(39,23,1)
(38,28,1)
(23,20,1)
(1,28,1)
(9,39,1)
(26,7,1)
(11,32,1)
(0,22,1)
(4,9,1)
(0,9,1)
(33,6,1)
(32,36,1)
(15,24,1)
(22,4,1)
(36,15,1)
(27,21,1)
(39,25,1)
(35,37,1)
(37,11,1)
(10,38,1)
(20,28,1)
(4,35,1)
(6,38,1)
(30,33,1)
(34,1,1)
(14,10,1)
(24,16,1)
(31,14,1)
(28,27,1)
(7,9,1)
(32,16,1)
(20,12,1)
(16,26,1)
(38,13,1)
(31,0,1)
(12,30,1)
(7,38,2)
(32,38,2)
(37,38,2)
(39,25,2)
(22,38,2)
(20,28,2)
(4,9,2)
(0,9,2)
(11,38,2)
(9,39,2)
(16,9,2)
(35,38,2)
(36,16,2)
(10,38,2)
(36,15,2)
(39,38,2)
(38,13,2)
(4,38,2)
(14,38,2)
(24,16,2)
(23,20,2)
(20,12,2)
(6,38,2)
(0,38,2)
(30,38,2)
(33,38,2)
(20,38,2)
(15,16,2)
(39,23,2)
(26,38,2)
(23,38,2)
(38,28,2)
(37,9,2)
(9,38,2)
(16,38,2)
(12,38,2)
-----------------------------------
(0,free(myString)
(1,data)
(2,data)
(3,)
(4,printWLine(myString)
(5,)
(6,myString)
(7,myString)
(8,if (data > wcslen(HELLO_STRING)
(9,myString = (wchar_t *)
(10,"Input is less than the length of the source string")
(11,HELLO_STRING)
(12,sizeof(wchar_t)
(13,wcslen(HELLO_STRING)
(14,printLine("Input is less than the length of the source string")
(15,-1)
(16,myString == NULL)
(17,)
(18,myString)
(19,)
(20,data*sizeof(wchar_t)
(21,data)
(22,myString)
(23,malloc(data*sizeof(wchar_t)
(24,1)
(25,wchar_t *)
(26,NULL)
(27,CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData)
(28,data = CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_45_badData)
(29,if (myString == NULL)
(30,wchar_t)
(31,RET)
(32,myString)
(33,data)
(34,HELLO_STRING)
(35,myString)
(36,exit(-1)
(37,wcscpy(myString, HELLO_STRING)
(38,data > wcslen(HELLO_STRING)
(39,(wchar_t *)
(40,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^