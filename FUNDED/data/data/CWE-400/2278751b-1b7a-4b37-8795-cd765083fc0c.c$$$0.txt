-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    while(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
        break;
    }
    while(1)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
49,51
50,51
50,52
50,53
50,54
50,55
50,56
50,57
50,58
50,59
50,60
50,61
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
77,78
80,81
81,82
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
144,149
145,146
147,148
149,150
151,152
151,153
152,153
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
182,183
184,185
186,187
190,191
190,192
191,192
191,193
192,193
194,195
196,197
197,198
198,199
198,200
199,200
201,202
204,205
204,206
206,207
206,208
207,208
207,209
208,209
209,210
209,211
211,212
211,213
214,215
214,216
214,217
215,216
215,217
216,217
216,218
217,218
219,220
219,221
220,221
222,223
224,225
224,226
225,226
228,229
228,230
228,231
228,232
228,233
229,230
230,231
230,232
231,232
233,234
233,235
234,235
234,236
236,237
238,239
238,240
239,240
241,242
241,243
242,243
244,245
245,246
245,247
248,249
248,250
249,250
249,251
250,251
252,253
254,255
255,256
256,257
256,258
257,258
259,260
261,262
262,263
262,264
262,265
263,264
265,266
267,268
269,270
270,271
270,272
271,272
273,274
275,276
276,277
276,278
277,278
279,280
281,282
282,283
283,284
283,285
284,285
-----nextToken-----
2,4,9,11,15,16,18,23,25,29,31,35,37,40,43,45,48,54,57,59,61,63,67,69,71,75,78,79,83,88,89,91,97,98,99,102,104,109,110,113,115,120,122,126,128,131,135,137,139,143,146,148,150,153,154,155,160,162,165,166,168,173,175,176,180,183,185,187,188,189,193,195,200,202,203,205,210,212,213,218,221,223,226,227,232,235,237,240,243,246,247,251,253,258,260,264,266,268,272,274,278,280,285,286,287
-----computeFrom-----
13,14
13,15
52,53
52,54
65,66
65,67
85,86
85,87
93,94
93,95
106,107
106,108
117,118
117,119
141,142
141,143
151,152
151,153
157,158
157,159
158,159
158,160
163,164
163,165
170,171
170,172
178,179
178,180
191,192
191,193
215,216
215,217
216,217
216,218
224,225
224,226
230,231
230,232
241,242
241,243
249,250
249,251
-----guardedBy-----
193,202
223,268
226,243
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    while(1)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }    while(1)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
while(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }        break;    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
break;
while(1)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }
1
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }        break;    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
-----joern-----
(63,62,0)
(97,62,0)
(149,71,0)
(17,9,0)
(93,4,0)
(31,16,0)
(9,146,0)
(38,77,0)
(160,85,0)
(24,121,0)
(41,42,0)
(123,146,0)
(68,91,0)
(25,139,0)
(137,41,0)
(21,82,0)
(76,71,0)
(15,32,0)
(56,93,0)
(99,16,0)
(73,16,0)
(79,109,0)
(29,58,0)
(65,101,0)
(80,133,0)
(100,109,0)
(166,21,0)
(93,158,0)
(138,144,0)
(81,4,0)
(67,24,0)
(21,18,0)
(25,32,0)
(77,122,0)
(6,112,0)
(47,102,0)
(120,121,0)
(8,49,0)
(4,101,0)
(74,27,0)
(64,131,0)
(50,37,0)
(59,38,0)
(114,27,0)
(117,77,0)
(5,58,0)
(148,93,0)
(102,71,0)
(102,47,0)
(124,123,0)
(83,55,0)
(36,31,0)
(3,85,0)
(85,61,0)
(172,9,0)
(16,99,0)
(21,166,0)
(1,158,0)
(89,121,0)
(164,71,0)
(132,142,0)
(62,4,0)
(51,39,0)
(142,95,0)
(149,62,0)
(140,41,0)
(7,47,0)
(85,160,0)
(14,101,0)
(42,41,0)
(103,30,0)
(111,82,0)
(89,77,0)
(99,145,0)
(124,122,0)
(60,37,0)
(84,51,0)
(49,115,0)
(27,74,0)
(85,30,0)
(154,146,0)
(10,16,0)
(123,124,0)
(122,127,0)
(161,26,0)
(168,8,0)
(51,149,0)
(167,86,0)
(11,123,0)
(173,18,0)
(158,37,0)
(62,170,0)
(44,37,0)
(157,13,0)
(18,21,0)
(34,61,0)
(24,77,0)
(27,119,0)
(54,82,0)
(37,13,0)
(28,158,0)
(66,73,0)
(19,37,0)
(119,27,0)
(45,40,0)
(82,21,0)
(92,62,0)
(78,39,0)
(88,8,0)
(105,156,0)
(12,38,0)
(129,61,0)
(125,119,0)
(110,51,0)
(2,101,0)
(109,61,0)
(120,77,0)
(16,31,0)
(20,120,0)
(41,149,0)
(108,96,0)
(115,49,0)
(122,77,0)
(169,89,0)
(32,25,0)
(27,71,0)
(90,37,0)
(135,95,0)
(160,109,0)
(23,26,0)
(43,164,0)
(118,42,0)
(98,37,0)
(123,61,0)
(85,146,0)
(141,9,0)
(40,158,0)
(95,142,0)
(75,37,0)
(61,26,0)
(127,122,0)
(58,33,0)
(16,4,0)
(113,74,0)
(42,118,0)
(95,102,0)
(156,4,0)
(99,86,0)
(77,121,0)
(165,71,0)
(35,123,0)
(126,163,0)
(52,37,0)
(0,55,0)
(155,115,0)
(109,160,0)
(40,22,0)
(16,73,0)
(39,71,0)
(162,71,0)
(107,71,0)
(49,71,0)
(4,71,0)
(62,149,0)
(46,89,0)
(151,144,0)
(87,142,0)
(69,170,0)
(150,164,0)
(170,62,0)
(118,149,0)
(48,126,0)
(109,146,0)
(40,4,0)
(101,4,0)
(122,124,0)
(30,85,0)
(145,99,0)
(130,121,0)
(86,99,0)
(136,170,0)
(72,35,0)
(53,166,0)
(146,9,0)
(33,71,0)
(152,26,0)
(57,118,0)
(144,91,0)
(70,37,0)
(116,149,0)
(147,118,0)
(55,37,0)
(123,35,0)
(128,33,0)
(171,94,0)
(146,71,0)
(104,156,0)
(40,4,1)
(63,116,1)
(106,153,1)
(95,135,1)
(99,86,1)
(167,10,1)
(21,18,1)
(113,114,1)
(9,172,1)
(29,5,1)
(61,34,1)
(56,159,1)
(143,68,1)
(38,59,1)
(28,55,1)
(8,168,1)
(89,77,1)
(56,6,1)
(123,146,1)
(24,67,1)
(171,73,1)
(74,113,1)
(154,39,1)
(58,29,1)
(111,159,1)
(43,150,1)
(40,45,1)
(66,16,1)
(170,136,1)
(67,120,1)
(80,134,1)
(156,4,1)
(83,153,1)
(86,167,1)
(136,69,1)
(103,3,1)
(48,160,1)
(68,24,1)
(51,84,1)
(146,9,1)
(2,65,1)
(15,38,1)
(160,109,1)
(124,123,1)
(126,48,1)
(120,20,1)
(51,149,1)
(135,142,1)
(120,77,1)
(0,83,1)
(1,28,1)
(54,111,1)
(115,155,1)
(56,171,1)
(11,117,1)
(31,36,1)
(46,25,1)
(88,102,1)
(40,158,1)
(56,108,1)
(89,169,1)
(132,33,1)
(117,160,1)
(35,72,1)
(81,164,1)
(105,104,1)
(3,106,1)
(69,92,1)
(39,78,1)
(41,140,1)
(41,149,1)
(93,4,1)
(93,148,1)
(169,46,1)
(12,77,1)
(36,99,1)
(118,149,1)
(157,80,1)
(95,142,1)
(123,61,1)
(56,64,1)
(102,47,1)
(106,157,1)
(21,82,1)
(125,156,1)
(16,99,1)
(128,58,1)
(38,77,1)
(173,82,1)
(149,62,1)
(147,57,1)
(4,101,1)
(79,85,1)
(148,56,1)
(155,8,1)
(97,170,1)
(122,127,1)
(73,16,1)
(53,21,1)
(42,118,1)
(73,66,1)
(156,105,1)
(18,173,1)
(160,85,1)
(16,4,1)
(42,41,1)
(100,79,1)
(172,17,1)
(166,53,1)
(24,77,1)
(166,21,1)
(46,38,1)
(134,40,1)
(17,141,1)
(110,42,1)
(14,2,1)
(109,146,1)
(85,30,1)
(85,146,1)
(62,4,1)
(150,166,1)
(82,54,1)
(111,158,1)
(27,119,1)
(137,149,1)
(47,7,1)
(99,145,1)
(77,122,1)
(5,27,1)
(16,31,1)
(168,88,1)
(109,100,1)
(30,103,1)
(101,14,1)
(62,170,1)
(153,61,1)
(57,41,1)
(64,42,1)
(55,0,1)
(93,158,1)
(20,89,1)
(157,134,1)
(142,87,1)
(25,32,1)
(32,15,1)
(109,61,1)
(59,12,1)
(68,126,1)
(104,4,1)
(92,63,1)
(118,147,1)
(143,106,1)
(49,115,1)
(33,128,1)
(158,1,1)
(45,93,1)
(62,97,1)
(84,110,1)
(108,166,1)
(10,49,1)
(140,137,1)
(87,132,1)
(141,154,1)
(116,73,1)
(78,51,1)
(114,119,1)
(6,156,1)
(7,95,1)
(85,61,1)
(122,124,1)
(27,74,1)
(34,129,1)
(159,146,1)
(134,93,1)
(72,11,1)
(123,35,1)
(65,81,1)
(119,125,1)
(164,43,1)
(157,153,2)
(147,41,2)
(65,166,2)
(160,85,2)
(122,124,2)
(108,166,2)
(56,153,2)
(134,153,2)
(92,73,2)
(41,73,2)
(166,21,2)
(82,153,2)
(173,159,2)
(38,77,2)
(93,153,2)
(95,156,2)
(154,42,2)
(149,73,2)
(101,166,2)
(79,85,2)
(172,42,2)
(16,156,2)
(141,42,2)
(49,156,2)
(109,146,2)
(120,160,2)
(89,160,2)
(53,153,2)
(149,62,2)
(29,156,2)
(7,156,2)
(89,77,2)
(14,166,2)
(35,160,2)
(166,153,2)
(80,134,2)
(132,156,2)
(123,35,2)
(156,4,2)
(146,42,2)
(24,77,2)
(42,118,2)
(21,153,2)
(25,38,2)
(109,85,2)
(42,73,2)
(160,109,2)
(123,146,2)
(73,16,2)
(66,156,2)
(41,149,2)
(73,156,2)
(17,42,2)
(116,73,2)
(123,61,2)
(48,160,2)
(85,146,2)
(43,166,2)
(2,166,2)
(146,9,2)
(54,159,2)
(102,47,2)
(124,160,2)
(85,61,2)
(167,156,2)
(111,153,2)
(38,160,2)
(93,4,2)
(40,93,2)
(85,106,2)
(4,166,2)
(9,42,2)
(27,156,2)
(77,122,2)
(81,166,2)
(25,32,2)
(156,166,2)
(158,153,2)
(0,153,2)
(47,156,2)
(36,156,2)
(63,73,2)
(83,153,2)
(33,156,2)
(6,156,2)
(62,170,2)
(99,86,2)
(42,41,2)
(12,160,2)
(16,99,2)
(118,149,2)
(136,73,2)
(1,153,2)
(104,166,2)
(21,18,2)
(24,160,2)
(169,160,2)
(5,156,2)
(95,142,2)
(114,156,2)
(16,4,2)
(115,156,2)
(16,31,2)
(84,42,2)
(113,156,2)
(166,159,2)
(46,160,2)
(124,123,2)
(20,160,2)
(68,106,2)
(32,38,2)
(15,38,2)
(10,156,2)
(109,61,2)
(111,159,2)
(45,93,2)
(77,160,2)
(160,106,2)
(85,30,2)
(18,159,2)
(78,42,2)
(171,73,2)
(86,156,2)
(100,85,2)
(64,42,2)
(74,156,2)
(57,41,2)
(120,77,2)
(8,156,2)
(49,115,2)
(40,158,2)
(159,42,2)
(128,156,2)
(142,156,2)
(27,119,2)
(55,153,2)
(102,156,2)
(110,42,2)
(97,73,2)
(39,42,2)
(40,4,2)
(4,101,2)
(173,153,2)
(155,156,2)
(105,166,2)
(170,73,2)
(59,160,2)
(62,73,2)
(31,156,2)
(122,160,2)
(53,159,2)
(67,160,2)
(125,156,2)
(30,106,2)
(140,73,2)
(69,73,2)
(164,166,2)
(93,158,2)
(28,153,2)
(82,159,2)
(103,106,2)
(148,153,2)
(88,156,2)
(123,160,2)
(118,41,2)
(51,149,2)
(126,160,2)
(58,156,2)
(150,166,2)
(137,73,2)
(18,153,2)
(62,4,2)
(99,156,2)
(27,74,2)
(117,160,2)
(135,156,2)
(54,153,2)
(51,42,2)
(119,156,2)
(3,106,2)
(99,145,2)
(168,156,2)
(11,160,2)
(72,160,2)
(21,159,2)
(87,156,2)
(122,127,2)
(21,82,2)
-----------------------------------
(0,0)
(1,INVALID_SOCKET)
(2,SOCK_STREAM)
(3,data)
(4,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(5,service)
(6,break;)
(7,IP_ADDRESS)
(8,service.sin_port)
(9,strtoul(inputBuffer, NULL, 0)
(10,connectSocket)
(11,data)
(12,myString)
(13,)
(14,IPPROTO_TCP)
(15,1)
(16,connect(connectSocket, (struct sockaddr*)
(17,NULL)
(18,&wsaData)
(19,recvResult)
(20,myString)
(21,WSAStartup(MAKEWORD(2,2)
(22,)
(23,while(1)
(24,free(myString)
(25,exit(-1)
(26,)
(27,memset(&service, 0, sizeof(service)
(28,connectSocket)
(29,sin_family)
(30,wcslen(HELLO_STRING)
(31,sizeof(service)
(32,-1)
(33,service.sin_family = AF_INET)
(34,0)
(35,sizeof(wchar_t)
(36,service)
(37,)
(38,myString == NULL)
(39,inputBuffer[recvResult] = \'\\0\')
(40,CLOSE_SOCKET(connectSocket)
(41,recvResult == SOCKET_ERROR)
(42,recvResult == SOCKET_ERROR || recvResult == 0)
(43,1)
(44,wsaData)
(45,connectSocket)
(46,myString)
(47,inet_addr(IP_ADDRESS)
(48,"Input is less than the length of the source string or too large")
(49,service.sin_port = htons(TCP_PORT)
(50,if (connectSocket != INVALID_SOCKET)
(51,inputBuffer[recvResult])
(52,do)
(53,NO_ERROR)
(54,2)
(55,wsaDataInit = 0)
(56,connectSocket)
(57,recvResult)
(58,service.sin_family)
(59,NULL)
(60,wsaDataInit)
(61,data = 0)
(62,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(63,connectSocket)
(64,break;)
(65,AF_INET)
(66,SOCKET_ERROR)
(67,myString)
(68,break;)
(69,CHAR_ARRAY_SIZE)
(70,service)
(71,)
(72,wchar_t)
(73,connect(connectSocket, (struct sockaddr*)
(74,sizeof(service)
(75,connectSocket)
(76,if (connect(connectSocket, (struct sockaddr*)
(77,myString = (wchar_t *)
(78,\'\\0\')
(79,data)
(80,WSACleanup()
(81,connectSocket)
(82,MAKEWORD(2,2)
(83,wsaDataInit)
(84,recvResult)
(85,data > wcslen(HELLO_STRING)
(86,&service)
(87,sin_addr)
(88,service)
(89,wcscpy(myString, HELLO_STRING)
(90,if (wsaDataInit)
(91,)
(92,inputBuffer)
(93,connectSocket != INVALID_SOCKET)
(94,)
(95,service.sin_addr.s_addr)
(96,)
(97,0)
(98,inputBuffer)
(99,(struct sockaddr*)
(100,100)
(101,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(102,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(103,HELLO_STRING)
(104,connectSocket)
(105,INVALID_SOCKET)
(106,1)
(107,if (WSAStartup(MAKEWORD(2,2)
(108,break;)
(109,data < 100)
(110,inputBuffer)
(111,2)
(112,)
(113,service)
(114,0)
(115,htons(TCP_PORT)
(116,recvResult)
(117,myString)
(118,recvResult == 0)
(119,&service)
(120,printWLine(myString)
(121,)
(122,(wchar_t *)
(123,data*sizeof(wchar_t)
(124,malloc(data*sizeof(wchar_t)
(125,service)
(126,printLine("Input is less than the length of the source string or too large")
(127,wchar_t *)
(128,AF_INET)
(129,data)
(130,if (myString == NULL)
(131,)
(132,service)
(133,)
(134,wsaDataInit)
(135,s_addr)
(136,1)
(137,recvResult)
(138,myString)
(139,)
(140,SOCKET_ERROR)
(141,inputBuffer)
(142,service.sin_addr)
(143,RET)
(144,)
(145,struct sockaddr*)
(146,data = strtoul(inputBuffer, NULL, 0)
(147,0)
(148,INVALID_SOCKET)
(149,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(150,wsaDataInit)
(151,if (data > wcslen(HELLO_STRING)
(152,while(1)
(153,1)
(154,data)
(155,TCP_PORT)
(156,connectSocket == INVALID_SOCKET)
(157,break;)
(158,connectSocket = INVALID_SOCKET)
(159,0)
(160,data > wcslen(HELLO_STRING)
(161,data)
(162,if (connectSocket == INVALID_SOCKET)
(163,)
(164,wsaDataInit = 1)
(165,if (recvResult == SOCKET_ERROR || recvResult == 0)
(166,WSAStartup(MAKEWORD(2,2)
(167,service)
(168,sin_port)
(169,HELLO_STRING)
(170,CHAR_ARRAY_SIZE - 1)
(171,break;)
(172,0)
(173,wsaData)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^