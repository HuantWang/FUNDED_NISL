-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink(void * countVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * countPtr = (int *)countVoidPtr;
    /* dereference countPtr into count */
    int count = (*countPtr);
    /* FIX: Validate count before using it as a parameter in the sleep function */
    if (count > 0 && count <= 2000)
    {
        SLEEP(count);
        printLine("Sleep time OK");
    }
    else
    {
        printLine("Sleep time too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
36,37
36,38
37,38
37,39
38,39
41,42
41,43
42,43
45,46
45,47
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
54,55
57,58
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,39,40,43,44,49,51,55,56,61,62
-----computeFrom-----
36,37
36,38
37,38
37,39
41,42
41,43
-----guardedBy-----
43,51
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink(void * countVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * countPtr = (int *)countVoidPtr;    /* dereference countPtr into count */    int count = (*countPtr);    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink(void * countVoidPtr)
CWE400_Resource_Exhaustion__rand_sleep_64b_goodB2GSink
void * countVoidPtr
void
* countVoidPtr
*
countVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * countPtr = (int *)countVoidPtr;    /* dereference countPtr into count */    int count = (*countPtr);    /* FIX: Validate count before using it as a parameter in the sleep function */    if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }}
int * countPtr = (int *)countVoidPtr;
int * countPtr = (int *)countVoidPtr;
int
* countPtr = (int *)countVoidPtr
*
countPtr
= (int *)countVoidPtr
(int *)countVoidPtr
int *
int
*
*
countVoidPtr
countVoidPtr
int count = (*countPtr);
int count = (*countPtr);
int
count = (*countPtr)
count
= (*countPtr)
(*countPtr)
*countPtr
countPtr
countPtr
if (count > 0 && count <= 2000)    {        SLEEP(count);        printLine("Sleep time OK");    }    else    {        printLine("Sleep time too long");    }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{        SLEEP(count);        printLine("Sleep time OK");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{        printLine("Sleep time too long");    }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(2,4,0)
(10,12,0)
(5,3,0)
(27,8,0)
(25,20,0)
(11,14,0)
(22,16,0)
(3,24,0)
(8,18,0)
(4,16,0)
(23,3,0)
(16,4,0)
(17,16,0)
(7,14,0)
(29,12,0)
(3,23,0)
(16,14,0)
(20,9,0)
(4,2,0)
(20,14,0)
(11,15,0)
(14,11,0)
(2,14,0)
(15,12,0)
(0,2,0)
(15,3,0)
(13,12,0)
(28,11,0)
(6,15,0)
(14,12,0)
(21,2,0)
(3,15,0)
(19,9,0)
(1,19,0)
(5,6,1)
(26,8,1)
(21,16,1)
(25,4,1)
(19,1,1)
(27,4,1)
(17,14,1)
(3,23,1)
(20,14,1)
(1,20,1)
(7,15,1)
(2,0,1)
(3,5,1)
(3,24,1)
(28,7,1)
(0,21,1)
(26,19,1)
(16,22,1)
(4,16,1)
(14,11,1)
(15,3,1)
(22,17,1)
(2,14,1)
(20,25,1)
(4,2,1)
(11,28,1)
(16,14,1)
(11,15,1)
(8,27,1)
(4,16,2)
(25,4,2)
(3,23,2)
(19,4,2)
(1,4,2)
(15,3,2)
(2,14,2)
(21,16,2)
(11,15,2)
(16,14,2)
(8,4,2)
(0,16,2)
(14,11,2)
(20,14,2)
(4,2,2)
(3,24,2)
(2,16,2)
(27,4,2)
(20,4,2)
-----------------------------------
(0,2000)
(1,"Sleep time OK")
(2,count <= 2000)
(3,(int *)
(4,count > 0 && count <= 2000)
(5,countVoidPtr)
(6,countPtr)
(7,count)
(8,printLine("Sleep time too long")
(9,)
(10,if (count > 0 && count <= 2000)
(11,*countPtr)
(12,)
(13,count)
(14,count = (*countPtr)
(15,* countPtr = (int *)
(16,count > 0)
(17,count)
(18,)
(19,printLine("Sleep time OK")
(20,SLEEP(count)
(21,count)
(22,0)
(23,int *)
(24,void * countVoidPtr)
(25,count)
(26,RET)
(27,"Sleep time too long")
(28,countPtr)
(29,countPtr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^