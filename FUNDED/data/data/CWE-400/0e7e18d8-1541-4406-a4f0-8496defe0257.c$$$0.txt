-----label-----
0
-----code-----
static void goodG2B1()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Use a relatively small number */
        count = 20;
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
17,20
18,19
20,21
21,22
22,23
22,24
23,24
26,27
27,28
28,29
28,30
29,30
32,33
32,34
33,34
35,36
35,37
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
-----nextToken-----
2,4,8,10,14,16,19,24,25,30,31,34,39,41,45,46
-----computeFrom-----
12,13
12,14
28,29
28,30
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    int count;    /* Initialize count */    count = -1;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
static void
goodG2B1()
goodG2B1
{    int count;    /* Initialize count */    count = -1;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }    if(staticTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Use a relatively small number */        count = 20;    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Use a relatively small number */        count = 20;    }
count = 20;
count = 20
count
count
20
if(staticTrue)    {        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(12,3,0)
(6,17,0)
(17,21,0)
(14,17,0)
(3,20,0)
(0,9,0)
(13,3,0)
(9,3,0)
(3,13,0)
(5,20,0)
(2,13,0)
(18,7,0)
(7,11,0)
(1,8,0)
(19,20,0)
(9,17,0)
(4,1,0)
(9,8,0)
(22,20,0)
(16,1,1)
(3,13,1)
(9,0,1)
(17,14,1)
(18,15,1)
(15,3,1)
(4,9,1)
(7,18,1)
(9,17,1)
(14,6,1)
(0,10,1)
(13,2,1)
(10,7,1)
(10,17,1)
(16,10,1)
(9,3,1)
(1,4,1)
(6,15,1)
(2,12,1)
(14,15,2)
(3,13,2)
(0,10,2)
(7,15,2)
(1,10,2)
(9,17,2)
(9,3,2)
(6,15,2)
(17,15,2)
(18,15,2)
(4,10,2)
(9,10,2)
-----------------------------------
(0,count)
(1,printLine("Sleep time possibly too long")
(2,1)
(3,count = -1)
(4,"Sleep time possibly too long")
(5,count)
(6,count)
(7,printLine("Benign, fixed string")
(8,)
(9,SLEEP(count)
(10,staticTrue)
(11,)
(12,count)
(13,-1)
(14,20)
(15,staticFalse)
(16,RET)
(17,count = 20)
(18,"Benign, fixed string")
(19,if(staticTrue)
(20,)
(21,)
(22,if(staticFalse)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^