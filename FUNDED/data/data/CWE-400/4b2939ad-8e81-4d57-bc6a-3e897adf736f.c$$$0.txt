-----label-----
0
-----code-----
static void goodB2G()
{
    size_t data;
    /* Initialize data */
    data = 0;
    goto source;
source:
    /* POTENTIAL FLAW: Set data to a random value */
    data = rand();
    goto sink;
sink:
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
19,20
19,21
21,22
22,23
22,24
23,24
25,26
26,27
28,29
30,31
30,32
32,33
32,34
33,34
34,35
34,36
36,37
36,38
39,40
39,41
39,42
40,41
40,42
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,18,20,24,27,29,31,35,37,38,43,46,48,51,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
22,23
22,24
40,41
40,42
41,42
41,43
49,50
49,51
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
48,93
51,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G(){    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    goto sink;sink:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
static void
goodB2G()
goodB2G
{    size_t data;    /* Initialize data */    data = 0;    goto source;source:    /* POTENTIAL FLAW: Set data to a random value */    data = rand();    goto sink;sink:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
goto source;
source
source:    /* POTENTIAL FLAW: Set data to a random value */    data = rand();
source
data = rand();
data = rand()
data
data
rand()
rand
rand
goto sink;
sink
sink:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
sink
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(0,50,0)
(11,32,0)
(50,44,0)
(2,34,0)
(24,28,0)
(43,28,0)
(15,40,0)
(6,14,0)
(4,40,0)
(37,21,0)
(21,51,0)
(41,39,0)
(31,44,0)
(12,28,0)
(20,48,0)
(45,50,0)
(2,37,0)
(5,21,0)
(26,50,0)
(8,48,0)
(16,39,0)
(21,37,0)
(14,6,0)
(18,28,0)
(23,37,0)
(35,2,0)
(50,0,0)
(51,21,0)
(32,37,0)
(47,28,0)
(48,28,0)
(10,38,0)
(5,14,0)
(44,28,0)
(19,12,0)
(42,28,0)
(46,10,0)
(39,34,0)
(25,37,0)
(39,37,0)
(22,44,0)
(25,34,0)
(33,32,0)
(21,5,0)
(13,15,0)
(14,44,0)
(17,6,0)
(15,44,0)
(7,1,0)
(15,0,0)
(14,5,0)
(36,34,0)
(49,14,0)
(44,22,0)
(1,7,0)
(27,25,0)
(0,15,0)
(29,12,0)
(30,7,0)
(1,3,0)
(40,15,0)
(37,34,0)
(32,37,1)
(41,32,1)
(17,49,1)
(25,27,1)
(10,46,1)
(21,5,1)
(45,15,1)
(2,35,1)
(47,44,1)
(39,16,1)
(41,1,1)
(26,45,1)
(20,8,1)
(50,44,1)
(31,42,1)
(14,44,1)
(15,44,1)
(22,31,1)
(6,17,1)
(49,23,1)
(9,10,1)
(42,48,1)
(46,0,1)
(33,11,1)
(5,14,1)
(25,37,1)
(0,15,1)
(0,50,1)
(27,2,1)
(1,7,1)
(14,6,1)
(16,41,1)
(48,20,1)
(35,39,1)
(7,30,1)
(21,51,1)
(4,13,1)
(30,32,1)
(37,21,1)
(23,0,1)
(44,22,1)
(13,47,1)
(39,37,1)
(15,40,1)
(11,37,1)
(9,25,1)
(40,4,1)
(2,37,1)
(50,26,1)
(32,33,1)
(49,0,2)
(0,15,2)
(21,0,2)
(44,22,2)
(2,0,2)
(33,0,2)
(21,51,2)
(5,0,2)
(26,15,2)
(16,0,2)
(30,32,2)
(5,14,2)
(0,50,2)
(1,7,2)
(14,44,2)
(6,0,2)
(46,0,2)
(17,0,2)
(11,0,2)
(39,0,2)
(37,21,2)
(35,0,2)
(32,0,2)
(1,32,2)
(25,0,2)
(2,37,2)
(37,0,2)
(15,40,2)
(32,37,2)
(7,32,2)
(25,37,2)
(50,44,2)
(21,5,2)
(41,0,2)
(23,0,2)
(10,0,2)
(39,37,2)
(45,15,2)
(14,6,2)
(27,0,2)
(14,0,2)
(15,44,2)
(50,15,2)
-----------------------------------
(0,data > wcslen(HELLO_STRING)
(1,exit(-1)
(2,printWLine(myString)
(3,)
(4,HELLO_STRING)
(5,malloc(data*sizeof(wchar_t)
(6,sizeof(wchar_t)
(7,-1)
(8,data)
(9,RET)
(10,printLine("Input is less than the length of the source string or too large")
(11,myString)
(12,)
(13,data)
(14,data*sizeof(wchar_t)
(15,data > wcslen(HELLO_STRING)
(16,HELLO_STRING)
(17,wchar_t)
(18,source:)
(19,if (data > wcslen(HELLO_STRING)
(20,0)
(21,(wchar_t *)
(22,rand()
(23,myString)
(24,sink:)
(25,free(myString)
(26,100)
(27,myString)
(28,)
(29,myString)
(30,1)
(31,data)
(32,myString == NULL)
(33,NULL)
(34,)
(35,myString)
(36,if (myString == NULL)
(37,myString = (wchar_t *)
(38,)
(39,wcscpy(myString, HELLO_STRING)
(40,wcslen(HELLO_STRING)
(41,myString)
(42,goto source;)
(43,data)
(44,data = rand()
(45,data)
(46,"Input is less than the length of the source string or too large")
(47,goto sink;)
(48,data = 0)
(49,data)
(50,data < 100)
(51,wchar_t *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^