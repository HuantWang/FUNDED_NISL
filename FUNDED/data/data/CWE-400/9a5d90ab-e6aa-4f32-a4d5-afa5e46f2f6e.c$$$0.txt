-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_01_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Read count from the console using fscanf() */
    fscanf(stdin, "%d", &count);
    {
        size_t i = 0;
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
18,21
18,22
19,20
21,22
24,25
25,26
27,28
27,29
28,29
29,30
29,31
30,31
32,33
32,34
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
45,47
46,47
46,48
47,48
50,51
52,53
53,54
55,56
56,57
57,58
57,59
58,59
-----nextToken-----
2,4,8,10,14,16,20,22,23,26,31,33,35,40,41,44,48,49,51,54,59,60
-----computeFrom-----
12,13
12,14
38,39
38,40
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_for_loop_01_bad(){    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
void
CWE400_Resource_Exhaustion__fscanf_for_loop_01_bad()
CWE400_Resource_Exhaustion__fscanf_for_loop_01_bad
{    int count;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Read count from the console using fscanf() */    fscanf(stdin, "%d", &count);    {        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
fscanf(stdin, "%d", &count);
fscanf(stdin, "%d", &count)
fscanf
fscanf
stdin
stdin
"%d"
&count
count
count
{        size_t i = 0;        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */        for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)        {            printLine("Hello");        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            printLine("Hello");        }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,23,0)
(26,16,0)
(2,3,0)
(19,18,0)
(1,26,0)
(20,23,0)
(18,19,0)
(19,23,0)
(17,16,0)
(21,5,0)
(27,23,0)
(14,2,0)
(23,27,0)
(19,24,0)
(2,14,0)
(16,3,0)
(13,2,0)
(23,3,0)
(24,5,0)
(25,16,0)
(9,24,0)
(22,4,0)
(28,19,0)
(12,3,0)
(8,5,0)
(6,2,0)
(11,27,0)
(24,19,0)
(15,21,0)
(7,5,0)
(4,0,0)
(10,26,0)
(29,14,0)
(8,7,1)
(29,6,1)
(7,26,1)
(9,21,1)
(30,24,1)
(19,23,1)
(15,4,1)
(26,1,1)
(24,19,1)
(24,5,1)
(14,23,1)
(21,15,1)
(9,5,1)
(6,13,1)
(27,11,1)
(19,18,1)
(14,29,1)
(23,27,1)
(13,23,1)
(21,5,1)
(4,22,1)
(11,20,1)
(28,9,1)
(10,2,1)
(1,10,1)
(5,8,1)
(2,14,1)
(22,24,1)
(19,28,1)
(22,24,2)
(15,24,2)
(24,19,2)
(28,24,2)
(21,24,2)
(21,5,2)
(14,23,2)
(9,24,2)
(24,24,2)
(23,27,2)
(24,5,2)
(19,23,2)
(19,18,2)
(19,24,2)
(2,14,2)
(4,24,2)
-----------------------------------
(0,)
(1,0)
(2,fscanf(stdin, "%d", &count)
(3,)
(4,printLine("Hello")
(5,i = 0)
(6,"%d")
(7,i)
(8,0)
(9,i)
(10,i)
(11,1)
(12,count)
(13,stdin)
(14,&count)
(15,i)
(16,)
(17,for (i = 0; i < (size_t)
(18,size_t)
(19,(size_t)
(20,count)
(21,i++)
(22,"Hello")
(23,count = -1)
(24,i < (size_t)
(25,i)
(26,i = 0)
(27,-1)
(28,count)
(29,count)
(30,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^