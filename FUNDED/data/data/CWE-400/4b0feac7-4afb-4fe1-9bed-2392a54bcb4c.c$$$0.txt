-----label-----
0
-----code-----
static void good1()
{
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        {
            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
            if (data == NULL) {exit(-1);}
            int64_t * tmpData;
            /* Initialize and make use of data */
            data[0] = 5LL;
            printLongLongLine(data[0]);
            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0] = 10LL;
                printLongLongLine(data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
6,9
7,8
8,9
10,11
11,12
12,13
12,14
13,14
16,17
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
35,36
35,37
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
64,66
65,66
69,70
70,71
70,72
71,72
73,74
73,75
74,75
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
90,91
92,93
92,94
93,94
95,96
96,97
96,98
97,98
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
106,109
107,108
108,109
108,110
109,110
111,112
113,114
114,115
114,116
115,116
115,117
116,117
120,121
121,122
121,123
122,123
124,125
124,126
125,126
128,129
129,130
129,131
130,131
132,133
-----nextToken-----
2,4,9,14,15,21,23,24,29,31,34,36,40,41,45,47,52,54,58,60,61,66,67,68,72,75,76,80,84,86,89,91,94,98,99,103,105,110,112,117,118,119,123,126,127,131,133
-----computeFrom-----
35,36
35,37
43,44
43,45
63,64
63,65
78,79
78,80
92,93
92,94
101,102
101,103
108,109
108,110
114,115
114,116
-----guardedBy-----
103,112
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }}
static void
good1()
good1
{    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }}
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        {            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }    }
{            int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));            if (data == NULL) {exit(-1);}            int64_t * tmpData;            /* Initialize and make use of data */            data[0] = 5LL;            printLongLongLine(data[0]);            tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }            free(data);        }
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t * data = (int64_t *)malloc(100*sizeof(int64_t));
int64_t
int64_t
* data = (int64_t *)malloc(100*sizeof(int64_t))
*
data
= (int64_t *)malloc(100*sizeof(int64_t))
(int64_t *)malloc(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
malloc(100*sizeof(int64_t))
malloc
malloc
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int64_t * tmpData;
int64_t * tmpData;
int64_t
int64_t
* tmpData
*
tmpData
data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t));
tmpData = (int64_t *)realloc(data, (130000)*sizeof(int64_t))
tmpData
tmpData
(int64_t *)realloc(data, (130000)*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
realloc(data, (130000)*sizeof(int64_t))
realloc
realloc
data
data
(130000)*sizeof(int64_t)
(130000)
130000
sizeof(int64_t)
int64_t
int64_t
int64_t

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0] = 10LL;                printLongLongLine(data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10LL;
data[0] = 10LL
data[0]
data
data
0
10LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(4,38,0)
(20,0,0)
(47,44,0)
(0,52,0)
(42,24,0)
(53,38,0)
(47,50,0)
(17,55,0)
(44,52,0)
(50,47,0)
(21,53,0)
(28,52,0)
(39,53,0)
(3,53,0)
(6,9,0)
(22,11,0)
(5,37,0)
(41,55,0)
(18,24,0)
(7,47,0)
(56,21,0)
(33,38,0)
(45,15,0)
(38,31,0)
(11,22,0)
(25,45,0)
(49,44,0)
(41,12,0)
(13,28,0)
(24,52,0)
(15,27,0)
(55,41,0)
(9,6,0)
(35,22,0)
(39,36,0)
(23,11,0)
(22,6,0)
(48,38,0)
(32,53,0)
(57,12,0)
(46,2,0)
(29,52,0)
(34,38,0)
(16,55,0)
(1,0,0)
(26,3,0)
(53,39,0)
(9,10,0)
(1,38,0)
(39,44,0)
(44,39,0)
(9,52,0)
(52,9,0)
(28,3,0)
(40,46,0)
(54,21,0)
(51,38,0)
(30,0,0)
(52,38,0)
(19,3,0)
(28,38,0)
(3,12,0)
(6,22,0)
(15,45,0)
(0,1,0)
(44,47,0)
(55,3,0)
(36,39,0)
(14,50,0)
(10,9,0)
(42,18,1)
(44,47,1)
(44,52,1)
(24,42,1)
(6,22,1)
(46,40,1)
(21,56,1)
(0,52,1)
(22,11,1)
(15,45,1)
(26,21,1)
(49,32,1)
(53,39,1)
(1,0,1)
(18,52,1)
(47,50,1)
(56,54,1)
(8,28,1)
(0,20,1)
(21,53,1)
(50,14,1)
(3,53,1)
(11,23,1)
(39,36,1)
(9,6,1)
(30,4,1)
(14,7,1)
(52,9,1)
(17,16,1)
(29,43,1)
(19,26,1)
(8,46,1)
(28,52,1)
(13,41,1)
(45,25,1)
(3,19,1)
(16,57,1)
(57,3,1)
(25,24,1)
(41,55,1)
(55,3,1)
(32,1,1)
(4,15,1)
(54,53,1)
(35,29,1)
(28,3,1)
(28,13,1)
(40,43,1)
(24,52,1)
(9,10,1)
(39,44,1)
(55,17,1)
(23,35,1)
(13,21,1)
(4,24,1)
(7,49,1)
(20,30,1)
(7,43,2)
(25,24,2)
(24,43,2)
(49,43,2)
(55,3,2)
(39,43,2)
(9,10,2)
(39,36,2)
(41,21,2)
(3,21,2)
(4,43,2)
(21,43,2)
(18,43,2)
(22,43,2)
(44,47,2)
(29,43,2)
(35,43,2)
(28,43,2)
(22,11,2)
(0,52,2)
(15,45,2)
(1,43,2)
(50,43,2)
(23,43,2)
(20,43,2)
(41,55,2)
(16,21,2)
(39,44,2)
(52,9,2)
(40,43,2)
(15,24,2)
(28,3,2)
(56,43,2)
(19,21,2)
(32,43,2)
(3,53,2)
(1,0,2)
(26,21,2)
(44,43,2)
(21,53,2)
(11,43,2)
(14,43,2)
(42,43,2)
(13,43,2)
(28,52,2)
(53,39,2)
(47,43,2)
(54,43,2)
(30,43,2)
(6,43,2)
(45,24,2)
(57,21,2)
(46,43,2)
(9,43,2)
(9,6,2)
(55,21,2)
(47,50,2)
(0,43,2)
(53,43,2)
(6,22,2)
(44,52,2)
(52,43,2)
(17,21,2)
(24,52,2)
-----------------------------------
(0,data[0])
(1,printLongLongLine(data[0])
(2,)
(3,data = tmpData)
(4,L)
(5,if(staticReturnsFalse()
(6,malloc(100*sizeof(int64_t)
(7,130000)
(8,RET)
(9,(int64_t *)
(10,int64_t *)
(11,sizeof(int64_t)
(12,)
(13,data)
(14,int64_t)
(15,exit(-1)
(16,data)
(17,0)
(18,data)
(19,tmpData)
(20,0)
(21,tmpData != NULL)
(22,100*sizeof(int64_t)
(23,int64_t)
(24,data == NULL)
(25,1)
(26,data)
(27,)
(28,free(data)
(29,data)
(30,data)
(31,)
(32,tmpData)
(33,if (tmpData != NULL)
(34,if (data == NULL)
(35,100)
(36,int64_t *)
(37,)
(38,)
(39,(int64_t *)
(40,"Benign, fixed string")
(41,printLongLongLine(data[0])
(42,NULL)
(43,staticReturnsFalse()
(44,realloc(data, (130000)
(45,-1)
(46,printLine("Benign, fixed string")
(47,(130000)
(48,data)
(49,data)
(50,sizeof(int64_t)
(51,tmpData)
(52,* data = (int64_t *)
(53,tmpData = (int64_t *)
(54,tmpData)
(55,data[0])
(56,NULL)
(57,L)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^