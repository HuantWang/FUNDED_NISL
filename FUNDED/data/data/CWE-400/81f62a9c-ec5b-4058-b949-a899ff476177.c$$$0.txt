-----label-----
1
-----code-----
static int
sa_upcall0(struct lwp *l, int type, struct lwp *event, struct lwp *interrupted,
    size_t argsize, void *arg, struct sadata_upcall *sau)
{

	KDASSERT((event == NULL) || (event != interrupted));

	sau->sau_flags = 0;
	sau->sau_arg = 0;

	if (type & SA_UPCALL_DEFER_EVENT) {
		sau->sau_event.ss_deferred.ss_lwp = event;
		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;
	} else
		sa_upcall_getstate(&sau->sau_event, event);
	if (type & SA_UPCALL_DEFER_INTERRUPTED) {
		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;
		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;
	} else
		sa_upcall_getstate(&sau->sau_interrupted, interrupted);

	sau->sau_type = type & SA_UPCALL_TYPE_MASK;
	sau->sau_argsize = argsize;
	sau->sau_arg = arg;

	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
22,23
24,25
24,26
27,28
27,29
28,29
30,31
32,33
32,34
34,35
34,36
37,38
37,39
38,39
40,41
40,42
43,44
43,45
43,46
43,47
43,48
43,49
43,50
43,51
43,52
44,45
45,46
45,47
46,47
48,49
48,50
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
63,65
64,65
68,69
69,70
69,71
70,71
70,72
71,72
75,76
75,77
75,78
76,77
76,78
77,78
79,80
81,82
81,83
82,83
83,84
83,85
84,85
84,86
85,86
85,87
86,87
86,88
87,88
92,93
94,95
95,96
95,97
96,97
96,98
97,98
100,101
102,103
103,104
103,105
103,106
104,105
106,107
107,108
107,109
108,109
111,112
113,114
113,115
113,116
114,115
114,116
115,116
117,118
119,120
119,121
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
124,126
125,126
130,131
132,133
133,134
133,135
134,135
134,136
135,136
138,139
140,141
141,142
141,143
141,144
142,143
144,145
145,146
145,147
146,147
149,150
151,152
152,153
152,154
153,154
153,155
154,155
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
176,177
178,179
179,180
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,23,25,26,29,31,33,35,36,39,41,42,47,52,54,58,60,65,66,67,72,73,74,78,80,88,89,90,91,93,98,99,101,105,109,110,112,116,118,126,127,128,129,131,136,137,139,143,147,148,150,155,156,159,161,166,167,169,174,175,177,180
-----computeFrom-----
48,49
48,50
50,51
50,52
56,57
56,58
62,63
62,64
69,70
69,71
76,77
76,78
83,84
83,85
95,96
95,97
114,115
114,116
121,122
121,123
133,134
133,135
152,153
152,154
157,158
157,159
163,164
163,165
171,172
171,173
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intsa_upcall0(struct lwp *l, int type, struct lwp *event, struct lwp *interrupted,    size_t argsize, void *arg, struct sadata_upcall *sau){	KDASSERT((event == NULL) || (event != interrupted));	sau->sau_flags = 0;	sau->sau_arg = 0;	if (type & SA_UPCALL_DEFER_EVENT) {		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	} else		sa_upcall_getstate(&sau->sau_event, event);	if (type & SA_UPCALL_DEFER_INTERRUPTED) {		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	} else		sa_upcall_getstate(&sau->sau_interrupted, interrupted);	sau->sau_type = type & SA_UPCALL_TYPE_MASK;	sau->sau_argsize = argsize;	sau->sau_arg = arg;	return (0);}
static int
sa_upcall0(struct lwp *l, int type, struct lwp *event, struct lwp *interrupted,    size_t argsize, void *arg, struct sadata_upcall *sau)
sa_upcall0
struct lwp *l
struct lwp
lwp
*l
*
l
int type
int
type
type
struct lwp *event
struct lwp
lwp
*event
*
event
struct lwp *interrupted
struct lwp
lwp
*interrupted
*
interrupted
size_t argsize
size_t
size_t
argsize
argsize
void *arg
void
*arg
*
arg
struct sadata_upcall *sau
struct sadata_upcall
sadata_upcall
*sau
*
sau
{	KDASSERT((event == NULL) || (event != interrupted));	sau->sau_flags = 0;	sau->sau_arg = 0;	if (type & SA_UPCALL_DEFER_EVENT) {		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	} else		sa_upcall_getstate(&sau->sau_event, event);	if (type & SA_UPCALL_DEFER_INTERRUPTED) {		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	} else		sa_upcall_getstate(&sau->sau_interrupted, interrupted);	sau->sau_type = type & SA_UPCALL_TYPE_MASK;	sau->sau_argsize = argsize;	sau->sau_arg = arg;	return (0);}
KDASSERT((event == NULL) || (event != interrupted));
KDASSERT((event == NULL) || (event != interrupted))
KDASSERT
KDASSERT
(event == NULL) || (event != interrupted)
(event == NULL)
event == NULL
event
event
NULL
NULL
(event != interrupted)
event != interrupted
event
event
interrupted
interrupted
sau->sau_flags = 0;
sau->sau_flags = 0
sau->sau_flags
sau
sau
sau_flags
0
sau->sau_arg = 0;
sau->sau_arg = 0
sau->sau_arg
sau
sau
sau_arg
0
if (type & SA_UPCALL_DEFER_EVENT) {		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	} else		sa_upcall_getstate(&sau->sau_event, event);
type & SA_UPCALL_DEFER_EVENT
type
type
SA_UPCALL_DEFER_EVENT
SA_UPCALL_DEFER_EVENT
{		sau->sau_event.ss_deferred.ss_lwp = event;		sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;	}
sau->sau_event.ss_deferred.ss_lwp = event;
sau->sau_event.ss_deferred.ss_lwp = event
sau->sau_event.ss_deferred.ss_lwp
sau->sau_event.ss_deferred
sau->sau_event
sau
sau
sau_event
ss_deferred
ss_lwp
event
event
sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT;
sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT
sau->sau_flags
sau
sau
sau_flags
SAU_FLAG_DEFERRED_EVENT
SAU_FLAG_DEFERRED_EVENT
sa_upcall_getstate(&sau->sau_event, event);
sa_upcall_getstate(&sau->sau_event, event)
sa_upcall_getstate
sa_upcall_getstate
&sau->sau_event
sau->sau_event
sau
sau
sau_event
event
event
if (type & SA_UPCALL_DEFER_INTERRUPTED) {		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	} else		sa_upcall_getstate(&sau->sau_interrupted, interrupted);
type & SA_UPCALL_DEFER_INTERRUPTED
type
type
SA_UPCALL_DEFER_INTERRUPTED
SA_UPCALL_DEFER_INTERRUPTED
{		sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;		sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;	}
sau->sau_interrupted.ss_deferred.ss_lwp = interrupted;
sau->sau_interrupted.ss_deferred.ss_lwp = interrupted
sau->sau_interrupted.ss_deferred.ss_lwp
sau->sau_interrupted.ss_deferred
sau->sau_interrupted
sau
sau
sau_interrupted
ss_deferred
ss_lwp
interrupted
interrupted
sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED;
sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED
sau->sau_flags
sau
sau
sau_flags
SAU_FLAG_DEFERRED_INTERRUPTED
SAU_FLAG_DEFERRED_INTERRUPTED
sa_upcall_getstate(&sau->sau_interrupted, interrupted);
sa_upcall_getstate(&sau->sau_interrupted, interrupted)
sa_upcall_getstate
sa_upcall_getstate
&sau->sau_interrupted
sau->sau_interrupted
sau
sau
sau_interrupted
interrupted
interrupted
sau->sau_type = type & SA_UPCALL_TYPE_MASK;
sau->sau_type = type & SA_UPCALL_TYPE_MASK
sau->sau_type
sau
sau
sau_type
type & SA_UPCALL_TYPE_MASK
type
type
SA_UPCALL_TYPE_MASK
SA_UPCALL_TYPE_MASK
sau->sau_argsize = argsize;
sau->sau_argsize = argsize
sau->sau_argsize
sau
sau
sau_argsize
argsize
argsize
sau->sau_arg = arg;
sau->sau_arg = arg
sau->sau_arg
sau
sau
sau_arg
arg
arg
return (0);
(0)
0
-----joern-----
(11,45,0)
(53,92,0)
(40,77,0)
(64,4,0)
(7,33,0)
(34,70,0)
(92,56,0)
(83,19,0)
(12,71,0)
(13,76,0)
(61,74,0)
(30,87,0)
(45,5,0)
(11,53,0)
(6,65,0)
(20,43,0)
(82,5,0)
(60,51,0)
(77,5,0)
(11,74,0)
(11,56,0)
(87,6,0)
(49,85,0)
(80,34,0)
(45,69,0)
(35,24,0)
(66,76,0)
(69,9,0)
(7,80,0)
(30,65,0)
(27,33,0)
(43,19,0)
(10,52,0)
(57,30,0)
(4,64,0)
(76,5,0)
(11,43,0)
(11,87,0)
(56,66,0)
(2,48,0)
(35,70,0)
(66,56,0)
(50,10,0)
(53,5,0)
(75,4,0)
(25,16,0)
(49,5,0)
(74,64,0)
(71,5,0)
(0,87,0)
(43,5,0)
(74,5,0)
(14,36,0)
(93,45,0)
(37,34,0)
(86,4,0)
(79,42,0)
(27,85,0)
(36,5,0)
(4,47,0)
(19,51,0)
(34,80,0)
(38,49,0)
(16,87,0)
(62,69,0)
(69,51,0)
(7,70,0)
(18,6,0)
(92,52,0)
(3,71,0)
(44,45,0)
(8,25,0)
(77,30,0)
(78,27,0)
(90,51,0)
(82,48,0)
(58,82,0)
(1,47,0)
(88,51,0)
(73,51,0)
(81,11,0)
(6,70,0)
(19,54,0)
(85,49,0)
(72,42,0)
(22,35,0)
(10,33,0)
(17,49,0)
(64,51,0)
(25,5,0)
(42,47,0)
(11,82,0)
(90,80,0)
(23,56,0)
(84,16,0)
(87,16,0)
(16,25,0)
(28,34,0)
(92,82,0)
(31,76,0)
(29,77,0)
(39,36,0)
(24,35,0)
(94,82,0)
(71,24,0)
(26,25,0)
(68,53,0)
(67,92,0)
(15,7,0)
(56,10,0)
(46,1,0)
(30,82,0)
(89,11,0)
(11,36,0)
(80,7,0)
(85,27,0)
(80,90,0)
(21,74,0)
(11,77,0)
(36,88,0)
(59,7,0)
(92,77,0)
(63,66,0)
(76,66,0)
(48,51,0)
(11,51,0)
(30,36,0)
(24,71,0)
(41,88,0)
(92,36,0)
(92,87,0)
(91,43,0)
(32,1,0)
(55,53,0)
(42,47,1)
(86,75,1)
(44,19,1)
(11,36,1)
(13,42,1)
(34,70,1)
(77,5,1)
(80,7,1)
(30,36,1)
(6,18,1)
(92,87,1)
(27,85,1)
(7,15,1)
(57,77,1)
(85,49,1)
(11,87,1)
(74,5,1)
(11,43,1)
(90,80,1)
(46,88,1)
(30,57,1)
(38,42,1)
(81,11,1)
(88,41,1)
(25,5,1)
(92,36,1)
(21,61,1)
(11,89,1)
(7,70,1)
(11,77,1)
(6,70,1)
(82,58,1)
(19,54,1)
(66,76,1)
(92,56,1)
(1,47,1)
(16,84,1)
(49,17,1)
(7,33,1)
(77,29,1)
(79,30,1)
(50,56,1)
(14,39,1)
(89,69,1)
(27,33,1)
(67,53,1)
(43,5,1)
(11,45,1)
(18,87,1)
(55,68,1)
(74,21,1)
(11,53,1)
(29,40,1)
(64,4,1)
(25,26,1)
(1,32,1)
(35,24,1)
(49,5,1)
(91,64,1)
(80,34,1)
(59,34,1)
(92,77,1)
(45,5,1)
(84,25,1)
(87,0,1)
(79,35,1)
(56,66,1)
(48,2,1)
(11,82,1)
(92,67,1)
(4,47,1)
(53,5,1)
(31,13,1)
(53,55,1)
(92,82,1)
(68,10,1)
(61,27,1)
(61,92,1)
(43,20,1)
(39,48,1)
(66,63,1)
(37,28,1)
(11,56,1)
(3,1,1)
(26,8,1)
(36,14,1)
(69,62,1)
(42,72,1)
(22,24,1)
(8,1,1)
(30,82,1)
(4,86,1)
(15,59,1)
(63,76,1)
(78,85,1)
(23,66,1)
(45,93,1)
(24,71,1)
(93,44,1)
(76,5,1)
(56,23,1)
(35,22,1)
(11,74,1)
(94,90,1)
(82,5,1)
(83,43,1)
(87,16,1)
(19,83,1)
(12,3,1)
(36,5,1)
(76,31,1)
(35,70,1)
(62,45,1)
(71,5,1)
(41,36,1)
(75,74,1)
(58,94,1)
(27,78,1)
(10,33,1)
(20,91,1)
(40,6,1)
(17,38,1)
(69,9,1)
(0,16,1)
(30,87,1)
(34,37,1)
(32,46,1)
(10,50,1)
(2,82,1)
(71,12,1)
(72,79,1)
(16,25,1)
(30,36,2)
(11,74,2)
(11,45,2)
(53,5,2)
(26,1,2)
(27,33,2)
(11,43,2)
(36,5,2)
(11,56,2)
(77,1,2)
(22,1,2)
(45,5,2)
(25,5,2)
(90,80,2)
(67,42,2)
(27,85,2)
(49,42,2)
(66,76,2)
(27,42,2)
(6,70,2)
(64,4,2)
(11,53,2)
(56,66,2)
(84,1,2)
(68,42,2)
(40,1,2)
(42,47,2)
(11,87,2)
(71,5,2)
(85,42,2)
(7,70,2)
(81,11,2)
(80,7,2)
(82,5,2)
(12,1,2)
(92,87,2)
(24,71,2)
(92,36,2)
(31,42,2)
(66,42,2)
(17,42,2)
(69,9,2)
(30,87,2)
(38,42,2)
(85,49,2)
(53,42,2)
(80,34,2)
(76,42,2)
(87,1,2)
(59,34,2)
(11,36,2)
(57,1,2)
(35,70,2)
(92,56,2)
(13,42,2)
(35,1,2)
(92,77,2)
(30,82,2)
(92,42,2)
(43,5,2)
(35,24,2)
(30,1,2)
(92,82,2)
(56,42,2)
(23,42,2)
(77,5,2)
(0,1,2)
(16,25,2)
(87,16,2)
(78,42,2)
(8,1,2)
(10,42,2)
(76,5,2)
(16,1,2)
(11,82,2)
(3,1,2)
(6,1,2)
(55,42,2)
(7,33,2)
(7,34,2)
(63,42,2)
(10,33,2)
(24,1,2)
(19,54,2)
(11,77,2)
(34,70,2)
(18,1,2)
(74,5,2)
(1,47,2)
(4,47,2)
(29,1,2)
(49,5,2)
(15,34,2)
(50,42,2)
(71,1,2)
(25,1,2)
-----------------------------------
(0,ss_lwp)
(1,type & SA_UPCALL_DEFER_EVENT)
(2,0)
(3,sau)
(4,type & SA_UPCALL_TYPE_MASK)
(5,struct sadata_upcall *sau)
(6,sau->sau_event.ss_deferred.ss_lwp = event)
(7,event != interrupted)
(8,sau)
(9,void *arg)
(10,sau->sau_interrupted.ss_deferred.ss_lwp = interrupted)
(11,return (0)
(12,sau_event)
(13,sau)
(14,sau_arg)
(15,interrupted)
(16,sau->sau_event.ss_deferred)
(17,sau_interrupted)
(18,event)
(19,sau->sau_argsize = argsize)
(20,sau_argsize)
(21,sau_type)
(22,event)
(23,ss_lwp)
(24,&sau->sau_event)
(25,sau->sau_event)
(26,sau_event)
(27,sa_upcall_getstate(&sau->sau_interrupted, interrupted)
(28,event)
(29,sau_flags)
(30,sau->sau_flags |= SAU_FLAG_DEFERRED_EVENT)
(31,sau_interrupted)
(32,SA_UPCALL_DEFER_EVENT)
(33,struct lwp *interrupted)
(34,event == NULL)
(35,sa_upcall_getstate(&sau->sau_event, event)
(36,sau->sau_arg)
(37,NULL)
(38,sau)
(39,sau)
(40,sau)
(41,0)
(42,type & SA_UPCALL_DEFER_INTERRUPTED)
(43,sau->sau_argsize)
(44,sau)
(45,sau->sau_arg)
(46,type)
(47,int type)
(48,sau->sau_flags = 0)
(49,sau->sau_interrupted)
(50,interrupted)
(51,)
(52,)
(53,sau->sau_flags)
(54,size_t argsize)
(55,sau_flags)
(56,sau->sau_interrupted.ss_deferred.ss_lwp)
(57,SAU_FLAG_DEFERRED_EVENT)
(58,sau_flags)
(59,event)
(60,if (type & SA_UPCALL_DEFER_INTERRUPTED)
(61,sau)
(62,arg)
(63,ss_deferred)
(64,sau->sau_type = type & SA_UPCALL_TYPE_MASK)
(65,)
(66,sau->sau_interrupted.ss_deferred)
(67,SAU_FLAG_DEFERRED_INTERRUPTED)
(68,sau)
(69,sau->sau_arg = arg)
(70,struct lwp *event)
(71,sau->sau_event)
(72,SA_UPCALL_DEFER_INTERRUPTED)
(73,if (type & SA_UPCALL_DEFER_EVENT)
(74,sau->sau_type)
(75,type)
(76,sau->sau_interrupted)
(77,sau->sau_flags)
(78,interrupted)
(79,type)
(80,(event == NULL)
(81,RET)
(82,sau->sau_flags)
(83,argsize)
(84,ss_deferred)
(85,&sau->sau_interrupted)
(86,SA_UPCALL_TYPE_MASK)
(87,sau->sau_event.ss_deferred.ss_lwp)
(88,sau->sau_arg = 0)
(89,0)
(90,KDASSERT((event == NULL)
(91,sau)
(92,sau->sau_flags |= SAU_FLAG_DEFERRED_INTERRUPTED)
(93,sau_arg)
(94,sau)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^