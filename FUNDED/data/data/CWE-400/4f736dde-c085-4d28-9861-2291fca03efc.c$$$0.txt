-----label-----
0
-----code-----
static void goodG2B2()
{
    twoIntsStruct * data;
    data = NULL;
    if(5==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
55,56
55,57
56,57
56,58
57,58
62,63
63,64
63,65
64,65
66,67
67,68
67,69
68,69
71,72
71,73
72,73
72,74
75,76
-----nextToken-----
2,4,9,11,12,16,18,21,22,27,31,33,36,38,42,43,49,50,51,52,58,59,60,61,65,69,70,73,74,76
-----computeFrom-----
14,15
14,16
20,21
20,22
25,26
25,27
37,38
37,39
45,46
45,47
54,55
54,56
72,73
72,74
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    twoIntsStruct * data;    data = NULL;    if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
5==5
5
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(25,42,0)
(26,39,0)
(32,7,0)
(32,14,0)
(28,7,0)
(9,30,0)
(1,29,0)
(36,29,0)
(13,32,0)
(42,25,0)
(18,4,0)
(38,30,0)
(39,26,0)
(0,30,0)
(4,7,0)
(25,7,0)
(24,22,0)
(10,14,0)
(26,15,0)
(7,25,0)
(37,18,0)
(20,35,0)
(25,15,0)
(19,6,0)
(15,25,0)
(8,29,0)
(4,18,0)
(21,6,0)
(18,19,0)
(9,16,0)
(2,32,0)
(31,21,0)
(27,3,0)
(35,29,0)
(14,32,0)
(41,3,0)
(14,21,0)
(16,9,0)
(16,6,0)
(30,7,0)
(11,4,0)
(33,22,0)
(30,9,0)
(40,35,0)
(5,26,0)
(7,6,0)
(15,26,0)
(17,19,0)
(23,39,0)
(12,4,0)
(27,35,1)
(4,7,1)
(0,38,1)
(24,33,1)
(38,21,1)
(25,42,1)
(17,18,1)
(18,37,1)
(7,25,1)
(32,7,1)
(33,16,1)
(16,9,1)
(23,5,1)
(15,26,1)
(21,31,1)
(12,11,1)
(2,19,1)
(41,27,1)
(19,17,1)
(22,24,1)
(32,13,1)
(39,23,1)
(30,7,1)
(28,3,1)
(4,12,1)
(31,14,1)
(33,3,1)
(3,41,1)
(10,32,1)
(37,4,1)
(13,2,1)
(34,22,1)
(26,39,1)
(30,0,1)
(35,20,1)
(20,40,1)
(14,32,1)
(11,7,1)
(9,30,1)
(5,28,1)
(14,10,1)
(25,15,1)
(18,4,1)
(32,7,2)
(7,25,2)
(12,3,2)
(15,26,2)
(16,9,2)
(9,30,2)
(15,3,2)
(23,3,2)
(37,3,2)
(21,3,2)
(25,3,2)
(30,3,2)
(13,3,2)
(5,3,2)
(16,3,2)
(25,15,2)
(28,3,2)
(11,3,2)
(30,7,2)
(0,3,2)
(4,7,2)
(14,3,2)
(19,3,2)
(39,3,2)
(32,3,2)
(26,39,2)
(4,3,2)
(18,3,2)
(31,3,2)
(26,3,2)
(38,3,2)
(2,3,2)
(25,42,2)
(7,3,2)
(14,32,2)
(10,3,2)
(18,4,2)
(9,3,2)
(17,3,2)
-----------------------------------
(0,0)
(1,if(5==5)
(2,data)
(3,5==5)
(4,data[0])
(5,100)
(6,)
(7,data = (twoIntsStruct *)
(8,data)
(9,&data[0])
(10,intTwo)
(11,data)
(12,0)
(13,0)
(14,data[0].intTwo)
(15,ALLOCA(100*sizeof(twoIntsStruct)
(16,printStructLine(&data[0])
(17,0)
(18,data[0].intOne)
(19,data[0].intOne = 0)
(20,NULL)
(21,data[0].intTwo = 0)
(22,5==5)
(23,twoIntsStruct)
(24,5)
(25,(twoIntsStruct *)
(26,100*sizeof(twoIntsStruct)
(27,5)
(28,data)
(29,)
(30,data[0])
(31,0)
(32,data[0])
(33,5)
(34,RET)
(35,data = NULL)
(36,if(5==5)
(37,intOne)
(38,data)
(39,sizeof(twoIntsStruct)
(40,data)
(41,5)
(42,twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^