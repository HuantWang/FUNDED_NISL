-----label-----
1
-----code-----
static void
reconnect_timeout_handler(struct rtpp_session *sp, struct rtpp_timeout_handler *th)
{
    int t, len;
    struct sockaddr_un remote;

    assert(th->fd != -1 && th->socket_name != NULL && th->connected == 0);

    rtpp_log_ewrite(RTPP_LOG_DBUG, sp->log, "reconnecting timeout socket");
    memset(&remote, '\0', sizeof(remote));
    remote.sun_family = AF_LOCAL;
    strncpy(remote.sun_path, th->socket_name, sizeof(remote.sun_path) - 1);
#if !defined(__linux__) && !defined(__solaris__)
    remote.sun_len = strlen(remote.sun_path);
#endif
    if (connect(th->fd, (struct sockaddr *)&remote, sizeof(remote)) == -1) {
        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket");
    } else {
        th->connected = 1;
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
18,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
37,39
38,39
38,40
39,40
42,43
44,45
44,46
45,46
45,47
46,47
49,50
51,52
51,53
52,53
52,54
53,54
57,58
58,59
58,60
58,61
58,62
59,60
61,62
63,64
63,65
64,65
68,69
69,70
69,71
69,72
69,73
70,71
72,73
73,74
76,77
77,78
78,79
80,81
81,82
81,83
82,83
82,84
83,84
86,87
88,89
89,90
89,91
89,92
89,93
90,91
92,93
92,94
93,94
96,97
96,98
97,98
100,101
100,102
101,102
102,103
103,104
103,105
104,105
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
117,119
118,119
121,122
121,123
121,124
122,123
122,124
123,124
123,125
123,126
123,127
124,125
126,127
126,128
127,128
130,131
130,132
131,132
131,133
132,133
134,135
136,137
137,138
139,140
140,141
141,142
143,144
145,146
146,147
147,148
147,149
147,150
147,151
148,149
150,151
152,153
152,154
153,154
157,158
158,159
159,160
159,161
160,161
160,162
161,162
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,24,28,30,34,40,41,43,47,48,50,54,55,56,60,62,65,66,67,71,74,75,79,84,85,87,91,94,95,98,99,105,106,107,112,113,116,119,120,125,128,129,133,135,138,142,144,149,151,154,155,156,162,163,164
-----computeFrom-----
35,36
35,37
36,37
36,38
37,38
37,39
44,45
44,46
51,52
51,53
81,82
81,83
100,101
100,102
109,110
109,111
122,123
122,124
159,160
159,161
-----guardedBy-----
-----guardedByNegation-----
128,162
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;
-----ast_node-----
static voidreconnect_timeout_handler(struct rtpp_session *sp, struct rtpp_timeout_handler *th){    int t, len;    struct sockaddr_un remote;    assert(th->fd != -1 && th->socket_name != NULL && th->connected == 0);    rtpp_log_ewrite(RTPP_LOG_DBUG, sp->log, "reconnecting timeout socket");    memset(&remote, '\0', sizeof(remote));    remote.sun_family = AF_LOCAL;    strncpy(remote.sun_path, th->socket_name, sizeof(remote.sun_path) - 1);#if !defined(__linux__) && !defined(__solaris__)    remote.sun_len = strlen(remote.sun_path);#endif    if (connect(th->fd, (struct sockaddr *)&remote, sizeof(remote)) == -1) {        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket");    } else {        th->connected = 1;    }}
static void
reconnect_timeout_handler(struct rtpp_session *sp, struct rtpp_timeout_handler *th)
reconnect_timeout_handler
struct rtpp_session *sp
struct rtpp_session
rtpp_session
*sp
*
sp
struct rtpp_timeout_handler *th
struct rtpp_timeout_handler
rtpp_timeout_handler
*th
*
th
{    int t, len;    struct sockaddr_un remote;    assert(th->fd != -1 && th->socket_name != NULL && th->connected == 0);    rtpp_log_ewrite(RTPP_LOG_DBUG, sp->log, "reconnecting timeout socket");    memset(&remote, '\0', sizeof(remote));    remote.sun_family = AF_LOCAL;    strncpy(remote.sun_path, th->socket_name, sizeof(remote.sun_path) - 1);#if !defined(__linux__) && !defined(__solaris__)    remote.sun_len = strlen(remote.sun_path);#endif    if (connect(th->fd, (struct sockaddr *)&remote, sizeof(remote)) == -1) {        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket");    } else {        th->connected = 1;    }}
int t, len;
int t, len;
int
t
t
len
len
struct sockaddr_un remote;
struct sockaddr_un remote;
struct sockaddr_un
sockaddr_un
remote
remote
assert(th->fd != -1 && th->socket_name != NULL && th->connected == 0);
assert(th->fd != -1 && th->socket_name != NULL && th->connected == 0)
assert
assert
th->fd != -1 && th->socket_name != NULL && th->connected == 0
th->fd != -1 && th->socket_name != NULL
th->fd != -1
th->fd
th
th
fd
-1
1
th->socket_name != NULL
th->socket_name
th
th
socket_name
NULL
NULL
th->connected == 0
th->connected
th
th
connected
0
rtpp_log_ewrite(RTPP_LOG_DBUG, sp->log, "reconnecting timeout socket");
rtpp_log_ewrite(RTPP_LOG_DBUG, sp->log, "reconnecting timeout socket")
rtpp_log_ewrite
rtpp_log_ewrite
RTPP_LOG_DBUG
RTPP_LOG_DBUG
sp->log
sp
sp
log
"reconnecting timeout socket"
memset(&remote, '\0', sizeof(remote));
memset(&remote, '\0', sizeof(remote))
memset
memset
&remote
remote
remote
'\0'
sizeof(remote)
(remote)
remote
remote
remote.sun_family = AF_LOCAL;
remote.sun_family = AF_LOCAL
remote.sun_family
remote
remote
sun_family
AF_LOCAL
AF_LOCAL
strncpy(remote.sun_path, th->socket_name, sizeof(remote.sun_path) - 1);
strncpy(remote.sun_path, th->socket_name, sizeof(remote.sun_path) - 1)
strncpy
strncpy
remote.sun_path
remote
remote
sun_path
th->socket_name
th
th
socket_name
sizeof(remote.sun_path) - 1
sizeof(remote.sun_path)
(remote.sun_path)
remote.sun_path
remote
remote
sun_path
1
remote.sun_len = strlen(remote.sun_path);
remote.sun_len = strlen(remote.sun_path)
remote.sun_len
remote
remote
sun_len
strlen(remote.sun_path)
strlen
strlen
remote.sun_path
remote
remote
sun_path
if (connect(th->fd, (struct sockaddr *)&remote, sizeof(remote)) == -1) {        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket");    } else {        th->connected = 1;    }
connect(th->fd, (struct sockaddr *)&remote, sizeof(remote)) == -1
connect(th->fd, (struct sockaddr *)&remote, sizeof(remote))
connect
connect
th->fd
th
th
fd
(struct sockaddr *)&remote
struct sockaddr *
struct sockaddr
sockaddr
*
*
&remote
remote
remote
sizeof(remote)
(remote)
remote
remote
-1
1
{        rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket");    }
rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket");
rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can't connect to timeout socket")
rtpp_log_ewrite
rtpp_log_ewrite
RTPP_LOG_ERR
RTPP_LOG_ERR
sp->log
sp
sp
log
"can't connect to timeout socket"
{        th->connected = 1;    }
th->connected = 1;
th->connected = 1
th->connected
th
th
connected
1
-----joern-----
(65,45,0)
(50,61,0)
(0,87,0)
(69,76,0)
(79,11,0)
(76,79,0)
(5,43,0)
(55,19,0)
(12,56,0)
(29,63,0)
(85,87,0)
(32,11,0)
(56,37,0)
(61,50,0)
(33,14,0)
(1,24,0)
(34,46,0)
(87,44,0)
(14,44,0)
(59,63,0)
(44,14,0)
(26,54,0)
(21,57,0)
(83,67,0)
(73,59,0)
(59,37,0)
(54,26,0)
(9,54,0)
(77,20,0)
(42,72,0)
(42,28,0)
(14,26,0)
(44,87,0)
(89,16,0)
(74,45,0)
(4,48,0)
(40,66,0)
(60,84,0)
(88,60,0)
(2,45,0)
(7,12,0)
(19,63,0)
(62,49,0)
(11,20,0)
(82,21,0)
(74,61,0)
(26,66,0)
(52,56,0)
(63,19,0)
(16,31,0)
(79,70,0)
(55,25,0)
(11,32,0)
(3,54,0)
(80,56,0)
(58,72,0)
(51,67,0)
(27,76,0)
(36,45,0)
(43,37,0)
(23,50,0)
(35,46,0)
(81,28,0)
(46,65,0)
(42,55,0)
(19,12,0)
(22,65,0)
(72,42,0)
(57,45,0)
(49,74,0)
(48,57,0)
(61,74,0)
(12,19,0)
(28,37,0)
(41,6,0)
(79,41,0)
(17,57,0)
(41,79,0)
(68,43,0)
(47,6,0)
(70,79,0)
(15,83,0)
(90,83,0)
(67,45,0)
(57,48,0)
(53,59,0)
(75,70,0)
(38,45,0)
(18,28,0)
(79,76,0)
(56,12,0)
(19,55,0)
(25,45,0)
(63,59,0)
(60,16,0)
(20,11,0)
(55,42,0)
(67,83,0)
(39,16,0)
(8,66,0)
(71,49,0)
(25,55,0)
(57,21,0)
(43,1,0)
(26,45,0)
(54,37,0)
(13,60,0)
(64,45,0)
(30,1,0)
(83,84,0)
(76,37,0)
(26,14,0)
(11,79,0)
(86,50,0)
(6,41,0)
(28,42,0)
(78,67,0)
(66,26,0)
(16,60,0)
(28,37,1)
(70,75,1)
(87,85,1)
(55,19,1)
(60,84,1)
(79,11,1)
(26,14,1)
(61,50,1)
(15,90,1)
(14,44,1)
(66,40,1)
(44,87,1)
(77,76,1)
(14,33,1)
(19,12,1)
(76,69,1)
(4,17,1)
(79,76,1)
(26,66,1)
(83,84,1)
(41,79,1)
(58,28,1)
(42,72,1)
(79,70,1)
(56,52,1)
(67,78,1)
(10,16,1)
(20,77,1)
(57,48,1)
(65,22,1)
(26,54,1)
(57,21,1)
(49,62,1)
(34,57,1)
(16,60,1)
(42,28,1)
(68,5,1)
(40,8,1)
(7,56,1)
(90,51,1)
(55,42,1)
(60,88,1)
(12,7,1)
(10,1,1)
(89,60,1)
(54,9,1)
(3,66,1)
(78,83,1)
(28,18,1)
(18,81,1)
(29,59,1)
(63,59,1)
(30,43,1)
(1,30,1)
(11,32,1)
(63,29,1)
(43,68,1)
(85,0,1)
(46,35,1)
(62,71,1)
(54,37,1)
(72,58,1)
(6,47,1)
(43,37,1)
(52,80,1)
(13,39,1)
(25,55,1)
(12,56,1)
(35,34,1)
(86,49,1)
(11,20,1)
(23,86,1)
(56,37,1)
(9,3,1)
(75,11,1)
(80,63,1)
(76,37,1)
(22,46,1)
(27,74,1)
(33,44,1)
(59,53,1)
(16,89,1)
(67,83,1)
(39,41,1)
(19,63,1)
(8,65,1)
(59,37,1)
(47,79,1)
(17,21,1)
(53,73,1)
(74,61,1)
(71,26,1)
(5,41,1)
(73,42,1)
(0,54,1)
(48,4,1)
(83,15,1)
(51,25,1)
(88,13,1)
(69,27,1)
(21,82,1)
(41,6,1)
(50,23,1)
(82,67,1)
(19,63,2)
(43,37,2)
(11,20,2)
(59,42,2)
(5,41,2)
(79,70,2)
(61,50,2)
(88,41,2)
(43,41,2)
(56,63,2)
(52,63,2)
(54,37,2)
(41,79,2)
(7,63,2)
(83,84,2)
(73,42,2)
(1,41,2)
(76,37,2)
(55,19,2)
(56,37,2)
(57,48,2)
(53,42,2)
(79,11,2)
(67,83,2)
(19,42,2)
(12,56,2)
(12,63,2)
(68,41,2)
(63,42,2)
(16,60,2)
(26,66,2)
(16,41,2)
(30,41,2)
(39,41,2)
(57,21,2)
(80,63,2)
(55,42,2)
(59,37,2)
(79,76,2)
(60,84,2)
(11,32,2)
(14,44,2)
(25,55,2)
(89,41,2)
(13,41,2)
(26,14,2)
(42,72,2)
(29,42,2)
(41,6,2)
(74,61,2)
(60,41,2)
(42,28,2)
(26,54,2)
(28,37,2)
(44,87,2)
(63,59,2)
(19,12,2)
-----------------------------------
(0,remote)
(1,th->connected = 1)
(2,len)
(3,th)
(4,remote)
(5,th)
(6,-1)
(7,0)
(8,remote)
(9,socket_name)
(10,RET)
(11,(struct sockaddr *)
(12,th->connected == 0)
(13,sp)
(14,sizeof(remote.sun_path)
(15,log)
(16,rtpp_log_ewrite(RTPP_LOG_ERR, sp->log, "can\'t connect to timeout socket")
(17,\'\\0\')
(18,fd)
(19,th->socket_name != NULL && th->connected == 0)
(20,&remote)
(21,&remote)
(22,AF_LOCAL)
(23,sun_path)
(24,)
(25,assert(th->fd != -1 && th->socket_name != NULL && th->connected == 0)
(26,strncpy(remote.sun_path, th->socket_name, sizeof(remote.sun_path)
(27,th)
(28,th->fd)
(29,NULL)
(30,1)
(31,)
(32,struct sockaddr *)
(33,1)
(34,remote)
(35,sun_family)
(36,remote)
(37,struct rtpp_timeout_handler *th)
(38,t)
(39,RTPP_LOG_ERR)
(40,sun_path)
(41,connect(th->fd, (struct sockaddr *)
(42,th->fd != -1)
(43,th->connected)
(44,sizeof(remote.sun_path)
(45,)
(46,remote.sun_family)
(47,1)
(48,sizeof(remote)
(49,remote.sun_len)
(50,remote.sun_path)
(51,RTPP_LOG_DBUG)
(52,connected)
(53,socket_name)
(54,th->socket_name)
(55,th->fd != -1 && th->socket_name != NULL && th->connected == 0)
(56,th->connected)
(57,memset(&remote, \'\\0\', sizeof(remote)
(58,1)
(59,th->socket_name)
(60,sp->log)
(61,strlen(remote.sun_path)
(62,sun_len)
(63,th->socket_name != NULL)
(64,if (connect(th->fd, (struct sockaddr *)
(65,remote.sun_family = AF_LOCAL)
(66,remote.sun_path)
(67,rtpp_log_ewrite(RTPP_LOG_DBUG, sp->log, "reconnecting timeout socket")
(68,connected)
(69,fd)
(70,sizeof(remote)
(71,remote)
(72,-1)
(73,th)
(74,remote.sun_len = strlen(remote.sun_path)
(75,remote)
(76,th->fd)
(77,remote)
(78,"reconnecting timeout socket")
(79,connect(th->fd, (struct sockaddr *)
(80,th)
(81,th)
(82,remote)
(83,sp->log)
(84,struct rtpp_session *sp)
(85,sun_path)
(86,remote)
(87,remote.sun_path)
(88,log)
(89,"can\'t connect to timeout socket")
(90,sp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^