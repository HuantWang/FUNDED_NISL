-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
23,24
23,25
24,25
29,30
30,31
30,32
31,32
35,36
35,37
37,38
37,39
37,40
37,41
37,42
37,43
38,39
40,41
40,42
41,42
42,43
42,44
44,45
44,46
47,48
47,49
47,50
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
56,59
56,60
56,61
57,58
58,59
58,60
59,60
61,62
61,63
62,63
62,64
64,65
66,67
66,68
67,68
69,70
69,71
70,71
72,73
73,74
73,75
76,77
76,78
77,78
77,79
78,79
80,81
82,83
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
111,112
111,113
112,113
117,118
118,119
118,120
119,120
-----nextToken-----
2,4,9,11,15,16,18,21,25,26,27,28,32,33,34,36,39,43,45,46,50,53,55,60,63,65,68,71,74,75,79,81,86,88,92,94,96,100,102,106,108,113,114,115,116,120,121,122
-----computeFrom-----
13,14
13,15
23,24
23,25
48,49
48,50
58,59
58,60
69,70
69,71
77,78
77,79
-----guardedBy-----
55,96
50,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Use a relatively small number for memory allocation */        data = 20;        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = 20;
data = 20
data
data
20
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(11,39,0)
(47,31,0)
(4,35,0)
(13,35,0)
(23,0,0)
(30,42,0)
(10,12,0)
(47,51,0)
(6,35,0)
(37,60,0)
(29,49,0)
(51,55,0)
(55,11,0)
(22,31,0)
(1,47,0)
(28,51,0)
(2,35,0)
(45,5,0)
(51,47,0)
(60,16,0)
(22,47,0)
(11,33,0)
(17,25,0)
(19,33,0)
(11,4,0)
(48,49,0)
(59,31,0)
(42,30,0)
(27,39,0)
(36,35,0)
(57,41,0)
(0,31,0)
(0,47,0)
(14,33,0)
(49,4,0)
(52,30,0)
(18,5,0)
(25,12,0)
(26,4,0)
(56,12,0)
(61,11,0)
(46,22,0)
(49,33,0)
(54,5,0)
(8,50,0)
(40,29,0)
(39,11,0)
(55,51,0)
(50,31,0)
(20,50,0)
(11,55,0)
(53,12,0)
(15,12,0)
(21,4,0)
(58,12,0)
(7,35,0)
(24,56,0)
(38,36,0)
(42,43,0)
(41,47,0)
(33,5,0)
(3,41,0)
(32,56,0)
(51,28,0)
(49,29,0)
(50,47,0)
(21,44,1)
(30,52,1)
(40,48,1)
(41,57,1)
(55,11,1)
(26,21,1)
(61,1,1)
(47,51,1)
(11,39,1)
(25,17,1)
(48,9,1)
(20,8,1)
(17,9,1)
(41,47,1)
(9,13,1)
(13,36,1)
(50,20,1)
(36,38,1)
(58,22,1)
(0,23,1)
(22,47,1)
(44,33,1)
(11,33,1)
(42,30,1)
(8,41,1)
(37,49,1)
(27,61,1)
(39,27,1)
(3,47,1)
(50,47,1)
(22,46,1)
(60,37,1)
(46,0,1)
(49,4,1)
(23,50,1)
(19,14,1)
(58,60,1)
(57,3,1)
(49,33,1)
(9,6,1)
(34,58,1)
(15,25,1)
(8,42,1)
(52,41,1)
(1,49,1)
(34,15,1)
(11,4,1)
(6,4,1)
(4,26,1)
(38,44,1)
(29,40,1)
(51,28,1)
(0,47,1)
(33,19,1)
(49,29,1)
(51,55,1)
(40,9,2)
(20,49,2)
(23,49,2)
(4,44,2)
(1,49,2)
(11,39,2)
(41,47,2)
(25,9,2)
(8,49,2)
(13,44,2)
(38,44,2)
(48,9,2)
(29,9,2)
(42,30,2)
(27,49,2)
(15,9,2)
(22,49,2)
(30,41,2)
(58,9,2)
(55,49,2)
(47,49,2)
(0,49,2)
(60,49,2)
(41,49,2)
(11,49,2)
(46,49,2)
(50,47,2)
(11,33,2)
(51,49,2)
(61,49,2)
(21,44,2)
(22,47,2)
(17,9,2)
(39,49,2)
(11,4,2)
(36,44,2)
(26,44,2)
(51,55,2)
(49,33,2)
(3,49,2)
(57,49,2)
(42,41,2)
(47,51,2)
(37,49,2)
(51,28,2)
(52,41,2)
(49,9,2)
(49,29,2)
(0,47,2)
(6,44,2)
(50,49,2)
(55,11,2)
(49,4,2)
-----------------------------------
(0,printLine(myString)
(1,myString)
(2,default:)
(3,myString)
(4,data = 20)
(5,)
(6,break;)
(7,case 6:)
(8,myString)
(9,7)
(10,case 7:)
(11,data*sizeof(char)
(12,)
(13,break;)
(14,data)
(15,break;)
(16,)
(17,"Benign, fixed string")
(18,switch(6)
(19,0)
(20,HELLO_STRING)
(21,data)
(22,free(myString)
(23,myString)
(24,if (data > strlen(HELLO_STRING)
(25,printLine("Benign, fixed string")
(26,20)
(27,char)
(28,char *)
(29,strlen(HELLO_STRING)
(30,-1)
(31,)
(32,myString)
(33,data = 0)
(34,RET)
(35,)
(36,printLine("Benign, fixed string")
(37,"Input is less than the length of the source string")
(38,"Benign, fixed string")
(39,sizeof(char)
(40,HELLO_STRING)
(41,myString == NULL)
(42,exit(-1)
(43,)
(44,6)
(45,data)
(46,myString)
(47,myString = (char *)
(48,data)
(49,data > strlen(HELLO_STRING)
(50,strcpy(myString, HELLO_STRING)
(51,(char *)
(52,1)
(53,default:)
(54,switch(7)
(55,malloc(data*sizeof(char)
(56,)
(57,NULL)
(58,break;)
(59,if (myString == NULL)
(60,printLine("Input is less than the length of the source string")
(61,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^