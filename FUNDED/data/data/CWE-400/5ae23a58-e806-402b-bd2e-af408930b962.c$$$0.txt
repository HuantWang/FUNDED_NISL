-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__listen_socket_fwrite_17_bad()
{
    int i,j;
    int count;
    /* Initialize count */
    count = -1;
    for(i = 0; i < 1; i++)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET listenSocket = INVALID_SOCKET;
            SOCKET acceptSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a listen socket */
                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (listenSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = INADDR_ANY;
                service.sin_port = htons(TCP_PORT);
                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)
                {
                    break;
                }
                acceptSocket = accept(listenSocket, NULL, NULL);
                if (acceptSocket == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed */
                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (listenSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(listenSocket);
            }
            if (acceptSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(acceptSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    for(j = 0; j < 1; j++)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
18,19
19,20
19,21
20,21
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
38,44
38,45
38,46
39,40
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
51,52
51,53
52,53
54,55
54,56
56,57
57,58
59,60
60,61
60,62
61,62
63,64
63,65
65,66
66,67
68,69
69,70
69,71
71,72
71,73
73,74
74,75
76,77
76,78
77,78
77,79
77,80
77,81
77,82
77,83
77,84
77,85
77,86
77,87
77,88
77,89
77,90
77,91
78,79
79,80
79,81
80,81
82,83
82,84
82,85
82,86
83,84
85,86
87,88
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
99,100
100,101
100,102
100,103
100,104
101,102
103,104
104,105
107,108
108,109
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
119,120
120,121
120,122
121,122
121,123
122,123
122,124
123,124
127,128
129,130
130,131
130,132
131,132
131,133
132,133
135,136
135,137
136,137
138,139
140,141
140,142
141,142
141,143
142,143
142,144
142,145
142,146
143,144
145,146
147,148
147,149
148,149
148,150
149,150
151,152
153,154
154,155
156,157
157,158
158,159
160,161
162,163
164,165
164,166
165,166
165,167
166,167
166,168
166,169
167,168
169,170
171,172
173,174
175,176
177,178
178,179
178,180
179,180
181,182
181,183
181,184
181,185
182,183
184,185
186,187
188,189
190,191
190,192
191,192
191,193
192,193
194,195
196,197
198,199
199,200
199,201
200,201
202,203
202,204
202,205
202,206
202,207
203,204
205,206
207,208
209,210
209,211
210,211
214,215
214,216
215,216
215,217
216,217
216,218
217,218
219,220
221,222
221,223
222,223
225,226
227,228
228,229
228,230
229,230
229,231
230,231
232,233
235,236
236,237
236,238
237,238
239,240
239,241
240,241
242,243
245,246
245,247
246,247
246,248
247,248
249,250
251,252
252,253
253,254
253,255
254,255
256,257
258,259
258,260
259,260
259,261
260,261
262,263
264,265
265,266
266,267
266,268
267,268
269,270
271,272
271,273
271,274
271,275
272,273
273,274
273,275
274,275
277,278
277,279
278,279
281,282
282,283
284,285
285,286
285,287
285,288
285,289
285,290
285,291
285,292
286,287
287,288
287,289
288,289
290,291
290,292
292,293
294,295
295,296
295,297
296,297
298,299
298,300
298,301
301,302
302,303
304,305
305,306
305,307
307,308
307,309
307,310
310,311
312,313
313,314
313,315
314,315
316,317
316,318
316,319
317,318
319,320
322,323
322,324
323,324
323,325
324,325
326,327
328,329
329,330
330,331
330,332
331,332
334,335
334,336
334,337
334,338
335,336
336,337
336,338
337,338
340,341
340,342
341,342
343,344
343,345
344,345
344,346
345,346
348,349
350,351
351,352
353,354
354,355
354,356
355,356
355,357
356,357
356,358
357,358
359,360
361,362
361,363
361,364
361,365
361,366
362,363
364,365
366,367
367,368
367,369
370,371
370,372
371,372
373,374
375,376
377,378
378,379
379,380
379,381
380,381
383,384
383,385
384,385
386,387
387,388
388,389
388,390
389,390
391,392
-----nextToken-----
2,4,8,10,12,15,17,21,23,28,29,32,33,36,41,43,47,49,53,55,58,62,64,67,70,72,75,81,84,86,88,90,94,96,98,102,105,106,110,115,116,118,124,125,126,128,133,134,137,139,144,146,150,152,155,159,161,163,168,170,172,174,176,180,183,185,187,189,193,195,197,201,204,206,208,211,212,213,218,220,223,224,226,231,233,234,238,241,243,244,248,250,255,257,261,263,268,270,275,276,279,280,283,289,291,293,297,299,300,303,306,308,309,311,315,318,320,321,325,327,332,333,338,339,342,346,347,349,352,358,360,363,365,368,369,372,374,376,381,382,385,390,392
-----computeFrom-----
19,20
19,21
26,27
26,28
30,31
30,32
79,80
79,81
92,93
92,94
112,113
112,114
120,121
120,122
130,131
130,132
141,142
141,143
165,166
165,167
178,179
178,180
191,192
191,193
199,200
199,201
209,210
209,211
215,216
215,217
216,217
216,218
221,222
221,223
228,229
228,230
236,237
236,238
246,247
246,248
259,260
259,261
273,274
273,275
277,278
277,279
313,314
313,315
323,324
323,325
336,337
336,338
340,341
340,342
355,356
355,357
-----guardedBy-----
248,257
261,270
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__listen_socket_fwrite_17_bad(){    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__listen_socket_fwrite_17_bad()
CWE400_Resource_Exhaustion__listen_socket_fwrite_17_bad
{    int i,j;    int count;    /* Initialize count */    count = -1;    for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int i,j;
int i,j;
int
i
i
j
j
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
for(i = 0; i < 1; i++)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET listenSocket = INVALID_SOCKET;            SOCKET acceptSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }            if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET listenSocket = INVALID_SOCKET;
SOCKET listenSocket = INVALID_SOCKET;
SOCKET
SOCKET
listenSocket = INVALID_SOCKET
listenSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET acceptSocket = INVALID_SOCKET;
SOCKET
SOCKET
acceptSocket = INVALID_SOCKET
acceptSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a listen socket */                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (listenSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = INADDR_ANY;                service.sin_port = htons(TCP_PORT);                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }                acceptSocket = accept(listenSocket, NULL, NULL);                if (acceptSocket == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed */                recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
listenSocket
listenSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (listenSocket == INVALID_SOCKET)                {                    break;                }
listenSocket == INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = INADDR_ANY;
service.sin_addr.s_addr = INADDR_ANY
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
INADDR_ANY
INADDR_ANY
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
bind(listenSocket, (struct sockaddr*)&service, sizeof(service))
bind
bind
listenSocket
listenSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)                {                    break;                }
listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR
listen(listenSocket, LISTEN_BACKLOG)
listen
listen
listenSocket
listenSocket
LISTEN_BACKLOG
LISTEN_BACKLOG
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
acceptSocket = accept(listenSocket, NULL, NULL);
acceptSocket = accept(listenSocket, NULL, NULL)
acceptSocket
acceptSocket
accept(listenSocket, NULL, NULL)
accept
accept
listenSocket
listenSocket
NULL
NULL
NULL
NULL
if (acceptSocket == SOCKET_ERROR)                {                    break;                }
acceptSocket == SOCKET_ERROR
acceptSocket
acceptSocket
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
acceptSocket
acceptSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (listenSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(listenSocket);            }
listenSocket != INVALID_SOCKET
listenSocket
listenSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(listenSocket);            }
CLOSE_SOCKET(listenSocket);
CLOSE_SOCKET(listenSocket)
CLOSE_SOCKET
CLOSE_SOCKET
listenSocket
listenSocket
if (acceptSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(acceptSocket);            }
acceptSocket != INVALID_SOCKET
acceptSocket
acceptSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(acceptSocket);            }
CLOSE_SOCKET(acceptSocket);
CLOSE_SOCKET(acceptSocket)
CLOSE_SOCKET
CLOSE_SOCKET
acceptSocket
acceptSocket
for(j = 0; j < 1; j++)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(118,168,0)
(24,4,0)
(144,36,0)
(78,195,0)
(211,108,0)
(217,177,0)
(104,163,0)
(84,90,0)
(65,183,0)
(44,1,0)
(224,82,0)
(202,162,0)
(24,108,0)
(105,20,0)
(150,145,0)
(7,39,0)
(76,0,0)
(69,39,0)
(98,0,0)
(105,189,0)
(29,162,0)
(58,0,0)
(80,158,0)
(162,35,0)
(36,189,0)
(69,118,0)
(56,74,0)
(134,82,0)
(57,89,0)
(91,66,0)
(157,185,0)
(34,5,0)
(97,225,0)
(160,38,0)
(119,155,0)
(77,135,0)
(185,189,0)
(114,169,0)
(96,222,0)
(52,105,0)
(195,0,0)
(81,15,0)
(71,152,0)
(230,149,0)
(38,62,0)
(180,66,0)
(169,108,0)
(43,37,0)
(123,105,0)
(52,179,0)
(59,162,0)
(105,123,0)
(72,38,0)
(15,108,0)
(39,190,0)
(50,213,0)
(179,52,0)
(227,225,0)
(161,169,0)
(12,69,0)
(184,82,0)
(196,43,0)
(133,180,0)
(219,227,0)
(220,175,0)
(107,190,0)
(51,33,0)
(68,179,0)
(193,205,0)
(27,90,0)
(33,177,0)
(189,108,0)
(53,185,0)
(5,189,0)
(93,156,0)
(197,96,0)
(228,145,0)
(209,161,0)
(201,20,0)
(135,98,0)
(14,0,0)
(80,183,0)
(155,225,0)
(106,180,0)
(64,180,0)
(118,69,0)
(168,118,0)
(180,169,0)
(194,192,0)
(173,89,0)
(124,56,0)
(83,98,0)
(32,108,0)
(132,69,0)
(1,30,0)
(90,216,0)
(231,162,0)
(216,108,0)
(142,42,0)
(100,111,0)
(122,0,0)
(41,180,0)
(145,189,0)
(69,132,0)
(45,158,0)
(164,0,0)
(222,96,0)
(171,80,0)
(109,224,0)
(87,120,0)
(145,82,0)
(188,66,0)
(130,69,0)
(190,39,0)
(126,69,0)
(198,0,0)
(181,149,0)
(94,186,0)
(188,79,0)
(117,189,0)
(22,24,0)
(147,39,0)
(208,98,0)
(154,136,0)
(101,37,0)
(86,108,0)
(146,108,0)
(80,171,0)
(66,180,0)
(49,152,0)
(6,114,0)
(62,38,0)
(38,189,0)
(3,177,0)
(215,55,0)
(87,39,0)
(40,5,0)
(151,205,0)
(21,0,0)
(67,162,0)
(170,168,0)
(105,52,0)
(221,0,0)
(46,74,0)
(115,154,0)
(13,225,0)
(187,108,0)
(75,24,0)
(30,152,0)
(92,213,0)
(114,98,0)
(54,146,0)
(121,175,0)
(174,126,0)
(42,10,0)
(232,171,0)
(203,108,0)
(169,36,0)
(36,169,0)
(113,105,0)
(191,62,0)
(226,56,0)
(82,0,0)
(149,15,0)
(172,79,0)
(143,41,0)
(31,5,0)
(79,108,0)
(135,169,0)
(110,213,0)
(222,108,0)
(26,108,0)
(175,162,0)
(190,175,0)
(52,73,0)
(183,80,0)
(199,162,0)
(158,80,0)
(73,52,0)
(103,2,0)
(206,29,0)
(61,74,0)
(224,233,0)
(85,0,0)
(141,108,0)
(205,162,0)
(152,66,0)
(102,74,0)
(152,30,0)
(63,87,0)
(210,4,0)
(42,37,0)
(20,105,0)
(37,43,0)
(42,142,0)
(0,166,0)
(189,5,0)
(95,148,0)
(182,75,0)
(200,169,0)
(146,186,0)
(149,230,0)
(178,188,0)
(17,18,0)
(42,146,0)
(159,99,0)
(30,1,0)
(8,29,0)
(112,162,0)
(186,146,0)
(9,203,0)
(214,132,0)
(10,42,0)
(138,36,0)
(135,137,0)
(180,41,0)
(223,1,0)
(165,41,0)
(69,126,0)
(116,188,0)
(39,162,0)
(89,222,0)
(28,213,0)
(128,183,0)
(218,190,0)
(88,0,0)
(125,213,0)
(23,155,0)
(1,66,0)
(129,230,0)
(229,114,0)
(139,147,0)
(11,142,0)
(176,147,0)
(224,189,0)
(37,213,0)
(142,177,0)
(47,42,0)
(25,0,0)
(48,102,0)
(16,230,0)
(24,75,0)
(212,195,0)
(19,123,0)
(70,194,0)
(4,24,0)
(140,203,0)
(127,161,0)
(66,108,0)
(131,36,0)
(167,216,0)
(224,82,1)
(228,17,1)
(69,39,1)
(40,34,1)
(33,177,1)
(184,195,1)
(23,227,1)
(71,1,1)
(143,165,1)
(11,33,1)
(15,81,1)
(118,168,1)
(165,64,1)
(212,56,1)
(54,79,1)
(117,203,1)
(109,145,1)
(20,201,1)
(228,95,1)
(31,117,1)
(180,133,1)
(38,189,1)
(195,78,1)
(159,62,1)
(121,220,1)
(104,158,1)
(1,66,1)
(38,72,1)
(185,53,1)
(113,222,1)
(224,189,1)
(149,181,1)
(130,126,1)
(94,54,1)
(24,75,1)
(6,229,1)
(51,118,1)
(154,115,1)
(147,39,1)
(227,219,1)
(93,20,1)
(97,13,1)
(190,218,1)
(228,100,1)
(157,189,1)
(138,144,1)
(135,98,1)
(189,5,1)
(229,145,1)
(78,212,1)
(158,45,1)
(176,139,1)
(220,29,1)
(205,193,1)
(206,8,1)
(171,232,1)
(48,153,1)
(119,23,1)
(150,228,1)
(201,105,1)
(167,90,1)
(228,204,1)
(230,16,1)
(68,113,1)
(72,160,1)
(181,230,1)
(132,214,1)
(34,31,1)
(9,140,1)
(225,97,1)
(42,146,1)
(48,103,1)
(229,224,1)
(16,129,1)
(56,226,1)
(114,6,1)
(226,124,1)
(155,119,1)
(124,102,1)
(98,208,1)
(135,169,1)
(182,185,1)
(87,39,1)
(30,1,1)
(114,98,1)
(115,147,1)
(52,73,1)
(155,225,1)
(65,128,1)
(52,179,1)
(12,168,1)
(200,62,1)
(228,159,1)
(133,41,1)
(140,158,1)
(44,66,1)
(147,176,1)
(152,66,1)
(114,169,1)
(42,37,1)
(3,154,1)
(81,149,1)
(69,132,1)
(197,89,1)
(27,84,1)
(102,48,1)
(61,37,1)
(11,177,1)
(80,171,1)
(22,75,1)
(170,142,1)
(124,74,1)
(191,38,1)
(160,20,1)
(39,190,1)
(30,152,1)
(116,178,1)
(178,30,1)
(134,184,1)
(95,161,1)
(57,15,1)
(74,46,1)
(196,101,1)
(102,74,1)
(47,11,1)
(158,80,1)
(1,223,1)
(64,106,1)
(87,63,1)
(36,138,1)
(41,143,1)
(209,169,1)
(219,60,1)
(179,68,1)
(222,96,1)
(51,194,1)
(63,60,1)
(45,80,1)
(70,118,1)
(153,114,1)
(84,24,1)
(123,19,1)
(135,77,1)
(43,196,1)
(172,188,1)
(194,70,1)
(219,87,1)
(145,150,1)
(214,12,1)
(128,98,1)
(83,82,1)
(90,27,1)
(100,30,1)
(118,69,1)
(216,167,1)
(105,123,1)
(107,7,1)
(17,185,1)
(20,105,1)
(62,191,1)
(207,155,1)
(168,170,1)
(228,104,1)
(203,9,1)
(79,172,1)
(145,82,1)
(204,146,1)
(3,147,1)
(146,186,1)
(218,107,1)
(19,52,1)
(151,155,1)
(91,161,1)
(188,66,1)
(228,93,1)
(232,183,1)
(217,3,1)
(153,135,1)
(96,197,1)
(180,41,1)
(77,114,1)
(193,151,1)
(152,49,1)
(75,182,1)
(183,65,1)
(4,210,1)
(188,116,1)
(89,173,1)
(223,44,1)
(29,206,1)
(126,174,1)
(56,74,1)
(13,56,1)
(128,204,1)
(208,83,1)
(149,230,1)
(7,175,1)
(105,189,1)
(69,130,1)
(142,42,1)
(42,47,1)
(8,205,1)
(227,225,1)
(180,169,1)
(129,216,1)
(210,22,1)
(49,71,1)
(66,180,1)
(145,189,1)
(161,127,1)
(185,189,1)
(142,177,1)
(127,209,1)
(37,43,1)
(173,57,1)
(24,4,1)
(82,134,1)
(174,132,1)
(105,52,1)
(161,169,1)
(103,153,1)
(5,40,1)
(36,189,1)
(186,94,1)
(53,157,1)
(69,126,1)
(144,131,1)
(177,217,1)
(131,200,1)
(62,38,1)
(80,183,1)
(33,51,1)
(23,225,1)
(175,121,1)
(106,91,1)
(60,142,1)
(224,109,1)
(46,61,1)
(139,39,1)
(190,175,1)
(42,10,1)
(169,36,1)
(60,155,2)
(27,185,2)
(124,56,2)
(44,161,2)
(183,204,2)
(183,56,2)
(175,155,2)
(149,230,2)
(145,56,2)
(224,189,2)
(98,56,2)
(232,56,2)
(36,189,2)
(65,204,2)
(144,62,2)
(171,204,2)
(228,56,2)
(11,142,2)
(159,62,2)
(223,161,2)
(152,1,2)
(75,185,2)
(169,62,2)
(83,56,2)
(39,190,2)
(39,155,2)
(105,52,2)
(126,142,2)
(165,161,2)
(87,60,2)
(168,142,2)
(80,56,2)
(114,98,2)
(93,20,2)
(17,185,2)
(71,1,2)
(160,20,2)
(193,155,2)
(142,142,2)
(158,56,2)
(69,142,2)
(24,75,2)
(103,153,2)
(113,185,2)
(157,158,2)
(30,1,2)
(185,158,2)
(188,30,2)
(224,145,2)
(142,177,2)
(63,60,2)
(174,142,2)
(115,147,2)
(227,225,2)
(140,158,2)
(185,189,2)
(56,74,2)
(38,189,2)
(94,30,2)
(176,155,2)
(15,185,2)
(195,56,2)
(81,185,2)
(217,155,2)
(102,74,2)
(89,185,2)
(19,185,2)
(52,73,2)
(68,185,2)
(230,185,2)
(53,158,2)
(52,179,2)
(33,177,2)
(127,62,2)
(52,185,2)
(1,66,2)
(42,146,2)
(155,225,2)
(142,155,2)
(41,161,2)
(69,132,2)
(62,20,2)
(69,126,2)
(169,36,2)
(65,56,2)
(134,56,2)
(191,20,2)
(96,185,2)
(45,204,2)
(158,80,2)
(155,155,2)
(34,158,2)
(130,142,2)
(70,118,2)
(47,142,2)
(24,185,2)
(173,185,2)
(79,30,2)
(118,69,2)
(40,158,2)
(123,185,2)
(42,142,2)
(54,30,2)
(116,30,2)
(105,123,2)
(194,118,2)
(128,204,2)
(151,155,2)
(62,38,2)
(51,142,2)
(20,185,2)
(229,56,2)
(135,169,2)
(78,56,2)
(180,161,2)
(161,62,2)
(135,114,2)
(66,161,2)
(146,186,2)
(48,56,2)
(106,161,2)
(91,161,2)
(12,142,2)
(118,142,2)
(104,158,2)
(152,66,2)
(204,30,2)
(3,155,2)
(218,155,2)
(222,96,2)
(186,30,2)
(189,5,2)
(142,42,2)
(49,1,2)
(100,30,2)
(114,56,2)
(64,161,2)
(42,155,2)
(178,30,2)
(69,39,2)
(153,56,2)
(184,56,2)
(167,185,2)
(138,62,2)
(23,155,2)
(147,39,2)
(121,155,2)
(37,43,2)
(90,185,2)
(143,161,2)
(38,20,2)
(56,56,2)
(227,155,2)
(80,204,2)
(180,169,2)
(172,30,2)
(222,185,2)
(180,41,2)
(190,175,2)
(33,142,2)
(1,161,2)
(47,155,2)
(210,185,2)
(208,56,2)
(201,185,2)
(216,185,2)
(145,82,2)
(146,30,2)
(109,145,2)
(147,155,2)
(129,185,2)
(22,185,2)
(133,161,2)
(220,155,2)
(197,185,2)
(200,62,2)
(117,158,2)
(149,185,2)
(181,185,2)
(42,37,2)
(206,155,2)
(82,56,2)
(24,4,2)
(105,185,2)
(30,152,2)
(205,155,2)
(36,62,2)
(209,62,2)
(6,56,2)
(128,56,2)
(16,185,2)
(95,161,2)
(170,142,2)
(177,155,2)
(102,56,2)
(214,142,2)
(45,56,2)
(20,105,2)
(29,155,2)
(5,158,2)
(171,56,2)
(203,158,2)
(179,185,2)
(219,155,2)
(8,155,2)
(80,171,2)
(224,82,2)
(77,114,2)
(232,204,2)
(72,20,2)
(87,39,2)
(114,169,2)
(188,66,2)
(154,147,2)
(105,189,2)
(158,204,2)
(66,180,2)
(84,185,2)
(107,155,2)
(80,183,2)
(145,189,2)
(31,158,2)
(190,155,2)
(161,169,2)
(131,62,2)
(42,10,2)
(212,56,2)
(139,155,2)
(9,158,2)
(119,155,2)
(118,168,2)
(57,185,2)
(11,155,2)
(189,158,2)
(7,155,2)
(135,98,2)
(132,142,2)
(150,56,2)
(4,185,2)
(182,185,2)
(30,161,2)
(226,56,2)
-----------------------------------
(0,)
(1,recvResult == SOCKET_ERROR)
(2,)
(3,i)
(4,sizeof(service)
(5,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(6,INVALID_SOCKET)
(7,pFile)
(8,pFile)
(9,1)
(10,size_t)
(11,i)
(12,SENTENCE)
(13,j)
(14,do)
(15,service.sin_addr.s_addr = INADDR_ANY)
(16,sin_addr)
(17,break;)
(18,)
(19,service)
(20,bind(listenSocket, (struct sockaddr*)
(21,wsaData)
(22,0)
(23,j)
(24,memset(&service, 0, sizeof(service)
(25,if (listenSocket != INVALID_SOCKET)
(26,if (bind(listenSocket, (struct sockaddr*)
(27,sin_family)
(28,j)
(29,*pFile = NULL)
(30,recvResult == SOCKET_ERROR || recvResult == 0)
(31,AF_INET)
(32,if (recvResult == SOCKET_ERROR || recvResult == 0)
(33,i++)
(34,SOCK_STREAM)
(35,)
(36,accept(listenSocket, NULL, NULL)
(37,count = -1)
(38,listen(listenSocket, LISTEN_BACKLOG)
(39,pFile = fopen(filename, "w+")
(40,IPPROTO_TCP)
(41,CHAR_ARRAY_SIZE - 1)
(42,(size_t)
(43,-1)
(44,recvResult)
(45,NO_ERROR)
(46,0)
(47,count)
(48,i)
(49,0)
(50,i)
(51,i)
(52,(struct sockaddr*)
(53,INVALID_SOCKET)
(54,count)
(55,)
(56,i < 1)
(57,service)
(58,acceptSocket)
(59,for (i = 0; i < (size_t)
(60,pFile)
(61,i)
(62,listen(listenSocket, LISTEN_BACKLOG)
(63,pFile)
(64,inputBuffer)
(65,2)
(66,recvResult = recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(67,filename)
(68,service)
(69,fwrite(SENTENCE, sizeof(char)
(70,1)
(71,recvResult)
(72,LISTEN_BACKLOG)
(73,struct sockaddr*)
(74,i = 0)
(75,&service)
(76,recvResult)
(77,acceptSocket)
(78,0)
(79,inputBuffer[recvResult] = \'\\0\')
(80,WSAStartup(MAKEWORD(2,2)
(81,INADDR_ANY)
(82,listenSocket = INVALID_SOCKET)
(83,acceptSocket)
(84,service)
(85,if (acceptSocket != INVALID_SOCKET)
(86,if (WSAStartup(MAKEWORD(2,2)
(87,fclose(pFile)
(88,inputBuffer)
(89,service.sin_port)
(90,service.sin_family)
(91,recvResult)
(92,for(j = 0; j < 1; j++)
(93,break;)
(94,inputBuffer)
(95,break;)
(96,htons(TCP_PORT)
(97,0)
(98,acceptSocket = INVALID_SOCKET)
(99,)
(100,break;)
(101,count)
(102,i++)
(103,WSACleanup()
(104,break;)
(105,bind(listenSocket, (struct sockaddr*)
(106,acceptSocket)
(107,filename)
(108,)
(109,listenSocket)
(110,for(i = 0; i < 1; i++)
(111,)
(112,pFile)
(113,listenSocket)
(114,acceptSocket != INVALID_SOCKET)
(115,1)
(116,recvResult)
(117,listenSocket)
(118,strlen(SENTENCE)
(119,1)
(120,)
(121,"output_bad.txt")
(122,listenSocket)
(123,sizeof(service)
(124,i)
(125,count)
(126,strlen(SENTENCE)
(127,SOCKET_ERROR)
(128,2)
(129,service)
(130,pFile)
(131,listenSocket)
(132,sizeof(char)
(133,0)
(134,INVALID_SOCKET)
(135,CLOSE_SOCKET(acceptSocket)
(136,)
(137,)
(138,NULL)
(139,pFile)
(140,wsaDataInit)
(141,if (acceptSocket == SOCKET_ERROR)
(142,i < (size_t)
(143,1)
(144,NULL)
(145,listenSocket != INVALID_SOCKET)
(146,count = atoi(inputBuffer)
(147,pFile == NULL)
(148,)
(149,service.sin_addr.s_addr)
(150,INVALID_SOCKET)
(151,i)
(152,recvResult == 0)
(153,wsaDataInit)
(154,exit(1)
(155,j < 1)
(156,)
(157,listenSocket)
(158,WSAStartup(MAKEWORD(2,2)
(159,break;)
(160,listenSocket)
(161,acceptSocket == SOCKET_ERROR)
(162,)
(163,)
(164,wsaDataInit)
(165,CHAR_ARRAY_SIZE)
(166,)
(167,AF_INET)
(168,strlen(SENTENCE)
(169,acceptSocket = accept(listenSocket, NULL, NULL)
(170,SENTENCE)
(171,&wsaData)
(172,\'\\0\')
(173,sin_port)
(174,SENTENCE)
(175,*filename = "output_bad.txt")
(176,NULL)
(177,i = 0)
(178,inputBuffer)
(179,&service)
(180,recv(acceptSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(181,s_addr)
(182,service)
(183,MAKEWORD(2,2)
(184,listenSocket)
(185,listenSocket == INVALID_SOCKET)
(186,atoi(inputBuffer)
(187,if (listen(listenSocket, LISTEN_BACKLOG)
(188,inputBuffer[recvResult])
(189,listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(190,fopen(filename, "w+")
(191,SOCKET_ERROR)
(192,)
(193,0)
(194,exit(1)
(195,wsaDataInit = 0)
(196,1)
(197,TCP_PORT)
(198,service)
(199,i)
(200,acceptSocket)
(201,SOCKET_ERROR)
(202,if (pFile == NULL)
(203,wsaDataInit = 1)
(204,0)
(205,i = 0)
(206,NULL)
(207,RET)
(208,INVALID_SOCKET)
(209,acceptSocket)
(210,service)
(211,if (listenSocket == INVALID_SOCKET)
(212,wsaDataInit)
(213,)
(214,char)
(215,if (strlen(SENTENCE)
(216,service.sin_family = AF_INET)
(217,0)
(218,"w+")
(219,j)
(220,filename)
(221,if (wsaDataInit)
(222,service.sin_port = htons(TCP_PORT)
(223,SOCKET_ERROR)
(224,CLOSE_SOCKET(listenSocket)
(225,j = 0)
(226,1)
(227,j++)
(228,listenSocket)
(229,acceptSocket)
(230,service.sin_addr)
(231,if (pFile)
(232,wsaData)
(233,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^