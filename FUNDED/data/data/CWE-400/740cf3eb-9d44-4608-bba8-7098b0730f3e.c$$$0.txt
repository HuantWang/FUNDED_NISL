-----label-----
1
-----code-----
void CWE401_Memory_Leak__int_calloc_14_bad()
{
    int * data;
    data = NULL;
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (int *)calloc(100, sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
    }
    if(globalFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
20,21
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
61,62
62,63
62,64
63,64
65,66
65,67
66,67
69,70
69,71
70,71
70,72
71,72
74,75
-----nextToken-----
2,4,8,10,11,15,17,21,22,27,30,32,35,36,39,40,44,46,51,53,58,59,60,64,67,68,72,73,75
-----computeFrom-----
13,14
13,15
19,20
19,21
25,26
25,27
42,43
42,44
55,56
55,57
70,71
70,72
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__int_calloc_14_bad(){    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__int_calloc_14_bad()
CWE401_Memory_Leak__int_calloc_14_bad
{    int * data;    data = NULL;    if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }    if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int * data;
int * data;
int
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalFive==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (int *)calloc(100, sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);    }
data = (int *)calloc(100, sizeof(int));
data = (int *)calloc(100, sizeof(int))
data
data
(int *)calloc(100, sizeof(int))
int *
int
*
*
calloc(100, sizeof(int))
calloc
calloc
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
if(globalFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalFive==5
globalFive
globalFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(11,2,0)
(4,27,0)
(19,8,0)
(27,10,0)
(34,35,0)
(26,10,0)
(21,33,0)
(22,16,0)
(39,38,0)
(16,30,0)
(13,27,0)
(7,12,0)
(36,10,0)
(30,38,0)
(17,6,0)
(20,30,0)
(29,25,0)
(31,37,0)
(33,21,0)
(23,21,0)
(18,37,0)
(32,35,0)
(6,30,0)
(3,38,0)
(0,12,0)
(40,6,0)
(14,16,0)
(30,21,0)
(21,23,0)
(16,39,0)
(29,2,0)
(9,39,0)
(28,10,0)
(40,38,0)
(21,30,0)
(2,29,0)
(24,33,0)
(8,33,0)
(37,30,0)
(33,8,0)
(6,40,0)
(6,39,0)
(15,6,0)
(29,2,1)
(20,12,1)
(18,30,1)
(9,16,1)
(6,30,1)
(37,31,1)
(30,21,1)
(34,12,1)
(11,37,1)
(21,23,1)
(37,30,1)
(39,9,1)
(17,39,1)
(22,37,1)
(19,24,1)
(16,14,1)
(12,0,1)
(21,33,1)
(34,40,1)
(32,34,1)
(22,29,1)
(35,32,1)
(24,20,1)
(31,18,1)
(7,27,1)
(6,39,1)
(1,35,1)
(8,19,1)
(40,6,1)
(6,15,1)
(15,17,1)
(2,11,1)
(14,22,1)
(13,4,1)
(16,30,1)
(27,13,1)
(33,8,1)
(0,7,1)
(33,8,2)
(18,12,2)
(24,12,2)
(9,12,2)
(15,12,2)
(8,12,2)
(21,12,2)
(40,12,2)
(11,37,2)
(39,12,2)
(16,30,2)
(40,6,2)
(14,12,2)
(6,30,2)
(30,21,2)
(16,12,2)
(29,37,2)
(33,12,2)
(37,12,2)
(20,12,2)
(21,23,2)
(37,30,2)
(30,12,2)
(29,2,2)
(19,12,2)
(31,12,2)
(6,12,2)
(22,12,2)
(2,37,2)
(17,12,2)
(6,39,2)
(21,33,2)
-----------------------------------
(0,5)
(1,RET)
(2,-1)
(3,if (data == NULL)
(4,data)
(5, sizeof(int)
(6,data[0])
(7,globalFive)
(8,sizeof(int)
(9,5)
(10,)
(11,1)
(12,globalFive==5)
(13,NULL)
(14,0)
(15,0)
(16,data[0])
(17,data)
(18,data)
(19,int)
(20,data)
(21,(int *)
(22,data)
(23,int *)
(24,100)
(25,)
(26,if(globalFive==5)
(27,data = NULL)
(28,if(globalFive==5)
(29,exit(-1)
(30,data = (int *)
(31,NULL)
(32,5)
(33,calloc(100, sizeof(int)
(34,globalFive)
(35,globalFive==5)
(36,data)
(37,data == NULL)
(38,)
(39,data[0] = 5)
(40,printIntLine(data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^